
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/dd
        UUID: 62A4EB6F-51BA-57B1-8BB2-6688A8323B55
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0x10850[ (67664 bytes)
        ; File offset : [0; 67664[ (67664 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0x80 ; '.'
0000000000000019         db  0x3c ; '<'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0xe8 ; '.'
0000000000000029         db  0x1f ; '.'
000000000000002a         db  0x05 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0x50 ; 'P'
00000000000000d1         db  0x08 ; '.'
00000000000000d2         db  0x01 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0x50 ; 'P'
00000000000000d9         db  0x08 ; '.'
00000000000000da         db  0x01 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0x90 ; '.'
00000000000000f1         db  0x0a ; '.'
00000000000000f2         db  0x01 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0x90 ; '.'
00000000000000f9         db  0x0a ; '.'
00000000000000fa         db  0x21 ; '!'
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0x90 ; '.'                                         ; DATA XREF=main+559, main+2358, main+3460, main+3544, human_readable+924, quotearg_free+87, rpl_fflush+18, slotvec0
0000000000000101         db  0x0a ; '.'
0000000000000102         db  0x21 ; '!'
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0x18 ; '.'
0000000000000109         db  0x06 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0xd0 ; '.'
0000000000000111         db  0x0a ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0x78 ; 'x'
0000000000000129         db  0x0b ; '.'
000000000000012a         db  0x01 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0x78 ; 'x'
0000000000000131         db  0x0b ; '.'
0000000000000132         db  0x21 ; '!'
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0x78 ; 'x'
0000000000000139         db  0x0b ; '.'
000000000000013a         db  0x21 ; '!'
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'                                         ; DATA XREF=human_options+440
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0x8c ; '.'
0000000000000199         db  0xee ; '.'
000000000000019a         db  0x00 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0x8c ; '.'
00000000000001a1         db  0xee ; '.'
00000000000001a2         db  0x00 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0x8c ; '.'
00000000000001a9         db  0xee ; '.'
00000000000001aa         db  0x00 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0xd4 ; '.'
00000000000001b1         db  0x03 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'                                         ; DATA XREF=main+1623, main+4622
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0xd4 ; '.'
00000000000001b9         db  0x03 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'                                         ; DATA XREF=print_xfer_stats+74, print_xfer_stats+192
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'                                         ; DATA XREF=print_xfer_stats+112, alloc_ibuf.part.4+123, alloc_obuf.part.5+123
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=main+1604, main+1614, main+2987, main+3012, main+4724, human_options+288, human_options+293, human_options+385, xstrtoumax+573
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0x90 ; '.'
0000000000000209         db  0x0a ; '.'
000000000000020a         db  0x01 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0x90 ; '.'
0000000000000211         db  0x0a ; '.'
0000000000000212         db  0x21 ; '!'
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0x90 ; '.'
0000000000000219         db  0x0a ; '.'
000000000000021a         db  0x21 ; '!'
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x70 ; 'p'
0000000000000221         db  0x05 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x70 ; 'p'
0000000000000229         db  0x05 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000000238         db  0x2f ; '/'
0000000000000239         db  0x6c ; 'l'
000000000000023a         db  0x69 ; 'i'
000000000000023b         db  0x62 ; 'b'
000000000000023c         db  0x36 ; '6'
000000000000023d         db  0x34 ; '4'
000000000000023e         db  0x2f ; '/'
000000000000023f         db  0x6c ; 'l'
0000000000000240         db  0x64 ; 'd'
0000000000000241         db  0x2d ; '-'
0000000000000242         db  0x6c ; 'l'
0000000000000243         db  0x69 ; 'i'
0000000000000244         db  0x6e ; 'n'
0000000000000245         db  0x75 ; 'u'
0000000000000246         db  0x78 ; 'x'
0000000000000247         db  0x2d ; '-'
0000000000000248         db  0x78 ; 'x'
0000000000000249         db  0x38 ; '8'
000000000000024a         db  0x36 ; '6'
000000000000024b         db  0x2d ; '-'
000000000000024c         db  0x36 ; '6'
000000000000024d         db  0x34 ; '4'
000000000000024e         db  0x2e ; '.'
000000000000024f         db  0x73 ; 's'
0000000000000250         db  0x6f ; 'o'
0000000000000251         db  0x2e ; '.'
0000000000000252         db  0x32 ; '2'
0000000000000253         db  0x00 ; '.'


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0x62 ; 'b'
0000000000000285         db  0xa4 ; '.'
0000000000000286         db  0xeb ; '.'
0000000000000287         db  0x6f ; 'o'                                         ; DATA XREF=human_readable+189
0000000000000288         db  0x51 ; 'Q'
0000000000000289         db  0xba ; '.'
000000000000028a         db  0x57 ; 'W'
000000000000028b         db  0xb1 ; '.'
000000000000028c         db  0x8b ; '.'
000000000000028d         db  0xb2 ; '.'
000000000000028e         db  0x66 ; 'f'                                         ; DATA XREF=print_xfer_stats+508, print_xfer_stats+520
000000000000028f         db  0x88 ; '.'
0000000000000290         db  0xa8 ; '.'
0000000000000291         db  0x32 ; '2'
0000000000000292         db  0x3b ; ';'
0000000000000293         db  0x55 ; 'U'
0000000000000294         db  0xd7 ; '.'
0000000000000295         db  0xc6 ; '.'
0000000000000296         db  0xdc ; '.'
0000000000000297         db  0x4c ; 'L'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2dc[ (68 bytes)
        ; File offset : [664; 732[ (68 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x4f ; 'O'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x06 ; '.'                                         ; DATA XREF=alloc_ibuf.part.4+2, alloc_ibuf.part.4+99, alloc_obuf.part.5+2, alloc_obuf.part.5+99
00000000000002a9         db  0xc9 ; '.'
00000000000002aa         db  0x41 ; 'A'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0x20 ; ' '
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x18 ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x4f ; 'O'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x50 ; 'P'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x56 ; 'V'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x96 ; '.'
00000000000002c5         db  0xa0 ; '.'
00000000000002c6         db  0x89 ; '.'
00000000000002c7         db  0x97 ; '.'
00000000000002c8         db  0xce ; '.'
00000000000002c9         db  0x2c ; ','
00000000000002ca         db  0x63 ; 'c'
00000000000002cb         db  0x72 ; 'r'
00000000000002cc         db  0xe4 ; '.'
00000000000002cd         db  0x62 ; 'b'
00000000000002ce         db  0x41 ; 'A'
00000000000002cf         db  0xf5 ; '.'
00000000000002d0         db  0xc0 ; '.'
00000000000002d1         db  0xb3 ; '.'
00000000000002d2         db  0xf7 ; '.'
00000000000002d3         db  0x12 ; '.'
00000000000002d4         db  0x39 ; '9'
00000000000002d5         db  0xf2 ; '.'
00000000000002d6         db  0x8b ; '.'
00000000000002d7         db  0x1c ; '.'
00000000000002d8         db  0x33 ; '3'
00000000000002d9         db  0xc4 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0x00 ; '.'
00000000000002dd         db  0x00 ; '.'
00000000000002de         db  0x00 ; '.'
00000000000002df         db  0x00 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0xb08[ (2088 bytes)
        ; File offset : [736; 2824[ (2088 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0x83 ; '.'
00000000000002f9         db  0x02 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'
0000000000000310         db  0xcc ; '.'
0000000000000311         db  0x01 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0x6d ; 'm'
0000000000000329         db  0x00 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0xeb ; '.'
0000000000000341         db  0x01 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0xa4 ; '.'
0000000000000359         db  0x01 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0x32 ; '2'
0000000000000371         db  0x03 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x12 ; '.'
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0xa1 ; '.'
0000000000000389         db  0x00 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x3c ; '<'
00000000000003a1         db  0x01 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x12 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0x06 ; '.'
00000000000003b9         db  0x01 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x12 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0xd3 ; '.'
00000000000003d1         db  0x00 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0x31 ; '1'                                         ; DATA XREF=xstrtoumax+420
00000000000003e9         db  0x00 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'
0000000000000400         db  0xa1 ; '.'                                         ; DATA XREF=main+2350, human_readable+80, human_options+458, xstrtoumax+437, xstrtoumax+806, xstrtoumax+878, rpl_fcntl+288
0000000000000401         db  0x03 ; '.'                                         ; DATA XREF=rpl_fcntl+272
0000000000000402         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+280
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x20 ; ' '
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+81, rpl_fcntl+123, rpl_fcntl+264
0000000000000407         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+256
0000000000000408         db  0x00 ; '.'                                         ; DATA XREF=vasnprintf+29
0000000000000409         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+336
000000000000040a         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+350
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0xa7 ; '.'
0000000000000419         db  0x00 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x4e ; 'N'
0000000000000431         db  0x02 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0x1d ; '.'
0000000000000449         db  0x02 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0x31 ; '1'
0000000000000461         db  0x01 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0xba ; '.'
0000000000000479         db  0x02 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0x40 ; '@'
0000000000000491         db  0x02 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0x17 ; '.'
00000000000004a9         db  0x02 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0xda ; '.'
00000000000004c1         db  0x02 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0x96 ; '.'
00000000000004d9         db  0x01 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0xd6 ; '.'
00000000000004f1         db  0x02 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'                                         ; DATA XREF=main+2188, main+2193
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x5d ; ']'
0000000000000509         db  0x00 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'                                         ; DATA XREF=print_xfer_stats+486
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0xe1 ; '.'
0000000000000521         db  0x00 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x17 ; '.'
0000000000000539         db  0x01 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x79 ; 'y'
0000000000000551         db  0x00 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0xfa ; '.'
0000000000000569         db  0x01 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0x29 ; ')'
0000000000000581         db  0x00 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x65 ; 'e'
0000000000000599         db  0x01 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'
00000000000005b0         db  0x5e ; '^'
00000000000005b1         db  0x02 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x05 ; '.'
00000000000005c9         db  0x03 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0x55 ; 'U'
00000000000005e1         db  0x00 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x39 ; '9'
00000000000005f9         db  0x00 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x89 ; '.'
0000000000000611         db  0x01 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0xc5 ; '.'
0000000000000629         db  0x00 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x10 ; '.'
0000000000000641         db  0x03 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0x2a ; '*'
0000000000000659         db  0x01 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0xe5 ; '.'
0000000000000671         db  0x01 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x97 ; '.'
0000000000000689         db  0x01 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0xf8 ; '.'
00000000000006a1         db  0x00 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x4d ; 'M'
00000000000006b9         db  0x01 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x12 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0xec ; '.'
00000000000006d1         db  0x02 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0x52 ; 'R'
00000000000006e9         db  0x01 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x23 ; '#'
0000000000000701         db  0x03 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x10 ; '.'
0000000000000719         db  0x01 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0x27 ; '''
0000000000000731         db  0x02 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x1e ; '.'
0000000000000749         db  0x01 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0xbd ; '.'
0000000000000761         db  0x03 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x20 ; ' '
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0x8f ; '.'
0000000000000779         db  0x01 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x0f ; '.'
0000000000000791         db  0x02 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x9d ; '.'
00000000000007a9         db  0x01 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0x0b ; '.'
00000000000007c1         db  0x00 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0xb2 ; '.'
00000000000007d9         db  0x01 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'                                         ; DATA XREF=print_xfer_stats+16, print_xfer_stats+451
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0x06 ; '.'
00000000000007f1         db  0x02 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'                                         ; DATA XREF=main+946, main+2967
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0xd3 ; '.'
0000000000000809         db  0x01 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0x93 ; '.'
0000000000000821         db  0x00 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0x1f ; '.'
0000000000000839         db  0x00 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x12 ; '.'
0000000000000851         db  0x00 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x12 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0xce ; '.'
0000000000000869         db  0x02 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x67 ; 'g'
0000000000000881         db  0x00 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0x9b ; '.'
0000000000000899         db  0x00 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x12 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0x59 ; 'Y'
00000000000008b1         db  0x02 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0xfe ; '.'
00000000000008c9         db  0x02 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0x43 ; 'C'
00000000000008e1         db  0x00 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x12 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x00 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x00 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x00 ; '.'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x00 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0x52 ; 'R'
00000000000008f9         db  0x03 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x12 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x00 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0x00 ; '.'
0000000000000901         db  0x00 ; '.'
0000000000000902         db  0x00 ; '.'
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x00 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0x59 ; 'Y'
0000000000000911         db  0x01 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x12 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x00 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0x00 ; '.'
0000000000000919         db  0x00 ; '.'
000000000000091a         db  0x00 ; '.'
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x00 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0x34 ; '4'
0000000000000929         db  0x02 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x12 ; '.'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x00 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0x00 ; '.'
0000000000000931         db  0x00 ; '.'
0000000000000932         db  0x00 ; '.'
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x00 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0xa8 ; '.'
0000000000000941         db  0x00 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x12 ; '.'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x00 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0x00 ; '.'
0000000000000949         db  0x00 ; '.'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x00 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0x16 ; '.'
0000000000000959         db  0x02 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x12 ; '.'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x00 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0x00 ; '.'
0000000000000961         db  0x00 ; '.'
0000000000000962         db  0x00 ; '.'
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x00 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0x6a ; 'j'
0000000000000971         db  0x01 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x12 ; '.'
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x00 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x00 ; '.'
0000000000000979         db  0x00 ; '.'
000000000000097a         db  0x00 ; '.'
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x00 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0xcc ; '.'
0000000000000989         db  0x03 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x20 ; ' '
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x00 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0x00 ; '.'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x00 ; '.'
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x00 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0xaa ; '.'
00000000000009a1         db  0x01 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x12 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x00 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0x00 ; '.'
00000000000009a9         db  0x00 ; '.'
00000000000009aa         db  0x00 ; '.'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x00 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'
00000000000009b8         db  0x8a ; '.'
00000000000009b9         db  0x00 ; '.'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x00 ; '.'
00000000000009bc         db  0x12 ; '.'
00000000000009bd         db  0x00 ; '.'
00000000000009be         db  0x00 ; '.'
00000000000009bf         db  0x00 ; '.'
00000000000009c0         db  0x00 ; '.'
00000000000009c1         db  0x00 ; '.'
00000000000009c2         db  0x00 ; '.'
00000000000009c3         db  0x00 ; '.'
00000000000009c4         db  0x00 ; '.'
00000000000009c5         db  0x00 ; '.'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x00 ; '.'
00000000000009c8         db  0x00 ; '.'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x00 ; '.'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x00 ; '.'
00000000000009cd         db  0x00 ; '.'
00000000000009ce         db  0x00 ; '.'
00000000000009cf         db  0x00 ; '.'
00000000000009d0         db  0xab ; '.'
00000000000009d1         db  0x02 ; '.'
00000000000009d2         db  0x00 ; '.'
00000000000009d3         db  0x00 ; '.'
00000000000009d4         db  0x22 ; '"'
00000000000009d5         db  0x00 ; '.'
00000000000009d6         db  0x00 ; '.'
00000000000009d7         db  0x00 ; '.'
00000000000009d8         db  0x00 ; '.'
00000000000009d9         db  0x00 ; '.'
00000000000009da         db  0x00 ; '.'
00000000000009db         db  0x00 ; '.'
00000000000009dc         db  0x00 ; '.'
00000000000009dd         db  0x00 ; '.'
00000000000009de         db  0x00 ; '.'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x00 ; '.'
00000000000009e1         db  0x00 ; '.'
00000000000009e2         db  0x00 ; '.'
00000000000009e3         db  0x00 ; '.'
00000000000009e4         db  0x00 ; '.'
00000000000009e5         db  0x00 ; '.'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x00 ; '.'
00000000000009e8         db  0x78 ; 'x'
00000000000009e9         db  0x01 ; '.'
00000000000009ea         db  0x00 ; '.'
00000000000009eb         db  0x00 ; '.'
00000000000009ec         db  0x12 ; '.'
00000000000009ed         db  0x00 ; '.'
00000000000009ee         db  0x00 ; '.'
00000000000009ef         db  0x00 ; '.'
00000000000009f0         db  0x00 ; '.'
00000000000009f1         db  0x00 ; '.'
00000000000009f2         db  0x00 ; '.'
00000000000009f3         db  0x00 ; '.'
00000000000009f4         db  0x00 ; '.'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x00 ; '.'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x00 ; '.'
00000000000009f9         db  0x00 ; '.'
00000000000009fa         db  0x00 ; '.'
00000000000009fb         db  0x00 ; '.'
00000000000009fc         db  0x00 ; '.'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x00 ; '.'
00000000000009ff         db  0x00 ; '.'
0000000000000a00         db  0x97 ; '.'
0000000000000a01         db  0x02 ; '.'
0000000000000a02         db  0x00 ; '.'
0000000000000a03         db  0x00 ; '.'
0000000000000a04         db  0x12 ; '.'
0000000000000a05         db  0x00 ; '.'
0000000000000a06         db  0x00 ; '.'
0000000000000a07         db  0x00 ; '.'
0000000000000a08         db  0x00 ; '.'
0000000000000a09         db  0x00 ; '.'
0000000000000a0a         db  0x00 ; '.'
0000000000000a0b         db  0x00 ; '.'
0000000000000a0c         db  0x00 ; '.'
0000000000000a0d         db  0x00 ; '.'
0000000000000a0e         db  0x00 ; '.'
0000000000000a0f         db  0x00 ; '.'
0000000000000a10         db  0x00 ; '.'
0000000000000a11         db  0x00 ; '.'
0000000000000a12         db  0x00 ; '.'
0000000000000a13         db  0x00 ; '.'
0000000000000a14         db  0x00 ; '.'
0000000000000a15         db  0x00 ; '.'
0000000000000a16         db  0x00 ; '.'
0000000000000a17         db  0x00 ; '.'
0000000000000a18         db  0xbe ; '.'
0000000000000a19         db  0x01 ; '.'
0000000000000a1a         db  0x00 ; '.'
0000000000000a1b         db  0x00 ; '.'
0000000000000a1c         db  0x12 ; '.'
0000000000000a1d         db  0x00 ; '.'
0000000000000a1e         db  0x00 ; '.'
0000000000000a1f         db  0x00 ; '.'
0000000000000a20         db  0x00 ; '.'
0000000000000a21         db  0x00 ; '.'
0000000000000a22         db  0x00 ; '.'
0000000000000a23         db  0x00 ; '.'
0000000000000a24         db  0x00 ; '.'
0000000000000a25         db  0x00 ; '.'
0000000000000a26         db  0x00 ; '.'
0000000000000a27         db  0x00 ; '.'
0000000000000a28         db  0x00 ; '.'
0000000000000a29         db  0x00 ; '.'
0000000000000a2a         db  0x00 ; '.'
0000000000000a2b         db  0x00 ; '.'
0000000000000a2c         db  0x00 ; '.'
0000000000000a2d         db  0x00 ; '.'
0000000000000a2e         db  0x00 ; '.'
0000000000000a2f         db  0x00 ; '.'
0000000000000a30         db  0xc0 ; '.'
0000000000000a31         db  0x02 ; '.'
0000000000000a32         db  0x00 ; '.'
0000000000000a33         db  0x00 ; '.'
0000000000000a34         db  0x12 ; '.'
0000000000000a35         db  0x00 ; '.'
0000000000000a36         db  0x00 ; '.'
0000000000000a37         db  0x00 ; '.'
0000000000000a38         db  0x00 ; '.'
0000000000000a39         db  0x00 ; '.'
0000000000000a3a         db  0x00 ; '.'
0000000000000a3b         db  0x00 ; '.'
0000000000000a3c         db  0x00 ; '.'
0000000000000a3d         db  0x00 ; '.'
0000000000000a3e         db  0x00 ; '.'
0000000000000a3f         db  0x00 ; '.'
0000000000000a40         db  0x00 ; '.'
0000000000000a41         db  0x00 ; '.'
0000000000000a42         db  0x00 ; '.'
0000000000000a43         db  0x00 ; '.'
0000000000000a44         db  0x00 ; '.'
0000000000000a45         db  0x00 ; '.'
0000000000000a46         db  0x00 ; '.'
0000000000000a47         db  0x00 ; '.'
0000000000000a48         db  0x82 ; '.'
0000000000000a49         db  0x01 ; '.'
0000000000000a4a         db  0x00 ; '.'
0000000000000a4b         db  0x00 ; '.'
0000000000000a4c         db  0x11 ; '.'
0000000000000a4d         db  0x00 ; '.'
0000000000000a4e         db  0x19 ; '.'
0000000000000a4f         db  0x00 ; '.'
0000000000000a50         db  0xc8 ; '.'
0000000000000a51         db  0x10 ; '.'
0000000000000a52         db  0x21 ; '!'
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x00 ; '.'
0000000000000a55         db  0x00 ; '.'
0000000000000a56         db  0x00 ; '.'
0000000000000a57         db  0x00 ; '.'
0000000000000a58         db  0x08 ; '.'
0000000000000a59         db  0x00 ; '.'
0000000000000a5a         db  0x00 ; '.'
0000000000000a5b         db  0x00 ; '.'
0000000000000a5c         db  0x00 ; '.'
0000000000000a5d         db  0x00 ; '.'
0000000000000a5e         db  0x00 ; '.'
0000000000000a5f         db  0x00 ; '.'
0000000000000a60         db  0x37 ; '7'
0000000000000a61         db  0x03 ; '.'
0000000000000a62         db  0x00 ; '.'
0000000000000a63         db  0x00 ; '.'
0000000000000a64         db  0x11 ; '.'
0000000000000a65         db  0x00 ; '.'
0000000000000a66         db  0x19 ; '.'
0000000000000a67         db  0x00 ; '.'
0000000000000a68         db  0xc0 ; '.'
0000000000000a69         db  0x10 ; '.'
0000000000000a6a         db  0x21 ; '!'
0000000000000a6b         db  0x00 ; '.'
0000000000000a6c         db  0x00 ; '.'
0000000000000a6d         db  0x00 ; '.'
0000000000000a6e         db  0x00 ; '.'
0000000000000a6f         db  0x00 ; '.'
0000000000000a70         db  0x08 ; '.'
0000000000000a71         db  0x00 ; '.'
0000000000000a72         db  0x00 ; '.'
0000000000000a73         db  0x00 ; '.'
0000000000000a74         db  0x00 ; '.'
0000000000000a75         db  0x00 ; '.'
0000000000000a76         db  0x00 ; '.'
0000000000000a77         db  0x00 ; '.'
0000000000000a78         db  0xad ; '.'
0000000000000a79         db  0x00 ; '.'
0000000000000a7a         db  0x00 ; '.'
0000000000000a7b         db  0x00 ; '.'
0000000000000a7c         db  0x21 ; '!'
0000000000000a7d         db  0x00 ; '.'
0000000000000a7e         db  0x19 ; '.'
0000000000000a7f         db  0x00 ; '.'
0000000000000a80         db  0xd8 ; '.'
0000000000000a81         db  0x10 ; '.'
0000000000000a82         db  0x21 ; '!'
0000000000000a83         db  0x00 ; '.'
0000000000000a84         db  0x00 ; '.'
0000000000000a85         db  0x00 ; '.'
0000000000000a86         db  0x00 ; '.'
0000000000000a87         db  0x00 ; '.'
0000000000000a88         db  0x08 ; '.'
0000000000000a89         db  0x00 ; '.'
0000000000000a8a         db  0x00 ; '.'
0000000000000a8b         db  0x00 ; '.'
0000000000000a8c         db  0x00 ; '.'
0000000000000a8d         db  0x00 ; '.'
0000000000000a8e         db  0x00 ; '.'
0000000000000a8f         db  0x00 ; '.'
0000000000000a90         db  0x42 ; 'B'
0000000000000a91         db  0x03 ; '.'
0000000000000a92         db  0x00 ; '.'
0000000000000a93         db  0x00 ; '.'
0000000000000a94         db  0x11 ; '.'
0000000000000a95         db  0x00 ; '.'
0000000000000a96         db  0x19 ; '.'
0000000000000a97         db  0x00 ; '.'
0000000000000a98         db  0xd8 ; '.'
0000000000000a99         db  0x10 ; '.'
0000000000000a9a         db  0x21 ; '!'
0000000000000a9b         db  0x00 ; '.'
0000000000000a9c         db  0x00 ; '.'
0000000000000a9d         db  0x00 ; '.'
0000000000000a9e         db  0x00 ; '.'
0000000000000a9f         db  0x00 ; '.'
0000000000000aa0         db  0x08 ; '.'
0000000000000aa1         db  0x00 ; '.'
0000000000000aa2         db  0x00 ; '.'
0000000000000aa3         db  0x00 ; '.'
0000000000000aa4         db  0x00 ; '.'
0000000000000aa5         db  0x00 ; '.'
0000000000000aa6         db  0x00 ; '.'
0000000000000aa7         db  0x00 ; '.'
0000000000000aa8         db  0x65 ; 'e'
0000000000000aa9         db  0x02 ; '.'
0000000000000aaa         db  0x00 ; '.'
0000000000000aab         db  0x00 ; '.'
0000000000000aac         db  0x21 ; '!'
0000000000000aad         db  0x00 ; '.'
0000000000000aae         db  0x19 ; '.'
0000000000000aaf         db  0x00 ; '.'
0000000000000ab0         db  0xc0 ; '.'
0000000000000ab1         db  0x10 ; '.'
0000000000000ab2         db  0x21 ; '!'
0000000000000ab3         db  0x00 ; '.'
0000000000000ab4         db  0x00 ; '.'
0000000000000ab5         db  0x00 ; '.'
0000000000000ab6         db  0x00 ; '.'
0000000000000ab7         db  0x00 ; '.'
0000000000000ab8         db  0x08 ; '.'
0000000000000ab9         db  0x00 ; '.'
0000000000000aba         db  0x00 ; '.'
0000000000000abb         db  0x00 ; '.'
0000000000000abc         db  0x00 ; '.'
0000000000000abd         db  0x00 ; '.'
0000000000000abe         db  0x00 ; '.'
0000000000000abf         db  0x00 ; '.'
0000000000000ac0         db  0xe5 ; '.'
0000000000000ac1         db  0x02 ; '.'
0000000000000ac2         db  0x00 ; '.'
0000000000000ac3         db  0x00 ; '.'
0000000000000ac4         db  0x11 ; '.'
0000000000000ac5         db  0x00 ; '.'
0000000000000ac6         db  0x19 ; '.'
0000000000000ac7         db  0x00 ; '.'
0000000000000ac8         db  0xe0 ; '.'
0000000000000ac9         db  0x10 ; '.'
0000000000000aca         db  0x21 ; '!'
0000000000000acb         db  0x00 ; '.'
0000000000000acc         db  0x00 ; '.'
0000000000000acd         db  0x00 ; '.'
0000000000000ace         db  0x00 ; '.'
0000000000000acf         db  0x00 ; '.'
0000000000000ad0         db  0x04 ; '.'
0000000000000ad1         db  0x00 ; '.'
0000000000000ad2         db  0x00 ; '.'
0000000000000ad3         db  0x00 ; '.'
0000000000000ad4         db  0x00 ; '.'
0000000000000ad5         db  0x00 ; '.'
0000000000000ad6         db  0x00 ; '.'
0000000000000ad7         db  0x00 ; '.'
0000000000000ad8         db  0xde ; '.'
0000000000000ad9         db  0x01 ; '.'
0000000000000ada         db  0x00 ; '.'
0000000000000adb         db  0x00 ; '.'
0000000000000adc         db  0x11 ; '.'
0000000000000add         db  0x00 ; '.'
0000000000000ade         db  0x19 ; '.'
0000000000000adf         db  0x00 ; '.'
0000000000000ae0         db  0x00 ; '.'
0000000000000ae1         db  0x11 ; '.'
0000000000000ae2         db  0x21 ; '!'
0000000000000ae3         db  0x00 ; '.'
0000000000000ae4         db  0x00 ; '.'
0000000000000ae5         db  0x00 ; '.'
0000000000000ae6         db  0x00 ; '.'
0000000000000ae7         db  0x00 ; '.'
0000000000000ae8         db  0x08 ; '.'
0000000000000ae9         db  0x00 ; '.'
0000000000000aea         db  0x00 ; '.'
0000000000000aeb         db  0x00 ; '.'
0000000000000aec         db  0x00 ; '.'
0000000000000aed         db  0x00 ; '.'
0000000000000aee         db  0x00 ; '.'
0000000000000aef         db  0x00 ; '.'
0000000000000af0         db  0x4e ; 'N'
0000000000000af1         db  0x00 ; '.'
0000000000000af2         db  0x00 ; '.'
0000000000000af3         db  0x00 ; '.'
0000000000000af4         db  0x11 ; '.'
0000000000000af5         db  0x00 ; '.'
0000000000000af6         db  0x19 ; '.'
0000000000000af7         db  0x00 ; '.'
0000000000000af8         db  0xd0 ; '.'
0000000000000af9         db  0x10 ; '.'
0000000000000afa         db  0x21 ; '!'
0000000000000afb         db  0x00 ; '.'
0000000000000afc         db  0x00 ; '.'
0000000000000afd         db  0x00 ; '.'
0000000000000afe         db  0x00 ; '.'
0000000000000aff         db  0x00 ; '.'
0000000000000b00         db  0x04 ; '.'
0000000000000b01         db  0x00 ; '.'
0000000000000b02         db  0x00 ; '.'
0000000000000b03         db  0x00 ; '.'
0000000000000b04         db  0x00 ; '.'
0000000000000b05         db  0x00 ; '.'
0000000000000b06         db  0x00 ; '.'
0000000000000b07         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0xb08; 0xeee[ (998 bytes)
        ; File offset : [2824; 3822[ (998 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000b08         db  0x00 ; '.'
0000000000000b09         db  0x6c ; 'l'
0000000000000b0a         db  0x69 ; 'i'
0000000000000b0b         db  0x62 ; 'b'
0000000000000b0c         db  0x63 ; 'c'
0000000000000b0d         db  0x2e ; '.'
0000000000000b0e         db  0x73 ; 's'
0000000000000b0f         db  0x6f ; 'o'
0000000000000b10         db  0x2e ; '.'
0000000000000b11         db  0x36 ; '6'
0000000000000b12         db  0x00 ; '.'
0000000000000b13         db  0x66 ; 'f'
0000000000000b14         db  0x66 ; 'f'
0000000000000b15         db  0x6c ; 'l'
0000000000000b16         db  0x75 ; 'u'
0000000000000b17         db  0x73 ; 's'
0000000000000b18         db  0x68 ; 'h'
0000000000000b19         db  0x00 ; '.'
0000000000000b1a         db  0x5f ; '_'
0000000000000b1b         db  0x5f ; '_'
0000000000000b1c         db  0x70 ; 'p'
0000000000000b1d         db  0x72 ; 'r'
0000000000000b1e         db  0x69 ; 'i'
0000000000000b1f         db  0x6e ; 'n'
0000000000000b20         db  0x74 ; 't'
0000000000000b21         db  0x66 ; 'f'
0000000000000b22         db  0x5f ; '_'
0000000000000b23         db  0x63 ; 'c'
0000000000000b24         db  0x68 ; 'h'
0000000000000b25         db  0x6b ; 'k'
0000000000000b26         db  0x00 ; '.'
0000000000000b27         db  0x73 ; 's'
0000000000000b28         db  0x65 ; 'e'
0000000000000b29         db  0x74 ; 't'
0000000000000b2a         db  0x6c ; 'l'
0000000000000b2b         db  0x6f ; 'o'
0000000000000b2c         db  0x63 ; 'c'
0000000000000b2d         db  0x61 ; 'a'
0000000000000b2e         db  0x6c ; 'l'
0000000000000b2f         db  0x65 ; 'e'
0000000000000b30         db  0x00 ; '.'
0000000000000b31         db  0x6d ; 'm'
0000000000000b32         db  0x62 ; 'b'
0000000000000b33         db  0x72 ; 'r'
0000000000000b34         db  0x74 ; 't'
0000000000000b35         db  0x6f ; 'o'
0000000000000b36         db  0x77 ; 'w'
0000000000000b37         db  0x63 ; 'c'
0000000000000b38         db  0x00 ; '.'
0000000000000b39         db  0x73 ; 's'
0000000000000b3a         db  0x74 ; 't'
0000000000000b3b         db  0x72 ; 'r'
0000000000000b3c         db  0x6e ; 'n'
0000000000000b3d         db  0x63 ; 'c'
0000000000000b3e         db  0x6d ; 'm'
0000000000000b3f         db  0x70 ; 'p'
0000000000000b40         db  0x00 ; '.'
0000000000000b41         db  0x66 ; 'f'
0000000000000b42         db  0x74 ; 't'
                     aRuncate:
0000000000000b43         db         "runcate", 0
0000000000000b4b         db  0x64 ; 'd'
0000000000000b4c         db  0x63 ; 'c'
0000000000000b4d         db  0x6e ; 'n'
0000000000000b4e         db  0x67 ; 'g'
0000000000000b4f         db  0x65 ; 'e'
0000000000000b50         db  0x74 ; 't'
0000000000000b51         db  0x74 ; 't'
0000000000000b52         db  0x65 ; 'e'
0000000000000b53         db  0x78 ; 'x'
0000000000000b54         db  0x74 ; 't'
0000000000000b55         db  0x00 ; '.'
0000000000000b56         db  0x6f ; 'o'
0000000000000b57         db  0x70 ; 'p'
0000000000000b58         db  0x74 ; 't'
0000000000000b59         db  0x69 ; 'i'
0000000000000b5a         db  0x6e ; 'n'
0000000000000b5b         db  0x64 ; 'd'
0000000000000b5c         db  0x00 ; '.'
0000000000000b5d         db  0x73 ; 's'
0000000000000b5e         db  0x74 ; 't'
0000000000000b5f         db  0x72 ; 'r'
0000000000000b60         db  0x72 ; 'r'
0000000000000b61         db  0x63 ; 'c'
0000000000000b62         db  0x68 ; 'h'
0000000000000b63         db  0x72 ; 'r'
0000000000000b64         db  0x00 ; '.'
0000000000000b65         db  0x64 ; 'd'
0000000000000b66         db  0x63 ; 'c'
0000000000000b67         db  0x67 ; 'g'
0000000000000b68         db  0x65 ; 'e'
0000000000000b69         db  0x74 ; 't'
0000000000000b6a         db  0x74 ; 't'
0000000000000b6b         db  0x65 ; 'e'
0000000000000b6c         db  0x78 ; 'x'
0000000000000b6d         db  0x74 ; 't'
0000000000000b6e         db  0x00 ; '.'
0000000000000b6f         db  0x65 ; 'e'
0000000000000b70         db  0x72 ; 'r'
0000000000000b71         db  0x72 ; 'r'
0000000000000b72         db  0x6f ; 'o'
0000000000000b73         db  0x72 ; 'r'
0000000000000b74         db  0x00 ; '.'
0000000000000b75         db  0x73 ; 's'
0000000000000b76         db  0x69 ; 'i'
0000000000000b77         db  0x67 ; 'g'
0000000000000b78         db  0x70 ; 'p'
0000000000000b79         db  0x72 ; 'r'
0000000000000b7a         db  0x6f ; 'o'
0000000000000b7b         db  0x63 ; 'c'
0000000000000b7c         db  0x6d ; 'm'
0000000000000b7d         db  0x61 ; 'a'
0000000000000b7e         db  0x73 ; 's'
0000000000000b7f         db  0x6b ; 'k'
0000000000000b80         db  0x00 ; '.'
0000000000000b81         db  0x5f ; '_'
0000000000000b82         db  0x5f ; '_'
0000000000000b83         db  0x73 ; 's'
0000000000000b84         db  0x74 ; 't'
0000000000000b85         db  0x61 ; 'a'
0000000000000b86         db  0x63 ; 'c'
0000000000000b87         db  0x6b ; 'k'
0000000000000b88         db  0x5f ; '_'
0000000000000b89         db  0x63 ; 'c'
0000000000000b8a         db  0x68 ; 'h'
0000000000000b8b         db  0x6b ; 'k'
0000000000000b8c         db  0x5f ; '_'
0000000000000b8d         db  0x66 ; 'f'
0000000000000b8e         db  0x61 ; 'a'
0000000000000b8f         db  0x69 ; 'i'
0000000000000b90         db  0x6c ; 'l'
0000000000000b91         db  0x00 ; '.'
0000000000000b92         db  0x69 ; 'i'
0000000000000b93         db  0x73 ; 's'
0000000000000b94         db  0x77 ; 'w'
0000000000000b95         db  0x70 ; 'p'
0000000000000b96         db  0x72 ; 'r'
0000000000000b97         db  0x69 ; 'i'
0000000000000b98         db  0x6e ; 'n'
0000000000000b99         db  0x74 ; 't'
0000000000000b9a         db  0x00 ; '.'
0000000000000b9b         db  0x72 ; 'r'
0000000000000b9c         db  0x65 ; 'e'
0000000000000b9d         db  0x61 ; 'a'
0000000000000b9e         db  0x6c ; 'l'
0000000000000b9f         db  0x6c ; 'l'
0000000000000ba0         db  0x6f ; 'o'
0000000000000ba1         db  0x63 ; 'c'
0000000000000ba2         db  0x00 ; '.'
0000000000000ba3         db  0x66 ; 'f'
0000000000000ba4         db  0x73 ; 's'
0000000000000ba5         db  0x79 ; 'y'
0000000000000ba6         db  0x6e ; 'n'
0000000000000ba7         db  0x63 ; 'c'
0000000000000ba8         db  0x00 ; '.'
0000000000000ba9         db  0x61 ; 'a'
0000000000000baa         db  0x62 ; 'b'
0000000000000bab         db  0x6f ; 'o'
0000000000000bac         db  0x72 ; 'r'
0000000000000bad         db  0x74 ; 't'
0000000000000bae         db  0x00 ; '.'
0000000000000baf         db  0x5f ; '_'
0000000000000bb0         db  0x65 ; 'e'
0000000000000bb1         db  0x78 ; 'x'
0000000000000bb2         db  0x69 ; 'i'
0000000000000bb3         db  0x74 ; 't'
0000000000000bb4         db  0x00 ; '.'
0000000000000bb5         db  0x70 ; 'p'
0000000000000bb6         db  0x72 ; 'r'
0000000000000bb7         db  0x6f ; 'o'
0000000000000bb8         db  0x67 ; 'g'
0000000000000bb9         db  0x72 ; 'r'
0000000000000bba         db  0x61 ; 'a'
0000000000000bbb         db  0x6d ; 'm'
0000000000000bbc         db  0x5f ; '_'
0000000000000bbd         db  0x69 ; 'i'
0000000000000bbe         db  0x6e ; 'n'
0000000000000bbf         db  0x76 ; 'v'
0000000000000bc0         db  0x6f ; 'o'
0000000000000bc1         db  0x63 ; 'c'
0000000000000bc2         db  0x61 ; 'a'
0000000000000bc3         db  0x74 ; 't'
0000000000000bc4         db  0x69 ; 'i'
0000000000000bc5         db  0x6f ; 'o'
0000000000000bc6         db  0x6e ; 'n'
0000000000000bc7         db  0x5f ; '_'
0000000000000bc8         db  0x6e ; 'n'
0000000000000bc9         db  0x61 ; 'a'
0000000000000bca         db  0x6d ; 'm'
0000000000000bcb         db  0x65 ; 'e'
0000000000000bcc         db  0x00 ; '.'
0000000000000bcd         db  0x5f ; '_'
0000000000000bce         db  0x5f ; '_'
0000000000000bcf         db  0x61 ; 'a'
0000000000000bd0         db  0x73 ; 's'
0000000000000bd1         db  0x73 ; 's'
0000000000000bd2         db  0x65 ; 'e'
0000000000000bd3         db  0x72 ; 'r'
0000000000000bd4         db  0x74 ; 't'
0000000000000bd5         db  0x5f ; '_'
0000000000000bd6         db  0x66 ; 'f'
0000000000000bd7         db  0x61 ; 'a'
0000000000000bd8         db  0x69 ; 'i'
0000000000000bd9         db  0x6c ; 'l'
0000000000000bda         db  0x00 ; '.'
0000000000000bdb         db  0x65 ; 'e'
0000000000000bdc         db  0x72 ; 'r'
0000000000000bdd         db  0x72 ; 'r'
0000000000000bde         db  0x6f ; 'o'
0000000000000bdf         db  0x72 ; 'r'
0000000000000be0         db  0x5f ; '_'
0000000000000be1         db  0x61 ; 'a'
0000000000000be2         db  0x74 ; 't'
0000000000000be3         db  0x5f ; '_'
0000000000000be4         db  0x6c ; 'l'
0000000000000be5         db  0x69 ; 'i'
0000000000000be6         db  0x6e ; 'n'
0000000000000be7         db  0x65 ; 'e'
0000000000000be8         db  0x00 ; '.'
0000000000000be9         db  0x5f ; '_'
0000000000000bea         db  0x5f ; '_'
0000000000000beb         db  0x63 ; 'c'
0000000000000bec         db  0x74 ; 't'
0000000000000bed         db  0x79 ; 'y'
0000000000000bee         db  0x70 ; 'p'
0000000000000bef         db  0x65 ; 'e'
0000000000000bf0         db  0x5f ; '_'
0000000000000bf1         db  0x67 ; 'g'
0000000000000bf2         db  0x65 ; 'e'
0000000000000bf3         db  0x74 ; 't'
0000000000000bf4         db  0x5f ; '_'
0000000000000bf5         db  0x6d ; 'm'
0000000000000bf6         db  0x62 ; 'b'
0000000000000bf7         db  0x5f ; '_'
0000000000000bf8         db  0x63 ; 'c'
0000000000000bf9         db  0x75 ; 'u'
0000000000000bfa         db  0x72 ; 'r'
0000000000000bfb         db  0x5f ; '_'
0000000000000bfc         db  0x6d ; 'm'
0000000000000bfd         db  0x61 ; 'a'
0000000000000bfe         db  0x78 ; 'x'
0000000000000bff         db  0x00 ; '.'
                     aPosixfadvise:
0000000000000c00         db         "posix_fadvise", 0
0000000000000c0e         db  0x66 ; 'f'
0000000000000c0f         db  0x64 ; 'd'
0000000000000c10         db  0x61 ; 'a'
0000000000000c11         db  0x74 ; 't'
0000000000000c12         db  0x61 ; 'a'
0000000000000c13         db  0x73 ; 's'
0000000000000c14         db  0x79 ; 'y'
0000000000000c15         db  0x6e ; 'n'
0000000000000c16         db  0x63 ; 'c'
0000000000000c17         db  0x00 ; '.'
0000000000000c18         db  0x63 ; 'c'
0000000000000c19         db  0x61 ; 'a'
0000000000000c1a         db  0x6c ; 'l'
0000000000000c1b         db  0x6c ; 'l'
0000000000000c1c         db  0x6f ; 'o'
0000000000000c1d         db  0x63 ; 'c'
0000000000000c1e         db  0x00 ; '.'
0000000000000c1f         db  0x73 ; 's'
0000000000000c20         db  0x74 ; 't'
0000000000000c21         db  0x72 ; 'r'
0000000000000c22         db  0x6c ; 'l'
0000000000000c23         db  0x65 ; 'e'
0000000000000c24         db  0x6e ; 'n'
0000000000000c25         db  0x00 ; '.'
0000000000000c26         db  0x73 ; 's'
0000000000000c27         db  0x69 ; 'i'
0000000000000c28         db  0x67 ; 'g'
0000000000000c29         db  0x65 ; 'e'
0000000000000c2a         db  0x6d ; 'm'
0000000000000c2b         db  0x70 ; 'p'
0000000000000c2c         db  0x74 ; 't'
0000000000000c2d         db  0x79 ; 'y'
0000000000000c2e         db  0x73 ; 's'
0000000000000c2f         db  0x65 ; 'e'
0000000000000c30         db  0x74 ; 't'
0000000000000c31         db  0x00 ; '.'
0000000000000c32         db  0x6d ; 'm'
0000000000000c33         db  0x65 ; 'e'
0000000000000c34         db  0x6d ; 'm'
0000000000000c35         db  0x73 ; 's'
0000000000000c36         db  0x65 ; 'e'
0000000000000c37         db  0x74 ; 't'
0000000000000c38         db  0x00 ; '.'
0000000000000c39         db  0x6c ; 'l'
0000000000000c3a         db  0x6f ; 'o'
0000000000000c3b         db  0x63 ; 'c'
0000000000000c3c         db  0x61 ; 'a'
0000000000000c3d         db  0x6c ; 'l'
0000000000000c3e         db  0x65 ; 'e'
0000000000000c3f         db  0x63 ; 'c'
0000000000000c40         db  0x6f ; 'o'
0000000000000c41         db  0x6e ; 'n'
0000000000000c42         db  0x76 ; 'v'
0000000000000c43         db  0x00 ; '.'
0000000000000c44         db  0x5f ; '_'
0000000000000c45         db  0x5f ; '_'
0000000000000c46         db  0x65 ; 'e'
0000000000000c47         db  0x72 ; 'r'
0000000000000c48         db  0x72 ; 'r'
0000000000000c49         db  0x6e ; 'n'
0000000000000c4a         db  0x6f ; 'o'
0000000000000c4b         db  0x5f ; '_'
0000000000000c4c         db  0x6c ; 'l'
0000000000000c4d         db  0x6f ; 'o'
0000000000000c4e         db  0x63 ; 'c'
0000000000000c4f         db  0x61 ; 'a'
0000000000000c50         db  0x74 ; 't'
0000000000000c51         db  0x69 ; 'i'
0000000000000c52         db  0x6f ; 'o'
0000000000000c53         db  0x6e ; 'n'
0000000000000c54         db  0x00 ; '.'
0000000000000c55         db  0x72 ; 'r'
0000000000000c56         db  0x65 ; 'e'
0000000000000c57         db  0x61 ; 'a'
0000000000000c58         db  0x64 ; 'd'
0000000000000c59         db  0x00 ; '.'
0000000000000c5a         db  0x6d ; 'm'
0000000000000c5b         db  0x65 ; 'e'
0000000000000c5c         db  0x6d ; 'm'
0000000000000c5d         db  0x63 ; 'c'
0000000000000c5e         db  0x6d ; 'm'
0000000000000c5f         db  0x70 ; 'p'
0000000000000c60         db  0x00 ; '.'
0000000000000c61         db  0x67 ; 'g'
0000000000000c62         db  0x65 ; 'e'
0000000000000c63         db  0x74 ; 't'
0000000000000c64         db  0x70 ; 'p'
0000000000000c65         db  0x61 ; 'a'
0000000000000c66         db  0x67 ; 'g'
0000000000000c67         db  0x65 ; 'e'
0000000000000c68         db  0x73 ; 's'
0000000000000c69         db  0x69 ; 'i'
0000000000000c6a         db  0x7a ; 'z'
0000000000000c6b         db  0x65 ; 'e'
0000000000000c6c         db  0x00 ; '.'
0000000000000c6d         db  0x64 ; 'd'
0000000000000c6e         db  0x75 ; 'u'
0000000000000c6f         db  0x70 ; 'p'
0000000000000c70         db  0x32 ; '2'
0000000000000c71         db  0x00 ; '.'
0000000000000c72         db  0x5f ; '_'
0000000000000c73         db  0x5f ; '_'
0000000000000c74         db  0x66 ; 'f'
0000000000000c75         db  0x70 ; 'p'
0000000000000c76         db  0x72 ; 'r'
0000000000000c77         db  0x69 ; 'i'
0000000000000c78         db  0x6e ; 'n'
0000000000000c79         db  0x74 ; 't'
0000000000000c7a         db  0x66 ; 'f'
0000000000000c7b         db  0x5f ; '_'
0000000000000c7c         db  0x63 ; 'c'
0000000000000c7d         db  0x68 ; 'h'
0000000000000c7e         db  0x6b ; 'k'
0000000000000c7f         db  0x00 ; '.'
0000000000000c80         db  0x73 ; 's'
0000000000000c81         db  0x69 ; 'i'
0000000000000c82         db  0x67 ; 'g'
0000000000000c83         db  0x61 ; 'a'
0000000000000c84         db  0x64 ; 'd'
0000000000000c85         db  0x64 ; 'd'
0000000000000c86         db  0x73 ; 's'
0000000000000c87         db  0x65 ; 'e'
0000000000000c88         db  0x74 ; 't'
0000000000000c89         db  0x00 ; '.'
0000000000000c8a         db  0x73 ; 's'
0000000000000c8b         db  0x74 ; 't'
0000000000000c8c         db  0x64 ; 'd'
0000000000000c8d         db  0x6f ; 'o'
0000000000000c8e         db  0x75 ; 'u'
0000000000000c8f         db  0x74 ; 't'
0000000000000c90         db  0x00 ; '.'
0000000000000c91         db  0x6c ; 'l'
0000000000000c92         db  0x73 ; 's'
0000000000000c93         db  0x65 ; 'e'
0000000000000c94         db  0x65 ; 'e'
0000000000000c95         db  0x6b ; 'k'
0000000000000c96         db  0x00 ; '.'
0000000000000c97         db  0x6d ; 'm'
0000000000000c98         db  0x65 ; 'e'
0000000000000c99         db  0x6d ; 'm'
0000000000000c9a         db  0x63 ; 'c'
0000000000000c9b         db  0x70 ; 'p'
0000000000000c9c         db  0x79 ; 'y'
0000000000000c9d         db  0x00 ; '.'
0000000000000c9e         db  0x66 ; 'f'
0000000000000c9f         db  0x63 ; 'c'
0000000000000ca0         db  0x6c ; 'l'
0000000000000ca1         db  0x6f ; 'o'
0000000000000ca2         db  0x73 ; 's'
0000000000000ca3         db  0x65 ; 'e'
0000000000000ca4         db  0x00 ; '.'
0000000000000ca5         db  0x6d ; 'm'
0000000000000ca6         db  0x61 ; 'a'
0000000000000ca7         db  0x6c ; 'l'
0000000000000ca8         db  0x6c ; 'l'
0000000000000ca9         db  0x6f ; 'o'
0000000000000caa         db  0x63 ; 'c'
0000000000000cab         db  0x00 ; '.'
0000000000000cac         db  0x72 ; 'r'
0000000000000cad         db  0x61 ; 'a'
0000000000000cae         db  0x69 ; 'i'
0000000000000caf         db  0x73 ; 's'
0000000000000cb0         db  0x65 ; 'e'
0000000000000cb1         db  0x00 ; '.'
0000000000000cb2         db  0x6d ; 'm'
0000000000000cb3         db  0x62 ; 'b'
0000000000000cb4         db  0x73 ; 's'
0000000000000cb5         db  0x69 ; 'i'
0000000000000cb6         db  0x6e ; 'n'
0000000000000cb7         db  0x69 ; 'i'
0000000000000cb8         db  0x74 ; 't'
0000000000000cb9         db  0x00 ; '.'
0000000000000cba         db  0x6e ; 'n'
0000000000000cbb         db  0x6c ; 'l'
0000000000000cbc         db  0x5f ; '_'
0000000000000cbd         db  0x6c ; 'l'
0000000000000cbe         db  0x61 ; 'a'
0000000000000cbf         db  0x6e ; 'n'
0000000000000cc0         db  0x67 ; 'g'
0000000000000cc1         db  0x69 ; 'i'
0000000000000cc2         db  0x6e ; 'n'
0000000000000cc3         db  0x66 ; 'f'
0000000000000cc4         db  0x6f ; 'o'
0000000000000cc5         db  0x00 ; '.'
0000000000000cc6         db  0x5f ; '_'
0000000000000cc7         db  0x5f ; '_'
0000000000000cc8         db  0x63 ; 'c'
0000000000000cc9         db  0x74 ; 't'
0000000000000cca         db  0x79 ; 'y'
0000000000000ccb         db  0x70 ; 'p'
0000000000000ccc         db  0x65 ; 'e'
0000000000000ccd         db  0x5f ; '_'
0000000000000cce         db  0x62 ; 'b'
0000000000000ccf         db  0x5f ; '_'
0000000000000cd0         db  0x6c ; 'l'
0000000000000cd1         db  0x6f ; 'o'
0000000000000cd2         db  0x63 ; 'c'
0000000000000cd3         db  0x00 ; '.'
0000000000000cd4         db  0x67 ; 'g'
0000000000000cd5         db  0x65 ; 'e'
0000000000000cd6         db  0x74 ; 't'
0000000000000cd7         db  0x65 ; 'e'
0000000000000cd8         db  0x6e ; 'n'
0000000000000cd9         db  0x76 ; 'v'
0000000000000cda         db  0x00 ; '.'
0000000000000cdb         db  0x5f ; '_'
0000000000000cdc         db  0x5f ; '_'
0000000000000cdd         db  0x66 ; 'f'
0000000000000cde         db  0x72 ; 'r'
0000000000000cdf         db  0x65 ; 'e'
0000000000000ce0         db  0x61 ; 'a'
0000000000000ce1         db  0x64 ; 'd'
0000000000000ce2         db  0x69 ; 'i'
0000000000000ce3         db  0x6e ; 'n'
0000000000000ce4         db  0x67 ; 'g'
0000000000000ce5         db  0x00 ; '.'
0000000000000ce6         db  0x73 ; 's'
0000000000000ce7         db  0x74 ; 't'
0000000000000ce8         db  0x64 ; 'd'
0000000000000ce9         db  0x65 ; 'e'
0000000000000cea         db  0x72 ; 'r'
0000000000000ceb         db  0x72 ; 'r'
0000000000000cec         db  0x00 ; '.'
0000000000000ced         db  0x69 ; 'i'
0000000000000cee         db  0x6f ; 'o'
0000000000000cef         db  0x63 ; 'c'
0000000000000cf0         db  0x74 ; 't'
0000000000000cf1         db  0x6c ; 'l'
0000000000000cf2         db  0x00 ; '.'
0000000000000cf3         db  0x5f ; '_'
0000000000000cf4         db  0x5f ; '_'
0000000000000cf5         db  0x73 ; 's'
0000000000000cf6         db  0x6e ; 'n'
0000000000000cf7         db  0x70 ; 'p'
0000000000000cf8         db  0x72 ; 'r'
0000000000000cf9         db  0x69 ; 'i'
0000000000000cfa         db  0x6e ; 'n'
0000000000000cfb         db  0x74 ; 't'
0000000000000cfc         db  0x66 ; 'f'
0000000000000cfd         db  0x5f ; '_'
0000000000000cfe         db  0x63 ; 'c'
0000000000000cff         db  0x68 ; 'h'
0000000000000d00         db  0x6b ; 'k'
0000000000000d01         db  0x00 ; '.'
0000000000000d02         db  0x67 ; 'g'
0000000000000d03         db  0x65 ; 'e'
0000000000000d04         db  0x74 ; 't'
0000000000000d05         db  0x6f ; 'o'
0000000000000d06         db  0x70 ; 'p'
0000000000000d07         db  0x74 ; 't'
0000000000000d08         db  0x5f ; '_'
0000000000000d09         db  0x6c ; 'l'
0000000000000d0a         db  0x6f ; 'o'
0000000000000d0b         db  0x6e ; 'n'
0000000000000d0c         db  0x67 ; 'g'
0000000000000d0d         db  0x00 ; '.'
0000000000000d0e         db  0x5f ; '_'
0000000000000d0f         db  0x5f ; '_'
0000000000000d10         db  0x66 ; 'f'
0000000000000d11         db  0x78 ; 'x'
0000000000000d12         db  0x73 ; 's'
0000000000000d13         db  0x74 ; 't'
0000000000000d14         db  0x61 ; 'a'
0000000000000d15         db  0x74 ; 't'
0000000000000d16         db  0x00 ; '.'
0000000000000d17         db  0x66 ; 'f'
0000000000000d18         db  0x69 ; 'i'
0000000000000d19         db  0x6c ; 'l'
0000000000000d1a         db  0x65 ; 'e'
0000000000000d1b         db  0x6e ; 'n'
0000000000000d1c         db  0x6f ; 'o'
0000000000000d1d         db  0x00 ; '.'
0000000000000d1e         db  0x66 ; 'f'
0000000000000d1f         db  0x77 ; 'w'
0000000000000d20         db  0x72 ; 'r'
0000000000000d21         db  0x69 ; 'i'
0000000000000d22         db  0x74 ; 't'
0000000000000d23         db  0x65 ; 'e'
0000000000000d24         db  0x00 ; '.'
0000000000000d25         db  0x73 ; 's'
0000000000000d26         db  0x69 ; 'i'
0000000000000d27         db  0x67 ; 'g'
0000000000000d28         db  0x61 ; 'a'
0000000000000d29         db  0x63 ; 'c'
0000000000000d2a         db  0x74 ; 't'
0000000000000d2b         db  0x69 ; 'i'
0000000000000d2c         db  0x6f ; 'o'
0000000000000d2d         db  0x6e ; 'n'
0000000000000d2e         db  0x00 ; '.'
0000000000000d2f         db  0x5f ; '_'
0000000000000d30         db  0x5f ; '_'
0000000000000d31         db  0x6d ; 'm'
0000000000000d32         db  0x65 ; 'e'
0000000000000d33         db  0x6d ; 'm'
0000000000000d34         db  0x63 ; 'c'
0000000000000d35         db  0x70 ; 'p'
0000000000000d36         db  0x79 ; 'y'
0000000000000d37         db  0x5f ; '_'
0000000000000d38         db  0x63 ; 'c'
0000000000000d39         db  0x68 ; 'h'
0000000000000d3a         db  0x6b ; 'k'
0000000000000d3b         db  0x00 ; '.'
0000000000000d3c         db  0x73 ; 's'
0000000000000d3d         db  0x69 ; 'i'
0000000000000d3e         db  0x67 ; 'g'
0000000000000d3f         db  0x69 ; 'i'
0000000000000d40         db  0x73 ; 's'
0000000000000d41         db  0x6d ; 'm'
0000000000000d42         db  0x65 ; 'e'
0000000000000d43         db  0x6d ; 'm'
0000000000000d44         db  0x62 ; 'b'
0000000000000d45         db  0x65 ; 'e'
0000000000000d46         db  0x72 ; 'r'
0000000000000d47         db  0x00 ; '.'
0000000000000d48         db  0x63 ; 'c'
0000000000000d49         db  0x6c ; 'l'
0000000000000d4a         db  0x6f ; 'o'
0000000000000d4b         db  0x63 ; 'c'
0000000000000d4c         db  0x6b ; 'k'
0000000000000d4d         db  0x5f ; '_'
0000000000000d4e         db  0x67 ; 'g'
0000000000000d4f         db  0x65 ; 'e'
0000000000000d50         db  0x74 ; 't'
0000000000000d51         db  0x74 ; 't'
0000000000000d52         db  0x69 ; 'i'
0000000000000d53         db  0x6d ; 'm'
0000000000000d54         db  0x65 ; 'e'
0000000000000d55         db  0x00 ; '.'
0000000000000d56         db  0x5f ; '_'
0000000000000d57         db  0x5f ; '_'
0000000000000d58         db  0x66 ; 'f'
0000000000000d59         db  0x70 ; 'p'
0000000000000d5a         db  0x65 ; 'e'
0000000000000d5b         db  0x6e ; 'n'
0000000000000d5c         db  0x64 ; 'd'
0000000000000d5d         db  0x69 ; 'i'
0000000000000d5e         db  0x6e ; 'n'
0000000000000d5f         db  0x67 ; 'g'
0000000000000d60         db  0x00 ; '.'
0000000000000d61         db  0x6f ; 'o'
0000000000000d62         db  0x70 ; 'p'
0000000000000d63         db  0x65 ; 'e'
0000000000000d64         db  0x6e ; 'n'
0000000000000d65         db  0x00 ; '.'
0000000000000d66         db  0x73 ; 's'
0000000000000d67         db  0x74 ; 't'
0000000000000d68         db  0x72 ; 'r'
0000000000000d69         db  0x63 ; 'c'
0000000000000d6a         db  0x68 ; 'h'
0000000000000d6b         db  0x72 ; 'r'
0000000000000d6c         db  0x00 ; '.'
0000000000000d6d         db  0x70 ; 'p'
0000000000000d6e         db  0x72 ; 'r'
0000000000000d6f         db  0x6f ; 'o'
0000000000000d70         db  0x67 ; 'g'
0000000000000d71         db  0x72 ; 'r'
0000000000000d72         db  0x61 ; 'a'
0000000000000d73         db  0x6d ; 'm'
0000000000000d74         db  0x5f ; '_'
0000000000000d75         db  0x69 ; 'i'
0000000000000d76         db  0x6e ; 'n'
0000000000000d77         db  0x76 ; 'v'
0000000000000d78         db  0x6f ; 'o'
0000000000000d79         db  0x63 ; 'c'
0000000000000d7a         db  0x61 ; 'a'
0000000000000d7b         db  0x74 ; 't'
0000000000000d7c         db  0x69 ; 'i'
0000000000000d7d         db  0x6f ; 'o'
0000000000000d7e         db  0x6e ; 'n'
0000000000000d7f         db  0x5f ; '_'
0000000000000d80         db  0x73 ; 's'
0000000000000d81         db  0x68 ; 'h'
0000000000000d82         db  0x6f ; 'o'
0000000000000d83         db  0x72 ; 'r'
0000000000000d84         db  0x74 ; 't'
0000000000000d85         db  0x5f ; '_'
0000000000000d86         db  0x6e ; 'n'
0000000000000d87         db  0x61 ; 'a'
0000000000000d88         db  0x6d ; 'm'
0000000000000d89         db  0x65 ; 'e'
0000000000000d8a         db  0x00 ; '.'
0000000000000d8b         db  0x5f ; '_'
0000000000000d8c         db  0x5f ; '_'
0000000000000d8d         db  0x63 ; 'c'
0000000000000d8e         db  0x74 ; 't'
0000000000000d8f         db  0x79 ; 'y'
0000000000000d90         db  0x70 ; 'p'
0000000000000d91         db  0x65 ; 'e'
0000000000000d92         db  0x5f ; '_'
0000000000000d93         db  0x74 ; 't'
0000000000000d94         db  0x6f ; 'o'
0000000000000d95         db  0x75 ; 'u'
0000000000000d96         db  0x70 ; 'p'
0000000000000d97         db  0x70 ; 'p'
0000000000000d98         db  0x65 ; 'e'
0000000000000d99         db  0x72 ; 'r'
0000000000000d9a         db  0x5f ; '_'
0000000000000d9b         db  0x6c ; 'l'
0000000000000d9c         db  0x6f ; 'o'
0000000000000d9d         db  0x63 ; 'c'
0000000000000d9e         db  0x00 ; '.'
0000000000000d9f         db  0x5f ; '_'
0000000000000da0         db  0x5f ; '_'
0000000000000da1         db  0x63 ; 'c'
0000000000000da2         db  0x74 ; 't'
0000000000000da3         db  0x79 ; 'y'
0000000000000da4         db  0x70 ; 'p'
0000000000000da5         db  0x65 ; 'e'
0000000000000da6         db  0x5f ; '_'
0000000000000da7         db  0x74 ; 't'
0000000000000da8         db  0x6f ; 'o'
0000000000000da9         db  0x6c ; 'l'
0000000000000daa         db  0x6f ; 'o'
0000000000000dab         db  0x77 ; 'w'
0000000000000dac         db  0x65 ; 'e'
0000000000000dad         db  0x72 ; 'r'
0000000000000dae         db  0x5f ; '_'
0000000000000daf         db  0x6c ; 'l'
0000000000000db0         db  0x6f ; 'o'
0000000000000db1         db  0x63 ; 'c'
0000000000000db2         db  0x00 ; '.'
0000000000000db3         db  0x5f ; '_'
0000000000000db4         db  0x5f ; '_'
0000000000000db5         db  0x63 ; 'c'
0000000000000db6         db  0x78 ; 'x'
0000000000000db7         db  0x61 ; 'a'
0000000000000db8         db  0x5f ; '_'
0000000000000db9         db  0x66 ; 'f'
0000000000000dba         db  0x69 ; 'i'
0000000000000dbb         db  0x6e ; 'n'
0000000000000dbc         db  0x61 ; 'a'
0000000000000dbd         db  0x6c ; 'l'
0000000000000dbe         db  0x69 ; 'i'
0000000000000dbf         db  0x7a ; 'z'
0000000000000dc0         db  0x65 ; 'e'
0000000000000dc1         db  0x00 ; '.'
0000000000000dc2         db  0x66 ; 'f'
0000000000000dc3         db  0x63 ; 'c'
0000000000000dc4         db  0x6e ; 'n'
0000000000000dc5         db  0x74 ; 't'
0000000000000dc6         db  0x6c ; 'l'
0000000000000dc7         db  0x00 ; '.'
0000000000000dc8         db  0x5f ; '_'
0000000000000dc9         db  0x5f ; '_'
0000000000000dca         db  0x73 ; 's'
0000000000000dcb         db  0x70 ; 'p'
0000000000000dcc         db  0x72 ; 'r'
0000000000000dcd         db  0x69 ; 'i'
0000000000000dce         db  0x6e ; 'n'
0000000000000dcf         db  0x74 ; 't'
0000000000000dd0         db  0x66 ; 'f'
0000000000000dd1         db  0x5f ; '_'
0000000000000dd2         db  0x63 ; 'c'
0000000000000dd3         db  0x68 ; 'h'
0000000000000dd4         db  0x6b ; 'k'
0000000000000dd5         db  0x00 ; '.'
0000000000000dd6         db  0x6d ; 'm'
0000000000000dd7         db  0x65 ; 'e'
0000000000000dd8         db  0x6d ; 'm'
0000000000000dd9         db  0x6d ; 'm'
0000000000000dda         db  0x6f ; 'o'
0000000000000ddb         db  0x76 ; 'v'
0000000000000ddc         db  0x65 ; 'e'
0000000000000ddd         db  0x00 ; '.'
0000000000000dde         db  0x62 ; 'b'
0000000000000ddf         db  0x69 ; 'i'
0000000000000de0         db  0x6e ; 'n'
0000000000000de1         db  0x64 ; 'd'
0000000000000de2         db  0x74 ; 't'
0000000000000de3         db  0x65 ; 'e'
0000000000000de4         db  0x78 ; 'x'
0000000000000de5         db  0x74 ; 't'
0000000000000de6         db  0x64 ; 'd'
0000000000000de7         db  0x6f ; 'o'
0000000000000de8         db  0x6d ; 'm'
0000000000000de9         db  0x61 ; 'a'
0000000000000dea         db  0x69 ; 'i'
0000000000000deb         db  0x6e ; 'n'
0000000000000dec         db  0x00 ; '.'
0000000000000ded         db  0x6f ; 'o'
0000000000000dee         db  0x70 ; 'p'
0000000000000def         db  0x74 ; 't'
0000000000000df0         db  0x65 ; 'e'
0000000000000df1         db  0x72 ; 'r'
0000000000000df2         db  0x72 ; 'r'
0000000000000df3         db  0x00 ; '.'
0000000000000df4         db  0x5f ; '_'
0000000000000df5         db  0x5f ; '_'
0000000000000df6         db  0x6c ; 'l'
0000000000000df7         db  0x69 ; 'i'
0000000000000df8         db  0x62 ; 'b'
0000000000000df9         db  0x63 ; 'c'
0000000000000dfa         db  0x5f ; '_'
0000000000000dfb         db  0x73 ; 's'
0000000000000dfc         db  0x74 ; 't'
0000000000000dfd         db  0x61 ; 'a'
0000000000000dfe         db  0x72 ; 'r'
0000000000000dff         db  0x74 ; 't'
                     aMain:
0000000000000e00         db         "_main", 0
0000000000000e06         db  0x66 ; 'f'
0000000000000e07         db  0x73 ; 's'
0000000000000e08         db  0x65 ; 'e'
0000000000000e09         db  0x65 ; 'e'
0000000000000e0a         db  0x6b ; 'k'
0000000000000e0b         db  0x6f ; 'o'
0000000000000e0c         db  0x00 ; '.'
0000000000000e0d         db  0x5f ; '_'
0000000000000e0e         db  0x5f ; '_'
0000000000000e0f         db  0x6f ; 'o'
0000000000000e10         db  0x76 ; 'v'
0000000000000e11         db  0x65 ; 'e'
0000000000000e12         db  0x72 ; 'r'
0000000000000e13         db  0x66 ; 'f'
0000000000000e14         db  0x6c ; 'l'
0000000000000e15         db  0x6f ; 'o'
0000000000000e16         db  0x77 ; 'w'
0000000000000e17         db  0x00 ; '.'
0000000000000e18         db  0x5f ; '_'
0000000000000e19         db  0x5f ; '_'
0000000000000e1a         db  0x73 ; 's'
0000000000000e1b         db  0x74 ; 't'
0000000000000e1c         db  0x72 ; 'r'
0000000000000e1d         db  0x74 ; 't'
0000000000000e1e         db  0x6f ; 'o'
0000000000000e1f         db  0x75 ; 'u'
0000000000000e20         db  0x6c ; 'l'
0000000000000e21         db  0x5f ; '_'
0000000000000e22         db  0x69 ; 'i'
0000000000000e23         db  0x6e ; 'n'
0000000000000e24         db  0x74 ; 't'
0000000000000e25         db  0x65 ; 'e'
0000000000000e26         db  0x72 ; 'r'
0000000000000e27         db  0x6e ; 'n'
0000000000000e28         db  0x61 ; 'a'
0000000000000e29         db  0x6c ; 'l'
0000000000000e2a         db  0x00 ; '.'
0000000000000e2b         db  0x66 ; 'f'
0000000000000e2c         db  0x70 ; 'p'
0000000000000e2d         db  0x75 ; 'u'
0000000000000e2e         db  0x74 ; 't'
0000000000000e2f         db  0x73 ; 's'
0000000000000e30         db  0x5f ; '_'
0000000000000e31         db  0x75 ; 'u'
0000000000000e32         db  0x6e ; 'n'
0000000000000e33         db  0x6c ; 'l'
0000000000000e34         db  0x6f ; 'o'
0000000000000e35         db  0x63 ; 'c'
0000000000000e36         db  0x6b ; 'k'
0000000000000e37         db  0x65 ; 'e'
0000000000000e38         db  0x64 ; 'd'
0000000000000e39         db  0x00 ; '.'
0000000000000e3a         db  0x66 ; 'f'
0000000000000e3b         db  0x72 ; 'r'
0000000000000e3c         db  0x65 ; 'e'
0000000000000e3d         db  0x65 ; 'e'
0000000000000e3e         db  0x00 ; '.'
0000000000000e3f         db  0x5f ; '_'
0000000000000e40         db  0x5f ; '_'
0000000000000e41         db  0x70 ; 'p'
0000000000000e42         db  0x72 ; 'r'
0000000000000e43         db  0x6f ; 'o'
0000000000000e44         db  0x67 ; 'g'
0000000000000e45         db  0x6e ; 'n'
0000000000000e46         db  0x61 ; 'a'
0000000000000e47         db  0x6d ; 'm'
0000000000000e48         db  0x65 ; 'e'
0000000000000e49         db  0x00 ; '.'
0000000000000e4a         db  0x5f ; '_'
0000000000000e4b         db  0x5f ; '_'
0000000000000e4c         db  0x70 ; 'p'
0000000000000e4d         db  0x72 ; 'r'
0000000000000e4e         db  0x6f ; 'o'
0000000000000e4f         db  0x67 ; 'g'
0000000000000e50         db  0x6e ; 'n'
0000000000000e51         db  0x61 ; 'a'
0000000000000e52         db  0x6d ; 'm'
0000000000000e53         db  0x65 ; 'e'
0000000000000e54         db  0x5f ; '_'
0000000000000e55         db  0x66 ; 'f'
0000000000000e56         db  0x75 ; 'u'
0000000000000e57         db  0x6c ; 'l'
0000000000000e58         db  0x6c ; 'l'
0000000000000e59         db  0x00 ; '.'
0000000000000e5a         db  0x5f ; '_'
0000000000000e5b         db  0x5f ; '_'
0000000000000e5c         db  0x63 ; 'c'
0000000000000e5d         db  0x78 ; 'x'
0000000000000e5e         db  0x61 ; 'a'
0000000000000e5f         db  0x5f ; '_'
0000000000000e60         db  0x61 ; 'a'
0000000000000e61         db  0x74 ; 't'
0000000000000e62         db  0x65 ; 'e'
0000000000000e63         db  0x78 ; 'x'
0000000000000e64         db  0x69 ; 'i'
0000000000000e65         db  0x74 ; 't'
0000000000000e66         db  0x00 ; '.'
0000000000000e67         db  0x47 ; 'G'
0000000000000e68         db  0x4c ; 'L'
0000000000000e69         db  0x49 ; 'I'
0000000000000e6a         db  0x42 ; 'B'
0000000000000e6b         db  0x43 ; 'C'
0000000000000e6c         db  0x5f ; '_'
0000000000000e6d         db  0x32 ; '2'
0000000000000e6e         db  0x2e ; '.'
0000000000000e6f         db  0x31 ; '1'
0000000000000e70         db  0x34 ; '4'
0000000000000e71         db  0x00 ; '.'
0000000000000e72         db  0x47 ; 'G'
0000000000000e73         db  0x4c ; 'L'
0000000000000e74         db  0x49 ; 'I'
0000000000000e75         db  0x42 ; 'B'
0000000000000e76         db  0x43 ; 'C'
0000000000000e77         db  0x5f ; '_'
0000000000000e78         db  0x32 ; '2'
0000000000000e79         db  0x2e ; '.'
0000000000000e7a         db  0x34 ; '4'
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x47 ; 'G'
0000000000000e7d         db  0x4c ; 'L'
0000000000000e7e         db  0x49 ; 'I'
0000000000000e7f         db  0x42 ; 'B'
0000000000000e80         db  0x43 ; 'C'
0000000000000e81         db  0x5f ; '_'
0000000000000e82         db  0x32 ; '2'
0000000000000e83         db  0x2e ; '.'
0000000000000e84         db  0x31 ; '1'
0000000000000e85         db  0x37 ; '7'
0000000000000e86         db  0x00 ; '.'
0000000000000e87         db  0x47 ; 'G'
0000000000000e88         db  0x4c ; 'L'
0000000000000e89         db  0x49 ; 'I'
0000000000000e8a         db  0x42 ; 'B'
0000000000000e8b         db  0x43 ; 'C'
0000000000000e8c         db  0x5f ; '_'
0000000000000e8d         db  0x32 ; '2'
0000000000000e8e         db  0x2e ; '.'
0000000000000e8f         db  0x33 ; '3'
0000000000000e90         db  0x2e ; '.'
0000000000000e91         db  0x34 ; '4'
0000000000000e92         db  0x00 ; '.'
0000000000000e93         db  0x47 ; 'G'
0000000000000e94         db  0x4c ; 'L'
0000000000000e95         db  0x49 ; 'I'
0000000000000e96         db  0x42 ; 'B'
0000000000000e97         db  0x43 ; 'C'
0000000000000e98         db  0x5f ; '_'
0000000000000e99         db  0x32 ; '2'
0000000000000e9a         db  0x2e ; '.'
0000000000000e9b         db  0x32 ; '2'
0000000000000e9c         db  0x2e ; '.'
0000000000000e9d         db  0x35 ; '5'
0000000000000e9e         db  0x00 ; '.'
0000000000000e9f         db  0x47 ; 'G'
0000000000000ea0         db  0x4c ; 'L'
0000000000000ea1         db  0x49 ; 'I'
0000000000000ea2         db  0x42 ; 'B'
0000000000000ea3         db  0x43 ; 'C'
0000000000000ea4         db  0x5f ; '_'
0000000000000ea5         db  0x32 ; '2'
0000000000000ea6         db  0x2e ; '.'
0000000000000ea7         db  0x33 ; '3'
0000000000000ea8         db  0x00 ; '.'
0000000000000ea9         db  0x5f ; '_'
0000000000000eaa         db  0x49 ; 'I'
0000000000000eab         db  0x54 ; 'T'
0000000000000eac         db  0x4d ; 'M'
0000000000000ead         db  0x5f ; '_'
0000000000000eae         db  0x64 ; 'd'
0000000000000eaf         db  0x65 ; 'e'
0000000000000eb0         db  0x72 ; 'r'
0000000000000eb1         db  0x65 ; 'e'
0000000000000eb2         db  0x67 ; 'g'
0000000000000eb3         db  0x69 ; 'i'
0000000000000eb4         db  0x73 ; 's'
0000000000000eb5         db  0x74 ; 't'
0000000000000eb6         db  0x65 ; 'e'
0000000000000eb7         db  0x72 ; 'r'
0000000000000eb8         db  0x54 ; 'T'
0000000000000eb9         db  0x4d ; 'M'
0000000000000eba         db  0x43 ; 'C'
0000000000000ebb         db  0x6c ; 'l'
0000000000000ebc         db  0x6f ; 'o'
0000000000000ebd         db  0x6e ; 'n'
0000000000000ebe         db  0x65 ; 'e'
0000000000000ebf         db  0x54 ; 'T'
0000000000000ec0         db  0x61 ; 'a'
0000000000000ec1         db  0x62 ; 'b'
0000000000000ec2         db  0x6c ; 'l'
0000000000000ec3         db  0x65 ; 'e'
0000000000000ec4         db  0x00 ; '.'
0000000000000ec5         db  0x5f ; '_'
0000000000000ec6         db  0x5f ; '_'
0000000000000ec7         db  0x67 ; 'g'
0000000000000ec8         db  0x6d ; 'm'
0000000000000ec9         db  0x6f ; 'o'
0000000000000eca         db  0x6e ; 'n'
0000000000000ecb         db  0x5f ; '_'
0000000000000ecc         db  0x73 ; 's'
0000000000000ecd         db  0x74 ; 't'
0000000000000ece         db  0x61 ; 'a'
0000000000000ecf         db  0x72 ; 'r'
0000000000000ed0         db  0x74 ; 't'
0000000000000ed1         db  0x5f ; '_'
0000000000000ed2         db  0x5f ; '_'
0000000000000ed3         db  0x00 ; '.'
0000000000000ed4         db  0x5f ; '_'
0000000000000ed5         db  0x49 ; 'I'
0000000000000ed6         db  0x54 ; 'T'
0000000000000ed7         db  0x4d ; 'M'
0000000000000ed8         db  0x5f ; '_'
0000000000000ed9         db  0x72 ; 'r'
0000000000000eda         db  0x65 ; 'e'
0000000000000edb         db  0x67 ; 'g'
0000000000000edc         db  0x69 ; 'i'
0000000000000edd         db  0x73 ; 's'
0000000000000ede         db  0x74 ; 't'
0000000000000edf         db  0x65 ; 'e'
0000000000000ee0         db  0x72 ; 'r'
0000000000000ee1         db  0x54 ; 'T'
0000000000000ee2         db  0x4d ; 'M'
0000000000000ee3         db  0x43 ; 'C'
0000000000000ee4         db  0x6c ; 'l'
0000000000000ee5         db  0x6f ; 'o'
0000000000000ee6         db  0x6e ; 'n'
0000000000000ee7         db  0x65 ; 'e'
0000000000000ee8         db  0x54 ; 'T'
0000000000000ee9         db  0x61 ; 'a'
0000000000000eea         db  0x62 ; 'b'
0000000000000eeb         db  0x6c ; 'l'
0000000000000eec         db  0x65 ; 'e'
0000000000000eed         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xeee; 0xf9c[ (174 bytes)
        ; File offset : [3822; 3996[ (174 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000eee         db  0x00 ; '.'
0000000000000eef         db  0x00 ; '.'
0000000000000ef0         db  0x02 ; '.'
0000000000000ef1         db  0x00 ; '.'
0000000000000ef2         db  0x03 ; '.'
0000000000000ef3         db  0x00 ; '.'
0000000000000ef4         db  0x03 ; '.'
0000000000000ef5         db  0x00 ; '.'
0000000000000ef6         db  0x04 ; '.'
0000000000000ef7         db  0x00 ; '.'
0000000000000ef8         db  0x03 ; '.'
0000000000000ef9         db  0x00 ; '.'
0000000000000efa         db  0x03 ; '.'
0000000000000efb         db  0x00 ; '.'
0000000000000efc         db  0x03 ; '.'
0000000000000efd         db  0x00 ; '.'
0000000000000efe         db  0x03 ; '.'
0000000000000eff         db  0x00 ; '.'
0000000000000f00         db  0x03 ; '.'
0000000000000f01         db  0x00 ; '.'
0000000000000f02         db  0x03 ; '.'
0000000000000f03         db  0x00 ; '.'
0000000000000f04         db  0x03 ; '.'
0000000000000f05         db  0x00 ; '.'
0000000000000f06         db  0x00 ; '.'
0000000000000f07         db  0x00 ; '.'
0000000000000f08         db  0x03 ; '.'
0000000000000f09         db  0x00 ; '.'
0000000000000f0a         db  0x03 ; '.'
0000000000000f0b         db  0x00 ; '.'
0000000000000f0c         db  0x03 ; '.'
0000000000000f0d         db  0x00 ; '.'
0000000000000f0e         db  0x03 ; '.'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0x03 ; '.'
0000000000000f11         db  0x00 ; '.'
0000000000000f12         db  0x05 ; '.'
0000000000000f13         db  0x00 ; '.'
0000000000000f14         db  0x03 ; '.'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x03 ; '.'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0x03 ; '.'
0000000000000f19         db  0x00 ; '.'
0000000000000f1a         db  0x03 ; '.'
0000000000000f1b         db  0x00 ; '.'
0000000000000f1c         db  0x03 ; '.'
0000000000000f1d         db  0x00 ; '.'
0000000000000f1e         db  0x03 ; '.'
0000000000000f1f         db  0x00 ; '.'
0000000000000f20         db  0x03 ; '.'
0000000000000f21         db  0x00 ; '.'
0000000000000f22         db  0x06 ; '.'
0000000000000f23         db  0x00 ; '.'
0000000000000f24         db  0x03 ; '.'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x03 ; '.'
0000000000000f27         db  0x00 ; '.'
0000000000000f28         db  0x03 ; '.'
0000000000000f29         db  0x00 ; '.'
0000000000000f2a         db  0x03 ; '.'
0000000000000f2b         db  0x00 ; '.'
0000000000000f2c         db  0x03 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x03 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0x03 ; '.'
0000000000000f31         db  0x00 ; '.'
0000000000000f32         db  0x03 ; '.'
0000000000000f33         db  0x00 ; '.'
0000000000000f34         db  0x03 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x03 ; '.'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0x03 ; '.'
0000000000000f39         db  0x00 ; '.'
0000000000000f3a         db  0x03 ; '.'
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x03 ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x03 ; '.'
0000000000000f3f         db  0x00 ; '.'
0000000000000f40         db  0x03 ; '.'
0000000000000f41         db  0x00 ; '.'
0000000000000f42         db  0x03 ; '.'
0000000000000f43         db  0x00 ; '.'
0000000000000f44         db  0x03 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x03 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0x03 ; '.'
0000000000000f49         db  0x00 ; '.'
0000000000000f4a         db  0x04 ; '.'
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x03 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x00 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0x07 ; '.'
0000000000000f51         db  0x00 ; '.'
0000000000000f52         db  0x03 ; '.'
0000000000000f53         db  0x00 ; '.'
0000000000000f54         db  0x03 ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x03 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0x03 ; '.'
0000000000000f59         db  0x00 ; '.'
0000000000000f5a         db  0x03 ; '.'
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x03 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x03 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0x03 ; '.'
0000000000000f61         db  0x00 ; '.'
0000000000000f62         db  0x04 ; '.'
0000000000000f63         db  0x00 ; '.'
0000000000000f64         db  0x03 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x03 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0x03 ; '.'
0000000000000f69         db  0x00 ; '.'
0000000000000f6a         db  0x03 ; '.'
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x03 ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x03 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0x03 ; '.'
0000000000000f71         db  0x00 ; '.'
0000000000000f72         db  0x03 ; '.'
0000000000000f73         db  0x00 ; '.'
0000000000000f74         db  0x03 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x03 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x03 ; '.'
0000000000000f79         db  0x00 ; '.'
0000000000000f7a         db  0x04 ; '.'
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x00 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x03 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0x03 ; '.'
0000000000000f81         db  0x00 ; '.'
0000000000000f82         db  0x03 ; '.'
0000000000000f83         db  0x00 ; '.'
0000000000000f84         db  0x03 ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x02 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0x02 ; '.'
0000000000000f89         db  0x00 ; '.'
0000000000000f8a         db  0x04 ; '.'
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x03 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x03 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0x03 ; '.'
0000000000000f91         db  0x00 ; '.'
0000000000000f92         db  0x03 ; '.'
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x03 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x03 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0x03 ; '.'
0000000000000f99         db  0x00 ; '.'
0000000000000f9a         db  0x03 ; '.'
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x00 ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x00 ; '.'
0000000000000f9f         db  0x00 ; '.'                                         ; DATA XREF=vasnprintf+180


        ; Section .gnu.version_r
        ; Range: [0xfa0; 0x1010[ (112 bytes)
        ; File offset : [4000; 4112[ (112 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000fa0         db  0x01 ; '.'
0000000000000fa1         db  0x00 ; '.'
0000000000000fa2         db  0x06 ; '.'
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x01 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x00 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0x10 ; '.'
0000000000000fa9         db  0x00 ; '.'
0000000000000faa         db  0x00 ; '.'
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x00 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x00 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0x94 ; '.'
0000000000000fb1         db  0x91 ; '.'
0000000000000fb2         db  0x96 ; '.'
0000000000000fb3         db  0x06 ; '.'
0000000000000fb4         db  0x00 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x07 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0x5f ; '_'
0000000000000fb9         db  0x03 ; '.'
0000000000000fba         db  0x00 ; '.'
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x10 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'
0000000000000fc0         db  0x14 ; '.'
0000000000000fc1         db  0x69 ; 'i'
0000000000000fc2         db  0x69 ; 'i'
0000000000000fc3         db  0x0d ; '.'
0000000000000fc4         db  0x00 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x06 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0x6a ; 'j'
0000000000000fc9         db  0x03 ; '.'
0000000000000fca         db  0x00 ; '.'
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x10 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x97 ; '.'
0000000000000fd1         db  0x91 ; '.'
0000000000000fd2         db  0x96 ; '.'
0000000000000fd3         db  0x06 ; '.'
0000000000000fd4         db  0x00 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x05 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0x74 ; 't'
0000000000000fd9         db  0x03 ; '.'
0000000000000fda         db  0x00 ; '.'
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x10 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x00 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0x74 ; 't'
0000000000000fe1         db  0x19 ; '.'
0000000000000fe2         db  0x69 ; 'i'
0000000000000fe3         db  0x09 ; '.'
0000000000000fe4         db  0x00 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x04 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x7f ; '.'
0000000000000fe9         db  0x03 ; '.'
0000000000000fea         db  0x00 ; '.'
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x10 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x00 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0x75 ; 'u'
0000000000000ff1         db  0x1a ; '.'
0000000000000ff2         db  0x69 ; 'i'
0000000000000ff3         db  0x09 ; '.'
0000000000000ff4         db  0x00 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x03 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0x8b ; '.'
0000000000000ff9         db  0x03 ; '.'
0000000000000ffa         db  0x00 ; '.'
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x10 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x00 ; '.'
0000000000000fff         db  0x00 ; '.'
0000000000001000         db  0x13 ; '.'
0000000000001001         db  0x69 ; 'i'
0000000000001002         db  0x69 ; 'i'
0000000000001003         db  0x0d ; '.'
0000000000001004         db  0x00 ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x02 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0x97 ; '.'
0000000000001009         db  0x03 ; '.'
000000000000100a         db  0x00 ; '.'
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0x1010; 0x1310[ (768 bytes)
        ; File offset : [4112; 4880[ (768 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001010         db  0x90 ; '.'
0000000000001011         db  0x0a ; '.'
0000000000001012         db  0x21 ; '!'
0000000000001013         db  0x00 ; '.'
0000000000001014         db  0x00 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x00 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0x08 ; '.'
0000000000001019         db  0x00 ; '.'
000000000000101a         db  0x00 ; '.'
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x00 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0x80 ; '.'
0000000000001021         db  0x3d ; '='
0000000000001022         db  0x00 ; '.'
0000000000001023         db  0x00 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x00 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0x98 ; '.'
0000000000001029         db  0x0a ; '.'
000000000000102a         db  0x21 ; '!'
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x00 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0x08 ; '.'
0000000000001031         db  0x00 ; '.'
0000000000001032         db  0x00 ; '.'
0000000000001033         db  0x00 ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x00 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0x40 ; '@'
0000000000001039         db  0x3d ; '='
000000000000103a         db  0x00 ; '.'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0xa0 ; '.'
0000000000001041         db  0x0a ; '.'
0000000000001042         db  0x21 ; '!'
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x00 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0x08 ; '.'
0000000000001049         db  0x00 ; '.'
000000000000104a         db  0x00 ; '.'
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0xbe ; '.'
0000000000001051         db  0xe1 ; '.'
0000000000001052         db  0x00 ; '.'
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0xa8 ; '.'
0000000000001059         db  0x0a ; '.'
000000000000105a         db  0x21 ; '!'
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x00 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0x08 ; '.'
0000000000001061         db  0x00 ; '.'
0000000000001062         db  0x00 ; '.'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0xcd ; '.'
0000000000001069         db  0xe1 ; '.'
000000000000106a         db  0x00 ; '.'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0xc0 ; '.'
0000000000001071         db  0x0a ; '.'
0000000000001072         db  0x21 ; '!'
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x00 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x08 ; '.'
0000000000001079         db  0x00 ; '.'
000000000000107a         db  0x00 ; '.'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0x02 ; '.'
0000000000001081         db  0xe2 ; '.'
0000000000001082         db  0x00 ; '.'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0xe0 ; '.'
0000000000001089         db  0x0a ; '.'
000000000000108a         db  0x21 ; '!'
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x00 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x08 ; '.'
0000000000001091         db  0x00 ; '.'
0000000000001092         db  0x00 ; '.'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0xae ; '.'
0000000000001099         db  0xc8 ; '.'
000000000000109a         db  0x00 ; '.'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x20 ; ' '
00000000000010a1         db  0x0b ; '.'
00000000000010a2         db  0x21 ; '!'
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x00 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x08 ; '.'
00000000000010a9         db  0x00 ; '.'
00000000000010aa         db  0x00 ; '.'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x61 ; 'a'
00000000000010b1         db  0xe2 ; '.'
00000000000010b2         db  0x00 ; '.'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0x28 ; '('
00000000000010b9         db  0x0b ; '.'
00000000000010ba         db  0x21 ; '!'
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x08 ; '.'
00000000000010c1         db  0x00 ; '.'
00000000000010c2         db  0x00 ; '.'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x69 ; 'i'
00000000000010c9         db  0xe2 ; '.'
00000000000010ca         db  0x00 ; '.'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x30 ; '0'
00000000000010d1         db  0x0b ; '.'
00000000000010d2         db  0x21 ; '!'
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x00 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x08 ; '.'
00000000000010d9         db  0x00 ; '.'
00000000000010da         db  0x00 ; '.'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x6f ; 'o'
00000000000010e1         db  0xe2 ; '.'
00000000000010e2         db  0x00 ; '.'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x38 ; '8'
00000000000010e9         db  0x0b ; '.'
00000000000010ea         db  0x21 ; '!'
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x00 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x08 ; '.'
00000000000010f1         db  0x00 ; '.'
00000000000010f2         db  0x00 ; '.'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0x7c ; '|'
00000000000010f9         db  0xe2 ; '.'
00000000000010fa         db  0x00 ; '.'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0x40 ; '@'
0000000000001101         db  0x0b ; '.'
0000000000001102         db  0x21 ; '!'
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x00 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x08 ; '.'
0000000000001109         db  0x00 ; '.'
000000000000110a         db  0x00 ; '.'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x00 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0x89 ; '.'
0000000000001111         db  0xe2 ; '.'
0000000000001112         db  0x00 ; '.'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0x48 ; 'H'
0000000000001119         db  0x0b ; '.'
000000000000111a         db  0x21 ; '!'
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x00 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x08 ; '.'
0000000000001121         db  0x00 ; '.'
0000000000001122         db  0x00 ; '.'
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x00 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x9d ; '.'
0000000000001129         db  0xe2 ; '.'
000000000000112a         db  0x00 ; '.'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0x50 ; 'P'
0000000000001131         db  0x0b ; '.'
0000000000001132         db  0x21 ; '!'
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x08 ; '.'
0000000000001139         db  0x00 ; '.'
000000000000113a         db  0x00 ; '.'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x00 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x9f ; '.'
0000000000001141         db  0xe2 ; '.'
0000000000001142         db  0x00 ; '.'
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0x58 ; 'X'
0000000000001149         db  0x0b ; '.'
000000000000114a         db  0x21 ; '!'
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x00 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x08 ; '.'
0000000000001151         db  0x00 ; '.'
0000000000001152         db  0x00 ; '.'
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x82 ; '.'
0000000000001159         db  0xe2 ; '.'
000000000000115a         db  0x00 ; '.'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0x60 ; '`'
0000000000001161         db  0x0b ; '.'
0000000000001162         db  0x21 ; '!'
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0x08 ; '.'
0000000000001169         db  0x00 ; '.'
000000000000116a         db  0x00 ; '.'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x00 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x5d ; ']'
0000000000001171         db  0xc8 ; '.'
0000000000001172         db  0x00 ; '.'
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0x68 ; 'h'
0000000000001179         db  0x0b ; '.'
000000000000117a         db  0x21 ; '!'
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0x08 ; '.'
0000000000001181         db  0x00 ; '.'
0000000000001182         db  0x00 ; '.'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0xa7 ; '.'
0000000000001189         db  0xe2 ; '.'
000000000000118a         db  0x00 ; '.'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0x08 ; '.'
0000000000001191         db  0x10 ; '.'
0000000000001192         db  0x21 ; '!'
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x08 ; '.'
0000000000001199         db  0x00 ; '.'
000000000000119a         db  0x00 ; '.'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x08 ; '.'
00000000000011a1         db  0x10 ; '.'
00000000000011a2         db  0x21 ; '!'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0x28 ; '('
00000000000011a9         db  0x10 ; '.'
00000000000011aa         db  0x21 ; '!'
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x08 ; '.'
00000000000011b1         db  0x00 ; '.'
00000000000011b2         db  0x00 ; '.'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x78 ; 'x'
00000000000011b9         db  0xe1 ; '.'
00000000000011ba         db  0x00 ; '.'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0x80 ; '.'
00000000000011c1         db  0x10 ; '.'
00000000000011c2         db  0x21 ; '!'
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0x08 ; '.'
00000000000011c9         db  0x00 ; '.'
00000000000011ca         db  0x00 ; '.'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x90 ; '.'
00000000000011d1         db  0x10 ; '.'
00000000000011d2         db  0x21 ; '!'
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0x98 ; '.'
00000000000011d9         db  0x10 ; '.'
00000000000011da         db  0x21 ; '!'
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0x08 ; '.'
00000000000011e1         db  0x00 ; '.'
00000000000011e2         db  0x00 ; '.'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x20 ; ' '
00000000000011e9         db  0x14 ; '.'
00000000000011ea         db  0x21 ; '!'
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0xa0 ; '.'
00000000000011f1         db  0x10 ; '.'
00000000000011f2         db  0x21 ; '!'
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0x08 ; '.'
00000000000011f9         db  0x00 ; '.'
00000000000011fa         db  0x00 ; '.'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x00 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x20 ; ' '
0000000000001201         db  0xa1 ; '.'
0000000000001202         db  0x00 ; '.'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x00 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0xc8 ; '.'
0000000000001209         db  0x0f ; '.'
000000000000120a         db  0x21 ; '!'
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0x06 ; '.'
0000000000001211         db  0x00 ; '.'
0000000000001212         db  0x00 ; '.'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x0c ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x00 ; '.'
0000000000001219         db  0x00 ; '.'
000000000000121a         db  0x00 ; '.'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x00 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0xd0 ; '.'
0000000000001221         db  0x0f ; '.'
0000000000001222         db  0x21 ; '!'
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0x06 ; '.'
0000000000001229         db  0x00 ; '.'
000000000000122a         db  0x00 ; '.'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x2a ; '*'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x00 ; '.'
0000000000001231         db  0x00 ; '.'
0000000000001232         db  0x00 ; '.'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x00 ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0xd8 ; '.'
0000000000001239         db  0x0f ; '.'
000000000000123a         db  0x21 ; '!'
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0x06 ; '.'
0000000000001241         db  0x00 ; '.'
0000000000001242         db  0x00 ; '.'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x30 ; '0'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x00 ; '.'
0000000000001249         db  0x00 ; '.'
000000000000124a         db  0x00 ; '.'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x00 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0xe0 ; '.'
0000000000001251         db  0x0f ; '.'
0000000000001252         db  0x21 ; '!'
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0x06 ; '.'
0000000000001259         db  0x00 ; '.'
000000000000125a         db  0x00 ; '.'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x47 ; 'G'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x00 ; '.'
0000000000001261         db  0x00 ; '.'
0000000000001262         db  0x00 ; '.'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x00 ; '.'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0xe8 ; '.'
0000000000001269         db  0x0f ; '.'
000000000000126a         db  0x21 ; '!'
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x06 ; '.'
0000000000001271         db  0x00 ; '.'
0000000000001272         db  0x00 ; '.'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x4a ; 'J'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x00 ; '.'
0000000000001279         db  0x00 ; '.'
000000000000127a         db  0x00 ; '.'
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x00 ; '.'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0xc0 ; '.'
0000000000001281         db  0x10 ; '.'
0000000000001282         db  0x21 ; '!'
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0x05 ; '.'
0000000000001289         db  0x00 ; '.'
000000000000128a         db  0x00 ; '.'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x50 ; 'P'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0x00 ; '.'
0000000000001291         db  0x00 ; '.'
0000000000001292         db  0x00 ; '.'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x00 ; '.'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0xc8 ; '.'
0000000000001299         db  0x10 ; '.'
000000000000129a         db  0x21 ; '!'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0x05 ; '.'
00000000000012a1         db  0x00 ; '.'
00000000000012a2         db  0x00 ; '.'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x4f ; 'O'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x00 ; '.'
00000000000012a9         db  0x00 ; '.'
00000000000012aa         db  0x00 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x00 ; '.'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0xd0 ; '.'
00000000000012b1         db  0x10 ; '.'
00000000000012b2         db  0x21 ; '!'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0x05 ; '.'
00000000000012b9         db  0x00 ; '.'
00000000000012ba         db  0x00 ; '.'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x56 ; 'V'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x00 ; '.'
00000000000012c1         db  0x00 ; '.'
00000000000012c2         db  0x00 ; '.'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x00 ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0xd8 ; '.'
00000000000012c9         db  0x10 ; '.'
00000000000012ca         db  0x21 ; '!'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0x05 ; '.'
00000000000012d1         db  0x00 ; '.'
00000000000012d2         db  0x00 ; '.'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x52 ; 'R'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x00 ; '.'
00000000000012d9         db  0x00 ; '.'
00000000000012da         db  0x00 ; '.'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x00 ; '.'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0xe0 ; '.'
00000000000012e1         db  0x10 ; '.'
00000000000012e2         db  0x21 ; '!'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0x05 ; '.'
00000000000012e9         db  0x00 ; '.'
00000000000012ea         db  0x00 ; '.'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x54 ; 'T'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x00 ; '.'
00000000000012f1         db  0x00 ; '.'
00000000000012f2         db  0x00 ; '.'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x00 ; '.'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0x00 ; '.'
00000000000012f9         db  0x11 ; '.'
00000000000012fa         db  0x21 ; '!'
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0x05 ; '.'
0000000000001301         db  0x00 ; '.'
0000000000001302         db  0x00 ; '.'
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x55 ; 'U'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x00 ; '.'
0000000000001309         db  0x00 ; '.'
000000000000130a         db  0x00 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x00 ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x1310; 0x19e8[ (1752 bytes)
        ; File offset : [4880; 6632[ (1752 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001310         db  0x80 ; '.'
0000000000001311         db  0x0d ; '.'
0000000000001312         db  0x21 ; '!'
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0x07 ; '.'
0000000000001319         db  0x00 ; '.'
000000000000131a         db  0x00 ; '.'
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x01 ; '.'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x00 ; '.'
0000000000001321         db  0x00 ; '.'
0000000000001322         db  0x00 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x00 ; '.'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0x88 ; '.'
0000000000001329         db  0x0d ; '.'
000000000000132a         db  0x21 ; '!'
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0x07 ; '.'
0000000000001331         db  0x00 ; '.'
0000000000001332         db  0x00 ; '.'
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x02 ; '.'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x00 ; '.'
0000000000001339         db  0x00 ; '.'
000000000000133a         db  0x00 ; '.'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x00 ; '.'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0x90 ; '.'
0000000000001341         db  0x0d ; '.'
0000000000001342         db  0x21 ; '!'
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0x07 ; '.'
0000000000001349         db  0x00 ; '.'
000000000000134a         db  0x00 ; '.'
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x03 ; '.'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x00 ; '.'
0000000000001351         db  0x00 ; '.'
0000000000001352         db  0x00 ; '.'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x00 ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0x98 ; '.'
0000000000001359         db  0x0d ; '.'
000000000000135a         db  0x21 ; '!'
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0x07 ; '.'
0000000000001361         db  0x00 ; '.'
0000000000001362         db  0x00 ; '.'
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x04 ; '.'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x00 ; '.'
0000000000001369         db  0x00 ; '.'
000000000000136a         db  0x00 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x00 ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0xa0 ; '.'
0000000000001371         db  0x0d ; '.'
0000000000001372         db  0x21 ; '!'
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0x07 ; '.'
0000000000001379         db  0x00 ; '.'
000000000000137a         db  0x00 ; '.'
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x05 ; '.'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0x00 ; '.'
0000000000001381         db  0x00 ; '.'
0000000000001382         db  0x00 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x00 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0xa8 ; '.'
0000000000001389         db  0x0d ; '.'
000000000000138a         db  0x21 ; '!'
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'
0000000000001390         db  0x07 ; '.'
0000000000001391         db  0x00 ; '.'
0000000000001392         db  0x00 ; '.'
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x06 ; '.'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0x00 ; '.'
0000000000001399         db  0x00 ; '.'
000000000000139a         db  0x00 ; '.'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x00 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0xb0 ; '.'
00000000000013a1         db  0x0d ; '.'
00000000000013a2         db  0x21 ; '!'
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x00 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0x07 ; '.'
00000000000013a9         db  0x00 ; '.'
00000000000013aa         db  0x00 ; '.'
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x07 ; '.'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0x00 ; '.'
00000000000013b1         db  0x00 ; '.'
00000000000013b2         db  0x00 ; '.'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x00 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0xb8 ; '.'
00000000000013b9         db  0x0d ; '.'
00000000000013ba         db  0x21 ; '!'
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0x07 ; '.'
00000000000013c1         db  0x00 ; '.'
00000000000013c2         db  0x00 ; '.'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x08 ; '.'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0x00 ; '.'
00000000000013c9         db  0x00 ; '.'
00000000000013ca         db  0x00 ; '.'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x00 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0xc0 ; '.'
00000000000013d1         db  0x0d ; '.'
00000000000013d2         db  0x21 ; '!'
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x00 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0x07 ; '.'
00000000000013d9         db  0x00 ; '.'
00000000000013da         db  0x00 ; '.'
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x09 ; '.'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x00 ; '.'
00000000000013e1         db  0x00 ; '.'
00000000000013e2         db  0x00 ; '.'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x00 ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0xc8 ; '.'
00000000000013e9         db  0x0d ; '.'
00000000000013ea         db  0x21 ; '!'
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0x07 ; '.'
00000000000013f1         db  0x00 ; '.'
00000000000013f2         db  0x00 ; '.'
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x0a ; '.'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x00 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x00 ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'
0000000000001400         db  0xd0 ; '.'
0000000000001401         db  0x0d ; '.'
0000000000001402         db  0x21 ; '!'
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0x07 ; '.'
0000000000001409         db  0x00 ; '.'
000000000000140a         db  0x00 ; '.'
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x0b ; '.'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x00 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x00 ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0xd8 ; '.'
0000000000001419         db  0x0d ; '.'
000000000000141a         db  0x21 ; '!'
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0x07 ; '.'
0000000000001421         db  0x00 ; '.'
0000000000001422         db  0x00 ; '.'
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x0d ; '.'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x00 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x00 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x00 ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0xe0 ; '.'
0000000000001431         db  0x0d ; '.'
0000000000001432         db  0x21 ; '!'
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0x07 ; '.'
0000000000001439         db  0x00 ; '.'
000000000000143a         db  0x00 ; '.'
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x0e ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x00 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x00 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x00 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0xe8 ; '.'
0000000000001449         db  0x0d ; '.'
000000000000144a         db  0x21 ; '!'
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0x07 ; '.'
0000000000001451         db  0x00 ; '.'
0000000000001452         db  0x00 ; '.'
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x0f ; '.'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x00 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x00 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x00 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0xf0 ; '.'
0000000000001461         db  0x0d ; '.'
0000000000001462         db  0x21 ; '!'
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0x07 ; '.'
0000000000001469         db  0x00 ; '.'
000000000000146a         db  0x00 ; '.'
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x10 ; '.'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x00 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x00 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x00 ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0xf8 ; '.'
0000000000001479         db  0x0d ; '.'
000000000000147a         db  0x21 ; '!'
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0x07 ; '.'
0000000000001481         db  0x00 ; '.'
0000000000001482         db  0x00 ; '.'
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x11 ; '.'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x00 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x00 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x00 ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0x00 ; '.'
0000000000001491         db  0x0e ; '.'
0000000000001492         db  0x21 ; '!'
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0x07 ; '.'
0000000000001499         db  0x00 ; '.'
000000000000149a         db  0x00 ; '.'
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x12 ; '.'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x00 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x00 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x00 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0x08 ; '.'
00000000000014a9         db  0x0e ; '.'
00000000000014aa         db  0x21 ; '!'
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0x07 ; '.'
00000000000014b1         db  0x00 ; '.'
00000000000014b2         db  0x00 ; '.'
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x13 ; '.'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x00 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x00 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x00 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0x10 ; '.'
00000000000014c1         db  0x0e ; '.'
00000000000014c2         db  0x21 ; '!'
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x07 ; '.'
00000000000014c9         db  0x00 ; '.'
00000000000014ca         db  0x00 ; '.'
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x14 ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x00 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x00 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x00 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0x18 ; '.'
00000000000014d9         db  0x0e ; '.'
00000000000014da         db  0x21 ; '!'
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x07 ; '.'
00000000000014e1         db  0x00 ; '.'
00000000000014e2         db  0x00 ; '.'
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x15 ; '.'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x00 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x00 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x00 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0x20 ; ' '
00000000000014f1         db  0x0e ; '.'
00000000000014f2         db  0x21 ; '!'
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0x07 ; '.'
00000000000014f9         db  0x00 ; '.'
00000000000014fa         db  0x00 ; '.'
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x16 ; '.'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x00 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x00 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x00 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0x28 ; '('
0000000000001509         db  0x0e ; '.'
000000000000150a         db  0x21 ; '!'
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0x07 ; '.'
0000000000001511         db  0x00 ; '.'
0000000000001512         db  0x00 ; '.'
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x17 ; '.'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x00 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x00 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0x30 ; '0'
0000000000001521         db  0x0e ; '.'
0000000000001522         db  0x21 ; '!'
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0x07 ; '.'
0000000000001529         db  0x00 ; '.'
000000000000152a         db  0x00 ; '.'
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x18 ; '.'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x00 ; '.'
0000000000001531         db  0x00 ; '.'
0000000000001532         db  0x00 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x00 ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0x38 ; '8'
0000000000001539         db  0x0e ; '.'
000000000000153a         db  0x21 ; '!'
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x07 ; '.'
0000000000001541         db  0x00 ; '.'
0000000000001542         db  0x00 ; '.'
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x19 ; '.'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x00 ; '.'
0000000000001549         db  0x00 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x00 ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x40 ; '@'
0000000000001551         db  0x0e ; '.'
0000000000001552         db  0x21 ; '!'
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x07 ; '.'
0000000000001559         db  0x00 ; '.'
000000000000155a         db  0x00 ; '.'
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x1a ; '.'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0x00 ; '.'
0000000000001561         db  0x00 ; '.'
0000000000001562         db  0x00 ; '.'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x00 ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0x48 ; 'H'
0000000000001569         db  0x0e ; '.'
000000000000156a         db  0x21 ; '!'
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x07 ; '.'
0000000000001571         db  0x00 ; '.'
0000000000001572         db  0x00 ; '.'
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x1b ; '.'
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0x00 ; '.'
0000000000001579         db  0x00 ; '.'
000000000000157a         db  0x00 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x00 ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0x50 ; 'P'
0000000000001581         db  0x0e ; '.'
0000000000001582         db  0x21 ; '!'
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0x07 ; '.'
0000000000001589         db  0x00 ; '.'
000000000000158a         db  0x00 ; '.'
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x1c ; '.'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x00 ; '.'
0000000000001591         db  0x00 ; '.'
0000000000001592         db  0x00 ; '.'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x00 ; '.'
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0x58 ; 'X'
0000000000001599         db  0x0e ; '.'
000000000000159a         db  0x21 ; '!'
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x00 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x07 ; '.'
00000000000015a1         db  0x00 ; '.'
00000000000015a2         db  0x00 ; '.'
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x1d ; '.'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0x00 ; '.'
00000000000015a9         db  0x00 ; '.'
00000000000015aa         db  0x00 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x00 ; '.'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0x60 ; '`'
00000000000015b1         db  0x0e ; '.'
00000000000015b2         db  0x21 ; '!'
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x07 ; '.'
00000000000015b9         db  0x00 ; '.'
00000000000015ba         db  0x00 ; '.'
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x1e ; '.'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0x00 ; '.'
00000000000015c1         db  0x00 ; '.'
00000000000015c2         db  0x00 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x00 ; '.'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0x68 ; 'h'
00000000000015c9         db  0x0e ; '.'
00000000000015ca         db  0x21 ; '!'
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x07 ; '.'
00000000000015d1         db  0x00 ; '.'
00000000000015d2         db  0x00 ; '.'
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x1f ; '.'
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x00 ; '.'
00000000000015d9         db  0x00 ; '.'
00000000000015da         db  0x00 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x00 ; '.'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0x70 ; 'p'
00000000000015e1         db  0x0e ; '.'
00000000000015e2         db  0x21 ; '!'
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0x07 ; '.'
00000000000015e9         db  0x00 ; '.'
00000000000015ea         db  0x00 ; '.'
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x20 ; ' '
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x00 ; '.'
00000000000015f1         db  0x00 ; '.'
00000000000015f2         db  0x00 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x00 ; '.'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0x78 ; 'x'
00000000000015f9         db  0x0e ; '.'
00000000000015fa         db  0x21 ; '!'
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0x07 ; '.'
0000000000001601         db  0x00 ; '.'
0000000000001602         db  0x00 ; '.'
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x21 ; '!'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0x00 ; '.'
0000000000001609         db  0x00 ; '.'
000000000000160a         db  0x00 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x00 ; '.'
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0x80 ; '.'
0000000000001611         db  0x0e ; '.'
0000000000001612         db  0x21 ; '!'
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0x07 ; '.'
0000000000001619         db  0x00 ; '.'
000000000000161a         db  0x00 ; '.'
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x22 ; '"'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0x00 ; '.'
0000000000001621         db  0x00 ; '.'
0000000000001622         db  0x00 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x00 ; '.'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0x88 ; '.'
0000000000001629         db  0x0e ; '.'
000000000000162a         db  0x21 ; '!'
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0x07 ; '.'
0000000000001631         db  0x00 ; '.'
0000000000001632         db  0x00 ; '.'
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x23 ; '#'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x00 ; '.'
0000000000001639         db  0x00 ; '.'
000000000000163a         db  0x00 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x00 ; '.'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0x90 ; '.'
0000000000001641         db  0x0e ; '.'
0000000000001642         db  0x21 ; '!'
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0x07 ; '.'
0000000000001649         db  0x00 ; '.'
000000000000164a         db  0x00 ; '.'
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x24 ; '$'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0x00 ; '.'
0000000000001651         db  0x00 ; '.'
0000000000001652         db  0x00 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x00 ; '.'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0x98 ; '.'
0000000000001659         db  0x0e ; '.'
000000000000165a         db  0x21 ; '!'
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0x07 ; '.'
0000000000001661         db  0x00 ; '.'
0000000000001662         db  0x00 ; '.'
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x25 ; '%'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0x00 ; '.'
0000000000001669         db  0x00 ; '.'
000000000000166a         db  0x00 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x00 ; '.'
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0xa0 ; '.'
0000000000001671         db  0x0e ; '.'
0000000000001672         db  0x21 ; '!'
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0x07 ; '.'
0000000000001679         db  0x00 ; '.'
000000000000167a         db  0x00 ; '.'
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x26 ; '&'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0x00 ; '.'
0000000000001681         db  0x00 ; '.'
0000000000001682         db  0x00 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x00 ; '.'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0xa8 ; '.'
0000000000001689         db  0x0e ; '.'
000000000000168a         db  0x21 ; '!'
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0x07 ; '.'
0000000000001691         db  0x00 ; '.'
0000000000001692         db  0x00 ; '.'
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x27 ; '''
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x00 ; '.'
0000000000001699         db  0x00 ; '.'
000000000000169a         db  0x00 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x00 ; '.'
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0xb0 ; '.'
00000000000016a1         db  0x0e ; '.'
00000000000016a2         db  0x21 ; '!'
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0x07 ; '.'
00000000000016a9         db  0x00 ; '.'
00000000000016aa         db  0x00 ; '.'
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x28 ; '('
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x00 ; '.'
00000000000016b1         db  0x00 ; '.'
00000000000016b2         db  0x00 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x00 ; '.'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0xb8 ; '.'
00000000000016b9         db  0x0e ; '.'
00000000000016ba         db  0x21 ; '!'
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0x07 ; '.'
00000000000016c1         db  0x00 ; '.'
00000000000016c2         db  0x00 ; '.'
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x29 ; ')'
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x00 ; '.'
00000000000016c9         db  0x00 ; '.'
00000000000016ca         db  0x00 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x00 ; '.'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0xc0 ; '.'
00000000000016d1         db  0x0e ; '.'
00000000000016d2         db  0x21 ; '!'
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0x07 ; '.'
00000000000016d9         db  0x00 ; '.'
00000000000016da         db  0x00 ; '.'
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x2b ; '+'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0x00 ; '.'
00000000000016e1         db  0x00 ; '.'
00000000000016e2         db  0x00 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x00 ; '.'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0xc8 ; '.'
00000000000016e9         db  0x0e ; '.'
00000000000016ea         db  0x21 ; '!'
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0x07 ; '.'
00000000000016f1         db  0x00 ; '.'
00000000000016f2         db  0x00 ; '.'
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x2c ; ','
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x00 ; '.'
00000000000016f9         db  0x00 ; '.'
00000000000016fa         db  0x00 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x00 ; '.'
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0xd0 ; '.'
0000000000001701         db  0x0e ; '.'
0000000000001702         db  0x21 ; '!'
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0x07 ; '.'
0000000000001709         db  0x00 ; '.'
000000000000170a         db  0x00 ; '.'
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x2d ; '-'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x00 ; '.'
0000000000001711         db  0x00 ; '.'
0000000000001712         db  0x00 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x00 ; '.'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0xd8 ; '.'
0000000000001719         db  0x0e ; '.'
000000000000171a         db  0x21 ; '!'
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0x07 ; '.'
0000000000001721         db  0x00 ; '.'
0000000000001722         db  0x00 ; '.'
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x2e ; '.'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x00 ; '.'
0000000000001729         db  0x00 ; '.'
000000000000172a         db  0x00 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x00 ; '.'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0xe0 ; '.'
0000000000001731         db  0x0e ; '.'
0000000000001732         db  0x21 ; '!'
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0x07 ; '.'
0000000000001739         db  0x00 ; '.'
000000000000173a         db  0x00 ; '.'
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x2f ; '/'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0x00 ; '.'
0000000000001741         db  0x00 ; '.'
0000000000001742         db  0x00 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x00 ; '.'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0xe8 ; '.'
0000000000001749         db  0x0e ; '.'
000000000000174a         db  0x21 ; '!'
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0x07 ; '.'
0000000000001751         db  0x00 ; '.'
0000000000001752         db  0x00 ; '.'
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x31 ; '1'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0x00 ; '.'
0000000000001759         db  0x00 ; '.'
000000000000175a         db  0x00 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x00 ; '.'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0xf0 ; '.'
0000000000001761         db  0x0e ; '.'
0000000000001762         db  0x21 ; '!'
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0x07 ; '.'
0000000000001769         db  0x00 ; '.'
000000000000176a         db  0x00 ; '.'
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x32 ; '2'
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0x00 ; '.'
0000000000001771         db  0x00 ; '.'
0000000000001772         db  0x00 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x00 ; '.'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0xf8 ; '.'
0000000000001779         db  0x0e ; '.'
000000000000177a         db  0x21 ; '!'
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0x07 ; '.'
0000000000001781         db  0x00 ; '.'
0000000000001782         db  0x00 ; '.'
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x33 ; '3'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0x00 ; '.'
0000000000001789         db  0x00 ; '.'
000000000000178a         db  0x00 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x00 ; '.'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0x00 ; '.'
0000000000001791         db  0x0f ; '.'
0000000000001792         db  0x21 ; '!'
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x00 ; '.'
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0x07 ; '.'
0000000000001799         db  0x00 ; '.'
000000000000179a         db  0x00 ; '.'
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x34 ; '4'
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0x00 ; '.'
00000000000017a1         db  0x00 ; '.'
00000000000017a2         db  0x00 ; '.'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x00 ; '.'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0x08 ; '.'
00000000000017a9         db  0x0f ; '.'
00000000000017aa         db  0x21 ; '!'
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0x07 ; '.'
00000000000017b1         db  0x00 ; '.'
00000000000017b2         db  0x00 ; '.'
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x35 ; '5'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0x00 ; '.'
00000000000017b9         db  0x00 ; '.'
00000000000017ba         db  0x00 ; '.'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x00 ; '.'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0x10 ; '.'
00000000000017c1         db  0x0f ; '.'
00000000000017c2         db  0x21 ; '!'
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x00 ; '.'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'
00000000000017c8         db  0x07 ; '.'
00000000000017c9         db  0x00 ; '.'
00000000000017ca         db  0x00 ; '.'
00000000000017cb         db  0x00 ; '.'
00000000000017cc         db  0x36 ; '6'
00000000000017cd         db  0x00 ; '.'
00000000000017ce         db  0x00 ; '.'
00000000000017cf         db  0x00 ; '.'
00000000000017d0         db  0x00 ; '.'
00000000000017d1         db  0x00 ; '.'
00000000000017d2         db  0x00 ; '.'
00000000000017d3         db  0x00 ; '.'
00000000000017d4         db  0x00 ; '.'
00000000000017d5         db  0x00 ; '.'
00000000000017d6         db  0x00 ; '.'
00000000000017d7         db  0x00 ; '.'
00000000000017d8         db  0x18 ; '.'
00000000000017d9         db  0x0f ; '.'
00000000000017da         db  0x21 ; '!'
00000000000017db         db  0x00 ; '.'
00000000000017dc         db  0x00 ; '.'
00000000000017dd         db  0x00 ; '.'
00000000000017de         db  0x00 ; '.'
00000000000017df         db  0x00 ; '.'
00000000000017e0         db  0x07 ; '.'
00000000000017e1         db  0x00 ; '.'
00000000000017e2         db  0x00 ; '.'
00000000000017e3         db  0x00 ; '.'
00000000000017e4         db  0x37 ; '7'
00000000000017e5         db  0x00 ; '.'
00000000000017e6         db  0x00 ; '.'
00000000000017e7         db  0x00 ; '.'
00000000000017e8         db  0x00 ; '.'
00000000000017e9         db  0x00 ; '.'
00000000000017ea         db  0x00 ; '.'
00000000000017eb         db  0x00 ; '.'
00000000000017ec         db  0x00 ; '.'
00000000000017ed         db  0x00 ; '.'
00000000000017ee         db  0x00 ; '.'
00000000000017ef         db  0x00 ; '.'
00000000000017f0         db  0x20 ; ' '
00000000000017f1         db  0x0f ; '.'
00000000000017f2         db  0x21 ; '!'
00000000000017f3         db  0x00 ; '.'
00000000000017f4         db  0x00 ; '.'
00000000000017f5         db  0x00 ; '.'
00000000000017f6         db  0x00 ; '.'
00000000000017f7         db  0x00 ; '.'
00000000000017f8         db  0x07 ; '.'
00000000000017f9         db  0x00 ; '.'
00000000000017fa         db  0x00 ; '.'
00000000000017fb         db  0x00 ; '.'
00000000000017fc         db  0x38 ; '8'
00000000000017fd         db  0x00 ; '.'
00000000000017fe         db  0x00 ; '.'
00000000000017ff         db  0x00 ; '.'
0000000000001800         db  0x00 ; '.'
0000000000001801         db  0x00 ; '.'
0000000000001802         db  0x00 ; '.'
0000000000001803         db  0x00 ; '.'
0000000000001804         db  0x00 ; '.'
0000000000001805         db  0x00 ; '.'
0000000000001806         db  0x00 ; '.'
0000000000001807         db  0x00 ; '.'
0000000000001808         db  0x28 ; '('
0000000000001809         db  0x0f ; '.'
000000000000180a         db  0x21 ; '!'
000000000000180b         db  0x00 ; '.'
000000000000180c         db  0x00 ; '.'
000000000000180d         db  0x00 ; '.'
000000000000180e         db  0x00 ; '.'
000000000000180f         db  0x00 ; '.'
0000000000001810         db  0x07 ; '.'
0000000000001811         db  0x00 ; '.'
0000000000001812         db  0x00 ; '.'
0000000000001813         db  0x00 ; '.'
0000000000001814         db  0x39 ; '9'
0000000000001815         db  0x00 ; '.'
0000000000001816         db  0x00 ; '.'
0000000000001817         db  0x00 ; '.'
0000000000001818         db  0x00 ; '.'
0000000000001819         db  0x00 ; '.'
000000000000181a         db  0x00 ; '.'
000000000000181b         db  0x00 ; '.'
000000000000181c         db  0x00 ; '.'
000000000000181d         db  0x00 ; '.'
000000000000181e         db  0x00 ; '.'
000000000000181f         db  0x00 ; '.'
0000000000001820         db  0x30 ; '0'
0000000000001821         db  0x0f ; '.'
0000000000001822         db  0x21 ; '!'
0000000000001823         db  0x00 ; '.'
0000000000001824         db  0x00 ; '.'
0000000000001825         db  0x00 ; '.'
0000000000001826         db  0x00 ; '.'
0000000000001827         db  0x00 ; '.'
0000000000001828         db  0x07 ; '.'
0000000000001829         db  0x00 ; '.'
000000000000182a         db  0x00 ; '.'
000000000000182b         db  0x00 ; '.'
000000000000182c         db  0x3a ; ':'
000000000000182d         db  0x00 ; '.'
000000000000182e         db  0x00 ; '.'
000000000000182f         db  0x00 ; '.'
0000000000001830         db  0x00 ; '.'
0000000000001831         db  0x00 ; '.'
0000000000001832         db  0x00 ; '.'
0000000000001833         db  0x00 ; '.'
0000000000001834         db  0x00 ; '.'
0000000000001835         db  0x00 ; '.'
0000000000001836         db  0x00 ; '.'
0000000000001837         db  0x00 ; '.'
0000000000001838         db  0x38 ; '8'
0000000000001839         db  0x0f ; '.'
000000000000183a         db  0x21 ; '!'
000000000000183b         db  0x00 ; '.'
000000000000183c         db  0x00 ; '.'
000000000000183d         db  0x00 ; '.'
000000000000183e         db  0x00 ; '.'
000000000000183f         db  0x00 ; '.'
0000000000001840         db  0x07 ; '.'
0000000000001841         db  0x00 ; '.'
0000000000001842         db  0x00 ; '.'
0000000000001843         db  0x00 ; '.'
0000000000001844         db  0x3b ; ';'
0000000000001845         db  0x00 ; '.'
0000000000001846         db  0x00 ; '.'
0000000000001847         db  0x00 ; '.'
0000000000001848         db  0x00 ; '.'
0000000000001849         db  0x00 ; '.'
000000000000184a         db  0x00 ; '.'
000000000000184b         db  0x00 ; '.'
000000000000184c         db  0x00 ; '.'
000000000000184d         db  0x00 ; '.'
000000000000184e         db  0x00 ; '.'
000000000000184f         db  0x00 ; '.'
0000000000001850         db  0x40 ; '@'
0000000000001851         db  0x0f ; '.'
0000000000001852         db  0x21 ; '!'
0000000000001853         db  0x00 ; '.'
0000000000001854         db  0x00 ; '.'
0000000000001855         db  0x00 ; '.'
0000000000001856         db  0x00 ; '.'
0000000000001857         db  0x00 ; '.'
0000000000001858         db  0x07 ; '.'
0000000000001859         db  0x00 ; '.'
000000000000185a         db  0x00 ; '.'
000000000000185b         db  0x00 ; '.'
000000000000185c         db  0x3c ; '<'
000000000000185d         db  0x00 ; '.'
000000000000185e         db  0x00 ; '.'
000000000000185f         db  0x00 ; '.'
0000000000001860         db  0x00 ; '.'
0000000000001861         db  0x00 ; '.'
0000000000001862         db  0x00 ; '.'
0000000000001863         db  0x00 ; '.'
0000000000001864         db  0x00 ; '.'
0000000000001865         db  0x00 ; '.'
0000000000001866         db  0x00 ; '.'
0000000000001867         db  0x00 ; '.'
0000000000001868         db  0x48 ; 'H'
0000000000001869         db  0x0f ; '.'
000000000000186a         db  0x21 ; '!'
000000000000186b         db  0x00 ; '.'
000000000000186c         db  0x00 ; '.'
000000000000186d         db  0x00 ; '.'
000000000000186e         db  0x00 ; '.'
000000000000186f         db  0x00 ; '.'
0000000000001870         db  0x07 ; '.'
0000000000001871         db  0x00 ; '.'
0000000000001872         db  0x00 ; '.'
0000000000001873         db  0x00 ; '.'
0000000000001874         db  0x3d ; '='
0000000000001875         db  0x00 ; '.'
0000000000001876         db  0x00 ; '.'
0000000000001877         db  0x00 ; '.'
0000000000001878         db  0x00 ; '.'
0000000000001879         db  0x00 ; '.'
000000000000187a         db  0x00 ; '.'
000000000000187b         db  0x00 ; '.'
000000000000187c         db  0x00 ; '.'
000000000000187d         db  0x00 ; '.'
000000000000187e         db  0x00 ; '.'
000000000000187f         db  0x00 ; '.'
0000000000001880         db  0x50 ; 'P'
0000000000001881         db  0x0f ; '.'
0000000000001882         db  0x21 ; '!'
0000000000001883         db  0x00 ; '.'
0000000000001884         db  0x00 ; '.'
0000000000001885         db  0x00 ; '.'
0000000000001886         db  0x00 ; '.'
0000000000001887         db  0x00 ; '.'
0000000000001888         db  0x07 ; '.'
0000000000001889         db  0x00 ; '.'
000000000000188a         db  0x00 ; '.'
000000000000188b         db  0x00 ; '.'
000000000000188c         db  0x3e ; '>'
000000000000188d         db  0x00 ; '.'
000000000000188e         db  0x00 ; '.'
000000000000188f         db  0x00 ; '.'
0000000000001890         db  0x00 ; '.'
0000000000001891         db  0x00 ; '.'
0000000000001892         db  0x00 ; '.'
0000000000001893         db  0x00 ; '.'
0000000000001894         db  0x00 ; '.'
0000000000001895         db  0x00 ; '.'
0000000000001896         db  0x00 ; '.'
0000000000001897         db  0x00 ; '.'
0000000000001898         db  0x58 ; 'X'
0000000000001899         db  0x0f ; '.'
000000000000189a         db  0x21 ; '!'
000000000000189b         db  0x00 ; '.'
000000000000189c         db  0x00 ; '.'
000000000000189d         db  0x00 ; '.'
000000000000189e         db  0x00 ; '.'
000000000000189f         db  0x00 ; '.'
00000000000018a0         db  0x07 ; '.'
00000000000018a1         db  0x00 ; '.'
00000000000018a2         db  0x00 ; '.'
00000000000018a3         db  0x00 ; '.'
00000000000018a4         db  0x3f ; '?'
00000000000018a5         db  0x00 ; '.'
00000000000018a6         db  0x00 ; '.'
00000000000018a7         db  0x00 ; '.'
00000000000018a8         db  0x00 ; '.'
00000000000018a9         db  0x00 ; '.'
00000000000018aa         db  0x00 ; '.'
00000000000018ab         db  0x00 ; '.'
00000000000018ac         db  0x00 ; '.'
00000000000018ad         db  0x00 ; '.'
00000000000018ae         db  0x00 ; '.'
00000000000018af         db  0x00 ; '.'
00000000000018b0         db  0x60 ; '`'
00000000000018b1         db  0x0f ; '.'
00000000000018b2         db  0x21 ; '!'
00000000000018b3         db  0x00 ; '.'
00000000000018b4         db  0x00 ; '.'
00000000000018b5         db  0x00 ; '.'
00000000000018b6         db  0x00 ; '.'
00000000000018b7         db  0x00 ; '.'
00000000000018b8         db  0x07 ; '.'
00000000000018b9         db  0x00 ; '.'
00000000000018ba         db  0x00 ; '.'
00000000000018bb         db  0x00 ; '.'
00000000000018bc         db  0x40 ; '@'
00000000000018bd         db  0x00 ; '.'
00000000000018be         db  0x00 ; '.'
00000000000018bf         db  0x00 ; '.'
00000000000018c0         db  0x00 ; '.'
00000000000018c1         db  0x00 ; '.'
00000000000018c2         db  0x00 ; '.'
00000000000018c3         db  0x00 ; '.'
00000000000018c4         db  0x00 ; '.'
00000000000018c5         db  0x00 ; '.'
00000000000018c6         db  0x00 ; '.'
00000000000018c7         db  0x00 ; '.'
00000000000018c8         db  0x68 ; 'h'
00000000000018c9         db  0x0f ; '.'
00000000000018ca         db  0x21 ; '!'
00000000000018cb         db  0x00 ; '.'
00000000000018cc         db  0x00 ; '.'
00000000000018cd         db  0x00 ; '.'
00000000000018ce         db  0x00 ; '.'
00000000000018cf         db  0x00 ; '.'
00000000000018d0         db  0x07 ; '.'
00000000000018d1         db  0x00 ; '.'
00000000000018d2         db  0x00 ; '.'
00000000000018d3         db  0x00 ; '.'
00000000000018d4         db  0x41 ; 'A'
00000000000018d5         db  0x00 ; '.'
00000000000018d6         db  0x00 ; '.'
00000000000018d7         db  0x00 ; '.'
00000000000018d8         db  0x00 ; '.'
00000000000018d9         db  0x00 ; '.'
00000000000018da         db  0x00 ; '.'
00000000000018db         db  0x00 ; '.'
00000000000018dc         db  0x00 ; '.'
00000000000018dd         db  0x00 ; '.'
00000000000018de         db  0x00 ; '.'
00000000000018df         db  0x00 ; '.'
00000000000018e0         db  0x70 ; 'p'
00000000000018e1         db  0x0f ; '.'
00000000000018e2         db  0x21 ; '!'
00000000000018e3         db  0x00 ; '.'
00000000000018e4         db  0x00 ; '.'
00000000000018e5         db  0x00 ; '.'
00000000000018e6         db  0x00 ; '.'
00000000000018e7         db  0x00 ; '.'
00000000000018e8         db  0x07 ; '.'
00000000000018e9         db  0x00 ; '.'
00000000000018ea         db  0x00 ; '.'
00000000000018eb         db  0x00 ; '.'
00000000000018ec         db  0x42 ; 'B'
00000000000018ed         db  0x00 ; '.'
00000000000018ee         db  0x00 ; '.'
00000000000018ef         db  0x00 ; '.'
00000000000018f0         db  0x00 ; '.'
00000000000018f1         db  0x00 ; '.'
00000000000018f2         db  0x00 ; '.'
00000000000018f3         db  0x00 ; '.'
00000000000018f4         db  0x00 ; '.'
00000000000018f5         db  0x00 ; '.'
00000000000018f6         db  0x00 ; '.'
00000000000018f7         db  0x00 ; '.'
00000000000018f8         db  0x78 ; 'x'
00000000000018f9         db  0x0f ; '.'
00000000000018fa         db  0x21 ; '!'
00000000000018fb         db  0x00 ; '.'
00000000000018fc         db  0x00 ; '.'
00000000000018fd         db  0x00 ; '.'
00000000000018fe         db  0x00 ; '.'
00000000000018ff         db  0x00 ; '.'
0000000000001900         db  0x07 ; '.'
0000000000001901         db  0x00 ; '.'
0000000000001902         db  0x00 ; '.'
0000000000001903         db  0x00 ; '.'
0000000000001904         db  0x43 ; 'C'
0000000000001905         db  0x00 ; '.'
0000000000001906         db  0x00 ; '.'
0000000000001907         db  0x00 ; '.'
0000000000001908         db  0x00 ; '.'
0000000000001909         db  0x00 ; '.'
000000000000190a         db  0x00 ; '.'
000000000000190b         db  0x00 ; '.'
000000000000190c         db  0x00 ; '.'
000000000000190d         db  0x00 ; '.'
000000000000190e         db  0x00 ; '.'
000000000000190f         db  0x00 ; '.'
0000000000001910         db  0x80 ; '.'
0000000000001911         db  0x0f ; '.'
0000000000001912         db  0x21 ; '!'
0000000000001913         db  0x00 ; '.'
0000000000001914         db  0x00 ; '.'
0000000000001915         db  0x00 ; '.'
0000000000001916         db  0x00 ; '.'
0000000000001917         db  0x00 ; '.'
0000000000001918         db  0x07 ; '.'
0000000000001919         db  0x00 ; '.'
000000000000191a         db  0x00 ; '.'
000000000000191b         db  0x00 ; '.'
000000000000191c         db  0x44 ; 'D'
000000000000191d         db  0x00 ; '.'
000000000000191e         db  0x00 ; '.'
000000000000191f         db  0x00 ; '.'
0000000000001920         db  0x00 ; '.'
0000000000001921         db  0x00 ; '.'
0000000000001922         db  0x00 ; '.'
0000000000001923         db  0x00 ; '.'
0000000000001924         db  0x00 ; '.'
0000000000001925         db  0x00 ; '.'
0000000000001926         db  0x00 ; '.'
0000000000001927         db  0x00 ; '.'
0000000000001928         db  0x88 ; '.'
0000000000001929         db  0x0f ; '.'
000000000000192a         db  0x21 ; '!'
000000000000192b         db  0x00 ; '.'
000000000000192c         db  0x00 ; '.'
000000000000192d         db  0x00 ; '.'
000000000000192e         db  0x00 ; '.'
000000000000192f         db  0x00 ; '.'
0000000000001930         db  0x07 ; '.'
0000000000001931         db  0x00 ; '.'
0000000000001932         db  0x00 ; '.'
0000000000001933         db  0x00 ; '.'
0000000000001934         db  0x45 ; 'E'
0000000000001935         db  0x00 ; '.'
0000000000001936         db  0x00 ; '.'
0000000000001937         db  0x00 ; '.'
0000000000001938         db  0x00 ; '.'
0000000000001939         db  0x00 ; '.'
000000000000193a         db  0x00 ; '.'
000000000000193b         db  0x00 ; '.'
000000000000193c         db  0x00 ; '.'
000000000000193d         db  0x00 ; '.'
000000000000193e         db  0x00 ; '.'
000000000000193f         db  0x00 ; '.'
0000000000001940         db  0x90 ; '.'
0000000000001941         db  0x0f ; '.'
0000000000001942         db  0x21 ; '!'
0000000000001943         db  0x00 ; '.'
0000000000001944         db  0x00 ; '.'
0000000000001945         db  0x00 ; '.'
0000000000001946         db  0x00 ; '.'
0000000000001947         db  0x00 ; '.'
0000000000001948         db  0x07 ; '.'
0000000000001949         db  0x00 ; '.'
000000000000194a         db  0x00 ; '.'
000000000000194b         db  0x00 ; '.'
000000000000194c         db  0x46 ; 'F'
000000000000194d         db  0x00 ; '.'
000000000000194e         db  0x00 ; '.'
000000000000194f         db  0x00 ; '.'
0000000000001950         db  0x00 ; '.'
0000000000001951         db  0x00 ; '.'
0000000000001952         db  0x00 ; '.'
0000000000001953         db  0x00 ; '.'
0000000000001954         db  0x00 ; '.'
0000000000001955         db  0x00 ; '.'
0000000000001956         db  0x00 ; '.'
0000000000001957         db  0x00 ; '.'
0000000000001958         db  0x98 ; '.'
0000000000001959         db  0x0f ; '.'
000000000000195a         db  0x21 ; '!'
000000000000195b         db  0x00 ; '.'
000000000000195c         db  0x00 ; '.'
000000000000195d         db  0x00 ; '.'
000000000000195e         db  0x00 ; '.'
000000000000195f         db  0x00 ; '.'
0000000000001960         db  0x07 ; '.'
0000000000001961         db  0x00 ; '.'
0000000000001962         db  0x00 ; '.'
0000000000001963         db  0x00 ; '.'
0000000000001964         db  0x48 ; 'H'
0000000000001965         db  0x00 ; '.'
0000000000001966         db  0x00 ; '.'
0000000000001967         db  0x00 ; '.'
0000000000001968         db  0x00 ; '.'
0000000000001969         db  0x00 ; '.'
000000000000196a         db  0x00 ; '.'
000000000000196b         db  0x00 ; '.'
000000000000196c         db  0x00 ; '.'
000000000000196d         db  0x00 ; '.'
000000000000196e         db  0x00 ; '.'
000000000000196f         db  0x00 ; '.'
0000000000001970         db  0xa0 ; '.'
0000000000001971         db  0x0f ; '.'
0000000000001972         db  0x21 ; '!'
0000000000001973         db  0x00 ; '.'
0000000000001974         db  0x00 ; '.'
0000000000001975         db  0x00 ; '.'
0000000000001976         db  0x00 ; '.'
0000000000001977         db  0x00 ; '.'
0000000000001978         db  0x07 ; '.'
0000000000001979         db  0x00 ; '.'
000000000000197a         db  0x00 ; '.'
000000000000197b         db  0x00 ; '.'
000000000000197c         db  0x49 ; 'I'
000000000000197d         db  0x00 ; '.'
000000000000197e         db  0x00 ; '.'
000000000000197f         db  0x00 ; '.'
0000000000001980         db  0x00 ; '.'
0000000000001981         db  0x00 ; '.'
0000000000001982         db  0x00 ; '.'
0000000000001983         db  0x00 ; '.'
0000000000001984         db  0x00 ; '.'
0000000000001985         db  0x00 ; '.'
0000000000001986         db  0x00 ; '.'
0000000000001987         db  0x00 ; '.'
0000000000001988         db  0xa8 ; '.'
0000000000001989         db  0x0f ; '.'
000000000000198a         db  0x21 ; '!'
000000000000198b         db  0x00 ; '.'
000000000000198c         db  0x00 ; '.'
000000000000198d         db  0x00 ; '.'
000000000000198e         db  0x00 ; '.'
000000000000198f         db  0x00 ; '.'
0000000000001990         db  0x07 ; '.'
0000000000001991         db  0x00 ; '.'
0000000000001992         db  0x00 ; '.'
0000000000001993         db  0x00 ; '.'
0000000000001994         db  0x4b ; 'K'
0000000000001995         db  0x00 ; '.'
0000000000001996         db  0x00 ; '.'
0000000000001997         db  0x00 ; '.'
0000000000001998         db  0x00 ; '.'
0000000000001999         db  0x00 ; '.'
000000000000199a         db  0x00 ; '.'
000000000000199b         db  0x00 ; '.'
000000000000199c         db  0x00 ; '.'
000000000000199d         db  0x00 ; '.'
000000000000199e         db  0x00 ; '.'
000000000000199f         db  0x00 ; '.'
00000000000019a0         db  0xb0 ; '.'
00000000000019a1         db  0x0f ; '.'
00000000000019a2         db  0x21 ; '!'
00000000000019a3         db  0x00 ; '.'
00000000000019a4         db  0x00 ; '.'
00000000000019a5         db  0x00 ; '.'
00000000000019a6         db  0x00 ; '.'
00000000000019a7         db  0x00 ; '.'
00000000000019a8         db  0x07 ; '.'
00000000000019a9         db  0x00 ; '.'
00000000000019aa         db  0x00 ; '.'
00000000000019ab         db  0x00 ; '.'
00000000000019ac         db  0x4c ; 'L'
00000000000019ad         db  0x00 ; '.'
00000000000019ae         db  0x00 ; '.'
00000000000019af         db  0x00 ; '.'
00000000000019b0         db  0x00 ; '.'
00000000000019b1         db  0x00 ; '.'
00000000000019b2         db  0x00 ; '.'
00000000000019b3         db  0x00 ; '.'
00000000000019b4         db  0x00 ; '.'
00000000000019b5         db  0x00 ; '.'
00000000000019b6         db  0x00 ; '.'
00000000000019b7         db  0x00 ; '.'
00000000000019b8         db  0xb8 ; '.'
00000000000019b9         db  0x0f ; '.'
00000000000019ba         db  0x21 ; '!'
00000000000019bb         db  0x00 ; '.'
00000000000019bc         db  0x00 ; '.'
00000000000019bd         db  0x00 ; '.'
00000000000019be         db  0x00 ; '.'
00000000000019bf         db  0x00 ; '.'
00000000000019c0         db  0x07 ; '.'
00000000000019c1         db  0x00 ; '.'
00000000000019c2         db  0x00 ; '.'
00000000000019c3         db  0x00 ; '.'
00000000000019c4         db  0x4d ; 'M'
00000000000019c5         db  0x00 ; '.'
00000000000019c6         db  0x00 ; '.'
00000000000019c7         db  0x00 ; '.'
00000000000019c8         db  0x00 ; '.'
00000000000019c9         db  0x00 ; '.'
00000000000019ca         db  0x00 ; '.'
00000000000019cb         db  0x00 ; '.'
00000000000019cc         db  0x00 ; '.'
00000000000019cd         db  0x00 ; '.'
00000000000019ce         db  0x00 ; '.'
00000000000019cf         db  0x00 ; '.'
00000000000019d0         db  0xc0 ; '.'
00000000000019d1         db  0x0f ; '.'
00000000000019d2         db  0x21 ; '!'
00000000000019d3         db  0x00 ; '.'
00000000000019d4         db  0x00 ; '.'
00000000000019d5         db  0x00 ; '.'
00000000000019d6         db  0x00 ; '.'
00000000000019d7         db  0x00 ; '.'
00000000000019d8         db  0x07 ; '.'
00000000000019d9         db  0x00 ; '.'
00000000000019da         db  0x00 ; '.'
00000000000019db         db  0x00 ; '.'
00000000000019dc         db  0x4e ; 'N'
00000000000019dd         db  0x00 ; '.'
00000000000019de         db  0x00 ; '.'
00000000000019df         db  0x00 ; '.'
00000000000019e0         db  0x00 ; '.'
00000000000019e1         db  0x00 ; '.'
00000000000019e2         db  0x00 ; '.'
00000000000019e3         db  0x00 ; '.'
00000000000019e4         db  0x00 ; '.'
00000000000019e5         db  0x00 ; '.'
00000000000019e6         db  0x00 ; '.'
00000000000019e7         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x19e8; 0x19ff[ (23 bytes)
        ; File offset : [6632; 6655[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
00000000000019e8         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
00000000000019ec         mov        rax, qword [qword_210fd8]                   ; qword_210fd8
00000000000019f3         test       rax, rax
00000000000019f6         je         loc_19fa

00000000000019f8         call       rax

                     loc_19fa:
00000000000019fa         add        rsp, 0x8                                    ; CODE XREF=_init+14
00000000000019fe         ret
                        ; endp
00000000000019ff         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x1a00; 0x1ea0[ (1184 bytes)
        ; File offset : [6656; 7840[ (1184 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_1a00:
0000000000001a00         push       qword [qword_210d70]                        ; Begin of unwind block (FDE at 0xf2ac), qword_210d70, CODE XREF=sub_1a16+5
0000000000001a06         jmp        qword [qword_210d70+8]                      ; 0x210d78
                        ; endp
0000000000001a0c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_toupper_loc:        // __ctype_toupper_loc
0000000000001a10         jmp        qword [__ctype_toupper_loc@GOT]             ; __ctype_toupper_loc, __ctype_toupper_loc@GOT, CODE XREF=main+1292
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a16:
0000000000001a16         push       0x0
0000000000001a1b         jmp        loc_1a00


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getenv:        // getenv
0000000000001a20         jmp        qword [getenv@GOT]                          ; getenv, getenv@GOT, CODE XREF=main+49, human_options+276, human_options+327, human_options+351, human_options+375
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a26:
0000000000001a26         push       0x1
0000000000001a2b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_sigprocmask:        // sigprocmask
0000000000001a30         jmp        qword [sigprocmask@GOT]                     ; sigprocmask, sigprocmask@GOT, CODE XREF=process_signals+64, process_signals+104
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a36:
0000000000001a36         push       0x2
0000000000001a3b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___snprintf_chk:        // __snprintf_chk
0000000000001a40         jmp        qword [__snprintf_chk@GOT]                  ; __snprintf_chk, __snprintf_chk@GOT, CODE XREF=print_xfer_stats+286, print_xfer_stats+528, vasnprintf+1464, vasnprintf+1776, vasnprintf+2093, vasnprintf+2222, vasnprintf+2417, vasnprintf+3225
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a46:
0000000000001a46         push       0x3
0000000000001a4b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_raise:        // raise
0000000000001a50         jmp        qword [raise@GOT]                           ; raise, raise@GOT, CODE XREF=process_signals+157
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a56:
0000000000001a56         push       0x4
0000000000001a5b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
0000000000001a60         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=quotearg_n_options+277, quotearg_free+55, quotearg_free+82, quotearg_free+120, verror_at_line+84, verror_at_line+130, xrealloc+40, rpl_vasprintf+91, vasnprintf+402, vasnprintf+430, vasnprintf+458
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a66:
0000000000001a66         push       0x5
0000000000001a6b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
0000000000001a70         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=set_program_name+154, sub_7870+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, verror_at_line+176, xalloc_die+48, vasnprintf+3878
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a76:
0000000000001a76         push       0x6
0000000000001a7b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
0000000000001a80         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=main+1430, set_fd_flags+173, set_fd_flags+222, skip_via_lseek+221, invalidate_cache+139, cleanup+80, cleanup+147, ifd_reopen+24, iread+30, iread+74, iftruncate.constprop.6+16
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a86:
0000000000001a86         push       0x7
0000000000001a8b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fdatasync:        // fdatasync
0000000000001a90         jmp        qword [fdatasync@GOT]                       ; fdatasync, fdatasync@GOT, CODE XREF=main+6101
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a96:
0000000000001a96         push       0x8
0000000000001a9b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error_at_line:        // error_at_line
0000000000001aa0         jmp        qword [error_at_line@GOT]                   ; error_at_line, error_at_line@GOT, CODE XREF=verror_at_line+68
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1aa6:
0000000000001aa6         push       0x9
0000000000001aab         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
0000000000001ab0         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+1228, usage+1421, argmatch+162
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ab6:
0000000000001ab6         push       0xa
0000000000001abb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
0000000000001ac0         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=j_close_stdout+10, close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ac6:
0000000000001ac6         push       0xb
0000000000001acb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
0000000000001ad0         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ad6:
0000000000001ad6         push       0xc
0000000000001adb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_sigaction:        // sigaction
0000000000001ae0         jmp        qword [sigaction@GOT]                       ; sigaction, sigaction@GOT, CODE XREF=main+98, main+300, main+361
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ae6:
0000000000001ae6         push       0xd
0000000000001aeb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_localeconv:        // localeconv
0000000000001af0         jmp        qword [localeconv@GOT]                      ; localeconv, localeconv@GOT, CODE XREF=human_readable+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1af6:
0000000000001af6         push       0xe
0000000000001afb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fcntl:        // fcntl
0000000000001b00         jmp        qword [fcntl@GOT]                           ; fcntl, fcntl@GOT, CODE XREF=rpl_fcntl+128, rpl_fcntl+212, rpl_fcntl+320, rpl_fcntl+407, rpl_fcntl+423, rpl_fcntl+460, rpl_fcntl+483, rpl_fcntl+559, rpl_fcntl+606
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b06:
0000000000001b06         push       0xf
0000000000001b0b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_clock_gettime:        // clock_gettime
0000000000001b10         jmp        qword [clock_gettime@GOT]                   ; clock_gettime, clock_gettime@GOT, CODE XREF=gethrxtime+32, gettime+5, current_timespec+25
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b16:
0000000000001b16         push       0x10
0000000000001b1b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_write:        // write
0000000000001b20         jmp        qword [write@GOT]                           ; write, write@GOT, CODE XREF=iwrite.constprop.7+151
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b26:
0000000000001b26         push       0x11
0000000000001b2b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001b30         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+425
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b36:
0000000000001b36         push       0x12
0000000000001b3b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000001b40         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b46:
0000000000001b46         push       0x13
0000000000001b4b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000001b50         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+413
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b56:
0000000000001b56         push       0x14
0000000000001b5b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
0000000000001b60         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+3210, main+3511, main+3659, main+4060, main+4148, main+4596, main+5011, main+5137, main+5608, main+5755, main+5810
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b66:
0000000000001b66         push       0x15
0000000000001b6b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
0000000000001b70         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=quotearg_buffer_restyled+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b76:
0000000000001b76         push       0x16
0000000000001b7b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000001b80         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=print_xfer_stats+214, print_xfer_stats+294, print_xfer_stats+314, human_readable+103, human_readable+155, human_readable+457, human_readable+831, human_readable+1149, human_readable+1826, human_readable+1907, quotearg_buffer_restyled+343
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b86:
0000000000001b86         push       0x17
0000000000001b8b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000001b90         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=main+7447, print_xfer_stats+898, nl_error+262, parse_integer+320, set_fd_flags+267, skip_via_lseek+238, process_signals+205, alloc_ibuf.part.4+181, alloc_obuf.part.5+181, skip+784, gethrxtime+133
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b96:
0000000000001b96         push       0x18
0000000000001b9b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
0000000000001ba0         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=parse_long_options+198, parse_gnu_standard_options_only+154
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ba6:
0000000000001ba6         push       0x19
0000000000001bab         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001bb0         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bb6:
0000000000001bb6         push       0x1a
0000000000001bbb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dup2:        // dup2
0000000000001bc0         jmp        qword [dup2@GOT]                            ; dup2, dup2@GOT, CODE XREF=fd_reopen+40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bc6:
0000000000001bc6         push       0x1b
0000000000001bcb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
0000000000001bd0         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=main+651, parse_symbols+29, xstrtoumax+291, xstrtoumax+323, xstrtoumax+380
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bd6:
0000000000001bd6         push       0x1c
0000000000001bdb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___overflow:        // __overflow
0000000000001be0         jmp        qword [__overflow@GOT]                      ; __overflow, __overflow@GOT, CODE XREF=print_xfer_stats+853, print_xfer_stats+875, nl_error+250, print_stats.part.2+277, argmatch_valid+283
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1be6:
0000000000001be6         push       0x1d
0000000000001beb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001bf0         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bf6:
0000000000001bf6         push       0x1e
0000000000001bfb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_ftruncate:        // ftruncate
0000000000001c00         jmp        qword [ftruncate@GOT]                       ; ftruncate, ftruncate@GOT, CODE XREF=iftruncate.constprop.6+39
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c06:
0000000000001c06         push       0x1f
0000000000001c0b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001c10         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=main+1481, main+4496, main+6214, skip_via_lseek+65, invalidate_cache+356, iwrite.constprop.7+221, rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c16:
0000000000001c16         push       0x20
0000000000001c1b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000001c20         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=xstrtoumax+927
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c26:
0000000000001c26         push       0x21
0000000000001c2b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtoul_internal:        // __strtoul_internal
0000000000001c30         jmp        qword [__strtoul_internal@GOT]              ; __strtoul_internal, __strtoul_internal@GOT, CODE XREF=xstrtoumax+142
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c36:
0000000000001c36         push       0x22
0000000000001c3b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001c40         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=main+1960, main+2221, main+2396, main+4683, quotearg_n_options+153, xzalloc+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c46:
0000000000001c46         push       0x23
0000000000001c4b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_ioctl:        // ioctl
0000000000001c50         jmp        qword [ioctl@GOT]                           ; ioctl, ioctl@GOT, CODE XREF=skip_via_lseek+49, skip_via_lseek+97
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c56:
0000000000001c56         push       0x24
0000000000001c5b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_close:        // close
0000000000001c60         jmp        qword [close@GOT]                           ; close, close@GOT, CODE XREF=cleanup+8, cleanup+22, fd_reopen+61, rpl_fcntl+510
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c66:
0000000000001c66         push       0x25
0000000000001c6b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_posix_fadvise:        // posix_fadvise
0000000000001c70         jmp        qword [posix_fadvise@GOT]                   ; posix_fadvise, posix_fadvise@GOT, CODE XREF=invalidate_cache+294
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c76:
0000000000001c76         push       0x26
0000000000001c7b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_read:        // read
0000000000001c80         jmp        qword [read@GOT]                            ; read, read@GOT, CODE XREF=iread+60
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c86:
0000000000001c86         push       0x27
0000000000001c8b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000001c90         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=iwrite.constprop.7+127, quotearg_buffer_restyled+410, argmatch+111, argmatch_valid+150, argmatch_to_argument+56
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c96:
0000000000001c96         push       0x28
0000000000001c9b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000001ca0         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=usage+160, usage+197, usage+234, usage+271, usage+308, usage+345, usage+382, usage+419, usage+456, usage+493, usage+530
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ca6:
0000000000001ca6         push       0x29
0000000000001cab         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000001cb0         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cb6:
0000000000001cb6         push       0x2a
0000000000001cbb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___memcpy_chk:        // __memcpy_chk
0000000000001cc0         jmp        qword [__memcpy_chk@GOT]                    ; __memcpy_chk, __memcpy_chk@GOT, CODE XREF=human_readable+1180
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cc6:
0000000000001cc6         push       0x2b
0000000000001ccb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_sigemptyset:        // sigemptyset
0000000000001cd0         jmp        qword [sigemptyset@GOT]                     ; sigemptyset, sigemptyset@GOT, CODE XREF=main+64
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cd6:
0000000000001cd6         push       0x2c
0000000000001cdb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000001ce0         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=main+3402, human_readable+1245, human_readable+1274, human_readable+1338, xmemdup+35, xstrcat+186, vasnprintf+686, vasnprintf+912, vasnprintf+973, vasnprintf+2590, vasnprintf+3085
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ce6:
0000000000001ce6         push       0x2d
0000000000001ceb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000001cf0         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cf6:
0000000000001cf6         push       0x2e
0000000000001cfb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000001d00         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=alloc_ibuf.part.4+47, alloc_obuf.part.5+47, xmalloc+4, vasnprintf+210, vasnprintf+2547, vasnprintf+3007, vasnprintf+3353, vasnprintf+3497, vasnprintf+4191, printf_parse+2420, printf_parse+2528
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d06:
0000000000001d06         push       0x2f
0000000000001d0b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000001d10         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d16:
0000000000001d16         push       0x30
0000000000001d1b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001d20         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d26:
0000000000001d26         push       0x31
0000000000001d2b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fxstat:        // __fxstat
0000000000001d30         jmp        qword [__fxstat@GOT]                        ; __fxstat, __fxstat@GOT, CODE XREF=main+5683, main+6169, set_fd_flags+148, skip+510
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d36:
0000000000001d36         push       0x32
0000000000001d3b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001d40         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d46:
0000000000001d46         push       0x33
0000000000001d4b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001d50         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17, vasnprintf+645, vasnprintf+1242, vasnprintf+1660, vasnprintf+2887, vasnprintf+4043, vasnprintf+4085, printf_parse+805, printf_parse+1041, printf_parse+2266, printf_parse+2729
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d56:
0000000000001d56         push       0x34
0000000000001d5b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001d60         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+394, usage+1203, usage+1396, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d66:
0000000000001d66         push       0x35
0000000000001d6b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001d70         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=usage+123, usage+867, usage+1191, usage+1284, usage+1345, usage+1384, usage+1487, emit_bug_reporting_address+37, emit_bug_reporting_address+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d76:
0000000000001d76         push       0x36
0000000000001d7b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memmove:        // memmove
0000000000001d80         jmp        qword [memmove@GOT]                         ; memmove, memmove@GOT, CODE XREF=human_readable+885
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d86:
0000000000001d86         push       0x37
0000000000001d8b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000001d90         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=close_stdout+125, close_stdout+157, verror_at_line+114, verror_at_line+171, xalloc_die+43, argmatch_invalid+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d96:
0000000000001d96         push       0x38
0000000000001d9b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fsync:        // fsync
0000000000001da0         jmp        qword [fsync@GOT]                           ; fsync, fsync@GOT, CODE XREF=main+4893
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1da6:
0000000000001da6         push       0x39
0000000000001dab         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_open:        // open
0000000000001db0         jmp        qword [open@GOT]                            ; open, open@GOT, CODE XREF=fd_reopen+21
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1db6:
0000000000001db6         push       0x3a
0000000000001dbb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000001dc0         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dc6:
0000000000001dc6         push       0x3b
0000000000001dcb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcngettext:        // dcngettext
0000000000001dd0         jmp        qword [dcngettext@GOT]                      ; dcngettext, dcngettext@GOT, CODE XREF=print_xfer_stats+720, print_stats.part.2+233, iread+216
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dd6:
0000000000001dd6         push       0x3c
0000000000001ddb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000001de0         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1de6:
0000000000001de6         push       0x3d
0000000000001deb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getpagesize:        // getpagesize
0000000000001df0         jmp        qword [getpagesize@GOT]                     ; getpagesize, getpagesize@GOT, CODE XREF=main+442
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1df6:
0000000000001df6         push       0x3e
0000000000001dfb         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_sigismember:        // sigismember
0000000000001e00         jmp        qword [sigismember@GOT]                     ; sigismember, sigismember@GOT, CODE XREF=main+256, main+317
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e06:
0000000000001e06         push       0x3f
0000000000001e0b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000001e10         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+6897, usage+88, skip+713, write_output+153, parse_long_options+290, parse_gnu_standard_options_only+242
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e16:
0000000000001e16         push       0x40
0000000000001e1b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000001e20         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e26:
0000000000001e26         push       0x41
0000000000001e2b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000001e30         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=print_xfer_stats+386, print_xfer_stats+751, print_xfer_stats+838, print_stats.part.2+141, print_stats.part.2+258, usage+81, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332, version_etc_arn+492
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e36:
0000000000001e36         push       0x42
0000000000001e3b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000001e40         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_7870+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e46:
0000000000001e46         push       0x43
0000000000001e4b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000001e50         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_7870+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e56:
0000000000001e56         push       0x44
0000000000001e5b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_sigaddset:        // sigaddset
0000000000001e60         jmp        qword [sigaddset@GOT]                       ; sigaddset, sigaddset@GOT, CODE XREF=main+123, main+5846
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e66:
0000000000001e66         push       0x45
0000000000001e6b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_tolower_loc:        // __ctype_tolower_loc
0000000000001e70         jmp        qword [__ctype_tolower_loc@GOT]             ; __ctype_tolower_loc, __ctype_tolower_loc@GOT, CODE XREF=main+4370
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e76:
0000000000001e76         push       0x46
0000000000001e7b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000001e80         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=sub_7610+51, xstrtoumax+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e86:
0000000000001e86         push       0x47
0000000000001e8b         jmp        0x1a00
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___sprintf_chk:        // __sprintf_chk
0000000000001e90         jmp        qword [__sprintf_chk@GOT]                   ; __sprintf_chk, __sprintf_chk@GOT, CODE XREF=human_readable+449, human_readable+818, human_readable+1818, human_readable+1899
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e96:
0000000000001e96         push       0x48
0000000000001e9b         jmp        0x1a00
                        ; endp


        ; Section .plt.got
        ; Range: [0x1ea0; 0x1ea8[ (8 bytes)
        ; File offset : [7840; 7848[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_210fe8:        // qword_210fe8
0000000000001ea0         jmp        qword [qword_210fe8]                        ; qword, End of unwind block (FDE at 0xf2ac), Begin of unwind block (FDE at 0xf2d4), qword_210fe8, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000001ea6         align      8
0000000000001ea8         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xf2d4)
0000000000001ea9         db  0x00 ; '.'
0000000000001eaa         db  0x00 ; '.'
0000000000001eab         db  0x00 ; '.'
0000000000001eac         db  0x00 ; '.'
0000000000001ead         db  0x00 ; '.'
0000000000001eae         db  0x00 ; '.'
0000000000001eaf         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x1eb0; 0xc5ee[ (42814 bytes)
        ; File offset : [7856; 50670[ (42814 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int32_t, -80
        ;    var_60: -96
        ;    var_70: -112
        ;    var_80: -128
        ;    var_90: -144
        ;    var_A0: -160
        ;    var_A8: int64_t, -168
        ;    var_B0: -176
        ;    var_C0: int32_t, -192
        ;    var_D0: -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272


                     main:
0000000000001eb0         push       r15                                         ; Begin of unwind block (FDE at 0xf8a8), DATA XREF=_start+29
0000000000001eb2         push       r14
0000000000001eb4         push       r13
0000000000001eb6         push       r12
0000000000001eb8         mov        r12d, edi
0000000000001ebb         push       rbp
0000000000001ebc         push       rbx
0000000000001ebd         lea        rdi, qword [aPosixlycorrect]                ; argument "__name" for method j_getenv, "POSIXLY_CORRECT"
0000000000001ec4         mov        rbp, rsi
0000000000001ec7         sub        rsp, 0xe8
0000000000001ece         mov        rax, qword [fs:0x28]
0000000000001ed7         mov        qword [rsp+0x118+var_40], rax
0000000000001edf         xor        eax, eax
0000000000001ee1         call       j_getenv                                    ; getenv
0000000000001ee6         lea        rdi, qword [caught_signals]                 ; argument "__set" for method j_sigemptyset, caught_signals
0000000000001eed         mov        rbx, rax
0000000000001ef0         call       j_sigemptyset                               ; sigemptyset
0000000000001ef5         test       rbx, rbx
0000000000001ef8         je         loc_357a

                     loc_1efe:
0000000000001efe         lea        rax, qword [rsp+0x118+var_D8]               ; CODE XREF=main+5851
0000000000001f03         xor        esi, esi                                    ; argument "__act" for method j_sigaction
0000000000001f05         mov        edi, 0x2                                    ; argument "__sig" for method j_sigaction
0000000000001f0a         mov        rdx, rax                                    ; argument "__oact" for method j_sigaction
0000000000001f0d         mov        qword [rsp+0x118+var_F8], rax
0000000000001f12         call       j_sigaction                                 ; sigaction
0000000000001f17         cmp        qword [rsp+0x118+var_D8], 0x1
0000000000001f1d         je         loc_1f30

0000000000001f1f         lea        rdi, qword [caught_signals]                 ; argument "__set" for method j_sigaddset, caught_signals
0000000000001f26         mov        esi, 0x2                                    ; argument "__signo" for method j_sigaddset
0000000000001f2b         call       j_sigaddset                                 ; sigaddset

                     loc_1f30:
0000000000001f30         movdqa     xmm0, xmmword [caught_signals]              ; caught_signals, CODE XREF=main+109
0000000000001f38         lea        rdi, qword [caught_signals]                 ; argument "__set" for method j_sigismember, caught_signals
0000000000001f3f         mov        esi, 0xa                                    ; argument "__signo" for method j_sigismember
0000000000001f44         movups     xmmword [rsp+0x118+var_D0], xmm0
0000000000001f49         movdqa     xmm0, xmmword [caught_signals+16]           ; 0x211290
0000000000001f51         movups     xmmword [rsp+0x118+var_C0], xmm0
0000000000001f56         movdqa     xmm0, xmmword [caught_signals+32]           ; 0x2112a0
0000000000001f5e         movups     xmmword [rsp+0x118+var_B0], xmm0
0000000000001f63         movdqa     xmm0, xmmword [caught_signals+48]           ; 0x2112b0
0000000000001f6b         movups     xmmword [rsp+0x118+var_A0], xmm0
0000000000001f70         movdqa     xmm0, xmmword [caught_signals+64]           ; 0x2112c0
0000000000001f78         movups     xmmword [rsp+0x118+var_90], xmm0
0000000000001f80         movdqa     xmm0, xmmword [caught_signals+80]           ; 0x2112d0
0000000000001f88         movups     xmmword [rsp+0x118+var_80], xmm0
0000000000001f90         movdqa     xmm0, xmmword [caught_signals+96]           ; 0x2112e0
0000000000001f98         movups     xmmword [rsp+0x118+var_70], xmm0
0000000000001fa0         movdqa     xmm0, xmmword [caught_signals+112]          ; 0x2112f0
0000000000001fa8         movups     xmmword [rsp+0x118+var_60], xmm0
0000000000001fb0         call       j_sigismember                               ; sigismember
0000000000001fb5         test       eax, eax
0000000000001fb7         je         loc_1fe1

0000000000001fb9         mov        rsi, qword [rsp+0x118+var_F8]               ; argument "__act" for method j_sigaction
0000000000001fbe         lea        rax, qword [siginfo_handler]                ; siginfo_handler
0000000000001fc5         xor        edx, edx                                    ; argument "__oact" for method j_sigaction
0000000000001fc7         mov        edi, 0xa                                    ; argument "__sig" for method j_sigaction
0000000000001fcc         mov        dword [rsp+0x118+var_50], 0x0
0000000000001fd7         mov        qword [rsp+0x118+var_D8], rax
0000000000001fdc         call       j_sigaction                                 ; sigaction

                     loc_1fe1:
0000000000001fe1         lea        rdi, qword [caught_signals]                 ; argument "__set" for method j_sigismember, caught_signals, CODE XREF=main+263
0000000000001fe8         mov        esi, 0x2                                    ; argument "__signo" for method j_sigismember
0000000000001fed         call       j_sigismember                               ; sigismember
0000000000001ff2         test       eax, eax
0000000000001ff4         je         loc_201e

0000000000001ff6         mov        rsi, qword [rsp+0x118+var_F8]               ; argument "__act" for method j_sigaction
0000000000001ffb         lea        rax, qword [interrupt_handler]              ; interrupt_handler
0000000000002002         xor        edx, edx                                    ; argument "__oact" for method j_sigaction
0000000000002004         mov        edi, 0x2                                    ; argument "__sig" for method j_sigaction
0000000000002009         mov        dword [rsp+0x118+var_50], 0xc0000000
0000000000002014         mov        qword [rsp+0x118+var_D8], rax
0000000000002019         call       j_sigaction                                 ; sigaction

                     loc_201e:
000000000000201e         mov        rdi, qword [rbp]                            ; CODE XREF=main+324
0000000000002022         lea        rbx, qword [trans_table]                    ; trans_table
0000000000002029         call       set_program_name                            ; set_program_name
000000000000202e         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0xe7a1
0000000000002035         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
000000000000203a         call       j_setlocale                                 ; setlocale
000000000000203f         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
0000000000002046         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
000000000000204d         call       j_bindtextdomain                            ; bindtextdomain
0000000000002052         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
0000000000002059         call       j_textdomain                                ; textdomain
000000000000205e         lea        rdi, qword [maybe_close_stdout]             ; argument "__func" for method atexit, maybe_close_stdout
0000000000002065         call       atexit                                      ; atexit
000000000000206a         call       j_getpagesize                               ; getpagesize
000000000000206f         cdqe
0000000000002071         sub        rsp, 0x8
0000000000002075         mov        r8, qword [Version]                         ; Version
000000000000207c         mov        qword [page_size], rax                      ; page_size
0000000000002083         lea        rax, qword [aStuartKemp]                    ; "Stuart Kemp"
000000000000208a         push       0x0
000000000000208c         lea        rcx, qword [aCoreutils]                     ; "coreutils"
0000000000002093         lea        rdx, qword [aClosingOutputF+23]             ; 0xc6f4
000000000000209a         mov        r9d, 0x1
00000000000020a0         push       rax
00000000000020a1         lea        rax, qword [aDavidMackenzie]                ; "David MacKenzie"
00000000000020a8         mov        rsi, rbp
00000000000020ab         mov        edi, r12d
00000000000020ae         push       rax
00000000000020af         lea        rax, qword [aPaulRubin]                     ; "Paul Rubin"
00000000000020b6         push       rax
00000000000020b7         lea        rax, qword [usage]                          ; usage
00000000000020be         push       rax
00000000000020bf         xor        eax, eax
00000000000020c1         call       parse_gnu_standard_options_only             ; parse_gnu_standard_options_only
00000000000020c6         mov        byte [close_stdout_required], 0x0           ; close_stdout_required
00000000000020cd         add        rsp, 0x30
00000000000020d1         xor        eax, eax
00000000000020d3         nop        dword [rax+rax]

                     loc_20d8:
00000000000020d8         mov        byte [rbx+rax], al                          ; CODE XREF=main+565
00000000000020db         add        rax, 0x1
00000000000020df         cmp        rax, 0x100
00000000000020e5         jne        loc_20d8

00000000000020e7         mov        eax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
00000000000020ed         cmp        r12d, eax
00000000000020f0         jle        loc_2a32

00000000000020f6         movsxd     rdx, eax
00000000000020f9         not        eax
00000000000020fb         mov        qword [rsp+0x118+var_110], 0x0
0000000000002104         add        eax, r12d
0000000000002107         lea        r14, qword [rbp+rdx*8]
000000000000210c         xor        r12d, r12d
000000000000210f         add        rax, rdx
0000000000002112         mov        qword [rsp+0x118+var_108], 0xffffffffffffffff
000000000000211b         xor        r15d, r15d
000000000000211e         lea        rbp, qword [rbp+rax*8+8]
0000000000002123         lea        rax, qword [rsp+0x118+var_E0]
0000000000002128         mov        qword [rsp+0x118+var_100], rax
000000000000212d         nop        dword [rax]

                     loc_2130:
0000000000002130         mov        r13, qword [r14]                            ; CODE XREF=main+743
0000000000002133         mov        esi, 0x3d                                   ; argument "__c" for method j_strchr
0000000000002138         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000213b         call       j_strchr                                    ; strchr
0000000000002140         test       rax, rax
0000000000002143         je         loc_3921

0000000000002149         lea        r8, qword [rax+1]
000000000000214d         lea        rcx, qword [aWritingToS+14]                 ; 0xc7f5
0000000000002154         mov        rdx, r13
0000000000002157         mov        esi, 0x69
000000000000215c         nop        dword [rax]

                     loc_2160:
0000000000002160         add        rdx, 0x1                                    ; CODE XREF=main+712
0000000000002164         add        rcx, 0x1
0000000000002168         cmp        byte [rdx-1], sil
000000000000216c         jne        loc_28b0

0000000000002172         movzx      esi, byte [rcx]
0000000000002175         test       sil, sil
0000000000002178         jne        loc_2160

000000000000217a         movzx      eax, byte [rdx]
000000000000217d         cmp        al, 0x3d
000000000000217f         je         loc_2189

0000000000002181         test       al, al
0000000000002183         jne        loc_28b0

                     loc_2189:
0000000000002189         mov        qword [input_file], r8                      ; input_file, CODE XREF=main+719

                     loc_2190:
0000000000002190         add        r14, 0x8                                    ; CODE XREF=main+2613, main+2700, main+2781, main+2877, main+3324, main+6647
0000000000002194         cmp        rbp, r14
0000000000002197         jne        loc_2130

0000000000002199         test       r15, r15
000000000000219c         je         loc_2a47

00000000000021a2         mov        qword [output_blocksize], r15               ; output_blocksize
00000000000021a9         mov        qword [input_blocksize], r15                ; input_blocksize

                     loc_21b0:
00000000000021b0         cmp        qword [conversion_blocksize], 0x0           ; conversion_blocksize, CODE XREF=main+3006, main+3023
00000000000021b8         jne        loc_21c1

00000000000021ba         and        dword [conversions_mask], 0xffffffe7        ; conversions_mask

                     loc_21c1:
00000000000021c1         mov        eax, dword [input_flags]                    ; input_flags, CODE XREF=main+776
00000000000021c7         test       eax, 0x101000
00000000000021cc         je         loc_21d9

00000000000021ce         or         eax, 0x101000
00000000000021d3         mov        dword [input_flags], eax                    ; input_flags

                     loc_21d9:
00000000000021d9         mov        esi, dword [output_flags]                   ; output_flags, CODE XREF=main+796
00000000000021df         test       sil, 0x1
00000000000021e3         jne        loc_3b83

00000000000021e9         mov        ecx, dword [input_flags]                    ; input_flags
00000000000021ef         test       cl, 0x10
00000000000021f2         jne        loc_3c5f

00000000000021f8         test       sil, 0xc
00000000000021fc         jne        loc_3c30

0000000000002202         test       cl, 0x8
0000000000002205         mov        rax, qword [rsp+0x118+var_110]
000000000000220a         je         loc_2a1d

0000000000002210         test       rax, rax
0000000000002213         jne        loc_2a84

                     loc_2219:
0000000000002219         test       cl, 0x4                                     ; CODE XREF=main+2928, main+2941, main+3051
000000000000221c         mov        rax, qword [rsp+0x118+var_108]
0000000000002221         je         loc_2a07

0000000000002227         cmp        rax, 0xffffffffffffffff
000000000000222b         je         loc_2244

000000000000222d         xor        edx, edx
000000000000222f         div        qword [input_blocksize]                     ; input_blocksize
0000000000002236         mov        qword [max_records], rax                    ; max_records
000000000000223d         mov        qword [max_bytes], rdx                      ; max_bytes

                     loc_2244:
0000000000002244         test       sil, 0x10                                   ; CODE XREF=main+891, main+2907, main+2920
0000000000002248         je         loc_29f2

000000000000224e         test       r12, r12
0000000000002251         jne        loc_2ad7

                     loc_2257:
0000000000002257         mov        ebp, dword [conversions_mask]               ; conversions_mask, CODE XREF=main+2885, main+2898, main+3137
000000000000225d         mov        eax, ecx
000000000000225f         and        eax, 0x1
0000000000002262         test       ebp, 0x800
0000000000002268         jne        loc_3004

000000000000226e         test       eax, eax
0000000000002270         je         loc_2aa0

0000000000002276         lea        rax, qword [iread_fullblock]                ; iread_fullblock
000000000000227d         mov        byte [warn_partial_read], 0x0               ; warn_partial_read

                     loc_2284:
0000000000002284         mov        qword [iread_fnc], rax                      ; iread_fnc, CODE XREF=main+3106, main+3156, main+4463
000000000000228b         mov        eax, ecx
000000000000228d         and        eax, 0xfffffffe
0000000000002290         mov        dword [input_flags], eax                    ; input_flags
0000000000002296         mov        eax, ebp
0000000000002298         and        eax, 0x7
000000000000229b         lea        edx, dword [rax-1]
000000000000229e         test       edx, eax
00000000000022a0         jne        loc_3c0c

00000000000022a6         mov        eax, ebp
00000000000022a8         and        eax, 0x18
00000000000022ab         lea        edx, dword [rax-1]
00000000000022ae         test       edx, eax
00000000000022b0         jne        loc_3a37

00000000000022b6         mov        eax, ebp
00000000000022b8         and        eax, 0x60
00000000000022bb         lea        edx, dword [rax-1]
00000000000022be         test       edx, eax
00000000000022c0         jne        loc_3a5b

00000000000022c6         mov        eax, ebp
00000000000022c8         and        eax, 0x3000
00000000000022cd         lea        edx, dword [rax-1]
00000000000022d0         test       edx, eax
00000000000022d2         jne        loc_3a91

00000000000022d8         mov        eax, ecx
00000000000022da         and        eax, 0x4002
00000000000022df         lea        edx, dword [rax-1]
00000000000022e2         test       edx, eax
00000000000022e4         jne        loc_3ab5

00000000000022ea         mov        eax, esi
00000000000022ec         and        eax, 0x4002
00000000000022f1         lea        edx, dword [rax-1]
00000000000022f4         and        edx, eax
00000000000022f6         mov        dword [rsp+0x118+var_F0], edx
00000000000022fa         jne        loc_3ab5

0000000000002300         test       cl, 0x2
0000000000002303         je         loc_233b

0000000000002305         xor        eax, eax
0000000000002307         cmp        qword [max_records], 0x0                    ; max_records
000000000000230f         mov        byte [i_nocache], 0x1                       ; i_nocache
0000000000002316         jne        loc_2325

0000000000002318         xor        eax, eax
000000000000231a         cmp        qword [max_bytes], 0x0                      ; max_bytes
0000000000002322         sete       al

                     loc_2325:
0000000000002325         mov        byte [i_nocache_eof], al                    ; i_nocache_eof, CODE XREF=main+1126
000000000000232b         and        byte [i_nocache_eof], 0x1                   ; i_nocache_eof
0000000000002332         and        ecx, 0xfffffffc
0000000000002335         mov        dword [input_flags], ecx                    ; input_flags

                     loc_233b:
000000000000233b         test       sil, 0x2                                    ; CODE XREF=main+1107
000000000000233f         je         loc_2377

0000000000002341         xor        eax, eax
0000000000002343         cmp        qword [max_records], 0x0                    ; max_records
000000000000234b         mov        byte [o_nocache], 0x1                       ; o_nocache
0000000000002352         jne        loc_2361

0000000000002354         xor        eax, eax
0000000000002356         cmp        qword [max_bytes], 0x0                      ; max_bytes
000000000000235e         sete       al

                     loc_2361:
0000000000002361         mov        byte [o_nocache_eof], al                    ; o_nocache_eof, CODE XREF=main+1186
0000000000002367         and        byte [o_nocache_eof], 0x1                   ; o_nocache_eof
000000000000236e         and        esi, 0xfffffffd
0000000000002371         mov        dword [output_flags], esi                   ; output_flags

                     loc_2377:
0000000000002377         test       bpl, 0x1                                    ; CODE XREF=main+1167
000000000000237b         je         loc_23b2

000000000000237d         lea        rax, qword [trans_table]                    ; trans_table
0000000000002384         lea        rcx, qword [ebcdic_to_ascii]                ; ebcdic_to_ascii
000000000000238b         lea        rsi, qword [rax+0x100]
0000000000002392         nop        word [rax+rax]

                     loc_2398:
0000000000002398         movzx      edx, byte [rax]                             ; CODE XREF=main+1273
000000000000239b         add        rax, 0x1
000000000000239f         movzx      edx, byte [rcx+rdx]
00000000000023a3         mov        byte [rax-1], dl
00000000000023a6         cmp        rsi, rax
00000000000023a9         jne        loc_2398

00000000000023ab         mov        byte [translation_needed], 0x1              ; translation_needed

                     loc_23b2:
00000000000023b2         test       bpl, 0x40                                   ; CODE XREF=main+1227
00000000000023b6         je         loc_2fb8

00000000000023bc         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc
00000000000023c1         mov        rsi, qword [rax]
00000000000023c4         lea        rax, qword [trans_table]                    ; trans_table
00000000000023cb         lea        rcx, qword [rax+0x100]
00000000000023d2         nop        word [rax+rax]

                     loc_23d8:
00000000000023d8         movzx      edx, byte [rax]                             ; CODE XREF=main+1336
00000000000023db         add        rax, 0x1
00000000000023df         mov        edx, dword [rsi+rdx*4]
00000000000023e2         mov        byte [rax-1], dl
00000000000023e5         cmp        rcx, rax
00000000000023e8         jne        loc_23d8

                     loc_23ea:
00000000000023ea         mov        byte [translation_needed], 0x1              ; translation_needed, CODE XREF=main+4418

                     loc_23f1:
00000000000023f1         test       bpl, 0x2                                    ; CODE XREF=main+4364
00000000000023f5         je         loc_2f80

00000000000023fb         lea        rax, qword [trans_table]                    ; trans_table
0000000000002402         lea        rcx, qword [ascii_to_ebcdic]                ; ascii_to_ebcdic
0000000000002409         lea        rsi, qword [rax+0x100]

                     loc_2410:
0000000000002410         movzx      edx, byte [rax]                             ; CODE XREF=main+1393
0000000000002413         add        rax, 0x1
0000000000002417         movzx      edx, byte [rcx+rdx]
000000000000241b         mov        byte [rax-1], dl
000000000000241e         cmp        rsi, rax
0000000000002421         jne        loc_2410

                     loc_2423:
0000000000002423         mov        byte [translation_needed], 0x1              ; translation_needed, CODE XREF=main+4355
000000000000242a         mov        byte [newline_character], 0x25              ; newline_character
0000000000002431         mov        byte [space_character], 0x40                ; space_character

                     loc_2438:
0000000000002438         mov        rbp, qword [input_file]                     ; input_file, CODE XREF=main+4308
000000000000243f         mov        r12d, dword [input_flags]                   ; input_flags
0000000000002446         call       j___errno_location                          ; __errno_location
000000000000244b         mov        qword [rsp+0x118+var_108], rax
0000000000002450         test       rbp, rbp
0000000000002453         je         loc_3235

0000000000002459         xor        ecx, ecx
000000000000245b         xor        edi, edi
000000000000245d         mov        edx, r12d
0000000000002460         mov        rsi, rbp
0000000000002463         call       ifd_reopen                                  ; ifd_reopen
0000000000002468         test       eax, eax
000000000000246a         js         loc_3bcc

                     loc_2470:
0000000000002470         xor        esi, esi                                    ; argument "__offset" for method j_lseek, CODE XREF=main+5036
0000000000002472         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000002477         xor        edi, edi                                    ; argument "__fd" for method j_lseek
0000000000002479         call       j_lseek                                     ; lseek
000000000000247e         mov        rdx, rax
0000000000002481         mov        rsi, qword [output_file]                    ; output_file
0000000000002488         mov        r12d, dword [output_flags]                  ; output_flags
000000000000248f         not        rdx
0000000000002492         shr        rdx, 0x3f
0000000000002496         test       rax, rax
0000000000002499         mov        byte [input_seekable], dl                   ; input_seekable
000000000000249f         mov        edx, 0x0
00000000000024a4         cmovs      rax, rdx
00000000000024a8         test       rsi, rsi
00000000000024ab         mov        qword [input_offset], rax                   ; input_offset
00000000000024b2         mov        rax, qword [rsp+0x118+var_108]
00000000000024b7         mov        eax, dword [rax]
00000000000024b9         mov        dword [input_seek_errno], eax               ; input_seek_errno
00000000000024bf         je         loc_3590

00000000000024c5         mov        eax, dword [conversions_mask]               ; conversions_mask
00000000000024cb         xor        edx, edx
00000000000024cd         mov        ebp, eax
00000000000024cf         test       ah, 0x10
00000000000024d2         sete       dl
00000000000024d5         sar        ebp, 0x6
00000000000024d8         and        ebp, 0x80
00000000000024de         shl        edx, 0x6
00000000000024e1         or         ebp, r12d
00000000000024e4         or         ebp, edx
00000000000024e6         cmp        qword [seek_records], 0x0                   ; seek_records
00000000000024ee         jne        loc_30bc

00000000000024f4         and        eax, 0x200
00000000000024f9         cmp        eax, 0x1
00000000000024fc         sbb        eax, eax
00000000000024fe         and        eax, 0x200
0000000000002503         or         ebp, eax

                     loc_2505:
0000000000002505         mov        edx, ebp                                    ; CODE XREF=main+4655
0000000000002507         mov        ecx, 0x1b6
000000000000250c         mov        edi, 0x1
0000000000002511         or         edx, 0x1
0000000000002514         call       ifd_reopen                                  ; ifd_reopen
0000000000002519         test       eax, eax
000000000000251b         js         loc_3ad9

                     loc_2521:
0000000000002521         mov        rbp, qword [seek_records]                   ; seek_records, CODE XREF=main+4642
0000000000002528         test       rbp, rbp
000000000000252b         je         loc_2573

000000000000252d         test       byte [byte_21138d], 0x2                     ; byte_21138d
0000000000002534         jne        loc_2573

0000000000002536         mov        r14, qword [output_blocksize]               ; output_blocksize
000000000000253d         xor        edx, edx
000000000000253f         movabs     rax, 0x7fffffffffffffff
0000000000002549         mov        r12, rbp
000000000000254c         div        r14
000000000000254f         imul       r12, r14
0000000000002553         add        r12, qword [seek_bytes]                     ; seek_bytes
000000000000255a         cmp        rbp, rax
000000000000255d         ja         loc_3b19

0000000000002563         mov        rdi, r12
0000000000002566         call       iftruncate.constprop.6                      ; iftruncate.constprop.6
000000000000256b         test       eax, eax
000000000000256d         jne        loc_34cd

                     loc_2573:
0000000000002573         call       gethrxtime                                  ; gethrxtime, CODE XREF=main+1659, main+1668, main+5715, main+5898
0000000000002578         mov        r14, qword [skip_records]                   ; skip_records
000000000000257f         mov        qword [start_time], rax                     ; start_time
0000000000002586         add        rax, 0x3b9aca00
000000000000258c         mov        qword [next_time], rax                      ; next_time
0000000000002593         test       r14, r14
0000000000002596         jne        loc_25a2

0000000000002598         cmp        qword [skip_bytes], 0x0                     ; skip_bytes
00000000000025a0         je         loc_25fe

                     loc_25a2:
00000000000025a2         mov        r15, qword [input_blocksize]                ; input_blocksize, CODE XREF=main+1766
00000000000025a9         mov        rsi, qword [input_file]                     ; input_file
00000000000025b0         lea        r8, qword [skip_bytes]                      ; skip_bytes
00000000000025b7         xor        edi, edi
00000000000025b9         mov        rdx, r14
00000000000025bc         mov        rbp, qword [input_offset]                   ; input_offset
00000000000025c3         mov        r12, qword [skip_bytes]                     ; skip_bytes
00000000000025ca         mov        rcx, r15
00000000000025cd         call       skip                                        ; skip
00000000000025d2         test       rax, rax
00000000000025d5         jne        loc_2b09

00000000000025db         mov        rax, r14
00000000000025de         add        rbp, r12
00000000000025e1         imul       rax, r15
00000000000025e5         add        rax, rbp
00000000000025e8         cmp        rax, qword [input_offset]                   ; input_offset
00000000000025ef         je         loc_25fe

00000000000025f1         cmp        byte [input_offset_overflow], 0x1           ; input_offset_overflow
00000000000025f8         jne        loc_2b09

                     loc_25fe:
00000000000025fe         mov        rdx, qword [seek_records]                   ; seek_records, CODE XREF=main+1776, main+1855, main+3168, main+3232
0000000000002605         mov        rax, qword [seek_bytes]                     ; seek_bytes
000000000000260c         test       rdx, rdx
000000000000260f         jne        loc_261a

0000000000002611         test       rax, rax
0000000000002614         je         loc_26aa

                     loc_261a:
000000000000261a         mov        rcx, qword [output_blocksize]               ; output_blocksize, CODE XREF=main+1887
0000000000002621         mov        rsi, qword [output_file]                    ; output_file
0000000000002628         lea        r8, qword [rsp+0x118+var_E0]
000000000000262d         mov        edi, 0x1
0000000000002632         mov        qword [rsp+0x118+var_E0], rax
0000000000002637         call       skip                                        ; skip
000000000000263c         test       rax, rax
000000000000263f         mov        r12, rax
0000000000002642         je         loc_30e4

0000000000002648         mov        rdx, qword [output_blocksize]               ; argument "__n" for method j_memset, output_blocksize
000000000000264f         mov        rdi, qword [obuf]                           ; argument "__s" for method j_memset, obuf
0000000000002656         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000002658         call       j_memset                                    ; memset
000000000000265d         nop        dword [rax]

                     loc_2660:
0000000000002660         mov        rbp, qword [output_blocksize]               ; output_blocksize, CODE XREF=main+2003
0000000000002667         mov        rdi, qword [obuf]                           ; obuf
000000000000266e         mov        rsi, rbp
0000000000002671         call       iwrite.constprop.7                          ; iwrite.constprop.7
0000000000002676         cmp        rbp, rax
0000000000002679         jne        loc_395a

000000000000267f         sub        r12, 0x1
0000000000002683         jne        loc_2660

0000000000002685         cmp        qword [rsp+0x118+var_E0], 0x0
000000000000268b         je         loc_26aa

                     loc_268d:
000000000000268d         mov        rbp, qword [rsp+0x118+var_E0]               ; CODE XREF=main+4688
0000000000002692         mov        rdi, qword [obuf]                           ; obuf
0000000000002699         mov        rsi, rbp
000000000000269c         call       iwrite.constprop.7                          ; iwrite.constprop.7
00000000000026a1         cmp        rbp, rax
00000000000026a4         jne        loc_395a

                     loc_26aa:
00000000000026aa         cmp        qword [max_records], 0x0                    ; max_records, CODE XREF=main+1892, main+2011, main+4668
00000000000026b2         jne        loc_26c2

00000000000026b4         cmp        qword [max_bytes], 0x0                      ; max_bytes
00000000000026bc         je         loc_3303

                     loc_26c2:
00000000000026c2         cmp        qword [ibuf], 0x0                           ; ibuf, CODE XREF=main+2050
00000000000026ca         je         loc_3644

                     loc_26d0:
00000000000026d0         call       alloc_obuf                                  ; alloc_obuf, CODE XREF=main+6041
00000000000026d5         mov        dword [rsp+0x118+var_100], 0x0
00000000000026dd         mov        qword [rsp+0x118+var_110], 0x0
00000000000026e6         nop        word [cs:rax+rax]

                     loc_26f0:
00000000000026f0         cmp        dword [status_level], 0x4                   ; status_level, CODE XREF=main+3344, main+3718, main+3730, main+3968, main+5198, main+5656
00000000000026f7         je         loc_287d

                     loc_26fd:
00000000000026fd         mov        r13, qword [max_bytes]                      ; max_bytes, CODE XREF=main+2503, main+2521, main+2546
0000000000002704         mov        rbp, qword [r_full]                         ; r_full
000000000000270b         xor        eax, eax
000000000000270d         add        rbp, qword [r_partial]                      ; r_partial
0000000000002714         mov        r12, qword [max_records]                    ; max_records
000000000000271b         mov        esi, dword [conversions_mask]               ; conversions_mask
0000000000002721         test       r13, r13
0000000000002724         setne      al
0000000000002727         add        rax, r12
000000000000272a         cmp        rbp, rax
000000000000272d         jae        loc_3142

0000000000002733         mov        eax, esi
0000000000002735         mov        rcx, qword [ibuf]                           ; ibuf
000000000000273c         and        eax, 0x500
0000000000002741         cmp        eax, 0x500
0000000000002746         jne        loc_2765

0000000000002748         mov        rdx, qword [input_blocksize]                ; argument "__n" for method j_memset, input_blocksize
000000000000274f         and        esi, 0x18
0000000000002752         mov        eax, 0x20
0000000000002757         mov        rdi, rcx                                    ; argument "__s" for method j_memset
000000000000275a         cmovne     esi, eax                                    ; argument "__c" for method j_memset
000000000000275d         call       j_memset                                    ; memset
0000000000002762         mov        rcx, rax

                     loc_2765:
0000000000002765         cmp        rbp, r12                                    ; CODE XREF=main+2198
0000000000002768         mov        rax, qword [iread_fnc]                      ; iread_fnc
000000000000276f         jb         loc_2c10

0000000000002775         xor        edi, edi
0000000000002777         mov        rdx, r13
000000000000277a         mov        rsi, rcx
000000000000277d         call       rax
000000000000277f         cmp        rax, 0x0
0000000000002783         jle        loc_2c28

                     loc_2789:
0000000000002789         xor        edx, edx                                    ; CODE XREF=main+3442
000000000000278b         mov        rcx, rax
000000000000278e         add        rcx, qword [input_offset]                   ; input_offset
0000000000002795         mov        rbp, rax
0000000000002798         setb       dl
000000000000279b         mov        qword [input_offset], rcx                   ; input_offset
00000000000027a2         test       rdx, rdx
00000000000027a5         je         loc_27ae

00000000000027a7         mov        byte [input_offset_overflow], 0x1           ; input_offset_overflow

                     loc_27ae:
00000000000027ae         cmp        byte [i_nocache], 0x0                       ; i_nocache, CODE XREF=main+2293
00000000000027b5         jne        loc_2e35

                     loc_27bb:
00000000000027bb         mov        r12, qword [input_blocksize]                ; input_blocksize, CODE XREF=main+3983
00000000000027c2         cmp        r12, rbp
00000000000027c5         jbe        loc_2d60

                     loc_27cb:
00000000000027cb         mov        esi, dword [conversions_mask]               ; conversions_mask, CODE XREF=main+3748
00000000000027d1         add        qword [r_partial], 0x1                      ; r_partial
00000000000027d9         mov        qword [rsp+0x118+var_110], rbp
00000000000027de         test       esi, 0x400
00000000000027e4         je         loc_2820

00000000000027e6         test       esi, 0x100
00000000000027ec         jne        loc_2ff7

00000000000027f2         mov        rdx, r12
00000000000027f5         sub        rdx, rbp
00000000000027f8         and        esi, 0x18
00000000000027fb         je         loc_2802

00000000000027fd         mov        esi, 0x20

                     loc_2802:
0000000000002802         mov        rdi, qword [ibuf]                           ; ibuf, CODE XREF=main+2379
0000000000002809         add        rdi, rbp                                    ; argument "__s" for method j_memset
000000000000280c         call       j_memset                                    ; memset
0000000000002811         mov        qword [rsp+0x118+var_110], rbp
0000000000002816         mov        rbp, r12
0000000000002819         nop        dword [rax]

                     loc_2820:
0000000000002820         mov        r15, qword [ibuf]                           ; ibuf, CODE XREF=main+2356, main+3777, main+4431
0000000000002827         mov        rdi, qword [obuf]                           ; obuf
000000000000282e         cmp        r15, rdi
0000000000002831         je         loc_2ea7

0000000000002837         cmp        byte [translation_needed], 0x0              ; translation_needed
000000000000283e         jne        loc_2d76

                     loc_2844:
0000000000002844         mov        ecx, dword [conversions_mask]               ; conversions_mask, CODE XREF=main+3785
000000000000284a         test       cl, 0x80
000000000000284d         jne        loc_2db2

                     loc_2853:
0000000000002853         test       cl, 0x8                                     ; CODE XREF=main+3836
0000000000002856         jne        loc_2e25

                     loc_285c:
000000000000285c         and        ecx, 0x10                                   ; CODE XREF=main+3951
000000000000285f         je         loc_2bcd

0000000000002865         mov        rsi, rbp
0000000000002868         mov        rdi, r15
000000000000286b         call       copy_with_unblock                           ; copy_with_unblock
0000000000002870         cmp        dword [status_level], 0x4                   ; status_level
0000000000002877         jne        loc_26fd

                     loc_287d:
000000000000287d         call       gethrxtime                                  ; gethrxtime, CODE XREF=main+2119
0000000000002882         cmp        rax, qword [next_time]                      ; next_time
0000000000002889         jl         loc_26fd

000000000000288f         mov        rdi, rax
0000000000002892         call       print_xfer_stats                            ; print_xfer_stats
0000000000002897         add        qword [next_time], 0x3b9aca00               ; next_time
00000000000028a2         jmp        loc_26fd
00000000000028a7         align      16

                     loc_28b0:
00000000000028b0         lea        rax, qword [aWritingToS+17]                 ; 0xc7f8, CODE XREF=main+700, main+723
00000000000028b7         mov        rdx, r13
00000000000028ba         mov        ecx, 0x6f

                     loc_28bf:
00000000000028bf         add        rdx, 0x1                                    ; CODE XREF=main+2593
00000000000028c3         add        rax, 0x1
00000000000028c7         cmp        byte [rdx-1], cl
00000000000028ca         jne        loc_28f0

00000000000028cc         movzx      ecx, byte [rax]
00000000000028cf         test       cl, cl
00000000000028d1         jne        loc_28bf

00000000000028d3         movzx      eax, byte [rdx]
00000000000028d6         cmp        al, 0x3d
00000000000028d8         je         loc_28de

00000000000028da         test       al, al
00000000000028dc         jne        loc_28f0

                     loc_28de:
00000000000028de         mov        qword [output_file], r8                     ; output_file, CODE XREF=main+2600
00000000000028e5         jmp        loc_2190
00000000000028ea         align      16

                     loc_28f0:
00000000000028f0         lea        rdx, qword [aWritingToS+20]                 ; 0xc7fb, CODE XREF=main+2586, main+2604
00000000000028f7         mov        rax, r13
00000000000028fa         mov        ecx, 0x63

                     loc_28ff:
00000000000028ff         add        rax, 0x1                                    ; CODE XREF=main+2657
0000000000002903         add        rdx, 0x1
0000000000002907         cmp        byte [rax-1], cl
000000000000290a         jne        loc_2941

000000000000290c         movzx      ecx, byte [rdx]
000000000000290f         test       cl, cl
0000000000002911         jne        loc_28ff

0000000000002913         movzx      eax, byte [rax]
0000000000002916         test       al, al
0000000000002918         je         loc_291e

000000000000291a         cmp        al, 0x3d
000000000000291c         jne        loc_2941

                     loc_291e:
000000000000291e         lea        rcx, qword [aInvalidConvers]                ; "invalid conversion", CODE XREF=main+2664
0000000000002925         lea        rsi, qword [conversions]                    ; "ascii"
000000000000292c         xor        edx, edx
000000000000292e         mov        rdi, r8
0000000000002931         call       parse_symbols                               ; parse_symbols
0000000000002936         or         dword [conversions_mask], eax               ; conversions_mask
000000000000293c         jmp        loc_2190

                     loc_2941:
0000000000002941         lea        rdx, qword [aIflag]                         ; "iflag", CODE XREF=main+2650, main+2668
0000000000002948         mov        rax, r13
000000000000294b         mov        ecx, 0x69

                     loc_2950:
0000000000002950         add        rax, 0x1                                    ; CODE XREF=main+2738
0000000000002954         add        rdx, 0x1
0000000000002958         cmp        byte [rax-1], cl
000000000000295b         jne        loc_2992

000000000000295d         movzx      ecx, byte [rdx]
0000000000002960         test       cl, cl
0000000000002962         jne        loc_2950

0000000000002964         movzx      eax, byte [rax]
0000000000002967         cmp        al, 0x3d
0000000000002969         je         loc_296f

000000000000296b         test       al, al
000000000000296d         jne        loc_2992

                     loc_296f:
000000000000296f         lea        rcx, qword [aInvalidInputFl]                ; "invalid input flag", CODE XREF=main+2745
0000000000002976         lea        rsi, qword [flags]                          ; "append"
000000000000297d         xor        edx, edx
000000000000297f         mov        rdi, r8
0000000000002982         call       parse_symbols                               ; parse_symbols
0000000000002987         or         dword [input_flags], eax                    ; input_flags
000000000000298d         jmp        loc_2190

                     loc_2992:
0000000000002992         lea        rdx, qword [aOflag]                         ; "oflag", CODE XREF=main+2731, main+2749
0000000000002999         mov        rax, r13
000000000000299c         mov        ecx, 0x6f
00000000000029a1         nop        dword [rax]

                     loc_29a8:
00000000000029a8         add        rax, 0x1                                    ; CODE XREF=main+2830
00000000000029ac         add        rdx, 0x1
00000000000029b0         cmp        byte [rax-1], cl
00000000000029b3         jne        loc_2b55

00000000000029b9         movzx      ecx, byte [rdx]
00000000000029bc         test       cl, cl
00000000000029be         jne        loc_29a8

00000000000029c0         movzx      eax, byte [rax]
00000000000029c3         cmp        al, 0x3d
00000000000029c5         je         loc_29cf

00000000000029c7         test       al, al
00000000000029c9         jne        loc_2b55

                     loc_29cf:
00000000000029cf         lea        rcx, qword [aInvalidOutputF]                ; "invalid output flag", CODE XREF=main+2837
00000000000029d6         lea        rsi, qword [flags]                          ; "append"
00000000000029dd         xor        edx, edx
00000000000029df         mov        rdi, r8
00000000000029e2         call       parse_symbols                               ; parse_symbols
00000000000029e7         or         dword [output_flags], eax                   ; output_flags
00000000000029ed         jmp        loc_2190

                     loc_29f2:
00000000000029f2         test       r12, r12                                    ; CODE XREF=main+920
00000000000029f5         je         loc_2257

00000000000029fb         mov        qword [seek_records], r12                   ; seek_records
0000000000002a02         jmp        loc_2257

                     loc_2a07:
0000000000002a07         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=main+881
0000000000002a0b         je         loc_2244

0000000000002a11         mov        qword [max_records], rax                    ; max_records
0000000000002a18         jmp        loc_2244

                     loc_2a1d:
0000000000002a1d         test       rax, rax                                    ; CODE XREF=main+858
0000000000002a20         je         loc_2219

0000000000002a26         mov        qword [skip_records], rax                   ; skip_records
0000000000002a2d         jmp        loc_2219

                     loc_2a32:
0000000000002a32         mov        qword [rsp+0x118+var_108], 0xffffffffffffffff ; CODE XREF=main+576
0000000000002a3b         mov        qword [rsp+0x118+var_110], 0x0
0000000000002a44         xor        r12d, r12d

                     loc_2a47:
0000000000002a47         or         dword [conversions_mask], 0x800             ; conversions_mask, CODE XREF=main+748
0000000000002a51         cmp        qword [input_blocksize], 0x0                ; input_blocksize
0000000000002a59         jne        loc_2a66

0000000000002a5b         mov        qword [input_blocksize], 0x200              ; input_blocksize

                     loc_2a66:
0000000000002a66         cmp        qword [output_blocksize], 0x0               ; output_blocksize, CODE XREF=main+2985
0000000000002a6e         jne        loc_21b0

0000000000002a74         mov        qword [output_blocksize], 0x200             ; output_blocksize
0000000000002a7f         jmp        loc_21b0

                     loc_2a84:
0000000000002a84         xor        edx, edx                                    ; CODE XREF=main+867
0000000000002a86         div        qword [input_blocksize]                     ; input_blocksize
0000000000002a8d         mov        qword [skip_records], rax                   ; skip_records
0000000000002a94         mov        qword [skip_bytes], rdx                     ; skip_bytes
0000000000002a9b         jmp        loc_2219

                     loc_2aa0:
0000000000002aa0         cmp        qword [skip_records], 0x0                   ; skip_records, CODE XREF=main+960
0000000000002aa8         jne        loc_2af6

0000000000002aaa         mov        rax, qword [max_records]                    ; max_records
0000000000002ab1         sub        rax, 0x1
0000000000002ab5         cmp        rax, 0xfffffffffffffffd
0000000000002ab9         jbe        loc_2af6

0000000000002abb         mov        eax, esi
0000000000002abd         or         eax, ecx
0000000000002abf         test       ah, 0x40
0000000000002ac2         jne        loc_2af6

0000000000002ac4         mov        byte [warn_partial_read], 0x0               ; warn_partial_read
0000000000002acb         lea        rax, qword [iread]                          ; iread
0000000000002ad2         jmp        loc_2284

                     loc_2ad7:
0000000000002ad7         mov        rax, r12                                    ; CODE XREF=main+929
0000000000002ada         xor        edx, edx
0000000000002adc         div        qword [output_blocksize]                    ; output_blocksize
0000000000002ae3         mov        qword [seek_records], rax                   ; seek_records
0000000000002aea         mov        qword [seek_bytes], rdx                     ; seek_bytes
0000000000002af1         jmp        loc_2257

                     loc_2af6:
0000000000002af6         mov        byte [warn_partial_read], 0x1               ; warn_partial_read, CODE XREF=main+3064, main+3081, main+3090
0000000000002afd         lea        rax, qword [iread]                          ; iread
0000000000002b04         jmp        loc_2284

                     loc_2b09:
0000000000002b09         cmp        dword [status_level], 0x1                   ; status_level, CODE XREF=main+1829, main+1864
0000000000002b10         je         loc_25fe

0000000000002b16         mov        rdx, qword [input_file]                     ; input_file
0000000000002b1d         xor        edi, edi
0000000000002b1f         mov        esi, 0x3
0000000000002b24         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000002b29         lea        rsi, qword [aSCannotSkipToS]                ; argument "msgid" for method j_dcgettext, "%s: cannot skip to specified offset"
0000000000002b30         mov        rbp, rax
0000000000002b33         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b35         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b3a         call       j_dcgettext                                 ; dcgettext
0000000000002b3f         mov        rcx, rbp
0000000000002b42         mov        rdx, rax
0000000000002b45         xor        esi, esi
0000000000002b47         xor        edi, edi
0000000000002b49         xor        eax, eax
0000000000002b4b         call       nl_error                                    ; nl_error
0000000000002b50         jmp        loc_25fe

                     loc_2b55:
0000000000002b55         lea        rdx, qword [aStatus]                        ; "status", CODE XREF=main+2819, main+2841
0000000000002b5c         mov        rax, r13
0000000000002b5f         mov        ecx, 0x73
0000000000002b64         nop        dword [rax]

                     loc_2b68:
0000000000002b68         add        rax, 0x1                                    ; CODE XREF=main+3278
0000000000002b6c         add        rdx, 0x1
0000000000002b70         cmp        byte [rax-1], cl
0000000000002b73         jne        loc_33b0

0000000000002b79         movzx      ecx, byte [rdx]
0000000000002b7c         test       cl, cl
0000000000002b7e         jne        loc_2b68

0000000000002b80         movzx      eax, byte [rax]
0000000000002b83         test       al, al
0000000000002b85         jne        loc_33a8

                     loc_2b8b:
0000000000002b8b         lea        rcx, qword [aInvalidStatusL]                ; "invalid status level", CODE XREF=main+5370
0000000000002b92         lea        rsi, qword [statuses]                       ; statuses
0000000000002b99         mov        edx, 0x1
0000000000002b9e         mov        rdi, r8
0000000000002ba1         call       parse_symbols                               ; parse_symbols
0000000000002ba6         mov        dword [status_level], eax                   ; status_level
0000000000002bac         jmp        loc_2190
0000000000002bb1         align      8

                     loc_2bb8:
0000000000002bb8         call       write_output                                ; write_output, CODE XREF=main+3419

                     loc_2bbd:
0000000000002bbd         test       rbp, rbp                                    ; CODE XREF=main+3417
0000000000002bc0         je         loc_26f0

0000000000002bc6         mov        rdi, qword [obuf]                           ; obuf

                     loc_2bcd:
0000000000002bcd         mov        r14, qword [output_blocksize]               ; output_blocksize, CODE XREF=main+2479
0000000000002bd4         mov        r13, qword [oc]                             ; oc
0000000000002bdb         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000002bde         mov        r12, r14
0000000000002be1         sub        r12, r13
0000000000002be4         cmp        r12, rbp
0000000000002be7         cmova      r12, rbp
0000000000002beb         add        rdi, r13                                    ; argument "__dest" for method j_memcpy
0000000000002bee         mov        rdx, r12                                    ; argument "__n" for method j_memcpy
0000000000002bf1         sub        rbp, r12
0000000000002bf4         add        r15, r12
0000000000002bf7         add        r12, r13
0000000000002bfa         call       j_memcpy                                    ; memcpy
0000000000002bff         cmp        r14, r12
0000000000002c02         mov        qword [oc], r12                             ; oc
0000000000002c09         ja         loc_2bbd

0000000000002c0b         jmp        loc_2bb8
0000000000002c0d         align      16

                     loc_2c10:
0000000000002c10         xor        edi, edi                                    ; CODE XREF=main+2239
0000000000002c12         mov        rdx, qword [input_blocksize]                ; input_blocksize
0000000000002c19         mov        rsi, rcx
0000000000002c1c         call       rax
0000000000002c1e         cmp        rax, 0x0
0000000000002c22         jg         loc_2789

                     loc_2c28:
0000000000002c28         mov        esi, dword [conversions_mask]               ; conversions_mask, CODE XREF=main+2259
0000000000002c2e         je         loc_3105

0000000000002c34         and        esi, 0x100
0000000000002c3a         je         loc_2c45

0000000000002c3c         cmp        dword [status_level], 0x1                   ; status_level
0000000000002c43         je         loc_2ca2

                     loc_2c45:
0000000000002c45         mov        rsi, qword [input_file]                     ; input_file, CODE XREF=main+3466
0000000000002c4c         mov        edi, 0x4
0000000000002c51         call       quotearg_style                              ; quotearg_style
0000000000002c56         lea        rsi, qword [aErrorReadingS]                 ; argument "msgid" for method j_dcgettext, "error reading %s"
0000000000002c5d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002c5f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002c64         mov        rbp, rax
0000000000002c67         call       j_dcgettext                                 ; dcgettext
0000000000002c6c         mov        rdx, rax
0000000000002c6f         mov        rax, qword [rsp+0x118+var_108]
0000000000002c74         xor        edi, edi
0000000000002c76         mov        rcx, rbp
0000000000002c79         mov        esi, dword [rax]
0000000000002c7b         xor        eax, eax
0000000000002c7d         call       nl_error                                    ; nl_error
0000000000002c82         mov        esi, dword [conversions_mask]               ; conversions_mask
0000000000002c88         test       esi, 0x100
0000000000002c8e         je         loc_37a5

0000000000002c94         cmp        dword [status_level], 0x1                   ; status_level
0000000000002c9b         je         loc_2ca2

0000000000002c9d         call       print_stats.part.2                          ; print_stats.part.2

                     loc_2ca2:
0000000000002ca2         mov        rbp, qword [input_blocksize]                ; input_blocksize, CODE XREF=main+3475, main+3563
0000000000002ca9         sub        rbp, qword [rsp+0x118+var_110]
0000000000002cae         xor        edi, edi
0000000000002cb0         mov        rsi, rbp
0000000000002cb3         call       invalidate_cache                            ; invalidate_cache
0000000000002cb8         cmp        byte [input_seekable], 0x0                  ; input_seekable
0000000000002cbf         jne        loc_2e44

0000000000002cc5         mov        eax, dword [input_seek_errno]               ; input_seek_errno
0000000000002ccb         cmp        eax, 0x1d
0000000000002cce         je         loc_2d2f

0000000000002cd0         mov        rdi, qword [rsp+0x118+var_108]
0000000000002cd5         mov        dword [rdi], eax

                     loc_2cd7:
0000000000002cd7         mov        rdx, qword [input_file]                     ; input_file, CODE XREF=main+4504, main+4576, main+4615
0000000000002cde         mov        esi, 0x3
0000000000002ce3         xor        edi, edi
0000000000002ce5         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000002cea         lea        rsi, qword [aSCannotSeek]                   ; argument "msgid" for method j_dcgettext, "%s: cannot seek"
0000000000002cf1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002cf6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002cf8         mov        rbp, rax
0000000000002cfb         call       j_dcgettext                                 ; dcgettext
0000000000002d00         mov        rdx, rax
0000000000002d03         mov        rax, qword [rsp+0x118+var_108]
0000000000002d08         mov        rcx, rbp
0000000000002d0b         xor        edi, edi
0000000000002d0d         mov        esi, dword [rax]
0000000000002d0f         xor        eax, eax
0000000000002d11         call       nl_error                                    ; nl_error

                     loc_2d16:
0000000000002d16         mov        byte [input_seekable], 0x0                  ; input_seekable, CODE XREF=main+4082
0000000000002d1d         mov        dword [input_seek_errno], 0x1d              ; input_seek_errno
0000000000002d27         mov        dword [rsp+0x118+var_100], 0x1

                     loc_2d2f:
0000000000002d2f         test       byte [byte_21138d], 0x4                     ; byte_21138d, CODE XREF=main+3614, main+4513, main+4562
0000000000002d36         je         loc_26f0

0000000000002d3c         cmp        qword [rsp+0x118+var_110], 0x0
0000000000002d42         jne        loc_26f0

0000000000002d48         mov        r12, qword [input_blocksize]                ; input_blocksize
0000000000002d4f         xor        ebp, ebp
0000000000002d51         cmp        r12, rbp
0000000000002d54         ja         loc_27cb

0000000000002d5a         nop        word [rax+rax]

                     loc_2d60:
0000000000002d60         add        qword [r_full], 0x1                         ; r_full, CODE XREF=main+2325
0000000000002d68         mov        qword [rsp+0x118+var_110], 0x0
0000000000002d71         jmp        loc_2820

                     loc_2d76:
0000000000002d76         test       rbp, rbp                                    ; CODE XREF=main+2446
0000000000002d79         je         loc_2844

0000000000002d7f         lea        rcx, qword [r15+rbp]
0000000000002d83         mov        rax, r15
0000000000002d86         nop        word [cs:rax+rax]

                     loc_2d90:
0000000000002d90         movzx      edx, byte [rax]                             ; CODE XREF=main+3825
0000000000002d93         add        rax, 0x1
0000000000002d97         movzx      edx, byte [rbx+rdx]
0000000000002d9b         mov        byte [rax-1], dl
0000000000002d9e         cmp        rax, rcx
0000000000002da1         jne        loc_2d90

0000000000002da3         mov        ecx, dword [conversions_mask]               ; conversions_mask
0000000000002da9         test       cl, 0x80
0000000000002dac         je         loc_2853

                     loc_2db2:
0000000000002db2         cmp        byte [char_is_saved], 0x0                   ; char_is_saved, CODE XREF=main+2461
0000000000002db9         je         loc_2dd4

0000000000002dbb         movzx      eax, byte [saved_char]                      ; saved_char
0000000000002dc2         add        rbp, 0x1
0000000000002dc6         mov        byte [char_is_saved], 0x0                   ; char_is_saved
0000000000002dcd         sub        r15, 0x1
0000000000002dd1         mov        byte [r15], al

                     loc_2dd4:
0000000000002dd4         test       bpl, 0x1                                    ; CODE XREF=main+3849
0000000000002dd8         je         loc_2df0

0000000000002dda         sub        rbp, 0x1
0000000000002dde         mov        byte [char_is_saved], 0x1                   ; char_is_saved
0000000000002de5         movzx      eax, byte [r15+rbp]
0000000000002dea         mov        byte [saved_char], al                       ; saved_char

                     loc_2df0:
0000000000002df0         mov        rdx, rbp                                    ; CODE XREF=main+3880
0000000000002df3         lea        rax, qword [r15+rbp]
0000000000002df7         shr        rdx, 0x1
0000000000002dfa         je         loc_2e18

0000000000002dfc         neg        rdx
0000000000002dff         lea        rsi, qword [rax+rdx*2]
0000000000002e03         nop        dword [rax+rax]

                     loc_2e08:
0000000000002e08         movzx      edx, byte [rax-2]                           ; CODE XREF=main+3942
0000000000002e0c         sub        rax, 0x2
0000000000002e10         mov        byte [rax+2], dl
0000000000002e13         cmp        rax, rsi
0000000000002e16         jne        loc_2e08

                     loc_2e18:
0000000000002e18         add        r15, 0x1                                    ; CODE XREF=main+3914
0000000000002e1c         test       cl, 0x8
0000000000002e1f         je         loc_285c

                     loc_2e25:
0000000000002e25         mov        rsi, rbp                                    ; CODE XREF=main+2470
0000000000002e28         mov        rdi, r15
0000000000002e2b         call       copy_with_block                             ; copy_with_block
0000000000002e30         jmp        loc_26f0

                     loc_2e35:
0000000000002e35         mov        rsi, rax                                    ; CODE XREF=main+2309
0000000000002e38         xor        edi, edi
0000000000002e3a         call       invalidate_cache                            ; invalidate_cache
0000000000002e3f         jmp        loc_27bb

                     loc_2e44:
0000000000002e44         xor        eax, eax                                    ; CODE XREF=main+3599
0000000000002e46         mov        r12, rbp
0000000000002e49         add        r12, qword [input_offset]                   ; input_offset
0000000000002e50         setb       al
0000000000002e53         mov        qword [input_offset], r12                   ; input_offset
0000000000002e5a         test       rax, rax
0000000000002e5d         je         loc_3024

0000000000002e63         mov        byte [input_offset_overflow], 0x1           ; input_offset_overflow

                     loc_2e6a:
0000000000002e6a         mov        rsi, qword [input_file]                     ; input_file, CODE XREF=main+4481
0000000000002e71         mov        edi, 0x4
0000000000002e76         call       quotearg_style                              ; quotearg_style
0000000000002e7b         lea        rsi, qword [aOffsetOverflow]                ; argument "msgid" for method j_dcgettext, "offset overflow while reading file %s"
0000000000002e82         mov        rbp, rax
0000000000002e85         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e87         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e8c         call       j_dcgettext                                 ; dcgettext
0000000000002e91         mov        rcx, rbp
0000000000002e94         mov        rdx, rax
0000000000002e97         xor        esi, esi
0000000000002e99         xor        edi, edi
0000000000002e9b         xor        eax, eax
0000000000002e9d         call       nl_error                                    ; nl_error
0000000000002ea2         jmp        loc_2d16

                     loc_2ea7:
0000000000002ea7         mov        rsi, rbp                                    ; CODE XREF=main+2433
0000000000002eaa         mov        rdi, r15
0000000000002ead         call       iwrite.constprop.7                          ; iwrite.constprop.7
0000000000002eb2         add        qword [w_bytes], rax                        ; w_bytes
0000000000002eb9         cmp        rax, rbp
0000000000002ebc         je         loc_32e9

                     loc_2ec2:
0000000000002ec2         mov        rsi, qword [output_file]                    ; output_file, CODE XREF=main+6091
0000000000002ec9         mov        edi, 0x4
0000000000002ece         call       quotearg_style                              ; quotearg_style
0000000000002ed3         lea        rsi, qword [aErrorWritingS]                 ; "error writing %s"
0000000000002eda         mov        rbx, rax
0000000000002edd         mov        edx, 0x5

                     loc_2ee2:
0000000000002ee2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=main+4943, main+6690
0000000000002ee4         call       j_dcgettext                                 ; dcgettext
0000000000002ee9         mov        rdx, rax
0000000000002eec         mov        rax, qword [rsp+0x118+var_108]
0000000000002ef1         mov        rcx, rbx
0000000000002ef4         xor        edi, edi
0000000000002ef6         mov        esi, dword [rax]
0000000000002ef8         xor        eax, eax
0000000000002efa         call       nl_error                                    ; nl_error

                     loc_2eff:
0000000000002eff         mov        dword [rsp+0x118+var_100], 0x1              ; CODE XREF=main+6322

                     loc_2f07:
0000000000002f07         cmp        qword [max_records], 0x0                    ; max_records, CODE XREF=main+4877, main+4900
0000000000002f0f         je         loc_3261

                     loc_2f15:
0000000000002f15         cmp        byte [i_nocache], 0x0                       ; i_nocache, CODE XREF=main+5049
0000000000002f1c         jne        loc_2f27

0000000000002f1e         cmp        byte [i_nocache_eof], 0x0                   ; i_nocache_eof
0000000000002f25         je         loc_2f30

                     loc_2f27:
0000000000002f27         xor        esi, esi                                    ; CODE XREF=main+4204
0000000000002f29         xor        edi, edi
0000000000002f2b         call       invalidate_cache                            ; invalidate_cache

                     loc_2f30:
0000000000002f30         cmp        byte [o_nocache], 0x0                       ; o_nocache, CODE XREF=main+4213
0000000000002f37         jne        loc_2f42

0000000000002f39         cmp        byte [o_nocache_eof], 0x0                   ; o_nocache_eof
0000000000002f40         je         loc_2f4e

                     loc_2f42:
0000000000002f42         xor        esi, esi                                    ; CODE XREF=main+4231
0000000000002f44         mov        edi, 0x1
0000000000002f49         call       invalidate_cache                            ; invalidate_cache

                     loc_2f4e:
0000000000002f4e         call       finish_up                                   ; finish_up, CODE XREF=main+4240, main+5075, main+5095, main+5172
0000000000002f53         mov        rbx, qword [rsp+0x118+var_40]
0000000000002f5b         xor        rbx, qword [fs:0x28]
0000000000002f64         mov        eax, dword [rsp+0x118+var_100]
0000000000002f68         jne        loc_3bc7

0000000000002f6e         add        rsp, 0xe8
0000000000002f75         pop        rbx
0000000000002f76         pop        rbp
0000000000002f77         pop        r12
0000000000002f79         pop        r13
0000000000002f7b         pop        r14
0000000000002f7d         pop        r15
0000000000002f7f         ret
                        ; endp

                     loc_2f80:
0000000000002f80         and        bpl, 0x4                                    ; CODE XREF=main+1349
0000000000002f84         je         loc_2438

0000000000002f8a         lea        rax, qword [trans_table]                    ; trans_table
0000000000002f91         lea        rcx, qword [ascii_to_ibm]                   ; ascii_to_ibm
0000000000002f98         lea        rsi, qword [rax+0x100]
0000000000002f9f         nop

                     loc_2fa0:
0000000000002fa0         movzx      edx, byte [rax]                             ; CODE XREF=main+4353
0000000000002fa3         add        rax, 0x1
0000000000002fa7         movzx      edx, byte [rcx+rdx]
0000000000002fab         mov        byte [rax-1], dl
0000000000002fae         cmp        rsi, rax
0000000000002fb1         jne        loc_2fa0

0000000000002fb3         jmp        loc_2423

                     loc_2fb8:
0000000000002fb8         test       bpl, 0x20                                   ; CODE XREF=main+1286
0000000000002fbc         je         loc_23f1

0000000000002fc2         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
0000000000002fc7         mov        rsi, qword [rax]
0000000000002fca         lea        rax, qword [trans_table]                    ; trans_table
0000000000002fd1         lea        rcx, qword [rax+0x100]
0000000000002fd8         nop        dword [rax+rax]

                     loc_2fe0:
0000000000002fe0         movzx      edx, byte [rax]                             ; CODE XREF=main+4416
0000000000002fe3         add        rax, 0x1
0000000000002fe7         mov        edx, dword [rsi+rdx*4]
0000000000002fea         mov        byte [rax-1], dl
0000000000002fed         cmp        rcx, rax
0000000000002ff0         jne        loc_2fe0

0000000000002ff2         jmp        loc_23ea

                     loc_2ff7:
0000000000002ff7         mov        qword [rsp+0x118+var_110], rbp              ; CODE XREF=main+2364
0000000000002ffc         mov        rbp, r12
0000000000002fff         jmp        loc_2820

                     loc_3004:
0000000000003004         test       eax, eax                                    ; CODE XREF=main+952
0000000000003006         lea        rdx, qword [iread_fullblock]                ; iread_fullblock
000000000000300d         lea        rax, qword [iread]                          ; iread
0000000000003014         mov        byte [warn_partial_read], 0x0               ; warn_partial_read
000000000000301b         cmovne     rax, rdx
000000000000301f         jmp        loc_2284

                     loc_3024:
0000000000003024         mov        rax, r12                                    ; CODE XREF=main+4013
0000000000003027         shr        rax, 0x3f
000000000000302b         or         byte [input_offset_overflow], al            ; input_offset_overflow
0000000000003031         jne        loc_2e6a

0000000000003037         xor        esi, esi                                    ; argument "__offset" for method j_lseek
0000000000003039         xor        edi, edi                                    ; argument "__fd" for method j_lseek
000000000000303b         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000003040         call       j_lseek                                     ; lseek
0000000000003045         test       rax, rax
0000000000003048         js         loc_2cd7

000000000000304e         cmp        r12, rax
0000000000003051         je         loc_2d2f

0000000000003057         sub        r12, rax
000000000000305a         js         loc_3547

0000000000003060         cmp        rbp, r12
0000000000003063         jb         loc_3547

                     loc_3069:
0000000000003069         mov        rdi, qword [input_file]                     ; input_file, CODE XREF=main+5790, main+5829
0000000000003070         xor        esi, esi
0000000000003072         mov        ecx, 0x1
0000000000003077         mov        rdx, r12
000000000000307a         call       skip_via_lseek                              ; skip_via_lseek
000000000000307f         test       rax, rax
0000000000003082         jns        loc_2d2f

0000000000003088         mov        rax, qword [rsp+0x118+var_108]
000000000000308d         cmp        dword [rax], 0x0
0000000000003090         jne        loc_2cd7

0000000000003096         lea        rsi, qword [aCannotWorkArou]                ; argument "msgid" for method j_dcgettext, "cannot work around kernel bug after all"
000000000000309d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000309f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000030a4         call       j_dcgettext                                 ; dcgettext
00000000000030a9         xor        esi, esi
00000000000030ab         mov        rdx, rax
00000000000030ae         xor        edi, edi
00000000000030b0         xor        eax, eax
00000000000030b2         call       nl_error                                    ; nl_error
00000000000030b7         jmp        loc_2cd7

                     loc_30bc:
00000000000030bc         mov        edx, ebp                                    ; CODE XREF=main+1598
00000000000030be         mov        ecx, 0x1b6
00000000000030c3         mov        edi, 0x1
00000000000030c8         or         edx, 0x2
00000000000030cb         call       ifd_reopen                                  ; ifd_reopen
00000000000030d0         test       eax, eax
00000000000030d2         jns        loc_2521

00000000000030d8         mov        rsi, qword [output_file]                    ; output_file
00000000000030df         jmp        loc_2505

                     loc_30e4:
00000000000030e4         mov        rdx, qword [rsp+0x118+var_E0]               ; CODE XREF=main+1938
00000000000030e9         test       rdx, rdx
00000000000030ec         je         loc_26aa

00000000000030f2         mov        rdi, qword [obuf]                           ; argument "__s" for method j_memset, obuf
00000000000030f9         xor        esi, esi                                    ; argument "__c" for method j_memset
00000000000030fb         call       j_memset                                    ; memset
0000000000003100         jmp        loc_268d

                     loc_3105:
0000000000003105         movzx      eax, byte [i_nocache]                       ; i_nocache, CODE XREF=main+3454
000000000000310c         or         byte [i_nocache_eof], al                    ; i_nocache_eof
0000000000003112         cmp        byte [o_nocache], 0x0                       ; o_nocache
0000000000003119         movzx      eax, byte [o_nocache_eof]                   ; o_nocache_eof
0000000000003120         je         loc_3131

0000000000003122         xor        ebx, ebx
0000000000003124         test       esi, 0x200
000000000000312a         sete       bl
000000000000312d         mov        dword [rsp+0x118+var_F0], ebx

                     loc_3131:
0000000000003131         or         eax, dword [rsp+0x118+var_F0]               ; CODE XREF=main+4720
0000000000003135         mov        byte [o_nocache_eof], al                    ; o_nocache_eof
000000000000313b         and        byte [o_nocache_eof], 0x1                   ; o_nocache_eof

                     loc_3142:
0000000000003142         cmp        byte [char_is_saved], 0x0                   ; char_is_saved, CODE XREF=main+2173, main+6397
0000000000003149         je         loc_320f

000000000000314f         test       sil, 0x8
0000000000003153         jne        loc_37df

0000000000003159         and        sil, 0x10
000000000000315d         jne        loc_37fb

0000000000003163         mov        rax, qword [oc]                             ; oc
000000000000316a         movzx      ecx, byte [saved_char]                      ; saved_char
0000000000003171         mov        rdx, qword [obuf]                           ; obuf
0000000000003178         lea        rsi, qword [rax+1]
000000000000317c         cmp        rsi, qword [output_blocksize]               ; output_blocksize
0000000000003183         mov        byte [rdx+rax], cl
0000000000003186         mov        qword [oc], rsi                             ; oc
000000000000318d         jae        loc_3204

                     loc_318f:
000000000000318f         test       rsi, rsi                                    ; CODE XREF=main+4992, main+5295, main+5308, main+5352
0000000000003192         jne        loc_364e

                     loc_3198:
0000000000003198         cmp        byte [final_op_was_seek], 0x0               ; final_op_was_seek, CODE XREF=main+6085
000000000000319f         jne        loc_36ba

                     loc_31a5:
00000000000031a5         mov        esi, dword [conversions_mask]               ; conversions_mask, CODE XREF=main+6196, main+6225, main+6236, main+6252
00000000000031ab         test       esi, 0x4000
00000000000031b1         jne        loc_3680

                     loc_31b7:
00000000000031b7         and        esi, 0x8000                                 ; CODE XREF=main+6149
00000000000031bd         je         loc_2f07

00000000000031c3         mov        rbx, qword [rsp+0x118+var_108]

                     loc_31c8:
00000000000031c8         mov        edi, 0x1                                    ; argument "__fd" for method j_fsync, CODE XREF=main+4909
00000000000031cd         call       j_fsync                                     ; fsync
00000000000031d2         test       eax, eax
00000000000031d4         je         loc_2f07

00000000000031da         cmp        dword [rbx], 0x4
00000000000031dd         je         loc_31c8

00000000000031df         mov        rsi, qword [output_file]                    ; output_file
00000000000031e6         mov        edi, 0x4
00000000000031eb         call       quotearg_style                              ; quotearg_style
00000000000031f0         mov        edx, 0x5
00000000000031f5         mov        rbx, rax
00000000000031f8         lea        rsi, qword [aFsyncFailedFor]                ; "fsync failed for %s"
00000000000031ff         jmp        loc_2ee2

                     loc_3204:
0000000000003204         call       write_output                                ; write_output, CODE XREF=main+4829
0000000000003209         mov        esi, dword [conversions_mask]               ; conversions_mask

                     loc_320f:
000000000000320f         and        sil, 0x8                                    ; CODE XREF=main+4761, main+6470, main+6498
0000000000003213         je         loc_3350

0000000000003219         mov        rbx, qword [col]                            ; col
0000000000003220         test       rbx, rbx
0000000000003223         jne        loc_333e

                     loc_3229:
0000000000003229         mov        rsi, qword [oc]                             ; oc, CODE XREF=main+5363
0000000000003230         jmp        loc_318f

                     loc_3235:
0000000000003235         lea        rsi, qword [aStandardInput]                 ; argument "msgid" for method j_dcgettext, "standard input", CODE XREF=main+1443
000000000000323c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000323e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003243         call       j_dcgettext                                 ; dcgettext
0000000000003248         mov        esi, r12d
000000000000324b         mov        rdx, rax
000000000000324e         xor        edi, edi
0000000000003250         mov        qword [input_file], rax                     ; input_file
0000000000003257         call       set_fd_flags                                ; set_fd_flags
000000000000325c         jmp        loc_2470

                     loc_3261:
0000000000003261         cmp        qword [max_bytes], 0x0                      ; max_bytes, CODE XREF=main+4191
0000000000003269         jne        loc_2f15

                     loc_326f:
000000000000326f         cmp        byte [i_nocache], 0x0                       ; i_nocache, CODE XREF=main+5211
0000000000003276         jne        loc_3463

                     loc_327c:
000000000000327c         cmp        byte [o_nocache], 0x0                       ; o_nocache, CODE XREF=main+5566, main+5643
0000000000003283         je         loc_2f4e

0000000000003289         xor        esi, esi
000000000000328b         mov        edi, 0x1
0000000000003290         call       invalidate_cache                            ; invalidate_cache
0000000000003295         test       al, al
0000000000003297         jne        loc_2f4e

000000000000329d         mov        rdx, qword [output_file]                    ; output_file
00000000000032a4         mov        esi, 0x3
00000000000032a9         xor        edi, edi
00000000000032ab         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000032b0         lea        rsi, qword [aFailedToDiscar]                ; argument "msgid" for method j_dcgettext, "failed to discard cache for: %s"
00000000000032b7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000032bc         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000032be         mov        rbx, rax
00000000000032c1         call       j_dcgettext                                 ; dcgettext
00000000000032c6         mov        rdx, rax
00000000000032c9         mov        rax, qword [rsp+0x118+var_108]
00000000000032ce         mov        rcx, rbx
00000000000032d1         xor        edi, edi
00000000000032d3         mov        esi, dword [rax]
00000000000032d5         xor        eax, eax
00000000000032d7         call       nl_error                                    ; nl_error
00000000000032dc         mov        dword [rsp+0x118+var_100], 0x1
00000000000032e4         jmp        loc_2f4e

                     loc_32e9:
00000000000032e9         cmp        qword [input_blocksize], rbp                ; input_blocksize, CODE XREF=main+4108
00000000000032f0         je         loc_34c0

00000000000032f6         add        qword [w_partial], 0x1                      ; w_partial
00000000000032fe         jmp        loc_26f0

                     loc_3303:
0000000000003303         mov        dword [rsp+0x118+var_100], 0x0              ; CODE XREF=main+2060
000000000000330b         jmp        loc_326f

                     loc_3310:
0000000000003310         lea        rax, qword [rsi+1]                          ; CODE XREF=main+5276
0000000000003314         movzx      ecx, byte [space_character]                 ; space_character
000000000000331b         cmp        rax, qword [output_blocksize]               ; output_blocksize
0000000000003322         mov        rdx, qword [obuf]                           ; obuf
0000000000003329         mov        qword [oc], rax                             ; oc
0000000000003330         mov        byte [rdx+rsi], cl
0000000000003333         jb         loc_333a

0000000000003335         call       write_output                                ; write_output

                     loc_333a:
000000000000333a         add        rbx, 0x1                                    ; CODE XREF=main+5251

                     loc_333e:
000000000000333e         cmp        rbx, qword [conversion_blocksize]           ; conversion_blocksize, CODE XREF=main+4979
0000000000003345         mov        rsi, qword [oc]                             ; oc
000000000000334c         jb         loc_3310

000000000000334e         jmp        loc_3357

                     loc_3350:
0000000000003350         mov        rsi, qword [oc]                             ; oc, CODE XREF=main+4963

                     loc_3357:
0000000000003357         cmp        qword [col], 0x0                            ; col, CODE XREF=main+5278
000000000000335f         je         loc_318f

0000000000003365         test       byte [conversions_mask], 0x10               ; conversions_mask
000000000000336c         je         loc_318f

0000000000003372         lea        rax, qword [rsi+1]
0000000000003376         movzx      ecx, byte [newline_character]               ; newline_character
000000000000337d         cmp        rax, qword [output_blocksize]               ; output_blocksize
0000000000003384         mov        rdx, qword [obuf]                           ; obuf
000000000000338b         mov        qword [oc], rax                             ; oc
0000000000003392         mov        byte [rdx+rsi], cl
0000000000003395         mov        rsi, rax
0000000000003398         jb         loc_318f

000000000000339e         call       write_output                                ; write_output
00000000000033a3         jmp        loc_3229

                     loc_33a8:
00000000000033a8         cmp        al, 0x3d                                    ; CODE XREF=main+3285
00000000000033aa         je         loc_2b8b

                     loc_33b0:
00000000000033b0         mov        rsi, qword [rsp+0x118+var_100]              ; CODE XREF=main+3267
00000000000033b5         mov        rdi, r8
00000000000033b8         mov        qword [rsp+0x118+var_F0], r8
00000000000033bd         mov        dword [rsp+0x118+var_E0], 0x0
00000000000033c5         call       parse_integer                               ; parse_integer
00000000000033ca         mov        rdx, r13
00000000000033cd         mov        esi, 0x69
00000000000033d2         lea        rcx, qword [aStatus+7]                      ; 0xc813
00000000000033d9         mov        r8, qword [rsp+0x118+var_F0]
00000000000033de         jmp        loc_33ec

                     loc_33e0:
00000000000033e0         movzx      esi, byte [rcx]                             ; CODE XREF=main+5448
00000000000033e3         test       sil, sil
00000000000033e6         je         loc_3767

                     loc_33ec:
00000000000033ec         add        rdx, 0x1                                    ; CODE XREF=main+5422
00000000000033f0         add        rcx, 0x1
00000000000033f4         cmp        byte [rdx-1], sil
00000000000033f8         je         loc_33e0

                     loc_33fa:
00000000000033fa         lea        rcx, qword [aStatus+11]                     ; 0xc817, CODE XREF=main+6337
0000000000003401         mov        rdx, r13
0000000000003404         mov        esi, 0x6f

                     loc_3409:
0000000000003409         add        rdx, 0x1                                    ; CODE XREF=main+5485
000000000000340d         add        rcx, 0x1
0000000000003411         cmp        byte [rdx-1], sil
0000000000003415         jne        loc_3433

0000000000003417         movzx      esi, byte [rcx]
000000000000341a         test       sil, sil
000000000000341d         jne        loc_3409

000000000000341f         movzx      edx, byte [rdx]
0000000000003422         test       dl, dl
0000000000003424         je         loc_35bf

000000000000342a         cmp        dl, 0x3d
000000000000342d         je         loc_35bf

                     loc_3433:
0000000000003433         mov        rdx, r13                                    ; CODE XREF=main+5477
0000000000003436         mov        esi, 0x62
000000000000343b         lea        rcx, qword [aStatus+16]                     ; 0xc81c
0000000000003442         jmp        loc_3450

                     loc_3444:
0000000000003444         movzx      esi, byte [rcx]                             ; CODE XREF=main+5548
0000000000003447         test       sil, sil
000000000000344a         je         loc_39a6

                     loc_3450:
0000000000003450         add        rdx, 0x1                                    ; CODE XREF=main+5522
0000000000003454         add        rcx, 0x1
0000000000003458         cmp        byte [rdx-1], sil
000000000000345c         je         loc_3444

000000000000345e         jmp        loc_39b2

                     loc_3463:
0000000000003463         xor        esi, esi                                    ; CODE XREF=main+5062
0000000000003465         xor        edi, edi
0000000000003467         call       invalidate_cache                            ; invalidate_cache
000000000000346c         test       al, al
000000000000346e         jne        loc_327c

0000000000003474         mov        rdx, qword [input_file]                     ; input_file
000000000000347b         mov        esi, 0x3
0000000000003480         xor        edi, edi
0000000000003482         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000003487         lea        rsi, qword [aFailedToDiscar]                ; argument "msgid" for method j_dcgettext, "failed to discard cache for: %s"
000000000000348e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003493         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003495         mov        rbx, rax
0000000000003498         call       j_dcgettext                                 ; dcgettext
000000000000349d         mov        rdx, rax
00000000000034a0         mov        rax, qword [rsp+0x118+var_108]
00000000000034a5         mov        rcx, rbx
00000000000034a8         xor        edi, edi
00000000000034aa         mov        esi, dword [rax]
00000000000034ac         xor        eax, eax
00000000000034ae         call       nl_error                                    ; nl_error
00000000000034b3         mov        dword [rsp+0x118+var_100], 0x1
00000000000034bb         jmp        loc_327c

                     loc_34c0:
00000000000034c0         add        qword [w_full], 0x1                         ; w_full, CODE XREF=main+5184
00000000000034c8         jmp        loc_26f0

                     loc_34cd:
00000000000034cd         mov        rax, qword [rsp+0x118+var_108]              ; CODE XREF=main+1725
00000000000034d2         mov        rdx, qword [rsp+0x118+var_F8]               ; argument "__stat_buf" for method j___fxstat
00000000000034d7         mov        esi, 0x1                                    ; argument "__fildes" for method j___fxstat
00000000000034dc         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
00000000000034e1         mov        ebp, dword [rax]
00000000000034e3         call       j___fxstat                                  ; __fxstat
00000000000034e8         test       eax, eax
00000000000034ea         jne        loc_3b43

00000000000034f0         mov        eax, dword [rsp+0x118+var_C0]
00000000000034f4         and        eax, 0xf000
00000000000034f9         sub        eax, 0x4000
00000000000034fe         test       eax, 0xffffb000
0000000000003503         jne        loc_2573

0000000000003509         mov        rsi, qword [output_file]                    ; output_file
0000000000003510         mov        edi, 0x4
0000000000003515         call       quotearg_style                              ; quotearg_style
000000000000351a         lea        rsi, qword [aFailedToTrunca_da98]           ; argument "msgid" for method j_dcgettext, "failed to truncate to %lu bytes in output file %s"
0000000000003521         mov        rbx, rax
0000000000003524         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003529         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000352b         call       j_dcgettext                                 ; dcgettext
0000000000003530         mov        r8, rbx
0000000000003533         mov        rdx, rax
0000000000003536         mov        rcx, r12
0000000000003539         mov        esi, ebp
000000000000353b         mov        edi, 0x1
0000000000003540         xor        eax, eax
0000000000003542         call       nl_error                                    ; nl_error

                     loc_3547:
0000000000003547         cmp        dword [status_level], 0x1                   ; status_level, CODE XREF=main+4522, main+4531
000000000000354e         je         loc_3069

0000000000003554         lea        rsi, qword [aWarningInvalid]                ; argument "msgid" for method j_dcgettext, "warning: invalid file offset after failed read"
000000000000355b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000355d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003562         call       j_dcgettext                                 ; dcgettext
0000000000003567         xor        esi, esi
0000000000003569         mov        rdx, rax
000000000000356c         xor        edi, edi
000000000000356e         xor        eax, eax
0000000000003570         call       nl_error                                    ; nl_error
0000000000003575         jmp        loc_3069

                     loc_357a:
000000000000357a         lea        rdi, qword [caught_signals]                 ; argument "__set" for method j_sigaddset, caught_signals, CODE XREF=main+72
0000000000003581         mov        esi, 0xa                                    ; argument "__signo" for method j_sigaddset
0000000000003586         call       j_sigaddset                                 ; sigaddset
000000000000358b         jmp        loc_1efe

                     loc_3590:
0000000000003590         lea        rsi, qword [aStandardOutput]                ; argument "msgid" for method j_dcgettext, "standard output", CODE XREF=main+1551
0000000000003597         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003599         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000359e         call       j_dcgettext                                 ; dcgettext
00000000000035a3         mov        esi, r12d
00000000000035a6         mov        rdx, rax
00000000000035a9         mov        edi, 0x1
00000000000035ae         mov        qword [output_file], rax                    ; output_file
00000000000035b5         call       set_fd_flags                                ; set_fd_flags
00000000000035ba         jmp        loc_2573

                     loc_35bf:
00000000000035bf         mov        rdx, qword [page_size]                      ; page_size, CODE XREF=main+5492, main+5501
00000000000035c6         movabs     rdi, 0x7fffffffffffffff
00000000000035d0         mov        qword [output_blocksize], rax               ; output_blocksize
00000000000035d7         neg        rdx
00000000000035da         cmp        rdx, rdi
00000000000035dd         cmova      rdx, rdi

                     loc_35e1:
00000000000035e1         test       rax, rax                                    ; CODE XREF=main+6384, main+7042
00000000000035e4         je         loc_37d2

00000000000035ea         cmp        rax, rdx
00000000000035ed         jbe        loc_38a2

00000000000035f3         mov        dword [rsp+0x118+var_E0], 0x1

                     loc_35fb:
00000000000035fb         mov        rdi, r8                                     ; CODE XREF=main+6442, main+6653
00000000000035fe         call       quote                                       ; quote
0000000000003603         lea        rsi, qword [aInvalidNumber]                 ; argument "msgid" for method j_dcgettext, "invalid number"
000000000000360a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000360c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003611         mov        rbx, rax
0000000000003614         call       j_dcgettext                                 ; dcgettext
0000000000003619         cmp        dword [rsp+0x118+var_E0], 0x1
000000000000361e         mov        edx, 0x0
0000000000003623         mov        esi, 0x4b
0000000000003628         mov        rcx, rax
000000000000362b         mov        r8, rbx
000000000000362e         mov        edi, 0x1
0000000000003633         cmovne     esi, edx
0000000000003636         lea        rdx, qword [aSS]                            ; "%s: %s"
000000000000363d         xor        eax, eax
000000000000363f         call       nl_error                                    ; nl_error

                     loc_3644:
0000000000003644         call       alloc_ibuf.part.4                           ; alloc_ibuf.part.4, CODE XREF=main+2074
0000000000003649         jmp        loc_26d0

                     loc_364e:
000000000000364e         mov        rdi, qword [obuf]                           ; obuf, CODE XREF=main+4834
0000000000003655         call       iwrite.constprop.7                          ; iwrite.constprop.7
000000000000365a         add        qword [w_bytes], rax                        ; w_bytes
0000000000003661         test       rax, rax
0000000000003664         je         loc_366e

0000000000003666         add        qword [w_partial], 0x1                      ; w_partial

                     loc_366e:
000000000000366e         cmp        rax, qword [oc]                             ; oc, CODE XREF=main+6068
0000000000003675         je         loc_3198

000000000000367b         jmp        loc_2ec2

                     loc_3680:
0000000000003680         mov        edi, 0x1                                    ; argument "__fildes" for method j_fdatasync, CODE XREF=main+4865
0000000000003685         call       j_fdatasync                                 ; fdatasync
000000000000368a         test       eax, eax
000000000000368c         je         loc_36af

000000000000368e         mov        rax, qword [rsp+0x118+var_108]
0000000000003693         mov        eax, dword [rax]
0000000000003695         mov        dword [rsp+0x118+var_110], eax
0000000000003699         sub        eax, 0x16
000000000000369c         and        eax, 0xffffffef
000000000000369f         jne        loc_38d7

                     loc_36a5:
00000000000036a5         or         dword [conversions_mask], 0x8000            ; conversions_mask, CODE XREF=main+6764

                     loc_36af:
00000000000036af         mov        esi, dword [conversions_mask]               ; conversions_mask, CODE XREF=main+6108
00000000000036b5         jmp        loc_31b7

                     loc_36ba:
00000000000036ba         mov        rdx, qword [rsp+0x118+var_F8]               ; argument "__stat_buf" for method j___fxstat, CODE XREF=main+4847
00000000000036bf         mov        esi, 0x1                                    ; argument "__fildes" for method j___fxstat
00000000000036c4         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
00000000000036c9         call       j___fxstat                                  ; __fxstat
00000000000036ce         test       eax, eax
00000000000036d0         jne        loc_38b2

00000000000036d6         mov        eax, dword [rsp+0x118+var_C0]
00000000000036da         and        eax, 0xf000
00000000000036df         cmp        eax, 0x8000
00000000000036e4         jne        loc_31a5

00000000000036ea         xor        esi, esi                                    ; argument "__offset" for method j_lseek
00000000000036ec         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
00000000000036f1         mov        edi, 0x1                                    ; argument "__fd" for method j_lseek
00000000000036f6         call       j_lseek                                     ; lseek
00000000000036fb         test       rax, rax
00000000000036fe         mov        rbx, rax
0000000000003701         js         loc_31a5

0000000000003707         cmp        rax, qword [rsp+0x118+var_A8]
000000000000370c         jle        loc_31a5

0000000000003712         mov        rdi, rax
0000000000003715         call       iftruncate.constprop.6                      ; iftruncate.constprop.6
000000000000371a         test       eax, eax
000000000000371c         je         loc_31a5

0000000000003722         mov        rsi, qword [output_file]                    ; output_file
0000000000003729         mov        edi, 0x4
000000000000372e         call       quotearg_style                              ; quotearg_style
0000000000003733         lea        rsi, qword [aFailedToTrunca]                ; argument "msgid" for method j_dcgettext, "failed to truncate to %ld bytes in output file %s"
000000000000373a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000373c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003741         mov        rbp, rax
0000000000003744         call       j_dcgettext                                 ; dcgettext
0000000000003749         mov        rdx, rax
000000000000374c         mov        rax, qword [rsp+0x118+var_108]
0000000000003751         mov        r8, rbp
0000000000003754         mov        rcx, rbx
0000000000003757         xor        edi, edi
0000000000003759         mov        esi, dword [rax]
000000000000375b         xor        eax, eax
000000000000375d         call       nl_error                                    ; nl_error
0000000000003762         jmp        loc_2eff

                     loc_3767:
0000000000003767         movzx      edx, byte [rdx]                             ; CODE XREF=main+5430
000000000000376a         test       dl, dl
000000000000376c         je         loc_3777

000000000000376e         cmp        dl, 0x3d
0000000000003771         jne        loc_33fa

                     loc_3777:
0000000000003777         mov        rdi, qword [page_size]                      ; page_size, CODE XREF=main+6332
000000000000377e         mov        qword [input_blocksize], rax                ; input_blocksize
0000000000003785         lea        rdx, qword [rdi+2]
0000000000003789         movabs     rdi, 0x7fffffffffffffff
0000000000003793         add        rdx, rdx
0000000000003796         neg        rdx
0000000000003799         cmp        rdx, rdi
000000000000379c         cmova      rdx, rdi
00000000000037a0         jmp        loc_35e1

                     loc_37a5:
00000000000037a5         mov        dword [rsp+0x118+var_100], 0x1              ; CODE XREF=main+3550
00000000000037ad         jmp        loc_3142

                     loc_37b2:
00000000000037b2         movzx      edx, byte [rdx]                             ; CODE XREF=main+6937
00000000000037b5         test       dl, dl
00000000000037b7         je         loc_37c2

00000000000037b9         cmp        dl, 0x3d
00000000000037bc         jne        loc_39dd

                     loc_37c2:
00000000000037c2         test       rax, rax                                    ; CODE XREF=main+6407
00000000000037c5         mov        qword [conversion_blocksize], rax           ; conversion_blocksize
00000000000037cc         jne        loc_38a2

                     loc_37d2:
00000000000037d2         mov        dword [rsp+0x118+var_E0], 0x4               ; CODE XREF=main+5940
00000000000037da         jmp        loc_35fb

                     loc_37df:
00000000000037df         lea        rdi, qword [saved_char]                     ; saved_char, CODE XREF=main+4771
00000000000037e6         mov        esi, 0x1
00000000000037eb         call       copy_with_block                             ; copy_with_block
00000000000037f0         mov        esi, dword [conversions_mask]               ; conversions_mask
00000000000037f6         jmp        loc_320f

                     loc_37fb:
00000000000037fb         lea        rdi, qword [saved_char]                     ; saved_char, CODE XREF=main+4781
0000000000003802         mov        esi, 0x1
0000000000003807         call       copy_with_unblock                           ; copy_with_unblock
000000000000380c         mov        esi, dword [conversions_mask]               ; conversions_mask
0000000000003812         jmp        loc_320f

                     loc_3817:
0000000000003817         movzx      edx, byte [rdx]                             ; CODE XREF=main+6980
000000000000381a         cmp        dl, 0x3d
000000000000381d         je         loc_3a7f

0000000000003823         test       dl, dl
0000000000003825         je         loc_3a7f

                     loc_382b:
000000000000382b         lea        rcx, qword [aSCannotSeek+11]                ; 0xc7d1, CODE XREF=main+7000
0000000000003832         mov        rdx, r13
0000000000003835         mov        esi, 0x73

                     loc_383a:
000000000000383a         add        rdx, 0x1                                    ; CODE XREF=main+6558
000000000000383e         add        rcx, 0x1
0000000000003842         cmp        byte [rdx-1], sil
0000000000003846         jne        loc_3864

0000000000003848         movzx      esi, byte [rcx]
000000000000384b         test       sil, sil
000000000000384e         jne        loc_383a

0000000000003850         movzx      edx, byte [rdx]
0000000000003853         cmp        dl, 0x3d
0000000000003856         je         loc_3a89

000000000000385c         test       dl, dl
000000000000385e         je         loc_3a89

                     loc_3864:
0000000000003864         lea        rcx, qword [aCount]                         ; "count", CODE XREF=main+6550
000000000000386b         mov        rdx, r13
000000000000386e         mov        esi, 0x63

                     loc_3873:
0000000000003873         add        rdx, 0x1                                    ; CODE XREF=main+6619
0000000000003877         add        rcx, 0x1
000000000000387b         cmp        byte [rdx-1], sil
000000000000387f         jne        loc_3921

0000000000003885         movzx      esi, byte [rcx]
0000000000003888         test       sil, sil
000000000000388b         jne        loc_3873

000000000000388d         movzx      edx, byte [rdx]
0000000000003890         cmp        dl, 0x3d
0000000000003893         je         loc_389d

0000000000003895         test       dl, dl
0000000000003897         jne        loc_3921

                     loc_389d:
000000000000389d         mov        qword [rsp+0x118+var_108], rax              ; CODE XREF=main+6627

                     loc_38a2:
00000000000038a2         cmp        dword [rsp+0x118+var_E0], 0x0               ; CODE XREF=main+5949, main+6428, main+7124, main+7132
00000000000038a7         je         loc_2190

00000000000038ad         jmp        loc_35fb

                     loc_38b2:
00000000000038b2         mov        rsi, qword [output_file]                    ; output_file, CODE XREF=main+6176
00000000000038b9         mov        edi, 0x4
00000000000038be         call       quotearg_style                              ; quotearg_style
00000000000038c3         mov        edx, 0x5
00000000000038c8         mov        rbx, rax
00000000000038cb         lea        rsi, qword [aCannotFstatS]                  ; "cannot fstat %s"
00000000000038d2         jmp        loc_2ee2

                     loc_38d7:
00000000000038d7         mov        rsi, qword [output_file]                    ; output_file, CODE XREF=main+6127
00000000000038de         mov        edi, 0x4
00000000000038e3         call       quotearg_style                              ; quotearg_style
00000000000038e8         lea        rsi, qword [aFdatasyncFaile]                ; argument "msgid" for method j_dcgettext, "fdatasync failed for %s"
00000000000038ef         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000038f4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000038f6         mov        rbx, rax
00000000000038f9         call       j_dcgettext                                 ; dcgettext
00000000000038fe         mov        rdx, rax
0000000000003901         mov        rax, qword [rsp+0x118+var_108]
0000000000003906         mov        rcx, rbx
0000000000003909         xor        edi, edi
000000000000390b         mov        esi, dword [rax]
000000000000390d         xor        eax, eax
000000000000390f         call       nl_error                                    ; nl_error
0000000000003914         mov        dword [rsp+0x118+var_100], 0x1
000000000000391c         jmp        loc_36a5

                     loc_3921:
0000000000003921         mov        rdi, r13                                    ; CODE XREF=main+659, main+6607, main+6631
0000000000003924         call       quote                                       ; quote
0000000000003929         lea        rsi, qword [aUnrecognizedOp]                ; argument "msgid" for method j_dcgettext, "unrecognized operand %s"
0000000000003930         mov        rbx, rax
0000000000003933         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003938         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000393a         call       j_dcgettext                                 ; dcgettext
000000000000393f         xor        edi, edi
0000000000003941         mov        rdx, rax
0000000000003944         mov        rcx, rbx
0000000000003947         xor        esi, esi
0000000000003949         xor        eax, eax
000000000000394b         call       nl_error                                    ; nl_error
0000000000003950         mov        edi, 0x1                                    ; argument #1 for method usage
0000000000003955         call       usage                                       ; usage

                     loc_395a:
000000000000395a         mov        rsi, qword [output_file]                    ; output_file, CODE XREF=main+1993, main+2036
0000000000003961         mov        edi, 0x4
0000000000003966         call       quotearg_style                              ; quotearg_style
000000000000396b         lea        rsi, qword [aWritingToS]                    ; argument "msgid" for method j_dcgettext, "writing to %s"
0000000000003972         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003977         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003979         mov        rbx, rax
000000000000397c         call       j_dcgettext                                 ; dcgettext
0000000000003981         mov        rdx, rax
0000000000003984         mov        rax, qword [rsp+0x118+var_108]
0000000000003989         xor        edi, edi
000000000000398b         mov        rcx, rbx
000000000000398e         mov        esi, dword [rax]
0000000000003990         xor        eax, eax
0000000000003992         call       nl_error                                    ; nl_error
0000000000003997         call       finish_up                                   ; finish_up
000000000000399c         mov        edi, 0x1                                    ; argument "__status" for method j_exit
00000000000039a1         call       j_exit                                      ; exit
                        ; endp

                     loc_39a6:
00000000000039a6         movzx      edx, byte [rdx]                             ; CODE XREF=main+5530
00000000000039a9         test       dl, dl
00000000000039ab         je         loc_3a0d

00000000000039ad         cmp        dl, 0x3d
00000000000039b0         je         loc_3a0d

                     loc_39b2:
00000000000039b2         mov        rdx, r13                                    ; CODE XREF=main+5550
00000000000039b5         mov        esi, 0x63
00000000000039ba         lea        rcx, qword [aStatus+15]                     ; 0xc81b
00000000000039c1         jmp        loc_39cf

                     loc_39c3:
00000000000039c3         movzx      esi, byte [rcx]                             ; CODE XREF=main+6955
00000000000039c6         test       sil, sil
00000000000039c9         je         loc_37b2

                     loc_39cf:
00000000000039cf         add        rdx, 0x1                                    ; CODE XREF=main+6929
00000000000039d3         add        rcx, 0x1
00000000000039d7         cmp        byte [rdx-1], sil
00000000000039db         je         loc_39c3

                     loc_39dd:
00000000000039dd         mov        rdx, r13                                    ; CODE XREF=main+6412
00000000000039e0         mov        esi, 0x73
00000000000039e5         lea        rcx, qword [aSCannotSkip+11]                ; 0xc7c1
00000000000039ec         jmp        loc_39fa

                     loc_39ee:
00000000000039ee         movzx      esi, byte [rcx]                             ; CODE XREF=main+6998
00000000000039f1         test       sil, sil
00000000000039f4         je         loc_3817

                     loc_39fa:
00000000000039fa         add        rdx, 0x1                                    ; CODE XREF=main+6972
00000000000039fe         add        rcx, 0x1
0000000000003a02         cmp        byte [rdx-1], sil
0000000000003a06         je         loc_39ee

0000000000003a08         jmp        loc_382b

                     loc_3a0d:
0000000000003a0d         mov        rdi, qword [page_size]                      ; page_size, CODE XREF=main+6907, main+6912
0000000000003a14         mov        r15, rax
0000000000003a17         lea        rdx, qword [rdi+2]
0000000000003a1b         movabs     rdi, 0x7fffffffffffffff
0000000000003a25         add        rdx, rdx
0000000000003a28         neg        rdx
0000000000003a2b         cmp        rdx, rdi
0000000000003a2e         cmova      rdx, rdi
0000000000003a32         jmp        loc_35e1

                     loc_3a37:
0000000000003a37         lea        rsi, qword [aCannotCombineB]                ; argument "msgid" for method j_dcgettext, "cannot combine block and unblock", CODE XREF=main+1024
0000000000003a3e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003a43         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003a45         call       j_dcgettext                                 ; dcgettext
0000000000003a4a         xor        esi, esi
0000000000003a4c         mov        rdx, rax
0000000000003a4f         mov        edi, 0x1
0000000000003a54         xor        eax, eax
0000000000003a56         call       nl_error                                    ; nl_error

                     loc_3a5b:
0000000000003a5b         lea        rsi, qword [aCannotCombineL]                ; argument "msgid" for method j_dcgettext, "cannot combine lcase and ucase", CODE XREF=main+1040
0000000000003a62         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003a67         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003a69         call       j_dcgettext                                 ; dcgettext
0000000000003a6e         xor        esi, esi
0000000000003a70         mov        rdx, rax
0000000000003a73         mov        edi, 0x1
0000000000003a78         xor        eax, eax
0000000000003a7a         call       nl_error                                    ; nl_error

                     loc_3a7f:
0000000000003a7f         mov        qword [rsp+0x118+var_110], rax              ; CODE XREF=main+6509, main+6517
0000000000003a84         jmp        loc_38a2

                     loc_3a89:
0000000000003a89         mov        r12, rax                                    ; CODE XREF=main+6566, main+6574
0000000000003a8c         jmp        loc_38a2

                     loc_3a91:
0000000000003a91         lea        rsi, qword [aCannotCombineE]                ; argument "msgid" for method j_dcgettext, "cannot combine excl and nocreat", CODE XREF=main+1058
0000000000003a98         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003a9d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003a9f         call       j_dcgettext                                 ; dcgettext
0000000000003aa4         xor        esi, esi
0000000000003aa6         mov        rdx, rax
0000000000003aa9         mov        edi, 0x1
0000000000003aae         xor        eax, eax
0000000000003ab0         call       nl_error                                    ; nl_error

                     loc_3ab5:
0000000000003ab5         lea        rsi, qword [aCannotCombineD]                ; argument "msgid" for method j_dcgettext, "cannot combine direct and nocache", CODE XREF=main+1076, main+1098
0000000000003abc         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003ac1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003ac3         call       j_dcgettext                                 ; dcgettext
0000000000003ac8         xor        esi, esi
0000000000003aca         mov        rdx, rax
0000000000003acd         mov        edi, 0x1
0000000000003ad2         xor        eax, eax
0000000000003ad4         call       nl_error                                    ; nl_error

                     loc_3ad9:
0000000000003ad9         mov        rsi, qword [output_file]                    ; output_file, CODE XREF=main+1643
0000000000003ae0         mov        edi, 0x4
0000000000003ae5         call       quotearg_style                              ; quotearg_style
0000000000003aea         lea        rsi, qword [aFailedToOpenS]                 ; argument "msgid" for method j_dcgettext, "failed to open %s"
0000000000003af1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003af6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003af8         mov        rbx, rax
0000000000003afb         call       j_dcgettext                                 ; dcgettext
0000000000003b00         mov        rdx, rax
0000000000003b03         mov        rax, qword [rsp+0x118+var_108]
0000000000003b08         mov        rcx, rbx
0000000000003b0b         mov        edi, 0x1
0000000000003b10         mov        esi, dword [rax]
0000000000003b12         xor        eax, eax
0000000000003b14         call       nl_error                                    ; nl_error

                     loc_3b19:
0000000000003b19         lea        rsi, qword [aOffsetTooLarge]                ; argument "msgid" for method j_dcgettext, "offset too large: cannot truncate to a length of seek=%lu (%lu-byte) blocks", CODE XREF=main+1709
0000000000003b20         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003b25         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003b27         call       j_dcgettext                                 ; dcgettext
0000000000003b2c         mov        r8, r14
0000000000003b2f         mov        rdx, rax
0000000000003b32         mov        rcx, rbp
0000000000003b35         xor        esi, esi
0000000000003b37         mov        edi, 0x1
0000000000003b3c         xor        eax, eax
0000000000003b3e         call       nl_error                                    ; nl_error

                     loc_3b43:
0000000000003b43         mov        rsi, qword [output_file]                    ; output_file, CODE XREF=main+5690
0000000000003b4a         mov        edi, 0x4
0000000000003b4f         call       quotearg_style                              ; quotearg_style
0000000000003b54         lea        rsi, qword [aCannotFstatS]                  ; argument "msgid" for method j_dcgettext, "cannot fstat %s"
0000000000003b5b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003b60         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003b62         mov        rbx, rax
0000000000003b65         call       j_dcgettext                                 ; dcgettext
0000000000003b6a         mov        rdx, rax
0000000000003b6d         mov        rax, qword [rsp+0x118+var_108]
0000000000003b72         mov        rcx, rbx
0000000000003b75         mov        edi, 0x1
0000000000003b7a         mov        esi, dword [rax]
0000000000003b7c         xor        eax, eax
0000000000003b7e         call       nl_error                                    ; nl_error

                     loc_3b83:
0000000000003b83         lea        rdi, qword [aFullblock]                     ; "fullblock", CODE XREF=main+819
0000000000003b8a         call       quote                                       ; quote
0000000000003b8f         lea        rsi, qword [aInvalidOutputF]                ; "invalid output flag"
0000000000003b96         mov        rbx, rax
0000000000003b99         mov        edx, 0x5

                     loc_3b9e:
0000000000003b9e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=main+7594, main+7626
0000000000003ba0         call       j_dcgettext                                 ; dcgettext
0000000000003ba5         lea        rdx, qword [aSS]                            ; "%s: %s"
0000000000003bac         mov        rcx, rax
0000000000003baf         xor        edi, edi
0000000000003bb1         mov        r8, rbx
0000000000003bb4         xor        esi, esi
0000000000003bb6         xor        eax, eax
0000000000003bb8         call       nl_error                                    ; nl_error
0000000000003bbd         mov        edi, 0x1                                    ; argument #1 for method usage
0000000000003bc2         call       usage                                       ; usage

                     loc_3bc7:
0000000000003bc7         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=main+4280
                        ; endp

                     loc_3bcc:
0000000000003bcc         mov        rsi, qword [input_file]                     ; input_file, CODE XREF=main+1466
0000000000003bd3         mov        edi, 0x4
0000000000003bd8         call       quotearg_style                              ; quotearg_style
0000000000003bdd         lea        rsi, qword [aFailedToOpenS]                 ; argument "msgid" for method j_dcgettext, "failed to open %s"
0000000000003be4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003be9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003beb         mov        rbx, rax
0000000000003bee         call       j_dcgettext                                 ; dcgettext
0000000000003bf3         mov        rdx, rax
0000000000003bf6         mov        rax, qword [rsp+0x118+var_108]
0000000000003bfb         mov        rcx, rbx
0000000000003bfe         mov        edi, 0x1
0000000000003c03         mov        esi, dword [rax]
0000000000003c05         xor        eax, eax
0000000000003c07         call       nl_error                                    ; nl_error

                     loc_3c0c:
0000000000003c0c         lea        rsi, qword [aCannotCombineA]                ; argument "msgid" for method j_dcgettext, "cannot combine any two of {ascii,ebcdic,ibm}", CODE XREF=main+1008
0000000000003c13         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003c18         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003c1a         call       j_dcgettext                                 ; dcgettext
0000000000003c1f         xor        esi, esi
0000000000003c21         mov        rdx, rax
0000000000003c24         mov        edi, 0x1
0000000000003c29         xor        eax, eax
0000000000003c2b         call       nl_error                                    ; nl_error

                     loc_3c30:
0000000000003c30         lea        rax, qword [aCountbytes]                    ; "count_bytes", CODE XREF=main+844
0000000000003c37         lea        rdi, qword [aSkipbytes]                     ; "skip_bytes"
0000000000003c3e         and        sil, 0x4
0000000000003c42         cmovne     rdi, rax
0000000000003c46         call       quote                                       ; quote
0000000000003c4b         mov        edx, 0x5
0000000000003c50         mov        rbx, rax
0000000000003c53         lea        rsi, qword [aInvalidOutputF]                ; "invalid output flag"
0000000000003c5a         jmp        loc_3b9e

                     loc_3c5f:
0000000000003c5f         lea        rdi, qword [aSeekbytes]                     ; "seek_bytes", CODE XREF=main+834
0000000000003c66         call       quote                                       ; quote
0000000000003c6b         mov        edx, 0x5
0000000000003c70         mov        rbx, rax
0000000000003c73         lea        rsi, qword [aInvalidInputFl]                ; "invalid input flag"
0000000000003c7a         jmp        loc_3b9e
0000000000003c7f         align      128                                         ; End of unwind block (FDE at 0xf8a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000003c80         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0xf27c)
0000000000003c82         mov        r9, rdx
0000000000003c85         pop        rsi
0000000000003c86         mov        rdx, rsp
0000000000003c89         and        rsp, 0xfffffffffffffff0
0000000000003c8d         push       rax
0000000000003c8e         push       rsp
0000000000003c8f         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000003c96         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
0000000000003c9d         lea        rdi, qword [main]                           ; main
0000000000003ca4         call       qword [qword_210fc8+8]                      ; 0x210fd0
0000000000003caa         hlt
                        ; endp
0000000000003cab         align      16                                          ; End of unwind block (FDE at 0xf27c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000003cb0         lea        rdi, qword [__TMC_END__]                    ; __TMC_END__, CODE XREF=__do_global_dtors_aux+35
0000000000003cb7         push       rbp
0000000000003cb8         lea        rax, qword [__TMC_END__]                    ; __TMC_END__
0000000000003cbf         cmp        rax, rdi
0000000000003cc2         mov        rbp, rsp
0000000000003cc5         je         loc_3ce0

0000000000003cc7         mov        rax, qword [qword_210fc8]                   ; qword_210fc8
0000000000003cce         test       rax, rax
0000000000003cd1         je         loc_3ce0

0000000000003cd3         pop        rbp
0000000000003cd4         jmp        rax
                        ; endp
0000000000003cd6         align      32

                     loc_3ce0:
0000000000003ce0         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000003ce1         ret
                        ; endp
0000000000003ce2         align      16

                     register_tm_clones:
0000000000003cf0         lea        rdi, qword [__TMC_END__]                    ; __TMC_END__, CODE XREF=frame_dummy+5
0000000000003cf7         lea        rsi, qword [__TMC_END__]                    ; __TMC_END__
0000000000003cfe         push       rbp
0000000000003cff         sub        rsi, rdi
0000000000003d02         mov        rbp, rsp
0000000000003d05         sar        rsi, 0x3
0000000000003d09         mov        rax, rsi
0000000000003d0c         shr        rax, 0x3f
0000000000003d10         add        rsi, rax
0000000000003d13         sar        rsi, 0x1
0000000000003d16         je         loc_3d30

0000000000003d18         mov        rax, qword [qword_210fe0]                   ; qword_210fe0
0000000000003d1f         test       rax, rax
0000000000003d22         je         loc_3d30

0000000000003d24         pop        rbp
0000000000003d25         jmp        rax
                        ; endp
0000000000003d27         align      16

                     loc_3d30:
0000000000003d30         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
0000000000003d31         ret
                        ; endp
0000000000003d32         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
0000000000003d40         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
0000000000003d47         jne        loc_3d78

0000000000003d49         cmp        qword [qword_210fe8], 0x0                   ; qword_210fe8
0000000000003d51         push       rbp
0000000000003d52         mov        rbp, rsp
0000000000003d55         je         loc_3d63

0000000000003d57         mov        rdi, qword [__dso_handle]                   ; __dso_handle
0000000000003d5e         call       j_qword_210fe8                              ; qword_210fe8

                     loc_3d63:
0000000000003d63         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
0000000000003d68         mov        byte [completed.7697], 0x1                  ; completed.7697
0000000000003d6f         pop        rbp
0000000000003d70         ret
                        ; endp
0000000000003d71         align      8

                     loc_3d78:
0000000000003d78         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
0000000000003d7a         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000003d80         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000003d81         mov        rbp, rsp
0000000000003d84         pop        rbp
0000000000003d85         jmp        register_tm_clones                          ; register_tm_clones
0000000000003d8a         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     interrupt_handler:
0000000000003d90         mov        dword [interrupt_signal], edi               ; Begin of unwind block (FDE at 0xf2ec), interrupt_signal, DATA XREF=main+331
0000000000003d96         ret
                        ; endp
0000000000003d97         align      32                                          ; End of unwind block (FDE at 0xf2ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     siginfo_handler:
0000000000003da0         mov        eax, dword [info_signal_count]              ; Begin of unwind block (FDE at 0xf300), info_signal_count, DATA XREF=main+270
0000000000003da6         add        eax, 0x1
0000000000003da9         mov        dword [info_signal_count], eax              ; info_signal_count
0000000000003daf         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_58: int8_t, -88
        ;    var_808: int8_t, -2056
        ;    var_810: int64_t, -2064


                     print_xfer_stats:
0000000000003db0         push       r15                                         ; End of unwind block (FDE at 0xf300), Begin of unwind block (FDE at 0xf314), CODE XREF=main+2530, print_stats.part.2+181
0000000000003db2         push       r14
0000000000003db4         mov        r14, rdi
0000000000003db7         push       r13
0000000000003db9         push       r12
0000000000003dbb         push       rbp
0000000000003dbc         push       rbx
0000000000003dbd         mov        rbp, rdi
0000000000003dc0         sub        rsp, 0x7e8
0000000000003dc7         mov        rax, qword [fs:0x28]
0000000000003dd0         mov        qword [rsp+0x818+var_40], rax
0000000000003dd8         xor        eax, eax
0000000000003dda         test       rdi, rdi
0000000000003ddd         je         loc_4030

                     loc_3de3:
0000000000003de3         lea        rbx, qword [rsp+0x818+var_808]              ; CODE XREF=print_xfer_stats+648
0000000000003de8         mov        rdi, qword [w_bytes]                        ; w_bytes
0000000000003def         mov        r8d, 0x1
0000000000003df5         mov        ecx, 0x1
0000000000003dfa         mov        edx, 0x1d1
0000000000003dff         mov        rsi, rbx
0000000000003e02         call       human_readable                              ; human_readable
0000000000003e07         mov        rdi, qword [w_bytes]                        ; w_bytes
0000000000003e0e         lea        rsi, qword [rbx+0x28e]
0000000000003e15         mov        r8d, 0x1
0000000000003e1b         mov        ecx, 0x1
0000000000003e20         mov        edx, 0x1f1
0000000000003e25         mov        r12, rax
0000000000003e28         call       human_readable                              ; human_readable
0000000000003e2d         mov        r13, rax
0000000000003e30         mov        rax, qword [start_time]                     ; start_time
0000000000003e37         cmp        rax, r14
0000000000003e3a         jge        loc_3f88

0000000000003e40         sub        r14, rax
0000000000003e43         mov        r8, r14
0000000000003e46         js         loc_40b0

0000000000003e4c         pxor       xmm0, xmm0
0000000000003e50         cvtsi2sd   xmm0, r14

                     loc_3e55:
0000000000003e55         divsd      xmm0, qword [double_e170]                   ; double_e170, CODE XREF=print_xfer_stats+796
0000000000003e5d         mov        rdi, qword [w_bytes]                        ; w_bytes
0000000000003e64         lea        rsi, qword [rbx+0x51c]
0000000000003e6b         mov        ecx, 0x3b9aca00
0000000000003e70         mov        edx, 0x1d1
0000000000003e75         movsd      qword [rsp+0x818+var_810], xmm0
0000000000003e7b         call       human_readable                              ; human_readable
0000000000003e80         mov        rdi, rax                                    ; argument "__s" for method j_strlen
0000000000003e83         mov        rbx, rax
0000000000003e86         call       j_strlen                                    ; strlen
0000000000003e8b         mov        ecx, 0x732f
0000000000003e90         test       rbp, rbp
0000000000003e93         mov        byte [rbx+rax+2], 0x0
0000000000003e98         mov        word [rbx+rax], cx
0000000000003e9c         movsd      xmm0, qword [rsp+0x818+var_810]
0000000000003ea2         lea        r8, qword [a0fS+7]                          ; 0xc60b
0000000000003ea9         jne        loc_3fd9

                     loc_3eaf:
0000000000003eaf         lea        r14, qword [rsp+0x818+var_58]               ; CODE XREF=print_xfer_stats+547, print_xfer_stats+592, print_xfer_stats+893
0000000000003eb7         mov        ecx, 0x18
0000000000003ebc         mov        edx, 0x1
0000000000003ec1         mov        esi, 0x18
0000000000003ec6         mov        eax, 0x1
0000000000003ecb         mov        rdi, r14
0000000000003ece         call       j___snprintf_chk                            ; __snprintf_chk
0000000000003ed3         mov        rdi, r12                                    ; argument "__s" for method j_strlen
0000000000003ed6         call       j_strlen                                    ; strlen
0000000000003edb         cmp        byte [r12+rax-2], 0x20
0000000000003ee1         je         loc_4060

0000000000003ee7         mov        rdi, r13                                    ; argument "__s" for method j_strlen
0000000000003eea         call       j_strlen                                    ; strlen
0000000000003eef         cmp        byte [r13+rax-2], 0x20
0000000000003ef5         mov        r15, qword [w_bytes]                        ; w_bytes
0000000000003efc         mov        edx, 0x5
0000000000003f01         je         loc_4040

0000000000003f07         lea        rsi, qword [aLuBytesSSCopie]                ; argument "msgid" for method j_dcgettext, "%lu bytes (%s, %s) copied, %s, %s"
0000000000003f0e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003f10         call       j_dcgettext                                 ; dcgettext
0000000000003f15         push       rbx
0000000000003f16         push       r14
0000000000003f18         mov        r9, r13

                     loc_3f1b:
0000000000003f1b         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=print_xfer_stats+678
0000000000003f22         mov        rdx, rax
0000000000003f25         mov        r8, r12
0000000000003f28         mov        rcx, r15
0000000000003f2b         mov        esi, 0x1
0000000000003f30         xor        eax, eax
0000000000003f32         call       j___fprintf_chk                             ; __fprintf_chk
0000000000003f37         mov        ebx, eax
0000000000003f39         pop        rax
0000000000003f3a         pop        rdx

                     loc_3f3b:
0000000000003f3b         test       rbp, rbp                                    ; CODE XREF=print_xfer_stats+758
0000000000003f3e         je         loc_4008

0000000000003f44         test       ebx, ebx
0000000000003f46         js         loc_3f56

0000000000003f48         mov        ecx, dword [progress_len]                   ; progress_len
0000000000003f4e         cmp        ecx, ebx
0000000000003f50         jg         loc_40d8

                     loc_3f56:
0000000000003f56         mov        dword [progress_len], ebx                   ; progress_len, CODE XREF=print_xfer_stats+406, print_xfer_stats+843

                     loc_3f5c:
0000000000003f5c         mov        rax, qword [rsp+0x818+var_40]               ; CODE XREF=print_xfer_stats+632, print_xfer_stats+858
0000000000003f64         xor        rax, qword [fs:0x28]
0000000000003f6d         jne        loc_4132

0000000000003f73         add        rsp, 0x7e8
0000000000003f7a         pop        rbx
0000000000003f7b         pop        rbp
0000000000003f7c         pop        r12
0000000000003f7e         pop        r13
0000000000003f80         pop        r14
0000000000003f82         pop        r15
0000000000003f84         ret
                        ; endp
0000000000003f85         align      8

                     loc_3f88:
0000000000003f88         lea        rsi, qword [aInfinity]                      ; argument "msgid" for method j_dcgettext, "Infinity", CODE XREF=print_xfer_stats+138
0000000000003f8f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003f91         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003f96         add        rbx, 0x51c
0000000000003f9d         call       j_dcgettext                                 ; dcgettext
0000000000003fa2         lea        r8, qword [aSBs]                            ; "%s B/s"
0000000000003fa9         mov        r9, rax
0000000000003fac         mov        ecx, 0x28e
0000000000003fb1         xor        eax, eax
0000000000003fb3         mov        edx, 0x1
0000000000003fb8         mov        esi, 0x28e
0000000000003fbd         mov        rdi, rbx
0000000000003fc0         call       j___snprintf_chk                            ; __snprintf_chk
0000000000003fc5         test       rbp, rbp
0000000000003fc8         pxor       xmm0, xmm0
0000000000003fcc         lea        r8, qword [a0fS+7]                          ; 0xc60b
0000000000003fd3         je         loc_3eaf

                     loc_3fd9:
0000000000003fd9         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=print_xfer_stats+249
0000000000003fe0         mov        rax, qword [rdi+0x28]
0000000000003fe4         cmp        rax, qword [rdi+0x30]
0000000000003fe8         jae        loc_4110

0000000000003fee         lea        rdx, qword [rax+1]
0000000000003ff2         lea        r8, qword [a0fS]                            ; "%.0f s"
0000000000003ff9         mov        qword [rdi+0x28], rdx
0000000000003ffd         mov        byte [rax], 0xd
0000000000004000         jmp        loc_3eaf                                    ; DATA XREF=main+4859, main+5705, set_fd_flags+166, sub_7610+88
0000000000004005         align      8

                     loc_4008:
0000000000004008         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=print_xfer_stats+398
000000000000400f         mov        rax, qword [rdi+0x28]
0000000000004013         cmp        rax, qword [rdi+0x30]
0000000000004017         jae        loc_4100

000000000000401d         lea        rdx, qword [rax+1]
0000000000004021         mov        qword [rdi+0x28], rdx
0000000000004025         mov        byte [rax], 0xa
0000000000004028         jmp        loc_3f5c
000000000000402d         align      16

                     loc_4030:
0000000000004030         call       gethrxtime                                  ; gethrxtime, CODE XREF=print_xfer_stats+45
0000000000004035         mov        r14, rax
0000000000004038         jmp        loc_3de3
000000000000403d         align      64

                     loc_4040:
0000000000004040         lea        rsi, qword [aLuBytesSCopied]                ; argument "msgid" for method j_dcgettext, "%lu bytes (%s) copied, %s, %s", CODE XREF=print_xfer_stats+337
0000000000004047         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004049         call       j_dcgettext                                 ; dcgettext
000000000000404e         sub        rsp, 0x8
0000000000004052         mov        r9, r14
0000000000004055         push       rbx
0000000000004056         jmp        loc_3f1b
000000000000405b         align      32

                     loc_4060:
0000000000004060         mov        r12, qword [w_bytes]                        ; w_bytes, CODE XREF=print_xfer_stats+305
0000000000004067         lea        rdx, qword [aLuBytesCopiedS]                ; argument "__msgid2" for method j_dcngettext, "%lu bytes copied, %s, %s"
000000000000406e         lea        rsi, qword [aLuByteCopiedSS]                ; argument "__msgid1" for method j_dcngettext, "%lu byte copied, %s, %s"
0000000000004075         mov        r8d, 0x5                                    ; argument "__category" for method j_dcngettext
000000000000407b         xor        edi, edi                                    ; argument "__domainname" for method j_dcngettext
000000000000407d         mov        rcx, r12                                    ; argument "__n" for method j_dcngettext
0000000000004080         call       j_dcngettext                                ; dcngettext
0000000000004085         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
000000000000408c         mov        r9, rbx
000000000000408f         mov        rdx, rax
0000000000004092         mov        r8, r14
0000000000004095         mov        rcx, r12
0000000000004098         mov        esi, 0x1
000000000000409d         xor        eax, eax
000000000000409f         call       j___fprintf_chk                             ; __fprintf_chk
00000000000040a4         mov        ebx, eax
00000000000040a6         jmp        loc_3f3b
00000000000040ab         align      16

                     loc_40b0:
00000000000040b0         mov        rax, r14                                    ; CODE XREF=print_xfer_stats+150
00000000000040b3         mov        rdx, r14
00000000000040b6         pxor       xmm0, xmm0
00000000000040ba         shr        rax, 0x1
00000000000040bd         and        edx, 0x1
00000000000040c0         or         rax, rdx
00000000000040c3         cvtsi2sd   xmm0, rax
00000000000040c8         addsd      xmm0, xmm0
00000000000040cc         jmp        loc_3e55
00000000000040d1         align      8

                     loc_40d8:
00000000000040d8         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=print_xfer_stats+416
00000000000040df         lea        r8, qword [aWrittenBySSAnd+27]              ; 0xe7a1
00000000000040e6         lea        rdx, qword [aLuBytesSCopied+30]             ; 0xc66f
00000000000040ed         sub        ecx, ebx
00000000000040ef         mov        esi, 0x1
00000000000040f4         xor        eax, eax
00000000000040f6         call       j___fprintf_chk                             ; __fprintf_chk
00000000000040fb         jmp        loc_3f56

                     loc_4100:
0000000000004100         mov        esi, 0xa                                    ; argument #2 for method j___overflow, CODE XREF=print_xfer_stats+615
0000000000004105         call       j___overflow                                ; __overflow
000000000000410a         jmp        loc_3f5c
000000000000410f         align      16

                     loc_4110:
0000000000004110         mov        esi, 0xd                                    ; argument #2 for method j___overflow, CODE XREF=print_xfer_stats+568
0000000000004115         movsd      qword [rsp+0x818+var_810], xmm0
000000000000411b         call       j___overflow                                ; __overflow
0000000000004120         lea        r8, qword [a0fS]                            ; "%.0f s"
0000000000004127         movsd      xmm0, qword [rsp+0x818+var_810]
000000000000412d         jmp        loc_3eaf

                     loc_4132:
0000000000004132         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=print_xfer_stats+445
                        ; endp
0000000000004137         align      64                                          ; End of unwind block (FDE at 0xf314)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72
        ;    var_58: -88
        ;    var_68: -104
        ;    var_78: -120
        ;    var_88: -136
        ;    var_98: -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_C8: int8_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E4: int32_t, -228
        ;    var_E8: int32_t, -232
        ;    var_F0: int64_t, -240


                     nl_error:
0000000000004140         push       rbp                                         ; Begin of unwind block (FDE at 0xf380), CODE XREF=main+3227, main+3533, main+3681, main+4077, main+4170, main+4610, main+5159, main+5630, main+5778, main+5824, main+6031
0000000000004141         push       rbx
0000000000004142         mov        ebp, esi
0000000000004144         mov        ebx, edi
0000000000004146         sub        rsp, 0xe8
000000000000414d         test       al, al
000000000000414f         mov        qword [rsp+0xf8+var_B0], rcx
0000000000004154         mov        qword [rsp+0xf8+var_A8], r8
0000000000004159         mov        qword [rsp+0xf8+var_A0], r9
000000000000415e         je         loc_419a

0000000000004160         movaps     xmmword [rsp+0xf8+var_98], xmm0
0000000000004165         movaps     xmmword [rsp+0xf8+var_88], xmm1
000000000000416a         movaps     xmmword [rsp+0xf8+var_78], xmm2
0000000000004172         movaps     xmmword [rsp+0xf8+var_68], xmm3
000000000000417a         movaps     xmmword [rsp+0xf8+var_58], xmm4
0000000000004182         movaps     xmmword [rsp+0xf8+var_48], xmm5
000000000000418a         movaps     xmmword [rsp+0xf8+var_38], xmm6
0000000000004192         movaps     xmmword [rsp+0xf8+var_28], xmm7

                     loc_419a:
000000000000419a         mov        rax, qword [fs:0x28]                        ; CODE XREF=nl_error+30
00000000000041a3         mov        qword [rsp+0xf8+var_D0], rax
00000000000041a8         xor        eax, eax
00000000000041aa         mov        eax, dword [progress_len]                   ; progress_len
00000000000041b0         test       eax, eax
00000000000041b2         jle        loc_41da

00000000000041b4         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000041bb         mov        rax, qword [rdi+0x28]
00000000000041bf         cmp        rax, qword [rdi+0x30]
00000000000041c3         jae        loc_4230

00000000000041c5         lea        rcx, qword [rax+1]
00000000000041c9         mov        qword [rdi+0x28], rcx
00000000000041cd         mov        byte [rax], 0xa

                     loc_41d0:
00000000000041d0         mov        dword [progress_len], 0x0                   ; progress_len, CODE XREF=nl_error+260

                     loc_41da:
00000000000041da         lea        rax, qword [rsp+0xf8+arg_0]                 ; CODE XREF=nl_error+114
00000000000041e2         lea        rcx, qword [rsp+0xf8+var_E8]
00000000000041e7         mov        esi, ebp
00000000000041e9         mov        edi, ebx
00000000000041eb         mov        dword [rsp+0xf8+var_E8], 0x18
00000000000041f3         mov        dword [rsp+0xf8+var_E4], 0x30
00000000000041fb         mov        qword [rsp+0xf8+var_E0], rax
0000000000004200         lea        rax, qword [rsp+0xf8+var_C8]
0000000000004205         mov        qword [rsp+0xf8+var_D8], rax
000000000000420a         call       verror                                      ; verror
000000000000420f         mov        rax, qword [rsp+0xf8+var_D0]
0000000000004214         xor        rax, qword [fs:0x28]
000000000000421d         jne        loc_4246

000000000000421f         add        rsp, 0xe8
0000000000004226         pop        rbx
0000000000004227         pop        rbp
0000000000004228         ret
                        ; endp
0000000000004229         align      16

                     loc_4230:
0000000000004230         mov        esi, 0xa                                    ; argument #2 for method j___overflow, CODE XREF=nl_error+131
0000000000004235         mov        qword [rsp+0xf8+var_F0], rdx
000000000000423a         call       j___overflow                                ; __overflow
000000000000423f         mov        rdx, qword [rsp+0xf8+var_F0]
0000000000004244         jmp        loc_41d0

                     loc_4246:
0000000000004246         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=nl_error+221
                        ; endp
000000000000424b         align      16                                          ; End of unwind block (FDE at 0xf380)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64


                     parse_integer:
0000000000004250         push       r13                                         ; Begin of unwind block (FDE at 0xf3ac), CODE XREF=main+5397, parse_integer+143
0000000000004252         push       r12
0000000000004254         lea        r8, qword [aBcegkkmptwyz0]                  ; "bcEGkKMPTwYZ0"
000000000000425b         push       rbp
000000000000425c         push       rbx
000000000000425d         mov        r12, rsi
0000000000004260         mov        edx, 0xa
0000000000004265         mov        rbp, rdi
0000000000004268         sub        rsp, 0x28
000000000000426c         lea        rcx, qword [rsp+0x48+var_40]
0000000000004271         lea        rsi, qword [rsp+0x48+var_38]
0000000000004276         mov        rax, qword [fs:0x28]
000000000000427f         mov        qword [rsp+0x48+var_30], rax
0000000000004284         xor        eax, eax
0000000000004286         call       xstrtoumax                                  ; xstrtoumax
000000000000428b         cmp        eax, 0x2
000000000000428e         mov        edx, eax
0000000000004290         je         loc_42c0

0000000000004292         test       edx, edx
0000000000004294         mov        rax, qword [rsp+0x48+var_40]
0000000000004299         jne        loc_42ca

                     loc_429b:
000000000000429b         mov        rbx, qword [rsp+0x48+var_30]                ; CODE XREF=parse_integer+128, parse_integer+188, parse_integer+236
00000000000042a0         xor        rbx, qword [fs:0x28]
00000000000042a9         jne        loc_4390

00000000000042af         add        rsp, 0x28
00000000000042b3         pop        rbx
00000000000042b4         pop        rbp
00000000000042b5         pop        r12
00000000000042b7         pop        r13
00000000000042b9         ret
                        ; endp
00000000000042ba         align      64

                     loc_42c0:
00000000000042c0         mov        rdi, qword [rsp+0x48+var_38]                ; CODE XREF=parse_integer+64
00000000000042c5         cmp        byte [rdi], 0x78
00000000000042c8         je         loc_42d8

                     loc_42ca:
00000000000042ca         mov        dword [r12], edx                            ; CODE XREF=parse_integer+73
00000000000042ce         xor        eax, eax
00000000000042d0         jmp        loc_429b
00000000000042d2         align      8

                     loc_42d8:
00000000000042d8         add        rdi, 0x1                                    ; CODE XREF=parse_integer+120
00000000000042dc         mov        rsi, r12
00000000000042df         call       parse_integer                               ; parse_integer
00000000000042e4         test       rax, rax
00000000000042e7         mov        rbx, rax
00000000000042ea         je         loc_4310

00000000000042ec         mov        rcx, qword [rsp+0x48+var_40]
00000000000042f1         xor        edx, edx
00000000000042f3         mov        rax, rcx
00000000000042f6         imul       rax, rbx
00000000000042fa         div        rbx
00000000000042fd         cmp        rcx, rax
0000000000004300         je         loc_4315

0000000000004302         mov        dword [r12], 0x1
000000000000430a         xor        eax, eax
000000000000430c         jmp        loc_429b
000000000000430e         align      16

                     loc_4310:
0000000000004310         mov        rax, qword [rsp+0x48+var_40]                ; CODE XREF=parse_integer+154

                     loc_4315:
0000000000004315         test       rax, rax                                    ; CODE XREF=parse_integer+176
0000000000004318         jne        loc_4338

000000000000431a         lea        r12, qword [aBcegkkmptwyz0+15]              ; 0xc682
0000000000004321         mov        ecx, 0x2
0000000000004326         mov        rsi, rbp
0000000000004329         mov        rdi, r12
000000000000432c         rep  cmpsb byte [rsi], byte [rdi]
000000000000432e         seta       dl
0000000000004331         sbb        dl, 0x0
0000000000004334         test       dl, dl
0000000000004336         je         loc_4341

                     loc_4338:
0000000000004338         imul       rax, rbx                                    ; CODE XREF=parse_integer+200, parse_integer+318
000000000000433c         jmp        loc_429b

                     loc_4341:
0000000000004341         lea        rsi, qword [aBcegkkmptwyz0+14]              ; 0xc681, CODE XREF=parse_integer+230
0000000000004348         mov        edi, 0x1
000000000000434d         call       quote_n                                     ; quote_n
0000000000004352         mov        rsi, r12
0000000000004355         xor        edi, edi
0000000000004357         mov        r13, rax
000000000000435a         call       quote_n                                     ; quote_n
000000000000435f         lea        rsi, qword [aWarningSIsAZer]                ; argument "msgid" for method j_dcgettext, "warning: %s is a zero multiplier; use %s if that is intended"
0000000000004366         mov        rbp, rax
0000000000004369         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000436e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004370         call       j_dcgettext                                 ; dcgettext
0000000000004375         mov        r8, r13
0000000000004378         mov        rdx, rax
000000000000437b         mov        rcx, rbp
000000000000437e         xor        eax, eax
0000000000004380         xor        esi, esi
0000000000004382         xor        edi, edi
0000000000004384         call       nl_error                                    ; nl_error
0000000000004389         mov        rax, qword [rsp+0x48+var_40]
000000000000438e         jmp        loc_4338

                     loc_4390:
0000000000004390         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_integer+89
                        ; endp
0000000000004395         align      32                                          ; End of unwind block (FDE at 0xf3ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_B0: int32_t, -176


                     set_fd_flags:
00000000000043a0         push       r13                                         ; Begin of unwind block (FDE at 0xf3e8), CODE XREF=main+5031, main+5893
00000000000043a2         push       r12
00000000000043a4         push       rbp
00000000000043a5         push       rbx
00000000000043a6         mov        ebx, esi
00000000000043a8         sub        rsp, 0xa8
00000000000043af         mov        rax, qword [fs:0x28]
00000000000043b8         mov        qword [rsp+0xc8+var_30], rax
00000000000043c0         xor        eax, eax
00000000000043c2         and        ebx, 0xfffdfeff
00000000000043c8         jne        loc_43ef

                     loc_43ca:
00000000000043ca         mov        rax, qword [rsp+0xc8+var_30]                ; CODE XREF=set_fd_flags+105, set_fd_flags+134, set_fd_flags+262
00000000000043d2         xor        rax, qword [fs:0x28]
00000000000043db         jne        loc_44ab

00000000000043e1         add        rsp, 0xa8
00000000000043e8         pop        rbx
00000000000043e9         pop        rbp
00000000000043ea         pop        r12
00000000000043ec         pop        r13
00000000000043ee         ret
                        ; endp

                     loc_43ef:
00000000000043ef         mov        esi, 0x3                                    ; CODE XREF=set_fd_flags+40
00000000000043f4         mov        ebp, edi
00000000000043f6         mov        r13, rdx
00000000000043f9         call       rpl_fcntl                                   ; rpl_fcntl
00000000000043fe         or         ebx, eax
0000000000004400         test       eax, eax
0000000000004402         mov        r12d, eax
0000000000004405         js         loc_4458

0000000000004407         cmp        eax, ebx
0000000000004409         je         loc_43ca

000000000000440b         test       ebx, 0x10000
0000000000004411         jne        loc_442a

                     loc_4413:
0000000000004413         xor        eax, eax                                    ; CODE XREF=set_fd_flags+256
0000000000004415         mov        edx, ebx
0000000000004417         mov        esi, 0x4
000000000000441c         mov        edi, ebp
000000000000441e         call       rpl_fcntl                                   ; rpl_fcntl
0000000000004423         add        eax, 0x1
0000000000004426         jne        loc_43ca

0000000000004428         jmp        loc_4458

                     loc_442a:
000000000000442a         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___fxstat, CODE XREF=set_fd_flags+113
000000000000442d         mov        esi, ebp                                    ; argument "__fildes" for method j___fxstat
000000000000442f         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
0000000000004434         call       j___fxstat                                  ; __fxstat
0000000000004439         test       eax, eax
000000000000443b         jne        loc_4458

000000000000443d         mov        eax, dword [rsp+0xc8+var_B0]
0000000000004441         and        eax, 0xf000
0000000000004446         cmp        eax, 0x4000
000000000000444b         je         loc_4497

000000000000444d         call       j___errno_location                          ; __errno_location
0000000000004452         mov        dword [rax], 0x14

                     loc_4458:
0000000000004458         mov        rsi, r13                                    ; CODE XREF=set_fd_flags+101, set_fd_flags+136, set_fd_flags+155
000000000000445b         mov        edi, 0x4
0000000000004460         call       quotearg_style                              ; quotearg_style
0000000000004465         lea        rsi, qword [aSettingFlagsFo]                ; argument "msgid" for method j_dcgettext, "setting flags for %s"
000000000000446c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004471         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004473         mov        rbp, rax
0000000000004476         call       j_dcgettext                                 ; dcgettext
000000000000447b         mov        rbx, rax
000000000000447e         call       j___errno_location                          ; __errno_location
0000000000004483         mov        esi, dword [rax]
0000000000004485         mov        rcx, rbp
0000000000004488         mov        rdx, rbx
000000000000448b         mov        edi, 0x1
0000000000004490         xor        eax, eax
0000000000004492         call       nl_error                                    ; nl_error

                     loc_4497:
0000000000004497         and        ebx, 0xfffeffff                             ; CODE XREF=set_fd_flags+171
000000000000449d         cmp        ebx, r12d
00000000000044a0         jne        loc_4413

00000000000044a6         jmp        loc_43ca

                     loc_44ab:
00000000000044ab         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=set_fd_flags+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_90: int64_t, -144


                     skip_via_lseek:
00000000000044b0         push       r14                                         ; End of unwind block (FDE at 0xf3e8), Begin of unwind block (FDE at 0xf424), CODE XREF=main+4554, skip+112, skip+208, skip+425
00000000000044b2         push       r13
00000000000044b4         mov        r13, rdi
00000000000044b7         push       r12
00000000000044b9         push       rbp
00000000000044ba         mov        r12d, ecx
00000000000044bd         push       rbx
00000000000044be         mov        ebx, esi
00000000000044c0         mov        rbp, rdx
00000000000044c3         mov        esi, 0x80306d02                             ; argument "__request" for method j_ioctl
00000000000044c8         mov        edi, ebx                                    ; argument "__fd" for method j_ioctl
00000000000044ca         sub        rsp, 0x70
00000000000044ce         mov        rax, qword [fs:0x28]
00000000000044d7         mov        qword [rsp+0x98+var_30], rax
00000000000044dc         xor        eax, eax
00000000000044de         mov        rdx, rsp
00000000000044e1         call       j_ioctl                                     ; ioctl
00000000000044e6         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
00000000000044e9         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
00000000000044ec         mov        edi, ebx                                    ; argument "__fd" for method j_lseek
00000000000044ee         mov        r14d, eax
00000000000044f1         call       j_lseek                                     ; lseek
00000000000044f6         test       rax, rax
00000000000044f9         mov        rbp, rax
00000000000044fc         js         loc_4538

00000000000044fe         test       r14d, r14d
0000000000004501         jne        loc_4538

0000000000004503         lea        rdx, qword [rsp+0x98+var_68]
0000000000004508         xor        eax, eax
000000000000450a         mov        esi, 0x80306d02                             ; argument "__request" for method j_ioctl
000000000000450f         mov        edi, ebx                                    ; argument "__fd" for method j_ioctl
0000000000004511         call       j_ioctl                                     ; ioctl
0000000000004516         test       eax, eax
0000000000004518         jne        loc_4538

000000000000451a         mov        rax, qword [rsp+0x98+var_60]
000000000000451f         cmp        qword [rsp+0x98+var_90], rax
0000000000004524         jne        loc_4538

0000000000004526         mov        rax, qword [rsp+0x98+var_40]
000000000000452b         cmp        qword [rsp+0x98+var_70], rax
0000000000004530         je         loc_4558

0000000000004532         nop        word [rax+rax]

                     loc_4538:
0000000000004538         mov        rcx, qword [rsp+0x98+var_30]                ; CODE XREF=skip_via_lseek+76, skip_via_lseek+81, skip_via_lseek+104, skip_via_lseek+116, skip_via_lseek+236
000000000000453d         xor        rcx, qword [fs:0x28]
0000000000004546         mov        rax, rbp
0000000000004549         jne        loc_459e

000000000000454b         add        rsp, 0x70
000000000000454f         pop        rbx
0000000000004550         pop        rbp
0000000000004551         pop        r12
0000000000004553         pop        r13
0000000000004555         pop        r14
0000000000004557         ret
                        ; endp

                     loc_4558:
0000000000004558         cmp        dword [status_level], 0x1                   ; status_level, CODE XREF=skip_via_lseek+128
000000000000455f         je         loc_458d

0000000000004561         mov        rbx, qword [rsp+0x98+var_68]
0000000000004566         lea        rsi, qword [aWarningWorking]                ; argument "msgid" for method j_dcgettext, "warning: working around lseek kernel bug for file (%s)\\n  of mt_type=0x%0lx -- see <sys/mtio.h> for the list of types"
000000000000456d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004572         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004574         call       j_dcgettext                                 ; dcgettext
0000000000004579         mov        r8, rbx
000000000000457c         mov        rdx, rax
000000000000457f         mov        rcx, r13
0000000000004582         xor        esi, esi
0000000000004584         xor        edi, edi
0000000000004586         xor        eax, eax
0000000000004588         call       nl_error                                    ; nl_error

                     loc_458d:
000000000000458d         call       j___errno_location                          ; __errno_location, CODE XREF=skip_via_lseek+175
0000000000004592         or         rbp, 0xffffffffffffffff
0000000000004596         mov        dword [rax], 0x0
000000000000459c         jmp        loc_4538

                     loc_459e:
000000000000459e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=skip_via_lseek+153
                        ; endp
00000000000045a3         align      16                                          ; End of unwind block (FDE at 0xf424)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     invalidate_cache:
00000000000045b0         push       r15                                         ; Begin of unwind block (FDE at 0xf468), CODE XREF=main+3587, main+3978, main+4219, main+4249, main+5088, main+5559, iwrite.constprop.7+328, iwrite.constprop.7+418
00000000000045b2         push       r14
00000000000045b4         push       r13
00000000000045b6         push       r12
00000000000045b8         push       rbp
00000000000045b9         push       rbx
00000000000045ba         sub        rsp, 0x8
00000000000045be         test       edi, edi
00000000000045c0         jne        loc_4650

00000000000045c6         movzx      r15d, byte [i_nocache_eof]                  ; i_nocache_eof
00000000000045ce         lea        rax, qword [i_pending.7166]                 ; i_pending.7166

                     loc_45d5:
00000000000045d5         test       rsi, rsi                                    ; CODE XREF=invalidate_cache+175
00000000000045d8         mov        rbx, qword [rax]
00000000000045db         je         loc_4610

00000000000045dd         add        rbx, rsi
00000000000045e0         mov        r14, rbx
00000000000045e3         and        r14d, 0x1ffff
00000000000045ea         cmp        rbx, r14
00000000000045ed         mov        qword [rax], r14
00000000000045f0         ja         loc_4668

                     loc_45f2:
00000000000045f2         mov        r12d, 0x1                                   ; CODE XREF=invalidate_cache+104, invalidate_cache+187

                     loc_45f8:
00000000000045f8         add        rsp, 0x8                                    ; CODE XREF=invalidate_cache+150, invalidate_cache+206, invalidate_cache+242, invalidate_cache+306
00000000000045fc         mov        eax, r12d
00000000000045ff         pop        rbx
0000000000004600         pop        rbp
0000000000004601         pop        r12
0000000000004603         pop        r13
0000000000004605         pop        r14
0000000000004607         pop        r15
0000000000004609         ret
                        ; endp
000000000000460a         align      16

                     loc_4610:
0000000000004610         test       rbx, rbx                                    ; CODE XREF=invalidate_cache+43
0000000000004613         jne        loc_461a

0000000000004615         test       r15b, r15b
0000000000004618         je         loc_45f2

                     loc_461a:
000000000000461a         xor        r14d, r14d                                  ; CODE XREF=invalidate_cache+99

                     loc_461d:
000000000000461d         test       edi, edi                                    ; CODE XREF=invalidate_cache+189
000000000000461f         mov        rbp, rsi
0000000000004622         mov        r13d, edi
0000000000004625         jne        loc_4670

0000000000004627         movzx      r12d, byte [input_seekable]                 ; input_seekable
000000000000462f         mov        rsi, qword [input_offset]                   ; input_offset
0000000000004636         test       r12b, r12b
0000000000004639         jne        loc_469c

000000000000463b         call       j___errno_location                          ; __errno_location
0000000000004640         mov        dword [rax], 0x1d
0000000000004646         jmp        loc_45f8
0000000000004648         align      16

                     loc_4650:
0000000000004650         movzx      r15d, byte [o_nocache_eof]                  ; o_nocache_eof, CODE XREF=invalidate_cache+16
0000000000004658         lea        rax, qword [o_pending.7167]                 ; o_pending.7167
000000000000465f         jmp        loc_45d5
0000000000004664         align      8

                     loc_4668:
0000000000004668         sub        rbx, r14                                    ; CODE XREF=invalidate_cache+64
000000000000466b         je         loc_45f2

000000000000466d         jmp        loc_461d
000000000000466f         align      16

                     loc_4670:
0000000000004670         mov        rsi, qword [output_offset.7179]             ; output_offset.7179, CODE XREF=invalidate_cache+117
0000000000004677         xor        r12d, r12d
000000000000467a         cmp        rsi, 0xffffffffffffffff
000000000000467e         je         loc_45f8

0000000000004684         test       rsi, rsi
0000000000004687         js         loc_4708

0000000000004689         test       rbp, rbp
000000000000468c         je         loc_46a8

000000000000468e         lea        rax, qword [r14+rbx]
0000000000004692         add        rsi, rax
0000000000004695         mov        qword [output_offset.7179], rsi             ; output_offset.7179

                     loc_469c:
000000000000469c         xor        r12d, r12d                                  ; CODE XREF=invalidate_cache+137, invalidate_cache+371
000000000000469f         test       rsi, rsi
00000000000046a2         js         loc_45f8

                     loc_46a8:
00000000000046a8         sub        rsi, rbx                                    ; CODE XREF=invalidate_cache+220
00000000000046ab         test       rbp, rbp
00000000000046ae         jne        loc_46f0

00000000000046b0         test       rbx, rbx
00000000000046b3         je         loc_46f0

00000000000046b5         test       r15b, r15b
00000000000046b8         je         loc_4700

                     loc_46ba:
00000000000046ba         mov        rax, rsi                                    ; CODE XREF=invalidate_cache+328
00000000000046bd         xor        edx, edx
00000000000046bf         xor        ebx, ebx
00000000000046c1         div        qword [page_size]                           ; page_size
00000000000046c8         sub        rsi, rdx

                     loc_46cb:
00000000000046cb         mov        ecx, 0x4                                    ; argument "__advise" for method j_posix_fadvise, CODE XREF=invalidate_cache+326, invalidate_cache+339
00000000000046d0         mov        rdx, rbx                                    ; argument "__len" for method j_posix_fadvise
00000000000046d3         mov        edi, r13d                                   ; argument "__fd" for method j_posix_fadvise
00000000000046d6         call       j_posix_fadvise                             ; posix_fadvise
00000000000046db         cmp        eax, 0xffffffff
00000000000046de         setne      r12b
00000000000046e2         jmp        loc_45f8
00000000000046e7         align      16

                     loc_46f0:
00000000000046f0         sub        rsi, r14                                    ; CODE XREF=invalidate_cache+254, invalidate_cache+259
00000000000046f3         test       rbx, rbx
00000000000046f6         jne        loc_46cb

00000000000046f8         jmp        loc_46ba
00000000000046fa         align      256

                     loc_4700:
0000000000004700         sub        rsi, r14                                    ; CODE XREF=invalidate_cache+264
0000000000004703         jmp        loc_46cb
0000000000004705         align      8

                     loc_4708:
0000000000004708         xor        esi, esi                                    ; argument "__offset" for method j_lseek, CODE XREF=invalidate_cache+215
000000000000470a         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
000000000000470f         mov        edi, 0x1                                    ; argument "__fd" for method j_lseek
0000000000004714         call       j_lseek                                     ; lseek
0000000000004719         mov        rsi, rax
000000000000471c         mov        qword [output_offset.7179], rax             ; output_offset.7179
0000000000004723         jmp        loc_469c
0000000000004728         align      16                                          ; End of unwind block (FDE at 0xf468)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     maybe_close_stdout:
0000000000004730         cmp        byte [close_stdout_required], 0x0           ; Begin of unwind block (FDE at 0xf4b4), close_stdout_required, DATA XREF=main+430
0000000000004737         jne        j_close_stdout                              ; close_stdout

0000000000004739         sub        rsp, 0x8
000000000000473d         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000004744         call       close_stream                                ; close_stream
0000000000004749         test       eax, eax
000000000000474b         jne        loc_475d

000000000000474d         add        rsp, 0x8
0000000000004751         ret
                        ; endp
0000000000004752         align      8

                     j_close_stdout:        // close_stdout
0000000000004758         jmp        close_stdout                                ; close_stdout, CODE XREF=maybe_close_stdout+7

                     loc_475d:
000000000000475d         mov        edi, 0x1                                    ; argument "__status" for method j__exit, CODE XREF=maybe_close_stdout+27
0000000000004762         call       j__exit                                     ; _exit
                        ; endp
0000000000004767         align      16                                          ; End of unwind block (FDE at 0xf4b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     print_stats.part.2:
0000000000004770         push       r13                                         ; Begin of unwind block (FDE at 0xf4d0), CODE XREF=main+3565, process_signals+122, process_signals+150, finish_up+18, skip+698
0000000000004772         push       r12
0000000000004774         push       rbp
0000000000004775         push       rbx
0000000000004776         sub        rsp, 0x8
000000000000477a         mov        ecx, dword [progress_len]                   ; progress_len
0000000000004780         test       ecx, ecx
0000000000004782         jle        loc_47ae

0000000000004784         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
000000000000478b         mov        rax, qword [rdi+0x28]
000000000000478f         cmp        rax, qword [rdi+0x30]
0000000000004793         jae        loc_4880

0000000000004799         lea        rdx, qword [rax+1]
000000000000479d         mov        qword [rdi+0x28], rdx
00000000000047a1         mov        byte [rax], 0xa

                     loc_47a4:
00000000000047a4         mov        dword [progress_len], 0x0                   ; progress_len, CODE XREF=print_stats.part.2+282

                     loc_47ae:
00000000000047ae         mov        r13, qword [w_partial]                      ; w_partial, CODE XREF=print_stats.part.2+18
00000000000047b5         lea        rsi, qword [aLuluRecordsInn]                ; argument "msgid" for method j_dcgettext, "%lu+%lu records in\\n%lu+%lu records out\\n"
00000000000047bc         mov        rbx, qword [r_full]                         ; r_full
00000000000047c3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000047c5         mov        r12, qword [w_full]                         ; w_full
00000000000047cc         mov        rbp, qword [r_partial]                      ; r_partial
00000000000047d3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000047d8         call       j_dcgettext                                 ; dcgettext
00000000000047dd         sub        rsp, 0x8
00000000000047e1         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000047e8         mov        rdx, rax
00000000000047eb         push       r13
00000000000047ed         mov        rcx, rbx
00000000000047f0         xor        eax, eax
00000000000047f2         mov        r9, r12
00000000000047f5         mov        r8, rbp
00000000000047f8         mov        esi, 0x1
00000000000047fd         call       j___fprintf_chk                             ; __fprintf_chk
0000000000004802         mov        rbx, qword [r_truncate]                     ; r_truncate
0000000000004809         pop        rax
000000000000480a         pop        rdx
000000000000480b         test       rbx, rbx
000000000000480e         jne        loc_4840

                     loc_4810:
0000000000004810         cmp        dword [status_level], 0x2                   ; status_level, CODE XREF=print_stats.part.2+263
0000000000004817         je         loc_4830

0000000000004819         add        rsp, 0x8
000000000000481d         xor        edi, edi
000000000000481f         pop        rbx
0000000000004820         pop        rbp
0000000000004821         pop        r12
0000000000004823         pop        r13
0000000000004825         jmp        print_xfer_stats                            ; print_xfer_stats
                        ; endp
000000000000482a         align      16

                     loc_4830:
0000000000004830         add        rsp, 0x8                                    ; CODE XREF=print_stats.part.2+167
0000000000004834         pop        rbx
0000000000004835         pop        rbp
0000000000004836         pop        r12
0000000000004838         pop        r13
000000000000483a         ret
                        ; endp
000000000000483b         align      64

                     loc_4840:
0000000000004840         lea        rdx, qword [aLuTruncatedRec]                ; argument "__msgid2" for method j_dcngettext, "%lu truncated records\\n", CODE XREF=print_stats.part.2+158
0000000000004847         lea        rsi, qword [aLuTruncatedRec_c6b1]           ; argument "__msgid1" for method j_dcngettext, "%lu truncated record\\n"
000000000000484e         mov        rcx, rbx                                    ; argument "__n" for method j_dcngettext
0000000000004851         xor        edi, edi                                    ; argument "__domainname" for method j_dcngettext
0000000000004853         mov        r8d, 0x5                                    ; argument "__category" for method j_dcngettext
0000000000004859         call       j_dcngettext                                ; dcngettext
000000000000485e         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000004865         mov        rdx, rax
0000000000004868         mov        rcx, rbx
000000000000486b         mov        esi, 0x1
0000000000004870         xor        eax, eax
0000000000004872         call       j___fprintf_chk                             ; __fprintf_chk
0000000000004877         jmp        loc_4810
0000000000004879         align      128

                     loc_4880:
0000000000004880         mov        esi, 0xa                                    ; argument #2 for method j___overflow, CODE XREF=print_stats.part.2+35
0000000000004885         call       j___overflow                                ; __overflow
000000000000488a         jmp        loc_47a4
000000000000488f         align      16                                          ; End of unwind block (FDE at 0xf4d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_38: int64_t, -56


                     cleanup:
0000000000004890         push       rbp                                         ; Begin of unwind block (FDE at 0xf52c), CODE XREF=loc_49c8, finish_up+4
0000000000004891         push       rbx
0000000000004892         xor        edi, edi                                    ; argument "__fd" for method j_close
0000000000004894         sub        rsp, 0x8
0000000000004898         call       j_close                                     ; close
000000000000489d         test       eax, eax
000000000000489f         js         loc_48b6

00000000000048a1         mov        edi, 0x1                                    ; argument "__fd" for method j_close
00000000000048a6         call       j_close                                     ; close
00000000000048ab         test       eax, eax
00000000000048ad         js         loc_48f9

00000000000048af         add        rsp, 0x8
00000000000048b3         pop        rbx
00000000000048b4         pop        rbp
00000000000048b5         ret
                        ; endp

                     loc_48b6:
00000000000048b6         mov        rsi, qword [input_file]                     ; input_file, CODE XREF=cleanup+15
00000000000048bd         mov        edi, 0x4
00000000000048c2         call       quotearg_style                              ; quotearg_style
00000000000048c7         lea        rsi, qword [aClosingInputFi]                ; argument "msgid" for method j_dcgettext, "closing input file %s"
00000000000048ce         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000048d3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000048d5         mov        rbp, rax
00000000000048d8         call       j_dcgettext                                 ; dcgettext
00000000000048dd         mov        rbx, rax
00000000000048e0         call       j___errno_location                          ; __errno_location
00000000000048e5         mov        esi, dword [rax]
00000000000048e7         mov        rcx, rbp
00000000000048ea         mov        rdx, rbx
00000000000048ed         mov        edi, 0x1
00000000000048f2         xor        eax, eax
00000000000048f4         call       nl_error                                    ; nl_error

                     loc_48f9:
00000000000048f9         mov        rsi, qword [output_file]                    ; output_file, CODE XREF=cleanup+29
0000000000004900         mov        edi, 0x4
0000000000004905         call       quotearg_style                              ; quotearg_style
000000000000490a         lea        rsi, qword [aClosingOutputF]                ; argument "msgid" for method j_dcgettext, "closing output file %s"
0000000000004911         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004916         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004918         mov        rbp, rax
000000000000491b         call       j_dcgettext                                 ; dcgettext
0000000000004920         mov        rbx, rax
0000000000004923         call       j___errno_location                          ; __errno_location
0000000000004928         mov        esi, dword [rax]
000000000000492a         mov        rcx, rbp
000000000000492d         mov        rdx, rbx
0000000000004930         mov        edi, 0x1
0000000000004935         xor        eax, eax
0000000000004937         call       nl_error                                    ; nl_error
000000000000493c         nop        dword [rax]                                 ; End of unwind block (FDE at 0xf52c)
                     process_signals:
0000000000004940         push       rbp                                         ; Begin of unwind block (FDE at 0xf558), CODE XREF=ifd_reopen+34, iread+46, iread+151, finish_up+27, iftruncate.constprop.6+26, iwrite.constprop.7+70
0000000000004941         push       rbx
0000000000004942         sub        rsp, 0x98
0000000000004949         mov        rax, qword [fs:0x28]
0000000000004952         mov        qword [rsp+0xc0+var_38], rax
000000000000495a         xor        eax, eax
000000000000495c         mov        rbp, rsp
000000000000495f         nop

                     loc_4960:
0000000000004960         mov        eax, dword [interrupt_signal]               ; interrupt_signal, CODE XREF=process_signals+120, process_signals+127, process_signals+162
0000000000004966         test       eax, eax
0000000000004968         jne        loc_4974

000000000000496a         mov        eax, dword [info_signal_count]              ; info_signal_count
0000000000004970         test       eax, eax
0000000000004972         je         loc_49f0

                     loc_4974:
0000000000004974         lea        rsi, qword [caught_signals]                 ; argument "__set" for method j_sigprocmask, caught_signals, CODE XREF=process_signals+40
000000000000497b         xor        edi, edi                                    ; argument "__how" for method j_sigprocmask
000000000000497d         mov        rdx, rbp                                    ; argument "__oset" for method j_sigprocmask
0000000000004980         call       j_sigprocmask                               ; sigprocmask
0000000000004985         mov        ebx, dword [interrupt_signal]               ; interrupt_signal
000000000000498b         mov        eax, dword [info_signal_count]              ; info_signal_count
0000000000004991         test       eax, eax
0000000000004993         je         loc_499e

0000000000004995         sub        eax, 0x1
0000000000004998         mov        dword [info_signal_count], eax              ; info_signal_count

                     loc_499e:
000000000000499e         xor        edx, edx                                    ; argument "__oset" for method j_sigprocmask, CODE XREF=process_signals+83
00000000000049a0         mov        rsi, rbp                                    ; argument "__set" for method j_sigprocmask
00000000000049a3         mov        edi, 0x2                                    ; argument "__how" for method j_sigprocmask
00000000000049a8         call       j_sigprocmask                               ; sigprocmask
00000000000049ad         test       ebx, ebx
00000000000049af         jne        loc_49c8

00000000000049b1         cmp        dword [status_level], 0x1                   ; status_level
00000000000049b8         je         loc_4960

00000000000049ba         call       print_stats.part.2                          ; print_stats.part.2
00000000000049bf         jmp        loc_4960
00000000000049c1         align      8

                     loc_49c8:
00000000000049c8         call       cleanup                                     ; cleanup, CODE XREF=process_signals+111
00000000000049cd         cmp        dword [status_level], 0x1                   ; status_level
00000000000049d4         je         loc_49db

00000000000049d6         call       print_stats.part.2                          ; print_stats.part.2

                     loc_49db:
00000000000049db         mov        edi, ebx                                    ; argument "__sig" for method j_raise, CODE XREF=process_signals+148
00000000000049dd         call       j_raise                                     ; raise
00000000000049e2         jmp        loc_4960
00000000000049e7         align      16

                     loc_49f0:
00000000000049f0         mov        rax, qword [rsp+0xc0+var_38]                ; CODE XREF=process_signals+50
00000000000049f8         xor        rax, qword [fs:0x28]
0000000000004a01         jne        loc_4a0d

0000000000004a03         add        rsp, 0x98
0000000000004a0a         pop        rbx
0000000000004a0b         pop        rbp
0000000000004a0c         ret
                        ; endp

                     loc_4a0d:
0000000000004a0d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=process_signals+193
                        ; endp
0000000000004a12         align      32                                          ; End of unwind block (FDE at 0xf558)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     ifd_reopen:
0000000000004a20         push       r14                                         ; Begin of unwind block (FDE at 0xf584), CODE XREF=main+1459, main+1636, main+4635
0000000000004a22         mov        r14d, edi
0000000000004a25         push       r13
0000000000004a27         mov        r13, rsi
0000000000004a2a         push       r12
0000000000004a2c         mov        r12d, edx
0000000000004a2f         push       rbp
0000000000004a30         mov        ebp, ecx
0000000000004a32         push       rbx
0000000000004a33         jmp        loc_4a42
0000000000004a35         align      8

                     loc_4a38:
0000000000004a38         call       j___errno_location                          ; __errno_location, CODE XREF=ifd_reopen+59
0000000000004a3d         cmp        dword [rax], 0x4
0000000000004a40         jne        loc_4a5d

                     loc_4a42:
0000000000004a42         call       process_signals                             ; process_signals, CODE XREF=ifd_reopen+19
0000000000004a47         mov        ecx, ebp
0000000000004a49         mov        edx, r12d
0000000000004a4c         mov        rsi, r13
0000000000004a4f         mov        edi, r14d
0000000000004a52         call       fd_reopen                                   ; fd_reopen
0000000000004a57         test       eax, eax
0000000000004a59         mov        ebx, eax
0000000000004a5b         js         loc_4a38

                     loc_4a5d:
0000000000004a5d         mov        eax, ebx                                    ; CODE XREF=ifd_reopen+32
0000000000004a5f         pop        rbx
0000000000004a60         pop        rbp
0000000000004a61         pop        r12
0000000000004a63         pop        r13
0000000000004a65         pop        r14
0000000000004a67         ret
                        ; endp
0000000000004a68         align      16                                          ; End of unwind block (FDE at 0xf584)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     iread:
0000000000004a70         push       r13                                         ; Begin of unwind block (FDE at 0xf5c0), CODE XREF=iread_fullblock+54, DATA XREF=main+3099, main+3149, main+4445
0000000000004a72         push       r12
0000000000004a74         mov        r13d, edi
0000000000004a77         push       rbp
0000000000004a78         push       rbx
0000000000004a79         mov        r12, rsi
0000000000004a7c         mov        rbp, rdx
0000000000004a7f         sub        rsp, 0x8
0000000000004a83         jmp        loc_4a9e
0000000000004a85         align      8

                     loc_4a88:
0000000000004a88         cmp        rax, 0x0                                    ; CODE XREF=iread+72
0000000000004a8c         jge        loc_4b00

0000000000004a8e         call       j___errno_location                          ; __errno_location
0000000000004a93         mov        edx, dword [rax]

                     loc_4a95:
0000000000004a95         cmp        edx, 0x4                                    ; CODE XREF=iread+84
0000000000004a98         jne        loc_4b6a

                     loc_4a9e:
0000000000004a9e         call       process_signals                             ; process_signals, CODE XREF=iread+19
0000000000004aa3         mov        rdx, rbp                                    ; argument "__nbytes" for method j_read
0000000000004aa6         mov        rsi, r12                                    ; argument "__buf" for method j_read
0000000000004aa9         mov        edi, r13d                                   ; argument "__fd" for method j_read
0000000000004aac         call       j_read                                      ; read
0000000000004ab1         cmp        rax, 0xffffffffffffffff
0000000000004ab5         mov        rbx, rax
0000000000004ab8         jne        loc_4a88

0000000000004aba         call       j___errno_location                          ; __errno_location
0000000000004abf         mov        edx, dword [rax]
0000000000004ac1         cmp        edx, 0x16
0000000000004ac4         jne        loc_4a95

0000000000004ac6         mov        rdx, qword [prev_nread.7186]                ; prev_nread.7186
0000000000004acd         test       rdx, rdx
0000000000004ad0         jle        loc_4ae4

0000000000004ad2         cmp        rdx, rbp
0000000000004ad5         jae        loc_4ae4

0000000000004ad7         test       byte [byte_211389], 0x40                    ; byte_211389
0000000000004ade         jne        loc_4b78

                     loc_4ae4:
0000000000004ae4         mov        qword [prev_nread.7186], rbx                ; prev_nread.7186, CODE XREF=iread+96, iread+101, iread+163, iread+175, iread+180, iread+245, iread+255, iread+272
0000000000004aeb         add        rsp, 0x8
0000000000004aef         mov        rax, rbx
0000000000004af2         pop        rbx
0000000000004af3         pop        rbp
0000000000004af4         pop        r12
0000000000004af6         pop        r13
0000000000004af8         ret
                        ; endp
0000000000004af9         align      256

                     loc_4b00:
0000000000004b00         jle        loc_4b6a                                    ; CODE XREF=iread+28

0000000000004b02         cmp        rax, rbp
0000000000004b05         jae        loc_4b6a

0000000000004b07         call       process_signals                             ; process_signals

                     loc_4b0c:
0000000000004b0c         cmp        byte [warn_partial_read], 0x0               ; warn_partial_read, CODE XREF=iread+253
0000000000004b13         je         loc_4ae4

0000000000004b15         mov        r12, qword [prev_nread.7186]                ; prev_nread.7186
0000000000004b1c         test       r12, r12
0000000000004b1f         jle        loc_4ae4

0000000000004b21         cmp        r12, rbp
0000000000004b24         jae        loc_4ae4

0000000000004b26         cmp        dword [status_level], 0x1                   ; status_level
0000000000004b2d         je         loc_4b5e

0000000000004b2f         lea        rdx, qword [aWarningPartial]                ; argument "__msgid2" for method j_dcngettext, "warning: partial read (%lu bytes); suggest iflag=fullblock"
0000000000004b36         lea        rsi, qword [aWarningPartial_cad0]           ; argument "__msgid1" for method j_dcngettext, "warning: partial read (%lu byte); suggest iflag=fullblock"
0000000000004b3d         mov        rcx, r12                                    ; argument "__n" for method j_dcngettext
0000000000004b40         xor        edi, edi                                    ; argument "__domainname" for method j_dcngettext
0000000000004b42         mov        r8d, 0x5                                    ; argument "__category" for method j_dcngettext
0000000000004b48         call       j_dcngettext                                ; dcngettext
0000000000004b4d         mov        rcx, r12
0000000000004b50         mov        rdx, rax
0000000000004b53         xor        esi, esi
0000000000004b55         xor        edi, edi
0000000000004b57         xor        eax, eax
0000000000004b59         call       nl_error                                    ; nl_error

                     loc_4b5e:
0000000000004b5e         mov        byte [warn_partial_read], 0x0               ; warn_partial_read, CODE XREF=iread+189
0000000000004b65         jmp        loc_4ae4

                     loc_4b6a:
0000000000004b6a         test       rbx, rbx                                    ; CODE XREF=iread+40, loc_4b00, iread+149
0000000000004b6d         jg         loc_4b0c

0000000000004b6f         jmp        loc_4ae4
0000000000004b74         align      8

                     loc_4b78:
0000000000004b78         mov        dword [rax], 0x0                            ; CODE XREF=iread+110
0000000000004b7e         xor        ebx, ebx
0000000000004b80         jmp        loc_4ae4
0000000000004b85         align      16                                          ; End of unwind block (FDE at 0xf5c0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     iread_fullblock:
0000000000004b90         test       rdx, rdx                                    ; Begin of unwind block (FDE at 0xf5fc), DATA XREF=main+966, main+4438
0000000000004b93         je         loc_4bee

0000000000004b95         push       r13
0000000000004b97         push       r12
0000000000004b99         mov        r13d, edi
0000000000004b9c         push       rbp
0000000000004b9d         push       rbx
0000000000004b9e         mov        rbp, rsi
0000000000004ba1         mov        rbx, rdx
0000000000004ba4         xor        r12d, r12d
0000000000004ba7         sub        rsp, 0x8
0000000000004bab         jmp        loc_4bbd
0000000000004bad         align      16

                     loc_4bb0:
0000000000004bb0         je         loc_4be0                                    ; CODE XREF=iread_fullblock+62

0000000000004bb2         add        r12, rax
0000000000004bb5         add        rbp, rax
0000000000004bb8         sub        rbx, rax
0000000000004bbb         je         loc_4be0

                     loc_4bbd:
0000000000004bbd         mov        rdx, rbx                                    ; CODE XREF=iread_fullblock+27
0000000000004bc0         mov        rsi, rbp
0000000000004bc3         mov        edi, r13d
0000000000004bc6         call       iread                                       ; iread
0000000000004bcb         test       rax, rax
0000000000004bce         jns        loc_4bb0

0000000000004bd0         add        rsp, 0x8
0000000000004bd4         pop        rbx
0000000000004bd5         pop        rbp
0000000000004bd6         pop        r12
0000000000004bd8         pop        r13
0000000000004bda         ret
                        ; endp
0000000000004bdb         align      32

                     loc_4be0:
0000000000004be0         add        rsp, 0x8                                    ; CODE XREF=loc_4bb0, iread_fullblock+43
0000000000004be4         mov        rax, r12
0000000000004be7         pop        rbx
0000000000004be8         pop        rbp
0000000000004be9         pop        r12
0000000000004beb         pop        r13
0000000000004bed         ret
                        ; endp

                     loc_4bee:
0000000000004bee         xor        eax, eax                                    ; CODE XREF=iread_fullblock+3
0000000000004bf0         ret
                        ; endp
0000000000004bf1         align      1024                                        ; End of unwind block (FDE at 0xf5fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     finish_up:
0000000000004c00         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xf64c), CODE XREF=main+4254, main+6887, skip+703, write_output+143
0000000000004c04         call       cleanup                                     ; cleanup
0000000000004c09         cmp        dword [status_level], 0x1                   ; status_level
0000000000004c10         je         loc_4c17

0000000000004c12         call       print_stats.part.2                          ; print_stats.part.2

                     loc_4c17:
0000000000004c17         add        rsp, 0x8                                    ; CODE XREF=finish_up+16
0000000000004c1b         jmp        process_signals                             ; process_signals
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32


                     alloc_ibuf.part.4:
0000000000004c20         push       rbp                                         ; End of unwind block (FDE at 0xf64c), Begin of unwind block (FDE at 0xf664), CODE XREF=main+6036, j_alloc_obuf.part.5+9, skip+593
0000000000004c21         push       rbx
0000000000004c22         sub        rsp, 0x2a8
0000000000004c29         mov        rbx, qword [page_size]                      ; page_size
0000000000004c30         mov        rbp, qword [input_blocksize]                ; input_blocksize
0000000000004c37         mov        rax, qword [fs:0x28]
0000000000004c40         mov        qword [rsp+0x2b8+var_20], rax
0000000000004c48         xor        eax, eax
0000000000004c4a         lea        rdi, qword [rbp+rbx*2+3]                    ; argument "__size" for method j_malloc
0000000000004c4f         call       j_malloc                                    ; malloc
0000000000004c54         test       rax, rax
0000000000004c57         je         loc_4c8d

0000000000004c59         lea        rcx, qword [rax+rbx+1]
0000000000004c5e         xor        edx, edx
0000000000004c60         mov        rax, rcx
0000000000004c63         div        rbx
0000000000004c66         sub        rcx, rdx
0000000000004c69         mov        rax, qword [rsp+0x2b8+var_20]
0000000000004c71         xor        rax, qword [fs:0x28]
0000000000004c7a         mov        qword [ibuf], rcx                           ; ibuf
0000000000004c81         jne        loc_4cd5

0000000000004c83         add        rsp, 0x2a8
0000000000004c8a         pop        rbx
0000000000004c8b         pop        rbp
0000000000004c8c         ret
                        ; endp

                     loc_4c8d:
0000000000004c8d         mov        r8d, 0x1                                    ; CODE XREF=alloc_ibuf.part.4+55
0000000000004c93         mov        ecx, 0x1
0000000000004c98         mov        rsi, rsp
0000000000004c9b         mov        edx, 0x1f1
0000000000004ca0         mov        rdi, rbp
0000000000004ca3         call       human_readable                              ; human_readable
0000000000004ca8         lea        rsi, qword [aMemoryExhauste]                ; argument "msgid" for method j_dcgettext, "memory exhausted by input buffer of size %lu bytes (%s)"
0000000000004caf         mov        rbx, rax
0000000000004cb2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004cb7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004cb9         call       j_dcgettext                                 ; dcgettext
0000000000004cbe         mov        r8, rbx
0000000000004cc1         mov        rdx, rax
0000000000004cc4         mov        rcx, rbp
0000000000004cc7         xor        esi, esi
0000000000004cc9         mov        edi, 0x1
0000000000004cce         xor        eax, eax
0000000000004cd0         call       nl_error                                    ; nl_error

                     loc_4cd5:
0000000000004cd5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=alloc_ibuf.part.4+97
                        ; endp
0000000000004cda         align      32                                          ; End of unwind block (FDE at 0xf664)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32


                     alloc_obuf.part.5:
0000000000004ce0         push       rbp                                         ; Begin of unwind block (FDE at 0xf690), CODE XREF=j_alloc_obuf.part.5
0000000000004ce1         push       rbx
0000000000004ce2         sub        rsp, 0x2a8
0000000000004ce9         mov        rbx, qword [page_size]                      ; page_size
0000000000004cf0         mov        rbp, qword [output_blocksize]               ; output_blocksize
0000000000004cf7         mov        rax, qword [fs:0x28]
0000000000004d00         mov        qword [rsp+0x2b8+var_20], rax
0000000000004d08         xor        eax, eax
0000000000004d0a         lea        rdi, qword [rbx+rbp-1]                      ; argument "__size" for method j_malloc
0000000000004d0f         call       j_malloc                                    ; malloc
0000000000004d14         test       rax, rax
0000000000004d17         je         loc_4d4d

0000000000004d19         lea        rcx, qword [rax+rbx-1]
0000000000004d1e         xor        edx, edx
0000000000004d20         mov        rax, rcx
0000000000004d23         div        rbx
0000000000004d26         sub        rcx, rdx
0000000000004d29         mov        rax, qword [rsp+0x2b8+var_20]
0000000000004d31         xor        rax, qword [fs:0x28]
0000000000004d3a         mov        qword [obuf], rcx                           ; obuf
0000000000004d41         jne        loc_4d95

0000000000004d43         add        rsp, 0x2a8
0000000000004d4a         pop        rbx
0000000000004d4b         pop        rbp
0000000000004d4c         ret
                        ; endp

                     loc_4d4d:
0000000000004d4d         mov        r8d, 0x1                                    ; CODE XREF=alloc_obuf.part.5+55
0000000000004d53         mov        ecx, 0x1
0000000000004d58         mov        rsi, rsp
0000000000004d5b         mov        edx, 0x1f1
0000000000004d60         mov        rdi, rbp
0000000000004d63         call       human_readable                              ; human_readable
0000000000004d68         lea        rsi, qword [aMemoryExhauste_cb48]           ; argument "msgid" for method j_dcgettext, "memory exhausted by output buffer of size %lu bytes (%s)"
0000000000004d6f         mov        rbx, rax
0000000000004d72         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004d77         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004d79         call       j_dcgettext                                 ; dcgettext
0000000000004d7e         mov        r8, rbx
0000000000004d81         mov        rdx, rax
0000000000004d84         mov        rcx, rbp
0000000000004d87         xor        esi, esi
0000000000004d89         mov        edi, 0x1
0000000000004d8e         xor        eax, eax
0000000000004d90         call       nl_error                                    ; nl_error

                     loc_4d95:
0000000000004d95         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=alloc_obuf.part.5+97
                        ; endp
0000000000004d9a         align      32                                          ; End of unwind block (FDE at 0xf690)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     alloc_obuf:
0000000000004da0         cmp        qword [obuf], 0x0                           ; Begin of unwind block (FDE at 0xf6bc), obuf, CODE XREF=main+2080, skip+361
0000000000004da8         je         loc_4dac

0000000000004daa         ret
                        ; endp

                     loc_4dac:
0000000000004dac         test       byte [byte_21138d], 0x8                     ; byte_21138d, CODE XREF=alloc_obuf+8
0000000000004db3         jne        j_alloc_obuf.part.5                         ; alloc_obuf.part.5

0000000000004db5         cmp        qword [ibuf], 0x0                           ; ibuf
0000000000004dbd         je         loc_4dd3

0000000000004dbf         mov        rax, qword [ibuf]                           ; ibuf
0000000000004dc6         mov        qword [obuf], rax                           ; obuf
0000000000004dcd         ret
                        ; endp

                     j_alloc_obuf.part.5:        // alloc_obuf.part.5
0000000000004dce         jmp        alloc_obuf.part.5                           ; alloc_obuf.part.5, CODE XREF=alloc_obuf+19
                        ; endp

                     loc_4dd3:
0000000000004dd3         sub        rsp, 0x8                                    ; CODE XREF=alloc_obuf+29
0000000000004dd7         call       alloc_ibuf.part.4                           ; alloc_ibuf.part.4
0000000000004ddc         mov        rax, qword [ibuf]                           ; ibuf
0000000000004de3         mov        qword [obuf], rax                           ; obuf
0000000000004dea         pop        rax
0000000000004deb         ret
                        ; endp
0000000000004dec         align      16                                          ; End of unwind block (FDE at 0xf6bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     iftruncate.constprop.6:
0000000000004df0         push       rbp                                         ; Begin of unwind block (FDE at 0xf6d4), CODE XREF=main+1718, main+6245
0000000000004df1         push       rbx
0000000000004df2         mov        rbp, rdi
0000000000004df5         sub        rsp, 0x8
0000000000004df9         jmp        loc_4e0a
0000000000004dfb         align      512

                     loc_4e00:
0000000000004e00         call       j___errno_location                          ; __errno_location, CODE XREF=iftruncate.constprop.6+48
0000000000004e05         cmp        dword [rax], 0x4
0000000000004e08         jne        loc_4e22

                     loc_4e0a:
0000000000004e0a         call       process_signals                             ; process_signals, CODE XREF=iftruncate.constprop.6+9
0000000000004e0f         mov        rsi, rbp                                    ; argument "__length" for method j_ftruncate
0000000000004e12         mov        edi, 0x1                                    ; argument "__fd" for method j_ftruncate
0000000000004e17         call       j_ftruncate                                 ; ftruncate
0000000000004e1c         test       eax, eax
0000000000004e1e         mov        ebx, eax
0000000000004e20         js         loc_4e00

                     loc_4e22:
0000000000004e22         add        rsp, 0x8                                    ; CODE XREF=iftruncate.constprop.6+24
0000000000004e26         mov        eax, ebx
0000000000004e28         pop        rbx
0000000000004e29         pop        rbp
0000000000004e2a         ret
                        ; endp
0000000000004e2b         align      16                                          ; End of unwind block (FDE at 0xf6d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     iwrite.constprop.7:
0000000000004e30         push       r13                                         ; Begin of unwind block (FDE at 0xf6fc), CODE XREF=main+1985, main+2028, main+4093, main+6053, write_output+18
0000000000004e32         push       r12
0000000000004e34         mov        r12, rdi
0000000000004e37         push       rbp
0000000000004e38         push       rbx
0000000000004e39         mov        rbp, rsi
0000000000004e3c         sub        rsp, 0x8
0000000000004e40         test       byte [byte_211385], 0x40                    ; byte_211385
0000000000004e47         je         loc_4e56

0000000000004e49         cmp        qword [output_blocksize], rsi               ; output_blocksize
0000000000004e50         ja         loc_4f90

                     loc_4e56:
0000000000004e56         xor        ebx, ebx                                    ; CODE XREF=iwrite.constprop.7+23, iwrite.constprop.7+433
0000000000004e58         test       rbp, rbp
0000000000004e5b         jne        loc_4e76

0000000000004e5d         jmp        loc_4ef2
0000000000004e62         align      8

                     loc_4e68:
0000000000004e68         je         loc_4f58                                    ; CODE XREF=iwrite.constprop.7+159

                     loc_4e6e:
0000000000004e6e         add        rbx, rax                                    ; CODE XREF=iwrite.constprop.7+244

                     loc_4e71:
0000000000004e71         cmp        rbp, rbx                                    ; CODE XREF=iwrite.constprop.7+169, iwrite.constprop.7+258
0000000000004e74         jbe        loc_4ee0

                     loc_4e76:
0000000000004e76         call       process_signals                             ; process_signals, CODE XREF=iwrite.constprop.7+43
0000000000004e7b         mov        r13d, dword [conversions_mask]              ; conversions_mask
0000000000004e82         mov        byte [final_op_was_seek], 0x0               ; final_op_was_seek
0000000000004e89         test       r13d, 0x10000
0000000000004e90         je         loc_4eb8

0000000000004e92         mov        rsi, r12
0000000000004e95         mov        rdx, rbp

                     loc_4e98:
0000000000004e98         cmp        byte [rsi], 0x0                             ; CODE XREF=iwrite.constprop.7+122
0000000000004e9b         jne        loc_4eb8

0000000000004e9d         add        rsi, 0x1
0000000000004ea1         sub        rdx, 0x1
0000000000004ea5         je         loc_4f00

0000000000004ea7         test       dl, 0xf
0000000000004eaa         jne        loc_4e98

0000000000004eac         mov        rdi, r12                                    ; argument "__s1" for method j_memcmp
0000000000004eaf         call       j_memcmp                                    ; memcmp
0000000000004eb4         test       eax, eax
0000000000004eb6         je         loc_4f00

                     loc_4eb8:
0000000000004eb8         mov        rdx, rbp                                    ; CODE XREF=iwrite.constprop.7+96, iwrite.constprop.7+107, iwrite.constprop.7+286
0000000000004ebb         lea        rsi, qword [r12+rbx]                        ; argument "__buf" for method j_write
0000000000004ebf         mov        edi, 0x1                                    ; argument "__fd" for method j_write
0000000000004ec4         sub        rdx, rbx                                    ; argument "__n" for method j_write
0000000000004ec7         call       j_write                                     ; write
0000000000004ecc         test       rax, rax
0000000000004ecf         jns        loc_4e68

0000000000004ed1         call       j___errno_location                          ; __errno_location
0000000000004ed6         cmp        dword [rax], 0x4
0000000000004ed9         je         loc_4e71

0000000000004edb         nop        dword [rax+rax]

                     loc_4ee0:
0000000000004ee0         cmp        byte [o_nocache], 0x0                       ; o_nocache, CODE XREF=iwrite.constprop.7+68, iwrite.constprop.7+264, iwrite.constprop.7+307
0000000000004ee7         je         loc_4ef2

0000000000004ee9         test       rbx, rbx
0000000000004eec         jne        loc_4f70

                     loc_4ef2:
0000000000004ef2         add        rsp, 0x8                                    ; CODE XREF=iwrite.constprop.7+45, iwrite.constprop.7+183
0000000000004ef6         mov        rax, rbx
0000000000004ef9         pop        rbx
0000000000004efa         pop        rbp
0000000000004efb         pop        r12
0000000000004efd         pop        r13
0000000000004eff         ret
                        ; endp

                     loc_4f00:
0000000000004f00         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek, CODE XREF=iwrite.constprop.7+117, iwrite.constprop.7+134
0000000000004f05         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
0000000000004f08         mov        edi, 0x1                                    ; argument "__fd" for method j_lseek
0000000000004f0d         call       j_lseek                                     ; lseek
0000000000004f12         test       rax, rax
0000000000004f15         js         loc_4f40

0000000000004f17         test       rbp, rbp
0000000000004f1a         mov        byte [final_op_was_seek], 0x1               ; final_op_was_seek
0000000000004f21         mov        rax, rbp
0000000000004f24         jns        loc_4e6e

0000000000004f2a         call       j___errno_location                          ; __errno_location
0000000000004f2f         cmp        dword [rax], 0x4
0000000000004f32         je         loc_4e71

0000000000004f38         jmp        loc_4ee0
0000000000004f3a         align      64

                     loc_4f40:
0000000000004f40         and        r13d, 0xfffeffff                            ; CODE XREF=iwrite.constprop.7+229
0000000000004f47         mov        dword [conversions_mask], r13d              ; conversions_mask
0000000000004f4e         jmp        loc_4eb8
0000000000004f53         align      8

                     loc_4f58:
0000000000004f58         call       j___errno_location                          ; __errno_location, CODE XREF=loc_4e68
0000000000004f5d         mov        dword [rax], 0x1c
0000000000004f63         jmp        loc_4ee0
0000000000004f68         align      16

                     loc_4f70:
0000000000004f70         mov        rsi, rbx                                    ; CODE XREF=iwrite.constprop.7+188
0000000000004f73         mov        edi, 0x1
0000000000004f78         call       invalidate_cache                            ; invalidate_cache
0000000000004f7d         add        rsp, 0x8
0000000000004f81         mov        rax, rbx
0000000000004f84         pop        rbx
0000000000004f85         pop        rbp
0000000000004f86         pop        r12
0000000000004f88         pop        r13
0000000000004f8a         ret
                        ; endp
0000000000004f8b         align      16

                     loc_4f90:
0000000000004f90         mov        esi, 0x3                                    ; CODE XREF=iwrite.constprop.7+32
0000000000004f95         mov        edi, 0x1
0000000000004f9a         xor        eax, eax
0000000000004f9c         call       rpl_fcntl                                   ; rpl_fcntl
0000000000004fa1         and        ah, 0xbf
0000000000004fa4         mov        esi, 0x4
0000000000004fa9         mov        edi, 0x1
0000000000004fae         mov        edx, eax
0000000000004fb0         xor        eax, eax
0000000000004fb2         call       rpl_fcntl                                   ; rpl_fcntl
0000000000004fb7         test       eax, eax
0000000000004fb9         je         loc_4fc4

0000000000004fbb         cmp        dword [status_level], 0x1                   ; status_level
0000000000004fc2         jne        loc_4fe6

                     loc_4fc4:
0000000000004fc4         xor        esi, esi                                    ; CODE XREF=iwrite.constprop.7+393, iwrite.constprop.7+504
0000000000004fc6         mov        edi, 0x1
0000000000004fcb         mov        byte [o_nocache_eof], 0x1                   ; o_nocache_eof
0000000000004fd2         call       invalidate_cache                            ; invalidate_cache
0000000000004fd7         or         dword [conversions_mask], 0x8000            ; conversions_mask
0000000000004fe1         jmp        loc_4e56

                     loc_4fe6:
0000000000004fe6         mov        rdx, qword [output_file]                    ; output_file, CODE XREF=iwrite.constprop.7+402
0000000000004fed         xor        edi, edi
0000000000004fef         mov        esi, 0x3
0000000000004ff4         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000004ff9         lea        rsi, qword [aFailedToTurnOf]                ; argument "msgid" for method j_dcgettext, "failed to turn off O_DIRECT: %s"
0000000000005000         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005002         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005007         mov        r13, rax
000000000000500a         call       j_dcgettext                                 ; dcgettext
000000000000500f         mov        rbx, rax
0000000000005012         call       j___errno_location                          ; __errno_location
0000000000005017         mov        esi, dword [rax]
0000000000005019         mov        rcx, r13
000000000000501c         mov        rdx, rbx
000000000000501f         xor        edi, edi
0000000000005021         xor        eax, eax
0000000000005023         call       nl_error                                    ; nl_error
0000000000005028         jmp        loc_4fc4
000000000000502a         align      16                                          ; End of unwind block (FDE at 0xf6fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     usage:
0000000000005030         push       r13                                         ; Begin of unwind block (FDE at 0xf74c), CODE XREF=main+6821, main+7442, parse_symbols+208, __argmatch_die+5, DATA XREF=main+519
0000000000005032         push       r12
0000000000005034         mov        edx, 0x5
0000000000005039         push       rbp
000000000000503a         push       rbx
000000000000503b         mov        ebp, edi
000000000000503d         sub        rsp, 0x88
0000000000005044         mov        rbx, qword [program_name]                   ; program_name
000000000000504b         mov        rax, qword [fs:0x28]
0000000000005054         mov        qword [rsp+0xa8+var_30], rax
0000000000005059         xor        eax, eax
000000000000505b         test       edi, edi
000000000000505d         je         loc_508d

000000000000505f         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
0000000000005066         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005068         call       j_dcgettext                                 ; dcgettext
000000000000506d         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000005074         mov        rdx, rax
0000000000005077         mov        rcx, rbx
000000000000507a         mov        esi, 0x1
000000000000507f         xor        eax, eax
0000000000005081         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_5086:
0000000000005086         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+1350
0000000000005088         call       j_exit                                      ; exit
                        ; endp

                     loc_508d:
000000000000508d         lea        rsi, qword [aUsageSOperandn]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPERAND]...\\n  or:  %s OPTION\\n", CODE XREF=usage+45
0000000000005094         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005096         call       j_dcgettext                                 ; dcgettext
000000000000509b         mov        rcx, rbx
000000000000509e         mov        rdx, rbx
00000000000050a1         mov        rsi, rax
00000000000050a4         mov        edi, 0x1
00000000000050a9         xor        eax, eax
00000000000050ab         call       j___printf_chk                              ; __printf_chk
00000000000050b0         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000050b7         lea        rsi, qword [aCopyAFileConve]                ; argument "msgid" for method j_dcgettext, "Copy a file, converting and formatting according to the operands.\\n\\n  bs=BYTES        read and write up to BYTES bytes at a time (default: 512);\\n                  overrides ibs and obs\\n  cbs=BYTES       convert BYTES bytes at a time\\n  conv=CONVS      conver…"
00000000000050be         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000050c3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000050c5         call       j_dcgettext                                 ; dcgettext
00000000000050ca         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000050cd         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000050d0         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000050d5         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000050dc         lea        rsi, qword [aIffileReadFrom]                ; argument "msgid" for method j_dcgettext, "  if=FILE         read from FILE instead of stdin\\n  iflag=FLAGS     read as per the comma separated symbol list\\n  obs=BYTES       write BYTES bytes at a time (default: 512)\\n  of=FILE         write to FILE instead of stdout\\n  oflag=FLAGS     write as per th…"
00000000000050e3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000050e8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000050ea         call       j_dcgettext                                 ; dcgettext
00000000000050ef         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000050f2         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000050f5         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000050fa         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005101         lea        rsi, qword [aNnAndBytesMayB]                ; argument "msgid" for method j_dcgettext, "\\nN and BYTES may be followed by the following multiplicative suffixes:\\nc=1, w=2, b=512, kB=1000, K=1024, MB=1000*1000, M=1024*1024, xM=M,\\nGB=1000*1000*1000, G=1024*1024*1024, and so on for T, P, E, Z, Y.\\nBinary prefixes can be used, too: KiB=K, MiB=M, and …"
0000000000005108         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000510d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000510f         call       j_dcgettext                                 ; dcgettext
0000000000005114         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005117         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000511a         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000511f         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005126         lea        rsi, qword [aAsciiFromEbcdi]                ; argument "msgid" for method j_dcgettext, "  ascii     from EBCDIC to ASCII\\n  ebcdic    from ASCII to EBCDIC\\n  ibm       from ASCII to alternate EBCDIC\\n  block     pad newline-terminated records with spaces to cbs-size\\n  unblock   replace trailing spaces in cbs-size records with newline\\n  lcase    …"
000000000000512d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005132         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005134         call       j_dcgettext                                 ; dcgettext
0000000000005139         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000513c         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000513f         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005144         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000514b         lea        rsi, qword [aExclFailIfTheO]                ; argument "msgid" for method j_dcgettext, "  excl      fail if the output file already exists\\n  nocreat   do not create the output file\\n  notrunc   do not truncate the output file\\n  noerror   continue after read errors\\n  fdatasync  physically write output file data before finishing\\n  fsync     like…"
0000000000005152         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005157         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005159         call       j_dcgettext                                 ; dcgettext
000000000000515e         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005161         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005164         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005169         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005170         lea        rsi, qword [aNeachFlagSymbo]                ; argument "msgid" for method j_dcgettext, "\\nEach FLAG symbol may be:\\n\\n  append    append mode (makes sense only for output; conv=notrunc suggested)\\n"
0000000000005177         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000517c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000517e         call       j_dcgettext                                 ; dcgettext
0000000000005183         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005186         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005189         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000518e         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005195         lea        rsi, qword [aDirectUseDirec]                ; argument "msgid" for method j_dcgettext, "  direct    use direct I/O for data\\n"
000000000000519c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000051a1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000051a3         call       j_dcgettext                                 ; dcgettext
00000000000051a8         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000051ab         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000051ae         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000051b3         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000051ba         lea        rsi, qword [aDirectoryFailU]                ; argument "msgid" for method j_dcgettext, "  directory  fail unless a directory\\n"
00000000000051c1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000051c6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000051c8         call       j_dcgettext                                 ; dcgettext
00000000000051cd         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000051d0         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000051d3         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000051d8         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000051df         lea        rsi, qword [aDsyncUseSynchr]                ; argument "msgid" for method j_dcgettext, "  dsync     use synchronized I/O for data\\n"
00000000000051e6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000051eb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000051ed         call       j_dcgettext                                 ; dcgettext
00000000000051f2         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000051f5         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000051f8         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000051fd         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005204         lea        rsi, qword [aSyncLikewiseBu]                ; argument "msgid" for method j_dcgettext, "  sync      likewise, but also for metadata\\n"
000000000000520b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005210         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005212         call       j_dcgettext                                 ; dcgettext
0000000000005217         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000521a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000521d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005222         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005229         lea        rsi, qword [aFullblockAccum]                ; argument "msgid" for method j_dcgettext, "  fullblock  accumulate full blocks of input (iflag only)\\n"
0000000000005230         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005235         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005237         call       j_dcgettext                                 ; dcgettext
000000000000523c         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000523f         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005242         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005247         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000524e         lea        rsi, qword [aNonblockUseNon]                ; argument "msgid" for method j_dcgettext, "  nonblock  use non-blocking I/O\\n"
0000000000005255         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000525a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000525c         call       j_dcgettext                                 ; dcgettext
0000000000005261         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005264         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005267         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000526c         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005273         lea        rsi, qword [aNoatimeDoNotUp]                ; argument "msgid" for method j_dcgettext, "  noatime   do not update access time\\n"
000000000000527a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000527f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005281         call       j_dcgettext                                 ; dcgettext
0000000000005286         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005289         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000528c         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005291         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005298         lea        rsi, qword [aNocacheRequest]                ; argument "msgid" for method j_dcgettext, "  nocache   Request to drop cache.  See also oflag=sync\\n"
000000000000529f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000052a4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000052a6         call       j_dcgettext                                 ; dcgettext
00000000000052ab         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000052ae         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000052b1         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000052b6         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000052bd         lea        rsi, qword [aNocttyDoNotAss]                ; argument "msgid" for method j_dcgettext, "  noctty    do not assign controlling terminal from file\\n"
00000000000052c4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000052c9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000052cb         call       j_dcgettext                                 ; dcgettext
00000000000052d0         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000052d3         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000052d6         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000052db         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000052e2         lea        rsi, qword [aNofollowDoNotF]                ; argument "msgid" for method j_dcgettext, "  nofollow  do not follow symlinks\\n"
00000000000052e9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000052ee         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000052f0         call       j_dcgettext                                 ; dcgettext
00000000000052f5         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000052f8         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000052fb         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005300         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005307         lea        rsi, qword [aCountbytesTrea]                ; argument "msgid" for method j_dcgettext, "  count_bytes  treat 'count=N' as a byte count (iflag only)\\n"
000000000000530e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005313         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005315         call       j_dcgettext                                 ; dcgettext
000000000000531a         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000531d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005320         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005325         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000532c         lea        rsi, qword [aSkipbytesTreat]                ; argument "msgid" for method j_dcgettext, "  skip_bytes  treat 'skip=N' as a byte count (iflag only)\\n"
0000000000005333         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005338         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000533a         call       j_dcgettext                                 ; dcgettext
000000000000533f         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005342         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005345         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000534a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005351         lea        rsi, qword [aSeekbytesTreat]                ; argument "msgid" for method j_dcgettext, "  seek_bytes  treat 'seek=N' as a byte count (oflag only)\\n"
0000000000005358         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000535d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000535f         call       j_dcgettext                                 ; dcgettext
0000000000005364         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005367         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000536a         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000536f         lea        rsi, qword [aNsendingASSign]                ; argument "msgid" for method j_dcgettext, "\\nSending a %s signal to a running 'dd' process makes it\\nprint I/O statistics to standard error and then resume copying.\\n\\nOptions are:\\n\\n"
0000000000005376         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005378         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000537d         call       j_dcgettext                                 ; dcgettext
0000000000005382         lea        rdx, qword [aClosingOutputF+26]             ; 0xc6f7
0000000000005389         mov        rsi, rax
000000000000538c         mov        edi, 0x1
0000000000005391         xor        eax, eax
0000000000005393         call       j___printf_chk                              ; __printf_chk
0000000000005398         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000539f         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
00000000000053a6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000053ab         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000053ad         call       j_dcgettext                                 ; dcgettext
00000000000053b2         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000053b5         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000053b8         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000053bd         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000053c4         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
00000000000053cb         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000053d0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000053d2         call       j_dcgettext                                 ; dcgettext
00000000000053d7         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000053da         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000053dd         lea        rbx, qword [aClosingOutputF+23]             ; 0xc6f4
00000000000053e4         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000053e9         lea        rax, qword [aClosingOutputF+31]             ; 0xc6fc
00000000000053f0         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
00000000000053f7         mov        qword [rsp+0xa8+var_48], 0x0
0000000000005400         mov        qword [rsp+0xa8+var_40], 0x0
0000000000005409         mov        rdx, rsp
000000000000540c         mov        qword [rsp+0xa8+var_A8], rax
0000000000005410         lea        rax, qword [aTestInvocation]                ; "test invocation"
0000000000005417         mov        qword [rsp+0xa8+var_78], rcx
000000000000541c         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
0000000000005423         mov        qword [rsp+0xa8+var_A0], rax
0000000000005428         lea        rax, qword [aCoreutils]                     ; "coreutils"
000000000000542f         mov        qword [rsp+0xa8+var_68], rcx
0000000000005434         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
000000000000543b         mov        qword [rsp+0xa8+var_98], rax
0000000000005440         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
0000000000005447         mov        qword [rsp+0xa8+var_58], rcx
000000000000544c         mov        qword [rsp+0xa8+var_90], rax
0000000000005451         lea        rax, qword [aSha224sum]                     ; "sha224sum"
0000000000005458         mov        qword [rsp+0xa8+var_88], rax
000000000000545d         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
0000000000005464         mov        qword [rsp+0xa8+var_80], rax
0000000000005469         mov        qword [rsp+0xa8+var_70], rax
000000000000546e         mov        qword [rsp+0xa8+var_60], rax
0000000000005473         mov        qword [rsp+0xa8+var_50], rax
0000000000005478         nop        dword [rax+rax]

                     loc_5480:
0000000000005480         add        rdx, 0x10                                   ; CODE XREF=usage+1133
0000000000005484         mov        rdi, qword [rdx]
0000000000005487         test       rdi, rdi
000000000000548a         je         loc_549f

000000000000548c         mov        ecx, 0x3
0000000000005491         mov        rsi, rbx
0000000000005494         rep  cmpsb byte [rsi], byte [rdi]
0000000000005496         seta       al
0000000000005499         sbb        al, 0x0
000000000000549b         test       al, al
000000000000549d         jne        loc_5480

                     loc_549f:
000000000000549f         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+1114
00000000000054a3         xor        edi, edi
00000000000054a5         mov        edx, 0x5
00000000000054aa         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
00000000000054b1         test       r12, r12
00000000000054b4         je         loc_557b

00000000000054ba         call       j_dcgettext                                 ; dcgettext
00000000000054bf         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000054c6         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xc772
00000000000054cd         mov        rsi, rax
00000000000054d0         mov        edi, 0x1
00000000000054d5         xor        eax, eax
00000000000054d7         call       j___printf_chk                              ; __printf_chk
00000000000054dc         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
00000000000054de         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
00000000000054e3         call       j_setlocale                                 ; setlocale
00000000000054e8         test       rax, rax
00000000000054eb         je         loc_5509

00000000000054ed         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0xc780
00000000000054f4         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
00000000000054f9         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
00000000000054fc         call       j_strncmp                                   ; strncmp
0000000000005501         test       eax, eax
0000000000005503         jne        loc_5610

                     loc_5509:
0000000000005509         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+1211, usage+1541
0000000000005510         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005512         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005517         call       j_dcgettext                                 ; dcgettext
000000000000551c         lea        rcx, qword [aClosingOutputF+23]             ; 0xc6f4
0000000000005523         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
000000000000552a         mov        rsi, rax
000000000000552d         mov        edi, 0x1
0000000000005532         xor        eax, eax
0000000000005534         call       j___printf_chk                              ; __printf_chk
0000000000005539         cmp        r12, rbx
000000000000553c         lea        rcx, qword [aMulticallInvoc+10]             ; 0xc718
0000000000005543         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0xe7a1
000000000000554a         cmove      rbx, rcx

                     loc_554e:
000000000000554e         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+1492
0000000000005555         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005557         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000555c         call       j_dcgettext                                 ; dcgettext
0000000000005561         mov        rcx, rbx
0000000000005564         mov        rsi, rax
0000000000005567         mov        rdx, r12
000000000000556a         mov        edi, 0x1
000000000000556f         xor        eax, eax
0000000000005571         call       j___printf_chk                              ; __printf_chk
0000000000005576         jmp        loc_5086

                     loc_557b:
000000000000557b         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+1156
0000000000005580         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000005587         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xc772
000000000000558e         mov        rsi, rax
0000000000005591         mov        edi, 0x1
0000000000005596         xor        eax, eax
0000000000005598         call       j___printf_chk                              ; __printf_chk
000000000000559d         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000559f         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
00000000000055a4         call       j_setlocale                                 ; setlocale
00000000000055a9         test       rax, rax
00000000000055ac         je         loc_55c6

00000000000055ae         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0xc780
00000000000055b5         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
00000000000055ba         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
00000000000055bd         call       j_strncmp                                   ; strncmp
00000000000055c2         test       eax, eax
00000000000055c4         jne        loc_5609

                     loc_55c6:
00000000000055c6         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+1404
00000000000055cd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000055d2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000055d4         lea        r12, qword [aClosingOutputF+23]             ; 0xc6f4
00000000000055db         lea        rbx, qword [aMulticallInvoc+10]             ; 0xc718
00000000000055e2         call       j_dcgettext                                 ; dcgettext
00000000000055e7         lea        rcx, qword [aClosingOutputF+23]             ; 0xc6f4
00000000000055ee         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000055f5         mov        rsi, rax
00000000000055f8         mov        edi, 0x1
00000000000055fd         xor        eax, eax
00000000000055ff         call       j___printf_chk                              ; __printf_chk
0000000000005604         jmp        loc_554e

                     loc_5609:
0000000000005609         lea        r12, qword [aClosingOutputF+23]             ; 0xc6f4, CODE XREF=usage+1428

                     loc_5610:
0000000000005610         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+1235
0000000000005617         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
000000000000561e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005620         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005625         call       j_dcgettext                                 ; dcgettext
000000000000562a         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
000000000000562d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005630         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005635         jmp        loc_5509
000000000000563a         align      64                                          ; End of unwind block (FDE at 0xf74c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     parse_symbols:
0000000000005640         push       r14                                         ; Begin of unwind block (FDE at 0xf778), CODE XREF=main+2689, main+2770, main+2866, main+3313
0000000000005642         mov        r14, rdi
0000000000005645         push       r13
0000000000005647         mov        r13, rcx
000000000000564a         push       r12
000000000000564c         mov        r12, rsi
000000000000564f         push       rbp
0000000000005650         mov        ebp, edx
0000000000005652         push       rbx
0000000000005653         xor        ebx, ebx

                     loc_5655:
0000000000005655         mov        esi, 0x2c                                   ; argument "__c" for method j_strchr, CODE XREF=parse_symbols+122
000000000000565a         mov        rdi, r14                                    ; argument "__s" for method j_strchr
000000000000565d         call       j_strchr                                    ; strchr
0000000000005662         mov        r8, r12
0000000000005665         nop        dword [rax]

                     loc_5668:
0000000000005668         mov        rcx, r8                                     ; CODE XREF=parse_symbols+101
000000000000566b         mov        rdx, r14
000000000000566e         jmp        loc_567d

                     loc_5670:
0000000000005670         add        rdx, 0x1                                    ; CODE XREF=parse_symbols+70
0000000000005674         add        rcx, 0x1
0000000000005678         cmp        sil, dil
000000000000567b         jne        loc_569b

                     loc_567d:
000000000000567d         movzx      esi, byte [rcx]                             ; CODE XREF=parse_symbols+46
0000000000005680         movzx      edi, byte [rdx]
0000000000005683         test       sil, sil
0000000000005686         jne        loc_5670

0000000000005688         cmp        dil, 0x2c
000000000000568c         je         loc_5693

000000000000568e         test       dil, dil
0000000000005691         jne        loc_569b

                     loc_5693:
0000000000005693         mov        edx, dword [r8+0xc]                         ; CODE XREF=parse_symbols+76
0000000000005697         test       edx, edx
0000000000005699         jne        loc_56a7

                     loc_569b:
000000000000569b         cmp        byte [r8], 0x0                              ; CODE XREF=parse_symbols+59, parse_symbols+81
000000000000569f         je         loc_56c7

00000000000056a1         add        r8, 0x10
00000000000056a5         jmp        loc_5668

                     loc_56a7:
00000000000056a7         or         ebx, edx                                    ; CODE XREF=parse_symbols+89
00000000000056a9         test       bpl, bpl
00000000000056ac         cmove      edx, ebx
00000000000056af         test       rax, rax
00000000000056b2         je         loc_56bc

00000000000056b4         lea        r14, qword [rax+1]
00000000000056b8         mov        ebx, edx
00000000000056ba         jmp        loc_5655

                     loc_56bc:
00000000000056bc         pop        rbx                                         ; CODE XREF=parse_symbols+114
00000000000056bd         mov        eax, edx
00000000000056bf         pop        rbp
00000000000056c0         pop        r12
00000000000056c2         pop        r13
00000000000056c4         pop        r14
00000000000056c6         ret
                        ; endp

                     loc_56c7:
00000000000056c7         test       rax, rax                                    ; CODE XREF=parse_symbols+95
00000000000056ca         je         loc_5715

00000000000056cc         sub        rax, r14

                     loc_56cf:
00000000000056cf         mov        rcx, rax                                    ; CODE XREF=parse_symbols+234
00000000000056d2         mov        rdx, r14
00000000000056d5         mov        esi, 0x8
00000000000056da         xor        edi, edi
00000000000056dc         call       quotearg_n_style_mem                        ; quotearg_n_style_mem
00000000000056e1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000056e6         mov        rsi, r13                                    ; argument "msgid" for method j_dcgettext
00000000000056e9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000056eb         mov        rbx, rax
00000000000056ee         call       j_dcgettext                                 ; dcgettext
00000000000056f3         lea        rdx, qword [aSS]                            ; "%s: %s"
00000000000056fa         mov        rcx, rax
00000000000056fd         xor        edi, edi
00000000000056ff         mov        r8, rbx
0000000000005702         xor        esi, esi
0000000000005704         xor        eax, eax
0000000000005706         call       nl_error                                    ; nl_error
000000000000570b         mov        edi, 0x1                                    ; argument #1 for method usage
0000000000005710         call       usage                                       ; usage

                     loc_5715:
0000000000005715         xor        eax, eax                                    ; CODE XREF=parse_symbols+138
0000000000005717         or         rcx, 0xffffffffffffffff
000000000000571b         mov        rdi, r14
000000000000571e         repne scasb al, byte [rdi]
0000000000005720         mov        rax, rcx
0000000000005723         not        rax
0000000000005726         sub        rax, 0x1
000000000000572a         jmp        loc_56cf
000000000000572c         align      16                                          ; End of unwind block (FDE at 0xf778)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_A8: int64_t, -168
        ;    var_C0: int32_t, -192
        ;    var_D8: int8_t, -216
        ;    var_DC: int32_t, -220
        ;    var_E8: int64_t, -232


                     skip:
0000000000005730         push       r15                                         ; Begin of unwind block (FDE at 0xf7b8), CODE XREF=main+1821, main+1927
0000000000005732         push       r14
0000000000005734         mov        r14, rdx
0000000000005737         push       r13
0000000000005739         push       r12
000000000000573b         mov        r13, r8
000000000000573e         push       rbp
000000000000573f         push       rbx
0000000000005740         mov        r12, rcx
0000000000005743         mov        ebx, edi
0000000000005745         sub        rsp, 0xb8
000000000000574c         mov        rbp, qword [r8]
000000000000574f         mov        rax, qword [fs:0x28]
0000000000005758         mov        qword [rsp+0xe8+var_40], rax
0000000000005760         xor        eax, eax
0000000000005762         mov        qword [rsp+0xe8+var_E8], rsi
0000000000005766         call       j___errno_location                          ; __errno_location
000000000000576b         xor        edx, edx
000000000000576d         mov        r15, rax
0000000000005770         mov        dword [rax], 0x0
0000000000005776         movabs     rax, 0x7fffffffffffffff
0000000000005780         div        r12
0000000000005783         cmp        rax, r14
0000000000005786         jb         loc_57f3

0000000000005788         mov        rax, r14
000000000000578b         mov        rdi, qword [rsp+0xe8+var_E8]
000000000000578f         mov        ecx, 0x1
0000000000005794         imul       rax, r12
0000000000005798         mov        esi, ebx
000000000000579a         add        rbp, rax
000000000000579d         mov        rdx, rbp
00000000000057a0         call       skip_via_lseek                              ; skip_via_lseek
00000000000057a5         test       rax, rax
00000000000057a8         js         loc_58c5

00000000000057ae         test       ebx, ebx
00000000000057b0         je         loc_5922

00000000000057b6         nop        word [cs:rax+rax]

                     loc_57c0:
00000000000057c0         mov        qword [r13], 0x0                            ; CODE XREF=skip+327
00000000000057c8         xor        eax, eax

                     loc_57ca:
00000000000057ca         mov        rcx, qword [rsp+0xe8+var_40]                ; CODE XREF=skip+400, skip+575, skip+588, skip+779
00000000000057d2         xor        rcx, qword [fs:0x28]
00000000000057db         jne        loc_5a40

00000000000057e1         add        rsp, 0xb8
00000000000057e8         pop        rbx
00000000000057e9         pop        rbp
00000000000057ea         pop        r12
00000000000057ec         pop        r13
00000000000057ee         pop        r14
00000000000057f0         pop        r15
00000000000057f2         ret
                        ; endp

                     loc_57f3:
00000000000057f3         mov        rdi, qword [rsp+0xe8+var_E8]                ; CODE XREF=skip+86
00000000000057f7         xor        edx, edx
00000000000057f9         mov        ecx, 0x2
00000000000057fe         mov        esi, ebx
0000000000005800         call       skip_via_lseek                              ; skip_via_lseek
0000000000005805         test       rax, rax
0000000000005808         jns        loc_58ee

000000000000580e         mov        dword [rsp+0xe8+var_DC], 0x0

                     loc_5816:
0000000000005816         test       ebx, ebx                                    ; CODE XREF=skip+433
0000000000005818         jne        loc_5899

000000000000581a         cmp        qword [ibuf], 0x0                           ; ibuf
0000000000005822         je         loc_5981

                     loc_5828:
0000000000005828         mov        rbp, qword [ibuf]                           ; ibuf, CODE XREF=skip+598
000000000000582f         nop

                     loc_5830:
0000000000005830         test       r14, r14                                    ; CODE XREF=skip+337, skip+373
0000000000005833         mov        rax, qword [iread_fnc]                      ; iread_fnc
000000000000583a         mov        rdx, r12
000000000000583d         je         loc_58b0

                     loc_583f:
000000000000583f         mov        rsi, rbp                                    ; CODE XREF=skip+395
0000000000005842         mov        edi, ebx
0000000000005844         call       rax
0000000000005846         test       rax, rax
0000000000005849         js         loc_599e

000000000000584f         je         loc_58bd

0000000000005851         test       ebx, ebx
0000000000005853         jne        loc_5874

0000000000005855         xor        edx, edx
0000000000005857         add        rax, qword [input_offset]                   ; input_offset
000000000000585e         setb       dl
0000000000005861         mov        qword [input_offset], rax                   ; input_offset
0000000000005868         test       rdx, rdx
000000000000586b         je         loc_5874

000000000000586d         mov        byte [input_offset_overflow], 0x1           ; input_offset_overflow

                     loc_5874:
0000000000005874         test       r14, r14                                    ; CODE XREF=skip+291, skip+315
0000000000005877         je         loc_57c0

000000000000587d         sub        r14, 0x1
0000000000005881         jne        loc_5830

0000000000005883         mov        rdx, qword [r13]
0000000000005887         test       rdx, rdx
000000000000588a         je         loc_5a39

0000000000005890         mov        rax, qword [iread_fnc]                      ; iread_fnc
0000000000005897         jmp        loc_58b8

                     loc_5899:
0000000000005899         call       alloc_obuf                                  ; alloc_obuf, CODE XREF=skip+232
000000000000589e         mov        rbp, qword [obuf]                           ; obuf
00000000000058a5         jmp        loc_5830
00000000000058a7         align      16

                     loc_58b0:
00000000000058b0         mov        rdx, qword [r13]                            ; CODE XREF=skip+269
00000000000058b4         nop        dword [rax]

                     loc_58b8:
00000000000058b8         xor        r14d, r14d                                  ; CODE XREF=skip+359
00000000000058bb         jmp        loc_583f

                     loc_58bd:
00000000000058bd         mov        rax, r14                                    ; CODE XREF=skip+287
00000000000058c0         jmp        loc_57ca

                     loc_58c5:
00000000000058c5         mov        eax, dword [r15]                            ; CODE XREF=skip+120
00000000000058c8         mov        rdi, qword [rsp+0xe8+var_E8]
00000000000058cc         xor        edx, edx
00000000000058ce         mov        ecx, 0x2
00000000000058d3         mov        esi, ebx
00000000000058d5         mov        dword [rsp+0xe8+var_DC], eax
00000000000058d9         call       skip_via_lseek                              ; skip_via_lseek
00000000000058de         test       rax, rax
00000000000058e1         js         loc_5816

00000000000058e7         cmp        dword [rsp+0xe8+var_DC], 0x0
00000000000058ec         jne        loc_58f6

                     loc_58ee:
00000000000058ee         mov        dword [rsp+0xe8+var_DC], 0x4b               ; CODE XREF=skip+216

                     loc_58f6:
00000000000058f6         xor        edi, edi                                    ; CODE XREF=skip+444
00000000000058f8         test       ebx, ebx
00000000000058fa         mov        rdx, qword [rsp+0xe8+var_E8]
00000000000058fe         mov        esi, 0x3
0000000000005903         jne        loc_5a09

0000000000005909         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
000000000000590e         mov        edx, 0x5
0000000000005913         mov        rbx, rax
0000000000005916         lea        rsi, qword [aSCannotSkip]                   ; "%s: cannot skip"
000000000000591d         jmp        loc_5a1d

                     loc_5922:
0000000000005922         lea        rdx, qword [rsp+0xe8+var_D8]                ; argument "__stat_buf" for method j___fxstat, CODE XREF=skip+128
0000000000005927         xor        esi, esi                                    ; argument "__fildes" for method j___fxstat
0000000000005929         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
000000000000592e         call       j___fxstat                                  ; __fxstat
0000000000005933         test       eax, eax
0000000000005935         jne        loc_5a45

000000000000593b         mov        edx, dword [rsp+0xe8+var_C0]
000000000000593f         xor        eax, eax
0000000000005941         mov        rcx, qword [input_offset]                   ; input_offset
0000000000005948         and        edx, 0xd000
000000000000594e         cmp        edx, 0x8000
0000000000005954         jne        loc_5965

0000000000005956         mov        rsi, qword [rsp+0xe8+var_A8]
000000000000595b         lea        rdx, qword [rbp+rcx]
0000000000005960         cmp        rsi, rdx
0000000000005963         jb         loc_598b

                     loc_5965:
0000000000005965         add        rbp, rcx                                    ; CODE XREF=skip+548, skip+620
0000000000005968         mov        qword [input_offset], rbp                   ; input_offset
000000000000596f         jae        loc_57ca

0000000000005975         mov        byte [input_offset_overflow], 0x1           ; input_offset_overflow
000000000000597c         jmp        loc_57ca

                     loc_5981:
0000000000005981         call       alloc_ibuf.part.4                           ; alloc_ibuf.part.4, CODE XREF=skip+242
0000000000005986         jmp        loc_5828

                     loc_598b:
000000000000598b         mov        rax, rbp                                    ; CODE XREF=skip+563
000000000000598e         xor        edx, edx
0000000000005990         sub        rax, rsi
0000000000005993         sub        rsi, rcx
0000000000005996         div        r12
0000000000005999         mov        rbp, rsi
000000000000599c         jmp        loc_5965

                     loc_599e:
000000000000599e         test       ebx, ebx                                    ; CODE XREF=skip+281
00000000000059a0         jne        loc_59fe

00000000000059a2         mov        rsi, qword [rsp+0xe8+var_E8]
00000000000059a6         mov        edi, 0x4
00000000000059ab         call       quotearg_style                              ; quotearg_style
00000000000059b0         lea        rsi, qword [aErrorReadingS]                 ; argument "msgid" for method j_dcgettext, "error reading %s"
00000000000059b7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000059b9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000059be         mov        rbx, rax
00000000000059c1         call       j_dcgettext                                 ; dcgettext
00000000000059c6         mov        esi, dword [r15]
00000000000059c9         mov        rdx, rax
00000000000059cc         xor        edi, edi
00000000000059ce         xor        eax, eax
00000000000059d0         mov        rcx, rbx
00000000000059d3         call       nl_error                                    ; nl_error
00000000000059d8         test       byte [byte_21138d], 0x1                     ; byte_21138d
00000000000059df         je         loc_59ef

00000000000059e1         cmp        dword [status_level], 0x1                   ; status_level
00000000000059e8         je         loc_59ef

00000000000059ea         call       print_stats.part.2                          ; print_stats.part.2

                     loc_59ef:
00000000000059ef         call       finish_up                                   ; finish_up, CODE XREF=skip+687, skip+696, skip+775
00000000000059f4         mov        edi, 0x1                                    ; argument "__status" for method j_exit
00000000000059f9         call       j_exit                                      ; exit
                        ; endp

                     loc_59fe:
00000000000059fe         mov        rdx, qword [rsp+0xe8+var_E8]                ; CODE XREF=skip+624
0000000000005a02         mov        esi, 0x3
0000000000005a07         xor        edi, edi

                     loc_5a09:
0000000000005a09         call       quotearg_n_style_colon                      ; quotearg_n_style_colon, CODE XREF=skip+467
0000000000005a0e         lea        rsi, qword [aSCannotSeek]                   ; "%s: cannot seek"
0000000000005a15         mov        rbx, rax
0000000000005a18         mov        edx, 0x5

                     loc_5a1d:
0000000000005a1d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=skip+493
0000000000005a1f         call       j_dcgettext                                 ; dcgettext
0000000000005a24         mov        esi, dword [rsp+0xe8+var_DC]
0000000000005a28         mov        rdx, rax
0000000000005a2b         mov        rcx, rbx
0000000000005a2e         xor        edi, edi
0000000000005a30         xor        eax, eax
0000000000005a32         call       nl_error                                    ; nl_error
0000000000005a37         jmp        loc_59ef

                     loc_5a39:
0000000000005a39         xor        eax, eax                                    ; CODE XREF=skip+346
0000000000005a3b         jmp        loc_57ca

                     loc_5a40:
0000000000005a40         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=skip+171
                        ; endp

                     loc_5a45:
0000000000005a45         mov        rsi, qword [rsp+0xe8+var_E8]                ; CODE XREF=skip+517
0000000000005a49         mov        edi, 0x4
0000000000005a4e         call       quotearg_style                              ; quotearg_style
0000000000005a53         lea        rsi, qword [aCannotFstatS]                  ; argument "msgid" for method j_dcgettext, "cannot fstat %s"
0000000000005a5a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005a5f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005a61         mov        rbx, rax
0000000000005a64         call       j_dcgettext                                 ; dcgettext
0000000000005a69         mov        esi, dword [r15]
0000000000005a6c         mov        rdx, rax
0000000000005a6f         mov        rcx, rbx
0000000000005a72         mov        edi, 0x1
0000000000005a77         xor        eax, eax
0000000000005a79         call       nl_error                                    ; nl_error
0000000000005a7e         nop                                                    ; End of unwind block (FDE at 0xf7b8)
                     write_output:
0000000000005a80         mov        rsi, qword [output_blocksize]               ; Begin of unwind block (FDE at 0xf804), output_blocksize, CODE XREF=main+3336, main+4948, main+5253, main+5358, sub_5bc0, sub_5bc0+88, copy_with_unblock+247, copy_with_unblock+311
0000000000005a87         mov        rdi, qword [obuf]                           ; obuf
0000000000005a8e         push       r12
0000000000005a90         push       rbp
0000000000005a91         push       rbx
0000000000005a92         call       iwrite.constprop.7                          ; iwrite.constprop.7
0000000000005a97         add        qword [w_bytes], rax                        ; w_bytes
0000000000005a9e         cmp        qword [output_blocksize], rax               ; output_blocksize
0000000000005aa5         jne        loc_5abf

0000000000005aa7         pop        rbx
0000000000005aa8         add        qword [w_full], 0x1                         ; w_full
0000000000005ab0         mov        qword [oc], 0x0                             ; oc
0000000000005abb         pop        rbp
0000000000005abc         pop        r12
0000000000005abe         ret
                        ; endp

                     loc_5abf:
0000000000005abf         mov        rsi, qword [output_file]                    ; output_file, CODE XREF=write_output+37
0000000000005ac6         mov        edi, 0x4
0000000000005acb         mov        rbx, rax
0000000000005ace         call       quotearg_style                              ; quotearg_style
0000000000005ad3         lea        rsi, qword [aWritingToS]                    ; argument "msgid" for method j_dcgettext, "writing to %s"
0000000000005ada         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005adc         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005ae1         mov        r12, rax
0000000000005ae4         call       j_dcgettext                                 ; dcgettext
0000000000005ae9         mov        rbp, rax
0000000000005aec         call       j___errno_location                          ; __errno_location
0000000000005af1         mov        esi, dword [rax]
0000000000005af3         xor        edi, edi
0000000000005af5         xor        eax, eax
0000000000005af7         mov        rcx, r12
0000000000005afa         mov        rdx, rbp
0000000000005afd         call       nl_error                                    ; nl_error
0000000000005b02         test       rbx, rbx
0000000000005b05         je         loc_5b0f

0000000000005b07         add        qword [w_partial], 0x1                      ; w_partial

                     loc_5b0f:
0000000000005b0f         call       finish_up                                   ; finish_up, CODE XREF=write_output+133
0000000000005b14         mov        edi, 0x1                                    ; argument "__status" for method j_exit
0000000000005b19         call       j_exit                                      ; exit
                        ; endp
0000000000005b1e         align      32                                          ; End of unwind block (FDE at 0xf804)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     copy_with_block:
0000000000005b20         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0xf830), CODE XREF=main+3963, main+6459
0000000000005b23         je         loc_5c30

0000000000005b29         push       r12
0000000000005b2b         lea        r12, qword [rdi+rsi]
0000000000005b2f         push       rbp
0000000000005b30         mov        rbp, rdi
0000000000005b33         push       rbx
0000000000005b34         jmp        loc_5b88
0000000000005b36         align      64

                     loc_5b40:
0000000000005b40         cmp        rdx, rbx                                    ; CODE XREF=copy_with_block+128
0000000000005b43         je         loc_5c08

0000000000005b49         jbe        loc_5b74

0000000000005b4b         mov        rcx, qword [oc]                             ; oc
0000000000005b52         mov        rsi, qword [obuf]                           ; obuf
0000000000005b59         lea        rdx, qword [rcx+1]
0000000000005b5d         cmp        rdx, qword [output_blocksize]               ; output_blocksize
0000000000005b64         mov        byte [rsi+rcx], al
0000000000005b67         mov        qword [oc], rdx                             ; oc
0000000000005b6e         jae        loc_5c18

                     loc_5b74:
0000000000005b74         add        rbp, 0x1                                    ; CODE XREF=copy_with_block+41, sub_5bc0+80, sub_5bc0+100
0000000000005b78         add        rbx, 0x1
0000000000005b7c         cmp        r12, rbp
0000000000005b7f         mov        qword [col], rbx                            ; col
0000000000005b86         je         loc_5bbb

                     loc_5b88:
0000000000005b88         movzx      eax, byte [rbp]                             ; CODE XREF=copy_with_block+20, copy_with_block+153
0000000000005b8c         mov        rbx, qword [col]                            ; col
0000000000005b93         cmp        al, byte [newline_character]                ; newline_character
0000000000005b99         mov        rdx, qword [conversion_blocksize]           ; conversion_blocksize
0000000000005ba0         jne        loc_5b40

0000000000005ba2         cmp        rdx, rbx
0000000000005ba5         ja         loc_5bd2

                     loc_5ba7:
0000000000005ba7         add        rbp, 0x1                                    ; CODE XREF=sub_5bc0+16
0000000000005bab         mov        qword [col], 0x0                            ; col
0000000000005bb6         cmp        r12, rbp
0000000000005bb9         jne        loc_5b88

                     loc_5bbb:
0000000000005bbb         pop        rbx                                         ; CODE XREF=copy_with_block+102
0000000000005bbc         pop        rbp
0000000000005bbd         pop        r12
0000000000005bbf         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5bc0:
0000000000005bc0         call       write_output                                ; write_output, CODE XREF=sub_5bc0+63
                        ; endp

                     loc_5bc5:
0000000000005bc5         add        rbx, 0x1                                    ; CODE XREF=sub_5bc0+61
0000000000005bc9         cmp        qword [conversion_blocksize], rbx           ; conversion_blocksize
0000000000005bd0         jbe        loc_5ba7

                     loc_5bd2:
0000000000005bd2         mov        rdx, qword [oc]                             ; oc, CODE XREF=copy_with_block+133
0000000000005bd9         movzx      esi, byte [space_character]                 ; space_character
0000000000005be0         mov        rcx, qword [obuf]                           ; obuf
0000000000005be7         lea        rax, qword [rdx+1]
0000000000005beb         cmp        rax, qword [output_blocksize]               ; output_blocksize
0000000000005bf2         mov        byte [rcx+rdx], sil
0000000000005bf6         mov        qword [oc], rax                             ; oc
0000000000005bfd         jb         loc_5bc5

0000000000005bff         jmp        sub_5bc0                                    ; sub_5bc0
                        ; endp
0000000000005c01         align      8

                     loc_5c08:
0000000000005c08         add        qword [r_truncate], 0x1                     ; r_truncate, CODE XREF=copy_with_block+35
0000000000005c10         jmp        loc_5b74
0000000000005c15         align      8

                     loc_5c18:
0000000000005c18         call       write_output                                ; write_output, CODE XREF=copy_with_block+78
0000000000005c1d         mov        rbx, qword [col]                            ; col
0000000000005c24         jmp        loc_5b74
0000000000005c29         align      16

                     loc_5c30:
0000000000005c30         ret                                                    ; CODE XREF=copy_with_block+3
                        ; endp
0000000000005c32         align      64                                          ; End of unwind block (FDE at 0xf830)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     copy_with_unblock:
0000000000005c40         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0xf864), CODE XREF=main+2491, main+6487
0000000000005c43         je         loc_5da8

0000000000005c49         push       r13
0000000000005c4b         push       r12
0000000000005c4d         mov        r12, rdi
0000000000005c50         push       rbp
0000000000005c51         push       rbx
0000000000005c52         mov        rbp, rsi
0000000000005c55         xor        ebx, ebx
0000000000005c57         sub        rsp, 0x8
0000000000005c5b         jmp        loc_5cb8
0000000000005c5d         align      32

                     loc_5c60:
0000000000005c60         mov        rdx, qword [oc]                             ; oc, CODE XREF=copy_with_unblock+150
0000000000005c67         sub        rbx, 0x1
0000000000005c6b         movzx      esi, byte [newline_character]               ; newline_character
0000000000005c72         mov        rcx, qword [obuf]                           ; obuf
0000000000005c79         mov        qword [pending_spaces.7443], 0x0            ; pending_spaces.7443
0000000000005c84         mov        qword [col], 0x0                            ; col
0000000000005c8f         lea        rax, qword [rdx+1]
0000000000005c93         cmp        rax, qword [output_blocksize]               ; output_blocksize
0000000000005c9a         mov        byte [rcx+rdx], sil
0000000000005c9e         mov        qword [oc], rax                             ; oc
0000000000005ca5         jae        loc_5d73

                     loc_5cab:
0000000000005cab         add        rbx, 0x1                                    ; CODE XREF=copy_with_unblock+301, copy_with_unblock+347
0000000000005caf         cmp        rbp, rbx
0000000000005cb2         jbe        loc_5d85

                     loc_5cb8:
0000000000005cb8         mov        rax, qword [col]                            ; col, CODE XREF=copy_with_unblock+27, copy_with_unblock+319
0000000000005cbf         cmp        rax, qword [conversion_blocksize]           ; conversion_blocksize
0000000000005cc6         movzx      r13d, byte [r12+rbx]
0000000000005ccb         lea        rdx, qword [rax+1]
0000000000005ccf         mov        qword [col], rdx                            ; col
0000000000005cd6         jae        loc_5c60

0000000000005cd8         movzx      ecx, byte [space_character]                 ; space_character
0000000000005cdf         mov        rdx, qword [pending_spaces.7443]            ; pending_spaces.7443
0000000000005ce6         cmp        cl, r13b
0000000000005ce9         je         loc_5d90

0000000000005cef         test       rdx, rdx
0000000000005cf2         mov        rdi, qword [obuf]                           ; obuf
0000000000005cf9         mov        rax, qword [oc]                             ; oc
0000000000005d00         mov        rsi, qword [output_blocksize]               ; output_blocksize
0000000000005d07         jne        loc_5d24

0000000000005d09         jmp        loc_5da0
0000000000005d0e         align      16

                     loc_5d10:
0000000000005d10         sub        qword [pending_spaces.7443], 0x1            ; pending_spaces.7443, CODE XREF=copy_with_unblock+245
0000000000005d18         je         loc_5d5b

                     loc_5d1a:
0000000000005d1a         movzx      ecx, byte [space_character]                 ; space_character, CODE XREF=copy_with_unblock+281
0000000000005d21         mov        rax, rdx

                     loc_5d24:
0000000000005d24         lea        rdx, qword [rax+1]                          ; CODE XREF=copy_with_unblock+199
0000000000005d28         mov        byte [rdi+rax], cl
0000000000005d2b         cmp        rdx, rsi
0000000000005d2e         mov        qword [oc], rdx                             ; oc
0000000000005d35         jb         loc_5d10

0000000000005d37         call       write_output                                ; write_output
0000000000005d3c         sub        qword [pending_spaces.7443], 0x1            ; pending_spaces.7443
0000000000005d44         mov        rdi, qword [obuf]                           ; obuf
0000000000005d4b         mov        rdx, qword [oc]                             ; oc
0000000000005d52         mov        rsi, qword [output_blocksize]               ; output_blocksize
0000000000005d59         jne        loc_5d1a

                     loc_5d5b:
0000000000005d5b         lea        rax, qword [rdx+1]                          ; CODE XREF=copy_with_unblock+216, copy_with_unblock+355
0000000000005d5f         mov        byte [rdi+rdx], r13b
0000000000005d63         cmp        rax, rsi
0000000000005d66         mov        qword [oc], rax                             ; oc
0000000000005d6d         jb         loc_5cab

                     loc_5d73:
0000000000005d73         add        rbx, 0x1                                    ; CODE XREF=copy_with_unblock+101
0000000000005d77         call       write_output                                ; write_output
0000000000005d7c         cmp        rbp, rbx
0000000000005d7f         ja         loc_5cb8

                     loc_5d85:
0000000000005d85         add        rsp, 0x8                                    ; CODE XREF=copy_with_unblock+114
0000000000005d89         pop        rbx
0000000000005d8a         pop        rbp
0000000000005d8b         pop        r12
0000000000005d8d         pop        r13
0000000000005d8f         ret
                        ; endp

                     loc_5d90:
0000000000005d90         add        rdx, 0x1                                    ; CODE XREF=copy_with_unblock+169
0000000000005d94         mov        qword [pending_spaces.7443], rdx            ; pending_spaces.7443
0000000000005d9b         jmp        loc_5cab

                     loc_5da0:
0000000000005da0         mov        rdx, rax                                    ; CODE XREF=copy_with_unblock+201
0000000000005da3         jmp        loc_5d5b
0000000000005da5         align      8

                     loc_5da8:
0000000000005da8         ret                                                    ; CODE XREF=copy_with_unblock+3
                        ; endp
0000000000005daa         align      16                                          ; End of unwind block (FDE at 0xf864)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
0000000000005db0         push       r12                                         ; Begin of unwind block (FDE at 0xf914), CODE XREF=maybe_close_stdout+20, close_stdout+13, close_stdout+51
0000000000005db2         push       rbp
0000000000005db3         mov        rbp, rdi
0000000000005db6         push       rbx
0000000000005db7         call       j___fpending                                ; __fpending
0000000000005dbc         mov        ebx, dword [rbp]
0000000000005dbf         mov        rdi, rbp
0000000000005dc2         mov        r12, rax
0000000000005dc5         call       rpl_fclose                                  ; rpl_fclose
0000000000005dca         and        ebx, 0x20
0000000000005dcd         test       ebx, ebx
0000000000005dcf         jne        loc_5de8

0000000000005dd1         test       eax, eax
0000000000005dd3         je         loc_5ddf

0000000000005dd5         test       r12, r12
0000000000005dd8         mov        eax, 0xffffffff
0000000000005ddd         je         loc_5e18

                     loc_5ddf:
0000000000005ddf         pop        rbx                                         ; CODE XREF=close_stream+35
0000000000005de0         pop        rbp
0000000000005de1         pop        r12
0000000000005de3         ret
                        ; endp
0000000000005de4         align      8

                     loc_5de8:
0000000000005de8         test       eax, eax                                    ; CODE XREF=close_stream+31
0000000000005dea         jne        loc_5e08

0000000000005dec         call       j___errno_location                          ; __errno_location
0000000000005df1         mov        dword [rax], 0x0
0000000000005df7         mov        eax, 0xffffffff
0000000000005dfc         pop        rbx
0000000000005dfd         pop        rbp
0000000000005dfe         pop        r12
0000000000005e00         ret
                        ; endp
0000000000005e01         align      8

                     loc_5e08:
0000000000005e08         pop        rbx                                         ; CODE XREF=close_stream+58
0000000000005e09         mov        eax, 0xffffffff
0000000000005e0e         pop        rbp
0000000000005e0f         pop        r12
0000000000005e11         ret
                        ; endp
0000000000005e12         align      8

                     loc_5e18:
0000000000005e18         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
0000000000005e1d         cmp        dword [rax], 0x9
0000000000005e20         pop        rbx
0000000000005e21         pop        rbp
0000000000005e22         pop        r12
0000000000005e24         setne      al
0000000000005e27         movzx      eax, al
0000000000005e2a         neg        eax
0000000000005e2c         ret
                        ; endp
0000000000005e2d         align      16                                          ; End of unwind block (FDE at 0xf914)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000005e30         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0xf964), file_name
0000000000005e37         ret
                        ; endp
0000000000005e38         align      64                                          ; End of unwind block (FDE at 0xf964)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000005e40         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0xf978), ignore_EPIPE
0000000000005e47         ret
                        ; endp
0000000000005e48         align      16                                          ; End of unwind block (FDE at 0xf978)

                     close_stdout:
0000000000005e50         push       rbp                                         ; Begin of unwind block (FDE at 0xf98c), CODE XREF=j_close_stdout
0000000000005e51         push       rbx
0000000000005e52         sub        rsp, 0x8
0000000000005e56         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005e5d         call       close_stream                                ; close_stream
0000000000005e62         test       eax, eax
0000000000005e64         je         loc_5e7c

0000000000005e66         call       j___errno_location                          ; __errno_location
0000000000005e6b         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
0000000000005e72         mov        rbx, rax
0000000000005e75         je         loc_5e93

0000000000005e77         cmp        dword [rax], 0x20
0000000000005e7a         jne        loc_5e93

                     loc_5e7c:
0000000000005e7c         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
0000000000005e83         call       close_stream                                ; close_stream
0000000000005e88         test       eax, eax
0000000000005e8a         jne        loc_5ed2

0000000000005e8c         add        rsp, 0x8
0000000000005e90         pop        rbx
0000000000005e91         pop        rbp
0000000000005e92         ret
                        ; endp

                     loc_5e93:
0000000000005e93         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
0000000000005e9a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005e9c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005ea1         call       j_dcgettext                                 ; dcgettext
0000000000005ea6         mov        rdi, qword [file_name]                      ; file_name
0000000000005ead         mov        rbp, rax
0000000000005eb0         test       rdi, rdi
0000000000005eb3         je         loc_5edd

0000000000005eb5         call       quotearg_colon                              ; quotearg_colon
0000000000005eba         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000005ebc         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000005ec3         mov        rcx, rax
0000000000005ec6         mov        r8, rbp
0000000000005ec9         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005ecb         xor        eax, eax
0000000000005ecd         call       j_error                                     ; error

                     loc_5ed2:
0000000000005ed2         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000005ed8         call       j__exit                                     ; _exit
                        ; endp

                     loc_5edd:
0000000000005edd         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
0000000000005edf         lea        rdx, qword [aLuBytesSCopied+27]             ; argument "__format" for method j_error, 0xc66c
0000000000005ee6         mov        rcx, rax
0000000000005ee9         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005eeb         xor        eax, eax
0000000000005eed         call       j_error                                     ; error
0000000000005ef2         jmp        loc_5ed2
0000000000005ef4         align      256                                         ; End of unwind block (FDE at 0xf98c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fd_reopen:
0000000000005f00         push       r13                                         ; Begin of unwind block (FDE at 0xf9bc), CODE XREF=ifd_reopen+50
0000000000005f02         push       r12
0000000000005f04         xor        eax, eax
0000000000005f06         push       rbp
0000000000005f07         push       rbx
0000000000005f08         mov        ebp, edi
0000000000005f0a         mov        rdi, rsi                                    ; argument "__file" for method j_open
0000000000005f0d         mov        esi, edx                                    ; argument "__oflag" for method j_open
0000000000005f0f         mov        edx, ecx
0000000000005f11         sub        rsp, 0x8
0000000000005f15         call       j_open                                      ; open
0000000000005f1a         cmp        ebp, eax
0000000000005f1c         mov        ebx, eax
0000000000005f1e         je         loc_5f49

0000000000005f20         test       eax, eax
0000000000005f22         js         loc_5f49

0000000000005f24         mov        esi, ebp                                    ; argument "__fd2" for method j_dup2
0000000000005f26         mov        edi, eax                                    ; argument "__fd" for method j_dup2
0000000000005f28         call       j_dup2                                      ; dup2
0000000000005f2d         mov        r12d, eax
0000000000005f30         call       j___errno_location                          ; __errno_location
0000000000005f35         mov        r13d, dword [rax]
0000000000005f38         mov        rbp, rax
0000000000005f3b         mov        edi, ebx                                    ; argument "__fd" for method j_close
0000000000005f3d         call       j_close                                     ; close
0000000000005f42         mov        ebx, r12d
0000000000005f45         mov        dword [rbp], r13d

                     loc_5f49:
0000000000005f49         add        rsp, 0x8                                    ; CODE XREF=fd_reopen+30, fd_reopen+34
0000000000005f4d         mov        eax, ebx
0000000000005f4f         pop        rbx
0000000000005f50         pop        rbp
0000000000005f51         pop        r12
0000000000005f53         pop        r13
0000000000005f55         ret
                        ; endp
0000000000005f56         align      32                                          ; End of unwind block (FDE at 0xf9bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     gethrxtime:
0000000000005f60         push       rbx                                         ; Begin of unwind block (FDE at 0xf9f4), CODE XREF=main+1731, main+2509, print_xfer_stats+640
0000000000005f61         mov        edi, 0x1                                    ; argument "__clock_id" for method j_clock_gettime
0000000000005f66         sub        rsp, 0x20
0000000000005f6a         mov        rbx, rsp
0000000000005f6d         mov        rsi, rbx                                    ; argument "__tp" for method j_clock_gettime
0000000000005f70         mov        rax, qword [fs:0x28]
0000000000005f79         mov        qword [rsp+0x28+var_10], rax
0000000000005f7e         xor        eax, eax
0000000000005f80         call       j_clock_gettime                             ; clock_gettime
0000000000005f85         test       eax, eax
0000000000005f87         je         loc_5f91

0000000000005f89         mov        rdi, rbx
0000000000005f8c         call       gettime                                     ; gettime

                     loc_5f91:
0000000000005f91         mov        rcx, qword [rsp+0x28+var_20]                ; CODE XREF=gethrxtime+39
0000000000005f96         movabs     rdx, 0x112e0be826d694b3
0000000000005fa0         mov        rax, rcx
0000000000005fa3         imul       rdx
0000000000005fa6         mov        rax, rcx
0000000000005fa9         sar        rax, 0x3f
0000000000005fad         sar        rdx, 0x1a
0000000000005fb1         sub        rdx, rax
0000000000005fb4         mov        rax, qword [rsp+0x28+var_28]
0000000000005fb8         add        rax, rdx
0000000000005fbb         imul       rdx, rdx, 0x3b9aca00
0000000000005fc2         imul       rax, rax, 0x3b9aca00
0000000000005fc9         sub        rcx, rdx
0000000000005fcc         add        rax, rcx
0000000000005fcf         mov        rsi, qword [rsp+0x28+var_10]
0000000000005fd4         xor        rsi, qword [fs:0x28]
0000000000005fdd         jne        loc_5fe5

0000000000005fdf         add        rsp, 0x20
0000000000005fe3         pop        rbx
0000000000005fe4         ret
                        ; endp

                     loc_5fe5:
0000000000005fe5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=gethrxtime+125
                        ; endp
0000000000005fea         align      16                                          ; End of unwind block (FDE at 0xf9f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettime:
0000000000005ff0         mov        rsi, rdi                                    ; Begin of unwind block (FDE at 0xfa1c), argument "__tp" for method j_clock_gettime, CODE XREF=gethrxtime+44
0000000000005ff3         xor        edi, edi                                    ; argument "__clock_id" for method j_clock_gettime
0000000000005ff5         jmp        j_clock_gettime                             ; clock_gettime
                        ; endp
0000000000005ffa         align      8192                                        ; End of unwind block (FDE at 0xfa1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     current_timespec:
0000000000006000         sub        rsp, 0x28                                   ; Begin of unwind block (FDE at 0xfa30)
0000000000006004         xor        edi, edi                                    ; argument "__clock_id" for method j_clock_gettime
0000000000006006         mov        rsi, rsp                                    ; argument "__tp" for method j_clock_gettime
0000000000006009         mov        rax, qword [fs:0x28]
0000000000006012         mov        qword [rsp+0x28+var_10], rax
0000000000006017         xor        eax, eax
0000000000006019         call       j_clock_gettime                             ; clock_gettime
000000000000601e         mov        rcx, qword [rsp+0x28+var_10]
0000000000006023         xor        rcx, qword [fs:0x28]
000000000000602c         mov        rax, qword [rsp+0x28+var_28]
0000000000006030         mov        rdx, qword [rsp+0x28+var_20]
0000000000006035         jne        loc_603c

0000000000006037         add        rsp, 0x28
000000000000603b         ret
                        ; endp

                     loc_603c:
000000000000603c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=current_timespec+53
                        ; endp
0000000000006041         align      16                                          ; End of unwind block (FDE at 0xfa30)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_A: int16_t, -10
        ;    var_C: int16_t, -12
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32


                     adjust_value.part.0:
0000000000006050         fld        dword [dword_e1e4]                          ; Begin of unwind block (FDE at 0xfa4c), dword_e1e4, CODE XREF=human_readable+1400, human_readable+1434, human_readable+1960
0000000000006056         fld        tword [rsp+arg_0]
000000000000605a         fucomi     st1
000000000000605c         jae        loc_60d0

000000000000605e         fstp       st1
0000000000006060         fnstcw     word [rsp+var_A]
0000000000006064         movzx      eax, word [rsp+var_A]
0000000000006069         or         ah, 0xc
000000000000606c         mov        word [rsp+var_C], ax
0000000000006071         fld        st0
0000000000006073         fldcw      word [rsp+var_C]
0000000000006077         fistp      qword [rsp+var_18]
000000000000607b         fldcw      word [rsp+var_A]
000000000000607f         mov        rax, qword [rsp+var_18]

                     loc_6084:
0000000000006084         mov        qword [rsp+var_20], rax                     ; CODE XREF=adjust_value.part.0+179
0000000000006089         test       rax, rax
000000000000608c         fild       qword [rsp+var_20]
0000000000006090         jns        loc_6098

0000000000006092         fadd       dword [dword_e1e8]                          ; dword_e1e8

                     loc_6098:
0000000000006098         test       edi, edi                                    ; CODE XREF=adjust_value.part.0+64
000000000000609a         jne        loc_60c8

000000000000609c         fxch       st1
000000000000609e         fucomip    st1
00000000000060a0         jp         loc_60a8

00000000000060a2         je         loc_60ca

00000000000060a4         fstp       st0
00000000000060a6         jmp        loc_60b0

                     loc_60a8:
00000000000060a8         fstp       st0                                         ; CODE XREF=adjust_value.part.0+80
00000000000060aa         nop        word [rax+rax]

                     loc_60b0:
00000000000060b0         add        rax, 0x1                                    ; CODE XREF=adjust_value.part.0+86
00000000000060b4         mov        qword [rsp+var_20], rax
00000000000060b9         test       rax, rax
00000000000060bc         fild       qword [rsp+var_20]
00000000000060c0         js         loc_6110

00000000000060c2         jmp        loc_60ca
00000000000060c4         align      8

                     loc_60c8:
00000000000060c8         fstp       st1                                         ; CODE XREF=adjust_value.part.0+74

                     loc_60ca:
00000000000060ca         ret                                                    ; CODE XREF=adjust_value.part.0+82, adjust_value.part.0+114
                        ; endp
00000000000060cc         align      16

                     loc_60d0:
00000000000060d0         fnstcw     word [rsp+var_A]                            ; CODE XREF=adjust_value.part.0+12
00000000000060d4         movzx      eax, word [rsp+var_A]
00000000000060d9         fsubr      st1, st0
00000000000060db         fxch       st1
00000000000060dd         movabs     rdx, 0x8000000000000000
00000000000060e7         or         ah, 0xc
00000000000060ea         mov        word [rsp+var_C], ax
00000000000060ef         fldcw      word [rsp+var_C]
00000000000060f3         fistp      qword [rsp+var_18]
00000000000060f7         fldcw      word [rsp+var_A]
00000000000060fb         mov        rax, qword [rsp+var_18]
0000000000006100         xor        rax, rdx
0000000000006103         jmp        loc_6084
0000000000006108         align      16

                     loc_6110:
0000000000006110         fadd       dword [dword_e1e8]                          ; dword_e1e8, CODE XREF=adjust_value.part.0+112
0000000000006116         ret
                        ; endp
0000000000006117         align      32                                          ; End of unwind block (FDE at 0xfa4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_78: int8_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_94: int32_t, -148
        ;    var_98: int32_t, -152
        ;    var_A8: int32_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D8: -216


                     human_readable:
0000000000006120         push       r15                                         ; Begin of unwind block (FDE at 0xfa60), CODE XREF=print_xfer_stats+82, print_xfer_stats+120, print_xfer_stats+203, alloc_ibuf.part.4+131, alloc_obuf.part.5+131
0000000000006122         push       r14
0000000000006124         mov        eax, edx
0000000000006126         push       r13
0000000000006128         push       r12
000000000000612a         mov        r15d, edx
000000000000612d         push       rbp
000000000000612e         push       rbx
000000000000612f         and        eax, 0x20
0000000000006132         and        r15d, 0x3
0000000000006136         mov        r12d, edx
0000000000006139         mov        rbx, rdi
000000000000613c         sub        rsp, 0x98
0000000000006143         mov        qword [rsp+0xc8+var_B0], rcx
0000000000006148         mov        dword [rsp+0xc8+var_98], eax
000000000000614c         mov        rcx, qword [fs:0x28]
0000000000006155         mov        qword [rsp+0xc8+var_40], rcx
000000000000615d         xor        ecx, ecx
000000000000615f         cmp        eax, 0x1
0000000000006162         mov        qword [rsp+0xc8+var_C8], rsi
0000000000006166         mov        qword [rsp+0xc8+var_B8], r8
000000000000616b         sbb        eax, eax
000000000000616d         and        eax, 0xffffffe8
0000000000006170         add        eax, 0x400
0000000000006175         mov        dword [rsp+0xc8+var_94], eax
0000000000006179         call       j_localeconv                                ; localeconv
000000000000617e         mov        r14, qword [rax]
0000000000006181         mov        r13, rax
0000000000006184         mov        rdi, r14                                    ; argument "__s" for method j_strlen
0000000000006187         call       j_strlen                                    ; strlen
000000000000618c         mov        rcx, qword [r13+0x10]
0000000000006190         mov        r13, qword [r13+8]
0000000000006194         mov        rbp, rax
0000000000006197         sub        rax, 0x1
000000000000619b         mov        edx, 0x1
00000000000061a0         cmp        rax, 0x10
00000000000061a4         lea        rax, qword [aWriteError+12]                 ; 0xe189
00000000000061ab         mov        rdi, r13                                    ; argument "__s" for method j_strlen
00000000000061ae         cmovae     rbp, rdx
00000000000061b2         mov        qword [rsp+0xc8+var_90], rcx
00000000000061b7         cmovae     r14, rax
00000000000061bb         call       j_strlen                                    ; strlen
00000000000061c0         cmp        rax, 0x11
00000000000061c4         lea        rax, qword [aWrittenBySSAnd+27]             ; 0xe7a1
00000000000061cb         mov        rdi, qword [rsp+0xc8+var_B8]
00000000000061d0         mov        rcx, qword [rsp+0xc8+var_B0]
00000000000061d5         cmovae     r13, rax
00000000000061d9         mov        rax, qword [rsp+0xc8+var_C8]
00000000000061dd         add        rax, 0x287
00000000000061e3         cmp        rdi, rcx
00000000000061e6         mov        qword [rsp+0xc8+var_C0], rax
00000000000061eb         ja         loc_6338

00000000000061f1         xor        edx, edx
00000000000061f3         mov        rax, rcx
00000000000061f6         div        rdi
00000000000061f9         test       rdx, rdx
00000000000061fc         mov        rdi, rax
00000000000061ff         je         loc_6560

                     loc_6205:
0000000000006205         mov        qword [rsp+0xc8+var_B0], rcx                ; CODE XREF=human_readable+539, human_readable+561, human_readable+1106
000000000000620a         test       rcx, rcx
000000000000620d         fild       qword [rsp+0xc8+var_B0]
0000000000006211         jns        loc_6219

0000000000006213         fadd       dword [dword_e1e8]                          ; dword_e1e8

                     loc_6219:
0000000000006219         mov        rax, qword [rsp+0xc8+var_B8]                ; CODE XREF=human_readable+241
000000000000621e         mov        qword [rsp+0xc8+var_B0], rax
0000000000006223         test       rax, rax
0000000000006226         fild       qword [rsp+0xc8+var_B0]
000000000000622a         jns        loc_6232

000000000000622c         fadd       dword [dword_e1e8]                          ; dword_e1e8

                     loc_6232:
0000000000006232         fdivp      st1                                         ; CODE XREF=human_readable+266
0000000000006234         mov        qword [rsp+0xc8+var_B0], rbx
0000000000006239         test       rbx, rbx
000000000000623c         fild       qword [rsp+0xc8+var_B0]
0000000000006240         jns        loc_6248

0000000000006242         fadd       dword [dword_e1e8]                          ; dword_e1e8

                     loc_6248:
0000000000006248         test       r12b, 0x10                                  ; CODE XREF=human_readable+288
000000000000624c         fmulp      st1
000000000000624e         je         loc_6418

0000000000006254         fild       dword [rsp+0xc8+var_94]
0000000000006258         xor        ebx, ebx
000000000000625a         fld        st0
000000000000625c         jmp        loc_6264
000000000000625e         align      32

                     loc_6260:
0000000000006260         fstp       st1                                         ; CODE XREF=human_readable+340
0000000000006262         fxch       st2

                     loc_6264:
0000000000006264         fld        st0                                         ; CODE XREF=human_readable+316
0000000000006266         add        ebx, 0x1
0000000000006269         fmul       st2
000000000000626b         fxch       st3
000000000000626d         fucomi     st3
000000000000626f         jb         loc_6280

0000000000006271         cmp        ebx, 0x8
0000000000006274         jne        loc_6260

0000000000006276         fstp       st2
0000000000006278         fstp       st2
000000000000627a         jmp        loc_6284
000000000000627c         align      128

                     loc_6280:
0000000000006280         fstp       st2                                         ; CODE XREF=human_readable+335
0000000000006282         fstp       st2

                     loc_6284:
0000000000006284         mov        ecx, dword [rsp+0xc8+var_98]                ; CODE XREF=human_readable+346
0000000000006288         add        rbp, 0x1
000000000000628c         xor        eax, eax
000000000000628e         fdivrp     st1
0000000000006290         test       ecx, ecx
0000000000006292         sete       al
0000000000006295         cmp        r15d, 0x1
0000000000006299         lea        rax, qword [rbp+rax+1]
000000000000629e         mov        qword [rsp+0xc8+var_B0], rax
00000000000062a3         je         loc_6810

00000000000062a9         fld        tword [dword_e1ec+4]                        ; 0xe1f0
00000000000062af         fucomip    st1
00000000000062b1         ja         loc_6688

00000000000062b7         fld        st0

                     loc_62b9:
00000000000062b9         fstp       tword [rsp+0xc8+var_A8]                     ; CODE XREF=human_readable+1411
00000000000062bd         sub        rsp, 0x10
00000000000062c1         lea        rcx, qword [a1lf]                           ; "%.1Lf"
00000000000062c8         mov        esi, 0x1
00000000000062cd         mov        rdx, 0xffffffffffffffff
00000000000062d4         xor        eax, eax
00000000000062d6         mov        r14, qword [rsp+0xd8+var_C8]
00000000000062db         mov        rdi, r14
00000000000062de         fstp       tword [rsp+0xd8+var_D8]
00000000000062e1         call       j___sprintf_chk                             ; __sprintf_chk
00000000000062e6         mov        rdi, r14                                    ; argument "__s" for method j_strlen
00000000000062e9         call       j_strlen                                    ; strlen
00000000000062ee         pop        rcx
00000000000062ef         pop        rsi
00000000000062f0         cmp        rax, qword [rsp+0xc8+var_B0]
00000000000062f5         mov        r14, rax
00000000000062f8         fld        tword [rsp+0xc8+var_A8]
00000000000062fc         ja         loc_68a8

                     loc_6302:
0000000000006302         test       r12b, 0x8                                   ; CODE XREF=human_readable+1845
0000000000006306         je         loc_6470

000000000000630c         mov        rax, qword [rsp+0xc8+var_C8]
0000000000006310         cmp        byte [rax+r14-1], 0x30
0000000000006316         jne        loc_6478

000000000000631c         fld        dword [dword_e1ec]                          ; dword_e1ec
0000000000006322         cmp        r15d, 0x1
0000000000006326         fmul       st1, st0
0000000000006328         jne        loc_68b0

000000000000632e         jmp        loc_6863
0000000000006333         align      8

                     loc_6338:
0000000000006338         test       rcx, rcx                                    ; CODE XREF=human_readable+203
000000000000633b         je         loc_6205

0000000000006341         mov        rax, qword [rsp+0xc8+var_B8]
0000000000006346         xor        edx, edx
0000000000006348         div        rcx
000000000000634b         test       rdx, rdx
000000000000634e         mov        r8, rax
0000000000006351         jne        loc_6205

0000000000006357         mov        rax, rbx
000000000000635a         xor        edx, edx
000000000000635c         div        r8
000000000000635f         mov        rbx, rax
0000000000006362         lea        rax, qword [rdx+rdx*4]
0000000000006366         xor        edx, edx
0000000000006368         mov        rsi, rbx
000000000000636b         add        rax, rax
000000000000636e         div        r8
0000000000006371         add        rdx, rdx
0000000000006374         mov        r9d, eax
0000000000006377         cmp        r8, rdx
000000000000637a         jbe        loc_6908

0000000000006380         xor        edi, edi
0000000000006382         test       rdx, rdx
0000000000006385         setne      dil

                     loc_6389:
0000000000006389         mov        ecx, r12d                                   ; CODE XREF=human_readable+1117, human_readable+2035
000000000000638c         mov        r8, qword [rsp+0xc8+var_C0]
0000000000006391         mov        ebx, 0xffffffff
0000000000006396         and        ecx, 0x10
0000000000006399         je         loc_6760

000000000000639f         mov        r8d, dword [rsp+0xc8+var_94]
00000000000063a4         cmp        r8, rsi
00000000000063a7         mov        r11, r8
00000000000063aa         ja         loc_6920

00000000000063b0         xor        ebx, ebx
00000000000063b2         jmp        loc_63d7
00000000000063b4         align      8

                     loc_63b8:
00000000000063b8         test       edi, edi                                    ; CODE XREF=human_readable+736
00000000000063ba         setne      dil
00000000000063be         movzx      edi, dil

                     loc_63c2:
00000000000063c2         add        ebx, 0x1                                    ; CODE XREF=human_readable+752
00000000000063c5         cmp        r8, r10
00000000000063c8         ja         loc_66dd

00000000000063ce         cmp        ebx, 0x8
00000000000063d1         je         loc_6978

                     loc_63d7:
00000000000063d7         mov        rax, rsi                                    ; CODE XREF=human_readable+658
00000000000063da         xor        edx, edx
00000000000063dc         mov        esi, edi
00000000000063de         div        r8
00000000000063e1         sar        esi, 0x1
00000000000063e3         mov        r10, rax
00000000000063e6         lea        eax, dword [rdx+rdx*4]
00000000000063e9         xor        edx, edx
00000000000063eb         lea        eax, dword [r9+rax*2]
00000000000063ef         div        r11d
00000000000063f2         lea        edx, dword [rsi+rdx*2]
00000000000063f5         mov        r9d, eax
00000000000063f8         mov        rsi, r10
00000000000063fb         add        edi, edx
00000000000063fd         cmp        r11d, edx
0000000000006400         ja         loc_63b8

0000000000006402         cmp        r11d, edi
0000000000006405         setb       dil
0000000000006409         movzx      edi, dil
000000000000640d         add        edi, 0x2
0000000000006410         jmp        loc_63c2
0000000000006412         align      8

                     loc_6418:
0000000000006418         cmp        r15d, 0x1                                   ; CODE XREF=human_readable+302
000000000000641c         je         loc_642c

000000000000641e         fld        tword [dword_e1ec+4]                        ; 0xe1f0
0000000000006424         fucomip    st1
0000000000006426         ja         loc_66b0

                     loc_642c:
000000000000642c         sub        rsp, 0x10                                   ; CODE XREF=human_readable+764, human_readable+1443
0000000000006430         lea        rcx, qword [a0lf]                           ; "%.0Lf"
0000000000006437         mov        esi, 0x1
000000000000643c         mov        rbx, qword [rsp+0xd8+var_C8]
0000000000006441         mov        rdx, 0xffffffffffffffff
0000000000006448         xor        eax, eax
000000000000644a         fstp       tword [rsp+0xd8+var_D8]
000000000000644d         xor        ebp, ebp
000000000000644f         mov        rdi, rbx
0000000000006452         call       j___sprintf_chk                             ; __sprintf_chk
0000000000006457         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
000000000000645a         mov        ebx, 0xffffffff
000000000000645f         call       j_strlen                                    ; strlen
0000000000006464         pop        rsi
0000000000006465         pop        rdi
0000000000006466         mov        r14, rax
0000000000006469         jmp        loc_6480
000000000000646b         align      16

                     loc_6470:
0000000000006470         fstp       st0                                         ; CODE XREF=human_readable+486
0000000000006472         jmp        loc_6480
0000000000006474         align      8

                     loc_6478:
0000000000006478         fstp       st0                                         ; CODE XREF=human_readable+502
000000000000647a         nop        word [rax+rax]

                     loc_6480:
0000000000006480         mov        r15, qword [rsp+0xc8+var_C0]                ; CODE XREF=human_readable+841, human_readable+850, human_readable+1919
0000000000006485         mov        rsi, qword [rsp+0xc8+var_C8]                ; argument "__src" for method j_memmove
0000000000006489         mov        rdx, r14                                    ; argument "__n" for method j_memmove
000000000000648c         sub        r15, r14
000000000000648f         sub        r14, rbp
0000000000006492         mov        rdi, r15                                    ; argument "__dest" for method j_memmove
0000000000006495         call       j_memmove                                   ; memmove
000000000000649a         mov        r8, r14
000000000000649d         add        r8, r15

                     loc_64a0:
00000000000064a0         test       r12b, 0x4                                   ; CODE XREF=human_readable+1702, human_readable+2127
00000000000064a4         jne        loc_6588

                     loc_64aa:
00000000000064aa         test       r12b, 0x80                                  ; CODE XREF=human_readable+1343, human_readable+2562
00000000000064ae         je         loc_6527

00000000000064b0         cmp        ebx, 0xffffffff
00000000000064b3         je         loc_67d0

                     loc_64b9:
00000000000064b9         mov        eax, r12d                                   ; CODE XREF=human_readable+1748, human_readable+1762, human_readable+2148
00000000000064bc         and        eax, 0x100
00000000000064c1         mov        ecx, eax
00000000000064c3         or         ecx, ebx
00000000000064c5         je         loc_6527

00000000000064c7         and        r12d, 0x40
00000000000064cb         jne        loc_6668

                     loc_64d1:
00000000000064d1         test       ebx, ebx                                    ; CODE XREF=human_readable+1375
00000000000064d3         je         loc_6b06

00000000000064d9         cmp        ebx, 0x1
00000000000064dc         jne        loc_64ec

00000000000064de         mov        r9d, dword [rsp+0xc8+var_98]
00000000000064e3         test       r9d, r9d
00000000000064e6         je         loc_6930

                     loc_64ec:
00000000000064ec         lea        rcx, qword [power_letter]                   ; power_letter, CODE XREF=human_readable+956
00000000000064f3         movsxd     rbx, ebx
00000000000064f6         mov        rdi, qword [rsp+0xc8+var_C0]
00000000000064fb         test       eax, eax
00000000000064fd         movzx      ecx, byte [rcx+rbx]
0000000000006501         lea        rdx, qword [rdi+1]
0000000000006505         mov        byte [rdi], cl
0000000000006507         je         loc_6944

000000000000650d         mov        r8d, dword [rsp+0xc8+var_98]
0000000000006512         test       r8d, r8d
0000000000006515         jne        loc_66d0

                     loc_651b:
000000000000651b         lea        rax, qword [rdx+1]                          ; CODE XREF=human_readable+1464, human_readable+2078, human_readable+2541
000000000000651f         mov        byte [rdx], 0x42
0000000000006522         mov        qword [rsp+0xc8+var_C0], rax

                     loc_6527:
0000000000006527         mov        rax, qword [rsp+0xc8+var_C0]                ; CODE XREF=human_readable+910, human_readable+933, human_readable+2089, human_readable+2547
000000000000652c         mov        rcx, qword [rsp+0xc8+var_40]
0000000000006534         xor        rcx, qword [fs:0x28]
000000000000653d         mov        byte [rax], 0x0
0000000000006540         mov        rax, r15
0000000000006543         jne        loc_6adb

0000000000006549         add        rsp, 0x98
0000000000006550         pop        rbx
0000000000006551         pop        rbp
0000000000006552         pop        r12
0000000000006554         pop        r13
0000000000006556         pop        r14
0000000000006558         pop        r15
000000000000655a         ret
                        ; endp
000000000000655b         align      32

                     loc_6560:
0000000000006560         mov        rsi, rbx                                    ; CODE XREF=human_readable+223
0000000000006563         xor        edx, edx
0000000000006565         imul       rsi, rax
0000000000006569         mov        rax, rsi
000000000000656c         div        rdi
000000000000656f         cmp        rax, rbx
0000000000006572         jne        loc_6205

0000000000006578         xor        edi, edi
000000000000657a         xor        r9d, r9d
000000000000657d         jmp        loc_6389
0000000000006582         align      8

                     loc_6588:
0000000000006588         mov        r14, r8                                     ; CODE XREF=human_readable+900
000000000000658b         mov        rdi, r13                                    ; argument "__s" for method j_strlen
000000000000658e         mov        qword [rsp+0xc8+var_80], r8
0000000000006593         sub        r14, r15
0000000000006596         mov        rbp, 0xffffffffffffffff
000000000000659d         call       j_strlen                                    ; strlen
00000000000065a2         lea        rdi, qword [rsp+0xc8+var_78]
00000000000065a7         mov        ecx, 0x29
00000000000065ac         mov        rdx, r14
00000000000065af         mov        rsi, r15
00000000000065b2         mov        qword [rsp+0xc8+var_88], rax
00000000000065b7         mov        qword [rsp+0xc8+var_B0], rdi
00000000000065bc         call       j___memcpy_chk                              ; __memcpy_chk
00000000000065c1         mov        ecx, r12d
00000000000065c4         mov        dword [rsp+0xc8+var_A8], ebx
00000000000065c8         mov        r12, r14
00000000000065cb         mov        rbx, r13
00000000000065ce         mov        r8, qword [rsp+0xc8+var_80]
00000000000065d3         mov        r15, qword [rsp+0xc8+var_90]
00000000000065d8         mov        r13, qword [rsp+0xc8+var_88]
00000000000065dd         mov        r14d, ecx
00000000000065e0         jmp        loc_6622
00000000000065e2         align      8

                     loc_65e8:
00000000000065e8         mov        rax, qword [rsp+0xc8+var_B0]                ; CODE XREF=human_readable+1306
00000000000065ed         sub        r12, rbp
00000000000065f0         sub        r8, rbp
00000000000065f3         mov        rdi, r8                                     ; argument "__dest" for method j_memcpy
00000000000065f6         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
00000000000065f9         lea        rsi, qword [rax+r12]                        ; argument "__src" for method j_memcpy
00000000000065fd         call       j_memcpy                                    ; memcpy
0000000000006602         test       r12, r12
0000000000006605         mov        r8, rax
0000000000006608         je         loc_6b18

000000000000660e         sub        r8, r13
0000000000006611         mov        rdx, r13                                    ; argument "__n" for method j_memcpy
0000000000006614         mov        rsi, rbx                                    ; argument "__src" for method j_memcpy
0000000000006617         mov        rdi, r8                                     ; argument "__dest" for method j_memcpy
000000000000661a         call       j_memcpy                                    ; memcpy
000000000000661f         mov        r8, rax

                     loc_6622:
0000000000006622         movzx      eax, byte [r15]                             ; CODE XREF=human_readable+1216
0000000000006626         test       al, al
0000000000006628         je         loc_6637

000000000000662a         cmp        al, 0x7f
000000000000662c         movzx      ebp, al
000000000000662f         cmovae     rbp, r12
0000000000006633         add        r15, 0x1

                     loc_6637:
0000000000006637         cmp        rbp, r12                                    ; CODE XREF=human_readable+1288
000000000000663a         jbe        loc_65e8

000000000000663c         mov        eax, r14d
000000000000663f         mov        r15, r8
0000000000006642         mov        r14, r12
0000000000006645         mov        rsi, qword [rsp+0xc8+var_B0]                ; argument "__src" for method j_memcpy
000000000000664a         sub        r15, r14
000000000000664d         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000006650         mov        rdi, r15                                    ; argument "__dest" for method j_memcpy
0000000000006653         mov        ebx, dword [rsp+0xc8+var_A8]
0000000000006657         mov        r12d, eax
000000000000665a         call       j_memcpy                                    ; memcpy
000000000000665f         jmp        loc_64aa
0000000000006664         align      8

                     loc_6668:
0000000000006668         mov        rcx, qword [rsp+0xc8+var_C8]                ; CODE XREF=human_readable+939
000000000000666c         lea        rdi, qword [rcx+0x288]
0000000000006673         mov        byte [rcx+0x287], 0x20
000000000000667a         mov        qword [rsp+0xc8+var_C0], rdi
000000000000667f         jmp        loc_64d1
0000000000006684         align      8

                     loc_6688:
0000000000006688         sub        rsp, 0x10                                   ; CODE XREF=human_readable+401
000000000000668c         mov        edi, r15d
000000000000668f         fld        st0
0000000000006691         fstp       tword [rsp+0xd8+var_D8]
0000000000006694         fstp       tword [rsp+0xd8+var_A8]
0000000000006698         call       adjust_value.part.0                         ; adjust_value.part.0
000000000000669d         pop        rax
000000000000669e         pop        rdx
000000000000669f         fld        tword [rsp+0xc8+var_A8]
00000000000066a3         jmp        loc_62b9
00000000000066a8         align      16

                     loc_66b0:
00000000000066b0         sub        rsp, 0x10                                   ; CODE XREF=human_readable+774
00000000000066b4         mov        edi, r15d
00000000000066b7         fstp       tword [rsp+0xd8+var_D8]
00000000000066ba         call       adjust_value.part.0                         ; adjust_value.part.0
00000000000066bf         pop        r8
00000000000066c1         pop        r9
00000000000066c3         jmp        loc_642c
00000000000066c8         align      16

                     loc_66d0:
00000000000066d0         lea        rdx, qword [rdi+2]                          ; CODE XREF=human_readable+1013
00000000000066d4         mov        byte [rdi+1], 0x69
00000000000066d8         jmp        loc_651b

                     loc_66dd:
00000000000066dd         cmp        r10, 0x9                                    ; CODE XREF=human_readable+680
00000000000066e1         ja         loc_6978

00000000000066e7         cmp        r15d, 0x1
00000000000066eb         je         loc_69a2

00000000000066f1         test       r15d, r15d
00000000000066f4         sete       dl
00000000000066f7         test       edi, edi
00000000000066f9         setg       r8b
00000000000066fd         and        edx, r8d

                     loc_6700:
0000000000006700         test       dl, dl                                      ; CODE XREF=human_readable+2191
0000000000006702         je         loc_6989

0000000000006708         lea        r9d, dword [rax+1]
000000000000670c         cmp        r9d, 0xa
0000000000006710         je         loc_6a11

                     loc_6716:
0000000000006716         add        r9d, 0x30                                   ; CODE XREF=human_readable+2155

                     loc_671a:
000000000000671a         mov        rax, qword [rsp+0xc8+var_C8]                ; CODE XREF=human_readable+2173
000000000000671e         lea        r8, qword [rax+0x286]
0000000000006725         mov        byte [rax+0x286], r9b
000000000000672c         mov        eax, ebp
000000000000672e         sub        r8, rbp
0000000000006731         cmp        ebp, 0x8
0000000000006734         jae        loc_69c1

000000000000673a         test       bpl, 0x4
000000000000673e         jne        loc_6ac6

0000000000006744         test       eax, eax
0000000000006746         je         loc_6757

0000000000006748         movzx      edx, byte [r14]
000000000000674c         test       al, 0x2
000000000000674e         mov        byte [r8], dl
0000000000006751         jne        loc_6ae0

                     loc_6757:
0000000000006757         xor        edi, edi                                    ; CODE XREF=human_readable+1574, human_readable+2255, human_readable+2284, human_readable+2389, human_readable+2486, human_readable+2508
0000000000006759         xor        r9d, r9d
000000000000675c         nop        dword [rax]

                     loc_6760:
0000000000006760         cmp        r15d, 0x1                                   ; CODE XREF=human_readable+633, human_readable+2055, human_readable+2141, human_readable+2204
0000000000006764         je         loc_68e0

000000000000676a         test       r15d, r15d
000000000000676d         jne        loc_6790

000000000000676f         add        edi, r9d
0000000000006772         test       edi, edi
0000000000006774         jle        loc_6790

                     loc_6776:
0000000000006776         add        rsi, 0x1                                    ; CODE XREF=human_readable+2009
000000000000677a         test       ecx, ecx
000000000000677c         je         loc_6790

000000000000677e         mov        eax, dword [rsp+0xc8+var_94]
0000000000006782         cmp        rax, rsi
0000000000006785         je         loc_6950

000000000000678b         nop        dword [rax+rax]

                     loc_6790:
0000000000006790         mov        r15, r8                                     ; CODE XREF=human_readable+1613, human_readable+1620, human_readable+1628, human_readable+2015, human_readable+2099
0000000000006793         movabs     rcx, 0xcccccccccccccccd
000000000000679d         nop        dword [rax]

                     loc_67a0:
00000000000067a0         mov        rax, rsi                                    ; CODE XREF=human_readable+1700
00000000000067a3         sub        r15, 0x1
00000000000067a7         mul        rcx
00000000000067aa         shr        rdx, 0x3
00000000000067ae         lea        rax, qword [rdx+rdx*4]
00000000000067b2         add        rax, rax
00000000000067b5         sub        rsi, rax
00000000000067b8         add        esi, 0x30
00000000000067bb         test       rdx, rdx
00000000000067be         mov        byte [r15], sil
00000000000067c1         mov        rsi, rdx
00000000000067c4         jne        loc_67a0

00000000000067c6         jmp        loc_64a0
00000000000067cb         align      16

                     loc_67d0:
00000000000067d0         mov        rcx, qword [rsp+0xc8+var_B8]                ; CODE XREF=human_readable+915
00000000000067d5         cmp        rcx, 0x1
00000000000067d9         jbe        loc_6982

00000000000067df         mov        edx, dword [rsp+0xc8+var_94]
00000000000067e3         mov        ebx, 0x1
00000000000067e8         mov        eax, 0x1

                     loc_67ed:
00000000000067ed         imul       rax, rdx                                    ; CODE XREF=human_readable+1760
00000000000067f1         cmp        rcx, rax
00000000000067f4         jbe        loc_64b9

00000000000067fa         add        ebx, 0x1
00000000000067fd         cmp        ebx, 0x8
0000000000006800         jne        loc_67ed

0000000000006802         jmp        loc_64b9
0000000000006807         align      16

                     loc_6810:
0000000000006810         sub        rsp, 0x10                                   ; CODE XREF=human_readable+387
0000000000006814         lea        rcx, qword [a1lf]                           ; "%.1Lf"
000000000000681b         mov        rdx, 0xffffffffffffffff
0000000000006822         fld        st0
0000000000006824         fstp       tword [rsp+0xd8+var_D8]
0000000000006827         mov        r14, qword [rsp+0xd8+var_C8]
000000000000682c         mov        esi, 0x1
0000000000006831         xor        eax, eax
0000000000006833         mov        rdi, r14
0000000000006836         fstp       tword [rsp+0xd8+var_A8]
000000000000683a         call       j___sprintf_chk                             ; __sprintf_chk
000000000000683f         mov        rdi, r14                                    ; argument "__s" for method j_strlen
0000000000006842         call       j_strlen                                    ; strlen
0000000000006847         mov        r14, rax
000000000000684a         pop        rax
000000000000684b         pop        rdx
000000000000684c         cmp        r14, qword [rsp+0xc8+var_B0]
0000000000006851         fld        tword [rsp+0xc8+var_A8]
0000000000006855         jbe        loc_6302

000000000000685b         fld        dword [dword_e1ec]                          ; dword_e1ec
0000000000006861         fmul       st1, st0

                     loc_6863:
0000000000006863         fdivp      st1                                         ; CODE XREF=human_readable+526, human_readable+1944, human_readable+1972
0000000000006865         sub        rsp, 0x10
0000000000006869         lea        rcx, qword [a0lf]                           ; "%.0Lf"
0000000000006870         mov        r14, qword [rsp+0xd8+var_C8]
0000000000006875         mov        rdx, 0xffffffffffffffff
000000000000687c         mov        esi, 0x1
0000000000006881         xor        eax, eax
0000000000006883         xor        ebp, ebp
0000000000006885         mov        rdi, r14
0000000000006888         fstp       tword [rsp+0xd8+var_D8]
000000000000688b         call       j___sprintf_chk                             ; __sprintf_chk
0000000000006890         mov        rdi, r14                                    ; argument "__s" for method j_strlen
0000000000006893         call       j_strlen                                    ; strlen
0000000000006898         pop        r10
000000000000689a         mov        r14, rax
000000000000689d         pop        r11
000000000000689f         jmp        loc_6480
00000000000068a4         align      8

                     loc_68a8:
00000000000068a8         fld        dword [dword_e1ec]                          ; dword_e1ec, CODE XREF=human_readable+476
00000000000068ae         fmul       st1, st0

                     loc_68b0:
00000000000068b0         fld        tword [dword_e1ec+4]                        ; 0xe1f0, CODE XREF=human_readable+520
00000000000068b6         fucomip    st2
00000000000068b8         jbe        loc_6863

00000000000068ba         fstp       dword [rsp+0xc8+var_B0]
00000000000068be         sub        rsp, 0x10
00000000000068c2         mov        edi, r15d
00000000000068c5         fstp       tword [rsp+0xd8+var_D8]
00000000000068c8         call       adjust_value.part.0                         ; adjust_value.part.0
00000000000068cd         pop        rbp
00000000000068ce         pop        r14
00000000000068d0         fld        dword [rsp+0xc8+var_B0]
00000000000068d4         jmp        loc_6863
00000000000068d6         align      32

                     loc_68e0:
00000000000068e0         mov        rax, rsi                                    ; CODE XREF=human_readable+1604
00000000000068e3         movsxd     rdi, edi
00000000000068e6         and        eax, 0x1
00000000000068e9         add        rax, rdi
00000000000068ec         setne      al
00000000000068ef         movzx      eax, al
00000000000068f2         add        r9d, eax
00000000000068f5         cmp        r9d, 0x5
00000000000068f9         jg         loc_6776

00000000000068ff         jmp        loc_6790
0000000000006904         align      8

                     loc_6908:
0000000000006908         setb       dil                                         ; CODE XREF=human_readable+602
000000000000690c         movzx      edi, dil
0000000000006910         add        edi, 0x2
0000000000006913         jmp        loc_6389
0000000000006918         align      32

                     loc_6920:
0000000000006920         mov        r8, qword [rsp+0xc8+var_C0]                 ; CODE XREF=human_readable+650
0000000000006925         xor        ebx, ebx
0000000000006927         jmp        loc_6760
000000000000692c         align      16

                     loc_6930:
0000000000006930         mov        rbx, qword [rsp+0xc8+var_C0]                ; CODE XREF=human_readable+966
0000000000006935         test       eax, eax
0000000000006937         lea        rdx, qword [rbx+1]
000000000000693b         mov        byte [rbx], 0x6b
000000000000693e         jne        loc_651b

                     loc_6944:
0000000000006944         mov        qword [rsp+0xc8+var_C0], rdx                ; CODE XREF=human_readable+999
0000000000006949         jmp        loc_6527
000000000000694e         align      16

                     loc_6950:
0000000000006950         cmp        ebx, 0x8                                    ; CODE XREF=human_readable+1637
0000000000006953         je         loc_6790

0000000000006959         add        ebx, 0x1
000000000000695c         test       r12b, 0x8
0000000000006960         je         loc_6a22

                     loc_6966:
0000000000006966         lea        r15, qword [r8-1]                           ; CODE XREF=human_readable+2338, human_readable+2353, human_readable+2371, human_readable+2437, human_readable+2465, human_readable+2529
000000000000696a         mov        byte [r8-1], 0x31
000000000000696f         jmp        loc_64a0
0000000000006974         align      8

                     loc_6978:
0000000000006978         mov        r8, qword [rsp+0xc8+var_C0]                 ; CODE XREF=human_readable+689, human_readable+1473
000000000000697d         jmp        loc_6760

                     loc_6982:
0000000000006982         xor        ebx, ebx                                    ; CODE XREF=human_readable+1721
0000000000006984         jmp        loc_64b9

                     loc_6989:
0000000000006989         test       eax, eax                                    ; CODE XREF=human_readable+1506
000000000000698b         jne        loc_6716

                     loc_6991:
0000000000006991         test       r12b, 0x8                                   ; CODE XREF=human_readable+2301
0000000000006995         jne        loc_69b4

0000000000006997         mov        r9d, 0x30
000000000000699d         jmp        loc_671a

                     loc_69a2:
00000000000069a2         mov        edx, eax                                    ; CODE XREF=human_readable+1483
00000000000069a4         and        edx, 0x1
00000000000069a7         add        edx, edi
00000000000069a9         cmp        edx, 0x2
00000000000069ac         setg       dl
00000000000069af         jmp        loc_6700

                     loc_69b4:
00000000000069b4         mov        r8, qword [rsp+0xc8+var_C0]                 ; CODE XREF=human_readable+2165
00000000000069b9         xor        r9d, r9d
00000000000069bc         jmp        loc_6760

                     loc_69c1:
00000000000069c1         mov        rax, qword [r14]                            ; CODE XREF=human_readable+1556
00000000000069c4         mov        r9, r14
00000000000069c7         mov        qword [r8], rax
00000000000069ca         mov        eax, ebp
00000000000069cc         mov        rdx, qword [r14+rax-8]
00000000000069d1         mov        qword [r8+rax-8], rdx
00000000000069d6         lea        rdx, qword [r8+8]
00000000000069da         mov        rax, r8
00000000000069dd         and        rdx, 0xfffffffffffffff8
00000000000069e1         sub        rax, rdx
00000000000069e4         sub        r9, rax
00000000000069e7         add        eax, ebp
00000000000069e9         and        eax, 0xfffffff8
00000000000069ec         cmp        eax, 0x8
00000000000069ef         jb         loc_6757

00000000000069f5         and        eax, 0xfffffff8
00000000000069f8         xor        edi, edi

                     loc_69fa:
00000000000069fa         mov        r10d, edi                                   ; CODE XREF=human_readable+2282
00000000000069fd         add        edi, 0x8
0000000000006a00         mov        r11, qword [r9+r10]
0000000000006a04         cmp        edi, eax
0000000000006a06         mov        qword [rdx+r10], r11
0000000000006a0a         jb         loc_69fa

0000000000006a0c         jmp        loc_6757

                     loc_6a11:
0000000000006a11         lea        rsi, qword [r10+1]                          ; CODE XREF=human_readable+1520
0000000000006a15         cmp        rsi, 0xa
0000000000006a19         je         loc_6a70

0000000000006a1b         xor        edi, edi
0000000000006a1d         jmp        loc_6991

                     loc_6a22:
0000000000006a22         mov        rax, rbp                                    ; CODE XREF=human_readable+2112
0000000000006a25         mov        byte [r8-1], 0x30
0000000000006a2a         not        rax
0000000000006a2d         add        r8, rax
0000000000006a30         cmp        ebp, 0x8
0000000000006a33         mov        eax, ebp
0000000000006a35         jae        loc_6a7a

0000000000006a37         and        ebp, 0x4
0000000000006a3a         jne        loc_6af1

0000000000006a40         test       eax, eax
0000000000006a42         je         loc_6966

0000000000006a48         movzx      edx, byte [r14]
0000000000006a4c         test       al, 0x2
0000000000006a4e         mov        byte [r8], dl
0000000000006a51         je         loc_6966

0000000000006a57         movzx      edx, word [r14+rax-2]
0000000000006a5d         mov        word [r8+rax-2], dx
0000000000006a63         jmp        loc_6966
0000000000006a68         align      16

                     loc_6a70:
0000000000006a70         mov        r8, qword [rsp+0xc8+var_C0]                 ; CODE XREF=human_readable+2297
0000000000006a75         jmp        loc_6757

                     loc_6a7a:
0000000000006a7a         mov        rax, qword [r14]                            ; CODE XREF=human_readable+2325
0000000000006a7d         lea        rcx, qword [r8+8]
0000000000006a81         and        rcx, 0xfffffffffffffff8
0000000000006a85         mov        qword [r8], rax
0000000000006a88         mov        eax, ebp
0000000000006a8a         mov        rdx, qword [r14+rax-8]
0000000000006a8f         mov        qword [r8+rax-8], rdx
0000000000006a94         mov        rax, r8
0000000000006a97         sub        rax, rcx
0000000000006a9a         sub        r14, rax
0000000000006a9d         add        eax, ebp
0000000000006a9f         and        eax, 0xfffffff8
0000000000006aa2         cmp        eax, 0x8
0000000000006aa5         jb         loc_6966

0000000000006aab         and        eax, 0xfffffff8
0000000000006aae         xor        edx, edx

                     loc_6ab0:
0000000000006ab0         mov        esi, edx                                    ; CODE XREF=human_readable+2463
0000000000006ab2         add        edx, 0x8
0000000000006ab5         mov        rdi, qword [r14+rsi]
0000000000006ab9         cmp        edx, eax
0000000000006abb         mov        qword [rcx+rsi], rdi
0000000000006abf         jb         loc_6ab0

0000000000006ac1         jmp        loc_6966

                     loc_6ac6:
0000000000006ac6         mov        edx, dword [r14]                            ; CODE XREF=human_readable+1566
0000000000006ac9         mov        dword [r8], edx
0000000000006acc         mov        edx, dword [r14+rax-4]
0000000000006ad1         mov        dword [r8+rax-4], edx
0000000000006ad6         jmp        loc_6757

                     loc_6adb:
0000000000006adb         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=human_readable+1059
                        ; endp

                     loc_6ae0:
0000000000006ae0         movzx      edx, word [r14+rax-2]                       ; CODE XREF=human_readable+1585
0000000000006ae6         mov        word [r8+rax-2], dx
0000000000006aec         jmp        loc_6757

                     loc_6af1:
0000000000006af1         mov        edx, dword [r14]                            ; CODE XREF=human_readable+2330
0000000000006af4         mov        dword [r8], edx
0000000000006af7         mov        edx, dword [r14+rax-4]
0000000000006afc         mov        dword [r8+rax-4], edx
0000000000006b01         jmp        loc_6966

                     loc_6b06:
0000000000006b06         test       eax, eax                                    ; CODE XREF=human_readable+947
0000000000006b08         mov        rdx, qword [rsp+0xc8+var_C0]
0000000000006b0d         jne        loc_651b

0000000000006b13         jmp        loc_6527

                     loc_6b18:
0000000000006b18         mov        ebx, dword [rsp+0xc8+var_A8]                ; CODE XREF=human_readable+1256
0000000000006b1c         mov        r15, rax
0000000000006b1f         mov        r12d, r14d
0000000000006b22         jmp        loc_64aa
0000000000006b27         align      16                                          ; End of unwind block (FDE at 0xfa60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     human_options:
0000000000006b30         push       r13                                         ; Begin of unwind block (FDE at 0xfb08)
0000000000006b32         push       r12
0000000000006b34         mov        r13, rsi
0000000000006b37         push       rbp
0000000000006b38         push       rbx
0000000000006b39         mov        r12, rdx
0000000000006b3c         mov        rbx, rdi
0000000000006b3f         sub        rsp, 0x18
0000000000006b43         mov        rax, qword [fs:0x28]
0000000000006b4c         mov        qword [rsp+0x38+var_30], rax
0000000000006b51         xor        eax, eax
0000000000006b53         test       rdi, rdi
0000000000006b56         je         loc_6c70

                     loc_6b5c:
0000000000006b5c         xor        ebp, ebp                                    ; CODE XREF=human_options+338, human_options+362
0000000000006b5e         cmp        byte [rbx], 0x27
0000000000006b61         jne        loc_6b6c

0000000000006b63         add        rbx, 0x1
0000000000006b67         mov        ebp, 0x4

                     loc_6b6c:
0000000000006b6c         lea        rdx, qword [block_size_opts]                ; block_size_opts, CODE XREF=human_options+49
0000000000006b73         lea        rsi, qword [block_size_args]                ; block_size_args
0000000000006b7a         mov        ecx, 0x4
0000000000006b7f         mov        rdi, rbx
0000000000006b82         call       argmatch                                    ; argmatch
0000000000006b87         test       eax, eax
0000000000006b89         js         loc_6bc8

0000000000006b8b         lea        rdx, qword [block_size_opts]                ; block_size_opts
0000000000006b92         cdqe
0000000000006b94         mov        qword [r12], 0x1
0000000000006b9c         or         ebp, dword [rdx+rax*4]
0000000000006b9f         xor        eax, eax
0000000000006ba1         mov        dword [r13], ebp

                     loc_6ba5:
0000000000006ba5         mov        rcx, qword [rsp+0x38+var_30]                ; CODE XREF=human_options+263, human_options+308, human_options+403, human_options+476
0000000000006baa         xor        rcx, qword [fs:0x28]
0000000000006bb3         jne        loc_6d11

0000000000006bb9         add        rsp, 0x18
0000000000006bbd         pop        rbx
0000000000006bbe         pop        rbp
0000000000006bbf         pop        r12
0000000000006bc1         pop        r13
0000000000006bc3         ret
                        ; endp
0000000000006bc4         align      8

                     loc_6bc8:
0000000000006bc8         lea        r8, qword [aEeggkkmmppttyy]                 ; "eEgGkKmMpPtTyYzZ0", CODE XREF=human_options+89
0000000000006bcf         xor        edx, edx
0000000000006bd1         mov        rsi, rsp
0000000000006bd4         mov        rcx, r12
0000000000006bd7         mov        rdi, rbx
0000000000006bda         call       xstrtoumax                                  ; xstrtoumax
0000000000006bdf         test       eax, eax
0000000000006be1         jne        loc_6c28

0000000000006be3         movzx      esi, byte [rbx]
0000000000006be6         lea        edx, dword [rsi-0x30]
0000000000006be9         cmp        dl, 0x9
0000000000006bec         jbe        loc_6c18

0000000000006bee         mov        rcx, qword [rsp+0x38+var_38]
0000000000006bf2         cmp        rbx, rcx
0000000000006bf5         jne        loc_6c09

0000000000006bf7         jmp        loc_6cd0
0000000000006bfc         align      1024

                     loc_6c00:
0000000000006c00         cmp        rbx, rcx                                    ; CODE XREF=human_options+230
0000000000006c03         je         loc_6cd0

                     loc_6c09:
0000000000006c09         add        rbx, 0x1                                    ; CODE XREF=human_options+197
0000000000006c0d         movzx      edi, byte [rbx]
0000000000006c10         lea        edx, dword [rdi-0x30]
0000000000006c13         cmp        dl, 0x9
0000000000006c16         ja         loc_6c00

                     loc_6c18:
0000000000006c18         mov        rdx, qword [r12]                            ; CODE XREF=human_options+188, human_options+429, human_options+450
0000000000006c1c         mov        dword [r13], ebp
0000000000006c20         jmp        loc_6c34
0000000000006c22         align      8

                     loc_6c28:
0000000000006c28         mov        rdx, qword [r12]                            ; CODE XREF=human_options+177
0000000000006c2c         mov        dword [r13], 0x0

                     loc_6c34:
0000000000006c34         test       rdx, rdx                                    ; CODE XREF=human_options+240
0000000000006c37         jne        loc_6ba5

0000000000006c3d         lea        rdi, qword [aPosixlycorrect]                ; argument "__name" for method j_getenv, "POSIXLY_CORRECT"
0000000000006c44         call       j_getenv                                    ; getenv
0000000000006c49         cmp        rax, 0x1
0000000000006c4d         sbb        rax, rax
0000000000006c50         and        eax, 0x200
0000000000006c55         add        rax, 0x200
0000000000006c5b         mov        qword [r12], rax
0000000000006c5f         mov        eax, 0x4
0000000000006c64         jmp        loc_6ba5
0000000000006c69         align      16

                     loc_6c70:
0000000000006c70         lea        rdi, qword [aBlocksize]                     ; argument "__name" for method j_getenv, "BLOCK_SIZE", CODE XREF=human_options+38
0000000000006c77         call       j_getenv                                    ; getenv
0000000000006c7c         test       rax, rax
0000000000006c7f         mov        rbx, rax
0000000000006c82         jne        loc_6b5c

0000000000006c88         lea        rdi, qword [aBlocksize_e1a2]                ; argument "__name" for method j_getenv, "BLOCKSIZE"
0000000000006c8f         call       j_getenv                                    ; getenv
0000000000006c94         test       rax, rax
0000000000006c97         mov        rbx, rax
0000000000006c9a         jne        loc_6b5c

0000000000006ca0         lea        rdi, qword [aPosixlycorrect]                ; argument "__name" for method j_getenv, "POSIXLY_CORRECT"
0000000000006ca7         call       j_getenv                                    ; getenv
0000000000006cac         test       rax, rax
0000000000006caf         je         loc_6cfa

0000000000006cb1         mov        qword [r12], 0x200
0000000000006cb9         xor        eax, eax
0000000000006cbb         mov        dword [r13], 0x0
0000000000006cc3         jmp        loc_6ba5
0000000000006cc8         align      16

                     loc_6cd0:
0000000000006cd0         cmp        byte [rcx-1], 0x42                          ; CODE XREF=human_options+199, human_options+211
0000000000006cd4         je         loc_6ce8

0000000000006cd6         or         bpl, 0x80

                     loc_6cda:
0000000000006cda         or         ebp, 0x20                                   ; CODE XREF=human_options+456
0000000000006cdd         jmp        loc_6c18
0000000000006ce2         align      8

                     loc_6ce8:
0000000000006ce8         or         ebp, 0x180                                  ; CODE XREF=human_options+420
0000000000006cee         cmp        byte [rcx-2], 0x69
0000000000006cf2         jne        loc_6c18

0000000000006cf8         jmp        loc_6cda

                     loc_6cfa:
0000000000006cfa         mov        qword [r12], 0x400                          ; CODE XREF=human_options+383
0000000000006d02         xor        eax, eax
0000000000006d04         mov        dword [r13], 0x0
0000000000006d0c         jmp        loc_6ba5

                     loc_6d11:
0000000000006d11         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=human_options+131
                        ; endp
0000000000006d16         align      32                                          ; End of unwind block (FDE at 0xfb08)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_38: -56
        ;    var_48: -72
        ;    var_58: -88
        ;    var_68: -104
        ;    var_78: -120
        ;    var_88: -136
        ;    var_98: -152
        ;    var_A8: -168
        ;    var_D8: int8_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F4: int32_t, -244
        ;    var_F8: int32_t, -248
        ;    var_100: int64_t, -256


                     parse_long_options:
0000000000006d20         push       r13                                         ; Begin of unwind block (FDE at 0xfb44)
0000000000006d22         push       r12
0000000000006d24         mov        r13, r8
0000000000006d27         push       rbp
0000000000006d28         push       rbx
0000000000006d29         mov        rbp, rdx
0000000000006d2c         mov        r12, rcx
0000000000006d2f         sub        rsp, 0xe8
0000000000006d36         test       al, al
0000000000006d38         je         loc_6d74

0000000000006d3a         movaps     xmmword [rsp+0x108+var_A8], xmm0
0000000000006d3f         movaps     xmmword [rsp+0x108+var_98], xmm1
0000000000006d44         movaps     xmmword [rsp+0x108+var_88], xmm2
0000000000006d4c         movaps     xmmword [rsp+0x108+var_78], xmm3
0000000000006d54         movaps     xmmword [rsp+0x108+var_68], xmm4
0000000000006d5c         movaps     xmmword [rsp+0x108+var_58], xmm5
0000000000006d64         movaps     xmmword [rsp+0x108+var_48], xmm6
0000000000006d6c         movaps     xmmword [rsp+0x108+var_38], xmm7

                     loc_6d74:
0000000000006d74         mov        rax, qword [fs:0x28]                        ; CODE XREF=parse_long_options+24
0000000000006d7d         mov        qword [rsp+0x108+var_E0], rax
0000000000006d82         xor        eax, eax
0000000000006d84         cmp        edi, 0x2
0000000000006d87         mov        ebx, dword [opterr@@GLIBC_2.2.5]            ; opterr@@GLIBC_2.2.5
0000000000006d8d         mov        dword [opterr@@GLIBC_2.2.5], 0x0            ; opterr@@GLIBC_2.2.5
0000000000006d97         je         loc_6dd0

                     loc_6d99:
0000000000006d99         mov        rax, qword [rsp+0x108+var_E0]               ; CODE XREF=parse_long_options+206, parse_long_options+221, parse_long_options+309
0000000000006d9e         xor        rax, qword [fs:0x28]
0000000000006da7         mov        dword [opterr@@GLIBC_2.2.5], ebx            ; opterr@@GLIBC_2.2.5
0000000000006dad         mov        dword [optind@@GLIBC_2.2.5], 0x0            ; optind@@GLIBC_2.2.5
0000000000006db7         jne        loc_6e5a

0000000000006dbd         add        rsp, 0xe8
0000000000006dc4         pop        rbx
0000000000006dc5         pop        rbp
0000000000006dc6         pop        r12
0000000000006dc8         pop        r13
0000000000006dca         ret
                        ; endp
0000000000006dcb         align      16

                     loc_6dd0:
0000000000006dd0         lea        rcx, qword [long_options]                   ; argument "__longopts" for method j_getopt_long, long_options, CODE XREF=parse_long_options+119
0000000000006dd7         lea        rdx, qword [dword_e1ec+20]                  ; argument "__shortopts" for method j_getopt_long, 0xe200
0000000000006dde         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long
0000000000006de1         mov        qword [rsp+0x108+var_100], r9
0000000000006de6         call       j_getopt_long                               ; getopt_long
0000000000006deb         cmp        eax, 0xffffffff
0000000000006dee         je         loc_6d99

0000000000006df0         cmp        eax, 0x68
0000000000006df3         mov        r9, qword [rsp+0x108+var_100]
0000000000006df8         je         loc_6e50

0000000000006dfa         cmp        eax, 0x76
0000000000006dfd         jne        loc_6d99

0000000000006dff         lea        rax, qword [rsp+0x108+arg_0]
0000000000006e07         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000006e0e         lea        r8, qword [rsp+0x108+var_F8]
0000000000006e13         mov        rcx, r13
0000000000006e16         mov        rdx, r12
0000000000006e19         mov        rsi, rbp
0000000000006e1c         mov        qword [rsp+0x108+var_F0], rax
0000000000006e21         lea        rax, qword [rsp+0x108+var_D8]
0000000000006e26         mov        dword [rsp+0x108+var_F8], 0x30
0000000000006e2e         mov        dword [rsp+0x108+var_F4], 0x30
0000000000006e36         mov        qword [rsp+0x108+var_E8], rax
0000000000006e3b         call       version_etc_va                              ; version_etc_va
0000000000006e40         xor        edi, edi                                    ; argument "__status" for method j_exit
0000000000006e42         call       j_exit                                      ; exit
                        ; endp
0000000000006e47         align      16

                     loc_6e50:
0000000000006e50         xor        edi, edi                                    ; CODE XREF=parse_long_options+216
0000000000006e52         call       r9
0000000000006e55         jmp        loc_6d99

                     loc_6e5a:
0000000000006e5a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_long_options+151
                        ; endp
0000000000006e5f         align      32                                          ; End of unwind block (FDE at 0xfb44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_38: -56
        ;    var_48: -72
        ;    var_58: -88
        ;    var_68: -104
        ;    var_78: -120
        ;    var_88: -136
        ;    var_98: -152
        ;    var_A8: -168
        ;    var_D8: int8_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F4: int32_t, -244
        ;    var_F8: int32_t, -248


                     parse_gnu_standard_options_only:
0000000000006e60         push       r14                                         ; Begin of unwind block (FDE at 0xfb80), CODE XREF=main+529
0000000000006e62         push       r13
0000000000006e64         mov        r14, r8
0000000000006e67         push       r12
0000000000006e69         push       rbp
0000000000006e6a         mov        r12, rdx
0000000000006e6d         push       rbx
0000000000006e6e         mov        r13, rcx
0000000000006e71         sub        rsp, 0xd0
0000000000006e78         test       al, al
0000000000006e7a         mov        rbp, qword [rsp+0xf8+arg_0]
0000000000006e82         je         loc_6ebb

0000000000006e84         movaps     xmmword [rsp+0xf8+var_A8], xmm0
0000000000006e89         movaps     xmmword [rsp+0xf8+var_98], xmm1
0000000000006e8e         movaps     xmmword [rsp+0xf8+var_88], xmm2
0000000000006e93         movaps     xmmword [rsp+0xf8+var_78], xmm3
0000000000006e9b         movaps     xmmword [rsp+0xf8+var_68], xmm4
0000000000006ea3         movaps     xmmword [rsp+0xf8+var_58], xmm5
0000000000006eab         movaps     xmmword [rsp+0xf8+var_48], xmm6
0000000000006eb3         movaps     xmmword [rsp+0xf8+var_38], xmm7

                     loc_6ebb:
0000000000006ebb         mov        rax, qword [fs:0x28]                        ; CODE XREF=parse_gnu_standard_options_only+34
0000000000006ec4         mov        qword [rsp+0xf8+var_E0], rax
0000000000006ec9         xor        eax, eax
0000000000006ecb         lea        rdx, qword [aWrittenBySSAnd+27]             ; 0xe7a1
0000000000006ed2         lea        rax, qword [dword_e1ec+20]                  ; 0xe200
0000000000006ed9         test       r9b, r9b
0000000000006edc         lea        rcx, qword [long_options]                   ; argument "__longopts" for method j_getopt_long, long_options
0000000000006ee3         cmove      rdx, rax                                    ; argument "__shortopts" for method j_getopt_long
0000000000006ee7         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long
0000000000006eea         mov        ebx, dword [opterr@@GLIBC_2.2.5]            ; opterr@@GLIBC_2.2.5
0000000000006ef0         mov        dword [opterr@@GLIBC_2.2.5], 0x1            ; opterr@@GLIBC_2.2.5
0000000000006efa         call       j_getopt_long                               ; getopt_long
0000000000006eff         cmp        eax, 0xffffffff
0000000000006f02         je         loc_6f68

0000000000006f04         cmp        eax, 0x68
0000000000006f07         je         loc_6f90

0000000000006f0d         cmp        eax, 0x76
0000000000006f10         jne        loc_6f60

0000000000006f12         lea        rax, qword [rsp+0xf8+arg_8]
0000000000006f1a         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000006f21         mov        r8, rsp
0000000000006f24         mov        rcx, r14
0000000000006f27         mov        rdx, r13
0000000000006f2a         mov        rsi, r12
0000000000006f2d         mov        qword [rsp+0xf8+var_F0], rax
0000000000006f32         lea        rax, qword [rsp+0xf8+var_D8]
0000000000006f37         mov        dword [rsp+0xf8+var_F8], 0x30
0000000000006f3e         mov        dword [rsp+0xf8+var_F4], 0x30
0000000000006f46         mov        qword [rsp+0xf8+var_E8], rax
0000000000006f4b         call       version_etc_va                              ; version_etc_va
0000000000006f50         xor        edi, edi                                    ; argument "__status" for method j_exit
0000000000006f52         call       j_exit                                      ; exit
                        ; endp
0000000000006f57         align      32

                     loc_6f60:
0000000000006f60         mov        edi, dword [exit_failure]                   ; exit_failure, CODE XREF=parse_gnu_standard_options_only+176
0000000000006f66         call       rbp

                     loc_6f68:
0000000000006f68         mov        rax, qword [rsp+0xf8+var_E0]                ; CODE XREF=parse_gnu_standard_options_only+162, parse_gnu_standard_options_only+308
0000000000006f6d         xor        rax, qword [fs:0x28]
0000000000006f76         mov        dword [opterr@@GLIBC_2.2.5], ebx            ; opterr@@GLIBC_2.2.5
0000000000006f7c         jne        loc_6f96

0000000000006f7e         add        rsp, 0xd0
0000000000006f85         pop        rbx
0000000000006f86         pop        rbp
0000000000006f87         pop        r12
0000000000006f89         pop        r13
0000000000006f8b         pop        r14
0000000000006f8d         ret
                        ; endp
0000000000006f8e         align      16

                     loc_6f90:
0000000000006f90         xor        edi, edi                                    ; CODE XREF=parse_gnu_standard_options_only+167
0000000000006f92         call       rbp
0000000000006f94         jmp        loc_6f68

                     loc_6f96:
0000000000006f96         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_gnu_standard_options_only+284
                        ; endp
0000000000006f9b         align      32                                          ; End of unwind block (FDE at 0xfb80)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
0000000000006fa0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xfbcc), CODE XREF=main+377
0000000000006fa3         push       rbx
0000000000006fa4         je         loc_701d

0000000000006fa6         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
0000000000006fab         mov        rbx, rdi
0000000000006fae         call       j_strrchr                                   ; strrchr
0000000000006fb3         test       rax, rax
0000000000006fb6         je         loc_700d

0000000000006fb8         lea        r8, qword [rax+1]
0000000000006fbc         mov        rdx, r8
0000000000006fbf         sub        rdx, rbx
0000000000006fc2         cmp        rdx, 0x6
0000000000006fc6         jle        loc_700d

0000000000006fc8         lea        rsi, qword [rax-6]
0000000000006fcc         lea        rdi, qword [aLibs]                          ; "/.libs/"
0000000000006fd3         mov        ecx, 0x7
0000000000006fd8         rep  cmpsb byte [rsi], byte [rdi]
0000000000006fda         seta       dl
0000000000006fdd         sbb        dl, 0x0
0000000000006fe0         test       dl, dl
0000000000006fe2         jne        loc_700d

0000000000006fe4         lea        rdi, qword [aLibs+8]                        ; 0xe248
0000000000006feb         mov        ecx, 0x3
0000000000006ff0         mov        rsi, r8
0000000000006ff3         mov        rbx, r8
0000000000006ff6         rep  cmpsb byte [rsi], byte [rdi]
0000000000006ff8         seta       dl
0000000000006ffb         sbb        dl, 0x0
0000000000006ffe         test       dl, dl
0000000000007000         jne        loc_700d

0000000000007002         lea        rbx, qword [rax+4]
0000000000007006         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_700d:
000000000000700d         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
0000000000007014         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
000000000000701b         pop        rbx
000000000000701c         ret
                        ; endp

                     loc_701d:
000000000000701d         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
0000000000007024         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
000000000000702b         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
0000000000007030         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000007035         call       j_fwrite                                    ; fwrite
000000000000703a         call       j_abort                                     ; abort
                        ; endp
000000000000703f         align      64                                          ; End of unwind block (FDE at 0xfbcc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
0000000000007040         push       rbp                                         ; Begin of unwind block (FDE at 0xfbec), CODE XREF=sub_7870+2597, sub_7870+2619
0000000000007041         push       rbx
0000000000007042         mov        rbp, rdi
0000000000007045         mov        ebx, esi
0000000000007047         sub        rsp, 0x8
000000000000704b         call       locale_charset                              ; locale_charset
0000000000007050         movzx      edx, byte [rax]
0000000000007053         and        edx, 0xffffffdf
0000000000007056         cmp        dl, 0x55
0000000000007059         je         loc_70d0

000000000000705b         cmp        dl, 0x47
000000000000705e         je         loc_7080

                     loc_7060:
0000000000007060         lea        rax, qword [aLibs+27]                       ; 0xe25b, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
0000000000007067         lea        rdx, qword [aLibs+29]                       ; 0xe25d
000000000000706e         cmp        ebx, 0x9
0000000000007071         cmovne     rax, rdx
0000000000007075         add        rsp, 0x8
0000000000007079         pop        rbx
000000000000707a         pop        rbp
000000000000707b         ret
                        ; endp
000000000000707c         align      128

                     loc_7080:
0000000000007080         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
0000000000007084         and        edx, 0xffffffdf
0000000000007087         cmp        dl, 0x42
000000000000708a         jne        loc_7060

000000000000708c         cmp        byte [rax+2], 0x31
0000000000007090         jne        loc_7060

0000000000007092         cmp        byte [rax+3], 0x38
0000000000007096         jne        loc_7060

0000000000007098         cmp        byte [rax+4], 0x30
000000000000709c         jne        loc_7060

000000000000709e         cmp        byte [rax+5], 0x33
00000000000070a2         jne        loc_7060

00000000000070a4         cmp        byte [rax+6], 0x30
00000000000070a8         jne        loc_7060

00000000000070aa         cmp        byte [rax+7], 0x0
00000000000070ae         jne        loc_7060

00000000000070b0         cmp        byte [rbp], 0x60
00000000000070b4         lea        rax, qword [aLibs+20]                       ; 0xe254
00000000000070bb         lea        rdx, qword [aLibs+24]                       ; 0xe258
00000000000070c2         cmovne     rax, rdx
00000000000070c6         add        rsp, 0x8
00000000000070ca         pop        rbx
00000000000070cb         pop        rbp
00000000000070cc         ret
                        ; endp
00000000000070cd         align      16

                     loc_70d0:
00000000000070d0         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
00000000000070d4         and        edx, 0xffffffdf
00000000000070d7         cmp        dl, 0x54
00000000000070da         jne        loc_7060

00000000000070dc         movzx      edx, byte [rax+2]
00000000000070e0         and        edx, 0xffffffdf
00000000000070e3         cmp        dl, 0x46
00000000000070e6         jne        loc_7060

00000000000070ec         cmp        byte [rax+3], 0x2d
00000000000070f0         jne        loc_7060

00000000000070f6         cmp        byte [rax+4], 0x38
00000000000070fa         jne        loc_7060

0000000000007100         cmp        byte [rax+5], 0x0
0000000000007104         jne        loc_7060

000000000000710a         cmp        byte [rbp], 0x60
000000000000710e         lea        rax, qword [aLibs+12]                       ; 0xe24c
0000000000007115         lea        rdx, qword [aLibs+16]                       ; 0xe250
000000000000711c         cmovne     rax, rdx
0000000000007120         add        rsp, 0x8
0000000000007124         pop        rbx
0000000000007125         pop        rbp
0000000000007126         ret
                        ; endp
0000000000007127         align      16                                          ; End of unwind block (FDE at 0xfbec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
0000000000007130         push       r15                                         ; Begin of unwind block (FDE at 0xfc30), CODE XREF=sub_7870+1165, sub_7870+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
0000000000007132         push       r14
0000000000007134         mov        r15d, r8d
0000000000007137         push       r13
0000000000007139         push       r12
000000000000713b         mov        r14, rdi
000000000000713e         push       rbp
000000000000713f         push       rbx
0000000000007140         mov        ebx, r9d
0000000000007143         mov        r13, rsi
0000000000007146         mov        rbp, rcx
0000000000007149         and        ebx, 0x2
000000000000714c         sub        rsp, 0xb8
0000000000007153         mov        rax, qword [rsp+0xe8+arg_0]
000000000000715b         mov        qword [rsp+0xe8+var_D8], rdx
0000000000007160         mov        dword [rsp+0xe8+var_E0], r8d
0000000000007165         mov        dword [rsp+0xe8+var_70], r9d
000000000000716a         mov        qword [rsp+0xe8+var_C8], rax
000000000000716f         mov        rax, qword [rsp+0xe8+arg_8]
0000000000007177         mov        qword [rsp+0xe8+var_80], rax
000000000000717c         mov        rax, qword [rsp+0xe8+arg_10]
0000000000007184         mov        qword [rsp+0xe8+var_88], rax
0000000000007189         mov        rax, qword [fs:0x28]
0000000000007192         mov        qword [rsp+0xe8+var_40], rax
000000000000719a         xor        eax, eax
000000000000719c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
00000000000071a1         cmp        r15d, 0xa
00000000000071a5         mov        qword [rsp+0xe8+var_90], rax
00000000000071aa         ja         loc_835f

00000000000071b0         lea        rcx, qword [switch_table_e2c0]              ; switch_table_e2c0
00000000000071b7         mov        edx, r15d
00000000000071ba         movsxd     rax, dword [rcx+rdx*4]
00000000000071be         add        rax, rcx
00000000000071c1         jmp        rax                                         ; switch statement using table at 0xe2c0, with 11 cases, 0x71c3,0x7d94,0x7df0,0x7e45,0x7e8a,0x7ec4,0x7f6a,0x7fa4,0x8198

                     loc_71c3:
00000000000071c3         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_7870+1318
00000000000071c8         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000071cd         xor        r12d, r12d
00000000000071d0         mov        qword [rsp+0xe8+var_98], 0x0
00000000000071d9         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000071de         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_71e3:
00000000000071e3         lea        rax, qword [aLibs+29]                       ; 0xe25d, CODE XREF=sub_7870+1876
00000000000071ea         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000071f3         xor        r15d, r15d
00000000000071f6         mov        dword [rsp+0xe8+var_E0], 0x2
00000000000071fe         mov        qword [rsp+0xe8+var_A0], rax

                     loc_7203:
0000000000007203         xor        r11d, r11d                                  ; CODE XREF=sub_7870+180, sub_7870+1400, sub_7870+1488, sub_7870+1557, sub_7870+1615, sub_7870+1781, sub_7870+1839, sub_7870+2408, sub_7870+2485
0000000000007206         mov        rax, rbp
0000000000007209         mov        r8d, r12d
000000000000720c         mov        rbp, r11
000000000000720f         mov        r11, rax
0000000000007212         nop        word [rax+rax]

                     loc_7218:
0000000000007218         cmp        r11, rbp                                    ; CODE XREF=sub_7320+194
000000000000721b         setne      r12b
000000000000721f         cmp        r11, 0xffffffffffffffff
0000000000007223         jne        loc_7232

0000000000007225         mov        rax, qword [rsp+0xe8+var_D8]
000000000000722a         cmp        byte [rax+rbp], 0x0
000000000000722e         setne      r12b

                     loc_7232:
0000000000007232         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
0000000000007235         je         loc_7890

000000000000723b         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000007240         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000007245         lea        r9, qword [rdi+rbp]
0000000000007249         setne      al
000000000000724c         and        al, byte [rsp+0xe8+var_DB]
0000000000007250         mov        r10d, eax
0000000000007253         je         loc_7300

0000000000007259         mov        rax, qword [rsp+0xe8+var_D0]
000000000000725e         test       rax, rax
0000000000007261         je         loc_7690

0000000000007267         cmp        r11, 0xffffffffffffffff
000000000000726b         lea        rbx, qword [rbp+rax]
0000000000007270         jne        loc_72a0

0000000000007272         cmp        rax, 0x1
0000000000007276         jbe        loc_72a0

0000000000007278         mov        byte [rsp+0xe8+var_B0], r8b
000000000000727d         mov        byte [rsp+0xe8+var_B8], r10b
0000000000007282         mov        qword [rsp+0xe8+var_C0], r9
0000000000007287         call       j_strlen                                    ; strlen
000000000000728c         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000007292         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000007298         mov        r11, rax
000000000000729b         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_72a0:
00000000000072a0         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
00000000000072a3         mov        byte [rsp+0xe8+var_C0], r10b
00000000000072a8         ja         loc_7860

00000000000072ae         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
00000000000072b3         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
00000000000072b8         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
00000000000072bb         mov        qword [rsp+0xe8+var_A8], r11
00000000000072c0         mov        byte [rsp+0xe8+var_B0], r8b
00000000000072c5         mov        qword [rsp+0xe8+var_B8], r9
00000000000072ca         call       j_memcmp                                    ; memcmp
00000000000072cf         test       eax, eax
00000000000072d1         mov        r9, qword [rsp+0xe8+var_B8]
00000000000072d6         movzx      r8d, byte [rsp+0xe8+var_B0]
00000000000072dc         mov        r11, qword [rsp+0xe8+var_A8]
00000000000072e1         jne        loc_7860

00000000000072e7         cmp        byte [rsp+0xe8+var_D9], 0x0
00000000000072ec         movzx      r10d, byte [rsp+0xe8+var_C0]
00000000000072f2         jne        loc_8275

00000000000072f8         nop        dword [rax+rax]

                     loc_7300:
0000000000007300         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_7850+19
0000000000007304         cmp        bl, 0x7e
0000000000007307         ja         loc_7628

000000000000730d         lea        rcx, qword [switch_table_e2c0+44]           ; 0xe2ec
0000000000007314         movzx      edx, bl
0000000000007317         movsxd     rax, dword [rcx+rdx*4]
000000000000731b         add        rax, rcx
000000000000731e         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_7320:
0000000000007320         xor        r10d, r10d
0000000000007323         cmp        r11, 0x1
0000000000007327         setne      al
000000000000732a         cmp        r11, 0xffffffffffffffff
000000000000732e         jne        loc_733c

0000000000007330         mov        rax, qword [rsp+arg_8]
0000000000007335         cmp        byte [rax+1], 0x0
0000000000007339         setne      al

                     loc_733c:
000000000000733c         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_7320+14
0000000000007341         sete       dl
0000000000007344         test       al, al
0000000000007346         je         loc_7598

                     loc_734c:
000000000000734c         xor        r12d, r12d                                  ; CODE XREF=sub_7590+11
000000000000734f         xor        eax, eax
0000000000007351         nop        dword [rax]
                        ; endp

                     loc_7358:
0000000000007358         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_7540+50, sub_7610+119
000000000000735d         jne        loc_7472

0000000000007363         test       dl, dl
0000000000007365         jne        loc_7472

                     loc_736b:
000000000000736b         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_7420+87
0000000000007370         test       rsi, rsi
0000000000007373         je         loc_7389

0000000000007375         mov        edx, ebx
0000000000007377         shr        dl, 0x5
000000000000737a         movzx      edx, dl
000000000000737d         mov        edx, dword [rsi+rdx*4]
0000000000007380         bt         edx, ebx
0000000000007383         jb         loc_74d3

                     loc_7389:
0000000000007389         test       r10b, r10b                                  ; CODE XREF=sub_7320+83, sub_7420+93
000000000000738c         jne        loc_74d3

0000000000007392         xor        eax, 0x1
0000000000007395         add        rbp, 0x1
0000000000007399         and        eax, r8d

                     loc_739c:
000000000000739c         test       al, al                                      ; CODE XREF=sub_7870+936
000000000000739e         je         loc_73c0

00000000000073a0         cmp        r13, r15
00000000000073a3         jbe        loc_73aa

00000000000073a5         mov        byte [r14+r15], 0x27

                     loc_73aa:
00000000000073aa         lea        rax, qword [r15+1]                          ; CODE XREF=sub_7320+131
00000000000073ae         cmp        r13, rax
00000000000073b1         jbe        loc_73b9

00000000000073b3         mov        byte [r14+r15+1], 0x27

                     loc_73b9:
00000000000073b9         add        r15, 0x2                                    ; CODE XREF=sub_7320+145
00000000000073bd         xor        r8d, r8d

                     loc_73c0:
00000000000073c0         cmp        r15, r13                                    ; CODE XREF=sub_7320+126, sub_7420+275, sub_7870+869
00000000000073c3         jae        loc_73c9

00000000000073c5         mov        byte [r14+r15], bl

                     loc_73c9:
00000000000073c9         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_7320+163
00000000000073ce         add        r15, 0x1
00000000000073d2         mov        eax, 0x0
00000000000073d7         test       r12b, r12b
00000000000073da         cmove      edi, eax
00000000000073dd         mov        byte [rsp+0xe8+var_DA], dil
00000000000073e2         jmp        loc_7218
00000000000073e7         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_73f0:
00000000000073f0         xor        r10d, r10d
00000000000073f3         mov        eax, dword [rsp+arg_0]
00000000000073f7         cmp        eax, 0x2
00000000000073fa         je         loc_79b8

0000000000007400         cmp        eax, 0x5
0000000000007403         je         loc_7978

0000000000007409         cmp        eax, 0x2
000000000000740c         mov        ebx, 0x3f
0000000000007411         sete       dl
0000000000007414         xor        r12d, r12d
0000000000007417         xor        eax, eax
0000000000007419         jmp        sub_7320+56
                        ; endp
000000000000741e         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_7420:
0000000000007420         xor        r10d, r10d
0000000000007423         cmp        dword [rsp+arg_0], 0x2
0000000000007428         je         loc_7930

000000000000742e         mov        byte [rsp+arg_74], r12b
0000000000007433         xor        edx, edx
0000000000007435         xor        eax, eax
0000000000007437         mov        ebx, 0x27
000000000000743c         jmp        sub_7320+56
                        ; endp
0000000000007441         nop        dword [rax]
0000000000007448         mov        edx, 0x9
000000000000744d         mov        ebx, 0x74

                     loc_7452:
0000000000007452         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_75e0+10, sub_76d0+37, sub_7810+53
0000000000007457         sete       al
000000000000745a         and        al, byte [rsp+arg_7]
000000000000745e         jne        sub_7590+30

0000000000007464         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_7420+114
0000000000007469         jne        loc_74d0

                     loc_746b:
000000000000746b         mov        ebx, edx                                    ; CODE XREF=sub_7540+18
000000000000746d         xor        r12d, r12d
0000000000007470         xor        eax, eax
                        ; endp

                     loc_7472:
0000000000007472         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_7320+61, sub_7320+69
0000000000007477         jne        loc_736b

000000000000747d         jmp        loc_7389
0000000000007482         nop        word [rax+rax]
0000000000007488         mov        edx, 0x8
000000000000748d         mov        ebx, 0x62
0000000000007492         jmp        sub_7420+68
0000000000007494         nop        dword [rax]
0000000000007498         cmp        dword [rsp+8], 0x2
000000000000749d         je         sub_7870                                    ; sub_7870
00000000000074a3         cmp        byte [rsp+0xd], 0x0
00000000000074a8         je         sub_76b0+16

                     loc_74ae:
00000000000074ae         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_76b0+8
00000000000074b3         je         loc_76c0

00000000000074b9         cmp        qword [rsp+arg_10], 0x0
00000000000074bf         jne        loc_787b

00000000000074c5         mov        ebx, 0x5c
00000000000074ca         nop        word [rax+rax]
                        ; endp

                     loc_74d0:
00000000000074d0         xor        r12d, r12d                                  ; CODE XREF=sub_7420+73, sub_7810+29
                        ; endp

                     loc_74d3:
00000000000074d3         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_7320+99, sub_7320+108
00000000000074d8         sete       dl
00000000000074db         cmp        byte [rsp+0xe8+var_D9], 0x0
00000000000074e0         mov        eax, edx
00000000000074e2         jne        loc_7d38

00000000000074e8         mov        eax, r8d
00000000000074eb         xor        eax, 0x1
00000000000074ee         and        al, dl
00000000000074f0         je         loc_7521

00000000000074f2         cmp        r13, r15
00000000000074f5         jbe        loc_74fc

00000000000074f7         mov        byte [r14+r15], 0x27

                     loc_74fc:
00000000000074fc         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_7420+213
0000000000007500         cmp        r13, rdx
0000000000007503         jbe        loc_750b

0000000000007505         mov        byte [r14+r15+1], 0x24

                     loc_750b:
000000000000750b         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_7420+227
000000000000750f         cmp        r13, rdx
0000000000007512         jbe        loc_751a

0000000000007514         mov        byte [r14+r15+2], 0x27

                     loc_751a:
000000000000751a         add        r15, 0x3                                    ; CODE XREF=sub_7420+242
000000000000751e         mov        r8d, eax

                     loc_7521:
0000000000007521         cmp        r13, r15                                    ; CODE XREF=sub_7420+208
0000000000007524         jbe        loc_752b

0000000000007526         mov        byte [r14+r15], 0x5c

                     loc_752b:
000000000000752b         add        r15, 0x1                                    ; CODE XREF=sub_7420+260
000000000000752f         add        rbp, 0x1
0000000000007533         jmp        loc_73c0
0000000000007538         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_7540:
0000000000007540         cmp        byte [rsp+arg_5], 0x0
0000000000007545         jne        loc_7713

000000000000754b         xor        edx, edx
000000000000754d         test       byte [rsp+arg_70], 0x1
0000000000007552         je         loc_746b

0000000000007558         add        rbp, 0x1
000000000000755c         jmp        quotearg_buffer_restyled+232
                        ; endp
0000000000007561         nop        dword [rax]
0000000000007568         cmp        dword [rsp+8], 0x2
000000000000756d         sete       dl
0000000000007570         xor        eax, eax
0000000000007572         jmp        sub_7320+56
0000000000007577         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7580:
0000000000007580         mov        edx, 0x7
0000000000007585         mov        ebx, 0x61
000000000000758a         jmp        sub_7420+68
                        ; endp
000000000000758f         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7590:
0000000000007590         cmp        dword [rsp+8], 0x2
0000000000007595         sete       dl
                        ; endp

                     loc_7598:
0000000000007598         test       rbp, rbp                                    ; CODE XREF=sub_7320+38, sub_77b0+35
000000000000759b         jne        loc_734c

00000000000075a1         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_77e0+43
00000000000075a6         and        al, dl
00000000000075a8         je         sub_7320+56

00000000000075ae         mov        rbp, r11
00000000000075b1         mov        dword [rsp+arg_0], 0x2
00000000000075b9         jmp        sub_7870+1097
                        ; endp
00000000000075be         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_75c0:
00000000000075c0         cmp        dword [rsp+arg_0], 0x2
00000000000075c5         sete       dl
00000000000075c8         xor        r12d, r12d
00000000000075cb         jmp        sub_7590+17
                        ; endp
00000000000075cd         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_75d0:
00000000000075d0         cmp        dword [rsp+arg_0], 0x2
00000000000075d5         mov        ebx, 0x20
00000000000075da         sete       dl
00000000000075dd         jmp        sub_7590+17
                        ; endp
00000000000075df         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_75e0:
00000000000075e0         mov        edx, 0xd
00000000000075e5         mov        ebx, 0x72
00000000000075ea         jmp        loc_7452
00000000000075ef         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_75f0:
00000000000075f0         mov        edx, 0xc
00000000000075f5         mov        ebx, 0x66
00000000000075fa         jmp        sub_7420+68
                        ; endp
00000000000075ff         align      512


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7600:
0000000000007600         mov        edx, 0xb
0000000000007605         mov        ebx, 0x76
000000000000760a         jmp        sub_7420+68
                        ; endp
000000000000760f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7610:
0000000000007610         mov        edx, 0xa
0000000000007615         mov        ebx, 0x6e
000000000000761a         jmp        sub_7420+50
                        ; endp
000000000000761f         align      32

                     loc_7620:
0000000000007620         xor        r10d, r10d                                  ; CODE XREF=sub_7610+135
0000000000007623         nop        dword [rax+rax]

                     loc_7628:
0000000000007628         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
000000000000762e         jne        loc_79d8

0000000000007634         mov        qword [rsp+0xe8+var_B0], r11
0000000000007639         mov        byte [rsp+0xe8+var_B8], r8b
000000000000763e         mov        byte [rsp+0xe8+var_C0], r10b
0000000000007643         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000007648         mov        rcx, qword [rax]
000000000000764b         movzx      edx, bl
000000000000764e         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000007654         movzx      r8d, byte [rsp+0xe8+var_B8]
000000000000765a         mov        r11, qword [rsp+0xe8+var_B0]
000000000000765f         mov        edi, 0x1
0000000000007664         movzx      eax, word [rcx+rdx*2]
0000000000007668         and        ax, 0x4000
000000000000766c         setne      r12b
0000000000007670         sete       al
0000000000007673         and        al, byte [rsp+0xe8+var_DB]

                     loc_7677:
0000000000007677         test       al, al                                      ; CODE XREF=sub_7870+2221
0000000000007679         jne        loc_8011

000000000000767f         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000007684         sete       dl
0000000000007687         jmp        loc_7358
000000000000768c         align      16

                     loc_7690:
0000000000007690         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000007694         cmp        bl, 0x7e
0000000000007697         ja         loc_7620

0000000000007699         lea        rcx, qword [switch_table_e2c0+552]          ; 0xe4e8
00000000000076a0         movzx      edx, bl
00000000000076a3         movsxd     rax, dword [rcx+rdx*4]
00000000000076a7         add        rax, rcx
00000000000076aa         jmp        rax
                        ; endp
00000000000076ac         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_76b0:
00000000000076b0         xor        r10d, r10d
00000000000076b3         cmp        byte [rsp+arg_5], 0x0
00000000000076b8         jne        loc_74ae

00000000000076be         nop

                     loc_76c0:
00000000000076c0         mov        edx, 0x5c                                   ; CODE XREF=sub_7420+136, sub_7420+147
00000000000076c5         mov        ebx, 0x5c
00000000000076ca         jmp        sub_7420+68
                        ; endp
00000000000076cf         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_76d0:
00000000000076d0         mov        edx, 0xc
00000000000076d5         xor        r10d, r10d
00000000000076d8         mov        ebx, 0x66
00000000000076dd         jmp        sub_7420+68
                        ; endp
00000000000076e2         nop        word [rax+rax]
00000000000076e8         mov        edx, 0xa
00000000000076ed         xor        r10d, r10d
00000000000076f0         mov        ebx, 0x6e
00000000000076f5         jmp        sub_7420+50
00000000000076fa         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7700:
0000000000007700         mov        ebx, 0x61
0000000000007705         jmp        sub_7420+176
                        ; endp
000000000000770a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7710:
0000000000007710         xor        r10d, r10d
                        ; endp

                     loc_7713:
0000000000007713         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_7540+5
0000000000007718         sete       dl
000000000000771b         cmp        byte [rsp+arg_7], 0x0
0000000000007720         jne        loc_82ba

0000000000007726         mov        eax, r8d
0000000000007729         mov        rcx, r15
000000000000772c         xor        eax, 0x1
000000000000772f         and        al, dl
0000000000007731         je         loc_7760

0000000000007733         cmp        r13, r15
0000000000007736         jbe        loc_773d

0000000000007738         mov        byte [r14+r15], 0x27

                     loc_773d:
000000000000773d         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_7710+38
0000000000007741         cmp        r13, rcx
0000000000007744         jbe        loc_774c

0000000000007746         mov        byte [r14+r15+1], 0x24

                     loc_774c:
000000000000774c         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_7710+52
0000000000007750         cmp        r13, rcx
0000000000007753         ja         loc_7d89

                     loc_7759:
0000000000007759         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_7870+1311
000000000000775d         mov        r8d, eax

                     loc_7760:
0000000000007760         cmp        r13, rcx                                    ; CODE XREF=sub_7710+33
0000000000007763         jbe        loc_776a

0000000000007765         mov        byte [r14+rcx], 0x5c

                     loc_776a:
000000000000776a         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_7710+83
000000000000776f         lea        r15, qword [rcx+1]
0000000000007773         je         loc_7d79

0000000000007779         lea        rax, qword [rbp+1]
000000000000777d         cmp        rax, r11
0000000000007780         jae        loc_779b

0000000000007782         mov        rax, qword [rsp+arg_8]
0000000000007787         movzx      eax, byte [rax+rbp+1]
000000000000778c         mov        byte [rsp+arg_20], al
0000000000007790         sub        eax, 0x30
0000000000007793         cmp        al, 0x9
0000000000007795         jbe        loc_7fc9

                     loc_779b:
000000000000779b         mov        eax, r12d                                   ; CODE XREF=sub_7710+112
000000000000779e         mov        ebx, 0x30
00000000000077a3         xor        r12d, r12d
00000000000077a6         jmp        sub_7320+56
                        ; endp
00000000000077ab         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_77b0:
00000000000077b0         cmp        dword [rsp+arg_0], 0x2
00000000000077b5         mov        r12d, r10d
00000000000077b8         sete       dl
00000000000077bb         xor        r10d, r10d
00000000000077be         xor        eax, eax
00000000000077c0         jmp        sub_7320+56
                        ; endp
00000000000077c5         nop        dword [rax]
00000000000077c8         cmp        dword [rsp+8], 0x2
00000000000077cd         sete       dl
00000000000077d0         xor        r10d, r10d
00000000000077d3         jmp        sub_7590+8
00000000000077d8         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_77e0:
00000000000077e0         cmp        dword [rsp+8], 0x2
00000000000077e5         sete       dl
00000000000077e8         xor        r10d, r10d
00000000000077eb         xor        r12d, r12d
00000000000077ee         jmp        sub_7590+17
                        ; endp
00000000000077f3         nop        dword [rax+rax]
00000000000077f8         cmp        dword [rsp+8], 0x2
00000000000077fd         mov        r12d, r10d
0000000000007800         mov        ebx, 0x20
0000000000007805         sete       dl
0000000000007808         xor        r10d, r10d
000000000000780b         jmp        sub_7590+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7810:
0000000000007810         mov        edx, 0xd
0000000000007815         xor        r10d, r10d
0000000000007818         mov        ebx, 0x72
000000000000781d         jmp        sub_7420+50
                        ; endp
0000000000007822         nop        word [rax+rax]
0000000000007828         mov        ebx, 0x76
000000000000782d         jmp        sub_7420+176
0000000000007832         nop        word [rax+rax]
0000000000007838         mov        edx, 0x9
000000000000783d         xor        r10d, r10d
0000000000007840         mov        ebx, 0x74
0000000000007845         jmp        sub_7420+50
000000000000784a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7850:
0000000000007850         mov        ebx, 0x62
0000000000007855         jmp        sub_7420+176
                        ; endp
000000000000785a         nop        word [rax+rax]

                     loc_7860:
0000000000007860         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
0000000000007863         jmp        loc_7300
0000000000007868         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_7870:
0000000000007870         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_7420+125
0000000000007875         jne        sub_7870+2416
                        ; endp

                     loc_787b:
000000000000787b         add        rbp, 0x1                                    ; CODE XREF=sub_7420+159
000000000000787f         mov        eax, r8d
0000000000007882         xor        r12d, r12d
0000000000007885         mov        ebx, 0x5c
000000000000788a         jmp        sub_7320+124
                        ; endp
000000000000788f         align      16

                     loc_7890:
0000000000007890         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
0000000000007895         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000789a         mov        r12d, r8d
000000000000789d         mov        rbp, r11
00000000000078a0         sete       dl
00000000000078a3         mov        eax, ebx
00000000000078a5         test       r15, r15
00000000000078a8         sete       cl
00000000000078ab         and        eax, edx
00000000000078ad         and        al, cl
00000000000078af         jne        loc_8316

00000000000078b5         mov        eax, ebx
00000000000078b7         xor        eax, 0x1
00000000000078ba         and        dl, al
00000000000078bc         je         loc_822c

00000000000078c2         cmp        byte [rsp+0xe8+var_6C], 0x0
00000000000078c7         je         loc_822a

00000000000078cd         cmp        byte [rsp+0xe8+var_DA], 0x0
00000000000078d2         jne        loc_82cd

00000000000078d8         test       r13, r13
00000000000078db         sete       al
00000000000078de         cmp        qword [rsp+0xe8+var_98], 0x0
00000000000078e4         setne      dl
00000000000078e7         and        al, dl
00000000000078e9         je         loc_830c

00000000000078ef         mov        r13, qword [rsp+0xe8+var_98]

                     loc_78f4:
00000000000078f4         lea        rbx, qword [aLibs+29]                       ; 0xe25d, CODE XREF=sub_7870+2781
00000000000078fb         mov        byte [r14], 0x27
00000000000078ff         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000007907         mov        r15d, 0x1
000000000000790d         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000007916         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000791b         mov        qword [rsp+0xe8+var_A0], rbx
0000000000007920         mov        byte [rsp+0xe8+var_6C], al
0000000000007924         jmp        loc_7203
0000000000007929         align      16

                     loc_7930:
0000000000007930         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_7420+8
0000000000007935         jne        sub_7870+2416

000000000000793b         test       r13, r13
000000000000793e         je         loc_7d40

0000000000007944         xor        edx, edx
0000000000007946         cmp        qword [rsp+arg_48], 0x0
000000000000794c         jne        loc_7d40

                     loc_7952:
0000000000007952         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_7870+1284, sub_7870+2794
0000000000007957         add        r15, 0x3
000000000000795b         xor        eax, eax
000000000000795d         mov        byte [rsp+arg_74], r12b
0000000000007962         xor        r8d, r8d
0000000000007965         mov        r13, rdx
0000000000007968         mov        ebx, 0x27
000000000000796d         jmp        sub_7320+105
                        ; endp
0000000000007972         align      8

                     loc_7978:
0000000000007978         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_73f0+19
000000000000797d         je         loc_79a0

000000000000797f         lea        rcx, qword [rbp+2]
0000000000007983         cmp        rcx, r11
0000000000007986         jae        loc_79a0

0000000000007988         mov        rax, qword [rsp+arg_8]
000000000000798d         cmp        byte [rax+rbp+1], 0x3f
0000000000007992         je         loc_8122

0000000000007998         nop        dword [rax+rax]

                     loc_79a0:
00000000000079a0         xor        edx, edx                                    ; CODE XREF=sub_7870+269, sub_7870+278, sub_7870+2233, sub_7870+2253
00000000000079a2         xor        r12d, r12d
00000000000079a5         xor        eax, eax
00000000000079a7         mov        ebx, 0x3f
00000000000079ac         jmp        sub_7320+56
                        ; endp
00000000000079b1         align      8

                     loc_79b8:
00000000000079b8         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_73f0+10
00000000000079bd         jne        loc_81e0

00000000000079c3         xor        r12d, r12d
00000000000079c6         xor        eax, eax
00000000000079c8         mov        ebx, 0x3f
00000000000079cd         jmp        sub_7320+105
                        ; endp
00000000000079d2         align      8

                     loc_79d8:
00000000000079d8         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_7610+30
00000000000079e0         cmp        r11, 0xffffffffffffffff
00000000000079e4         mov        qword [rsp+0xe8+var_48], 0x0
00000000000079f0         mov        qword [rsp+0xe8+var_C0], rax
00000000000079f5         jne        loc_7a24

00000000000079f7         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
00000000000079fc         mov        byte [rsp+0xe8+var_A8], r8b
0000000000007a01         mov        byte [rsp+0xe8+var_B0], r10b
0000000000007a06         mov        qword [rsp+0xe8+var_B8], r9
0000000000007a0b         call       j_strlen                                    ; strlen
0000000000007a10         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000007a16         movzx      r10d, byte [rsp+0xe8+var_B0]
0000000000007a1c         mov        r11, rax
0000000000007a1f         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_7a24:
0000000000007a24         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_7870+389
0000000000007a2c         xor        ecx, ecx
0000000000007a2e         mov        byte [rsp+0xe8+var_6A], bl
0000000000007a32         mov        byte [rsp+0xe8+var_6B], r8b
0000000000007a37         mov        rbx, rcx
0000000000007a3a         mov        qword [rsp+0xe8+var_60], r9
0000000000007a42         mov        qword [rsp+0xe8+var_B0], rax
0000000000007a47         mov        byte [rsp+0xe8+var_69], r10b
0000000000007a4c         mov        qword [rsp+0xe8+var_68], r15
0000000000007a54         mov        qword [rsp+0xe8+var_A8], r14
0000000000007a59         mov        qword [rsp+0xe8+var_78], r13
0000000000007a5e         mov        qword [rsp+0xe8+var_B8], r11

                     loc_7a63:
0000000000007a63         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_7870+623
0000000000007a68         lea        r14, qword [rbp+rbx]
0000000000007a6d         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000007a72         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000007a77         mov        rdi, qword [rsp+0xe8+var_B0]
0000000000007a7c         lea        r13, qword [rax+r14]
0000000000007a80         sub        rdx, r14
0000000000007a83         mov        rsi, r13
0000000000007a86         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000007a8b         test       rax, rax
0000000000007a8e         mov        r15, rax
0000000000007a91         je         loc_7ae1

0000000000007a93         cmp        rax, 0xffffffffffffffff
0000000000007a97         je         loc_80b5

0000000000007a9d         cmp        rax, 0xfffffffffffffffe
0000000000007aa1         je         loc_8041

0000000000007aa7         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000007aac         sete       al
0000000000007aaf         and        al, byte [rsp+0xe8+var_D9]
0000000000007ab3         jne        loc_7c50

                     loc_7ab9:
0000000000007ab9         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_7870+996, sub_7870+1031
0000000000007ac0         call       j_iswprint                                  ; iswprint
0000000000007ac5         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
0000000000007aca         test       eax, eax
0000000000007acc         mov        eax, 0x0
0000000000007ad1         cmove      r12d, eax
0000000000007ad5         add        rbx, r15
0000000000007ad8         call       j_mbsinit                                   ; mbsinit
0000000000007add         test       eax, eax
0000000000007adf         je         loc_7a63

                     loc_7ae1:
0000000000007ae1         mov        edx, r12d                                   ; CODE XREF=sub_7870+545
0000000000007ae4         mov        rdi, rbx
0000000000007ae7         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000007aed         xor        edx, 0x1
0000000000007af0         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000007af5         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000007afb         and        dl, byte [rsp+0xe8+var_DB]
0000000000007aff         mov        r15, qword [rsp+0xe8+var_68]
0000000000007b07         mov        r14, qword [rsp+0xe8+var_A8]
0000000000007b0c         mov        r13, qword [rsp+0xe8+var_78]
0000000000007b11         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_7b16:
0000000000007b16         cmp        rdi, 0x1                                    ; CODE XREF=sub_7870+2112, sub_7870+2168
0000000000007b1a         jbe        loc_811b

                     loc_7b20:
0000000000007b20         mov        rcx, rdi                                    ; CODE XREF=sub_7870+1961
0000000000007b23         xor        esi, esi
0000000000007b25         movzx      r9d, byte [rsp+0xe8+var_D9]
0000000000007b2b         add        rcx, rbp
0000000000007b2e         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000007b33         jmp        loc_7bee
0000000000007b38         align      64

                     loc_7b40:
0000000000007b40         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_7870+896
0000000000007b45         sete       al
0000000000007b48         test       r9b, r9b
0000000000007b4b         jne        loc_8000

0000000000007b51         mov        esi, r8d
0000000000007b54         xor        esi, 0x1
0000000000007b57         and        al, sil
0000000000007b5a         je         loc_7b8b

0000000000007b5c         cmp        r13, r15
0000000000007b5f         jbe        loc_7b66

0000000000007b61         mov        byte [r14+r15], 0x27

                     loc_7b66:
0000000000007b66         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_7870+751
0000000000007b6a         cmp        r13, rsi
0000000000007b6d         jbe        loc_7b75

0000000000007b6f         mov        byte [r14+r15+1], 0x24

                     loc_7b75:
0000000000007b75         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_7870+765
0000000000007b79         cmp        r13, rsi
0000000000007b7c         jbe        loc_7b84

0000000000007b7e         mov        byte [r14+r15+2], 0x27

                     loc_7b84:
0000000000007b84         add        r15, 0x3                                    ; CODE XREF=sub_7870+780
0000000000007b88         mov        r8d, eax

                     loc_7b8b:
0000000000007b8b         cmp        r13, r15                                    ; CODE XREF=sub_7870+746
0000000000007b8e         jbe        loc_7b95

0000000000007b90         mov        byte [r14+r15], 0x5c

                     loc_7b95:
0000000000007b95         lea        rax, qword [r15+1]                          ; CODE XREF=sub_7870+798
0000000000007b99         cmp        r13, rax
0000000000007b9c         jbe        loc_7bab

0000000000007b9e         mov        eax, ebx
0000000000007ba0         shr        al, 0x6
0000000000007ba3         add        eax, 0x30
0000000000007ba6         mov        byte [r14+r15+1], al

                     loc_7bab:
0000000000007bab         lea        rax, qword [r15+2]                          ; CODE XREF=sub_7870+812
0000000000007baf         cmp        r13, rax
0000000000007bb2         jbe        loc_7bc4

0000000000007bb4         mov        eax, ebx
0000000000007bb6         shr        al, 0x3
0000000000007bb9         and        eax, 0x7
0000000000007bbc         add        eax, 0x30
0000000000007bbf         mov        byte [r14+r15+2], al

                     loc_7bc4:
0000000000007bc4         and        ebx, 0x7                                    ; CODE XREF=sub_7870+834
0000000000007bc7         add        rbp, 0x1
0000000000007bcb         add        r15, 0x3
0000000000007bcf         add        ebx, 0x30
0000000000007bd2         cmp        rbp, rcx
0000000000007bd5         jae        loc_73c0

0000000000007bdb         mov        esi, edx

                     loc_7bdd:
0000000000007bdd         cmp        r13, r15                                    ; CODE XREF=sub_7870+985, sub_7870+1969
0000000000007be0         jbe        loc_7be6

0000000000007be2         mov        byte [r14+r15], bl

                     loc_7be6:
0000000000007be6         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_7870+880
0000000000007bea         add        r15, 0x1

                     loc_7bee:
0000000000007bee         test       dl, dl                                      ; CODE XREF=sub_7870+707
0000000000007bf0         jne        loc_7b40

0000000000007bf6         mov        eax, esi
0000000000007bf8         xor        eax, 0x1
0000000000007bfb         and        eax, r8d
0000000000007bfe         test       r10b, r10b
0000000000007c01         je         loc_7c11

0000000000007c03         cmp        r13, r15
0000000000007c06         jbe        loc_7c0d

0000000000007c08         mov        byte [r14+r15], 0x5c

                     loc_7c0d:
0000000000007c0d         add        r15, 0x1                                    ; CODE XREF=sub_7870+918

                     loc_7c11:
0000000000007c11         add        rbp, 0x1                                    ; CODE XREF=sub_7870+913
0000000000007c15         cmp        rbp, rcx
0000000000007c18         jae        loc_739c

0000000000007c1e         test       al, al
0000000000007c20         je         loc_801e

0000000000007c26         cmp        r13, r15
0000000000007c29         jbe        loc_7c30

0000000000007c2b         mov        byte [r14+r15], 0x27

                     loc_7c30:
0000000000007c30         lea        rax, qword [r15+1]                          ; CODE XREF=sub_7870+953
0000000000007c34         cmp        r13, rax
0000000000007c37         jbe        loc_7c3f

0000000000007c39         mov        byte [r14+r15+1], 0x27

                     loc_7c3f:
0000000000007c3f         add        r15, 0x2                                    ; CODE XREF=sub_7870+967
0000000000007c43         xor        r10d, r10d
0000000000007c46         xor        r8d, r8d
0000000000007c49         jmp        loc_7bdd
0000000000007c4b         align      16

                     loc_7c50:
0000000000007c50         cmp        r15, 0x1                                    ; CODE XREF=sub_7870+579
0000000000007c54         je         loc_7ab9

0000000000007c5a         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000007c5f         lea        rcx, qword [rdi+r15]
0000000000007c63         lea        rdx, qword [rdi+r14+1]
0000000000007c68         lea        r8, qword [rcx+r14]
0000000000007c6c         jmp        loc_7c7d
0000000000007c6e         align      16

                     loc_7c70:
0000000000007c70         add        rdx, 0x1                                    ; CODE XREF=sub_7870+1046, sub_7870+1072
0000000000007c74         cmp        r8, rdx
0000000000007c77         je         loc_7ab9

                     loc_7c7d:
0000000000007c7d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_7870+1020
0000000000007c80         sub        ecx, 0x5b
0000000000007c83         cmp        cl, 0x21
0000000000007c86         ja         loc_7c70

0000000000007c88         mov        esi, 0x1
0000000000007c8d         shl        rsi, cl
0000000000007c90         mov        rcx, rsi
0000000000007c93         movabs     rsi, 0x20000002b
0000000000007c9d         test       rcx, rsi
0000000000007ca0         je         loc_7c70

0000000000007ca2         mov        r14, qword [rsp+0xe8+var_A8]
0000000000007ca7         mov        r13, qword [rsp+0xe8+var_78]
0000000000007cac         mov        rbp, qword [rsp+0xe8+var_B8]
0000000000007cb1         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_7cb9:
0000000000007cb9         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_7870+1227, sub_7870+1948, sub_7870+2585, sub_7870+2734
0000000000007cbe         je         loc_7cd0

0000000000007cc0         test       al, al
0000000000007cc2         mov        eax, 0x4
0000000000007cc7         cmove      eax, dword [rsp+0xe8+var_E0]
0000000000007ccc         mov        dword [rsp+0xe8+var_E0], eax

                     loc_7cd0:
0000000000007cd0         sub        rsp, 0x8                                    ; CODE XREF=sub_7870+1102
0000000000007cd4         mov        rcx, rbp
0000000000007cd7         mov        rsi, r13
0000000000007cda         push       qword [rsp+0xf0+var_88]
0000000000007cde         push       qword [rsp+0xf8+var_80]
0000000000007ce2         mov        rdi, r14
0000000000007ce5         push       0x0
0000000000007ce7         mov        r9d, dword [rsp+0x108+var_70]
0000000000007cef         mov        r8d, dword [rsp+0x108+var_E0]
0000000000007cf4         mov        rdx, qword [rsp+0x108+var_D8]
0000000000007cf9         and        r9d, 0xfffffffd
0000000000007cfd         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000007d02         add        rsp, 0x20
0000000000007d06         mov        r15, rax

                     loc_7d09:
0000000000007d09         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_7870+2549, sub_7870+2560, sub_7870+2711
0000000000007d11         xor        rbx, qword [fs:0x28]
0000000000007d1a         mov        rax, r15
0000000000007d1d         jne        loc_8323

0000000000007d23         add        rsp, 0xb8
0000000000007d2a         pop        rbx
0000000000007d2b         pop        rbp
0000000000007d2c         pop        r12
0000000000007d2e         pop        r13
0000000000007d30         pop        r14
0000000000007d32         pop        r15
0000000000007d34         ret
                        ; endp
0000000000007d35         align      8

                     loc_7d38:
0000000000007d38         mov        rbp, r11                                    ; CODE XREF=sub_7420+194
0000000000007d3b         jmp        loc_7cb9

                     loc_7d40:
0000000000007d40         cmp        r13, r15                                    ; CODE XREF=sub_7870+206, sub_7870+220
0000000000007d43         jbe        loc_7d4a

0000000000007d45         mov        byte [r14+r15], 0x27

                     loc_7d4a:
0000000000007d4a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_7870+1235
0000000000007d4e         cmp        r13, rax
0000000000007d51         jbe        loc_7d59

0000000000007d53         mov        byte [r14+r15+1], 0x5c

                     loc_7d59:
0000000000007d59         lea        rax, qword [r15+2]                          ; CODE XREF=sub_7870+1249
0000000000007d5d         cmp        r13, rax
0000000000007d60         jbe        loc_8352

0000000000007d66         mov        rdx, r13
0000000000007d69         mov        byte [r14+r15+2], 0x27
0000000000007d6f         mov        r13, qword [rsp+arg_48]
0000000000007d74         jmp        loc_7952

                     loc_7d79:
0000000000007d79         mov        eax, r12d                                   ; CODE XREF=sub_7710+99
0000000000007d7c         mov        ebx, 0x30
0000000000007d81         xor        r12d, r12d
0000000000007d84         jmp        sub_7320+105
                        ; endp

                     loc_7d89:
0000000000007d89         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_7710+67
0000000000007d8f         jmp        loc_7759

                     loc_7d94:
0000000000007d94         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
0000000000007d96         jne        loc_71c3

0000000000007d9c         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_7da1:
0000000000007da1         test       r13, r13                                    ; CODE XREF=sub_7870+2749
0000000000007da4         jne        loc_833a

0000000000007daa         lea        rax, qword [aLibs+29]                       ; 0xe25d
0000000000007db1         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007dba         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000007dbf         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007dc4         xor        r12d, r12d
0000000000007dc7         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000007dcc         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000007dd5         mov        qword [rsp+0xe8+var_A0], rax
0000000000007dda         mov        r15d, 0x1
0000000000007de0         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000007de8         jmp        loc_7203
0000000000007ded         align      16

                     loc_7df0:
0000000000007df0         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
0000000000007df2         jne        loc_81ed

0000000000007df8         test       r13, r13
0000000000007dfb         je         loc_8026

0000000000007e01         mov        byte [r14], 0x22
0000000000007e05         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000007e0a         xor        r12d, r12d
0000000000007e0d         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007e12         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_7e1b:
0000000000007e1b         lea        rax, qword [aLibs+27]                       ; 0xe25b, CODE XREF=sub_7870+1996
0000000000007e22         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000007e27         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000007e2c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000007e35         mov        r15d, 0x1
0000000000007e3b         mov        qword [rsp+0xe8+var_A0], rax
0000000000007e40         jmp        loc_7203

                     loc_7e45:
0000000000007e45         lea        rax, qword [aLibs+27]                       ; case 6, 0xe25b, CODE XREF=quotearg_buffer_restyled+145
0000000000007e4c         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000007e51         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007e56         xor        r12d, r12d
0000000000007e59         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007e62         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000007e67         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000007e6c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000007e75         xor        r15d, r15d
0000000000007e78         mov        qword [rsp+0xe8+var_A0], rax
0000000000007e7d         mov        dword [rsp+0xe8+var_E0], 0x5
0000000000007e85         jmp        loc_7203

                     loc_7e8a:
0000000000007e8a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
0000000000007e8f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007e94         xor        r12d, r12d
0000000000007e97         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007ea0         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000007ea5         xor        r15d, r15d
0000000000007ea8         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000007ead         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000007eb6         mov        qword [rsp+0xe8+var_A0], 0x0
0000000000007ebf         jmp        loc_7203

                     loc_7ec4:
0000000000007ec4         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
0000000000007ec9         je         loc_7f21

0000000000007ecb         lea        rsi, qword [aLibs+31]                       ; argument "msgid" for method j_dcgettext, 0xe25f
0000000000007ed2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007ed4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007ed9         call       j_dcgettext                                 ; dcgettext
0000000000007ede         mov        rcx, rax
0000000000007ee1         mov        qword [rsp+0xe8+var_80], rax
0000000000007ee6         lea        rax, qword [aLibs+31]                       ; 0xe25f
0000000000007eed         cmp        rcx, rax
0000000000007ef0         je         loc_828e

                     loc_7ef6:
0000000000007ef6         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0xe25d, CODE XREF=sub_7870+2607
0000000000007efd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007eff         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007f04         call       j_dcgettext                                 ; dcgettext
0000000000007f09         mov        rcx, rax
0000000000007f0c         mov        qword [rsp+0xe8+var_88], rax
0000000000007f11         lea        rax, qword [aLibs+29]                       ; 0xe25d
0000000000007f18         cmp        rcx, rax
0000000000007f1b         je         loc_82a4

                     loc_7f21:
0000000000007f21         xor        r15d, r15d                                  ; CODE XREF=sub_7870+1625, sub_7870+2629
0000000000007f24         test       ebx, ebx
0000000000007f26         je         loc_80ed

                     loc_7f2c:
0000000000007f2c         test       ebx, ebx                                    ; CODE XREF=sub_7870+2183, sub_7870+2214
0000000000007f2e         mov        rbx, qword [rsp+0xe8+var_88]
0000000000007f33         setne      byte [rsp+0xe8+var_D9]
0000000000007f38         xor        r12d, r12d
0000000000007f3b         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
0000000000007f3e         call       j_strlen                                    ; strlen
0000000000007f43         mov        qword [rsp+0xe8+var_A0], rbx
0000000000007f48         mov        qword [rsp+0xe8+var_D0], rax
0000000000007f4d         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000007f52         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007f57         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007f60         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000007f65         jmp        loc_7203

                     loc_7f6a:
0000000000007f6a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
0000000000007f6f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007f74         xor        r12d, r12d
0000000000007f77         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007f80         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000007f85         xor        r15d, r15d
0000000000007f88         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000007f8d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000007f96         mov        qword [rsp+0xe8+var_A0], 0x0
0000000000007f9f         jmp        loc_7203

                     loc_7fa4:
0000000000007fa4         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
0000000000007fa9         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007fae         xor        r12d, r12d
0000000000007fb1         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007fba         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000007fbf         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000007fc4         jmp        loc_71e3

                     loc_7fc9:
0000000000007fc9         cmp        r13, r15                                    ; CODE XREF=sub_7710+133
0000000000007fcc         jbe        loc_7fd3

0000000000007fce         mov        byte [r14+r15], 0x30

                     loc_7fd3:
0000000000007fd3         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_7870+1884
0000000000007fd7         cmp        r13, rax
0000000000007fda         jbe        loc_7fe2

0000000000007fdc         mov        byte [r14+rcx+2], 0x30

                     loc_7fe2:
0000000000007fe2         mov        eax, r12d                                   ; CODE XREF=sub_7870+1898
0000000000007fe5         lea        r15, qword [rcx+3]
0000000000007fe9         xor        r12d, r12d
0000000000007fec         mov        ebx, 0x30
0000000000007ff1         jmp        sub_7320+56
                        ; endp
0000000000007ff6         align      32768

                     loc_8000:
0000000000008000         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_7870+731, DATA XREF=main+4871, main+6133, main+6191, iwrite.constprop.7+423, skip+542
0000000000008005         mov        rbp, r11
0000000000008008         mov        byte [rsp+0xe8+var_DB], bl
000000000000800c         jmp        loc_7cb9

                     loc_8011:
0000000000008011         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_7610+105
0000000000008016         xor        r12d, r12d
0000000000008019         jmp        loc_7b20

                     loc_801e:
000000000000801e         xor        r10d, r10d                                  ; CODE XREF=sub_7870+944
0000000000008021         jmp        loc_7bdd

                     loc_8026:
0000000000008026         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_7870+1419
000000000000802f         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000008034         xor        r12d, r12d
0000000000008037         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000803c         jmp        loc_7e1b

                     loc_8041:
0000000000008041         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_7870+561
0000000000008046         mov        rsi, r14
0000000000008049         mov        rcx, r13
000000000000804c         mov        rax, rbx
000000000000804f         mov        rdi, rbx
0000000000008052         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000008058         movzx      ebx, byte [rsp+0xe8+var_6A]
000000000000805d         mov        r9, qword [rsp+0xe8+var_60]
0000000000008065         cmp        rsi, r11
0000000000008068         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000806e         mov        r15, qword [rsp+0xe8+var_68]
0000000000008076         mov        r14, qword [rsp+0xe8+var_A8]
000000000000807b         mov        r13, qword [rsp+0xe8+var_78]
0000000000008080         jae        loc_80a8

0000000000008082         cmp        byte [rcx], 0x0
0000000000008085         jne        loc_8097

0000000000008087         jmp        loc_80a8
0000000000008089         align      16

                     loc_8090:
0000000000008090         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_7870+2099
0000000000008095         je         loc_80a5

                     loc_8097:
0000000000008097         add        rax, 0x1                                    ; CODE XREF=sub_7870+2069
000000000000809b         lea        rdx, qword [rbp+rax]
00000000000080a0         cmp        r11, rdx
00000000000080a3         ja         loc_8090

                     loc_80a5:
00000000000080a5         mov        rdi, rax                                    ; CODE XREF=sub_7870+2085

                     loc_80a8:
00000000000080a8         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_7870+2064, sub_7870+2071
00000000000080ad         xor        r12d, r12d
00000000000080b0         jmp        loc_7b16

                     loc_80b5:
00000000000080b5         mov        rdi, rbx                                    ; CODE XREF=sub_7870+551
00000000000080b8         movzx      r8d, byte [rsp+0xe8+var_6B]
00000000000080be         movzx      ebx, byte [rsp+0xe8+var_6A]
00000000000080c3         movzx      r10d, byte [rsp+0xe8+var_69]
00000000000080c9         mov        r15, qword [rsp+0xe8+var_68]
00000000000080d1         xor        r12d, r12d
00000000000080d4         mov        r14, qword [rsp+0xe8+var_A8]
00000000000080d9         mov        r13, qword [rsp+0xe8+var_78]
00000000000080de         mov        r11, qword [rsp+0xe8+var_B8]
00000000000080e3         movzx      edx, byte [rsp+0xe8+var_DB]
00000000000080e8         jmp        loc_7b16

                     loc_80ed:
00000000000080ed         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_7870+1718
00000000000080f2         movzx      eax, byte [rdx]
00000000000080f5         test       al, al
00000000000080f7         je         loc_7f2c

00000000000080fd         nop        dword [rax]

                     loc_8100:
0000000000008100         cmp        r13, r15                                    ; CODE XREF=sub_7870+2212
0000000000008103         jbe        loc_8109

0000000000008105         mov        byte [r14+r15], al

                     loc_8109:
0000000000008109         add        r15, 0x1                                    ; CODE XREF=sub_7870+2195
000000000000810d         movzx      eax, byte [rdx+r15]
0000000000008112         test       al, al
0000000000008114         jne        loc_8100

0000000000008116         jmp        loc_7f2c

                     loc_811b:
000000000000811b         mov        eax, edx                                    ; CODE XREF=sub_7870+682
000000000000811d         jmp        loc_7677

                     loc_8122:
0000000000008122         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_7870+290
0000000000008126         cmp        bl, 0x3e
0000000000008129         ja         loc_79a0

000000000000812f         movabs     rax, 0x7000a38200000000
0000000000008139         bt         rax, rbx
000000000000813d         jae        loc_79a0

0000000000008143         cmp        byte [rsp+arg_7], 0x0
0000000000008148         jne        loc_8332

000000000000814e         cmp        r13, r15
0000000000008151         jbe        loc_8158

0000000000008153         mov        byte [r14+r15], 0x3f

                     loc_8158:
0000000000008158         lea        rax, qword [r15+1]                          ; CODE XREF=sub_7870+2273
000000000000815c         cmp        r13, rax
000000000000815f         jbe        loc_8167

0000000000008161         mov        byte [r14+r15+1], 0x22

                     loc_8167:
0000000000008167         lea        rax, qword [r15+2]                          ; CODE XREF=sub_7870+2287
000000000000816b         cmp        r13, rax
000000000000816e         jbe        loc_8176

0000000000008170         mov        byte [r14+r15+2], 0x22

                     loc_8176:
0000000000008176         lea        rax, qword [r15+3]                          ; CODE XREF=sub_7870+2302
000000000000817a         cmp        r13, rax
000000000000817d         jbe        loc_8185

000000000000817f         mov        byte [r14+r15+3], 0x3f

                     loc_8185:
0000000000008185         add        r15, 0x4                                    ; CODE XREF=sub_7870+2317
0000000000008189         xor        edx, edx
000000000000818b         xor        r12d, r12d
000000000000818e         xor        eax, eax
0000000000008190         mov        rbp, rcx
0000000000008193         jmp        sub_7320+56
                        ; endp

                     loc_8198:
0000000000008198         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
000000000000819a         je         loc_8328

00000000000081a0         lea        rax, qword [aLibs+29]                       ; 0xe25d
00000000000081a7         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000081ac         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000081b1         xor        r12d, r12d
00000000000081b4         mov        qword [rsp+0xe8+var_98], 0x0
00000000000081bd         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000081c2         mov        byte [rsp+0xe8+var_DB], 0x0
00000000000081c7         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000081d0         xor        r15d, r15d
00000000000081d3         mov        qword [rsp+0xe8+var_A0], rax
00000000000081d8         jmp        loc_7203
00000000000081dd         align      32

                     loc_81e0:
00000000000081e0         mov        rbp, r11                                    ; CODE XREF=sub_7870+333
00000000000081e3         movzx      eax, byte [rsp+arg_7]
00000000000081e8         jmp        sub_7870+1097
                        ; endp

                     loc_81ed:
00000000000081ed         lea        rax, qword [aLibs+27]                       ; 0xe25b, CODE XREF=sub_7870+1410
00000000000081f4         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000081f9         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000081fe         xor        r12d, r12d
0000000000008201         mov        qword [rsp+0xe8+var_98], 0x0
000000000000820a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000820f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000008214         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000821d         xor        r15d, r15d
0000000000008220         mov        qword [rsp+0xe8+var_A0], rax
0000000000008225         jmp        loc_7203

                     loc_822a:
000000000000822a         mov        eax, edx                                    ; CODE XREF=sub_7870+87

                     loc_822c:
000000000000822c         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_7870+76, sub_7870+2721
0000000000008231         test       rbx, rbx
0000000000008234         je         loc_8262

0000000000008236         test       al, al
0000000000008238         je         loc_8262

000000000000823a         movzx      ecx, byte [rbx]
000000000000823d         mov        rax, rbx
0000000000008240         test       cl, cl
0000000000008242         je         loc_8262

0000000000008244         mov        rdx, r15
0000000000008247         sub        rax, r15

                     loc_824a:
000000000000824a         cmp        r13, rdx                                    ; CODE XREF=sub_7870+2541
000000000000824d         jbe        loc_8253

000000000000824f         mov        byte [r14+rdx], cl

                     loc_8253:
0000000000008253         add        rdx, 0x1                                    ; CODE XREF=sub_7870+2525
0000000000008257         movzx      ecx, byte [rax+rdx]
000000000000825b         test       cl, cl
000000000000825d         jne        loc_824a

000000000000825f         mov        r15, rdx

                     loc_8262:
0000000000008262         cmp        r13, r15                                    ; CODE XREF=sub_7870+2500, sub_7870+2504, sub_7870+2514
0000000000008265         jbe        loc_7d09

000000000000826b         mov        byte [r14+r15], 0x0
0000000000008270         jmp        loc_7d09

                     loc_8275:
0000000000008275         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
000000000000827a         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000827f         mov        rbp, r11
0000000000008282         sete       al
0000000000008285         mov        byte [rsp+0xe8+var_DB], bl
0000000000008289         jmp        loc_7cb9

                     loc_828e:
000000000000828e         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_7870+1664
0000000000008292         mov        rdi, rcx
0000000000008295         call       gettext_quote.part.1                        ; gettext_quote.part.1
000000000000829a         mov        qword [rsp+0xe8+var_80], rax
000000000000829f         jmp        loc_7ef6

                     loc_82a4:
00000000000082a4         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_7870+1707
00000000000082a8         mov        rdi, rcx
00000000000082ab         call       gettext_quote.part.1                        ; gettext_quote.part.1
00000000000082b0         mov        qword [rsp+0xe8+var_88], rax
00000000000082b5         jmp        loc_7f21

                     loc_82ba:
00000000000082ba         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_7710+16
00000000000082bf         mov        rbp, r11
00000000000082c2         mov        eax, edx
00000000000082c4         mov        byte [rsp+arg_5], bl
00000000000082c8         jmp        sub_7870+1097
                        ; endp

                     loc_82cd:
00000000000082cd         sub        rsp, 0x8                                    ; CODE XREF=sub_7870+98
00000000000082d1         mov        r8d, 0x5
00000000000082d7         mov        rcx, r11
00000000000082da         push       qword [rsp+0xf0+var_88]
00000000000082de         push       qword [rsp+0xf8+var_80]
00000000000082e2         mov        rdi, r14
00000000000082e5         push       qword [rsp+0x100+var_C8]
00000000000082e9         mov        r9d, dword [rsp+0x108+var_70]
00000000000082f1         mov        rdx, qword [rsp+0x108+var_D8]
00000000000082f6         mov        rsi, qword [rsp+0x108+var_98]
00000000000082fb         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008300         add        rsp, 0x20
0000000000008304         mov        r15, rax
0000000000008307         jmp        loc_7d09

                     loc_830c:
000000000000830c         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_7870+121
0000000000008311         jmp        loc_822c

                     loc_8316:
0000000000008316         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_7870+63
000000000000831e         jmp        loc_7cb9

                     loc_8323:
0000000000008323         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_7870+1197
                        ; endp

                     loc_8328:
0000000000008328         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_7870+2346
000000000000832d         jmp        loc_7da1

                     loc_8332:
0000000000008332         mov        rbp, r11                                    ; CODE XREF=sub_7870+2264
0000000000008335         jmp        sub_7870+1120
                        ; endp

                     loc_833a:
000000000000833a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_7870+1332
000000000000833f         xor        eax, eax
0000000000008341         xor        r12d, r12d
0000000000008344         mov        qword [rsp+0xe8+var_98], 0x0
000000000000834d         jmp        loc_78f4

                     loc_8352:
0000000000008352         mov        rdx, r13                                    ; CODE XREF=sub_7870+1264
0000000000008355         mov        r13, qword [rsp+arg_48]
000000000000835a         jmp        loc_7952

                     loc_835f:
000000000000835f         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
0000000000008364         align      16                                          ; End of unwind block (FDE at 0xfc30)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000008370         push       r15                                         ; Begin of unwind block (FDE at 0xfca8), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000008372         push       r14
0000000000008374         movsxd     r15, edi
0000000000008377         push       r13
0000000000008379         push       r12
000000000000837b         mov        r14, rdx
000000000000837e         push       rbp
000000000000837f         push       rbx
0000000000008380         mov        rbp, rcx
0000000000008383         sub        rsp, 0x28
0000000000008387         mov        qword [rsp+0x58+var_50], rsi
000000000000838c         call       j___errno_location                          ; __errno_location
0000000000008391         mov        r13, rax
0000000000008394         mov        eax, dword [rax]
0000000000008396         test       r15d, r15d
0000000000008399         mov        rbx, qword [slotvec]                        ; slotvec
00000000000083a0         mov        dword [rsp+0x58+var_40], eax
00000000000083a4         js         loc_8511

00000000000083aa         cmp        dword [nslots], r15d                        ; nslots
00000000000083b1         jg         loc_8415

00000000000083b3         cmp        r15d, 0x7fffffff
00000000000083ba         je         loc_8516

00000000000083c0         lea        r12d, dword [r15+1]
00000000000083c4         lea        rax, qword [slotvec0]                       ; slotvec0
00000000000083cb         movsxd     rsi, r12d
00000000000083ce         shl        rsi, 0x4
00000000000083d2         cmp        rbx, rax
00000000000083d5         je         loc_84f0

00000000000083db         mov        rdi, rbx                                    ; argument #1 for method xrealloc
00000000000083de         call       xrealloc                                    ; xrealloc
00000000000083e3         mov        rbx, rax
00000000000083e6         mov        qword [slotvec], rax                        ; slotvec

                     loc_83ed:
00000000000083ed         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
00000000000083f4         mov        edx, r12d
00000000000083f7         xor        esi, esi                                    ; argument "__c" for method j_memset
00000000000083f9         sub        edx, edi
00000000000083fb         shl        rdi, 0x4
00000000000083ff         movsxd     rdx, edx
0000000000008402         add        rdi, rbx                                    ; argument "__s" for method j_memset
0000000000008405         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
0000000000008409         call       j_memset                                    ; memset
000000000000840e         mov        dword [nslots], r12d                        ; nslots

                     loc_8415:
0000000000008415         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
0000000000008418         shl        r15, 0x4
000000000000841c         sub        rsp, 0x8
0000000000008420         add        rbx, r15
0000000000008423         lea        r15, qword [rbp+8]
0000000000008427         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
000000000000842b         mov        r11, qword [rbx]
000000000000842e         mov        r12, qword [rbx+8]
0000000000008432         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000008435         or         eax, 0x1
0000000000008438         mov        dword [rsp+0x60+var_3C], eax
000000000000843c         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000843f         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
0000000000008442         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000008445         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000008447         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
000000000000844a         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
000000000000844f         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
0000000000008452         mov        qword [rsp+0x78+var_48], r11
0000000000008457         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000845c         add        rsp, 0x20
0000000000008460         mov        r11, qword [rsp+0x58+var_48]
0000000000008465         cmp        r11, rax
0000000000008468         ja         loc_84d1

000000000000846a         lea        rsi, qword [rax+1]
000000000000846e         lea        rax, qword [slot0]                          ; slot0
0000000000008475         cmp        r12, rax
0000000000008478         mov        qword [rbx], rsi
000000000000847b         je         loc_848f

000000000000847d         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000008480         mov        qword [rsp+0x58+var_48], rsi
0000000000008485         call       j_free                                      ; free
000000000000848a         mov        rsi, qword [rsp+0x58+var_48]

                     loc_848f:
000000000000848f         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
0000000000008492         mov        qword [rsp+0x58+var_48], rsi
0000000000008497         call       xmalloc                                     ; xmalloc
000000000000849c         sub        rsp, 0x8
00000000000084a0         mov        qword [rbx+8], rax
00000000000084a4         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
00000000000084a8         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
00000000000084ab         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
00000000000084ae         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
00000000000084b1         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
00000000000084b3         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
00000000000084b8         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
00000000000084bb         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
00000000000084c0         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
00000000000084c5         mov        r12, rax
00000000000084c8         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000084cd         add        rsp, 0x20

                     loc_84d1:
00000000000084d1         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
00000000000084d5         mov        dword [r13], eax
00000000000084d9         add        rsp, 0x28
00000000000084dd         mov        rax, r12
00000000000084e0         pop        rbx
00000000000084e1         pop        rbp
00000000000084e2         pop        r12
00000000000084e4         pop        r13
00000000000084e6         pop        r14
00000000000084e8         pop        r15
00000000000084ea         ret
                        ; endp
00000000000084eb         align      16

                     loc_84f0:
00000000000084f0         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
00000000000084f2         call       xrealloc                                    ; xrealloc
00000000000084f7         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
00000000000084ff         mov        rbx, rax
0000000000008502         mov        qword [slotvec], rax                        ; slotvec
0000000000008509         movups     xmmword [rax], xmm0
000000000000850c         jmp        loc_83ed

                     loc_8511:
0000000000008511         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_8516:
0000000000008516         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_851b:
000000000000851b         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0xfca8)
                     clone_quoting_options:
0000000000008520         push       r12                                         ; Begin of unwind block (FDE at 0xfd14)
0000000000008522         push       rbp
0000000000008523         push       rbx
0000000000008524         mov        rbx, rdi
0000000000008527         call       j___errno_location                          ; __errno_location
000000000000852c         mov        r12d, dword [rax]
000000000000852f         mov        rbp, rax
0000000000008532         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000008539         test       rbx, rbx
000000000000853c         mov        esi, 0x38
0000000000008541         cmove      rbx, rax
0000000000008545         mov        rdi, rbx
0000000000008548         call       xmemdup                                     ; xmemdup
000000000000854d         mov        dword [rbp], r12d
0000000000008551         pop        rbx
0000000000008552         pop        rbp
0000000000008553         pop        r12
0000000000008555         ret
                        ; endp
0000000000008556         align      32                                          ; End of unwind block (FDE at 0xfd14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
0000000000008560         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xfd40), default_quoting_options
0000000000008567         test       rdi, rdi
000000000000856a         cmove      rdi, rax
000000000000856e         mov        eax, dword [rdi]
0000000000008570         ret
                        ; endp
0000000000008571         align      128                                         ; End of unwind block (FDE at 0xfd40)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
0000000000008580         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xfd54), default_quoting_options
0000000000008587         test       rdi, rdi
000000000000858a         cmove      rdi, rax
000000000000858e         mov        dword [rdi], esi
0000000000008590         ret
                        ; endp
0000000000008591         align      32                                          ; End of unwind block (FDE at 0xfd54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
00000000000085a0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xfd68), default_quoting_options
00000000000085a7         test       rdi, rdi
00000000000085aa         mov        ecx, esi
00000000000085ac         cmove      rdi, rax
00000000000085b0         mov        eax, esi
00000000000085b2         and        ecx, 0x1f
00000000000085b5         shr        al, 0x5
00000000000085b8         movzx      eax, al
00000000000085bb         lea        rdi, qword [rdi+rax*4+8]
00000000000085c0         mov        esi, dword [rdi]
00000000000085c2         mov        eax, esi
00000000000085c4         shr        eax, cl
00000000000085c6         xor        edx, eax
00000000000085c8         and        eax, 0x1
00000000000085cb         and        edx, 0x1
00000000000085ce         shl        edx, cl
00000000000085d0         xor        edx, esi
00000000000085d2         mov        dword [rdi], edx
00000000000085d4         ret
                        ; endp
00000000000085d5         align      32                                          ; End of unwind block (FDE at 0xfd68)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
00000000000085e0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xfd7c), default_quoting_options
00000000000085e7         test       rdi, rdi
00000000000085ea         cmove      rdi, rax
00000000000085ee         mov        eax, dword [rdi+4]
00000000000085f1         mov        dword [rdi+4], esi
00000000000085f4         ret
                        ; endp
00000000000085f5         align      512                                         ; End of unwind block (FDE at 0xfd7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
0000000000008600         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xfd90), default_quoting_options
0000000000008607         test       rdi, rdi
000000000000860a         cmove      rdi, rax
000000000000860e         test       rsi, rsi
0000000000008611         mov        dword [rdi], 0xa
0000000000008617         je         loc_8627

0000000000008619         test       rdx, rdx
000000000000861c         je         loc_8627

000000000000861e         mov        qword [rdi+0x28], rsi
0000000000008622         mov        qword [rdi+0x30], rdx
0000000000008626         ret
                        ; endp

                     loc_8627:
0000000000008627         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
000000000000862b         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
0000000000008630         push       r15                                         ; End of unwind block (FDE at 0xfd90), Begin of unwind block (FDE at 0xfda4)
0000000000008632         push       r14
0000000000008634         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000863b         push       r13
000000000000863d         push       r12
000000000000863f         mov        r13, rdi
0000000000008642         push       rbp
0000000000008643         push       rbx
0000000000008644         mov        rbx, r8
0000000000008647         mov        r14, rsi
000000000000864a         mov        r15, rdx
000000000000864d         sub        rsp, 0x18
0000000000008651         test       r8, r8
0000000000008654         cmove      rbx, rax
0000000000008658         mov        qword [rsp+0x48+var_40], rcx
000000000000865d         call       j___errno_location                          ; __errno_location
0000000000008662         mov        r12d, dword [rax]
0000000000008665         mov        rbp, rax
0000000000008668         lea        rax, qword [rbx+8]
000000000000866c         sub        rsp, 0x8
0000000000008670         mov        r9d, dword [rbx+4]
0000000000008674         push       qword [rbx+0x30]
0000000000008677         mov        r8d, dword [rbx]
000000000000867a         push       qword [rbx+0x28]
000000000000867d         mov        rdx, r15
0000000000008680         push       rax
0000000000008681         mov        rcx, qword [rsp+0x68+var_40]
0000000000008686         mov        rsi, r14
0000000000008689         mov        rdi, r13
000000000000868c         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008691         mov        dword [rbp], r12d
0000000000008695         add        rsp, 0x38
0000000000008699         pop        rbx
000000000000869a         pop        rbp
000000000000869b         pop        r12
000000000000869d         pop        r13
000000000000869f         pop        r14
00000000000086a1         pop        r15
00000000000086a3         ret
                        ; endp
00000000000086a4         align      16                                          ; End of unwind block (FDE at 0xfda4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
00000000000086b0         push       r15                                         ; Begin of unwind block (FDE at 0xfdf8), CODE XREF=quotearg_alloc+5
00000000000086b2         push       r14
00000000000086b4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000086bb         push       r13
00000000000086bd         push       r12
00000000000086bf         mov        r12, rdx
00000000000086c2         push       rbp
00000000000086c3         push       rbx
00000000000086c4         mov        rbx, rcx
00000000000086c7         mov        r14, rdi
00000000000086ca         mov        r15, rsi
00000000000086cd         sub        rsp, 0x38
00000000000086d1         test       rcx, rcx
00000000000086d4         cmove      rbx, rax
00000000000086d8         xor        ebp, ebp
00000000000086da         call       j___errno_location                          ; __errno_location
00000000000086df         test       r12, r12
00000000000086e2         mov        r13, rax
00000000000086e5         mov        eax, dword [rax]
00000000000086e7         sete       bpl
00000000000086eb         or         ebp, dword [rbx+4]
00000000000086ee         lea        r10, qword [rbx+8]
00000000000086f2         sub        rsp, 0x8
00000000000086f6         mov        r8d, dword [rbx]
00000000000086f9         mov        rcx, r15
00000000000086fc         mov        dword [rsp+0x70+var_5C], eax
0000000000008700         push       qword [rbx+0x30]
0000000000008703         mov        rdx, r14
0000000000008706         push       qword [rbx+0x28]
0000000000008709         push       r10
000000000000870b         xor        esi, esi
000000000000870d         mov        r9d, ebp
0000000000008710         xor        edi, edi
0000000000008712         mov        qword [rsp+0x88+var_48], r10
0000000000008717         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000871c         lea        rsi, qword [rax+1]
0000000000008720         mov        qword [rsp+0x88+var_40], rax
0000000000008725         add        rsp, 0x20
0000000000008729         mov        rdi, rsi
000000000000872c         mov        qword [rsp+0x68+var_50], rsi
0000000000008731         call       xmalloc                                     ; xmalloc
0000000000008736         mov        qword [rsp+0x68+var_58], rax
000000000000873b         sub        rsp, 0x8
000000000000873f         push       qword [rbx+0x30]
0000000000008742         push       qword [rbx+0x28]
0000000000008745         mov        r10, qword [rsp+0x80+var_48]
000000000000874a         mov        r9d, ebp
000000000000874d         mov        r8d, dword [rbx]
0000000000008750         mov        rcx, r15
0000000000008753         mov        rdx, r14
0000000000008756         mov        rdi, rax
0000000000008759         push       r10
000000000000875b         mov        rsi, qword [rsp+0x88+var_50]
0000000000008760         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008765         mov        eax, dword [rsp+0x88+var_5C]
0000000000008769         add        rsp, 0x20
000000000000876d         test       r12, r12
0000000000008770         mov        dword [r13], eax
0000000000008774         je         loc_877f

0000000000008776         mov        r11, qword [rsp+0x68+var_40]
000000000000877b         mov        qword [r12], r11

                     loc_877f:
000000000000877f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000008784         add        rsp, 0x38
0000000000008788         pop        rbx
0000000000008789         pop        rbp
000000000000878a         pop        r12
000000000000878c         pop        r13
000000000000878e         pop        r14
0000000000008790         pop        r15
0000000000008792         ret
                        ; endp
0000000000008793         align      32                                          ; End of unwind block (FDE at 0xfdf8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
00000000000087a0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xfe64)
00000000000087a3         xor        edx, edx
00000000000087a5         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
00000000000087aa         align      16                                          ; End of unwind block (FDE at 0xfe64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
00000000000087b0         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0xfe78), nslots
00000000000087b6         push       r12
00000000000087b8         mov        r12, qword [slotvec]                        ; slotvec
00000000000087bf         push       rbp
00000000000087c0         push       rbx
00000000000087c1         cmp        eax, 0x1
00000000000087c4         jle        loc_87f1

00000000000087c6         sub        eax, 0x2
00000000000087c9         lea        rbx, qword [r12+0x18]
00000000000087ce         shl        rax, 0x4
00000000000087d2         lea        rbp, qword [r12+rax+0x28]
00000000000087d7         nop        word [rax+rax]

                     loc_87e0:
00000000000087e0         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
00000000000087e3         add        rbx, 0x10
00000000000087e7         call       j_free                                      ; free
00000000000087ec         cmp        rbx, rbp
00000000000087ef         jne        loc_87e0

                     loc_87f1:
00000000000087f1         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
00000000000087f6         lea        rbx, qword [slot0]                          ; slot0
00000000000087fd         cmp        rdi, rbx
0000000000008800         je         loc_8819

0000000000008802         call       j_free                                      ; free
0000000000008807         mov        qword [slotvec0], 0x100                     ; slotvec0
0000000000008812         mov        qword [slotvec0+8], rbx                     ; 0x211098

                     loc_8819:
0000000000008819         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
0000000000008820         cmp        r12, rbx
0000000000008823         je         loc_8834

0000000000008825         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000008828         call       j_free                                      ; free
000000000000882d         mov        qword [slotvec], rbx                        ; slotvec

                     loc_8834:
0000000000008834         pop        rbx                                         ; CODE XREF=quotearg_free+115
0000000000008835         mov        dword [nslots], 0x1                         ; nslots
000000000000883f         pop        rbp
0000000000008840         pop        r12
0000000000008842         ret
                        ; endp
0000000000008843         align      16                                          ; End of unwind block (FDE at 0xfe78)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
0000000000008850         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xfea4), default_quoting_options
0000000000008857         mov        rdx, 0xffffffffffffffff
000000000000885e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000008863         align      16                                          ; End of unwind block (FDE at 0xfea4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000008870         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xfeb8), default_quoting_options
0000000000008877         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000887c         align      128                                         ; End of unwind block (FDE at 0xfeb8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
0000000000008880         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xfecc), default_quoting_options
0000000000008887         mov        rsi, rdi
000000000000888a         mov        rdx, 0xffffffffffffffff
0000000000008891         xor        edi, edi
0000000000008893         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000008898         align      32                                          ; End of unwind block (FDE at 0xfecc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
00000000000088a0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xfee0), default_quoting_options
00000000000088a7         mov        rdx, rsi
00000000000088aa         mov        rsi, rdi
00000000000088ad         xor        edi, edi
00000000000088af         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000088b4         align      64                                          ; End of unwind block (FDE at 0xfee0)

                     quotearg_n_style:
00000000000088c0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xfef4), CODE XREF=quotearg_style+7, argmatch_invalid+64
00000000000088c4         mov        rax, rdx
00000000000088c7         mov        rdx, qword [fs:0x28]
00000000000088d0         mov        qword [rsp+0x48+var_10], rdx
00000000000088d5         xor        edx, edx
00000000000088d7         cmp        esi, 0xa
00000000000088da         je         loc_8944

00000000000088dc         mov        dword [rsp+0x48+var_48], esi
00000000000088df         mov        rcx, rsp
00000000000088e2         mov        rdx, 0xffffffffffffffff
00000000000088e9         mov        rsi, rax
00000000000088ec         mov        qword [rsp+0x48+var_44], 0x0
00000000000088f5         mov        qword [rsp+0x48+var_3C], 0x0
00000000000088fe         mov        qword [rsp+0x48+var_34], 0x0
0000000000008907         mov        qword [rsp+0x48+var_2C], 0x0
0000000000008910         mov        qword [rsp+0x48+var_24], 0x0
0000000000008919         mov        qword [rsp+0x48+var_1C], 0x0
0000000000008922         mov        dword [rsp+0x48+var_14], 0x0
000000000000892a         call       quotearg_n_options                          ; quotearg_n_options
000000000000892f         mov        rcx, qword [rsp+0x48+var_10]
0000000000008934         xor        rcx, qword [fs:0x28]
000000000000893d         jne        loc_8949

000000000000893f         add        rsp, 0x48
0000000000008943         ret
                        ; endp

                     loc_8944:
0000000000008944         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_8949:
0000000000008949         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
000000000000894e         align      16                                          ; End of unwind block (FDE at 0xfef4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
0000000000008950         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xff10), CODE XREF=parse_symbols+156, quotearg_style_mem+10
0000000000008954         mov        rax, rdx
0000000000008957         mov        rdx, rcx
000000000000895a         mov        rcx, qword [fs:0x28]
0000000000008963         mov        qword [rsp+0x48+var_10], rcx
0000000000008968         xor        ecx, ecx
000000000000896a         cmp        esi, 0xa
000000000000896d         je         loc_89d0

000000000000896f         mov        dword [rsp+0x48+var_48], esi
0000000000008972         mov        rcx, rsp
0000000000008975         mov        rsi, rax
0000000000008978         mov        qword [rsp+0x48+var_44], 0x0
0000000000008981         mov        qword [rsp+0x48+var_3C], 0x0
000000000000898a         mov        qword [rsp+0x48+var_34], 0x0
0000000000008993         mov        qword [rsp+0x48+var_2C], 0x0
000000000000899c         mov        qword [rsp+0x48+var_24], 0x0
00000000000089a5         mov        qword [rsp+0x48+var_1C], 0x0
00000000000089ae         mov        dword [rsp+0x48+var_14], 0x0
00000000000089b6         call       quotearg_n_options                          ; quotearg_n_options
00000000000089bb         mov        rdx, qword [rsp+0x48+var_10]
00000000000089c0         xor        rdx, qword [fs:0x28]
00000000000089c9         jne        loc_89d5

00000000000089cb         add        rsp, 0x48
00000000000089cf         ret
                        ; endp

                     loc_89d0:
00000000000089d0         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_89d5:
00000000000089d5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
00000000000089da         align      32                                          ; End of unwind block (FDE at 0xff10)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_style:
00000000000089e0         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0xff2c), CODE XREF=main+3489, main+4038, main+4126, main+4923, main+5733, main+6270, main+6670, main+6707, main+6838, main+7221, main+7327
00000000000089e3         mov        esi, edi
00000000000089e5         xor        edi, edi
00000000000089e7         jmp        quotearg_n_style                            ; quotearg_n_style
00000000000089ec         align      16                                          ; End of unwind block (FDE at 0xff2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
00000000000089f0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xff40)
00000000000089f3         mov        rdx, rsi
00000000000089f6         mov        esi, edi
00000000000089f8         xor        edi, edi
00000000000089fa         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
00000000000089ff         align      512                                         ; End of unwind block (FDE at 0xff40)

                     quotearg_char_mem:
0000000000008a00         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xff54), CODE XREF=quotearg_char+11
0000000000008a04         mov        ecx, edx
0000000000008a06         mov        rax, qword [fs:0x28]
0000000000008a0f         mov        qword [rsp+0x48+var_10], rax
0000000000008a14         xor        eax, eax
0000000000008a16         mov        rax, qword [qword_211550]                   ; qword_211550
0000000000008a1d         mov        r8, rsp
0000000000008a20         and        ecx, 0x1f
0000000000008a23         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000008a2b         mov        qword [rsp+0x48+var_18], rax
0000000000008a30         mov        eax, edx
0000000000008a32         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000008a36         shr        al, 0x5
0000000000008a39         movzx      eax, al
0000000000008a3c         lea        r9, qword [r8+rax*4+8]
0000000000008a41         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x211530
0000000000008a49         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000008a4e         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x211540
0000000000008a56         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000008a5b         mov        edx, dword [r9]
0000000000008a5e         mov        eax, edx
0000000000008a60         shr        eax, cl
0000000000008a62         not        eax
0000000000008a64         and        eax, 0x1
0000000000008a67         shl        eax, cl
0000000000008a69         mov        rcx, r8
0000000000008a6c         xor        eax, edx
0000000000008a6e         mov        rdx, rsi
0000000000008a71         mov        rsi, rdi
0000000000008a74         mov        dword [r9], eax
0000000000008a77         xor        edi, edi
0000000000008a79         call       quotearg_n_options                          ; quotearg_n_options
0000000000008a7e         mov        rsi, qword [rsp+0x48+var_10]
0000000000008a83         xor        rsi, qword [fs:0x28]
0000000000008a8c         jne        loc_8a93

0000000000008a8e         add        rsp, 0x48
0000000000008a92         ret
                        ; endp

                     loc_8a93:
0000000000008a93         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
0000000000008a98         align      32                                          ; End of unwind block (FDE at 0xff54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
0000000000008aa0         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0xff70)
0000000000008aa4         mov        rsi, 0xffffffffffffffff
0000000000008aab         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
0000000000008ab0         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0xff70), Begin of unwind block (FDE at 0xff84), CODE XREF=close_stdout+101
0000000000008ab5         mov        rsi, 0xffffffffffffffff
0000000000008abc         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000008ac1         align      16                                          ; End of unwind block (FDE at 0xff84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
0000000000008ad0         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0xff98)
0000000000008ad5         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000008ada         align      32                                          ; End of unwind block (FDE at 0xff98)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
0000000000008ae0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xffac), CODE XREF=main+3188, main+3637, main+5115, main+5586, iwrite.constprop.7+452, skip+473, skip+729
0000000000008ae4         mov        rax, rdx
0000000000008ae7         mov        rdx, qword [fs:0x28]
0000000000008af0         mov        qword [rsp+0x48+var_10], rdx
0000000000008af5         xor        edx, edx
0000000000008af7         cmp        esi, 0xa
0000000000008afa         je         loc_8b64

0000000000008afc         mov        dword [rsp+0x48+var_48], esi
0000000000008aff         mov        rcx, rsp
0000000000008b02         mov        rdx, 0xffffffffffffffff
0000000000008b09         mov        rsi, rax
0000000000008b0c         mov        qword [rsp+0x48+var_44], 0x0
0000000000008b15         mov        qword [rsp+0x48+var_3C], 0x4000000
0000000000008b1e         mov        qword [rsp+0x48+var_34], 0x0
0000000000008b27         mov        qword [rsp+0x48+var_2C], 0x0
0000000000008b30         mov        qword [rsp+0x48+var_24], 0x0
0000000000008b39         mov        qword [rsp+0x48+var_1C], 0x0
0000000000008b42         mov        dword [rsp+0x48+var_14], 0x0
0000000000008b4a         call       quotearg_n_options                          ; quotearg_n_options
0000000000008b4f         mov        rcx, qword [rsp+0x48+var_10]
0000000000008b54         xor        rcx, qword [fs:0x28]
0000000000008b5d         jne        loc_8b69

0000000000008b5f         add        rsp, 0x48
0000000000008b63         ret
                        ; endp

                     loc_8b64:
0000000000008b64         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_8b69:
0000000000008b69         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
0000000000008b6e         align      16                                          ; End of unwind block (FDE at 0xffac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom_mem:
0000000000008b70         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xffc8), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000008b74         mov        r9, rcx
0000000000008b77         mov        rcx, qword [qword_211550]                   ; qword_211550
0000000000008b7e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000008b86         mov        rax, qword [fs:0x28]
0000000000008b8f         mov        qword [rsp+0x48+var_10], rax
0000000000008b94         xor        eax, eax
0000000000008b96         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000008b9a         test       rsi, rsi
0000000000008b9d         mov        qword [rsp+0x48+var_18], rcx
0000000000008ba2         mov        dword [rsp+0x48+var_48], 0xa
0000000000008ba9         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x211530
0000000000008bb1         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000008bb6         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x211540
0000000000008bbe         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000008bc3         je         loc_8bf7

0000000000008bc5         test       rdx, rdx
0000000000008bc8         je         loc_8bf7

0000000000008bca         mov        qword [rsp+0x48+var_20], rsi
0000000000008bcf         mov        qword [rsp+0x48+var_18], rdx
0000000000008bd4         mov        rcx, rsp
0000000000008bd7         mov        rdx, r8
0000000000008bda         mov        rsi, r9
0000000000008bdd         call       quotearg_n_options                          ; quotearg_n_options
0000000000008be2         mov        rdi, qword [rsp+0x48+var_10]
0000000000008be7         xor        rdi, qword [fs:0x28]
0000000000008bf0         jne        loc_8bfc

0000000000008bf2         add        rsp, 0x48
0000000000008bf6         ret
                        ; endp

                     loc_8bf7:
0000000000008bf7         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_8bfc:
0000000000008bfc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
0000000000008c01         align      16                                          ; End of unwind block (FDE at 0xffc8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_custom:
0000000000008c10         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0xffe4)
0000000000008c17         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000008c1c         align      32                                          ; End of unwind block (FDE at 0xffe4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000008c20         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xfff8)
0000000000008c23         mov        r8, 0xffffffffffffffff
0000000000008c2a         mov        rdx, rsi
0000000000008c2d         mov        rsi, rdi
0000000000008c30         xor        edi, edi
0000000000008c32         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000008c37         align      64                                          ; End of unwind block (FDE at 0xfff8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
0000000000008c40         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0x1000c)
0000000000008c43         mov        rcx, rdx
0000000000008c46         mov        rdx, rsi
0000000000008c49         mov        rsi, rdi
0000000000008c4c         xor        edi, edi
0000000000008c4e         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000008c53         align      32                                          ; End of unwind block (FDE at 0x1000c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000008c60         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x10020), quote_quoting_options
0000000000008c67         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000008c6c         align      16                                          ; End of unwind block (FDE at 0x10020)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000008c70         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x10034), quote_quoting_options
0000000000008c77         mov        rdx, rsi
0000000000008c7a         mov        rsi, rdi
0000000000008c7d         xor        edi, edi
0000000000008c7f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000008c84         align      16                                          ; End of unwind block (FDE at 0x10034)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
0000000000008c90         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x10048), quote_quoting_options, CODE XREF=parse_integer+253, parse_integer+266, argmatch_invalid+46
0000000000008c97         mov        rdx, 0xffffffffffffffff
0000000000008c9e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000008ca3         align      16                                          ; End of unwind block (FDE at 0x10048)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
0000000000008cb0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x1005c), quote_quoting_options, CODE XREF=main+5966, main+6772, main+7386, main+7574, main+7606, argmatch_valid+90, argmatch_valid+169
0000000000008cb7         mov        rsi, rdi
0000000000008cba         mov        rdx, 0xffffffffffffffff
0000000000008cc1         xor        edi, edi
0000000000008cc3         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000008cc8         align      16                                          ; End of unwind block (FDE at 0x1005c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     verror_at_line:
0000000000008cd0         push       r14                                         ; Begin of unwind block (FDE at 0x10074)
0000000000008cd2         push       r13
0000000000008cd4         mov        r13d, esi
0000000000008cd7         push       r12
0000000000008cd9         push       rbp
0000000000008cda         mov        r12d, edi
0000000000008cdd         push       rbx
0000000000008cde         mov        rsi, r9
0000000000008ce1         mov        rdi, r8
0000000000008ce4         mov        rbp, rdx
0000000000008ce7         mov        r14d, ecx
0000000000008cea         call       xvasprintf                                  ; xvasprintf
0000000000008cef         test       rax, rax
0000000000008cf2         je         loc_8d57

0000000000008cf4         test       rbp, rbp
0000000000008cf7         mov        rbx, rax
0000000000008cfa         je         loc_8d30

0000000000008cfc         lea        r8, qword [aLuBytesSCopied+27]              ; argument "__format" for method j_error_at_line, 0xc66c
0000000000008d03         mov        edi, r12d                                   ; argument "__status" for method j_error_at_line
0000000000008d06         mov        r9, rax
0000000000008d09         mov        ecx, r14d                                   ; argument "__lineno" for method j_error_at_line
0000000000008d0c         mov        rdx, rbp                                    ; argument "__fname" for method j_error_at_line
0000000000008d0f         mov        esi, r13d                                   ; argument "__errnum" for method j_error_at_line
0000000000008d12         xor        eax, eax
0000000000008d14         call       j_error_at_line                             ; error_at_line
0000000000008d19         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
0000000000008d1c         pop        rbx
0000000000008d1d         pop        rbp
0000000000008d1e         pop        r12
0000000000008d20         pop        r13
0000000000008d22         pop        r14
0000000000008d24         jmp        j_free                                      ; free
                        ; endp
0000000000008d29         align      16

                     loc_8d30:
0000000000008d30         lea        rdx, qword [aLuBytesSCopied+27]             ; argument "__format" for method j_error, 0xc66c, CODE XREF=verror_at_line+42
0000000000008d37         mov        edi, r12d                                   ; argument "__status" for method j_error
0000000000008d3a         mov        rcx, rax
0000000000008d3d         mov        esi, r13d                                   ; argument "__errnum" for method j_error
0000000000008d40         xor        eax, eax
0000000000008d42         call       j_error                                     ; error
0000000000008d47         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
0000000000008d4a         pop        rbx
0000000000008d4b         pop        rbp
0000000000008d4c         pop        r12
0000000000008d4e         pop        r13
0000000000008d50         pop        r14
0000000000008d52         jmp        j_free                                      ; free
                        ; endp

                     loc_8d57:
0000000000008d57         lea        rsi, qword [aUnableToDispla]                ; argument "msgid" for method j_dcgettext, "unable to display error message", CODE XREF=verror_at_line+34
0000000000008d5e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008d63         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008d65         call       j_dcgettext                                 ; dcgettext
0000000000008d6a         mov        rbx, rax
0000000000008d6d         call       j___errno_location                          ; __errno_location
0000000000008d72         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000008d74         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000008d77         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000008d79         xor        eax, eax
0000000000008d7b         call       j_error                                     ; error
0000000000008d80         call       j_abort                                     ; abort
                        ; endp
0000000000008d85         align      16                                          ; End of unwind block (FDE at 0x10074)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     verror:
0000000000008d90         mov        r8, rdx                                     ; Begin of unwind block (FDE at 0x100c4), CODE XREF=nl_error+202
0000000000008d93         mov        r9, rcx
0000000000008d96         xor        edx, edx
0000000000008d98         xor        ecx, ecx
0000000000008d9a         jmp        verror_at_line                              ; verror_at_line
                        ; endp
0000000000008d9f         align      32                                          ; End of unwind block (FDE at 0x100c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
0000000000008da0         push       r15                                         ; Begin of unwind block (FDE at 0x100dc), CODE XREF=j_version_etc_arn, version_etc_va+75, version_etc+161
0000000000008da2         push       r14
0000000000008da4         push       r13
0000000000008da6         push       r12
0000000000008da8         mov        r12, r9
0000000000008dab         push       rbp
0000000000008dac         push       rbx
0000000000008dad         mov        rbp, rdi
0000000000008db0         mov        rbx, r8
0000000000008db3         sub        rsp, 0x28
0000000000008db7         test       rsi, rsi
0000000000008dba         je         loc_8ed8

0000000000008dc0         mov        r8, rdx
0000000000008dc3         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
0000000000008dca         mov        r9, rcx
0000000000008dcd         xor        eax, eax
0000000000008dcf         mov        rcx, rsi
0000000000008dd2         mov        esi, 0x1
0000000000008dd7         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_8ddc:
0000000000008ddc         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0xe75b, CODE XREF=version_etc_arn+337
0000000000008de3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008de5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008dea         call       j_dcgettext                                 ; dcgettext
0000000000008def         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
0000000000008df6         mov        rcx, rax
0000000000008df9         mov        r8d, 0x7e3
0000000000008dff         mov        esi, 0x1
0000000000008e04         mov        rdi, rbp
0000000000008e07         xor        eax, eax
0000000000008e09         call       j___fprintf_chk                             ; __fprintf_chk
0000000000008e0e         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
0000000000008e15         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008e17         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008e1c         call       j_dcgettext                                 ; dcgettext
0000000000008e21         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000008e24         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000008e27         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000008e2c         cmp        r12, 0x9
0000000000008e30         ja         loc_9170

0000000000008e36         lea        rdx, qword [switch_table_ea44]              ; switch_table_ea44
0000000000008e3d         movsxd     rax, dword [rdx+r12*4]
0000000000008e41         add        rax, rdx
0000000000008e44         jmp        rax                                         ; switch statement using table at 0xea44, with 10 cases, 0x8e50,0x8ec6,0x8f00,0x8f58,0x8f98,0x8fe0,0x9030,0x9088,0x90b8,0x9120
0000000000008e46         align      16

                     loc_8e50:
0000000000008e50         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
0000000000008e54         mov        rax, qword [rbx+0x10]
0000000000008e58         lea        rsi, qword [aWrittenBySSSns_e958]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
0000000000008e5f         mov        r8, qword [rbx+8]
0000000000008e63         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008e68         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008e6a         mov        r13, qword [rbx+0x30]
0000000000008e6e         mov        r12, qword [rbx+0x28]
0000000000008e72         mov        qword [rsp+0x58+var_48], r9
0000000000008e77         mov        r15, qword [rbx+0x20]
0000000000008e7b         mov        r14, qword [rbx+0x18]
0000000000008e7f         mov        qword [rsp+0x58+var_58], rax
0000000000008e83         mov        qword [rsp+0x58+var_50], r8
0000000000008e88         mov        rbx, qword [rbx]
0000000000008e8b         call       j_dcgettext                                 ; dcgettext
0000000000008e90         sub        rsp, 0x8

                     loc_8e94:
0000000000008e94         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000008e99         mov        rdx, rax
0000000000008e9c         mov        rcx, rbx
0000000000008e9f         mov        esi, 0x1
0000000000008ea4         mov        rdi, rbp
0000000000008ea7         xor        eax, eax
0000000000008ea9         push       r9
0000000000008eab         push       r13
0000000000008ead         push       r12
0000000000008eaf         push       r15
0000000000008eb1         push       r14
0000000000008eb3         mov        r9, qword [rsp+0x88+var_58]
0000000000008eb8         mov        r8, qword [rsp+0x88+var_50]
0000000000008ebd         call       j___fprintf_chk                             ; __fprintf_chk
0000000000008ec2         add        rsp, 0x30

                     loc_8ec6:
0000000000008ec6         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
0000000000008eca         pop        rbx
0000000000008ecb         pop        rbp
0000000000008ecc         pop        r12
0000000000008ece         pop        r13
0000000000008ed0         pop        r14
0000000000008ed2         pop        r15
0000000000008ed4         ret
                        ; endp
0000000000008ed5         align      8

                     loc_8ed8:
0000000000008ed8         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
0000000000008edb         mov        rcx, rdx
0000000000008ede         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
0000000000008ee5         mov        esi, 0x1
0000000000008eea         xor        eax, eax
0000000000008eec         call       j___fprintf_chk                             ; __fprintf_chk
0000000000008ef1         jmp        loc_8ddc
0000000000008ef6         align      256

                     loc_8f00:
0000000000008f00         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
0000000000008f04         mov        r9, qword [rbx+0x38]
0000000000008f08         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
0000000000008f0f         mov        rax, qword [rbx+0x10]
0000000000008f13         mov        r8, qword [rbx+8]
0000000000008f17         mov        edx, 0x5
0000000000008f1c         mov        r13, qword [rbx+0x30]
0000000000008f20         mov        r12, qword [rbx+0x28]
0000000000008f24         mov        r15, qword [rbx+0x20]
0000000000008f28         mov        r14, qword [rbx+0x18]
0000000000008f2c         mov        rbx, qword [rbx]
0000000000008f2f         mov        qword [rsp+0x58+var_40], r10
0000000000008f34         mov        qword [rsp+0x58+var_48], r9
0000000000008f39         mov        qword [rsp+0x58+var_58], rax
0000000000008f3d         mov        qword [rsp+0x58+var_50], r8

                     loc_8f42:
0000000000008f42         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
0000000000008f44         call       j_dcgettext                                 ; dcgettext
0000000000008f49         mov        r10, qword [rsp+0x58+var_40]
0000000000008f4e         push       r10
0000000000008f50         jmp        loc_8e94
0000000000008f55         align      8

                     loc_8f58:
0000000000008f58         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
0000000000008f5b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
0000000000008f62         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008f67         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008f69         call       j_dcgettext                                 ; dcgettext
0000000000008f6e         add        rsp, 0x28
0000000000008f72         mov        rcx, rbx
0000000000008f75         mov        rdi, rbp
0000000000008f78         pop        rbx
0000000000008f79         pop        rbp
0000000000008f7a         pop        r12
0000000000008f7c         pop        r13
0000000000008f7e         pop        r14
0000000000008f80         pop        r15
0000000000008f82         mov        rdx, rax
0000000000008f85         mov        esi, 0x1
0000000000008f8a         xor        eax, eax
0000000000008f8c         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000008f91         align      8

                     loc_8f98:
0000000000008f98         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
0000000000008f9c         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
0000000000008fa3         mov        rbx, qword [rbx]
0000000000008fa6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008fab         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008fad         call       j_dcgettext                                 ; dcgettext
0000000000008fb2         add        rsp, 0x28
0000000000008fb6         mov        r8, r12
0000000000008fb9         mov        rcx, rbx
0000000000008fbc         mov        rdi, rbp
0000000000008fbf         mov        rdx, rax
0000000000008fc2         mov        esi, 0x1
0000000000008fc7         pop        rbx
0000000000008fc8         pop        rbp
0000000000008fc9         pop        r12
0000000000008fcb         pop        r13
0000000000008fcd         pop        r14
0000000000008fcf         pop        r15
0000000000008fd1         xor        eax, eax
0000000000008fd3         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000008fd8         align      32

                     loc_8fe0:
0000000000008fe0         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
0000000000008fe4         mov        r12, qword [rbx+8]
0000000000008fe8         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
0000000000008fef         mov        rbx, qword [rbx]
0000000000008ff2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008ff7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008ff9         call       j_dcgettext                                 ; dcgettext
0000000000008ffe         add        rsp, 0x28
0000000000009002         mov        r9, r13
0000000000009005         mov        r8, r12
0000000000009008         mov        rcx, rbx
000000000000900b         mov        rdi, rbp
000000000000900e         mov        rdx, rax
0000000000009011         pop        rbx
0000000000009012         pop        rbp
0000000000009013         pop        r12
0000000000009015         pop        r13
0000000000009017         pop        r14
0000000000009019         pop        r15
000000000000901b         mov        esi, 0x1
0000000000009020         xor        eax, eax
0000000000009022         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000009027         align      16

                     loc_9030:
0000000000009030         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
0000000000009037         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000903c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000903e         mov        r14, qword [rbx+0x18]
0000000000009042         mov        r13, qword [rbx+0x10]
0000000000009046         mov        r12, qword [rbx+8]
000000000000904a         mov        rbx, qword [rbx]
000000000000904d         call       j_dcgettext                                 ; dcgettext
0000000000009052         sub        rsp, 0x8

                     loc_9056:
0000000000009056         push       r14                                         ; CODE XREF=version_etc_arn+784
0000000000009058         mov        rdx, rax
000000000000905b         mov        r9, r13
000000000000905e         mov        r8, r12
0000000000009061         mov        rcx, rbx
0000000000009064         mov        rdi, rbp
0000000000009067         mov        esi, 0x1
000000000000906c         xor        eax, eax
000000000000906e         call       j___fprintf_chk                             ; __fprintf_chk
0000000000009073         pop        rax
0000000000009074         pop        rdx
0000000000009075         add        rsp, 0x28
0000000000009079         pop        rbx
000000000000907a         pop        rbp
000000000000907b         pop        r12
000000000000907d         pop        r13
000000000000907f         pop        r14
0000000000009081         pop        r15
0000000000009083         ret
                        ; endp
0000000000009084         align      8

                     loc_9088:
0000000000009088         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
000000000000908c         lea        rsi, qword [aWrittenBySSSns_e8d8]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
0000000000009093         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009098         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000909a         mov        r14, qword [rbx+0x18]
000000000000909e         mov        r13, qword [rbx+0x10]
00000000000090a2         mov        r12, qword [rbx+8]
00000000000090a6         mov        rbx, qword [rbx]
00000000000090a9         call       j_dcgettext                                 ; dcgettext
00000000000090ae         push       r15
00000000000090b0         jmp        loc_9056
00000000000090b2         align      8

                     loc_90b8:
00000000000090b8         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
00000000000090bc         mov        r12, qword [rbx+0x28]
00000000000090c0         lea        rsi, qword [aWrittenBySSSns_e900]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
00000000000090c7         mov        r15, qword [rbx+0x20]
00000000000090cb         mov        r14, qword [rbx+0x18]
00000000000090cf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000090d4         mov        r13, qword [rbx+0x10]
00000000000090d8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000090da         mov        rbx, qword [rbx]
00000000000090dd         mov        qword [rsp+0x58+var_58], r8
00000000000090e1         call       j_dcgettext                                 ; dcgettext
00000000000090e6         sub        rsp, 0x8
00000000000090ea         mov        r9, r13
00000000000090ed         push       r12
00000000000090ef         push       r15
00000000000090f1         push       r14

                     loc_90f3:
00000000000090f3         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
00000000000090f8         mov        rcx, rbx
00000000000090fb         mov        rdx, rax
00000000000090fe         mov        rdi, rbp
0000000000009101         mov        esi, 0x1
0000000000009106         xor        eax, eax
0000000000009108         call       j___fprintf_chk                             ; __fprintf_chk
000000000000910d         add        rsp, 0x20
0000000000009111         add        rsp, 0x28
0000000000009115         pop        rbx
0000000000009116         pop        rbp
0000000000009117         pop        r12
0000000000009119         pop        r13
000000000000911b         pop        r14
000000000000911d         pop        r15
000000000000911f         ret
                        ; endp

                     loc_9120:
0000000000009120         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
0000000000009124         mov        r13, qword [rbx+0x30]
0000000000009128         lea        rsi, qword [aWrittenBySSSns_e928]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
000000000000912f         mov        r12, qword [rbx+0x28]
0000000000009133         mov        r15, qword [rbx+0x20]
0000000000009137         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000913c         mov        r14, qword [rbx+0x18]
0000000000009140         mov        r8, qword [rbx+8]
0000000000009144         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009146         mov        qword [rsp+0x58+var_50], r9
000000000000914b         mov        rbx, qword [rbx]
000000000000914e         mov        qword [rsp+0x58+var_58], r8
0000000000009152         call       j_dcgettext                                 ; dcgettext
0000000000009157         push       r13
0000000000009159         push       r12
000000000000915b         push       r15
000000000000915d         push       r14
000000000000915f         mov        r9, qword [rsp+0x78+var_50]
0000000000009164         jmp        loc_90f3
0000000000009166         align      16

                     loc_9170:
0000000000009170         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
0000000000009174         mov        r9, qword [rbx+0x38]
0000000000009178         mov        edx, 0x5
000000000000917d         mov        rax, qword [rbx+0x10]
0000000000009181         mov        r8, qword [rbx+8]
0000000000009185         lea        rsi, qword [aWrittenBySSSns_e9c0]           ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
000000000000918c         mov        r13, qword [rbx+0x30]
0000000000009190         mov        r12, qword [rbx+0x28]
0000000000009194         mov        r15, qword [rbx+0x20]
0000000000009198         mov        r14, qword [rbx+0x18]
000000000000919c         mov        qword [rsp+0x58+var_40], r10
00000000000091a1         mov        qword [rsp+0x58+var_48], r9
00000000000091a6         mov        qword [rsp+0x58+var_58], rax
00000000000091aa         mov        qword [rsp+0x58+var_50], r8
00000000000091af         mov        rbx, qword [rbx]
00000000000091b2         jmp        loc_8f42
00000000000091b7         align      64                                          ; End of unwind block (FDE at 0x100dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
00000000000091c0         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0x101f0)
00000000000091c3         cmp        qword [r8], 0x0
00000000000091c7         je         j_version_etc_arn                           ; version_etc_arn

00000000000091c9         nop        dword [rax]

                     loc_91d0:
00000000000091d0         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
00000000000091d4         cmp        qword [r8+r9*8], 0x0
00000000000091d9         jne        loc_91d0

                     j_version_etc_arn:        // version_etc_arn
00000000000091db         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
00000000000091e0         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0x101f0), Begin of unwind block (FDE at 0x10204), CODE XREF=parse_long_options+283, parse_gnu_standard_options_only+235
00000000000091e4         mov        r10, r8
00000000000091e7         xor        r9d, r9d
00000000000091ea         mov        rax, qword [fs:0x28]
00000000000091f3         mov        qword [rsp+0x68+var_10], rax
00000000000091f8         xor        eax, eax
00000000000091fa         mov        r8, rsp
00000000000091fd         nop        dword [rax]

                     loc_9200:
0000000000009200         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
0000000000009203         cmp        eax, 0x2f
0000000000009206         ja         loc_924a

0000000000009208         mov        r11d, eax
000000000000920b         add        r11, qword [r10+0x10]
000000000000920f         add        eax, 0x8
0000000000009212         mov        dword [r10], eax

                     loc_9215:
0000000000009215         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
0000000000009218         test       rax, rax
000000000000921b         mov        qword [r8+r9*8], rax
000000000000921f         je         loc_922b

0000000000009221         add        r9, 0x1
0000000000009225         cmp        r9, 0xa
0000000000009229         jne        loc_9200

                     loc_922b:
000000000000922b         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
0000000000009230         mov        rax, qword [rsp+0x68+var_10]
0000000000009235         xor        rax, qword [fs:0x28]
000000000000923e         jne        loc_9245

0000000000009240         add        rsp, 0x68
0000000000009244         ret
                        ; endp

                     loc_9245:
0000000000009245         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_924a:
000000000000924a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
000000000000924e         lea        rax, qword [r11+8]
0000000000009252         mov        qword [r10+8], rax
0000000000009256         jmp        loc_9215
0000000000009258         align      32                                          ; End of unwind block (FDE at 0x10204)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
0000000000009260         push       rbp                                         ; Begin of unwind block (FDE at 0x10220)
0000000000009261         push       rbx
0000000000009262         mov        r10d, 0x20
0000000000009268         xor        r11d, r11d
000000000000926b         sub        rsp, 0xb8
0000000000009272         mov        rax, qword [fs:0x28]
000000000000927b         mov        qword [rsp+0xc8+var_50], rax
0000000000009280         xor        eax, eax
0000000000009282         lea        rax, qword [rsp+0xc8+arg_0]
000000000000928a         mov        qword [rsp+0xc8+var_28], r8
0000000000009292         lea        rbx, qword [rsp+0xc8+arg_0]
000000000000929a         lea        r8, qword [rsp+0xc8+var_A8]
000000000000929f         mov        qword [rsp+0xc8+var_20], r9
00000000000092a7         mov        dword [rsp+0xc8+var_C0], 0x20
00000000000092af         mov        qword [rsp+0xc8+var_B8], rax
00000000000092b4         lea        rax, qword [rsp+0xc8+var_48]
00000000000092bc         xor        r9d, r9d
00000000000092bf         mov        qword [rsp+0xc8+var_B0], rax
00000000000092c4         mov        rbp, rax
00000000000092c7         nop        word [rax+rax]

                     loc_92d0:
00000000000092d0         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
00000000000092d4         ja         loc_932c

00000000000092d6         mov        eax, r10d
00000000000092d9         mov        r11d, 0x1
00000000000092df         add        r10d, 0x8
00000000000092e3         add        rax, rbp

                     loc_92e6:
00000000000092e6         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
00000000000092e9         test       rax, rax
00000000000092ec         mov        qword [r8+r9*8], rax
00000000000092f0         je         loc_92fc

00000000000092f2         add        r9, 0x1
00000000000092f6         cmp        r9, 0xa
00000000000092fa         jne        loc_92d0

                     loc_92fc:
00000000000092fc         test       r11b, r11b                                  ; CODE XREF=version_etc+144
00000000000092ff         jne        loc_9325

                     loc_9301:
0000000000009301         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
0000000000009306         mov        rax, qword [rsp+0xc8+var_50]
000000000000930b         xor        rax, qword [fs:0x28]
0000000000009314         jne        loc_9320

0000000000009316         add        rsp, 0xb8
000000000000931d         pop        rbx
000000000000931e         pop        rbp
000000000000931f         ret
                        ; endp

                     loc_9320:
0000000000009320         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_9325:
0000000000009325         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
000000000000932a         jmp        loc_9301

                     loc_932c:
000000000000932c         mov        rax, rbx                                    ; CODE XREF=version_etc+116
000000000000932f         add        rbx, 0x8
0000000000009333         jmp        loc_92e6
0000000000009335         align      64                                          ; End of unwind block (FDE at 0x10220)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
0000000000009340         push       rbx                                         ; Begin of unwind block (FDE at 0x1024c)
0000000000009341         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
0000000000009348         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000934d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000934f         call       j_dcgettext                                 ; dcgettext
0000000000009354         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
000000000000935b         mov        rsi, rax
000000000000935e         mov        edi, 0x1
0000000000009363         xor        eax, eax
0000000000009365         call       j___printf_chk                              ; __printf_chk
000000000000936a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
0000000000009371         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009376         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009378         call       j_dcgettext                                 ; dcgettext
000000000000937d         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000009384         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xc772
000000000000938b         mov        rsi, rax
000000000000938e         mov        edi, 0x1
0000000000009393         xor        eax, eax
0000000000009395         call       j___printf_chk                              ; __printf_chk
000000000000939a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000093a1         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
00000000000093a8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000093aa         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000093af         call       j_dcgettext                                 ; dcgettext
00000000000093b4         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000093b7         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000093ba         pop        rbx
00000000000093bb         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
00000000000093c0         push       rbx                                         ; End of unwind block (FDE at 0x1024c), Begin of unwind block (FDE at 0x1026c), CODE XREF=quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25, xcharalloc, xzalloc+4, xmemdup+15, xstrcat+135, xstrcat+229
00000000000093c1         mov        rbx, rdi
00000000000093c4         call       j_malloc                                    ; malloc
00000000000093c9         test       rax, rax
00000000000093cc         jne        loc_93d3

00000000000093ce         test       rbx, rbx
00000000000093d1         jne        loc_93d5

                     loc_93d3:
00000000000093d3         pop        rbx                                         ; CODE XREF=xmalloc+12
00000000000093d4         ret
                        ; endp

                     loc_93d5:
00000000000093d5         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_93da:
00000000000093da         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x1026c)
                     xnmalloc:
00000000000093e0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x10288)
00000000000093e3         mul        rsi
00000000000093e6         mov        rdi, rax
00000000000093e9         seto       al
00000000000093ec         test       rdi, rdi
00000000000093ef         js         loc_93fb

00000000000093f1         movzx      eax, al
00000000000093f4         test       rax, rax
00000000000093f7         jne        loc_93fb

00000000000093f9         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_93fb:
00000000000093fb         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
00000000000093ff         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9404:
0000000000009404         nop                                                    ; End of unwind block (FDE at 0x10288)
0000000000009406         nop        word [cs:rax+rax]
                     xcharalloc:
0000000000009410         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0x1029c)
                        ; endp
0000000000009412         align      32                                          ; End of unwind block (FDE at 0x1029c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
0000000000009420         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x102b0), CODE XREF=quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
0000000000009423         push       rbx
0000000000009424         mov        rbx, rsi
0000000000009427         jne        loc_942e

0000000000009429         test       rdi, rdi
000000000000942c         jne        loc_9448

                     loc_942e:
000000000000942e         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
0000000000009431         call       j_realloc                                   ; realloc
0000000000009436         test       rax, rax
0000000000009439         jne        loc_9440

000000000000943b         test       rbx, rbx
000000000000943e         jne        loc_9451

                     loc_9440:
0000000000009440         pop        rbx                                         ; CODE XREF=xrealloc+25
0000000000009441         ret
                        ; endp
0000000000009442         align      8

                     loc_9448:
0000000000009448         call       j_free                                      ; free, CODE XREF=xrealloc+12
000000000000944d         xor        eax, eax
000000000000944f         pop        rbx
0000000000009450         ret
                        ; endp

                     loc_9451:
0000000000009451         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9456:
0000000000009456         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x102b0)
                     xnrealloc:
0000000000009460         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0x102d4)
0000000000009463         mul        rdx
0000000000009466         mov        rsi, rax
0000000000009469         seto       al
000000000000946c         test       rsi, rsi
000000000000946f         js         loc_947b

0000000000009471         movzx      eax, al
0000000000009474         test       rax, rax
0000000000009477         jne        loc_947b

0000000000009479         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_947b:
000000000000947b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
000000000000947f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9484:
0000000000009484         nop                                                    ; End of unwind block (FDE at 0x102d4)
0000000000009486         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000009490         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x102e8)
0000000000009493         mov        r9, rdx
0000000000009496         mov        rcx, qword [rsi]
0000000000009499         je         loc_94d0

000000000000949b         xor        edx, edx
000000000000949d         movabs     rax, 0x5555555555555554
00000000000094a7         div        r9
00000000000094aa         cmp        rax, rcx
00000000000094ad         jbe        loc_94eb

00000000000094af         mov        rax, rcx
00000000000094b2         shr        rax, 0x1
00000000000094b5         lea        rcx, qword [rax+rcx+1]

                     loc_94ba:
00000000000094ba         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
00000000000094bd         imul       rcx, r9                                     ; argument #4 for method xrealloc
00000000000094c1         mov        rsi, rcx                                    ; argument #2 for method xrealloc
00000000000094c4         jmp        xrealloc                                    ; xrealloc
                        ; endp
00000000000094c9         align      16

                     loc_94d0:
00000000000094d0         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
00000000000094d3         je         loc_94f8

                     loc_94d5:
00000000000094d5         mov        rax, rcx                                    ; CODE XREF=sub_94f4+28
00000000000094d8         mul        r9
00000000000094db         seto       dl
00000000000094de         test       rax, rax
00000000000094e1         movzx      edx, dl
00000000000094e4         js         loc_94eb

00000000000094e6         test       rdx, rdx
00000000000094e9         je         loc_94ba

                     loc_94eb:
00000000000094eb         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
00000000000094ef         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_94f4:
00000000000094f4         nop        dword [rax]
                        ; endp

                     loc_94f8:
00000000000094f8         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
00000000000094fa         mov        eax, 0x80
00000000000094ff         xor        r8d, r8d
0000000000009502         div        r9
0000000000009505         test       rax, rax
0000000000009508         sete       r8b
000000000000950c         lea        rcx, qword [r8+rax]
0000000000009510         jmp        loc_94d5
0000000000009512         align      32                                          ; End of unwind block (FDE at 0x102e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
0000000000009520         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x10300)
0000000000009523         mov        rax, qword [rsi]
0000000000009526         je         loc_9550

0000000000009528         movabs     rdx, 0x5555555555555553
0000000000009532         cmp        rax, rdx
0000000000009535         ja         loc_9561

0000000000009537         mov        rdx, rax
000000000000953a         shr        rdx, 0x1
000000000000953d         lea        rax, qword [rdx+rax+1]

                     loc_9542:
0000000000009542         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000009545         mov        rsi, rax                                    ; argument #2 for method xrealloc
0000000000009548         jmp        xrealloc                                    ; xrealloc
                        ; endp
000000000000954d         align      16

                     loc_9550:
0000000000009550         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000009553         mov        edx, 0x80
0000000000009558         cmove      rax, rdx
000000000000955c         test       rax, rax
000000000000955f         jns        loc_9542

                     loc_9561:
0000000000009561         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000009565         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_956a:
000000000000956a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x10300)
                     xzalloc:
0000000000009570         push       rbx                                         ; Begin of unwind block (FDE at 0x10318)
0000000000009571         mov        rbx, rdi
0000000000009574         call       xmalloc                                     ; xmalloc
0000000000009579         mov        rdx, rbx                                    ; argument "__n" for method j_memset
000000000000957c         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000957e         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000009581         pop        rbx
0000000000009582         jmp        j_memset                                    ; memset
                        ; endp
0000000000009587         align      16                                          ; End of unwind block (FDE at 0x10318)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000009590         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x10334)
0000000000009593         sub        rsp, 0x8
0000000000009597         mul        rsi
000000000000959a         seto       dl
000000000000959d         test       rax, rax
00000000000095a0         js         loc_95b9

00000000000095a2         movzx      edx, dl
00000000000095a5         test       rdx, rdx
00000000000095a8         jne        loc_95b9

00000000000095aa         call       j_calloc                                    ; calloc
00000000000095af         test       rax, rax
00000000000095b2         je         loc_95b9

00000000000095b4         add        rsp, 0x8
00000000000095b8         ret
                        ; endp

                     loc_95b9:
00000000000095b9         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_95be:
00000000000095be         nop                                                    ; End of unwind block (FDE at 0x10334)
                        ; endp

                     xmemdup:
00000000000095c0         push       rbp                                         ; Begin of unwind block (FDE at 0x10350), CODE XREF=clone_quoting_options+40, xstrdup+17
00000000000095c1         push       rbx
00000000000095c2         mov        rbp, rdi
00000000000095c5         mov        rdi, rsi
00000000000095c8         mov        rbx, rsi
00000000000095cb         sub        rsp, 0x8
00000000000095cf         call       xmalloc                                     ; xmalloc
00000000000095d4         add        rsp, 0x8
00000000000095d8         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
00000000000095db         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
00000000000095de         pop        rbx
00000000000095df         pop        rbp
00000000000095e0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000095e3         jmp        j_memcpy                                    ; memcpy
                        ; endp
00000000000095e8         align      16                                          ; End of unwind block (FDE at 0x10350)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
00000000000095f0         push       rbx                                         ; Begin of unwind block (FDE at 0x10378)
00000000000095f1         mov        rbx, rdi
00000000000095f4         call       j_strlen                                    ; strlen
00000000000095f9         mov        rdi, rbx
00000000000095fc         lea        rsi, qword [rax+1]
0000000000009600         pop        rbx
0000000000009601         jmp        xmemdup                                     ; xmemdup
0000000000009603         align      16                                          ; End of unwind block (FDE at 0x10378)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
0000000000009610         lea        rsi, qword [aMemoryExhauste_eaaf]           ; Begin of unwind block (FDE at 0x10394), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41, xvasprintf+159
0000000000009617         sub        rsp, 0x8
000000000000961b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009620         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009622         call       j_dcgettext                                 ; dcgettext
0000000000009627         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
000000000000962d         lea        rdx, qword [aLuBytesSCopied+27]             ; argument "__format" for method j_error, 0xc66c
0000000000009634         mov        rcx, rax
0000000000009637         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000009639         xor        eax, eax
000000000000963b         call       j_error                                     ; error
0000000000009640         call       j_abort                                     ; abort
                        ; endp
0000000000009645         align      16                                          ; End of unwind block (FDE at 0x10394)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoumax:
0000000000009650         push       r15                                         ; Begin of unwind block (FDE at 0x103ac), CODE XREF=parse_integer+54, human_options+170
0000000000009652         push       r14
0000000000009654         push       r13
0000000000009656         push       r12
0000000000009658         push       rbp
0000000000009659         push       rbx
000000000000965a         sub        rsp, 0x28
000000000000965e         mov        rax, qword [fs:0x28]
0000000000009667         mov        qword [rsp+0x58+var_40], rax
000000000000966c         xor        eax, eax
000000000000966e         cmp        edx, 0x24
0000000000009671         ja         loc_99d5

0000000000009677         lea        rax, qword [rsp+0x58+var_48]
000000000000967c         mov        r15, rsi
000000000000967f         test       rsi, rsi
0000000000009682         mov        rbp, rdi
0000000000009685         mov        dword [rsp+0x58+var_50], edx
0000000000009689         mov        r14, rcx
000000000000968c         mov        r13, r8
000000000000968f         cmove      r15, rax
0000000000009693         call       j___errno_location                          ; __errno_location
0000000000009698         mov        dword [rax], 0x0
000000000000969e         mov        r12, rax
00000000000096a1         movzx      ebx, byte [rbp]
00000000000096a5         call       j___ctype_b_loc                             ; __ctype_b_loc
00000000000096aa         mov        edx, dword [rsp+0x58+var_50]
00000000000096ae         mov        rsi, qword [rax]
00000000000096b1         mov        rax, rbp
00000000000096b4         jmp        loc_96c7
00000000000096b6         align      64

                     loc_96c0:
00000000000096c0         add        rax, 0x1                                    ; CODE XREF=xstrtoumax+127
00000000000096c4         movzx      ebx, byte [rax]

                     loc_96c7:
00000000000096c7         movzx      ecx, bl                                     ; CODE XREF=xstrtoumax+100
00000000000096ca         test       byte [rsi+rcx*2+1], 0x20
00000000000096cf         jne        loc_96c0

00000000000096d1         cmp        bl, 0x2d
00000000000096d4         je         loc_9728

00000000000096d6         xor        ecx, ecx
00000000000096d8         mov        rsi, r15
00000000000096db         mov        rdi, rbp
00000000000096de         call       j___strtoul_internal                        ; __strtoul_internal
00000000000096e3         mov        rcx, qword [r15]
00000000000096e6         mov        rbx, rax
00000000000096e9         cmp        rcx, rbp
00000000000096ec         je         loc_9718

00000000000096ee         mov        eax, dword [r12]
00000000000096f2         test       eax, eax
00000000000096f4         je         loc_9758

00000000000096f6         cmp        eax, 0x22
00000000000096f9         mov        ebp, 0x1
00000000000096fe         jne        loc_9728

                     loc_9700:
0000000000009700         test       r13, r13                                    ; CODE XREF=xstrtoumax+266
0000000000009703         je         loc_970e

0000000000009705         movzx      r12d, byte [rcx]
0000000000009709         test       r12b, r12b
000000000000970c         jne        loc_9787

                     loc_970e:
000000000000970e         mov        qword [r14], rbx                            ; CODE XREF=xstrtoumax+179
0000000000009711         jmp        loc_972d
0000000000009713         align      8

                     loc_9718:
0000000000009718         test       r13, r13                                    ; CODE XREF=xstrtoumax+156
000000000000971b         mov        qword [rsp+0x58+var_50], rcx
0000000000009720         jne        loc_9760

0000000000009722         nop        word [rax+rax]

                     loc_9728:
0000000000009728         mov        ebp, 0x4                                    ; CODE XREF=xstrtoumax+132, xstrtoumax+174, xstrtoumax+280, xstrtoumax+309

                     loc_972d:
000000000000972d         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoumax+193, xstrtoumax+535, xstrtoumax+546
0000000000009732         xor        rdi, qword [fs:0x28]
000000000000973b         mov        eax, ebp
000000000000973d         jne        loc_99d0

0000000000009743         add        rsp, 0x28
0000000000009747         pop        rbx
0000000000009748         pop        rbp
0000000000009749         pop        r12
000000000000974b         pop        r13
000000000000974d         pop        r14
000000000000974f         pop        r15
0000000000009751         ret
                        ; endp
0000000000009752         align      8

                     loc_9758:
0000000000009758         xor        ebp, ebp                                    ; CODE XREF=xstrtoumax+164
000000000000975a         jmp        loc_9700
000000000000975c         align      32

                     loc_9760:
0000000000009760         movzx      r12d, byte [rbp]                            ; CODE XREF=xstrtoumax+208
0000000000009765         test       r12b, r12b
0000000000009768         je         loc_9728

000000000000976a         movsx      esi, r12b                                   ; argument "__c" for method j_strchr
000000000000976e         mov        rdi, r13                                    ; argument "__s" for method j_strchr
0000000000009771         xor        ebp, ebp
0000000000009773         call       j_strchr                                    ; strchr
0000000000009778         test       rax, rax
000000000000977b         mov        ebx, 0x1
0000000000009780         mov        rcx, qword [rsp+0x58+var_50]
0000000000009785         je         loc_9728

                     loc_9787:
0000000000009787         movsx      esi, r12b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoumax+188
000000000000978b         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000978e         mov        qword [rsp+0x58+var_50], rcx
0000000000009793         call       j_strchr                                    ; strchr
0000000000009798         test       rax, rax
000000000000979b         mov        rcx, qword [rsp+0x58+var_50]
00000000000097a0         je         loc_986c

00000000000097a6         lea        eax, dword [r12-0x45]
00000000000097ab         cmp        al, 0x2f
00000000000097ad         ja         loc_9800

00000000000097af         movabs     rdx, 0x814400308945
00000000000097b9         bt         rdx, rax
00000000000097bd         jae        loc_9800

00000000000097bf         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
00000000000097c4         mov        rdi, r13                                    ; argument "__s" for method j_strchr
00000000000097c7         mov        qword [rsp+0x58+var_50], rcx
00000000000097cc         call       j_strchr                                    ; strchr
00000000000097d1         test       rax, rax
00000000000097d4         mov        rcx, qword [rsp+0x58+var_50]
00000000000097d9         je         loc_9800

00000000000097db         movzx      eax, byte [rcx+1]
00000000000097df         cmp        al, 0x44
00000000000097e1         je         loc_97ef

00000000000097e3         cmp        al, 0x69
00000000000097e5         je         loc_99b8

00000000000097eb         cmp        al, 0x42
00000000000097ed         jne        loc_9800

                     loc_97ef:
00000000000097ef         mov        edi, 0x2                                    ; CODE XREF=xstrtoumax+401
00000000000097f4         mov        esi, 0x3e8
00000000000097f9         jmp        loc_980a
00000000000097fb         align      2048

                     loc_9800:
0000000000009800         mov        edi, 0x1                                    ; CODE XREF=xstrtoumax+349, xstrtoumax+365, xstrtoumax+393, xstrtoumax+413
0000000000009805         mov        esi, 0x400

                     loc_980a:
000000000000980a         sub        r12d, 0x42                                  ; CODE XREF=xstrtoumax+425, xstrtoumax+891
000000000000980e         cmp        r12b, 0x35
0000000000009812         ja         loc_986c

0000000000009814         lea        rdx, qword [switch_table_eb08]              ; switch_table_eb08
000000000000981b         movzx      r12d, r12b
000000000000981f         movsxd     rax, dword [rdx+r12*4]
0000000000009823         add        rax, rdx
0000000000009826         jmp        rax                                         ; switch statement using table at 0xeb08, with 54 cases, 0x9828,0x9850,0x986c,0x9877,0x988d,0x98a4,0x98ca,0x98ef,0x990f,0x9930,0x9953,0x9976,0x998c

                     loc_9828:
0000000000009828         mov        rax, rbx                                    ; case 43, CODE XREF=xstrtoumax+470
000000000000982b         mul        rsi
000000000000982e         jo         loc_9a21

0000000000009834         xor        r8d, r8d

                     loc_9837:
0000000000009837         mul        rsi                                         ; CODE XREF=xstrtoumax+846, xstrtoumax+862, xstrtoumax+987
000000000000983a         jo         loc_9a12

0000000000009840         mov        rbx, rax

                     loc_9843:
0000000000009843         or         ebp, r8d                                    ; CODE XREF=xstrtoumax+972
0000000000009846         nop        word [cs:rax+rax]

                     loc_9850:
0000000000009850         movsxd     rdi, edi                                    ; case 33, CODE XREF=xstrtoumax+470, xstrtoumax+571, xstrtoumax+594, xstrtoumax+632, xstrtoumax+712, xstrtoumax+727, xstrtoumax+823
0000000000009853         mov        eax, ebp
0000000000009855         add        rcx, rdi
0000000000009858         or         eax, 0x2
000000000000985b         mov        qword [r15], rcx
000000000000985e         cmp        byte [rcx], 0x0
0000000000009861         mov        qword [r14], rbx
0000000000009864         cmovne     ebp, eax
0000000000009867         jmp        loc_972d

                     loc_986c:
000000000000986c         mov        qword [r14], rbx                            ; case 52, CODE XREF=xstrtoumax+336, xstrtoumax+450, xstrtoumax+470
000000000000986f         or         ebp, 0x2
0000000000009872         jmp        loc_972d

                     loc_9877:
0000000000009877         mov        edx, 0x2                                    ; case 53, CODE XREF=xstrtoumax+470
000000000000987c         mov        rax, rdx
000000000000987f         mul        rbx
0000000000009882         jo         loc_991e

0000000000009888         add        rbx, rbx
000000000000988b         jmp        loc_9850

                     loc_988d:
000000000000988d         mov        edx, 0x200                                  ; case 32, CODE XREF=xstrtoumax+470
0000000000009892         mov        rax, rdx
0000000000009895         mul        rbx
0000000000009898         jo         loc_991e

000000000000989e         shl        rbx, 0x9
00000000000098a2         jmp        loc_9850

                     loc_98a4:
00000000000098a4         mov        r8d, 0x7                                    ; case 24, CODE XREF=xstrtoumax+470
00000000000098aa         xor        r9d, r9d
00000000000098ad         nop        dword [rax]

                     loc_98b0:
00000000000098b0         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+627
00000000000098b3         mul        rsi
00000000000098b6         mov        rbx, rax
00000000000098b9         jo         loc_9a4e

                     loc_98bf:
00000000000098bf         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1032
00000000000098c3         jne        loc_98b0

                     loc_98c5:
00000000000098c5         or         ebp, r9d                                    ; CODE XREF=xstrtoumax+669, xstrtoumax+701, xstrtoumax+766, xstrtoumax+801
00000000000098c8         jmp        loc_9850

                     loc_98ca:
00000000000098ca         mov        r8d, 0x8                                    ; case 23, CODE XREF=xstrtoumax+470
00000000000098d0         xor        r9d, r9d
00000000000098d3         nop        dword [rax+rax]

                     loc_98d8:
00000000000098d8         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+667
00000000000098db         mul        rsi
00000000000098de         mov        rbx, rax
00000000000098e1         jo         loc_9a30

                     loc_98e7:
00000000000098e7         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1002
00000000000098eb         jne        loc_98d8

00000000000098ed         jmp        loc_98c5

                     loc_98ef:
00000000000098ef         mov        r8d, 0x4                                    ; case 50, CODE XREF=xstrtoumax+470
00000000000098f5         xor        r9d, r9d

                     loc_98f8:
00000000000098f8         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+699
00000000000098fb         mul        rsi
00000000000098fe         mov        rbx, rax
0000000000009901         jo         loc_9a03

                     loc_9907:
0000000000009907         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+957
000000000000990b         jne        loc_98f8

000000000000990d         jmp        loc_98c5

                     loc_990f:
000000000000990f         mov        rax, rbx                                    ; case 41, CODE XREF=xstrtoumax+470
0000000000009912         mul        rsi
0000000000009915         mov        rbx, rax
0000000000009918         jno        loc_9850

                     loc_991e:
000000000000991e         mov        ebp, 0x1                                    ; CODE XREF=xstrtoumax+562, xstrtoumax+584, xstrtoumax+817
0000000000009923         or         rbx, 0xffffffffffffffff
0000000000009927         jmp        loc_9850
000000000000992c         align      16

                     loc_9930:
0000000000009930         mov        r8d, 0x5                                    ; case 14, CODE XREF=xstrtoumax+470
0000000000009936         xor        r9d, r9d

                     loc_9939:
0000000000009939         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+764
000000000000993c         mul        rsi
000000000000993f         mov        rbx, rax
0000000000009942         jo         loc_9a3f

                     loc_9948:
0000000000009948         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1017
000000000000994c         jne        loc_9939

000000000000994e         jmp        loc_98c5

                     loc_9953:
0000000000009953         mov        r8d, 0x6                                    ; case 3, CODE XREF=xstrtoumax+470
0000000000009959         xor        r9d, r9d

                     loc_995c:
000000000000995c         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+799
000000000000995f         mul        rsi
0000000000009962         mov        rbx, rax
0000000000009965         jo         loc_99f4

                     loc_996b:
000000000000996b         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+942
000000000000996f         jne        loc_995c

0000000000009971         jmp        loc_98c5

                     loc_9976:
0000000000009976         mov        edx, 0x400                                  ; case 0, CODE XREF=xstrtoumax+470
000000000000997b         mov        rax, rdx
000000000000997e         mul        rbx
0000000000009981         jo         loc_991e

0000000000009983         shl        rbx, 0xa
0000000000009987         jmp        loc_9850

                     loc_998c:
000000000000998c         mov        rax, rbx                                    ; case 37, CODE XREF=xstrtoumax+470
000000000000998f         mul        rsi
0000000000009992         jo         loc_9a5d

0000000000009998         xor        r8d, r8d

                     loc_999b:
000000000000999b         mul        rsi                                         ; CODE XREF=xstrtoumax+1047
000000000000999e         jno        loc_9837

00000000000099a4         mov        r8d, 0x1
00000000000099aa         or         rax, 0xffffffffffffffff
00000000000099ae         jmp        loc_9837
00000000000099b3         align      8

                     loc_99b8:
00000000000099b8         xor        edi, edi                                    ; CODE XREF=xstrtoumax+405
00000000000099ba         cmp        byte [rcx+2], 0x42
00000000000099be         mov        esi, 0x400
00000000000099c3         sete       dil
00000000000099c7         lea        edi, dword [rdi+rdi+1]
00000000000099cb         jmp        loc_980a

                     loc_99d0:
00000000000099d0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoumax+237
                        ; endp

                     loc_99d5:
00000000000099d5         lea        rcx, qword [__PRETTY_FUNCTION__.4162]       ; argument "__function" for method j___assert_fail, "xstrtoumax", CODE XREF=xstrtoumax+33
00000000000099dc         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
00000000000099e3         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
00000000000099ea         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
00000000000099ef         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_99f4:
00000000000099f4         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+789
00000000000099fa         or         rbx, 0xffffffffffffffff
00000000000099fe         jmp        loc_996b

                     loc_9a03:
0000000000009a03         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+689
0000000000009a09         or         rbx, 0xffffffffffffffff
0000000000009a0d         jmp        loc_9907

                     loc_9a12:
0000000000009a12         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+490
0000000000009a18         or         rbx, 0xffffffffffffffff
0000000000009a1c         jmp        loc_9843

                     loc_9a21:
0000000000009a21         or         rax, 0xffffffffffffffff                     ; CODE XREF=xstrtoumax+478
0000000000009a25         mov        r8d, 0x1
0000000000009a2b         jmp        loc_9837

                     loc_9a30:
0000000000009a30         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+657
0000000000009a36         or         rbx, 0xffffffffffffffff
0000000000009a3a         jmp        loc_98e7

                     loc_9a3f:
0000000000009a3f         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+754
0000000000009a45         or         rbx, 0xffffffffffffffff
0000000000009a49         jmp        loc_9948

                     loc_9a4e:
0000000000009a4e         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+617
0000000000009a54         or         rbx, 0xffffffffffffffff
0000000000009a58         jmp        loc_98bf

                     loc_9a5d:
0000000000009a5d         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+834
0000000000009a63         or         rax, 0xffffffffffffffff
0000000000009a67         jmp        loc_999b
0000000000009a6c         align      16                                          ; End of unwind block (FDE at 0x103ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int32_t, -88


                     xstrcat:
0000000000009a70         push       r15                                         ; Begin of unwind block (FDE at 0x103fc), CODE XREF=xvasprintf+74
0000000000009a72         push       r14
0000000000009a74         push       r13
0000000000009a76         push       r12
0000000000009a78         push       rbp
0000000000009a79         push       rbx
0000000000009a7a         sub        rsp, 0x28
0000000000009a7e         mov        rax, qword [fs:0x28]
0000000000009a87         mov        qword [rsp+0x58+var_40], rax
0000000000009a8c         xor        eax, eax
0000000000009a8e         test       rdi, rdi
0000000000009a91         movdqu     xmm0, xmmword [rsi]
0000000000009a95         movups     xmmword [rsp+0x58+var_58], xmm0
0000000000009a99         mov        r14, qword [rsi+0x10]
0000000000009a9d         mov        qword [rsp+0x58+var_48], r14
0000000000009aa2         je         loc_9b50

0000000000009aa8         mov        r12, rdi
0000000000009aab         mov        r15, rsi
0000000000009aae         mov        rbp, rdi
0000000000009ab1         xor        ebx, ebx
0000000000009ab3         mov        r13, 0xffffffffffffffff

                     loc_9aba:
0000000000009aba         mov        edx, dword [rsp+0x58+var_58]                ; CODE XREF=xstrcat+116
0000000000009abd         cmp        edx, 0x2f
0000000000009ac0         ja         loc_9ba0

0000000000009ac6         mov        eax, edx
0000000000009ac8         add        edx, 0x8
0000000000009acb         add        rax, r14
0000000000009ace         mov        dword [rsp+0x58+var_58], edx

                     loc_9ad1:
0000000000009ad1         mov        rdi, qword [rax]                            ; argument "__s" for method j_strlen, CODE XREF=xstrcat+318
0000000000009ad4         call       j_strlen                                    ; strlen
0000000000009ad9         add        rbx, rax
0000000000009adc         cmovb      rbx, r13
0000000000009ae0         sub        rbp, 0x1
0000000000009ae4         jne        loc_9aba

0000000000009ae6         cmp        rbx, 0x7fffffff
0000000000009aed         ja         loc_9b90

0000000000009af3         lea        rdi, qword [rbx+1]
0000000000009af7         call       xmalloc                                     ; xmalloc
0000000000009afc         mov        r14, rax
0000000000009aff         mov        rbx, rax
0000000000009b02         jmp        loc_9b35

                     loc_9b04:
0000000000009b04         mov        eax, edx                                    ; CODE XREF=xstrcat+203
0000000000009b06         add        rax, qword [r15+0x10]
0000000000009b0a         add        edx, 0x8
0000000000009b0d         mov        dword [r15], edx

                     loc_9b10:
0000000000009b10         mov        r13, qword [rax]                            ; CODE XREF=xstrcat+217
0000000000009b13         mov        rdi, r13                                    ; argument "__s" for method j_strlen
0000000000009b16         call       j_strlen                                    ; strlen
0000000000009b1b         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
0000000000009b1e         mov        rbp, rax
0000000000009b21         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
0000000000009b24         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
0000000000009b27         add        rbx, rbp
0000000000009b2a         call       j_memcpy                                    ; memcpy
0000000000009b2f         sub        r12, 0x1
0000000000009b33         je         loc_9b60

                     loc_9b35:
0000000000009b35         mov        edx, dword [r15]                            ; CODE XREF=xstrcat+146
0000000000009b38         cmp        edx, 0x2f
0000000000009b3b         jbe        loc_9b04

0000000000009b3d         mov        rax, qword [r15+8]
0000000000009b41         lea        rdx, qword [rax+8]
0000000000009b45         mov        qword [r15+8], rdx
0000000000009b49         jmp        loc_9b10
0000000000009b4b         align      16

                     loc_9b50:
0000000000009b50         mov        edi, 0x1                                    ; CODE XREF=xstrcat+50
0000000000009b55         call       xmalloc                                     ; xmalloc
0000000000009b5a         mov        rbx, rax
0000000000009b5d         mov        r14, rax

                     loc_9b60:
0000000000009b60         mov        byte [rbx], 0x0                             ; CODE XREF=xstrcat+195

                     loc_9b63:
0000000000009b63         mov        rcx, qword [rsp+0x58+var_40]                ; CODE XREF=xstrcat+302
0000000000009b68         xor        rcx, qword [fs:0x28]
0000000000009b71         mov        rax, r14
0000000000009b74         jne        loc_9b85

0000000000009b76         add        rsp, 0x28
0000000000009b7a         pop        rbx
0000000000009b7b         pop        rbp
0000000000009b7c         pop        r12
0000000000009b7e         pop        r13
0000000000009b80         pop        r14
0000000000009b82         pop        r15
0000000000009b84         ret
                        ; endp

                     loc_9b85:
0000000000009b85         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrcat+260
                        ; endp
0000000000009b8a         align      16

                     loc_9b90:
0000000000009b90         call       j___errno_location                          ; __errno_location, CODE XREF=xstrcat+125
0000000000009b95         xor        r14d, r14d
0000000000009b98         mov        dword [rax], 0x4b
0000000000009b9e         jmp        loc_9b63

                     loc_9ba0:
0000000000009ba0         mov        rax, qword [rsp+0x58+var_50]                ; CODE XREF=xstrcat+80
0000000000009ba5         lea        rdx, qword [rax+8]
0000000000009ba9         mov        qword [rsp+0x58+var_50], rdx
0000000000009bae         jmp        loc_9ad1
0000000000009bb3         align      64                                          ; End of unwind block (FDE at 0x103fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     xvasprintf:
0000000000009bc0         sub        rsp, 0x18                                   ; Begin of unwind block (FDE at 0x10448), CODE XREF=verror_at_line+26
0000000000009bc4         mov        rax, qword [fs:0x28]
0000000000009bcd         mov        qword [rsp+0x18+var_10], rax
0000000000009bd2         xor        eax, eax
0000000000009bd4         movzx      eax, byte [rdi]
0000000000009bd7         test       al, al
0000000000009bd9         je         loc_9c56

0000000000009bdb         cmp        al, 0x25
0000000000009bdd         mov        r8, rdi
0000000000009be0         jne        loc_9c18

0000000000009be2         cmp        byte [rdi+1], 0x73
0000000000009be6         jne        loc_9c18

0000000000009be8         xor        edi, edi
0000000000009bea         jmp        loc_9bfd
0000000000009bec         align      16

                     loc_9bf0:
0000000000009bf0         cmp        cl, 0x25                                    ; CODE XREF=xvasprintf+72
0000000000009bf3         jne        loc_9c18

0000000000009bf5         cmp        byte [r8+rdi*2+1], 0x73
0000000000009bfb         jne        loc_9c18

                     loc_9bfd:
0000000000009bfd         add        rdi, 0x1                                    ; CODE XREF=xvasprintf+42
0000000000009c01         movzx      ecx, byte [r8+rdi*2]
0000000000009c06         test       cl, cl
0000000000009c08         jne        loc_9bf0

                     loc_9c0a:
0000000000009c0a         call       xstrcat                                     ; xstrcat, CODE XREF=xvasprintf+152
0000000000009c0f         jmp        loc_9c2e
0000000000009c11         align      8

                     loc_9c18:
0000000000009c18         mov        rdx, rsi                                    ; CODE XREF=xvasprintf+32, xvasprintf+38, xvasprintf+51, xvasprintf+59
0000000000009c1b         mov        rdi, rsp
0000000000009c1e         mov        rsi, r8
0000000000009c21         call       rpl_vasprintf                               ; rpl_vasprintf
0000000000009c26         test       eax, eax
0000000000009c28         js         loc_9c48

0000000000009c2a         mov        rax, qword [rsp+0x18+var_18]

                     loc_9c2e:
0000000000009c2e         mov        rdx, qword [rsp+0x18+var_10]                ; CODE XREF=xvasprintf+79, xvasprintf+148
0000000000009c33         xor        rdx, qword [fs:0x28]
0000000000009c3c         jne        loc_9c5a

0000000000009c3e         add        rsp, 0x18
0000000000009c42         ret
                        ; endp
0000000000009c43         align      8

                     loc_9c48:
0000000000009c48         call       j___errno_location                          ; __errno_location, CODE XREF=xvasprintf+104
0000000000009c4d         cmp        dword [rax], 0xc
0000000000009c50         je         loc_9c5f

0000000000009c52         xor        eax, eax
0000000000009c54         jmp        loc_9c2e

                     loc_9c56:
0000000000009c56         xor        edi, edi                                    ; CODE XREF=xvasprintf+25
0000000000009c58         jmp        loc_9c0a

                     loc_9c5a:
0000000000009c5a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xvasprintf+124
                        ; endp

                     loc_9c5f:
0000000000009c5f         call       xalloc_die                                  ; xalloc_die, CODE XREF=xvasprintf+144
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9c64:
0000000000009c64         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x10448)
0000000000009c6e         nop
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
0000000000009c70         push       r12                                         ; Begin of unwind block (FDE at 0x10464), CODE XREF=close_stream+21
0000000000009c72         push       rbp
0000000000009c73         push       rbx
0000000000009c74         mov        rbx, rdi
0000000000009c77         call       j_fileno                                    ; fileno
0000000000009c7c         test       eax, eax
0000000000009c7e         mov        rdi, rbx
0000000000009c81         js         loc_9cd7

0000000000009c83         call       j___freading                                ; __freading
0000000000009c88         test       eax, eax
0000000000009c8a         jne        loc_9cb8

                     loc_9c8c:
0000000000009c8c         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
0000000000009c8f         call       rpl_fflush                                  ; rpl_fflush
0000000000009c94         test       eax, eax
0000000000009c96         je         loc_9cd4

0000000000009c98         call       j___errno_location                          ; __errno_location
0000000000009c9d         mov        r12d, dword [rax]
0000000000009ca0         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
0000000000009ca3         mov        rbp, rax
0000000000009ca6         call       j_fclose                                    ; fclose
0000000000009cab         test       r12d, r12d
0000000000009cae         jne        loc_9ce0

                     loc_9cb0:
0000000000009cb0         pop        rbx                                         ; CODE XREF=rpl_fclose+121
0000000000009cb1         pop        rbp
0000000000009cb2         pop        r12
0000000000009cb4         ret
                        ; endp
0000000000009cb5         align      8

                     loc_9cb8:
0000000000009cb8         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
0000000000009cbb         call       j_fileno                                    ; fileno
0000000000009cc0         xor        esi, esi                                    ; argument "__offset" for method j_lseek
0000000000009cc2         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000009cc7         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000009cc9         call       j_lseek                                     ; lseek
0000000000009cce         cmp        rax, 0xffffffffffffffff
0000000000009cd2         jne        loc_9c8c

                     loc_9cd4:
0000000000009cd4         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_9cd7:
0000000000009cd7         pop        rbx                                         ; CODE XREF=rpl_fclose+17
0000000000009cd8         pop        rbp
0000000000009cd9         pop        r12
0000000000009cdb         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_9ce0:
0000000000009ce0         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
0000000000009ce4         mov        eax, 0xffffffff
0000000000009ce9         jmp        loc_9cb0
0000000000009ceb         align      16                                          ; End of unwind block (FDE at 0x10464)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int32_t, -104


                     rpl_fcntl:
0000000000009cf0         push       r12                                         ; Begin of unwind block (FDE at 0x1049c), CODE XREF=set_fd_flags+89, set_fd_flags+126, iwrite.constprop.7+364, iwrite.constprop.7+386
0000000000009cf2         push       rbp
0000000000009cf3         mov        ebp, edi
0000000000009cf5         push       rbx
0000000000009cf6         sub        rsp, 0x50
0000000000009cfa         mov        rax, qword [fs:0x28]
0000000000009d03         mov        qword [rsp+0x68+var_50], rax
0000000000009d08         xor        eax, eax
0000000000009d0a         lea        rax, qword [rsp+0x68+arg_0]
0000000000009d0f         test       esi, esi
0000000000009d11         mov        qword [rsp+0x68+var_38], rdx
0000000000009d16         mov        qword [rsp+0x68+var_30], rcx
0000000000009d1b         mov        qword [rsp+0x68+var_28], r8
0000000000009d20         mov        qword [rsp+0x68+var_60], rax
0000000000009d25         lea        rax, qword [rsp+0x68+var_48]
0000000000009d2a         mov        qword [rsp+0x68+var_20], r9
0000000000009d2f         mov        dword [rsp+0x68+var_68], 0x10
0000000000009d36         mov        qword [rsp+0x68+var_58], rax
0000000000009d3b         je         loc_9f42

0000000000009d41         cmp        esi, 0x406
0000000000009d47         jne        loc_9d90

0000000000009d49         mov        rax, qword [rsp+0x68+var_58]
0000000000009d4e         cmp        dword [have_dupfd_cloexec.3326], 0x0        ; have_dupfd_cloexec.3326
0000000000009d55         mov        dword [rsp+0x68+var_68], 0x18
0000000000009d5c         mov        r12d, dword [rax+0x10]
0000000000009d60         mov        edx, r12d
0000000000009d63         js         loc_9e93

0000000000009d69         xor        eax, eax
0000000000009d6b         mov        esi, 0x406                                  ; argument "__cmd" for method j_fcntl
0000000000009d70         call       j_fcntl                                     ; fcntl
0000000000009d75         test       eax, eax
0000000000009d77         mov        ebx, eax
0000000000009d79         js         loc_9f08

                     loc_9d7f:
0000000000009d7f         mov        dword [have_dupfd_cloexec.3326], 0x1        ; have_dupfd_cloexec.3326, CODE XREF=rpl_fcntl+544
0000000000009d89         jmp        loc_9dd0
0000000000009d8b         align      16

                     loc_9d90:
0000000000009d90         cmp        esi, 0xb                                    ; CODE XREF=rpl_fcntl+87
0000000000009d93         je         loc_9dc0

0000000000009d95         jg         loc_9df0

0000000000009d97         cmp        esi, 0x4
0000000000009d9a         je         loc_9e70

0000000000009da0         jg         loc_9e60

0000000000009da6         cmp        esi, 0x2
0000000000009da9         je         loc_9e70

0000000000009daf         jg         loc_9dc0

0000000000009db1         cmp        esi, 0x1
0000000000009db4         jne        loc_9e18

0000000000009db6         nop        word [cs:rax+rax]

                     loc_9dc0:
0000000000009dc0         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl, CODE XREF=rpl_fcntl+163, rpl_fcntl+191, rpl_fcntl+278, rpl_fcntl+344, rpl_fcntl+358, rpl_fcntl+371
0000000000009dc2         xor        eax, eax
0000000000009dc4         call       j_fcntl                                     ; fcntl
0000000000009dc9         mov        ebx, eax
0000000000009dcb         nop        dword [rax+rax]

                     loc_9dd0:
0000000000009dd0         mov        rcx, qword [rsp+0x68+var_50]                ; CODE XREF=rpl_fcntl+153, rpl_fcntl+327, rpl_fcntl+414, rpl_fcntl+432, rpl_fcntl+445, rpl_fcntl+491, rpl_fcntl+524, rpl_fcntl+568, rpl_fcntl+613
0000000000009dd5         xor        rcx, qword [fs:0x28]
0000000000009dde         mov        eax, ebx
0000000000009de0         jne        loc_9f3d

0000000000009de6         add        rsp, 0x50
0000000000009dea         pop        rbx
0000000000009deb         pop        rbp
0000000000009dec         pop        r12
0000000000009dee         ret
                        ; endp
0000000000009def         align      16

                     loc_9df0:
0000000000009df0         cmp        esi, 0x407                                  ; CODE XREF=rpl_fcntl+165
0000000000009df6         jg         loc_9e40

0000000000009df8         cmp        esi, 0x406
0000000000009dfe         jge        loc_9e70

0000000000009e00         cmp        esi, 0x401
0000000000009e06         je         loc_9dc0

0000000000009e08         cmp        esi, 0x402
0000000000009e0e         je         loc_9e70

0000000000009e10         cmp        esi, 0x400
0000000000009e16         je         loc_9e70

                     loc_9e18:
0000000000009e18         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+196, rpl_fcntl+356, rpl_fcntl+382
0000000000009e1b         cmp        eax, 0x2f
0000000000009e1e         ja         loc_9f5a

0000000000009e24         add        rax, qword [rsp+0x68+var_58]

                     loc_9e29:
0000000000009e29         mov        rdx, qword [rax]                            ; CODE XREF=rpl_fcntl+623
0000000000009e2c         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
0000000000009e2e         xor        eax, eax
0000000000009e30         call       j_fcntl                                     ; fcntl
0000000000009e35         mov        ebx, eax
0000000000009e37         jmp        loc_9dd0
0000000000009e39         align      64

                     loc_9e40:
0000000000009e40         cmp        esi, 0x409                                  ; CODE XREF=rpl_fcntl+262
0000000000009e46         je         loc_9e70

0000000000009e48         jl         loc_9dc0

0000000000009e4e         cmp        esi, 0x40a
0000000000009e54         jne        loc_9e18

0000000000009e56         jmp        loc_9dc0
0000000000009e5b         align      32

                     loc_9e60:
0000000000009e60         cmp        esi, 0x9                                    ; CODE XREF=rpl_fcntl+176
0000000000009e63         je         loc_9dc0

0000000000009e69         jg         loc_9e70

0000000000009e6b         cmp        esi, 0x8
0000000000009e6e         jne        loc_9e18

                     loc_9e70:
0000000000009e70         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+170, rpl_fcntl+185, rpl_fcntl+270, rpl_fcntl+286, rpl_fcntl+294, rpl_fcntl+342, rpl_fcntl+377
0000000000009e73         cmp        eax, 0x2f
0000000000009e76         ja         loc_9f64

0000000000009e7c         add        rax, qword [rsp+0x68+var_58]

                     loc_9e81:
0000000000009e81         mov        edx, dword [rax]                            ; CODE XREF=rpl_fcntl+633
0000000000009e83         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
0000000000009e85         xor        eax, eax
0000000000009e87         call       j_fcntl                                     ; fcntl
0000000000009e8c         mov        ebx, eax
0000000000009e8e         jmp        loc_9dd0

                     loc_9e93:
0000000000009e93         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl, CODE XREF=rpl_fcntl+115
0000000000009e95         xor        eax, eax
0000000000009e97         call       j_fcntl                                     ; fcntl
0000000000009e9c         test       eax, eax
0000000000009e9e         mov        ebx, eax
0000000000009ea0         js         loc_9dd0

0000000000009ea6         cmp        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
0000000000009ead         jne        loc_9dd0

                     loc_9eb3:
0000000000009eb3         xor        eax, eax                                    ; CODE XREF=rpl_fcntl+584
0000000000009eb5         mov        esi, 0x1                                    ; argument "__cmd" for method j_fcntl
0000000000009eba         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
0000000000009ebc         call       j_fcntl                                     ; fcntl
0000000000009ec1         test       eax, eax
0000000000009ec3         js         loc_9ee1

0000000000009ec5         or         eax, 0x1
0000000000009ec8         mov        esi, 0x2                                    ; argument "__cmd" for method j_fcntl
0000000000009ecd         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
0000000000009ecf         mov        edx, eax
0000000000009ed1         xor        eax, eax
0000000000009ed3         call       j_fcntl                                     ; fcntl
0000000000009ed8         cmp        eax, 0xffffffff
0000000000009edb         jne        loc_9dd0

                     loc_9ee1:
0000000000009ee1         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+467
0000000000009ee6         mov        r12d, dword [rax]
0000000000009ee9         mov        rbp, rax
0000000000009eec         mov        edi, ebx                                    ; argument "__fd" for method j_close
0000000000009eee         call       j_close                                     ; close
0000000000009ef3         mov        ebx, 0xffffffff
0000000000009ef8         mov        dword [rbp], r12d
0000000000009efc         jmp        loc_9dd0
0000000000009f01         align      8

                     loc_9f08:
0000000000009f08         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+137
0000000000009f0d         cmp        dword [rax], 0x16
0000000000009f10         jne        loc_9d7f

0000000000009f16         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
0000000000009f18         xor        eax, eax
0000000000009f1a         mov        edx, r12d
0000000000009f1d         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
0000000000009f1f         call       j_fcntl                                     ; fcntl
0000000000009f24         test       eax, eax
0000000000009f26         mov        ebx, eax
0000000000009f28         js         loc_9dd0

0000000000009f2e         mov        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
0000000000009f38         jmp        loc_9eb3

                     loc_9f3d:
0000000000009f3d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_fcntl+240
                        ; endp

                     loc_9f42:
0000000000009f42         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=rpl_fcntl+75
0000000000009f47         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
0000000000009f49         mov        edx, dword [rax+0x10]
0000000000009f4c         xor        eax, eax
0000000000009f4e         call       j_fcntl                                     ; fcntl
0000000000009f53         mov        ebx, eax
0000000000009f55         jmp        loc_9dd0

                     loc_9f5a:
0000000000009f5a         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+302
0000000000009f5f         jmp        loc_9e29

                     loc_9f64:
0000000000009f64         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+390
0000000000009f69         jmp        loc_9e81
0000000000009f6e         align      16                                          ; End of unwind block (FDE at 0x1049c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
0000000000009f70         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x104d4), CODE XREF=rpl_fclose+31
0000000000009f73         push       rbx
0000000000009f74         mov        rbx, rdi
0000000000009f77         je         loc_9f8a

0000000000009f79         call       j___freading                                ; __freading
0000000000009f7e         test       eax, eax
0000000000009f80         je         loc_9f8a

0000000000009f82         test       dword [rbx], 0x100
0000000000009f88         jne        loc_9f98

                     loc_9f8a:
0000000000009f8a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
0000000000009f8d         pop        rbx
0000000000009f8e         jmp        j_fflush                                    ; fflush
                        ; endp
0000000000009f93         align      8

                     loc_9f98:
0000000000009f98         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
0000000000009f9b         mov        edx, 0x1
0000000000009fa0         xor        esi, esi
0000000000009fa2         call       rpl_fseeko                                  ; rpl_fseeko
0000000000009fa7         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
0000000000009faa         pop        rbx
0000000000009fab         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
0000000000009fb0         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0x104d4), Begin of unwind block (FDE at 0x104f4), CODE XREF=rpl_fflush+50
0000000000009fb4         cmp        qword [rdi+0x10], rax
0000000000009fb8         je         loc_9fc0

                     j_j_fseeko:        // fseeko
0000000000009fba         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
0000000000009fbf         align      64

                     loc_9fc0:
0000000000009fc0         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
0000000000009fc4         cmp        qword [rdi+0x28], rax
0000000000009fc8         jne        j_j_fseeko                                  ; fseeko

0000000000009fca         cmp        qword [rdi+0x48], 0x0
0000000000009fcf         jne        j_j_fseeko                                  ; fseeko

0000000000009fd1         push       r12
0000000000009fd3         push       rbp
0000000000009fd4         mov        r12d, edx
0000000000009fd7         push       rbx
0000000000009fd8         mov        rbp, rsi
0000000000009fdb         mov        rbx, rdi
0000000000009fde         call       j_fileno                                    ; fileno
0000000000009fe3         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
0000000000009fe6         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
0000000000009fe9         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000009feb         call       j_lseek                                     ; lseek
0000000000009ff0         cmp        rax, 0xffffffffffffffff
0000000000009ff4         je         loc_a002

0000000000009ff6         and        dword [rbx], 0xffffffef
0000000000009ff9         mov        qword [rbx+0x90], rax
000000000000a000         xor        eax, eax

                     loc_a002:
000000000000a002         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
000000000000a003         pop        rbp
000000000000a004         pop        r12
000000000000a006         ret
                        ; endp
000000000000a007         align      16                                          ; End of unwind block (FDE at 0x104f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
000000000000a010         push       r13                                         ; Begin of unwind block (FDE at 0x10524), CODE XREF=sub_7870+534
000000000000a012         push       r12
000000000000a014         mov        r13, rsi
000000000000a017         push       rbp
000000000000a018         push       rbx
000000000000a019         mov        rbx, rdi
000000000000a01c         mov        r12, rdx
000000000000a01f         sub        rsp, 0x18
000000000000a023         mov        rax, qword [fs:0x28]
000000000000a02c         mov        qword [rsp+0x38+var_30], rax
000000000000a031         xor        eax, eax
000000000000a033         lea        rax, qword [rsp+0x38+var_34]
000000000000a038         test       rdi, rdi
000000000000a03b         cmove      rbx, rax
000000000000a03f         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
000000000000a042         call       j_mbrtowc                                   ; mbrtowc
000000000000a047         cmp        rax, 0xfffffffffffffffd
000000000000a04b         mov        rbp, rax
000000000000a04e         jbe        loc_a070

000000000000a050         test       r12, r12
000000000000a053         je         loc_a070

000000000000a055         xor        edi, edi
000000000000a057         call       hard_locale                                 ; hard_locale
000000000000a05c         test       al, al
000000000000a05e         jne        loc_a070

000000000000a060         movzx      eax, byte [r13]
000000000000a065         mov        ebp, 0x1
000000000000a06a         mov        dword [rbx], eax
000000000000a06c         nop        dword [rax]

                     loc_a070:
000000000000a070         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
000000000000a075         xor        rdx, qword [fs:0x28]
000000000000a07e         mov        rax, rbp
000000000000a081         jne        loc_a08e

000000000000a083         add        rsp, 0x18
000000000000a087         pop        rbx
000000000000a088         pop        rbp
000000000000a089         pop        r12
000000000000a08b         pop        r13
000000000000a08d         ret
                        ; endp

                     loc_a08e:
000000000000a08e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
000000000000a093         align      32                                          ; End of unwind block (FDE at 0x10524)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     rpl_vasprintf:
000000000000a0a0         push       rbx                                         ; Begin of unwind block (FDE at 0x10564), CODE XREF=xvasprintf+97
000000000000a0a1         mov        rax, rsi
000000000000a0a4         mov        rbx, rdi
000000000000a0a7         xor        edi, edi
000000000000a0a9         sub        rsp, 0x10
000000000000a0ad         mov        rcx, qword [fs:0x28]
000000000000a0b6         mov        qword [rsp+0x18+var_10], rcx
000000000000a0bb         xor        ecx, ecx
000000000000a0bd         mov        rsi, rsp
000000000000a0c0         mov        rcx, rdx
000000000000a0c3         mov        rdx, rax
000000000000a0c6         call       vasnprintf                                  ; vasnprintf
000000000000a0cb         test       rax, rax
000000000000a0ce         je         loc_a112

000000000000a0d0         mov        rdx, qword [rsp+0x18+var_18]
000000000000a0d4         cmp        rdx, 0x7fffffff
000000000000a0db         ja         loc_a0f8

000000000000a0dd         mov        qword [rbx], rax
000000000000a0e0         mov        eax, edx

                     loc_a0e2:
000000000000a0e2         mov        rbx, qword [rsp+0x18+var_10]                ; CODE XREF=rpl_vasprintf+112, rpl_vasprintf+119
000000000000a0e7         xor        rbx, qword [fs:0x28]
000000000000a0f0         jne        loc_a119

000000000000a0f2         add        rsp, 0x10
000000000000a0f6         pop        rbx
000000000000a0f7         ret
                        ; endp

                     loc_a0f8:
000000000000a0f8         mov        rdi, rax                                    ; argument "__ptr" for method j_free, CODE XREF=rpl_vasprintf+59
000000000000a0fb         call       j_free                                      ; free
000000000000a100         call       j___errno_location                          ; __errno_location
000000000000a105         mov        dword [rax], 0x4b
000000000000a10b         mov        eax, 0xffffffff
000000000000a110         jmp        loc_a0e2

                     loc_a112:
000000000000a112         mov        eax, 0xffffffff                             ; CODE XREF=rpl_vasprintf+46
000000000000a117         jmp        loc_a0e2

                     loc_a119:
000000000000a119         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_vasprintf+80
                        ; endp
000000000000a11e         align      32                                          ; End of unwind block (FDE at 0x10564)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __argmatch_die:
000000000000a120         mov        edi, 0x1                                    ; Begin of unwind block (FDE at 0x1058c), argument #1 for method usage
000000000000a125         jmp        usage                                       ; usage
                        ; endp
000000000000a12a         align      16                                          ; End of unwind block (FDE at 0x1058c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_41: int8_t, -65
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     argmatch:
000000000000a130         push       r15                                         ; Begin of unwind block (FDE at 0x105a0), CODE XREF=human_options+82, __xargmatch_internal+44
000000000000a132         push       r14
000000000000a134         mov        r15, rsi
000000000000a137         push       r13
000000000000a139         push       r12
000000000000a13b         mov        r13, rcx
000000000000a13e         push       rbp
000000000000a13f         push       rbx
000000000000a140         mov        rbp, rdx
000000000000a143         sub        rsp, 0x28
000000000000a147         mov        qword [rsp+0x58+var_50], rdi
000000000000a14c         mov        qword [rsp+0x58+var_40], rdx
000000000000a151         call       j_strlen                                    ; strlen
000000000000a156         mov        r14, qword [r15]
000000000000a159         mov        qword [rsp+0x58+var_58], 0xffffffffffffffff
000000000000a161         test       r14, r14
000000000000a164         je         loc_a21d

000000000000a16a         mov        r12, rax
000000000000a16d         mov        byte [rsp+0x58+var_41], 0x0
000000000000a172         xor        ebx, ebx
000000000000a174         jmp        loc_a1c7
000000000000a176         align      128

                     loc_a180:
000000000000a180         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=argmatch+189
000000000000a185         test       rax, rax
000000000000a188         je         loc_a230

000000000000a18e         mov        rdi, qword [rsp+0x58+var_58]
000000000000a192         mov        rdx, r13                                    ; argument "__n" for method j_memcmp
000000000000a195         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
000000000000a198         imul       rdi, r13
000000000000a19c         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
000000000000a19f         call       j_memcmp                                    ; memcmp
000000000000a1a4         test       eax, eax
000000000000a1a6         movzx      eax, byte [rsp+0x58+var_41]
000000000000a1ab         mov        ecx, 0x1
000000000000a1b0         cmovne     eax, ecx
000000000000a1b3         mov        byte [rsp+0x58+var_41], al

                     loc_a1b7:
000000000000a1b7         add        rbx, 0x1                                    ; CODE XREF=argmatch+169, argmatch+261
000000000000a1bb         add        rbp, r13
000000000000a1be         mov        r14, qword [r15+rbx*8]
000000000000a1c2         test       r14, r14
000000000000a1c5         je         loc_a208

                     loc_a1c7:
000000000000a1c7         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__s2" for method j_strncmp, CODE XREF=argmatch+68, argmatch+209
000000000000a1cc         mov        rdx, r12                                    ; argument "__n" for method j_strncmp
000000000000a1cf         mov        rdi, r14                                    ; argument "__s1" for method j_strncmp
000000000000a1d2         call       j_strncmp                                   ; strncmp
000000000000a1d7         test       eax, eax
000000000000a1d9         jne        loc_a1b7

000000000000a1db         mov        rdi, r14                                    ; argument "__s" for method j_strlen
000000000000a1de         call       j_strlen                                    ; strlen
000000000000a1e3         cmp        rax, r12
000000000000a1e6         je         loc_a240

000000000000a1e8         cmp        qword [rsp+0x58+var_58], 0xffffffffffffffff
000000000000a1ed         jne        loc_a180

000000000000a1ef         mov        qword [rsp+0x58+var_58], rbx
000000000000a1f3         add        rbx, 0x1
000000000000a1f7         add        rbp, r13
000000000000a1fa         mov        r14, qword [r15+rbx*8]
000000000000a1fe         test       r14, r14
000000000000a201         jne        loc_a1c7

000000000000a203         nop        dword [rax+rax]

                     loc_a208:
000000000000a208         cmp        byte [rsp+0x58+var_41], 0x0                 ; CODE XREF=argmatch+149
000000000000a20d         mov        rax, 0xfffffffffffffffe
000000000000a214         cmove      rax, qword [rsp+0x58+var_58]
000000000000a219         mov        qword [rsp+0x58+var_58], rax

                     loc_a21d:
000000000000a21d         mov        rax, qword [rsp+0x58+var_58]                ; CODE XREF=argmatch+52, argmatch+276
000000000000a221         add        rsp, 0x28
000000000000a225         pop        rbx
000000000000a226         pop        rbp
000000000000a227         pop        r12
000000000000a229         pop        r13
000000000000a22b         pop        r14
000000000000a22d         pop        r15
000000000000a22f         ret
                        ; endp

                     loc_a230:
000000000000a230         mov        byte [rsp+0x58+var_41], 0x1                 ; CODE XREF=argmatch+88
000000000000a235         jmp        loc_a1b7
000000000000a237         align      64

                     loc_a240:
000000000000a240         mov        qword [rsp+0x58+var_58], rbx                ; CODE XREF=argmatch+182
000000000000a244         jmp        loc_a21d
000000000000a246         align      16                                          ; End of unwind block (FDE at 0x105a0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_invalid:
000000000000a250         cmp        rdx, 0xffffffffffffffff                     ; Begin of unwind block (FDE at 0x105ec), CODE XREF=__xargmatch_internal+78
000000000000a254         push       r12
000000000000a256         mov        edx, 0x5
000000000000a25b         push       rbp
000000000000a25c         mov        r12, rsi
000000000000a25f         push       rbx
000000000000a260         mov        rbp, rdi
000000000000a263         je         loc_a2b0

000000000000a265         lea        rsi, qword [aAmbiguousArgum]                ; argument "msgid" for method j_dcgettext, "ambiguous argument %s for %s"
000000000000a26c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a26e         call       j_dcgettext                                 ; dcgettext
000000000000a273         mov        rbx, rax

                     loc_a276:
000000000000a276         mov        rsi, rbp                                    ; CODE XREF=argmatch_invalid+113
000000000000a279         mov        edi, 0x1
000000000000a27e         call       quote_n                                     ; quote_n
000000000000a283         mov        rdx, r12
000000000000a286         mov        rbp, rax
000000000000a289         mov        esi, 0x8
000000000000a28e         xor        edi, edi
000000000000a290         call       quotearg_n_style                            ; quotearg_n_style
000000000000a295         mov        r8, rbp
000000000000a298         mov        rdx, rbx                                    ; argument "__format" for method j_error
000000000000a29b         mov        rcx, rax
000000000000a29e         pop        rbx
000000000000a29f         pop        rbp
000000000000a2a0         pop        r12
000000000000a2a2         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000a2a4         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000a2a6         xor        eax, eax
000000000000a2a8         jmp        j_error                                     ; error
                        ; endp
000000000000a2ad         align      16

                     loc_a2b0:
000000000000a2b0         lea        rsi, qword [aInvalidArgumen]                ; argument "msgid" for method j_dcgettext, "invalid argument %s for %s", CODE XREF=argmatch_invalid+19
000000000000a2b7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a2b9         call       j_dcgettext                                 ; dcgettext
000000000000a2be         mov        rbx, rax
000000000000a2c1         jmp        loc_a276
000000000000a2c3         align      16                                          ; End of unwind block (FDE at 0x105ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_valid:
000000000000a2d0         push       r15                                         ; Begin of unwind block (FDE at 0x10618), CODE XREF=__xargmatch_internal+92
000000000000a2d2         push       r14
000000000000a2d4         mov        r14, rdi
000000000000a2d7         push       r13
000000000000a2d9         push       r12
000000000000a2db         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a2dd         push       rbp
000000000000a2de         push       rbx
000000000000a2df         mov        rbp, rsi
000000000000a2e2         lea        rsi, qword [aValidArguments]                ; argument "msgid" for method j_dcgettext, "Valid arguments are:"
000000000000a2e9         mov        r12, rdx
000000000000a2ec         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a2f1         sub        rsp, 0x8
000000000000a2f5         mov        rbx, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
000000000000a2fc         call       j_dcgettext                                 ; dcgettext
000000000000a301         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000a304         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000a307         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000a30c         mov        r15, qword [r14]
000000000000a30f         test       r15, r15
000000000000a312         je         loc_a3a8

000000000000a318         xor        r13d, r13d
000000000000a31b         xor        ebx, ebx
000000000000a31d         jmp        loc_a358
000000000000a31f         align      32

                     loc_a320:
000000000000a320         mov        rdi, r15                                    ; CODE XREF=argmatch_valid+139, argmatch_valid+157
000000000000a323         add        rbx, 0x1
000000000000a327         mov        r13, rbp
000000000000a32a         call       quote                                       ; quote
000000000000a32f         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
000000000000a336         lea        rdx, qword [aNS]                            ; "\\n  - %s"
000000000000a33d         mov        rcx, rax
000000000000a340         mov        esi, 0x1
000000000000a345         xor        eax, eax
000000000000a347         add        rbp, r12
000000000000a34a         call       j___fprintf_chk                             ; __fprintf_chk
000000000000a34f         mov        r15, qword [r14+rbx*8]
000000000000a353         test       r15, r15
000000000000a356         je         loc_a3a8

                     loc_a358:
000000000000a358         test       rbx, rbx                                    ; CODE XREF=argmatch_valid+77, argmatch_valid+210
000000000000a35b         je         loc_a320

000000000000a35d         mov        rdx, r12                                    ; argument "__n" for method j_memcmp
000000000000a360         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
000000000000a363         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
000000000000a366         call       j_memcmp                                    ; memcmp
000000000000a36b         test       eax, eax
000000000000a36d         jne        loc_a320

000000000000a36f         mov        rdi, r15
000000000000a372         add        rbx, 0x1
000000000000a376         add        rbp, r12
000000000000a379         call       quote                                       ; quote
000000000000a37e         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
000000000000a385         lea        rdx, qword [aLuBytesSCopied+25]             ; 0xc66a
000000000000a38c         mov        rcx, rax
000000000000a38f         mov        esi, 0x1
000000000000a394         xor        eax, eax
000000000000a396         call       j___fprintf_chk                             ; __fprintf_chk
000000000000a39b         mov        r15, qword [r14+rbx*8]
000000000000a39f         test       r15, r15
000000000000a3a2         jne        loc_a358

000000000000a3a4         nop        dword [rax]

                     loc_a3a8:
000000000000a3a8         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=argmatch_valid+66, argmatch_valid+134
000000000000a3af         mov        rax, qword [rdi+0x28]
000000000000a3b3         cmp        rax, qword [rdi+0x30]
000000000000a3b7         jae        loc_a3d8

000000000000a3b9         lea        rdx, qword [rax+1]
000000000000a3bd         mov        qword [rdi+0x28], rdx
000000000000a3c1         mov        byte [rax], 0xa
000000000000a3c4         add        rsp, 0x8
000000000000a3c8         pop        rbx
000000000000a3c9         pop        rbp
000000000000a3ca         pop        r12
000000000000a3cc         pop        r13
000000000000a3ce         pop        r14
000000000000a3d0         pop        r15
000000000000a3d2         ret
                        ; endp
000000000000a3d3         align      8

                     loc_a3d8:
000000000000a3d8         add        rsp, 0x8                                    ; CODE XREF=argmatch_valid+231
000000000000a3dc         mov        esi, 0xa                                    ; argument #2 for method j___overflow
000000000000a3e1         pop        rbx
000000000000a3e2         pop        rbp
000000000000a3e3         pop        r12
000000000000a3e5         pop        r13
000000000000a3e7         pop        r14
000000000000a3e9         pop        r15
000000000000a3eb         jmp        j___overflow                                ; __overflow
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __xargmatch_internal:
000000000000a3f0         push       r15                                         ; End of unwind block (FDE at 0x10618), Begin of unwind block (FDE at 0x10678)
000000000000a3f2         push       r14
000000000000a3f4         mov        r14, rdi
000000000000a3f7         push       r13
000000000000a3f9         push       r12
000000000000a3fb         mov        r12, rsi
000000000000a3fe         push       rbp
000000000000a3ff         push       rbx
000000000000a400         mov        rbp, rcx
000000000000a403         mov        rbx, rdx
000000000000a406         mov        rcx, r8
000000000000a409         mov        rdx, rbp
000000000000a40c         sub        rsp, 0x8
000000000000a410         mov        rsi, rbx
000000000000a413         mov        rdi, r12
000000000000a416         mov        r15, r8
000000000000a419         mov        r13, r9
000000000000a41c         call       argmatch                                    ; argmatch
000000000000a421         test       rax, rax
000000000000a424         js         loc_a435

                     loc_a426:
000000000000a426         add        rsp, 0x8                                    ; CODE XREF=__xargmatch_internal+107
000000000000a42a         pop        rbx
000000000000a42b         pop        rbp
000000000000a42c         pop        r12
000000000000a42e         pop        r13
000000000000a430         pop        r14
000000000000a432         pop        r15
000000000000a434         ret
                        ; endp

                     loc_a435:
000000000000a435         mov        rdx, rax                                    ; CODE XREF=__xargmatch_internal+52
000000000000a438         mov        rsi, r12
000000000000a43b         mov        rdi, r14
000000000000a43e         call       argmatch_invalid                            ; argmatch_invalid
000000000000a443         mov        rdx, r15
000000000000a446         mov        rsi, rbp
000000000000a449         mov        rdi, rbx
000000000000a44c         call       argmatch_valid                              ; argmatch_valid
000000000000a451         call       r13
000000000000a454         mov        rax, 0xffffffffffffffff
000000000000a45b         jmp        loc_a426
000000000000a45d         align      32                                          ; End of unwind block (FDE at 0x10678)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_to_argument:
000000000000a460         push       r14                                         ; Begin of unwind block (FDE at 0x106c4)
000000000000a462         push       r13
000000000000a464         push       r12
000000000000a466         push       rbp
000000000000a467         push       rbx
000000000000a468         mov        r14, qword [rsi]
000000000000a46b         test       r14, r14
000000000000a46e         je         loc_a4a1

000000000000a470         mov        r12, rcx
000000000000a473         mov        r13, rdi
000000000000a476         mov        rbp, rdx
000000000000a479         lea        rbx, qword [rsi+8]
000000000000a47d         jmp        loc_a48f
000000000000a47f         align      128

                     loc_a480:
000000000000a480         mov        r14, qword [rbx]                            ; CODE XREF=argmatch_to_argument+63
000000000000a483         add        rbp, r12
000000000000a486         add        rbx, 0x8
000000000000a48a         test       r14, r14
000000000000a48d         je         loc_a4a1

                     loc_a48f:
000000000000a48f         mov        rdx, r12                                    ; argument "__n" for method j_memcmp, CODE XREF=argmatch_to_argument+29
000000000000a492         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
000000000000a495         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
000000000000a498         call       j_memcmp                                    ; memcmp
000000000000a49d         test       eax, eax
000000000000a49f         jne        loc_a480

                     loc_a4a1:
000000000000a4a1         pop        rbx                                         ; CODE XREF=argmatch_to_argument+14, argmatch_to_argument+45
000000000000a4a2         mov        rax, r14
000000000000a4a5         pop        rbp
000000000000a4a6         pop        r12
000000000000a4a8         pop        r13
000000000000a4aa         pop        r14
000000000000a4ac         ret
                        ; endp
000000000000a4ad         align      16                                          ; End of unwind block (FDE at 0x106c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
000000000000a4b0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x10704), CODE XREF=rpl_mbrtowc+71
000000000000a4b4         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000a4b6         call       j_setlocale                                 ; setlocale
000000000000a4bb         mov        rdx, rax
000000000000a4be         mov        eax, 0x1
000000000000a4c3         test       rdx, rdx
000000000000a4c6         je         loc_a4e5

000000000000a4c8         lea        rdi, qword [aNS+8]                          ; 0xec40
000000000000a4cf         mov        ecx, 0x2
000000000000a4d4         mov        rsi, rdx
000000000000a4d7         rep  cmpsb byte [rsi], byte [rdi]
000000000000a4d9         seta       cl
000000000000a4dc         sbb        cl, 0x0
000000000000a4df         xor        eax, eax
000000000000a4e1         test       cl, cl
000000000000a4e3         jne        loc_a4f0

                     loc_a4e5:
000000000000a4e5         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
000000000000a4e9         ret
                        ; endp
000000000000a4ea         align      16

                     loc_a4f0:
000000000000a4f0         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
000000000000a4f7         mov        ecx, 0x6
000000000000a4fc         mov        rsi, rdx
000000000000a4ff         rep  cmpsb byte [rsi], byte [rdi]
000000000000a501         seta       al
000000000000a504         sbb        al, 0x0
000000000000a506         test       al, al
000000000000a508         setne      al
000000000000a50b         add        rsp, 0x8
000000000000a50f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
000000000000a510         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0x10704), Begin of unwind block (FDE at 0x10724), CODE XREF=gettext_quote.part.1+11
000000000000a514         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
000000000000a519         call       j_nl_langinfo                               ; nl_langinfo
000000000000a51e         test       rax, rax
000000000000a521         je         loc_a540

000000000000a523         cmp        byte [rax], 0x0
000000000000a526         lea        rdx, qword [aAscii]                         ; "ASCII"
000000000000a52d         cmove      rax, rdx
000000000000a531         add        rsp, 0x8
000000000000a535         ret
                        ; endp
000000000000a536         align      64

                     loc_a540:
000000000000a540         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
000000000000a547         add        rsp, 0x8
000000000000a54b         ret
                        ; endp
000000000000a54c         align      16                                          ; End of unwind block (FDE at 0x10724)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_2A8: int64_t, -680
        ;    var_2B0: int64_t, -688
        ;    var_2B8: int64_t, -696
        ;    var_2C0: int64_t, -704
        ;    var_3A8: int64_t, -936
        ;    var_3B0: int8_t, -944
        ;    var_3B4: int32_t, -948
        ;    var_3B8: int32_t, -952
        ;    var_3BC: int32_t, -956
        ;    var_3C8: int64_t, -968
        ;    var_3D0: int64_t, -976
        ;    var_3D8: int64_t, -984
        ;    var_3E0: int64_t, -992
        ;    var_3E8: int64_t, -1000
        ;    var_3F0: int64_t, -1008
        ;    var_3F8: int64_t, -1016
        ;    var_400: int64_t, -1024
        ;    var_408: int64_t, -1032
        ;    var_410: int64_t, -1040
        ;    var_418: int64_t, -1048
        ;    var_420: int64_t, -1056
        ;    var_421: int8_t, -1057
        ;    var_424: int32_t, -1060
        ;    var_430: int64_t, -1072
        ;    var_440: -1088
        ;    var_450: -1104


                     vasnprintf:
000000000000a550         push       rbp                                         ; Begin of unwind block (FDE at 0x10744), CODE XREF=rpl_vasprintf+38
000000000000a551         mov        rbp, rsp
000000000000a554         push       r15
000000000000a556         push       r14
000000000000a558         push       r13
000000000000a55a         push       r12
000000000000a55c         lea        r14, qword [rbp+var_3B0]
000000000000a563         push       rbx
000000000000a564         mov        rbx, rdx
000000000000a567         mov        r12, rcx
000000000000a56a         mov        rdx, r14
000000000000a56d         sub        rsp, 0x408
000000000000a574         mov        qword [rbp+var_418], rsi
000000000000a57b         lea        rsi, qword [rbp+var_2C0]
000000000000a582         mov        qword [rbp+var_3E8], rdi
000000000000a589         mov        rdi, rbx
000000000000a58c         mov        qword [rbp+var_410], r14
000000000000a593         mov        rax, qword [fs:0x28]
000000000000a59c         mov        qword [rbp+var_38], rax
000000000000a5a0         xor        eax, eax
000000000000a5a2         mov        qword [rbp+var_408], rsi
000000000000a5a9         call       printf_parse                                ; printf_parse
000000000000a5ae         test       eax, eax
000000000000a5b0         js         loc_b418

000000000000a5b6         mov        rsi, r14
000000000000a5b9         mov        rdi, r12
000000000000a5bc         call       printf_fetchargs                            ; printf_fetchargs
000000000000a5c1         test       eax, eax
000000000000a5c3         js         loc_b480

000000000000a5c9         mov        rax, qword [rbp+var_2B0]
000000000000a5d0         mov        rdx, 0xffffffffffffffff
000000000000a5d7         add        rax, 0x7
000000000000a5db         cmp        rax, 0x6
000000000000a5df         cmovbe     rax, rdx
000000000000a5e3         add        rax, qword [rbp+var_2A8]
000000000000a5ea         jb         loc_b018

000000000000a5f0         mov        rdi, rax
000000000000a5f3         xor        r8d, r8d
000000000000a5f6         add        rdi, 0x6
000000000000a5fa         setb       r8b
000000000000a5fe         jb         loc_b018

000000000000a604         cmp        rdi, 0xf9f
000000000000a60b         jbe        loc_a758

000000000000a611         cmp        rdi, 0xffffffffffffffff
000000000000a615         mov        qword [rbp+var_3C8], r8
000000000000a61c         je         loc_b018

000000000000a622         call       j_malloc                                    ; malloc
000000000000a627         test       rax, rax
000000000000a62a         mov        qword [rbp+var_3D8], rax
000000000000a631         je         loc_b018

000000000000a637         mov        r8, qword [rbp+var_3C8]
000000000000a63e         mov        qword [rbp+var_420], rax

                     loc_a645:
000000000000a645         xor        r12d, r12d                                  ; CODE XREF=vasnprintf+558
000000000000a648         cmp        qword [rbp+var_3E8], 0x0
000000000000a650         je         loc_a65c

000000000000a652         mov        rax, qword [rbp+var_418]
000000000000a659         mov        r12, qword [rax]

                     loc_a65c:
000000000000a65c         mov        r13, qword [rbp+var_2B8]                    ; CODE XREF=vasnprintf+256
000000000000a663         lea        rax, qword [rbp+var_3BC]
000000000000a66a         mov        r15, qword [rbp+var_3E8]
000000000000a671         mov        qword [rbp+var_400], 0x0
000000000000a67c         mov        qword [rbp+var_3F0], rax
000000000000a683         mov        rax, rbx
000000000000a686         mov        rbx, r8
000000000000a689         mov        rcx, qword [r13]
000000000000a68d         mov        r8, rax
000000000000a690         cmp        rcx, r8
000000000000a693         je         loc_b001

                     loc_a699:
000000000000a699         sub        rcx, r8                                     ; CODE XREF=vasnprintf+2731
000000000000a69c         mov        rax, rbx
000000000000a69f         add        rax, rcx
000000000000a6a2         mov        r14, rax
000000000000a6a5         jae        loc_a788

000000000000a6ab         cmp        r12, 0xffffffffffffffff
000000000000a6af         je         loc_b180

                     loc_a6b5:
000000000000a6b5         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+1250, vasnprintf+2694, loc_b0c0, vasnprintf+2950, vasnprintf+3039, loc_b218, vasnprintf+3299, vasnprintf+3309, vasnprintf+3371, vasnprintf+3515, loc_b430
000000000000a6ba         mov        qword [rbp+var_3C8], rax

                     loc_a6c1:
000000000000a6c1         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1600, vasnprintf+1618, vasnprintf+1668, vasnprintf+2558, vasnprintf+4338
000000000000a6c8         je         loc_a6d3

000000000000a6ca         test       r15, r15
000000000000a6cd         jne        loc_b1b0

                     loc_a6d3:
000000000000a6d3         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+376, vasnprintf+3176
000000000000a6da         test       rax, rax
000000000000a6dd         je         loc_a6e7

000000000000a6df         mov        rdi, rax                                    ; argument "__ptr" for method j_free
000000000000a6e2         call       j_free                                      ; free

                     loc_a6e7:
000000000000a6e7         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+397, vasnprintf+2772
000000000000a6ee         mov        rdi, qword [rbp+var_2B8]
000000000000a6f5         add        rax, 0x20
000000000000a6f9         cmp        rdi, rax
000000000000a6fc         je         loc_a703

000000000000a6fe         call       j_free                                      ; free

                     loc_a703:
000000000000a703         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+428
000000000000a70a         mov        rdi, qword [rbp+var_3A8]
000000000000a711         add        rax, 0x10
000000000000a715         cmp        rdi, rax
000000000000a718         je         loc_a71f

000000000000a71a         call       j_free                                      ; free

                     loc_a71f:
000000000000a71f         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+456
000000000000a726         xor        r15d, r15d
000000000000a729         mov        dword [rax], 0xc

                     loc_a72f:
000000000000a72f         mov        rdi, qword [rbp+var_38]                     ; CODE XREF=vasnprintf+1978, vasnprintf+3774, vasnprintf+3787, vasnprintf+3958, vasnprintf+4183
000000000000a733         xor        rdi, qword [fs:0x28]
000000000000a73c         mov        rax, r15
000000000000a73f         jne        loc_b647

000000000000a745         lea        rsp, qword [rbp+var_28]
000000000000a749         pop        rbx
000000000000a74a         pop        r12
000000000000a74c         pop        r13
000000000000a74e         pop        r14
000000000000a750         pop        r15
000000000000a752         pop        rbp
000000000000a753         ret
                        ; endp
000000000000a754         align      8

                     loc_a758:
000000000000a758         add        rax, 0x24                                   ; CODE XREF=vasnprintf+187
000000000000a75c         mov        qword [rbp+var_420], 0x0
000000000000a767         and        rax, 0xfffffffffffffff0
000000000000a76b         sub        rsp, rax
000000000000a76e         lea        rax, qword [rsp+0x430+var_421]
000000000000a773         and        rax, 0xfffffffffffffff0
000000000000a777         mov        qword [rbp+var_3D8], rax
000000000000a77e         jmp        loc_a645
000000000000a783         align      8

                     loc_a788:
000000000000a788         cmp        r12, rax                                    ; CODE XREF=vasnprintf+341
000000000000a78b         jae        loc_a7f4

000000000000a78d         test       r12, r12
000000000000a790         jne        loc_b0c0

000000000000a796         cmp        rax, 0xc
000000000000a79a         ja         loc_b0d2

000000000000a7a0         mov        r12d, 0xc

                     loc_a7a6:
000000000000a7a6         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+2940
000000000000a7ad         sete       dl
000000000000a7b0         test       r15, r15
000000000000a7b3         je         loc_b0f8

                     loc_a7b9:
000000000000a7b9         test       dl, dl                                      ; CODE XREF=vasnprintf+2972
000000000000a7bb         jne        loc_b0f8

000000000000a7c1         mov        rsi, r12                                    ; argument "__size" for method j_realloc
000000000000a7c4         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000a7c7         mov        qword [rbp+var_3D0], r8
000000000000a7ce         mov        qword [rbp+var_3C8], rcx
000000000000a7d5         call       j_realloc                                   ; realloc
000000000000a7da         test       rax, rax
000000000000a7dd         mov        rcx, qword [rbp+var_3C8]
000000000000a7e4         mov        r8, qword [rbp+var_3D0]
000000000000a7eb         je         loc_b19b

000000000000a7f1         mov        r15, rax

                     loc_a7f4:
000000000000a7f4         lea        rdi, qword [r15+rbx]                        ; argument "__dest" for method j_memcpy, CODE XREF=vasnprintf+571, vasnprintf+3107, vasnprintf+3123, vasnprintf+3571
000000000000a7f8         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
000000000000a7fb         mov        rsi, r8                                     ; argument "__src" for method j_memcpy
000000000000a7fe         call       j_memcpy                                    ; memcpy

                     loc_a803:
000000000000a803         mov        rax, qword [rbp+var_400]                    ; CODE XREF=vasnprintf+2740
000000000000a80a         cmp        qword [rbp+var_2C0], rax
000000000000a811         je         loc_b4cb

000000000000a817         movzx      edx, byte [r13+0x48]
000000000000a81c         mov        rax, qword [r13+0x50]
000000000000a820         cmp        dl, 0x25
000000000000a823         je         loc_afb8

000000000000a829         cmp        rax, 0xffffffffffffffff
000000000000a82d         je         loc_b476

000000000000a833         mov        r8, qword [rbp+var_3A8]
000000000000a83a         shl        rax, 0x5
000000000000a83e         add        rax, r8
000000000000a841         cmp        dl, 0x6e
000000000000a844         mov        edi, dword [rax]
000000000000a846         mov        dword [rbp+var_3D0], edi
000000000000a84c         je         loc_b030

000000000000a852         mov        eax, dword [r13+0x10]
000000000000a856         mov        rdi, qword [rbp+var_3D8]
000000000000a85d         test       al, 0x1
000000000000a85f         mov        byte [rdi], 0x25
000000000000a862         lea        rbx, qword [rdi+1]
000000000000a866         je         loc_a877

000000000000a868         mov        rdi, qword [rbp+var_3D8]
000000000000a86f         lea        rbx, qword [rdi+2]
000000000000a873         mov        byte [rdi+1], 0x27

                     loc_a877:
000000000000a877         test       al, 0x2                                     ; CODE XREF=vasnprintf+790
000000000000a879         je         loc_a882

000000000000a87b         mov        byte [rbx], 0x2d
000000000000a87e         add        rbx, 0x1

                     loc_a882:
000000000000a882         test       al, 0x4                                     ; CODE XREF=vasnprintf+809
000000000000a884         je         loc_a88d

000000000000a886         mov        byte [rbx], 0x2b
000000000000a889         add        rbx, 0x1

                     loc_a88d:
000000000000a88d         test       al, 0x8                                     ; CODE XREF=vasnprintf+820
000000000000a88f         je         loc_a898

000000000000a891         mov        byte [rbx], 0x20
000000000000a894         add        rbx, 0x1

                     loc_a898:
000000000000a898         test       al, 0x10                                    ; CODE XREF=vasnprintf+831
000000000000a89a         je         loc_a8a3

000000000000a89c         mov        byte [rbx], 0x23
000000000000a89f         add        rbx, 0x1

                     loc_a8a3:
000000000000a8a3         test       al, 0x40                                    ; CODE XREF=vasnprintf+842
000000000000a8a5         je         loc_a8ae

000000000000a8a7         mov        byte [rbx], 0x49
000000000000a8aa         add        rbx, 0x1

                     loc_a8ae:
000000000000a8ae         test       al, 0x20                                    ; CODE XREF=vasnprintf+853
000000000000a8b0         je         loc_a8b9

000000000000a8b2         mov        byte [rbx], 0x30
000000000000a8b5         add        rbx, 0x1

                     loc_a8b9:
000000000000a8b9         mov        rsi, qword [r13+0x18]                       ; CODE XREF=vasnprintf+864
000000000000a8bd         mov        rdx, qword [r13+0x20]
000000000000a8c1         cmp        rsi, rdx
000000000000a8c4         je         loc_a8f6

000000000000a8c6         mov        rcx, rdx
000000000000a8c9         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
000000000000a8cc         mov        qword [rbp+var_3E0], r8
000000000000a8d3         sub        rcx, rsi
000000000000a8d6         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
000000000000a8d9         mov        qword [rbp+var_3C8], rcx
000000000000a8e0         call       j_memcpy                                    ; memcpy
000000000000a8e5         mov        rcx, qword [rbp+var_3C8]
000000000000a8ec         mov        r8, qword [rbp+var_3E0]
000000000000a8f3         add        rbx, rcx

                     loc_a8f6:
000000000000a8f6         mov        rsi, qword [r13+0x30]                       ; CODE XREF=vasnprintf+884
000000000000a8fa         mov        rdx, qword [r13+0x38]
000000000000a8fe         cmp        rsi, rdx
000000000000a901         je         loc_a933

000000000000a903         mov        rcx, rdx
000000000000a906         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
000000000000a909         mov        qword [rbp+var_3E0], r8
000000000000a910         sub        rcx, rsi
000000000000a913         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
000000000000a916         mov        qword [rbp+var_3C8], rcx
000000000000a91d         call       j_memcpy                                    ; memcpy
000000000000a922         mov        rcx, qword [rbp+var_3C8]
000000000000a929         mov        r8, qword [rbp+var_3E0]
000000000000a930         add        rbx, rcx

                     loc_a933:
000000000000a933         mov        edi, dword [rbp+var_3D0]                    ; CODE XREF=vasnprintf+945
000000000000a939         cmp        edi, 0x10
000000000000a93c         ja         loc_a96b

000000000000a93e         mov        eax, 0x1
000000000000a943         mov        ecx, edi
000000000000a945         shl        rax, cl
000000000000a948         test       eax, 0x14180
000000000000a94d         jne        loc_a964

000000000000a94f         test       ah, 0x10
000000000000a952         jne        loc_b2b0

000000000000a958         test       ah, 0x6
000000000000a95b         je         loc_a96b

000000000000a95d         mov        byte [rbx], 0x6c
000000000000a960         add        rbx, 0x1

                     loc_a964:
000000000000a964         mov        byte [rbx], 0x6c                            ; CODE XREF=vasnprintf+1021
000000000000a967         add        rbx, 0x1

                     loc_a96b:
000000000000a96b         movzx      eax, byte [r13+0x48]                        ; CODE XREF=vasnprintf+1004, vasnprintf+1035, vasnprintf+3431
000000000000a970         mov        byte [rbx+1], 0x0
000000000000a974         mov        byte [rbx], al
000000000000a976         mov        rax, qword [r13+0x28]
000000000000a97a         cmp        rax, 0xffffffffffffffff
000000000000a97e         je         loc_b0b0

000000000000a984         shl        rax, 0x5
000000000000a988         add        rax, r8
000000000000a98b         cmp        dword [rax], 0x5
000000000000a98e         jne        loc_b476

000000000000a994         mov        eax, dword [rax+0x10]
000000000000a997         mov        dword [rbp+var_3E0], 0x1
000000000000a9a1         mov        dword [rbp+var_3B8], eax

                     loc_a9a7:
000000000000a9a7         mov        rax, qword [r13+0x40]                       ; CODE XREF=vasnprintf+2922
000000000000a9ab         cmp        rax, 0xffffffffffffffff
000000000000a9af         je         loc_a9dc

000000000000a9b1         shl        rax, 0x5
000000000000a9b5         add        r8, rax
000000000000a9b8         cmp        dword [r8], 0x5
000000000000a9bc         jne        loc_b476

000000000000a9c2         mov        eax, dword [rbp+var_3E0]
000000000000a9c8         mov        edx, dword [r8+0x10]
000000000000a9cc         mov        dword [rbp+rax*4+var_3B8], edx
000000000000a9d3         lea        eax, dword [rax+1]
000000000000a9d6         mov        dword [rbp+var_3E0], eax

                     loc_a9dc:
000000000000a9dc         mov        rax, r14                                    ; CODE XREF=vasnprintf+1119
000000000000a9df         xor        edx, edx
000000000000a9e1         add        rax, 0x2
000000000000a9e5         jb         loc_b64c

000000000000a9eb         cmp        r12, rax
000000000000a9ee         jae        loc_aa3b

000000000000a9f0         test       r12, r12
000000000000a9f3         jne        loc_b218

000000000000a9f9         cmp        rax, 0xc
000000000000a9fd         ja         loc_b230

000000000000aa03         mov        r12d, 0xc

                     loc_aa09:
000000000000aa09         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3284
000000000000aa10         sete       dl
000000000000aa13         test       r15, r15
000000000000aa16         je         loc_b260

                     loc_aa1c:
000000000000aa1c         test       dl, dl                                      ; CODE XREF=vasnprintf+3331
000000000000aa1e         jne        loc_b260

000000000000aa24         mov        rsi, r12                                    ; argument "__size" for method j_realloc
000000000000aa27         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000aa2a         call       j_realloc                                   ; realloc
000000000000aa2f         test       rax, rax
000000000000aa32         je         loc_a6b5

000000000000aa38         mov        r15, rax

                     loc_aa3b:
000000000000aa3b         mov        byte [r15+r14], 0x0                         ; CODE XREF=vasnprintf+1182, vasnprintf+3411, vasnprintf+3795, vasnprintf+4357
000000000000aa40         call       j___errno_location                          ; __errno_location
000000000000aa45         mov        qword [rbp+var_3C8], rax
000000000000aa4c         mov        eax, dword [rax]
000000000000aa4e         mov        qword [rbp+var_3F8], rbx
000000000000aa55         mov        dword [rbp+var_424], eax
000000000000aa5b         nop        dword [rax+rax]

                     loc_aa60:
000000000000aa60         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1591, vasnprintf+1677, vasnprintf+2598, vasnprintf+2652, vasnprintf+2755, vasnprintf+4332
000000000000aa67         mov        rbx, r12
000000000000aa6a         mov        r10d, 0x7fffffff
000000000000aa70         sub        rbx, r14
000000000000aa73         mov        dword [rbp+var_3BC], 0xffffffff
000000000000aa7d         cmp        rbx, 0x7fffffff
000000000000aa84         mov        dword [rax], 0x0
000000000000aa8a         mov        eax, dword [rbp+var_3D0]
000000000000aa90         cmovbe     r10, rbx
000000000000aa94         cmp        eax, 0x11
000000000000aa97         ja         loc_b476

000000000000aa9d         lea        rsi, qword [switch_table_ec50]              ; switch_table_ec50
000000000000aaa4         movsxd     rax, dword [rsi+rax*4]
000000000000aaa8         add        rax, rsi
000000000000aaab         jmp        rax                                         ; switch statement using table at 0xec50, with 18 cases, 0xaab0,0xabe8,0xad10,0xad98,0xae18,0xae58,0xaee0,0xaf10,0xb476
000000000000aaad         align      16

                     loc_aab0:
000000000000aab0         mov        rax, qword [r13+0x50]                       ; case 17, CODE XREF=vasnprintf+1371
000000000000aab4         lea        rdi, qword [r15+r14]
000000000000aab8         shl        rax, 0x5
000000000000aabc         add        rax, qword [rbp+var_3A8]
000000000000aac3         mov        r9, qword [rax+0x10]
000000000000aac7         mov        eax, dword [rbp+var_3E0]
000000000000aacd         cmp        eax, 0x1
000000000000aad0         je         loc_af98

000000000000aad6         cmp        eax, 0x2
000000000000aad9         je         loc_af80

000000000000aadf         sub        rsp, 0x8
000000000000aae3         push       qword [rbp+var_3F0]

                     loc_aae9:
000000000000aae9         mov        r8, qword [rbp+var_3D8]                     ; CODE XREF=vasnprintf+3262
000000000000aaf0         mov        rsi, r10
000000000000aaf3         mov        rcx, 0xffffffffffffffff
000000000000aafa         mov        edx, 0x1
000000000000aaff         xor        eax, eax
000000000000ab01         mov        qword [rbp+var_430], r10
000000000000ab08         call       j___snprintf_chk                            ; __snprintf_chk
000000000000ab0d         pop        rsi
000000000000ab0e         pop        rdi
000000000000ab0f         mov        r10, qword [rbp+var_430]

                     loc_ab16:
000000000000ab16         mov        ecx, dword [rbp+var_3BC]                    ; CODE XREF=vasnprintf+2109, vasnprintf+2238, vasnprintf+2433, vasnprintf+3237
000000000000ab1c         test       ecx, ecx
000000000000ab1e         js         loc_ac5c

                     loc_ab24:
000000000000ab24         movsxd     rdx, ecx                                    ; CODE XREF=vasnprintf+1798
000000000000ab27         cmp        rdx, r10
000000000000ab2a         jae        loc_ab3a

000000000000ab2c         add        rdx, r15
000000000000ab2f         cmp        byte [rdx+r14], 0x0
000000000000ab34         jne        loc_b476

                     loc_ab3a:
000000000000ab3a         cmp        ecx, eax                                    ; CODE XREF=vasnprintf+1498
000000000000ab3c         jge        loc_ab46

                     loc_ab3e:
000000000000ab3e         mov        dword [rbp+var_3BC], eax                    ; CODE XREF=vasnprintf+1823
000000000000ab44         mov        ecx, eax

                     loc_ab46:
000000000000ab46         lea        eax, dword [rcx+1]                          ; CODE XREF=vasnprintf+1516
000000000000ab49         cmp        rax, r10
000000000000ab4c         jb         loc_b380

000000000000ab52         cmp        rbx, 0x7ffffffe
000000000000ab59         ja         loc_b3a0

000000000000ab5f         lea        rsi, qword [r12+r12]
000000000000ab63         lea        edx, dword [rcx+2]
000000000000ab66         test       r12, r12
000000000000ab69         mov        rax, 0xffffffffffffffff
000000000000ab70         cmovns     rax, rsi
000000000000ab74         add        rdx, r14
000000000000ab77         jb         loc_b638

000000000000ab7d         cmp        rax, rdx
000000000000ab80         cmovb      rax, rdx
000000000000ab84         cmp        r12, rax
000000000000ab87         jae        loc_aa60

000000000000ab8d         test       r12, r12
000000000000ab90         js         loc_a6c1

000000000000ab96         cmp        rsi, rax
000000000000ab99         mov        r12, rsi
000000000000ab9c         jae        loc_abab

000000000000ab9e         cmp        rax, 0xffffffffffffffff
000000000000aba2         je         loc_a6c1

000000000000aba8         mov        r12, rax

                     loc_abab:
000000000000abab         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1612
000000000000abb2         sete       bl
000000000000abb5         test       r15, r15
000000000000abb8         je         loc_af40

000000000000abbe         test       bl, bl
000000000000abc0         jne        loc_af40

000000000000abc6         mov        rsi, r12                                    ; argument "__size" for method j_realloc
000000000000abc9         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000abcc         call       j_realloc                                   ; realloc
000000000000abd1         test       rax, rax
000000000000abd4         je         loc_a6c1

000000000000abda         mov        r15, rax
000000000000abdd         jmp        loc_aa60
000000000000abe2         align      8

                     loc_abe8:
000000000000abe8         mov        rax, qword [r13+0x50]                       ; case 14, CODE XREF=vasnprintf+1371
000000000000abec         lea        rdi, qword [r15+r14]
000000000000abf0         shl        rax, 0x5
000000000000abf4         add        rax, qword [rbp+var_3A8]
000000000000abfb         mov        r9d, dword [rax+0x10]
000000000000abff         mov        eax, dword [rbp+var_3E0]
000000000000ac05         cmp        eax, 0x1
000000000000ac08         je         loc_ae40

                     loc_ac0e:
000000000000ac0e         cmp        eax, 0x2                                    ; CODE XREF=vasnprintf+2281, vasnprintf+2481, vasnprintf+2529
000000000000ac11         je         loc_ae88

                     loc_ac17:
000000000000ac17         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2350
000000000000ac1b         push       qword [rbp+var_3F0]

                     loc_ac21:
000000000000ac21         mov        r8, qword [rbp+var_3D8]                     ; CODE XREF=vasnprintf+2303
000000000000ac28         mov        rcx, 0xffffffffffffffff
000000000000ac2f         mov        edx, 0x1
000000000000ac34         mov        rsi, r10
000000000000ac37         xor        eax, eax
000000000000ac39         mov        qword [rbp+var_430], r10
000000000000ac40         call       j___snprintf_chk                            ; __snprintf_chk
000000000000ac45         pop        rdx
000000000000ac46         pop        rcx
000000000000ac47         mov        ecx, dword [rbp+var_3BC]
000000000000ac4d         mov        r10, qword [rbp+var_430]
000000000000ac54         test       ecx, ecx
000000000000ac56         jns        loc_ab24

                     loc_ac5c:
000000000000ac5c         mov        rdi, qword [rbp+var_3F8]                    ; CODE XREF=vasnprintf+1486
000000000000ac63         cmp        byte [rdi+1], 0x0
000000000000ac67         jne        loc_afa8

000000000000ac6d         test       eax, eax
000000000000ac6f         jns        loc_ab3e

000000000000ac75         mov        rax, qword [rbp+var_3C8]
000000000000ac7c         mov        ebx, dword [rax]
000000000000ac7e         test       ebx, ebx
000000000000ac80         jne        loc_aca0

000000000000ac82         movzx      eax, byte [r13+0x48]
000000000000ac87         mov        ebx, 0x16
000000000000ac8c         and        eax, 0xffffffef
000000000000ac8f         cmp        al, 0x63
000000000000ac91         mov        eax, 0x54
000000000000ac96         cmove      ebx, eax
000000000000ac99         nop        dword [rax]

                     loc_aca0:
000000000000aca0         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1840
000000000000aca7         je         loc_acb2

000000000000aca9         test       r15, r15
000000000000acac         jne        loc_b45c

                     loc_acb2:
000000000000acb2         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+1879, vasnprintf+3860
000000000000acb9         test       rax, rax
000000000000acbc         je         loc_acc6

000000000000acbe         mov        rdi, rax                                    ; argument "__ptr" for method j_free
000000000000acc1         call       j_free                                      ; free

                     loc_acc6:
000000000000acc6         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+1900
000000000000accd         mov        rdi, qword [rbp+var_2B8]
000000000000acd4         add        rax, 0x20
000000000000acd8         cmp        rdi, rax
000000000000acdb         je         loc_ace2

000000000000acdd         call       j_free                                      ; free

                     loc_ace2:
000000000000ace2         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+1931
000000000000ace9         mov        rdi, qword [rbp+var_3A8]
000000000000acf0         add        rax, 0x10
000000000000acf4         cmp        rdi, rax
000000000000acf7         je         loc_acfe

000000000000acf9         call       j_free                                      ; free

                     loc_acfe:
000000000000acfe         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1959
000000000000ad05         xor        r15d, r15d
000000000000ad08         mov        dword [rax], ebx
000000000000ad0a         jmp        loc_a72f
000000000000ad0f         align      16

                     loc_ad10:
000000000000ad10         mov        rax, qword [r13+0x50]                       ; case 12, CODE XREF=vasnprintf+1371
000000000000ad14         lea        rdi, qword [r15+r14]
000000000000ad18         shl        rax, 0x5
000000000000ad1c         add        rax, qword [rbp+var_3A8]
000000000000ad23         fld        tword [rax+0x10]
000000000000ad26         mov        eax, dword [rbp+var_3E0]
000000000000ad2c         cmp        eax, 0x1
000000000000ad2f         je         loc_b360

000000000000ad35         cmp        eax, 0x2
000000000000ad38         jne        loc_b200

000000000000ad3e         mov        eax, dword [rbp+var_3B4]
000000000000ad44         sub        rsp, 0x8
000000000000ad48         push       qword [rbp+var_3F0]
000000000000ad4e         mov        r9d, dword [rbp+var_3B8]
000000000000ad55         mov        r8, qword [rbp+var_3D8]
000000000000ad5c         mov        rsi, r10
000000000000ad5f         sub        rsp, 0x18
000000000000ad63         mov        rcx, 0xffffffffffffffff
000000000000ad6a         mov        edx, 0x1
000000000000ad6f         fstp       tword [rsp+0x458+var_450]
000000000000ad73         push       rax
000000000000ad74         xor        eax, eax
000000000000ad76         mov        qword [rbp+var_430], r10
000000000000ad7d         call       j___snprintf_chk                            ; __snprintf_chk
000000000000ad82         add        rsp, 0x30
000000000000ad86         mov        r10, qword [rbp+var_430]
000000000000ad8d         jmp        loc_ab16
000000000000ad92         align      8

                     loc_ad98:
000000000000ad98         mov        rax, qword [r13+0x50]                       ; case 11, CODE XREF=vasnprintf+1371
000000000000ad9c         lea        rdi, qword [r15+r14]
000000000000ada0         shl        rax, 0x5
000000000000ada4         add        rax, qword [rbp+var_3A8]
000000000000adab         movsd      xmm0, qword [rax+0x10]
000000000000adb0         mov        eax, dword [rbp+var_3E0]
000000000000adb6         cmp        eax, 0x1
000000000000adb9         je         loc_b350

000000000000adbf         cmp        eax, 0x2
000000000000adc2         jne        loc_b1c0

000000000000adc8         mov        eax, dword [rbp+var_3B4]
000000000000adce         push       qword [rbp+var_3F0]
000000000000add4         push       rax

                     loc_add5:
000000000000add5         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+3594
000000000000addc         mov        r8, qword [rbp+var_3D8]
000000000000ade3         mov        rsi, r10
000000000000ade6         mov        rcx, 0xffffffffffffffff
000000000000aded         mov        edx, 0x1
000000000000adf2         mov        eax, 0x1
000000000000adf7         mov        qword [rbp+var_430], r10
000000000000adfe         call       j___snprintf_chk                            ; __snprintf_chk
000000000000ae03         pop        r8
000000000000ae05         mov        r10, qword [rbp+var_430]
000000000000ae0c         pop        r9
000000000000ae0e         jmp        loc_ab16
000000000000ae13         align      8

                     loc_ae18:
000000000000ae18         mov        rax, qword [r13+0x50]                       ; case 4, CODE XREF=vasnprintf+1371
000000000000ae1c         lea        rdi, qword [r15+r14]
000000000000ae20         shl        rax, 0x5
000000000000ae24         add        rax, qword [rbp+var_3A8]
000000000000ae2b         movzx      r9d, word [rax+0x10]
000000000000ae30         mov        eax, dword [rbp+var_3E0]
000000000000ae36         cmp        eax, 0x1
000000000000ae39         jne        loc_ac0e

000000000000ae3f         nop

                     loc_ae40:
000000000000ae40         push       qword [rbp+var_3F0]                         ; CODE XREF=vasnprintf+1720, vasnprintf+2345, vasnprintf+2487, vasnprintf+2535
000000000000ae46         push       r9

                     loc_ae48:
000000000000ae48         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+2640
000000000000ae4f         jmp        loc_ac21
000000000000ae54         align      8

                     loc_ae58:
000000000000ae58         mov        rax, qword [r13+0x50]                       ; case 3, CODE XREF=vasnprintf+1371
000000000000ae5c         lea        rdi, qword [r15+r14]
000000000000ae60         shl        rax, 0x5
000000000000ae64         add        rax, qword [rbp+var_3A8]
000000000000ae6b         movsx      r9d, word [rax+0x10]
000000000000ae70         mov        eax, dword [rbp+var_3E0]
000000000000ae76         cmp        eax, 0x1
000000000000ae79         je         loc_ae40

000000000000ae7b         cmp        eax, 0x2
000000000000ae7e         jne        loc_ac17

000000000000ae84         nop        dword [rax]

                     loc_ae88:
000000000000ae88         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+1729
000000000000ae8c         push       qword [rbp+var_3F0]
000000000000ae92         push       r9

                     loc_ae94:
000000000000ae94         mov        eax, dword [rbp+var_3B4]                    ; CODE XREF=vasnprintf+2620
000000000000ae9a         push       rax

                     loc_ae9b:
000000000000ae9b         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+3617
000000000000aea2         mov        r8, qword [rbp+var_3D8]
000000000000aea9         mov        rsi, r10
000000000000aeac         mov        rcx, 0xffffffffffffffff
000000000000aeb3         mov        edx, 0x1
000000000000aeb8         xor        eax, eax
000000000000aeba         mov        qword [rbp+var_430], r10
000000000000aec1         call       j___snprintf_chk                            ; __snprintf_chk
000000000000aec6         add        rsp, 0x20
000000000000aeca         mov        r10, qword [rbp+var_430]
000000000000aed1         jmp        loc_ab16
000000000000aed6         align      32

                     loc_aee0:
000000000000aee0         mov        rax, qword [r13+0x50]                       ; case 2, CODE XREF=vasnprintf+1371
000000000000aee4         lea        rdi, qword [r15+r14]
000000000000aee8         shl        rax, 0x5
000000000000aeec         add        rax, qword [rbp+var_3A8]
000000000000aef3         movzx      r9d, byte [rax+0x10]
000000000000aef8         mov        eax, dword [rbp+var_3E0]
000000000000aefe         cmp        eax, 0x1
000000000000af01         jne        loc_ac0e

000000000000af07         jmp        loc_ae40
000000000000af0c         align      16

                     loc_af10:
000000000000af10         mov        rax, qword [r13+0x50]                       ; case 1, CODE XREF=vasnprintf+1371
000000000000af14         lea        rdi, qword [r15+r14]
000000000000af18         shl        rax, 0x5
000000000000af1c         add        rax, qword [rbp+var_3A8]
000000000000af23         movsx      r9d, byte [rax+0x10]
000000000000af28         mov        eax, dword [rbp+var_3E0]
000000000000af2e         cmp        eax, 0x1
000000000000af31         jne        loc_ac0e

000000000000af37         jmp        loc_ae40
000000000000af3c         align      64

                     loc_af40:
000000000000af40         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+1640, vasnprintf+1648
000000000000af43         call       j_malloc                                    ; malloc
000000000000af48         test       rax, rax
000000000000af4b         mov        rcx, rax
000000000000af4e         je         loc_a6c1

000000000000af54         test       r14, r14
000000000000af57         je         loc_b010

000000000000af5d         test       bl, bl
000000000000af5f         je         loc_b010

000000000000af65         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000af68         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000af6b         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000af6e         call       j_memcpy                                    ; memcpy
000000000000af73         mov        r15, rax
000000000000af76         jmp        loc_aa60
000000000000af7b         align      128

                     loc_af80:
000000000000af80         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+1417
000000000000af84         push       qword [rbp+var_3F0]
000000000000af8a         push       r9
000000000000af8c         jmp        loc_ae94
000000000000af91         align      8

                     loc_af98:
000000000000af98         push       qword [rbp+var_3F0]                         ; CODE XREF=vasnprintf+1408
000000000000af9e         push       r9
000000000000afa0         jmp        loc_ae48
000000000000afa5         align      8

                     loc_afa8:
000000000000afa8         mov        byte [rdi+1], 0x0                           ; CODE XREF=vasnprintf+1815
000000000000afac         jmp        loc_aa60
000000000000afb1         align      8

                     loc_afb8:
000000000000afb8         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+723
000000000000afbc         jne        loc_b476

000000000000afc2         mov        rax, r14
000000000000afc5         add        rax, 0x1
000000000000afc9         mov        rbx, rax
000000000000afcc         jae        loc_b058

000000000000afd2         cmp        r12, 0xffffffffffffffff
000000000000afd6         jne        loc_a6b5

000000000000afdc         mov        rbx, r12

                     loc_afdf:
000000000000afdf         mov        byte [r15+r14], 0x25                        ; CODE XREF=vasnprintf+2827, vasnprintf+2904, vasnprintf+3555, vasnprintf+3847

                     loc_afe4:
000000000000afe4         mov        r8, qword [r13+8]                           ; CODE XREF=vasnprintf+3142, vasnprintf+3446, vasnprintf+3462, vasnprintf+3479, vasnprintf+3653
000000000000afe8         add        r13, 0x58
000000000000afec         mov        rcx, qword [r13]
000000000000aff0         add        qword [rbp+var_400], 0x1
000000000000aff8         cmp        rcx, r8
000000000000affb         jne        loc_a699

                     loc_b001:
000000000000b001         mov        r14, rbx                                    ; CODE XREF=vasnprintf+323
000000000000b004         jmp        loc_a803
000000000000b009         align      16

                     loc_b010:
000000000000b010         mov        r15, rcx                                    ; CODE XREF=vasnprintf+2567, vasnprintf+2575
000000000000b013         jmp        loc_aa60

                     loc_b018:
000000000000b018         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+154, vasnprintf+174, vasnprintf+204, vasnprintf+225
000000000000b01d         mov        qword [rbp+var_3C8], rax
000000000000b024         jmp        loc_a6e7
000000000000b029         align      16

                     loc_b030:
000000000000b030         mov        edx, edi                                    ; CODE XREF=vasnprintf+764
000000000000b032         sub        edx, 0x12
000000000000b035         cmp        edx, 0x4
000000000000b038         ja         loc_b476

000000000000b03e         lea        rdi, qword [switch_table_ec98]              ; switch_table_ec98
000000000000b045         mov        rax, qword [rax+0x10]
000000000000b049         movsxd     rdx, dword [rdi+rdx*4]
000000000000b04d         add        rdx, rdi
000000000000b050         jmp        rdx                                         ; switch statement using table at 0xec98, with 5 cases, 0xb190,0xb2c0,0xb2d0,0xb2e0
000000000000b052         align      8

                     loc_b058:
000000000000b058         cmp        r12, rax                                    ; CODE XREF=vasnprintf+2684
000000000000b05b         jae        loc_afdf

000000000000b05d         test       r12, r12
000000000000b060         jne        loc_b430

000000000000b066         cmp        rax, 0xc
000000000000b06a         ja         loc_b442

000000000000b070         mov        r12d, 0xc

                     loc_b076:
000000000000b076         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3820, vasnprintf+3839
000000000000b07d         sete       dl
000000000000b080         test       r15, r15
000000000000b083         je         loc_b2f0

000000000000b089         test       dl, dl
000000000000b08b         jne        loc_b2f0

000000000000b091         mov        rsi, r12                                    ; argument "__size" for method j_realloc
000000000000b094         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000b097         call       j_realloc                                   ; realloc
000000000000b09c         test       rax, rax
000000000000b09f         je         loc_b19b

000000000000b0a5         mov        r15, rax
000000000000b0a8         jmp        loc_afdf
000000000000b0ad         align      16

                     loc_b0b0:
000000000000b0b0         mov        dword [rbp+var_3E0], 0x0                    ; CODE XREF=vasnprintf+1070
000000000000b0ba         jmp        loc_a9a7
000000000000b0bf         align      64

                     loc_b0c0:
000000000000b0c0         js         loc_a6b5                                    ; CODE XREF=vasnprintf+576

000000000000b0c6         add        r12, r12
000000000000b0c9         cmp        r12, rax
000000000000b0cc         jae        loc_a7a6

                     loc_b0d2:
000000000000b0d2         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+586
000000000000b0d6         je         loc_a6b5

000000000000b0dc         cmp        r15, qword [rbp+var_3E8]
000000000000b0e3         mov        r12, rax
000000000000b0e6         sete       dl
000000000000b0e9         test       r15, r15
000000000000b0ec         jne        loc_a7b9

000000000000b0f2         nop        word [rax+rax]

                     loc_b0f8:
000000000000b0f8         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+611, vasnprintf+619
000000000000b0fb         mov        qword [rbp+var_3E0], r8
000000000000b102         mov        byte [rbp+var_3D0], dl
000000000000b108         mov        qword [rbp+var_3C8], rcx
000000000000b10f         call       j_malloc                                    ; malloc
000000000000b114         test       rax, rax
000000000000b117         mov        r9, rax
000000000000b11a         mov        rcx, qword [rbp+var_3C8]
000000000000b121         movzx      edx, byte [rbp+var_3D0]
000000000000b128         mov        r8, qword [rbp+var_3E0]
000000000000b12f         je         loc_a6b5

000000000000b135         test       rbx, rbx
000000000000b138         je         loc_b340

000000000000b13e         test       dl, dl
000000000000b140         je         loc_b340

000000000000b146         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000b149         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
000000000000b14c         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000b14f         mov        qword [rbp+var_3D0], r8
000000000000b156         mov        qword [rbp+var_3C8], rcx
000000000000b15d         call       j_memcpy                                    ; memcpy
000000000000b162         mov        rcx, qword [rbp+var_3C8]
000000000000b169         mov        r15, rax
000000000000b16c         mov        r8, qword [rbp+var_3D0]
000000000000b173         jmp        loc_a7f4
000000000000b178         align      128

                     loc_b180:
000000000000b180         mov        r14, r12                                    ; CODE XREF=vasnprintf+351
000000000000b183         jmp        loc_a7f4
000000000000b188         align      16

                     loc_b190:
000000000000b190         mov        qword [rax], r14                            ; case 4, CODE XREF=vasnprintf+2816
000000000000b193         mov        rbx, r14
000000000000b196         jmp        loc_afe4

                     loc_b19b:
000000000000b19b         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+667, vasnprintf+2895, vasnprintf+4051
000000000000b1a0         mov        qword [rbp+var_3C8], rax
000000000000b1a7         nop        word [rax+rax]

                     loc_b1b0:
000000000000b1b0         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+381
000000000000b1b3         call       j_free                                      ; free
000000000000b1b8         jmp        loc_a6d3
000000000000b1bd         align      64

                     loc_b1c0:
000000000000b1c0         mov        r9, qword [rbp+var_3F0]                     ; CODE XREF=vasnprintf+2162
000000000000b1c7         mov        r8, qword [rbp+var_3D8]
000000000000b1ce         mov        rsi, r10
000000000000b1d1         mov        rcx, 0xffffffffffffffff
000000000000b1d8         mov        edx, 0x1
000000000000b1dd         mov        eax, 0x1
000000000000b1e2         mov        qword [rbp+var_430], r10
000000000000b1e9         call       j___snprintf_chk                            ; __snprintf_chk
000000000000b1ee         mov        r10, qword [rbp+var_430]
000000000000b1f5         jmp        loc_ab16
000000000000b1fa         align      512

                     loc_b200:
000000000000b200         sub        rsp, 0x10                                   ; CODE XREF=vasnprintf+2024
000000000000b204         mov        r9, qword [rbp+var_3F0]
000000000000b20b         fstp       tword [rsp+0x440+var_440]
000000000000b20e         jmp        loc_aae9
000000000000b213         align      8

                     loc_b218:
000000000000b218         js         loc_a6b5                                    ; CODE XREF=vasnprintf+1187

000000000000b21e         add        r12, r12
000000000000b221         cmp        r12, rax
000000000000b224         jae        loc_aa09

000000000000b22a         nop        word [rax+rax]

                     loc_b230:
000000000000b230         test       rdx, rdx                                    ; CODE XREF=vasnprintf+1197, vasnprintf+4372
000000000000b233         jne        loc_a6b5

000000000000b239         cmp        rax, 0xffffffffffffffff
000000000000b23d         je         loc_a6b5

000000000000b243         cmp        r15, qword [rbp+var_3E8]
000000000000b24a         mov        r12, rax
000000000000b24d         sete       dl
000000000000b250         test       r15, r15
000000000000b253         jne        loc_aa1c

000000000000b259         nop        dword [rax]

                     loc_b260:
000000000000b260         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+1222, vasnprintf+1230
000000000000b263         mov        byte [rbp+var_3C8], dl
000000000000b269         call       j_malloc                                    ; malloc
000000000000b26e         test       rax, rax
000000000000b271         mov        rcx, rax
000000000000b274         movzx      edx, byte [rbp+var_3C8]
000000000000b27b         je         loc_a6b5

000000000000b281         test       r14, r14
000000000000b284         je         loc_b420

000000000000b28a         test       dl, dl
000000000000b28c         je         loc_b420

000000000000b292         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000b295         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000b298         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000b29b         call       j_memcpy                                    ; memcpy
000000000000b2a0         mov        r15, rax
000000000000b2a3         jmp        loc_aa3b
000000000000b2a8         align      16

                     loc_b2b0:
000000000000b2b0         mov        byte [rbx], 0x4c                            ; CODE XREF=vasnprintf+1026
000000000000b2b3         add        rbx, 0x1
000000000000b2b7         jmp        loc_a96b
000000000000b2bc         align      64

                     loc_b2c0:
000000000000b2c0         mov        byte [rax], r14b                            ; case 0, CODE XREF=vasnprintf+2816
000000000000b2c3         mov        rbx, r14
000000000000b2c6         jmp        loc_afe4
000000000000b2cb         align      16

                     loc_b2d0:
000000000000b2d0         mov        dword [rax], r14d                           ; case 2, CODE XREF=vasnprintf+2816
000000000000b2d3         mov        rbx, r14
000000000000b2d6         jmp        loc_afe4
000000000000b2db         align      32

                     loc_b2e0:
000000000000b2e0         mov        word [rax], r14w                            ; case 1, CODE XREF=vasnprintf+2816
000000000000b2e4         mov        rbx, r14
000000000000b2e7         jmp        loc_afe4
000000000000b2ec         align      16

                     loc_b2f0:
000000000000b2f0         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+2867, vasnprintf+2875
000000000000b2f3         mov        byte [rbp+var_3C8], dl
000000000000b2f9         call       j_malloc                                    ; malloc
000000000000b2fe         test       rax, rax
000000000000b301         mov        rcx, rax
000000000000b304         movzx      edx, byte [rbp+var_3C8]
000000000000b30b         je         loc_a6b5

000000000000b311         test       r14, r14
000000000000b314         je         loc_b454

000000000000b31a         test       dl, dl
000000000000b31c         je         loc_b454

000000000000b322         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000b325         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000b328         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000b32b         call       j_memcpy                                    ; memcpy
000000000000b330         mov        r15, rax
000000000000b333         jmp        loc_afdf
000000000000b338         align      64

                     loc_b340:
000000000000b340         mov        r15, r9                                     ; CODE XREF=vasnprintf+3048, vasnprintf+3056
000000000000b343         jmp        loc_a7f4
000000000000b348         align      16

                     loc_b350:
000000000000b350         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2153
000000000000b354         push       qword [rbp+var_3F0]
000000000000b35a         jmp        loc_add5
000000000000b35f         align      32

                     loc_b360:
000000000000b360         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2015
000000000000b364         push       qword [rbp+var_3F0]
000000000000b36a         sub        rsp, 0x10
000000000000b36e         fstp       tword [rsp+0x450+var_450]
000000000000b371         jmp        loc_ae9b
000000000000b376         align      128

                     loc_b380:
000000000000b380         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1532
000000000000b387         mov        edi, dword [rbp+var_424]
000000000000b38d         movsxd     rbx, ecx
000000000000b390         add        rbx, r14
000000000000b393         mov        dword [rax], edi
000000000000b395         jmp        loc_afe4
000000000000b39a         align      32

                     loc_b3a0:
000000000000b3a0         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1545
000000000000b3a7         je         loc_b3b2

000000000000b3a9         test       r15, r15
000000000000b3ac         jne        loc_b469

                     loc_b3b2:
000000000000b3b2         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+3671, vasnprintf+3873
000000000000b3b9         test       rax, rax
000000000000b3bc         je         loc_b3c6

000000000000b3be         mov        rdi, rax                                    ; argument "__ptr" for method j_free
000000000000b3c1         call       j_free                                      ; free

                     loc_b3c6:
000000000000b3c6         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+3692
000000000000b3cd         mov        rdi, qword [rbp+var_2B8]
000000000000b3d4         add        rax, 0x20
000000000000b3d8         cmp        rdi, rax
000000000000b3db         je         loc_b3e2

000000000000b3dd         call       j_free                                      ; free

                     loc_b3e2:
000000000000b3e2         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+3723
000000000000b3e9         mov        rdi, qword [rbp+var_3A8]
000000000000b3f0         add        rax, 0x10
000000000000b3f4         cmp        rdi, rax
000000000000b3f7         je         loc_b3fe

000000000000b3f9         call       j_free                                      ; free

                     loc_b3fe:
000000000000b3fe         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+3751
000000000000b405         xor        r15d, r15d
000000000000b408         mov        dword [rax], 0x4b
000000000000b40e         jmp        loc_a72f
000000000000b413         align      8

                     loc_b418:
000000000000b418         xor        r15d, r15d                                  ; CODE XREF=vasnprintf+96
000000000000b41b         jmp        loc_a72f

                     loc_b420:
000000000000b420         mov        r15, rcx                                    ; CODE XREF=vasnprintf+3380, vasnprintf+3388
000000000000b423         jmp        loc_aa3b
000000000000b428         align      16

                     loc_b430:
000000000000b430         js         loc_a6b5                                    ; CODE XREF=vasnprintf+2832

000000000000b436         add        r12, r12
000000000000b439         cmp        r12, rax
000000000000b43c         jae        loc_b076

                     loc_b442:
000000000000b442         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+2842
000000000000b446         je         loc_a6b5

000000000000b44c         mov        r12, rax
000000000000b44f         jmp        loc_b076

                     loc_b454:
000000000000b454         mov        r15, rcx                                    ; CODE XREF=vasnprintf+3524, vasnprintf+3532
000000000000b457         jmp        loc_afdf

                     loc_b45c:
000000000000b45c         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+1884
000000000000b45f         call       j_free                                      ; free
000000000000b464         jmp        loc_acb2

                     loc_b469:
000000000000b469         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+3676
000000000000b46c         call       j_free                                      ; free
000000000000b471         jmp        loc_b3b2

                     loc_b476:
000000000000b476         call       j_abort                                     ; abort, case 0, CODE XREF=vasnprintf+733, vasnprintf+1086, vasnprintf+1132, vasnprintf+1351, vasnprintf+1371, vasnprintf+1508, vasnprintf+2668, vasnprintf+2792
                        ; endp
000000000000b47b         align      128

                     loc_b480:
000000000000b480         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+115
000000000000b487         mov        rdi, qword [rbp+var_2B8]
000000000000b48e         add        rax, 0x20
000000000000b492         cmp        rdi, rax
000000000000b495         je         loc_b49c

000000000000b497         call       j_free                                      ; free

                     loc_b49c:
000000000000b49c         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+3909
000000000000b4a3         mov        rdi, qword [rbp+var_3A8]
000000000000b4aa         add        rax, 0x10
000000000000b4ae         cmp        rdi, rax
000000000000b4b1         je         loc_b4b8

000000000000b4b3         call       j_free                                      ; free

                     loc_b4b8:
000000000000b4b8         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+3937
000000000000b4bd         xor        r15d, r15d
000000000000b4c0         mov        dword [rax], 0x16
000000000000b4c6         jmp        loc_a72f

                     loc_b4cb:
000000000000b4cb         mov        rbx, r14                                    ; CODE XREF=vasnprintf+705
000000000000b4ce         xor        eax, eax
000000000000b4d0         add        rbx, 0x1
000000000000b4d4         jb         loc_b5e0

000000000000b4da         cmp        r12, rbx
000000000000b4dd         jae        loc_b52c

000000000000b4df         test       r12, r12
000000000000b4e2         jne        loc_b619

000000000000b4e8         cmp        rbx, 0xc
000000000000b4ec         ja         loc_b5fe

000000000000b4f2         mov        r12d, 0xc

                     loc_b4f8:
000000000000b4f8         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+4292, vasnprintf+4309
000000000000b4ff         sete       r13b
000000000000b503         test       r15, r15
000000000000b506         je         loc_b5ac

000000000000b50c         test       r13b, r13b
000000000000b50f         jne        loc_b5ac

000000000000b515         mov        rsi, r12                                    ; argument "__size" for method j_realloc
000000000000b518         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000b51b         call       j_realloc                                   ; realloc
000000000000b520         test       rax, rax
000000000000b523         je         loc_b19b

000000000000b529         mov        r15, rax

                     loc_b52c:
000000000000b52c         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3981, vasnprintf+4235, vasnprintf+4249, vasnprintf+4323
000000000000b533         mov        byte [r15+r14], 0x0
000000000000b538         je         loc_b551

000000000000b53a         cmp        r12, rbx
000000000000b53d         jbe        loc_b551

000000000000b53f         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000b542         mov        rsi, rbx                                    ; argument "__size" for method j_realloc
000000000000b545         call       j_realloc                                   ; realloc
000000000000b54a         test       rax, rax
000000000000b54d         cmovne     r15, rax

                     loc_b551:
000000000000b551         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+4072, vasnprintf+4077
000000000000b558         test       rax, rax
000000000000b55b         je         loc_b565

000000000000b55d         mov        rdi, rax                                    ; argument "__ptr" for method j_free
000000000000b560         call       j_free                                      ; free

                     loc_b565:
000000000000b565         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+4107
000000000000b56c         mov        rdi, qword [rbp+var_2B8]
000000000000b573         add        rax, 0x20
000000000000b577         cmp        rdi, rax
000000000000b57a         je         loc_b581

000000000000b57c         call       j_free                                      ; free

                     loc_b581:
000000000000b581         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+4138
000000000000b588         mov        rdi, qword [rbp+var_3A8]
000000000000b58f         add        rax, 0x10
000000000000b593         cmp        rdi, rax
000000000000b596         je         loc_b59d

000000000000b598         call       j_free                                      ; free

                     loc_b59d:
000000000000b59d         mov        rax, qword [rbp+var_418]                    ; CODE XREF=vasnprintf+4166
000000000000b5a4         mov        qword [rax], r14
000000000000b5a7         jmp        loc_a72f

                     loc_b5ac:
000000000000b5ac         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+4022, vasnprintf+4031
000000000000b5af         call       j_malloc                                    ; malloc
000000000000b5b4         test       rax, rax
000000000000b5b7         mov        rcx, rax
000000000000b5ba         je         loc_a6b5

000000000000b5c0         test       r14, r14
000000000000b5c3         je         loc_b630

000000000000b5c5         test       r13b, r13b
000000000000b5c8         je         loc_b630

000000000000b5ca         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000b5cd         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000b5d0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000b5d3         call       j_memcpy                                    ; memcpy
000000000000b5d8         mov        r15, rax
000000000000b5db         jmp        loc_b52c

                     loc_b5e0:
000000000000b5e0         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+3972
000000000000b5e4         mov        eax, 0x1
000000000000b5e9         je         loc_b52c

000000000000b5ef         test       r12, r12
000000000000b5f2         je         loc_a6b5

000000000000b5f8         js         loc_a6b5

                     loc_b5fe:
000000000000b5fe         test       rax, rax                                    ; CODE XREF=vasnprintf+3996, vasnprintf+4315
000000000000b601         jne        loc_a6b5

000000000000b607         cmp        rbx, 0xffffffffffffffff
000000000000b60b         je         loc_a6b5

000000000000b611         mov        r12, rbx
000000000000b614         jmp        loc_b4f8

                     loc_b619:
000000000000b619         js         loc_a6b5                                    ; CODE XREF=vasnprintf+3986

000000000000b61f         add        r12, r12
000000000000b622         cmp        r12, rbx
000000000000b625         jae        loc_b4f8

000000000000b62b         jmp        loc_b5fe
000000000000b62d         align      16

                     loc_b630:
000000000000b630         mov        r15, rcx                                    ; CODE XREF=vasnprintf+4211, vasnprintf+4216
000000000000b633         jmp        loc_b52c

                     loc_b638:
000000000000b638         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+1575
000000000000b63c         je         loc_aa60

000000000000b642         jmp        loc_a6c1

                     loc_b647:
000000000000b647         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=vasnprintf+495
                        ; endp

                     loc_b64c:
000000000000b64c         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+1173
000000000000b650         mov        edx, 0x1
000000000000b655         je         loc_aa3b

000000000000b65b         test       r12, r12
000000000000b65e         je         loc_a6b5

000000000000b664         jns        loc_b230

000000000000b66a         jmp        loc_a6b5
000000000000b66f         align      16                                          ; End of unwind block (FDE at 0x10744)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     printf_fetchargs:
000000000000b670         cmp        qword [rsi], 0x0                            ; Begin of unwind block (FDE at 0x10774), CODE XREF=vasnprintf+108
000000000000b674         mov        rax, qword [rsi+8]
000000000000b678         je         loc_b6dd

000000000000b67a         lea        r8, qword [aNull+20]                        ; 0xecc0
000000000000b681         lea        r10, qword [wide_null_string.2696]          ; wide_null_string.2696
000000000000b688         lea        r9, qword [aNull]                           ; "(NULL)"
000000000000b68f         xor        ecx, ecx
000000000000b691         nop        dword [rax]
000000000000b698         cmp        dword [rax], 0x16
000000000000b69b         ja         loc_b6e0

000000000000b69d         mov        edx, dword [rax]
000000000000b69f         movsxd     rdx, dword [r8+rdx*4]
000000000000b6a3         add        rdx, r8
000000000000b6a6         jmp        rdx
                        ; endp
000000000000b6a8         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_b6b0:
000000000000b6b0         mov        rdx, qword [rdi+8]
000000000000b6b4         add        rdx, 0xf
000000000000b6b8         and        rdx, 0xfffffffffffffff0
000000000000b6bc         lea        r11, qword [rdx+0x10]
000000000000b6c0         mov        qword [rdi+8], r11
000000000000b6c4         fld        tword [rdx]
000000000000b6c6         fstp       tword [rax+0x10]
000000000000b6c9         nop        dword [rax]
000000000000b6d0         add        rcx, 0x1                                    ; CODE XREF=sub_b6e6+137, sub_b6e6+183
000000000000b6d4         add        rax, 0x20
000000000000b6d8         cmp        qword [rsi], rcx
000000000000b6db         ja         printf_fetchargs+40
                        ; endp

                     loc_b6dd:
000000000000b6dd         xor        eax, eax                                    ; CODE XREF=printf_fetchargs+8
000000000000b6df         ret
                        ; endp

                     loc_b6e0:
000000000000b6e0         mov        eax, 0xffffffff                             ; CODE XREF=printf_fetchargs+43
000000000000b6e5         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_b6e6:
000000000000b6e6         mov        r11d, dword [rdi]
000000000000b6e9         cmp        r11d, 0x2f
000000000000b6ed         ja         loc_b82a

000000000000b6f3         mov        edx, r11d
000000000000b6f6         add        rdx, qword [rdi+0x10]
000000000000b6fa         add        r11d, 0x8
000000000000b6fe         mov        dword [rdi], r11d

                     loc_b701:
000000000000b701         mov        rdx, qword [rdx]                            ; CODE XREF=sub_b7d0+102
000000000000b704         mov        qword [rax+0x10], rdx
000000000000b708         jmp        sub_b6b0+32
                        ; endp
000000000000b70a         mov        r11d, dword [rdi]
000000000000b70d         cmp        r11d, 0x2f
000000000000b711         ja         sub_b84c                                    ; sub_b84c
000000000000b717         mov        edx, r11d
000000000000b71a         add        rdx, qword [rdi+0x10]
000000000000b71e         add        r11d, 0x8
000000000000b722         mov        dword [rdi], r11d

                     loc_b725:
000000000000b725         mov        edx, dword [rdx]                            ; CODE XREF=sub_b84c+12
000000000000b727         mov        dword [rax+0x10], edx
000000000000b72a         jmp        sub_b6b0+32
                        ; endp
000000000000b72c         mov        r11d, dword [rdi]
000000000000b72f         cmp        r11d, 0x2f
000000000000b733         ja         sub_b83b                                    ; sub_b83b
000000000000b739         mov        edx, r11d
000000000000b73c         add        rdx, qword [rdi+0x10]
000000000000b740         add        r11d, 0x8
000000000000b744         mov        dword [rdi], r11d

                     loc_b747:
000000000000b747         mov        edx, dword [rdx]                            ; CODE XREF=sub_b83b+12
000000000000b749         mov        byte [rax+0x10], dl
000000000000b74c         jmp        sub_b6b0+32
                        ; endp
000000000000b74e         mov        r11d, dword [rdi]
000000000000b751         cmp        r11d, 0x2f
000000000000b755         ja         sub_b7d0+42
000000000000b75b         mov        edx, r11d
000000000000b75e         add        rdx, qword [rdi+0x10]
000000000000b762         add        r11d, 0x8
000000000000b766         mov        dword [rdi], r11d
000000000000b769         mov        edx, dword [rdx]                            ; CODE XREF=sub_b7d0+54
000000000000b76b         mov        word [rax+0x10], dx
000000000000b76f         jmp        sub_b6b0+32
000000000000b774         mov        r11d, dword [rdi]
000000000000b777         cmp        r11d, 0x2f
000000000000b77b         ja         sub_b7d0+59
000000000000b781         mov        edx, r11d
000000000000b784         add        rdx, qword [rdi+0x10]
000000000000b788         add        r11d, 0x8
000000000000b78c         mov        dword [rdi], r11d
000000000000b78f         mov        rdx, qword [rdx]                            ; CODE XREF=sub_b7d0+71
000000000000b792         test       rdx, rdx
000000000000b795         cmove      rdx, r9
000000000000b799         mov        qword [rax+0x10], rdx
000000000000b79d         jmp        sub_b6b0+32
000000000000b7a2         mov        r11d, dword [rdi+4]
000000000000b7a6         cmp        r11d, 0xaf
000000000000b7ad         ja         sub_b85d                                    ; sub_b85d
000000000000b7b3         mov        edx, r11d
000000000000b7b6         add        rdx, qword [rdi+0x10]
000000000000b7ba         add        r11d, 0x10
000000000000b7be         mov        dword [rdi+4], r11d

                     loc_b7c2:
000000000000b7c2         movsd      xmm0, qword [rdx]                           ; CODE XREF=sub_b85d+12
000000000000b7c6         movsd      qword [rax+0x10], xmm0
000000000000b7cb         jmp        sub_b6b0+32
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_b7d0:
000000000000b7d0         mov        r11d, dword [rdi]
000000000000b7d3         cmp        r11d, 0x2f
000000000000b7d7         ja         loc_b81c

000000000000b7d9         mov        edx, r11d
000000000000b7dc         add        rdx, qword [rdi+0x10]
000000000000b7e0         add        r11d, 0x8
000000000000b7e4         mov        dword [rdi], r11d

                     loc_b7e7:
000000000000b7e7         mov        rdx, qword [rdx]                            ; CODE XREF=sub_b7d0+88
000000000000b7ea         test       rdx, rdx
000000000000b7ed         cmove      rdx, r10
000000000000b7f1         mov        qword [rax+0x10], rdx
000000000000b7f5         jmp        sub_b6b0+32
                        ; endp
000000000000b7fa         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_b6e6+111
000000000000b7fe         lea        r11, qword [rdx+8]
000000000000b802         mov        qword [rdi+8], r11
000000000000b806         jmp        sub_b6e6+131
000000000000b80b         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_b6e6+149
000000000000b80f         lea        r11, qword [rdx+8]
000000000000b813         mov        qword [rdi+8], r11
000000000000b817         jmp        sub_b6e6+169

                     loc_b81c:
000000000000b81c         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_b7d0+7
000000000000b820         lea        r11, qword [rdx+8]
000000000000b824         mov        qword [rdi+8], r11
000000000000b828         jmp        loc_b7e7

                     loc_b82a:
000000000000b82a         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_b6e6+7
000000000000b82e         lea        r11, qword [rdx+8]
000000000000b832         mov        qword [rdi+8], r11
000000000000b836         jmp        loc_b701


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_b83b:
000000000000b83b         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_b6e6+77
000000000000b83f         lea        r11, qword [rdx+8]
000000000000b843         mov        qword [rdi+8], r11
000000000000b847         jmp        loc_b747


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_b84c:
000000000000b84c         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_b6e6+43
000000000000b850         lea        r11, qword [rdx+8]
000000000000b854         mov        qword [rdi+8], r11
000000000000b858         jmp        loc_b725


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_b85d:
000000000000b85d         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_b6e6+199
000000000000b861         lea        r11, qword [rdx+8]
000000000000b865         mov        qword [rdi+8], r11
000000000000b869         jmp        loc_b7c2


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_b86e:
000000000000b86e         nop                                                    ; End of unwind block (FDE at 0x10774)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128


                     printf_parse:
000000000000b870         push       r15                                         ; Begin of unwind block (FDE at 0x1078c), CODE XREF=vasnprintf+89
000000000000b872         push       r14
000000000000b874         lea        rcx, qword [rsi+0x20]
000000000000b878         push       r13
000000000000b87a         push       r12
000000000000b87c         lea        rax, qword [rdx+0x10]
000000000000b880         push       rbp
000000000000b881         push       rbx
000000000000b882         mov        r14, rsi
000000000000b885         mov        r15, rdx
000000000000b888         xor        ebx, ebx
000000000000b88a         mov        r9d, 0x7
000000000000b890         sub        rsp, 0x58
000000000000b894         mov        r10d, 0x7
000000000000b89a         mov        qword [rsi], 0x0
000000000000b8a1         mov        qword [rsi+8], rcx
000000000000b8a5         mov        qword [rsp+0x88+var_60], rcx
000000000000b8aa         mov        r8, 0xffffffffffffffff
000000000000b8b1         mov        qword [rdx], 0x0
000000000000b8b8         mov        qword [rsp+0x88+var_80], rax
000000000000b8bd         mov        qword [rdx+8], rax
000000000000b8c1         mov        qword [rsp+0x88+var_70], 0x0
000000000000b8ca         mov        qword [rsp+0x88+var_78], 0x0
000000000000b8d3         mov        qword [rsp+0x88+var_68], 0x0
000000000000b8dc         jmp        loc_b8eb
000000000000b8de         align      32

                     loc_b8e0:
000000000000b8e0         cmp        al, 0x25                                    ; CODE XREF=printf_parse+128
000000000000b8e2         lea        rbp, qword [rdi+1]
000000000000b8e6         je         loc_b928

                     loc_b8e8:
000000000000b8e8         mov        rdi, rbp                                    ; CODE XREF=printf_parse+859, printf_parse+868

                     loc_b8eb:
000000000000b8eb         movzx      eax, byte [rdi]                             ; CODE XREF=printf_parse+108
000000000000b8ee         test       al, al
000000000000b8f0         jne        loc_b8e0

000000000000b8f2         lea        rax, qword [rbx+rbx*4]
000000000000b8f6         lea        rax, qword [rbx+rax*2]
000000000000b8fa         mov        qword [rcx+rax*8], rdi
000000000000b8fe         mov        rax, qword [rsp+0x88+var_78]
000000000000b903         mov        qword [r14+0x10], rax
000000000000b907         mov        rax, qword [rsp+0x88+var_70]
000000000000b90c         mov        qword [r14+0x18], rax
000000000000b910         xor        eax, eax

                     loc_b912:
000000000000b912         add        rsp, 0x58                                   ; CODE XREF=printf_parse+2174, printf_parse+2844
000000000000b916         pop        rbx
000000000000b917         pop        rbp
000000000000b918         pop        r12
000000000000b91a         pop        r13
000000000000b91c         pop        r14
000000000000b91e         pop        r15
000000000000b920         ret
                        ; endp
000000000000b921         align      8

                     loc_b928:
000000000000b928         lea        rax, qword [rbx+rbx*4]                      ; CODE XREF=printf_parse+118
000000000000b92c         mov        r13, r8
000000000000b92f         lea        rax, qword [rbx+rax*2]
000000000000b933         lea        r12, qword [rcx+rax*8]
000000000000b937         mov        qword [r12], rdi
000000000000b93b         mov        dword [r12+0x10], 0x0
000000000000b944         mov        qword [r12+0x18], 0x0
000000000000b94d         mov        qword [r12+0x20], 0x0
000000000000b956         mov        qword [r12+0x28], r8
000000000000b95b         mov        qword [r12+0x30], 0x0
000000000000b964         mov        qword [r12+0x38], 0x0
000000000000b96d         mov        qword [r12+0x40], r8
000000000000b972         mov        qword [r12+0x50], r8
000000000000b977         movzx      ebx, byte [rdi+1]
000000000000b97b         lea        eax, dword [rbx-0x30]
000000000000b97e         cmp        al, 0x9
000000000000b980         ja         loc_b9be

000000000000b982         jmp        loc_bdba
000000000000b987         align      16

                     loc_b990:
000000000000b990         cmp        bl, 0x2d                                    ; CODE XREF=printf_parse+344
000000000000b993         je         loc_b9d8

000000000000b995         cmp        bl, 0x2b
000000000000b998         je         loc_b9e0

000000000000b99a         cmp        bl, 0x20
000000000000b99d         je         loc_b9f0

000000000000b99f         cmp        bl, 0x23
000000000000b9a2         je         loc_ba00

000000000000b9a4         cmp        bl, 0x30
000000000000b9a7         je         loc_ba10

000000000000b9a9         cmp        bl, 0x49
000000000000b9ac         jne        loc_ba20

000000000000b9ae         or         dword [r12+0x10], 0x40
000000000000b9b4         nop        dword [rax]

                     loc_b9b8:
000000000000b9b8         movzx      ebx, byte [rax]                             ; CODE XREF=printf_parse+352, printf_parse+366, printf_parse+374, printf_parse+390, printf_parse+406, printf_parse+422
000000000000b9bb         mov        rbp, rax

                     loc_b9be:
000000000000b9be         lea        rax, qword [rbp+1]                          ; CODE XREF=printf_parse+272, printf_parse+1381, printf_parse+1490
000000000000b9c2         cmp        bl, 0x27
000000000000b9c5         mov        rdx, rax
000000000000b9c8         jne        loc_b990

000000000000b9ca         or         dword [r12+0x10], 0x1
000000000000b9d0         jmp        loc_b9b8
000000000000b9d2         align      8

                     loc_b9d8:
000000000000b9d8         or         dword [r12+0x10], 0x2                       ; CODE XREF=printf_parse+291
000000000000b9de         jmp        loc_b9b8

                     loc_b9e0:
000000000000b9e0         or         dword [r12+0x10], 0x4                       ; CODE XREF=printf_parse+296
000000000000b9e6         jmp        loc_b9b8
000000000000b9e8         align      16

                     loc_b9f0:
000000000000b9f0         or         dword [r12+0x10], 0x8                       ; CODE XREF=printf_parse+301
000000000000b9f6         jmp        loc_b9b8
000000000000b9f8         align      512

                     loc_ba00:
000000000000ba00         or         dword [r12+0x10], 0x10                      ; CODE XREF=printf_parse+306
000000000000ba06         jmp        loc_b9b8
000000000000ba08         align      16

                     loc_ba10:
000000000000ba10         or         dword [r12+0x10], 0x20                      ; CODE XREF=printf_parse+311
000000000000ba16         jmp        loc_b9b8
000000000000ba18         align      32

                     loc_ba20:
000000000000ba20         cmp        bl, 0x2a                                    ; CODE XREF=printf_parse+316
000000000000ba23         je         loc_bbd9

000000000000ba29         lea        ecx, dword [rbx-0x30]
000000000000ba2c         cmp        cl, 0x9
000000000000ba2f         jbe        loc_be47

                     loc_ba35:
000000000000ba35         cmp        bl, 0x2e                                    ; CODE XREF=printf_parse+1577, printf_parse+2412
000000000000ba38         je         loc_bd0f

                     loc_ba3e:
000000000000ba3e         xor        eax, eax                                    ; CODE XREF=printf_parse+1177, printf_parse+1349, printf_parse+1648, printf_parse+2650
000000000000ba40         mov        esi, 0x1
000000000000ba45         jmp        loc_ba77
000000000000ba47         align      16

                     loc_ba50:
000000000000ba50         cmp        bl, 0x4c                                    ; CODE XREF=printf_parse+526
000000000000ba53         je         loc_ba90

000000000000ba55         cmp        bl, 0x6c
000000000000ba58         je         loc_ba70

000000000000ba5a         cmp        bl, 0x6a
000000000000ba5d         je         loc_ba70

000000000000ba5f         mov        edx, ebx
000000000000ba61         and        edx, 0xffffffdf
000000000000ba64         cmp        dl, 0x5a
000000000000ba67         je         loc_ba70

000000000000ba69         cmp        bl, 0x74
000000000000ba6c         jne        loc_ba98

000000000000ba6e         nop

                     loc_ba70:
000000000000ba70         add        eax, 0x8                                    ; CODE XREF=printf_parse+488, printf_parse+493, printf_parse+503

                     loc_ba73:
000000000000ba73         movzx      ebx, byte [rbp]                             ; CODE XREF=printf_parse+539, printf_parse+547

                     loc_ba77:
000000000000ba77         add        rbp, 0x1                                    ; CODE XREF=printf_parse+469
000000000000ba7b         cmp        bl, 0x68
000000000000ba7e         jne        loc_ba50

000000000000ba80         mov        ecx, eax
000000000000ba82         mov        edx, esi
000000000000ba84         and        ecx, 0x1
000000000000ba87         shl        edx, cl
000000000000ba89         or         eax, edx
000000000000ba8b         jmp        loc_ba73
000000000000ba8d         align      16

                     loc_ba90:
000000000000ba90         or         eax, 0x4                                    ; CODE XREF=printf_parse+483
000000000000ba93         jmp        loc_ba73
000000000000ba95         align      8

                     loc_ba98:
000000000000ba98         lea        edx, dword [rbx-0x25]                       ; CODE XREF=printf_parse+508
000000000000ba9b         cmp        dl, 0x53
000000000000ba9e         ja         loc_c0bb

000000000000baa4         lea        rcx, qword [switch_table_ed3c]              ; switch_table_ed3c
000000000000baab         movzx      edx, dl
000000000000baae         movsxd     rdx, dword [rcx+rdx*4]
000000000000bab2         add        rdx, rcx
000000000000bab5         jmp        rdx                                         ; switch statement using table at 0xed3c, with 84 cases, 0xbab7,0xbb2b,0xbf6c,0xbfb8,0xbfcb,0xc018,0xc02b,0xc04c,0xc05c,0xc0b0,0xc0bb

                     loc_bab7:
000000000000bab7         mov        r11d, 0x10                                  ; case 46, CODE XREF=printf_parse+581
000000000000babd         mov        ebx, 0x73
000000000000bac2         nop        word [rax+rax]

                     loc_bac8:
000000000000bac8         cmp        r13, 0xffffffffffffffff                     ; CODE XREF=printf_parse+1797, printf_parse+1805, printf_parse+1820, printf_parse+1834, printf_parse+1853, printf_parse+1878, printf_parse+1892, printf_parse+1900, printf_parse+1915, printf_parse+1929, printf_parse+1952
000000000000bacc         je         loc_c187

000000000000bad2         mov        qword [r12+0x50], r13

                     loc_bad7:
000000000000bad7         cmp        r9, r13                                     ; CODE XREF=printf_parse+2361
000000000000bada         mov        rcx, qword [r15+8]
000000000000bade         jbe        loc_c100

                     loc_bae4:
000000000000bae4         mov        rax, qword [r15]                            ; CODE XREF=printf_parse+2322
000000000000bae7         mov        rdx, rax
000000000000baea         shl        rdx, 0x5
000000000000baee         add        rdx, rcx
000000000000baf1         cmp        rax, r13
000000000000baf4         ja         loc_bb16

000000000000baf6         nop        word [cs:rax+rax]

                     loc_bb00:
000000000000bb00         add        rax, 0x1                                    ; CODE XREF=printf_parse+673
000000000000bb04         mov        dword [rdx], 0x0
000000000000bb0a         add        rdx, 0x20
000000000000bb0e         cmp        rax, r13
000000000000bb11         jbe        loc_bb00

000000000000bb13         mov        qword [r15], rax

                     loc_bb16:
000000000000bb16         shl        r13, 0x5                                    ; CODE XREF=printf_parse+644
000000000000bb1a         lea        rax, qword [rcx+r13]
000000000000bb1e         mov        edx, dword [rax]
000000000000bb20         test       edx, edx
000000000000bb22         jne        loc_c0f3

000000000000bb28         mov        dword [rax], r11d

                     loc_bb2b:
000000000000bb2b         mov        byte [r12+0x48], bl                         ; case 0, CODE XREF=printf_parse+581, printf_parse+2182
000000000000bb30         mov        rax, qword [r14]
000000000000bb33         mov        qword [r12+8], rbp
000000000000bb38         lea        rbx, qword [rax+1]
000000000000bb3c         cmp        r10, rbx
000000000000bb3f         mov        qword [r14], rbx
000000000000bb42         ja         loc_bbd0

000000000000bb48         test       r10, r10
000000000000bb4b         js         loc_c4f7

000000000000bb51         add        r10, r10
000000000000bb54         movabs     rax, 0x2e8ba2e8ba2e8ba
000000000000bb5e         cmp        r10, rax
000000000000bb61         ja         loc_c4f7

000000000000bb67         lea        rax, qword [r10+r10*4]
000000000000bb6b         mov        rdi, qword [r14+8]
000000000000bb6f         cmp        qword [rsp+0x88+var_60], rdi
000000000000bb74         mov        qword [rsp+0x88+var_48], r9
000000000000bb79         mov        qword [rsp+0x88+var_50], r10
000000000000bb7e         lea        rax, qword [r10+rax*2]
000000000000bb82         mov        qword [rsp+0x88+var_58], r8
000000000000bb87         lea        rsi, qword [rax*8]
000000000000bb8f         je         loc_c24d

000000000000bb95         call       j_realloc                                   ; realloc
000000000000bb9a         test       rax, rax
000000000000bb9d         mov        rcx, rax
000000000000bba0         mov        r8, qword [rsp+0x88+var_58]
000000000000bba5         mov        r10, qword [rsp+0x88+var_50]
000000000000bbaa         mov        r9, qword [rsp+0x88+var_48]
000000000000bbaf         je         loc_c4f7

000000000000bbb5         mov        rax, qword [rsp+0x88+var_60]
000000000000bbba         cmp        rax, qword [r14+8]
000000000000bbbe         mov        rbx, qword [r14]
000000000000bbc1         je         loc_c270

                     loc_bbc7:
000000000000bbc7         mov        qword [r14+8], rcx                          ; CODE XREF=printf_parse+2621
000000000000bbcb         jmp        loc_b8e8

                     loc_bbd0:
000000000000bbd0         mov        rcx, qword [r14+8]                          ; CODE XREF=printf_parse+722
000000000000bbd4         jmp        loc_b8e8

                     loc_bbd9:
000000000000bbd9         mov        rsi, qword [rsp+0x88+var_78]                ; CODE XREF=printf_parse+435
000000000000bbde         mov        ecx, 0x1
000000000000bbe3         mov        qword [r12+0x18], rbp
000000000000bbe8         mov        qword [r12+0x20], rax
000000000000bbed         test       rsi, rsi
000000000000bbf0         cmovne     rcx, rsi
000000000000bbf4         mov        qword [rsp+0x88+var_78], rcx
000000000000bbf9         movzx      ecx, byte [rbp+1]
000000000000bbfd         lea        esi, dword [rcx-0x30]
000000000000bc00         cmp        sil, 0x9
000000000000bc04         jbe        loc_bee5

                     loc_bc0a:
000000000000bc0a         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+1677
000000000000bc0f         cmp        rsi, 0xffffffffffffffff
000000000000bc13         lea        rdx, qword [rsi+1]
000000000000bc17         mov        qword [r12+0x28], rsi
000000000000bc1c         je         loc_c0bb

000000000000bc22         mov        rbx, qword [rsp+0x88+var_68]
000000000000bc27         mov        rbp, rax
000000000000bc2a         mov        qword [rsp+0x88+var_68], rdx

                     loc_bc2f:
000000000000bc2f         cmp        r9, rbx                                     ; CODE XREF=printf_parse+1783
000000000000bc32         mov        rcx, qword [r15+8]
000000000000bc36         ja         loc_c2b2

000000000000bc3c         add        r9, r9
000000000000bc3f         lea        rax, qword [rbx+1]
000000000000bc43         cmp        r9, rbx
000000000000bc46         cmovbe     r9, rax
000000000000bc4a         movabs     rax, 0x7ffffffffffffff
000000000000bc54         cmp        r9, rax
000000000000bc57         ja         loc_c4fb

000000000000bc5d         mov        rsi, r9
000000000000bc60         mov        qword [rsp+0x88+var_48], r9
000000000000bc65         mov        qword [rsp+0x88+var_50], r10
000000000000bc6a         shl        rsi, 0x5
000000000000bc6e         cmp        qword [rsp+0x88+var_80], rcx
000000000000bc73         mov        qword [rsp+0x88+var_58], r8
000000000000bc78         je         loc_c391

000000000000bc7e         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000000bc81         call       j_realloc                                   ; realloc
000000000000bc86         mov        rdx, qword [r15+8]
000000000000bc8a         mov        r8, qword [rsp+0x88+var_58]
000000000000bc8f         mov        rcx, rax
000000000000bc92         mov        r10, qword [rsp+0x88+var_50]
000000000000bc97         mov        r9, qword [rsp+0x88+var_48]

                     loc_bc9c:
000000000000bc9c         test       rcx, rcx                                    ; CODE XREF=printf_parse+2880
000000000000bc9f         je         loc_c557

000000000000bca5         cmp        qword [rsp+0x88+var_80], rdx
000000000000bcaa         mov        rax, qword [r15]
000000000000bcad         je         loc_c46b

                     loc_bcb3:
000000000000bcb3         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+3123

                     loc_bcb7:
000000000000bcb7         mov        rdx, rax                                    ; CODE XREF=printf_parse+2629
000000000000bcba         shl        rdx, 0x5
000000000000bcbe         add        rdx, rcx
000000000000bcc1         cmp        rax, rbx
000000000000bcc4         ja         loc_bce6

000000000000bcc6         nop        word [cs:rax+rax]

                     loc_bcd0:
000000000000bcd0         add        rax, 0x1                                    ; CODE XREF=printf_parse+1137
000000000000bcd4         mov        dword [rdx], 0x0
000000000000bcda         add        rdx, 0x20
000000000000bcde         cmp        rax, rbx
000000000000bce1         jbe        loc_bcd0

000000000000bce3         mov        qword [r15], rax

                     loc_bce6:
000000000000bce6         shl        rbx, 0x5                                    ; CODE XREF=printf_parse+1108
000000000000bcea         lea        rax, qword [rcx+rbx]
000000000000bcee         mov        edx, dword [rax]
000000000000bcf0         test       edx, edx
000000000000bcf2         jne        loc_c1cb

000000000000bcf8         mov        dword [rax], 0x5
000000000000bcfe         movzx      ebx, byte [rbp]
000000000000bd02         lea        rdx, qword [rbp+1]
000000000000bd06         cmp        bl, 0x2e
000000000000bd09         jne        loc_ba3e

                     loc_bd0f:
000000000000bd0f         cmp        byte [rbp+1], 0x2a                          ; CODE XREF=printf_parse+456
000000000000bd13         mov        qword [r12+0x30], rbp
000000000000bd18         jne        loc_be9e

000000000000bd1e         mov        rsi, qword [rsp+0x88+var_70]
000000000000bd23         lea        r11, qword [rbp+2]
000000000000bd27         mov        eax, 0x2
000000000000bd2c         mov        qword [r12+0x38], r11
000000000000bd31         cmp        rsi, 0x2
000000000000bd35         cmovae     rax, rsi
000000000000bd39         mov        qword [rsp+0x88+var_70], rax
000000000000bd3e         movsx      eax, byte [rbp+2]
000000000000bd42         lea        edx, dword [rax-0x30]
000000000000bd45         cmp        dl, 0x9
000000000000bd48         jbe        loc_c3dc

                     loc_bd4e:
000000000000bd4e         mov        rbx, qword [r12+0x40]                       ; CODE XREF=printf_parse+2946
000000000000bd53         cmp        rbx, 0xffffffffffffffff
000000000000bd57         je         loc_c3b5

                     loc_bd5d:
000000000000bd5d         cmp        r9, rbx                                     ; CODE XREF=printf_parse+2919, printf_parse+3161
000000000000bd60         mov        rcx, qword [r15+8]
000000000000bd64         jbe        loc_c2cf

000000000000bd6a         mov        rax, qword [r15]

                     loc_bd6d:
000000000000bd6d         mov        rdx, rax                                    ; CODE XREF=printf_parse+2788
000000000000bd70         shl        rdx, 0x5
000000000000bd74         add        rdx, rcx
000000000000bd77         cmp        rax, rbx
000000000000bd7a         ja         loc_bd96

000000000000bd7c         nop        dword [rax]

                     loc_bd80:
000000000000bd80         add        rax, 0x1                                    ; CODE XREF=printf_parse+1313
000000000000bd84         mov        dword [rdx], 0x0
000000000000bd8a         add        rdx, 0x20
000000000000bd8e         cmp        rax, rbx
000000000000bd91         jbe        loc_bd80

000000000000bd93         mov        qword [r15], rax

                     loc_bd96:
000000000000bd96         shl        rbx, 0x5                                    ; CODE XREF=printf_parse+1290
000000000000bd9a         lea        rax, qword [rcx+rbx]
000000000000bd9e         mov        edx, dword [rax]
000000000000bda0         test       edx, edx
000000000000bda2         jne        loc_c2ba

000000000000bda8         mov        dword [rax], 0x5
000000000000bdae         mov        rbp, r11
000000000000bdb1         movzx      ebx, byte [r11]
000000000000bdb5         jmp        loc_ba3e

                     loc_bdba:
000000000000bdba         mov        rax, rbp                                    ; CODE XREF=printf_parse+274
000000000000bdbd         nop        dword [rax]

                     loc_bdc0:
000000000000bdc0         add        rax, 0x1                                    ; CODE XREF=printf_parse+1373
000000000000bdc4         movzx      edx, byte [rax]
000000000000bdc7         lea        ecx, dword [rdx-0x30]
000000000000bdca         cmp        cl, 0x9
000000000000bdcd         jbe        loc_bdc0

000000000000bdcf         cmp        dl, 0x24
000000000000bdd2         mov        r13, r8
000000000000bdd5         jne        loc_b9be

000000000000bddb         xor        edx, edx

                     loc_bddd:
000000000000bddd         movsx      eax, bl                                     ; CODE XREF=printf_parse+1463
000000000000bde0         movabs     rdi, 0x1999999999999999
000000000000bdea         mov        rsi, r8
000000000000bded         sub        eax, 0x30
000000000000bdf0         cmp        rdx, rdi
000000000000bdf3         cdqe
000000000000bdf5         ja         loc_bdfe

000000000000bdf7         lea        rsi, qword [rdx+rdx*4]
000000000000bdfb         add        rsi, rsi

                     loc_bdfe:
000000000000bdfe         mov        rcx, rbp                                    ; CODE XREF=printf_parse+1413

                     loc_be01:
000000000000be01         add        rax, rsi                                    ; CODE XREF=printf_parse+2390
000000000000be04         movzx      ebx, byte [rbp+1]
000000000000be08         setb       sil
000000000000be0c         add        rbp, 0x1
000000000000be10         mov        rdx, rax
000000000000be13         movzx      esi, sil
000000000000be17         test       rsi, rsi
000000000000be1a         lea        edi, dword [rbx-0x30]
000000000000be1d         jne        loc_c1ae

000000000000be23         cmp        dil, 0x9
000000000000be27         jbe        loc_bddd

000000000000be29         mov        r13, rax
000000000000be2c         sub        r13, 0x1
000000000000be30         cmp        r13, 0xfffffffffffffffd
000000000000be34         ja         loc_c0bb

000000000000be3a         lea        rbp, qword [rcx+2]
000000000000be3e         movzx      ebx, byte [rcx+2]
000000000000be42         jmp        loc_b9be

                     loc_be47:
000000000000be47         mov        qword [r12+0x18], rbp                       ; CODE XREF=printf_parse+447
000000000000be4c         movzx      edi, byte [rbp]
000000000000be50         mov        rsi, rbp
000000000000be53         lea        ecx, dword [rdi-0x30]
000000000000be56         cmp        cl, 0x9
000000000000be59         jbe        loc_be67

000000000000be5b         jmp        loc_be90
000000000000be5d         align      32

                     loc_be60:
000000000000be60         mov        rbp, rax                                    ; CODE XREF=printf_parse+1536
000000000000be63         add        rax, 0x1

                     loc_be67:
000000000000be67         movzx      edi, byte [rax]                             ; CODE XREF=printf_parse+1513
000000000000be6a         lea        edx, dword [rdi-0x30]
000000000000be6d         cmp        dl, 0x9
000000000000be70         jbe        loc_be60

000000000000be72         mov        rcx, rax
000000000000be75         lea        rdx, qword [rbp+2]
000000000000be79         mov        rbp, rax
000000000000be7c         sub        rcx, rsi
000000000000be7f         mov        rsi, qword [rsp+0x88+var_78]
000000000000be84         cmp        rsi, rcx
000000000000be87         cmovae     rcx, rsi
000000000000be8b         mov        qword [rsp+0x88+var_78], rcx

                     loc_be90:
000000000000be90         mov        qword [r12+0x20], rbp                       ; CODE XREF=printf_parse+1515
000000000000be95         movzx      ebx, byte [rbp]
000000000000be99         jmp        loc_ba35

                     loc_be9e:
000000000000be9e         movzx      eax, byte [rbp+1]                           ; CODE XREF=printf_parse+1192
000000000000bea2         sub        eax, 0x30
000000000000bea5         cmp        al, 0x9
000000000000bea7         ja         loc_bebe

000000000000bea9         nop        dword [rax]

                     loc_beb0:
000000000000beb0         add        rdx, 0x1                                    ; CODE XREF=printf_parse+1612
000000000000beb4         movzx      eax, byte [rdx]
000000000000beb7         sub        eax, 0x30
000000000000beba         cmp        al, 0x9
000000000000bebc         jbe        loc_beb0

                     loc_bebe:
000000000000bebe         mov        rsi, qword [rsp+0x88+var_70]                ; CODE XREF=printf_parse+1591
000000000000bec3         mov        rax, rdx
000000000000bec6         mov        qword [r12+0x38], rdx
000000000000becb         sub        rax, rbp
000000000000bece         movzx      ebx, byte [rdx]
000000000000bed1         mov        rbp, rdx
000000000000bed4         cmp        rsi, rax
000000000000bed7         cmovae     rax, rsi
000000000000bedb         mov        qword [rsp+0x88+var_70], rax
000000000000bee0         jmp        loc_ba3e

                     loc_bee5:
000000000000bee5         mov        rsi, rax                                    ; CODE XREF=printf_parse+916

                     loc_bee8:
000000000000bee8         add        rsi, 0x1                                    ; CODE XREF=printf_parse+1671
000000000000beec         movzx      edi, byte [rsi]
000000000000beef         lea        r11d, dword [rdi-0x30]
000000000000bef3         cmp        r11b, 0x9
000000000000bef7         jbe        loc_bee8

000000000000bef9         cmp        dil, 0x24
000000000000befd         jne        loc_bc0a

000000000000bf03         xor        esi, esi

                     loc_bf05:
000000000000bf05         movsx      eax, cl                                     ; CODE XREF=printf_parse+1758
000000000000bf08         movabs     rdi, 0x1999999999999999
000000000000bf12         mov        rcx, r8
000000000000bf15         sub        eax, 0x30
000000000000bf18         cmp        rsi, rdi
000000000000bf1b         cdqe
000000000000bf1d         ja         loc_bf26

000000000000bf1f         lea        rcx, qword [rsi+rsi*4]
000000000000bf23         add        rcx, rcx

                     loc_bf26:
000000000000bf26         mov        rbp, rdx                                    ; CODE XREF=printf_parse+1709

                     loc_bf29:
000000000000bf29         xor        r11d, r11d                                  ; CODE XREF=printf_parse+3062
000000000000bf2c         add        rax, rcx
000000000000bf2f         movzx      ecx, byte [rdx+1]
000000000000bf33         setb       r11b
000000000000bf37         add        rdx, 0x1
000000000000bf3b         mov        rsi, rax
000000000000bf3e         test       r11, r11
000000000000bf41         lea        edi, dword [rcx-0x30]
000000000000bf44         jne        loc_c44e

000000000000bf4a         cmp        dil, 0x9
000000000000bf4e         jbe        loc_bf05

000000000000bf50         lea        rbx, qword [rax-1]
000000000000bf54         cmp        rbx, 0xfffffffffffffffd
000000000000bf58         ja         loc_c0bb

000000000000bf5e         mov        qword [r12+0x28], rbx
000000000000bf63         add        rbp, 0x2
000000000000bf67         jmp        loc_bc2f

                     loc_bf6c:
000000000000bf6c         cmp        eax, 0xf                                    ; case 73, CODE XREF=printf_parse+581
000000000000bf6f         mov        r11d, 0x16
000000000000bf75         jg         loc_bac8

000000000000bf7b         test       al, 0x4
000000000000bf7d         jne        loc_bac8

000000000000bf83         cmp        eax, 0x7
000000000000bf86         mov        r11d, 0x15
000000000000bf8c         jg         loc_bac8

000000000000bf92         test       al, 0x2
000000000000bf94         mov        r11d, 0x12
000000000000bf9a         jne        loc_bac8

000000000000bfa0         xor        r11d, r11d
000000000000bfa3         test       al, 0x1
000000000000bfa5         sete       r11b
000000000000bfa9         add        r11d, 0x13
000000000000bfad         jmp        loc_bac8
000000000000bfb2         align      8

                     loc_bfb8:
000000000000bfb8         xor        r11d, r11d                                  ; case 62, CODE XREF=printf_parse+581
000000000000bfbb         cmp        eax, 0x7
000000000000bfbe         setg       r11b
000000000000bfc2         add        r11d, 0xd
000000000000bfc6         jmp        loc_bac8

                     loc_bfcb:
000000000000bfcb         cmp        eax, 0xf                                    ; case 68, CODE XREF=printf_parse+581
000000000000bfce         mov        r11d, 0x9
000000000000bfd4         jg         loc_bac8

000000000000bfda         test       al, 0x4
000000000000bfdc         jne        loc_bac8

000000000000bfe2         cmp        eax, 0x7
000000000000bfe5         mov        r11d, 0x7
000000000000bfeb         jg         loc_bac8

000000000000bff1         test       al, 0x2
000000000000bff3         mov        r11d, 0x1
000000000000bff9         jne        loc_bac8

000000000000bfff         and        eax, 0x1
000000000000c002         cmp        eax, 0x1
000000000000c005         sbb        r11d, r11d
000000000000c008         and        r11d, 0x2
000000000000c00c         add        r11d, 0x3
000000000000c010         jmp        loc_bac8
000000000000c015         align      8

                     loc_c018:
000000000000c018         xor        r11d, r11d                                  ; case 78, CODE XREF=printf_parse+581
000000000000c01b         cmp        eax, 0x7
000000000000c01e         setg       r11b
000000000000c022         add        r11d, 0xf
000000000000c026         jmp        loc_bac8

                     loc_c02b:
000000000000c02b         cmp        eax, 0xf                                    ; case 66, CODE XREF=printf_parse+581
000000000000c02e         mov        r11d, 0xc
000000000000c034         jg         loc_bac8

000000000000c03a         xor        r11d, r11d
000000000000c03d         test       al, 0x4
000000000000c03f         setne      r11b
000000000000c043         add        r11d, 0xb
000000000000c047         jmp        loc_bac8

                     loc_c04c:
000000000000c04c         mov        r11d, 0xe                                   ; case 30, CODE XREF=printf_parse+581
000000000000c052         mov        ebx, 0x63
000000000000c057         jmp        loc_bac8

                     loc_c05c:
000000000000c05c         cmp        eax, 0xf                                    ; case 83, CODE XREF=printf_parse+581
000000000000c05f         mov        r11d, 0xa
000000000000c065         jg         loc_bac8

000000000000c06b         test       al, 0x4
000000000000c06d         jne        loc_bac8

000000000000c073         cmp        eax, 0x7
000000000000c076         mov        r11d, 0x8
000000000000c07c         jg         loc_bac8

000000000000c082         test       al, 0x2
000000000000c084         mov        r11d, 0x2
000000000000c08a         jne        loc_bac8

000000000000c090         and        eax, 0x1
000000000000c093         cmp        eax, 0x1
000000000000c096         sbb        r11d, r11d
000000000000c099         and        r11d, 0x2
000000000000c09d         add        r11d, 0x4
000000000000c0a1         jmp        loc_bac8
000000000000c0a6         align      16

                     loc_c0b0:
000000000000c0b0         mov        r11d, 0x11                                  ; case 75, CODE XREF=printf_parse+581
000000000000c0b6         jmp        loc_bac8

                     loc_c0bb:
000000000000c0bb         mov        rcx, qword [r15+8]                          ; case 82, CODE XREF=printf_parse+558, printf_parse+581, printf_parse+940, printf_parse+1476, printf_parse+1768, printf_parse+2345, printf_parse+2370, printf_parse+2903, printf_parse+3019, printf_parse+3042, printf_parse+3146

                     loc_c0bf:
000000000000c0bf         cmp        qword [rsp+0x88+var_80], rcx                ; CODE XREF=printf_parse+2188, printf_parse+2398, printf_parse+2637
000000000000c0c4         je         loc_c0ce

000000000000c0c6         mov        rdi, rcx                                    ; argument "__ptr" for method j_free
000000000000c0c9         call       j_free                                      ; free

                     loc_c0ce:
000000000000c0ce         mov        rdi, qword [r14+8]                          ; CODE XREF=printf_parse+2132
000000000000c0d2         cmp        qword [rsp+0x88+var_60], rdi
000000000000c0d7         je         loc_c0de

000000000000c0d9         call       j_free                                      ; free

                     loc_c0de:
000000000000c0de         call       j___errno_location                          ; __errno_location, CODE XREF=printf_parse+2151
000000000000c0e3         mov        dword [rax], 0x16
000000000000c0e9         mov        eax, 0xffffffff
000000000000c0ee         jmp        loc_b912

                     loc_c0f3:
000000000000c0f3         cmp        edx, r11d                                   ; CODE XREF=printf_parse+690
000000000000c0f6         je         loc_bb2b

000000000000c0fc         jmp        loc_c0bf
000000000000c0fe         align      256

                     loc_c100:
000000000000c100         add        r9, r9                                      ; CODE XREF=printf_parse+622
000000000000c103         lea        rax, qword [r13+1]
000000000000c107         cmp        r9, r13
000000000000c10a         cmovbe     r9, rax
000000000000c10e         movabs     rax, 0x7ffffffffffffff
000000000000c118         cmp        r9, rax
000000000000c11b         ja         loc_c4fb

000000000000c121         mov        rsi, r9
000000000000c124         mov        qword [rsp+0x88+var_40], r9
000000000000c129         mov        qword [rsp+0x88+var_48], r10
000000000000c12e         shl        rsi, 0x5
000000000000c132         cmp        qword [rsp+0x88+var_80], rcx
000000000000c137         mov        qword [rsp+0x88+var_50], r8
000000000000c13c         mov        dword [rsp+0x88+var_58], r11d
000000000000c141         je         loc_c1e1

000000000000c147         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000000c14a         call       j_realloc                                   ; realloc
000000000000c14f         test       rax, rax
000000000000c152         mov        rcx, rax
000000000000c155         mov        r11d, dword [rsp+0x88+var_58]
000000000000c15a         mov        r8, qword [rsp+0x88+var_50]
000000000000c15f         mov        r10, qword [rsp+0x88+var_48]
000000000000c164         mov        r9, qword [rsp+0x88+var_40]
000000000000c169         je         loc_c4f7

000000000000c16f         mov        rax, qword [rsp+0x88+var_80]
000000000000c174         cmp        rax, qword [r15+8]
000000000000c178         je         loc_c209

                     loc_c17e:
000000000000c17e         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+2520
000000000000c182         jmp        loc_bae4

                     loc_c187:
000000000000c187         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+604
000000000000c18c         cmp        rsi, 0xffffffffffffffff
000000000000c190         lea        rax, qword [rsi+1]
000000000000c194         mov        qword [r12+0x50], rsi
000000000000c199         je         loc_c0bb

000000000000c19f         mov        r13, qword [rsp+0x88+var_68]
000000000000c1a4         mov        qword [rsp+0x88+var_68], rax
000000000000c1a9         jmp        loc_bad7

                     loc_c1ae:
000000000000c1ae         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+1453
000000000000c1b2         ja         loc_c0bb

000000000000c1b8         movsx      eax, bl
000000000000c1bb         mov        rsi, r8
000000000000c1be         mov        rcx, rbp
000000000000c1c1         sub        eax, 0x30
000000000000c1c4         cdqe
000000000000c1c6         jmp        loc_be01

                     loc_c1cb:
000000000000c1cb         cmp        edx, 0x5                                    ; CODE XREF=printf_parse+1154
000000000000c1ce         jne        loc_c0bf

000000000000c1d4         movzx      ebx, byte [rbp]
000000000000c1d8         lea        rdx, qword [rbp+1]
000000000000c1dc         jmp        loc_ba35

                     loc_c1e1:
000000000000c1e1         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+2257
000000000000c1e4         call       j_malloc                                    ; malloc
000000000000c1e9         test       rax, rax
000000000000c1ec         mov        rcx, rax
000000000000c1ef         mov        r11d, dword [rsp+0x88+var_58]
000000000000c1f4         mov        r8, qword [rsp+0x88+var_50]
000000000000c1f9         mov        r10, qword [rsp+0x88+var_48]
000000000000c1fe         mov        r9, qword [rsp+0x88+var_40]
000000000000c203         je         loc_c36c

                     loc_c209:
000000000000c209         mov        rdx, qword [r15]                            ; CODE XREF=printf_parse+2312
000000000000c20c         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy
000000000000c211         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000c214         mov        qword [rsp+0x88+var_40], r9
000000000000c219         mov        qword [rsp+0x88+var_48], r10
000000000000c21e         mov        qword [rsp+0x88+var_50], r8
000000000000c223         mov        dword [rsp+0x88+var_58], r11d
000000000000c228         shl        rdx, 0x5                                    ; argument "__n" for method j_memcpy
000000000000c22c         call       j_memcpy                                    ; memcpy
000000000000c231         mov        r9, qword [rsp+0x88+var_40]
000000000000c236         mov        r10, qword [rsp+0x88+var_48]
000000000000c23b         mov        rcx, rax
000000000000c23e         mov        r8, qword [rsp+0x88+var_50]
000000000000c243         mov        r11d, dword [rsp+0x88+var_58]
000000000000c248         jmp        loc_c17e

                     loc_c24d:
000000000000c24d         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+799
000000000000c250         call       j_malloc                                    ; malloc
000000000000c255         test       rax, rax
000000000000c258         mov        rcx, rax
000000000000c25b         mov        r8, qword [rsp+0x88+var_58]
000000000000c260         mov        r10, qword [rsp+0x88+var_50]
000000000000c265         mov        r9, qword [rsp+0x88+var_48]
000000000000c26a         je         loc_c359

                     loc_c270:
000000000000c270         lea        rax, qword [rbx+rbx*4]                      ; CODE XREF=printf_parse+849
000000000000c274         mov        rsi, qword [rsp+0x88+var_60]                ; argument "__src" for method j_memcpy
000000000000c279         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000c27c         mov        qword [rsp+0x88+var_48], r9
000000000000c281         mov        qword [rsp+0x88+var_50], r10
000000000000c286         lea        rdx, qword [rbx+rax*2]
000000000000c28a         mov        qword [rsp+0x88+var_58], r8
000000000000c28f         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
000000000000c293         call       j_memcpy                                    ; memcpy
000000000000c298         mov        rbx, qword [r14]
000000000000c29b         mov        rcx, rax
000000000000c29e         mov        r9, qword [rsp+0x88+var_48]
000000000000c2a3         mov        r10, qword [rsp+0x88+var_50]
000000000000c2a8         mov        r8, qword [rsp+0x88+var_58]
000000000000c2ad         jmp        loc_bbc7

                     loc_c2b2:
000000000000c2b2         mov        rax, qword [r15]                            ; CODE XREF=printf_parse+966
000000000000c2b5         jmp        loc_bcb7

                     loc_c2ba:
000000000000c2ba         cmp        edx, 0x5                                    ; CODE XREF=printf_parse+1330
000000000000c2bd         jne        loc_c0bf

000000000000c2c3         movzx      ebx, byte [r11]
000000000000c2c7         mov        rbp, r11
000000000000c2ca         jmp        loc_ba3e

                     loc_c2cf:
000000000000c2cf         add        r9, r9                                      ; CODE XREF=printf_parse+1268
000000000000c2d2         lea        rax, qword [rbx+1]
000000000000c2d6         cmp        r9, rbx
000000000000c2d9         cmovbe     r9, rax
000000000000c2dd         movabs     rax, 0x7ffffffffffffff
000000000000c2e7         cmp        r9, rax
000000000000c2ea         ja         loc_c4fb

000000000000c2f0         mov        rsi, r9
000000000000c2f3         mov        qword [rsp+0x88+var_40], r9
000000000000c2f8         mov        qword [rsp+0x88+var_48], r10
000000000000c2fd         shl        rsi, 0x5
000000000000c301         cmp        qword [rsp+0x88+var_80], rcx
000000000000c306         mov        qword [rsp+0x88+var_50], r8
000000000000c30b         mov        qword [rsp+0x88+var_58], r11
000000000000c310         je         loc_c4ce

000000000000c316         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000000c319         call       j_realloc                                   ; realloc
000000000000c31e         mov        rdx, qword [r15+8]
000000000000c322         mov        r11, qword [rsp+0x88+var_58]
000000000000c327         mov        rcx, rax
000000000000c32a         mov        r8, qword [rsp+0x88+var_50]
000000000000c32f         mov        r10, qword [rsp+0x88+var_48]
000000000000c334         mov        r9, qword [rsp+0x88+var_40]

                     loc_c339:
000000000000c339         test       rcx, rcx                                    ; CODE XREF=printf_parse+3202
000000000000c33c         je         loc_c557

000000000000c342         cmp        qword [rsp+0x88+var_80], rdx
000000000000c347         mov        rax, qword [r15]
000000000000c34a         je         loc_c510

                     loc_c350:
000000000000c350         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+3298
000000000000c354         jmp        loc_bd6d

                     loc_c359:
000000000000c359         mov        rcx, qword [r15+8]                          ; CODE XREF=printf_parse+2554
000000000000c35d         cmp        qword [rsp+0x88+var_80], rcx
000000000000c362         je         loc_c37c

                     loc_c364:
000000000000c364         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=printf_parse+3216
000000000000c367         call       j_free                                      ; free

                     loc_c36c:
000000000000c36c         mov        rdi, qword [r14+8]                          ; CODE XREF=printf_parse+2451, printf_parse+3222
000000000000c370         cmp        qword [rsp+0x88+var_60], rdi
000000000000c375         je         loc_c37c

000000000000c377         call       j_free                                      ; free

                     loc_c37c:
000000000000c37c         call       j___errno_location                          ; __errno_location, CODE XREF=printf_parse+2802, printf_parse+2821
000000000000c381         mov        dword [rax], 0xc
000000000000c387         mov        eax, 0xffffffff
000000000000c38c         jmp        loc_b912

                     loc_c391:
000000000000c391         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+1032
000000000000c394         call       j_malloc                                    ; malloc
000000000000c399         mov        rdx, qword [rsp+0x88+var_80]
000000000000c39e         mov        rcx, rax
000000000000c3a1         mov        r9, qword [rsp+0x88+var_48]
000000000000c3a6         mov        r10, qword [rsp+0x88+var_50]
000000000000c3ab         mov        r8, qword [rsp+0x88+var_58]
000000000000c3b0         jmp        loc_bc9c

                     loc_c3b5:
000000000000c3b5         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+1255
000000000000c3ba         cmp        rsi, 0xffffffffffffffff
000000000000c3be         lea        rax, qword [rsi+1]
000000000000c3c2         mov        qword [r12+0x40], rsi
000000000000c3c7         je         loc_c0bb

000000000000c3cd         mov        rbx, qword [rsp+0x88+var_68]
000000000000c3d2         mov        qword [rsp+0x88+var_68], rax
000000000000c3d7         jmp        loc_bd5d

                     loc_c3dc:
000000000000c3dc         mov        rdx, r11                                    ; CODE XREF=printf_parse+1240

                     loc_c3df:
000000000000c3df         add        rdx, 0x1                                    ; CODE XREF=printf_parse+2941
000000000000c3e3         movzx      ecx, byte [rdx]
000000000000c3e6         lea        esi, dword [rcx-0x30]
000000000000c3e9         cmp        sil, 0x9
000000000000c3ed         jbe        loc_c3df

000000000000c3ef         cmp        cl, 0x24
000000000000c3f2         jne        loc_bd4e

000000000000c3f8         xor        ecx, ecx

                     loc_c3fa:
000000000000c3fa         movabs     rsi, 0x1999999999999999                     ; CODE XREF=printf_parse+3132
000000000000c404         sub        eax, 0x30
000000000000c407         mov        rdx, r8
000000000000c40a         cmp        rcx, rsi
000000000000c40d         cdqe
000000000000c40f         ja         loc_c418

000000000000c411         lea        rdx, qword [rcx+rcx*4]
000000000000c415         add        rdx, rdx

                     loc_c418:
000000000000c418         mov        rsi, r11                                    ; CODE XREF=printf_parse+2975

                     loc_c41b:
000000000000c41b         xor        ebx, ebx                                    ; CODE XREF=printf_parse+3036
000000000000c41d         add        rdx, rax
000000000000c420         movsx      eax, byte [r11+1]
000000000000c425         setb       bl
000000000000c428         add        r11, 0x1
000000000000c42c         mov        rcx, rdx
000000000000c42f         test       rbx, rbx
000000000000c432         lea        edi, dword [rax-0x30]
000000000000c435         je         loc_c4a8

000000000000c437         cmp        dil, 0x9
000000000000c43b         ja         loc_c0bb

000000000000c441         sub        eax, 0x30
000000000000c444         mov        rdx, r8
000000000000c447         mov        rsi, r11
000000000000c44a         cdqe
000000000000c44c         jmp        loc_c41b

                     loc_c44e:
000000000000c44e         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+1748
000000000000c452         ja         loc_c0bb

000000000000c458         movsx      eax, cl
000000000000c45b         mov        rbp, rdx
000000000000c45e         mov        rcx, r8
000000000000c461         sub        eax, 0x30
000000000000c464         cdqe
000000000000c466         jmp        loc_bf29

                     loc_c46b:
000000000000c46b         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy, CODE XREF=printf_parse+1085
000000000000c470         shl        rax, 0x5
000000000000c474         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000c477         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
000000000000c47a         mov        qword [rsp+0x88+var_48], r9
000000000000c47f         mov        qword [rsp+0x88+var_50], r10
000000000000c484         mov        qword [rsp+0x88+var_58], r8
000000000000c489         call       j_memcpy                                    ; memcpy
000000000000c48e         mov        r9, qword [rsp+0x88+var_48]
000000000000c493         mov        rcx, rax
000000000000c496         mov        r10, qword [rsp+0x88+var_50]
000000000000c49b         mov        rax, qword [r15]
000000000000c49e         mov        r8, qword [rsp+0x88+var_58]
000000000000c4a3         jmp        loc_bcb3

                     loc_c4a8:
000000000000c4a8         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+3013
000000000000c4ac         jbe        loc_c3fa

000000000000c4b2         lea        rbx, qword [rdx-1]
000000000000c4b6         cmp        rbx, 0xfffffffffffffffd
000000000000c4ba         ja         loc_c0bb

000000000000c4c0         mov        qword [r12+0x40], rbx
000000000000c4c5         lea        r11, qword [rsi+2]
000000000000c4c9         jmp        loc_bd5d

                     loc_c4ce:
000000000000c4ce         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+2720
000000000000c4d1         call       j_malloc                                    ; malloc
000000000000c4d6         mov        rdx, qword [rsp+0x88+var_80]
000000000000c4db         mov        rcx, rax
000000000000c4de         mov        r9, qword [rsp+0x88+var_40]
000000000000c4e3         mov        r10, qword [rsp+0x88+var_48]
000000000000c4e8         mov        r8, qword [rsp+0x88+var_50]
000000000000c4ed         mov        r11, qword [rsp+0x88+var_58]
000000000000c4f2         jmp        loc_c339

                     loc_c4f7:
000000000000c4f7         mov        rcx, qword [r15+8]                          ; CODE XREF=printf_parse+731, printf_parse+753, printf_parse+831, printf_parse+2297

                     loc_c4fb:
000000000000c4fb         cmp        qword [rsp+0x88+var_80], rcx                ; CODE XREF=printf_parse+999, printf_parse+2219, printf_parse+2682, printf_parse+3306
000000000000c500         jne        loc_c364

000000000000c506         jmp        loc_c36c
000000000000c50b         align      16

                     loc_c510:
000000000000c510         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy, CODE XREF=printf_parse+2778
000000000000c515         shl        rax, 0x5
000000000000c519         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000c51c         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
000000000000c51f         mov        qword [rsp+0x88+var_40], r9
000000000000c524         mov        qword [rsp+0x88+var_48], r10
000000000000c529         mov        qword [rsp+0x88+var_50], r8
000000000000c52e         mov        qword [rsp+0x88+var_58], r11
000000000000c533         call       j_memcpy                                    ; memcpy
000000000000c538         mov        r9, qword [rsp+0x88+var_40]
000000000000c53d         mov        rcx, rax
000000000000c540         mov        r10, qword [rsp+0x88+var_48]
000000000000c545         mov        rax, qword [r15]
000000000000c548         mov        r8, qword [rsp+0x88+var_50]
000000000000c54d         mov        r11, qword [rsp+0x88+var_58]
000000000000c552         jmp        loc_c350

                     loc_c557:
000000000000c557         mov        rcx, rdx                                    ; CODE XREF=printf_parse+1071, printf_parse+2764
000000000000c55a         jmp        loc_c4fb
000000000000c55c         align      32                                          ; End of unwind block (FDE at 0x1078c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
000000000000c560         push       r15                                         ; Begin of unwind block (FDE at 0x107dc), DATA XREF=_start+22
000000000000c562         push       r14
000000000000c564         mov        r15, rdx
000000000000c567         push       r13
000000000000c569         push       r12
000000000000c56b         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
000000000000c572         push       rbp
000000000000c573         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000000c57a         push       rbx
000000000000c57b         mov        r13d, edi
000000000000c57e         mov        r14, rsi
000000000000c581         sub        rbp, r12
000000000000c584         sub        rsp, 0x8
000000000000c588         sar        rbp, 0x3
000000000000c58c         call       _init                                       ; _init
000000000000c591         test       rbp, rbp
000000000000c594         je         loc_c5b6

000000000000c596         xor        ebx, ebx
000000000000c598         nop        dword [rax+rax]

                     loc_c5a0:
000000000000c5a0         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
000000000000c5a3         mov        rsi, r14
000000000000c5a6         mov        edi, r13d
000000000000c5a9         call       qword [r12+rbx*8]
000000000000c5ad         add        rbx, 0x1
000000000000c5b1         cmp        rbp, rbx
000000000000c5b4         jne        loc_c5a0

                     loc_c5b6:
000000000000c5b6         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
000000000000c5ba         pop        rbx
000000000000c5bb         pop        rbp
000000000000c5bc         pop        r12
000000000000c5be         pop        r13
000000000000c5c0         pop        r14
000000000000c5c2         pop        r15
000000000000c5c4         ret
                        ; endp
000000000000c5c5         align      16                                          ; End of unwind block (FDE at 0x107dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
000000000000c5d0         ret                                                    ; Begin of unwind block (FDE at 0x10824), DATA XREF=_start+15
                        ; endp
000000000000c5d2         align      32                                          ; End of unwind block (FDE at 0x10824)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
000000000000c5e0         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0x1083c), __dso_handle, CODE XREF=main+437
000000000000c5e7         xor        esi, esi
000000000000c5e9         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
000000000000c5ee         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x1083c)
000000000000c5ef         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0xc5f0; 0xc5f9[ (9 bytes)
        ; File offset : [50672; 50681[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
000000000000c5f0         sub        rsp, 0x8
000000000000c5f4         add        rsp, 0x8
000000000000c5f8         ret
                        ; endp
000000000000c5f9         db  0x00 ; '.'
000000000000c5fa         db  0x00 ; '.'
000000000000c5fb         db  0x00 ; '.'
000000000000c5fc         db  0x00 ; '.'
000000000000c5fd         db  0x00 ; '.'
000000000000c5fe         db  0x00 ; '.'
000000000000c5ff         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0xc600; 0xee8c[ (10380 bytes)
        ; File offset : [50688; 61068[ (10380 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
000000000000c600         db  0x01 ; '.'
000000000000c601         db  0x00 ; '.'
000000000000c602         db  0x02 ; '.'
000000000000c603         db  0x00 ; '.'
                     a0fS:
000000000000c604         db         "%.0f s", 0                                 ; DATA XREF=print_xfer_stats+578, print_xfer_stats+880
000000000000c60b         db  0x25 ; '%'                                         ; DATA XREF=print_xfer_stats+242, print_xfer_stats+540
000000000000c60c         db  0x67 ; 'g'
000000000000c60d         db  0x20 ; ' '
000000000000c60e         db  0x73 ; 's'
000000000000c60f         db  0x00 ; '.'
                     aInfinity:
000000000000c610         db         "Infinity", 0                               ; DATA XREF=print_xfer_stats+472
                     aSBs:
000000000000c619         db         "%s B/s", 0                                 ; DATA XREF=print_xfer_stats+498
                     aLuBytesCopiedS:
000000000000c620         db         "%lu bytes copied, %s, %s", 0               ; DATA XREF=print_xfer_stats+695
                     aLuByteCopiedSS:
000000000000c639         db         "%lu byte copied, %s, %s", 0                ; DATA XREF=print_xfer_stats+702
                     aLuBytesSCopied:
000000000000c651         db         "%lu bytes (%s) copied, %s, %s", 0          ; DATA XREF=print_xfer_stats+656
000000000000c66f         db  0x25 ; '%'                                         ; DATA XREF=print_xfer_stats+822
000000000000c670         db  0x2a ; '*'
000000000000c671         db  0x73 ; 's'
000000000000c672         db  0x00 ; '.'
                     aBcegkkmptwyz0:
000000000000c673         db         "bcEGkKMPTwYZ0", 0                          ; DATA XREF=parse_integer+4
000000000000c681         db  0x30 ; '0'                                         ; DATA XREF=parse_integer+241
000000000000c682         db  0x30 ; '0'                                         ; DATA XREF=parse_integer+202
000000000000c683         db  0x78 ; 'x'
000000000000c684         db  0x00 ; '.'
                     aSettingFlagsFo:
000000000000c685         db         "setting flags for %s", 0                   ; DATA XREF=set_fd_flags+197
                     aLuTruncatedRec:
000000000000c69a         db         "%lu truncated records\n", 0                ; DATA XREF=print_stats.part.2+208
                     aLuTruncatedRec_c6b1:        // aLuTruncatedRec
000000000000c6b1         db         "%lu truncated record\n", 0                 ; DATA XREF=print_stats.part.2+215
                     aClosingInputFi:
000000000000c6c7         db         "closing input file %s", 0                  ; DATA XREF=cleanup+55
                     aClosingOutputF:
000000000000c6dd         db         "closing output file %s", 0                 ; DATA XREF=cleanup+122
000000000000c6f4         db  0x64 ; 'd'                                         ; DATA XREF=main+483, usage+941, usage+1260, usage+1444, usage+1463, usage+1497
000000000000c6f5         db  0x64 ; 'd'
000000000000c6f6         db  0x00 ; '.'
000000000000c6f7         db  0x55 ; 'U'                                         ; DATA XREF=usage+850
000000000000c6f8         db  0x53 ; 'S'
000000000000c6f9         db  0x52 ; 'R'
000000000000c6fa         db  0x31 ; '1'
000000000000c6fb         db  0x00 ; '.'
000000000000c6fc         db  0x5b ; '['                                         ; DATA XREF=usage+953
000000000000c6fd         db  0x00 ; '.'
                     aTestInvocation:
000000000000c6fe         db         "test invocation", 0                        ; DATA XREF=usage+992
                     aMulticallInvoc:
000000000000c70e         db         "Multi-call invocation", 0                  ; DATA XREF=usage+1040
                     aSha224sum:
000000000000c724         db         "sha224sum", 0                              ; DATA XREF=usage+1057
                     aSha2Utilities:
000000000000c72e         db         "sha2 utilities", 0                         ; DATA XREF=usage+1069
                     aSha256sum:
000000000000c73d         db         "sha256sum", 0                              ; DATA XREF=usage+960
                     aSha384sum:
000000000000c747         db         "sha384sum", 0                              ; DATA XREF=usage+1004
                     aSha512sum:
000000000000c751         db         "sha512sum", 0                              ; DATA XREF=usage+1028
                     aNsOnlineHelpSn:
000000000000c75b         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+1146
000000000000c772         db  0x47 ; 'G'                                         ; DATA XREF=usage+1174, usage+1367, emit_bug_reporting_address+68
000000000000c773         db  0x4e ; 'N'
000000000000c774         db  0x55 ; 'U'
000000000000c775         db  0x20 ; ' '
                     aCoreutils:
000000000000c776         db         "coreutils", 0                              ; DATA XREF=main+406, main+418, main+476, usage+1016
000000000000c780         db  0x65 ; 'e'                                         ; DATA XREF=usage+1213, usage+1406
000000000000c781         db  0x6e ; 'n'
000000000000c782         db  0x5f ; '_'
000000000000c783         db  0x00 ; '.'
                     aFullDocumentat:
000000000000c784         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+1241, usage+1430
                     aSS:
000000000000c79f         db         "%s: %s", 0                                 ; DATA XREF=main+6022, main+7413, parse_symbols+179, close_stdout+108
                     aCannotFstatS:
000000000000c7a6         db         "cannot fstat %s", 0                        ; DATA XREF=main+6683, main+7332, skip+803
                     aSCannotSkip:
000000000000c7b6         db         "%s: cannot skip", 0                        ; DATA XREF=skip+486
                     aSCannotSeek:
000000000000c7c6         db         "%s: cannot seek", 0                        ; DATA XREF=main+3642, skip+734
                     aErrorReadingS:
000000000000c7d6         db         "error reading %s", 0                       ; DATA XREF=main+3494, skip+640
                     aWritingToS:
000000000000c7e7         db         "writing to %s", 0                          ; DATA XREF=main+6843, write_output+83
000000000000c7f5         db  0x69 ; 'i'                                         ; DATA XREF=main+669
000000000000c7f6         db  0x66 ; 'f'
000000000000c7f7         db  0x00 ; '.'
000000000000c7f8         db  0x6f ; 'o'                                         ; DATA XREF=main+2560
000000000000c7f9         db  0x66 ; 'f'
000000000000c7fa         db  0x00 ; '.'
000000000000c7fb         db  0x63 ; 'c'                                         ; DATA XREF=main+2624
000000000000c7fc         db  0x6f ; 'o'
000000000000c7fd         db  0x6e ; 'n'
000000000000c7fe         db  0x76 ; 'v'
000000000000c7ff         db  0x00 ; '.'
                     aIflag:
000000000000c800         db         "iflag", 0                                  ; DATA XREF=main+2705
                     aOflag:
000000000000c806         db         "oflag", 0                                  ; DATA XREF=main+2786
                     aStatus:
000000000000c80c         db         "status", 0                                 ; DATA XREF=main+3237
000000000000c813         db  0x69 ; 'i'                                         ; DATA XREF=main+5410
000000000000c814         db  0x62 ; 'b'
000000000000c815         db  0x73 ; 's'
000000000000c816         db  0x00 ; '.'
000000000000c817         db  0x6f ; 'o'                                         ; DATA XREF=main+5450
000000000000c818         db  0x62 ; 'b'
000000000000c819         db  0x73 ; 's'
000000000000c81a         db  0x00 ; '.'
000000000000c81b         db  0x63 ; 'c'                                         ; DATA XREF=main+6922
000000000000c81c         db  0x62 ; 'b'                                         ; DATA XREF=main+5515
000000000000c81d         db  0x73 ; 's'
000000000000c81e         db  0x00 ; '.'
                     aCount:
000000000000c81f         db         "count", 0                                  ; DATA XREF=main+6580
                     aCountbytes:
000000000000c825         db         "count_bytes", 0                            ; DATA XREF=main+7552
                     aSkipbytes:
000000000000c831         db         "skip_bytes", 0                             ; DATA XREF=main+7559
                     aPosixlycorrect:
000000000000c83c         db         "POSIXLY_CORRECT", 0                        ; DATA XREF=main+13, human_options+269, human_options+368
                     aUsrlocalsharel:
000000000000c84c         db         "/usr/local/share/locale", 0                ; DATA XREF=main+399
                     aStuartKemp:
000000000000c864         db         "Stuart Kemp", 0                            ; DATA XREF=main+467
                     aDavidMackenzie:
000000000000c870         db         "David MacKenzie", 0                        ; DATA XREF=main+497
                     aPaulRubin:
000000000000c880         db         "Paul Rubin", 0                             ; DATA XREF=main+511
                     aUnrecognizedOp:
000000000000c88b         db         "unrecognized operand %s", 0                ; DATA XREF=main+6777
                     aInvalidConvers:
000000000000c8a3         db         "invalid conversion", 0                     ; DATA XREF=main+2670
                     aInvalidInputFl:
000000000000c8b6         db         "invalid input flag", 0                     ; DATA XREF=main+2751, main+7619
                     aInvalidOutputF:
000000000000c8c9         db         "invalid output flag", 0                    ; DATA XREF=main+2847, main+7391, main+7587
                     aInvalidStatusL:
000000000000c8dd         db         "invalid status level", 0                   ; DATA XREF=main+3291
                     aFullblock:
000000000000c8f2         db         "fullblock", 0                              ; DATA XREF=main+7379
                     aSeekbytes:
000000000000c8fc         db         "seek_bytes", 0                             ; DATA XREF=main+7599
                     aStandardInput:
000000000000c907         db         "standard input", 0                         ; DATA XREF=main+4997
                     aFailedToOpenS:
000000000000c916         db         "failed to open %s", 0                      ; DATA XREF=main+7226, main+7469
                     aStandardOutput:
000000000000c928         db         "standard output", 0                        ; DATA XREF=main+5856
                     aErrorWritingS:
000000000000c938         db         "error writing %s", 0                       ; DATA XREF=main+4131
                     aFdatasyncFaile:
000000000000c949         db         "fdatasync failed for %s", 0                ; DATA XREF=main+6712
                     aFsyncFailedFor:
000000000000c961         db         "fsync failed for %s", 0                    ; DATA XREF=main+4936
                     aInvalidNumber:
000000000000c975         db         "invalid number", 0                         ; DATA XREF=main+5971
000000000000c984         align      8
                     aLuBytesSSCopie:
000000000000c988         db         "%lu bytes (%s, %s) copied, %s, %s", 0      ; DATA XREF=print_xfer_stats+343
000000000000c9aa         align      16
                     aWarningSIsAZer:
000000000000c9b0         db         "warning: %s is a zero multiplier; use %s if that is intended", 0 ; DATA XREF=parse_integer+271
000000000000c9ed         align      16
                     aWarningWorking:
000000000000c9f0         db         "warning: working around lseek kernel bug for file (%s)\n  of mt_type=0x%0lx -- see <sys/mtio.h> for the list of types", 0 ; DATA XREF=skip_via_lseek+182
000000000000ca65         align      8
                     aLuluRecordsInn:
000000000000ca68         db         "%lu+%lu records in\n%lu+%lu records out\n", 0 ; DATA XREF=print_stats.part.2+69
                     aWarningPartial:
000000000000ca90         db         "warning: partial read (%lu bytes); suggest iflag=fullblock", 0 ; DATA XREF=iread+191
000000000000cacb         align      16
                     aWarningPartial_cad0:        // aWarningPartial
000000000000cad0         db         "warning: partial read (%lu byte); suggest iflag=fullblock", 0 ; DATA XREF=iread+198
000000000000cb0a         align      16
                     aMemoryExhauste:
000000000000cb10         db         "memory exhausted by input buffer of size %lu bytes (%s)", 0 ; DATA XREF=alloc_ibuf.part.4+136
                     aMemoryExhauste_cb48:        // aMemoryExhauste
000000000000cb48         db         "memory exhausted by output buffer of size %lu bytes (%s)", 0 ; DATA XREF=alloc_obuf.part.5+136
000000000000cb81         align      8
                     aFailedToTurnOf:
000000000000cb88         db         "failed to turn off O_DIRECT: %s", 0        ; DATA XREF=iwrite.constprop.7+457
                     aTrySHelpForMor:
000000000000cba8         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
000000000000cbcf         align      16
                     aUsageSOperandn:
000000000000cbd0         db         "Usage: %s [OPERAND]...\n  or:  %s OPTION\n", 0 ; DATA XREF=usage+93
000000000000cbf9         align      1024
                     aCopyAFileConve:
000000000000cc00         db         "Copy a file, converting and formatting according to the operands.\n\n  bs=BYTES        read and write up to BYTES bytes at a time (default: 512);\n                  overrides ibs and obs\n  cbs=BYTES       convert BYTES bytes at a time\n  conv=CONVS      conver" ; DATA XREF=usage+135
000000000000cd00         db         "t the file as per the comma separated symbol list\n  count=N         copy only N input blocks\n  ibs=BYTES       read up to BYTES bytes at a time (default: 512)\n", 0
                     aIffileReadFrom:
000000000000cda0         db         "  if=FILE         read from FILE instead of stdin\n  iflag=FLAGS     read as per the comma separated symbol list\n  obs=BYTES       write BYTES bytes at a time (default: 512)\n  of=FILE         write to FILE instead of stdout\n  oflag=FLAGS     write as per th" ; DATA XREF=usage+172
000000000000cea0         db         "e comma separated symbol list\n  seek=N          skip N obs-sized blocks at start of output\n  skip=N          skip N ibs-sized blocks at start of input\n  status=LEVEL    The LEVEL of information to print to stderr;\n                  'none' suppresses everyt"
000000000000cfa0         db         "hing but error messages,\n                  'noxfer' suppresses the final transfer statistics,\n                  'progress' shows periodic transfer statistics\n", 0
000000000000d03f         align      64
                     aNnAndBytesMayB:
000000000000d040         db         "\nN and BYTES may be followed by the following multiplicative suffixes:\nc=1, w=2, b=512, kB=1000, K=1024, MB=1000*1000, M=1024*1024, xM=M,\nGB=1000*1000*1000, G=1024*1024*1024, and so on for T, P, E, Z, Y.\nBinary prefixes can be used, too: KiB=K, MiB=M, and " ; DATA XREF=usage+209
000000000000d140         db         "so on.\n\nEach CONV symbol may be:\n\n", 0
000000000000d163         align      8
                     aAsciiFromEbcdi:
000000000000d168         db         "  ascii     from EBCDIC to ASCII\n  ebcdic    from ASCII to EBCDIC\n  ibm       from ASCII to alternate EBCDIC\n  block     pad newline-terminated records with spaces to cbs-size\n  unblock   replace trailing spaces in cbs-size records with newline\n  lcase    " ; DATA XREF=usage+246
000000000000d268         db         " change upper case to lower case\n  ucase     change lower case to upper case\n  sparse    try to seek rather than write the output for NUL input blocks\n  swab      swap every pair of input bytes\n  sync      pad every input block with NULs to ibs-size; when "
000000000000d368         db         "used\n            with block or unblock, pad with spaces rather than NULs\n", 0
000000000000d3b2         align      8
                     aExclFailIfTheO:
000000000000d3b8         db         "  excl      fail if the output file already exists\n  nocreat   do not create the output file\n  notrunc   do not truncate the output file\n  noerror   continue after read errors\n  fdatasync  physically write output file data before finishing\n  fsync     like" ; DATA XREF=usage+283
000000000000d4b8         db         "wise, but also write metadata\n", 0
000000000000d4d7         align      8
                     aNeachFlagSymbo:
000000000000d4d8         db         "\nEach FLAG symbol may be:\n\n  append    append mode (makes sense only for output; conv=notrunc suggested)\n", 0 ; DATA XREF=usage+320
000000000000d542         align      8
                     aDirectUseDirec:
000000000000d548         db         "  direct    use direct I/O for data\n", 0  ; DATA XREF=usage+357
000000000000d56d         align      16
                     aDirectoryFailU:
000000000000d570         db         "  directory  fail unless a directory\n", 0 ; DATA XREF=usage+394
000000000000d596         align      8
                     aDsyncUseSynchr:
000000000000d598         db         "  dsync     use synchronized I/O for data\n", 0 ; DATA XREF=usage+431
000000000000d5c3         align      8
                     aSyncLikewiseBu:
000000000000d5c8         db         "  sync      likewise, but also for metadata\n", 0 ; DATA XREF=usage+468
000000000000d5f5         align      8
                     aFullblockAccum:
000000000000d5f8         db         "  fullblock  accumulate full blocks of input (iflag only)\n", 0 ; DATA XREF=usage+505
000000000000d633         align      8
                     aNonblockUseNon:
000000000000d638         db         "  nonblock  use non-blocking I/O\n", 0     ; DATA XREF=usage+542
000000000000d65a         align      32
                     aNoatimeDoNotUp:
000000000000d660         db         "  noatime   do not update access time\n", 0 ; DATA XREF=usage+579
000000000000d687         align      8
                     aNocacheRequest:
000000000000d688         db         "  nocache   Request to drop cache.  See also oflag=sync\n", 0 ; DATA XREF=usage+616
000000000000d6c1         align      8
                     aNocttyDoNotAss:
000000000000d6c8         db         "  noctty    do not assign controlling terminal from file\n", 0 ; DATA XREF=usage+653
000000000000d702         align      8
                     aNofollowDoNotF:
000000000000d708         db         "  nofollow  do not follow symlinks\n", 0   ; DATA XREF=usage+690
000000000000d72c         align      16
                     aCountbytesTrea:
000000000000d730         db         "  count_bytes  treat 'count=N' as a byte count (iflag only)\n", 0 ; DATA XREF=usage+727
000000000000d76d         align      16
                     aSkipbytesTreat:
000000000000d770         db         "  skip_bytes  treat 'skip=N' as a byte count (iflag only)\n", 0 ; DATA XREF=usage+764
000000000000d7ab         align      16
                     aSeekbytesTreat:
000000000000d7b0         db         "  seek_bytes  treat 'seek=N' as a byte count (oflag only)\n", 0 ; DATA XREF=usage+801
000000000000d7eb         align      16
                     aNsendingASSign:
000000000000d7f0         db         "\nSending a %s signal to a running 'dd' process makes it\nprint I/O statistics to standard error and then resume copying.\n\nOptions are:\n\n", 0 ; DATA XREF=usage+831
                     aHelpDisplayThi:
000000000000d878         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+879
000000000000d8a5         align      8
                     aVersionOutputV:
000000000000d8a8         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+916
000000000000d8de         align      32
                     aHttpswwwgnuorg:
000000000000d8e0         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+1167, usage+1267, usage+1360, usage+1470, emit_bug_reporting_address+61
                     aReportAnyTrans:
000000000000d908         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+1511
000000000000d94f         align      16
                     aOrAvailableLoc:
000000000000d950         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+1310
000000000000d983         align      8
                     aCannotCombineA:
000000000000d988         db         "cannot combine any two of {ascii,ebcdic,ibm}", 0 ; DATA XREF=main+7516
000000000000d9b5         align      8
                     aCannotCombineB:
000000000000d9b8         db         "cannot combine block and unblock", 0       ; DATA XREF=main+7047
000000000000d9d9         align      32
                     aCannotCombineL:
000000000000d9e0         db         "cannot combine lcase and ucase", 0         ; DATA XREF=main+7083
000000000000d9ff         align      512
                     aCannotCombineE:
000000000000da00         db         "cannot combine excl and nocreat", 0        ; DATA XREF=main+7137
                     aCannotCombineD:
000000000000da20         db         "cannot combine direct and nocache", 0      ; DATA XREF=main+7173
000000000000da42         align      8
                     aOffsetTooLarge:
000000000000da48         db         "offset too large: cannot truncate to a length of seek=%lu (%lu-byte) blocks", 0 ; DATA XREF=main+7273
000000000000da94         align      8
                     aFailedToTrunca_da98:        // aFailedToTrunca
000000000000da98         db         "failed to truncate to %lu bytes in output file %s", 0 ; DATA XREF=main+5738
000000000000daca         align      16
                     aSCannotSkipToS:
000000000000dad0         db         "%s: cannot skip to specified offset", 0    ; DATA XREF=main+3193
000000000000daf4         align      8
                     aOffsetOverflow:
000000000000daf8         db         "offset overflow while reading file %s", 0  ; DATA XREF=main+4043
000000000000db1e         align      32
                     aWarningInvalid:
000000000000db20         db         "warning: invalid file offset after failed read", 0 ; DATA XREF=main+5796
000000000000db4f         align      16
                     aCannotWorkArou:
000000000000db50         db         "cannot work around kernel bug after all", 0 ; DATA XREF=main+4582
                     aFailedToTrunca:
000000000000db78         db         "failed to truncate to %ld bytes in output file %s", 0 ; DATA XREF=main+6275
000000000000dbaa         align      16
                     aFailedToDiscar:
000000000000dbb0         db         "failed to discard cache for: %s", 0        ; DATA XREF=main+5120, main+5591
000000000000dbd0         db  0x00 ; '.'
000000000000dbd1         db  0x00 ; '.'
000000000000dbd2         db  0x00 ; '.'
000000000000dbd3         db  0x00 ; '.'
000000000000dbd4         db  0x00 ; '.'
000000000000dbd5         db  0x00 ; '.'
000000000000dbd6         db  0x00 ; '.'
000000000000dbd7         db  0x00 ; '.'
000000000000dbd8         db  0x00 ; '.'
000000000000dbd9         db  0x00 ; '.'
000000000000dbda         db  0x00 ; '.'
000000000000dbdb         db  0x00 ; '.'
000000000000dbdc         db  0x00 ; '.'
000000000000dbdd         db  0x00 ; '.'
000000000000dbde         db  0x00 ; '.'
000000000000dbdf         db  0x00 ; '.'
                     ebcdic_to_ascii:
000000000000dbe0         db  0x00 ; '.'                                         ; DATA XREF=main+1236
000000000000dbe1         db  0x01 ; '.'
000000000000dbe2         db  0x02 ; '.'
000000000000dbe3         db  0x03 ; '.'
000000000000dbe4         db  0x9c ; '.'
000000000000dbe5         db  0x09 ; '.'
000000000000dbe6         db  0x86 ; '.'
000000000000dbe7         db  0x7f ; '.'
000000000000dbe8         db  0x97 ; '.'
000000000000dbe9         db  0x8d ; '.'
000000000000dbea         db  0x8e ; '.'
000000000000dbeb         db  0x0b ; '.'
000000000000dbec         db  0x0c ; '.'
000000000000dbed         db  0x0d ; '.'
000000000000dbee         db  0x0e ; '.'
000000000000dbef         db  0x0f ; '.'
000000000000dbf0         db  0x10 ; '.'
000000000000dbf1         db  0x11 ; '.'
000000000000dbf2         db  0x12 ; '.'
000000000000dbf3         db  0x13 ; '.'
000000000000dbf4         db  0x9d ; '.'
000000000000dbf5         db  0x85 ; '.'
000000000000dbf6         db  0x08 ; '.'
000000000000dbf7         db  0x87 ; '.'
000000000000dbf8         db  0x18 ; '.'
000000000000dbf9         db  0x19 ; '.'
000000000000dbfa         db  0x92 ; '.'
000000000000dbfb         db  0x8f ; '.'
000000000000dbfc         db  0x1c ; '.'
000000000000dbfd         db  0x1d ; '.'
000000000000dbfe         db  0x1e ; '.'
000000000000dbff         db  0x1f ; '.'
000000000000dc00         db  0x80 ; '.'
000000000000dc01         db  0x81 ; '.'
000000000000dc02         db  0x82 ; '.'
000000000000dc03         db  0x83 ; '.'
000000000000dc04         db  0x84 ; '.'
000000000000dc05         db  0x0a ; '.'
000000000000dc06         db  0x17 ; '.'
000000000000dc07         db  0x1b ; '.'
000000000000dc08         db  0x88 ; '.'
000000000000dc09         db  0x89 ; '.'
000000000000dc0a         db  0x8a ; '.'
000000000000dc0b         db  0x8b ; '.'
000000000000dc0c         db  0x8c ; '.'
000000000000dc0d         db  0x05 ; '.'
000000000000dc0e         db  0x06 ; '.'
000000000000dc0f         db  0x07 ; '.'
000000000000dc10         db  0x90 ; '.'
000000000000dc11         db  0x91 ; '.'
000000000000dc12         db  0x16 ; '.'
000000000000dc13         db  0x93 ; '.'
000000000000dc14         db  0x94 ; '.'
000000000000dc15         db  0x95 ; '.'
000000000000dc16         db  0x96 ; '.'
000000000000dc17         db  0x04 ; '.'
000000000000dc18         db  0x98 ; '.'
000000000000dc19         db  0x99 ; '.'
000000000000dc1a         db  0x9a ; '.'
000000000000dc1b         db  0x9b ; '.'
000000000000dc1c         db  0x14 ; '.'
000000000000dc1d         db  0x15 ; '.'
000000000000dc1e         db  0x9e ; '.'
000000000000dc1f         db  0x1a ; '.'
000000000000dc20         db  0x20 ; ' '
000000000000dc21         db  0xa0 ; '.'
000000000000dc22         db  0xa1 ; '.'
000000000000dc23         db  0xa2 ; '.'
000000000000dc24         db  0xa3 ; '.'
000000000000dc25         db  0xa4 ; '.'
000000000000dc26         db  0xa5 ; '.'
000000000000dc27         db  0xa6 ; '.'
000000000000dc28         db  0xa7 ; '.'
000000000000dc29         db  0xa8 ; '.'
000000000000dc2a         db  0xd5 ; '.'
000000000000dc2b         db  0x2e ; '.'
000000000000dc2c         db  0x3c ; '<'
000000000000dc2d         db  0x28 ; '('
000000000000dc2e         db  0x2b ; '+'
000000000000dc2f         db  0x7c ; '|'
000000000000dc30         db  0x26 ; '&'
000000000000dc31         db  0xa9 ; '.'
000000000000dc32         db  0xaa ; '.'
000000000000dc33         db  0xab ; '.'
000000000000dc34         db  0xac ; '.'
000000000000dc35         db  0xad ; '.'
000000000000dc36         db  0xae ; '.'
000000000000dc37         db  0xaf ; '.'
000000000000dc38         db  0xb0 ; '.'
000000000000dc39         db  0xb1 ; '.'
000000000000dc3a         db  0x21 ; '!'
000000000000dc3b         db  0x24 ; '$'
000000000000dc3c         db  0x2a ; '*'
000000000000dc3d         db  0x29 ; ')'
000000000000dc3e         db  0x3b ; ';'
000000000000dc3f         db  0x7e ; '~'
000000000000dc40         db  0x2d ; '-'
000000000000dc41         db  0x2f ; '/'
000000000000dc42         db  0xb2 ; '.'
000000000000dc43         db  0xb3 ; '.'
000000000000dc44         db  0xb4 ; '.'
000000000000dc45         db  0xb5 ; '.'
000000000000dc46         db  0xb6 ; '.'
000000000000dc47         db  0xb7 ; '.'
000000000000dc48         db  0xb8 ; '.'
000000000000dc49         db  0xb9 ; '.'
000000000000dc4a         db  0xcb ; '.'
000000000000dc4b         db  0x2c ; ','
000000000000dc4c         db  0x25 ; '%'
000000000000dc4d         db  0x5f ; '_'
000000000000dc4e         db  0x3e ; '>'
000000000000dc4f         db  0x3f ; '?'
000000000000dc50         db  0xba ; '.'
000000000000dc51         db  0xbb ; '.'
000000000000dc52         db  0xbc ; '.'
000000000000dc53         db  0xbd ; '.'
000000000000dc54         db  0xbe ; '.'
000000000000dc55         db  0xbf ; '.'
000000000000dc56         db  0xc0 ; '.'
000000000000dc57         db  0xc1 ; '.'
000000000000dc58         db  0xc2 ; '.'
000000000000dc59         db  0x60 ; '`'
000000000000dc5a         db  0x3a ; ':'
000000000000dc5b         db  0x23 ; '#'
000000000000dc5c         db  0x40 ; '@'
000000000000dc5d         db  0x27 ; '''
000000000000dc5e         db  0x3d ; '='
000000000000dc5f         db  0x22 ; '"'
000000000000dc60         db  0xc3 ; '.'
000000000000dc61         db  0x61 ; 'a'
000000000000dc62         db  0x62 ; 'b'
000000000000dc63         db  0x63 ; 'c'
000000000000dc64         db  0x64 ; 'd'
000000000000dc65         db  0x65 ; 'e'
000000000000dc66         db  0x66 ; 'f'
000000000000dc67         db  0x67 ; 'g'
000000000000dc68         db  0x68 ; 'h'
000000000000dc69         db  0x69 ; 'i'
000000000000dc6a         db  0xc4 ; '.'
000000000000dc6b         db  0xc5 ; '.'
000000000000dc6c         db  0xc6 ; '.'
000000000000dc6d         db  0xc7 ; '.'
000000000000dc6e         db  0xc8 ; '.'
000000000000dc6f         db  0xc9 ; '.'
000000000000dc70         db  0xca ; '.'
000000000000dc71         db  0x6a ; 'j'
000000000000dc72         db  0x6b ; 'k'
000000000000dc73         db  0x6c ; 'l'
000000000000dc74         db  0x6d ; 'm'
000000000000dc75         db  0x6e ; 'n'
000000000000dc76         db  0x6f ; 'o'
000000000000dc77         db  0x70 ; 'p'
000000000000dc78         db  0x71 ; 'q'
000000000000dc79         db  0x72 ; 'r'
000000000000dc7a         db  0x5e ; '^'
000000000000dc7b         db  0xcc ; '.'
000000000000dc7c         db  0xcd ; '.'
000000000000dc7d         db  0xce ; '.'
000000000000dc7e         db  0xcf ; '.'
000000000000dc7f         db  0xd0 ; '.'
000000000000dc80         db  0xd1 ; '.'
000000000000dc81         db  0xe5 ; '.'
000000000000dc82         db  0x73 ; 's'
000000000000dc83         db  0x74 ; 't'
000000000000dc84         db  0x75 ; 'u'
000000000000dc85         db  0x76 ; 'v'
000000000000dc86         db  0x77 ; 'w'
000000000000dc87         db  0x78 ; 'x'
000000000000dc88         db  0x79 ; 'y'
000000000000dc89         db  0x7a ; 'z'
000000000000dc8a         db  0xd2 ; '.'
000000000000dc8b         db  0xd3 ; '.'
000000000000dc8c         db  0xd4 ; '.'
000000000000dc8d         db  0x5b ; '['
000000000000dc8e         db  0xd6 ; '.'
000000000000dc8f         db  0xd7 ; '.'
000000000000dc90         db  0xd8 ; '.'
000000000000dc91         db  0xd9 ; '.'
000000000000dc92         db  0xda ; '.'
000000000000dc93         db  0xdb ; '.'
000000000000dc94         db  0xdc ; '.'
000000000000dc95         db  0xdd ; '.'
000000000000dc96         db  0xde ; '.'
000000000000dc97         db  0xdf ; '.'
000000000000dc98         db  0xe0 ; '.'
000000000000dc99         db  0xe1 ; '.'
000000000000dc9a         db  0xe2 ; '.'
000000000000dc9b         db  0xe3 ; '.'
000000000000dc9c         db  0xe4 ; '.'
000000000000dc9d         db  0x5d ; ']'
000000000000dc9e         db  0xe6 ; '.'
000000000000dc9f         db  0xe7 ; '.'
000000000000dca0         db  0x7b ; '{'
000000000000dca1         db  0x41 ; 'A'
000000000000dca2         db  0x42 ; 'B'
000000000000dca3         db  0x43 ; 'C'
000000000000dca4         db  0x44 ; 'D'
000000000000dca5         db  0x45 ; 'E'
000000000000dca6         db  0x46 ; 'F'
000000000000dca7         db  0x47 ; 'G'
000000000000dca8         db  0x48 ; 'H'
000000000000dca9         db  0x49 ; 'I'
000000000000dcaa         db  0xe8 ; '.'
000000000000dcab         db  0xe9 ; '.'
000000000000dcac         db  0xea ; '.'
000000000000dcad         db  0xeb ; '.'
000000000000dcae         db  0xec ; '.'
000000000000dcaf         db  0xed ; '.'
000000000000dcb0         db  0x7d ; '}'
000000000000dcb1         db  0x4a ; 'J'
000000000000dcb2         db  0x4b ; 'K'
000000000000dcb3         db  0x4c ; 'L'
000000000000dcb4         db  0x4d ; 'M'
000000000000dcb5         db  0x4e ; 'N'
000000000000dcb6         db  0x4f ; 'O'
000000000000dcb7         db  0x50 ; 'P'
000000000000dcb8         db  0x51 ; 'Q'
000000000000dcb9         db  0x52 ; 'R'
000000000000dcba         db  0xee ; '.'
000000000000dcbb         db  0xef ; '.'
000000000000dcbc         db  0xf0 ; '.'
000000000000dcbd         db  0xf1 ; '.'
000000000000dcbe         db  0xf2 ; '.'
000000000000dcbf         db  0xf3 ; '.'
000000000000dcc0         db  0x5c ; '\'
000000000000dcc1         db  0x9f ; '.'
000000000000dcc2         db  0x53 ; 'S'
000000000000dcc3         db  0x54 ; 'T'


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_dcc4:
000000000000dcc4         push       rbp
000000000000dcc5         push       rsi
000000000000dcc6         push       rdi
000000000000dcc7         pop        rax
000000000000dcc8         pop        rcx
000000000000dcc9         pop        rdx
000000000000dcca         hlt
                        ; endp
000000000000dccb         db  0xf5 ; '.'
000000000000dccc         db  0xf6 ; '.'
000000000000dccd         db  0xf7 ; '.'
000000000000dcce         db  0xf8 ; '.'
000000000000dccf         db  0xf9 ; '.'
000000000000dcd0         db  0x30 ; '0'
000000000000dcd1         db  0x31 ; '1'
000000000000dcd2         db  0x32 ; '2'
000000000000dcd3         db  0x33 ; '3'
000000000000dcd4         db  0x34 ; '4'
000000000000dcd5         db  0x35 ; '5'
000000000000dcd6         db  0x36 ; '6'
000000000000dcd7         db  0x37 ; '7'
000000000000dcd8         db  0x38 ; '8'
000000000000dcd9         db  0x39 ; '9'
000000000000dcda         db  0xfa ; '.'
000000000000dcdb         db  0xfb ; '.'
000000000000dcdc         db  0xfc ; '.'
000000000000dcdd         db  0xfd ; '.'
000000000000dcde         db  0xfe ; '.'
000000000000dcdf         db  0xff ; '.'
                     ascii_to_ibm:
000000000000dce0         db  0x00 ; '.'                                         ; DATA XREF=main+4321
000000000000dce1         db  0x01 ; '.'
000000000000dce2         db  0x02 ; '.'
000000000000dce3         db  0x03 ; '.'
000000000000dce4         db  0x37 ; '7'
000000000000dce5         db  0x2d ; '-'
000000000000dce6         db  0x2e ; '.'
000000000000dce7         db  0x2f ; '/'
000000000000dce8         db  0x16 ; '.'
000000000000dce9         db  0x05 ; '.'
000000000000dcea         db  0x25 ; '%'
000000000000dceb         db  0x0b ; '.'
000000000000dcec         db  0x0c ; '.'
000000000000dced         db  0x0d ; '.'
000000000000dcee         db  0x0e ; '.'
000000000000dcef         db  0x0f ; '.'
000000000000dcf0         db  0x10 ; '.'
000000000000dcf1         db  0x11 ; '.'
000000000000dcf2         db  0x12 ; '.'
000000000000dcf3         db  0x13 ; '.'
000000000000dcf4         db  0x3c ; '<'
000000000000dcf5         db  0x3d ; '='
000000000000dcf6         db  0x32 ; '2'
000000000000dcf7         db  0x26 ; '&'
000000000000dcf8         db  0x18 ; '.'
000000000000dcf9         db  0x19 ; '.'
000000000000dcfa         db  0x3f ; '?'
000000000000dcfb         db  0x27 ; '''
000000000000dcfc         db  0x1c ; '.'
000000000000dcfd         db  0x1d ; '.'
000000000000dcfe         db  0x1e ; '.'
000000000000dcff         db  0x1f ; '.'
000000000000dd00         db  0x40 ; '@'
000000000000dd01         db  0x5a ; 'Z'
000000000000dd02         db  0x7f ; '.'
000000000000dd03         db  0x7b ; '{'
000000000000dd04         db  0x5b ; '['
000000000000dd05         db  0x6c ; 'l'
000000000000dd06         db  0x50 ; 'P'
000000000000dd07         db  0x7d ; '}'
000000000000dd08         db  0x4d ; 'M'
000000000000dd09         db  0x5d ; ']'
000000000000dd0a         db  0x5c ; '\'
000000000000dd0b         db  0x4e ; 'N'
000000000000dd0c         db  0x6b ; 'k'
000000000000dd0d         db  0x60 ; '`'
000000000000dd0e         db  0x4b ; 'K'
000000000000dd0f         db  0x61 ; 'a'
000000000000dd10         db  0xf0 ; '.'
000000000000dd11         db  0xf1 ; '.'
000000000000dd12         db  0xf2 ; '.'
000000000000dd13         db  0xf3 ; '.'
000000000000dd14         db  0xf4 ; '.'
000000000000dd15         db  0xf5 ; '.'
000000000000dd16         db  0xf6 ; '.'
000000000000dd17         db  0xf7 ; '.'
000000000000dd18         db  0xf8 ; '.'
000000000000dd19         db  0xf9 ; '.'
000000000000dd1a         db  0x7a ; 'z'
000000000000dd1b         db  0x5e ; '^'
000000000000dd1c         db  0x4c ; 'L'
000000000000dd1d         db  0x7e ; '~'
000000000000dd1e         db  0x6e ; 'n'
000000000000dd1f         db  0x6f ; 'o'
000000000000dd20         db  0x7c ; '|'
000000000000dd21         db  0xc1 ; '.'
000000000000dd22         db  0xc2 ; '.'
000000000000dd23         db  0xc3 ; '.'
000000000000dd24         db  0xc4 ; '.'
000000000000dd25         db  0xc5 ; '.'
000000000000dd26         db  0xc6 ; '.'
000000000000dd27         db  0xc7 ; '.'
000000000000dd28         db  0xc8 ; '.'
000000000000dd29         db  0xc9 ; '.'
000000000000dd2a         db  0xd1 ; '.'
000000000000dd2b         db  0xd2 ; '.'
000000000000dd2c         db  0xd3 ; '.'
000000000000dd2d         db  0xd4 ; '.'
000000000000dd2e         db  0xd5 ; '.'
000000000000dd2f         db  0xd6 ; '.'
000000000000dd30         db  0xd7 ; '.'
000000000000dd31         db  0xd8 ; '.'
000000000000dd32         db  0xd9 ; '.'
000000000000dd33         db  0xe2 ; '.'
000000000000dd34         db  0xe3 ; '.'
000000000000dd35         db  0xe4 ; '.'
000000000000dd36         db  0xe5 ; '.'
000000000000dd37         db  0xe6 ; '.'
000000000000dd38         db  0xe7 ; '.'
000000000000dd39         db  0xe8 ; '.'
000000000000dd3a         db  0xe9 ; '.'
000000000000dd3b         db  0xad ; '.'
000000000000dd3c         db  0xe0 ; '.'
000000000000dd3d         db  0xbd ; '.'
000000000000dd3e         db  0x5f ; '_'
000000000000dd3f         db  0x6d ; 'm'
000000000000dd40         db  0x79 ; 'y'
000000000000dd41         db  0x81 ; '.'
000000000000dd42         db  0x82 ; '.'
000000000000dd43         db  0x83 ; '.'
000000000000dd44         db  0x84 ; '.'
000000000000dd45         db  0x85 ; '.'
000000000000dd46         db  0x86 ; '.'
000000000000dd47         db  0x87 ; '.'
000000000000dd48         db  0x88 ; '.'
000000000000dd49         db  0x89 ; '.'
000000000000dd4a         db  0x91 ; '.'
000000000000dd4b         db  0x92 ; '.'
000000000000dd4c         db  0x93 ; '.'
000000000000dd4d         db  0x94 ; '.'
000000000000dd4e         db  0x95 ; '.'
000000000000dd4f         db  0x96 ; '.'
000000000000dd50         db  0x97 ; '.'
000000000000dd51         db  0x98 ; '.'
000000000000dd52         db  0x99 ; '.'
000000000000dd53         db  0xa2 ; '.'
000000000000dd54         db  0xa3 ; '.'
000000000000dd55         db  0xa4 ; '.'
000000000000dd56         db  0xa5 ; '.'
000000000000dd57         db  0xa6 ; '.'
000000000000dd58         db  0xa7 ; '.'
000000000000dd59         db  0xa8 ; '.'
000000000000dd5a         db  0xa9 ; '.'
000000000000dd5b         db  0xc0 ; '.'
000000000000dd5c         db  0x4f ; 'O'
000000000000dd5d         db  0xd0 ; '.'
000000000000dd5e         db  0xa1 ; '.'
000000000000dd5f         db  0x07 ; '.'
000000000000dd60         db  0x20 ; ' '
000000000000dd61         db  0x21 ; '!'
000000000000dd62         db  0x22 ; '"'
000000000000dd63         db  0x23 ; '#'
000000000000dd64         db  0x24 ; '$'
000000000000dd65         db  0x15 ; '.'
000000000000dd66         db  0x06 ; '.'
000000000000dd67         db  0x17 ; '.'
000000000000dd68         db  0x28 ; '('
000000000000dd69         db  0x29 ; ')'
000000000000dd6a         db  0x2a ; '*'
000000000000dd6b         db  0x2b ; '+'
000000000000dd6c         db  0x2c ; ','
000000000000dd6d         db  0x09 ; '.'
000000000000dd6e         db  0x0a ; '.'
000000000000dd6f         db  0x1b ; '.'
000000000000dd70         db  0x30 ; '0'
000000000000dd71         db  0x31 ; '1'
000000000000dd72         db  0x1a ; '.'
000000000000dd73         db  0x33 ; '3'
000000000000dd74         db  0x34 ; '4'
000000000000dd75         db  0x35 ; '5'
000000000000dd76         db  0x36 ; '6'
000000000000dd77         db  0x08 ; '.'
000000000000dd78         db  0x38 ; '8'
000000000000dd79         db  0x39 ; '9'
000000000000dd7a         db  0x3a ; ':'
000000000000dd7b         db  0x3b ; ';'
000000000000dd7c         db  0x04 ; '.'
000000000000dd7d         db  0x14 ; '.'
000000000000dd7e         db  0x3e ; '>'
000000000000dd7f         db  0xe1 ; '.'
000000000000dd80         db  0x41 ; 'A'
000000000000dd81         db  0x42 ; 'B'
000000000000dd82         db  0x43 ; 'C'
000000000000dd83         db  0x44 ; 'D'
000000000000dd84         db  0x45 ; 'E'
000000000000dd85         db  0x46 ; 'F'
000000000000dd86         db  0x47 ; 'G'
000000000000dd87         db  0x48 ; 'H'
000000000000dd88         db  0x49 ; 'I'
000000000000dd89         db  0x51 ; 'Q'
000000000000dd8a         db  0x52 ; 'R'
000000000000dd8b         db  0x53 ; 'S'
000000000000dd8c         db  0x54 ; 'T'
000000000000dd8d         db  0x55 ; 'U'
000000000000dd8e         db  0x56 ; 'V'
000000000000dd8f         db  0x57 ; 'W'
000000000000dd90         db  0x58 ; 'X'
000000000000dd91         db  0x59 ; 'Y'
000000000000dd92         db  0x62 ; 'b'
000000000000dd93         db  0x63 ; 'c'
000000000000dd94         db  0x64 ; 'd'
000000000000dd95         db  0x65 ; 'e'
000000000000dd96         db  0x66 ; 'f'
000000000000dd97         db  0x67 ; 'g'
000000000000dd98         db  0x68 ; 'h'
000000000000dd99         db  0x69 ; 'i'
000000000000dd9a         db  0x70 ; 'p'
000000000000dd9b         db  0x71 ; 'q'
000000000000dd9c         db  0x72 ; 'r'
000000000000dd9d         db  0x73 ; 's'
000000000000dd9e         db  0x74 ; 't'
000000000000dd9f         db  0x75 ; 'u'
000000000000dda0         db  0x76 ; 'v'
000000000000dda1         db  0x77 ; 'w'
000000000000dda2         db  0x78 ; 'x'
000000000000dda3         db  0x80 ; '.'
000000000000dda4         db  0x8a ; '.'
000000000000dda5         db  0x8b ; '.'
000000000000dda6         db  0x8c ; '.'
000000000000dda7         db  0x8d ; '.'
000000000000dda8         db  0x8e ; '.'
000000000000dda9         db  0x8f ; '.'
000000000000ddaa         db  0x90 ; '.'
000000000000ddab         db  0x9a ; '.'
000000000000ddac         db  0x9b ; '.'
000000000000ddad         db  0x9c ; '.'
000000000000ddae         db  0x9d ; '.'
000000000000ddaf         db  0x9e ; '.'
000000000000ddb0         db  0x9f ; '.'
000000000000ddb1         db  0xa0 ; '.'
000000000000ddb2         db  0xaa ; '.'
000000000000ddb3         db  0xab ; '.'
000000000000ddb4         db  0xac ; '.'
000000000000ddb5         db  0xad ; '.'
000000000000ddb6         db  0xae ; '.'
000000000000ddb7         db  0xaf ; '.'
000000000000ddb8         db  0xb0 ; '.'
000000000000ddb9         db  0xb1 ; '.'
000000000000ddba         db  0xb2 ; '.'
000000000000ddbb         db  0xb3 ; '.'
000000000000ddbc         db  0xb4 ; '.'
000000000000ddbd         db  0xb5 ; '.'
000000000000ddbe         db  0xb6 ; '.'
000000000000ddbf         db  0xb7 ; '.'
000000000000ddc0         db  0xb8 ; '.'
000000000000ddc1         db  0xb9 ; '.'
000000000000ddc2         db  0xba ; '.'
000000000000ddc3         db  0xbb ; '.'
000000000000ddc4         db  0xbc ; '.'
000000000000ddc5         db  0xbd ; '.'
000000000000ddc6         db  0xbe ; '.'
000000000000ddc7         db  0xbf ; '.'
000000000000ddc8         db  0xca ; '.'
000000000000ddc9         db  0xcb ; '.'
000000000000ddca         db  0xcc ; '.'
000000000000ddcb         db  0xcd ; '.'
000000000000ddcc         db  0xce ; '.'
000000000000ddcd         db  0xcf ; '.'
000000000000ddce         db  0xda ; '.'
000000000000ddcf         db  0xdb ; '.'
000000000000ddd0         db  0xdc ; '.'
000000000000ddd1         db  0xdd ; '.'
000000000000ddd2         db  0xde ; '.'
000000000000ddd3         db  0xdf ; '.'
000000000000ddd4         db  0xea ; '.'
000000000000ddd5         db  0xeb ; '.'
000000000000ddd6         db  0xec ; '.'
000000000000ddd7         db  0xed ; '.'
000000000000ddd8         db  0xee ; '.'
000000000000ddd9         db  0xef ; '.'
000000000000ddda         db  0xfa ; '.'
000000000000dddb         db  0xfb ; '.'
000000000000dddc         db  0xfc ; '.'
000000000000dddd         db  0xfd ; '.'
000000000000ddde         db  0xfe ; '.'
000000000000dddf         db  0xff ; '.'
                     ascii_to_ebcdic:
000000000000dde0         db  0x00 ; '.'                                         ; DATA XREF=main+1362
000000000000dde1         db  0x01 ; '.'
000000000000dde2         db  0x02 ; '.'
000000000000dde3         db  0x03 ; '.'
000000000000dde4         db  0x37 ; '7'
000000000000dde5         db  0x2d ; '-'
000000000000dde6         db  0x2e ; '.'
000000000000dde7         db  0x2f ; '/'
000000000000dde8         db  0x16 ; '.'
000000000000dde9         db  0x05 ; '.'
000000000000ddea         db  0x25 ; '%'
000000000000ddeb         db  0x0b ; '.'
000000000000ddec         db  0x0c ; '.'
000000000000dded         db  0x0d ; '.'
000000000000ddee         db  0x0e ; '.'
000000000000ddef         db  0x0f ; '.'
000000000000ddf0         db  0x10 ; '.'
000000000000ddf1         db  0x11 ; '.'
000000000000ddf2         db  0x12 ; '.'
000000000000ddf3         db  0x13 ; '.'
000000000000ddf4         db  0x3c ; '<'
000000000000ddf5         db  0x3d ; '='
000000000000ddf6         db  0x32 ; '2'
000000000000ddf7         db  0x26 ; '&'
000000000000ddf8         db  0x18 ; '.'
000000000000ddf9         db  0x19 ; '.'
000000000000ddfa         db  0x3f ; '?'
000000000000ddfb         db  0x27 ; '''
000000000000ddfc         db  0x1c ; '.'
000000000000ddfd         db  0x1d ; '.'
000000000000ddfe         db  0x1e ; '.'
000000000000ddff         db  0x1f ; '.'
000000000000de00         db  0x40 ; '@'
000000000000de01         db  0x5a ; 'Z'
000000000000de02         db  0x7f ; '.'
000000000000de03         db  0x7b ; '{'
000000000000de04         db  0x5b ; '['
000000000000de05         db  0x6c ; 'l'
000000000000de06         db  0x50 ; 'P'
000000000000de07         db  0x7d ; '}'
000000000000de08         db  0x4d ; 'M'
000000000000de09         db  0x5d ; ']'
000000000000de0a         db  0x5c ; '\'
000000000000de0b         db  0x4e ; 'N'
000000000000de0c         db  0x6b ; 'k'
000000000000de0d         db  0x60 ; '`'
000000000000de0e         db  0x4b ; 'K'
000000000000de0f         db  0x61 ; 'a'
000000000000de10         db  0xf0 ; '.'
000000000000de11         db  0xf1 ; '.'
000000000000de12         db  0xf2 ; '.'
000000000000de13         db  0xf3 ; '.'
000000000000de14         db  0xf4 ; '.'
000000000000de15         db  0xf5 ; '.'
000000000000de16         db  0xf6 ; '.'
000000000000de17         db  0xf7 ; '.'
000000000000de18         db  0xf8 ; '.'
000000000000de19         db  0xf9 ; '.'
000000000000de1a         db  0x7a ; 'z'
000000000000de1b         db  0x5e ; '^'
000000000000de1c         db  0x4c ; 'L'
000000000000de1d         db  0x7e ; '~'
000000000000de1e         db  0x6e ; 'n'
000000000000de1f         db  0x6f ; 'o'
000000000000de20         db  0x7c ; '|'
000000000000de21         db  0xc1 ; '.'
000000000000de22         db  0xc2 ; '.'
000000000000de23         db  0xc3 ; '.'
000000000000de24         db  0xc4 ; '.'
000000000000de25         db  0xc5 ; '.'
000000000000de26         db  0xc6 ; '.'
000000000000de27         db  0xc7 ; '.'
000000000000de28         db  0xc8 ; '.'
000000000000de29         db  0xc9 ; '.'
000000000000de2a         db  0xd1 ; '.'
000000000000de2b         db  0xd2 ; '.'
000000000000de2c         db  0xd3 ; '.'
000000000000de2d         db  0xd4 ; '.'
000000000000de2e         db  0xd5 ; '.'
000000000000de2f         db  0xd6 ; '.'
000000000000de30         db  0xd7 ; '.'
000000000000de31         db  0xd8 ; '.'
000000000000de32         db  0xd9 ; '.'
000000000000de33         db  0xe2 ; '.'
000000000000de34         db  0xe3 ; '.'
000000000000de35         db  0xe4 ; '.'
000000000000de36         db  0xe5 ; '.'
000000000000de37         db  0xe6 ; '.'
000000000000de38         db  0xe7 ; '.'
000000000000de39         db  0xe8 ; '.'
000000000000de3a         db  0xe9 ; '.'
000000000000de3b         db  0xad ; '.'
000000000000de3c         db  0xe0 ; '.'
000000000000de3d         db  0xbd ; '.'
000000000000de3e         db  0x9a ; '.'
000000000000de3f         db  0x6d ; 'm'
000000000000de40         db  0x79 ; 'y'
000000000000de41         db  0x81 ; '.'
000000000000de42         db  0x82 ; '.'
000000000000de43         db  0x83 ; '.'
000000000000de44         db  0x84 ; '.'
000000000000de45         db  0x85 ; '.'
000000000000de46         db  0x86 ; '.'
000000000000de47         db  0x87 ; '.'
000000000000de48         db  0x88 ; '.'
000000000000de49         db  0x89 ; '.'
000000000000de4a         db  0x91 ; '.'
000000000000de4b         db  0x92 ; '.'
000000000000de4c         db  0x93 ; '.'
000000000000de4d         db  0x94 ; '.'
000000000000de4e         db  0x95 ; '.'
000000000000de4f         db  0x96 ; '.'
000000000000de50         db  0x97 ; '.'
000000000000de51         db  0x98 ; '.'
000000000000de52         db  0x99 ; '.'
000000000000de53         db  0xa2 ; '.'
000000000000de54         db  0xa3 ; '.'
000000000000de55         db  0xa4 ; '.'
000000000000de56         db  0xa5 ; '.'
000000000000de57         db  0xa6 ; '.'
000000000000de58         db  0xa7 ; '.'
000000000000de59         db  0xa8 ; '.'
000000000000de5a         db  0xa9 ; '.'
000000000000de5b         db  0xc0 ; '.'
000000000000de5c         db  0x4f ; 'O'
000000000000de5d         db  0xd0 ; '.'
000000000000de5e         db  0x5f ; '_'
000000000000de5f         db  0x07 ; '.'
000000000000de60         db  0x20 ; ' '
000000000000de61         db  0x21 ; '!'
000000000000de62         db  0x22 ; '"'
000000000000de63         db  0x23 ; '#'
000000000000de64         db  0x24 ; '$'
000000000000de65         db  0x15 ; '.'
000000000000de66         db  0x06 ; '.'
000000000000de67         db  0x17 ; '.'
000000000000de68         db  0x28 ; '('
000000000000de69         db  0x29 ; ')'
000000000000de6a         db  0x2a ; '*'
000000000000de6b         db  0x2b ; '+'
000000000000de6c         db  0x2c ; ','
000000000000de6d         db  0x09 ; '.'
000000000000de6e         db  0x0a ; '.'
000000000000de6f         db  0x1b ; '.'
000000000000de70         db  0x30 ; '0'
000000000000de71         db  0x31 ; '1'
000000000000de72         db  0x1a ; '.'
000000000000de73         db  0x33 ; '3'
000000000000de74         db  0x34 ; '4'
000000000000de75         db  0x35 ; '5'
000000000000de76         db  0x36 ; '6'
000000000000de77         db  0x08 ; '.'
000000000000de78         db  0x38 ; '8'
000000000000de79         db  0x39 ; '9'
000000000000de7a         db  0x3a ; ':'
000000000000de7b         db  0x3b ; ';'
000000000000de7c         db  0x04 ; '.'
000000000000de7d         db  0x14 ; '.'
000000000000de7e         db  0x3e ; '>'
000000000000de7f         db  0xe1 ; '.'
000000000000de80         db  0x41 ; 'A'
000000000000de81         db  0x42 ; 'B'
000000000000de82         db  0x43 ; 'C'
000000000000de83         db  0x44 ; 'D'
000000000000de84         db  0x45 ; 'E'
000000000000de85         db  0x46 ; 'F'
000000000000de86         db  0x47 ; 'G'
000000000000de87         db  0x48 ; 'H'
000000000000de88         db  0x49 ; 'I'
000000000000de89         db  0x51 ; 'Q'
000000000000de8a         db  0x52 ; 'R'
000000000000de8b         db  0x53 ; 'S'
000000000000de8c         db  0x54 ; 'T'
000000000000de8d         db  0x55 ; 'U'
000000000000de8e         db  0x56 ; 'V'
000000000000de8f         db  0x57 ; 'W'
000000000000de90         db  0x58 ; 'X'
000000000000de91         db  0x59 ; 'Y'
000000000000de92         db  0x62 ; 'b'
000000000000de93         db  0x63 ; 'c'
000000000000de94         db  0x64 ; 'd'
000000000000de95         db  0x65 ; 'e'
000000000000de96         db  0x66 ; 'f'
000000000000de97         db  0x67 ; 'g'
000000000000de98         db  0x68 ; 'h'
000000000000de99         db  0x69 ; 'i'
000000000000de9a         db  0x70 ; 'p'
000000000000de9b         db  0x71 ; 'q'
000000000000de9c         db  0x72 ; 'r'
000000000000de9d         db  0x73 ; 's'
000000000000de9e         db  0x74 ; 't'
000000000000de9f         db  0x75 ; 'u'
000000000000dea0         db  0x76 ; 'v'
000000000000dea1         db  0x77 ; 'w'
000000000000dea2         db  0x78 ; 'x'
000000000000dea3         db  0x80 ; '.'
000000000000dea4         db  0x8a ; '.'
000000000000dea5         db  0x8b ; '.'
000000000000dea6         db  0x8c ; '.'
000000000000dea7         db  0x8d ; '.'
000000000000dea8         db  0x8e ; '.'
000000000000dea9         db  0x8f ; '.'
000000000000deaa         db  0x90 ; '.'
000000000000deab         db  0x6a ; 'j'
000000000000deac         db  0x9b ; '.'
000000000000dead         db  0x9c ; '.'
000000000000deae         db  0x9d ; '.'
000000000000deaf         db  0x9e ; '.'
000000000000deb0         db  0x9f ; '.'
000000000000deb1         db  0xa0 ; '.'
000000000000deb2         db  0xaa ; '.'
000000000000deb3         db  0xab ; '.'
000000000000deb4         db  0xac ; '.'
000000000000deb5         db  0x4a ; 'J'
000000000000deb6         db  0xae ; '.'
000000000000deb7         db  0xaf ; '.'
000000000000deb8         db  0xb0 ; '.'
000000000000deb9         db  0xb1 ; '.'
000000000000deba         db  0xb2 ; '.'
000000000000debb         db  0xb3 ; '.'
000000000000debc         db  0xb4 ; '.'
000000000000debd         db  0xb5 ; '.'
000000000000debe         db  0xb6 ; '.'
000000000000debf         db  0xb7 ; '.'
000000000000dec0         db  0xb8 ; '.'
000000000000dec1         db  0xb9 ; '.'
000000000000dec2         db  0xba ; '.'
000000000000dec3         db  0xbb ; '.'
000000000000dec4         db  0xbc ; '.'
000000000000dec5         db  0xa1 ; '.'
000000000000dec6         db  0xbe ; '.'
000000000000dec7         db  0xbf ; '.'
000000000000dec8         db  0xca ; '.'
000000000000dec9         db  0xcb ; '.'
000000000000deca         db  0xcc ; '.'
000000000000decb         db  0xcd ; '.'
000000000000decc         db  0xce ; '.'
000000000000decd         db  0xcf ; '.'
000000000000dece         db  0xda ; '.'
000000000000decf         db  0xdb ; '.'
000000000000ded0         db  0xdc ; '.'
000000000000ded1         db  0xdd ; '.'
000000000000ded2         db  0xde ; '.'
000000000000ded3         db  0xdf ; '.'
000000000000ded4         db  0xea ; '.'
000000000000ded5         db  0xeb ; '.'
000000000000ded6         db  0xec ; '.'
000000000000ded7         db  0xed ; '.'
000000000000ded8         db  0xee ; '.'
000000000000ded9         db  0xef ; '.'
000000000000deda         db  0xfa ; '.'
000000000000dedb         db  0xfb ; '.'
000000000000dedc         db  0xfc ; '.'
000000000000dedd         db  0xfd ; '.'
000000000000dede         db  0xfe ; '.'
000000000000dedf         db  0xff ; '.'
                     statuses:
000000000000dee0         db  0x6e ; 'n'                                         ; DATA XREF=main+3298
000000000000dee1         db  0x6f ; 'o'
000000000000dee2         db  0x6e ; 'n'
000000000000dee3         db  0x65 ; 'e'
000000000000dee4         db  0x00 ; '.'
000000000000dee5         db  0x00 ; '.'
000000000000dee6         db  0x00 ; '.'
000000000000dee7         db  0x00 ; '.'
000000000000dee8         db  0x00 ; '.'
000000000000dee9         db  0x00 ; '.'
000000000000deea         db  0x00 ; '.'
000000000000deeb         db  0x00 ; '.'
000000000000deec         db  0x01 ; '.'
000000000000deed         db  0x00 ; '.'
000000000000deee         db  0x00 ; '.'
000000000000deef         db  0x00 ; '.'
000000000000def0         db  0x6e ; 'n'
000000000000def1         db  0x6f ; 'o'
000000000000def2         db  0x78 ; 'x'
000000000000def3         db  0x66 ; 'f'
000000000000def4         db  0x65 ; 'e'
000000000000def5         db  0x72 ; 'r'
000000000000def6         db  0x00 ; '.'
000000000000def7         db  0x00 ; '.'
000000000000def8         db  0x00 ; '.'
000000000000def9         db  0x00 ; '.'
000000000000defa         db  0x00 ; '.'
000000000000defb         db  0x00 ; '.'
000000000000defc         db  0x02 ; '.'
000000000000defd         db  0x00 ; '.'
000000000000defe         db  0x00 ; '.'
000000000000deff         db  0x00 ; '.'
000000000000df00         db  0x70 ; 'p'
000000000000df01         db  0x72 ; 'r'
000000000000df02         db  0x6f ; 'o'
000000000000df03         db  0x67 ; 'g'
000000000000df04         db  0x72 ; 'r'
000000000000df05         db  0x65 ; 'e'
000000000000df06         db  0x73 ; 's'
000000000000df07         db  0x73 ; 's'
000000000000df08         db  0x00 ; '.'
000000000000df09         db  0x00 ; '.'
000000000000df0a         db  0x00 ; '.'
000000000000df0b         db  0x00 ; '.'
000000000000df0c         db  0x04 ; '.'
000000000000df0d         db  0x00 ; '.'
000000000000df0e         db  0x00 ; '.'
000000000000df0f         db  0x00 ; '.'
000000000000df10         db  0x00 ; '.'
000000000000df11         db  0x00 ; '.'
000000000000df12         db  0x00 ; '.'
000000000000df13         db  0x00 ; '.'
000000000000df14         db  0x00 ; '.'
000000000000df15         db  0x00 ; '.'
000000000000df16         db  0x00 ; '.'
000000000000df17         db  0x00 ; '.'
000000000000df18         db  0x00 ; '.'
000000000000df19         db  0x00 ; '.'
000000000000df1a         db  0x00 ; '.'
000000000000df1b         db  0x00 ; '.'
000000000000df1c         db  0x00 ; '.'
000000000000df1d         db  0x00 ; '.'
000000000000df1e         db  0x00 ; '.'
000000000000df1f         db  0x00 ; '.'
                     flags:
000000000000df20         db         "append", 0                                 ; DATA XREF=main+2758, main+2854
000000000000df27         db  0x00 ; '.'
000000000000df28         db  0x00 ; '.'
000000000000df29         db  0x00 ; '.'
000000000000df2a         db  0x00 ; '.'
000000000000df2b         db  0x00 ; '.'
000000000000df2c         db  0x00 ; '.'
000000000000df2d         db  0x04 ; '.'
000000000000df2e         db  0x00 ; '.'
000000000000df2f         db  0x00 ; '.'
000000000000df30         db  0x62 ; 'b'
000000000000df31         db  0x69 ; 'i'
000000000000df32         db  0x6e ; 'n'
000000000000df33         db  0x61 ; 'a'
000000000000df34         db  0x72 ; 'r'
000000000000df35         db  0x79 ; 'y'
000000000000df36         db  0x00 ; '.'
000000000000df37         db  0x00 ; '.'
000000000000df38         db  0x00 ; '.'
000000000000df39         db  0x00 ; '.'
000000000000df3a         db  0x00 ; '.'
000000000000df3b         db  0x00 ; '.'
000000000000df3c         db  0x00 ; '.'
000000000000df3d         db  0x00 ; '.'
000000000000df3e         db  0x00 ; '.'
000000000000df3f         db  0x00 ; '.'
000000000000df40         db  0x63 ; 'c'
000000000000df41         db  0x69 ; 'i'
000000000000df42         db  0x6f ; 'o'
000000000000df43         db  0x00 ; '.'
000000000000df44         db  0x00 ; '.'
000000000000df45         db  0x00 ; '.'
000000000000df46         db  0x00 ; '.'
000000000000df47         db  0x00 ; '.'
000000000000df48         db  0x00 ; '.'
000000000000df49         db  0x00 ; '.'
000000000000df4a         db  0x00 ; '.'
000000000000df4b         db  0x00 ; '.'
000000000000df4c         db  0x00 ; '.'
000000000000df4d         db  0x00 ; '.'
000000000000df4e         db  0x00 ; '.'
000000000000df4f         db  0x00 ; '.'
000000000000df50         db  0x64 ; 'd'
000000000000df51         db  0x69 ; 'i'
000000000000df52         db  0x72 ; 'r'
000000000000df53         db  0x65 ; 'e'
000000000000df54         db  0x63 ; 'c'
000000000000df55         db  0x74 ; 't'
000000000000df56         db  0x00 ; '.'
000000000000df57         db  0x00 ; '.'
000000000000df58         db  0x00 ; '.'
000000000000df59         db  0x00 ; '.'
000000000000df5a         db  0x00 ; '.'
000000000000df5b         db  0x00 ; '.'
000000000000df5c         db  0x00 ; '.'
000000000000df5d         db  0x40 ; '@'
000000000000df5e         db  0x00 ; '.'
000000000000df5f         db  0x00 ; '.'
000000000000df60         db  0x64 ; 'd'
000000000000df61         db  0x69 ; 'i'
000000000000df62         db  0x72 ; 'r'
000000000000df63         db  0x65 ; 'e'
000000000000df64         db  0x63 ; 'c'
000000000000df65         db  0x74 ; 't'
000000000000df66         db  0x6f ; 'o'
000000000000df67         db  0x72 ; 'r'
000000000000df68         db  0x79 ; 'y'
000000000000df69         db  0x00 ; '.'
000000000000df6a         db  0x00 ; '.'
000000000000df6b         db  0x00 ; '.'
000000000000df6c         db  0x00 ; '.'
000000000000df6d         db  0x00 ; '.'
000000000000df6e         db  0x01 ; '.'
000000000000df6f         db  0x00 ; '.'
000000000000df70         db  0x64 ; 'd'
000000000000df71         db  0x73 ; 's'
000000000000df72         db  0x79 ; 'y'
000000000000df73         db  0x6e ; 'n'
000000000000df74         db  0x63 ; 'c'
000000000000df75         db  0x00 ; '.'
000000000000df76         db  0x00 ; '.'
000000000000df77         db  0x00 ; '.'
000000000000df78         db  0x00 ; '.'
000000000000df79         db  0x00 ; '.'
000000000000df7a         db  0x00 ; '.'
000000000000df7b         db  0x00 ; '.'
000000000000df7c         db  0x00 ; '.'
000000000000df7d         db  0x10 ; '.'
000000000000df7e         db  0x00 ; '.'
000000000000df7f         db  0x00 ; '.'
000000000000df80         db  0x6e ; 'n'
000000000000df81         db  0x6f ; 'o'
000000000000df82         db  0x61 ; 'a'
000000000000df83         db  0x74 ; 't'
000000000000df84         db  0x69 ; 'i'
000000000000df85         db  0x6d ; 'm'
000000000000df86         db  0x65 ; 'e'
000000000000df87         db  0x00 ; '.'
000000000000df88         db  0x00 ; '.'
000000000000df89         db  0x00 ; '.'
000000000000df8a         db  0x00 ; '.'
000000000000df8b         db  0x00 ; '.'
000000000000df8c         db  0x00 ; '.'
000000000000df8d         db  0x00 ; '.'
000000000000df8e         db  0x04 ; '.'
000000000000df8f         db  0x00 ; '.'
000000000000df90         db  0x6e ; 'n'
000000000000df91         db  0x6f ; 'o'
000000000000df92         db  0x63 ; 'c'
000000000000df93         db  0x61 ; 'a'
000000000000df94         db  0x63 ; 'c'
000000000000df95         db  0x68 ; 'h'
000000000000df96         db  0x65 ; 'e'
000000000000df97         db  0x00 ; '.'
000000000000df98         db  0x00 ; '.'
000000000000df99         db  0x00 ; '.'
000000000000df9a         db  0x00 ; '.'
000000000000df9b         db  0x00 ; '.'
000000000000df9c         db  0x02 ; '.'
000000000000df9d         db  0x00 ; '.'
000000000000df9e         db  0x00 ; '.'
000000000000df9f         db  0x00 ; '.'
000000000000dfa0         db  0x6e ; 'n'
000000000000dfa1         db  0x6f ; 'o'
000000000000dfa2         db  0x63 ; 'c'
000000000000dfa3         db  0x74 ; 't'
000000000000dfa4         db  0x74 ; 't'
000000000000dfa5         db  0x79 ; 'y'
000000000000dfa6         db  0x00 ; '.'
000000000000dfa7         db  0x00 ; '.'
000000000000dfa8         db  0x00 ; '.'
000000000000dfa9         db  0x00 ; '.'
000000000000dfaa         db  0x00 ; '.'
000000000000dfab         db  0x00 ; '.'
000000000000dfac         db  0x00 ; '.'
000000000000dfad         db  0x01 ; '.'
000000000000dfae         db  0x00 ; '.'
000000000000dfaf         db  0x00 ; '.'
000000000000dfb0         db  0x6e ; 'n'
000000000000dfb1         db  0x6f ; 'o'
000000000000dfb2         db  0x66 ; 'f'
000000000000dfb3         db  0x6f ; 'o'
000000000000dfb4         db  0x6c ; 'l'
000000000000dfb5         db  0x6c ; 'l'
000000000000dfb6         db  0x6f ; 'o'
000000000000dfb7         db  0x77 ; 'w'
000000000000dfb8         db  0x00 ; '.'
000000000000dfb9         db  0x00 ; '.'
000000000000dfba         db  0x00 ; '.'
000000000000dfbb         db  0x00 ; '.'
000000000000dfbc         db  0x00 ; '.'
000000000000dfbd         db  0x00 ; '.'
000000000000dfbe         db  0x02 ; '.'
000000000000dfbf         db  0x00 ; '.'
000000000000dfc0         db  0x6e ; 'n'
000000000000dfc1         db  0x6f ; 'o'
000000000000dfc2         db  0x6c ; 'l'
000000000000dfc3         db  0x69 ; 'i'
000000000000dfc4         db  0x6e ; 'n'
000000000000dfc5         db  0x6b ; 'k'
000000000000dfc6         db  0x73 ; 's'
000000000000dfc7         db  0x00 ; '.'
000000000000dfc8         db  0x00 ; '.'
000000000000dfc9         db  0x00 ; '.'
000000000000dfca         db  0x00 ; '.'
000000000000dfcb         db  0x00 ; '.'
000000000000dfcc         db  0x00 ; '.'
000000000000dfcd         db  0x00 ; '.'
000000000000dfce         db  0x00 ; '.'
000000000000dfcf         db  0x00 ; '.'
000000000000dfd0         db  0x6e ; 'n'
000000000000dfd1         db  0x6f ; 'o'
000000000000dfd2         db  0x6e ; 'n'
000000000000dfd3         db  0x62 ; 'b'
000000000000dfd4         db  0x6c ; 'l'
000000000000dfd5         db  0x6f ; 'o'
000000000000dfd6         db  0x63 ; 'c'
000000000000dfd7         db  0x6b ; 'k'
000000000000dfd8         db  0x00 ; '.'
000000000000dfd9         db  0x00 ; '.'
000000000000dfda         db  0x00 ; '.'
000000000000dfdb         db  0x00 ; '.'
000000000000dfdc         db  0x00 ; '.'
000000000000dfdd         db  0x08 ; '.'
000000000000dfde         db  0x00 ; '.'
000000000000dfdf         db  0x00 ; '.'
000000000000dfe0         db  0x73 ; 's'
000000000000dfe1         db  0x79 ; 'y'
000000000000dfe2         db  0x6e ; 'n'
000000000000dfe3         db  0x63 ; 'c'
000000000000dfe4         db  0x00 ; '.'
000000000000dfe5         db  0x00 ; '.'
000000000000dfe6         db  0x00 ; '.'
000000000000dfe7         db  0x00 ; '.'
000000000000dfe8         db  0x00 ; '.'
000000000000dfe9         db  0x00 ; '.'
000000000000dfea         db  0x00 ; '.'
000000000000dfeb         db  0x00 ; '.'
000000000000dfec         db  0x00 ; '.'
000000000000dfed         db  0x10 ; '.'
000000000000dfee         db  0x10 ; '.'
000000000000dfef         db  0x00 ; '.'
000000000000dff0         db  0x74 ; 't'
000000000000dff1         db  0x65 ; 'e'
000000000000dff2         db  0x78 ; 'x'
000000000000dff3         db  0x74 ; 't'
000000000000dff4         db  0x00 ; '.'
000000000000dff5         db  0x00 ; '.'
000000000000dff6         db  0x00 ; '.'
000000000000dff7         db  0x00 ; '.'
000000000000dff8         db  0x00 ; '.'
000000000000dff9         db  0x00 ; '.'
000000000000dffa         db  0x00 ; '.'
000000000000dffb         db  0x00 ; '.'
000000000000dffc         db  0x00 ; '.'
000000000000dffd         db  0x00 ; '.'
000000000000dffe         db  0x00 ; '.'
000000000000dfff         db  0x00 ; '.'
000000000000e000         db  0x66 ; 'f'
000000000000e001         db  0x75 ; 'u'
000000000000e002         db  0x6c ; 'l'
000000000000e003         db  0x6c ; 'l'
000000000000e004         db  0x62 ; 'b'
000000000000e005         db  0x6c ; 'l'
000000000000e006         db  0x6f ; 'o'
000000000000e007         db  0x63 ; 'c'
000000000000e008         db  0x6b ; 'k'
000000000000e009         db  0x00 ; '.'
000000000000e00a         db  0x00 ; '.'
000000000000e00b         db  0x00 ; '.'
000000000000e00c         db  0x01 ; '.'
000000000000e00d         db  0x00 ; '.'
000000000000e00e         db  0x00 ; '.'
000000000000e00f         db  0x00 ; '.'
000000000000e010         db  0x63 ; 'c'
000000000000e011         db  0x6f ; 'o'
000000000000e012         db  0x75 ; 'u'
000000000000e013         db  0x6e ; 'n'
000000000000e014         db  0x74 ; 't'
000000000000e015         db  0x5f ; '_'
000000000000e016         db  0x62 ; 'b'
000000000000e017         db  0x79 ; 'y'
000000000000e018         db  0x74 ; 't'
000000000000e019         db  0x65 ; 'e'
000000000000e01a         db  0x73 ; 's'
000000000000e01b         db  0x00 ; '.'
000000000000e01c         db  0x04 ; '.'
000000000000e01d         db  0x00 ; '.'
000000000000e01e         db  0x00 ; '.'
000000000000e01f         db  0x00 ; '.'
000000000000e020         db  0x73 ; 's'
000000000000e021         db  0x6b ; 'k'
000000000000e022         db  0x69 ; 'i'
000000000000e023         db  0x70 ; 'p'
000000000000e024         db  0x5f ; '_'
000000000000e025         db  0x62 ; 'b'
000000000000e026         db  0x79 ; 'y'
000000000000e027         db  0x74 ; 't'
000000000000e028         db  0x65 ; 'e'
000000000000e029         db  0x73 ; 's'
000000000000e02a         db  0x00 ; '.'
000000000000e02b         db  0x00 ; '.'
000000000000e02c         db  0x08 ; '.'
000000000000e02d         db  0x00 ; '.'
000000000000e02e         db  0x00 ; '.'
000000000000e02f         db  0x00 ; '.'
000000000000e030         db  0x73 ; 's'
000000000000e031         db  0x65 ; 'e'
000000000000e032         db  0x65 ; 'e'
000000000000e033         db  0x6b ; 'k'
000000000000e034         db  0x5f ; '_'
000000000000e035         db  0x62 ; 'b'
000000000000e036         db  0x79 ; 'y'
000000000000e037         db  0x74 ; 't'
000000000000e038         db  0x65 ; 'e'
000000000000e039         db  0x73 ; 's'
000000000000e03a         db  0x00 ; '.'
000000000000e03b         db  0x00 ; '.'
000000000000e03c         db  0x10 ; '.'
000000000000e03d         db  0x00 ; '.'
000000000000e03e         db  0x00 ; '.'
000000000000e03f         db  0x00 ; '.'
000000000000e040         db  0x00 ; '.'
000000000000e041         db  0x00 ; '.'
000000000000e042         db  0x00 ; '.'
000000000000e043         db  0x00 ; '.'
000000000000e044         db  0x00 ; '.'
000000000000e045         db  0x00 ; '.'
000000000000e046         db  0x00 ; '.'
000000000000e047         db  0x00 ; '.'
000000000000e048         db  0x00 ; '.'
000000000000e049         db  0x00 ; '.'
000000000000e04a         db  0x00 ; '.'
000000000000e04b         db  0x00 ; '.'
000000000000e04c         db  0x00 ; '.'
000000000000e04d         db  0x00 ; '.'
000000000000e04e         db  0x00 ; '.'
000000000000e04f         db  0x00 ; '.'
000000000000e050         db  0x00 ; '.'
000000000000e051         db  0x00 ; '.'
000000000000e052         db  0x00 ; '.'
000000000000e053         db  0x00 ; '.'
000000000000e054         db  0x00 ; '.'
000000000000e055         db  0x00 ; '.'
000000000000e056         db  0x00 ; '.'
000000000000e057         db  0x00 ; '.'
000000000000e058         db  0x00 ; '.'
000000000000e059         db  0x00 ; '.'
000000000000e05a         db  0x00 ; '.'
000000000000e05b         db  0x00 ; '.'
000000000000e05c         db  0x00 ; '.'
000000000000e05d         db  0x00 ; '.'
000000000000e05e         db  0x00 ; '.'
000000000000e05f         db  0x00 ; '.'
                     conversions:
000000000000e060         db         "ascii", 0                                  ; DATA XREF=main+2677
000000000000e066         db  0x00 ; '.'
000000000000e067         db  0x00 ; '.'
000000000000e068         db  0x00 ; '.'
000000000000e069         db  0x00 ; '.'
000000000000e06a         db  0x00 ; '.'
000000000000e06b         db  0x00 ; '.'
000000000000e06c         db  0x11 ; '.'
000000000000e06d         db  0x08 ; '.'
000000000000e06e         db  0x00 ; '.'
000000000000e06f         db  0x00 ; '.'
000000000000e070         db  0x65 ; 'e'
000000000000e071         db  0x62 ; 'b'
000000000000e072         db  0x63 ; 'c'
000000000000e073         db  0x64 ; 'd'
000000000000e074         db  0x69 ; 'i'
000000000000e075         db  0x63 ; 'c'
000000000000e076         db  0x00 ; '.'
000000000000e077         db  0x00 ; '.'
000000000000e078         db  0x00 ; '.'
000000000000e079         db  0x00 ; '.'
000000000000e07a         db  0x00 ; '.'
000000000000e07b         db  0x00 ; '.'
000000000000e07c         db  0x0a ; '.'
000000000000e07d         db  0x08 ; '.'
000000000000e07e         db  0x00 ; '.'
000000000000e07f         db  0x00 ; '.'
000000000000e080         db  0x69 ; 'i'
000000000000e081         db  0x62 ; 'b'
000000000000e082         db  0x6d ; 'm'
000000000000e083         db  0x00 ; '.'
000000000000e084         db  0x00 ; '.'
000000000000e085         db  0x00 ; '.'
000000000000e086         db  0x00 ; '.'
000000000000e087         db  0x00 ; '.'
000000000000e088         db  0x00 ; '.'
000000000000e089         db  0x00 ; '.'
000000000000e08a         db  0x00 ; '.'
000000000000e08b         db  0x00 ; '.'
000000000000e08c         db  0x0c ; '.'
000000000000e08d         db  0x08 ; '.'
000000000000e08e         db  0x00 ; '.'
000000000000e08f         db  0x00 ; '.'
000000000000e090         db  0x62 ; 'b'
000000000000e091         db  0x6c ; 'l'
000000000000e092         db  0x6f ; 'o'
000000000000e093         db  0x63 ; 'c'
000000000000e094         db  0x6b ; 'k'
000000000000e095         db  0x00 ; '.'
000000000000e096         db  0x00 ; '.'
000000000000e097         db  0x00 ; '.'
000000000000e098         db  0x00 ; '.'
000000000000e099         db  0x00 ; '.'
000000000000e09a         db  0x00 ; '.'
000000000000e09b         db  0x00 ; '.'
000000000000e09c         db  0x08 ; '.'
000000000000e09d         db  0x08 ; '.'
000000000000e09e         db  0x00 ; '.'
000000000000e09f         db  0x00 ; '.'
000000000000e0a0         db  0x75 ; 'u'
000000000000e0a1         db  0x6e ; 'n'
000000000000e0a2         db  0x62 ; 'b'
000000000000e0a3         db  0x6c ; 'l'
000000000000e0a4         db  0x6f ; 'o'
000000000000e0a5         db  0x63 ; 'c'
000000000000e0a6         db  0x6b ; 'k'
000000000000e0a7         db  0x00 ; '.'
000000000000e0a8         db  0x00 ; '.'
000000000000e0a9         db  0x00 ; '.'
000000000000e0aa         db  0x00 ; '.'
000000000000e0ab         db  0x00 ; '.'
000000000000e0ac         db  0x10 ; '.'
000000000000e0ad         db  0x08 ; '.'
000000000000e0ae         db  0x00 ; '.'
000000000000e0af         db  0x00 ; '.'
000000000000e0b0         db  0x6c ; 'l'
000000000000e0b1         db  0x63 ; 'c'
000000000000e0b2         db  0x61 ; 'a'
000000000000e0b3         db  0x73 ; 's'
000000000000e0b4         db  0x65 ; 'e'
000000000000e0b5         db  0x00 ; '.'
000000000000e0b6         db  0x00 ; '.'
000000000000e0b7         db  0x00 ; '.'
000000000000e0b8         db  0x00 ; '.'
000000000000e0b9         db  0x00 ; '.'
000000000000e0ba         db  0x00 ; '.'
000000000000e0bb         db  0x00 ; '.'
000000000000e0bc         db  0x20 ; ' '
000000000000e0bd         db  0x08 ; '.'
000000000000e0be         db  0x00 ; '.'
000000000000e0bf         db  0x00 ; '.'
000000000000e0c0         db  0x75 ; 'u'
000000000000e0c1         db  0x63 ; 'c'
000000000000e0c2         db  0x61 ; 'a'
000000000000e0c3         db  0x73 ; 's'
000000000000e0c4         db  0x65 ; 'e'
000000000000e0c5         db  0x00 ; '.'
000000000000e0c6         db  0x00 ; '.'
000000000000e0c7         db  0x00 ; '.'
000000000000e0c8         db  0x00 ; '.'
000000000000e0c9         db  0x00 ; '.'
000000000000e0ca         db  0x00 ; '.'
000000000000e0cb         db  0x00 ; '.'
000000000000e0cc         db  0x40 ; '@'
000000000000e0cd         db  0x08 ; '.'
000000000000e0ce         db  0x00 ; '.'
000000000000e0cf         db  0x00 ; '.'
000000000000e0d0         db  0x73 ; 's'
000000000000e0d1         db  0x70 ; 'p'
000000000000e0d2         db  0x61 ; 'a'
000000000000e0d3         db  0x72 ; 'r'
000000000000e0d4         db  0x73 ; 's'
000000000000e0d5         db  0x65 ; 'e'
000000000000e0d6         db  0x00 ; '.'
000000000000e0d7         db  0x00 ; '.'
000000000000e0d8         db  0x00 ; '.'
000000000000e0d9         db  0x00 ; '.'
000000000000e0da         db  0x00 ; '.'
000000000000e0db         db  0x00 ; '.'
000000000000e0dc         db  0x00 ; '.'
000000000000e0dd         db  0x00 ; '.'
000000000000e0de         db  0x01 ; '.'
000000000000e0df         db  0x00 ; '.'
000000000000e0e0         db  0x73 ; 's'
000000000000e0e1         db  0x77 ; 'w'
000000000000e0e2         db  0x61 ; 'a'
000000000000e0e3         db  0x62 ; 'b'
000000000000e0e4         db  0x00 ; '.'
000000000000e0e5         db  0x00 ; '.'
000000000000e0e6         db  0x00 ; '.'
000000000000e0e7         db  0x00 ; '.'
000000000000e0e8         db  0x00 ; '.'
000000000000e0e9         db  0x00 ; '.'
000000000000e0ea         db  0x00 ; '.'
000000000000e0eb         db  0x00 ; '.'
000000000000e0ec         db  0x80 ; '.'
000000000000e0ed         db  0x08 ; '.'
000000000000e0ee         db  0x00 ; '.'
000000000000e0ef         db  0x00 ; '.'
000000000000e0f0         db  0x6e ; 'n'
000000000000e0f1         db  0x6f ; 'o'
000000000000e0f2         db  0x65 ; 'e'
000000000000e0f3         db  0x72 ; 'r'
000000000000e0f4         db  0x72 ; 'r'
000000000000e0f5         db  0x6f ; 'o'
000000000000e0f6         db  0x72 ; 'r'
000000000000e0f7         db  0x00 ; '.'
000000000000e0f8         db  0x00 ; '.'
000000000000e0f9         db  0x00 ; '.'
000000000000e0fa         db  0x00 ; '.'
000000000000e0fb         db  0x00 ; '.'
000000000000e0fc         db  0x00 ; '.'
000000000000e0fd         db  0x01 ; '.'
000000000000e0fe         db  0x00 ; '.'
000000000000e0ff         db  0x00 ; '.'
000000000000e100         db  0x6e ; 'n'
000000000000e101         db  0x6f ; 'o'
000000000000e102         db  0x63 ; 'c'
000000000000e103         db  0x72 ; 'r'
000000000000e104         db  0x65 ; 'e'
000000000000e105         db  0x61 ; 'a'
000000000000e106         db  0x74 ; 't'
000000000000e107         db  0x00 ; '.'
000000000000e108         db  0x00 ; '.'
000000000000e109         db  0x00 ; '.'
000000000000e10a         db  0x00 ; '.'
000000000000e10b         db  0x00 ; '.'
000000000000e10c         db  0x00 ; '.'
000000000000e10d         db  0x10 ; '.'
000000000000e10e         db  0x00 ; '.'
000000000000e10f         db  0x00 ; '.'
000000000000e110         db  0x65 ; 'e'
000000000000e111         db  0x78 ; 'x'
000000000000e112         db  0x63 ; 'c'
000000000000e113         db  0x6c ; 'l'
000000000000e114         db  0x00 ; '.'
000000000000e115         db  0x00 ; '.'
000000000000e116         db  0x00 ; '.'
000000000000e117         db  0x00 ; '.'
000000000000e118         db  0x00 ; '.'
000000000000e119         db  0x00 ; '.'
000000000000e11a         db  0x00 ; '.'
000000000000e11b         db  0x00 ; '.'
000000000000e11c         db  0x00 ; '.'
000000000000e11d         db  0x20 ; ' '
000000000000e11e         db  0x00 ; '.'
000000000000e11f         db  0x00 ; '.'
000000000000e120         db  0x6e ; 'n'
000000000000e121         db  0x6f ; 'o'
000000000000e122         db  0x74 ; 't'
000000000000e123         db  0x72 ; 'r'
000000000000e124         db  0x75 ; 'u'
000000000000e125         db  0x6e ; 'n'
000000000000e126         db  0x63 ; 'c'
000000000000e127         db  0x00 ; '.'
000000000000e128         db  0x00 ; '.'
000000000000e129         db  0x00 ; '.'
000000000000e12a         db  0x00 ; '.'
000000000000e12b         db  0x00 ; '.'
000000000000e12c         db  0x00 ; '.'
000000000000e12d         db  0x02 ; '.'
000000000000e12e         db  0x00 ; '.'
000000000000e12f         db  0x00 ; '.'
000000000000e130         db  0x73 ; 's'
000000000000e131         db  0x79 ; 'y'
000000000000e132         db  0x6e ; 'n'
000000000000e133         db  0x63 ; 'c'
000000000000e134         db  0x00 ; '.'
000000000000e135         db  0x00 ; '.'
000000000000e136         db  0x00 ; '.'
000000000000e137         db  0x00 ; '.'
000000000000e138         db  0x00 ; '.'
000000000000e139         db  0x00 ; '.'
000000000000e13a         db  0x00 ; '.'
000000000000e13b         db  0x00 ; '.'
000000000000e13c         db  0x00 ; '.'
000000000000e13d         db  0x04 ; '.'
000000000000e13e         db  0x00 ; '.'
000000000000e13f         db  0x00 ; '.'
000000000000e140         db  0x66 ; 'f'
000000000000e141         db  0x64 ; 'd'
000000000000e142         db  0x61 ; 'a'
000000000000e143         db  0x74 ; 't'
000000000000e144         db  0x61 ; 'a'
000000000000e145         db  0x73 ; 's'
000000000000e146         db  0x79 ; 'y'
000000000000e147         db  0x6e ; 'n'
000000000000e148         db  0x63 ; 'c'
000000000000e149         db  0x00 ; '.'
000000000000e14a         db  0x00 ; '.'
000000000000e14b         db  0x00 ; '.'
000000000000e14c         db  0x00 ; '.'
000000000000e14d         db  0x40 ; '@'
000000000000e14e         db  0x00 ; '.'
000000000000e14f         db  0x00 ; '.'
000000000000e150         db  0x66 ; 'f'
000000000000e151         db  0x73 ; 's'
000000000000e152         db  0x79 ; 'y'
000000000000e153         db  0x6e ; 'n'
000000000000e154         db  0x63 ; 'c'
000000000000e155         db  0x00 ; '.'
000000000000e156         db  0x00 ; '.'
000000000000e157         db  0x00 ; '.'
000000000000e158         db  0x00 ; '.'
000000000000e159         db  0x00 ; '.'
000000000000e15a         db  0x00 ; '.'
000000000000e15b         db  0x00 ; '.'
000000000000e15c         db  0x00 ; '.'
000000000000e15d         db  0x80 ; '.'
000000000000e15e         db  0x00 ; '.'
000000000000e15f         db  0x00 ; '.'
000000000000e160         db  0x00 ; '.'
000000000000e161         db  0x00 ; '.'
000000000000e162         db  0x00 ; '.'
000000000000e163         db  0x00 ; '.'
000000000000e164         db  0x00 ; '.'
000000000000e165         db  0x00 ; '.'
000000000000e166         db  0x00 ; '.'
000000000000e167         db  0x00 ; '.'
000000000000e168         db  0x00 ; '.'
000000000000e169         db  0x00 ; '.'
000000000000e16a         db  0x00 ; '.'
000000000000e16b         db  0x00 ; '.'
000000000000e16c         db  0x00 ; '.'
000000000000e16d         db  0x00 ; '.'
000000000000e16e         db  0x00 ; '.'
000000000000e16f         db  0x00 ; '.'
                     double_e170:        // double
000000000000e170         dq         1.0e+09                                     ; DATA XREF=print_xfer_stats+165
                     a831:
000000000000e178         db         "8.31", 0                                   ; DATA XREF=Version
                     aWriteError:
000000000000e17d         db         "write error", 0                            ; DATA XREF=close_stdout+67
000000000000e189         db  0x2e ; '.'                                         ; DATA XREF=human_readable+132
000000000000e18a         db  0x00 ; '.'
                     a0lf:
000000000000e18b         db         "%.0Lf", 0                                  ; DATA XREF=human_readable+784, human_readable+1865
                     a1lf:
000000000000e191         db         "%.1Lf", 0                                  ; DATA XREF=human_readable+417, human_readable+1780
                     aBlocksize:
000000000000e197         db         "BLOCK_SIZE", 0                             ; DATA XREF=human_options+320
                     aBlocksize_e1a2:        // aBlocksize
000000000000e1a2         db         "BLOCKSIZE", 0                              ; DATA XREF=human_options+344
                     aEeggkkmmppttyy:
000000000000e1ac         db         "eEgGkKmMpPtTyYzZ0", 0                      ; DATA XREF=human_options+152
                     aHumanreadable:
000000000000e1be         db         "human-readable", 0
000000000000e1cd         db  0x73 ; 's'
000000000000e1ce         db  0x69 ; 'i'
000000000000e1cf         db  0x00 ; '.'
                     block_size_opts:
000000000000e1d0         db  0xb0 ; '.'                                         ; DATA XREF=human_options+60, human_options+91
000000000000e1d1         db  0x00 ; '.'
000000000000e1d2         db  0x00 ; '.'
000000000000e1d3         db  0x00 ; '.'
000000000000e1d4         db  0x90 ; '.'
000000000000e1d5         db  0x00 ; '.'
000000000000e1d6         db  0x00 ; '.'
000000000000e1d7         db  0x00 ; '.'
                     power_letter:
000000000000e1d8         db  0x00 ; '.'                                         ; DATA XREF=human_readable+972
000000000000e1d9         db  0x4b ; 'K'
000000000000e1da         db  0x4d ; 'M'
000000000000e1db         db  0x47 ; 'G'
000000000000e1dc         db  0x54 ; 'T'
000000000000e1dd         db  0x50 ; 'P'
000000000000e1de         db  0x45 ; 'E'
000000000000e1df         db  0x5a ; 'Z'
000000000000e1e0         db  0x59 ; 'Y'
000000000000e1e1         db  0x00 ; '.'
000000000000e1e2         db  0x00 ; '.'
000000000000e1e3         db  0x00 ; '.'
                     dword_e1e4:
000000000000e1e4         dd         0x5f000000                                  ; DATA XREF=adjust_value.part.0
                     dword_e1e8:
000000000000e1e8         dd         0x5f800000                                  ; DATA XREF=adjust_value.part.0+66, adjust_value.part.0+192, human_readable+243, human_readable+268, human_readable+290
                     dword_e1ec:
000000000000e1ec         dd         0x41200000                                  ; DATA XREF=human_readable+508, human_readable+1851, human_readable+1928
000000000000e1f0         db  0xff ; '.'                                         ; DATA XREF=human_readable+393, human_readable+766, human_readable+1936
000000000000e1f1         db  0xff ; '.'
000000000000e1f2         db  0xff ; '.'
000000000000e1f3         db  0xff ; '.'
000000000000e1f4         db  0xff ; '.'
000000000000e1f5         db  0xff ; '.'
000000000000e1f6         db  0xff ; '.'
000000000000e1f7         db  0xff ; '.'
000000000000e1f8         db  0x3e ; '>'
000000000000e1f9         db  0x40 ; '@'
000000000000e1fa         db  0x00 ; '.'
000000000000e1fb         db  0x00 ; '.'
000000000000e1fc         db  0x00 ; '.'
000000000000e1fd         db  0x00 ; '.'
000000000000e1fe         db  0x00 ; '.'
000000000000e1ff         db  0x00 ; '.'
000000000000e200         db  0x2b ; '+'                                         ; DATA XREF=parse_long_options+183, parse_gnu_standard_options_only+114
000000000000e201         db  0x00 ; '.'
                     aHelp:
000000000000e202         db         "help", 0
000000000000e207         align      8
                     aANullArgv0WasP:
000000000000e208         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
000000000000e240         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
000000000000e248         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
000000000000e249         db  0x74 ; 't'
000000000000e24a         db  0x2d ; '-'
000000000000e24b         db  0x00 ; '.'
000000000000e24c         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
000000000000e24d         db  0x80 ; '.'
000000000000e24e         db  0x98 ; '.'
000000000000e24f         db  0x00 ; '.'
000000000000e250         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
000000000000e251         db  0x80 ; '.'
000000000000e252         db  0x99 ; '.'
000000000000e253         db  0x00 ; '.'
000000000000e254         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
000000000000e255         db  0x07 ; '.'
000000000000e256         db  0x65 ; 'e'
000000000000e257         db  0x00 ; '.'
000000000000e258         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
000000000000e259         db  0xaf ; '.'
000000000000e25a         db  0x00 ; '.'
000000000000e25b         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_7870+1451, sub_7870+1493, sub_7870+2429
000000000000e25c         db  0x00 ; '.'
000000000000e25d         db  0x27 ; '''                                         ; DATA XREF=gettext_quote.part.1+39, quotearg_buffer_restyled+179, sub_7870+132, sub_7870+1338, sub_7870+1670, sub_7870+1697, sub_7870+2352
000000000000e25e         db  0x00 ; '.'
000000000000e25f         db  0x60 ; '`'                                         ; DATA XREF=sub_7870+1627, sub_7870+1654
000000000000e260         db  0x00 ; '.'
                     aLiteral:
000000000000e261         db         "literal", 0
                     aShell:
000000000000e269         db         "shell", 0
                     aShellalways:
000000000000e26f         db         "shell-always", 0
000000000000e27c         db  0x73 ; 's'
000000000000e27d         db  0x68 ; 'h'
000000000000e27e         db  0x65 ; 'e'
000000000000e27f         db  0x6c ; 'l'
000000000000e280         db  0x6c ; 'l'
000000000000e281         db  0x2d ; '-'
                     aEscape:
000000000000e282         db         "escape", 0
                     aShellescapealw:
000000000000e289         db         "shell-escape-always", 0
000000000000e29d         db  0x63 ; 'c'
000000000000e29e         db  0x00 ; '.'
                     aCmaybe:
000000000000e29f         db         "c-maybe", 0
                     aClocale:
000000000000e2a7         db         "clocale", 0
000000000000e2af         align      64
                     switch_table_e2c0:        // switch_table
000000000000e2c0         dd         quotearg_buffer_restyled.loc_7f6a-switch_table_e2c0, quotearg_buffer_restyled.loc_71c3-switch_table_e2c0, quotearg_buffer_restyled.loc_8198-switch_table_e2c0, quotearg_buffer_restyled.loc_7fa4-switch_table_e2c0 ; switch table used at 0x71c1 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
000000000000e2d0         dd         quotearg_buffer_restyled.loc_7d94-switch_table_e2c0, quotearg_buffer_restyled.loc_7df0-switch_table_e2c0, quotearg_buffer_restyled.loc_7e45-switch_table_e2c0, quotearg_buffer_restyled.loc_7e8a-switch_table_e2c0
000000000000e2e0         dd         3 dup (quotearg_buffer_restyled.loc_7ec4-switch_table_e2c0)
000000000000e2ec         db  0x54 ; 'T'                                         ; DATA XREF=quotearg_buffer_restyled+477
000000000000e2ed         db  0x92 ; '.'
000000000000e2ee         db  0xff ; '.'
000000000000e2ef         db  0xff ; '.'
000000000000e2f0         db  0x3c ; '<'
000000000000e2f1         db  0x93 ; '.'
000000000000e2f2         db  0xff ; '.'
000000000000e2f3         db  0xff ; '.'
000000000000e2f4         db  0x3c ; '<'
000000000000e2f5         db  0x93 ; '.'
000000000000e2f6         db  0xff ; '.'
000000000000e2f7         db  0xff ; '.'
000000000000e2f8         db  0x3c ; '<'
000000000000e2f9         db  0x93 ; '.'
000000000000e2fa         db  0xff ; '.'
000000000000e2fb         db  0xff ; '.'
000000000000e2fc         db  0x3c ; '<'
000000000000e2fd         db  0x93 ; '.'
000000000000e2fe         db  0xff ; '.'
000000000000e2ff         db  0xff ; '.'
000000000000e300         db  0x3c ; '<'
000000000000e301         db  0x93 ; '.'
000000000000e302         db  0xff ; '.'
000000000000e303         db  0xff ; '.'
000000000000e304         db  0x3c ; '<'
000000000000e305         db  0x93 ; '.'
000000000000e306         db  0xff ; '.'
000000000000e307         db  0xff ; '.'
000000000000e308         db  0x94 ; '.'
000000000000e309         db  0x92 ; '.'
000000000000e30a         db  0xff ; '.'
000000000000e30b         db  0xff ; '.'
000000000000e30c         db  0x9c ; '.'
000000000000e30d         db  0x91 ; '.'
000000000000e30e         db  0xff ; '.'
000000000000e30f         db  0xff ; '.'
000000000000e310         db  0x5c ; '\'
000000000000e311         db  0x91 ; '.'
000000000000e312         db  0xff ; '.'
000000000000e313         db  0xff ; '.'
000000000000e314         db  0x24 ; '$'
000000000000e315         db  0x93 ; '.'
000000000000e316         db  0xff ; '.'
000000000000e317         db  0xff ; '.'
000000000000e318         db  0x14 ; '.'
000000000000e319         db  0x93 ; '.'
000000000000e31a         db  0xff ; '.'
000000000000e31b         db  0xff ; '.'
000000000000e31c         db  0x04 ; '.'
000000000000e31d         db  0x93 ; '.'
000000000000e31e         db  0xff ; '.'
000000000000e31f         db  0xff ; '.'
000000000000e320         db  0xf4 ; '.'
000000000000e321         db  0x92 ; '.'
000000000000e322         db  0xff ; '.'
000000000000e323         db  0xff ; '.'
000000000000e324         db  0x3c ; '<'
000000000000e325         db  0x93 ; '.'
000000000000e326         db  0xff ; '.'
000000000000e327         db  0xff ; '.'
000000000000e328         db  0x3c ; '<'
000000000000e329         db  0x93 ; '.'
000000000000e32a         db  0xff ; '.'
000000000000e32b         db  0xff ; '.'
000000000000e32c         db  0x3c ; '<'
000000000000e32d         db  0x93 ; '.'
000000000000e32e         db  0xff ; '.'
000000000000e32f         db  0xff ; '.'
000000000000e330         db  0x3c ; '<'
000000000000e331         db  0x93 ; '.'
000000000000e332         db  0xff ; '.'
000000000000e333         db  0xff ; '.'
000000000000e334         db  0x3c ; '<'
000000000000e335         db  0x93 ; '.'
000000000000e336         db  0xff ; '.'
000000000000e337         db  0xff ; '.'
000000000000e338         db  0x3c ; '<'
000000000000e339         db  0x93 ; '.'
000000000000e33a         db  0xff ; '.'
000000000000e33b         db  0xff ; '.'
000000000000e33c         db  0x3c ; '<'
000000000000e33d         db  0x93 ; '.'
000000000000e33e         db  0xff ; '.'
000000000000e33f         db  0xff ; '.'
000000000000e340         db  0x3c ; '<'
000000000000e341         db  0x93 ; '.'
000000000000e342         db  0xff ; '.'
000000000000e343         db  0xff ; '.'
000000000000e344         db  0x3c ; '<'
000000000000e345         db  0x93 ; '.'
000000000000e346         db  0xff ; '.'
000000000000e347         db  0xff ; '.'
000000000000e348         db  0x3c ; '<'
000000000000e349         db  0x93 ; '.'
000000000000e34a         db  0xff ; '.'
000000000000e34b         db  0xff ; '.'
000000000000e34c         db  0x3c ; '<'
000000000000e34d         db  0x93 ; '.'
000000000000e34e         db  0xff ; '.'
000000000000e34f         db  0xff ; '.'
000000000000e350         db  0x3c ; '<'
000000000000e351         db  0x93 ; '.'
000000000000e352         db  0xff ; '.'
000000000000e353         db  0xff ; '.'
000000000000e354         db  0x3c ; '<'
000000000000e355         db  0x93 ; '.'
000000000000e356         db  0xff ; '.'
000000000000e357         db  0xff ; '.'
000000000000e358         db  0x3c ; '<'
000000000000e359         db  0x93 ; '.'
000000000000e35a         db  0xff ; '.'
000000000000e35b         db  0xff ; '.'
000000000000e35c         db  0x3c ; '<'
000000000000e35d         db  0x93 ; '.'
000000000000e35e         db  0xff ; '.'
000000000000e35f         db  0xff ; '.'
000000000000e360         db  0x3c ; '<'
000000000000e361         db  0x93 ; '.'
000000000000e362         db  0xff ; '.'
000000000000e363         db  0xff ; '.'
000000000000e364         db  0x3c ; '<'
000000000000e365         db  0x93 ; '.'
000000000000e366         db  0xff ; '.'
000000000000e367         db  0xff ; '.'
000000000000e368         db  0x3c ; '<'
000000000000e369         db  0x93 ; '.'
000000000000e36a         db  0xff ; '.'
000000000000e36b         db  0xff ; '.'
000000000000e36c         db  0xe4 ; '.'
000000000000e36d         db  0x92 ; '.'
000000000000e36e         db  0xff ; '.'
000000000000e36f         db  0xff ; '.'
000000000000e370         db  0xd4 ; '.'
000000000000e371         db  0x92 ; '.'
000000000000e372         db  0xff ; '.'
000000000000e373         db  0xff ; '.'
000000000000e374         db  0xd4 ; '.'
000000000000e375         db  0x92 ; '.'
000000000000e376         db  0xff ; '.'
000000000000e377         db  0xff ; '.'
000000000000e378         db  0xa4 ; '.'
000000000000e379         db  0x92 ; '.'
000000000000e37a         db  0xff ; '.'
000000000000e37b         db  0xff ; '.'
000000000000e37c         db  0xd4 ; '.'
000000000000e37d         db  0x92 ; '.'
000000000000e37e         db  0xff ; '.'
000000000000e37f         db  0xff ; '.'
000000000000e380         db  0x7c ; '|'
000000000000e381         db  0x92 ; '.'
000000000000e382         db  0xff ; '.'
000000000000e383         db  0xff ; '.'
000000000000e384         db  0xd4 ; '.'
000000000000e385         db  0x92 ; '.'
000000000000e386         db  0xff ; '.'
000000000000e387         db  0xff ; '.'
000000000000e388         db  0x37 ; '7'
000000000000e389         db  0x91 ; '.'
000000000000e38a         db  0xff ; '.'
000000000000e38b         db  0xff ; '.'
000000000000e38c         db  0xd4 ; '.'
000000000000e38d         db  0x92 ; '.'
000000000000e38e         db  0xff ; '.'
000000000000e38f         db  0xff ; '.'
000000000000e390         db  0xd4 ; '.'
000000000000e391         db  0x92 ; '.'
000000000000e392         db  0xff ; '.'
000000000000e393         db  0xff ; '.'
000000000000e394         db  0xd4 ; '.'
000000000000e395         db  0x92 ; '.'
000000000000e396         db  0xff ; '.'
000000000000e397         db  0xff ; '.'
000000000000e398         db  0x7c ; '|'
000000000000e399         db  0x92 ; '.'
000000000000e39a         db  0xff ; '.'
000000000000e39b         db  0xff ; '.'
000000000000e39c         db  0x7c ; '|'
000000000000e39d         db  0x92 ; '.'
000000000000e39e         db  0xff ; '.'
000000000000e39f         db  0xff ; '.'
000000000000e3a0         db  0x7c ; '|'
000000000000e3a1         db  0x92 ; '.'
000000000000e3a2         db  0xff ; '.'
000000000000e3a3         db  0xff ; '.'
000000000000e3a4         db  0x7c ; '|'
000000000000e3a5         db  0x92 ; '.'
000000000000e3a6         db  0xff ; '.'
000000000000e3a7         db  0xff ; '.'
000000000000e3a8         db  0x7c ; '|'
000000000000e3a9         db  0x92 ; '.'
000000000000e3aa         db  0xff ; '.'
000000000000e3ab         db  0xff ; '.'
000000000000e3ac         db  0x7c ; '|'
000000000000e3ad         db  0x92 ; '.'
000000000000e3ae         db  0xff ; '.'
000000000000e3af         db  0xff ; '.'
000000000000e3b0         db  0x7c ; '|'
000000000000e3b1         db  0x92 ; '.'
000000000000e3b2         db  0xff ; '.'
000000000000e3b3         db  0xff ; '.'
000000000000e3b4         db  0x7c ; '|'
000000000000e3b5         db  0x92 ; '.'
000000000000e3b6         db  0xff ; '.'
000000000000e3b7         db  0xff ; '.'
000000000000e3b8         db  0x7c ; '|'
000000000000e3b9         db  0x92 ; '.'
000000000000e3ba         db  0xff ; '.'
000000000000e3bb         db  0xff ; '.'
000000000000e3bc         db  0x7c ; '|'
000000000000e3bd         db  0x92 ; '.'
000000000000e3be         db  0xff ; '.'
000000000000e3bf         db  0xff ; '.'
000000000000e3c0         db  0x7c ; '|'
000000000000e3c1         db  0x92 ; '.'
000000000000e3c2         db  0xff ; '.'
000000000000e3c3         db  0xff ; '.'
000000000000e3c4         db  0x7c ; '|'
000000000000e3c5         db  0x92 ; '.'
000000000000e3c6         db  0xff ; '.'
000000000000e3c7         db  0xff ; '.'
000000000000e3c8         db  0x7c ; '|'
000000000000e3c9         db  0x92 ; '.'
000000000000e3ca         db  0xff ; '.'
000000000000e3cb         db  0xff ; '.'
000000000000e3cc         db  0x7c ; '|'
000000000000e3cd         db  0x92 ; '.'
000000000000e3ce         db  0xff ; '.'
000000000000e3cf         db  0xff ; '.'
000000000000e3d0         db  0x7c ; '|'
000000000000e3d1         db  0x92 ; '.'
000000000000e3d2         db  0xff ; '.'
000000000000e3d3         db  0xff ; '.'
000000000000e3d4         db  0x7c ; '|'
000000000000e3d5         db  0x92 ; '.'
000000000000e3d6         db  0xff ; '.'
000000000000e3d7         db  0xff ; '.'
000000000000e3d8         db  0xd4 ; '.'
000000000000e3d9         db  0x92 ; '.'
000000000000e3da         db  0xff ; '.'
000000000000e3db         db  0xff ; '.'
000000000000e3dc         db  0xd4 ; '.'
000000000000e3dd         db  0x92 ; '.'
000000000000e3de         db  0xff ; '.'
000000000000e3df         db  0xff ; '.'
000000000000e3e0         db  0xd4 ; '.'
000000000000e3e1         db  0x92 ; '.'
000000000000e3e2         db  0xff ; '.'
000000000000e3e3         db  0xff ; '.'
000000000000e3e4         db  0xd4 ; '.'
000000000000e3e5         db  0x92 ; '.'
000000000000e3e6         db  0xff ; '.'
000000000000e3e7         db  0xff ; '.'
000000000000e3e8         db  0x07 ; '.'
000000000000e3e9         db  0x91 ; '.'
000000000000e3ea         db  0xff ; '.'
000000000000e3eb         db  0xff ; '.'
000000000000e3ec         db  0x3c ; '<'
000000000000e3ed         db  0x93 ; '.'
000000000000e3ee         db  0xff ; '.'
000000000000e3ef         db  0xff ; '.'
000000000000e3f0         db  0x7c ; '|'
000000000000e3f1         db  0x92 ; '.'
000000000000e3f2         db  0xff ; '.'
000000000000e3f3         db  0xff ; '.'
000000000000e3f4         db  0x7c ; '|'
000000000000e3f5         db  0x92 ; '.'
000000000000e3f6         db  0xff ; '.'
000000000000e3f7         db  0xff ; '.'
000000000000e3f8         db  0x7c ; '|'
000000000000e3f9         db  0x92 ; '.'
000000000000e3fa         db  0xff ; '.'
000000000000e3fb         db  0xff ; '.'
000000000000e3fc         db  0x7c ; '|'
000000000000e3fd         db  0x92 ; '.'
000000000000e3fe         db  0xff ; '.'
000000000000e3ff         db  0xff ; '.'
000000000000e400         db  0x7c ; '|'
000000000000e401         db  0x92 ; '.'
000000000000e402         db  0xff ; '.'
000000000000e403         db  0xff ; '.'
000000000000e404         db  0x7c ; '|'
000000000000e405         db  0x92 ; '.'
000000000000e406         db  0xff ; '.'
000000000000e407         db  0xff ; '.'
000000000000e408         db  0x7c ; '|'
000000000000e409         db  0x92 ; '.'
000000000000e40a         db  0xff ; '.'
000000000000e40b         db  0xff ; '.'
000000000000e40c         db  0x7c ; '|'
000000000000e40d         db  0x92 ; '.'
000000000000e40e         db  0xff ; '.'
000000000000e40f         db  0xff ; '.'
000000000000e410         db  0x7c ; '|'
000000000000e411         db  0x92 ; '.'
000000000000e412         db  0xff ; '.'
000000000000e413         db  0xff ; '.'
000000000000e414         db  0x7c ; '|'
000000000000e415         db  0x92 ; '.'
000000000000e416         db  0xff ; '.'
000000000000e417         db  0xff ; '.'
000000000000e418         db  0x7c ; '|'
000000000000e419         db  0x92 ; '.'
000000000000e41a         db  0xff ; '.'
000000000000e41b         db  0xff ; '.'
000000000000e41c         db  0x7c ; '|'
000000000000e41d         db  0x92 ; '.'
000000000000e41e         db  0xff ; '.'
000000000000e41f         db  0xff ; '.'
000000000000e420         db  0x7c ; '|'
000000000000e421         db  0x92 ; '.'
000000000000e422         db  0xff ; '.'
000000000000e423         db  0xff ; '.'
000000000000e424         db  0x7c ; '|'
000000000000e425         db  0x92 ; '.'
000000000000e426         db  0xff ; '.'
000000000000e427         db  0xff ; '.'
000000000000e428         db  0x7c ; '|'
000000000000e429         db  0x92 ; '.'
000000000000e42a         db  0xff ; '.'
000000000000e42b         db  0xff ; '.'
000000000000e42c         db  0x7c ; '|'
000000000000e42d         db  0x92 ; '.'
000000000000e42e         db  0xff ; '.'
000000000000e42f         db  0xff ; '.'
000000000000e430         db  0x7c ; '|'
000000000000e431         db  0x92 ; '.'
000000000000e432         db  0xff ; '.'
000000000000e433         db  0xff ; '.'
000000000000e434         db  0x7c ; '|'
000000000000e435         db  0x92 ; '.'
000000000000e436         db  0xff ; '.'
000000000000e437         db  0xff ; '.'
000000000000e438         db  0x7c ; '|'
000000000000e439         db  0x92 ; '.'
000000000000e43a         db  0xff ; '.'
000000000000e43b         db  0xff ; '.'
000000000000e43c         db  0x7c ; '|'
000000000000e43d         db  0x92 ; '.'
000000000000e43e         db  0xff ; '.'
000000000000e43f         db  0xff ; '.'
000000000000e440         db  0x7c ; '|'
000000000000e441         db  0x92 ; '.'
000000000000e442         db  0xff ; '.'
000000000000e443         db  0xff ; '.'
000000000000e444         db  0x7c ; '|'
000000000000e445         db  0x92 ; '.'
000000000000e446         db  0xff ; '.'
000000000000e447         db  0xff ; '.'
000000000000e448         db  0x7c ; '|'
000000000000e449         db  0x92 ; '.'
000000000000e44a         db  0xff ; '.'
000000000000e44b         db  0xff ; '.'
000000000000e44c         db  0x7c ; '|'
000000000000e44d         db  0x92 ; '.'
000000000000e44e         db  0xff ; '.'
000000000000e44f         db  0xff ; '.'
000000000000e450         db  0x7c ; '|'
000000000000e451         db  0x92 ; '.'
000000000000e452         db  0xff ; '.'
000000000000e453         db  0xff ; '.'
000000000000e454         db  0x7c ; '|'
000000000000e455         db  0x92 ; '.'
000000000000e456         db  0xff ; '.'
000000000000e457         db  0xff ; '.'
000000000000e458         db  0xd4 ; '.'
000000000000e459         db  0x92 ; '.'
000000000000e45a         db  0xff ; '.'
000000000000e45b         db  0xff ; '.'
000000000000e45c         db  0xac ; '.'
000000000000e45d         db  0x91 ; '.'
000000000000e45e         db  0xff ; '.'
000000000000e45f         db  0xff ; '.'
000000000000e460         db  0x7c ; '|'
000000000000e461         db  0x92 ; '.'
000000000000e462         db  0xff ; '.'
000000000000e463         db  0xff ; '.'
000000000000e464         db  0xd4 ; '.'
000000000000e465         db  0x92 ; '.'
000000000000e466         db  0xff ; '.'
000000000000e467         db  0xff ; '.'
000000000000e468         db  0x7c ; '|'
000000000000e469         db  0x92 ; '.'
000000000000e46a         db  0xff ; '.'
000000000000e46b         db  0xff ; '.'
000000000000e46c         db  0xd4 ; '.'
000000000000e46d         db  0x92 ; '.'
000000000000e46e         db  0xff ; '.'
000000000000e46f         db  0xff ; '.'
000000000000e470         db  0x7c ; '|'
000000000000e471         db  0x92 ; '.'
000000000000e472         db  0xff ; '.'
000000000000e473         db  0xff ; '.'
000000000000e474         db  0x7c ; '|'
000000000000e475         db  0x92 ; '.'
000000000000e476         db  0xff ; '.'
000000000000e477         db  0xff ; '.'
000000000000e478         db  0x7c ; '|'
000000000000e479         db  0x92 ; '.'
000000000000e47a         db  0xff ; '.'
000000000000e47b         db  0xff ; '.'
000000000000e47c         db  0x7c ; '|'
000000000000e47d         db  0x92 ; '.'
000000000000e47e         db  0xff ; '.'
000000000000e47f         db  0xff ; '.'
000000000000e480         db  0x7c ; '|'
000000000000e481         db  0x92 ; '.'
000000000000e482         db  0xff ; '.'
000000000000e483         db  0xff ; '.'
000000000000e484         db  0x7c ; '|'
000000000000e485         db  0x92 ; '.'
000000000000e486         db  0xff ; '.'
000000000000e487         db  0xff ; '.'
000000000000e488         db  0x7c ; '|'
000000000000e489         db  0x92 ; '.'
000000000000e48a         db  0xff ; '.'
000000000000e48b         db  0xff ; '.'
000000000000e48c         db  0x7c ; '|'
000000000000e48d         db  0x92 ; '.'
000000000000e48e         db  0xff ; '.'
000000000000e48f         db  0xff ; '.'
000000000000e490         db  0x7c ; '|'
000000000000e491         db  0x92 ; '.'
000000000000e492         db  0xff ; '.'
000000000000e493         db  0xff ; '.'
000000000000e494         db  0x7c ; '|'
000000000000e495         db  0x92 ; '.'
000000000000e496         db  0xff ; '.'
000000000000e497         db  0xff ; '.'
000000000000e498         db  0x7c ; '|'
000000000000e499         db  0x92 ; '.'
000000000000e49a         db  0xff ; '.'
000000000000e49b         db  0xff ; '.'
000000000000e49c         db  0x7c ; '|'
000000000000e49d         db  0x92 ; '.'
000000000000e49e         db  0xff ; '.'
000000000000e49f         db  0xff ; '.'
000000000000e4a0         db  0x7c ; '|'
000000000000e4a1         db  0x92 ; '.'
000000000000e4a2         db  0xff ; '.'
000000000000e4a3         db  0xff ; '.'
000000000000e4a4         db  0x7c ; '|'
000000000000e4a5         db  0x92 ; '.'
000000000000e4a6         db  0xff ; '.'
000000000000e4a7         db  0xff ; '.'
000000000000e4a8         db  0x7c ; '|'
000000000000e4a9         db  0x92 ; '.'
000000000000e4aa         db  0xff ; '.'
000000000000e4ab         db  0xff ; '.'
000000000000e4ac         db  0x7c ; '|'
000000000000e4ad         db  0x92 ; '.'
000000000000e4ae         db  0xff ; '.'
000000000000e4af         db  0xff ; '.'
000000000000e4b0         db  0x7c ; '|'
000000000000e4b1         db  0x92 ; '.'
000000000000e4b2         db  0xff ; '.'
000000000000e4b3         db  0xff ; '.'
000000000000e4b4         db  0x7c ; '|'
000000000000e4b5         db  0x92 ; '.'
000000000000e4b6         db  0xff ; '.'
000000000000e4b7         db  0xff ; '.'
000000000000e4b8         db  0x7c ; '|'
000000000000e4b9         db  0x92 ; '.'
000000000000e4ba         db  0xff ; '.'
000000000000e4bb         db  0xff ; '.'
000000000000e4bc         db  0x7c ; '|'
000000000000e4bd         db  0x92 ; '.'
000000000000e4be         db  0xff ; '.'
000000000000e4bf         db  0xff ; '.'
000000000000e4c0         db  0x7c ; '|'
000000000000e4c1         db  0x92 ; '.'
000000000000e4c2         db  0xff ; '.'
000000000000e4c3         db  0xff ; '.'
000000000000e4c4         db  0x7c ; '|'
000000000000e4c5         db  0x92 ; '.'
000000000000e4c6         db  0xff ; '.'
000000000000e4c7         db  0xff ; '.'
000000000000e4c8         db  0x7c ; '|'
000000000000e4c9         db  0x92 ; '.'
000000000000e4ca         db  0xff ; '.'
000000000000e4cb         db  0xff ; '.'
000000000000e4cc         db  0x7c ; '|'
000000000000e4cd         db  0x92 ; '.'
000000000000e4ce         db  0xff ; '.'
000000000000e4cf         db  0xff ; '.'
000000000000e4d0         db  0x7c ; '|'
000000000000e4d1         db  0x92 ; '.'
000000000000e4d2         db  0xff ; '.'
000000000000e4d3         db  0xff ; '.'
000000000000e4d4         db  0x7c ; '|'
000000000000e4d5         db  0x92 ; '.'
000000000000e4d6         db  0xff ; '.'
000000000000e4d7         db  0xff ; '.'
000000000000e4d8         db  0x37 ; '7'
000000000000e4d9         db  0x90 ; '.'
000000000000e4da         db  0xff ; '.'
000000000000e4db         db  0xff ; '.'
000000000000e4dc         db  0xd4 ; '.'
000000000000e4dd         db  0x92 ; '.'
000000000000e4de         db  0xff ; '.'
000000000000e4df         db  0xff ; '.'
000000000000e4e0         db  0x37 ; '7'
000000000000e4e1         db  0x90 ; '.'
000000000000e4e2         db  0xff ; '.'
000000000000e4e3         db  0xff ; '.'
000000000000e4e4         db  0xa4 ; '.'
000000000000e4e5         db  0x92 ; '.'
000000000000e4e6         db  0xff ; '.'
000000000000e4e7         db  0xff ; '.'
000000000000e4e8         db  0x28 ; '('                                         ; DATA XREF=sub_7610+137
000000000000e4e9         db  0x92 ; '.'
000000000000e4ea         db  0xff ; '.'
000000000000e4eb         db  0xff ; '.'
000000000000e4ec         db  0x38 ; '8'
000000000000e4ed         db  0x91 ; '.'
000000000000e4ee         db  0xff ; '.'
000000000000e4ef         db  0xff ; '.'
000000000000e4f0         db  0x38 ; '8'
000000000000e4f1         db  0x91 ; '.'
000000000000e4f2         db  0xff ; '.'
000000000000e4f3         db  0xff ; '.'
000000000000e4f4         db  0x38 ; '8'
000000000000e4f5         db  0x91 ; '.'
000000000000e4f6         db  0xff ; '.'
000000000000e4f7         db  0xff ; '.'
000000000000e4f8         db  0x38 ; '8'
000000000000e4f9         db  0x91 ; '.'
000000000000e4fa         db  0xff ; '.'
000000000000e4fb         db  0xff ; '.'
000000000000e4fc         db  0x38 ; '8'
000000000000e4fd         db  0x91 ; '.'
000000000000e4fe         db  0xff ; '.'
000000000000e4ff         db  0xff ; '.'
000000000000e500         db  0x38 ; '8'
000000000000e501         db  0x91 ; '.'
000000000000e502         db  0xff ; '.'
000000000000e503         db  0xff ; '.'
000000000000e504         db  0x18 ; '.'
000000000000e505         db  0x92 ; '.'
000000000000e506         db  0xff ; '.'
000000000000e507         db  0xff ; '.'
000000000000e508         db  0x68 ; 'h'
000000000000e509         db  0x93 ; '.'
000000000000e50a         db  0xff ; '.'
000000000000e50b         db  0xff ; '.'
000000000000e50c         db  0x50 ; 'P'
000000000000e50d         db  0x93 ; '.'
000000000000e50e         db  0xff ; '.'
000000000000e50f         db  0xff ; '.'
000000000000e510         db  0x00 ; '.'
000000000000e511         db  0x92 ; '.'
000000000000e512         db  0xff ; '.'
000000000000e513         db  0xff ; '.'
000000000000e514         db  0x40 ; '@'
000000000000e515         db  0x93 ; '.'
000000000000e516         db  0xff ; '.'
000000000000e517         db  0xff ; '.'
000000000000e518         db  0xe8 ; '.'
000000000000e519         db  0x91 ; '.'
000000000000e51a         db  0xff ; '.'
000000000000e51b         db  0xff ; '.'
000000000000e51c         db  0x28 ; '('
000000000000e51d         db  0x93 ; '.'
000000000000e51e         db  0xff ; '.'
000000000000e51f         db  0xff ; '.'
000000000000e520         db  0x38 ; '8'
000000000000e521         db  0x91 ; '.'
000000000000e522         db  0xff ; '.'
000000000000e523         db  0xff ; '.'
000000000000e524         db  0x38 ; '8'
000000000000e525         db  0x91 ; '.'
000000000000e526         db  0xff ; '.'
000000000000e527         db  0xff ; '.'
000000000000e528         db  0x38 ; '8'
000000000000e529         db  0x91 ; '.'
000000000000e52a         db  0xff ; '.'
000000000000e52b         db  0xff ; '.'
000000000000e52c         db  0x38 ; '8'
000000000000e52d         db  0x91 ; '.'
000000000000e52e         db  0xff ; '.'
000000000000e52f         db  0xff ; '.'
000000000000e530         db  0x38 ; '8'
000000000000e531         db  0x91 ; '.'
000000000000e532         db  0xff ; '.'
000000000000e533         db  0xff ; '.'
000000000000e534         db  0x38 ; '8'
000000000000e535         db  0x91 ; '.'
000000000000e536         db  0xff ; '.'
000000000000e537         db  0xff ; '.'
000000000000e538         db  0x38 ; '8'
000000000000e539         db  0x91 ; '.'
000000000000e53a         db  0xff ; '.'
000000000000e53b         db  0xff ; '.'
000000000000e53c         db  0x38 ; '8'
000000000000e53d         db  0x91 ; '.'
000000000000e53e         db  0xff ; '.'
000000000000e53f         db  0xff ; '.'
000000000000e540         db  0x38 ; '8'
000000000000e541         db  0x91 ; '.'
000000000000e542         db  0xff ; '.'
000000000000e543         db  0xff ; '.'
000000000000e544         db  0x38 ; '8'
000000000000e545         db  0x91 ; '.'
000000000000e546         db  0xff ; '.'
000000000000e547         db  0xff ; '.'
000000000000e548         db  0x38 ; '8'
000000000000e549         db  0x91 ; '.'
000000000000e54a         db  0xff ; '.'
000000000000e54b         db  0xff ; '.'
000000000000e54c         db  0x38 ; '8'
000000000000e54d         db  0x91 ; '.'
000000000000e54e         db  0xff ; '.'
000000000000e54f         db  0xff ; '.'
000000000000e550         db  0x38 ; '8'
000000000000e551         db  0x91 ; '.'
000000000000e552         db  0xff ; '.'
000000000000e553         db  0xff ; '.'
000000000000e554         db  0x38 ; '8'
000000000000e555         db  0x91 ; '.'
000000000000e556         db  0xff ; '.'
000000000000e557         db  0xff ; '.'
000000000000e558         db  0x38 ; '8'
000000000000e559         db  0x91 ; '.'
000000000000e55a         db  0xff ; '.'
000000000000e55b         db  0xff ; '.'
000000000000e55c         db  0x38 ; '8'
000000000000e55d         db  0x91 ; '.'
000000000000e55e         db  0xff ; '.'
000000000000e55f         db  0xff ; '.'
000000000000e560         db  0x38 ; '8'
000000000000e561         db  0x91 ; '.'
000000000000e562         db  0xff ; '.'
000000000000e563         db  0xff ; '.'
000000000000e564         db  0x38 ; '8'
000000000000e565         db  0x91 ; '.'
000000000000e566         db  0xff ; '.'
000000000000e567         db  0xff ; '.'
000000000000e568         db  0x10 ; '.'
000000000000e569         db  0x93 ; '.'
000000000000e56a         db  0xff ; '.'
000000000000e56b         db  0xff ; '.'
000000000000e56c         db  0xf8 ; '.'
000000000000e56d         db  0x92 ; '.'
000000000000e56e         db  0xff ; '.'
000000000000e56f         db  0xff ; '.'
000000000000e570         db  0xf8 ; '.'
000000000000e571         db  0x92 ; '.'
000000000000e572         db  0xff ; '.'
000000000000e573         db  0xff ; '.'
000000000000e574         db  0xe0 ; '.'
000000000000e575         db  0x92 ; '.'
000000000000e576         db  0xff ; '.'
000000000000e577         db  0xff ; '.'
000000000000e578         db  0xf8 ; '.'
000000000000e579         db  0x92 ; '.'
000000000000e57a         db  0xff ; '.'
000000000000e57b         db  0xff ; '.'
000000000000e57c         db  0xc8 ; '.'
000000000000e57d         db  0x92 ; '.'
000000000000e57e         db  0xff ; '.'
000000000000e57f         db  0xff ; '.'
000000000000e580         db  0xf8 ; '.'
000000000000e581         db  0x92 ; '.'
000000000000e582         db  0xff ; '.'
000000000000e583         db  0xff ; '.'
000000000000e584         db  0x38 ; '8'
000000000000e585         db  0x8f ; '.'
000000000000e586         db  0xff ; '.'
000000000000e587         db  0xff ; '.'
000000000000e588         db  0xf8 ; '.'
000000000000e589         db  0x92 ; '.'
000000000000e58a         db  0xff ; '.'
000000000000e58b         db  0xff ; '.'
000000000000e58c         db  0xf8 ; '.'
000000000000e58d         db  0x92 ; '.'
000000000000e58e         db  0xff ; '.'
000000000000e58f         db  0xff ; '.'
000000000000e590         db  0xf8 ; '.'
000000000000e591         db  0x92 ; '.'
000000000000e592         db  0xff ; '.'
000000000000e593         db  0xff ; '.'
000000000000e594         db  0xc8 ; '.'
000000000000e595         db  0x92 ; '.'
000000000000e596         db  0xff ; '.'
000000000000e597         db  0xff ; '.'
000000000000e598         db  0xc8 ; '.'
000000000000e599         db  0x92 ; '.'
000000000000e59a         db  0xff ; '.'
000000000000e59b         db  0xff ; '.'
000000000000e59c         db  0xc8 ; '.'
000000000000e59d         db  0x92 ; '.'
000000000000e59e         db  0xff ; '.'
000000000000e59f         db  0xff ; '.'
000000000000e5a0         db  0xc8 ; '.'
000000000000e5a1         db  0x92 ; '.'
000000000000e5a2         db  0xff ; '.'
000000000000e5a3         db  0xff ; '.'
000000000000e5a4         db  0xc8 ; '.'
000000000000e5a5         db  0x92 ; '.'
000000000000e5a6         db  0xff ; '.'
000000000000e5a7         db  0xff ; '.'
000000000000e5a8         db  0xc8 ; '.'
000000000000e5a9         db  0x92 ; '.'
000000000000e5aa         db  0xff ; '.'
000000000000e5ab         db  0xff ; '.'
000000000000e5ac         db  0xc8 ; '.'
000000000000e5ad         db  0x92 ; '.'
000000000000e5ae         db  0xff ; '.'
000000000000e5af         db  0xff ; '.'
000000000000e5b0         db  0xc8 ; '.'
000000000000e5b1         db  0x92 ; '.'
000000000000e5b2         db  0xff ; '.'
000000000000e5b3         db  0xff ; '.'
000000000000e5b4         db  0xc8 ; '.'
000000000000e5b5         db  0x92 ; '.'
000000000000e5b6         db  0xff ; '.'
000000000000e5b7         db  0xff ; '.'
000000000000e5b8         db  0xc8 ; '.'
000000000000e5b9         db  0x92 ; '.'
000000000000e5ba         db  0xff ; '.'
000000000000e5bb         db  0xff ; '.'
000000000000e5bc         db  0xc8 ; '.'
000000000000e5bd         db  0x92 ; '.'
000000000000e5be         db  0xff ; '.'
000000000000e5bf         db  0xff ; '.'
000000000000e5c0         db  0xc8 ; '.'
000000000000e5c1         db  0x92 ; '.'
000000000000e5c2         db  0xff ; '.'
000000000000e5c3         db  0xff ; '.'
000000000000e5c4         db  0xc8 ; '.'
000000000000e5c5         db  0x92 ; '.'
000000000000e5c6         db  0xff ; '.'
000000000000e5c7         db  0xff ; '.'
000000000000e5c8         db  0xc8 ; '.'
000000000000e5c9         db  0x92 ; '.'
000000000000e5ca         db  0xff ; '.'
000000000000e5cb         db  0xff ; '.'
000000000000e5cc         db  0xc8 ; '.'
000000000000e5cd         db  0x92 ; '.'
000000000000e5ce         db  0xff ; '.'
000000000000e5cf         db  0xff ; '.'
000000000000e5d0         db  0xc8 ; '.'
000000000000e5d1         db  0x92 ; '.'
000000000000e5d2         db  0xff ; '.'
000000000000e5d3         db  0xff ; '.'
000000000000e5d4         db  0xf8 ; '.'
000000000000e5d5         db  0x92 ; '.'
000000000000e5d6         db  0xff ; '.'
000000000000e5d7         db  0xff ; '.'
000000000000e5d8         db  0xf8 ; '.'
000000000000e5d9         db  0x92 ; '.'
000000000000e5da         db  0xff ; '.'
000000000000e5db         db  0xff ; '.'
000000000000e5dc         db  0xf8 ; '.'
000000000000e5dd         db  0x92 ; '.'
000000000000e5de         db  0xff ; '.'
000000000000e5df         db  0xff ; '.'
000000000000e5e0         db  0xf8 ; '.'
000000000000e5e1         db  0x92 ; '.'
000000000000e5e2         db  0xff ; '.'
000000000000e5e3         db  0xff ; '.'
000000000000e5e4         db  0x08 ; '.'
000000000000e5e5         db  0x8f ; '.'
000000000000e5e6         db  0xff ; '.'
000000000000e5e7         db  0xff ; '.'
000000000000e5e8         db  0x38 ; '8'
000000000000e5e9         db  0x91 ; '.'
000000000000e5ea         db  0xff ; '.'
000000000000e5eb         db  0xff ; '.'
000000000000e5ec         db  0xc8 ; '.'
000000000000e5ed         db  0x92 ; '.'
000000000000e5ee         db  0xff ; '.'
000000000000e5ef         db  0xff ; '.'
000000000000e5f0         db  0xc8 ; '.'
000000000000e5f1         db  0x92 ; '.'
000000000000e5f2         db  0xff ; '.'
000000000000e5f3         db  0xff ; '.'
000000000000e5f4         db  0xc8 ; '.'
000000000000e5f5         db  0x92 ; '.'
000000000000e5f6         db  0xff ; '.'
000000000000e5f7         db  0xff ; '.'
000000000000e5f8         db  0xc8 ; '.'
000000000000e5f9         db  0x92 ; '.'
000000000000e5fa         db  0xff ; '.'
000000000000e5fb         db  0xff ; '.'
000000000000e5fc         db  0xc8 ; '.'
000000000000e5fd         db  0x92 ; '.'
000000000000e5fe         db  0xff ; '.'
000000000000e5ff         db  0xff ; '.'
000000000000e600         db  0xc8 ; '.'
000000000000e601         db  0x92 ; '.'
000000000000e602         db  0xff ; '.'
000000000000e603         db  0xff ; '.'
000000000000e604         db  0xc8 ; '.'
000000000000e605         db  0x92 ; '.'
000000000000e606         db  0xff ; '.'
000000000000e607         db  0xff ; '.'
000000000000e608         db  0xc8 ; '.'
000000000000e609         db  0x92 ; '.'
000000000000e60a         db  0xff ; '.'
000000000000e60b         db  0xff ; '.'
000000000000e60c         db  0xc8 ; '.'
000000000000e60d         db  0x92 ; '.'
000000000000e60e         db  0xff ; '.'
000000000000e60f         db  0xff ; '.'
000000000000e610         db  0xc8 ; '.'
000000000000e611         db  0x92 ; '.'
000000000000e612         db  0xff ; '.'
000000000000e613         db  0xff ; '.'
000000000000e614         db  0xc8 ; '.'
000000000000e615         db  0x92 ; '.'
000000000000e616         db  0xff ; '.'
000000000000e617         db  0xff ; '.'
000000000000e618         db  0xc8 ; '.'
000000000000e619         db  0x92 ; '.'
000000000000e61a         db  0xff ; '.'
000000000000e61b         db  0xff ; '.'
000000000000e61c         db  0xc8 ; '.'
000000000000e61d         db  0x92 ; '.'
000000000000e61e         db  0xff ; '.'
000000000000e61f         db  0xff ; '.'
000000000000e620         db  0xc8 ; '.'
000000000000e621         db  0x92 ; '.'
000000000000e622         db  0xff ; '.'
000000000000e623         db  0xff ; '.'
000000000000e624         db  0xc8 ; '.'
000000000000e625         db  0x92 ; '.'
000000000000e626         db  0xff ; '.'
000000000000e627         db  0xff ; '.'
000000000000e628         db  0xc8 ; '.'
000000000000e629         db  0x92 ; '.'
000000000000e62a         db  0xff ; '.'
000000000000e62b         db  0xff ; '.'
000000000000e62c         db  0xc8 ; '.'
000000000000e62d         db  0x92 ; '.'
000000000000e62e         db  0xff ; '.'
000000000000e62f         db  0xff ; '.'
000000000000e630         db  0xc8 ; '.'
000000000000e631         db  0x92 ; '.'
000000000000e632         db  0xff ; '.'
000000000000e633         db  0xff ; '.'
000000000000e634         db  0xc8 ; '.'
000000000000e635         db  0x92 ; '.'
000000000000e636         db  0xff ; '.'
000000000000e637         db  0xff ; '.'
000000000000e638         db  0xc8 ; '.'
000000000000e639         db  0x92 ; '.'
000000000000e63a         db  0xff ; '.'
000000000000e63b         db  0xff ; '.'
000000000000e63c         db  0xc8 ; '.'
000000000000e63d         db  0x92 ; '.'
000000000000e63e         db  0xff ; '.'
000000000000e63f         db  0xff ; '.'
000000000000e640         db  0xc8 ; '.'
000000000000e641         db  0x92 ; '.'
000000000000e642         db  0xff ; '.'
000000000000e643         db  0xff ; '.'
000000000000e644         db  0xc8 ; '.'
000000000000e645         db  0x92 ; '.'
000000000000e646         db  0xff ; '.'
000000000000e647         db  0xff ; '.'
000000000000e648         db  0xc8 ; '.'
000000000000e649         db  0x92 ; '.'
000000000000e64a         db  0xff ; '.'
000000000000e64b         db  0xff ; '.'
000000000000e64c         db  0xc8 ; '.'
000000000000e64d         db  0x92 ; '.'
000000000000e64e         db  0xff ; '.'
000000000000e64f         db  0xff ; '.'
000000000000e650         db  0xc8 ; '.'
000000000000e651         db  0x92 ; '.'
000000000000e652         db  0xff ; '.'
000000000000e653         db  0xff ; '.'
000000000000e654         db  0xf8 ; '.'
000000000000e655         db  0x92 ; '.'
000000000000e656         db  0xff ; '.'
000000000000e657         db  0xff ; '.'
000000000000e658         db  0xc8 ; '.'
000000000000e659         db  0x91 ; '.'
000000000000e65a         db  0xff ; '.'
000000000000e65b         db  0xff ; '.'
000000000000e65c         db  0xc8 ; '.'
000000000000e65d         db  0x92 ; '.'
000000000000e65e         db  0xff ; '.'
000000000000e65f         db  0xff ; '.'
000000000000e660         db  0xf8 ; '.'
000000000000e661         db  0x92 ; '.'
000000000000e662         db  0xff ; '.'
000000000000e663         db  0xff ; '.'
000000000000e664         db  0xc8 ; '.'
000000000000e665         db  0x92 ; '.'
000000000000e666         db  0xff ; '.'
000000000000e667         db  0xff ; '.'
000000000000e668         db  0xf8 ; '.'
000000000000e669         db  0x92 ; '.'
000000000000e66a         db  0xff ; '.'
000000000000e66b         db  0xff ; '.'
000000000000e66c         db  0xc8 ; '.'
000000000000e66d         db  0x92 ; '.'
000000000000e66e         db  0xff ; '.'
000000000000e66f         db  0xff ; '.'
000000000000e670         db  0xc8 ; '.'
000000000000e671         db  0x92 ; '.'
000000000000e672         db  0xff ; '.'
000000000000e673         db  0xff ; '.'
000000000000e674         db  0xc8 ; '.'
000000000000e675         db  0x92 ; '.'
000000000000e676         db  0xff ; '.'
000000000000e677         db  0xff ; '.'
000000000000e678         db  0xc8 ; '.'
000000000000e679         db  0x92 ; '.'
000000000000e67a         db  0xff ; '.'
000000000000e67b         db  0xff ; '.'
000000000000e67c         db  0xc8 ; '.'
000000000000e67d         db  0x92 ; '.'
000000000000e67e         db  0xff ; '.'
000000000000e67f         db  0xff ; '.'
000000000000e680         db  0xc8 ; '.'
000000000000e681         db  0x92 ; '.'
000000000000e682         db  0xff ; '.'
000000000000e683         db  0xff ; '.'
000000000000e684         db  0xc8 ; '.'
000000000000e685         db  0x92 ; '.'
000000000000e686         db  0xff ; '.'
000000000000e687         db  0xff ; '.'
000000000000e688         db  0xc8 ; '.'
000000000000e689         db  0x92 ; '.'
000000000000e68a         db  0xff ; '.'
000000000000e68b         db  0xff ; '.'
000000000000e68c         db  0xc8 ; '.'
000000000000e68d         db  0x92 ; '.'
000000000000e68e         db  0xff ; '.'
000000000000e68f         db  0xff ; '.'
000000000000e690         db  0xc8 ; '.'
000000000000e691         db  0x92 ; '.'
000000000000e692         db  0xff ; '.'
000000000000e693         db  0xff ; '.'
000000000000e694         db  0xc8 ; '.'
000000000000e695         db  0x92 ; '.'
000000000000e696         db  0xff ; '.'
000000000000e697         db  0xff ; '.'
000000000000e698         db  0xc8 ; '.'
000000000000e699         db  0x92 ; '.'
000000000000e69a         db  0xff ; '.'
000000000000e69b         db  0xff ; '.'
000000000000e69c         db  0xc8 ; '.'
000000000000e69d         db  0x92 ; '.'
000000000000e69e         db  0xff ; '.'
000000000000e69f         db  0xff ; '.'
000000000000e6a0         db  0xc8 ; '.'
000000000000e6a1         db  0x92 ; '.'
000000000000e6a2         db  0xff ; '.'
000000000000e6a3         db  0xff ; '.'
000000000000e6a4         db  0xc8 ; '.'
000000000000e6a5         db  0x92 ; '.'
000000000000e6a6         db  0xff ; '.'
000000000000e6a7         db  0xff ; '.'
000000000000e6a8         db  0xc8 ; '.'
000000000000e6a9         db  0x92 ; '.'
000000000000e6aa         db  0xff ; '.'
000000000000e6ab         db  0xff ; '.'
000000000000e6ac         db  0xc8 ; '.'
000000000000e6ad         db  0x92 ; '.'
000000000000e6ae         db  0xff ; '.'
000000000000e6af         db  0xff ; '.'
000000000000e6b0         db  0xc8 ; '.'
000000000000e6b1         db  0x92 ; '.'
000000000000e6b2         db  0xff ; '.'
000000000000e6b3         db  0xff ; '.'
000000000000e6b4         db  0xc8 ; '.'
000000000000e6b5         db  0x92 ; '.'
000000000000e6b6         db  0xff ; '.'
000000000000e6b7         db  0xff ; '.'
000000000000e6b8         db  0xc8 ; '.'
000000000000e6b9         db  0x92 ; '.'
000000000000e6ba         db  0xff ; '.'
000000000000e6bb         db  0xff ; '.'
000000000000e6bc         db  0xc8 ; '.'
000000000000e6bd         db  0x92 ; '.'
000000000000e6be         db  0xff ; '.'
000000000000e6bf         db  0xff ; '.'
000000000000e6c0         db  0xc8 ; '.'
000000000000e6c1         db  0x92 ; '.'
000000000000e6c2         db  0xff ; '.'
000000000000e6c3         db  0xff ; '.'
000000000000e6c4         db  0xc8 ; '.'
000000000000e6c5         db  0x92 ; '.'
000000000000e6c6         db  0xff ; '.'
000000000000e6c7         db  0xff ; '.'
000000000000e6c8         db  0xc8 ; '.'
000000000000e6c9         db  0x92 ; '.'
000000000000e6ca         db  0xff ; '.'
000000000000e6cb         db  0xff ; '.'
000000000000e6cc         db  0xc8 ; '.'
000000000000e6cd         db  0x92 ; '.'
000000000000e6ce         db  0xff ; '.'
000000000000e6cf         db  0xff ; '.'
000000000000e6d0         db  0xc8 ; '.'
000000000000e6d1         db  0x92 ; '.'
000000000000e6d2         db  0xff ; '.'
000000000000e6d3         db  0xff ; '.'
000000000000e6d4         db  0x38 ; '8'
000000000000e6d5         db  0x8e ; '.'
000000000000e6d6         db  0xff ; '.'
000000000000e6d7         db  0xff ; '.'
000000000000e6d8         db  0xf8 ; '.'
000000000000e6d9         db  0x92 ; '.'
000000000000e6da         db  0xff ; '.'
000000000000e6db         db  0xff ; '.'
000000000000e6dc         db  0x38 ; '8'
000000000000e6dd         db  0x8e ; '.'
000000000000e6de         db  0xff ; '.'
000000000000e6df         db  0xff ; '.'
000000000000e6e0         db  0xe0 ; '.'
000000000000e6e1         db  0x92 ; '.'
000000000000e6e2         db  0xff ; '.'
000000000000e6e3         db  0xff ; '.'
000000000000e6e4         db  0x00 ; '.'
000000000000e6e5         db  0x00 ; '.'
000000000000e6e6         db  0x00 ; '.'
000000000000e6e7         db  0x00 ; '.'
000000000000e6e8         db  0x00 ; '.'
000000000000e6e9         db  0x00 ; '.'
000000000000e6ea         db  0x00 ; '.'
000000000000e6eb         db  0x00 ; '.'
000000000000e6ec         db  0x00 ; '.'
000000000000e6ed         db  0x00 ; '.'
000000000000e6ee         db  0x00 ; '.'
000000000000e6ef         db  0x00 ; '.'
000000000000e6f0         db  0x00 ; '.'
000000000000e6f1         db  0x00 ; '.'
000000000000e6f2         db  0x00 ; '.'
000000000000e6f3         db  0x00 ; '.'
000000000000e6f4         db  0x00 ; '.'
000000000000e6f5         db  0x00 ; '.'
000000000000e6f6         db  0x00 ; '.'
000000000000e6f7         db  0x00 ; '.'
000000000000e6f8         db  0x00 ; '.'
000000000000e6f9         db  0x00 ; '.'
000000000000e6fa         db  0x00 ; '.'
000000000000e6fb         db  0x00 ; '.'
000000000000e6fc         db  0x00 ; '.'
000000000000e6fd         db  0x00 ; '.'
000000000000e6fe         db  0x00 ; '.'
000000000000e6ff         db  0x00 ; '.'
                     quoting_style_vals:
000000000000e700         db  0x00 ; '.'
000000000000e701         db  0x00 ; '.'
000000000000e702         db  0x00 ; '.'
000000000000e703         db  0x00 ; '.'
000000000000e704         db  0x01 ; '.'
000000000000e705         db  0x00 ; '.'
000000000000e706         db  0x00 ; '.'
000000000000e707         db  0x00 ; '.'
000000000000e708         db  0x02 ; '.'
000000000000e709         db  0x00 ; '.'
000000000000e70a         db  0x00 ; '.'
000000000000e70b         db  0x00 ; '.'
000000000000e70c         db  0x03 ; '.'
000000000000e70d         db  0x00 ; '.'
000000000000e70e         db  0x00 ; '.'
000000000000e70f         db  0x00 ; '.'
000000000000e710         db  0x04 ; '.'
000000000000e711         db  0x00 ; '.'
000000000000e712         db  0x00 ; '.'
000000000000e713         db  0x00 ; '.'
000000000000e714         db  0x05 ; '.'
000000000000e715         db  0x00 ; '.'
000000000000e716         db  0x00 ; '.'
000000000000e717         db  0x00 ; '.'
000000000000e718         db  0x06 ; '.'
000000000000e719         db  0x00 ; '.'
000000000000e71a         db  0x00 ; '.'
000000000000e71b         db  0x00 ; '.'
000000000000e71c         db  0x07 ; '.'
000000000000e71d         db  0x00 ; '.'
000000000000e71e         db  0x00 ; '.'
000000000000e71f         db  0x00 ; '.'
000000000000e720         db  0x08 ; '.'
000000000000e721         db  0x00 ; '.'
000000000000e722         db  0x00 ; '.'
000000000000e723         db  0x00 ; '.'
000000000000e724         db  0x09 ; '.'
000000000000e725         db  0x00 ; '.'
000000000000e726         db  0x00 ; '.'
000000000000e727         db  0x00 ; '.'
                     aUnableToDispla:
000000000000e728         db         "unable to display error message", 0        ; DATA XREF=verror_at_line+135
                     aSSSn:
000000000000e748         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
000000000000e754         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
000000000000e75b         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
000000000000e75c         db  0x43 ; 'C'
000000000000e75d         db  0x29 ; ')'
000000000000e75e         db  0x00 ; '.'
                     aWrittenBySn:
000000000000e75f         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
000000000000e76f         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
000000000000e786         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
000000000000e7a2         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
000000000000e7b7         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
000000000000e7cd         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
000000000000e7e1         align      8
                     aNlicenseGplv3G:
000000000000e7e8         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
000000000000e8b4         align      8
                     aWrittenBySSSna:
000000000000e8b8         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_e8d8:        // aWrittenBySSSns
000000000000e8d8         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
000000000000e8fc         align      256
                     aWrittenBySSSns_e900:        // aWrittenBySSSns
000000000000e900         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_e928:        // aWrittenBySSSns
000000000000e928         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
000000000000e954         align      8
                     aWrittenBySSSns_e958:        // aWrittenBySSSns
000000000000e958         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
000000000000e988         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
000000000000e9bc         align      64
                     aWrittenBySSSns_e9c0:        // aWrittenBySSSns
000000000000e9c0         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
000000000000e9fc         align      512
                     aGeneralHelpUsi:
000000000000ea00         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
000000000000ea41         align      4
                     switch_table_ea44:        // switch_table
000000000000ea44         dd         version_etc_arn.loc_8ec6-switch_table_ea44, version_etc_arn.loc_8f58-switch_table_ea44, version_etc_arn.loc_8f98-switch_table_ea44, version_etc_arn.loc_8fe0-switch_table_ea44 ; switch table used at 0x8e44 containing 10 entries, DATA XREF=version_etc_arn+150
000000000000ea54         dd         version_etc_arn.loc_9030-switch_table_ea44, version_etc_arn.loc_9088-switch_table_ea44, version_etc_arn.loc_90b8-switch_table_ea44, version_etc_arn.loc_9120-switch_table_ea44
000000000000ea64         dd         version_etc_arn.loc_8e50-switch_table_ea44, version_etc_arn.loc_8f00-switch_table_ea44
000000000000ea6c         align      128
                     version_etc_copyright:
000000000000ea80         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste_eaaf:        // aMemoryExhauste
000000000000eaaf         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aCoreutils831li:
000000000000eac0         db         "../coreutils-8.31/lib/xstrtol.c", 0        ; DATA XREF=xstrtoumax+908
                     a0StrtolbaseStr:
000000000000eae0         db         "0 <= strtol_base && strtol_base <= 36", 0  ; DATA XREF=xstrtoumax+915
000000000000eb06         align      8
                     switch_table_eb08:        // switch_table
000000000000eb08         dd         xstrtoumax.loc_9976-switch_table_eb08, 2 dup (xstrtoumax.loc_986c-switch_table_eb08), xstrtoumax.loc_9953-switch_table_eb08, xstrtoumax.loc_986c-switch_table_eb08 ; switch table used at 0x9826 containing 54 entries, DATA XREF=xstrtoumax+452
000000000000eb1c         dd         xstrtoumax.loc_998c-switch_table_eb08, 3 dup (xstrtoumax.loc_986c-switch_table_eb08), xstrtoumax.loc_990f-switch_table_eb08, xstrtoumax.loc_986c-switch_table_eb08
000000000000eb34         dd         xstrtoumax.loc_9828-switch_table_eb08, 2 dup (xstrtoumax.loc_986c-switch_table_eb08), xstrtoumax.loc_9930-switch_table_eb08, 3 dup (xstrtoumax.loc_986c-switch_table_eb08)
000000000000eb50         dd         xstrtoumax.loc_98ef-switch_table_eb08, 4 dup (xstrtoumax.loc_986c-switch_table_eb08), xstrtoumax.loc_98ca-switch_table_eb08, xstrtoumax.loc_98a4-switch_table_eb08
000000000000eb6c         dd         7 dup (xstrtoumax.loc_986c-switch_table_eb08), xstrtoumax.loc_988d-switch_table_eb08, xstrtoumax.loc_9850-switch_table_eb08, 3 dup (xstrtoumax.loc_986c-switch_table_eb08)
000000000000eb9c         dd         xstrtoumax.loc_998c-switch_table_eb08, 3 dup (xstrtoumax.loc_986c-switch_table_eb08), xstrtoumax.loc_990f-switch_table_eb08, xstrtoumax.loc_986c-switch_table_eb08
000000000000ebb4         dd         xstrtoumax.loc_9828-switch_table_eb08, 6 dup (xstrtoumax.loc_986c-switch_table_eb08), xstrtoumax.loc_98ef-switch_table_eb08, 2 dup (xstrtoumax.loc_986c-switch_table_eb08)
000000000000ebdc         dd         xstrtoumax.loc_9877-switch_table_eb08
                     __PRETTY_FUNCTION__.4162:
000000000000ebe0         db         "xstrtoumax", 0                             ; DATA XREF=xstrtoumax+901
                     aInvalidArgumen:
000000000000ebeb         db         "invalid argument %s for %s", 0             ; DATA XREF=argmatch_invalid+96
                     aAmbiguousArgum:
000000000000ec06         db         "ambiguous argument %s for %s", 0           ; DATA XREF=argmatch_invalid+21
                     aValidArguments:
000000000000ec23         db         "Valid arguments are:", 0                   ; DATA XREF=argmatch_valid+18
                     aNS:
000000000000ec38         db         "\n  - %s", 0                               ; DATA XREF=argmatch_valid+102
000000000000ec40         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
000000000000ec41         db  0x00 ; '.'
                     aPosix:
000000000000ec42         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
000000000000ec48         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
000000000000ec4e         align      16
                     switch_table_ec50:        // switch_table
000000000000ec50         dd         vasnprintf.loc_b476-switch_table_ec50, vasnprintf.loc_af10-switch_table_ec50, vasnprintf.loc_aee0-switch_table_ec50, vasnprintf.loc_ae58-switch_table_ec50 ; switch table used at 0xaaab containing 18 entries, DATA XREF=vasnprintf+1357
000000000000ec60         dd         vasnprintf.loc_ae18-switch_table_ec50, 2 dup (vasnprintf.loc_abe8-switch_table_ec50), 4 dup (vasnprintf.loc_aab0-switch_table_ec50), vasnprintf.loc_ad98-switch_table_ec50
000000000000ec80         dd         vasnprintf.loc_ad10-switch_table_ec50, 2 dup (vasnprintf.loc_abe8-switch_table_ec50), 3 dup (vasnprintf.loc_aab0-switch_table_ec50)
                     switch_table_ec98:        // switch_table
000000000000ec98         dd         vasnprintf.loc_b2c0-switch_table_ec98, vasnprintf.loc_b2e0-switch_table_ec98, vasnprintf.loc_b2d0-switch_table_ec98, 2 dup (vasnprintf.loc_b190-switch_table_ec98) ; switch table used at 0xb050 containing 5 entries, DATA XREF=vasnprintf+2798
                     aNull:
000000000000ecac         db         "(NULL)", 0                                 ; DATA XREF=printf_fetchargs+24
000000000000ecb3         db  0x00 ; '.'
000000000000ecb4         db  0x00 ; '.'
000000000000ecb5         db  0x00 ; '.'
000000000000ecb6         db  0x00 ; '.'
000000000000ecb7         db  0x00 ; '.'
000000000000ecb8         db  0x00 ; '.'
000000000000ecb9         db  0x00 ; '.'
000000000000ecba         db  0x00 ; '.'
000000000000ecbb         db  0x00 ; '.'
000000000000ecbc         db  0x00 ; '.'
000000000000ecbd         db  0x00 ; '.'
000000000000ecbe         db  0x00 ; '.'
000000000000ecbf         db  0x00 ; '.'
000000000000ecc0         db  0x20 ; ' '                                         ; DATA XREF=printf_fetchargs+10
000000000000ecc1         db  0xca ; '.'
000000000000ecc2         db  0xff ; '.'
000000000000ecc3         db  0xff ; '.'
000000000000ecc4         db  0x6c ; 'l'
000000000000ecc5         db  0xca ; '.'
000000000000ecc6         db  0xff ; '.'
000000000000ecc7         db  0xff ; '.'
000000000000ecc8         db  0x6c ; 'l'
000000000000ecc9         db  0xca ; '.'
000000000000ecca         db  0xff ; '.'
000000000000eccb         db  0xff ; '.'
000000000000eccc         db  0x8e ; '.'
000000000000eccd         db  0xca ; '.'
000000000000ecce         db  0xff ; '.'
000000000000eccf         db  0xff ; '.'
000000000000ecd0         db  0x8e ; '.'
000000000000ecd1         db  0xca ; '.'
000000000000ecd2         db  0xff ; '.'
000000000000ecd3         db  0xff ; '.'
000000000000ecd4         db  0x4a ; 'J'
000000000000ecd5         db  0xca ; '.'
000000000000ecd6         db  0xff ; '.'
000000000000ecd7         db  0xff ; '.'
000000000000ecd8         db  0x4a ; 'J'
000000000000ecd9         db  0xca ; '.'
000000000000ecda         db  0xff ; '.'
000000000000ecdb         db  0xff ; '.'
000000000000ecdc         db  0x26 ; '&'
000000000000ecdd         db  0xca ; '.'
000000000000ecde         db  0xff ; '.'
000000000000ecdf         db  0xff ; '.'
000000000000ece0         db  0x26 ; '&'
000000000000ece1         db  0xca ; '.'
000000000000ece2         db  0xff ; '.'
000000000000ece3         db  0xff ; '.'
000000000000ece4         db  0x26 ; '&'
000000000000ece5         db  0xca ; '.'
000000000000ece6         db  0xff ; '.'
000000000000ece7         db  0xff ; '.'
000000000000ece8         db  0x26 ; '&'
000000000000ece9         db  0xca ; '.'
000000000000ecea         db  0xff ; '.'
000000000000eceb         db  0xff ; '.'
000000000000ecec         db  0xe2 ; '.'
000000000000eced         db  0xca ; '.'
000000000000ecee         db  0xff ; '.'
000000000000ecef         db  0xff ; '.'
000000000000ecf0         db  0xf0 ; '.'
000000000000ecf1         db  0xc9 ; '.'
000000000000ecf2         db  0xff ; '.'
000000000000ecf3         db  0xff ; '.'
000000000000ecf4         db  0x4a ; 'J'
000000000000ecf5         db  0xca ; '.'
000000000000ecf6         db  0xff ; '.'
000000000000ecf7         db  0xff ; '.'
000000000000ecf8         db  0x4a ; 'J'
000000000000ecf9         db  0xca ; '.'
000000000000ecfa         db  0xff ; '.'
000000000000ecfb         db  0xff ; '.'
000000000000ecfc         db  0xb4 ; '.'
000000000000ecfd         db  0xca ; '.'
000000000000ecfe         db  0xff ; '.'
000000000000ecff         db  0xff ; '.'
000000000000ed00         db  0x10 ; '.'
000000000000ed01         db  0xcb ; '.'
000000000000ed02         db  0xff ; '.'
000000000000ed03         db  0xff ; '.'
000000000000ed04         db  0x26 ; '&'
000000000000ed05         db  0xca ; '.'
000000000000ed06         db  0xff ; '.'
000000000000ed07         db  0xff ; '.'
000000000000ed08         db  0x26 ; '&'
000000000000ed09         db  0xca ; '.'
000000000000ed0a         db  0xff ; '.'
000000000000ed0b         db  0xff ; '.'
000000000000ed0c         db  0x26 ; '&'
000000000000ed0d         db  0xca ; '.'
000000000000ed0e         db  0xff ; '.'
000000000000ed0f         db  0xff ; '.'
000000000000ed10         db  0x26 ; '&'
000000000000ed11         db  0xca ; '.'
000000000000ed12         db  0xff ; '.'
000000000000ed13         db  0xff ; '.'
000000000000ed14         db  0x26 ; '&'
000000000000ed15         db  0xca ; '.'
000000000000ed16         db  0xff ; '.'
000000000000ed17         db  0xff ; '.'
000000000000ed18         db  0x26 ; '&'
000000000000ed19         db  0xca ; '.'
000000000000ed1a         db  0xff ; '.'
000000000000ed1b         db  0xff ; '.'
000000000000ed1c         db  0x00 ; '.'
000000000000ed1d         db  0x00 ; '.'
000000000000ed1e         db  0x00 ; '.'
000000000000ed1f         db  0x00 ; '.'
                     wide_null_string.2696:
000000000000ed20         db  0x28 ; '('                                         ; DATA XREF=printf_fetchargs+17
000000000000ed21         db  0x00 ; '.'
000000000000ed22         db  0x00 ; '.'
000000000000ed23         db  0x00 ; '.'
000000000000ed24         db  0x4e ; 'N'
000000000000ed25         db  0x00 ; '.'
000000000000ed26         db  0x00 ; '.'
000000000000ed27         db  0x00 ; '.'
000000000000ed28         db  0x55 ; 'U'
000000000000ed29         db  0x00 ; '.'
000000000000ed2a         db  0x00 ; '.'
000000000000ed2b         db  0x00 ; '.'
000000000000ed2c         db  0x4c ; 'L'
000000000000ed2d         db  0x00 ; '.'
000000000000ed2e         db  0x00 ; '.'
000000000000ed2f         db  0x00 ; '.'
000000000000ed30         db  0x4c ; 'L'
000000000000ed31         db  0x00 ; '.'
000000000000ed32         db  0x00 ; '.'
000000000000ed33         db  0x00 ; '.'
000000000000ed34         db  0x29 ; ')'
000000000000ed35         db  0x00 ; '.'
000000000000ed36         db  0x00 ; '.'
000000000000ed37         db  0x00 ; '.'
000000000000ed38         db  0x00 ; '.'
000000000000ed39         db  0x00 ; '.'
000000000000ed3a         db  0x00 ; '.'
000000000000ed3b         db  0x00 ; '.'
                     switch_table_ed3c:        // switch_table
000000000000ed3c         dd         printf_parse.loc_bb2b-switch_table_ed3c, 27 dup (printf_parse.loc_c0bb-switch_table_ed3c), printf_parse.loc_c02b-switch_table_ed3c, printf_parse.loc_c0bb-switch_table_ed3c ; switch table used at 0xbab5 containing 84 entries, DATA XREF=printf_parse+564
000000000000edb4         dd         printf_parse.loc_c04c-switch_table_ed3c, printf_parse.loc_c0bb-switch_table_ed3c, 3 dup (printf_parse.loc_c02b-switch_table_ed3c), 11 dup (printf_parse.loc_c0bb-switch_table_ed3c)
000000000000edf4         dd         printf_parse.loc_bab7-switch_table_ed3c, 4 dup (printf_parse.loc_c0bb-switch_table_ed3c), printf_parse.loc_c05c-switch_table_ed3c, 8 dup (printf_parse.loc_c0bb-switch_table_ed3c)
000000000000ee2c         dd         printf_parse.loc_c02b-switch_table_ed3c, printf_parse.loc_c0bb-switch_table_ed3c, printf_parse.loc_bfb8-switch_table_ed3c, printf_parse.loc_bfcb-switch_table_ed3c
000000000000ee3c         dd         3 dup (printf_parse.loc_c02b-switch_table_ed3c), printf_parse.loc_c0bb-switch_table_ed3c, printf_parse.loc_bfcb-switch_table_ed3c, 4 dup (printf_parse.loc_c0bb-switch_table_ed3c)
000000000000ee60         dd         printf_parse.loc_bf6c-switch_table_ed3c, printf_parse.loc_c05c-switch_table_ed3c, printf_parse.loc_c0b0-switch_table_ed3c, 2 dup (printf_parse.loc_c0bb-switch_table_ed3c)
000000000000ee74         dd         printf_parse.loc_c018-switch_table_ed3c, printf_parse.loc_c0bb-switch_table_ed3c, printf_parse.loc_c05c-switch_table_ed3c, 2 dup (printf_parse.loc_c0bb-switch_table_ed3c)
000000000000ee88         dd         printf_parse.loc_c05c-switch_table_ed3c


        ; Section .eh_frame_hdr
        ; Range: [0xee8c; 0xf260[ (980 bytes)
        ; File offset : [61068; 62048[ (980 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000ee8c         db  0x01 ; '.'
000000000000ee8d         db  0x1b ; '.'
000000000000ee8e         db  0x03 ; '.'
000000000000ee8f         db  0x3b ; ';'
000000000000ee90         db  0xd0 ; '.'
000000000000ee91         db  0x03 ; '.'
000000000000ee92         db  0x00 ; '.'
000000000000ee93         db  0x00 ; '.'
000000000000ee94         db  0x79 ; 'y'
000000000000ee95         db  0x00 ; '.'
000000000000ee96         db  0x00 ; '.'
000000000000ee97         db  0x00 ; '.'
000000000000ee98         db  0x74 ; 't'
000000000000ee99         db  0x2b ; '+'
000000000000ee9a         db  0xff ; '.'
000000000000ee9b         db  0xff ; '.'
000000000000ee9c         db  0x1c ; '.'
000000000000ee9d         db  0x04 ; '.'
000000000000ee9e         db  0x00 ; '.'
000000000000ee9f         db  0x00 ; '.'
000000000000eea0         db  0x14 ; '.'
000000000000eea1         db  0x30 ; '0'
000000000000eea2         db  0xff ; '.'
000000000000eea3         db  0xff ; '.'
000000000000eea4         db  0x44 ; 'D'
000000000000eea5         db  0x04 ; '.'
000000000000eea6         db  0x00 ; '.'
000000000000eea7         db  0x00 ; '.'
000000000000eea8         db  0x24 ; '$'
000000000000eea9         db  0x30 ; '0'
000000000000eeaa         db  0xff ; '.'
000000000000eeab         db  0xff ; '.'
000000000000eeac         db  0x18 ; '.'
000000000000eead         db  0x0a ; '.'
000000000000eeae         db  0x00 ; '.'
000000000000eeaf         db  0x00 ; '.'
000000000000eeb0         db  0xf4 ; '.'
000000000000eeb1         db  0x4d ; 'M'
000000000000eeb2         db  0xff ; '.'
000000000000eeb3         db  0xff ; '.'
000000000000eeb4         db  0xec ; '.'
000000000000eeb5         db  0x03 ; '.'
000000000000eeb6         db  0x00 ; '.'
000000000000eeb7         db  0x00 ; '.'
000000000000eeb8         db  0x04 ; '.'
000000000000eeb9         db  0x4f ; 'O'
000000000000eeba         db  0xff ; '.'
000000000000eebb         db  0xff ; '.'
000000000000eebc         db  0x5c ; '\'
000000000000eebd         db  0x04 ; '.'
000000000000eebe         db  0x00 ; '.'
000000000000eebf         db  0x00 ; '.'
000000000000eec0         db  0x14 ; '.'
000000000000eec1         db  0x4f ; 'O'
000000000000eec2         db  0xff ; '.'
000000000000eec3         db  0xff ; '.'
000000000000eec4         db  0x70 ; 'p'
000000000000eec5         db  0x04 ; '.'
000000000000eec6         db  0x00 ; '.'
000000000000eec7         db  0x00 ; '.'
000000000000eec8         db  0x24 ; '$'
000000000000eec9         db  0x4f ; 'O'
000000000000eeca         db  0xff ; '.'
000000000000eecb         db  0xff ; '.'
000000000000eecc         db  0x84 ; '.'
000000000000eecd         db  0x04 ; '.'
000000000000eece         db  0x00 ; '.'
000000000000eecf         db  0x00 ; '.'
000000000000eed0         db  0xb4 ; '.'
000000000000eed1         db  0x52 ; 'R'
000000000000eed2         db  0xff ; '.'
000000000000eed3         db  0xff ; '.'
000000000000eed4         db  0xf0 ; '.'
000000000000eed5         db  0x04 ; '.'
000000000000eed6         db  0x00 ; '.'
000000000000eed7         db  0x00 ; '.'
000000000000eed8         db  0xc4 ; '.'
000000000000eed9         db  0x53 ; 'S'
000000000000eeda         db  0xff ; '.'
000000000000eedb         db  0xff ; '.'
000000000000eedc         db  0x1c ; '.'
000000000000eedd         db  0x05 ; '.'
000000000000eede         db  0x00 ; '.'
000000000000eedf         db  0x00 ; '.'
000000000000eee0         db  0x14 ; '.'
000000000000eee1         db  0x55 ; 'U'
000000000000eee2         db  0xff ; '.'
000000000000eee3         db  0xff ; '.'
000000000000eee4         db  0x58 ; 'X'
000000000000eee5         db  0x05 ; '.'
000000000000eee6         db  0x00 ; '.'
000000000000eee7         db  0x00 ; '.'
000000000000eee8         db  0x24 ; '$'
000000000000eee9         db  0x56 ; 'V'
000000000000eeea         db  0xff ; '.'
000000000000eeeb         db  0xff ; '.'
000000000000eeec         db  0x94 ; '.'
000000000000eeed         db  0x05 ; '.'
000000000000eeee         db  0x00 ; '.'
000000000000eeef         db  0x00 ; '.'
000000000000eef0         db  0x24 ; '$'
000000000000eef1         db  0x57 ; 'W'
000000000000eef2         db  0xff ; '.'
000000000000eef3         db  0xff ; '.'
000000000000eef4         db  0xd8 ; '.'
000000000000eef5         db  0x05 ; '.'
000000000000eef6         db  0x00 ; '.'
000000000000eef7         db  0x00 ; '.'
000000000000eef8         db  0xa4 ; '.'
000000000000eef9         db  0x58 ; 'X'
000000000000eefa         db  0xff ; '.'
000000000000eefb         db  0xff ; '.'
000000000000eefc         db  0x24 ; '$'
000000000000eefd         db  0x06 ; '.'
000000000000eefe         db  0x00 ; '.'
000000000000eeff         db  0x00 ; '.'
000000000000ef00         db  0xe4 ; '.'
000000000000ef01         db  0x58 ; 'X'
000000000000ef02         db  0xff ; '.'
000000000000ef03         db  0xff ; '.'
000000000000ef04         db  0x40 ; '@'
000000000000ef05         db  0x06 ; '.'
000000000000ef06         db  0x00 ; '.'
000000000000ef07         db  0x00 ; '.'
000000000000ef08         db  0x04 ; '.'
000000000000ef09         db  0x5a ; 'Z'
000000000000ef0a         db  0xff ; '.'
000000000000ef0b         db  0xff ; '.'
000000000000ef0c         db  0x9c ; '.'
000000000000ef0d         db  0x06 ; '.'
000000000000ef0e         db  0x00 ; '.'
000000000000ef0f         db  0x00 ; '.'
000000000000ef10         db  0xb4 ; '.'
000000000000ef11         db  0x5a ; 'Z'
000000000000ef12         db  0xff ; '.'
000000000000ef13         db  0xff ; '.'
000000000000ef14         db  0xc8 ; '.'
000000000000ef15         db  0x06 ; '.'
000000000000ef16         db  0x00 ; '.'
000000000000ef17         db  0x00 ; '.'
000000000000ef18         db  0x94 ; '.'
000000000000ef19         db  0x5b ; '['
000000000000ef1a         db  0xff ; '.'
000000000000ef1b         db  0xff ; '.'
000000000000ef1c         db  0xf4 ; '.'
000000000000ef1d         db  0x06 ; '.'
000000000000ef1e         db  0x00 ; '.'
000000000000ef1f         db  0x00 ; '.'
000000000000ef20         db  0xe4 ; '.'
000000000000ef21         db  0x5b ; '['
000000000000ef22         db  0xff ; '.'
000000000000ef23         db  0xff ; '.'
000000000000ef24         db  0x30 ; '0'
000000000000ef25         db  0x07 ; '.'
000000000000ef26         db  0x00 ; '.'
000000000000ef27         db  0x00 ; '.'
000000000000ef28         db  0x04 ; '.'
000000000000ef29         db  0x5d ; ']'
000000000000ef2a         db  0xff ; '.'
000000000000ef2b         db  0xff ; '.'
000000000000ef2c         db  0x6c ; 'l'
000000000000ef2d         db  0x07 ; '.'
000000000000ef2e         db  0x00 ; '.'
000000000000ef2f         db  0x00 ; '.'
000000000000ef30         db  0x74 ; 't'
000000000000ef31         db  0x5d ; ']'
000000000000ef32         db  0xff ; '.'
000000000000ef33         db  0xff ; '.'
000000000000ef34         db  0xbc ; '.'
000000000000ef35         db  0x07 ; '.'
000000000000ef36         db  0x00 ; '.'
000000000000ef37         db  0x00 ; '.'
000000000000ef38         db  0x94 ; '.'
000000000000ef39         db  0x5d ; ']'
000000000000ef3a         db  0xff ; '.'
000000000000ef3b         db  0xff ; '.'
000000000000ef3c         db  0xd4 ; '.'
000000000000ef3d         db  0x07 ; '.'
000000000000ef3e         db  0x00 ; '.'
000000000000ef3f         db  0x00 ; '.'
000000000000ef40         db  0x54 ; 'T'
000000000000ef41         db  0x5e ; '^'
000000000000ef42         db  0xff ; '.'
000000000000ef43         db  0xff ; '.'
000000000000ef44         db  0x00 ; '.'
000000000000ef45         db  0x08 ; '.'
000000000000ef46         db  0x00 ; '.'
000000000000ef47         db  0x00 ; '.'
000000000000ef48         db  0x14 ; '.'
000000000000ef49         db  0x5f ; '_'
000000000000ef4a         db  0xff ; '.'
000000000000ef4b         db  0xff ; '.'
000000000000ef4c         db  0x2c ; ','
000000000000ef4d         db  0x08 ; '.'
000000000000ef4e         db  0x00 ; '.'
000000000000ef4f         db  0x00 ; '.'
000000000000ef50         db  0x64 ; 'd'
000000000000ef51         db  0x5f ; '_'
000000000000ef52         db  0xff ; '.'
000000000000ef53         db  0xff ; '.'
000000000000ef54         db  0x44 ; 'D'
000000000000ef55         db  0x08 ; '.'
000000000000ef56         db  0x00 ; '.'
000000000000ef57         db  0x00 ; '.'
000000000000ef58         db  0xa4 ; '.'
000000000000ef59         db  0x5f ; '_'
000000000000ef5a         db  0xff ; '.'
000000000000ef5b         db  0xff ; '.'
000000000000ef5c         db  0x6c ; 'l'
000000000000ef5d         db  0x08 ; '.'
000000000000ef5e         db  0x00 ; '.'
000000000000ef5f         db  0x00 ; '.'
000000000000ef60         db  0xa4 ; '.'
000000000000ef61         db  0x61 ; 'a'
000000000000ef62         db  0xff ; '.'
000000000000ef63         db  0xff ; '.'
000000000000ef64         db  0xbc ; '.'
000000000000ef65         db  0x08 ; '.'
000000000000ef66         db  0x00 ; '.'
000000000000ef67         db  0x00 ; '.'
000000000000ef68         db  0xb4 ; '.'
000000000000ef69         db  0x67 ; 'g'
000000000000ef6a         db  0xff ; '.'
000000000000ef6b         db  0xff ; '.'
000000000000ef6c         db  0xe8 ; '.'
000000000000ef6d         db  0x08 ; '.'
000000000000ef6e         db  0x00 ; '.'
000000000000ef6f         db  0x00 ; '.'
000000000000ef70         db  0xa4 ; '.'
000000000000ef71         db  0x68 ; 'h'
000000000000ef72         db  0xff ; '.'
000000000000ef73         db  0xff ; '.'
000000000000ef74         db  0x28 ; '('
000000000000ef75         db  0x09 ; '.'
000000000000ef76         db  0x00 ; '.'
000000000000ef77         db  0x00 ; '.'
000000000000ef78         db  0xf4 ; '.'
000000000000ef79         db  0x6b ; 'k'
000000000000ef7a         db  0xff ; '.'
000000000000ef7b         db  0xff ; '.'
000000000000ef7c         db  0x74 ; 't'
000000000000ef7d         db  0x09 ; '.'
000000000000ef7e         db  0x00 ; '.'
000000000000ef7f         db  0x00 ; '.'
000000000000ef80         db  0x94 ; '.'
000000000000ef81         db  0x6c ; 'l'
000000000000ef82         db  0xff ; '.'
000000000000ef83         db  0xff ; '.'
000000000000ef84         db  0xa0 ; '.'
000000000000ef85         db  0x09 ; '.'
000000000000ef86         db  0x00 ; '.'
000000000000ef87         db  0x00 ; '.'
000000000000ef88         db  0xb4 ; '.'
000000000000ef89         db  0x6d ; 'm'
000000000000ef8a         db  0xff ; '.'
000000000000ef8b         db  0xff ; '.'
000000000000ef8c         db  0xd4 ; '.'
000000000000ef8d         db  0x09 ; '.'
000000000000ef8e         db  0x00 ; '.'
000000000000ef8f         db  0x00 ; '.'
000000000000ef90         db  0x24 ; '$'
000000000000ef91         db  0x6f ; 'o'
000000000000ef92         db  0xff ; '.'
000000000000ef93         db  0xff ; '.'
000000000000ef94         db  0x84 ; '.'
000000000000ef95         db  0x0a ; '.'
000000000000ef96         db  0x00 ; '.'
000000000000ef97         db  0x00 ; '.'
000000000000ef98         db  0xa4 ; '.'
000000000000ef99         db  0x6f ; 'o'
000000000000ef9a         db  0xff ; '.'
000000000000ef9b         db  0xff ; '.'
000000000000ef9c         db  0xd4 ; '.'
000000000000ef9d         db  0x0a ; '.'
000000000000ef9e         db  0x00 ; '.'
000000000000ef9f         db  0x00 ; '.'
000000000000efa0         db  0xb4 ; '.'
000000000000efa1         db  0x6f ; 'o'
000000000000efa2         db  0xff ; '.'
000000000000efa3         db  0xff ; '.'
000000000000efa4         db  0xe8 ; '.'
000000000000efa5         db  0x0a ; '.'
000000000000efa6         db  0x00 ; '.'
000000000000efa7         db  0x00 ; '.'
000000000000efa8         db  0xc4 ; '.'
000000000000efa9         db  0x6f ; 'o'
000000000000efaa         db  0xff ; '.'
000000000000efab         db  0xff ; '.'
000000000000efac         db  0xfc ; '.'
000000000000efad         db  0x0a ; '.'
000000000000efae         db  0x00 ; '.'
000000000000efaf         db  0x00 ; '.'
000000000000efb0         db  0x74 ; 't'
000000000000efb1         db  0x70 ; 'p'
000000000000efb2         db  0xff ; '.'
000000000000efb3         db  0xff ; '.'
000000000000efb4         db  0x2c ; ','
000000000000efb5         db  0x0b ; '.'
000000000000efb6         db  0x00 ; '.'
000000000000efb7         db  0x00 ; '.'
000000000000efb8         db  0xd4 ; '.'
000000000000efb9         db  0x70 ; 'p'
000000000000efba         db  0xff ; '.'
000000000000efbb         db  0xff ; '.'
000000000000efbc         db  0x64 ; 'd'
000000000000efbd         db  0x0b ; '.'
000000000000efbe         db  0x00 ; '.'
000000000000efbf         db  0x00 ; '.'
000000000000efc0         db  0x64 ; 'd'
000000000000efc1         db  0x71 ; 'q'
000000000000efc2         db  0xff ; '.'
000000000000efc3         db  0xff ; '.'
000000000000efc4         db  0x8c ; '.'
000000000000efc5         db  0x0b ; '.'
000000000000efc6         db  0x00 ; '.'
000000000000efc7         db  0x00 ; '.'
000000000000efc8         db  0x74 ; 't'
000000000000efc9         db  0x71 ; 'q'
000000000000efca         db  0xff ; '.'
000000000000efcb         db  0xff ; '.'
000000000000efcc         db  0xa0 ; '.'
000000000000efcd         db  0x0b ; '.'
000000000000efce         db  0x00 ; '.'
000000000000efcf         db  0x00 ; '.'
000000000000efd0         db  0xc4 ; '.'
000000000000efd1         db  0x71 ; 'q'
000000000000efd2         db  0xff ; '.'
000000000000efd3         db  0xff ; '.'
000000000000efd4         db  0xbc ; '.'
000000000000efd5         db  0x0b ; '.'
000000000000efd6         db  0x00 ; '.'
000000000000efd7         db  0x00 ; '.'
000000000000efd8         db  0x94 ; '.'
000000000000efd9         db  0x72 ; 'r'
000000000000efda         db  0xff ; '.'
000000000000efdb         db  0xff ; '.'
000000000000efdc         db  0xd0 ; '.'
000000000000efdd         db  0x0b ; '.'
000000000000efde         db  0x00 ; '.'
000000000000efdf         db  0x00 ; '.'
000000000000efe0         db  0xa4 ; '.'
000000000000efe1         db  0x7c ; '|'
000000000000efe2         db  0xff ; '.'
000000000000efe3         db  0xff ; '.'
000000000000efe4         db  0x78 ; 'x'
000000000000efe5         db  0x0c ; '.'
000000000000efe6         db  0x00 ; '.'
000000000000efe7         db  0x00 ; '.'
000000000000efe8         db  0x94 ; '.'
000000000000efe9         db  0x7e ; '~'
000000000000efea         db  0xff ; '.'
000000000000efeb         db  0xff ; '.'
000000000000efec         db  0xb4 ; '.'
000000000000efed         db  0x0c ; '.'
000000000000efee         db  0x00 ; '.'
000000000000efef         db  0x00 ; '.'
000000000000eff0         db  0xd4 ; '.'
000000000000eff1         db  0x7f ; '.'
000000000000eff2         db  0xff ; '.'
000000000000eff3         db  0xff ; '.'
000000000000eff4         db  0xf0 ; '.'
000000000000eff5         db  0x0c ; '.'
000000000000eff6         db  0x00 ; '.'
000000000000eff7         db  0x00 ; '.'
000000000000eff8         db  0x14 ; '.'
000000000000eff9         db  0x81 ; '.'
000000000000effa         db  0xff ; '.'
000000000000effb         db  0xff ; '.'
000000000000effc         db  0x3c ; '<'
000000000000effd         db  0x0d ; '.'
000000000000effe         db  0x00 ; '.'
000000000000efff         db  0x00 ; '.'
000000000000f000         db  0xb4 ; '.'                                         ; DATA XREF=main+5700, main+6186, set_fd_flags+161
000000000000f001         db  0x81 ; '.'
000000000000f002         db  0xff ; '.'
000000000000f003         db  0xff ; '.'
000000000000f004         db  0x5c ; '\'
000000000000f005         db  0x0d ; '.'
000000000000f006         db  0x00 ; '.'
000000000000f007         db  0x00 ; '.'
000000000000f008         db  0xa4 ; '.'
000000000000f009         db  0x82 ; '.'
000000000000f00a         db  0xff ; '.'
000000000000f00b         db  0xff ; '.'
000000000000f00c         db  0xa0 ; '.'
000000000000f00d         db  0x0d ; '.'
000000000000f00e         db  0x00 ; '.'
000000000000f00f         db  0x00 ; '.'
000000000000f010         db  0xe4 ; '.'
000000000000f011         db  0x94 ; '.'
000000000000f012         db  0xff ; '.'
000000000000f013         db  0xff ; '.'
000000000000f014         db  0x18 ; '.'
000000000000f015         db  0x0e ; '.'
000000000000f016         db  0x00 ; '.'
000000000000f017         db  0x00 ; '.'
000000000000f018         db  0x94 ; '.'
000000000000f019         db  0x96 ; '.'
000000000000f01a         db  0xff ; '.'
000000000000f01b         db  0xff ; '.'
000000000000f01c         db  0x84 ; '.'
000000000000f01d         db  0x0e ; '.'
000000000000f01e         db  0x00 ; '.'
000000000000f01f         db  0x00 ; '.'
000000000000f020         db  0xd4 ; '.'
000000000000f021         db  0x96 ; '.'
000000000000f022         db  0xff ; '.'
000000000000f023         db  0xff ; '.'
000000000000f024         db  0xb0 ; '.'
000000000000f025         db  0x0e ; '.'
000000000000f026         db  0x00 ; '.'
000000000000f027         db  0x00 ; '.'
000000000000f028         db  0xf4 ; '.'
000000000000f029         db  0x96 ; '.'
000000000000f02a         db  0xff ; '.'
000000000000f02b         db  0xff ; '.'
000000000000f02c         db  0xc4 ; '.'
000000000000f02d         db  0x0e ; '.'
000000000000f02e         db  0x00 ; '.'
000000000000f02f         db  0x00 ; '.'
000000000000f030         db  0x14 ; '.'
000000000000f031         db  0x97 ; '.'
000000000000f032         db  0xff ; '.'
000000000000f033         db  0xff ; '.'
000000000000f034         db  0xd8 ; '.'
000000000000f035         db  0x0e ; '.'
000000000000f036         db  0x00 ; '.'
000000000000f037         db  0x00 ; '.'
000000000000f038         db  0x54 ; 'T'
000000000000f039         db  0x97 ; '.'
000000000000f03a         db  0xff ; '.'
000000000000f03b         db  0xff ; '.'
000000000000f03c         db  0xec ; '.'
000000000000f03d         db  0x0e ; '.'
000000000000f03e         db  0x00 ; '.'
000000000000f03f         db  0x00 ; '.'
000000000000f040         db  0x74 ; 't'
000000000000f041         db  0x97 ; '.'
000000000000f042         db  0xff ; '.'
000000000000f043         db  0xff ; '.'
000000000000f044         db  0x00 ; '.'
000000000000f045         db  0x0f ; '.'
000000000000f046         db  0x00 ; '.'
000000000000f047         db  0x00 ; '.'
000000000000f048         db  0xa4 ; '.'
000000000000f049         db  0x97 ; '.'
000000000000f04a         db  0xff ; '.'
000000000000f04b         db  0xff ; '.'
000000000000f04c         db  0x14 ; '.'
000000000000f04d         db  0x0f ; '.'
000000000000f04e         db  0x00 ; '.'
000000000000f04f         db  0x00 ; '.'
000000000000f050         db  0x24 ; '$'
000000000000f051         db  0x98 ; '.'
000000000000f052         db  0xff ; '.'
000000000000f053         db  0xff ; '.'
000000000000f054         db  0x68 ; 'h'
000000000000f055         db  0x0f ; '.'
000000000000f056         db  0x00 ; '.'
000000000000f057         db  0x00 ; '.'
000000000000f058         db  0x14 ; '.'
000000000000f059         db  0x99 ; '.'
000000000000f05a         db  0xff ; '.'
000000000000f05b         db  0xff ; '.'
000000000000f05c         db  0xd4 ; '.'
000000000000f05d         db  0x0f ; '.'
000000000000f05e         db  0x00 ; '.'
000000000000f05f         db  0x00 ; '.'
000000000000f060         db  0x24 ; '$'
000000000000f061         db  0x99 ; '.'
000000000000f062         db  0xff ; '.'
000000000000f063         db  0xff ; '.'
000000000000f064         db  0xe8 ; '.'
000000000000f065         db  0x0f ; '.'
000000000000f066         db  0x00 ; '.'
000000000000f067         db  0x00 ; '.'
000000000000f068         db  0xc4 ; '.'
000000000000f069         db  0x99 ; '.'
000000000000f06a         db  0xff ; '.'
000000000000f06b         db  0xff ; '.'
000000000000f06c         db  0x14 ; '.'
000000000000f06d         db  0x10 ; '.'
000000000000f06e         db  0x00 ; '.'
000000000000f06f         db  0x00 ; '.'
000000000000f070         db  0xe4 ; '.'
000000000000f071         db  0x99 ; '.'
000000000000f072         db  0xff ; '.'
000000000000f073         db  0xff ; '.'
000000000000f074         db  0x28 ; '('
000000000000f075         db  0x10 ; '.'
000000000000f076         db  0x00 ; '.'
000000000000f077         db  0x00 ; '.'
000000000000f078         db  0xf4 ; '.'
000000000000f079         db  0x99 ; '.'
000000000000f07a         db  0xff ; '.'
000000000000f07b         db  0xff ; '.'
000000000000f07c         db  0x3c ; '<'
000000000000f07d         db  0x10 ; '.'
000000000000f07e         db  0x00 ; '.'
000000000000f07f         db  0x00 ; '.'
000000000000f080         db  0x14 ; '.'
000000000000f081         db  0x9a ; '.'
000000000000f082         db  0xff ; '.'
000000000000f083         db  0xff ; '.'
000000000000f084         db  0x50 ; 'P'
000000000000f085         db  0x10 ; '.'
000000000000f086         db  0x00 ; '.'
000000000000f087         db  0x00 ; '.'
000000000000f088         db  0x34 ; '4'
000000000000f089         db  0x9a ; '.'
000000000000f08a         db  0xff ; '.'
000000000000f08b         db  0xff ; '.'
000000000000f08c         db  0x64 ; 'd'
000000000000f08d         db  0x10 ; '.'
000000000000f08e         db  0x00 ; '.'
000000000000f08f         db  0x00 ; '.'
000000000000f090         db  0xc4 ; '.'
000000000000f091         db  0x9a ; '.'
000000000000f092         db  0xff ; '.'
000000000000f093         db  0xff ; '.'
000000000000f094         db  0x80 ; '.'
000000000000f095         db  0x10 ; '.'
000000000000f096         db  0x00 ; '.'
000000000000f097         db  0x00 ; '.'
000000000000f098         db  0x54 ; 'T'
000000000000f099         db  0x9b ; '.'
000000000000f09a         db  0xff ; '.'
000000000000f09b         db  0xff ; '.'
000000000000f09c         db  0x9c ; '.'
000000000000f09d         db  0x10 ; '.'
000000000000f09e         db  0x00 ; '.'
000000000000f09f         db  0x00 ; '.'
000000000000f0a0         db  0x64 ; 'd'
000000000000f0a1         db  0x9b ; '.'
000000000000f0a2         db  0xff ; '.'
000000000000f0a3         db  0xff ; '.'
000000000000f0a4         db  0xb0 ; '.'
000000000000f0a5         db  0x10 ; '.'
000000000000f0a6         db  0x00 ; '.'
000000000000f0a7         db  0x00 ; '.'
000000000000f0a8         db  0x74 ; 't'
000000000000f0a9         db  0x9b ; '.'
000000000000f0aa         db  0xff ; '.'
000000000000f0ab         db  0xff ; '.'
000000000000f0ac         db  0xc4 ; '.'
000000000000f0ad         db  0x10 ; '.'
000000000000f0ae         db  0x00 ; '.'
000000000000f0af         db  0x00 ; '.'
000000000000f0b0         db  0x14 ; '.'
000000000000f0b1         db  0x9c ; '.'
000000000000f0b2         db  0xff ; '.'
000000000000f0b3         db  0xff ; '.'
000000000000f0b4         db  0xe0 ; '.'
000000000000f0b5         db  0x10 ; '.'
000000000000f0b6         db  0x00 ; '.'
000000000000f0b7         db  0x00 ; '.'
000000000000f0b8         db  0x24 ; '$'
000000000000f0b9         db  0x9c ; '.'
000000000000f0ba         db  0xff ; '.'
000000000000f0bb         db  0xff ; '.'
000000000000f0bc         db  0xf4 ; '.'
000000000000f0bd         db  0x10 ; '.'
000000000000f0be         db  0x00 ; '.'
000000000000f0bf         db  0x00 ; '.'
000000000000f0c0         db  0x44 ; 'D'
000000000000f0c1         db  0x9c ; '.'
000000000000f0c2         db  0xff ; '.'
000000000000f0c3         db  0xff ; '.'
000000000000f0c4         db  0x08 ; '.'
000000000000f0c5         db  0x11 ; '.'
000000000000f0c6         db  0x00 ; '.'
000000000000f0c7         db  0x00 ; '.'
000000000000f0c8         db  0x54 ; 'T'
000000000000f0c9         db  0x9c ; '.'
000000000000f0ca         db  0xff ; '.'
000000000000f0cb         db  0xff ; '.'
000000000000f0cc         db  0x1c ; '.'
000000000000f0cd         db  0x11 ; '.'
000000000000f0ce         db  0x00 ; '.'
000000000000f0cf         db  0x00 ; '.'
000000000000f0d0         db  0xe4 ; '.'
000000000000f0d1         db  0x9c ; '.'
000000000000f0d2         db  0xff ; '.'
000000000000f0d3         db  0xff ; '.'
000000000000f0d4         db  0x38 ; '8'
000000000000f0d5         db  0x11 ; '.'
000000000000f0d6         db  0x00 ; '.'
000000000000f0d7         db  0x00 ; '.'
000000000000f0d8         db  0x84 ; '.'
000000000000f0d9         db  0x9d ; '.'
000000000000f0da         db  0xff ; '.'
000000000000f0db         db  0xff ; '.'
000000000000f0dc         db  0x54 ; 'T'
000000000000f0dd         db  0x11 ; '.'
000000000000f0de         db  0x00 ; '.'
000000000000f0df         db  0x00 ; '.'
000000000000f0e0         db  0x94 ; '.'
000000000000f0e1         db  0x9d ; '.'
000000000000f0e2         db  0xff ; '.'
000000000000f0e3         db  0xff ; '.'
000000000000f0e4         db  0x68 ; 'h'
000000000000f0e5         db  0x11 ; '.'
000000000000f0e6         db  0x00 ; '.'
000000000000f0e7         db  0x00 ; '.'
000000000000f0e8         db  0xb4 ; '.'
000000000000f0e9         db  0x9d ; '.'
000000000000f0ea         db  0xff ; '.'
000000000000f0eb         db  0xff ; '.'
000000000000f0ec         db  0x7c ; '|'
000000000000f0ed         db  0x11 ; '.'
000000000000f0ee         db  0x00 ; '.'
000000000000f0ef         db  0x00 ; '.'
000000000000f0f0         db  0xd4 ; '.'
000000000000f0f1         db  0x9d ; '.'
000000000000f0f2         db  0xff ; '.'
000000000000f0f3         db  0xff ; '.'
000000000000f0f4         db  0x90 ; '.'
000000000000f0f5         db  0x11 ; '.'
000000000000f0f6         db  0x00 ; '.'
000000000000f0f7         db  0x00 ; '.'
000000000000f0f8         db  0xe4 ; '.'
000000000000f0f9         db  0x9d ; '.'
000000000000f0fa         db  0xff ; '.'
000000000000f0fb         db  0xff ; '.'
000000000000f0fc         db  0xa4 ; '.'
000000000000f0fd         db  0x11 ; '.'
000000000000f0fe         db  0x00 ; '.'
000000000000f0ff         db  0x00 ; '.'
000000000000f100         db  0x04 ; '.'
000000000000f101         db  0x9e ; '.'
000000000000f102         db  0xff ; '.'
000000000000f103         db  0xff ; '.'
000000000000f104         db  0xb8 ; '.'
000000000000f105         db  0x11 ; '.'
000000000000f106         db  0x00 ; '.'
000000000000f107         db  0x00 ; '.'
000000000000f108         db  0x24 ; '$'
000000000000f109         db  0x9e ; '.'
000000000000f10a         db  0xff ; '.'
000000000000f10b         db  0xff ; '.'
000000000000f10c         db  0xcc ; '.'
000000000000f10d         db  0x11 ; '.'
000000000000f10e         db  0x00 ; '.'
000000000000f10f         db  0x00 ; '.'
000000000000f110         db  0x44 ; 'D'
000000000000f111         db  0x9e ; '.'
000000000000f112         db  0xff ; '.'
000000000000f113         db  0xff ; '.'
000000000000f114         db  0xe4 ; '.'
000000000000f115         db  0x11 ; '.'
000000000000f116         db  0x00 ; '.'
000000000000f117         db  0x00 ; '.'
000000000000f118         db  0x04 ; '.'
000000000000f119         db  0x9f ; '.'
000000000000f11a         db  0xff ; '.'
000000000000f11b         db  0xff ; '.'
000000000000f11c         db  0x34 ; '4'
000000000000f11d         db  0x12 ; '.'
000000000000f11e         db  0x00 ; '.'
000000000000f11f         db  0x00 ; '.'
000000000000f120         db  0x14 ; '.'
000000000000f121         db  0x9f ; '.'
000000000000f122         db  0xff ; '.'
000000000000f123         db  0xff ; '.'
000000000000f124         db  0x4c ; 'L'
000000000000f125         db  0x12 ; '.'
000000000000f126         db  0x00 ; '.'
000000000000f127         db  0x00 ; '.'
000000000000f128         db  0x34 ; '4'
000000000000f129         db  0xa3 ; '.'
000000000000f12a         db  0xff ; '.'
000000000000f12b         db  0xff ; '.'
000000000000f12c         db  0x60 ; '`'
000000000000f12d         db  0x13 ; '.'
000000000000f12e         db  0x00 ; '.'
000000000000f12f         db  0x00 ; '.'
000000000000f130         db  0x54 ; 'T'
000000000000f131         db  0xa3 ; '.'
000000000000f132         db  0xff ; '.'
000000000000f133         db  0xff ; '.'
000000000000f134         db  0x74 ; 't'
000000000000f135         db  0x13 ; '.'
000000000000f136         db  0x00 ; '.'
000000000000f137         db  0x00 ; '.'
000000000000f138         db  0xd4 ; '.'
000000000000f139         db  0xa3 ; '.'
000000000000f13a         db  0xff ; '.'
000000000000f13b         db  0xff ; '.'
000000000000f13c         db  0x90 ; '.'
000000000000f13d         db  0x13 ; '.'
000000000000f13e         db  0x00 ; '.'
000000000000f13f         db  0x00 ; '.'
000000000000f140         db  0xb4 ; '.'
000000000000f141         db  0xa4 ; '.'
000000000000f142         db  0xff ; '.'
000000000000f143         db  0xff ; '.'
000000000000f144         db  0xbc ; '.'
000000000000f145         db  0x13 ; '.'
000000000000f146         db  0x00 ; '.'
000000000000f147         db  0x00 ; '.'
000000000000f148         db  0x34 ; '4'
000000000000f149         db  0xa5 ; '.'
000000000000f14a         db  0xff ; '.'
000000000000f14b         db  0xff ; '.'
000000000000f14c         db  0xdc ; '.'
000000000000f14d         db  0x13 ; '.'
000000000000f14e         db  0x00 ; '.'
000000000000f14f         db  0x00 ; '.'
000000000000f150         db  0x54 ; 'T'
000000000000f151         db  0xa5 ; '.'
000000000000f152         db  0xff ; '.'
000000000000f153         db  0xff ; '.'
000000000000f154         db  0xf8 ; '.'
000000000000f155         db  0x13 ; '.'
000000000000f156         db  0x00 ; '.'
000000000000f157         db  0x00 ; '.'
000000000000f158         db  0x84 ; '.'
000000000000f159         db  0xa5 ; '.'
000000000000f15a         db  0xff ; '.'
000000000000f15b         db  0xff ; '.'
000000000000f15c         db  0x0c ; '.'
000000000000f15d         db  0x14 ; '.'
000000000000f15e         db  0x00 ; '.'
000000000000f15f         db  0x00 ; '.'
000000000000f160         db  0x94 ; '.'
000000000000f161         db  0xa5 ; '.'
000000000000f162         db  0xff ; '.'
000000000000f163         db  0xff ; '.'
000000000000f164         db  0x20 ; ' '
000000000000f165         db  0x14 ; '.'
000000000000f166         db  0x00 ; '.'
000000000000f167         db  0x00 ; '.'
000000000000f168         db  0xd4 ; '.'
000000000000f169         db  0xa5 ; '.'
000000000000f16a         db  0xff ; '.'
000000000000f16b         db  0xff ; '.'
000000000000f16c         db  0x44 ; 'D'
000000000000f16d         db  0x14 ; '.'
000000000000f16e         db  0x00 ; '.'
000000000000f16f         db  0x00 ; '.'
000000000000f170         db  0x04 ; '.'
000000000000f171         db  0xa6 ; '.'
000000000000f172         db  0xff ; '.'
000000000000f173         db  0xff ; '.'
000000000000f174         db  0x58 ; 'X'
000000000000f175         db  0x14 ; '.'
000000000000f176         db  0x00 ; '.'
000000000000f177         db  0x00 ; '.'
000000000000f178         db  0x94 ; '.'
000000000000f179         db  0xa6 ; '.'
000000000000f17a         db  0xff ; '.'
000000000000f17b         db  0xff ; '.'
000000000000f17c         db  0x70 ; 'p'
000000000000f17d         db  0x14 ; '.'
000000000000f17e         db  0x00 ; '.'
000000000000f17f         db  0x00 ; '.'
000000000000f180         db  0xe4 ; '.'
000000000000f181         db  0xa6 ; '.'
000000000000f182         db  0xff ; '.'
000000000000f183         db  0xff ; '.'
000000000000f184         db  0x88 ; '.'
000000000000f185         db  0x14 ; '.'
000000000000f186         db  0x00 ; '.'
000000000000f187         db  0x00 ; '.'
000000000000f188         db  0x04 ; '.'
000000000000f189         db  0xa7 ; '.'
000000000000f18a         db  0xff ; '.'
000000000000f18b         db  0xff ; '.'
000000000000f18c         db  0xa4 ; '.'
000000000000f18d         db  0x14 ; '.'
000000000000f18e         db  0x00 ; '.'
000000000000f18f         db  0x00 ; '.'
000000000000f190         db  0x34 ; '4'
000000000000f191         db  0xa7 ; '.'
000000000000f192         db  0xff ; '.'
000000000000f193         db  0xff ; '.'
000000000000f194         db  0xc0 ; '.'
000000000000f195         db  0x14 ; '.'
000000000000f196         db  0x00 ; '.'
000000000000f197         db  0x00 ; '.'
000000000000f198         db  0x64 ; 'd'
000000000000f199         db  0xa7 ; '.'
000000000000f19a         db  0xff ; '.'
000000000000f19b         db  0xff ; '.'
000000000000f19c         db  0xe8 ; '.'
000000000000f19d         db  0x14 ; '.'
000000000000f19e         db  0x00 ; '.'
000000000000f19f         db  0x00 ; '.'
000000000000f1a0         db  0x84 ; '.'
000000000000f1a1         db  0xa7 ; '.'
000000000000f1a2         db  0xff ; '.'
000000000000f1a3         db  0xff ; '.'
000000000000f1a4         db  0x04 ; '.'
000000000000f1a5         db  0x15 ; '.'
000000000000f1a6         db  0x00 ; '.'
000000000000f1a7         db  0x00 ; '.'
000000000000f1a8         db  0xc4 ; '.'
000000000000f1a9         db  0xa7 ; '.'
000000000000f1aa         db  0xff ; '.'
000000000000f1ab         db  0xff ; '.'
000000000000f1ac         db  0x1c ; '.'
000000000000f1ad         db  0x15 ; '.'
000000000000f1ae         db  0x00 ; '.'
000000000000f1af         db  0x00 ; '.'
000000000000f1b0         db  0xe4 ; '.'
000000000000f1b1         db  0xab ; '.'
000000000000f1b2         db  0xff ; '.'
000000000000f1b3         db  0xff ; '.'
000000000000f1b4         db  0x6c ; 'l'
000000000000f1b5         db  0x15 ; '.'
000000000000f1b6         db  0x00 ; '.'
000000000000f1b7         db  0x00 ; '.'
000000000000f1b8         db  0x34 ; '4'
000000000000f1b9         db  0xad ; '.'
000000000000f1ba         db  0xff ; '.'
000000000000f1bb         db  0xff ; '.'
000000000000f1bc         db  0xb8 ; '.'
000000000000f1bd         db  0x15 ; '.'
000000000000f1be         db  0x00 ; '.'
000000000000f1bf         db  0x00 ; '.'
000000000000f1c0         db  0xe4 ; '.'
000000000000f1c1         db  0xad ; '.'
000000000000f1c2         db  0xff ; '.'
000000000000f1c3         db  0xff ; '.'
000000000000f1c4         db  0xd4 ; '.'
000000000000f1c5         db  0x15 ; '.'
000000000000f1c6         db  0x00 ; '.'
000000000000f1c7         db  0x00 ; '.'
000000000000f1c8         db  0x64 ; 'd'
000000000000f1c9         db  0xae ; '.'
000000000000f1ca         db  0xff ; '.'
000000000000f1cb         db  0xff ; '.'
000000000000f1cc         db  0x0c ; '.'
000000000000f1cd         db  0x16 ; '.'
000000000000f1ce         db  0x00 ; '.'
000000000000f1cf         db  0x00 ; '.'
000000000000f1d0         db  0xe4 ; '.'
000000000000f1d1         db  0xb0 ; '.'
000000000000f1d2         db  0xff ; '.'
000000000000f1d3         db  0xff ; '.'
000000000000f1d4         db  0x44 ; 'D'
000000000000f1d5         db  0x16 ; '.'
000000000000f1d6         db  0x00 ; '.'
000000000000f1d7         db  0x00 ; '.'
000000000000f1d8         db  0x24 ; '$'
000000000000f1d9         db  0xb1 ; '.'
000000000000f1da         db  0xff ; '.'
000000000000f1db         db  0xff ; '.'
000000000000f1dc         db  0x64 ; 'd'
000000000000f1dd         db  0x16 ; '.'
000000000000f1de         db  0x00 ; '.'
000000000000f1df         db  0x00 ; '.'
000000000000f1e0         db  0x84 ; '.'
000000000000f1e1         db  0xb1 ; '.'
000000000000f1e2         db  0xff ; '.'
000000000000f1e3         db  0xff ; '.'
000000000000f1e4         db  0x94 ; '.'
000000000000f1e5         db  0x16 ; '.'
000000000000f1e6         db  0x00 ; '.'
000000000000f1e7         db  0x00 ; '.'
000000000000f1e8         db  0x14 ; '.'
000000000000f1e9         db  0xb2 ; '.'
000000000000f1ea         db  0xff ; '.'
000000000000f1eb         db  0xff ; '.'
000000000000f1ec         db  0xd4 ; '.'
000000000000f1ed         db  0x16 ; '.'
000000000000f1ee         db  0x00 ; '.'
000000000000f1ef         db  0x00 ; '.'
000000000000f1f0         db  0x94 ; '.'
000000000000f1f1         db  0xb2 ; '.'
000000000000f1f2         db  0xff ; '.'
000000000000f1f3         db  0xff ; '.'
000000000000f1f4         db  0xfc ; '.'
000000000000f1f5         db  0x16 ; '.'
000000000000f1f6         db  0x00 ; '.'
000000000000f1f7         db  0x00 ; '.'
000000000000f1f8         db  0xa4 ; '.'
000000000000f1f9         db  0xb2 ; '.'
000000000000f1fa         db  0xff ; '.'
000000000000f1fb         db  0xff ; '.'
000000000000f1fc         db  0x10 ; '.'
000000000000f1fd         db  0x17 ; '.'
000000000000f1fe         db  0x00 ; '.'
000000000000f1ff         db  0x00 ; '.'
000000000000f200         db  0xc4 ; '.'
000000000000f201         db  0xb3 ; '.'
000000000000f202         db  0xff ; '.'
000000000000f203         db  0xff ; '.'
000000000000f204         db  0x5c ; '\'
000000000000f205         db  0x17 ; '.'
000000000000f206         db  0x00 ; '.'
000000000000f207         db  0x00 ; '.'
000000000000f208         db  0x44 ; 'D'
000000000000f209         db  0xb4 ; '.'
000000000000f20a         db  0xff ; '.'
000000000000f20b         db  0xff ; '.'
000000000000f20c         db  0x88 ; '.'
000000000000f20d         db  0x17 ; '.'
000000000000f20e         db  0x00 ; '.'
000000000000f20f         db  0x00 ; '.'
000000000000f210         db  0x64 ; 'd'
000000000000f211         db  0xb5 ; '.'
000000000000f212         db  0xff ; '.'
000000000000f213         db  0xff ; '.'
000000000000f214         db  0xe8 ; '.'
000000000000f215         db  0x17 ; '.'
000000000000f216         db  0x00 ; '.'
000000000000f217         db  0x00 ; '.'
000000000000f218         db  0xd4 ; '.'
000000000000f219         db  0xb5 ; '.'
000000000000f21a         db  0xff ; '.'
000000000000f21b         db  0xff ; '.'
000000000000f21c         db  0x34 ; '4'
000000000000f21d         db  0x18 ; '.'
000000000000f21e         db  0x00 ; '.'
000000000000f21f         db  0x00 ; '.'
000000000000f220         db  0x24 ; '$'
000000000000f221         db  0xb6 ; '.'
000000000000f222         db  0xff ; '.'
000000000000f223         db  0xff ; '.'
000000000000f224         db  0x74 ; 't'
000000000000f225         db  0x18 ; '.'
000000000000f226         db  0x00 ; '.'
000000000000f227         db  0x00 ; '.'
000000000000f228         db  0x84 ; '.'
000000000000f229         db  0xb6 ; '.'
000000000000f22a         db  0xff ; '.'
000000000000f22b         db  0xff ; '.'
000000000000f22c         db  0x94 ; '.'
000000000000f22d         db  0x18 ; '.'
000000000000f22e         db  0x00 ; '.'
000000000000f22f         db  0x00 ; '.'
000000000000f230         db  0xc4 ; '.'
000000000000f231         db  0xb6 ; '.'
000000000000f232         db  0xff ; '.'
000000000000f233         db  0xff ; '.'
000000000000f234         db  0xb4 ; '.'
000000000000f235         db  0x18 ; '.'
000000000000f236         db  0x00 ; '.'
000000000000f237         db  0x00 ; '.'
000000000000f238         db  0xe4 ; '.'
000000000000f239         db  0xc7 ; '.'
000000000000f23a         db  0xff ; '.'
000000000000f23b         db  0xff ; '.'
000000000000f23c         db  0xe4 ; '.'
000000000000f23d         db  0x18 ; '.'
000000000000f23e         db  0x00 ; '.'
000000000000f23f         db  0x00 ; '.'
000000000000f240         db  0xe4 ; '.'
000000000000f241         db  0xc9 ; '.'
000000000000f242         db  0xff ; '.'
000000000000f243         db  0xff ; '.'
000000000000f244         db  0xfc ; '.'
000000000000f245         db  0x18 ; '.'
000000000000f246         db  0x00 ; '.'
000000000000f247         db  0x00 ; '.'
000000000000f248         db  0xd4 ; '.'
000000000000f249         db  0xd6 ; '.'
000000000000f24a         db  0xff ; '.'
000000000000f24b         db  0xff ; '.'
000000000000f24c         db  0x4c ; 'L'
000000000000f24d         db  0x19 ; '.'
000000000000f24e         db  0x00 ; '.'
000000000000f24f         db  0x00 ; '.'
000000000000f250         db  0x44 ; 'D'
000000000000f251         db  0xd7 ; '.'
000000000000f252         db  0xff ; '.'
000000000000f253         db  0xff ; '.'
000000000000f254         db  0x94 ; '.'
000000000000f255         db  0x19 ; '.'
000000000000f256         db  0x00 ; '.'
000000000000f257         db  0x00 ; '.'
000000000000f258         db  0x54 ; 'T'
000000000000f259         db  0xd7 ; '.'
000000000000f25a         db  0xff ; '.'
000000000000f25b         db  0xff ; '.'
000000000000f25c         db  0xac ; '.'
000000000000f25d         db  0x19 ; '.'
000000000000f25e         db  0x00 ; '.'
000000000000f25f         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0xf260; 0x10850[ (5616 bytes)
        ; File offset : [62048; 67664[ (5616 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000f260         dd         0x00000014                                  ; Length of the record
000000000000f264         dd         0x00000000                                  ; CIE ID
000000000000f268         db         0x01                                        ; Version
000000000000f269         db         "zR", 0                                     ; Augmentation String
000000000000f26c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000f26d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000f26e         db         0x10                                        ; Return address register
000000000000f26f         db         0x01                                        ; Augmentation data length
000000000000f270         db         0x1b                                        ; FDE encoding
000000000000f271         db  0x0c ; '.'
000000000000f272         db  0x07 ; '.'
000000000000f273         db  0x08 ; '.'
000000000000f274         db  0x90 ; '.'
000000000000f275         db  0x01 ; '.'
000000000000f276         db  0x07 ; '.'
000000000000f277         db  0x10 ; '.'
000000000000f278         dd         0x00000014                                  ; Length of the record
000000000000f27c         dd         0x0000001c                                  ; FDE: parent CIE at 0xf260 (FDE encoding = 0x1B)
000000000000f280         db         0x00, 0x4a, 2 dup (0xff)                    ; begin 0x3c80
000000000000f284         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x3cab)
000000000000f288         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f289         align      16
000000000000f290         dd         0x00000014                                  ; Length of the record
000000000000f294         dd         0x00000000                                  ; CIE ID
000000000000f298         db         0x01                                        ; Version
000000000000f299         db         "zR", 0                                     ; Augmentation String
000000000000f29c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000f29d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000f29e         db         0x10                                        ; Return address register
000000000000f29f         db         0x01                                        ; Augmentation data length
000000000000f2a0         db         0x1b                                        ; FDE encoding
000000000000f2a1         db  0x0c ; '.'
000000000000f2a2         db  0x07 ; '.'
000000000000f2a3         db  0x08 ; '.'
000000000000f2a4         db  0x90 ; '.'
000000000000f2a5         db  0x01 ; '.'
000000000000f2a6         db  0x00 ; '.'
000000000000f2a7         db  0x00 ; '.'
000000000000f2a8         dd         0x00000024                                  ; Length of the record
000000000000f2ac         dd         0x0000001c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f2b0         db         0x50, 0x27, 2 dup (0xff)                    ; begin 0x1a00
000000000000f2b4         db         0xa0, 0x04, 2 dup (0x00)                    ; length 0x4a0 (end at 0x1ea0)
000000000000f2b8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f2b9         db  0x0e ; '.'
000000000000f2ba         db  0x10 ; '.'
000000000000f2bb         db  0x46 ; 'F'
000000000000f2bc         db  0x0e ; '.'
000000000000f2bd         db  0x18 ; '.'
000000000000f2be         db  0x4a ; 'J'
000000000000f2bf         db  0x0f ; '.'
000000000000f2c0         db  0x0b ; '.'
000000000000f2c1         db  0x77 ; 'w'
000000000000f2c2         db  0x08 ; '.'
000000000000f2c3         db  0x80 ; '.'
000000000000f2c4         db  0x00 ; '.'
000000000000f2c5         db  0x3f ; '?'
000000000000f2c6         db  0x1a ; '.'
000000000000f2c7         db  0x3b ; ';'
000000000000f2c8         db  0x2a ; '*'
000000000000f2c9         db  0x33 ; '3'
000000000000f2ca         db  0x24 ; '$'
000000000000f2cb         db  0x22 ; '"'
000000000000f2cc         db  0x00 ; '.'
000000000000f2cd         db  0x00 ; '.'
000000000000f2ce         db  0x00 ; '.'
000000000000f2cf         db  0x00 ; '.'
000000000000f2d0         dd         0x00000014                                  ; Length of the record
000000000000f2d4         dd         0x00000044                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f2d8         db         0xc8, 0x2b, 2 dup (0xff)                    ; begin 0x1ea0
000000000000f2dc         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x1ea8)
000000000000f2e0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f2e1         align      8
000000000000f2e8         dd         0x00000010                                  ; Length of the record
000000000000f2ec         dd         0x0000005c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f2f0         db         0xa0, 0x4a, 2 dup (0xff)                    ; begin 0x3d90
000000000000f2f4         db         0x07, 3 dup (0x00)                          ; length 0x7 (end at 0x3d97)
000000000000f2f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f2f9         align      4
000000000000f2fc         dd         0x00000010                                  ; Length of the record
000000000000f300         dd         0x00000070                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f304         db         0x9c, 0x4a, 2 dup (0xff)                    ; begin 0x3da0
000000000000f308         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x3db0)
000000000000f30c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f30d         align      16
000000000000f310         dd         0x00000068                                  ; Length of the record
000000000000f314         dd         0x00000084                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f318         db         0x98, 0x4a, 2 dup (0xff)                    ; begin 0x3db0
000000000000f31c         db         0x87, 0x03, 2 dup (0x00)                    ; length 0x387 (end at 0x4137)
000000000000f320         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f321         db  0x42 ; 'B'
000000000000f322         db  0x0e ; '.'
000000000000f323         db  0x10 ; '.'
000000000000f324         db  0x8f ; '.'
000000000000f325         db  0x02 ; '.'
000000000000f326         db  0x42 ; 'B'
000000000000f327         db  0x0e ; '.'
000000000000f328         db  0x18 ; '.'
000000000000f329         db  0x8e ; '.'
000000000000f32a         db  0x03 ; '.'
000000000000f32b         db  0x45 ; 'E'
000000000000f32c         db  0x0e ; '.'
000000000000f32d         db  0x20 ; ' '
000000000000f32e         db  0x8d ; '.'
000000000000f32f         db  0x04 ; '.'
000000000000f330         db  0x42 ; 'B'
000000000000f331         db  0x0e ; '.'
000000000000f332         db  0x28 ; '('
000000000000f333         db  0x8c ; '.'
000000000000f334         db  0x05 ; '.'
000000000000f335         db  0x41 ; 'A'
000000000000f336         db  0x0e ; '.'
000000000000f337         db  0x30 ; '0'
000000000000f338         db  0x86 ; '.'
000000000000f339         db  0x06 ; '.'
000000000000f33a         db  0x41 ; 'A'
000000000000f33b         db  0x0e ; '.'
000000000000f33c         db  0x38 ; '8'
000000000000f33d         db  0x83 ; '.'
000000000000f33e         db  0x07 ; '.'
000000000000f33f         db  0x4a ; 'J'
000000000000f340         db  0x0e ; '.'
000000000000f341         db  0xa0 ; '.'
000000000000f342         db  0x10 ; '.'
000000000000f343         db  0x03 ; '.'
000000000000f344         db  0x4f ; 'O'
000000000000f345         db  0x01 ; '.'
000000000000f346         db  0x0e ; '.'
000000000000f347         db  0xa8 ; '.'
000000000000f348         db  0x10 ; '.'
000000000000f349         db  0x42 ; 'B'
000000000000f34a         db  0x0e ; '.'
000000000000f34b         db  0xb0 ; '.'
000000000000f34c         db  0x10 ; '.'
000000000000f34d         db  0x62 ; 'b'
000000000000f34e         db  0x0e ; '.'
000000000000f34f         db  0xa8 ; '.'
000000000000f350         db  0x10 ; '.'
000000000000f351         db  0x41 ; 'A'
000000000000f352         db  0x0e ; '.'
000000000000f353         db  0xa0 ; '.'
000000000000f354         db  0x10 ; '.'
000000000000f355         db  0x7f ; '.'
000000000000f356         db  0x0a ; '.'
000000000000f357         db  0x0e ; '.'
000000000000f358         db  0x38 ; '8'
000000000000f359         db  0x41 ; 'A'
000000000000f35a         db  0x0e ; '.'
000000000000f35b         db  0x30 ; '0'
000000000000f35c         db  0x41 ; 'A'
000000000000f35d         db  0x0e ; '.'
000000000000f35e         db  0x28 ; '('
000000000000f35f         db  0x42 ; 'B'
000000000000f360         db  0x0e ; '.'
000000000000f361         db  0x20 ; ' '
000000000000f362         db  0x42 ; 'B'
000000000000f363         db  0x0e ; '.'
000000000000f364         db  0x18 ; '.'
000000000000f365         db  0x42 ; 'B'
000000000000f366         db  0x0e ; '.'
000000000000f367         db  0x10 ; '.'
000000000000f368         db  0x42 ; 'B'
000000000000f369         db  0x0e ; '.'
000000000000f36a         db  0x08 ; '.'
000000000000f36b         db  0x44 ; 'D'
000000000000f36c         db  0x0b ; '.'
000000000000f36d         db  0x02 ; '.'
000000000000f36e         db  0xca ; '.'
000000000000f36f         db  0x0a ; '.'
000000000000f370         db  0x0e ; '.'
000000000000f371         db  0xa8 ; '.'
000000000000f372         db  0x10 ; '.'
000000000000f373         db  0x44 ; 'D'
000000000000f374         db  0x0e ; '.'
000000000000f375         db  0xb0 ; '.'
000000000000f376         db  0x10 ; '.'
000000000000f377         db  0x4a ; 'J'
000000000000f378         db  0x0b ; '.'
000000000000f379         db  0x00 ; '.'
000000000000f37a         db  0x00 ; '.'
000000000000f37b         db  0x00 ; '.'
000000000000f37c         dd         0x00000028                                  ; Length of the record
000000000000f380         dd         0x000000f0                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f384         db         0xbc, 0x4d, 2 dup (0xff)                    ; begin 0x4140
000000000000f388         db         0x0b, 0x01, 2 dup (0x00)                    ; length 0x10b (end at 0x424b)
000000000000f38c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f38d         db  0x41 ; 'A'
000000000000f38e         db  0x0e ; '.'
000000000000f38f         db  0x10 ; '.'
000000000000f390         db  0x86 ; '.'
000000000000f391         db  0x02 ; '.'
000000000000f392         db  0x41 ; 'A'
000000000000f393         db  0x0e ; '.'
000000000000f394         db  0x18 ; '.'
000000000000f395         db  0x83 ; '.'
000000000000f396         db  0x03 ; '.'
000000000000f397         db  0x4b ; 'K'
000000000000f398         db  0x0e ; '.'
000000000000f399         db  0x80 ; '.'
000000000000f39a         db  0x02 ; '.'
000000000000f39b         db  0x02 ; '.'
000000000000f39c         db  0xd9 ; '.'
000000000000f39d         db  0x0a ; '.'
000000000000f39e         db  0x0e ; '.'
000000000000f39f         db  0x18 ; '.'
000000000000f3a0         db  0x41 ; 'A'
000000000000f3a1         db  0x0e ; '.'
000000000000f3a2         db  0x10 ; '.'
000000000000f3a3         db  0x41 ; 'A'
000000000000f3a4         db  0x0e ; '.'
000000000000f3a5         db  0x08 ; '.'
000000000000f3a6         db  0x48 ; 'H'
000000000000f3a7         db  0x0b ; '.'
000000000000f3a8         dd         0x00000038                                  ; Length of the record
000000000000f3ac         dd         0x0000011c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f3b0         db         0xa0, 0x4e, 2 dup (0xff)                    ; begin 0x4250
000000000000f3b4         db         0x45, 0x01, 2 dup (0x00)                    ; length 0x145 (end at 0x4395)
000000000000f3b8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f3b9         db  0x42 ; 'B'
000000000000f3ba         db  0x0e ; '.'
000000000000f3bb         db  0x10 ; '.'
000000000000f3bc         db  0x8d ; '.'
000000000000f3bd         db  0x02 ; '.'
000000000000f3be         db  0x42 ; 'B'
000000000000f3bf         db  0x0e ; '.'
000000000000f3c0         db  0x18 ; '.'
000000000000f3c1         db  0x8c ; '.'
000000000000f3c2         db  0x03 ; '.'
000000000000f3c3         db  0x48 ; 'H'
000000000000f3c4         db  0x0e ; '.'
000000000000f3c5         db  0x20 ; ' '
000000000000f3c6         db  0x86 ; '.'
000000000000f3c7         db  0x04 ; '.'
000000000000f3c8         db  0x41 ; 'A'
000000000000f3c9         db  0x0e ; '.'
000000000000f3ca         db  0x28 ; '('
000000000000f3cb         db  0x83 ; '.'
000000000000f3cc         db  0x05 ; '.'
000000000000f3cd         db  0x4f ; 'O'
000000000000f3ce         db  0x0e ; '.'
000000000000f3cf         db  0x50 ; 'P'
000000000000f3d0         db  0x02 ; '.'
000000000000f3d1         db  0x47 ; 'G'
000000000000f3d2         db  0x0a ; '.'
000000000000f3d3         db  0x0e ; '.'
000000000000f3d4         db  0x28 ; '('
000000000000f3d5         db  0x41 ; 'A'
000000000000f3d6         db  0x0e ; '.'
000000000000f3d7         db  0x20 ; ' '
000000000000f3d8         db  0x41 ; 'A'
000000000000f3d9         db  0x0e ; '.'
000000000000f3da         db  0x18 ; '.'
000000000000f3db         db  0x42 ; 'B'
000000000000f3dc         db  0x0e ; '.'
000000000000f3dd         db  0x10 ; '.'
000000000000f3de         db  0x42 ; 'B'
000000000000f3df         db  0x0e ; '.'
000000000000f3e0         db  0x08 ; '.'
000000000000f3e1         db  0x47 ; 'G'
000000000000f3e2         db  0x0b ; '.'
000000000000f3e3         db  0x00 ; '.'
000000000000f3e4         dd         0x00000038                                  ; Length of the record
000000000000f3e8         dd         0x00000158                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f3ec         db         0xb4, 0x4f, 2 dup (0xff)                    ; begin 0x43a0
000000000000f3f0         db         0x10, 0x01, 2 dup (0x00)                    ; length 0x110 (end at 0x44b0)
000000000000f3f4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f3f5         db  0x42 ; 'B'
000000000000f3f6         db  0x0e ; '.'
000000000000f3f7         db  0x10 ; '.'
000000000000f3f8         db  0x8d ; '.'
000000000000f3f9         db  0x02 ; '.'
000000000000f3fa         db  0x42 ; 'B'
000000000000f3fb         db  0x0e ; '.'
000000000000f3fc         db  0x18 ; '.'
000000000000f3fd         db  0x8c ; '.'
000000000000f3fe         db  0x03 ; '.'
000000000000f3ff         db  0x41 ; 'A'
000000000000f400         db  0x0e ; '.'
000000000000f401         db  0x20 ; ' '
000000000000f402         db  0x86 ; '.'
000000000000f403         db  0x04 ; '.'
000000000000f404         db  0x41 ; 'A'
000000000000f405         db  0x0e ; '.'
000000000000f406         db  0x28 ; '('
000000000000f407         db  0x83 ; '.'
000000000000f408         db  0x05 ; '.'
000000000000f409         db  0x49 ; 'I'
000000000000f40a         db  0x0e ; '.'
000000000000f40b         db  0xd0 ; '.'
000000000000f40c         db  0x01 ; '.'
000000000000f40d         db  0x79 ; 'y'
000000000000f40e         db  0x0a ; '.'
000000000000f40f         db  0x0e ; '.'
000000000000f410         db  0x28 ; '('
000000000000f411         db  0x41 ; 'A'
000000000000f412         db  0x0e ; '.'
000000000000f413         db  0x20 ; ' '
000000000000f414         db  0x41 ; 'A'
000000000000f415         db  0x0e ; '.'
000000000000f416         db  0x18 ; '.'
000000000000f417         db  0x42 ; 'B'
000000000000f418         db  0x0e ; '.'
000000000000f419         db  0x10 ; '.'
000000000000f41a         db  0x42 ; 'B'
000000000000f41b         db  0x0e ; '.'
000000000000f41c         db  0x08 ; '.'
000000000000f41d         db  0x41 ; 'A'
000000000000f41e         db  0x0b ; '.'
000000000000f41f         db  0x00 ; '.'
000000000000f420         dd         0x00000040                                  ; Length of the record
000000000000f424         dd         0x00000194                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f428         db         0x88, 0x50, 2 dup (0xff)                    ; begin 0x44b0
000000000000f42c         db         0xf3, 3 dup (0x00)                          ; length 0xf3 (end at 0x45a3)
000000000000f430         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f431         db  0x42 ; 'B'
000000000000f432         db  0x0e ; '.'
000000000000f433         db  0x10 ; '.'
000000000000f434         db  0x8e ; '.'
000000000000f435         db  0x02 ; '.'
000000000000f436         db  0x42 ; 'B'
000000000000f437         db  0x0e ; '.'
000000000000f438         db  0x18 ; '.'
000000000000f439         db  0x8d ; '.'
000000000000f43a         db  0x03 ; '.'
000000000000f43b         db  0x45 ; 'E'
000000000000f43c         db  0x0e ; '.'
000000000000f43d         db  0x20 ; ' '
000000000000f43e         db  0x8c ; '.'
000000000000f43f         db  0x04 ; '.'
000000000000f440         db  0x41 ; 'A'
000000000000f441         db  0x0e ; '.'
000000000000f442         db  0x28 ; '('
000000000000f443         db  0x86 ; '.'
000000000000f444         db  0x05 ; '.'
000000000000f445         db  0x44 ; 'D'
000000000000f446         db  0x0e ; '.'
000000000000f447         db  0x30 ; '0'
000000000000f448         db  0x83 ; '.'
000000000000f449         db  0x06 ; '.'
000000000000f44a         db  0x50 ; 'P'
000000000000f44b         db  0x0e ; '.'
000000000000f44c         db  0xa0 ; '.'
000000000000f44d         db  0x01 ; '.'
000000000000f44e         db  0x02 ; '.'
000000000000f44f         db  0x81 ; '.'
000000000000f450         db  0x0a ; '.'
000000000000f451         db  0x0e ; '.'
000000000000f452         db  0x30 ; '0'
000000000000f453         db  0x41 ; 'A'
000000000000f454         db  0x0e ; '.'
000000000000f455         db  0x28 ; '('
000000000000f456         db  0x41 ; 'A'
000000000000f457         db  0x0e ; '.'
000000000000f458         db  0x20 ; ' '
000000000000f459         db  0x42 ; 'B'
000000000000f45a         db  0x0e ; '.'
000000000000f45b         db  0x18 ; '.'
000000000000f45c         db  0x42 ; 'B'
000000000000f45d         db  0x0e ; '.'
000000000000f45e         db  0x10 ; '.'
000000000000f45f         db  0x42 ; 'B'
000000000000f460         db  0x0e ; '.'
000000000000f461         db  0x08 ; '.'
000000000000f462         db  0x41 ; 'A'
000000000000f463         db  0x0b ; '.'
000000000000f464         dd         0x00000048                                  ; Length of the record
000000000000f468         dd         0x000001d8                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f46c         db         0x44, 0x51, 2 dup (0xff)                    ; begin 0x45b0
000000000000f470         db         0x78, 0x01, 2 dup (0x00)                    ; length 0x178 (end at 0x4728)
000000000000f474         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f475         db  0x42 ; 'B'
000000000000f476         db  0x0e ; '.'
000000000000f477         db  0x10 ; '.'
000000000000f478         db  0x8f ; '.'
000000000000f479         db  0x02 ; '.'
000000000000f47a         db  0x42 ; 'B'
000000000000f47b         db  0x0e ; '.'
000000000000f47c         db  0x18 ; '.'
000000000000f47d         db  0x8e ; '.'
000000000000f47e         db  0x03 ; '.'
000000000000f47f         db  0x42 ; 'B'
000000000000f480         db  0x0e ; '.'
000000000000f481         db  0x20 ; ' '
000000000000f482         db  0x8d ; '.'
000000000000f483         db  0x04 ; '.'
000000000000f484         db  0x42 ; 'B'
000000000000f485         db  0x0e ; '.'
000000000000f486         db  0x28 ; '('
000000000000f487         db  0x8c ; '.'
000000000000f488         db  0x05 ; '.'
000000000000f489         db  0x41 ; 'A'
000000000000f48a         db  0x0e ; '.'
000000000000f48b         db  0x30 ; '0'
000000000000f48c         db  0x86 ; '.'
000000000000f48d         db  0x06 ; '.'
000000000000f48e         db  0x41 ; 'A'
000000000000f48f         db  0x0e ; '.'
000000000000f490         db  0x38 ; '8'
000000000000f491         db  0x83 ; '.'
000000000000f492         db  0x07 ; '.'
000000000000f493         db  0x44 ; 'D'
000000000000f494         db  0x0e ; '.'
000000000000f495         db  0x40 ; '@'
000000000000f496         db  0x7e ; '~'
000000000000f497         db  0x0a ; '.'
000000000000f498         db  0x0e ; '.'
000000000000f499         db  0x38 ; '8'
000000000000f49a         db  0x44 ; 'D'
000000000000f49b         db  0x0e ; '.'
000000000000f49c         db  0x30 ; '0'
000000000000f49d         db  0x41 ; 'A'
000000000000f49e         db  0x0e ; '.'
000000000000f49f         db  0x28 ; '('
000000000000f4a0         db  0x42 ; 'B'
000000000000f4a1         db  0x0e ; '.'
000000000000f4a2         db  0x20 ; ' '
000000000000f4a3         db  0x42 ; 'B'
000000000000f4a4         db  0x0e ; '.'
000000000000f4a5         db  0x18 ; '.'
000000000000f4a6         db  0x42 ; 'B'
000000000000f4a7         db  0x0e ; '.'
000000000000f4a8         db  0x10 ; '.'
000000000000f4a9         db  0x42 ; 'B'
000000000000f4aa         db  0x0e ; '.'
000000000000f4ab         db  0x08 ; '.'
000000000000f4ac         db  0x47 ; 'G'
000000000000f4ad         db  0x0b ; '.'
000000000000f4ae         db  0x00 ; '.'
000000000000f4af         db  0x00 ; '.'
000000000000f4b0         dd         0x00000018                                  ; Length of the record
000000000000f4b4         dd         0x00000224                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f4b8         db         0x78, 0x52, 2 dup (0xff)                    ; begin 0x4730
000000000000f4bc         db         0x37, 3 dup (0x00)                          ; length 0x37 (end at 0x4767)
000000000000f4c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f4c1         db  0x4d ; 'M'
000000000000f4c2         db  0x0e ; '.'
000000000000f4c3         db  0x10 ; '.'
000000000000f4c4         db  0x54 ; 'T'
000000000000f4c5         db  0x0e ; '.'
000000000000f4c6         db  0x08 ; '.'
000000000000f4c7         db  0x4c ; 'L'
000000000000f4c8         db  0x0e ; '.'
000000000000f4c9         db  0x10 ; '.'
000000000000f4ca         db  0x00 ; '.'
000000000000f4cb         db  0x00 ; '.'
000000000000f4cc         dd         0x00000058                                  ; Length of the record
000000000000f4d0         dd         0x00000240                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f4d4         db         0x9c, 0x52, 2 dup (0xff)                    ; begin 0x4770
000000000000f4d8         db         0x1f, 0x01, 2 dup (0x00)                    ; length 0x11f (end at 0x488f)
000000000000f4dc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f4dd         db  0x42 ; 'B'
000000000000f4de         db  0x0e ; '.'
000000000000f4df         db  0x10 ; '.'
000000000000f4e0         db  0x8d ; '.'
000000000000f4e1         db  0x02 ; '.'
000000000000f4e2         db  0x42 ; 'B'
000000000000f4e3         db  0x0e ; '.'
000000000000f4e4         db  0x18 ; '.'
000000000000f4e5         db  0x8c ; '.'
000000000000f4e6         db  0x03 ; '.'
000000000000f4e7         db  0x41 ; 'A'
000000000000f4e8         db  0x0e ; '.'
000000000000f4e9         db  0x20 ; ' '
000000000000f4ea         db  0x86 ; '.'
000000000000f4eb         db  0x04 ; '.'
000000000000f4ec         db  0x41 ; 'A'
000000000000f4ed         db  0x0e ; '.'
000000000000f4ee         db  0x28 ; '('
000000000000f4ef         db  0x83 ; '.'
000000000000f4f0         db  0x05 ; '.'
000000000000f4f1         db  0x44 ; 'D'
000000000000f4f2         db  0x0e ; '.'
000000000000f4f3         db  0x30 ; '0'
000000000000f4f4         db  0x02 ; '.'
000000000000f4f5         db  0x67 ; 'g'
000000000000f4f6         db  0x0e ; '.'
000000000000f4f7         db  0x38 ; '8'
000000000000f4f8         db  0x4c ; 'L'
000000000000f4f9         db  0x0e ; '.'
000000000000f4fa         db  0x40 ; '@'
000000000000f4fb         db  0x5d ; ']'
000000000000f4fc         db  0x0e ; '.'
000000000000f4fd         db  0x38 ; '8'
000000000000f4fe         db  0x41 ; 'A'
000000000000f4ff         db  0x0e ; '.'
000000000000f500         db  0x30 ; '0'
000000000000f501         db  0x52 ; 'R'
000000000000f502         db  0x0a ; '.'
000000000000f503         db  0x0e ; '.'
000000000000f504         db  0x28 ; '('
000000000000f505         db  0x43 ; 'C'
000000000000f506         db  0x0e ; '.'
000000000000f507         db  0x20 ; ' '
000000000000f508         db  0x41 ; 'A'
000000000000f509         db  0x0e ; '.'
000000000000f50a         db  0x18 ; '.'
000000000000f50b         db  0x42 ; 'B'
000000000000f50c         db  0x0e ; '.'
000000000000f50d         db  0x10 ; '.'
000000000000f50e         db  0x42 ; 'B'
000000000000f50f         db  0x0e ; '.'
000000000000f510         db  0x08 ; '.'
000000000000f511         db  0x4b ; 'K'
000000000000f512         db  0x0b ; '.'
000000000000f513         db  0x44 ; 'D'
000000000000f514         db  0x0a ; '.'
000000000000f515         db  0x0e ; '.'
000000000000f516         db  0x28 ; '('
000000000000f517         db  0x41 ; 'A'
000000000000f518         db  0x0e ; '.'
000000000000f519         db  0x20 ; ' '
000000000000f51a         db  0x41 ; 'A'
000000000000f51b         db  0x0e ; '.'
000000000000f51c         db  0x18 ; '.'
000000000000f51d         db  0x42 ; 'B'
000000000000f51e         db  0x0e ; '.'
000000000000f51f         db  0x10 ; '.'
000000000000f520         db  0x42 ; 'B'
000000000000f521         db  0x0e ; '.'
000000000000f522         db  0x08 ; '.'
000000000000f523         db  0x46 ; 'F'
000000000000f524         db  0x0b ; '.'
000000000000f525         db  0x00 ; '.'
000000000000f526         db  0x00 ; '.'
000000000000f527         db  0x00 ; '.'
000000000000f528         dd         0x00000028                                  ; Length of the record
000000000000f52c         dd         0x0000029c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f530         db         0x60, 0x53, 2 dup (0xff)                    ; begin 0x4890
000000000000f534         db         0xac, 3 dup (0x00)                          ; length 0xac (end at 0x493c)
000000000000f538         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f539         db  0x41 ; 'A'
000000000000f53a         db  0x0e ; '.'
000000000000f53b         db  0x10 ; '.'
000000000000f53c         db  0x86 ; '.'
000000000000f53d         db  0x02 ; '.'
000000000000f53e         db  0x41 ; 'A'
000000000000f53f         db  0x0e ; '.'
000000000000f540         db  0x18 ; '.'
000000000000f541         db  0x83 ; '.'
000000000000f542         db  0x03 ; '.'
000000000000f543         db  0x46 ; 'F'
000000000000f544         db  0x0e ; '.'
000000000000f545         db  0x20 ; ' '
000000000000f546         db  0x5b ; '['
000000000000f547         db  0x0a ; '.'
000000000000f548         db  0x0e ; '.'
000000000000f549         db  0x18 ; '.'
000000000000f54a         db  0x41 ; 'A'
000000000000f54b         db  0x0e ; '.'
000000000000f54c         db  0x10 ; '.'
000000000000f54d         db  0x41 ; 'A'
000000000000f54e         db  0x0e ; '.'
000000000000f54f         db  0x08 ; '.'
000000000000f550         db  0x41 ; 'A'
000000000000f551         db  0x0b ; '.'
000000000000f552         db  0x00 ; '.'
000000000000f553         db  0x00 ; '.'
000000000000f554         dd         0x00000028                                  ; Length of the record
000000000000f558         dd         0x000002c8                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f55c         db         0xe4, 0x53, 2 dup (0xff)                    ; begin 0x4940
000000000000f560         db         0xd2, 3 dup (0x00)                          ; length 0xd2 (end at 0x4a12)
000000000000f564         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f565         db  0x41 ; 'A'
000000000000f566         db  0x0e ; '.'
000000000000f567         db  0x10 ; '.'
000000000000f568         db  0x86 ; '.'
000000000000f569         db  0x02 ; '.'
000000000000f56a         db  0x41 ; 'A'
000000000000f56b         db  0x0e ; '.'
000000000000f56c         db  0x18 ; '.'
000000000000f56d         db  0x83 ; '.'
000000000000f56e         db  0x03 ; '.'
000000000000f56f         db  0x47 ; 'G'
000000000000f570         db  0x0e ; '.'
000000000000f571         db  0xb0 ; '.'
000000000000f572         db  0x01 ; '.'
000000000000f573         db  0x02 ; '.'
000000000000f574         db  0xc1 ; '.'
000000000000f575         db  0x0a ; '.'
000000000000f576         db  0x0e ; '.'
000000000000f577         db  0x18 ; '.'
000000000000f578         db  0x41 ; 'A'
000000000000f579         db  0x0e ; '.'
000000000000f57a         db  0x10 ; '.'
000000000000f57b         db  0x41 ; 'A'
000000000000f57c         db  0x0e ; '.'
000000000000f57d         db  0x08 ; '.'
000000000000f57e         db  0x41 ; 'A'
000000000000f57f         db  0x0b ; '.'
000000000000f580         dd         0x00000038                                  ; Length of the record
000000000000f584         dd         0x000002f4                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f588         db         0x98, 0x54, 2 dup (0xff)                    ; begin 0x4a20
000000000000f58c         db         0x48, 3 dup (0x00)                          ; length 0x48 (end at 0x4a68)
000000000000f590         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f591         db  0x42 ; 'B'
000000000000f592         db  0x0e ; '.'
000000000000f593         db  0x10 ; '.'
000000000000f594         db  0x8e ; '.'
000000000000f595         db  0x02 ; '.'
000000000000f596         db  0x45 ; 'E'
000000000000f597         db  0x0e ; '.'
000000000000f598         db  0x18 ; '.'
000000000000f599         db  0x8d ; '.'
000000000000f59a         db  0x03 ; '.'
000000000000f59b         db  0x45 ; 'E'
000000000000f59c         db  0x0e ; '.'
000000000000f59d         db  0x20 ; ' '
000000000000f59e         db  0x8c ; '.'
000000000000f59f         db  0x04 ; '.'
000000000000f5a0         db  0x44 ; 'D'
000000000000f5a1         db  0x0e ; '.'
000000000000f5a2         db  0x28 ; '('
000000000000f5a3         db  0x86 ; '.'
000000000000f5a4         db  0x05 ; '.'
000000000000f5a5         db  0x43 ; 'C'
000000000000f5a6         db  0x0e ; '.'
000000000000f5a7         db  0x30 ; '0'
000000000000f5a8         db  0x83 ; '.'
000000000000f5a9         db  0x06 ; '.'
000000000000f5aa         db  0x6d ; 'm'
000000000000f5ab         db  0x0e ; '.'
000000000000f5ac         db  0x28 ; '('
000000000000f5ad         db  0x41 ; 'A'
000000000000f5ae         db  0x0e ; '.'
000000000000f5af         db  0x20 ; ' '
000000000000f5b0         db  0x42 ; 'B'
000000000000f5b1         db  0x0e ; '.'
000000000000f5b2         db  0x18 ; '.'
000000000000f5b3         db  0x42 ; 'B'
000000000000f5b4         db  0x0e ; '.'
000000000000f5b5         db  0x10 ; '.'
000000000000f5b6         db  0x42 ; 'B'
000000000000f5b7         db  0x0e ; '.'
000000000000f5b8         db  0x08 ; '.'
000000000000f5b9         db  0x00 ; '.'
000000000000f5ba         db  0x00 ; '.'
000000000000f5bb         db  0x00 ; '.'
000000000000f5bc         dd         0x00000038                                  ; Length of the record
000000000000f5c0         dd         0x00000330                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f5c4         db         0xac, 0x54, 2 dup (0xff)                    ; begin 0x4a70
000000000000f5c8         db         0x15, 0x01, 2 dup (0x00)                    ; length 0x115 (end at 0x4b85)
000000000000f5cc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f5cd         db  0x42 ; 'B'
000000000000f5ce         db  0x0e ; '.'
000000000000f5cf         db  0x10 ; '.'
000000000000f5d0         db  0x8d ; '.'
000000000000f5d1         db  0x02 ; '.'
000000000000f5d2         db  0x42 ; 'B'
000000000000f5d3         db  0x0e ; '.'
000000000000f5d4         db  0x18 ; '.'
000000000000f5d5         db  0x8c ; '.'
000000000000f5d6         db  0x03 ; '.'
000000000000f5d7         db  0x44 ; 'D'
000000000000f5d8         db  0x0e ; '.'
000000000000f5d9         db  0x20 ; ' '
000000000000f5da         db  0x86 ; '.'
000000000000f5db         db  0x04 ; '.'
000000000000f5dc         db  0x41 ; 'A'
000000000000f5dd         db  0x0e ; '.'
000000000000f5de         db  0x28 ; '('
000000000000f5df         db  0x83 ; '.'
000000000000f5e0         db  0x05 ; '.'
000000000000f5e1         db  0x4a ; 'J'
000000000000f5e2         db  0x0e ; '.'
000000000000f5e3         db  0x30 ; '0'
000000000000f5e4         db  0x02 ; '.'
000000000000f5e5         db  0x6c ; 'l'
000000000000f5e6         db  0x0a ; '.'
000000000000f5e7         db  0x0e ; '.'
000000000000f5e8         db  0x28 ; '('
000000000000f5e9         db  0x44 ; 'D'
000000000000f5ea         db  0x0e ; '.'
000000000000f5eb         db  0x20 ; ' '
000000000000f5ec         db  0x41 ; 'A'
000000000000f5ed         db  0x0e ; '.'
000000000000f5ee         db  0x18 ; '.'
000000000000f5ef         db  0x42 ; 'B'
000000000000f5f0         db  0x0e ; '.'
000000000000f5f1         db  0x10 ; '.'
000000000000f5f2         db  0x42 ; 'B'
000000000000f5f3         db  0x0e ; '.'
000000000000f5f4         db  0x08 ; '.'
000000000000f5f5         db  0x48 ; 'H'
000000000000f5f6         db  0x0b ; '.'
000000000000f5f7         db  0x00 ; '.'
000000000000f5f8         dd         0x0000004c                                  ; Length of the record
000000000000f5fc         dd         0x0000036c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f600         db         0x90, 0x55, 2 dup (0xff)                    ; begin 0x4b90
000000000000f604         db         0x61, 3 dup (0x00)                          ; length 0x61 (end at 0x4bf1)
000000000000f608         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f609         db  0x47 ; 'G'
000000000000f60a         db  0x0e ; '.'
000000000000f60b         db  0x10 ; '.'
000000000000f60c         db  0x8d ; '.'
000000000000f60d         db  0x02 ; '.'
000000000000f60e         db  0x42 ; 'B'
000000000000f60f         db  0x0e ; '.'
000000000000f610         db  0x18 ; '.'
000000000000f611         db  0x8c ; '.'
000000000000f612         db  0x03 ; '.'
000000000000f613         db  0x44 ; 'D'
000000000000f614         db  0x0e ; '.'
000000000000f615         db  0x20 ; ' '
000000000000f616         db  0x86 ; '.'
000000000000f617         db  0x04 ; '.'
000000000000f618         db  0x41 ; 'A'
000000000000f619         db  0x0e ; '.'
000000000000f61a         db  0x28 ; '('
000000000000f61b         db  0x83 ; '.'
000000000000f61c         db  0x05 ; '.'
000000000000f61d         db  0x4d ; 'M'
000000000000f61e         db  0x0e ; '.'
000000000000f61f         db  0x30 ; '0'
000000000000f620         db  0x69 ; 'i'
000000000000f621         db  0x0a ; '.'
000000000000f622         db  0x0e ; '.'
000000000000f623         db  0x28 ; '('
000000000000f624         db  0x41 ; 'A'
000000000000f625         db  0x0e ; '.'
000000000000f626         db  0x20 ; ' '
000000000000f627         db  0x41 ; 'A'
000000000000f628         db  0x0e ; '.'
000000000000f629         db  0x18 ; '.'
000000000000f62a         db  0x42 ; 'B'
000000000000f62b         db  0x0e ; '.'
000000000000f62c         db  0x10 ; '.'
000000000000f62d         db  0x42 ; 'B'
000000000000f62e         db  0x0e ; '.'
000000000000f62f         db  0x08 ; '.'
000000000000f630         db  0x46 ; 'F'
000000000000f631         db  0x0b ; '.'
000000000000f632         db  0x44 ; 'D'
000000000000f633         db  0x0e ; '.'
000000000000f634         db  0x28 ; '('
000000000000f635         db  0x44 ; 'D'
000000000000f636         db  0x0e ; '.'
000000000000f637         db  0x20 ; ' '
000000000000f638         db  0x41 ; 'A'
000000000000f639         db  0x0e ; '.'
000000000000f63a         db  0x18 ; '.'
000000000000f63b         db  0x42 ; 'B'
000000000000f63c         db  0x0e ; '.'
000000000000f63d         db  0x10 ; '.'
000000000000f63e         db  0x42 ; 'B'
000000000000f63f         db  0x0e ; '.'
000000000000f640         db  0x08 ; '.'
000000000000f641         db  0x41 ; 'A'
000000000000f642         db  0xc3 ; '.'
000000000000f643         db  0xc6 ; '.'
000000000000f644         db  0xcc ; '.'
000000000000f645         db  0xcd ; '.'
000000000000f646         db  0x00 ; '.'
000000000000f647         db  0x00 ; '.'
000000000000f648         dd         0x00000014                                  ; Length of the record
000000000000f64c         dd         0x000003bc                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f650         db         0xb0, 0x55, 2 dup (0xff)                    ; begin 0x4c00
000000000000f654         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x4c20)
000000000000f658         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f659         db  0x44 ; 'D'
000000000000f65a         db  0x0e ; '.'
000000000000f65b         db  0x10 ; '.'
000000000000f65c         db  0x57 ; 'W'
000000000000f65d         db  0x0e ; '.'
000000000000f65e         db  0x08 ; '.'
000000000000f65f         db  0x00 ; '.'
000000000000f660         dd         0x00000028                                  ; Length of the record
000000000000f664         dd         0x000003d4                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f668         db         0xb8, 0x55, 2 dup (0xff)                    ; begin 0x4c20
000000000000f66c         db         0xba, 3 dup (0x00)                          ; length 0xba (end at 0x4cda)
000000000000f670         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f671         db  0x41 ; 'A'
000000000000f672         db  0x0e ; '.'
000000000000f673         db  0x10 ; '.'
000000000000f674         db  0x86 ; '.'
000000000000f675         db  0x02 ; '.'
000000000000f676         db  0x41 ; 'A'
000000000000f677         db  0x0e ; '.'
000000000000f678         db  0x18 ; '.'
000000000000f679         db  0x83 ; '.'
000000000000f67a         db  0x03 ; '.'
000000000000f67b         db  0x47 ; 'G'
000000000000f67c         db  0x0e ; '.'
000000000000f67d         db  0xc0 ; '.'
000000000000f67e         db  0x05 ; '.'
000000000000f67f         db  0x02 ; '.'
000000000000f680         db  0x61 ; 'a'
000000000000f681         db  0x0a ; '.'
000000000000f682         db  0x0e ; '.'
000000000000f683         db  0x18 ; '.'
000000000000f684         db  0x41 ; 'A'
000000000000f685         db  0x0e ; '.'
000000000000f686         db  0x10 ; '.'
000000000000f687         db  0x41 ; 'A'
000000000000f688         db  0x0e ; '.'
000000000000f689         db  0x08 ; '.'
000000000000f68a         db  0x41 ; 'A'
000000000000f68b         db  0x0b ; '.'
000000000000f68c         dd         0x00000028                                  ; Length of the record
000000000000f690         dd         0x00000400                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f694         db         0x4c, 0x56, 2 dup (0xff)                    ; begin 0x4ce0
000000000000f698         db         0xba, 3 dup (0x00)                          ; length 0xba (end at 0x4d9a)
000000000000f69c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f69d         db  0x41 ; 'A'
000000000000f69e         db  0x0e ; '.'
000000000000f69f         db  0x10 ; '.'
000000000000f6a0         db  0x86 ; '.'
000000000000f6a1         db  0x02 ; '.'
000000000000f6a2         db  0x41 ; 'A'
000000000000f6a3         db  0x0e ; '.'
000000000000f6a4         db  0x18 ; '.'
000000000000f6a5         db  0x83 ; '.'
000000000000f6a6         db  0x03 ; '.'
000000000000f6a7         db  0x47 ; 'G'
000000000000f6a8         db  0x0e ; '.'
000000000000f6a9         db  0xc0 ; '.'
000000000000f6aa         db  0x05 ; '.'
000000000000f6ab         db  0x02 ; '.'
000000000000f6ac         db  0x61 ; 'a'
000000000000f6ad         db  0x0a ; '.'
000000000000f6ae         db  0x0e ; '.'
000000000000f6af         db  0x18 ; '.'
000000000000f6b0         db  0x41 ; 'A'
000000000000f6b1         db  0x0e ; '.'
000000000000f6b2         db  0x10 ; '.'
000000000000f6b3         db  0x41 ; 'A'
000000000000f6b4         db  0x0e ; '.'
000000000000f6b5         db  0x08 ; '.'
000000000000f6b6         db  0x41 ; 'A'
000000000000f6b7         db  0x0b ; '.'
000000000000f6b8         dd         0x00000014                                  ; Length of the record
000000000000f6bc         dd         0x0000042c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f6c0         db         0xe0, 0x56, 2 dup (0xff)                    ; begin 0x4da0
000000000000f6c4         db         0x4c, 3 dup (0x00)                          ; length 0x4c (end at 0x4dec)
000000000000f6c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f6c9         db  0x77 ; 'w'
000000000000f6ca         db  0x0e ; '.'
000000000000f6cb         db  0x10 ; '.'
000000000000f6cc         db  0x54 ; 'T'
000000000000f6cd         db  0x0e ; '.'
000000000000f6ce         db  0x08 ; '.'
000000000000f6cf         db  0x00 ; '.'
000000000000f6d0         dd         0x00000024                                  ; Length of the record
000000000000f6d4         dd         0x00000444                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f6d8         db         0x18, 0x57, 2 dup (0xff)                    ; begin 0x4df0
000000000000f6dc         db         0x3b, 3 dup (0x00)                          ; length 0x3b (end at 0x4e2b)
000000000000f6e0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f6e1         db  0x41 ; 'A'
000000000000f6e2         db  0x0e ; '.'
000000000000f6e3         db  0x10 ; '.'
000000000000f6e4         db  0x86 ; '.'
000000000000f6e5         db  0x02 ; '.'
000000000000f6e6         db  0x41 ; 'A'
000000000000f6e7         db  0x0e ; '.'
000000000000f6e8         db  0x18 ; '.'
000000000000f6e9         db  0x83 ; '.'
000000000000f6ea         db  0x03 ; '.'
000000000000f6eb         db  0x47 ; 'G'
000000000000f6ec         db  0x0e ; '.'
000000000000f6ed         db  0x20 ; ' '
000000000000f6ee         db  0x6d ; 'm'
000000000000f6ef         db  0x0e ; '.'
000000000000f6f0         db  0x18 ; '.'
000000000000f6f1         db  0x43 ; 'C'
000000000000f6f2         db  0x0e ; '.'
000000000000f6f3         db  0x10 ; '.'
000000000000f6f4         db  0x41 ; 'A'
000000000000f6f5         db  0x0e ; '.'
000000000000f6f6         db  0x08 ; '.'
000000000000f6f7         db  0x00 ; '.'
000000000000f6f8         dd         0x0000004c                                  ; Length of the record
000000000000f6fc         dd         0x0000046c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f700         db         0x30, 0x57, 2 dup (0xff)                    ; begin 0x4e30
000000000000f704         db         0xfa, 0x01, 2 dup (0x00)                    ; length 0x1fa (end at 0x502a)
000000000000f708         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f709         db  0x42 ; 'B'
000000000000f70a         db  0x0e ; '.'
000000000000f70b         db  0x10 ; '.'
000000000000f70c         db  0x8d ; '.'
000000000000f70d         db  0x02 ; '.'
000000000000f70e         db  0x42 ; 'B'
000000000000f70f         db  0x0e ; '.'
000000000000f710         db  0x18 ; '.'
000000000000f711         db  0x8c ; '.'
000000000000f712         db  0x03 ; '.'
000000000000f713         db  0x44 ; 'D'
000000000000f714         db  0x0e ; '.'
000000000000f715         db  0x20 ; ' '
000000000000f716         db  0x86 ; '.'
000000000000f717         db  0x04 ; '.'
000000000000f718         db  0x41 ; 'A'
000000000000f719         db  0x0e ; '.'
000000000000f71a         db  0x28 ; '('
000000000000f71b         db  0x83 ; '.'
000000000000f71c         db  0x05 ; '.'
000000000000f71d         db  0x47 ; 'G'
000000000000f71e         db  0x0e ; '.'
000000000000f71f         db  0x30 ; '0'
000000000000f720         db  0x02 ; '.'
000000000000f721         db  0xb6 ; '.'
000000000000f722         db  0x0a ; '.'
000000000000f723         db  0x0e ; '.'
000000000000f724         db  0x28 ; '('
000000000000f725         db  0x44 ; 'D'
000000000000f726         db  0x0e ; '.'
000000000000f727         db  0x20 ; ' '
000000000000f728         db  0x41 ; 'A'
000000000000f729         db  0x0e ; '.'
000000000000f72a         db  0x18 ; '.'
000000000000f72b         db  0x42 ; 'B'
000000000000f72c         db  0x0e ; '.'
000000000000f72d         db  0x10 ; '.'
000000000000f72e         db  0x42 ; 'B'
000000000000f72f         db  0x0e ; '.'
000000000000f730         db  0x08 ; '.'
000000000000f731         db  0x41 ; 'A'
000000000000f732         db  0x0b ; '.'
000000000000f733         db  0x02 ; '.'
000000000000f734         db  0x81 ; '.'
000000000000f735         db  0x0a ; '.'
000000000000f736         db  0x0e ; '.'
000000000000f737         db  0x28 ; '('
000000000000f738         db  0x44 ; 'D'
000000000000f739         db  0x0e ; '.'
000000000000f73a         db  0x20 ; ' '
000000000000f73b         db  0x41 ; 'A'
000000000000f73c         db  0x0e ; '.'
000000000000f73d         db  0x18 ; '.'
000000000000f73e         db  0x42 ; 'B'
000000000000f73f         db  0x0e ; '.'
000000000000f740         db  0x10 ; '.'
000000000000f741         db  0x42 ; 'B'
000000000000f742         db  0x0e ; '.'
000000000000f743         db  0x08 ; '.'
000000000000f744         db  0x46 ; 'F'
000000000000f745         db  0x0b ; '.'
000000000000f746         db  0x00 ; '.'
000000000000f747         db  0x00 ; '.'
000000000000f748         dd         0x00000028                                  ; Length of the record
000000000000f74c         dd         0x000004bc                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f750         db         0xe0, 0x58, 2 dup (0xff)                    ; begin 0x5030
000000000000f754         db         0x0a, 0x06, 2 dup (0x00)                    ; length 0x60a (end at 0x563a)
000000000000f758         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f759         db  0x42 ; 'B'
000000000000f75a         db  0x0e ; '.'
000000000000f75b         db  0x10 ; '.'
000000000000f75c         db  0x8d ; '.'
000000000000f75d         db  0x02 ; '.'
000000000000f75e         db  0x42 ; 'B'
000000000000f75f         db  0x0e ; '.'
000000000000f760         db  0x18 ; '.'
000000000000f761         db  0x8c ; '.'
000000000000f762         db  0x03 ; '.'
000000000000f763         db  0x46 ; 'F'
000000000000f764         db  0x0e ; '.'
000000000000f765         db  0x20 ; ' '
000000000000f766         db  0x86 ; '.'
000000000000f767         db  0x04 ; '.'
000000000000f768         db  0x41 ; 'A'
000000000000f769         db  0x0e ; '.'
000000000000f76a         db  0x28 ; '('
000000000000f76b         db  0x83 ; '.'
000000000000f76c         db  0x05 ; '.'
000000000000f76d         db  0x49 ; 'I'
000000000000f76e         db  0x0e ; '.'
000000000000f76f         db  0xb0 ; '.'
000000000000f770         db  0x01 ; '.'
000000000000f771         db  0x00 ; '.'
000000000000f772         db  0x00 ; '.'
000000000000f773         db  0x00 ; '.'
000000000000f774         dd         0x0000003c                                  ; Length of the record
000000000000f778         dd         0x000004e8                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f77c         db         0xc4, 0x5e, 2 dup (0xff)                    ; begin 0x5640
000000000000f780         db         0xec, 3 dup (0x00)                          ; length 0xec (end at 0x572c)
000000000000f784         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f785         db  0x42 ; 'B'
000000000000f786         db  0x0e ; '.'
000000000000f787         db  0x10 ; '.'
000000000000f788         db  0x8e ; '.'
000000000000f789         db  0x02 ; '.'
000000000000f78a         db  0x45 ; 'E'
000000000000f78b         db  0x0e ; '.'
000000000000f78c         db  0x18 ; '.'
000000000000f78d         db  0x8d ; '.'
000000000000f78e         db  0x03 ; '.'
000000000000f78f         db  0x45 ; 'E'
000000000000f790         db  0x0e ; '.'
000000000000f791         db  0x20 ; ' '
000000000000f792         db  0x8c ; '.'
000000000000f793         db  0x04 ; '.'
000000000000f794         db  0x44 ; 'D'
000000000000f795         db  0x0e ; '.'
000000000000f796         db  0x28 ; '('
000000000000f797         db  0x86 ; '.'
000000000000f798         db  0x05 ; '.'
000000000000f799         db  0x43 ; 'C'
000000000000f79a         db  0x0e ; '.'
000000000000f79b         db  0x30 ; '0'
000000000000f79c         db  0x83 ; '.'
000000000000f79d         db  0x06 ; '.'
000000000000f79e         db  0x02 ; '.'
000000000000f79f         db  0x6a ; 'j'
000000000000f7a0         db  0x0a ; '.'
000000000000f7a1         db  0x0e ; '.'
000000000000f7a2         db  0x28 ; '('
000000000000f7a3         db  0x43 ; 'C'
000000000000f7a4         db  0x0e ; '.'
000000000000f7a5         db  0x20 ; ' '
000000000000f7a6         db  0x42 ; 'B'
000000000000f7a7         db  0x0e ; '.'
000000000000f7a8         db  0x18 ; '.'
000000000000f7a9         db  0x42 ; 'B'
000000000000f7aa         db  0x0e ; '.'
000000000000f7ab         db  0x10 ; '.'
000000000000f7ac         db  0x42 ; 'B'
000000000000f7ad         db  0x0e ; '.'
000000000000f7ae         db  0x08 ; '.'
000000000000f7af         db  0x41 ; 'A'
000000000000f7b0         db  0x0b ; '.'
000000000000f7b1         db  0x00 ; '.'
000000000000f7b2         db  0x00 ; '.'
000000000000f7b3         db  0x00 ; '.'
000000000000f7b4         dd         0x00000048                                  ; Length of the record
000000000000f7b8         dd         0x00000528                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f7bc         db         0x74, 0x5f, 2 dup (0xff)                    ; begin 0x5730
000000000000f7c0         db         0x4e, 0x03, 2 dup (0x00)                    ; length 0x34e (end at 0x5a7e)
000000000000f7c4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f7c5         db  0x42 ; 'B'
000000000000f7c6         db  0x0e ; '.'
000000000000f7c7         db  0x10 ; '.'
000000000000f7c8         db  0x8f ; '.'
000000000000f7c9         db  0x02 ; '.'
000000000000f7ca         db  0x42 ; 'B'
000000000000f7cb         db  0x0e ; '.'
000000000000f7cc         db  0x18 ; '.'
000000000000f7cd         db  0x8e ; '.'
000000000000f7ce         db  0x03 ; '.'
000000000000f7cf         db  0x45 ; 'E'
000000000000f7d0         db  0x0e ; '.'
000000000000f7d1         db  0x20 ; ' '
000000000000f7d2         db  0x8d ; '.'
000000000000f7d3         db  0x04 ; '.'
000000000000f7d4         db  0x42 ; 'B'
000000000000f7d5         db  0x0e ; '.'
000000000000f7d6         db  0x28 ; '('
000000000000f7d7         db  0x8c ; '.'
000000000000f7d8         db  0x05 ; '.'
000000000000f7d9         db  0x44 ; 'D'
000000000000f7da         db  0x0e ; '.'
000000000000f7db         db  0x30 ; '0'
000000000000f7dc         db  0x86 ; '.'
000000000000f7dd         db  0x06 ; '.'
000000000000f7de         db  0x41 ; 'A'
000000000000f7df         db  0x0e ; '.'
000000000000f7e0         db  0x38 ; '8'
000000000000f7e1         db  0x83 ; '.'
000000000000f7e2         db  0x07 ; '.'
000000000000f7e3         db  0x4c ; 'L'
000000000000f7e4         db  0x0e ; '.'
000000000000f7e5         db  0xf0 ; '.'
000000000000f7e6         db  0x01 ; '.'
000000000000f7e7         db  0x02 ; '.'
000000000000f7e8         db  0x9c ; '.'
000000000000f7e9         db  0x0a ; '.'
000000000000f7ea         db  0x0e ; '.'
000000000000f7eb         db  0x38 ; '8'
000000000000f7ec         db  0x41 ; 'A'
000000000000f7ed         db  0x0e ; '.'
000000000000f7ee         db  0x30 ; '0'
000000000000f7ef         db  0x41 ; 'A'
000000000000f7f0         db  0x0e ; '.'
000000000000f7f1         db  0x28 ; '('
000000000000f7f2         db  0x42 ; 'B'
000000000000f7f3         db  0x0e ; '.'
000000000000f7f4         db  0x20 ; ' '
000000000000f7f5         db  0x42 ; 'B'
000000000000f7f6         db  0x0e ; '.'
000000000000f7f7         db  0x18 ; '.'
000000000000f7f8         db  0x42 ; 'B'
000000000000f7f9         db  0x0e ; '.'
000000000000f7fa         db  0x10 ; '.'
000000000000f7fb         db  0x42 ; 'B'
000000000000f7fc         db  0x0e ; '.'
000000000000f7fd         db  0x08 ; '.'
000000000000f7fe         db  0x41 ; 'A'
000000000000f7ff         db  0x0b ; '.'
000000000000f800         dd         0x00000028                                  ; Length of the record
000000000000f804         dd         0x00000574                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f808         db         0x78, 0x62, 2 dup (0xff)                    ; begin 0x5a80
000000000000f80c         db         0x9e, 3 dup (0x00)                          ; length 0x9e (end at 0x5b1e)
000000000000f810         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f811         db  0x50 ; 'P'
000000000000f812         db  0x0e ; '.'
000000000000f813         db  0x10 ; '.'
000000000000f814         db  0x8c ; '.'
000000000000f815         db  0x02 ; '.'
000000000000f816         db  0x41 ; 'A'
000000000000f817         db  0x0e ; '.'
000000000000f818         db  0x18 ; '.'
000000000000f819         db  0x86 ; '.'
000000000000f81a         db  0x03 ; '.'
000000000000f81b         db  0x41 ; 'A'
000000000000f81c         db  0x0e ; '.'
000000000000f81d         db  0x20 ; ' '
000000000000f81e         db  0x83 ; '.'
000000000000f81f         db  0x04 ; '.'
000000000000f820         db  0x56 ; 'V'
000000000000f821         db  0x0a ; '.'
000000000000f822         db  0x0e ; '.'
000000000000f823         db  0x18 ; '.'
000000000000f824         db  0x54 ; 'T'
000000000000f825         db  0x0e ; '.'
000000000000f826         db  0x10 ; '.'
000000000000f827         db  0x42 ; 'B'
000000000000f828         db  0x0e ; '.'
000000000000f829         db  0x08 ; '.'
000000000000f82a         db  0x41 ; 'A'
000000000000f82b         db  0x0b ; '.'
000000000000f82c         dd         0x00000030                                  ; Length of the record
000000000000f830         dd         0x000005a0                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f834         db         0xec, 0x62, 2 dup (0xff)                    ; begin 0x5b20
000000000000f838         db         0x12, 0x01, 2 dup (0x00)                    ; length 0x112 (end at 0x5c32)
000000000000f83c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f83d         db  0x4b ; 'K'
000000000000f83e         db  0x0e ; '.'
000000000000f83f         db  0x10 ; '.'
000000000000f840         db  0x8c ; '.'
000000000000f841         db  0x02 ; '.'
000000000000f842         db  0x45 ; 'E'
000000000000f843         db  0x0e ; '.'
000000000000f844         db  0x18 ; '.'
000000000000f845         db  0x86 ; '.'
000000000000f846         db  0x03 ; '.'
000000000000f847         db  0x44 ; 'D'
000000000000f848         db  0x0e ; '.'
000000000000f849         db  0x20 ; ' '
000000000000f84a         db  0x83 ; '.'
000000000000f84b         db  0x04 ; '.'
000000000000f84c         db  0x02 ; '.'
000000000000f84d         db  0x88 ; '.'
000000000000f84e         db  0x0a ; '.'
000000000000f84f         db  0x0e ; '.'
000000000000f850         db  0x18 ; '.'
000000000000f851         db  0x41 ; 'A'
000000000000f852         db  0x0e ; '.'
000000000000f853         db  0x10 ; '.'
000000000000f854         db  0x42 ; 'B'
000000000000f855         db  0x0e ; '.'
000000000000f856         db  0x08 ; '.'
000000000000f857         db  0x41 ; 'A'
000000000000f858         db  0x0b ; '.'
000000000000f859         db  0x02 ; '.'
000000000000f85a         db  0x70 ; 'p'
000000000000f85b         db  0x0e ; '.'
000000000000f85c         db  0x08 ; '.'
000000000000f85d         db  0xc3 ; '.'
000000000000f85e         db  0xc6 ; '.'
000000000000f85f         db  0xcc ; '.'
000000000000f860         dd         0x00000040                                  ; Length of the record
000000000000f864         dd         0x000005d4                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f868         db         0xd8, 0x63, 2 dup (0xff)                    ; begin 0x5c40
000000000000f86c         db         0x6a, 0x01, 2 dup (0x00)                    ; length 0x16a (end at 0x5daa)
000000000000f870         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f871         db  0x4b ; 'K'
000000000000f872         db  0x0e ; '.'
000000000000f873         db  0x10 ; '.'
000000000000f874         db  0x8d ; '.'
000000000000f875         db  0x02 ; '.'
000000000000f876         db  0x42 ; 'B'
000000000000f877         db  0x0e ; '.'
000000000000f878         db  0x18 ; '.'
000000000000f879         db  0x8c ; '.'
000000000000f87a         db  0x03 ; '.'
000000000000f87b         db  0x44 ; 'D'
000000000000f87c         db  0x0e ; '.'
000000000000f87d         db  0x20 ; ' '
000000000000f87e         db  0x86 ; '.'
000000000000f87f         db  0x04 ; '.'
000000000000f880         db  0x41 ; 'A'
000000000000f881         db  0x0e ; '.'
000000000000f882         db  0x28 ; '('
000000000000f883         db  0x83 ; '.'
000000000000f884         db  0x05 ; '.'
000000000000f885         db  0x49 ; 'I'
000000000000f886         db  0x0e ; '.'
000000000000f887         db  0x30 ; '0'
000000000000f888         db  0x03 ; '.'
000000000000f889         db  0x2e ; '.'
000000000000f88a         db  0x01 ; '.'
000000000000f88b         db  0x0a ; '.'
000000000000f88c         db  0x0e ; '.'
000000000000f88d         db  0x28 ; '('
000000000000f88e         db  0x41 ; 'A'
000000000000f88f         db  0x0e ; '.'
000000000000f890         db  0x20 ; ' '
000000000000f891         db  0x41 ; 'A'
000000000000f892         db  0x0e ; '.'
000000000000f893         db  0x18 ; '.'
000000000000f894         db  0x42 ; 'B'
000000000000f895         db  0x0e ; '.'
000000000000f896         db  0x10 ; '.'
000000000000f897         db  0x42 ; 'B'
000000000000f898         db  0x0e ; '.'
000000000000f899         db  0x08 ; '.'
000000000000f89a         db  0x41 ; 'A'
000000000000f89b         db  0x0b ; '.'
000000000000f89c         db  0x58 ; 'X'
000000000000f89d         db  0x0e ; '.'
000000000000f89e         db  0x08 ; '.'
000000000000f89f         db  0xc3 ; '.'
000000000000f8a0         db  0xc6 ; '.'
000000000000f8a1         db  0xcc ; '.'
000000000000f8a2         db  0xcd ; '.'
000000000000f8a3         db  0x00 ; '.'
000000000000f8a4         dd         0x00000068                                  ; Length of the record
000000000000f8a8         dd         0x00000618                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f8ac         db         0x04, 0x26, 2 dup (0xff)                    ; begin 0x1eb0
000000000000f8b0         db         0xcf, 0x1d, 2 dup (0x00)                    ; length 0x1dcf (end at 0x3c7f)
000000000000f8b4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f8b5         db  0x42 ; 'B'
000000000000f8b6         db  0x0e ; '.'
000000000000f8b7         db  0x10 ; '.'
000000000000f8b8         db  0x8f ; '.'
000000000000f8b9         db  0x02 ; '.'
000000000000f8ba         db  0x42 ; 'B'
000000000000f8bb         db  0x0e ; '.'
000000000000f8bc         db  0x18 ; '.'
000000000000f8bd         db  0x8e ; '.'
000000000000f8be         db  0x03 ; '.'
000000000000f8bf         db  0x42 ; 'B'
000000000000f8c0         db  0x0e ; '.'
000000000000f8c1         db  0x20 ; ' '
000000000000f8c2         db  0x8d ; '.'
000000000000f8c3         db  0x04 ; '.'
000000000000f8c4         db  0x42 ; 'B'
000000000000f8c5         db  0x0e ; '.'
000000000000f8c6         db  0x28 ; '('
000000000000f8c7         db  0x8c ; '.'
000000000000f8c8         db  0x05 ; '.'
000000000000f8c9         db  0x44 ; 'D'
000000000000f8ca         db  0x0e ; '.'
000000000000f8cb         db  0x30 ; '0'
000000000000f8cc         db  0x86 ; '.'
000000000000f8cd         db  0x06 ; '.'
000000000000f8ce         db  0x41 ; 'A'
000000000000f8cf         db  0x0e ; '.'
000000000000f8d0         db  0x38 ; '8'
000000000000f8d1         db  0x83 ; '.'
000000000000f8d2         db  0x07 ; '.'
000000000000f8d3         db  0x51 ; 'Q'
000000000000f8d4         db  0x0e ; '.'
000000000000f8d5         db  0xa0 ; '.'
000000000000f8d6         db  0x02 ; '.'
000000000000f8d7         db  0x03 ; '.'
000000000000f8d8         db  0xa7 ; '.'
000000000000f8d9         db  0x01 ; '.'
000000000000f8da         db  0x0e ; '.'
000000000000f8db         db  0xa8 ; '.'
000000000000f8dc         db  0x02 ; '.'
000000000000f8dd         db  0x57 ; 'W'
000000000000f8de         db  0x0e ; '.'
000000000000f8df         db  0xb0 ; '.'
000000000000f8e0         db  0x02 ; '.'
000000000000f8e1         db  0x55 ; 'U'
000000000000f8e2         db  0x0e ; '.'
000000000000f8e3         db  0xb8 ; '.'
000000000000f8e4         db  0x02 ; '.'
000000000000f8e5         db  0x4e ; 'N'
000000000000f8e6         db  0x0e ; '.'
000000000000f8e7         db  0xc0 ; '.'
000000000000f8e8         db  0x02 ; '.'
000000000000f8e9         db  0x48 ; 'H'
000000000000f8ea         db  0x0e ; '.'
000000000000f8eb         db  0xc8 ; '.'
000000000000f8ec         db  0x02 ; '.'
000000000000f8ed         db  0x48 ; 'H'
000000000000f8ee         db  0x0e ; '.'
000000000000f8ef         db  0xd0 ; '.'
000000000000f8f0         db  0x02 ; '.'
000000000000f8f1         db  0x52 ; 'R'
000000000000f8f2         db  0x0e ; '.'
000000000000f8f3         db  0xa0 ; '.'
000000000000f8f4         db  0x02 ; '.'
000000000000f8f5         db  0x03 ; '.'
000000000000f8f6         db  0xa4 ; '.'
000000000000f8f7         db  0x0e ; '.'
000000000000f8f8         db  0x0a ; '.'
000000000000f8f9         db  0x0e ; '.'
000000000000f8fa         db  0x38 ; '8'
000000000000f8fb         db  0x41 ; 'A'
000000000000f8fc         db  0x0e ; '.'
000000000000f8fd         db  0x30 ; '0'
000000000000f8fe         db  0x41 ; 'A'
000000000000f8ff         db  0x0e ; '.'
000000000000f900         db  0x28 ; '('
000000000000f901         db  0x42 ; 'B'
000000000000f902         db  0x0e ; '.'
000000000000f903         db  0x20 ; ' '
000000000000f904         db  0x42 ; 'B'
000000000000f905         db  0x0e ; '.'
000000000000f906         db  0x18 ; '.'
000000000000f907         db  0x42 ; 'B'
000000000000f908         db  0x0e ; '.'
000000000000f909         db  0x10 ; '.'
000000000000f90a         db  0x42 ; 'B'
000000000000f90b         db  0x0e ; '.'
000000000000f90c         db  0x08 ; '.'
000000000000f90d         db  0x41 ; 'A'
000000000000f90e         db  0x0b ; '.'
000000000000f90f         db  0x00 ; '.'
000000000000f910         dd         0x0000004c                                  ; Length of the record
000000000000f914         dd         0x00000684                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f918         db         0x98, 0x64, 2 dup (0xff)                    ; begin 0x5db0
000000000000f91c         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x5e2d)
000000000000f920         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f921         db  0x42 ; 'B'
000000000000f922         db  0x0e ; '.'
000000000000f923         db  0x10 ; '.'
000000000000f924         db  0x8c ; '.'
000000000000f925         db  0x02 ; '.'
000000000000f926         db  0x41 ; 'A'
000000000000f927         db  0x0e ; '.'
000000000000f928         db  0x18 ; '.'
000000000000f929         db  0x86 ; '.'
000000000000f92a         db  0x03 ; '.'
000000000000f92b         db  0x44 ; 'D'
000000000000f92c         db  0x0e ; '.'
000000000000f92d         db  0x20 ; ' '
000000000000f92e         db  0x83 ; '.'
000000000000f92f         db  0x04 ; '.'
000000000000f930         db  0x69 ; 'i'
000000000000f931         db  0x0a ; '.'
000000000000f932         db  0x0e ; '.'
000000000000f933         db  0x18 ; '.'
000000000000f934         db  0x41 ; 'A'
000000000000f935         db  0x0e ; '.'
000000000000f936         db  0x10 ; '.'
000000000000f937         db  0x42 ; 'B'
000000000000f938         db  0x0e ; '.'
000000000000f939         db  0x08 ; '.'
000000000000f93a         db  0x45 ; 'E'
000000000000f93b         db  0x0b ; '.'
000000000000f93c         db  0x55 ; 'U'
000000000000f93d         db  0x0a ; '.'
000000000000f93e         db  0x0e ; '.'
000000000000f93f         db  0x18 ; '.'
000000000000f940         db  0x41 ; 'A'
000000000000f941         db  0x0e ; '.'
000000000000f942         db  0x10 ; '.'
000000000000f943         db  0x42 ; 'B'
000000000000f944         db  0x0e ; '.'
000000000000f945         db  0x08 ; '.'
000000000000f946         db  0x48 ; 'H'
000000000000f947         db  0x0b ; '.'
000000000000f948         db  0x41 ; 'A'
000000000000f949         db  0x0a ; '.'
000000000000f94a         db  0x0e ; '.'
000000000000f94b         db  0x18 ; '.'
000000000000f94c         db  0x46 ; 'F'
000000000000f94d         db  0x0e ; '.'
000000000000f94e         db  0x10 ; '.'
000000000000f94f         db  0x42 ; 'B'
000000000000f950         db  0x0e ; '.'
000000000000f951         db  0x08 ; '.'
000000000000f952         db  0x47 ; 'G'
000000000000f953         db  0x0b ; '.'
000000000000f954         db  0x49 ; 'I'
000000000000f955         db  0x0e ; '.'
000000000000f956         db  0x18 ; '.'
000000000000f957         db  0x41 ; 'A'
000000000000f958         db  0x0e ; '.'
000000000000f959         db  0x10 ; '.'
000000000000f95a         db  0x42 ; 'B'
000000000000f95b         db  0x0e ; '.'
000000000000f95c         db  0x08 ; '.'
000000000000f95d         db  0x00 ; '.'
000000000000f95e         db  0x00 ; '.'
000000000000f95f         db  0x00 ; '.'
000000000000f960         dd         0x00000010                                  ; Length of the record
000000000000f964         dd         0x000006d4                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f968         db         0xc8, 0x64, 2 dup (0xff)                    ; begin 0x5e30
000000000000f96c         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5e38)
000000000000f970         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f971         align      4
000000000000f974         dd         0x00000010                                  ; Length of the record
000000000000f978         dd         0x000006e8                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f97c         db         0xc4, 0x64, 2 dup (0xff)                    ; begin 0x5e40
000000000000f980         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5e48)
000000000000f984         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f985         align      8
000000000000f988         dd         0x0000002c                                  ; Length of the record
000000000000f98c         dd         0x000006fc                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f990         db         0xc0, 0x64, 2 dup (0xff)                    ; begin 0x5e50
000000000000f994         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x5ef4)
000000000000f998         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f999         db  0x41 ; 'A'
000000000000f99a         db  0x0e ; '.'
000000000000f99b         db  0x10 ; '.'
000000000000f99c         db  0x86 ; '.'
000000000000f99d         db  0x02 ; '.'
000000000000f99e         db  0x41 ; 'A'
000000000000f99f         db  0x0e ; '.'
000000000000f9a0         db  0x18 ; '.'
000000000000f9a1         db  0x83 ; '.'
000000000000f9a2         db  0x03 ; '.'
000000000000f9a3         db  0x44 ; 'D'
000000000000f9a4         db  0x0e ; '.'
000000000000f9a5         db  0x20 ; ' '
000000000000f9a6         db  0x7a ; 'z'
000000000000f9a7         db  0x0a ; '.'
000000000000f9a8         db  0x0e ; '.'
000000000000f9a9         db  0x18 ; '.'
000000000000f9aa         db  0x41 ; 'A'
000000000000f9ab         db  0x0e ; '.'
000000000000f9ac         db  0x10 ; '.'
000000000000f9ad         db  0x41 ; 'A'
000000000000f9ae         db  0x0e ; '.'
000000000000f9af         db  0x08 ; '.'
000000000000f9b0         db  0x41 ; 'A'
000000000000f9b1         db  0x0b ; '.'
000000000000f9b2         db  0x00 ; '.'
000000000000f9b3         db  0x00 ; '.'
000000000000f9b4         db  0x00 ; '.'
000000000000f9b5         db  0x00 ; '.'
000000000000f9b6         db  0x00 ; '.'
000000000000f9b7         db  0x00 ; '.'
000000000000f9b8         dd         0x00000034                                  ; Length of the record
000000000000f9bc         dd         0x0000072c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f9c0         db         0x40, 0x65, 2 dup (0xff)                    ; begin 0x5f00
000000000000f9c4         db         0x56, 3 dup (0x00)                          ; length 0x56 (end at 0x5f56)
000000000000f9c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f9c9         db  0x42 ; 'B'
000000000000f9ca         db  0x0e ; '.'
000000000000f9cb         db  0x10 ; '.'
000000000000f9cc         db  0x8d ; '.'
000000000000f9cd         db  0x02 ; '.'
000000000000f9ce         db  0x42 ; 'B'
000000000000f9cf         db  0x0e ; '.'
000000000000f9d0         db  0x18 ; '.'
000000000000f9d1         db  0x8c ; '.'
000000000000f9d2         db  0x03 ; '.'
000000000000f9d3         db  0x43 ; 'C'
000000000000f9d4         db  0x0e ; '.'
000000000000f9d5         db  0x20 ; ' '
000000000000f9d6         db  0x86 ; '.'
000000000000f9d7         db  0x04 ; '.'
000000000000f9d8         db  0x41 ; 'A'
000000000000f9d9         db  0x0e ; '.'
000000000000f9da         db  0x28 ; '('
000000000000f9db         db  0x83 ; '.'
000000000000f9dc         db  0x05 ; '.'
000000000000f9dd         db  0x4d ; 'M'
000000000000f9de         db  0x0e ; '.'
000000000000f9df         db  0x30 ; '0'
000000000000f9e0         db  0x78 ; 'x'
000000000000f9e1         db  0x0e ; '.'
000000000000f9e2         db  0x28 ; '('
000000000000f9e3         db  0x43 ; 'C'
000000000000f9e4         db  0x0e ; '.'
000000000000f9e5         db  0x20 ; ' '
000000000000f9e6         db  0x41 ; 'A'
000000000000f9e7         db  0x0e ; '.'
000000000000f9e8         db  0x18 ; '.'
000000000000f9e9         db  0x42 ; 'B'
000000000000f9ea         db  0x0e ; '.'
000000000000f9eb         db  0x10 ; '.'
000000000000f9ec         db  0x42 ; 'B'
000000000000f9ed         db  0x0e ; '.'
000000000000f9ee         db  0x08 ; '.'
000000000000f9ef         db  0x00 ; '.'
000000000000f9f0         dd         0x00000024                                  ; Length of the record
000000000000f9f4         dd         0x00000764                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000f9f8         db         0x68, 0x65, 2 dup (0xff)                    ; begin 0x5f60
000000000000f9fc         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x5fea)
000000000000fa00         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fa01         db  0x41 ; 'A'
000000000000fa02         db  0x0e ; '.'
000000000000fa03         db  0x10 ; '.'
000000000000fa04         db  0x83 ; '.'
000000000000fa05         db  0x02 ; '.'
000000000000fa06         db  0x49 ; 'I'
000000000000fa07         db  0x0e ; '.'
000000000000fa08         db  0x30 ; '0'
000000000000fa09         db  0x02 ; '.'
000000000000fa0a         db  0x79 ; 'y'
000000000000fa0b         db  0x0a ; '.'
000000000000fa0c         db  0x0e ; '.'
000000000000fa0d         db  0x10 ; '.'
000000000000fa0e         db  0x41 ; 'A'
000000000000fa0f         db  0x0e ; '.'
000000000000fa10         db  0x08 ; '.'
000000000000fa11         db  0x41 ; 'A'
000000000000fa12         db  0x0b ; '.'
000000000000fa13         db  0x00 ; '.'
000000000000fa14         db  0x00 ; '.'
000000000000fa15         db  0x00 ; '.'
000000000000fa16         db  0x00 ; '.'
000000000000fa17         db  0x00 ; '.'
000000000000fa18         dd         0x00000010                                  ; Length of the record
000000000000fa1c         dd         0x0000078c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fa20         db         0xd0, 0x65, 2 dup (0xff)                    ; begin 0x5ff0
000000000000fa24         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x5ffa)
000000000000fa28         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fa29         align      4
000000000000fa2c         dd         0x00000018                                  ; Length of the record
000000000000fa30         dd         0x000007a0                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fa34         db         0xcc, 0x65, 2 dup (0xff)                    ; begin 0x6000
000000000000fa38         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x6041)
000000000000fa3c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fa3d         db  0x44 ; 'D'
000000000000fa3e         db  0x0e ; '.'
000000000000fa3f         db  0x30 ; '0'
000000000000fa40         db  0x77 ; 'w'
000000000000fa41         db  0x0a ; '.'
000000000000fa42         db  0x0e ; '.'
000000000000fa43         db  0x08 ; '.'
000000000000fa44         db  0x41 ; 'A'
000000000000fa45         db  0x0b ; '.'
000000000000fa46         db  0x00 ; '.'
000000000000fa47         db  0x00 ; '.'
000000000000fa48         dd         0x00000010                                  ; Length of the record
000000000000fa4c         dd         0x000007bc                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fa50         db         0x00, 0x66, 2 dup (0xff)                    ; begin 0x6050
000000000000fa54         db         0xc7, 3 dup (0x00)                          ; length 0xc7 (end at 0x6117)
000000000000fa58         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fa59         align      4
000000000000fa5c         dd         0x000000a4                                  ; Length of the record
000000000000fa60         dd         0x000007d0                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fa64         db         0xbc, 0x66, 2 dup (0xff)                    ; begin 0x6120
000000000000fa68         db         0x07, 0x0a, 2 dup (0x00)                    ; length 0xa07 (end at 0x6b27)
000000000000fa6c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fa6d         db  0x42 ; 'B'
000000000000fa6e         db  0x0e ; '.'
000000000000fa6f         db  0x10 ; '.'
000000000000fa70         db  0x8f ; '.'
000000000000fa71         db  0x02 ; '.'
000000000000fa72         db  0x42 ; 'B'
000000000000fa73         db  0x0e ; '.'
000000000000fa74         db  0x18 ; '.'
000000000000fa75         db  0x8e ; '.'
000000000000fa76         db  0x03 ; '.'
000000000000fa77         db  0x44 ; 'D'
000000000000fa78         db  0x0e ; '.'
000000000000fa79         db  0x20 ; ' '
000000000000fa7a         db  0x8d ; '.'
000000000000fa7b         db  0x04 ; '.'
000000000000fa7c         db  0x42 ; 'B'
000000000000fa7d         db  0x0e ; '.'
000000000000fa7e         db  0x28 ; '('
000000000000fa7f         db  0x8c ; '.'
000000000000fa80         db  0x05 ; '.'
000000000000fa81         db  0x44 ; 'D'
000000000000fa82         db  0x0e ; '.'
000000000000fa83         db  0x30 ; '0'
000000000000fa84         db  0x86 ; '.'
000000000000fa85         db  0x06 ; '.'
000000000000fa86         db  0x41 ; 'A'
000000000000fa87         db  0x0e ; '.'
000000000000fa88         db  0x38 ; '8'
000000000000fa89         db  0x83 ; '.'
000000000000fa8a         db  0x07 ; '.'
000000000000fa8b         db  0x54 ; 'T'
000000000000fa8c         db  0x0e ; '.'
000000000000fa8d         db  0xd0 ; '.'
000000000000fa8e         db  0x01 ; '.'
000000000000fa8f         db  0x03 ; '.'
000000000000fa90         db  0x7e ; '~'
000000000000fa91         db  0x01 ; '.'
000000000000fa92         db  0x0e ; '.'
000000000000fa93         db  0xe0 ; '.'
000000000000fa94         db  0x01 ; '.'
000000000000fa95         db  0x6e ; 'n'
000000000000fa96         db  0x0e ; '.'
000000000000fa97         db  0xd8 ; '.'
000000000000fa98         db  0x01 ; '.'
000000000000fa99         db  0x41 ; 'A'
000000000000fa9a         db  0x0e ; '.'
000000000000fa9b         db  0xd0 ; '.'
000000000000fa9c         db  0x01 ; '.'
000000000000fa9d         db  0x03 ; '.'
000000000000fa9e         db  0x40 ; '@'
000000000000fa9f         db  0x01 ; '.'
000000000000faa0         db  0x0e ; '.'
000000000000faa1         db  0xe0 ; '.'
000000000000faa2         db  0x01 ; '.'
000000000000faa3         db  0x75 ; 'u'
000000000000faa4         db  0x0e ; '.'
000000000000faa5         db  0xd8 ; '.'
000000000000faa6         db  0x01 ; '.'
000000000000faa7         db  0x41 ; 'A'
000000000000faa8         db  0x0e ; '.'
000000000000faa9         db  0xd0 ; '.'
000000000000faaa         db  0x01 ; '.'
000000000000faab         db  0x02 ; '.'
000000000000faac         db  0xea ; '.'
000000000000faad         db  0x0a ; '.'
000000000000faae         db  0x0e ; '.'
000000000000faaf         db  0x38 ; '8'
000000000000fab0         db  0x41 ; 'A'
000000000000fab1         db  0x0e ; '.'
000000000000fab2         db  0x30 ; '0'
000000000000fab3         db  0x41 ; 'A'
000000000000fab4         db  0x0e ; '.'
000000000000fab5         db  0x28 ; '('
000000000000fab6         db  0x42 ; 'B'
000000000000fab7         db  0x0e ; '.'
000000000000fab8         db  0x20 ; ' '
000000000000fab9         db  0x42 ; 'B'
000000000000faba         db  0x0e ; '.'
000000000000fabb         db  0x18 ; '.'
000000000000fabc         db  0x42 ; 'B'
000000000000fabd         db  0x0e ; '.'
000000000000fabe         db  0x10 ; '.'
000000000000fabf         db  0x42 ; 'B'
000000000000fac0         db  0x0e ; '.'
000000000000fac1         db  0x08 ; '.'
000000000000fac2         db  0x46 ; 'F'
000000000000fac3         db  0x0b ; '.'
000000000000fac4         db  0x03 ; '.'
000000000000fac5         db  0x2c ; ','
000000000000fac6         db  0x01 ; '.'
000000000000fac7         db  0x0e ; '.'
000000000000fac8         db  0xe0 ; '.'
000000000000fac9         db  0x01 ; '.'
000000000000faca         db  0x52 ; 'R'
000000000000facb         db  0x0e ; '.'
000000000000facc         db  0xd8 ; '.'
000000000000facd         db  0x01 ; '.'
000000000000face         db  0x41 ; 'A'
000000000000facf         db  0x0e ; '.'
000000000000fad0         db  0xd0 ; '.'
000000000000fad1         db  0x01 ; '.'
000000000000fad2         db  0x55 ; 'U'
000000000000fad3         db  0x0e ; '.'
000000000000fad4         db  0xe0 ; '.'
000000000000fad5         db  0x01 ; '.'
000000000000fad6         db  0x4d ; 'M'
000000000000fad7         db  0x0e ; '.'
000000000000fad8         db  0xd8 ; '.'
000000000000fad9         db  0x01 ; '.'
000000000000fada         db  0x42 ; 'B'
000000000000fadb         db  0x0e ; '.'
000000000000fadc         db  0xd0 ; '.'
000000000000fadd         db  0x01 ; '.'
000000000000fade         db  0x03 ; '.'
000000000000fadf         db  0x51 ; 'Q'
000000000000fae0         db  0x01 ; '.'
000000000000fae1         db  0x0e ; '.'
000000000000fae2         db  0xe0 ; '.'
000000000000fae3         db  0x01 ; '.'
000000000000fae4         db  0x77 ; 'w'
000000000000fae5         db  0x0e ; '.'
000000000000fae6         db  0xd8 ; '.'
000000000000fae7         db  0x01 ; '.'
000000000000fae8         db  0x41 ; 'A'
000000000000fae9         db  0x0e ; '.'
000000000000faea         db  0xd0 ; '.'
000000000000faeb         db  0x01 ; '.'
000000000000faec         db  0x5d ; ']'
000000000000faed         db  0x0e ; '.'
000000000000faee         db  0xe0 ; '.'
000000000000faef         db  0x01 ; '.'
000000000000faf0         db  0x71 ; 'q'
000000000000faf1         db  0x0e ; '.'
000000000000faf2         db  0xd8 ; '.'
000000000000faf3         db  0x01 ; '.'
000000000000faf4         db  0x45 ; 'E'
000000000000faf5         db  0x0e ; '.'
000000000000faf6         db  0xd0 ; '.'
000000000000faf7         db  0x01 ; '.'
000000000000faf8         db  0x63 ; 'c'
000000000000faf9         db  0x0e ; '.'
000000000000fafa         db  0xe0 ; '.'
000000000000fafb         db  0x01 ; '.'
000000000000fafc         db  0x4c ; 'L'
000000000000fafd         db  0x0e ; '.'
000000000000fafe         db  0xd8 ; '.'
000000000000faff         db  0x01 ; '.'
000000000000fb00         db  0x42 ; 'B'
000000000000fb01         db  0x0e ; '.'
000000000000fb02         db  0xd0 ; '.'
000000000000fb03         db  0x01 ; '.'
000000000000fb04         dd         0x00000038                                  ; Length of the record
000000000000fb08         dd         0x00000878                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fb0c         db         0x24, 0x70, 2 dup (0xff)                    ; begin 0x6b30
000000000000fb10         db         0xe6, 0x01, 2 dup (0x00)                    ; length 0x1e6 (end at 0x6d16)
000000000000fb14         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fb15         db  0x42 ; 'B'
000000000000fb16         db  0x0e ; '.'
000000000000fb17         db  0x10 ; '.'
000000000000fb18         db  0x8d ; '.'
000000000000fb19         db  0x02 ; '.'
000000000000fb1a         db  0x42 ; 'B'
000000000000fb1b         db  0x0e ; '.'
000000000000fb1c         db  0x18 ; '.'
000000000000fb1d         db  0x8c ; '.'
000000000000fb1e         db  0x03 ; '.'
000000000000fb1f         db  0x44 ; 'D'
000000000000fb20         db  0x0e ; '.'
000000000000fb21         db  0x20 ; ' '
000000000000fb22         db  0x86 ; '.'
000000000000fb23         db  0x04 ; '.'
000000000000fb24         db  0x41 ; 'A'
000000000000fb25         db  0x0e ; '.'
000000000000fb26         db  0x28 ; '('
000000000000fb27         db  0x83 ; '.'
000000000000fb28         db  0x05 ; '.'
000000000000fb29         db  0x4a ; 'J'
000000000000fb2a         db  0x0e ; '.'
000000000000fb2b         db  0x40 ; '@'
000000000000fb2c         db  0x02 ; '.'
000000000000fb2d         db  0x7a ; 'z'
000000000000fb2e         db  0x0a ; '.'
000000000000fb2f         db  0x0e ; '.'
000000000000fb30         db  0x28 ; '('
000000000000fb31         db  0x41 ; 'A'
000000000000fb32         db  0x0e ; '.'
000000000000fb33         db  0x20 ; ' '
000000000000fb34         db  0x41 ; 'A'
000000000000fb35         db  0x0e ; '.'
000000000000fb36         db  0x18 ; '.'
000000000000fb37         db  0x42 ; 'B'
000000000000fb38         db  0x0e ; '.'
000000000000fb39         db  0x10 ; '.'
000000000000fb3a         db  0x42 ; 'B'
000000000000fb3b         db  0x0e ; '.'
000000000000fb3c         db  0x08 ; '.'
000000000000fb3d         db  0x45 ; 'E'
000000000000fb3e         db  0x0b ; '.'
000000000000fb3f         db  0x00 ; '.'
000000000000fb40         dd         0x00000038                                  ; Length of the record
000000000000fb44         dd         0x000008b4                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fb48         db         0xd8, 0x71, 2 dup (0xff)                    ; begin 0x6d20
000000000000fb4c         db         0x3f, 0x01, 2 dup (0x00)                    ; length 0x13f (end at 0x6e5f)
000000000000fb50         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fb51         db  0x42 ; 'B'
000000000000fb52         db  0x0e ; '.'
000000000000fb53         db  0x10 ; '.'
000000000000fb54         db  0x8d ; '.'
000000000000fb55         db  0x02 ; '.'
000000000000fb56         db  0x42 ; 'B'
000000000000fb57         db  0x0e ; '.'
000000000000fb58         db  0x18 ; '.'
000000000000fb59         db  0x8c ; '.'
000000000000fb5a         db  0x03 ; '.'
000000000000fb5b         db  0x44 ; 'D'
000000000000fb5c         db  0x0e ; '.'
000000000000fb5d         db  0x20 ; ' '
000000000000fb5e         db  0x86 ; '.'
000000000000fb5f         db  0x04 ; '.'
000000000000fb60         db  0x41 ; 'A'
000000000000fb61         db  0x0e ; '.'
000000000000fb62         db  0x28 ; '('
000000000000fb63         db  0x83 ; '.'
000000000000fb64         db  0x05 ; '.'
000000000000fb65         db  0x4d ; 'M'
000000000000fb66         db  0x0e ; '.'
000000000000fb67         db  0x90 ; '.'
000000000000fb68         db  0x02 ; '.'
000000000000fb69         db  0x02 ; '.'
000000000000fb6a         db  0x8e ; '.'
000000000000fb6b         db  0x0a ; '.'
000000000000fb6c         db  0x0e ; '.'
000000000000fb6d         db  0x28 ; '('
000000000000fb6e         db  0x41 ; 'A'
000000000000fb6f         db  0x0e ; '.'
000000000000fb70         db  0x20 ; ' '
000000000000fb71         db  0x41 ; 'A'
000000000000fb72         db  0x0e ; '.'
000000000000fb73         db  0x18 ; '.'
000000000000fb74         db  0x42 ; 'B'
000000000000fb75         db  0x0e ; '.'
000000000000fb76         db  0x10 ; '.'
000000000000fb77         db  0x42 ; 'B'
000000000000fb78         db  0x0e ; '.'
000000000000fb79         db  0x08 ; '.'
000000000000fb7a         db  0x46 ; 'F'
000000000000fb7b         db  0x0b ; '.'
000000000000fb7c         dd         0x00000048                                  ; Length of the record
000000000000fb80         dd         0x000008f0                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fb84         db         0xdc, 0x72, 2 dup (0xff)                    ; begin 0x6e60
000000000000fb88         db         0x3b, 0x01, 2 dup (0x00)                    ; length 0x13b (end at 0x6f9b)
000000000000fb8c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fb8d         db  0x42 ; 'B'
000000000000fb8e         db  0x0e ; '.'
000000000000fb8f         db  0x10 ; '.'
000000000000fb90         db  0x8e ; '.'
000000000000fb91         db  0x02 ; '.'
000000000000fb92         db  0x42 ; 'B'
000000000000fb93         db  0x0e ; '.'
000000000000fb94         db  0x18 ; '.'
000000000000fb95         db  0x8d ; '.'
000000000000fb96         db  0x03 ; '.'
000000000000fb97         db  0x45 ; 'E'
000000000000fb98         db  0x0e ; '.'
000000000000fb99         db  0x20 ; ' '
000000000000fb9a         db  0x8c ; '.'
000000000000fb9b         db  0x04 ; '.'
000000000000fb9c         db  0x41 ; 'A'
000000000000fb9d         db  0x0e ; '.'
000000000000fb9e         db  0x28 ; '('
000000000000fb9f         db  0x86 ; '.'
000000000000fba0         db  0x05 ; '.'
000000000000fba1         db  0x44 ; 'D'
000000000000fba2         db  0x0e ; '.'
000000000000fba3         db  0x30 ; '0'
000000000000fba4         db  0x83 ; '.'
000000000000fba5         db  0x06 ; '.'
000000000000fba6         db  0x4a ; 'J'
000000000000fba7         db  0x0e ; '.'
000000000000fba8         db  0x80 ; '.'
000000000000fba9         db  0x02 ; '.'
000000000000fbaa         db  0x03 ; '.'
000000000000fbab         db  0x0d ; '.'
000000000000fbac         db  0x01 ; '.'
000000000000fbad         db  0x0a ; '.'
000000000000fbae         db  0x0e ; '.'
000000000000fbaf         db  0x30 ; '0'
000000000000fbb0         db  0x41 ; 'A'
000000000000fbb1         db  0x0e ; '.'
000000000000fbb2         db  0x28 ; '('
000000000000fbb3         db  0x41 ; 'A'
000000000000fbb4         db  0x0e ; '.'
000000000000fbb5         db  0x20 ; ' '
000000000000fbb6         db  0x42 ; 'B'
000000000000fbb7         db  0x0e ; '.'
000000000000fbb8         db  0x18 ; '.'
000000000000fbb9         db  0x42 ; 'B'
000000000000fbba         db  0x0e ; '.'
000000000000fbbb         db  0x10 ; '.'
000000000000fbbc         db  0x42 ; 'B'
000000000000fbbd         db  0x0e ; '.'
000000000000fbbe         db  0x08 ; '.'
000000000000fbbf         db  0x43 ; 'C'
000000000000fbc0         db  0x0b ; '.'
000000000000fbc1         db  0x00 ; '.'
000000000000fbc2         db  0x00 ; '.'
000000000000fbc3         db  0x00 ; '.'
000000000000fbc4         db  0x00 ; '.'
000000000000fbc5         db  0x00 ; '.'
000000000000fbc6         db  0x00 ; '.'
000000000000fbc7         db  0x00 ; '.'
000000000000fbc8         dd         0x0000001c                                  ; Length of the record
000000000000fbcc         dd         0x0000093c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fbd0         db         0xd0, 0x73, 2 dup (0xff)                    ; begin 0x6fa0
000000000000fbd4         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x703f)
000000000000fbd8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fbd9         db  0x44 ; 'D'
000000000000fbda         db  0x0e ; '.'
000000000000fbdb         db  0x10 ; '.'
000000000000fbdc         db  0x83 ; '.'
000000000000fbdd         db  0x02 ; '.'
000000000000fbde         db  0x02 ; '.'
000000000000fbdf         db  0x78 ; 'x'
000000000000fbe0         db  0x0a ; '.'
000000000000fbe1         db  0x0e ; '.'
000000000000fbe2         db  0x08 ; '.'
000000000000fbe3         db  0x41 ; 'A'
000000000000fbe4         db  0x0b ; '.'
000000000000fbe5         db  0x00 ; '.'
000000000000fbe6         db  0x00 ; '.'
000000000000fbe7         db  0x00 ; '.'
000000000000fbe8         dd         0x00000040                                  ; Length of the record
000000000000fbec         dd         0x0000095c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fbf0         db         0x50, 0x74, 2 dup (0xff)                    ; begin 0x7040
000000000000fbf4         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x7127)
000000000000fbf8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fbf9         db  0x41 ; 'A'
000000000000fbfa         db  0x0e ; '.'
000000000000fbfb         db  0x10 ; '.'
000000000000fbfc         db  0x86 ; '.'
000000000000fbfd         db  0x02 ; '.'
000000000000fbfe         db  0x41 ; 'A'
000000000000fbff         db  0x0e ; '.'
000000000000fc00         db  0x18 ; '.'
000000000000fc01         db  0x83 ; '.'
000000000000fc02         db  0x03 ; '.'
000000000000fc03         db  0x49 ; 'I'
000000000000fc04         db  0x0e ; '.'
000000000000fc05         db  0x20 ; ' '
000000000000fc06         db  0x6e ; 'n'
000000000000fc07         db  0x0a ; '.'
000000000000fc08         db  0x0e ; '.'
000000000000fc09         db  0x18 ; '.'
000000000000fc0a         db  0x41 ; 'A'
000000000000fc0b         db  0x0e ; '.'
000000000000fc0c         db  0x10 ; '.'
000000000000fc0d         db  0x41 ; 'A'
000000000000fc0e         db  0x0e ; '.'
000000000000fc0f         db  0x08 ; '.'
000000000000fc10         db  0x45 ; 'E'
000000000000fc11         db  0x0b ; '.'
000000000000fc12         db  0x02 ; '.'
000000000000fc13         db  0x4a ; 'J'
000000000000fc14         db  0x0a ; '.'
000000000000fc15         db  0x0e ; '.'
000000000000fc16         db  0x18 ; '.'
000000000000fc17         db  0x41 ; 'A'
000000000000fc18         db  0x0e ; '.'
000000000000fc19         db  0x10 ; '.'
000000000000fc1a         db  0x41 ; 'A'
000000000000fc1b         db  0x0e ; '.'
000000000000fc1c         db  0x08 ; '.'
000000000000fc1d         db  0x44 ; 'D'
000000000000fc1e         db  0x0b ; '.'
000000000000fc1f         db  0x02 ; '.'
000000000000fc20         db  0x54 ; 'T'
000000000000fc21         db  0x0e ; '.'
000000000000fc22         db  0x18 ; '.'
000000000000fc23         db  0x41 ; 'A'
000000000000fc24         db  0x0e ; '.'
000000000000fc25         db  0x10 ; '.'
000000000000fc26         db  0x41 ; 'A'
000000000000fc27         db  0x0e ; '.'
000000000000fc28         db  0x08 ; '.'
000000000000fc29         db  0x00 ; '.'
000000000000fc2a         db  0x00 ; '.'
000000000000fc2b         db  0x00 ; '.'
000000000000fc2c         dd         0x00000074                                  ; Length of the record
000000000000fc30         dd         0x000009a0                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fc34         db         0xfc, 0x74, 2 dup (0xff)                    ; begin 0x7130
000000000000fc38         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x8364)
000000000000fc3c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fc3d         db  0x42 ; 'B'
000000000000fc3e         db  0x0e ; '.'
000000000000fc3f         db  0x10 ; '.'
000000000000fc40         db  0x8f ; '.'
000000000000fc41         db  0x02 ; '.'
000000000000fc42         db  0x42 ; 'B'
000000000000fc43         db  0x0e ; '.'
000000000000fc44         db  0x18 ; '.'
000000000000fc45         db  0x8e ; '.'
000000000000fc46         db  0x03 ; '.'
000000000000fc47         db  0x45 ; 'E'
000000000000fc48         db  0x0e ; '.'
000000000000fc49         db  0x20 ; ' '
000000000000fc4a         db  0x8d ; '.'
000000000000fc4b         db  0x04 ; '.'
000000000000fc4c         db  0x42 ; 'B'
000000000000fc4d         db  0x0e ; '.'
000000000000fc4e         db  0x28 ; '('
000000000000fc4f         db  0x8c ; '.'
000000000000fc50         db  0x05 ; '.'
000000000000fc51         db  0x44 ; 'D'
000000000000fc52         db  0x0e ; '.'
000000000000fc53         db  0x30 ; '0'
000000000000fc54         db  0x86 ; '.'
000000000000fc55         db  0x06 ; '.'
000000000000fc56         db  0x41 ; 'A'
000000000000fc57         db  0x0e ; '.'
000000000000fc58         db  0x38 ; '8'
000000000000fc59         db  0x83 ; '.'
000000000000fc5a         db  0x07 ; '.'
000000000000fc5b         db  0x53 ; 'S'
000000000000fc5c         db  0x0e ; '.'
000000000000fc5d         db  0xf0 ; '.'
000000000000fc5e         db  0x01 ; '.'
000000000000fc5f         db  0x03 ; '.'
000000000000fc60         db  0x81 ; '.'
000000000000fc61         db  0x0b ; '.'
000000000000fc62         db  0x0e ; '.'
000000000000fc63         db  0xf8 ; '.'
000000000000fc64         db  0x01 ; '.'
000000000000fc65         db  0x4a ; 'J'
000000000000fc66         db  0x0e ; '.'
000000000000fc67         db  0x80 ; '.'
000000000000fc68         db  0x02 ; '.'
000000000000fc69         db  0x44 ; 'D'
000000000000fc6a         db  0x0e ; '.'
000000000000fc6b         db  0x88 ; '.'
000000000000fc6c         db  0x02 ; '.'
000000000000fc6d         db  0x45 ; 'E'
000000000000fc6e         db  0x0e ; '.'
000000000000fc6f         db  0x90 ; '.'
000000000000fc70         db  0x02 ; '.'
000000000000fc71         db  0x5f ; '_'
000000000000fc72         db  0x0e ; '.'
000000000000fc73         db  0xf0 ; '.'
000000000000fc74         db  0x01 ; '.'
000000000000fc75         db  0x64 ; 'd'
000000000000fc76         db  0x0a ; '.'
000000000000fc77         db  0x0e ; '.'
000000000000fc78         db  0x38 ; '8'
000000000000fc79         db  0x41 ; 'A'
000000000000fc7a         db  0x0e ; '.'
000000000000fc7b         db  0x30 ; '0'
000000000000fc7c         db  0x41 ; 'A'
000000000000fc7d         db  0x0e ; '.'
000000000000fc7e         db  0x28 ; '('
000000000000fc7f         db  0x42 ; 'B'
000000000000fc80         db  0x0e ; '.'
000000000000fc81         db  0x20 ; ' '
000000000000fc82         db  0x42 ; 'B'
000000000000fc83         db  0x0e ; '.'
000000000000fc84         db  0x18 ; '.'
000000000000fc85         db  0x42 ; 'B'
000000000000fc86         db  0x0e ; '.'
000000000000fc87         db  0x10 ; '.'
000000000000fc88         db  0x42 ; 'B'
000000000000fc89         db  0x0e ; '.'
000000000000fc8a         db  0x08 ; '.'
000000000000fc8b         db  0x44 ; 'D'
000000000000fc8c         db  0x0b ; '.'
000000000000fc8d         db  0x03 ; '.'
000000000000fc8e         db  0x99 ; '.'
000000000000fc8f         db  0x05 ; '.'
000000000000fc90         db  0x0e ; '.'
000000000000fc91         db  0xf8 ; '.'
000000000000fc92         db  0x01 ; '.'
000000000000fc93         db  0x4d ; 'M'
000000000000fc94         db  0x0e ; '.'
000000000000fc95         db  0x80 ; '.'
000000000000fc96         db  0x02 ; '.'
000000000000fc97         db  0x44 ; 'D'
000000000000fc98         db  0x0e ; '.'
000000000000fc99         db  0x88 ; '.'
000000000000fc9a         db  0x02 ; '.'
000000000000fc9b         db  0x47 ; 'G'
000000000000fc9c         db  0x0e ; '.'
000000000000fc9d         db  0x90 ; '.'
000000000000fc9e         db  0x02 ; '.'
000000000000fc9f         db  0x5b ; '['
000000000000fca0         db  0x0e ; '.'
000000000000fca1         db  0xf0 ; '.'
000000000000fca2         db  0x01 ; '.'
000000000000fca3         db  0x00 ; '.'
000000000000fca4         dd         0x00000068                                  ; Length of the record
000000000000fca8         dd         0x00000a18                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fcac         db         0xc4, 0x86, 2 dup (0xff)                    ; begin 0x8370
000000000000fcb0         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x851b)
000000000000fcb4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fcb5         db  0x42 ; 'B'
000000000000fcb6         db  0x0e ; '.'
000000000000fcb7         db  0x10 ; '.'
000000000000fcb8         db  0x8f ; '.'
000000000000fcb9         db  0x02 ; '.'
000000000000fcba         db  0x42 ; 'B'
000000000000fcbb         db  0x0e ; '.'
000000000000fcbc         db  0x18 ; '.'
000000000000fcbd         db  0x8e ; '.'
000000000000fcbe         db  0x03 ; '.'
000000000000fcbf         db  0x45 ; 'E'
000000000000fcc0         db  0x0e ; '.'
000000000000fcc1         db  0x20 ; ' '
000000000000fcc2         db  0x8d ; '.'
000000000000fcc3         db  0x04 ; '.'
000000000000fcc4         db  0x42 ; 'B'
000000000000fcc5         db  0x0e ; '.'
000000000000fcc6         db  0x28 ; '('
000000000000fcc7         db  0x8c ; '.'
000000000000fcc8         db  0x05 ; '.'
000000000000fcc9         db  0x44 ; 'D'
000000000000fcca         db  0x0e ; '.'
000000000000fccb         db  0x30 ; '0'
000000000000fccc         db  0x86 ; '.'
000000000000fccd         db  0x06 ; '.'
000000000000fcce         db  0x41 ; 'A'
000000000000fccf         db  0x0e ; '.'
000000000000fcd0         db  0x38 ; '8'
000000000000fcd1         db  0x83 ; '.'
000000000000fcd2         db  0x07 ; '.'
000000000000fcd3         db  0x47 ; 'G'
000000000000fcd4         db  0x0e ; '.'
000000000000fcd5         db  0x60 ; '`'
000000000000fcd6         db  0x02 ; '.'
000000000000fcd7         db  0x99 ; '.'
000000000000fcd8         db  0x0e ; '.'
000000000000fcd9         db  0x68 ; 'h'
000000000000fcda         db  0x5f ; '_'
000000000000fcdb         db  0x0e ; '.'
000000000000fcdc         db  0x70 ; 'p'
000000000000fcdd         db  0x46 ; 'F'
000000000000fcde         db  0x0e ; '.'
000000000000fcdf         db  0x78 ; 'x'
000000000000fce0         db  0x42 ; 'B'
000000000000fce1         db  0x0e ; '.'
000000000000fce2         db  0x80 ; '.'
000000000000fce3         db  0x01 ; '.'
000000000000fce4         db  0x59 ; 'Y'
000000000000fce5         db  0x0e ; '.'
000000000000fce6         db  0x60 ; '`'
000000000000fce7         db  0x02 ; '.'
000000000000fce8         db  0x40 ; '@'
000000000000fce9         db  0x0e ; '.'
000000000000fcea         db  0x68 ; 'h'
000000000000fceb         db  0x4b ; 'K'
000000000000fcec         db  0x0e ; '.'
000000000000fced         db  0x70 ; 'p'
000000000000fcee         db  0x43 ; 'C'
000000000000fcef         db  0x0e ; '.'
000000000000fcf0         db  0x78 ; 'x'
000000000000fcf1         db  0x45 ; 'E'
000000000000fcf2         db  0x0e ; '.'
000000000000fcf3         db  0x80 ; '.'
000000000000fcf4         db  0x01 ; '.'
000000000000fcf5         db  0x5e ; '^'
000000000000fcf6         db  0x0e ; '.'
000000000000fcf7         db  0x60 ; '`'
000000000000fcf8         db  0x4c ; 'L'
000000000000fcf9         db  0x0a ; '.'
000000000000fcfa         db  0x0e ; '.'
000000000000fcfb         db  0x38 ; '8'
000000000000fcfc         db  0x44 ; 'D'
000000000000fcfd         db  0x0e ; '.'
000000000000fcfe         db  0x30 ; '0'
000000000000fcff         db  0x41 ; 'A'
000000000000fd00         db  0x0e ; '.'
000000000000fd01         db  0x28 ; '('
000000000000fd02         db  0x42 ; 'B'
000000000000fd03         db  0x0e ; '.'
000000000000fd04         db  0x20 ; ' '
000000000000fd05         db  0x42 ; 'B'
000000000000fd06         db  0x0e ; '.'
000000000000fd07         db  0x18 ; '.'
000000000000fd08         db  0x42 ; 'B'
000000000000fd09         db  0x0e ; '.'
000000000000fd0a         db  0x10 ; '.'
000000000000fd0b         db  0x42 ; 'B'
000000000000fd0c         db  0x0e ; '.'
000000000000fd0d         db  0x08 ; '.'
000000000000fd0e         db  0x46 ; 'F'
000000000000fd0f         db  0x0b ; '.'
000000000000fd10         dd         0x00000028                                  ; Length of the record
000000000000fd14         dd         0x00000a84                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fd18         db         0x08, 0x88, 2 dup (0xff)                    ; begin 0x8520
000000000000fd1c         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x8556)
000000000000fd20         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fd21         db  0x42 ; 'B'
000000000000fd22         db  0x0e ; '.'
000000000000fd23         db  0x10 ; '.'
000000000000fd24         db  0x8c ; '.'
000000000000fd25         db  0x02 ; '.'
000000000000fd26         db  0x41 ; 'A'
000000000000fd27         db  0x0e ; '.'
000000000000fd28         db  0x18 ; '.'
000000000000fd29         db  0x86 ; '.'
000000000000fd2a         db  0x03 ; '.'
000000000000fd2b         db  0x41 ; 'A'
000000000000fd2c         db  0x0e ; '.'
000000000000fd2d         db  0x20 ; ' '
000000000000fd2e         db  0x83 ; '.'
000000000000fd2f         db  0x04 ; '.'
000000000000fd30         db  0x6e ; 'n'
000000000000fd31         db  0x0e ; '.'
000000000000fd32         db  0x18 ; '.'
000000000000fd33         db  0x41 ; 'A'
000000000000fd34         db  0x0e ; '.'
000000000000fd35         db  0x10 ; '.'
000000000000fd36         db  0x42 ; 'B'
000000000000fd37         db  0x0e ; '.'
000000000000fd38         db  0x08 ; '.'
000000000000fd39         db  0x00 ; '.'
000000000000fd3a         db  0x00 ; '.'
000000000000fd3b         db  0x00 ; '.'
000000000000fd3c         dd         0x00000010                                  ; Length of the record
000000000000fd40         dd         0x00000ab0                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fd44         db         0x1c, 0x88, 2 dup (0xff)                    ; begin 0x8560
000000000000fd48         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x8571)
000000000000fd4c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fd4d         align      16
000000000000fd50         dd         0x00000010                                  ; Length of the record
000000000000fd54         dd         0x00000ac4                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fd58         db         0x28, 0x88, 2 dup (0xff)                    ; begin 0x8580
000000000000fd5c         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x8591)
000000000000fd60         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fd61         align      4
000000000000fd64         dd         0x00000010                                  ; Length of the record
000000000000fd68         dd         0x00000ad8                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fd6c         db         0x34, 0x88, 2 dup (0xff)                    ; begin 0x85a0
000000000000fd70         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x85d5)
000000000000fd74         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fd75         align      8
000000000000fd78         dd         0x00000010                                  ; Length of the record
000000000000fd7c         dd         0x00000aec                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fd80         db         0x60, 0x88, 2 dup (0xff)                    ; begin 0x85e0
000000000000fd84         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x85f5)
000000000000fd88         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fd89         align      4
000000000000fd8c         dd         0x00000010                                  ; Length of the record
000000000000fd90         dd         0x00000b00                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fd94         db         0x6c, 0x88, 2 dup (0xff)                    ; begin 0x8600
000000000000fd98         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x8630)
000000000000fd9c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fd9d         db  0x6b ; 'k'
000000000000fd9e         db  0x0e ; '.'
000000000000fd9f         db  0x10 ; '.'
000000000000fda0         dd         0x00000050                                  ; Length of the record
000000000000fda4         dd         0x00000b14                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fda8         db         2 dup (0x88), 2 dup (0xff)                  ; begin 0x8630
000000000000fdac         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x86a4)
000000000000fdb0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fdb1         db  0x42 ; 'B'
000000000000fdb2         db  0x0e ; '.'
000000000000fdb3         db  0x10 ; '.'
000000000000fdb4         db  0x8f ; '.'
000000000000fdb5         db  0x02 ; '.'
000000000000fdb6         db  0x42 ; 'B'
000000000000fdb7         db  0x0e ; '.'
000000000000fdb8         db  0x18 ; '.'
000000000000fdb9         db  0x8e ; '.'
000000000000fdba         db  0x03 ; '.'
000000000000fdbb         db  0x49 ; 'I'
000000000000fdbc         db  0x0e ; '.'
000000000000fdbd         db  0x20 ; ' '
000000000000fdbe         db  0x8d ; '.'
000000000000fdbf         db  0x04 ; '.'
000000000000fdc0         db  0x42 ; 'B'
000000000000fdc1         db  0x0e ; '.'
000000000000fdc2         db  0x28 ; '('
000000000000fdc3         db  0x8c ; '.'
000000000000fdc4         db  0x05 ; '.'
000000000000fdc5         db  0x44 ; 'D'
000000000000fdc6         db  0x0e ; '.'
000000000000fdc7         db  0x30 ; '0'
000000000000fdc8         db  0x86 ; '.'
000000000000fdc9         db  0x06 ; '.'
000000000000fdca         db  0x41 ; 'A'
000000000000fdcb         db  0x0e ; '.'
000000000000fdcc         db  0x38 ; '8'
000000000000fdcd         db  0x83 ; '.'
000000000000fdce         db  0x07 ; '.'
000000000000fdcf         db  0x4d ; 'M'
000000000000fdd0         db  0x0e ; '.'
000000000000fdd1         db  0x50 ; 'P'
000000000000fdd2         db  0x5f ; '_'
000000000000fdd3         db  0x0e ; '.'
000000000000fdd4         db  0x58 ; 'X'
000000000000fdd5         db  0x47 ; 'G'
000000000000fdd6         db  0x0e ; '.'
000000000000fdd7         db  0x60 ; '`'
000000000000fdd8         db  0x46 ; 'F'
000000000000fdd9         db  0x0e ; '.'
000000000000fdda         db  0x68 ; 'h'
000000000000fddb         db  0x44 ; 'D'
000000000000fddc         db  0x0e ; '.'
000000000000fddd         db  0x70 ; 'p'
000000000000fdde         db  0x58 ; 'X'
000000000000fddf         db  0x0e ; '.'
000000000000fde0         db  0x38 ; '8'
000000000000fde1         db  0x41 ; 'A'
000000000000fde2         db  0x0e ; '.'
000000000000fde3         db  0x30 ; '0'
000000000000fde4         db  0x41 ; 'A'
000000000000fde5         db  0x0e ; '.'
000000000000fde6         db  0x28 ; '('
000000000000fde7         db  0x42 ; 'B'
000000000000fde8         db  0x0e ; '.'
000000000000fde9         db  0x20 ; ' '
000000000000fdea         db  0x42 ; 'B'
000000000000fdeb         db  0x0e ; '.'
000000000000fdec         db  0x18 ; '.'
000000000000fded         db  0x42 ; 'B'
000000000000fdee         db  0x0e ; '.'
000000000000fdef         db  0x10 ; '.'
000000000000fdf0         db  0x42 ; 'B'
000000000000fdf1         db  0x0e ; '.'
000000000000fdf2         db  0x08 ; '.'
000000000000fdf3         db  0x00 ; '.'
000000000000fdf4         dd         0x00000068                                  ; Length of the record
000000000000fdf8         dd         0x00000b68                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fdfc         db         0xb4, 0x88, 2 dup (0xff)                    ; begin 0x86b0
000000000000fe00         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x8793)
000000000000fe04         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fe05         db  0x42 ; 'B'
000000000000fe06         db  0x0e ; '.'
000000000000fe07         db  0x10 ; '.'
000000000000fe08         db  0x8f ; '.'
000000000000fe09         db  0x02 ; '.'
000000000000fe0a         db  0x42 ; 'B'
000000000000fe0b         db  0x0e ; '.'
000000000000fe0c         db  0x18 ; '.'
000000000000fe0d         db  0x8e ; '.'
000000000000fe0e         db  0x03 ; '.'
000000000000fe0f         db  0x49 ; 'I'
000000000000fe10         db  0x0e ; '.'
000000000000fe11         db  0x20 ; ' '
000000000000fe12         db  0x8d ; '.'
000000000000fe13         db  0x04 ; '.'
000000000000fe14         db  0x42 ; 'B'
000000000000fe15         db  0x0e ; '.'
000000000000fe16         db  0x28 ; '('
000000000000fe17         db  0x8c ; '.'
000000000000fe18         db  0x05 ; '.'
000000000000fe19         db  0x44 ; 'D'
000000000000fe1a         db  0x0e ; '.'
000000000000fe1b         db  0x30 ; '0'
000000000000fe1c         db  0x86 ; '.'
000000000000fe1d         db  0x06 ; '.'
000000000000fe1e         db  0x41 ; 'A'
000000000000fe1f         db  0x0e ; '.'
000000000000fe20         db  0x38 ; '8'
000000000000fe21         db  0x83 ; '.'
000000000000fe22         db  0x07 ; '.'
000000000000fe23         db  0x4d ; 'M'
000000000000fe24         db  0x0e ; '.'
000000000000fe25         db  0x70 ; 'p'
000000000000fe26         db  0x65 ; 'e'
000000000000fe27         db  0x0e ; '.'
000000000000fe28         db  0x78 ; 'x'
000000000000fe29         db  0x4d ; 'M'
000000000000fe2a         db  0x0e ; '.'
000000000000fe2b         db  0x80 ; '.'
000000000000fe2c         db  0x01 ; '.'
000000000000fe2d         db  0x46 ; 'F'
000000000000fe2e         db  0x0e ; '.'
000000000000fe2f         db  0x88 ; '.'
000000000000fe30         db  0x01 ; '.'
000000000000fe31         db  0x42 ; 'B'
000000000000fe32         db  0x0e ; '.'
000000000000fe33         db  0x90 ; '.'
000000000000fe34         db  0x01 ; '.'
000000000000fe35         db  0x5e ; '^'
000000000000fe36         db  0x0e ; '.'
000000000000fe37         db  0x70 ; 'p'
000000000000fe38         db  0x56 ; 'V'
000000000000fe39         db  0x0e ; '.'
000000000000fe3a         db  0x78 ; 'x'
000000000000fe3b         db  0x43 ; 'C'
000000000000fe3c         db  0x0e ; '.'
000000000000fe3d         db  0x80 ; '.'
000000000000fe3e         db  0x01 ; '.'
000000000000fe3f         db  0x43 ; 'C'
000000000000fe40         db  0x0e ; '.'
000000000000fe41         db  0x88 ; '.'
000000000000fe42         db  0x01 ; '.'
000000000000fe43         db  0x56 ; 'V'
000000000000fe44         db  0x0e ; '.'
000000000000fe45         db  0x90 ; '.'
000000000000fe46         db  0x01 ; '.'
000000000000fe47         db  0x52 ; 'R'
000000000000fe48         db  0x0e ; '.'
000000000000fe49         db  0x70 ; 'p'
000000000000fe4a         db  0x5b ; '['
000000000000fe4b         db  0x0e ; '.'
000000000000fe4c         db  0x38 ; '8'
000000000000fe4d         db  0x41 ; 'A'
000000000000fe4e         db  0x0e ; '.'
000000000000fe4f         db  0x30 ; '0'
000000000000fe50         db  0x41 ; 'A'
000000000000fe51         db  0x0e ; '.'
000000000000fe52         db  0x28 ; '('
000000000000fe53         db  0x42 ; 'B'
000000000000fe54         db  0x0e ; '.'
000000000000fe55         db  0x20 ; ' '
000000000000fe56         db  0x42 ; 'B'
000000000000fe57         db  0x0e ; '.'
000000000000fe58         db  0x18 ; '.'
000000000000fe59         db  0x42 ; 'B'
000000000000fe5a         db  0x0e ; '.'
000000000000fe5b         db  0x10 ; '.'
000000000000fe5c         db  0x42 ; 'B'
000000000000fe5d         db  0x0e ; '.'
000000000000fe5e         db  0x08 ; '.'
000000000000fe5f         db  0x00 ; '.'
000000000000fe60         dd         0x00000010                                  ; Length of the record
000000000000fe64         dd         0x00000bd4                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fe68         db         0x38, 0x89, 2 dup (0xff)                    ; begin 0x87a0
000000000000fe6c         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x87aa)
000000000000fe70         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fe71         align      4
000000000000fe74         dd         0x00000028                                  ; Length of the record
000000000000fe78         dd         0x00000be8                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fe7c         db         0x34, 0x89, 2 dup (0xff)                    ; begin 0x87b0
000000000000fe80         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x8843)
000000000000fe84         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fe85         db  0x48 ; 'H'
000000000000fe86         db  0x0e ; '.'
000000000000fe87         db  0x10 ; '.'
000000000000fe88         db  0x8c ; '.'
000000000000fe89         db  0x02 ; '.'
000000000000fe8a         db  0x48 ; 'H'
000000000000fe8b         db  0x0e ; '.'
000000000000fe8c         db  0x18 ; '.'
000000000000fe8d         db  0x86 ; '.'
000000000000fe8e         db  0x03 ; '.'
000000000000fe8f         db  0x41 ; 'A'
000000000000fe90         db  0x0e ; '.'
000000000000fe91         db  0x20 ; ' '
000000000000fe92         db  0x83 ; '.'
000000000000fe93         db  0x04 ; '.'
000000000000fe94         db  0x02 ; '.'
000000000000fe95         db  0x74 ; 't'
000000000000fe96         db  0x0e ; '.'
000000000000fe97         db  0x18 ; '.'
000000000000fe98         db  0x4b ; 'K'
000000000000fe99         db  0x0e ; '.'
000000000000fe9a         db  0x10 ; '.'
000000000000fe9b         db  0x42 ; 'B'
000000000000fe9c         db  0x0e ; '.'
000000000000fe9d         db  0x08 ; '.'
000000000000fe9e         db  0x00 ; '.'
000000000000fe9f         db  0x00 ; '.'
000000000000fea0         dd         0x00000010                                  ; Length of the record
000000000000fea4         dd         0x00000c14                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fea8         db         0xa8, 0x89, 2 dup (0xff)                    ; begin 0x8850
000000000000feac         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x8863)
000000000000feb0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000feb1         align      4
000000000000feb4         dd         0x00000010                                  ; Length of the record
000000000000feb8         dd         0x00000c28                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000febc         db         0xb4, 0x89, 2 dup (0xff)                    ; begin 0x8870
000000000000fec0         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x887c)
000000000000fec4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fec5         align      8
000000000000fec8         dd         0x00000010                                  ; Length of the record
000000000000fecc         dd         0x00000c3c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fed0         db         0xb0, 0x89, 2 dup (0xff)                    ; begin 0x8880
000000000000fed4         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x8898)
000000000000fed8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fed9         align      4
000000000000fedc         dd         0x00000010                                  ; Length of the record
000000000000fee0         dd         0x00000c50                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fee4         db         0xbc, 0x89, 2 dup (0xff)                    ; begin 0x88a0
000000000000fee8         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x88b4)
000000000000feec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000feed         align      16
000000000000fef0         dd         0x00000018                                  ; Length of the record
000000000000fef4         dd         0x00000c64                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fef8         db         0xc8, 0x89, 2 dup (0xff)                    ; begin 0x88c0
000000000000fefc         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x894e)
000000000000ff00         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ff01         db  0x44 ; 'D'
000000000000ff02         db  0x0e ; '.'
000000000000ff03         db  0x50 ; 'P'
000000000000ff04         db  0x02 ; '.'
000000000000ff05         db  0x7f ; '.'
000000000000ff06         db  0x0a ; '.'
000000000000ff07         db  0x0e ; '.'
000000000000ff08         db  0x08 ; '.'
000000000000ff09         db  0x41 ; 'A'
000000000000ff0a         db  0x0b ; '.'
000000000000ff0b         db  0x00 ; '.'
000000000000ff0c         dd         0x00000018                                  ; Length of the record
000000000000ff10         dd         0x00000c80                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000ff14         db         0x3c, 0x8a, 2 dup (0xff)                    ; begin 0x8950
000000000000ff18         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x89da)
000000000000ff1c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ff1d         db  0x44 ; 'D'
000000000000ff1e         db  0x0e ; '.'
000000000000ff1f         db  0x50 ; 'P'
000000000000ff20         db  0x02 ; '.'
000000000000ff21         db  0x7b ; '{'
000000000000ff22         db  0x0a ; '.'
000000000000ff23         db  0x0e ; '.'
000000000000ff24         db  0x08 ; '.'
000000000000ff25         db  0x41 ; 'A'
000000000000ff26         db  0x0b ; '.'
000000000000ff27         db  0x00 ; '.'
000000000000ff28         dd         0x00000010                                  ; Length of the record
000000000000ff2c         dd         0x00000c9c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000ff30         db         0xb0, 0x8a, 2 dup (0xff)                    ; begin 0x89e0
000000000000ff34         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x89ec)
000000000000ff38         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ff39         align      4
000000000000ff3c         dd         0x00000010                                  ; Length of the record
000000000000ff40         dd         0x00000cb0                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000ff44         db         0xac, 0x8a, 2 dup (0xff)                    ; begin 0x89f0
000000000000ff48         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x89ff)
000000000000ff4c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ff4d         align      16
000000000000ff50         dd         0x00000018                                  ; Length of the record
000000000000ff54         dd         0x00000cc4                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000ff58         db         0xa8, 0x8a, 2 dup (0xff)                    ; begin 0x8a00
000000000000ff5c         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x8a98)
000000000000ff60         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ff61         db  0x44 ; 'D'
000000000000ff62         db  0x0e ; '.'
000000000000ff63         db  0x50 ; 'P'
000000000000ff64         db  0x02 ; '.'
000000000000ff65         db  0x8e ; '.'
000000000000ff66         db  0x0a ; '.'
000000000000ff67         db  0x0e ; '.'
000000000000ff68         db  0x08 ; '.'
000000000000ff69         db  0x41 ; 'A'
000000000000ff6a         db  0x0b ; '.'
000000000000ff6b         db  0x00 ; '.'
000000000000ff6c         dd         0x00000010                                  ; Length of the record
000000000000ff70         dd         0x00000ce0                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000ff74         db         0x2c, 0x8b, 2 dup (0xff)                    ; begin 0x8aa0
000000000000ff78         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x8ab0)
000000000000ff7c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ff7d         align      128
000000000000ff80         dd         0x00000010                                  ; Length of the record
000000000000ff84         dd         0x00000cf4                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000ff88         db         0x28, 0x8b, 2 dup (0xff)                    ; begin 0x8ab0
000000000000ff8c         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x8ac1)
000000000000ff90         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ff91         align      4
000000000000ff94         dd         0x00000010                                  ; Length of the record
000000000000ff98         dd         0x00000d08                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000ff9c         db         0x34, 0x8b, 2 dup (0xff)                    ; begin 0x8ad0
000000000000ffa0         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x8ada)
000000000000ffa4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ffa5         align      8
000000000000ffa8         dd         0x00000018                                  ; Length of the record
000000000000ffac         dd         0x00000d1c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000ffb0         db         0x30, 0x8b, 2 dup (0xff)                    ; begin 0x8ae0
000000000000ffb4         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x8b6e)
000000000000ffb8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ffb9         db  0x44 ; 'D'
000000000000ffba         db  0x0e ; '.'
000000000000ffbb         db  0x50 ; 'P'
000000000000ffbc         db  0x02 ; '.'
000000000000ffbd         db  0x7f ; '.'
000000000000ffbe         db  0x0a ; '.'
000000000000ffbf         db  0x0e ; '.'
000000000000ffc0         db  0x08 ; '.'
000000000000ffc1         db  0x41 ; 'A'
000000000000ffc2         db  0x0b ; '.'
000000000000ffc3         db  0x00 ; '.'
000000000000ffc4         dd         0x00000018                                  ; Length of the record
000000000000ffc8         dd         0x00000d38                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000ffcc         db         0xa4, 0x8b, 2 dup (0xff)                    ; begin 0x8b70
000000000000ffd0         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x8c01)
000000000000ffd4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ffd5         db  0x44 ; 'D'
000000000000ffd6         db  0x0e ; '.'
000000000000ffd7         db  0x50 ; 'P'
000000000000ffd8         db  0x02 ; '.'
000000000000ffd9         db  0x82 ; '.'
000000000000ffda         db  0x0a ; '.'
000000000000ffdb         db  0x0e ; '.'
000000000000ffdc         db  0x08 ; '.'
000000000000ffdd         db  0x41 ; 'A'
000000000000ffde         db  0x0b ; '.'
000000000000ffdf         db  0x00 ; '.'
000000000000ffe0         dd         0x00000010                                  ; Length of the record
000000000000ffe4         dd         0x00000d54                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000ffe8         db         0x28, 0x8c, 2 dup (0xff)                    ; begin 0x8c10
000000000000ffec         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x8c1c)
000000000000fff0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fff1         align      4
000000000000fff4         dd         0x00000010                                  ; Length of the record
000000000000fff8         dd         0x00000d68                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000000fffc         db         0x24, 0x8c, 2 dup (0xff)                    ; begin 0x8c20
0000000000010000         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x8c37), DATA XREF=set_fd_flags+107, iwrite.constprop.7+89
0000000000010004         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010005         align      8
0000000000010008         dd         0x00000010                                  ; Length of the record
000000000001000c         dd         0x00000d7c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010010         db         0x30, 0x8c, 2 dup (0xff)                    ; begin 0x8c40
0000000000010014         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x8c53)
0000000000010018         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010019         align      4
000000000001001c         dd         0x00000010                                  ; Length of the record
0000000000010020         dd         0x00000d90                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010024         db         0x3c, 0x8c, 2 dup (0xff)                    ; begin 0x8c60
0000000000010028         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x8c6c)
000000000001002c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001002d         align      16
0000000000010030         dd         0x00000010                                  ; Length of the record
0000000000010034         dd         0x00000da4                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010038         db         0x38, 0x8c, 2 dup (0xff)                    ; begin 0x8c70
000000000001003c         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x8c84)
0000000000010040         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010041         align      4
0000000000010044         dd         0x00000010                                  ; Length of the record
0000000000010048         dd         0x00000db8                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000001004c         db         0x44, 0x8c, 2 dup (0xff)                    ; begin 0x8c90
0000000000010050         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x8ca3)
0000000000010054         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010055         align      8
0000000000010058         dd         0x00000014                                  ; Length of the record
000000000001005c         dd         0x00000dcc                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010060         db         0x50, 0x8c, 2 dup (0xff)                    ; begin 0x8cb0
0000000000010064         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x8cc8)
0000000000010068         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010069         align      16
0000000000010070         dd         0x0000004c                                  ; Length of the record
0000000000010074         dd         0x00000de4                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010078         db         0x58, 0x8c, 2 dup (0xff)                    ; begin 0x8cd0
000000000001007c         db         0xb5, 3 dup (0x00)                          ; length 0xb5 (end at 0x8d85)
0000000000010080         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010081         db  0x42 ; 'B'
0000000000010082         db  0x0e ; '.'
0000000000010083         db  0x10 ; '.'
0000000000010084         db  0x8e ; '.'
0000000000010085         db  0x02 ; '.'
0000000000010086         db  0x42 ; 'B'
0000000000010087         db  0x0e ; '.'
0000000000010088         db  0x18 ; '.'
0000000000010089         db  0x8d ; '.'
000000000001008a         db  0x03 ; '.'
000000000001008b         db  0x45 ; 'E'
000000000001008c         db  0x0e ; '.'
000000000001008d         db  0x20 ; ' '
000000000001008e         db  0x8c ; '.'
000000000001008f         db  0x04 ; '.'
0000000000010090         db  0x41 ; 'A'
0000000000010091         db  0x0e ; '.'
0000000000010092         db  0x28 ; '('
0000000000010093         db  0x86 ; '.'
0000000000010094         db  0x05 ; '.'
0000000000010095         db  0x44 ; 'D'
0000000000010096         db  0x0e ; '.'
0000000000010097         db  0x30 ; '0'
0000000000010098         db  0x83 ; '.'
0000000000010099         db  0x06 ; '.'
000000000001009a         db  0x7f ; '.'
000000000001009b         db  0x0a ; '.'
000000000001009c         db  0x0e ; '.'
000000000001009d         db  0x28 ; '('
000000000001009e         db  0x41 ; 'A'
000000000001009f         db  0x0e ; '.'
00000000000100a0         db  0x20 ; ' '
00000000000100a1         db  0x42 ; 'B'
00000000000100a2         db  0x0e ; '.'
00000000000100a3         db  0x18 ; '.'
00000000000100a4         db  0x42 ; 'B'
00000000000100a5         db  0x0e ; '.'
00000000000100a6         db  0x10 ; '.'
00000000000100a7         db  0x42 ; 'B'
00000000000100a8         db  0x0e ; '.'
00000000000100a9         db  0x08 ; '.'
00000000000100aa         db  0x4c ; 'L'
00000000000100ab         db  0x0b ; '.'
00000000000100ac         db  0x5b ; '['
00000000000100ad         db  0x0a ; '.'
00000000000100ae         db  0x0e ; '.'
00000000000100af         db  0x28 ; '('
00000000000100b0         db  0x41 ; 'A'
00000000000100b1         db  0x0e ; '.'
00000000000100b2         db  0x20 ; ' '
00000000000100b3         db  0x42 ; 'B'
00000000000100b4         db  0x0e ; '.'
00000000000100b5         db  0x18 ; '.'
00000000000100b6         db  0x42 ; 'B'
00000000000100b7         db  0x0e ; '.'
00000000000100b8         db  0x10 ; '.'
00000000000100b9         db  0x42 ; 'B'
00000000000100ba         db  0x0e ; '.'
00000000000100bb         db  0x08 ; '.'
00000000000100bc         db  0x45 ; 'E'
00000000000100bd         db  0x0b ; '.'
00000000000100be         db  0x00 ; '.'
00000000000100bf         db  0x00 ; '.'
00000000000100c0         dd         0x00000014                                  ; Length of the record
00000000000100c4         dd         0x00000e34                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
00000000000100c8         db         0xc8, 0x8c, 2 dup (0xff)                    ; begin 0x8d90
00000000000100cc         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x8d9f)
00000000000100d0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000100d1         align      8
00000000000100d8         dd         0x00000110                                  ; Length of the record
00000000000100dc         dd         0x00000e4c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
00000000000100e0         db         0xc0, 0x8c, 2 dup (0xff)                    ; begin 0x8da0
00000000000100e4         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x91b7)
00000000000100e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000100e9         db  0x42 ; 'B'
00000000000100ea         db  0x0e ; '.'
00000000000100eb         db  0x10 ; '.'
00000000000100ec         db  0x8f ; '.'
00000000000100ed         db  0x02 ; '.'
00000000000100ee         db  0x42 ; 'B'
00000000000100ef         db  0x0e ; '.'
00000000000100f0         db  0x18 ; '.'
00000000000100f1         db  0x8e ; '.'
00000000000100f2         db  0x03 ; '.'
00000000000100f3         db  0x42 ; 'B'
00000000000100f4         db  0x0e ; '.'
00000000000100f5         db  0x20 ; ' '
00000000000100f6         db  0x8d ; '.'
00000000000100f7         db  0x04 ; '.'
00000000000100f8         db  0x42 ; 'B'
00000000000100f9         db  0x0e ; '.'
00000000000100fa         db  0x28 ; '('
00000000000100fb         db  0x8c ; '.'
00000000000100fc         db  0x05 ; '.'
00000000000100fd         db  0x44 ; 'D'
00000000000100fe         db  0x0e ; '.'
00000000000100ff         db  0x30 ; '0'
0000000000010100         db  0x86 ; '.'
0000000000010101         db  0x06 ; '.'
0000000000010102         db  0x41 ; 'A'
0000000000010103         db  0x0e ; '.'
0000000000010104         db  0x38 ; '8'
0000000000010105         db  0x83 ; '.'
0000000000010106         db  0x07 ; '.'
0000000000010107         db  0x4a ; 'J'
0000000000010108         db  0x0e ; '.'
0000000000010109         db  0x60 ; '`'
000000000001010a         db  0x02 ; '.'
000000000001010b         db  0xdd ; '.'
000000000001010c         db  0x0e ; '.'
000000000001010d         db  0x68 ; 'h'
000000000001010e         db  0x57 ; 'W'
000000000001010f         db  0x0e ; '.'
0000000000010110         db  0x70 ; 'p'
0000000000010111         db  0x42 ; 'B'
0000000000010112         db  0x0e ; '.'
0000000000010113         db  0x78 ; 'x'
0000000000010114         db  0x42 ; 'B'
0000000000010115         db  0x0e ; '.'
0000000000010116         db  0x80 ; '.'
0000000000010117         db  0x01 ; '.'
0000000000010118         db  0x42 ; 'B'
0000000000010119         db  0x0e ; '.'
000000000001011a         db  0x88 ; '.'
000000000001011b         db  0x01 ; '.'
000000000001011c         db  0x42 ; 'B'
000000000001011d         db  0x0e ; '.'
000000000001011e         db  0x90 ; '.'
000000000001011f         db  0x01 ; '.'
0000000000010120         db  0x53 ; 'S'
0000000000010121         db  0x0e ; '.'
0000000000010122         db  0x60 ; '`'
0000000000010123         db  0x44 ; 'D'
0000000000010124         db  0x0a ; '.'
0000000000010125         db  0x0e ; '.'
0000000000010126         db  0x38 ; '8'
0000000000010127         db  0x41 ; 'A'
0000000000010128         db  0x0e ; '.'
0000000000010129         db  0x30 ; '0'
000000000001012a         db  0x41 ; 'A'
000000000001012b         db  0x0e ; '.'
000000000001012c         db  0x28 ; '('
000000000001012d         db  0x42 ; 'B'
000000000001012e         db  0x0e ; '.'
000000000001012f         db  0x20 ; ' '
0000000000010130         db  0x42 ; 'B'
0000000000010131         db  0x0e ; '.'
0000000000010132         db  0x18 ; '.'
0000000000010133         db  0x42 ; 'B'
0000000000010134         db  0x0e ; '.'
0000000000010135         db  0x10 ; '.'
0000000000010136         db  0x42 ; 'B'
0000000000010137         db  0x0e ; '.'
0000000000010138         db  0x08 ; '.'
0000000000010139         db  0x44 ; 'D'
000000000001013a         db  0x0b ; '.'
000000000001013b         db  0x02 ; '.'
000000000001013c         db  0x78 ; 'x'
000000000001013d         db  0x0a ; '.'
000000000001013e         db  0x0e ; '.'
000000000001013f         db  0x68 ; 'h'
0000000000010140         db  0x48 ; 'H'
0000000000010141         db  0x0b ; '.'
0000000000010142         db  0x5a ; 'Z'
0000000000010143         db  0x0a ; '.'
0000000000010144         db  0x0e ; '.'
0000000000010145         db  0x38 ; '8'
0000000000010146         db  0x47 ; 'G'
0000000000010147         db  0x0e ; '.'
0000000000010148         db  0x30 ; '0'
0000000000010149         db  0x41 ; 'A'
000000000001014a         db  0x0e ; '.'
000000000001014b         db  0x28 ; '('
000000000001014c         db  0x42 ; 'B'
000000000001014d         db  0x0e ; '.'
000000000001014e         db  0x20 ; ' '
000000000001014f         db  0x42 ; 'B'
0000000000010150         db  0x0e ; '.'
0000000000010151         db  0x18 ; '.'
0000000000010152         db  0x42 ; 'B'
0000000000010153         db  0x0e ; '.'
0000000000010154         db  0x10 ; '.'
0000000000010155         db  0x42 ; 'B'
0000000000010156         db  0x0e ; '.'
0000000000010157         db  0x08 ; '.'
0000000000010158         db  0x56 ; 'V'
0000000000010159         db  0x0b ; '.'
000000000001015a         db  0x5e ; '^'
000000000001015b         db  0x0a ; '.'
000000000001015c         db  0x0e ; '.'
000000000001015d         db  0x38 ; '8'
000000000001015e         db  0x52 ; 'R'
000000000001015f         db  0x0e ; '.'
0000000000010160         db  0x30 ; '0'
0000000000010161         db  0x41 ; 'A'
0000000000010162         db  0x0e ; '.'
0000000000010163         db  0x28 ; '('
0000000000010164         db  0x42 ; 'B'
0000000000010165         db  0x0e ; '.'
0000000000010166         db  0x20 ; ' '
0000000000010167         db  0x42 ; 'B'
0000000000010168         db  0x0e ; '.'
0000000000010169         db  0x18 ; '.'
000000000001016a         db  0x42 ; 'B'
000000000001016b         db  0x0e ; '.'
000000000001016c         db  0x10 ; '.'
000000000001016d         db  0x42 ; 'B'
000000000001016e         db  0x0e ; '.'
000000000001016f         db  0x08 ; '.'
0000000000010170         db  0x4f ; 'O'
0000000000010171         db  0x0b ; '.'
0000000000010172         db  0x62 ; 'b'
0000000000010173         db  0x0a ; '.'
0000000000010174         db  0x0e ; '.'
0000000000010175         db  0x38 ; '8'
0000000000010176         db  0x50 ; 'P'
0000000000010177         db  0x0e ; '.'
0000000000010178         db  0x30 ; '0'
0000000000010179         db  0x41 ; 'A'
000000000001017a         db  0x0e ; '.'
000000000001017b         db  0x28 ; '('
000000000001017c         db  0x42 ; 'B'
000000000001017d         db  0x0e ; '.'
000000000001017e         db  0x20 ; ' '
000000000001017f         db  0x42 ; 'B'
0000000000010180         db  0x0e ; '.'
0000000000010181         db  0x18 ; '.'
0000000000010182         db  0x42 ; 'B'
0000000000010183         db  0x0e ; '.'
0000000000010184         db  0x10 ; '.'
0000000000010185         db  0x42 ; 'B'
0000000000010186         db  0x0e ; '.'
0000000000010187         db  0x08 ; '.'
0000000000010188         db  0x55 ; 'U'
0000000000010189         db  0x0b ; '.'
000000000001018a         db  0x66 ; 'f'
000000000001018b         db  0x0e ; '.'
000000000001018c         db  0x68 ; 'h'
000000000001018d         db  0x42 ; 'B'
000000000001018e         db  0x0e ; '.'
000000000001018f         db  0x70 ; 'p'
0000000000010190         db  0x5c ; '\'
0000000000010191         db  0x0e ; '.'
0000000000010192         db  0x68 ; 'h'
0000000000010193         db  0x41 ; 'A'
0000000000010194         db  0x0e ; '.'
0000000000010195         db  0x60 ; '`'
0000000000010196         db  0x44 ; 'D'
0000000000010197         db  0x0a ; '.'
0000000000010198         db  0x0e ; '.'
0000000000010199         db  0x38 ; '8'
000000000001019a         db  0x41 ; 'A'
000000000001019b         db  0x0e ; '.'
000000000001019c         db  0x30 ; '0'
000000000001019d         db  0x41 ; 'A'
000000000001019e         db  0x0e ; '.'
000000000001019f         db  0x28 ; '('
00000000000101a0         db  0x42 ; 'B'
00000000000101a1         db  0x0e ; '.'
00000000000101a2         db  0x20 ; ' '
00000000000101a3         db  0x42 ; 'B'
00000000000101a4         db  0x0e ; '.'
00000000000101a5         db  0x18 ; '.'
00000000000101a6         db  0x42 ; 'B'
00000000000101a7         db  0x0e ; '.'
00000000000101a8         db  0x10 ; '.'
00000000000101a9         db  0x42 ; 'B'
00000000000101aa         db  0x0e ; '.'
00000000000101ab         db  0x08 ; '.'
00000000000101ac         db  0x45 ; 'E'
00000000000101ad         db  0x0b ; '.'
00000000000101ae         db  0x68 ; 'h'
00000000000101af         db  0x0a ; '.'
00000000000101b0         db  0x0e ; '.'
00000000000101b1         db  0x68 ; 'h'
00000000000101b2         db  0x48 ; 'H'
00000000000101b3         db  0x0b ; '.'
00000000000101b4         db  0x72 ; 'r'
00000000000101b5         db  0x0e ; '.'
00000000000101b6         db  0x68 ; 'h'
00000000000101b7         db  0x45 ; 'E'
00000000000101b8         db  0x0e ; '.'
00000000000101b9         db  0x70 ; 'p'
00000000000101ba         db  0x42 ; 'B'
00000000000101bb         db  0x0e ; '.'
00000000000101bc         db  0x78 ; 'x'
00000000000101bd         db  0x42 ; 'B'
00000000000101be         db  0x0e ; '.'
00000000000101bf         db  0x80 ; '.'
00000000000101c0         db  0x01 ; '.'
00000000000101c1         db  0x5e ; '^'
00000000000101c2         db  0x0e ; '.'
00000000000101c3         db  0x60 ; '`'
00000000000101c4         db  0x44 ; 'D'
00000000000101c5         db  0x0a ; '.'
00000000000101c6         db  0x0e ; '.'
00000000000101c7         db  0x38 ; '8'
00000000000101c8         db  0x41 ; 'A'
00000000000101c9         db  0x0e ; '.'
00000000000101ca         db  0x30 ; '0'
00000000000101cb         db  0x41 ; 'A'
00000000000101cc         db  0x0e ; '.'
00000000000101cd         db  0x28 ; '('
00000000000101ce         db  0x42 ; 'B'
00000000000101cf         db  0x0e ; '.'
00000000000101d0         db  0x20 ; ' '
00000000000101d1         db  0x42 ; 'B'
00000000000101d2         db  0x0e ; '.'
00000000000101d3         db  0x18 ; '.'
00000000000101d4         db  0x42 ; 'B'
00000000000101d5         db  0x0e ; '.'
00000000000101d6         db  0x10 ; '.'
00000000000101d7         db  0x42 ; 'B'
00000000000101d8         db  0x0e ; '.'
00000000000101d9         db  0x08 ; '.'
00000000000101da         db  0x41 ; 'A'
00000000000101db         db  0x0b ; '.'
00000000000101dc         db  0x79 ; 'y'
00000000000101dd         db  0x0a ; '.'
00000000000101de         db  0x0e ; '.'
00000000000101df         db  0x68 ; 'h'
00000000000101e0         db  0x42 ; 'B'
00000000000101e1         db  0x0e ; '.'
00000000000101e2         db  0x70 ; 'p'
00000000000101e3         db  0x42 ; 'B'
00000000000101e4         db  0x0e ; '.'
00000000000101e5         db  0x78 ; 'x'
00000000000101e6         db  0x42 ; 'B'
00000000000101e7         db  0x0e ; '.'
00000000000101e8         db  0x80 ; '.'
00000000000101e9         db  0x01 ; '.'
00000000000101ea         db  0x51 ; 'Q'
00000000000101eb         db  0x0b ; '.'
00000000000101ec         dd         0x00000010                                  ; Length of the record
00000000000101f0         dd         0x00000f60                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
00000000000101f4         db         0xcc, 0x8f, 2 dup (0xff)                    ; begin 0x91c0
00000000000101f8         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x91e0)
00000000000101fc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000101fd         align      512
0000000000010200         dd         0x00000018                                  ; Length of the record
0000000000010204         dd         0x00000f74                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010208         db         0xd8, 0x8f, 2 dup (0xff)                    ; begin 0x91e0
000000000001020c         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x9258)
0000000000010210         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010211         db  0x44 ; 'D'
0000000000010212         db  0x0e ; '.'
0000000000010213         db  0x70 ; 'p'
0000000000010214         db  0x02 ; '.'
0000000000010215         db  0x60 ; '`'
0000000000010216         db  0x0a ; '.'
0000000000010217         db  0x0e ; '.'
0000000000010218         db  0x08 ; '.'
0000000000010219         db  0x41 ; 'A'
000000000001021a         db  0x0b ; '.'
000000000001021b         db  0x00 ; '.'
000000000001021c         dd         0x00000028                                  ; Length of the record
0000000000010220         dd         0x00000f90                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010224         db         0x3c, 0x90, 2 dup (0xff)                    ; begin 0x9260
0000000000010228         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x9335)
000000000001022c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001022d         db  0x41 ; 'A'
000000000001022e         db  0x0e ; '.'
000000000001022f         db  0x10 ; '.'
0000000000010230         db  0x86 ; '.'
0000000000010231         db  0x02 ; '.'
0000000000010232         db  0x41 ; 'A'
0000000000010233         db  0x0e ; '.'
0000000000010234         db  0x18 ; '.'
0000000000010235         db  0x83 ; '.'
0000000000010236         db  0x03 ; '.'
0000000000010237         db  0x50 ; 'P'
0000000000010238         db  0x0e ; '.'
0000000000010239         db  0xd0 ; '.'
000000000001023a         db  0x01 ; '.'
000000000001023b         db  0x02 ; '.'
000000000001023c         db  0xab ; '.'
000000000001023d         db  0x0a ; '.'
000000000001023e         db  0x0e ; '.'
000000000001023f         db  0x18 ; '.'
0000000000010240         db  0x41 ; 'A'
0000000000010241         db  0x0e ; '.'
0000000000010242         db  0x10 ; '.'
0000000000010243         db  0x41 ; 'A'
0000000000010244         db  0x0e ; '.'
0000000000010245         db  0x08 ; '.'
0000000000010246         db  0x41 ; 'A'
0000000000010247         db  0x0b ; '.'
0000000000010248         dd         0x0000001c                                  ; Length of the record
000000000001024c         dd         0x00000fbc                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010250         db         0xf0, 0x90, 2 dup (0xff)                    ; begin 0x9340
0000000000010254         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x93c0)
0000000000010258         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010259         db  0x41 ; 'A'
000000000001025a         db  0x0e ; '.'
000000000001025b         db  0x10 ; '.'
000000000001025c         db  0x83 ; '.'
000000000001025d         db  0x02 ; '.'
000000000001025e         db  0x02 ; '.'
000000000001025f         db  0x7a ; 'z'
0000000000010260         db  0x0e ; '.'
0000000000010261         db  0x08 ; '.'
0000000000010262         db  0x00 ; '.'
0000000000010263         db  0x00 ; '.'
0000000000010264         db  0x00 ; '.'
0000000000010265         db  0x00 ; '.'
0000000000010266         db  0x00 ; '.'
0000000000010267         db  0x00 ; '.'
0000000000010268         dd         0x00000018                                  ; Length of the record
000000000001026c         dd         0x00000fdc                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010270         db         0x50, 0x91, 2 dup (0xff)                    ; begin 0x93c0
0000000000010274         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x93da)
0000000000010278         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010279         db  0x41 ; 'A'
000000000001027a         db  0x0e ; '.'
000000000001027b         db  0x10 ; '.'
000000000001027c         db  0x83 ; '.'
000000000001027d         db  0x02 ; '.'
000000000001027e         db  0x53 ; 'S'
000000000001027f         db  0x0a ; '.'
0000000000010280         db  0x0e ; '.'
0000000000010281         db  0x08 ; '.'
0000000000010282         db  0x41 ; 'A'
0000000000010283         db  0x0b ; '.'
0000000000010284         dd         0x00000010                                  ; Length of the record
0000000000010288         dd         0x00000ff8                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000001028c         db         0x54, 0x91, 2 dup (0xff)                    ; begin 0x93e0
0000000000010290         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x9404)
0000000000010294         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010295         db  0x5f ; '_'
0000000000010296         db  0x0e ; '.'
0000000000010297         db  0x10 ; '.'
0000000000010298         dd         0x00000010                                  ; Length of the record
000000000001029c         dd         0x0000100c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
00000000000102a0         db         0x70, 0x91, 2 dup (0xff)                    ; begin 0x9410
00000000000102a4         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x9412)
00000000000102a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000102a9         align      4
00000000000102ac         dd         0x00000020                                  ; Length of the record
00000000000102b0         dd         0x00001020                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
00000000000102b4         db         0x6c, 0x91, 2 dup (0xff)                    ; begin 0x9420
00000000000102b8         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x9456)
00000000000102bc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000102bd         db  0x44 ; 'D'
00000000000102be         db  0x0e ; '.'
00000000000102bf         db  0x10 ; '.'
00000000000102c0         db  0x83 ; '.'
00000000000102c1         db  0x02 ; '.'
00000000000102c2         db  0x5d ; ']'
00000000000102c3         db  0x0a ; '.'
00000000000102c4         db  0x0e ; '.'
00000000000102c5         db  0x08 ; '.'
00000000000102c6         db  0x47 ; 'G'
00000000000102c7         db  0x0b ; '.'
00000000000102c8         db  0x48 ; 'H'
00000000000102c9         db  0x0a ; '.'
00000000000102ca         db  0x0e ; '.'
00000000000102cb         db  0x08 ; '.'
00000000000102cc         db  0x41 ; 'A'
00000000000102cd         db  0x0b ; '.'
00000000000102ce         db  0x00 ; '.'
00000000000102cf         db  0x00 ; '.'
00000000000102d0         dd         0x00000010                                  ; Length of the record
00000000000102d4         dd         0x00001044                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
00000000000102d8         db         0x88, 0x91, 2 dup (0xff)                    ; begin 0x9460
00000000000102dc         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x9484)
00000000000102e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000102e1         db  0x5f ; '_'
00000000000102e2         db  0x0e ; '.'
00000000000102e3         db  0x10 ; '.'
00000000000102e4         dd         0x00000014                                  ; Length of the record
00000000000102e8         dd         0x00001058                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
00000000000102ec         db         0xa4, 0x91, 2 dup (0xff)                    ; begin 0x9490
00000000000102f0         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x9512)
00000000000102f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000102f5         db  0x02 ; '.'
00000000000102f6         db  0x5f ; '_'
00000000000102f7         db  0x0e ; '.'
00000000000102f8         db  0x10 ; '.'
00000000000102f9         db  0x49 ; 'I'
00000000000102fa         db  0x0e ; '.'
00000000000102fb         db  0x08 ; '.'
00000000000102fc         dd         0x00000014                                  ; Length of the record
0000000000010300         dd         0x00001070                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010304         db         0x1c, 0x92, 2 dup (0xff)                    ; begin 0x9520
0000000000010308         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x956a)
000000000001030c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001030d         db  0x02 ; '.'
000000000001030e         db  0x45 ; 'E'
000000000001030f         db  0x0e ; '.'
0000000000010310         db  0x10 ; '.'
0000000000010311         db  0x00 ; '.'
0000000000010312         db  0x00 ; '.'
0000000000010313         db  0x00 ; '.'
0000000000010314         dd         0x00000018                                  ; Length of the record
0000000000010318         dd         0x00001088                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000001031c         db         0x54, 0x92, 2 dup (0xff)                    ; begin 0x9570
0000000000010320         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x9587)
0000000000010324         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010325         db  0x41 ; 'A'
0000000000010326         db  0x0e ; '.'
0000000000010327         db  0x10 ; '.'
0000000000010328         db  0x83 ; '.'
0000000000010329         db  0x02 ; '.'
000000000001032a         db  0x51 ; 'Q'
000000000001032b         db  0x0e ; '.'
000000000001032c         db  0x08 ; '.'
000000000001032d         db  0x00 ; '.'
000000000001032e         db  0x00 ; '.'
000000000001032f         db  0x00 ; '.'
0000000000010330         dd         0x00000018                                  ; Length of the record
0000000000010334         dd         0x000010a4                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010338         db         0x58, 0x92, 2 dup (0xff)                    ; begin 0x9590
000000000001033c         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x95be)
0000000000010340         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010341         db  0x47 ; 'G'
0000000000010342         db  0x0e ; '.'
0000000000010343         db  0x10 ; '.'
0000000000010344         db  0x61 ; 'a'
0000000000010345         db  0x0a ; '.'
0000000000010346         db  0x0e ; '.'
0000000000010347         db  0x08 ; '.'
0000000000010348         db  0x41 ; 'A'
0000000000010349         db  0x0b ; '.'
000000000001034a         db  0x00 ; '.'
000000000001034b         db  0x00 ; '.'
000000000001034c         dd         0x00000024                                  ; Length of the record
0000000000010350         dd         0x000010c0                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010354         db         0x6c, 0x92, 2 dup (0xff)                    ; begin 0x95c0
0000000000010358         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x95e8)
000000000001035c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001035d         db  0x41 ; 'A'
000000000001035e         db  0x0e ; '.'
000000000001035f         db  0x10 ; '.'
0000000000010360         db  0x86 ; '.'
0000000000010361         db  0x02 ; '.'
0000000000010362         db  0x41 ; 'A'
0000000000010363         db  0x0e ; '.'
0000000000010364         db  0x18 ; '.'
0000000000010365         db  0x83 ; '.'
0000000000010366         db  0x03 ; '.'
0000000000010367         db  0x4d ; 'M'
0000000000010368         db  0x0e ; '.'
0000000000010369         db  0x20 ; ' '
000000000001036a         db  0x49 ; 'I'
000000000001036b         db  0x0e ; '.'
000000000001036c         db  0x18 ; '.'
000000000001036d         db  0x47 ; 'G'
000000000001036e         db  0x0e ; '.'
000000000001036f         db  0x10 ; '.'
0000000000010370         db  0x41 ; 'A'
0000000000010371         db  0x0e ; '.'
0000000000010372         db  0x08 ; '.'
0000000000010373         db  0x00 ; '.'
0000000000010374         dd         0x00000018                                  ; Length of the record
0000000000010378         dd         0x000010e8                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000001037c         db         0x74, 0x92, 2 dup (0xff)                    ; begin 0x95f0
0000000000010380         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x9603)
0000000000010384         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010385         db  0x41 ; 'A'
0000000000010386         db  0x0e ; '.'
0000000000010387         db  0x10 ; '.'
0000000000010388         db  0x83 ; '.'
0000000000010389         db  0x02 ; '.'
000000000001038a         db  0x50 ; 'P'
000000000001038b         db  0x0e ; '.'
000000000001038c         db  0x08 ; '.'
000000000001038d         db  0x00 ; '.'
000000000001038e         db  0x00 ; '.'
000000000001038f         db  0x00 ; '.'
0000000000010390         dd         0x00000014                                  ; Length of the record
0000000000010394         dd         0x00001104                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010398         db         0x78, 0x92, 2 dup (0xff)                    ; begin 0x9610
000000000001039c         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x9645)
00000000000103a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000103a1         db  0x4b ; 'K'
00000000000103a2         db  0x0e ; '.'
00000000000103a3         db  0x10 ; '.'
00000000000103a4         db  0x00 ; '.'
00000000000103a5         db  0x00 ; '.'
00000000000103a6         db  0x00 ; '.'
00000000000103a7         db  0x00 ; '.'
00000000000103a8         dd         0x0000004c                                  ; Length of the record
00000000000103ac         dd         0x0000111c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
00000000000103b0         db         0xa0, 0x92, 2 dup (0xff)                    ; begin 0x9650
00000000000103b4         db         0x1c, 0x04, 2 dup (0x00)                    ; length 0x41c (end at 0x9a6c)
00000000000103b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000103b9         db  0x42 ; 'B'
00000000000103ba         db  0x0e ; '.'
00000000000103bb         db  0x10 ; '.'
00000000000103bc         db  0x8f ; '.'
00000000000103bd         db  0x02 ; '.'
00000000000103be         db  0x42 ; 'B'
00000000000103bf         db  0x0e ; '.'
00000000000103c0         db  0x18 ; '.'
00000000000103c1         db  0x8e ; '.'
00000000000103c2         db  0x03 ; '.'
00000000000103c3         db  0x42 ; 'B'
00000000000103c4         db  0x0e ; '.'
00000000000103c5         db  0x20 ; ' '
00000000000103c6         db  0x8d ; '.'
00000000000103c7         db  0x04 ; '.'
00000000000103c8         db  0x42 ; 'B'
00000000000103c9         db  0x0e ; '.'
00000000000103ca         db  0x28 ; '('
00000000000103cb         db  0x8c ; '.'
00000000000103cc         db  0x05 ; '.'
00000000000103cd         db  0x41 ; 'A'
00000000000103ce         db  0x0e ; '.'
00000000000103cf         db  0x30 ; '0'
00000000000103d0         db  0x86 ; '.'
00000000000103d1         db  0x06 ; '.'
00000000000103d2         db  0x41 ; 'A'
00000000000103d3         db  0x0e ; '.'
00000000000103d4         db  0x38 ; '8'
00000000000103d5         db  0x83 ; '.'
00000000000103d6         db  0x07 ; '.'
00000000000103d7         db  0x44 ; 'D'
00000000000103d8         db  0x0e ; '.'
00000000000103d9         db  0x60 ; '`'
00000000000103da         db  0x02 ; '.'
00000000000103db         db  0xe9 ; '.'
00000000000103dc         db  0x0a ; '.'
00000000000103dd         db  0x0e ; '.'
00000000000103de         db  0x38 ; '8'
00000000000103df         db  0x41 ; 'A'
00000000000103e0         db  0x0e ; '.'
00000000000103e1         db  0x30 ; '0'
00000000000103e2         db  0x41 ; 'A'
00000000000103e3         db  0x0e ; '.'
00000000000103e4         db  0x28 ; '('
00000000000103e5         db  0x42 ; 'B'
00000000000103e6         db  0x0e ; '.'
00000000000103e7         db  0x20 ; ' '
00000000000103e8         db  0x42 ; 'B'
00000000000103e9         db  0x0e ; '.'
00000000000103ea         db  0x18 ; '.'
00000000000103eb         db  0x42 ; 'B'
00000000000103ec         db  0x0e ; '.'
00000000000103ed         db  0x10 ; '.'
00000000000103ee         db  0x42 ; 'B'
00000000000103ef         db  0x0e ; '.'
00000000000103f0         db  0x08 ; '.'
00000000000103f1         db  0x47 ; 'G'
00000000000103f2         db  0x0b ; '.'
00000000000103f3         db  0x00 ; '.'
00000000000103f4         db  0x00 ; '.'
00000000000103f5         db  0x00 ; '.'
00000000000103f6         db  0x00 ; '.'
00000000000103f7         db  0x00 ; '.'
00000000000103f8         dd         0x00000048                                  ; Length of the record
00000000000103fc         dd         0x0000116c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010400         db         0x70, 0x96, 2 dup (0xff)                    ; begin 0x9a70
0000000000010404         db         0x43, 0x01, 2 dup (0x00)                    ; length 0x143 (end at 0x9bb3)
0000000000010408         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010409         db  0x42 ; 'B'
000000000001040a         db  0x0e ; '.'
000000000001040b         db  0x10 ; '.'
000000000001040c         db  0x8f ; '.'
000000000001040d         db  0x02 ; '.'
000000000001040e         db  0x42 ; 'B'
000000000001040f         db  0x0e ; '.'
0000000000010410         db  0x18 ; '.'
0000000000010411         db  0x8e ; '.'
0000000000010412         db  0x03 ; '.'
0000000000010413         db  0x42 ; 'B'
0000000000010414         db  0x0e ; '.'
0000000000010415         db  0x20 ; ' '
0000000000010416         db  0x8d ; '.'
0000000000010417         db  0x04 ; '.'
0000000000010418         db  0x42 ; 'B'
0000000000010419         db  0x0e ; '.'
000000000001041a         db  0x28 ; '('
000000000001041b         db  0x8c ; '.'
000000000001041c         db  0x05 ; '.'
000000000001041d         db  0x41 ; 'A'
000000000001041e         db  0x0e ; '.'
000000000001041f         db  0x30 ; '0'
0000000000010420         db  0x86 ; '.'
0000000000010421         db  0x06 ; '.'
0000000000010422         db  0x41 ; 'A'
0000000000010423         db  0x0e ; '.'
0000000000010424         db  0x38 ; '8'
0000000000010425         db  0x83 ; '.'
0000000000010426         db  0x07 ; '.'
0000000000010427         db  0x44 ; 'D'
0000000000010428         db  0x0e ; '.'
0000000000010429         db  0x60 ; '`'
000000000001042a         db  0x02 ; '.'
000000000001042b         db  0xfc ; '.'
000000000001042c         db  0x0a ; '.'
000000000001042d         db  0x0e ; '.'
000000000001042e         db  0x38 ; '8'
000000000001042f         db  0x41 ; 'A'
0000000000010430         db  0x0e ; '.'
0000000000010431         db  0x30 ; '0'
0000000000010432         db  0x41 ; 'A'
0000000000010433         db  0x0e ; '.'
0000000000010434         db  0x28 ; '('
0000000000010435         db  0x42 ; 'B'
0000000000010436         db  0x0e ; '.'
0000000000010437         db  0x20 ; ' '
0000000000010438         db  0x42 ; 'B'
0000000000010439         db  0x0e ; '.'
000000000001043a         db  0x18 ; '.'
000000000001043b         db  0x42 ; 'B'
000000000001043c         db  0x0e ; '.'
000000000001043d         db  0x10 ; '.'
000000000001043e         db  0x42 ; 'B'
000000000001043f         db  0x0e ; '.'
0000000000010440         db  0x08 ; '.'
0000000000010441         db  0x41 ; 'A'
0000000000010442         db  0x0b ; '.'
0000000000010443         db  0x00 ; '.'
0000000000010444         dd         0x00000018                                  ; Length of the record
0000000000010448         dd         0x000011b8                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000001044c         db         0x74, 0x97, 2 dup (0xff)                    ; begin 0x9bc0
0000000000010450         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x9c64)
0000000000010454         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010455         db  0x44 ; 'D'
0000000000010456         db  0x0e ; '.'
0000000000010457         db  0x20 ; ' '
0000000000010458         db  0x02 ; '.'
0000000000010459         db  0x7e ; '~'
000000000001045a         db  0x0a ; '.'
000000000001045b         db  0x0e ; '.'
000000000001045c         db  0x08 ; '.'
000000000001045d         db  0x46 ; 'F'
000000000001045e         db  0x0b ; '.'
000000000001045f         db  0x00 ; '.'
0000000000010460         dd         0x00000034                                  ; Length of the record
0000000000010464         dd         0x000011d4                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010468         db         0x08, 0x98, 2 dup (0xff)                    ; begin 0x9c70
000000000001046c         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0x9ceb)
0000000000010470         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010471         db  0x42 ; 'B'
0000000000010472         db  0x0e ; '.'
0000000000010473         db  0x10 ; '.'
0000000000010474         db  0x8c ; '.'
0000000000010475         db  0x02 ; '.'
0000000000010476         db  0x41 ; 'A'
0000000000010477         db  0x0e ; '.'
0000000000010478         db  0x18 ; '.'
0000000000010479         db  0x86 ; '.'
000000000001047a         db  0x03 ; '.'
000000000001047b         db  0x41 ; 'A'
000000000001047c         db  0x0e ; '.'
000000000001047d         db  0x20 ; ' '
000000000001047e         db  0x83 ; '.'
000000000001047f         db  0x04 ; '.'
0000000000010480         db  0x7d ; '}'
0000000000010481         db  0x0a ; '.'
0000000000010482         db  0x0e ; '.'
0000000000010483         db  0x18 ; '.'
0000000000010484         db  0x41 ; 'A'
0000000000010485         db  0x0e ; '.'
0000000000010486         db  0x10 ; '.'
0000000000010487         db  0x42 ; 'B'
0000000000010488         db  0x0e ; '.'
0000000000010489         db  0x08 ; '.'
000000000001048a         db  0x44 ; 'D'
000000000001048b         db  0x0b ; '.'
000000000001048c         db  0x60 ; '`'
000000000001048d         db  0x0a ; '.'
000000000001048e         db  0x0e ; '.'
000000000001048f         db  0x18 ; '.'
0000000000010490         db  0x41 ; 'A'
0000000000010491         db  0x0e ; '.'
0000000000010492         db  0x10 ; '.'
0000000000010493         db  0x42 ; 'B'
0000000000010494         db  0x0e ; '.'
0000000000010495         db  0x08 ; '.'
0000000000010496         db  0x45 ; 'E'
0000000000010497         db  0x0b ; '.'
0000000000010498         dd         0x00000034                                  ; Length of the record
000000000001049c         dd         0x0000120c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
00000000000104a0         db         0x50, 0x98, 2 dup (0xff)                    ; begin 0x9cf0
00000000000104a4         db         0x7e, 0x02, 2 dup (0x00)                    ; length 0x27e (end at 0x9f6e)
00000000000104a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000104a9         db  0x42 ; 'B'
00000000000104aa         db  0x0e ; '.'
00000000000104ab         db  0x10 ; '.'
00000000000104ac         db  0x8c ; '.'
00000000000104ad         db  0x02 ; '.'
00000000000104ae         db  0x41 ; 'A'
00000000000104af         db  0x0e ; '.'
00000000000104b0         db  0x18 ; '.'
00000000000104b1         db  0x86 ; '.'
00000000000104b2         db  0x03 ; '.'
00000000000104b3         db  0x43 ; 'C'
00000000000104b4         db  0x0e ; '.'
00000000000104b5         db  0x20 ; ' '
00000000000104b6         db  0x83 ; '.'
00000000000104b7         db  0x04 ; '.'
00000000000104b8         db  0x44 ; 'D'
00000000000104b9         db  0x0e ; '.'
00000000000104ba         db  0x70 ; 'p'
00000000000104bb         db  0x02 ; '.'
00000000000104bc         db  0xf0 ; '.'
00000000000104bd         db  0x0a ; '.'
00000000000104be         db  0x0e ; '.'
00000000000104bf         db  0x20 ; ' '
00000000000104c0         db  0x41 ; 'A'
00000000000104c1         db  0x0e ; '.'
00000000000104c2         db  0x18 ; '.'
00000000000104c3         db  0x41 ; 'A'
00000000000104c4         db  0x0e ; '.'
00000000000104c5         db  0x10 ; '.'
00000000000104c6         db  0x42 ; 'B'
00000000000104c7         db  0x0e ; '.'
00000000000104c8         db  0x08 ; '.'
00000000000104c9         db  0x42 ; 'B'
00000000000104ca         db  0x0b ; '.'
00000000000104cb         db  0x00 ; '.'
00000000000104cc         db  0x00 ; '.'
00000000000104cd         db  0x00 ; '.'
00000000000104ce         db  0x00 ; '.'
00000000000104cf         db  0x00 ; '.'
00000000000104d0         dd         0x0000001c                                  ; Length of the record
00000000000104d4         dd         0x00001244                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
00000000000104d8         db         0x98, 0x9a, 2 dup (0xff)                    ; begin 0x9f70
00000000000104dc         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0x9fb0)
00000000000104e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000104e1         db  0x44 ; 'D'
00000000000104e2         db  0x0e ; '.'
00000000000104e3         db  0x10 ; '.'
00000000000104e4         db  0x83 ; '.'
00000000000104e5         db  0x02 ; '.'
00000000000104e6         db  0x5a ; 'Z'
00000000000104e7         db  0x0a ; '.'
00000000000104e8         db  0x0e ; '.'
00000000000104e9         db  0x08 ; '.'
00000000000104ea         db  0x4a ; 'J'
00000000000104eb         db  0x0b ; '.'
00000000000104ec         db  0x53 ; 'S'
00000000000104ed         db  0x0e ; '.'
00000000000104ee         db  0x08 ; '.'
00000000000104ef         db  0x00 ; '.'
00000000000104f0         dd         0x0000002c                                  ; Length of the record
00000000000104f4         dd         0x00001264                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
00000000000104f8         db         0xb8, 0x9a, 2 dup (0xff)                    ; begin 0x9fb0
00000000000104fc         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0xa007)
0000000000010500         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010501         db  0x63 ; 'c'
0000000000010502         db  0x0e ; '.'
0000000000010503         db  0x10 ; '.'
0000000000010504         db  0x8c ; '.'
0000000000010505         db  0x02 ; '.'
0000000000010506         db  0x41 ; 'A'
0000000000010507         db  0x0e ; '.'
0000000000010508         db  0x18 ; '.'
0000000000010509         db  0x86 ; '.'
000000000001050a         db  0x03 ; '.'
000000000001050b         db  0x44 ; 'D'
000000000001050c         db  0x0e ; '.'
000000000001050d         db  0x20 ; ' '
000000000001050e         db  0x83 ; '.'
000000000001050f         db  0x04 ; '.'
0000000000010510         db  0x6b ; 'k'
0000000000010511         db  0x0e ; '.'
0000000000010512         db  0x18 ; '.'
0000000000010513         db  0x41 ; 'A'
0000000000010514         db  0x0e ; '.'
0000000000010515         db  0x10 ; '.'
0000000000010516         db  0x42 ; 'B'
0000000000010517         db  0x0e ; '.'
0000000000010518         db  0x08 ; '.'
0000000000010519         db  0x00 ; '.'
000000000001051a         db  0x00 ; '.'
000000000001051b         db  0x00 ; '.'
000000000001051c         db  0x00 ; '.'
000000000001051d         db  0x00 ; '.'
000000000001051e         db  0x00 ; '.'
000000000001051f         db  0x00 ; '.'
0000000000010520         dd         0x0000003c                                  ; Length of the record
0000000000010524         dd         0x00001294                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010528         db         0xe8, 0x9a, 2 dup (0xff)                    ; begin 0xa010
000000000001052c         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0xa093)
0000000000010530         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010531         db  0x42 ; 'B'
0000000000010532         db  0x0e ; '.'
0000000000010533         db  0x10 ; '.'
0000000000010534         db  0x8d ; '.'
0000000000010535         db  0x02 ; '.'
0000000000010536         db  0x42 ; 'B'
0000000000010537         db  0x0e ; '.'
0000000000010538         db  0x18 ; '.'
0000000000010539         db  0x8c ; '.'
000000000001053a         db  0x03 ; '.'
000000000001053b         db  0x44 ; 'D'
000000000001053c         db  0x0e ; '.'
000000000001053d         db  0x20 ; ' '
000000000001053e         db  0x86 ; '.'
000000000001053f         db  0x04 ; '.'
0000000000010540         db  0x41 ; 'A'
0000000000010541         db  0x0e ; '.'
0000000000010542         db  0x28 ; '('
0000000000010543         db  0x83 ; '.'
0000000000010544         db  0x05 ; '.'
0000000000010545         db  0x4a ; 'J'
0000000000010546         db  0x0e ; '.'
0000000000010547         db  0x40 ; '@'
0000000000010548         db  0x02 ; '.'
0000000000010549         db  0x64 ; 'd'
000000000001054a         db  0x0a ; '.'
000000000001054b         db  0x0e ; '.'
000000000001054c         db  0x28 ; '('
000000000001054d         db  0x41 ; 'A'
000000000001054e         db  0x0e ; '.'
000000000001054f         db  0x20 ; ' '
0000000000010550         db  0x41 ; 'A'
0000000000010551         db  0x0e ; '.'
0000000000010552         db  0x18 ; '.'
0000000000010553         db  0x42 ; 'B'
0000000000010554         db  0x0e ; '.'
0000000000010555         db  0x10 ; '.'
0000000000010556         db  0x42 ; 'B'
0000000000010557         db  0x0e ; '.'
0000000000010558         db  0x08 ; '.'
0000000000010559         db  0x41 ; 'A'
000000000001055a         db  0x0b ; '.'
000000000001055b         db  0x00 ; '.'
000000000001055c         db  0x00 ; '.'
000000000001055d         db  0x00 ; '.'
000000000001055e         db  0x00 ; '.'
000000000001055f         db  0x00 ; '.'
0000000000010560         dd         0x00000024                                  ; Length of the record
0000000000010564         dd         0x000012d4                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010568         db         0x38, 0x9b, 2 dup (0xff)                    ; begin 0xa0a0
000000000001056c         db         0x7e, 3 dup (0x00)                          ; length 0x7e (end at 0xa11e)
0000000000010570         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010571         db  0x41 ; 'A'
0000000000010572         db  0x0e ; '.'
0000000000010573         db  0x10 ; '.'
0000000000010574         db  0x83 ; '.'
0000000000010575         db  0x02 ; '.'
0000000000010576         db  0x4c ; 'L'
0000000000010577         db  0x0e ; '.'
0000000000010578         db  0x20 ; ' '
0000000000010579         db  0x02 ; '.'
000000000001057a         db  0x49 ; 'I'
000000000001057b         db  0x0a ; '.'
000000000001057c         db  0x0e ; '.'
000000000001057d         db  0x10 ; '.'
000000000001057e         db  0x41 ; 'A'
000000000001057f         db  0x0e ; '.'
0000000000010580         db  0x08 ; '.'
0000000000010581         db  0x41 ; 'A'
0000000000010582         db  0x0b ; '.'
0000000000010583         db  0x00 ; '.'
0000000000010584         db  0x00 ; '.'
0000000000010585         db  0x00 ; '.'
0000000000010586         db  0x00 ; '.'
0000000000010587         db  0x00 ; '.'
0000000000010588         dd         0x00000010                                  ; Length of the record
000000000001058c         dd         0x000012fc                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010590         db         0x90, 0x9b, 2 dup (0xff)                    ; begin 0xa120
0000000000010594         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0xa12a)
0000000000010598         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010599         align      4
000000000001059c         dd         0x00000048                                  ; Length of the record
00000000000105a0         dd         0x00001310                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
00000000000105a4         db         0x8c, 0x9b, 2 dup (0xff)                    ; begin 0xa130
00000000000105a8         db         0x16, 0x01, 2 dup (0x00)                    ; length 0x116 (end at 0xa246)
00000000000105ac         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000105ad         db  0x42 ; 'B'
00000000000105ae         db  0x0e ; '.'
00000000000105af         db  0x10 ; '.'
00000000000105b0         db  0x8f ; '.'
00000000000105b1         db  0x02 ; '.'
00000000000105b2         db  0x42 ; 'B'
00000000000105b3         db  0x0e ; '.'
00000000000105b4         db  0x18 ; '.'
00000000000105b5         db  0x8e ; '.'
00000000000105b6         db  0x03 ; '.'
00000000000105b7         db  0x45 ; 'E'
00000000000105b8         db  0x0e ; '.'
00000000000105b9         db  0x20 ; ' '
00000000000105ba         db  0x8d ; '.'
00000000000105bb         db  0x04 ; '.'
00000000000105bc         db  0x42 ; 'B'
00000000000105bd         db  0x0e ; '.'
00000000000105be         db  0x28 ; '('
00000000000105bf         db  0x8c ; '.'
00000000000105c0         db  0x05 ; '.'
00000000000105c1         db  0x44 ; 'D'
00000000000105c2         db  0x0e ; '.'
00000000000105c3         db  0x30 ; '0'
00000000000105c4         db  0x86 ; '.'
00000000000105c5         db  0x06 ; '.'
00000000000105c6         db  0x41 ; 'A'
00000000000105c7         db  0x0e ; '.'
00000000000105c8         db  0x38 ; '8'
00000000000105c9         db  0x83 ; '.'
00000000000105ca         db  0x07 ; '.'
00000000000105cb         db  0x47 ; 'G'
00000000000105cc         db  0x0e ; '.'
00000000000105cd         db  0x60 ; '`'
00000000000105ce         db  0x02 ; '.'
00000000000105cf         db  0xde ; '.'
00000000000105d0         db  0x0a ; '.'
00000000000105d1         db  0x0e ; '.'
00000000000105d2         db  0x38 ; '8'
00000000000105d3         db  0x41 ; 'A'
00000000000105d4         db  0x0e ; '.'
00000000000105d5         db  0x30 ; '0'
00000000000105d6         db  0x41 ; 'A'
00000000000105d7         db  0x0e ; '.'
00000000000105d8         db  0x28 ; '('
00000000000105d9         db  0x42 ; 'B'
00000000000105da         db  0x0e ; '.'
00000000000105db         db  0x20 ; ' '
00000000000105dc         db  0x42 ; 'B'
00000000000105dd         db  0x0e ; '.'
00000000000105de         db  0x18 ; '.'
00000000000105df         db  0x42 ; 'B'
00000000000105e0         db  0x0e ; '.'
00000000000105e1         db  0x10 ; '.'
00000000000105e2         db  0x42 ; 'B'
00000000000105e3         db  0x0e ; '.'
00000000000105e4         db  0x08 ; '.'
00000000000105e5         db  0x41 ; 'A'
00000000000105e6         db  0x0b ; '.'
00000000000105e7         db  0x00 ; '.'
00000000000105e8         dd         0x00000028                                  ; Length of the record
00000000000105ec         dd         0x0000135c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
00000000000105f0         db         0x60, 0x9c, 2 dup (0xff)                    ; begin 0xa250
00000000000105f4         db         0x73, 3 dup (0x00)                          ; length 0x73 (end at 0xa2c3)
00000000000105f8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000105f9         db  0x46 ; 'F'
00000000000105fa         db  0x0e ; '.'
00000000000105fb         db  0x10 ; '.'
00000000000105fc         db  0x8c ; '.'
00000000000105fd         db  0x02 ; '.'
00000000000105fe         db  0x46 ; 'F'
00000000000105ff         db  0x0e ; '.'
0000000000010600         db  0x18 ; '.'
0000000000010601         db  0x86 ; '.'
0000000000010602         db  0x03 ; '.'
0000000000010603         db  0x44 ; 'D'
0000000000010604         db  0x0e ; '.'
0000000000010605         db  0x20 ; ' '
0000000000010606         db  0x83 ; '.'
0000000000010607         db  0x04 ; '.'
0000000000010608         db  0x7f ; '.'
0000000000010609         db  0x0a ; '.'
000000000001060a         db  0x0e ; '.'
000000000001060b         db  0x18 ; '.'
000000000001060c         db  0x41 ; 'A'
000000000001060d         db  0x0e ; '.'
000000000001060e         db  0x10 ; '.'
000000000001060f         db  0x42 ; 'B'
0000000000010610         db  0x0e ; '.'
0000000000010611         db  0x08 ; '.'
0000000000010612         db  0x4e ; 'N'
0000000000010613         db  0x0b ; '.'
0000000000010614         dd         0x0000005c                                  ; Length of the record
0000000000010618         dd         0x00001388                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000001061c         db         0xb4, 0x9c, 2 dup (0xff)                    ; begin 0xa2d0
0000000000010620         db         0x20, 0x01, 2 dup (0x00)                    ; length 0x120 (end at 0xa3f0)
0000000000010624         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010625         db  0x42 ; 'B'
0000000000010626         db  0x0e ; '.'
0000000000010627         db  0x10 ; '.'
0000000000010628         db  0x8f ; '.'
0000000000010629         db  0x02 ; '.'
000000000001062a         db  0x42 ; 'B'
000000000001062b         db  0x0e ; '.'
000000000001062c         db  0x18 ; '.'
000000000001062d         db  0x8e ; '.'
000000000001062e         db  0x03 ; '.'
000000000001062f         db  0x45 ; 'E'
0000000000010630         db  0x0e ; '.'
0000000000010631         db  0x20 ; ' '
0000000000010632         db  0x8d ; '.'
0000000000010633         db  0x04 ; '.'
0000000000010634         db  0x42 ; 'B'
0000000000010635         db  0x0e ; '.'
0000000000010636         db  0x28 ; '('
0000000000010637         db  0x8c ; '.'
0000000000010638         db  0x05 ; '.'
0000000000010639         db  0x43 ; 'C'
000000000001063a         db  0x0e ; '.'
000000000001063b         db  0x30 ; '0'
000000000001063c         db  0x86 ; '.'
000000000001063d         db  0x06 ; '.'
000000000001063e         db  0x41 ; 'A'
000000000001063f         db  0x0e ; '.'
0000000000010640         db  0x38 ; '8'
0000000000010641         db  0x83 ; '.'
0000000000010642         db  0x07 ; '.'
0000000000010643         db  0x56 ; 'V'
0000000000010644         db  0x0e ; '.'
0000000000010645         db  0x40 ; '@'
0000000000010646         db  0x02 ; '.'
0000000000010647         db  0xd3 ; '.'
0000000000010648         db  0x0a ; '.'
0000000000010649         db  0x0e ; '.'
000000000001064a         db  0x38 ; '8'
000000000001064b         db  0x41 ; 'A'
000000000001064c         db  0x0e ; '.'
000000000001064d         db  0x30 ; '0'
000000000001064e         db  0x41 ; 'A'
000000000001064f         db  0x0e ; '.'
0000000000010650         db  0x28 ; '('
0000000000010651         db  0x42 ; 'B'
0000000000010652         db  0x0e ; '.'
0000000000010653         db  0x20 ; ' '
0000000000010654         db  0x42 ; 'B'
0000000000010655         db  0x0e ; '.'
0000000000010656         db  0x18 ; '.'
0000000000010657         db  0x42 ; 'B'
0000000000010658         db  0x0e ; '.'
0000000000010659         db  0x10 ; '.'
000000000001065a         db  0x42 ; 'B'
000000000001065b         db  0x0e ; '.'
000000000001065c         db  0x08 ; '.'
000000000001065d         db  0x46 ; 'F'
000000000001065e         db  0x0b ; '.'
000000000001065f         db  0x44 ; 'D'
0000000000010660         db  0x0e ; '.'
0000000000010661         db  0x38 ; '8'
0000000000010662         db  0x46 ; 'F'
0000000000010663         db  0x0e ; '.'
0000000000010664         db  0x30 ; '0'
0000000000010665         db  0x41 ; 'A'
0000000000010666         db  0x0e ; '.'
0000000000010667         db  0x28 ; '('
0000000000010668         db  0x42 ; 'B'
0000000000010669         db  0x0e ; '.'
000000000001066a         db  0x20 ; ' '
000000000001066b         db  0x42 ; 'B'
000000000001066c         db  0x0e ; '.'
000000000001066d         db  0x18 ; '.'
000000000001066e         db  0x42 ; 'B'
000000000001066f         db  0x0e ; '.'
0000000000010670         db  0x10 ; '.'
0000000000010671         db  0x42 ; 'B'
0000000000010672         db  0x0e ; '.'
0000000000010673         db  0x08 ; '.'
0000000000010674         dd         0x00000048                                  ; Length of the record
0000000000010678         dd         0x000013e8                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
000000000001067c         db         0x74, 0x9d, 2 dup (0xff)                    ; begin 0xa3f0
0000000000010680         db         0x6d, 3 dup (0x00)                          ; length 0x6d (end at 0xa45d)
0000000000010684         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010685         db  0x42 ; 'B'
0000000000010686         db  0x0e ; '.'
0000000000010687         db  0x10 ; '.'
0000000000010688         db  0x8f ; '.'
0000000000010689         db  0x02 ; '.'
000000000001068a         db  0x42 ; 'B'
000000000001068b         db  0x0e ; '.'
000000000001068c         db  0x18 ; '.'
000000000001068d         db  0x8e ; '.'
000000000001068e         db  0x03 ; '.'
000000000001068f         db  0x45 ; 'E'
0000000000010690         db  0x0e ; '.'
0000000000010691         db  0x20 ; ' '
0000000000010692         db  0x8d ; '.'
0000000000010693         db  0x04 ; '.'
0000000000010694         db  0x42 ; 'B'
0000000000010695         db  0x0e ; '.'
0000000000010696         db  0x28 ; '('
0000000000010697         db  0x8c ; '.'
0000000000010698         db  0x05 ; '.'
0000000000010699         db  0x44 ; 'D'
000000000001069a         db  0x0e ; '.'
000000000001069b         db  0x30 ; '0'
000000000001069c         db  0x86 ; '.'
000000000001069d         db  0x06 ; '.'
000000000001069e         db  0x41 ; 'A'
000000000001069f         db  0x0e ; '.'
00000000000106a0         db  0x38 ; '8'
00000000000106a1         db  0x83 ; '.'
00000000000106a2         db  0x07 ; '.'
00000000000106a3         db  0x50 ; 'P'
00000000000106a4         db  0x0e ; '.'
00000000000106a5         db  0x40 ; '@'
00000000000106a6         db  0x5a ; 'Z'
00000000000106a7         db  0x0a ; '.'
00000000000106a8         db  0x0e ; '.'
00000000000106a9         db  0x38 ; '8'
00000000000106aa         db  0x41 ; 'A'
00000000000106ab         db  0x0e ; '.'
00000000000106ac         db  0x30 ; '0'
00000000000106ad         db  0x41 ; 'A'
00000000000106ae         db  0x0e ; '.'
00000000000106af         db  0x28 ; '('
00000000000106b0         db  0x42 ; 'B'
00000000000106b1         db  0x0e ; '.'
00000000000106b2         db  0x20 ; ' '
00000000000106b3         db  0x42 ; 'B'
00000000000106b4         db  0x0e ; '.'
00000000000106b5         db  0x18 ; '.'
00000000000106b6         db  0x42 ; 'B'
00000000000106b7         db  0x0e ; '.'
00000000000106b8         db  0x10 ; '.'
00000000000106b9         db  0x42 ; 'B'
00000000000106ba         db  0x0e ; '.'
00000000000106bb         db  0x08 ; '.'
00000000000106bc         db  0x41 ; 'A'
00000000000106bd         db  0x0b ; '.'
00000000000106be         db  0x00 ; '.'
00000000000106bf         db  0x00 ; '.'
00000000000106c0         dd         0x0000003c                                  ; Length of the record
00000000000106c4         dd         0x00001434                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
00000000000106c8         db         0x98, 0x9d, 2 dup (0xff)                    ; begin 0xa460
00000000000106cc         db         0x4d, 3 dup (0x00)                          ; length 0x4d (end at 0xa4ad)
00000000000106d0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000106d1         db  0x42 ; 'B'
00000000000106d2         db  0x0e ; '.'
00000000000106d3         db  0x10 ; '.'
00000000000106d4         db  0x8e ; '.'
00000000000106d5         db  0x02 ; '.'
00000000000106d6         db  0x42 ; 'B'
00000000000106d7         db  0x0e ; '.'
00000000000106d8         db  0x18 ; '.'
00000000000106d9         db  0x8d ; '.'
00000000000106da         db  0x03 ; '.'
00000000000106db         db  0x42 ; 'B'
00000000000106dc         db  0x0e ; '.'
00000000000106dd         db  0x20 ; ' '
00000000000106de         db  0x8c ; '.'
00000000000106df         db  0x04 ; '.'
00000000000106e0         db  0x41 ; 'A'
00000000000106e1         db  0x0e ; '.'
00000000000106e2         db  0x28 ; '('
00000000000106e3         db  0x86 ; '.'
00000000000106e4         db  0x05 ; '.'
00000000000106e5         db  0x41 ; 'A'
00000000000106e6         db  0x0e ; '.'
00000000000106e7         db  0x30 ; '0'
00000000000106e8         db  0x83 ; '.'
00000000000106e9         db  0x06 ; '.'
00000000000106ea         db  0x7a ; 'z'
00000000000106eb         db  0x0e ; '.'
00000000000106ec         db  0x28 ; '('
00000000000106ed         db  0x44 ; 'D'
00000000000106ee         db  0x0e ; '.'
00000000000106ef         db  0x20 ; ' '
00000000000106f0         db  0x42 ; 'B'
00000000000106f1         db  0x0e ; '.'
00000000000106f2         db  0x18 ; '.'
00000000000106f3         db  0x42 ; 'B'
00000000000106f4         db  0x0e ; '.'
00000000000106f5         db  0x10 ; '.'
00000000000106f6         db  0x42 ; 'B'
00000000000106f7         db  0x0e ; '.'
00000000000106f8         db  0x08 ; '.'
00000000000106f9         db  0x00 ; '.'
00000000000106fa         db  0x00 ; '.'
00000000000106fb         db  0x00 ; '.'
00000000000106fc         db  0x00 ; '.'
00000000000106fd         db  0x00 ; '.'
00000000000106fe         db  0x00 ; '.'
00000000000106ff         db  0x00 ; '.'
0000000000010700         dd         0x0000001c                                  ; Length of the record
0000000000010704         dd         0x00001474                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010708         db         0xa8, 0x9d, 2 dup (0xff)                    ; begin 0xa4b0
000000000001070c         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0xa510)
0000000000010710         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010711         db  0x44 ; 'D'
0000000000010712         db  0x0e ; '.'
0000000000010713         db  0x10 ; '.'
0000000000010714         db  0x75 ; 'u'
0000000000010715         db  0x0a ; '.'
0000000000010716         db  0x0e ; '.'
0000000000010717         db  0x08 ; '.'
0000000000010718         db  0x47 ; 'G'
0000000000010719         db  0x0b ; '.'
000000000001071a         db  0x5f ; '_'
000000000001071b         db  0x0e ; '.'
000000000001071c         db  0x08 ; '.'
000000000001071d         db  0x00 ; '.'
000000000001071e         db  0x00 ; '.'
000000000001071f         db  0x00 ; '.'
0000000000010720         dd         0x0000001c                                  ; Length of the record
0000000000010724         dd         0x00001494                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010728         db         0xe8, 0x9d, 2 dup (0xff)                    ; begin 0xa510
000000000001072c         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0xa54c)
0000000000010730         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010731         db  0x44 ; 'D'
0000000000010732         db  0x0e ; '.'
0000000000010733         db  0x10 ; '.'
0000000000010734         db  0x61 ; 'a'
0000000000010735         db  0x0a ; '.'
0000000000010736         db  0x0e ; '.'
0000000000010737         db  0x08 ; '.'
0000000000010738         db  0x4b ; 'K'
0000000000010739         db  0x0b ; '.'
000000000001073a         db  0x4b ; 'K'
000000000001073b         db  0x0e ; '.'
000000000001073c         db  0x08 ; '.'
000000000001073d         db  0x00 ; '.'
000000000001073e         db  0x00 ; '.'
000000000001073f         db  0x00 ; '.'
0000000000010740         dd         0x0000002c                                  ; Length of the record
0000000000010744         dd         0x000014b4                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010748         db         0x08, 0x9e, 2 dup (0xff)                    ; begin 0xa550
000000000001074c         db         0x1f, 0x11, 2 dup (0x00)                    ; length 0x111f (end at 0xb66f)
0000000000010750         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010751         db  0x41 ; 'A'
0000000000010752         db  0x0e ; '.'
0000000000010753         db  0x10 ; '.'
0000000000010754         db  0x86 ; '.'
0000000000010755         db  0x02 ; '.'
0000000000010756         db  0x43 ; 'C'
0000000000010757         db  0x0d ; '.'
0000000000010758         db  0x06 ; '.'
0000000000010759         db  0x48 ; 'H'
000000000001075a         db  0x8f ; '.'
000000000001075b         db  0x03 ; '.'
000000000001075c         db  0x8e ; '.'
000000000001075d         db  0x04 ; '.'
000000000001075e         db  0x8d ; '.'
000000000001075f         db  0x05 ; '.'
0000000000010760         db  0x8c ; '.'
0000000000010761         db  0x06 ; '.'
0000000000010762         db  0x48 ; 'H'
0000000000010763         db  0x83 ; '.'
0000000000010764         db  0x07 ; '.'
0000000000010765         db  0x03 ; '.'
0000000000010766         db  0xef ; '.'
0000000000010767         db  0x01 ; '.'
0000000000010768         db  0x0a ; '.'
0000000000010769         db  0x0c ; '.'
000000000001076a         db  0x07 ; '.'
000000000001076b         db  0x08 ; '.'
000000000001076c         db  0x45 ; 'E'
000000000001076d         db  0x0b ; '.'
000000000001076e         db  0x00 ; '.'
000000000001076f         db  0x00 ; '.'
0000000000010770         dd         0x00000014                                  ; Length of the record
0000000000010774         dd         0x000014e4                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010778         db         0xf8, 0xae, 2 dup (0xff)                    ; begin 0xb670
000000000001077c         db         0xfe, 0x01, 2 dup (0x00)                    ; length 0x1fe (end at 0xb86e)
0000000000010780         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010781         align      8
0000000000010788         dd         0x0000004c                                  ; Length of the record
000000000001078c         dd         0x000014fc                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010790         db         0xe0, 0xb0, 2 dup (0xff)                    ; begin 0xb870
0000000000010794         db         0xec, 0x0c, 2 dup (0x00)                    ; length 0xcec (end at 0xc55c)
0000000000010798         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010799         db  0x42 ; 'B'
000000000001079a         db  0x0e ; '.'
000000000001079b         db  0x10 ; '.'
000000000001079c         db  0x8f ; '.'
000000000001079d         db  0x02 ; '.'
000000000001079e         db  0x42 ; 'B'
000000000001079f         db  0x0e ; '.'
00000000000107a0         db  0x18 ; '.'
00000000000107a1         db  0x8e ; '.'
00000000000107a2         db  0x03 ; '.'
00000000000107a3         db  0x46 ; 'F'
00000000000107a4         db  0x0e ; '.'
00000000000107a5         db  0x20 ; ' '
00000000000107a6         db  0x8d ; '.'
00000000000107a7         db  0x04 ; '.'
00000000000107a8         db  0x42 ; 'B'
00000000000107a9         db  0x0e ; '.'
00000000000107aa         db  0x28 ; '('
00000000000107ab         db  0x8c ; '.'
00000000000107ac         db  0x05 ; '.'
00000000000107ad         db  0x45 ; 'E'
00000000000107ae         db  0x0e ; '.'
00000000000107af         db  0x30 ; '0'
00000000000107b0         db  0x86 ; '.'
00000000000107b1         db  0x06 ; '.'
00000000000107b2         db  0x41 ; 'A'
00000000000107b3         db  0x0e ; '.'
00000000000107b4         db  0x38 ; '8'
00000000000107b5         db  0x83 ; '.'
00000000000107b6         db  0x07 ; '.'
00000000000107b7         db  0x52 ; 'R'
00000000000107b8         db  0x0e ; '.'
00000000000107b9         db  0x90 ; '.'
00000000000107ba         db  0x01 ; '.'
00000000000107bb         db  0x02 ; '.'
00000000000107bc         db  0x82 ; '.'
00000000000107bd         db  0x0a ; '.'
00000000000107be         db  0x0e ; '.'
00000000000107bf         db  0x38 ; '8'
00000000000107c0         db  0x41 ; 'A'
00000000000107c1         db  0x0e ; '.'
00000000000107c2         db  0x30 ; '0'
00000000000107c3         db  0x41 ; 'A'
00000000000107c4         db  0x0e ; '.'
00000000000107c5         db  0x28 ; '('
00000000000107c6         db  0x42 ; 'B'
00000000000107c7         db  0x0e ; '.'
00000000000107c8         db  0x20 ; ' '
00000000000107c9         db  0x42 ; 'B'
00000000000107ca         db  0x0e ; '.'
00000000000107cb         db  0x18 ; '.'
00000000000107cc         db  0x42 ; 'B'
00000000000107cd         db  0x0e ; '.'
00000000000107ce         db  0x10 ; '.'
00000000000107cf         db  0x42 ; 'B'
00000000000107d0         db  0x0e ; '.'
00000000000107d1         db  0x08 ; '.'
00000000000107d2         db  0x48 ; 'H'
00000000000107d3         db  0x0b ; '.'
00000000000107d4         db  0x00 ; '.'
00000000000107d5         db  0x00 ; '.'
00000000000107d6         db  0x00 ; '.'
00000000000107d7         db  0x00 ; '.'
00000000000107d8         dd         0x00000044                                  ; Length of the record
00000000000107dc         dd         0x0000154c                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
00000000000107e0         db         0x80, 0xbd, 2 dup (0xff)                    ; begin 0xc560
00000000000107e4         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0xc5c5)
00000000000107e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000107e9         db  0x42 ; 'B'
00000000000107ea         db  0x0e ; '.'
00000000000107eb         db  0x10 ; '.'
00000000000107ec         db  0x8f ; '.'
00000000000107ed         db  0x02 ; '.'
00000000000107ee         db  0x42 ; 'B'
00000000000107ef         db  0x0e ; '.'
00000000000107f0         db  0x18 ; '.'
00000000000107f1         db  0x8e ; '.'
00000000000107f2         db  0x03 ; '.'
00000000000107f3         db  0x45 ; 'E'
00000000000107f4         db  0x0e ; '.'
00000000000107f5         db  0x20 ; ' '
00000000000107f6         db  0x8d ; '.'
00000000000107f7         db  0x04 ; '.'
00000000000107f8         db  0x42 ; 'B'
00000000000107f9         db  0x0e ; '.'
00000000000107fa         db  0x28 ; '('
00000000000107fb         db  0x8c ; '.'
00000000000107fc         db  0x05 ; '.'
00000000000107fd         db  0x48 ; 'H'
00000000000107fe         db  0x0e ; '.'
00000000000107ff         db  0x30 ; '0'
0000000000010800         db  0x86 ; '.'
0000000000010801         db  0x06 ; '.'
0000000000010802         db  0x48 ; 'H'
0000000000010803         db  0x0e ; '.'
0000000000010804         db  0x38 ; '8'
0000000000010805         db  0x83 ; '.'
0000000000010806         db  0x07 ; '.'
0000000000010807         db  0x4d ; 'M'
0000000000010808         db  0x0e ; '.'
0000000000010809         db  0x40 ; '@'
000000000001080a         db  0x72 ; 'r'
000000000001080b         db  0x0e ; '.'
000000000001080c         db  0x38 ; '8'
000000000001080d         db  0x41 ; 'A'
000000000001080e         db  0x0e ; '.'
000000000001080f         db  0x30 ; '0'
0000000000010810         db  0x41 ; 'A'
0000000000010811         db  0x0e ; '.'
0000000000010812         db  0x28 ; '('
0000000000010813         db  0x42 ; 'B'
0000000000010814         db  0x0e ; '.'
0000000000010815         db  0x20 ; ' '
0000000000010816         db  0x42 ; 'B'
0000000000010817         db  0x0e ; '.'
0000000000010818         db  0x18 ; '.'
0000000000010819         db  0x42 ; 'B'
000000000001081a         db  0x0e ; '.'
000000000001081b         db  0x10 ; '.'
000000000001081c         db  0x42 ; 'B'
000000000001081d         db  0x0e ; '.'
000000000001081e         db  0x08 ; '.'
000000000001081f         db  0x00 ; '.'
0000000000010820         dd         0x00000014                                  ; Length of the record
0000000000010824         dd         0x00001594                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010828         db         0xa8, 0xbd, 2 dup (0xff)                    ; begin 0xc5d0
000000000001082c         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0xc5d2)
0000000000010830         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010831         align      8
0000000000010838         dd         0x00000010                                  ; Length of the record
000000000001083c         dd         0x000015ac                                  ; FDE: parent CIE at 0xf290 (FDE encoding = 0x1B)
0000000000010840         db         0xa0, 0xbd, 2 dup (0xff)                    ; begin 0xc5e0
0000000000010844         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0xc5ee)
0000000000010848         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010849         align      16


        ; Segment Segment 3
        ; Range: [0x210a90; 0x211560[ (2768 bytes)
        ; File offset : [68240; 69800[ (1560 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x210a90; 0x210a98[ (8 bytes)
        ; File offset : [68240; 68248[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
0000000000210a90         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x210a98; 0x210aa0[ (8 bytes)
        ; File offset : [68248; 68256[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
0000000000210a98         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x210aa0; 0x210b78[ (216 bytes)
        ; File offset : [68256; 68472[ (216 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     block_size_args:
0000000000210aa0         db  0xbe ; '.'                                         ; DATA XREF=human_options+67
0000000000210aa1         db  0xe1 ; '.'
0000000000210aa2         db  0x00 ; '.'
0000000000210aa3         db  0x00 ; '.'
0000000000210aa4         db  0x00 ; '.'
0000000000210aa5         db  0x00 ; '.'
0000000000210aa6         db  0x00 ; '.'
0000000000210aa7         db  0x00 ; '.'
0000000000210aa8         db  0xcd ; '.'
0000000000210aa9         db  0xe1 ; '.'
0000000000210aaa         db  0x00 ; '.'
0000000000210aab         db  0x00 ; '.'
0000000000210aac         db  0x00 ; '.'
0000000000210aad         db  0x00 ; '.'
0000000000210aae         db  0x00 ; '.'
0000000000210aaf         db  0x00 ; '.'
0000000000210ab0         db  0x00 ; '.'
0000000000210ab1         db  0x00 ; '.'
0000000000210ab2         db  0x00 ; '.'
0000000000210ab3         db  0x00 ; '.'
0000000000210ab4         db  0x00 ; '.'
0000000000210ab5         db  0x00 ; '.'
0000000000210ab6         db  0x00 ; '.'
0000000000210ab7         db  0x00 ; '.'
0000000000210ab8         db  0x00 ; '.'
0000000000210ab9         db  0x00 ; '.'
0000000000210aba         db  0x00 ; '.'
0000000000210abb         db  0x00 ; '.'
0000000000210abc         db  0x00 ; '.'
0000000000210abd         db  0x00 ; '.'
0000000000210abe         db  0x00 ; '.'
0000000000210abf         db  0x00 ; '.'
                     long_options:
0000000000210ac0         db  0x02 ; '.'                                         ; DATA XREF=parse_long_options+176, parse_gnu_standard_options_only+124
0000000000210ac1         db  0xe2 ; '.'
0000000000210ac2         db  0x00 ; '.'
0000000000210ac3         db  0x00 ; '.'
0000000000210ac4         db  0x00 ; '.'
0000000000210ac5         db  0x00 ; '.'
0000000000210ac6         db  0x00 ; '.'
0000000000210ac7         db  0x00 ; '.'
0000000000210ac8         db  0x00 ; '.'
0000000000210ac9         db  0x00 ; '.'
0000000000210aca         db  0x00 ; '.'
0000000000210acb         db  0x00 ; '.'
0000000000210acc         db  0x00 ; '.'
0000000000210acd         db  0x00 ; '.'
0000000000210ace         db  0x00 ; '.'
0000000000210acf         db  0x00 ; '.'
0000000000210ad0         db  0x00 ; '.'
0000000000210ad1         db  0x00 ; '.'
0000000000210ad2         db  0x00 ; '.'
0000000000210ad3         db  0x00 ; '.'
0000000000210ad4         db  0x00 ; '.'
0000000000210ad5         db  0x00 ; '.'
0000000000210ad6         db  0x00 ; '.'
0000000000210ad7         db  0x00 ; '.'
0000000000210ad8         db  0x68 ; 'h'
0000000000210ad9         db  0x00 ; '.'
0000000000210ada         db  0x00 ; '.'
0000000000210adb         db  0x00 ; '.'
0000000000210adc         db  0x00 ; '.'
0000000000210add         db  0x00 ; '.'
0000000000210ade         db  0x00 ; '.'
0000000000210adf         db  0x00 ; '.'
0000000000210ae0         db  0xae ; '.'
0000000000210ae1         db  0xc8 ; '.'
0000000000210ae2         db  0x00 ; '.'
0000000000210ae3         db  0x00 ; '.'
0000000000210ae4         db  0x00 ; '.'
0000000000210ae5         db  0x00 ; '.'
0000000000210ae6         db  0x00 ; '.'
0000000000210ae7         db  0x00 ; '.'
0000000000210ae8         db  0x00 ; '.'
0000000000210ae9         db  0x00 ; '.'
0000000000210aea         db  0x00 ; '.'
0000000000210aeb         db  0x00 ; '.'
0000000000210aec         db  0x00 ; '.'
0000000000210aed         db  0x00 ; '.'
0000000000210aee         db  0x00 ; '.'
0000000000210aef         db  0x00 ; '.'
0000000000210af0         db  0x00 ; '.'
0000000000210af1         db  0x00 ; '.'
0000000000210af2         db  0x00 ; '.'
0000000000210af3         db  0x00 ; '.'
0000000000210af4         db  0x00 ; '.'
0000000000210af5         db  0x00 ; '.'
0000000000210af6         db  0x00 ; '.'
0000000000210af7         db  0x00 ; '.'
0000000000210af8         db  0x76 ; 'v'
0000000000210af9         db  0x00 ; '.'
0000000000210afa         db  0x00 ; '.'
0000000000210afb         db  0x00 ; '.'
0000000000210afc         db  0x00 ; '.'
0000000000210afd         db  0x00 ; '.'
0000000000210afe         db  0x00 ; '.'
0000000000210aff         db  0x00 ; '.'
0000000000210b00         db  0x00 ; '.'
0000000000210b01         db  0x00 ; '.'
0000000000210b02         db  0x00 ; '.'
0000000000210b03         db  0x00 ; '.'
0000000000210b04         db  0x00 ; '.'
0000000000210b05         db  0x00 ; '.'
0000000000210b06         db  0x00 ; '.'
0000000000210b07         db  0x00 ; '.'
0000000000210b08         db  0x00 ; '.'
0000000000210b09         db  0x00 ; '.'
0000000000210b0a         db  0x00 ; '.'
0000000000210b0b         db  0x00 ; '.'
0000000000210b0c         db  0x00 ; '.'
0000000000210b0d         db  0x00 ; '.'
0000000000210b0e         db  0x00 ; '.'
0000000000210b0f         db  0x00 ; '.'
0000000000210b10         db  0x00 ; '.'
0000000000210b11         db  0x00 ; '.'
0000000000210b12         db  0x00 ; '.'
0000000000210b13         db  0x00 ; '.'
0000000000210b14         db  0x00 ; '.'
0000000000210b15         db  0x00 ; '.'
0000000000210b16         db  0x00 ; '.'
0000000000210b17         db  0x00 ; '.'
0000000000210b18         db  0x00 ; '.'
0000000000210b19         db  0x00 ; '.'
0000000000210b1a         db  0x00 ; '.'
0000000000210b1b         db  0x00 ; '.'
0000000000210b1c         db  0x00 ; '.'
0000000000210b1d         db  0x00 ; '.'
0000000000210b1e         db  0x00 ; '.'
0000000000210b1f         db  0x00 ; '.'
                     quoting_style_args:
0000000000210b20         db  0x61 ; 'a'
0000000000210b21         db  0xe2 ; '.'
0000000000210b22         db  0x00 ; '.'
0000000000210b23         db  0x00 ; '.'
0000000000210b24         db  0x00 ; '.'
0000000000210b25         db  0x00 ; '.'
0000000000210b26         db  0x00 ; '.'
0000000000210b27         db  0x00 ; '.'
0000000000210b28         db  0x69 ; 'i'
0000000000210b29         db  0xe2 ; '.'
0000000000210b2a         db  0x00 ; '.'
0000000000210b2b         db  0x00 ; '.'
0000000000210b2c         db  0x00 ; '.'
0000000000210b2d         db  0x00 ; '.'
0000000000210b2e         db  0x00 ; '.'
0000000000210b2f         db  0x00 ; '.'
0000000000210b30         db  0x6f ; 'o'
0000000000210b31         db  0xe2 ; '.'
0000000000210b32         db  0x00 ; '.'
0000000000210b33         db  0x00 ; '.'
0000000000210b34         db  0x00 ; '.'
0000000000210b35         db  0x00 ; '.'
0000000000210b36         db  0x00 ; '.'
0000000000210b37         db  0x00 ; '.'
0000000000210b38         db  0x7c ; '|'
0000000000210b39         db  0xe2 ; '.'
0000000000210b3a         db  0x00 ; '.'
0000000000210b3b         db  0x00 ; '.'
0000000000210b3c         db  0x00 ; '.'
0000000000210b3d         db  0x00 ; '.'
0000000000210b3e         db  0x00 ; '.'
0000000000210b3f         db  0x00 ; '.'
0000000000210b40         db  0x89 ; '.'
0000000000210b41         db  0xe2 ; '.'
0000000000210b42         db  0x00 ; '.'
0000000000210b43         db  0x00 ; '.'
0000000000210b44         db  0x00 ; '.'
0000000000210b45         db  0x00 ; '.'
0000000000210b46         db  0x00 ; '.'
0000000000210b47         db  0x00 ; '.'
0000000000210b48         db  0x9d ; '.'
0000000000210b49         db  0xe2 ; '.'
0000000000210b4a         db  0x00 ; '.'
0000000000210b4b         db  0x00 ; '.'
0000000000210b4c         db  0x00 ; '.'
0000000000210b4d         db  0x00 ; '.'
0000000000210b4e         db  0x00 ; '.'
0000000000210b4f         db  0x00 ; '.'
0000000000210b50         db  0x9f ; '.'
0000000000210b51         db  0xe2 ; '.'
0000000000210b52         db  0x00 ; '.'
0000000000210b53         db  0x00 ; '.'
0000000000210b54         db  0x00 ; '.'
0000000000210b55         db  0x00 ; '.'
0000000000210b56         db  0x00 ; '.'
0000000000210b57         db  0x00 ; '.'
0000000000210b58         db  0x82 ; '.'
0000000000210b59         db  0xe2 ; '.'
0000000000210b5a         db  0x00 ; '.'
0000000000210b5b         db  0x00 ; '.'
0000000000210b5c         db  0x00 ; '.'
0000000000210b5d         db  0x00 ; '.'
0000000000210b5e         db  0x00 ; '.'
0000000000210b5f         db  0x00 ; '.'
0000000000210b60         db  0x5d ; ']'
0000000000210b61         db  0xc8 ; '.'
0000000000210b62         db  0x00 ; '.'
0000000000210b63         db  0x00 ; '.'
0000000000210b64         db  0x00 ; '.'
0000000000210b65         db  0x00 ; '.'
0000000000210b66         db  0x00 ; '.'
0000000000210b67         db  0x00 ; '.'
0000000000210b68         db  0xa7 ; '.'
0000000000210b69         db  0xe2 ; '.'
0000000000210b6a         db  0x00 ; '.'
0000000000210b6b         db  0x00 ; '.'
0000000000210b6c         db  0x00 ; '.'
0000000000210b6d         db  0x00 ; '.'
0000000000210b6e         db  0x00 ; '.'
0000000000210b6f         db  0x00 ; '.'
0000000000210b70         db  0x00 ; '.'
0000000000210b71         db  0x00 ; '.'
0000000000210b72         db  0x00 ; '.'
0000000000210b73         db  0x00 ; '.'
0000000000210b74         db  0x00 ; '.'
0000000000210b75         db  0x00 ; '.'
0000000000210b76         db  0x00 ; '.'
0000000000210b77         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x210b78; 0x210d68[ (496 bytes)
        ; File offset : [68472; 68968[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
0000000000210b78         db  0x01 ; '.'
0000000000210b79         db  0x00 ; '.'
0000000000210b7a         db  0x00 ; '.'
0000000000210b7b         db  0x00 ; '.'
0000000000210b7c         db  0x00 ; '.'
0000000000210b7d         db  0x00 ; '.'
0000000000210b7e         db  0x00 ; '.'
0000000000210b7f         db  0x00 ; '.'
0000000000210b80         db  0x01 ; '.'
0000000000210b81         db  0x00 ; '.'
0000000000210b82         db  0x00 ; '.'
0000000000210b83         db  0x00 ; '.'
0000000000210b84         db  0x00 ; '.'
0000000000210b85         db  0x00 ; '.'
0000000000210b86         db  0x00 ; '.'
0000000000210b87         db  0x00 ; '.'
0000000000210b88         db  0x0c ; '.'
0000000000210b89         db  0x00 ; '.'
0000000000210b8a         db  0x00 ; '.'
0000000000210b8b         db  0x00 ; '.'
0000000000210b8c         db  0x00 ; '.'
0000000000210b8d         db  0x00 ; '.'
0000000000210b8e         db  0x00 ; '.'
0000000000210b8f         db  0x00 ; '.'
0000000000210b90         db  0xe8 ; '.'
0000000000210b91         db  0x19 ; '.'
0000000000210b92         db  0x00 ; '.'
0000000000210b93         db  0x00 ; '.'
0000000000210b94         db  0x00 ; '.'
0000000000210b95         db  0x00 ; '.'
0000000000210b96         db  0x00 ; '.'
0000000000210b97         db  0x00 ; '.'
0000000000210b98         db  0x0d ; '.'
0000000000210b99         db  0x00 ; '.'
0000000000210b9a         db  0x00 ; '.'
0000000000210b9b         db  0x00 ; '.'
0000000000210b9c         db  0x00 ; '.'
0000000000210b9d         db  0x00 ; '.'
0000000000210b9e         db  0x00 ; '.'
0000000000210b9f         db  0x00 ; '.'
0000000000210ba0         db  0xf0 ; '.'
0000000000210ba1         db  0xc5 ; '.'
0000000000210ba2         db  0x00 ; '.'
0000000000210ba3         db  0x00 ; '.'
0000000000210ba4         db  0x00 ; '.'
0000000000210ba5         db  0x00 ; '.'
0000000000210ba6         db  0x00 ; '.'
0000000000210ba7         db  0x00 ; '.'
0000000000210ba8         db  0x19 ; '.'
0000000000210ba9         db  0x00 ; '.'
0000000000210baa         db  0x00 ; '.'
0000000000210bab         db  0x00 ; '.'
0000000000210bac         db  0x00 ; '.'
0000000000210bad         db  0x00 ; '.'
0000000000210bae         db  0x00 ; '.'
0000000000210baf         db  0x00 ; '.'
0000000000210bb0         db  0x90 ; '.'
0000000000210bb1         db  0x0a ; '.'
0000000000210bb2         db  0x21 ; '!'
0000000000210bb3         db  0x00 ; '.'
0000000000210bb4         db  0x00 ; '.'
0000000000210bb5         db  0x00 ; '.'
0000000000210bb6         db  0x00 ; '.'
0000000000210bb7         db  0x00 ; '.'
0000000000210bb8         db  0x1b ; '.'
0000000000210bb9         db  0x00 ; '.'
0000000000210bba         db  0x00 ; '.'
0000000000210bbb         db  0x00 ; '.'
0000000000210bbc         db  0x00 ; '.'
0000000000210bbd         db  0x00 ; '.'
0000000000210bbe         db  0x00 ; '.'
0000000000210bbf         db  0x00 ; '.'
0000000000210bc0         db  0x08 ; '.'
0000000000210bc1         db  0x00 ; '.'
0000000000210bc2         db  0x00 ; '.'
0000000000210bc3         db  0x00 ; '.'
0000000000210bc4         db  0x00 ; '.'
0000000000210bc5         db  0x00 ; '.'
0000000000210bc6         db  0x00 ; '.'
0000000000210bc7         db  0x00 ; '.'
0000000000210bc8         db  0x1a ; '.'
0000000000210bc9         db  0x00 ; '.'
0000000000210bca         db  0x00 ; '.'
0000000000210bcb         db  0x00 ; '.'
0000000000210bcc         db  0x00 ; '.'
0000000000210bcd         db  0x00 ; '.'
0000000000210bce         db  0x00 ; '.'
0000000000210bcf         db  0x00 ; '.'
0000000000210bd0         db  0x98 ; '.'
0000000000210bd1         db  0x0a ; '.'
0000000000210bd2         db  0x21 ; '!'
0000000000210bd3         db  0x00 ; '.'
0000000000210bd4         db  0x00 ; '.'
0000000000210bd5         db  0x00 ; '.'
0000000000210bd6         db  0x00 ; '.'
0000000000210bd7         db  0x00 ; '.'
0000000000210bd8         db  0x1c ; '.'
0000000000210bd9         db  0x00 ; '.'
0000000000210bda         db  0x00 ; '.'
0000000000210bdb         db  0x00 ; '.'
0000000000210bdc         db  0x00 ; '.'
0000000000210bdd         db  0x00 ; '.'
0000000000210bde         db  0x00 ; '.'
0000000000210bdf         db  0x00 ; '.'
0000000000210be0         db  0x08 ; '.'
0000000000210be1         db  0x00 ; '.'
0000000000210be2         db  0x00 ; '.'
0000000000210be3         db  0x00 ; '.'
0000000000210be4         db  0x00 ; '.'
0000000000210be5         db  0x00 ; '.'
0000000000210be6         db  0x00 ; '.'
0000000000210be7         db  0x00 ; '.'
0000000000210be8         db  0xf5 ; '.'
0000000000210be9         db  0xfe ; '.'
0000000000210bea         db  0xff ; '.'
0000000000210beb         db  0x6f ; 'o'
0000000000210bec         db  0x00 ; '.'
0000000000210bed         db  0x00 ; '.'
0000000000210bee         db  0x00 ; '.'
0000000000210bef         db  0x00 ; '.'
0000000000210bf0         db  0x98 ; '.'
0000000000210bf1         db  0x02 ; '.'
0000000000210bf2         db  0x00 ; '.'
0000000000210bf3         db  0x00 ; '.'
0000000000210bf4         db  0x00 ; '.'
0000000000210bf5         db  0x00 ; '.'
0000000000210bf6         db  0x00 ; '.'
0000000000210bf7         db  0x00 ; '.'
0000000000210bf8         db  0x05 ; '.'
0000000000210bf9         db  0x00 ; '.'
0000000000210bfa         db  0x00 ; '.'
0000000000210bfb         db  0x00 ; '.'
0000000000210bfc         db  0x00 ; '.'
0000000000210bfd         db  0x00 ; '.'
0000000000210bfe         db  0x00 ; '.'
0000000000210bff         db  0x00 ; '.'
0000000000210c00         db  0x08 ; '.'
0000000000210c01         db  0x0b ; '.'
0000000000210c02         db  0x00 ; '.'
0000000000210c03         db  0x00 ; '.'
0000000000210c04         db  0x00 ; '.'
0000000000210c05         db  0x00 ; '.'
0000000000210c06         db  0x00 ; '.'
0000000000210c07         db  0x00 ; '.'
0000000000210c08         db  0x06 ; '.'
0000000000210c09         db  0x00 ; '.'
0000000000210c0a         db  0x00 ; '.'
0000000000210c0b         db  0x00 ; '.'
0000000000210c0c         db  0x00 ; '.'
0000000000210c0d         db  0x00 ; '.'
0000000000210c0e         db  0x00 ; '.'
0000000000210c0f         db  0x00 ; '.'
0000000000210c10         db  0xe0 ; '.'
0000000000210c11         db  0x02 ; '.'
0000000000210c12         db  0x00 ; '.'
0000000000210c13         db  0x00 ; '.'
0000000000210c14         db  0x00 ; '.'
0000000000210c15         db  0x00 ; '.'
0000000000210c16         db  0x00 ; '.'
0000000000210c17         db  0x00 ; '.'
0000000000210c18         db  0x0a ; '.'
0000000000210c19         db  0x00 ; '.'
0000000000210c1a         db  0x00 ; '.'
0000000000210c1b         db  0x00 ; '.'
0000000000210c1c         db  0x00 ; '.'
0000000000210c1d         db  0x00 ; '.'
0000000000210c1e         db  0x00 ; '.'
0000000000210c1f         db  0x00 ; '.'
0000000000210c20         db  0xe6 ; '.'
0000000000210c21         db  0x03 ; '.'
0000000000210c22         db  0x00 ; '.'
0000000000210c23         db  0x00 ; '.'
0000000000210c24         db  0x00 ; '.'
0000000000210c25         db  0x00 ; '.'
0000000000210c26         db  0x00 ; '.'
0000000000210c27         db  0x00 ; '.'
0000000000210c28         db  0x0b ; '.'
0000000000210c29         db  0x00 ; '.'
0000000000210c2a         db  0x00 ; '.'
0000000000210c2b         db  0x00 ; '.'
0000000000210c2c         db  0x00 ; '.'
0000000000210c2d         db  0x00 ; '.'
0000000000210c2e         db  0x00 ; '.'
0000000000210c2f         db  0x00 ; '.'
0000000000210c30         db  0x18 ; '.'
0000000000210c31         db  0x00 ; '.'
0000000000210c32         db  0x00 ; '.'
0000000000210c33         db  0x00 ; '.'
0000000000210c34         db  0x00 ; '.'
0000000000210c35         db  0x00 ; '.'
0000000000210c36         db  0x00 ; '.'
0000000000210c37         db  0x00 ; '.'
0000000000210c38         db  0x15 ; '.'
0000000000210c39         db  0x00 ; '.'
0000000000210c3a         db  0x00 ; '.'
0000000000210c3b         db  0x00 ; '.'
0000000000210c3c         db  0x00 ; '.'
0000000000210c3d         db  0x00 ; '.'
0000000000210c3e         db  0x00 ; '.'
0000000000210c3f         db  0x00 ; '.'
0000000000210c40         db  0x00 ; '.'
0000000000210c41         db  0x00 ; '.'
0000000000210c42         db  0x00 ; '.'
0000000000210c43         db  0x00 ; '.'
0000000000210c44         db  0x00 ; '.'
0000000000210c45         db  0x00 ; '.'
0000000000210c46         db  0x00 ; '.'
0000000000210c47         db  0x00 ; '.'
0000000000210c48         db  0x03 ; '.'
0000000000210c49         db  0x00 ; '.'
0000000000210c4a         db  0x00 ; '.'
0000000000210c4b         db  0x00 ; '.'
0000000000210c4c         db  0x00 ; '.'
0000000000210c4d         db  0x00 ; '.'
0000000000210c4e         db  0x00 ; '.'
0000000000210c4f         db  0x00 ; '.'
0000000000210c50         db  0x68 ; 'h'
0000000000210c51         db  0x0d ; '.'
0000000000210c52         db  0x21 ; '!'
0000000000210c53         db  0x00 ; '.'
0000000000210c54         db  0x00 ; '.'
0000000000210c55         db  0x00 ; '.'
0000000000210c56         db  0x00 ; '.'
0000000000210c57         db  0x00 ; '.'
0000000000210c58         db  0x02 ; '.'
0000000000210c59         db  0x00 ; '.'
0000000000210c5a         db  0x00 ; '.'
0000000000210c5b         db  0x00 ; '.'
0000000000210c5c         db  0x00 ; '.'
0000000000210c5d         db  0x00 ; '.'
0000000000210c5e         db  0x00 ; '.'
0000000000210c5f         db  0x00 ; '.'
0000000000210c60         db  0xd8 ; '.'
0000000000210c61         db  0x06 ; '.'
0000000000210c62         db  0x00 ; '.'
0000000000210c63         db  0x00 ; '.'
0000000000210c64         db  0x00 ; '.'
0000000000210c65         db  0x00 ; '.'
0000000000210c66         db  0x00 ; '.'
0000000000210c67         db  0x00 ; '.'
0000000000210c68         db  0x14 ; '.'
0000000000210c69         db  0x00 ; '.'
0000000000210c6a         db  0x00 ; '.'
0000000000210c6b         db  0x00 ; '.'
0000000000210c6c         db  0x00 ; '.'
0000000000210c6d         db  0x00 ; '.'
0000000000210c6e         db  0x00 ; '.'
0000000000210c6f         db  0x00 ; '.'
0000000000210c70         db  0x07 ; '.'
0000000000210c71         db  0x00 ; '.'
0000000000210c72         db  0x00 ; '.'
0000000000210c73         db  0x00 ; '.'
0000000000210c74         db  0x00 ; '.'
0000000000210c75         db  0x00 ; '.'
0000000000210c76         db  0x00 ; '.'
0000000000210c77         db  0x00 ; '.'
0000000000210c78         db  0x17 ; '.'
0000000000210c79         db  0x00 ; '.'
0000000000210c7a         db  0x00 ; '.'
0000000000210c7b         db  0x00 ; '.'
0000000000210c7c         db  0x00 ; '.'
0000000000210c7d         db  0x00 ; '.'
0000000000210c7e         db  0x00 ; '.'
0000000000210c7f         db  0x00 ; '.'
0000000000210c80         db  0x10 ; '.'
0000000000210c81         db  0x13 ; '.'
0000000000210c82         db  0x00 ; '.'
0000000000210c83         db  0x00 ; '.'
0000000000210c84         db  0x00 ; '.'
0000000000210c85         db  0x00 ; '.'
0000000000210c86         db  0x00 ; '.'
0000000000210c87         db  0x00 ; '.'
0000000000210c88         db  0x07 ; '.'
0000000000210c89         db  0x00 ; '.'
0000000000210c8a         db  0x00 ; '.'
0000000000210c8b         db  0x00 ; '.'
0000000000210c8c         db  0x00 ; '.'
0000000000210c8d         db  0x00 ; '.'
0000000000210c8e         db  0x00 ; '.'
0000000000210c8f         db  0x00 ; '.'
0000000000210c90         db  0x10 ; '.'
0000000000210c91         db  0x10 ; '.'
0000000000210c92         db  0x00 ; '.'
0000000000210c93         db  0x00 ; '.'
0000000000210c94         db  0x00 ; '.'
0000000000210c95         db  0x00 ; '.'
0000000000210c96         db  0x00 ; '.'
0000000000210c97         db  0x00 ; '.'
0000000000210c98         db  0x08 ; '.'
0000000000210c99         db  0x00 ; '.'
0000000000210c9a         db  0x00 ; '.'
0000000000210c9b         db  0x00 ; '.'
0000000000210c9c         db  0x00 ; '.'
0000000000210c9d         db  0x00 ; '.'
0000000000210c9e         db  0x00 ; '.'
0000000000210c9f         db  0x00 ; '.'
0000000000210ca0         db  0x00 ; '.'
0000000000210ca1         db  0x03 ; '.'
0000000000210ca2         db  0x00 ; '.'
0000000000210ca3         db  0x00 ; '.'
0000000000210ca4         db  0x00 ; '.'
0000000000210ca5         db  0x00 ; '.'
0000000000210ca6         db  0x00 ; '.'
0000000000210ca7         db  0x00 ; '.'
0000000000210ca8         db  0x09 ; '.'
0000000000210ca9         db  0x00 ; '.'
0000000000210caa         db  0x00 ; '.'
0000000000210cab         db  0x00 ; '.'
0000000000210cac         db  0x00 ; '.'
0000000000210cad         db  0x00 ; '.'
0000000000210cae         db  0x00 ; '.'
0000000000210caf         db  0x00 ; '.'
0000000000210cb0         db  0x18 ; '.'
0000000000210cb1         db  0x00 ; '.'
0000000000210cb2         db  0x00 ; '.'
0000000000210cb3         db  0x00 ; '.'
0000000000210cb4         db  0x00 ; '.'
0000000000210cb5         db  0x00 ; '.'
0000000000210cb6         db  0x00 ; '.'
0000000000210cb7         db  0x00 ; '.'
0000000000210cb8         db  0x1e ; '.'
0000000000210cb9         db  0x00 ; '.'
0000000000210cba         db  0x00 ; '.'
0000000000210cbb         db  0x00 ; '.'
0000000000210cbc         db  0x00 ; '.'
0000000000210cbd         db  0x00 ; '.'
0000000000210cbe         db  0x00 ; '.'
0000000000210cbf         db  0x00 ; '.'
0000000000210cc0         db  0x08 ; '.'
0000000000210cc1         db  0x00 ; '.'
0000000000210cc2         db  0x00 ; '.'
0000000000210cc3         db  0x00 ; '.'
0000000000210cc4         db  0x00 ; '.'
0000000000210cc5         db  0x00 ; '.'
0000000000210cc6         db  0x00 ; '.'
0000000000210cc7         db  0x00 ; '.'
0000000000210cc8         db  0xfb ; '.'
0000000000210cc9         db  0xff ; '.'
0000000000210cca         db  0xff ; '.'
0000000000210ccb         db  0x6f ; 'o'
0000000000210ccc         db  0x00 ; '.'
0000000000210ccd         db  0x00 ; '.'
0000000000210cce         db  0x00 ; '.'
0000000000210ccf         db  0x00 ; '.'
0000000000210cd0         db  0x01 ; '.'
0000000000210cd1         db  0x00 ; '.'
0000000000210cd2         db  0x00 ; '.'
0000000000210cd3         db  0x08 ; '.'
0000000000210cd4         db  0x00 ; '.'
0000000000210cd5         db  0x00 ; '.'
0000000000210cd6         db  0x00 ; '.'
0000000000210cd7         db  0x00 ; '.'
0000000000210cd8         db  0xfe ; '.'
0000000000210cd9         db  0xff ; '.'
0000000000210cda         db  0xff ; '.'
0000000000210cdb         db  0x6f ; 'o'
0000000000210cdc         db  0x00 ; '.'
0000000000210cdd         db  0x00 ; '.'
0000000000210cde         db  0x00 ; '.'
0000000000210cdf         db  0x00 ; '.'
0000000000210ce0         db  0xa0 ; '.'
0000000000210ce1         db  0x0f ; '.'
0000000000210ce2         db  0x00 ; '.'
0000000000210ce3         db  0x00 ; '.'
0000000000210ce4         db  0x00 ; '.'
0000000000210ce5         db  0x00 ; '.'
0000000000210ce6         db  0x00 ; '.'
0000000000210ce7         db  0x00 ; '.'
0000000000210ce8         db  0xff ; '.'
0000000000210ce9         db  0xff ; '.'
0000000000210cea         db  0xff ; '.'
0000000000210ceb         db  0x6f ; 'o'
0000000000210cec         db  0x00 ; '.'
0000000000210ced         db  0x00 ; '.'
0000000000210cee         db  0x00 ; '.'
0000000000210cef         db  0x00 ; '.'
0000000000210cf0         db  0x01 ; '.'
0000000000210cf1         db  0x00 ; '.'
0000000000210cf2         db  0x00 ; '.'
0000000000210cf3         db  0x00 ; '.'
0000000000210cf4         db  0x00 ; '.'
0000000000210cf5         db  0x00 ; '.'
0000000000210cf6         db  0x00 ; '.'
0000000000210cf7         db  0x00 ; '.'
0000000000210cf8         db  0xf0 ; '.'
0000000000210cf9         db  0xff ; '.'
0000000000210cfa         db  0xff ; '.'
0000000000210cfb         db  0x6f ; 'o'
0000000000210cfc         db  0x00 ; '.'
0000000000210cfd         db  0x00 ; '.'
0000000000210cfe         db  0x00 ; '.'
0000000000210cff         db  0x00 ; '.'
0000000000210d00         db  0xee ; '.'
0000000000210d01         db  0x0e ; '.'
0000000000210d02         db  0x00 ; '.'
0000000000210d03         db  0x00 ; '.'
0000000000210d04         db  0x00 ; '.'
0000000000210d05         db  0x00 ; '.'
0000000000210d06         db  0x00 ; '.'
0000000000210d07         db  0x00 ; '.'
0000000000210d08         db  0xf9 ; '.'
0000000000210d09         db  0xff ; '.'
0000000000210d0a         db  0xff ; '.'
0000000000210d0b         db  0x6f ; 'o'
0000000000210d0c         db  0x00 ; '.'
0000000000210d0d         db  0x00 ; '.'
0000000000210d0e         db  0x00 ; '.'
0000000000210d0f         db  0x00 ; '.'
0000000000210d10         db  0x15 ; '.'
0000000000210d11         db  0x00 ; '.'
0000000000210d12         db  0x00 ; '.'
0000000000210d13         db  0x00 ; '.'
0000000000210d14         db  0x00 ; '.'
0000000000210d15         db  0x00 ; '.'
0000000000210d16         db  0x00 ; '.'
0000000000210d17         db  0x00 ; '.'
0000000000210d18         db  0x00 ; '.'
0000000000210d19         db  0x00 ; '.'
0000000000210d1a         db  0x00 ; '.'
0000000000210d1b         db  0x00 ; '.'
0000000000210d1c         db  0x00 ; '.'
0000000000210d1d         db  0x00 ; '.'
0000000000210d1e         db  0x00 ; '.'
0000000000210d1f         db  0x00 ; '.'
0000000000210d20         db  0x00 ; '.'
0000000000210d21         db  0x00 ; '.'
0000000000210d22         db  0x00 ; '.'
0000000000210d23         db  0x00 ; '.'
0000000000210d24         db  0x00 ; '.'
0000000000210d25         db  0x00 ; '.'
0000000000210d26         db  0x00 ; '.'
0000000000210d27         db  0x00 ; '.'
0000000000210d28         db  0x00 ; '.'
0000000000210d29         db  0x00 ; '.'
0000000000210d2a         db  0x00 ; '.'
0000000000210d2b         db  0x00 ; '.'
0000000000210d2c         db  0x00 ; '.'
0000000000210d2d         db  0x00 ; '.'
0000000000210d2e         db  0x00 ; '.'
0000000000210d2f         db  0x00 ; '.'
0000000000210d30         db  0x00 ; '.'
0000000000210d31         db  0x00 ; '.'
0000000000210d32         db  0x00 ; '.'
0000000000210d33         db  0x00 ; '.'
0000000000210d34         db  0x00 ; '.'
0000000000210d35         db  0x00 ; '.'
0000000000210d36         db  0x00 ; '.'
0000000000210d37         db  0x00 ; '.'
0000000000210d38         db  0x00 ; '.'
0000000000210d39         db  0x00 ; '.'
0000000000210d3a         db  0x00 ; '.'
0000000000210d3b         db  0x00 ; '.'
0000000000210d3c         db  0x00 ; '.'
0000000000210d3d         db  0x00 ; '.'
0000000000210d3e         db  0x00 ; '.'
0000000000210d3f         db  0x00 ; '.'
0000000000210d40         db  0x00 ; '.'
0000000000210d41         db  0x00 ; '.'
0000000000210d42         db  0x00 ; '.'
0000000000210d43         db  0x00 ; '.'
0000000000210d44         db  0x00 ; '.'
0000000000210d45         db  0x00 ; '.'
0000000000210d46         db  0x00 ; '.'
0000000000210d47         db  0x00 ; '.'
0000000000210d48         db  0x00 ; '.'
0000000000210d49         db  0x00 ; '.'
0000000000210d4a         db  0x00 ; '.'
0000000000210d4b         db  0x00 ; '.'
0000000000210d4c         db  0x00 ; '.'
0000000000210d4d         db  0x00 ; '.'
0000000000210d4e         db  0x00 ; '.'
0000000000210d4f         db  0x00 ; '.'
0000000000210d50         db  0x00 ; '.'
0000000000210d51         db  0x00 ; '.'
0000000000210d52         db  0x00 ; '.'
0000000000210d53         db  0x00 ; '.'
0000000000210d54         db  0x00 ; '.'
0000000000210d55         db  0x00 ; '.'
0000000000210d56         db  0x00 ; '.'
0000000000210d57         db  0x00 ; '.'
0000000000210d58         db  0x00 ; '.'
0000000000210d59         db  0x00 ; '.'
0000000000210d5a         db  0x00 ; '.'
0000000000210d5b         db  0x00 ; '.'
0000000000210d5c         db  0x00 ; '.'
0000000000210d5d         db  0x00 ; '.'
0000000000210d5e         db  0x00 ; '.'
0000000000210d5f         db  0x00 ; '.'
0000000000210d60         db  0x00 ; '.'
0000000000210d61         db  0x00 ; '.'
0000000000210d62         db  0x00 ; '.'
0000000000210d63         db  0x00 ; '.'
0000000000210d64         db  0x00 ; '.'
0000000000210d65         db  0x00 ; '.'
0000000000210d66         db  0x00 ; '.'
0000000000210d67         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x210d68; 0x210ff0[ (648 bytes)
        ; File offset : [68968; 69616[ (648 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
0000000000210d68         db  0x78 ; 'x'
0000000000210d69         db  0x0b ; '.'
0000000000210d6a         db  0x21 ; '!'
0000000000210d6b         db  0x00 ; '.'
0000000000210d6c         db  0x00 ; '.'
0000000000210d6d         db  0x00 ; '.'
0000000000210d6e         db  0x00 ; '.'
0000000000210d6f         db  0x00 ; '.'
                     qword_210d70:
0000000000210d70         dq         0x0000000000000000                          ; DATA XREF=0x1a00
0000000000210d78         db  0x00 ; '.'                                         ; DATA XREF=0x1a06
0000000000210d79         db  0x00 ; '.'
0000000000210d7a         db  0x00 ; '.'
0000000000210d7b         db  0x00 ; '.'
0000000000210d7c         db  0x00 ; '.'
0000000000210d7d         db  0x00 ; '.'
0000000000210d7e         db  0x00 ; '.'
0000000000210d7f         db  0x00 ; '.'
                     __ctype_toupper_loc@GOT:        // __ctype_toupper_loc
0000000000210d80         dq         0x0000000000211570                          ; DATA XREF=j___ctype_toupper_loc
                     getenv@GOT:        // getenv
0000000000210d88         dq         0x0000000000211578                          ; DATA XREF=j_getenv
                     sigprocmask@GOT:        // sigprocmask
0000000000210d90         dq         0x0000000000211580                          ; DATA XREF=j_sigprocmask
                     __snprintf_chk@GOT:        // __snprintf_chk
0000000000210d98         dq         0x0000000000211588                          ; DATA XREF=j___snprintf_chk
                     raise@GOT:        // raise
0000000000210da0         dq         0x0000000000211590                          ; DATA XREF=j_raise
                     free@GOT:        // free
0000000000210da8         dq         0x0000000000211598                          ; DATA XREF=j_free
                     abort@GOT:        // abort
0000000000210db0         dq         0x00000000002115a0                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
0000000000210db8         dq         0x00000000002115a8                          ; DATA XREF=j___errno_location
                     fdatasync@GOT:        // fdatasync
0000000000210dc0         dq         0x00000000002115b0                          ; DATA XREF=j_fdatasync
                     error_at_line@GOT:        // error_at_line
0000000000210dc8         dq         0x00000000002115b8                          ; DATA XREF=j_error_at_line
                     strncmp@GOT:        // strncmp
0000000000210dd0         dq         0x00000000002115c0                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
0000000000210dd8         dq         0x00000000002115d0                          ; DATA XREF=j__exit
                     __fpending@GOT:        // __fpending
0000000000210de0         dq         0x00000000002115d8                          ; DATA XREF=j___fpending
                     sigaction@GOT:        // sigaction
0000000000210de8         dq         0x00000000002115e0                          ; DATA XREF=j_sigaction
                     localeconv@GOT:        // localeconv
0000000000210df0         dq         0x00000000002115e8                          ; DATA XREF=j_localeconv
                     fcntl@GOT:        // fcntl
0000000000210df8         dq         0x00000000002115f0                          ; DATA XREF=j_fcntl
                     clock_gettime@GOT:        // clock_gettime
0000000000210e00         dq         0x00000000002115f8                          ; DATA XREF=j_clock_gettime
                     write@GOT:        // write
0000000000210e08         dq         0x0000000000211600                          ; DATA XREF=j_write
                     textdomain@GOT:        // textdomain
0000000000210e10         dq         0x0000000000211608                          ; DATA XREF=j_textdomain
                     fclose@GOT:        // fclose
0000000000210e18         dq         0x0000000000211610                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
0000000000210e20         dq         0x0000000000211618                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
0000000000210e28         dq         0x0000000000211620                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
0000000000210e30         dq         0x0000000000211628                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
0000000000210e38         dq         0x0000000000211630                          ; DATA XREF=j_strlen
                     __stack_chk_fail@GOT:        // __stack_chk_fail
0000000000210e40         dq         0x0000000000211638                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
0000000000210e48         dq         0x0000000000211640                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
0000000000210e50         dq         0x0000000000211648                          ; DATA XREF=j_mbrtowc
                     dup2@GOT:        // dup2
0000000000210e58         dq         0x0000000000211650                          ; DATA XREF=j_dup2
                     strchr@GOT:        // strchr
0000000000210e60         dq         0x0000000000211658                          ; DATA XREF=j_strchr
                     __overflow@GOT:        // __overflow
0000000000210e68         dq         0x0000000000211660                          ; DATA XREF=j___overflow
                     strrchr@GOT:        // strrchr
0000000000210e70         dq         0x0000000000211668                          ; DATA XREF=j_strrchr
                     ftruncate@GOT:        // ftruncate
0000000000210e78         dq         0x0000000000211670                          ; DATA XREF=j_ftruncate
                     lseek@GOT:        // lseek
0000000000210e80         dq         0x0000000000211678                          ; DATA XREF=j_lseek
                     __assert_fail@GOT:        // __assert_fail
0000000000210e88         dq         0x0000000000211680                          ; DATA XREF=j___assert_fail
                     __strtoul_internal@GOT:        // __strtoul_internal
0000000000210e90         dq         0x0000000000211688                          ; DATA XREF=j___strtoul_internal
                     memset@GOT:        // memset
0000000000210e98         dq         0x0000000000211690                          ; DATA XREF=j_memset
                     ioctl@GOT:        // ioctl
0000000000210ea0         dq         0x0000000000211698                          ; DATA XREF=j_ioctl
                     close@GOT:        // close
0000000000210ea8         dq         0x00000000002116a0                          ; DATA XREF=j_close
                     posix_fadvise@GOT:        // posix_fadvise
0000000000210eb0         dq         0x00000000002116a8                          ; DATA XREF=j_posix_fadvise
                     read@GOT:        // read
0000000000210eb8         dq         0x00000000002116b0                          ; DATA XREF=j_read
                     memcmp@GOT:        // memcmp
0000000000210ec0         dq         0x00000000002116c0                          ; DATA XREF=j_memcmp
                     fputs_unlocked@GOT:        // fputs_unlocked
0000000000210ec8         dq         0x00000000002116c8                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
0000000000210ed0         dq         0x00000000002116d0                          ; DATA XREF=j_calloc
                     __memcpy_chk@GOT:        // __memcpy_chk
0000000000210ed8         dq         0x00000000002116d8                          ; DATA XREF=j___memcpy_chk
                     sigemptyset@GOT:        // sigemptyset
0000000000210ee0         dq         0x00000000002116e0                          ; DATA XREF=j_sigemptyset
                     memcpy@GOT:        // memcpy
0000000000210ee8         dq         0x00000000002116f0                          ; DATA XREF=j_memcpy
                     fileno@GOT:        // fileno
0000000000210ef0         dq         0x00000000002116f8                          ; DATA XREF=j_fileno
                     malloc@GOT:        // malloc
0000000000210ef8         dq         0x0000000000211700                          ; DATA XREF=j_malloc
                     fflush@GOT:        // fflush
0000000000210f00         dq         0x0000000000211708                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
0000000000210f08         dq         0x0000000000211710                          ; DATA XREF=j_nl_langinfo
                     __fxstat@GOT:        // __fxstat
0000000000210f10         dq         0x0000000000211718                          ; DATA XREF=j___fxstat
                     __freading@GOT:        // __freading
0000000000210f18         dq         0x0000000000211720                          ; DATA XREF=j___freading
                     realloc@GOT:        // realloc
0000000000210f20         dq         0x0000000000211728                          ; DATA XREF=j_realloc
                     setlocale@GOT:        // setlocale
0000000000210f28         dq         0x0000000000211730                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
0000000000210f30         dq         0x0000000000211738                          ; DATA XREF=j___printf_chk
                     memmove@GOT:        // memmove
0000000000210f38         dq         0x0000000000211740                          ; DATA XREF=j_memmove
                     error@GOT:        // error
0000000000210f40         dq         0x0000000000211748                          ; DATA XREF=j_error
                     fsync@GOT:        // fsync
0000000000210f48         dq         0x0000000000211750                          ; DATA XREF=j_fsync
                     open@GOT:        // open
0000000000210f50         dq         0x0000000000211758                          ; DATA XREF=j_open
                     fseeko@GOT:        // fseeko
0000000000210f58         dq         0x0000000000211760                          ; DATA XREF=j_fseeko
                     dcngettext@GOT:        // dcngettext
0000000000210f60         dq         0x0000000000211768                          ; DATA XREF=j_dcngettext
                     __cxa_atexit@GOT:        // __cxa_atexit
0000000000210f68         dq         0x0000000000211770                          ; DATA XREF=j___cxa_atexit
                     getpagesize@GOT:        // getpagesize
0000000000210f70         dq         0x0000000000211778                          ; DATA XREF=j_getpagesize
                     sigismember@GOT:        // sigismember
0000000000210f78         dq         0x0000000000211780                          ; DATA XREF=j_sigismember
                     exit@GOT:        // exit
0000000000210f80         dq         0x0000000000211788                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
0000000000210f88         dq         0x0000000000211790                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
0000000000210f90         dq         0x0000000000211798                          ; DATA XREF=j___fprintf_chk
                     mbsinit@GOT:        // mbsinit
0000000000210f98         dq         0x00000000002117a8                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
0000000000210fa0         dq         0x00000000002117b0                          ; DATA XREF=j_iswprint
                     sigaddset@GOT:        // sigaddset
0000000000210fa8         dq         0x00000000002117c0                          ; DATA XREF=j_sigaddset
                     __ctype_tolower_loc@GOT:        // __ctype_tolower_loc
0000000000210fb0         dq         0x00000000002117c8                          ; DATA XREF=j___ctype_tolower_loc
                     __ctype_b_loc@GOT:        // __ctype_b_loc
0000000000210fb8         dq         0x00000000002117d0                          ; DATA XREF=j___ctype_b_loc
                     __sprintf_chk@GOT:        // __sprintf_chk
0000000000210fc0         dq         0x00000000002117d8                          ; DATA XREF=j___sprintf_chk
                     qword_210fc8:
0000000000210fc8         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
0000000000210fd0         db  0x00 ; '.'                                         ; DATA XREF=_start+36
0000000000210fd1         db  0x00 ; '.'
0000000000210fd2         db  0x00 ; '.'
0000000000210fd3         db  0x00 ; '.'
0000000000210fd4         db  0x00 ; '.'
0000000000210fd5         db  0x00 ; '.'
0000000000210fd6         db  0x00 ; '.'
0000000000210fd7         db  0x00 ; '.'
                     qword_210fd8:
0000000000210fd8         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_210fe0:
0000000000210fe0         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_210fe8:
0000000000210fe8         dq         0x0000000000000000                          ; DATA XREF=j_qword_210fe8, __do_global_dtors_aux+9
0000000000210ff0         db  0x00 ; '.'
0000000000210ff1         db  0x00 ; '.'
0000000000210ff2         db  0x00 ; '.'
0000000000210ff3         db  0x00 ; '.'
0000000000210ff4         db  0x00 ; '.'
0000000000210ff5         db  0x00 ; '.'
0000000000210ff6         db  0x00 ; '.'
0000000000210ff7         db  0x00 ; '.'
0000000000210ff8         db  0x00 ; '.'
0000000000210ff9         db  0x00 ; '.'
0000000000210ffa         db  0x00 ; '.'
0000000000210ffb         db  0x00 ; '.'
0000000000210ffc         db  0x00 ; '.'
0000000000210ffd         db  0x00 ; '.'
0000000000210ffe         db  0x00 ; '.'
0000000000210fff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x211000; 0x2110a8[ (168 bytes)
        ; File offset : [69632; 69800[ (168 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

0000000000211000         db  0x00 ; '.'
0000000000211001         db  0x00 ; '.'
0000000000211002         db  0x00 ; '.'
0000000000211003         db  0x00 ; '.'
0000000000211004         db  0x00 ; '.'
0000000000211005         db  0x00 ; '.'
0000000000211006         db  0x00 ; '.'
0000000000211007         db  0x00 ; '.'
                     __dso_handle:
0000000000211008         dq         0x0000000000211008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     output_offset.7179:
0000000000211010         dq         0xfffffffffffffffe                          ; DATA XREF=invalidate_cache+192, invalidate_cache+229, invalidate_cache+364
                     close_stdout_required:
0000000000211018         db         0x01                                        ; DATA XREF=main+534, maybe_close_stdout
                     space_character:
0000000000211019         db         0x20                                        ; DATA XREF=main+1409, main+5220, sub_5bc0+25, copy_with_unblock+152, copy_with_unblock+218
                     newline_character:
000000000021101a         db         0x0a                                        ; DATA XREF=main+1402, main+5318, copy_with_block+115, copy_with_unblock+43
000000000021101b         align      4
                     status_level:
000000000021101c         dd         0x00000003                                  ; DATA XREF=main+2112, main+2496, main+3161, main+3318, main+3468, main+3556, main+5783, skip_via_lseek+168, print_stats.part.2+160, process_signals+113, process_signals+141
                     max_records:
0000000000211020         dq         0xffffffffffffffff                          ; DATA XREF=main+902, main+1111, main+1171, main+2042, main+2148, main+2913, main+3066, main+4183
                     Version:
0000000000211028         dq         0x000000000000e178                          ; "8.31", DATA XREF=main+453
                     exit_failure:
0000000000211030         dd         0x00000001                                  ; DATA XREF=close_stdout+130, parse_gnu_standard_options_only+256, xalloc_die+23
0000000000211034         db  0x00 ; '.'
0000000000211035         db  0x00 ; '.'
0000000000211036         db  0x00 ; '.'
0000000000211037         db  0x00 ; '.'
0000000000211038         db  0x00 ; '.'
0000000000211039         db  0x00 ; '.'
000000000021103a         db  0x00 ; '.'
000000000021103b         db  0x00 ; '.'
000000000021103c         db  0x00 ; '.'
000000000021103d         db  0x00 ; '.'
000000000021103e         db  0x00 ; '.'
000000000021103f         db  0x00 ; '.'
                     quote_quoting_options:
0000000000211040         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
0000000000211041         db  0x00 ; '.'
0000000000211042         db  0x00 ; '.'
0000000000211043         db  0x00 ; '.'
0000000000211044         db  0x00 ; '.'
0000000000211045         db  0x00 ; '.'
0000000000211046         db  0x00 ; '.'
0000000000211047         db  0x00 ; '.'
0000000000211048         db  0x00 ; '.'
0000000000211049         db  0x00 ; '.'
000000000021104a         db  0x00 ; '.'
000000000021104b         db  0x00 ; '.'
000000000021104c         db  0x00 ; '.'
000000000021104d         db  0x00 ; '.'
000000000021104e         db  0x00 ; '.'
000000000021104f         db  0x00 ; '.'
0000000000211050         db  0x00 ; '.'
0000000000211051         db  0x00 ; '.'
0000000000211052         db  0x00 ; '.'
0000000000211053         db  0x00 ; '.'
0000000000211054         db  0x00 ; '.'
0000000000211055         db  0x00 ; '.'
0000000000211056         db  0x00 ; '.'
0000000000211057         db  0x00 ; '.'
0000000000211058         db  0x00 ; '.'
0000000000211059         db  0x00 ; '.'
000000000021105a         db  0x00 ; '.'
000000000021105b         db  0x00 ; '.'
000000000021105c         db  0x00 ; '.'
000000000021105d         db  0x00 ; '.'
000000000021105e         db  0x00 ; '.'
000000000021105f         db  0x00 ; '.'
0000000000211060         db  0x00 ; '.'
0000000000211061         db  0x00 ; '.'
0000000000211062         db  0x00 ; '.'
0000000000211063         db  0x00 ; '.'
0000000000211064         db  0x00 ; '.'
0000000000211065         db  0x00 ; '.'
0000000000211066         db  0x00 ; '.'
0000000000211067         db  0x00 ; '.'
0000000000211068         db  0x00 ; '.'
0000000000211069         db  0x00 ; '.'
000000000021106a         db  0x00 ; '.'
000000000021106b         db  0x00 ; '.'
000000000021106c         db  0x00 ; '.'
000000000021106d         db  0x00 ; '.'
000000000021106e         db  0x00 ; '.'
000000000021106f         db  0x00 ; '.'
0000000000211070         db  0x00 ; '.'
0000000000211071         db  0x00 ; '.'
0000000000211072         db  0x00 ; '.'
0000000000211073         db  0x00 ; '.'
0000000000211074         db  0x00 ; '.'
0000000000211075         db  0x00 ; '.'
0000000000211076         db  0x00 ; '.'
0000000000211077         db  0x00 ; '.'
                     nslots:
0000000000211078         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000021107c         db  0x00 ; '.'
000000000021107d         db  0x00 ; '.'
000000000021107e         db  0x00 ; '.'
000000000021107f         db  0x00 ; '.'
                     slotvec:
0000000000211080         dq         0x0000000000211090                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
0000000000211088         db  0x00 ; '.'
0000000000211089         db  0x00 ; '.'
000000000021108a         db  0x00 ; '.'
000000000021108b         db  0x00 ; '.'
000000000021108c         db  0x00 ; '.'
000000000021108d         db  0x00 ; '.'
000000000021108e         db  0x00 ; '.'
000000000021108f         db  0x00 ; '.'
                     slotvec0:
0000000000211090         dq         1.26481e-321, 1.07106e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec
                     argmatch_die:
00000000002110a0         db  0x20 ; ' '
00000000002110a1         db  0xa1 ; '.'
00000000002110a2         db  0x00 ; '.'
00000000002110a3         db  0x00 ; '.'
00000000002110a4         db  0x00 ; '.'
00000000002110a5         db  0x00 ; '.'
00000000002110a6         db  0x00 ; '.'
00000000002110a7         db  0x00 ; '.'
                     __TMC_END__:
00000000002110a8         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7
00000000002110a9         db  0x00 ; '.'
00000000002110aa         db  0x00 ; '.'
00000000002110ab         db  0x00 ; '.'
00000000002110ac         db  0x00 ; '.'
00000000002110ad         db  0x00 ; '.'
00000000002110ae         db  0x00 ; '.'
00000000002110af         db  0x00 ; '.'
00000000002110b0         db  0x00 ; '.'
00000000002110b1         db  0x00 ; '.'
00000000002110b2         db  0x00 ; '.'
00000000002110b3         db  0x00 ; '.'
00000000002110b4         db  0x00 ; '.'
00000000002110b5         db  0x00 ; '.'
00000000002110b6         db  0x00 ; '.'
00000000002110b7         db  0x00 ; '.'
00000000002110b8         db  0x00 ; '.'
00000000002110b9         db  0x00 ; '.'
00000000002110ba         db  0x00 ; '.'
00000000002110bb         db  0x00 ; '.'
00000000002110bc         db  0x00 ; '.'
00000000002110bd         db  0x00 ; '.'
00000000002110be         db  0x00 ; '.'
00000000002110bf         db  0x00 ; '.'


        ; Section .bss
        ; Range: [0x2110c0; 0x211560[ (1184 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
00000000002110c0         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+102
00000000002110c1         db  0x00 ; '.'
00000000002110c2         db  0x00 ; '.'
00000000002110c3         db  0x00 ; '.'
00000000002110c4         db  0x00 ; '.'
00000000002110c5         db  0x00 ; '.'
00000000002110c6         db  0x00 ; '.'
00000000002110c7         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
00000000002110c8         db  0x00 ; '.'                                         ; DATA XREF=usage+128, usage+165, usage+202, usage+239, usage+276, usage+313, usage+350, usage+387, usage+424, usage+461, usage+498
00000000002110c9         db  0x00 ; '.'
00000000002110ca         db  0x00 ; '.'
00000000002110cb         db  0x00 ; '.'
00000000002110cc         db  0x00 ; '.'
00000000002110cd         db  0x00 ; '.'
00000000002110ce         db  0x00 ; '.'
00000000002110cf         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
00000000002110d0         db  0x00 ; '.'                                         ; DATA XREF=main+567, parse_long_options+141
00000000002110d1         db  0x00 ; '.'
00000000002110d2         db  0x00 ; '.'
00000000002110d3         db  0x00 ; '.'
00000000002110d4         db  0x00 ; '.'
00000000002110d5         db  0x00 ; '.'
00000000002110d6         db  0x00 ; '.'
00000000002110d7         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
00000000002110d8         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
00000000002110d9         db  0x00 ; '.'
00000000002110da         db  0x00 ; '.'
00000000002110db         db  0x00 ; '.'
00000000002110dc         db  0x00 ; '.'
00000000002110dd         db  0x00 ; '.'
00000000002110de         db  0x00 ; '.'
00000000002110df         db  0x00 ; '.'
                     opterr@@GLIBC_2.2.5:
00000000002110e0         db  0x00 ; '.'                                         ; DATA XREF=parse_long_options+103, parse_long_options+109, parse_long_options+135, parse_gnu_standard_options_only+138, parse_gnu_standard_options_only+144, parse_gnu_standard_options_only+278
00000000002110e1         db  0x00 ; '.'
00000000002110e2         db  0x00 ; '.'
00000000002110e3         db  0x00 ; '.'
00000000002110e4         db  0x00 ; '.'
00000000002110e5         db  0x00 ; '.'
00000000002110e6         db  0x00 ; '.'
00000000002110e7         db  0x00 ; '.'
00000000002110e8         db  0x00 ; '.'
00000000002110e9         db  0x00 ; '.'
00000000002110ea         db  0x00 ; '.'
00000000002110eb         db  0x00 ; '.'
00000000002110ec         db  0x00 ; '.'
00000000002110ed         db  0x00 ; '.'
00000000002110ee         db  0x00 ; '.'
00000000002110ef         db  0x00 ; '.'
00000000002110f0         db  0x00 ; '.'
00000000002110f1         db  0x00 ; '.'
00000000002110f2         db  0x00 ; '.'
00000000002110f3         db  0x00 ; '.'
00000000002110f4         db  0x00 ; '.'
00000000002110f5         db  0x00 ; '.'
00000000002110f6         db  0x00 ; '.'
00000000002110f7         db  0x00 ; '.'
00000000002110f8         db  0x00 ; '.'
00000000002110f9         db  0x00 ; '.'
00000000002110fa         db  0x00 ; '.'
00000000002110fb         db  0x00 ; '.'
00000000002110fc         db  0x00 ; '.'
00000000002110fd         db  0x00 ; '.'
00000000002110fe         db  0x00 ; '.'
00000000002110ff         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
0000000000211100         db  0x00 ; '.'                                         ; DATA XREF=print_xfer_stats+363, print_xfer_stats+553, print_xfer_stats+600, print_xfer_stats+725, print_xfer_stats+808, nl_error+116, maybe_close_stdout+13, print_stats.part.2+20, print_stats.part.2+113, print_stats.part.2+238, usage+61
0000000000211101         db  0x00 ; '.'
0000000000211102         db  0x00 ; '.'
0000000000211103         db  0x00 ; '.'
0000000000211104         db  0x00 ; '.'
0000000000211105         db  0x00 ; '.'
0000000000211106         db  0x00 ; '.'
0000000000211107         db  0x00 ; '.'
                     completed.7697:
0000000000211108         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
0000000000211109         db  0x00 ; '.'
000000000021110a         db  0x00 ; '.'
000000000021110b         db  0x00 ; '.'
000000000021110c         db  0x00 ; '.'
000000000021110d         db  0x00 ; '.'
000000000021110e         db  0x00 ; '.'
000000000021110f         db  0x00 ; '.'
0000000000211110         db  0x00 ; '.'
0000000000211111         db  0x00 ; '.'
0000000000211112         db  0x00 ; '.'
0000000000211113         db  0x00 ; '.'
0000000000211114         db  0x00 ; '.'
0000000000211115         db  0x00 ; '.'
0000000000211116         db  0x00 ; '.'
0000000000211117         db  0x00 ; '.'
0000000000211118         db  0x00 ; '.'
0000000000211119         db  0x00 ; '.'
000000000021111a         db  0x00 ; '.'
000000000021111b         db  0x00 ; '.'
000000000021111c         db  0x00 ; '.'
000000000021111d         db  0x00 ; '.'
000000000021111e         db  0x00 ; '.'
000000000021111f         db  0x00 ; '.'
                     o_pending.7167:
0000000000211120         db  0x00 ; '.'                                         ; DATA XREF=invalidate_cache+168
0000000000211121         db  0x00 ; '.'
0000000000211122         db  0x00 ; '.'
0000000000211123         db  0x00 ; '.'
0000000000211124         db  0x00 ; '.'
0000000000211125         db  0x00 ; '.'
0000000000211126         db  0x00 ; '.'
0000000000211127         db  0x00 ; '.'
                     i_pending.7166:
0000000000211128         db  0x00 ; '.'                                         ; DATA XREF=invalidate_cache+30
0000000000211129         db  0x00 ; '.'
000000000021112a         db  0x00 ; '.'
000000000021112b         db  0x00 ; '.'
000000000021112c         db  0x00 ; '.'
000000000021112d         db  0x00 ; '.'
000000000021112e         db  0x00 ; '.'
000000000021112f         db  0x00 ; '.'
                     pending_spaces.7443:
0000000000211130         db  0x00 ; '.'                                         ; DATA XREF=copy_with_unblock+57, copy_with_unblock+159, copy_with_unblock+208, copy_with_unblock+252, copy_with_unblock+340
0000000000211131         db  0x00 ; '.'
0000000000211132         db  0x00 ; '.'
0000000000211133         db  0x00 ; '.'
0000000000211134         db  0x00 ; '.'
0000000000211135         db  0x00 ; '.'
0000000000211136         db  0x00 ; '.'
0000000000211137         db  0x00 ; '.'
                     prev_nread.7186:
0000000000211138         db  0x00 ; '.'                                         ; DATA XREF=iread+86, iread+116, iread+165
0000000000211139         db  0x00 ; '.'
000000000021113a         db  0x00 ; '.'
000000000021113b         db  0x00 ; '.'
000000000021113c         db  0x00 ; '.'
000000000021113d         db  0x00 ; '.'
000000000021113e         db  0x00 ; '.'
000000000021113f         db  0x00 ; '.'
                     saved_char:
0000000000211140         db  0x00 ; '.'                                         ; DATA XREF=main+3851, main+3898, main+4794, main+6447, main+6475
                     char_is_saved:
0000000000211141         db  0x00 ; '.'                                         ; DATA XREF=main+3842, main+3862, main+3886, main+4754
0000000000211142         db  0x00 ; '.'
0000000000211143         db  0x00 ; '.'
0000000000211144         db  0x00 ; '.'
0000000000211145         db  0x00 ; '.'
0000000000211146         db  0x00 ; '.'
0000000000211147         db  0x00 ; '.'
0000000000211148         db  0x00 ; '.'
0000000000211149         db  0x00 ; '.'
000000000021114a         db  0x00 ; '.'
000000000021114b         db  0x00 ; '.'
000000000021114c         db  0x00 ; '.'
000000000021114d         db  0x00 ; '.'
000000000021114e         db  0x00 ; '.'
000000000021114f         db  0x00 ; '.'
0000000000211150         db  0x00 ; '.'
0000000000211151         db  0x00 ; '.'
0000000000211152         db  0x00 ; '.'
0000000000211153         db  0x00 ; '.'
0000000000211154         db  0x00 ; '.'
0000000000211155         db  0x00 ; '.'
0000000000211156         db  0x00 ; '.'
0000000000211157         db  0x00 ; '.'
0000000000211158         db  0x00 ; '.'
0000000000211159         db  0x00 ; '.'
000000000021115a         db  0x00 ; '.'
000000000021115b         db  0x00 ; '.'
000000000021115c         db  0x00 ; '.'
000000000021115d         db  0x00 ; '.'
000000000021115e         db  0x00 ; '.'
000000000021115f         db  0x00 ; '.'
                     trans_table:
0000000000211160         db  0x00 ; '.'                                         ; DATA XREF=main+370, main+1229, main+1300, main+1355, main+4314, main+4378
0000000000211161         db  0x00 ; '.'
0000000000211162         db  0x00 ; '.'
0000000000211163         db  0x00 ; '.'
0000000000211164         db  0x00 ; '.'
0000000000211165         db  0x00 ; '.'
0000000000211166         db  0x00 ; '.'
0000000000211167         db  0x00 ; '.'
0000000000211168         db  0x00 ; '.'
0000000000211169         db  0x00 ; '.'
000000000021116a         db  0x00 ; '.'
000000000021116b         db  0x00 ; '.'
000000000021116c         db  0x00 ; '.'
000000000021116d         db  0x00 ; '.'
000000000021116e         db  0x00 ; '.'
000000000021116f         db  0x00 ; '.'
0000000000211170         db  0x00 ; '.'
0000000000211171         db  0x00 ; '.'
0000000000211172         db  0x00 ; '.'
0000000000211173         db  0x00 ; '.'
0000000000211174         db  0x00 ; '.'
0000000000211175         db  0x00 ; '.'
0000000000211176         db  0x00 ; '.'
0000000000211177         db  0x00 ; '.'
0000000000211178         db  0x00 ; '.'
0000000000211179         db  0x00 ; '.'
000000000021117a         db  0x00 ; '.'
000000000021117b         db  0x00 ; '.'
000000000021117c         db  0x00 ; '.'
000000000021117d         db  0x00 ; '.'
000000000021117e         db  0x00 ; '.'
000000000021117f         db  0x00 ; '.'
0000000000211180         db  0x00 ; '.'
0000000000211181         db  0x00 ; '.'
0000000000211182         db  0x00 ; '.'
0000000000211183         db  0x00 ; '.'
0000000000211184         db  0x00 ; '.'
0000000000211185         db  0x00 ; '.'
0000000000211186         db  0x00 ; '.'
0000000000211187         db  0x00 ; '.'
0000000000211188         db  0x00 ; '.'
0000000000211189         db  0x00 ; '.'
000000000021118a         db  0x00 ; '.'
000000000021118b         db  0x00 ; '.'
000000000021118c         db  0x00 ; '.'
000000000021118d         db  0x00 ; '.'
000000000021118e         db  0x00 ; '.'
000000000021118f         db  0x00 ; '.'
0000000000211190         db  0x00 ; '.'
0000000000211191         db  0x00 ; '.'
0000000000211192         db  0x00 ; '.'
0000000000211193         db  0x00 ; '.'
0000000000211194         db  0x00 ; '.'
0000000000211195         db  0x00 ; '.'
0000000000211196         db  0x00 ; '.'
0000000000211197         db  0x00 ; '.'
0000000000211198         db  0x00 ; '.'
0000000000211199         db  0x00 ; '.'
000000000021119a         db  0x00 ; '.'
000000000021119b         db  0x00 ; '.'
000000000021119c         db  0x00 ; '.'
000000000021119d         db  0x00 ; '.'
000000000021119e         db  0x00 ; '.'
000000000021119f         db  0x00 ; '.'
00000000002111a0         db  0x00 ; '.'
00000000002111a1         db  0x00 ; '.'
00000000002111a2         db  0x00 ; '.'
00000000002111a3         db  0x00 ; '.'
00000000002111a4         db  0x00 ; '.'
00000000002111a5         db  0x00 ; '.'
00000000002111a6         db  0x00 ; '.'
00000000002111a7         db  0x00 ; '.'
00000000002111a8         db  0x00 ; '.'
00000000002111a9         db  0x00 ; '.'
00000000002111aa         db  0x00 ; '.'
00000000002111ab         db  0x00 ; '.'
00000000002111ac         db  0x00 ; '.'
00000000002111ad         db  0x00 ; '.'
00000000002111ae         db  0x00 ; '.'
00000000002111af         db  0x00 ; '.'
00000000002111b0         db  0x00 ; '.'
00000000002111b1         db  0x00 ; '.'
00000000002111b2         db  0x00 ; '.'
00000000002111b3         db  0x00 ; '.'
00000000002111b4         db  0x00 ; '.'
00000000002111b5         db  0x00 ; '.'
00000000002111b6         db  0x00 ; '.'
00000000002111b7         db  0x00 ; '.'
00000000002111b8         db  0x00 ; '.'
00000000002111b9         db  0x00 ; '.'
00000000002111ba         db  0x00 ; '.'
00000000002111bb         db  0x00 ; '.'
00000000002111bc         db  0x00 ; '.'
00000000002111bd         db  0x00 ; '.'
00000000002111be         db  0x00 ; '.'
00000000002111bf         db  0x00 ; '.'
00000000002111c0         db  0x00 ; '.'
00000000002111c1         db  0x00 ; '.'
00000000002111c2         db  0x00 ; '.'
00000000002111c3         db  0x00 ; '.'
00000000002111c4         db  0x00 ; '.'
00000000002111c5         db  0x00 ; '.'
00000000002111c6         db  0x00 ; '.'
00000000002111c7         db  0x00 ; '.'
00000000002111c8         db  0x00 ; '.'
00000000002111c9         db  0x00 ; '.'
00000000002111ca         db  0x00 ; '.'
00000000002111cb         db  0x00 ; '.'
00000000002111cc         db  0x00 ; '.'
00000000002111cd         db  0x00 ; '.'
00000000002111ce         db  0x00 ; '.'
00000000002111cf         db  0x00 ; '.'
00000000002111d0         db  0x00 ; '.'
00000000002111d1         db  0x00 ; '.'
00000000002111d2         db  0x00 ; '.'
00000000002111d3         db  0x00 ; '.'
00000000002111d4         db  0x00 ; '.'
00000000002111d5         db  0x00 ; '.'
00000000002111d6         db  0x00 ; '.'
00000000002111d7         db  0x00 ; '.'
00000000002111d8         db  0x00 ; '.'
00000000002111d9         db  0x00 ; '.'
00000000002111da         db  0x00 ; '.'
00000000002111db         db  0x00 ; '.'
00000000002111dc         db  0x00 ; '.'
00000000002111dd         db  0x00 ; '.'
00000000002111de         db  0x00 ; '.'
00000000002111df         db  0x00 ; '.'
00000000002111e0         db  0x00 ; '.'
00000000002111e1         db  0x00 ; '.'
00000000002111e2         db  0x00 ; '.'
00000000002111e3         db  0x00 ; '.'
00000000002111e4         db  0x00 ; '.'
00000000002111e5         db  0x00 ; '.'
00000000002111e6         db  0x00 ; '.'
00000000002111e7         db  0x00 ; '.'
00000000002111e8         db  0x00 ; '.'
00000000002111e9         db  0x00 ; '.'
00000000002111ea         db  0x00 ; '.'
00000000002111eb         db  0x00 ; '.'
00000000002111ec         db  0x00 ; '.'
00000000002111ed         db  0x00 ; '.'
00000000002111ee         db  0x00 ; '.'
00000000002111ef         db  0x00 ; '.'
00000000002111f0         db  0x00 ; '.'
00000000002111f1         db  0x00 ; '.'
00000000002111f2         db  0x00 ; '.'
00000000002111f3         db  0x00 ; '.'
00000000002111f4         db  0x00 ; '.'
00000000002111f5         db  0x00 ; '.'
00000000002111f6         db  0x00 ; '.'
00000000002111f7         db  0x00 ; '.'
00000000002111f8         db  0x00 ; '.'
00000000002111f9         db  0x00 ; '.'
00000000002111fa         db  0x00 ; '.'
00000000002111fb         db  0x00 ; '.'
00000000002111fc         db  0x00 ; '.'
00000000002111fd         db  0x00 ; '.'
00000000002111fe         db  0x00 ; '.'
00000000002111ff         db  0x00 ; '.'
0000000000211200         db  0x00 ; '.'
0000000000211201         db  0x00 ; '.'
0000000000211202         db  0x00 ; '.'
0000000000211203         db  0x00 ; '.'
0000000000211204         db  0x00 ; '.'
0000000000211205         db  0x00 ; '.'
0000000000211206         db  0x00 ; '.'
0000000000211207         db  0x00 ; '.'
0000000000211208         db  0x00 ; '.'
0000000000211209         db  0x00 ; '.'
000000000021120a         db  0x00 ; '.'
000000000021120b         db  0x00 ; '.'
000000000021120c         db  0x00 ; '.'
000000000021120d         db  0x00 ; '.'
000000000021120e         db  0x00 ; '.'
000000000021120f         db  0x00 ; '.'
0000000000211210         db  0x00 ; '.'
0000000000211211         db  0x00 ; '.'
0000000000211212         db  0x00 ; '.'
0000000000211213         db  0x00 ; '.'
0000000000211214         db  0x00 ; '.'
0000000000211215         db  0x00 ; '.'
0000000000211216         db  0x00 ; '.'
0000000000211217         db  0x00 ; '.'
0000000000211218         db  0x00 ; '.'
0000000000211219         db  0x00 ; '.'
000000000021121a         db  0x00 ; '.'
000000000021121b         db  0x00 ; '.'
000000000021121c         db  0x00 ; '.'
000000000021121d         db  0x00 ; '.'
000000000021121e         db  0x00 ; '.'
000000000021121f         db  0x00 ; '.'
0000000000211220         db  0x00 ; '.'
0000000000211221         db  0x00 ; '.'
0000000000211222         db  0x00 ; '.'
0000000000211223         db  0x00 ; '.'
0000000000211224         db  0x00 ; '.'
0000000000211225         db  0x00 ; '.'
0000000000211226         db  0x00 ; '.'
0000000000211227         db  0x00 ; '.'
0000000000211228         db  0x00 ; '.'
0000000000211229         db  0x00 ; '.'
000000000021122a         db  0x00 ; '.'
000000000021122b         db  0x00 ; '.'
000000000021122c         db  0x00 ; '.'
000000000021122d         db  0x00 ; '.'
000000000021122e         db  0x00 ; '.'
000000000021122f         db  0x00 ; '.'
0000000000211230         db  0x00 ; '.'
0000000000211231         db  0x00 ; '.'
0000000000211232         db  0x00 ; '.'
0000000000211233         db  0x00 ; '.'
0000000000211234         db  0x00 ; '.'
0000000000211235         db  0x00 ; '.'
0000000000211236         db  0x00 ; '.'
0000000000211237         db  0x00 ; '.'
0000000000211238         db  0x00 ; '.'
0000000000211239         db  0x00 ; '.'
000000000021123a         db  0x00 ; '.'
000000000021123b         db  0x00 ; '.'
000000000021123c         db  0x00 ; '.'
000000000021123d         db  0x00 ; '.'
000000000021123e         db  0x00 ; '.'
000000000021123f         db  0x00 ; '.'
0000000000211240         db  0x00 ; '.'
0000000000211241         db  0x00 ; '.'
0000000000211242         db  0x00 ; '.'
0000000000211243         db  0x00 ; '.'
0000000000211244         db  0x00 ; '.'
0000000000211245         db  0x00 ; '.'
0000000000211246         db  0x00 ; '.'
0000000000211247         db  0x00 ; '.'
0000000000211248         db  0x00 ; '.'
0000000000211249         db  0x00 ; '.'
000000000021124a         db  0x00 ; '.'
000000000021124b         db  0x00 ; '.'
000000000021124c         db  0x00 ; '.'
000000000021124d         db  0x00 ; '.'
000000000021124e         db  0x00 ; '.'
000000000021124f         db  0x00 ; '.'
0000000000211250         db  0x00 ; '.'
0000000000211251         db  0x00 ; '.'
0000000000211252         db  0x00 ; '.'
0000000000211253         db  0x00 ; '.'
0000000000211254         db  0x00 ; '.'
0000000000211255         db  0x00 ; '.'
0000000000211256         db  0x00 ; '.'
0000000000211257         db  0x00 ; '.'
0000000000211258         db  0x00 ; '.'
0000000000211259         db  0x00 ; '.'
000000000021125a         db  0x00 ; '.'
000000000021125b         db  0x00 ; '.'
000000000021125c         db  0x00 ; '.'
000000000021125d         db  0x00 ; '.'
000000000021125e         db  0x00 ; '.'
000000000021125f         db  0x00 ; '.'
                     iread_fnc:
0000000000211260         db  0x00 ; '.'                                         ; DATA XREF=main+980, main+2232, skip+259, skip+352
0000000000211261         db  0x00 ; '.'
0000000000211262         db  0x00 ; '.'
0000000000211263         db  0x00 ; '.'
0000000000211264         db  0x00 ; '.'
0000000000211265         db  0x00 ; '.'
0000000000211266         db  0x00 ; '.'
0000000000211267         db  0x00 ; '.'
                     o_nocache_eof:
0000000000211268         db  0x00 ; '.'                                         ; DATA XREF=main+1201, main+1207, main+4233, main+4713, main+4741, main+4747, invalidate_cache+160, iwrite.constprop.7+411
                     i_nocache_eof:
0000000000211269         db  0x00 ; '.'                                         ; DATA XREF=main+1141, main+1147, main+4206, main+4700, invalidate_cache+22
                     o_nocache:
000000000021126a         db  0x00 ; '.'                                         ; DATA XREF=main+1179, main+4224, main+4706, main+5068, iwrite.constprop.7+176
                     i_nocache:
000000000021126b         db  0x00 ; '.'                                         ; DATA XREF=main+1119, main+2302, main+4197, main+4693, main+5055
                     info_signal_count:
000000000021126c         db  0x00 ; '.'                                         ; DATA XREF=siginfo_handler, siginfo_handler+9, process_signals+42, process_signals+75, process_signals+88
000000000021126d         db  0x00 ; '.'
000000000021126e         db  0x00 ; '.'
000000000021126f         db  0x00 ; '.'
                     interrupt_signal:
0000000000211270         db  0x00 ; '.'                                         ; DATA XREF=interrupt_handler, process_signals+32, process_signals+69
0000000000211271         db  0x00 ; '.'
0000000000211272         db  0x00 ; '.'
0000000000211273         db  0x00 ; '.'
0000000000211274         db  0x00 ; '.'
0000000000211275         db  0x00 ; '.'
0000000000211276         db  0x00 ; '.'
0000000000211277         db  0x00 ; '.'
0000000000211278         db  0x00 ; '.'
0000000000211279         db  0x00 ; '.'
000000000021127a         db  0x00 ; '.'
000000000021127b         db  0x00 ; '.'
000000000021127c         db  0x00 ; '.'
000000000021127d         db  0x00 ; '.'
000000000021127e         db  0x00 ; '.'
000000000021127f         db  0x00 ; '.'
                     caught_signals:
0000000000211280         db  0x00 ; '.'                                         ; DATA XREF=main+54, main+111, main+128, main+136, main+305, main+5834, process_signals+52
0000000000211281         db  0x00 ; '.'
0000000000211282         db  0x00 ; '.'
0000000000211283         db  0x00 ; '.'
0000000000211284         db  0x00 ; '.'
0000000000211285         db  0x00 ; '.'
0000000000211286         db  0x00 ; '.'
0000000000211287         db  0x00 ; '.'
0000000000211288         db  0x00 ; '.'
0000000000211289         db  0x00 ; '.'
000000000021128a         db  0x00 ; '.'
000000000021128b         db  0x00 ; '.'
000000000021128c         db  0x00 ; '.'
000000000021128d         db  0x00 ; '.'
000000000021128e         db  0x00 ; '.'
000000000021128f         db  0x00 ; '.'
0000000000211290         db  0x00 ; '.'                                         ; DATA XREF=main+153
0000000000211291         db  0x00 ; '.'
0000000000211292         db  0x00 ; '.'
0000000000211293         db  0x00 ; '.'
0000000000211294         db  0x00 ; '.'
0000000000211295         db  0x00 ; '.'
0000000000211296         db  0x00 ; '.'
0000000000211297         db  0x00 ; '.'
0000000000211298         db  0x00 ; '.'
0000000000211299         db  0x00 ; '.'
000000000021129a         db  0x00 ; '.'
000000000021129b         db  0x00 ; '.'
000000000021129c         db  0x00 ; '.'
000000000021129d         db  0x00 ; '.'
000000000021129e         db  0x00 ; '.'
000000000021129f         db  0x00 ; '.'
00000000002112a0         db  0x00 ; '.'                                         ; DATA XREF=main+166
00000000002112a1         db  0x00 ; '.'
00000000002112a2         db  0x00 ; '.'
00000000002112a3         db  0x00 ; '.'
00000000002112a4         db  0x00 ; '.'
00000000002112a5         db  0x00 ; '.'
00000000002112a6         db  0x00 ; '.'
00000000002112a7         db  0x00 ; '.'
00000000002112a8         db  0x00 ; '.'
00000000002112a9         db  0x00 ; '.'
00000000002112aa         db  0x00 ; '.'
00000000002112ab         db  0x00 ; '.'
00000000002112ac         db  0x00 ; '.'
00000000002112ad         db  0x00 ; '.'
00000000002112ae         db  0x00 ; '.'
00000000002112af         db  0x00 ; '.'
00000000002112b0         db  0x00 ; '.'                                         ; DATA XREF=main+179
00000000002112b1         db  0x00 ; '.'
00000000002112b2         db  0x00 ; '.'
00000000002112b3         db  0x00 ; '.'
00000000002112b4         db  0x00 ; '.'
00000000002112b5         db  0x00 ; '.'
00000000002112b6         db  0x00 ; '.'
00000000002112b7         db  0x00 ; '.'
00000000002112b8         db  0x00 ; '.'
00000000002112b9         db  0x00 ; '.'
00000000002112ba         db  0x00 ; '.'
00000000002112bb         db  0x00 ; '.'
00000000002112bc         db  0x00 ; '.'
00000000002112bd         db  0x00 ; '.'
00000000002112be         db  0x00 ; '.'
00000000002112bf         db  0x00 ; '.'
00000000002112c0         db  0x00 ; '.'                                         ; DATA XREF=main+192
00000000002112c1         db  0x00 ; '.'
00000000002112c2         db  0x00 ; '.'
00000000002112c3         db  0x00 ; '.'
00000000002112c4         db  0x00 ; '.'
00000000002112c5         db  0x00 ; '.'
00000000002112c6         db  0x00 ; '.'
00000000002112c7         db  0x00 ; '.'
00000000002112c8         db  0x00 ; '.'
00000000002112c9         db  0x00 ; '.'
00000000002112ca         db  0x00 ; '.'
00000000002112cb         db  0x00 ; '.'
00000000002112cc         db  0x00 ; '.'
00000000002112cd         db  0x00 ; '.'
00000000002112ce         db  0x00 ; '.'
00000000002112cf         db  0x00 ; '.'
00000000002112d0         db  0x00 ; '.'                                         ; DATA XREF=main+208
00000000002112d1         db  0x00 ; '.'
00000000002112d2         db  0x00 ; '.'
00000000002112d3         db  0x00 ; '.'
00000000002112d4         db  0x00 ; '.'
00000000002112d5         db  0x00 ; '.'
00000000002112d6         db  0x00 ; '.'
00000000002112d7         db  0x00 ; '.'
00000000002112d8         db  0x00 ; '.'
00000000002112d9         db  0x00 ; '.'
00000000002112da         db  0x00 ; '.'
00000000002112db         db  0x00 ; '.'
00000000002112dc         db  0x00 ; '.'
00000000002112dd         db  0x00 ; '.'
00000000002112de         db  0x00 ; '.'
00000000002112df         db  0x00 ; '.'
00000000002112e0         db  0x00 ; '.'                                         ; DATA XREF=main+224
00000000002112e1         db  0x00 ; '.'
00000000002112e2         db  0x00 ; '.'
00000000002112e3         db  0x00 ; '.'
00000000002112e4         db  0x00 ; '.'
00000000002112e5         db  0x00 ; '.'
00000000002112e6         db  0x00 ; '.'
00000000002112e7         db  0x00 ; '.'
00000000002112e8         db  0x00 ; '.'
00000000002112e9         db  0x00 ; '.'
00000000002112ea         db  0x00 ; '.'
00000000002112eb         db  0x00 ; '.'
00000000002112ec         db  0x00 ; '.'
00000000002112ed         db  0x00 ; '.'
00000000002112ee         db  0x00 ; '.'
00000000002112ef         db  0x00 ; '.'
00000000002112f0         db  0x00 ; '.'                                         ; DATA XREF=main+240
00000000002112f1         db  0x00 ; '.'
00000000002112f2         db  0x00 ; '.'
00000000002112f3         db  0x00 ; '.'
00000000002112f4         db  0x00 ; '.'
00000000002112f5         db  0x00 ; '.'
00000000002112f6         db  0x00 ; '.'
00000000002112f7         db  0x00 ; '.'
00000000002112f8         db  0x00 ; '.'
00000000002112f9         db  0x00 ; '.'
00000000002112fa         db  0x00 ; '.'
00000000002112fb         db  0x00 ; '.'
00000000002112fc         db  0x00 ; '.'
00000000002112fd         db  0x00 ; '.'
00000000002112fe         db  0x00 ; '.'
00000000002112ff         db  0x00 ; '.'
                     col:
0000000000211300         db  0x00 ; '.'                                         ; DATA XREF=main+4969, main+5287, copy_with_block+95, copy_with_block+108, copy_with_block+139, sub_5bc0+93, copy_with_unblock+68, copy_with_unblock+120, copy_with_unblock+143
0000000000211301         db  0x00 ; '.'
0000000000211302         db  0x00 ; '.'
0000000000211303         db  0x00 ; '.'
0000000000211304         db  0x00 ; '.'
0000000000211305         db  0x00 ; '.'
0000000000211306         db  0x00 ; '.'
0000000000211307         db  0x00 ; '.'
                     oc:
0000000000211308         db  0x00 ; '.'                                         ; DATA XREF=main+3364, main+3410, main+4787, main+4822, main+4985, main+5241, main+5269, main+5280, main+5339, main+6078, write_output+48
0000000000211309         db  0x00 ; '.'
000000000021130a         db  0x00 ; '.'
000000000021130b         db  0x00 ; '.'
000000000021130c         db  0x00 ; '.'
000000000021130d         db  0x00 ; '.'
000000000021130e         db  0x00 ; '.'
000000000021130f         db  0x00 ; '.'
                     obuf:
0000000000211310         db  0x00 ; '.'                                         ; DATA XREF=main+1951, main+1975, main+2018, main+2423, main+3350, main+4674, main+4801, main+5234, main+5332, main+6046, alloc_obuf.part.5+90
0000000000211311         db  0x00 ; '.'
0000000000211312         db  0x00 ; '.'
0000000000211313         db  0x00 ; '.'
0000000000211314         db  0x00 ; '.'
0000000000211315         db  0x00 ; '.'
0000000000211316         db  0x00 ; '.'
0000000000211317         db  0x00 ; '.'
                     ibuf:
0000000000211318         db  0x00 ; '.'                                         ; DATA XREF=main+2066, main+2181, main+2386, main+2416, alloc_ibuf.part.4+90, alloc_obuf+21, alloc_obuf+31, j_alloc_obuf.part.5+14, skip+234, skip+248
0000000000211319         db  0x00 ; '.'
000000000021131a         db  0x00 ; '.'
000000000021131b         db  0x00 ; '.'
000000000021131c         db  0x00 ; '.'
000000000021131d         db  0x00 ; '.'
000000000021131e         db  0x00 ; '.'
000000000021131f         db  0x00 ; '.'
                     r_truncate:
0000000000211320         db  0x00 ; '.'                                         ; DATA XREF=print_stats.part.2+146, sub_5bc0+72
0000000000211321         db  0x00 ; '.'
0000000000211322         db  0x00 ; '.'
0000000000211323         db  0x00 ; '.'
0000000000211324         db  0x00 ; '.'
0000000000211325         db  0x00 ; '.'
0000000000211326         db  0x00 ; '.'
0000000000211327         db  0x00 ; '.'
                     warn_partial_read:
0000000000211328         db  0x00 ; '.'                                         ; DATA XREF=main+973, main+3092, main+3142, main+4452, iread+156, iread+238
                     input_offset_overflow:
0000000000211329         db  0x00 ; '.'                                         ; DATA XREF=main+1857, main+2295, main+4019, main+4475, skip+317, skip+581
000000000021132a         db  0x00 ; '.'
000000000021132b         db  0x00 ; '.'
000000000021132c         db  0x00 ; '.'
000000000021132d         db  0x00 ; '.'
000000000021132e         db  0x00 ; '.'
000000000021132f         db  0x00 ; '.'
                     input_offset:
0000000000211330         db  0x00 ; '.'                                         ; DATA XREF=main+1531, main+1804, main+1848, main+2270, main+2283, main+3993, main+4003, invalidate_cache+127, skip+295, skip+305, skip+529
0000000000211331         db  0x00 ; '.'
0000000000211332         db  0x00 ; '.'
0000000000211333         db  0x00 ; '.'
0000000000211334         db  0x00 ; '.'
0000000000211335         db  0x00 ; '.'
0000000000211336         db  0x00 ; '.'
0000000000211337         db  0x00 ; '.'
                     input_seek_errno:
0000000000211338         db  0x00 ; '.'                                         ; DATA XREF=main+1545, main+3605, main+3693
0000000000211339         db  0x00 ; '.'
000000000021133a         db  0x00 ; '.'
000000000021133b         db  0x00 ; '.'
                     input_seekable:
000000000021133c         db  0x00 ; '.'                                         ; DATA XREF=main+1513, main+3592, main+3686, invalidate_cache+119
000000000021133d         db  0x00 ; '.'
000000000021133e         db  0x00 ; '.'
000000000021133f         db  0x00 ; '.'
                     progress_len:
0000000000211340         db  0x00 ; '.'                                         ; DATA XREF=print_xfer_stats+408, print_xfer_stats+422, nl_error+106, nl_error+144, print_stats.part.2+10, print_stats.part.2+52
0000000000211341         db  0x00 ; '.'
0000000000211342         db  0x00 ; '.'
0000000000211343         db  0x00 ; '.'
0000000000211344         db  0x00 ; '.'
0000000000211345         db  0x00 ; '.'
0000000000211346         db  0x00 ; '.'
0000000000211347         db  0x00 ; '.'
                     next_time:
0000000000211348         db  0x00 ; '.'                                         ; DATA XREF=main+1756, main+2514, main+2535
0000000000211349         db  0x00 ; '.'
000000000021134a         db  0x00 ; '.'
000000000021134b         db  0x00 ; '.'
000000000021134c         db  0x00 ; '.'
000000000021134d         db  0x00 ; '.'
000000000021134e         db  0x00 ; '.'
000000000021134f         db  0x00 ; '.'
                     start_time:
0000000000211350         db  0x00 ; '.'                                         ; DATA XREF=main+1743, print_xfer_stats+128
0000000000211351         db  0x00 ; '.'
0000000000211352         db  0x00 ; '.'
0000000000211353         db  0x00 ; '.'
0000000000211354         db  0x00 ; '.'
0000000000211355         db  0x00 ; '.'
0000000000211356         db  0x00 ; '.'
0000000000211357         db  0x00 ; '.'
                     w_bytes:
0000000000211358         db  0x00 ; '.'                                         ; DATA XREF=main+4098, main+6058, print_xfer_stats+56, print_xfer_stats+87, print_xfer_stats+173, print_xfer_stats+325, print_xfer_stats+688, write_output+23
0000000000211359         db  0x00 ; '.'
000000000021135a         db  0x00 ; '.'
000000000021135b         db  0x00 ; '.'
000000000021135c         db  0x00 ; '.'
000000000021135d         db  0x00 ; '.'
000000000021135e         db  0x00 ; '.'
000000000021135f         db  0x00 ; '.'
                     r_full:
0000000000211360         db  0x00 ; '.'                                         ; DATA XREF=main+2132, main+3760, print_stats.part.2+76
0000000000211361         db  0x00 ; '.'
0000000000211362         db  0x00 ; '.'
0000000000211363         db  0x00 ; '.'
0000000000211364         db  0x00 ; '.'
0000000000211365         db  0x00 ; '.'
0000000000211366         db  0x00 ; '.'
0000000000211367         db  0x00 ; '.'
                     r_partial:
0000000000211368         db  0x00 ; '.'                                         ; DATA XREF=main+2141, main+2337, print_stats.part.2+92
0000000000211369         db  0x00 ; '.'
000000000021136a         db  0x00 ; '.'
000000000021136b         db  0x00 ; '.'
000000000021136c         db  0x00 ; '.'
000000000021136d         db  0x00 ; '.'
000000000021136e         db  0x00 ; '.'
000000000021136f         db  0x00 ; '.'
                     w_full:
0000000000211370         db  0x00 ; '.'                                         ; DATA XREF=main+5648, print_stats.part.2+85, write_output+40
0000000000211371         db  0x00 ; '.'
0000000000211372         db  0x00 ; '.'
0000000000211373         db  0x00 ; '.'
0000000000211374         db  0x00 ; '.'
0000000000211375         db  0x00 ; '.'
0000000000211376         db  0x00 ; '.'
0000000000211377         db  0x00 ; '.'
                     w_partial:
0000000000211378         db  0x00 ; '.'                                         ; DATA XREF=main+5190, main+6070, print_stats.part.2+62, write_output+135
0000000000211379         db  0x00 ; '.'
000000000021137a         db  0x00 ; '.'
000000000021137b         db  0x00 ; '.'
000000000021137c         db  0x00 ; '.'
000000000021137d         db  0x00 ; '.'
000000000021137e         db  0x00 ; '.'
000000000021137f         db  0x00 ; '.'
                     translation_needed:
0000000000211380         db  0x00 ; '.'                                         ; DATA XREF=main+1275, main+1338, main+1395, main+2439
0000000000211381         db  0x00 ; '.'
0000000000211382         db  0x00 ; '.'
0000000000211383         db  0x00 ; '.'
                     output_flags:
0000000000211384         db  0x00 ; '.'                                         ; DATA XREF=main+809, main+1217, main+1496, main+2871
                     byte_211385:
0000000000211385         db  0x00 ; '.'                                         ; DATA XREF=iwrite.constprop.7+16
0000000000211386         db  0x00 ; '.'
0000000000211387         db  0x00 ; '.'
                     input_flags:
0000000000211388         db  0x00 ; '.'                                         ; DATA XREF=main+785, main+803, main+825, main+992, main+1157, main+1423, main+2775
                     byte_211389:
0000000000211389         db  0x00 ; '.'                                         ; DATA XREF=iread+103
000000000021138a         db  0x00 ; '.'
000000000021138b         db  0x00 ; '.'
                     conversions_mask:
000000000021138c         db  0x00 ; '.'                                         ; DATA XREF=main+778, main+935, main+1557, main+2155, main+2331, main+2452, main+2694, main+2967, main+3448, main+3538, main+3827
                     byte_21138d:
000000000021138d         db  0x00 ; '.'                                         ; DATA XREF=main+1661, main+3711, alloc_obuf+12, skip+680
000000000021138e         db  0x00 ; '.'
000000000021138f         db  0x00 ; '.'
                     max_bytes:
0000000000211390         db  0x00 ; '.'                                         ; DATA XREF=main+909, main+1130, main+1190, main+2052, main+2125, main+5041
0000000000211391         db  0x00 ; '.'
0000000000211392         db  0x00 ; '.'
0000000000211393         db  0x00 ; '.'
0000000000211394         db  0x00 ; '.'
0000000000211395         db  0x00 ; '.'
0000000000211396         db  0x00 ; '.'
0000000000211397         db  0x00 ; '.'
                     final_op_was_seek:
0000000000211398         db  0x00 ; '.'                                         ; DATA XREF=main+4840, iwrite.constprop.7+82, iwrite.constprop.7+234
0000000000211399         db  0x00 ; '.'
000000000021139a         db  0x00 ; '.'
000000000021139b         db  0x00 ; '.'
000000000021139c         db  0x00 ; '.'
000000000021139d         db  0x00 ; '.'
000000000021139e         db  0x00 ; '.'
000000000021139f         db  0x00 ; '.'
                     seek_bytes:
00000000002113a0         db  0x00 ; '.'                                         ; DATA XREF=main+1699, main+1877, main+3130
00000000002113a1         db  0x00 ; '.'
00000000002113a2         db  0x00 ; '.'
00000000002113a3         db  0x00 ; '.'
00000000002113a4         db  0x00 ; '.'
00000000002113a5         db  0x00 ; '.'
00000000002113a6         db  0x00 ; '.'
00000000002113a7         db  0x00 ; '.'
                     seek_records:
00000000002113a8         db  0x00 ; '.'                                         ; DATA XREF=main+1590, main+1649, main+1870, main+2891, main+3123
00000000002113a9         db  0x00 ; '.'
00000000002113aa         db  0x00 ; '.'
00000000002113ab         db  0x00 ; '.'
00000000002113ac         db  0x00 ; '.'
00000000002113ad         db  0x00 ; '.'
00000000002113ae         db  0x00 ; '.'
00000000002113af         db  0x00 ; '.'
                     skip_bytes:
00000000002113b0         db  0x00 ; '.'                                         ; DATA XREF=main+1768, main+1792, main+1811, main+3044
00000000002113b1         db  0x00 ; '.'
00000000002113b2         db  0x00 ; '.'
00000000002113b3         db  0x00 ; '.'
00000000002113b4         db  0x00 ; '.'
00000000002113b5         db  0x00 ; '.'
00000000002113b6         db  0x00 ; '.'
00000000002113b7         db  0x00 ; '.'
                     skip_records:
00000000002113b8         db  0x00 ; '.'                                         ; DATA XREF=main+1736, main+2934, main+3037, main+3056
00000000002113b9         db  0x00 ; '.'
00000000002113ba         db  0x00 ; '.'
00000000002113bb         db  0x00 ; '.'
00000000002113bc         db  0x00 ; '.'
00000000002113bd         db  0x00 ; '.'
00000000002113be         db  0x00 ; '.'
00000000002113bf         db  0x00 ; '.'
                     conversion_blocksize:
00000000002113c0         db  0x00 ; '.'                                         ; DATA XREF=main+768, main+5262, main+6421, copy_with_block+121, sub_5bc0+9, copy_with_unblock+127
00000000002113c1         db  0x00 ; '.'
00000000002113c2         db  0x00 ; '.'
00000000002113c3         db  0x00 ; '.'
00000000002113c4         db  0x00 ; '.'
00000000002113c5         db  0x00 ; '.'
00000000002113c6         db  0x00 ; '.'
00000000002113c7         db  0x00 ; '.'
                     output_blocksize:
00000000002113c8         db  0x00 ; '.'                                         ; DATA XREF=main+754, main+1670, main+1898, main+1944, main+1968, main+2998, main+3012, main+3116, main+3357, main+4812, main+5227
00000000002113c9         db  0x00 ; '.'
00000000002113ca         db  0x00 ; '.'
00000000002113cb         db  0x00 ; '.'
00000000002113cc         db  0x00 ; '.'
00000000002113cd         db  0x00 ; '.'
00000000002113ce         db  0x00 ; '.'
00000000002113cf         db  0x00 ; '.'
                     input_blocksize:
00000000002113d0         db  0x00 ; '.'                                         ; DATA XREF=main+761, main+895, main+1778, main+2200, main+2315, main+2977, main+2987, main+3030, main+3426, main+3570, main+3736
00000000002113d1         db  0x00 ; '.'
00000000002113d2         db  0x00 ; '.'
00000000002113d3         db  0x00 ; '.'
00000000002113d4         db  0x00 ; '.'
00000000002113d5         db  0x00 ; '.'
00000000002113d6         db  0x00 ; '.'
00000000002113d7         db  0x00 ; '.'
                     page_size:
00000000002113d8         db  0x00 ; '.'                                         ; DATA XREF=main+460, main+5903, main+6343, main+7005, invalidate_cache+273, alloc_ibuf.part.4+9, alloc_obuf.part.5+9
00000000002113d9         db  0x00 ; '.'
00000000002113da         db  0x00 ; '.'
00000000002113db         db  0x00 ; '.'
00000000002113dc         db  0x00 ; '.'
00000000002113dd         db  0x00 ; '.'
00000000002113de         db  0x00 ; '.'
00000000002113df         db  0x00 ; '.'
                     output_file:
00000000002113e0         db  0x00 ; '.'                                         ; DATA XREF=main+1489, main+1905, main+2606, main+4114, main+4648, main+4911, main+5101, main+5721, main+5886, main+6258, main+6658
00000000002113e1         db  0x00 ; '.'
00000000002113e2         db  0x00 ; '.'
00000000002113e3         db  0x00 ; '.'
00000000002113e4         db  0x00 ; '.'
00000000002113e5         db  0x00 ; '.'
00000000002113e6         db  0x00 ; '.'
00000000002113e7         db  0x00 ; '.'
                     input_file:
00000000002113e8         db  0x00 ; '.'                                         ; DATA XREF=main+729, main+1416, main+1785, main+3174, main+3477, main+3623, main+4026, main+4537, main+5024, main+5572, main+7452
00000000002113e9         db  0x00 ; '.'
00000000002113ea         db  0x00 ; '.'
00000000002113eb         db  0x00 ; '.'
00000000002113ec         db  0x00 ; '.'
00000000002113ed         db  0x00 ; '.'
00000000002113ee         db  0x00 ; '.'
00000000002113ef         db  0x00 ; '.'
                     ignore_EPIPE:
00000000002113f0         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
00000000002113f1         db  0x00 ; '.'
00000000002113f2         db  0x00 ; '.'
00000000002113f3         db  0x00 ; '.'
00000000002113f4         db  0x00 ; '.'
00000000002113f5         db  0x00 ; '.'
00000000002113f6         db  0x00 ; '.'
00000000002113f7         db  0x00 ; '.'
                     file_name:
00000000002113f8         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
00000000002113f9         db  0x00 ; '.'
00000000002113fa         db  0x00 ; '.'
00000000002113fb         db  0x00 ; '.'
00000000002113fc         db  0x00 ; '.'
00000000002113fd         db  0x00 ; '.'
00000000002113fe         db  0x00 ; '.'
00000000002113ff         db  0x00 ; '.'
                     program_name:
0000000000211400         db  0x00 ; '.'                                         ; DATA XREF=usage+20, set_program_name+109
0000000000211401         db  0x00 ; '.'
0000000000211402         db  0x00 ; '.'
0000000000211403         db  0x00 ; '.'
0000000000211404         db  0x00 ; '.'
0000000000211405         db  0x00 ; '.'
0000000000211406         db  0x00 ; '.'
0000000000211407         db  0x00 ; '.'
0000000000211408         db  0x00 ; '.'
0000000000211409         db  0x00 ; '.'
000000000021140a         db  0x00 ; '.'
000000000021140b         db  0x00 ; '.'
000000000021140c         db  0x00 ; '.'
000000000021140d         db  0x00 ; '.'
000000000021140e         db  0x00 ; '.'
000000000021140f         db  0x00 ; '.'
0000000000211410         db  0x00 ; '.'
0000000000211411         db  0x00 ; '.'
0000000000211412         db  0x00 ; '.'
0000000000211413         db  0x00 ; '.'
0000000000211414         db  0x00 ; '.'
0000000000211415         db  0x00 ; '.'
0000000000211416         db  0x00 ; '.'
0000000000211417         db  0x00 ; '.'
0000000000211418         db  0x00 ; '.'
0000000000211419         db  0x00 ; '.'
000000000021141a         db  0x00 ; '.'
000000000021141b         db  0x00 ; '.'
000000000021141c         db  0x00 ; '.'
000000000021141d         db  0x00 ; '.'
000000000021141e         db  0x00 ; '.'
000000000021141f         db  0x00 ; '.'
                     slot0:
0000000000211420         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
0000000000211421         db  0x00 ; '.'
0000000000211422         db  0x00 ; '.'
0000000000211423         db  0x00 ; '.'
0000000000211424         db  0x00 ; '.'
0000000000211425         db  0x00 ; '.'
0000000000211426         db  0x00 ; '.'
0000000000211427         db  0x00 ; '.'
0000000000211428         db  0x00 ; '.'
0000000000211429         db  0x00 ; '.'
000000000021142a         db  0x00 ; '.'
000000000021142b         db  0x00 ; '.'
000000000021142c         db  0x00 ; '.'
000000000021142d         db  0x00 ; '.'
000000000021142e         db  0x00 ; '.'
000000000021142f         db  0x00 ; '.'
0000000000211430         db  0x00 ; '.'
0000000000211431         db  0x00 ; '.'
0000000000211432         db  0x00 ; '.'
0000000000211433         db  0x00 ; '.'
0000000000211434         db  0x00 ; '.'
0000000000211435         db  0x00 ; '.'
0000000000211436         db  0x00 ; '.'
0000000000211437         db  0x00 ; '.'
0000000000211438         db  0x00 ; '.'
0000000000211439         db  0x00 ; '.'
000000000021143a         db  0x00 ; '.'
000000000021143b         db  0x00 ; '.'
000000000021143c         db  0x00 ; '.'
000000000021143d         db  0x00 ; '.'
000000000021143e         db  0x00 ; '.'
000000000021143f         db  0x00 ; '.'
0000000000211440         db  0x00 ; '.'
0000000000211441         db  0x00 ; '.'
0000000000211442         db  0x00 ; '.'
0000000000211443         db  0x00 ; '.'
0000000000211444         db  0x00 ; '.'
0000000000211445         db  0x00 ; '.'
0000000000211446         db  0x00 ; '.'
0000000000211447         db  0x00 ; '.'
0000000000211448         db  0x00 ; '.'
0000000000211449         db  0x00 ; '.'
000000000021144a         db  0x00 ; '.'
000000000021144b         db  0x00 ; '.'
000000000021144c         db  0x00 ; '.'
000000000021144d         db  0x00 ; '.'
000000000021144e         db  0x00 ; '.'
000000000021144f         db  0x00 ; '.'
0000000000211450         db  0x00 ; '.'
0000000000211451         db  0x00 ; '.'
0000000000211452         db  0x00 ; '.'
0000000000211453         db  0x00 ; '.'
0000000000211454         db  0x00 ; '.'
0000000000211455         db  0x00 ; '.'
0000000000211456         db  0x00 ; '.'
0000000000211457         db  0x00 ; '.'
0000000000211458         db  0x00 ; '.'
0000000000211459         db  0x00 ; '.'
000000000021145a         db  0x00 ; '.'
000000000021145b         db  0x00 ; '.'
000000000021145c         db  0x00 ; '.'
000000000021145d         db  0x00 ; '.'
000000000021145e         db  0x00 ; '.'
000000000021145f         db  0x00 ; '.'
0000000000211460         db  0x00 ; '.'
0000000000211461         db  0x00 ; '.'
0000000000211462         db  0x00 ; '.'
0000000000211463         db  0x00 ; '.'
0000000000211464         db  0x00 ; '.'
0000000000211465         db  0x00 ; '.'
0000000000211466         db  0x00 ; '.'
0000000000211467         db  0x00 ; '.'
0000000000211468         db  0x00 ; '.'
0000000000211469         db  0x00 ; '.'
000000000021146a         db  0x00 ; '.'
000000000021146b         db  0x00 ; '.'
000000000021146c         db  0x00 ; '.'
000000000021146d         db  0x00 ; '.'
000000000021146e         db  0x00 ; '.'
000000000021146f         db  0x00 ; '.'
0000000000211470         db  0x00 ; '.'
0000000000211471         db  0x00 ; '.'
0000000000211472         db  0x00 ; '.'
0000000000211473         db  0x00 ; '.'
0000000000211474         db  0x00 ; '.'
0000000000211475         db  0x00 ; '.'
0000000000211476         db  0x00 ; '.'
0000000000211477         db  0x00 ; '.'
0000000000211478         db  0x00 ; '.'
0000000000211479         db  0x00 ; '.'
000000000021147a         db  0x00 ; '.'
000000000021147b         db  0x00 ; '.'
000000000021147c         db  0x00 ; '.'
000000000021147d         db  0x00 ; '.'
000000000021147e         db  0x00 ; '.'
000000000021147f         db  0x00 ; '.'
0000000000211480         db  0x00 ; '.'
0000000000211481         db  0x00 ; '.'
0000000000211482         db  0x00 ; '.'
0000000000211483         db  0x00 ; '.'
0000000000211484         db  0x00 ; '.'
0000000000211485         db  0x00 ; '.'
0000000000211486         db  0x00 ; '.'
0000000000211487         db  0x00 ; '.'
0000000000211488         db  0x00 ; '.'
0000000000211489         db  0x00 ; '.'
000000000021148a         db  0x00 ; '.'
000000000021148b         db  0x00 ; '.'
000000000021148c         db  0x00 ; '.'
000000000021148d         db  0x00 ; '.'
000000000021148e         db  0x00 ; '.'
000000000021148f         db  0x00 ; '.'
0000000000211490         db  0x00 ; '.'
0000000000211491         db  0x00 ; '.'
0000000000211492         db  0x00 ; '.'
0000000000211493         db  0x00 ; '.'
0000000000211494         db  0x00 ; '.'
0000000000211495         db  0x00 ; '.'
0000000000211496         db  0x00 ; '.'
0000000000211497         db  0x00 ; '.'
0000000000211498         db  0x00 ; '.'
0000000000211499         db  0x00 ; '.'
000000000021149a         db  0x00 ; '.'
000000000021149b         db  0x00 ; '.'
000000000021149c         db  0x00 ; '.'
000000000021149d         db  0x00 ; '.'
000000000021149e         db  0x00 ; '.'
000000000021149f         db  0x00 ; '.'
00000000002114a0         db  0x00 ; '.'
00000000002114a1         db  0x00 ; '.'
00000000002114a2         db  0x00 ; '.'
00000000002114a3         db  0x00 ; '.'
00000000002114a4         db  0x00 ; '.'
00000000002114a5         db  0x00 ; '.'
00000000002114a6         db  0x00 ; '.'
00000000002114a7         db  0x00 ; '.'
00000000002114a8         db  0x00 ; '.'
00000000002114a9         db  0x00 ; '.'
00000000002114aa         db  0x00 ; '.'
00000000002114ab         db  0x00 ; '.'
00000000002114ac         db  0x00 ; '.'
00000000002114ad         db  0x00 ; '.'
00000000002114ae         db  0x00 ; '.'
00000000002114af         db  0x00 ; '.'
00000000002114b0         db  0x00 ; '.'
00000000002114b1         db  0x00 ; '.'
00000000002114b2         db  0x00 ; '.'
00000000002114b3         db  0x00 ; '.'
00000000002114b4         db  0x00 ; '.'
00000000002114b5         db  0x00 ; '.'
00000000002114b6         db  0x00 ; '.'
00000000002114b7         db  0x00 ; '.'
00000000002114b8         db  0x00 ; '.'
00000000002114b9         db  0x00 ; '.'
00000000002114ba         db  0x00 ; '.'
00000000002114bb         db  0x00 ; '.'
00000000002114bc         db  0x00 ; '.'
00000000002114bd         db  0x00 ; '.'
00000000002114be         db  0x00 ; '.'
00000000002114bf         db  0x00 ; '.'
00000000002114c0         db  0x00 ; '.'
00000000002114c1         db  0x00 ; '.'
00000000002114c2         db  0x00 ; '.'
00000000002114c3         db  0x00 ; '.'
00000000002114c4         db  0x00 ; '.'
00000000002114c5         db  0x00 ; '.'
00000000002114c6         db  0x00 ; '.'
00000000002114c7         db  0x00 ; '.'
00000000002114c8         db  0x00 ; '.'
00000000002114c9         db  0x00 ; '.'
00000000002114ca         db  0x00 ; '.'
00000000002114cb         db  0x00 ; '.'
00000000002114cc         db  0x00 ; '.'
00000000002114cd         db  0x00 ; '.'
00000000002114ce         db  0x00 ; '.'
00000000002114cf         db  0x00 ; '.'
00000000002114d0         db  0x00 ; '.'
00000000002114d1         db  0x00 ; '.'
00000000002114d2         db  0x00 ; '.'
00000000002114d3         db  0x00 ; '.'
00000000002114d4         db  0x00 ; '.'
00000000002114d5         db  0x00 ; '.'
00000000002114d6         db  0x00 ; '.'
00000000002114d7         db  0x00 ; '.'
00000000002114d8         db  0x00 ; '.'
00000000002114d9         db  0x00 ; '.'
00000000002114da         db  0x00 ; '.'
00000000002114db         db  0x00 ; '.'
00000000002114dc         db  0x00 ; '.'
00000000002114dd         db  0x00 ; '.'
00000000002114de         db  0x00 ; '.'
00000000002114df         db  0x00 ; '.'
00000000002114e0         db  0x00 ; '.'
00000000002114e1         db  0x00 ; '.'
00000000002114e2         db  0x00 ; '.'
00000000002114e3         db  0x00 ; '.'
00000000002114e4         db  0x00 ; '.'
00000000002114e5         db  0x00 ; '.'
00000000002114e6         db  0x00 ; '.'
00000000002114e7         db  0x00 ; '.'
00000000002114e8         db  0x00 ; '.'
00000000002114e9         db  0x00 ; '.'
00000000002114ea         db  0x00 ; '.'
00000000002114eb         db  0x00 ; '.'
00000000002114ec         db  0x00 ; '.'
00000000002114ed         db  0x00 ; '.'
00000000002114ee         db  0x00 ; '.'
00000000002114ef         db  0x00 ; '.'
00000000002114f0         db  0x00 ; '.'
00000000002114f1         db  0x00 ; '.'
00000000002114f2         db  0x00 ; '.'
00000000002114f3         db  0x00 ; '.'
00000000002114f4         db  0x00 ; '.'
00000000002114f5         db  0x00 ; '.'
00000000002114f6         db  0x00 ; '.'
00000000002114f7         db  0x00 ; '.'
00000000002114f8         db  0x00 ; '.'
00000000002114f9         db  0x00 ; '.'
00000000002114fa         db  0x00 ; '.'
00000000002114fb         db  0x00 ; '.'
00000000002114fc         db  0x00 ; '.'
00000000002114fd         db  0x00 ; '.'
00000000002114fe         db  0x00 ; '.'
00000000002114ff         db  0x00 ; '.'
0000000000211500         db  0x00 ; '.'
0000000000211501         db  0x00 ; '.'
0000000000211502         db  0x00 ; '.'
0000000000211503         db  0x00 ; '.'
0000000000211504         db  0x00 ; '.'
0000000000211505         db  0x00 ; '.'
0000000000211506         db  0x00 ; '.'
0000000000211507         db  0x00 ; '.'
0000000000211508         db  0x00 ; '.'
0000000000211509         db  0x00 ; '.'
000000000021150a         db  0x00 ; '.'
000000000021150b         db  0x00 ; '.'
000000000021150c         db  0x00 ; '.'
000000000021150d         db  0x00 ; '.'
000000000021150e         db  0x00 ; '.'
000000000021150f         db  0x00 ; '.'
0000000000211510         db  0x00 ; '.'
0000000000211511         db  0x00 ; '.'
0000000000211512         db  0x00 ; '.'
0000000000211513         db  0x00 ; '.'
0000000000211514         db  0x00 ; '.'
0000000000211515         db  0x00 ; '.'
0000000000211516         db  0x00 ; '.'
0000000000211517         db  0x00 ; '.'
0000000000211518         db  0x00 ; '.'
0000000000211519         db  0x00 ; '.'
000000000021151a         db  0x00 ; '.'
000000000021151b         db  0x00 ; '.'
000000000021151c         db  0x00 ; '.'
000000000021151d         db  0x00 ; '.'
000000000021151e         db  0x00 ; '.'
000000000021151f         db  0x00 ; '.'
                     default_quoting_options:
0000000000211520         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
0000000000211521         db  0x00 ; '.'
0000000000211522         db  0x00 ; '.'
0000000000211523         db  0x00 ; '.'
0000000000211524         db  0x00 ; '.'
0000000000211525         db  0x00 ; '.'
0000000000211526         db  0x00 ; '.'
0000000000211527         db  0x00 ; '.'
0000000000211528         db  0x00 ; '.'
0000000000211529         db  0x00 ; '.'
000000000021152a         db  0x00 ; '.'
000000000021152b         db  0x00 ; '.'
000000000021152c         db  0x00 ; '.'
000000000021152d         db  0x00 ; '.'
000000000021152e         db  0x00 ; '.'
000000000021152f         db  0x00 ; '.'
0000000000211530         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
0000000000211531         db  0x00 ; '.'
0000000000211532         db  0x00 ; '.'
0000000000211533         db  0x00 ; '.'
0000000000211534         db  0x00 ; '.'
0000000000211535         db  0x00 ; '.'
0000000000211536         db  0x00 ; '.'
0000000000211537         db  0x00 ; '.'
0000000000211538         db  0x00 ; '.'
0000000000211539         db  0x00 ; '.'
000000000021153a         db  0x00 ; '.'
000000000021153b         db  0x00 ; '.'
000000000021153c         db  0x00 ; '.'
000000000021153d         db  0x00 ; '.'
000000000021153e         db  0x00 ; '.'
000000000021153f         db  0x00 ; '.'
0000000000211540         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
0000000000211541         db  0x00 ; '.'
0000000000211542         db  0x00 ; '.'
0000000000211543         db  0x00 ; '.'
0000000000211544         db  0x00 ; '.'
0000000000211545         db  0x00 ; '.'
0000000000211546         db  0x00 ; '.'
0000000000211547         db  0x00 ; '.'
0000000000211548         db  0x00 ; '.'
0000000000211549         db  0x00 ; '.'
000000000021154a         db  0x00 ; '.'
000000000021154b         db  0x00 ; '.'
000000000021154c         db  0x00 ; '.'
000000000021154d         db  0x00 ; '.'
000000000021154e         db  0x00 ; '.'
000000000021154f         db  0x00 ; '.'
                     qword_211550:
0000000000211550         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
0000000000211551         db  0x00 ; '.'
0000000000211552         db  0x00 ; '.'
0000000000211553         db  0x00 ; '.'
0000000000211554         db  0x00 ; '.'
0000000000211555         db  0x00 ; '.'
0000000000211556         db  0x00 ; '.'
0000000000211557         db  0x00 ; '.'
                     have_dupfd_cloexec.3326:
0000000000211558         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+94, rpl_fcntl+143, rpl_fcntl+438, rpl_fcntl+574
0000000000211559         db  0x00 ; '.'
000000000021155a         db  0x00 ; '.'
000000000021155b         db  0x00 ; '.'
000000000021155c         db  0x00 ; '.'
000000000021155d         db  0x00 ; '.'
000000000021155e         db  0x00 ; '.'
000000000021155f         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x211570; 0x211a50[ (1248 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x211570; 0x422fc0[ (2169424 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     __ctype_toupper_loc:
0000000000211570         extern function code                                   ; DATA XREF=__ctype_toupper_loc@GOT
                     getenv:
0000000000211578         extern function code                                   ; DATA XREF=getenv@GOT
                     sigprocmask:
0000000000211580         extern function code                                   ; DATA XREF=sigprocmask@GOT
                     __snprintf_chk:
0000000000211588         extern function code                                   ; DATA XREF=__snprintf_chk@GOT
                     raise:
0000000000211590         extern function code                                   ; DATA XREF=raise@GOT
                     free:
0000000000211598         extern function code                                   ; DATA XREF=free@GOT
                     abort:
00000000002115a0         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
00000000002115a8         extern function code                                   ; DATA XREF=__errno_location@GOT
                     fdatasync:
00000000002115b0         extern function code                                   ; DATA XREF=fdatasync@GOT
                     error_at_line:
00000000002115b8         extern function code                                   ; DATA XREF=error_at_line@GOT
                     strncmp:
00000000002115c0         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
00000000002115c8         extern function code
                     _exit:
00000000002115d0         extern function code                                   ; DATA XREF=_exit@GOT
                     __fpending:
00000000002115d8         extern function code                                   ; DATA XREF=__fpending@GOT
                     sigaction:
00000000002115e0         extern function code                                   ; DATA XREF=sigaction@GOT
                     localeconv:
00000000002115e8         extern function code                                   ; DATA XREF=localeconv@GOT
                     fcntl:
00000000002115f0         extern function code                                   ; DATA XREF=fcntl@GOT
                     clock_gettime:
00000000002115f8         extern function code                                   ; DATA XREF=clock_gettime@GOT
                     write:
0000000000211600         extern function code                                   ; DATA XREF=write@GOT
                     textdomain:
0000000000211608         extern function code                                   ; DATA XREF=textdomain@GOT
                     fclose:
0000000000211610         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
0000000000211618         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
0000000000211620         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
0000000000211628         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
0000000000211630         extern function code                                   ; DATA XREF=strlen@GOT
                     __stack_chk_fail:
0000000000211638         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
0000000000211640         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
0000000000211648         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     dup2:
0000000000211650         extern function code                                   ; DATA XREF=dup2@GOT
                     strchr:
0000000000211658         extern function code                                   ; DATA XREF=strchr@GOT
                     __overflow:
0000000000211660         extern function code                                   ; DATA XREF=__overflow@GOT
                     strrchr:
0000000000211668         extern function code                                   ; DATA XREF=strrchr@GOT
                     ftruncate:
0000000000211670         extern function code                                   ; DATA XREF=ftruncate@GOT
                     lseek:
0000000000211678         extern function code                                   ; DATA XREF=lseek@GOT
                     __assert_fail:
0000000000211680         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     __strtoul_internal:
0000000000211688         extern function code                                   ; DATA XREF=__strtoul_internal@GOT
                     memset:
0000000000211690         extern function code                                   ; DATA XREF=memset@GOT
                     ioctl:
0000000000211698         extern function code                                   ; DATA XREF=ioctl@GOT
                     close:
00000000002116a0         extern function code                                   ; DATA XREF=close@GOT
                     posix_fadvise:
00000000002116a8         extern function code                                   ; DATA XREF=posix_fadvise@GOT
                     read:
00000000002116b0         extern function code                                   ; DATA XREF=read@GOT
                     __libc_start_main:
00000000002116b8         extern function code
                     memcmp:
00000000002116c0         extern function code                                   ; DATA XREF=memcmp@GOT
                     fputs_unlocked:
00000000002116c8         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
00000000002116d0         extern function code                                   ; DATA XREF=calloc@GOT
                     __memcpy_chk:
00000000002116d8         extern function code                                   ; DATA XREF=__memcpy_chk@GOT
                     sigemptyset:
00000000002116e0         extern function code                                   ; DATA XREF=sigemptyset@GOT
                     __gmon_start__:
00000000002116e8         extern function code
                     memcpy:
00000000002116f0         extern function code                                   ; DATA XREF=memcpy@GOT
                     fileno:
00000000002116f8         extern function code                                   ; DATA XREF=fileno@GOT
                     malloc:
0000000000211700         extern function code                                   ; DATA XREF=malloc@GOT
                     fflush:
0000000000211708         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
0000000000211710         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     __fxstat:
0000000000211718         extern function code                                   ; DATA XREF=__fxstat@GOT
                     __freading:
0000000000211720         extern function code                                   ; DATA XREF=__freading@GOT
                     realloc:
0000000000211728         extern function code                                   ; DATA XREF=realloc@GOT
                     setlocale:
0000000000211730         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
0000000000211738         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     memmove:
0000000000211740         extern function code                                   ; DATA XREF=memmove@GOT
                     error:
0000000000211748         extern function code                                   ; DATA XREF=error@GOT
                     fsync:
0000000000211750         extern function code                                   ; DATA XREF=fsync@GOT
                     open:
0000000000211758         extern function code                                   ; DATA XREF=open@GOT
                     fseeko:
0000000000211760         extern function code                                   ; DATA XREF=fseeko@GOT
                     dcngettext:
0000000000211768         extern function code                                   ; DATA XREF=dcngettext@GOT
                     __cxa_atexit:
0000000000211770         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     getpagesize:
0000000000211778         extern function code                                   ; DATA XREF=getpagesize@GOT
                     sigismember:
0000000000211780         extern function code                                   ; DATA XREF=sigismember@GOT
                     exit:
0000000000211788         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
0000000000211790         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
0000000000211798         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
00000000002117a0         extern function code
                     mbsinit:
00000000002117a8         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
00000000002117b0         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
00000000002117b8         extern function code
                     sigaddset:
00000000002117c0         extern function code                                   ; DATA XREF=sigaddset@GOT
                     __ctype_tolower_loc:
00000000002117c8         extern function code                                   ; DATA XREF=__ctype_tolower_loc@GOT
                     __ctype_b_loc:
00000000002117d0         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     __sprintf_chk:
00000000002117d8         extern function code                                   ; DATA XREF=__sprintf_chk@GOT
                     __ctype_toupper_loc@@GLIBC_2.3:
00000000002117e0         extern function code
                     getenv@@GLIBC_2.2.5:
00000000002117e8         extern function code
                     sigprocmask@@GLIBC_2.2.5:
00000000002117f0         extern function code
                     __snprintf_chk@@GLIBC_2.3.4:
00000000002117f8         extern function code
                     raise@@GLIBC_2.2.5:
0000000000211800         extern function code
                     free@@GLIBC_2.2.5:
0000000000211808         extern function code
                     abort@@GLIBC_2.2.5:
0000000000211810         extern function code
                     __errno_location@@GLIBC_2.2.5:
0000000000211818         extern function code
                     fdatasync@@GLIBC_2.2.5:
0000000000211820         extern function code
                     error_at_line@@GLIBC_2.2.5:
0000000000211828         extern function code
                     strncmp@@GLIBC_2.2.5:
0000000000211830         extern function code
                     _ITM_deregisterTMCloneTable_211838:        // _ITM_deregisterTMCloneTable
0000000000211838         extern function code
                     _exit@@GLIBC_2.2.5:
0000000000211840         extern function code
                     __fpending@@GLIBC_2.2.5:
0000000000211848         extern function code
                     sigaction@@GLIBC_2.2.5:
0000000000211850         extern function code
                     localeconv@@GLIBC_2.2.5:
0000000000211858         extern function code
                     fcntl@@GLIBC_2.2.5:
0000000000211860         extern function code
                     clock_gettime@@GLIBC_2.17:
0000000000211868         extern function code
                     write@@GLIBC_2.2.5:
0000000000211870         extern function code
                     textdomain@@GLIBC_2.2.5:
0000000000211878         extern function code
                     fclose@@GLIBC_2.2.5:
0000000000211880         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
0000000000211888         extern function code
                     dcgettext@@GLIBC_2.2.5:
0000000000211890         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
0000000000211898         extern function code
                     strlen@@GLIBC_2.2.5:
00000000002118a0         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
00000000002118a8         extern function code
                     getopt_long@@GLIBC_2.2.5:
00000000002118b0         extern function code
                     mbrtowc@@GLIBC_2.2.5:
00000000002118b8         extern function code
                     dup2@@GLIBC_2.2.5:
00000000002118c0         extern function code
                     strchr@@GLIBC_2.2.5:
00000000002118c8         extern function code
                     __overflow@@GLIBC_2.2.5:
00000000002118d0         extern function code
                     strrchr@@GLIBC_2.2.5:
00000000002118d8         extern function code
                     ftruncate@@GLIBC_2.2.5:
00000000002118e0         extern function code
                     lseek@@GLIBC_2.2.5:
00000000002118e8         extern function code
                     __assert_fail@@GLIBC_2.2.5:
00000000002118f0         extern function code
                     __strtoul_internal@@GLIBC_2.2.5:
00000000002118f8         extern function code
                     memset@@GLIBC_2.2.5:
0000000000211900         extern function code
                     ioctl@@GLIBC_2.2.5:
0000000000211908         extern function code
                     close@@GLIBC_2.2.5:
0000000000211910         extern function code
                     posix_fadvise@@GLIBC_2.2.5:
0000000000211918         extern function code
                     read@@GLIBC_2.2.5:
0000000000211920         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
0000000000211928         extern function code
                     memcmp@@GLIBC_2.2.5:
0000000000211930         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
0000000000211938         extern function code
                     calloc@@GLIBC_2.2.5:
0000000000211940         extern function code
                     __memcpy_chk@@GLIBC_2.3.4:
0000000000211948         extern function code
                     sigemptyset@@GLIBC_2.2.5:
0000000000211950         extern function code
                     __gmon_start___211958:        // __gmon_start__
0000000000211958         extern function code
                     memcpy@@GLIBC_2.14:
0000000000211960         extern function code
                     fileno@@GLIBC_2.2.5:
0000000000211968         extern function code
                     malloc@@GLIBC_2.2.5:
0000000000211970         extern function code
                     fflush@@GLIBC_2.2.5:
0000000000211978         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
0000000000211980         extern function code
                     __fxstat@@GLIBC_2.2.5:
0000000000211988         extern function code
                     __freading@@GLIBC_2.2.5:
0000000000211990         extern function code
                     realloc@@GLIBC_2.2.5:
0000000000211998         extern function code
                     setlocale@@GLIBC_2.2.5:
00000000002119a0         extern function code
                     __printf_chk@@GLIBC_2.3.4:
00000000002119a8         extern function code
                     memmove@@GLIBC_2.2.5:
00000000002119b0         extern function code
                     error@@GLIBC_2.2.5:
00000000002119b8         extern function code
                     fsync@@GLIBC_2.2.5:
00000000002119c0         extern function code
                     open@@GLIBC_2.2.5:
00000000002119c8         extern function code
                     fseeko@@GLIBC_2.2.5:
00000000002119d0         extern function code
                     dcngettext@@GLIBC_2.2.5:
00000000002119d8         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
00000000002119e0         extern function code
                     getpagesize@@GLIBC_2.2.5:
00000000002119e8         extern function code
                     sigismember@@GLIBC_2.2.5:
00000000002119f0         extern function code
                     exit@@GLIBC_2.2.5:
00000000002119f8         extern function code
                     fwrite@@GLIBC_2.2.5:
0000000000211a00         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
0000000000211a08         extern function code
                     _ITM_registerTMCloneTable_211a10:        // _ITM_registerTMCloneTable
0000000000211a10         extern function code
                     mbsinit@@GLIBC_2.2.5:
0000000000211a18         extern function code
                     iswprint@@GLIBC_2.2.5:
0000000000211a20         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
0000000000211a28         extern function code
                     sigaddset@@GLIBC_2.2.5:
0000000000211a30         extern function code
                     __ctype_tolower_loc@@GLIBC_2.3:
0000000000211a38         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
0000000000211a40         extern function code
                     __sprintf_chk@@GLIBC_2.3.4:
0000000000211a48         extern function code
