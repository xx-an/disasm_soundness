
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/csplit
        UUID: 8F197181-4A02-7D98-1234-B063995C2FA9
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0x1aa00[ (109056 bytes)
        ; File offset : [0; 109056[ (109056 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0x90 ; '.'
0000000000000019         db  0x2f ; '/'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0x90 ; '.'
0000000000000029         db  0x64 ; 'd'
000000000000002a         db  0x08 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0x00 ; '.'
00000000000000d1         db  0xaa ; '.'
00000000000000d2         db  0x01 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0x00 ; '.'
00000000000000d9         db  0xaa ; '.'
00000000000000da         db  0x01 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0xb0 ; '.'
00000000000000f1         db  0xb9 ; '.'
00000000000000f2         db  0x01 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0xb0 ; '.'
00000000000000f9         db  0xb9 ; '.'
00000000000000fa         db  0x21 ; '!'
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0xb0 ; '.'                                         ; DATA XREF=main+1088, quotearg_free+87, rpl_fflush+18, build_trtable+736, build_trtable+2820, build_charclass.isra.29+219, build_charclass.isra.29+299, build_charclass.isra.29+540, build_charclass.isra.29+612, build_charclass.isra.29+748, build_charclass.isra.29+806
0000000000000101         db  0xb9 ; '.'
0000000000000102         db  0x21 ; '!'
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0xf0 ; '.'                                         ; DATA XREF=main+20, main+2940, build_trtable+18, build_trtable+1065
0000000000000109         db  0x06 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0xd8 ; '.'
0000000000000111         db  0x09 ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0x78 ; 'x'                                         ; DATA XREF=parse_expression+10, sub_12b20+156, re_compile_internal+10, re_compile_internal+947
0000000000000129         db  0xbb ; '.'
000000000000012a         db  0x01 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0x78 ; 'x'
0000000000000131         db  0xbb ; '.'
0000000000000132         db  0x21 ; '!'
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0x78 ; 'x'
0000000000000139         db  0xbb ; '.'
000000000000013a         db  0x21 ; '!'
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'                                         ; DATA XREF=re_compile_fastmap_iter.isra.30+18, re_compile_fastmap_iter.isra.30+1172
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0xa0 ; '.'
0000000000000199         db  0x7e ; '~'
000000000000019a         db  0x01 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0xa0 ; '.'
00000000000001a1         db  0x7e ; '~'
00000000000001a2         db  0x01 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0xa0 ; '.'
00000000000001a9         db  0x7e ; '~'
00000000000001aa         db  0x01 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0xec ; '.'
00000000000001b1         db  0x05 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0xec ; '.'
00000000000001b9         db  0x05 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1079
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1141
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1110
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=xstrtoumax+573, build_trtable+2601, build_trtable+2707, peek_token+1008, peek_token+1092, peek_token+1254
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0xb0 ; '.'
0000000000000209         db  0xb9 ; '.'
000000000000020a         db  0x01 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0xb0 ; '.'
0000000000000211         db  0xb9 ; '.'
0000000000000212         db  0x21 ; '!'
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0xb0 ; '.'
0000000000000219         db  0xb9 ; '.'
000000000000021a         db  0x21 ; '!'
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x50 ; 'P'
0000000000000221         db  0x06 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x50 ; 'P'
0000000000000229         db  0x06 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0            ; DATA XREF=re_search_internal+24, re_search_internal+2964


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'                                         ; DATA XREF=find_line+124
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0x8f ; '.'
0000000000000285         db  0x19 ; '.'
0000000000000286         db  0x71 ; 'q'
0000000000000287         db  0x81 ; '.'
0000000000000288         db  0x4a ; 'J'
0000000000000289         db  0x02 ; '.'
000000000000028a         db  0x7d ; '}'
000000000000028b         db  0x98 ; '.'
000000000000028c         db  0x12 ; '.'
000000000000028d         db  0x34 ; '4'
000000000000028e         db  0xb0 ; '.'
000000000000028f         db  0x63 ; 'c'
0000000000000290         db  0x99 ; '.'
0000000000000291         db  0x5c ; '\'
0000000000000292         db  0x2f ; '/'
0000000000000293         db  0xa9 ; '.'
0000000000000294         db  0xc2 ; '.'
0000000000000295         db  0x43 ; 'C'
0000000000000296         db  0x58 ; 'X'
0000000000000297         db  0x32 ; '2'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2dc[ (68 bytes)
        ; File offset : [664; 732[ (68 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x51 ; 'Q'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x41 ; 'A'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0x20 ; ' '
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x51 ; 'Q'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x52 ; 'R'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x57 ; 'W'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x96 ; '.'
00000000000002c5         db  0xa0 ; '.'
00000000000002c6         db  0x89 ; '.'                                         ; DATA XREF=main+1159
00000000000002c7         db  0x97 ; '.'
00000000000002c8         db  0xce ; '.'
00000000000002c9         db  0x2c ; ','
00000000000002ca         db  0x63 ; 'c'
00000000000002cb         db  0x72 ; 'r'
00000000000002cc         db  0xe4 ; '.'
00000000000002cd         db  0x62 ; 'b'
00000000000002ce         db  0x41 ; 'A'
00000000000002cf         db  0xf5 ; '.'
00000000000002d0         db  0x39 ; '9'
00000000000002d1         db  0xf2 ; '.'
00000000000002d2         db  0x8b ; '.'
00000000000002d3         db  0x1c ; '.'
00000000000002d4         db  0x32 ; '2'
00000000000002d5         db  0xc4 ; '.'
00000000000002d6         db  0xf7 ; '.'
00000000000002d7         db  0x12 ; '.'
00000000000002d8         db  0xb3 ; '.'
00000000000002d9         db  0xa2 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0x00 ; '.'
00000000000002dd         db  0x00 ; '.'
00000000000002de         db  0x00 ; '.'
00000000000002df         db  0x00 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0xb38[ (2136 bytes)
        ; File offset : [736; 2872[ (2136 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0x6f ; 'o'
00000000000002f9         db  0x02 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'                                         ; DATA XREF=sub_13150+7
0000000000000310         db  0x7d ; '}'
0000000000000311         db  0x00 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0xf9 ; '.'
0000000000000329         db  0x01 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0xb8 ; '.'
0000000000000341         db  0x01 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x23 ; '#'
0000000000000359         db  0x03 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0xc1 ; '.'
0000000000000371         db  0x00 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x12 ; '.'
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0x44 ; 'D'
0000000000000389         db  0x01 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x9a ; '.'
00000000000003a1         db  0x00 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x12 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0x47 ; 'G'
00000000000003b9         db  0x00 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x12 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'                                         ; DATA XREF=create_token_tree.isra.16+136
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x87 ; '.'
00000000000003d1         db  0x03 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x20 ; ' '
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0xc7 ; '.'                                         ; DATA XREF=xstrtoimax+363, xstrtoumax+420
00000000000003e9         db  0x00 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'                                         ; DATA XREF=duplicate_node+58, duplicate_node+69, duplicate_node+113, duplicate_node_closure+214, duplicate_node_closure+428, calc_eclosure_iter+605, re_acquire_state_context+346, check_node_accept+118, check_halt_state_context.isra.20+111, build_trtable+211, calc_first+67
0000000000000400         db  0x12 ; '.'                                         ; DATA XREF=xstrtoimax+397, xstrtoimax+1614, xstrtoumax+437, xstrtoumax+806, xstrtoumax+878, rpl_fcntl+288, build_trtable+894, build_trtable+2048, sub_13290+1354
0000000000000401         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+272
0000000000000402         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+280, peek_token+736, peek_token+784, peek_token+1266, peek_token+1402
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+81, rpl_fcntl+123, rpl_fcntl+264
0000000000000407         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+256
0000000000000408         db  0x00 ; '.'
0000000000000409         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+336
000000000000040a         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+350
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x38 ; '8'
0000000000000419         db  0x02 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x22 ; '"'
0000000000000431         db  0x02 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'                                         ; DATA XREF=re_search_internal+4162
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0xa6 ; '.'
0000000000000449         db  0x02 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0xc6 ; '.'
0000000000000461         db  0x02 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'                                         ; DATA XREF=re_search_internal+5446
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x9f ; '.'
0000000000000479         db  0x01 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0x28 ; '('
0000000000000491         db  0x01 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0x98 ; '.'
00000000000004a9         db  0x01 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0xc2 ; '.'
00000000000004c1         db  0x02 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0x5e ; '^'
00000000000004d9         db  0x00 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0x03 ; '.'
00000000000004f1         db  0x01 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x21 ; '!'
0000000000000509         db  0x01 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0x89 ; '.'                                         ; DATA XREF=keep_new_line.isra.2+96, keep_new_line.isra.2+179
0000000000000521         db  0x00 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x08 ; '.'
0000000000000539         db  0x02 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x30 ; '0'
0000000000000551         db  0x00 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'                                         ; DATA XREF=pop_fail_stack.isra.25+138
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x61 ; 'a'
0000000000000569         db  0x01 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0x43 ; 'C'
0000000000000581         db  0x02 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x56 ; 'V'
0000000000000599         db  0x00 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'                                         ; DATA XREF=sub_14bd0+32
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'                                         ; DATA XREF=sub_152b0+182
00000000000005b0         db  0x8b ; '.'                                         ; DATA XREF=sub_152b0+120
00000000000005b1         db  0x01 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'                                         ; DATA XREF=sub_152b0+151
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0xec ; '.'
00000000000005c9         db  0x00 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0x01 ; '.'
00000000000005e1         db  0x03 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x3d ; '='
00000000000005f9         db  0x01 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x99 ; '.'
0000000000000611         db  0x01 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0x85 ; '.'
0000000000000629         db  0x01 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0xcd ; '.'
0000000000000641         db  0x00 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0x55 ; 'U'
0000000000000659         db  0x01 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0xe8 ; '.'
0000000000000671         db  0x02 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x5a ; 'Z'
0000000000000689         db  0x01 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0x2a ; '*'
00000000000006a1         db  0x01 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x14 ; '.'
00000000000006b9         db  0x03 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x12 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0x1a ; '.'
00000000000006d1         db  0x01 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0xe1 ; '.'
00000000000006e9         db  0x02 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x76 ; 'v'
0000000000000701         db  0x00 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x31 ; '1'
0000000000000719         db  0x01 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0xa3 ; '.'
0000000000000731         db  0x03 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x20 ; ' '
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x91 ; '.'
0000000000000749         db  0x01 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x14 ; '.'
0000000000000761         db  0x02 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0xfa ; '.'
0000000000000779         db  0x00 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0xb1 ; '.'
0000000000000791         db  0x01 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x68 ; 'h'
00000000000007a9         db  0x00 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0x0b ; '.'
00000000000007c1         db  0x00 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0xc6 ; '.'
00000000000007d9         db  0x01 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0xe7 ; '.'
00000000000007f1         db  0x01 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'                                         ; DATA XREF=peek_token+816, peek_token+1670
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0xd1 ; '.'
0000000000000809         db  0x02 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0xaa ; '.'
0000000000000821         db  0x00 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0x68 ; 'h'
0000000000000839         db  0x02 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x26 ; '&'
0000000000000851         db  0x00 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x12 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0x19 ; '.'
0000000000000869         db  0x00 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0xb2 ; '.'
0000000000000881         db  0x00 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0xba ; '.'
0000000000000899         db  0x02 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x12 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0x70 ; 'p'
00000000000008b1         db  0x00 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0x6a ; 'j'
00000000000008c9         db  0x02 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0xfa ; '.'
00000000000008e1         db  0x02 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x12 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x00 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x00 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x00 ; '.'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x00 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0x41 ; 'A'
00000000000008f9         db  0x00 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x12 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x00 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0x00 ; '.'
0000000000000901         db  0x00 ; '.'
0000000000000902         db  0x00 ; '.'
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x00 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0x38 ; '8'
0000000000000911         db  0x00 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x12 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x00 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0x00 ; '.'
0000000000000919         db  0x00 ; '.'
000000000000091a         db  0x00 ; '.'
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x00 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0xb8 ; '.'
0000000000000929         db  0x00 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x12 ; '.'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x00 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0x00 ; '.'
0000000000000931         db  0x00 ; '.'
0000000000000932         db  0x00 ; '.'
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x00 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0x43 ; 'C'
0000000000000941         db  0x03 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x12 ; '.'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x00 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0x00 ; '.'
0000000000000949         db  0x00 ; '.'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x00 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0x2c ; ','
0000000000000959         db  0x02 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x12 ; '.'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x00 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0x00 ; '.'
0000000000000961         db  0x00 ; '.'
0000000000000962         db  0x00 ; '.'
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x00 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0xc8 ; '.'
0000000000000971         db  0x00 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x12 ; '.'
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x00 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x00 ; '.'
0000000000000979         db  0x00 ; '.'
000000000000097a         db  0x00 ; '.'
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x00 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0x1b ; '.'
0000000000000989         db  0x02 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x12 ; '.'
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x00 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0x00 ; '.'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x00 ; '.'
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x00 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0x66 ; 'f'
00000000000009a1         db  0x01 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x12 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x00 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0x00 ; '.'
00000000000009a9         db  0x00 ; '.'
00000000000009aa         db  0x00 ; '.'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x00 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'
00000000000009b8         db  0xb2 ; '.'
00000000000009b9         db  0x03 ; '.'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x00 ; '.'
00000000000009bc         db  0x20 ; ' '
00000000000009bd         db  0x00 ; '.'
00000000000009be         db  0x00 ; '.'
00000000000009bf         db  0x00 ; '.'
00000000000009c0         db  0x00 ; '.'
00000000000009c1         db  0x00 ; '.'
00000000000009c2         db  0x00 ; '.'
00000000000009c3         db  0x00 ; '.'
00000000000009c4         db  0x00 ; '.'
00000000000009c5         db  0x00 ; '.'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x00 ; '.'
00000000000009c8         db  0x00 ; '.'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x00 ; '.'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x00 ; '.'
00000000000009cd         db  0x00 ; '.'
00000000000009ce         db  0x00 ; '.'
00000000000009cf         db  0x00 ; '.'
00000000000009d0         db  0xbe ; '.'
00000000000009d1         db  0x01 ; '.'
00000000000009d2         db  0x00 ; '.'
00000000000009d3         db  0x00 ; '.'
00000000000009d4         db  0x12 ; '.'
00000000000009d5         db  0x00 ; '.'
00000000000009d6         db  0x00 ; '.'
00000000000009d7         db  0x00 ; '.'
00000000000009d8         db  0x00 ; '.'
00000000000009d9         db  0x00 ; '.'
00000000000009da         db  0x00 ; '.'
00000000000009db         db  0x00 ; '.'
00000000000009dc         db  0x00 ; '.'
00000000000009dd         db  0x00 ; '.'
00000000000009de         db  0x00 ; '.'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x00 ; '.'
00000000000009e1         db  0x00 ; '.'
00000000000009e2         db  0x00 ; '.'
00000000000009e3         db  0x00 ; '.'
00000000000009e4         db  0x00 ; '.'
00000000000009e5         db  0x00 ; '.'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x00 ; '.'
00000000000009e8         db  0xa1 ; '.'
00000000000009e9         db  0x00 ; '.'
00000000000009ea         db  0x00 ; '.'
00000000000009eb         db  0x00 ; '.'
00000000000009ec         db  0x12 ; '.'
00000000000009ed         db  0x00 ; '.'
00000000000009ee         db  0x00 ; '.'
00000000000009ef         db  0x00 ; '.'
00000000000009f0         db  0x00 ; '.'
00000000000009f1         db  0x00 ; '.'
00000000000009f2         db  0x00 ; '.'
00000000000009f3         db  0x00 ; '.'
00000000000009f4         db  0x00 ; '.'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x00 ; '.'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x00 ; '.'
00000000000009f9         db  0x00 ; '.'
00000000000009fa         db  0x00 ; '.'
00000000000009fb         db  0x00 ; '.'
00000000000009fc         db  0x00 ; '.'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x00 ; '.'
00000000000009ff         db  0x00 ; '.'
0000000000000a00         db  0x97 ; '.'
0000000000000a01         db  0x02 ; '.'
0000000000000a02         db  0x00 ; '.'
0000000000000a03         db  0x00 ; '.'
0000000000000a04         db  0x22 ; '"'
0000000000000a05         db  0x00 ; '.'
0000000000000a06         db  0x00 ; '.'
0000000000000a07         db  0x00 ; '.'
0000000000000a08         db  0x00 ; '.'
0000000000000a09         db  0x00 ; '.'
0000000000000a0a         db  0x00 ; '.'
0000000000000a0b         db  0x00 ; '.'
0000000000000a0c         db  0x00 ; '.'
0000000000000a0d         db  0x00 ; '.'
0000000000000a0e         db  0x00 ; '.'
0000000000000a0f         db  0x00 ; '.'
0000000000000a10         db  0x00 ; '.'
0000000000000a11         db  0x00 ; '.'
0000000000000a12         db  0x00 ; '.'
0000000000000a13         db  0x00 ; '.'
0000000000000a14         db  0x00 ; '.'
0000000000000a15         db  0x00 ; '.'
0000000000000a16         db  0x00 ; '.'
0000000000000a17         db  0x00 ; '.'
0000000000000a18         db  0x74 ; 't'
0000000000000a19         db  0x01 ; '.'
0000000000000a1a         db  0x00 ; '.'
0000000000000a1b         db  0x00 ; '.'
0000000000000a1c         db  0x12 ; '.'
0000000000000a1d         db  0x00 ; '.'
0000000000000a1e         db  0x00 ; '.'
0000000000000a1f         db  0x00 ; '.'
0000000000000a20         db  0x00 ; '.'
0000000000000a21         db  0x00 ; '.'
0000000000000a22         db  0x00 ; '.'
0000000000000a23         db  0x00 ; '.'
0000000000000a24         db  0x00 ; '.'
0000000000000a25         db  0x00 ; '.'
0000000000000a26         db  0x00 ; '.'
0000000000000a27         db  0x00 ; '.'
0000000000000a28         db  0x00 ; '.'
0000000000000a29         db  0x00 ; '.'
0000000000000a2a         db  0x00 ; '.'
0000000000000a2b         db  0x00 ; '.'
0000000000000a2c         db  0x00 ; '.'
0000000000000a2d         db  0x00 ; '.'
0000000000000a2e         db  0x00 ; '.'
0000000000000a2f         db  0x00 ; '.'
0000000000000a30         db  0x83 ; '.'
0000000000000a31         db  0x02 ; '.'
0000000000000a32         db  0x00 ; '.'
0000000000000a33         db  0x00 ; '.'
0000000000000a34         db  0x12 ; '.'
0000000000000a35         db  0x00 ; '.'
0000000000000a36         db  0x00 ; '.'
0000000000000a37         db  0x00 ; '.'
0000000000000a38         db  0x00 ; '.'
0000000000000a39         db  0x00 ; '.'
0000000000000a3a         db  0x00 ; '.'
0000000000000a3b         db  0x00 ; '.'
0000000000000a3c         db  0x00 ; '.'
0000000000000a3d         db  0x00 ; '.'
0000000000000a3e         db  0x00 ; '.'
0000000000000a3f         db  0x00 ; '.'
0000000000000a40         db  0x00 ; '.'
0000000000000a41         db  0x00 ; '.'
0000000000000a42         db  0x00 ; '.'
0000000000000a43         db  0x00 ; '.'
0000000000000a44         db  0x00 ; '.'
0000000000000a45         db  0x00 ; '.'
0000000000000a46         db  0x00 ; '.'
0000000000000a47         db  0x00 ; '.'
0000000000000a48         db  0xd2 ; '.'
0000000000000a49         db  0x01 ; '.'
0000000000000a4a         db  0x00 ; '.'
0000000000000a4b         db  0x00 ; '.'
0000000000000a4c         db  0x12 ; '.'
0000000000000a4d         db  0x00 ; '.'
0000000000000a4e         db  0x00 ; '.'
0000000000000a4f         db  0x00 ; '.'
0000000000000a50         db  0x00 ; '.'
0000000000000a51         db  0x00 ; '.'
0000000000000a52         db  0x00 ; '.'
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x00 ; '.'
0000000000000a55         db  0x00 ; '.'
0000000000000a56         db  0x00 ; '.'
0000000000000a57         db  0x00 ; '.'
0000000000000a58         db  0x00 ; '.'
0000000000000a59         db  0x00 ; '.'
0000000000000a5a         db  0x00 ; '.'
0000000000000a5b         db  0x00 ; '.'
0000000000000a5c         db  0x00 ; '.'
0000000000000a5d         db  0x00 ; '.'
0000000000000a5e         db  0x00 ; '.'
0000000000000a5f         db  0x00 ; '.'
0000000000000a60         db  0xac ; '.'
0000000000000a61         db  0x02 ; '.'
0000000000000a62         db  0x00 ; '.'
0000000000000a63         db  0x00 ; '.'
0000000000000a64         db  0x12 ; '.'
0000000000000a65         db  0x00 ; '.'
0000000000000a66         db  0x00 ; '.'
0000000000000a67         db  0x00 ; '.'
0000000000000a68         db  0x00 ; '.'
0000000000000a69         db  0x00 ; '.'
0000000000000a6a         db  0x00 ; '.'
0000000000000a6b         db  0x00 ; '.'
0000000000000a6c         db  0x00 ; '.'
0000000000000a6d         db  0x00 ; '.'
0000000000000a6e         db  0x00 ; '.'
0000000000000a6f         db  0x00 ; '.'
0000000000000a70         db  0x00 ; '.'
0000000000000a71         db  0x00 ; '.'
0000000000000a72         db  0x00 ; '.'
0000000000000a73         db  0x00 ; '.'
0000000000000a74         db  0x00 ; '.'
0000000000000a75         db  0x00 ; '.'
0000000000000a76         db  0x00 ; '.'
0000000000000a77         db  0x00 ; '.'
0000000000000a78         db  0x7e ; '~'
0000000000000a79         db  0x01 ; '.'
0000000000000a7a         db  0x00 ; '.'
0000000000000a7b         db  0x00 ; '.'
0000000000000a7c         db  0x11 ; '.'
0000000000000a7d         db  0x00 ; '.'
0000000000000a7e         db  0x19 ; '.'
0000000000000a7f         db  0x00 ; '.'
0000000000000a80         db  0xa8 ; '.'
0000000000000a81         db  0xc0 ; '.'
0000000000000a82         db  0x21 ; '!'
0000000000000a83         db  0x00 ; '.'
0000000000000a84         db  0x00 ; '.'
0000000000000a85         db  0x00 ; '.'
0000000000000a86         db  0x00 ; '.'
0000000000000a87         db  0x00 ; '.'
0000000000000a88         db  0x08 ; '.'
0000000000000a89         db  0x00 ; '.'
0000000000000a8a         db  0x00 ; '.'
0000000000000a8b         db  0x00 ; '.'
0000000000000a8c         db  0x00 ; '.'
0000000000000a8d         db  0x00 ; '.'
0000000000000a8e         db  0x00 ; '.'
0000000000000a8f         db  0x00 ; '.'
0000000000000a90         db  0x28 ; '('
0000000000000a91         db  0x03 ; '.'
0000000000000a92         db  0x00 ; '.'
0000000000000a93         db  0x00 ; '.'
0000000000000a94         db  0x11 ; '.'
0000000000000a95         db  0x00 ; '.'
0000000000000a96         db  0x19 ; '.'
0000000000000a97         db  0x00 ; '.'
0000000000000a98         db  0xa0 ; '.'
0000000000000a99         db  0xc0 ; '.'
0000000000000a9a         db  0x21 ; '!'
0000000000000a9b         db  0x00 ; '.'
0000000000000a9c         db  0x00 ; '.'
0000000000000a9d         db  0x00 ; '.'
0000000000000a9e         db  0x00 ; '.'
0000000000000a9f         db  0x00 ; '.'
0000000000000aa0         db  0x08 ; '.'
0000000000000aa1         db  0x00 ; '.'
0000000000000aa2         db  0x00 ; '.'
0000000000000aa3         db  0x00 ; '.'
0000000000000aa4         db  0x00 ; '.'
0000000000000aa5         db  0x00 ; '.'
0000000000000aa6         db  0x00 ; '.'
0000000000000aa7         db  0x00 ; '.'
0000000000000aa8         db  0xd4 ; '.'
0000000000000aa9         db  0x00 ; '.'
0000000000000aaa         db  0x00 ; '.'
0000000000000aab         db  0x00 ; '.'
0000000000000aac         db  0x21 ; '!'
0000000000000aad         db  0x00 ; '.'
0000000000000aae         db  0x19 ; '.'
0000000000000aaf         db  0x00 ; '.'
0000000000000ab0         db  0xc0 ; '.'
0000000000000ab1         db  0xc0 ; '.'
0000000000000ab2         db  0x21 ; '!'
0000000000000ab3         db  0x00 ; '.'
0000000000000ab4         db  0x00 ; '.'
0000000000000ab5         db  0x00 ; '.'
0000000000000ab6         db  0x00 ; '.'
0000000000000ab7         db  0x00 ; '.'
0000000000000ab8         db  0x08 ; '.'
0000000000000ab9         db  0x00 ; '.'
0000000000000aba         db  0x00 ; '.'
0000000000000abb         db  0x00 ; '.'
0000000000000abc         db  0x00 ; '.'
0000000000000abd         db  0x00 ; '.'
0000000000000abe         db  0x00 ; '.'
0000000000000abf         db  0x00 ; '.'
0000000000000ac0         db  0x33 ; '3'
0000000000000ac1         db  0x03 ; '.'
0000000000000ac2         db  0x00 ; '.'
0000000000000ac3         db  0x00 ; '.'
0000000000000ac4         db  0x11 ; '.'
0000000000000ac5         db  0x00 ; '.'
0000000000000ac6         db  0x19 ; '.'
0000000000000ac7         db  0x00 ; '.'
0000000000000ac8         db  0xc0 ; '.'
0000000000000ac9         db  0xc0 ; '.'
0000000000000aca         db  0x21 ; '!'
0000000000000acb         db  0x00 ; '.'
0000000000000acc         db  0x00 ; '.'
0000000000000acd         db  0x00 ; '.'
0000000000000ace         db  0x00 ; '.'
0000000000000acf         db  0x00 ; '.'
0000000000000ad0         db  0x08 ; '.'
0000000000000ad1         db  0x00 ; '.'
0000000000000ad2         db  0x00 ; '.'
0000000000000ad3         db  0x00 ; '.'
0000000000000ad4         db  0x00 ; '.'
0000000000000ad5         db  0x00 ; '.'
0000000000000ad6         db  0x00 ; '.'
0000000000000ad7         db  0x00 ; '.'
0000000000000ad8         db  0x4a ; 'J'
0000000000000ad9         db  0x02 ; '.'
0000000000000ada         db  0x00 ; '.'
0000000000000adb         db  0x00 ; '.'
0000000000000adc         db  0x21 ; '!'
0000000000000add         db  0x00 ; '.'
0000000000000ade         db  0x19 ; '.'
0000000000000adf         db  0x00 ; '.'
0000000000000ae0         db  0xa0 ; '.'
0000000000000ae1         db  0xc0 ; '.'
0000000000000ae2         db  0x21 ; '!'
0000000000000ae3         db  0x00 ; '.'
0000000000000ae4         db  0x00 ; '.'
0000000000000ae5         db  0x00 ; '.'
0000000000000ae6         db  0x00 ; '.'
0000000000000ae7         db  0x00 ; '.'
0000000000000ae8         db  0x08 ; '.'
0000000000000ae9         db  0x00 ; '.'
0000000000000aea         db  0x00 ; '.'
0000000000000aeb         db  0x00 ; '.'
0000000000000aec         db  0x00 ; '.'
0000000000000aed         db  0x00 ; '.'
0000000000000aee         db  0x00 ; '.'
0000000000000aef         db  0x00 ; '.'
0000000000000af0         db  0xf2 ; '.'
0000000000000af1         db  0x01 ; '.'
0000000000000af2         db  0x00 ; '.'
0000000000000af3         db  0x00 ; '.'
0000000000000af4         db  0x11 ; '.'
0000000000000af5         db  0x00 ; '.'
0000000000000af6         db  0x19 ; '.'
0000000000000af7         db  0x00 ; '.'
0000000000000af8         db  0xe0 ; '.'
0000000000000af9         db  0xc0 ; '.'
0000000000000afa         db  0x21 ; '!'
0000000000000afb         db  0x00 ; '.'
0000000000000afc         db  0x00 ; '.'
0000000000000afd         db  0x00 ; '.'
0000000000000afe         db  0x00 ; '.'
0000000000000aff         db  0x00 ; '.'
0000000000000b00         db  0x08 ; '.'
0000000000000b01         db  0x00 ; '.'
0000000000000b02         db  0x00 ; '.'
0000000000000b03         db  0x00 ; '.'
0000000000000b04         db  0x00 ; '.'
0000000000000b05         db  0x00 ; '.'
0000000000000b06         db  0x00 ; '.'
0000000000000b07         db  0x00 ; '.'
0000000000000b08         db  0x4f ; 'O'
0000000000000b09         db  0x00 ; '.'
0000000000000b0a         db  0x00 ; '.'
0000000000000b0b         db  0x00 ; '.'
0000000000000b0c         db  0x11 ; '.'
0000000000000b0d         db  0x00 ; '.'
0000000000000b0e         db  0x19 ; '.'
0000000000000b0f         db  0x00 ; '.'
0000000000000b10         db  0xb0 ; '.'
0000000000000b11         db  0xc0 ; '.'
0000000000000b12         db  0x21 ; '!'
0000000000000b13         db  0x00 ; '.'
0000000000000b14         db  0x00 ; '.'
0000000000000b15         db  0x00 ; '.'
0000000000000b16         db  0x00 ; '.'
0000000000000b17         db  0x00 ; '.'
0000000000000b18         db  0x04 ; '.'
0000000000000b19         db  0x00 ; '.'
0000000000000b1a         db  0x00 ; '.'
0000000000000b1b         db  0x00 ; '.'
0000000000000b1c         db  0x00 ; '.'
0000000000000b1d         db  0x00 ; '.'
0000000000000b1e         db  0x00 ; '.'
0000000000000b1f         db  0x00 ; '.'
0000000000000b20         db  0xe0 ; '.'
0000000000000b21         db  0x01 ; '.'
0000000000000b22         db  0x00 ; '.'
0000000000000b23         db  0x00 ; '.'
0000000000000b24         db  0x11 ; '.'
0000000000000b25         db  0x00 ; '.'
0000000000000b26         db  0x19 ; '.'
0000000000000b27         db  0x00 ; '.'
0000000000000b28         db  0xb8 ; '.'
0000000000000b29         db  0xc0 ; '.'
0000000000000b2a         db  0x21 ; '!'
0000000000000b2b         db  0x00 ; '.'
0000000000000b2c         db  0x00 ; '.'
0000000000000b2d         db  0x00 ; '.'
0000000000000b2e         db  0x00 ; '.'
0000000000000b2f         db  0x00 ; '.'
0000000000000b30         db  0x08 ; '.'
0000000000000b31         db  0x00 ; '.'
0000000000000b32         db  0x00 ; '.'
0000000000000b33         db  0x00 ; '.'
0000000000000b34         db  0x00 ; '.'
0000000000000b35         db  0x00 ; '.'
0000000000000b36         db  0x00 ; '.'
0000000000000b37         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0xb38; 0xf04[ (972 bytes)
        ; File offset : [2872; 3844[ (972 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000b38         db  0x00 ; '.'
0000000000000b39         db  0x6c ; 'l'
0000000000000b3a         db  0x69 ; 'i'
0000000000000b3b         db  0x62 ; 'b'
0000000000000b3c         db  0x63 ; 'c'
0000000000000b3d         db  0x2e ; '.'
0000000000000b3e         db  0x73 ; 's'
0000000000000b3f         db  0x6f ; 'o'
0000000000000b40         db  0x2e ; '.'
0000000000000b41         db  0x36 ; '6'
0000000000000b42         db  0x00 ; '.'
0000000000000b43         db  0x66 ; 'f'
0000000000000b44         db  0x66 ; 'f'
0000000000000b45         db  0x6c ; 'l'
0000000000000b46         db  0x75 ; 'u'
0000000000000b47         db  0x73 ; 's'
0000000000000b48         db  0x68 ; 'h'
0000000000000b49         db  0x00 ; '.'
0000000000000b4a         db  0x73 ; 's'
0000000000000b4b         db  0x74 ; 't'
0000000000000b4c         db  0x72 ; 'r'
0000000000000b4d         db  0x63 ; 'c'
0000000000000b4e         db  0x70 ; 'p'
0000000000000b4f         db  0x79 ; 'y'
0000000000000b50         db  0x00 ; '.'
0000000000000b51         db  0x5f ; '_'
0000000000000b52         db  0x5f ; '_'
0000000000000b53         db  0x70 ; 'p'
0000000000000b54         db  0x72 ; 'r'
0000000000000b55         db  0x69 ; 'i'
0000000000000b56         db  0x6e ; 'n'
0000000000000b57         db  0x74 ; 't'
0000000000000b58         db  0x66 ; 'f'
0000000000000b59         db  0x5f ; '_'
0000000000000b5a         db  0x63 ; 'c'
0000000000000b5b         db  0x68 ; 'h'
0000000000000b5c         db  0x6b ; 'k'
0000000000000b5d         db  0x00 ; '.'
0000000000000b5e         db  0x73 ; 's'
0000000000000b5f         db  0x65 ; 'e'
0000000000000b60         db  0x74 ; 't'
0000000000000b61         db  0x6c ; 'l'
0000000000000b62         db  0x6f ; 'o'
0000000000000b63         db  0x63 ; 'c'
0000000000000b64         db  0x61 ; 'a'
0000000000000b65         db  0x6c ; 'l'
0000000000000b66         db  0x65 ; 'e'
0000000000000b67         db  0x00 ; '.'
0000000000000b68         db  0x6d ; 'm'
0000000000000b69         db  0x62 ; 'b'
0000000000000b6a         db  0x72 ; 'r'
0000000000000b6b         db  0x74 ; 't'
0000000000000b6c         db  0x6f ; 'o'
0000000000000b6d         db  0x77 ; 'w'
0000000000000b6e         db  0x63 ; 'c'
0000000000000b6f         db  0x00 ; '.'
0000000000000b70         db  0x74 ; 't'
0000000000000b71         db  0x6f ; 'o'
0000000000000b72         db  0x77 ; 'w'
0000000000000b73         db  0x6c ; 'l'
0000000000000b74         db  0x6f ; 'o'
0000000000000b75         db  0x77 ; 'w'
0000000000000b76         db  0x65 ; 'e'
0000000000000b77         db  0x72 ; 'r'
0000000000000b78         db  0x00 ; '.'
0000000000000b79         db  0x66 ; 'f'
0000000000000b7a         db  0x6f ; 'o'
0000000000000b7b         db  0x70 ; 'p'
0000000000000b7c         db  0x65 ; 'e'
0000000000000b7d         db  0x6e ; 'n'
0000000000000b7e         db  0x00 ; '.'
0000000000000b7f         db  0x73 ; 's'
0000000000000b80         db  0x74 ; 't'
0000000000000b81         db  0x72 ; 'r'
0000000000000b82         db  0x6e ; 'n'
0000000000000b83         db  0x63 ; 'c'
0000000000000b84         db  0x6d ; 'm'
0000000000000b85         db  0x70 ; 'p'
0000000000000b86         db  0x00 ; '.'
0000000000000b87         db  0x6f ; 'o'
0000000000000b88         db  0x70 ; 'p'
0000000000000b89         db  0x74 ; 't'
0000000000000b8a         db  0x69 ; 'i'
0000000000000b8b         db  0x6e ; 'n'
0000000000000b8c         db  0x64 ; 'd'
0000000000000b8d         db  0x00 ; '.'
0000000000000b8e         db  0x73 ; 's'
0000000000000b8f         db  0x74 ; 't'
0000000000000b90         db  0x72 ; 'r'
0000000000000b91         db  0x72 ; 'r'
0000000000000b92         db  0x63 ; 'c'
0000000000000b93         db  0x68 ; 'h'
0000000000000b94         db  0x72 ; 'r'
0000000000000b95         db  0x00 ; '.'
0000000000000b96         db  0x64 ; 'd'
0000000000000b97         db  0x63 ; 'c'
0000000000000b98         db  0x67 ; 'g'
0000000000000b99         db  0x65 ; 'e'
0000000000000b9a         db  0x74 ; 't'
0000000000000b9b         db  0x74 ; 't'
0000000000000b9c         db  0x65 ; 'e'
0000000000000b9d         db  0x78 ; 'x'
0000000000000b9e         db  0x74 ; 't'
0000000000000b9f         db  0x00 ; '.'
0000000000000ba0         db  0x77 ; 'w'
0000000000000ba1         db  0x63 ; 'c'
0000000000000ba2         db  0x72 ; 'r'
0000000000000ba3         db  0x74 ; 't'
0000000000000ba4         db  0x6f ; 'o'
0000000000000ba5         db  0x6d ; 'm'
0000000000000ba6         db  0x62 ; 'b'
0000000000000ba7         db  0x00 ; '.'
0000000000000ba8         db  0x65 ; 'e'
0000000000000ba9         db  0x72 ; 'r'
0000000000000baa         db  0x72 ; 'r'
0000000000000bab         db  0x6f ; 'o'
0000000000000bac         db  0x72 ; 'r'
0000000000000bad         db  0x00 ; '.'
0000000000000bae         db  0x73 ; 's'
0000000000000baf         db  0x69 ; 'i'
0000000000000bb0         db  0x67 ; 'g'
0000000000000bb1         db  0x6e ; 'n'
0000000000000bb2         db  0x61 ; 'a'
0000000000000bb3         db  0x6c ; 'l'
0000000000000bb4         db  0x00 ; '.'
0000000000000bb5         db  0x73 ; 's'
0000000000000bb6         db  0x69 ; 'i'
0000000000000bb7         db  0x67 ; 'g'
0000000000000bb8         db  0x70 ; 'p'
0000000000000bb9         db  0x72 ; 'r'
0000000000000bba         db  0x6f ; 'o'
0000000000000bbb         db  0x63 ; 'c'
0000000000000bbc         db  0x6d ; 'm'
0000000000000bbd         db  0x61 ; 'a'
0000000000000bbe         db  0x73 ; 's'
0000000000000bbf         db  0x6b ; 'k'
0000000000000bc0         db  0x00 ; '.'
0000000000000bc1         db  0x5f ; '_'
0000000000000bc2         db  0x5f ; '_'
0000000000000bc3         db  0x73 ; 's'
0000000000000bc4         db  0x74 ; 't'
0000000000000bc5         db  0x61 ; 'a'
0000000000000bc6         db  0x63 ; 'c'
0000000000000bc7         db  0x6b ; 'k'
0000000000000bc8         db  0x5f ; '_'
0000000000000bc9         db  0x63 ; 'c'
0000000000000bca         db  0x68 ; 'h'
0000000000000bcb         db  0x6b ; 'k'
0000000000000bcc         db  0x5f ; '_'
0000000000000bcd         db  0x66 ; 'f'
0000000000000bce         db  0x61 ; 'a'
0000000000000bcf         db  0x69 ; 'i'
0000000000000bd0         db  0x6c ; 'l'
0000000000000bd1         db  0x00 ; '.'
0000000000000bd2         db  0x75 ; 'u'
0000000000000bd3         db  0x6e ; 'n'
0000000000000bd4         db  0x6c ; 'l'
0000000000000bd5         db  0x69 ; 'i'
0000000000000bd6         db  0x6e ; 'n'
0000000000000bd7         db  0x6b ; 'k'
0000000000000bd8         db  0x00 ; '.'
0000000000000bd9         db  0x69 ; 'i'
0000000000000bda         db  0x73 ; 's'
0000000000000bdb         db  0x77 ; 'w'
0000000000000bdc         db  0x70 ; 'p'
0000000000000bdd         db  0x72 ; 'r'
0000000000000bde         db  0x69 ; 'i'
0000000000000bdf         db  0x6e ; 'n'
0000000000000be0         db  0x74 ; 't'
0000000000000be1         db  0x00 ; '.'
0000000000000be2         db  0x72 ; 'r'
0000000000000be3         db  0x65 ; 'e'
0000000000000be4         db  0x61 ; 'a'
0000000000000be5         db  0x6c ; 'l'
0000000000000be6         db  0x6c ; 'l'
0000000000000be7         db  0x6f ; 'o'
0000000000000be8         db  0x63 ; 'c'
0000000000000be9         db  0x00 ; '.'
0000000000000bea         db  0x62 ; 'b'
0000000000000beb         db  0x74 ; 't'
0000000000000bec         db  0x6f ; 'o'
0000000000000bed         db  0x77 ; 'w'
0000000000000bee         db  0x63 ; 'c'
0000000000000bef         db  0x00 ; '.'
0000000000000bf0         db  0x74 ; 't'
0000000000000bf1         db  0x6f ; 'o'
0000000000000bf2         db  0x77 ; 'w'
0000000000000bf3         db  0x75 ; 'u'
0000000000000bf4         db  0x70 ; 'p'
0000000000000bf5         db  0x70 ; 'p'
0000000000000bf6         db  0x65 ; 'e'
0000000000000bf7         db  0x72 ; 'r'
0000000000000bf8         db  0x00 ; '.'
0000000000000bf9         db  0x61 ; 'a'
0000000000000bfa         db  0x62 ; 'b'
0000000000000bfb         db  0x6f ; 'o'
0000000000000bfc         db  0x72 ; 'r'
0000000000000bfd         db  0x74 ; 't'
0000000000000bfe         db  0x00 ; '.'
0000000000000bff         db  0x5f ; '_'
                     aExit:
0000000000000c00         db         "exit", 0
0000000000000c05         db  0x6d ; 'm'
0000000000000c06         db  0x65 ; 'e'
0000000000000c07         db  0x6d ; 'm'
0000000000000c08         db  0x63 ; 'c'
0000000000000c09         db  0x68 ; 'h'
0000000000000c0a         db  0x72 ; 'r'
0000000000000c0b         db  0x00 ; '.'
0000000000000c0c         db  0x70 ; 'p'
0000000000000c0d         db  0x72 ; 'r'
0000000000000c0e         db  0x6f ; 'o'
0000000000000c0f         db  0x67 ; 'g'
0000000000000c10         db  0x72 ; 'r'
0000000000000c11         db  0x61 ; 'a'
0000000000000c12         db  0x6d ; 'm'
0000000000000c13         db  0x5f ; '_'
0000000000000c14         db  0x69 ; 'i'
0000000000000c15         db  0x6e ; 'n'
0000000000000c16         db  0x76 ; 'v'
0000000000000c17         db  0x6f ; 'o'
0000000000000c18         db  0x63 ; 'c'
0000000000000c19         db  0x61 ; 'a'
0000000000000c1a         db  0x74 ; 't'
0000000000000c1b         db  0x69 ; 'i'
0000000000000c1c         db  0x6f ; 'o'
0000000000000c1d         db  0x6e ; 'n'
0000000000000c1e         db  0x5f ; '_'
0000000000000c1f         db  0x6e ; 'n'
0000000000000c20         db  0x61 ; 'a'
0000000000000c21         db  0x6d ; 'm'
0000000000000c22         db  0x65 ; 'e'
0000000000000c23         db  0x00 ; '.'
0000000000000c24         db  0x5f ; '_'
0000000000000c25         db  0x5f ; '_'
0000000000000c26         db  0x61 ; 'a'
0000000000000c27         db  0x73 ; 's'
0000000000000c28         db  0x73 ; 's'
0000000000000c29         db  0x65 ; 'e'
0000000000000c2a         db  0x72 ; 'r'
0000000000000c2b         db  0x74 ; 't'
0000000000000c2c         db  0x5f ; '_'
0000000000000c2d         db  0x66 ; 'f'
0000000000000c2e         db  0x61 ; 'a'
0000000000000c2f         db  0x69 ; 'i'
0000000000000c30         db  0x6c ; 'l'
0000000000000c31         db  0x00 ; '.'
0000000000000c32         db  0x69 ; 'i'
0000000000000c33         db  0x73 ; 's'
0000000000000c34         db  0x77 ; 'w'
0000000000000c35         db  0x61 ; 'a'
0000000000000c36         db  0x6c ; 'l'
0000000000000c37         db  0x6e ; 'n'
0000000000000c38         db  0x75 ; 'u'
0000000000000c39         db  0x6d ; 'm'
0000000000000c3a         db  0x00 ; '.'
0000000000000c3b         db  0x5f ; '_'
0000000000000c3c         db  0x5f ; '_'
0000000000000c3d         db  0x63 ; 'c'
0000000000000c3e         db  0x74 ; 't'
0000000000000c3f         db  0x79 ; 'y'
0000000000000c40         db  0x70 ; 'p'
0000000000000c41         db  0x65 ; 'e'
0000000000000c42         db  0x5f ; '_'
0000000000000c43         db  0x67 ; 'g'
0000000000000c44         db  0x65 ; 'e'
0000000000000c45         db  0x74 ; 't'
0000000000000c46         db  0x5f ; '_'
0000000000000c47         db  0x6d ; 'm'
0000000000000c48         db  0x62 ; 'b'
0000000000000c49         db  0x5f ; '_'
0000000000000c4a         db  0x63 ; 'c'
0000000000000c4b         db  0x75 ; 'u'
0000000000000c4c         db  0x72 ; 'r'
0000000000000c4d         db  0x5f ; '_'
0000000000000c4e         db  0x6d ; 'm'
0000000000000c4f         db  0x61 ; 'a'
0000000000000c50         db  0x78 ; 'x'
0000000000000c51         db  0x00 ; '.'
0000000000000c52         db  0x63 ; 'c'
0000000000000c53         db  0x61 ; 'a'
0000000000000c54         db  0x6c ; 'l'
0000000000000c55         db  0x6c ; 'l'
0000000000000c56         db  0x6f ; 'o'
0000000000000c57         db  0x63 ; 'c'
0000000000000c58         db  0x00 ; '.'
0000000000000c59         db  0x73 ; 's'
0000000000000c5a         db  0x74 ; 't'
0000000000000c5b         db  0x72 ; 'r'
0000000000000c5c         db  0x6c ; 'l'
0000000000000c5d         db  0x65 ; 'e'
0000000000000c5e         db  0x6e ; 'n'
0000000000000c5f         db  0x00 ; '.'
0000000000000c60         db  0x69 ; 'i'
0000000000000c61         db  0x73 ; 's'
0000000000000c62         db  0x77 ; 'w'
0000000000000c63         db  0x63 ; 'c'
0000000000000c64         db  0x74 ; 't'
0000000000000c65         db  0x79 ; 'y'
0000000000000c66         db  0x70 ; 'p'
0000000000000c67         db  0x65 ; 'e'
0000000000000c68         db  0x00 ; '.'
0000000000000c69         db  0x73 ; 's'
0000000000000c6a         db  0x69 ; 'i'
0000000000000c6b         db  0x67 ; 'g'
0000000000000c6c         db  0x65 ; 'e'
0000000000000c6d         db  0x6d ; 'm'
0000000000000c6e         db  0x70 ; 'p'
0000000000000c6f         db  0x74 ; 't'
0000000000000c70         db  0x79 ; 'y'
0000000000000c71         db  0x73 ; 's'
0000000000000c72         db  0x65 ; 'e'
0000000000000c73         db  0x74 ; 't'
0000000000000c74         db  0x00 ; '.'
0000000000000c75         db  0x6d ; 'm'
0000000000000c76         db  0x65 ; 'e'
0000000000000c77         db  0x6d ; 'm'
0000000000000c78         db  0x73 ; 's'
0000000000000c79         db  0x65 ; 'e'
0000000000000c7a         db  0x74 ; 't'
0000000000000c7b         db  0x00 ; '.'
0000000000000c7c         db  0x5f ; '_'
0000000000000c7d         db  0x5f ; '_'
0000000000000c7e         db  0x65 ; 'e'
0000000000000c7f         db  0x72 ; 'r'
0000000000000c80         db  0x72 ; 'r'
0000000000000c81         db  0x6e ; 'n'
0000000000000c82         db  0x6f ; 'o'
0000000000000c83         db  0x5f ; '_'
0000000000000c84         db  0x6c ; 'l'
0000000000000c85         db  0x6f ; 'o'
0000000000000c86         db  0x63 ; 'c'
0000000000000c87         db  0x61 ; 'a'
0000000000000c88         db  0x74 ; 't'
0000000000000c89         db  0x69 ; 'i'
0000000000000c8a         db  0x6f ; 'o'
0000000000000c8b         db  0x6e ; 'n'
0000000000000c8c         db  0x00 ; '.'
0000000000000c8d         db  0x72 ; 'r'
0000000000000c8e         db  0x65 ; 'e'
0000000000000c8f         db  0x61 ; 'a'
0000000000000c90         db  0x64 ; 'd'
0000000000000c91         db  0x00 ; '.'
0000000000000c92         db  0x6d ; 'm'
0000000000000c93         db  0x65 ; 'e'
0000000000000c94         db  0x6d ; 'm'
0000000000000c95         db  0x63 ; 'c'
0000000000000c96         db  0x6d ; 'm'
0000000000000c97         db  0x70 ; 'p'
0000000000000c98         db  0x00 ; '.'
0000000000000c99         db  0x64 ; 'd'
0000000000000c9a         db  0x75 ; 'u'
0000000000000c9b         db  0x70 ; 'p'
0000000000000c9c         db  0x32 ; '2'
0000000000000c9d         db  0x00 ; '.'
0000000000000c9e         db  0x5f ; '_'
0000000000000c9f         db  0x5f ; '_'
0000000000000ca0         db  0x66 ; 'f'
0000000000000ca1         db  0x70 ; 'p'
0000000000000ca2         db  0x72 ; 'r'
0000000000000ca3         db  0x69 ; 'i'
0000000000000ca4         db  0x6e ; 'n'
0000000000000ca5         db  0x74 ; 't'
0000000000000ca6         db  0x66 ; 'f'
0000000000000ca7         db  0x5f ; '_'
0000000000000ca8         db  0x63 ; 'c'
0000000000000ca9         db  0x68 ; 'h'
0000000000000caa         db  0x6b ; 'k'
0000000000000cab         db  0x00 ; '.'
0000000000000cac         db  0x73 ; 's'
0000000000000cad         db  0x69 ; 'i'
0000000000000cae         db  0x67 ; 'g'
0000000000000caf         db  0x61 ; 'a'
0000000000000cb0         db  0x64 ; 'd'
0000000000000cb1         db  0x64 ; 'd'
0000000000000cb2         db  0x73 ; 's'
0000000000000cb3         db  0x65 ; 'e'
0000000000000cb4         db  0x74 ; 't'
0000000000000cb5         db  0x00 ; '.'
0000000000000cb6         db  0x73 ; 's'
0000000000000cb7         db  0x74 ; 't'
0000000000000cb8         db  0x64 ; 'd'
0000000000000cb9         db  0x6f ; 'o'
0000000000000cba         db  0x75 ; 'u'
0000000000000cbb         db  0x74 ; 't'
0000000000000cbc         db  0x00 ; '.'
0000000000000cbd         db  0x66 ; 'f'
0000000000000cbe         db  0x70 ; 'p'
0000000000000cbf         db  0x75 ; 'u'
0000000000000cc0         db  0x74 ; 't'
0000000000000cc1         db  0x63 ; 'c'
0000000000000cc2         db  0x00 ; '.'
0000000000000cc3         db  0x6c ; 'l'
0000000000000cc4         db  0x73 ; 's'
0000000000000cc5         db  0x65 ; 'e'
0000000000000cc6         db  0x65 ; 'e'
0000000000000cc7         db  0x6b ; 'k'
0000000000000cc8         db  0x00 ; '.'
0000000000000cc9         db  0x6d ; 'm'
0000000000000cca         db  0x65 ; 'e'
0000000000000ccb         db  0x6d ; 'm'
0000000000000ccc         db  0x63 ; 'c'
0000000000000ccd         db  0x70 ; 'p'
0000000000000cce         db  0x79 ; 'y'
0000000000000ccf         db  0x00 ; '.'
0000000000000cd0         db  0x66 ; 'f'
0000000000000cd1         db  0x63 ; 'c'
0000000000000cd2         db  0x6c ; 'l'
0000000000000cd3         db  0x6f ; 'o'
0000000000000cd4         db  0x73 ; 's'
0000000000000cd5         db  0x65 ; 'e'
0000000000000cd6         db  0x00 ; '.'
0000000000000cd7         db  0x5f ; '_'
0000000000000cd8         db  0x5f ; '_'
0000000000000cd9         db  0x73 ; 's'
0000000000000cda         db  0x74 ; 't'
0000000000000cdb         db  0x72 ; 'r'
0000000000000cdc         db  0x74 ; 't'
0000000000000cdd         db  0x6f ; 'o'
0000000000000cde         db  0x6c ; 'l'
0000000000000cdf         db  0x5f ; '_'
0000000000000ce0         db  0x69 ; 'i'
0000000000000ce1         db  0x6e ; 'n'
0000000000000ce2         db  0x74 ; 't'
0000000000000ce3         db  0x65 ; 'e'
0000000000000ce4         db  0x72 ; 'r'
0000000000000ce5         db  0x6e ; 'n'
0000000000000ce6         db  0x61 ; 'a'
0000000000000ce7         db  0x6c ; 'l'
0000000000000ce8         db  0x00 ; '.'
0000000000000ce9         db  0x6d ; 'm'
0000000000000cea         db  0x61 ; 'a'
0000000000000ceb         db  0x6c ; 'l'
0000000000000cec         db  0x6c ; 'l'
0000000000000ced         db  0x6f ; 'o'                                         ; DATA XREF=sub_13290+2831
0000000000000cee         db  0x63 ; 'c'
0000000000000cef         db  0x00 ; '.'
0000000000000cf0         db  0x72 ; 'r'
0000000000000cf1         db  0x61 ; 'a'
0000000000000cf2         db  0x69 ; 'i'
0000000000000cf3         db  0x73 ; 's'
0000000000000cf4         db  0x65 ; 'e'
0000000000000cf5         db  0x00 ; '.'
0000000000000cf6         db  0x6d ; 'm'
0000000000000cf7         db  0x62 ; 'b'
0000000000000cf8         db  0x73 ; 's'
0000000000000cf9         db  0x69 ; 'i'
0000000000000cfa         db  0x6e ; 'n'
0000000000000cfb         db  0x69 ; 'i'
0000000000000cfc         db  0x74 ; 't'
0000000000000cfd         db  0x00 ; '.'
0000000000000cfe         db  0x6e ; 'n'
0000000000000cff         db  0x6c ; 'l'
                     aLanginfo:
0000000000000d00         db         "_langinfo", 0
0000000000000d0a         db  0x5f ; '_'
0000000000000d0b         db  0x5f ; '_'
0000000000000d0c         db  0x63 ; 'c'
0000000000000d0d         db  0x74 ; 't'
0000000000000d0e         db  0x79 ; 'y'
0000000000000d0f         db  0x70 ; 'p'
0000000000000d10         db  0x65 ; 'e'
0000000000000d11         db  0x5f ; '_'
0000000000000d12         db  0x62 ; 'b'
0000000000000d13         db  0x5f ; '_'
0000000000000d14         db  0x6c ; 'l'
0000000000000d15         db  0x6f ; 'o'
0000000000000d16         db  0x63 ; 'c'
0000000000000d17         db  0x00 ; '.'
0000000000000d18         db  0x6f ; 'o'
0000000000000d19         db  0x70 ; 'p'
0000000000000d1a         db  0x74 ; 't'
0000000000000d1b         db  0x61 ; 'a'
0000000000000d1c         db  0x72 ; 'r'
0000000000000d1d         db  0x67 ; 'g'
0000000000000d1e         db  0x00 ; '.'
0000000000000d1f         db  0x5f ; '_'
0000000000000d20         db  0x5f ; '_'
0000000000000d21         db  0x66 ; 'f'
0000000000000d22         db  0x72 ; 'r'
0000000000000d23         db  0x65 ; 'e'
0000000000000d24         db  0x61 ; 'a'
0000000000000d25         db  0x64 ; 'd'
0000000000000d26         db  0x69 ; 'i'
0000000000000d27         db  0x6e ; 'n'
0000000000000d28         db  0x67 ; 'g'
0000000000000d29         db  0x00 ; '.'
0000000000000d2a         db  0x73 ; 's'
0000000000000d2b         db  0x74 ; 't'
0000000000000d2c         db  0x64 ; 'd'
0000000000000d2d         db  0x65 ; 'e'
0000000000000d2e         db  0x72 ; 'r'
0000000000000d2f         db  0x72 ; 'r'
0000000000000d30         db  0x00 ; '.'
0000000000000d31         db  0x5f ; '_'
0000000000000d32         db  0x5f ; '_'
0000000000000d33         db  0x73 ; 's'
0000000000000d34         db  0x6e ; 'n'
0000000000000d35         db  0x70 ; 'p'
0000000000000d36         db  0x72 ; 'r'
0000000000000d37         db  0x69 ; 'i'
0000000000000d38         db  0x6e ; 'n'
0000000000000d39         db  0x74 ; 't'
0000000000000d3a         db  0x66 ; 'f'
0000000000000d3b         db  0x5f ; '_'
0000000000000d3c         db  0x63 ; 'c'
0000000000000d3d         db  0x68 ; 'h'
0000000000000d3e         db  0x6b ; 'k'
0000000000000d3f         db  0x00 ; '.'
0000000000000d40         db  0x67 ; 'g'
0000000000000d41         db  0x65 ; 'e'
0000000000000d42         db  0x74 ; 't'
0000000000000d43         db  0x6f ; 'o'
0000000000000d44         db  0x70 ; 'p'
0000000000000d45         db  0x74 ; 't'
0000000000000d46         db  0x5f ; '_'
0000000000000d47         db  0x6c ; 'l'
0000000000000d48         db  0x6f ; 'o'
0000000000000d49         db  0x6e ; 'n'
0000000000000d4a         db  0x67 ; 'g'
0000000000000d4b         db  0x00 ; '.'
0000000000000d4c         db  0x66 ; 'f'
0000000000000d4d         db  0x69 ; 'i'
0000000000000d4e         db  0x6c ; 'l'
0000000000000d4f         db  0x65 ; 'e'
0000000000000d50         db  0x6e ; 'n'
0000000000000d51         db  0x6f ; 'o'
0000000000000d52         db  0x00 ; '.'
0000000000000d53         db  0x66 ; 'f'
0000000000000d54         db  0x77 ; 'w'
0000000000000d55         db  0x72 ; 'r'
0000000000000d56         db  0x69 ; 'i'
0000000000000d57         db  0x74 ; 't'
0000000000000d58         db  0x65 ; 'e'
0000000000000d59         db  0x00 ; '.'
0000000000000d5a         db  0x73 ; 's'
0000000000000d5b         db  0x69 ; 'i'
0000000000000d5c         db  0x67 ; 'g'
0000000000000d5d         db  0x61 ; 'a'
0000000000000d5e         db  0x63 ; 'c'
0000000000000d5f         db  0x74 ; 't'
0000000000000d60         db  0x69 ; 'i'
0000000000000d61         db  0x6f ; 'o'
0000000000000d62         db  0x6e ; 'n'
0000000000000d63         db  0x00 ; '.'
0000000000000d64         db  0x73 ; 's'
0000000000000d65         db  0x69 ; 'i'
0000000000000d66         db  0x67 ; 'g'
0000000000000d67         db  0x69 ; 'i'
0000000000000d68         db  0x73 ; 's'
0000000000000d69         db  0x6d ; 'm'
0000000000000d6a         db  0x65 ; 'e'
0000000000000d6b         db  0x6d ; 'm'
0000000000000d6c         db  0x62 ; 'b'
0000000000000d6d         db  0x65 ; 'e'
0000000000000d6e         db  0x72 ; 'r'
0000000000000d6f         db  0x00 ; '.'
0000000000000d70         db  0x5f ; '_'
0000000000000d71         db  0x5f ; '_'
0000000000000d72         db  0x66 ; 'f'
0000000000000d73         db  0x70 ; 'p'
0000000000000d74         db  0x65 ; 'e'
0000000000000d75         db  0x6e ; 'n'
0000000000000d76         db  0x64 ; 'd'
0000000000000d77         db  0x69 ; 'i'
0000000000000d78         db  0x6e ; 'n'
0000000000000d79         db  0x67 ; 'g'
0000000000000d7a         db  0x00 ; '.'
0000000000000d7b         db  0x73 ; 's'
0000000000000d7c         db  0x74 ; 't'
0000000000000d7d         db  0x72 ; 'r'
0000000000000d7e         db  0x63 ; 'c'
0000000000000d7f         db  0x68 ; 'h'
0000000000000d80         db  0x72 ; 'r'
0000000000000d81         db  0x00 ; '.'
0000000000000d82         db  0x70 ; 'p'
0000000000000d83         db  0x72 ; 'r'
0000000000000d84         db  0x6f ; 'o'
0000000000000d85         db  0x67 ; 'g'
0000000000000d86         db  0x72 ; 'r'
0000000000000d87         db  0x61 ; 'a'
0000000000000d88         db  0x6d ; 'm'
0000000000000d89         db  0x5f ; '_'
0000000000000d8a         db  0x69 ; 'i'
0000000000000d8b         db  0x6e ; 'n'
0000000000000d8c         db  0x76 ; 'v'
0000000000000d8d         db  0x6f ; 'o'
0000000000000d8e         db  0x63 ; 'c'
0000000000000d8f         db  0x61 ; 'a'
0000000000000d90         db  0x74 ; 't'
0000000000000d91         db  0x69 ; 'i'
0000000000000d92         db  0x6f ; 'o'
0000000000000d93         db  0x6e ; 'n'
0000000000000d94         db  0x5f ; '_'
0000000000000d95         db  0x73 ; 's'
0000000000000d96         db  0x68 ; 'h'
0000000000000d97         db  0x6f ; 'o'
0000000000000d98         db  0x72 ; 'r'
0000000000000d99         db  0x74 ; 't'
0000000000000d9a         db  0x5f ; '_'
0000000000000d9b         db  0x6e ; 'n'
0000000000000d9c         db  0x61 ; 'a'
0000000000000d9d         db  0x6d ; 'm'
0000000000000d9e         db  0x65 ; 'e'
0000000000000d9f         db  0x00 ; '.'
0000000000000da0         db  0x66 ; 'f'
0000000000000da1         db  0x64 ; 'd'
0000000000000da2         db  0x6f ; 'o'
0000000000000da3         db  0x70 ; 'p'
0000000000000da4         db  0x65 ; 'e'
0000000000000da5         db  0x6e ; 'n'
0000000000000da6         db  0x00 ; '.'
0000000000000da7         db  0x5f ; '_'
0000000000000da8         db  0x5f ; '_'
0000000000000da9         db  0x63 ; 'c'
0000000000000daa         db  0x74 ; 't'
0000000000000dab         db  0x79 ; 'y'
0000000000000dac         db  0x70 ; 'p'
0000000000000dad         db  0x65 ; 'e'
0000000000000dae         db  0x5f ; '_'
0000000000000daf         db  0x74 ; 't'
0000000000000db0         db  0x6f ; 'o'
0000000000000db1         db  0x75 ; 'u'
0000000000000db2         db  0x70 ; 'p'
0000000000000db3         db  0x70 ; 'p'
0000000000000db4         db  0x65 ; 'e'
0000000000000db5         db  0x72 ; 'r'
0000000000000db6         db  0x5f ; '_'
0000000000000db7         db  0x6c ; 'l'
0000000000000db8         db  0x6f ; 'o'
0000000000000db9         db  0x63 ; 'c'
0000000000000dba         db  0x00 ; '.'
0000000000000dbb         db  0x5f ; '_'
0000000000000dbc         db  0x5f ; '_'
0000000000000dbd         db  0x63 ; 'c'
0000000000000dbe         db  0x74 ; 't'
0000000000000dbf         db  0x79 ; 'y'
0000000000000dc0         db  0x70 ; 'p'
0000000000000dc1         db  0x65 ; 'e'
0000000000000dc2         db  0x5f ; '_'
0000000000000dc3         db  0x74 ; 't'
0000000000000dc4         db  0x6f ; 'o'
0000000000000dc5         db  0x6c ; 'l'
0000000000000dc6         db  0x6f ; 'o'
0000000000000dc7         db  0x77 ; 'w'
0000000000000dc8         db  0x65 ; 'e'
0000000000000dc9         db  0x72 ; 'r'
0000000000000dca         db  0x5f ; '_'
0000000000000dcb         db  0x6c ; 'l'
0000000000000dcc         db  0x6f ; 'o'
0000000000000dcd         db  0x63 ; 'c'
0000000000000dce         db  0x00 ; '.'
0000000000000dcf         db  0x5f ; '_'
0000000000000dd0         db  0x5f ; '_'
0000000000000dd1         db  0x63 ; 'c'
0000000000000dd2         db  0x78 ; 'x'
0000000000000dd3         db  0x61 ; 'a'
0000000000000dd4         db  0x5f ; '_'
0000000000000dd5         db  0x66 ; 'f'
0000000000000dd6         db  0x69 ; 'i'
0000000000000dd7         db  0x6e ; 'n'
0000000000000dd8         db  0x61 ; 'a'
0000000000000dd9         db  0x6c ; 'l'
0000000000000dda         db  0x69 ; 'i'
0000000000000ddb         db  0x7a ; 'z'
0000000000000ddc         db  0x65 ; 'e'
0000000000000ddd         db  0x00 ; '.'
0000000000000dde         db  0x66 ; 'f'
0000000000000ddf         db  0x63 ; 'c'
0000000000000de0         db  0x6e ; 'n'
0000000000000de1         db  0x74 ; 't'
0000000000000de2         db  0x6c ; 'l'
0000000000000de3         db  0x00 ; '.'
0000000000000de4         db  0x5f ; '_'
0000000000000de5         db  0x5f ; '_'
0000000000000de6         db  0x73 ; 's'
0000000000000de7         db  0x70 ; 'p'
0000000000000de8         db  0x72 ; 'r'
0000000000000de9         db  0x69 ; 'i'
0000000000000dea         db  0x6e ; 'n'
0000000000000deb         db  0x74 ; 't'
0000000000000dec         db  0x66 ; 'f'
0000000000000ded         db  0x5f ; '_'
0000000000000dee         db  0x63 ; 'c'
0000000000000def         db  0x68 ; 'h'
0000000000000df0         db  0x6b ; 'k'
0000000000000df1         db  0x00 ; '.'
0000000000000df2         db  0x6d ; 'm'
0000000000000df3         db  0x65 ; 'e'
0000000000000df4         db  0x6d ; 'm'
0000000000000df5         db  0x6d ; 'm'
0000000000000df6         db  0x6f ; 'o'
0000000000000df7         db  0x76 ; 'v'
0000000000000df8         db  0x65 ; 'e'
0000000000000df9         db  0x00 ; '.'
0000000000000dfa         db  0x62 ; 'b'
0000000000000dfb         db  0x69 ; 'i'
0000000000000dfc         db  0x6e ; 'n'
0000000000000dfd         db  0x64 ; 'd'
0000000000000dfe         db  0x74 ; 't'
0000000000000dff         db  0x65 ; 'e'
                     aXtdomain:
0000000000000e00         db         "xtdomain", 0
0000000000000e09         db  0x66 ; 'f'
0000000000000e0a         db  0x77 ; 'w'
0000000000000e0b         db  0x72 ; 'r'
0000000000000e0c         db  0x69 ; 'i'
0000000000000e0d         db  0x74 ; 't'
0000000000000e0e         db  0x65 ; 'e'
0000000000000e0f         db  0x5f ; '_'
0000000000000e10         db  0x75 ; 'u'
0000000000000e11         db  0x6e ; 'n'
0000000000000e12         db  0x6c ; 'l'
0000000000000e13         db  0x6f ; 'o'
0000000000000e14         db  0x63 ; 'c'
0000000000000e15         db  0x6b ; 'k'
0000000000000e16         db  0x65 ; 'e'
0000000000000e17         db  0x64 ; 'd'
0000000000000e18         db  0x00 ; '.'
0000000000000e19         db  0x73 ; 's'
0000000000000e1a         db  0x74 ; 't'
0000000000000e1b         db  0x72 ; 'r'
0000000000000e1c         db  0x63 ; 'c'
0000000000000e1d         db  0x6d ; 'm'
0000000000000e1e         db  0x70 ; 'p'
0000000000000e1f         db  0x00 ; '.'
0000000000000e20         db  0x5f ; '_'
0000000000000e21         db  0x5f ; '_'
0000000000000e22         db  0x6c ; 'l'
0000000000000e23         db  0x69 ; 'i'
0000000000000e24         db  0x62 ; 'b'
0000000000000e25         db  0x63 ; 'c'
0000000000000e26         db  0x5f ; '_'
0000000000000e27         db  0x73 ; 's'
0000000000000e28         db  0x74 ; 't'
0000000000000e29         db  0x61 ; 'a'
0000000000000e2a         db  0x72 ; 'r'
0000000000000e2b         db  0x74 ; 't'
0000000000000e2c         db  0x5f ; '_'
0000000000000e2d         db  0x6d ; 'm'
0000000000000e2e         db  0x61 ; 'a'
0000000000000e2f         db  0x69 ; 'i'
0000000000000e30         db  0x6e ; 'n'
0000000000000e31         db  0x00 ; '.'
0000000000000e32         db  0x66 ; 'f'
0000000000000e33         db  0x73 ; 's'
0000000000000e34         db  0x65 ; 'e'
0000000000000e35         db  0x65 ; 'e'
0000000000000e36         db  0x6b ; 'k'
0000000000000e37         db  0x6f ; 'o'
0000000000000e38         db  0x00 ; '.'
0000000000000e39         db  0x5f ; '_'
0000000000000e3a         db  0x5f ; '_'
0000000000000e3b         db  0x73 ; 's'
0000000000000e3c         db  0x74 ; 't'
0000000000000e3d         db  0x72 ; 'r'
0000000000000e3e         db  0x74 ; 't'
0000000000000e3f         db  0x6f ; 'o'
0000000000000e40         db  0x75 ; 'u'
0000000000000e41         db  0x6c ; 'l'
0000000000000e42         db  0x5f ; '_'
0000000000000e43         db  0x69 ; 'i'
0000000000000e44         db  0x6e ; 'n'
0000000000000e45         db  0x74 ; 't'
0000000000000e46         db  0x65 ; 'e'
0000000000000e47         db  0x72 ; 'r'
0000000000000e48         db  0x6e ; 'n'
0000000000000e49         db  0x61 ; 'a'
0000000000000e4a         db  0x6c ; 'l'
0000000000000e4b         db  0x00 ; '.'
0000000000000e4c         db  0x66 ; 'f'
0000000000000e4d         db  0x70 ; 'p'
0000000000000e4e         db  0x75 ; 'u'
0000000000000e4f         db  0x74 ; 't'
0000000000000e50         db  0x73 ; 's'
0000000000000e51         db  0x5f ; '_'
0000000000000e52         db  0x75 ; 'u'
0000000000000e53         db  0x6e ; 'n'
0000000000000e54         db  0x6c ; 'l'
0000000000000e55         db  0x6f ; 'o'
0000000000000e56         db  0x63 ; 'c'
0000000000000e57         db  0x6b ; 'k'
0000000000000e58         db  0x65 ; 'e'
0000000000000e59         db  0x64 ; 'd'
0000000000000e5a         db  0x00 ; '.'
0000000000000e5b         db  0x66 ; 'f'
0000000000000e5c         db  0x72 ; 'r'
0000000000000e5d         db  0x65 ; 'e'
0000000000000e5e         db  0x65 ; 'e'
0000000000000e5f         db  0x00 ; '.'
0000000000000e60         db  0x5f ; '_'
0000000000000e61         db  0x5f ; '_'
0000000000000e62         db  0x70 ; 'p'
0000000000000e63         db  0x72 ; 'r'
0000000000000e64         db  0x6f ; 'o'
0000000000000e65         db  0x67 ; 'g'
0000000000000e66         db  0x6e ; 'n'
0000000000000e67         db  0x61 ; 'a'
0000000000000e68         db  0x6d ; 'm'
0000000000000e69         db  0x65 ; 'e'
0000000000000e6a         db  0x00 ; '.'
0000000000000e6b         db  0x5f ; '_'
0000000000000e6c         db  0x5f ; '_'
0000000000000e6d         db  0x70 ; 'p'
0000000000000e6e         db  0x72 ; 'r'
0000000000000e6f         db  0x6f ; 'o'
0000000000000e70         db  0x67 ; 'g'
0000000000000e71         db  0x6e ; 'n'
0000000000000e72         db  0x61 ; 'a'
0000000000000e73         db  0x6d ; 'm'
0000000000000e74         db  0x65 ; 'e'
0000000000000e75         db  0x5f ; '_'
0000000000000e76         db  0x66 ; 'f'
0000000000000e77         db  0x75 ; 'u'
0000000000000e78         db  0x6c ; 'l'
0000000000000e79         db  0x6c ; 'l'
0000000000000e7a         db  0x00 ; '.'
0000000000000e7b         db  0x5f ; '_'
0000000000000e7c         db  0x5f ; '_'
0000000000000e7d         db  0x63 ; 'c'
0000000000000e7e         db  0x78 ; 'x'
0000000000000e7f         db  0x61 ; 'a'
0000000000000e80         db  0x5f ; '_'
0000000000000e81         db  0x61 ; 'a'
0000000000000e82         db  0x74 ; 't'
0000000000000e83         db  0x65 ; 'e'
0000000000000e84         db  0x78 ; 'x'
0000000000000e85         db  0x69 ; 'i'
0000000000000e86         db  0x74 ; 't'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0x47 ; 'G'
0000000000000e89         db  0x4c ; 'L'
0000000000000e8a         db  0x49 ; 'I'
0000000000000e8b         db  0x42 ; 'B'
0000000000000e8c         db  0x43 ; 'C'
0000000000000e8d         db  0x5f ; '_'
0000000000000e8e         db  0x32 ; '2'
0000000000000e8f         db  0x2e ; '.'
0000000000000e90         db  0x31 ; '1'
0000000000000e91         db  0x34 ; '4'
0000000000000e92         db  0x00 ; '.'
0000000000000e93         db  0x47 ; 'G'
0000000000000e94         db  0x4c ; 'L'
0000000000000e95         db  0x49 ; 'I'
0000000000000e96         db  0x42 ; 'B'
0000000000000e97         db  0x43 ; 'C'
0000000000000e98         db  0x5f ; '_'
0000000000000e99         db  0x32 ; '2'
0000000000000e9a         db  0x2e ; '.'
0000000000000e9b         db  0x34 ; '4'
0000000000000e9c         db  0x00 ; '.'
0000000000000e9d         db  0x47 ; 'G'
0000000000000e9e         db  0x4c ; 'L'
0000000000000e9f         db  0x49 ; 'I'
0000000000000ea0         db  0x42 ; 'B'
0000000000000ea1         db  0x43 ; 'C'
0000000000000ea2         db  0x5f ; '_'
0000000000000ea3         db  0x32 ; '2'
0000000000000ea4         db  0x2e ; '.'
0000000000000ea5         db  0x33 ; '3'
0000000000000ea6         db  0x2e ; '.'
0000000000000ea7         db  0x34 ; '4'
0000000000000ea8         db  0x00 ; '.'
0000000000000ea9         db  0x47 ; 'G'
0000000000000eaa         db  0x4c ; 'L'
0000000000000eab         db  0x49 ; 'I'
0000000000000eac         db  0x42 ; 'B'
0000000000000ead         db  0x43 ; 'C'
0000000000000eae         db  0x5f ; '_'
0000000000000eaf         db  0x32 ; '2'
0000000000000eb0         db  0x2e ; '.'
0000000000000eb1         db  0x32 ; '2'
0000000000000eb2         db  0x2e ; '.'
0000000000000eb3         db  0x35 ; '5'
0000000000000eb4         db  0x00 ; '.'
0000000000000eb5         db  0x47 ; 'G'
0000000000000eb6         db  0x4c ; 'L'
0000000000000eb7         db  0x49 ; 'I'
0000000000000eb8         db  0x42 ; 'B'
0000000000000eb9         db  0x43 ; 'C'
0000000000000eba         db  0x5f ; '_'
0000000000000ebb         db  0x32 ; '2'
0000000000000ebc         db  0x2e ; '.'
0000000000000ebd         db  0x33 ; '3'
0000000000000ebe         db  0x00 ; '.'
0000000000000ebf         db  0x5f ; '_'
0000000000000ec0         db  0x49 ; 'I'
0000000000000ec1         db  0x54 ; 'T'
0000000000000ec2         db  0x4d ; 'M'
0000000000000ec3         db  0x5f ; '_'
0000000000000ec4         db  0x64 ; 'd'
0000000000000ec5         db  0x65 ; 'e'
0000000000000ec6         db  0x72 ; 'r'
0000000000000ec7         db  0x65 ; 'e'
0000000000000ec8         db  0x67 ; 'g'
0000000000000ec9         db  0x69 ; 'i'
0000000000000eca         db  0x73 ; 's'
0000000000000ecb         db  0x74 ; 't'
0000000000000ecc         db  0x65 ; 'e'
0000000000000ecd         db  0x72 ; 'r'
0000000000000ece         db  0x54 ; 'T'
0000000000000ecf         db  0x4d ; 'M'
0000000000000ed0         db  0x43 ; 'C'
0000000000000ed1         db  0x6c ; 'l'
0000000000000ed2         db  0x6f ; 'o'
0000000000000ed3         db  0x6e ; 'n'
0000000000000ed4         db  0x65 ; 'e'
0000000000000ed5         db  0x54 ; 'T'
0000000000000ed6         db  0x61 ; 'a'
0000000000000ed7         db  0x62 ; 'b'
0000000000000ed8         db  0x6c ; 'l'
0000000000000ed9         db  0x65 ; 'e'
0000000000000eda         db  0x00 ; '.'
0000000000000edb         db  0x5f ; '_'
0000000000000edc         db  0x5f ; '_'
0000000000000edd         db  0x67 ; 'g'
0000000000000ede         db  0x6d ; 'm'
0000000000000edf         db  0x6f ; 'o'
0000000000000ee0         db  0x6e ; 'n'
0000000000000ee1         db  0x5f ; '_'
0000000000000ee2         db  0x73 ; 's'
0000000000000ee3         db  0x74 ; 't'
0000000000000ee4         db  0x61 ; 'a'
0000000000000ee5         db  0x72 ; 'r'
0000000000000ee6         db  0x74 ; 't'
0000000000000ee7         db  0x5f ; '_'
0000000000000ee8         db  0x5f ; '_'
0000000000000ee9         db  0x00 ; '.'
0000000000000eea         db  0x5f ; '_'
0000000000000eeb         db  0x49 ; 'I'
0000000000000eec         db  0x54 ; 'T'
0000000000000eed         db  0x4d ; 'M'
0000000000000eee         db  0x5f ; '_'
0000000000000eef         db  0x72 ; 'r'
0000000000000ef0         db  0x65 ; 'e'
0000000000000ef1         db  0x67 ; 'g'
0000000000000ef2         db  0x69 ; 'i'
0000000000000ef3         db  0x73 ; 's'
0000000000000ef4         db  0x74 ; 't'
0000000000000ef5         db  0x65 ; 'e'
0000000000000ef6         db  0x72 ; 'r'
0000000000000ef7         db  0x54 ; 'T'
0000000000000ef8         db  0x4d ; 'M'
0000000000000ef9         db  0x43 ; 'C'
0000000000000efa         db  0x6c ; 'l'
0000000000000efb         db  0x6f ; 'o'
0000000000000efc         db  0x6e ; 'n'
0000000000000efd         db  0x65 ; 'e'
0000000000000efe         db  0x54 ; 'T'
0000000000000eff         db  0x61 ; 'a'
0000000000000f00         db  0x62 ; 'b'
0000000000000f01         db  0x6c ; 'l'
0000000000000f02         db  0x65 ; 'e'
0000000000000f03         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xf04; 0xfb6[ (178 bytes)
        ; File offset : [3844; 4022[ (178 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000f04         db  0x00 ; '.'
0000000000000f05         db  0x00 ; '.'
0000000000000f06         db  0x02 ; '.'
0000000000000f07         db  0x00 ; '.'
0000000000000f08         db  0x03 ; '.'
0000000000000f09         db  0x00 ; '.'
0000000000000f0a         db  0x04 ; '.'
0000000000000f0b         db  0x00 ; '.'
0000000000000f0c         db  0x03 ; '.'
0000000000000f0d         db  0x00 ; '.'
0000000000000f0e         db  0x03 ; '.'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0x03 ; '.'
0000000000000f11         db  0x00 ; '.'
0000000000000f12         db  0x03 ; '.'
0000000000000f13         db  0x00 ; '.'
0000000000000f14         db  0x03 ; '.'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x03 ; '.'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0x00 ; '.'
0000000000000f19         db  0x00 ; '.'
0000000000000f1a         db  0x03 ; '.'
0000000000000f1b         db  0x00 ; '.'
0000000000000f1c         db  0x03 ; '.'
0000000000000f1d         db  0x00 ; '.'
0000000000000f1e         db  0x03 ; '.'
0000000000000f1f         db  0x00 ; '.'
0000000000000f20         db  0x03 ; '.'
0000000000000f21         db  0x00 ; '.'
0000000000000f22         db  0x03 ; '.'
0000000000000f23         db  0x00 ; '.'
0000000000000f24         db  0x03 ; '.'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x03 ; '.'
0000000000000f27         db  0x00 ; '.'
0000000000000f28         db  0x03 ; '.'
0000000000000f29         db  0x00 ; '.'
0000000000000f2a         db  0x03 ; '.'
0000000000000f2b         db  0x00 ; '.'
0000000000000f2c         db  0x03 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x03 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0x03 ; '.'
0000000000000f31         db  0x00 ; '.'
0000000000000f32         db  0x03 ; '.'
0000000000000f33         db  0x00 ; '.'
0000000000000f34         db  0x05 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x03 ; '.'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0x03 ; '.'
0000000000000f39         db  0x00 ; '.'
0000000000000f3a         db  0x03 ; '.'
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x03 ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x03 ; '.'
0000000000000f3f         db  0x00 ; '.'
0000000000000f40         db  0x03 ; '.'
0000000000000f41         db  0x00 ; '.'
0000000000000f42         db  0x03 ; '.'
0000000000000f43         db  0x00 ; '.'
0000000000000f44         db  0x03 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x03 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0x03 ; '.'
0000000000000f49         db  0x00 ; '.'
0000000000000f4a         db  0x03 ; '.'
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x03 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x03 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0x03 ; '.'
0000000000000f51         db  0x00 ; '.'
0000000000000f52         db  0x03 ; '.'
0000000000000f53         db  0x00 ; '.'
0000000000000f54         db  0x03 ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x03 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0x03 ; '.'
0000000000000f59         db  0x00 ; '.'
0000000000000f5a         db  0x03 ; '.'
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x03 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x03 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0x00 ; '.'
0000000000000f61         db  0x00 ; '.'
0000000000000f62         db  0x06 ; '.'
0000000000000f63         db  0x00 ; '.'
0000000000000f64         db  0x03 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x03 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0x03 ; '.'
0000000000000f69         db  0x00 ; '.'
0000000000000f6a         db  0x03 ; '.'
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x03 ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x03 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0x03 ; '.'
0000000000000f71         db  0x00 ; '.'
0000000000000f72         db  0x03 ; '.'
0000000000000f73         db  0x00 ; '.'
0000000000000f74         db  0x03 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x03 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x03 ; '.'
0000000000000f79         db  0x00 ; '.'
0000000000000f7a         db  0x04 ; '.'
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x03 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x03 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0x03 ; '.'
0000000000000f81         db  0x00 ; '.'
0000000000000f82         db  0x03 ; '.'
0000000000000f83         db  0x00 ; '.'
0000000000000f84         db  0x03 ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x03 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0x03 ; '.'
0000000000000f89         db  0x00 ; '.'
0000000000000f8a         db  0x03 ; '.'
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x03 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x03 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0x03 ; '.'
0000000000000f91         db  0x00 ; '.'
0000000000000f92         db  0x03 ; '.'
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x04 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x00 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0x03 ; '.'
0000000000000f99         db  0x00 ; '.'
0000000000000f9a         db  0x03 ; '.'
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x03 ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x03 ; '.'
0000000000000f9f         db  0x00 ; '.'
0000000000000fa0         db  0x02 ; '.'
0000000000000fa1         db  0x00 ; '.'
0000000000000fa2         db  0x02 ; '.'
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x04 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x03 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0x03 ; '.'
0000000000000fa9         db  0x00 ; '.'
0000000000000faa         db  0x03 ; '.'
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x03 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x03 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0x03 ; '.'
0000000000000fb1         db  0x00 ; '.'
0000000000000fb2         db  0x03 ; '.'
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x03 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x00 ; '.'
0000000000000fb7         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0xfb8; 0x1018[ (96 bytes)
        ; File offset : [4024; 4120[ (96 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000fb8         db  0x01 ; '.'
0000000000000fb9         db  0x00 ; '.'
0000000000000fba         db  0x05 ; '.'
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x01 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'                                         ; DATA XREF=set_regs+166
0000000000000fc0         db  0x10 ; '.'
0000000000000fc1         db  0x00 ; '.'
0000000000000fc2         db  0x00 ; '.'
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x00 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x00 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0x94 ; '.'
0000000000000fc9         db  0x91 ; '.'
0000000000000fca         db  0x96 ; '.'
0000000000000fcb         db  0x06 ; '.'
0000000000000fcc         db  0x00 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x06 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x50 ; 'P'
0000000000000fd1         db  0x03 ; '.'
0000000000000fd2         db  0x00 ; '.'
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x10 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x00 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0x14 ; '.'
0000000000000fd9         db  0x69 ; 'i'
0000000000000fda         db  0x69 ; 'i'
0000000000000fdb         db  0x0d ; '.'
0000000000000fdc         db  0x00 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x05 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0x5b ; '['
0000000000000fe1         db  0x03 ; '.'
0000000000000fe2         db  0x00 ; '.'
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x10 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x00 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x74 ; 't'
0000000000000fe9         db  0x19 ; '.'
0000000000000fea         db  0x69 ; 'i'
0000000000000feb         db  0x09 ; '.'
0000000000000fec         db  0x00 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x04 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0x65 ; 'e'
0000000000000ff1         db  0x03 ; '.'
0000000000000ff2         db  0x00 ; '.'
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x10 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x00 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0x75 ; 'u'
0000000000000ff9         db  0x1a ; '.'
0000000000000ffa         db  0x69 ; 'i'
0000000000000ffb         db  0x09 ; '.'
0000000000000ffc         db  0x00 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x03 ; '.'
0000000000000fff         db  0x00 ; '.'
0000000000001000         db  0x71 ; 'q'
0000000000001001         db  0x03 ; '.'
0000000000001002         db  0x00 ; '.'
0000000000001003         db  0x00 ; '.'
0000000000001004         db  0x10 ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x00 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0x13 ; '.'
0000000000001009         db  0x69 ; 'i'
000000000000100a         db  0x69 ; 'i'
000000000000100b         db  0x0d ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x02 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0x7d ; '}'
0000000000001011         db  0x03 ; '.'
0000000000001012         db  0x00 ; '.'
0000000000001013         db  0x00 ; '.'
0000000000001014         db  0x00 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x00 ; '.'
0000000000001017         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0x1018; 0x1390[ (888 bytes)
        ; File offset : [4120; 5008[ (888 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001018         db  0xb0 ; '.'
0000000000001019         db  0xb9 ; '.'
000000000000101a         db  0x21 ; '!'
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x00 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0x08 ; '.'
0000000000001021         db  0x00 ; '.'
0000000000001022         db  0x00 ; '.'
0000000000001023         db  0x00 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x00 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0x90 ; '.'
0000000000001029         db  0x30 ; '0'
000000000000102a         db  0x00 ; '.'
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x00 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0xb8 ; '.'
0000000000001031         db  0xb9 ; '.'
0000000000001032         db  0x21 ; '!'
0000000000001033         db  0x00 ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x00 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0x08 ; '.'
0000000000001039         db  0x00 ; '.'
000000000000103a         db  0x00 ; '.'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0x50 ; 'P'
0000000000001041         db  0x30 ; '0'
0000000000001042         db  0x00 ; '.'
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x00 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0xc0 ; '.'
0000000000001049         db  0xb9 ; '.'
000000000000104a         db  0x21 ; '!'
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0x08 ; '.'
0000000000001051         db  0x00 ; '.'
0000000000001052         db  0x00 ; '.'
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0x89 ; '.'
0000000000001059         db  0x61 ; 'a'
000000000000105a         db  0x01 ; '.'
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x00 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0xe0 ; '.'
0000000000001061         db  0xb9 ; '.'
0000000000001062         db  0x21 ; '!'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0x08 ; '.'
0000000000001069         db  0x00 ; '.'
000000000000106a         db  0x00 ; '.'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0x90 ; '.'
0000000000001071         db  0x61 ; 'a'
0000000000001072         db  0x01 ; '.'
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x00 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x00 ; '.'
0000000000001079         db  0xba ; '.'
000000000000107a         db  0x21 ; '!'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0x08 ; '.'
0000000000001081         db  0x00 ; '.'
0000000000001082         db  0x00 ; '.'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0x96 ; '.'
0000000000001089         db  0x61 ; 'a'
000000000000108a         db  0x01 ; '.'
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x00 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x20 ; ' '
0000000000001091         db  0xba ; '.'
0000000000001092         db  0x21 ; '!'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0x08 ; '.'
0000000000001099         db  0x00 ; '.'
000000000000109a         db  0x00 ; '.'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x9d ; '.'
00000000000010a1         db  0x61 ; 'a'
00000000000010a2         db  0x01 ; '.'
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x00 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x40 ; '@'
00000000000010a9         db  0xba ; '.'
00000000000010aa         db  0x21 ; '!'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x08 ; '.'
00000000000010b1         db  0x00 ; '.'
00000000000010b2         db  0x00 ; '.'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0xa8 ; '.'
00000000000010b9         db  0x61 ; 'a'
00000000000010ba         db  0x01 ; '.'
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x60 ; '`'
00000000000010c1         db  0xba ; '.'
00000000000010c2         db  0x21 ; '!'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x08 ; '.'
00000000000010c9         db  0x00 ; '.'
00000000000010ca         db  0x00 ; '.'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0xba ; '.'
00000000000010d1         db  0x61 ; 'a'
00000000000010d2         db  0x01 ; '.'
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x00 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x80 ; '.'
00000000000010d9         db  0xba ; '.'
00000000000010da         db  0x21 ; '!'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x08 ; '.'
00000000000010e1         db  0x00 ; '.'
00000000000010e2         db  0x00 ; '.'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0xc1 ; '.'
00000000000010e9         db  0x61 ; 'a'
00000000000010ea         db  0x01 ; '.'
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x00 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0xa0 ; '.'
00000000000010f1         db  0xba ; '.'
00000000000010f2         db  0x21 ; '!'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0x08 ; '.'
00000000000010f9         db  0x00 ; '.'
00000000000010fa         db  0x00 ; '.'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0xcf ; '.'
0000000000001101         db  0x61 ; 'a'
0000000000001102         db  0x01 ; '.'
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x00 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0xc0 ; '.'
0000000000001109         db  0xba ; '.'
000000000000110a         db  0x21 ; '!'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x00 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0x08 ; '.'
0000000000001111         db  0x00 ; '.'
0000000000001112         db  0x00 ; '.'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0xe0 ; '.'
0000000000001119         db  0x61 ; 'a'
000000000000111a         db  0x01 ; '.'
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x00 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0xe0 ; '.'
0000000000001121         db  0xba ; '.'
0000000000001122         db  0x21 ; '!'
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x00 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x08 ; '.'
0000000000001129         db  0x00 ; '.'
000000000000112a         db  0x00 ; '.'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0xe5 ; '.'
0000000000001131         db  0x61 ; 'a'
0000000000001132         db  0x01 ; '.'
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x20 ; ' '
0000000000001139         db  0xbb ; '.'
000000000000113a         db  0x21 ; '!'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x00 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x08 ; '.'
0000000000001141         db  0x00 ; '.'
0000000000001142         db  0x00 ; '.'
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0xc1 ; '.'
0000000000001149         db  0x6b ; 'k'
000000000000114a         db  0x01 ; '.'
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x00 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x28 ; '('
0000000000001151         db  0xbb ; '.'
0000000000001152         db  0x21 ; '!'
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x08 ; '.'
0000000000001159         db  0x00 ; '.'
000000000000115a         db  0x00 ; '.'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0xc9 ; '.'
0000000000001161         db  0x6b ; 'k'
0000000000001162         db  0x01 ; '.'
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0x30 ; '0'
0000000000001169         db  0xbb ; '.'
000000000000116a         db  0x21 ; '!'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x00 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x08 ; '.'
0000000000001171         db  0x00 ; '.'
0000000000001172         db  0x00 ; '.'
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0xcf ; '.'
0000000000001179         db  0x6b ; 'k'
000000000000117a         db  0x01 ; '.'
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0x38 ; '8'
0000000000001181         db  0xbb ; '.'
0000000000001182         db  0x21 ; '!'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x08 ; '.'
0000000000001189         db  0x00 ; '.'
000000000000118a         db  0x00 ; '.'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0xdc ; '.'
0000000000001191         db  0x6b ; 'k'
0000000000001192         db  0x01 ; '.'
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x40 ; '@'
0000000000001199         db  0xbb ; '.'
000000000000119a         db  0x21 ; '!'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x08 ; '.'
00000000000011a1         db  0x00 ; '.'
00000000000011a2         db  0x00 ; '.'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0xe9 ; '.'
00000000000011a9         db  0x6b ; 'k'
00000000000011aa         db  0x01 ; '.'
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x48 ; 'H'
00000000000011b1         db  0xbb ; '.'
00000000000011b2         db  0x21 ; '!'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x08 ; '.'
00000000000011b9         db  0x00 ; '.'
00000000000011ba         db  0x00 ; '.'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0xfd ; '.'
00000000000011c1         db  0x6b ; 'k'
00000000000011c2         db  0x01 ; '.'
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0x50 ; 'P'
00000000000011c9         db  0xbb ; '.'
00000000000011ca         db  0x21 ; '!'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x08 ; '.'
00000000000011d1         db  0x00 ; '.'
00000000000011d2         db  0x00 ; '.'
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0xff ; '.'
00000000000011d9         db  0x6b ; 'k'
00000000000011da         db  0x01 ; '.'
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0x58 ; 'X'
00000000000011e1         db  0xbb ; '.'
00000000000011e2         db  0x21 ; '!'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x08 ; '.'
00000000000011e9         db  0x00 ; '.'
00000000000011ea         db  0x00 ; '.'
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0xe2 ; '.'
00000000000011f1         db  0x6b ; 'k'
00000000000011f2         db  0x01 ; '.'
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0x60 ; '`'
00000000000011f9         db  0xbb ; '.'
00000000000011fa         db  0x21 ; '!'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x00 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x08 ; '.'                                         ; DATA XREF=peek_token+560, peek_token+572, peek_token+640, peek_token+652, peek_token+996, peek_token+1080
0000000000001201         db  0x00 ; '.'
0000000000001202         db  0x00 ; '.'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x00 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0xd4 ; '.'
0000000000001209         db  0x60 ; '`'
000000000000120a         db  0x01 ; '.'
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0x68 ; 'h'
0000000000001211         db  0xbb ; '.'
0000000000001212         db  0x21 ; '!'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x00 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x08 ; '.'
0000000000001219         db  0x00 ; '.'
000000000000121a         db  0x00 ; '.'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x00 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0x07 ; '.'
0000000000001221         db  0x6c ; 'l'
0000000000001222         db  0x01 ; '.'
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0x08 ; '.'
0000000000001229         db  0xc0 ; '.'
000000000000122a         db  0x21 ; '!'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x00 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x08 ; '.'
0000000000001231         db  0x00 ; '.'
0000000000001232         db  0x00 ; '.'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x00 ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0x08 ; '.'
0000000000001239         db  0xc0 ; '.'
000000000000123a         db  0x21 ; '!'
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0x18 ; '.'
0000000000001241         db  0xc0 ; '.'
0000000000001242         db  0x21 ; '!'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x00 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x08 ; '.'
0000000000001249         db  0x00 ; '.'
000000000000124a         db  0x00 ; '.'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x00 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0x4c ; 'L'
0000000000001251         db  0x6b ; 'k'
0000000000001252         db  0x01 ; '.'
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0x80 ; '.'
0000000000001259         db  0xc0 ; '.'
000000000000125a         db  0x21 ; '!'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x00 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x08 ; '.'
0000000000001261         db  0x00 ; '.'
0000000000001262         db  0x00 ; '.'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x00 ; '.'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0x90 ; '.'
0000000000001269         db  0xc0 ; '.'
000000000000126a         db  0x21 ; '!'
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x98 ; '.'
0000000000001271         db  0xc0 ; '.'
0000000000001272         db  0x21 ; '!'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x00 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x08 ; '.'
0000000000001279         db  0x00 ; '.'
000000000000127a         db  0x00 ; '.'
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x00 ; '.'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0x40 ; '@'
0000000000001281         db  0xc2 ; '.'
0000000000001282         db  0x21 ; '!'
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0xd8 ; '.'
0000000000001289         db  0xbf ; '.'
000000000000128a         db  0x21 ; '!'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x00 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0x06 ; '.'
0000000000001291         db  0x00 ; '.'
0000000000001292         db  0x00 ; '.'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x0a ; '.'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0x00 ; '.'
0000000000001299         db  0x00 ; '.'
000000000000129a         db  0x00 ; '.'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0xe0 ; '.'
00000000000012a1         db  0xbf ; '.'
00000000000012a2         db  0x21 ; '!'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x00 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x06 ; '.'
00000000000012a9         db  0x00 ; '.'
00000000000012aa         db  0x00 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x26 ; '&'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0x00 ; '.'
00000000000012b1         db  0x00 ; '.'
00000000000012b2         db  0x00 ; '.'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0xe8 ; '.'
00000000000012b9         db  0xbf ; '.'
00000000000012ba         db  0x21 ; '!'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x00 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x06 ; '.'
00000000000012c1         db  0x00 ; '.'
00000000000012c2         db  0x00 ; '.'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x2e ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0x00 ; '.'
00000000000012c9         db  0x00 ; '.'
00000000000012ca         db  0x00 ; '.'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0xf0 ; '.'
00000000000012d1         db  0xbf ; '.'
00000000000012d2         db  0x21 ; '!'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x00 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x06 ; '.'
00000000000012d9         db  0x00 ; '.'
00000000000012da         db  0x00 ; '.'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x49 ; 'I'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0x00 ; '.'
00000000000012e1         db  0x00 ; '.'
00000000000012e2         db  0x00 ; '.'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0xf8 ; '.'
00000000000012e9         db  0xbf ; '.'
00000000000012ea         db  0x21 ; '!'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x00 ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x06 ; '.'
00000000000012f1         db  0x00 ; '.'
00000000000012f2         db  0x00 ; '.'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x4c ; 'L'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0x00 ; '.'
00000000000012f9         db  0x00 ; '.'
00000000000012fa         db  0x00 ; '.'
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0xa0 ; '.'
0000000000001301         db  0xc0 ; '.'
0000000000001302         db  0x21 ; '!'
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x00 ; '.'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x05 ; '.'
0000000000001309         db  0x00 ; '.'
000000000000130a         db  0x00 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x52 ; 'R'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0x00 ; '.'
0000000000001311         db  0x00 ; '.'
0000000000001312         db  0x00 ; '.'
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0xa8 ; '.'
0000000000001319         db  0xc0 ; '.'
000000000000131a         db  0x21 ; '!'
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x00 ; '.'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x05 ; '.'
0000000000001321         db  0x00 ; '.'
0000000000001322         db  0x00 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x51 ; 'Q'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0x00 ; '.'
0000000000001329         db  0x00 ; '.'
000000000000132a         db  0x00 ; '.'
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0xb0 ; '.'
0000000000001331         db  0xc0 ; '.'
0000000000001332         db  0x21 ; '!'
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x00 ; '.'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x05 ; '.'
0000000000001339         db  0x00 ; '.'
000000000000133a         db  0x00 ; '.'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x57 ; 'W'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0x00 ; '.'
0000000000001341         db  0x00 ; '.'
0000000000001342         db  0x00 ; '.'
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0xb8 ; '.'
0000000000001349         db  0xc0 ; '.'
000000000000134a         db  0x21 ; '!'
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x00 ; '.'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x05 ; '.'
0000000000001351         db  0x00 ; '.'
0000000000001352         db  0x00 ; '.'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x58 ; 'X'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0x00 ; '.'
0000000000001359         db  0x00 ; '.'
000000000000135a         db  0x00 ; '.'
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0xc0 ; '.'
0000000000001361         db  0xc0 ; '.'
0000000000001362         db  0x21 ; '!'
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x00 ; '.'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x05 ; '.'
0000000000001369         db  0x00 ; '.'
000000000000136a         db  0x00 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x54 ; 'T'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0x00 ; '.'
0000000000001371         db  0x00 ; '.'
0000000000001372         db  0x00 ; '.'
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0xe0 ; '.'
0000000000001379         db  0xc0 ; '.'
000000000000137a         db  0x21 ; '!'
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x00 ; '.'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0x05 ; '.'
0000000000001381         db  0x00 ; '.'
0000000000001382         db  0x00 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x56 ; 'V'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0x00 ; '.'
0000000000001389         db  0x00 ; '.'
000000000000138a         db  0x00 ; '.'
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x1390; 0x1a98[ (1800 bytes)
        ; File offset : [5008; 6808[ (1800 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001390         db  0x80 ; '.'
0000000000001391         db  0xbd ; '.'
0000000000001392         db  0x21 ; '!'
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x00 ; '.'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0x07 ; '.'
0000000000001399         db  0x00 ; '.'
000000000000139a         db  0x00 ; '.'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x01 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0x00 ; '.'
00000000000013a1         db  0x00 ; '.'
00000000000013a2         db  0x00 ; '.'
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x00 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0x88 ; '.'
00000000000013a9         db  0xbd ; '.'
00000000000013aa         db  0x21 ; '!'
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x00 ; '.'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0x07 ; '.'
00000000000013b1         db  0x00 ; '.'
00000000000013b2         db  0x00 ; '.'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x02 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0x00 ; '.'
00000000000013b9         db  0x00 ; '.'
00000000000013ba         db  0x00 ; '.'
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0x90 ; '.'
00000000000013c1         db  0xbd ; '.'
00000000000013c2         db  0x21 ; '!'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x00 ; '.'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0x07 ; '.'
00000000000013c9         db  0x00 ; '.'
00000000000013ca         db  0x00 ; '.'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x03 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0x00 ; '.'
00000000000013d1         db  0x00 ; '.'
00000000000013d2         db  0x00 ; '.'
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x00 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0x98 ; '.'
00000000000013d9         db  0xbd ; '.'
00000000000013da         db  0x21 ; '!'
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x00 ; '.'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x07 ; '.'
00000000000013e1         db  0x00 ; '.'
00000000000013e2         db  0x00 ; '.'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x04 ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0x00 ; '.'
00000000000013e9         db  0x00 ; '.'
00000000000013ea         db  0x00 ; '.'
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0xa0 ; '.'
00000000000013f1         db  0xbd ; '.'
00000000000013f2         db  0x21 ; '!'
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x00 ; '.'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x07 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x05 ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'
0000000000001400         db  0x00 ; '.'
0000000000001401         db  0x00 ; '.'
0000000000001402         db  0x00 ; '.'
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0xa8 ; '.'
0000000000001409         db  0xbd ; '.'
000000000000140a         db  0x21 ; '!'
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x00 ; '.'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x07 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x06 ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0x00 ; '.'
0000000000001419         db  0x00 ; '.'
000000000000141a         db  0x00 ; '.'
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0xb0 ; '.'
0000000000001421         db  0xbd ; '.'
0000000000001422         db  0x21 ; '!'
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x00 ; '.'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x07 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x00 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x07 ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0x00 ; '.'
0000000000001431         db  0x00 ; '.'
0000000000001432         db  0x00 ; '.'
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0xb8 ; '.'
0000000000001439         db  0xbd ; '.'
000000000000143a         db  0x21 ; '!'
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x00 ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x07 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x00 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x08 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0x00 ; '.'
0000000000001449         db  0x00 ; '.'
000000000000144a         db  0x00 ; '.'
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0xc0 ; '.'
0000000000001451         db  0xbd ; '.'
0000000000001452         db  0x21 ; '!'
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x00 ; '.'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x07 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x00 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x09 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0x00 ; '.'
0000000000001461         db  0x00 ; '.'
0000000000001462         db  0x00 ; '.'
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0xc8 ; '.'
0000000000001469         db  0xbd ; '.'
000000000000146a         db  0x21 ; '!'
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x00 ; '.'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x07 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x00 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x0b ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0x00 ; '.'
0000000000001479         db  0x00 ; '.'
000000000000147a         db  0x00 ; '.'
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0xd0 ; '.'
0000000000001481         db  0xbd ; '.'
0000000000001482         db  0x21 ; '!'
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x00 ; '.'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x07 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x00 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x0c ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0x00 ; '.'
0000000000001491         db  0x00 ; '.'
0000000000001492         db  0x00 ; '.'
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0xd8 ; '.'
0000000000001499         db  0xbd ; '.'
000000000000149a         db  0x21 ; '!'
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x00 ; '.'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x07 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x00 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x0d ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0x00 ; '.'
00000000000014a9         db  0x00 ; '.'
00000000000014aa         db  0x00 ; '.'
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0xe0 ; '.'
00000000000014b1         db  0xbd ; '.'
00000000000014b2         db  0x21 ; '!'
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x00 ; '.'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x07 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x00 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x0e ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0x00 ; '.'
00000000000014c1         db  0x00 ; '.'
00000000000014c2         db  0x00 ; '.'
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0xe8 ; '.'
00000000000014c9         db  0xbd ; '.'
00000000000014ca         db  0x21 ; '!'
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x00 ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x07 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x00 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x0f ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0x00 ; '.'
00000000000014d9         db  0x00 ; '.'
00000000000014da         db  0x00 ; '.'
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0xf0 ; '.'
00000000000014e1         db  0xbd ; '.'
00000000000014e2         db  0x21 ; '!'
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x00 ; '.'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x07 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x00 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x10 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0x00 ; '.'
00000000000014f1         db  0x00 ; '.'
00000000000014f2         db  0x00 ; '.'
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0xf8 ; '.'
00000000000014f9         db  0xbd ; '.'
00000000000014fa         db  0x21 ; '!'
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x00 ; '.'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x07 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x00 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x11 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0x00 ; '.'
0000000000001509         db  0x00 ; '.'
000000000000150a         db  0x00 ; '.'
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0x00 ; '.'
0000000000001511         db  0xbe ; '.'
0000000000001512         db  0x21 ; '!'
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x00 ; '.'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x07 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x12 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0x00 ; '.'
0000000000001521         db  0x00 ; '.'
0000000000001522         db  0x00 ; '.'
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0x08 ; '.'
0000000000001529         db  0xbe ; '.'
000000000000152a         db  0x21 ; '!'
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x00 ; '.'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x07 ; '.'
0000000000001531         db  0x00 ; '.'
0000000000001532         db  0x00 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x13 ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0x00 ; '.'
0000000000001539         db  0x00 ; '.'
000000000000153a         db  0x00 ; '.'
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x10 ; '.'
0000000000001541         db  0xbe ; '.'
0000000000001542         db  0x21 ; '!'
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x00 ; '.'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x07 ; '.'
0000000000001549         db  0x00 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x14 ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x00 ; '.'
0000000000001551         db  0x00 ; '.'
0000000000001552         db  0x00 ; '.'
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x18 ; '.'
0000000000001559         db  0xbe ; '.'
000000000000155a         db  0x21 ; '!'
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x00 ; '.'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0x07 ; '.'
0000000000001561         db  0x00 ; '.'
0000000000001562         db  0x00 ; '.'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x15 ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0x00 ; '.'
0000000000001569         db  0x00 ; '.'
000000000000156a         db  0x00 ; '.'
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x20 ; ' '
0000000000001571         db  0xbe ; '.'
0000000000001572         db  0x21 ; '!'
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x00 ; '.'
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0x07 ; '.'
0000000000001579         db  0x00 ; '.'
000000000000157a         db  0x00 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x16 ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0x00 ; '.'
0000000000001581         db  0x00 ; '.'
0000000000001582         db  0x00 ; '.'
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0x28 ; '('
0000000000001589         db  0xbe ; '.'
000000000000158a         db  0x21 ; '!'
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x00 ; '.'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x07 ; '.'
0000000000001591         db  0x00 ; '.'
0000000000001592         db  0x00 ; '.'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x17 ; '.'
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0x00 ; '.'
0000000000001599         db  0x00 ; '.'
000000000000159a         db  0x00 ; '.'
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x00 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x30 ; '0'
00000000000015a1         db  0xbe ; '.'
00000000000015a2         db  0x21 ; '!'
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x00 ; '.'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0x07 ; '.'
00000000000015a9         db  0x00 ; '.'
00000000000015aa         db  0x00 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x18 ; '.'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0x00 ; '.'
00000000000015b1         db  0x00 ; '.'
00000000000015b2         db  0x00 ; '.'
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x38 ; '8'
00000000000015b9         db  0xbe ; '.'
00000000000015ba         db  0x21 ; '!'
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x00 ; '.'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0x07 ; '.'
00000000000015c1         db  0x00 ; '.'
00000000000015c2         db  0x00 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x19 ; '.'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0x00 ; '.'
00000000000015c9         db  0x00 ; '.'
00000000000015ca         db  0x00 ; '.'
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x40 ; '@'
00000000000015d1         db  0xbe ; '.'
00000000000015d2         db  0x21 ; '!'
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x00 ; '.'
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x07 ; '.'
00000000000015d9         db  0x00 ; '.'
00000000000015da         db  0x00 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x1a ; '.'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0x00 ; '.'
00000000000015e1         db  0x00 ; '.'
00000000000015e2         db  0x00 ; '.'
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0x48 ; 'H'
00000000000015e9         db  0xbe ; '.'
00000000000015ea         db  0x21 ; '!'
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x00 ; '.'
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x07 ; '.'
00000000000015f1         db  0x00 ; '.'
00000000000015f2         db  0x00 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x1b ; '.'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0x00 ; '.'
00000000000015f9         db  0x00 ; '.'
00000000000015fa         db  0x00 ; '.'
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0x50 ; 'P'
0000000000001601         db  0xbe ; '.'
0000000000001602         db  0x21 ; '!'
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x00 ; '.'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0x07 ; '.'
0000000000001609         db  0x00 ; '.'
000000000000160a         db  0x00 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x1c ; '.'
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0x00 ; '.'
0000000000001611         db  0x00 ; '.'
0000000000001612         db  0x00 ; '.'
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0x58 ; 'X'
0000000000001619         db  0xbe ; '.'
000000000000161a         db  0x21 ; '!'
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x00 ; '.'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0x07 ; '.'
0000000000001621         db  0x00 ; '.'
0000000000001622         db  0x00 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x1d ; '.'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0x00 ; '.'
0000000000001629         db  0x00 ; '.'
000000000000162a         db  0x00 ; '.'
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0x60 ; '`'
0000000000001631         db  0xbe ; '.'
0000000000001632         db  0x21 ; '!'
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x00 ; '.'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x07 ; '.'
0000000000001639         db  0x00 ; '.'
000000000000163a         db  0x00 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x1e ; '.'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0x00 ; '.'
0000000000001641         db  0x00 ; '.'
0000000000001642         db  0x00 ; '.'
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0x68 ; 'h'
0000000000001649         db  0xbe ; '.'
000000000000164a         db  0x21 ; '!'
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x00 ; '.'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0x07 ; '.'
0000000000001651         db  0x00 ; '.'
0000000000001652         db  0x00 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x1f ; '.'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0x00 ; '.'
0000000000001659         db  0x00 ; '.'
000000000000165a         db  0x00 ; '.'
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0x70 ; 'p'
0000000000001661         db  0xbe ; '.'
0000000000001662         db  0x21 ; '!'
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x00 ; '.'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0x07 ; '.'
0000000000001669         db  0x00 ; '.'
000000000000166a         db  0x00 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x20 ; ' '
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0x00 ; '.'
0000000000001671         db  0x00 ; '.'
0000000000001672         db  0x00 ; '.'
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0x78 ; 'x'
0000000000001679         db  0xbe ; '.'
000000000000167a         db  0x21 ; '!'
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x00 ; '.'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0x07 ; '.'
0000000000001681         db  0x00 ; '.'
0000000000001682         db  0x00 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x21 ; '!'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0x00 ; '.'
0000000000001689         db  0x00 ; '.'
000000000000168a         db  0x00 ; '.'
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0x80 ; '.'
0000000000001691         db  0xbe ; '.'
0000000000001692         db  0x21 ; '!'
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x00 ; '.'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x07 ; '.'
0000000000001699         db  0x00 ; '.'
000000000000169a         db  0x00 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x22 ; '"'
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0x00 ; '.'
00000000000016a1         db  0x00 ; '.'
00000000000016a2         db  0x00 ; '.'
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0x88 ; '.'
00000000000016a9         db  0xbe ; '.'
00000000000016aa         db  0x21 ; '!'
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x00 ; '.'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x07 ; '.'
00000000000016b1         db  0x00 ; '.'
00000000000016b2         db  0x00 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x23 ; '#'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0x00 ; '.'
00000000000016b9         db  0x00 ; '.'
00000000000016ba         db  0x00 ; '.'
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0x90 ; '.'
00000000000016c1         db  0xbe ; '.'
00000000000016c2         db  0x21 ; '!'
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x00 ; '.'
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x07 ; '.'
00000000000016c9         db  0x00 ; '.'
00000000000016ca         db  0x00 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x24 ; '$'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0x00 ; '.'
00000000000016d1         db  0x00 ; '.'
00000000000016d2         db  0x00 ; '.'
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0x98 ; '.'
00000000000016d9         db  0xbe ; '.'
00000000000016da         db  0x21 ; '!'
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x00 ; '.'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0x07 ; '.'
00000000000016e1         db  0x00 ; '.'
00000000000016e2         db  0x00 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x25 ; '%'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0x00 ; '.'
00000000000016e9         db  0x00 ; '.'
00000000000016ea         db  0x00 ; '.'
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0xa0 ; '.'
00000000000016f1         db  0xbe ; '.'
00000000000016f2         db  0x21 ; '!'
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x00 ; '.'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x07 ; '.'
00000000000016f9         db  0x00 ; '.'
00000000000016fa         db  0x00 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x27 ; '''
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0x00 ; '.'
0000000000001701         db  0x00 ; '.'
0000000000001702         db  0x00 ; '.'
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0xa8 ; '.'
0000000000001709         db  0xbe ; '.'
000000000000170a         db  0x21 ; '!'
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x00 ; '.'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x07 ; '.'
0000000000001711         db  0x00 ; '.'
0000000000001712         db  0x00 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x28 ; '('
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0x00 ; '.'
0000000000001719         db  0x00 ; '.'
000000000000171a         db  0x00 ; '.'
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0xb0 ; '.'
0000000000001721         db  0xbe ; '.'
0000000000001722         db  0x21 ; '!'
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x00 ; '.'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x07 ; '.'
0000000000001729         db  0x00 ; '.'
000000000000172a         db  0x00 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x29 ; ')'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0x00 ; '.'
0000000000001731         db  0x00 ; '.'
0000000000001732         db  0x00 ; '.'
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0xb8 ; '.'
0000000000001739         db  0xbe ; '.'
000000000000173a         db  0x21 ; '!'
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x00 ; '.'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0x07 ; '.'
0000000000001741         db  0x00 ; '.'
0000000000001742         db  0x00 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x2a ; '*'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0x00 ; '.'
0000000000001749         db  0x00 ; '.'
000000000000174a         db  0x00 ; '.'
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0xc0 ; '.'
0000000000001751         db  0xbe ; '.'
0000000000001752         db  0x21 ; '!'
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x00 ; '.'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0x07 ; '.'
0000000000001759         db  0x00 ; '.'
000000000000175a         db  0x00 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x2b ; '+'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0x00 ; '.'
0000000000001761         db  0x00 ; '.'
0000000000001762         db  0x00 ; '.'
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0xc8 ; '.'
0000000000001769         db  0xbe ; '.'
000000000000176a         db  0x21 ; '!'
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x00 ; '.'
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0x07 ; '.'
0000000000001771         db  0x00 ; '.'
0000000000001772         db  0x00 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x2c ; ','
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0x00 ; '.'
0000000000001779         db  0x00 ; '.'
000000000000177a         db  0x00 ; '.'
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0xd0 ; '.'
0000000000001781         db  0xbe ; '.'
0000000000001782         db  0x21 ; '!'
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x00 ; '.'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0x07 ; '.'
0000000000001789         db  0x00 ; '.'
000000000000178a         db  0x00 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x2d ; '-'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0x00 ; '.'
0000000000001791         db  0x00 ; '.'
0000000000001792         db  0x00 ; '.'
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x00 ; '.'
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0xd8 ; '.'
0000000000001799         db  0xbe ; '.'
000000000000179a         db  0x21 ; '!'
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x00 ; '.'
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0x07 ; '.'
00000000000017a1         db  0x00 ; '.'
00000000000017a2         db  0x00 ; '.'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x2f ; '/'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0x00 ; '.'
00000000000017a9         db  0x00 ; '.'
00000000000017aa         db  0x00 ; '.'
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0xe0 ; '.'
00000000000017b1         db  0xbe ; '.'
00000000000017b2         db  0x21 ; '!'
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x00 ; '.'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0x07 ; '.'
00000000000017b9         db  0x00 ; '.'
00000000000017ba         db  0x00 ; '.'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x30 ; '0'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0x00 ; '.'
00000000000017c1         db  0x00 ; '.'
00000000000017c2         db  0x00 ; '.'
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x00 ; '.'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'
00000000000017c8         db  0xe8 ; '.'
00000000000017c9         db  0xbe ; '.'
00000000000017ca         db  0x21 ; '!'
00000000000017cb         db  0x00 ; '.'
00000000000017cc         db  0x00 ; '.'
00000000000017cd         db  0x00 ; '.'
00000000000017ce         db  0x00 ; '.'
00000000000017cf         db  0x00 ; '.'
00000000000017d0         db  0x07 ; '.'
00000000000017d1         db  0x00 ; '.'
00000000000017d2         db  0x00 ; '.'
00000000000017d3         db  0x00 ; '.'
00000000000017d4         db  0x31 ; '1'
00000000000017d5         db  0x00 ; '.'
00000000000017d6         db  0x00 ; '.'
00000000000017d7         db  0x00 ; '.'
00000000000017d8         db  0x00 ; '.'
00000000000017d9         db  0x00 ; '.'
00000000000017da         db  0x00 ; '.'
00000000000017db         db  0x00 ; '.'
00000000000017dc         db  0x00 ; '.'
00000000000017dd         db  0x00 ; '.'
00000000000017de         db  0x00 ; '.'
00000000000017df         db  0x00 ; '.'
00000000000017e0         db  0xf0 ; '.'
00000000000017e1         db  0xbe ; '.'
00000000000017e2         db  0x21 ; '!'
00000000000017e3         db  0x00 ; '.'
00000000000017e4         db  0x00 ; '.'
00000000000017e5         db  0x00 ; '.'
00000000000017e6         db  0x00 ; '.'
00000000000017e7         db  0x00 ; '.'
00000000000017e8         db  0x07 ; '.'
00000000000017e9         db  0x00 ; '.'
00000000000017ea         db  0x00 ; '.'
00000000000017eb         db  0x00 ; '.'
00000000000017ec         db  0x32 ; '2'
00000000000017ed         db  0x00 ; '.'
00000000000017ee         db  0x00 ; '.'
00000000000017ef         db  0x00 ; '.'
00000000000017f0         db  0x00 ; '.'
00000000000017f1         db  0x00 ; '.'
00000000000017f2         db  0x00 ; '.'
00000000000017f3         db  0x00 ; '.'
00000000000017f4         db  0x00 ; '.'
00000000000017f5         db  0x00 ; '.'
00000000000017f6         db  0x00 ; '.'
00000000000017f7         db  0x00 ; '.'
00000000000017f8         db  0xf8 ; '.'
00000000000017f9         db  0xbe ; '.'
00000000000017fa         db  0x21 ; '!'
00000000000017fb         db  0x00 ; '.'
00000000000017fc         db  0x00 ; '.'
00000000000017fd         db  0x00 ; '.'
00000000000017fe         db  0x00 ; '.'
00000000000017ff         db  0x00 ; '.'
0000000000001800         db  0x07 ; '.'                                         ; DATA XREF=load_buffer.part.5+64
0000000000001801         db  0x00 ; '.'
0000000000001802         db  0x00 ; '.'
0000000000001803         db  0x00 ; '.'
0000000000001804         db  0x33 ; '3'
0000000000001805         db  0x00 ; '.'
0000000000001806         db  0x00 ; '.'
0000000000001807         db  0x00 ; '.'
0000000000001808         db  0x00 ; '.'
0000000000001809         db  0x00 ; '.'
000000000000180a         db  0x00 ; '.'
000000000000180b         db  0x00 ; '.'
000000000000180c         db  0x00 ; '.'
000000000000180d         db  0x00 ; '.'
000000000000180e         db  0x00 ; '.'
000000000000180f         db  0x00 ; '.'
0000000000001810         db  0x00 ; '.'
0000000000001811         db  0xbf ; '.'
0000000000001812         db  0x21 ; '!'
0000000000001813         db  0x00 ; '.'
0000000000001814         db  0x00 ; '.'
0000000000001815         db  0x00 ; '.'
0000000000001816         db  0x00 ; '.'
0000000000001817         db  0x00 ; '.'
0000000000001818         db  0x07 ; '.'
0000000000001819         db  0x00 ; '.'
000000000000181a         db  0x00 ; '.'
000000000000181b         db  0x00 ; '.'
000000000000181c         db  0x34 ; '4'
000000000000181d         db  0x00 ; '.'
000000000000181e         db  0x00 ; '.'
000000000000181f         db  0x00 ; '.'
0000000000001820         db  0x00 ; '.'
0000000000001821         db  0x00 ; '.'
0000000000001822         db  0x00 ; '.'
0000000000001823         db  0x00 ; '.'
0000000000001824         db  0x00 ; '.'
0000000000001825         db  0x00 ; '.'
0000000000001826         db  0x00 ; '.'
0000000000001827         db  0x00 ; '.'
0000000000001828         db  0x08 ; '.'
0000000000001829         db  0xbf ; '.'
000000000000182a         db  0x21 ; '!'
000000000000182b         db  0x00 ; '.'
000000000000182c         db  0x00 ; '.'
000000000000182d         db  0x00 ; '.'
000000000000182e         db  0x00 ; '.'
000000000000182f         db  0x00 ; '.'
0000000000001830         db  0x07 ; '.'
0000000000001831         db  0x00 ; '.'
0000000000001832         db  0x00 ; '.'
0000000000001833         db  0x00 ; '.'
0000000000001834         db  0x35 ; '5'
0000000000001835         db  0x00 ; '.'
0000000000001836         db  0x00 ; '.'
0000000000001837         db  0x00 ; '.'
0000000000001838         db  0x00 ; '.'
0000000000001839         db  0x00 ; '.'
000000000000183a         db  0x00 ; '.'
000000000000183b         db  0x00 ; '.'
000000000000183c         db  0x00 ; '.'
000000000000183d         db  0x00 ; '.'
000000000000183e         db  0x00 ; '.'
000000000000183f         db  0x00 ; '.'
0000000000001840         db  0x10 ; '.'
0000000000001841         db  0xbf ; '.'
0000000000001842         db  0x21 ; '!'
0000000000001843         db  0x00 ; '.'
0000000000001844         db  0x00 ; '.'
0000000000001845         db  0x00 ; '.'
0000000000001846         db  0x00 ; '.'
0000000000001847         db  0x00 ; '.'
0000000000001848         db  0x07 ; '.'
0000000000001849         db  0x00 ; '.'
000000000000184a         db  0x00 ; '.'
000000000000184b         db  0x00 ; '.'
000000000000184c         db  0x36 ; '6'
000000000000184d         db  0x00 ; '.'
000000000000184e         db  0x00 ; '.'
000000000000184f         db  0x00 ; '.'
0000000000001850         db  0x00 ; '.'
0000000000001851         db  0x00 ; '.'
0000000000001852         db  0x00 ; '.'
0000000000001853         db  0x00 ; '.'
0000000000001854         db  0x00 ; '.'
0000000000001855         db  0x00 ; '.'
0000000000001856         db  0x00 ; '.'
0000000000001857         db  0x00 ; '.'
0000000000001858         db  0x18 ; '.'
0000000000001859         db  0xbf ; '.'
000000000000185a         db  0x21 ; '!'
000000000000185b         db  0x00 ; '.'
000000000000185c         db  0x00 ; '.'
000000000000185d         db  0x00 ; '.'
000000000000185e         db  0x00 ; '.'
000000000000185f         db  0x00 ; '.'
0000000000001860         db  0x07 ; '.'
0000000000001861         db  0x00 ; '.'
0000000000001862         db  0x00 ; '.'
0000000000001863         db  0x00 ; '.'
0000000000001864         db  0x37 ; '7'
0000000000001865         db  0x00 ; '.'
0000000000001866         db  0x00 ; '.'
0000000000001867         db  0x00 ; '.'
0000000000001868         db  0x00 ; '.'
0000000000001869         db  0x00 ; '.'
000000000000186a         db  0x00 ; '.'
000000000000186b         db  0x00 ; '.'
000000000000186c         db  0x00 ; '.'
000000000000186d         db  0x00 ; '.'
000000000000186e         db  0x00 ; '.'
000000000000186f         db  0x00 ; '.'
0000000000001870         db  0x20 ; ' '
0000000000001871         db  0xbf ; '.'
0000000000001872         db  0x21 ; '!'
0000000000001873         db  0x00 ; '.'
0000000000001874         db  0x00 ; '.'
0000000000001875         db  0x00 ; '.'
0000000000001876         db  0x00 ; '.'
0000000000001877         db  0x00 ; '.'
0000000000001878         db  0x07 ; '.'
0000000000001879         db  0x00 ; '.'
000000000000187a         db  0x00 ; '.'
000000000000187b         db  0x00 ; '.'
000000000000187c         db  0x38 ; '8'
000000000000187d         db  0x00 ; '.'
000000000000187e         db  0x00 ; '.'
000000000000187f         db  0x00 ; '.'
0000000000001880         db  0x00 ; '.'
0000000000001881         db  0x00 ; '.'
0000000000001882         db  0x00 ; '.'
0000000000001883         db  0x00 ; '.'
0000000000001884         db  0x00 ; '.'
0000000000001885         db  0x00 ; '.'
0000000000001886         db  0x00 ; '.'
0000000000001887         db  0x00 ; '.'
0000000000001888         db  0x28 ; '('
0000000000001889         db  0xbf ; '.'
000000000000188a         db  0x21 ; '!'
000000000000188b         db  0x00 ; '.'
000000000000188c         db  0x00 ; '.'
000000000000188d         db  0x00 ; '.'
000000000000188e         db  0x00 ; '.'
000000000000188f         db  0x00 ; '.'
0000000000001890         db  0x07 ; '.'
0000000000001891         db  0x00 ; '.'
0000000000001892         db  0x00 ; '.'
0000000000001893         db  0x00 ; '.'
0000000000001894         db  0x39 ; '9'
0000000000001895         db  0x00 ; '.'
0000000000001896         db  0x00 ; '.'
0000000000001897         db  0x00 ; '.'
0000000000001898         db  0x00 ; '.'
0000000000001899         db  0x00 ; '.'
000000000000189a         db  0x00 ; '.'
000000000000189b         db  0x00 ; '.'
000000000000189c         db  0x00 ; '.'
000000000000189d         db  0x00 ; '.'
000000000000189e         db  0x00 ; '.'
000000000000189f         db  0x00 ; '.'
00000000000018a0         db  0x30 ; '0'
00000000000018a1         db  0xbf ; '.'
00000000000018a2         db  0x21 ; '!'
00000000000018a3         db  0x00 ; '.'
00000000000018a4         db  0x00 ; '.'
00000000000018a5         db  0x00 ; '.'
00000000000018a6         db  0x00 ; '.'
00000000000018a7         db  0x00 ; '.'
00000000000018a8         db  0x07 ; '.'
00000000000018a9         db  0x00 ; '.'
00000000000018aa         db  0x00 ; '.'
00000000000018ab         db  0x00 ; '.'
00000000000018ac         db  0x3a ; ':'
00000000000018ad         db  0x00 ; '.'
00000000000018ae         db  0x00 ; '.'
00000000000018af         db  0x00 ; '.'
00000000000018b0         db  0x00 ; '.'
00000000000018b1         db  0x00 ; '.'
00000000000018b2         db  0x00 ; '.'
00000000000018b3         db  0x00 ; '.'
00000000000018b4         db  0x00 ; '.'
00000000000018b5         db  0x00 ; '.'
00000000000018b6         db  0x00 ; '.'
00000000000018b7         db  0x00 ; '.'
00000000000018b8         db  0x38 ; '8'
00000000000018b9         db  0xbf ; '.'
00000000000018ba         db  0x21 ; '!'
00000000000018bb         db  0x00 ; '.'
00000000000018bc         db  0x00 ; '.'
00000000000018bd         db  0x00 ; '.'
00000000000018be         db  0x00 ; '.'
00000000000018bf         db  0x00 ; '.'
00000000000018c0         db  0x07 ; '.'
00000000000018c1         db  0x00 ; '.'
00000000000018c2         db  0x00 ; '.'
00000000000018c3         db  0x00 ; '.'
00000000000018c4         db  0x3b ; ';'
00000000000018c5         db  0x00 ; '.'
00000000000018c6         db  0x00 ; '.'
00000000000018c7         db  0x00 ; '.'
00000000000018c8         db  0x00 ; '.'
00000000000018c9         db  0x00 ; '.'
00000000000018ca         db  0x00 ; '.'
00000000000018cb         db  0x00 ; '.'
00000000000018cc         db  0x00 ; '.'
00000000000018cd         db  0x00 ; '.'
00000000000018ce         db  0x00 ; '.'
00000000000018cf         db  0x00 ; '.'
00000000000018d0         db  0x40 ; '@'
00000000000018d1         db  0xbf ; '.'
00000000000018d2         db  0x21 ; '!'
00000000000018d3         db  0x00 ; '.'
00000000000018d4         db  0x00 ; '.'
00000000000018d5         db  0x00 ; '.'
00000000000018d6         db  0x00 ; '.'
00000000000018d7         db  0x00 ; '.'
00000000000018d8         db  0x07 ; '.'
00000000000018d9         db  0x00 ; '.'
00000000000018da         db  0x00 ; '.'
00000000000018db         db  0x00 ; '.'
00000000000018dc         db  0x3c ; '<'
00000000000018dd         db  0x00 ; '.'
00000000000018de         db  0x00 ; '.'
00000000000018df         db  0x00 ; '.'
00000000000018e0         db  0x00 ; '.'
00000000000018e1         db  0x00 ; '.'
00000000000018e2         db  0x00 ; '.'
00000000000018e3         db  0x00 ; '.'
00000000000018e4         db  0x00 ; '.'
00000000000018e5         db  0x00 ; '.'
00000000000018e6         db  0x00 ; '.'
00000000000018e7         db  0x00 ; '.'
00000000000018e8         db  0x48 ; 'H'
00000000000018e9         db  0xbf ; '.'
00000000000018ea         db  0x21 ; '!'
00000000000018eb         db  0x00 ; '.'
00000000000018ec         db  0x00 ; '.'
00000000000018ed         db  0x00 ; '.'
00000000000018ee         db  0x00 ; '.'
00000000000018ef         db  0x00 ; '.'
00000000000018f0         db  0x07 ; '.'
00000000000018f1         db  0x00 ; '.'
00000000000018f2         db  0x00 ; '.'
00000000000018f3         db  0x00 ; '.'
00000000000018f4         db  0x3d ; '='
00000000000018f5         db  0x00 ; '.'
00000000000018f6         db  0x00 ; '.'
00000000000018f7         db  0x00 ; '.'
00000000000018f8         db  0x00 ; '.'
00000000000018f9         db  0x00 ; '.'
00000000000018fa         db  0x00 ; '.'
00000000000018fb         db  0x00 ; '.'
00000000000018fc         db  0x00 ; '.'
00000000000018fd         db  0x00 ; '.'
00000000000018fe         db  0x00 ; '.'
00000000000018ff         db  0x00 ; '.'
0000000000001900         db  0x50 ; 'P'
0000000000001901         db  0xbf ; '.'
0000000000001902         db  0x21 ; '!'
0000000000001903         db  0x00 ; '.'
0000000000001904         db  0x00 ; '.'
0000000000001905         db  0x00 ; '.'
0000000000001906         db  0x00 ; '.'
0000000000001907         db  0x00 ; '.'
0000000000001908         db  0x07 ; '.'
0000000000001909         db  0x00 ; '.'
000000000000190a         db  0x00 ; '.'
000000000000190b         db  0x00 ; '.'
000000000000190c         db  0x3e ; '>'
000000000000190d         db  0x00 ; '.'
000000000000190e         db  0x00 ; '.'
000000000000190f         db  0x00 ; '.'
0000000000001910         db  0x00 ; '.'
0000000000001911         db  0x00 ; '.'
0000000000001912         db  0x00 ; '.'
0000000000001913         db  0x00 ; '.'
0000000000001914         db  0x00 ; '.'
0000000000001915         db  0x00 ; '.'
0000000000001916         db  0x00 ; '.'
0000000000001917         db  0x00 ; '.'
0000000000001918         db  0x58 ; 'X'
0000000000001919         db  0xbf ; '.'
000000000000191a         db  0x21 ; '!'
000000000000191b         db  0x00 ; '.'
000000000000191c         db  0x00 ; '.'
000000000000191d         db  0x00 ; '.'
000000000000191e         db  0x00 ; '.'
000000000000191f         db  0x00 ; '.'
0000000000001920         db  0x07 ; '.'
0000000000001921         db  0x00 ; '.'
0000000000001922         db  0x00 ; '.'
0000000000001923         db  0x00 ; '.'
0000000000001924         db  0x3f ; '?'
0000000000001925         db  0x00 ; '.'
0000000000001926         db  0x00 ; '.'
0000000000001927         db  0x00 ; '.'
0000000000001928         db  0x00 ; '.'
0000000000001929         db  0x00 ; '.'
000000000000192a         db  0x00 ; '.'
000000000000192b         db  0x00 ; '.'
000000000000192c         db  0x00 ; '.'
000000000000192d         db  0x00 ; '.'
000000000000192e         db  0x00 ; '.'
000000000000192f         db  0x00 ; '.'
0000000000001930         db  0x60 ; '`'
0000000000001931         db  0xbf ; '.'
0000000000001932         db  0x21 ; '!'
0000000000001933         db  0x00 ; '.'
0000000000001934         db  0x00 ; '.'
0000000000001935         db  0x00 ; '.'
0000000000001936         db  0x00 ; '.'
0000000000001937         db  0x00 ; '.'
0000000000001938         db  0x07 ; '.'
0000000000001939         db  0x00 ; '.'
000000000000193a         db  0x00 ; '.'
000000000000193b         db  0x00 ; '.'
000000000000193c         db  0x40 ; '@'
000000000000193d         db  0x00 ; '.'
000000000000193e         db  0x00 ; '.'
000000000000193f         db  0x00 ; '.'
0000000000001940         db  0x00 ; '.'
0000000000001941         db  0x00 ; '.'
0000000000001942         db  0x00 ; '.'
0000000000001943         db  0x00 ; '.'
0000000000001944         db  0x00 ; '.'
0000000000001945         db  0x00 ; '.'
0000000000001946         db  0x00 ; '.'
0000000000001947         db  0x00 ; '.'
0000000000001948         db  0x68 ; 'h'
0000000000001949         db  0xbf ; '.'
000000000000194a         db  0x21 ; '!'
000000000000194b         db  0x00 ; '.'
000000000000194c         db  0x00 ; '.'
000000000000194d         db  0x00 ; '.'
000000000000194e         db  0x00 ; '.'
000000000000194f         db  0x00 ; '.'
0000000000001950         db  0x07 ; '.'
0000000000001951         db  0x00 ; '.'
0000000000001952         db  0x00 ; '.'
0000000000001953         db  0x00 ; '.'
0000000000001954         db  0x41 ; 'A'
0000000000001955         db  0x00 ; '.'
0000000000001956         db  0x00 ; '.'
0000000000001957         db  0x00 ; '.'
0000000000001958         db  0x00 ; '.'
0000000000001959         db  0x00 ; '.'
000000000000195a         db  0x00 ; '.'
000000000000195b         db  0x00 ; '.'
000000000000195c         db  0x00 ; '.'
000000000000195d         db  0x00 ; '.'
000000000000195e         db  0x00 ; '.'
000000000000195f         db  0x00 ; '.'
0000000000001960         db  0x70 ; 'p'
0000000000001961         db  0xbf ; '.'
0000000000001962         db  0x21 ; '!'
0000000000001963         db  0x00 ; '.'
0000000000001964         db  0x00 ; '.'
0000000000001965         db  0x00 ; '.'
0000000000001966         db  0x00 ; '.'
0000000000001967         db  0x00 ; '.'
0000000000001968         db  0x07 ; '.'
0000000000001969         db  0x00 ; '.'
000000000000196a         db  0x00 ; '.'
000000000000196b         db  0x00 ; '.'
000000000000196c         db  0x42 ; 'B'
000000000000196d         db  0x00 ; '.'
000000000000196e         db  0x00 ; '.'
000000000000196f         db  0x00 ; '.'
0000000000001970         db  0x00 ; '.'
0000000000001971         db  0x00 ; '.'
0000000000001972         db  0x00 ; '.'
0000000000001973         db  0x00 ; '.'
0000000000001974         db  0x00 ; '.'
0000000000001975         db  0x00 ; '.'
0000000000001976         db  0x00 ; '.'
0000000000001977         db  0x00 ; '.'
0000000000001978         db  0x78 ; 'x'
0000000000001979         db  0xbf ; '.'
000000000000197a         db  0x21 ; '!'
000000000000197b         db  0x00 ; '.'
000000000000197c         db  0x00 ; '.'
000000000000197d         db  0x00 ; '.'
000000000000197e         db  0x00 ; '.'
000000000000197f         db  0x00 ; '.'
0000000000001980         db  0x07 ; '.'
0000000000001981         db  0x00 ; '.'
0000000000001982         db  0x00 ; '.'
0000000000001983         db  0x00 ; '.'
0000000000001984         db  0x43 ; 'C'
0000000000001985         db  0x00 ; '.'
0000000000001986         db  0x00 ; '.'
0000000000001987         db  0x00 ; '.'
0000000000001988         db  0x00 ; '.'
0000000000001989         db  0x00 ; '.'
000000000000198a         db  0x00 ; '.'
000000000000198b         db  0x00 ; '.'
000000000000198c         db  0x00 ; '.'
000000000000198d         db  0x00 ; '.'
000000000000198e         db  0x00 ; '.'
000000000000198f         db  0x00 ; '.'
0000000000001990         db  0x80 ; '.'
0000000000001991         db  0xbf ; '.'
0000000000001992         db  0x21 ; '!'
0000000000001993         db  0x00 ; '.'
0000000000001994         db  0x00 ; '.'
0000000000001995         db  0x00 ; '.'
0000000000001996         db  0x00 ; '.'
0000000000001997         db  0x00 ; '.'
0000000000001998         db  0x07 ; '.'
0000000000001999         db  0x00 ; '.'
000000000000199a         db  0x00 ; '.'
000000000000199b         db  0x00 ; '.'
000000000000199c         db  0x44 ; 'D'
000000000000199d         db  0x00 ; '.'
000000000000199e         db  0x00 ; '.'
000000000000199f         db  0x00 ; '.'
00000000000019a0         db  0x00 ; '.'
00000000000019a1         db  0x00 ; '.'
00000000000019a2         db  0x00 ; '.'
00000000000019a3         db  0x00 ; '.'
00000000000019a4         db  0x00 ; '.'
00000000000019a5         db  0x00 ; '.'
00000000000019a6         db  0x00 ; '.'
00000000000019a7         db  0x00 ; '.'
00000000000019a8         db  0x88 ; '.'
00000000000019a9         db  0xbf ; '.'
00000000000019aa         db  0x21 ; '!'
00000000000019ab         db  0x00 ; '.'
00000000000019ac         db  0x00 ; '.'
00000000000019ad         db  0x00 ; '.'
00000000000019ae         db  0x00 ; '.'
00000000000019af         db  0x00 ; '.'
00000000000019b0         db  0x07 ; '.'
00000000000019b1         db  0x00 ; '.'
00000000000019b2         db  0x00 ; '.'
00000000000019b3         db  0x00 ; '.'
00000000000019b4         db  0x45 ; 'E'
00000000000019b5         db  0x00 ; '.'
00000000000019b6         db  0x00 ; '.'
00000000000019b7         db  0x00 ; '.'
00000000000019b8         db  0x00 ; '.'
00000000000019b9         db  0x00 ; '.'
00000000000019ba         db  0x00 ; '.'
00000000000019bb         db  0x00 ; '.'
00000000000019bc         db  0x00 ; '.'
00000000000019bd         db  0x00 ; '.'
00000000000019be         db  0x00 ; '.'
00000000000019bf         db  0x00 ; '.'
00000000000019c0         db  0x90 ; '.'
00000000000019c1         db  0xbf ; '.'
00000000000019c2         db  0x21 ; '!'
00000000000019c3         db  0x00 ; '.'
00000000000019c4         db  0x00 ; '.'
00000000000019c5         db  0x00 ; '.'
00000000000019c6         db  0x00 ; '.'
00000000000019c7         db  0x00 ; '.'
00000000000019c8         db  0x07 ; '.'
00000000000019c9         db  0x00 ; '.'
00000000000019ca         db  0x00 ; '.'
00000000000019cb         db  0x00 ; '.'
00000000000019cc         db  0x46 ; 'F'
00000000000019cd         db  0x00 ; '.'
00000000000019ce         db  0x00 ; '.'
00000000000019cf         db  0x00 ; '.'
00000000000019d0         db  0x00 ; '.'
00000000000019d1         db  0x00 ; '.'
00000000000019d2         db  0x00 ; '.'
00000000000019d3         db  0x00 ; '.'
00000000000019d4         db  0x00 ; '.'
00000000000019d5         db  0x00 ; '.'
00000000000019d6         db  0x00 ; '.'
00000000000019d7         db  0x00 ; '.'
00000000000019d8         db  0x98 ; '.'
00000000000019d9         db  0xbf ; '.'
00000000000019da         db  0x21 ; '!'
00000000000019db         db  0x00 ; '.'
00000000000019dc         db  0x00 ; '.'
00000000000019dd         db  0x00 ; '.'
00000000000019de         db  0x00 ; '.'
00000000000019df         db  0x00 ; '.'
00000000000019e0         db  0x07 ; '.'
00000000000019e1         db  0x00 ; '.'
00000000000019e2         db  0x00 ; '.'
00000000000019e3         db  0x00 ; '.'
00000000000019e4         db  0x47 ; 'G'
00000000000019e5         db  0x00 ; '.'
00000000000019e6         db  0x00 ; '.'
00000000000019e7         db  0x00 ; '.'
00000000000019e8         db  0x00 ; '.'
00000000000019e9         db  0x00 ; '.'
00000000000019ea         db  0x00 ; '.'
00000000000019eb         db  0x00 ; '.'
00000000000019ec         db  0x00 ; '.'
00000000000019ed         db  0x00 ; '.'
00000000000019ee         db  0x00 ; '.'
00000000000019ef         db  0x00 ; '.'
00000000000019f0         db  0xa0 ; '.'
00000000000019f1         db  0xbf ; '.'
00000000000019f2         db  0x21 ; '!'
00000000000019f3         db  0x00 ; '.'
00000000000019f4         db  0x00 ; '.'
00000000000019f5         db  0x00 ; '.'
00000000000019f6         db  0x00 ; '.'
00000000000019f7         db  0x00 ; '.'
00000000000019f8         db  0x07 ; '.'
00000000000019f9         db  0x00 ; '.'
00000000000019fa         db  0x00 ; '.'
00000000000019fb         db  0x00 ; '.'
00000000000019fc         db  0x48 ; 'H'
00000000000019fd         db  0x00 ; '.'
00000000000019fe         db  0x00 ; '.'
00000000000019ff         db  0x00 ; '.'
0000000000001a00         db  0x00 ; '.'
0000000000001a01         db  0x00 ; '.'
0000000000001a02         db  0x00 ; '.'
0000000000001a03         db  0x00 ; '.'
0000000000001a04         db  0x00 ; '.'
0000000000001a05         db  0x00 ; '.'
0000000000001a06         db  0x00 ; '.'
0000000000001a07         db  0x00 ; '.'
0000000000001a08         db  0xa8 ; '.'
0000000000001a09         db  0xbf ; '.'
0000000000001a0a         db  0x21 ; '!'
0000000000001a0b         db  0x00 ; '.'
0000000000001a0c         db  0x00 ; '.'
0000000000001a0d         db  0x00 ; '.'
0000000000001a0e         db  0x00 ; '.'
0000000000001a0f         db  0x00 ; '.'
0000000000001a10         db  0x07 ; '.'
0000000000001a11         db  0x00 ; '.'
0000000000001a12         db  0x00 ; '.'
0000000000001a13         db  0x00 ; '.'
0000000000001a14         db  0x4a ; 'J'
0000000000001a15         db  0x00 ; '.'
0000000000001a16         db  0x00 ; '.'
0000000000001a17         db  0x00 ; '.'
0000000000001a18         db  0x00 ; '.'
0000000000001a19         db  0x00 ; '.'
0000000000001a1a         db  0x00 ; '.'
0000000000001a1b         db  0x00 ; '.'
0000000000001a1c         db  0x00 ; '.'
0000000000001a1d         db  0x00 ; '.'
0000000000001a1e         db  0x00 ; '.'
0000000000001a1f         db  0x00 ; '.'
0000000000001a20         db  0xb0 ; '.'
0000000000001a21         db  0xbf ; '.'
0000000000001a22         db  0x21 ; '!'
0000000000001a23         db  0x00 ; '.'
0000000000001a24         db  0x00 ; '.'
0000000000001a25         db  0x00 ; '.'
0000000000001a26         db  0x00 ; '.'
0000000000001a27         db  0x00 ; '.'
0000000000001a28         db  0x07 ; '.'
0000000000001a29         db  0x00 ; '.'
0000000000001a2a         db  0x00 ; '.'
0000000000001a2b         db  0x00 ; '.'
0000000000001a2c         db  0x4b ; 'K'
0000000000001a2d         db  0x00 ; '.'
0000000000001a2e         db  0x00 ; '.'
0000000000001a2f         db  0x00 ; '.'
0000000000001a30         db  0x00 ; '.'
0000000000001a31         db  0x00 ; '.'
0000000000001a32         db  0x00 ; '.'
0000000000001a33         db  0x00 ; '.'
0000000000001a34         db  0x00 ; '.'
0000000000001a35         db  0x00 ; '.'
0000000000001a36         db  0x00 ; '.'
0000000000001a37         db  0x00 ; '.'
0000000000001a38         db  0xb8 ; '.'
0000000000001a39         db  0xbf ; '.'
0000000000001a3a         db  0x21 ; '!'
0000000000001a3b         db  0x00 ; '.'
0000000000001a3c         db  0x00 ; '.'
0000000000001a3d         db  0x00 ; '.'
0000000000001a3e         db  0x00 ; '.'
0000000000001a3f         db  0x00 ; '.'
0000000000001a40         db  0x07 ; '.'
0000000000001a41         db  0x00 ; '.'
0000000000001a42         db  0x00 ; '.'
0000000000001a43         db  0x00 ; '.'
0000000000001a44         db  0x4d ; 'M'
0000000000001a45         db  0x00 ; '.'
0000000000001a46         db  0x00 ; '.'
0000000000001a47         db  0x00 ; '.'
0000000000001a48         db  0x00 ; '.'
0000000000001a49         db  0x00 ; '.'
0000000000001a4a         db  0x00 ; '.'
0000000000001a4b         db  0x00 ; '.'
0000000000001a4c         db  0x00 ; '.'
0000000000001a4d         db  0x00 ; '.'
0000000000001a4e         db  0x00 ; '.'
0000000000001a4f         db  0x00 ; '.'
0000000000001a50         db  0xc0 ; '.'
0000000000001a51         db  0xbf ; '.'
0000000000001a52         db  0x21 ; '!'
0000000000001a53         db  0x00 ; '.'
0000000000001a54         db  0x00 ; '.'
0000000000001a55         db  0x00 ; '.'
0000000000001a56         db  0x00 ; '.'
0000000000001a57         db  0x00 ; '.'
0000000000001a58         db  0x07 ; '.'
0000000000001a59         db  0x00 ; '.'
0000000000001a5a         db  0x00 ; '.'
0000000000001a5b         db  0x00 ; '.'
0000000000001a5c         db  0x4e ; 'N'
0000000000001a5d         db  0x00 ; '.'
0000000000001a5e         db  0x00 ; '.'
0000000000001a5f         db  0x00 ; '.'
0000000000001a60         db  0x00 ; '.'
0000000000001a61         db  0x00 ; '.'
0000000000001a62         db  0x00 ; '.'
0000000000001a63         db  0x00 ; '.'
0000000000001a64         db  0x00 ; '.'
0000000000001a65         db  0x00 ; '.'
0000000000001a66         db  0x00 ; '.'
0000000000001a67         db  0x00 ; '.'
0000000000001a68         db  0xc8 ; '.'
0000000000001a69         db  0xbf ; '.'
0000000000001a6a         db  0x21 ; '!'
0000000000001a6b         db  0x00 ; '.'
0000000000001a6c         db  0x00 ; '.'
0000000000001a6d         db  0x00 ; '.'
0000000000001a6e         db  0x00 ; '.'
0000000000001a6f         db  0x00 ; '.'
0000000000001a70         db  0x07 ; '.'
0000000000001a71         db  0x00 ; '.'
0000000000001a72         db  0x00 ; '.'
0000000000001a73         db  0x00 ; '.'
0000000000001a74         db  0x4f ; 'O'
0000000000001a75         db  0x00 ; '.'
0000000000001a76         db  0x00 ; '.'
0000000000001a77         db  0x00 ; '.'
0000000000001a78         db  0x00 ; '.'
0000000000001a79         db  0x00 ; '.'
0000000000001a7a         db  0x00 ; '.'
0000000000001a7b         db  0x00 ; '.'
0000000000001a7c         db  0x00 ; '.'
0000000000001a7d         db  0x00 ; '.'
0000000000001a7e         db  0x00 ; '.'
0000000000001a7f         db  0x00 ; '.'
0000000000001a80         db  0xd0 ; '.'
0000000000001a81         db  0xbf ; '.'
0000000000001a82         db  0x21 ; '!'
0000000000001a83         db  0x00 ; '.'
0000000000001a84         db  0x00 ; '.'
0000000000001a85         db  0x00 ; '.'
0000000000001a86         db  0x00 ; '.'
0000000000001a87         db  0x00 ; '.'
0000000000001a88         db  0x07 ; '.'
0000000000001a89         db  0x00 ; '.'
0000000000001a8a         db  0x00 ; '.'
0000000000001a8b         db  0x00 ; '.'
0000000000001a8c         db  0x50 ; 'P'
0000000000001a8d         db  0x00 ; '.'
0000000000001a8e         db  0x00 ; '.'
0000000000001a8f         db  0x00 ; '.'
0000000000001a90         db  0x00 ; '.'
0000000000001a91         db  0x00 ; '.'
0000000000001a92         db  0x00 ; '.'
0000000000001a93         db  0x00 ; '.'
0000000000001a94         db  0x00 ; '.'
0000000000001a95         db  0x00 ; '.'
0000000000001a96         db  0x00 ; '.'
0000000000001a97         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x1a98; 0x1aaf[ (23 bytes)
        ; File offset : [6808; 6831[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000001a98         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
0000000000001a9c         mov        rax, qword [qword_21bfe8]                   ; qword_21bfe8
0000000000001aa3         test       rax, rax
0000000000001aa6         je         loc_1aaa

0000000000001aa8         call       rax

                     loc_1aaa:
0000000000001aaa         add        rsp, 0x8                                    ; CODE XREF=_init+14
0000000000001aae         ret
                        ; endp
0000000000001aaf         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x1ab0; 0x1f70[ (1216 bytes)
        ; File offset : [6832; 8048[ (1216 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_1ab0:
0000000000001ab0         push       qword [qword_21bd70]                        ; Begin of unwind block (FDE at 0x184dc), qword_21bd70, CODE XREF=sub_1ac6+5
0000000000001ab6         jmp        qword [qword_21bd70+8]                      ; 0x21bd78
                        ; endp
0000000000001abc         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_toupper_loc:        // __ctype_toupper_loc
0000000000001ac0         jmp        qword [__ctype_toupper_loc@GOT]             ; __ctype_toupper_loc, __ctype_toupper_loc@GOT, CODE XREF=build_upper_buffer+29, build_wcs_upper_buffer+808
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ac6:
0000000000001ac6         push       0x0
0000000000001acb         jmp        loc_1ab0


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_sigprocmask:        // sigprocmask
0000000000001ad0         jmp        qword [sigprocmask@GOT]                     ; sigprocmask, sigprocmask@GOT, CODE XREF=cleanup_fatal+47, cleanup_fatal+80, close_output_file+205, close_output_file+266, create_output_file+127, create_output_file+196
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ad6:
0000000000001ad6         push       0x1
0000000000001adb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___snprintf_chk:        // __snprintf_chk
0000000000001ae0         jmp        qword [__snprintf_chk@GOT]                  ; __snprintf_chk, __snprintf_chk@GOT, CODE XREF=main+2663
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ae6:
0000000000001ae6         push       0x2
0000000000001aeb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_raise:        // raise
0000000000001af0         jmp        qword [raise@GOT]                           ; raise, raise@GOT, CODE XREF=interrupt_handler+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1af6:
0000000000001af6         push       0x3
0000000000001afb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
0000000000001b00         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=free_buffer.isra.4+31, free_buffer.isra.4+56, load_buffer.part.5+490, load_buffer.part.5+741, load_buffer.part.5+784, remove_line+29, quotearg_n_options+277, quotearg_free+55, quotearg_free+82, quotearg_free+120, xrealloc+40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b06:
0000000000001b06         push       0x4
0000000000001b0b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
0000000000001b10         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=set_program_name+154, sub_4e20+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, sub_152b0+94, rpl_regerror+112
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b16:
0000000000001b16         push       0x5
0000000000001b1b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
0000000000001b20         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=main+2763, main+3419, delete_all_files.part.0+109, close_output_file+227, close_output_file+348, save_line_to_file+97, create_output_file+157, load_buffer.part.5+616, get_first_line_in_buffer+78, close_stdout+22, fd_reopen+48
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b26:
0000000000001b26         push       0x6
0000000000001b2b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_unlink:        // unlink
0000000000001b30         jmp        qword [unlink@GOT]                          ; unlink, unlink@GOT, CODE XREF=delete_all_files.part.0+74, close_output_file+220
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b36:
0000000000001b36         push       0x7
0000000000001b3b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
0000000000001b40         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+732, usage+925
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b46:
0000000000001b46         push       0x8
0000000000001b4b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
0000000000001b50         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b56:
0000000000001b56         push       0x9
0000000000001b5b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcpy:        // strcpy
0000000000001b60         jmp        qword [strcpy@GOT]                          ; strcpy, strcpy@GOT, CODE XREF=make_filename+20
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b66:
0000000000001b66         push       0xa
0000000000001b6b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
0000000000001b70         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b76:
0000000000001b76         push       0xb
0000000000001b7b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_sigaction:        // sigaction
0000000000001b80         jmp        qword [sigaction@GOT]                       ; sigaction, sigaction@GOT, CODE XREF=main+1338, main+1463
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b86:
0000000000001b86         push       0xc
0000000000001b8b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fcntl:        // fcntl
0000000000001b90         jmp        qword [fcntl@GOT]                           ; fcntl, fcntl@GOT, CODE XREF=rpl_fcntl+128, rpl_fcntl+212, rpl_fcntl+320, rpl_fcntl+407, rpl_fcntl+423, rpl_fcntl+460, rpl_fcntl+483, rpl_fcntl+559, rpl_fcntl+606
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b96:
0000000000001b96         push       0xd
0000000000001b9b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001ba0         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+101
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ba6:
0000000000001ba6         push       0xe
0000000000001bab         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtol_internal:        // __strtol_internal
0000000000001bb0         jmp        qword [__strtol_internal@GOT]               ; __strtol_internal, __strtol_internal@GOT, CODE XREF=xstrtoimax+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bb6:
0000000000001bb6         push       0xf
0000000000001bbb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswctype:        // iswctype
0000000000001bc0         jmp        qword [iswctype@GOT]                        ; iswctype, iswctype@GOT, CODE XREF=check_node_accept_bytes.isra.31+217
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bc6:
0000000000001bc6         push       0x10
0000000000001bcb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000001bd0         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bd6:
0000000000001bd6         push       0x11
0000000000001bdb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000001be0         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1be6:
0000000000001be6         push       0x12
0000000000001beb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
0000000000001bf0         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=regexp_error+75, regexp_error+141, main+355, main+1257, main+1876, main+2755, main+2850, main+3010, main+3049, main+3089, main+3140
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bf6:
0000000000001bf6         push       0x13
0000000000001bfb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
0000000000001c00         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=quotearg_buffer_restyled+108, re_compile_internal+290
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c06:
0000000000001c06         push       0x14
0000000000001c0b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000001c10         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=make_filename+58, make_filename+133, quotearg_buffer_restyled+343, sub_4e20+411, sub_4e20+1742, xstrdup+4, build_collating_symbol.isra.28+15, rpl_regcomp+147, rpl_regerror+60, rpl_regexec+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c16:
0000000000001c16         push       0x15
0000000000001c1b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000001c20         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=main+3392, close_output_file+321, create_output_file+248, sub_4e20+2739, quotearg_n_style+137, quotearg_n_style_mem+133, quotearg_char_mem+147, quotearg_n_style_colon+137, quotearg_n_custom_mem+140, version_etc_va+101, version_etc+192
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c26:
0000000000001c26         push       0x16
0000000000001c2b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
0000000000001c30         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+212
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c36:
0000000000001c36         push       0x17
0000000000001c3b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001c40         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c46:
0000000000001c46         push       0x18
0000000000001c4b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dup2:        // dup2
0000000000001c50         jmp        qword [dup2@GOT]                            ; dup2, dup2@GOT, CODE XREF=fd_reopen+40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c56:
0000000000001c56         push       0x19
0000000000001c5b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
0000000000001c60         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=xstrtoimax+236, xstrtoimax+271, xstrtoimax+323, xstrtoumax+291, xstrtoumax+323, xstrtoumax+380
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c66:
0000000000001c66         push       0x1a
0000000000001c6b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001c70         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=main+1066, set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c76:
0000000000001c76         push       0x1b
0000000000001c7b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001c80         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c86:
0000000000001c86         push       0x1c
0000000000001c8b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000001c90         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=find_line+129, xstrtoimax+1705, xstrtoumax+927, pop_fail_stack.isra.25+143, re_search_internal+4167, re_search_internal+5451, sub_13290+2836, sub_14bd0+37, sub_152b0+125, sub_152b0+156, sub_152b0+187
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c96:
0000000000001c96         push       0x1d
0000000000001c9b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtoul_internal:        // __strtoul_internal
0000000000001ca0         jmp        qword [__strtoul_internal@GOT]              ; __strtoul_internal, __strtoul_internal@GOT, CODE XREF=xstrtoumax+142
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ca6:
0000000000001ca6         push       0x1e
0000000000001cab         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001cb0         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=quotearg_n_options+153, xzalloc+18, clean_state_log_if_needed+120, re_string_reconstruct+1128, re_string_reconstruct+1876, check_arrival+1782, get_subexp_sub.isra.32+344, sift_states_backward+744, re_search_internal+2450
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cb6:
0000000000001cb6         push       0x1f
0000000000001cbb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_close:        // close
0000000000001cc0         jmp        qword [close@GOT]                           ; close, close@GOT, CODE XREF=main+2902, fd_reopen+61, fopen_safer+106, rpl_fcntl+510
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cc6:
0000000000001cc6         push       0x20
0000000000001ccb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputc:        // fputc
0000000000001cd0         jmp        qword [fputc@GOT]                           ; fputc, fputc@GOT, CODE XREF=regexp_error+185, handle_line_error.isra.1+185
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cd6:
0000000000001cd6         push       0x21
0000000000001cdb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memchr:        // memchr
0000000000001ce0         jmp        qword [memchr@GOT]                          ; memchr, memchr@GOT, CODE XREF=load_buffer.part.5+324
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ce6:
0000000000001ce6         push       0x22
0000000000001ceb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_read:        // read
0000000000001cf0         jmp        qword [read@GOT]                            ; read, read@GOT, CODE XREF=safe_read+33
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cf6:
0000000000001cf6         push       0x23
0000000000001cfb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000001d00         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=quotearg_buffer_restyled+410, set_regs+1041, transit_state_bkref.isra.34+663
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d06:
0000000000001d06         push       0x24
0000000000001d0b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wctype:        // wctype
0000000000001d10         jmp        qword [wctype@GOT]                          ; wctype, wctype@GOT, CODE XREF=build_charclass.isra.29+103
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d16:
0000000000001d16         push       0x25
0000000000001d1b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000001d20         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=usage+157, usage+194, usage+231, usage+268, usage+305, usage+342, usage+379, usage+416, usage+460, usage+1040, version_etc_arn+135
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d26:
0000000000001d26         push       0x26
0000000000001d2b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000001d30         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26, re_acquire_state_context+202, re_acquire_state+160, check_subexp_matching_top.isra.18+156, build_trtable+746, build_trtable+2611, build_trtable+2830, build_charclass_op+70, build_charclass_op+97, transit_state_bkref.isra.34+1726, transit_state_bkref.isra.34+1865
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d36:
0000000000001d36         push       0x27
0000000000001d3b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
0000000000001d40         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=main+784, build_charclass.isra.29+1480, build_charclass.isra.29+1620, build_charclass.isra.29+1758
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d46:
0000000000001d46         push       0x28
0000000000001d4b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_signal:        // signal
0000000000001d50         jmp        qword [signal@GOT]                          ; signal, signal@GOT, CODE XREF=interrupt_handler+28
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d56:
0000000000001d56         push       0x29
0000000000001d5b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_sigemptyset:        // sigemptyset
0000000000001d60         jmp        qword [sigemptyset@GOT]                     ; sigemptyset, sigemptyset@GOT, CODE XREF=main+1321
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d66:
0000000000001d66         push       0x2a
0000000000001d6b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000001d70         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=load_buffer.part.5+541, xmemdup+35, build_wcs_upper_buffer+348, build_wcs_upper_buffer+697, build_wcs_upper_buffer+796, build_wcs_upper_buffer+1071, build_wcs_upper_buffer+1340, re_node_set_merge+320, re_node_set_merge+357, re_node_set_merge+458, re_node_set_add_intersect+341
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d76:
0000000000001d76         push       0x2b
0000000000001d7b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000001d80         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=fopen_safer+23, rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d86:
0000000000001d86         push       0x2c
0000000000001d8b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswalnum:        // iswalnum
0000000000001d90         jmp        qword [iswalnum@GOT]                        ; iswalnum, iswalnum@GOT, CODE XREF=re_string_context_at+202, re_string_reconstruct+1790, peek_token+144, peek_token+440
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d96:
0000000000001d96         push       0x2d
0000000000001d9b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000001da0         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=xmalloc+4, re_node_set_insert+76, register_state+48, build_wcs_upper_buffer+1482, calc_eclosure_iter+87, check_arrival_expand_ecl+67, create_token_tree.isra.16+160, re_node_set_init_copy+38, re_node_set_init_union+74, re_acquire_state_context+629, expand_bkref_cache+632
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1da6:
0000000000001da6         push       0x2e
0000000000001dab         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wcrtomb:        // wcrtomb
0000000000001db0         jmp        qword [wcrtomb@GOT]                         ; wcrtomb, wcrtomb@GOT, CODE XREF=build_wcs_upper_buffer+313, build_wcs_upper_buffer+668, re_compile_fastmap_iter.isra.30+534, re_compile_fastmap_iter.isra.30+698, re_compile_fastmap_iter.isra.30+797
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1db6:
0000000000001db6         push       0x2f
0000000000001dbb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000001dc0         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dc6:
0000000000001dc6         push       0x30
0000000000001dcb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001dd0         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=re_compile_internal+306, locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dd6:
0000000000001dd6         push       0x31
0000000000001ddb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001de0         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1de6:
0000000000001de6         push       0x32
0000000000001deb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite_unlocked:        // fwrite_unlocked
0000000000001df0         jmp        qword [fwrite_unlocked@GOT]                 ; fwrite_unlocked, fwrite_unlocked@GOT, CODE XREF=save_line_to_file+28
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1df6:
0000000000001df6         push       0x33
0000000000001dfb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001e00         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17, re_string_realloc_buffers+48, re_string_realloc_buffers+79, re_string_realloc_buffers+127, re_node_set_insert_last+74, re_node_set_insert+270, register_state+209, extend_buffers+95, re_dfa_add_node+247, re_dfa_add_node+278, re_dfa_add_node+302
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e06:
0000000000001e06         push       0x34
0000000000001e0b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fdopen:        // fdopen
0000000000001e10         jmp        qword [fdopen@GOT]                          ; fdopen, fdopen@GOT, CODE XREF=fopen_safer+80
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e16:
0000000000001e16         push       0x35
0000000000001e1b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001e20         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+70, usage+707, usage+900, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e26:
0000000000001e26         push       0x36
0000000000001e2b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001e30         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=usage+120, usage+695, usage+788, usage+849, usage+888, usage+991, emit_bug_reporting_address+37, emit_bug_reporting_address+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e36:
0000000000001e36         push       0x37
0000000000001e3b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_btowc:        // btowc
0000000000001e40         jmp        qword [btowc@GOT]                           ; btowc, btowc@GOT, CODE XREF=sub_13290+1827, sub_13290+2551, re_compile_internal+1864
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e46:
0000000000001e46         push       0x38
0000000000001e4b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memmove:        // memmove
0000000000001e50         jmp        qword [memmove@GOT]                         ; memmove, memmove@GOT, CODE XREF=re_string_reconstruct+400, re_string_reconstruct+856, re_string_reconstruct+876, re_string_reconstruct+1179
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e56:
0000000000001e56         push       0x39
0000000000001e5b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000001e60         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+1277, main+1893, main+2783, main+2870, main+3030, main+3066, main+3109, main+3160, main+3210, main+3257, main+3327
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e66:
0000000000001e66         push       0x3a
0000000000001e6b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_open:        // open
0000000000001e70         jmp        qword [open@GOT]                            ; open, open@GOT, CODE XREF=fd_reopen+21
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e76:
0000000000001e76         push       0x3b
0000000000001e7b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000001e80         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e86:
0000000000001e86         push       0x3c
0000000000001e8b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fopen:        // fopen
0000000000001e90         jmp        qword [fopen@GOT]                           ; fopen, fopen@GOT, CODE XREF=fopen_safer+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e96:
0000000000001e96         push       0x3d
0000000000001e9b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_towlower:        // towlower
0000000000001ea0         jmp        qword [towlower@GOT]                        ; towlower, towlower@GOT, CODE XREF=re_compile_fastmap_iter.isra.30+517, re_compile_fastmap_iter.isra.30+782
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ea6:
0000000000001ea6         push       0x3e
0000000000001eab         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_towupper:        // towupper
0000000000001eb0         jmp        qword [towupper@GOT]                        ; towupper, towupper@GOT, CODE XREF=build_wcs_upper_buffer+268, build_wcs_upper_buffer+640
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1eb6:
0000000000001eb6         push       0x3f
0000000000001ebb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000001ec0         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ec6:
0000000000001ec6         push       0x40
0000000000001ecb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_sigismember:        // sigismember
0000000000001ed0         jmp        qword [sigismember@GOT]                     ; sigismember, sigismember@GOT, CODE XREF=main+1442
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ed6:
0000000000001ed6         push       0x41
0000000000001edb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000001ee0         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+556, main+1725, cleanup_fatal+90, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ee6:
0000000000001ee6         push       0x42
0000000000001eeb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000001ef0         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ef6:
0000000000001ef6         push       0x43
0000000000001efb         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000001f00         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=regexp_error+103, regexp_error+166, close_output_file+181, handle_line_error.isra.1+100, handle_line_error.isra.1+163, usage+81, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332, version_etc_arn+492
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f06:
0000000000001f06         push       0x44
0000000000001f0b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000001f10         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_4e20+616, build_wcs_upper_buffer+557
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f16:
0000000000001f16         push       0x45
0000000000001f1b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000001f20         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_4e20+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f26:
0000000000001f26         push       0x46
0000000000001f2b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_sigaddset:        // sigaddset
0000000000001f30         jmp        qword [sigaddset@GOT]                       ; sigaddset, sigaddset@GOT, CODE XREF=main+1357
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f36:
0000000000001f36         push       0x47
0000000000001f3b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_tolower_loc:        // __ctype_tolower_loc
0000000000001f40         jmp        qword [__ctype_tolower_loc@GOT]             ; __ctype_tolower_loc, __ctype_tolower_loc@GOT, CODE XREF=re_compile_fastmap_iter.isra.30+287, re_compile_fastmap_iter.isra.30+729, re_compile_fastmap_iter.isra.30+976
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f46:
0000000000001f46         push       0x48
0000000000001f4b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000001f50         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=main+2817, sub_4bc0+51, xstrtoumax+85, build_charclass.isra.29+168, build_charclass.isra.29+248, build_charclass.isra.29+480, build_charclass.isra.29+554, build_charclass.isra.29+686, build_charclass.isra.29+819, build_charclass.isra.29+973, build_charclass.isra.29+1126
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f56:
0000000000001f56         push       0x49
0000000000001f5b         jmp        0x1ab0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___sprintf_chk:        // __sprintf_chk
0000000000001f60         jmp        qword [__sprintf_chk@GOT]                   ; __sprintf_chk, __sprintf_chk@GOT, CODE XREF=make_filename+87, make_filename+169
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f66:
0000000000001f66         push       0x4a
0000000000001f6b         jmp        0x1ab0
                        ; endp


        ; Section .plt.got
        ; Range: [0x1f70; 0x1f78[ (8 bytes)
        ; File offset : [8048; 8056[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_21bff8:        // qword_21bff8
0000000000001f70         jmp        qword [qword_21bff8]                        ; qword, End of unwind block (FDE at 0x184dc), Begin of unwind block (FDE at 0x18504), qword_21bff8, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000001f76         align      8
0000000000001f78         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x18504)
0000000000001f79         db  0x00 ; '.'
0000000000001f7a         db  0x00 ; '.'
0000000000001f7b         db  0x00 ; '.'
0000000000001f7c         db  0x00 ; '.'
0000000000001f7d         db  0x00 ; '.'
0000000000001f7e         db  0x00 ; '.'
0000000000001f7f         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x1f80; 0x15f7e[ (81918 bytes)
        ; File offset : [8064; 89982[ (81918 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_88: int64_t, -136
        ;    var_A0: int8_t, -160
        ;    var_B8: int32_t, -184
        ;    var_138: int8_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_150: int64_t, -336
        ;    var_158: int64_t, -344
        ;    var_160: int64_t, -352
        ;    var_168: int64_t, -360
        ;    var_170: int64_t, -368
        ;    var_178: int64_t, -376


                     regexp_error:
0000000000001f80         push       r13                                         ; Begin of unwind block (FDE at 0x187e8), CODE XREF=main+3654
0000000000001f82         push       r12
0000000000001f84         push       rbp
0000000000001f85         push       rbx
0000000000001f86         mov        ebp, edx
0000000000001f88         mov        rbx, rsi
0000000000001f8b         sub        rsp, 0x28
0000000000001f8f         movsxd     rdx, dword [rdi+0x18]
0000000000001f93         mov        rax, qword [fs:0x28]
0000000000001f9c         mov        qword [rsp+0x48+var_30], rax
0000000000001fa1         xor        eax, eax
0000000000001fa3         mov        rax, qword [global_argv]                    ; global_argv
0000000000001faa         mov        rdi, qword [rax+rdx*8]
0000000000001fae         call       quote                                       ; quote
0000000000001fb3         lea        rsi, qword [aSSMatchNotFoun]                ; argument "msgid" for method j_dcgettext, "%s: %s: match not found"
0000000000001fba         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001fbc         mov        r12, qword [program_name]                   ; program_name
0000000000001fc3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001fc8         mov        r13, rax
0000000000001fcb         call       j_dcgettext                                 ; dcgettext
0000000000001fd0         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000001fd7         mov        rdx, rax
0000000000001fda         mov        r8, r13
0000000000001fdd         xor        eax, eax
0000000000001fdf         mov        rcx, r12
0000000000001fe2         mov        esi, 0x1
0000000000001fe7         call       j___fprintf_chk                             ; __fprintf_chk
0000000000001fec         test       rbx, rbx
0000000000001fef         je         loc_202d

0000000000001ff1         mov        rsi, rsp
0000000000001ff4         mov        rdi, rbx
0000000000001ff7         call       umaxtostr                                   ; umaxtostr
0000000000001ffc         lea        rsi, qword [aOnRepetitionSn]                ; argument "msgid" for method j_dcgettext, " on repetition %s\\n"
0000000000002003         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002005         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000200a         mov        rbx, rax
000000000000200d         call       j_dcgettext                                 ; dcgettext
0000000000002012         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000002019         mov        rdx, rax
000000000000201c         mov        rcx, rbx
000000000000201f         mov        esi, 0x1
0000000000002024         xor        eax, eax
0000000000002026         call       j___fprintf_chk                             ; __fprintf_chk
000000000000202b         jmp        loc_203e

                     loc_202d:
000000000000202d         mov        rsi, qword [stderr@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputc, stderr@@GLIBC_2.2.5, CODE XREF=regexp_error+111
0000000000002034         mov        edi, 0xa                                    ; argument "__c" for method j_fputc
0000000000002039         call       j_fputc                                     ; fputc

                     loc_203e:
000000000000203e         test       bpl, bpl                                    ; CODE XREF=regexp_error+171
0000000000002041         jne        loc_204d

0000000000002043         call       dump_rest_of_file                           ; dump_rest_of_file
0000000000002048         call       close_output_file                           ; close_output_file

                     loc_204d:
000000000000204d         call       cleanup_fatal                               ; cleanup_fatal, CODE XREF=regexp_error+193
0000000000002052         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x187e8)
000000000000205c         nop        dword [rax]
                     main:
0000000000002060         push       r15                                         ; Begin of unwind block (FDE at 0x18890), DATA XREF=_start+29
0000000000002062         push       r14
0000000000002064         push       r13
0000000000002066         push       r12
0000000000002068         mov        r12, rsi
000000000000206b         push       rbp
000000000000206c         push       rbx
000000000000206d         lea        rbx, qword [longopts]                       ; longopts
0000000000002074         sub        rsp, 0x108
000000000000207b         mov        dword [rsp+0x180+var_178], edi
000000000000207f         mov        rdi, qword [rsi]
0000000000002082         mov        rax, qword [fs:0x28]
000000000000208b         mov        qword [rsp+0x180+var_88], rax
0000000000002093         xor        eax, eax
0000000000002095         call       set_program_name                            ; set_program_name
000000000000209a         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0x170e1
00000000000020a1         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
00000000000020a6         call       j_setlocale                                 ; setlocale
00000000000020ab         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
00000000000020b2         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
00000000000020b9         call       j_bindtextdomain                            ; bindtextdomain
00000000000020be         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
00000000000020c5         call       j_textdomain                                ; textdomain
00000000000020ca         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
00000000000020d1         call       atexit                                      ; atexit
00000000000020d6         lea        rax, qword [aUsrlocalsharel+24]             ; 0x160db
00000000000020dd         mov        byte [remove_files], 0x1                    ; remove_files
00000000000020e4         mov        qword [global_argv], r12                    ; global_argv
00000000000020eb         mov        qword [controls], 0x0                       ; controls
00000000000020f6         mov        qword [control_used], 0x0                   ; control_used
0000000000002101         mov        byte [suppress_count], 0x0                  ; suppress_count
0000000000002108         mov        byte [suppress_matched], 0x0                ; suppress_matched
000000000000210f         mov        qword [prefix], rax                         ; prefix
0000000000002116         nop        word [cs:rax+rax]

                     loc_2120:
0000000000002120         mov        edi, dword [rsp+0x180+var_178]              ; argument "___argc" for method j_getopt_long, CODE XREF=main+273, main+329, main+398, main+419, main+439, main+455, main+478
0000000000002124         lea        rdx, qword [aFbknsqz]                       ; argument "__shortopts" for method j_getopt_long, "f:b:kn:sqz"
000000000000212b         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long
000000000000212e         mov        rcx, rbx                                    ; argument "__longopts" for method j_getopt_long
0000000000002131         mov        rsi, r12                                    ; argument "___argv" for method j_getopt_long
0000000000002134         call       j_getopt_long                               ; getopt_long
0000000000002139         cmp        eax, 0xffffffff
000000000000213c         je         loc_2291

0000000000002142         cmp        eax, 0x6b
0000000000002145         je         loc_2210

000000000000214b         jle        loc_2178

000000000000214d         cmp        eax, 0x73
0000000000002150         je         loc_21fc

0000000000002156         jle        loc_21b0

0000000000002158         cmp        eax, 0x7a
000000000000215b         je         loc_2220

0000000000002161         add        eax, 0xffffff80
0000000000002164         jne        loc_2d8f

000000000000216a         mov        byte [suppress_matched], 0x1                ; suppress_matched
0000000000002171         jmp        loc_2120
0000000000002173         align      8

                     loc_2178:
0000000000002178         cmp        eax, 0xffffff7e                             ; CODE XREF=main+235
000000000000217d         je         loc_2d99

0000000000002183         jle        loc_2248

0000000000002189         cmp        eax, 0x62
000000000000218c         je         loc_2230

0000000000002192         cmp        eax, 0x66
0000000000002195         jne        loc_2d8f

000000000000219b         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
00000000000021a2         mov        qword [prefix], rax                         ; prefix
00000000000021a9         jmp        loc_2120
00000000000021ae         align      16

                     loc_21b0:
00000000000021b0         cmp        eax, 0x6e                                   ; CODE XREF=main+246
00000000000021b3         jne        loc_21f3

00000000000021b5         lea        rsi, qword [aInvalidNumber]                 ; argument "msgid" for method j_dcgettext, "invalid number"
00000000000021bc         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000021c1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000021c3         call       j_dcgettext                                 ; dcgettext
00000000000021c8         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
00000000000021cf         lea        rcx, qword [aWrittenBySSAnd+27]             ; 0x170e1
00000000000021d6         mov        r8, rax
00000000000021d9         xor        r9d, r9d
00000000000021dc         mov        edx, 0x7fffffff
00000000000021e1         xor        esi, esi
00000000000021e3         call       xdectoimax                                  ; xdectoimax
00000000000021e8         mov        dword [digits], eax                         ; digits
00000000000021ee         jmp        loc_2120

                     loc_21f3:
00000000000021f3         cmp        eax, 0x71                                   ; CODE XREF=main+339
00000000000021f6         jne        loc_2d8f

                     loc_21fc:
00000000000021fc         mov        byte [suppress_count], 0x1                  ; suppress_count, CODE XREF=main+240
0000000000002203         jmp        loc_2120
0000000000002208         align      16

                     loc_2210:
0000000000002210         mov        byte [remove_files], 0x0                    ; remove_files, CODE XREF=main+229
0000000000002217         jmp        loc_2120
000000000000221c         align      32

                     loc_2220:
0000000000002220         mov        byte [elide_empty_files], 0x1               ; elide_empty_files, CODE XREF=main+251
0000000000002227         jmp        loc_2120
000000000000222c         align      16

                     loc_2230:
0000000000002230         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+300
0000000000002237         mov        qword [suffix], rax                         ; suffix
000000000000223e         jmp        loc_2120
0000000000002243         align      8

                     loc_2248:
0000000000002248         cmp        eax, 0xffffff7d                             ; CODE XREF=main+291
000000000000224d         jne        loc_2d8f

0000000000002253         sub        rsp, 0x8
0000000000002257         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000225e         mov        rcx, qword [Version]                        ; Version
0000000000002265         push       0x0
0000000000002267         lea        r9, qword [aDavidMackenzie]                 ; "David MacKenzie"
000000000000226e         lea        r8, qword [aStuartKemp]                     ; "Stuart Kemp"
0000000000002275         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x16096
000000000000227c         lea        rsi, qword [aCsplit]                        ; "csplit"
0000000000002283         xor        eax, eax
0000000000002285         call       version_etc                                 ; version_etc
000000000000228a         xor        edi, edi                                    ; argument "__status" for method j_exit
000000000000228c         call       j_exit                                      ; exit
                        ; endp

                     loc_2291:
0000000000002291         mov        eax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+220
0000000000002297         mov        edx, dword [rsp+0x180+var_178]
000000000000229b         sub        edx, eax
000000000000229d         sub        edx, 0x1
00000000000022a0         jle        loc_2d64

00000000000022a6         mov        rdi, qword [prefix]                         ; prefix
00000000000022ad         xor        eax, eax
00000000000022af         or         rcx, 0xffffffffffffffff
00000000000022b3         repne scasb al, byte [rdi]
00000000000022b5         mov        rax, rcx
00000000000022b8         not        rax
00000000000022bb         lea        rbx, qword [rax-1]
00000000000022bf         mov        rax, qword [suffix]                         ; suffix
00000000000022c6         test       rax, rax
00000000000022c9         je         loc_2316

00000000000022cb         mov        r8, qword [suffix]                          ; suffix
00000000000022d2         xor        edi, edi
00000000000022d4         movzx      ecx, byte [r8]
00000000000022d8         mov        rdx, r8
00000000000022db         test       cl, cl
00000000000022dd         jne        loc_22f5

00000000000022df         jmp        loc_2c3b
00000000000022e4         align      8

                     loc_22e8:
00000000000022e8         mov        ecx, esi                                    ; CODE XREF=main+672

                     loc_22ea:
00000000000022ea         test       cl, cl                                      ; CODE XREF=main+692, main+2443
00000000000022ec         mov        rdx, rax
00000000000022ef         je         loc_2aab

                     loc_22f5:
00000000000022f5         cmp        cl, 0x25                                    ; CODE XREF=main+637
00000000000022f8         lea        rax, qword [rdx+1]
00000000000022fc         movzx      esi, byte [rdx+1]
0000000000002300         jne        loc_22e8

0000000000002302         cmp        sil, 0x25
0000000000002306         jne        loc_2942

000000000000230c         movzx      ecx, byte [rdx+2]
0000000000002310         lea        rax, qword [rdx+2]
0000000000002314         jmp        loc_22ea

                     loc_2316:
0000000000002316         mov        eax, dword [digits]                         ; digits, CODE XREF=main+617
000000000000231c         cmp        eax, 0x9
000000000000231f         jbe        loc_2b9b

0000000000002325         movsxd     rdx, dword [digits]                         ; digits
000000000000232c         mov        rax, 0xfffffffffffffffe
0000000000002333         sub        rax, rbx
0000000000002336         cmp        rax, rdx
0000000000002339         jb         loc_2ad7

                     loc_233f:
000000000000233f         lea        rdi, qword [rbx+rdx+1]                      ; CODE XREF=main+2673, main+2880
0000000000002344         call       xmalloc                                     ; xmalloc
0000000000002349         mov        ebx, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
000000000000234f         mov        qword [filename_space], rax                 ; filename_space
0000000000002356         lea        rsi, qword [aLibs+10]                       ; argument "__s2" for method j_strcmp, 0x16baa
000000000000235d         movsxd     rax, ebx
0000000000002360         mov        rbp, qword [r12+rax*8]
0000000000002364         lea        ebx, dword [rax+1]
0000000000002367         mov        dword [optind@@GLIBC_2.2.5], ebx            ; optind@@GLIBC_2.2.5
000000000000236d         mov        rdi, rbp                                    ; argument "__s1" for method j_strcmp
0000000000002370         call       j_strcmp                                    ; strcmp
0000000000002375         test       eax, eax
0000000000002377         jne        loc_2ae9

                     loc_237d:
000000000000237d         cmp        ebx, dword [rsp+0x180+var_178]              ; CODE XREF=main+2719
0000000000002381         jge        loc_2568

0000000000002387         movsxd     rax, ebx
000000000000238a         mov        rbp, qword [r12+rax*8]
000000000000238e         mov        qword [rsp+0x180+var_170], rax
0000000000002393         lea        rax, qword [rsp+0x180+var_150]
0000000000002398         mov        qword [rsp+0x180+var_160], rax
000000000000239d         lea        rax, qword [rsp+0x180+var_148]
00000000000023a2         mov        qword [rsp+0x180+var_158], rax
00000000000023a7         movzx      eax, byte [rbp]
00000000000023ab         cmp        al, 0x25
00000000000023ad         sete       r15b
00000000000023b1         cmp        al, 0x2f
00000000000023b3         je         loc_2478

00000000000023b9         nop        dword [rax]

                     loc_23c0:
00000000000023c0         test       r15b, r15b                                  ; CODE XREF=main+1042
00000000000023c3         jne        loc_2478

00000000000023c9         mov        rax, qword [rsp+0x180+var_170]
00000000000023ce         lea        rbp, qword [r12+rax*8]
00000000000023d2         call       new_control_record                          ; new_control_record
00000000000023d7         mov        rcx, qword [rsp+0x180+var_160]
00000000000023dc         mov        rdi, qword [rbp]
00000000000023e0         lea        r8, qword [aWrittenBySSAnd+27]              ; 0x170e1
00000000000023e7         xor        esi, esi
00000000000023e9         mov        dword [rax+0x18], ebx
00000000000023ec         mov        edx, 0xa
00000000000023f1         mov        r14, rax
00000000000023f4         call       xstrtoumax                                  ; xstrtoumax
00000000000023f9         test       eax, eax
00000000000023fb         jne        loc_2c8a

0000000000002401         mov        rax, qword [rsp+0x180+var_150]
0000000000002406         test       rax, rax
0000000000002409         je         loc_2c5f

000000000000240f         mov        rdi, qword [last_val.7392]                  ; last_val.7392
0000000000002416         cmp        rax, rdi
0000000000002419         jb         loc_2d1e

000000000000241f         je         loc_279a

                     loc_2425:
0000000000002425         mov        qword [last_val.7392], rax                  ; last_val.7392, CODE XREF=main+1903
000000000000242c         mov        qword [r14+8], rax

                     loc_2430:
0000000000002430         lea        eax, dword [rbx+1]                          ; CODE XREF=main+1192, main+1226
0000000000002433         cmp        dword [rsp+0x180+var_178], eax
0000000000002437         jle        loc_2568

000000000000243d         mov        r13, qword [rsp+0x180+var_170]
0000000000002442         add        r13, 0x1
0000000000002446         mov        rbp, qword [r12+r13*8]
000000000000244a         lea        r15, qword [r13*8]
0000000000002452         cmp        byte [rbp], 0x7b
0000000000002456         je         loc_2722

                     loc_245c:
000000000000245c         cdqe                                                   ; CODE XREF=main+1845
000000000000245e         mov        rbx, rax
0000000000002461         mov        qword [rsp+0x180+var_170], rax
0000000000002466         movzx      eax, byte [rbp]
000000000000246a         cmp        al, 0x25
000000000000246c         sete       r15b
0000000000002470         cmp        al, 0x2f
0000000000002472         jne        loc_23c0

                     loc_2478:
0000000000002478         movsx      esi, al                                     ; argument "__c" for method j_strrchr, CODE XREF=main+851, main+867
000000000000247b         lea        rax, qword [rbp+1]
000000000000247f         mov        r14d, esi
0000000000002482         mov        rdi, rax                                    ; argument "__s" for method j_strrchr
0000000000002485         mov        qword [rsp+0x180+var_168], rax
000000000000248a         call       j_strrchr                                   ; strrchr
000000000000248f         test       rax, rax
0000000000002492         mov        r13, rax
0000000000002495         je         loc_2cf4

000000000000249b         call       new_control_record                          ; new_control_record
00000000000024a0         mov        edi, 0x100
00000000000024a5         mov        byte [rax+0x1d], r15b
00000000000024a9         mov        dword [rax+0x18], ebx
00000000000024ac         mov        byte [rax+0x1e], 0x1
00000000000024b0         mov        qword [rax+0x20], 0x0
00000000000024b8         mov        r14, rax
00000000000024bb         mov        qword [rax+0x28], 0x0
00000000000024c3         call       xmalloc                                     ; xmalloc
00000000000024c8         mov        rsi, r13
00000000000024cb         mov        rdi, qword [rsp+0x180+var_168]
00000000000024d0         lea        rdx, qword [r14+0x20]
00000000000024d4         sub        rsi, rbp
00000000000024d7         mov        qword [r14+0x40], rax
00000000000024db         mov        qword [r14+0x48], 0x0
00000000000024e3         sub        rsi, 0x1
00000000000024e7         mov        qword [rpl_re_syntax_options], 0x2c6        ; rpl_re_syntax_options
00000000000024f2         call       rpl_re_compile_pattern                      ; rpl_re_compile_pattern
00000000000024f7         test       rax, rax
00000000000024fa         mov        r15, rax
00000000000024fd         jne        loc_2cbd

0000000000002503         cmp        byte [r13+1], 0x0
0000000000002508         je         loc_2430

000000000000250e         lea        rdi, qword [r13+1]
0000000000002512         lea        r8, qword [aWrittenBySSAnd+27]              ; 0x170e1
0000000000002519         xor        esi, esi
000000000000251b         mov        rcx, r14
000000000000251e         mov        edx, 0xa
0000000000002523         call       xstrtoimax                                  ; xstrtoimax
0000000000002528         test       eax, eax
000000000000252a         je         loc_2430

0000000000002530         mov        rdi, rbp
0000000000002533         call       quote                                       ; quote
0000000000002538         lea        rsi, qword [aSIntegerExpect]                ; argument "msgid" for method j_dcgettext, "%s: integer expected after delimiter"
000000000000253f         mov        rbx, rax
0000000000002542         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002547         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002549         call       j_dcgettext                                 ; dcgettext
000000000000254e         mov        rcx, rbx
0000000000002551         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002554         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002556         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000255b         xor        eax, eax
000000000000255d         call       j_error                                     ; error
0000000000002562         nop        word [rax+rax]

                     loc_2568:
0000000000002568         lea        rbx, qword [sig.7486]                       ; sig.7486, CODE XREF=main+801, main+983, main+1834
000000000000256f         lea        rdi, qword [caught_signals]                 ; argument "__set" for method j_sigemptyset, caught_signals
0000000000002576         lea        r13, qword [rsp+0x180+var_140]
000000000000257b         lea        r15, qword [caught_signals]                 ; caught_signals
0000000000002582         lea        r14, qword [rbx+0x2c]
0000000000002586         mov        rbp, rbx
0000000000002589         call       j_sigemptyset                               ; sigemptyset

                     loc_258e:
000000000000258e         mov        r12d, dword [rbp]                           ; CODE XREF=main+1369
0000000000002592         xor        esi, esi                                    ; argument "__act" for method j_sigaction
0000000000002594         mov        rdx, r13                                    ; argument "__oact" for method j_sigaction
0000000000002597         mov        edi, r12d                                   ; argument "__sig" for method j_sigaction
000000000000259a         call       j_sigaction                                 ; sigaction
000000000000259f         cmp        qword [rsp+0x180+var_140], 0x1
00000000000025a5         je         loc_25b2

00000000000025a7         mov        esi, r12d                                   ; argument "__signo" for method j_sigaddset
00000000000025aa         mov        rdi, r15                                    ; argument "__set" for method j_sigaddset
00000000000025ad         call       j_sigaddset                                 ; sigaddset

                     loc_25b2:
00000000000025b2         add        rbp, 0x4                                    ; CODE XREF=main+1349
00000000000025b6         cmp        r14, rbp
00000000000025b9         jne        loc_258e

00000000000025bb         lea        rax, qword [interrupt_handler]              ; interrupt_handler
00000000000025c2         lea        rdi, qword [rsp+0x180+var_138]
00000000000025c7         lea        rsi, qword [caught_signals]                 ; caught_signals
00000000000025ce         mov        ecx, 0x20
00000000000025d3         mov        dword [rsp+0x180+var_B8], 0x0
00000000000025de         lea        r14, qword [caught_signals]                 ; caught_signals
00000000000025e5         mov        qword [rsp+0x180+var_140], rax
00000000000025ea         rep movsd  dword [rdi], dword [rsi]
00000000000025ec         jmp        loc_25f9
00000000000025ee         align      16

                     loc_25f0:
00000000000025f0         add        rbx, 0x4                                    ; CODE XREF=main+1449
00000000000025f4         cmp        rbp, rbx
00000000000025f7         je         loc_2621

                     loc_25f9:
00000000000025f9         mov        r12d, dword [rbx]                           ; CODE XREF=main+1420, main+1471
00000000000025fc         mov        rdi, r14                                    ; argument "__set" for method j_sigismember
00000000000025ff         mov        esi, r12d                                   ; argument "__signo" for method j_sigismember
0000000000002602         call       j_sigismember                               ; sigismember
0000000000002607         test       eax, eax
0000000000002609         je         loc_25f0

000000000000260b         xor        edx, edx                                    ; argument "__oact" for method j_sigaction
000000000000260d         mov        rsi, r13                                    ; argument "__act" for method j_sigaction
0000000000002610         mov        edi, r12d                                   ; argument "__sig" for method j_sigaction
0000000000002613         add        rbx, 0x4
0000000000002617         call       j_sigaction                                 ; sigaction
000000000000261c         cmp        rbp, rbx
000000000000261f         jne        loc_25f9

                     loc_2621:
0000000000002621         mov        qword [rsp+0x180+var_178], 0x0              ; CODE XREF=main+1431

                     loc_262a:
000000000000262a         mov        rax, qword [rsp+0x180+var_178]              ; CODE XREF=main+2479
000000000000262f         cmp        rax, qword [control_used]                   ; control_used
0000000000002636         jae        loc_2ba5

000000000000263c         imul       r15, qword [rsp+0x180+var_178], 0x60
0000000000002642         mov        r12, qword [controls]                       ; controls
0000000000002649         xor        r14d, r14d
000000000000264c         cmp        byte [r12+r15+0x1e], 0x0
0000000000002652         je         loc_2823

                     loc_2658:
0000000000002658         lea        rbx, qword [r12+r15]                        ; CODE XREF=main+2620
000000000000265c         cmp        byte [rbx+0x1c], 0x0
0000000000002660         jne        loc_266c

0000000000002662         cmp        r14, qword [rbx+0x10]
0000000000002666         ja         loc_2a09

                     loc_266c:
000000000000266c         movzx      r12d, byte [rbx+0x1d]                       ; CODE XREF=main+1536
0000000000002671         test       r12b, r12b
0000000000002674         je         loc_2aa1

                     loc_267a:
000000000000267a         cmp        byte [suppress_matched], 0x0                ; suppress_matched, CODE XREF=main+2630
0000000000002681         je         loc_2691

0000000000002683         cmp        qword [current_line], 0x0                   ; current_line
000000000000268b         jne        loc_2c05

                     loc_2691:
0000000000002691         cmp        qword [rbx], 0x0                            ; CODE XREF=main+1569, main+2986
0000000000002695         lea        rbp, qword [rbx+0x20]
0000000000002699         jns        loc_26e6

000000000000269b         jmp        loc_28f8

                     loc_26a0:
00000000000026a0         mov        rcx, qword [rax]                            ; CODE XREF=main+1696
00000000000026a3         mov        rsi, qword [rax+8]
00000000000026a7         mov        rdi, rbp
00000000000026aa         cmp        byte [rsi+rcx-1], 0xa
00000000000026af         lea        rdx, qword [rcx-1]
00000000000026b3         cmovne     rdx, rcx
00000000000026b7         xor        r9d, r9d
00000000000026ba         xor        ecx, ecx
00000000000026bc         mov        r8, rdx
00000000000026bf         call       rpl_re_search                               ; rpl_re_search
00000000000026c4         cmp        rax, 0xfffffffffffffffe
00000000000026c8         je         loc_2e0a

00000000000026ce         cmp        rax, 0xffffffffffffffff
00000000000026d2         jne        loc_2a14

00000000000026d8         call       remove_line                                 ; remove_line
00000000000026dd         test       r12b, r12b
00000000000026e0         je         loc_2adc

                     loc_26e6:
00000000000026e6         mov        rax, qword [current_line]                   ; current_line, CODE XREF=main+1593, main+2692
00000000000026ed         lea        rdi, qword [rax+1]
00000000000026f1         mov        qword [current_line], rdi                   ; current_line
00000000000026f8         call       find_line                                   ; find_line
00000000000026fd         test       rax, rax
0000000000002700         jne        loc_26a0

                     loc_2702:
0000000000002702         cmp        byte [rbx+0x1c], 0x0                        ; CODE XREF=main+2228
0000000000002706         je         loc_2e9c

000000000000270c         test       r12b, r12b
000000000000270f         jne        loc_271b

0000000000002711         call       dump_rest_of_file                           ; dump_rest_of_file
0000000000002716         call       close_output_file                           ; close_output_file

                     loc_271b:
000000000000271b         xor        edi, edi                                    ; argument "__status" for method j_exit, CODE XREF=main+1711
000000000000271d         call       j_exit                                      ; exit
                        ; endp

                     loc_2722:
0000000000002722         xor        eax, eax                                    ; CODE XREF=main+1014
0000000000002724         or         rcx, 0xffffffffffffffff
0000000000002728         mov        rdi, rbp
000000000000272b         repne scasb al, byte [rdi]
000000000000272d         mov        rax, rcx
0000000000002730         not        rax
0000000000002733         lea        r13, qword [rbp+rax-2]
0000000000002738         cmp        byte [r13], 0x7d
000000000000273d         jne        loc_2e6a

0000000000002743         lea        rdi, qword [rbp+1]
0000000000002747         lea        rax, qword [r13-1]
000000000000274b         mov        byte [r13], 0x0
0000000000002750         cmp        rdi, rax
0000000000002753         je         loc_27d4

                     loc_2755:
0000000000002755         mov        rcx, qword [rsp+0x180+var_158]              ; CODE XREF=main+1912
000000000000275a         lea        r8, qword [aWrittenBySSAnd+27]              ; 0x170e1
0000000000002761         xor        esi, esi
0000000000002763         mov        edx, 0xa
0000000000002768         call       xstrtoumax                                  ; xstrtoumax
000000000000276d         test       eax, eax
000000000000276f         jne        loc_2e30

0000000000002775         mov        rax, qword [rsp+0x180+var_148]
000000000000277a         mov        qword [r14+0x10], rax

                     loc_277e:
000000000000277e         lea        eax, dword [rbx+2]                          ; CODE XREF=main+1923
0000000000002781         cmp        dword [rsp+0x180+var_178], eax
0000000000002785         mov        byte [r13], 0x7d
000000000000278a         jle        loc_2568

0000000000002790         mov        rbp, qword [r12+r15+8]
0000000000002795         jmp        loc_245c

                     loc_279a:
000000000000279a         mov        rdi, qword [rbp]                            ; CODE XREF=main+959
000000000000279e         call       quote                                       ; quote
00000000000027a3         lea        rsi, qword [aWarningLineNum]                ; argument "msgid" for method j_dcgettext, "warning: line number %s is the same as preceding line number"
00000000000027aa         mov        rbp, rax
00000000000027ad         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000027b2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000027b4         call       j_dcgettext                                 ; dcgettext
00000000000027b9         mov        rcx, rbp
00000000000027bc         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000027bf         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000027c1         xor        eax, eax
00000000000027c3         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000027c5         call       j_error                                     ; error
00000000000027ca         mov        rax, qword [rsp+0x180+var_150]
00000000000027cf         jmp        loc_2425

                     loc_27d4:
00000000000027d4         cmp        byte [rbp+1], 0x2a                          ; CODE XREF=main+1779
00000000000027d8         jne        loc_2755

00000000000027de         mov        byte [r14+0x1c], 0x1
00000000000027e3         jmp        loc_277e

                     loc_27e5:
00000000000027e5         call       close_output_file                           ; close_output_file, CODE XREF=main+2064
00000000000027ea         cmp        byte [suppress_matched], 0x0                ; suppress_matched
00000000000027f1         jne        loc_28b1

00000000000027f7         nop        word [rax+rax]

                     loc_2800:
0000000000002800         mov        rax, qword [current_line]                   ; current_line, CODE XREF=main+2123, main+2134
0000000000002807         lea        rdi, qword [rax+1]
000000000000280b         call       find_line                                   ; find_line
0000000000002810         test       rax, rax
0000000000002813         je         loc_2933

                     loc_2819:
0000000000002819         mov        r12, qword [controls]                       ; controls, CODE XREF=main+2266
0000000000002820         mov        r14, r13

                     loc_2823:
0000000000002823         add        r12, r15                                    ; CODE XREF=main+1522
0000000000002826         cmp        byte [r12+0x1c], 0x0
000000000000282c         jne        loc_2839

000000000000282e         cmp        r14, qword [r12+0x10]
0000000000002833         ja         loc_2a09

                     loc_2839:
0000000000002839         mov        rbp, qword [r12+8]                          ; CODE XREF=main+1996
000000000000283e         lea        r13, qword [r14+1]
0000000000002842         call       create_output_file                          ; create_output_file
0000000000002847         mov        rax, qword [current_line]                   ; current_line
000000000000284e         imul       rbp, r13
0000000000002852         lea        rdi, qword [rax+1]
0000000000002856         call       find_line                                   ; find_line
000000000000285b         test       rax, rax
000000000000285e         je         loc_2919

                     loc_2864:
0000000000002864         call       get_first_line_in_buffer                    ; get_first_line_in_buffer, CODE XREF=main+2240
0000000000002869         cmp        rbp, rax
000000000000286c         lea        rbx, qword [rax+1]
0000000000002870         jbe        loc_27e5

0000000000002876         add        rbp, 0x1
000000000000287a         nop        word [rax+rax]

                     loc_2880:
0000000000002880         call       remove_line                                 ; remove_line, CODE XREF=main+2109
0000000000002885         test       rax, rax
0000000000002888         je         loc_2926

000000000000288e         mov        rdi, rax
0000000000002891         add        rbx, 0x1
0000000000002895         call       save_line_to_file                           ; save_line_to_file
000000000000289a         cmp        rbx, rbp
000000000000289d         jne        loc_2880

000000000000289f         call       close_output_file                           ; close_output_file
00000000000028a4         cmp        byte [suppress_matched], 0x0                ; suppress_matched
00000000000028ab         je         loc_2800

                     loc_28b1:
00000000000028b1         call       remove_line                                 ; remove_line, CODE XREF=main+1937
00000000000028b6         jmp        loc_2800
00000000000028bb         align      64

                     loc_28c0:
00000000000028c0         mov        rcx, qword [rax]                            ; CODE XREF=main+2226
00000000000028c3         mov        rsi, qword [rax+8]
00000000000028c7         mov        rdi, rbp
00000000000028ca         cmp        byte [rsi+rcx-1], 0xa
00000000000028cf         lea        rdx, qword [rcx-1]
00000000000028d3         cmovne     rdx, rcx
00000000000028d7         xor        r9d, r9d
00000000000028da         xor        ecx, ecx
00000000000028dc         mov        r8, rdx
00000000000028df         call       rpl_re_search                               ; rpl_re_search
00000000000028e4         cmp        rax, 0xfffffffffffffffe
00000000000028e8         je         loc_2e0a

00000000000028ee         cmp        rax, 0xffffffffffffffff
00000000000028f2         jne        loc_2a14

                     loc_28f8:
00000000000028f8         mov        rax, qword [current_line]                   ; current_line, CODE XREF=main+1595
00000000000028ff         lea        rdi, qword [rax+1]
0000000000002903         mov        qword [current_line], rdi                   ; current_line
000000000000290a         call       find_line                                   ; find_line
000000000000290f         test       rax, rax
0000000000002912         jne        loc_28c0

0000000000002914         jmp        loc_2702

                     loc_2919:
0000000000002919         cmp        byte [suppress_matched], 0x0                ; suppress_matched, CODE XREF=main+2046
0000000000002920         je         loc_2864

                     loc_2926:
0000000000002926         mov        rdi, qword [r12+8]                          ; CODE XREF=main+2088, main+2272
000000000000292b         mov        rsi, r14
000000000000292e         call       handle_line_error.isra.1                    ; handle_line_error.isra.1

                     loc_2933:
0000000000002933         cmp        byte [suppress_matched], 0x0                ; suppress_matched, CODE XREF=main+1971
000000000000293a         jne        loc_2819

0000000000002940         jmp        loc_2926

                     loc_2942:
0000000000002942         test       dil, dil                                    ; CODE XREF=main+678
0000000000002945         jne        loc_2eab

000000000000294b         xor        edi, edi

                     loc_294d:
000000000000294d         movzx      edx, byte [rax]                             ; CODE XREF=main+2314
0000000000002950         mov        rsi, rax
0000000000002953         cmp        dl, 0x27
0000000000002956         je         loc_2a01

000000000000295c         jg         loc_296c

000000000000295e         cmp        dl, 0x23
0000000000002961         jne        loc_2976

0000000000002963         or         edi, 0x2

                     loc_2966:
0000000000002966         add        rax, 0x1                                    ; CODE XREF=main+2319, main+2324, main+2468
000000000000296a         jmp        loc_294d

                     loc_296c:
000000000000296c         cmp        dl, 0x2d                                    ; CODE XREF=main+2300
000000000000296f         je         loc_2966

0000000000002971         cmp        dl, 0x30
0000000000002974         je         loc_2966

                     loc_2976:
0000000000002976         movsx      eax, dl                                     ; CODE XREF=main+2305
0000000000002979         sub        eax, 0x30
000000000000297c         cmp        eax, 0x9
000000000000297f         ja         loc_2999

0000000000002981         nop        dword [rax]

                     loc_2988:
0000000000002988         add        rsi, 0x1                                    ; CODE XREF=main+2359
000000000000298c         movsx      eax, byte [rsi]
000000000000298f         mov        edx, eax
0000000000002991         sub        eax, 0x30
0000000000002994         cmp        eax, 0x9
0000000000002997         jbe        loc_2988

                     loc_2999:
0000000000002999         cmp        dl, 0x2e                                    ; CODE XREF=main+2335
000000000000299c         je         loc_29f0

                     loc_299e:
000000000000299e         movzx      r13d, byte [rsi]                            ; CODE XREF=main+2461
00000000000029a2         cmp        r13b, 0x69
00000000000029a6         mov        rbp, r13
00000000000029a9         je         loc_2bf8

00000000000029af         jle        loc_2b44

00000000000029b5         cmp        r13b, 0x75
00000000000029b9         je         loc_2bee

00000000000029bf         cmp        r13b, 0x78
00000000000029c3         je         loc_29cf

00000000000029c5         cmp        r13b, 0x6f
00000000000029c9         jne        loc_2b61

                     loc_29cf:
00000000000029cf         mov        eax, 0x2                                    ; CODE XREF=main+2403, main+2792

                     loc_29d4:
00000000000029d4         not        eax                                         ; CODE XREF=main+2963, main+2976
00000000000029d6         and        edi, eax
00000000000029d8         jne        loc_2dd3

00000000000029de         movzx      ecx, byte [rsi+1]
00000000000029e2         lea        rax, qword [rsi+1]
00000000000029e6         mov        edi, 0x1
00000000000029eb         jmp        loc_22ea

                     loc_29f0:
00000000000029f0         add        rsi, 0x1                                    ; CODE XREF=main+2364, main+2463
00000000000029f4         movsx      eax, byte [rsi]
00000000000029f7         sub        eax, 0x30
00000000000029fa         cmp        eax, 0x9
00000000000029fd         ja         loc_299e

00000000000029ff         jmp        loc_29f0

                     loc_2a01:
0000000000002a01         or         edi, 0x1                                    ; CODE XREF=main+2294
0000000000002a04         jmp        loc_2966

                     loc_2a09:
0000000000002a09         add        qword [rsp+0x180+var_178], 0x1              ; CODE XREF=main+1542, main+2003
0000000000002a0f         jmp        loc_262a

                     loc_2a14:
0000000000002a14         mov        rax, qword [current_line]                   ; current_line, CODE XREF=main+1650, main+2194
0000000000002a1b         add        rax, qword [rbx]
0000000000002a1e         mov        rbp, rax
0000000000002a21         mov        qword [rsp+0x180+var_170], rax
0000000000002a26         mov        eax, dword [rbx+0x18]
0000000000002a29         mov        dword [rsp+0x180+var_168], eax
0000000000002a2d         call       get_first_line_in_buffer                    ; get_first_line_in_buffer
0000000000002a32         cmp        rbp, rax
0000000000002a35         jb         loc_2f10

0000000000002a3b         mov        r13, qword [rsp+0x180+var_170]
0000000000002a40         sub        r13, rax
0000000000002a43         je         loc_2a76

0000000000002a45         xor        ebp, ebp
0000000000002a47         jmp        loc_2a59
0000000000002a49         align      16

                     loc_2a50:
0000000000002a50         add        rbp, 0x1                                    ; CODE XREF=main+2570, main+2580
0000000000002a54         cmp        r13, rbp
0000000000002a57         je         loc_2a76

                     loc_2a59:
0000000000002a59         call       remove_line                                 ; remove_line, CODE XREF=main+2535
0000000000002a5e         test       rax, rax
0000000000002a61         je         loc_2ecf

0000000000002a67         test       r12b, r12b
0000000000002a6a         jne        loc_2a50

0000000000002a6c         mov        rdi, rax
0000000000002a6f         call       save_line_to_file                           ; save_line_to_file
0000000000002a74         jmp        loc_2a50

                     loc_2a76:
0000000000002a76         test       r12b, r12b                                  ; CODE XREF=main+2531, main+2551
0000000000002a79         je         loc_2c0f

                     loc_2a7f:
0000000000002a7f         cmp        qword [rbx], 0x0                            ; CODE XREF=main+2996
0000000000002a83         jle        loc_2a91

0000000000002a85         mov        rax, qword [rsp+0x180+var_170]
0000000000002a8a         mov        qword [current_line], rax                   ; current_line

                     loc_2a91:
0000000000002a91         add        r14, 0x1                                    ; CODE XREF=main+2595
0000000000002a95         mov        r12, qword [controls]                       ; controls
0000000000002a9c         jmp        loc_2658

                     loc_2aa1:
0000000000002aa1         call       create_output_file                          ; create_output_file, CODE XREF=main+1556
0000000000002aa6         jmp        loc_267a

                     loc_2aab:
0000000000002aab         test       dil, dil                                    ; CODE XREF=main+655
0000000000002aae         je         loc_2c3b

0000000000002ab4         or         r9d, 0xffffffff
0000000000002ab8         or         rcx, 0xffffffffffffffff
0000000000002abc         mov        edx, 0x1
0000000000002ac1         xor        esi, esi
0000000000002ac3         xor        edi, edi
0000000000002ac5         xor        eax, eax
0000000000002ac7         call       j___snprintf_chk                            ; __snprintf_chk
0000000000002acc         test       eax, eax
0000000000002ace         movsxd     rdx, eax
0000000000002ad1         jns        loc_233f

                     loc_2ad7:
0000000000002ad7         call       xalloc_die                                  ; xalloc_die, CODE XREF=main+729

                     loc_2adc:
0000000000002adc         mov        rdi, rax                                    ; CODE XREF=main+1664
0000000000002adf         call       save_line_to_file                           ; save_line_to_file
0000000000002ae4         jmp        loc_26e6

                     loc_2ae9:
0000000000002ae9         xor        ecx, ecx                                    ; CODE XREF=main+791
0000000000002aeb         xor        edx, edx
0000000000002aed         xor        edi, edi
0000000000002aef         mov        rsi, rbp
0000000000002af2         call       fd_reopen                                   ; fd_reopen
0000000000002af7         test       eax, eax
0000000000002af9         mov        ebx, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
0000000000002aff         jns        loc_237d

0000000000002b05         mov        rsi, rbp
0000000000002b08         mov        edi, 0x4
0000000000002b0d         call       quotearg_style                              ; quotearg_style
0000000000002b12         lea        rsi, qword [aCannotOpenSFor]                ; argument "msgid" for method j_dcgettext, "cannot open %s for reading"
0000000000002b19         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b1e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b20         mov        rbp, rax
0000000000002b23         call       j_dcgettext                                 ; dcgettext
0000000000002b28         mov        rbx, rax
0000000000002b2b         call       j___errno_location                          ; __errno_location
0000000000002b30         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002b32         mov        rcx, rbp
0000000000002b35         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000002b38         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002b3d         xor        eax, eax
0000000000002b3f         call       j_error                                     ; error

                     loc_2b44:
0000000000002b44         cmp        r13b, 0x58                                  ; CODE XREF=main+2383
0000000000002b48         je         loc_29cf

0000000000002b4e         cmp        r13b, 0x64
0000000000002b52         je         loc_2bf8

0000000000002b58         test       r13b, r13b
0000000000002b5b         je         loc_2f22

                     loc_2b61:
0000000000002b61         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=main+2409
0000000000002b66         mov        rax, qword [rax]
0000000000002b69         mov        edx, 0x5
0000000000002b6e         test       byte [rax+rbp*2+1], 0x40
0000000000002b73         je         loc_2c19

0000000000002b79         lea        rsi, qword [aInvalidConvers]                ; argument "msgid" for method j_dcgettext, "invalid conversion specifier in suffix: %c"
0000000000002b80         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b82         call       j_dcgettext                                 ; dcgettext
0000000000002b87         mov        ecx, r13d
0000000000002b8a         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002b8d         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002b8f         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002b94         xor        eax, eax
0000000000002b96         call       j_error                                     ; error

                     loc_2b9b:
0000000000002b9b         mov        edx, 0xa                                    ; CODE XREF=main+703
0000000000002ba0         jmp        loc_233f

                     loc_2ba5:
0000000000002ba5         call       create_output_file                          ; create_output_file, CODE XREF=main+1494
0000000000002baa         call       dump_rest_of_file                           ; dump_rest_of_file
0000000000002baf         call       close_output_file                           ; close_output_file
0000000000002bb4         xor        edi, edi                                    ; argument "__fd" for method j_close
0000000000002bb6         call       j_close                                     ; close
0000000000002bbb         test       eax, eax
0000000000002bbd         jne        loc_2da5

0000000000002bc3         xor        eax, eax
0000000000002bc5         mov        rcx, qword [rsp+0x180+var_88]
0000000000002bcd         xor        rcx, qword [fs:0x28]
0000000000002bd6         jne        loc_2da0

0000000000002bdc         add        rsp, 0x108
0000000000002be3         pop        rbx
0000000000002be4         pop        rbp
0000000000002be5         pop        r12
0000000000002be7         pop        r13
0000000000002be9         pop        r14
0000000000002beb         pop        r15
0000000000002bed         ret
                        ; endp

                     loc_2bee:
0000000000002bee         mov        eax, 0x1                                    ; CODE XREF=main+2393
0000000000002bf3         jmp        loc_29d4

                     loc_2bf8:
0000000000002bf8         mov        byte [rsi], 0x75                            ; CODE XREF=main+2377, main+2802
0000000000002bfb         mov        eax, 0x1
0000000000002c00         jmp        loc_29d4

                     loc_2c05:
0000000000002c05         call       remove_line                                 ; remove_line, CODE XREF=main+1579
0000000000002c0a         jmp        loc_2691

                     loc_2c0f:
0000000000002c0f         call       close_output_file                           ; close_output_file, CODE XREF=main+2585
0000000000002c14         jmp        loc_2a7f

                     loc_2c19:
0000000000002c19         lea        rsi, qword [aInvalidConvers_168e0]          ; argument "msgid" for method j_dcgettext, "invalid conversion specifier in suffix: \\%.3o", CODE XREF=main+2835
0000000000002c20         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002c22         call       j_dcgettext                                 ; dcgettext
0000000000002c27         mov        ecx, r13d
0000000000002c2a         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002c2d         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002c2f         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002c34         xor        eax, eax
0000000000002c36         call       j_error                                     ; error

                     loc_2c3b:
0000000000002c3b         lea        rsi, qword [aMissingConvers]                ; argument "msgid" for method j_dcgettext, "missing %% conversion specification in suffix", CODE XREF=main+639, main+2638
0000000000002c42         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002c47         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002c49         call       j_dcgettext                                 ; dcgettext
0000000000002c4e         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002c50         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002c53         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002c58         xor        eax, eax
0000000000002c5a         call       j_error                                     ; error

                     loc_2c5f:
0000000000002c5f         mov        rbx, qword [rbp]                            ; CODE XREF=main+937
0000000000002c63         lea        rsi, qword [aSLineNumberMus]                ; argument "msgid" for method j_dcgettext, "%s: line number must be greater than zero"
0000000000002c6a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002c6f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002c71         call       j_dcgettext                                 ; dcgettext
0000000000002c76         mov        rcx, rbx
0000000000002c79         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002c7c         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002c7e         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002c83         xor        eax, eax
0000000000002c85         call       j_error                                     ; error

                     loc_2c8a:
0000000000002c8a         mov        rdi, qword [rbp]                            ; CODE XREF=main+923
0000000000002c8e         call       quote                                       ; quote
0000000000002c93         lea        rsi, qword [aSInvalidPatter]                ; argument "msgid" for method j_dcgettext, "%s: invalid pattern"
0000000000002c9a         mov        rbx, rax
0000000000002c9d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ca2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ca4         call       j_dcgettext                                 ; dcgettext
0000000000002ca9         mov        rcx, rbx
0000000000002cac         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002caf         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002cb1         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002cb6         xor        eax, eax
0000000000002cb8         call       j_error                                     ; error

                     loc_2cbd:
0000000000002cbd         mov        rdi, rbp                                    ; CODE XREF=main+1181
0000000000002cc0         call       quote                                       ; quote
0000000000002cc5         lea        rsi, qword [aSInvalidRegula]                ; argument "msgid" for method j_dcgettext, "%s: invalid regular expression: %s"
0000000000002ccc         mov        rbx, rax
0000000000002ccf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002cd4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002cd6         call       j_dcgettext                                 ; dcgettext
0000000000002cdb         mov        r8, r15
0000000000002cde         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002ce1         mov        rcx, rbx
0000000000002ce4         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002ce6         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002ce8         xor        eax, eax
0000000000002cea         call       j_error                                     ; error
0000000000002cef         call       cleanup_fatal                               ; cleanup_fatal

                     loc_2cf4:
0000000000002cf4         lea        rsi, qword [aSClosingDelimi]                ; argument "msgid" for method j_dcgettext, "%s: closing delimiter '%c' missing", CODE XREF=main+1077
0000000000002cfb         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002d00         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d02         call       j_dcgettext                                 ; dcgettext
0000000000002d07         mov        r8d, r14d
0000000000002d0a         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002d0d         mov        rcx, rbp
0000000000002d10         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002d12         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002d17         xor        eax, eax
0000000000002d19         call       j_error                                     ; error

                     loc_2d1e:
0000000000002d1e         lea        rsi, qword [rsp+0x180+var_A0]               ; CODE XREF=main+953
0000000000002d26         call       umaxtostr                                   ; umaxtostr
0000000000002d2b         mov        rdi, qword [rbp]
0000000000002d2f         mov        r12, rax
0000000000002d32         call       quote                                       ; quote
0000000000002d37         lea        rsi, qword [aLineNumberSIsS]                ; argument "msgid" for method j_dcgettext, "line number %s is smaller than preceding line number, %s"
0000000000002d3e         mov        rbx, rax
0000000000002d41         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002d46         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d48         call       j_dcgettext                                 ; dcgettext
0000000000002d4d         mov        r8, r12
0000000000002d50         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002d53         mov        rcx, rbx
0000000000002d56         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002d58         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002d5d         xor        eax, eax
0000000000002d5f         call       j_error                                     ; error

                     loc_2d64:
0000000000002d64         cmp        eax, dword [rsp+0x180+var_178]              ; CODE XREF=main+576
0000000000002d68         jl         loc_2f46

0000000000002d6e         lea        rsi, qword [aMissingOperand]                ; argument "msgid" for method j_dcgettext, "missing operand"
0000000000002d75         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002d7a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d7c         call       j_dcgettext                                 ; dcgettext
0000000000002d81         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002d83         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002d86         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002d88         xor        eax, eax
0000000000002d8a         call       j_error                                     ; error

                     loc_2d8f:
0000000000002d8f         mov        edi, 0x1                                    ; argument #1 for method usage, CODE XREF=main+260, main+309, main+406, main+493, main+3868
0000000000002d94         call       usage                                       ; usage

                     loc_2d99:
0000000000002d99         xor        edi, edi                                    ; argument #1 for method usage, CODE XREF=main+285
0000000000002d9b         call       usage                                       ; usage

                     loc_2da0:
0000000000002da0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=main+2934
                        ; endp

                     loc_2da5:
0000000000002da5         lea        rsi, qword [aReadError]                     ; argument "msgid" for method j_dcgettext, "read error", CODE XREF=main+2909
0000000000002dac         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002db1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002db3         call       j_dcgettext                                 ; dcgettext
0000000000002db8         mov        rbx, rax
0000000000002dbb         call       j___errno_location                          ; __errno_location
0000000000002dc0         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002dc2         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000002dc5         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002dc7         xor        eax, eax
0000000000002dc9         call       j_error                                     ; error
0000000000002dce         call       cleanup_fatal                               ; cleanup_fatal

                     loc_2dd3:
0000000000002dd3         and        edi, 0x2                                    ; CODE XREF=main+2424
0000000000002dd6         lea        rsi, qword [aInvalidFlagsIn]                ; argument "msgid" for method j_dcgettext, "invalid flags in conversion specification: %%%c%c"
0000000000002ddd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002de2         cmp        edi, 0x1
0000000000002de5         sbb        ebx, ebx
0000000000002de7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002de9         and        ebx, 0x4
0000000000002dec         add        ebx, 0x23
0000000000002def         call       j_dcgettext                                 ; dcgettext
0000000000002df4         mov        r8d, r13d
0000000000002df7         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002dfa         mov        ecx, ebx
0000000000002dfc         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002dfe         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002e03         xor        eax, eax
0000000000002e05         call       j_error                                     ; error

                     loc_2e0a:
0000000000002e0a         lea        rsi, qword [aErrorInRegular]                ; argument "msgid" for method j_dcgettext, "error in regular expression search", CODE XREF=main+1640, main+2184
0000000000002e11         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e16         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e18         call       j_dcgettext                                 ; dcgettext
0000000000002e1d         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002e1f         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002e22         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002e24         xor        eax, eax
0000000000002e26         call       j_error                                     ; error
0000000000002e2b         call       cleanup_fatal                               ; cleanup_fatal

                     loc_2e30:
0000000000002e30         mov        rax, qword [global_argv]                    ; global_argv, CODE XREF=main+1807
0000000000002e37         mov        rdi, qword [rax+r15]
0000000000002e3b         call       quote                                       ; quote
0000000000002e40         lea        rsi, qword [aSIntegerRequir]                ; argument "msgid" for method j_dcgettext, "%s}: integer required between '{' and '}'"
0000000000002e47         mov        rbx, rax
0000000000002e4a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e4f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e51         call       j_dcgettext                                 ; dcgettext
0000000000002e56         mov        rcx, rbx
0000000000002e59         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002e5c         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002e5e         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002e63         xor        eax, eax
0000000000002e65         call       j_error                                     ; error

                     loc_2e6a:
0000000000002e6a         mov        rdi, rbp                                    ; CODE XREF=main+1757
0000000000002e6d         call       quote                                       ; quote
0000000000002e72         lea        rsi, qword [aSIsRequiredInR]                ; argument "msgid" for method j_dcgettext, "%s: '}' is required in repeat count"
0000000000002e79         mov        rbx, rax
0000000000002e7c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e81         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e83         call       j_dcgettext                                 ; dcgettext
0000000000002e88         mov        rcx, rbx
0000000000002e8b         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002e8e         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002e90         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002e95         xor        eax, eax
0000000000002e97         call       j_error                                     ; error

                     loc_2e9c:
0000000000002e9c         movzx      edx, r12b                                   ; CODE XREF=main+1702
0000000000002ea0         mov        rsi, r14
0000000000002ea3         mov        rdi, rbx
0000000000002ea6         call       regexp_error                                ; regexp_error

                     loc_2eab:
0000000000002eab         lea        rsi, qword [aTooManyConvers]                ; argument "msgid" for method j_dcgettext, "too many %% conversion specifications in suffix", CODE XREF=main+2277
0000000000002eb2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002eb7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002eb9         call       j_dcgettext                                 ; dcgettext
0000000000002ebe         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002ec0         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002ec3         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002ec8         xor        eax, eax
0000000000002eca         call       j_error                                     ; error

                     loc_2ecf:
0000000000002ecf         movsxd     rax, dword [rsp+0x180+var_168]              ; CODE XREF=main+2561
0000000000002ed4         mov        rdx, qword [global_argv]                    ; global_argv
0000000000002edb         mov        rdi, qword [rdx+rax*8]

                     loc_2edf:
0000000000002edf         call       quote                                       ; quote, CODE XREF=main+3776
0000000000002ee4         lea        rsi, qword [aSLineNumberOut]                ; argument "msgid" for method j_dcgettext, "%s: line number out of range"
0000000000002eeb         mov        rbx, rax
0000000000002eee         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ef3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ef5         call       j_dcgettext                                 ; dcgettext
0000000000002efa         mov        rcx, rbx
0000000000002efd         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002f00         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002f02         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002f04         xor        eax, eax
0000000000002f06         call       j_error                                     ; error
0000000000002f0b         call       cleanup_fatal                               ; cleanup_fatal

                     loc_2f10:
0000000000002f10         movsxd     rdx, dword [rsp+0x180+var_168]              ; CODE XREF=main+2517
0000000000002f15         mov        rax, qword [global_argv]                    ; global_argv
0000000000002f1c         mov        rdi, qword [rax+rdx*8]
0000000000002f20         jmp        loc_2edf

                     loc_2f22:
0000000000002f22         lea        rsi, qword [aMissingConvers_16888]          ; argument "msgid" for method j_dcgettext, "missing conversion specifier in suffix", CODE XREF=main+2811
0000000000002f29         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f2e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f30         call       j_dcgettext                                 ; dcgettext
0000000000002f35         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002f37         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002f3a         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002f3f         xor        eax, eax
0000000000002f41         call       j_error                                     ; error

                     loc_2f46:
0000000000002f46         movsxd     r14, dword [rsp+0x180+var_178]              ; CODE XREF=main+3336
0000000000002f4b         mov        rdi, qword [r12+r14*8-8]
0000000000002f50         call       quote                                       ; quote
0000000000002f55         lea        rsi, qword [aMissingOperand_16124]          ; argument "msgid" for method j_dcgettext, "missing operand after %s"
0000000000002f5c         mov        rbx, rax
0000000000002f5f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f61         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f66         call       j_dcgettext                                 ; dcgettext
0000000000002f6b         mov        rcx, rbx
0000000000002f6e         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002f71         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002f73         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002f75         xor        eax, eax
0000000000002f77         call       j_error                                     ; error
0000000000002f7c         jmp        loc_2d8f
0000000000002f81         align      16                                          ; End of unwind block (FDE at 0x18890)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000002f90         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0x184ac)
0000000000002f92         mov        r9, rdx
0000000000002f95         pop        rsi
0000000000002f96         mov        rdx, rsp
0000000000002f99         and        rsp, 0xfffffffffffffff0
0000000000002f9d         push       rax
0000000000002f9e         push       rsp
0000000000002f9f         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000002fa6         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
0000000000002fad         lea        rdi, qword [main]                           ; main
0000000000002fb4         call       qword [qword_21bfd8+8]                      ; 0x21bfe0
0000000000002fba         hlt
                        ; endp
0000000000002fbb         align      64                                          ; End of unwind block (FDE at 0x184ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000002fc0         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
0000000000002fc7         push       rbp
0000000000002fc8         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
0000000000002fcf         cmp        rax, rdi
0000000000002fd2         mov        rbp, rsp
0000000000002fd5         je         loc_2ff0

0000000000002fd7         mov        rax, qword [qword_21bfd8]                   ; qword_21bfd8
0000000000002fde         test       rax, rax
0000000000002fe1         je         loc_2ff0

0000000000002fe3         pop        rbp
0000000000002fe4         jmp        rax
                        ; endp
0000000000002fe6         align      16

                     loc_2ff0:
0000000000002ff0         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000002ff1         ret
                        ; endp
0000000000002ff2         align      4096

                     register_tm_clones:
0000000000003000         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
0000000000003007         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000300e         push       rbp
000000000000300f         sub        rsi, rdi
0000000000003012         mov        rbp, rsp
0000000000003015         sar        rsi, 0x3
0000000000003019         mov        rax, rsi
000000000000301c         shr        rax, 0x3f
0000000000003020         add        rsi, rax
0000000000003023         sar        rsi, 0x1
0000000000003026         je         loc_3040

0000000000003028         mov        rax, qword [qword_21bff0]                   ; qword_21bff0
000000000000302f         test       rax, rax
0000000000003032         je         loc_3040

0000000000003034         pop        rbp
0000000000003035         jmp        rax
                        ; endp
0000000000003037         align      64

                     loc_3040:
0000000000003040         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
0000000000003041         ret
                        ; endp
0000000000003042         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
0000000000003050         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
0000000000003057         jne        loc_3088

0000000000003059         cmp        qword [qword_21bff8], 0x0                   ; qword_21bff8
0000000000003061         push       rbp
0000000000003062         mov        rbp, rsp
0000000000003065         je         loc_3073

0000000000003067         mov        rdi, qword [__dso_handle]                   ; __dso_handle
000000000000306e         call       j_qword_21bff8                              ; qword_21bff8

                     loc_3073:
0000000000003073         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
0000000000003078         mov        byte [completed.7697], 0x1                  ; completed.7697
000000000000307f         pop        rbp
0000000000003080         ret
                        ; endp
0000000000003081         align      8

                     loc_3088:
0000000000003088         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
000000000000308a         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000003090         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000003091         mov        rbp, rsp
0000000000003094         pop        rbp
0000000000003095         jmp        register_tm_clones                          ; register_tm_clones
000000000000309a         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     make_filename:
00000000000030a0         push       r12                                         ; Begin of unwind block (FDE at 0x1851c), CODE XREF=delete_all_files.part.0+63, create_output_file+41
00000000000030a2         mov        rsi, qword [prefix]                         ; argument "__src" for method j_strcpy, prefix
00000000000030a9         push       rbp
00000000000030aa         mov        ebp, edi
00000000000030ac         mov        rdi, qword [filename_space]                 ; argument "__dest" for method j_strcpy, filename_space
00000000000030b3         push       rbx
00000000000030b4         call       j_strcpy                                    ; strcpy
00000000000030b9         mov        rax, qword [suffix]                         ; suffix
00000000000030c0         test       rax, rax
00000000000030c3         je         loc_3110

00000000000030c5         mov        r12, qword [suffix]                         ; suffix
00000000000030cc         mov        rbx, qword [filename_space]                 ; filename_space
00000000000030d3         mov        rdi, qword [prefix]                         ; argument "__s" for method j_strlen, prefix
00000000000030da         call       j_strlen                                    ; strlen
00000000000030df         lea        rdi, qword [rbx+rax]
00000000000030e3         mov        r8d, ebp
00000000000030e6         mov        rcx, r12
00000000000030e9         mov        rdx, 0xffffffffffffffff
00000000000030f0         mov        esi, 0x1
00000000000030f5         xor        eax, eax
00000000000030f7         call       j___sprintf_chk                             ; __sprintf_chk
00000000000030fc         pop        rbx
00000000000030fd         mov        rax, qword [filename_space]                 ; filename_space
0000000000003104         pop        rbp
0000000000003105         pop        r12
0000000000003107         ret
                        ; endp
0000000000003108         align      16

                     loc_3110:
0000000000003110         mov        r12d, dword [digits]                        ; digits, CODE XREF=make_filename+35
0000000000003117         mov        rbx, qword [filename_space]                 ; filename_space
000000000000311e         mov        rdi, qword [prefix]                         ; argument "__s" for method j_strlen, prefix
0000000000003125         call       j_strlen                                    ; strlen
000000000000312a         lea        rcx, qword [_IO_stdin_used+4]               ; 0x15fa4
0000000000003131         lea        rdi, qword [rbx+rax]
0000000000003135         mov        r9d, ebp
0000000000003138         mov        r8d, r12d
000000000000313b         mov        rdx, 0xffffffffffffffff
0000000000003142         mov        esi, 0x1
0000000000003147         xor        eax, eax
0000000000003149         call       j___sprintf_chk                             ; __sprintf_chk
000000000000314e         pop        rbx
000000000000314f         mov        rax, qword [filename_space]                 ; filename_space
0000000000003156         pop        rbp
0000000000003157         pop        r12
0000000000003159         ret
                        ; endp
000000000000315a         align      32                                          ; End of unwind block (FDE at 0x1851c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     delete_all_files.part.0:
0000000000003160         mov        eax, dword [files_created]                  ; Begin of unwind block (FDE at 0x18554), files_created, CODE XREF=cleanup_fatal+65, interrupt_handler+19
0000000000003166         test       eax, eax
0000000000003168         je         loc_3208

000000000000316e         push       r13
0000000000003170         push       r12
0000000000003172         lea        r13, qword [aSS+4]                          ; 0x16b61
0000000000003179         push       rbp
000000000000317a         push       rbx
000000000000317b         mov        r12d, edi
000000000000317e         xor        ebx, ebx
0000000000003180         sub        rsp, 0x8
0000000000003184         jmp        loc_319d
0000000000003186         align      16

                     loc_3190:
0000000000003190         mov        eax, dword [files_created]                  ; files_created, CODE XREF=delete_all_files.part.0+81, delete_all_files.part.0+86
0000000000003196         add        ebx, 0x1
0000000000003199         cmp        ebx, eax
000000000000319b         jae        loc_31ed

                     loc_319d:
000000000000319d         mov        edi, ebx                                    ; CODE XREF=delete_all_files.part.0+36, delete_all_files.part.0+139
000000000000319f         call       make_filename                               ; make_filename
00000000000031a4         mov        rdi, rax                                    ; argument "__name" for method j_unlink
00000000000031a7         mov        rbp, rax
00000000000031aa         call       j_unlink                                    ; unlink
00000000000031af         test       eax, eax
00000000000031b1         je         loc_3190

00000000000031b3         test       r12b, r12b
00000000000031b6         jne        loc_3190

00000000000031b8         mov        rdx, rbp
00000000000031bb         xor        edi, edi
00000000000031bd         mov        esi, 0x3
00000000000031c2         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000031c7         mov        rbp, rax
00000000000031ca         add        ebx, 0x1
00000000000031cd         call       j___errno_location                          ; __errno_location
00000000000031d2         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000031d4         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000031d6         xor        eax, eax
00000000000031d8         mov        rcx, rbp
00000000000031db         mov        rdx, r13                                    ; argument "__format" for method j_error
00000000000031de         call       j_error                                     ; error
00000000000031e3         mov        eax, dword [files_created]                  ; files_created
00000000000031e9         cmp        ebx, eax
00000000000031eb         jb         loc_319d

                     loc_31ed:
00000000000031ed         mov        dword [files_created], 0x0                  ; files_created, CODE XREF=delete_all_files.part.0+59
00000000000031f7         add        rsp, 0x8
00000000000031fb         pop        rbx
00000000000031fc         pop        rbp
00000000000031fd         pop        r12
00000000000031ff         pop        r13
0000000000003201         ret
                        ; endp
0000000000003202         align      8

                     loc_3208:
0000000000003208         mov        dword [files_created], 0x0                  ; files_created, CODE XREF=delete_all_files.part.0+8
0000000000003212         ret
                        ; endp
0000000000003213         align      32                                          ; End of unwind block (FDE at 0x18554)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     cleanup_fatal:
0000000000003220         push       rbx                                         ; Begin of unwind block (FDE at 0x18594), CODE XREF=regexp_error+205, main+3215, main+3438, main+3531, main+3755, close_output_file+385, save_line_to_file+130, create_output_file+103, handle_line_error.isra.1+168, xalloc_die+44, load_buffer.part.5+635
0000000000003221         sub        rsp, 0x90
0000000000003228         mov        rax, qword [fs:0x28]
0000000000003231         mov        qword [rsp+0x98+var_10], rax
0000000000003239         xor        eax, eax
000000000000323b         mov        rbx, rsp
000000000000323e         call       close_output_file                           ; close_output_file
0000000000003243         lea        rsi, qword [caught_signals]                 ; argument "__set" for method j_sigprocmask, caught_signals
000000000000324a         xor        edi, edi                                    ; argument "__how" for method j_sigprocmask
000000000000324c         mov        rdx, rbx                                    ; argument "__oset" for method j_sigprocmask
000000000000324f         call       j_sigprocmask                               ; sigprocmask
0000000000003254         movzx      eax, byte [remove_files]                    ; remove_files
000000000000325b         test       al, al
000000000000325d         je         loc_3266

000000000000325f         xor        edi, edi
0000000000003261         call       delete_all_files.part.0                     ; delete_all_files.part.0

                     loc_3266:
0000000000003266         mov        edi, 0x2                                    ; argument "__how" for method j_sigprocmask, CODE XREF=cleanup_fatal+61
000000000000326b         xor        edx, edx                                    ; argument "__oset" for method j_sigprocmask
000000000000326d         mov        rsi, rbx                                    ; argument "__set" for method j_sigprocmask
0000000000003270         call       j_sigprocmask                               ; sigprocmask
0000000000003275         mov        edi, 0x1                                    ; argument "__status" for method j_exit
000000000000327a         call       j_exit                                      ; exit
                        ; endp
000000000000327f         align      128                                         ; End of unwind block (FDE at 0x18594)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_48: int8_t, -72


                     close_output_file:
0000000000003280         push       r13                                         ; Begin of unwind block (FDE at 0x185b0), CODE XREF=regexp_error+200, main+1718, main+1925, main+2111, main+2895, main+2991, cleanup_fatal+30
0000000000003282         push       r12
0000000000003284         push       rbp
0000000000003285         push       rbx
0000000000003286         sub        rsp, 0xa8
000000000000328d         mov        rdi, qword [output_stream]                  ; output_stream
0000000000003294         mov        rax, qword [fs:0x28]
000000000000329d         mov        qword [rsp+0xc8+var_30], rax
00000000000032a5         xor        eax, eax
00000000000032a7         test       rdi, rdi
00000000000032aa         je         loc_32eb

00000000000032ac         test       byte [rdi], 0x20
00000000000032af         jne        loc_3406

00000000000032b5         call       rpl_fclose                                  ; rpl_fclose
00000000000032ba         test       eax, eax
00000000000032bc         jne        loc_33c6

00000000000032c2         mov        rdi, qword [bytes_written]                  ; bytes_written
00000000000032c9         test       rdi, rdi
00000000000032cc         jne        loc_32d7

00000000000032ce         cmp        byte [elide_empty_files], 0x0               ; elide_empty_files
00000000000032d5         jne        loc_3340

                     loc_32d7:
00000000000032d7         cmp        byte [suppress_count], 0x0                  ; suppress_count, CODE XREF=close_output_file+76
00000000000032de         je         loc_3310

                     loc_32e0:
00000000000032e0         mov        qword [output_stream], 0x0                  ; output_stream, CODE XREF=close_output_file+186, close_output_file+273, close_output_file+316

                     loc_32eb:
00000000000032eb         mov        rax, qword [rsp+0xc8+var_30]                ; CODE XREF=close_output_file+42
00000000000032f3         xor        rax, qword [fs:0x28]
00000000000032fc         jne        loc_33c1

0000000000003302         add        rsp, 0xa8
0000000000003309         pop        rbx
000000000000330a         pop        rbp
000000000000330b         pop        r12
000000000000330d         pop        r13
000000000000330f         ret
                        ; endp

                     loc_3310:
0000000000003310         lea        rsi, qword [rsp+0xc8+var_48]                ; CODE XREF=close_output_file+94
0000000000003318         call       umaxtostr                                   ; umaxtostr
000000000000331d         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003324         lea        rdx, qword [aSSSn+8]                        ; 0x17090
000000000000332b         mov        rcx, rax
000000000000332e         mov        esi, 0x1
0000000000003333         xor        eax, eax
0000000000003335         call       j___fprintf_chk                             ; __fprintf_chk
000000000000333a         jmp        loc_32e0
000000000000333c         align      64

                     loc_3340:
0000000000003340         lea        rsi, qword [caught_signals]                 ; argument "__set" for method j_sigprocmask, caught_signals, CODE XREF=close_output_file+85
0000000000003347         mov        rbp, rsp
000000000000334a         mov        rdx, rbp                                    ; argument "__oset" for method j_sigprocmask
000000000000334d         call       j_sigprocmask                               ; sigprocmask
0000000000003352         mov        r12, qword [output_filename]                ; output_filename
0000000000003359         mov        rdi, r12                                    ; argument "__name" for method j_unlink
000000000000335c         call       j_unlink                                    ; unlink
0000000000003361         mov        ebx, eax
0000000000003363         call       j___errno_location                          ; __errno_location
0000000000003368         mov        r13d, dword [rax]
000000000000336b         mov        eax, dword [files_created]                  ; files_created
0000000000003371         xor        edx, edx
0000000000003373         test       ebx, ebx
0000000000003375         mov        rsi, rbp                                    ; argument "__set" for method j_sigprocmask
0000000000003378         mov        edi, 0x2                                    ; argument "__how" for method j_sigprocmask
000000000000337d         sete       dl
0000000000003380         sub        eax, edx
0000000000003382         xor        edx, edx                                    ; argument "__oset" for method j_sigprocmask
0000000000003384         mov        dword [files_created], eax                  ; files_created
000000000000338a         call       j_sigprocmask                               ; sigprocmask
000000000000338f         test       ebx, ebx
0000000000003391         je         loc_32e0

0000000000003397         mov        rdx, r12
000000000000339a         xor        edi, edi
000000000000339c         mov        esi, 0x3
00000000000033a1         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000033a6         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x16b61
00000000000033ad         mov        rcx, rax
00000000000033b0         mov        esi, r13d                                   ; argument "__errnum" for method j_error
00000000000033b3         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000033b5         xor        eax, eax
00000000000033b7         call       j_error                                     ; error
00000000000033bc         jmp        loc_32e0

                     loc_33c1:
00000000000033c1         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=close_output_file+124
                        ; endp

                     loc_33c6:
00000000000033c6         mov        rdx, qword [output_filename]                ; output_filename, CODE XREF=close_output_file+60
00000000000033cd         mov        esi, 0x3
00000000000033d2         xor        edi, edi
00000000000033d4         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000033d9         mov        rbx, rax
00000000000033dc         call       j___errno_location                          ; __errno_location
00000000000033e1         mov        esi, dword [rax]
00000000000033e3         lea        rdx, qword [aSS+4]                          ; 0x16b61
00000000000033ea         mov        rcx, rbx

                     loc_33ed:
00000000000033ed         xor        edi, edi                                    ; argument "__status" for method j_error, CODE XREF=close_output_file+437
00000000000033ef         xor        eax, eax
00000000000033f1         call       j_error                                     ; error
00000000000033f6         mov        qword [output_stream], 0x0                  ; output_stream
0000000000003401         call       cleanup_fatal                               ; cleanup_fatal

                     loc_3406:
0000000000003406         mov        rsi, qword [output_filename]                ; output_filename, CODE XREF=close_output_file+47
000000000000340d         mov        edi, 0x4
0000000000003412         call       quotearg_style                              ; quotearg_style
0000000000003417         lea        rsi, qword [aWriteErrorForS]                ; argument "msgid" for method j_dcgettext, "write error for %s"
000000000000341e         mov        rbx, rax
0000000000003421         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003426         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003428         call       j_dcgettext                                 ; dcgettext
000000000000342d         mov        rcx, rbx
0000000000003430         mov        rdx, rax
0000000000003433         xor        esi, esi
0000000000003435         jmp        loc_33ed
0000000000003437         align      64                                          ; End of unwind block (FDE at 0x185b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_38: int64_t, -56


                     save_line_to_file:
0000000000003440         push       rbp                                         ; Begin of unwind block (FDE at 0x185ec), CODE XREF=main+2101, main+2575, main+2687, dump_rest_of_file+19
0000000000003441         push       rbx
0000000000003442         mov        rbx, rdi
0000000000003445         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
000000000000344a         sub        rsp, 0x8
000000000000344e         mov        rdx, qword [rbx]                            ; argument "__n" for method j_fwrite_unlocked
0000000000003451         mov        rdi, qword [rdi+8]                          ; argument "__ptr" for method j_fwrite_unlocked
0000000000003455         mov        rcx, qword [output_stream]                  ; argument "__stream" for method j_fwrite_unlocked, output_stream
000000000000345c         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000003461         mov        rdx, qword [rbx]
0000000000003464         cmp        rdx, rax
0000000000003467         jne        loc_3477

0000000000003469         add        qword [bytes_written], rdx                  ; bytes_written
0000000000003470         add        rsp, 0x8
0000000000003474         pop        rbx
0000000000003475         pop        rbp
0000000000003476         ret
                        ; endp

                     loc_3477:
0000000000003477         mov        rsi, qword [output_filename]                ; output_filename, CODE XREF=save_line_to_file+39
000000000000347e         mov        edi, 0x4
0000000000003483         call       quotearg_style                              ; quotearg_style
0000000000003488         lea        rsi, qword [aWriteErrorForS]                ; argument "msgid" for method j_dcgettext, "write error for %s"
000000000000348f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003494         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003496         mov        rbp, rax
0000000000003499         call       j_dcgettext                                 ; dcgettext
000000000000349e         mov        rbx, rax
00000000000034a1         call       j___errno_location                          ; __errno_location
00000000000034a6         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000034a8         mov        rcx, rbp
00000000000034ab         mov        rdx, rbx                                    ; argument "__format" for method j_error
00000000000034ae         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000034b0         xor        eax, eax
00000000000034b2         call       j_error                                     ; error
00000000000034b7         mov        qword [output_stream], 0x0                  ; output_stream
00000000000034c2         call       cleanup_fatal                               ; cleanup_fatal
00000000000034c7         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x185ec)
                     create_output_file:
00000000000034d0         push       r12                                         ; Begin of unwind block (FDE at 0x18618), CODE XREF=main+2018, main+2625, main+2885
00000000000034d2         push       rbp
00000000000034d3         mov        ebp, 0x4b
00000000000034d8         push       rbx
00000000000034d9         sub        rsp, 0x90
00000000000034e0         mov        rax, qword [fs:0x28]
00000000000034e9         mov        qword [rsp+0xc0+var_38], rax
00000000000034f1         xor        eax, eax
00000000000034f3         mov        edi, dword [files_created]                  ; files_created
00000000000034f9         call       make_filename                               ; make_filename
00000000000034fe         mov        rbx, rax
0000000000003501         mov        qword [output_filename], rax                ; output_filename
0000000000003508         mov        eax, dword [files_created]                  ; files_created
000000000000350e         cmp        eax, 0xffffffff
0000000000003511         jne        loc_3540

                     loc_3513:
0000000000003513         mov        rdx, rbx                                    ; CODE XREF=create_output_file+260
0000000000003516         mov        esi, 0x3
000000000000351b         xor        edi, edi
000000000000351d         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000003522         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x16b61
0000000000003529         mov        rcx, rax
000000000000352c         mov        esi, ebp                                    ; argument "__errnum" for method j_error
000000000000352e         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003530         xor        eax, eax
0000000000003532         call       j_error                                     ; error
0000000000003537         call       cleanup_fatal                               ; cleanup_fatal
000000000000353c         nop        dword [rax]

                     loc_3540:
0000000000003540         mov        r12, rsp                                    ; CODE XREF=create_output_file+65
0000000000003543         lea        rsi, qword [caught_signals]                 ; argument "__set" for method j_sigprocmask, caught_signals
000000000000354a         xor        edi, edi                                    ; argument "__how" for method j_sigprocmask
000000000000354c         mov        rdx, r12                                    ; argument "__oset" for method j_sigprocmask
000000000000354f         call       j_sigprocmask                               ; sigprocmask
0000000000003554         lea        rsi, qword [aWriteErrorForS+19]             ; 0x15fbc
000000000000355b         mov        rdi, rbx
000000000000355e         call       fopen_safer                                 ; fopen_safer
0000000000003563         mov        rbx, rax
0000000000003566         mov        qword [output_stream], rax                  ; output_stream
000000000000356d         call       j___errno_location                          ; __errno_location
0000000000003572         mov        edx, dword [files_created]                  ; files_created
0000000000003578         mov        ebp, dword [rax]
000000000000357a         xor        eax, eax
000000000000357c         test       rbx, rbx
000000000000357f         mov        rsi, r12                                    ; argument "__set" for method j_sigprocmask
0000000000003582         mov        edi, 0x2                                    ; argument "__how" for method j_sigprocmask
0000000000003587         setne      al
000000000000358a         add        eax, edx
000000000000358c         xor        edx, edx                                    ; argument "__oset" for method j_sigprocmask
000000000000358e         mov        dword [files_created], eax                  ; files_created
0000000000003594         call       j_sigprocmask                               ; sigprocmask
0000000000003599         test       rbx, rbx
000000000000359c         je         loc_35cd

000000000000359e         mov        rax, qword [rsp+0xc0+var_38]
00000000000035a6         xor        rax, qword [fs:0x28]
00000000000035af         mov        qword [bytes_written], 0x0                  ; bytes_written
00000000000035ba         jne        loc_35c8

00000000000035bc         add        rsp, 0x90
00000000000035c3         pop        rbx
00000000000035c4         pop        rbp
00000000000035c5         pop        r12
00000000000035c7         ret
                        ; endp

                     loc_35c8:
00000000000035c8         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=create_output_file+234
                        ; endp

                     loc_35cd:
00000000000035cd         mov        rbx, qword [output_filename]                ; output_filename, CODE XREF=create_output_file+204
00000000000035d4         jmp        loc_3513
00000000000035d9         align      32                                          ; End of unwind block (FDE at 0x18618)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     interrupt_handler:
00000000000035e0         movzx      eax, byte [remove_files]                    ; Begin of unwind block (FDE at 0x1864c), remove_files, DATA XREF=main+1371
00000000000035e7         push       rbx
00000000000035e8         mov        ebx, edi
00000000000035ea         test       al, al
00000000000035ec         je         loc_35f8

00000000000035ee         mov        edi, 0x1
00000000000035f3         call       delete_all_files.part.0                     ; delete_all_files.part.0

                     loc_35f8:
00000000000035f8         mov        edi, ebx                                    ; argument "__sig" for method j_signal, CODE XREF=interrupt_handler+12
00000000000035fa         xor        esi, esi                                    ; argument "__handler" for method j_signal
00000000000035fc         call       j_signal                                    ; signal
0000000000003601         mov        edi, ebx                                    ; argument "__sig" for method j_raise
0000000000003603         pop        rbx
0000000000003604         jmp        j_raise                                     ; raise
                        ; endp
0000000000003609         align      16                                          ; End of unwind block (FDE at 0x1864c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48


                     handle_line_error.isra.1:
0000000000003610         push       r13                                         ; Begin of unwind block (FDE at 0x18668), CODE XREF=main+2254
0000000000003612         push       r12
0000000000003614         push       rbp
0000000000003615         push       rbx
0000000000003616         mov        rbx, rsi
0000000000003619         sub        rsp, 0x28
000000000000361d         mov        rbp, rsp
0000000000003620         mov        rsi, rbp
0000000000003623         mov        rax, qword [fs:0x28]
000000000000362c         mov        qword [rsp+0x48+var_30], rax
0000000000003631         xor        eax, eax
0000000000003633         call       umaxtostr                                   ; umaxtostr
0000000000003638         mov        rdi, rax
000000000000363b         call       quote                                       ; quote
0000000000003640         lea        rsi, qword [aSSLineNumberOu]                ; argument "msgid" for method j_dcgettext, "%s: %s: line number out of range"
0000000000003647         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003649         mov        r12, qword [program_name]                   ; program_name
0000000000003650         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003655         mov        r13, rax
0000000000003658         call       j_dcgettext                                 ; dcgettext
000000000000365d         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000003664         mov        rdx, rax
0000000000003667         mov        r8, r13
000000000000366a         xor        eax, eax
000000000000366c         mov        rcx, r12
000000000000366f         mov        esi, 0x1
0000000000003674         call       j___fprintf_chk                             ; __fprintf_chk
0000000000003679         test       rbx, rbx
000000000000367c         je         loc_36bd

000000000000367e         mov        rdi, rbx
0000000000003681         mov        rsi, rbp
0000000000003684         call       umaxtostr                                   ; umaxtostr
0000000000003689         lea        rsi, qword [aOnRepetitionSn]                ; argument "msgid" for method j_dcgettext, " on repetition %s\\n"
0000000000003690         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003695         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003697         mov        rbx, rax
000000000000369a         call       j_dcgettext                                 ; dcgettext
000000000000369f         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000036a6         mov        rdx, rax
00000000000036a9         mov        rcx, rbx
00000000000036ac         mov        esi, 0x1
00000000000036b1         xor        eax, eax
00000000000036b3         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_36b8:
00000000000036b8         call       cleanup_fatal                               ; cleanup_fatal, CODE XREF=handle_line_error.isra.1+190

                     loc_36bd:
00000000000036bd         mov        rsi, qword [stderr@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputc, stderr@@GLIBC_2.2.5, CODE XREF=handle_line_error.isra.1+108
00000000000036c4         mov        edi, 0xa                                    ; argument "__c" for method j_fputc
00000000000036c9         call       j_fputc                                     ; fputc
00000000000036ce         jmp        loc_36b8


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     keep_new_line.isra.2:
00000000000036d0         push       r13                                         ; End of unwind block (FDE at 0x18668), Begin of unwind block (FDE at 0x18690), CODE XREF=load_buffer.part.5+308, load_buffer.part.5+373
00000000000036d2         push       r12
00000000000036d4         mov        r13, rdx
00000000000036d7         push       rbp
00000000000036d8         push       rbx
00000000000036d9         mov        rbp, rsi
00000000000036dc         mov        r12, rcx
00000000000036df         sub        rsp, 0x8
00000000000036e3         cmp        qword [rdi], 0x0
00000000000036e7         je         loc_3780

                     loc_36ed:
00000000000036ed         mov        rbx, qword [rbp]                            ; CODE XREF=keep_new_line.isra.2+230
00000000000036f1         mov        rax, qword [rbx]
00000000000036f4         cmp        rax, 0x50
00000000000036f8         je         loc_3730

                     loc_36fa:
00000000000036fa         mov        rsi, qword [rbx+8]                          ; CODE XREF=keep_new_line.isra.2+165
00000000000036fe         add        rax, 0x1
0000000000003702         mov        rdi, rsi
0000000000003705         add        rsi, 0x1
0000000000003709         shl        rdi, 0x4
000000000000370d         add        rdi, rbx
0000000000003710         mov        qword [rdi+0x20], r13
0000000000003714         mov        qword [rdi+0x18], r12
0000000000003718         mov        qword [rbx], rax
000000000000371b         mov        qword [rbx+8], rsi
000000000000371f         add        rsp, 0x8
0000000000003723         pop        rbx
0000000000003724         pop        rbp
0000000000003725         pop        r12
0000000000003727         pop        r13
0000000000003729         ret
                        ; endp
000000000000372a         align      16

                     loc_3730:
0000000000003730         mov        edi, 0x520                                  ; CODE XREF=keep_new_line.isra.2+40
0000000000003735         call       xmalloc                                     ; xmalloc
000000000000373a         mov        qword [rax+0x518], 0x0
0000000000003745         mov        qword [rax], 0x0
000000000000374c         mov        qword [rax+8], 0x0
0000000000003754         mov        qword [rax+0x10], 0x0
000000000000375c         mov        qword [rbx+0x518], rax
0000000000003763         mov        rax, qword [rbp]
0000000000003767         mov        rbx, qword [rax+0x518]
000000000000376e         mov        qword [rbp], rbx
0000000000003772         mov        rax, qword [rbx]
0000000000003775         jmp        loc_36fa
000000000000377a         align      128

                     loc_3780:
0000000000003780         mov        rbx, rdi                                    ; CODE XREF=keep_new_line.isra.2+23
0000000000003783         mov        edi, 0x520
0000000000003788         call       xmalloc                                     ; xmalloc
000000000000378d         mov        qword [rbp], rax
0000000000003791         mov        qword [rax+0x518], 0x0
000000000000379c         mov        qword [rax], 0x0
00000000000037a3         mov        qword [rax+8], 0x0
00000000000037ab         mov        qword [rax+0x10], 0x0
00000000000037b3         mov        qword [rbx], rax
00000000000037b6         jmp        loc_36ed
00000000000037bb         align      64                                          ; End of unwind block (FDE at 0x18690)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_buffer.isra.4:
00000000000037c0         push       r12                                         ; Begin of unwind block (FDE at 0x186cc), CODE XREF=load_buffer.part.5+482, load_buffer.part.5+776, remove_line+21
00000000000037c2         push       rbp
00000000000037c3         mov        rbp, rdi
00000000000037c6         mov        rdi, qword [rsi]
00000000000037c9         push       rbx
00000000000037ca         mov        r12, rsi
00000000000037cd         test       rdi, rdi
00000000000037d0         je         loc_37ec

00000000000037d2         nop        word [rax+rax]

                     loc_37d8:
00000000000037d8         mov        rbx, qword [rdi+0x518]                      ; CODE XREF=free_buffer.isra.4+42
00000000000037df         call       j_free                                      ; free
00000000000037e4         test       rbx, rbx
00000000000037e7         mov        rdi, rbx
00000000000037ea         jne        loc_37d8

                     loc_37ec:
00000000000037ec         mov        rdi, qword [rbp]                            ; argument "__ptr" for method j_free, CODE XREF=free_buffer.isra.4+16
00000000000037f0         mov        qword [r12], 0x0
00000000000037f8         call       j_free                                      ; free
00000000000037fd         mov        qword [rbp], 0x0
0000000000003805         pop        rbx
0000000000003806         pop        rbp
0000000000003807         pop        r12
0000000000003809         ret
                        ; endp
000000000000380a         align      16                                          ; End of unwind block (FDE at 0x186cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
0000000000003810         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0x186f8), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=main+2679, new_control_record+205, sub_3c60+37, quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41
0000000000003817         sub        rsp, 0x8
000000000000381b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003820         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003822         call       j_dcgettext                                 ; dcgettext
0000000000003827         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x16b61
000000000000382e         mov        rcx, rax
0000000000003831         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003833         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003835         xor        eax, eax
0000000000003837         call       j_error                                     ; error
000000000000383c         call       cleanup_fatal                               ; cleanup_fatal
0000000000003841         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x186f8)
0000000000003846         nop        word [cs:rax+rax]
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     new_control_record:
0000000000003850         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1870c), CODE XREF=main+882, main+1083
0000000000003854         mov        rcx, qword [control_used]                   ; control_used
000000000000385b         cmp        rcx, qword [control_allocated.7351]         ; control_allocated.7351
0000000000003862         mov        rdi, qword [controls]                       ; controls
0000000000003869         je         loc_38a8

                     loc_386b:
000000000000386b         lea        rax, qword [rcx+1]                          ; CODE XREF=new_control_record+156
000000000000386f         mov        qword [control_used], rax                   ; control_used
0000000000003876         lea        rax, qword [rcx+rcx*2]
000000000000387a         shl        rax, 0x5
000000000000387e         add        rax, rdi
0000000000003881         mov        byte [rax+0x1e], 0x0
0000000000003885         mov        qword [rax+0x10], 0x0
000000000000388d         mov        byte [rax+0x1c], 0x0
0000000000003891         mov        qword [rax+8], 0x0
0000000000003899         mov        qword [rax], 0x0
00000000000038a0         add        rsp, 0x8
00000000000038a4         ret
                        ; endp
00000000000038a5         align      8

                     loc_38a8:
00000000000038a8         test       rdi, rdi                                    ; CODE XREF=new_control_record+25
00000000000038ab         je         loc_38f8

00000000000038ad         movabs     rax, 0xe38e38e38e38e2
00000000000038b7         cmp        rcx, rax
00000000000038ba         ja         loc_391d

00000000000038bc         mov        rax, rcx
00000000000038bf         shr        rax, 0x1
00000000000038c2         lea        rcx, qword [rcx+rax+1]

                     loc_38c7:
00000000000038c7         lea        rsi, qword [rcx+rcx*2]                      ; CODE XREF=new_control_record+203
00000000000038cb         mov        qword [control_allocated.7351], rcx         ; control_allocated.7351
00000000000038d2         shl        rsi, 0x5
00000000000038d6         call       xrealloc                                    ; xrealloc
00000000000038db         mov        rcx, qword [control_used]                   ; control_used
00000000000038e2         mov        rdi, rax
00000000000038e5         mov        qword [controls], rax                       ; controls
00000000000038ec         jmp        loc_386b
00000000000038f1         align      8

                     loc_38f8:
00000000000038f8         test       rcx, rcx                                    ; CODE XREF=new_control_record+91
00000000000038fb         mov        eax, 0x1
0000000000003900         mov        edx, 0x60
0000000000003905         cmove      rcx, rax
0000000000003909         mov        rax, rdx
000000000000390c         xor        esi, esi
000000000000390e         mul        rcx
0000000000003911         jo         loc_3922

                     loc_3913:
0000000000003913         test       rax, rax                                    ; CODE XREF=new_control_record+215
0000000000003916         js         loc_391d

0000000000003918         test       rsi, rsi
000000000000391b         je         loc_38c7

                     loc_391d:
000000000000391d         call       xalloc_die                                  ; xalloc_die, CODE XREF=new_control_record+106, new_control_record+198

                     loc_3922:
0000000000003922         mov        esi, 0x1                                    ; CODE XREF=new_control_record+193
0000000000003927         jmp        loc_3913
0000000000003929         align      16                                          ; End of unwind block (FDE at 0x1870c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     load_buffer.part.5:
0000000000003930         push       r15                                         ; Begin of unwind block (FDE at 0x18728), CODE XREF=remove_line+185, find_line+85, find_line+225, get_first_line_in_buffer+34
0000000000003932         push       r14
0000000000003934         mov        ecx, 0x1fff
0000000000003939         push       r13
000000000000393b         push       r12
000000000000393d         push       rbp
000000000000393e         push       rbx
000000000000393f         sub        rsp, 0x18
0000000000003943         cmp        qword [hold_count], 0x1fff                  ; hold_count
000000000000394e         cmovae     rcx, qword [hold_count]                     ; hold_count
0000000000003956         mov        rbp, rcx
0000000000003959         cmp        rbp, 0x1fff
0000000000003960         jbe        loc_3b2c

0000000000003966         nop        word [cs:rax+rax]

                     loc_3970:
0000000000003970         sub        rbp, 0x1800                                 ; CODE XREF=load_buffer.part.5+502
0000000000003977         and        rbp, 0xfffffffffffff800
000000000000397e         lea        r13, qword [rbp+0x1fff]
0000000000003985         add        rbp, 0x2000

                     loc_398c:
000000000000398c         mov        edi, 0x48                                   ; CODE XREF=load_buffer.part.5+519
0000000000003991         call       xmalloc                                     ; xmalloc
0000000000003996         mov        rdi, rbp
0000000000003999         mov        rbx, rax
000000000000399c         call       xmalloc                                     ; xmalloc
00000000000039a1         mov        rbp, qword [hold_count]                     ; hold_count
00000000000039a8         mov        r12, rax
00000000000039ab         mov        qword [rbx+0x28], rax
00000000000039af         mov        rax, qword [last_line_number]               ; last_line_number
00000000000039b6         mov        qword [rbx], r13
00000000000039b9         mov        qword [rbx+0x38], 0x0
00000000000039c1         mov        qword [rbx+0x30], 0x0
00000000000039c9         mov        qword [rbx+0x20], 0x0
00000000000039d1         mov        qword [rbx+8], 0x0
00000000000039d9         add        rax, 0x1
00000000000039dd         test       rbp, rbp
00000000000039e0         mov        qword [rbx+0x40], 0x0
00000000000039e8         mov        qword [rbx+0x18], rax
00000000000039ec         mov        qword [rbx+0x10], rax
00000000000039f0         jne        loc_3b40

                     loc_39f6:
00000000000039f6         xor        edi, edi                                    ; CODE XREF=load_buffer.part.5+573
00000000000039f8         mov        rdx, r13
00000000000039fb         mov        rsi, r12
00000000000039fe         call       safe_read                                   ; safe_read
0000000000003a03         test       rax, rax
0000000000003a06         jne        loc_3b78

0000000000003a0c         mov        byte [have_read_eof], 0x1                   ; have_read_eof

                     loc_3a13:
0000000000003a13         add        rax, qword [rbx+8]                          ; CODE XREF=load_buffer.part.5+588
0000000000003a17         test       rax, rax
0000000000003a1a         mov        rbp, rax
0000000000003a1d         mov        qword [rbx+8], rax
0000000000003a21         je         loc_3ad4

0000000000003a27         mov        r12, qword [rbx+0x28]

                     loc_3a2b:
0000000000003a2b         lea        rax, qword [rbx+0x38]                       ; CODE XREF=load_buffer.part.5+564
0000000000003a2f         xor        r14d, r14d
0000000000003a32         mov        qword [rsp+0x48+var_40], rax
0000000000003a37         jmp        loc_3a69
0000000000003a39         align      64

                     loc_3a40:
0000000000003a40         mov        r13, rax                                    ; CODE XREF=load_buffer.part.5+335
0000000000003a43         mov        rsi, qword [rsp+0x48+var_40]
0000000000003a48         mov        rdx, r12
0000000000003a4b         sub        r13, r12
0000000000003a4e         lea        rdi, qword [rbx+0x30]
0000000000003a52         lea        r12, qword [r15+1]
0000000000003a56         add        r13, 0x1
0000000000003a5a         add        r14, 0x1
0000000000003a5e         mov        rcx, r13
0000000000003a61         sub        rbp, r13
0000000000003a64         call       keep_new_line.isra.2                        ; keep_new_line.isra.2

                     loc_3a69:
0000000000003a69         mov        rdx, rbp                                    ; argument "__n" for method j_memchr, CODE XREF=load_buffer.part.5+263
0000000000003a6c         mov        esi, 0xa                                    ; argument "__c" for method j_memchr
0000000000003a71         mov        rdi, r12                                    ; argument "__s" for method j_memchr
0000000000003a74         call       j_memchr                                    ; memchr
0000000000003a79         test       rax, rax
0000000000003a7c         mov        r15, rax
0000000000003a7f         jne        loc_3a40

0000000000003a81         test       rbp, rbp
0000000000003a84         je         loc_3aaa

0000000000003a86         cmp        byte [have_read_eof], 0x0                   ; have_read_eof
0000000000003a8d         je         loc_3c00

0000000000003a93         lea        rsi, qword [rbx+0x38]
0000000000003a97         lea        rdi, qword [rbx+0x30]
0000000000003a9b         mov        rcx, rbp
0000000000003a9e         mov        rdx, r12
0000000000003aa1         add        r14, 0x1
0000000000003aa5         call       keep_new_line.isra.2                        ; keep_new_line.isra.2

                     loc_3aaa:
0000000000003aaa         mov        rax, qword [last_line_number]               ; last_line_number, CODE XREF=load_buffer.part.5+340, load_buffer.part.5+760
0000000000003ab1         mov        qword [rbx+0x20], r14
0000000000003ab5         lea        rdx, qword [rax+1]
0000000000003ab9         add        rax, r14
0000000000003abc         test       r14, r14
0000000000003abf         mov        qword [last_line_number], rax               ; last_line_number
0000000000003ac6         mov        qword [rbx+0x10], rdx
0000000000003aca         mov        qword [rbx+0x18], rdx
0000000000003ace         jne        loc_3bb0

                     loc_3ad4:
0000000000003ad4         cmp        byte [have_read_eof], 0x0                   ; have_read_eof, CODE XREF=load_buffer.part.5+241
0000000000003adb         jne        loc_3c30

0000000000003ae1         mov        rcx, qword [rbx]
0000000000003ae4         mov        eax, 0x2
0000000000003ae9         xor        esi, esi
0000000000003aeb         mul        rcx
0000000000003aee         jo         loc_3c7b

                     loc_3af4:
0000000000003af4         test       rax, rax                                    ; CODE XREF=sub_3c60+32
0000000000003af7         js         loc_3c85

0000000000003afd         test       rsi, rsi
0000000000003b00         jne        loc_3c85

0000000000003b06         lea        rsi, qword [rbx+0x30]
0000000000003b0a         lea        rdi, qword [rbx+0x28]
0000000000003b0e         lea        rbp, qword [rcx+rcx]
0000000000003b12         call       free_buffer.isra.4                          ; free_buffer.isra.4
0000000000003b17         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
0000000000003b1a         call       j_free                                      ; free
0000000000003b1f         cmp        rbp, 0x1fff
0000000000003b26         ja         loc_3970

                     loc_3b2c:
0000000000003b2c         mov        ebp, 0x2000                                 ; CODE XREF=load_buffer.part.5+48
0000000000003b31         mov        r13d, 0x1fff
0000000000003b37         jmp        loc_398c
0000000000003b3c         align      64

                     loc_3b40:
0000000000003b40         mov        rsi, qword [hold_area]                      ; argument "__src" for method j_memcpy, hold_area, CODE XREF=load_buffer.part.5+192
0000000000003b47         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000003b4a         mov        rdi, r12                                    ; argument "__dest" for method j_memcpy
0000000000003b4d         call       j_memcpy                                    ; memcpy
0000000000003b52         sub        r13, rbp
0000000000003b55         mov        qword [rbx+8], rbp
0000000000003b59         mov        qword [hold_count], 0x0                     ; hold_count
0000000000003b64         je         loc_3a2b

0000000000003b6a         add        r12, rbp
0000000000003b6d         jmp        loc_39f6
0000000000003b72         align      8

                     loc_3b78:
0000000000003b78         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=load_buffer.part.5+214
0000000000003b7c         jne        loc_3a13

0000000000003b82         lea        rsi, qword [aReadError]                     ; argument "msgid" for method j_dcgettext, "read error"
0000000000003b89         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003b8e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003b90         call       j_dcgettext                                 ; dcgettext
0000000000003b95         mov        rbx, rax
0000000000003b98         call       j___errno_location                          ; __errno_location
0000000000003b9d         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000003b9f         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000003ba2         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003ba4         xor        eax, eax
0000000000003ba6         call       j_error                                     ; error
0000000000003bab         call       cleanup_fatal                               ; cleanup_fatal

                     loc_3bb0:
0000000000003bb0         mov        rax, qword [rbx+0x30]                       ; CODE XREF=load_buffer.part.5+414
0000000000003bb4         mov        qword [rbx+0x40], 0x0
0000000000003bbc         mov        qword [rbx+0x38], rax
0000000000003bc0         mov        rax, qword [head]                           ; head
0000000000003bc7         test       rax, rax
0000000000003bca         jne        loc_3bdb

0000000000003bcc         jmp        sub_3c60                                    ; sub_3c60
                        ; endp
0000000000003bd1         align      8

                     loc_3bd8:
0000000000003bd8         mov        rax, rdx                                    ; CODE XREF=load_buffer.part.5+690

                     loc_3bdb:
0000000000003bdb         mov        rdx, qword [rax+0x40]                       ; CODE XREF=load_buffer.part.5+666
0000000000003bdf         test       rdx, rdx
0000000000003be2         jne        loc_3bd8

0000000000003be4         mov        qword [rax+0x40], rbx
0000000000003be8         add        rsp, 0x18
0000000000003bec         mov        eax, 0x1
0000000000003bf1         pop        rbx
0000000000003bf2         pop        rbp
0000000000003bf3         pop        r12
0000000000003bf5         pop        r13
0000000000003bf7         pop        r14
0000000000003bf9         pop        r15
0000000000003bfb         ret
                        ; endp
0000000000003bfc         align      1024

                     loc_3c00:
0000000000003c00         mov        rdi, r12                                    ; CODE XREF=load_buffer.part.5+349
0000000000003c03         mov        rsi, rbp
0000000000003c06         call       xmemdup                                     ; xmemdup
0000000000003c0b         mov        rdi, qword [hold_area]                      ; argument "__ptr" for method j_free, hold_area
0000000000003c12         mov        r12, rax
0000000000003c15         call       j_free                                      ; free
0000000000003c1a         mov        qword [hold_area], r12                      ; hold_area
0000000000003c21         mov        qword [hold_count], rbp                     ; hold_count
0000000000003c28         jmp        loc_3aaa
0000000000003c2d         align      16

                     loc_3c30:
0000000000003c30         lea        rsi, qword [rbx+0x30]                       ; CODE XREF=load_buffer.part.5+427
0000000000003c34         lea        rdi, qword [rbx+0x28]
0000000000003c38         call       free_buffer.isra.4                          ; free_buffer.isra.4
0000000000003c3d         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
0000000000003c40         call       j_free                                      ; free
0000000000003c45         add        rsp, 0x18
0000000000003c49         xor        eax, eax
0000000000003c4b         pop        rbx
0000000000003c4c         pop        rbp
0000000000003c4d         pop        r12
0000000000003c4f         pop        r13
0000000000003c51         pop        r14
0000000000003c53         pop        r15
0000000000003c55         ret
                        ; endp
0000000000003c56         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3c60:
0000000000003c60         mov        qword [head], rbx                           ; head, CODE XREF=load_buffer.part.5+668
0000000000003c67         add        rsp, 0x18
0000000000003c6b         mov        eax, 0x1
0000000000003c70         pop        rbx
0000000000003c71         pop        rbp
0000000000003c72         pop        r12
0000000000003c74         pop        r13
0000000000003c76         pop        r14
0000000000003c78         pop        r15
0000000000003c7a         ret
                        ; endp

                     loc_3c7b:
0000000000003c7b         mov        esi, 0x1                                    ; CODE XREF=load_buffer.part.5+446
0000000000003c80         jmp        loc_3af4

                     loc_3c85:
0000000000003c85         call       xalloc_die                                  ; xalloc_die, CODE XREF=load_buffer.part.5+455, load_buffer.part.5+464
0000000000003c8a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x18728)
                     remove_line:
0000000000003c90         push       rbx                                         ; Begin of unwind block (FDE at 0x187a8), CODE XREF=main+1656, main+2080, main+2129, main+2553, main+2981, dump_rest_of_file+24
0000000000003c91         mov        rbx, qword [prev_buf.7217]                  ; prev_buf.7217
0000000000003c98         test       rbx, rbx
0000000000003c9b         je         loc_3cbd

0000000000003c9d         lea        rsi, qword [rbx+0x30]
0000000000003ca1         lea        rdi, qword [rbx+0x28]
0000000000003ca5         call       free_buffer.isra.4                          ; free_buffer.isra.4
0000000000003caa         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
0000000000003cad         call       j_free                                      ; free
0000000000003cb2         mov        qword [prev_buf.7217], 0x0                  ; prev_buf.7217

                     loc_3cbd:
0000000000003cbd         mov        rdx, qword [head]                           ; head, CODE XREF=remove_line+11
0000000000003cc4         test       rdx, rdx
0000000000003cc7         je         loc_3d40

                     loc_3cc9:
0000000000003cc9         mov        rax, qword [rdx+0x18]                       ; CODE XREF=remove_line+201
0000000000003ccd         cmp        rax, qword [current_line]                   ; current_line
0000000000003cd4         jbe        loc_3cdd

0000000000003cd6         mov        qword [current_line], rax                   ; current_line

                     loc_3cdd:
0000000000003cdd         mov        rsi, qword [rdx+0x38]                       ; CODE XREF=remove_line+68
0000000000003ce1         add        rax, 0x1
0000000000003ce5         mov        qword [rdx+0x18], rax
0000000000003ce9         mov        rax, qword [rsi+0x10]
0000000000003ced         lea        rcx, qword [rax+1]
0000000000003cf1         mov        rax, rcx
0000000000003cf4         mov        qword [rsi+0x10], rcx
0000000000003cf8         shl        rax, 0x4
0000000000003cfc         cmp        qword [rsi], rcx
0000000000003cff         lea        rax, qword [rsi+rax+8]
0000000000003d04         je         loc_3d10

                     loc_3d06:
0000000000003d06         pop        rbx                                         ; CODE XREF=remove_line+148
0000000000003d07         ret
                        ; endp
0000000000003d08         align      16

                     loc_3d10:
0000000000003d10         mov        rcx, qword [rsi+0x518]                      ; CODE XREF=remove_line+116
0000000000003d17         test       rcx, rcx
0000000000003d1a         mov        qword [rdx+0x38], rcx
0000000000003d1e         je         loc_3d26

0000000000003d20         cmp        qword [rcx], 0x0
0000000000003d24         jne        loc_3d06

                     loc_3d26:
0000000000003d26         mov        qword [prev_buf.7217], rdx                  ; prev_buf.7217, CODE XREF=remove_line+142
0000000000003d2d         mov        rdx, qword [rdx+0x40]
0000000000003d31         pop        rbx
0000000000003d32         mov        qword [head], rdx                           ; head
0000000000003d39         ret
                        ; endp
0000000000003d3a         align      64

                     loc_3d40:
0000000000003d40         cmp        byte [have_read_eof], 0x0                   ; have_read_eof, CODE XREF=remove_line+55
0000000000003d47         jne        loc_3d60

0000000000003d49         call       load_buffer.part.5                          ; load_buffer.part.5
0000000000003d4e         test       al, al
0000000000003d50         je         loc_3d60

0000000000003d52         mov        rdx, qword [head]                           ; head
0000000000003d59         jmp        loc_3cc9
0000000000003d5e         align      32

                     loc_3d60:
0000000000003d60         xor        eax, eax                                    ; CODE XREF=remove_line+183, remove_line+192
0000000000003d62         pop        rbx
0000000000003d63         ret
                        ; endp
0000000000003d64         align      16                                          ; End of unwind block (FDE at 0x187a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dump_rest_of_file:
0000000000003d70         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x187d0), CODE XREF=regexp_error+195, main+1713, main+2890
0000000000003d74         jmp        loc_3d88
0000000000003d76         align      128

                     loc_3d80:
0000000000003d80         mov        rdi, rax                                    ; CODE XREF=dump_rest_of_file+32
0000000000003d83         call       save_line_to_file                           ; save_line_to_file

                     loc_3d88:
0000000000003d88         call       remove_line                                 ; remove_line, CODE XREF=dump_rest_of_file+4
0000000000003d8d         test       rax, rax
0000000000003d90         jne        loc_3d80

0000000000003d92         add        rsp, 0x8
0000000000003d96         ret
                        ; endp
0000000000003d97         align      32                                          ; End of unwind block (FDE at 0x187d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     find_line:
0000000000003da0         push       rbp                                         ; Begin of unwind block (FDE at 0x18810), CODE XREF=main+1688, main+1963, main+2038, main+2218
0000000000003da1         push       rbx
0000000000003da2         mov        rbp, rdi
0000000000003da5         sub        rsp, 0x8
0000000000003da9         mov        rbx, qword [head]                           ; head
0000000000003db0         test       rbx, rbx
0000000000003db3         je         loc_3e78

                     loc_3db9:
0000000000003db9         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=find_line+241
0000000000003dbd         cmp        rdx, rbp
0000000000003dc0         jbe        loc_3dd7

0000000000003dc2         jmp        loc_3e68
0000000000003dc7         align      16

                     loc_3dd0:
0000000000003dd0         mov        rdx, qword [rax+0x10]                       ; CODE XREF=find_line+74, find_line+101
0000000000003dd4         mov        rbx, rax

                     loc_3dd7:
0000000000003dd7         mov        rax, qword [rbx+0x20]                       ; CODE XREF=find_line+32
0000000000003ddb         add        rax, rdx
0000000000003dde         cmp        rax, rbp
0000000000003de1         ja         loc_3e30

0000000000003de3         mov        rax, qword [rbx+0x40]
0000000000003de7         test       rax, rax
0000000000003dea         jne        loc_3dd0

0000000000003dec         cmp        byte [have_read_eof], 0x0                   ; have_read_eof
0000000000003df3         jne        loc_3e68

0000000000003df5         call       load_buffer.part.5                          ; load_buffer.part.5
0000000000003dfa         test       al, al
0000000000003dfc         je         loc_3e68

0000000000003dfe         mov        rax, qword [rbx+0x40]
0000000000003e02         test       rax, rax
0000000000003e05         jne        loc_3dd0

0000000000003e07         lea        rcx, qword [__PRETTY_FUNCTION__.7224]       ; argument "__function" for method j___assert_fail, "find_line"
0000000000003e0e         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/csplit.c"
0000000000003e15         lea        rdi, qword [aSSMatchNotFoun+24]             ; argument "__assertion" for method j___assert_fail, 0x16005
0000000000003e1c         mov        edx, 0x26a                                  ; argument "__line" for method j___assert_fail
0000000000003e21         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000003e26         align      16

                     loc_3e30:
0000000000003e30         sub        rbp, rdx                                    ; CODE XREF=find_line+65
0000000000003e33         mov        rax, qword [rbx+0x30]
0000000000003e37         cmp        rbp, 0x4f
0000000000003e3b         jbe        loc_3e51

0000000000003e3d         nop        dword [rax]

                     loc_3e40:
0000000000003e40         sub        rbp, 0x50                                   ; CODE XREF=find_line+175
0000000000003e44         mov        rax, qword [rax+0x518]
0000000000003e4b         cmp        rbp, 0x4f
0000000000003e4f         ja         loc_3e40

                     loc_3e51:
0000000000003e51         shl        rbp, 0x4                                    ; CODE XREF=find_line+155
0000000000003e55         add        rsp, 0x8
0000000000003e59         lea        rax, qword [rax+rbp+0x18]
0000000000003e5e         pop        rbx
0000000000003e5f         pop        rbp
0000000000003e60         ret
                        ; endp
0000000000003e61         align      8

                     loc_3e68:
0000000000003e68         add        rsp, 0x8                                    ; CODE XREF=find_line+34, find_line+83, find_line+92, find_line+223, find_line+232
0000000000003e6c         xor        eax, eax
0000000000003e6e         pop        rbx
0000000000003e6f         pop        rbp
0000000000003e70         ret
                        ; endp
0000000000003e71         align      8

                     loc_3e78:
0000000000003e78         cmp        byte [have_read_eof], 0x0                   ; have_read_eof, CODE XREF=find_line+19
0000000000003e7f         jne        loc_3e68

0000000000003e81         call       load_buffer.part.5                          ; load_buffer.part.5
0000000000003e86         test       al, al
0000000000003e88         je         loc_3e68

0000000000003e8a         mov        rbx, qword [head]                           ; head
0000000000003e91         jmp        loc_3db9
0000000000003e96         align      32                                          ; End of unwind block (FDE at 0x18810)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_38: int64_t, -56
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176


                     get_first_line_in_buffer:
0000000000003ea0         mov        rax, qword [head]                           ; Begin of unwind block (FDE at 0x18848), head, CODE XREF=main+2052, main+2509
0000000000003ea7         test       rax, rax
0000000000003eaa         je         loc_3eb8

0000000000003eac         mov        rax, qword [rax+0x18]
0000000000003eb0         ret
                        ; endp
0000000000003eb1         align      8

                     loc_3eb8:
0000000000003eb8         cmp        byte [have_read_eof], 0x0                   ; have_read_eof, CODE XREF=get_first_line_in_buffer+10
0000000000003ebf         push       rbx
0000000000003ec0         jne        loc_3ed8

0000000000003ec2         call       load_buffer.part.5                          ; load_buffer.part.5
0000000000003ec7         test       al, al
0000000000003ec9         je         loc_3ed8

0000000000003ecb         mov        rax, qword [head]                           ; head
0000000000003ed2         pop        rbx
0000000000003ed3         mov        rax, qword [rax+0x18]
0000000000003ed7         ret
                        ; endp

                     loc_3ed8:
0000000000003ed8         lea        rsi, qword [aInputDisappear]                ; argument "msgid" for method j_dcgettext, "input disappeared", CODE XREF=get_first_line_in_buffer+32, get_first_line_in_buffer+41
0000000000003edf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003ee4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003ee6         call       j_dcgettext                                 ; dcgettext
0000000000003eeb         mov        rbx, rax
0000000000003eee         call       j___errno_location                          ; __errno_location
0000000000003ef3         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000003ef5         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000003ef8         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000003efd         xor        eax, eax
0000000000003eff         call       j_error                                     ; error
0000000000003f04         nop                                                    ; End of unwind block (FDE at 0x18848)
0000000000003f06         nop        word [cs:rax+rax]
                     usage:
0000000000003f10         push       r13                                         ; Begin of unwind block (FDE at 0x18864), CODE XREF=main+3380, main+3387
0000000000003f12         push       r12
0000000000003f14         mov        edx, 0x5
0000000000003f19         push       rbp
0000000000003f1a         push       rbx
0000000000003f1b         mov        ebp, edi
0000000000003f1d         sub        rsp, 0x88
0000000000003f24         mov        rbx, qword [program_name]                   ; program_name
0000000000003f2b         mov        rax, qword [fs:0x28]
0000000000003f34         mov        qword [rsp+0xb0+var_38], rax
0000000000003f39         xor        eax, eax
0000000000003f3b         test       edi, edi
0000000000003f3d         je         loc_3f6d

0000000000003f3f         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
0000000000003f46         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003f48         call       j_dcgettext                                 ; dcgettext
0000000000003f4d         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000003f54         mov        rdx, rax
0000000000003f57         mov        rcx, rbx
0000000000003f5a         mov        esi, 0x1
0000000000003f5f         xor        eax, eax
0000000000003f61         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_3f66:
0000000000003f66         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+854
0000000000003f68         call       j_exit                                      ; exit
                        ; endp

                     loc_3f6d:
0000000000003f6d         lea        rsi, qword [aUsageSOptionFi]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... FILE PATTERN...\\n", CODE XREF=usage+45
0000000000003f74         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003f76         call       j_dcgettext                                 ; dcgettext
0000000000003f7b         mov        rdx, rbx
0000000000003f7e         mov        rsi, rax
0000000000003f81         mov        edi, 0x1
0000000000003f86         xor        eax, eax
0000000000003f88         call       j___printf_chk                              ; __printf_chk
0000000000003f8d         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003f94         lea        rsi, qword [aOutputPiecesOf]                ; argument "msgid" for method j_dcgettext, "Output pieces of FILE separated by PATTERN(s) to files 'xx00', 'xx01', ...,\\nand output byte counts of each piece to standard output.\\n"
0000000000003f9b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003fa0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003fa2         call       j_dcgettext                                 ; dcgettext
0000000000003fa7         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003faa         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003fad         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003fb2         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003fb9         lea        rsi, qword [aNreadStandardI]                ; argument "msgid" for method j_dcgettext, "\\nRead standard input if FILE is -\\n"
0000000000003fc0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003fc5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003fc7         call       j_dcgettext                                 ; dcgettext
0000000000003fcc         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003fcf         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003fd2         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003fd7         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003fde         lea        rsi, qword [aNmandatoryArgu]                ; argument "msgid" for method j_dcgettext, "\\nMandatory arguments to long options are mandatory for short options too.\\n"
0000000000003fe5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003fea         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003fec         call       j_dcgettext                                 ; dcgettext
0000000000003ff1         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003ff4         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003ff7         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003ffc         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004003         lea        rsi, qword [aBSuffixformatf]                ; argument "msgid" for method j_dcgettext, "  -b, --suffix-format=FORMAT  use sprintf FORMAT instead of %02d\\n  -f, --prefix=PREFIX        use PREFIX instead of 'xx'\\n  -k, --keep-files           do not remove output files on errors\\n"
000000000000400a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000400f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004011         call       j_dcgettext                                 ; dcgettext
0000000000004016         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004019         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000401c         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004021         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004028         lea        rsi, qword [aSuppressmatche]                ; argument "msgid" for method j_dcgettext, "      --suppress-matched     suppress the lines matching PATTERN\\n"
000000000000402f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004034         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004036         call       j_dcgettext                                 ; dcgettext
000000000000403b         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000403e         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004041         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004046         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000404d         lea        rsi, qword [aNDigitsdigitsU]                ; argument "msgid" for method j_dcgettext, "  -n, --digits=DIGITS        use specified number of digits instead of 2\\n  -s, --quiet, --silent      do not print counts of output file sizes\\n  -z, --elide-empty-files    remove empty output files\\n"
0000000000004054         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004059         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000405b         call       j_dcgettext                                 ; dcgettext
0000000000004060         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004063         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004066         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000406b         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004072         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
0000000000004079         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000407e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004080         call       j_dcgettext                                 ; dcgettext
0000000000004085         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004088         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000408b         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004090         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004097         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
000000000000409e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000040a3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000040a5         call       j_dcgettext                                 ; dcgettext
00000000000040aa         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000040ad         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000040b0         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000040b5         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000040bc         lea        rsi, qword [aNeachPatternMa]                ; argument "msgid" for method j_dcgettext, "\\nEach PATTERN may be:\\n  INTEGER            copy up to but not including specified line number\\n  /REGEXP/[OFFSET]   copy up to but not including a matching line\\n  %REGEXP%[OFFSET]   skip to, but not including a matching line\\n  {INTEGER}          repeat the …"
00000000000040c3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000040c8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000040ca         call       j_dcgettext                                 ; dcgettext
00000000000040cf         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000040d2         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000040d5         lea        rbx, qword [aCsplit]                        ; "csplit"
00000000000040dc         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000040e1         lea        rax, qword [aCsplit+7]                      ; 0x16020
00000000000040e8         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
00000000000040ef         mov        qword [rsp+0xb0+var_50], 0x0
00000000000040f8         mov        qword [rsp+0xb0+var_48], 0x0
0000000000004101         mov        rdx, rsp
0000000000004104         mov        qword [rsp+0xb0+var_B0], rax
0000000000004108         lea        rax, qword [aTestInvocation]                ; "test invocation"
000000000000410f         mov        qword [rsp+0xb0+var_80], rcx
0000000000004114         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
000000000000411b         mov        qword [rsp+0xb0+var_A8], rax
0000000000004120         lea        rax, qword [aCoreutils]                     ; "coreutils"
0000000000004127         mov        qword [rsp+0xb0+var_70], rcx
000000000000412c         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
0000000000004133         mov        qword [rsp+0xb0+var_A0], rax
0000000000004138         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
000000000000413f         mov        qword [rsp+0xb0+var_60], rcx
0000000000004144         mov        qword [rsp+0xb0+var_98], rax
0000000000004149         lea        rax, qword [aSha224sum]                     ; "sha224sum"
0000000000004150         mov        qword [rsp+0xb0+var_90], rax
0000000000004155         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
000000000000415c         mov        qword [rsp+0xb0+var_88], rax
0000000000004161         mov        qword [rsp+0xb0+var_78], rax
0000000000004166         mov        qword [rsp+0xb0+var_68], rax
000000000000416b         mov        qword [rsp+0xb0+var_58], rax

                     loc_4170:
0000000000004170         add        rdx, 0x10                                   ; CODE XREF=usage+637
0000000000004174         mov        rdi, qword [rdx]
0000000000004177         test       rdi, rdi
000000000000417a         je         loc_418f

000000000000417c         mov        ecx, 0x7
0000000000004181         mov        rsi, rbx
0000000000004184         rep  cmpsb byte [rsi], byte [rdi]
0000000000004186         seta       al
0000000000004189         sbb        al, 0x0
000000000000418b         test       al, al
000000000000418d         jne        loc_4170

                     loc_418f:
000000000000418f         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+618
0000000000004193         xor        edi, edi
0000000000004195         mov        edx, 0x5
000000000000419a         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
00000000000041a1         test       r12, r12
00000000000041a4         je         loc_426b

00000000000041aa         call       j_dcgettext                                 ; dcgettext
00000000000041af         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000041b6         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x16096
00000000000041bd         mov        rsi, rax
00000000000041c0         mov        edi, 0x1
00000000000041c5         xor        eax, eax
00000000000041c7         call       j___printf_chk                              ; __printf_chk
00000000000041cc         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
00000000000041ce         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
00000000000041d3         call       j_setlocale                                 ; setlocale
00000000000041d8         test       rax, rax
00000000000041db         je         loc_41f9

00000000000041dd         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x160a4
00000000000041e4         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
00000000000041e9         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
00000000000041ec         call       j_strncmp                                   ; strncmp
00000000000041f1         test       eax, eax
00000000000041f3         jne        loc_4300

                     loc_41f9:
00000000000041f9         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+715, usage+1045
0000000000004200         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004202         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004207         call       j_dcgettext                                 ; dcgettext
000000000000420c         lea        rcx, qword [aCsplit]                        ; "csplit"
0000000000004213         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
000000000000421a         mov        rsi, rax
000000000000421d         mov        edi, 0x1
0000000000004222         xor        eax, eax
0000000000004224         call       j___printf_chk                              ; __printf_chk
0000000000004229         cmp        r12, rbx
000000000000422c         lea        rcx, qword [aMulticallInvoc+10]             ; 0x1603c
0000000000004233         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0x170e1
000000000000423a         cmove      rbx, rcx

                     loc_423e:
000000000000423e         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+996
0000000000004245         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004247         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000424c         call       j_dcgettext                                 ; dcgettext
0000000000004251         mov        rcx, rbx
0000000000004254         mov        rsi, rax
0000000000004257         mov        rdx, r12
000000000000425a         mov        edi, 0x1
000000000000425f         xor        eax, eax
0000000000004261         call       j___printf_chk                              ; __printf_chk
0000000000004266         jmp        loc_3f66

                     loc_426b:
000000000000426b         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+660
0000000000004270         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000004277         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x16096
000000000000427e         mov        rsi, rax
0000000000004281         mov        edi, 0x1
0000000000004286         xor        eax, eax
0000000000004288         call       j___printf_chk                              ; __printf_chk
000000000000428d         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000428f         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000004294         call       j_setlocale                                 ; setlocale
0000000000004299         test       rax, rax
000000000000429c         je         loc_42b6

000000000000429e         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x160a4
00000000000042a5         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
00000000000042aa         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
00000000000042ad         call       j_strncmp                                   ; strncmp
00000000000042b2         test       eax, eax
00000000000042b4         jne        loc_42f9

                     loc_42b6:
00000000000042b6         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+908
00000000000042bd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000042c2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000042c4         lea        r12, qword [aCsplit]                        ; "csplit"
00000000000042cb         lea        rbx, qword [aMulticallInvoc+10]             ; 0x1603c
00000000000042d2         call       j_dcgettext                                 ; dcgettext
00000000000042d7         lea        rcx, qword [aCsplit]                        ; "csplit"
00000000000042de         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000042e5         mov        rsi, rax
00000000000042e8         mov        edi, 0x1
00000000000042ed         xor        eax, eax
00000000000042ef         call       j___printf_chk                              ; __printf_chk
00000000000042f4         jmp        loc_423e

                     loc_42f9:
00000000000042f9         lea        r12, qword [aCsplit]                        ; "csplit", CODE XREF=usage+932

                     loc_4300:
0000000000004300         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+739
0000000000004307         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
000000000000430e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004310         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004315         call       j_dcgettext                                 ; dcgettext
000000000000431a         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
000000000000431d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004320         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004325         jmp        loc_41f9
000000000000432a         align      16                                          ; End of unwind block (FDE at 0x18864)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000004330         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0x188ec), file_name
0000000000004337         ret
                        ; endp
0000000000004338         align      64                                          ; End of unwind block (FDE at 0x188ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000004340         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0x18900), ignore_EPIPE
0000000000004347         ret
                        ; endp
0000000000004348         align      16                                          ; End of unwind block (FDE at 0x18900)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
0000000000004350         push       rbp                                         ; Begin of unwind block (FDE at 0x18914), DATA XREF=main+106
0000000000004351         push       rbx
0000000000004352         sub        rsp, 0x8
0000000000004356         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000435d         call       close_stream                                ; close_stream
0000000000004362         test       eax, eax
0000000000004364         je         loc_437c

0000000000004366         call       j___errno_location                          ; __errno_location
000000000000436b         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
0000000000004372         mov        rbx, rax
0000000000004375         je         loc_4393

0000000000004377         cmp        dword [rax], 0x20
000000000000437a         jne        loc_4393

                     loc_437c:
000000000000437c         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
0000000000004383         call       close_stream                                ; close_stream
0000000000004388         test       eax, eax
000000000000438a         jne        loc_43d2

000000000000438c         add        rsp, 0x8
0000000000004390         pop        rbx
0000000000004391         pop        rbp
0000000000004392         ret
                        ; endp

                     loc_4393:
0000000000004393         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
000000000000439a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000439c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000043a1         call       j_dcgettext                                 ; dcgettext
00000000000043a6         mov        rdi, qword [file_name]                      ; file_name
00000000000043ad         mov        rbp, rax
00000000000043b0         test       rdi, rdi
00000000000043b3         je         loc_43dd

00000000000043b5         call       quotearg_colon                              ; quotearg_colon
00000000000043ba         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
00000000000043bc         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
00000000000043c3         mov        rcx, rax
00000000000043c6         mov        r8, rbp
00000000000043c9         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000043cb         xor        eax, eax
00000000000043cd         call       j_error                                     ; error

                     loc_43d2:
00000000000043d2         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
00000000000043d8         call       j__exit                                     ; _exit
                        ; endp

                     loc_43dd:
00000000000043dd         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
00000000000043df         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x16b61
00000000000043e6         mov        rcx, rax
00000000000043e9         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000043eb         xor        eax, eax
00000000000043ed         call       j_error                                     ; error
00000000000043f2         jmp        loc_43d2
00000000000043f4         align      1024                                        ; End of unwind block (FDE at 0x18914)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fd_reopen:
0000000000004400         push       r13                                         ; Begin of unwind block (FDE at 0x18944), CODE XREF=main+2706
0000000000004402         push       r12
0000000000004404         xor        eax, eax
0000000000004406         push       rbp
0000000000004407         push       rbx
0000000000004408         mov        ebp, edi
000000000000440a         mov        rdi, rsi                                    ; argument "__file" for method j_open
000000000000440d         mov        esi, edx                                    ; argument "__oflag" for method j_open
000000000000440f         mov        edx, ecx
0000000000004411         sub        rsp, 0x8
0000000000004415         call       j_open                                      ; open
000000000000441a         cmp        ebp, eax
000000000000441c         mov        ebx, eax
000000000000441e         je         loc_4449

0000000000004420         test       eax, eax
0000000000004422         js         loc_4449

0000000000004424         mov        esi, ebp                                    ; argument "__fd2" for method j_dup2
0000000000004426         mov        edi, eax                                    ; argument "__fd" for method j_dup2
0000000000004428         call       j_dup2                                      ; dup2
000000000000442d         mov        r12d, eax
0000000000004430         call       j___errno_location                          ; __errno_location
0000000000004435         mov        r13d, dword [rax]
0000000000004438         mov        rbp, rax
000000000000443b         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000000443d         call       j_close                                     ; close
0000000000004442         mov        ebx, r12d
0000000000004445         mov        dword [rbp], r13d

                     loc_4449:
0000000000004449         add        rsp, 0x8                                    ; CODE XREF=fd_reopen+30, fd_reopen+34
000000000000444d         mov        eax, ebx
000000000000444f         pop        rbx
0000000000004450         pop        rbp
0000000000004451         pop        r12
0000000000004453         pop        r13
0000000000004455         ret
                        ; endp
0000000000004456         align      32                                          ; End of unwind block (FDE at 0x18944)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fopen_safer:
0000000000004460         push       r12                                         ; Begin of unwind block (FDE at 0x1897c), CODE XREF=create_output_file+142
0000000000004462         push       rbp
0000000000004463         mov        rbp, rsi
0000000000004466         push       rbx
0000000000004467         call       j_fopen                                     ; fopen
000000000000446c         test       rax, rax
000000000000446f         mov        rbx, rax
0000000000004472         je         loc_4481

0000000000004474         mov        rdi, rax                                    ; argument "__stream" for method j_fileno
0000000000004477         call       j_fileno                                    ; fileno
000000000000447c         cmp        eax, 0x2
000000000000447f         jbe        loc_4490

                     loc_4481:
0000000000004481         mov        rax, rbx                                    ; CODE XREF=fopen_safer+18, fopen_safer+91, fopen_safer+115, fopen_safer+145
0000000000004484         pop        rbx
0000000000004485         pop        rbp
0000000000004486         pop        r12
0000000000004488         ret
                        ; endp
0000000000004489         align      16

                     loc_4490:
0000000000004490         mov        edi, eax                                    ; CODE XREF=fopen_safer+31
0000000000004492         call       dup_safer                                   ; dup_safer
0000000000004497         test       eax, eax
0000000000004499         mov        r12d, eax
000000000000449c         js         loc_44d8

000000000000449e         mov        rdi, rbx
00000000000044a1         call       rpl_fclose                                  ; rpl_fclose
00000000000044a6         test       eax, eax
00000000000044a8         jne        loc_44bd

00000000000044aa         mov        rsi, rbp                                    ; argument "__modes" for method j_fdopen
00000000000044ad         mov        edi, r12d                                   ; argument "__fd" for method j_fdopen
00000000000044b0         call       j_fdopen                                    ; fdopen
00000000000044b5         test       rax, rax
00000000000044b8         mov        rbx, rax
00000000000044bb         jne        loc_4481

                     loc_44bd:
00000000000044bd         call       j___errno_location                          ; __errno_location, CODE XREF=fopen_safer+72
00000000000044c2         mov        ebp, dword [rax]
00000000000044c4         mov        rbx, rax
00000000000044c7         mov        edi, r12d                                   ; argument "__fd" for method j_close
00000000000044ca         call       j_close                                     ; close
00000000000044cf         mov        dword [rbx], ebp
00000000000044d1         xor        ebx, ebx
00000000000044d3         jmp        loc_4481
00000000000044d5         align      8

                     loc_44d8:
00000000000044d8         call       j___errno_location                          ; __errno_location, CODE XREF=fopen_safer+60
00000000000044dd         mov        r12d, dword [rax]
00000000000044e0         mov        rbp, rax
00000000000044e3         mov        rdi, rbx
00000000000044e6         call       rpl_fclose                                  ; rpl_fclose
00000000000044eb         xor        ebx, ebx
00000000000044ed         mov        dword [rbp], r12d
00000000000044f1         jmp        loc_4481
00000000000044f3         align      256                                         ; End of unwind block (FDE at 0x1897c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     umaxtostr:
0000000000004500         lea        rcx, qword [rsi+0x14]                       ; Begin of unwind block (FDE at 0x189ac), CODE XREF=regexp_error+119, main+3270, close_output_file+152, handle_line_error.isra.1+35, handle_line_error.isra.1+116
0000000000004504         mov        byte [rsi+0x14], 0x0
0000000000004508         movabs     rsi, 0xcccccccccccccccd
0000000000004512         nop        word [rax+rax]

                     loc_4518:
0000000000004518         mov        rax, rdi                                    ; CODE XREF=umaxtostr+60
000000000000451b         sub        rcx, 0x1
000000000000451f         mul        rsi
0000000000004522         shr        rdx, 0x3
0000000000004526         lea        rax, qword [rdx+rdx*4]
000000000000452a         add        rax, rax
000000000000452d         sub        rdi, rax
0000000000004530         add        edi, 0x30
0000000000004533         test       rdx, rdx
0000000000004536         mov        byte [rcx], dil
0000000000004539         mov        rdi, rdx
000000000000453c         jne        loc_4518

000000000000453e         mov        rax, rcx
0000000000004541         ret
                        ; endp
0000000000004542         align      16                                          ; End of unwind block (FDE at 0x189ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
0000000000004550         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x189c4), CODE XREF=main+53
0000000000004553         push       rbx
0000000000004554         je         loc_45cd

0000000000004556         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
000000000000455b         mov        rbx, rdi
000000000000455e         call       j_strrchr                                   ; strrchr
0000000000004563         test       rax, rax
0000000000004566         je         loc_45bd

0000000000004568         lea        r8, qword [rax+1]
000000000000456c         mov        rdx, r8
000000000000456f         sub        rdx, rbx
0000000000004572         cmp        rdx, 0x6
0000000000004576         jle        loc_45bd

0000000000004578         lea        rsi, qword [rax-6]
000000000000457c         lea        rdi, qword [aLibs]                          ; "/.libs/"
0000000000004583         mov        ecx, 0x7
0000000000004588         rep  cmpsb byte [rsi], byte [rdi]
000000000000458a         seta       dl
000000000000458d         sbb        dl, 0x0
0000000000004590         test       dl, dl
0000000000004592         jne        loc_45bd

0000000000004594         lea        rdi, qword [aLibs+8]                        ; 0x16ba8
000000000000459b         mov        ecx, 0x3
00000000000045a0         mov        rsi, r8
00000000000045a3         mov        rbx, r8
00000000000045a6         rep  cmpsb byte [rsi], byte [rdi]
00000000000045a8         seta       dl
00000000000045ab         sbb        dl, 0x0
00000000000045ae         test       dl, dl
00000000000045b0         jne        loc_45bd

00000000000045b2         lea        rbx, qword [rax+4]
00000000000045b6         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_45bd:
00000000000045bd         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
00000000000045c4         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
00000000000045cb         pop        rbx
00000000000045cc         ret
                        ; endp

                     loc_45cd:
00000000000045cd         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
00000000000045d4         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
00000000000045db         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
00000000000045e0         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
00000000000045e5         call       j_fwrite                                    ; fwrite
00000000000045ea         call       j_abort                                     ; abort
                        ; endp
00000000000045ef         align      16                                          ; End of unwind block (FDE at 0x189c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
00000000000045f0         push       rbp                                         ; Begin of unwind block (FDE at 0x189e4), CODE XREF=sub_4e20+2597, sub_4e20+2619
00000000000045f1         push       rbx
00000000000045f2         mov        rbp, rdi
00000000000045f5         mov        ebx, esi
00000000000045f7         sub        rsp, 0x8
00000000000045fb         call       locale_charset                              ; locale_charset
0000000000004600         movzx      edx, byte [rax]
0000000000004603         and        edx, 0xffffffdf
0000000000004606         cmp        dl, 0x55
0000000000004609         je         loc_4680

000000000000460b         cmp        dl, 0x47
000000000000460e         je         loc_4630

                     loc_4610:
0000000000004610         lea        rax, qword [aLibs+27]                       ; 0x16bbb, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
0000000000004617         lea        rdx, qword [aLibs+29]                       ; 0x16bbd
000000000000461e         cmp        ebx, 0x9
0000000000004621         cmovne     rax, rdx
0000000000004625         add        rsp, 0x8
0000000000004629         pop        rbx
000000000000462a         pop        rbp
000000000000462b         ret
                        ; endp
000000000000462c         align      16

                     loc_4630:
0000000000004630         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
0000000000004634         and        edx, 0xffffffdf
0000000000004637         cmp        dl, 0x42
000000000000463a         jne        loc_4610

000000000000463c         cmp        byte [rax+2], 0x31
0000000000004640         jne        loc_4610

0000000000004642         cmp        byte [rax+3], 0x38
0000000000004646         jne        loc_4610

0000000000004648         cmp        byte [rax+4], 0x30
000000000000464c         jne        loc_4610

000000000000464e         cmp        byte [rax+5], 0x33
0000000000004652         jne        loc_4610

0000000000004654         cmp        byte [rax+6], 0x30
0000000000004658         jne        loc_4610

000000000000465a         cmp        byte [rax+7], 0x0
000000000000465e         jne        loc_4610

0000000000004660         cmp        byte [rbp], 0x60
0000000000004664         lea        rax, qword [aLibs+20]                       ; 0x16bb4
000000000000466b         lea        rdx, qword [aLibs+24]                       ; 0x16bb8
0000000000004672         cmovne     rax, rdx
0000000000004676         add        rsp, 0x8
000000000000467a         pop        rbx
000000000000467b         pop        rbp
000000000000467c         ret
                        ; endp
000000000000467d         align      128

                     loc_4680:
0000000000004680         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
0000000000004684         and        edx, 0xffffffdf
0000000000004687         cmp        dl, 0x54
000000000000468a         jne        loc_4610

000000000000468c         movzx      edx, byte [rax+2]
0000000000004690         and        edx, 0xffffffdf
0000000000004693         cmp        dl, 0x46
0000000000004696         jne        loc_4610

000000000000469c         cmp        byte [rax+3], 0x2d
00000000000046a0         jne        loc_4610

00000000000046a6         cmp        byte [rax+4], 0x38
00000000000046aa         jne        loc_4610

00000000000046b0         cmp        byte [rax+5], 0x0
00000000000046b4         jne        loc_4610

00000000000046ba         cmp        byte [rbp], 0x60
00000000000046be         lea        rax, qword [aLibs+12]                       ; 0x16bac
00000000000046c5         lea        rdx, qword [aLibs+16]                       ; 0x16bb0
00000000000046cc         cmovne     rax, rdx
00000000000046d0         add        rsp, 0x8
00000000000046d4         pop        rbx
00000000000046d5         pop        rbp
00000000000046d6         ret
                        ; endp
00000000000046d7         align      32                                          ; End of unwind block (FDE at 0x189e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
00000000000046e0         push       r15                                         ; Begin of unwind block (FDE at 0x18a28), CODE XREF=sub_4e20+1165, sub_4e20+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
00000000000046e2         push       r14
00000000000046e4         mov        r15d, r8d
00000000000046e7         push       r13
00000000000046e9         push       r12
00000000000046eb         mov        r14, rdi
00000000000046ee         push       rbp
00000000000046ef         push       rbx
00000000000046f0         mov        ebx, r9d
00000000000046f3         mov        r13, rsi
00000000000046f6         mov        rbp, rcx
00000000000046f9         and        ebx, 0x2
00000000000046fc         sub        rsp, 0xb8
0000000000004703         mov        rax, qword [rsp+0xe8+arg_0]
000000000000470b         mov        qword [rsp+0xe8+var_D8], rdx
0000000000004710         mov        dword [rsp+0xe8+var_E0], r8d
0000000000004715         mov        dword [rsp+0xe8+var_70], r9d
000000000000471a         mov        qword [rsp+0xe8+var_C8], rax
000000000000471f         mov        rax, qword [rsp+0xe8+arg_8]
0000000000004727         mov        qword [rsp+0xe8+var_80], rax
000000000000472c         mov        rax, qword [rsp+0xe8+arg_10]
0000000000004734         mov        qword [rsp+0xe8+var_88], rax
0000000000004739         mov        rax, qword [fs:0x28]
0000000000004742         mov        qword [rsp+0xe8+var_40], rax
000000000000474a         xor        eax, eax
000000000000474c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000004751         cmp        r15d, 0xa
0000000000004755         mov        qword [rsp+0xe8+var_90], rax
000000000000475a         ja         loc_590f

0000000000004760         lea        rcx, qword [switch_table_16c20]             ; switch_table_16c20
0000000000004767         mov        edx, r15d
000000000000476a         movsxd     rax, dword [rcx+rdx*4]
000000000000476e         add        rax, rcx
0000000000004771         jmp        rax                                         ; switch statement using table at 0x16c20, with 11 cases, 0x4773,0x5344,0x53a0,0x53f5,0x543a,0x5474,0x551a,0x5554,0x5748

                     loc_4773:
0000000000004773         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_4e20+1318
0000000000004778         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000477d         xor        r12d, r12d
0000000000004780         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004789         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000478e         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_4793:
0000000000004793         lea        rax, qword [aLibs+29]                       ; 0x16bbd, CODE XREF=sub_4e20+1876
000000000000479a         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000047a3         xor        r15d, r15d
00000000000047a6         mov        dword [rsp+0xe8+var_E0], 0x2
00000000000047ae         mov        qword [rsp+0xe8+var_A0], rax

                     loc_47b3:
00000000000047b3         xor        r11d, r11d                                  ; CODE XREF=sub_4e20+180, sub_4e20+1400, sub_4e20+1488, sub_4e20+1557, sub_4e20+1615, sub_4e20+1781, sub_4e20+1839, sub_4e20+2408, sub_4e20+2485
00000000000047b6         mov        rax, rbp
00000000000047b9         mov        r8d, r12d
00000000000047bc         mov        rbp, r11
00000000000047bf         mov        r11, rax
00000000000047c2         nop        word [rax+rax]

                     loc_47c8:
00000000000047c8         cmp        r11, rbp                                    ; CODE XREF=sub_48d0+194
00000000000047cb         setne      r12b
00000000000047cf         cmp        r11, 0xffffffffffffffff
00000000000047d3         jne        loc_47e2

00000000000047d5         mov        rax, qword [rsp+0xe8+var_D8]
00000000000047da         cmp        byte [rax+rbp], 0x0
00000000000047de         setne      r12b

                     loc_47e2:
00000000000047e2         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
00000000000047e5         je         loc_4e40

00000000000047eb         cmp        dword [rsp+0xe8+var_E0], 0x2
00000000000047f0         mov        rdi, qword [rsp+0xe8+var_D8]
00000000000047f5         lea        r9, qword [rdi+rbp]
00000000000047f9         setne      al
00000000000047fc         and        al, byte [rsp+0xe8+var_DB]
0000000000004800         mov        r10d, eax
0000000000004803         je         loc_48b0

0000000000004809         mov        rax, qword [rsp+0xe8+var_D0]
000000000000480e         test       rax, rax
0000000000004811         je         loc_4c40

0000000000004817         cmp        r11, 0xffffffffffffffff
000000000000481b         lea        rbx, qword [rbp+rax]
0000000000004820         jne        loc_4850

0000000000004822         cmp        rax, 0x1
0000000000004826         jbe        loc_4850

0000000000004828         mov        byte [rsp+0xe8+var_B0], r8b
000000000000482d         mov        byte [rsp+0xe8+var_B8], r10b
0000000000004832         mov        qword [rsp+0xe8+var_C0], r9
0000000000004837         call       j_strlen                                    ; strlen
000000000000483c         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000004842         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000004848         mov        r11, rax
000000000000484b         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_4850:
0000000000004850         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000004853         mov        byte [rsp+0xe8+var_C0], r10b
0000000000004858         ja         loc_4e10

000000000000485e         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000004863         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000004868         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
000000000000486b         mov        qword [rsp+0xe8+var_A8], r11
0000000000004870         mov        byte [rsp+0xe8+var_B0], r8b
0000000000004875         mov        qword [rsp+0xe8+var_B8], r9
000000000000487a         call       j_memcmp                                    ; memcmp
000000000000487f         test       eax, eax
0000000000004881         mov        r9, qword [rsp+0xe8+var_B8]
0000000000004886         movzx      r8d, byte [rsp+0xe8+var_B0]
000000000000488c         mov        r11, qword [rsp+0xe8+var_A8]
0000000000004891         jne        loc_4e10

0000000000004897         cmp        byte [rsp+0xe8+var_D9], 0x0
000000000000489c         movzx      r10d, byte [rsp+0xe8+var_C0]
00000000000048a2         jne        loc_5825

00000000000048a8         nop        dword [rax+rax]

                     loc_48b0:
00000000000048b0         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_4e00+19
00000000000048b4         cmp        bl, 0x7e
00000000000048b7         ja         loc_4bd8

00000000000048bd         lea        rcx, qword [switch_table_16c20+44]          ; 0x16c4c
00000000000048c4         movzx      edx, bl
00000000000048c7         movsxd     rax, dword [rcx+rdx*4]
00000000000048cb         add        rax, rcx
00000000000048ce         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_48d0:
00000000000048d0         xor        r10d, r10d
00000000000048d3         cmp        r11, 0x1
00000000000048d7         setne      al
00000000000048da         cmp        r11, 0xffffffffffffffff
00000000000048de         jne        loc_48ec

00000000000048e0         mov        rax, qword [rsp+arg_8]
00000000000048e5         cmp        byte [rax+1], 0x0
00000000000048e9         setne      al

                     loc_48ec:
00000000000048ec         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_48d0+14
00000000000048f1         sete       dl
00000000000048f4         test       al, al
00000000000048f6         je         loc_4b48

                     loc_48fc:
00000000000048fc         xor        r12d, r12d                                  ; CODE XREF=sub_4b40+11
00000000000048ff         xor        eax, eax
0000000000004901         nop        dword [rax]
                        ; endp

                     loc_4908:
0000000000004908         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_4af0+50, sub_4bc0+119
000000000000490d         jne        loc_4a22

0000000000004913         test       dl, dl
0000000000004915         jne        loc_4a22

                     loc_491b:
000000000000491b         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_49d0+87
0000000000004920         test       rsi, rsi
0000000000004923         je         loc_4939

0000000000004925         mov        edx, ebx
0000000000004927         shr        dl, 0x5
000000000000492a         movzx      edx, dl
000000000000492d         mov        edx, dword [rsi+rdx*4]
0000000000004930         bt         edx, ebx
0000000000004933         jb         loc_4a83

                     loc_4939:
0000000000004939         test       r10b, r10b                                  ; CODE XREF=sub_48d0+83, sub_49d0+93
000000000000493c         jne        loc_4a83

0000000000004942         xor        eax, 0x1
0000000000004945         add        rbp, 0x1
0000000000004949         and        eax, r8d

                     loc_494c:
000000000000494c         test       al, al                                      ; CODE XREF=sub_4e20+936
000000000000494e         je         loc_4970

0000000000004950         cmp        r13, r15
0000000000004953         jbe        loc_495a

0000000000004955         mov        byte [r14+r15], 0x27

                     loc_495a:
000000000000495a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_48d0+131
000000000000495e         cmp        r13, rax
0000000000004961         jbe        loc_4969

0000000000004963         mov        byte [r14+r15+1], 0x27

                     loc_4969:
0000000000004969         add        r15, 0x2                                    ; CODE XREF=sub_48d0+145
000000000000496d         xor        r8d, r8d

                     loc_4970:
0000000000004970         cmp        r15, r13                                    ; CODE XREF=sub_48d0+126, sub_49d0+275, sub_4e20+869
0000000000004973         jae        loc_4979

0000000000004975         mov        byte [r14+r15], bl

                     loc_4979:
0000000000004979         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_48d0+163
000000000000497e         add        r15, 0x1
0000000000004982         mov        eax, 0x0
0000000000004987         test       r12b, r12b
000000000000498a         cmove      edi, eax
000000000000498d         mov        byte [rsp+0xe8+var_DA], dil
0000000000004992         jmp        loc_47c8
0000000000004997         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_49a0:
00000000000049a0         xor        r10d, r10d
00000000000049a3         mov        eax, dword [rsp+arg_0]
00000000000049a7         cmp        eax, 0x2
00000000000049aa         je         loc_4f68

00000000000049b0         cmp        eax, 0x5
00000000000049b3         je         loc_4f28

00000000000049b9         cmp        eax, 0x2
00000000000049bc         mov        ebx, 0x3f
00000000000049c1         sete       dl
00000000000049c4         xor        r12d, r12d
00000000000049c7         xor        eax, eax
00000000000049c9         jmp        sub_48d0+56
                        ; endp
00000000000049ce         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_49d0:
00000000000049d0         xor        r10d, r10d
00000000000049d3         cmp        dword [rsp+arg_0], 0x2
00000000000049d8         je         loc_4ee0

00000000000049de         mov        byte [rsp+arg_74], r12b
00000000000049e3         xor        edx, edx
00000000000049e5         xor        eax, eax
00000000000049e7         mov        ebx, 0x27
00000000000049ec         jmp        sub_48d0+56
                        ; endp
00000000000049f1         nop        dword [rax]
00000000000049f8         mov        edx, 0x9
00000000000049fd         mov        ebx, 0x74

                     loc_4a02:
0000000000004a02         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_4b90+10, sub_4c80+37, sub_4dc0+53
0000000000004a07         sete       al
0000000000004a0a         and        al, byte [rsp+arg_7]
0000000000004a0e         jne        sub_4b40+30

0000000000004a14         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_49d0+114
0000000000004a19         jne        loc_4a80

                     loc_4a1b:
0000000000004a1b         mov        ebx, edx                                    ; CODE XREF=sub_4af0+18
0000000000004a1d         xor        r12d, r12d
0000000000004a20         xor        eax, eax
                        ; endp

                     loc_4a22:
0000000000004a22         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_48d0+61, sub_48d0+69
0000000000004a27         jne        loc_491b

0000000000004a2d         jmp        loc_4939
0000000000004a32         nop        word [rax+rax]
0000000000004a38         mov        edx, 0x8
0000000000004a3d         mov        ebx, 0x62
0000000000004a42         jmp        sub_49d0+68
0000000000004a44         nop        dword [rax]
0000000000004a48         cmp        dword [rsp+8], 0x2
0000000000004a4d         je         sub_4e20                                    ; sub_4e20
0000000000004a53         cmp        byte [rsp+0xd], 0x0
0000000000004a58         je         sub_4c60+16

                     loc_4a5e:
0000000000004a5e         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_4c60+8
0000000000004a63         je         loc_4c70

0000000000004a69         cmp        qword [rsp+arg_10], 0x0
0000000000004a6f         jne        loc_4e2b

0000000000004a75         mov        ebx, 0x5c
0000000000004a7a         nop        word [rax+rax]
                        ; endp

                     loc_4a80:
0000000000004a80         xor        r12d, r12d                                  ; CODE XREF=sub_49d0+73, sub_4dc0+29
                        ; endp

                     loc_4a83:
0000000000004a83         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_48d0+99, sub_48d0+108
0000000000004a88         sete       dl
0000000000004a8b         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000004a90         mov        eax, edx
0000000000004a92         jne        loc_52e8

0000000000004a98         mov        eax, r8d
0000000000004a9b         xor        eax, 0x1
0000000000004a9e         and        al, dl
0000000000004aa0         je         loc_4ad1

0000000000004aa2         cmp        r13, r15
0000000000004aa5         jbe        loc_4aac

0000000000004aa7         mov        byte [r14+r15], 0x27

                     loc_4aac:
0000000000004aac         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_49d0+213
0000000000004ab0         cmp        r13, rdx
0000000000004ab3         jbe        loc_4abb

0000000000004ab5         mov        byte [r14+r15+1], 0x24

                     loc_4abb:
0000000000004abb         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_49d0+227
0000000000004abf         cmp        r13, rdx
0000000000004ac2         jbe        loc_4aca

0000000000004ac4         mov        byte [r14+r15+2], 0x27

                     loc_4aca:
0000000000004aca         add        r15, 0x3                                    ; CODE XREF=sub_49d0+242
0000000000004ace         mov        r8d, eax

                     loc_4ad1:
0000000000004ad1         cmp        r13, r15                                    ; CODE XREF=sub_49d0+208
0000000000004ad4         jbe        loc_4adb

0000000000004ad6         mov        byte [r14+r15], 0x5c

                     loc_4adb:
0000000000004adb         add        r15, 0x1                                    ; CODE XREF=sub_49d0+260
0000000000004adf         add        rbp, 0x1
0000000000004ae3         jmp        loc_4970
0000000000004ae8         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_4af0:
0000000000004af0         cmp        byte [rsp+arg_5], 0x0
0000000000004af5         jne        loc_4cc3

0000000000004afb         xor        edx, edx
0000000000004afd         test       byte [rsp+arg_70], 0x1
0000000000004b02         je         loc_4a1b

0000000000004b08         add        rbp, 0x1
0000000000004b0c         jmp        quotearg_buffer_restyled+232
                        ; endp
0000000000004b11         nop        dword [rax]
0000000000004b18         cmp        dword [rsp+8], 0x2
0000000000004b1d         sete       dl
0000000000004b20         xor        eax, eax
0000000000004b22         jmp        sub_48d0+56
0000000000004b27         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4b30:
0000000000004b30         mov        edx, 0x7
0000000000004b35         mov        ebx, 0x61
0000000000004b3a         jmp        sub_49d0+68
                        ; endp
0000000000004b3f         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4b40:
0000000000004b40         cmp        dword [rsp+8], 0x2
0000000000004b45         sete       dl
                        ; endp

                     loc_4b48:
0000000000004b48         test       rbp, rbp                                    ; CODE XREF=sub_48d0+38, sub_4d60+35
0000000000004b4b         jne        loc_48fc

0000000000004b51         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_4d90+43
0000000000004b56         and        al, dl
0000000000004b58         je         sub_48d0+56

0000000000004b5e         mov        rbp, r11
0000000000004b61         mov        dword [rsp+arg_0], 0x2
0000000000004b69         jmp        sub_4e20+1097
                        ; endp
0000000000004b6e         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_4b70:
0000000000004b70         cmp        dword [rsp+arg_0], 0x2
0000000000004b75         sete       dl
0000000000004b78         xor        r12d, r12d
0000000000004b7b         jmp        sub_4b40+17
                        ; endp
0000000000004b7d         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_4b80:
0000000000004b80         cmp        dword [rsp+arg_0], 0x2
0000000000004b85         mov        ebx, 0x20
0000000000004b8a         sete       dl
0000000000004b8d         jmp        sub_4b40+17
                        ; endp
0000000000004b8f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_4b90:
0000000000004b90         mov        edx, 0xd
0000000000004b95         mov        ebx, 0x72
0000000000004b9a         jmp        loc_4a02
0000000000004b9f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4ba0:
0000000000004ba0         mov        edx, 0xc
0000000000004ba5         mov        ebx, 0x66
0000000000004baa         jmp        sub_49d0+68
                        ; endp
0000000000004baf         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4bb0:
0000000000004bb0         mov        edx, 0xb
0000000000004bb5         mov        ebx, 0x76
0000000000004bba         jmp        sub_49d0+68
                        ; endp
0000000000004bbf         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4bc0:
0000000000004bc0         mov        edx, 0xa
0000000000004bc5         mov        ebx, 0x6e
0000000000004bca         jmp        sub_49d0+50
                        ; endp
0000000000004bcf         align      16

                     loc_4bd0:
0000000000004bd0         xor        r10d, r10d                                  ; CODE XREF=sub_4bc0+135
0000000000004bd3         nop        dword [rax+rax]

                     loc_4bd8:
0000000000004bd8         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
0000000000004bde         jne        loc_4f88

0000000000004be4         mov        qword [rsp+0xe8+var_B0], r11
0000000000004be9         mov        byte [rsp+0xe8+var_B8], r8b
0000000000004bee         mov        byte [rsp+0xe8+var_C0], r10b
0000000000004bf3         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000004bf8         mov        rcx, qword [rax]
0000000000004bfb         movzx      edx, bl
0000000000004bfe         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000004c04         movzx      r8d, byte [rsp+0xe8+var_B8]
0000000000004c0a         mov        r11, qword [rsp+0xe8+var_B0]
0000000000004c0f         mov        edi, 0x1
0000000000004c14         movzx      eax, word [rcx+rdx*2]
0000000000004c18         and        ax, 0x4000
0000000000004c1c         setne      r12b
0000000000004c20         sete       al
0000000000004c23         and        al, byte [rsp+0xe8+var_DB]

                     loc_4c27:
0000000000004c27         test       al, al                                      ; CODE XREF=sub_4e20+2221
0000000000004c29         jne        loc_55c1

0000000000004c2f         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000004c34         sete       dl
0000000000004c37         jmp        loc_4908
0000000000004c3c         align      64

                     loc_4c40:
0000000000004c40         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000004c44         cmp        bl, 0x7e
0000000000004c47         ja         loc_4bd0

0000000000004c49         lea        rcx, qword [switch_table_16c20+552]         ; 0x16e48
0000000000004c50         movzx      edx, bl
0000000000004c53         movsxd     rax, dword [rcx+rdx*4]
0000000000004c57         add        rax, rcx
0000000000004c5a         jmp        rax
                        ; endp
0000000000004c5c         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_4c60:
0000000000004c60         xor        r10d, r10d
0000000000004c63         cmp        byte [rsp+arg_5], 0x0
0000000000004c68         jne        loc_4a5e

0000000000004c6e         nop

                     loc_4c70:
0000000000004c70         mov        edx, 0x5c                                   ; CODE XREF=sub_49d0+136, sub_49d0+147
0000000000004c75         mov        ebx, 0x5c
0000000000004c7a         jmp        sub_49d0+68
                        ; endp
0000000000004c7f         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4c80:
0000000000004c80         mov        edx, 0xc
0000000000004c85         xor        r10d, r10d
0000000000004c88         mov        ebx, 0x66
0000000000004c8d         jmp        sub_49d0+68
                        ; endp
0000000000004c92         nop        word [rax+rax]
0000000000004c98         mov        edx, 0xa
0000000000004c9d         xor        r10d, r10d
0000000000004ca0         mov        ebx, 0x6e
0000000000004ca5         jmp        sub_49d0+50
0000000000004caa         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4cb0:
0000000000004cb0         mov        ebx, 0x61
0000000000004cb5         jmp        sub_49d0+176
                        ; endp
0000000000004cba         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4cc0:
0000000000004cc0         xor        r10d, r10d
                        ; endp

                     loc_4cc3:
0000000000004cc3         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_4af0+5
0000000000004cc8         sete       dl
0000000000004ccb         cmp        byte [rsp+arg_7], 0x0
0000000000004cd0         jne        loc_586a

0000000000004cd6         mov        eax, r8d
0000000000004cd9         mov        rcx, r15
0000000000004cdc         xor        eax, 0x1
0000000000004cdf         and        al, dl
0000000000004ce1         je         loc_4d10

0000000000004ce3         cmp        r13, r15
0000000000004ce6         jbe        loc_4ced

0000000000004ce8         mov        byte [r14+r15], 0x27

                     loc_4ced:
0000000000004ced         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_4cc0+38
0000000000004cf1         cmp        r13, rcx
0000000000004cf4         jbe        loc_4cfc

0000000000004cf6         mov        byte [r14+r15+1], 0x24

                     loc_4cfc:
0000000000004cfc         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_4cc0+52
0000000000004d00         cmp        r13, rcx
0000000000004d03         ja         loc_5339

                     loc_4d09:
0000000000004d09         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_4e20+1311
0000000000004d0d         mov        r8d, eax

                     loc_4d10:
0000000000004d10         cmp        r13, rcx                                    ; CODE XREF=sub_4cc0+33
0000000000004d13         jbe        loc_4d1a

0000000000004d15         mov        byte [r14+rcx], 0x5c

                     loc_4d1a:
0000000000004d1a         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_4cc0+83
0000000000004d1f         lea        r15, qword [rcx+1]
0000000000004d23         je         loc_5329

0000000000004d29         lea        rax, qword [rbp+1]
0000000000004d2d         cmp        rax, r11
0000000000004d30         jae        loc_4d4b

0000000000004d32         mov        rax, qword [rsp+arg_8]
0000000000004d37         movzx      eax, byte [rax+rbp+1]
0000000000004d3c         mov        byte [rsp+arg_20], al
0000000000004d40         sub        eax, 0x30
0000000000004d43         cmp        al, 0x9
0000000000004d45         jbe        loc_5579

                     loc_4d4b:
0000000000004d4b         mov        eax, r12d                                   ; CODE XREF=sub_4cc0+112
0000000000004d4e         mov        ebx, 0x30
0000000000004d53         xor        r12d, r12d
0000000000004d56         jmp        sub_48d0+56
                        ; endp
0000000000004d5b         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_4d60:
0000000000004d60         cmp        dword [rsp+arg_0], 0x2
0000000000004d65         mov        r12d, r10d
0000000000004d68         sete       dl
0000000000004d6b         xor        r10d, r10d
0000000000004d6e         xor        eax, eax
0000000000004d70         jmp        sub_48d0+56
                        ; endp
0000000000004d75         nop        dword [rax]
0000000000004d78         cmp        dword [rsp+8], 0x2
0000000000004d7d         sete       dl
0000000000004d80         xor        r10d, r10d
0000000000004d83         jmp        sub_4b40+8
0000000000004d88         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4d90:
0000000000004d90         cmp        dword [rsp+8], 0x2
0000000000004d95         sete       dl
0000000000004d98         xor        r10d, r10d
0000000000004d9b         xor        r12d, r12d
0000000000004d9e         jmp        sub_4b40+17
                        ; endp
0000000000004da3         nop        dword [rax+rax]
0000000000004da8         cmp        dword [rsp+8], 0x2
0000000000004dad         mov        r12d, r10d
0000000000004db0         mov        ebx, 0x20
0000000000004db5         sete       dl
0000000000004db8         xor        r10d, r10d
0000000000004dbb         jmp        sub_4b40+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4dc0:
0000000000004dc0         mov        edx, 0xd
0000000000004dc5         xor        r10d, r10d
0000000000004dc8         mov        ebx, 0x72
0000000000004dcd         jmp        sub_49d0+50
                        ; endp
0000000000004dd2         nop        word [rax+rax]
0000000000004dd8         mov        ebx, 0x76
0000000000004ddd         jmp        sub_49d0+176
0000000000004de2         nop        word [rax+rax]
0000000000004de8         mov        edx, 0x9
0000000000004ded         xor        r10d, r10d
0000000000004df0         mov        ebx, 0x74
0000000000004df5         jmp        sub_49d0+50
0000000000004dfa         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4e00:
0000000000004e00         mov        ebx, 0x62
0000000000004e05         jmp        sub_49d0+176
                        ; endp
0000000000004e0a         nop        word [rax+rax]

                     loc_4e10:
0000000000004e10         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
0000000000004e13         jmp        loc_48b0
0000000000004e18         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_4e20:
0000000000004e20         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_49d0+125
0000000000004e25         jne        sub_4e20+2416
                        ; endp

                     loc_4e2b:
0000000000004e2b         add        rbp, 0x1                                    ; CODE XREF=sub_49d0+159
0000000000004e2f         mov        eax, r8d
0000000000004e32         xor        r12d, r12d
0000000000004e35         mov        ebx, 0x5c
0000000000004e3a         jmp        sub_48d0+124
                        ; endp
0000000000004e3f         align      64

                     loc_4e40:
0000000000004e40         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
0000000000004e45         movzx      ebx, byte [rsp+0xe8+var_D9]
0000000000004e4a         mov        r12d, r8d
0000000000004e4d         mov        rbp, r11
0000000000004e50         sete       dl
0000000000004e53         mov        eax, ebx
0000000000004e55         test       r15, r15
0000000000004e58         sete       cl
0000000000004e5b         and        eax, edx
0000000000004e5d         and        al, cl
0000000000004e5f         jne        loc_58c6

0000000000004e65         mov        eax, ebx
0000000000004e67         xor        eax, 0x1
0000000000004e6a         and        dl, al
0000000000004e6c         je         loc_57dc

0000000000004e72         cmp        byte [rsp+0xe8+var_6C], 0x0
0000000000004e77         je         loc_57da

0000000000004e7d         cmp        byte [rsp+0xe8+var_DA], 0x0
0000000000004e82         jne        loc_587d

0000000000004e88         test       r13, r13
0000000000004e8b         sete       al
0000000000004e8e         cmp        qword [rsp+0xe8+var_98], 0x0
0000000000004e94         setne      dl
0000000000004e97         and        al, dl
0000000000004e99         je         loc_58bc

0000000000004e9f         mov        r13, qword [rsp+0xe8+var_98]

                     loc_4ea4:
0000000000004ea4         lea        rbx, qword [aLibs+29]                       ; 0x16bbd, CODE XREF=sub_4e20+2781
0000000000004eab         mov        byte [r14], 0x27
0000000000004eaf         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000004eb7         mov        r15d, 0x1
0000000000004ebd         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004ec6         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004ecb         mov        qword [rsp+0xe8+var_A0], rbx
0000000000004ed0         mov        byte [rsp+0xe8+var_6C], al
0000000000004ed4         jmp        loc_47b3
0000000000004ed9         align      32

                     loc_4ee0:
0000000000004ee0         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_49d0+8
0000000000004ee5         jne        sub_4e20+2416

0000000000004eeb         test       r13, r13
0000000000004eee         je         loc_52f0

0000000000004ef4         xor        edx, edx
0000000000004ef6         cmp        qword [rsp+arg_48], 0x0
0000000000004efc         jne        loc_52f0

                     loc_4f02:
0000000000004f02         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_4e20+1284, sub_4e20+2794
0000000000004f07         add        r15, 0x3
0000000000004f0b         xor        eax, eax
0000000000004f0d         mov        byte [rsp+arg_74], r12b
0000000000004f12         xor        r8d, r8d
0000000000004f15         mov        r13, rdx
0000000000004f18         mov        ebx, 0x27
0000000000004f1d         jmp        sub_48d0+105
                        ; endp
0000000000004f22         align      8

                     loc_4f28:
0000000000004f28         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_49a0+19
0000000000004f2d         je         loc_4f50

0000000000004f2f         lea        rcx, qword [rbp+2]
0000000000004f33         cmp        rcx, r11
0000000000004f36         jae        loc_4f50

0000000000004f38         mov        rax, qword [rsp+arg_8]
0000000000004f3d         cmp        byte [rax+rbp+1], 0x3f
0000000000004f42         je         loc_56d2

0000000000004f48         nop        dword [rax+rax]

                     loc_4f50:
0000000000004f50         xor        edx, edx                                    ; CODE XREF=sub_4e20+269, sub_4e20+278, sub_4e20+2233, sub_4e20+2253
0000000000004f52         xor        r12d, r12d
0000000000004f55         xor        eax, eax
0000000000004f57         mov        ebx, 0x3f
0000000000004f5c         jmp        sub_48d0+56
                        ; endp
0000000000004f61         align      8

                     loc_4f68:
0000000000004f68         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_49a0+10
0000000000004f6d         jne        loc_5790

0000000000004f73         xor        r12d, r12d
0000000000004f76         xor        eax, eax
0000000000004f78         mov        ebx, 0x3f
0000000000004f7d         jmp        sub_48d0+105
                        ; endp
0000000000004f82         align      8

                     loc_4f88:
0000000000004f88         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_4bc0+30
0000000000004f90         cmp        r11, 0xffffffffffffffff
0000000000004f94         mov        qword [rsp+0xe8+var_48], 0x0
0000000000004fa0         mov        qword [rsp+0xe8+var_C0], rax
0000000000004fa5         jne        loc_4fd4

0000000000004fa7         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
0000000000004fac         mov        byte [rsp+0xe8+var_A8], r8b
0000000000004fb1         mov        byte [rsp+0xe8+var_B0], r10b
0000000000004fb6         mov        qword [rsp+0xe8+var_B8], r9
0000000000004fbb         call       j_strlen                                    ; strlen
0000000000004fc0         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000004fc6         movzx      r10d, byte [rsp+0xe8+var_B0]
0000000000004fcc         mov        r11, rax
0000000000004fcf         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_4fd4:
0000000000004fd4         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_4e20+389
0000000000004fdc         xor        ecx, ecx
0000000000004fde         mov        byte [rsp+0xe8+var_6A], bl
0000000000004fe2         mov        byte [rsp+0xe8+var_6B], r8b
0000000000004fe7         mov        rbx, rcx
0000000000004fea         mov        qword [rsp+0xe8+var_60], r9
0000000000004ff2         mov        qword [rsp+0xe8+var_B0], rax
0000000000004ff7         mov        byte [rsp+0xe8+var_69], r10b
0000000000004ffc         mov        qword [rsp+0xe8+var_68], r15
0000000000005004         mov        qword [rsp+0xe8+var_A8], r14
0000000000005009         mov        qword [rsp+0xe8+var_78], r13
000000000000500e         mov        qword [rsp+0xe8+var_B8], r11

                     loc_5013:
0000000000005013         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_4e20+623
0000000000005018         lea        r14, qword [rbp+rbx]
000000000000501d         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000005022         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000005027         mov        rdi, qword [rsp+0xe8+var_B0]
000000000000502c         lea        r13, qword [rax+r14]
0000000000005030         sub        rdx, r14
0000000000005033         mov        rsi, r13
0000000000005036         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000503b         test       rax, rax
000000000000503e         mov        r15, rax
0000000000005041         je         loc_5091

0000000000005043         cmp        rax, 0xffffffffffffffff
0000000000005047         je         loc_5665

000000000000504d         cmp        rax, 0xfffffffffffffffe
0000000000005051         je         loc_55f1

0000000000005057         cmp        dword [rsp+0xe8+var_E0], 0x2
000000000000505c         sete       al
000000000000505f         and        al, byte [rsp+0xe8+var_D9]
0000000000005063         jne        loc_5200

                     loc_5069:
0000000000005069         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_4e20+996, sub_4e20+1031
0000000000005070         call       j_iswprint                                  ; iswprint
0000000000005075         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
000000000000507a         test       eax, eax
000000000000507c         mov        eax, 0x0
0000000000005081         cmove      r12d, eax
0000000000005085         add        rbx, r15
0000000000005088         call       j_mbsinit                                   ; mbsinit
000000000000508d         test       eax, eax
000000000000508f         je         loc_5013

                     loc_5091:
0000000000005091         mov        edx, r12d                                   ; CODE XREF=sub_4e20+545
0000000000005094         mov        rdi, rbx
0000000000005097         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000509d         xor        edx, 0x1
00000000000050a0         movzx      ebx, byte [rsp+0xe8+var_6A]
00000000000050a5         movzx      r10d, byte [rsp+0xe8+var_69]
00000000000050ab         and        dl, byte [rsp+0xe8+var_DB]
00000000000050af         mov        r15, qword [rsp+0xe8+var_68]
00000000000050b7         mov        r14, qword [rsp+0xe8+var_A8]
00000000000050bc         mov        r13, qword [rsp+0xe8+var_78]
00000000000050c1         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_50c6:
00000000000050c6         cmp        rdi, 0x1                                    ; CODE XREF=sub_4e20+2112, sub_4e20+2168
00000000000050ca         jbe        loc_56cb

                     loc_50d0:
00000000000050d0         mov        rcx, rdi                                    ; CODE XREF=sub_4e20+1961
00000000000050d3         xor        esi, esi
00000000000050d5         movzx      r9d, byte [rsp+0xe8+var_D9]
00000000000050db         add        rcx, rbp
00000000000050de         mov        rdi, qword [rsp+0xe8+var_D8]
00000000000050e3         jmp        loc_519e
00000000000050e8         align      16

                     loc_50f0:
00000000000050f0         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_4e20+896
00000000000050f5         sete       al
00000000000050f8         test       r9b, r9b
00000000000050fb         jne        loc_55b0

0000000000005101         mov        esi, r8d
0000000000005104         xor        esi, 0x1
0000000000005107         and        al, sil
000000000000510a         je         loc_513b

000000000000510c         cmp        r13, r15
000000000000510f         jbe        loc_5116

0000000000005111         mov        byte [r14+r15], 0x27

                     loc_5116:
0000000000005116         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_4e20+751
000000000000511a         cmp        r13, rsi
000000000000511d         jbe        loc_5125

000000000000511f         mov        byte [r14+r15+1], 0x24

                     loc_5125:
0000000000005125         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_4e20+765
0000000000005129         cmp        r13, rsi
000000000000512c         jbe        loc_5134

000000000000512e         mov        byte [r14+r15+2], 0x27

                     loc_5134:
0000000000005134         add        r15, 0x3                                    ; CODE XREF=sub_4e20+780
0000000000005138         mov        r8d, eax

                     loc_513b:
000000000000513b         cmp        r13, r15                                    ; CODE XREF=sub_4e20+746
000000000000513e         jbe        loc_5145

0000000000005140         mov        byte [r14+r15], 0x5c

                     loc_5145:
0000000000005145         lea        rax, qword [r15+1]                          ; CODE XREF=sub_4e20+798
0000000000005149         cmp        r13, rax
000000000000514c         jbe        loc_515b

000000000000514e         mov        eax, ebx
0000000000005150         shr        al, 0x6
0000000000005153         add        eax, 0x30
0000000000005156         mov        byte [r14+r15+1], al

                     loc_515b:
000000000000515b         lea        rax, qword [r15+2]                          ; CODE XREF=sub_4e20+812
000000000000515f         cmp        r13, rax
0000000000005162         jbe        loc_5174

0000000000005164         mov        eax, ebx
0000000000005166         shr        al, 0x3
0000000000005169         and        eax, 0x7
000000000000516c         add        eax, 0x30
000000000000516f         mov        byte [r14+r15+2], al

                     loc_5174:
0000000000005174         and        ebx, 0x7                                    ; CODE XREF=sub_4e20+834
0000000000005177         add        rbp, 0x1
000000000000517b         add        r15, 0x3
000000000000517f         add        ebx, 0x30
0000000000005182         cmp        rbp, rcx
0000000000005185         jae        loc_4970

000000000000518b         mov        esi, edx

                     loc_518d:
000000000000518d         cmp        r13, r15                                    ; CODE XREF=sub_4e20+985, sub_4e20+1969
0000000000005190         jbe        loc_5196

0000000000005192         mov        byte [r14+r15], bl

                     loc_5196:
0000000000005196         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_4e20+880
000000000000519a         add        r15, 0x1

                     loc_519e:
000000000000519e         test       dl, dl                                      ; CODE XREF=sub_4e20+707
00000000000051a0         jne        loc_50f0

00000000000051a6         mov        eax, esi
00000000000051a8         xor        eax, 0x1
00000000000051ab         and        eax, r8d
00000000000051ae         test       r10b, r10b
00000000000051b1         je         loc_51c1

00000000000051b3         cmp        r13, r15
00000000000051b6         jbe        loc_51bd

00000000000051b8         mov        byte [r14+r15], 0x5c

                     loc_51bd:
00000000000051bd         add        r15, 0x1                                    ; CODE XREF=sub_4e20+918

                     loc_51c1:
00000000000051c1         add        rbp, 0x1                                    ; CODE XREF=sub_4e20+913
00000000000051c5         cmp        rbp, rcx
00000000000051c8         jae        loc_494c

00000000000051ce         test       al, al
00000000000051d0         je         loc_55ce

00000000000051d6         cmp        r13, r15
00000000000051d9         jbe        loc_51e0

00000000000051db         mov        byte [r14+r15], 0x27

                     loc_51e0:
00000000000051e0         lea        rax, qword [r15+1]                          ; CODE XREF=sub_4e20+953
00000000000051e4         cmp        r13, rax
00000000000051e7         jbe        loc_51ef

00000000000051e9         mov        byte [r14+r15+1], 0x27

                     loc_51ef:
00000000000051ef         add        r15, 0x2                                    ; CODE XREF=sub_4e20+967
00000000000051f3         xor        r10d, r10d
00000000000051f6         xor        r8d, r8d
00000000000051f9         jmp        loc_518d
00000000000051fb         align      512

                     loc_5200:
0000000000005200         cmp        r15, 0x1                                    ; CODE XREF=sub_4e20+579
0000000000005204         je         loc_5069

000000000000520a         mov        rdi, qword [rsp+0xe8+var_D8]
000000000000520f         lea        rcx, qword [rdi+r15]
0000000000005213         lea        rdx, qword [rdi+r14+1]
0000000000005218         lea        r8, qword [rcx+r14]
000000000000521c         jmp        loc_522d
000000000000521e         align      32

                     loc_5220:
0000000000005220         add        rdx, 0x1                                    ; CODE XREF=sub_4e20+1046, sub_4e20+1072
0000000000005224         cmp        r8, rdx
0000000000005227         je         loc_5069

                     loc_522d:
000000000000522d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_4e20+1020
0000000000005230         sub        ecx, 0x5b
0000000000005233         cmp        cl, 0x21
0000000000005236         ja         loc_5220

0000000000005238         mov        esi, 0x1
000000000000523d         shl        rsi, cl
0000000000005240         mov        rcx, rsi
0000000000005243         movabs     rsi, 0x20000002b
000000000000524d         test       rcx, rsi
0000000000005250         je         loc_5220

0000000000005252         mov        r14, qword [rsp+0xe8+var_A8]
0000000000005257         mov        r13, qword [rsp+0xe8+var_78]
000000000000525c         mov        rbp, qword [rsp+0xe8+var_B8]
0000000000005261         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_5269:
0000000000005269         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_4e20+1227, sub_4e20+1948, sub_4e20+2585, sub_4e20+2734
000000000000526e         je         loc_5280

0000000000005270         test       al, al
0000000000005272         mov        eax, 0x4
0000000000005277         cmove      eax, dword [rsp+0xe8+var_E0]
000000000000527c         mov        dword [rsp+0xe8+var_E0], eax

                     loc_5280:
0000000000005280         sub        rsp, 0x8                                    ; CODE XREF=sub_4e20+1102
0000000000005284         mov        rcx, rbp
0000000000005287         mov        rsi, r13
000000000000528a         push       qword [rsp+0xf0+var_88]
000000000000528e         push       qword [rsp+0xf8+var_80]
0000000000005292         mov        rdi, r14
0000000000005295         push       0x0
0000000000005297         mov        r9d, dword [rsp+0x108+var_70]
000000000000529f         mov        r8d, dword [rsp+0x108+var_E0]
00000000000052a4         mov        rdx, qword [rsp+0x108+var_D8]
00000000000052a9         and        r9d, 0xfffffffd
00000000000052ad         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000052b2         add        rsp, 0x20
00000000000052b6         mov        r15, rax

                     loc_52b9:
00000000000052b9         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_4e20+2549, sub_4e20+2560, sub_4e20+2711
00000000000052c1         xor        rbx, qword [fs:0x28]
00000000000052ca         mov        rax, r15
00000000000052cd         jne        loc_58d3

00000000000052d3         add        rsp, 0xb8
00000000000052da         pop        rbx
00000000000052db         pop        rbp
00000000000052dc         pop        r12
00000000000052de         pop        r13
00000000000052e0         pop        r14
00000000000052e2         pop        r15
00000000000052e4         ret
                        ; endp
00000000000052e5         align      8

                     loc_52e8:
00000000000052e8         mov        rbp, r11                                    ; CODE XREF=sub_49d0+194
00000000000052eb         jmp        loc_5269

                     loc_52f0:
00000000000052f0         cmp        r13, r15                                    ; CODE XREF=sub_4e20+206, sub_4e20+220
00000000000052f3         jbe        loc_52fa

00000000000052f5         mov        byte [r14+r15], 0x27

                     loc_52fa:
00000000000052fa         lea        rax, qword [r15+1]                          ; CODE XREF=sub_4e20+1235
00000000000052fe         cmp        r13, rax
0000000000005301         jbe        loc_5309

0000000000005303         mov        byte [r14+r15+1], 0x5c

                     loc_5309:
0000000000005309         lea        rax, qword [r15+2]                          ; CODE XREF=sub_4e20+1249
000000000000530d         cmp        r13, rax
0000000000005310         jbe        loc_5902

0000000000005316         mov        rdx, r13
0000000000005319         mov        byte [r14+r15+2], 0x27
000000000000531f         mov        r13, qword [rsp+arg_48]
0000000000005324         jmp        loc_4f02

                     loc_5329:
0000000000005329         mov        eax, r12d                                   ; CODE XREF=sub_4cc0+99
000000000000532c         mov        ebx, 0x30
0000000000005331         xor        r12d, r12d
0000000000005334         jmp        sub_48d0+105
                        ; endp

                     loc_5339:
0000000000005339         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_4cc0+67
000000000000533f         jmp        loc_4d09

                     loc_5344:
0000000000005344         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
0000000000005346         jne        loc_4773

000000000000534c         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_5351:
0000000000005351         test       r13, r13                                    ; CODE XREF=sub_4e20+2749
0000000000005354         jne        loc_58ea

000000000000535a         lea        rax, qword [aLibs+29]                       ; 0x16bbd
0000000000005361         mov        qword [rsp+0xe8+var_98], 0x0
000000000000536a         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000536f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000005374         xor        r12d, r12d
0000000000005377         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000537c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000005385         mov        qword [rsp+0xe8+var_A0], rax
000000000000538a         mov        r15d, 0x1
0000000000005390         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000005398         jmp        loc_47b3
000000000000539d         align      32

                     loc_53a0:
00000000000053a0         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
00000000000053a2         jne        loc_579d

00000000000053a8         test       r13, r13
00000000000053ab         je         loc_55d6

00000000000053b1         mov        byte [r14], 0x22
00000000000053b5         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000053ba         xor        r12d, r12d
00000000000053bd         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000053c2         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_53cb:
00000000000053cb         lea        rax, qword [aLibs+27]                       ; 0x16bbb, CODE XREF=sub_4e20+1996
00000000000053d2         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000053d7         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000053dc         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000053e5         mov        r15d, 0x1
00000000000053eb         mov        qword [rsp+0xe8+var_A0], rax
00000000000053f0         jmp        loc_47b3

                     loc_53f5:
00000000000053f5         lea        rax, qword [aLibs+27]                       ; case 6, 0x16bbb, CODE XREF=quotearg_buffer_restyled+145
00000000000053fc         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000005401         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000005406         xor        r12d, r12d
0000000000005409         mov        qword [rsp+0xe8+var_98], 0x0
0000000000005412         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000005417         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000541c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000005425         xor        r15d, r15d
0000000000005428         mov        qword [rsp+0xe8+var_A0], rax
000000000000542d         mov        dword [rsp+0xe8+var_E0], 0x5
0000000000005435         jmp        loc_47b3

                     loc_543a:
000000000000543a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
000000000000543f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000005444         xor        r12d, r12d
0000000000005447         mov        qword [rsp+0xe8+var_98], 0x0
0000000000005450         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000005455         xor        r15d, r15d
0000000000005458         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000545d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000005466         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000546f         jmp        loc_47b3

                     loc_5474:
0000000000005474         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
0000000000005479         je         loc_54d1

000000000000547b         lea        rsi, qword [aLibs+31]                       ; argument "msgid" for method j_dcgettext, 0x16bbf
0000000000005482         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005484         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005489         call       j_dcgettext                                 ; dcgettext
000000000000548e         mov        rcx, rax
0000000000005491         mov        qword [rsp+0xe8+var_80], rax
0000000000005496         lea        rax, qword [aLibs+31]                       ; 0x16bbf
000000000000549d         cmp        rcx, rax
00000000000054a0         je         loc_583e

                     loc_54a6:
00000000000054a6         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0x16bbd, CODE XREF=sub_4e20+2607
00000000000054ad         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000054af         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000054b4         call       j_dcgettext                                 ; dcgettext
00000000000054b9         mov        rcx, rax
00000000000054bc         mov        qword [rsp+0xe8+var_88], rax
00000000000054c1         lea        rax, qword [aLibs+29]                       ; 0x16bbd
00000000000054c8         cmp        rcx, rax
00000000000054cb         je         loc_5854

                     loc_54d1:
00000000000054d1         xor        r15d, r15d                                  ; CODE XREF=sub_4e20+1625, sub_4e20+2629
00000000000054d4         test       ebx, ebx
00000000000054d6         je         loc_569d

                     loc_54dc:
00000000000054dc         test       ebx, ebx                                    ; CODE XREF=sub_4e20+2183, sub_4e20+2214
00000000000054de         mov        rbx, qword [rsp+0xe8+var_88]
00000000000054e3         setne      byte [rsp+0xe8+var_D9]
00000000000054e8         xor        r12d, r12d
00000000000054eb         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
00000000000054ee         call       j_strlen                                    ; strlen
00000000000054f3         mov        qword [rsp+0xe8+var_A0], rbx
00000000000054f8         mov        qword [rsp+0xe8+var_D0], rax
00000000000054fd         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000005502         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000005507         mov        qword [rsp+0xe8+var_98], 0x0
0000000000005510         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000005515         jmp        loc_47b3

                     loc_551a:
000000000000551a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
000000000000551f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000005524         xor        r12d, r12d
0000000000005527         mov        qword [rsp+0xe8+var_98], 0x0
0000000000005530         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000005535         xor        r15d, r15d
0000000000005538         mov        byte [rsp+0xe8+var_DB], 0x0
000000000000553d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000005546         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000554f         jmp        loc_47b3

                     loc_5554:
0000000000005554         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
0000000000005559         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000555e         xor        r12d, r12d
0000000000005561         mov        qword [rsp+0xe8+var_98], 0x0
000000000000556a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000556f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000005574         jmp        loc_4793

                     loc_5579:
0000000000005579         cmp        r13, r15                                    ; CODE XREF=sub_4cc0+133
000000000000557c         jbe        loc_5583

000000000000557e         mov        byte [r14+r15], 0x30

                     loc_5583:
0000000000005583         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_4e20+1884
0000000000005587         cmp        r13, rax
000000000000558a         jbe        loc_5592

000000000000558c         mov        byte [r14+rcx+2], 0x30

                     loc_5592:
0000000000005592         mov        eax, r12d                                   ; CODE XREF=sub_4e20+1898
0000000000005595         lea        r15, qword [rcx+3]
0000000000005599         xor        r12d, r12d
000000000000559c         mov        ebx, 0x30
00000000000055a1         jmp        sub_48d0+56
                        ; endp
00000000000055a6         align      16

                     loc_55b0:
00000000000055b0         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_4e20+731
00000000000055b5         mov        rbp, r11
00000000000055b8         mov        byte [rsp+0xe8+var_DB], bl
00000000000055bc         jmp        loc_5269

                     loc_55c1:
00000000000055c1         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_4bc0+105
00000000000055c6         xor        r12d, r12d
00000000000055c9         jmp        loc_50d0

                     loc_55ce:
00000000000055ce         xor        r10d, r10d                                  ; CODE XREF=sub_4e20+944
00000000000055d1         jmp        loc_518d

                     loc_55d6:
00000000000055d6         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_4e20+1419
00000000000055df         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000055e4         xor        r12d, r12d
00000000000055e7         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000055ec         jmp        loc_53cb

                     loc_55f1:
00000000000055f1         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_4e20+561
00000000000055f6         mov        rsi, r14
00000000000055f9         mov        rcx, r13
00000000000055fc         mov        rax, rbx
00000000000055ff         mov        rdi, rbx
0000000000005602         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000005608         movzx      ebx, byte [rsp+0xe8+var_6A]
000000000000560d         mov        r9, qword [rsp+0xe8+var_60]
0000000000005615         cmp        rsi, r11
0000000000005618         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000561e         mov        r15, qword [rsp+0xe8+var_68]
0000000000005626         mov        r14, qword [rsp+0xe8+var_A8]
000000000000562b         mov        r13, qword [rsp+0xe8+var_78]
0000000000005630         jae        loc_5658

0000000000005632         cmp        byte [rcx], 0x0
0000000000005635         jne        loc_5647

0000000000005637         jmp        loc_5658
0000000000005639         align      64

                     loc_5640:
0000000000005640         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_4e20+2099
0000000000005645         je         loc_5655

                     loc_5647:
0000000000005647         add        rax, 0x1                                    ; CODE XREF=sub_4e20+2069
000000000000564b         lea        rdx, qword [rbp+rax]
0000000000005650         cmp        r11, rdx
0000000000005653         ja         loc_5640

                     loc_5655:
0000000000005655         mov        rdi, rax                                    ; CODE XREF=sub_4e20+2085

                     loc_5658:
0000000000005658         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_4e20+2064, sub_4e20+2071
000000000000565d         xor        r12d, r12d
0000000000005660         jmp        loc_50c6

                     loc_5665:
0000000000005665         mov        rdi, rbx                                    ; CODE XREF=sub_4e20+551
0000000000005668         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000566e         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000005673         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000005679         mov        r15, qword [rsp+0xe8+var_68]
0000000000005681         xor        r12d, r12d
0000000000005684         mov        r14, qword [rsp+0xe8+var_A8]
0000000000005689         mov        r13, qword [rsp+0xe8+var_78]
000000000000568e         mov        r11, qword [rsp+0xe8+var_B8]
0000000000005693         movzx      edx, byte [rsp+0xe8+var_DB]
0000000000005698         jmp        loc_50c6

                     loc_569d:
000000000000569d         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_4e20+1718
00000000000056a2         movzx      eax, byte [rdx]
00000000000056a5         test       al, al
00000000000056a7         je         loc_54dc

00000000000056ad         nop        dword [rax]

                     loc_56b0:
00000000000056b0         cmp        r13, r15                                    ; CODE XREF=sub_4e20+2212
00000000000056b3         jbe        loc_56b9

00000000000056b5         mov        byte [r14+r15], al

                     loc_56b9:
00000000000056b9         add        r15, 0x1                                    ; CODE XREF=sub_4e20+2195
00000000000056bd         movzx      eax, byte [rdx+r15]
00000000000056c2         test       al, al
00000000000056c4         jne        loc_56b0

00000000000056c6         jmp        loc_54dc

                     loc_56cb:
00000000000056cb         mov        eax, edx                                    ; CODE XREF=sub_4e20+682
00000000000056cd         jmp        loc_4c27

                     loc_56d2:
00000000000056d2         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_4e20+290
00000000000056d6         cmp        bl, 0x3e
00000000000056d9         ja         loc_4f50

00000000000056df         movabs     rax, 0x7000a38200000000
00000000000056e9         bt         rax, rbx
00000000000056ed         jae        loc_4f50

00000000000056f3         cmp        byte [rsp+arg_7], 0x0
00000000000056f8         jne        loc_58e2

00000000000056fe         cmp        r13, r15
0000000000005701         jbe        loc_5708

0000000000005703         mov        byte [r14+r15], 0x3f

                     loc_5708:
0000000000005708         lea        rax, qword [r15+1]                          ; CODE XREF=sub_4e20+2273
000000000000570c         cmp        r13, rax
000000000000570f         jbe        loc_5717

0000000000005711         mov        byte [r14+r15+1], 0x22

                     loc_5717:
0000000000005717         lea        rax, qword [r15+2]                          ; CODE XREF=sub_4e20+2287
000000000000571b         cmp        r13, rax
000000000000571e         jbe        loc_5726

0000000000005720         mov        byte [r14+r15+2], 0x22

                     loc_5726:
0000000000005726         lea        rax, qword [r15+3]                          ; CODE XREF=sub_4e20+2302
000000000000572a         cmp        r13, rax
000000000000572d         jbe        loc_5735

000000000000572f         mov        byte [r14+r15+3], 0x3f

                     loc_5735:
0000000000005735         add        r15, 0x4                                    ; CODE XREF=sub_4e20+2317
0000000000005739         xor        edx, edx
000000000000573b         xor        r12d, r12d
000000000000573e         xor        eax, eax
0000000000005740         mov        rbp, rcx
0000000000005743         jmp        sub_48d0+56
                        ; endp

                     loc_5748:
0000000000005748         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
000000000000574a         je         loc_58d8

0000000000005750         lea        rax, qword [aLibs+29]                       ; 0x16bbd
0000000000005757         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000575c         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000005761         xor        r12d, r12d
0000000000005764         mov        qword [rsp+0xe8+var_98], 0x0
000000000000576d         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000005772         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000005777         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000005780         xor        r15d, r15d
0000000000005783         mov        qword [rsp+0xe8+var_A0], rax
0000000000005788         jmp        loc_47b3
000000000000578d         align      16

                     loc_5790:
0000000000005790         mov        rbp, r11                                    ; CODE XREF=sub_4e20+333
0000000000005793         movzx      eax, byte [rsp+arg_7]
0000000000005798         jmp        sub_4e20+1097
                        ; endp

                     loc_579d:
000000000000579d         lea        rax, qword [aLibs+27]                       ; 0x16bbb, CODE XREF=sub_4e20+1410
00000000000057a4         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000057a9         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000057ae         xor        r12d, r12d
00000000000057b1         mov        qword [rsp+0xe8+var_98], 0x0
00000000000057ba         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000057bf         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000057c4         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000057cd         xor        r15d, r15d
00000000000057d0         mov        qword [rsp+0xe8+var_A0], rax
00000000000057d5         jmp        loc_47b3

                     loc_57da:
00000000000057da         mov        eax, edx                                    ; CODE XREF=sub_4e20+87

                     loc_57dc:
00000000000057dc         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_4e20+76, sub_4e20+2721
00000000000057e1         test       rbx, rbx
00000000000057e4         je         loc_5812

00000000000057e6         test       al, al
00000000000057e8         je         loc_5812

00000000000057ea         movzx      ecx, byte [rbx]
00000000000057ed         mov        rax, rbx
00000000000057f0         test       cl, cl
00000000000057f2         je         loc_5812

00000000000057f4         mov        rdx, r15
00000000000057f7         sub        rax, r15

                     loc_57fa:
00000000000057fa         cmp        r13, rdx                                    ; CODE XREF=sub_4e20+2541
00000000000057fd         jbe        loc_5803

00000000000057ff         mov        byte [r14+rdx], cl

                     loc_5803:
0000000000005803         add        rdx, 0x1                                    ; CODE XREF=sub_4e20+2525
0000000000005807         movzx      ecx, byte [rax+rdx]
000000000000580b         test       cl, cl
000000000000580d         jne        loc_57fa

000000000000580f         mov        r15, rdx

                     loc_5812:
0000000000005812         cmp        r13, r15                                    ; CODE XREF=sub_4e20+2500, sub_4e20+2504, sub_4e20+2514
0000000000005815         jbe        loc_52b9

000000000000581b         mov        byte [r14+r15], 0x0
0000000000005820         jmp        loc_52b9

                     loc_5825:
0000000000005825         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
000000000000582a         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000582f         mov        rbp, r11
0000000000005832         sete       al
0000000000005835         mov        byte [rsp+0xe8+var_DB], bl
0000000000005839         jmp        loc_5269

                     loc_583e:
000000000000583e         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_4e20+1664
0000000000005842         mov        rdi, rcx
0000000000005845         call       gettext_quote.part.1                        ; gettext_quote.part.1
000000000000584a         mov        qword [rsp+0xe8+var_80], rax
000000000000584f         jmp        loc_54a6

                     loc_5854:
0000000000005854         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_4e20+1707
0000000000005858         mov        rdi, rcx
000000000000585b         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000005860         mov        qword [rsp+0xe8+var_88], rax
0000000000005865         jmp        loc_54d1

                     loc_586a:
000000000000586a         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_4cc0+16
000000000000586f         mov        rbp, r11
0000000000005872         mov        eax, edx
0000000000005874         mov        byte [rsp+arg_5], bl
0000000000005878         jmp        sub_4e20+1097
                        ; endp

                     loc_587d:
000000000000587d         sub        rsp, 0x8                                    ; CODE XREF=sub_4e20+98
0000000000005881         mov        r8d, 0x5
0000000000005887         mov        rcx, r11
000000000000588a         push       qword [rsp+0xf0+var_88]
000000000000588e         push       qword [rsp+0xf8+var_80]
0000000000005892         mov        rdi, r14
0000000000005895         push       qword [rsp+0x100+var_C8]
0000000000005899         mov        r9d, dword [rsp+0x108+var_70]
00000000000058a1         mov        rdx, qword [rsp+0x108+var_D8]
00000000000058a6         mov        rsi, qword [rsp+0x108+var_98]
00000000000058ab         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000058b0         add        rsp, 0x20
00000000000058b4         mov        r15, rax
00000000000058b7         jmp        loc_52b9

                     loc_58bc:
00000000000058bc         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_4e20+121
00000000000058c1         jmp        loc_57dc

                     loc_58c6:
00000000000058c6         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_4e20+63
00000000000058ce         jmp        loc_5269

                     loc_58d3:
00000000000058d3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_4e20+1197
                        ; endp

                     loc_58d8:
00000000000058d8         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_4e20+2346
00000000000058dd         jmp        loc_5351

                     loc_58e2:
00000000000058e2         mov        rbp, r11                                    ; CODE XREF=sub_4e20+2264
00000000000058e5         jmp        sub_4e20+1120
                        ; endp

                     loc_58ea:
00000000000058ea         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_4e20+1332
00000000000058ef         xor        eax, eax
00000000000058f1         xor        r12d, r12d
00000000000058f4         mov        qword [rsp+0xe8+var_98], 0x0
00000000000058fd         jmp        loc_4ea4

                     loc_5902:
0000000000005902         mov        rdx, r13                                    ; CODE XREF=sub_4e20+1264
0000000000005905         mov        r13, qword [rsp+arg_48]
000000000000590a         jmp        loc_4f02

                     loc_590f:
000000000000590f         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
0000000000005914         align      32                                          ; End of unwind block (FDE at 0x18a28)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000005920         push       r15                                         ; Begin of unwind block (FDE at 0x18aa0), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000005922         push       r14
0000000000005924         movsxd     r15, edi
0000000000005927         push       r13
0000000000005929         push       r12
000000000000592b         mov        r14, rdx
000000000000592e         push       rbp
000000000000592f         push       rbx
0000000000005930         mov        rbp, rcx
0000000000005933         sub        rsp, 0x28
0000000000005937         mov        qword [rsp+0x58+var_50], rsi
000000000000593c         call       j___errno_location                          ; __errno_location
0000000000005941         mov        r13, rax
0000000000005944         mov        eax, dword [rax]
0000000000005946         test       r15d, r15d
0000000000005949         mov        rbx, qword [slotvec]                        ; slotvec
0000000000005950         mov        dword [rsp+0x58+var_40], eax
0000000000005954         js         loc_5ac1

000000000000595a         cmp        dword [nslots], r15d                        ; nslots
0000000000005961         jg         loc_59c5

0000000000005963         cmp        r15d, 0x7fffffff
000000000000596a         je         loc_5ac6

0000000000005970         lea        r12d, dword [r15+1]
0000000000005974         lea        rax, qword [slotvec0]                       ; slotvec0
000000000000597b         movsxd     rsi, r12d
000000000000597e         shl        rsi, 0x4
0000000000005982         cmp        rbx, rax
0000000000005985         je         loc_5aa0

000000000000598b         mov        rdi, rbx
000000000000598e         call       xrealloc                                    ; xrealloc
0000000000005993         mov        rbx, rax
0000000000005996         mov        qword [slotvec], rax                        ; slotvec

                     loc_599d:
000000000000599d         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
00000000000059a4         mov        edx, r12d
00000000000059a7         xor        esi, esi                                    ; argument "__c" for method j_memset
00000000000059a9         sub        edx, edi
00000000000059ab         shl        rdi, 0x4
00000000000059af         movsxd     rdx, edx
00000000000059b2         add        rdi, rbx                                    ; argument "__s" for method j_memset
00000000000059b5         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
00000000000059b9         call       j_memset                                    ; memset
00000000000059be         mov        dword [nslots], r12d                        ; nslots

                     loc_59c5:
00000000000059c5         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
00000000000059c8         shl        r15, 0x4
00000000000059cc         sub        rsp, 0x8
00000000000059d0         add        rbx, r15
00000000000059d3         lea        r15, qword [rbp+8]
00000000000059d7         mov        r8d, dword [rbp]
00000000000059db         mov        r11, qword [rbx]
00000000000059de         mov        r12, qword [rbx+8]
00000000000059e2         mov        rcx, r14
00000000000059e5         or         eax, 0x1
00000000000059e8         mov        dword [rsp+0x60+var_3C], eax
00000000000059ec         push       qword [rbp+0x30]
00000000000059ef         mov        r9d, eax
00000000000059f2         push       qword [rbp+0x28]
00000000000059f5         push       r15
00000000000059f7         mov        rsi, r11
00000000000059fa         mov        rdx, qword [rsp+0x78+var_50]
00000000000059ff         mov        rdi, r12
0000000000005a02         mov        qword [rsp+0x78+var_48], r11
0000000000005a07         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000005a0c         add        rsp, 0x20
0000000000005a10         mov        r11, qword [rsp+0x58+var_48]
0000000000005a15         cmp        r11, rax
0000000000005a18         ja         loc_5a81

0000000000005a1a         lea        rsi, qword [rax+1]
0000000000005a1e         lea        rax, qword [slot0]                          ; slot0
0000000000005a25         cmp        r12, rax
0000000000005a28         mov        qword [rbx], rsi
0000000000005a2b         je         loc_5a3f

0000000000005a2d         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000005a30         mov        qword [rsp+0x58+var_48], rsi
0000000000005a35         call       j_free                                      ; free
0000000000005a3a         mov        rsi, qword [rsp+0x58+var_48]

                     loc_5a3f:
0000000000005a3f         mov        rdi, rsi                                    ; CODE XREF=quotearg_n_options+267
0000000000005a42         mov        qword [rsp+0x58+var_48], rsi
0000000000005a47         call       xmalloc                                     ; xmalloc
0000000000005a4c         sub        rsp, 0x8
0000000000005a50         mov        qword [rbx+8], rax
0000000000005a54         mov        r8d, dword [rbp]
0000000000005a58         push       qword [rbp+0x30]
0000000000005a5b         push       qword [rbp+0x28]
0000000000005a5e         mov        rcx, r14
0000000000005a61         push       r15
0000000000005a63         mov        r9d, dword [rsp+0x78+var_3C]
0000000000005a68         mov        rdi, rax
0000000000005a6b         mov        rdx, qword [rsp+0x78+var_50]
0000000000005a70         mov        rsi, qword [rsp+0x78+var_48]
0000000000005a75         mov        r12, rax
0000000000005a78         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000005a7d         add        rsp, 0x20

                     loc_5a81:
0000000000005a81         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
0000000000005a85         mov        dword [r13], eax
0000000000005a89         add        rsp, 0x28
0000000000005a8d         mov        rax, r12
0000000000005a90         pop        rbx
0000000000005a91         pop        rbp
0000000000005a92         pop        r12
0000000000005a94         pop        r13
0000000000005a96         pop        r14
0000000000005a98         pop        r15
0000000000005a9a         ret
                        ; endp
0000000000005a9b         align      32

                     loc_5aa0:
0000000000005aa0         xor        edi, edi                                    ; CODE XREF=quotearg_n_options+101
0000000000005aa2         call       xrealloc                                    ; xrealloc
0000000000005aa7         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
0000000000005aaf         mov        rbx, rax
0000000000005ab2         mov        qword [slotvec], rax                        ; slotvec
0000000000005ab9         movups     xmmword [rax], xmm0
0000000000005abc         jmp        loc_599d

                     loc_5ac1:
0000000000005ac1         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_5ac6:
0000000000005ac6         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
0000000000005acb         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x18aa0)
                     clone_quoting_options:
0000000000005ad0         push       r12                                         ; Begin of unwind block (FDE at 0x18b0c)
0000000000005ad2         push       rbp
0000000000005ad3         push       rbx
0000000000005ad4         mov        rbx, rdi
0000000000005ad7         call       j___errno_location                          ; __errno_location
0000000000005adc         mov        r12d, dword [rax]
0000000000005adf         mov        rbp, rax
0000000000005ae2         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000005ae9         test       rbx, rbx
0000000000005aec         mov        esi, 0x38
0000000000005af1         cmove      rbx, rax
0000000000005af5         mov        rdi, rbx
0000000000005af8         call       xmemdup                                     ; xmemdup
0000000000005afd         mov        dword [rbp], r12d
0000000000005b01         pop        rbx
0000000000005b02         pop        rbp
0000000000005b03         pop        r12
0000000000005b05         ret
                        ; endp
0000000000005b06         align      16                                          ; End of unwind block (FDE at 0x18b0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
0000000000005b10         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x18b38), default_quoting_options
0000000000005b17         test       rdi, rdi
0000000000005b1a         cmove      rdi, rax
0000000000005b1e         mov        eax, dword [rdi]
0000000000005b20         ret
                        ; endp
0000000000005b21         align      16                                          ; End of unwind block (FDE at 0x18b38)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
0000000000005b30         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x18b4c), default_quoting_options
0000000000005b37         test       rdi, rdi
0000000000005b3a         cmove      rdi, rax
0000000000005b3e         mov        dword [rdi], esi
0000000000005b40         ret
                        ; endp
0000000000005b41         align      16                                          ; End of unwind block (FDE at 0x18b4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
0000000000005b50         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x18b60), default_quoting_options
0000000000005b57         test       rdi, rdi
0000000000005b5a         mov        ecx, esi
0000000000005b5c         cmove      rdi, rax
0000000000005b60         mov        eax, esi
0000000000005b62         and        ecx, 0x1f
0000000000005b65         shr        al, 0x5
0000000000005b68         movzx      eax, al
0000000000005b6b         lea        rdi, qword [rdi+rax*4+8]
0000000000005b70         mov        esi, dword [rdi]
0000000000005b72         mov        eax, esi
0000000000005b74         shr        eax, cl
0000000000005b76         xor        edx, eax
0000000000005b78         and        eax, 0x1
0000000000005b7b         and        edx, 0x1
0000000000005b7e         shl        edx, cl
0000000000005b80         xor        edx, esi
0000000000005b82         mov        dword [rdi], edx
0000000000005b84         ret
                        ; endp
0000000000005b85         align      16                                          ; End of unwind block (FDE at 0x18b60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
0000000000005b90         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x18b74), default_quoting_options
0000000000005b97         test       rdi, rdi
0000000000005b9a         cmove      rdi, rax
0000000000005b9e         mov        eax, dword [rdi+4]
0000000000005ba1         mov        dword [rdi+4], esi
0000000000005ba4         ret
                        ; endp
0000000000005ba5         align      16                                          ; End of unwind block (FDE at 0x18b74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
0000000000005bb0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x18b88), default_quoting_options
0000000000005bb7         test       rdi, rdi
0000000000005bba         cmove      rdi, rax
0000000000005bbe         test       rsi, rsi
0000000000005bc1         mov        dword [rdi], 0xa
0000000000005bc7         je         loc_5bd7

0000000000005bc9         test       rdx, rdx
0000000000005bcc         je         loc_5bd7

0000000000005bce         mov        qword [rdi+0x28], rsi
0000000000005bd2         mov        qword [rdi+0x30], rdx
0000000000005bd6         ret
                        ; endp

                     loc_5bd7:
0000000000005bd7         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
0000000000005bdb         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
0000000000005be0         push       r15                                         ; End of unwind block (FDE at 0x18b88), Begin of unwind block (FDE at 0x18b9c)
0000000000005be2         push       r14
0000000000005be4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000005beb         push       r13
0000000000005bed         push       r12
0000000000005bef         mov        r13, rdi
0000000000005bf2         push       rbp
0000000000005bf3         push       rbx
0000000000005bf4         mov        rbx, r8
0000000000005bf7         mov        r14, rsi
0000000000005bfa         mov        r15, rdx
0000000000005bfd         sub        rsp, 0x18
0000000000005c01         test       r8, r8
0000000000005c04         cmove      rbx, rax
0000000000005c08         mov        qword [rsp+0x48+var_40], rcx
0000000000005c0d         call       j___errno_location                          ; __errno_location
0000000000005c12         mov        r12d, dword [rax]
0000000000005c15         mov        rbp, rax
0000000000005c18         lea        rax, qword [rbx+8]
0000000000005c1c         sub        rsp, 0x8
0000000000005c20         mov        r9d, dword [rbx+4]
0000000000005c24         push       qword [rbx+0x30]
0000000000005c27         mov        r8d, dword [rbx]
0000000000005c2a         push       qword [rbx+0x28]
0000000000005c2d         mov        rdx, r15
0000000000005c30         push       rax
0000000000005c31         mov        rcx, qword [rsp+0x68+var_40]
0000000000005c36         mov        rsi, r14
0000000000005c39         mov        rdi, r13
0000000000005c3c         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000005c41         mov        dword [rbp], r12d
0000000000005c45         add        rsp, 0x38
0000000000005c49         pop        rbx
0000000000005c4a         pop        rbp
0000000000005c4b         pop        r12
0000000000005c4d         pop        r13
0000000000005c4f         pop        r14
0000000000005c51         pop        r15
0000000000005c53         ret
                        ; endp
0000000000005c54         align      32                                          ; End of unwind block (FDE at 0x18b9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
0000000000005c60         push       r15                                         ; Begin of unwind block (FDE at 0x18bf0), CODE XREF=quotearg_alloc+5
0000000000005c62         push       r14
0000000000005c64         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000005c6b         push       r13
0000000000005c6d         push       r12
0000000000005c6f         mov        r12, rdx
0000000000005c72         push       rbp
0000000000005c73         push       rbx
0000000000005c74         mov        rbx, rcx
0000000000005c77         mov        r14, rdi
0000000000005c7a         mov        r15, rsi
0000000000005c7d         sub        rsp, 0x38
0000000000005c81         test       rcx, rcx
0000000000005c84         cmove      rbx, rax
0000000000005c88         xor        ebp, ebp
0000000000005c8a         call       j___errno_location                          ; __errno_location
0000000000005c8f         test       r12, r12
0000000000005c92         mov        r13, rax
0000000000005c95         mov        eax, dword [rax]
0000000000005c97         sete       bpl
0000000000005c9b         or         ebp, dword [rbx+4]
0000000000005c9e         lea        r10, qword [rbx+8]
0000000000005ca2         sub        rsp, 0x8
0000000000005ca6         mov        r8d, dword [rbx]
0000000000005ca9         mov        rcx, r15
0000000000005cac         mov        dword [rsp+0x70+var_5C], eax
0000000000005cb0         push       qword [rbx+0x30]
0000000000005cb3         mov        rdx, r14
0000000000005cb6         push       qword [rbx+0x28]
0000000000005cb9         push       r10
0000000000005cbb         xor        esi, esi
0000000000005cbd         mov        r9d, ebp
0000000000005cc0         xor        edi, edi
0000000000005cc2         mov        qword [rsp+0x88+var_48], r10
0000000000005cc7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000005ccc         lea        rsi, qword [rax+1]
0000000000005cd0         mov        qword [rsp+0x88+var_40], rax
0000000000005cd5         add        rsp, 0x20
0000000000005cd9         mov        rdi, rsi
0000000000005cdc         mov        qword [rsp+0x68+var_50], rsi
0000000000005ce1         call       xmalloc                                     ; xmalloc
0000000000005ce6         mov        qword [rsp+0x68+var_58], rax
0000000000005ceb         sub        rsp, 0x8
0000000000005cef         push       qword [rbx+0x30]
0000000000005cf2         push       qword [rbx+0x28]
0000000000005cf5         mov        r10, qword [rsp+0x80+var_48]
0000000000005cfa         mov        r9d, ebp
0000000000005cfd         mov        r8d, dword [rbx]
0000000000005d00         mov        rcx, r15
0000000000005d03         mov        rdx, r14
0000000000005d06         mov        rdi, rax
0000000000005d09         push       r10
0000000000005d0b         mov        rsi, qword [rsp+0x88+var_50]
0000000000005d10         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000005d15         mov        eax, dword [rsp+0x88+var_5C]
0000000000005d19         add        rsp, 0x20
0000000000005d1d         test       r12, r12
0000000000005d20         mov        dword [r13], eax
0000000000005d24         je         loc_5d2f

0000000000005d26         mov        r11, qword [rsp+0x68+var_40]
0000000000005d2b         mov        qword [r12], r11

                     loc_5d2f:
0000000000005d2f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000005d34         add        rsp, 0x38
0000000000005d38         pop        rbx
0000000000005d39         pop        rbp
0000000000005d3a         pop        r12
0000000000005d3c         pop        r13
0000000000005d3e         pop        r14
0000000000005d40         pop        r15
0000000000005d42         ret
                        ; endp
0000000000005d43         align      16                                          ; End of unwind block (FDE at 0x18bf0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
0000000000005d50         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x18c5c)
0000000000005d53         xor        edx, edx
0000000000005d55         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
0000000000005d5a         align      32                                          ; End of unwind block (FDE at 0x18c5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
0000000000005d60         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0x18c70), nslots
0000000000005d66         push       r12
0000000000005d68         mov        r12, qword [slotvec]                        ; slotvec
0000000000005d6f         push       rbp
0000000000005d70         push       rbx
0000000000005d71         cmp        eax, 0x1
0000000000005d74         jle        loc_5da1

0000000000005d76         sub        eax, 0x2
0000000000005d79         lea        rbx, qword [r12+0x18]
0000000000005d7e         shl        rax, 0x4
0000000000005d82         lea        rbp, qword [r12+rax+0x28]
0000000000005d87         nop        word [rax+rax]

                     loc_5d90:
0000000000005d90         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
0000000000005d93         add        rbx, 0x10
0000000000005d97         call       j_free                                      ; free
0000000000005d9c         cmp        rbx, rbp
0000000000005d9f         jne        loc_5d90

                     loc_5da1:
0000000000005da1         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
0000000000005da6         lea        rbx, qword [slot0]                          ; slot0
0000000000005dad         cmp        rdi, rbx
0000000000005db0         je         loc_5dc9

0000000000005db2         call       j_free                                      ; free
0000000000005db7         mov        qword [slotvec0], 0x100                     ; slotvec0
0000000000005dc2         mov        qword [slotvec0+8], rbx                     ; 0x21c098

                     loc_5dc9:
0000000000005dc9         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
0000000000005dd0         cmp        r12, rbx
0000000000005dd3         je         loc_5de4

0000000000005dd5         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000005dd8         call       j_free                                      ; free
0000000000005ddd         mov        qword [slotvec], rbx                        ; slotvec

                     loc_5de4:
0000000000005de4         pop        rbx                                         ; CODE XREF=quotearg_free+115
0000000000005de5         mov        dword [nslots], 0x1                         ; nslots
0000000000005def         pop        rbp
0000000000005df0         pop        r12
0000000000005df2         ret
                        ; endp
0000000000005df3         align      512                                         ; End of unwind block (FDE at 0x18c70)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
0000000000005e00         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x18c9c), default_quoting_options
0000000000005e07         mov        rdx, 0xffffffffffffffff
0000000000005e0e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005e13         align      32                                          ; End of unwind block (FDE at 0x18c9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000005e20         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x18cb0), default_quoting_options
0000000000005e27         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005e2c         align      16                                          ; End of unwind block (FDE at 0x18cb0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
0000000000005e30         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x18cc4), default_quoting_options
0000000000005e37         mov        rsi, rdi
0000000000005e3a         mov        rdx, 0xffffffffffffffff
0000000000005e41         xor        edi, edi
0000000000005e43         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005e48         align      16                                          ; End of unwind block (FDE at 0x18cc4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
0000000000005e50         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x18cd8), default_quoting_options
0000000000005e57         mov        rdx, rsi
0000000000005e5a         mov        rsi, rdi
0000000000005e5d         xor        edi, edi
0000000000005e5f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005e64         align      16                                          ; End of unwind block (FDE at 0x18cd8)

                     quotearg_n_style:
0000000000005e70         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x18cec), CODE XREF=quotearg_style+7
0000000000005e74         mov        rax, rdx
0000000000005e77         mov        rdx, qword [fs:0x28]
0000000000005e80         mov        qword [rsp+0x48+var_10], rdx
0000000000005e85         xor        edx, edx
0000000000005e87         cmp        esi, 0xa
0000000000005e8a         je         loc_5ef4

0000000000005e8c         mov        dword [rsp+0x48+var_48], esi
0000000000005e8f         mov        rcx, rsp
0000000000005e92         mov        rdx, 0xffffffffffffffff
0000000000005e99         mov        rsi, rax
0000000000005e9c         mov        qword [rsp+0x48+var_44], 0x0
0000000000005ea5         mov        qword [rsp+0x48+var_3C], 0x0
0000000000005eae         mov        qword [rsp+0x48+var_34], 0x0
0000000000005eb7         mov        qword [rsp+0x48+var_2C], 0x0
0000000000005ec0         mov        qword [rsp+0x48+var_24], 0x0
0000000000005ec9         mov        qword [rsp+0x48+var_1C], 0x0
0000000000005ed2         mov        dword [rsp+0x48+var_14], 0x0
0000000000005eda         call       quotearg_n_options                          ; quotearg_n_options
0000000000005edf         mov        rcx, qword [rsp+0x48+var_10]
0000000000005ee4         xor        rcx, qword [fs:0x28]
0000000000005eed         jne        loc_5ef9

0000000000005eef         add        rsp, 0x48
0000000000005ef3         ret
                        ; endp

                     loc_5ef4:
0000000000005ef4         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_5ef9:
0000000000005ef9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
0000000000005efe         align      256                                         ; End of unwind block (FDE at 0x18cec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
0000000000005f00         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x18d08), CODE XREF=quotearg_style_mem+10
0000000000005f04         mov        rax, rdx
0000000000005f07         mov        rdx, rcx
0000000000005f0a         mov        rcx, qword [fs:0x28]
0000000000005f13         mov        qword [rsp+0x48+var_10], rcx
0000000000005f18         xor        ecx, ecx
0000000000005f1a         cmp        esi, 0xa
0000000000005f1d         je         loc_5f80

0000000000005f1f         mov        dword [rsp+0x48+var_48], esi
0000000000005f22         mov        rcx, rsp
0000000000005f25         mov        rsi, rax
0000000000005f28         mov        qword [rsp+0x48+var_44], 0x0
0000000000005f31         mov        qword [rsp+0x48+var_3C], 0x0
0000000000005f3a         mov        qword [rsp+0x48+var_34], 0x0
0000000000005f43         mov        qword [rsp+0x48+var_2C], 0x0
0000000000005f4c         mov        qword [rsp+0x48+var_24], 0x0
0000000000005f55         mov        qword [rsp+0x48+var_1C], 0x0
0000000000005f5e         mov        dword [rsp+0x48+var_14], 0x0
0000000000005f66         call       quotearg_n_options                          ; quotearg_n_options
0000000000005f6b         mov        rdx, qword [rsp+0x48+var_10]
0000000000005f70         xor        rdx, qword [fs:0x28]
0000000000005f79         jne        loc_5f85

0000000000005f7b         add        rsp, 0x48
0000000000005f7f         ret
                        ; endp

                     loc_5f80:
0000000000005f80         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_5f85:
0000000000005f85         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
0000000000005f8a         align      16                                          ; End of unwind block (FDE at 0x18d08)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_style:
0000000000005f90         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0x18d24), CODE XREF=main+2733, close_output_file+402, save_line_to_file+67
0000000000005f93         mov        esi, edi
0000000000005f95         xor        edi, edi
0000000000005f97         jmp        quotearg_n_style                            ; quotearg_n_style
0000000000005f9c         align      32                                          ; End of unwind block (FDE at 0x18d24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
0000000000005fa0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x18d38)
0000000000005fa3         mov        rdx, rsi
0000000000005fa6         mov        esi, edi
0000000000005fa8         xor        edi, edi
0000000000005faa         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
0000000000005faf         align      16                                          ; End of unwind block (FDE at 0x18d38)

                     quotearg_char_mem:
0000000000005fb0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x18d4c), CODE XREF=quotearg_char+11
0000000000005fb4         mov        ecx, edx
0000000000005fb6         mov        rax, qword [fs:0x28]
0000000000005fbf         mov        qword [rsp+0x48+var_10], rax
0000000000005fc4         xor        eax, eax
0000000000005fc6         mov        rax, qword [qword_21c370]                   ; qword_21c370
0000000000005fcd         mov        r8, rsp
0000000000005fd0         and        ecx, 0x1f
0000000000005fd3         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000005fdb         mov        qword [rsp+0x48+var_18], rax
0000000000005fe0         mov        eax, edx
0000000000005fe2         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000005fe6         shr        al, 0x5
0000000000005fe9         movzx      eax, al
0000000000005fec         lea        r9, qword [r8+rax*4+8]
0000000000005ff1         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x21c350
0000000000005ff9         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000005ffe         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x21c360
0000000000006006         movaps     xmmword [rsp+0x48+var_28], xmm0
000000000000600b         mov        edx, dword [r9]
000000000000600e         mov        eax, edx
0000000000006010         shr        eax, cl
0000000000006012         not        eax
0000000000006014         and        eax, 0x1
0000000000006017         shl        eax, cl
0000000000006019         mov        rcx, r8
000000000000601c         xor        eax, edx
000000000000601e         mov        rdx, rsi
0000000000006021         mov        rsi, rdi
0000000000006024         mov        dword [r9], eax
0000000000006027         xor        edi, edi
0000000000006029         call       quotearg_n_options                          ; quotearg_n_options
000000000000602e         mov        rsi, qword [rsp+0x48+var_10]
0000000000006033         xor        rsi, qword [fs:0x28]
000000000000603c         jne        loc_6043

000000000000603e         add        rsp, 0x48
0000000000006042         ret
                        ; endp

                     loc_6043:
0000000000006043         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
0000000000006048         align      16                                          ; End of unwind block (FDE at 0x18d4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
0000000000006050         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0x18d68)
0000000000006054         mov        rsi, 0xffffffffffffffff
000000000000605b         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
0000000000006060         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0x18d68), Begin of unwind block (FDE at 0x18d7c), CODE XREF=close_stdout+101
0000000000006065         mov        rsi, 0xffffffffffffffff
000000000000606c         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000006071         align      128                                         ; End of unwind block (FDE at 0x18d7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
0000000000006080         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0x18d90)
0000000000006085         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
000000000000608a         align      16                                          ; End of unwind block (FDE at 0x18d90)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
0000000000006090         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x18da4), CODE XREF=delete_all_files.part.0+98, close_output_file+289, close_output_file+340, create_output_file+77
0000000000006094         mov        rax, rdx
0000000000006097         mov        rdx, qword [fs:0x28]
00000000000060a0         mov        qword [rsp+0x48+var_10], rdx
00000000000060a5         xor        edx, edx
00000000000060a7         cmp        esi, 0xa
00000000000060aa         je         loc_6114

00000000000060ac         mov        dword [rsp+0x48+var_48], esi
00000000000060af         mov        rcx, rsp
00000000000060b2         mov        rdx, 0xffffffffffffffff
00000000000060b9         mov        rsi, rax
00000000000060bc         mov        qword [rsp+0x48+var_44], 0x0
00000000000060c5         mov        qword [rsp+0x48+var_3C], 0x4000000
00000000000060ce         mov        qword [rsp+0x48+var_34], 0x0
00000000000060d7         mov        qword [rsp+0x48+var_2C], 0x0
00000000000060e0         mov        qword [rsp+0x48+var_24], 0x0
00000000000060e9         mov        qword [rsp+0x48+var_1C], 0x0
00000000000060f2         mov        dword [rsp+0x48+var_14], 0x0
00000000000060fa         call       quotearg_n_options                          ; quotearg_n_options
00000000000060ff         mov        rcx, qword [rsp+0x48+var_10]
0000000000006104         xor        rcx, qword [fs:0x28]
000000000000610d         jne        loc_6119

000000000000610f         add        rsp, 0x48
0000000000006113         ret
                        ; endp

                     loc_6114:
0000000000006114         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_6119:
0000000000006119         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
000000000000611e         align      32                                          ; End of unwind block (FDE at 0x18da4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom_mem:
0000000000006120         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x18dc0), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000006124         mov        r9, rcx
0000000000006127         mov        rcx, qword [qword_21c370]                   ; qword_21c370
000000000000612e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000006136         mov        rax, qword [fs:0x28]
000000000000613f         mov        qword [rsp+0x48+var_10], rax
0000000000006144         xor        eax, eax
0000000000006146         movaps     xmmword [rsp+0x48+var_48], xmm0
000000000000614a         test       rsi, rsi
000000000000614d         mov        qword [rsp+0x48+var_18], rcx
0000000000006152         mov        dword [rsp+0x48+var_48], 0xa
0000000000006159         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x21c350
0000000000006161         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000006166         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x21c360
000000000000616e         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000006173         je         loc_61a7

0000000000006175         test       rdx, rdx
0000000000006178         je         loc_61a7

000000000000617a         mov        qword [rsp+0x48+var_20], rsi
000000000000617f         mov        qword [rsp+0x48+var_18], rdx
0000000000006184         mov        rcx, rsp
0000000000006187         mov        rdx, r8
000000000000618a         mov        rsi, r9
000000000000618d         call       quotearg_n_options                          ; quotearg_n_options
0000000000006192         mov        rdi, qword [rsp+0x48+var_10]
0000000000006197         xor        rdi, qword [fs:0x28]
00000000000061a0         jne        loc_61ac

00000000000061a2         add        rsp, 0x48
00000000000061a6         ret
                        ; endp

                     loc_61a7:
00000000000061a7         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_61ac:
00000000000061ac         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
00000000000061b1         align      64                                          ; End of unwind block (FDE at 0x18dc0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_custom:
00000000000061c0         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0x18ddc)
00000000000061c7         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
00000000000061cc         align      16                                          ; End of unwind block (FDE at 0x18ddc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
00000000000061d0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x18df0)
00000000000061d3         mov        r8, 0xffffffffffffffff
00000000000061da         mov        rdx, rsi
00000000000061dd         mov        rsi, rdi
00000000000061e0         xor        edi, edi
00000000000061e2         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
00000000000061e7         align      16                                          ; End of unwind block (FDE at 0x18df0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
00000000000061f0         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0x18e04)
00000000000061f3         mov        rcx, rdx
00000000000061f6         mov        rdx, rsi
00000000000061f9         mov        rsi, rdi
00000000000061fc         xor        edi, edi
00000000000061fe         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000006203         align      16                                          ; End of unwind block (FDE at 0x18e04)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000006210         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x18e18), quote_quoting_options
0000000000006217         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000621c         align      32                                          ; End of unwind block (FDE at 0x18e18)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000006220         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x18e2c), quote_quoting_options
0000000000006227         mov        rdx, rsi
000000000000622a         mov        rsi, rdi
000000000000622d         xor        edi, edi
000000000000622f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000006234         align      64                                          ; End of unwind block (FDE at 0x18e2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
0000000000006240         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x18e40), quote_quoting_options
0000000000006247         mov        rdx, 0xffffffffffffffff
000000000000624e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000006253         align      32                                          ; End of unwind block (FDE at 0x18e40)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
0000000000006260         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x18e54), quote_quoting_options, CODE XREF=regexp_error+46, main+1235, main+1854, main+3118, main+3168, main+3282, main+3547, main+3597, main+3711, main+3824, handle_line_error.isra.1+43
0000000000006267         mov        rsi, rdi
000000000000626a         mov        rdx, 0xffffffffffffffff
0000000000006271         xor        edi, edi
0000000000006273         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000006278         align      128                                         ; End of unwind block (FDE at 0x18e54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     safe_read:
0000000000006280         push       r13                                         ; Begin of unwind block (FDE at 0x18e6c), CODE XREF=load_buffer.part.5+206
0000000000006282         push       r12
0000000000006284         mov        r13d, edi
0000000000006287         push       rbp
0000000000006288         push       rbx
0000000000006289         mov        r12, rsi
000000000000628c         mov        rbx, rdx
000000000000628f         sub        rsp, 0x8
0000000000006293         nop        dword [rax+rax]

                     loc_6298:
0000000000006298         mov        rdx, rbx                                    ; argument "__nbytes" for method j_read, CODE XREF=safe_read+56, safe_read+77
000000000000629b         mov        rsi, r12                                    ; argument "__buf" for method j_read
000000000000629e         mov        edi, r13d                                   ; argument "__fd" for method j_read
00000000000062a1         call       j_read                                      ; read
00000000000062a6         test       rax, rax
00000000000062a9         mov        rbp, rax
00000000000062ac         jns        loc_62d0

00000000000062ae         call       j___errno_location                          ; __errno_location
00000000000062b3         mov        eax, dword [rax]
00000000000062b5         cmp        eax, 0x4
00000000000062b8         je         loc_6298

00000000000062ba         cmp        rbx, 0x7ff00000
00000000000062c1         jbe        loc_62d0

00000000000062c3         cmp        eax, 0x16
00000000000062c6         jne        loc_62d0

00000000000062c8         mov        ebx, 0x7ff00000
00000000000062cd         jmp        loc_6298
00000000000062cf         align      16

                     loc_62d0:
00000000000062d0         add        rsp, 0x8                                    ; CODE XREF=safe_read+44, safe_read+65, safe_read+70
00000000000062d4         mov        rax, rbp
00000000000062d7         pop        rbx
00000000000062d8         pop        rbp
00000000000062d9         pop        r12
00000000000062db         pop        r13
00000000000062dd         ret
                        ; endp
00000000000062de         align      32                                          ; End of unwind block (FDE at 0x18e6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int32_t, -104


                     dup_safer:
00000000000062e0         mov        edx, 0x3                                    ; Begin of unwind block (FDE at 0x18ea4), CODE XREF=fopen_safer+50
00000000000062e5         xor        esi, esi
00000000000062e7         xor        eax, eax
00000000000062e9         jmp        rpl_fcntl                                   ; rpl_fcntl
00000000000062ee         align      16                                          ; End of unwind block (FDE at 0x18ea4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
00000000000062f0         push       r15                                         ; Begin of unwind block (FDE at 0x18ebc), CODE XREF=j_version_etc_arn, version_etc_va+75, version_etc+161
00000000000062f2         push       r14
00000000000062f4         push       r13
00000000000062f6         push       r12
00000000000062f8         mov        r12, r9
00000000000062fb         push       rbp
00000000000062fc         push       rbx
00000000000062fd         mov        rbp, rdi
0000000000006300         mov        rbx, r8
0000000000006303         sub        rsp, 0x28
0000000000006307         test       rsi, rsi
000000000000630a         je         loc_6428

0000000000006310         mov        r8, rdx
0000000000006313         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
000000000000631a         mov        r9, rcx
000000000000631d         xor        eax, eax
000000000000631f         mov        rcx, rsi
0000000000006322         mov        esi, 0x1
0000000000006327         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_632c:
000000000000632c         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0x1709b, CODE XREF=version_etc_arn+337
0000000000006333         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006335         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000633a         call       j_dcgettext                                 ; dcgettext
000000000000633f         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
0000000000006346         mov        rcx, rax
0000000000006349         mov        r8d, 0x7e3
000000000000634f         mov        esi, 0x1
0000000000006354         mov        rdi, rbp
0000000000006357         xor        eax, eax
0000000000006359         call       j___fprintf_chk                             ; __fprintf_chk
000000000000635e         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
0000000000006365         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006367         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000636c         call       j_dcgettext                                 ; dcgettext
0000000000006371         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000006374         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000006377         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000637c         cmp        r12, 0x9
0000000000006380         ja         loc_66c0

0000000000006386         lea        rdx, qword [switch_table_17384]             ; switch_table_17384
000000000000638d         movsxd     rax, dword [rdx+r12*4]
0000000000006391         add        rax, rdx
0000000000006394         jmp        rax                                         ; switch statement using table at 0x17384, with 10 cases, 0x63a0,0x6416,0x6450,0x64a8,0x64e8,0x6530,0x6580,0x65d8,0x6608,0x6670
0000000000006396         align      32

                     loc_63a0:
00000000000063a0         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
00000000000063a4         mov        rax, qword [rbx+0x10]
00000000000063a8         lea        rsi, qword [aWrittenBySSSns_17298]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
00000000000063af         mov        r8, qword [rbx+8]
00000000000063b3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000063b8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000063ba         mov        r13, qword [rbx+0x30]
00000000000063be         mov        r12, qword [rbx+0x28]
00000000000063c2         mov        qword [rsp+0x58+var_48], r9
00000000000063c7         mov        r15, qword [rbx+0x20]
00000000000063cb         mov        r14, qword [rbx+0x18]
00000000000063cf         mov        qword [rsp+0x58+var_58], rax
00000000000063d3         mov        qword [rsp+0x58+var_50], r8
00000000000063d8         mov        rbx, qword [rbx]
00000000000063db         call       j_dcgettext                                 ; dcgettext
00000000000063e0         sub        rsp, 0x8

                     loc_63e4:
00000000000063e4         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
00000000000063e9         mov        rdx, rax
00000000000063ec         mov        rcx, rbx
00000000000063ef         mov        esi, 0x1
00000000000063f4         mov        rdi, rbp
00000000000063f7         xor        eax, eax
00000000000063f9         push       r9
00000000000063fb         push       r13
00000000000063fd         push       r12
00000000000063ff         push       r15
0000000000006401         push       r14
0000000000006403         mov        r9, qword [rsp+0x88+var_58]
0000000000006408         mov        r8, qword [rsp+0x88+var_50]
000000000000640d         call       j___fprintf_chk                             ; __fprintf_chk
0000000000006412         add        rsp, 0x30

                     loc_6416:
0000000000006416         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
000000000000641a         pop        rbx
000000000000641b         pop        rbp
000000000000641c         pop        r12
000000000000641e         pop        r13
0000000000006420         pop        r14
0000000000006422         pop        r15
0000000000006424         ret
                        ; endp
0000000000006425         align      8

                     loc_6428:
0000000000006428         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
000000000000642b         mov        rcx, rdx
000000000000642e         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
0000000000006435         mov        esi, 0x1
000000000000643a         xor        eax, eax
000000000000643c         call       j___fprintf_chk                             ; __fprintf_chk
0000000000006441         jmp        loc_632c
0000000000006446         align      16

                     loc_6450:
0000000000006450         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
0000000000006454         mov        r9, qword [rbx+0x38]
0000000000006458         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
000000000000645f         mov        rax, qword [rbx+0x10]
0000000000006463         mov        r8, qword [rbx+8]
0000000000006467         mov        edx, 0x5
000000000000646c         mov        r13, qword [rbx+0x30]
0000000000006470         mov        r12, qword [rbx+0x28]
0000000000006474         mov        r15, qword [rbx+0x20]
0000000000006478         mov        r14, qword [rbx+0x18]
000000000000647c         mov        rbx, qword [rbx]
000000000000647f         mov        qword [rsp+0x58+var_40], r10
0000000000006484         mov        qword [rsp+0x58+var_48], r9
0000000000006489         mov        qword [rsp+0x58+var_58], rax
000000000000648d         mov        qword [rsp+0x58+var_50], r8

                     loc_6492:
0000000000006492         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
0000000000006494         call       j_dcgettext                                 ; dcgettext
0000000000006499         mov        r10, qword [rsp+0x58+var_40]
000000000000649e         push       r10
00000000000064a0         jmp        loc_63e4
00000000000064a5         align      8

                     loc_64a8:
00000000000064a8         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
00000000000064ab         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
00000000000064b2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000064b7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000064b9         call       j_dcgettext                                 ; dcgettext
00000000000064be         add        rsp, 0x28
00000000000064c2         mov        rcx, rbx
00000000000064c5         mov        rdi, rbp
00000000000064c8         pop        rbx
00000000000064c9         pop        rbp
00000000000064ca         pop        r12
00000000000064cc         pop        r13
00000000000064ce         pop        r14
00000000000064d0         pop        r15
00000000000064d2         mov        rdx, rax
00000000000064d5         mov        esi, 0x1
00000000000064da         xor        eax, eax
00000000000064dc         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
00000000000064e1         align      8

                     loc_64e8:
00000000000064e8         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
00000000000064ec         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
00000000000064f3         mov        rbx, qword [rbx]
00000000000064f6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000064fb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000064fd         call       j_dcgettext                                 ; dcgettext
0000000000006502         add        rsp, 0x28
0000000000006506         mov        r8, r12
0000000000006509         mov        rcx, rbx
000000000000650c         mov        rdi, rbp
000000000000650f         mov        rdx, rax
0000000000006512         mov        esi, 0x1
0000000000006517         pop        rbx
0000000000006518         pop        rbp
0000000000006519         pop        r12
000000000000651b         pop        r13
000000000000651d         pop        r14
000000000000651f         pop        r15
0000000000006521         xor        eax, eax
0000000000006523         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000006528         align      16

                     loc_6530:
0000000000006530         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
0000000000006534         mov        r12, qword [rbx+8]
0000000000006538         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
000000000000653f         mov        rbx, qword [rbx]
0000000000006542         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006547         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006549         call       j_dcgettext                                 ; dcgettext
000000000000654e         add        rsp, 0x28
0000000000006552         mov        r9, r13
0000000000006555         mov        r8, r12
0000000000006558         mov        rcx, rbx
000000000000655b         mov        rdi, rbp
000000000000655e         mov        rdx, rax
0000000000006561         pop        rbx
0000000000006562         pop        rbp
0000000000006563         pop        r12
0000000000006565         pop        r13
0000000000006567         pop        r14
0000000000006569         pop        r15
000000000000656b         mov        esi, 0x1
0000000000006570         xor        eax, eax
0000000000006572         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000006577         align      128

                     loc_6580:
0000000000006580         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
0000000000006587         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000658c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000658e         mov        r14, qword [rbx+0x18]
0000000000006592         mov        r13, qword [rbx+0x10]
0000000000006596         mov        r12, qword [rbx+8]
000000000000659a         mov        rbx, qword [rbx]
000000000000659d         call       j_dcgettext                                 ; dcgettext
00000000000065a2         sub        rsp, 0x8

                     loc_65a6:
00000000000065a6         push       r14                                         ; CODE XREF=version_etc_arn+784
00000000000065a8         mov        rdx, rax
00000000000065ab         mov        r9, r13
00000000000065ae         mov        r8, r12
00000000000065b1         mov        rcx, rbx
00000000000065b4         mov        rdi, rbp
00000000000065b7         mov        esi, 0x1
00000000000065bc         xor        eax, eax
00000000000065be         call       j___fprintf_chk                             ; __fprintf_chk
00000000000065c3         pop        rax
00000000000065c4         pop        rdx
00000000000065c5         add        rsp, 0x28
00000000000065c9         pop        rbx
00000000000065ca         pop        rbp
00000000000065cb         pop        r12
00000000000065cd         pop        r13
00000000000065cf         pop        r14
00000000000065d1         pop        r15
00000000000065d3         ret
                        ; endp
00000000000065d4         align      8

                     loc_65d8:
00000000000065d8         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
00000000000065dc         lea        rsi, qword [aWrittenBySSSns_17218]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
00000000000065e3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000065e8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000065ea         mov        r14, qword [rbx+0x18]
00000000000065ee         mov        r13, qword [rbx+0x10]
00000000000065f2         mov        r12, qword [rbx+8]
00000000000065f6         mov        rbx, qword [rbx]
00000000000065f9         call       j_dcgettext                                 ; dcgettext
00000000000065fe         push       r15
0000000000006600         jmp        loc_65a6
0000000000006602         align      8

                     loc_6608:
0000000000006608         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
000000000000660c         mov        r12, qword [rbx+0x28]
0000000000006610         lea        rsi, qword [aWrittenBySSSns_17240]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
0000000000006617         mov        r15, qword [rbx+0x20]
000000000000661b         mov        r14, qword [rbx+0x18]
000000000000661f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006624         mov        r13, qword [rbx+0x10]
0000000000006628         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000662a         mov        rbx, qword [rbx]
000000000000662d         mov        qword [rsp+0x58+var_58], r8
0000000000006631         call       j_dcgettext                                 ; dcgettext
0000000000006636         sub        rsp, 0x8
000000000000663a         mov        r9, r13
000000000000663d         push       r12
000000000000663f         push       r15
0000000000006641         push       r14

                     loc_6643:
0000000000006643         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
0000000000006648         mov        rcx, rbx
000000000000664b         mov        rdx, rax
000000000000664e         mov        rdi, rbp
0000000000006651         mov        esi, 0x1
0000000000006656         xor        eax, eax
0000000000006658         call       j___fprintf_chk                             ; __fprintf_chk
000000000000665d         add        rsp, 0x20
0000000000006661         add        rsp, 0x28
0000000000006665         pop        rbx
0000000000006666         pop        rbp
0000000000006667         pop        r12
0000000000006669         pop        r13
000000000000666b         pop        r14
000000000000666d         pop        r15
000000000000666f         ret
                        ; endp

                     loc_6670:
0000000000006670         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
0000000000006674         mov        r13, qword [rbx+0x30]
0000000000006678         lea        rsi, qword [aWrittenBySSSns_17268]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
000000000000667f         mov        r12, qword [rbx+0x28]
0000000000006683         mov        r15, qword [rbx+0x20]
0000000000006687         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000668c         mov        r14, qword [rbx+0x18]
0000000000006690         mov        r8, qword [rbx+8]
0000000000006694         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006696         mov        qword [rsp+0x58+var_50], r9
000000000000669b         mov        rbx, qword [rbx]
000000000000669e         mov        qword [rsp+0x58+var_58], r8
00000000000066a2         call       j_dcgettext                                 ; dcgettext
00000000000066a7         push       r13
00000000000066a9         push       r12
00000000000066ab         push       r15
00000000000066ad         push       r14
00000000000066af         mov        r9, qword [rsp+0x78+var_50]
00000000000066b4         jmp        loc_6643
00000000000066b6         align      64

                     loc_66c0:
00000000000066c0         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
00000000000066c4         mov        r9, qword [rbx+0x38]
00000000000066c8         mov        edx, 0x5
00000000000066cd         mov        rax, qword [rbx+0x10]
00000000000066d1         mov        r8, qword [rbx+8]
00000000000066d5         lea        rsi, qword [aWrittenBySSSns_17300]          ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
00000000000066dc         mov        r13, qword [rbx+0x30]
00000000000066e0         mov        r12, qword [rbx+0x28]
00000000000066e4         mov        r15, qword [rbx+0x20]
00000000000066e8         mov        r14, qword [rbx+0x18]
00000000000066ec         mov        qword [rsp+0x58+var_40], r10
00000000000066f1         mov        qword [rsp+0x58+var_48], r9
00000000000066f6         mov        qword [rsp+0x58+var_58], rax
00000000000066fa         mov        qword [rsp+0x58+var_50], r8
00000000000066ff         mov        rbx, qword [rbx]
0000000000006702         jmp        loc_6492
0000000000006707         align      16                                          ; End of unwind block (FDE at 0x18ebc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
0000000000006710         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0x18fd0)
0000000000006713         cmp        qword [r8], 0x0
0000000000006717         je         j_version_etc_arn                           ; version_etc_arn

0000000000006719         nop        dword [rax]

                     loc_6720:
0000000000006720         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
0000000000006724         cmp        qword [r8+r9*8], 0x0
0000000000006729         jne        loc_6720

                     j_version_etc_arn:        // version_etc_arn
000000000000672b         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
0000000000006730         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0x18fd0), Begin of unwind block (FDE at 0x18fe4)
0000000000006734         mov        r10, r8
0000000000006737         xor        r9d, r9d
000000000000673a         mov        rax, qword [fs:0x28]
0000000000006743         mov        qword [rsp+0x68+var_10], rax
0000000000006748         xor        eax, eax
000000000000674a         mov        r8, rsp
000000000000674d         nop        dword [rax]

                     loc_6750:
0000000000006750         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
0000000000006753         cmp        eax, 0x2f
0000000000006756         ja         loc_679a

0000000000006758         mov        r11d, eax
000000000000675b         add        r11, qword [r10+0x10]
000000000000675f         add        eax, 0x8
0000000000006762         mov        dword [r10], eax

                     loc_6765:
0000000000006765         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
0000000000006768         test       rax, rax
000000000000676b         mov        qword [r8+r9*8], rax
000000000000676f         je         loc_677b

0000000000006771         add        r9, 0x1
0000000000006775         cmp        r9, 0xa
0000000000006779         jne        loc_6750

                     loc_677b:
000000000000677b         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
0000000000006780         mov        rax, qword [rsp+0x68+var_10]
0000000000006785         xor        rax, qword [fs:0x28]
000000000000678e         jne        loc_6795

0000000000006790         add        rsp, 0x68
0000000000006794         ret
                        ; endp

                     loc_6795:
0000000000006795         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_679a:
000000000000679a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
000000000000679e         lea        rax, qword [r11+8]
00000000000067a2         mov        qword [r10+8], rax
00000000000067a6         jmp        loc_6765
00000000000067a8         align      16                                          ; End of unwind block (FDE at 0x18fe4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
00000000000067b0         push       rbp                                         ; Begin of unwind block (FDE at 0x19000), CODE XREF=main+549
00000000000067b1         push       rbx
00000000000067b2         mov        r10d, 0x20
00000000000067b8         xor        r11d, r11d
00000000000067bb         sub        rsp, 0xb8
00000000000067c2         mov        rax, qword [fs:0x28]
00000000000067cb         mov        qword [rsp+0xc8+var_50], rax
00000000000067d0         xor        eax, eax
00000000000067d2         lea        rax, qword [rsp+0xc8+arg_0]
00000000000067da         mov        qword [rsp+0xc8+var_28], r8
00000000000067e2         lea        rbx, qword [rsp+0xc8+arg_0]
00000000000067ea         lea        r8, qword [rsp+0xc8+var_A8]
00000000000067ef         mov        qword [rsp+0xc8+var_20], r9
00000000000067f7         mov        dword [rsp+0xc8+var_C0], 0x20
00000000000067ff         mov        qword [rsp+0xc8+var_B8], rax
0000000000006804         lea        rax, qword [rsp+0xc8+var_48]
000000000000680c         xor        r9d, r9d
000000000000680f         mov        qword [rsp+0xc8+var_B0], rax
0000000000006814         mov        rbp, rax
0000000000006817         nop        word [rax+rax]

                     loc_6820:
0000000000006820         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
0000000000006824         ja         loc_687c

0000000000006826         mov        eax, r10d
0000000000006829         mov        r11d, 0x1
000000000000682f         add        r10d, 0x8
0000000000006833         add        rax, rbp

                     loc_6836:
0000000000006836         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
0000000000006839         test       rax, rax
000000000000683c         mov        qword [r8+r9*8], rax
0000000000006840         je         loc_684c

0000000000006842         add        r9, 0x1
0000000000006846         cmp        r9, 0xa
000000000000684a         jne        loc_6820

                     loc_684c:
000000000000684c         test       r11b, r11b                                  ; CODE XREF=version_etc+144
000000000000684f         jne        loc_6875

                     loc_6851:
0000000000006851         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
0000000000006856         mov        rax, qword [rsp+0xc8+var_50]
000000000000685b         xor        rax, qword [fs:0x28]
0000000000006864         jne        loc_6870

0000000000006866         add        rsp, 0xb8
000000000000686d         pop        rbx
000000000000686e         pop        rbp
000000000000686f         ret
                        ; endp

                     loc_6870:
0000000000006870         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_6875:
0000000000006875         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
000000000000687a         jmp        loc_6851

                     loc_687c:
000000000000687c         mov        rax, rbx                                    ; CODE XREF=version_etc+116
000000000000687f         add        rbx, 0x8
0000000000006883         jmp        loc_6836
0000000000006885         align      16                                          ; End of unwind block (FDE at 0x19000)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
0000000000006890         push       rbx                                         ; Begin of unwind block (FDE at 0x1902c)
0000000000006891         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
0000000000006898         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000689d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000689f         call       j_dcgettext                                 ; dcgettext
00000000000068a4         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
00000000000068ab         mov        rsi, rax
00000000000068ae         mov        edi, 0x1
00000000000068b3         xor        eax, eax
00000000000068b5         call       j___printf_chk                              ; __printf_chk
00000000000068ba         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
00000000000068c1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000068c6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000068c8         call       j_dcgettext                                 ; dcgettext
00000000000068cd         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000068d4         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x16096
00000000000068db         mov        rsi, rax
00000000000068de         mov        edi, 0x1
00000000000068e3         xor        eax, eax
00000000000068e5         call       j___printf_chk                              ; __printf_chk
00000000000068ea         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000068f1         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
00000000000068f8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000068fa         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000068ff         call       j_dcgettext                                 ; dcgettext
0000000000006904         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000006907         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000690a         pop        rbx
000000000000690b         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
0000000000006910         push       rbx                                         ; End of unwind block (FDE at 0x1902c), Begin of unwind block (FDE at 0x1904c), CODE XREF=main+740, main+1123, keep_new_line.isra.2+101, keep_new_line.isra.2+184, load_buffer.part.5+97, load_buffer.part.5+108, quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25, xcharalloc, xzalloc+4
0000000000006911         mov        rbx, rdi
0000000000006914         call       j_malloc                                    ; malloc
0000000000006919         test       rax, rax
000000000000691c         jne        loc_6923

000000000000691e         test       rbx, rbx
0000000000006921         jne        loc_6925

                     loc_6923:
0000000000006923         pop        rbx                                         ; CODE XREF=xmalloc+12
0000000000006924         ret
                        ; endp

                     loc_6925:
0000000000006925         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
000000000000692a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x1904c)
                     xnmalloc:
0000000000006930         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x19068)
0000000000006933         mul        rsi
0000000000006936         mov        rdi, rax
0000000000006939         seto       al
000000000000693c         test       rdi, rdi
000000000000693f         js         loc_694b

0000000000006941         movzx      eax, al
0000000000006944         test       rax, rax
0000000000006947         jne        loc_694b

0000000000006949         jmp        xmalloc                                     ; xmalloc

                     loc_694b:
000000000000694b         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
000000000000694f         call       xalloc_die                                  ; xalloc_die
0000000000006954         nop                                                    ; End of unwind block (FDE at 0x19068)
0000000000006956         nop        word [cs:rax+rax]
                     xcharalloc:
0000000000006960         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0x1907c)
0000000000006962         align      16                                          ; End of unwind block (FDE at 0x1907c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
0000000000006970         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x19090), CODE XREF=new_control_record+134, quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
0000000000006973         push       rbx
0000000000006974         mov        rbx, rsi
0000000000006977         jne        loc_697e

0000000000006979         test       rdi, rdi
000000000000697c         jne        loc_6998

                     loc_697e:
000000000000697e         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
0000000000006981         call       j_realloc                                   ; realloc
0000000000006986         test       rax, rax
0000000000006989         jne        loc_6990

000000000000698b         test       rbx, rbx
000000000000698e         jne        loc_69a1

                     loc_6990:
0000000000006990         pop        rbx                                         ; CODE XREF=xrealloc+25
0000000000006991         ret
                        ; endp
0000000000006992         align      8

                     loc_6998:
0000000000006998         call       j_free                                      ; free, CODE XREF=xrealloc+12
000000000000699d         xor        eax, eax
000000000000699f         pop        rbx
00000000000069a0         ret
                        ; endp

                     loc_69a1:
00000000000069a1         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
00000000000069a6         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x19090)
                     xnrealloc:
00000000000069b0         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0x190b4)
00000000000069b3         mul        rdx
00000000000069b6         mov        rsi, rax
00000000000069b9         seto       al
00000000000069bc         test       rsi, rsi
00000000000069bf         js         loc_69cb

00000000000069c1         movzx      eax, al
00000000000069c4         test       rax, rax
00000000000069c7         jne        loc_69cb

00000000000069c9         jmp        xrealloc                                    ; xrealloc

                     loc_69cb:
00000000000069cb         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
00000000000069cf         call       xalloc_die                                  ; xalloc_die
00000000000069d4         nop                                                    ; End of unwind block (FDE at 0x190b4)
00000000000069d6         nop        word [cs:rax+rax]
                     x2nrealloc:
00000000000069e0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x190c8)
00000000000069e3         mov        r9, rdx
00000000000069e6         mov        rcx, qword [rsi]
00000000000069e9         je         loc_6a20

00000000000069eb         xor        edx, edx
00000000000069ed         movabs     rax, 0x5555555555555554
00000000000069f7         div        r9
00000000000069fa         cmp        rax, rcx
00000000000069fd         jbe        loc_6a3b

00000000000069ff         mov        rax, rcx
0000000000006a02         shr        rax, 0x1
0000000000006a05         lea        rcx, qword [rax+rcx+1]

                     loc_6a0a:
0000000000006a0a         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
0000000000006a0d         imul       rcx, r9
0000000000006a11         mov        rsi, rcx
0000000000006a14         jmp        xrealloc                                    ; xrealloc
0000000000006a19         align      32

                     loc_6a20:
0000000000006a20         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
0000000000006a23         je         loc_6a48

                     loc_6a25:
0000000000006a25         mov        rax, rcx                                    ; CODE XREF=x2nrealloc+128
0000000000006a28         mul        r9
0000000000006a2b         seto       dl
0000000000006a2e         test       rax, rax
0000000000006a31         movzx      edx, dl
0000000000006a34         js         loc_6a3b

0000000000006a36         test       rdx, rdx
0000000000006a39         je         loc_6a0a

                     loc_6a3b:
0000000000006a3b         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
0000000000006a3f         call       xalloc_die                                  ; xalloc_die
0000000000006a44         nop        dword [rax]

                     loc_6a48:
0000000000006a48         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
0000000000006a4a         mov        eax, 0x80
0000000000006a4f         xor        r8d, r8d
0000000000006a52         div        r9
0000000000006a55         test       rax, rax
0000000000006a58         sete       r8b
0000000000006a5c         lea        rcx, qword [r8+rax]
0000000000006a60         jmp        loc_6a25
0000000000006a62         align      16                                          ; End of unwind block (FDE at 0x190c8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
0000000000006a70         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x190e0)
0000000000006a73         mov        rax, qword [rsi]
0000000000006a76         je         loc_6aa0

0000000000006a78         movabs     rdx, 0x5555555555555553
0000000000006a82         cmp        rax, rdx
0000000000006a85         ja         loc_6ab1

0000000000006a87         mov        rdx, rax
0000000000006a8a         shr        rdx, 0x1
0000000000006a8d         lea        rax, qword [rdx+rax+1]

                     loc_6a92:
0000000000006a92         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000006a95         mov        rsi, rax
0000000000006a98         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000006a9d         align      32

                     loc_6aa0:
0000000000006aa0         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000006aa3         mov        edx, 0x80
0000000000006aa8         cmove      rax, rdx
0000000000006aac         test       rax, rax
0000000000006aaf         jns        loc_6a92

                     loc_6ab1:
0000000000006ab1         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000006ab5         call       xalloc_die                                  ; xalloc_die
0000000000006aba         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x190e0)
                     xzalloc:
0000000000006ac0         push       rbx                                         ; Begin of unwind block (FDE at 0x190f8)
0000000000006ac1         mov        rbx, rdi
0000000000006ac4         call       xmalloc                                     ; xmalloc
0000000000006ac9         mov        rdx, rbx                                    ; argument "__n" for method j_memset
0000000000006acc         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000006ace         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000006ad1         pop        rbx
0000000000006ad2         jmp        j_memset                                    ; memset
                        ; endp
0000000000006ad7         align      32                                          ; End of unwind block (FDE at 0x190f8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000006ae0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x19114)
0000000000006ae3         sub        rsp, 0x8
0000000000006ae7         mul        rsi
0000000000006aea         seto       dl
0000000000006aed         test       rax, rax
0000000000006af0         js         loc_6b09

0000000000006af2         movzx      edx, dl
0000000000006af5         test       rdx, rdx
0000000000006af8         jne        loc_6b09

0000000000006afa         call       j_calloc                                    ; calloc
0000000000006aff         test       rax, rax
0000000000006b02         je         loc_6b09

0000000000006b04         add        rsp, 0x8
0000000000006b08         ret
                        ; endp

                     loc_6b09:
0000000000006b09         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
0000000000006b0e         nop                                                    ; End of unwind block (FDE at 0x19114)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmemdup:
0000000000006b10         push       rbp                                         ; Begin of unwind block (FDE at 0x19130), CODE XREF=load_buffer.part.5+726, clone_quoting_options+40
0000000000006b11         push       rbx
0000000000006b12         mov        rbp, rdi
0000000000006b15         mov        rdi, rsi
0000000000006b18         mov        rbx, rsi
0000000000006b1b         sub        rsp, 0x8
0000000000006b1f         call       xmalloc                                     ; xmalloc
0000000000006b24         add        rsp, 0x8
0000000000006b28         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000006b2b         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
0000000000006b2e         pop        rbx
0000000000006b2f         pop        rbp
0000000000006b30         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006b33         jmp        j_memcpy                                    ; memcpy
                        ; endp
0000000000006b38         align      64                                          ; End of unwind block (FDE at 0x19130)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
0000000000006b40         push       rbx                                         ; Begin of unwind block (FDE at 0x19158)
0000000000006b41         mov        rbx, rdi
0000000000006b44         call       j_strlen                                    ; strlen
0000000000006b49         mov        rdi, rbx
0000000000006b4c         lea        rsi, qword [rax+1]
0000000000006b50         pop        rbx
0000000000006b51         jmp        xmemdup                                     ; xmemdup
                        ; endp
0000000000006b53         align      32                                          ; End of unwind block (FDE at 0x19158)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     xnumtoimax:
0000000000006b60         push       r15                                         ; Begin of unwind block (FDE at 0x19174), CODE XREF=xdectoimax+23
0000000000006b62         push       r14
0000000000006b64         mov        r15, rcx
0000000000006b67         push       r13
0000000000006b69         push       r12
0000000000006b6b         mov        r14, rdx
0000000000006b6e         push       rbp
0000000000006b6f         push       rbx
0000000000006b70         mov        edx, esi
0000000000006b72         xor        esi, esi
0000000000006b74         mov        r12, rdi
0000000000006b77         mov        r13, r9
0000000000006b7a         sub        rsp, 0x18
0000000000006b7e         mov        rcx, rsp
0000000000006b81         mov        ebx, dword [rsp+0x48+arg_0]
0000000000006b85         mov        rax, qword [fs:0x28]
0000000000006b8e         mov        qword [rsp+0x48+var_40], rax
0000000000006b93         xor        eax, eax
0000000000006b95         call       xstrtoimax                                  ; xstrtoimax
0000000000006b9a         test       eax, eax
0000000000006b9c         jne        loc_6c30

0000000000006ba2         mov        rbp, qword [rsp+0x48+var_48]
0000000000006ba6         cmp        rbp, r14
0000000000006ba9         jl         loc_6bb0

0000000000006bab         cmp        rbp, r15
0000000000006bae         jle        loc_6c06

                     loc_6bb0:
0000000000006bb0         call       j___errno_location                          ; __errno_location, CODE XREF=xnumtoimax+73
0000000000006bb5         cmp        rbp, 0x3fffffff
0000000000006bbc         mov        r14, rax
0000000000006bbf         jle        loc_6c50

                     loc_6bc5:
0000000000006bc5         mov        dword [r14], 0x4b                           ; CODE XREF=xnumtoimax+221

                     loc_6bcc:
0000000000006bcc         mov        rdi, r12                                    ; CODE XREF=xnumtoimax+226, xnumtoimax+234, xnumtoimax+263
0000000000006bcf         call       quote                                       ; quote
0000000000006bd4         mov        esi, dword [r14]
0000000000006bd7         mov        r8, rax
0000000000006bda         mov        eax, 0x0
0000000000006bdf         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000006be6         mov        rcx, r13
0000000000006be9         cmp        esi, 0x16
0000000000006bec         cmove      esi, eax                                    ; argument "__errnum" for method j_error
0000000000006bef         test       ebx, ebx
0000000000006bf1         mov        eax, 0x1
0000000000006bf6         cmove      ebx, eax
0000000000006bf9         xor        eax, eax
0000000000006bfb         mov        edi, ebx                                    ; argument "__status" for method j_error
0000000000006bfd         call       j_error                                     ; error
0000000000006c02         mov        rbp, qword [rsp+0x48+var_48]

                     loc_6c06:
0000000000006c06         mov        rdx, qword [rsp+0x48+var_40]                ; CODE XREF=xnumtoimax+78
0000000000006c0b         xor        rdx, qword [fs:0x28]
0000000000006c14         mov        rax, rbp
0000000000006c17         jne        loc_6c6c

0000000000006c19         add        rsp, 0x18
0000000000006c1d         pop        rbx
0000000000006c1e         pop        rbp
0000000000006c1f         pop        r12
0000000000006c21         pop        r13
0000000000006c23         pop        r14
0000000000006c25         pop        r15
0000000000006c27         ret
                        ; endp
0000000000006c28         align      16

                     loc_6c30:
0000000000006c30         mov        ebp, eax                                    ; CODE XREF=xnumtoimax+60
0000000000006c32         call       j___errno_location                          ; __errno_location
0000000000006c37         cmp        ebp, 0x1
0000000000006c3a         mov        r14, rax
0000000000006c3d         je         loc_6bc5

0000000000006c3f         cmp        ebp, 0x3
0000000000006c42         jne        loc_6bcc

0000000000006c44         mov        dword [rax], 0x0
0000000000006c4a         jmp        loc_6bcc
0000000000006c4c         align      16

                     loc_6c50:
0000000000006c50         cmp        rbp, 0xffffffffbfffffff                     ; CODE XREF=xnumtoimax+95
0000000000006c57         mov        eax, 0x22
0000000000006c5c         mov        edx, 0x4b
0000000000006c61         cmovle     eax, edx
0000000000006c64         mov        dword [r14], eax
0000000000006c67         jmp        loc_6bcc

                     loc_6c6c:
0000000000006c6c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xnumtoimax+183
                        ; endp
0000000000006c71         align      128                                         ; End of unwind block (FDE at 0x19174)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xdectoimax:
0000000000006c80         sub        rsp, 0x10                                   ; Begin of unwind block (FDE at 0x191c0), CODE XREF=main+387
0000000000006c84         push       r9
0000000000006c86         mov        r9, r8
0000000000006c89         mov        r8, rcx
0000000000006c8c         mov        rcx, rdx
0000000000006c8f         mov        rdx, rsi
0000000000006c92         mov        esi, 0xa
0000000000006c97         call       xnumtoimax                                  ; xnumtoimax
0000000000006c9c         add        rsp, 0x18
0000000000006ca0         ret
                        ; endp
0000000000006ca1         align      16                                          ; End of unwind block (FDE at 0x191c0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoimax:
0000000000006cb0         push       r15                                         ; Begin of unwind block (FDE at 0x191dc), CODE XREF=main+1219, xnumtoimax+53
0000000000006cb2         push       r14
0000000000006cb4         push       r13
0000000000006cb6         push       r12
0000000000006cb8         push       rbp
0000000000006cb9         push       rbx
0000000000006cba         sub        rsp, 0x28
0000000000006cbe         mov        rax, qword [fs:0x28]
0000000000006cc7         mov        qword [rsp+0x58+var_40], rax
0000000000006ccc         xor        eax, eax
0000000000006cce         cmp        edx, 0x24
0000000000006cd1         ja         loc_733f

0000000000006cd7         lea        rax, qword [rsp+0x58+var_48]
0000000000006cdc         test       rsi, rsi
0000000000006cdf         mov        rbx, rsi
0000000000006ce2         mov        r12, rdi
0000000000006ce5         mov        ebp, edx
0000000000006ce7         mov        r14, rcx
0000000000006cea         cmove      rbx, rax
0000000000006cee         mov        r15, r8
0000000000006cf1         call       j___errno_location                          ; __errno_location
0000000000006cf6         xor        ecx, ecx
0000000000006cf8         mov        edx, ebp
0000000000006cfa         mov        dword [rax], 0x0
0000000000006d00         mov        rsi, rbx
0000000000006d03         mov        rdi, r12
0000000000006d06         mov        r13, rax
0000000000006d09         call       j___strtol_internal                         ; __strtol_internal
0000000000006d0e         mov        rcx, qword [rbx]
0000000000006d11         mov        rbp, rax
0000000000006d14         cmp        rcx, r12
0000000000006d17         je         loc_6d78

0000000000006d19         mov        eax, dword [r13]
0000000000006d1d         test       eax, eax
0000000000006d1f         jne        loc_6d60

0000000000006d21         xor        r12d, r12d

                     loc_6d24:
0000000000006d24         test       r15, r15                                    ; CODE XREF=xstrtoimax+193
0000000000006d27         je         loc_6d36

0000000000006d29         movzx      r13d, byte [rcx]
0000000000006d2d         test       r13b, r13b
0000000000006d30         jne        loc_6db3

                     loc_6d36:
0000000000006d36         mov        qword [r14], rbp                            ; CODE XREF=xstrtoimax+119, xstrtoimax+550

                     loc_6d39:
0000000000006d39         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoimax+185, xstrtoimax+227, xstrtoimax+249, xstrtoimax+383, xstrtoimax+1382
0000000000006d3e         xor        rdi, qword [fs:0x28]
0000000000006d47         mov        eax, r12d
0000000000006d4a         jne        loc_735e

0000000000006d50         add        rsp, 0x28
0000000000006d54         pop        rbx
0000000000006d55         pop        rbp
0000000000006d56         pop        r12
0000000000006d58         pop        r13
0000000000006d5a         pop        r14
0000000000006d5c         pop        r15
0000000000006d5e         ret
                        ; endp
0000000000006d5f         align      32

                     loc_6d60:
0000000000006d60         cmp        eax, 0x22                                   ; CODE XREF=xstrtoimax+111
0000000000006d63         mov        r12d, 0x4
0000000000006d69         jne        loc_6d39

0000000000006d6b         mov        r12d, 0x1
0000000000006d71         jmp        loc_6d24
0000000000006d73         align      8

                     loc_6d78:
0000000000006d78         test       r15, r15                                    ; CODE XREF=xstrtoimax+103
0000000000006d7b         je         loc_7210

0000000000006d81         movzx      r13d, byte [rcx]
0000000000006d85         mov        qword [rsp+0x58+var_50], rcx
0000000000006d8a         mov        r12d, 0x4
0000000000006d90         test       r13b, r13b
0000000000006d93         je         loc_6d39

0000000000006d95         movsx      esi, r13b                                   ; argument "__c" for method j_strchr
0000000000006d99         mov        rdi, r15                                    ; argument "__s" for method j_strchr
0000000000006d9c         call       j_strchr                                    ; strchr
0000000000006da1         test       rax, rax
0000000000006da4         mov        rcx, qword [rsp+0x58+var_50]
0000000000006da9         je         loc_6d39

0000000000006dab         mov        ebp, 0x1
0000000000006db0         xor        r12d, r12d

                     loc_6db3:
0000000000006db3         movsx      esi, r13b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoimax+128
0000000000006db7         mov        rdi, r15                                    ; argument "__s" for method j_strchr
0000000000006dba         mov        qword [rsp+0x58+var_50], rcx
0000000000006dbf         call       j_strchr                                    ; strchr
0000000000006dc4         test       rax, rax
0000000000006dc7         mov        rcx, qword [rsp+0x58+var_50]
0000000000006dcc         je         loc_6e28

0000000000006dce         lea        eax, dword [r13-0x45]
0000000000006dd2         cmp        al, 0x2f
0000000000006dd4         ja         loc_6e38

0000000000006dd6         movabs     rdx, 0x814400308945
0000000000006de0         bt         rdx, rax
0000000000006de4         jae        loc_6e38

0000000000006de6         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
0000000000006deb         mov        rdi, r15                                    ; argument "__s" for method j_strchr
0000000000006dee         mov        qword [rsp+0x58+var_50], rcx
0000000000006df3         call       j_strchr                                    ; strchr
0000000000006df8         test       rax, rax
0000000000006dfb         mov        rcx, qword [rsp+0x58+var_50]
0000000000006e00         je         loc_6e38

0000000000006e02         movzx      eax, byte [rcx+1]
0000000000006e06         cmp        al, 0x44
0000000000006e08         je         loc_6e16

0000000000006e0a         cmp        al, 0x69
0000000000006e0c         je         loc_72f8

0000000000006e12         cmp        al, 0x42
0000000000006e14         jne        loc_6e38

                     loc_6e16:
0000000000006e16         mov        edi, 0x2                                    ; CODE XREF=xstrtoimax+344
0000000000006e1b         mov        eax, 0x3e8
0000000000006e20         jmp        loc_6e42
0000000000006e22         align      8

                     loc_6e28:
0000000000006e28         mov        qword [r14], rbp                            ; case 52, CODE XREF=xstrtoimax+284, xstrtoimax+410, xstrtoimax+430
0000000000006e2b         or         r12d, 0x2
0000000000006e2f         jmp        loc_6d39
0000000000006e34         align      8

                     loc_6e38:
0000000000006e38         mov        edi, 0x1                                    ; CODE XREF=xstrtoimax+292, xstrtoimax+308, xstrtoimax+336, xstrtoimax+356
0000000000006e3d         mov        eax, 0x400

                     loc_6e42:
0000000000006e42         sub        r13d, 0x42                                  ; CODE XREF=xstrtoimax+368, xstrtoimax+1627
0000000000006e46         cmp        r13b, 0x35
0000000000006e4a         ja         loc_6e28

0000000000006e4c         lea        rsi, qword [switch_table_17438]             ; switch_table_17438
0000000000006e53         movzx      r13d, r13b
0000000000006e57         movsxd     rdx, dword [rsi+r13*4]
0000000000006e5b         add        rdx, rsi
0000000000006e5e         jmp        rdx                                         ; switch statement using table at 0x17438, with 54 cases, 0x6e28,0x6e60,0x6ec0,0x6ee0,0x6f10,0x6f40,0x6fb0,0x7020,0x7060,0x70c0,0x7128,0x7190,0x71c0

                     loc_6e60:
0000000000006e60         movabs     r8, 0x8000000000000000                      ; case 43, CODE XREF=xstrtoimax+430
0000000000006e6a         movsxd     rsi, eax
0000000000006e6d         mov        rax, r8
0000000000006e70         cqo
0000000000006e72         idiv       rsi
0000000000006e75         cmp        rbp, rax
0000000000006e78         mov        r9, rax
0000000000006e7b         jl         loc_7325

0000000000006e81         movabs     r10, 0x7fffffffffffffff
0000000000006e8b         mov        rax, r10
0000000000006e8e         cqo
0000000000006e90         idiv       rsi
0000000000006e93         cmp        rbp, rax
0000000000006e96         jg         loc_7332

0000000000006e9c         imul       rbp, rsi
0000000000006ea0         cmp        r9, rbp
0000000000006ea3         jg         loc_7325

0000000000006ea9         cmp        rax, rbp
0000000000006eac         jl         loc_7332

0000000000006eb2         imul       rbp, rsi
0000000000006eb6         xor        eax, eax

                     loc_6eb8:
0000000000006eb8         or         r12d, eax                                   ; CODE XREF=xstrtoimax+1661, xstrtoimax+1674
0000000000006ebb         nop        dword [rax+rax]

                     loc_6ec0:
0000000000006ec0         movsxd     rax, edi                                    ; case 33, CODE XREF=xstrtoimax+430, xstrtoimax+601, xstrtoimax+650, xstrtoimax+935, xstrtoimax+1027, xstrtoimax+1290, xstrtoimax+1408, xstrtoimax+1600
0000000000006ec3         add        rcx, rax
0000000000006ec6         mov        eax, r12d
0000000000006ec9         or         eax, 0x2
0000000000006ecc         mov        qword [rbx], rcx
0000000000006ecf         cmp        byte [rcx], 0x0
0000000000006ed2         cmovne     r12d, eax
0000000000006ed6         jmp        loc_6d36
0000000000006edb         align      32

                     loc_6ee0:
0000000000006ee0         movabs     rax, 0xc000000000000000                     ; case 53, CODE XREF=xstrtoimax+430
0000000000006eea         cmp        rbp, rax
0000000000006eed         jl         loc_7220

0000000000006ef3         movabs     rax, 0x3fffffffffffffff
0000000000006efd         cmp        rbp, rax
0000000000006f00         jg         loc_72e0

0000000000006f06         add        rbp, rbp
0000000000006f09         jmp        loc_6ec0
0000000000006f0b         align      16

                     loc_6f10:
0000000000006f10         movabs     rax, 0xffc0000000000000                     ; case 32, CODE XREF=xstrtoimax+430
0000000000006f1a         cmp        rbp, rax
0000000000006f1d         jl         loc_7220

0000000000006f23         movabs     rax, 0x3fffffffffffff
0000000000006f2d         cmp        rbp, rax
0000000000006f30         jg         loc_72e0

0000000000006f36         shl        rbp, 0x9
0000000000006f3a         jmp        loc_6ec0
0000000000006f3c         align      64

                     loc_6f40:
0000000000006f40         movsxd     rsi, eax                                    ; case 24, CODE XREF=xstrtoimax+430
0000000000006f43         movabs     rax, 0x8000000000000000
0000000000006f4d         mov        r8d, 0x7
0000000000006f53         cqo
0000000000006f55         xor        r11d, r11d
0000000000006f58         movabs     r9, 0x7fffffffffffffff
0000000000006f62         idiv       rsi
0000000000006f65         mov        r10, rax
0000000000006f68         jmp        loc_6f8f
0000000000006f6a         align      16

                     loc_6f70:
0000000000006f70         mov        rax, r9                                     ; CODE XREF=xstrtoimax+738
0000000000006f73         cqo
0000000000006f75         idiv       rsi
0000000000006f78         cmp        rax, rbp
0000000000006f7b         jl         loc_7268

0000000000006f81         imul       rbp, rsi

                     loc_6f85:
0000000000006f85         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+756, xstrtoimax+1480
0000000000006f89         je         loc_70b0

                     loc_6f8f:
0000000000006f8f         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+696
0000000000006f92         jle        loc_6f70

0000000000006f94         mov        r11d, 0x1
0000000000006f9a         movabs     rbp, 0x8000000000000000
0000000000006fa4         jmp        loc_6f85
0000000000006fa6         align      16

                     loc_6fb0:
0000000000006fb0         movsxd     rsi, eax                                    ; case 23, CODE XREF=xstrtoimax+430
0000000000006fb3         movabs     rax, 0x8000000000000000
0000000000006fbd         mov        r8d, 0x8
0000000000006fc3         cqo
0000000000006fc5         xor        r11d, r11d
0000000000006fc8         movabs     r9, 0x7fffffffffffffff
0000000000006fd2         idiv       rsi
0000000000006fd5         mov        r10, rax
0000000000006fd8         jmp        loc_6fff
0000000000006fda         align      32

                     loc_6fe0:
0000000000006fe0         mov        rax, r9                                     ; CODE XREF=xstrtoimax+850
0000000000006fe3         cqo
0000000000006fe5         idiv       rsi
0000000000006fe8         cmp        rax, rbp
0000000000006feb         jl         loc_7238

0000000000006ff1         imul       rbp, rsi

                     loc_6ff5:
0000000000006ff5         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+868, xstrtoimax+1432
0000000000006ff9         je         loc_70b0

                     loc_6fff:
0000000000006fff         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+808
0000000000007002         jle        loc_6fe0

0000000000007004         mov        r11d, 0x1
000000000000700a         movabs     rbp, 0x8000000000000000
0000000000007014         jmp        loc_6ff5
0000000000007016         align      32

                     loc_7020:
0000000000007020         movabs     r8, 0x8000000000000000                      ; case 41, CODE XREF=xstrtoimax+430
000000000000702a         movsxd     rsi, eax
000000000000702d         mov        rax, r8
0000000000007030         cqo
0000000000007032         idiv       rsi
0000000000007035         cmp        rbp, rax
0000000000007038         jl         loc_7220

000000000000703e         sub        r8, 0x1
0000000000007042         mov        rax, r8
0000000000007045         cqo
0000000000007047         idiv       rsi
000000000000704a         cmp        rbp, rax
000000000000704d         jg         loc_72e0

0000000000007053         imul       rbp, rsi
0000000000007057         jmp        loc_6ec0
000000000000705c         align      32

                     loc_7060:
0000000000007060         movsxd     rsi, eax                                    ; case 37, CODE XREF=xstrtoimax+430
0000000000007063         movabs     rax, 0x8000000000000000
000000000000706d         mov        r8d, 0x3
0000000000007073         cqo
0000000000007075         xor        r11d, r11d
0000000000007078         movabs     r9, 0x7fffffffffffffff
0000000000007082         idiv       rsi
0000000000007085         mov        r10, rax

                     loc_7088:
0000000000007088         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1018
000000000000708b         jg         loc_7280

0000000000007091         mov        rax, r9
0000000000007094         cqo
0000000000007096         idiv       rsi
0000000000007099         cmp        rax, rbp
000000000000709c         jl         loc_7310

00000000000070a2         imul       rbp, rsi

                     loc_70a6:
00000000000070a6         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1504, xstrtoimax+1648
00000000000070aa         jne        loc_7088

00000000000070ac         nop        dword [rax]

                     loc_70b0:
00000000000070b0         or         r12d, r11d                                  ; CODE XREF=xstrtoimax+729, xstrtoimax+841, xstrtoimax+1113, xstrtoimax+1217, xstrtoimax+1368
00000000000070b3         jmp        loc_6ec0
00000000000070b8         align      64

                     loc_70c0:
00000000000070c0         movsxd     rsi, eax                                    ; case 3, CODE XREF=xstrtoimax+430
00000000000070c3         movabs     rax, 0x8000000000000000
00000000000070cd         mov        r8d, 0x6
00000000000070d3         cqo
00000000000070d5         xor        r11d, r11d
00000000000070d8         movabs     r9, 0x7fffffffffffffff
00000000000070e2         idiv       rsi
00000000000070e5         mov        r10, rax
00000000000070e8         jmp        loc_710b
00000000000070ea         align      16

                     loc_70f0:
00000000000070f0         mov        rax, r9                                     ; CODE XREF=xstrtoimax+1118
00000000000070f3         cqo
00000000000070f5         idiv       rsi
00000000000070f8         cmp        rax, rbp
00000000000070fb         jl         loc_7298

0000000000007101         imul       rbp, rsi

                     loc_7105:
0000000000007105         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1136, xstrtoimax+1528
0000000000007109         je         loc_70b0

                     loc_710b:
000000000000710b         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1080
000000000000710e         jle        loc_70f0

0000000000007110         mov        r11d, 0x1
0000000000007116         movabs     rbp, 0x8000000000000000
0000000000007120         jmp        loc_7105
0000000000007122         align      8

                     loc_7128:
0000000000007128         movsxd     rsi, eax                                    ; case 14, CODE XREF=xstrtoimax+430
000000000000712b         movabs     rax, 0x8000000000000000
0000000000007135         mov        r8d, 0x5
000000000000713b         cqo
000000000000713d         xor        r11d, r11d
0000000000007140         movabs     r9, 0x7fffffffffffffff
000000000000714a         idiv       rsi
000000000000714d         mov        r10, rax
0000000000007150         jmp        loc_7177
0000000000007152         align      8

                     loc_7158:
0000000000007158         mov        rax, r9                                     ; CODE XREF=xstrtoimax+1226
000000000000715b         cqo
000000000000715d         idiv       rsi
0000000000007160         cmp        rax, rbp
0000000000007163         jl         loc_72b0

0000000000007169         imul       rbp, rsi

                     loc_716d:
000000000000716d         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1244, xstrtoimax+1552
0000000000007171         je         loc_70b0

                     loc_7177:
0000000000007177         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1184
000000000000717a         jle        loc_7158

000000000000717c         mov        r11d, 0x1
0000000000007182         movabs     rbp, 0x8000000000000000
000000000000718c         jmp        loc_716d
000000000000718e         align      16

                     loc_7190:
0000000000007190         movabs     rax, 0xffe0000000000000                     ; case 0, CODE XREF=xstrtoimax+430
000000000000719a         cmp        rbp, rax
000000000000719d         jl         loc_7220

00000000000071a3         movabs     rax, 0x1fffffffffffff
00000000000071ad         cmp        rbp, rax
00000000000071b0         jg         loc_72e0

00000000000071b6         shl        rbp, 0xa
00000000000071ba         jmp        loc_6ec0
00000000000071bf         align      64

                     loc_71c0:
00000000000071c0         movsxd     rsi, eax                                    ; case 50, CODE XREF=xstrtoimax+430
00000000000071c3         movabs     rax, 0x8000000000000000
00000000000071cd         mov        r8d, 0x4
00000000000071d3         cqo
00000000000071d5         xor        r11d, r11d
00000000000071d8         movabs     r9, 0x7fffffffffffffff
00000000000071e2         idiv       rsi
00000000000071e5         mov        r10, rax

                     loc_71e8:
00000000000071e8         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1366
00000000000071eb         jg         loc_7250

00000000000071ed         mov        rax, r9
00000000000071f0         cqo
00000000000071f2         idiv       rsi
00000000000071f5         cmp        rax, rbp
00000000000071f8         jl         loc_72c8

00000000000071fe         imul       rbp, rsi

                     loc_7202:
0000000000007202         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1456, xstrtoimax+1576
0000000000007206         jne        loc_71e8

0000000000007208         jmp        loc_70b0
000000000000720d         align      16

                     loc_7210:
0000000000007210         mov        r12d, 0x4                                   ; CODE XREF=xstrtoimax+203
0000000000007216         jmp        loc_6d39
000000000000721b         align      32

                     loc_7220:
0000000000007220         mov        r12d, 0x1                                   ; CODE XREF=xstrtoimax+573, xstrtoimax+621, xstrtoimax+904, xstrtoimax+1261
0000000000007226         movabs     rbp, 0x8000000000000000
0000000000007230         jmp        loc_6ec0
0000000000007235         align      8

                     loc_7238:
0000000000007238         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+827
000000000000723e         movabs     rbp, 0x7fffffffffffffff
0000000000007248         jmp        loc_6ff5
000000000000724d         align      16

                     loc_7250:
0000000000007250         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1339
0000000000007256         movabs     rbp, 0x8000000000000000
0000000000007260         jmp        loc_7202
0000000000007262         align      8

                     loc_7268:
0000000000007268         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+715
000000000000726e         movabs     rbp, 0x7fffffffffffffff
0000000000007278         jmp        loc_6f85
000000000000727d         align      128

                     loc_7280:
0000000000007280         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+987
0000000000007286         movabs     rbp, 0x8000000000000000
0000000000007290         jmp        loc_70a6
0000000000007295         align      8

                     loc_7298:
0000000000007298         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1099
000000000000729e         movabs     rbp, 0x7fffffffffffffff
00000000000072a8         jmp        loc_7105
00000000000072ad         align      16

                     loc_72b0:
00000000000072b0         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1203
00000000000072b6         movabs     rbp, 0x7fffffffffffffff
00000000000072c0         jmp        loc_716d
00000000000072c5         align      8

                     loc_72c8:
00000000000072c8         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1352
00000000000072ce         movabs     rbp, 0x7fffffffffffffff
00000000000072d8         jmp        loc_7202
00000000000072dd         align      32

                     loc_72e0:
00000000000072e0         mov        r12d, 0x1                                   ; CODE XREF=xstrtoimax+592, xstrtoimax+640, xstrtoimax+925, xstrtoimax+1280
00000000000072e6         movabs     rbp, 0x7fffffffffffffff
00000000000072f0         jmp        loc_6ec0
00000000000072f5         align      8

                     loc_72f8:
00000000000072f8         xor        edi, edi                                    ; CODE XREF=xstrtoimax+348
00000000000072fa         cmp        byte [rcx+2], 0x42
00000000000072fe         mov        eax, 0x400
0000000000007303         sete       dil
0000000000007307         lea        edi, dword [rdi+rdi+1]
000000000000730b         jmp        loc_6e42

                     loc_7310:
0000000000007310         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1004
0000000000007316         movabs     rbp, 0x7fffffffffffffff
0000000000007320         jmp        loc_70a6

                     loc_7325:
0000000000007325         mov        eax, 0x1                                    ; CODE XREF=xstrtoimax+459, xstrtoimax+499
000000000000732a         mov        rbp, r8
000000000000732d         jmp        loc_6eb8

                     loc_7332:
0000000000007332         mov        eax, 0x1                                    ; CODE XREF=xstrtoimax+486, xstrtoimax+508
0000000000007337         mov        rbp, r10
000000000000733a         jmp        loc_6eb8

                     loc_733f:
000000000000733f         lea        rcx, qword [__PRETTY_FUNCTION__.4162]       ; argument "__function" for method j___assert_fail, "xstrtoimax", CODE XREF=xstrtoimax+33
0000000000007346         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
000000000000734d         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
0000000000007354         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
0000000000007359         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_735e:
000000000000735e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoimax+154
                        ; endp
0000000000007363         align      16                                          ; End of unwind block (FDE at 0x191dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoumax:
0000000000007370         push       r15                                         ; Begin of unwind block (FDE at 0x1922c), CODE XREF=main+916, main+1800
0000000000007372         push       r14
0000000000007374         push       r13
0000000000007376         push       r12
0000000000007378         push       rbp
0000000000007379         push       rbx
000000000000737a         sub        rsp, 0x28
000000000000737e         mov        rax, qword [fs:0x28]
0000000000007387         mov        qword [rsp+0x58+var_40], rax
000000000000738c         xor        eax, eax
000000000000738e         cmp        edx, 0x24
0000000000007391         ja         loc_76f5

0000000000007397         lea        rax, qword [rsp+0x58+var_48]
000000000000739c         mov        r15, rsi
000000000000739f         test       rsi, rsi
00000000000073a2         mov        rbp, rdi
00000000000073a5         mov        dword [rsp+0x58+var_50], edx
00000000000073a9         mov        r14, rcx
00000000000073ac         mov        r13, r8
00000000000073af         cmove      r15, rax
00000000000073b3         call       j___errno_location                          ; __errno_location
00000000000073b8         mov        dword [rax], 0x0
00000000000073be         mov        r12, rax
00000000000073c1         movzx      ebx, byte [rbp]
00000000000073c5         call       j___ctype_b_loc                             ; __ctype_b_loc
00000000000073ca         mov        edx, dword [rsp+0x58+var_50]
00000000000073ce         mov        rsi, qword [rax]
00000000000073d1         mov        rax, rbp
00000000000073d4         jmp        loc_73e7
00000000000073d6         align      32

                     loc_73e0:
00000000000073e0         add        rax, 0x1                                    ; CODE XREF=xstrtoumax+127
00000000000073e4         movzx      ebx, byte [rax]

                     loc_73e7:
00000000000073e7         movzx      ecx, bl                                     ; CODE XREF=xstrtoumax+100
00000000000073ea         test       byte [rsi+rcx*2+1], 0x20
00000000000073ef         jne        loc_73e0

00000000000073f1         cmp        bl, 0x2d
00000000000073f4         je         loc_7448

00000000000073f6         xor        ecx, ecx
00000000000073f8         mov        rsi, r15
00000000000073fb         mov        rdi, rbp
00000000000073fe         call       j___strtoul_internal                        ; __strtoul_internal
0000000000007403         mov        rcx, qword [r15]
0000000000007406         mov        rbx, rax
0000000000007409         cmp        rcx, rbp
000000000000740c         je         loc_7438

000000000000740e         mov        eax, dword [r12]
0000000000007412         test       eax, eax
0000000000007414         je         loc_7478

0000000000007416         cmp        eax, 0x22
0000000000007419         mov        ebp, 0x1
000000000000741e         jne        loc_7448

                     loc_7420:
0000000000007420         test       r13, r13                                    ; CODE XREF=xstrtoumax+266
0000000000007423         je         loc_742e

0000000000007425         movzx      r12d, byte [rcx]
0000000000007429         test       r12b, r12b
000000000000742c         jne        loc_74a7

                     loc_742e:
000000000000742e         mov        qword [r14], rbx                            ; CODE XREF=xstrtoumax+179
0000000000007431         jmp        loc_744d
0000000000007433         align      8

                     loc_7438:
0000000000007438         test       r13, r13                                    ; CODE XREF=xstrtoumax+156
000000000000743b         mov        qword [rsp+0x58+var_50], rcx
0000000000007440         jne        loc_7480

0000000000007442         nop        word [rax+rax]

                     loc_7448:
0000000000007448         mov        ebp, 0x4                                    ; CODE XREF=xstrtoumax+132, xstrtoumax+174, xstrtoumax+280, xstrtoumax+309

                     loc_744d:
000000000000744d         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoumax+193, xstrtoumax+535, xstrtoumax+546
0000000000007452         xor        rdi, qword [fs:0x28]
000000000000745b         mov        eax, ebp
000000000000745d         jne        loc_76f0

0000000000007463         add        rsp, 0x28
0000000000007467         pop        rbx
0000000000007468         pop        rbp
0000000000007469         pop        r12
000000000000746b         pop        r13
000000000000746d         pop        r14
000000000000746f         pop        r15
0000000000007471         ret
                        ; endp
0000000000007472         align      8

                     loc_7478:
0000000000007478         xor        ebp, ebp                                    ; CODE XREF=xstrtoumax+164
000000000000747a         jmp        loc_7420
000000000000747c         align      128

                     loc_7480:
0000000000007480         movzx      r12d, byte [rbp]                            ; CODE XREF=xstrtoumax+208
0000000000007485         test       r12b, r12b
0000000000007488         je         loc_7448

000000000000748a         movsx      esi, r12b                                   ; argument "__c" for method j_strchr
000000000000748e         mov        rdi, r13                                    ; argument "__s" for method j_strchr
0000000000007491         xor        ebp, ebp
0000000000007493         call       j_strchr                                    ; strchr
0000000000007498         test       rax, rax
000000000000749b         mov        ebx, 0x1
00000000000074a0         mov        rcx, qword [rsp+0x58+var_50]
00000000000074a5         je         loc_7448

                     loc_74a7:
00000000000074a7         movsx      esi, r12b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoumax+188
00000000000074ab         mov        rdi, r13                                    ; argument "__s" for method j_strchr
00000000000074ae         mov        qword [rsp+0x58+var_50], rcx
00000000000074b3         call       j_strchr                                    ; strchr
00000000000074b8         test       rax, rax
00000000000074bb         mov        rcx, qword [rsp+0x58+var_50]
00000000000074c0         je         loc_758c

00000000000074c6         lea        eax, dword [r12-0x45]
00000000000074cb         cmp        al, 0x2f
00000000000074cd         ja         loc_7520

00000000000074cf         movabs     rdx, 0x814400308945
00000000000074d9         bt         rdx, rax
00000000000074dd         jae        loc_7520

00000000000074df         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
00000000000074e4         mov        rdi, r13                                    ; argument "__s" for method j_strchr
00000000000074e7         mov        qword [rsp+0x58+var_50], rcx
00000000000074ec         call       j_strchr                                    ; strchr
00000000000074f1         test       rax, rax
00000000000074f4         mov        rcx, qword [rsp+0x58+var_50]
00000000000074f9         je         loc_7520

00000000000074fb         movzx      eax, byte [rcx+1]
00000000000074ff         cmp        al, 0x44
0000000000007501         je         loc_750f

0000000000007503         cmp        al, 0x69
0000000000007505         je         loc_76d8

000000000000750b         cmp        al, 0x42
000000000000750d         jne        loc_7520

                     loc_750f:
000000000000750f         mov        edi, 0x2                                    ; CODE XREF=xstrtoumax+401
0000000000007514         mov        esi, 0x3e8
0000000000007519         jmp        loc_752a
000000000000751b         align      32

                     loc_7520:
0000000000007520         mov        edi, 0x1                                    ; CODE XREF=xstrtoumax+349, xstrtoumax+365, xstrtoumax+393, xstrtoumax+413
0000000000007525         mov        esi, 0x400

                     loc_752a:
000000000000752a         sub        r12d, 0x42                                  ; CODE XREF=xstrtoumax+425, xstrtoumax+891
000000000000752e         cmp        r12b, 0x35
0000000000007532         ja         loc_758c

0000000000007534         lea        rdx, qword [switch_table_17520]             ; switch_table_17520
000000000000753b         movzx      r12d, r12b
000000000000753f         movsxd     rax, dword [rdx+r12*4]
0000000000007543         add        rax, rdx
0000000000007546         jmp        rax                                         ; switch statement using table at 0x17520, with 54 cases, 0x7548,0x7570,0x758c,0x7597,0x75ad,0x75c4,0x75ea,0x760f,0x762f,0x7650,0x7673,0x7696,0x76ac

                     loc_7548:
0000000000007548         mov        rax, rbx                                    ; case 43, CODE XREF=xstrtoumax+470
000000000000754b         mul        rsi
000000000000754e         jo         loc_7741

0000000000007554         xor        r8d, r8d

                     loc_7557:
0000000000007557         mul        rsi                                         ; CODE XREF=xstrtoumax+846, xstrtoumax+862, xstrtoumax+987
000000000000755a         jo         loc_7732

0000000000007560         mov        rbx, rax

                     loc_7563:
0000000000007563         or         ebp, r8d                                    ; CODE XREF=xstrtoumax+972
0000000000007566         nop        word [cs:rax+rax]

                     loc_7570:
0000000000007570         movsxd     rdi, edi                                    ; case 33, CODE XREF=xstrtoumax+470, xstrtoumax+571, xstrtoumax+594, xstrtoumax+632, xstrtoumax+712, xstrtoumax+727, xstrtoumax+823
0000000000007573         mov        eax, ebp
0000000000007575         add        rcx, rdi
0000000000007578         or         eax, 0x2
000000000000757b         mov        qword [r15], rcx
000000000000757e         cmp        byte [rcx], 0x0
0000000000007581         mov        qword [r14], rbx
0000000000007584         cmovne     ebp, eax
0000000000007587         jmp        loc_744d

                     loc_758c:
000000000000758c         mov        qword [r14], rbx                            ; case 52, CODE XREF=xstrtoumax+336, xstrtoumax+450, xstrtoumax+470
000000000000758f         or         ebp, 0x2
0000000000007592         jmp        loc_744d

                     loc_7597:
0000000000007597         mov        edx, 0x2                                    ; case 53, CODE XREF=xstrtoumax+470
000000000000759c         mov        rax, rdx
000000000000759f         mul        rbx
00000000000075a2         jo         loc_763e

00000000000075a8         add        rbx, rbx
00000000000075ab         jmp        loc_7570

                     loc_75ad:
00000000000075ad         mov        edx, 0x200                                  ; case 32, CODE XREF=xstrtoumax+470
00000000000075b2         mov        rax, rdx
00000000000075b5         mul        rbx
00000000000075b8         jo         loc_763e

00000000000075be         shl        rbx, 0x9
00000000000075c2         jmp        loc_7570

                     loc_75c4:
00000000000075c4         mov        r8d, 0x7                                    ; case 24, CODE XREF=xstrtoumax+470
00000000000075ca         xor        r9d, r9d
00000000000075cd         nop        dword [rax]

                     loc_75d0:
00000000000075d0         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+627
00000000000075d3         mul        rsi
00000000000075d6         mov        rbx, rax
00000000000075d9         jo         loc_776e

                     loc_75df:
00000000000075df         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1032
00000000000075e3         jne        loc_75d0

                     loc_75e5:
00000000000075e5         or         ebp, r9d                                    ; CODE XREF=xstrtoumax+669, xstrtoumax+701, xstrtoumax+766, xstrtoumax+801
00000000000075e8         jmp        loc_7570

                     loc_75ea:
00000000000075ea         mov        r8d, 0x8                                    ; case 23, CODE XREF=xstrtoumax+470
00000000000075f0         xor        r9d, r9d
00000000000075f3         nop        dword [rax+rax]

                     loc_75f8:
00000000000075f8         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+667
00000000000075fb         mul        rsi
00000000000075fe         mov        rbx, rax
0000000000007601         jo         loc_7750

                     loc_7607:
0000000000007607         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1002
000000000000760b         jne        loc_75f8

000000000000760d         jmp        loc_75e5

                     loc_760f:
000000000000760f         mov        r8d, 0x4                                    ; case 50, CODE XREF=xstrtoumax+470
0000000000007615         xor        r9d, r9d

                     loc_7618:
0000000000007618         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+699
000000000000761b         mul        rsi
000000000000761e         mov        rbx, rax
0000000000007621         jo         loc_7723

                     loc_7627:
0000000000007627         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+957
000000000000762b         jne        loc_7618

000000000000762d         jmp        loc_75e5

                     loc_762f:
000000000000762f         mov        rax, rbx                                    ; case 41, CODE XREF=xstrtoumax+470
0000000000007632         mul        rsi
0000000000007635         mov        rbx, rax
0000000000007638         jno        loc_7570

                     loc_763e:
000000000000763e         mov        ebp, 0x1                                    ; CODE XREF=xstrtoumax+562, xstrtoumax+584, xstrtoumax+817
0000000000007643         or         rbx, 0xffffffffffffffff
0000000000007647         jmp        loc_7570
000000000000764c         align      16

                     loc_7650:
0000000000007650         mov        r8d, 0x5                                    ; case 14, CODE XREF=xstrtoumax+470
0000000000007656         xor        r9d, r9d

                     loc_7659:
0000000000007659         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+764
000000000000765c         mul        rsi
000000000000765f         mov        rbx, rax
0000000000007662         jo         loc_775f

                     loc_7668:
0000000000007668         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1017
000000000000766c         jne        loc_7659

000000000000766e         jmp        loc_75e5

                     loc_7673:
0000000000007673         mov        r8d, 0x6                                    ; case 3, CODE XREF=xstrtoumax+470
0000000000007679         xor        r9d, r9d

                     loc_767c:
000000000000767c         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+799
000000000000767f         mul        rsi
0000000000007682         mov        rbx, rax
0000000000007685         jo         loc_7714

                     loc_768b:
000000000000768b         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+942
000000000000768f         jne        loc_767c

0000000000007691         jmp        loc_75e5

                     loc_7696:
0000000000007696         mov        edx, 0x400                                  ; case 0, CODE XREF=xstrtoumax+470
000000000000769b         mov        rax, rdx
000000000000769e         mul        rbx
00000000000076a1         jo         loc_763e

00000000000076a3         shl        rbx, 0xa
00000000000076a7         jmp        loc_7570

                     loc_76ac:
00000000000076ac         mov        rax, rbx                                    ; case 37, CODE XREF=xstrtoumax+470
00000000000076af         mul        rsi
00000000000076b2         jo         loc_777d

00000000000076b8         xor        r8d, r8d

                     loc_76bb:
00000000000076bb         mul        rsi                                         ; CODE XREF=xstrtoumax+1047
00000000000076be         jno        loc_7557

00000000000076c4         mov        r8d, 0x1
00000000000076ca         or         rax, 0xffffffffffffffff
00000000000076ce         jmp        loc_7557
00000000000076d3         align      8

                     loc_76d8:
00000000000076d8         xor        edi, edi                                    ; CODE XREF=xstrtoumax+405
00000000000076da         cmp        byte [rcx+2], 0x42
00000000000076de         mov        esi, 0x400
00000000000076e3         sete       dil
00000000000076e7         lea        edi, dword [rdi+rdi+1]
00000000000076eb         jmp        loc_752a

                     loc_76f0:
00000000000076f0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoumax+237
                        ; endp

                     loc_76f5:
00000000000076f5         lea        rcx, qword [__PRETTY_FUNCTION__.4162_175f8] ; argument "__function" for method j___assert_fail, "xstrtoumax", CODE XREF=xstrtoumax+33
00000000000076fc         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
0000000000007703         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
000000000000770a         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
000000000000770f         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_7714:
0000000000007714         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+789
000000000000771a         or         rbx, 0xffffffffffffffff
000000000000771e         jmp        loc_768b

                     loc_7723:
0000000000007723         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+689
0000000000007729         or         rbx, 0xffffffffffffffff
000000000000772d         jmp        loc_7627

                     loc_7732:
0000000000007732         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+490
0000000000007738         or         rbx, 0xffffffffffffffff
000000000000773c         jmp        loc_7563

                     loc_7741:
0000000000007741         or         rax, 0xffffffffffffffff                     ; CODE XREF=xstrtoumax+478
0000000000007745         mov        r8d, 0x1
000000000000774b         jmp        loc_7557

                     loc_7750:
0000000000007750         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+657
0000000000007756         or         rbx, 0xffffffffffffffff
000000000000775a         jmp        loc_7607

                     loc_775f:
000000000000775f         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+754
0000000000007765         or         rbx, 0xffffffffffffffff
0000000000007769         jmp        loc_7668

                     loc_776e:
000000000000776e         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+617
0000000000007774         or         rbx, 0xffffffffffffffff
0000000000007778         jmp        loc_75df

                     loc_777d:
000000000000777d         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+834
0000000000007783         or         rax, 0xffffffffffffffff
0000000000007787         jmp        loc_76bb
000000000000778c         align      16                                          ; End of unwind block (FDE at 0x1922c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
0000000000007790         push       r12                                         ; Begin of unwind block (FDE at 0x1927c), CODE XREF=close_output_file+53, fopen_safer+65, fopen_safer+134, close_stream+21
0000000000007792         push       rbp
0000000000007793         push       rbx
0000000000007794         mov        rbx, rdi
0000000000007797         call       j_fileno                                    ; fileno
000000000000779c         test       eax, eax
000000000000779e         mov        rdi, rbx
00000000000077a1         js         loc_77f7

00000000000077a3         call       j___freading                                ; __freading
00000000000077a8         test       eax, eax
00000000000077aa         jne        loc_77d8

                     loc_77ac:
00000000000077ac         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
00000000000077af         call       rpl_fflush                                  ; rpl_fflush
00000000000077b4         test       eax, eax
00000000000077b6         je         loc_77f4

00000000000077b8         call       j___errno_location                          ; __errno_location
00000000000077bd         mov        r12d, dword [rax]
00000000000077c0         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
00000000000077c3         mov        rbp, rax
00000000000077c6         call       j_fclose                                    ; fclose
00000000000077cb         test       r12d, r12d
00000000000077ce         jne        loc_7800

                     loc_77d0:
00000000000077d0         pop        rbx                                         ; CODE XREF=rpl_fclose+121
00000000000077d1         pop        rbp
00000000000077d2         pop        r12
00000000000077d4         ret
                        ; endp
00000000000077d5         align      8

                     loc_77d8:
00000000000077d8         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
00000000000077db         call       j_fileno                                    ; fileno
00000000000077e0         xor        esi, esi                                    ; argument "__offset" for method j_lseek
00000000000077e2         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
00000000000077e7         mov        edi, eax                                    ; argument "__fd" for method j_lseek
00000000000077e9         call       j_lseek                                     ; lseek
00000000000077ee         cmp        rax, 0xffffffffffffffff
00000000000077f2         jne        loc_77ac

                     loc_77f4:
00000000000077f4         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_77f7:
00000000000077f7         pop        rbx                                         ; CODE XREF=rpl_fclose+17
00000000000077f8         pop        rbp
00000000000077f9         pop        r12
00000000000077fb         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_7800:
0000000000007800         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
0000000000007804         mov        eax, 0xffffffff
0000000000007809         jmp        loc_77d0
000000000000780b         align      16                                          ; End of unwind block (FDE at 0x1927c)

                     rpl_fcntl:
0000000000007810         push       r12                                         ; Begin of unwind block (FDE at 0x192b4), CODE XREF=dup_safer+9
0000000000007812         push       rbp
0000000000007813         mov        ebp, edi
0000000000007815         push       rbx
0000000000007816         sub        rsp, 0x50
000000000000781a         mov        rax, qword [fs:0x28]
0000000000007823         mov        qword [rsp+0x68+var_50], rax
0000000000007828         xor        eax, eax
000000000000782a         lea        rax, qword [rsp+0x68+arg_0]
000000000000782f         test       esi, esi
0000000000007831         mov        qword [rsp+0x68+var_38], rdx
0000000000007836         mov        qword [rsp+0x68+var_30], rcx
000000000000783b         mov        qword [rsp+0x68+var_28], r8
0000000000007840         mov        qword [rsp+0x68+var_60], rax
0000000000007845         lea        rax, qword [rsp+0x68+var_48]
000000000000784a         mov        qword [rsp+0x68+var_20], r9
000000000000784f         mov        dword [rsp+0x68+var_68], 0x10
0000000000007856         mov        qword [rsp+0x68+var_58], rax
000000000000785b         je         loc_7a62

0000000000007861         cmp        esi, 0x406
0000000000007867         jne        loc_78b0

0000000000007869         mov        rax, qword [rsp+0x68+var_58]
000000000000786e         cmp        dword [have_dupfd_cloexec.3326], 0x0        ; have_dupfd_cloexec.3326
0000000000007875         mov        dword [rsp+0x68+var_68], 0x18
000000000000787c         mov        r12d, dword [rax+0x10]
0000000000007880         mov        edx, r12d
0000000000007883         js         loc_79b3

0000000000007889         xor        eax, eax
000000000000788b         mov        esi, 0x406                                  ; argument "__cmd" for method j_fcntl
0000000000007890         call       j_fcntl                                     ; fcntl
0000000000007895         test       eax, eax
0000000000007897         mov        ebx, eax
0000000000007899         js         loc_7a28

                     loc_789f:
000000000000789f         mov        dword [have_dupfd_cloexec.3326], 0x1        ; have_dupfd_cloexec.3326, CODE XREF=rpl_fcntl+544
00000000000078a9         jmp        loc_78f0
00000000000078ab         align      16

                     loc_78b0:
00000000000078b0         cmp        esi, 0xb                                    ; CODE XREF=rpl_fcntl+87
00000000000078b3         je         loc_78e0

00000000000078b5         jg         loc_7910

00000000000078b7         cmp        esi, 0x4
00000000000078ba         je         loc_7990

00000000000078c0         jg         loc_7980

00000000000078c6         cmp        esi, 0x2
00000000000078c9         je         loc_7990

00000000000078cf         jg         loc_78e0

00000000000078d1         cmp        esi, 0x1
00000000000078d4         jne        loc_7938

00000000000078d6         nop        word [cs:rax+rax]

                     loc_78e0:
00000000000078e0         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl, CODE XREF=rpl_fcntl+163, rpl_fcntl+191, rpl_fcntl+278, rpl_fcntl+344, rpl_fcntl+358, rpl_fcntl+371
00000000000078e2         xor        eax, eax
00000000000078e4         call       j_fcntl                                     ; fcntl
00000000000078e9         mov        ebx, eax
00000000000078eb         nop        dword [rax+rax]

                     loc_78f0:
00000000000078f0         mov        rcx, qword [rsp+0x68+var_50]                ; CODE XREF=rpl_fcntl+153, rpl_fcntl+327, rpl_fcntl+414, rpl_fcntl+432, rpl_fcntl+445, rpl_fcntl+491, rpl_fcntl+524, rpl_fcntl+568, rpl_fcntl+613
00000000000078f5         xor        rcx, qword [fs:0x28]
00000000000078fe         mov        eax, ebx
0000000000007900         jne        loc_7a5d

0000000000007906         add        rsp, 0x50
000000000000790a         pop        rbx
000000000000790b         pop        rbp
000000000000790c         pop        r12
000000000000790e         ret
                        ; endp
000000000000790f         align      16

                     loc_7910:
0000000000007910         cmp        esi, 0x407                                  ; CODE XREF=rpl_fcntl+165
0000000000007916         jg         loc_7960

0000000000007918         cmp        esi, 0x406
000000000000791e         jge        loc_7990

0000000000007920         cmp        esi, 0x401
0000000000007926         je         loc_78e0

0000000000007928         cmp        esi, 0x402
000000000000792e         je         loc_7990

0000000000007930         cmp        esi, 0x400
0000000000007936         je         loc_7990

                     loc_7938:
0000000000007938         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+196, rpl_fcntl+356, rpl_fcntl+382
000000000000793b         cmp        eax, 0x2f
000000000000793e         ja         loc_7a7a

0000000000007944         add        rax, qword [rsp+0x68+var_58]

                     loc_7949:
0000000000007949         mov        rdx, qword [rax]                            ; CODE XREF=rpl_fcntl+623
000000000000794c         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000794e         xor        eax, eax
0000000000007950         call       j_fcntl                                     ; fcntl
0000000000007955         mov        ebx, eax
0000000000007957         jmp        loc_78f0
0000000000007959         align      32

                     loc_7960:
0000000000007960         cmp        esi, 0x409                                  ; CODE XREF=rpl_fcntl+262
0000000000007966         je         loc_7990

0000000000007968         jl         loc_78e0

000000000000796e         cmp        esi, 0x40a
0000000000007974         jne        loc_7938

0000000000007976         jmp        loc_78e0
000000000000797b         align      128

                     loc_7980:
0000000000007980         cmp        esi, 0x9                                    ; CODE XREF=rpl_fcntl+176
0000000000007983         je         loc_78e0

0000000000007989         jg         loc_7990

000000000000798b         cmp        esi, 0x8
000000000000798e         jne        loc_7938

                     loc_7990:
0000000000007990         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+170, rpl_fcntl+185, rpl_fcntl+270, rpl_fcntl+286, rpl_fcntl+294, rpl_fcntl+342, rpl_fcntl+377
0000000000007993         cmp        eax, 0x2f
0000000000007996         ja         loc_7a84

000000000000799c         add        rax, qword [rsp+0x68+var_58]

                     loc_79a1:
00000000000079a1         mov        edx, dword [rax]                            ; CODE XREF=rpl_fcntl+633
00000000000079a3         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
00000000000079a5         xor        eax, eax
00000000000079a7         call       j_fcntl                                     ; fcntl
00000000000079ac         mov        ebx, eax
00000000000079ae         jmp        loc_78f0

                     loc_79b3:
00000000000079b3         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl, CODE XREF=rpl_fcntl+115
00000000000079b5         xor        eax, eax
00000000000079b7         call       j_fcntl                                     ; fcntl
00000000000079bc         test       eax, eax
00000000000079be         mov        ebx, eax
00000000000079c0         js         loc_78f0

00000000000079c6         cmp        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
00000000000079cd         jne        loc_78f0

                     loc_79d3:
00000000000079d3         xor        eax, eax                                    ; CODE XREF=rpl_fcntl+584
00000000000079d5         mov        esi, 0x1                                    ; argument "__cmd" for method j_fcntl
00000000000079da         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
00000000000079dc         call       j_fcntl                                     ; fcntl
00000000000079e1         test       eax, eax
00000000000079e3         js         loc_7a01

00000000000079e5         or         eax, 0x1
00000000000079e8         mov        esi, 0x2                                    ; argument "__cmd" for method j_fcntl
00000000000079ed         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
00000000000079ef         mov        edx, eax
00000000000079f1         xor        eax, eax
00000000000079f3         call       j_fcntl                                     ; fcntl
00000000000079f8         cmp        eax, 0xffffffff
00000000000079fb         jne        loc_78f0

                     loc_7a01:
0000000000007a01         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+467
0000000000007a06         mov        r12d, dword [rax]
0000000000007a09         mov        rbp, rax
0000000000007a0c         mov        edi, ebx                                    ; argument "__fd" for method j_close
0000000000007a0e         call       j_close                                     ; close
0000000000007a13         mov        ebx, 0xffffffff
0000000000007a18         mov        dword [rbp], r12d
0000000000007a1c         jmp        loc_78f0
0000000000007a21         align      8

                     loc_7a28:
0000000000007a28         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+137
0000000000007a2d         cmp        dword [rax], 0x16
0000000000007a30         jne        loc_789f

0000000000007a36         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
0000000000007a38         xor        eax, eax
0000000000007a3a         mov        edx, r12d
0000000000007a3d         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
0000000000007a3f         call       j_fcntl                                     ; fcntl
0000000000007a44         test       eax, eax
0000000000007a46         mov        ebx, eax
0000000000007a48         js         loc_78f0

0000000000007a4e         mov        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
0000000000007a58         jmp        loc_79d3

                     loc_7a5d:
0000000000007a5d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_fcntl+240
                        ; endp

                     loc_7a62:
0000000000007a62         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=rpl_fcntl+75
0000000000007a67         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
0000000000007a69         mov        edx, dword [rax+0x10]
0000000000007a6c         xor        eax, eax
0000000000007a6e         call       j_fcntl                                     ; fcntl
0000000000007a73         mov        ebx, eax
0000000000007a75         jmp        loc_78f0

                     loc_7a7a:
0000000000007a7a         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+302
0000000000007a7f         jmp        loc_7949

                     loc_7a84:
0000000000007a84         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+390
0000000000007a89         jmp        loc_79a1
0000000000007a8e         align      16                                          ; End of unwind block (FDE at 0x192b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
0000000000007a90         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x192ec), CODE XREF=rpl_fclose+31
0000000000007a93         push       rbx
0000000000007a94         mov        rbx, rdi
0000000000007a97         je         loc_7aaa

0000000000007a99         call       j___freading                                ; __freading
0000000000007a9e         test       eax, eax
0000000000007aa0         je         loc_7aaa

0000000000007aa2         test       dword [rbx], 0x100
0000000000007aa8         jne        loc_7ab8

                     loc_7aaa:
0000000000007aaa         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
0000000000007aad         pop        rbx
0000000000007aae         jmp        j_fflush                                    ; fflush
                        ; endp
0000000000007ab3         align      8

                     loc_7ab8:
0000000000007ab8         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
0000000000007abb         mov        edx, 0x1
0000000000007ac0         xor        esi, esi
0000000000007ac2         call       rpl_fseeko                                  ; rpl_fseeko
0000000000007ac7         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
0000000000007aca         pop        rbx
0000000000007acb         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
0000000000007ad0         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0x192ec), Begin of unwind block (FDE at 0x1930c), CODE XREF=rpl_fflush+50
0000000000007ad4         cmp        qword [rdi+0x10], rax
0000000000007ad8         je         loc_7ae0

                     j_j_fseeko:        // fseeko
0000000000007ada         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
0000000000007adf         align      32

                     loc_7ae0:
0000000000007ae0         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
0000000000007ae4         cmp        qword [rdi+0x28], rax
0000000000007ae8         jne        j_j_fseeko                                  ; fseeko

0000000000007aea         cmp        qword [rdi+0x48], 0x0
0000000000007aef         jne        j_j_fseeko                                  ; fseeko

0000000000007af1         push       r12
0000000000007af3         push       rbp
0000000000007af4         mov        r12d, edx
0000000000007af7         push       rbx
0000000000007af8         mov        rbp, rsi
0000000000007afb         mov        rbx, rdi
0000000000007afe         call       j_fileno                                    ; fileno
0000000000007b03         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
0000000000007b06         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
0000000000007b09         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000007b0b         call       j_lseek                                     ; lseek
0000000000007b10         cmp        rax, 0xffffffffffffffff
0000000000007b14         je         loc_7b22

0000000000007b16         and        dword [rbx], 0xffffffef
0000000000007b19         mov        qword [rbx+0x90], rax
0000000000007b20         xor        eax, eax

                     loc_7b22:
0000000000007b22         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
0000000000007b23         pop        rbp
0000000000007b24         pop        r12
0000000000007b26         ret
                        ; endp
0000000000007b27         align      16                                          ; End of unwind block (FDE at 0x1930c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
0000000000007b30         push       r13                                         ; Begin of unwind block (FDE at 0x1933c), CODE XREF=sub_4e20+534, build_wcs_buffer+111, build_wcs_upper_buffer+231, build_wcs_upper_buffer+608, re_string_reconstruct+586, re_string_reconstruct+1343, re_compile_fastmap_iter.isra.30+499, re_compile_fastmap_iter.isra.30+885
0000000000007b32         push       r12
0000000000007b34         mov        r13, rsi
0000000000007b37         push       rbp
0000000000007b38         push       rbx
0000000000007b39         mov        rbx, rdi
0000000000007b3c         mov        r12, rdx
0000000000007b3f         sub        rsp, 0x18
0000000000007b43         mov        rax, qword [fs:0x28]
0000000000007b4c         mov        qword [rsp+0x38+var_30], rax
0000000000007b51         xor        eax, eax
0000000000007b53         lea        rax, qword [rsp+0x38+var_34]
0000000000007b58         test       rdi, rdi
0000000000007b5b         cmove      rbx, rax
0000000000007b5f         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
0000000000007b62         call       j_mbrtowc                                   ; mbrtowc
0000000000007b67         cmp        rax, 0xfffffffffffffffd
0000000000007b6b         mov        rbp, rax
0000000000007b6e         jbe        loc_7b90

0000000000007b70         test       r12, r12
0000000000007b73         je         loc_7b90

0000000000007b75         xor        edi, edi
0000000000007b77         call       hard_locale                                 ; hard_locale
0000000000007b7c         test       al, al
0000000000007b7e         jne        loc_7b90

0000000000007b80         movzx      eax, byte [r13]
0000000000007b85         mov        ebp, 0x1
0000000000007b8a         mov        dword [rbx], eax
0000000000007b8c         nop        dword [rax]

                     loc_7b90:
0000000000007b90         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
0000000000007b95         xor        rdx, qword [fs:0x28]
0000000000007b9e         mov        rax, rbp
0000000000007ba1         jne        loc_7bae

0000000000007ba3         add        rsp, 0x18
0000000000007ba7         pop        rbx
0000000000007ba8         pop        rbp
0000000000007ba9         pop        r12
0000000000007bab         pop        r13
0000000000007bad         ret
                        ; endp

                     loc_7bae:
0000000000007bae         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
0000000000007bb3         align      64                                          ; End of unwind block (FDE at 0x1933c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     peek_token_bracket:
0000000000007bc0         mov        rax, qword [rsi+0x48]                       ; Begin of unwind block (FDE at 0x1937c), CODE XREF=parse_bracket_element.constprop.37+507, sub_13290+84, sub_13290+295, sub_13290+1382, sub_13290+1566, sub_13290+1659
0000000000007bc4         cmp        qword [rsi+0x68], rax
0000000000007bc8         jle        loc_7c20

0000000000007bca         mov        r8, qword [rsi+8]
0000000000007bce         cmp        dword [rsi+0x90], 0x1
0000000000007bd5         movzx      ecx, byte [r8+rax]
0000000000007bda         mov        byte [rdi], cl
0000000000007bdc         jle        loc_7bf3

0000000000007bde         cmp        rax, qword [rsi+0x30]
0000000000007be2         je         loc_7bf3

0000000000007be4         mov        r9, qword [rsi+0x10]
0000000000007be8         cmp        dword [r9+rax*4], 0xffffffff
0000000000007bed         je         loc_7c6f

                     loc_7bf3:
0000000000007bf3         cmp        cl, 0x5c                                    ; CODE XREF=peek_token_bracket+28, peek_token_bracket+34
0000000000007bf6         je         loc_7c60

0000000000007bf8         cmp        cl, 0x5b
0000000000007bfb         je         loc_7c30

0000000000007bfd         cmp        cl, 0x5d
0000000000007c00         je         loc_7ca0

0000000000007c06         cmp        cl, 0x5e
0000000000007c09         je         loc_7c90

0000000000007c0f         cmp        cl, 0x2d
0000000000007c12         jne        loc_7c6f

0000000000007c14         mov        byte [rdi+8], 0x16
0000000000007c18         mov        eax, 0x1
0000000000007c1d         ret
                        ; endp
0000000000007c1e         align      32

                     loc_7c20:
0000000000007c20         mov        byte [rdi+8], 0x2                           ; CODE XREF=peek_token_bracket+8
0000000000007c24         xor        eax, eax
0000000000007c26         ret
                        ; endp
0000000000007c27         align      16

                     loc_7c30:
0000000000007c30         lea        rcx, qword [rax+1]                          ; CODE XREF=peek_token_bracket+59
0000000000007c34         cmp        rcx, qword [rsi+0x58]
0000000000007c38         jge        loc_7c80

0000000000007c3a         movzx      eax, byte [r8+rax+1]
0000000000007c40         cmp        al, 0x3a
0000000000007c42         mov        byte [rdi], al
0000000000007c44         je         loc_7ce0

0000000000007c4a         cmp        al, 0x3d
0000000000007c4c         je         loc_7cd0

0000000000007c52         cmp        al, 0x2e
0000000000007c54         jne        loc_7c80

0000000000007c56         mov        byte [rdi+8], 0x1a
0000000000007c5a         mov        eax, 0x2
0000000000007c5f         ret
                        ; endp

                     loc_7c60:
0000000000007c60         and        edx, 0x1                                    ; CODE XREF=peek_token_bracket+54
0000000000007c63         je         loc_7c6f

0000000000007c65         lea        rdx, qword [rax+1]
0000000000007c69         cmp        rdx, qword [rsi+0x58]
0000000000007c6d         jl         loc_7cb0

                     loc_7c6f:
0000000000007c6f         mov        byte [rdi+8], 0x1                           ; CODE XREF=peek_token_bracket+45, peek_token_bracket+82, peek_token_bracket+163
0000000000007c73         mov        eax, 0x1
0000000000007c78         ret
                        ; endp
0000000000007c79         align      128

                     loc_7c80:
0000000000007c80         mov        byte [rdi+8], 0x1                           ; CODE XREF=peek_token_bracket+120, peek_token_bracket+148, peek_token_bracket+291
0000000000007c84         mov        byte [rdi], 0x5b
0000000000007c87         mov        eax, 0x1
0000000000007c8c         ret
                        ; endp
0000000000007c8d         align      16

                     loc_7c90:
0000000000007c90         mov        byte [rdi+8], 0x19                          ; CODE XREF=peek_token_bracket+73
0000000000007c94         mov        eax, 0x1
0000000000007c99         ret
                        ; endp
0000000000007c9a         align      32

                     loc_7ca0:
0000000000007ca0         mov        byte [rdi+8], 0x15                          ; CODE XREF=peek_token_bracket+64
0000000000007ca4         mov        eax, 0x1
0000000000007ca9         ret
                        ; endp
0000000000007caa         align      16

                     loc_7cb0:
0000000000007cb0         mov        qword [rsi+0x48], rdx                       ; CODE XREF=peek_token_bracket+173
0000000000007cb4         movzx      eax, byte [r8+rax+1]
0000000000007cba         mov        byte [rdi+8], 0x1
0000000000007cbe         mov        byte [rdi], al
0000000000007cc0         mov        eax, 0x1
0000000000007cc5         ret
                        ; endp
0000000000007cc6         align      16

                     loc_7cd0:
0000000000007cd0         mov        byte [rdi+8], 0x1c                          ; CODE XREF=peek_token_bracket+140
0000000000007cd4         mov        eax, 0x2
0000000000007cd9         ret
                        ; endp
0000000000007cda         align      32

                     loc_7ce0:
0000000000007ce0         and        edx, 0x4                                    ; CODE XREF=peek_token_bracket+132
0000000000007ce3         je         loc_7c80

0000000000007ce5         mov        byte [rdi+8], 0x1e
0000000000007ce9         mov        eax, 0x2
0000000000007cee         ret
                        ; endp
0000000000007cef         align      16                                          ; End of unwind block (FDE at 0x1937c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mark_opt_subexp:
0000000000007cf0         cmp        byte [rsi+0x30], 0x11                       ; Begin of unwind block (FDE at 0x19390), DATA XREF=sub_12b20+1284
0000000000007cf4         je         loc_7d00

                     loc_7cf6:
0000000000007cf6         xor        eax, eax                                    ; CODE XREF=mark_opt_subexp+20
0000000000007cf8         ret
                        ; endp
0000000000007cf9         align      256

                     loc_7d00:
0000000000007d00         cmp        rdi, qword [rsi+0x28]                       ; CODE XREF=mark_opt_subexp+4
0000000000007d04         jne        loc_7cf6

0000000000007d06         or         byte [rsi+0x32], 0x8
0000000000007d0a         xor        eax, eax
0000000000007d0c         ret
                        ; endp
0000000000007d0d         align      16                                          ; End of unwind block (FDE at 0x19390)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_52: int16_t, -82
        ;    var_58: int32_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120


                     check_dst_limits_calc_pos_1:
0000000000007d10         push       r15                                         ; Begin of unwind block (FDE at 0x193a4), CODE XREF=check_dst_limits_calc_pos_1+349, check_dst_limits_calc_pos+88
0000000000007d12         push       r14
0000000000007d14         mov        r9, rdx
0000000000007d17         push       r13
0000000000007d19         push       r12
0000000000007d1b         lea        rdx, qword [rcx+rcx*2]
0000000000007d1f         push       rbp
0000000000007d20         push       rbx
0000000000007d21         mov        r15d, esi
0000000000007d24         sub        rsp, 0x48
0000000000007d28         mov        r14, qword [rdi+0x98]
0000000000007d2f         mov        qword [rsp+0x78+var_78], rdi
0000000000007d33         mov        rax, qword [r14+0x30]
0000000000007d37         lea        r12, qword [rax+rdx*8]
0000000000007d3b         cmp        qword [r12+8], 0x0
0000000000007d41         jle        loc_7ed5

0000000000007d47         lea        rax, qword [r8+r8*4]
0000000000007d4b         mov        r11, rcx
0000000000007d4e         mov        ecx, r9d
0000000000007d51         mov        r10, r8
0000000000007d54         xor        ebx, ebx
0000000000007d56         mov        dword [rsp+0x78+var_58], esi
0000000000007d5a         shl        rax, 0x3
0000000000007d5e         mov        r15, r9
0000000000007d61         mov        qword [rsp+0x78+var_68], r11
0000000000007d66         mov        qword [rsp+0x78+var_50], rax
0000000000007d6b         mov        eax, 0x1
0000000000007d70         shl        rax, cl
0000000000007d73         mov        qword [rsp+0x78+var_60], rax
0000000000007d78         not        eax
0000000000007d7a         mov        word [rsp+0x78+var_52], ax
0000000000007d7f         mov        eax, esi
0000000000007d81         and        eax, 0x1
0000000000007d84         mov        dword [rsp+0x78+var_6C], eax
0000000000007d88         mov        eax, esi
0000000000007d8a         and        eax, 0x2
0000000000007d8d         mov        dword [rsp+0x78+var_70], eax
0000000000007d91         jmp        loc_7db5
0000000000007d93         align      8

                     loc_7d98:
0000000000007d98         cmp        dl, 0x9                                     ; CODE XREF=check_dst_limits_calc_pos_1+191
0000000000007d9b         je         loc_7ef0

0000000000007da1         cmp        dl, 0x4
0000000000007da4         je         loc_7df8

                     loc_7da6:
0000000000007da6         add        rbx, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos_1+199, check_dst_limits_calc_pos_1+204, check_dst_limits_calc_pos_1+236, check_dst_limits_calc_pos_1+486, check_dst_limits_calc_pos_1+495
0000000000007daa         cmp        qword [r12+8], rbx
0000000000007daf         jle        loc_7ed0

                     loc_7db5:
0000000000007db5         mov        rax, qword [r12+0x10]                       ; CODE XREF=check_dst_limits_calc_pos_1+129, check_dst_limits_calc_pos_1+436
0000000000007dba         mov        rbp, qword [rax+rbx*8]
0000000000007dbe         mov        rax, rbp
0000000000007dc1         shl        rax, 0x4
0000000000007dc5         add        rax, qword [r14]
0000000000007dc8         movzx      edx, byte [rax+8]
0000000000007dcc         cmp        dl, 0x8
0000000000007dcf         jne        loc_7d98

0000000000007dd1         mov        ecx, dword [rsp+0x78+var_6C]
0000000000007dd5         test       ecx, ecx
0000000000007dd7         je         loc_7da6

0000000000007dd9         cmp        qword [rax], r15
0000000000007ddc         jne        loc_7da6

                     loc_7dde:
0000000000007dde         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+357
0000000000007de2         mov        eax, 0xffffffff
0000000000007de7         pop        rbx
0000000000007de8         pop        rbp
0000000000007de9         pop        r12
0000000000007deb         pop        r13
0000000000007ded         pop        r14
0000000000007def         pop        r15
0000000000007df1         ret
                        ; endp
0000000000007df2         align      8

                     loc_7df8:
0000000000007df8         cmp        r10, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits_calc_pos_1+148
0000000000007dfc         je         loc_7da6

0000000000007dfe         mov        rax, qword [rsp+0x78+var_78]
0000000000007e02         mov        r13, qword [rsp+0x78+var_50]
0000000000007e07         mov        rdi, rbp
0000000000007e0a         mov        qword [rsp+0x78+var_48], r12
0000000000007e0f         mov        qword [rsp+0x78+var_40], rbx
0000000000007e14         mov        r12, r10
0000000000007e17         add        r13, qword [rax+0xd8]
0000000000007e1e         lea        rax, qword [rbp+rbp*2]
0000000000007e23         mov        rbp, r14
0000000000007e26         mov        r14, rdi
0000000000007e29         shl        rax, 0x3
0000000000007e2d         mov        rbx, rax

                     loc_7e30:
0000000000007e30         cmp        qword [r13], r14                            ; CODE XREF=check_dst_limits_calc_pos_1+409
0000000000007e34         jne        loc_7ea0

0000000000007e36         cmp        r15, 0x3f
0000000000007e3a         jg         loc_7e48

0000000000007e3c         movzx      eax, word [r13+0x22]
0000000000007e41         test       qword [rsp+0x78+var_60], rax
0000000000007e46         je         loc_7ea0

                     loc_7e48:
0000000000007e48         mov        rax, qword [rbp+0x28]                       ; CODE XREF=check_dst_limits_calc_pos_1+298
0000000000007e4c         mov        rax, qword [rax+rbx+0x10]
0000000000007e51         mov        rcx, qword [rax]
0000000000007e54         cmp        qword [rsp+0x78+var_68], rcx
0000000000007e59         je         loc_7f20

0000000000007e5f         mov        esi, dword [rsp+0x78+var_58]
0000000000007e63         mov        rdi, qword [rsp+0x78+var_78]
0000000000007e67         mov        r8, r12
0000000000007e6a         mov        rdx, r15
0000000000007e6d         call       check_dst_limits_calc_pos_1                 ; check_dst_limits_calc_pos_1
0000000000007e72         cmp        eax, 0xffffffff
0000000000007e75         je         loc_7dde

0000000000007e7b         test       eax, eax
0000000000007e7d         jne        loc_7e87

0000000000007e7f         mov        esi, dword [rsp+0x78+var_70]
0000000000007e83         test       esi, esi
0000000000007e85         jne        loc_7f05

                     loc_7e87:
0000000000007e87         cmp        r15, 0x3f                                   ; CODE XREF=check_dst_limits_calc_pos_1+365
0000000000007e8b         jg         loc_7ea0

0000000000007e8d         movzx      eax, word [rsp+0x78+var_52]
0000000000007e92         and        word [r13+0x22], ax
0000000000007e97         nop        word [rax+rax]

                     loc_7ea0:
0000000000007ea0         add        r13, 0x28                                   ; CODE XREF=check_dst_limits_calc_pos_1+292, check_dst_limits_calc_pos_1+310, check_dst_limits_calc_pos_1+379
0000000000007ea4         cmp        byte [r13-8], 0x0
0000000000007ea9         jne        loc_7e30

0000000000007eab         mov        rbx, qword [rsp+0x78+var_40]
0000000000007eb0         mov        r10, r12
0000000000007eb3         mov        r12, qword [rsp+0x78+var_48]
0000000000007eb8         mov        r14, rbp
0000000000007ebb         add        rbx, 0x1
0000000000007ebf         cmp        qword [r12+8], rbx
0000000000007ec4         jg         loc_7db5

0000000000007eca         nop        word [rax+rax]

                     loc_7ed0:
0000000000007ed0         mov        r15d, dword [rsp+0x78+var_58]               ; CODE XREF=check_dst_limits_calc_pos_1+159

                     loc_7ed5:
0000000000007ed5         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+49
0000000000007ed9         mov        eax, r15d
0000000000007edc         pop        rbx
0000000000007edd         sar        eax, 0x1
0000000000007edf         pop        rbp
0000000000007ee0         pop        r12
0000000000007ee2         pop        r13
0000000000007ee4         pop        r14
0000000000007ee6         pop        r15
0000000000007ee8         ret
                        ; endp
0000000000007ee9         align      16

                     loc_7ef0:
0000000000007ef0         mov        edx, dword [rsp+0x78+var_70]                ; CODE XREF=check_dst_limits_calc_pos_1+139
0000000000007ef4         test       edx, edx
0000000000007ef6         je         loc_7da6

0000000000007efc         cmp        qword [rax], r15
0000000000007eff         jne        loc_7da6

                     loc_7f05:
0000000000007f05         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+373
0000000000007f09         xor        eax, eax
0000000000007f0b         pop        rbx
0000000000007f0c         pop        rbp
0000000000007f0d         pop        r12
0000000000007f0f         pop        r13
0000000000007f11         pop        r14
0000000000007f13         pop        r15
0000000000007f15         ret
                        ; endp
0000000000007f16         align      32

                     loc_7f20:
0000000000007f20         mov        r15d, dword [rsp+0x78+var_58]               ; CODE XREF=check_dst_limits_calc_pos_1+329
0000000000007f25         add        rsp, 0x48
0000000000007f29         pop        rbx
0000000000007f2a         pop        rbp
0000000000007f2b         mov        eax, r15d
0000000000007f2e         and        eax, 0x1
0000000000007f31         pop        r12
0000000000007f33         neg        eax
0000000000007f35         pop        r13
0000000000007f37         pop        r14
0000000000007f39         pop        r15
0000000000007f3b         ret
                        ; endp
0000000000007f3c         align      64                                          ; End of unwind block (FDE at 0x193a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_dst_limits_calc_pos:
0000000000007f40         mov        rax, qword [rdi+0xd8]                       ; Begin of unwind block (FDE at 0x19438), CODE XREF=check_dst_limits.isra.13+430, check_dst_limits.isra.13+464
0000000000007f47         lea        rsi, qword [rsi+rsi*4]
0000000000007f4b         lea        rax, qword [rax+rsi*8]
0000000000007f4f         mov        r10, qword [rax+0x10]
0000000000007f53         cmp        r10, r8
0000000000007f56         jg         loc_7fa0

0000000000007f58         mov        rax, qword [rax+0x18]
0000000000007f5c         cmp        rax, r8
0000000000007f5f         jl         loc_7f80

0000000000007f61         xor        esi, esi
0000000000007f63         cmp        r10, r8
0000000000007f66         sete       sil
0000000000007f6a         or         esi, 0x2
0000000000007f6d         cmp        rax, r8
0000000000007f70         je         loc_7f95

0000000000007f72         xor        eax, eax
0000000000007f74         cmp        r10, r8
0000000000007f77         je         loc_7f90

0000000000007f79         ret
                        ; endp
0000000000007f7b         align      128

                     loc_7f80:
0000000000007f80         mov        eax, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos+31
0000000000007f85         ret
                        ; endp
0000000000007f86         align      16

                     loc_7f90:
0000000000007f90         mov        esi, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos+55

                     loc_7f95:
0000000000007f95         mov        r8, r9                                      ; CODE XREF=check_dst_limits_calc_pos+48
0000000000007f98         jmp        check_dst_limits_calc_pos_1                 ; check_dst_limits_calc_pos_1
                        ; endp
0000000000007f9d         align      32

                     loc_7fa0:
0000000000007fa0         mov        eax, 0xffffffff                             ; CODE XREF=check_dst_limits_calc_pos+22
0000000000007fa5         ret
                        ; endp
0000000000007fa6         align      16                                          ; End of unwind block (FDE at 0x19438)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     postorder:
0000000000007fb0         push       r12                                         ; Begin of unwind block (FDE at 0x1944c), CODE XREF=sub_12b20+93, sub_12b20+776, sub_12b20+1033, sub_12b20+1127, sub_12b20+1294, parse_branch+325, parse_branch+348, parse_branch+368, parse_reg_exp+317, re_compile_internal+1645, re_compile_internal+1672
0000000000007fb2         mov        r12, rsi
0000000000007fb5         push       rbp
0000000000007fb6         mov        rbp, rdx
0000000000007fb9         push       rbx
0000000000007fba         mov        rbx, rdi
0000000000007fbd         jmp        loc_7fc3
0000000000007fbf         align      64

                     loc_7fc0:
0000000000007fc0         mov        rbx, rax                                    ; CODE XREF=postorder+26, postorder+35, postorder+87

                     loc_7fc3:
0000000000007fc3         mov        rax, qword [rbx+8]                          ; CODE XREF=postorder+13
0000000000007fc7         test       rax, rax
0000000000007fca         jne        loc_7fc0

0000000000007fcc         mov        rax, qword [rbx+0x10]
0000000000007fd0         test       rax, rax
0000000000007fd3         jne        loc_7fc0

0000000000007fd5         mov        rsi, rbx
0000000000007fd8         mov        rdi, rbp
0000000000007fdb         call       r12
0000000000007fde         test       eax, eax
0000000000007fe0         jne        loc_8016

0000000000007fe2         nop        word [rax+rax]

                     loc_7fe8:
0000000000007fe8         mov        rdx, qword [rbx]                            ; CODE XREF=postorder+100
0000000000007feb         test       rdx, rdx
0000000000007fee         je         loc_8016

0000000000007ff0         mov        rax, qword [rdx+0x10]
0000000000007ff4         cmp        rax, rbx
0000000000007ff7         mov        rbx, rdx
0000000000007ffa         sete       sil
0000000000007ffe         test       rax, rax
0000000000008001         sete       cl
0000000000008004         or         sil, cl
0000000000008007         je         loc_7fc0

0000000000008009         mov        rsi, rbx
000000000000800c         mov        rdi, rbp
000000000000800f         call       r12
0000000000008012         test       eax, eax
0000000000008014         je         loc_7fe8

                     loc_8016:
0000000000008016         pop        rbx                                         ; CODE XREF=postorder+48, postorder+62
0000000000008017         pop        rbp
0000000000008018         pop        r12
000000000000801a         ret
                        ; endp
000000000000801b         align      32                                          ; End of unwind block (FDE at 0x1944c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     preorder:
0000000000008020         push       r12                                         ; Begin of unwind block (FDE at 0x19478), CODE XREF=re_compile_internal+1563, re_compile_internal+1699
0000000000008022         mov        r12, rsi
0000000000008025         push       rbp
0000000000008026         mov        rbp, rdx
0000000000008029         push       rbx
000000000000802a         mov        rbx, rdi
000000000000802d         jmp        loc_8033
000000000000802f         align      16

                     loc_8030:
0000000000008030         mov        rbx, rdx                                    ; CODE XREF=preorder+41, preorder+63, DATA XREF=fetch_number+115, fetch_number+120

                     loc_8033:
0000000000008033         mov        rsi, rbx                                    ; CODE XREF=preorder+13
0000000000008036         mov        rdi, rbp
0000000000008039         call       r12
000000000000803c         test       eax, eax
000000000000803e         jne        loc_806c

0000000000008040         mov        rdx, qword [rbx+8]
0000000000008044         xor        ecx, ecx
0000000000008046         test       rdx, rdx
0000000000008049         jne        loc_8030

000000000000804b         jmp        loc_8053
000000000000804d         align      16

                     loc_8050:
0000000000008050         mov        rbx, rdx                                    ; CODE XREF=preorder+74

                     loc_8053:
0000000000008053         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=preorder+43
0000000000008057         cmp        rdx, rcx
000000000000805a         je         loc_8061

000000000000805c         test       rdx, rdx
000000000000805f         jne        loc_8030

                     loc_8061:
0000000000008061         mov        rdx, qword [rbx]                            ; CODE XREF=preorder+58
0000000000008064         mov        rcx, rbx
0000000000008067         test       rdx, rdx
000000000000806a         jne        loc_8050

                     loc_806c:
000000000000806c         pop        rbx                                         ; CODE XREF=preorder+30
000000000000806d         pop        rbp
000000000000806e         pop        r12
0000000000008070         ret
                        ; endp
0000000000008071         align      128                                         ; End of unwind block (FDE at 0x19478)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_realloc_buffers:
0000000000008080         push       rbp                                         ; Begin of unwind block (FDE at 0x194a4), CODE XREF=extend_buffers+56, re_search_internal+587, re_compile_internal+789, re_compile_internal+1757
0000000000008081         push       rbx
0000000000008082         mov        rbp, rsi
0000000000008085         mov        rbx, rdi
0000000000008088         sub        rsp, 0x8
000000000000808c         cmp        dword [rdi+0x90], 0x1
0000000000008093         jle        loc_80dd

0000000000008095         movabs     rax, 0x1fffffffffffffff
000000000000809f         cmp        rsi, rax
00000000000080a2         ja         loc_8110

00000000000080a4         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_realloc
00000000000080a8         lea        rsi, qword [rsi*4]                          ; argument "__size" for method j_realloc
00000000000080b0         call       j_realloc                                   ; realloc
00000000000080b5         test       rax, rax
00000000000080b8         je         loc_8110

00000000000080ba         mov        rdi, qword [rbx+0x18]
00000000000080be         mov        qword [rbx+0x10], rax
00000000000080c2         test       rdi, rdi
00000000000080c5         je         loc_80dd

00000000000080c7         lea        rsi, qword [rbp*8]                          ; argument "__size" for method j_realloc
00000000000080cf         call       j_realloc                                   ; realloc
00000000000080d4         test       rax, rax
00000000000080d7         je         loc_8110

00000000000080d9         mov        qword [rbx+0x18], rax

                     loc_80dd:
00000000000080dd         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_realloc_buffers+19, re_string_realloc_buffers+69
00000000000080e4         jne        loc_80f8

                     loc_80e6:
00000000000080e6         mov        qword [rbx+0x40], rbp                       ; CODE XREF=re_string_realloc_buffers+141
00000000000080ea         add        rsp, 0x8
00000000000080ee         xor        eax, eax
00000000000080f0         pop        rbx
00000000000080f1         pop        rbp
00000000000080f2         ret
                        ; endp
00000000000080f3         align      8

                     loc_80f8:
00000000000080f8         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_realloc, CODE XREF=re_string_realloc_buffers+100
00000000000080fc         mov        rsi, rbp                                    ; argument "__size" for method j_realloc
00000000000080ff         call       j_realloc                                   ; realloc
0000000000008104         test       rax, rax
0000000000008107         je         loc_8110

0000000000008109         mov        qword [rbx+8], rax
000000000000810d         jmp        loc_80e6
000000000000810f         align      16

                     loc_8110:
0000000000008110         add        rsp, 0x8                                    ; CODE XREF=re_string_realloc_buffers+34, re_string_realloc_buffers+56, re_string_realloc_buffers+87, re_string_realloc_buffers+135
0000000000008114         mov        eax, 0xc
0000000000008119         pop        rbx
000000000000811a         pop        rbp
000000000000811b         ret
                        ; endp
000000000000811c         align      32                                          ; End of unwind block (FDE at 0x194a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_insert_last:
0000000000008120         push       rbp                                         ; Begin of unwind block (FDE at 0x194d8), CODE XREF=register_state+117, sub_14c00+481
0000000000008121         push       rbx
0000000000008122         mov        rbp, rsi
0000000000008125         mov        rbx, rdi
0000000000008128         sub        rsp, 0x8
000000000000812c         mov        rsi, qword [rdi+8]
0000000000008130         cmp        qword [rdi], rsi
0000000000008133         mov        rax, qword [rdi+0x10]
0000000000008137         je         loc_8158

                     loc_8139:
0000000000008139         lea        rdx, qword [rsi+1]                          ; CODE XREF=re_node_set_insert_last+92
000000000000813d         mov        qword [rbx+8], rdx
0000000000008141         mov        qword [rax+rsi*8], rbp
0000000000008145         mov        eax, 0x1

                     loc_814a:
000000000000814a         add        rsp, 0x8                                    ; CODE XREF=re_node_set_insert_last+98
000000000000814e         pop        rbx
000000000000814f         pop        rbp
0000000000008150         ret
                        ; endp
0000000000008151         align      8

                     loc_8158:
0000000000008158         add        rsi, 0x1                                    ; CODE XREF=re_node_set_insert_last+23
000000000000815c         lea        rdx, qword [rsi+rsi]
0000000000008160         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
0000000000008164         mov        qword [rdi], rdx
0000000000008167         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000000816a         call       j_realloc                                   ; realloc
000000000000816f         test       rax, rax
0000000000008172         je         loc_8180

0000000000008174         mov        qword [rbx+0x10], rax
0000000000008178         mov        rsi, qword [rbx+8]
000000000000817c         jmp        loc_8139
000000000000817e         align      128

                     loc_8180:
0000000000008180         xor        eax, eax                                    ; CODE XREF=re_node_set_insert_last+82
0000000000008182         jmp        loc_814a
0000000000008184         align      16                                          ; End of unwind block (FDE at 0x194d8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_insert:
0000000000008190         push       rbp                                         ; Begin of unwind block (FDE at 0x19504), CODE XREF=duplicate_node_closure+224, duplicate_node_closure+282, duplicate_node_closure+352, duplicate_node_closure+465, duplicate_node_closure+607, check_arrival_expand_ecl_sub+84, check_arrival_expand_ecl_sub+148, calc_eclosure_iter+360, calc_eclosure_iter+495, expand_bkref_cache+409, build_trtable+1657
0000000000008191         push       rbx
0000000000008192         mov        rbp, rsi
0000000000008195         mov        rbx, rdi
0000000000008198         sub        rsp, 0x8
000000000000819c         mov        rdx, qword [rdi]
000000000000819f         test       rdx, rdx
00000000000081a2         je         loc_81c8

00000000000081a4         mov        rsi, qword [rdi+8]
00000000000081a8         mov        rax, qword [rdi+0x10]
00000000000081ac         test       rsi, rsi
00000000000081af         jne        loc_8200

00000000000081b1         mov        qword [rax], rbp
00000000000081b4         add        qword [rdi+8], 0x1
00000000000081b9         mov        eax, 0x1

                     loc_81be:
00000000000081be         add        rsp, 0x8                                    ; CODE XREF=re_node_set_insert+177, re_node_set_insert+247, re_node_set_insert+295
00000000000081c2         pop        rbx
00000000000081c3         pop        rbp
00000000000081c4         ret
                        ; endp
00000000000081c5         align      8

                     loc_81c8:
00000000000081c8         mov        qword [rdi], 0x1                            ; CODE XREF=re_node_set_insert+18
00000000000081cf         mov        qword [rdi+8], 0x1
00000000000081d7         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
00000000000081dc         call       j_malloc                                    ; malloc
00000000000081e1         test       rax, rax
00000000000081e4         mov        qword [rbx+0x10], rax
00000000000081e8         je         loc_8278

00000000000081ee         mov        qword [rax], rbp
00000000000081f1         add        rsp, 0x8
00000000000081f5         mov        eax, 0x1
00000000000081fa         pop        rbx
00000000000081fb         pop        rbp
00000000000081fc         ret
                        ; endp
00000000000081fd         align      512

                     loc_8200:
0000000000008200         cmp        rdx, rsi                                    ; CODE XREF=re_node_set_insert+31
0000000000008203         je         loc_8290

                     loc_8209:
0000000000008209         cmp        qword [rax], rbp                            ; CODE XREF=re_node_set_insert+288
000000000000820c         lea        rdx, qword [rsi*8]
0000000000008214         jle        loc_8250

0000000000008216         test       rsi, rsi
0000000000008219         jle        loc_8233

000000000000821b         add        rdx, rax
000000000000821e         nop

                     loc_8220:
0000000000008220         mov        rcx, qword [rdx-8]                          ; CODE XREF=re_node_set_insert+159
0000000000008224         sub        rdx, 0x8
0000000000008228         mov        qword [rdx+8], rcx
000000000000822c         cmp        rax, rdx
000000000000822f         jne        loc_8220

0000000000008231         xor        edx, edx

                     loc_8233:
0000000000008233         mov        qword [rax+rdx], rbp                        ; CODE XREF=re_node_set_insert+137, re_node_set_insert+200, re_node_set_insert+226
0000000000008237         mov        eax, 0x1
000000000000823c         add        qword [rbx+8], 0x1
0000000000008241         jmp        loc_81be
0000000000008246         align      16

                     loc_8250:
0000000000008250         mov        rcx, qword [rax+rdx-8]                      ; CODE XREF=re_node_set_insert+132
0000000000008255         cmp        rbp, rcx
0000000000008258         jge        loc_8233

000000000000825a         nop        word [rax+rax]

                     loc_8260:
0000000000008260         mov        qword [rax+rdx], rcx                        ; CODE XREF=re_node_set_insert+224
0000000000008264         sub        rdx, 0x8
0000000000008268         mov        rcx, qword [rax+rdx-8]
000000000000826d         cmp        rcx, rbp
0000000000008270         jg         loc_8260

0000000000008272         jmp        loc_8233
0000000000008274         align      8

                     loc_8278:
0000000000008278         mov        qword [rbx+8], 0x0                          ; CODE XREF=re_node_set_insert+88
0000000000008280         mov        qword [rbx], 0x0
0000000000008287         jmp        loc_81be
000000000000828c         align      16

                     loc_8290:
0000000000008290         lea        rdx, qword [rsi+rsi]                        ; CODE XREF=re_node_set_insert+115
0000000000008294         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
0000000000008298         mov        qword [rdi], rdx
000000000000829b         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000000829e         call       j_realloc                                   ; realloc
00000000000082a3         test       rax, rax
00000000000082a6         je         loc_82b5

00000000000082a8         mov        qword [rbx+0x10], rax
00000000000082ac         mov        rsi, qword [rbx+8]
00000000000082b0         jmp        loc_8209

                     loc_82b5:
00000000000082b5         xor        eax, eax                                    ; CODE XREF=re_node_set_insert+278
00000000000082b7         jmp        loc_81be
00000000000082bc         align      64                                          ; End of unwind block (FDE at 0x19504)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     register_state:
00000000000082c0         push       r14                                         ; Begin of unwind block (FDE at 0x1953c), CODE XREF=re_acquire_state_context+513, re_acquire_state+390
00000000000082c2         push       r13
00000000000082c4         mov        r14, rdi
00000000000082c7         push       r12
00000000000082c9         push       rbp
00000000000082ca         mov        r12, rdx
00000000000082cd         push       rbx
00000000000082ce         mov        rbx, qword [rsi+0x10]
00000000000082d2         mov        rbp, rsi
00000000000082d5         mov        qword [rsi], rdx
00000000000082d8         mov        qword [rsi+0x28], 0x0
00000000000082e0         lea        r13, qword [rsi+0x20]
00000000000082e4         lea        rdi, qword [rbx*8]                          ; argument "__size" for method j_malloc
00000000000082ec         mov        qword [rsi+0x20], rbx
00000000000082f0         call       j_malloc                                    ; malloc
00000000000082f5         test       rax, rax
00000000000082f8         mov        qword [rbp+0x30], rax
00000000000082fc         je         loc_833e

00000000000082fe         test       rbx, rbx
0000000000008301         jle        loc_8350

0000000000008303         xor        ebx, ebx
0000000000008305         jmp        loc_831a
0000000000008307         align      16

                     loc_8310:
0000000000008310         add        rbx, 0x1                                    ; CODE XREF=register_state+112, register_state+124
0000000000008314         cmp        qword [rbp+0x10], rbx
0000000000008318         jle        loc_8350

                     loc_831a:
000000000000831a         mov        rax, qword [rbp+0x18]                       ; CODE XREF=register_state+69
000000000000831e         mov        rsi, qword [rax+rbx*8]
0000000000008322         mov        rax, rsi
0000000000008325         shl        rax, 0x4
0000000000008329         add        rax, qword [r14]
000000000000832c         test       byte [rax+8], 0x8
0000000000008330         jne        loc_8310

0000000000008332         mov        rdi, r13
0000000000008335         call       re_node_set_insert_last                     ; re_node_set_insert_last
000000000000833a         test       al, al
000000000000833c         jne        loc_8310

                     loc_833e:
000000000000833e         pop        rbx                                         ; CODE XREF=register_state+60, register_state+217
000000000000833f         mov        eax, 0xc
0000000000008344         pop        rbp
0000000000008345         pop        r12
0000000000008347         pop        r13
0000000000008349         pop        r14
000000000000834b         ret
                        ; endp
000000000000834c         align      16

                     loc_8350:
0000000000008350         and        r12, qword [r14+0x88]                       ; CODE XREF=register_state+65, register_state+88
0000000000008357         mov        rax, qword [r14+0x40]
000000000000835b         lea        rdx, qword [r12+r12*2]
000000000000835f         lea        rbx, qword [rax+rdx*8]
0000000000008363         mov        rdx, qword [rbx]
0000000000008366         cmp        qword [rbx+8], rdx
000000000000836a         mov        rax, qword [rbx+0x10]
000000000000836e         lea        rsi, qword [rdx+1]
0000000000008372         jle        loc_8386

                     loc_8374:
0000000000008374         mov        qword [rbx], rsi                            ; CODE XREF=register_state+234
0000000000008377         mov        qword [rax+rdx*8], rbp
000000000000837b         xor        eax, eax
000000000000837d         pop        rbx
000000000000837e         pop        rbp
000000000000837f         pop        r12
0000000000008381         pop        r13
0000000000008383         pop        r14
0000000000008385         ret
                        ; endp

                     loc_8386:
0000000000008386         lea        r12, qword [rsi+rsi]                        ; CODE XREF=register_state+178
000000000000838a         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000000838d         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
0000000000008391         call       j_realloc                                   ; realloc
0000000000008396         test       rax, rax
0000000000008399         je         loc_833e

000000000000839b         mov        rdx, qword [rbx]
000000000000839e         mov        qword [rbx+0x10], rax
00000000000083a2         mov        qword [rbx+8], r12
00000000000083a6         lea        rsi, qword [rdx+1]
00000000000083aa         jmp        loc_8374
00000000000083ac         align      16                                          ; End of unwind block (FDE at 0x1953c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     build_upper_buffer:
00000000000083b0         push       r12                                         ; Begin of unwind block (FDE at 0x1958c), CODE XREF=extend_buffers+320, re_string_reconstruct+1651, sub_14c00+1344
00000000000083b2         mov        r12, qword [rdi+0x58]
00000000000083b6         cmp        qword [rdi+0x40], r12
00000000000083ba         push       rbp
00000000000083bb         mov        rbp, rdi
00000000000083be         cmovle     r12, qword [rdi+0x40]
00000000000083c3         push       rbx
00000000000083c4         mov        rbx, qword [rdi+0x30]
00000000000083c8         cmp        r12, rbx
00000000000083cb         jle        loc_8405

00000000000083cd         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc
00000000000083d2         nop        word [rax+rax]

                     loc_83d8:
00000000000083d8         mov        rdx, qword [rbp]                            ; CODE XREF=build_upper_buffer+83
00000000000083dc         mov        rcx, qword [rbp+0x78]
00000000000083e0         add        rdx, rbx
00000000000083e3         add        rdx, qword [rbp+0x28]
00000000000083e7         test       rcx, rcx
00000000000083ea         movzx      edx, byte [rdx]
00000000000083ed         jne        loc_8418

                     loc_83ef:
00000000000083ef         mov        rsi, qword [rax]                            ; CODE XREF=build_upper_buffer+108
00000000000083f2         mov        rcx, qword [rbp+8]
00000000000083f6         mov        edx, dword [rsi+rdx*4]
00000000000083f9         mov        byte [rcx+rbx], dl
00000000000083fc         add        rbx, 0x1
0000000000008400         cmp        r12, rbx                                    ; DATA XREF=peek_token+600, peek_token+969
0000000000008403         jne        loc_83d8

                     loc_8405:
0000000000008405         mov        qword [rbp+0x30], rbx                       ; CODE XREF=build_upper_buffer+27
0000000000008409         mov        qword [rbp+0x38], rbx
000000000000840d         pop        rbx
000000000000840e         pop        rbp
000000000000840f         pop        r12
0000000000008411         ret
                        ; endp
0000000000008412         align      8

                     loc_8418:
0000000000008418         movzx      edx, byte [rcx+rdx]                         ; CODE XREF=build_upper_buffer+61
000000000000841c         jmp        loc_83ef
000000000000841e         align      32                                          ; End of unwind block (FDE at 0x1958c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_88: int8_t, -136
        ;    var_8C: int32_t, -140


                     build_wcs_buffer:
0000000000008420         push       r15                                         ; Begin of unwind block (FDE at 0x195bc), CODE XREF=extend_buffers+275, re_string_reconstruct+424, sub_14c00+1021
0000000000008422         push       r14
0000000000008424         push       r13
0000000000008426         push       r12
0000000000008428         push       rbp
0000000000008429         push       rbx
000000000000842a         mov        rbx, rdi
000000000000842d         sub        rsp, 0x68
0000000000008431         mov        r12, qword [rdi+0x58]
0000000000008435         mov        rbp, qword [rdi+0x30]
0000000000008439         mov        rax, qword [fs:0x28]
0000000000008442         mov        qword [rsp+0x98+var_40], rax
0000000000008447         xor        eax, eax
0000000000008449         cmp        qword [rdi+0x40], r12
000000000000844d         cmovle     r12, qword [rdi+0x40]
0000000000008452         cmp        r12, rbp
0000000000008455         jle        loc_84e4

000000000000845b         lea        r14, qword [rdi+0x20]
000000000000845f         lea        r13, qword [rsp+0x98+var_8C]
0000000000008464         nop        dword [rax]

                     loc_8468:
0000000000008468         mov        rdi, qword [rbx+0x78]                       ; CODE XREF=build_wcs_buffer+194, build_wcs_buffer+246
000000000000846c         mov        rdx, r12
000000000000846f         mov        r15, qword [rbx+0x20]
0000000000008473         sub        rdx, rbp
0000000000008476         test       rdi, rdi
0000000000008479         jne        loc_8560

000000000000847f         mov        rsi, qword [rbx+0x28]
0000000000008483         add        rsi, rbp
0000000000008486         add        rsi, qword [rbx]

                     loc_8489:
0000000000008489         mov        rcx, r14                                    ; CODE XREF=build_wcs_buffer+337, build_wcs_buffer+359, build_wcs_buffer+413
000000000000848c         mov        rdi, r13
000000000000848f         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000008494         lea        rdx, qword [rax-1]
0000000000008498         cmp        rdx, 0xfffffffffffffffd
000000000000849c         ja         loc_8530

00000000000084a2         cmp        rax, 0xfffffffffffffffe
00000000000084a6         mov        edx, dword [rsp+0x98+var_8C]
00000000000084aa         je         loc_8520

                     loc_84ac:
00000000000084ac         mov        rcx, qword [rbx+0x10]                       ; CODE XREF=build_wcs_buffer+311
00000000000084b0         lea        rsi, qword [rbp+1]
00000000000084b4         lea        rdi, qword [rbp*4]
00000000000084bc         mov        dword [rcx+rbp*4], edx
00000000000084bf         add        rbp, rax
00000000000084c2         cmp        rsi, rbp
00000000000084c5         jge        loc_8510

00000000000084c7         lea        rdx, qword [rcx+rdi+4]
00000000000084cc         lea        rax, qword [rcx+rbp*4]

                     loc_84d0:
00000000000084d0         mov        dword [rdx], 0xffffffff                     ; CODE XREF=build_wcs_buffer+189
00000000000084d6         add        rdx, 0x4
00000000000084da         cmp        rax, rdx
00000000000084dd         jne        loc_84d0

00000000000084df         cmp        rbp, r12
00000000000084e2         jl         loc_8468

                     loc_84e4:
00000000000084e4         mov        rax, qword [rsp+0x98+var_40]                ; CODE XREF=build_wcs_buffer+53, build_wcs_buffer+252, build_wcs_buffer+428
00000000000084e9         xor        rax, qword [fs:0x28]
00000000000084f2         mov        qword [rbx+0x30], rbp
00000000000084f6         mov        qword [rbx+0x38], rbp
00000000000084fa         jne        loc_85de

0000000000008500         add        rsp, 0x68
0000000000008504         pop        rbx
0000000000008505         pop        rbp
0000000000008506         pop        r12
0000000000008508         pop        r13
000000000000850a         pop        r14
000000000000850c         pop        r15
000000000000850e         ret
                        ; endp
000000000000850f         align      16

                     loc_8510:
0000000000008510         mov        rbp, rsi                                    ; CODE XREF=build_wcs_buffer+165
0000000000008513         cmp        rbp, r12
0000000000008516         jl         loc_8468

000000000000851c         jmp        loc_84e4
000000000000851e         align      32

                     loc_8520:
0000000000008520         mov        rax, qword [rbx+0x58]                       ; CODE XREF=build_wcs_buffer+138
0000000000008524         cmp        qword [rbx+0x40], rax
0000000000008528         jl         loc_85c8

000000000000852e         nop

                     loc_8530:
0000000000008530         mov        rax, qword [rbx]                            ; CODE XREF=build_wcs_buffer+124
0000000000008533         mov        rcx, qword [rbx+0x78]
0000000000008537         add        rax, rbp
000000000000853a         add        rax, qword [rbx+0x28]
000000000000853e         test       rcx, rcx
0000000000008541         movzx      edx, byte [rax]
0000000000008544         mov        dword [rsp+0x98+var_8C], edx
0000000000008548         jne        loc_85d1

                     loc_854e:
000000000000854e         mov        qword [rbx+0x20], r15                       ; CODE XREF=build_wcs_buffer+441
0000000000008552         mov        eax, 0x1
0000000000008557         jmp        loc_84ac
000000000000855c         align      32

                     loc_8560:
0000000000008560         mov        ecx, dword [rbx+0x90]                       ; CODE XREF=build_wcs_buffer+89
0000000000008566         xor        eax, eax
0000000000008568         lea        rsi, qword [rsp+0x98+var_88]
000000000000856d         test       ecx, ecx
000000000000856f         jg         loc_8591

0000000000008571         jmp        loc_8489
0000000000008576         align      128

                     loc_8580:
0000000000008580         add        rax, 0x1                                    ; CODE XREF=build_wcs_buffer+411
0000000000008584         cmp        rdx, rax
0000000000008587         je         loc_8489

000000000000858d         mov        rdi, qword [rbx+0x78]

                     loc_8591:
0000000000008591         mov        rcx, qword [rbx]                            ; CODE XREF=build_wcs_buffer+335
0000000000008594         add        rcx, rbp
0000000000008597         add        rcx, rax
000000000000859a         add        rcx, qword [rbx+0x28]
000000000000859e         movzx      ecx, byte [rcx]
00000000000085a1         movzx      ecx, byte [rdi+rcx]
00000000000085a5         mov        rdi, qword [rbx+8]
00000000000085a9         add        rdi, rbp
00000000000085ac         mov        byte [rdi+rax], cl
00000000000085af         mov        byte [rsi+rax], cl
00000000000085b2         lea        ecx, dword [rax+1]
00000000000085b5         cmp        ecx, dword [rbx+0x90]
00000000000085bb         jl         loc_8580

00000000000085bd         jmp        loc_8489
00000000000085c2         align      8

                     loc_85c8:
00000000000085c8         mov        qword [rbx+0x20], r15                       ; CODE XREF=build_wcs_buffer+264
00000000000085cc         jmp        loc_84e4

                     loc_85d1:
00000000000085d1         movzx      edx, byte [rcx+rdx]                         ; CODE XREF=build_wcs_buffer+296
00000000000085d5         mov        dword [rsp+0x98+var_8C], edx
00000000000085d9         jmp        loc_854e

                     loc_85de:
00000000000085de         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_wcs_buffer+218
                        ; endp
00000000000085e3         align      16                                          ; End of unwind block (FDE at 0x195bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_88: int8_t, -136
        ;    var_90: int64_t, -144
        ;    var_94: int32_t, -148
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208


                     build_wcs_upper_buffer:
00000000000085f0         push       r15                                         ; Begin of unwind block (FDE at 0x19608), CODE XREF=extend_buffers+149, re_string_reconstruct+298, re_compile_internal+724
00000000000085f2         push       r14
00000000000085f4         mov        r14, rdi
00000000000085f7         push       r13
00000000000085f9         push       r12
00000000000085fb         push       rbp
00000000000085fc         push       rbx
00000000000085fd         sub        rsp, 0xa8
0000000000008604         mov        rbx, qword [rdi+0x58]
0000000000008608         mov        r15, qword [rdi+0x30]
000000000000860c         mov        rax, qword [fs:0x28]
0000000000008615         mov        qword [rsp+0xd8+var_40], rax
000000000000861d         xor        eax, eax
000000000000861f         cmp        qword [rdi+0x40], rbx
0000000000008623         cmovle     rbx, qword [rdi+0x40]
0000000000008628         cmp        byte [rdi+0x8a], 0x0
000000000000862f         jne        loc_863c

0000000000008631         cmp        qword [rdi+0x78], 0x0
0000000000008636         je         loc_87c0

                     loc_863c:
000000000000863c         mov        r13, qword [r14+0x38]                       ; CODE XREF=build_wcs_upper_buffer+63, build_wcs_upper_buffer+471

                     loc_8640:
0000000000008640         cmp        r15, rbx                                    ; CODE XREF=build_wcs_upper_buffer+408, build_wcs_upper_buffer+450, build_wcs_upper_buffer+1169, build_wcs_upper_buffer+1184, build_wcs_upper_buffer+1459
0000000000008643         jl         loc_8680

                     loc_8645:
0000000000008645         mov        qword [r14+0x30], r15                       ; CODE XREF=build_wcs_upper_buffer+1233
0000000000008649         mov        qword [r14+0x38], r13
000000000000864d         xor        eax, eax

                     loc_864f:
000000000000864f         mov        rcx, qword [rsp+0xd8+var_40]                ; CODE XREF=build_wcs_upper_buffer+898, build_wcs_upper_buffer+1515
0000000000008657         xor        rcx, qword [fs:0x28]
0000000000008660         jne        loc_8bea

0000000000008666         add        rsp, 0xa8
000000000000866d         pop        rbx
000000000000866e         pop        rbp
000000000000866f         pop        r12
0000000000008671         pop        r13
0000000000008673         pop        r14
0000000000008675         pop        r15
0000000000008677         ret
                        ; endp
0000000000008678         align      128

                     loc_8680:
0000000000008680         lea        rax, qword [r14+0x20]                       ; CODE XREF=build_wcs_upper_buffer+83
0000000000008684         mov        qword [rsp+0xd8+var_D0], rax
0000000000008689         mov        rax, rbx
000000000000868c         sub        rax, r15
000000000000868f         mov        qword [rsp+0xd8+var_C8], rax
0000000000008694         lea        rax, qword [rsp+0xd8+var_94]
0000000000008699         mov        qword [rsp+0xd8+var_B8], rax

                     loc_869e:
000000000000869e         mov        rdx, qword [r14+0x78]                       ; CODE XREF=build_wcs_upper_buffer+1051
00000000000086a2         mov        rax, qword [r14+0x20]
00000000000086a6         test       rdx, rdx
00000000000086a9         mov        qword [rsp+0xd8+var_90], rax
00000000000086ae         jne        loc_89b9

00000000000086b4         mov        rbp, qword [r14+0x28]
00000000000086b8         add        rbp, r13
00000000000086bb         add        rbp, qword [r14]
00000000000086be         mov        qword [rsp+0xd8+var_C0], rbp

                     loc_86c3:
00000000000086c3         mov        rcx, qword [rsp+0xd8+var_D0]                ; CODE XREF=build_wcs_upper_buffer+1040
00000000000086c8         mov        rdx, qword [rsp+0xd8+var_C8]
00000000000086cd         mov        rsi, qword [rsp+0xd8+var_C0]
00000000000086d2         mov        rdi, qword [rsp+0xd8+var_B8]
00000000000086d7         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000086dc         mov        rbp, rax
00000000000086df         lea        rax, qword [rax-1]
00000000000086e3         cmp        rax, 0xfffffffffffffffc
00000000000086e7         mov        qword [rsp+0xd8+var_B8], rax
00000000000086ec         ja         loc_8a29

00000000000086f2         mov        edx, dword [rsp+0xd8+var_94]
00000000000086f6         mov        edi, edx                                    ; argument "__wc" for method j_towupper
00000000000086f8         mov        dword [rsp+0xd8+var_C8], edx
00000000000086fc         call       j_towupper                                  ; towupper
0000000000008701         mov        edx, dword [rsp+0xd8+var_C8]
0000000000008705         mov        r12d, eax
0000000000008708         mov        qword [rsp+0xd8+var_D0], r15
000000000000870d         cmp        edx, eax
000000000000870f         je         loc_8a10

0000000000008715         lea        rcx, qword [rsp+0xd8+var_88]
000000000000871a         lea        rdx, qword [rsp+0xd8+var_90]                ; argument "__ps" for method j_wcrtomb
000000000000871f         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
0000000000008721         mov        rdi, rcx                                    ; argument "__s" for method j_wcrtomb
0000000000008724         mov        qword [rsp+0xd8+var_C8], rcx
0000000000008729         call       j_wcrtomb                                   ; wcrtomb
000000000000872e         cmp        rbp, rax
0000000000008731         mov        r11, rax
0000000000008734         mov        rcx, qword [rsp+0xd8+var_C8]
0000000000008739         jne        loc_8ac6

000000000000873f         mov        rdi, qword [r14+8]
0000000000008743         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000008746         mov        rsi, rcx                                    ; argument "__src" for method j_memcpy
0000000000008749         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
000000000000874c         call       j_memcpy                                    ; memcpy

                     loc_8751:
0000000000008751         cmp        byte [r14+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+1076
0000000000008759         lea        rax, qword [rbp+r13]
000000000000875e         jne        loc_8a95

                     loc_8764:
0000000000008764         add        r15, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+1219
0000000000008768         mov        rsi, qword [rsp+0xd8+var_D0]
000000000000876d         mov        rdx, qword [r14+0x10]
0000000000008771         lea        rcx, qword [r15+rbp-1]
0000000000008776         mov        r13, rax
0000000000008779         cmp        r15, rcx
000000000000877c         lea        rax, qword [rsi*4]
0000000000008784         mov        dword [rdx+rsi*4], r12d
0000000000008788         jge        loc_8640

000000000000878e         lea        rax, qword [rdx+rax+4]
0000000000008793         lea        rdx, qword [rdx+rcx*4]
0000000000008797         nop        word [rax+rax]

                     loc_87a0:
00000000000087a0         mov        dword [rax], 0xffffffff                     ; CODE XREF=build_wcs_upper_buffer+445
00000000000087a6         add        rax, 0x4
00000000000087aa         cmp        rdx, rax
00000000000087ad         jne        loc_87a0

00000000000087af         mov        r15, rcx
00000000000087b2         jmp        loc_8640
00000000000087b7         align      64

                     loc_87c0:
00000000000087c0         cmp        byte [rdi+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+70
00000000000087c7         jne        loc_863c

00000000000087cd         cmp        r15, rbx
00000000000087d0         jge        loc_8968

00000000000087d6         lea        rax, qword [rdi+0x20]
00000000000087da         mov        qword [rsp+0xd8+var_D0], rax
00000000000087df         lea        rax, qword [rsp+0xd8+var_94]
00000000000087e4         mov        qword [rsp+0xd8+var_A8], rax
00000000000087e9         lea        rax, qword [rsp+0xd8+var_90]
00000000000087ee         mov        qword [rsp+0xd8+var_A0], rax
00000000000087f3         lea        rax, qword [rsp+0xd8+var_88]
00000000000087f8         mov        qword [rsp+0xd8+var_B0], rax
00000000000087fd         nop        dword [rax]

                     loc_8800:
0000000000008800         mov        rbp, qword [r14+0x28]                       ; CODE XREF=build_wcs_upper_buffer+765
0000000000008804         mov        r13, r15
0000000000008807         add        rbp, r15
000000000000880a         add        rbp, qword [r14]
000000000000880d         movzx      r12d, byte [rbp]
0000000000008812         test       r12b, 0x80
0000000000008816         jne        loc_882a

0000000000008818         mov        rdi, qword [rsp+0xd8+var_D0]                ; argument "__ps" for method j_mbsinit
000000000000881d         call       j_mbsinit                                   ; mbsinit
0000000000008822         test       eax, eax
0000000000008824         jne        loc_8918

                     loc_882a:
000000000000882a         mov        rax, qword [r14+0x20]                       ; CODE XREF=build_wcs_upper_buffer+550
000000000000882e         mov        rdi, qword [rsp+0xd8+var_A8]
0000000000008833         mov        rdx, rbx
0000000000008836         mov        rcx, qword [rsp+0xd8+var_D0]
000000000000883b         sub        rdx, r15
000000000000883e         mov        rsi, rbp
0000000000008841         mov        qword [rsp+0xd8+var_C8], rdx
0000000000008846         mov        qword [rsp+0xd8+var_90], rax
000000000000884b         mov        qword [rsp+0xd8+var_B8], rdi
0000000000008850         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000008855         mov        rbp, rax
0000000000008858         lea        rax, qword [rax-1]
000000000000885c         cmp        rax, 0xfffffffffffffffc
0000000000008860         ja         loc_8948

0000000000008866         mov        edx, dword [rsp+0xd8+var_94]
000000000000886a         mov        edi, edx                                    ; argument "__wc" for method j_towupper
000000000000886c         mov        dword [rsp+0xd8+var_C0], edx
0000000000008870         call       j_towupper                                  ; towupper
0000000000008875         mov        edx, dword [rsp+0xd8+var_C0]
0000000000008879         mov        r12d, eax
000000000000887c         cmp        edx, eax
000000000000887e         je         loc_88f8

0000000000008880         mov        rdx, qword [rsp+0xd8+var_A0]                ; argument "__ps" for method j_wcrtomb
0000000000008885         mov        rdi, qword [rsp+0xd8+var_B0]                ; argument "__s" for method j_wcrtomb
000000000000888a         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
000000000000888c         call       j_wcrtomb                                   ; wcrtomb
0000000000008891         cmp        rbp, rax
0000000000008894         jne        loc_8a08

000000000000889a         mov        rdi, qword [r14+8]
000000000000889e         mov        rsi, qword [rsp+0xd8+var_B0]                ; argument "__src" for method j_memcpy
00000000000088a3         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
00000000000088a6         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
00000000000088a9         call       j_memcpy                                    ; memcpy

                     loc_88ae:
00000000000088ae         add        r15, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+801
00000000000088b2         mov        rdx, qword [r14+0x10]
00000000000088b6         lea        rax, qword [r13*4]
00000000000088be         lea        rcx, qword [r15+rbp-1]
00000000000088c3         cmp        r15, rcx
00000000000088c6         mov        dword [rdx+r13*4], r12d
00000000000088ca         jge        loc_88ea

00000000000088cc         lea        rax, qword [rdx+rax+4]
00000000000088d1         lea        rdx, qword [rdx+rcx*4]
00000000000088d5         nop        dword [rax]

                     loc_88d8:
00000000000088d8         mov        dword [rax], 0xffffffff                     ; CODE XREF=build_wcs_upper_buffer+757
00000000000088de         add        rax, 0x4
00000000000088e2         cmp        rdx, rax
00000000000088e5         jne        loc_88d8

00000000000088e7         mov        r15, rcx

                     loc_88ea:
00000000000088ea         cmp        rbx, r15                                    ; CODE XREF=build_wcs_upper_buffer+730, build_wcs_upper_buffer+849, build_wcs_upper_buffer+949, build_wcs_upper_buffer+964
00000000000088ed         jg         loc_8800

00000000000088f3         jmp        loc_8968
00000000000088f5         align      8

                     loc_88f8:
00000000000088f8         mov        rsi, qword [r14+0x28]                       ; CODE XREF=build_wcs_upper_buffer+654
00000000000088fc         mov        rdi, qword [r14+8]
0000000000008900         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000008903         add        rsi, r15
0000000000008906         add        rsi, qword [r14]                            ; argument "__src" for method j_memcpy
0000000000008909         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
000000000000890c         call       j_memcpy                                    ; memcpy
0000000000008911         jmp        loc_88ae
0000000000008913         align      8

                     loc_8918:
0000000000008918         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc, CODE XREF=build_wcs_upper_buffer+564
000000000000891d         mov        rax, qword [rax]
0000000000008920         mov        rdx, qword [r14+8]
0000000000008924         mov        eax, dword [rax+r12*4]
0000000000008928         mov        byte [rdx+r15], al
000000000000892c         mov        rdx, qword [r14+8]
0000000000008930         mov        rax, qword [r14+0x10]
0000000000008934         movzx      edx, byte [rdx+r15]
0000000000008939         mov        dword [rax+r15*4], edx
000000000000893d         add        r15, 0x1
0000000000008941         jmp        loc_88ea
0000000000008943         align      8

                     loc_8948:
0000000000008948         cmp        rax, 0xfffffffffffffffd                     ; CODE XREF=build_wcs_upper_buffer+624
000000000000894c         jne        loc_8980

000000000000894e         mov        rax, qword [r14+0x58]
0000000000008952         cmp        qword [r14+0x40], rax
0000000000008956         jge        loc_8980

0000000000008958         mov        rax, qword [rsp+0xd8+var_90]
000000000000895d         mov        qword [r14+0x20], rax
0000000000008961         nop        dword [rax]

                     loc_8968:
0000000000008968         mov        qword [r14+0x30], r15                       ; CODE XREF=build_wcs_upper_buffer+480, build_wcs_upper_buffer+771
000000000000896c         mov        qword [r14+0x38], r15
0000000000008970         xor        eax, eax
0000000000008972         jmp        loc_864f
0000000000008977         align      128

                     loc_8980:
0000000000008980         mov        rax, qword [r14]                            ; CODE XREF=build_wcs_upper_buffer+860, build_wcs_upper_buffer+870
0000000000008983         mov        rdx, qword [r14+8]
0000000000008987         add        rax, r15
000000000000898a         add        rax, qword [r14+0x28]
000000000000898e         movzx      eax, byte [rax]
0000000000008991         mov        byte [rdx+r15], al
0000000000008995         mov        rdx, qword [r14+0x10]
0000000000008999         add        r15, 0x1
000000000000899d         cmp        rbp, 0xffffffffffffffff
00000000000089a1         mov        dword [rdx+r13*4], eax
00000000000089a5         jne        loc_88ea

00000000000089ab         mov        rax, qword [rsp+0xd8+var_90]
00000000000089b0         mov        qword [r14+0x20], rax
00000000000089b4         jmp        loc_88ea

                     loc_89b9:
00000000000089b9         mov        eax, dword [r14+0x90]                       ; CODE XREF=build_wcs_upper_buffer+190
00000000000089c0         test       eax, eax
00000000000089c2         jle        loc_8be0

00000000000089c8         mov        rdi, qword [r14+0x28]
00000000000089cc         lea        r11d, dword [rax-1]
00000000000089d0         lea        rcx, qword [rsp+0xd8+var_88]
00000000000089d5         xor        eax, eax
00000000000089d7         add        rdi, r13
00000000000089da         add        rdi, qword [r14]
00000000000089dd         jmp        loc_89ea

                     loc_89df:
00000000000089df         add        rax, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+1033
00000000000089e3         cmp        qword [rsp+0xd8+var_C8], rax
00000000000089e8         je         loc_89fb

                     loc_89ea:
00000000000089ea         movzx      esi, byte [rdi+rax]                         ; CODE XREF=build_wcs_upper_buffer+1005
00000000000089ee         cmp        r11, rax
00000000000089f1         movzx      esi, byte [rdx+rsi]
00000000000089f5         mov        byte [rcx+rax], sil
00000000000089f9         jne        loc_89df

                     loc_89fb:
00000000000089fb         mov        qword [rsp+0xd8+var_C0], rcx                ; CODE XREF=build_wcs_upper_buffer+1016, build_wcs_upper_buffer+1525
0000000000008a00         jmp        loc_86c3
0000000000008a05         align      8

                     loc_8a08:
0000000000008a08         mov        r13, r15                                    ; CODE XREF=build_wcs_upper_buffer+676
0000000000008a0b         jmp        loc_869e

                     loc_8a10:
0000000000008a10         mov        rdi, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+287, build_wcs_upper_buffer+1242
0000000000008a14         mov        rsi, qword [rsp+0xd8+var_C0]                ; argument "__src" for method j_memcpy
0000000000008a19         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000008a1c         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
0000000000008a1f         call       j_memcpy                                    ; memcpy
0000000000008a24         jmp        loc_8751

                     loc_8a29:
0000000000008a29         cmp        qword [rsp+0xd8+var_B8], 0xfffffffffffffffd ; CODE XREF=build_wcs_upper_buffer+252
0000000000008a2f         jne        loc_8a3b

0000000000008a31         mov        rax, qword [r14+0x58]
0000000000008a35         cmp        qword [r14+0x40], rax
0000000000008a39         jl         loc_8ab8

                     loc_8a3b:
0000000000008a3b         mov        rax, qword [r14]                            ; CODE XREF=build_wcs_upper_buffer+1087
0000000000008a3e         mov        rdx, qword [r14+0x78]
0000000000008a42         add        rax, r13
0000000000008a45         add        rax, qword [r14+0x28]
0000000000008a49         test       rdx, rdx
0000000000008a4c         movzx      eax, byte [rax]
0000000000008a4f         jne        loc_8bfc

                     loc_8a55:
0000000000008a55         mov        rdx, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+1552
0000000000008a59         mov        rcx, r15
0000000000008a5c         mov        byte [rdx+r15], al
0000000000008a60         cmp        byte [r14+0x8c], 0x0
0000000000008a68         jne        loc_8bef

                     loc_8a6e:
0000000000008a6e         mov        rdx, qword [r14+0x10]                       ; CODE XREF=build_wcs_upper_buffer+1543
0000000000008a72         add        r13, 0x1
0000000000008a76         add        r15, 0x1
0000000000008a7a         cmp        rbp, 0xffffffffffffffff
0000000000008a7e         mov        dword [rdx+rcx*4], eax
0000000000008a81         jne        loc_8640

0000000000008a87         mov        rax, qword [rsp+0xd8+var_90]
0000000000008a8c         mov        qword [r14+0x20], rax
0000000000008a90         jmp        loc_8640

                     loc_8a95:
0000000000008a95         mov        rdx, qword [r14+0x18]                       ; CODE XREF=build_wcs_upper_buffer+366
0000000000008a99         mov        rcx, r15
0000000000008a9c         mov        r10, r13
0000000000008a9f         sub        rcx, r13
0000000000008aa2         lea        rdx, qword [rdx+rcx*8]

                     loc_8aa6:
0000000000008aa6         mov        qword [rdx+r10*8], r10                      ; CODE XREF=build_wcs_upper_buffer+1217
0000000000008aaa         add        r10, 0x1
0000000000008aae         cmp        rax, r10
0000000000008ab1         jne        loc_8aa6

0000000000008ab3         jmp        loc_8764

                     loc_8ab8:
0000000000008ab8         mov        rax, qword [rsp+0xd8+var_90]                ; CODE XREF=build_wcs_upper_buffer+1097, build_wcs_upper_buffer+1267
0000000000008abd         mov        qword [r14+0x20], rax
0000000000008ac1         jmp        loc_8645

                     loc_8ac6:
0000000000008ac6         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=build_wcs_upper_buffer+329
0000000000008aca         je         loc_8a10

0000000000008ad0         lea        rax, qword [rax+r15]
0000000000008ad4         mov        rsi, rax
0000000000008ad7         mov        qword [rsp+0xd8+var_D0], rax
0000000000008adc         mov        rax, qword [r14+0x40]
0000000000008ae0         cmp        rsi, rax
0000000000008ae3         ja         loc_8ab8

0000000000008ae5         cmp        qword [r14+0x18], 0x0
0000000000008aea         je         loc_8ba8

                     loc_8af0:
0000000000008af0         cmp        byte [r14+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+1504
0000000000008af8         jne        loc_8b1a

0000000000008afa         test       r15, r15
0000000000008afd         je         loc_8b12

0000000000008aff         mov        rdx, qword [r14+0x18]
0000000000008b03         xor        eax, eax

                     loc_8b05:
0000000000008b05         mov        qword [rdx+rax*8], rax                      ; CODE XREF=build_wcs_upper_buffer+1312
0000000000008b09         add        rax, 0x1
0000000000008b0d         cmp        rax, r15
0000000000008b10         jne        loc_8b05

                     loc_8b12:
0000000000008b12         mov        byte [r14+0x8c], 0x1                        ; CODE XREF=build_wcs_upper_buffer+1293

                     loc_8b1a:
0000000000008b1a         mov        rdi, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+1288
0000000000008b1e         mov        rsi, rcx                                    ; argument "__src" for method j_memcpy
0000000000008b21         mov        rdx, r11                                    ; argument "__n" for method j_memcpy
0000000000008b24         mov        qword [rsp+0xd8+var_C8], r11
0000000000008b29         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
0000000000008b2c         call       j_memcpy                                    ; memcpy
0000000000008b31         mov        rax, qword [r14+0x10]
0000000000008b35         mov        r11, qword [rsp+0xd8+var_C8]
0000000000008b3a         lea        rcx, qword [rax+r15*4]
0000000000008b3e         mov        rax, qword [r14+0x18]
0000000000008b42         cmp        r11, 0x1
0000000000008b46         mov        dword [rcx], r12d
0000000000008b49         lea        rsi, qword [rax+r15*8]
0000000000008b4d         mov        qword [rsi], r13
0000000000008b50         jbe        loc_8b7a

0000000000008b52         mov        eax, 0x1

                     loc_8b57:
0000000000008b57         mov        rdx, qword [rsp+0xd8+var_B8]                ; CODE XREF=build_wcs_upper_buffer+1416
0000000000008b5c         cmp        rax, rbp
0000000000008b5f         cmovb      rdx, rax
0000000000008b63         add        rdx, r13
0000000000008b66         mov        qword [rsi+rax*8], rdx
0000000000008b6a         mov        dword [rcx+rax*4], 0xffffffff
0000000000008b71         add        rax, 0x1
0000000000008b75         cmp        rax, r11
0000000000008b78         jne        loc_8b57

                     loc_8b7a:
0000000000008b7a         mov        rbx, qword [r14+0x58]                       ; CODE XREF=build_wcs_upper_buffer+1376
0000000000008b7e         sub        r11, rbp
0000000000008b81         add        rbx, r11
0000000000008b84         cmp        r13, qword [r14+0x60]
0000000000008b88         mov        qword [r14+0x58], rbx
0000000000008b8c         jge        loc_8b92

0000000000008b8e         add        qword [r14+0x68], r11

                     loc_8b92:
0000000000008b92         cmp        qword [r14+0x40], rbx                       ; CODE XREF=build_wcs_upper_buffer+1436
0000000000008b96         mov        r15, qword [rsp+0xd8+var_D0]
0000000000008b9b         cmovle     rbx, qword [r14+0x40]
0000000000008ba0         add        r13, rbp
0000000000008ba3         jmp        loc_8640

                     loc_8ba8:
0000000000008ba8         lea        rdi, qword [rax*8]                          ; argument "__size" for method j_malloc, CODE XREF=build_wcs_upper_buffer+1274
0000000000008bb0         mov        qword [rsp+0xd8+var_C0], rcx
0000000000008bb5         mov        qword [rsp+0xd8+var_C8], r11
0000000000008bba         call       j_malloc                                    ; malloc
0000000000008bbf         test       rax, rax
0000000000008bc2         mov        qword [r14+0x18], rax
0000000000008bc6         mov        r11, qword [rsp+0xd8+var_C8]
0000000000008bcb         mov        rcx, qword [rsp+0xd8+var_C0]
0000000000008bd0         jne        loc_8af0

0000000000008bd6         mov        eax, 0xc
0000000000008bdb         jmp        loc_864f

                     loc_8be0:
0000000000008be0         lea        rcx, qword [rsp+0xd8+var_88]                ; CODE XREF=build_wcs_upper_buffer+978
0000000000008be5         jmp        loc_89fb

                     loc_8bea:
0000000000008bea         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_wcs_upper_buffer+112
                        ; endp

                     loc_8bef:
0000000000008bef         mov        rdx, qword [r14+0x18]                       ; CODE XREF=build_wcs_upper_buffer+1144
0000000000008bf3         mov        qword [rdx+r15*8], r13
0000000000008bf7         jmp        loc_8a6e

                     loc_8bfc:
0000000000008bfc         movzx      eax, byte [rdx+rax]                         ; CODE XREF=build_wcs_upper_buffer+1119
0000000000008c00         jmp        loc_8a55
0000000000008c05         align      16                                          ; End of unwind block (FDE at 0x19608)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     extend_buffers:
0000000000008c10         push       rbp                                         ; Begin of unwind block (FDE at 0x19654), CODE XREF=clean_state_log_if_needed+38, clean_state_log_if_needed+85, transit_state_bkref.isra.34+2162, re_search_internal+3125
0000000000008c11         push       rbx
0000000000008c12         movabs     rdx, 0xffffffffffffffe
0000000000008c1c         sub        rsp, 0x8
0000000000008c20         mov        rax, qword [rdi+0x40]
0000000000008c24         cmp        rax, rdx
0000000000008c27         ja         loc_8d38

0000000000008c2d         mov        rdx, qword [rdi+0x58]
0000000000008c31         add        rax, rax
0000000000008c34         movsxd     rsi, esi
0000000000008c37         mov        rbx, rdi
0000000000008c3a         cmp        rax, rdx
0000000000008c3d         cmovg      rax, rdx
0000000000008c41         cmp        rax, rsi
0000000000008c44         cmovge     rsi, rax
0000000000008c48         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
0000000000008c4d         test       eax, eax
0000000000008c4f         mov        ebp, eax
0000000000008c51         jne        loc_8d0d

0000000000008c57         mov        rdi, qword [rbx+0xb8]
0000000000008c5e         test       rdi, rdi
0000000000008c61         je         loc_8c84

0000000000008c63         mov        rax, qword [rbx+0x40]
0000000000008c67         lea        rsi, qword [0x8+rax*8]                      ; argument "__size" for method j_realloc
0000000000008c6f         call       j_realloc                                   ; realloc
0000000000008c74         test       rax, rax
0000000000008c77         je         loc_8d38

0000000000008c7d         mov        qword [rbx+0xb8], rax

                     loc_8c84:
0000000000008c84         cmp        byte [rbx+0x88], 0x0                        ; CODE XREF=extend_buffers+81
0000000000008c8b         mov        eax, dword [rbx+0x90]
0000000000008c91         je         loc_8cb0

0000000000008c93         cmp        eax, 0x1
0000000000008c96         mov        rdi, rbx
0000000000008c99         jle        loc_8d50

0000000000008c9f         add        rsp, 0x8
0000000000008ca3         pop        rbx
0000000000008ca4         pop        rbp
0000000000008ca5         jmp        build_wcs_upper_buffer                      ; build_wcs_upper_buffer
                        ; endp
0000000000008caa         align      16

                     loc_8cb0:
0000000000008cb0         cmp        eax, 0x1                                    ; CODE XREF=extend_buffers+129
0000000000008cb3         jg         loc_8d20

0000000000008cb5         mov        rcx, qword [rbx+0x78]
0000000000008cb9         test       rcx, rcx
0000000000008cbc         je         loc_8d0d

0000000000008cbe         mov        rsi, qword [rbx+0x58]
0000000000008cc2         cmp        qword [rbx+0x40], rsi
0000000000008cc6         cmovle     rsi, qword [rbx+0x40]
0000000000008ccb         mov        rax, qword [rbx+0x30]
0000000000008ccf         cmp        rsi, rax
0000000000008cd2         jg         loc_8ce4

0000000000008cd4         jmp        loc_8d05
0000000000008cd6         align      32

                     loc_8ce0:
0000000000008ce0         mov        rcx, qword [rbx+0x78]                       ; CODE XREF=extend_buffers+243

                     loc_8ce4:
0000000000008ce4         mov        rdx, qword [rbx]                            ; CODE XREF=extend_buffers+194
0000000000008ce7         add        rdx, rax
0000000000008cea         add        rdx, qword [rbx+0x28]
0000000000008cee         movzx      edx, byte [rdx]
0000000000008cf1         movzx      ecx, byte [rcx+rdx]
0000000000008cf5         mov        rdx, qword [rbx+8]
0000000000008cf9         mov        byte [rdx+rax], cl
0000000000008cfc         add        rax, 0x1
0000000000008d00         cmp        rsi, rax
0000000000008d03         jne        loc_8ce0

                     loc_8d05:
0000000000008d05         mov        qword [rbx+0x30], rax                       ; CODE XREF=extend_buffers+196
0000000000008d09         mov        qword [rbx+0x38], rax

                     loc_8d0d:
0000000000008d0d         add        rsp, 0x8                                    ; CODE XREF=extend_buffers+65, extend_buffers+172
0000000000008d11         mov        eax, ebp
0000000000008d13         pop        rbx
0000000000008d14         pop        rbp
0000000000008d15         ret
                        ; endp
0000000000008d16         align      32

                     loc_8d20:
0000000000008d20         mov        rdi, rbx                                    ; CODE XREF=extend_buffers+163
0000000000008d23         call       build_wcs_buffer                            ; build_wcs_buffer
0000000000008d28         add        rsp, 0x8
0000000000008d2c         mov        eax, ebp
0000000000008d2e         pop        rbx
0000000000008d2f         pop        rbp
0000000000008d30         ret
                        ; endp
0000000000008d31         align      8

                     loc_8d38:
0000000000008d38         mov        ebp, 0xc                                    ; CODE XREF=extend_buffers+23, extend_buffers+103
0000000000008d3d         add        rsp, 0x8
0000000000008d41         mov        eax, ebp
0000000000008d43         pop        rbx
0000000000008d44         pop        rbp
0000000000008d45         ret
                        ; endp
0000000000008d46         align      16

                     loc_8d50:
0000000000008d50         call       build_upper_buffer                          ; build_upper_buffer, CODE XREF=extend_buffers+137
0000000000008d55         add        rsp, 0x8
0000000000008d59         mov        eax, ebp
0000000000008d5b         pop        rbx
0000000000008d5c         pop        rbp
0000000000008d5d         ret
                        ; endp
0000000000008d5e         align      32                                          ; End of unwind block (FDE at 0x19654)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     clean_state_log_if_needed:
0000000000008d60         push       r12                                         ; Begin of unwind block (FDE at 0x196b0), CODE XREF=get_subexp_sub.isra.32+244, transit_state_bkref.isra.34+816, re_search_internal+3351
0000000000008d62         push       rbp
0000000000008d63         mov        rbp, rsi
0000000000008d66         push       rbx
0000000000008d67         mov        rax, qword [rdi+0x40]
0000000000008d6b         mov        rbx, rdi
0000000000008d6e         mov        r12, qword [rdi+0xc0]
0000000000008d75         cmp        rax, rsi
0000000000008d78         jg         loc_8da0

0000000000008d7a         cmp        rax, qword [rdi+0x58]
0000000000008d7e         jge        loc_8da0

0000000000008d80         lea        esi, dword [rbp+1]
0000000000008d83         mov        rdi, rbx
0000000000008d86         call       extend_buffers                              ; extend_buffers
0000000000008d8b         test       eax, eax
0000000000008d8d         jne        loc_8d96

                     loc_8d8f:
0000000000008d8f         cmp        r12, rbp                                    ; CODE XREF=clean_state_log_if_needed+71, clean_state_log_if_needed+77, clean_state_log_if_needed+92
0000000000008d92         jl         loc_8dc0

                     loc_8d94:
0000000000008d94         xor        eax, eax                                    ; CODE XREF=clean_state_log_if_needed+132

                     loc_8d96:
0000000000008d96         pop        rbx                                         ; CODE XREF=clean_state_log_if_needed+45, clean_state_log_if_needed+94
0000000000008d97         pop        rbp
0000000000008d98         pop        r12
0000000000008d9a         ret
                        ; endp
0000000000008d9b         align      32

                     loc_8da0:
0000000000008da0         mov        rax, qword [rbx+0x30]                       ; CODE XREF=clean_state_log_if_needed+24, clean_state_log_if_needed+30
0000000000008da4         cmp        rax, rbp
0000000000008da7         jg         loc_8d8f

0000000000008da9         cmp        rax, qword [rbx+0x58]
0000000000008dad         jge        loc_8d8f

0000000000008daf         lea        esi, dword [rbp+1]
0000000000008db2         mov        rdi, rbx
0000000000008db5         call       extend_buffers                              ; extend_buffers
0000000000008dba         test       eax, eax
0000000000008dbc         je         loc_8d8f

0000000000008dbe         jmp        loc_8d96

                     loc_8dc0:
0000000000008dc0         mov        rax, qword [rbx+0xb8]                       ; CODE XREF=clean_state_log_if_needed+50
0000000000008dc7         mov        rdx, rbp
0000000000008dca         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000008dcc         sub        rdx, r12
0000000000008dcf         shl        rdx, 0x3                                    ; argument "__n" for method j_memset
0000000000008dd3         lea        rdi, qword [rax+r12*8+8]                    ; argument "__s" for method j_memset
0000000000008dd8         call       j_memset                                    ; memset
0000000000008ddd         mov        qword [rbx+0xc0], rbp
0000000000008de4         jmp        loc_8d94
0000000000008de6         align      16                                          ; End of unwind block (FDE at 0x196b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_charset:
0000000000008df0         push       rbx                                         ; Begin of unwind block (FDE at 0x196dc), CODE XREF=free_token+35, build_charclass_op+499, build_charclass_op+523, build_charclass_op+593, sub_13290+1155, sub_13290+2271
0000000000008df1         mov        rbx, rdi
0000000000008df4         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_free
0000000000008df7         call       j_free                                      ; free
0000000000008dfc         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_free
0000000000008e00         call       j_free                                      ; free
0000000000008e05         mov        rdi, qword [rbx+0x10]                       ; argument "__ptr" for method j_free
0000000000008e09         call       j_free                                      ; free
0000000000008e0e         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free
0000000000008e12         call       j_free                                      ; free
0000000000008e17         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
0000000000008e1a         pop        rbx
0000000000008e1b         jmp        j_free                                      ; free
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_token:
0000000000008e20         mov        eax, dword [rdi+8]                          ; End of unwind block (FDE at 0x196dc), Begin of unwind block (FDE at 0x196f8), CODE XREF=free_tree+8, free_dfa_content+50
0000000000008e23         and        eax, 0x400ff
0000000000008e28         cmp        eax, 0x6
0000000000008e2b         je         loc_8e40

0000000000008e2d         cmp        eax, 0x3
0000000000008e30         je         loc_8e38

0000000000008e32         ret
                        ; endp
0000000000008e34         align      8

                     loc_8e38:
0000000000008e38         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_free, CODE XREF=free_token+16
0000000000008e3b         jmp        j_free                                      ; free
                        ; endp

                     loc_8e40:
0000000000008e40         mov        rdi, qword [rdi]                            ; CODE XREF=free_token+11
0000000000008e43         jmp        free_charset                                ; free_charset
                        ; endp
0000000000008e45         align      16                                          ; End of unwind block (FDE at 0x196f8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_tree:
0000000000008e50         lea        rdi, qword [rsi+0x28]                       ; Begin of unwind block (FDE at 0x1970c), DATA XREF=sub_12b20+81, sub_12b20+764, sub_12b20+1024, sub_12b20+1118, parse_branch+313, parse_branch+336, parse_branch+353, parse_reg_exp+305
0000000000008e54         sub        rsp, 0x8
0000000000008e58         call       free_token                                  ; free_token
0000000000008e5d         xor        eax, eax
0000000000008e5f         add        rsp, 0x8
0000000000008e63         ret
                        ; endp
0000000000008e64         align      16                                          ; End of unwind block (FDE at 0x1970c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     re_dfa_add_node:
0000000000008e70         push       r15                                         ; Begin of unwind block (FDE at 0x19724), CODE XREF=duplicate_node+38, calc_first+30
0000000000008e72         push       r14
0000000000008e74         mov        r14, rsi
0000000000008e77         push       r13
0000000000008e79         push       r12
0000000000008e7b         push       rbp
0000000000008e7c         push       rbx
0000000000008e7d         mov        rbx, rdi
0000000000008e80         sub        rsp, 0x18
0000000000008e84         mov        rsi, qword [rdi+0x10]
0000000000008e88         mov        rbp, qword [rdi+8]
0000000000008e8c         cmp        rsi, rbp
0000000000008e8f         jae        loc_8f40

0000000000008e95         mov        r12, qword [rdi+0x18]
0000000000008e99         mov        rbp, qword [rdi+0x28]

                     loc_8e9d:
0000000000008e9d         mov        rax, rsi                                    ; CODE XREF=re_dfa_add_node+391
0000000000008ea0         mov        ecx, edx
0000000000008ea2         shl        rax, 0x4
0000000000008ea6         add        rax, qword [rbx]
0000000000008ea9         and        ecx, 0xfffc00ff
0000000000008eaf         mov        qword [rax+8], rdx
0000000000008eb3         mov        dword [rax+8], ecx
0000000000008eb6         xor        ecx, ecx
0000000000008eb8         cmp        dl, 0x6
0000000000008ebb         mov        qword [rax], r14
0000000000008ebe         sete       cl
0000000000008ec1         cmp        dl, 0x5
0000000000008ec4         jne        loc_8ed2

0000000000008ec6         xor        ecx, ecx
0000000000008ec8         cmp        dword [rbx+0xb4], 0x1
0000000000008ecf         setg       cl

                     loc_8ed2:
0000000000008ed2         movzx      edx, byte [rax+0xa]                         ; CODE XREF=re_dfa_add_node+84
0000000000008ed6         shl        ecx, 0x4
0000000000008ed9         pxor       xmm0, xmm0
0000000000008edd         and        edx, 0xffffffef
0000000000008ee0         or         edx, ecx
0000000000008ee2         mov        byte [rax+0xa], dl
0000000000008ee5         mov        qword [r12+rsi*8], 0xffffffffffffffff
0000000000008eed         mov        rax, qword [rbx+0x10]
0000000000008ef1         lea        rax, qword [rax+rax*2]
0000000000008ef5         lea        rax, qword [rbp+rax*8]
0000000000008efa         movups     xmmword [rax], xmm0
0000000000008efd         mov        qword [rax+0x10], 0x0
0000000000008f05         mov        rax, qword [rbx+0x10]
0000000000008f09         lea        rdx, qword [rax+rax*2]
0000000000008f0d         mov        rax, qword [rbx+0x30]
0000000000008f11         lea        rax, qword [rax+rdx*8]
0000000000008f15         movups     xmmword [rax], xmm0
0000000000008f18         mov        qword [rax+0x10], 0x0
0000000000008f20         mov        rax, qword [rbx+0x10]
0000000000008f24         lea        rdx, qword [rax+1]
0000000000008f28         mov        qword [rbx+0x10], rdx

                     loc_8f2c:
0000000000008f2c         add        rsp, 0x18                                   ; CODE XREF=re_dfa_add_node+457
0000000000008f30         pop        rbx
0000000000008f31         pop        rbp
0000000000008f32         pop        r12
0000000000008f34         pop        r13
0000000000008f36         pop        r14
0000000000008f38         pop        r15
0000000000008f3a         ret
                        ; endp
0000000000008f3b         align      64

                     loc_8f40:
0000000000008f40         lea        r13, qword [rbp+rbp]                        ; CODE XREF=re_dfa_add_node+31
0000000000008f45         movabs     rax, 0xaaaaaaaaaaaaaaa
0000000000008f4f         cmp        r13, rax
0000000000008f52         ja         loc_9032

0000000000008f58         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_realloc
0000000000008f5b         mov        rsi, rbp
0000000000008f5e         mov        qword [rsp+0x48+var_40], rdx
0000000000008f63         shl        rsi, 0x5                                    ; argument "__size" for method j_realloc
0000000000008f67         call       j_realloc                                   ; realloc
0000000000008f6c         test       rax, rax
0000000000008f6f         je         loc_9032

0000000000008f75         mov        r15, rbp
0000000000008f78         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_realloc
0000000000008f7c         mov        qword [rbx], rax
0000000000008f7f         shl        r15, 0x4
0000000000008f83         mov        rsi, r15                                    ; argument "__size" for method j_realloc
0000000000008f86         call       j_realloc                                   ; realloc
0000000000008f8b         mov        rdi, qword [rbx+0x20]                       ; argument "__ptr" for method j_realloc
0000000000008f8f         mov        rsi, r15                                    ; argument "__size" for method j_realloc
0000000000008f92         lea        r15, qword [r13+rbp*4]
0000000000008f97         mov        r12, rax
0000000000008f9a         shl        r15, 0x3
0000000000008f9e         call       j_realloc                                   ; realloc
0000000000008fa3         mov        rdi, qword [rbx+0x28]                       ; argument "__ptr" for method j_realloc
0000000000008fa7         mov        rsi, r15                                    ; argument "__size" for method j_realloc
0000000000008faa         mov        qword [rsp+0x48+var_48], rax
0000000000008fae         call       j_realloc                                   ; realloc
0000000000008fb3         mov        rdi, qword [rbx+0x30]                       ; argument "__ptr" for method j_realloc
0000000000008fb7         mov        rsi, r15                                    ; argument "__size" for method j_realloc
0000000000008fba         mov        rbp, rax
0000000000008fbd         call       j_realloc                                   ; realloc
0000000000008fc2         test       r12, r12
0000000000008fc5         mov        rcx, qword [rsp+0x48+var_48]
0000000000008fc9         je         loc_9000

0000000000008fcb         test       rcx, rcx
0000000000008fce         je         loc_9000

0000000000008fd0         test       rbp, rbp
0000000000008fd3         je         loc_9000

0000000000008fd5         test       rax, rax
0000000000008fd8         mov        rdx, qword [rsp+0x48+var_40]
0000000000008fdd         je         loc_9000

0000000000008fdf         mov        qword [rbx+0x18], r12
0000000000008fe3         mov        qword [rbx+0x20], rcx
0000000000008fe7         mov        qword [rbx+0x28], rbp
0000000000008feb         mov        qword [rbx+0x30], rax
0000000000008fef         mov        qword [rbx+8], r13
0000000000008ff3         mov        rsi, qword [rbx+0x10]
0000000000008ff7         jmp        loc_8e9d
0000000000008ffc         align      4096

                     loc_9000:
0000000000009000         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_dfa_add_node+345, re_dfa_add_node+350, re_dfa_add_node+355, re_dfa_add_node+365
0000000000009003         mov        qword [rsp+0x48+var_40], rax
0000000000009008         mov        qword [rsp+0x48+var_48], rcx
000000000000900c         call       j_free                                      ; free
0000000000009011         mov        rcx, qword [rsp+0x48+var_48]
0000000000009015         mov        rdi, rcx                                    ; argument "__ptr" for method j_free
0000000000009018         call       j_free                                      ; free
000000000000901d         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000009020         call       j_free                                      ; free
0000000000009025         mov        rax, qword [rsp+0x48+var_40]
000000000000902a         mov        rdi, rax                                    ; argument "__ptr" for method j_free
000000000000902d         call       j_free                                      ; free

                     loc_9032:
0000000000009032         mov        rax, 0xffffffffffffffff                     ; CODE XREF=re_dfa_add_node+226, re_dfa_add_node+255
0000000000009039         jmp        loc_8f2c
000000000000903e         align      64                                          ; End of unwind block (FDE at 0x19724)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     duplicate_node:
0000000000009040         push       r13                                         ; Begin of unwind block (FDE at 0x19770), CODE XREF=duplicate_node_closure+258, duplicate_node_closure+328, duplicate_node_closure+437, duplicate_node_closure+542
0000000000009042         push       r12
0000000000009044         mov        r13, rsi
0000000000009047         push       rbp
0000000000009048         push       rbx
0000000000009049         shl        r13, 0x4
000000000000904d         mov        rbp, rsi
0000000000009050         mov        r12d, edx
0000000000009053         mov        rbx, rdi
0000000000009056         sub        rsp, 0x8
000000000000905a         mov        rax, qword [rdi]
000000000000905d         mov        rsi, qword [rax+r13]
0000000000009061         mov        rdx, qword [rax+r13+8]
0000000000009066         call       re_dfa_add_node                             ; re_dfa_add_node
000000000000906b         cmp        rax, 0xffffffffffffffff
000000000000906f         je         loc_90d4

0000000000009071         mov        edi, r12d
0000000000009074         mov        r8, qword [rbx]
0000000000009077         mov        rsi, rax
000000000000907a         and        di, 0x3ff
000000000000907f         shl        rsi, 0x4
0000000000009083         mov        ecx, edi
0000000000009085         and        ecx, 0x3ff
000000000000908b         add        rsi, r8
000000000000908e         shl        ecx, 0x8
0000000000009091         mov        edx, ecx
0000000000009093         mov        ecx, dword [rsi+8]
0000000000009096         and        ecx, 0xfffc00ff
000000000000909c         or         ecx, edx
000000000000909e         mov        dword [rsi+8], ecx
00000000000090a1         mov        edx, dword [r8+r13+8]
00000000000090a6         and        ecx, 0xfffc00ff
00000000000090ac         shr        edx, 0x8
00000000000090af         or         edx, edi
00000000000090b1         and        edx, 0x3ff
00000000000090b7         shl        edx, 0x8
00000000000090ba         or         edx, ecx
00000000000090bc         mov        ecx, edx
00000000000090be         mov        dword [rsi+8], edx
00000000000090c1         shr        ecx, 0x10
00000000000090c4         mov        edx, ecx
00000000000090c6         or         edx, 0x4
00000000000090c9         mov        byte [rsi+0xa], dl
00000000000090cc         mov        rdx, qword [rbx+0x20]
00000000000090d0         mov        qword [rdx+rax*8], rbp

                     loc_90d4:
00000000000090d4         add        rsp, 0x8                                    ; CODE XREF=duplicate_node+47
00000000000090d8         pop        rbx
00000000000090d9         pop        rbp
00000000000090da         pop        r12
00000000000090dc         pop        r13
00000000000090de         ret
                        ; endp
00000000000090df         align      32                                          ; End of unwind block (FDE at 0x19770)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     duplicate_node_closure:
00000000000090e0         push       r15                                         ; Begin of unwind block (FDE at 0x197a8), CODE XREF=duplicate_node_closure+378, calc_eclosure_iter+618
00000000000090e2         push       r14
00000000000090e4         mov        r9, rsi
00000000000090e7         push       r13
00000000000090e9         push       r12
00000000000090eb         mov        r14, rdi
00000000000090ee         push       rbp
00000000000090ef         push       rbx
00000000000090f0         mov        r13, rdx
00000000000090f3         mov        ebp, r8d
00000000000090f6         sub        rsp, 0x18
00000000000090fa         mov        qword [rsp+0x48+var_40], rcx

                     loc_90ff:
00000000000090ff         mov        r8, qword [r14]                             ; CODE XREF=duplicate_node_closure+293, duplicate_node_closure+481
0000000000009102         mov        rax, r9
0000000000009105         mov        rdi, qword [r14+0x28]
0000000000009109         shl        rax, 0x4
000000000000910d         mov        r12, r13
0000000000009110         add        rax, r8
0000000000009113         cmp        byte [rax+8], 0x4
0000000000009117         je         loc_92d0

000000000000911d         lea        r12, qword [r9+r9*2]
0000000000009121         shl        r12, 0x3
0000000000009125         lea        rsi, qword [rdi+r12]
0000000000009129         mov        rcx, qword [rsi+8]
000000000000912d         test       rcx, rcx
0000000000009130         je         loc_9329

0000000000009136         lea        rbx, qword [r13+r13*2]
000000000000913b         mov        rsi, qword [rsi+0x10]
000000000000913f         shl        rbx, 0x3
0000000000009143         add        rdi, rbx
0000000000009146         cmp        rcx, 0x1
000000000000914a         mov        r15, qword [rsi]
000000000000914d         mov        qword [rdi+8], 0x0
0000000000009155         je         loc_9270

000000000000915b         mov        rdx, qword [r14+0x10]
000000000000915f         lea        rsi, qword [rdx-1]
0000000000009163         mov        rax, rsi
0000000000009166         shl        rax, 0x4
000000000000916a         add        rax, r8
000000000000916d         test       byte [rax+0xa], 0x4
0000000000009171         je         loc_9220

0000000000009177         test       rsi, rsi
000000000000917a         jle        loc_9220

0000000000009180         shl        rdx, 0x4
0000000000009184         sub        r8, rax
0000000000009187         mov        rcx, qword [r14+0x20]
000000000000918b         lea        r8, qword [r8+rdx-0x20]
0000000000009190         jmp        loc_91aa
0000000000009192         align      8

                     loc_9198:
0000000000009198         add        rax, r8                                     ; CODE XREF=duplicate_node_closure+206, duplicate_node_closure+222
000000000000919b         sub        rsi, 0x1
000000000000919f         test       byte [rax+0xa], 0x4
00000000000091a3         je         loc_9220

00000000000091a5         test       rsi, rsi
00000000000091a8         jle        loc_9220

                     loc_91aa:
00000000000091aa         cmp        qword [rcx+rsi*8], r15                      ; CODE XREF=duplicate_node_closure+176
00000000000091ae         jne        loc_9198

00000000000091b0         mov        edx, dword [rax+8]
00000000000091b3         shr        edx, 0x8
00000000000091b6         and        edx, 0x3ff
00000000000091bc         cmp        ebp, edx
00000000000091be         jne        loc_9198

00000000000091c0         call       re_node_set_insert                          ; re_node_set_insert
00000000000091c5         test       al, al
00000000000091c7         je         loc_920b

                     loc_91c9:
00000000000091c9         mov        rax, qword [r14+0x28]                       ; CODE XREF=duplicate_node_closure+385
00000000000091cd         mov        edx, ebp
00000000000091cf         mov        rdi, r14
00000000000091d2         mov        rax, qword [rax+r12+0x10]
00000000000091d7         mov        r9, qword [rax+8]
00000000000091db         mov        rsi, r9
00000000000091de         mov        qword [rsp+0x48+var_48], r9
00000000000091e2         call       duplicate_node                              ; duplicate_node
00000000000091e7         cmp        rax, 0xffffffffffffffff
00000000000091eb         mov        r13, rax
00000000000091ee         je         loc_920b

                     loc_91f0:
00000000000091f0         add        rbx, qword [r14+0x28]                       ; CODE XREF=duplicate_node_closure+580
00000000000091f4         mov        rsi, r13
00000000000091f7         mov        rdi, rbx
00000000000091fa         call       re_node_set_insert                          ; re_node_set_insert
00000000000091ff         test       al, al
0000000000009201         mov        r9, qword [rsp+0x48+var_48]
0000000000009205         jne        loc_90ff

                     loc_920b:
000000000000920b         mov        eax, 0xc                                    ; CODE XREF=duplicate_node_closure+231, duplicate_node_closure+270, duplicate_node_closure+340, duplicate_node_closure+359, duplicate_node_closure+449, duplicate_node_closure+472, duplicate_node_closure+558, duplicate_node_closure+624

                     loc_9210:
0000000000009210         add        rsp, 0x18                                   ; CODE XREF=duplicate_node_closure+391, duplicate_node_closure+599, duplicate_node_closure+618
0000000000009214         pop        rbx
0000000000009215         pop        rbp
0000000000009216         pop        r12
0000000000009218         pop        r13
000000000000921a         pop        r14
000000000000921c         pop        r15
000000000000921e         ret
                        ; endp
000000000000921f         align      32

                     loc_9220:
0000000000009220         mov        edx, ebp                                    ; CODE XREF=duplicate_node_closure+145, duplicate_node_closure+154, duplicate_node_closure+195, duplicate_node_closure+200
0000000000009222         mov        rsi, r15
0000000000009225         mov        rdi, r14
0000000000009228         call       duplicate_node                              ; duplicate_node
000000000000922d         cmp        rax, 0xffffffffffffffff
0000000000009231         mov        r13, rax
0000000000009234         je         loc_920b

0000000000009236         mov        rdi, qword [r14+0x28]
000000000000923a         mov        rsi, r13
000000000000923d         add        rdi, rbx
0000000000009240         call       re_node_set_insert                          ; re_node_set_insert
0000000000009245         test       al, al
0000000000009247         je         loc_920b

0000000000009249         mov        rcx, qword [rsp+0x48+var_40]
000000000000924e         mov        r8d, ebp
0000000000009251         mov        rdx, r13
0000000000009254         mov        rsi, r15
0000000000009257         mov        rdi, r14
000000000000925a         call       duplicate_node_closure                      ; duplicate_node_closure
000000000000925f         test       eax, eax
0000000000009261         je         loc_91c9

0000000000009267         jmp        loc_9210
0000000000009269         align      16

                     loc_9270:
0000000000009270         cmp        r9, qword [rsp+0x48+var_40]                 ; CODE XREF=duplicate_node_closure+117
0000000000009275         jne        loc_9280

0000000000009277         cmp        r9, r13
000000000000927a         jne        loc_933c

                     loc_9280:
0000000000009280         mov        eax, dword [rax+8]                          ; CODE XREF=duplicate_node_closure+405
0000000000009283         mov        rsi, r15
0000000000009286         mov        rdi, r14
0000000000009289         shr        eax, 0x8
000000000000928c         and        eax, 0x3ff
0000000000009291         or         ebp, eax
0000000000009293         mov        edx, ebp
0000000000009295         call       duplicate_node                              ; duplicate_node
000000000000929a         cmp        rax, 0xffffffffffffffff
000000000000929e         mov        r13, rax
00000000000092a1         je         loc_920b

00000000000092a7         add        rbx, qword [r14+0x28]
00000000000092ab         mov        rsi, rax
00000000000092ae         mov        rdi, rbx
00000000000092b1         call       re_node_set_insert                          ; re_node_set_insert
00000000000092b6         test       al, al
00000000000092b8         je         loc_920b

00000000000092be         mov        r9, r15
00000000000092c1         jmp        loc_90ff
00000000000092c6         align      16

                     loc_92d0:
00000000000092d0         mov        rax, qword [r14+0x18]                       ; CODE XREF=duplicate_node_closure+55
00000000000092d4         lea        rbx, qword [r13+r13*2]
00000000000092d9         lea        r15, qword [r9*8]
00000000000092e1         mov        edx, ebp
00000000000092e3         shl        rbx, 0x3
00000000000092e7         mov        r9, qword [rax+r9*8]
00000000000092eb         mov        qword [rdi+rbx+8], 0x0
00000000000092f4         mov        rdi, r14
00000000000092f7         mov        rsi, r9
00000000000092fa         mov        qword [rsp+0x48+var_48], r9
00000000000092fe         call       duplicate_node                              ; duplicate_node
0000000000009303         cmp        rax, 0xffffffffffffffff
0000000000009307         mov        r13, rax
000000000000930a         mov        r9, qword [rsp+0x48+var_48]
000000000000930e         je         loc_920b

0000000000009314         mov        rax, qword [r14+0x18]
0000000000009318         mov        qword [rsp+0x48+var_48], r9
000000000000931c         mov        rcx, qword [rax+r15]
0000000000009320         mov        qword [rax+r12*8], rcx
0000000000009324         jmp        loc_91f0

                     loc_9329:
0000000000009329         mov        rax, qword [r14+0x18]                       ; CODE XREF=duplicate_node_closure+80
000000000000932d         mov        rcx, qword [rax+r9*8]
0000000000009331         mov        qword [rax+r13*8], rcx
0000000000009335         xor        eax, eax
0000000000009337         jmp        loc_9210

                     loc_933c:
000000000000933c         mov        rsi, r15                                    ; CODE XREF=duplicate_node_closure+410
000000000000933f         call       re_node_set_insert                          ; re_node_set_insert
0000000000009344         mov        edx, eax
0000000000009346         xor        eax, eax
0000000000009348         test       dl, dl
000000000000934a         jne        loc_9210

0000000000009350         jmp        loc_920b
0000000000009355         align      32                                          ; End of unwind block (FDE at 0x197a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_state:
0000000000009360         push       rbx                                         ; Begin of unwind block (FDE at 0x197f4), CODE XREF=free_dfa_content+252, re_acquire_state_context+529, re_acquire_state+487
0000000000009361         mov        rbx, rdi
0000000000009364         mov        rdi, qword [rdi+0x30]                       ; argument "__ptr" for method j_free
0000000000009368         call       j_free                                      ; free
000000000000936d         mov        rdi, qword [rbx+0x48]                       ; argument "__ptr" for method j_free
0000000000009371         call       j_free                                      ; free
0000000000009376         mov        rax, qword [rbx+0x50]
000000000000937a         lea        rdx, qword [rbx+8]
000000000000937e         cmp        rax, rdx
0000000000009381         je         loc_9395

0000000000009383         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_free
0000000000009387         call       j_free                                      ; free
000000000000938c         mov        rdi, qword [rbx+0x50]                       ; argument "__ptr" for method j_free
0000000000009390         call       j_free                                      ; free

                     loc_9395:
0000000000009395         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free, CODE XREF=free_state+33
0000000000009399         call       j_free                                      ; free
000000000000939e         mov        rdi, qword [rbx+0x60]                       ; argument "__ptr" for method j_free
00000000000093a2         call       j_free                                      ; free
00000000000093a7         mov        rdi, qword [rbx+0x58]                       ; argument "__ptr" for method j_free
00000000000093ab         call       j_free                                      ; free
00000000000093b0         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
00000000000093b3         pop        rbx
00000000000093b4         jmp        j_free                                      ; free
                        ; endp
00000000000093b9         align      64                                          ; End of unwind block (FDE at 0x197f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_destruct:
00000000000093c0         push       rbx                                         ; Begin of unwind block (FDE at 0x19810), CODE XREF=re_search_internal+2932, re_compile_internal+887, sub_14c00+983
00000000000093c1         mov        rbx, rdi
00000000000093c4         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_free
00000000000093c8         call       j_free                                      ; free
00000000000093cd         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free
00000000000093d1         call       j_free                                      ; free
00000000000093d6         cmp        byte [rbx+0x8b], 0x0
00000000000093dd         jne        loc_93e8

00000000000093df         pop        rbx
00000000000093e0         ret
                        ; endp
00000000000093e1         align      8

                     loc_93e8:
00000000000093e8         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_free, CODE XREF=re_string_destruct+29
00000000000093ec         pop        rbx
00000000000093ed         jmp        j_free                                      ; free
                        ; endp
00000000000093f2         align      1024                                        ; End of unwind block (FDE at 0x19810)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_dfa_content:
0000000000009400         push       r14                                         ; Begin of unwind block (FDE at 0x19830), CODE XREF=re_compile_internal+895, rpl_regfree+12
0000000000009402         push       r13
0000000000009404         push       r12
0000000000009406         mov        r12, rdi
0000000000009409         push       rbp
000000000000940a         push       rbx
000000000000940b         mov        rdi, qword [rdi]
000000000000940e         test       rdi, rdi
0000000000009411         je         loc_943e

0000000000009413         cmp        qword [r12+0x10], 0x0
0000000000009419         je         loc_943e

000000000000941b         xor        ebx, ebx
000000000000941d         jmp        loc_9424
000000000000941f         align      32

                     loc_9420:
0000000000009420         mov        rdi, qword [r12]                            ; CODE XREF=free_dfa_content+60

                     loc_9424:
0000000000009424         mov        rax, rbx                                    ; CODE XREF=free_dfa_content+29
0000000000009427         add        rbx, 0x1
000000000000942b         shl        rax, 0x4
000000000000942f         add        rdi, rax
0000000000009432         call       free_token                                  ; free_token
0000000000009437         cmp        qword [r12+0x10], rbx
000000000000943c         ja         loc_9420

                     loc_943e:
000000000000943e         mov        rdi, qword [r12+0x18]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+17, free_dfa_content+25
0000000000009443         call       j_free                                      ; free
0000000000009448         cmp        qword [r12+0x10], 0x0
000000000000944e         je         loc_94a3

0000000000009450         xor        ebx, ebx
0000000000009452         xor        ebp, ebp
0000000000009454         nop        dword [rax]

                     loc_9458:
0000000000009458         mov        rax, qword [r12+0x30]                       ; CODE XREF=free_dfa_content+161
000000000000945d         test       rax, rax
0000000000009460         je         loc_946c

0000000000009462         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
0000000000009467         call       j_free                                      ; free

                     loc_946c:
000000000000946c         mov        rax, qword [r12+0x38]                       ; CODE XREF=free_dfa_content+96
0000000000009471         test       rax, rax
0000000000009474         je         loc_9480

0000000000009476         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000947b         call       j_free                                      ; free

                     loc_9480:
0000000000009480         mov        rax, qword [r12+0x28]                       ; CODE XREF=free_dfa_content+116
0000000000009485         test       rax, rax
0000000000009488         je         loc_9494

000000000000948a         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000948f         call       j_free                                      ; free

                     loc_9494:
0000000000009494         add        rbp, 0x1                                    ; CODE XREF=free_dfa_content+136
0000000000009498         add        rbx, 0x18
000000000000949c         cmp        qword [r12+0x10], rbp
00000000000094a1         ja         loc_9458

                     loc_94a3:
00000000000094a3         mov        rdi, qword [r12+0x28]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+78
00000000000094a8         call       j_free                                      ; free
00000000000094ad         mov        rdi, qword [r12+0x30]                       ; argument "__ptr" for method j_free
00000000000094b2         call       j_free                                      ; free
00000000000094b7         mov        rdi, qword [r12+0x38]                       ; argument "__ptr" for method j_free
00000000000094bc         call       j_free                                      ; free
00000000000094c1         mov        rdi, qword [r12]                            ; argument "__ptr" for method j_free
00000000000094c5         call       j_free                                      ; free
00000000000094ca         mov        rdi, qword [r12+0x40]
00000000000094cf         test       rdi, rdi
00000000000094d2         je         loc_9527

00000000000094d4         xor        r14d, r14d
00000000000094d7         xor        r13d, r13d
00000000000094da         nop        word [rax+rax]

                     loc_94e0:
00000000000094e0         lea        rbp, qword [rdi+r14]                        ; CODE XREF=free_dfa_content+293
00000000000094e4         cmp        qword [rbp], 0x0
00000000000094e9         jle        loc_9507

00000000000094eb         xor        ebx, ebx
00000000000094ed         nop        dword [rax]

                     loc_94f0:
00000000000094f0         mov        rax, qword [rbp+0x10]                       ; CODE XREF=free_dfa_content+261
00000000000094f4         mov        rdi, qword [rax+rbx*8]
00000000000094f8         add        rbx, 0x1
00000000000094fc         call       free_state                                  ; free_state
0000000000009501         cmp        qword [rbp], rbx
0000000000009505         jg         loc_94f0

                     loc_9507:
0000000000009507         mov        rdi, qword [rbp+0x10]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+233
000000000000950b         add        r13, 0x1
000000000000950f         add        r14, 0x18
0000000000009513         call       j_free                                      ; free
0000000000009518         cmp        qword [r12+0x88], r13
0000000000009520         mov        rdi, qword [r12+0x40]
0000000000009525         jae        loc_94e0

                     loc_9527:
0000000000009527         call       j_free                                      ; free, CODE XREF=free_dfa_content+210
000000000000952c         mov        rdi, qword [r12+0x78]
0000000000009531         lea        rax, qword [utf8_sb_map]                    ; utf8_sb_map
0000000000009538         cmp        rdi, rax
000000000000953b         je         loc_9542

000000000000953d         call       j_free                                      ; free

                     loc_9542:
0000000000009542         mov        rdi, qword [r12+0xe0]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+315
000000000000954a         call       j_free                                      ; free
000000000000954f         pop        rbx
0000000000009550         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000009553         pop        rbp
0000000000009554         pop        r12
0000000000009556         pop        r13
0000000000009558         pop        r14
000000000000955a         jmp        j_free                                      ; free
                        ; endp
000000000000955f         align      32                                          ; End of unwind block (FDE at 0x19830)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     match_ctx_clean:
0000000000009560         push       r14                                         ; Begin of unwind block (FDE at 0x1986c), CODE XREF=re_search_internal+3892, re_search_internal+5268
0000000000009562         push       r13
0000000000009564         mov        r14, rdi
0000000000009567         push       r12
0000000000009569         push       rbp
000000000000956a         push       rbx
000000000000956b         cmp        qword [rdi+0xe8], 0x0
0000000000009573         jle        loc_95f9

0000000000009579         xor        r13d, r13d
000000000000957c         nop        dword [rax]

                     loc_9580:
0000000000009580         mov        rax, qword [r14+0xf8]                       ; CODE XREF=match_ctx_clean+151
0000000000009587         mov        r12, qword [rax+r13*8]
000000000000958b         cmp        qword [r12+0x20], 0x0
0000000000009591         jle        loc_95bd

0000000000009593         xor        ebx, ebx
0000000000009595         nop        dword [rax]

                     loc_9598:
0000000000009598         mov        rax, qword [r12+0x28]                       ; CODE XREF=match_ctx_clean+91
000000000000959d         mov        rbp, qword [rax+rbx*8]
00000000000095a1         add        rbx, 0x1
00000000000095a5         mov        rdi, qword [rbp+0x20]                       ; argument "__ptr" for method j_free
00000000000095a9         call       j_free                                      ; free
00000000000095ae         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
00000000000095b1         call       j_free                                      ; free
00000000000095b6         cmp        qword [r12+0x20], rbx
00000000000095bb         jg         loc_9598

                     loc_95bd:
00000000000095bd         mov        rdi, qword [r12+0x28]                       ; argument "__ptr" for method j_free, CODE XREF=match_ctx_clean+49
00000000000095c2         call       j_free                                      ; free
00000000000095c7         mov        rax, qword [r12+0x10]
00000000000095cc         test       rax, rax
00000000000095cf         je         loc_95e4

00000000000095d1         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_free
00000000000095d5         call       j_free                                      ; free
00000000000095da         mov        rdi, qword [r12+0x10]                       ; argument "__ptr" for method j_free
00000000000095df         call       j_free                                      ; free

                     loc_95e4:
00000000000095e4         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=match_ctx_clean+111
00000000000095e7         add        r13, 0x1
00000000000095eb         call       j_free                                      ; free
00000000000095f0         cmp        qword [r14+0xe8], r13
00000000000095f7         jg         loc_9580

                     loc_95f9:
00000000000095f9         pop        rbx                                         ; CODE XREF=match_ctx_clean+19
00000000000095fa         mov        qword [r14+0xe8], 0x0
0000000000009605         mov        qword [r14+0xc8], 0x0
0000000000009610         pop        rbp
0000000000009611         pop        r12
0000000000009613         pop        r13
0000000000009615         pop        r14
0000000000009617         ret
                        ; endp
0000000000009618         align      32                                          ; End of unwind block (FDE at 0x1986c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_char_size_at.part.0:
0000000000009620         mov        rcx, qword [rdi+0x30]                       ; Begin of unwind block (FDE at 0x198a8), CODE XREF=check_node_accept_bytes.isra.31+58, parse_bracket_element.constprop.37+59, parse_bracket_element.constprop.37+463
0000000000009624         lea        rax, qword [rsi+1]
0000000000009628         cmp        rax, rcx
000000000000962b         jge        loc_9668

000000000000962d         mov        rdx, qword [rdi+0x10]
0000000000009631         lea        rdi, qword [rax*4]
0000000000009639         cmp        dword [rdx+rax*4], 0xffffffff
000000000000963d         jne        loc_9668

000000000000963f         sub        rcx, rsi
0000000000009642         lea        rsi, qword [rdx+rdi-4]
0000000000009647         mov        edx, 0x2
000000000000964c         jmp        loc_965b
000000000000964e         align      16

                     loc_9650:
0000000000009650         add        rdx, 0x1                                    ; CODE XREF=re_string_char_size_at.part.0+64
0000000000009654         cmp        dword [rsi+rdx*4-4], 0xffffffff
0000000000009659         jne        loc_966d

                     loc_965b:
000000000000965b         cmp        rdx, rcx                                    ; CODE XREF=re_string_char_size_at.part.0+44
000000000000965e         mov        eax, edx
0000000000009660         jne        loc_9650

0000000000009662         ret
                        ; endp
0000000000009664         align      8

                     loc_9668:
0000000000009668         mov        eax, 0x1                                    ; CODE XREF=re_string_char_size_at.part.0+11, re_string_char_size_at.part.0+29

                     loc_966d:
000000000000966d         ret                                                    ; CODE XREF=re_string_char_size_at.part.0+57
                        ; endp
000000000000966f         align      16                                          ; End of unwind block (FDE at 0x198a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_compare.part.2:
0000000000009670         mov        rdx, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x198bc), CODE XREF=re_acquire_state_context+163, re_acquire_state+128
0000000000009674         xor        eax, eax
0000000000009676         cmp        rdx, qword [rsi+8]
000000000000967a         je         loc_9680

000000000000967c         ret
                        ; endp
000000000000967e         align      128

                     loc_9680:
0000000000009680         lea        rax, qword [rdx-1]                          ; CODE XREF=re_node_set_compare.part.2+10
0000000000009684         lea        rdx, qword [rax*8]
000000000000968c         jmp        loc_96ad
000000000000968e         align      16

                     loc_9690:
0000000000009690         mov        rcx, qword [rdi+0x10]                       ; CODE XREF=re_node_set_compare.part.2+64
0000000000009694         mov        r8, qword [rcx+rdx]
0000000000009698         mov        rcx, qword [rsi+0x10]
000000000000969c         mov        rcx, qword [rcx+rdx]
00000000000096a0         sub        rdx, 0x8
00000000000096a4         cmp        r8, rcx
00000000000096a7         jne        loc_96c0

00000000000096a9         sub        rax, 0x1

                     loc_96ad:
00000000000096ad         test       rax, rax                                    ; CODE XREF=re_node_set_compare.part.2+28
00000000000096b0         jns        loc_9690

00000000000096b2         mov        eax, 0x1
00000000000096b7         ret
                        ; endp
00000000000096b8         align      64

                     loc_96c0:
00000000000096c0         xor        eax, eax                                    ; CODE XREF=re_node_set_compare.part.2+55
00000000000096c2         ret
                        ; endp
00000000000096c3         align      16                                          ; End of unwind block (FDE at 0x198bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_contains.isra.3:
00000000000096d0         xor        eax, eax                                    ; Begin of unwind block (FDE at 0x198d0), CODE XREF=check_arrival_expand_ecl_sub+43, expand_bkref_cache+371, expand_bkref_cache+537, expand_bkref_cache+599, sub_epsilon_src_nodes+124, sub_epsilon_src_nodes+264, sub_epsilon_src_nodes+305, sub_epsilon_src_nodes+350, sub_epsilon_src_nodes+372, sub_epsilon_src_nodes+435, sub_epsilon_src_nodes+456
00000000000096d2         test       rdi, rdi
00000000000096d5         jle        loc_9715

00000000000096d7         mov        r8, qword [rsi]
00000000000096da         sub        rdi, 0x1
00000000000096de         xor        esi, esi

                     loc_96e0:
00000000000096e0         cmp        rsi, rdi                                    ; CODE XREF=re_node_set_contains.isra.3+103
00000000000096e3         jae        loc_970d

00000000000096e5         lea        rcx, qword [rsi+rdi]
00000000000096e9         shr        rcx, 0x1
00000000000096ec         cmp        rdx, qword [r8+rcx*8]
00000000000096f0         jle        loc_9708

00000000000096f2         jmp        loc_9720
00000000000096f4         align      8

                     loc_96f8:
00000000000096f8         lea        rax, qword [rsi+rcx]                        ; CODE XREF=re_node_set_contains.isra.3+59
00000000000096fc         shr        rax, 0x1
00000000000096ff         cmp        qword [r8+rax*8], rdx
0000000000009703         jl         loc_9730

0000000000009705         mov        rcx, rax

                     loc_9708:
0000000000009708         cmp        rsi, rcx                                    ; CODE XREF=re_node_set_contains.isra.3+32
000000000000970b         jb         loc_96f8

                     loc_970d:
000000000000970d         xor        eax, eax                                    ; CODE XREF=re_node_set_contains.isra.3+19
000000000000970f         cmp        rdx, qword [r8+rsi*8]
0000000000009713         je         loc_9740

                     loc_9715:
0000000000009715         ret                                                    ; CODE XREF=re_node_set_contains.isra.3+5
                        ; endp
0000000000009717         align      32

                     loc_9720:
0000000000009720         mov        rax, rcx                                    ; CODE XREF=re_node_set_contains.isra.3+34
0000000000009723         mov        rcx, rdi
0000000000009726         nop        word [cs:rax+rax]

                     loc_9730:
0000000000009730         lea        rsi, qword [rax+1]                          ; CODE XREF=re_node_set_contains.isra.3+51
0000000000009734         mov        rdi, rcx
0000000000009737         jmp        loc_96e0
0000000000009739         align      64

                     loc_9740:
0000000000009740         lea        rax, qword [rsi+1]                          ; CODE XREF=re_node_set_contains.isra.3+67
0000000000009744         ret
                        ; endp
0000000000009745         align      16                                          ; End of unwind block (FDE at 0x198d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_arrival_expand_ecl_sub:
0000000000009750         push       r15                                         ; Begin of unwind block (FDE at 0x198e4), CODE XREF=check_arrival_expand_ecl_sub+224, check_arrival_expand_ecl+216
0000000000009752         push       r14
0000000000009754         lea        r14, qword [rsi+0x10]
0000000000009758         push       r13
000000000000975a         push       r12
000000000000975c         mov        r15, rcx
000000000000975f         push       rbp
0000000000009760         push       rbx
0000000000009761         mov        r12, rdi
0000000000009764         mov        rbp, rsi
0000000000009767         mov        rbx, rdx
000000000000976a         mov        r13d, r8d
000000000000976d         sub        rsp, 0x8

                     loc_9771:
0000000000009771         mov        rdi, qword [rbp+8]                          ; CODE XREF=check_arrival_expand_ecl_sub+131
0000000000009775         mov        rdx, rbx
0000000000009778         mov        rsi, r14
000000000000977b         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000009780         test       rax, rax
0000000000009783         jne        loc_97f0

0000000000009785         mov        rax, rbx
0000000000009788         shl        rax, 0x4
000000000000978c         add        rax, qword [r12]
0000000000009790         movzx      edx, byte [rax+8]
0000000000009794         cmp        edx, r13d
0000000000009797         jne        loc_979e

0000000000009799         cmp        qword [rax], r15
000000000000979c         je         loc_97d8

                     loc_979e:
000000000000979e         mov        rsi, rbx                                    ; CODE XREF=check_arrival_expand_ecl_sub+71
00000000000097a1         mov        rdi, rbp
00000000000097a4         call       re_node_set_insert                          ; re_node_set_insert
00000000000097a9         test       al, al
00000000000097ab         je         loc_9808

00000000000097ad         lea        rbx, qword [rbx+rbx*2]
00000000000097b1         mov        rdx, qword [r12+0x28]
00000000000097b6         shl        rbx, 0x3
00000000000097ba         add        rdx, rbx
00000000000097bd         mov        rax, qword [rdx+8]
00000000000097c1         test       rax, rax
00000000000097c4         je         loc_97f0

00000000000097c6         cmp        rax, 0x2
00000000000097ca         mov        rdx, qword [rdx+0x10]
00000000000097ce         je         loc_9820

                     loc_97d0:
00000000000097d0         mov        rbx, qword [rdx]                            ; CODE XREF=check_arrival_expand_ecl_sub+243
00000000000097d3         jmp        loc_9771
00000000000097d5         align      8

                     loc_97d8:
00000000000097d8         cmp        r13d, 0x9                                   ; CODE XREF=check_arrival_expand_ecl_sub+76
00000000000097dc         jne        loc_97f0

00000000000097de         mov        rsi, rbx
00000000000097e1         mov        rdi, rbp
00000000000097e4         call       re_node_set_insert                          ; re_node_set_insert
00000000000097e9         test       al, al
00000000000097eb         je         loc_9808

00000000000097ed         nop        dword [rax]

                     loc_97f0:
00000000000097f0         xor        eax, eax                                    ; CODE XREF=check_arrival_expand_ecl_sub+51, check_arrival_expand_ecl_sub+116, check_arrival_expand_ecl_sub+140

                     loc_97f2:
00000000000097f2         add        rsp, 0x8                                    ; CODE XREF=check_arrival_expand_ecl_sub+231
00000000000097f6         pop        rbx
00000000000097f7         pop        rbp
00000000000097f8         pop        r12
00000000000097fa         pop        r13
00000000000097fc         pop        r14
00000000000097fe         pop        r15
0000000000009800         ret
                        ; endp
0000000000009801         align      8

                     loc_9808:
0000000000009808         add        rsp, 0x8                                    ; CODE XREF=check_arrival_expand_ecl_sub+91, check_arrival_expand_ecl_sub+155
000000000000980c         mov        eax, 0xc
0000000000009811         pop        rbx
0000000000009812         pop        rbp
0000000000009813         pop        r12
0000000000009815         pop        r13
0000000000009817         pop        r14
0000000000009819         pop        r15
000000000000981b         ret
                        ; endp
000000000000981c         align      32

                     loc_9820:
0000000000009820         mov        rdx, qword [rdx+8]                          ; CODE XREF=check_arrival_expand_ecl_sub+126
0000000000009824         mov        r8d, r13d
0000000000009827         mov        rcx, r15
000000000000982a         mov        rsi, rbp
000000000000982d         mov        rdi, r12
0000000000009830         call       check_arrival_expand_ecl_sub                ; check_arrival_expand_ecl_sub
0000000000009835         test       eax, eax
0000000000009837         jne        loc_97f2

0000000000009839         mov        rax, qword [r12+0x28]
000000000000983e         mov        rdx, qword [rax+rbx+0x10]
0000000000009843         jmp        loc_97d0
0000000000009845         align      16                                          ; End of unwind block (FDE at 0x198e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_remove_at.isra.4.part.5:
0000000000009850         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0x19948), CODE XREF=re_acquire_state_context+473, sub_epsilon_src_nodes+477, update_cur_sifted_state+1890
0000000000009853         cmp        rax, rdx
0000000000009856         jle        loc_9882

0000000000009858         sub        rax, 0x1
000000000000985c         cmp        rdx, rax
000000000000985f         mov        qword [rdi], rax
0000000000009862         jge        loc_9882

0000000000009864         mov        rax, qword [rsi]
0000000000009867         nop        word [rax+rax]

                     loc_9870:
0000000000009870         mov        rcx, qword [rax+rdx*8+8]                    ; CODE XREF=re_node_set_remove_at.isra.4.part.5+48
0000000000009875         mov        qword [rax+rdx*8], rcx
0000000000009879         add        rdx, 0x1
000000000000987d         cmp        rdx, qword [rdi]
0000000000009880         jl         loc_9870

                     loc_9882:
0000000000009882         ret                                                    ; CODE XREF=re_node_set_remove_at.isra.4.part.5+6, re_node_set_remove_at.isra.4.part.5+18
                        ; endp
0000000000009884         align      16                                          ; End of unwind block (FDE at 0x19948)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     optimize_subexps:
0000000000009890         movzx      eax, byte [rsi+0x30]                        ; Begin of unwind block (FDE at 0x1995c), DATA XREF=re_compile_internal+1553
0000000000009894         cmp        al, 0x4
0000000000009896         je         loc_98f0

0000000000009898         cmp        al, 0x11
000000000000989a         je         loc_98a0

                     loc_989c:
000000000000989c         xor        eax, eax                                    ; CODE XREF=optimize_subexps+23, optimize_subexps+29, optimize_subexps+74, optimize_subexps+93, optimize_subexps+106
000000000000989e         ret
                        ; endp
000000000000989f         align      32

                     loc_98a0:
00000000000098a0         mov        rax, qword [rsi+8]                          ; CODE XREF=optimize_subexps+10
00000000000098a4         test       rax, rax
00000000000098a7         je         loc_989c

00000000000098a9         cmp        byte [rax+0x30], 0x11
00000000000098ad         jne        loc_989c

00000000000098af         mov        rcx, qword [rax+0x28]
00000000000098b3         mov        rax, qword [rax+8]
00000000000098b7         test       rax, rax
00000000000098ba         mov        qword [rsi+8], rax
00000000000098be         je         loc_98c3

00000000000098c0         mov        qword [rax], rsi

                     loc_98c3:
00000000000098c3         mov        rax, qword [rdi+0xe0]                       ; CODE XREF=optimize_subexps+46
00000000000098ca         mov        rdx, qword [rsi+0x28]
00000000000098ce         cmp        rcx, 0x3f
00000000000098d2         mov        rdx, qword [rax+rdx*8]
00000000000098d6         mov        qword [rax+rcx*8], rdx
00000000000098da         jg         loc_989c

00000000000098dc         mov        rax, 0xfffffffffffffffe
00000000000098e3         rol        rax, cl
00000000000098e6         and        qword [rdi+0xa0], rax
00000000000098ed         jmp        loc_989c
00000000000098ef         align      16

                     loc_98f0:
00000000000098f0         mov        rax, qword [rdi+0xe0]                       ; CODE XREF=optimize_subexps+6
00000000000098f7         test       rax, rax
00000000000098fa         je         loc_989c

00000000000098fc         movsxd     rdx, dword [rsi+0x28]
0000000000009900         mov        rcx, qword [rax+rdx*8]
0000000000009904         mov        eax, 0x1
0000000000009909         shl        eax, cl
000000000000990b         mov        qword [rsi+0x28], rcx
000000000000990f         cdqe
0000000000009911         or         qword [rdi+0xa0], rax
0000000000009918         xor        eax, eax
000000000000991a         ret
                        ; endp
000000000000991b         align      32                                          ; End of unwind block (FDE at 0x1995c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     calc_next:
0000000000009920         movzx      eax, byte [rsi+0x30]                        ; Begin of unwind block (FDE at 0x19970), DATA XREF=re_compile_internal+1689
0000000000009924         mov        rdx, qword [rsi+8]
0000000000009928         cmp        al, 0xb
000000000000992a         je         loc_9970

000000000000992c         cmp        al, 0x10
000000000000992e         je         loc_9958

0000000000009930         test       rdx, rdx
0000000000009933         je         loc_993d

0000000000009935         mov        rax, qword [rsi+0x20]
0000000000009939         mov        qword [rdx+0x20], rax

                     loc_993d:
000000000000993d         mov        rax, qword [rsi+0x10]                       ; CODE XREF=calc_next+19
0000000000009941         test       rax, rax
0000000000009944         je         loc_994e

0000000000009946         mov        rdx, qword [rsi+0x20]
000000000000994a         mov        qword [rax+0x20], rdx

                     loc_994e:
000000000000994e         xor        eax, eax                                    ; CODE XREF=calc_next+36
0000000000009950         ret
                        ; endp
0000000000009951         align      8

                     loc_9958:
0000000000009958         mov        rax, qword [rsi+0x10]                       ; CODE XREF=calc_next+14
000000000000995c         mov        rcx, qword [rax+0x18]
0000000000009960         mov        qword [rdx+0x20], rcx
0000000000009964         mov        rdx, qword [rsi+0x20]
0000000000009968         mov        qword [rax+0x20], rdx
000000000000996c         xor        eax, eax
000000000000996e         ret
                        ; endp
000000000000996f         align      16

                     loc_9970:
0000000000009970         mov        qword [rdx+0x20], rsi                       ; CODE XREF=calc_next+10
0000000000009974         xor        eax, eax
0000000000009976         ret
                        ; endp
0000000000009977         align      128                                         ; End of unwind block (FDE at 0x19970)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112


                     check_dst_limits.isra.13:
0000000000009980         push       r15                                         ; Begin of unwind block (FDE at 0x19984), CODE XREF=sift_states_backward+396, update_cur_sifted_state+1699
0000000000009982         push       r14
0000000000009984         push       r13
0000000000009986         push       r12
0000000000009988         push       rbp
0000000000009989         push       rbx
000000000000998a         xor        ebx, ebx
000000000000998c         sub        rsp, 0x48
0000000000009990         mov        rax, qword [rdi+0x98]
0000000000009997         mov        r15, qword [rdi+0xc8]
000000000000999e         mov        r12, qword [rsp+0x78+arg_0]
00000000000099a6         mov        qword [rsp+0x78+var_70], rax
00000000000099ab         mov        rbp, r15

                     loc_99ae:
00000000000099ae         cmp        rbx, rbp                                    ; CODE XREF=check_dst_limits.isra.13+519
00000000000099b1         jge        loc_9a0b

00000000000099b3         lea        rax, qword [rbx+rbp]
00000000000099b7         mov        r13, qword [rdi+0xd8]
00000000000099be         mov        r10, rax
00000000000099c1         shr        r10, 0x3f
00000000000099c5         add        r10, rax
00000000000099c8         sar        r10, 0x1
00000000000099cb         lea        rax, qword [r10+r10*4]
00000000000099cf         cmp        r8, qword [r13+rax*8+8]
00000000000099d4         jle        loc_9a06

00000000000099d6         jmp        loc_9b70
00000000000099db         align      32

                     loc_99e0:
00000000000099e0         lea        r11, qword [rbx+r10]                        ; CODE XREF=check_dst_limits.isra.13+137
00000000000099e4         mov        rax, r11
00000000000099e7         shr        rax, 0x3f
00000000000099eb         add        rax, r11
00000000000099ee         sar        rax, 0x1
00000000000099f1         lea        r11, qword [rax+rax*4]
00000000000099f5         mov        r14, rax
00000000000099f8         cmp        qword [r13+r11*8+8], r8
00000000000099fd         jl         loc_9b80

0000000000009a03         mov        r10, rax

                     loc_9a06:
0000000000009a06         cmp        rbx, r10                                    ; CODE XREF=check_dst_limits.isra.13+84
0000000000009a09         jl         loc_99e0

                     loc_9a0b:
0000000000009a0b         cmp        r15, rbx                                    ; CODE XREF=check_dst_limits.isra.13+49
0000000000009a0e         jle        loc_9bb0

0000000000009a14         mov        r11, qword [rdi+0xd8]
0000000000009a1b         lea        rax, qword [rbx+rbx*4]
0000000000009a1f         lea        rax, qword [r11+rax*8]
0000000000009a23         cmp        r8, qword [rax+8]
0000000000009a27         mov        rax, 0xffffffffffffffff
0000000000009a2e         cmovne     rbx, rax

                     loc_9a32:
0000000000009a32         mov        rax, r15                                    ; CODE XREF=sub_9b90+39
0000000000009a35         xor        ebp, ebp

                     loc_9a37:
0000000000009a37         cmp        rbp, rax                                    ; CODE XREF=sub_9b90+23
0000000000009a3a         jge        loc_9a94

0000000000009a3c         lea        r11, qword [rbp+rax]
0000000000009a41         mov        r10, r11
0000000000009a44         shr        r10, 0x3f
0000000000009a48         add        r10, r11
0000000000009a4b         mov        r11, qword [rdi+0xd8]
0000000000009a52         sar        r10, 0x1
0000000000009a55         lea        r13, qword [r10+r10*4]
0000000000009a59         cmp        r12, qword [r11+r13*8+8]
0000000000009a5e         jle        loc_9a8f

0000000000009a60         jmp        sub_9b90                                    ; sub_9b90
                        ; endp
0000000000009a65         align      8

                     loc_9a68:
0000000000009a68         lea        r13, qword [rbp+r10]                        ; CODE XREF=check_dst_limits.isra.13+274
0000000000009a6d         mov        rax, r13
0000000000009a70         shr        rax, 0x3f
0000000000009a74         add        rax, r13
0000000000009a77         sar        rax, 0x1
0000000000009a7a         lea        r13, qword [rax+rax*4]
0000000000009a7e         mov        r14, rax
0000000000009a81         cmp        qword [r11+r13*8+8], r12
0000000000009a86         jl         loc_9ba0

0000000000009a8c         mov        r10, rax

                     loc_9a8f:
0000000000009a8f         cmp        rbp, r10                                    ; CODE XREF=check_dst_limits.isra.13+222
0000000000009a92         jl         loc_9a68

                     loc_9a94:
0000000000009a94         cmp        r15, rbp                                    ; CODE XREF=check_dst_limits.isra.13+186
0000000000009a97         jle        loc_9bc0

0000000000009a9d         mov        r10, qword [rdi+0xd8]
0000000000009aa4         lea        rax, qword [rbp+rbp*4]
0000000000009aa9         lea        rax, qword [r10+rax*8]
0000000000009aad         cmp        r12, qword [rax+8]
0000000000009ab1         mov        rax, 0xffffffffffffffff
0000000000009ab8         cmovne     rbp, rax

                     loc_9abc:
0000000000009abc         cmp        qword [rsi], 0x0                            ; CODE XREF=sub_9b90+55
0000000000009ac0         jle        loc_9be2

0000000000009ac6         mov        qword [rsp+0x78+var_48], rbp
0000000000009acb         mov        qword [rsp+0x78+var_58], r9
0000000000009ad0         mov        r13, rdi
0000000000009ad3         mov        qword [rsp+0x78+var_60], r8
0000000000009ad8         mov        qword [rsp+0x78+var_68], rcx
0000000000009add         xor        r14d, r14d
0000000000009ae0         mov        qword [rsp+0x78+var_40], rsi
0000000000009ae5         mov        qword [rsp+0x78+var_50], rbx
0000000000009aea         mov        rbp, rdx
0000000000009aed         mov        r15, r12

                     loc_9af0:
0000000000009af0         mov        rax, qword [rbp]                            ; CODE XREF=sub_9b90+76
0000000000009af4         mov        rdx, qword [r13+0xd8]
0000000000009afb         mov        rdi, r13
0000000000009afe         mov        r9, qword [rsp+0x78+var_50]
0000000000009b03         mov        r8, qword [rsp+0x78+var_60]
0000000000009b08         mov        rcx, qword [rsp+0x78+var_68]
0000000000009b0d         mov        rsi, qword [rax+r14*8]
0000000000009b11         lea        rax, qword [rsi+rsi*4]
0000000000009b15         lea        rax, qword [rdx+rax*8]
0000000000009b19         mov        rdx, qword [rsp+0x78+var_70]
0000000000009b1e         mov        rax, qword [rax]
0000000000009b21         shl        rax, 0x4
0000000000009b25         add        rax, qword [rdx]
0000000000009b28         mov        r12, qword [rax]
0000000000009b2b         mov        rdx, r12
0000000000009b2e         call       check_dst_limits_calc_pos                   ; check_dst_limits_calc_pos
0000000000009b33         mov        ebx, eax
0000000000009b35         mov        rax, qword [rbp]
0000000000009b39         mov        r9, qword [rsp+0x78+var_48]
0000000000009b3e         mov        rcx, qword [rsp+0x78+var_58]
0000000000009b43         mov        r8, r15
0000000000009b46         mov        rdx, r12
0000000000009b49         mov        rdi, r13
0000000000009b4c         mov        rsi, qword [rax+r14*8]
0000000000009b50         call       check_dst_limits_calc_pos                   ; check_dst_limits_calc_pos
0000000000009b55         cmp        ebx, eax
0000000000009b57         je         loc_9bd0

0000000000009b59         mov        eax, 0x1

                     loc_9b5e:
0000000000009b5e         add        rsp, 0x48                                   ; CODE XREF=sub_9b90+84
0000000000009b62         pop        rbx
0000000000009b63         pop        rbp
0000000000009b64         pop        r12
0000000000009b66         pop        r13
0000000000009b68         pop        r14
0000000000009b6a         pop        r15
0000000000009b6c         ret
                        ; endp
0000000000009b6d         align      16

                     loc_9b70:
0000000000009b70         mov        r14, r10                                    ; CODE XREF=check_dst_limits.isra.13+86
0000000000009b73         mov        r10, rbp
0000000000009b76         nop        word [cs:rax+rax]

                     loc_9b80:
0000000000009b80         lea        rbx, qword [r14+1]                          ; CODE XREF=check_dst_limits.isra.13+125
0000000000009b84         mov        rbp, r10
0000000000009b87         jmp        loc_99ae
0000000000009b8c         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9b90:
0000000000009b90         mov        r14, r10                                    ; CODE XREF=check_dst_limits.isra.13+224
0000000000009b93         mov        r10, rax
0000000000009b96         nop        word [cs:rax+rax]
                        ; endp

                     loc_9ba0:
0000000000009ba0         lea        rbp, qword [r14+1]                          ; CODE XREF=check_dst_limits.isra.13+262
0000000000009ba4         mov        rax, r10
0000000000009ba7         jmp        loc_9a37
0000000000009bac         align      16

                     loc_9bb0:
0000000000009bb0         mov        rbx, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits.isra.13+142
0000000000009bb7         jmp        loc_9a32
0000000000009bbc         align      64

                     loc_9bc0:
0000000000009bc0         mov        rbp, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits.isra.13+279
0000000000009bc7         jmp        loc_9abc
0000000000009bcc         align      16

                     loc_9bd0:
0000000000009bd0         mov        rax, qword [rsp+0x78+var_40]                ; CODE XREF=check_dst_limits.isra.13+471
0000000000009bd5         add        r14, 0x1
0000000000009bd9         cmp        r14, qword [rax]
0000000000009bdc         jl         loc_9af0

                     loc_9be2:
0000000000009be2         xor        eax, eax                                    ; CODE XREF=check_dst_limits.isra.13+320
0000000000009be4         jmp        loc_9b5e
0000000000009be9         align      16                                          ; End of unwind block (FDE at 0x19984)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_merge:
0000000000009bf0         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x199d4), CODE XREF=calc_eclosure_iter+306, check_arrival_expand_ecl+275, expand_bkref_cache+694, build_trtable+557, check_arrival+389, check_arrival+692, update_cur_sifted_state+870, sub_14c00+791
0000000000009bf3         je         loc_9ce8

0000000000009bf9         mov        rdx, qword [rsi+8]
0000000000009bfd         test       rdx, rdx
0000000000009c00         je         loc_9ce8

0000000000009c06         push       r12
0000000000009c08         push       rbp
0000000000009c09         mov        r12, rsi
0000000000009c0c         push       rbx
0000000000009c0d         mov        rax, qword [rdi+8]
0000000000009c11         mov        rbx, rdi
0000000000009c14         mov        rsi, qword [rdi]
0000000000009c17         lea        rcx, qword [rax+rdx*2]
0000000000009c1b         cmp        rsi, rcx
0000000000009c1e         jl         loc_9d68

                     loc_9c24:
0000000000009c24         test       rax, rax                                    ; CODE XREF=re_node_set_merge+420
0000000000009c27         je         loc_9da0

0000000000009c2d         lea        rbp, qword [rax+rdx*2]
0000000000009c31         sub        rdx, 0x1
0000000000009c35         sub        rax, 0x1
0000000000009c39         mov        rdi, rdx
0000000000009c3c         not        rdi

                     loc_9c3f:
0000000000009c3f         test       rdi, rdi                                    ; CODE XREF=re_node_set_merge+270, re_node_set_merge+284
0000000000009c42         jns        loc_9c80

                     loc_9c44:
0000000000009c44         test       rax, rax                                    ; CODE XREF=re_node_set_merge+139
0000000000009c47         js         loc_9c80

0000000000009c49         mov        rcx, qword [rbx+0x10]
0000000000009c4d         mov        rsi, qword [r12+0x10]
0000000000009c52         mov        rsi, qword [rsi+rdx*8]
0000000000009c56         cmp        qword [rcx+rax*8], rsi
0000000000009c5a         je         loc_9cf0

0000000000009c60         jge        loc_9d08

0000000000009c66         sub        rdx, 0x1
0000000000009c6a         sub        rbp, 0x1
0000000000009c6e         mov        rdi, rdx
0000000000009c71         mov        qword [rcx+rbp*8], rsi
0000000000009c75         not        rdi
0000000000009c78         test       rdi, rdi
0000000000009c7b         js         loc_9c44

0000000000009c7d         nop        dword [rax]

                     loc_9c80:
0000000000009c80         test       rdx, rdx                                    ; CODE XREF=re_node_set_merge+82, re_node_set_merge+87
0000000000009c83         jns        loc_9d18

                     loc_9c89:
0000000000009c89         mov        rcx, qword [rbx+8]                          ; CODE XREF=re_node_set_merge+325
0000000000009c8d         mov        rax, qword [r12+8]
0000000000009c92         lea        r8, qword [rcx+rax*2-1]
0000000000009c97         mov        rdx, r8
0000000000009c9a         sub        rdx, rbp
0000000000009c9d         add        rdx, 0x1
0000000000009ca1         je         loc_9cda

0000000000009ca3         mov        rdi, qword [rbx+0x10]
0000000000009ca7         lea        rax, qword [rcx-1]
0000000000009cab         add        rcx, rdx
0000000000009cae         mov        qword [rbx+8], rcx
0000000000009cb2         nop        word [rax+rax]

                     loc_9cb8:
0000000000009cb8         mov        rsi, qword [rdi+r8*8]                       ; CODE XREF=re_node_set_merge+232, re_node_set_merge+343
0000000000009cbc         mov        rcx, qword [rdi+rax*8]
0000000000009cc0         lea        r9, qword [rax+rdx]
0000000000009cc4         lea        r9, qword [rdi+r9*8]
0000000000009cc8         cmp        rsi, rcx
0000000000009ccb         jle        loc_9d40

0000000000009ccd         sub        r8, 0x1
0000000000009cd1         sub        rdx, 0x1
0000000000009cd5         mov        qword [r9], rsi
0000000000009cd8         jne        loc_9cb8

                     loc_9cda:
0000000000009cda         xor        eax, eax                                    ; CODE XREF=re_node_set_merge+177, re_node_set_merge+463

                     loc_9cdc:
0000000000009cdc         pop        rbx                                         ; CODE XREF=re_node_set_merge+364, re_node_set_merge+473
0000000000009cdd         pop        rbp
0000000000009cde         pop        r12
0000000000009ce0         ret
                        ; endp
0000000000009ce1         align      8

                     loc_9ce8:
0000000000009ce8         xor        eax, eax                                    ; CODE XREF=re_node_set_merge+3, re_node_set_merge+16
0000000000009cea         ret
                        ; endp
0000000000009ceb         align      16

                     loc_9cf0:
0000000000009cf0         sub        rdx, 0x1                                    ; CODE XREF=re_node_set_merge+106
0000000000009cf4         sub        rax, 0x1
0000000000009cf8         mov        rdi, rdx
0000000000009cfb         not        rdi
0000000000009cfe         jmp        loc_9c3f
0000000000009d03         align      8

                     loc_9d08:
0000000000009d08         sub        rax, 0x1                                    ; CODE XREF=re_node_set_merge+112
0000000000009d0c         jmp        loc_9c3f
0000000000009d11         align      8

                     loc_9d18:
0000000000009d18         mov        rax, qword [rbx+0x10]                       ; CODE XREF=re_node_set_merge+147
0000000000009d1c         add        rdx, 0x1
0000000000009d20         mov        rsi, qword [r12+0x10]                       ; argument "__src" for method j_memcpy
0000000000009d25         sub        rbp, rdx
0000000000009d28         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
0000000000009d2c         lea        rdi, qword [rax+rbp*8]                      ; argument "__dest" for method j_memcpy
0000000000009d30         call       j_memcpy                                    ; memcpy
0000000000009d35         jmp        loc_9c89
0000000000009d3a         align      64

                     loc_9d40:
0000000000009d40         sub        rax, 0x1                                    ; CODE XREF=re_node_set_merge+219
0000000000009d44         mov        qword [r9], rcx
0000000000009d47         jns        loc_9cb8

0000000000009d4d         lea        rsi, qword [rdi+rbp*8]                      ; argument "__src" for method j_memcpy
0000000000009d51         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
0000000000009d55         call       j_memcpy                                    ; memcpy
0000000000009d5a         xor        eax, eax
0000000000009d5c         jmp        loc_9cdc
0000000000009d61         align      8

                     loc_9d68:
0000000000009d68         add        rdx, rsi                                    ; CODE XREF=re_node_set_merge+46
0000000000009d6b         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_realloc
0000000000009d6f         lea        rbp, qword [rdx+rdx]
0000000000009d73         shl        rdx, 0x4
0000000000009d77         mov        rsi, rdx                                    ; argument "__size" for method j_realloc
0000000000009d7a         call       j_realloc                                   ; realloc
0000000000009d7f         test       rax, rax
0000000000009d82         je         loc_9dc4

0000000000009d84         mov        qword [rbx+0x10], rax
0000000000009d88         mov        qword [rbx], rbp
0000000000009d8b         mov        rax, qword [rbx+8]
0000000000009d8f         mov        rdx, qword [r12+8]
0000000000009d94         jmp        loc_9c24
0000000000009d99         align      32

                     loc_9da0:
0000000000009da0         mov        qword [rbx+8], rdx                          ; CODE XREF=re_node_set_merge+55
0000000000009da4         mov        rax, qword [r12+8]
0000000000009da9         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memcpy
0000000000009dad         mov        rsi, qword [r12+0x10]                       ; argument "__src" for method j_memcpy
0000000000009db2         lea        rdx, qword [rax*8]                          ; argument "__n" for method j_memcpy
0000000000009dba         call       j_memcpy                                    ; memcpy
0000000000009dbf         jmp        loc_9cda

                     loc_9dc4:
0000000000009dc4         mov        eax, 0xc                                    ; CODE XREF=re_node_set_merge+402
0000000000009dc9         jmp        loc_9cdc
0000000000009dce         align      16                                          ; End of unwind block (FDE at 0x199d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_7D: int8_t, -125
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144


                     calc_eclosure_iter:
0000000000009dd0         push       r15                                         ; Begin of unwind block (FDE at 0x19a0c), CODE XREF=calc_eclosure_iter+654, sub_14c00+170
0000000000009dd2         push       r14
0000000000009dd4         mov        r15, rsi
0000000000009dd7         push       r13
0000000000009dd9         push       r12
0000000000009ddb         push       rbp
0000000000009ddc         push       rbx
0000000000009ddd         lea        rbx, qword [rdx+rdx*2]
0000000000009de1         mov        rbp, rdx
0000000000009de4         sub        rsp, 0x68
0000000000009de8         mov        r12, qword [rsi+0x28]
0000000000009dec         shl        rbx, 0x3
0000000000009df0         mov        rax, qword [fs:0x28]
0000000000009df9         mov        qword [rsp+0x98+var_40], rax
0000000000009dfe         xor        eax, eax
0000000000009e00         mov        qword [rsp+0x98+var_88], rdi
0000000000009e05         mov        dword [rsp+0x98+var_7C], ecx
0000000000009e09         add        r12, rbx
0000000000009e0c         mov        rax, qword [r12+8]
0000000000009e11         mov        qword [rsp+0x98+var_70], 0x0
0000000000009e1a         lea        rdi, qword [rax+1]
0000000000009e1e         mov        qword [rsp+0x98+var_78], rdi
0000000000009e23         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
0000000000009e27         call       j_malloc                                    ; malloc
0000000000009e2c         test       rax, rax
0000000000009e2f         mov        qword [rsp+0x98+var_68], rax
0000000000009e34         je         loc_a070

0000000000009e3a         mov        rax, qword [r15+0x30]
0000000000009e3e         mov        rdx, qword [r15]
0000000000009e41         mov        r13, rbp
0000000000009e44         shl        r13, 0x4
0000000000009e48         mov        qword [rax+rbx+8], 0xffffffffffffffff
0000000000009e51         lea        rax, qword [rdx+r13]
0000000000009e55         mov        r8d, dword [rax+8]
0000000000009e59         test       r8d, 0x3ff00
0000000000009e60         jne        loc_a000

                     loc_9e66:
0000000000009e66         test       byte [rax+8], 0x8                           ; CODE XREF=calc_eclosure_iter+589, calc_eclosure_iter+637
0000000000009e6a         je         loc_9f30

0000000000009e70         mov        rsi, qword [r15+0x28]
0000000000009e74         lea        rax, qword [rsi+rbx]
0000000000009e78         cmp        qword [rax+8], 0x0
0000000000009e7d         jle        loc_9f30

0000000000009e83         lea        rdx, qword [rsp+0x98+var_78]
0000000000009e88         mov        byte [rsp+0x98+var_7D], 0x0
0000000000009e8d         xor        r14d, r14d
0000000000009e90         lea        r12, qword [rsp+0x98+var_58]
0000000000009e95         mov        qword [rsp+0x98+var_90], rdx
0000000000009e9a         jmp        loc_9eb6
0000000000009e9c         align      32

                     loc_9ea0:
0000000000009ea0         mov        rsi, qword [r15+0x28]                       ; CODE XREF=calc_eclosure_iter+325, calc_eclosure_iter+342
0000000000009ea4         add        r14, 0x1
0000000000009ea8         lea        rax, qword [rsi+rbx]
0000000000009eac         cmp        qword [rax+8], r14
0000000000009eb0         jle        loc_9fb7

                     loc_9eb6:
0000000000009eb6         mov        rax, qword [rax+0x10]                       ; CODE XREF=calc_eclosure_iter+202, calc_eclosure_iter+481
0000000000009eba         mov        rdx, qword [rax+r14*8]
0000000000009ebe         mov        rax, qword [r15+0x30]
0000000000009ec2         lea        r8, qword [rdx+rdx*2]
0000000000009ec6         lea        r13, qword [r8*8]
0000000000009ece         add        rax, r13
0000000000009ed1         mov        rcx, qword [rax+8]
0000000000009ed5         cmp        rcx, 0xffffffffffffffff
0000000000009ed9         je         loc_9fa0

0000000000009edf         test       rcx, rcx
0000000000009ee2         je         loc_a058

0000000000009ee8         movdqu     xmm0, xmmword [rax]
0000000000009eec         movaps     xmmword [rsp+0x98+var_58], xmm0
0000000000009ef1         mov        rax, qword [rax+0x10]
0000000000009ef5         mov        qword [rsp+0x98+var_48], rax

                     loc_9efa:
0000000000009efa         mov        rdi, qword [rsp+0x98+var_90]                ; CODE XREF=calc_eclosure_iter+661
0000000000009eff         mov        rsi, r12
0000000000009f02         call       re_node_set_merge                           ; re_node_set_merge
0000000000009f07         test       eax, eax
0000000000009f09         jne        loc_9f76

0000000000009f0b         mov        rax, qword [r15+0x30]
0000000000009f0f         cmp        qword [rax+r13+8], 0x0
0000000000009f15         jne        loc_9ea0

0000000000009f17         mov        rdi, qword [rsp+0x98+var_48]                ; argument "__ptr" for method j_free
0000000000009f1c         call       j_free                                      ; free
0000000000009f21         mov        byte [rsp+0x98+var_7D], 0x1
0000000000009f26         jmp        loc_9ea0
0000000000009f2b         align      16

                     loc_9f30:
0000000000009f30         lea        rdi, qword [rsp+0x98+var_78]                ; CODE XREF=calc_eclosure_iter+154, calc_eclosure_iter+173, calc_eclosure_iter+566
0000000000009f35         mov        rsi, rbp
0000000000009f38         call       re_node_set_insert                          ; re_node_set_insert
0000000000009f3d         test       al, al
0000000000009f3f         je         loc_a070

0000000000009f45         mov        rax, qword [r15+0x30]

                     loc_9f49:
0000000000009f49         movdqa     xmm0, xmmword [rsp+0x98+var_78]             ; CODE XREF=calc_eclosure_iter+521, calc_eclosure_iter+532
0000000000009f4f         movups     xmmword [rax+rbx], xmm0
0000000000009f53         mov        rdx, qword [rsp+0x98+var_68]
0000000000009f58         mov        qword [rax+rbx+0x10], rdx

                     loc_9f5d:
0000000000009f5d         mov        rbx, qword [rsp+0x98+var_88]                ; CODE XREF=calc_eclosure_iter+546
0000000000009f62         mov        rax, qword [rsp+0x98+var_68]
0000000000009f67         movdqa     xmm0, xmmword [rsp+0x98+var_78]
0000000000009f6d         movaps     xmmword [rbx], xmm0
0000000000009f70         mov        qword [rbx+0x10], rax
0000000000009f74         xor        eax, eax

                     loc_9f76:
0000000000009f76         mov        rsi, qword [rsp+0x98+var_40]                ; CODE XREF=calc_eclosure_iter+313, calc_eclosure_iter+625, calc_eclosure_iter+667, calc_eclosure_iter+677
0000000000009f7b         xor        rsi, qword [fs:0x28]
0000000000009f84         jne        loc_a07a

0000000000009f8a         add        rsp, 0x68
0000000000009f8e         pop        rbx
0000000000009f8f         pop        rbp
0000000000009f90         pop        r12
0000000000009f92         pop        r13
0000000000009f94         pop        r14
0000000000009f96         pop        r15
0000000000009f98         ret
                        ; endp
0000000000009f99         align      32

                     loc_9fa0:
0000000000009fa0         lea        rax, qword [rsi+rbx]                        ; CODE XREF=calc_eclosure_iter+265
0000000000009fa4         add        r14, 0x1
0000000000009fa8         mov        byte [rsp+0x98+var_7D], 0x1
0000000000009fad         cmp        qword [rax+8], r14
0000000000009fb1         jg         loc_9eb6

                     loc_9fb7:
0000000000009fb7         lea        rdi, qword [rsp+0x98+var_78]                ; CODE XREF=calc_eclosure_iter+224
0000000000009fbc         mov        rsi, rbp
0000000000009fbf         call       re_node_set_insert                          ; re_node_set_insert
0000000000009fc4         test       al, al
0000000000009fc6         je         loc_a070

0000000000009fcc         cmp        byte [rsp+0x98+var_7C], 0x1
0000000000009fd1         mov        rax, qword [r15+0x30]
0000000000009fd5         lea        rdx, qword [rax+rbx]
0000000000009fd9         je         loc_9f49

0000000000009fdf         cmp        byte [rsp+0x98+var_7D], 0x0
0000000000009fe4         je         loc_9f49

0000000000009fea         mov        qword [rdx+8], 0x0
0000000000009ff2         jmp        loc_9f5d
0000000000009ff7         align      8192

                     loc_a000:
000000000000a000         cmp        qword [r12+8], 0x0                          ; CODE XREF=calc_eclosure_iter+144
000000000000a006         je         loc_9f30

000000000000a00c         mov        rcx, qword [r12+0x10]
000000000000a011         mov        rcx, qword [rcx]
000000000000a014         shl        rcx, 0x4
000000000000a018         test       byte [rdx+rcx+0xa], 0x4
000000000000a01d         jne        loc_9e66

000000000000a023         shr        r8d, 0x8
000000000000a027         mov        rcx, rbp
000000000000a02a         mov        rdx, rbp
000000000000a02d         and        r8d, 0x3ff
000000000000a034         mov        rsi, rbp
000000000000a037         mov        rdi, r15
000000000000a03a         call       duplicate_node_closure                      ; duplicate_node_closure
000000000000a03f         test       eax, eax
000000000000a041         jne        loc_9f76

000000000000a047         mov        rax, qword [r15]
000000000000a04a         add        rax, r13
000000000000a04d         jmp        loc_9e66
000000000000a052         align      8

                     loc_a058:
000000000000a058         mov        rsi, r15                                    ; CODE XREF=calc_eclosure_iter+274
000000000000a05b         mov        rdi, r12
000000000000a05e         call       calc_eclosure_iter                          ; calc_eclosure_iter
000000000000a063         test       eax, eax
000000000000a065         je         loc_9efa

000000000000a06b         jmp        loc_9f76

                     loc_a070:
000000000000a070         mov        eax, 0xc                                    ; CODE XREF=calc_eclosure_iter+100, calc_eclosure_iter+367, calc_eclosure_iter+502
000000000000a075         jmp        loc_9f76

                     loc_a07a:
000000000000a07a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=calc_eclosure_iter+436
                        ; endp
000000000000a07f         align      128                                         ; End of unwind block (FDE at 0x19a0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     check_arrival_expand_ecl:
000000000000a080         push       r15                                         ; Begin of unwind block (FDE at 0x19a5c), CODE XREF=expand_bkref_cache+680, check_arrival+884, check_arrival+1283
000000000000a082         push       r14
000000000000a084         mov        r14, rdi
000000000000a087         push       r13
000000000000a089         push       r12
000000000000a08b         mov        r15, rsi
000000000000a08e         push       rbp
000000000000a08f         push       rbx
000000000000a090         mov        rbp, rdx
000000000000a093         mov        ebx, ecx
000000000000a095         sub        rsp, 0x38
000000000000a099         mov        r12, qword [rsi+8]
000000000000a09d         mov        rax, qword [fs:0x28]
000000000000a0a6         mov        qword [rsp+0x68+var_40], rax
000000000000a0ab         xor        eax, eax
000000000000a0ad         mov        qword [rsp+0x68+var_50], 0x0
000000000000a0b6         lea        rdi, qword [r12*8]                          ; argument "__size" for method j_malloc
000000000000a0be         mov        qword [rsp+0x68+var_58], r12
000000000000a0c3         call       j_malloc                                    ; malloc
000000000000a0c8         test       rax, rax
000000000000a0cb         mov        qword [rsp+0x68+var_48], rax
000000000000a0d0         je         loc_a1cd

000000000000a0d6         test       r12, r12
000000000000a0d9         jle        loc_a16b

000000000000a0df         lea        r12, qword [rsp+0x68+var_58]
000000000000a0e4         xor        r13d, r13d
000000000000a0e7         nop        word [rax+rax]

                     loc_a0f0:
000000000000a0f0         mov        rax, qword [r15+0x10]                       ; CODE XREF=check_arrival_expand_ecl+233
000000000000a0f4         mov        rdx, qword [rax+r13*8]
000000000000a0f8         mov        rax, qword [r14+0x30]
000000000000a0fc         lea        rcx, qword [rdx+rdx*2]
000000000000a100         lea        rsi, qword [rax+rcx*8]
000000000000a104         mov        r8, qword [rsi+8]
000000000000a108         test       r8, r8
000000000000a10b         jle        loc_a190

000000000000a111         mov        r10, qword [rsi+0x10]
000000000000a115         mov        r9, qword [r14]
000000000000a118         xor        ecx, ecx
000000000000a11a         jmp        loc_a129
000000000000a11c         align      32

                     loc_a120:
000000000000a120         add        rcx, 0x1                                    ; CODE XREF=check_arrival_expand_ecl+191, check_arrival_expand_ecl+196
000000000000a124         cmp        r8, rcx
000000000000a127         je         loc_a190

                     loc_a129:
000000000000a129         mov        rdi, qword [r10+rcx*8]                      ; CODE XREF=check_arrival_expand_ecl+154
000000000000a12d         mov        rax, rdi
000000000000a130         shl        rax, 0x4
000000000000a134         add        rax, r9
000000000000a137         movzx      r11d, byte [rax+8]
000000000000a13c         cmp        ebx, r11d
000000000000a13f         jne        loc_a120

000000000000a141         cmp        rbp, qword [rax]
000000000000a144         jne        loc_a120

000000000000a146         cmp        rdi, 0xffffffffffffffff
000000000000a14a         je         loc_a190

000000000000a14c         mov        r8d, ebx
000000000000a14f         mov        rcx, rbp
000000000000a152         mov        rsi, r12
000000000000a155         mov        rdi, r14
000000000000a158         call       check_arrival_expand_ecl_sub                ; check_arrival_expand_ecl_sub
000000000000a15d         test       eax, eax
000000000000a15f         jne        loc_a19c

                     loc_a161:
000000000000a161         add        r13, 0x1                                    ; CODE XREF=check_arrival_expand_ecl+282
000000000000a165         cmp        qword [r15+8], r13
000000000000a169         jg         loc_a0f0

                     loc_a16b:
000000000000a16b         mov        rdi, qword [r15+0x10]                       ; argument "__ptr" for method j_free, CODE XREF=check_arrival_expand_ecl+89
000000000000a16f         call       j_free                                      ; free
000000000000a174         mov        rax, qword [rsp+0x68+var_48]
000000000000a179         movdqa     xmm0, xmmword [rsp+0x68+var_58]
000000000000a17f         mov        qword [r15+0x10], rax
000000000000a183         xor        eax, eax
000000000000a185         movaps     xmmword [r15], xmm0
000000000000a189         jmp        loc_a1ae
000000000000a18b         align      16

                     loc_a190:
000000000000a190         mov        rdi, r12                                    ; CODE XREF=check_arrival_expand_ecl+139, check_arrival_expand_ecl+167, check_arrival_expand_ecl+202
000000000000a193         call       re_node_set_merge                           ; re_node_set_merge
000000000000a198         test       eax, eax
000000000000a19a         je         loc_a161

                     loc_a19c:
000000000000a19c         mov        rdi, qword [rsp+0x68+var_48]                ; argument "__ptr" for method j_free, CODE XREF=check_arrival_expand_ecl+223
000000000000a1a1         mov        dword [rsp+0x68+var_5C], eax
000000000000a1a5         call       j_free                                      ; free
000000000000a1aa         mov        eax, dword [rsp+0x68+var_5C]

                     loc_a1ae:
000000000000a1ae         mov        rdx, qword [rsp+0x68+var_40]                ; CODE XREF=check_arrival_expand_ecl+265, check_arrival_expand_ecl+338
000000000000a1b3         xor        rdx, qword [fs:0x28]
000000000000a1bc         jne        loc_a1d4

000000000000a1be         add        rsp, 0x38
000000000000a1c2         pop        rbx
000000000000a1c3         pop        rbp
000000000000a1c4         pop        r12
000000000000a1c6         pop        r13
000000000000a1c8         pop        r14
000000000000a1ca         pop        r15
000000000000a1cc         ret
                        ; endp

                     loc_a1cd:
000000000000a1cd         mov        eax, 0xc                                    ; CODE XREF=check_arrival_expand_ecl+80
000000000000a1d2         jmp        loc_a1ae

                     loc_a1d4:
000000000000a1d4         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=check_arrival_expand_ecl+316
                        ; endp
000000000000a1d9         align      32                                          ; End of unwind block (FDE at 0x19a5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_add_intersect:
000000000000a1e0         mov        r9, qword [rsi+8]                           ; Begin of unwind block (FDE at 0x19aa8), CODE XREF=sub_epsilon_src_nodes+156, update_cur_sifted_state+263
000000000000a1e4         xor        eax, eax
000000000000a1e6         test       r9, r9
000000000000a1e9         je         loc_a2a8

000000000000a1ef         mov        r11, qword [rdx+8]
000000000000a1f3         test       r11, r11
000000000000a1f6         je         loc_a2a8

000000000000a1fc         push       r13
000000000000a1fe         push       r12
000000000000a200         lea        rax, qword [r9+r11]
000000000000a204         push       rbp
000000000000a205         push       rbx
000000000000a206         mov        r12, rdx
000000000000a209         mov        rbx, rdi
000000000000a20c         mov        rbp, rsi
000000000000a20f         sub        rsp, 0x8
000000000000a213         mov        rcx, qword [rdi+8]
000000000000a217         mov        r13, qword [rdi]
000000000000a21a         mov        rdi, qword [rdi+0x10]
000000000000a21e         lea        rdx, qword [rax+rcx]
000000000000a222         cmp        rdx, r13
000000000000a225         jg         loc_a350

                     loc_a22b:
000000000000a22b         lea        rsi, qword [rcx+r9]                         ; CODE XREF=re_node_set_add_intersect+412
000000000000a22f         mov        r13, qword [rbp+0x10]
000000000000a233         mov        rdx, qword [r12+0x10]
000000000000a238         sub        r9, 0x1
000000000000a23c         sub        rcx, 0x1
000000000000a240         add        rsi, r11
000000000000a243         sub        r11, 0x1
000000000000a247         mov        rax, qword [r13+r9*8]
000000000000a24c         mov        r8, qword [rdx+r11*8]

                     loc_a250:
000000000000a250         cmp        rax, r8                                     ; CODE XREF=re_node_set_add_intersect+219
000000000000a253         je         loc_a266

                     loc_a255:
000000000000a255         jge        loc_a2b0                                    ; CODE XREF=re_node_set_add_intersect+132

000000000000a257         sub        r11, 0x1
000000000000a25b         js         loc_a2c0

                     loc_a25d:
000000000000a25d         mov        r8, qword [rdx+r11*8]                       ; CODE XREF=re_node_set_add_intersect+193
000000000000a261         cmp        rax, r8
000000000000a264         jne        loc_a255

                     loc_a266:
000000000000a266         test       rcx, rcx                                    ; CODE XREF=re_node_set_add_intersect+115
000000000000a269         jns        loc_a27a

000000000000a26b         jmp        loc_a288
000000000000a26d         align      16

                     loc_a270:
000000000000a270         sub        rcx, 0x1                                    ; CODE XREF=re_node_set_add_intersect+161
000000000000a274         cmp        rcx, 0xffffffffffffffff
000000000000a278         je         loc_a288

                     loc_a27a:
000000000000a27a         mov        r10, qword [rdi+rcx*8]                      ; CODE XREF=re_node_set_add_intersect+137
000000000000a27e         cmp        r10, r8
000000000000a281         jg         loc_a270

000000000000a283         cmp        r10, r8
000000000000a286         je         loc_a290

                     loc_a288:
000000000000a288         sub        rsi, 0x1                                    ; CODE XREF=re_node_set_add_intersect+139, re_node_set_add_intersect+152
000000000000a28c         mov        qword [rdi+rsi*8], r8

                     loc_a290:
000000000000a290         sub        r9, 0x1                                     ; CODE XREF=re_node_set_add_intersect+166
000000000000a294         js         loc_a2c0

000000000000a296         sub        r11, 0x1
000000000000a29a         js         loc_a2c0

000000000000a29c         mov        rax, qword [r13+r9*8]
000000000000a2a1         jmp        loc_a25d
000000000000a2a3         align      8

                     loc_a2a8:
000000000000a2a8         ret                                                    ; CODE XREF=re_node_set_add_intersect+9, re_node_set_add_intersect+22
                        ; endp
000000000000a2aa         align      16

                     loc_a2b0:
000000000000a2b0         sub        r9, 0x1                                     ; CODE XREF=loc_a255
000000000000a2b4         js         loc_a2c0

000000000000a2b6         mov        rax, qword [r13+r9*8]
000000000000a2bb         jmp        loc_a250
000000000000a2bd         align      64

                     loc_a2c0:
000000000000a2c0         mov        rcx, qword [rbx+8]                          ; CODE XREF=re_node_set_add_intersect+123, re_node_set_add_intersect+180, re_node_set_add_intersect+186, re_node_set_add_intersect+212
000000000000a2c4         mov        rdx, qword [rbp+8]
000000000000a2c8         add        rdx, rcx
000000000000a2cb         add        rdx, qword [r12+8]
000000000000a2d0         lea        rax, qword [rcx-1]
000000000000a2d4         lea        r9, qword [rdx-1]
000000000000a2d8         sub        rdx, rsi
000000000000a2db         add        rcx, rdx
000000000000a2de         test       rdx, rdx
000000000000a2e1         mov        qword [rbx+8], rcx
000000000000a2e5         jle        loc_a32d

000000000000a2e7         test       rax, rax
000000000000a2ea         js         loc_a32d

000000000000a2ec         nop        dword [rax]

                     loc_a2f0:
000000000000a2f0         mov        r8, qword [rdi+r9*8]                        ; CODE XREF=re_node_set_add_intersect+304, re_node_set_add_intersect+331
000000000000a2f4         mov        rcx, qword [rdi+rax*8]
000000000000a2f8         lea        r10, qword [rax+rdx]
000000000000a2fc         lea        r10, qword [rdi+r10*8]
000000000000a300         cmp        r8, rcx
000000000000a303         jle        loc_a320

000000000000a305         sub        r9, 0x1
000000000000a309         sub        rdx, 0x1
000000000000a30d         mov        qword [r10], r8
000000000000a310         jne        loc_a2f0

000000000000a312         xor        edx, edx
000000000000a314         jmp        loc_a331
000000000000a316         align      32

                     loc_a320:
000000000000a320         sub        rax, 0x1                                    ; CODE XREF=re_node_set_add_intersect+291
000000000000a324         mov        qword [r10], rcx
000000000000a327         cmp        rax, 0xffffffffffffffff
000000000000a32b         jne        loc_a2f0

                     loc_a32d:
000000000000a32d         shl        rdx, 0x3                                    ; CODE XREF=re_node_set_add_intersect+261, re_node_set_add_intersect+266

                     loc_a331:
000000000000a331         lea        rsi, qword [rdi+rsi*8]                      ; argument "__src" for method j_memcpy, CODE XREF=re_node_set_add_intersect+308
000000000000a335         call       j_memcpy                                    ; memcpy
000000000000a33a         xor        eax, eax

                     loc_a33c:
000000000000a33c         add        rsp, 0x8                                    ; CODE XREF=re_node_set_add_intersect+422
000000000000a340         pop        rbx
000000000000a341         pop        rbp
000000000000a342         pop        r12
000000000000a344         pop        r13
000000000000a346         ret
                        ; endp
000000000000a347         align      16

                     loc_a350:
000000000000a350         add        r13, rax                                    ; CODE XREF=re_node_set_add_intersect+69
000000000000a353         lea        rsi, qword [r13*8]                          ; argument "__size" for method j_realloc
000000000000a35b         call       j_realloc                                   ; realloc
000000000000a360         test       rax, rax
000000000000a363         mov        rdi, rax
000000000000a366         je         loc_a381

000000000000a368         mov        qword [rbx+0x10], rax
000000000000a36c         mov        qword [rbx], r13
000000000000a36f         mov        rcx, qword [rbx+8]
000000000000a373         mov        r9, qword [rbp+8]
000000000000a377         mov        r11, qword [r12+8]
000000000000a37c         jmp        loc_a22b

                     loc_a381:
000000000000a381         mov        eax, 0xc                                    ; CODE XREF=re_node_set_add_intersect+390
000000000000a386         jmp        loc_a33c
000000000000a388         align      16                                          ; End of unwind block (FDE at 0x19aa8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     create_token_tree.isra.16:
000000000000a390         push       rbx                                         ; Begin of unwind block (FDE at 0x19af8), CODE XREF=duplicate_tree+62, lower_subexp+130, lower_subexp+156, lower_subexp+215, lower_subexp+241, lower_subexp+279, lower_subexp+463, lower_subexp+489, lower_subexp+531, build_charclass_op+350, build_charclass_op+410
000000000000a391         mov        rbx, rdi
000000000000a394         sub        rsp, 0x20
000000000000a398         mov        eax, dword [rsi]
000000000000a39a         cmp        eax, 0xf
000000000000a39d         je         loc_a418

000000000000a39f         movsxd     r9, eax
000000000000a3a2         lea        r10d, dword [rax+1]
000000000000a3a6         mov        rdi, qword [rdi]
000000000000a3a9         mov        rax, r9
000000000000a3ac         shl        rax, 0x6
000000000000a3b0         add        rax, 0x8

                     loc_a3b4:
000000000000a3b4         shl        r9, 0x6                                     ; CODE XREF=create_token_tree.isra.16+215
000000000000a3b8         mov        dword [rsi], r10d
000000000000a3bb         add        rax, rdi
000000000000a3be         lea        rsi, qword [rdi+r9]
000000000000a3c2         mov        qword [rsi+8], 0x0
000000000000a3ca         mov        qword [rsi+0x10], rdx
000000000000a3ce         lea        rdi, qword [rsi+0x20]
000000000000a3d2         mov        qword [rsi+0x18], rcx
000000000000a3d6         movdqu     xmm0, xmmword [r8]
000000000000a3db         movups     xmmword [rsi+0x30], xmm0
000000000000a3df         and        byte [rdi+0x1a], 0xf3
000000000000a3e3         test       rdx, rdx
000000000000a3e6         mov        qword [rsi+0x20], 0x0
000000000000a3ee         mov        qword [rsi+0x28], 0x0
000000000000a3f6         mov        qword [rsi+0x40], 0xffffffffffffffff
000000000000a3fe         je         loc_a403

000000000000a400         mov        qword [rdx], rax

                     loc_a403:
000000000000a403         test       rcx, rcx                                    ; CODE XREF=create_token_tree.isra.16+110
000000000000a406         je         loc_a40b

000000000000a408         mov        qword [rcx], rax

                     loc_a40b:
000000000000a40b         add        rsp, 0x20                                   ; CODE XREF=create_token_tree.isra.16+118, create_token_tree.isra.16+222
000000000000a40f         pop        rbx
000000000000a410         ret
                        ; endp
000000000000a411         align      8

                     loc_a418:
000000000000a418         mov        edi, 0x3c8                                  ; argument "__size" for method j_malloc, CODE XREF=create_token_tree.isra.16+13
000000000000a41d         mov        qword [rsp+0x28+var_10], r8
000000000000a422         mov        qword [rsp+0x28+var_18], rcx
000000000000a427         mov        qword [rsp+0x28+var_20], rdx
000000000000a42c         mov        qword [rsp+0x28+var_28], rsi
000000000000a430         call       j_malloc                                    ; malloc
000000000000a435         test       rax, rax
000000000000a438         mov        rdi, rax
000000000000a43b         je         loc_a46c

000000000000a43d         mov        rax, qword [rbx]
000000000000a440         mov        r10d, 0x1
000000000000a446         mov        qword [rbx], rdi
000000000000a449         xor        r9d, r9d
000000000000a44c         mov        r8, qword [rsp+0x28+var_10]
000000000000a451         mov        rcx, qword [rsp+0x28+var_18]
000000000000a456         mov        rdx, qword [rsp+0x28+var_20]
000000000000a45b         mov        rsi, qword [rsp+0x28+var_28]
000000000000a45f         mov        qword [rdi], rax
000000000000a462         mov        eax, 0x8
000000000000a467         jmp        loc_a3b4

                     loc_a46c:
000000000000a46c         xor        eax, eax                                    ; CODE XREF=create_token_tree.isra.16+171
000000000000a46e         jmp        loc_a40b


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     duplicate_tree:
000000000000a470         push       r14                                         ; End of unwind block (FDE at 0x19af8), Begin of unwind block (FDE at 0x19b1c), CODE XREF=sub_12b20+540, sub_12b20+888, sub_12b20+982
000000000000a472         push       r13
000000000000a474         lea        r13, qword [rsi+0x70]
000000000000a478         push       r12
000000000000a47a         push       rbp
000000000000a47b         lea        r12, qword [rsi+0x80]
000000000000a482         push       rbx
000000000000a483         mov        rbx, rdi
000000000000a486         sub        rsp, 0x10
000000000000a48a         mov        rbp, qword [rdi]
000000000000a48d         mov        rax, qword [fs:0x28]
000000000000a496         mov        qword [rsp+0x38+var_30], rax
000000000000a49b         xor        eax, eax
000000000000a49d         mov        r14, rsp

                     loc_a4a0:
000000000000a4a0         lea        r8, qword [rbx+0x28]                        ; CODE XREF=duplicate_tree+101, duplicate_tree+199
000000000000a4a4         xor        ecx, ecx
000000000000a4a6         xor        edx, edx
000000000000a4a8         mov        rsi, r12
000000000000a4ab         mov        rdi, r13
000000000000a4ae         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000a4b3         test       rax, rax
000000000000a4b6         mov        qword [r14], rax
000000000000a4b9         je         loc_a50c

000000000000a4bb         mov        qword [rax], rbp
000000000000a4be         mov        rbp, qword [r14]
000000000000a4c1         or         byte [rbp+0x32], 0x4
000000000000a4c5         mov        rax, qword [rbx+8]
000000000000a4c9         test       rax, rax
000000000000a4cc         je         loc_a4e0

000000000000a4ce         lea        r14, qword [rbp+8]
000000000000a4d2         mov        rbx, rax
000000000000a4d5         jmp        loc_a4a0
000000000000a4d7         align      32

                     loc_a4e0:
000000000000a4e0         xor        edx, edx                                    ; CODE XREF=duplicate_tree+92
000000000000a4e2         jmp        loc_a4eb
000000000000a4e4         align      8

                     loc_a4e8:
000000000000a4e8         mov        rbx, rax                                    ; CODE XREF=duplicate_tree+150

                     loc_a4eb:
000000000000a4eb         mov        rax, qword [rbx+0x10]                       ; CODE XREF=duplicate_tree+114
000000000000a4ef         test       rax, rax
000000000000a4f2         je         loc_a4f9

000000000000a4f4         cmp        rax, rdx
000000000000a4f7         jne        loc_a530

                     loc_a4f9:
000000000000a4f9         mov        rax, qword [rbx]                            ; CODE XREF=duplicate_tree+130
000000000000a4fc         mov        rbp, qword [rbp]
000000000000a500         mov        rdx, rbx
000000000000a503         test       rax, rax
000000000000a506         jne        loc_a4e8

000000000000a508         mov        rax, qword [rsp+0x38+var_38]

                     loc_a50c:
000000000000a50c         mov        rcx, qword [rsp+0x38+var_30]                ; CODE XREF=duplicate_tree+73
000000000000a511         xor        rcx, qword [fs:0x28]
000000000000a51a         jne        loc_a53c

000000000000a51c         add        rsp, 0x10
000000000000a520         pop        rbx
000000000000a521         pop        rbp
000000000000a522         pop        r12
000000000000a524         pop        r13
000000000000a526         pop        r14
000000000000a528         ret
                        ; endp
000000000000a529         align      16

                     loc_a530:
000000000000a530         lea        r14, qword [rbp+0x10]                       ; CODE XREF=duplicate_tree+135
000000000000a534         mov        rbx, rax
000000000000a537         jmp        loc_a4a0

                     loc_a53c:
000000000000a53c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=duplicate_tree+170
                        ; endp
000000000000a541         align      16                                          ; End of unwind block (FDE at 0x19b1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112


                     lower_subexp:
000000000000a550         push       r15                                         ; Begin of unwind block (FDE at 0x19b60), CODE XREF=lower_subexps+104, lower_subexps+136
000000000000a552         push       r14
000000000000a554         push       r13
000000000000a556         push       r12
000000000000a558         mov        r13, rdx
000000000000a55b         push       rbp
000000000000a55c         push       rbx
000000000000a55d         sub        rsp, 0x48
000000000000a561         mov        rbx, qword [rsi]
000000000000a564         mov        rbp, qword [rdx+8]
000000000000a568         mov        rax, qword [fs:0x28]
000000000000a571         mov        qword [rsp+0x78+var_40], rax
000000000000a576         xor        eax, eax
000000000000a578         test       byte [rsi+0x38], 0x10
000000000000a57c         mov        qword [rsp+0x78+var_60], rdi
000000000000a581         je         loc_a6f8

000000000000a587         test       rbp, rbp
000000000000a58a         je         loc_a600

000000000000a58c         mov        rax, qword [rdx+0x28]
000000000000a590         cmp        rax, 0x3f
000000000000a594         jg         loc_a6cd

000000000000a59a         mov        rdx, qword [rbx+0xa0]
000000000000a5a1         bt         rdx, rax
000000000000a5a5         jae        loc_a6cd

000000000000a5ab         lea        rax, qword [rbx+0x70]
000000000000a5af         lea        r14, qword [rsp+0x78+var_58]
000000000000a5b4         sub        rbx, 0xffffffffffffff80
000000000000a5b8         xor        ecx, ecx
000000000000a5ba         xor        edx, edx
000000000000a5bc         mov        rsi, rbx
000000000000a5bf         mov        r15, rax
000000000000a5c2         mov        r8, r14
000000000000a5c5         mov        rdi, rax
000000000000a5c8         mov        byte [rsp+0x78+var_50], 0x8
000000000000a5cd         mov        qword [rsp+0x78+var_70], rax
000000000000a5d2         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000a5d7         mov        rdi, r15
000000000000a5da         mov        r8, r14
000000000000a5dd         xor        ecx, ecx
000000000000a5df         xor        edx, edx
000000000000a5e1         mov        rsi, rbx
000000000000a5e4         mov        r12, rax
000000000000a5e7         mov        byte [rsp+0x78+var_50], 0x9
000000000000a5ec         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000a5f1         mov        r15, rax
000000000000a5f4         jmp        loc_a74d
000000000000a5f9         align      512

                     loc_a600:
000000000000a600         lea        rax, qword [rbx+0x70]                       ; CODE XREF=lower_subexp+58
000000000000a604         lea        r14, qword [rsp+0x78+var_58]
000000000000a609         sub        rbx, 0xffffffffffffff80
000000000000a60d         xor        ecx, ecx
000000000000a60f         xor        edx, edx
000000000000a611         mov        rsi, rbx
000000000000a614         mov        r15, rax
000000000000a617         mov        r8, r14
000000000000a61a         mov        rdi, rax
000000000000a61d         mov        byte [rsp+0x78+var_50], 0x8
000000000000a622         mov        qword [rsp+0x78+var_70], rax
000000000000a627         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000a62c         mov        rdi, r15
000000000000a62f         mov        r8, r14
000000000000a632         xor        ecx, ecx
000000000000a634         xor        edx, edx
000000000000a636         mov        rsi, rbx
000000000000a639         mov        r12, rax
000000000000a63c         mov        byte [rsp+0x78+var_50], 0x9
000000000000a641         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000a646         mov        r11, rax
000000000000a649         mov        r15, rax

                     loc_a64c:
000000000000a64c         mov        rdi, qword [rsp+0x78+var_70]                ; CODE XREF=lower_subexp+503, lower_subexp+539
000000000000a651         mov        r8, r14
000000000000a654         mov        rcx, r11
000000000000a657         mov        rdx, r12
000000000000a65a         mov        rsi, rbx
000000000000a65d         mov        byte [rsp+0x78+var_50], 0x10
000000000000a662         mov        qword [rsp+0x78+var_68], r11
000000000000a667         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000a66c         test       rax, rax
000000000000a66f         mov        rbp, rax
000000000000a672         je         loc_a770

000000000000a678         mov        r11, qword [rsp+0x78+var_68]
000000000000a67d         test       r11, r11
000000000000a680         je         loc_a770

000000000000a686         test       r12, r12
000000000000a689         je         loc_a770

000000000000a68f         test       r15, r15
000000000000a692         je         loc_a770

000000000000a698         mov        rax, qword [r13+0x28]
000000000000a69c         mov        qword [r15+0x28], rax
000000000000a6a0         mov        qword [r12+0x28], rax
000000000000a6a5         movzx      eax, byte [r13+0x32]
000000000000a6aa         movzx      edx, byte [r15+0x32]
000000000000a6af         and        eax, 0x8
000000000000a6b2         and        edx, 0xfffffff7
000000000000a6b5         mov        ecx, eax
000000000000a6b7         or         edx, ecx
000000000000a6b9         mov        byte [r15+0x32], dl
000000000000a6bd         movzx      eax, byte [r12+0x32]
000000000000a6c3         and        eax, 0xfffffff7
000000000000a6c6         or         eax, ecx
000000000000a6c8         mov        byte [r12+0x32], al

                     loc_a6cd:
000000000000a6cd         mov        rdi, qword [rsp+0x78+var_40]                ; CODE XREF=lower_subexp+68, lower_subexp+85, lower_subexp+557
000000000000a6d2         xor        rdi, qword [fs:0x28]
000000000000a6db         mov        rax, rbp
000000000000a6de         jne        loc_a782

000000000000a6e4         add        rsp, 0x48
000000000000a6e8         pop        rbx
000000000000a6e9         pop        rbp
000000000000a6ea         pop        r12
000000000000a6ec         pop        r13
000000000000a6ee         pop        r14
000000000000a6f0         pop        r15
000000000000a6f2         ret
                        ; endp
000000000000a6f3         align      8

                     loc_a6f8:
000000000000a6f8         lea        rax, qword [rbx+0x70]                       ; CODE XREF=lower_subexp+49
000000000000a6fc         lea        r14, qword [rsp+0x78+var_58]
000000000000a701         sub        rbx, 0xffffffffffffff80
000000000000a705         xor        ecx, ecx
000000000000a707         xor        edx, edx
000000000000a709         mov        rsi, rbx
000000000000a70c         mov        r15, rax
000000000000a70f         mov        r8, r14
000000000000a712         mov        rdi, rax
000000000000a715         mov        byte [rsp+0x78+var_50], 0x8
000000000000a71a         mov        qword [rsp+0x78+var_70], rax
000000000000a71f         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000a724         xor        ecx, ecx
000000000000a726         xor        edx, edx
000000000000a728         mov        rdi, r15
000000000000a72b         mov        r8, r14
000000000000a72e         mov        rsi, rbx
000000000000a731         mov        r12, rax
000000000000a734         mov        byte [rsp+0x78+var_50], 0x9
000000000000a739         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000a73e         test       rbp, rbp
000000000000a741         mov        r15, rax
000000000000a744         mov        r11, rax
000000000000a747         je         loc_a64c

                     loc_a74d:
000000000000a74d         mov        rdi, qword [rsp+0x78+var_70]                ; CODE XREF=lower_subexp+164
000000000000a752         mov        r8, r14
000000000000a755         mov        rcx, r15
000000000000a758         mov        rdx, rbp
000000000000a75b         mov        rsi, rbx
000000000000a75e         mov        byte [rsp+0x78+var_50], 0x10
000000000000a763         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000a768         mov        r11, rax
000000000000a76b         jmp        loc_a64c

                     loc_a770:
000000000000a770         mov        rax, qword [rsp+0x78+var_60]                ; CODE XREF=lower_subexp+290, lower_subexp+304, lower_subexp+313, lower_subexp+322
000000000000a775         xor        ebp, ebp
000000000000a777         mov        dword [rax], 0xc
000000000000a77d         jmp        loc_a6cd

                     loc_a782:
000000000000a782         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=lower_subexp+398
                        ; endp
000000000000a787         align      16                                          ; End of unwind block (FDE at 0x19b60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_24: int32_t, -36


                     lower_subexps:
000000000000a790         push       rbp                                         ; Begin of unwind block (FDE at 0x19bb0), DATA XREF=re_compile_internal+1638
000000000000a791         push       rbx
000000000000a792         mov        rbp, rdi
000000000000a795         mov        rbx, rsi
000000000000a798         sub        rsp, 0x18
000000000000a79c         mov        rdx, qword [rsi+8]
000000000000a7a0         mov        rax, qword [fs:0x28]
000000000000a7a9         mov        qword [rsp+0x28+var_20], rax
000000000000a7ae         xor        eax, eax
000000000000a7b0         mov        dword [rsp+0x28+var_24], 0x0
000000000000a7b8         test       rdx, rdx
000000000000a7bb         je         loc_a7c3

000000000000a7bd         cmp        byte [rdx+0x30], 0x11
000000000000a7c1         je         loc_a810

                     loc_a7c3:
000000000000a7c3         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=lower_subexps+43, lower_subexps+148, lower_subexps+153
000000000000a7c7         test       rdx, rdx
000000000000a7ca         je         loc_a7d2

000000000000a7cc         cmp        byte [rdx+0x30], 0x11
000000000000a7d0         je         loc_a7f0

                     loc_a7d2:
000000000000a7d2         mov        rcx, qword [rsp+0x28+var_20]                ; CODE XREF=lower_subexps+58, lower_subexps+116, lower_subexps+121
000000000000a7d7         xor        rcx, qword [fs:0x28]
000000000000a7e0         mov        eax, dword [rsp+0x28+var_24]
000000000000a7e4         jne        loc_a82b

000000000000a7e6         add        rsp, 0x18
000000000000a7ea         pop        rbx
000000000000a7eb         pop        rbp
000000000000a7ec         ret
                        ; endp
000000000000a7ed         align      16

                     loc_a7f0:
000000000000a7f0         lea        rdi, qword [rsp+0x28+var_24]                ; CODE XREF=lower_subexps+64
000000000000a7f5         mov        rsi, rbp
000000000000a7f8         call       lower_subexp                                ; lower_subexp
000000000000a7fd         test       rax, rax
000000000000a800         mov        qword [rbx+0x10], rax
000000000000a804         je         loc_a7d2

000000000000a806         mov        qword [rax], rbx
000000000000a809         jmp        loc_a7d2
000000000000a80b         align      16

                     loc_a810:
000000000000a810         lea        rdi, qword [rsp+0x28+var_24]                ; CODE XREF=lower_subexps+49
000000000000a815         mov        rsi, rbp
000000000000a818         call       lower_subexp                                ; lower_subexp
000000000000a81d         test       rax, rax
000000000000a820         mov        qword [rbx+8], rax
000000000000a824         je         loc_a7c3

000000000000a826         mov        qword [rax], rbx
000000000000a829         jmp        loc_a7c3

                     loc_a82b:
000000000000a82b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=lower_subexps+84
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_init_copy:
000000000000a830         push       r12                                         ; End of unwind block (FDE at 0x19bb0), Begin of unwind block (FDE at 0x19bdc), CODE XREF=re_node_set_init_union+235, re_acquire_state_context+232, re_acquire_state_context+649, re_acquire_state+187, expand_bkref_cache+390, build_trtable+1614, check_arrival+1551, set_regs+1237, update_cur_sifted_state+2049, sub_14c00+592
000000000000a832         push       rbp
000000000000a833         push       rbx
000000000000a834         mov        rax, qword [rsi+8]
000000000000a838         mov        qword [rdi+8], rax
000000000000a83c         mov        r12, qword [rsi+8]
000000000000a840         test       r12, r12
000000000000a843         jle        loc_a880

000000000000a845         mov        rbx, rdi
000000000000a848         mov        qword [rdi], rax
000000000000a84b         lea        rdi, qword [rax*8]                          ; argument "__size" for method j_malloc
000000000000a853         mov        rbp, rsi
000000000000a856         call       j_malloc                                    ; malloc
000000000000a85b         test       rax, rax
000000000000a85e         mov        qword [rbx+0x10], rax
000000000000a862         je         loc_a8a0

000000000000a864         mov        rsi, qword [rbp+0x10]                       ; argument "__src" for method j_memcpy
000000000000a868         lea        rdx, qword [r12*8]                          ; argument "__n" for method j_memcpy
000000000000a870         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000a873         call       j_memcpy                                    ; memcpy
000000000000a878         xor        eax, eax

                     loc_a87a:
000000000000a87a         pop        rbx                                         ; CODE XREF=re_node_set_init_copy+132
000000000000a87b         pop        rbp
000000000000a87c         pop        r12
000000000000a87e         ret
                        ; endp
000000000000a87f         align      128

                     loc_a880:
000000000000a880         pxor       xmm0, xmm0                                  ; CODE XREF=re_node_set_init_copy+19
000000000000a884         mov        qword [rdi+0x10], 0x0
000000000000a88c         xor        eax, eax
000000000000a88e         movups     xmmword [rdi], xmm0
000000000000a891         pop        rbx
000000000000a892         pop        rbp
000000000000a893         pop        r12
000000000000a895         ret
                        ; endp
000000000000a896         align      32

                     loc_a8a0:
000000000000a8a0         mov        qword [rbx+8], 0x0                          ; CODE XREF=re_node_set_init_copy+50
000000000000a8a8         mov        qword [rbx], 0x0
000000000000a8af         mov        eax, 0xc
000000000000a8b4         jmp        loc_a87a
000000000000a8b6         align      64                                          ; End of unwind block (FDE at 0x19bdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_init_union:
000000000000a8c0         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x19c18), CODE XREF=merge_state_array+96, transit_state_bkref.isra.34+1185, merge_state_with_log+188, re_search_internal+3431
000000000000a8c3         push       r14
000000000000a8c5         push       r13
000000000000a8c7         push       r12
000000000000a8c9         push       rbp
000000000000a8ca         push       rbx
000000000000a8cb         je         loc_a975

000000000000a8d1         test       rdx, rdx
000000000000a8d4         mov        r13, qword [rsi+8]
000000000000a8d8         je         loc_a970

000000000000a8de         test       r13, r13
000000000000a8e1         jle        loc_a970

000000000000a8e7         mov        r14, qword [rdx+8]
000000000000a8eb         test       r14, r14
000000000000a8ee         jle        loc_a9a3

000000000000a8f4         mov        r12, rdi
000000000000a8f7         lea        rdi, qword [r13+r14]
000000000000a8fc         mov        rbx, rdx
000000000000a8ff         mov        rbp, rsi
000000000000a902         mov        qword [r12], rdi
000000000000a906         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
000000000000a90a         call       j_malloc                                    ; malloc
000000000000a90f         test       rax, rax
000000000000a912         mov        qword [r12+0x10], rax
000000000000a917         je         loc_aa08

000000000000a91d         mov        r9, qword [rbx+0x10]
000000000000a921         mov        r8, qword [rbp+0x10]
000000000000a925         xor        ebx, ebx
000000000000a927         xor        ecx, ecx
000000000000a929         xor        esi, esi
000000000000a92b         jmp        loc_a94e
000000000000a92d         align      16

                     loc_a930:
000000000000a930         sete       dil                                         ; CODE XREF=re_node_set_init_union+157
000000000000a934         mov        qword [rax+rbx*8-8], rdx
000000000000a939         add        rsi, 0x1
000000000000a93d         movzx      edi, dil
000000000000a941         add        rcx, rdi

                     loc_a944:
000000000000a944         cmp        r13, rsi                                    ; CODE XREF=re_node_set_init_union+168
000000000000a947         jle        loc_a9b0

000000000000a949         cmp        r14, rcx
000000000000a94c         jle        loc_a9c8

                     loc_a94e:
000000000000a94e         mov        rdx, qword [r8+rsi*8]                       ; CODE XREF=re_node_set_init_union+107
000000000000a952         mov        rdi, qword [r9+rcx*8]
000000000000a956         add        rbx, 0x1
000000000000a95a         cmp        rdx, rdi
000000000000a95d         jle        loc_a930

000000000000a95f         add        rcx, 0x1
000000000000a963         mov        qword [rax+rbx*8-8], rdi
000000000000a968         jmp        loc_a944
000000000000a96a         align      16

                     loc_a970:
000000000000a970         test       r13, r13                                    ; CODE XREF=re_node_set_init_union+24, re_node_set_init_union+33
000000000000a973         jg         loc_a9a3

                     loc_a975:
000000000000a975         test       rdx, rdx                                    ; CODE XREF=re_node_set_init_union+11
000000000000a978         je         loc_a981

000000000000a97a         cmp        qword [rdx+8], 0x0
000000000000a97f         jg         loc_a9a0

                     loc_a981:
000000000000a981         pxor       xmm0, xmm0                                  ; CODE XREF=re_node_set_init_union+184
000000000000a985         mov        qword [rdi+0x10], 0x0
000000000000a98d         xor        eax, eax
000000000000a98f         movaps     xmmword [rdi], xmm0

                     loc_a992:
000000000000a992         pop        rbx                                         ; CODE XREF=re_node_set_init_union+333
000000000000a993         pop        rbp
000000000000a994         pop        r12
000000000000a996         pop        r13
000000000000a998         pop        r14
000000000000a99a         ret
                        ; endp
000000000000a99b         align      32

                     loc_a9a0:
000000000000a9a0         mov        rsi, rdx                                    ; CODE XREF=re_node_set_init_union+191

                     loc_a9a3:
000000000000a9a3         pop        rbx                                         ; CODE XREF=re_node_set_init_union+46, re_node_set_init_union+179
000000000000a9a4         pop        rbp
000000000000a9a5         pop        r12
000000000000a9a7         pop        r13
000000000000a9a9         pop        r14
000000000000a9ab         jmp        re_node_set_init_copy                       ; re_node_set_init_copy
                        ; endp

                     loc_a9b0:
000000000000a9b0         cmp        r14, rcx                                    ; CODE XREF=re_node_set_init_union+135
000000000000a9b3         jg         loc_a9e8

                     loc_a9b5:
000000000000a9b5         mov        qword [r12+8], rbx                          ; CODE XREF=re_node_set_init_union+291, re_node_set_init_union+323
000000000000a9ba         xor        eax, eax
000000000000a9bc         pop        rbx
000000000000a9bd         pop        rbp
000000000000a9be         pop        r12
000000000000a9c0         pop        r13
000000000000a9c2         pop        r14
000000000000a9c4         ret
                        ; endp
000000000000a9c5         align      8

                     loc_a9c8:
000000000000a9c8         sub        r13, rsi                                    ; CODE XREF=re_node_set_init_union+140
000000000000a9cb         lea        rdi, qword [rax+rbx*8]                      ; argument "__dest" for method j_memcpy
000000000000a9cf         lea        rsi, qword [r8+rsi*8]                       ; argument "__src" for method j_memcpy
000000000000a9d3         lea        rdx, qword [r13*8]                          ; argument "__n" for method j_memcpy
000000000000a9db         add        rbx, r13
000000000000a9de         call       j_memcpy                                    ; memcpy
000000000000a9e3         jmp        loc_a9b5
000000000000a9e5         align      8

                     loc_a9e8:
000000000000a9e8         sub        r14, rcx                                    ; CODE XREF=re_node_set_init_union+243
000000000000a9eb         lea        rdi, qword [rax+rbx*8]                      ; argument "__dest" for method j_memcpy
000000000000a9ef         lea        rsi, qword [r9+rcx*8]                       ; argument "__src" for method j_memcpy
000000000000a9f3         lea        rdx, qword [r14*8]                          ; argument "__n" for method j_memcpy
000000000000a9fb         add        rbx, r14
000000000000a9fe         call       j_memcpy                                    ; memcpy
000000000000aa03         jmp        loc_a9b5
000000000000aa05         align      8

                     loc_aa08:
000000000000aa08         mov        eax, 0xc                                    ; CODE XREF=re_node_set_init_union+87
000000000000aa0d         jmp        loc_a992
000000000000aa12         align      32                                          ; End of unwind block (FDE at 0x19c18)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84


                     re_acquire_state_context:
000000000000aa20         push       r15                                         ; Begin of unwind block (FDE at 0x19c7c), CODE XREF=build_trtable+597, build_trtable+2464, build_trtable+2539, check_arrival+987, check_arrival+1653, transit_state_bkref.isra.34+1239, transit_state_bkref.isra.34+1970, merge_state_with_log+254, merge_state_with_log+354, re_search_internal+3497, re_search_internal+3734
000000000000aa22         push       r14
000000000000aa24         push       r13
000000000000aa26         push       r12
000000000000aa28         push       rbp
000000000000aa29         push       rbx
000000000000aa2a         sub        rsp, 0x28
000000000000aa2e         mov        r10, qword [rdx+8]
000000000000aa32         test       r10, r10
000000000000aa35         je         loc_acbf

000000000000aa3b         mov        r8d, ecx
000000000000aa3e         test       r10, r10
000000000000aa41         lea        r12, qword [r8+r10]
000000000000aa45         jle        loc_aa5c

000000000000aa47         mov        rax, qword [rdx+0x10]
000000000000aa4b         lea        r10, qword [rax+r10*8]
000000000000aa4f         nop

                     loc_aa50:
000000000000aa50         add        r12, qword [rax]                            ; CODE XREF=re_acquire_state_context+58
000000000000aa53         add        rax, 0x8
000000000000aa57         cmp        r10, rax
000000000000aa5a         jne        loc_aa50

                     loc_aa5c:
000000000000aa5c         mov        rax, qword [rsi+0x88]                       ; CODE XREF=re_acquire_state_context+37
000000000000aa63         mov        rbp, rdx
000000000000aa66         mov        dword [rsp+0x58+var_54], ecx
000000000000aa6a         mov        r13, rsi
000000000000aa6d         mov        qword [rsp+0x58+var_40], rdi
000000000000aa72         and        rax, r12
000000000000aa75         lea        rdx, qword [rax+rax*2]
000000000000aa79         mov        rax, qword [rsi+0x40]
000000000000aa7d         lea        rax, qword [rax+rdx*8]
000000000000aa81         mov        r11, qword [rax]
000000000000aa84         test       r11, r11
000000000000aa87         jle        loc_aae0

000000000000aa89         mov        rbx, qword [rax+0x10]
000000000000aa8d         xor        r10d, r10d
000000000000aa90         mov        r9d, ecx
000000000000aa93         jmp        loc_aaa1
000000000000aa95         align      8

                     loc_aa98:
000000000000aa98         add        r10, 0x1                                    ; CODE XREF=re_acquire_state_context+136, re_acquire_state_context+149, re_acquire_state_context+158, re_acquire_state_context+170
000000000000aa9c         cmp        r10, r11
000000000000aa9f         je         loc_aae0

                     loc_aaa1:
000000000000aaa1         mov        r14, qword [rbx+r10*8]                      ; CODE XREF=re_acquire_state_context+115
000000000000aaa5         cmp        qword [r14], r12
000000000000aaa8         jne        loc_aa98

000000000000aaaa         movzx      eax, byte [r14+0x68]
000000000000aaaf         and        eax, 0xf
000000000000aab2         cmp        eax, r9d
000000000000aab5         jne        loc_aa98

000000000000aab7         mov        rdi, qword [r14+0x50]
000000000000aabb         test       rdi, rdi
000000000000aabe         je         loc_aa98

000000000000aac0         mov        rsi, rbp
000000000000aac3         call       re_node_set_compare.part.2                  ; re_node_set_compare.part.2
000000000000aac8         test       al, al
000000000000aaca         je         loc_aa98

                     loc_aacc:
000000000000aacc         add        rsp, 0x28                                   ; CODE XREF=re_acquire_state_context+520, re_acquire_state_context+548, re_acquire_state_context+680
000000000000aad0         mov        rax, r14
000000000000aad3         pop        rbx
000000000000aad4         pop        rbp
000000000000aad5         pop        r12
000000000000aad7         pop        r13
000000000000aad9         pop        r14
000000000000aadb         pop        r15
000000000000aadd         ret
                        ; endp
000000000000aade         align      32

                     loc_aae0:
000000000000aae0         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_acquire_state_context+103, re_acquire_state_context+127
000000000000aae5         mov        edi, 0x70                                   ; argument "__nmemb" for method j_calloc
000000000000aaea         call       j_calloc                                    ; calloc
000000000000aaef         test       rax, rax
000000000000aaf2         mov        r14, rax
000000000000aaf5         je         loc_ac36

000000000000aafb         lea        rax, qword [rax+8]
000000000000aaff         mov        rsi, rbp
000000000000ab02         mov        rdi, rax
000000000000ab05         mov        rbx, rax
000000000000ab08         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000ab0d         test       eax, eax
000000000000ab0f         jne        loc_accd

000000000000ab15         movzx      eax, byte [r14+0x68]
000000000000ab1a         movzx      edx, byte [rsp+0x58+var_54]
000000000000ab1f         mov        qword [r14+0x50], rbx
000000000000ab23         and        edx, 0xf
000000000000ab26         and        eax, 0xfffffff0
000000000000ab29         or         eax, edx
000000000000ab2b         cmp        qword [rbp+8], 0x0
000000000000ab30         mov        byte [r14+0x68], al
000000000000ab34         jle        loc_ac18

000000000000ab3a         lea        rcx, qword [r14+0x18]
000000000000ab3e         xor        r15d, r15d
000000000000ab41         mov        qword [rsp+0x58+var_48], r12
000000000000ab46         xor        r10d, r10d
000000000000ab49         mov        r12, r13
000000000000ab4c         mov        r13, r15
000000000000ab4f         mov        qword [rsp+0x58+var_50], rcx
000000000000ab54         mov        r15, rbx
000000000000ab57         nop        word [rax+rax]

                     loc_ab60:
000000000000ab60         mov        rax, qword [rbp+0x10]                       ; CODE XREF=re_acquire_state_context+490
000000000000ab64         mov        rax, qword [rax+r13*8]
000000000000ab68         shl        rax, 0x4
000000000000ab6c         add        rax, qword [r12]
000000000000ab70         movzx      esi, byte [rax+8]
000000000000ab74         mov        ebx, dword [rax+8]
000000000000ab77         shr        ebx, 0x8
000000000000ab7a         and        bx, 0x3ff
000000000000ab7f         cmp        esi, 0x1
000000000000ab82         movzx      edi, bx
000000000000ab85         jne        loc_ab8b

000000000000ab87         test       edi, edi
000000000000ab89         je         loc_ac02

                     loc_ab8b:
000000000000ab8b         movzx      edx, byte [r14+0x68]                        ; CODE XREF=re_acquire_state_context+357
000000000000ab90         movzx      eax, byte [rax+0xa]
000000000000ab94         mov        r9d, edx
000000000000ab97         shr        al, 0x4
000000000000ab9a         and        edx, 0xffffffdf
000000000000ab9d         shr        r9b, 0x5
000000000000aba1         or         eax, r9d
000000000000aba4         and        eax, 0x1
000000000000aba7         shl        eax, 0x5
000000000000abaa         or         eax, edx
000000000000abac         cmp        esi, 0x2
000000000000abaf         mov        byte [r14+0x68], al
000000000000abb3         je         loc_ac80

000000000000abb9         cmp        esi, 0x4
000000000000abbc         jne        loc_abc5

000000000000abbe         or         eax, 0x40
000000000000abc1         mov        byte [r14+0x68], al

                     loc_abc5:
000000000000abc5         test       edi, edi                                    ; CODE XREF=re_acquire_state_context+412, re_acquire_state_context+615
000000000000abc7         je         loc_ac02

000000000000abc9         cmp        r15, qword [r14+0x50]
000000000000abcd         je         loc_ac90

                     loc_abd3:
000000000000abd3         test       bl, 0x1                                     ; CODE XREF=re_acquire_state_context+666
000000000000abd6         je         loc_ac50

000000000000abd8         test       byte [rsp+0x58+var_54], 0x1
000000000000abdd         je         loc_abe8

000000000000abdf         test       bl, 0x2
000000000000abe2         je         loc_ac5c

000000000000abe4         nop        dword [rax]

                     loc_abe8:
000000000000abe8         mov        rdx, r13                                    ; CODE XREF=re_acquire_state_context+445, re_acquire_state_context+570, re_acquire_state_context+582, re_acquire_state_context+596
000000000000abeb         sub        rdx, r10
000000000000abee         js         loc_abfe

000000000000abf0         mov        rsi, qword [rsp+0x58+var_50]
000000000000abf5         lea        rdi, qword [r14+0x10]
000000000000abf9         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_abfe:
000000000000abfe         add        r10, 0x1                                    ; CODE XREF=re_acquire_state_context+462

                     loc_ac02:
000000000000ac02         add        r13, 0x1                                    ; CODE XREF=re_acquire_state_context+361, re_acquire_state_context+423, re_acquire_state_context+587, re_acquire_state_context+594
000000000000ac06         cmp        r13, qword [rbp+8]
000000000000ac0a         jl         loc_ab60

000000000000ac10         mov        r13, r12
000000000000ac13         mov        r12, qword [rsp+0x58+var_48]

                     loc_ac18:
000000000000ac18         mov        rdx, r12                                    ; CODE XREF=re_acquire_state_context+276
000000000000ac1b         mov        rsi, r14
000000000000ac1e         mov        rdi, r13
000000000000ac21         call       register_state                              ; register_state
000000000000ac26         test       eax, eax
000000000000ac28         je         loc_aacc

                     loc_ac2e:
000000000000ac2e         mov        rdi, r14                                    ; CODE XREF=re_acquire_state_context+641
000000000000ac31         call       free_state                                  ; free_state

                     loc_ac36:
000000000000ac36         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=re_acquire_state_context+213, re_acquire_state_context+656, re_acquire_state_context+693
000000000000ac3b         xor        r14d, r14d
000000000000ac3e         mov        dword [rax], 0xc
000000000000ac44         jmp        loc_aacc
000000000000ac49         align      16

                     loc_ac50:
000000000000ac50         test       bl, 0x2                                     ; CODE XREF=re_acquire_state_context+438
000000000000ac53         je         loc_ac5c

000000000000ac55         test       byte [rsp+0x58+var_54], 0x1
000000000000ac5a         jne        loc_abe8

                     loc_ac5c:
000000000000ac5c         test       bl, 0x10                                    ; CODE XREF=re_acquire_state_context+450, re_acquire_state_context+563
000000000000ac5f         je         loc_ac68

000000000000ac61         test       byte [rsp+0x58+var_54], 0x2
000000000000ac66         je         loc_abe8

                     loc_ac68:
000000000000ac68         and        ebx, 0x40                                   ; CODE XREF=re_acquire_state_context+575
000000000000ac6b         je         loc_ac02

000000000000ac6d         test       byte [rsp+0x58+var_54], 0x4
000000000000ac72         jne        loc_ac02

000000000000ac74         jmp        loc_abe8
000000000000ac79         align      128

                     loc_ac80:
000000000000ac80         or         eax, 0x10                                   ; CODE XREF=re_acquire_state_context+403
000000000000ac83         mov        byte [r14+0x68], al
000000000000ac87         jmp        loc_abc5
000000000000ac8c         align      16

                     loc_ac90:
000000000000ac90         mov        edi, 0x18                                   ; argument "__size" for method j_malloc, CODE XREF=re_acquire_state_context+429
000000000000ac95         call       j_malloc                                    ; malloc
000000000000ac9a         test       rax, rax
000000000000ac9d         mov        qword [r14+0x50], rax
000000000000aca1         je         loc_ac2e

000000000000aca3         mov        rsi, rbp
000000000000aca6         mov        rdi, rax
000000000000aca9         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000acae         test       eax, eax
000000000000acb0         jne        loc_ac36

000000000000acb2         or         byte [r14+0x68], 0x80
000000000000acb7         xor        r10d, r10d
000000000000acba         jmp        loc_abd3

                     loc_acbf:
000000000000acbf         mov        dword [rdi], 0x0                            ; CODE XREF=re_acquire_state_context+21
000000000000acc5         xor        r14d, r14d
000000000000acc8         jmp        loc_aacc

                     loc_accd:
000000000000accd         mov        rdi, r14                                    ; argument "__ptr" for method j_free, CODE XREF=re_acquire_state_context+239
000000000000acd0         call       j_free                                      ; free
000000000000acd5         jmp        loc_ac36
000000000000acda         align      32                                          ; End of unwind block (FDE at 0x19c7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_acquire_state:
000000000000ace0         push       r15                                         ; Begin of unwind block (FDE at 0x19cc8), CODE XREF=merge_state_array+120, expand_bkref_cache+464, check_arrival+754, update_cur_sifted_state+219, update_cur_sifted_state+307
000000000000ace2         push       r14
000000000000ace4         push       r13
000000000000ace6         push       r12
000000000000ace8         push       rbp
000000000000ace9         push       rbx
000000000000acea         sub        rsp, 0x8
000000000000acee         mov        rbp, qword [rdx+8]
000000000000acf2         test       rbp, rbp
000000000000acf5         je         loc_aed0

000000000000acfb         test       rbp, rbp
000000000000acfe         jle        loc_ad1c

000000000000ad00         mov        rax, qword [rdx+0x10]
000000000000ad04         lea        rcx, qword [rax+rbp*8]
000000000000ad08         nop        dword [rax+rax]

                     loc_ad10:
000000000000ad10         add        rbp, qword [rax]                            ; CODE XREF=re_acquire_state+58
000000000000ad13         add        rax, 0x8
000000000000ad17         cmp        rcx, rax
000000000000ad1a         jne        loc_ad10

                     loc_ad1c:
000000000000ad1c         mov        rax, qword [rsi+0x88]                       ; CODE XREF=re_acquire_state+30
000000000000ad23         mov        r14, rdx
000000000000ad26         mov        r12, rsi
000000000000ad29         mov        r13, rdi
000000000000ad2c         and        rax, rbp
000000000000ad2f         lea        rdx, qword [rax+rax*2]
000000000000ad33         mov        rax, qword [rsi+0x40]
000000000000ad37         lea        rax, qword [rax+rdx*8]
000000000000ad3b         mov        r10, qword [rax]
000000000000ad3e         test       r10, r10
000000000000ad41         jle        loc_ad76

000000000000ad43         mov        r11, qword [rax+0x10]
000000000000ad47         xor        r9d, r9d
000000000000ad4a         nop        word [rax+rax]

                     loc_ad50:
000000000000ad50         mov        rbx, qword [r11+r9*8]                       ; CODE XREF=re_acquire_state+148
000000000000ad54         cmp        qword [rbx], rbp
000000000000ad57         jne        loc_ad6d

000000000000ad59         lea        rdi, qword [rbx+8]
000000000000ad5d         mov        rsi, r14
000000000000ad60         call       re_node_set_compare.part.2                  ; re_node_set_compare.part.2
000000000000ad65         test       al, al
000000000000ad67         jne        loc_ae6f

                     loc_ad6d:
000000000000ad6d         add        r9, 0x1                                     ; CODE XREF=re_acquire_state+119
000000000000ad71         cmp        r10, r9
000000000000ad74         jne        loc_ad50

                     loc_ad76:
000000000000ad76         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_acquire_state+97
000000000000ad7b         mov        edi, 0x70                                   ; argument "__nmemb" for method j_calloc
000000000000ad80         call       j_calloc                                    ; calloc
000000000000ad85         test       rax, rax
000000000000ad88         mov        rbx, rax
000000000000ad8b         je         loc_aeb8

000000000000ad91         lea        r15, qword [rax+8]
000000000000ad95         mov        rsi, r14
000000000000ad98         mov        rdi, r15
000000000000ad9b         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000ada0         test       eax, eax
000000000000ada2         jne        loc_aeb0

000000000000ada8         mov        rax, qword [r14+8]
000000000000adac         mov        qword [rbx+0x50], r15
000000000000adb0         test       rax, rax
000000000000adb3         jle        loc_ae5d

000000000000adb9         mov        rsi, qword [r14+0x10]
000000000000adbd         mov        r8, qword [r12]
000000000000adc1         lea        r9, qword [rsi+rax*8]
000000000000adc5         jmp        loc_ae14
000000000000adc7         align      16

                     loc_add0:
000000000000add0         movzx      ecx, byte [rbx+0x68]                        ; CODE XREF=re_acquire_state+325
000000000000add4         movzx      edx, byte [rax+0xa]
000000000000add8         mov        r10d, ecx
000000000000addb         shr        dl, 0x4
000000000000adde         and        ecx, 0xffffffdf
000000000000ade1         shr        r10b, 0x5
000000000000ade5         or         edx, r10d
000000000000ade8         and        edx, 0x1
000000000000adeb         shl        edx, 0x5
000000000000adee         or         edx, ecx
000000000000adf0         cmp        edi, 0x2
000000000000adf3         mov        byte [rbx+0x68], dl
000000000000adf6         je         loc_ae88

000000000000adfc         cmp        edi, 0x4
000000000000adff         jne        loc_ae98

000000000000ae05         or         edx, 0x40
000000000000ae08         mov        byte [rbx+0x68], dl

                     loc_ae0b:
000000000000ae0b         add        rsi, 0x8                                    ; CODE XREF=re_acquire_state+334, re_acquire_state+430, re_acquire_state+452
000000000000ae0f         cmp        r9, rsi
000000000000ae12         je         loc_ae5d

                     loc_ae14:
000000000000ae14         mov        rax, qword [rsi]                            ; CODE XREF=re_acquire_state+229, re_acquire_state+379
000000000000ae17         shl        rax, 0x4
000000000000ae1b         add        rax, r8
000000000000ae1e         movzx      edi, byte [rax+8]
000000000000ae22         cmp        edi, 0x1
000000000000ae25         jne        loc_add0

000000000000ae27         test       dword [rax+8], 0x3ff00
000000000000ae2e         je         loc_ae0b

000000000000ae30         movzx      edx, byte [rbx+0x68]
000000000000ae34         movzx      eax, byte [rax+0xa]
000000000000ae38         mov        ecx, edx
000000000000ae3a         shr        al, 0x4
000000000000ae3d         and        edx, 0xffffffdf
000000000000ae40         shr        cl, 0x5
000000000000ae43         or         eax, ecx
000000000000ae45         and        eax, 0x1
000000000000ae48         shl        eax, 0x5
000000000000ae4b         or         eax, edx
000000000000ae4d         mov        byte [rbx+0x68], al

                     loc_ae50:
000000000000ae50         add        rsi, 0x8                                    ; CODE XREF=re_acquire_state+443, re_acquire_state+458
000000000000ae54         or         byte [rbx+0x68], 0x80
000000000000ae58         cmp        r9, rsi
000000000000ae5b         jne        loc_ae14

                     loc_ae5d:
000000000000ae5d         mov        rdx, rbp                                    ; CODE XREF=re_acquire_state+211, re_acquire_state+306
000000000000ae60         mov        rsi, rbx
000000000000ae63         mov        rdi, r12
000000000000ae66         call       register_state                              ; register_state
000000000000ae6b         test       eax, eax
000000000000ae6d         jne        loc_aec4

                     loc_ae6f:
000000000000ae6f         add        rsp, 0x8                                    ; CODE XREF=re_acquire_state+135, re_acquire_state+482, re_acquire_state+504
000000000000ae73         mov        rax, rbx
000000000000ae76         pop        rbx
000000000000ae77         pop        rbp
000000000000ae78         pop        r12
000000000000ae7a         pop        r13
000000000000ae7c         pop        r14
000000000000ae7e         pop        r15
000000000000ae80         ret
                        ; endp
000000000000ae81         align      8

                     loc_ae88:
000000000000ae88         or         edx, 0x10                                   ; CODE XREF=re_acquire_state+278
000000000000ae8b         mov        byte [rbx+0x68], dl
000000000000ae8e         jmp        loc_ae0b
000000000000ae93         align      8

                     loc_ae98:
000000000000ae98         cmp        edi, 0xc                                    ; CODE XREF=re_acquire_state+287
000000000000ae9b         je         loc_ae50

000000000000ae9d         test       dword [rax+8], 0x3ff00
000000000000aea4         je         loc_ae0b

000000000000aeaa         jmp        loc_ae50
000000000000aeac         align      16

                     loc_aeb0:
000000000000aeb0         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=re_acquire_state+194
000000000000aeb3         call       j_free                                      ; free

                     loc_aeb8:
000000000000aeb8         mov        dword [r13], 0xc                            ; CODE XREF=re_acquire_state+171, re_acquire_state+492
000000000000aec0         xor        ebx, ebx
000000000000aec2         jmp        loc_ae6f

                     loc_aec4:
000000000000aec4         mov        rdi, rbx                                    ; CODE XREF=re_acquire_state+397
000000000000aec7         call       free_state                                  ; free_state
000000000000aecc         jmp        loc_aeb8
000000000000aece         align      16

                     loc_aed0:
000000000000aed0         mov        dword [rdi], 0x0                            ; CODE XREF=re_acquire_state+21
000000000000aed6         xor        ebx, ebx
000000000000aed8         jmp        loc_ae6f
000000000000aeda         align      32                                          ; End of unwind block (FDE at 0x19cc8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112


                     merge_state_array:
000000000000aee0         push       r15                                         ; Begin of unwind block (FDE at 0x19d14), CODE XREF=re_search_internal+5755, update_cur_sifted_state+1819
000000000000aee2         push       r14
000000000000aee4         push       r13
000000000000aee6         push       r12
000000000000aee8         push       rbp
000000000000aee9         push       rbx
000000000000aeea         sub        rsp, 0x48
000000000000aeee         mov        rax, qword [fs:0x28]
000000000000aef7         mov        qword [rsp+0x78+var_40], rax
000000000000aefc         xor        eax, eax
000000000000aefe         test       rcx, rcx
000000000000af01         jle        loc_af96

000000000000af07         lea        rax, qword [rsp+0x78+var_5C]
000000000000af0c         mov        r14, rdi
000000000000af0f         mov        rbx, rsi
000000000000af12         mov        r12, rdx
000000000000af15         mov        rbp, rcx
000000000000af18         xor        r15d, r15d
000000000000af1b         lea        r13, qword [rsp+0x78+var_58]
000000000000af20         mov        qword [rsp+0x78+var_70], rax
000000000000af25         jmp        loc_af7c
000000000000af27         align      16

                     loc_af30:
000000000000af30         test       rdx, rdx                                    ; CODE XREF=merge_state_array+167
000000000000af33         je         loc_af73

000000000000af35         add        rdx, 0x8
000000000000af39         add        rsi, 0x8
000000000000af3d         mov        rdi, r13
000000000000af40         call       re_node_set_init_union                      ; re_node_set_init_union
000000000000af45         test       eax, eax
000000000000af47         mov        dword [rsp+0x78+var_5C], eax
000000000000af4b         jne        loc_af98

000000000000af4d         mov        rdi, qword [rsp+0x78+var_70]
000000000000af52         mov        rdx, r13
000000000000af55         mov        rsi, r14
000000000000af58         call       re_acquire_state                            ; re_acquire_state
000000000000af5d         mov        rdi, qword [rsp+0x78+var_48]                ; argument "__ptr" for method j_free
000000000000af62         mov        qword [rbx+r15*8], rax
000000000000af66         call       j_free                                      ; free
000000000000af6b         mov        eax, dword [rsp+0x78+var_5C]
000000000000af6f         test       eax, eax
000000000000af71         jne        loc_af98

                     loc_af73:
000000000000af73         add        r15, 0x1                                    ; CODE XREF=merge_state_array+83
000000000000af77         cmp        rbp, r15
000000000000af7a         je         loc_af96

                     loc_af7c:
000000000000af7c         mov        rsi, qword [rbx+r15*8]                      ; CODE XREF=merge_state_array+69, merge_state_array+180
000000000000af80         mov        rdx, qword [r12+r15*8]
000000000000af84         test       rsi, rsi
000000000000af87         jne        loc_af30

000000000000af89         mov        qword [rbx+r15*8], rdx
000000000000af8d         add        r15, 0x1
000000000000af91         cmp        rbp, r15
000000000000af94         jne        loc_af7c

                     loc_af96:
000000000000af96         xor        eax, eax                                    ; CODE XREF=merge_state_array+33, merge_state_array+154

                     loc_af98:
000000000000af98         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=merge_state_array+107, merge_state_array+145
000000000000af9d         xor        rcx, qword [fs:0x28]
000000000000afa6         jne        loc_afb7

000000000000afa8         add        rsp, 0x48
000000000000afac         pop        rbx
000000000000afad         pop        rbp
000000000000afae         pop        r12
000000000000afb0         pop        r13
000000000000afb2         pop        r14
000000000000afb4         pop        r15
000000000000afb6         ret
                        ; endp

                     loc_afb7:
000000000000afb7         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=merge_state_array+198
                        ; endp
000000000000afbc         align      64                                          ; End of unwind block (FDE at 0x19d14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     expand_bkref_cache:
000000000000afc0         push       r15                                         ; Begin of unwind block (FDE at 0x19d60), CODE XREF=check_arrival+928, check_arrival+1614
000000000000afc2         push       r14
000000000000afc4         push       r13
000000000000afc6         push       r12
000000000000afc8         mov        r12, rdx
000000000000afcb         push       rbp
000000000000afcc         push       rbx
000000000000afcd         mov        rbx, rdi
000000000000afd0         mov        rbp, rsi
000000000000afd3         xor        esi, esi
000000000000afd5         sub        rsp, 0x78
000000000000afd9         mov        rdi, qword [rdi+0xc8]
000000000000afe0         mov        rax, qword [fs:0x28]
000000000000afe9         mov        qword [rsp+0xa8+var_40], rax
000000000000afee         xor        eax, eax
000000000000aff0         mov        qword [rsp+0xa8+var_88], rcx
000000000000aff5         mov        dword [rsp+0xa8+var_7C], r8d
000000000000affa         mov        rdx, rdi

                     loc_affd:
000000000000affd         cmp        rsi, rdx                                    ; CODE XREF=expand_bkref_cache+247
000000000000b000         jge        loc_b057

000000000000b002         lea        rax, qword [rsi+rdx]
000000000000b006         mov        r8, qword [rbx+0xd8]
000000000000b00d         mov        rcx, rax
000000000000b010         shr        rcx, 0x3f
000000000000b014         add        rcx, rax
000000000000b017         sar        rcx, 0x1
000000000000b01a         lea        rax, qword [rcx+rcx*4]
000000000000b01e         cmp        r12, qword [r8+rax*8+8]
000000000000b023         jle        loc_b052

000000000000b025         jmp        loc_b0a8
000000000000b02a         align      16

                     loc_b030:
000000000000b030         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=expand_bkref_cache+149
000000000000b034         mov        rax, rdx
000000000000b037         shr        rax, 0x3f
000000000000b03b         add        rax, rdx
000000000000b03e         sar        rax, 0x1
000000000000b041         lea        rdx, qword [rax+rax*4]
000000000000b045         mov        r9, rax
000000000000b048         cmp        r12, qword [r8+rdx*8+8]
000000000000b04d         jg         loc_b0b0

000000000000b04f         mov        rcx, rax

                     loc_b052:
000000000000b052         cmp        rsi, rcx                                    ; CODE XREF=expand_bkref_cache+99
000000000000b055         jl         loc_b030

                     loc_b057:
000000000000b057         cmp        rdi, rsi                                    ; CODE XREF=expand_bkref_cache+64
000000000000b05a         jle        loc_b07d

000000000000b05c         mov        rcx, qword [rbx+0xd8]
000000000000b063         lea        rax, qword [rsi+rsi*4]
000000000000b067         shl        rax, 0x3
000000000000b06b         cmp        qword [rcx+rax+8], r12
000000000000b070         mov        qword [rsp+0xa8+var_78], rax
000000000000b075         jne        loc_b07d

000000000000b077         cmp        rsi, 0xffffffffffffffff
000000000000b07b         jne        loc_b0c0

                     loc_b07d:
000000000000b07d         xor        eax, eax                                    ; CODE XREF=expand_bkref_cache+154, expand_bkref_cache+181, expand_bkref_cache+514

                     loc_b07f:
000000000000b07f         mov        rbx, qword [rsp+0xa8+var_40]                ; CODE XREF=expand_bkref_cache+833, expand_bkref_cache+854, expand_bkref_cache+865, expand_bkref_cache+872, expand_bkref_cache+888
000000000000b084         xor        rbx, qword [fs:0x28]
000000000000b08d         jne        loc_b359

000000000000b093         add        rsp, 0x78
000000000000b097         pop        rbx
000000000000b098         pop        rbp
000000000000b099         pop        r12
000000000000b09b         pop        r13
000000000000b09d         pop        r14
000000000000b09f         pop        r15
000000000000b0a1         ret
                        ; endp
000000000000b0a2         align      8

                     loc_b0a8:
000000000000b0a8         mov        r9, rcx                                     ; CODE XREF=expand_bkref_cache+101
000000000000b0ab         mov        rcx, rdx
000000000000b0ae         nop

                     loc_b0b0:
000000000000b0b0         lea        rsi, qword [r9+1]                           ; CODE XREF=expand_bkref_cache+141
000000000000b0b4         mov        rdx, rcx
000000000000b0b7         jmp        loc_affd
000000000000b0bc         align      64

                     loc_b0c0:
000000000000b0c0         lea        rax, qword [rbp+0x10]                       ; CODE XREF=expand_bkref_cache+187
000000000000b0c4         mov        r13, qword [rbx+0x98]
000000000000b0cb         mov        qword [rsp+0xa8+var_A8], rax
000000000000b0cf         lea        rax, qword [rsp+0xa8+var_5C]
000000000000b0d4         mov        qword [rsp+0xa8+var_70], rax
000000000000b0d9         lea        rax, qword [rsp+0xa8+var_58]
000000000000b0de         mov        qword [rsp+0xa8+var_98], rax

                     loc_b0e3:
000000000000b0e3         mov        rax, qword [rsp+0xa8+var_78]                ; CODE XREF=expand_bkref_cache+737
000000000000b0e8         lea        r15, qword [rcx+rax]
000000000000b0ec         jmp        loc_b1c8
000000000000b0f1         align      8

                     loc_b0f8:
000000000000b0f8         mov        rax, qword [r13+0x18]                       ; CODE XREF=expand_bkref_cache+564
000000000000b0fc         mov        rcx, qword [rax+r10*8]
000000000000b100         mov        r10, qword [rbx+0xb8]
000000000000b107         lea        rax, qword [r14*8]
000000000000b10f         mov        qword [rsp+0xa8+var_90], rax
000000000000b114         add        r10, rax
000000000000b117         mov        qword [rsp+0xa8+var_A0], rcx
000000000000b11c         mov        r9, qword [r10]
000000000000b11f         test       r9, r9
000000000000b122         je         loc_b2b0

000000000000b128         mov        rdi, qword [r9+0x10]
000000000000b12c         lea        rsi, qword [r9+0x18]
000000000000b130         mov        rdx, rcx
000000000000b133         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000b138         test       rax, rax
000000000000b13b         jne        loc_b1b9

000000000000b13d         mov        rdi, qword [rsp+0xa8+var_98]
000000000000b142         lea        rsi, qword [r9+8]
000000000000b146         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000b14b         mov        rsi, qword [rsp+0xa8+var_A0]
000000000000b150         mov        rdi, qword [rsp+0xa8+var_98]
000000000000b155         mov        dword [rsp+0xa8+var_5C], eax
000000000000b159         call       re_node_set_insert                          ; re_node_set_insert
000000000000b15e         mov        edx, dword [rsp+0xa8+var_5C]
000000000000b162         test       edx, edx
000000000000b164         jne        loc_b306

000000000000b16a         cmp        al, 0x1
000000000000b16c         jne        loc_b306

000000000000b172         mov        r10, qword [rsp+0xa8+var_90]
000000000000b177         add        r10, qword [rbx+0xb8]

                     loc_b17e:
000000000000b17e         mov        rdx, qword [rsp+0xa8+var_98]                ; CODE XREF=expand_bkref_cache+816
000000000000b183         mov        rdi, qword [rsp+0xa8+var_70]
000000000000b188         mov        rsi, r13
000000000000b18b         mov        qword [rsp+0xa8+var_A0], r10
000000000000b190         call       re_acquire_state                            ; re_acquire_state
000000000000b195         mov        r10, qword [rsp+0xa8+var_A0]
000000000000b19a         mov        rdi, qword [rsp+0xa8+var_48]                ; argument "__ptr" for method j_free
000000000000b19f         mov        qword [r10], rax
000000000000b1a2         call       j_free                                      ; free
000000000000b1a7         mov        rax, qword [rbx+0xb8]
000000000000b1ae         cmp        qword [rax+r14*8], 0x0
000000000000b1b3         je         loc_b2f5

                     loc_b1b9:
000000000000b1b9         add        r15, 0x28                                   ; CODE XREF=expand_bkref_cache+379, expand_bkref_cache+545, expand_bkref_cache+607, expand_bkref_cache+827
000000000000b1bd         cmp        byte [r15-8], 0x0
000000000000b1c2         je         loc_b07d

                     loc_b1c8:
000000000000b1c8         mov        r10, qword [r15]                            ; CODE XREF=expand_bkref_cache+300
000000000000b1cb         mov        r9, qword [rbp+8]
000000000000b1cf         mov        rsi, qword [rsp+0xa8+var_A8]
000000000000b1d3         mov        rdx, r10
000000000000b1d6         mov        rdi, r9
000000000000b1d9         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000b1de         test       rax, rax
000000000000b1e1         je         loc_b1b9

000000000000b1e3         mov        r8, qword [r15+0x18]
000000000000b1e7         add        r8, r12
000000000000b1ea         mov        r14, r8
000000000000b1ed         sub        r14, qword [r15+0x10]
000000000000b1f1         cmp        r12, r14
000000000000b1f4         jne        loc_b0f8

000000000000b1fa         mov        rcx, qword [r13+0x28]
000000000000b1fe         lea        rax, qword [r10+r10*2]
000000000000b202         mov        rsi, qword [rsp+0xa8+var_A8]
000000000000b206         mov        rdi, r9
000000000000b209         lea        rax, qword [rcx+rax*8]
000000000000b20d         mov        rax, qword [rax+0x10]
000000000000b211         mov        r14, qword [rax]
000000000000b214         mov        rdx, r14
000000000000b217         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000b21c         test       rax, rax
000000000000b21f         jne        loc_b1b9

000000000000b221         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
000000000000b226         mov        qword [rsp+0xa8+var_58], 0x1
000000000000b22f         mov        qword [rsp+0xa8+var_50], 0x1
000000000000b238         call       j_malloc                                    ; malloc
000000000000b23d         test       rax, rax
000000000000b240         mov        qword [rsp+0xa8+var_48], rax
000000000000b245         je         loc_b33d

000000000000b24b         mov        qword [rax], r14
000000000000b24e         xor        eax, eax

                     loc_b250:
000000000000b250         mov        r15, qword [rsp+0xa8+var_98]                ; CODE XREF=expand_bkref_cache+916
000000000000b255         mov        rdx, qword [rsp+0xa8+var_88]
000000000000b25a         mov        rdi, r13
000000000000b25d         mov        ecx, dword [rsp+0xa8+var_7C]
000000000000b261         mov        dword [rsp+0xa8+var_5C], eax
000000000000b265         mov        rsi, r15
000000000000b268         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
000000000000b26d         mov        rsi, r15
000000000000b270         mov        rdi, rbp
000000000000b273         mov        r14d, eax
000000000000b276         call       re_node_set_merge                           ; re_node_set_merge
000000000000b27b         mov        rdi, qword [rsp+0xa8+var_48]                ; argument "__ptr" for method j_free
000000000000b280         mov        r15d, eax
000000000000b283         call       j_free                                      ; free
000000000000b288         mov        eax, dword [rsp+0xa8+var_5C]
000000000000b28c         mov        edx, r14d
000000000000b28f         or         edx, r15d
000000000000b292         or         edx, eax
000000000000b294         jne        loc_b326

000000000000b29a         mov        rcx, qword [rbx+0xd8]
000000000000b2a1         jmp        loc_b0e3
000000000000b2a6         align      16

                     loc_b2b0:
000000000000b2b0         mov        edi, 0x8                                    ; argument "__size" for method j_malloc, CODE XREF=expand_bkref_cache+354
000000000000b2b5         mov        qword [rsp+0xa8+var_90], r10
000000000000b2ba         mov        qword [rsp+0xa8+var_58], 0x1
000000000000b2c3         mov        qword [rsp+0xa8+var_50], 0x1
000000000000b2cc         call       j_malloc                                    ; malloc
000000000000b2d1         test       rax, rax
000000000000b2d4         mov        qword [rsp+0xa8+var_48], rax
000000000000b2d9         je         loc_b31c

000000000000b2db         mov        rdi, qword [rsp+0xa8+var_A0]
000000000000b2e0         mov        dword [rsp+0xa8+var_5C], 0x0
000000000000b2e8         mov        r10, qword [rsp+0xa8+var_90]
000000000000b2ed         mov        qword [rax], rdi
000000000000b2f0         jmp        loc_b17e

                     loc_b2f5:
000000000000b2f5         mov        eax, dword [rsp+0xa8+var_5C]                ; CODE XREF=expand_bkref_cache+499
000000000000b2f9         test       eax, eax
000000000000b2fb         je         loc_b1b9

000000000000b301         jmp        loc_b07f

                     loc_b306:
000000000000b306         mov        rdi, qword [rsp+0xa8+var_48]                ; argument "__ptr" for method j_free, CODE XREF=expand_bkref_cache+420, expand_bkref_cache+428
000000000000b30b         call       j_free                                      ; free
000000000000b310         mov        eax, dword [rsp+0xa8+var_5C]
000000000000b314         test       eax, eax
000000000000b316         jne        loc_b07f

                     loc_b31c:
000000000000b31c         mov        eax, 0xc                                    ; CODE XREF=expand_bkref_cache+793
000000000000b321         jmp        loc_b07f

                     loc_b326:
000000000000b326         test       eax, eax                                    ; CODE XREF=expand_bkref_cache+724
000000000000b328         jne        loc_b07f

000000000000b32e         test       r14d, r14d
000000000000b331         mov        eax, r14d
000000000000b334         cmove      eax, r15d
000000000000b338         jmp        loc_b07f

                     loc_b33d:
000000000000b33d         mov        qword [rsp+0xa8+var_50], 0x0                ; CODE XREF=expand_bkref_cache+645
000000000000b346         mov        qword [rsp+0xa8+var_58], 0x0
000000000000b34f         mov        eax, 0xc
000000000000b354         jmp        loc_b250

                     loc_b359:
000000000000b359         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=expand_bkref_cache+205
                        ; endp
000000000000b35e         align      32                                          ; End of unwind block (FDE at 0x19d60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     check_subexp_matching_top.isra.18:
000000000000b360         push       r15                                         ; Begin of unwind block (FDE at 0x19dac), CODE XREF=transit_state_bkref.isra.34+2056, merge_state_with_log+417, re_search_internal+5535
000000000000b362         push       r14
000000000000b364         push       r13
000000000000b366         push       r12
000000000000b368         push       rbp
000000000000b369         push       rbx
000000000000b36a         sub        rsp, 0x28
000000000000b36e         cmp        qword [rsi], 0x0
000000000000b372         mov        r13, qword [rdi+0x98]
000000000000b379         jle        loc_b440

000000000000b37f         mov        r14, rdx
000000000000b382         mov        r12, rsi
000000000000b385         mov        r15, rdi
000000000000b388         xor        ebx, ebx
000000000000b38a         jmp        loc_b39e
000000000000b38c         align      16

                     loc_b390:
000000000000b390         add        rbx, 0x1                                    ; CODE XREF=check_subexp_matching_top.isra.18+84, check_subexp_matching_top.isra.18+93, check_subexp_matching_top.isra.18+106
000000000000b394         cmp        rbx, qword [r12]
000000000000b398         jge        loc_b440

                     loc_b39e:
000000000000b39e         mov        rax, qword [r14]                            ; CODE XREF=check_subexp_matching_top.isra.18+42, check_subexp_matching_top.isra.18+211
000000000000b3a1         mov        rbp, qword [rax+rbx*8]
000000000000b3a5         mov        rax, rbp
000000000000b3a8         shl        rax, 0x4
000000000000b3ac         add        rax, qword [r13]
000000000000b3b0         cmp        byte [rax+8], 0x8
000000000000b3b4         jne        loc_b390

000000000000b3b6         mov        rax, qword [rax]
000000000000b3b9         cmp        rax, 0x3f
000000000000b3bd         jg         loc_b390

000000000000b3bf         mov        rsi, qword [r13+0xa0]
000000000000b3c6         bt         rsi, rax
000000000000b3ca         jae        loc_b390

000000000000b3cc         mov        r8, qword [r15+0xe8]
000000000000b3d3         cmp        r8, qword [r15+0xf0]
000000000000b3da         mov        r9, qword [r15+0xf8]
000000000000b3e1         je         loc_b458

                     loc_b3e3:
000000000000b3e3         mov        esi, 0x30                                   ; argument "__size" for method j_calloc, CODE XREF=check_subexp_matching_top.isra.18+316
000000000000b3e8         mov        edi, 0x1                                    ; argument "__nmemb" for method j_calloc
000000000000b3ed         mov        qword [rsp+0x58+var_48], r9
000000000000b3f2         mov        qword [rsp+0x58+var_50], r8
000000000000b3f7         mov        qword [rsp+0x58+var_40], rcx
000000000000b3fc         call       j_calloc                                    ; calloc
000000000000b401         mov        r8, qword [rsp+0x58+var_50]
000000000000b406         mov        r9, qword [rsp+0x58+var_48]
000000000000b40b         test       rax, rax
000000000000b40e         mov        qword [r9+r8*8], rax
000000000000b412         je         loc_b451

000000000000b414         add        r8, 0x1
000000000000b418         add        rbx, 0x1
000000000000b41c         mov        rcx, qword [rsp+0x58+var_40]
000000000000b421         mov        qword [r15+0xe8], r8
000000000000b428         cmp        rbx, qword [r12]
000000000000b42c         mov        qword [rax+8], rbp
000000000000b430         mov        qword [rax], rcx
000000000000b433         jl         loc_b39e

000000000000b439         nop        dword [rax]

                     loc_b440:
000000000000b440         xor        eax, eax                                    ; CODE XREF=check_subexp_matching_top.isra.18+25, check_subexp_matching_top.isra.18+56

                     loc_b442:
000000000000b442         add        rsp, 0x28                                   ; CODE XREF=check_subexp_matching_top.isra.18+246
000000000000b446         pop        rbx
000000000000b447         pop        rbp
000000000000b448         pop        r12
000000000000b44a         pop        r13
000000000000b44c         pop        r14
000000000000b44e         pop        r15
000000000000b450         ret
                        ; endp

                     loc_b451:
000000000000b451         mov        eax, 0xc                                    ; CODE XREF=check_subexp_matching_top.isra.18+178, check_subexp_matching_top.isra.18+288
000000000000b456         jmp        loc_b442

                     loc_b458:
000000000000b458         lea        rax, qword [r8+r8]                          ; CODE XREF=check_subexp_matching_top.isra.18+129
000000000000b45c         mov        rsi, r8
000000000000b45f         mov        rdi, r9                                     ; argument "__ptr" for method j_realloc
000000000000b462         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
000000000000b466         mov        qword [rsp+0x58+var_50], rcx
000000000000b46b         mov        qword [rsp+0x58+var_48], rax
000000000000b470         call       j_realloc                                   ; realloc
000000000000b475         test       rax, rax
000000000000b478         mov        r9, rax
000000000000b47b         mov        rcx, qword [rsp+0x58+var_50]
000000000000b480         je         loc_b451

000000000000b482         mov        qword [r15+0xf8], rax
000000000000b489         mov        rax, qword [rsp+0x58+var_48]
000000000000b48e         mov        r8, qword [r15+0xe8]
000000000000b495         mov        qword [r15+0xf0], rax
000000000000b49c         jmp        loc_b3e3
000000000000b4a1         align      16                                          ; End of unwind block (FDE at 0x19dac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_context_at:
000000000000b4b0         push       rbp                                         ; Begin of unwind block (FDE at 0x19df8), CODE XREF=check_node_accept+109, check_halt_state_context.isra.20+22, re_string_reconstruct+201, re_string_reconstruct+805, re_string_reconstruct+1635, check_arrival+192, check_arrival+962, check_arrival+1179, transit_state_bkref.isra.34+265, transit_state_bkref.isra.34+1092, merge_state_with_log+222
000000000000b4b1         push       rbx
000000000000b4b2         mov        rbp, rdi
000000000000b4b5         sub        rsp, 0x8
000000000000b4b9         test       rsi, rsi
000000000000b4bc         js         loc_b510

000000000000b4be         cmp        qword [rdi+0x58], rsi
000000000000b4c2         je         loc_b568

000000000000b4c8         cmp        dword [rdi+0x90], 0x1
000000000000b4cf         jle        loc_b520

000000000000b4d1         mov        rax, qword [rdi+0x10]
000000000000b4d5         jmp        loc_b4ea
000000000000b4d7         align      32

                     loc_b4e0:
000000000000b4e0         sub        rsi, 0x1                                    ; CODE XREF=re_string_context_at+64
000000000000b4e4         cmp        rsi, 0xffffffffffffffff
000000000000b4e8         je         loc_b510

                     loc_b4ea:
000000000000b4ea         mov        ebx, dword [rax+rsi*4]                      ; CODE XREF=re_string_context_at+37
000000000000b4ed         cmp        ebx, 0xffffffff
000000000000b4f0         je         loc_b4e0

000000000000b4f2         cmp        byte [rbp+0x8e], 0x0
000000000000b4f9         jne        loc_b578

                     loc_b4fb:
000000000000b4fb         xor        eax, eax                                    ; CODE XREF=re_string_context_at+214
000000000000b4fd         cmp        ebx, 0xa
000000000000b500         je         loc_b54c

                     loc_b502:
000000000000b502         add        rsp, 0x8                                    ; CODE XREF=re_string_context_at+147, re_string_context_at+154, re_string_context_at+198, re_string_context_at+225
000000000000b506         pop        rbx
000000000000b507         pop        rbp
000000000000b508         ret
                        ; endp
000000000000b509         align      16

                     loc_b510:
000000000000b510         mov        eax, dword [rbp+0x70]                       ; CODE XREF=re_string_context_at+12, re_string_context_at+56
000000000000b513         add        rsp, 0x8
000000000000b517         pop        rbx
000000000000b518         pop        rbp
000000000000b519         ret
                        ; endp
000000000000b51a         align      32

                     loc_b520:
000000000000b520         mov        rax, qword [rdi+8]                          ; CODE XREF=re_string_context_at+31
000000000000b524         mov        rcx, qword [rdi+0x80]
000000000000b52b         movzx      eax, byte [rax+rsi]
000000000000b52f         mov        rdx, rax
000000000000b532         sar        rax, 0x6
000000000000b536         mov        rcx, qword [rcx+rax*8]
000000000000b53a         mov        eax, 0x1
000000000000b53f         bt         rcx, rdx
000000000000b543         jb         loc_b502

000000000000b545         xor        eax, eax
000000000000b547         cmp        dl, 0xa
000000000000b54a         jne        loc_b502

                     loc_b54c:
000000000000b54c         xor        eax, eax                                    ; CODE XREF=re_string_context_at+80
000000000000b54e         cmp        byte [rbp+0x8d], 0x0
000000000000b555         setne      al
000000000000b558         add        rsp, 0x8
000000000000b55c         add        eax, eax
000000000000b55e         pop        rbx
000000000000b55f         pop        rbp
000000000000b560         ret
                        ; endp
000000000000b561         align      8

                     loc_b568:
000000000000b568         and        edx, 0x2                                    ; CODE XREF=re_string_context_at+18
000000000000b56b         cmp        edx, 0x1
000000000000b56e         sbb        eax, eax
000000000000b570         and        eax, 0x2
000000000000b573         add        eax, 0x8
000000000000b576         jmp        loc_b502

                     loc_b578:
000000000000b578         mov        edi, ebx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=re_string_context_at+73
000000000000b57a         call       j_iswalnum                                  ; iswalnum
000000000000b57f         test       eax, eax
000000000000b581         jne        loc_b58c

000000000000b583         cmp        ebx, 0x5f
000000000000b586         jne        loc_b4fb

                     loc_b58c:
000000000000b58c         mov        eax, 0x1                                    ; CODE XREF=re_string_context_at+209
000000000000b591         jmp        loc_b502
000000000000b596         align      32                                          ; End of unwind block (FDE at 0x19df8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_node_accept:
000000000000b5a0         mov        rax, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x19e3c), CODE XREF=check_arrival+495, set_regs+378, sift_states_backward+295
000000000000b5a4         movzx      ecx, byte [rax+rdx]
000000000000b5a8         movzx      eax, byte [rsi+8]
000000000000b5ac         cmp        al, 0x3
000000000000b5ae         je         loc_b668

000000000000b5b4         jbe        loc_b650

000000000000b5ba         cmp        al, 0x5
000000000000b5bc         je         loc_b5d0

000000000000b5be         cmp        al, 0x7
000000000000b5c0         jne        loc_b660

000000000000b5c6         xor        eax, eax
000000000000b5c8         test       cl, cl
000000000000b5ca         js         loc_b65a

                     loc_b5d0:
000000000000b5d0         cmp        cl, 0xa                                     ; CODE XREF=check_node_accept+28
000000000000b5d3         je         loc_b698

000000000000b5d9         test       cl, cl
000000000000b5db         jne        loc_b5f0

000000000000b5dd         mov        rcx, qword [rdi+0x98]
000000000000b5e4         xor        eax, eax
000000000000b5e6         test       byte [rcx+0xd8], 0x80
000000000000b5ed         jne        loc_b65a

000000000000b5ef         nop

                     loc_b5f0:
000000000000b5f0         push       rbx                                         ; CODE XREF=check_node_accept+59, check_node_accept+184, check_node_accept+220, check_node_accept+264
000000000000b5f1         mov        ebx, dword [rsi+8]
000000000000b5f4         mov        eax, 0x1
000000000000b5f9         test       ebx, 0x3ff00
000000000000b5ff         je         loc_b64c

000000000000b601         mov        rsi, rdx
000000000000b604         mov        edx, dword [rdi+0xa0]
000000000000b60a         shr        ebx, 0x8
000000000000b60d         call       re_string_context_at                        ; re_string_context_at
000000000000b612         mov        ecx, ebx
000000000000b614         mov        edx, eax
000000000000b616         and        cx, 0x3ff
000000000000b61b         test       bl, 0x4
000000000000b61e         je         loc_b688

000000000000b620         xor        eax, eax
000000000000b622         test       dl, 0x1
000000000000b625         je         loc_b64c

000000000000b627         and        ebx, 0x8
000000000000b62a         jne        loc_b64c

                     loc_b62c:
000000000000b62c         test       cl, 0x20                                    ; CODE XREF=check_node_accept+235, check_node_accept+239
000000000000b62f         je         loc_b638

000000000000b631         xor        eax, eax
000000000000b633         test       dl, 0x2
000000000000b636         je         loc_b64c

                     loc_b638:
000000000000b638         shr        edx, 0x3                                    ; CODE XREF=check_node_accept+143
000000000000b63b         mov        eax, 0x1
000000000000b640         and        edx, 0x1
000000000000b643         and        ecx, 0x80
000000000000b649         cmovne     eax, edx

                     loc_b64c:
000000000000b64c         pop        rbx                                         ; CODE XREF=check_node_accept+95, check_node_accept+133, check_node_accept+138, check_node_accept+150
000000000000b64d         ret
                        ; endp
000000000000b64e         align      16

                     loc_b650:
000000000000b650         cmp        al, 0x1                                     ; CODE XREF=check_node_accept+20
000000000000b652         jne        loc_b660

000000000000b654         xor        eax, eax
000000000000b656         cmp        byte [rsi], cl
000000000000b658         je         loc_b5f0

                     loc_b65a:
000000000000b65a         ret                                                    ; CODE XREF=check_node_accept+42, check_node_accept+77
                        ; endp
000000000000b65c         align      32

                     loc_b660:
000000000000b660         xor        eax, eax                                    ; CODE XREF=check_node_accept+32, check_node_accept+178
000000000000b662         ret
                        ; endp
000000000000b663         align      8

                     loc_b668:
000000000000b668         mov        r8, qword [rsi]                             ; CODE XREF=check_node_accept+14
000000000000b66b         movzx      eax, cl
000000000000b66e         sar        rax, 0x6
000000000000b672         mov        r8, qword [r8+rax*8]
000000000000b676         xor        eax, eax
000000000000b678         bt         r8, rcx
000000000000b67c         jb         loc_b5f0

000000000000b682         ret
                        ; endp
000000000000b684         align      8

                     loc_b688:
000000000000b688         and        ebx, 0x8                                    ; CODE XREF=check_node_accept+126
000000000000b68b         je         loc_b62c

000000000000b68d         test       al, 0x1
000000000000b68f         je         loc_b62c

000000000000b691         xor        eax, eax
000000000000b693         pop        rbx
000000000000b694         ret
                        ; endp
000000000000b695         align      8

                     loc_b698:
000000000000b698         mov        rcx, qword [rdi+0x98]                       ; CODE XREF=check_node_accept+51
000000000000b69f         xor        eax, eax
000000000000b6a1         test       byte [rcx+0xd8], 0x40
000000000000b6a8         jne        loc_b5f0

000000000000b6ae         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_halt_state_context.isra.20:
000000000000b6b0         push       r12                                         ; End of unwind block (FDE at 0x19e3c), Begin of unwind block (FDE at 0x19e64), CODE XREF=re_search_internal+2247, re_search_internal+2620, re_search_internal+3076, re_search_internal+4556, re_search_internal+5591
000000000000b6b2         mov        r12, rdx
000000000000b6b5         push       rbp
000000000000b6b6         push       rbx
000000000000b6b7         mov        edx, dword [rdi+0xa0]
000000000000b6bd         mov        rbx, rsi
000000000000b6c0         mov        rsi, rcx
000000000000b6c3         mov        rbp, rdi
000000000000b6c6         call       re_string_context_at                        ; re_string_context_at
000000000000b6cb         test       rbx, rbx
000000000000b6ce         jle        loc_b778

000000000000b6d4         mov        rdx, qword [rbp+0x98]
000000000000b6db         mov        r11d, eax
000000000000b6de         mov        ebp, eax
000000000000b6e0         and        eax, 0x1
000000000000b6e3         mov        r9, qword [r12]
000000000000b6e7         xor        esi, esi
000000000000b6e9         and        ebp, 0x8
000000000000b6ec         and        r11d, 0x2
000000000000b6f0         mov        r10d, eax
000000000000b6f3         mov        r8, qword [rdx]
000000000000b6f6         jmp        loc_b709
000000000000b6f8         align      256

                     loc_b700:
000000000000b700         add        rsi, 0x1                                    ; CODE XREF=check_halt_state_context.isra.20+120, check_halt_state_context.isra.20+135, check_halt_state_context.isra.20+140, check_halt_state_context.isra.20+151, check_halt_state_context.isra.20+163, check_halt_state_context.isra.20+184
000000000000b704         cmp        rsi, rbx
000000000000b707         je         loc_b778

                     loc_b709:
000000000000b709         mov        rax, qword [r9+rsi*8]                       ; CODE XREF=check_halt_state_context.isra.20+70
000000000000b70d         mov        rdx, rax
000000000000b710         shl        rdx, 0x4
000000000000b714         add        rdx, r8
000000000000b717         mov        ecx, dword [rdx+8]
000000000000b71a         shr        ecx, 0x8
000000000000b71d         mov        edi, ecx
000000000000b71f         and        di, 0x3ff
000000000000b724         cmp        byte [rdx+8], 0x2
000000000000b728         jne        loc_b700

000000000000b72a         test       di, di
000000000000b72d         je         loc_b755

000000000000b72f         test       cl, 0x4
000000000000b732         je         loc_b760

000000000000b734         test       r10d, r10d
000000000000b737         je         loc_b700

000000000000b739         and        ecx, 0x8
000000000000b73c         jne        loc_b700

                     loc_b73e:
000000000000b73e         test       dil, 0x20                                   ; CODE XREF=check_halt_state_context.isra.20+179
000000000000b742         je         loc_b749

                     loc_b744:
000000000000b744         test       r11d, r11d                                  ; CODE XREF=check_halt_state_context.isra.20+192
000000000000b747         je         loc_b700

                     loc_b749:
000000000000b749         and        edi, 0x80                                   ; CODE XREF=check_halt_state_context.isra.20+146, check_halt_state_context.isra.20+190
000000000000b74f         je         loc_b755

000000000000b751         test       ebp, ebp
000000000000b753         je         loc_b700

                     loc_b755:
000000000000b755         pop        rbx                                         ; CODE XREF=check_halt_state_context.isra.20+125, check_halt_state_context.isra.20+159
000000000000b756         pop        rbp
000000000000b757         pop        r12
000000000000b759         ret
                        ; endp
000000000000b75a         align      32

                     loc_b760:
000000000000b760         and        ecx, 0x8                                    ; CODE XREF=check_halt_state_context.isra.20+130
000000000000b763         je         loc_b73e

000000000000b765         test       r10d, r10d
000000000000b768         jne        loc_b700

000000000000b76a         test       dil, 0x20
000000000000b76e         je         loc_b749

000000000000b770         jmp        loc_b744
000000000000b772         align      8

                     loc_b778:
000000000000b778         pop        rbx                                         ; CODE XREF=check_halt_state_context.isra.20+30, check_halt_state_context.isra.20+87
000000000000b779         xor        eax, eax
000000000000b77b         pop        rbp
000000000000b77c         pop        r12
000000000000b77e         ret
                        ; endp
000000000000b77f         align      128                                         ; End of unwind block (FDE at 0x19e64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_46: int8_t, -70
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_78: int64_t, -120


                     re_string_reconstruct:
000000000000b780         push       r15                                         ; Begin of unwind block (FDE at 0x19e9c), CODE XREF=re_search_internal+1510, re_search_internal+4443
000000000000b782         push       r14
000000000000b784         mov        r15, rsi
000000000000b787         push       r13
000000000000b789         push       r12
000000000000b78b         mov        r10d, edx
000000000000b78e         push       rbp
000000000000b78f         push       rbx
000000000000b790         mov        rbp, rsi
000000000000b793         mov        rbx, rdi
000000000000b796         sub        rsp, 0x48
000000000000b79a         mov        rax, qword [fs:0x28]
000000000000b7a3         mov        qword [rsp+0x78+var_40], rax
000000000000b7a8         xor        eax, eax
000000000000b7aa         mov        rax, qword [rdi+0x28]
000000000000b7ae         sub        rbp, rax
000000000000b7b1         cmp        rax, rsi
000000000000b7b4         jle        loc_b816

000000000000b7b6         cmp        dword [rdi+0x90], 0x1
000000000000b7bd         jg         loc_b8f0

                     loc_b7c3:
000000000000b7c3         mov        rax, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+376
000000000000b7c7         mov        qword [rbx+0x30], 0x0
000000000000b7cf         mov        rbp, r15
000000000000b7d2         mov        qword [rbx+0x28], 0x0
000000000000b7da         mov        qword [rbx+0x38], 0x0
000000000000b7e2         mov        byte [rbx+0x8c], 0x0
000000000000b7e9         mov        qword [rbx+0x58], rax
000000000000b7ed         mov        rax, qword [rbx+0x60]
000000000000b7f1         mov        qword [rbx+0x68], rax
000000000000b7f5         mov        eax, r10d
000000000000b7f8         and        eax, 0x1
000000000000b7fb         cmp        eax, 0x1
000000000000b7fe         sbb        eax, eax
000000000000b800         and        eax, 0x2
000000000000b803         add        eax, 0x4
000000000000b806         cmp        byte [rbx+0x8b], 0x0
000000000000b80d         mov        dword [rbx+0x70], eax
000000000000b810         je         loc_b8e0

                     loc_b816:
000000000000b816         test       rbp, rbp                                    ; CODE XREF=re_string_reconstruct+52, re_string_reconstruct+359
000000000000b819         je         loc_b87e

000000000000b81b         mov        rax, qword [rbx+0x38]
000000000000b81f         movzx      edx, byte [rbx+0x8c]
000000000000b826         mov        r8, qword [rbx+0x30]
000000000000b82a         cmp        rax, rbp
000000000000b82d         jle        loc_b950

000000000000b833         test       dl, dl
000000000000b835         jne        loc_ba48

000000000000b83b         lea        rsi, qword [rbp-1]
000000000000b83f         mov        edx, r10d
000000000000b842         mov        rdi, rbx
000000000000b845         mov        qword [rsp+0x78+var_78], r8
000000000000b849         call       re_string_context_at                        ; re_string_context_at
000000000000b84e         mov        r8, qword [rsp+0x78+var_78]
000000000000b852         mov        dword [rbx+0x70], eax
000000000000b855         sub        r8, rbp
000000000000b858         cmp        dword [rbx+0x90], 0x1
000000000000b85f         jg         loc_b900

                     loc_b865:
000000000000b865         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_reconstruct+412
000000000000b86c         jne        loc_bc10

000000000000b872         sub        qword [rbx+0x38], rbp
000000000000b876         mov        qword [rbx+0x30], r8

                     loc_b87a:
000000000000b87a         add        qword [rbx+8], rbp                          ; CODE XREF=re_string_reconstruct+1150, re_string_reconstruct+1780

                     loc_b87e:
000000000000b87e         mov        rax, qword [rbx+0x58]                       ; CODE XREF=re_string_reconstruct+153, re_string_reconstruct+1156
000000000000b882         sub        qword [rbx+0x68], rbp
000000000000b886         mov        qword [rbx+0x28], r15
000000000000b88a         sub        rax, rbp
000000000000b88d         cmp        dword [rbx+0x90], 0x1
000000000000b894         mov        qword [rbx+0x58], rax
000000000000b898         jle        loc_b938

000000000000b89e         cmp        byte [rbx+0x88], 0x0
000000000000b8a5         mov        rdi, rbx
000000000000b8a8         je         loc_b928

000000000000b8aa         call       build_wcs_upper_buffer                      ; build_wcs_upper_buffer
000000000000b8af         test       eax, eax
000000000000b8b1         jne        loc_b8bd

                     loc_b8b3:
000000000000b8b3         mov        qword [rbx+0x48], 0x0                       ; CODE XREF=re_string_reconstruct+429, re_string_reconstruct+457, re_string_reconstruct+1412, re_string_reconstruct+1488, re_string_reconstruct+1656
000000000000b8bb         xor        eax, eax

                     loc_b8bd:
000000000000b8bd         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=re_string_reconstruct+305
000000000000b8c2         xor        rcx, qword [fs:0x28]
000000000000b8cb         jne        loc_bf1a

000000000000b8d1         add        rsp, 0x48
000000000000b8d5         pop        rbx
000000000000b8d6         pop        rbp
000000000000b8d7         pop        r12
000000000000b8d9         pop        r13
000000000000b8db         pop        r14
000000000000b8dd         pop        r15
000000000000b8df         ret
                        ; endp

                     loc_b8e0:
000000000000b8e0         mov        rax, qword [rbx]                            ; CODE XREF=re_string_reconstruct+144
000000000000b8e3         mov        qword [rbx+8], rax
000000000000b8e7         jmp        loc_b816
000000000000b8ec         align      16

                     loc_b8f0:
000000000000b8f0         mov        qword [rdi+0x20], 0x0                       ; CODE XREF=re_string_reconstruct+61
000000000000b8f8         jmp        loc_b7c3
000000000000b8fd         align      256

                     loc_b900:
000000000000b900         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memmove, CODE XREF=re_string_reconstruct+223
000000000000b904         lea        rdx, qword [r8*4]                           ; argument "__n" for method j_memmove
000000000000b90c         lea        rsi, qword [rdi+rbp*4]                      ; argument "__src" for method j_memmove
000000000000b910         call       j_memmove                                   ; memmove
000000000000b915         mov        r8, qword [rbx+0x30]
000000000000b919         sub        r8, rbp
000000000000b91c         jmp        loc_b865
000000000000b921         align      8

                     loc_b928:
000000000000b928         call       build_wcs_buffer                            ; build_wcs_buffer, CODE XREF=re_string_reconstruct+296
000000000000b92d         jmp        loc_b8b3
000000000000b932         align      8

                     loc_b938:
000000000000b938         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_reconstruct+280
000000000000b93f         jne        loc_bcf0

000000000000b945         mov        qword [rbx+0x30], rax
000000000000b949         jmp        loc_b8b3
000000000000b94e         align      16

                     loc_b950:
000000000000b950         test       dl, dl                                      ; CODE XREF=re_string_reconstruct+173
000000000000b952         jne        loc_bdfd

                     loc_b958:
000000000000b958         movsxd     rdx, dword [rbx+0x90]                       ; CODE XREF=re_string_reconstruct+1696
000000000000b95f         mov        qword [rbx+0x30], 0x0
000000000000b967         mov        r11, qword [rbx+0x28]
000000000000b96b         cmp        edx, 0x1
000000000000b96e         jle        loc_bd58

000000000000b974         cmp        byte [rbx+0x89], 0x0
000000000000b97b         jne        loc_bc38

                     loc_b981:
000000000000b981         lea        r14, qword [r11+rax]                        ; CODE XREF=re_string_reconstruct+1244, re_string_reconstruct+1263, re_string_reconstruct+1380
000000000000b985         cmp        r15, r14
000000000000b988         jle        loc_bdcf

000000000000b98e         lea        rax, qword [rbx+0x20]
000000000000b992         lea        r13, qword [rsp+0x78+var_54]
000000000000b997         mov        qword [rsp+0x78+var_68], rax
000000000000b99c         nop        dword [rax]

                     loc_b9a0:
000000000000b9a0         mov        r12, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+624
000000000000b9a4         mov        rsi, qword [rbx]
000000000000b9a7         mov        rdi, r13
000000000000b9aa         mov        rax, qword [rbx+0x20]
000000000000b9ae         mov        rcx, qword [rsp+0x78+var_68]
000000000000b9b3         mov        dword [rsp+0x78+var_6C], r10d
000000000000b9b8         mov        qword [rsp+0x78+var_78], r8
000000000000b9bc         sub        r12, r14
000000000000b9bf         add        rsi, r14
000000000000b9c2         mov        rdx, r12
000000000000b9c5         mov        qword [rsp+0x78+var_60], rax
000000000000b9ca         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000b9cf         lea        rcx, qword [rax-1]
000000000000b9d3         mov        edx, dword [rsp+0x78+var_54]
000000000000b9d7         mov        r8, qword [rsp+0x78+var_78]
000000000000b9db         mov        r10d, dword [rsp+0x78+var_6C]
000000000000b9e0         cmp        rcx, 0xfffffffffffffffc
000000000000b9e4         ja         loc_be25

                     loc_b9ea:
000000000000b9ea         add        r14, rax                                    ; CODE XREF=re_string_reconstruct+1733
000000000000b9ed         cmp        r15, r14
000000000000b9f0         jg         loc_b9a0

000000000000b9f2         sub        r14, r15
000000000000b9f5         cmp        edx, 0xffffffff
000000000000b9f8         mov        r12, r14
000000000000b9fb         mov        qword [rbx+0x30], r14
000000000000b9ff         je         loc_bdd9

                     loc_ba05:
000000000000ba05         cmp        byte [rbx+0x8e], 0x0                        ; CODE XREF=re_string_reconstruct+1850
000000000000ba0c         jne        loc_be79

                     loc_ba12:
000000000000ba12         xor        eax, eax                                    ; CODE XREF=re_string_reconstruct+1805
000000000000ba14         cmp        edx, 0xa
000000000000ba17         jne        loc_ba27

000000000000ba19         xor        eax, eax
000000000000ba1b         cmp        byte [rbx+0x8d], 0x0
000000000000ba22         setne      al
000000000000ba25         add        eax, eax

                     loc_ba27:
000000000000ba27         mov        dword [rbx+0x70], eax                       ; CODE XREF=re_string_reconstruct+663, re_string_reconstruct+1816

                     loc_ba2a:
000000000000ba2a         cmp        r12, 0x0                                    ; CODE XREF=re_string_reconstruct+1643
000000000000ba2e         jne        loc_be4a

                     loc_ba34:
000000000000ba34         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+1885
000000000000ba3b         mov        qword [rbx+0x38], r12
000000000000ba3f         jmp        loc_bbfc
000000000000ba44         align      8

                     loc_ba48:
000000000000ba48         mov        r14, qword [rbx+0x18]                       ; CODE XREF=re_string_reconstruct+181
000000000000ba4c         mov        rcx, r8
000000000000ba4f         xor        esi, esi
000000000000ba51         jmp        loc_ba63
000000000000ba53         align      8

                     loc_ba58:
000000000000ba58         jge        loc_ba93                                    ; CODE XREF=re_string_reconstruct+766

000000000000ba5a         lea        rsi, qword [rax+1]

                     loc_ba5e:
000000000000ba5e         cmp        rsi, rcx                                    ; CODE XREF=re_string_reconstruct+771
000000000000ba61         jge        loc_ba88

                     loc_ba63:
000000000000ba63         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=re_string_reconstruct+721
000000000000ba67         mov        rax, rdx
000000000000ba6a         shr        rax, 0x3f
000000000000ba6e         add        rax, rdx
000000000000ba71         sar        rax, 0x1
000000000000ba74         mov        rdx, qword [r14+rax*8]
000000000000ba78         mov        r12, rax
000000000000ba7b         cmp        rdx, rbp
000000000000ba7e         jle        loc_ba58

000000000000ba80         mov        rcx, rax
000000000000ba83         jmp        loc_ba5e
000000000000ba85         align      8

                     loc_ba88:
000000000000ba88         lea        r12, qword [rax+1]                          ; CODE XREF=re_string_reconstruct+737
000000000000ba8c         cmp        rdx, rbp
000000000000ba8f         cmovge     r12, rax

                     loc_ba93:
000000000000ba93         lea        r13, qword [r12-1]                          ; CODE XREF=loc_ba58
000000000000ba98         mov        edx, r10d
000000000000ba9b         mov        rdi, rbx
000000000000ba9e         mov        qword [rsp+0x78+var_78], r8
000000000000baa2         mov        rsi, r13
000000000000baa5         call       re_string_context_at                        ; re_string_context_at
000000000000baaa         cmp        rbp, r12
000000000000baad         mov        dword [rbx+0x70], eax
000000000000bab0         mov        r8, qword [rsp+0x78+var_78]
000000000000bab4         jne        loc_bb38

000000000000baba         cmp        rbp, r8
000000000000babd         jge        loc_bb38

000000000000babf         cmp        qword [r14+r12*8], rbp
000000000000bac3         jne        loc_bb38

000000000000bac5         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memmove
000000000000bac9         sub        r8, rbp
000000000000bacc         lea        rdx, qword [r8*4]                           ; argument "__n" for method j_memmove
000000000000bad4         lea        rsi, qword [rdi+rbp*4]                      ; argument "__src" for method j_memmove
000000000000bad8         call       j_memmove                                   ; memmove
000000000000badd         mov        rdi, qword [rbx+8]                          ; argument "__dest" for method j_memmove
000000000000bae1         mov        rdx, qword [rbx+0x30]
000000000000bae5         lea        rsi, qword [rdi+rbp]                        ; argument "__src" for method j_memmove
000000000000bae9         sub        rdx, rbp                                    ; argument "__n" for method j_memmove
000000000000baec         call       j_memmove                                   ; memmove
000000000000baf1         mov        rax, qword [rbx+0x30]
000000000000baf5         sub        qword [rbx+0x38], rbp
000000000000baf9         sub        rax, rbp
000000000000bafc         test       rax, rax
000000000000baff         mov        qword [rbx+0x30], rax
000000000000bb03         jle        loc_bb28

000000000000bb05         mov        rcx, qword [rbx+0x18]
000000000000bb09         xor        eax, eax
000000000000bb0b         lea        rsi, qword [rcx+rbp*8]
000000000000bb0f         nop

                     loc_bb10:
000000000000bb10         mov        rdx, qword [rsi+rax*8]                      ; CODE XREF=re_string_reconstruct+931
000000000000bb14         sub        rdx, rbp
000000000000bb17         mov        qword [rcx+rax*8], rdx
000000000000bb1b         add        rax, 0x1
000000000000bb1f         cmp        qword [rbx+0x30], rax
000000000000bb23         jg         loc_bb10

000000000000bb25         nop        dword [rax]

                     loc_bb28:
000000000000bb28         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+899, re_string_reconstruct+1587
000000000000bb2f         jmp        loc_bbfc
000000000000bb34         align      8

                     loc_bb38:
000000000000bb38         mov        rax, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+820, re_string_reconstruct+829, re_string_reconstruct+835
000000000000bb3c         mov        byte [rbx+0x8c], 0x0
000000000000bb43         add        rax, rbp
000000000000bb46         sub        rax, r15
000000000000bb49         mov        qword [rbx+0x58], rax
000000000000bb4d         mov        rax, qword [rbx+0x60]
000000000000bb51         add        rax, rbp
000000000000bb54         sub        rax, r15
000000000000bb57         test       r12, r12
000000000000bb5a         mov        qword [rbx+0x68], rax
000000000000bb5e         jle        loc_bb83

000000000000bb60         cmp        qword [r14+r12*8-8], rbp
000000000000bb65         je         loc_bb7b

000000000000bb67         jmp        loc_bb83
000000000000bb69         align      16

                     loc_bb70:
000000000000bb70         cmp        qword [r14+r13*8-8], rbp                    ; CODE XREF=re_string_reconstruct+1025
000000000000bb75         jne        loc_bb83

000000000000bb77         sub        r13, 0x1

                     loc_bb7b:
000000000000bb7b         test       r13, r13                                    ; CODE XREF=re_string_reconstruct+997
000000000000bb7e         mov        r12, r13
000000000000bb81         jne        loc_bb70

                     loc_bb83:
000000000000bb83         cmp        r12, r8                                     ; CODE XREF=re_string_reconstruct+990, re_string_reconstruct+999, re_string_reconstruct+1013
000000000000bb86         jge        loc_bdb8

000000000000bb8c         mov        rax, qword [rbx+0x10]
000000000000bb90         jmp        loc_bba5
000000000000bb92         align      8

                     loc_bb98:
000000000000bb98         add        r12, 0x1                                    ; CODE XREF=re_string_reconstruct+1066
000000000000bb9c         cmp        r12, r8
000000000000bb9f         je         loc_bdc0

                     loc_bba5:
000000000000bba5         cmp        dword [rax+r12*4], 0xffffffff               ; CODE XREF=re_string_reconstruct+1040
000000000000bbaa         je         loc_bb98

                     loc_bbac:
000000000000bbac         mov        rdx, qword [r14+r12*8]                      ; CODE XREF=loc_bdb8
000000000000bbb0         sub        rdx, rbp
000000000000bbb3         cmp        rdx, 0x0
000000000000bbb7         mov        qword [rbx+0x30], rdx
000000000000bbbb         je         loc_bbf1

000000000000bbbd         jle        loc_bbdf

000000000000bbbf         mov        rax, qword [rbx+0x10]
000000000000bbc3         lea        rcx, qword [rax+rdx*4]
000000000000bbc7         nop        word [rax+rax]

                     loc_bbd0:
000000000000bbd0         mov        dword [rax], 0xffffffff                     ; CODE XREF=re_string_reconstruct+1117
000000000000bbd6         add        rax, 0x4
000000000000bbda         cmp        rcx, rax
000000000000bbdd         jne        loc_bbd0

                     loc_bbdf:
000000000000bbdf         mov        rdi, qword [rbx+8]                          ; argument "__s" for method j_memset, CODE XREF=re_string_reconstruct+1085
000000000000bbe3         mov        esi, 0xff                                   ; argument "__c" for method j_memset
000000000000bbe8         call       j_memset                                    ; memset
000000000000bbed         mov        rdx, qword [rbx+0x30]

                     loc_bbf1:
000000000000bbf1         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+1083, re_string_reconstruct+1610
000000000000bbf8         mov        qword [rbx+0x38], rdx

                     loc_bbfc:
000000000000bbfc         test       al, al                                      ; CODE XREF=re_string_reconstruct+703, re_string_reconstruct+943, re_string_reconstruct+1199
000000000000bbfe         je         loc_b87a

000000000000bc04         jmp        loc_b87e
000000000000bc09         align      16

                     loc_bc10:
000000000000bc10         mov        rdi, qword [rbx+8]                          ; argument "__dest" for method j_memmove, CODE XREF=re_string_reconstruct+236
000000000000bc14         mov        rdx, r8                                     ; argument "__n" for method j_memmove
000000000000bc17         lea        rsi, qword [rdi+rbp]                        ; argument "__src" for method j_memmove
000000000000bc1b         call       j_memmove                                   ; memmove
000000000000bc20         movzx      eax, byte [rbx+0x8b]
000000000000bc27         sub        qword [rbx+0x30], rbp
000000000000bc2b         sub        qword [rbx+0x38], rbp
000000000000bc2f         jmp        loc_bbfc
000000000000bc31         align      8

                     loc_bc38:
000000000000bc38         mov        rcx, qword [rbx]                            ; CODE XREF=re_string_reconstruct+507
000000000000bc3b         mov        rdi, rbp
000000000000bc3e         sub        rdi, rdx
000000000000bc41         mov        rdx, rdi
000000000000bc44         lea        r12, qword [rcx+r11]
000000000000bc48         add        rdx, r12
000000000000bc4b         lea        rsi, qword [r12+rbp-1]
000000000000bc50         cmp        rcx, rdx
000000000000bc53         cmovb      rcx, rdx
000000000000bc57         cmp        rcx, rsi
000000000000bc5a         jbe        loc_bc75

000000000000bc5c         jmp        loc_b981
000000000000bc61         align      8

                     loc_bc68:
000000000000bc68         sub        rsi, 0x1                                    ; CODE XREF=re_string_reconstruct+1278
000000000000bc6c         cmp        rcx, rsi
000000000000bc6f         ja         loc_b981

                     loc_bc75:
000000000000bc75         movzx      edx, byte [rsi]                             ; CODE XREF=re_string_reconstruct+1242
000000000000bc78         and        edx, 0xffffffc0
000000000000bc7b         cmp        dl, 0x80
000000000000bc7e         je         loc_bc68

000000000000bc80         mov        rdx, qword [rbx+0x58]
000000000000bc84         mov        rcx, qword [rbx+0x78]
000000000000bc88         mov        r14, rsi
000000000000bc8b         add        rdx, r12
000000000000bc8e         sub        rdx, rsi
000000000000bc91         test       rcx, rcx
000000000000bc94         jne        loc_bee2

                     loc_bc9a:
000000000000bc9a         lea        r13, qword [rsp+0x78+var_54]                ; CODE XREF=re_string_reconstruct+1941
000000000000bc9f         add        r12, rbp
000000000000bca2         lea        rcx, qword [rsp+0x78+var_50]
000000000000bca7         sub        r12, r14
000000000000bcaa         mov        dword [rsp+0x78+var_6C], r10d
000000000000bcaf         mov        qword [rsp+0x78+var_78], r8
000000000000bcb3         mov        rdi, r13
000000000000bcb6         mov        qword [rsp+0x78+var_50], 0x0
000000000000bcbf         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000bcc4         cmp        r12, rax
000000000000bcc7         mov        r8, qword [rsp+0x78+var_78]
000000000000bccb         mov        r10d, dword [rsp+0x78+var_6C]
000000000000bcd0         ja         loc_bcdc

000000000000bcd2         cmp        rax, 0xfffffffffffffffd
000000000000bcd6         jbe        loc_bea1

                     loc_bcdc:
000000000000bcdc         mov        r11, qword [rbx+0x28]                       ; CODE XREF=re_string_reconstruct+1360, re_string_reconstruct+1856
000000000000bce0         mov        rax, qword [rbx+0x38]
000000000000bce4         jmp        loc_b981
000000000000bce9         align      16

                     loc_bcf0:
000000000000bcf0         cmp        byte [rbx+0x88], 0x0                        ; CODE XREF=re_string_reconstruct+447
000000000000bcf7         jne        loc_bdf0

000000000000bcfd         mov        rcx, qword [rbx+0x78]
000000000000bd01         test       rcx, rcx
000000000000bd04         je         loc_b8b3

000000000000bd0a         cmp        qword [rbx+0x40], rax
000000000000bd0e         mov        rdx, qword [rbx+0x30]
000000000000bd12         cmovle     rax, qword [rbx+0x40]
000000000000bd17         cmp        rax, rdx
000000000000bd1a         jg         loc_bd28

000000000000bd1c         jmp        loc_bd48
000000000000bd1e         align      32

                     loc_bd20:
000000000000bd20         mov        r15, qword [rbx+0x28]                       ; CODE XREF=re_string_reconstruct+1478
000000000000bd24         mov        rcx, qword [rbx+0x78]

                     loc_bd28:
000000000000bd28         mov        rsi, qword [rbx]                            ; CODE XREF=re_string_reconstruct+1434
000000000000bd2b         add        rsi, rdx
000000000000bd2e         movzx      esi, byte [rsi+r15]
000000000000bd33         movzx      esi, byte [rcx+rsi]
000000000000bd37         mov        rcx, qword [rbx+8]
000000000000bd3b         mov        byte [rcx+rdx], sil
000000000000bd3f         add        rdx, 0x1
000000000000bd43         cmp        rax, rdx
000000000000bd46         jne        loc_bd20

                     loc_bd48:
000000000000bd48         mov        qword [rbx+0x30], rdx                       ; CODE XREF=re_string_reconstruct+1436
000000000000bd4c         mov        qword [rbx+0x38], rdx
000000000000bd50         jmp        loc_b8b3
000000000000bd55         align      8

                     loc_bd58:
000000000000bd58         mov        rax, qword [rbx]                            ; CODE XREF=re_string_reconstruct+494
000000000000bd5b         mov        rdx, qword [rbx+0x78]
000000000000bd5f         add        rax, rbp
000000000000bd62         test       rdx, rdx
000000000000bd65         movzx      eax, byte [r11+rax-1]
000000000000bd6b         mov        qword [rbx+0x38], 0x0
000000000000bd73         je         loc_bd79

000000000000bd75         movzx      eax, byte [rdx+rax]

                     loc_bd79:
000000000000bd79         mov        rcx, qword [rbx+0x80]                       ; CODE XREF=re_string_reconstruct+1523
000000000000bd80         movzx      edx, al
000000000000bd83         sar        rdx, 0x6
000000000000bd87         mov        rcx, qword [rcx+rdx*8]
000000000000bd8b         mov        edx, 0x1
000000000000bd90         bt         rcx, rax
000000000000bd94         jb         loc_bdb0

000000000000bd96         xor        edx, edx
000000000000bd98         cmp        al, 0xa
000000000000bd9a         jne        loc_bdb0

000000000000bd9c         xor        edx, edx
000000000000bd9e         cmp        byte [rbx+0x8d], 0x0
000000000000bda5         setne      dl
000000000000bda8         add        edx, edx
000000000000bdaa         nop        word [rax+rax]

                     loc_bdb0:
000000000000bdb0         mov        dword [rbx+0x70], edx                       ; CODE XREF=re_string_reconstruct+1556, re_string_reconstruct+1562
000000000000bdb3         jmp        loc_bb28

                     loc_bdb8:
000000000000bdb8         jne        loc_bbac                                    ; CODE XREF=re_string_reconstruct+1030

000000000000bdbe         nop

                     loc_bdc0:
000000000000bdc0         mov        qword [rbx+0x30], 0x0                       ; CODE XREF=re_string_reconstruct+1055
000000000000bdc8         xor        edx, edx
000000000000bdca         jmp        loc_bbf1

                     loc_bdcf:
000000000000bdcf         sub        r14, r15                                    ; CODE XREF=re_string_reconstruct+520
000000000000bdd2         mov        r12, r14
000000000000bdd5         mov        qword [rbx+0x30], r14

                     loc_bdd9:
000000000000bdd9         lea        rsi, qword [r8-1]                           ; CODE XREF=re_string_reconstruct+639
000000000000bddd         mov        edx, r10d
000000000000bde0         mov        rdi, rbx
000000000000bde3         call       re_string_context_at                        ; re_string_context_at
000000000000bde8         mov        dword [rbx+0x70], eax
000000000000bdeb         jmp        loc_ba2a

                     loc_bdf0:
000000000000bdf0         mov        rdi, rbx                                    ; CODE XREF=re_string_reconstruct+1399
000000000000bdf3         call       build_upper_buffer                          ; build_upper_buffer
000000000000bdf8         jmp        loc_b8b3

                     loc_bdfd:
000000000000bdfd         mov        rdx, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+466
000000000000be01         mov        byte [rbx+0x8c], 0x0
000000000000be08         add        rdx, rbp
000000000000be0b         sub        rdx, r15
000000000000be0e         mov        qword [rbx+0x58], rdx
000000000000be12         mov        rdx, qword [rbx+0x60]
000000000000be16         add        rdx, rbp
000000000000be19         sub        rdx, r15
000000000000be1c         mov        qword [rbx+0x68], rdx
000000000000be20         jmp        loc_b958

                     loc_be25:
000000000000be25         test       rax, rax                                    ; CODE XREF=re_string_reconstruct+612
000000000000be28         je         loc_be9d

000000000000be2a         test       r12, r12
000000000000be2d         je         loc_be9d

000000000000be2f         mov        rax, qword [rbx]
000000000000be32         movzx      edx, byte [rax+r14]

                     loc_be37:
000000000000be37         mov        rax, qword [rsp+0x78+var_60]                ; CODE XREF=re_string_reconstruct+1823
000000000000be3c         mov        qword [rbx+0x20], rax
000000000000be40         mov        eax, 0x1
000000000000be45         jmp        loc_b9ea

                     loc_be4a:
000000000000be4a         jle        loc_be67                                    ; CODE XREF=re_string_reconstruct+686

000000000000be4c         mov        rax, qword [rbx+0x10]
000000000000be50         lea        rdx, qword [rax+r12*4]
000000000000be54         nop        dword [rax]

                     loc_be58:
000000000000be58         mov        dword [rax], 0xffffffff                     ; CODE XREF=re_string_reconstruct+1765
000000000000be5e         add        rax, 0x4
000000000000be62         cmp        rdx, rax
000000000000be65         jne        loc_be58

                     loc_be67:
000000000000be67         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=loc_be4a
000000000000be6e         jne        loc_bec8

000000000000be70         mov        qword [rbx+0x38], r12
000000000000be74         jmp        loc_b87a

                     loc_be79:
000000000000be79         mov        edi, edx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=re_string_reconstruct+652
000000000000be7b         mov        dword [rsp+0x78+var_78], edx
000000000000be7e         call       j_iswalnum                                  ; iswalnum
000000000000be83         test       eax, eax
000000000000be85         jne        loc_be93

000000000000be87         mov        edx, dword [rsp+0x78+var_78]
000000000000be8a         cmp        edx, 0x5f
000000000000be8d         jne        loc_ba12

                     loc_be93:
000000000000be93         mov        eax, 0x1                                    ; CODE XREF=re_string_reconstruct+1797
000000000000be98         jmp        loc_ba27

                     loc_be9d:
000000000000be9d         xor        edx, edx                                    ; CODE XREF=re_string_reconstruct+1704, re_string_reconstruct+1709
000000000000be9f         jmp        loc_be37

                     loc_bea1:
000000000000bea1         mov        edx, dword [rsp+0x78+var_54]                ; CODE XREF=re_string_reconstruct+1366
000000000000bea5         sub        rax, r12
000000000000bea8         mov        qword [rbx+0x20], 0x0
000000000000beb0         mov        r12, rax
000000000000beb3         mov        qword [rbx+0x30], rax
000000000000beb7         cmp        edx, 0xffffffff
000000000000beba         jne        loc_ba05

000000000000bec0         jmp        loc_bcdc
000000000000bec5         align      8

                     loc_bec8:
000000000000bec8         mov        rdi, qword [rbx+8]                          ; argument "__s" for method j_memset, CODE XREF=re_string_reconstruct+1774
000000000000becc         mov        rdx, r12                                    ; argument "__n" for method j_memset
000000000000becf         mov        esi, 0xff                                   ; argument "__c" for method j_memset
000000000000bed4         call       j_memset                                    ; memset
000000000000bed9         mov        r12, qword [rbx+0x30]
000000000000bedd         jmp        loc_ba34

                     loc_bee2:
000000000000bee2         cmp        rdx, 0x6                                    ; CODE XREF=re_string_reconstruct+1300
000000000000bee6         mov        edi, 0x6
000000000000beeb         lea        r11, qword [rsp+0x78+var_46]
000000000000bef0         cmovle     rdi, rdx
000000000000bef4         sub        edi, 0x1
000000000000bef7         test       edi, edi
000000000000bef9         movsxd     rax, edi
000000000000befc         js         loc_bf12

                     loc_befe:
000000000000befe         movzx      edi, byte [rsi+rax]                         ; CODE XREF=re_string_reconstruct+1936
000000000000bf02         movzx      edi, byte [rcx+rdi]
000000000000bf06         mov        byte [r11+rax], dil
000000000000bf0a         sub        rax, 0x1
000000000000bf0e         test       eax, eax
000000000000bf10         jns        loc_befe

                     loc_bf12:
000000000000bf12         mov        rsi, r11                                    ; CODE XREF=re_string_reconstruct+1916
000000000000bf15         jmp        loc_bc9a

                     loc_bf1a:
000000000000bf1a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_string_reconstruct+331
                        ; endp
000000000000bf1f         align      32                                          ; End of unwind block (FDE at 0x19e9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     sub_epsilon_src_nodes:
000000000000bf20         push       r15                                         ; Begin of unwind block (FDE at 0x19eec), CODE XREF=update_cur_sifted_state+1100, update_cur_sifted_state+1290, update_cur_sifted_state+1448
000000000000bf22         push       r14
000000000000bf24         mov        r14, rdx
000000000000bf27         push       r13
000000000000bf29         push       r12
000000000000bf2b         lea        rdx, qword [rsi+rsi*2]
000000000000bf2f         push       rbp
000000000000bf30         push       rbx
000000000000bf31         pxor       xmm0, xmm0
000000000000bf35         sub        rsp, 0x48
000000000000bf39         mov        rax, qword [fs:0x28]
000000000000bf42         mov        qword [rsp+0x78+var_40], rax
000000000000bf47         xor        eax, eax
000000000000bf49         mov        rax, qword [rdi+0x38]
000000000000bf4d         mov        qword [rsp+0x78+var_48], 0x0
000000000000bf56         movaps     xmmword [rsp+0x78+var_58], xmm0
000000000000bf5b         mov        qword [rsp+0x78+var_68], rcx
000000000000bf60         lea        rbp, qword [rax+rdx*8]
000000000000bf64         mov        r10, qword [rbp+8]
000000000000bf68         test       r10, r10
000000000000bf6b         jle        loc_c152

000000000000bf71         lea        rax, qword [rsp+0x78+var_58]
000000000000bf76         mov        r12, rdi
000000000000bf79         mov        r13, rsi
000000000000bf7c         xor        ebx, ebx
000000000000bf7e         mov        qword [rsp+0x78+var_60], rax
000000000000bf83         jmp        loc_bfdd
000000000000bf85         align      8

                     loc_bf88:
000000000000bf88         test       rax, rax                                    ; CODE XREF=sub_epsilon_src_nodes+283
000000000000bf8b         jne        loc_c068

000000000000bf91         mov        rdi, qword [r14+8]
000000000000bf95         lea        rsi, qword [r14+0x10]
000000000000bf99         mov        rdx, r8
000000000000bf9c         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000bfa1         test       rax, rax
000000000000bfa4         je         loc_c068

                     loc_bfaa:
000000000000bfaa         mov        rdx, qword [r12+0x38]                       ; CODE XREF=sub_epsilon_src_nodes+313, sub_epsilon_src_nodes+386
000000000000bfaf         mov        rsi, qword [rsp+0x78+var_68]
000000000000bfb4         mov        rdi, qword [rsp+0x78+var_60]
000000000000bfb9         add        rdx, r9
000000000000bfbc         call       re_node_set_add_intersect                   ; re_node_set_add_intersect
000000000000bfc1         test       eax, eax
000000000000bfc3         jne        loc_c140

000000000000bfc9         mov        r10, qword [rbp+8]
000000000000bfcd         nop        dword [rax]

                     loc_bfd0:
000000000000bfd0         add        rbx, 0x1                                    ; CODE XREF=sub_epsilon_src_nodes+200, sub_epsilon_src_nodes+217, sub_epsilon_src_nodes+292, sub_epsilon_src_nodes+319, sub_epsilon_src_nodes+335, sub_epsilon_src_nodes+358, sub_epsilon_src_nodes+380
000000000000bfd4         cmp        r10, rbx
000000000000bfd7         jle        loc_c0b0

                     loc_bfdd:
000000000000bfdd         mov        rax, qword [rbp+0x10]                       ; CODE XREF=sub_epsilon_src_nodes+99
000000000000bfe1         mov        rax, qword [rax+rbx*8]
000000000000bfe5         cmp        r13, rax
000000000000bfe8         je         loc_bfd0

000000000000bfea         mov        rdx, rax
000000000000bfed         shl        rdx, 0x4
000000000000bff1         add        rdx, qword [r12]
000000000000bff5         test       byte [rdx+8], 0x8
000000000000bff9         je         loc_bfd0

000000000000bffb         lea        r9, qword [rax+rax*2]
000000000000bfff         mov        rcx, qword [r12+0x28]
000000000000c004         lea        r11, qword [rbp+0x10]
000000000000c008         mov        rdi, r10
000000000000c00b         shl        r9, 0x3
000000000000c00f         mov        rsi, r11
000000000000c012         add        rcx, r9
000000000000c015         mov        r15, qword [rcx+0x10]
000000000000c019         mov        qword [rsp+0x78+var_70], rcx
000000000000c01e         mov        r8, qword [r15]
000000000000c021         mov        rdx, r8
000000000000c024         mov        qword [rsp+0x78+var_78], r8
000000000000c028         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000c02d         mov        rcx, qword [rsp+0x78+var_70]
000000000000c032         mov        r8, qword [rsp+0x78+var_78]
000000000000c036         cmp        qword [rcx+8], 0x1
000000000000c03b         jg         loc_bf88

000000000000c041         test       rax, rax
000000000000c044         jne        loc_bfd0

000000000000c046         mov        rdi, qword [r14+8]
000000000000c04a         lea        rsi, qword [r14+0x10]
000000000000c04e         mov        rdx, r8
000000000000c051         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000c056         test       rax, rax
000000000000c059         jne        loc_bfaa

000000000000c05f         jmp        loc_bfd0
000000000000c064         align      8

                     loc_c068:
000000000000c068         mov        r15, qword [r15+8]                          ; CODE XREF=sub_epsilon_src_nodes+107, sub_epsilon_src_nodes+132
000000000000c06c         test       r15, r15
000000000000c06f         jle        loc_bfd0

000000000000c075         mov        rdx, r15
000000000000c078         mov        rsi, r11
000000000000c07b         mov        rdi, r10
000000000000c07e         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000c083         test       rax, rax
000000000000c086         jne        loc_bfd0

000000000000c08c         mov        rdi, qword [r14+8]
000000000000c090         lea        rsi, qword [r14+0x10]
000000000000c094         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000c099         test       rax, rax
000000000000c09c         je         loc_bfd0

000000000000c0a2         jmp        loc_bfaa
000000000000c0a7         align      16

                     loc_c0b0:
000000000000c0b0         xor        r9d, r9d                                    ; CODE XREF=sub_epsilon_src_nodes+183
000000000000c0b3         test       r10, r10
000000000000c0b6         lea        r11, qword [rsp+0x78+var_48]
000000000000c0bb         jle        loc_c10c

000000000000c0bd         nop        dword [rax]

                     loc_c0c0:
000000000000c0c0         mov        rax, qword [rbp+0x10]                       ; CODE XREF=sub_epsilon_src_nodes+490
000000000000c0c4         mov        rdi, qword [rsp+0x78+var_50]
000000000000c0c9         mov        rsi, r11
000000000000c0cc         mov        r10, qword [rax+r9*8]
000000000000c0d0         mov        rdx, r10
000000000000c0d3         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000c0d8         test       rax, rax
000000000000c0db         jne        loc_c102

000000000000c0dd         lea        rbx, qword [r14+0x10]
000000000000c0e1         mov        rdi, qword [r14+8]
000000000000c0e5         mov        rsi, rbx
000000000000c0e8         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000c0ed         sub        rax, 0x1
000000000000c0f1         mov        rdx, rax
000000000000c0f4         js         loc_c102

000000000000c0f6         lea        rdi, qword [r14+8]
000000000000c0fa         mov        rsi, rbx
000000000000c0fd         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_c102:
000000000000c102         add        r9, 0x1                                     ; CODE XREF=sub_epsilon_src_nodes+443, sub_epsilon_src_nodes+468
000000000000c106         cmp        qword [rbp+8], r9
000000000000c10a         jg         loc_c0c0

                     loc_c10c:
000000000000c10c         mov        rdi, qword [rsp+0x78+var_48]                ; CODE XREF=sub_epsilon_src_nodes+411

                     loc_c111:
000000000000c111         call       j_free                                      ; free, CODE XREF=sub_epsilon_src_nodes+564
000000000000c116         xor        eax, eax

                     loc_c118:
000000000000c118         mov        rsi, qword [rsp+0x78+var_40]                ; CODE XREF=sub_epsilon_src_nodes+560
000000000000c11d         xor        rsi, qword [fs:0x28]
000000000000c126         jne        loc_c156

000000000000c128         add        rsp, 0x48
000000000000c12c         pop        rbx
000000000000c12d         pop        rbp
000000000000c12e         pop        r12
000000000000c130         pop        r13
000000000000c132         pop        r14
000000000000c134         pop        r15
000000000000c136         ret
                        ; endp
000000000000c137         align      64

                     loc_c140:
000000000000c140         mov        rdi, qword [rsp+0x78+var_48]                ; argument "__ptr" for method j_free, CODE XREF=sub_epsilon_src_nodes+163
000000000000c145         mov        dword [rsp+0x78+var_78], eax
000000000000c148         call       j_free                                      ; free
000000000000c14d         mov        eax, dword [rsp+0x78+var_78]
000000000000c150         jmp        loc_c118

                     loc_c152:
000000000000c152         xor        edi, edi                                    ; CODE XREF=sub_epsilon_src_nodes+75
000000000000c154         jmp        loc_c111

                     loc_c156:
000000000000c156         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_epsilon_src_nodes+518
                        ; endp
000000000000c15b         align      32                                          ; End of unwind block (FDE at 0x19eec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_58: -88
        ;    var_67: int8_t, -103
        ;    var_68: int8_t, -104
        ;    var_78: -120
        ;    var_88: int8_t, -136
        ;    var_98: -152
        ;    var_A8: int64_t, -168
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_CC: int32_t, -204
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_E9: int8_t, -233
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_128: int64_t, -296
        ;    var_130: int64_t, -304


                     build_trtable:
000000000000c160         push       r15                                         ; Begin of unwind block (FDE at 0x19f3c), CODE XREF=re_search_internal+4240
000000000000c162         push       r14
000000000000c164         mov        r15, rdi
000000000000c167         push       r13
000000000000c169         push       r12
000000000000c16b         mov        edi, 0x3800                                 ; argument "__size" for method j_malloc
000000000000c170         push       rbp
000000000000c171         push       rbx
000000000000c172         sub        rsp, 0x108
000000000000c179         mov        rax, qword [fs:0x28]
000000000000c182         mov        qword [rsp+0x138+var_40], rax
000000000000c18a         xor        eax, eax
000000000000c18c         mov        qword [rsp+0x138+var_130], rsi
000000000000c191         call       j_malloc                                    ; malloc
000000000000c196         test       rax, rax
000000000000c199         mov        qword [rsp+0x138+var_120], rax
000000000000c19e         je         loc_c570

000000000000c1a4         mov        rax, qword [rsp+0x138+var_120]
000000000000c1a9         pxor       xmm0, xmm0
000000000000c1ad         lea        rbx, qword [rax+0x1800]
000000000000c1b4         mov        rax, qword [rsp+0x138+var_130]
000000000000c1b9         movaps     xmmword [rsp+0x138+var_A8], xmm0
000000000000c1c1         mov        qword [rsp+0x138+var_F8], rbx
000000000000c1c6         movaps     xmmword [rsp+0x138+var_98], xmm0
000000000000c1ce         cmp        qword [rax+0x10], 0x0
000000000000c1d3         mov        qword [rax+0x58], 0x0
000000000000c1db         mov        qword [rax+0x60], 0x0
000000000000c1e3         jle        loc_cc5a

000000000000c1e9         mov        qword [rsp+0x138+var_108], r15
000000000000c1ee         xor        ebp, ebp
000000000000c1f0         mov        qword [rsp+0x138+var_128], 0x0
000000000000c1f9         mov        r15, rbx

                     loc_c1fc:
000000000000c1fc         mov        rbx, qword [rsp+0x138+var_128]              ; CODE XREF=build_trtable+275
000000000000c201         lea        rax, qword [rbx*8]
000000000000c209         mov        qword [rsp+0x138+var_118], rax
000000000000c20e         mov        rax, qword [rsp+0x138+var_130]
000000000000c213         mov        rax, qword [rax+0x18]
000000000000c217         mov        r13, qword [rax+rbx*8]
000000000000c21b         mov        rax, qword [rsp+0x138+var_108]
000000000000c220         shl        r13, 0x4
000000000000c224         add        r13, qword [rax]
000000000000c227         movzx      r14d, byte [r13+8]
000000000000c22c         mov        eax, dword [r13+8]
000000000000c230         shr        eax, 0x8
000000000000c233         and        ax, 0x3ff
000000000000c237         cmp        r14d, 0x1
000000000000c23b         je         loc_c5a0

000000000000c241         cmp        r14d, 0x3
000000000000c245         je         loc_ca10

000000000000c24b         cmp        r14d, 0x5
000000000000c24f         je         loc_c8d0

000000000000c255         cmp        r14d, 0x7
000000000000c259         je         loc_ca39

                     loc_c25f:
000000000000c25f         mov        rbx, qword [rsp+0x138+var_130]              ; CODE XREF=build_trtable+1231, build_trtable+1316, build_trtable+1694, build_trtable+1827, build_trtable+2042, build_trtable+2144, build_trtable+2337
000000000000c264         add        qword [rsp+0x138+var_128], 0x1
000000000000c26a         mov        rax, qword [rsp+0x138+var_128]
000000000000c26f         cmp        rax, qword [rbx+0x10]
000000000000c273         jl         loc_c1fc

000000000000c275         test       rbp, rbp
000000000000c278         mov        r15, qword [rsp+0x138+var_108]
000000000000c27d         jle        loc_ccd9

000000000000c283         lea        rbx, qword [rbp+1]
000000000000c287         mov        qword [rsp+0x138+var_C0], 0x0
000000000000c290         mov        qword [rsp+0x138+var_C8], rbx
000000000000c295         shl        rbx, 0x3
000000000000c299         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
000000000000c29c         call       j_malloc                                    ; malloc
000000000000c2a1         test       rax, rax
000000000000c2a4         mov        r12, rax
000000000000c2a7         mov        qword [rsp+0x138+var_B8], rax
000000000000c2af         je         loc_caaf

000000000000c2b5         movabs     rax, 0xaaaaaaaaaaaa855
000000000000c2bf         mov        dword [rsp+0x138+var_CC], 0x0
000000000000c2c7         cmp        rbp, rax
000000000000c2ca         jg         loc_caaf

000000000000c2d0         lea        rax, qword [rbp+rbp*2]
000000000000c2d5         shl        rax, 0x3
000000000000c2d9         mov        rdi, rax                                    ; argument "__size" for method j_malloc
000000000000c2dc         mov        qword [rsp+0x138+var_E0], rax
000000000000c2e1         call       j_malloc                                    ; malloc
000000000000c2e6         test       rax, rax
000000000000c2e9         mov        qword [rsp+0x138+var_128], rax
000000000000c2ee         je         loc_caaf

000000000000c2f4         mov        rax, qword [rsp+0x138+var_128]
000000000000c2f9         sub        rbx, 0x8
000000000000c2fd         mov        r12, qword [rsp+0x138+var_F8]
000000000000c302         pxor       xmm0, xmm0
000000000000c306         lea        r14, qword [rsp+0x138+var_C8]
000000000000c30b         mov        qword [rsp+0x138+var_118], rbp
000000000000c310         mov        byte [rsp+0x138+var_E9], 0x0
000000000000c315         mov        rbp, r15
000000000000c318         add        rax, rbx
000000000000c31b         mov        qword [rsp+0x138+var_E8], r12
000000000000c320         add        rbx, rax
000000000000c323         mov        qword [rsp+0x138+var_108], rax
000000000000c328         mov        rax, qword [rsp+0x138+var_120]
000000000000c32d         movaps     xmmword [rsp+0x138+var_68], xmm0
000000000000c335         mov        qword [rsp+0x138+var_100], rbx
000000000000c33a         xor        ebx, ebx
000000000000c33c         lea        r13, qword [rax+8]
000000000000c340         lea        rax, qword [rsp+0x138+var_CC]
000000000000c345         movaps     xmmword [rsp+0x138+var_58], xmm0
000000000000c34d         mov        qword [rsp+0x138+var_110], rax

                     loc_c352:
000000000000c352         mov        qword [rsp+0x138+var_C0], 0x0               ; CODE XREF=build_trtable+706
000000000000c35b         cmp        qword [r13], 0x0
000000000000c360         jle        loc_c3a8

000000000000c362         xor        r15d, r15d
000000000000c365         nop        dword [rax]

                     loc_c368:
000000000000c368         mov        rax, qword [r13+8]                          ; CODE XREF=build_trtable+582
000000000000c36c         mov        rdx, qword [rax+r15*8]
000000000000c370         mov        rax, qword [rbp+0x18]
000000000000c374         mov        rax, qword [rax+rdx*8]
000000000000c378         cmp        rax, 0xffffffffffffffff
000000000000c37c         je         loc_c39e

000000000000c37e         lea        rdx, qword [rax+rax*2]
000000000000c382         mov        rax, qword [rbp+0x30]
000000000000c386         mov        rdi, r14
000000000000c389         lea        rsi, qword [rax+rdx*8]
000000000000c38d         call       re_node_set_merge                           ; re_node_set_merge
000000000000c392         test       eax, eax
000000000000c394         mov        dword [rsp+0x138+var_CC], eax
000000000000c398         jne        loc_ca98

                     loc_c39e:
000000000000c39e         add        r15, 0x1                                    ; CODE XREF=build_trtable+540
000000000000c3a2         cmp        qword [r13], r15
000000000000c3a6         jg         loc_c368

                     loc_c3a8:
000000000000c3a8         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+512
000000000000c3ad         xor        ecx, ecx
000000000000c3af         mov        rsi, rbp
000000000000c3b2         mov        rdx, r14
000000000000c3b5         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000c3ba         mov        rsi, qword [rsp+0x138+var_128]
000000000000c3bf         test       rax, rax
000000000000c3c2         mov        qword [rsi+rbx*8], rax
000000000000c3c6         je         loc_cb78

                     loc_c3cc:
000000000000c3cc         cmp        byte [rax+0x68], 0x0                        ; CODE XREF=build_trtable+2590
000000000000c3d0         js         loc_caf0

000000000000c3d6         mov        rdi, qword [rsp+0x138+var_108]
000000000000c3db         mov        rsi, qword [rsp+0x138+var_100]
000000000000c3e0         mov        qword [rdi+rbx*8], rax
000000000000c3e4         mov        rax, qword [rsp+0x138+var_128]
000000000000c3e9         mov        rax, qword [rax+rbx*8]
000000000000c3ed         mov        qword [rsi+rbx*8], rax

                     loc_c3f1:
000000000000c3f1         lea        rdx, qword [rsp+0x138+var_68]               ; CODE XREF=build_trtable+2556, build_trtable+2568
000000000000c3f9         xor        eax, eax

                     loc_c3fb:
000000000000c3fb         mov        rcx, qword [rdx+rax]                        ; CODE XREF=build_trtable+687
000000000000c3ff         or         rcx, qword [r12+rax]
000000000000c403         mov        qword [rdx+rax], rcx
000000000000c407         add        rax, 0x8
000000000000c40b         cmp        rax, 0x20
000000000000c40f         jne        loc_c3fb

000000000000c411         add        rbx, 0x1
000000000000c415         add        r13, 0x18
000000000000c419         add        r12, 0x20
000000000000c41d         cmp        rbx, qword [rsp+0x138+var_118]
000000000000c422         jne        loc_c352

000000000000c428         cmp        byte [rsp+0x138+var_E9], 0x0
000000000000c42d         mov        r15, rbp
000000000000c430         mov        rbp, qword [rsp+0x138+var_118]
000000000000c435         mov        qword [rsp+0x138+var_118], rdx
000000000000c43a         jne        loc_cb89

000000000000c440         mov        esi, 0x100                                  ; argument "__size" for method j_calloc
000000000000c445         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
000000000000c44a         call       j_calloc                                    ; calloc
000000000000c44f         mov        r11, rax
000000000000c452         mov        rax, qword [rsp+0x138+var_130]
000000000000c457         test       r11, r11
000000000000c45a         mov        qword [rax+0x58], r11
000000000000c45e         je         loc_ca9d

000000000000c464         mov        rbx, qword [rsp+0x138+var_F8]
000000000000c469         mov        r12, qword [rsp+0x138+var_128]
000000000000c46e         xor        r9d, r9d
000000000000c471         mov        r13, qword [rsp+0x138+var_108]
000000000000c476         mov        rdx, qword [rsp+0x138+var_118]
000000000000c47b         add        rbx, 0x20

                     loc_c47f:
000000000000c47f         mov        rax, qword [rdx+r9]                         ; CODE XREF=build_trtable+860
000000000000c483         test       rax, rax
000000000000c486         je         loc_c4b4

000000000000c488         mov        rsi, r9
000000000000c48b         mov        ecx, 0x1
000000000000c490         shl        rsi, 0x6
000000000000c494         add        rsi, r11
000000000000c497         nop        word [rax+rax]

                     loc_c4a0:
000000000000c4a0         test       al, 0x1                                     ; CODE XREF=build_trtable+850
000000000000c4a2         jne        loc_cc08

                     loc_c4a8:
000000000000c4a8         add        rcx, rcx                                    ; CODE XREF=build_trtable+2793, build_trtable+2805
000000000000c4ab         add        rsi, 0x8
000000000000c4af         shr        rax, 0x1
000000000000c4b2         jne        loc_c4a0

                     loc_c4b4:
000000000000c4b4         add        r9, 0x8                                     ; CODE XREF=build_trtable+806
000000000000c4b8         cmp        r9, 0x20
000000000000c4bc         jne        loc_c47f

                     loc_c4be:
000000000000c4be         test       byte [rsp+0x138+var_67], 0x4                ; CODE XREF=build_trtable+2720
000000000000c4c6         je         loc_c502

000000000000c4c8         xor        eax, eax
000000000000c4ca         mov        rdx, qword [rsp+0x138+var_E8]
000000000000c4cf         jmp        loc_c4de

                     loc_c4d1:
000000000000c4d1         add        rax, 0x1                                    ; CODE XREF=build_trtable+901
000000000000c4d5         add        rdx, 0x20
000000000000c4d9         cmp        rax, rbp
000000000000c4dc         je         loc_c502

                     loc_c4de:
000000000000c4de         test       qword [rdx], 0x400                          ; CODE XREF=build_trtable+879
000000000000c4e5         je         loc_c4d1

000000000000c4e7         mov        rbx, qword [rsp+0x138+var_100]
000000000000c4ec         cmp        byte [rsp+0x138+var_E9], 0x0
000000000000c4f1         mov        rax, qword [rbx+rax*8]
000000000000c4f5         mov        qword [r11+0x50], rax
000000000000c4f9         je         loc_c502

000000000000c4fb         mov        qword [r11+0x850], rax

                     loc_c502:
000000000000c502         mov        rdi, qword [rsp+0x138+var_128]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+870, build_trtable+892, build_trtable+921
000000000000c507         call       j_free                                      ; free
000000000000c50c         mov        rdi, qword [rsp+0x138+var_B8]               ; argument "__ptr" for method j_free
000000000000c514         call       j_free                                      ; free
000000000000c519         mov        rax, qword [rsp+0x138+var_120]
000000000000c51e         mov        rbx, qword [rsp+0x138+var_E0]
000000000000c523         lea        rbp, qword [rax+0x10]
000000000000c527         add        rbx, rbp

                     loc_c52a:
000000000000c52a         mov        rdi, qword [rbp]                            ; argument "__ptr" for method j_free, CODE XREF=build_trtable+986
000000000000c52e         add        rbp, 0x18
000000000000c532         call       j_free                                      ; free
000000000000c537         cmp        rbx, rbp
000000000000c53a         jne        loc_c52a

000000000000c53c         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000c541         call       j_free                                      ; free
000000000000c546         mov        eax, 0x1
000000000000c54b         jmp        loc_c572

                     loc_c54d:
000000000000c54d         test       rbp, rbp                                    ; CODE XREF=build_trtable+1799
000000000000c550         mov        qword [rbx+8], 0x0
000000000000c558         mov        qword [rbx], 0x0
000000000000c55f         jne        loc_c890

000000000000c565         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000c56a         call       j_free                                      ; free
000000000000c56f         nop

                     loc_c570:
000000000000c570         xor        eax, eax                                    ; CODE XREF=build_trtable+62, build_trtable+1891, build_trtable+2443, build_trtable+2950

                     loc_c572:
000000000000c572         mov        rbx, qword [rsp+0x138+var_40]               ; CODE XREF=build_trtable+1003, build_trtable+2850
000000000000c57a         xor        rbx, qword [fs:0x28]
000000000000c583         jne        loc_ccd4

000000000000c589         add        rsp, 0x108
000000000000c590         pop        rbx
000000000000c591         pop        rbp
000000000000c592         pop        r12
000000000000c594         pop        r13
000000000000c596         pop        r14
000000000000c598         pop        r15
000000000000c59a         ret
                        ; endp
000000000000c59b         align      32

                     loc_c5a0:
000000000000c5a0         movzx      ecx, byte [r13]                             ; CODE XREF=build_trtable+219
000000000000c5a5         lea        r12, qword [rsp+0x138+var_A8]
000000000000c5ad         mov        edi, 0x1
000000000000c5b2         mov        rdx, rcx
000000000000c5b5         and        ecx, 0x3f
000000000000c5b8         shr        rdx, 0x3
000000000000c5bc         shl        rdi, cl
000000000000c5bf         and        edx, 0x18
000000000000c5c2         or         qword [r12+rdx], rdi

                     loc_c5c6:
000000000000c5c6         test       ax, ax                                      ; CODE XREF=build_trtable+1993, build_trtable+2008, build_trtable+2260
000000000000c5c9         je         loc_c690

000000000000c5cf         test       al, 0x20
000000000000c5d1         jne        loc_c940

                     loc_c5d7:
000000000000c5d7         test       al, 0x80                                    ; CODE XREF=build_trtable+2060
000000000000c5d9         jne        loc_c874

000000000000c5df         test       al, 0x4
000000000000c5e1         je         loc_c635

000000000000c5e3         cmp        r14d, 0x1
000000000000c5e7         je         loc_c9c5

000000000000c5ed         mov        r8, qword [rsp+0x138+var_108]
000000000000c5f2         cmp        dword [r8+0xb4], 0x1
000000000000c5fa         jle        loc_ca52

                     loc_c600:
000000000000c600         mov        rdi, qword [r8+0x78]                        ; CODE XREF=build_trtable+2173
000000000000c604         xor        esi, esi
000000000000c606         xor        ecx, ecx

                     loc_c608:
000000000000c608         mov        rdx, qword [rdi+rcx*8]                      ; CODE XREF=build_trtable+1226
000000000000c60c         not        rdx
000000000000c60f         or         rdx, qword [r8+rcx*8+0xb8]
000000000000c617         and        rdx, qword [r12+rcx*8]
000000000000c61b         mov        qword [r12+rcx*8], rdx
000000000000c61f         add        rcx, 0x1
000000000000c623         or         rsi, rdx
000000000000c626         cmp        rcx, 0x4
000000000000c62a         jne        loc_c608

000000000000c62c         test       rsi, rsi
000000000000c62f         je         loc_c25f

                     loc_c635:
000000000000c635         test       al, 0x8                                     ; CODE XREF=build_trtable+1153, build_trtable+2331
000000000000c637         je         loc_c690

000000000000c639         cmp        r14d, 0x1
000000000000c63d         je         loc_c971

000000000000c643         mov        rdi, qword [rsp+0x138+var_108]
000000000000c648         cmp        dword [rdi+0xb4], 0x1
000000000000c64f         jle        loc_c98e

                     loc_c655:
000000000000c655         mov        rsi, qword [rdi+0x78]                       ; CODE XREF=build_trtable+2088
000000000000c659         xor        ecx, ecx
000000000000c65b         xor        edx, edx

                     loc_c65d:
000000000000c65d         mov        rax, qword [rdi+rdx*8+0xb8]                 ; CODE XREF=build_trtable+1311
000000000000c665         and        rax, qword [rsi+rdx*8]
000000000000c669         not        rax
000000000000c66c         and        rax, qword [r12+rdx*8]
000000000000c670         mov        qword [r12+rdx*8], rax
000000000000c674         add        rdx, 0x1
000000000000c678         or         rcx, rax
000000000000c67b         cmp        rdx, 0x4
000000000000c67f         jne        loc_c65d

000000000000c681         test       rcx, rcx
000000000000c684         je         loc_c25f

000000000000c68a         nop        word [rax+rax]

                     loc_c690:
000000000000c690         xor        ebx, ebx                                    ; CODE XREF=build_trtable+1129, build_trtable+1239, build_trtable+2138
000000000000c692         test       rbp, rbp
000000000000c695         jle        loc_c7fb

000000000000c69b         mov        qword [rsp+0x138+var_110], r13
000000000000c6a0         mov        r13, r15
000000000000c6a3         nop        dword [rax+rax]

                     loc_c6a8:
000000000000c6a8         mov        r10, rbx                                    ; CODE XREF=build_trtable+1682
000000000000c6ab         shl        r10, 0x5
000000000000c6af         cmp        r14d, 0x1
000000000000c6b3         jne        loc_c6d8

000000000000c6b5         mov        rax, qword [rsp+0x138+var_110]
000000000000c6ba         movzx      edx, byte [rax]
000000000000c6bd         mov        rax, rdx
000000000000c6c0         shr        rax, 0x3
000000000000c6c4         and        eax, 0x18
000000000000c6c7         add        rax, r13
000000000000c6ca         mov        rax, qword [rax+r10]
000000000000c6ce         bt         rax, rdx
000000000000c6d2         jae        loc_c7eb

                     loc_c6d8:
000000000000c6d8         lea        rdi, qword [r13+r10]                        ; CODE XREF=build_trtable+1363
000000000000c6dd         lea        rsi, qword [rsp+0x138+var_88]
000000000000c6e5         xor        ecx, ecx
000000000000c6e7         xor        eax, eax

                     loc_c6e9:
000000000000c6e9         mov        rdx, qword [r12+rax*8]                      ; CODE XREF=build_trtable+1440
000000000000c6ed         and        rdx, qword [rdi+rax*8]
000000000000c6f1         mov        qword [rsi+rax*8], rdx
000000000000c6f5         add        rax, 0x1
000000000000c6f9         or         rcx, rdx
000000000000c6fc         cmp        rax, 0x4
000000000000c700         jne        loc_c6e9

000000000000c702         test       rcx, rcx
000000000000c705         je         loc_c7eb

000000000000c70b         lea        r11, qword [rsp+0x138+var_68]
000000000000c713         xor        r15d, r15d
000000000000c716         xor        r9d, r9d
000000000000c719         xor        ecx, ecx

                     loc_c71b:
000000000000c71b         mov        rsi, qword [r12+rcx*8]                      ; CODE XREF=build_trtable+1512
000000000000c71f         mov        rax, qword [rdi+rcx*8]
000000000000c723         mov        rdx, rsi
000000000000c726         not        rdx
000000000000c729         and        rdx, rax
000000000000c72c         not        rax
000000000000c72f         and        rax, rsi
000000000000c732         mov        qword [r11+rcx*8], rdx
000000000000c736         or         r9, rdx
000000000000c739         mov        qword [r12+rcx*8], rax
000000000000c73d         add        rcx, 0x1
000000000000c741         or         r15, rax
000000000000c744         cmp        rcx, 0x4
000000000000c748         jne        loc_c71b

000000000000c74a         mov        rdi, qword [rsp+0x138+var_120]
000000000000c74f         lea        rax, qword [rbx+rbx*2]
000000000000c753         test       r9, r9
000000000000c756         lea        rdx, qword [rdi+rax*8]
000000000000c75a         je         loc_c7c4

000000000000c75c         mov        rax, rbp
000000000000c75f         movdqa     xmm0, xmmword [rsp+0x138+var_68]
000000000000c768         shl        rax, 0x5
000000000000c76c         mov        rsi, rdx
000000000000c76f         mov        qword [rsp+0x138+var_100], rdx
000000000000c774         add        rax, r13
000000000000c777         movups     xmmword [rax], xmm0
000000000000c77a         movdqa     xmm0, xmmword [rsp+0x138+var_58]
000000000000c783         movups     xmmword [rax+0x10], xmm0
000000000000c787         lea        rax, qword [rbp+rbp*2]
000000000000c78c         lea        rdi, qword [rdi+rax*8]
000000000000c790         movdqa     xmm0, xmmword [rsp+0x138+var_88]
000000000000c799         movups     xmmword [r13+r10], xmm0
000000000000c79f         movdqa     xmm0, xmmword [rsp+0x138+var_78]
000000000000c7a8         movups     xmmword [r13+r10+0x10], xmm0
000000000000c7ae         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000c7b3         test       eax, eax
000000000000c7b5         jne        loc_c890

000000000000c7bb         mov        rdx, qword [rsp+0x138+var_100]
000000000000c7c0         add        rbp, 0x1

                     loc_c7c4:
000000000000c7c4         mov        rax, qword [rsp+0x138+var_130]              ; CODE XREF=build_trtable+1530
000000000000c7c9         mov        rsi, qword [rsp+0x138+var_118]
000000000000c7ce         mov        rdi, rdx
000000000000c7d1         mov        rax, qword [rax+0x18]
000000000000c7d5         mov        rsi, qword [rax+rsi]
000000000000c7d9         call       re_node_set_insert                          ; re_node_set_insert
000000000000c7de         test       al, al
000000000000c7e0         je         loc_c890

000000000000c7e6         test       r15, r15
000000000000c7e9         je         loc_c7f8

                     loc_c7eb:
000000000000c7eb         add        rbx, 0x1                                    ; CODE XREF=build_trtable+1394, build_trtable+1445
000000000000c7ef         cmp        rbx, rbp
000000000000c7f2         jl         loc_c6a8

                     loc_c7f8:
000000000000c7f8         mov        r15, r13                                    ; CODE XREF=build_trtable+1673

                     loc_c7fb:
000000000000c7fb         cmp        rbp, rbx                                    ; CODE XREF=build_trtable+1333
000000000000c7fe         jne        loc_c25f

000000000000c804         mov        rax, rbp
000000000000c807         movdqa     xmm0, xmmword [rsp+0x138+var_A8]
000000000000c810         shl        rax, 0x5
000000000000c814         mov        rbx, qword [rsp+0x138+var_118]
000000000000c819         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
000000000000c81e         add        rax, r15
000000000000c821         movups     xmmword [rax], xmm0
000000000000c824         movdqa     xmm0, xmmword [rsp+0x138+var_98]
000000000000c82d         movups     xmmword [rax+0x10], xmm0
000000000000c831         mov        rax, qword [rsp+0x138+var_130]
000000000000c836         mov        rax, qword [rax+0x18]
000000000000c83a         mov        r13, qword [rax+rbx]
000000000000c83e         mov        rbx, qword [rsp+0x138+var_120]
000000000000c843         lea        rax, qword [rbp+rbp*2]
000000000000c848         lea        rbx, qword [rbx+rax*8]
000000000000c84c         mov        qword [rbx], 0x1
000000000000c853         mov        qword [rbx+8], 0x1
000000000000c85b         call       j_malloc                                    ; malloc
000000000000c860         test       rax, rax
000000000000c863         mov        qword [rbx+0x10], rax
000000000000c867         je         loc_c54d

000000000000c86d         mov        qword [rax], r13
000000000000c870         add        rbp, 0x1

                     loc_c874:
000000000000c874         pxor       xmm0, xmm0                                  ; CODE XREF=build_trtable+1145, build_trtable+2070, build_trtable+2154
000000000000c878         movaps     xmmword [r12], xmm0
000000000000c87d         movaps     xmmword [r12+0x10], xmm0
000000000000c883         jmp        loc_c25f
000000000000c888         align      16

                     loc_c890:
000000000000c890         mov        rax, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+1023, build_trtable+1621, build_trtable+1664
000000000000c895         lea        rbx, qword [rax+0x10]
000000000000c899         lea        rax, qword [rbp+rbp*2]
000000000000c89e         lea        rbp, qword [rbx+rax*8]
000000000000c8a2         nop        word [rax+rax]

                     loc_c8a8:
000000000000c8a8         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=build_trtable+1879
000000000000c8ab         add        rbx, 0x18
000000000000c8af         call       j_free                                      ; free
000000000000c8b4         cmp        rbp, rbx
000000000000c8b7         jne        loc_c8a8

000000000000c8b9         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000c8be         call       j_free                                      ; free
000000000000c8c3         jmp        loc_c570
000000000000c8c8         align      16

                     loc_c8d0:
000000000000c8d0         mov        rsi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+239
000000000000c8d5         cmp        dword [rsi+0xb4], 0x1
000000000000c8dc         jle        loc_c9e5

000000000000c8e2         mov        rsi, qword [rsi+0x78]
000000000000c8e6         lea        r12, qword [rsp+0x138+var_A8]
000000000000c8ee         xor        edx, edx

                     loc_c8f0:
000000000000c8f0         mov        rcx, qword [r12+rdx]                        ; CODE XREF=build_trtable+1956
000000000000c8f4         or         rcx, qword [rsi+rdx]
000000000000c8f8         mov        qword [r12+rdx], rcx
000000000000c8fc         add        rdx, 0x8
000000000000c900         cmp        rdx, 0x20
000000000000c904         jne        loc_c8f0

                     loc_c906:
000000000000c906         mov        rbx, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+2209, build_trtable+2285
000000000000c90b         mov        rdx, qword [rbx+0xd8]
000000000000c912         test       dl, 0x40
000000000000c915         jne        loc_c923

000000000000c917         and        qword [rsp+0x138+var_A8], 0xfffffffffffffbff

                     loc_c923:
000000000000c923         and        edx, 0x80                                   ; CODE XREF=build_trtable+1973
000000000000c929         je         loc_c5c6

000000000000c92f         and        qword [rsp+0x138+var_A8], 0xfffffffffffffffe
000000000000c938         jmp        loc_c5c6
000000000000c93d         align      64

                     loc_c940:
000000000000c940         mov        rdx, qword [rsp+0x138+var_A8]               ; CODE XREF=build_trtable+1137
000000000000c948         pxor       xmm0, xmm0
000000000000c94c         and        dh, 0x4
000000000000c94f         movaps     xmmword [r12], xmm0
000000000000c954         movaps     xmmword [r12+0x10], xmm0
000000000000c95a         je         loc_c25f

000000000000c960         mov        qword [rsp+0x138+var_A8], 0x400
000000000000c96c         jmp        loc_c5d7

                     loc_c971:
000000000000c971         test       byte [r13+0xa], 0x40                        ; CODE XREF=build_trtable+1245
000000000000c976         jne        loc_c874

000000000000c97c         mov        rdi, qword [rsp+0x138+var_108]
000000000000c981         cmp        dword [rdi+0xb4], 0x1
000000000000c988         jg         loc_c655

                     loc_c98e:
000000000000c98e         mov        rsi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+1263
000000000000c993         xor        ecx, ecx
000000000000c995         xor        edx, edx

                     loc_c997:
000000000000c997         mov        rax, qword [rsi+rdx*8+0xb8]                 ; CODE XREF=build_trtable+2133
000000000000c99f         not        rax
000000000000c9a2         and        rax, qword [r12+rdx*8]
000000000000c9a6         mov        qword [r12+rdx*8], rax
000000000000c9aa         add        rdx, 0x1
000000000000c9ae         or         rcx, rax
000000000000c9b1         cmp        rdx, 0x4
000000000000c9b5         jne        loc_c997

000000000000c9b7         test       rcx, rcx
000000000000c9ba         jne        loc_c690

000000000000c9c0         jmp        loc_c25f

                     loc_c9c5:
000000000000c9c5         test       byte [r13+0xa], 0x40                        ; CODE XREF=build_trtable+1159
000000000000c9ca         je         loc_c874

000000000000c9d0         mov        r8, qword [rsp+0x138+var_108]
000000000000c9d5         cmp        dword [r8+0xb4], 0x1
000000000000c9dd         jg         loc_c600

000000000000c9e3         jmp        loc_ca52

                     loc_c9e5:
000000000000c9e5         pcmpeqd    xmm0, xmm0                                  ; CODE XREF=build_trtable+1916
000000000000c9e9         lea        r12, qword [rsp+0x138+var_A8]
000000000000c9f1         movaps     xmmword [rsp+0x138+var_A8], xmm0
000000000000c9f9         movaps     xmmword [rsp+0x138+var_98], xmm0
000000000000ca01         jmp        loc_c906
000000000000ca06         align      16

                     loc_ca10:
000000000000ca10         mov        rsi, qword [r13]                            ; CODE XREF=build_trtable+229
000000000000ca14         lea        r12, qword [rsp+0x138+var_A8]
000000000000ca1c         xor        edx, edx

                     loc_ca1e:
000000000000ca1e         mov        rcx, qword [r12+rdx]                        ; CODE XREF=build_trtable+2258
000000000000ca22         or         rcx, qword [rsi+rdx]
000000000000ca26         mov        qword [r12+rdx], rcx
000000000000ca2a         add        rdx, 0x8
000000000000ca2e         cmp        rdx, 0x20
000000000000ca32         jne        loc_ca1e

000000000000ca34         jmp        loc_c5c6

                     loc_ca39:
000000000000ca39         pcmpeqd    xmm0, xmm0                                  ; CODE XREF=build_trtable+249
000000000000ca3d         lea        r12, qword [rsp+0x138+var_A8]
000000000000ca45         movaps     xmmword [rsp+0x138+var_A8], xmm0
000000000000ca4d         jmp        loc_c906

                     loc_ca52:
000000000000ca52         mov        rdi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+1178, build_trtable+2179
000000000000ca57         xor        esi, esi
000000000000ca59         xor        edx, edx

                     loc_ca5b:
000000000000ca5b         mov        rcx, qword [r12+rdx*8]                      ; CODE XREF=build_trtable+2326
000000000000ca5f         and        rcx, qword [rdi+rdx*8+0xb8]
000000000000ca67         mov        qword [r12+rdx*8], rcx
000000000000ca6b         add        rdx, 0x1
000000000000ca6f         or         rsi, rcx
000000000000ca72         cmp        rdx, 0x4
000000000000ca76         jne        loc_ca5b

000000000000ca78         test       rsi, rsi
000000000000ca7b         jne        loc_c635

000000000000ca81         jmp        loc_c25f

                     loc_ca86:
000000000000ca86         mov        edx, dword [rsp+0x138+var_CC]               ; CODE XREF=build_trtable+2481
000000000000ca8a         test       edx, edx
000000000000ca8c         je         loc_cb17

000000000000ca92         nop        word [rax+rax]

                     loc_ca98:
000000000000ca98         mov        rbp, qword [rsp+0x138+var_118]              ; CODE XREF=build_trtable+568, build_trtable+2574, build_trtable+2596

                     loc_ca9d:
000000000000ca9d         mov        rdi, qword [rsp+0x138+var_128]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+766, build_trtable+2631
000000000000caa2         call       j_free                                      ; free
000000000000caa7         mov        r12, qword [rsp+0x138+var_B8]

                     loc_caaf:
000000000000caaf         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=build_trtable+335, build_trtable+362, build_trtable+398
000000000000cab2         call       j_free                                      ; free
000000000000cab7         mov        rax, qword [rsp+0x138+var_120]
000000000000cabc         lea        rbx, qword [rax+0x10]
000000000000cac0         lea        rax, qword [rbp+rbp*2]
000000000000cac5         lea        rbp, qword [rbx+rax*8]
000000000000cac9         nop        dword [rax]

                     loc_cad0:
000000000000cad0         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=build_trtable+2431
000000000000cad3         add        rbx, 0x18
000000000000cad7         call       j_free                                      ; free
000000000000cadc         cmp        rbp, rbx
000000000000cadf         jne        loc_cad0

000000000000cae1         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000cae6         call       j_free                                      ; free
000000000000caeb         jmp        loc_c570

                     loc_caf0:
000000000000caf0         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+624
000000000000caf5         mov        ecx, 0x1
000000000000cafa         mov        rdx, r14
000000000000cafd         mov        rsi, rbp
000000000000cb00         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000cb05         mov        rdi, qword [rsp+0x138+var_108]
000000000000cb0a         test       rax, rax
000000000000cb0d         mov        qword [rdi+rbx*8], rax
000000000000cb11         je         loc_ca86

                     loc_cb17:
000000000000cb17         mov        rdi, qword [rsp+0x138+var_128]              ; CODE XREF=build_trtable+2348
000000000000cb1c         cmp        rax, qword [rdi+rbx*8]
000000000000cb20         je         loc_cb3b

000000000000cb22         movzx      edi, byte [rsp+0x138+var_E9]
000000000000cb27         cmp        dword [rbp+0xb4], 0x2
000000000000cb2e         mov        eax, 0x1
000000000000cb33         cmovge     edi, eax
000000000000cb36         mov        byte [rsp+0x138+var_E9], dil

                     loc_cb3b:
000000000000cb3b         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+2496
000000000000cb40         mov        rsi, rbp
000000000000cb43         mov        ecx, 0x2
000000000000cb48         mov        rdx, r14
000000000000cb4b         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000cb50         mov        rsi, qword [rsp+0x138+var_100]
000000000000cb55         test       rax, rax
000000000000cb58         mov        qword [rsi+rbx*8], rax
000000000000cb5c         jne        loc_c3f1

000000000000cb62         mov        eax, dword [rsp+0x138+var_CC]
000000000000cb66         test       eax, eax
000000000000cb68         je         loc_c3f1

000000000000cb6e         jmp        loc_ca98
000000000000cb73         align      8

                     loc_cb78:
000000000000cb78         mov        ecx, dword [rsp+0x138+var_CC]               ; CODE XREF=build_trtable+614
000000000000cb7c         test       ecx, ecx
000000000000cb7e         je         loc_c3cc

000000000000cb84         jmp        loc_ca98

                     loc_cb89:
000000000000cb89         mov        esi, 0x200                                  ; argument "__size" for method j_calloc, CODE XREF=build_trtable+730
000000000000cb8e         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
000000000000cb93         call       j_calloc                                    ; calloc
000000000000cb98         mov        r11, rax
000000000000cb9b         mov        rax, qword [rsp+0x138+var_130]
000000000000cba0         test       r11, r11
000000000000cba3         mov        qword [rax+0x60], r11
000000000000cba7         je         loc_ca9d

000000000000cbad         mov        r13, qword [rsp+0x138+var_F8]
000000000000cbb2         mov        r10, qword [rsp+0x138+var_128]
000000000000cbb7         mov        r12, r11
000000000000cbba         mov        r14, qword [rsp+0x138+var_108]
000000000000cbbf         mov        rdx, qword [rsp+0x138+var_118]
000000000000cbc4         xor        ebx, ebx
000000000000cbc6         add        r13, 0x20

                     loc_cbca:
000000000000cbca         mov        rax, qword [rdx+rbx]                        ; CODE XREF=build_trtable+2718
000000000000cbce         test       rax, rax
000000000000cbd1         je         loc_cbef

000000000000cbd3         mov        rsi, r12
000000000000cbd6         mov        ecx, 0x1

                     loc_cbdb:
000000000000cbdb         test       al, 0x1                                     ; CODE XREF=build_trtable+2701
000000000000cbdd         jne        loc_cc8c

                     loc_cbe3:
000000000000cbe3         add        rcx, rcx                                    ; CODE XREF=build_trtable+2923
000000000000cbe6         add        rsi, 0x8
000000000000cbea         shr        rax, 0x1
000000000000cbed         jne        loc_cbdb

                     loc_cbef:
000000000000cbef         add        rbx, 0x8                                    ; CODE XREF=build_trtable+2673
000000000000cbf3         add        r12, 0x200
000000000000cbfa         cmp        rbx, 0x20
000000000000cbfe         jne        loc_cbca

000000000000cc00         jmp        loc_c4be
000000000000cc05         align      8

                     loc_cc08:
000000000000cc08         mov        rdi, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+834
000000000000cc0d         test       qword [rdi+r9+0x1800], rcx
000000000000cc15         jne        loc_cc87

000000000000cc17         lea        rdi, qword [rbx+r9]
000000000000cc1b         xor        r8d, r8d
000000000000cc1e         nop

                     loc_cc20:
000000000000cc20         mov        r10, qword [rdi]                            ; CODE XREF=build_trtable+2769
000000000000cc23         add        r8, 0x1
000000000000cc27         add        rdi, 0x20
000000000000cc2b         and        r10, rcx
000000000000cc2e         test       r10, r10
000000000000cc31         je         loc_cc20

000000000000cc33         shl        r8, 0x3

                     loc_cc37:
000000000000cc37         test       qword [r15+r9+0xb8], rcx                    ; CODE XREF=build_trtable+2858
000000000000cc3f         je         loc_cc4e

000000000000cc41         mov        rdi, qword [r13+r8]
000000000000cc46         mov        qword [rsi], rdi
000000000000cc49         jmp        loc_c4a8

                     loc_cc4e:
000000000000cc4e         mov        rdi, qword [r12+r8]                         ; CODE XREF=build_trtable+2783
000000000000cc52         mov        qword [rsi], rdi
000000000000cc55         jmp        loc_c4a8

                     loc_cc5a:
000000000000cc5a         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+131
000000000000cc5f         call       j_free                                      ; free

                     loc_cc64:
000000000000cc64         mov        esi, 0x100                                  ; argument "__size" for method j_calloc, CODE XREF=build_trtable+2956
000000000000cc69         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
000000000000cc6e         call       j_calloc                                    ; calloc
000000000000cc73         mov        rbx, qword [rsp+0x138+var_130]
000000000000cc78         test       rax, rax
000000000000cc7b         mov        qword [rbx+0x58], rax
000000000000cc7f         setne      al
000000000000cc82         jmp        loc_c572

                     loc_cc87:
000000000000cc87         xor        r8d, r8d                                    ; CODE XREF=build_trtable+2741
000000000000cc8a         jmp        loc_cc37

                     loc_cc8c:
000000000000cc8c         mov        rdi, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+2685
000000000000cc91         test       qword [rdi+rbx+0x1800], rcx
000000000000cc99         jne        loc_ccd0

000000000000cc9b         lea        r9, qword [r13+rbx]
000000000000cca0         xor        r8d, r8d

                     loc_cca3:
000000000000cca3         mov        r15, qword [r9]                             ; CODE XREF=build_trtable+2903
000000000000cca6         add        r8, 0x1
000000000000ccaa         add        r9, 0x20
000000000000ccae         mov        rdi, r8
000000000000ccb1         and        r15, rcx
000000000000ccb4         test       r15, r15
000000000000ccb7         je         loc_cca3

                     loc_ccb9:
000000000000ccb9         mov        r8, qword [r10+rdi*8]                       ; CODE XREF=build_trtable+2930
000000000000ccbd         mov        qword [rsi], r8
000000000000ccc0         mov        rdi, qword [r14+rdi*8]
000000000000ccc4         mov        qword [rsi+0x800], rdi
000000000000cccb         jmp        loc_cbe3

                     loc_ccd0:
000000000000ccd0         xor        edi, edi                                    ; CODE XREF=build_trtable+2873
000000000000ccd2         jmp        loc_ccb9

                     loc_ccd4:
000000000000ccd4         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_trtable+1059
                        ; endp

                     loc_ccd9:
000000000000ccd9         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+285
000000000000ccde         call       j_free                                      ; free
000000000000cce3         test       rbp, rbp
000000000000cce6         jne        loc_c570

000000000000ccec         jmp        loc_cc64
000000000000ccf1         align      256                                         ; End of unwind block (FDE at 0x19f3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     calc_first:
000000000000cd00         cmp        byte [rsi+0x30], 0x10                       ; Begin of unwind block (FDE at 0x19f8c), DATA XREF=re_compile_internal+1662
000000000000cd04         je         loc_cd68

000000000000cd06         push       rbp
000000000000cd07         push       rbx
000000000000cd08         mov        rbx, rsi
000000000000cd0b         mov        rbp, rdi
000000000000cd0e         sub        rsp, 0x8
000000000000cd12         mov        qword [rbx+0x18], rsi
000000000000cd16         mov        rdx, qword [rbx+0x30]
000000000000cd1a         mov        rsi, qword [rsi+0x28]
000000000000cd1e         call       re_dfa_add_node                             ; re_dfa_add_node
000000000000cd23         cmp        rax, 0xffffffffffffffff
000000000000cd27         mov        rdx, rax
000000000000cd2a         mov        qword [rbx+0x38], rax
000000000000cd2e         je         loc_cd80

000000000000cd30         xor        eax, eax
000000000000cd32         cmp        byte [rbx+0x30], 0xc
000000000000cd36         jne        loc_cd5c

000000000000cd38         mov        ecx, dword [rbx+0x28]
000000000000cd3b         shl        rdx, 0x4
000000000000cd3f         add        rdx, qword [rbp]
000000000000cd43         and        ecx, 0x3ff
000000000000cd49         shl        ecx, 0x8
000000000000cd4c         mov        esi, ecx
000000000000cd4e         mov        ecx, dword [rdx+8]
000000000000cd51         and        ecx, 0xfffc00ff
000000000000cd57         or         ecx, esi
000000000000cd59         mov        dword [rdx+8], ecx

                     loc_cd5c:
000000000000cd5c         add        rsp, 0x8                                    ; CODE XREF=calc_first+54, calc_first+133
000000000000cd60         pop        rbx
000000000000cd61         pop        rbp
000000000000cd62         ret
                        ; endp
000000000000cd63         align      8

                     loc_cd68:
000000000000cd68         mov        rax, qword [rsi+8]                          ; CODE XREF=calc_first+4
000000000000cd6c         mov        rdx, qword [rax+0x18]
000000000000cd70         mov        rax, qword [rax+0x38]
000000000000cd74         mov        qword [rsi+0x18], rdx
000000000000cd78         mov        qword [rsi+0x38], rax
000000000000cd7c         xor        eax, eax
000000000000cd7e         ret
                        ; endp
000000000000cd7f         align      128

                     loc_cd80:
000000000000cd80         mov        eax, 0xc                                    ; CODE XREF=calc_first+46
000000000000cd85         jmp        loc_cd5c
000000000000cd87         align      16                                          ; End of unwind block (FDE at 0x19f8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_fail_stack_return.part.24:
000000000000cd90         push       r12                                         ; Begin of unwind block (FDE at 0x19fc0), CODE XREF=set_regs+1279, set_regs+1383, set_regs+1810, set_regs+2005
000000000000cd92         push       rbp
000000000000cd93         mov        rbp, rdi
000000000000cd96         push       rbx
000000000000cd97         cmp        qword [rdi], 0x0
000000000000cd9b         jle        loc_cdd2

000000000000cd9d         xor        ebx, ebx
000000000000cd9f         xor        r12d, r12d
000000000000cda2         nop        word [rax+rax]

                     loc_cda8:
000000000000cda8         mov        rax, qword [rbp+0x10]                       ; CODE XREF=free_fail_stack_return.part.24+64
000000000000cdac         add        r12, 0x1
000000000000cdb0         mov        rdi, qword [rax+rbx+0x28]                   ; argument "__ptr" for method j_free
000000000000cdb5         call       j_free                                      ; free
000000000000cdba         mov        rax, qword [rbp+0x10]
000000000000cdbe         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000cdc3         add        rbx, 0x30
000000000000cdc7         call       j_free                                      ; free
000000000000cdcc         cmp        r12, qword [rbp]
000000000000cdd0         jl         loc_cda8

                     loc_cdd2:
000000000000cdd2         pop        rbx                                         ; CODE XREF=free_fail_stack_return.part.24+11
000000000000cdd3         mov        rdi, qword [rbp+0x10]                       ; argument "__ptr" for method j_free
000000000000cdd7         pop        rbp
000000000000cdd8         pop        r12
000000000000cdda         jmp        j_free                                      ; free
                        ; endp
000000000000cddf         align      32                                          ; End of unwind block (FDE at 0x19fc0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     pop_fail_stack.isra.25:
000000000000cde0         push       r12                                         ; Begin of unwind block (FDE at 0x19fec), CODE XREF=set_regs+1459, set_regs+1542
000000000000cde2         push       rbp
000000000000cde3         push       rbx
000000000000cde4         mov        rax, qword [rdi]
000000000000cde7         sub        rax, 0x1
000000000000cdeb         test       rax, rax
000000000000cdee         mov        qword [rdi], rax
000000000000cdf1         js         loc_ce55

000000000000cdf3         lea        rbx, qword [rax+rax*2]
000000000000cdf7         mov        rax, qword [rsi]
000000000000cdfa         mov        r12, rsi
000000000000cdfd         shl        rcx, 0x4
000000000000ce01         mov        rbp, r9
000000000000ce04         mov        rdi, r8                                     ; argument "__dest" for method j_memcpy
000000000000ce07         shl        rbx, 0x4
000000000000ce0b         add        rax, rbx
000000000000ce0e         mov        rsi, qword [rax]
000000000000ce11         mov        qword [rdx], rsi
000000000000ce14         mov        rsi, qword [rax+0x10]                       ; argument "__src" for method j_memcpy
000000000000ce18         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
000000000000ce1b         call       j_memcpy                                    ; memcpy
000000000000ce20         mov        rdi, qword [rbp+0x10]                       ; argument "__ptr" for method j_free
000000000000ce24         call       j_free                                      ; free
000000000000ce29         mov        rax, qword [r12]
000000000000ce2d         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000ce32         call       j_free                                      ; free
000000000000ce37         add        rbx, qword [r12]
000000000000ce3b         movdqu     xmm0, xmmword [rbx+0x18]
000000000000ce40         movaps     xmmword [rbp], xmm0
000000000000ce44         mov        rax, qword [rbx+0x28]
000000000000ce48         mov        qword [rbp+0x10], rax
000000000000ce4c         mov        rax, qword [rbx+8]
000000000000ce50         pop        rbx
000000000000ce51         pop        rbp
000000000000ce52         pop        r12
000000000000ce54         ret
                        ; endp

                     loc_ce55:
000000000000ce55         lea        rcx, qword [__PRETTY_FUNCTION__.8040]       ; argument "__function" for method j___assert_fail, "pop_fail_stack", CODE XREF=pop_fail_stack.isra.25+17
000000000000ce5c         lea        rsi, qword [aCoreutils831li_17608]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000000ce63         lea        rdi, qword [aNum0]                          ; argument "__assertion" for method j___assert_fail, "num >= 0"
000000000000ce6a         mov        edx, 0x555                                  ; argument "__line" for method j___assert_fail
000000000000ce6f         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000ce74         align      128                                         ; End of unwind block (FDE at 0x19fec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     build_collating_symbol.isra.28:
000000000000ce80         push       rbp                                         ; Begin of unwind block (FDE at 0x1a01c), CODE XREF=sub_13290+1072, sub_13290+1128
000000000000ce81         push       rbx
000000000000ce82         mov        rbp, rdi
000000000000ce85         mov        rdi, rsi                                    ; argument "__s" for method j_strlen
000000000000ce88         mov        rbx, rsi
000000000000ce8b         sub        rsp, 0x8
000000000000ce8f         call       j_strlen                                    ; strlen
000000000000ce94         cmp        rax, 0x1
000000000000ce98         jne        loc_cec0

000000000000ce9a         movzx      ecx, byte [rbx]
000000000000ce9d         mov        rdx, rcx
000000000000cea0         and        ecx, 0x3f
000000000000cea3         shr        rdx, 0x3
000000000000cea7         shl        rax, cl
000000000000ceaa         and        edx, 0x18
000000000000cead         or         qword [rbp+rdx], rax
000000000000ceb2         add        rsp, 0x8
000000000000ceb6         xor        eax, eax
000000000000ceb8         pop        rbx
000000000000ceb9         pop        rbp
000000000000ceba         ret
                        ; endp
000000000000cebb         align      64

                     loc_cec0:
000000000000cec0         add        rsp, 0x8                                    ; CODE XREF=build_collating_symbol.isra.28+24
000000000000cec4         mov        eax, 0x3
000000000000cec9         pop        rbx
000000000000ceca         pop        rbp
000000000000cecb         ret
                        ; endp
000000000000cecc         align      16                                          ; End of unwind block (FDE at 0x1a01c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     build_charclass.isra.29:
000000000000ced0         push       r14                                         ; Begin of unwind block (FDE at 0x1a050), CODE XREF=build_charclass_op+163, sub_13290+1309
000000000000ced2         push       r13
000000000000ced4         mov        r13, rcx
000000000000ced7         push       r12
000000000000ced9         push       rbp
000000000000ceda         mov        r12, r9
000000000000cedd         push       rbx
000000000000cede         mov        rbp, rdi
000000000000cee1         mov        rbx, rsi
000000000000cee4         sub        rsp, 0x10
000000000000cee8         test       qword [rsp+0x38+arg_0], 0x400000
000000000000cef1         je         loc_cf18

000000000000cef3         lea        rdi, qword [aUpper]                         ; "upper"
000000000000cefa         mov        ecx, 0x6
000000000000ceff         mov        rsi, r9
000000000000cf02         rep  cmpsb byte [rsi], byte [rdi]
000000000000cf04         seta       al
000000000000cf07         sbb        al, 0x0
000000000000cf09         test       al, al
000000000000cf0b         jne        loc_d006

000000000000cf11         lea        r12, qword [aAlpha]                         ; "alpha"

                     loc_cf18:
000000000000cf18         mov        rcx, qword [r13]                            ; CODE XREF=build_charclass.isra.29+33
000000000000cf1c         cmp        qword [r8], rcx
000000000000cf1f         mov        rax, qword [rdx]
000000000000cf22         je         loc_d039

                     loc_cf28:
000000000000cf28         lea        rdx, qword [rcx+1]                          ; CODE XREF=build_charclass.isra.29+355, build_charclass.isra.29+419
000000000000cf2c         mov        rdi, r12                                    ; argument "__property" for method j_wctype
000000000000cf2f         mov        qword [r13], rdx
000000000000cf33         lea        r13, qword [rax+rcx*8]
000000000000cf37         call       j_wctype                                    ; wctype
000000000000cf3c         lea        rdi, qword [aAlnum]                         ; "alnum"
000000000000cf43         mov        qword [r13], rax
000000000000cf47         mov        ecx, 0x6
000000000000cf4c         mov        rsi, r12
000000000000cf4f         rep  cmpsb byte [rsi], byte [rdi]
000000000000cf51         seta       al
000000000000cf54         sbb        al, 0x0
000000000000cf56         test       al, al
000000000000cf58         je         loc_cfc8

000000000000cf5a         lea        rdi, qword [aCntrl]                         ; "cntrl"
000000000000cf61         mov        ecx, 0x6
000000000000cf66         mov        rsi, r12
000000000000cf69         rep  cmpsb byte [rsi], byte [rdi]
000000000000cf6b         seta       al
000000000000cf6e         sbb        al, 0x0
000000000000cf70         test       al, al
000000000000cf72         jne        loc_d078

000000000000cf78         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000cf7d         xor        ecx, ecx
000000000000cf7f         test       rbp, rbp
000000000000cf82         mov        rdx, qword [rax]
000000000000cf85         mov        edi, 0x1
000000000000cf8a         jne        loc_d24a

                     loc_cf90:
000000000000cf90         test       byte [rdx+rcx*2], 0x2                       ; CODE XREF=build_charclass.isra.29+226
000000000000cf94         je         loc_cfa7

000000000000cf96         mov        rax, rcx
000000000000cf99         mov        rsi, rdi
000000000000cf9c         sar        rax, 0x6
000000000000cfa0         shl        rsi, cl
000000000000cfa3         or         qword [rbx+rax*8], rsi

                     loc_cfa7:
000000000000cfa7         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+196
000000000000cfab         cmp        rcx, 0x100
000000000000cfb2         jne        loc_cf90

                     loc_cfb4:
000000000000cfb4         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+308, build_charclass.isra.29+549, build_charclass.isra.29+621, build_charclass.isra.29+757, build_charclass.isra.29+814, build_charclass.isra.29+885, build_charclass.isra.29+942, build_charclass.isra.29+1037, build_charclass.isra.29+1095, build_charclass.isra.29+1187, build_charclass.isra.29+1292

                     loc_cfb6:
000000000000cfb6         add        rsp, 0x10                                   ; CODE XREF=build_charclass.isra.29+1197, build_charclass.isra.29+1893
000000000000cfba         pop        rbx
000000000000cfbb         pop        rbp
000000000000cfbc         pop        r12
000000000000cfbe         pop        r13
000000000000cfc0         pop        r14
000000000000cfc2         ret
                        ; endp
000000000000cfc3         align      8

                     loc_cfc8:
000000000000cfc8         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+136
000000000000cfcd         xor        ecx, ecx
000000000000cfcf         test       rbp, rbp
000000000000cfd2         mov        rdx, qword [rax]
000000000000cfd5         mov        edi, 0x1
000000000000cfda         jne        loc_d1ca

                     loc_cfe0:
000000000000cfe0         test       byte [rdx+rcx*2], 0x8                       ; CODE XREF=build_charclass.isra.29+306
000000000000cfe4         je         loc_cff7

000000000000cfe6         mov        rax, rcx
000000000000cfe9         mov        rsi, rdi
000000000000cfec         sar        rax, 0x6
000000000000cff0         shl        rsi, cl
000000000000cff3         or         qword [rbx+rax*8], rsi

                     loc_cff7:
000000000000cff7         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+276
000000000000cffb         cmp        rcx, 0x100
000000000000d002         jne        loc_cfe0

000000000000d004         jmp        loc_cfb4

                     loc_d006:
000000000000d006         lea        rdi, qword [aLower]                         ; "lower", CODE XREF=build_charclass.isra.29+59
000000000000d00d         mov        ecx, 0x6
000000000000d012         mov        rsi, r9
000000000000d015         rep  cmpsb byte [rsi], byte [rdi]
000000000000d017         mov        rcx, qword [r13]
000000000000d01b         seta       al
000000000000d01e         sbb        al, 0x0
000000000000d020         test       al, al
000000000000d022         lea        rax, qword [aAlpha]                         ; "alpha"
000000000000d029         cmove      r12, rax
000000000000d02d         cmp        qword [r8], rcx
000000000000d030         mov        rax, qword [rdx]
000000000000d033         jne        loc_cf28

                     loc_d039:
000000000000d039         lea        r14, qword [rcx+rcx+1]                      ; CODE XREF=build_charclass.isra.29+82
000000000000d03e         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000000d041         mov        qword [rsp+0x38+var_30], r8
000000000000d046         mov        qword [rsp+0x38+var_38], rdx
000000000000d04a         lea        rsi, qword [r14*8]                          ; argument "__size" for method j_realloc
000000000000d052         call       j_realloc                                   ; realloc
000000000000d057         test       rax, rax
000000000000d05a         je         loc_d378

000000000000d060         mov        rdx, qword [rsp+0x38+var_38]
000000000000d064         mov        r8, qword [rsp+0x38+var_30]
000000000000d069         mov        qword [rdx], rax
000000000000d06c         mov        qword [r8], r14
000000000000d06f         mov        rcx, qword [r13]
000000000000d073         jmp        loc_cf28

                     loc_d078:
000000000000d078         lea        rdi, qword [aLower]                         ; "lower", CODE XREF=build_charclass.isra.29+162
000000000000d07f         mov        ecx, 0x6
000000000000d084         mov        rsi, r12
000000000000d087         rep  cmpsb byte [rsi], byte [rdi]
000000000000d089         seta       al
000000000000d08c         sbb        al, 0x0
000000000000d08e         test       al, al
000000000000d090         je         loc_d0fa

000000000000d092         lea        rdi, qword [aSpace]                         ; "space"
000000000000d099         mov        ecx, 0x6
000000000000d09e         mov        rsi, r12
000000000000d0a1         rep  cmpsb byte [rsi], byte [rdi]
000000000000d0a3         seta       al
000000000000d0a6         sbb        al, 0x0
000000000000d0a8         test       al, al
000000000000d0aa         jne        loc_d142

000000000000d0b0         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000d0b5         xor        ecx, ecx
000000000000d0b7         test       rbp, rbp
000000000000d0ba         mov        rdx, qword [rax]
000000000000d0bd         mov        edi, 0x1
000000000000d0c2         jne        loc_d41e

000000000000d0c8         nop        dword [rax+rax]

                     loc_d0d0:
000000000000d0d0         test       byte [rdx+rcx*2+1], 0x20                    ; CODE XREF=build_charclass.isra.29+547
000000000000d0d5         je         loc_d0e8

000000000000d0d7         mov        rax, rcx
000000000000d0da         mov        rsi, rdi
000000000000d0dd         sar        rax, 0x6
000000000000d0e1         shl        rsi, cl
000000000000d0e4         or         qword [rbx+rax*8], rsi

                     loc_d0e8:
000000000000d0e8         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+517
000000000000d0ec         cmp        rcx, 0x100
000000000000d0f3         jne        loc_d0d0

000000000000d0f5         jmp        loc_cfb4

                     loc_d0fa:
000000000000d0fa         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+448
000000000000d0ff         xor        ecx, ecx
000000000000d101         test       rbp, rbp
000000000000d104         mov        rdx, qword [rax]
000000000000d107         mov        edi, 0x1
000000000000d10c         jne        loc_d2e2

000000000000d112         nop        word [rax+rax]

                     loc_d118:
000000000000d118         test       byte [rdx+rcx*2+1], 0x2                     ; CODE XREF=build_charclass.isra.29+619
000000000000d11d         je         loc_d130

000000000000d11f         mov        rax, rcx
000000000000d122         mov        rsi, rdi
000000000000d125         sar        rax, 0x6
000000000000d129         shl        rsi, cl
000000000000d12c         or         qword [rbx+rax*8], rsi

                     loc_d130:
000000000000d130         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+589
000000000000d134         cmp        rcx, 0x100
000000000000d13b         jne        loc_d118

000000000000d13d         jmp        loc_cfb4

                     loc_d142:
000000000000d142         lea        rdi, qword [aAlpha]                         ; "alpha", CODE XREF=build_charclass.isra.29+474
000000000000d149         mov        ecx, 0x6
000000000000d14e         mov        rsi, r12
000000000000d151         rep  cmpsb byte [rsi], byte [rdi]
000000000000d153         seta       al
000000000000d156         sbb        al, 0x0
000000000000d158         test       al, al
000000000000d15a         je         loc_d203

000000000000d160         lea        rdi, qword [aDigit]                         ; "digit"
000000000000d167         mov        ecx, 0x6
000000000000d16c         mov        rsi, r12
000000000000d16f         rep  cmpsb byte [rsi], byte [rdi]
000000000000d171         seta       al
000000000000d174         sbb        al, 0x0
000000000000d176         test       al, al
000000000000d178         jne        loc_d283

000000000000d17e         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000d183         xor        ecx, ecx
000000000000d185         test       rbp, rbp
000000000000d188         mov        rdx, qword [rax]
000000000000d18b         mov        edi, 0x1
000000000000d190         jne        loc_d63a

000000000000d196         nop        word [cs:rax+rax]

                     loc_d1a0:
000000000000d1a0         test       byte [rdx+rcx*2+1], 0x8                     ; CODE XREF=build_charclass.isra.29+755
000000000000d1a5         je         loc_d1b8

000000000000d1a7         mov        rax, rcx
000000000000d1aa         mov        rsi, rdi
000000000000d1ad         sar        rax, 0x6
000000000000d1b1         shl        rsi, cl
000000000000d1b4         or         qword [rbx+rax*8], rsi

                     loc_d1b8:
000000000000d1b8         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+725
000000000000d1bc         cmp        rcx, 0x100
000000000000d1c3         jne        loc_d1a0

000000000000d1c5         jmp        loc_cfb4

                     loc_d1ca:
000000000000d1ca         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+266
000000000000d1cc         nop        dword [rax]

                     loc_d1d0:
000000000000d1d0         test       byte [rdx+rax*2], 0x8                       ; CODE XREF=build_charclass.isra.29+812
000000000000d1d4         je         loc_d1f2

000000000000d1d6         movzx      ecx, byte [rbp+rax]
000000000000d1db         mov        r10, rdi
000000000000d1de         mov        rsi, rcx
000000000000d1e1         and        ecx, 0x3f
000000000000d1e4         shr        rsi, 0x3
000000000000d1e8         shl        r10, cl
000000000000d1eb         and        esi, 0x18
000000000000d1ee         or         qword [rbx+rsi], r10

                     loc_d1f2:
000000000000d1f2         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+772
000000000000d1f6         cmp        rax, 0x100
000000000000d1fc         jne        loc_d1d0

000000000000d1fe         jmp        loc_cfb4

                     loc_d203:
000000000000d203         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+650
000000000000d208         xor        ecx, ecx
000000000000d20a         test       rbp, rbp
000000000000d20d         mov        rdx, qword [rax]
000000000000d210         mov        edi, 0x1
000000000000d215         jne        loc_d3e8

000000000000d21b         nop        dword [rax+rax]

                     loc_d220:
000000000000d220         test       byte [rdx+rcx*2+1], 0x4                     ; CODE XREF=build_charclass.isra.29+883
000000000000d225         je         loc_d238

000000000000d227         mov        rax, rcx
000000000000d22a         mov        rsi, rdi
000000000000d22d         sar        rax, 0x6
000000000000d231         shl        rsi, cl
000000000000d234         or         qword [rbx+rax*8], rsi

                     loc_d238:
000000000000d238         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+853
000000000000d23c         cmp        rcx, 0x100
000000000000d243         jne        loc_d220

000000000000d245         jmp        loc_cfb4

                     loc_d24a:
000000000000d24a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+186
000000000000d24c         nop        dword [rax]

                     loc_d250:
000000000000d250         test       byte [rdx+rax*2], 0x2                       ; CODE XREF=build_charclass.isra.29+940
000000000000d254         je         loc_d272

000000000000d256         movzx      ecx, byte [rbp+rax]
000000000000d25b         mov        r11, rdi
000000000000d25e         mov        rsi, rcx
000000000000d261         and        ecx, 0x3f
000000000000d264         shr        rsi, 0x3
000000000000d268         shl        r11, cl
000000000000d26b         and        esi, 0x18
000000000000d26e         or         qword [rbx+rsi], r11

                     loc_d272:
000000000000d272         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+900
000000000000d276         cmp        rax, 0x100
000000000000d27c         jne        loc_d250

000000000000d27e         jmp        loc_cfb4

                     loc_d283:
000000000000d283         lea        rdi, qword [aPrint]                         ; "print", CODE XREF=build_charclass.isra.29+680
000000000000d28a         mov        ecx, 0x6
000000000000d28f         mov        rsi, r12
000000000000d292         rep  cmpsb byte [rsi], byte [rdi]
000000000000d294         seta       al
000000000000d297         sbb        al, 0x0
000000000000d299         test       al, al
000000000000d29b         jne        loc_d31c

000000000000d29d         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000d2a2         xor        ecx, ecx
000000000000d2a4         test       rbp, rbp
000000000000d2a7         mov        rdx, qword [rax]
000000000000d2aa         mov        edi, 0x1
000000000000d2af         jne        loc_d6a7

000000000000d2b5         nop        dword [rax]

                     loc_d2b8:
000000000000d2b8         test       byte [rdx+rcx*2+1], 0x40                    ; CODE XREF=build_charclass.isra.29+1035
000000000000d2bd         je         loc_d2d0

000000000000d2bf         mov        rax, rcx
000000000000d2c2         mov        rsi, rdi
000000000000d2c5         sar        rax, 0x6
000000000000d2c9         shl        rsi, cl
000000000000d2cc         or         qword [rbx+rax*8], rsi

                     loc_d2d0:
000000000000d2d0         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1005
000000000000d2d4         cmp        rcx, 0x100
000000000000d2db         jne        loc_d2b8

000000000000d2dd         jmp        loc_cfb4

                     loc_d2e2:
000000000000d2e2         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+572
000000000000d2e4         nop        dword [rax]

                     loc_d2e8:
000000000000d2e8         test       byte [rdx+rax*2+1], 0x2                     ; CODE XREF=build_charclass.isra.29+1093
000000000000d2ed         je         loc_d30b

000000000000d2ef         movzx      ecx, byte [rbp+rax]
000000000000d2f4         mov        r14, rdi
000000000000d2f7         mov        rsi, rcx
000000000000d2fa         and        ecx, 0x3f
000000000000d2fd         shr        rsi, 0x3
000000000000d301         shl        r14, cl
000000000000d304         and        esi, 0x18
000000000000d307         or         qword [rbx+rsi], r14

                     loc_d30b:
000000000000d30b         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1053
000000000000d30f         cmp        rax, 0x100
000000000000d315         jne        loc_d2e8

000000000000d317         jmp        loc_cfb4

                     loc_d31c:
000000000000d31c         lea        rdi, qword [aUpper]                         ; "upper", CODE XREF=build_charclass.isra.29+971
000000000000d323         mov        ecx, 0x6
000000000000d328         mov        rsi, r12
000000000000d32b         rep  cmpsb byte [rsi], byte [rdi]
000000000000d32d         seta       al
000000000000d330         sbb        al, 0x0
000000000000d332         test       al, al
000000000000d334         jne        loc_d382

000000000000d336         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000d33b         xor        ecx, ecx
000000000000d33d         test       rbp, rbp
000000000000d340         mov        rax, qword [rax]
000000000000d343         mov        edi, 0x1
000000000000d348         jne        loc_d670

                     loc_d34e:
000000000000d34e         test       byte [rax+rcx*2+1], 0x1                     ; CODE XREF=build_charclass.isra.29+1185
000000000000d353         je         loc_d366

000000000000d355         mov        rdx, rcx
000000000000d358         mov        rsi, rdi
000000000000d35b         sar        rdx, 0x6
000000000000d35f         shl        rsi, cl
000000000000d362         or         qword [rbx+rdx*8], rsi

                     loc_d366:
000000000000d366         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1155
000000000000d36a         cmp        rcx, 0x100
000000000000d371         jne        loc_d34e

000000000000d373         jmp        loc_cfb4

                     loc_d378:
000000000000d378         mov        eax, 0xc                                    ; CODE XREF=build_charclass.isra.29+394
000000000000d37d         jmp        loc_cfb6

                     loc_d382:
000000000000d382         lea        rdi, qword [aBlank]                         ; "blank", CODE XREF=build_charclass.isra.29+1124
000000000000d389         mov        ecx, 0x6
000000000000d38e         mov        rsi, r12
000000000000d391         rep  cmpsb byte [rsi], byte [rdi]
000000000000d393         seta       al
000000000000d396         sbb        al, 0x0
000000000000d398         test       al, al
000000000000d39a         jne        loc_d48e

000000000000d3a0         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000d3a5         xor        ecx, ecx
000000000000d3a7         test       rbp, rbp
000000000000d3aa         mov        rdx, qword [rax]
000000000000d3ad         mov        esi, 0x1
000000000000d3b2         jne        loc_d454

                     loc_d3b8:
000000000000d3b8         test       byte [rdx+rcx*2], 0x1                       ; CODE XREF=build_charclass.isra.29+1290
000000000000d3bc         je         loc_d3cf

000000000000d3be         mov        rax, rcx
000000000000d3c1         mov        rdi, rsi
000000000000d3c4         sar        rax, 0x6
000000000000d3c8         shl        rdi, cl
000000000000d3cb         or         qword [rbx+rax*8], rdi

                     loc_d3cf:
000000000000d3cf         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1260
000000000000d3d3         cmp        rcx, 0x100
000000000000d3da         jne        loc_d3b8

000000000000d3dc         jmp        loc_cfb4
000000000000d3e1         align      8

                     loc_d3e8:
000000000000d3e8         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+837

                     loc_d3ea:
000000000000d3ea         test       byte [rdx+rax*2+1], 0x4                     ; CODE XREF=build_charclass.isra.29+1351
000000000000d3ef         je         loc_d40d

000000000000d3f1         movzx      ecx, byte [rbp+rax]
000000000000d3f6         mov        r9, rdi
000000000000d3f9         mov        rsi, rcx
000000000000d3fc         and        ecx, 0x3f
000000000000d3ff         shr        rsi, 0x3
000000000000d403         shl        r9, cl
000000000000d406         and        esi, 0x18
000000000000d409         or         qword [rbx+rsi], r9

                     loc_d40d:
000000000000d40d         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1311
000000000000d411         cmp        rax, 0x100
000000000000d417         jne        loc_d3ea

000000000000d419         jmp        loc_cfb4

                     loc_d41e:
000000000000d41e         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+498

                     loc_d420:
000000000000d420         test       byte [rdx+rax*2+1], 0x20                    ; CODE XREF=build_charclass.isra.29+1405
000000000000d425         je         loc_d443

000000000000d427         movzx      ecx, byte [rbp+rax]
000000000000d42c         mov        r9, rdi
000000000000d42f         mov        rsi, rcx
000000000000d432         and        ecx, 0x3f
000000000000d435         shr        rsi, 0x3
000000000000d439         shl        r9, cl
000000000000d43c         and        esi, 0x18
000000000000d43f         or         qword [rbx+rsi], r9

                     loc_d443:
000000000000d443         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1365
000000000000d447         cmp        rax, 0x100
000000000000d44d         jne        loc_d420

000000000000d44f         jmp        loc_cfb4

                     loc_d454:
000000000000d454         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1250
000000000000d456         mov        edi, 0x1

                     loc_d45b:
000000000000d45b         test       byte [rdx+rax*2], 0x1                       ; CODE XREF=build_charclass.isra.29+1463
000000000000d45f         je         loc_d47d

000000000000d461         movzx      ecx, byte [rbp+rax]
000000000000d466         mov        r14, rdi
000000000000d469         mov        rsi, rcx
000000000000d46c         and        ecx, 0x3f
000000000000d46f         shr        rsi, 0x3
000000000000d473         shl        r14, cl
000000000000d476         and        esi, 0x18
000000000000d479         or         qword [rbx+rsi], r14

                     loc_d47d:
000000000000d47d         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1423
000000000000d481         cmp        rax, 0x100
000000000000d487         jne        loc_d45b

000000000000d489         jmp        loc_cfb4

                     loc_d48e:
000000000000d48e         lea        rsi, qword [aGraph]                         ; argument "__s2" for method j_strcmp, "graph", CODE XREF=build_charclass.isra.29+1226
000000000000d495         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
000000000000d498         call       j_strcmp                                    ; strcmp
000000000000d49d         test       eax, eax
000000000000d49f         jne        loc_d51a

000000000000d4a1         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000d4a6         xor        ecx, ecx
000000000000d4a8         test       rbp, rbp
000000000000d4ab         mov        rsi, qword [rax]
000000000000d4ae         mov        edx, 0x1
000000000000d4b3         jne        loc_d4df

                     loc_d4b5:
000000000000d4b5         cmp        word [rsi+rcx*2], 0x0                       ; CODE XREF=build_charclass.isra.29+1544
000000000000d4ba         jns        loc_d4cd

000000000000d4bc         mov        rax, rcx
000000000000d4bf         mov        rdi, rdx
000000000000d4c2         sar        rax, 0x6
000000000000d4c6         shl        rdi, cl
000000000000d4c9         or         qword [rbx+rax*8], rdi

                     loc_d4cd:
000000000000d4cd         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1514
000000000000d4d1         cmp        rcx, 0x100
000000000000d4d8         jne        loc_d4b5

000000000000d4da         jmp        loc_cfb4

                     loc_d4df:
000000000000d4df         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1507
000000000000d4e1         mov        edi, 0x1

                     loc_d4e6:
000000000000d4e6         cmp        word [rsi+rax*2], 0x0                       ; CODE XREF=build_charclass.isra.29+1603
000000000000d4eb         jns        loc_d509

000000000000d4ed         movzx      ecx, byte [rbp+rax]
000000000000d4f2         mov        r9, rdi
000000000000d4f5         mov        rdx, rcx
000000000000d4f8         and        ecx, 0x3f
000000000000d4fb         shr        rdx, 0x3
000000000000d4ff         shl        r9, cl
000000000000d502         and        edx, 0x18
000000000000d505         or         qword [rbx+rdx], r9

                     loc_d509:
000000000000d509         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1563
000000000000d50d         cmp        rax, 0x100
000000000000d513         jne        loc_d4e6

000000000000d515         jmp        loc_cfb4

                     loc_d51a:
000000000000d51a         lea        rsi, qword [aPunct]                         ; argument "__s2" for method j_strcmp, "punct", CODE XREF=build_charclass.isra.29+1487
000000000000d521         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
000000000000d524         call       j_strcmp                                    ; strcmp
000000000000d529         test       eax, eax
000000000000d52b         jne        loc_d5a4

000000000000d52d         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000d532         xor        ecx, ecx
000000000000d534         test       rbp, rbp
000000000000d537         mov        rsi, qword [rax]
000000000000d53a         mov        edx, 0x1
000000000000d53f         jne        loc_d56a

                     loc_d541:
000000000000d541         test       byte [rsi+rcx*2], 0x4                       ; CODE XREF=build_charclass.isra.29+1683
000000000000d545         je         loc_d558

000000000000d547         mov        rax, rcx
000000000000d54a         mov        rdi, rdx
000000000000d54d         sar        rax, 0x6
000000000000d551         shl        rdi, cl
000000000000d554         or         qword [rbx+rax*8], rdi

                     loc_d558:
000000000000d558         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1653
000000000000d55c         cmp        rcx, 0x100
000000000000d563         jne        loc_d541

000000000000d565         jmp        loc_cfb4

                     loc_d56a:
000000000000d56a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1647
000000000000d56c         mov        edi, 0x1

                     loc_d571:
000000000000d571         test       byte [rsi+rax*2], 0x4                       ; CODE XREF=build_charclass.isra.29+1741
000000000000d575         je         loc_d593

000000000000d577         movzx      ecx, byte [rbp+rax]
000000000000d57c         mov        r14, rdi
000000000000d57f         mov        rdx, rcx
000000000000d582         and        ecx, 0x3f
000000000000d585         shr        rdx, 0x3
000000000000d589         shl        r14, cl
000000000000d58c         and        edx, 0x18
000000000000d58f         or         qword [rbx+rdx], r14

                     loc_d593:
000000000000d593         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1701
000000000000d597         cmp        rax, 0x100
000000000000d59d         jne        loc_d571

000000000000d59f         jmp        loc_cfb4

                     loc_d5a4:
000000000000d5a4         lea        rsi, qword [aPunct+6]                       ; argument "__s2" for method j_strcmp, 0x176b5, CODE XREF=build_charclass.isra.29+1627
000000000000d5ab         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
000000000000d5ae         call       j_strcmp                                    ; strcmp
000000000000d5b3         test       eax, eax
000000000000d5b5         jne        loc_d630

000000000000d5b7         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000d5bc         xor        ecx, ecx
000000000000d5be         test       rbp, rbp
000000000000d5c1         mov        rsi, qword [rax]
000000000000d5c4         mov        edx, 0x1
000000000000d5c9         jne        loc_d5f5

                     loc_d5cb:
000000000000d5cb         test       byte [rsi+rcx*2+1], 0x10                    ; CODE XREF=build_charclass.isra.29+1822
000000000000d5d0         je         loc_d5e3

000000000000d5d2         mov        rax, rcx
000000000000d5d5         mov        rdi, rdx
000000000000d5d8         sar        rax, 0x6
000000000000d5dc         shl        rdi, cl
000000000000d5df         or         qword [rbx+rax*8], rdi

                     loc_d5e3:
000000000000d5e3         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1792
000000000000d5e7         cmp        rcx, 0x100
000000000000d5ee         jne        loc_d5cb

000000000000d5f0         jmp        loc_cfb4

                     loc_d5f5:
000000000000d5f5         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1785
000000000000d5f7         mov        edi, 0x1

                     loc_d5fc:
000000000000d5fc         test       byte [rsi+rax*2+1], 0x10                    ; CODE XREF=build_charclass.isra.29+1881
000000000000d601         je         loc_d61f

000000000000d603         movzx      ecx, byte [rbp+rax]
000000000000d608         mov        r9, rdi
000000000000d60b         mov        rdx, rcx
000000000000d60e         and        ecx, 0x3f
000000000000d611         shr        rdx, 0x3
000000000000d615         shl        r9, cl
000000000000d618         and        edx, 0x18
000000000000d61b         or         qword [rbx+rdx], r9

                     loc_d61f:
000000000000d61f         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1841
000000000000d623         cmp        rax, 0x100
000000000000d629         jne        loc_d5fc

000000000000d62b         jmp        loc_cfb4

                     loc_d630:
000000000000d630         mov        eax, 0x4                                    ; CODE XREF=build_charclass.isra.29+1765
000000000000d635         jmp        loc_cfb6

                     loc_d63a:
000000000000d63a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+704

                     loc_d63c:
000000000000d63c         test       byte [rdx+rax*2+1], 0x8                     ; CODE XREF=build_charclass.isra.29+1945
000000000000d641         je         loc_d65f

000000000000d643         movzx      ecx, byte [rbp+rax]
000000000000d648         mov        r14, rdi
000000000000d64b         mov        rsi, rcx
000000000000d64e         and        ecx, 0x3f
000000000000d651         shr        rsi, 0x3
000000000000d655         shl        r14, cl
000000000000d658         and        esi, 0x18
000000000000d65b         or         qword [rbx+rsi], r14

                     loc_d65f:
000000000000d65f         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1905
000000000000d663         cmp        rax, 0x100
000000000000d669         jne        loc_d63c

000000000000d66b         jmp        loc_cfb4

                     loc_d670:
000000000000d670         xor        edx, edx                                    ; CODE XREF=build_charclass.isra.29+1144

                     loc_d672:
000000000000d672         test       byte [rax+rdx*2+1], 0x1                     ; CODE XREF=build_charclass.isra.29+2000
000000000000d677         je         loc_d695

000000000000d679         movzx      ecx, byte [rbp+rdx]
000000000000d67e         mov        r9, rdi
000000000000d681         mov        rsi, rcx
000000000000d684         and        ecx, 0x3f
000000000000d687         shr        rsi, 0x3
000000000000d68b         shl        r9, cl
000000000000d68e         and        esi, 0x18
000000000000d691         or         qword [rbx+rsi], r9

                     loc_d695:
000000000000d695         add        rdx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1959
000000000000d699         cmp        rdx, 0x100
000000000000d6a0         jne        loc_d672

000000000000d6a2         jmp        loc_cfb4

                     loc_d6a7:
000000000000d6a7         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+991

                     loc_d6a9:
000000000000d6a9         test       byte [rdx+rax*2+1], 0x40                    ; CODE XREF=build_charclass.isra.29+2054
000000000000d6ae         je         loc_d6cc

000000000000d6b0         movzx      ecx, byte [rbp+rax]
000000000000d6b5         mov        r14, rdi
000000000000d6b8         mov        rsi, rcx
000000000000d6bb         and        ecx, 0x3f
000000000000d6be         shr        rsi, 0x3
000000000000d6c2         shl        r14, cl
000000000000d6c5         and        esi, 0x18
000000000000d6c8         or         qword [rbx+rsi], r14

                     loc_d6cc:
000000000000d6cc         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+2014
000000000000d6d0         cmp        rax, 0x100
000000000000d6d6         jne        loc_d6a9

000000000000d6d8         jmp        loc_cfb4
000000000000d6dd         align      32                                          ; End of unwind block (FDE at 0x1a050)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int8_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136


                     build_charclass_op:
000000000000d6e0         push       r15                                         ; Begin of unwind block (FDE at 0x1a094), CODE XREF=sub_13290+402
000000000000d6e2         push       r14
000000000000d6e4         mov        r14, rdx
000000000000d6e7         push       r13
000000000000d6e9         push       r12
000000000000d6eb         mov        r13, rcx
000000000000d6ee         push       rbp
000000000000d6ef         push       rbx
000000000000d6f0         mov        rbp, rdi
000000000000d6f3         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
000000000000d6f8         mov        r12d, r8d
000000000000d6fb         sub        rsp, 0x58
000000000000d6ff         mov        qword [rsp+0x88+var_88], rsi
000000000000d703         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
000000000000d708         mov        qword [rsp+0x88+var_80], r9
000000000000d70d         mov        rax, qword [fs:0x28]
000000000000d716         mov        qword [rsp+0x88+var_40], rax
000000000000d71b         xor        eax, eax
000000000000d71d         mov        qword [rsp+0x88+var_70], 0x0
000000000000d726         call       j_calloc                                    ; calloc
000000000000d72b         test       rax, rax
000000000000d72e         je         loc_d8f0

000000000000d734         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
000000000000d739         mov        edi, 0x50                                   ; argument "__nmemb" for method j_calloc
000000000000d73e         mov        rbx, rax
000000000000d741         call       j_calloc                                    ; calloc
000000000000d746         test       rax, rax
000000000000d749         mov        r15, rax
000000000000d74c         je         loc_d900

000000000000d752         movzx      eax, byte [rax+0x20]
000000000000d756         sub        rsp, 0x8
000000000000d75a         mov        edx, r12d
000000000000d75d         push       0x0
000000000000d75f         and        edx, 0x1
000000000000d762         mov        rdi, qword [rsp+0x98+var_88]
000000000000d767         lea        rcx, qword [r15+0x48]
000000000000d76b         mov        r9, r14
000000000000d76e         mov        rsi, rbx
000000000000d771         lea        r8, qword [rsp+0x98+var_70]
000000000000d776         and        eax, 0xfffffffe
000000000000d779         or         eax, edx
000000000000d77b         lea        rdx, qword [r15+0x18]
000000000000d77f         mov        byte [r15+0x20], al
000000000000d783         call       build_charclass.isra.29                     ; build_charclass.isra.29
000000000000d788         test       eax, eax
000000000000d78a         pop        rdx
000000000000d78b         pop        rcx
000000000000d78c         jne        loc_d920

000000000000d792         movsx      rcx, byte [r13]
000000000000d797         mov        esi, 0x1
000000000000d79c         test       cl, cl
000000000000d79e         je         loc_d7da

                     loc_d7a0:
000000000000d7a0         lea        rax, qword [rcx+0x3f]                       ; CODE XREF=build_charclass_op+248
000000000000d7a4         test       rcx, rcx
000000000000d7a7         mov        rdx, rcx
000000000000d7aa         cmovns     rax, rcx
000000000000d7ae         sar        rdx, 0x3f
000000000000d7b2         add        r13, 0x1
000000000000d7b6         shr        rdx, 0x3a
000000000000d7ba         sar        rax, 0x6
000000000000d7be         add        rcx, rdx
000000000000d7c1         and        ecx, 0x3f
000000000000d7c4         sub        rcx, rdx
000000000000d7c7         mov        rdx, rsi
000000000000d7ca         shl        rdx, cl
000000000000d7cd         movsx      rcx, byte [r13]
000000000000d7d2         or         qword [rbx+rax*8], rdx
000000000000d7d6         test       cl, cl
000000000000d7d8         jne        loc_d7a0

                     loc_d7da:
000000000000d7da         test       r12b, r12b                                  ; CODE XREF=build_charclass_op+190
000000000000d7dd         je         loc_d7f2

000000000000d7df         lea        rdx, qword [rbx+0x20]
000000000000d7e3         mov        rax, rbx

                     loc_d7e6:
000000000000d7e6         not        qword [rax]                                 ; CODE XREF=build_charclass_op+272
000000000000d7e9         add        rax, 0x8
000000000000d7ed         cmp        rdx, rax
000000000000d7f0         jne        loc_d7e6

                     loc_d7f2:
000000000000d7f2         cmp        dword [rbp+0xb4], 0x1                       ; CODE XREF=build_charclass_op+253
000000000000d7f9         jle        loc_d813

000000000000d7fb         mov        rcx, qword [rbp+0x78]
000000000000d7ff         xor        eax, eax

                     loc_d801:
000000000000d801         mov        rdx, qword [rcx+rax]                        ; CODE XREF=build_charclass_op+305
000000000000d805         and        qword [rbx+rax], rdx
000000000000d809         add        rax, 0x8
000000000000d80d         cmp        rax, 0x20
000000000000d811         jne        loc_d801

                     loc_d813:
000000000000d813         lea        r9, qword [rsp+0x88+var_68]                 ; CODE XREF=build_charclass_op+281
000000000000d818         lea        r12, qword [rbp+0x70]
000000000000d81c         lea        r13, qword [rbp+0x80]
000000000000d823         xor        ecx, ecx
000000000000d825         xor        edx, edx
000000000000d827         mov        byte [rsp+0x88+var_60], 0x3
000000000000d82c         mov        r8, r9
000000000000d82f         mov        rsi, r13
000000000000d832         mov        rdi, r12
000000000000d835         mov        qword [rsp+0x88+var_68], rbx
000000000000d83a         mov        qword [rsp+0x88+var_88], r9
000000000000d83e         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000d843         test       rax, rax
000000000000d846         mov        r14, rax
000000000000d849         je         loc_d8e0

000000000000d84f         cmp        dword [rbp+0xb4], 0x1
000000000000d856         jle        loc_d8d0

000000000000d858         or         byte [rbp+0xb0], 0x2
000000000000d85f         mov        r9, qword [rsp+0x88+var_88]
000000000000d863         xor        ecx, ecx
000000000000d865         xor        edx, edx
000000000000d867         mov        rsi, r13
000000000000d86a         mov        rdi, r12
000000000000d86d         mov        byte [rsp+0x88+var_60], 0x6
000000000000d872         mov        qword [rsp+0x88+var_68], r15
000000000000d877         mov        r8, r9
000000000000d87a         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000d87f         test       rax, rax
000000000000d882         je         loc_d8e0

000000000000d884         lea        r8, qword [rsp+0x88+var_58]
000000000000d889         mov        rdx, r14
000000000000d88c         mov        rcx, rax
000000000000d88f         mov        rsi, r13
000000000000d892         mov        rdi, r12
000000000000d895         mov        byte [rsp+0x88+var_50], 0xa
000000000000d89a         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000d89f         mov        r14, rax

                     loc_d8a2:
000000000000d8a2         mov        rdi, qword [rsp+0x88+var_40]                ; CODE XREF=build_charclass_op+504, build_charclass_op+542, build_charclass_op+566, build_charclass_op+608
000000000000d8a7         xor        rdi, qword [fs:0x28]
000000000000d8b0         mov        rax, r14
000000000000d8b3         jne        loc_d945

000000000000d8b9         add        rsp, 0x58
000000000000d8bd         pop        rbx
000000000000d8be         pop        rbp
000000000000d8bf         pop        r12
000000000000d8c1         pop        r13
000000000000d8c3         pop        r14
000000000000d8c5         pop        r15
000000000000d8c7         ret
                        ; endp
000000000000d8c8         align      16

                     loc_d8d0:
000000000000d8d0         mov        rdi, r15                                    ; CODE XREF=build_charclass_op+374
000000000000d8d3         call       free_charset                                ; free_charset
000000000000d8d8         jmp        loc_d8a2
000000000000d8da         align      32

                     loc_d8e0:
000000000000d8e0         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=build_charclass_op+361, build_charclass_op+418
000000000000d8e3         call       j_free                                      ; free
000000000000d8e8         mov        rdi, r15
000000000000d8eb         call       free_charset                                ; free_charset

                     loc_d8f0:
000000000000d8f0         mov        rax, qword [rsp+0x88+var_80]                ; CODE XREF=build_charclass_op+78
000000000000d8f5         xor        r14d, r14d
000000000000d8f8         mov        dword [rax], 0xc
000000000000d8fe         jmp        loc_d8a2

                     loc_d900:
000000000000d900         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=build_charclass_op+108
000000000000d903         xor        r14d, r14d
000000000000d906         call       j_free                                      ; free
000000000000d90b         mov        rax, qword [rsp+0x88+var_80]
000000000000d910         mov        dword [rax], 0xc
000000000000d916         jmp        loc_d8a2
000000000000d918         align      32

                     loc_d920:
000000000000d920         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=build_charclass_op+172
000000000000d923         mov        dword [rsp+0x88+var_88], eax
000000000000d926         xor        r14d, r14d
000000000000d929         call       j_free                                      ; free
000000000000d92e         mov        rdi, r15
000000000000d931         call       free_charset                                ; free_charset
000000000000d936         mov        rdi, qword [rsp+0x88+var_80]
000000000000d93b         mov        eax, dword [rsp+0x88+var_88]
000000000000d93e         mov        dword [rdi], eax
000000000000d940         jmp        loc_d8a2

                     loc_d945:
000000000000d945         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_charclass_op+467
                        ; endp
000000000000d94a         align      16                                          ; End of unwind block (FDE at 0x1a094)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_148: int8_t, -328
        ;    var_150: int8_t, -336
        ;    var_154: int32_t, -340
        ;    var_160: int64_t, -352
        ;    var_168: int64_t, -360
        ;    var_170: int64_t, -368
        ;    var_178: int64_t, -376
        ;    var_180: int64_t, -384
        ;    var_188: int64_t, -392
        ;    var_190: int64_t, -400
        ;    var_198: int64_t, -408
        ;    var_1A0: int64_t, -416
        ;    var_1A8: int64_t, -424


                     re_compile_fastmap_iter.isra.30:
000000000000d950         push       r15                                         ; Begin of unwind block (FDE at 0x1a0f4), CODE XREF=rpl_re_compile_fastmap+80, rpl_re_compile_fastmap+111, rpl_re_compile_fastmap+145, rpl_re_compile_fastmap+179
000000000000d952         push       r14
000000000000d954         mov        rax, rdi
000000000000d957         push       r13
000000000000d959         push       r12
000000000000d95b         push       rbp
000000000000d95c         push       rbx
000000000000d95d         xor        ebx, ebx
000000000000d95f         mov        rbp, rcx
000000000000d962         sub        rsp, 0x178
000000000000d969         mov        rax, qword [rax]
000000000000d96c         mov        qword [rsp+0x1a8+var_178], rdi
000000000000d971         mov        qword [rsp+0x1a8+var_188], rsi
000000000000d976         mov        rdi, qword [fs:0x28]
000000000000d97f         mov        qword [rsp+0x1a8+var_40], rdi
000000000000d987         xor        edi, edi
000000000000d989         cmp        dword [rax+0xb4], 0x1
000000000000d990         mov        qword [rsp+0x1a8+var_180], rdx
000000000000d995         mov        qword [rsp+0x1a8+var_1A0], rax
000000000000d99a         jne        loc_d9b3

000000000000d99c         mov        rax, qword [rsp+0x1a8+var_178]
000000000000d9a1         mov        rax, qword [rax+0x18]
000000000000d9a5         mov        rbx, rax
000000000000d9a8         mov        qword [rsp+0x1a8+var_1A8], rax
000000000000d9ac         shr        rbx, 0x16
000000000000d9b0         and        ebx, 0x1

                     loc_d9b3:
000000000000d9b3         mov        rax, qword [rsp+0x1a8+var_188]              ; CODE XREF=re_compile_fastmap_iter.isra.30+74
000000000000d9b8         cmp        qword [rax], 0x0
000000000000d9bc         jle        loc_ddcd

000000000000d9c2         lea        rax, qword [rsp+0x1a8+var_150]
000000000000d9c7         mov        qword [rsp+0x1a8+var_1A8], 0x0
000000000000d9cf         mov        qword [rsp+0x1a8+var_168], rax
000000000000d9d4         lea        rax, qword [rsp+0x1a8+var_154]
000000000000d9d9         mov        qword [rsp+0x1a8+var_160], rax
000000000000d9de         lea        rax, qword [rsp+0x1a8+var_148]
000000000000d9e3         mov        qword [rsp+0x1a8+var_170], rax
000000000000d9e8         jmp        loc_da2e
000000000000d9ea         align      16

                     loc_d9f0:
000000000000d9f0         cmp        eax, 0x3                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+271
000000000000d9f3         je         loc_dce6

000000000000d9f9         cmp        eax, 0x6
000000000000d9fc         je         loc_db88

000000000000da02         and        edx, 0xfffffffd
000000000000da05         cmp        dl, 0x5
000000000000da08         je         loc_de04

000000000000da0e         cmp        eax, 0x2
000000000000da11         je         loc_dd64

                     loc_da17:
000000000000da17         mov        rdi, qword [rsp+0x1a8+var_188]              ; CODE XREF=re_compile_fastmap_iter.isra.30+313, re_compile_fastmap_iter.isra.30+327, re_compile_fastmap_iter.isra.30+507, re_compile_fastmap_iter.isra.30+543, re_compile_fastmap_iter.isra.30+559, re_compile_fastmap_iter.isra.30+630, re_compile_fastmap_iter.isra.30+842, re_compile_fastmap_iter.isra.30+913, re_compile_fastmap_iter.isra.30+1028
000000000000da1c         add        qword [rsp+0x1a8+var_1A8], 0x1
000000000000da21         mov        rax, qword [rsp+0x1a8+var_1A8]
000000000000da25         cmp        rax, qword [rdi]
000000000000da28         jge        loc_ddcd

                     loc_da2e:
000000000000da2e         mov        rax, qword [rsp+0x1a8+var_180]              ; CODE XREF=re_compile_fastmap_iter.isra.30+152
000000000000da33         mov        rdi, qword [rsp+0x1a8+var_1A8]
000000000000da37         mov        rax, qword [rax]
000000000000da3a         mov        r12, qword [rax+rdi*8]
000000000000da3e         mov        rax, qword [rsp+0x1a8+var_1A0]
000000000000da43         mov        rcx, qword [rax]
000000000000da46         mov        rax, r12
000000000000da49         shl        rax, 0x4
000000000000da4d         mov        qword [rsp+0x1a8+var_198], rax
000000000000da52         lea        rsi, qword [rcx+rax]
000000000000da56         movzx      eax, byte [rsi+8]
000000000000da5a         cmp        eax, 0x1
000000000000da5d         mov        edx, eax
000000000000da5f         jne        loc_d9f0

000000000000da61         movzx      r13d, byte [rsi]
000000000000da65         test       ebx, ebx
000000000000da67         mov        byte [rbp+r13], 0x1
000000000000da6d         je         loc_da80

000000000000da6f         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
000000000000da74         mov        rax, qword [rax]
000000000000da77         movsxd     rax, dword [rax+r13*4]
000000000000da7b         mov        byte [rbp+rax], 0x1

                     loc_da80:
000000000000da80         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+285
000000000000da85         test       byte [rax+0x1a], 0x40
000000000000da89         je         loc_da17

000000000000da8b         mov        rsi, qword [rsp+0x1a8+var_1A0]
000000000000da90         cmp        dword [rsi+0xb4], 0x1
000000000000da97         jle        loc_da17

000000000000da9d         mov        rax, qword [rsi]
000000000000daa0         mov        rdi, qword [rsp+0x1a8+var_198]
000000000000daa5         movzx      edx, byte [rax+rdi]
000000000000daa9         mov        byte [rsp+0x1a8+var_148], dl
000000000000daad         lea        rdx, qword [r12+1]
000000000000dab2         cmp        qword [rsi+0x10], rdx
000000000000dab6         jbe        loc_ddf6

000000000000dabc         lea        rcx, qword [rax+rdi+0x10]
000000000000dac1         mov        eax, dword [rcx+8]
000000000000dac4         and        eax, 0x2000ff
000000000000dac9         cmp        eax, 0x200001
000000000000dace         jne        loc_ddf6

000000000000dad4         add        rdi, 0x20
000000000000dad8         mov        r13, rdi
000000000000dadb         mov        rdi, qword [rsp+0x1a8+var_170]
000000000000dae0         lea        rax, qword [rdi+1]
000000000000dae4         jmp        loc_db0b
000000000000dae6         align      16

                     loc_daf0:
000000000000daf0         mov        rcx, qword [rsi]                            ; CODE XREF=re_compile_fastmap_iter.isra.30+466
000000000000daf3         add        rcx, r13
000000000000daf6         add        r13, 0x10
000000000000dafa         mov        edx, dword [rcx+8]
000000000000dafd         and        edx, 0x2000ff
000000000000db03         cmp        edx, 0x200001
000000000000db09         jne        loc_db24

                     loc_db0b:
000000000000db0b         movzx      edx, byte [rcx]                             ; CODE XREF=re_compile_fastmap_iter.isra.30+404
000000000000db0e         add        rax, 0x1
000000000000db12         mov        byte [rax-1], dl
000000000000db15         mov        rdx, rax
000000000000db18         sub        rdx, rdi
000000000000db1b         add        rdx, r12
000000000000db1e         cmp        qword [rsi+0x10], rdx
000000000000db22         ja         loc_daf0

                     loc_db24:
000000000000db24         mov        rsi, qword [rsp+0x1a8+var_170]              ; CODE XREF=re_compile_fastmap_iter.isra.30+441, re_compile_fastmap_iter.isra.30+1199
000000000000db29         mov        rcx, qword [rsp+0x1a8+var_168]
000000000000db2e         mov        rdi, qword [rsp+0x1a8+var_160]
000000000000db33         sub        rax, rsi
000000000000db36         mov        qword [rcx], 0x0
000000000000db3d         mov        r12, rax
000000000000db40         mov        rdx, rax
000000000000db43         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000db48         cmp        r12, rax
000000000000db4b         jne        loc_da17

000000000000db51         mov        edi, dword [rsp+0x1a8+var_154]              ; argument "__wc" for method j_towlower
000000000000db55         call       j_towlower                                  ; towlower
000000000000db5a         mov        rdx, qword [rsp+0x1a8+var_168]              ; argument "__ps" for method j_wcrtomb
000000000000db5f         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
000000000000db64         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
000000000000db66         call       j_wcrtomb                                   ; wcrtomb
000000000000db6b         cmp        rax, 0xffffffffffffffff
000000000000db6f         je         loc_da17

000000000000db75         movzx      eax, byte [rsp+0x1a8+var_148]
000000000000db7a         mov        byte [rbp+rax], 0x1
000000000000db7f         jmp        loc_da17
000000000000db84         align      8

                     loc_db88:
000000000000db88         mov        rax, qword [rsp+0x1a8+var_1A0]              ; CODE XREF=re_compile_fastmap_iter.isra.30+172
000000000000db8d         mov        r12, qword [rsi]
000000000000db90         cmp        dword [rax+0xb4], 0x1
000000000000db97         jle        loc_dbbd

000000000000db99         cmp        qword [r12+0x48], 0x0
000000000000db9f         jne        loc_dc9f

000000000000dba5         test       byte [r12+0x20], 0x1
000000000000dbab         jne        loc_dc9f

000000000000dbb1         cmp        qword [r12+0x40], 0x0
000000000000dbb7         jne        loc_dc9f

                     loc_dbbd:
000000000000dbbd         xor        r13d, r13d                                  ; CODE XREF=re_compile_fastmap_iter.isra.30+583
000000000000dbc0         cmp        qword [r12+0x28], 0x0
000000000000dbc6         jle        loc_da17

000000000000dbcc         mov        r15, r12
000000000000dbcf         mov        r14, qword [rsp+0x1a8+var_168]
000000000000dbd4         mov        r12, rbp
000000000000dbd7         mov        rbp, r13
000000000000dbda         mov        r13d, ebx
000000000000dbdd         jmp        loc_dbed

                     loc_dbdf:
000000000000dbdf         add        rbp, 0x1                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+760, re_compile_fastmap_iter.isra.30+774, re_compile_fastmap_iter.isra.30+806
000000000000dbe3         cmp        rbp, qword [r15+0x28]
000000000000dbe7         jge        loc_dc94

                     loc_dbed:
000000000000dbed         mov        qword [r14], 0x0                            ; CODE XREF=re_compile_fastmap_iter.isra.30+653, re_compile_fastmap_iter.isra.30+830
000000000000dbf4         mov        rax, qword [r15]
000000000000dbf7         mov        rdx, r14                                    ; argument "__ps" for method j_wcrtomb
000000000000dbfa         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
000000000000dbff         lea        rbx, qword [rbp*4]
000000000000dc07         mov        esi, dword [rax+rbp*4]                      ; argument "__wc" for method j_wcrtomb
000000000000dc0a         call       j_wcrtomb                                   ; wcrtomb
000000000000dc0f         cmp        rax, 0xffffffffffffffff
000000000000dc13         je         loc_dc3f

000000000000dc15         movzx      edx, byte [rsp+0x1a8+var_148]
000000000000dc1a         test       r13d, r13d
000000000000dc1d         mov        byte [r12+rdx], 0x1
000000000000dc22         mov        qword [rsp+0x1a8+var_198], rdx
000000000000dc27         je         loc_dc3f

000000000000dc29         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
000000000000dc2e         mov        rdx, qword [rsp+0x1a8+var_198]
000000000000dc33         mov        rax, qword [rax]
000000000000dc36         movsxd     rax, dword [rax+rdx*4]
000000000000dc3a         mov        byte [r12+rax], 0x1

                     loc_dc3f:
000000000000dc3f         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+707, re_compile_fastmap_iter.isra.30+727
000000000000dc44         test       byte [rax+0x1a], 0x40
000000000000dc48         je         loc_dbdf

000000000000dc4a         mov        rax, qword [rsp+0x1a8+var_1A0]
000000000000dc4f         cmp        dword [rax+0xb4], 0x1
000000000000dc56         jle        loc_dbdf

000000000000dc58         mov        rax, qword [r15]
000000000000dc5b         mov        edi, dword [rax+rbx]                        ; argument "__wc" for method j_towlower
000000000000dc5e         call       j_towlower                                  ; towlower
000000000000dc63         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
000000000000dc68         mov        rdx, r14                                    ; argument "__ps" for method j_wcrtomb
000000000000dc6b         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
000000000000dc6d         call       j_wcrtomb                                   ; wcrtomb
000000000000dc72         cmp        rax, 0xffffffffffffffff
000000000000dc76         je         loc_dbdf

000000000000dc7c         movzx      eax, byte [rsp+0x1a8+var_148]
000000000000dc81         add        rbp, 0x1
000000000000dc85         mov        byte [r12+rax], 0x1
000000000000dc8a         cmp        rbp, qword [r15+0x28]
000000000000dc8e         jl         loc_dbed

                     loc_dc94:
000000000000dc94         mov        ebx, r13d                                   ; CODE XREF=re_compile_fastmap_iter.isra.30+663
000000000000dc97         mov        rbp, r12
000000000000dc9a         jmp        loc_da17

                     loc_dc9f:
000000000000dc9f         mov        r12, qword [rsp+0x1a8+var_168]              ; CODE XREF=re_compile_fastmap_iter.isra.30+591, re_compile_fastmap_iter.isra.30+603, re_compile_fastmap_iter.isra.30+615
000000000000dca4         mov        r13, qword [rsp+0x1a8+var_160]
000000000000dca9         mov        byte [rsp+0x1a8+var_154], 0x0
000000000000dcae         nop

                     loc_dcb0:
000000000000dcb0         xor        edi, edi                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+911
000000000000dcb2         mov        qword [r12], 0x0
000000000000dcba         mov        rcx, r12
000000000000dcbd         mov        edx, 0x1
000000000000dcc2         mov        rsi, r13
000000000000dcc5         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000dcca         cmp        rax, 0xfffffffffffffffe
000000000000dcce         jne        loc_dcda

000000000000dcd0         movzx      eax, byte [rsp+0x1a8+var_154]
000000000000dcd5         mov        byte [rbp+rax], 0x1

                     loc_dcda:
000000000000dcda         add        byte [rsp+0x1a8+var_154], 0x1               ; CODE XREF=re_compile_fastmap_iter.isra.30+894
000000000000dcdf         jne        loc_dcb0

000000000000dce1         jmp        loc_da17

                     loc_dce6:
000000000000dce6         mov        r13, rbp                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+163
000000000000dce9         xor        r12d, r12d
000000000000dcec         mov        qword [rsp+0x1a8+var_190], 0x0

                     loc_dcf5:
000000000000dcf5         mov        rax, qword [rsp+0x1a8+var_198]              ; CODE XREF=re_compile_fastmap_iter.isra.30+1042
000000000000dcfa         mov        rsi, qword [rsp+0x1a8+var_190]
000000000000dcff         xor        r14d, r14d
000000000000dd02         mov        rax, qword [rcx+rax]
000000000000dd06         mov        r15, qword [rax+rsi]
000000000000dd0a         nop        word [rax+rax]

                     loc_dd10:
000000000000dd10         bt         r15, r14                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+1005
000000000000dd14         jae        loc_dd35

000000000000dd16         test       ebx, ebx
000000000000dd18         mov        byte [r13+r14], 0x1
000000000000dd1e         je         loc_dd35

000000000000dd20         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
000000000000dd25         mov        rax, qword [rax]
000000000000dd28         lea        rdx, qword [r12+r14]
000000000000dd2c         movsxd     rax, dword [rax+rdx*4]
000000000000dd30         mov        byte [rbp+rax], 0x1

                     loc_dd35:
000000000000dd35         add        r14, 0x1                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+964, re_compile_fastmap_iter.isra.30+974
000000000000dd39         cmp        r14, 0x40
000000000000dd3d         jne        loc_dd10

000000000000dd3f         add        r12, 0x40
000000000000dd43         add        qword [rsp+0x1a8+var_190], 0x8
000000000000dd49         add        r13, 0x40
000000000000dd4d         cmp        r12, 0x100
000000000000dd54         je         loc_da17

000000000000dd5a         mov        rax, qword [rsp+0x1a8+var_1A0]
000000000000dd5f         mov        rcx, qword [rax]
000000000000dd62         jmp        loc_dcf5

                     loc_dd64:
000000000000dd64         movdqa     xmm0, xmmword [__re_error_msgid+384]        ; 0x17e80, CODE XREF=re_compile_fastmap_iter.isra.30+193
000000000000dd6c         movups     xmmword [rbp], xmm0
000000000000dd70         movups     xmmword [rbp+0x10], xmm0
000000000000dd74         movups     xmmword [rbp+0x20], xmm0
000000000000dd78         movups     xmmword [rbp+0x30], xmm0
000000000000dd7c         movups     xmmword [rbp+0x40], xmm0
000000000000dd80         movups     xmmword [rbp+0x50], xmm0
000000000000dd84         movups     xmmword [rbp+0x60], xmm0
000000000000dd88         movups     xmmword [rbp+0x70], xmm0
000000000000dd8c         movups     xmmword [rbp+0x80], xmm0
000000000000dd93         movups     xmmword [rbp+0x90], xmm0
000000000000dd9a         movups     xmmword [rbp+0xa0], xmm0
000000000000dda1         movups     xmmword [rbp+0xb0], xmm0
000000000000dda8         movups     xmmword [rbp+0xc0], xmm0
000000000000ddaf         movups     xmmword [rbp+0xd0], xmm0
000000000000ddb6         movups     xmmword [rbp+0xe0], xmm0
000000000000ddbd         movups     xmmword [rbp+0xf0], xmm0

                     loc_ddc4:
000000000000ddc4         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+1309
000000000000ddc9         or         byte [rax+0x38], 0x1

                     loc_ddcd:
000000000000ddcd         mov        rax, qword [rsp+0x1a8+var_40]               ; CODE XREF=re_compile_fastmap_iter.isra.30+108, re_compile_fastmap_iter.isra.30+216, re_compile_fastmap_iter.isra.30+1303
000000000000ddd5         xor        rax, qword [fs:0x28]
000000000000ddde         jne        loc_de72

000000000000dde4         add        rsp, 0x178
000000000000ddeb         pop        rbx
000000000000ddec         pop        rbp
000000000000dded         pop        r12
000000000000ddef         pop        r13
000000000000ddf1         pop        r14
000000000000ddf3         pop        r15
000000000000ddf5         ret
                        ; endp

                     loc_ddf6:
000000000000ddf6         mov        rax, qword [rsp+0x1a8+var_170]              ; CODE XREF=re_compile_fastmap_iter.isra.30+358, re_compile_fastmap_iter.isra.30+382
000000000000ddfb         add        rax, 0x1
000000000000ddff         jmp        loc_db24

                     loc_de04:
000000000000de04         movdqa     xmm0, xmmword [__re_error_msgid+384]        ; 0x17e80, CODE XREF=re_compile_fastmap_iter.isra.30+184
000000000000de0c         cmp        eax, 0x2
000000000000de0f         movups     xmmword [rbp], xmm0
000000000000de13         movups     xmmword [rbp+0x10], xmm0
000000000000de17         movups     xmmword [rbp+0x20], xmm0
000000000000de1b         movups     xmmword [rbp+0x30], xmm0
000000000000de1f         movups     xmmword [rbp+0x40], xmm0
000000000000de23         movups     xmmword [rbp+0x50], xmm0
000000000000de27         movups     xmmword [rbp+0x60], xmm0
000000000000de2b         movups     xmmword [rbp+0x70], xmm0
000000000000de2f         movups     xmmword [rbp+0x80], xmm0
000000000000de36         movups     xmmword [rbp+0x90], xmm0
000000000000de3d         movups     xmmword [rbp+0xa0], xmm0
000000000000de44         movups     xmmword [rbp+0xb0], xmm0
000000000000de4b         movups     xmmword [rbp+0xc0], xmm0
000000000000de52         movups     xmmword [rbp+0xd0], xmm0
000000000000de59         movups     xmmword [rbp+0xe0], xmm0
000000000000de60         movups     xmmword [rbp+0xf0], xmm0
000000000000de67         jne        loc_ddcd

000000000000de6d         jmp        loc_ddc4

                     loc_de72:
000000000000de72         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_compile_fastmap_iter.isra.30+1166
                        ; endp
000000000000de77         align      128                                         ; End of unwind block (FDE at 0x1a0f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_node_accept_bytes.isra.31:
000000000000de80         shl        rdx, 0x4                                    ; Begin of unwind block (FDE at 0x1a144), CODE XREF=check_arrival+597, set_regs+888, sift_states_backward+521, re_search_internal+3298
000000000000de84         push       r13
000000000000de86         push       r12
000000000000de88         lea        r9, qword [rdi+rdx]
000000000000de8c         push       rbp
000000000000de8d         push       rbx
000000000000de8e         sub        rsp, 0x8
000000000000de92         movzx      r11d, byte [r9+8]
000000000000de97         cmp        r11b, 0x7
000000000000de9b         je         loc_dfb0

000000000000dea1         cmp        dword [rcx+0x90], 0x1
000000000000dea8         je         loc_df70

000000000000deae         mov        rbx, rsi
000000000000deb1         mov        rdi, rcx
000000000000deb4         mov        rsi, r8
000000000000deb7         mov        r10, rcx
000000000000deba         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
000000000000debf         cmp        r11b, 0x5
000000000000dec3         mov        ebp, eax
000000000000dec5         je         loc_df80

000000000000decb         cmp        r11b, 0x6
000000000000decf         jne        loc_df70

000000000000ded5         cmp        eax, 0x1
000000000000ded8         jle        loc_df70

000000000000dede         mov        r13, qword [r9]
000000000000dee1         mov        rsi, qword [r13+0x40]
000000000000dee5         mov        rdx, qword [r13+0x28]
000000000000dee9         test       rsi, rsi
000000000000deec         jne        loc_def9

000000000000deee         cmp        qword [r13+0x48], 0x0
000000000000def3         je         loc_dfe8

                     loc_def9:
000000000000def9         mov        rax, qword [r10+0x10]                       ; CODE XREF=check_node_accept_bytes.isra.31+108, check_node_accept_bytes.isra.31+363
000000000000defd         test       rdx, rdx
000000000000df00         mov        r12d, dword [rax+r8*4]
000000000000df04         jle        loc_df27

000000000000df06         mov        rcx, qword [r13]
000000000000df0a         cmp        r12d, dword [rcx]
000000000000df0d         je         loc_df62

000000000000df0f         xor        eax, eax
000000000000df11         jmp        loc_df1e
000000000000df13         align      8

                     loc_df18:
000000000000df18         cmp        r12d, dword [rcx+rax*4]                     ; CODE XREF=check_node_accept_bytes.isra.31+165
000000000000df1c         je         loc_df62

                     loc_df1e:
000000000000df1e         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+145
000000000000df22         cmp        rax, rdx
000000000000df25         jne        loc_df18

                     loc_df27:
000000000000df27         mov        rax, qword [r13+0x48]                       ; CODE XREF=check_node_accept_bytes.isra.31+132
000000000000df2b         test       rax, rax
000000000000df2e         jle        loc_e00c

000000000000df34         xor        ebx, ebx
000000000000df36         jmp        loc_df4e
000000000000df38         align      64

                     loc_df40:
000000000000df40         add        rbx, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+224
000000000000df44         cmp        rbx, qword [r13+0x48]
000000000000df48         jge        loc_e008

                     loc_df4e:
000000000000df4e         mov        rax, qword [r13+0x18]                       ; CODE XREF=check_node_accept_bytes.isra.31+182
000000000000df52         mov        edi, r12d                                   ; argument "__wc" for method j_iswctype
000000000000df55         mov        rsi, qword [rax+rbx*8]                      ; argument "__desc" for method j_iswctype
000000000000df59         call       j_iswctype                                  ; iswctype
000000000000df5e         test       eax, eax
000000000000df60         je         loc_df40

                     loc_df62:
000000000000df62         test       byte [r13+0x20], 0x1                        ; CODE XREF=check_node_accept_bytes.isra.31+141, check_node_accept_bytes.isra.31+156, check_node_accept_bytes.isra.31+441
000000000000df67         je         loc_df72

000000000000df69         nop        dword [rax]

                     loc_df70:
000000000000df70         xor        ebp, ebp                                    ; CODE XREF=check_node_accept_bytes.isra.31+40, check_node_accept_bytes.isra.31+79, check_node_accept_bytes.isra.31+88, check_node_accept_bytes.isra.31+259, check_node_accept_bytes.isra.31+281, check_node_accept_bytes.isra.31+299, check_node_accept_bytes.isra.31+317, check_node_accept_bytes.isra.31+330, check_node_accept_bytes.isra.31+353, check_node_accept_bytes.isra.31+380, check_node_accept_bytes.isra.31+457

                     loc_df72:
000000000000df72         add        rsp, 0x8                                    ; CODE XREF=check_node_accept_bytes.isra.31+231, check_node_accept_bytes.isra.31+270, check_node_accept_bytes.isra.31+283, check_node_accept_bytes.isra.31+355, check_node_accept_bytes.isra.31+374, check_node_accept_bytes.isra.31+497
000000000000df76         mov        eax, ebp
000000000000df78         pop        rbx
000000000000df79         pop        rbp
000000000000df7a         pop        r12
000000000000df7c         pop        r13
000000000000df7e         ret
                        ; endp
000000000000df7f         align      128

                     loc_df80:
000000000000df80         cmp        eax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+69
000000000000df83         jle        loc_df70

000000000000df85         mov        rax, qword [rbx]
000000000000df88         test       al, 0x40
000000000000df8a         je         loc_dfa0

                     loc_df8c:
000000000000df8c         test       al, 0x80                                    ; CODE XREF=check_node_accept_bytes.isra.31+297
000000000000df8e         je         loc_df72

000000000000df90         mov        rax, qword [r10+8]
000000000000df94         cmp        byte [rax+r8], 0x0
000000000000df99         je         loc_df70

000000000000df9b         jmp        loc_df72
000000000000df9d         align      32

                     loc_dfa0:
000000000000dfa0         mov        rdx, qword [r10+8]                          ; CODE XREF=check_node_accept_bytes.isra.31+266
000000000000dfa4         cmp        byte [rdx+r8], 0xa
000000000000dfa9         jne        loc_df8c

000000000000dfab         jmp        loc_df70
000000000000dfad         align      16

                     loc_dfb0:
000000000000dfb0         mov        rdx, qword [rcx+8]                          ; CODE XREF=check_node_accept_bytes.isra.31+27
000000000000dfb4         lea        rsi, qword [rdx+r8]
000000000000dfb8         movzx      eax, byte [rsi]
000000000000dfbb         cmp        al, 0xc1
000000000000dfbd         jbe        loc_df70

000000000000dfbf         mov        rcx, qword [rcx+0x58]
000000000000dfc3         lea        rdi, qword [r8+1]
000000000000dfc7         cmp        rdi, rcx
000000000000dfca         jge        loc_df70

000000000000dfcc         cmp        al, 0xdf
000000000000dfce         movzx      edx, byte [rdx+r8+1]
000000000000dfd4         ja         loc_e03e

000000000000dfd6         add        edx, 0xffffff80
000000000000dfd9         mov        ebp, 0x2
000000000000dfde         cmp        dl, 0x3f
000000000000dfe1         ja         loc_df70

000000000000dfe3         jmp        loc_df72
000000000000dfe5         align      8

                     loc_dfe8:
000000000000dfe8         test       rdx, rdx                                    ; CODE XREF=check_node_accept_bytes.isra.31+115
000000000000dfeb         jne        loc_def9

                     loc_dff1:
000000000000dff1         test       byte [r13+0x20], 0x1                        ; CODE XREF=check_node_accept_bytes.isra.31+399, check_node_accept_bytes.isra.31+423
000000000000dff6         jne        loc_df72

000000000000dffc         jmp        loc_df70
000000000000e001         align      8

                     loc_e008:
000000000000e008         mov        rsi, qword [r13+0x40]                       ; CODE XREF=check_node_accept_bytes.isra.31+200

                     loc_e00c:
000000000000e00c         test       rsi, rsi                                    ; CODE XREF=check_node_accept_bytes.isra.31+174
000000000000e00f         jle        loc_dff1

000000000000e011         mov        rdx, qword [r13+8]
000000000000e015         xor        eax, eax
000000000000e017         jmp        loc_e029
000000000000e019         align      32

                     loc_e020:
000000000000e020         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+429, check_node_accept_bytes.isra.31+439
000000000000e024         cmp        rax, rsi
000000000000e027         je         loc_dff1

                     loc_e029:
000000000000e029         cmp        r12d, dword [rdx+rax*4]                     ; CODE XREF=check_node_accept_bytes.isra.31+407
000000000000e02d         jl         loc_e020

000000000000e02f         mov        rcx, qword [r13+0x10]
000000000000e033         cmp        r12d, dword [rcx+rax*4]
000000000000e037         jg         loc_e020

000000000000e039         jmp        loc_df62

                     loc_e03e:
000000000000e03e         cmp        al, 0xef                                    ; CODE XREF=check_node_accept_bytes.isra.31+340
000000000000e040         ja         loc_e088

000000000000e042         cmp        al, 0xe0
000000000000e044         jne        loc_e04f

000000000000e046         cmp        dl, 0x9f
000000000000e049         jbe        loc_df70

                     loc_e04f:
000000000000e04f         mov        ebp, 0x3                                    ; CODE XREF=check_node_accept_bytes.isra.31+452

                     loc_e054:
000000000000e054         movsxd     rdi, ebp                                    ; CODE XREF=check_node_accept_bytes.isra.31+542, check_node_accept_bytes.isra.31+566, check_node_accept_bytes.isra.31+594
000000000000e057         add        r8, rdi
000000000000e05a         cmp        rcx, r8
000000000000e05d         jl         loc_df70

000000000000e063         mov        eax, 0x1
000000000000e068         jmp        loc_e077

                     loc_e06a:
000000000000e06a         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+513
000000000000e06e         cmp        rdi, rax
000000000000e071         jle        loc_df72

                     loc_e077:
000000000000e077         movzx      ebx, byte [rsi+rax]                         ; CODE XREF=check_node_accept_bytes.isra.31+488
000000000000e07b         lea        edx, dword [rbx-0x80]
000000000000e07e         cmp        dl, 0x3f
000000000000e081         jbe        loc_e06a

000000000000e083         jmp        loc_df70

                     loc_e088:
000000000000e088         cmp        al, 0xf7                                    ; CODE XREF=check_node_accept_bytes.isra.31+448
000000000000e08a         ja         loc_e0a0

000000000000e08c         cmp        al, 0xf0
000000000000e08e         jne        loc_e099

000000000000e090         cmp        dl, 0x8f
000000000000e093         jbe        loc_df70

                     loc_e099:
000000000000e099         mov        ebp, 0x4                                    ; CODE XREF=check_node_accept_bytes.isra.31+526
000000000000e09e         jmp        loc_e054

                     loc_e0a0:
000000000000e0a0         cmp        al, 0xfb                                    ; CODE XREF=check_node_accept_bytes.isra.31+522
000000000000e0a2         ja         loc_e0b8

000000000000e0a4         cmp        al, 0xf8
000000000000e0a6         jne        loc_e0b1

000000000000e0a8         cmp        dl, 0x87
000000000000e0ab         jbe        loc_df70

                     loc_e0b1:
000000000000e0b1         mov        ebp, 0x5                                    ; CODE XREF=check_node_accept_bytes.isra.31+550
000000000000e0b6         jmp        loc_e054

                     loc_e0b8:
000000000000e0b8         cmp        al, 0xfd                                    ; CODE XREF=check_node_accept_bytes.isra.31+546
000000000000e0ba         ja         loc_df70

000000000000e0c0         cmp        al, 0xfc
000000000000e0c2         jne        loc_e0cd

000000000000e0c4         cmp        dl, 0x83
000000000000e0c7         jbe        loc_df70

                     loc_e0cd:
000000000000e0cd         mov        ebp, 0x6                                    ; CODE XREF=check_node_accept_bytes.isra.31+578
000000000000e0d2         jmp        loc_e054
000000000000e0d4         align      32                                          ; End of unwind block (FDE at 0x1a144)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int8_t, -88
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_80: int32_t, -128
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264


                     check_arrival:
000000000000e0e0         push       r15                                         ; Begin of unwind block (FDE at 0x1a180), CODE XREF=get_subexp_sub.isra.32+48, transit_state_bkref.isra.34+1675
000000000000e0e2         push       r14
000000000000e0e4         mov        r15, rdi
000000000000e0e7         push       r13
000000000000e0e9         push       r12
000000000000e0eb         push       rbp
000000000000e0ec         push       rbx
000000000000e0ed         mov        rbp, rcx
000000000000e0f0         mov        rbx, rdx
000000000000e0f3         sub        rsp, 0xd8
000000000000e0fa         mov        rcx, qword [rdi+0x98]
000000000000e101         mov        r13, qword [rsi+8]
000000000000e105         mov        rax, qword [fs:0x28]
000000000000e10e         mov        qword [rsp+0x108+var_40], rax
000000000000e116         xor        eax, eax
000000000000e118         mov        rax, rdx
000000000000e11b         mov        qword [rsp+0x108+var_A8], rsi
000000000000e120         mov        qword [rsp+0x108+var_90], r8
000000000000e125         shl        rax, 0x4
000000000000e129         add        rax, qword [rcx]
000000000000e12c         mov        qword [rsp+0x108+var_C8], r9
000000000000e131         mov        qword [rsp+0x108+var_D8], rcx
000000000000e136         mov        dword [rsp+0x108+var_80], 0x0
000000000000e141         mov        rax, qword [rax]
000000000000e144         mov        qword [rsp+0x108+var_C0], rax
000000000000e149         movsxd     rax, dword [rdi+0xe0]
000000000000e150         add        rax, r9
000000000000e153         cmp        rax, r13
000000000000e156         jge        loc_e776

                     loc_e15c:
000000000000e15c         mov        rax, qword [rsp+0x108+var_A8]               ; CODE XREF=check_arrival+1787
000000000000e161         mov        rdx, qword [r15+0xb8]
000000000000e168         mov        rcx, qword [r15+0x48]
000000000000e16c         mov        r12, qword [rax]
000000000000e16f         mov        r14, qword [rax+0x10]
000000000000e173         mov        qword [rsp+0x108+var_A0], rdx
000000000000e178         mov        qword [rsp+0x108+var_98], rcx
000000000000e17d         mov        edx, dword [r15+0xa0]
000000000000e184         test       r12, r12
000000000000e187         mov        qword [r15+0xb8], r14
000000000000e18e         je         loc_e570

000000000000e194         lea        rsi, qword [r12-1]
000000000000e199         mov        qword [r15+0x48], r12
000000000000e19d         mov        rdi, r15
000000000000e1a0         call       re_string_context_at                        ; re_string_context_at
000000000000e1a5         cmp        r12, rbp
000000000000e1a8         mov        r13d, eax
000000000000e1ab         je         loc_e583

000000000000e1b1         mov        rbp, qword [r14+r12*8]
000000000000e1b5         test       rbp, rbp
000000000000e1b8         je         loc_e1c4

000000000000e1ba         test       byte [rbp+0x68], 0x40
000000000000e1be         jne        loc_e6e0

                     loc_e1c4:
000000000000e1c4         pxor       xmm0, xmm0                                  ; CODE XREF=check_arrival+216
000000000000e1c8         mov        qword [rsp+0x108+var_68], 0x0
000000000000e1d4         movaps     xmmword [rsp+0x108+var_78], xmm0

                     loc_e1dc:
000000000000e1dc         cmp        r12, qword [rsp+0x108+var_C8]               ; CODE XREF=check_arrival+1575, check_arrival+1681
000000000000e1e1         jge        loc_e508

000000000000e1e7         mov        ecx, dword [r15+0xe0]
000000000000e1ee         test       ecx, ecx
000000000000e1f0         js         loc_e508

000000000000e1f6         lea        rbx, qword [rsp+0x108+var_78]
000000000000e1fe         lea        rax, qword [0x8+r12*8]
000000000000e206         mov        qword [rsp+0x108+var_108], r12
000000000000e20a         mov        qword [rsp+0x108+var_E8], 0x0
000000000000e213         mov        qword [rsp+0x108+var_100], rbx
000000000000e218         lea        rbx, qword [rsp+0x108+var_58]
000000000000e220         mov        qword [rsp+0x108+var_F8], rax
000000000000e225         mov        rax, qword [r15+0xb8]
000000000000e22c         mov        qword [rsp+0x108+var_F0], rbx
000000000000e231         lea        rbx, qword [rsp+0x108+var_7C]
000000000000e239         mov        qword [rsp+0x108+var_B0], rbx

                     loc_e23e:
000000000000e23e         mov        rcx, qword [rsp+0x108+var_F8]               ; CODE XREF=check_arrival+1058
000000000000e243         mov        qword [rsp+0x108+var_70], 0x0
000000000000e24f         mov        rsi, qword [rax+rcx]
000000000000e253         test       rsi, rsi
000000000000e256         je         loc_e618

000000000000e25c         mov        rdi, qword [rsp+0x108+var_100]
000000000000e261         add        rsi, 0x8
000000000000e265         call       re_node_set_merge                           ; re_node_set_merge
000000000000e26a         test       eax, eax
000000000000e26c         mov        dword [rsp+0x108+var_80], eax
000000000000e273         jne        loc_e650

000000000000e279         test       rbp, rbp
000000000000e27c         je         loc_e428

                     loc_e282:
000000000000e282         cmp        qword [rbp+0x28], 0x0                       ; CODE XREF=check_arrival+1339
000000000000e287         mov        rax, qword [rsp+0x108+var_F0]
000000000000e28c         pxor       xmm0, xmm0
000000000000e290         mov        r12, qword [r15+0x98]
000000000000e297         mov        dword [rsp+0x108+var_7C], 0x0
000000000000e2a2         mov        qword [rax+0x10], 0x0
000000000000e2aa         movaps     xmmword [rax], xmm0
000000000000e2ad         jle        loc_e7e0

000000000000e2b3         lea        rax, qword [r12+0xd8]
000000000000e2bb         xor        ebx, ebx
000000000000e2bd         mov        qword [rsp+0x108+var_E0], rax
000000000000e2c2         jmp        loc_e309
000000000000e2c4         align      8

                     loc_e2c8:
000000000000e2c8         mov        rdx, qword [rsp+0x108+var_108]              ; CODE XREF=check_arrival+580, check_arrival+1327
000000000000e2cc         mov        rdi, r15
000000000000e2cf         call       check_node_accept                           ; check_node_accept
000000000000e2d4         test       al, al
000000000000e2d6         je         loc_e2fb

                     loc_e2d8:
000000000000e2d8         lea        r13, qword [r14*8]                          ; CODE XREF=check_arrival+1314

                     loc_e2e0:
000000000000e2e0         mov        rax, qword [r12+0x18]                       ; CODE XREF=check_arrival+779, check_arrival+794
000000000000e2e5         mov        rdi, qword [rsp+0x108+var_100]
000000000000e2ea         mov        rsi, qword [rax+r13]
000000000000e2ee         call       re_node_set_insert                          ; re_node_set_insert
000000000000e2f3         test       al, al
000000000000e2f5         je         loc_e638

                     loc_e2fb:
000000000000e2fb         add        rbx, 0x1                                    ; CODE XREF=check_arrival+502
000000000000e2ff         cmp        rbx, qword [rbp+0x28]
000000000000e303         jge        loc_e690

                     loc_e309:
000000000000e309         mov        rax, qword [rbp+0x30]                       ; CODE XREF=check_arrival+482
000000000000e30d         mov        rdi, qword [r12]
000000000000e311         mov        r14, qword [rax+rbx*8]
000000000000e315         mov        r13, r14
000000000000e318         shl        r13, 0x4
000000000000e31c         lea        rsi, qword [rdi+r13]
000000000000e320         test       byte [rsi+0xa], 0x10
000000000000e324         je         loc_e2c8

000000000000e326         mov        r8, qword [rsp+0x108+var_108]
000000000000e32a         mov        rsi, qword [rsp+0x108+var_E0]
000000000000e32f         mov        rcx, r15
000000000000e332         mov        rdx, r14
000000000000e335         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000000e33a         cmp        eax, 0x1
000000000000e33d         jle        loc_e600

000000000000e343         cdqe
000000000000e345         add        rax, qword [rsp+0x108+var_108]
000000000000e349         mov        rdx, qword [r12+0x18]
000000000000e34e         lea        r13, qword [r14*8]
000000000000e356         mov        rdx, qword [rdx+r14*8]
000000000000e35a         mov        rcx, rax
000000000000e35d         mov        qword [rsp+0x108+var_D0], rax
000000000000e362         lea        r14, qword [rax*8]
000000000000e36a         mov        rax, qword [r15+0xb8]
000000000000e371         mov        rsi, qword [rax+rcx*8]
000000000000e375         mov        qword [rsp+0x108+var_50], 0x0
000000000000e381         test       rsi, rsi
000000000000e384         je         loc_e3a9

000000000000e386         mov        rdi, qword [rsp+0x108+var_F0]
000000000000e38b         add        rsi, 0x8
000000000000e38f         mov        qword [rsp+0x108+var_B8], rdx
000000000000e394         call       re_node_set_merge                           ; re_node_set_merge
000000000000e399         test       eax, eax
000000000000e39b         mov        dword [rsp+0x108+var_7C], eax
000000000000e3a2         mov        rdx, qword [rsp+0x108+var_B8]
000000000000e3a7         jne        loc_e400

                     loc_e3a9:
000000000000e3a9         mov        rdi, qword [rsp+0x108+var_F0]               ; CODE XREF=check_arrival+676
000000000000e3ae         mov        rsi, rdx
000000000000e3b1         call       re_node_set_insert                          ; re_node_set_insert
000000000000e3b6         test       al, al
000000000000e3b8         je         loc_e638

000000000000e3be         add        r14, qword [r15+0xb8]
000000000000e3c5         mov        rdx, qword [rsp+0x108+var_F0]
000000000000e3ca         mov        rsi, r12
000000000000e3cd         mov        rdi, qword [rsp+0x108+var_B0]
000000000000e3d2         call       re_acquire_state                            ; re_acquire_state
000000000000e3d7         mov        rdx, qword [rsp+0x108+var_D0]
000000000000e3dc         mov        qword [r14], rax
000000000000e3df         mov        rax, qword [r15+0xb8]
000000000000e3e6         cmp        qword [rax+rdx*8], 0x0
000000000000e3eb         jne        loc_e2e0

000000000000e3f1         mov        edx, dword [rsp+0x108+var_7C]
000000000000e3f8         test       edx, edx
000000000000e3fa         je         loc_e2e0

                     loc_e400:
000000000000e400         mov        rdi, qword [rsp+0x108+var_48]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+711
000000000000e408         call       j_free                                      ; free
000000000000e40d         mov        eax, dword [rsp+0x108+var_7C]
000000000000e414         test       eax, eax
000000000000e416         mov        dword [rsp+0x108+var_80], eax
000000000000e41d         jne        loc_e650

000000000000e423         nop        dword [rax+rax]

                     loc_e428:
000000000000e428         mov        rax, qword [rsp+0x108+var_108]              ; CODE XREF=check_arrival+412, check_arrival+1480
000000000000e42c         cmp        qword [rsp+0x108+var_70], 0x0
000000000000e435         lea        rbx, qword [rax+1]
000000000000e439         mov        r12, rbx
000000000000e43c         je         loc_e494

000000000000e43e         mov        ecx, dword [rsp+0x108+arg_0]
000000000000e445         mov        rdx, qword [rsp+0x108+var_C0]
000000000000e44a         mov        rsi, qword [rsp+0x108+var_100]
000000000000e44f         mov        rdi, qword [rsp+0x108+var_D8]
000000000000e454         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
000000000000e459         test       eax, eax
000000000000e45b         mov        dword [rsp+0x108+var_80], eax
000000000000e462         jne        loc_e650

000000000000e468         mov        r8d, dword [rsp+0x108+arg_0]
000000000000e470         mov        rcx, qword [rsp+0x108+var_C0]
000000000000e475         mov        rdx, rbx
000000000000e478         mov        rsi, qword [rsp+0x108+var_100]
000000000000e47d         mov        rdi, r15
000000000000e480         call       expand_bkref_cache                          ; expand_bkref_cache
000000000000e485         test       eax, eax
000000000000e487         mov        dword [rsp+0x108+var_80], eax
000000000000e48e         jne        loc_e650

                     loc_e494:
000000000000e494         mov        edx, dword [r15+0xa0]                       ; CODE XREF=check_arrival+860, check_arrival+1356
000000000000e49b         mov        rsi, qword [rsp+0x108+var_108]
000000000000e49f         mov        rdi, r15
000000000000e4a2         call       re_string_context_at                        ; re_string_context_at
000000000000e4a7         mov        rdx, qword [rsp+0x108+var_100]
000000000000e4ac         mov        rsi, qword [rsp+0x108+var_D8]
000000000000e4b1         lea        rdi, qword [rsp+0x108+var_80]
000000000000e4b9         mov        ecx, eax
000000000000e4bb         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000e4c0         test       rax, rax
000000000000e4c3         mov        rbp, rax
000000000000e4c6         je         loc_e6b0

000000000000e4cc         mov        rax, qword [r15+0xb8]
000000000000e4d3         mov        rdx, qword [rsp+0x108+var_F8]
000000000000e4d8         mov        qword [rsp+0x108+var_E8], 0x0
000000000000e4e1         mov        qword [rax+rdx], rbp

                     loc_e4e5:
000000000000e4e5         cmp        qword [rsp+0x108+var_C8], rbx               ; CODE XREF=check_arrival+1525
000000000000e4ea         jle        loc_e508

000000000000e4ec         movsxd     rdx, dword [r15+0xe0]
000000000000e4f3         add        qword [rsp+0x108+var_F8], 0x8
000000000000e4f9         cmp        rdx, qword [rsp+0x108+var_E8]
000000000000e4fe         mov        qword [rsp+0x108+var_108], rbx
000000000000e502         jge        loc_e23e

                     loc_e508:
000000000000e508         mov        rdi, qword [rsp+0x108+var_68]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+257, check_arrival+272, check_arrival+1034
000000000000e510         call       j_free                                      ; free
000000000000e515         mov        rax, qword [r15+0xb8]
000000000000e51c         mov        rbx, qword [rsp+0x108+var_C8]
000000000000e521         mov        rax, qword [rax+rbx*8]
000000000000e525         test       rax, rax
000000000000e528         je         loc_e805

000000000000e52e         mov        rbx, qword [rsp+0x108+var_A8]
000000000000e533         mov        rdx, qword [rsp+0x108+var_90]
000000000000e538         lea        rsi, qword [rax+0x18]
000000000000e53c         mov        qword [rbx], r12
000000000000e53f         mov        rbx, qword [rsp+0x108+var_A0]
000000000000e544         mov        qword [r15+0xb8], rbx
000000000000e54b         mov        rbx, qword [rsp+0x108+var_98]
000000000000e550         mov        qword [r15+0x48], rbx
000000000000e554         mov        rdi, qword [rax+0x10]
000000000000e558         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000e55d         test       rax, rax
000000000000e560         sete       al
000000000000e563         movzx      eax, al
000000000000e566         jmp        loc_e664
000000000000e56b         align      16

                     loc_e570:
000000000000e570         lea        rsi, qword [rbp-1]                          ; CODE XREF=check_arrival+174
000000000000e574         mov        qword [r15+0x48], rbp
000000000000e578         mov        rdi, r15
000000000000e57b         call       re_string_context_at                        ; re_string_context_at
000000000000e580         mov        r13d, eax

                     loc_e583:
000000000000e583         mov        edi, 0x8                                    ; argument "__size" for method j_malloc, CODE XREF=check_arrival+203
000000000000e588         mov        qword [rsp+0x108+var_78], 0x1
000000000000e594         mov        qword [rsp+0x108+var_70], 0x1
000000000000e5a0         call       j_malloc                                    ; malloc
000000000000e5a5         test       rax, rax
000000000000e5a8         mov        qword [rsp+0x108+var_68], rax
000000000000e5b0         je         loc_e7fb

000000000000e5b6         mov        qword [rax], rbx
000000000000e5b9         mov        ecx, dword [rsp+0x108+arg_0]
000000000000e5c0         lea        rbx, qword [rsp+0x108+var_78]
000000000000e5c8         mov        rdx, qword [rsp+0x108+var_C0]
000000000000e5cd         mov        rdi, qword [rsp+0x108+var_D8]
000000000000e5d2         mov        r12, rbp
000000000000e5d5         mov        rsi, rbx
000000000000e5d8         mov        dword [rsp+0x108+var_80], 0x0
000000000000e5e3         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
000000000000e5e8         test       eax, eax
000000000000e5ea         mov        dword [rsp+0x108+var_80], eax
000000000000e5f1         je         loc_e70d

000000000000e5f7         jmp        loc_e650
000000000000e5f9         align      512

                     loc_e600:
000000000000e600         test       eax, eax                                    ; CODE XREF=check_arrival+605
000000000000e602         jne        loc_e2d8

000000000000e608         mov        rsi, qword [r12]
000000000000e60c         add        rsi, r13
000000000000e60f         jmp        loc_e2c8
000000000000e614         align      8

                     loc_e618:
000000000000e618         test       rbp, rbp                                    ; CODE XREF=check_arrival+374
000000000000e61b         jne        loc_e282

000000000000e621         mov        rax, qword [rsp+0x108+var_108]
000000000000e625         lea        rbx, qword [rax+1]
000000000000e629         mov        r12, rbx
000000000000e62c         jmp        loc_e494
000000000000e631         align      8

                     loc_e638:
000000000000e638         mov        rdi, qword [rsp+0x108+var_48]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+533, check_arrival+728
000000000000e640         call       j_free                                      ; free
000000000000e645         mov        dword [rsp+0x108+var_80], 0xc

                     loc_e650:
000000000000e650         mov        rdi, qword [rsp+0x108+var_68]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+403, check_arrival+829, check_arrival+898, check_arrival+942, check_arrival+1303, check_arrival+1497, check_arrival+1628, check_arrival+1814
000000000000e658         call       j_free                                      ; free
000000000000e65d         mov        eax, dword [rsp+0x108+var_80]

                     loc_e664:
000000000000e664         mov        rbx, qword [rsp+0x108+var_40]               ; CODE XREF=check_arrival+1158, check_arrival+1565, check_arrival+1824, check_arrival+1863
000000000000e66c         xor        rbx, qword [fs:0x28]
000000000000e675         jne        loc_e82c

000000000000e67b         add        rsp, 0xd8
000000000000e682         pop        rbx
000000000000e683         pop        rbp
000000000000e684         pop        r12
000000000000e686         pop        r13
000000000000e688         pop        r14
000000000000e68a         pop        r15
000000000000e68c         ret
                        ; endp
000000000000e68d         align      16

                     loc_e690:
000000000000e690         mov        rdi, qword [rsp+0x108+var_48]               ; CODE XREF=check_arrival+547

                     loc_e698:
000000000000e698         call       j_free                                      ; free, CODE XREF=check_arrival+1794
000000000000e69d         mov        dword [rsp+0x108+var_80], 0x0
000000000000e6a8         jmp        loc_e428
000000000000e6ad         align      16

                     loc_e6b0:
000000000000e6b0         mov        eax, dword [rsp+0x108+var_80]               ; CODE XREF=check_arrival+998
000000000000e6b7         test       eax, eax
000000000000e6b9         jne        loc_e650

000000000000e6bb         mov        rax, qword [r15+0xb8]
000000000000e6c2         mov        rdx, qword [rsp+0x108+var_F8]
000000000000e6c7         add        qword [rsp+0x108+var_E8], 0x1
000000000000e6cd         mov        qword [rax+rdx], 0x0
000000000000e6d5         jmp        loc_e4e5
000000000000e6da         align      32

                     loc_e6e0:
000000000000e6e0         lea        rbx, qword [rsp+0x108+var_78]               ; CODE XREF=check_arrival+222
000000000000e6e8         lea        rsi, qword [rbp+8]
000000000000e6ec         mov        rdi, rbx
000000000000e6ef         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000e6f4         test       eax, eax
000000000000e6f6         mov        dword [rsp+0x108+var_80], eax
000000000000e6fd         jne        loc_e664

000000000000e703         test       byte [rbp+0x68], 0x40
000000000000e707         je         loc_e1dc

                     loc_e70d:
000000000000e70d         cmp        qword [rsp+0x108+var_70], 0x0               ; CODE XREF=check_arrival+1297
000000000000e716         je         loc_e742

000000000000e718         mov        r8d, dword [rsp+0x108+arg_0]
000000000000e720         mov        rcx, qword [rsp+0x108+var_C0]
000000000000e725         mov        rdx, r12
000000000000e728         mov        rsi, rbx
000000000000e72b         mov        rdi, r15
000000000000e72e         call       expand_bkref_cache                          ; expand_bkref_cache
000000000000e733         test       eax, eax
000000000000e735         mov        dword [rsp+0x108+var_80], eax
000000000000e73c         jne        loc_e650

                     loc_e742:
000000000000e742         mov        rsi, qword [rsp+0x108+var_D8]               ; CODE XREF=check_arrival+1590
000000000000e747         lea        rdi, qword [rsp+0x108+var_80]
000000000000e74f         mov        ecx, r13d
000000000000e752         mov        rdx, rbx
000000000000e755         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000e75a         test       rax, rax
000000000000e75d         mov        rbp, rax
000000000000e760         je         loc_e7e7

                     loc_e766:
000000000000e766         mov        rax, qword [r15+0xb8]                       ; CODE XREF=check_arrival+1808
000000000000e76d         mov        qword [rax+r12*8], rbp
000000000000e771         jmp        loc_e1dc

                     loc_e776:
000000000000e776         lea        r12, qword [rax+1]                          ; CODE XREF=check_arrival+118
000000000000e77a         movabs     rax, 0x7fffffffffffffff
000000000000e784         sub        rax, r13
000000000000e787         cmp        rax, r12
000000000000e78a         jl         loc_e7fb

000000000000e78c         lea        r14, qword [r13+r12]
000000000000e791         movabs     rax, 0x1fffffffffffffff
000000000000e79b         cmp        r14, rax
000000000000e79e         ja         loc_e7fb

000000000000e7a0         mov        rax, qword [rsp+0x108+var_A8]
000000000000e7a5         lea        rsi, qword [r14*8]                          ; argument "__size" for method j_realloc
000000000000e7ad         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_realloc
000000000000e7b1         call       j_realloc                                   ; realloc
000000000000e7b6         test       rax, rax
000000000000e7b9         je         loc_e7fb

000000000000e7bb         mov        rcx, qword [rsp+0x108+var_A8]
000000000000e7c0         lea        rdx, qword [r12*8]                          ; argument "__n" for method j_memset
000000000000e7c8         lea        rdi, qword [rax+r13*8]                      ; argument "__s" for method j_memset
000000000000e7cc         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000e7ce         mov        qword [rcx+0x10], rax
000000000000e7d2         mov        qword [rcx+8], r14
000000000000e7d6         call       j_memset                                    ; memset
000000000000e7db         jmp        loc_e15c

                     loc_e7e0:
000000000000e7e0         xor        edi, edi                                    ; CODE XREF=check_arrival+461
000000000000e7e2         jmp        loc_e698

                     loc_e7e7:
000000000000e7e7         mov        esi, dword [rsp+0x108+var_80]               ; CODE XREF=check_arrival+1664
000000000000e7ee         test       esi, esi
000000000000e7f0         je         loc_e766

000000000000e7f6         jmp        loc_e650

                     loc_e7fb:
000000000000e7fb         mov        eax, 0xc                                    ; CODE XREF=check_arrival+1232, check_arrival+1706, check_arrival+1726, check_arrival+1753
000000000000e800         jmp        loc_e664

                     loc_e805:
000000000000e805         mov        rax, qword [rsp+0x108+var_A8]               ; CODE XREF=check_arrival+1096
000000000000e80a         mov        qword [rax], r12
000000000000e80d         mov        rax, qword [rsp+0x108+var_A0]
000000000000e812         mov        qword [r15+0xb8], rax
000000000000e819         mov        rax, qword [rsp+0x108+var_98]
000000000000e81e         mov        qword [r15+0x48], rax
000000000000e822         mov        eax, 0x1
000000000000e827         jmp        loc_e664

                     loc_e82c:
000000000000e82c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=check_arrival+1429
                        ; endp
000000000000e831         align      64                                          ; End of unwind block (FDE at 0x1a180)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int8_t, -112
        ;    var_78: int64_t, -120
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_C9: int8_t, -201
        ;    var_D1: int8_t, -209
        ;    var_D8: int64_t, -216


                     set_regs:
000000000000e840         push       rbp                                         ; Begin of unwind block (FDE at 0x1a1d0), CODE XREF=re_search_internal+4945
000000000000e841         mov        rbp, rsp
000000000000e844         push       r15
000000000000e846         push       r14
000000000000e848         push       r13
000000000000e84a         push       r12
000000000000e84c         mov        r13, rcx
000000000000e84f         push       rbx
000000000000e850         mov        r12, rsi
000000000000e853         sub        rsp, 0xb8
000000000000e85a         mov        qword [rbp+var_98], rdx
000000000000e861         mov        qword [rbp+var_50], 0x0
000000000000e869         mov        rax, qword [fs:0x28]
000000000000e872         mov        qword [rbp+var_38], rax
000000000000e876         xor        eax, eax
000000000000e878         mov        rax, qword [rdi]
000000000000e87b         test       r8b, r8b
000000000000e87e         mov        qword [rbp+var_48], 0x2
000000000000e886         mov        qword [rbp+var_40], 0x0
000000000000e88e         mov        qword [rbp+var_90], rax
000000000000e895         je         loc_f03d

000000000000e89b         mov        edi, 0x60                                   ; argument "__size" for method j_malloc
000000000000e8a0         call       j_malloc                                    ; malloc
000000000000e8a5         lea        rcx, qword [rbp+var_50]
000000000000e8a9         test       rax, rax
000000000000e8ac         mov        qword [rbp+var_40], rax
000000000000e8b0         mov        qword [rbp+var_88], rcx
000000000000e8b7         je         loc_efdc

                     loc_e8bd:
000000000000e8bd         mov        rax, qword [rbp+var_90]                     ; CODE XREF=set_regs+2056
000000000000e8c4         pxor       xmm0, xmm0
000000000000e8c8         mov        qword [rbp+var_60], 0x0
000000000000e8d0         mov        rbx, qword [rax+0x90]
000000000000e8d7         mov        rax, qword [rbp+var_98]
000000000000e8de         movaps     xmmword [rbp+var_70], xmm0
000000000000e8e2         shl        rax, 0x4
000000000000e8e6         cmp        rax, 0xfbf
000000000000e8ec         mov        qword [rbp+var_B8], rax
000000000000e8f3         ja         loc_efe6

000000000000e8f9         add        rax, 0x10
000000000000e8fd         mov        byte [rbp+var_C9], 0x0
000000000000e904         sub        rsp, rax
000000000000e907         lea        rax, qword [rsp+0xe0+var_D1]
000000000000e90c         and        rax, 0xfffffffffffffff0
000000000000e910         mov        qword [rbp+var_C0], rax

                     loc_e917:
000000000000e917         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+1987
000000000000e91e         mov        rdi, qword [rbp+var_C0]                     ; argument "__dest" for method j_memcpy
000000000000e925         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
000000000000e928         call       j_memcpy                                    ; memcpy
000000000000e92d         lea        rax, qword [rbp+var_70]
000000000000e931         mov        rcx, qword [r13]
000000000000e935         mov        qword [rbp+var_A8], rax
000000000000e93c         add        rax, 0x10
000000000000e940         mov        qword [rbp+var_78], rcx
000000000000e944         mov        qword [rbp+var_C8], rax

                     loc_e94b:
000000000000e94b         lea        rax, qword [rbp+var_78]                     ; CODE XREF=set_regs+1554
000000000000e94f         mov        qword [rbp+var_B0], rax
000000000000e956         jmp        loc_ea39
000000000000e95b         align      32

                     loc_e960:
000000000000e960         cmp        esi, 0x9                                    ; CODE XREF=set_regs+548
000000000000e963         je         loc_eb50

                     loc_e969:
000000000000e969         cmp        rax, rcx                                    ; CODE XREF=set_regs+568, set_regs+596, set_regs+798, set_regs+854, set_regs+1770, set_regs+1901
000000000000e96c         jne        loc_e97c

000000000000e96e         cmp        qword [r12+0xb0], rbx
000000000000e976         je         loc_ed50

                     loc_e97c:
000000000000e97c         mov        r14, qword [r12+0x98]                       ; CODE XREF=set_regs+300, set_regs+1477
000000000000e984         mov        rdi, qword [r14]
000000000000e987         lea        rsi, qword [rdi+r9]
000000000000e98b         movzx      eax, byte [rsi+8]
000000000000e98f         test       al, 0x8
000000000000e991         jne        loc_eaa0

000000000000e997         test       byte [rsi+0xa], 0x10
000000000000e99b         jne        loc_eba0

000000000000e9a1         cmp        al, 0x4
000000000000e9a3         je         loc_ebe0

000000000000e9a9         mov        rcx, qword [rbp+var_78]

                     loc_e9ad:
000000000000e9ad         mov        rdx, rcx                                    ; CODE XREF=set_regs+922, set_regs+1701
000000000000e9b0         mov        rdi, r12
000000000000e9b3         mov        qword [rbp+var_A0], rcx
000000000000e9ba         call       check_node_accept                           ; check_node_accept
000000000000e9bf         test       al, al
000000000000e9c1         mov        rcx, qword [rbp+var_A0]
000000000000e9c8         je         loc_ee18

000000000000e9ce         mov        rax, qword [r14+0x18]
000000000000e9d2         lea        rdx, qword [rcx+1]
000000000000e9d6         mov        rbx, qword [rax+r15*8]

                     loc_e9da:
000000000000e9da         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+1073
000000000000e9e2         mov        qword [rbp+var_78], rdx
000000000000e9e6         je         loc_ea24

000000000000e9e8         cmp        rdx, qword [r12+0xa8]
000000000000e9f0         jg         loc_ee26

000000000000e9f6         mov        rax, qword [r12+0xb8]
000000000000e9fe         mov        rax, qword [rax+rdx*8]
000000000000ea02         test       rax, rax
000000000000ea05         je         loc_ee26

000000000000ea0b         mov        rdi, qword [rax+0x10]
000000000000ea0f         lea        rsi, qword [rax+0x18]
000000000000ea13         mov        rdx, rbx
000000000000ea16         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000ea1b         test       rax, rax
000000000000ea1e         je         loc_ee26

                     loc_ea24:
000000000000ea24         mov        qword [rbp+var_68], 0x0                     ; CODE XREF=set_regs+422

                     loc_ea2c:
000000000000ea2c         test       rbx, rbx                                    ; CODE XREF=set_regs+772, set_regs+1136, set_regs+1244, set_regs+1571, set_regs+1675
000000000000ea2f         js         loc_ee0a

000000000000ea35         mov        rcx, qword [rbp+var_78]

                     loc_ea39:
000000000000ea39         mov        rax, qword [r13+8]                          ; CODE XREF=set_regs+278
000000000000ea3d         cmp        rax, rcx
000000000000ea40         jl         loc_ef30

000000000000ea46         mov        rdi, qword [rbp+var_90]
000000000000ea4d         mov        r9, rbx
000000000000ea50         mov        r15, rbx
000000000000ea53         shl        r9, 0x4
000000000000ea57         mov        rdx, qword [rdi]
000000000000ea5a         add        rdx, r9
000000000000ea5d         movzx      esi, byte [rdx+8]
000000000000ea61         cmp        esi, 0x8
000000000000ea64         jne        loc_e960

000000000000ea6a         mov        rdx, qword [rdx]
000000000000ea6d         add        rdx, 0x1
000000000000ea71         cmp        qword [rbp+var_98], rdx
000000000000ea78         jle        loc_e969

000000000000ea7e         shl        rdx, 0x4
000000000000ea82         add        rdx, r13
000000000000ea85         mov        qword [rdx+8], 0xffffffffffffffff
000000000000ea8d         mov        qword [rdx], rcx
000000000000ea90         mov        rax, qword [r13+8]
000000000000ea94         jmp        loc_e969
000000000000ea99         align      32

                     loc_eaa0:
000000000000eaa0         mov        rax, qword [r12+0xb8]                       ; CODE XREF=set_regs+337
000000000000eaa8         mov        rdx, qword [rbp+var_78]
000000000000eaac         mov        rsi, rbx
000000000000eaaf         mov        rdi, qword [rbp+var_A8]
000000000000eab6         mov        r9, qword [rax+rdx*8]
000000000000eaba         mov        rax, qword [r14+0x28]
000000000000eabe         lea        rdx, qword [rbx+rbx*2]
000000000000eac2         mov        qword [rbp+var_A0], r9
000000000000eac9         lea        r15, qword [rax+rdx*8]
000000000000eacd         call       re_node_set_insert                          ; re_node_set_insert
000000000000ead2         test       al, al
000000000000ead4         mov        r9, qword [rbp+var_A0]
000000000000eadb         je         loc_efb8

000000000000eae1         mov        r10, qword [r15+8]
000000000000eae5         test       r10, r10
000000000000eae8         jle        loc_ee18

000000000000eaee         mov        r15, qword [r15+0x10]
000000000000eaf2         mov        r11, qword [r9+0x10]
000000000000eaf6         lea        r14, qword [r9+0x18]
000000000000eafa         mov        rbx, 0xffffffffffffffff
000000000000eb01         xor        r9d, r9d
000000000000eb04         mov        qword [rbp+var_A0], r12
000000000000eb0b         nop        dword [rax+rax]

                     loc_eb10:
000000000000eb10         mov        r12, qword [r15+r9*8]                       ; CODE XREF=set_regs+763
000000000000eb14         mov        rsi, r14
000000000000eb17         mov        rdi, r11
000000000000eb1a         mov        rdx, r12
000000000000eb1d         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000eb22         test       rax, rax
000000000000eb25         je         loc_eb34

000000000000eb27         cmp        rbx, 0xffffffffffffffff
000000000000eb2b         jne        loc_ec80

000000000000eb31         mov        rbx, r12

                     loc_eb34:
000000000000eb34         add        r9, 0x1                                     ; CODE XREF=set_regs+741
000000000000eb38         cmp        r10, r9
000000000000eb3b         jne        loc_eb10

000000000000eb3d         mov        r12, qword [rbp+var_A0]
000000000000eb44         jmp        loc_ea2c
000000000000eb49         align      16

                     loc_eb50:
000000000000eb50         mov        rdi, qword [rdx]                            ; CODE XREF=set_regs+291
000000000000eb53         lea        rsi, qword [rdi+1]
000000000000eb57         cmp        qword [rbp+var_98], rsi
000000000000eb5e         jle        loc_e969

000000000000eb64         shl        rsi, 0x4
000000000000eb68         lea        rax, qword [r13+rsi]
000000000000eb6d         cmp        qword [rax], rcx
000000000000eb70         jl         loc_eef0

000000000000eb76         test       byte [rdx+0xa], 0x8
000000000000eb7a         je         loc_eb8e

000000000000eb7c         mov        rdi, qword [rbp+var_C0]
000000000000eb83         cmp        qword [rdi+rsi], 0xffffffffffffffff
000000000000eb88         jne        loc_ef7b

                     loc_eb8e:
000000000000eb8e         mov        qword [rax+8], rcx                          ; CODE XREF=set_regs+826
000000000000eb92         mov        rax, qword [r13+8]
000000000000eb96         jmp        loc_e969
000000000000eb9b         align      32

                     loc_eba0:
000000000000eba0         mov        r8, qword [rbp+var_78]                      ; CODE XREF=set_regs+347
000000000000eba4         lea        rsi, qword [r14+0xd8]
000000000000ebab         mov        rcx, r12
000000000000ebae         mov        rdx, rbx
000000000000ebb1         mov        qword [rbp+var_A0], r9
000000000000ebb8         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000000ebbd         movsxd     rcx, eax
000000000000ebc0         test       rcx, rcx
000000000000ebc3         jne        loc_edc1

000000000000ebc9         mov        r9, qword [rbp+var_A0]
000000000000ebd0         mov        rsi, qword [r14]
000000000000ebd3         mov        rcx, qword [rbp+var_78]
000000000000ebd7         add        rsi, r9
000000000000ebda         jmp        loc_e9ad
000000000000ebdf         align      32

                     loc_ebe0:
000000000000ebe0         mov        rax, qword [rsi]                            ; CODE XREF=set_regs+355
000000000000ebe3         add        rax, 0x1
000000000000ebe7         shl        rax, 0x4
000000000000ebeb         add        rax, r13
000000000000ebee         mov        rdx, qword [rax+8]
000000000000ebf2         mov        rdi, qword [rax]
000000000000ebf5         mov        rcx, rdx
000000000000ebf8         sub        rcx, rdi
000000000000ebfb         cmp        qword [rbp+var_88], 0x0
000000000000ec03         je         loc_edb8

000000000000ec09         cmp        rdi, 0xffffffffffffffff
000000000000ec0d         je         loc_ee26

000000000000ec13         cmp        rdx, 0xffffffffffffffff
000000000000ec17         je         loc_ee26

000000000000ec1d         test       rcx, rcx
000000000000ec20         je         loc_ee70

000000000000ec26         mov        r15, qword [rbp+var_78]
000000000000ec2a         mov        rdx, qword [r12+0x30]
000000000000ec2f         mov        rax, qword [r12+8]
000000000000ec34         sub        rdx, r15
000000000000ec37         cmp        rcx, rdx
000000000000ec3a         jg         loc_ee26

000000000000ec40         lea        rsi, qword [rax+r15]                        ; argument "__s2" for method j_memcmp
000000000000ec44         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
000000000000ec47         mov        rdx, rcx                                    ; argument "__n" for method j_memcmp
000000000000ec4a         mov        qword [rbp+var_A0], rcx
000000000000ec51         call       j_memcmp                                    ; memcmp
000000000000ec56         test       eax, eax
000000000000ec58         mov        rcx, qword [rbp+var_A0]
000000000000ec5f         jne        loc_ee26

                     loc_ec65:
000000000000ec65         mov        rax, qword [r14+0x18]                       ; CODE XREF=set_regs+1413
000000000000ec69         lea        rdx, qword [r15+rcx]
000000000000ec6d         mov        rbx, qword [rax+rbx*8]
000000000000ec71         jmp        loc_e9da
000000000000ec76         align      128

                     loc_ec80:
000000000000ec80         mov        rsi, qword [rbp+var_C8]                     ; CODE XREF=set_regs+747
000000000000ec87         mov        rdi, qword [rbp+var_68]
000000000000ec8b         mov        rdx, rbx
000000000000ec8e         mov        r14, r12
000000000000ec91         mov        r12, qword [rbp+var_A0]
000000000000ec98         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000ec9d         test       rax, rax
000000000000eca0         jne        loc_ee60

000000000000eca6         mov        rcx, qword [rbp+var_88]
000000000000ecad         test       rcx, rcx
000000000000ecb0         je         loc_ea2c

000000000000ecb6         mov        r15, qword [rcx]
000000000000ecb9         mov        rdx, qword [rbp+var_78]
000000000000ecbd         lea        rax, qword [r15+1]
000000000000ecc1         cmp        rax, qword [rcx+8]
000000000000ecc5         mov        qword [rcx], rax
000000000000ecc8         je         loc_f04d

000000000000ecce         mov        rax, qword [rcx+0x10]

                     loc_ecd2:
000000000000ecd2         lea        r15, qword [r15+r15*2]                      ; CODE XREF=set_regs+2119
000000000000ecd6         shl        r15, 0x4
000000000000ecda         add        r15, rax
000000000000ecdd         mov        qword [r15+8], r14
000000000000ece1         mov        r14, qword [rbp+var_B8]
000000000000ece8         mov        qword [r15], rdx
000000000000eceb         mov        rdi, r14                                    ; argument "__size" for method j_malloc
000000000000ecee         call       j_malloc                                    ; malloc
000000000000ecf3         test       rax, rax
000000000000ecf6         mov        qword [r15+0x10], rax
000000000000ecfa         je         loc_ed22

000000000000ecfc         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000ecff         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
000000000000ed02         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000ed05         call       j_memcpy                                    ; memcpy
000000000000ed0a         mov        rsi, qword [rbp+var_A8]
000000000000ed11         lea        rdi, qword [r15+0x18]
000000000000ed15         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000ed1a         test       eax, eax
000000000000ed1c         je         loc_ea2c

                     loc_ed22:
000000000000ed22         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1210
000000000000ed26         call       j_free                                      ; free
000000000000ed2b         cmp        byte [rbp+var_C9], 0x0
000000000000ed32         jne        loc_f0cb

                     loc_ed38:
000000000000ed38         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+1942, set_regs+2181
000000000000ed3f         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
000000000000ed44         mov        eax, 0xc
000000000000ed49         jmp        loc_ef59
000000000000ed4e         align      16

                     loc_ed50:
000000000000ed50         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+310
000000000000ed58         je         loc_f08c

000000000000ed5e         mov        rcx, qword [rbp+var_98]
000000000000ed65         test       rcx, rcx
000000000000ed68         je         loc_ed8a

000000000000ed6a         mov        rax, r13
000000000000ed6d         xor        edx, edx
000000000000ed6f         nop

                     loc_ed70:
000000000000ed70         cmp        qword [rax], 0x0                            ; CODE XREF=set_regs+1352
000000000000ed74         js         loc_ed7d

000000000000ed76         cmp        qword [rax+8], 0xffffffffffffffff
000000000000ed7b         je         loc_edd0

                     loc_ed7d:
000000000000ed7d         add        rdx, 0x1                                    ; CODE XREF=set_regs+1332
000000000000ed81         add        rax, 0x10
000000000000ed85         cmp        rcx, rdx
000000000000ed88         jne        loc_ed70

                     loc_ed8a:
000000000000ed8a         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1320
000000000000ed8e         call       j_free                                      ; free
000000000000ed93         cmp        byte [rbp+var_C9], 0x0
000000000000ed9a         jne        loc_f114

                     loc_eda0:
000000000000eda0         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+2272
000000000000eda7         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
000000000000edac         xor        eax, eax
000000000000edae         jmp        loc_ef59
000000000000edb3         align      8

                     loc_edb8:
000000000000edb8         test       rcx, rcx                                    ; CODE XREF=set_regs+963
000000000000edbb         je         loc_ee70

                     loc_edc1:
000000000000edc1         mov        r15, qword [rbp+var_78]                     ; CODE XREF=set_regs+899
000000000000edc5         jmp        loc_ec65
000000000000edca         align      16

                     loc_edd0:
000000000000edd0         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+1339
000000000000edd7         mov        r9, qword [rbp+var_A8]
000000000000edde         mov        r8, r13
000000000000ede1         mov        rcx, qword [rbp+var_98]
000000000000ede8         mov        rdx, qword [rbp+var_B0]
000000000000edef         lea        rsi, qword [rdi+0x10]
000000000000edf3         call       pop_fail_stack.isra.25                      ; pop_fail_stack.isra.25
000000000000edf8         mov        r9, rax
000000000000edfb         mov        rbx, rax
000000000000edfe         mov        r15, rax
000000000000ee01         shl        r9, 0x4
000000000000ee05         jmp        loc_e97c

                     loc_ee0a:
000000000000ee0a         cmp        rbx, 0xfffffffffffffffe                     ; CODE XREF=set_regs+495
000000000000ee0e         je         loc_efb8

000000000000ee14         nop        dword [rax]

                     loc_ee18:
000000000000ee18         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+392, set_regs+680
000000000000ee20         je         loc_f0dc

                     loc_ee26:
000000000000ee26         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+432, set_regs+453, set_regs+478, set_regs+973, set_regs+983, set_regs+1018, set_regs+1055
000000000000ee2d         mov        rcx, qword [rbp+var_98]
000000000000ee34         lea        rdx, qword [rbp+var_78]
000000000000ee38         mov        r9, qword [rbp+var_A8]
000000000000ee3f         mov        r8, r13
000000000000ee42         lea        rsi, qword [rdi+0x10]
000000000000ee46         call       pop_fail_stack.isra.25                      ; pop_fail_stack.isra.25
000000000000ee4b         mov        rcx, qword [rbp+var_78]
000000000000ee4f         mov        rbx, rax
000000000000ee52         jmp        loc_e94b
000000000000ee57         align      32

                     loc_ee60:
000000000000ee60         mov        rbx, r14                                    ; CODE XREF=set_regs+1120
000000000000ee63         jmp        loc_ea2c
000000000000ee68         align      16

                     loc_ee70:
000000000000ee70         mov        rdi, qword [rbp+var_A8]                     ; CODE XREF=set_regs+992, set_regs+1403
000000000000ee77         mov        rsi, rbx
000000000000ee7a         mov        qword [rbp+var_A0], r9
000000000000ee81         call       re_node_set_insert                          ; re_node_set_insert
000000000000ee86         test       al, al
000000000000ee88         je         loc_efb8

000000000000ee8e         mov        rdx, qword [r14+0x28]
000000000000ee92         lea        rax, qword [rbx+rbx*2]
000000000000ee96         mov        rcx, qword [rbp+var_78]
000000000000ee9a         lea        rax, qword [rdx+rax*8]
000000000000ee9e         mov        qword [rbp+var_D8], rcx
000000000000eea5         mov        rax, qword [rax+0x10]
000000000000eea9         mov        rbx, qword [rax]
000000000000eeac         mov        rax, qword [r12+0xb8]
000000000000eeb4         mov        rax, qword [rax+rcx*8]
000000000000eeb8         mov        rdx, rbx
000000000000eebb         mov        rdi, qword [rax+0x10]
000000000000eebf         lea        rsi, qword [rax+0x18]
000000000000eec3         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000eec8         test       rax, rax
000000000000eecb         jne        loc_ea2c

000000000000eed1         mov        r9, qword [rbp+var_A0]
000000000000eed8         mov        rsi, qword [r14]
000000000000eedb         mov        rcx, qword [rbp+var_D8]
000000000000eee2         add        rsi, r9
000000000000eee5         jmp        loc_e9ad
000000000000eeea         align      16

                     loc_eef0:
000000000000eef0         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+816
000000000000eef7         mov        rdi, qword [rbp+var_C0]                     ; argument "__dest" for method j_memcpy
000000000000eefe         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
000000000000ef01         mov        qword [rax+8], rcx
000000000000ef05         mov        qword [rbp+var_D8], r9
000000000000ef0c         mov        qword [rbp+var_A0], rcx
000000000000ef13         call       j_memcpy                                    ; memcpy
000000000000ef18         mov        rax, qword [r13+8]
000000000000ef1c         mov        rcx, qword [rbp+var_A0]
000000000000ef23         mov        r9, qword [rbp+var_D8]
000000000000ef2a         jmp        loc_e969
000000000000ef2f         align      16

                     loc_ef30:
000000000000ef30         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+512
000000000000ef34         call       j_free                                      ; free
000000000000ef39         cmp        byte [rbp+var_C9], 0x0
000000000000ef40         jne        loc_f01c

000000000000ef46         mov        rdi, qword [rbp+var_88]
000000000000ef4d         test       rdi, rdi
000000000000ef50         je         loc_ef57

                     loc_ef52:
000000000000ef52         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24, CODE XREF=set_regs+2034

                     loc_ef57:
000000000000ef57         xor        eax, eax                                    ; CODE XREF=set_regs+1808, set_regs+2040, set_regs+2140

                     loc_ef59:
000000000000ef59         mov        rbx, qword [rbp+var_38]                     ; CODE XREF=set_regs+1289, set_regs+1390, set_regs+1953, set_regs+2160, set_regs+2225, set_regs+2255
000000000000ef5d         xor        rbx, qword [fs:0x28]
000000000000ef66         jne        loc_f125

000000000000ef6c         lea        rsp, qword [rbp+var_28]
000000000000ef70         pop        rbx
000000000000ef71         pop        r12
000000000000ef73         pop        r13
000000000000ef75         pop        r14
000000000000ef77         pop        r15
000000000000ef79         pop        rbp
000000000000ef7a         ret
                        ; endp

                     loc_ef7b:
000000000000ef7b         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+840
000000000000ef82         mov        rsi, rdi                                    ; argument "__src" for method j_memcpy
000000000000ef85         mov        rdi, r13                                    ; argument "__dest" for method j_memcpy
000000000000ef88         mov        qword [rbp+var_D8], rcx
000000000000ef8f         mov        qword [rbp+var_A0], r9
000000000000ef96         call       j_memcpy                                    ; memcpy
000000000000ef9b         mov        rax, qword [r13+8]
000000000000ef9f         mov        r9, qword [rbp+var_A0]
000000000000efa6         mov        rcx, qword [rbp+var_D8]
000000000000efad         jmp        loc_e969
000000000000efb2         align      8

                     loc_efb8:
000000000000efb8         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+667, set_regs+1486, set_regs+1608
000000000000efbc         call       j_free                                      ; free
000000000000efc1         cmp        byte [rbp+var_C9], 0x0
000000000000efc8         jne        loc_f0cb

                     loc_efce:
000000000000efce         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+2199
000000000000efd6         jne        loc_ed38

                     loc_efdc:
000000000000efdc         mov        eax, 0xc                                    ; CODE XREF=set_regs+119, set_regs+2003, set_regs+2010
000000000000efe1         jmp        loc_ef59

                     loc_efe6:
000000000000efe6         mov        rdi, qword [rbp+var_B8]                     ; argument "__size" for method j_malloc, CODE XREF=set_regs+179
000000000000efed         call       j_malloc                                    ; malloc
000000000000eff2         test       rax, rax
000000000000eff5         mov        qword [rbp+var_C0], rax
000000000000effc         mov        byte [rbp+var_C9], 0x1
000000000000f003         jne        loc_e917

000000000000f009         mov        rdi, qword [rbp+var_88]
000000000000f010         test       rdi, rdi
000000000000f013         je         loc_efdc

000000000000f015         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
000000000000f01a         jmp        loc_efdc

                     loc_f01c:
000000000000f01c         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1792
000000000000f023         call       j_free                                      ; free
000000000000f028         mov        rdi, qword [rbp+var_88]
000000000000f02f         test       rdi, rdi
000000000000f032         jne        loc_ef52

000000000000f038         jmp        loc_ef57

                     loc_f03d:
000000000000f03d         mov        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+85
000000000000f048         jmp        loc_e8bd

                     loc_f04d:
000000000000f04d         lea        rsi, qword [rax+rax*2]                      ; CODE XREF=set_regs+1160
000000000000f051         mov        rax, qword [rbp+var_88]
000000000000f058         mov        qword [rbp+var_A0], rdx
000000000000f05f         shl        rsi, 0x5                                    ; argument "__size" for method j_realloc
000000000000f063         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_realloc
000000000000f067         call       j_realloc                                   ; realloc
000000000000f06c         test       rax, rax
000000000000f06f         je         loc_f0b5

000000000000f071         mov        rcx, qword [rbp+var_88]
000000000000f078         mov        rdx, qword [rbp+var_A0]
000000000000f07f         shl        qword [rcx+8], 0x1
000000000000f083         mov        qword [rcx+0x10], rax
000000000000f087         jmp        loc_ecd2

                     loc_f08c:
000000000000f08c         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1304
000000000000f090         call       j_free                                      ; free
000000000000f095         cmp        byte [rbp+var_C9], 0x0
000000000000f09c         je         loc_ef57

000000000000f0a2         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free
000000000000f0a9         call       j_free                                      ; free
000000000000f0ae         xor        eax, eax
000000000000f0b0         jmp        loc_ef59

                     loc_f0b5:
000000000000f0b5         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+2095
000000000000f0b9         call       j_free                                      ; free
000000000000f0be         cmp        byte [rbp+var_C9], 0x0
000000000000f0c5         je         loc_ed38

                     loc_f0cb:
000000000000f0cb         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1266, set_regs+1928
000000000000f0d2         call       j_free                                      ; free
000000000000f0d7         jmp        loc_efce

                     loc_f0dc:
000000000000f0dc         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1504
000000000000f0e0         call       j_free                                      ; free
000000000000f0e5         cmp        byte [rbp+var_C9], 0x0
000000000000f0ec         mov        eax, 0x1
000000000000f0f1         je         loc_ef59

000000000000f0f7         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free
000000000000f0fe         mov        dword [rbp+var_88], eax
000000000000f104         call       j_free                                      ; free
000000000000f109         mov        eax, dword [rbp+var_88]
000000000000f10f         jmp        loc_ef59

                     loc_f114:
000000000000f114         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1370
000000000000f11b         call       j_free                                      ; free
000000000000f120         jmp        loc_eda0

                     loc_f125:
000000000000f125         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=set_regs+1830
                        ; endp
000000000000f12a         align      16                                          ; End of unwind block (FDE at 0x1a1d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     get_subexp_sub.isra.32:
000000000000f130         push       r15                                         ; Begin of unwind block (FDE at 0x1a200), CODE XREF=transit_state_bkref.isra.34+710, transit_state_bkref.isra.34+1789
000000000000f132         push       r14
000000000000f134         mov        r14, rcx
000000000000f137         push       r13
000000000000f139         push       r12
000000000000f13b         mov        r13, rsi
000000000000f13e         push       rbp
000000000000f13f         push       rbx
000000000000f140         lea        rsi, qword [rdx+0x10]
000000000000f144         mov        rbp, rdx
000000000000f147         mov        r9, r8
000000000000f14a         mov        r12, r8
000000000000f14d         sub        rsp, 0x20
000000000000f151         mov        rcx, qword [rdx+8]
000000000000f155         mov        r8, r14
000000000000f158         push       0x8
000000000000f15a         mov        rdx, qword [rdx]
000000000000f15d         mov        rbx, rdi
000000000000f160         call       check_arrival                               ; check_arrival
000000000000f165         test       eax, eax
000000000000f167         pop        rdx
000000000000f168         pop        rcx
000000000000f169         je         loc_f180

                     loc_f16b:
000000000000f16b         add        rsp, 0x18                                   ; CODE XREF=get_subexp_sub.isra.32+401
000000000000f16f         pop        rbx
000000000000f170         pop        rbp
000000000000f171         pop        r12
000000000000f173         pop        r13
000000000000f175         pop        r14
000000000000f177         pop        r15
000000000000f179         ret
                        ; endp
000000000000f17a         align      128

                     loc_f180:
000000000000f180         mov        rax, qword [rbx+0xc8]                       ; CODE XREF=get_subexp_sub.isra.32+57
000000000000f187         mov        rdx, qword [rbx+0xd0]
000000000000f18e         mov        r15, qword [rbp+8]
000000000000f192         mov        rcx, qword [r13]
000000000000f196         mov        rdi, qword [rbx+0xd8]
000000000000f19d         cmp        rax, rdx
000000000000f1a0         mov        rsi, r15
000000000000f1a3         jge        loc_f240

                     loc_f1a9:
000000000000f1a9         lea        rdx, qword [rax+rax*4]                      ; CODE XREF=get_subexp_sub.isra.32+379
000000000000f1ad         shl        rdx, 0x3
000000000000f1b1         test       rax, rax
000000000000f1b4         jle        loc_f1c1

000000000000f1b6         lea        r8, qword [rdi+rdx-0x28]
000000000000f1bb         cmp        r12, qword [r8+8]
000000000000f1bf         je         loc_f230

                     loc_f1c1:
000000000000f1c1         add        rdi, rdx                                    ; CODE XREF=get_subexp_sub.isra.32+132, get_subexp_sub.isra.32+261
000000000000f1c4         xor        edx, edx
000000000000f1c6         cmp        r15, rcx
000000000000f1c9         sete       dl
000000000000f1cc         add        rax, 0x1
000000000000f1d0         mov        qword [rdi], r14
000000000000f1d3         neg        edx
000000000000f1d5         mov        qword [rdi+8], r12
000000000000f1d9         mov        qword [rdi+0x10], rcx
000000000000f1dd         mov        word [rdi+0x22], dx
000000000000f1e1         mov        qword [rdi+0x18], r15
000000000000f1e5         mov        qword [rbx+0xc8], rax
000000000000f1ec         mov        byte [rdi+0x20], 0x0
000000000000f1f0         mov        rax, r15
000000000000f1f3         movsxd     rdx, dword [rbx+0xe0]
000000000000f1fa         sub        rax, rcx
000000000000f1fd         cmp        rdx, rax
000000000000f200         jge        loc_f20c

000000000000f202         sub        r15d, ecx
000000000000f205         mov        dword [rbx+0xe0], r15d

                     loc_f20c:
000000000000f20c         add        rsi, r12                                    ; CODE XREF=get_subexp_sub.isra.32+208
000000000000f20f         sub        rsi, qword [r13]
000000000000f213         add        rsp, 0x18
000000000000f217         mov        rdi, rbx
000000000000f21a         pop        rbx
000000000000f21b         pop        rbp
000000000000f21c         pop        r12
000000000000f21e         pop        r13
000000000000f220         pop        r14
000000000000f222         pop        r15
000000000000f224         jmp        clean_state_log_if_needed                   ; clean_state_log_if_needed
                        ; endp
000000000000f229         align      16

                     loc_f230:
000000000000f230         mov        byte [r8+0x20], 0x1                         ; CODE XREF=get_subexp_sub.isra.32+143
000000000000f235         jmp        loc_f1c1
000000000000f237         align      64

                     loc_f240:
000000000000f240         lea        rsi, qword [rdx+rdx*4]                      ; CODE XREF=get_subexp_sub.isra.32+115
000000000000f244         mov        qword [rsp+0x48+var_40], rcx
000000000000f249         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
000000000000f24d         call       j_realloc                                   ; realloc
000000000000f252         test       rax, rax
000000000000f255         mov        rcx, qword [rsp+0x48+var_40]
000000000000f25a         je         loc_f2b0

000000000000f25c         mov        rsi, qword [rbx+0xc8]
000000000000f263         mov        rdx, qword [rbx+0xd0]
000000000000f26a         mov        qword [rbx+0xd8], rax
000000000000f271         mov        qword [rsp+0x48+var_40], rcx
000000000000f276         lea        rsi, qword [rsi+rsi*4]
000000000000f27a         lea        rdx, qword [rdx+rdx*4]
000000000000f27e         lea        rdi, qword [rax+rsi*8]                      ; argument "__s" for method j_memset
000000000000f282         shl        rdx, 0x3                                    ; argument "__n" for method j_memset
000000000000f286         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000f288         call       j_memset                                    ; memset
000000000000f28d         shl        qword [rbx+0xd0], 0x1
000000000000f294         mov        rax, qword [rbx+0xc8]
000000000000f29b         mov        rdi, qword [rbx+0xd8]
000000000000f2a2         mov        rsi, qword [rbp+8]
000000000000f2a6         mov        rcx, qword [rsp+0x48+var_40]
000000000000f2ab         jmp        loc_f1a9

                     loc_f2b0:
000000000000f2b0         mov        rdi, qword [rbx+0xd8]                       ; argument "__ptr" for method j_free, CODE XREF=get_subexp_sub.isra.32+298
000000000000f2b7         call       j_free                                      ; free
000000000000f2bc         mov        eax, 0xc
000000000000f2c1         jmp        loc_f16b
000000000000f2c6         align      16                                          ; End of unwind block (FDE at 0x1a200)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232


                     transit_state_bkref.isra.34:
000000000000f2d0         push       r15                                         ; Begin of unwind block (FDE at 0x1a26c), CODE XREF=transit_state_bkref.isra.34+2090, merge_state_with_log+449, re_search_internal+5802
000000000000f2d2         push       r14
000000000000f2d4         push       r13
000000000000f2d6         push       r12
000000000000f2d8         push       rbp
000000000000f2d9         push       rbx
000000000000f2da         sub        rsp, 0xb8
000000000000f2e1         mov        r15, qword [rdi+0x48]
000000000000f2e5         mov        rax, qword [fs:0x28]
000000000000f2ee         mov        qword [rsp+0xe8+var_40], rax
000000000000f2f6         xor        eax, eax
000000000000f2f8         cmp        qword [rsi], 0x0
000000000000f2fc         mov        rax, qword [rdi+0x98]
000000000000f303         mov        qword [rsp+0xe8+var_A0], rsi
000000000000f308         mov        qword [rsp+0xe8+var_A8], rdx
000000000000f30d         mov        qword [rsp+0xe8+var_B0], rax
000000000000f312         jle        loc_f640

000000000000f318         lea        rax, qword [r15*8]
000000000000f320         mov        r14, rdi
000000000000f323         mov        qword [rsp+0xe8+var_E8], 0x0
000000000000f32b         mov        qword [rsp+0xe8+var_E0], r15
000000000000f330         mov        qword [rsp+0xe8+var_88], rax
000000000000f335         lea        rax, qword [rsp+0xe8+var_58]
000000000000f33d         mov        qword [rsp+0xe8+var_80], rax
000000000000f342         lea        rax, qword [rsp+0xe8+var_5C]
000000000000f34a         mov        qword [rsp+0xe8+var_70], rax
000000000000f34f         jmp        loc_f397
000000000000f351         align      8

                     loc_f358:
000000000000f358         test       al, 0x1                                     ; CODE XREF=transit_state_bkref.isra.34+285
000000000000f35a         je         loc_f380

000000000000f35c         and        edx, 0x8
000000000000f35f         jne        loc_f380

                     loc_f361:
000000000000f361         test       cl, 0x20                                    ; CODE XREF=transit_state_bkref.isra.34+294, transit_state_bkref.isra.34+302
000000000000f364         je         loc_f36a

000000000000f366         test       al, 0x2
000000000000f368         je         loc_f380

                     loc_f36a:
000000000000f36a         and        ecx, 0x80                                   ; CODE XREF=transit_state_bkref.isra.34+148
000000000000f370         je         loc_f410

000000000000f376         test       al, 0x8
000000000000f378         jne        loc_f410

000000000000f37e         nop

                     loc_f380:
000000000000f380         mov        rdi, qword [rsp+0xe8+var_A0]                ; CODE XREF=transit_state_bkref.isra.34+138, transit_state_bkref.isra.34+143, transit_state_bkref.isra.34+152, transit_state_bkref.isra.34+237, transit_state_bkref.isra.34+308, transit_state_bkref.isra.34+976, transit_state_bkref.isra.34+1335
000000000000f385         add        qword [rsp+0xe8+var_E8], 0x1
000000000000f38a         mov        rax, qword [rsp+0xe8+var_E8]
000000000000f38e         cmp        rax, qword [rdi]
000000000000f391         jge        loc_f640

                     loc_f397:
000000000000f397         mov        rax, qword [rsp+0xe8+var_A8]                ; CODE XREF=transit_state_bkref.isra.34+127
000000000000f39c         mov        rdi, qword [rsp+0xe8+var_E8]
000000000000f3a0         mov        rax, qword [rax]
000000000000f3a3         mov        r13, qword [rax+rdi*8]
000000000000f3a7         mov        rdi, qword [rsp+0xe8+var_B0]
000000000000f3ac         mov        rax, qword [rdi]
000000000000f3af         mov        rbx, r13
000000000000f3b2         shl        rbx, 0x4
000000000000f3b6         add        rax, rbx
000000000000f3b9         cmp        byte [rax+8], 0x4
000000000000f3bd         jne        loc_f380

000000000000f3bf         mov        ebp, dword [rax+8]
000000000000f3c2         test       ebp, 0x3ff00
000000000000f3c8         je         loc_f410

000000000000f3ca         mov        edx, dword [r14+0xa0]
000000000000f3d1         mov        rsi, qword [rsp+0xe8+var_E0]
000000000000f3d6         mov        rdi, r14
000000000000f3d9         call       re_string_context_at                        ; re_string_context_at
000000000000f3de         mov        edx, ebp
000000000000f3e0         shr        edx, 0x8
000000000000f3e3         mov        ecx, edx
000000000000f3e5         and        cx, 0x3ff
000000000000f3ea         test       dl, 0x4
000000000000f3ed         jne        loc_f358

000000000000f3f3         and        edx, 0x8
000000000000f3f6         je         loc_f361

000000000000f3fc         test       al, 0x1
000000000000f3fe         je         loc_f361

000000000000f404         jmp        loc_f380
000000000000f409         align      16

                     loc_f410:
000000000000f410         mov        rdi, qword [r14+0xc8]                       ; CODE XREF=transit_state_bkref.isra.34+160, transit_state_bkref.isra.34+168, transit_state_bkref.isra.34+248
000000000000f417         mov        rax, qword [r14+0x98]
000000000000f41e         xor        ecx, ecx
000000000000f420         mov        r10, qword [r14+8]
000000000000f424         mov        r9, qword [rsp+0xe8+var_E0]
000000000000f429         mov        qword [rsp+0xe8+var_78], rdi
000000000000f42e         mov        qword [rsp+0xe8+var_98], rax

                     loc_f433:
000000000000f433         cmp        rcx, rdi                                    ; CODE XREF=transit_state_bkref.isra.34+871
000000000000f436         jge        loc_f48b

000000000000f438         lea        rax, qword [rcx+rdi]
000000000000f43c         mov        r11, qword [r14+0xd8]
000000000000f443         mov        rsi, rax
000000000000f446         shr        rsi, 0x3f
000000000000f44a         add        rsi, rax
000000000000f44d         sar        rsi, 0x1
000000000000f450         lea        rax, qword [rsi+rsi*4]
000000000000f454         cmp        r9, qword [r11+rax*8+8]
000000000000f459         jle        loc_f486

000000000000f45b         jmp        loc_f628

                     loc_f460:
000000000000f460         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=transit_state_bkref.isra.34+441
000000000000f464         mov        rax, rdx
000000000000f467         shr        rax, 0x3f
000000000000f46b         add        rax, rdx
000000000000f46e         sar        rax, 0x1
000000000000f471         lea        rdx, qword [rax+rax*4]
000000000000f475         mov        r8, rax
000000000000f478         cmp        r9, qword [r11+rdx*8+8]
000000000000f47d         jg         loc_f630

000000000000f483         mov        rsi, rax

                     loc_f486:
000000000000f486         cmp        rsi, rcx                                    ; CODE XREF=transit_state_bkref.isra.34+393
000000000000f489         jg         loc_f460

                     loc_f48b:
000000000000f48b         cmp        qword [rsp+0xe8+var_78], rcx                ; CODE XREF=transit_state_bkref.isra.34+358
000000000000f490         jle        loc_f4b6

000000000000f492         mov        rdx, qword [r14+0xd8]
000000000000f499         lea        rax, qword [rcx+rcx*4]
000000000000f49d         mov        rdi, qword [rsp+0xe8+var_E0]
000000000000f4a2         lea        rax, qword [rdx+rax*8]
000000000000f4a6         cmp        qword [rax+8], rdi
000000000000f4aa         jne        loc_f4b6

000000000000f4ac         cmp        rcx, 0xffffffffffffffff
000000000000f4b0         jne        loc_f686

                     loc_f4b6:
000000000000f4b6         mov        rax, qword [rsp+0xe8+var_98]                ; CODE XREF=transit_state_bkref.isra.34+448, transit_state_bkref.isra.34+474, transit_state_bkref.isra.34+944
000000000000f4bb         cmp        qword [r14+0xe8], 0x0
000000000000f4c3         mov        rdx, qword [rax]
000000000000f4c6         mov        rax, qword [rdx+rbx]
000000000000f4ca         mov        qword [rsp+0xe8+var_90], rax
000000000000f4cf         jle        loc_f68b

000000000000f4d5         mov        qword [rsp+0xe8+var_B8], r13
000000000000f4da         mov        qword [rsp+0xe8+var_C0], 0x0
000000000000f4e3         mov        r13, r10

                     loc_f4e6:
000000000000f4e6         mov        rax, qword [r14+0xf8]                       ; CODE XREF=transit_state_bkref.isra.34+601
000000000000f4ed         mov        rbx, qword [rsp+0xe8+var_C0]
000000000000f4f2         mov        rdi, qword [rsp+0xe8+var_90]
000000000000f4f7         mov        rbx, qword [rax+rbx*8]
000000000000f4fb         mov        rax, qword [rbx+8]
000000000000f4ff         shl        rax, 0x4
000000000000f503         cmp        rdi, qword [rdx+rax]
000000000000f507         je         loc_f530

                     loc_f509:
000000000000f509         add        qword [rsp+0xe8+var_C0], 0x1                ; CODE XREF=transit_state_bkref.isra.34+1447, transit_state_bkref.isra.34+1829, transit_state_bkref.isra.34+1925
000000000000f50f         mov        rax, qword [rsp+0xe8+var_C0]
000000000000f514         cmp        rax, qword [r14+0xe8]
000000000000f51b         jge        loc_fb91

000000000000f521         mov        rax, qword [rsp+0xe8+var_98]
000000000000f526         mov        rdx, qword [rax]
000000000000f529         jmp        loc_f4e6
000000000000f52b         align      16

                     loc_f530:
000000000000f530         cmp        qword [rbx+0x20], 0x0                       ; CODE XREF=transit_state_bkref.isra.34+567
000000000000f535         mov        r11, qword [rbx]
000000000000f538         jle        loc_fba2

000000000000f53e         mov        rcx, qword [rsp+0xe8+var_E0]
000000000000f543         mov        r8, r13
000000000000f546         xor        ebp, ebp
000000000000f548         mov        r13, rbx
000000000000f54b         mov        rbx, rcx
000000000000f54e         jmp        loc_f5bc

                     loc_f550:
000000000000f550         lea        rsi, qword [r8+r11]                         ; argument "__s2" for method j_memcmp, CODE XREF=transit_state_bkref.isra.34+779, transit_state_bkref.isra.34+844
000000000000f554         lea        rdi, qword [r8+rbx]                         ; argument "__s1" for method j_memcmp
000000000000f558         mov        qword [rsp+0xe8+var_C8], r9
000000000000f55d         mov        qword [rsp+0xe8+var_D0], r11
000000000000f562         mov        qword [rsp+0xe8+var_D8], r8
000000000000f567         call       j_memcmp                                    ; memcmp
000000000000f56c         test       eax, eax
000000000000f56e         mov        r8, qword [rsp+0xe8+var_D8]
000000000000f573         mov        r11, qword [rsp+0xe8+var_D0]
000000000000f578         mov        r9, qword [rsp+0xe8+var_C8]
000000000000f57d         jne        loc_fa48

                     loc_f583:
000000000000f583         mov        r8, qword [rsp+0xe8+var_E0]                 ; CODE XREF=transit_state_bkref.isra.34+773
000000000000f588         mov        rcx, qword [rsp+0xe8+var_B8]
000000000000f58d         mov        rdx, r9
000000000000f590         mov        rsi, r13
000000000000f593         mov        rdi, r14
000000000000f596         call       get_subexp_sub.isra.32                      ; get_subexp_sub.isra.32
000000000000f59b         cmp        eax, 0x1
000000000000f59e         mov        r8, qword [r14+8]
000000000000f5a2         ja         loc_f648

000000000000f5a8         add        rbp, 0x1
000000000000f5ac         cmp        rbp, qword [r13+0x20]
000000000000f5b0         mov        r11, r15
000000000000f5b3         mov        rbx, r12
000000000000f5b6         jge        loc_f868

                     loc_f5bc:
000000000000f5bc         mov        rax, qword [r13+0x28]                       ; CODE XREF=transit_state_bkref.isra.34+638
000000000000f5c0         mov        r9, qword [rax+rbp*8]
000000000000f5c4         mov        r15, qword [r9+8]
000000000000f5c8         mov        rdx, r15
000000000000f5cb         sub        rdx, r11
000000000000f5ce         test       rdx, rdx
000000000000f5d1         lea        r12, qword [rdx+rbx]
000000000000f5d5         jle        loc_f583

000000000000f5d7         cmp        qword [r14+0x30], r12
000000000000f5db         jge        loc_f550

000000000000f5e1         cmp        qword [r14+0x58], r12
000000000000f5e5         mov        qword [rsp+0xe8+var_D0], rdx
000000000000f5ea         mov        qword [rsp+0xe8+var_D8], r9
000000000000f5ef         jl         loc_fa48

000000000000f5f5         mov        rsi, r12
000000000000f5f8         mov        rdi, r14
000000000000f5fb         mov        qword [rsp+0xe8+var_C8], r11
000000000000f600         call       clean_state_log_if_needed                   ; clean_state_log_if_needed
000000000000f605         test       eax, eax
000000000000f607         jne        loc_f648

000000000000f609         mov        r8, qword [r14+8]
000000000000f60d         mov        rdx, qword [rsp+0xe8+var_D0]
000000000000f612         mov        r9, qword [rsp+0xe8+var_D8]
000000000000f617         mov        r11, qword [rsp+0xe8+var_C8]
000000000000f61c         jmp        loc_f550
000000000000f621         align      8

                     loc_f628:
000000000000f628         mov        r8, rsi                                     ; CODE XREF=transit_state_bkref.isra.34+395
000000000000f62b         mov        rsi, rdi
000000000000f62e         nop

                     loc_f630:
000000000000f630         lea        rcx, qword [r8+1]                           ; CODE XREF=transit_state_bkref.isra.34+429
000000000000f634         mov        rdi, rsi
000000000000f637         jmp        loc_f433
000000000000f63c         align      64

                     loc_f640:
000000000000f640         xor        eax, eax                                    ; CODE XREF=transit_state_bkref.isra.34+66, transit_state_bkref.isra.34+193
000000000000f642         nop        word [rax+rax]

                     loc_f648:
000000000000f648         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=transit_state_bkref.isra.34+722, transit_state_bkref.isra.34+823, transit_state_bkref.isra.34+1694, transit_state_bkref.isra.34+1801, transit_state_bkref.isra.34+1902, transit_state_bkref.isra.34+2016, transit_state_bkref.isra.34+2070, transit_state_bkref.isra.34+2110, transit_state_bkref.isra.34+2140, transit_state_bkref.isra.34+2169
000000000000f650         xor        rbx, qword [fs:0x28]
000000000000f659         jne        loc_fbac

000000000000f65f         add        rsp, 0xb8
000000000000f666         pop        rbx
000000000000f667         pop        rbp
000000000000f668         pop        r12
000000000000f66a         pop        r13
000000000000f66c         pop        r14
000000000000f66e         pop        r15
000000000000f670         ret
                        ; endp
000000000000f671         align      8

                     loc_f678:
000000000000f678         add        rax, 0x28                                   ; CODE XREF=transit_state_bkref.isra.34+953
000000000000f67c         cmp        byte [rax-8], 0x0
000000000000f680         je         loc_f4b6

                     loc_f686:
000000000000f686         cmp        r13, qword [rax]                            ; CODE XREF=transit_state_bkref.isra.34+480
000000000000f689         jne        loc_f678

                     loc_f68b:
000000000000f68b         mov        rax, qword [rsp+0xe8+var_78]                ; CODE XREF=transit_state_bkref.isra.34+511

                     loc_f690:
000000000000f690         cmp        qword [rsp+0xe8+var_78], rax                ; CODE XREF=transit_state_bkref.isra.34+2253
000000000000f695         mov        dword [rsp+0xe8+var_5C], 0x0
000000000000f6a0         jge        loc_f380

000000000000f6a6         lea        rax, qword [r13*8]
000000000000f6ae         mov        r12, qword [rsp+0xe8+var_78]
000000000000f6b3         mov        rbp, qword [rsp+0xe8+var_B0]
000000000000f6b8         mov        qword [rsp+0xe8+var_98], rax
000000000000f6bd         lea        rax, qword [r13+r13*2]
000000000000f6c2         lea        r8, qword [r12+r12*4]
000000000000f6c6         shl        rax, 0x3
000000000000f6ca         mov        qword [rsp+0xe8+var_90], rax
000000000000f6cf         lea        r15, qword [r8*8]
000000000000f6d7         jmp        loc_f80d
000000000000f6dc         align      32

                     loc_f6e0:
000000000000f6e0         mov        rcx, qword [rbp+0x28]                       ; CODE XREF=transit_state_bkref.isra.34+1390
000000000000f6e4         mov        rdi, qword [rsp+0xe8+var_90]
000000000000f6e9         mov        rcx, qword [rcx+rdi+0x10]
000000000000f6ee         mov        rcx, qword [rcx]
000000000000f6f1         lea        rcx, qword [rcx+rcx*2]
000000000000f6f5         lea        rcx, qword [rdx+rcx*8]
000000000000f6f9         mov        qword [rsp+0xe8+var_D0], rcx

                     loc_f6fe:
000000000000f6fe         add        rbx, qword [rsp+0xe8+var_E0]                ; CODE XREF=transit_state_bkref.isra.34+1422
000000000000f703         mov        edx, dword [r14+0xa0]
000000000000f70a         mov        rdi, r14
000000000000f70d         sub        rbx, rax
000000000000f710         lea        rsi, qword [rbx-1]
000000000000f714         call       re_string_context_at                        ; re_string_context_at
000000000000f719         mov        rsi, qword [rsp+0xe8+var_88]
000000000000f71e         mov        ecx, eax
000000000000f720         mov        rax, qword [r14+0xb8]
000000000000f727         lea        r10, qword [rbx*8]
000000000000f72f         mov        qword [rsp+0xe8+var_D8], 0x0
000000000000f738         lea        r11, qword [rax+r10]
000000000000f73c         mov        rax, qword [rax+rsi]
000000000000f740         mov        rdx, qword [r11]
000000000000f743         test       rax, rax
000000000000f746         je         loc_f751

000000000000f748         mov        rax, qword [rax+0x10]
000000000000f74c         mov        qword [rsp+0xe8+var_D8], rax

                     loc_f751:
000000000000f751         test       rdx, rdx                                    ; CODE XREF=transit_state_bkref.isra.34+1142
000000000000f754         je         loc_fa70

000000000000f75a         mov        rsi, qword [rdx+0x50]
000000000000f75e         mov        rdi, qword [rsp+0xe8+var_80]
000000000000f763         mov        rdx, qword [rsp+0xe8+var_D0]
000000000000f768         mov        qword [rsp+0xe8+var_B8], r10
000000000000f76d         mov        dword [rsp+0xe8+var_C0], ecx
000000000000f771         call       re_node_set_init_union                      ; re_node_set_init_union
000000000000f776         test       eax, eax
000000000000f778         mov        dword [rsp+0xe8+var_5C], eax
000000000000f77f         mov        ecx, dword [rsp+0xe8+var_C0]
000000000000f783         mov        r10, qword [rsp+0xe8+var_B8]
000000000000f788         jne        loc_fb18

000000000000f78e         add        r10, qword [r14+0xb8]
000000000000f795         mov        rdx, qword [rsp+0xe8+var_80]
000000000000f79a         mov        rsi, rbp
000000000000f79d         mov        rdi, qword [rsp+0xe8+var_70]
000000000000f7a2         mov        qword [rsp+0xe8+var_C0], r10
000000000000f7a7         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000f7ac         mov        r10, qword [rsp+0xe8+var_C0]
000000000000f7b1         mov        rdi, qword [rsp+0xe8+var_48]                ; argument "__ptr" for method j_free
000000000000f7b9         mov        qword [r10], rax
000000000000f7bc         call       j_free                                      ; free
000000000000f7c1         mov        rdx, qword [r14+0xb8]
000000000000f7c8         cmp        qword [rdx+rbx*8], 0x0
000000000000f7cd         je         loc_faa1

                     loc_f7d3:
000000000000f7d3         cmp        qword [rsp+0xe8+var_C8], 0x0                ; CODE XREF=transit_state_bkref.isra.34+1995, transit_state_bkref.isra.34+2010
000000000000f7d9         jne        loc_f7f8

000000000000f7db         mov        rax, qword [rsp+0xe8+var_88]
000000000000f7e0         mov        rbx, qword [rsp+0xe8+var_D8]
000000000000f7e5         mov        rax, qword [rdx+rax]
000000000000f7e9         cmp        qword [rax+0x10], rbx
000000000000f7ed         jg         loc_fab8

000000000000f7f3         nop        dword [rax+rax]

                     loc_f7f8:
000000000000f7f8         add        r12, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1289, transit_state_bkref.isra.34+1354, transit_state_bkref.isra.34+1365, transit_state_bkref.isra.34+2104
000000000000f7fc         add        r15, 0x28
000000000000f800         cmp        r12, qword [r14+0xc8]
000000000000f807         jge        loc_f380

                     loc_f80d:
000000000000f80d         mov        rax, qword [r14+0xd8]                       ; CODE XREF=transit_state_bkref.isra.34+1031
000000000000f814         add        rax, r15
000000000000f817         cmp        r13, qword [rax]
000000000000f81a         jne        loc_f7f8

000000000000f81c         mov        rdi, qword [rsp+0xe8+var_E0]
000000000000f821         cmp        rdi, qword [rax+8]
000000000000f825         jne        loc_f7f8

000000000000f827         mov        rbx, qword [rax+0x18]
000000000000f82b         mov        rax, qword [rax+0x10]
000000000000f82f         mov        rdx, qword [rbp+0x30]
000000000000f833         mov        rcx, rbx
000000000000f836         sub        rcx, rax
000000000000f839         mov        qword [rsp+0xe8+var_C8], rcx
000000000000f83e         je         loc_f6e0

000000000000f844         mov        rcx, qword [rbp+0x18]
000000000000f848         mov        rdi, qword [rsp+0xe8+var_98]
000000000000f84d         mov        rcx, qword [rcx+rdi]
000000000000f851         lea        rcx, qword [rcx+rcx*2]
000000000000f855         lea        rcx, qword [rdx+rcx*8]
000000000000f859         mov        qword [rsp+0xe8+var_D0], rcx
000000000000f85e         jmp        loc_f6fe
000000000000f863         align      8

                     loc_f868:
000000000000f868         mov        rbx, r13                                    ; CODE XREF=transit_state_bkref.isra.34+742
000000000000f86b         mov        r13, r8

                     loc_f86e:
000000000000f86e         lea        r11, qword [r15+1]                          ; CODE XREF=transit_state_bkref.isra.34+1946

                     loc_f872:
000000000000f872         cmp        qword [rsp+0xe8+var_E0], r11                ; CODE XREF=transit_state_bkref.isra.34+1937, transit_state_bkref.isra.34+2263
000000000000f877         jl         loc_f509

000000000000f87d         mov        rax, r12
000000000000f880         lea        r15, qword [r11*8]
000000000000f888         mov        r12, rbx
000000000000f88b         mov        rbx, r11
000000000000f88e         mov        r11, r13
000000000000f891         mov        r13, rax
000000000000f894         nop        dword [rax]

                     loc_f898:
000000000000f898         mov        rax, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+1820
000000000000f89b         sub        rax, qword [r12]
000000000000f89f         test       rax, rax
000000000000f8a2         jle        loc_f8c5

000000000000f8a4         cmp        qword [r14+0x30], r13
000000000000f8a8         jle        loc_fb31

                     loc_f8ae:
000000000000f8ae         movzx      ecx, byte [r11+rbx-1]                       ; CODE XREF=transit_state_bkref.isra.34+2179
000000000000f8b4         lea        rax, qword [r13+1]
000000000000f8b8         cmp        byte [r11+r13], cl
000000000000f8bc         jne        loc_f9f2

000000000000f8c2         mov        r13, rax

                     loc_f8c5:
000000000000f8c5         mov        rax, qword [r14+0xb8]                       ; CODE XREF=transit_state_bkref.isra.34+1490
000000000000f8cc         mov        rax, qword [rax+r15]
000000000000f8d0         test       rax, rax
000000000000f8d3         je         loc_f9df

000000000000f8d9         mov        rcx, qword [rax+0x10]
000000000000f8dd         test       rcx, rcx
000000000000f8e0         jle        loc_f9df

000000000000f8e6         mov        rdi, qword [rax+0x18]
000000000000f8ea         mov        rax, qword [rsp+0xe8+var_98]
000000000000f8ef         xor        edx, edx
000000000000f8f1         mov        r8, qword [rsp+0xe8+var_90]
000000000000f8f6         mov        rsi, qword [rax]
000000000000f8f9         jmp        loc_f90d
000000000000f8fb         align      256

                     loc_f900:
000000000000f900         add        rdx, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1615, transit_state_bkref.isra.34+1620
000000000000f904         cmp        rcx, rdx
000000000000f907         je         loc_f9df

                     loc_f90d:
000000000000f90d         mov        rbp, qword [rdi+rdx*8]                      ; CODE XREF=transit_state_bkref.isra.34+1577
000000000000f911         mov        rax, rbp
000000000000f914         shl        rax, 0x4
000000000000f918         add        rax, rsi
000000000000f91b         cmp        byte [rax+8], 0x9
000000000000f91f         jne        loc_f900

000000000000f921         cmp        r8, qword [rax]
000000000000f924         jne        loc_f900

000000000000f926         cmp        rbp, 0xffffffffffffffff
000000000000f92a         je         loc_f9df

000000000000f930         mov        rsi, qword [r12+0x10]
000000000000f935         mov        rcx, qword [r12]
000000000000f939         test       rsi, rsi
000000000000f93c         je         loc_fa00

                     loc_f942:
000000000000f942         mov        qword [rsp+0xe8+var_D8], r11                ; CODE XREF=transit_state_bkref.isra.34+1891
000000000000f947         mov        rdx, qword [r12+8]
000000000000f94c         sub        rsp, 0x8
000000000000f950         push       0x9
000000000000f952         mov        r9, rbx
000000000000f955         mov        r8, rbp
000000000000f958         mov        rdi, r14
000000000000f95b         call       check_arrival                               ; check_arrival
000000000000f960         pop        rdx
000000000000f961         cmp        eax, 0x1
000000000000f964         pop        rcx
000000000000f965         mov        r11, qword [rsp+0xe8+var_D8]
000000000000f96a         je         loc_f9df

000000000000f96c         test       eax, eax
000000000000f96e         jne        loc_f648

000000000000f974         mov        rax, qword [r12+0x20]
000000000000f979         cmp        rax, qword [r12+0x18]
000000000000f97e         je         loc_fb58

                     loc_f984:
000000000000f984         mov        esi, 0x28                                   ; argument "__size" for method j_calloc, CODE XREF=transit_state_bkref.isra.34+2236
000000000000f989         mov        edi, 0x1                                    ; argument "__nmemb" for method j_calloc
000000000000f98e         call       j_calloc                                    ; calloc
000000000000f993         test       rax, rax
000000000000f996         je         loc_fa39

000000000000f99c         mov        rdx, qword [r12+0x20]
000000000000f9a1         mov        rcx, qword [r12+0x28]
000000000000f9a6         mov        rsi, r12
000000000000f9a9         mov        r8, qword [rsp+0xe8+var_E0]
000000000000f9ae         mov        rdi, r14
000000000000f9b1         mov        qword [rcx+rdx*8], rax
000000000000f9b5         mov        rcx, qword [rsp+0xe8+var_B8]
000000000000f9ba         add        rdx, 0x1
000000000000f9be         mov        qword [rax], rbp
000000000000f9c1         mov        qword [rax+8], rbx
000000000000f9c5         mov        qword [r12+0x20], rdx
000000000000f9ca         mov        rdx, rax
000000000000f9cd         call       get_subexp_sub.isra.32                      ; get_subexp_sub.isra.32
000000000000f9d2         cmp        eax, 0x1
000000000000f9d5         mov        r11, qword [r14+8]
000000000000f9d9         ja         loc_f648

                     loc_f9df:
000000000000f9df         add        rbx, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1539, transit_state_bkref.isra.34+1552, transit_state_bkref.isra.34+1591, transit_state_bkref.isra.34+1626, transit_state_bkref.isra.34+1690
000000000000f9e3         add        r15, 0x8
000000000000f9e7         cmp        qword [rsp+0xe8+var_E0], rbx
000000000000f9ec         jge        loc_f898

                     loc_f9f2:
000000000000f9f2         mov        r13, r11                                    ; CODE XREF=transit_state_bkref.isra.34+1516, transit_state_bkref.isra.34+2149
000000000000f9f5         jmp        loc_f509
000000000000f9fa         align      512

                     loc_fa00:
000000000000fa00         mov        rsi, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+1644
000000000000fa03         mov        edi, 0x18                                   ; argument "__nmemb" for method j_calloc
000000000000fa08         mov        qword [rsp+0xe8+var_D0], r11
000000000000fa0d         sub        rsi, rcx
000000000000fa10         mov        qword [rsp+0xe8+var_D8], rcx
000000000000fa15         add        rsi, 0x1                                    ; argument "__size" for method j_calloc
000000000000fa19         call       j_calloc                                    ; calloc
000000000000fa1e         test       rax, rax
000000000000fa21         mov        rsi, rax
000000000000fa24         mov        qword [r12+0x10], rax
000000000000fa29         mov        rcx, qword [rsp+0xe8+var_D8]
000000000000fa2e         mov        r11, qword [rsp+0xe8+var_D0]
000000000000fa33         jne        loc_f942

                     loc_fa39:
000000000000fa39         mov        eax, 0xc                                    ; CODE XREF=transit_state_bkref.isra.34+1734, transit_state_bkref.isra.34+2215
000000000000fa3e         jmp        loc_f648
000000000000fa43         align      8

                     loc_fa48:
000000000000fa48         mov        rcx, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+685, transit_state_bkref.isra.34+799
000000000000fa4b         mov        rbx, r13
000000000000fa4e         mov        r13, r8
000000000000fa51         cmp        qword [rbx+0x20], rbp
000000000000fa55         jg         loc_f509

000000000000fa5b         test       rbp, rbp
000000000000fa5e         mov        r12, rcx
000000000000fa61         je         loc_f872

000000000000fa67         mov        r15, r11
000000000000fa6a         jmp        loc_f86e
000000000000fa6f         align      16

                     loc_fa70:
000000000000fa70         mov        rdx, qword [rsp+0xe8+var_D0]                ; CODE XREF=transit_state_bkref.isra.34+1156
000000000000fa75         mov        rdi, qword [rsp+0xe8+var_70]
000000000000fa7a         mov        rsi, rbp
000000000000fa7d         mov        qword [rsp+0xe8+var_C0], r11
000000000000fa82         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000fa87         mov        r11, qword [rsp+0xe8+var_C0]
000000000000fa8c         mov        rdx, qword [r14+0xb8]
000000000000fa93         mov        qword [r11], rax
000000000000fa96         cmp        qword [rdx+rbx*8], 0x0
000000000000fa9b         jne        loc_f7d3

                     loc_faa1:
000000000000faa1         mov        eax, dword [rsp+0xe8+var_5C]                ; CODE XREF=transit_state_bkref.isra.34+1277
000000000000faa8         test       eax, eax
000000000000faaa         je         loc_f7d3

000000000000fab0         jmp        loc_f648
000000000000fab5         align      8

                     loc_fab8:
000000000000fab8         mov        rax, qword [rsp+0xe8+var_D0]                ; CODE XREF=transit_state_bkref.isra.34+1309
000000000000fabd         mov        rcx, qword [rsp+0xe8+var_E0]
000000000000fac2         mov        rdi, r14
000000000000fac5         lea        r8, qword [rax+0x10]
000000000000fac9         lea        rbx, qword [rax+8]
000000000000facd         mov        rdx, r8
000000000000fad0         mov        rsi, rbx
000000000000fad3         mov        qword [rsp+0xe8+var_D8], r8
000000000000fad8         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
000000000000fadd         test       eax, eax
000000000000fadf         mov        dword [rsp+0xe8+var_5C], eax
000000000000fae6         jne        loc_f648

000000000000faec         mov        r8, qword [rsp+0xe8+var_D8]
000000000000faf1         mov        rsi, rbx
000000000000faf4         mov        rdi, r14
000000000000faf7         mov        rdx, r8
000000000000fafa         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
000000000000faff         test       eax, eax
000000000000fb01         mov        dword [rsp+0xe8+var_5C], eax
000000000000fb08         je         loc_f7f8

000000000000fb0e         jmp        loc_f648
000000000000fb13         align      8

                     loc_fb18:
000000000000fb18         mov        rdi, qword [rsp+0xe8+var_48]                ; argument "__ptr" for method j_free, CODE XREF=transit_state_bkref.isra.34+1208
000000000000fb20         call       j_free                                      ; free
000000000000fb25         mov        eax, dword [rsp+0xe8+var_5C]
000000000000fb2c         jmp        loc_f648

                     loc_fb31:
000000000000fb31         cmp        qword [r14+0x58], r13                       ; CODE XREF=transit_state_bkref.isra.34+1496
000000000000fb35         jle        loc_f9f2

000000000000fb3b         lea        esi, dword [r13+1]
000000000000fb3f         mov        rdi, r14
000000000000fb42         call       extend_buffers                              ; extend_buffers
000000000000fb47         test       eax, eax
000000000000fb49         jne        loc_f648

000000000000fb4f         mov        r11, qword [r14+8]
000000000000fb53         jmp        loc_f8ae

                     loc_fb58:
000000000000fb58         lea        rdx, qword [rax+rax+1]                      ; CODE XREF=transit_state_bkref.isra.34+1710
000000000000fb5d         mov        rdi, qword [r12+0x28]                       ; argument "__ptr" for method j_realloc
000000000000fb62         lea        rsi, qword [rdx*8]                          ; argument "__size" for method j_realloc
000000000000fb6a         mov        qword [rsp+0xe8+var_D8], rdx
000000000000fb6f         call       j_realloc                                   ; realloc
000000000000fb74         test       rax, rax
000000000000fb77         je         loc_fa39

000000000000fb7d         mov        rdx, qword [rsp+0xe8+var_D8]
000000000000fb82         mov        qword [r12+0x28], rax
000000000000fb87         mov        qword [r12+0x18], rdx
000000000000fb8c         jmp        loc_f984

                     loc_fb91:
000000000000fb91         mov        r13, qword [rsp+0xe8+var_B8]                ; CODE XREF=transit_state_bkref.isra.34+587
000000000000fb96         mov        rax, qword [r14+0xc8]
000000000000fb9d         jmp        loc_f690

                     loc_fba2:
000000000000fba2         mov        r12, qword [rsp+0xe8+var_E0]                ; CODE XREF=transit_state_bkref.isra.34+616
000000000000fba7         jmp        loc_f872

                     loc_fbac:
000000000000fbac         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=transit_state_bkref.isra.34+905
                        ; endp
000000000000fbb1         align      64                                          ; End of unwind block (FDE at 0x1a26c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     merge_state_with_log:
000000000000fbc0         push       r15                                         ; Begin of unwind block (FDE at 0x1a2cc), CODE XREF=re_search_internal+2012, re_search_internal+3011
000000000000fbc2         push       r14
000000000000fbc4         push       r13
000000000000fbc6         push       r12
000000000000fbc8         mov        r13, rdi
000000000000fbcb         push       rbp
000000000000fbcc         push       rbx
000000000000fbcd         mov        rbx, rsi
000000000000fbd0         sub        rsp, 0x38
000000000000fbd4         mov        r12, qword [rsi+0x48]
000000000000fbd8         mov        r14, qword [rsi+0xb8]
000000000000fbdf         mov        rax, qword [fs:0x28]
000000000000fbe8         mov        qword [rsp+0x68+var_40], rax
000000000000fbed         xor        eax, eax
000000000000fbef         mov        r15, qword [rsi+0x98]
000000000000fbf6         lea        rbp, qword [r12*8]
000000000000fbfe         add        r14, rbp
000000000000fc01         cmp        qword [rsi+0xc0], r12
000000000000fc08         jge        loc_fc50

000000000000fc0a         mov        qword [r14], rdx
000000000000fc0d         mov        rbp, rdx
000000000000fc10         mov        qword [rsi+0xc0], r12

                     loc_fc17:
000000000000fc17         cmp        qword [r15+0x98], 0x0                       ; CODE XREF=merge_state_with_log+273, merge_state_with_log+289, merge_state_with_log+365, merge_state_with_log+382
000000000000fc1f         jne        loc_fd48

                     loc_fc25:
000000000000fc25         mov        rcx, qword [rsp+0x68+var_40]                ; CODE XREF=merge_state_with_log+434, merge_state_with_log+473, merge_state_with_log+482
000000000000fc2a         xor        rcx, qword [fs:0x28]
000000000000fc33         mov        rax, rbp
000000000000fc36         jne        loc_fda7

000000000000fc3c         add        rsp, 0x38
000000000000fc40         pop        rbx
000000000000fc41         pop        rbp
000000000000fc42         pop        r12
000000000000fc44         pop        r13
000000000000fc46         pop        r14
000000000000fc48         pop        r15
000000000000fc4a         ret
                        ; endp
000000000000fc4b         align      16

                     loc_fc50:
000000000000fc50         mov        rax, qword [r14]                            ; CODE XREF=merge_state_with_log+72
000000000000fc53         test       rax, rax
000000000000fc56         je         loc_fd38

000000000000fc5c         test       rdx, rdx
000000000000fc5f         mov        rax, qword [rax+0x50]
000000000000fc63         je         loc_fcf0

000000000000fc69         mov        r14, qword [rdx+0x50]
000000000000fc6d         lea        rdi, qword [rsp+0x68+var_58]
000000000000fc72         mov        rdx, rax
000000000000fc75         mov        qword [rsp+0x68+var_68], rdi
000000000000fc79         mov        rsi, r14
000000000000fc7c         call       re_node_set_init_union                      ; re_node_set_init_union
000000000000fc81         test       eax, eax
000000000000fc83         mov        dword [r13], eax
000000000000fc87         jne        loc_fda0

000000000000fc8d         mov        rax, qword [rbx+0x48]
000000000000fc91         mov        edx, dword [rbx+0xa0]
000000000000fc97         mov        rdi, rbx
000000000000fc9a         lea        rsi, qword [rax-1]
000000000000fc9e         call       re_string_context_at                        ; re_string_context_at
000000000000fca3         mov        r8, qword [rbx+0xb8]
000000000000fcaa         mov        rdx, qword [rsp+0x68+var_68]
000000000000fcae         mov        ecx, eax
000000000000fcb0         mov        rsi, r15
000000000000fcb3         mov        rdi, r13
000000000000fcb6         add        r8, rbp
000000000000fcb9         mov        qword [rsp+0x68+var_60], r8
000000000000fcbe         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000fcc3         mov        r8, qword [rsp+0x68+var_60]
000000000000fcc8         test       r14, r14
000000000000fccb         mov        rbp, rax
000000000000fcce         mov        qword [r8], rax
000000000000fcd1         je         loc_fc17

000000000000fcd7         mov        rdi, qword [rsp+0x68+var_48]                ; argument "__ptr" for method j_free
000000000000fcdc         call       j_free                                      ; free
000000000000fce1         jmp        loc_fc17
000000000000fce6         align      16

                     loc_fcf0:
000000000000fcf0         movdqu     xmm0, xmmword [rax]                         ; CODE XREF=merge_state_with_log+163
000000000000fcf4         mov        rdi, rbx
000000000000fcf7         mov        edx, dword [rsi+0xa0]
000000000000fcfd         lea        rsi, qword [r12-1]
000000000000fd02         movaps     xmmword [rsp+0x68+var_58], xmm0
000000000000fd07         mov        rax, qword [rax+0x10]
000000000000fd0b         mov        qword [rsp+0x68+var_48], rax
000000000000fd10         call       re_string_context_at                        ; re_string_context_at
000000000000fd15         lea        rdx, qword [rsp+0x68+var_58]
000000000000fd1a         mov        ecx, eax
000000000000fd1c         mov        rsi, r15
000000000000fd1f         mov        rdi, r13
000000000000fd22         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000fd27         mov        rbp, rax
000000000000fd2a         mov        qword [r14], rax
000000000000fd2d         jmp        loc_fc17
000000000000fd32         align      8

                     loc_fd38:
000000000000fd38         mov        qword [r14], rdx                            ; CODE XREF=merge_state_with_log+150
000000000000fd3b         mov        rbp, rdx
000000000000fd3e         jmp        loc_fc17
000000000000fd43         align      8

                     loc_fd48:
000000000000fd48         test       rbp, rbp                                    ; CODE XREF=merge_state_with_log+95
000000000000fd4b         je         loc_fda0

000000000000fd4d         lea        r14, qword [rbp+0x10]
000000000000fd51         lea        r15, qword [rbp+0x18]
000000000000fd55         mov        rcx, r12
000000000000fd58         mov        rdi, rbx
000000000000fd5b         mov        rdx, r15
000000000000fd5e         mov        rsi, r14
000000000000fd61         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
000000000000fd66         test       eax, eax
000000000000fd68         mov        dword [r13], eax
000000000000fd6c         jne        loc_fda0

000000000000fd6e         test       byte [rbp+0x68], 0x40
000000000000fd72         je         loc_fc25

000000000000fd78         mov        rdx, r15
000000000000fd7b         mov        rsi, r14
000000000000fd7e         mov        rdi, rbx
000000000000fd81         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
000000000000fd86         test       eax, eax
000000000000fd88         mov        dword [r13], eax
000000000000fd8c         jne        loc_fda0

000000000000fd8e         mov        rax, qword [rbx+0xb8]
000000000000fd95         mov        rbp, qword [rax+r12*8]
000000000000fd99         jmp        loc_fc25
000000000000fd9e         align      32

                     loc_fda0:
000000000000fda0         xor        ebp, ebp                                    ; CODE XREF=merge_state_with_log+199, merge_state_with_log+395, merge_state_with_log+428, merge_state_with_log+460
000000000000fda2         jmp        loc_fc25

                     loc_fda7:
000000000000fda7         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=merge_state_with_log+118
                        ; endp
000000000000fdac         align      16                                          ; End of unwind block (FDE at 0x1a2cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152


                     sift_states_backward:
000000000000fdb0         push       r15                                         ; Begin of unwind block (FDE at 0x1a318), CODE XREF=re_search_internal+2510, re_search_internal+4661, update_cur_sifted_state+1785
000000000000fdb2         push       r14
000000000000fdb4         mov        r14, rdi
000000000000fdb7         push       r13
000000000000fdb9         push       r12
000000000000fdbb         mov        r13, rsi
000000000000fdbe         push       rbp
000000000000fdbf         push       rbx
000000000000fdc0         sub        rsp, 0x68
000000000000fdc4         mov        r15, qword [rsi+0x18]
000000000000fdc8         mov        rbx, qword [rsi+0x10]
000000000000fdcc         mov        qword [rsp+0x98+var_98], rdi
000000000000fdd0         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
000000000000fdd5         mov        qword [rsp+0x98+var_58], 0x1
000000000000fdde         mov        rax, qword [fs:0x28]
000000000000fde7         mov        qword [rsp+0x98+var_40], rax
000000000000fdec         xor        eax, eax
000000000000fdee         mov        qword [rsp+0x98+var_50], 0x1
000000000000fdf7         call       j_malloc                                    ; malloc
000000000000fdfc         test       rax, rax
000000000000fdff         mov        qword [rsp+0x98+var_48], rax
000000000000fe04         je         loc_100e4

000000000000fe0a         lea        rcx, qword [rsp+0x98+var_58]
000000000000fe0f         mov        qword [rax], rbx
000000000000fe12         mov        rdx, r15
000000000000fe15         mov        rsi, r13
000000000000fe18         mov        rdi, r14
000000000000fe1b         mov        qword [rsp+0x98+var_88], rcx
000000000000fe20         call       update_cur_sifted_state                     ; update_cur_sifted_state
000000000000fe25         test       eax, eax
000000000000fe27         jne        loc_100b5

000000000000fe2d         lea        rax, qword [r15*8]
000000000000fe35         test       r15, r15
000000000000fe38         mov        dword [rsp+0x98+var_6C], 0x0
000000000000fe40         mov        qword [rsp+0x98+var_90], rax
000000000000fe45         lea        rax, qword [r13+0x30]
000000000000fe49         mov        qword [rsp+0x98+var_60], rax
000000000000fe4e         jle        loc_10057

                     loc_fe54:
000000000000fe54         mov        rdi, qword [r13]                            ; CODE XREF=sift_states_backward+673
000000000000fe58         mov        rax, qword [rsp+0x98+var_90]
000000000000fe5d         cmp        qword [rdi+rax], 0x0
000000000000fe62         je         loc_10078

000000000000fe68         mov        rax, qword [rsp+0x98+var_98]
000000000000fe6c         mov        dword [rsp+0x98+var_6C], 0x0
000000000000fe74         mov        ecx, dword [rsp+0x98+var_6C]
000000000000fe78         cmp        dword [rax+0xe0], ecx
000000000000fe7e         jl         loc_10091

                     loc_fe84:
000000000000fe84         mov        rbx, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+731
000000000000fe88         mov        rdi, qword [rsp+0x98+var_90]
000000000000fe8d         sub        r15, 0x1
000000000000fe91         mov        qword [rsp+0x98+var_50], 0x0
000000000000fe9a         mov        rax, qword [rbx+0xb8]
000000000000fea1         mov        r12, qword [rax+rdi-8]
000000000000fea6         test       r12, r12
000000000000fea9         je         loc_10030

000000000000feaf         cmp        qword [r12+0x28], 0x0
000000000000feb5         mov        r14, qword [rbx+0x98]
000000000000febc         jle        loc_10030

000000000000fec2         xor        ebx, ebx
000000000000fec4         jmp        loc_ff6b
000000000000fec9         align      16

                     loc_fed0:
000000000000fed0         mov        rdi, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+469, sift_states_backward+625, sift_states_backward+700
000000000000fed4         mov        rdx, r15
000000000000fed7         call       check_node_accept                           ; check_node_accept
000000000000fedc         test       al, al
000000000000fede         je         loc_ff5c

000000000000fee0         mov        rax, qword [r13]
000000000000fee4         mov        rcx, qword [rsp+0x98+var_90]
000000000000fee9         mov        rax, qword [rax+rcx]
000000000000feed         test       rax, rax
000000000000fef0         je         loc_ff5c

000000000000fef2         mov        rdx, qword [r14+0x18]
000000000000fef6         mov        rdi, qword [rax+0x10]
000000000000fefa         lea        rsi, qword [rax+0x18]
000000000000fefe         mov        rdx, qword [rdx+rbp*8]
000000000000ff02         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000ff07         test       rax, rax
000000000000ff0a         je         loc_ff5c

000000000000ff0c         mov        r10d, 0x1

                     loc_ff12:
000000000000ff12         cmp        qword [r13+0x28], 0x0                       ; CODE XREF=sift_states_backward+555, sift_states_backward+608, loc_10060
000000000000ff17         je         loc_ff47

000000000000ff19         mov        rax, qword [r14+0x18]
000000000000ff1d         sub        rsp, 0x8
000000000000ff21         lea        rsi, qword [r13+0x28]
000000000000ff25         lea        r8, qword [r10+r15]
000000000000ff29         mov        r9, rbp
000000000000ff2c         mov        rcx, qword [rax+rbp*8]
000000000000ff30         push       r15
000000000000ff32         mov        rdx, qword [rsp+0xa8+var_60]
000000000000ff37         mov        rdi, qword [rsp+0xa8+var_98]
000000000000ff3c         call       check_dst_limits.isra.13                    ; check_dst_limits.isra.13
000000000000ff41         test       al, al
000000000000ff43         pop        rdx
000000000000ff44         pop        rcx
000000000000ff45         jne        loc_ff5c

                     loc_ff47:
000000000000ff47         mov        rdi, qword [rsp+0x98+var_88]                ; CODE XREF=sift_states_backward+359
000000000000ff4c         mov        rsi, rbp
000000000000ff4f         call       re_node_set_insert                          ; re_node_set_insert
000000000000ff54         test       al, al
000000000000ff56         je         loc_100b0

                     loc_ff5c:
000000000000ff5c         add        rbx, 0x1                                    ; CODE XREF=sift_states_backward+302, sift_states_backward+320, sift_states_backward+346, sift_states_backward+405
000000000000ff60         cmp        rbx, qword [r12+0x28]
000000000000ff65         jge        loc_10030

                     loc_ff6b:
000000000000ff6b         mov        rax, qword [r12+0x30]                       ; CODE XREF=sift_states_backward+276
000000000000ff70         mov        rsi, qword [r14]
000000000000ff73         mov        rbp, qword [rax+rbx*8]
000000000000ff77         mov        r9, rbp
000000000000ff7a         shl        r9, 0x4
000000000000ff7e         add        rsi, r9
000000000000ff81         test       byte [rsi+0xa], 0x10
000000000000ff85         je         loc_fed0

000000000000ff8b         mov        rcx, qword [rsp+0x98+var_98]
000000000000ff8f         mov        rax, qword [r13+0x18]
000000000000ff93         mov        r8, r15
000000000000ff96         mov        rdx, rbp
000000000000ff99         mov        qword [rsp+0x98+var_80], r9
000000000000ff9e         mov        r11, qword [rcx+0x98]
000000000000ffa5         mov        qword [rsp+0x98+var_78], rax
000000000000ffaa         mov        rdi, qword [r11]
000000000000ffad         lea        rsi, qword [r11+0xd8]
000000000000ffb4         mov        qword [rsp+0x98+var_68], r11
000000000000ffb9         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000000ffbe         movsxd     r10, eax
000000000000ffc1         mov        r9, qword [rsp+0x98+var_80]
000000000000ffc6         cmp        r10d, 0x0
000000000000ffca         jle        loc_10060

000000000000ffd0         movsxd     rax, r10d
000000000000ffd3         add        rax, r15
000000000000ffd6         cmp        qword [rsp+0x98+var_78], rax
000000000000ffdb         jl         loc_ff12

000000000000ffe1         mov        rdx, qword [r13]
000000000000ffe5         mov        r11, qword [rsp+0x98+var_68]
000000000000ffea         mov        rax, qword [rdx+rax*8]
000000000000ffee         test       rax, rax
000000000000fff1         je         loc_10066

000000000000fff3         mov        rdx, qword [r11+0x18]
000000000000fff7         mov        rdi, qword [rax+0x10]
000000000000fffb         lea        rsi, qword [rax+0x18]
000000000000ffff         mov        qword [rsp+0x98+var_80], r9
0000000000010004         mov        rdx, qword [rdx+rbp*8]
0000000000010008         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000001000d         test       rax, rax
0000000000010010         jne        loc_ff12

0000000000010016         mov        r9, qword [rsp+0x98+var_80]
000000000001001b         mov        rsi, qword [r14]
000000000001001e         add        rsi, r9
0000000000010021         jmp        loc_fed0
0000000000010026         align      16

                     loc_10030:
0000000000010030         mov        rcx, qword [rsp+0x98+var_88]                ; CODE XREF=sift_states_backward+249, sift_states_backward+268, sift_states_backward+437
0000000000010035         mov        rdi, qword [rsp+0x98+var_98]
0000000000010039         mov        rdx, r15
000000000001003c         mov        rsi, r13
000000000001003f         call       update_cur_sifted_state                     ; update_cur_sifted_state
0000000000010044         test       eax, eax
0000000000010046         jne        loc_100b5

0000000000010048         sub        qword [rsp+0x98+var_90], 0x8
000000000001004e         test       r15, r15
0000000000010051         jne        loc_fe54

                     loc_10057:
0000000000010057         xor        eax, eax                                    ; CODE XREF=sift_states_backward+158
0000000000010059         jmp        loc_100b5
000000000001005b         align      32

                     loc_10060:
0000000000010060         jne        loc_ff12                                    ; CODE XREF=sift_states_backward+538

                     loc_10066:
0000000000010066         mov        rsi, qword [r14]                            ; CODE XREF=sift_states_backward+577
0000000000010069         add        rsi, r9
000000000001006c         jmp        loc_fed0
0000000000010071         align      8

                     loc_10078:
0000000000010078         mov        rax, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+178
000000000001007c         add        dword [rsp+0x98+var_6C], 0x1
0000000000010081         mov        ecx, dword [rsp+0x98+var_6C]
0000000000010085         cmp        dword [rax+0xe0], ecx
000000000001008b         jge        loc_fe84

                     loc_10091:
0000000000010091         mov        rdx, qword [rsp+0x98+var_90]                ; argument "__n" for method j_memset, CODE XREF=sift_states_backward+206
0000000000010096         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000010098         call       j_memset                                    ; memset
000000000001009d         mov        rdi, qword [rsp+0x98+var_48]                ; argument "__ptr" for method j_free
00000000000100a2         call       j_free                                      ; free
00000000000100a7         xor        eax, eax
00000000000100a9         jmp        loc_100c5
00000000000100ab         align      16

                     loc_100b0:
00000000000100b0         mov        eax, 0xc                                    ; CODE XREF=sift_states_backward+422

                     loc_100b5:
00000000000100b5         mov        rdi, qword [rsp+0x98+var_48]                ; argument "__ptr" for method j_free, CODE XREF=sift_states_backward+119, sift_states_backward+662, sift_states_backward+681
00000000000100ba         mov        dword [rsp+0x98+var_98], eax
00000000000100bd         call       j_free                                      ; free
00000000000100c2         mov        eax, dword [rsp+0x98+var_98]

                     loc_100c5:
00000000000100c5         mov        rdx, qword [rsp+0x98+var_40]                ; CODE XREF=sift_states_backward+761, sift_states_backward+825
00000000000100ca         xor        rdx, qword [fs:0x28]
00000000000100d3         jne        loc_100eb

00000000000100d5         add        rsp, 0x68
00000000000100d9         pop        rbx
00000000000100da         pop        rbp
00000000000100db         pop        r12
00000000000100dd         pop        r13
00000000000100df         pop        r14
00000000000100e1         pop        r15
00000000000100e3         ret
                        ; endp

                     loc_100e4:
00000000000100e4         mov        eax, 0xc                                    ; CODE XREF=sift_states_backward+84
00000000000100e9         jmp        loc_100c5

                     loc_100eb:
00000000000100eb         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sift_states_backward+803
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_68: int32_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int32_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int32_t, -184
        ;    var_BA: int8_t, -186
        ;    var_BB: int8_t, -187
        ;    var_BC: int8_t, -188
        ;    var_BD: int8_t, -189
        ;    var_BE: int8_t, -190
        ;    var_BF: int8_t, -191
        ;    var_C0: int8_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int32_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_158: int64_t, -344
        ;    var_168: -360
        ;    var_170: int64_t, -368
        ;    var_178: int64_t, -376
        ;    var_180: int64_t, -384
        ;    var_188: int64_t, -392
        ;    var_190: int64_t, -400
        ;    var_194: int32_t, -404
        ;    var_198: int32_t, -408
        ;    var_199: int8_t, -409
        ;    var_19A: int8_t, -410
        ;    var_1A0: int32_t, -416
        ;    var_1A8: int64_t, -424
        ;    var_1B0: int64_t, -432
        ;    var_1B8: int64_t, -440
        ;    var_1BC: int32_t, -444
        ;    var_1C0: int32_t, -448
        ;    var_1C8: int64_t, -456
        ;    var_1D0: int64_t, -464
        ;    var_1D8: int64_t, -472
        ;    var_1E0: int64_t, -480
        ;    var_1E8: int64_t, -488
        ;    var_1F0: int64_t, -496
        ;    var_1F8: int64_t, -504
        ;    var_200: int64_t, -512
        ;    var_208: int64_t, -520
        ;    var_20C: int32_t, -524
        ;    var_210: int32_t, -528
        ;    var_218: int64_t, -536
        ;    var_220: int64_t, -544
        ;    var_228: int64_t, -552
        ;    var_230: int64_t, -560
        ;    var_238: int64_t, -568
        ;    var_240: int64_t, -576
        ;    var_248: int64_t, -584
        ;    var_250: int64_t, -592
        ;    var_258: int64_t, -600
        ;    var_260: int64_t, -608
        ;    var_268: int64_t, -616


                     re_search_internal:
00000000000100f0         push       r15                                         ; End of unwind block (FDE at 0x1a318), Begin of unwind block (FDE at 0x1a378), CODE XREF=re_search_stub+266, rpl_regexec+88
00000000000100f2         push       r14
00000000000100f4         push       r13
00000000000100f6         push       r12
00000000000100f8         mov        r13, r9
00000000000100fb         push       rbp
00000000000100fc         push       rbx
00000000000100fd         mov        rbp, rcx
0000000000010100         mov        ecx, 0x20
0000000000010105         mov        r12, r8
0000000000010108         sub        rsp, aLib64ldlinuxx8                        ; "/lib64/ld-linux-x86-64.so.2"
000000000001010f         mov        rbx, qword [rdi]
0000000000010112         mov        rax, qword [rsp+0x268+arg_8]
000000000001011a         mov        qword [rsp+0x268+var_220], rdi
000000000001011f         mov        qword [rsp+0x268+var_1F0], rsi
0000000000010124         mov        rsi, rdi
0000000000010127         lea        rdi, qword [rsp+0x268+var_148]
000000000001012f         mov        qword [rsp+0x268+var_1E0], rdx
0000000000010137         mov        qword [rsp+0x268+var_230], rbx
000000000001013c         mov        qword [rsp+0x268+var_1B0], rax
0000000000010144         mov        qword [rsp+0x268+var_268], rdi
0000000000010148         mov        rax, qword [fs:0x28]
0000000000010151         mov        qword [rsp+0x268+var_40], rax
0000000000010159         xor        eax, eax
000000000001015b         rep stosq  qword [rdi], rax
000000000001015e         mov        rdi, qword [rsi+0x20]
0000000000010162         mov        qword [rsp+0x268+var_B0], rbx
000000000001016a         test       rdi, rdi
000000000001016d         mov        qword [rsp+0x268+var_200], rdi
0000000000010172         je         loc_10196

0000000000010174         movzx      edx, byte [rsi+0x38]
0000000000010178         test       dl, 0x8
000000000001017b         je         loc_10610

0000000000010181         cmp        rbp, r8
0000000000010184         je         loc_10610

000000000001018a         and        edx, 0x1
000000000001018d         cmove      rax, rdi
0000000000010191         mov        qword [rsp+0x268+var_200], rax

                     loc_10196:
0000000000010196         mov        rax, qword [rsp+0x268+var_220]              ; CODE XREF=re_search_internal+130, re_search_internal+1321
000000000001019b         mov        qword [rsp+0x268+var_1D0], 0x0
00000000000101a7         mov        rax, qword [rax+0x30]
00000000000101ab         cmp        rax, qword [rsp+0x268+arg_0]
00000000000101b3         jae        loc_101d4

00000000000101b5         mov        rcx, qword [rsp+0x268+arg_0]
00000000000101bd         lea        rdx, qword [rcx-1]
00000000000101c1         sub        rdx, rax
00000000000101c4         sub        qword [rsp+0x268+arg_0], rdx
00000000000101cc         mov        qword [rsp+0x268+var_1D0], rdx

                     loc_101d4:
00000000000101d4         mov        rsi, qword [rsp+0x268+var_220]              ; CODE XREF=re_search_internal+195
00000000000101d9         cmp        qword [rsi+0x10], 0x0
00000000000101de         je         loc_11070

00000000000101e4         mov        rdi, qword [rsp+0x268+var_230]
00000000000101e9         mov        rax, qword [rdi+0x48]
00000000000101ed         test       rax, rax
00000000000101f0         je         loc_11070

00000000000101f6         mov        rdx, qword [rdi+0x50]
00000000000101fa         test       rdx, rdx
00000000000101fd         je         loc_11070

0000000000010203         mov        rcx, qword [rdi+0x58]
0000000000010207         test       rcx, rcx
000000000001020a         je         loc_11070

0000000000010210         cmp        qword [rdi+0x60], 0x0
0000000000010215         je         loc_11070

000000000001021b         cmp        qword [rax+0x10], 0x0
0000000000010220         jne        loc_10258

0000000000010222         cmp        qword [rdx+0x10], 0x0
0000000000010227         jne        loc_10258

0000000000010229         cmp        qword [rcx+0x10], 0x0
000000000001022e         je         loc_10236

0000000000010230         cmp        byte [rsi+0x38], 0x0
0000000000010234         js         loc_10258

                     loc_10236:
0000000000010236         test       rbp, rbp                                    ; CODE XREF=re_search_internal+318
0000000000010239         je         loc_1024c

000000000001023b         test       r12, r12
000000000001023e         mov        dword [rsp+0x268+var_20C], 0x1
0000000000010246         jne        loc_10c69

                     loc_1024c:
000000000001024c         xor        r12d, r12d                                  ; CODE XREF=re_search_internal+329
000000000001024f         xor        ebp, ebp
0000000000010251         nop        dword [rax]

                     loc_10258:
0000000000010258         cmp        qword [rsp+0x268+arg_0], 0x0                ; CODE XREF=re_search_internal+304, re_search_internal+311, re_search_internal+324
0000000000010261         mov        dword [rsp+0x268+var_210], 0x1
0000000000010269         je         loc_105f0

                     loc_1026f:
000000000001026f         mov        r11, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+1303
0000000000010274         mov        rax, qword [rsp+0x268+var_220]
0000000000010279         mov        rdi, qword [rsp+0x268+var_1E0]
0000000000010281         mov        rsi, qword [r11+0x10]
0000000000010285         mov        rbx, qword [rax+0x28]
0000000000010289         mov        edx, dword [r11+0xb4]
0000000000010290         mov        rax, qword [rax+0x18]
0000000000010294         mov        qword [rsp+0x268+var_F0], rdi
000000000001029c         mov        qword [rsp+0x268+var_F8], rdi
00000000000102a4         mov        qword [rsp+0x268+var_260], rsi
00000000000102a9         lea        rsi, qword [rsi+1]
00000000000102ad         mov        qword [rsp+0x268+var_1B8], rbx
00000000000102b5         movsxd     rcx, edx
00000000000102b8         shr        rax, 0x16
00000000000102bc         mov        qword [rsp+0x268+var_D0], rbx
00000000000102c4         and        eax, 0x1
00000000000102c7         cmp        rsi, rcx
00000000000102ca         mov        dword [rsp+0x268+var_B8], edx
00000000000102d1         cmovl      rsi, rcx
00000000000102d5         lea        rcx, qword [rdi+1]
00000000000102d9         mov        byte [rsp+0x268+var_C0], al
00000000000102e0         mov        qword [rsp+0x268+var_E0], rdi
00000000000102e8         mov        qword [rsp+0x268+var_E8], rdi
00000000000102f0         cmp        rsi, rcx
00000000000102f3         mov        rdi, qword [rsp+0x268+var_268]
00000000000102f7         cmovg      rsi, rcx
00000000000102fb         test       rbx, rbx
00000000000102fe         mov        rcx, qword [rsp+0x268+var_1F0]
0000000000010303         setne      bl
0000000000010306         or         eax, ebx
0000000000010308         mov        byte [rsp+0x268+var_BD], al
000000000001030f         movzx      eax, byte [r11+0xb0]
0000000000010317         mov        qword [rsp+0x268+var_148], rcx
000000000001031f         mov        edx, eax
0000000000010321         shr        al, 0x3
0000000000010324         shr        dl, 0x2
0000000000010327         and        eax, 0x1
000000000001032a         and        edx, 0x1
000000000001032d         mov        byte [rsp+0x268+var_BE], al
0000000000010334         mov        byte [rsp+0x268+var_BF], dl
000000000001033b         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
0000000000010340         test       eax, eax
0000000000010342         mov        dword [rsp+0x268+var_20C], eax
0000000000010346         jne        loc_10c40

000000000001034c         mov        rdi, qword [rsp+0x268+var_230]
0000000000010351         lea        rax, qword [rdi+0xb8]
0000000000010358         mov        qword [rsp+0x268+var_C8], rax
0000000000010360         movzx      eax, byte [rdi+0xb0]
0000000000010367         mov        byte [rsp+0x268+var_260], al
000000000001036b         shr        al, 0x4
000000000001036e         and        eax, 0x1
0000000000010371         cmp        byte [rsp+0x268+var_BD], 0x0
0000000000010379         mov        byte [rsp+0x268+var_BA], al
0000000000010380         jne        loc_103a5

0000000000010382         mov        rsi, qword [rsp+0x268+var_230]
0000000000010387         mov        rax, qword [rsp+0x268+var_1F0]
000000000001038c         cmp        dword [rsi+0xb4], 0x1
0000000000010393         mov        qword [rsp+0x268+var_140], rax
000000000001039b         mov        rax, qword [rsp+0x268+var_1E0]
00000000000103a3         jle        loc_103a7

                     loc_103a5:
00000000000103a5         xor        eax, eax                                    ; CODE XREF=re_search_internal+656

                     loc_103a7:
00000000000103a7         mov        qword [rsp+0x268+var_118], rax              ; CODE XREF=re_search_internal+691
00000000000103af         mov        qword [rsp+0x268+var_110], rax
00000000000103b7         mov        rax, qword [rsp+0x268+var_220]
00000000000103bc         mov        qword [rsp+0x268+var_E0], r13
00000000000103c4         mov        qword [rsp+0x268+var_E8], r13
00000000000103cc         movzx      eax, byte [rax+0x38]
00000000000103d0         mov        byte [rsp+0x268+var_260], al
00000000000103d4         shr        al, 0x7
00000000000103d7         mov        byte [rsp+0x268+var_BB], al
00000000000103de         mov        rax, qword [rsp+0x268+var_230]
00000000000103e3         mov        r14, qword [rax+0x98]
00000000000103ea         mov        eax, dword [rsp+0x268+arg_10]
00000000000103f1         mov        qword [rsp+0x268+var_A0], 0xffffffffffffffff
00000000000103fd         lea        r13, qword [r14+r14]
0000000000010401         mov        dword [rsp+0x268+var_A8], eax
0000000000010408         test       r13, r13
000000000001040b         jle        loc_1045f

000000000001040d         movabs     rax, 0x666666666666666
0000000000010417         cmp        r13, rax
000000000001041a         jg         loc_11160

0000000000010420         lea        rdi, qword [r13+r14*8]
0000000000010425         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
0000000000010429         call       j_malloc                                    ; malloc
000000000001042e         mov        rdi, r14
0000000000010431         mov        r15, rax
0000000000010434         mov        qword [rsp+0x268+var_70], rax
000000000001043c         shl        rdi, 0x4                                    ; argument "__size" for method j_malloc
0000000000010440         call       j_malloc                                    ; malloc
0000000000010445         test       rax, rax
0000000000010448         mov        qword [rsp+0x268+var_50], rax
0000000000010450         je         loc_11160

0000000000010456         test       r15, r15
0000000000010459         je         loc_11160

                     loc_1045f:
000000000001045f         cmp        qword [rsp+0x268+arg_0], 0x1                ; CODE XREF=re_search_internal+795
0000000000010468         mov        qword [rsp+0x268+var_78], r13
0000000000010470         mov        dword [rsp+0x268+var_68], 0x1
000000000001047b         mov        qword [rsp+0x268+var_58], r13
0000000000010483         jbe        loc_115a8

                     loc_10489:
0000000000010489         mov        rax, qword [rsp+0x268+var_108]              ; CODE XREF=re_search_internal+5316
0000000000010491         movabs     rdx, 0x1ffffffffffffffe
000000000001049b         cmp        rax, rdx
000000000001049e         ja         loc_11160

00000000000104a4         lea        rdi, qword [0x8+rax*8]                      ; argument "__size" for method j_malloc
00000000000104ac         call       j_malloc                                    ; malloc
00000000000104b1         test       rax, rax
00000000000104b4         mov        rdi, rax
00000000000104b7         mov        qword [rsp+0x268+var_90], rax
00000000000104bf         je         loc_111b0

                     loc_104c5:
00000000000104c5         mov        eax, dword [rsp+0x268+arg_10]               ; CODE XREF=re_search_internal+5334
00000000000104cc         mov        qword [rsp+0x268+var_190], rbp
00000000000104d4         and        eax, 0x1
00000000000104d7         cmp        eax, 0x1
00000000000104da         sbb        eax, eax
00000000000104dc         and        eax, 0x2
00000000000104df         add        eax, 0x4
00000000000104e2         mov        dword [rsp+0x268+var_D8], eax
00000000000104e9         xor        eax, eax
00000000000104eb         cmp        rbp, r12
00000000000104ee         setle      al
00000000000104f1         lea        eax, dword [rax+rax-1]
00000000000104f5         mov        dword [rsp+0x268+var_1BC], eax
00000000000104fc         mov        rax, r12
00000000000104ff         cmovle     rax, rbp
0000000000010503         mov        qword [rsp+0x268+var_1D8], rax
000000000001050b         mov        rax, r12
000000000001050e         cmovge     rax, rbp
0000000000010512         cmp        qword [rsp+0x268+var_200], 0x0
0000000000010518         mov        qword [rsp+0x268+var_1F8], rax
000000000001051d         mov        rax, qword [rsp+0x268+var_230]
0000000000010522         mov        esi, dword [rax+0xb4]
0000000000010528         mov        eax, 0x8
000000000001052d         mov        dword [rsp+0x268+var_1A0], esi
0000000000010534         je         loc_1056f

0000000000010536         cmp        esi, 0x1
0000000000010539         mov        ecx, 0x4
000000000001053e         je         loc_1055e

0000000000010540         mov        rax, qword [rsp+0x268+var_220]
0000000000010545         test       byte [rax+0x1a], 0x40
0000000000010549         jne        loc_112ce

000000000001054f         cmp        qword [rsp+0x268+var_1B8], 0x0
0000000000010558         jne        loc_112ce

                     loc_1055e:
000000000001055e         xor        edx, edx                                    ; CODE XREF=re_search_internal+1102, re_search_internal+4576
0000000000010560         cmp        rbp, r12
0000000000010563         movzx      eax, bl
0000000000010566         setle      dl
0000000000010569         or         eax, ecx
000000000001056b         add        edx, edx
000000000001056d         or         eax, edx

                     loc_1056f:
000000000001056f         cmp        rbp, qword [rsp+0x268+var_1F8]              ; CODE XREF=re_search_internal+1092
0000000000010574         setg       cl
0000000000010577         cmp        rbp, qword [rsp+0x268+var_1D8]
000000000001057f         setl       dl
0000000000010582         or         cl, dl
0000000000010584         jne        loc_11059

000000000001058a         lea        rcx, qword [rsp+0x268+var_190]
0000000000010592         cmp        rbp, r12
0000000000010595         mov        edx, 0x0
000000000001059a         cmovle     rdx, rcx
000000000001059e         test       rdx, rdx
00000000000105a1         mov        qword [rsp+0x268+var_1A8], rdx
00000000000105a9         setne      byte [rsp+0x268+var_199]
00000000000105b1         sub        eax, 0x4
00000000000105b4         mov        dword [rsp+0x268+var_1C0], eax
00000000000105bb         lea        rax, qword [rsp+0x268+var_198]
00000000000105c3         mov        qword [rsp+0x268+var_240], rax

                     loc_105c8:
00000000000105c8         mov        eax, dword [rsp+0x268+var_1C0]              ; CODE XREF=re_search_internal+3939
00000000000105cf         cmp        eax, 0x4
00000000000105d2         ja         loc_111bd

00000000000105d8         lea        rcx, qword [switch_table_17760]             ; switch_table_17760
00000000000105df         movsxd     rax, dword [rcx+rax*4]
00000000000105e3         add        rax, rcx
00000000000105e6         jmp        rax                                         ; switch statement using table at 0x17760, with 5 cases, 0x1061e,0x106c8,0x10b42,0x10bb4
00000000000105e8         align      16

                     loc_105f0:
00000000000105f0         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+377
00000000000105f5         cmp        qword [rax+0x98], 0x0
00000000000105fd         setne      al
0000000000010600         movzx      eax, al
0000000000010603         mov        dword [rsp+0x268+var_210], eax
0000000000010607         jmp        loc_1026f
000000000001060c         align      16

                     loc_10610:
0000000000010610         mov        qword [rsp+0x268+var_200], 0x0              ; CODE XREF=re_search_internal+139, re_search_internal+148
0000000000010619         jmp        loc_10196

                     loc_1061e:
000000000001061e         cmp        qword [rsp+0x268+var_1F8], rbp              ; case 2, CODE XREF=re_search_internal+1270
0000000000010623         jle        loc_1067f

0000000000010625         mov        rax, qword [rsp+0x268+var_1F0]
000000000001062a         mov        rdi, qword [rsp+0x268+var_200]
000000000001062f         movzx      edx, byte [rax+rbp]
0000000000010633         lea        rax, qword [rbp+1]
0000000000010637         cmp        byte [rdi+rdx], 0x0
000000000001063b         jne        loc_106c8

0000000000010641         mov        rsi, qword [rsp+0x268+var_200]
0000000000010646         mov        rcx, qword [rsp+0x268+var_1F8]
000000000001064b         mov        rdi, qword [rsp+0x268+var_1F0]
0000000000010650         jmp        loc_1066a
0000000000010652         align      8

                     loc_10658:
0000000000010658         movzx      edx, byte [rdi+rax]                         ; CODE XREF=re_search_internal+1408
000000000001065c         lea        rax, qword [rax+1]
0000000000010660         cmp        byte [rsi+rdx], 0x0
0000000000010664         jne        loc_11801

                     loc_1066a:
000000000001066a         cmp        rcx, rax                                    ; CODE XREF=re_search_internal+1376
000000000001066d         mov        rbp, rax
0000000000010670         jne        loc_10658

                     loc_10672:
0000000000010672         mov        rax, qword [rsp+0x268+var_1F8]              ; CODE XREF=re_search_internal+2751
0000000000010677         mov        qword [rsp+0x268+var_190], rax

                     loc_1067f:
000000000001067f         cmp        qword [rsp+0x268+var_1F8], rbp              ; CODE XREF=re_search_internal+1331, re_search_internal+2647
0000000000010684         jne        loc_106c8

0000000000010686         xor        eax, eax
0000000000010688         mov        rsi, qword [rsp+0x268+var_1F8]
000000000001068d         cmp        qword [rsp+0x268+var_1E0], rsi
0000000000010695         jle        loc_106a0

0000000000010697         mov        rax, qword [rsp+0x268+var_1F0]
000000000001069c         movzx      eax, byte [rax+rsi]

                     loc_106a0:
00000000000106a0         mov        rsi, qword [rsp+0x268+var_1B8]              ; CODE XREF=re_search_internal+1445
00000000000106a8         test       rsi, rsi
00000000000106ab         je         loc_106b1

00000000000106ad         movzx      eax, byte [rsi+rax]

                     loc_106b1:
00000000000106b1         mov        rdi, qword [rsp+0x268+var_200]              ; CODE XREF=re_search_internal+1467
00000000000106b6         cmp        byte [rdi+rax], 0x0
00000000000106ba         je         loc_11059

00000000000106c0         mov        rbp, qword [rsp+0x268+var_1F8]
00000000000106c5         nop        dword [rax]

                     loc_106c8:
00000000000106c8         mov        edx, dword [rsp+0x268+arg_10]               ; case 4, CODE XREF=re_search_internal+1270, re_search_internal+1355, re_search_internal+1428, re_search_internal+2687, re_search_internal+2863, re_search_internal+2880, re_search_internal+4370, re_search_internal+5913
00000000000106cf         mov        rdi, qword [rsp+0x268+var_268]
00000000000106d3         mov        rsi, rbp
00000000000106d6         call       re_string_reconstruct                       ; re_string_reconstruct
00000000000106db         test       eax, eax
00000000000106dd         mov        dword [rsp+0x268+var_20C], eax
00000000000106e1         jne        loc_10c40

00000000000106e7         cmp        dword [rsp+0x268+var_1A0], 0x1
00000000000106ef         je         loc_1070d

00000000000106f1         cmp        qword [rsp+0x268+var_118], 0x0
00000000000106fa         je         loc_1070d

00000000000106fc         mov        rax, qword [rsp+0x268+var_138]
0000000000010704         cmp        dword [rax], 0xffffffff
0000000000010707         je         loc_11031

                     loc_1070d:
000000000001070d         mov        rbx, qword [rsp+0x268+var_B0]               ; CODE XREF=re_search_internal+1535, re_search_internal+1546
0000000000010715         movzx      eax, byte [rsp+0x268+var_210]
000000000001071a         mov        dword [rsp+0x268+var_68], 0x0
0000000000010725         mov        qword [rsp+0x268+var_80], 0x0
0000000000010731         mov        qword [rsp+0x268+var_88], 0x0
000000000001073d         mov        dword [rsp+0x268+var_198], 0x0
0000000000010748         mov        r14, qword [rbx+0x48]
000000000001074c         and        eax, 0x1
000000000001074f         mov        byte [rsp+0x268+var_19A], al
0000000000010756         mov        rax, qword [rsp+0x268+var_100]
000000000001075e         cmp        byte [r14+0x68], 0x0
0000000000010763         mov        qword [rsp+0x268+var_260], rax
0000000000010768         js         loc_110e0

                     loc_1076e:
000000000001076e         mov        rax, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+4115, re_search_internal+4471, re_search_internal+5698
0000000000010776         test       rax, rax
0000000000010779         je         loc_10792

000000000001077b         cmp        qword [rbx+0x98], 0x0
0000000000010783         mov        rdi, qword [rsp+0x268+var_260]
0000000000010788         mov        qword [rax+rdi*8], r14
000000000001078c         jne        loc_1167b

                     loc_10792:
0000000000010792         movzx      eax, byte [rsp+0x268+var_199]               ; CODE XREF=re_search_internal+1673
000000000001079a         mov        byte [rsp+0x268+var_250], al
000000000001079e         movzx      eax, byte [r14+0x68]

                     loc_107a3:
00000000000107a3         test       al, 0x10                                    ; CODE XREF=re_search_internal+5569
00000000000107a5         mov        qword [rsp+0x268+var_248], 0xffffffffffffffff
00000000000107ae         mov        qword [rsp+0x268+var_238], 0x0
00000000000107b7         jne        loc_11640

                     loc_107bd:
00000000000107bd         mov        rax, qword [rsp+0x268+var_1A8]              ; CODE XREF=re_search_internal+5494, re_search_internal+5604
00000000000107c5         mov        r8, qword [rsp+0x268+var_100]
00000000000107cd         mov        qword [rsp+0x268+var_218], rax
00000000000107d2         lea        rax, qword [rsp+0x268+var_188]
00000000000107da         mov        qword [rsp+0x268+var_208], rax
00000000000107df         lea        rax, qword [rsp+0x268+var_194]
00000000000107e7         mov        qword [rsp+0x268+var_1E8], rax
00000000000107ef         jmp        loc_1084c
00000000000107f1         align      8

                     loc_107f8:
00000000000107f8         cmp        r14, r13                                    ; CODE XREF=re_search_internal+2023, re_search_internal+5395, re_search_internal+5411
00000000000107fb         mov        r8, qword [rsp+0x268+var_100]
0000000000010803         sete       al
0000000000010806         and        byte [rsp+0x268+var_250], al
000000000001080a         movzx      eax, byte [r13+0x68]
000000000001080f         cmove      rbx, qword [rsp+0x268+var_260]
0000000000010815         test       al, 0x10
0000000000010817         mov        qword [rsp+0x268+var_260], rbx
000000000001081c         je         loc_10849

000000000001081e         test       al, al
0000000000010820         js         loc_10ce0

                     loc_10826:
0000000000010826         mov        eax, dword [rsp+0x268+var_210]              ; CODE XREF=re_search_internal+3095
000000000001082a         mov        qword [rsp+0x268+var_248], r8
000000000001082f         test       eax, eax
0000000000010831         je         loc_10956

0000000000010837         mov        qword [rsp+0x268+var_238], 0x1
0000000000010840         mov        qword [rsp+0x268+var_218], 0x0

                     loc_10849:
0000000000010849         mov        r14, r13                                    ; CODE XREF=re_search_internal+1836, re_search_internal+3089

                     loc_1084c:
000000000001084c         cmp        qword [rsp+0x268+var_E0], r8                ; CODE XREF=re_search_internal+1791
0000000000010854         jle        loc_10944

000000000001085a         mov        rax, qword [rsp+0x268+var_108]
0000000000010862         lea        rbx, qword [r8+1]
0000000000010866         cmp        rbx, rax
0000000000010869         jge        loc_10d10

                     loc_1086f:
000000000001086f         mov        rax, qword [rsp+0x268+var_118]              ; CODE XREF=re_search_internal+3112
0000000000010877         cmp        rbx, rax
000000000001087a         jge        loc_11000

                     loc_10880:
0000000000010880         test       byte [r14+0x68], 0x20                       ; CODE XREF=re_search_internal+3864
0000000000010885         jne        loc_10d50

                     loc_1088b:
000000000001088b         lea        rax, qword [r8+1]                           ; CODE XREF=re_search_internal+3158, re_search_internal+4006
000000000001088f         mov        qword [rsp+0x268+var_100], rax
0000000000010897         mov        rax, qword [rsp+0x268+var_140]
000000000001089f         movzx      r13d, byte [rax+r8]

                     loc_108a4:
00000000000108a4         mov        rax, qword [r14+0x58]                       ; CODE XREF=re_search_internal+4247
00000000000108a8         test       rax, rax
00000000000108ab         je         loc_10fc0

00000000000108b1         mov        r13, qword [rax+r13*8]

                     loc_108b5:
00000000000108b5         cmp        qword [rsp+0x268+var_90], 0x0               ; CODE XREF=re_search_internal+3849, re_search_internal+4021
00000000000108be         je         loc_108d4

                     loc_108c0:
00000000000108c0         mov        rsi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+4067
00000000000108c4         mov        rdi, qword [rsp+0x268+var_240]
00000000000108c9         mov        rdx, r13
00000000000108cc         call       merge_state_with_log                        ; merge_state_with_log
00000000000108d1         mov        r13, rax

                     loc_108d4:
00000000000108d4         test       r13, r13                                    ; CODE XREF=re_search_internal+1998
00000000000108d7         jne        loc_107f8

00000000000108dd         mov        ecx, dword [rsp+0x268+var_198]
00000000000108e4         mov        rdi, qword [rsp+0x268+var_90]
00000000000108ec         test       ecx, ecx
00000000000108ee         jne        loc_111b0

00000000000108f4         test       rdi, rdi
00000000000108f7         je         loc_10944

00000000000108f9         movzx      eax, byte [rsp+0x268+var_19A]
0000000000010901         xor        eax, 0x1
0000000000010904         test       byte [rsp+0x268+var_238], al
0000000000010908         jne        loc_10944

                     loc_1090a:
000000000001090a         mov        rsi, qword [rsp+0x268+var_88]               ; CODE XREF=re_search_internal+3048
0000000000010912         mov        rax, qword [rsp+0x268+var_100]
000000000001091a         xor        ecx, ecx
000000000001091c         jmp        loc_10933
000000000001091e         align      32

                     loc_10920:
0000000000010920         cmp        qword [rdi+rdx*8], 0x0                      ; CODE XREF=re_search_internal+2122
0000000000010925         mov        rax, rdx
0000000000010928         mov        ecx, 0x1
000000000001092d         jne        loc_10ca0

                     loc_10933:
0000000000010933         lea        rdx, qword [rax+1]                          ; CODE XREF=re_search_internal+2092
0000000000010937         cmp        rsi, rdx
000000000001093a         jge        loc_10920

000000000001093c         test       cl, cl
000000000001093e         jne        loc_1180e

                     loc_10944:
0000000000010944         mov        rax, qword [rsp+0x268+var_218]              ; CODE XREF=re_search_internal+1892, re_search_internal+2055, re_search_internal+2072, re_search_internal+5401, re_search_internal+5926
0000000000010949         test       rax, rax
000000000001094c         je         loc_10956

000000000001094e         mov        rdi, qword [rsp+0x268+var_260]
0000000000010953         add        qword [rax], rdi

                     loc_10956:
0000000000010956         mov        rax, qword [rsp+0x268+var_248]              ; CODE XREF=re_search_internal+1857, re_search_internal+2140, re_search_internal+5479, re_search_internal+5631
000000000001095b         cmp        rax, 0xffffffffffffffff
000000000001095f         je         loc_11020

0000000000010965         cmp        rax, 0xfffffffffffffffe
0000000000010969         je         loc_11160

000000000001096f         mov        rax, qword [rsp+0x268+var_248]
0000000000010974         mov        qword [rsp+0x268+var_A0], rax
000000000001097c         mov        rax, qword [rsp+0x268+var_220]
0000000000010981         test       byte [rax+0x38], 0x10
0000000000010985         jne        loc_11140

000000000001098b         cmp        qword [rsp+0x268+arg_0], 0x1
0000000000010994         jbe        loc_1128c

000000000001099a         mov        rcx, qword [rsp+0x268+var_248]
000000000001099f         mov        rbx, qword [rsp+0x268+var_90]
00000000000109a7         mov        rdi, qword [rsp+0x268+var_268]
00000000000109ab         mov        rax, qword [rbx+rcx*8]
00000000000109af         mov        rsi, qword [rax+0x10]
00000000000109b3         lea        rdx, qword [rax+0x18]
00000000000109b7         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
00000000000109bc         mov        r13, rax
00000000000109bf         mov        qword [rsp+0x268+var_98], rax
00000000000109c7         mov        rax, qword [rsp+0x268+var_230]
00000000000109cc         test       byte [rax+0xb0], 0x1
00000000000109d3         jne        loc_109f0

00000000000109d5         mov        rax, qword [rsp+0x268+var_230]
00000000000109da         cmp        qword [rax+0x98], 0x0
00000000000109e2         je         loc_1137c

                     loc_109e8:
00000000000109e8         mov        r13, qword [rsp+0x268+var_98]               ; CODE XREF=re_search_internal+4569

                     loc_109f0:
00000000000109f0         movabs     rsi, 0x1ffffffffffffffe                     ; CODE XREF=re_search_internal+2275
00000000000109fa         cmp        qword [rsp+0x268+var_248], rsi
00000000000109ff         mov        r15, qword [rsp+0x268+var_B0]
0000000000010a07         ja         loc_1166b

0000000000010a0d         mov        rax, qword [rsp+0x268+var_248]
0000000000010a12         add        rax, 0x1
0000000000010a16         lea        rbx, qword [rax*8]
0000000000010a1e         mov        qword [rsp+0x268+var_260], rax
0000000000010a23         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
0000000000010a26         call       j_malloc                                    ; malloc
0000000000010a2b         test       rax, rax
0000000000010a2e         mov        r12, rax
0000000000010a31         je         loc_11160

0000000000010a37         cmp        qword [r15+0x98], 0x0
0000000000010a3f         je         loc_112d5

0000000000010a45         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
0000000000010a48         call       j_malloc                                    ; malloc
0000000000010a4d         test       rax, rax
0000000000010a50         mov        rbp, rax
0000000000010a53         je         loc_11158

0000000000010a59         mov        r14, qword [rsp+0x268+var_248]
0000000000010a5e         lea        rbx, qword [rsp+0x268+var_188]
0000000000010a66         mov        qword [rsp+0x268+var_258], r15
0000000000010a6b         mov        qword [rsp+0x268+var_250], rax

                     loc_10a70:
0000000000010a70         mov        rax, qword [rsp+0x268+var_260]              ; CODE XREF=re_search_internal+2637
0000000000010a75         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000010a77         mov        rdi, rbp                                    ; argument "__s" for method j_memset
0000000000010a7a         lea        rdx, qword [rax*8]                          ; argument "__n" for method j_memset
0000000000010a82         call       j_memset                                    ; memset
0000000000010a87         pxor       xmm0, xmm0
0000000000010a8b         mov        qword [rsp+0x268+var_188], r12
0000000000010a93         mov        qword [rsp+0x268+var_180], rbp
0000000000010a9b         mov        qword [rsp+0x268+var_178], r13
0000000000010aa3         mov        rsi, rbx
0000000000010aa6         mov        qword [rsp+0x268+var_170], r14
0000000000010aae         mov        rdi, qword [rsp+0x268+var_268]
0000000000010ab2         movaps     xmmword [rbx+0x20], xmm0
0000000000010ab6         mov        qword [rbx+0x30], 0x0
0000000000010abe         call       sift_states_backward                        ; sift_states_backward
0000000000010ac3         mov        rdi, qword [rsp+0x268+var_158]              ; argument "__ptr" for method j_free
0000000000010acb         mov        r15d, eax
0000000000010ace         call       j_free                                      ; free
0000000000010ad3         test       r15d, r15d
0000000000010ad6         jne        loc_116f4

0000000000010adc         cmp        qword [r12], 0x0
0000000000010ae1         jne        loc_11753

0000000000010ae7         cmp        qword [rbp], 0x0
0000000000010aec         jne        loc_11753

0000000000010af2         mov        rdx, qword [rsp+0x268+var_90]
0000000000010afa         nop        word [rax+rax]

                     loc_10b00:
0000000000010b00         sub        r14, 0x1                                    ; CODE XREF=re_search_internal+2597, re_search_internal+2603
0000000000010b04         cmp        r14, 0xffffffffffffffff
0000000000010b08         je         loc_115cb

0000000000010b0e         mov        rax, qword [rdx+r14*8]
0000000000010b12         test       rax, rax
0000000000010b15         je         loc_10b00

0000000000010b17         test       byte [rax+0x68], 0x10
0000000000010b1b         je         loc_10b00

0000000000010b1d         mov        rsi, qword [rax+0x10]
0000000000010b21         mov        rdi, qword [rsp+0x268+var_268]
0000000000010b25         lea        rdx, qword [rax+0x18]
0000000000010b29         mov        rcx, r14
0000000000010b2c         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
0000000000010b31         mov        r13, rax
0000000000010b34         lea        rax, qword [r14+1]
0000000000010b38         mov        qword [rsp+0x268+var_260], rax
0000000000010b3d         jmp        loc_10a70

                     loc_10b42:
0000000000010b42         cmp        qword [rsp+0x268+var_1F8], rbp              ; case 3, CODE XREF=re_search_internal+1270
0000000000010b47         jle        loc_1067f

0000000000010b4d         mov        rax, qword [rsp+0x268+var_1F0]
0000000000010b52         mov        rdi, qword [rsp+0x268+var_1B8]
0000000000010b5a         mov        rsi, qword [rsp+0x268+var_200]
0000000000010b5f         movzx      eax, byte [rax+rbp]
0000000000010b63         movzx      edx, byte [rdi+rax]
0000000000010b67         lea        rax, qword [rbp+1]
0000000000010b6b         cmp        byte [rsi+rdx], 0x0
0000000000010b6f         jne        loc_106c8

0000000000010b75         mov        rsi, qword [rsp+0x268+var_200]
0000000000010b7a         mov        rdi, qword [rsp+0x268+var_1B8]
0000000000010b82         mov        rcx, qword [rsp+0x268+var_1F8]
0000000000010b87         mov        r8, qword [rsp+0x268+var_1F0]
0000000000010b8c         jmp        loc_10ba7
0000000000010b8e         align      16

                     loc_10b90:
0000000000010b90         movzx      eax, byte [r8+rax]                          ; CODE XREF=re_search_internal+2749
0000000000010b95         movzx      edx, byte [rdi+rax]
0000000000010b99         lea        rax, qword [rbp+1]
0000000000010b9d         cmp        byte [rsi+rdx], 0x0
0000000000010ba1         jne        loc_11801

                     loc_10ba7:
0000000000010ba7         cmp        rcx, rax                                    ; CODE XREF=re_search_internal+2716
0000000000010baa         mov        rbp, rax
0000000000010bad         jne        loc_10b90

0000000000010baf         jmp        loc_10672

                     loc_10bb4:
0000000000010bb4         cmp        qword [rsp+0x268+var_1D8], rbp              ; case 1, CODE XREF=re_search_internal+1270
0000000000010bbc         jg         loc_11059

0000000000010bc2         xor        ecx, ecx
0000000000010bc4         mov        rax, rbp
0000000000010bc7         mov        rdi, qword [rsp+0x268+var_200]
0000000000010bcc         mov        rsi, qword [rsp+0x268+var_1B8]
0000000000010bd4         mov        r9, qword [rsp+0x268+var_1D8]
0000000000010bdc         mov        r10, qword [rsp+0x268+var_1F0]
0000000000010be1         mov        r8, qword [rsp+0x268+var_1E0]
0000000000010be9         jmp        loc_10c02
0000000000010beb         align      16

                     loc_10bf0:
0000000000010bf0         sub        rax, 0x1                                    ; CODE XREF=re_search_internal+2859
0000000000010bf4         mov        ecx, 0x1
0000000000010bf9         cmp        rax, r9
0000000000010bfc         jl         loc_115e0

                     loc_10c02:
0000000000010c02         xor        edx, edx                                    ; CODE XREF=re_search_internal+2809
0000000000010c04         cmp        r8, rax
0000000000010c07         jle        loc_10c0e

0000000000010c09         movzx      edx, byte [r10+rax]

                     loc_10c0e:
0000000000010c0e         test       rsi, rsi                                    ; CODE XREF=re_search_internal+2839
0000000000010c11         je         loc_10c17

0000000000010c13         movzx      edx, byte [rsi+rdx]

                     loc_10c17:
0000000000010c17         cmp        byte [rdi+rdx], 0x0                         ; CODE XREF=re_search_internal+2849
0000000000010c1b         je         loc_10bf0

0000000000010c1d         test       cl, cl
0000000000010c1f         je         loc_106c8

0000000000010c25         mov        qword [rsp+0x268+var_190], rax
0000000000010c2d         mov        rbp, rax
0000000000010c30         jmp        loc_106c8
0000000000010c35         align      8

                     loc_10c38:
0000000000010c38         mov        dword [rsp+0x268+var_20C], eax              ; CODE XREF=re_search_internal+4450
0000000000010c3c         nop        dword [rax]

                     loc_10c40:
0000000000010c40         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+598, re_search_internal+1521, re_search_internal+4135, re_search_internal+4757

                     loc_10c48:
0000000000010c48         call       j_free                                      ; free, CODE XREF=re_search_internal+3961, re_search_internal+4224, re_search_internal+4296, re_search_internal+5164, re_search_internal+5250, re_search_internal+5384, re_search_internal+5510, re_search_internal+5689
0000000000010c4d         mov        rax, qword [rsp+0x268+var_230]
0000000000010c52         cmp        qword [rax+0x98], 0x0
0000000000010c5a         jne        loc_11580

                     loc_10c60:
0000000000010c60         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+5299
0000000000010c64         call       re_string_destruct                          ; re_string_destruct

                     loc_10c69:
0000000000010c69         mov        rsi, qword [rsp+0x268+var_40]               ; CODE XREF=re_search_internal+342, re_search_internal+3976
0000000000010c71         xor        rsi, qword [fs:0x28]
0000000000010c7a         mov        eax, dword [rsp+0x268+var_20C]
0000000000010c7e         jne        loc_1181b

0000000000010c84         add        rsp, aLib64ldlinuxx8                        ; "/lib64/ld-linux-x86-64.so.2"
0000000000010c8b         pop        rbx
0000000000010c8c         pop        rbp
0000000000010c8d         pop        r12
0000000000010c8f         pop        r13
0000000000010c91         pop        r14
0000000000010c93         pop        r15
0000000000010c95         ret
                        ; endp
0000000000010c96         align      32

                     loc_10ca0:
0000000000010ca0         mov        rsi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2109
0000000000010ca4         mov        rdi, qword [rsp+0x268+var_240]
0000000000010ca9         mov        qword [rsp+0x268+var_100], rdx
0000000000010cb1         xor        edx, edx
0000000000010cb3         call       merge_state_with_log                        ; merge_state_with_log
0000000000010cb8         mov        edx, dword [rsp+0x268+var_198]
0000000000010cbf         test       edx, edx
0000000000010cc1         jne        loc_115fd

0000000000010cc7         test       rax, rax
0000000000010cca         jne        loc_11610

0000000000010cd0         mov        rdi, qword [rsp+0x268+var_90]
0000000000010cd8         jmp        loc_1090a
0000000000010cdd         align      32

                     loc_10ce0:
0000000000010ce0         mov        rsi, qword [r13+0x10]                       ; CODE XREF=re_search_internal+1840
0000000000010ce4         mov        rdi, qword [rsp+0x268+var_268]
0000000000010ce8         lea        rdx, qword [r13+0x18]
0000000000010cec         mov        rcx, r8
0000000000010cef         mov        qword [rsp+0x268+var_258], r8
0000000000010cf4         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
0000000000010cf9         test       rax, rax
0000000000010cfc         mov        r8, qword [rsp+0x268+var_258]
0000000000010d01         je         loc_10849

0000000000010d07         jmp        loc_10826
0000000000010d0c         align      16

                     loc_10d10:
0000000000010d10         cmp        rax, qword [rsp+0x268+var_F0]               ; CODE XREF=re_search_internal+1913
0000000000010d18         jge        loc_1086f

                     loc_10d1e:
0000000000010d1e         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+3870
0000000000010d22         lea        esi, dword [rbx+1]
0000000000010d25         call       extend_buffers                              ; extend_buffers
0000000000010d2a         test       eax, eax
0000000000010d2c         mov        dword [rsp+0x268+var_198], eax
0000000000010d33         jne        loc_11618

0000000000010d39         test       byte [r14+0x68], 0x20
0000000000010d3e         mov        r8, qword [rsp+0x268+var_100]
0000000000010d46         je         loc_1088b

0000000000010d4c         nop        dword [rax]

                     loc_10d50:
0000000000010d50         cmp        qword [r14+0x10], 0x0                       ; CODE XREF=re_search_internal+1941
0000000000010d55         mov        r13, qword [rsp+0x268+var_B0]
0000000000010d5d         jle        loc_1108b

0000000000010d63         lea        rax, qword [r13+0xd8]
0000000000010d6a         xor        r12d, r12d
0000000000010d6d         mov        qword [rsp+0x268+var_1C8], rbx
0000000000010d75         mov        rbx, r12
0000000000010d78         mov        r12, r8
0000000000010d7b         mov        qword [rsp+0x268+var_228], rax
0000000000010d80         jmp        loc_10ed8
0000000000010d85         align      8

                     loc_10d88:
0000000000010d88         test       al, 0x1                                     ; CODE XREF=re_search_internal+3643
0000000000010d8a         je         loc_10eca

0000000000010d90         and        ecx, 0x8
0000000000010d93         jne        loc_10eca

                     loc_10d99:
0000000000010d99         test       dl, 0x20                                    ; CODE XREF=re_search_internal+3652, re_search_internal+3660
0000000000010d9c         je         loc_10da6

0000000000010d9e         test       al, 0x2
0000000000010da0         je         loc_10eca

                     loc_10da6:
0000000000010da6         and        edx, 0x80                                   ; CODE XREF=re_search_internal+3244
0000000000010dac         je         loc_10dc0

0000000000010dae         test       al, 0x8
0000000000010db0         je         loc_10eca

0000000000010db6         nop        word [cs:rax+rax]

                     loc_10dc0:
0000000000010dc0         mov        rcx, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+3260, re_search_internal+3601
0000000000010dc4         mov        rsi, qword [rsp+0x268+var_228]
0000000000010dc9         mov        r8, r12
0000000000010dcc         mov        rdx, r15
0000000000010dcf         mov        rdi, rbp
0000000000010dd2         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
0000000000010dd7         test       eax, eax
0000000000010dd9         je         loc_10ec2

0000000000010ddf         movsxd     rbp, eax
0000000000010de2         add        rbp, qword [rsp+0x268+var_100]
0000000000010dea         cmp        dword [rsp+0x268+var_68], eax
0000000000010df1         cmovge     eax, dword [rsp+0x268+var_68]
0000000000010df9         mov        rdi, qword [rsp+0x268+var_268]
0000000000010dfd         mov        rsi, rbp
0000000000010e00         mov        dword [rsp+0x268+var_68], eax
0000000000010e07         call       clean_state_log_if_needed                   ; clean_state_log_if_needed
0000000000010e0c         test       eax, eax
0000000000010e0e         mov        dword [rsp+0x268+var_194], eax
0000000000010e15         jne        loc_110b0

0000000000010e1b         mov        rax, qword [r13+0x18]
0000000000010e1f         lea        r12, qword [rbp*8]
0000000000010e27         mov        rax, qword [rax+r15*8]
0000000000010e2b         mov        r15, qword [rsp+0x268+var_90]
0000000000010e33         lea        rdx, qword [rax+rax*2]
0000000000010e37         mov        rax, qword [r13+0x30]
0000000000010e3b         add        r15, r12
0000000000010e3e         lea        rdx, qword [rax+rdx*8]
0000000000010e42         mov        rax, qword [r15]
0000000000010e45         test       rax, rax
0000000000010e48         je         loc_10f48

0000000000010e4e         mov        rsi, qword [rax+0x50]
0000000000010e52         mov        rdi, qword [rsp+0x268+var_208]
0000000000010e57         call       re_node_set_init_union                      ; re_node_set_init_union
0000000000010e5c         test       eax, eax
0000000000010e5e         mov        dword [rsp+0x268+var_194], eax
0000000000010e65         jne        loc_110b0

0000000000010e6b         mov        edx, dword [rsp+0x268+var_A8]
0000000000010e72         mov        rdi, qword [rsp+0x268+var_268]
0000000000010e76         lea        rsi, qword [rbp-1]
0000000000010e7a         call       re_string_context_at                        ; re_string_context_at
0000000000010e7f         mov        rdx, qword [rsp+0x268+var_208]
0000000000010e84         mov        rdi, qword [rsp+0x268+var_1E8]
0000000000010e8c         mov        ecx, eax
0000000000010e8e         add        r12, qword [rsp+0x268+var_90]
0000000000010e96         mov        rsi, r13
0000000000010e99         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000010e9e         mov        rdi, qword [rsp+0x268+var_178]              ; argument "__ptr" for method j_free
0000000000010ea6         mov        qword [r12], rax
0000000000010eaa         call       j_free                                      ; free
0000000000010eaf         mov        rdi, qword [rsp+0x268+var_90]
0000000000010eb7         cmp        qword [rdi+rbp*8], 0x0
0000000000010ebc         je         loc_10fa1

                     loc_10ec2:
0000000000010ec2         mov        r12, qword [rsp+0x268+var_100]              ; CODE XREF=re_search_internal+3305, re_search_internal+3755, re_search_internal+3770

                     loc_10eca:
0000000000010eca         add        rbx, 0x1                                    ; CODE XREF=re_search_internal+3226, re_search_internal+3235, re_search_internal+3248, re_search_internal+3264, re_search_internal+3586, re_search_internal+3666
0000000000010ece         cmp        rbx, qword [r14+0x10]
0000000000010ed2         jge        loc_11080

                     loc_10ed8:
0000000000010ed8         mov        rax, qword [r14+0x18]                       ; CODE XREF=re_search_internal+3216
0000000000010edc         mov        rbp, qword [r13]
0000000000010ee0         mov        r15, qword [rax+rbx*8]
0000000000010ee4         mov        rax, r15
0000000000010ee7         shl        rax, 0x4
0000000000010eeb         add        rax, rbp
0000000000010eee         test       byte [rax+0xa], 0x10
0000000000010ef2         je         loc_10eca

0000000000010ef4         mov        ecx, dword [rax+8]
0000000000010ef7         test       ecx, 0x3ff00
0000000000010efd         mov        dword [rsp+0x268+var_258], ecx
0000000000010f01         je         loc_10dc0

0000000000010f07         mov        edx, dword [rsp+0x268+var_A8]
0000000000010f0e         mov        rdi, qword [rsp+0x268+var_268]
0000000000010f12         mov        rsi, r12
0000000000010f15         call       re_string_context_at                        ; re_string_context_at
0000000000010f1a         mov        ecx, dword [rsp+0x268+var_258]
0000000000010f1e         shr        ecx, 0x8
0000000000010f21         mov        edx, ecx
0000000000010f23         and        dx, 0x3ff
0000000000010f28         test       cl, 0x4
0000000000010f2b         jne        loc_10d88

0000000000010f31         and        ecx, 0x8
0000000000010f34         je         loc_10d99

0000000000010f3a         test       al, 0x1
0000000000010f3c         je         loc_10d99

0000000000010f42         jmp        loc_10eca
0000000000010f44         align      8

                     loc_10f48:
0000000000010f48         movdqu     xmm0, xmmword [rdx]                         ; CODE XREF=re_search_internal+3416
0000000000010f4c         lea        rsi, qword [rbp-1]
0000000000010f50         mov        rdi, qword [rsp+0x268+var_268]
0000000000010f54         movaps     xmmword [rsp+0x268+var_188], xmm0
0000000000010f5c         mov        rax, qword [rdx+0x10]
0000000000010f60         mov        edx, dword [rsp+0x268+var_A8]
0000000000010f67         mov        qword [rsp+0x268+var_178], rax
0000000000010f6f         call       re_string_context_at                        ; re_string_context_at
0000000000010f74         mov        rdi, qword [rsp+0x268+var_1E8]
0000000000010f7c         mov        rdx, qword [rsp+0x268+var_208]
0000000000010f81         mov        ecx, eax
0000000000010f83         mov        rsi, r13
0000000000010f86         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000010f8b         mov        rdi, qword [rsp+0x268+var_90]
0000000000010f93         mov        qword [r15], rax
0000000000010f96         cmp        qword [rdi+rbp*8], 0x0
0000000000010f9b         jne        loc_10ec2

                     loc_10fa1:
0000000000010fa1         mov        eax, dword [rsp+0x268+var_194]              ; CODE XREF=re_search_internal+3532
0000000000010fa8         test       eax, eax
0000000000010faa         je         loc_10ec2

0000000000010fb0         mov        rbx, qword [rsp+0x268+var_1C8]
0000000000010fb8         jmp        loc_110c0
0000000000010fbd         align      64

                     loc_10fc0:
0000000000010fc0         mov        rbp, qword [r14+0x60]                       ; CODE XREF=re_search_internal+1979
0000000000010fc4         test       rbp, rbp
0000000000010fc7         je         loc_11175

0000000000010fcd         mov        rax, qword [rsp+0x268+var_100]
0000000000010fd5         mov        edx, dword [rsp+0x268+var_A8]
0000000000010fdc         mov        rdi, qword [rsp+0x268+var_268]
0000000000010fe0         lea        rsi, qword [rax-1]
0000000000010fe4         call       re_string_context_at                        ; re_string_context_at
0000000000010fe9         test       al, 0x1
0000000000010feb         je         loc_110a0

0000000000010ff1         mov        r13, qword [rbp+r13*8+0x800]
0000000000010ff9         jmp        loc_108b5
0000000000010ffe         align      4096

                     loc_11000:
0000000000011000         cmp        rax, qword [rsp+0x268+var_F0]               ; CODE XREF=re_search_internal+1930
0000000000011008         jge        loc_10880

000000000001100e         jmp        loc_10d1e

                     loc_11013:
0000000000011013         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+4700
0000000000011016         call       j_free                                      ; free
000000000001101b         nop        dword [rax+rax]

                     loc_11020:
0000000000011020         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2159, re_search_internal+5355, re_search_internal+5671
0000000000011024         call       match_ctx_clean                             ; match_ctx_clean
0000000000011029         mov        rbp, qword [rsp+0x268+var_190]

                     loc_11031:
0000000000011031         movsxd     rax, dword [rsp+0x268+var_1BC]              ; CODE XREF=re_search_internal+1559
0000000000011039         add        rbp, rax
000000000001103c         cmp        rbp, qword [rsp+0x268+var_1D8]
0000000000011044         mov        qword [rsp+0x268+var_190], rbp
000000000001104c         jl         loc_11059

000000000001104e         cmp        rbp, qword [rsp+0x268+var_1F8]
0000000000011053         jle        loc_105c8

                     loc_11059:
0000000000011059         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+1172, re_search_internal+1482, re_search_internal+2764, re_search_internal+3932, re_search_internal+4393, re_search_internal+4402
0000000000011061         mov        dword [rsp+0x268+var_20C], 0x1
0000000000011069         jmp        loc_10c48
000000000001106e         align      16

                     loc_11070:
0000000000011070         mov        dword [rsp+0x268+var_20C], 0x1              ; CODE XREF=re_search_internal+238, re_search_internal+256, re_search_internal+269, re_search_internal+282, re_search_internal+293
0000000000011078         jmp        loc_10c69
000000000001107d         align      128

                     loc_11080:
0000000000011080         mov        rbx, qword [rsp+0x268+var_1C8]              ; CODE XREF=re_search_internal+3554
0000000000011088         mov        r8, r12

                     loc_1108b:
000000000001108b         mov        dword [rsp+0x268+var_198], 0x0              ; CODE XREF=re_search_internal+3181
0000000000011096         jmp        loc_1088b
000000000001109b         align      32

                     loc_110a0:
00000000000110a0         mov        r13, qword [rbp+r13*8]                      ; CODE XREF=re_search_internal+3835
00000000000110a5         jmp        loc_108b5
00000000000110aa         align      16

                     loc_110b0:
00000000000110b0         mov        rbx, qword [rsp+0x268+var_1C8]              ; CODE XREF=re_search_internal+3365, re_search_internal+3445
00000000000110b8         mov        rdi, qword [rsp+0x268+var_90]

                     loc_110c0:
00000000000110c0         test       rdi, rdi                                    ; CODE XREF=re_search_internal+3784
00000000000110c3         mov        dword [rsp+0x268+var_198], eax
00000000000110ca         je         loc_111b0

                     loc_110d0:
00000000000110d0         xor        r13d, r13d                                  ; CODE XREF=re_search_internal+4275
00000000000110d3         jmp        loc_108c0
00000000000110d8         align      32

                     loc_110e0:
00000000000110e0         mov        edx, dword [rsp+0x268+var_A8]               ; CODE XREF=re_search_internal+1656
00000000000110e7         mov        rdi, qword [rsp+0x268+var_268]
00000000000110eb         lea        rsi, qword [rax-1]
00000000000110ef         call       re_string_context_at                        ; re_string_context_at
00000000000110f4         test       al, 0x1
00000000000110f6         je         loc_11265

00000000000110fc         mov        r14, qword [rbx+0x50]

                     loc_11100:
0000000000011100         test       r14, r14                                    ; CODE XREF=re_search_internal+4503, re_search_internal+5619, re_search_internal+5726
0000000000011103         jne        loc_1076e

0000000000011109         mov        eax, dword [rsp+0x268+var_198]
0000000000011110         cmp        eax, 0xc
0000000000011113         mov        dword [rsp+0x268+var_20C], eax
0000000000011117         je         loc_10c40

000000000001111d         lea        rcx, qword [__PRETTY_FUNCTION__.7972]       ; argument "__function" for method j___assert_fail, "check_matching"
0000000000011124         lea        rsi, qword [aCoreutils831li_17608]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000001112b         lea        rdi, qword [aErrRegespace]                  ; argument "__assertion" for method j___assert_fail, "err == REG_ESPACE"
0000000000011132         mov        edx, 0x435                                  ; argument "__line" for method j___assert_fail
0000000000011137         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000001113c         align      64

                     loc_11140:
0000000000011140         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+2197
0000000000011145         cmp        qword [rax+0x98], 0x0
000000000001114d         je         loc_1137c

0000000000011153         jmp        loc_1129f

                     loc_11158:
0000000000011158         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+2403
000000000001115b         call       j_free                                      ; free

                     loc_11160:
0000000000011160         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+810, re_search_internal+864, re_search_internal+873, re_search_internal+942, re_search_internal+2169, re_search_internal+2369, re_search_internal+5419
0000000000011168         mov        dword [rsp+0x268+var_20C], 0xc
0000000000011170         jmp        loc_10c48

                     loc_11175:
0000000000011175         mov        rdi, qword [rsp+0x268+var_B0]               ; CODE XREF=re_search_internal+3799
000000000001117d         mov        rsi, r14
0000000000011180         call       build_trtable                               ; build_trtable
0000000000011185         test       al, al
0000000000011187         jne        loc_108a4

000000000001118d         mov        rdi, qword [rsp+0x268+var_90]
0000000000011195         mov        dword [rsp+0x268+var_198], 0xc
00000000000111a0         test       rdi, rdi
00000000000111a3         jne        loc_110d0

00000000000111a9         nop        dword [rax]

                     loc_111b0:
00000000000111b0         mov        dword [rsp+0x268+var_20C], 0xc              ; CODE XREF=re_search_internal+975, re_search_internal+2046, re_search_internal+4058
00000000000111b8         jmp        loc_10c48

                     loc_111bd:
00000000000111bd         mov        rbx, qword [rsp+0x268+var_200]              ; CODE XREF=re_search_internal+1250
00000000000111c2         mov        r13d, dword [rsp+0x268+var_1BC]
00000000000111ca         mov        r14, qword [rsp+0x268+var_1D8]
00000000000111d2         mov        r15, qword [rsp+0x268+var_1F8]
00000000000111d7         mov        r12, qword [rsp+0x268+var_1E0]
00000000000111df         jmp        loc_11228
00000000000111e1         align      8

                     loc_111e8:
00000000000111e8         cmp        r12, rbp                                    ; CODE XREF=re_search_internal+4427, re_search_internal+4467
00000000000111eb         mov        rax, rbx
00000000000111ee         jle        loc_111ff

00000000000111f0         mov        rax, qword [rsp+0x268+var_140]
00000000000111f8         movzx      eax, byte [rax+rdx]
00000000000111fc         add        rax, rbx

                     loc_111ff:
00000000000111ff         cmp        byte [rax], 0x0                             ; CODE XREF=re_search_internal+4350
0000000000011202         jne        loc_106c8

0000000000011208         movsxd     rax, r13d
000000000001120b         add        rbp, rax
000000000001120e         cmp        rbp, r14
0000000000011211         mov        qword [rsp+0x268+var_190], rbp
0000000000011219         jl         loc_11059

000000000001121f         cmp        rbp, r15
0000000000011222         jg         loc_11059

                     loc_11228:
0000000000011228         mov        rdx, rbp                                    ; CODE XREF=re_search_internal+4335
000000000001122b         sub        rdx, qword [rsp+0x268+var_120]
0000000000011233         cmp        qword [rsp+0x268+var_110], rdx
000000000001123b         ja         loc_111e8

000000000001123d         mov        edx, dword [rsp+0x268+arg_10]
0000000000011244         mov        rdi, qword [rsp+0x268+var_268]
0000000000011248         mov        rsi, rbp
000000000001124b         call       re_string_reconstruct                       ; re_string_reconstruct
0000000000011250         test       eax, eax
0000000000011252         jne        loc_10c38

0000000000011258         mov        rdx, rbp
000000000001125b         sub        rdx, qword [rsp+0x268+var_120]
0000000000011263         jmp        loc_111e8

                     loc_11265:
0000000000011265         test       eax, eax                                    ; CODE XREF=re_search_internal+4102
0000000000011267         je         loc_1076e

000000000001126d         mov        edx, eax
000000000001126f         and        edx, 0x6
0000000000011272         cmp        edx, 0x6
0000000000011275         je         loc_116df

000000000001127b         test       al, 0x2
000000000001127d         je         loc_11730

0000000000011283         mov        r14, qword [rbx+0x58]
0000000000011287         jmp        loc_11100

                     loc_1128c:
000000000001128c         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+2212
0000000000011291         cmp        qword [rax+0x98], 0x0
0000000000011299         je         loc_1137c

                     loc_1129f:
000000000001129f         mov        rcx, qword [rsp+0x268+var_248]              ; CODE XREF=re_search_internal+4195
00000000000112a4         mov        rbx, qword [rsp+0x268+var_90]
00000000000112ac         mov        rdi, qword [rsp+0x268+var_268]
00000000000112b0         mov        rax, qword [rbx+rcx*8]
00000000000112b4         mov        rsi, qword [rax+0x10]
00000000000112b8         lea        rdx, qword [rax+0x18]
00000000000112bc         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
00000000000112c1         mov        qword [rsp+0x268+var_98], rax
00000000000112c9         jmp        loc_109e8

                     loc_112ce:
00000000000112ce         xor        ecx, ecx                                    ; CODE XREF=re_search_internal+1113, re_search_internal+1128
00000000000112d0         jmp        loc_1055e

                     loc_112d5:
00000000000112d5         pxor       xmm0, xmm0                                  ; CODE XREF=re_search_internal+2383
00000000000112d9         mov        qword [rsp+0x268+var_188], rax
00000000000112e1         mov        rdi, qword [rsp+0x268+var_268]
00000000000112e5         mov        rax, qword [rsp+0x268+var_248]
00000000000112ea         lea        rbx, qword [rsp+0x268+var_188]
00000000000112f2         mov        qword [rsp+0x268+var_180], 0x0
00000000000112fe         mov        qword [rsp+0x268+var_178], r13
0000000000011306         mov        rsi, rbx
0000000000011309         mov        qword [rsp+0x268+var_158], 0x0
0000000000011315         movaps     xmmword [rsp+0x268+var_168], xmm0
000000000001131d         mov        qword [rsp+0x268+var_170], rax
0000000000011325         call       sift_states_backward                        ; sift_states_backward
000000000001132a         mov        rdi, qword [rsp+0x268+var_158]              ; argument "__ptr" for method j_free
0000000000011332         mov        dword [rsp+0x268+var_260], eax
0000000000011336         call       j_free                                      ; free
000000000001133b         mov        eax, dword [rsp+0x268+var_260]
000000000001133f         test       eax, eax
0000000000011341         jne        loc_11788

0000000000011347         cmp        qword [r12], 0x0
000000000001134c         je         loc_11013

                     loc_11352:
0000000000011352         mov        rdi, qword [rsp+0x268+var_90]               ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+5778
000000000001135a         call       j_free                                      ; free
000000000001135f         mov        rax, qword [rsp+0x268+var_248]
0000000000011364         mov        qword [rsp+0x268+var_90], r12
000000000001136c         mov        qword [rsp+0x268+var_98], r13
0000000000011374         mov        qword [rsp+0x268+var_A0], rax

                     loc_1137c:
000000000001137c         cmp        qword [rsp+0x268+arg_0], 0x0                ; CODE XREF=re_search_internal+2290, re_search_internal+4189, re_search_internal+4521
0000000000011385         je         loc_10c40

000000000001138b         cmp        qword [rsp+0x268+arg_0], 0x1
0000000000011394         je         loc_117b8

000000000001139a         mov        rsi, qword [rsp+0x268+var_1B0]
00000000000113a2         mov        rcx, qword [rsp+0x268+arg_0]
00000000000113aa         mov        rdx, 0xffffffffffffffff
00000000000113b1         shl        rcx, 0x4
00000000000113b5         lea        rax, qword [rsi+0x10]
00000000000113b9         add        rcx, rsi

                     loc_113bc:
00000000000113bc         mov        qword [rax+8], rdx                          ; CODE XREF=re_search_internal+4826
00000000000113c0         mov        qword [rax], rdx
00000000000113c3         add        rax, 0x10
00000000000113c7         cmp        rcx, rax
00000000000113ca         jne        loc_113bc

00000000000113cc         mov        rdi, qword [rsp+0x268+var_1B0]
00000000000113d4         mov        rax, qword [rsp+0x268+var_A0]
00000000000113dc         mov        qword [rdi+8], rax
00000000000113e0         mov        rax, qword [rsp+0x268+var_220]
00000000000113e5         mov        qword [rdi], 0x0
00000000000113ec         test       byte [rax+0x38], 0x10
00000000000113f0         jne        loc_117d3

00000000000113f6         cmp        qword [rsp+0x268+arg_0], 0x1
00000000000113ff         je         loc_117d3

0000000000011405         mov        rax, qword [rsp+0x268+var_230]
000000000001140a         xor        r8d, r8d
000000000001140d         test       byte [rax+0xb0], 0x1
0000000000011414         je         loc_11425

0000000000011416         xor        r8d, r8d
0000000000011419         cmp        qword [rax+0x98], 0x0
0000000000011421         setg       r8b

                     loc_11425:
0000000000011425         mov        rbx, qword [rsp+0x268+var_1B0]              ; CODE XREF=re_search_internal+4900
000000000001142d         mov        rdx, qword [rsp+0x268+arg_0]
0000000000011435         mov        rsi, qword [rsp+0x268+var_268]
0000000000011439         mov        rdi, qword [rsp+0x268+var_220]
000000000001143e         mov        rcx, rbx
0000000000011441         call       set_regs                                    ; set_regs
0000000000011446         test       eax, eax
0000000000011448         jne        loc_1171d

000000000001144e         mov        rax, qword [rbx]

                     loc_11451:
0000000000011451         movzx      r11d, byte [rsp+0x268+var_BC]               ; CODE XREF=re_search_internal+5861
000000000001145a         mov        r10, qword [rsp+0x268+var_118]
0000000000011462         xor        ecx, ecx
0000000000011464         mov        r9, qword [rsp+0x268+var_130]
000000000001146c         mov        r8, qword [rsp+0x268+var_110]
0000000000011474         mov        rdi, qword [rsp+0x268+var_190]
000000000001147c         mov        rdx, qword [rsp+0x268+var_1B0]
0000000000011484         jmp        loc_11489

                     loc_11486:
0000000000011486         mov        rax, qword [rdx]                            ; CODE XREF=re_search_internal+5065

                     loc_11489:
0000000000011489         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=re_search_internal+5012
000000000001148d         je         loc_114a9

000000000001148f         test       r11b, r11b
0000000000011492         mov        rsi, qword [rdx+8]
0000000000011496         jne        loc_117da

                     loc_1149c:
000000000001149c         add        rax, rdi                                    ; CODE XREF=re_search_internal+5887, re_search_internal+5895
000000000001149f         add        rsi, rdi
00000000000114a2         mov        qword [rdx], rax
00000000000114a5         mov        qword [rdx+8], rsi

                     loc_114a9:
00000000000114a9         add        rcx, 0x1                                    ; CODE XREF=re_search_internal+5021
00000000000114ad         add        rdx, 0x10
00000000000114b1         cmp        rcx, qword [rsp+0x268+arg_0]
00000000000114b9         jne        loc_11486

00000000000114bb         cmp        qword [rsp+0x268+var_1D0], 0x0
00000000000114c4         jle        loc_11505

00000000000114c6         mov        rdx, qword [rsp+0x268+var_1D0]
00000000000114ce         mov        rdi, qword [rsp+0x268+var_1B0]
00000000000114d6         mov        rax, rcx
00000000000114d9         shl        rax, 0x4
00000000000114dd         add        rdx, rcx
00000000000114e0         lea        rax, qword [rdi+rax+8]
00000000000114e5         shl        rdx, 0x4
00000000000114e9         lea        rsi, qword [rdi+rdx+8]
00000000000114ee         mov        rdx, 0xffffffffffffffff

                     loc_114f5:
00000000000114f5         mov        qword [rax-8], rdx                          ; CODE XREF=re_search_internal+5139
00000000000114f9         mov        qword [rax], rdx
00000000000114fc         add        rax, 0x10
0000000000011500         cmp        rsi, rax
0000000000011503         jne        loc_114f5

                     loc_11505:
0000000000011505         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+5076
000000000001150a         mov        rdi, qword [rsp+0x268+var_90]
0000000000011512         mov        r9, qword [rax+0xe0]
0000000000011519         test       r9, r9
000000000001151c         je         loc_10c48

0000000000011522         mov        r10, qword [rsp+0x268+var_1B0]
000000000001152a         xor        r8d, r8d
000000000001152d         lea        rdx, qword [r10+0x10]
0000000000011531         jmp        loc_11569

                     loc_11533:
0000000000011533         mov        rax, qword [r9+rsi*8-8]                     ; CODE XREF=re_search_internal+5248
0000000000011538         cmp        rax, r8
000000000001153b         je         loc_11562

000000000001153d         add        rax, 0x1
0000000000011541         shl        rax, 0x4
0000000000011545         mov        rax, qword [r10+rax]
0000000000011549         mov        qword [rdx], rax
000000000001154c         mov        rax, qword [r9+rsi*8-8]
0000000000011551         add        rax, 0x1
0000000000011555         shl        rax, 0x4
0000000000011559         mov        rax, qword [r10+rax+8]
000000000001155e         mov        qword [rdx+8], rax

                     loc_11562:
0000000000011562         add        rdx, 0x10                                   ; CODE XREF=re_search_internal+5195
0000000000011566         mov        r8, rsi

                     loc_11569:
0000000000011569         lea        rsi, qword [r8+1]                           ; CODE XREF=re_search_internal+5185
000000000001156d         cmp        rsi, rcx
0000000000011570         jne        loc_11533

0000000000011572         jmp        loc_10c48
0000000000011577         align      128

                     loc_11580:
0000000000011580         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2922
0000000000011584         call       match_ctx_clean                             ; match_ctx_clean
0000000000011589         mov        rdi, qword [rsp+0x268+var_50]               ; argument "__ptr" for method j_free
0000000000011591         call       j_free                                      ; free
0000000000011596         mov        rdi, qword [rsp+0x268+var_70]               ; argument "__ptr" for method j_free
000000000001159e         call       j_free                                      ; free
00000000000115a3         jmp        loc_10c60

                     loc_115a8:
00000000000115a8         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+915
00000000000115ad         test       byte [rax+0xb0], 0x2
00000000000115b4         jne        loc_10489

00000000000115ba         mov        qword [rsp+0x268+var_90], 0x0
00000000000115c6         jmp        loc_104c5

                     loc_115cb:
00000000000115cb         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+2584
00000000000115ce         call       j_free                                      ; free
00000000000115d3         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
00000000000115d6         call       j_free                                      ; free
00000000000115db         jmp        loc_11020

                     loc_115e0:
00000000000115e0         mov        qword [rsp+0x268+var_190], rax              ; CODE XREF=re_search_internal+2828
00000000000115e8         mov        rdi, qword [rsp+0x268+var_90]
00000000000115f0         mov        dword [rsp+0x268+var_20C], 0x1
00000000000115f8         jmp        loc_10c48

                     loc_115fd:
00000000000115fd         test       rax, rax                                    ; CODE XREF=re_search_internal+3025
0000000000011600         mov        r13, rax
0000000000011603         jne        loc_107f8

0000000000011609         jmp        loc_10944
000000000001160e         align      16

                     loc_11610:
0000000000011610         mov        r13, rax                                    ; CODE XREF=re_search_internal+3034
0000000000011613         jmp        loc_107f8

                     loc_11618:
0000000000011618         cmp        eax, 0xc                                    ; CODE XREF=re_search_internal+3139
000000000001161b         je         loc_11160

0000000000011621         lea        rcx, qword [__PRETTY_FUNCTION__.7972]       ; argument "__function" for method j___assert_fail, "check_matching"
0000000000011628         lea        rsi, qword [aCoreutils831li_17608]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000001162f         lea        rdi, qword [aErrRegespace]                  ; argument "__assertion" for method j___assert_fail, "err == REG_ESPACE"
0000000000011636         mov        edx, 0x46c                                  ; argument "__line" for method j___assert_fail
000000000001163b         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_11640:
0000000000011640         cmp        byte [r14+0x68], 0x0                        ; CODE XREF=re_search_internal+1735
0000000000011645         js         loc_116b6

                     loc_11647:
0000000000011647         mov        esi, dword [rsp+0x268+var_210]              ; CODE XREF=re_search_internal+5610
000000000001164b         mov        rax, qword [rsp+0x268+var_260]
0000000000011650         test       esi, esi
0000000000011652         mov        qword [rsp+0x268+var_248], rax
0000000000011657         je         loc_10956

000000000001165d         mov        qword [rsp+0x268+var_238], 0x1
0000000000011666         jmp        loc_107bd

                     loc_1166b:
000000000001166b         mov        rdi, rbx                                    ; CODE XREF=re_search_internal+2327
000000000001166e         mov        dword [rsp+0x268+var_20C], 0xc
0000000000011676         jmp        loc_10c48

                     loc_1167b:
000000000001167b         lea        rbx, qword [r14+0x10]                       ; CODE XREF=re_search_internal+1692
000000000001167f         lea        rbp, qword [r14+0x18]
0000000000011683         mov        rdi, qword [rsp+0x268+var_268]
0000000000011687         xor        ecx, ecx
0000000000011689         mov        rdx, rbp
000000000001168c         mov        rsi, rbx
000000000001168f         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
0000000000011694         test       eax, eax
0000000000011696         mov        dword [rsp+0x268+var_198], eax
000000000001169d         jne        loc_116e8

000000000001169f         movzx      eax, byte [r14+0x68]
00000000000116a4         test       al, 0x40
00000000000116a6         jne        loc_11790

                     loc_116ac:
00000000000116ac         mov        byte [rsp+0x268+var_250], 0x0               ; CODE XREF=re_search_internal+5827
00000000000116b1         jmp        loc_107a3

                     loc_116b6:
00000000000116b6         mov        rsi, qword [r14+0x10]                       ; CODE XREF=re_search_internal+5461
00000000000116ba         mov        rcx, qword [rsp+0x268+var_260]
00000000000116bf         lea        rdx, qword [r14+0x18]
00000000000116c3         mov        rdi, qword [rsp+0x268+var_268]
00000000000116c7         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
00000000000116cc         test       rax, rax
00000000000116cf         mov        qword [rsp+0x268+var_238], rax
00000000000116d4         je         loc_107bd

00000000000116da         jmp        loc_11647

                     loc_116df:
00000000000116df         mov        r14, qword [rbx+0x60]                       ; CODE XREF=re_search_internal+4485
00000000000116e3         jmp        loc_11100

                     loc_116e8:
00000000000116e8         cdqe                                                   ; CODE XREF=re_search_internal+5549, re_search_internal+5816
00000000000116ea         mov        qword [rsp+0x268+var_248], rax
00000000000116ef         jmp        loc_10956

                     loc_116f4:
00000000000116f4         mov        r14, qword [rsp+0x268+var_250]              ; CODE XREF=re_search_internal+2534
00000000000116f9         mov        eax, r15d

                     loc_116fc:
00000000000116fc         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+5787
00000000000116ff         mov        dword [rsp+0x268+var_260], eax
0000000000011703         call       j_free                                      ; free
0000000000011708         mov        rdi, r14                                    ; argument "__ptr" for method j_free
000000000001170b         call       j_free                                      ; free
0000000000011710         mov        eax, dword [rsp+0x268+var_260]
0000000000011714         cmp        eax, 0x1
0000000000011717         je         loc_11020

                     loc_1171d:
000000000001171d         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+4952
0000000000011725         mov        dword [rsp+0x268+var_20C], eax
0000000000011729         jmp        loc_10c48
000000000001172e         align      16

                     loc_11730:
0000000000011730         test       al, 0x4                                     ; CODE XREF=re_search_internal+4493
0000000000011732         je         loc_1076e

0000000000011738         mov        rdx, qword [r14+0x50]
000000000001173c         mov        rdi, qword [rsp+0x268+var_240]
0000000000011741         mov        ecx, eax
0000000000011743         mov        rsi, rbx
0000000000011746         call       re_acquire_state_context                    ; re_acquire_state_context
000000000001174b         mov        r14, rax
000000000001174e         jmp        loc_11100

                     loc_11753:
0000000000011753         mov        r15, qword [rsp+0x268+var_258]              ; CODE XREF=re_search_internal+2545, re_search_internal+2556
0000000000011758         mov        rcx, qword [rsp+0x268+var_260]
000000000001175d         mov        rdx, rbp
0000000000011760         mov        rsi, r12
0000000000011763         mov        qword [rsp+0x268+var_248], r14
0000000000011768         mov        rdi, r15
000000000001176b         call       merge_state_array                           ; merge_state_array
0000000000011770         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000011773         mov        dword [rsp+0x268+var_260], eax
0000000000011777         call       j_free                                      ; free
000000000001177c         mov        eax, dword [rsp+0x268+var_260]
0000000000011780         test       eax, eax
0000000000011782         je         loc_11352

                     loc_11788:
0000000000011788         xor        r14d, r14d                                  ; CODE XREF=re_search_internal+4689
000000000001178b         jmp        loc_116fc

                     loc_11790:
0000000000011790         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+5558
0000000000011794         mov        rdx, rbp
0000000000011797         mov        rsi, rbx
000000000001179a         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
000000000001179f         test       eax, eax
00000000000117a1         mov        dword [rsp+0x268+var_198], eax
00000000000117a8         jne        loc_116e8

00000000000117ae         movzx      eax, byte [r14+0x68]
00000000000117b3         jmp        loc_116ac

                     loc_117b8:
00000000000117b8         mov        rsi, qword [rsp+0x268+var_1B0]              ; CODE XREF=re_search_internal+4772
00000000000117c0         mov        rax, qword [rsp+0x268+var_A0]
00000000000117c8         mov        qword [rsi], 0x0
00000000000117cf         mov        qword [rsi+8], rax

                     loc_117d3:
00000000000117d3         xor        eax, eax                                    ; CODE XREF=re_search_internal+4864, re_search_internal+4879
00000000000117d5         jmp        loc_11451

                     loc_117da:
00000000000117da         cmp        r10, rax                                    ; CODE XREF=re_search_internal+5030
00000000000117dd         je         loc_117fc

00000000000117df         mov        rax, qword [r9+rax*8]

                     loc_117e3:
00000000000117e3         cmp        r10, rsi                                    ; CODE XREF=re_search_internal+5903
00000000000117e6         mov        qword [rdx], rax
00000000000117e9         je         loc_117f4

00000000000117eb         mov        rsi, qword [r9+rsi*8]
00000000000117ef         jmp        loc_1149c

                     loc_117f4:
00000000000117f4         mov        rsi, r8                                     ; CODE XREF=re_search_internal+5881
00000000000117f7         jmp        loc_1149c

                     loc_117fc:
00000000000117fc         mov        rax, r8                                     ; CODE XREF=re_search_internal+5869
00000000000117ff         jmp        loc_117e3

                     loc_11801:
0000000000011801         mov        qword [rsp+0x268+var_190], rbp              ; CODE XREF=re_search_internal+1396, re_search_internal+2737
0000000000011809         jmp        loc_106c8

                     loc_1180e:
000000000001180e         mov        qword [rsp+0x268+var_100], rax              ; CODE XREF=re_search_internal+2126
0000000000011816         jmp        loc_10944

                     loc_1181b:
000000000001181b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_search_internal+2958
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208


                     update_cur_sifted_state:
0000000000011820         push       r15                                         ; End of unwind block (FDE at 0x1a378), Begin of unwind block (FDE at 0x1a3c8), CODE XREF=sift_states_backward+112, sift_states_backward+655
0000000000011822         push       r14
0000000000011824         mov        rax, rdi
0000000000011827         push       r13
0000000000011829         push       r12
000000000001182b         mov        r13, rsi
000000000001182e         push       rbp
000000000001182f         push       rbx
0000000000011830         mov        rbp, rdx
0000000000011833         mov        rbx, rcx
0000000000011836         lea        rcx, qword [rdx*8]
000000000001183e         sub        rsp, 0xa8
0000000000011845         mov        r12, qword [rax+0x98]
000000000001184c         mov        rax, qword [rax+0xb8]
0000000000011853         mov        qword [rsp+0xd8+var_D0], rdi
0000000000011858         mov        qword [rsp+0xd8+var_C0], rcx
000000000001185d         mov        rdi, qword [fs:0x28]
0000000000011866         mov        qword [rsp+0xd8+var_40], rdi
000000000001186e         xor        edi, edi
0000000000011870         mov        rdx, qword [rax+rdx*8]
0000000000011874         mov        dword [rsp+0xd8+var_7C], 0x0
000000000001187c         mov        rcx, qword [rbx+8]
0000000000011880         test       rdx, rdx
0000000000011883         je         loc_11ad8

0000000000011889         lea        rdi, qword [rdx+8]
000000000001188d         test       rcx, rcx
0000000000011890         mov        qword [rsp+0xd8+var_C8], rdi
0000000000011895         jne        loc_118e8

0000000000011897         mov        rdx, qword [rsi]
000000000001189a         mov        qword [rdx+rbp*8], 0x0
00000000000118a2         mov        rdx, qword [rax+rbp*8]
00000000000118a6         xor        eax, eax
00000000000118a8         test       byte [rdx+0x68], 0x40
00000000000118ac         jne        loc_1198f

00000000000118b2         nop        word [rax+rax]

                     loc_118b8:
00000000000118b8         mov        rdi, qword [rsp+0xd8+var_40]                ; CODE XREF=update_cur_sifted_state+233, update_cur_sifted_state+274, update_cur_sifted_state+321, update_cur_sifted_state+333, update_cur_sifted_state+361, update_cur_sifted_state+725, update_cur_sifted_state+738, update_cur_sifted_state+888, update_cur_sifted_state+1107, update_cur_sifted_state+1297, update_cur_sifted_state+1455
00000000000118c0         xor        rdi, qword [fs:0x28]
00000000000118c9         jne        loc_1206b

00000000000118cf         add        rsp, 0xa8
00000000000118d6         pop        rbx
00000000000118d7         pop        rbp
00000000000118d8         pop        r12
00000000000118da         pop        r13
00000000000118dc         pop        r14
00000000000118de         pop        r15
00000000000118e0         ret
                        ; endp
00000000000118e1         align      8

                     loc_118e8:
00000000000118e8         lea        rdi, qword [rsp+0xd8+var_78]                ; CODE XREF=update_cur_sifted_state+117
00000000000118ed         mov        rdx, rbx
00000000000118f0         mov        rsi, r12
00000000000118f3         mov        dword [rsp+0xd8+var_78], 0x0
00000000000118fb         call       re_acquire_state                            ; re_acquire_state
0000000000011900         mov        rdx, rax
0000000000011903         mov        eax, dword [rsp+0xd8+var_78]
0000000000011907         test       eax, eax
0000000000011909         jne        loc_118b8

000000000001190b         mov        r15, qword [rdx+0x38]
000000000001190f         lea        r14, qword [rdx+0x38]
0000000000011913         test       r15, r15
0000000000011916         je         loc_11b20

                     loc_1191c:
000000000001191c         mov        rsi, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+827, update_cur_sifted_state+840
0000000000011921         mov        rdx, r14
0000000000011924         mov        rdi, rbx
0000000000011927         call       re_node_set_add_intersect                   ; re_node_set_add_intersect
000000000001192c         test       eax, eax
000000000001192e         mov        dword [rsp+0xd8+var_7C], eax
0000000000011932         jne        loc_118b8

0000000000011934         cmp        qword [r13+0x28], 0x0
0000000000011939         jne        loc_11bb0

                     loc_1193f:
000000000001193f         mov        r14, qword [rsp+0xd8+var_C0]                ; CODE XREF=update_cur_sifted_state+1155
0000000000011944         add        r14, qword [r13]

                     loc_11948:
0000000000011948         lea        rdi, qword [rsp+0xd8+var_7C]                ; CODE XREF=update_cur_sifted_state+905
000000000001194d         mov        rdx, rbx
0000000000011950         mov        rsi, r12
0000000000011953         call       re_acquire_state                            ; re_acquire_state
0000000000011958         mov        qword [r14], rax
000000000001195b         mov        eax, dword [rsp+0xd8+var_7C]
000000000001195f         test       eax, eax
0000000000011961         jne        loc_118b8

0000000000011967         cmp        qword [rsp+0xd8+var_C8], 0x0
000000000001196d         je         loc_118b8

0000000000011973         mov        rax, qword [rsp+0xd8+var_D0]
0000000000011978         mov        rax, qword [rax+0xb8]
000000000001197f         mov        rdx, qword [rax+rbp*8]
0000000000011983         xor        eax, eax
0000000000011985         test       byte [rdx+0x68], 0x40
0000000000011989         je         loc_118b8

                     loc_1198f:
000000000001198f         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+140
0000000000011994         xor        ebx, ebx
0000000000011996         mov        rsi, qword [rax+0xc8]
000000000001199d         mov        rdx, rsi

                     loc_119a0:
00000000000119a0         cmp        rbx, rdx                                    ; CODE XREF=update_cur_sifted_state+759
00000000000119a3         jge        loc_11a03

00000000000119a5         lea        rax, qword [rbx+rdx]
00000000000119a9         mov        rcx, rax
00000000000119ac         shr        rcx, 0x3f
00000000000119b0         add        rcx, rax
00000000000119b3         mov        rax, qword [rsp+0xd8+var_D0]
00000000000119b8         sar        rcx, 0x1
00000000000119bb         mov        rdi, qword [rax+0xd8]
00000000000119c2         lea        rax, qword [rcx+rcx*4]
00000000000119c6         cmp        rbp, qword [rdi+rax*8+8]
00000000000119cb         jle        loc_119fe

00000000000119cd         jmp        loc_11b07
00000000000119d2         align      8

                     loc_119d8:
00000000000119d8         lea        rdx, qword [rbx+rcx]                        ; CODE XREF=update_cur_sifted_state+481
00000000000119dc         mov        rax, rdx
00000000000119df         shr        rax, 0x3f
00000000000119e3         add        rax, rdx
00000000000119e6         sar        rax, 0x1
00000000000119e9         lea        rdx, qword [rax+rax*4]
00000000000119ed         mov        r8, rax
00000000000119f0         cmp        rbp, qword [rdi+rdx*8+8]
00000000000119f5         jg         loc_11b10

00000000000119fb         mov        rcx, rax

                     loc_119fe:
00000000000119fe         cmp        rbx, rcx                                    ; CODE XREF=update_cur_sifted_state+427
0000000000011a01         jl         loc_119d8

                     loc_11a03:
0000000000011a03         cmp        rsi, rbx                                    ; CODE XREF=update_cur_sifted_state+387
0000000000011a06         jle        loc_11b00

0000000000011a0c         lea        rax, qword [rbx+rbx*4]
0000000000011a10         lea        rsi, qword [rax*8]
0000000000011a18         mov        rax, qword [rsp+0xd8+var_D0]
0000000000011a1d         mov        qword [rsp+0xd8+var_98], rsi
0000000000011a22         mov        rax, qword [rax+0xd8]
0000000000011a29         cmp        rbp, qword [rax+rsi+8]
0000000000011a2e         jne        loc_11b00

0000000000011a34         cmp        rbx, 0xffffffffffffffff
0000000000011a38         je         loc_11b00

0000000000011a3e         mov        rax, qword [rsp+0xd8+var_D0]
0000000000011a43         mov        qword [rsp+0xd8+var_78], 0x0
0000000000011a4c         mov        r12, qword [rax+0x98]
0000000000011a53         mov        rax, qword [rsp+0xd8+var_C8]
0000000000011a58         cmp        qword [rax+8], 0x0
0000000000011a5d         jle        loc_11b00

0000000000011a63         lea        rax, qword [rsp+0xd8+var_78]
0000000000011a68         mov        qword [rsp+0xd8+var_B8], 0x0
0000000000011a71         mov        qword [rsp+0xd8+var_90], rbx
0000000000011a76         mov        r15, r13
0000000000011a79         mov        qword [rsp+0xd8+var_A0], rax
0000000000011a7e         jmp        loc_11aa2

                     loc_11a80:
0000000000011a80         cmp        al, 0x4                                     ; CODE XREF=update_cur_sifted_state+679, update_cur_sifted_state+685
0000000000011a82         je         loc_11e08

                     loc_11a88:
0000000000011a88         mov        rcx, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+687, update_cur_sifted_state+1987
0000000000011a8d         add        qword [rsp+0xd8+var_B8], 0x1
0000000000011a93         mov        rax, qword [rsp+0xd8+var_B8]
0000000000011a98         cmp        rax, qword [rcx+8]
0000000000011a9c         jge        loc_1205b

                     loc_11aa2:
0000000000011aa2         mov        rax, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+606
0000000000011aa7         mov        rdi, qword [rsp+0xd8+var_B8]
0000000000011aac         mov        rax, qword [rax+0x10]
0000000000011ab0         mov        r14, qword [rax+rdi*8]
0000000000011ab4         mov        rax, r14
0000000000011ab7         shl        rax, 0x4
0000000000011abb         add        rax, qword [r12]
0000000000011abf         cmp        r14, qword [r15+0x10]
0000000000011ac3         movzx      eax, byte [rax+8]
0000000000011ac7         jne        loc_11a80

0000000000011ac9         cmp        rbp, qword [r15+0x18]
0000000000011acd         jne        loc_11a80

0000000000011acf         jmp        loc_11a88
0000000000011ad1         align      8

                     loc_11ad8:
0000000000011ad8         lea        r14, qword [rbp*8]                          ; CODE XREF=update_cur_sifted_state+99
0000000000011ae0         add        r14, qword [rsi]
0000000000011ae3         test       rcx, rcx
0000000000011ae6         jne        loc_11ba0

0000000000011aec         mov        qword [r14], 0x0
0000000000011af3         xor        eax, eax
0000000000011af5         jmp        loc_118b8
0000000000011afa         align      256

                     loc_11b00:
0000000000011b00         xor        eax, eax                                    ; CODE XREF=update_cur_sifted_state+486, update_cur_sifted_state+526, update_cur_sifted_state+536, update_cur_sifted_state+573, update_cur_sifted_state+2113
0000000000011b02         jmp        loc_118b8

                     loc_11b07:
0000000000011b07         mov        r8, rcx                                     ; CODE XREF=update_cur_sifted_state+429
0000000000011b0a         mov        rcx, rdx
0000000000011b0d         nop        dword [rax]

                     loc_11b10:
0000000000011b10         lea        rbx, qword [r8+1]                           ; CODE XREF=update_cur_sifted_state+469
0000000000011b14         mov        rdx, rcx
0000000000011b17         jmp        loc_119a0
0000000000011b1c         align      32

                     loc_11b20:
0000000000011b20         mov        rdi, qword [rbx+8]                          ; CODE XREF=update_cur_sifted_state+246
0000000000011b24         mov        qword [rdx+0x40], 0x0
0000000000011b2c         mov        qword [rsp+0xd8+var_B8], rdx
0000000000011b31         mov        qword [rdx+0x38], rdi
0000000000011b35         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
0000000000011b39         call       j_malloc                                    ; malloc
0000000000011b3e         mov        rdx, qword [rsp+0xd8+var_B8]
0000000000011b43         test       rax, rax
0000000000011b46         mov        qword [rdx+0x48], rax
0000000000011b4a         je         loc_11b93

0000000000011b4c         cmp        qword [rbx+8], 0x0
0000000000011b51         mov        dword [rsp+0xd8+var_78], 0x0
0000000000011b59         jg         loc_11b6e

0000000000011b5b         jmp        loc_1191c

                     loc_11b60:
0000000000011b60         add        r15, 0x1                                    ; CODE XREF=update_cur_sifted_state+881
0000000000011b64         cmp        r15, qword [rbx+8]
0000000000011b68         jge        loc_1191c

                     loc_11b6e:
0000000000011b6e         mov        rax, qword [rbx+0x10]                       ; CODE XREF=update_cur_sifted_state+825
0000000000011b72         mov        rdi, r14
0000000000011b75         mov        rax, qword [rax+r15*8]
0000000000011b79         lea        rdx, qword [rax+rax*2]
0000000000011b7d         mov        rax, qword [r12+0x38]
0000000000011b82         lea        rsi, qword [rax+rdx*8]
0000000000011b86         call       re_node_set_merge                           ; re_node_set_merge
0000000000011b8b         test       eax, eax
0000000000011b8d         mov        dword [rsp+0xd8+var_78], eax
0000000000011b91         je         loc_11b60

                     loc_11b93:
0000000000011b93         mov        eax, 0xc                                    ; CODE XREF=update_cur_sifted_state+810
0000000000011b98         jmp        loc_118b8
0000000000011b9d         align      32

                     loc_11ba0:
0000000000011ba0         mov        qword [rsp+0xd8+var_C8], 0x0                ; CODE XREF=update_cur_sifted_state+710
0000000000011ba9         jmp        loc_11948
0000000000011bae         align      16

                     loc_11bb0:
0000000000011bb0         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+281
0000000000011bb5         mov        rax, qword [rax+0xd8]
0000000000011bbc         mov        qword [rsp+0xd8+var_B8], rax
0000000000011bc1         jle        loc_11c9b

0000000000011bc7         xor        r15d, r15d
0000000000011bca         nop        word [rax+rax]

                     loc_11bd0:
0000000000011bd0         mov        rax, qword [r13+0x30]                       ; CODE XREF=update_cur_sifted_state+1141
0000000000011bd4         mov        rdi, qword [rsp+0xd8+var_B8]
0000000000011bd9         mov        rax, qword [rax+r15*8]
0000000000011bdd         lea        rax, qword [rax+rax*4]
0000000000011be1         lea        rdx, qword [rdi+rax*8]
0000000000011be5         cmp        rbp, qword [rdx+0x10]
0000000000011be9         jle        loc_11c8d

0000000000011bef         cmp        rbp, qword [rdx+8]
0000000000011bf3         jg         loc_11c8d

0000000000011bf9         mov        rcx, qword [rdx]
0000000000011bfc         mov        rax, qword [r12]
0000000000011c00         mov        rsi, qword [rbx+8]
0000000000011c04         shl        rcx, 0x4
0000000000011c08         cmp        rbp, qword [rdx+0x18]
0000000000011c0c         mov        r8, qword [rax+rcx]
0000000000011c10         je         loc_11cb0

0000000000011c16         xor        r14d, r14d
0000000000011c19         test       rsi, rsi
0000000000011c1c         jle        loc_11c8d

0000000000011c1e         mov        qword [rsp+0xd8+var_B0], rbp
0000000000011c23         mov        rbp, r8
0000000000011c26         jmp        loc_11c3e
0000000000011c28         align      16

                     loc_11c30:
0000000000011c30         add        r14, 0x1                                    ; CODE XREF=update_cur_sifted_state+1082, update_cur_sifted_state+1087
0000000000011c34         cmp        r14, qword [rbx+8]
0000000000011c38         jge        loc_11c88

                     loc_11c3a:
0000000000011c3a         mov        rax, qword [r12]                            ; CODE XREF=update_cur_sifted_state+1121

                     loc_11c3e:
0000000000011c3e         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=update_cur_sifted_state+1030
0000000000011c42         mov        rsi, qword [rdx+r14*8]
0000000000011c46         mov        rdx, rsi
0000000000011c49         shl        rdx, 0x4
0000000000011c4d         add        rax, rdx
0000000000011c50         movzx      edx, byte [rax+8]
0000000000011c54         sub        edx, 0x8
0000000000011c57         cmp        edx, 0x1
0000000000011c5a         ja         loc_11c30

0000000000011c5c         cmp        rbp, qword [rax]
0000000000011c5f         jne        loc_11c30

0000000000011c61         mov        rcx, qword [rsp+0xd8+var_C8]
0000000000011c66         mov        rdx, rbx
0000000000011c69         mov        rdi, r12
0000000000011c6c         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
0000000000011c71         test       eax, eax
0000000000011c73         jne        loc_118b8

0000000000011c79         add        r14, 0x1
0000000000011c7d         cmp        r14, qword [rbx+8]
0000000000011c81         jl         loc_11c3a

0000000000011c83         nop        dword [rax+rax]

                     loc_11c88:
0000000000011c88         mov        rbp, qword [rsp+0xd8+var_B0]                ; CODE XREF=update_cur_sifted_state+1048

                     loc_11c8d:
0000000000011c8d         add        r15, 0x1                                    ; CODE XREF=update_cur_sifted_state+969, update_cur_sifted_state+979, update_cur_sifted_state+1020, update_cur_sifted_state+1171, update_cur_sifted_state+1306, update_cur_sifted_state+1317, update_cur_sifted_state+1484, update_cur_sifted_state+1501
0000000000011c91         cmp        r15, qword [r13+0x28]
0000000000011c95         jl         loc_11bd0

                     loc_11c9b:
0000000000011c9b         mov        dword [rsp+0xd8+var_7C], 0x0                ; CODE XREF=update_cur_sifted_state+929
0000000000011ca3         jmp        loc_1193f
0000000000011ca8         align      16

                     loc_11cb0:
0000000000011cb0         test       rsi, rsi                                    ; CODE XREF=update_cur_sifted_state+1008
0000000000011cb3         jle        loc_11c8d

0000000000011cb5         mov        r10, qword [rbx+0x10]
0000000000011cb9         mov        r9, 0xffffffffffffffff
0000000000011cc0         lea        r11, qword [r10+rsi*8]
0000000000011cc4         mov        rcx, r10
0000000000011cc7         mov        rsi, r9
0000000000011cca         jmp        loc_11ce6
0000000000011ccc         align      16

                     loc_11cd0:
0000000000011cd0         cmp        r14d, 0x9                                   ; CODE XREF=update_cur_sifted_state+1244
0000000000011cd4         jne        loc_11cdd

0000000000011cd6         cmp        r8, qword [rdx]
0000000000011cd9         cmove      r9, rdi

                     loc_11cdd:
0000000000011cdd         add        rcx, 0x8                                    ; CODE XREF=update_cur_sifted_state+1204
0000000000011ce1         cmp        r11, rcx
0000000000011ce4         je         loc_11d0e

                     loc_11ce6:
0000000000011ce6         mov        rdi, qword [rcx]                            ; CODE XREF=update_cur_sifted_state+1194, update_cur_sifted_state+1260
0000000000011ce9         mov        rdx, rdi
0000000000011cec         shl        rdx, 0x4
0000000000011cf0         add        rdx, rax
0000000000011cf3         movzx      r14d, byte [rdx+8]
0000000000011cf8         cmp        r14d, 0x8
0000000000011cfc         jne        loc_11cd0

0000000000011cfe         cmp        r8, qword [rdx]
0000000000011d01         cmove      rsi, rdi
0000000000011d05         add        rcx, 0x8
0000000000011d09         cmp        r11, rcx
0000000000011d0c         jne        loc_11ce6

                     loc_11d0e:
0000000000011d0e         test       rsi, rsi                                    ; CODE XREF=update_cur_sifted_state+1220
0000000000011d11         mov        r14, r9
0000000000011d14         mov        qword [rsp+0xd8+var_B0], r9
0000000000011d19         js         loc_11de0

0000000000011d1f         mov        rcx, qword [rsp+0xd8+var_C8]
0000000000011d24         mov        rdx, rbx
0000000000011d27         mov        rdi, r12
0000000000011d2a         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
0000000000011d2f         test       eax, eax
0000000000011d31         jne        loc_118b8

0000000000011d37         test       r14, r14
0000000000011d3a         js         loc_11c8d

0000000000011d40         cmp        qword [rbx+8], 0x0
0000000000011d45         jle        loc_11c8d

0000000000011d4b         mov        r10, qword [rbx+0x10]

                     loc_11d4f:
0000000000011d4f         xor        r14d, r14d                                  ; CODE XREF=update_cur_sifted_state+1478
0000000000011d52         mov        qword [rsp+0xd8+var_A8], rbp
0000000000011d57         mov        rbp, r14
0000000000011d5a         mov        r14, qword [rsp+0xd8+var_B0]
0000000000011d5f         jmp        loc_11d7a
0000000000011d61         align      8

                     loc_11d68:
0000000000011d68         add        rbp, 0x1                                    ; CODE XREF=update_cur_sifted_state+1409, update_cur_sifted_state+1432, update_cur_sifted_state+1465
0000000000011d6c         cmp        rbp, qword [rbx+8]
0000000000011d70         jge        loc_11df8

0000000000011d76         mov        r10, qword [rbx+0x10]

                     loc_11d7a:
0000000000011d7a         mov        r10, qword [r10+rbp*8]                      ; CODE XREF=update_cur_sifted_state+1343
0000000000011d7e         mov        rax, qword [r12+0x38]
0000000000011d83         mov        rdx, r14
0000000000011d86         lea        r9, qword [r10+r10*2]
0000000000011d8a         shl        r9, 0x3
0000000000011d8e         add        rax, r9
0000000000011d91         mov        rdi, qword [rax+8]
0000000000011d95         lea        rsi, qword [rax+0x10]
0000000000011d99         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000011d9e         test       rax, rax
0000000000011da1         jne        loc_11d68

0000000000011da3         add        r9, qword [r12+0x30]
0000000000011da8         mov        rdi, qword [r9+8]
0000000000011dac         lea        rsi, qword [r9+0x10]
0000000000011db0         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000011db5         test       rax, rax
0000000000011db8         jne        loc_11d68

0000000000011dba         mov        rcx, qword [rsp+0xd8+var_C8]
0000000000011dbf         mov        rdx, rbx
0000000000011dc2         mov        rsi, r10
0000000000011dc5         mov        rdi, r12
0000000000011dc8         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
0000000000011dcd         test       eax, eax
0000000000011dcf         jne        loc_118b8

0000000000011dd5         sub        rbp, 0x1
0000000000011dd9         jmp        loc_11d68
0000000000011ddb         align      32

                     loc_11de0:
0000000000011de0         cmp        qword [rsp+0xd8+var_B0], 0x0                ; CODE XREF=update_cur_sifted_state+1273
0000000000011de6         jns        loc_11d4f

0000000000011dec         jmp        loc_11c8d
0000000000011df1         align      8

                     loc_11df8:
0000000000011df8         mov        rbp, qword [rsp+0xd8+var_A8]                ; CODE XREF=update_cur_sifted_state+1360
0000000000011dfd         jmp        loc_11c8d
0000000000011e02         align      8

                     loc_11e08:
0000000000011e08         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+610
0000000000011e0d         mov        r13, qword [rsp+0xd8+var_98]
0000000000011e12         mov        rbx, qword [rsp+0xd8+var_90]
0000000000011e17         add        r13, qword [rax+0xd8]
0000000000011e1e         lea        rax, qword [r14+r14*2]
0000000000011e22         shl        rax, 0x3
0000000000011e26         mov        qword [rsp+0xd8+var_A8], rax
0000000000011e2b         lea        rax, qword [r14*8]
0000000000011e33         mov        qword [rsp+0xd8+var_B0], rax
0000000000011e38         mov        rax, r15
0000000000011e3b         mov        r15, r13
0000000000011e3e         mov        r13, rbx
0000000000011e41         mov        rbx, rax
0000000000011e44         jmp        loc_11fae
0000000000011e49         align      16

                     loc_11e50:
0000000000011e50         mov        rax, qword [r15+0x18]                       ; CODE XREF=update_cur_sifted_state+1937
0000000000011e54         sub        rax, qword [r15+0x10]
0000000000011e58         test       rax, rax
0000000000011e5b         lea        r9, qword [rbp+rax]
0000000000011e60         je         loc_11fc0

0000000000011e66         mov        rax, qword [r12+0x18]
0000000000011e6b         mov        rsi, qword [rsp+0xd8+var_B0]
0000000000011e70         mov        r10, qword [rax+rsi]

                     loc_11e74:
0000000000011e74         cmp        r9, qword [rbx+0x18]                        ; CODE XREF=update_cur_sifted_state+1970
0000000000011e78         jg         loc_11fb7

0000000000011e7e         mov        rax, qword [rbx]
0000000000011e81         mov        rax, qword [rax+r9*8]
0000000000011e85         test       rax, rax
0000000000011e88         je         loc_11fb7

0000000000011e8e         mov        rdi, qword [rax+0x10]
0000000000011e92         lea        rsi, qword [rax+0x18]
0000000000011e96         mov        rdx, r10
0000000000011e99         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000011e9e         test       rax, rax
0000000000011ea1         je         loc_11fb7

0000000000011ea7         sub        rsp, 0x8
0000000000011eab         lea        rdx, qword [rbx+0x30]
0000000000011eaf         lea        rsi, qword [rbx+0x28]
0000000000011eb3         push       r9
0000000000011eb5         mov        rdi, qword [rsp+0xe8+var_D0]
0000000000011eba         mov        rcx, r14
0000000000011ebd         mov        r9, r10
0000000000011ec0         mov        r8, rbp
0000000000011ec3         call       check_dst_limits.isra.13                    ; check_dst_limits.isra.13
0000000000011ec8         test       al, al
0000000000011eca         pop        rdx
0000000000011ecb         pop        rcx
0000000000011ecc         jne        loc_11fb7

0000000000011ed2         cmp        qword [rsp+0xd8+var_78], 0x0
0000000000011ed8         je         loc_11fe8

                     loc_11ede:
0000000000011ede         mov        rax, qword [rsp+0xd8+var_A0]                ; CODE XREF=update_cur_sifted_state+2056
0000000000011ee3         mov        rsi, r13
0000000000011ee6         mov        qword [rsp+0xd8+var_68], r14
0000000000011eeb         mov        qword [rsp+0xd8+var_60], rbp
0000000000011ef0         lea        rdi, qword [rax+0x20]
0000000000011ef4         call       re_node_set_insert                          ; re_node_set_insert
0000000000011ef9         test       al, al
0000000000011efb         je         loc_12054

0000000000011f01         mov        rdi, qword [rsp+0xd8+var_C0]
0000000000011f06         mov        rax, qword [rsp+0xd8+var_78]
0000000000011f0b         mov        rsi, qword [rsp+0xd8+var_A0]
0000000000011f10         mov        r15, qword [rax+rdi]
0000000000011f14         mov        rdi, qword [rsp+0xd8+var_D0]
0000000000011f19         call       sift_states_backward                        ; sift_states_backward
0000000000011f1e         test       eax, eax
0000000000011f20         jne        loc_1202e

0000000000011f26         mov        rsi, qword [rbx+8]
0000000000011f2a         mov        rdx, qword [rsp+0xd8+var_78]
0000000000011f2f         test       rsi, rsi
0000000000011f32         je         loc_11f4d

0000000000011f34         lea        rcx, qword [rbp+1]
0000000000011f38         mov        rdi, r12
0000000000011f3b         call       merge_state_array                           ; merge_state_array
0000000000011f40         test       eax, eax
0000000000011f42         jne        loc_1202e

0000000000011f48         mov        rdx, qword [rsp+0xd8+var_78]

                     loc_11f4d:
0000000000011f4d         mov        r11, qword [rsp+0xd8+var_A0]                ; CODE XREF=update_cur_sifted_state+1810
0000000000011f52         mov        rax, qword [rsp+0xd8+var_C0]
0000000000011f57         mov        rdi, qword [rsp+0xd8+var_50]
0000000000011f5f         lea        r9, qword [r11+0x30]
0000000000011f63         mov        qword [rdx+rax], r15
0000000000011f67         mov        rdx, r13
0000000000011f6a         mov        rsi, r9
0000000000011f6d         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000011f72         sub        rax, 0x1
0000000000011f76         mov        rdx, rax
0000000000011f79         js         loc_11f87

0000000000011f7b         lea        rdi, qword [r11+0x28]
0000000000011f7f         mov        rsi, r9
0000000000011f82         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_11f87:
0000000000011f87         mov        rcx, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+1881
0000000000011f8c         lea        rax, qword [r13+r13*4]
0000000000011f91         mov        rdx, qword [rcx+0xd8]
0000000000011f98         lea        rax, qword [rdx+rax*8]
0000000000011f9c         nop        dword [rax]

                     loc_11fa0:
0000000000011fa0         add        r13, 0x1                                    ; CODE XREF=update_cur_sifted_state+1946
0000000000011fa4         cmp        byte [rax+0x20], 0x0
0000000000011fa8         lea        r15, qword [rax+0x28]
0000000000011fac         je         loc_11fe0

                     loc_11fae:
0000000000011fae         cmp        r14, qword [r15]                            ; CODE XREF=update_cur_sifted_state+1572
0000000000011fb1         je         loc_11e50

                     loc_11fb7:
0000000000011fb7         mov        rax, r15                                    ; CODE XREF=update_cur_sifted_state+1624, update_cur_sifted_state+1640, update_cur_sifted_state+1665, update_cur_sifted_state+1708
0000000000011fba         jmp        loc_11fa0
0000000000011fbc         align      64

                     loc_11fc0:
0000000000011fc0         mov        rax, qword [r12+0x28]                       ; CODE XREF=update_cur_sifted_state+1600
0000000000011fc5         mov        rdi, qword [rsp+0xd8+var_A8]
0000000000011fca         mov        rax, qword [rax+rdi+0x10]
0000000000011fcf         mov        r10, qword [rax]
0000000000011fd2         jmp        loc_11e74
0000000000011fd7         align      32

                     loc_11fe0:
0000000000011fe0         mov        r15, rbx                                    ; CODE XREF=update_cur_sifted_state+1932
0000000000011fe3         jmp        loc_11a88

                     loc_11fe8:
0000000000011fe8         mov        rax, qword [rbx+0x30]                       ; CODE XREF=update_cur_sifted_state+1720
0000000000011fec         lea        rsi, qword [rbx+0x20]
0000000000011ff0         movdqa     xmm0, xmmword [rbx]
0000000000011ff4         mov        qword [rsp+0xd8+var_48], rax
0000000000011ffc         mov        rax, qword [rsp+0xd8+var_A0]
0000000000012001         movaps     xmmword [rsp+0xd8+var_78], xmm0
0000000000012006         lea        rdi, qword [rax+0x20]
000000000001200a         movdqa     xmm0, xmmword [rbx+0x10]
000000000001200f         movaps     xmmword [rsp+0xd8+var_68], xmm0
0000000000012014         movdqa     xmm0, xmmword [rbx+0x20]
0000000000012019         movaps     xmmword [rsp+0xd8+var_58], xmm0
0000000000012021         call       re_node_set_init_copy                       ; re_node_set_init_copy
0000000000012026         test       eax, eax
0000000000012028         je         loc_11ede

                     loc_1202e:
000000000001202e         cmp        qword [rsp+0xd8+var_78], 0x0                ; CODE XREF=update_cur_sifted_state+1792, update_cur_sifted_state+1826, update_cur_sifted_state+2105
0000000000012034         je         loc_118b8

                     loc_1203a:
000000000001203a         mov        rdi, qword [rsp+0xd8+var_48]                ; argument "__ptr" for method j_free, CODE XREF=update_cur_sifted_state+2121
0000000000012042         mov        dword [rsp+0xd8+var_D0], eax
0000000000012046         call       j_free                                      ; free
000000000001204b         mov        eax, dword [rsp+0xd8+var_D0]
000000000001204f         jmp        loc_118b8

                     loc_12054:
0000000000012054         mov        eax, 0xc                                    ; CODE XREF=update_cur_sifted_state+1755
0000000000012059         jmp        loc_1202e

                     loc_1205b:
000000000001205b         cmp        qword [rsp+0xd8+var_78], 0x0                ; CODE XREF=update_cur_sifted_state+636
0000000000012061         je         loc_11b00

0000000000012067         xor        eax, eax
0000000000012069         jmp        loc_1203a

                     loc_1206b:
000000000001206b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=update_cur_sifted_state+169
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int8_t, -64


                     parse_bracket_element.constprop.37:
0000000000012070         push       r14                                         ; End of unwind block (FDE at 0x1a3c8), Begin of unwind block (FDE at 0x1a428), CODE XREF=sub_13290+271, sub_13290+1639
0000000000012072         push       r13
0000000000012074         mov        r10, rsi
0000000000012077         push       r12
0000000000012079         push       rbp
000000000001207a         movsxd     r11, ecx
000000000001207d         push       rbx
000000000001207e         mov        rbp, rdx
0000000000012081         mov        rbx, rdi
0000000000012084         sub        rsp, 0x20
0000000000012088         mov        r12, qword [rsi+0x48]
000000000001208c         mov        rax, qword [fs:0x28]
0000000000012095         mov        qword [rsp+0x48+var_30], rax
000000000001209a         xor        eax, eax
000000000001209c         cmp        dword [rsi+0x90], 0x1
00000000000120a3         je         loc_120f8

00000000000120a5         mov        rsi, r12
00000000000120a8         mov        rdi, r10
00000000000120ab         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
00000000000120b0         cmp        eax, 0x1
00000000000120b3         jle        loc_120f8

00000000000120b5         mov        rdx, qword [r10+0x10]
00000000000120b9         cdqe
00000000000120bb         mov        dword [rbx], 0x1
00000000000120c1         add        rax, r12
00000000000120c4         mov        edx, dword [rdx+r12*4]
00000000000120c8         mov        dword [rbx+8], edx
00000000000120cb         mov        qword [r10+0x48], rax
00000000000120cf         xor        eax, eax

                     loc_120d1:
00000000000120d1         mov        rcx, qword [rsp+0x48+var_30]                ; CODE XREF=parse_bracket_element.constprop.37+189, parse_bracket_element.constprop.37+353, parse_bracket_element.constprop.37+493, parse_bracket_element.constprop.37+528, parse_bracket_element.constprop.37+569, parse_bracket_element.constprop.37+582, parse_bracket_element.constprop.37+595
00000000000120d6         xor        rcx, qword [fs:0x28]
00000000000120df         jne        loc_122c8

00000000000120e5         add        rsp, 0x20
00000000000120e9         pop        rbx
00000000000120ea         pop        rbp
00000000000120eb         pop        r12
00000000000120ed         pop        r13
00000000000120ef         pop        r14
00000000000120f1         ret
                        ; endp
00000000000120f2         align      8

                     loc_120f8:
00000000000120f8         movzx      eax, byte [rbp+8]                           ; CODE XREF=parse_bracket_element.constprop.37+51, parse_bracket_element.constprop.37+67
00000000000120fc         add        r11, r12
00000000000120ff         mov        qword [r10+0x48], r11
0000000000012103         mov        edx, eax
0000000000012105         and        edx, 0xfffffffb
0000000000012108         cmp        dl, 0x1a
000000000001210b         je         loc_12130

000000000001210d         cmp        al, 0x1c
000000000001210f         je         loc_12130

0000000000012111         cmp        al, 0x16
0000000000012113         jne        loc_1211e

0000000000012115         test       r9b, r9b
0000000000012118         je         loc_12262

                     loc_1211e:
000000000001211e         movzx      eax, byte [rbp]                             ; CODE XREF=parse_bracket_element.constprop.37+163, parse_bracket_element.constprop.37+522
0000000000012122         mov        dword [rbx], 0x0
0000000000012128         mov        byte [rbx+8], al
000000000001212b         xor        eax, eax
000000000001212d         jmp        loc_120d1
000000000001212f         align      16

                     loc_12130:
0000000000012130         mov        r12, qword [r10+0x68]                       ; CODE XREF=parse_bracket_element.constprop.37+155, parse_bracket_element.constprop.37+159
0000000000012134         cmp        r11, r12
0000000000012137         jge        loc_12258

000000000001213d         movzx      r13d, byte [rbp]
0000000000012142         xor        r8d, r8d
0000000000012145         jmp        loc_12172
0000000000012147         align      16

                     loc_12150:
0000000000012150         mov        rax, qword [rbx+8]                          ; CODE XREF=parse_bracket_element.constprop.37+294, parse_bracket_element.constprop.37+304
0000000000012154         mov        byte [rax+r8], r9b
0000000000012158         add        r8, 0x1
000000000001215c         cmp        r8, 0x20
0000000000012160         je         loc_12258

0000000000012166         movzx      eax, byte [rbp+8]
000000000001216a         mov        r11, qword [r10+0x48]
000000000001216e         mov        r12, qword [r10+0x68]

                     loc_12172:
0000000000012172         cmp        al, 0x1e                                    ; CODE XREF=parse_bracket_element.constprop.37+213
0000000000012174         movsxd     r14, r8d
0000000000012177         je         loc_121e0

                     loc_12179:
0000000000012179         mov        rdx, qword [r10+8]                          ; CODE XREF=parse_bracket_element.constprop.37+376, parse_bracket_element.constprop.37+407, parse_bracket_element.constprop.37+436
000000000001217d         lea        rax, qword [r11+1]
0000000000012181         mov        qword [r10+0x48], rax
0000000000012185         movzx      r9d, byte [rdx+r11]

                     loc_1218a:
000000000001218a         cmp        rax, r12                                    ; CODE XREF=parse_bracket_element.constprop.37+477, parse_bracket_element.constprop.37+556
000000000001218d         jge        loc_12258

0000000000012193         cmp        r13b, r9b
0000000000012196         jne        loc_12150

0000000000012198         mov        rdx, qword [r10+8]
000000000001219c         cmp        byte [rdx+rax], 0x5d
00000000000121a0         jne        loc_12150

00000000000121a2         add        rax, 0x1
00000000000121a6         mov        qword [r10+0x48], rax
00000000000121aa         mov        rax, qword [rbx+8]
00000000000121ae         mov        byte [rax+r14], 0x0
00000000000121b3         movzx      eax, byte [rbp+8]
00000000000121b7         cmp        al, 0x1c
00000000000121b9         je         loc_122bb

00000000000121bf         cmp        al, 0x1e
00000000000121c1         je         loc_122ae

00000000000121c7         cmp        al, 0x1a
00000000000121c9         je         loc_122a1

00000000000121cf         xor        eax, eax
00000000000121d1         jmp        loc_120d1
00000000000121d6         align      32

                     loc_121e0:
00000000000121e0         cmp        byte [r10+0x8b], 0x0                        ; CODE XREF=parse_bracket_element.constprop.37+263
00000000000121e8         je         loc_12179

00000000000121ea         cmp        byte [r10+0x8c], 0x0
00000000000121f2         je         loc_12288

00000000000121f8         cmp        r11, qword [r10+0x30]
00000000000121fc         je         loc_1220d

00000000000121fe         mov        rax, qword [r10+0x10]
0000000000012202         cmp        dword [rax+r11*4], 0xffffffff
0000000000012207         je         loc_12179

                     loc_1220d:
000000000001220d         mov        rax, qword [r10+0x18]                       ; CODE XREF=parse_bracket_element.constprop.37+396
0000000000012211         mov        rax, qword [rax+r11*8]
0000000000012215         add        rax, qword [r10]
0000000000012218         add        rax, qword [r10+0x28]
000000000001221c         movzx      r9d, byte [rax]
0000000000012220         test       r9b, 0x80
0000000000012224         jne        loc_12179

000000000001222a         cmp        dword [r10+0x90], 0x1
0000000000012232         mov        eax, 0x1
0000000000012237         je         loc_12246

0000000000012239         mov        rsi, r11
000000000001223c         mov        rdi, r10
000000000001223f         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
0000000000012244         cdqe

                     loc_12246:
0000000000012246         add        rax, r11                                    ; CODE XREF=parse_bracket_element.constprop.37+455
0000000000012249         mov        qword [r10+0x48], rax
000000000001224d         jmp        loc_1218a
0000000000012252         align      8

                     loc_12258:
0000000000012258         mov        eax, 0x7                                    ; CODE XREF=parse_bracket_element.constprop.37+199, parse_bracket_element.constprop.37+240, parse_bracket_element.constprop.37+285
000000000001225d         jmp        loc_120d1

                     loc_12262:
0000000000012262         mov        rdi, rsp                                    ; CODE XREF=parse_bracket_element.constprop.37+168
0000000000012265         mov        rdx, r8
0000000000012268         mov        rsi, r10
000000000001226b         call       peek_token_bracket                          ; peek_token_bracket
0000000000012270         cmp        byte [rsp+0x48+var_40], 0x15
0000000000012275         mov        eax, 0xb
000000000001227a         je         loc_1211e

0000000000012280         jmp        loc_120d1
0000000000012285         align      8

                     loc_12288:
0000000000012288         lea        rax, qword [r11+1]                          ; CODE XREF=parse_bracket_element.constprop.37+386
000000000001228c         add        r11, qword [r10]
000000000001228f         mov        rdx, qword [r10+0x28]
0000000000012293         mov        qword [r10+0x48], rax
0000000000012297         movzx      r9d, byte [r11+rdx]
000000000001229c         jmp        loc_1218a

                     loc_122a1:
00000000000122a1         mov        dword [rbx], 0x3                            ; CODE XREF=parse_bracket_element.constprop.37+345
00000000000122a7         xor        eax, eax
00000000000122a9         jmp        loc_120d1

                     loc_122ae:
00000000000122ae         mov        dword [rbx], 0x4                            ; CODE XREF=parse_bracket_element.constprop.37+337
00000000000122b4         xor        eax, eax
00000000000122b6         jmp        loc_120d1

                     loc_122bb:
00000000000122bb         mov        dword [rbx], 0x2                            ; CODE XREF=parse_bracket_element.constprop.37+329
00000000000122c1         xor        eax, eax
00000000000122c3         jmp        loc_120d1

                     loc_122c8:
00000000000122c8         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_bracket_element.constprop.37+111
                        ; endp
00000000000122cd         align      16                                          ; End of unwind block (FDE at 0x1a428)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     peek_token:
00000000000122d0         push       r15                                         ; Begin of unwind block (FDE at 0x1a46c), CODE XREF=peek_token+1722, fetch_number+41, parse_expression+139, sub_12b20+292, sub_12b20+385, sub_12b20+1077, sub_13150+304, sub_13290+789, sub_13290+2010, parse_reg_exp+266, re_compile_internal+1168
00000000000122d2         push       r14
00000000000122d4         push       r13
00000000000122d6         push       r12
00000000000122d8         push       rbp
00000000000122d9         push       rbx
00000000000122da         mov        rbp, rdi
00000000000122dd         sub        rsp, 0x38
00000000000122e1         mov        r14, qword [rsi+0x48]
00000000000122e5         mov        rax, qword [fs:0x28]
00000000000122ee         mov        qword [rsp+0x68+var_40], rax
00000000000122f3         xor        eax, eax
00000000000122f5         cmp        qword [rsi+0x68], r14
00000000000122f9         jle        loc_12390

00000000000122ff         movzx      r13d, byte [rdi+0xa]
0000000000012304         mov        r15, rdx
0000000000012307         mov        rdx, qword [rsi+8]
000000000001230b         mov        rbx, rsi
000000000001230e         movzx      r12d, byte [rdx+r14]
0000000000012313         and        r13d, 0xffffff9f
0000000000012317         mov        byte [rdi+0xa], r13b
000000000001231b         mov        eax, dword [rsi+0x90]
0000000000012321         mov        byte [rdi], r12b
0000000000012324         cmp        eax, 0x1
0000000000012327         jle        loc_123c0

000000000001232d         cmp        r14, qword [rsi+0x30]
0000000000012331         je         loc_124d0

0000000000012337         mov        rcx, qword [rsi+0x10]
000000000001233b         mov        ecx, dword [rcx+r14*4]
000000000001233f         cmp        ecx, 0xffffffff
0000000000012342         je         loc_12420

0000000000012348         cmp        r12b, 0x5c
000000000001234c         je         loc_12440

0000000000012352         mov        byte [rdi+8], 0x1

                     loc_12356:
0000000000012356         mov        edi, ecx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=peek_token+534
0000000000012358         mov        qword [rsp+0x68+var_60], rdx
000000000001235d         mov        dword [rsp+0x68+var_68], ecx
0000000000012360         call       j_iswalnum                                  ; iswalnum
0000000000012365         mov        ecx, dword [rsp+0x68+var_68]
0000000000012368         test       eax, eax
000000000001236a         setne      al
000000000001236d         cmp        ecx, 0x5f
0000000000012370         sete       cl
0000000000012373         or         eax, ecx
0000000000012375         shl        eax, 0x6
0000000000012378         or         r13d, eax
000000000001237b         mov        byte [rbp+0xa], r13b
000000000001237f         mov        rdx, qword [rsp+0x68+var_60]
0000000000012384         jmp        loc_123fc
0000000000012386         align      16

                     loc_12390:
0000000000012390         mov        byte [rdi+8], 0x2                           ; CODE XREF=peek_token+41

                     loc_12394:
0000000000012394         mov        rdi, qword [rsp+0x68+var_40]                ; CODE XREF=peek_token+353, peek_token+553, peek_token+579, peek_token+589, peek_token+625, peek_token+659, peek_token+669, peek_token+714, peek_token+729, peek_token+748, peek_token+758
0000000000012399         xor        rdi, qword [fs:0x28]
00000000000123a2         jne        loc_129c8

00000000000123a8         add        rsp, 0x38
00000000000123ac         pop        rbx
00000000000123ad         pop        rbp
00000000000123ae         pop        r12
00000000000123b0         pop        r13
00000000000123b2         pop        r14
00000000000123b4         pop        r15
00000000000123b6         ret
                        ; endp
00000000000123b7         align      64

                     loc_123c0:
00000000000123c0         cmp        r12b, 0x5c                                  ; CODE XREF=peek_token+87
00000000000123c4         je         loc_12440

00000000000123c6         mov        byte [rbp+8], 0x1
00000000000123ca         mov        qword [rsp+0x68+var_68], rdx
00000000000123ce         call       j___ctype_b_loc                             ; __ctype_b_loc
00000000000123d3         mov        rsi, qword [rax]
00000000000123d6         movzx      ecx, r12b
00000000000123da         movzx      eax, word [rsi+rcx*2]
00000000000123de         shr        ax, 0x3
00000000000123e2         and        eax, 0x1
00000000000123e5         cmp        r12b, 0x5f
00000000000123e9         sete       cl
00000000000123ec         or         eax, ecx
00000000000123ee         shl        eax, 0x6
00000000000123f1         or         r13d, eax
00000000000123f4         mov        byte [rbp+0xa], r13b
00000000000123f8         mov        rdx, qword [rsp+0x68+var_68]

                     loc_123fc:
00000000000123fc         sub        r12d, 0xa                                   ; CODE XREF=peek_token+180
0000000000012400         cmp        r12b, 0x73
0000000000012404         ja         loc_1253c

000000000001240a         lea        rcx, qword [switch_table_17774]             ; switch_table_17774
0000000000012411         movzx      r12d, r12b
0000000000012415         movsxd     rax, dword [rcx+r12*4]
0000000000012419         add        rax, rcx
000000000001241c         jmp        rax                                         ; switch statement using table at 0x17774, with 116 cases, 0x12500,0x12528,0x1253c,0x12550,0x12578,0x125a0,0x125b0,0x125d0,0x125e0,0x12600,0x12620,0x12630,0x12650,0x12670
000000000001241e         align      32

                     loc_12420:
0000000000012420         or         r13d, 0x20                                  ; CODE XREF=peek_token+114
0000000000012424         mov        byte [rdi+8], 0x1
0000000000012428         mov        eax, 0x1
000000000001242d         mov        byte [rdi+0xa], r13b
0000000000012431         jmp        loc_12394
0000000000012436         align      64

                     loc_12440:
0000000000012440         lea        rsi, qword [r14+1]                          ; CODE XREF=peek_token+124, peek_token+244, peek_token+516
0000000000012444         cmp        rsi, qword [rbx+0x58]
0000000000012448         jge        loc_124f0

000000000001244e         cmp        byte [rbx+0x8b], 0x0
0000000000012455         jne        loc_128e0

                     loc_1245b:
000000000001245b         movzx      edi, byte [rdx+r14+1]                       ; CODE XREF=peek_token+1647
0000000000012461         mov        r12d, edi
0000000000012464         mov        dword [rsp+0x68+var_60], edi

                     loc_12468:
0000000000012468         cmp        eax, 0x1                                    ; CODE XREF=peek_token+1653, peek_token+1702
000000000001246b         mov        byte [rbp], r12b
000000000001246f         mov        byte [rbp+8], 0x1
0000000000012473         jle        loc_128c0

0000000000012479         mov        rax, qword [rbx+0x10]
000000000001247d         mov        r8d, dword [rax+rsi*4]

                     loc_12481:
0000000000012481         mov        edi, r8d                                    ; argument "__wc" for method j_iswalnum, CODE XREF=peek_token+1779
0000000000012484         mov        dword [rsp+0x68+var_68], r8d
0000000000012488         call       j_iswalnum                                  ; iswalnum
000000000001248d         mov        r8d, dword [rsp+0x68+var_68]
0000000000012491         test       eax, eax
0000000000012493         setne      al
0000000000012496         cmp        r8d, 0x5f

                     loc_1249a:
000000000001249a         sete       dl                                          ; CODE XREF=peek_token+1547
000000000001249d         lea        ecx, dword [r12-0x27]
00000000000124a2         or         eax, edx
00000000000124a4         shl        eax, 0x6
00000000000124a7         or         r13d, eax
00000000000124aa         cmp        cl, 0x56
00000000000124ad         mov        byte [rbp+0xa], r13b
00000000000124b1         ja         loc_128b5

00000000000124b7         lea        rdx, qword [switch_table_17944]             ; switch_table_17944
00000000000124be         movzx      ecx, cl
00000000000124c1         movsxd     rax, dword [rdx+rcx*4]
00000000000124c5         add        rax, rdx
00000000000124c8         jmp        rax                                         ; switch statement using table at 0x17944, with 87 cases, 0x12699,0x126b4,0x126d2,0x126ed,0x12708,0x12726,0x12748,0x1276a,0x12785,0x127a0,0x127c2,0x127dd,0x127ff,0x12821,0x1284a,0x12865,0x1287c,0x12893,0x128b5
00000000000124ca         align      16

                     loc_124d0:
00000000000124d0         cmp        r12b, 0x5c                                  ; CODE XREF=peek_token+97
00000000000124d4         je         loc_12440

00000000000124da         mov        rax, qword [rbx+0x10]
00000000000124de         mov        byte [rbp+8], 0x1
00000000000124e2         mov        ecx, dword [rax+r14*4]
00000000000124e6         jmp        loc_12356
00000000000124eb         align      16

                     loc_124f0:
00000000000124f0         mov        byte [rbp+8], 0x24                          ; CODE XREF=peek_token+376
00000000000124f4         mov        eax, 0x1
00000000000124f9         jmp        loc_12394
00000000000124fe         align      256

                     loc_12500:
0000000000012500         and        r15d, 0x1200                                ; case 115, CODE XREF=peek_token+332
0000000000012507         mov        eax, 0x1
000000000001250c         cmp        r15, 0x1200
0000000000012513         jne        loc_12394

                     loc_12519:
0000000000012519         mov        byte [rbp+8], 0x18                          ; CODE XREF=peek_token+1105
000000000001251d         jmp        loc_12394
0000000000012522         align      8

                     loc_12528:
0000000000012528         and        r15d, 0x8400                                ; case 114, CODE XREF=peek_token+332
000000000001252f         cmp        r15, 0x8000
0000000000012536         je         loc_12612

                     loc_1253c:
000000000001253c         mov        eax, 0x1                                    ; case 112, CODE XREF=peek_token+308, peek_token+332, peek_token+1664, peek_token+1677
0000000000012541         jmp        loc_12394
0000000000012546         align      16

                     loc_12550:
0000000000012550         and        r15d, 0x1200                                ; case 113, CODE XREF=peek_token+332
0000000000012557         mov        eax, 0x1
000000000001255c         cmp        r15, 0x1200
0000000000012563         jne        loc_12394

                     loc_12569:
0000000000012569         mov        byte [rbp+8], 0x17                          ; CODE XREF=peek_token+1021
000000000001256d         jmp        loc_12394
0000000000012572         align      8

                     loc_12578:
0000000000012578         test       r15d, 0x800008                              ; case 84, CODE XREF=peek_token+332
000000000001257f         jne        loc_1258a

0000000000012581         test       r14, r14
0000000000012584         jne        loc_1294a

                     loc_1258a:
000000000001258a         mov        byte [rbp+8], 0xc                           ; CODE XREF=peek_token+687, peek_token+1683
000000000001258e         mov        dword [rbp], 0x10
0000000000012595         mov        eax, 0x1
000000000001259a         jmp        loc_12394
000000000001259f         align      32

                     loc_125a0:
00000000000125a0         mov        byte [rbp+8], 0x14                          ; case 81, CODE XREF=peek_token+332
00000000000125a4         mov        eax, 0x1
00000000000125a9         jmp        loc_12394
00000000000125ae         align      16

                     loc_125b0:
00000000000125b0         test       r15d, 0x402                                 ; case 53, CODE XREF=peek_token+332
00000000000125b7         mov        eax, 0x1
00000000000125bc         jne        loc_12394

                     loc_125c2:
00000000000125c2         mov        byte [rbp+8], 0x13                          ; CODE XREF=peek_token+1288
00000000000125c6         jmp        loc_12394
00000000000125cb         align      16

                     loc_125d0:
00000000000125d0         mov        byte [rbp+8], 0x5                           ; case 36, CODE XREF=peek_token+332
00000000000125d4         mov        eax, 0x1
00000000000125d9         jmp        loc_12394
00000000000125de         align      32

                     loc_125e0:
00000000000125e0         test       r15d, 0x402                                 ; case 33, CODE XREF=peek_token+332
00000000000125e7         mov        eax, 0x1
00000000000125ec         jne        loc_12394

                     loc_125f2:
00000000000125f2         mov        byte [rbp+8], 0x12                          ; CODE XREF=peek_token+1424
00000000000125f6         jmp        loc_12394
00000000000125fb         align      512

                     loc_12600:
0000000000012600         test       r15d, 0x800                                 ; case 0, CODE XREF=peek_token+332
0000000000012607         mov        eax, 0x1
000000000001260c         je         loc_12394

                     loc_12612:
0000000000012612         mov        byte [rbp+8], 0xa                           ; CODE XREF=peek_token+614
0000000000012616         mov        eax, 0x1
000000000001261b         jmp        loc_12394

                     loc_12620:
0000000000012620         mov        byte [rbp+8], 0xb                           ; case 32, CODE XREF=peek_token+332
0000000000012624         mov        eax, 0x1
0000000000012629         jmp        loc_12394
000000000001262e         align      16

                     loc_12630:
0000000000012630         test       r15d, 0x2000                                ; case 31, CODE XREF=peek_token+332
0000000000012637         mov        eax, 0x1
000000000001263c         je         loc_12394

                     loc_12642:
0000000000012642         mov        byte [rbp+8], 0x9                           ; CODE XREF=peek_token+1447
0000000000012646         jmp        loc_12394
000000000001264b         align      16

                     loc_12650:
0000000000012650         test       r15d, 0x2000                                ; case 30, CODE XREF=peek_token+332
0000000000012657         mov        eax, 0x1
000000000001265c         je         loc_12394

                     loc_12662:
0000000000012662         mov        byte [rbp+8], 0x8                           ; CODE XREF=peek_token+1470
0000000000012666         jmp        loc_12394
000000000001266b         align      16

                     loc_12670:
0000000000012670         test       r15b, 0x8                                   ; case 26, CODE XREF=peek_token+332
0000000000012674         jne        loc_12684

0000000000012676         add        r14, 0x1
000000000001267a         cmp        r14, qword [rbx+0x58]
000000000001267e         jne        loc_1297b

                     loc_12684:
0000000000012684         mov        byte [rbp+8], 0xc                           ; CODE XREF=peek_token+932, peek_token+1754
0000000000012688         mov        dword [rbp], 0x20
000000000001268f         mov        eax, 0x1
0000000000012694         jmp        loc_12394

                     loc_12699:
0000000000012699         test       r15d, 0x8400                                ; case 85, CODE XREF=peek_token+504
00000000000126a0         mov        eax, 0x2
00000000000126a5         jne        loc_12394

00000000000126ab         mov        byte [rbp+8], 0xa
00000000000126af         jmp        loc_12394

                     loc_126b4:
00000000000126b4         and        r15d, 0x1200                                ; case 84, CODE XREF=peek_token+504
00000000000126bb         mov        eax, 0x2
00000000000126c0         cmp        r15, 0x200
00000000000126c7         jne        loc_12394

00000000000126cd         jmp        loc_12569

                     loc_126d2:
00000000000126d2         test       r15d, 0x80000                               ; case 80, CODE XREF=peek_token+504
00000000000126d9         mov        eax, 0x2
00000000000126de         jne        loc_12394

00000000000126e4         mov        byte [rbp+8], 0x20
00000000000126e8         jmp        loc_12394

                     loc_126ed:
00000000000126ed         test       r15d, 0x80000                               ; case 76, CODE XREF=peek_token+504
00000000000126f4         mov        eax, 0x2
00000000000126f9         jne        loc_12394

00000000000126ff         mov        byte [rbp+8], 0x22
0000000000012703         jmp        loc_12394

                     loc_12708:
0000000000012708         and        r15d, 0x1200                                ; case 86, CODE XREF=peek_token+504
000000000001270f         mov        eax, 0x2
0000000000012714         cmp        r15, 0x200
000000000001271b         jne        loc_12394

0000000000012721         jmp        loc_12519

                     loc_12726:
0000000000012726         test       r15d, 0x80000                               ; case 59, CODE XREF=peek_token+504
000000000001272d         mov        eax, 0x2
0000000000012732         jne        loc_12394

0000000000012738         mov        byte [rbp+8], 0xc
000000000001273c         mov        dword [rbp], 0x100
0000000000012743         jmp        loc_12394

                     loc_12748:
0000000000012748         test       r15d, 0x80000                               ; case 57, CODE XREF=peek_token+504
000000000001274f         mov        eax, 0x2
0000000000012754         jne        loc_12394

000000000001275a         mov        byte [rbp+8], 0xc
000000000001275e         mov        dword [rbp], 0x40
0000000000012765         jmp        loc_12394

                     loc_1276a:
000000000001276a         test       r15d, 0x80000                               ; case 48, CODE XREF=peek_token+504
0000000000012771         mov        eax, 0x2
0000000000012776         jne        loc_12394

000000000001277c         mov        byte [rbp+8], 0x21
0000000000012780         jmp        loc_12394

                     loc_12785:
0000000000012785         test       r15d, 0x80000                               ; case 44, CODE XREF=peek_token+504
000000000001278c         mov        eax, 0x2
0000000000012791         jne        loc_12394

0000000000012797         mov        byte [rbp+8], 0x23
000000000001279b         jmp        loc_12394

                     loc_127a0:
00000000000127a0         test       r15d, 0x80000                               ; case 27, CODE XREF=peek_token+504
00000000000127a7         mov        eax, 0x2
00000000000127ac         jne        loc_12394

00000000000127b2         mov        byte [rbp+8], 0xc
00000000000127b6         mov        dword [rbp], 0x200
00000000000127bd         jmp        loc_12394

                     loc_127c2:
00000000000127c2         and        r15d, 0x402                                 ; case 24, CODE XREF=peek_token+504
00000000000127c9         mov        eax, 0x2
00000000000127ce         cmp        r15, 0x2
00000000000127d2         jne        loc_12394

00000000000127d8         jmp        loc_125c2

                     loc_127dd:
00000000000127dd         test       r15d, 0x80000                               ; case 23, CODE XREF=peek_token+504
00000000000127e4         mov        eax, 0x2
00000000000127e9         jne        loc_12394

00000000000127ef         mov        byte [rbp+8], 0xc
00000000000127f3         mov        dword [rbp], 0x9
00000000000127fa         jmp        loc_12394

                     loc_127ff:
00000000000127ff         test       r15d, 0x80000                               ; case 21, CODE XREF=peek_token+504
0000000000012806         mov        eax, 0x2
000000000001280b         jne        loc_12394

0000000000012811         mov        byte [rbp+8], 0xc
0000000000012815         mov        dword [rbp], 0x6
000000000001281c         jmp        loc_12394

                     loc_12821:
0000000000012821         test       r15d, 0x4000                                ; case 18, CODE XREF=peek_token+504
0000000000012828         mov        eax, 0x2
000000000001282d         jne        loc_12394

0000000000012833         mov        edx, dword [rsp+0x68+var_60]
0000000000012837         mov        byte [rbp+8], 0x4
000000000001283b         sub        edx, 0x31
000000000001283e         movsxd     rdx, edx
0000000000012841         mov        qword [rbp], rdx
0000000000012845         jmp        loc_12394

                     loc_1284a:
000000000001284a         and        r15d, 0x402                                 ; case 4, CODE XREF=peek_token+504
0000000000012851         mov        eax, 0x2
0000000000012856         cmp        r15, 0x2
000000000001285a         jne        loc_12394

0000000000012860         jmp        loc_125f2

                     loc_12865:
0000000000012865         test       r15d, 0x2000                                ; case 2, CODE XREF=peek_token+504
000000000001286c         mov        eax, 0x2
0000000000012871         jne        loc_12394

0000000000012877         jmp        loc_12642

                     loc_1287c:
000000000001287c         test       r15d, 0x2000                                ; case 1, CODE XREF=peek_token+504
0000000000012883         mov        eax, 0x2
0000000000012888         jne        loc_12394

000000000001288e         jmp        loc_12662

                     loc_12893:
0000000000012893         test       r15d, 0x80000                               ; case 0, CODE XREF=peek_token+504
000000000001289a         mov        eax, 0x2
000000000001289f         jne        loc_12394

00000000000128a5         mov        byte [rbp+8], 0xc
00000000000128a9         mov        dword [rbp], 0x80
00000000000128b0         jmp        loc_12394

                     loc_128b5:
00000000000128b5         mov        eax, 0x2                                    ; case 83, CODE XREF=peek_token+481, peek_token+504
00000000000128ba         jmp        loc_12394
00000000000128bf         align      64

                     loc_128c0:
00000000000128c0         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=peek_token+419
00000000000128c5         mov        rsi, qword [rax]
00000000000128c8         movzx      edx, r12b
00000000000128cc         movzx      eax, word [rsi+rdx*2]
00000000000128d0         shr        ax, 0x3
00000000000128d4         and        eax, 0x1
00000000000128d7         cmp        r12b, 0x5f
00000000000128db         jmp        loc_1249a

                     loc_128e0:
00000000000128e0         cmp        eax, 0x1                                    ; CODE XREF=peek_token+389
00000000000128e3         jle        loc_12914

00000000000128e5         mov        rcx, qword [rbx+0x10]
00000000000128e9         lea        rdi, qword [rsi*4]
00000000000128f1         mov        r8d, dword [rcx+rsi*4]
00000000000128f5         cmp        r8d, 0xffffffff
00000000000128f9         je         loc_129af

00000000000128ff         lea        r9, qword [r14+2]
0000000000012903         cmp        qword [rbx+0x30], r9
0000000000012907         je         loc_12914

0000000000012909         cmp        dword [rcx+rdi+4], 0xffffffff
000000000001290e         je         loc_129af

                     loc_12914:
0000000000012914         cmp        byte [rbx+0x8c], 0x0                        ; CODE XREF=peek_token+1555, peek_token+1591
000000000001291b         mov        rcx, qword [rbx]
000000000001291e         mov        rdi, qword [rbx+0x28]
0000000000012922         je         loc_12968

0000000000012924         mov        r8, qword [rbx+0x18]
0000000000012928         add        rcx, rdi
000000000001292b         add        rcx, qword [r8+rsi*8]
000000000001292f         movzx      edi, byte [rcx]
0000000000012932         mov        r12d, edi
0000000000012935         mov        dword [rsp+0x68+var_60], edi
0000000000012939         and        edi, 0x80
000000000001293f         jne        loc_1245b

0000000000012945         jmp        loc_12468

                     loc_1294a:
000000000001294a         cmp        byte [rdx+r14-1], 0xa                       ; CODE XREF=peek_token+692
0000000000012950         jne        loc_1253c

0000000000012956         test       r15d, 0x800
000000000001295d         je         loc_1253c

0000000000012963         jmp        loc_1258a

                     loc_12968:
0000000000012968         add        rcx, rsi                                    ; CODE XREF=peek_token+1618
000000000001296b         movzx      edi, byte [rcx+rdi]
000000000001296f         mov        r12d, edi
0000000000012972         mov        dword [rsp+0x68+var_60], edi
0000000000012976         jmp        loc_12468

                     loc_1297b:
000000000001297b         lea        rdi, qword [rsp+0x68+var_58]                ; CODE XREF=peek_token+942
0000000000012980         mov        rdx, r15
0000000000012983         mov        qword [rbx+0x48], r14
0000000000012987         mov        rsi, rbx
000000000001298a         call       peek_token                                  ; peek_token
000000000001298f         movzx      eax, byte [rsp+0x68+var_50]
0000000000012994         sub        qword [rbx+0x48], 0x1
0000000000012999         lea        edx, dword [rax-9]
000000000001299c         mov        eax, 0x1
00000000000129a1         cmp        dl, 0x1
00000000000129a4         ja         loc_12394

00000000000129aa         jmp        loc_12684

                     loc_129af:
00000000000129af         movzx      eax, byte [rdx+r14+1]                       ; CODE XREF=peek_token+1577, peek_token+1598
00000000000129b5         mov        byte [rbp+8], 0x1
00000000000129b9         mov        r12d, eax
00000000000129bc         mov        byte [rbp], al
00000000000129bf         mov        dword [rsp+0x68+var_60], eax
00000000000129c3         jmp        loc_12481

                     loc_129c8:
00000000000129c8         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=peek_token+210
                        ; endp
00000000000129cd         align      16                                          ; End of unwind block (FDE at 0x1a46c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fetch_number:
00000000000129d0         push       r14                                         ; Begin of unwind block (FDE at 0x1a4b8), CODE XREF=sub_12b20+1175, sub_12b20+1409
00000000000129d2         mov        r14, rdi
00000000000129d5         push       r13
00000000000129d7         mov        r13, rsi
00000000000129da         push       r12
00000000000129dc         mov        r12, 0xfffffffffffffffe
00000000000129e3         push       rbp
00000000000129e4         mov        rbp, rdx
00000000000129e7         push       rbx
00000000000129e8         mov        rbx, 0xffffffffffffffff
00000000000129ef         nop

                     loc_129f0:
00000000000129f0         mov        rdx, rbp                                    ; CODE XREF=fetch_number+82, fetch_number+135, fetch_number+177
00000000000129f3         mov        rsi, r14
00000000000129f6         mov        rdi, r13
00000000000129f9         call       peek_token                                  ; peek_token
00000000000129fe         cdqe
0000000000012a00         add        qword [r14+0x48], rax
0000000000012a04         movzx      eax, byte [r13+8]
0000000000012a09         movzx      edx, byte [r13]
0000000000012a0e         cmp        al, 0x2
0000000000012a10         je         loc_12a60

0000000000012a12         cmp        al, 0x18
0000000000012a14         je         loc_12a67

0000000000012a16         cmp        dl, 0x2c
0000000000012a19         je         loc_12a67

0000000000012a1b         cmp        al, 0x1
0000000000012a1d         je         loc_12a28

                     loc_12a1f:
0000000000012a1f         mov        rbx, r12                                    ; CODE XREF=fetch_number+93, fetch_number+99
0000000000012a22         jmp        loc_129f0
0000000000012a24         align      8

                     loc_12a28:
0000000000012a28         lea        eax, dword [rdx-0x30]                       ; CODE XREF=fetch_number+77
0000000000012a2b         cmp        al, 0x9
0000000000012a2d         ja         loc_12a1f

0000000000012a2f         cmp        rbx, 0xfffffffffffffffe
0000000000012a33         je         loc_12a1f

0000000000012a35         cmp        rbx, 0xffffffffffffffff
0000000000012a39         je         loc_12a78

0000000000012a3b         lea        rax, qword [rbx+rbx*4]
0000000000012a3f         lea        rbx, qword [rdx+rax*2]
0000000000012a43         mov        eax, 0x8030
0000000000012a48         cmp        rbx, 0x8030
0000000000012a4f         cmovg      rbx, rax
0000000000012a53         sub        rbx, 0x30
0000000000012a57         jmp        loc_129f0
0000000000012a59         align      32

                     loc_12a60:
0000000000012a60         mov        rbx, 0xfffffffffffffffe                     ; CODE XREF=fetch_number+64

                     loc_12a67:
0000000000012a67         mov        rax, rbx                                    ; CODE XREF=fetch_number+68, fetch_number+73
0000000000012a6a         pop        rbx
0000000000012a6b         pop        rbp
0000000000012a6c         pop        r12
0000000000012a6e         pop        r13
0000000000012a70         pop        r14
0000000000012a72         ret
                        ; endp
0000000000012a73         align      8

                     loc_12a78:
0000000000012a78         movzx      ebx, dl                                     ; CODE XREF=fetch_number+105
0000000000012a7b         sub        ebx, 0x30
0000000000012a7e         movsxd     rbx, ebx
0000000000012a81         jmp        loc_129f0
0000000000012a86         align      16                                          ; End of unwind block (FDE at 0x1a4b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_118: int64_t, -280
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328


                     parse_expression:
0000000000012a90         push       r15                                         ; Begin of unwind block (FDE at 0x1a4f8), CODE XREF=sub_13290+2042, parse_branch+57, parse_branch+146
0000000000012a92         push       r14
0000000000012a94         push       r13
0000000000012a96         push       r12
0000000000012a98         push       rbp
0000000000012a99         push       rbx
0000000000012a9a         sub        rsp, 0x128
0000000000012aa1         mov        qword [rsp+0x158+var_138], rcx
0000000000012aa6         movzx      ecx, byte [rdx+8]
0000000000012aaa         mov        rax, qword [fs:0x28]
0000000000012ab3         mov        qword [rsp+0x158+var_40], rax
0000000000012abb         xor        eax, eax
0000000000012abd         mov        rax, qword [rsi]
0000000000012ac0         mov        qword [rsp+0x158+var_140], rdx
0000000000012ac5         mov        qword [rsp+0x158+var_118], r9
0000000000012aca         cmp        cl, 0x24
0000000000012acd         mov        qword [rsp+0x158+var_148], rax
0000000000012ad2         ja         loc_12b90

0000000000012ad8         mov        rbp, rsi
0000000000012adb         lea        rsi, qword [switch_table_17944+348]         ; 0x17aa0
0000000000012ae2         movzx      edx, cl
0000000000012ae5         mov        r14, rdi
0000000000012ae8         movsxd     rax, dword [rsi+rdx*4]
0000000000012aec         add        rax, rsi
0000000000012aef         jmp        rax
                        ; endp
0000000000012af1         mov        rbx, qword [rbp+0x30]
0000000000012af5         mov        r15, qword [rsp+0x20]
0000000000012afa         mov        rsi, rdi
0000000000012afd         mov        r13, qword [rsp+0x18]
0000000000012b02         mov        qword [rsp], r8
0000000000012b06         lea        rax, qword [rbx+1]
0000000000012b0a         mov        rdx, r15
0000000000012b0d         or         rdx, 0x800000
0000000000012b14         mov        rdi, r13
0000000000012b17         mov        qword [rbp+0x30], rax
0000000000012b1b         call       peek_token                                  ; peek_token


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_12b20:
0000000000012b20         cdqe
0000000000012b22         add        qword [r14+0x48], rax
0000000000012b26         xor        eax, eax
0000000000012b28         cmp        byte [r13+8], 0x9
0000000000012b2d         mov        rdx, r13
0000000000012b30         je         loc_13630

0000000000012b36         mov        r13, qword [rsp+64]
0000000000012b3b         mov        r8, qword [rsp+0]
0000000000012b3f         mov        rcx, r15                                    ; argument #4 for method parse_reg_exp
0000000000012b42         mov        rsi, rbp                                    ; argument #2 for method parse_reg_exp
0000000000012b45         mov        rdi, r14                                    ; argument #1 for method parse_reg_exp
0000000000012b48         add        r8, 0x1                                     ; argument #5 for method parse_reg_exp
0000000000012b4c         mov        r9, r13                                     ; argument #6 for method parse_reg_exp
0000000000012b4f         call       parse_reg_exp                               ; parse_reg_exp
0000000000012b54         mov        r11d, dword [r13]
0000000000012b58         test       r11d, r11d
0000000000012b5b         jne        sub_12b20+112

0000000000012b5d         mov        rdx, qword [rsp+24]
0000000000012b62         cmp        byte [rdx+8], 0x9
0000000000012b66         je         loc_13630

0000000000012b6c         test       rax, rax
0000000000012b6f         je         loc_12b82

0000000000012b71         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
0000000000012b78         xor        edx, edx                                    ; argument #3 for method postorder
0000000000012b7a         mov        rdi, rax                                    ; argument #1 for method postorder
0000000000012b7d         call       postorder                                   ; postorder

                     loc_12b82:
0000000000012b82         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_12b20+79
0000000000012b87         mov        dword [rax], 0x8
0000000000012b8d         nop        dword [rax]
                        ; endp

                     loc_12b90:
0000000000012b90         mov        qword [rsp+0x158+var_130], 0x0              ; CODE XREF=parse_expression+66, sub_13290+431
0000000000012b99         nop        dword [rax]
0000000000012ba0         mov        rdi, qword [rsp+0x158+var_40]               ; CODE XREF=sub_13290+923, sub_13290+1015, sub_13290+2052, sub_13290+2114
0000000000012ba8         xor        rdi, qword [fs:0x28]
0000000000012bb1         mov        rax, qword [rsp+0x158+var_130]
0000000000012bb6         jne        loc_13f2e

0000000000012bbc         add        rsp, 0x128
0000000000012bc3         pop        rbx
0000000000012bc4         pop        rbp
0000000000012bc5         pop        r12
0000000000012bc7         pop        r13
0000000000012bc9         pop        r14
0000000000012bcb         pop        r15
0000000000012bcd         ret
                        ; endp
0000000000012bce         test       qword [rsp+0x20], 0x1000000
0000000000012bd7         jne        sub_12b20+781
0000000000012bdd         mov        rax, qword [rsp+0x20]
0000000000012be2         test       al, 0x20
0000000000012be4         jne        sub_12b20+781
0000000000012bea         test       al, 0x10
0000000000012bec         jne        sub_13290+1989
0000000000012bf2         cmp        cl, 0x9
0000000000012bf5         je         sub_13290+888
0000000000012bfb         mov        rax, qword [rsp+0x10]                       ; CODE XREF=sub_13290+897
0000000000012c00         mov        r8, qword [rsp+0x18]
0000000000012c05         xor        ecx, ecx
0000000000012c07         xor        edx, edx
0000000000012c09         lea        rsi, qword [rax+0x80]
0000000000012c10         lea        rdi, qword [rax+0x70]
0000000000012c14         mov        byte [r8+8], 0x1
0000000000012c19         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012c1e         test       rax, rax
0000000000012c21         mov        qword [rsp+0x28], rax
0000000000012c26         je         sub_13290+872

                     loc_12c2c:
0000000000012c2c         mov        rbx, qword [rsp+24]                         ; CODE XREF=sub_13290+416, sub_13290+425, sub_13290+580, sub_13290+636, sub_13290+649, sub_13290+729, sub_13290+990, sub_13290+1526
0000000000012c31         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token
0000000000012c36         mov        rsi, r14                                    ; argument #2 for method peek_token
0000000000012c39         lea        r15, qword [rsp+192]
0000000000012c41         mov        rdi, rbx                                    ; argument #1 for method peek_token
0000000000012c44         call       peek_token                                  ; peek_token
0000000000012c49         cdqe
0000000000012c4b         add        qword [r14+0x48], rax
0000000000012c4f         movzx      eax, byte [rbx+8]
0000000000012c53         nop        dword [rax+rax]

                     loc_12c58:
0000000000012c58         cmp        al, 0x17                                    ; CODE XREF=sub_12b20+736, sub_12b20+748
0000000000012c5a         ja         sub_12b20+128

0000000000012c60         cmp        al, 0x12
0000000000012c62         mov        ecx, 0x8c0800
0000000000012c67         sete       bl
0000000000012c6a         bt         rcx, rax
0000000000012c6e         jae        sub_12b20+128

0000000000012c74         mov        rcx, qword [rsp+24]
0000000000012c79         cmp        al, 0x17
0000000000012c7b         mov        rbp, qword [r14+0x48]
0000000000012c7f         movdqa     xmm0, xmmword [rcx]
0000000000012c83         je         loc_12fa8

0000000000012c89         cmp        al, 0x13
0000000000012c8b         movzx      ebx, bl
0000000000012c8e         je         loc_12f40

0000000000012c94         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token
0000000000012c99         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
0000000000012c9e         mov        rsi, r14                                    ; argument #2 for method peek_token
0000000000012ca1         call       peek_token                                  ; peek_token
0000000000012ca6         cdqe
0000000000012ca8         add        qword [r14+0x48], rax
0000000000012cac         cmp        qword [rsp+40], 0x0
0000000000012cb2         je         loc_13040

0000000000012cb8         mov        qword [rsp+0], 0xffffffffffffffff

                     loc_12cc0:
0000000000012cc0         test       rbx, rbx                                    ; CODE XREF=sub_12b20+1107
0000000000012cc3         mov        rbp, qword [rsp+40]
0000000000012cc8         mov        qword [rsp+48], 0x0
0000000000012cd1         jg         loc_12e50

                     loc_12cd7:
0000000000012cd7         cmp        byte [rbp+0x30], 0x11                       ; CODE XREF=sub_12b20+993
0000000000012cdb         je         loc_13020

                     loc_12ce1:
0000000000012ce1         cmp        qword [rsp+0], 0xffffffffffffffff           ; CODE XREF=sub_12b20+1299
0000000000012ce6         mov        rdx, rbp                                    ; argument #3 for method create_token_tree.isra.16
0000000000012ce9         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000012cec         sete       al
0000000000012cef         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000012cf1         add        eax, 0xa
0000000000012cf4         mov        byte [rsp+200], al
0000000000012cfb         mov        rax, qword [rsp+16]
0000000000012d00         lea        r12, qword [rax+0x70]
0000000000012d04         lea        r13, qword [rax+0x80]
0000000000012d0b         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
0000000000012d0e         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
0000000000012d11         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012d16         test       rax, rax
0000000000012d19         mov        rdx, rax
0000000000012d1c         je         loc_12f10

0000000000012d22         add        rbx, 0x2
0000000000012d26         cmp        rbx, qword [rsp+0]
0000000000012d2a         jg         loc_12dab

0000000000012d2c         mov        qword [rsp+72], r14
0000000000012d31         mov        r14, rax

                     loc_12d34:
0000000000012d34         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree, CODE XREF=sub_12b20+641
0000000000012d39         mov        rdi, rbp                                    ; argument #1 for method duplicate_tree
0000000000012d3c         call       duplicate_tree                              ; duplicate_tree
0000000000012d41         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000012d44         mov        rbp, rax
0000000000012d47         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
0000000000012d4a         mov        rdx, r14                                    ; argument #3 for method create_token_tree.isra.16
0000000000012d4d         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
0000000000012d50         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
0000000000012d53         mov        byte [rsp+200], 0x10
0000000000012d5b         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012d60         test       rbp, rbp
0000000000012d63         je         loc_12f10

0000000000012d69         test       rax, rax
0000000000012d6c         je         loc_12f10

0000000000012d72         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000012d74         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000012d77         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
0000000000012d7a         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
0000000000012d7d         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
0000000000012d80         mov        byte [rsp+200], 0xa
0000000000012d88         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012d8d         test       rax, rax
0000000000012d90         mov        r14, rax
0000000000012d93         je         loc_12f10

0000000000012d99         add        rbx, 0x1
0000000000012d9d         cmp        rbx, qword [rsp+0]
0000000000012da1         jle        loc_12d34

0000000000012da3         mov        r14, qword [rsp+72]
0000000000012da8         mov        rdx, rax

                     loc_12dab:
0000000000012dab         mov        rax, qword [rsp+48]                         ; CODE XREF=sub_12b20+522
0000000000012db0         test       rax, rax
0000000000012db3         je         loc_13060

0000000000012db9         mov        rcx, rdx                                    ; argument #4 for method create_token_tree.isra.16
0000000000012dbc         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000012dbf         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
0000000000012dc2         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
0000000000012dc5         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
0000000000012dc8         mov        byte [rsp+200], 0x10
0000000000012dd0         call       create_token_tree.isra.16                   ; create_token_tree.isra.16

                     loc_12dd5:
0000000000012dd5         mov        rdi, qword [rsp+64]                         ; CODE XREF=sub_12b20+1265
0000000000012dda         mov        edx, dword [rdi]
0000000000012ddc         test       edx, edx
0000000000012dde         je         loc_12de9

0000000000012de0         test       rax, rax
0000000000012de3         je         loc_1313b

                     loc_12de9:
0000000000012de9         mov        qword [rsp+40], rax                         ; CODE XREF=sub_12b20+702

                     loc_12dee:
0000000000012dee         test       qword [rsp+32], 0x1000000                   ; CODE XREF=sub_12b20+1152, sub_12b20+1349
0000000000012df7         mov        rax, qword [rsp+24]
0000000000012dfc         movzx      eax, byte [rax+8]
0000000000012e00         je         loc_12c58

0000000000012e06         cmp        al, 0xb
0000000000012e08         je         loc_12e12

0000000000012e0a         cmp        al, 0x17
0000000000012e0c         jne        loc_12c58

                     loc_12e12:
0000000000012e12         mov        rax, qword [rsp+40]                         ; CODE XREF=sub_12b20+744
0000000000012e17         test       rax, rax
0000000000012e1a         je         loc_12e2d

0000000000012e1c         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
0000000000012e23         xor        edx, edx                                    ; argument #3 for method postorder
0000000000012e25         mov        rdi, rax                                    ; argument #1 for method postorder
0000000000012e28         call       postorder                                   ; postorder

                     loc_12e2d:
0000000000012e2d         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_12b20+183, sub_12b20+196, sub_12b20+762
0000000000012e32         mov        qword [rsp+40], 0x0
0000000000012e3b         mov        dword [rax], 0xd
0000000000012e41         jmp        sub_12b20+128
                        ; endp
0000000000012e46         nop        word [cs:rax+rax]

                     loc_12e50:
0000000000012e50         cmp        rbx, 0x1                                    ; CODE XREF=sub_12b20+433
0000000000012e54         je         loc_1368c

0000000000012e5a         mov        rax, qword [rsp+16]
0000000000012e5f         mov        r13, rbp
0000000000012e62         mov        qword [rsp+72], r14
0000000000012e67         lea        r12, qword [rax+0x80]
0000000000012e6e         lea        rdi, qword [rax+0x70]
0000000000012e72         mov        rax, rbp
0000000000012e75         mov        r14, rax
0000000000012e78         mov        ebp, 0x2
0000000000012e7d         mov        rsi, r12
0000000000012e80         mov        qword [rsp+48], rdi
0000000000012e85         mov        r12, r13
0000000000012e88         mov        r13, rbx
0000000000012e8b         mov        rbx, rsi
0000000000012e8e         nop

                     loc_12e90:
0000000000012e90         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree, CODE XREF=sub_12b20+946
0000000000012e95         mov        rdi, r12                                    ; argument #1 for method duplicate_tree
0000000000012e98         call       duplicate_tree                              ; duplicate_tree
0000000000012e9d         mov        rdi, qword [rsp+48]                         ; argument #1 for method create_token_tree.isra.16
0000000000012ea2         mov        r12, rax
0000000000012ea5         mov        rdx, r14                                    ; argument #3 for method create_token_tree.isra.16
0000000000012ea8         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000012eab         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
0000000000012eae         mov        rsi, rbx                                    ; argument #2 for method create_token_tree.isra.16
0000000000012eb1         mov        byte [rsp+200], 0x10
0000000000012eb9         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000012ebe         test       r12, r12
0000000000012ec1         mov        r14, rax
0000000000012ec4         je         loc_12f10

0000000000012ec6         test       rax, rax
0000000000012ec9         je         loc_12f10

0000000000012ecb         add        rbp, 0x1
0000000000012ecf         cmp        rbp, r13
0000000000012ed2         jle        loc_12e90

0000000000012ed4         mov        r14, qword [rsp+72]
0000000000012ed9         mov        rbx, r13
0000000000012edc         mov        qword [rsp+48], rax
0000000000012ee1         mov        r13, r12

                     loc_12ee4:
0000000000012ee4         cmp        qword [rsp+0], rbx                          ; CODE XREF=sub_13290+1030
0000000000012ee8         je         loc_13054

0000000000012eee         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree
0000000000012ef3         mov        rdi, r13                                    ; argument #1 for method duplicate_tree
0000000000012ef6         call       duplicate_tree                              ; duplicate_tree
0000000000012efb         test       rax, rax
0000000000012efe         mov        rbp, rax
0000000000012f01         jne        loc_12cd7

0000000000012f07         nop        word [rax+rax]

                     loc_12f10:
0000000000012f10         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_12b20+508, sub_12b20+579, sub_12b20+588, sub_12b20+627, sub_12b20+932, sub_12b20+937
0000000000012f15         mov        dword [rax], 0xc

                     loc_12f1b:
0000000000012f1b         mov        rdi, qword [rsp+40]                         ; argument #1 for method postorder, CODE XREF=sub_12b20+1141, sub_12b20+1569
0000000000012f20         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
0000000000012f27         xor        edx, edx                                    ; argument #3 for method postorder
0000000000012f29         call       postorder                                   ; postorder
0000000000012f2e         mov        qword [rsp+40], 0x0
0000000000012f37         jmp        sub_12b20+128
                        ; endp
0000000000012f3c         nop        dword [rax]

                     loc_12f40:
0000000000012f40         mov        qword [rsp+0], 0x1                          ; CODE XREF=sub_12b20+366

                     loc_12f48:
0000000000012f48         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token, CODE XREF=sub_12b20+1482
0000000000012f4d         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
0000000000012f52         mov        rsi, r14                                    ; argument #2 for method peek_token
0000000000012f55         call       peek_token                                  ; peek_token
0000000000012f5a         cdqe
0000000000012f5c         add        qword [r14+0x48], rax
0000000000012f60         cmp        qword [rsp+40], 0x0
0000000000012f66         je         loc_13040

0000000000012f6c         mov        rax, qword [rsp+0]
0000000000012f70         or         rax, rbx
0000000000012f73         jne        loc_12cc0

0000000000012f79         mov        rdi, qword [rsp+40]                         ; argument #1 for method postorder
0000000000012f7e         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
0000000000012f85         xor        edx, edx                                    ; argument #3 for method postorder
0000000000012f87         call       postorder                                   ; postorder
0000000000012f8c         mov        rax, qword [rsp+64]
0000000000012f91         mov        esi, dword [rax]
0000000000012f93         test       esi, esi
0000000000012f95         jne        loc_12f1b

                     loc_12f97:
0000000000012f97         mov        qword [rsp+40], 0x0                         ; CODE XREF=sub_12b20+1321
0000000000012fa0         jmp        loc_12dee
0000000000012fa5         nop        dword [rax]

                     loc_12fa8:
0000000000012fa8         mov        rdx, qword [rsp+32]                         ; argument #3 for method fetch_number, CODE XREF=sub_12b20+355
0000000000012fad         mov        rsi, rcx                                    ; argument #2 for method fetch_number
0000000000012fb0         mov        rdi, r14                                    ; argument #1 for method fetch_number
0000000000012fb3         movaps     xmmword [rsp+0], xmm0
0000000000012fb7         call       fetch_number                                ; fetch_number
0000000000012fbc         cmp        rax, 0xffffffffffffffff
0000000000012fc0         mov        rbx, rax
0000000000012fc3         movdqa     xmm0, xmmword [rsp+0]
0000000000012fc8         je         loc_13070

0000000000012fce         cmp        rax, 0xfffffffffffffffe
0000000000012fd2         je         loc_12fed

0000000000012fd4         mov        rax, qword [rsp+24]
0000000000012fd9         movzx      eax, byte [rax+8]
0000000000012fdd         cmp        al, 0x18
0000000000012fdf         je         loc_13100

0000000000012fe5         cmp        al, 0x1
0000000000012fe7         je         loc_13113

                     loc_12fed:
0000000000012fed         test       qword [rsp+32], 0x200000                    ; CODE XREF=sub_12b20+1202, sub_12b20+1428
0000000000012ff6         je         loc_13f33

                     loc_12ffc:
0000000000012ffc         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_12b20+1546
0000000000013001         mov        qword [r14+0x48], rbp
0000000000013005         movaps     xmmword [rax], xmm0
0000000000013008         mov        byte [rax+8], 0x1
000000000001300c         mov        rax, qword [rsp+40]
0000000000013011         jmp        loc_12dd5
0000000000013016         nop        word [cs:rax+rax]

                     loc_13020:
0000000000013020         mov        rdx, qword [rbp+0x28]                       ; argument #3 for method postorder, CODE XREF=sub_12b20+443
0000000000013024         lea        rsi, qword [mark_opt_subexp]                ; argument #2 for method postorder, mark_opt_subexp
000000000001302b         mov        rdi, rbp                                    ; argument #1 for method postorder
000000000001302e         call       postorder                                   ; postorder
0000000000013033         jmp        loc_12ce1
0000000000013038         nop        dword [rax+rax]

                     loc_13040:
0000000000013040         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_12b20+402, sub_12b20+1094
0000000000013045         mov        ecx, dword [rax]
0000000000013047         test       ecx, ecx
0000000000013049         je         loc_12f97

000000000001304f         jmp        sub_12b20+112
                        ; endp

                     loc_13054:
0000000000013054         mov        rdx, qword [rsp+48]                         ; CODE XREF=sub_12b20+968
0000000000013059         nop        dword [rax]

                     loc_13060:
0000000000013060         mov        qword [rsp+40], rdx                         ; CODE XREF=sub_12b20+659
0000000000013065         jmp        loc_12dee
000000000001306a         nop        word [rax+rax]

                     loc_13070:
0000000000013070         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_12b20+1192
0000000000013075         cmp        byte [rax+8], 0x1
0000000000013079         jne        loc_13130

000000000001307f         mov        rax, qword [rsp+24]
0000000000013084         cmp        byte [rax], 0x2c
0000000000013087         jne        loc_13130

000000000001308d         xor        ebx, ebx

                     loc_1308f:
000000000001308f         mov        rdx, qword [rsp+32]                         ; argument #3 for method fetch_number, CODE XREF=sub_12b20+1531
0000000000013094         mov        rsi, qword [rsp+24]                         ; argument #2 for method fetch_number
0000000000013099         mov        rdi, r14                                    ; argument #1 for method fetch_number
000000000001309c         movaps     xmmword [rsp+48], xmm0
00000000000130a1         call       fetch_number                                ; fetch_number
00000000000130a6         cmp        rax, 0xfffffffffffffffe
00000000000130aa         mov        qword [rsp+0], rax
00000000000130ae         movdqa     xmm0, xmmword [rsp+48]
00000000000130b4         je         loc_12fed

00000000000130ba         mov        rax, qword [rsp+0]
00000000000130be         cmp        rax, 0xffffffffffffffff
00000000000130c2         je         loc_130c9

00000000000130c4         cmp        rax, rbx
00000000000130c7         jl         loc_13130

                     loc_130c9:
00000000000130c9         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_12b20+1442
00000000000130ce         cmp        byte [rax+8], 0x18
00000000000130d2         jne        loc_13130

00000000000130d4         cmp        qword [rsp+0], 0xffffffffffffffff
00000000000130d9         jne        loc_13104

00000000000130db         xor        eax, eax
00000000000130dd         cmp        rbx, 0x7fff
00000000000130e4         setg       al

                     loc_130e7:
00000000000130e7         test       rax, rax                                    ; CODE XREF=sub_12b20+1521
00000000000130ea         je         loc_12f48

00000000000130f0         mov        rax, qword [rsp+64]
00000000000130f5         mov        dword [rax], 0xf
00000000000130fb         jmp        loc_1313b
00000000000130fd         nop        dword [rax]

                     loc_13100:
0000000000013100         mov        qword [rsp+0], rbx                          ; CODE XREF=sub_12b20+1215

                     loc_13104:
0000000000013104         xor        eax, eax                                    ; CODE XREF=sub_12b20+1465
0000000000013106         cmp        qword [rsp+0], 0x7fff
000000000001310e         setg       al
0000000000013111         jmp        loc_130e7

                     loc_13113:
0000000000013113         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_12b20+1223
0000000000013118         cmp        byte [rax], 0x2c
000000000001311b         je         loc_1308f

0000000000013121         test       qword [rsp+32], 0x200000
000000000001312a         jne        loc_12ffc

                     loc_13130:
0000000000013130         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_12b20+1369, sub_12b20+1383, sub_12b20+1447, sub_12b20+1458, sub_13290+3244
0000000000013135         mov        dword [rax], 0xa

                     loc_1313b:
000000000001313b         cmp        qword [rsp+40], 0x0                         ; CODE XREF=sub_12b20+707, sub_12b20+1499, sub_13290+3261
0000000000013141         jne        loc_12f1b

0000000000013147         jmp        sub_12b20+112
                        ; endp
000000000001314c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13150:
0000000000013150         mov        rax, qword [rsp+24]
0000000000013155         mov        ebp, dword [rax]
0000000000013157         test       ebp, 0x30f
000000000001315d         je         loc_131c1

000000000001315f         mov        rax, qword [rsp+16]
0000000000013164         movzx      eax, byte [rax+0xb0]
000000000001316b         test       al, 0x10
000000000001316d         jne        loc_131c1

000000000001316f         mov        rdi, qword [rsp+16]
0000000000013174         or         eax, 0x10
0000000000013177         test       al, 0x8
0000000000013179         mov        byte [rdi+0xb0], al
000000000001317f         jne        loc_13d83

0000000000013185         movabs     rdx, 0x3ff000000000000
000000000001318f         test       al, 0x4
0000000000013191         mov        qword [rdi+0xb8], rdx
0000000000013198         movabs     rdx, 0x7fffffe87fffffe
00000000000131a2         mov        qword [rdi+0xc0], rdx
00000000000131a9         je         loc_13d08

00000000000131af         pxor       xmm0, xmm0
00000000000131b3         mov        rax, qword [rsp+24]
00000000000131b8         movups     xmmword [rdi+0xc8], xmm0
00000000000131bf         mov        ebp, dword [rax]

                     loc_131c1:
00000000000131c1         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_13150+13, sub_13150+29, sub_13290+2798
00000000000131c6         lea        rbx, qword [rax+0x70]
00000000000131ca         lea        r12, qword [rax+0x80]
00000000000131d1         lea        eax, dword [rbp-0x100]
00000000000131d7         test       eax, 0xfffffeff
00000000000131dc         jne        loc_1384a

00000000000131e2         cmp        ebp, 0x100
00000000000131e8         mov        r15, qword [rsp+24]
00000000000131ed         je         loc_13822

00000000000131f3         mov        dword [r15], 0x5
00000000000131fa         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
00000000000131fd         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
00000000000131ff         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000013201         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000013204         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000013207         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001320c         mov        dword [r15], 0xa
0000000000013213         mov        rbp, rax

                     loc_13216:
0000000000013216         mov        r8, qword [rsp+24]                          ; argument #5 for method create_token_tree.isra.16, CODE XREF=sub_13290+1461
000000000001321b         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
000000000001321d         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
000000000001321f         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000013222         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000013225         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001322a         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
0000000000013232         mov        rdx, rbp                                    ; argument #3 for method create_token_tree.isra.16
0000000000013235         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000013238         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
000000000001323b         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
000000000001323e         mov        r13, rax
0000000000013241         mov        byte [rsp+200], 0xa
0000000000013249         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001324e         test       rbp, rbp
0000000000013251         mov        rdi, rax
0000000000013254         mov        qword [rsp+40], rax
0000000000013259         sete       dl
000000000001325c         test       r13, r13
000000000001325f         sete       al
0000000000013262         or         dl, al
0000000000013264         jne        sub_13290+872

000000000001326a         test       rdi, rdi
000000000001326d         je         sub_13290+872

                     loc_13273:
0000000000013273         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token, CODE XREF=sub_13290+1494
0000000000013278         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
000000000001327d         mov        rsi, r14                                    ; argument #2 for method peek_token
0000000000013280         call       peek_token                                  ; peek_token
0000000000013285         cdqe
0000000000013287         add        qword [r14+0x48], rax
000000000001328b         jmp        sub_12b20+128
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13290:
0000000000013290         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
0000000000013295         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
000000000001329a         mov        qword [rsp+152], 0x0
00000000000132a6         call       j_calloc                                    ; calloc
00000000000132ab         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
00000000000132b0         mov        r12, rax
00000000000132b3         mov        edi, 0x50                                   ; argument "__nmemb" for method j_calloc
00000000000132b8         call       j_calloc                                    ; calloc
00000000000132bd         test       r12, r12
00000000000132c0         mov        r13, rax
00000000000132c3         sete       dl
00000000000132c6         test       rax, rax
00000000000132c9         sete       al
00000000000132cc         or         dl, al
00000000000132ce         jne        loc_13aa9

00000000000132d4         mov        r10, qword [rsp+24]
00000000000132d9         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
00000000000132de         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
00000000000132e1         mov        rdi, r10                                    ; argument #1 for method peek_token_bracket
00000000000132e4         call       peek_token_bracket                          ; peek_token_bracket
00000000000132e9         movsxd     rbx, eax
00000000000132ec         movzx      eax, byte [r10+8]
00000000000132f1         cmp        al, 0x2
00000000000132f3         je         loc_13a99

00000000000132f9         cmp        al, 0x19
00000000000132fb         mov        byte [rsp+87], 0x0
0000000000013300         je         loc_137ca

                     loc_13306:
0000000000013306         cmp        al, 0x15                                    ; CODE XREF=sub_13290+1407
0000000000013308         je         loc_13814

                     loc_1330e:
000000000001330e         lea        rax, qword [rsp+208]                        ; CODE XREF=sub_13290+1421
0000000000013316         mov        r15, qword [rsp+24]
000000000001331b         lea        rbp, qword [switch_table_17b34]             ; switch_table_17b34
0000000000013322         mov        qword [rsp+72], 0x0
000000000001332b         mov        r9d, 0x1
0000000000013331         mov        qword [rsp+48], 0x0
000000000001333a         mov        qword [rsp+40], rax
000000000001333f         lea        rax, qword [rsp+160]
0000000000013347         mov        qword [rsp+0], rax
000000000001334b         lea        rax, qword [rsp+152]
0000000000013353         mov        qword [rsp+88], rax
0000000000013358         lea        rax, qword [rsp+192]
0000000000013360         mov        qword [rsp+96], rax
0000000000013365         lea        rax, qword [rsp+240]
000000000001336d         mov        qword [rsp+104], rax

                     loc_13372:
0000000000013372         mov        rax, qword [rsp+40]                         ; CODE XREF=sub_13290+1112
0000000000013377         mov        r8, qword [rsp+32]                          ; argument #5 for method parse_bracket_element.constprop.37
000000000001337c         and        r9d, 0x1                                    ; argument #6 for method parse_bracket_element.constprop.37
0000000000013380         mov        rdi, qword [rsp+0]                          ; argument #1 for method parse_bracket_element.constprop.37
0000000000013384         mov        ecx, ebx                                    ; argument #4 for method parse_bracket_element.constprop.37
0000000000013386         mov        rdx, r15                                    ; argument #3 for method parse_bracket_element.constprop.37
0000000000013389         mov        rsi, r14                                    ; argument #2 for method parse_bracket_element.constprop.37
000000000001338c         mov        dword [rsp+160], 0x3
0000000000013397         mov        qword [rsp+168], rax
000000000001339f         call       parse_bracket_element.constprop.37          ; parse_bracket_element.constprop.37
00000000000133a4         test       eax, eax
00000000000133a6         jne        loc_1388b

00000000000133ac         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
00000000000133b1         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
00000000000133b4         mov        rdi, r15                                    ; argument #1 for method peek_token_bracket
00000000000133b7         call       peek_token_bracket                          ; peek_token_bracket
00000000000133bc         movsxd     rbx, eax
00000000000133bf         mov        eax, dword [rsp+160]
00000000000133c6         lea        edx, dword [rax-2]
00000000000133c9         and        edx, 0xfffffffd
00000000000133cc         je         loc_133e5

00000000000133ce         movzx      edx, byte [r15+8]
00000000000133d3         cmp        dl, 0x2
00000000000133d6         je         loc_13871

00000000000133dc         cmp        dl, 0x16
00000000000133df         je         loc_13897

                     loc_133e5:
00000000000133e5         cmp        eax, 0x4                                    ; CODE XREF=sub_13290+316, sub_13290+2141
00000000000133e8         ja         loc_13d8a

00000000000133ee         movsxd     rax, dword [rbp+rax*4]
00000000000133f3         add        rax, rbp
00000000000133f6         jmp        rax                                         ; switch statement using table at 0x17b34, with 5 cases, 0x136b5,0x136ed,0x13737,0x13761,0x13789
00000000000133f8         mov        rbx, qword [rsp+0x40]
00000000000133fd         cmp        cl, 0x23
0000000000013400         mov        rsi, qword [rdi+0x78]
0000000000013404         sete       r8b
0000000000013408         lea        rcx, qword [aWrittenBySSAnd+27]             ; 0x170e1
000000000001340f         lea        rdx, qword [aSpace]                         ; "space"
0000000000013416         movzx      r8d, r8b
000000000001341a         mov        r9, rbx
000000000001341d         mov        rdi, qword [rsp+0x10]                       ; CODE XREF=sub_13290+477
0000000000013422         call       build_charclass_op                          ; build_charclass_op
0000000000013427         mov        edi, dword [rbx]
0000000000013429         mov        qword [rsp+0x28], rax
000000000001342e         test       edi, edi
0000000000013430         je         sub_12b20+268
0000000000013436         test       rax, rax
0000000000013439         jne        sub_12b20+268
000000000001343f         jmp        sub_12b20+112
0000000000013444         nop        dword [rax]
0000000000013448         mov        rbx, qword [rsp+0x40]
000000000001344d         cmp        cl, 0x21
0000000000013450         mov        rsi, qword [rdi+0x78]
0000000000013454         sete       r8b
0000000000013458         lea        rcx, qword [aCoreutils+12]                  ; 0x160a6
000000000001345f         lea        rdx, qword [aAlnum]                         ; "alnum"
0000000000013466         movzx      r8d, r8b
000000000001346a         mov        r9, rbx
000000000001346d         jmp        sub_13290+397
000000000001346f         mov        rax, qword [rsp+0x18]
0000000000013474         mov        rdi, qword [rsp+0x10]
0000000000013479         mov        rcx, qword [rax]
000000000001347c         mov        eax, 0x1
0000000000013481         shl        eax, cl
0000000000013483         cdqe
0000000000013485         test       qword [rdi+0xa8], rax
000000000001348c         je         sub_13290+2094
0000000000013492         mov        rbx, qword [rsp+0x10]
0000000000013497         mov        r8, qword [rsp+0x18]
000000000001349c         xor        ecx, ecx
000000000001349e         xor        edx, edx
00000000000134a0         or         qword [rbx+0xa0], rax
00000000000134a7         lea        rsi, qword [rbx+0x80]
00000000000134ae         lea        rdi, qword [rbx+0x70]
00000000000134b2         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000134b7         test       rax, rax
00000000000134ba         mov        qword [rsp+0x28], rax
00000000000134bf         je         sub_13290+872
00000000000134c5         add        qword [rbx+0x98], 0x1
00000000000134cd         or         byte [rbx+0xb0], 0x2
00000000000134d4         jmp        sub_12b20+268
00000000000134d9         mov        rbx, qword [rsp+0x10]
00000000000134de         mov        r8, qword [rsp+0x18]
00000000000134e3         xor        ecx, ecx
00000000000134e5         xor        edx, edx
00000000000134e7         lea        rsi, qword [rbx+0x80]
00000000000134ee         lea        rdi, qword [rbx+0x70]
00000000000134f2         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000134f7         test       rax, rax
00000000000134fa         mov        qword [rsp+0x28], rax
00000000000134ff         je         sub_13290+872
0000000000013505         cmp        dword [rbx+0xb4], 0x1
000000000001350c         jle        sub_12b20+268
0000000000013512         or         byte [rbx+0xb0], 0x2
0000000000013519         jmp        sub_12b20+268
000000000001351e         mov        rax, qword [rsp+0x10]
0000000000013523         mov        r8, qword [rsp+0x18]
0000000000013528         xor        ecx, ecx
000000000001352a         xor        edx, edx
000000000001352c         lea        rbx, qword [rax+0x70]
0000000000013530         lea        rbp, qword [rax+0x80]
0000000000013537         mov        rdi, rbx
000000000001353a         mov        rsi, rbp
000000000001353d         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000013542         test       rax, rax
0000000000013545         mov        qword [rsp+0x28], rax
000000000001354a         je         sub_13290+872
0000000000013550         mov        rax, qword [rsp+0x10]
0000000000013555         lea        r12, qword [rsp+0xc0]
000000000001355d         mov        r15, qword [rsp+0x28]
0000000000013562         cmp        dword [rax+0xb4], 0x1
0000000000013569         jle        sub_12b20+268
000000000001356f         mov        rax, qword [r14+0x48]                       ; CODE XREF=sub_13290+866
0000000000013573         cmp        qword [r14+0x68], rax
0000000000013577         jle        sub_13290+1521
000000000001357d         cmp        rax, qword [r14+0x30]
0000000000013581         je         sub_13290+1521
0000000000013587         mov        rdx, qword [r14+0x10]
000000000001358b         cmp        dword [rdx+rax*4], 0xffffffff
000000000001358f         jne        sub_13290+1521
0000000000013595         mov        r13, qword [rsp+0x18]
000000000001359a         mov        rdx, qword [rsp+0x20]
000000000001359f         mov        rsi, r14
00000000000135a2         mov        rdi, r13
00000000000135a5         call       peek_token                                  ; peek_token
00000000000135aa         cdqe
00000000000135ac         add        qword [r14+0x48], rax
00000000000135b0         mov        r8, r13
00000000000135b3         xor        ecx, ecx
00000000000135b5         xor        edx, edx
00000000000135b7         mov        rsi, rbp
00000000000135ba         mov        rdi, rbx
00000000000135bd         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000135c2         mov        rdx, r15
00000000000135c5         mov        r13, rax
00000000000135c8         mov        r8, r12
00000000000135cb         mov        rcx, rax
00000000000135ce         mov        rsi, rbp
00000000000135d1         mov        rdi, rbx
00000000000135d4         mov        byte [rsp+0xc8], 0x10
00000000000135dc         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000135e1         test       r13, r13
00000000000135e4         mov        r15, rax
00000000000135e7         sete       dl
00000000000135ea         test       rax, rax
00000000000135ed         sete       al
00000000000135f0         or         dl, al
00000000000135f2         je         sub_13290+735

                     loc_135f8:
00000000000135f8         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_12b20+262, sub_13290+559, sub_13290+623, sub_13290+698, sub_13290+984
00000000000135fd         mov        dword [rax], 0xc
0000000000013603         jmp        sub_12b20+112
                        ; endp
0000000000013608         test       qword [rsp+0x20], 0x20000                   ; CODE XREF=sub_12b20+213
0000000000013611         jne        sub_12b20+219
0000000000013617         mov        rax, qword [rsp+0x40]
000000000001361c         mov        qword [rsp+0x28], 0x0
0000000000013625         mov        dword [rax], 0x10
000000000001362b         jmp        sub_12b20+128

                     loc_13630:
0000000000013630         cmp        rbx, 0x8                                    ; CODE XREF=sub_12b20+16, sub_12b20+70
0000000000013634         jbe        loc_1369b

                     loc_13636:
0000000000013636         mov        rdi, qword [rsp+16]                         ; CODE XREF=sub_13290+1059
000000000001363b         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
0000000000013643         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000013645         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
0000000000013648         mov        byte [rsp+200], 0x11
0000000000013650         lea        rsi, qword [rdi+0x80]                       ; argument #2 for method create_token_tree.isra.16
0000000000013657         add        rdi, 0x70                                   ; argument #1 for method create_token_tree.isra.16
000000000001365b         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000013660         test       rax, rax
0000000000013663         mov        qword [rsp+40], rax
0000000000013668         je         loc_135f8

000000000001366a         mov        qword [rax+0x28], rbx
000000000001366e         jmp        loc_12c2c
0000000000013673         mov        rax, qword [rsp+0x40]
0000000000013678         mov        qword [rsp+0x28], 0x0
0000000000013681         mov        dword [rax], 0x5
0000000000013687         jmp        sub_12b20+128

                     loc_1368c:
000000000001368c         mov        r13, qword [rsp+40]                         ; CODE XREF=sub_12b20+820
0000000000013691         mov        qword [rsp+48], r13
0000000000013696         jmp        loc_12ee4

                     loc_1369b:
000000000001369b         mov        rsi, qword [rsp+16]                         ; CODE XREF=sub_13290+932
00000000000136a0         mov        edx, 0x1
00000000000136a5         mov        ecx, ebx
00000000000136a7         shl        edx, cl
00000000000136a9         movsxd     rdx, edx
00000000000136ac         or         qword [rsi+0xa8], rdx
00000000000136b3         jmp        loc_13636

                     loc_136b5:
00000000000136b5         mov        rsi, qword [rsp+168]                        ; case 3, argument #2 for method build_collating_symbol.isra.28, CODE XREF=sub_13290+358
00000000000136bd         mov        rdi, r12                                    ; argument #1 for method build_collating_symbol.isra.28
00000000000136c0         call       build_collating_symbol.isra.28              ; build_collating_symbol.isra.28
00000000000136c5         mov        rdx, qword [rsp+64]
00000000000136ca         test       eax, eax
00000000000136cc         mov        dword [rdx], eax
00000000000136ce         jne        loc_13708

                     loc_136d0:
00000000000136d0         movzx      eax, byte [r15+8]                           ; CODE XREF=sub_13290+1142, sub_13290+1228, sub_13290+1268, sub_13290+1327, sub_13290+1984
00000000000136d5         cmp        al, 0x2
00000000000136d7         je         loc_13871

00000000000136dd         cmp        al, 0x15
00000000000136df         je         loc_13af2

00000000000136e5         xor        r9d, r9d
00000000000136e8         jmp        loc_13372

                     loc_136ed:
00000000000136ed         mov        rsi, qword [rsp+168]                        ; case 2, argument #2 for method build_collating_symbol.isra.28, CODE XREF=sub_13290+358
00000000000136f5         mov        rdi, r12                                    ; argument #1 for method build_collating_symbol.isra.28
00000000000136f8         call       build_collating_symbol.isra.28              ; build_collating_symbol.isra.28
00000000000136fd         mov        rdx, qword [rsp+64]
0000000000013702         test       eax, eax
0000000000013704         mov        dword [rdx], eax
0000000000013706         je         loc_136d0

                     loc_13708:
0000000000013708         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=sub_13290+1086, sub_13290+1333, sub_13290+1516, sub_13290+1538, sub_13290+2068, sub_13290+2350, sub_13290+2852, sub_13290+2904, sub_13290+3128
000000000001370b         call       j_free                                      ; free
0000000000013710         mov        rdi, r13                                    ; argument #1 for method free_charset
0000000000013713         call       free_charset                                ; free_charset
0000000000013718         mov        rax, qword [rsp+64]
000000000001371d         mov        r8d, dword [rax]
0000000000013720         test       r8d, r8d
0000000000013723         jne        sub_12b20+112

0000000000013729         mov        qword [rsp+40], 0x0
0000000000013732         jmp        sub_12b20+268
                        ; endp

                     loc_13737:
0000000000013737         mov        rdx, qword [r13+0x28]                       ; case 1, CODE XREF=sub_13290+358
000000000001373b         cmp        rdx, qword [rsp+48]
0000000000013740         mov        rax, qword [r13]
0000000000013744         je         loc_13c3e

                     loc_1374a:
000000000001374a         lea        rcx, qword [rdx+1]                          ; CODE XREF=sub_13290+2526
000000000001374e         mov        qword [r13+0x28], rcx
0000000000013752         mov        ecx, dword [rsp+168]
0000000000013759         mov        dword [rax+rdx*4], ecx
000000000001375c         jmp        loc_136d0

                     loc_13761:
0000000000013761         movzx      edx, byte [rsp+168]                         ; case 0, CODE XREF=sub_13290+358
0000000000013769         mov        esi, 0x1
000000000001376e         mov        rax, rdx
0000000000013771         and        edx, 0x3f
0000000000013774         shr        rax, 0x3
0000000000013778         mov        ecx, edx
000000000001377a         and        eax, 0x18
000000000001377d         shl        rsi, cl
0000000000013780         or         qword [r12+rax], rsi
0000000000013784         jmp        loc_136d0

                     loc_13789:
0000000000013789         sub        rsp, 0x8                                    ; case 4, CODE XREF=sub_13290+358
000000000001378d         mov        rdi, qword [r14+0x78]                       ; argument #1 for method build_charclass.isra.29
0000000000013791         lea        rdx, qword [r13+0x18]                       ; argument #3 for method build_charclass.isra.29
0000000000013795         push       qword [rsp+40]                              ; argument #7 for method build_charclass.isra.29
0000000000013799         mov        r9, qword [rsp+184]                         ; argument #6 for method build_charclass.isra.29
00000000000137a1         lea        rcx, qword [r13+0x48]                       ; argument #4 for method build_charclass.isra.29
00000000000137a5         mov        r8, qword [rsp+104]                         ; argument #5 for method build_charclass.isra.29
00000000000137aa         mov        rsi, r12                                    ; argument #2 for method build_charclass.isra.29
00000000000137ad         call       build_charclass.isra.29                     ; build_charclass.isra.29
00000000000137b2         mov        rdx, qword [rsp+80]
00000000000137b7         test       eax, eax
00000000000137b9         mov        dword [rdx], eax
00000000000137bb         pop        r9
00000000000137bd         pop        r10
00000000000137bf         je         loc_136d0

00000000000137c5         jmp        loc_13708

                     loc_137ca:
00000000000137ca         or         byte [r13+0x20], 0x1                        ; CODE XREF=sub_13290+112
00000000000137cf         test       qword [rsp+32], 0x100
00000000000137d8         je         loc_137e2

00000000000137da         or         qword [r12], 0x400

                     loc_137e2:
00000000000137e2         add        qword [r14+0x48], rbx                       ; CODE XREF=sub_13290+1352
00000000000137e6         mov        r11, qword [rsp+24]
00000000000137eb         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
00000000000137ee         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
00000000000137f3         mov        rdi, r11                                    ; argument #1 for method peek_token_bracket
00000000000137f6         call       peek_token_bracket                          ; peek_token_bracket
00000000000137fb         mov        ebx, eax
00000000000137fd         movzx      eax, byte [r11+8]
0000000000013802         cmp        al, 0x2
0000000000013804         je         loc_13a99

000000000001380a         mov        byte [rsp+87], 0x1
000000000001380f         jmp        loc_13306

                     loc_13814:
0000000000013814         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_13290+120
0000000000013819         mov        byte [rax+8], 0x1
000000000001381d         jmp        loc_1330e

                     loc_13822:
0000000000013822         mov        dword [r15], 0x6                            ; CODE XREF=sub_13150+157
0000000000013829         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001382c         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
000000000001382e         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000013830         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000013833         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000013836         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001383b         mov        dword [r15], 0x9
0000000000013842         mov        rbp, rax
0000000000013845         jmp        loc_13216

                     loc_1384a:
000000000001384a         mov        r8, qword [rsp+24]                          ; argument #5 for method create_token_tree.isra.16, CODE XREF=sub_13150+140
000000000001384f         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000013851         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000013853         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000013856         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000013859         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001385e         test       rax, rax
0000000000013861         mov        qword [rsp+40], rax
0000000000013866         jne        loc_13273

000000000001386c         jmp        sub_13290+872
                        ; endp

                     loc_13871:
0000000000013871         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_13290+326, sub_13290+1095, sub_13290+1582
0000000000013876         mov        dword [rax], 0x7
000000000001387c         jmp        loc_13708
0000000000013881         mov        qword [rsp+0x28], r15                       ; CODE XREF=sub_13290+743, sub_13290+753, sub_13290+767
0000000000013886         jmp        sub_12b20+268

                     loc_1388b:
000000000001388b         mov        rdx, qword [rsp+64]                         ; CODE XREF=sub_13290+278, sub_13290+1646
0000000000013890         mov        dword [rdx], eax
0000000000013892         jmp        loc_13708

                     loc_13897:
0000000000013897         movsxd     rax, ebx                                    ; CODE XREF=sub_13290+335
000000000001389a         mov        r11, qword [rsp+32]
000000000001389f         add        qword [r14+0x48], rax
00000000000138a3         mov        r10, qword [rsp+96]
00000000000138a8         mov        rdx, r11                                    ; argument #3 for method peek_token_bracket
00000000000138ab         mov        rdi, r10                                    ; argument #1 for method peek_token_bracket
00000000000138ae         call       peek_token_bracket                          ; peek_token_bracket
00000000000138b3         movzx      edx, byte [rsp+200]
00000000000138bb         cmp        dl, 0x2
00000000000138be         je         loc_13871

00000000000138c0         cmp        dl, 0x15
00000000000138c3         je         loc_13ad7

00000000000138c9         mov        rdx, qword [rsp+104]
00000000000138ce         lea        rdi, qword [rsp+176]                        ; argument #1 for method parse_bracket_element.constprop.37
00000000000138d6         mov        r9d, 0x1                                    ; argument #6 for method parse_bracket_element.constprop.37
00000000000138dc         mov        r8, r11                                     ; argument #5 for method parse_bracket_element.constprop.37
00000000000138df         mov        ecx, eax                                    ; argument #4 for method parse_bracket_element.constprop.37
00000000000138e1         mov        dword [rsp+176], 0x3
00000000000138ec         mov        qword [rsp+184], rdx
00000000000138f4         mov        rdx, r10                                    ; argument #3 for method parse_bracket_element.constprop.37
00000000000138f7         call       parse_bracket_element.constprop.37          ; parse_bracket_element.constprop.37
00000000000138fc         test       eax, eax
00000000000138fe         jne        loc_1388b

0000000000013900         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
0000000000013905         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
0000000000013908         mov        rdi, r15                                    ; argument #1 for method peek_token_bracket
000000000001390b         call       peek_token_bracket                          ; peek_token_bracket
0000000000013910         movsxd     rbx, eax
0000000000013913         mov        rax, qword [rsp+16]
0000000000013918         mov        esi, dword [rsp+160]
000000000001391f         mov        r9d, 0x0
0000000000013925         cmp        dword [rax+0xb4], 0x1
000000000001392c         lea        eax, dword [rsi-2]
000000000001392f         cmovg      r9, r13
0000000000013933         and        eax, 0xfffffffd
0000000000013936         je         loc_13da9

000000000001393c         mov        r10d, dword [rsp+176]
0000000000013944         lea        eax, dword [r10-2]
0000000000013948         and        eax, 0xfffffffd
000000000001394b         je         loc_13da9

0000000000013951         cmp        esi, 0x3
0000000000013954         sete       r11b
0000000000013958         je         loc_13ded

                     loc_1395e:
000000000001395e         cmp        r10d, 0x3                                   ; CODE XREF=sub_13290+2939
0000000000013962         je         loc_13db9

                     loc_13968:
0000000000013968         test       esi, esi                                    ; CODE XREF=sub_13290+2887
000000000001396a         jne        loc_13cd9

0000000000013970         movzx      edx, byte [rsp+168]

                     loc_13978:
0000000000013978         test       r10d, r10d                                  ; CODE XREF=sub_13290+2638, sub_13290+2655
000000000001397b         jne        loc_13cbd

0000000000013981         movzx      r8d, byte [rsp+184]

                     loc_1398a:
000000000001398a         test       esi, esi                                    ; CODE XREF=sub_13290+3278
000000000001398c         je         loc_13c76

0000000000013992         test       r11b, r11b
0000000000013995         jne        loc_13c76

000000000001399b         test       r9, r9
000000000001399e         mov        edx, dword [rsp+168]
00000000000139a5         je         loc_139c4

                     loc_139a7:
00000000000139a7         mov        edi, r8d                                    ; argument "__c" for method j_btowc, CODE XREF=sub_13290+2578, sub_13290+2586
00000000000139aa         mov        dword [rsp+120], edx
00000000000139ae         mov        qword [rsp+112], r9
00000000000139b3         call       j_btowc                                     ; btowc
00000000000139b8         mov        r9, qword [rsp+112]
00000000000139bd         mov        edx, dword [rsp+120]
00000000000139c1         mov        r8d, eax

                     loc_139c4:
00000000000139c4         cmp        edx, 0xffffffff                             ; CODE XREF=sub_13290+1813, sub_13290+2600
00000000000139c7         je         loc_13ddd

00000000000139cd         cmp        r8d, 0xffffffff
00000000000139d1         je         loc_13ddd

                     loc_139d7:
00000000000139d7         test       qword [rsp+32], 0x10000                     ; CODE XREF=sub_13290+2663, sub_13290+2675
00000000000139e0         je         loc_139eb

00000000000139e2         cmp        r8d, edx
00000000000139e5         jb         loc_13da9

                     loc_139eb:
00000000000139eb         test       r9, r9                                      ; CODE XREF=sub_13290+1872
00000000000139ee         je         loc_13a16

00000000000139f0         mov        rax, qword [r9+0x40]
00000000000139f4         cmp        rax, qword [rsp+72]
00000000000139f9         mov        rcx, qword [r9+8]
00000000000139fd         je         loc_13e13

                     loc_13a03:
0000000000013a03         mov        dword [rcx+rax*4], edx                      ; CODE XREF=sub_13290+3088
0000000000013a06         mov        rcx, qword [r9+0x10]
0000000000013a0a         lea        rsi, qword [rax+1]
0000000000013a0e         mov        qword [r9+0x40], rsi
0000000000013a12         mov        dword [rcx+rax*4], r8d

                     loc_13a16:
0000000000013a16         xor        eax, eax                                    ; CODE XREF=sub_13290+1886
0000000000013a18         mov        edi, 0x1

                     loc_13a1d:
0000000000013a1d         cmp        edx, eax                                    ; CODE XREF=sub_13290+1971
0000000000013a1f         mov        ecx, eax
0000000000013a21         ja         loc_13a39

0000000000013a23         cmp        r8d, eax
0000000000013a26         jb         loc_13a39

0000000000013a28         mov        rsi, rax
0000000000013a2b         mov        r11, rdi
0000000000013a2e         sar        rsi, 0x6
0000000000013a32         shl        r11, cl
0000000000013a35         or         qword [r12+rsi*8], r11

                     loc_13a39:
0000000000013a39         add        rax, 0x1                                    ; CODE XREF=sub_13290+1937, sub_13290+1942
0000000000013a3d         cmp        rax, 0x100
0000000000013a43         jne        loc_13a1d

0000000000013a45         mov        rax, qword [rsp+64]
0000000000013a4a         mov        dword [rax], 0x0
0000000000013a50         jmp        loc_136d0
0000000000013a55         mov        rbx, qword [rsp+0x18]                       ; CODE XREF=sub_12b20+204
0000000000013a5a         mov        rdx, rax
0000000000013a5d         mov        rsi, r14
0000000000013a60         mov        qword [rsp], r8
0000000000013a64         mov        r15, rax
0000000000013a67         mov        rdi, rbx
0000000000013a6a         call       peek_token                                  ; peek_token
0000000000013a6f         cdqe
0000000000013a71         add        qword [r14+0x48], rax
0000000000013a75         mov        r9, qword [rsp+0x40]
0000000000013a7a         mov        r8, qword [rsp]
0000000000013a7e         mov        rcx, r15
0000000000013a81         mov        rdx, rbx
0000000000013a84         mov        rsi, rbp
0000000000013a87         mov        rdi, r14
0000000000013a8a         call       parse_expression                            ; parse_expression
0000000000013a8f         mov        qword [rsp+0x28], rax
0000000000013a94         jmp        sub_12b20+128

                     loc_13a99:
0000000000013a99         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_13290+99, sub_13290+1396
0000000000013a9e         mov        dword [rax], 0x2
0000000000013aa4         jmp        loc_13708

                     loc_13aa9:
0000000000013aa9         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=sub_13290+62
0000000000013aac         call       j_free                                      ; free
0000000000013ab1         mov        rdi, r13                                    ; argument "__ptr" for method j_free
0000000000013ab4         call       j_free                                      ; free
0000000000013ab9         jmp        sub_13290+872
                        ; endp
0000000000013abe         mov        rax, qword [rsp+0x40]                       ; CODE XREF=sub_13290+508
0000000000013ac3         mov        qword [rsp+0x28], 0x0
0000000000013acc         mov        dword [rax], 0x6
0000000000013ad2         jmp        sub_12b20+128

                     loc_13ad7:
0000000000013ad7         mov        eax, ebx                                    ; CODE XREF=sub_13290+1587
0000000000013ad9         neg        eax
0000000000013adb         cdqe
0000000000013add         add        qword [r14+0x48], rax
0000000000013ae1         mov        byte [r15+8], 0x1
0000000000013ae6         mov        eax, dword [rsp+160]
0000000000013aed         jmp        loc_133e5

                     loc_13af2:
0000000000013af2         add        qword [r14+0x48], rbx                       ; CODE XREF=sub_13290+1103
0000000000013af6         cmp        byte [rsp+87], 0x0
0000000000013afb         je         loc_13b11

0000000000013afd         lea        rdx, qword [r12+0x20]
0000000000013b02         mov        rax, r12

                     loc_13b05:
0000000000013b05         not        qword [rax]                                 ; CODE XREF=sub_13290+2175
0000000000013b08         add        rax, 0x8
0000000000013b0c         cmp        rdx, rax
0000000000013b0f         jne        loc_13b05

                     loc_13b11:
0000000000013b11         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_13290+2155
0000000000013b16         mov        edx, dword [rax+0xb4]
0000000000013b1c         cmp        edx, 0x1
0000000000013b1f         jle        loc_13b39

0000000000013b21         mov        rcx, qword [rax+0x78]
0000000000013b25         xor        eax, eax

                     loc_13b27:
0000000000013b27         mov        rsi, qword [rcx+rax]                        ; CODE XREF=sub_13290+2215
0000000000013b2b         and        qword [r12+rax], rsi
0000000000013b2f         add        rax, 0x8
0000000000013b33         cmp        rax, 0x20
0000000000013b37         jne        loc_13b27

                     loc_13b39:
0000000000013b39         cmp        qword [r13+0x28], 0x0                       ; CODE XREF=sub_13290+2191
0000000000013b3e         jne        loc_13bc8

0000000000013b44         cmp        qword [r13+0x30], 0x0
0000000000013b49         jne        loc_13bc8

0000000000013b4b         cmp        qword [r13+0x38], 0x0
0000000000013b50         jne        loc_13bc8

0000000000013b52         cmp        qword [r13+0x40], 0x0
0000000000013b57         jne        loc_13bc8

0000000000013b59         sub        edx, 0x1
0000000000013b5c         jle        loc_13b6c

0000000000013b5e         cmp        qword [r13+0x48], 0x0
0000000000013b63         jne        loc_13bc8

0000000000013b65         test       byte [r13+0x20], 0x1
0000000000013b6a         jne        loc_13bc8

                     loc_13b6c:
0000000000013b6c         mov        rdi, r13                                    ; argument #1 for method free_charset, CODE XREF=sub_13290+2252
0000000000013b6f         call       free_charset                                ; free_charset
0000000000013b74         mov        rax, qword [rsp+16]
0000000000013b79         lea        r8, qword [rsp+176]                         ; argument #5 for method create_token_tree.isra.16
0000000000013b81         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000013b83         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000013b85         mov        byte [rsp+184], 0x3
0000000000013b8d         mov        qword [rsp+176], r12
0000000000013b95         lea        rsi, qword [rax+0x80]                       ; argument #2 for method create_token_tree.isra.16
0000000000013b9c         lea        rdi, qword [rax+0x70]                       ; argument #1 for method create_token_tree.isra.16
0000000000013ba0         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000013ba5         test       rax, rax
0000000000013ba8         mov        qword [rsp+40], rax
0000000000013bad         jne        sub_12b20+268

                     loc_13bb3:
0000000000013bb3         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_13290+2444, sub_13290+2512, sub_13290+3170, sub_13290+3225
0000000000013bb8         mov        dword [rax], 0xc
0000000000013bbe         jmp        loc_13708
0000000000013bc3         nop        dword [rax+rax]

                     loc_13bc8:
0000000000013bc8         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_13290+2222, sub_13290+2233, sub_13290+2240, sub_13290+2247, sub_13290+2259, sub_13290+2266
0000000000013bcd         lea        r15, qword [rsp+176]
0000000000013bd5         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000013bd7         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000013bd9         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000013bdc         or         byte [rax+0xb0], 0x2
0000000000013be3         lea        rbx, qword [rax+0x70]
0000000000013be7         lea        rbp, qword [rax+0x80]
0000000000013bee         mov        byte [rsp+184], 0x6
0000000000013bf6         mov        qword [rsp+176], r13
0000000000013bfe         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000013c01         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
0000000000013c04         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000013c09         mov        rdi, rax
0000000000013c0c         mov        qword [rsp+40], rax
0000000000013c11         lea        rdx, qword [r12+0x20]
0000000000013c16         test       rdi, rdi
0000000000013c19         mov        rax, r12
0000000000013c1c         je         loc_13bb3

                     loc_13c1e:
0000000000013c1e         cmp        qword [rax], 0x0                            ; CODE XREF=sub_13290+2463
0000000000013c22         jne        loc_13ecd

0000000000013c28         add        rax, 0x8
0000000000013c2c         cmp        rdx, rax
0000000000013c2f         jne        loc_13c1e

0000000000013c31         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000013c34         call       j_free                                      ; free
0000000000013c39         jmp        sub_12b20+268
                        ; endp

                     loc_13c3e:
0000000000013c3e         mov        rdx, qword [rsp+48]                         ; CODE XREF=sub_13290+1204
0000000000013c43         lea        rdi, qword [rdx+rdx+1]
0000000000013c48         lea        rsi, qword [rdi*4]                          ; argument "__size" for method j_realloc
0000000000013c50         mov        qword [rsp+48], rdi
0000000000013c55         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
0000000000013c58         call       j_realloc                                   ; realloc
0000000000013c5d         test       rax, rax
0000000000013c60         je         loc_13bb3

0000000000013c66         mov        qword [r13], rax
0000000000013c6a         mov        rdx, qword [r13+0x28]
0000000000013c6e         jmp        loc_1374a

                     loc_13c73:
0000000000013c73         xor        r8d, r8d                                    ; CODE XREF=sub_13290+2617, sub_13290+2622

                     loc_13c76:
0000000000013c76         test       r9, r9                                      ; CODE XREF=sub_13290+1788, sub_13290+1797
0000000000013c79         je         loc_13cf4

0000000000013c7b         mov        edi, edx                                    ; argument "__c" for method j_btowc
0000000000013c7d         mov        dword [rsp+120], r8d
0000000000013c82         mov        qword [rsp+112], r9
0000000000013c87         call       j_btowc                                     ; btowc
0000000000013c8c         mov        edx, eax
0000000000013c8e         mov        eax, dword [rsp+176]
0000000000013c95         mov        r9, qword [rsp+112]
0000000000013c9a         mov        r8d, dword [rsp+120]
0000000000013c9f         cmp        eax, 0x3
0000000000013ca2         je         loc_139a7

0000000000013ca8         test       eax, eax
0000000000013caa         je         loc_139a7

                     loc_13cb0:
0000000000013cb0         mov        r8d, dword [rsp+184]                        ; CODE XREF=sub_13290+2631, sub_13290+2673
0000000000013cb8         jmp        loc_139c4

                     loc_13cbd:
0000000000013cbd         cmp        r10d, 0x3                                   ; CODE XREF=sub_13290+1771
0000000000013cc1         je         loc_13f52

0000000000013cc7         test       esi, esi
0000000000013cc9         je         loc_13c73

0000000000013ccb         test       r11b, r11b
0000000000013cce         jne        loc_13c73

0000000000013cd0         mov        edx, dword [rsp+168]
0000000000013cd7         jmp        loc_13cb0

                     loc_13cd9:
0000000000013cd9         xor        edx, edx                                    ; CODE XREF=sub_13290+1754
0000000000013cdb         cmp        esi, 0x3
0000000000013cde         jne        loc_13978

0000000000013ce4         mov        rax, qword [rsp+168]
0000000000013cec         movzx      edx, byte [rax]
0000000000013cef         jmp        loc_13978

                     loc_13cf4:
0000000000013cf4         test       r10d, r10d                                  ; CODE XREF=sub_13290+2537
0000000000013cf7         je         loc_139d7

0000000000013cfd         cmp        r10d, 0x3
0000000000013d01         jne        loc_13cb0

0000000000013d03         jmp        loc_139d7

                     loc_13d08:
0000000000013d08         mov        ebx, 0x80                                   ; CODE XREF=sub_13150+89
0000000000013d0d         mov        r12d, 0x2

                     loc_13d13:
0000000000013d13         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=sub_13290+2808
0000000000013d18         movsxd     rdx, ebx
0000000000013d1b         movsxd     r9, r12d
0000000000013d1e         mov        r8d, 0x1
0000000000013d24         add        rdx, rdx
0000000000013d27         add        rdx, qword [rax]
0000000000013d2a         mov        rax, qword [rsp+16]
0000000000013d2f         lea        rdi, qword [rax+r9*8]

                     loc_13d33:
0000000000013d33         xor        eax, eax                                    ; CODE XREF=sub_13290+2796
0000000000013d35         jmp        loc_13d52
0000000000013d37         nop        word [rax+rax]

                     loc_13d40:
0000000000013d40         lea        esi, dword [rbx+rax]                        ; CODE XREF=sub_13290+2760
0000000000013d43         cmp        esi, 0x5f
0000000000013d46         je         loc_13d5a

                     loc_13d48:
0000000000013d48         add        rax, 0x1                                    ; CODE XREF=sub_13290+2775
0000000000013d4c         cmp        rax, 0x40
0000000000013d50         je         loc_13d69

                     loc_13d52:
0000000000013d52         test       byte [rdx+rax*2], 0x8                       ; CODE XREF=sub_13290+2725
0000000000013d56         mov        ecx, eax
0000000000013d58         je         loc_13d40

                     loc_13d5a:
0000000000013d5a         mov        rsi, r8                                     ; CODE XREF=sub_13290+2742
0000000000013d5d         shl        rsi, cl
0000000000013d60         or         qword [rdi+0xb8], rsi
0000000000013d67         jmp        loc_13d48

                     loc_13d69:
0000000000013d69         add        r9, 0x1                                     ; CODE XREF=sub_13290+2752
0000000000013d6d         add        ebx, 0x40
0000000000013d70         sub        rdx, 0xffffffffffffff80
0000000000013d74         add        rdi, 0x8
0000000000013d78         cmp        r9d, 0x3
0000000000013d7c         jle        loc_13d33

0000000000013d7e         jmp        loc_131c1

                     loc_13d83:
0000000000013d83         xor        ebx, ebx                                    ; CODE XREF=sub_13150+47
0000000000013d85         xor        r12d, r12d
0000000000013d88         jmp        loc_13d13

                     loc_13d8a:
0000000000013d8a         lea        rcx, qword [__PRETTY_FUNCTION__.7327]       ; argument "__function" for method j___assert_fail, "parse_bracket_exp", CODE XREF=sub_13290+344
0000000000013d91         lea        rsi, qword [aCoreutils831li_17628]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
0000000000013d98         lea        rdi, qword [aNum0+7]                        ; argument "__assertion" for method j___assert_fail, 0x17677
0000000000013d9f         mov        edx, 0xced                                  ; argument "__line" for method j___assert_fail
0000000000013da4         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_13da9:
0000000000013da9         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_13290+1702, sub_13290+1723, sub_13290+1877
0000000000013dae         mov        dword [rax], 0xb
0000000000013db4         jmp        loc_13708

                     loc_13db9:
0000000000013db9         mov        rdi, qword [rsp+184]                        ; CODE XREF=sub_13290+1746
0000000000013dc1         xor        eax, eax
0000000000013dc3         or         rcx, 0xffffffffffffffff
0000000000013dc7         repne scasb al, byte [rdi]
0000000000013dc9         mov        rax, rcx
0000000000013dcc         not        rax
0000000000013dcf         sub        rax, 0x1
0000000000013dd3         cmp        rax, 0x1
0000000000013dd7         jbe        loc_13968

                     loc_13ddd:
0000000000013ddd         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_13290+1847, sub_13290+1857, sub_13290+2945
0000000000013de2         mov        dword [rax], 0x3
0000000000013de8         jmp        loc_13708

                     loc_13ded:
0000000000013ded         mov        rdi, qword [rsp+168]                        ; CODE XREF=sub_13290+1736
0000000000013df5         xor        eax, eax
0000000000013df7         or         rcx, 0xffffffffffffffff
0000000000013dfb         repne scasb al, byte [rdi]
0000000000013dfd         mov        rax, rcx
0000000000013e00         not        rax
0000000000013e03         sub        rax, 0x1
0000000000013e07         cmp        rax, 0x1
0000000000013e0b         jbe        loc_1395e

0000000000013e11         jmp        loc_13ddd

                     loc_13e13:
0000000000013e13         mov        rax, qword [rsp+72]                         ; CODE XREF=sub_13290+1901
0000000000013e18         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
0000000000013e1b         mov        dword [rsp+140], r8d
0000000000013e23         mov        dword [rsp+136], edx
0000000000013e2a         mov        qword [rsp+112], r9
0000000000013e2f         add        rax, rax
0000000000013e32         add        rax, 0x1
0000000000013e36         lea        r10, qword [rax*4]
0000000000013e3e         mov        qword [rsp+72], rax
0000000000013e43         mov        rsi, r10                                    ; argument "__size" for method j_realloc
0000000000013e46         mov        qword [rsp+128], r10
0000000000013e4e         call       j_realloc                                   ; realloc
0000000000013e53         mov        r9, qword [rsp+112]
0000000000013e58         mov        r10, qword [rsp+128]
0000000000013e60         mov        qword [rsp+120], rax
0000000000013e65         mov        rdi, qword [r9+0x10]                        ; argument "__ptr" for method j_realloc
0000000000013e69         mov        rsi, r10                                    ; argument "__size" for method j_realloc
0000000000013e6c         call       j_realloc                                   ; realloc
0000000000013e71         mov        rcx, qword [rsp+120]
0000000000013e76         test       rcx, rcx
0000000000013e79         je         loc_13ea5

0000000000013e7b         test       rax, rax
0000000000013e7e         mov        r9, qword [rsp+112]
0000000000013e83         mov        edx, dword [rsp+136]
0000000000013e8a         mov        r8d, dword [rsp+140]
0000000000013e92         je         loc_13ea5

0000000000013e94         mov        qword [r9+0x10], rax
0000000000013e98         mov        qword [r9+8], rcx
0000000000013e9c         mov        rax, qword [r9+0x40]
0000000000013ea0         jmp        loc_13a03

                     loc_13ea5:
0000000000013ea5         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=sub_13290+3049, sub_13290+3074
0000000000013ea8         mov        qword [rsp+0], rax
0000000000013eac         call       j_free                                      ; free
0000000000013eb1         mov        rax, qword [rsp+0]
0000000000013eb5         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000013eb8         call       j_free                                      ; free
0000000000013ebd         mov        rax, qword [rsp+64]
0000000000013ec2         mov        dword [rax], 0xc
0000000000013ec8         jmp        loc_13708

                     loc_13ecd:
0000000000013ecd         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16, CODE XREF=sub_13290+2450
0000000000013ecf         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000013ed1         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000013ed4         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
0000000000013ed7         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000013eda         mov        byte [rsp+184], 0x3
0000000000013ee2         mov        qword [rsp+176], r12
0000000000013eea         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000013eef         test       rax, rax
0000000000013ef2         je         loc_13bb3

0000000000013ef8         mov        rcx, qword [rsp+40]                         ; argument #4 for method create_token_tree.isra.16
0000000000013efd         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
0000000000013f05         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
0000000000013f08         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
0000000000013f0b         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000013f0e         mov        byte [rsp+200], 0xa
0000000000013f16         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000013f1b         test       rax, rax
0000000000013f1e         mov        qword [rsp+40], rax
0000000000013f23         jne        sub_12b20+268

0000000000013f29         jmp        loc_13bb3

                     loc_13f2e:
0000000000013f2e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_12b20+150
                        ; endp

                     loc_13f33:
0000000000013f33         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_12b20+1238
0000000000013f38         cmp        byte [rax+8], 0x2
0000000000013f3c         jne        loc_13130

0000000000013f42         mov        rax, qword [rsp+64]
0000000000013f47         mov        dword [rax], 0x9
0000000000013f4d         jmp        loc_1313b

                     loc_13f52:
0000000000013f52         mov        rax, qword [rsp+184]                        ; CODE XREF=sub_13290+2609
0000000000013f5a         movzx      r8d, byte [rax]
0000000000013f5e         jmp        loc_1398a


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13f63:
0000000000013f63         nop        dword [rax]                                 ; End of unwind block (FDE at 0x1a4f8)
0000000000013f66         nop        word [cs:rax+rax]
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     parse_branch:
0000000000013f70         push       r15                                         ; Begin of unwind block (FDE at 0x1a558), CODE XREF=parse_reg_exp+67, parse_reg_exp+174
0000000000013f72         push       r14
0000000000013f74         mov        r15, rcx
0000000000013f77         push       r13
0000000000013f79         push       r12
0000000000013f7b         mov        r13, rsi
0000000000013f7e         push       rbp
0000000000013f7f         push       rbx
0000000000013f80         mov        rbx, r9
0000000000013f83         mov        rbp, rdx
0000000000013f86         mov        r12, r8
0000000000013f89         sub        rsp, 0x48
0000000000013f8d         mov        rax, qword [fs:0x28]
0000000000013f96         mov        qword [rsp+0x78+var_40], rax
0000000000013f9b         xor        eax, eax
0000000000013f9d         mov        rax, qword [rsi]
0000000000013fa0         mov        qword [rsp+0x78+var_78], rdi
0000000000013fa4         mov        qword [rsp+0x78+var_68], rax
0000000000013fa9         call       parse_expression                            ; parse_expression
0000000000013fae         mov        edx, dword [rbx]
0000000000013fb0         mov        r14, rax
0000000000013fb3         test       edx, edx
0000000000013fb5         je         loc_13fc0

0000000000013fb7         test       rax, rax
0000000000013fba         je         loc_140ba

                     loc_13fc0:
0000000000013fc0         lea        rax, qword [rsp+0x78+var_58]                ; CODE XREF=parse_branch+69
0000000000013fc5         mov        qword [rsp+0x78+var_60], rax
0000000000013fca         nop        word [rax+rax]

                     loc_13fd0:
0000000000013fd0         movzx      eax, byte [rbp+8]                           ; CODE XREF=parse_branch+303
0000000000013fd4         mov        edx, eax
0000000000013fd6         and        edx, 0xfffffff7
0000000000013fd9         cmp        dl, 0x2
0000000000013fdc         je         loc_14070

                     loc_13fe2:
0000000000013fe2         cmp        al, 0x9                                     ; CODE XREF=parse_branch+246
0000000000013fe4         jne        loc_13fef

0000000000013fe6         test       r12, r12
0000000000013fe9         jne        loc_14070

                     loc_13fef:
0000000000013fef         mov        rdi, qword [rsp+0x78+var_78]                ; CODE XREF=parse_branch+116
0000000000013ff3         mov        r9, rbx
0000000000013ff6         mov        r8, r12
0000000000013ff9         mov        rcx, r15
0000000000013ffc         mov        rdx, rbp
0000000000013fff         mov        rsi, r13
0000000000014002         call       parse_expression                            ; parse_expression
0000000000014007         mov        r9, rax
000000000001400a         mov        eax, dword [rbx]
000000000001400c         test       eax, eax
000000000001400e         je         loc_14019

0000000000014010         test       r9, r9
0000000000014013         je         loc_140a4

                     loc_14019:
0000000000014019         test       r14, r14                                    ; CODE XREF=parse_branch+158
000000000001401c         je         loc_14098

000000000001401e         test       r9, r9
0000000000014021         je         loc_14098

0000000000014023         mov        rax, qword [rsp+0x78+var_68]
0000000000014028         mov        r8, qword [rsp+0x78+var_60]
000000000001402d         mov        rcx, r9
0000000000014030         mov        rdx, r14
0000000000014033         mov        qword [rsp+0x78+var_70], r9
0000000000014038         mov        byte [rsp+0x78+var_50], 0x10
000000000001403d         lea        rsi, qword [rax+0x80]
0000000000014044         lea        rdi, qword [rax+0x70]
0000000000014048         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001404d         test       rax, rax
0000000000014050         mov        r9, qword [rsp+0x78+var_70]
0000000000014055         je         loc_140c0

0000000000014057         mov        r14, rax
000000000001405a         movzx      eax, byte [rbp+8]
000000000001405e         mov        edx, eax
0000000000014060         and        edx, 0xfffffff7
0000000000014063         cmp        dl, 0x2
0000000000014066         jne        loc_13fe2

000000000001406c         nop        dword [rax]

                     loc_14070:
0000000000014070         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=parse_branch+108, parse_branch+121, parse_branch+333, parse_branch+379
0000000000014075         xor        rcx, qword [fs:0x28]
000000000001407e         mov        rax, r14
0000000000014081         jne        loc_140ed

0000000000014083         add        rsp, 0x48
0000000000014087         pop        rbx
0000000000014088         pop        rbp
0000000000014089         pop        r12
000000000001408b         pop        r13
000000000001408d         pop        r14
000000000001408f         pop        r15
0000000000014091         ret
                        ; endp
0000000000014092         align      8

                     loc_14098:
0000000000014098         test       r14, r14                                    ; CODE XREF=parse_branch+172, parse_branch+177
000000000001409b         cmove      r14, r9
000000000001409f         jmp        loc_13fd0

                     loc_140a4:
00000000000140a4         test       r14, r14                                    ; CODE XREF=parse_branch+163
00000000000140a7         je         loc_140ba

00000000000140a9         lea        rsi, qword [free_tree]                      ; free_tree
00000000000140b0         xor        edx, edx
00000000000140b2         mov        rdi, r14
00000000000140b5         call       postorder                                   ; postorder

                     loc_140ba:
00000000000140ba         xor        r14d, r14d                                  ; CODE XREF=parse_branch+74, parse_branch+311
00000000000140bd         jmp        loc_14070
00000000000140bf         align      64

                     loc_140c0:
00000000000140c0         lea        rsi, qword [free_tree]                      ; free_tree, CODE XREF=parse_branch+229
00000000000140c7         mov        rdi, r9
00000000000140ca         xor        edx, edx
00000000000140cc         call       postorder                                   ; postorder
00000000000140d1         lea        rsi, qword [free_tree]                      ; free_tree
00000000000140d8         mov        rdi, r14
00000000000140db         xor        edx, edx
00000000000140dd         xor        r14d, r14d
00000000000140e0         call       postorder                                   ; postorder
00000000000140e5         mov        dword [rbx], 0xc
00000000000140eb         jmp        loc_14070

                     loc_140ed:
00000000000140ed         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_branch+273
                        ; endp
00000000000140f2         align      256                                         ; End of unwind block (FDE at 0x1a558)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128


                     parse_reg_exp:
0000000000014100         push       r15                                         ; Begin of unwind block (FDE at 0x1a5a4), CODE XREF=sub_12b20+47, re_compile_internal+1203
0000000000014102         push       r14
0000000000014104         mov        r14, rcx
0000000000014107         push       r13
0000000000014109         push       r12
000000000001410b         mov        r13, r9
000000000001410e         push       rbp
000000000001410f         push       rbx
0000000000014110         mov        rbp, rdx
0000000000014113         mov        r12, rdi
0000000000014116         sub        rsp, 0x58
000000000001411a         mov        rbx, qword [rsi]
000000000001411d         mov        rax, qword [fs:0x28]
0000000000014126         mov        qword [rsp+0x88+var_40], rax
000000000001412b         xor        eax, eax
000000000001412d         mov        qword [rsp+0x88+var_60], rsi
0000000000014132         mov        qword [rsp+0x88+var_78], r8
0000000000014137         mov        rax, qword [rbx+0xa8]
000000000001413e         mov        qword [rsp+0x88+var_68], rax
0000000000014143         call       parse_branch                                ; parse_branch
0000000000014148         mov        edx, dword [r13]
000000000001414c         mov        r15, rax
000000000001414f         test       edx, edx
0000000000014151         je         loc_1415c

0000000000014153         test       rax, rax
0000000000014156         je         loc_14242

                     loc_1415c:
000000000001415c         lea        rax, qword [rsp+0x88+var_58]                ; CODE XREF=parse_reg_exp+81
0000000000014161         mov        qword [rsp+0x88+var_80], rax
0000000000014166         jmp        loc_141f4
000000000001416b         align      16

                     loc_14170:
0000000000014170         cmp        al, 0x9                                     ; CODE XREF=parse_reg_exp+290
0000000000014172         jne        loc_14180

0000000000014174         cmp        qword [rsp+0x88+var_78], 0x0
000000000001417a         jne        loc_14228

                     loc_14180:
0000000000014180         mov        rax, qword [rbx+0xa8]                       ; CODE XREF=parse_reg_exp+114
0000000000014187         mov        r8, qword [rsp+0x88+var_78]
000000000001418c         mov        rcx, r14
000000000001418f         mov        rsi, qword [rsp+0x88+var_60]
0000000000014194         mov        r9, r13
0000000000014197         mov        rdx, rbp
000000000001419a         mov        rdi, r12
000000000001419d         mov        qword [rsp+0x88+var_70], rax
00000000000141a2         mov        rax, qword [rsp+0x88+var_68]
00000000000141a7         mov        qword [rbx+0xa8], rax
00000000000141ae         call       parse_branch                                ; parse_branch
00000000000141b3         mov        rcx, rax
00000000000141b6         mov        eax, dword [r13]
00000000000141ba         test       eax, eax
00000000000141bc         je         loc_141c3

00000000000141be         test       rcx, rcx
00000000000141c1         je         loc_1422c

                     loc_141c3:
00000000000141c3         mov        rax, qword [rsp+0x88+var_70]                ; CODE XREF=parse_reg_exp+188
00000000000141c8         or         qword [rbx+0xa8], rax

                     loc_141cf:
00000000000141cf         mov        r8, qword [rsp+0x88+var_80]                 ; CODE XREF=parse_reg_exp+298
00000000000141d4         lea        rsi, qword [rbx+0x80]
00000000000141db         lea        rdi, qword [rbx+0x70]
00000000000141df         mov        rdx, r15
00000000000141e2         mov        byte [rsp+0x88+var_50], 0xa
00000000000141e7         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000141ec         test       rax, rax
00000000000141ef         mov        r15, rax
00000000000141f2         je         loc_14270

                     loc_141f4:
00000000000141f4         cmp        byte [rbp+8], 0xa                           ; CODE XREF=parse_reg_exp+102
00000000000141f8         jne        loc_14248

00000000000141fa         mov        rdx, r14
00000000000141fd         mov        rsi, r12
0000000000014200         mov        rdi, rbp
0000000000014203         or         rdx, 0x800000
000000000001420a         call       peek_token                                  ; peek_token
000000000001420f         cdqe
0000000000014211         add        qword [r12+0x48], rax
0000000000014216         movzx      eax, byte [rbp+8]
000000000001421a         mov        edx, eax
000000000001421c         and        edx, 0xfffffff7
000000000001421f         cmp        dl, 0x2
0000000000014222         jne        loc_14170

                     loc_14228:
0000000000014228         xor        ecx, ecx                                    ; CODE XREF=parse_reg_exp+122
000000000001422a         jmp        loc_141cf

                     loc_1422c:
000000000001422c         test       r15, r15                                    ; CODE XREF=parse_reg_exp+193
000000000001422f         je         loc_14242

0000000000014231         lea        rsi, qword [free_tree]                      ; free_tree
0000000000014238         xor        edx, edx
000000000001423a         mov        rdi, r15
000000000001423d         call       postorder                                   ; postorder

                     loc_14242:
0000000000014242         xor        r15d, r15d                                  ; CODE XREF=parse_reg_exp+86, parse_reg_exp+303
0000000000014245         nop        dword [rax]

                     loc_14248:
0000000000014248         mov        rcx, qword [rsp+0x88+var_40]                ; CODE XREF=parse_reg_exp+248, parse_reg_exp+376
000000000001424d         xor        rcx, qword [fs:0x28]
0000000000014256         mov        rax, r15
0000000000014259         jne        loc_1427a

000000000001425b         add        rsp, 0x58
000000000001425f         pop        rbx
0000000000014260         pop        rbp
0000000000014261         pop        r12
0000000000014263         pop        r13
0000000000014265         pop        r14
0000000000014267         pop        r15
0000000000014269         ret
                        ; endp
000000000001426a         align      16

                     loc_14270:
0000000000014270         mov        dword [r13], 0xc                            ; CODE XREF=parse_reg_exp+242
0000000000014278         jmp        loc_14248

                     loc_1427a:
000000000001427a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_reg_exp+345
                        ; endp
000000000001427f         align      128                                         ; End of unwind block (FDE at 0x1a5a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int32_t, -72
        ;    var_4D: int8_t, -77
        ;    var_4E: int8_t, -78
        ;    var_4F: int8_t, -79
        ;    var_50: int8_t, -80
        ;    var_60: int64_t, -96
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int8_t, -248
        ;    var_108: int32_t, -264
        ;    var_10C: int32_t, -268
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_150: int64_t, -336
        ;    var_158: int64_t, -344


                     re_compile_internal:
0000000000014280         push       r15                                         ; Begin of unwind block (FDE at 0x1a5f4), CODE XREF=rpl_re_compile_pattern+53, rpl_regcomp+164
0000000000014282         push       r14
0000000000014284         push       r13
0000000000014286         push       r12
0000000000014288         push       rbp
0000000000014289         push       rbx
000000000001428a         sub        rsp, 0x128
0000000000014291         mov        qword [rdi+0x18], rcx
0000000000014295         mov        qword [rdi+0x10], 0x0
000000000001429d         mov        rax, qword [fs:0x28]
00000000000142a6         mov        qword [rsp+0x158+var_40], rax
00000000000142ae         xor        eax, eax
00000000000142b0         movzx      eax, byte [rdi+0x38]
00000000000142b4         mov        qword [rsp+0x158+var_150], rdi
00000000000142b9         mov        qword [rsp+0x158+var_148], rsi
00000000000142be         mov        qword [rsp+0x158+var_158], rdx
00000000000142c2         mov        qword [rsp+0x158+var_140], rcx
00000000000142c7         mov        dword [rsp+0x158+var_10C], 0x0
00000000000142cf         mov        qword [rdi+0x30], 0x0
00000000000142d7         mov        rbx, qword [rdi]
00000000000142da         mov        byte [rsp+0x158+var_138], al
00000000000142de         and        eax, 0xffffff90
00000000000142e1         cmp        qword [rdi+8], 0xe7
00000000000142e9         mov        byte [rdi+0x38], al
00000000000142ec         jbe        loc_150e6

                     loc_142f2:
00000000000142f2         lea        rdi, qword [rbx+8]                          ; CODE XREF=sub_14c00+1295
00000000000142f6         mov        rax, qword [rsp+0x158+var_150]
00000000000142fb         mov        rcx, rbx
00000000000142fe         and        rdi, 0xfffffffffffffff8
0000000000014302         sub        rcx, rdi
0000000000014305         mov        qword [rax+0x10], 0xe8
000000000001430d         xor        eax, eax
000000000001430f         add        ecx, 0xe8
0000000000014315         mov        qword [rbx], 0x0
000000000001431c         mov        qword [rbx+0xe0], 0x0
0000000000014327         shr        ecx, 0x3
000000000001432a         rep stosq  qword [rdi], rax
000000000001432d         movabs     rax, 0x555555555555554
0000000000014337         mov        dword [rbx+0x80], 0xf
0000000000014341         cmp        qword [rsp+0x158+var_158], rax
0000000000014345         ja         loc_14986

000000000001434b         mov        r14, qword [rsp+0x158+var_158]
000000000001434f         lea        rax, qword [r14+1]
0000000000014353         mov        rdi, rax
0000000000014356         mov        qword [rbx+8], rax
000000000001435a         mov        qword [rsp+0x158+var_130], rax
000000000001435f         shl        rdi, 0x4                                    ; argument "__size" for method j_malloc
0000000000014363         call       j_malloc                                    ; malloc
0000000000014368         test       r14, r14
000000000001436b         mov        qword [rbx], rax
000000000001436e         je         loc_15055

0000000000014374         mov        esi, 0x1
0000000000014379         nop        dword [rax]

                     loc_14380:
0000000000014380         add        rsi, rsi                                    ; CODE XREF=re_compile_internal+263
0000000000014383         cmp        qword [rsp+0x158+var_158], rsi
0000000000014387         jae        loc_14380

0000000000014389         lea        rbp, qword [rsi-1]

                     loc_1438d:
000000000001438d         mov        edi, 0x18                                   ; argument "__nmemb" for method j_calloc, CODE XREF=sub_14c00+1116
0000000000014392         call       j_calloc                                    ; calloc
0000000000014397         mov        qword [rbx+0x88], rbp
000000000001439e         mov        qword [rbx+0x40], rax
00000000000143a2         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
00000000000143a7         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
00000000000143ac         mov        dword [rbx+0xb4], eax
00000000000143b2         call       j_nl_langinfo                               ; nl_langinfo
00000000000143b7         movzx      edx, byte [rax]
00000000000143ba         and        edx, 0xffffffdf
00000000000143bd         cmp        dl, 0x55
00000000000143c0         jne        loc_14410

00000000000143c2         movzx      edx, byte [rax+1]
00000000000143c6         and        edx, 0xffffffdf
00000000000143c9         cmp        dl, 0x54
00000000000143cc         jne        loc_14410

00000000000143ce         movzx      edx, byte [rax+2]
00000000000143d2         and        edx, 0xffffffdf
00000000000143d5         cmp        dl, 0x46
00000000000143d8         jne        loc_14410

00000000000143da         xor        edx, edx
00000000000143dc         cmp        byte [rax+3], 0x2d
00000000000143e0         lea        rdi, qword [aErrRegespace+18]               ; 0x176ce
00000000000143e7         mov        ecx, 0x2
00000000000143ec         sete       dl
00000000000143ef         lea        rsi, qword [rax+rdx+3]
00000000000143f4         rep  cmpsb byte [rsi], byte [rdi]
00000000000143f6         seta       al
00000000000143f9         sbb        al, 0x0
00000000000143fb         test       al, al
00000000000143fd         jne        loc_14410

00000000000143ff         or         byte [rbx+0xb0], 0x4
0000000000014406         nop        word [cs:rax+rax]

                     loc_14410:
0000000000014410         movzx      eax, byte [rbx+0xb0]                        ; CODE XREF=re_compile_internal+320, re_compile_internal+332, re_compile_internal+344, re_compile_internal+381
0000000000014417         mov        edx, eax
0000000000014419         and        edx, 0xfffffff7
000000000001441c         cmp        dword [rbx+0xb4], 0x1
0000000000014423         mov        byte [rbx+0xb0], dl
0000000000014429         jle        loc_1443e

000000000001442b         test       al, 0x4
000000000001442d         je         loc_14993

0000000000014433         lea        rax, qword [utf8_sb_map]                    ; utf8_sb_map
000000000001443a         mov        qword [rbx+0x78], rax

                     loc_1443e:
000000000001443e         cmp        qword [rbx], 0x0                            ; CODE XREF=re_compile_internal+425, re_compile_internal+1939
0000000000014442         je         loc_14986

0000000000014448         cmp        qword [rbx+0x40], 0x0
000000000001444d         je         loc_14986

0000000000014453         mov        rax, qword [rsp+0x158+var_140]
0000000000014458         lea        rbp, qword [rsp+0x158+var_D8]
0000000000014460         mov        ecx, 0x12
0000000000014465         mov        dword [rsp+0x158+var_10C], 0x0
000000000001446d         lea        r8, qword [rbp+8]
0000000000014471         and        eax, 0x400000
0000000000014476         mov        qword [rsp+0x158+var_138], rax
000000000001447b         mov        rax, qword [rsp+0x158+var_150]
0000000000014480         setne      dl
0000000000014483         mov        rdi, r8
0000000000014486         mov        rsi, qword [rax+0x28]
000000000001448a         xor        eax, eax
000000000001448c         rep stosq  qword [rdi], rax
000000000001448f         mov        rax, qword [rsp+0x158+var_148]
0000000000014494         mov        rdi, qword [rsp+0x158+var_158]
0000000000014498         test       rsi, rsi
000000000001449b         mov        byte [rsp+0x158+var_50], dl
00000000000144a2         mov        ecx, dword [rbx+0xb4]
00000000000144a8         setne      r12b
00000000000144ac         mov        qword [rsp+0x158+var_60], rsi
00000000000144b4         mov        qword [rsp+0x158+var_D8], rax
00000000000144bc         movzx      eax, byte [rbx+0xb0]
00000000000144c3         or         r12d, edx
00000000000144c6         mov        qword [rsp+0x158+var_80], rdi
00000000000144ce         mov        qword [rsp+0x158+var_88], rdi
00000000000144d6         mov        esi, r12d
00000000000144d9         mov        byte [rsp+0x158+var_4D], r12b
00000000000144e1         mov        dword [rsp+0x158+var_48], ecx
00000000000144e8         mov        qword [rsp+0x158+var_70], rdi
00000000000144f0         mov        qword [rsp+0x158+var_78], rdi
00000000000144f8         mov        edx, eax
00000000000144fa         shr        al, 0x3
00000000000144fd         shr        dl, 0x2
0000000000014500         and        eax, 0x1
0000000000014503         and        edx, 0x1
0000000000014506         test       rdi, rdi
0000000000014509         mov        byte [rsp+0x158+var_4E], al
0000000000014510         mov        byte [rsp+0x158+var_4F], dl
0000000000014517         jne        loc_14955

000000000001451d         test       sil, sil
0000000000014520         je         loc_1452f

                     loc_14522:
0000000000014522         mov        rax, qword [rsp+0x158+var_D0]               ; CODE XREF=re_compile_internal+1793
000000000001452a         mov        qword [rsp+0x158+var_148], rax

                     loc_1452f:
000000000001452f         cmp        qword [rsp+0x158+var_138], 0x0              ; CODE XREF=re_compile_internal+672, re_compile_internal+1787
0000000000014535         mov        rax, qword [rsp+0x158+var_148]
000000000001453a         mov        qword [rsp+0x158+var_D0], rax
0000000000014542         je         loc_14645

0000000000014548         cmp        ecx, 0x1
000000000001454b         jle        loc_1513d

                     loc_14551:
0000000000014551         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+796
0000000000014554         call       build_wcs_upper_buffer                      ; build_wcs_upper_buffer
0000000000014559         test       eax, eax
000000000001455b         jne        loc_145a0

000000000001455d         mov        rax, qword [rsp+0x158+var_158]
0000000000014561         cmp        rax, qword [rsp+0x158+var_A0]
0000000000014569         jle        loc_15120

000000000001456f         movsxd     rax, dword [rbx+0xb4]
0000000000014576         mov        rsi, qword [rsp+0x158+var_98]
000000000001457e         add        rax, qword [rsp+0x158+var_A8]
0000000000014586         cmp        rsi, rax
0000000000014589         jg         loc_15120

000000000001458f         add        rsi, rsi
0000000000014592         mov        rdi, rbp
0000000000014595         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
000000000001459a         test       eax, eax
000000000001459c         je         loc_14551

000000000001459e         nop

                     loc_145a0:
00000000000145a0         mov        dword [rsp+0x158+var_10C], eax              ; CODE XREF=re_compile_internal+731, re_compile_internal+1652, re_compile_internal+1679, re_compile_internal+1764, sub_14c00+177, sub_14c00+495
00000000000145a4         mov        rax, qword [rsp+0x158+var_150]
00000000000145a9         mov        r13, qword [rax]

                     loc_145ac:
00000000000145ac         mov        rdi, qword [r13+0x70]                       ; CODE XREF=sub_14c00+1013, sub_14c00+1378, sub_15210+124, sub_15210+155
00000000000145b0         test       rdi, rdi
00000000000145b3         je         loc_145c8

00000000000145b5         nop        dword [rax]

                     loc_145b8:
00000000000145b8         mov        r12, qword [rdi]                            ; CODE XREF=re_compile_internal+838
00000000000145bb         call       j_free                                      ; free
00000000000145c0         test       r12, r12
00000000000145c3         mov        rdi, r12
00000000000145c6         jne        loc_145b8

                     loc_145c8:
00000000000145c8         mov        rdi, qword [r13+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=re_compile_internal+819
00000000000145cc         mov        qword [r13+0x70], 0x0
00000000000145d4         mov        dword [r13+0x80], 0xf
00000000000145df         mov        qword [r13+0x68], 0x0
00000000000145e7         call       j_free                                      ; free
00000000000145ec         mov        qword [r13+0x20], 0x0
00000000000145f4         mov        rdi, rbp
00000000000145f7         call       re_string_destruct                          ; re_string_destruct

                     loc_145fc:
00000000000145fc         mov        rdi, rbx                                    ; CODE XREF=re_compile_internal+1806, sub_14c00+1000
00000000000145ff         call       free_dfa_content                            ; free_dfa_content
0000000000014604         mov        rax, qword [rsp+0x158+var_150]
0000000000014609         mov        qword [rax], 0x0
0000000000014610         mov        qword [rax+8], 0x0
0000000000014618         mov        eax, dword [rsp+0x158+var_10C]

                     loc_1461c:
000000000001461c         mov        rbx, qword [rsp+0x158+var_40]               ; CODE XREF=sub_14c00+994, sub_15210+134
0000000000014624         xor        rbx, qword [fs:0x28]
000000000001462d         jne        loc_15370

0000000000014633         add        rsp, 0x128
000000000001463a         pop        rbx
000000000001463b         pop        rbp
000000000001463c         pop        r12
000000000001463e         pop        r13
0000000000014640         pop        r14
0000000000014642         pop        r15
0000000000014644         ret
                        ; endp

                     loc_14645:
0000000000014645         cmp        ecx, 0x1                                    ; CODE XREF=re_compile_internal+706
0000000000014648         jg         loc_14ffa

000000000001464e         test       r12b, r12b
0000000000014651         mov        rsi, qword [rsp+0x158+var_98]
0000000000014659         je         loc_14c74

000000000001465f         cmp        qword [rsp+0x158+var_80], rsi
0000000000014667         mov        rax, qword [rsp+0x158+var_A8]
000000000001466f         cmovle     rsi, qword [rsp+0x158+var_80]
0000000000014678         cmp        rsi, rax
000000000001467b         jg         loc_1468d

000000000001467d         jmp        loc_146c0
000000000001467f         align      128

                     loc_14680:
0000000000014680         mov        rdx, qword [rsp+0x158+var_D0]               ; CODE XREF=re_compile_internal+1086
0000000000014688         mov        qword [rsp+0x158+var_148], rdx

                     loc_1468d:
000000000001468d         mov        rdx, qword [rsp+0x158+var_D8]               ; CODE XREF=re_compile_internal+1019
0000000000014695         mov        rcx, qword [rsp+0x158+var_60]
000000000001469d         add        rdx, rax
00000000000146a0         add        rdx, qword [rsp+0x158+var_B0]
00000000000146a8         movzx      edx, byte [rdx]
00000000000146ab         movzx      edx, byte [rcx+rdx]
00000000000146af         mov        rcx, qword [rsp+0x158+var_148]
00000000000146b4         mov        byte [rcx+rax], dl
00000000000146b7         add        rax, 0x1
00000000000146bb         cmp        rsi, rax
00000000000146be         jne        loc_14680

                     loc_146c0:
00000000000146c0         mov        qword [rsp+0x158+var_A8], rax               ; CODE XREF=re_compile_internal+1021
00000000000146c8         mov        qword [rsp+0x158+var_A0], rax
00000000000146d0         mov        dword [rsp+0x158+var_10C], 0x0

                     loc_146d8:
00000000000146d8         mov        r12, qword [rsp+0x158+var_150]              ; CODE XREF=sub_14c00+140, sub_14c00+1034, sub_14c00+1320, sub_14c00+1357
00000000000146dd         mov        r14, qword [rsp+0x158+var_140]
00000000000146e2         lea        r13, qword [rsp+0x158+var_108]
00000000000146e7         mov        rsi, rbp
00000000000146ea         mov        rdi, r13
00000000000146ed         mov        qword [rsp+0x158+var_130], r13
00000000000146f2         mov        r15, qword [r12]
00000000000146f6         mov        rdx, r14
00000000000146f9         mov        qword [r12+0x30], 0x0
0000000000014702         or         rdx, 0x800000
0000000000014709         mov        qword [r15+0xd8], r14
0000000000014710         call       peek_token                                  ; peek_token
0000000000014715         lea        r9, qword [rsp+0x158+var_10C]
000000000001471a         xor        r8d, r8d
000000000001471d         mov        rcx, r14
0000000000014720         mov        rdx, r13
0000000000014723         mov        rsi, r12
0000000000014726         mov        rdi, rbp
0000000000014729         cdqe
000000000001472b         add        qword [rsp+0x158+var_90], rax
0000000000014733         call       parse_reg_exp                               ; parse_reg_exp
0000000000014738         mov        ecx, dword [rsp+0x158+var_10C]
000000000001473c         test       ecx, ecx
000000000001473e         jne        loc_15167

0000000000014744         lea        r13, qword [r15+0x70]
0000000000014748         lea        r12, qword [rsp+0x158+var_F8]
000000000001474d         sub        r15, 0xffffffffffffff80
0000000000014751         xor        edx, edx
0000000000014753         xor        ecx, ecx
0000000000014755         mov        rsi, r15
0000000000014758         mov        r8, r12
000000000001475b         mov        rdi, r13
000000000001475e         mov        qword [rsp+0x158+var_158], rax
0000000000014762         mov        byte [rsp+0x158+var_F0], 0x2
0000000000014767         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001476c         mov        r9, qword [rsp+0x158+var_158]
0000000000014770         mov        r11, rax
0000000000014773         mov        rdx, rax
0000000000014776         test       r9, r9
0000000000014779         je         loc_147a2

                     loc_1477b:
000000000001477b         mov        rcx, r11                                    ; CODE XREF=sub_14c00+1439
000000000001477e         mov        rdx, r9
0000000000014781         mov        r8, r12
0000000000014784         mov        rsi, r15
0000000000014787         mov        rdi, r13
000000000001478a         mov        qword [rsp+0x158+var_158], r11
000000000001478e         mov        byte [rsp+0x158+var_F0], 0x10
0000000000014793         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000014798         mov        r11, qword [rsp+0x158+var_158]
000000000001479c         mov        rdx, r11
000000000001479f         mov        r11, rax

                     loc_147a2:
00000000000147a2         test       rdx, rdx                                    ; CODE XREF=re_compile_internal+1273
00000000000147a5         mov        rcx, qword [rsp+0x158+var_150]
00000000000147aa         sete       dl
00000000000147ad         test       r11, r11
00000000000147b0         sete       al
00000000000147b3         or         dl, al
00000000000147b5         mov        r13, qword [rcx]
00000000000147b8         jne        loc_15152

00000000000147be         mov        r15, qword [r13+8]
00000000000147c2         mov        qword [rbx+0x68], r11
00000000000147c6         lea        rcx, qword [r15*8]
00000000000147ce         lea        r15, qword [r15+r15*2]
00000000000147d2         mov        rdi, rcx                                    ; argument "__size" for method j_malloc
00000000000147d5         mov        qword [rsp+0x158+var_158], rcx
00000000000147d9         shl        r15, 0x3
00000000000147dd         call       j_malloc                                    ; malloc
00000000000147e2         mov        rcx, qword [rsp+0x158+var_158]
00000000000147e6         mov        qword [r13+0x18], rax
00000000000147ea         mov        qword [rsp+0x158+var_140], rax
00000000000147ef         mov        rdi, rcx                                    ; argument "__size" for method j_malloc
00000000000147f2         call       j_malloc                                    ; malloc
00000000000147f7         mov        rdi, r15                                    ; argument "__size" for method j_malloc
00000000000147fa         mov        qword [r13+0x20], rax
00000000000147fe         mov        qword [rsp+0x158+var_148], rax
0000000000014803         call       j_malloc                                    ; malloc
0000000000014808         mov        rdi, r15                                    ; argument "__size" for method j_malloc
000000000001480b         mov        qword [r13+0x28], rax
000000000001480f         mov        qword [rsp+0x158+var_158], rax
0000000000014813         call       j_malloc                                    ; malloc
0000000000014818         mov        rdx, qword [rsp+0x158+var_140]
000000000001481d         mov        qword [r13+0x30], rax
0000000000014821         mov        rsi, qword [rsp+0x158+var_158]
0000000000014825         mov        rcx, qword [rsp+0x158+var_148]
000000000001482a         test       rdx, rdx
000000000001482d         je         loc_14fed

0000000000014833         test       rcx, rcx
0000000000014836         je         loc_14fed

000000000001483c         test       rsi, rsi
000000000001483f         je         loc_14fed

0000000000014845         test       rax, rax
0000000000014848         je         loc_14fed

000000000001484e         mov        rax, qword [rsp+0x158+var_150]
0000000000014853         mov        r15, qword [rax+0x30]
0000000000014857         lea        rdi, qword [r15*8]                          ; argument "__size" for method j_malloc
000000000001485f         call       j_malloc                                    ; malloc
0000000000014864         test       rax, rax
0000000000014867         mov        qword [r13+0xe0], rax
000000000001486e         je         loc_148dd

0000000000014870         test       r15, r15
0000000000014873         je         loc_1488d

0000000000014875         xor        edx, edx
0000000000014877         nop        word [rax+rax]

                     loc_14880:
0000000000014880         mov        qword [rax+rdx*8], rdx                      ; CODE XREF=re_compile_internal+1547
0000000000014884         add        rdx, 0x1
0000000000014888         cmp        rdx, r15
000000000001488b         jne        loc_14880

                     loc_1488d:
000000000001488d         mov        rdi, qword [r13+0x68]                       ; CODE XREF=re_compile_internal+1523
0000000000014891         lea        rsi, qword [optimize_subexps]               ; optimize_subexps
0000000000014898         mov        rdx, r13
000000000001489b         call       preorder                                    ; preorder
00000000000148a0         mov        rax, qword [rsp+0x158+var_150]
00000000000148a5         mov        rdi, qword [r13+0xe0]
00000000000148ac         mov        rdx, qword [rax+0x30]
00000000000148b0         test       rdx, rdx
00000000000148b3         je         loc_151a4

00000000000148b9         mov        rax, qword [rdi]
00000000000148bc         test       rax, rax
00000000000148bf         je         loc_148ce

00000000000148c1         jmp        loc_148dd
00000000000148c3         align      8

                     loc_148c8:
00000000000148c8         cmp        qword [rdi+rax*8], rax                      ; CODE XREF=re_compile_internal+1621
00000000000148cc         jne        loc_148dd

                     loc_148ce:
00000000000148ce         add        rax, 0x1                                    ; CODE XREF=re_compile_internal+1599
00000000000148d2         cmp        rdx, rax
00000000000148d5         ja         loc_148c8

00000000000148d7         je         loc_151a4

                     loc_148dd:
00000000000148dd         mov        rdi, qword [r13+0x68]                       ; CODE XREF=re_compile_internal+1518, re_compile_internal+1601, re_compile_internal+1612, sub_14c00+1460
00000000000148e1         mov        rdx, qword [rsp+0x158+var_150]
00000000000148e6         lea        rsi, qword [lower_subexps]                  ; lower_subexps
00000000000148ed         call       postorder                                   ; postorder
00000000000148f2         test       eax, eax
00000000000148f4         jne        loc_145a0

00000000000148fa         mov        rdi, qword [r13+0x68]
00000000000148fe         lea        rsi, qword [calc_first]                     ; calc_first
0000000000014905         mov        rdx, r13
0000000000014908         call       postorder                                   ; postorder
000000000001490d         test       eax, eax
000000000001490f         jne        loc_145a0

0000000000014915         mov        rdi, qword [r13+0x68]
0000000000014919         lea        rsi, qword [calc_next]                      ; calc_next
0000000000014920         mov        rdx, r13
0000000000014923         call       preorder                                    ; preorder
0000000000014928         mov        rdx, qword [r13+0x68]
000000000001492c         lea        rsi, qword [switch_table_17b34+20]          ; 0x17b48
0000000000014933         nop        dword [rax+rax]

                     loc_14938:
0000000000014938         movzx      ecx, byte [rdx+0x30]                        ; CODE XREF=re_compile_internal+1983
000000000001493c         mov        rdi, qword [rdx+0x38]
0000000000014940         cmp        cl, 0x10
0000000000014943         ja         loc_14a18

0000000000014949         movzx      eax, cl
000000000001494c         movsxd     rax, dword [rsi+rax*4]
0000000000014950         add        rax, rsi
0000000000014953         jmp        rax
                        ; endp

                     loc_14955:
0000000000014955         mov        rsi, qword [rsp+0x158+var_130]              ; CODE XREF=re_compile_internal+663
000000000001495a         mov        rdi, rbp
000000000001495d         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
0000000000014962         test       eax, eax
0000000000014964         jne        loc_145a0

000000000001496a         movzx      esi, byte [rsp+0x158+var_4D]
0000000000014972         mov        ecx, dword [rbx+0xb4]
0000000000014978         test       sil, sil
000000000001497b         je         loc_1452f

0000000000014981         jmp        loc_14522

                     loc_14986:
0000000000014986         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+197, re_compile_internal+450, re_compile_internal+461, re_compile_internal+1833
000000000001498e         jmp        loc_145fc

                     loc_14993:
0000000000014993         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_compile_internal+429
0000000000014998         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
000000000001499d         call       j_calloc                                    ; calloc
00000000000149a2         test       rax, rax
00000000000149a5         mov        qword [rbx+0x78], rax
00000000000149a9         je         loc_14986

00000000000149ab         xor        r12d, r12d
00000000000149ae         xor        ebp, ebp
00000000000149b0         mov        r13d, 0x1

                     loc_149b6:
00000000000149b6         xor        r15d, r15d                                  ; CODE XREF=re_compile_internal+1937
00000000000149b9         nop        dword [rax]

                     loc_149c0:
00000000000149c0         lea        r14d, dword [rbp+r15]                       ; CODE XREF=re_compile_internal+1922
00000000000149c5         mov        edi, r14d                                   ; argument "__c" for method j_btowc
00000000000149c8         call       j_btowc                                     ; btowc
00000000000149cd         cmp        eax, 0xffffffff
00000000000149d0         je         loc_149e5

00000000000149d2         mov        rsi, qword [rbx+0x78]
00000000000149d6         mov        rdi, r13
00000000000149d9         mov        ecx, r15d
00000000000149dc         shl        rdi, cl
00000000000149df         add        rsi, r12
00000000000149e2         or         qword [rsi], rdi

                     loc_149e5:
00000000000149e5         test       r14d, 0xffffff80                            ; CODE XREF=re_compile_internal+1872
00000000000149ec         jne        loc_149fa

00000000000149ee         cmp        eax, r14d
00000000000149f1         je         loc_149fa

00000000000149f3         or         byte [rbx+0xb0], 0x8

                     loc_149fa:
00000000000149fa         add        r15, 0x1                                    ; CODE XREF=re_compile_internal+1900, re_compile_internal+1905
00000000000149fe         cmp        r15, 0x40
0000000000014a02         jne        loc_149c0

0000000000014a04         add        ebp, 0x40
0000000000014a07         add        r12, 0x8
0000000000014a0b         cmp        ebp, 0x100
0000000000014a11         jne        loc_149b6

0000000000014a13         jmp        loc_1443e

                     loc_14a18:
0000000000014a18         and        ecx, 0x8                                    ; CODE XREF=re_compile_internal+1731
0000000000014a1b         jne        loc_15332

0000000000014a21         mov        rax, qword [rdx+0x20]
0000000000014a25         mov        rcx, qword [rax+0x38]
0000000000014a29         mov        rax, qword [r13+0x18]
0000000000014a2d         mov        qword [rax+rdi*8], rcx
0000000000014a31         mov        r15, qword [rdx+8]
0000000000014a35         xor        edi, edi                                    ; CODE XREF=sub_14b30+155
0000000000014a37         test       r15, r15
0000000000014a3a         je         loc_14a4b

                     loc_14a3c:
0000000000014a3c         mov        rdx, r15                                    ; CODE XREF=re_compile_internal+2017
0000000000014a3f         jmp        loc_14938
0000000000014a44         align      8

                     loc_14a48:
0000000000014a48         mov        rdx, rax                                    ; CODE XREF=re_compile_internal+2028

                     loc_14a4b:
0000000000014a4b         mov        r15, qword [rdx+0x10]                       ; CODE XREF=re_compile_internal+1978
0000000000014a4f         test       r15, r15
0000000000014a52         sete       cl
0000000000014a55         cmp        r15, rdi
0000000000014a58         sete       al
0000000000014a5b         or         cl, al
0000000000014a5d         mov        byte [rsp+0x158+var_148], cl
0000000000014a61         je         loc_14a3c

0000000000014a63         mov        rax, qword [rdx]
0000000000014a66         mov        rdi, rdx
0000000000014a69         test       rax, rax
0000000000014a6c         jne        loc_14a48

0000000000014a6e         xor        r14d, r14d
0000000000014a71         xor        r15d, r15d
0000000000014a74         nop        dword [rax]

                     loc_14a78:
0000000000014a78         mov        rdx, qword [r13+0x10]                       ; CODE XREF=sub_14c00+201
0000000000014a7c         cmp        rdx, r15
0000000000014a7f         je         loc_14aa6

                     loc_14a81:
0000000000014a81         lea        r10, qword [r15+r15*2]                      ; CODE XREF=re_compile_internal+2084, re_compile_internal+2101, sub_14c00+233
0000000000014a85         mov        rax, qword [r13+0x30]
0000000000014a89         shl        r10, 0x3
0000000000014a8d         cmp        qword [rax+r10+8], 0x0
0000000000014a93         je         loc_14c98

0000000000014a99         mov        rdx, qword [r13+0x10]
0000000000014a9d         add        r15, 0x1
0000000000014aa1         cmp        rdx, r15
0000000000014aa4         jne        loc_14a81

                     loc_14aa6:
0000000000014aa6         test       r14b, r14b                                  ; CODE XREF=re_compile_internal+2047
0000000000014aa9         je         loc_14cee

                     loc_14aaf:
0000000000014aaf         xor        r14d, r14d                                  ; CODE XREF=sub_14c00+221
0000000000014ab2         xor        r15d, r15d
0000000000014ab5         jmp        loc_14a81
0000000000014ab7         or         byte [r13+0xb0], 0x1
0000000000014abf         mov        r15, qword [rdx+8]
0000000000014ac3         test       r15, r15
0000000000014ac6         je         sub_14c00+1241
0000000000014acc         mov        rax, qword [r15+0x18]
0000000000014ad0         mov        rcx, qword [rax+0x38]
0000000000014ad4         mov        rax, qword [rdx+0x10]                       ; CODE XREF=sub_14c00+1249
0000000000014ad8         test       rax, rax
0000000000014adb         je         sub_14c00+1228
0000000000014ae1         mov        rax, qword [rax+0x18]
0000000000014ae5         mov        r9, qword [rax+0x38]
0000000000014ae9         test       rcx, rcx                                    ; CODE XREF=sub_14c00+1236
0000000000014aec         js         sub_152b0+161
0000000000014af2         test       r9, r9
0000000000014af5         js         sub_152b0+99
0000000000014afb         mov        rax, qword [r13+0x28]
0000000000014aff         lea        rdi, qword [rdi+rdi*2]
0000000000014b03         mov        qword [rsp+0x38], rsi
0000000000014b08         mov        qword [rsp+0x30], r9
0000000000014b0d         mov        qword [rsp+0x18], rcx
0000000000014b12         mov        qword [rsp+0x10], rdx
0000000000014b17         lea        r10, qword [rax+rdi*8]
0000000000014b1b         mov        edi, 0x10
0000000000014b20         mov        qword [r10], 0x2
0000000000014b27         mov        qword [rsp], r10
0000000000014b2b         call       j_malloc                                    ; malloc


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14b30:
0000000000014b30         mov        r10, qword [rsp+0]
0000000000014b34         test       rax, rax
0000000000014b37         mov        rdx, qword [rsp+16]
0000000000014b3c         mov        rcx, qword [rsp+24]
0000000000014b41         mov        r9, qword [rsp+48]
0000000000014b46         mov        rsi, qword [rsp+56]
0000000000014b4b         mov        qword [r10+0x10], rax
0000000000014b4f         je         sub_14c00+490

0000000000014b55         cmp        rcx, r9
0000000000014b58         je         loc_1512d

0000000000014b5e         mov        qword [r10+8], 0x2
0000000000014b66         jl         loc_15114

0000000000014b6c         mov        qword [rax], r9
0000000000014b6f         mov        qword [rax+8], rcx
0000000000014b73         jmp        re_compile_internal+1973
                        ; endp
0000000000014b78         mov        rax, qword [rdx+0x20]
0000000000014b7c         lea        rcx, qword [rdi+rdi*2]
0000000000014b80         mov        edi, 0x8
0000000000014b85         mov        qword [rsp+0x10], rsi
0000000000014b8a         mov        qword [rsp], rdx
0000000000014b8e         mov        r14, qword [rax+0x38]
0000000000014b92         mov        rax, qword [r13+0x28]
0000000000014b96         lea        r15, qword [rax+rcx*8]
0000000000014b9a         mov        qword [r15], 0x1
0000000000014ba1         mov        qword [r15+8], 0x1
0000000000014ba9         call       j_malloc                                    ; malloc
0000000000014bae         test       rax, rax
0000000000014bb1         mov        qword [r15+0x10], rax
0000000000014bb5         mov        rdx, qword [rsp]
0000000000014bb9         mov        rsi, qword [rsp+0x10]
0000000000014bbe         je         sub_15210+88
0000000000014bc4         mov        qword [rax], r14
0000000000014bc7         mov        r15, qword [rdx+8]
0000000000014bcb         jmp        re_compile_internal+1973


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14bd0:
0000000000014bd0         cmp        qword [rdx+0x20], 0x0
0000000000014bd5         je         re_compile_internal+1969

0000000000014bdb         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; argument "__function" for method j___assert_fail, "link_nfa_nodes"
0000000000014be2         lea        rsi, qword [aCoreutils831li_17628]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
0000000000014be9         lea        rdi, qword [aNodenextNull]                  ; argument "__assertion" for method j___assert_fail, "node->next == NULL"
0000000000014bf0         mov        edx, 0x59f                                  ; argument "__line" for method j___assert_fail
0000000000014bf5         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000014bfa         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14c00:
0000000000014c00         mov        rax, qword [rdx+0x20]
0000000000014c04         mov        r15, qword [rax+0x38]
0000000000014c08         mov        rax, qword [r13+0x18]
0000000000014c0c         mov        qword [rax+rdi*8], r15
0000000000014c10         cmp        byte [rdx+0x30], 0x4
0000000000014c14         jne        re_compile_internal+1969

0000000000014c1a         mov        rax, qword [r13+0x28]
0000000000014c1e         lea        rcx, qword [rdi+rdi*2]
0000000000014c22         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
0000000000014c27         mov        qword [rsp+24], rsi
0000000000014c2c         mov        qword [rsp+16], rdx
0000000000014c31         lea        rcx, qword [rax+rcx*8]
0000000000014c35         mov        qword [rcx], 0x1
0000000000014c3c         mov        qword [rcx+8], 0x1
0000000000014c44         mov        qword [rsp+0], rcx
0000000000014c48         call       j_malloc                                    ; malloc
0000000000014c4d         mov        rcx, qword [rsp+0]
0000000000014c51         test       rax, rax
0000000000014c54         mov        rdx, qword [rsp+16]
0000000000014c59         mov        rsi, qword [rsp+24]
0000000000014c5e         mov        qword [rcx+0x10], rax
0000000000014c62         je         sub_152b0                                   ; sub_152b0

0000000000014c68         mov        qword [rax], r15
0000000000014c6b         mov        r15, qword [rdx+8]
0000000000014c6f         jmp        re_compile_internal+1973
                        ; endp

                     loc_14c74:
0000000000014c74         mov        qword [rsp+0x158+var_A8], rsi               ; CODE XREF=re_compile_internal+985
0000000000014c7c         mov        qword [rsp+0x158+var_A0], rsi
0000000000014c84         mov        dword [rsp+0x158+var_10C], 0x0
0000000000014c8c         jmp        loc_146d8
0000000000014c91         align      8

                     loc_14c98:
0000000000014c98         mov        ecx, 0x1                                    ; CODE XREF=re_compile_internal+2067
0000000000014c9d         mov        rdx, r15
0000000000014ca0         mov        rsi, r13
0000000000014ca3         mov        rdi, r12
0000000000014ca6         mov        qword [rsp+0x158+var_158], r10
0000000000014caa         call       calc_eclosure_iter                          ; calc_eclosure_iter
0000000000014caf         test       eax, eax
0000000000014cb1         jne        loc_145a0

0000000000014cb7         mov        rax, qword [r13+0x30]
0000000000014cbb         mov        r10, qword [rsp+0x158+var_158]
0000000000014cbf         add        r15, 0x1
0000000000014cc3         cmp        qword [rax+r10+8], 0x0
0000000000014cc9         jne        loc_14a78

0000000000014ccf         mov        rdi, qword [rsp+0x158+var_E8]               ; argument "__ptr" for method j_free
0000000000014cd4         call       j_free                                      ; free
0000000000014cd9         cmp        qword [r13+0x10], r15
0000000000014cdd         je         loc_14aaf

0000000000014ce3         movzx      r14d, byte [rsp+0x158+var_148]
0000000000014ce9         jmp        loc_14a81

                     loc_14cee:
0000000000014cee         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=re_compile_internal+2089
0000000000014cf3         test       byte [rax+0x38], 0x10
0000000000014cf7         jne        loc_14d0a

0000000000014cf9         cmp        qword [rax+0x30], 0x0
0000000000014cfe         je         loc_14d0a

0000000000014d00         test       byte [r13+0xb0], 0x1
0000000000014d08         jne        loc_14d18

                     loc_14d0a:
0000000000014d0a         cmp        qword [r13+0x98], 0x0                       ; CODE XREF=sub_14c00+247, sub_14c00+254
0000000000014d12         je         loc_14e0b

                     loc_14d18:
0000000000014d18         lea        rdi, qword [rdx+rdx*2]                      ; CODE XREF=sub_14c00+264
0000000000014d1c         mov        qword [rsp+0x158+var_158], rdx
0000000000014d20         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
0000000000014d24         call       j_malloc                                    ; malloc
0000000000014d29         test       rax, rax
0000000000014d2c         mov        qword [r13+0x38], rax
0000000000014d30         je         loc_1527c

0000000000014d36         mov        rdx, qword [rsp+0x158+var_158]
0000000000014d3a         xor        esi, esi
0000000000014d3c         xor        ecx, ecx
0000000000014d3e         test       rdx, rdx
0000000000014d41         jne        loc_14d54

0000000000014d43         jmp        loc_14e0b
0000000000014d48         align      16

                     loc_14d50:
0000000000014d50         mov        rax, qword [r13+0x38]                       ; CODE XREF=sub_14c00+373

                     loc_14d54:
0000000000014d54         pxor       xmm0, xmm0                                  ; CODE XREF=sub_14c00+321
0000000000014d58         add        rax, rsi
0000000000014d5b         add        rcx, 0x1
0000000000014d5f         mov        qword [rax+0x10], 0x0
0000000000014d67         add        rsi, 0x18
0000000000014d6b         movups     xmmword [rax], xmm0
0000000000014d6e         mov        rax, qword [r13+0x10]
0000000000014d72         cmp        rcx, rax
0000000000014d75         jb         loc_14d50

0000000000014d77         test       rax, rax
0000000000014d7a         je         loc_14e0b

0000000000014d80         mov        rax, qword [r13+0x30]
0000000000014d84         mov        qword [rsp+0x158+var_140], 0x0
0000000000014d8d         mov        qword [rsp+0x158+var_148], 0x0

                     loc_14d96:
0000000000014d96         mov        rcx, qword [rsp+0x158+var_140]              ; CODE XREF=sub_14c00+521
0000000000014d9b         lea        rdx, qword [rax+rcx]
0000000000014d9f         cmp        qword [rdx+8], 0x0
0000000000014da4         mov        rcx, qword [rdx+0x10]
0000000000014da8         jle        loc_14df4

0000000000014daa         xor        r15d, r15d
0000000000014dad         jmp        loc_14dc8
0000000000014daf         align      16

                     loc_14db0:
0000000000014db0         mov        rax, qword [r13+0x30]                       ; CODE XREF=sub_14c00+488
0000000000014db4         mov        rdx, qword [rsp+0x158+var_140]
0000000000014db9         add        r15, 0x1
0000000000014dbd         mov        rcx, qword [rsp+0x158+var_158]
0000000000014dc1         cmp        r15, qword [rax+rdx+8]
0000000000014dc6         jge        loc_14df4

                     loc_14dc8:
0000000000014dc8         mov        rax, qword [rcx+r15*8]                      ; CODE XREF=sub_14c00+429
0000000000014dcc         mov        qword [rsp+0x158+var_158], rcx
0000000000014dd0         lea        rsi, qword [rax+rax*2]
0000000000014dd4         mov        rax, qword [r13+0x38]
0000000000014dd8         lea        rdi, qword [rax+rsi*8]
0000000000014ddc         mov        rsi, qword [rsp+0x158+var_148]
0000000000014de1         call       re_node_set_insert_last                     ; re_node_set_insert_last
0000000000014de6         test       al, al
0000000000014de8         jne        loc_14db0

0000000000014dea         mov        eax, 0xc                                    ; CODE XREF=sub_15210+103
0000000000014def         jmp        loc_145a0

                     loc_14df4:
0000000000014df4         add        qword [rsp+0x158+var_148], 0x1              ; CODE XREF=sub_14c00+424, sub_14c00+454
0000000000014dfa         add        qword [rsp+0x158+var_140], 0x18
0000000000014e00         mov        rdx, qword [rsp+0x158+var_148]
0000000000014e05         cmp        rdx, qword [r13+0x10]
0000000000014e09         jb         loc_14d96

                     loc_14e0b:
0000000000014e0b         movzx      eax, byte [rbx+0xb0]                        ; CODE XREF=sub_14c00+274, sub_14c00+323, sub_14c00+378
0000000000014e12         mov        dword [rsp+0x158+var_10C], 0x0
0000000000014e1a         shr        al, 0x2
0000000000014e1d         cmp        qword [rsp+0x158+var_138], 0x0
0000000000014e23         sete       dl
0000000000014e26         and        al, dl
0000000000014e28         jne        loc_1500f

                     loc_14e2e:
0000000000014e2e         mov        rax, qword [rbx+0x68]                       ; CODE XREF=sub_14c00+1049, sub_15210+32, sub_15210+48, sub_15210+65, sub_152b0+34, sub_152b0+89
0000000000014e32         mov        rdi, r12
0000000000014e35         mov        rax, qword [rax+0x18]
0000000000014e39         mov        rax, qword [rax+0x38]
0000000000014e3d         lea        rdx, qword [rax+rax*2]
0000000000014e41         mov        qword [rbx+0x90], rax
0000000000014e48         mov        rax, qword [rbx+0x30]
0000000000014e4c         lea        rsi, qword [rax+rdx*8]
0000000000014e50         call       re_node_set_init_copy                       ; re_node_set_init_copy
0000000000014e55         test       eax, eax
0000000000014e57         mov        r15d, eax
0000000000014e5a         mov        dword [rsp+0x158+var_108], eax
0000000000014e5e         jne        loc_14f7f

0000000000014e64         cmp        qword [rbx+0x98], 0x0
0000000000014e6c         jle        loc_14f40

0000000000014e72         mov        r9, qword [rsp+0x158+var_F0]
0000000000014e77         test       r9, r9
0000000000014e7a         jle        loc_14f40

0000000000014e80         xor        r10d, r10d
0000000000014e83         lea        r13, qword [r12+0x10]
0000000000014e88         jmp        loc_14e9d
0000000000014e8a         align      16

                     loc_14e90:
0000000000014e90         add        r10, 0x1                                    ; CODE XREF=sub_14c00+695, sub_14c00+711, sub_14c00+774
0000000000014e94         cmp        r9, r10
0000000000014e97         jle        loc_14f40

                     loc_14e9d:
0000000000014e9d         mov        rcx, qword [rsp+0x158+var_E8]               ; CODE XREF=sub_14c00+648, sub_14c00+818
0000000000014ea2         mov        rsi, qword [rbx]
0000000000014ea5         mov        r8, qword [rcx+r10*8]
0000000000014ea9         mov        rdi, r8
0000000000014eac         shl        rdi, 0x4
0000000000014eb0         add        rdi, rsi
0000000000014eb3         cmp        byte [rdi+8], 0x4
0000000000014eb7         jne        loc_14e90

0000000000014eb9         xor        edx, edx
0000000000014ebb         jmp        loc_14ec9
0000000000014ebd         align      64

                     loc_14ec0:
0000000000014ec0         add        rdx, 0x1                                    ; CODE XREF=sub_14c00+728, sub_14c00+736
0000000000014ec4         cmp        r9, rdx
0000000000014ec7         je         loc_14e90

                     loc_14ec9:
0000000000014ec9         mov        rax, qword [rcx+rdx*8]                      ; CODE XREF=sub_14c00+699
0000000000014ecd         shl        rax, 0x4
0000000000014ed1         add        rax, rsi
0000000000014ed4         cmp        byte [rax+8], 0x9
0000000000014ed8         jne        loc_14ec0

0000000000014eda         mov        r11, qword [rdi]
0000000000014edd         cmp        qword [rax], r11
0000000000014ee0         jne        loc_14ec0

0000000000014ee2         mov        rdx, qword [rbx+0x28]
0000000000014ee6         lea        rax, qword [r8+r8*2]
0000000000014eea         mov        rsi, r13
0000000000014eed         mov        rdi, r9
0000000000014ef0         lea        rax, qword [rdx+rax*8]
0000000000014ef4         mov        rax, qword [rax+0x10]
0000000000014ef8         mov        r11, qword [rax]
0000000000014efb         mov        rdx, r11
0000000000014efe         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000014f03         test       rax, rax
0000000000014f06         jne        loc_14e90

0000000000014f08         mov        rax, qword [rbx+0x30]
0000000000014f0c         lea        rdx, qword [r11+r11*2]
0000000000014f10         mov        rdi, r12
0000000000014f13         lea        rsi, qword [rax+rdx*8]
0000000000014f17         call       re_node_set_merge                           ; re_node_set_merge
0000000000014f1c         test       eax, eax
0000000000014f1e         jne        loc_15260

0000000000014f24         mov        r9, qword [rsp+0x158+var_F0]
0000000000014f29         mov        r10d, 0x1
0000000000014f2f         cmp        r9, r10
0000000000014f32         jg         loc_14e9d

0000000000014f38         nop        dword [rax+rax]

                     loc_14f40:
0000000000014f40         mov        rdi, qword [rsp+0x158+var_130]              ; CODE XREF=sub_14c00+620, sub_14c00+634, sub_14c00+663
0000000000014f45         xor        ecx, ecx
0000000000014f47         mov        rdx, r12
0000000000014f4a         mov        rsi, rbx
0000000000014f4d         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000014f52         test       rax, rax
0000000000014f55         mov        qword [rbx+0x48], rax
0000000000014f59         je         loc_150c2

0000000000014f5f         cmp        byte [rax+0x68], 0x0
0000000000014f63         js         loc_15061

0000000000014f69         mov        qword [rbx+0x60], rax
0000000000014f6d         mov        qword [rbx+0x58], rax
0000000000014f71         mov        qword [rbx+0x50], rax

                     loc_14f75:
0000000000014f75         mov        rdi, qword [rsp+0x158+var_E8]               ; argument "__ptr" for method j_free, CODE XREF=sub_14c00+1212
0000000000014f7a         call       j_free                                      ; free

                     loc_14f7f:
0000000000014f7f         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_14c00+606, sub_14c00+1223, sub_15210+83
0000000000014f84         mov        dword [rsp+0x158+var_10C], r15d
0000000000014f89         mov        r13, qword [rax]
0000000000014f8c         mov        rdi, qword [r13+0x70]
0000000000014f90         test       rdi, rdi
0000000000014f93         je         loc_14fa8

0000000000014f95         nop        dword [rax]

                     loc_14f98:
0000000000014f98         mov        r12, qword [rdi]                            ; CODE XREF=sub_14c00+934
0000000000014f9b         call       j_free                                      ; free
0000000000014fa0         test       r12, r12
0000000000014fa3         mov        rdi, r12
0000000000014fa6         jne        loc_14f98

                     loc_14fa8:
0000000000014fa8         mov        rdi, qword [r13+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=sub_14c00+915
0000000000014fac         mov        qword [r13+0x70], 0x0
0000000000014fb4         mov        dword [r13+0x80], 0xf
0000000000014fbf         mov        qword [r13+0x68], 0x0
0000000000014fc7         call       j_free                                      ; free
0000000000014fcc         mov        qword [r13+0x20], 0x0
0000000000014fd4         mov        rdi, rbp
0000000000014fd7         call       re_string_destruct                          ; re_string_destruct
0000000000014fdc         mov        eax, dword [rsp+0x158+var_10C]
0000000000014fe0         test       eax, eax
0000000000014fe2         je         loc_1461c

0000000000014fe8         jmp        loc_145fc

                     loc_14fed:
0000000000014fed         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+1453, re_compile_internal+1462, re_compile_internal+1471, re_compile_internal+1480
0000000000014ff5         jmp        loc_145ac

                     loc_14ffa:
0000000000014ffa         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+968
0000000000014ffd         call       build_wcs_buffer                            ; build_wcs_buffer
0000000000015002         mov        dword [rsp+0x158+var_10C], 0x0
000000000001500a         jmp        loc_146d8

                     loc_1500f:
000000000001500f         mov        rcx, qword [rsp+0x158+var_150]              ; CODE XREF=sub_14c00+552
0000000000015014         cmp        qword [rcx+0x28], 0x0
0000000000015019         jne        loc_14e2e

000000000001501f         mov        r10, qword [rbx+0x10]
0000000000015023         test       r10, r10
0000000000015026         je         loc_152da

000000000001502c         mov        rsi, qword [rbx]
000000000001502f         lea        r9, qword [switch_table_17b34+88]           ; 0x17b8c
0000000000015036         xor        r8d, r8d
0000000000015039         xor        edx, edx
000000000001503b         mov        rcx, rsi
000000000001503e         cmp        byte [rcx+8], 0xc
0000000000015042         ja         loc_1530e

0000000000015048         movzx      edi, byte [rcx+8]
000000000001504c         movsxd     rdi, dword [r9+rdi*4]
0000000000015050         add        rdi, r9
0000000000015053         jmp        rdi
                        ; endp

                     loc_15055:
0000000000015055         xor        ebp, ebp                                    ; CODE XREF=re_compile_internal+238
0000000000015057         mov        esi, 0x1
000000000001505c         jmp        loc_1438d

                     loc_15061:
0000000000015061         mov        r14, qword [rsp+0x158+var_130]              ; CODE XREF=sub_14c00+867
0000000000015066         mov        ecx, 0x1
000000000001506b         mov        rdx, r12
000000000001506e         mov        rsi, rbx
0000000000015071         mov        rdi, r14
0000000000015074         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000015079         mov        ecx, 0x2
000000000001507e         mov        rdx, r12
0000000000015081         mov        rsi, rbx
0000000000015084         mov        rdi, r14
0000000000015087         mov        qword [rbx+0x50], rax
000000000001508b         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000015090         mov        ecx, 0x6
0000000000015095         mov        qword [rbx+0x58], rax
0000000000015099         mov        rdx, r12
000000000001509c         mov        rsi, rbx
000000000001509f         mov        rdi, r14
00000000000150a2         call       re_acquire_state_context                    ; re_acquire_state_context
00000000000150a7         cmp        qword [rbx+0x50], 0x0
00000000000150ac         mov        qword [rbx+0x60], rax
00000000000150b0         je         loc_150c2

00000000000150b2         cmp        qword [rbx+0x58], 0x0
00000000000150b7         je         loc_150c2

00000000000150b9         test       rax, rax
00000000000150bc         jne        loc_14f75

                     loc_150c2:
00000000000150c2         mov        r15d, dword [rsp+0x158+var_108]             ; CODE XREF=sub_14c00+857, sub_14c00+1200, sub_14c00+1207
00000000000150c7         jmp        loc_14f7f
00000000000150cc         mov        rax, qword [rdx+0x20]                       ; CODE XREF=re_compile_internal+2139
00000000000150d0         mov        r9, qword [rax+0x38]
00000000000150d4         jmp        re_compile_internal+2153
00000000000150d9         mov        rax, qword [rdx+0x20]                       ; CODE XREF=re_compile_internal+2118
00000000000150dd         mov        rcx, qword [rax+0x38]
00000000000150e1         jmp        re_compile_internal+2132

                     loc_150e6:
00000000000150e6         mov        rdi, rbx                                    ; argument "__ptr" for method j_realloc, CODE XREF=re_compile_internal+108
00000000000150e9         mov        esi, 0xe8                                   ; argument "__size" for method j_realloc
00000000000150ee         call       j_realloc                                   ; realloc
00000000000150f3         test       rax, rax
00000000000150f6         mov        rbx, rax
00000000000150f9         je         loc_15291

00000000000150ff         mov        rax, qword [rsp+0x158+var_150]
0000000000015104         mov        qword [rax+8], 0xe8
000000000001510c         mov        qword [rax], rbx
000000000001510f         jmp        loc_142f2

                     loc_15114:
0000000000015114         mov        qword [rax], rcx                            ; CODE XREF=sub_14b30+54
0000000000015117         mov        qword [rax+8], r9
000000000001511b         jmp        re_compile_internal+1973
                        ; endp

                     loc_15120:
0000000000015120         mov        dword [rsp+0x158+var_10C], 0x0              ; CODE XREF=re_compile_internal+745, re_compile_internal+777
0000000000015128         jmp        loc_146d8

                     loc_1512d:
000000000001512d         mov        qword [r10+8], 0x1                          ; CODE XREF=sub_14b30+40
0000000000015135         mov        qword [rax], rcx
0000000000015138         jmp        re_compile_internal+1973
                        ; endp

                     loc_1513d:
000000000001513d         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+715
0000000000015140         call       build_upper_buffer                          ; build_upper_buffer
0000000000015145         mov        dword [rsp+0x158+var_10C], 0x0
000000000001514d         jmp        loc_146d8

                     loc_15152:
0000000000015152         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+1336
000000000001515a         mov        qword [rbx+0x68], 0x0
0000000000015162         jmp        loc_145ac

                     loc_15167:
0000000000015167         test       rax, rax                                    ; CODE XREF=re_compile_internal+1214
000000000001516a         je         loc_1529b

0000000000015170         lea        r13, qword [r15+0x70]
0000000000015174         lea        r12, qword [rsp+0x158+var_F8]
0000000000015179         sub        r15, 0xffffffffffffff80
000000000001517d         xor        ecx, ecx
000000000001517f         xor        edx, edx
0000000000015181         mov        rsi, r15
0000000000015184         mov        r8, r12
0000000000015187         mov        rdi, r13
000000000001518a         mov        qword [rsp+0x158+var_158], rax
000000000001518e         mov        byte [rsp+0x158+var_F0], 0x2
0000000000015193         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000015198         mov        r9, qword [rsp+0x158+var_158]
000000000001519c         mov        r11, rax
000000000001519f         jmp        loc_1477b

                     loc_151a4:
00000000000151a4         call       j_free                                      ; free, CODE XREF=re_compile_internal+1587, re_compile_internal+1623
00000000000151a9         mov        qword [r13+0xe0], 0x0
00000000000151b4         jmp        loc_148dd
00000000000151b9         mov        r8d, eax

                     loc_151bc:
00000000000151bc         add        rdx, 0x1                                    ; CODE XREF=sub_15210+7, sub_15210+14, sub_15210+25, sub_15210+30, sub_15210+59, sub_152b0+28
00000000000151c0         add        rcx, 0x10
00000000000151c4         cmp        rdx, r10
00000000000151c7         jne        sub_14c00+1086

00000000000151cd         or         r14b, r8b
00000000000151d0         je         sub_152b0+42

00000000000151d6         mov        rax, rdx
00000000000151d9         shl        rax, 0x4
00000000000151dd         add        rax, rsi
00000000000151e0         jmp        loc_151f8

                     loc_151e2:
00000000000151e2         cmp        dl, 0x5                                     ; CODE XREF=sub_14c00+1535
00000000000151e5         jne        loc_151eb

00000000000151e7         mov        byte [rsi+8], 0x7

                     loc_151eb:
00000000000151eb         add        rsi, 0x10                                   ; CODE XREF=sub_14c00+1509, sub_14c00+1540, sub_14c00+1546
00000000000151ef         cmp        rax, rsi
00000000000151f2         je         loc_152d7

                     loc_151f8:
00000000000151f8         movzx      edx, byte [rsi+8]                           ; CODE XREF=sub_14c00+1504
00000000000151fc         cmp        dl, 0x1
00000000000151ff         jne        loc_151e2

0000000000015201         cmp        byte [rsi], 0x0
0000000000015204         jns        loc_151eb

0000000000015206         and        byte [rsi+0xa], 0xdf
000000000001520a         jmp        loc_151eb
000000000001520c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15210:
0000000000015210         cmp        byte [rcx], 0x0
0000000000015213         cmovs      r14d, eax
0000000000015217         jmp        loc_151bc
0000000000015219         mov        edi, dword [rcx]
000000000001521b         cmp        edi, 0x20
000000000001521e         je         sub_14c00+1468
0000000000015220         jbe        sub_152b0+25
0000000000015226         cmp        edi, 0x40
0000000000015229         je         sub_14c00+1468
000000000001522b         add        edi, 0xffffff80
000000000001522e         je         sub_14c00+1468
0000000000015230         jmp        sub_14c00+558
0000000000015235         nop        dword [rax]
0000000000015238         mov        rdi, qword [rcx]
000000000001523b         cmp        qword [rdi+0x10], 0x0
0000000000015240         jne        sub_14c00+558
0000000000015246         cmp        qword [rdi+0x18], 0x0
000000000001524b         je         sub_14c00+1468
0000000000015251         jmp        sub_14c00+558
0000000000015256         nop        word [cs:rax+rax]

                     loc_15260:
0000000000015260         mov        r15d, eax                                   ; CODE XREF=sub_14c00+798
0000000000015263         jmp        loc_14f7f
0000000000015268         mov        qword [r15+8], 0x0                          ; CODE XREF=sub_14b30+142
0000000000015270         mov        qword [r15], 0x0
0000000000015277         jmp        sub_14c00+490

                     loc_1527c:
000000000001527c         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_14c00+304
0000000000015281         mov        dword [rsp+0x158+var_10C], 0xc
0000000000015289         mov        r13, qword [rax]
000000000001528c         jmp        loc_145ac

                     loc_15291:
0000000000015291         mov        eax, 0xc                                    ; CODE XREF=sub_14c00+1273
0000000000015296         jmp        loc_1461c

                     loc_1529b:
000000000001529b         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_14c00+1386
00000000000152a0         mov        qword [rbx+0x68], 0x0
00000000000152a8         mov        r13, qword [rax]
00000000000152ab         jmp        loc_145ac


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_152b0:
00000000000152b0         mov        qword [rcx+8], 0x0
00000000000152b8         mov        qword [rcx], 0x0
00000000000152bf         mov        eax, 0xc
00000000000152c4         jmp        re_compile_internal+800
                        ; endp
00000000000152c9         cmp        edi, 0x10                                   ; CODE XREF=sub_15210+16
00000000000152cc         je         sub_14c00+1468
00000000000152d2         jmp        sub_14c00+558

                     loc_152d7:
00000000000152d7         mov        r14d, r8d                                   ; CODE XREF=sub_14c00+1522
                        ; endp

                     loc_152da:
00000000000152da         cmp        qword [rbx+0x98], 0x0                       ; CODE XREF=sub_14c00+1062
00000000000152e2         movzx      edx, byte [rbx+0xb0]
00000000000152e9         mov        dword [rbx+0xb4], 0x1
00000000000152f3         setg       al
00000000000152f6         and        edx, 0xfffffff9
00000000000152f9         or         eax, r14d
00000000000152fc         and        eax, 0x1
00000000000152ff         add        eax, eax
0000000000015301         or         eax, edx
0000000000015303         mov        byte [rbx+0xb0], al
0000000000015309         jmp        loc_14e2e

                     loc_1530e:
000000000001530e         call       j_abort                                     ; abort, CODE XREF=sub_14c00+1090
                        ; endp
0000000000015313         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; "link_nfa_nodes", CODE XREF=re_compile_internal+2165
000000000001531a         lea        rsi, qword [aCoreutils831li_17628]          ; "../coreutils-8.31/lib/regcomp.c"
0000000000015321         lea        rdi, qword [aRight1]                        ; "right > -1"
0000000000015328         mov        edx, 0x5b0
000000000001532d         call       j___assert_fail                             ; __assert_fail

                     loc_15332:
0000000000015332         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; argument "__function" for method j___assert_fail, "link_nfa_nodes", CODE XREF=re_compile_internal+1947
0000000000015339         lea        rsi, qword [aCoreutils831li_17628]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
0000000000015340         lea        rdi, qword [aIsepsilonnodeN]                ; argument "__assertion" for method j___assert_fail, "!IS_EPSILON_NODE (node->token.type)"
0000000000015347         mov        edx, 0x5c2                                  ; argument "__line" for method j___assert_fail
000000000001534c         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000015351         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; "link_nfa_nodes", CODE XREF=re_compile_internal+2156
0000000000015358         lea        rsi, qword [aCoreutils831li_17628]          ; "../coreutils-8.31/lib/regcomp.c"
000000000001535f         lea        rdi, qword [aLeft1]                         ; "left > -1"
0000000000015366         mov        edx, 0x5af
000000000001536b         call       j___assert_fail                             ; __assert_fail

                     loc_15370:
0000000000015370         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_compile_internal+941
                        ; endp
0000000000015375         align      128                                         ; End of unwind block (FDE at 0x1a5f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_compile_pattern:
0000000000015380         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1a644), CODE XREF=main+1170
0000000000015384         mov        rcx, qword [rpl_re_syntax_options]          ; rpl_re_syntax_options
000000000001538b         mov        r8, rdi
000000000001538e         mov        rdi, rdx
0000000000015391         mov        rax, rcx
0000000000015394         shr        rax, 0x19
0000000000015398         and        eax, 0x1
000000000001539b         shl        eax, 0x4
000000000001539e         mov        edx, eax
00000000000153a0         movzx      eax, byte [rdi+0x38]
00000000000153a4         and        eax, 0xffffffef
00000000000153a7         or         eax, edx
00000000000153a9         mov        rdx, rsi
00000000000153ac         mov        rsi, r8
00000000000153af         or         eax, 0xffffff80
00000000000153b2         mov        byte [rdi+0x38], al
00000000000153b5         call       re_compile_internal                         ; re_compile_internal
00000000000153ba         test       eax, eax
00000000000153bc         je         loc_153e8

00000000000153be         lea        rdx, qword [__re_error_msgid_idx]           ; __re_error_msgid_idx
00000000000153c5         cdqe
00000000000153c7         lea        rsi, qword [__re_error_msgid]               ; "Success"
00000000000153ce         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000153d0         add        rsi, qword [rdx+rax*8]                      ; argument "msgid" for method j_dcgettext
00000000000153d4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000153d9         add        rsp, 0x8
00000000000153dd         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
00000000000153e2         align      8

                     loc_153e8:
00000000000153e8         xor        eax, eax                                    ; CODE XREF=rpl_re_compile_pattern+60
00000000000153ea         add        rsp, 0x8
00000000000153ee         ret
                        ; endp
00000000000153ef         align      16                                          ; End of unwind block (FDE at 0x1a644)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_set_syntax:
00000000000153f0         mov        rax, qword [rpl_re_syntax_options]          ; Begin of unwind block (FDE at 0x1a664), rpl_re_syntax_options
00000000000153f7         mov        qword [rpl_re_syntax_options], rdi          ; rpl_re_syntax_options
00000000000153fe         ret
                        ; endp
00000000000153ff         align      1024                                        ; End of unwind block (FDE at 0x1a664)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_compile_fastmap:
0000000000015400         push       r12                                         ; Begin of unwind block (FDE at 0x1a678), CODE XREF=re_search_stub+663, rpl_regcomp+183
0000000000015402         push       rbp
0000000000015403         xor        eax, eax
0000000000015405         push       rbx
0000000000015406         mov        rbp, qword [rdi+0x20]
000000000001540a         mov        rbx, rdi
000000000001540d         mov        r12, qword [rdi]
0000000000015410         lea        rdi, qword [rbp+8]
0000000000015414         mov        rcx, rbp
0000000000015417         mov        qword [rbp], 0x0
000000000001541f         mov        qword [rbp+0xf8], 0x0
000000000001542a         and        rdi, 0xfffffffffffffff8
000000000001542e         sub        rcx, rdi
0000000000015431         add        ecx, 0x100
0000000000015437         shr        ecx, 0x3
000000000001543a         rep stosq  qword [rdi], rax
000000000001543d         mov        rcx, rbp
0000000000015440         mov        rdi, rbx
0000000000015443         mov        rsi, qword [r12+0x48]
0000000000015448         lea        rdx, qword [rsi+0x18]
000000000001544c         add        rsi, 0x10
0000000000015450         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
0000000000015455         mov        rax, qword [r12+0x50]
000000000001545a         cmp        qword [r12+0x48], rax
000000000001545f         je         loc_15479

0000000000015461         lea        rdx, qword [rax+0x18]
0000000000015465         lea        rsi, qword [rax+0x10]
0000000000015469         mov        rcx, rbp
000000000001546c         mov        rdi, rbx
000000000001546f         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
0000000000015474         mov        rax, qword [r12+0x48]

                     loc_15479:
0000000000015479         mov        rsi, qword [r12+0x58]                       ; CODE XREF=rpl_re_compile_fastmap+95
000000000001547e         cmp        rsi, rax
0000000000015481         je         loc_1549b

0000000000015483         lea        rdx, qword [rsi+0x18]
0000000000015487         mov        rcx, rbp
000000000001548a         add        rsi, 0x10
000000000001548e         mov        rdi, rbx
0000000000015491         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
0000000000015496         mov        rax, qword [r12+0x48]

                     loc_1549b:
000000000001549b         mov        rsi, qword [r12+0x60]                       ; CODE XREF=rpl_re_compile_fastmap+129
00000000000154a0         cmp        rsi, rax
00000000000154a3         je         loc_154b8

00000000000154a5         lea        rdx, qword [rsi+0x18]
00000000000154a9         mov        rcx, rbp
00000000000154ac         add        rsi, 0x10
00000000000154b0         mov        rdi, rbx
00000000000154b3         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30

                     loc_154b8:
00000000000154b8         or         byte [rbx+0x38], 0x8                        ; CODE XREF=rpl_re_compile_fastmap+163
00000000000154bc         xor        eax, eax
00000000000154be         pop        rbx
00000000000154bf         pop        rbp
00000000000154c0         pop        r12
00000000000154c2         ret
                        ; endp
00000000000154c3         align      16                                          ; End of unwind block (FDE at 0x1a678)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96


                     re_search_stub:
00000000000154d0         push       r15                                         ; Begin of unwind block (FDE at 0x1a6a4), CODE XREF=re_search_2_stub+136, rpl_re_match+14, rpl_re_search+11
00000000000154d2         push       r14
00000000000154d4         mov        rax, r8
00000000000154d7         push       r13
00000000000154d9         push       r12
00000000000154db         add        r8, rcx
00000000000154de         push       rbp
00000000000154df         push       rbx
00000000000154e0         sub        rsp, 0x38
00000000000154e4         test       rcx, rcx
00000000000154e7         mov        ebx, dword [rsp+0x68+arg_8]
00000000000154eb         mov        r12, qword [rsp+0x68+arg_0]
00000000000154f0         mov        dword [rsp+0x68+var_40], ebx
00000000000154f4         js         loc_15830

00000000000154fa         cmp        rcx, rdx
00000000000154fd         jg         loc_15830

0000000000015503         cmp        r8, rdx
0000000000015506         mov        rbx, rcx
0000000000015509         mov        r15, rdi
000000000001550c         jg         loc_15790

0000000000015512         test       rax, rax
0000000000015515         js         loc_15520

0000000000015517         cmp        rcx, r8
000000000001551a         jg         loc_15790

                     loc_15520:
0000000000015520         test       r8, r8                                      ; CODE XREF=re_search_stub+69
0000000000015523         js         loc_15808

0000000000015529         test       rax, rax
000000000001552c         jns        loc_15537

000000000001552e         cmp        rbx, r8
0000000000015531         jle        loc_15808

                     loc_15537:
0000000000015537         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+92, re_search_stub+707
000000000001553c         mov        r13d, eax
000000000001553f         shr        r13b, 0x5
0000000000015543         mov        edi, r13d
0000000000015546         and        edi, 0x3
0000000000015549         cmp        r8, rbx
000000000001554c         mov        dword [rsp+0x68+var_3C], edi
0000000000015550         jle        loc_15561

0000000000015552         cmp        qword [r15+0x20], 0x0
0000000000015557         je         loc_15561

0000000000015559         test       al, 0x8
000000000001555b         je         loc_15750

                     loc_15561:
0000000000015561         test       al, 0x10                                    ; CODE XREF=re_search_stub+128, re_search_stub+135, re_search_stub+693, re_search_stub+849
0000000000015563         jne        loc_15730

0000000000015569         test       r12, r12
000000000001556c         je         loc_15730

0000000000015572         and        eax, 0x6
0000000000015575         mov        rcx, qword [r15+0x30]
0000000000015579         cmp        al, 0x4
000000000001557b         je         loc_15710

                     loc_15581:
0000000000015581         lea        r14, qword [rcx+1]                          ; CODE XREF=re_search_stub+583
0000000000015585         mov        r13, r14

                     loc_15588:
0000000000015588         mov        rdi, r14                                    ; CODE XREF=re_search_stub+595
000000000001558b         shl        rdi, 0x4

                     loc_1558f:
000000000001558f         mov        qword [rsp+0x68+var_48], r9                 ; CODE XREF=re_search_stub+628
0000000000015594         mov        qword [rsp+0x68+var_50], rdx
0000000000015599         mov        qword [rsp+0x68+var_58], rsi
000000000001559e         mov        qword [rsp+0x68+var_60], r8
00000000000155a3         call       j_malloc                                    ; malloc
00000000000155a8         test       rax, rax
00000000000155ab         mov        rbp, rax
00000000000155ae         je         loc_15840

00000000000155b4         sub        rsp, 0x8
00000000000155b8         mov        rcx, rbx
00000000000155bb         mov        rdi, r15
00000000000155be         mov        eax, dword [rsp+0x70+var_3C]
00000000000155c2         push       rax
00000000000155c3         push       rbp
00000000000155c4         push       r14
00000000000155c6         mov        r9, qword [rsp+0x88+var_48]
00000000000155cb         mov        r8, qword [rsp+0x88+var_60]
00000000000155d0         mov        rdx, qword [rsp+0x88+var_50]
00000000000155d5         mov        rsi, qword [rsp+0x88+var_58]
00000000000155da         call       re_search_internal                          ; re_search_internal
00000000000155df         add        rsp, 0x20
00000000000155e3         test       eax, eax
00000000000155e5         je         loc_15618

00000000000155e7         cmp        eax, 0x1
00000000000155ea         mov        r12, 0xffffffffffffffff
00000000000155f1         je         loc_155fa

                     loc_155f3:
00000000000155f3         mov        r12, 0xfffffffffffffffe                     ; CODE XREF=re_search_stub+530

                     loc_155fa:
00000000000155fa         mov        rdi, rbp                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_stub+289, re_search_stub+545, re_search_stub+567
00000000000155fd         call       j_free                                      ; free

                     loc_15602:
0000000000015602         add        rsp, 0x38                                   ; CODE XREF=re_search_stub+871, re_search_stub+887
0000000000015606         mov        rax, r12
0000000000015609         pop        rbx
000000000001560a         pop        rbp
000000000001560b         pop        r12
000000000001560d         pop        r13
000000000001560f         pop        r14
0000000000015611         pop        r15
0000000000015613         ret
                        ; endp
0000000000015614         align      8

                     loc_15618:
0000000000015618         test       r12, r12                                    ; CODE XREF=re_search_stub+277
000000000001561b         je         loc_156e8

0000000000015621         movzx      eax, byte [r15+0x38]
0000000000015626         lea        rdx, qword [r13+1]
000000000001562a         shr        al, 0x1
000000000001562c         and        eax, 0x3
000000000001562f         je         loc_157a0

0000000000015635         cmp        eax, 0x1
0000000000015638         je         loc_15850

000000000001563e         cmp        eax, 0x2
0000000000015641         jne        loc_15930

0000000000015647         cmp        r14, qword [r12]
000000000001564b         ja         loc_15911

0000000000015651         mov        r9d, 0x2

                     loc_15657:
0000000000015657         test       r13, r13                                    ; CODE XREF=re_search_stub+812, re_search_stub+906, re_search_stub+1004
000000000001565a         jle        loc_158c8

0000000000015660         mov        r8, qword [r12+8]
0000000000015665         mov        rdi, qword [r12+0x10]
000000000001566a         lea        rsi, qword [r13*8]
0000000000015672         mov        rdx, r13
0000000000015675         xor        eax, eax
0000000000015677         nop        word [rax+rax]

                     loc_15680:
0000000000015680         mov        rcx, qword [rbp+rax*2]                      ; CODE XREF=re_search_stub+457
0000000000015685         mov        qword [r8+rax], rcx
0000000000015689         mov        rcx, qword [rbp+rax*2+8]
000000000001568e         mov        qword [rdi+rax], rcx
0000000000015692         add        rax, 0x8
0000000000015696         cmp        rsi, rax
0000000000015699         jne        loc_15680

                     loc_1569b:
000000000001569b         cmp        qword [r12], rdx                            ; CODE XREF=re_search_stub+1021
000000000001569f         jbe        loc_156cd

00000000000156a1         mov        rsi, qword [r12+0x10]
00000000000156a6         mov        rcx, qword [r12+8]
00000000000156ab         mov        rax, 0xffffffffffffffff
00000000000156b2         nop        word [rax+rax]

                     loc_156b8:
00000000000156b8         mov        qword [rsi+rdx*8], rax                      ; CODE XREF=re_search_stub+507
00000000000156bc         add        r13, 0x1
00000000000156c0         mov        qword [rcx+rdx*8], rax
00000000000156c4         cmp        r13, qword [r12]
00000000000156c8         mov        rdx, r13
00000000000156cb         jb         loc_156b8

                     loc_156cd:
00000000000156cd         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+463, re_search_stub+1037, re_search_stub+1053
00000000000156d2         lea        r13d, dword [r9+r9]
00000000000156d6         and        eax, 0xfffffff9
00000000000156d9         or         eax, r13d
00000000000156dc         test       al, 0x6
00000000000156de         mov        byte [r15+0x38], al
00000000000156e2         je         loc_155f3

                     loc_156e8:
00000000000156e8         cmp        byte [rsp+0x68+var_40], 0x0                 ; CODE XREF=re_search_stub+331
00000000000156ed         mov        r12, qword [rbp]
00000000000156f1         je         loc_155fa

00000000000156f7         cmp        r12, rbx
00000000000156fa         jne        loc_158f2

0000000000015700         mov        r12, qword [rbp+8]
0000000000015704         sub        r12, rbx
0000000000015707         jmp        loc_155fa
000000000001570c         align      16

                     loc_15710:
0000000000015710         mov        r14, qword [r12]                            ; CODE XREF=re_search_stub+171
0000000000015714         cmp        r14, rcx
0000000000015717         ja         loc_15581

000000000001571d         test       r14, r14
0000000000015720         mov        r13, r14
0000000000015723         jg         loc_15588

0000000000015729         nop        dword [rax]

                     loc_15730:
0000000000015730         mov        edi, 0x10                                   ; CODE XREF=re_search_stub+147, re_search_stub+156
0000000000015735         mov        r14d, 0x1
000000000001573b         mov        r13d, 0x1
0000000000015741         xor        r12d, r12d
0000000000015744         jmp        loc_1558f
0000000000015749         align      16

                     loc_15750:
0000000000015750         mov        rdi, r15                                    ; CODE XREF=re_search_stub+139
0000000000015753         mov        qword [rsp+0x68+var_48], r9
0000000000015758         mov        qword [rsp+0x68+var_50], rdx
000000000001575d         mov        qword [rsp+0x68+var_58], rsi
0000000000015762         mov        qword [rsp+0x68+var_60], r8
0000000000015767         call       rpl_re_compile_fastmap                      ; rpl_re_compile_fastmap
000000000001576c         movzx      eax, byte [r15+0x38]
0000000000015771         mov        r9, qword [rsp+0x68+var_48]
0000000000015776         mov        rdx, qword [rsp+0x68+var_50]
000000000001577b         mov        rsi, qword [rsp+0x68+var_58]
0000000000015780         mov        r8, qword [rsp+0x68+var_60]
0000000000015785         jmp        loc_15561
000000000001578a         align      16

                     loc_15790:
0000000000015790         mov        r8, rdx                                     ; CODE XREF=re_search_stub+60, re_search_stub+74
0000000000015793         jmp        loc_15537
0000000000015798         align      32

                     loc_157a0:
00000000000157a0         lea        r14, qword [rdx*8]                          ; CODE XREF=re_search_stub+351
00000000000157a8         mov        qword [rsp+0x68+var_60], rdx
00000000000157ad         mov        rdi, r14                                    ; argument "__size" for method j_malloc
00000000000157b0         call       j_malloc                                    ; malloc
00000000000157b5         test       rax, rax
00000000000157b8         mov        qword [r12+8], rax
00000000000157bd         mov        rdx, qword [rsp+0x68+var_60]
00000000000157c2         je         loc_158da

00000000000157c8         mov        rdi, r14                                    ; argument "__size" for method j_malloc
00000000000157cb         mov        qword [rsp+0x68+var_60], rdx
00000000000157d0         mov        qword [rsp+0x68+var_58], rax
00000000000157d5         call       j_malloc                                    ; malloc
00000000000157da         test       rax, rax
00000000000157dd         mov        qword [r12+0x10], rax
00000000000157e2         mov        rdx, qword [rsp+0x68+var_60]
00000000000157e7         mov        rcx, qword [rsp+0x68+var_58]
00000000000157ec         je         loc_158d2

00000000000157f2         mov        qword [r12], rdx
00000000000157f6         mov        r9d, 0x1
00000000000157fc         jmp        loc_15657
0000000000015801         align      8

                     loc_15808:
0000000000015808         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+83, re_search_stub+97
000000000001580d         xor        r8d, r8d
0000000000015810         mov        r13d, eax
0000000000015813         shr        r13b, 0x5
0000000000015817         mov        edi, r13d
000000000001581a         and        edi, 0x3
000000000001581d         mov        dword [rsp+0x68+var_3C], edi
0000000000015821         jmp        loc_15561
0000000000015826         align      16

                     loc_15830:
0000000000015830         mov        r12, 0xffffffffffffffff                     ; CODE XREF=re_search_stub+36, re_search_stub+45
0000000000015837         jmp        loc_15602
000000000001583c         align      64

                     loc_15840:
0000000000015840         mov        r12, 0xfffffffffffffffe                     ; CODE XREF=re_search_stub+222
0000000000015847         jmp        loc_15602
000000000001584c         align      16

                     loc_15850:
0000000000015850         cmp        qword [r12], rdx                            ; CODE XREF=re_search_stub+360
0000000000015854         mov        r9d, 0x1
000000000001585a         jae        loc_15657

0000000000015860         lea        rcx, qword [rdx*8]
0000000000015868         mov        rdi, qword [r12+8]                          ; argument "__ptr" for method j_realloc
000000000001586d         mov        byte [rsp+0x68+var_50], r9b
0000000000015872         mov        qword [rsp+0x68+var_58], rdx
0000000000015877         mov        rsi, rcx                                    ; argument "__size" for method j_realloc
000000000001587a         mov        qword [rsp+0x68+var_60], rcx
000000000001587f         call       j_realloc                                   ; realloc
0000000000015884         test       rax, rax
0000000000015887         mov        r14, rax
000000000001588a         je         loc_158da

000000000001588c         mov        rcx, qword [rsp+0x68+var_60]
0000000000015891         mov        rdi, qword [r12+0x10]                       ; argument "__ptr" for method j_realloc
0000000000015896         mov        rsi, rcx                                    ; argument "__size" for method j_realloc
0000000000015899         call       j_realloc                                   ; realloc
000000000001589e         test       rax, rax
00000000000158a1         mov        rdx, qword [rsp+0x68+var_58]
00000000000158a6         movzx      r9d, byte [rsp+0x68+var_50]
00000000000158ac         je         loc_158e2

00000000000158ae         mov        qword [r12+8], r14
00000000000158b3         mov        qword [r12+0x10], rax
00000000000158b8         mov        qword [r12], rdx
00000000000158bc         jmp        loc_15657
00000000000158c1         align      8

                     loc_158c8:
00000000000158c8         xor        edx, edx                                    ; CODE XREF=re_search_stub+394
00000000000158ca         xor        r13d, r13d
00000000000158cd         jmp        loc_1569b

                     loc_158d2:
00000000000158d2         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_stub+796
00000000000158d5         call       j_free                                      ; free

                     loc_158da:
00000000000158da         xor        r9d, r9d                                    ; CODE XREF=re_search_stub+754, re_search_stub+954
00000000000158dd         jmp        loc_156cd

                     loc_158e2:
00000000000158e2         mov        rdi, r14                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_stub+988
00000000000158e5         call       j_free                                      ; free
00000000000158ea         xor        r9d, r9d
00000000000158ed         jmp        loc_156cd

                     loc_158f2:
00000000000158f2         lea        rcx, qword [__PRETTY_FUNCTION__.7847]       ; argument "__function" for method j___assert_fail, "re_search_stub", CODE XREF=re_search_stub+554
00000000000158f9         lea        rsi, qword [aCoreutils831li_17608]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
0000000000015900         lea        rdi, qword [aPmatch0rmsoSta]                ; argument "__assertion" for method j___assert_fail, "pmatch[0].rm_so == start"
0000000000015907         mov        edx, 0x1be                                  ; argument "__line" for method j___assert_fail
000000000001590c         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_15911:
0000000000015911         lea        rcx, qword [__PRETTY_FUNCTION__.7859]       ; argument "__function" for method j___assert_fail, "re_copy_regs", CODE XREF=re_search_stub+379
0000000000015918         lea        rsi, qword [aCoreutils831li_17608]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000001591f         lea        rdi, qword [aRegsnumregsNre]                ; argument "__assertion" for method j___assert_fail, "regs->num_regs >= nregs"
0000000000015926         mov        edx, 0x1fb                                  ; argument "__line" for method j___assert_fail
000000000001592b         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_15930:
0000000000015930         lea        rcx, qword [__PRETTY_FUNCTION__.7859]       ; argument "__function" for method j___assert_fail, "re_copy_regs", CODE XREF=re_search_stub+369
0000000000015937         lea        rsi, qword [aCoreutils831li_17608]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000001593e         lea        rdi, qword [aRegsallocatedR]                ; argument "__assertion" for method j___assert_fail, "regs_allocated == REGS_FIXED"
0000000000015945         mov        edx, 0x1f9                                  ; argument "__line" for method j___assert_fail
000000000001594a         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000001594f         align      16                                          ; End of unwind block (FDE at 0x1a6a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_3C: int32_t, -60
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     re_search_2_stub:
0000000000015950         push       r15                                         ; Begin of unwind block (FDE at 0x1a704), CODE XREF=rpl_re_match_2+16, rpl_re_search_2+18
0000000000015952         push       r14
0000000000015954         push       r13
0000000000015956         push       r12
0000000000015958         mov        r12, rdi
000000000001595b         push       rbp
000000000001595c         push       rbx
000000000001595d         mov        rbp, r8
0000000000015960         mov        rbx, rdx
0000000000015963         mov        rdx, rbp
0000000000015966         sub        rsp, 0x28
000000000001596a         shr        rdx, 0x3f
000000000001596e         mov        rax, qword [rsp+0x58+arg_10]
0000000000015973         mov        edi, edx
0000000000015975         mov        r8d, dword [rsp+0x58+arg_18]
000000000001597a         shr        rax, 0x3f
000000000001597e         or         dil, al
0000000000015981         jne        loc_15a50

0000000000015987         test       rbx, rbx
000000000001598a         js         loc_15a50

0000000000015990         mov        r15, rbx
0000000000015993         add        r15, rbp
0000000000015996         jo         loc_15a50

000000000001599c         test       rbp, rbp
000000000001599f         mov        r14, rcx
00000000000159a2         mov        rcx, r9
00000000000159a5         je         loc_15a60

00000000000159ab         xor        r13d, r13d
00000000000159ae         test       rbx, rbx
00000000000159b1         mov        qword [rsp+0x58+var_50], rsi
00000000000159b6         jne        loc_15a00

                     loc_159b8:
00000000000159b8         movzx      r8d, r8b                                    ; CODE XREF=re_search_2_stub+247, re_search_2_stub+278
00000000000159bc         mov        rdx, r15
00000000000159bf         mov        rsi, r14
00000000000159c2         push       r8
00000000000159c4         push       qword [rsp+0x60+arg_8]
00000000000159c8         mov        rdi, r12
00000000000159cb         mov        r9, qword [rsp+0x68+arg_10]
00000000000159d3         mov        r8, qword [rsp+0x68+arg_0]
00000000000159d8         call       re_search_stub                              ; re_search_stub
00000000000159dd         mov        rdi, r13                                    ; argument "__ptr" for method j_free
00000000000159e0         mov        rbx, rax
00000000000159e3         call       j_free                                      ; free
00000000000159e8         pop        rax
00000000000159e9         pop        rdx

                     loc_159ea:
00000000000159ea         add        rsp, 0x28                                   ; CODE XREF=re_search_2_stub+263
00000000000159ee         mov        rax, rbx
00000000000159f1         pop        rbx
00000000000159f2         pop        rbp
00000000000159f3         pop        r12
00000000000159f5         pop        r13
00000000000159f7         pop        r14
00000000000159f9         pop        r15
00000000000159fb         ret
                        ; endp
00000000000159fc         align      512

                     loc_15a00:
0000000000015a00         mov        rdi, r15                                    ; argument "__size" for method j_malloc, CODE XREF=re_search_2_stub+102
0000000000015a03         mov        dword [rsp+0x58+var_3C], r8d
0000000000015a08         mov        qword [rsp+0x58+var_48], r9
0000000000015a0d         call       j_malloc                                    ; malloc
0000000000015a12         test       rax, rax
0000000000015a15         mov        r13, rax
0000000000015a18         je         loc_15a50

0000000000015a1a         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__src" for method j_memcpy
0000000000015a1f         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000015a22         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000015a25         call       j_memcpy                                    ; memcpy
0000000000015a2a         lea        rdi, qword [r13+rbx]                        ; argument "__dest" for method j_memcpy
0000000000015a2f         mov        rsi, r14                                    ; argument "__src" for method j_memcpy
0000000000015a32         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000015a35         mov        r14, r13
0000000000015a38         call       j_memcpy                                    ; memcpy
0000000000015a3d         mov        rcx, qword [rsp+0x58+var_48]
0000000000015a42         mov        r8d, dword [rsp+0x58+var_3C]
0000000000015a47         jmp        loc_159b8
0000000000015a4c         align      16

                     loc_15a50:
0000000000015a50         mov        rbx, 0xfffffffffffffffe                     ; CODE XREF=re_search_2_stub+49, re_search_2_stub+58, re_search_2_stub+70, re_search_2_stub+200
0000000000015a57         jmp        loc_159ea
0000000000015a59         align      32

                     loc_15a60:
0000000000015a60         mov        r14, rsi                                    ; CODE XREF=re_search_2_stub+85
0000000000015a63         xor        r13d, r13d
0000000000015a66         jmp        loc_159b8
0000000000015a6b         align      16                                          ; End of unwind block (FDE at 0x1a704)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regcomp:
0000000000015a70         mov        eax, edx                                    ; Begin of unwind block (FDE at 0x1a75c)
0000000000015a72         push       r14
0000000000015a74         push       r13
0000000000015a76         and        eax, 0x1
0000000000015a79         push       r12
0000000000015a7b         push       rbp
0000000000015a7c         cmp        eax, 0x1
0000000000015a7f         push       rbx
0000000000015a80         mov        rbx, rdi
0000000000015a83         sbb        r14, r14
0000000000015a86         mov        qword [rdi], 0x0
0000000000015a8d         mov        qword [rdi+8], 0x0
0000000000015a95         and        r14d, 0xfd4fca
0000000000015a9c         mov        qword [rdi+0x10], 0x0
0000000000015aa4         mov        edi, 0x100                                  ; argument "__size" for method j_malloc
0000000000015aa9         mov        r12, rsi
0000000000015aac         mov        ebp, edx
0000000000015aae         add        r14, 0x3b2fc
0000000000015ab5         call       j_malloc                                    ; malloc
0000000000015aba         test       rax, rax
0000000000015abd         mov        qword [rbx+0x20], rax
0000000000015ac1         je         loc_15b70

0000000000015ac7         mov        r13, rbp
0000000000015aca         shl        r13, 0x15
0000000000015ace         and        r13d, 0x400000
0000000000015ad5         or         r13, r14
0000000000015ad8         test       bpl, 0x4
0000000000015adc         jne        loc_15b40

0000000000015ade         and        byte [rbx+0x38], 0x7f

                     loc_15ae2:
0000000000015ae2         movzx      edx, byte [rbx+0x38]                        ; CODE XREF=rpl_regcomp+223
0000000000015ae6         shr        ebp, 0x3
0000000000015ae9         mov        rdi, r12                                    ; argument "__s" for method j_strlen
0000000000015aec         and        ebp, 0x1
0000000000015aef         mov        qword [rbx+0x28], 0x0
0000000000015af7         shl        ebp, 0x4
0000000000015afa         and        edx, 0xffffffef
0000000000015afd         or         ebp, edx
0000000000015aff         mov        byte [rbx+0x38], bpl
0000000000015b03         call       j_strlen                                    ; strlen
0000000000015b08         mov        rcx, r13
0000000000015b0b         mov        rdx, rax
0000000000015b0e         mov        rsi, r12
0000000000015b11         mov        rdi, rbx
0000000000015b14         call       re_compile_internal                         ; re_compile_internal
0000000000015b19         cmp        eax, 0x10
0000000000015b1c         mov        ebp, eax
0000000000015b1e         je         loc_15b58

0000000000015b20         test       eax, eax
0000000000015b22         jne        loc_15b5d

0000000000015b24         mov        rdi, rbx
0000000000015b27         call       rpl_re_compile_fastmap                      ; rpl_re_compile_fastmap

                     loc_15b2c:
0000000000015b2c         pop        rbx                                         ; CODE XREF=rpl_regcomp+254
0000000000015b2d         mov        eax, ebp
0000000000015b2f         pop        rbp
0000000000015b30         pop        r12
0000000000015b32         pop        r13
0000000000015b34         pop        r14
0000000000015b36         ret
                        ; endp
0000000000015b37         align      64

                     loc_15b40:
0000000000015b40         and        r13, 0xffffffffffffffbf                     ; CODE XREF=rpl_regcomp+108
0000000000015b44         or         byte [rbx+0x38], 0x80
0000000000015b48         or         r13, 0x100
0000000000015b4f         jmp        loc_15ae2
0000000000015b51         align      8

                     loc_15b58:
0000000000015b58         mov        ebp, 0x8                                    ; CODE XREF=rpl_regcomp+174

                     loc_15b5d:
0000000000015b5d         mov        rdi, qword [rbx+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=rpl_regcomp+178
0000000000015b61         call       j_free                                      ; free
0000000000015b66         mov        qword [rbx+0x20], 0x0
0000000000015b6e         jmp        loc_15b2c

                     loc_15b70:
0000000000015b70         mov        ebp, 0xc                                    ; CODE XREF=rpl_regcomp+81
0000000000015b75         pop        rbx
0000000000015b76         mov        eax, ebp
0000000000015b78         pop        rbp
0000000000015b79         pop        r12
0000000000015b7b         pop        r13
0000000000015b7d         pop        r14
0000000000015b7f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regerror:
0000000000015b80         push       r13                                         ; End of unwind block (FDE at 0x1a75c), Begin of unwind block (FDE at 0x1a7a8)
0000000000015b82         push       r12
0000000000015b84         push       rbp
0000000000015b85         push       rbx
0000000000015b86         sub        rsp, 0x8
0000000000015b8a         cmp        edi, 0x10
0000000000015b8d         ja         loc_15bf0

0000000000015b8f         lea        rax, qword [__re_error_msgid_idx]           ; __re_error_msgid_idx
0000000000015b96         movsxd     rdi, edi
0000000000015b99         lea        rsi, qword [__re_error_msgid]               ; "Success"
0000000000015ba0         mov        rbp, rdx
0000000000015ba3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000015ba8         mov        r12, rcx
0000000000015bab         add        rsi, qword [rax+rdi*8]                      ; argument "msgid" for method j_dcgettext
0000000000015baf         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000015bb1         call       j_dcgettext                                 ; dcgettext
0000000000015bb6         mov        rdi, rax                                    ; argument "__s" for method j_strlen
0000000000015bb9         mov        r13, rax
0000000000015bbc         call       j_strlen                                    ; strlen
0000000000015bc1         test       r12, r12
0000000000015bc4         lea        rbx, qword [rax+1]
0000000000015bc8         je         loc_15bdd

0000000000015bca         cmp        rbx, r12
0000000000015bcd         mov        rdx, rbx
0000000000015bd0         ja         loc_15bf8

                     loc_15bd2:
0000000000015bd2         mov        rsi, r13                                    ; argument "__src" for method j_memcpy, CODE XREF=rpl_regerror+131
0000000000015bd5         mov        rdi, rbp                                    ; argument "__dest" for method j_memcpy
0000000000015bd8         call       j_memcpy                                    ; memcpy

                     loc_15bdd:
0000000000015bdd         add        rsp, 0x8                                    ; CODE XREF=rpl_regerror+72
0000000000015be1         mov        rax, rbx
0000000000015be4         pop        rbx
0000000000015be5         pop        rbp
0000000000015be6         pop        r12
0000000000015be8         pop        r13
0000000000015bea         ret
                        ; endp
0000000000015beb         align      16

                     loc_15bf0:
0000000000015bf0         call       j_abort                                     ; abort, CODE XREF=rpl_regerror+13
                        ; endp
0000000000015bf5         align      8

                     loc_15bf8:
0000000000015bf8         lea        rdx, qword [r12-1]                          ; CODE XREF=rpl_regerror+80
0000000000015bfd         mov        byte [rbp+r12-1], 0x0
0000000000015c03         jmp        loc_15bd2
0000000000015c05         align      16                                          ; End of unwind block (FDE at 0x1a7a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regfree:
0000000000015c10         push       rbx                                         ; Begin of unwind block (FDE at 0x1a7e4)
0000000000015c11         mov        rbx, rdi
0000000000015c14         mov        rdi, qword [rdi]
0000000000015c17         test       rdi, rdi
0000000000015c1a         je         loc_15c21

0000000000015c1c         call       free_dfa_content                            ; free_dfa_content

                     loc_15c21:
0000000000015c21         mov        rdi, qword [rbx+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=rpl_regfree+10
0000000000015c25         mov        qword [rbx], 0x0
0000000000015c2c         mov        qword [rbx+8], 0x0
0000000000015c34         call       j_free                                      ; free
0000000000015c39         mov        rdi, qword [rbx+0x28]                       ; argument "__ptr" for method j_free
0000000000015c3d         mov        qword [rbx+0x20], 0x0
0000000000015c45         call       j_free                                      ; free
0000000000015c4a         mov        qword [rbx+0x28], 0x0
0000000000015c52         pop        rbx
0000000000015c53         ret
                        ; endp
0000000000015c54         align      32                                          ; End of unwind block (FDE at 0x1a7e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48


                     rpl_regexec:
0000000000015c60         test       r8d, 0xfffffff8                             ; Begin of unwind block (FDE at 0x1a800)
0000000000015c67         jne        loc_15cf8

0000000000015c6d         push       r13
0000000000015c6f         push       r12
0000000000015c71         mov        r13, rdx
0000000000015c74         push       rbp
0000000000015c75         push       rbx
0000000000015c76         mov        r12, rcx
0000000000015c79         mov        ebx, r8d
0000000000015c7c         mov        rbp, rdi
0000000000015c7f         sub        rsp, 0x18
0000000000015c83         test       r8b, 0x4
0000000000015c87         jne        loc_15cd8

0000000000015c89         mov        rdi, rsi                                    ; argument "__s" for method j_strlen
0000000000015c8c         mov        qword [rsp+0x38+var_30], rsi
0000000000015c91         call       j_strlen                                    ; strlen
0000000000015c96         xor        ecx, ecx
0000000000015c98         test       byte [rbp+0x38], 0x10
0000000000015c9c         mov        rdx, rax
0000000000015c9f         mov        rsi, qword [rsp+0x38+var_30]
0000000000015ca4         je         loc_15ce6

                     loc_15ca6:
0000000000015ca6         sub        rsp, 0x8                                    ; CODE XREF=rpl_regexec+132
0000000000015caa         push       rbx
0000000000015cab         push       0x0
0000000000015cad         push       0x0

                     loc_15caf:
0000000000015caf         mov        rdi, rbp                                    ; CODE XREF=rpl_regexec+143
0000000000015cb2         mov        r9, rdx
0000000000015cb5         mov        r8, rdx
0000000000015cb8         call       re_search_internal                          ; re_search_internal
0000000000015cbd         add        rsp, 0x20
0000000000015cc1         test       eax, eax
0000000000015cc3         setne      al
0000000000015cc6         add        rsp, 0x18
0000000000015cca         pop        rbx
0000000000015ccb         movzx      eax, al
0000000000015cce         pop        rbp
0000000000015ccf         pop        r12
0000000000015cd1         pop        r13
0000000000015cd3         ret
                        ; endp
0000000000015cd4         align      8

                     loc_15cd8:
0000000000015cd8         test       byte [rbp+0x38], 0x10                       ; CODE XREF=rpl_regexec+39
0000000000015cdc         mov        rcx, qword [rcx]
0000000000015cdf         mov        rdx, qword [r12+8]
0000000000015ce4         jne        loc_15ca6

                     loc_15ce6:
0000000000015ce6         sub        rsp, 0x8                                    ; CODE XREF=rpl_regexec+68
0000000000015cea         push       rbx
0000000000015ceb         push       r12
0000000000015ced         push       r13
0000000000015cef         jmp        loc_15caf
0000000000015cf1         align      8

                     loc_15cf8:
0000000000015cf8         mov        eax, 0x2                                    ; CODE XREF=rpl_regexec+7
0000000000015cfd         ret
                        ; endp
0000000000015cfe         align      256                                         ; End of unwind block (FDE at 0x1a800)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_match:
0000000000015d00         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1a85c)
0000000000015d04         mov        r9, rdx
0000000000015d07         push       0x1
0000000000015d09         push       r8
0000000000015d0b         xor        r8d, r8d
0000000000015d0e         call       re_search_stub                              ; re_search_stub
0000000000015d13         add        rsp, 0x18
0000000000015d17         ret
                        ; endp
0000000000015d18         align      32                                          ; End of unwind block (FDE at 0x1a85c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_search:
0000000000015d20         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1a87c), CODE XREF=main+1631, main+2175
0000000000015d24         push       0x0
0000000000015d26         push       r9
0000000000015d28         mov        r9, rdx
0000000000015d2b         call       re_search_stub                              ; re_search_stub
0000000000015d30         add        rsp, 0x18
0000000000015d34         ret
                        ; endp
0000000000015d35         align      64                                          ; End of unwind block (FDE at 0x1a87c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     rpl_re_match_2:
0000000000015d40         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1a89c)
0000000000015d44         push       0x1
0000000000015d46         push       qword [rsp+0x10+arg_8]
0000000000015d4a         push       qword [rsp+0x18+arg_0]
0000000000015d4e         push       0x0
0000000000015d50         call       re_search_2_stub                            ; re_search_2_stub
0000000000015d55         add        rsp, 0x28
0000000000015d59         ret
                        ; endp
0000000000015d5a         align      32                                          ; End of unwind block (FDE at 0x1a89c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     rpl_re_search_2:
0000000000015d60         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1a8c0)
0000000000015d64         push       0x0
0000000000015d66         push       qword [rsp+0x10+arg_10]
0000000000015d6a         push       qword [rsp+0x18+arg_8]
0000000000015d6e         push       qword [rsp+0x20+arg_0]
0000000000015d72         call       re_search_2_stub                            ; re_search_2_stub
0000000000015d77         add        rsp, 0x28
0000000000015d7b         ret
                        ; endp
0000000000015d7c         align      128                                         ; End of unwind block (FDE at 0x1a8c0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_set_registers:
0000000000015d80         test       rdx, rdx                                    ; Begin of unwind block (FDE at 0x1a8e4)
0000000000015d83         jne        loc_15da8

0000000000015d85         and        byte [rdi+0x38], 0xf9
0000000000015d89         mov        qword [rsi], 0x0
0000000000015d90         mov        qword [rsi+0x10], 0x0
0000000000015d98         mov        qword [rsi+8], 0x0
0000000000015da0         ret
                        ; endp
0000000000015da1         align      8

                     loc_15da8:
0000000000015da8         movzx      eax, byte [rdi+0x38]                        ; CODE XREF=rpl_re_set_registers+3
0000000000015dac         and        eax, 0xfffffff9
0000000000015daf         or         eax, 0x2
0000000000015db2         mov        byte [rdi+0x38], al
0000000000015db5         mov        qword [rsi], rdx
0000000000015db8         mov        qword [rsi+8], rcx
0000000000015dbc         mov        qword [rsi+0x10], r8
0000000000015dc0         ret
                        ; endp
0000000000015dc1         align      16                                          ; End of unwind block (FDE at 0x1a8e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
0000000000015dd0         push       r12                                         ; Begin of unwind block (FDE at 0x1a8fc), CODE XREF=close_stdout+13, close_stdout+51
0000000000015dd2         push       rbp
0000000000015dd3         mov        rbp, rdi
0000000000015dd6         push       rbx
0000000000015dd7         call       j___fpending                                ; __fpending
0000000000015ddc         mov        ebx, dword [rbp]
0000000000015ddf         mov        rdi, rbp
0000000000015de2         mov        r12, rax
0000000000015de5         call       rpl_fclose                                  ; rpl_fclose
0000000000015dea         and        ebx, 0x20
0000000000015ded         test       ebx, ebx
0000000000015def         jne        loc_15e08

0000000000015df1         test       eax, eax
0000000000015df3         je         loc_15dff

0000000000015df5         test       r12, r12
0000000000015df8         mov        eax, 0xffffffff
0000000000015dfd         je         loc_15e38

                     loc_15dff:
0000000000015dff         pop        rbx                                         ; CODE XREF=close_stream+35
0000000000015e00         pop        rbp
0000000000015e01         pop        r12
0000000000015e03         ret
                        ; endp
0000000000015e04         align      8

                     loc_15e08:
0000000000015e08         test       eax, eax                                    ; CODE XREF=close_stream+31
0000000000015e0a         jne        loc_15e28

0000000000015e0c         call       j___errno_location                          ; __errno_location
0000000000015e11         mov        dword [rax], 0x0
0000000000015e17         mov        eax, 0xffffffff
0000000000015e1c         pop        rbx
0000000000015e1d         pop        rbp
0000000000015e1e         pop        r12
0000000000015e20         ret
                        ; endp
0000000000015e21         align      8

                     loc_15e28:
0000000000015e28         pop        rbx                                         ; CODE XREF=close_stream+58
0000000000015e29         mov        eax, 0xffffffff
0000000000015e2e         pop        rbp
0000000000015e2f         pop        r12
0000000000015e31         ret
                        ; endp
0000000000015e32         align      8

                     loc_15e38:
0000000000015e38         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
0000000000015e3d         cmp        dword [rax], 0x9
0000000000015e40         pop        rbx
0000000000015e41         pop        rbp
0000000000015e42         pop        r12
0000000000015e44         setne      al
0000000000015e47         movzx      eax, al
0000000000015e4a         neg        eax
0000000000015e4c         ret
                        ; endp
0000000000015e4d         align      16                                          ; End of unwind block (FDE at 0x1a8fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
0000000000015e50         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1a94c), CODE XREF=rpl_mbrtowc+71
0000000000015e54         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000015e56         call       j_setlocale                                 ; setlocale
0000000000015e5b         mov        rdx, rax
0000000000015e5e         mov        eax, 0x1
0000000000015e63         test       rdx, rdx
0000000000015e66         je         loc_15e85

0000000000015e68         lea        rdi, qword [__re_error_msgid+400]           ; 0x17e90
0000000000015e6f         mov        ecx, 0x2
0000000000015e74         mov        rsi, rdx
0000000000015e77         rep  cmpsb byte [rsi], byte [rdi]
0000000000015e79         seta       cl
0000000000015e7c         sbb        cl, 0x0
0000000000015e7f         xor        eax, eax
0000000000015e81         test       cl, cl
0000000000015e83         jne        loc_15e90

                     loc_15e85:
0000000000015e85         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
0000000000015e89         ret
                        ; endp
0000000000015e8a         align      16

                     loc_15e90:
0000000000015e90         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
0000000000015e97         mov        ecx, 0x6
0000000000015e9c         mov        rsi, rdx
0000000000015e9f         rep  cmpsb byte [rsi], byte [rdi]
0000000000015ea1         seta       al
0000000000015ea4         sbb        al, 0x0
0000000000015ea6         test       al, al
0000000000015ea8         setne      al
0000000000015eab         add        rsp, 0x8
0000000000015eaf         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
0000000000015eb0         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0x1a94c), Begin of unwind block (FDE at 0x1a96c), CODE XREF=gettext_quote.part.1+11
0000000000015eb4         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
0000000000015eb9         call       j_nl_langinfo                               ; nl_langinfo
0000000000015ebe         test       rax, rax
0000000000015ec1         je         loc_15ee0

0000000000015ec3         cmp        byte [rax], 0x0
0000000000015ec6         lea        rdx, qword [aAscii]                         ; "ASCII"
0000000000015ecd         cmove      rax, rdx
0000000000015ed1         add        rsp, 0x8
0000000000015ed5         ret
                        ; endp
0000000000015ed6         align      32

                     loc_15ee0:
0000000000015ee0         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
0000000000015ee7         add        rsp, 0x8
0000000000015eeb         ret
                        ; endp
0000000000015eec         align      16                                          ; End of unwind block (FDE at 0x1a96c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
0000000000015ef0         push       r15                                         ; Begin of unwind block (FDE at 0x1a98c), DATA XREF=_start+22
0000000000015ef2         push       r14
0000000000015ef4         mov        r15, rdx
0000000000015ef7         push       r13
0000000000015ef9         push       r12
0000000000015efb         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
0000000000015f02         push       rbp
0000000000015f03         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
0000000000015f0a         push       rbx
0000000000015f0b         mov        r13d, edi
0000000000015f0e         mov        r14, rsi
0000000000015f11         sub        rbp, r12
0000000000015f14         sub        rsp, 0x8
0000000000015f18         sar        rbp, 0x3
0000000000015f1c         call       _init                                       ; _init
0000000000015f21         test       rbp, rbp
0000000000015f24         je         loc_15f46

0000000000015f26         xor        ebx, ebx
0000000000015f28         nop        dword [rax+rax]

                     loc_15f30:
0000000000015f30         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
0000000000015f33         mov        rsi, r14
0000000000015f36         mov        edi, r13d
0000000000015f39         call       qword [r12+rbx*8]
0000000000015f3d         add        rbx, 0x1
0000000000015f41         cmp        rbp, rbx
0000000000015f44         jne        loc_15f30

                     loc_15f46:
0000000000015f46         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
0000000000015f4a         pop        rbx
0000000000015f4b         pop        rbp
0000000000015f4c         pop        r12
0000000000015f4e         pop        r13
0000000000015f50         pop        r14
0000000000015f52         pop        r15
0000000000015f54         ret
                        ; endp
0000000000015f55         align      32                                          ; End of unwind block (FDE at 0x1a98c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
0000000000015f60         ret                                                    ; Begin of unwind block (FDE at 0x1a9d4), DATA XREF=_start+15
                        ; endp
0000000000015f62         align      16                                          ; End of unwind block (FDE at 0x1a9d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
0000000000015f70         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0x1a9ec), __dso_handle, CODE XREF=main+113
0000000000015f77         xor        esi, esi
0000000000015f79         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
0000000000015f7e         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x1a9ec)
0000000000015f7f         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0x15f80; 0x15f89[ (9 bytes)
        ; File offset : [89984; 89993[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
0000000000015f80         sub        rsp, 0x8
0000000000015f84         add        rsp, 0x8
0000000000015f88         ret
                        ; endp
0000000000015f89         db  0x00 ; '.'
0000000000015f8a         db  0x00 ; '.'
0000000000015f8b         db  0x00 ; '.'
0000000000015f8c         db  0x00 ; '.'
0000000000015f8d         db  0x00 ; '.'
0000000000015f8e         db  0x00 ; '.'
0000000000015f8f         db  0x00 ; '.'
0000000000015f90         db  0x00 ; '.'
0000000000015f91         db  0x00 ; '.'
0000000000015f92         db  0x00 ; '.'
0000000000015f93         db  0x00 ; '.'
0000000000015f94         db  0x00 ; '.'
0000000000015f95         db  0x00 ; '.'
0000000000015f96         db  0x00 ; '.'
0000000000015f97         db  0x00 ; '.'
0000000000015f98         db  0x00 ; '.'
0000000000015f99         db  0x00 ; '.'
0000000000015f9a         db  0x00 ; '.'
0000000000015f9b         db  0x00 ; '.'
0000000000015f9c         db  0x00 ; '.'
0000000000015f9d         db  0x00 ; '.'
0000000000015f9e         db  0x00 ; '.'
0000000000015f9f         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0x15fa0; 0x17e9e[ (7934 bytes)
        ; File offset : [90016; 97950[ (7934 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
0000000000015fa0         db  0x01 ; '.'
0000000000015fa1         db  0x00 ; '.'
0000000000015fa2         db  0x02 ; '.'
0000000000015fa3         db  0x00 ; '.'
0000000000015fa4         db  0x25 ; '%'                                         ; DATA XREF=make_filename+138
0000000000015fa5         db  0x30 ; '0'
0000000000015fa6         db  0x2a ; '*'
0000000000015fa7         db  0x75 ; 'u'
0000000000015fa8         db  0x00 ; '.'
                     aWriteErrorForS:
0000000000015fa9         db         "write error for %s", 0                     ; DATA XREF=close_output_file+407, save_line_to_file+72
0000000000015fbc         db  0x77 ; 'w'                                         ; DATA XREF=create_output_file+132
0000000000015fbd         db  0x00 ; '.'
                     aOnRepetitionSn:
0000000000015fbe         db         " on repetition %s\n", 0                    ; DATA XREF=regexp_error+124, handle_line_error.isra.1+121
                     aMemoryExhauste:
0000000000015fd1         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aReadError:
0000000000015fe2         db         "read error", 0                             ; DATA XREF=main+3397, load_buffer.part.5+594
                     aSSMatchNotFoun:
0000000000015fed         db         "%s: %s: match not found", 0                ; DATA XREF=regexp_error+51
0000000000016005         db  0x62 ; 'b'                                         ; DATA XREF=find_line+117
0000000000016006         db  0x00 ; '.'
                     aInputDisappear:
0000000000016007         db         "input disappeared", 0                      ; DATA XREF=get_first_line_in_buffer+56
                     aCsplit:
0000000000016019         db         "csplit", 0                                 ; DATA XREF=main+540, usage+453, usage+764, usage+948, usage+967, usage+1001
0000000000016020         db  0x5b ; '['                                         ; DATA XREF=usage+465
0000000000016021         db  0x00 ; '.'
                     aTestInvocation:
0000000000016022         db         "test invocation", 0                        ; DATA XREF=usage+504
                     aMulticallInvoc:
0000000000016032         db         "Multi-call invocation", 0                  ; DATA XREF=usage+552
                     aSha224sum:
0000000000016048         db         "sha224sum", 0                              ; DATA XREF=usage+569
                     aSha2Utilities:
0000000000016052         db         "sha2 utilities", 0                         ; DATA XREF=usage+581
                     aSha256sum:
0000000000016061         db         "sha256sum", 0                              ; DATA XREF=usage+472
                     aSha384sum:
000000000001606b         db         "sha384sum", 0                              ; DATA XREF=usage+516
                     aSha512sum:
0000000000016075         db         "sha512sum", 0                              ; DATA XREF=usage+540
                     aNsOnlineHelpSn:
000000000001607f         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+650
0000000000016096         db  0x47 ; 'G'                                         ; DATA XREF=main+533, usage+678, usage+871, emit_bug_reporting_address+68
0000000000016097         db  0x4e ; 'N'
0000000000016098         db  0x55 ; 'U'
0000000000016099         db  0x20 ; ' '
                     aCoreutils:
000000000001609a         db         "coreutils", 0                              ; DATA XREF=main+82, main+94, usage+528
00000000000160a4         db  0x65 ; 'e'                                         ; DATA XREF=usage+717, usage+910
00000000000160a5         db  0x6e ; 'n'
00000000000160a6         db  0x5f ; '_'                                         ; DATA XREF=sub_13290+456
00000000000160a7         db  0x00 ; '.'
                     aFullDocumentat:
00000000000160a8         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+745, usage+934
                     aUsrlocalsharel:
00000000000160c3         db         "/usr/local/share/locale", 0                ; DATA XREF=main+75
00000000000160db         db  0x78 ; 'x'                                         ; DATA XREF=main+118
00000000000160dc         db  0x78 ; 'x'
00000000000160dd         db  0x00 ; '.'
                     aInvalidNumber:
00000000000160de         db         "invalid number", 0                         ; DATA XREF=main+341
                     aDavidMackenzie:
00000000000160ed         db         "David MacKenzie", 0                        ; DATA XREF=main+519
                     aStuartKemp:
00000000000160fd         db         "Stuart Kemp", 0                            ; DATA XREF=main+526
                     aFbknsqz:
0000000000016109         db         "f:b:kn:sqz", 0                             ; DATA XREF=main+196
                     aMissingOperand:
0000000000016114         db         "missing operand", 0                        ; DATA XREF=main+3342
                     aMissingOperand_16124:        // aMissingOperand
0000000000016124         db         "missing operand after %s", 0               ; DATA XREF=main+3829
                     aCannotOpenSFor:
000000000001613d         db         "cannot open %s for reading", 0             ; DATA XREF=main+2738
                     aSInvalidPatter:
0000000000016158         db         "%s: invalid pattern", 0                    ; DATA XREF=main+3123
                     aSLineNumberOut:
000000000001616c         db         "%s: line number out of range", 0           ; DATA XREF=main+3716
                     aDigits:
0000000000016189         db         "digits", 0
                     aQuiet:
0000000000016190         db         "quiet", 0
                     aSilent:
0000000000016196         db         "silent", 0
                     aKeepfiles:
000000000001619d         db         "keep-files", 0
                     aElideemptyfile:
00000000000161a8         db         "elide-empty-files", 0
                     aPrefix:
00000000000161ba         db         "prefix", 0
                     aSuffixformat:
00000000000161c1         db         "suffix-format", 0
                     aSuppressmatche_161cf:        // aSuppressmatche
00000000000161cf         db         "suppress-matched", 0
                     aHelp:
00000000000161e0         db         "help", 0
                     aVersion:
00000000000161e5         db         "version", 0
00000000000161ed         align      16
                     aSSLineNumberOu:
00000000000161f0         db         "%s: %s: line number out of range", 0       ; DATA XREF=handle_line_error.isra.1+48
0000000000016211         align      8
                     aCoreutils831sr:
0000000000016218         db         "../coreutils-8.31/src/csplit.c", 0         ; DATA XREF=find_line+110
0000000000016237         align      8
                     aTrySHelpForMor:
0000000000016238         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
000000000001625f         align      32
                     aUsageSOptionFi:
0000000000016260         db         "Usage: %s [OPTION]... FILE PATTERN...\n", 0 ; DATA XREF=usage+93
0000000000016287         align      8
                     aOutputPiecesOf:
0000000000016288         db         "Output pieces of FILE separated by PATTERN(s) to files 'xx00', 'xx01', ...,\nand output byte counts of each piece to standard output.\n", 0 ; DATA XREF=usage+132
000000000001630e         align      16
                     aNreadStandardI:
0000000000016310         db         "\nRead standard input if FILE is -\n", 0   ; DATA XREF=usage+169
0000000000016333         align      8
                     aNmandatoryArgu:
0000000000016338         db         "\nMandatory arguments to long options are mandatory for short options too.\n", 0 ; DATA XREF=usage+206
0000000000016383         align      8
                     aBSuffixformatf:
0000000000016388         db         "  -b, --suffix-format=FORMAT  use sprintf FORMAT instead of %02d\n  -f, --prefix=PREFIX        use PREFIX instead of 'xx'\n  -k, --keep-files           do not remove output files on errors\n", 0 ; DATA XREF=usage+243
0000000000016444         align      8
                     aSuppressmatche:
0000000000016448         db         "      --suppress-matched     suppress the lines matching PATTERN\n", 0 ; DATA XREF=usage+280
000000000001648a         align      16
                     aNDigitsdigitsU:
0000000000016490         db         "  -n, --digits=DIGITS        use specified number of digits instead of 2\n  -s, --quiet, --silent      do not print counts of output file sizes\n  -z, --elide-empty-files    remove empty output files\n", 0 ; DATA XREF=usage+317
0000000000016557         align      8
                     aHelpDisplayThi:
0000000000016558         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+354
0000000000016585         align      8
                     aVersionOutputV:
0000000000016588         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+391
00000000000165be         align      64
                     aNeachPatternMa:
00000000000165c0         db         "\nEach PATTERN may be:\n  INTEGER            copy up to but not including specified line number\n  /REGEXP/[OFFSET]   copy up to but not including a matching line\n  %REGEXP%[OFFSET]   skip to, but not including a matching line\n  {INTEGER}          repeat the " ; DATA XREF=usage+428
00000000000166c0         db         "previous pattern specified number of times\n  {*}                repeat the previous pattern as many times as possible\n\nA line OFFSET is a required '+' or '-' followed by a positive integer.\n", 0
000000000001677f         align      128
                     aHttpswwwgnuorg:
0000000000016780         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+671, usage+771, usage+864, usage+974, emit_bug_reporting_address+61
                     aReportAnyTrans:
00000000000167a8         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+1015
00000000000167ef         align      16
                     aOrAvailableLoc:
00000000000167f0         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+814
0000000000016823         align      8
                     aMissingConvers:
0000000000016828         db         "missing %% conversion specification in suffix", 0 ; DATA XREF=main+3035
0000000000016856         align      8
                     aTooManyConvers:
0000000000016858         db         "too many %% conversion specifications in suffix", 0 ; DATA XREF=main+3659
                     aMissingConvers_16888:        // aMissingConvers
0000000000016888         db         "missing conversion specifier in suffix", 0 ; DATA XREF=main+3778
00000000000168af         align      16
                     aInvalidConvers:
00000000000168b0         db         "invalid conversion specifier in suffix: %c", 0 ; DATA XREF=main+2841
00000000000168db         align      32
                     aInvalidConvers_168e0:        // aInvalidConvers
00000000000168e0         db         "invalid conversion specifier in suffix: \%.3o", 0 ; DATA XREF=main+3001
000000000001690e         align      16
                     aInvalidFlagsIn:
0000000000016910         db         "invalid flags in conversion specification: %%%c%c", 0 ; DATA XREF=main+3446
0000000000016942         align      8
                     aSClosingDelimi:
0000000000016948         db         "%s: closing delimiter '%c' missing", 0     ; DATA XREF=main+3220
000000000001696b         align      16
                     aSInvalidRegula:
0000000000016970         db         "%s: invalid regular expression: %s", 0     ; DATA XREF=main+3173
0000000000016993         align      8
                     aSIntegerExpect:
0000000000016998         db         "%s: integer expected after delimiter", 0   ; DATA XREF=main+1240
00000000000169bd         align      64
                     aSLineNumberMus:
00000000000169c0         db         "%s: line number must be greater than zero", 0 ; DATA XREF=main+3075
00000000000169ea         align      16
                     aLineNumberSIsS:
00000000000169f0         db         "line number %s is smaller than preceding line number, %s", 0 ; DATA XREF=main+3287
0000000000016a29         align      16
                     aWarningLineNum:
0000000000016a30         db         "warning: line number %s is the same as preceding line number", 0 ; DATA XREF=main+1859
0000000000016a6d         align      16
                     aSIsRequiredInR:
0000000000016a70         db         "%s: '}' is required in repeat count", 0    ; DATA XREF=main+3602
0000000000016a94         align      8
                     aSIntegerRequir:
0000000000016a98         db         "%s}: integer required between '{' and '}'", 0 ; DATA XREF=main+3552
0000000000016ac2         align      8
                     aErrorInRegular:
0000000000016ac8         db         "error in regular expression search", 0     ; DATA XREF=main+3498
0000000000016aeb         align      256
                     __PRETTY_FUNCTION__.7224:
0000000000016b00         db         "find_line", 0                              ; DATA XREF=find_line+103
0000000000016b0a         db  0x00 ; '.'
0000000000016b0b         db  0x00 ; '.'
0000000000016b0c         db  0x00 ; '.'
0000000000016b0d         db  0x00 ; '.'
0000000000016b0e         db  0x00 ; '.'
0000000000016b0f         db  0x00 ; '.'
0000000000016b10         db  0x00 ; '.'
0000000000016b11         db  0x00 ; '.'
0000000000016b12         db  0x00 ; '.'
0000000000016b13         db  0x00 ; '.'
0000000000016b14         db  0x00 ; '.'
0000000000016b15         db  0x00 ; '.'
0000000000016b16         db  0x00 ; '.'
0000000000016b17         db  0x00 ; '.'
0000000000016b18         db  0x00 ; '.'
0000000000016b19         db  0x00 ; '.'
0000000000016b1a         db  0x00 ; '.'
0000000000016b1b         db  0x00 ; '.'
0000000000016b1c         db  0x00 ; '.'
0000000000016b1d         db  0x00 ; '.'
0000000000016b1e         db  0x00 ; '.'
0000000000016b1f         db  0x00 ; '.'
                     sig.7486:
0000000000016b20         db  0x0e ; '.'                                         ; DATA XREF=main+1288
0000000000016b21         db  0x00 ; '.'
0000000000016b22         db  0x00 ; '.'
0000000000016b23         db  0x00 ; '.'
0000000000016b24         db  0x01 ; '.'
0000000000016b25         db  0x00 ; '.'
0000000000016b26         db  0x00 ; '.'
0000000000016b27         db  0x00 ; '.'
0000000000016b28         db  0x02 ; '.'
0000000000016b29         db  0x00 ; '.'
0000000000016b2a         db  0x00 ; '.'
0000000000016b2b         db  0x00 ; '.'
0000000000016b2c         db  0x0d ; '.'
0000000000016b2d         db  0x00 ; '.'
0000000000016b2e         db  0x00 ; '.'
0000000000016b2f         db  0x00 ; '.'
0000000000016b30         db  0x03 ; '.'
0000000000016b31         db  0x00 ; '.'
0000000000016b32         db  0x00 ; '.'
0000000000016b33         db  0x00 ; '.'
0000000000016b34         db  0x0f ; '.'
0000000000016b35         db  0x00 ; '.'
0000000000016b36         db  0x00 ; '.'
0000000000016b37         db  0x00 ; '.'
0000000000016b38         db  0x1d ; '.'
0000000000016b39         db  0x00 ; '.'
0000000000016b3a         db  0x00 ; '.'
0000000000016b3b         db  0x00 ; '.'
0000000000016b3c         db  0x1b ; '.'
0000000000016b3d         db  0x00 ; '.'
0000000000016b3e         db  0x00 ; '.'
0000000000016b3f         db  0x00 ; '.'
0000000000016b40         db  0x1a ; '.'
0000000000016b41         db  0x00 ; '.'
0000000000016b42         db  0x00 ; '.'
0000000000016b43         db  0x00 ; '.'
0000000000016b44         db  0x18 ; '.'
0000000000016b45         db  0x00 ; '.'
0000000000016b46         db  0x00 ; '.'
0000000000016b47         db  0x00 ; '.'
0000000000016b48         db  0x19 ; '.'
0000000000016b49         db  0x00 ; '.'
0000000000016b4a         db  0x00 ; '.'
0000000000016b4b         db  0x00 ; '.'
                     a831:
0000000000016b4c         db         "8.31", 0                                   ; DATA XREF=Version
                     aWriteError:
0000000000016b51         db         "write error", 0                            ; DATA XREF=close_stdout+67
                     aSS:
0000000000016b5d         db         "%s: %s", 0                                 ; DATA XREF=close_stdout+108, xnumtoimax+127
0000000000016b64         align      8
                     aANullArgv0WasP:
0000000000016b68         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
0000000000016ba0         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
0000000000016ba8         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
0000000000016ba9         db  0x74 ; 't'
0000000000016baa         db  0x2d ; '-'                                         ; DATA XREF=main+758
0000000000016bab         db  0x00 ; '.'
0000000000016bac         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
0000000000016bad         db  0x80 ; '.'
0000000000016bae         db  0x98 ; '.'
0000000000016baf         db  0x00 ; '.'
0000000000016bb0         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
0000000000016bb1         db  0x80 ; '.'
0000000000016bb2         db  0x99 ; '.'
0000000000016bb3         db  0x00 ; '.'
0000000000016bb4         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
0000000000016bb5         db  0x07 ; '.'
0000000000016bb6         db  0x65 ; 'e'
0000000000016bb7         db  0x00 ; '.'
0000000000016bb8         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
0000000000016bb9         db  0xaf ; '.'
0000000000016bba         db  0x00 ; '.'
0000000000016bbb         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_4e20+1451, sub_4e20+1493, sub_4e20+2429
0000000000016bbc         db  0x00 ; '.'
0000000000016bbd         db  0x27 ; '''                                         ; DATA XREF=gettext_quote.part.1+39, quotearg_buffer_restyled+179, sub_4e20+132, sub_4e20+1338, sub_4e20+1670, sub_4e20+1697, sub_4e20+2352
0000000000016bbe         db  0x00 ; '.'
0000000000016bbf         db  0x60 ; '`'                                         ; DATA XREF=sub_4e20+1627, sub_4e20+1654
0000000000016bc0         db  0x00 ; '.'
                     aLiteral:
0000000000016bc1         db         "literal", 0
                     aShell:
0000000000016bc9         db         "shell", 0
                     aShellalways:
0000000000016bcf         db         "shell-always", 0
0000000000016bdc         db  0x73 ; 's'
0000000000016bdd         db  0x68 ; 'h'
0000000000016bde         db  0x65 ; 'e'
0000000000016bdf         db  0x6c ; 'l'
0000000000016be0         db  0x6c ; 'l'
0000000000016be1         db  0x2d ; '-'
                     aEscape:
0000000000016be2         db         "escape", 0
                     aShellescapealw:
0000000000016be9         db         "shell-escape-always", 0
0000000000016bfd         db  0x63 ; 'c'
0000000000016bfe         db  0x00 ; '.'
0000000000016bff         db  0x63 ; 'c'
                     aMaybe:
0000000000016c00         db         "-maybe", 0
                     aClocale:
0000000000016c07         db         "clocale", 0
0000000000016c0f         align      32
                     switch_table_16c20:        // switch_table
0000000000016c20         dd         quotearg_buffer_restyled.loc_551a-switch_table_16c20, quotearg_buffer_restyled.loc_4773-switch_table_16c20, quotearg_buffer_restyled.loc_5748-switch_table_16c20, quotearg_buffer_restyled.loc_5554-switch_table_16c20 ; switch table used at 0x4771 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
0000000000016c30         dd         quotearg_buffer_restyled.loc_5344-switch_table_16c20, quotearg_buffer_restyled.loc_53a0-switch_table_16c20, quotearg_buffer_restyled.loc_53f5-switch_table_16c20, quotearg_buffer_restyled.loc_543a-switch_table_16c20
0000000000016c40         dd         3 dup (quotearg_buffer_restyled.loc_5474-switch_table_16c20)
0000000000016c4c         db  0xa4 ; '.'                                         ; DATA XREF=quotearg_buffer_restyled+477
0000000000016c4d         db  0xde ; '.'
0000000000016c4e         db  0xfe ; '.'
0000000000016c4f         db  0xff ; '.'
0000000000016c50         db  0x8c ; '.'
0000000000016c51         db  0xdf ; '.'
0000000000016c52         db  0xfe ; '.'
0000000000016c53         db  0xff ; '.'
0000000000016c54         db  0x8c ; '.'
0000000000016c55         db  0xdf ; '.'
0000000000016c56         db  0xfe ; '.'
0000000000016c57         db  0xff ; '.'
0000000000016c58         db  0x8c ; '.'
0000000000016c59         db  0xdf ; '.'
0000000000016c5a         db  0xfe ; '.'
0000000000016c5b         db  0xff ; '.'
0000000000016c5c         db  0x8c ; '.'
0000000000016c5d         db  0xdf ; '.'
0000000000016c5e         db  0xfe ; '.'
0000000000016c5f         db  0xff ; '.'
0000000000016c60         db  0x8c ; '.'
0000000000016c61         db  0xdf ; '.'
0000000000016c62         db  0xfe ; '.'
0000000000016c63         db  0xff ; '.'
0000000000016c64         db  0x8c ; '.'
0000000000016c65         db  0xdf ; '.'
0000000000016c66         db  0xfe ; '.'
0000000000016c67         db  0xff ; '.'
0000000000016c68         db  0xe4 ; '.'
0000000000016c69         db  0xde ; '.'
0000000000016c6a         db  0xfe ; '.'
0000000000016c6b         db  0xff ; '.'
0000000000016c6c         db  0xec ; '.'
0000000000016c6d         db  0xdd ; '.'
0000000000016c6e         db  0xfe ; '.'
0000000000016c6f         db  0xff ; '.'
0000000000016c70         db  0xac ; '.'
0000000000016c71         db  0xdd ; '.'
0000000000016c72         db  0xfe ; '.'
0000000000016c73         db  0xff ; '.'
0000000000016c74         db  0x74 ; 't'
0000000000016c75         db  0xdf ; '.'
0000000000016c76         db  0xfe ; '.'
0000000000016c77         db  0xff ; '.'
0000000000016c78         db  0x64 ; 'd'
0000000000016c79         db  0xdf ; '.'
0000000000016c7a         db  0xfe ; '.'
0000000000016c7b         db  0xff ; '.'
0000000000016c7c         db  0x54 ; 'T'
0000000000016c7d         db  0xdf ; '.'
0000000000016c7e         db  0xfe ; '.'
0000000000016c7f         db  0xff ; '.'
0000000000016c80         db  0x44 ; 'D'
0000000000016c81         db  0xdf ; '.'
0000000000016c82         db  0xfe ; '.'
0000000000016c83         db  0xff ; '.'
0000000000016c84         db  0x8c ; '.'
0000000000016c85         db  0xdf ; '.'
0000000000016c86         db  0xfe ; '.'
0000000000016c87         db  0xff ; '.'
0000000000016c88         db  0x8c ; '.'
0000000000016c89         db  0xdf ; '.'
0000000000016c8a         db  0xfe ; '.'
0000000000016c8b         db  0xff ; '.'
0000000000016c8c         db  0x8c ; '.'
0000000000016c8d         db  0xdf ; '.'
0000000000016c8e         db  0xfe ; '.'
0000000000016c8f         db  0xff ; '.'
0000000000016c90         db  0x8c ; '.'
0000000000016c91         db  0xdf ; '.'
0000000000016c92         db  0xfe ; '.'
0000000000016c93         db  0xff ; '.'
0000000000016c94         db  0x8c ; '.'
0000000000016c95         db  0xdf ; '.'
0000000000016c96         db  0xfe ; '.'
0000000000016c97         db  0xff ; '.'
0000000000016c98         db  0x8c ; '.'
0000000000016c99         db  0xdf ; '.'
0000000000016c9a         db  0xfe ; '.'
0000000000016c9b         db  0xff ; '.'
0000000000016c9c         db  0x8c ; '.'
0000000000016c9d         db  0xdf ; '.'
0000000000016c9e         db  0xfe ; '.'
0000000000016c9f         db  0xff ; '.'
0000000000016ca0         db  0x8c ; '.'
0000000000016ca1         db  0xdf ; '.'
0000000000016ca2         db  0xfe ; '.'
0000000000016ca3         db  0xff ; '.'
0000000000016ca4         db  0x8c ; '.'
0000000000016ca5         db  0xdf ; '.'
0000000000016ca6         db  0xfe ; '.'
0000000000016ca7         db  0xff ; '.'
0000000000016ca8         db  0x8c ; '.'
0000000000016ca9         db  0xdf ; '.'
0000000000016caa         db  0xfe ; '.'
0000000000016cab         db  0xff ; '.'
0000000000016cac         db  0x8c ; '.'
0000000000016cad         db  0xdf ; '.'
0000000000016cae         db  0xfe ; '.'
0000000000016caf         db  0xff ; '.'
0000000000016cb0         db  0x8c ; '.'
0000000000016cb1         db  0xdf ; '.'
0000000000016cb2         db  0xfe ; '.'
0000000000016cb3         db  0xff ; '.'
0000000000016cb4         db  0x8c ; '.'
0000000000016cb5         db  0xdf ; '.'
0000000000016cb6         db  0xfe ; '.'
0000000000016cb7         db  0xff ; '.'
0000000000016cb8         db  0x8c ; '.'
0000000000016cb9         db  0xdf ; '.'
0000000000016cba         db  0xfe ; '.'
0000000000016cbb         db  0xff ; '.'
0000000000016cbc         db  0x8c ; '.'
0000000000016cbd         db  0xdf ; '.'
0000000000016cbe         db  0xfe ; '.'
0000000000016cbf         db  0xff ; '.'
0000000000016cc0         db  0x8c ; '.'
0000000000016cc1         db  0xdf ; '.'
0000000000016cc2         db  0xfe ; '.'
0000000000016cc3         db  0xff ; '.'
0000000000016cc4         db  0x8c ; '.'
0000000000016cc5         db  0xdf ; '.'
0000000000016cc6         db  0xfe ; '.'
0000000000016cc7         db  0xff ; '.'
0000000000016cc8         db  0x8c ; '.'
0000000000016cc9         db  0xdf ; '.'
0000000000016cca         db  0xfe ; '.'
0000000000016ccb         db  0xff ; '.'
0000000000016ccc         db  0x34 ; '4'
0000000000016ccd         db  0xdf ; '.'
0000000000016cce         db  0xfe ; '.'
0000000000016ccf         db  0xff ; '.'
0000000000016cd0         db  0x24 ; '$'
0000000000016cd1         db  0xdf ; '.'
0000000000016cd2         db  0xfe ; '.'
0000000000016cd3         db  0xff ; '.'
0000000000016cd4         db  0x24 ; '$'
0000000000016cd5         db  0xdf ; '.'
0000000000016cd6         db  0xfe ; '.'
0000000000016cd7         db  0xff ; '.'
0000000000016cd8         db  0xf4 ; '.'
0000000000016cd9         db  0xde ; '.'
0000000000016cda         db  0xfe ; '.'
0000000000016cdb         db  0xff ; '.'
0000000000016cdc         db  0x24 ; '$'
0000000000016cdd         db  0xdf ; '.'
0000000000016cde         db  0xfe ; '.'
0000000000016cdf         db  0xff ; '.'
0000000000016ce0         db  0xcc ; '.'
0000000000016ce1         db  0xde ; '.'
0000000000016ce2         db  0xfe ; '.'
0000000000016ce3         db  0xff ; '.'
0000000000016ce4         db  0x24 ; '$'
0000000000016ce5         db  0xdf ; '.'
0000000000016ce6         db  0xfe ; '.'
0000000000016ce7         db  0xff ; '.'
0000000000016ce8         db  0x87 ; '.'
0000000000016ce9         db  0xdd ; '.'
0000000000016cea         db  0xfe ; '.'
0000000000016ceb         db  0xff ; '.'
0000000000016cec         db  0x24 ; '$'
0000000000016ced         db  0xdf ; '.'
0000000000016cee         db  0xfe ; '.'
0000000000016cef         db  0xff ; '.'
0000000000016cf0         db  0x24 ; '$'
0000000000016cf1         db  0xdf ; '.'
0000000000016cf2         db  0xfe ; '.'
0000000000016cf3         db  0xff ; '.'
0000000000016cf4         db  0x24 ; '$'
0000000000016cf5         db  0xdf ; '.'
0000000000016cf6         db  0xfe ; '.'
0000000000016cf7         db  0xff ; '.'
0000000000016cf8         db  0xcc ; '.'
0000000000016cf9         db  0xde ; '.'
0000000000016cfa         db  0xfe ; '.'
0000000000016cfb         db  0xff ; '.'
0000000000016cfc         db  0xcc ; '.'
0000000000016cfd         db  0xde ; '.'
0000000000016cfe         db  0xfe ; '.'
0000000000016cff         db  0xff ; '.'
0000000000016d00         db  0xcc ; '.'
0000000000016d01         db  0xde ; '.'
0000000000016d02         db  0xfe ; '.'
0000000000016d03         db  0xff ; '.'
0000000000016d04         db  0xcc ; '.'
0000000000016d05         db  0xde ; '.'
0000000000016d06         db  0xfe ; '.'
0000000000016d07         db  0xff ; '.'
0000000000016d08         db  0xcc ; '.'
0000000000016d09         db  0xde ; '.'
0000000000016d0a         db  0xfe ; '.'
0000000000016d0b         db  0xff ; '.'
0000000000016d0c         db  0xcc ; '.'
0000000000016d0d         db  0xde ; '.'
0000000000016d0e         db  0xfe ; '.'
0000000000016d0f         db  0xff ; '.'
0000000000016d10         db  0xcc ; '.'
0000000000016d11         db  0xde ; '.'
0000000000016d12         db  0xfe ; '.'
0000000000016d13         db  0xff ; '.'
0000000000016d14         db  0xcc ; '.'
0000000000016d15         db  0xde ; '.'
0000000000016d16         db  0xfe ; '.'
0000000000016d17         db  0xff ; '.'
0000000000016d18         db  0xcc ; '.'
0000000000016d19         db  0xde ; '.'
0000000000016d1a         db  0xfe ; '.'
0000000000016d1b         db  0xff ; '.'
0000000000016d1c         db  0xcc ; '.'
0000000000016d1d         db  0xde ; '.'
0000000000016d1e         db  0xfe ; '.'
0000000000016d1f         db  0xff ; '.'
0000000000016d20         db  0xcc ; '.'
0000000000016d21         db  0xde ; '.'
0000000000016d22         db  0xfe ; '.'
0000000000016d23         db  0xff ; '.'
0000000000016d24         db  0xcc ; '.'
0000000000016d25         db  0xde ; '.'
0000000000016d26         db  0xfe ; '.'
0000000000016d27         db  0xff ; '.'
0000000000016d28         db  0xcc ; '.'
0000000000016d29         db  0xde ; '.'
0000000000016d2a         db  0xfe ; '.'
0000000000016d2b         db  0xff ; '.'
0000000000016d2c         db  0xcc ; '.'
0000000000016d2d         db  0xde ; '.'
0000000000016d2e         db  0xfe ; '.'
0000000000016d2f         db  0xff ; '.'
0000000000016d30         db  0xcc ; '.'
0000000000016d31         db  0xde ; '.'
0000000000016d32         db  0xfe ; '.'
0000000000016d33         db  0xff ; '.'
0000000000016d34         db  0xcc ; '.'
0000000000016d35         db  0xde ; '.'
0000000000016d36         db  0xfe ; '.'
0000000000016d37         db  0xff ; '.'
0000000000016d38         db  0x24 ; '$'
0000000000016d39         db  0xdf ; '.'
0000000000016d3a         db  0xfe ; '.'
0000000000016d3b         db  0xff ; '.'
0000000000016d3c         db  0x24 ; '$'
0000000000016d3d         db  0xdf ; '.'
0000000000016d3e         db  0xfe ; '.'
0000000000016d3f         db  0xff ; '.'
0000000000016d40         db  0x24 ; '$'
0000000000016d41         db  0xdf ; '.'
0000000000016d42         db  0xfe ; '.'
0000000000016d43         db  0xff ; '.'
0000000000016d44         db  0x24 ; '$'
0000000000016d45         db  0xdf ; '.'
0000000000016d46         db  0xfe ; '.'
0000000000016d47         db  0xff ; '.'
0000000000016d48         db  0x57 ; 'W'
0000000000016d49         db  0xdd ; '.'
0000000000016d4a         db  0xfe ; '.'
0000000000016d4b         db  0xff ; '.'
0000000000016d4c         db  0x8c ; '.'
0000000000016d4d         db  0xdf ; '.'
0000000000016d4e         db  0xfe ; '.'
0000000000016d4f         db  0xff ; '.'
0000000000016d50         db  0xcc ; '.'
0000000000016d51         db  0xde ; '.'
0000000000016d52         db  0xfe ; '.'
0000000000016d53         db  0xff ; '.'
0000000000016d54         db  0xcc ; '.'
0000000000016d55         db  0xde ; '.'
0000000000016d56         db  0xfe ; '.'
0000000000016d57         db  0xff ; '.'
0000000000016d58         db  0xcc ; '.'
0000000000016d59         db  0xde ; '.'
0000000000016d5a         db  0xfe ; '.'
0000000000016d5b         db  0xff ; '.'
0000000000016d5c         db  0xcc ; '.'
0000000000016d5d         db  0xde ; '.'
0000000000016d5e         db  0xfe ; '.'
0000000000016d5f         db  0xff ; '.'
0000000000016d60         db  0xcc ; '.'
0000000000016d61         db  0xde ; '.'
0000000000016d62         db  0xfe ; '.'
0000000000016d63         db  0xff ; '.'
0000000000016d64         db  0xcc ; '.'
0000000000016d65         db  0xde ; '.'
0000000000016d66         db  0xfe ; '.'
0000000000016d67         db  0xff ; '.'
0000000000016d68         db  0xcc ; '.'
0000000000016d69         db  0xde ; '.'
0000000000016d6a         db  0xfe ; '.'
0000000000016d6b         db  0xff ; '.'
0000000000016d6c         db  0xcc ; '.'
0000000000016d6d         db  0xde ; '.'
0000000000016d6e         db  0xfe ; '.'
0000000000016d6f         db  0xff ; '.'
0000000000016d70         db  0xcc ; '.'
0000000000016d71         db  0xde ; '.'
0000000000016d72         db  0xfe ; '.'
0000000000016d73         db  0xff ; '.'
0000000000016d74         db  0xcc ; '.'
0000000000016d75         db  0xde ; '.'
0000000000016d76         db  0xfe ; '.'
0000000000016d77         db  0xff ; '.'
0000000000016d78         db  0xcc ; '.'
0000000000016d79         db  0xde ; '.'
0000000000016d7a         db  0xfe ; '.'
0000000000016d7b         db  0xff ; '.'
0000000000016d7c         db  0xcc ; '.'
0000000000016d7d         db  0xde ; '.'
0000000000016d7e         db  0xfe ; '.'
0000000000016d7f         db  0xff ; '.'
0000000000016d80         db  0xcc ; '.'
0000000000016d81         db  0xde ; '.'
0000000000016d82         db  0xfe ; '.'
0000000000016d83         db  0xff ; '.'
0000000000016d84         db  0xcc ; '.'
0000000000016d85         db  0xde ; '.'
0000000000016d86         db  0xfe ; '.'
0000000000016d87         db  0xff ; '.'
0000000000016d88         db  0xcc ; '.'
0000000000016d89         db  0xde ; '.'
0000000000016d8a         db  0xfe ; '.'
0000000000016d8b         db  0xff ; '.'
0000000000016d8c         db  0xcc ; '.'
0000000000016d8d         db  0xde ; '.'
0000000000016d8e         db  0xfe ; '.'
0000000000016d8f         db  0xff ; '.'
0000000000016d90         db  0xcc ; '.'
0000000000016d91         db  0xde ; '.'
0000000000016d92         db  0xfe ; '.'
0000000000016d93         db  0xff ; '.'
0000000000016d94         db  0xcc ; '.'
0000000000016d95         db  0xde ; '.'
0000000000016d96         db  0xfe ; '.'
0000000000016d97         db  0xff ; '.'
0000000000016d98         db  0xcc ; '.'
0000000000016d99         db  0xde ; '.'
0000000000016d9a         db  0xfe ; '.'
0000000000016d9b         db  0xff ; '.'
0000000000016d9c         db  0xcc ; '.'
0000000000016d9d         db  0xde ; '.'
0000000000016d9e         db  0xfe ; '.'
0000000000016d9f         db  0xff ; '.'
0000000000016da0         db  0xcc ; '.'
0000000000016da1         db  0xde ; '.'
0000000000016da2         db  0xfe ; '.'
0000000000016da3         db  0xff ; '.'
0000000000016da4         db  0xcc ; '.'
0000000000016da5         db  0xde ; '.'
0000000000016da6         db  0xfe ; '.'
0000000000016da7         db  0xff ; '.'
0000000000016da8         db  0xcc ; '.'
0000000000016da9         db  0xde ; '.'
0000000000016daa         db  0xfe ; '.'
0000000000016dab         db  0xff ; '.'
0000000000016dac         db  0xcc ; '.'
0000000000016dad         db  0xde ; '.'
0000000000016dae         db  0xfe ; '.'
0000000000016daf         db  0xff ; '.'
0000000000016db0         db  0xcc ; '.'
0000000000016db1         db  0xde ; '.'
0000000000016db2         db  0xfe ; '.'
0000000000016db3         db  0xff ; '.'
0000000000016db4         db  0xcc ; '.'
0000000000016db5         db  0xde ; '.'
0000000000016db6         db  0xfe ; '.'
0000000000016db7         db  0xff ; '.'
0000000000016db8         db  0x24 ; '$'
0000000000016db9         db  0xdf ; '.'
0000000000016dba         db  0xfe ; '.'
0000000000016dbb         db  0xff ; '.'
0000000000016dbc         db  0xfc ; '.'
0000000000016dbd         db  0xdd ; '.'
0000000000016dbe         db  0xfe ; '.'
0000000000016dbf         db  0xff ; '.'
0000000000016dc0         db  0xcc ; '.'
0000000000016dc1         db  0xde ; '.'
0000000000016dc2         db  0xfe ; '.'
0000000000016dc3         db  0xff ; '.'
0000000000016dc4         db  0x24 ; '$'
0000000000016dc5         db  0xdf ; '.'
0000000000016dc6         db  0xfe ; '.'
0000000000016dc7         db  0xff ; '.'
0000000000016dc8         db  0xcc ; '.'
0000000000016dc9         db  0xde ; '.'
0000000000016dca         db  0xfe ; '.'
0000000000016dcb         db  0xff ; '.'
0000000000016dcc         db  0x24 ; '$'
0000000000016dcd         db  0xdf ; '.'
0000000000016dce         db  0xfe ; '.'
0000000000016dcf         db  0xff ; '.'
0000000000016dd0         db  0xcc ; '.'
0000000000016dd1         db  0xde ; '.'
0000000000016dd2         db  0xfe ; '.'
0000000000016dd3         db  0xff ; '.'
0000000000016dd4         db  0xcc ; '.'
0000000000016dd5         db  0xde ; '.'
0000000000016dd6         db  0xfe ; '.'
0000000000016dd7         db  0xff ; '.'
0000000000016dd8         db  0xcc ; '.'
0000000000016dd9         db  0xde ; '.'
0000000000016dda         db  0xfe ; '.'
0000000000016ddb         db  0xff ; '.'
0000000000016ddc         db  0xcc ; '.'
0000000000016ddd         db  0xde ; '.'
0000000000016dde         db  0xfe ; '.'
0000000000016ddf         db  0xff ; '.'
0000000000016de0         db  0xcc ; '.'
0000000000016de1         db  0xde ; '.'
0000000000016de2         db  0xfe ; '.'
0000000000016de3         db  0xff ; '.'
0000000000016de4         db  0xcc ; '.'
0000000000016de5         db  0xde ; '.'
0000000000016de6         db  0xfe ; '.'
0000000000016de7         db  0xff ; '.'
0000000000016de8         db  0xcc ; '.'
0000000000016de9         db  0xde ; '.'
0000000000016dea         db  0xfe ; '.'
0000000000016deb         db  0xff ; '.'
0000000000016dec         db  0xcc ; '.'
0000000000016ded         db  0xde ; '.'
0000000000016dee         db  0xfe ; '.'
0000000000016def         db  0xff ; '.'
0000000000016df0         db  0xcc ; '.'
0000000000016df1         db  0xde ; '.'
0000000000016df2         db  0xfe ; '.'
0000000000016df3         db  0xff ; '.'
0000000000016df4         db  0xcc ; '.'
0000000000016df5         db  0xde ; '.'
0000000000016df6         db  0xfe ; '.'
0000000000016df7         db  0xff ; '.'
0000000000016df8         db  0xcc ; '.'
0000000000016df9         db  0xde ; '.'
0000000000016dfa         db  0xfe ; '.'
0000000000016dfb         db  0xff ; '.'
0000000000016dfc         db  0xcc ; '.'
0000000000016dfd         db  0xde ; '.'
0000000000016dfe         db  0xfe ; '.'
0000000000016dff         db  0xff ; '.'
0000000000016e00         db  0xcc ; '.'
0000000000016e01         db  0xde ; '.'
0000000000016e02         db  0xfe ; '.'
0000000000016e03         db  0xff ; '.'
0000000000016e04         db  0xcc ; '.'
0000000000016e05         db  0xde ; '.'
0000000000016e06         db  0xfe ; '.'
0000000000016e07         db  0xff ; '.'
0000000000016e08         db  0xcc ; '.'
0000000000016e09         db  0xde ; '.'
0000000000016e0a         db  0xfe ; '.'
0000000000016e0b         db  0xff ; '.'
0000000000016e0c         db  0xcc ; '.'
0000000000016e0d         db  0xde ; '.'
0000000000016e0e         db  0xfe ; '.'
0000000000016e0f         db  0xff ; '.'
0000000000016e10         db  0xcc ; '.'
0000000000016e11         db  0xde ; '.'
0000000000016e12         db  0xfe ; '.'
0000000000016e13         db  0xff ; '.'
0000000000016e14         db  0xcc ; '.'
0000000000016e15         db  0xde ; '.'
0000000000016e16         db  0xfe ; '.'
0000000000016e17         db  0xff ; '.'
0000000000016e18         db  0xcc ; '.'
0000000000016e19         db  0xde ; '.'
0000000000016e1a         db  0xfe ; '.'
0000000000016e1b         db  0xff ; '.'
0000000000016e1c         db  0xcc ; '.'
0000000000016e1d         db  0xde ; '.'
0000000000016e1e         db  0xfe ; '.'
0000000000016e1f         db  0xff ; '.'
0000000000016e20         db  0xcc ; '.'
0000000000016e21         db  0xde ; '.'
0000000000016e22         db  0xfe ; '.'
0000000000016e23         db  0xff ; '.'
0000000000016e24         db  0xcc ; '.'
0000000000016e25         db  0xde ; '.'
0000000000016e26         db  0xfe ; '.'
0000000000016e27         db  0xff ; '.'
0000000000016e28         db  0xcc ; '.'
0000000000016e29         db  0xde ; '.'
0000000000016e2a         db  0xfe ; '.'
0000000000016e2b         db  0xff ; '.'
0000000000016e2c         db  0xcc ; '.'
0000000000016e2d         db  0xde ; '.'
0000000000016e2e         db  0xfe ; '.'
0000000000016e2f         db  0xff ; '.'
0000000000016e30         db  0xcc ; '.'
0000000000016e31         db  0xde ; '.'
0000000000016e32         db  0xfe ; '.'
0000000000016e33         db  0xff ; '.'
0000000000016e34         db  0xcc ; '.'
0000000000016e35         db  0xde ; '.'
0000000000016e36         db  0xfe ; '.'
0000000000016e37         db  0xff ; '.'
0000000000016e38         db  0x87 ; '.'
0000000000016e39         db  0xdc ; '.'
0000000000016e3a         db  0xfe ; '.'
0000000000016e3b         db  0xff ; '.'
0000000000016e3c         db  0x24 ; '$'
0000000000016e3d         db  0xdf ; '.'
0000000000016e3e         db  0xfe ; '.'
0000000000016e3f         db  0xff ; '.'
0000000000016e40         db  0x87 ; '.'
0000000000016e41         db  0xdc ; '.'
0000000000016e42         db  0xfe ; '.'
0000000000016e43         db  0xff ; '.'
0000000000016e44         db  0xf4 ; '.'
0000000000016e45         db  0xde ; '.'
0000000000016e46         db  0xfe ; '.'
0000000000016e47         db  0xff ; '.'
0000000000016e48         db  0x78 ; 'x'                                         ; DATA XREF=sub_4bc0+137
0000000000016e49         db  0xde ; '.'
0000000000016e4a         db  0xfe ; '.'
0000000000016e4b         db  0xff ; '.'
0000000000016e4c         db  0x88 ; '.'
0000000000016e4d         db  0xdd ; '.'
0000000000016e4e         db  0xfe ; '.'
0000000000016e4f         db  0xff ; '.'
0000000000016e50         db  0x88 ; '.'
0000000000016e51         db  0xdd ; '.'
0000000000016e52         db  0xfe ; '.'
0000000000016e53         db  0xff ; '.'
0000000000016e54         db  0x88 ; '.'
0000000000016e55         db  0xdd ; '.'
0000000000016e56         db  0xfe ; '.'
0000000000016e57         db  0xff ; '.'
0000000000016e58         db  0x88 ; '.'
0000000000016e59         db  0xdd ; '.'
0000000000016e5a         db  0xfe ; '.'
0000000000016e5b         db  0xff ; '.'
0000000000016e5c         db  0x88 ; '.'
0000000000016e5d         db  0xdd ; '.'
0000000000016e5e         db  0xfe ; '.'
0000000000016e5f         db  0xff ; '.'
0000000000016e60         db  0x88 ; '.'
0000000000016e61         db  0xdd ; '.'
0000000000016e62         db  0xfe ; '.'
0000000000016e63         db  0xff ; '.'
0000000000016e64         db  0x68 ; 'h'
0000000000016e65         db  0xde ; '.'
0000000000016e66         db  0xfe ; '.'
0000000000016e67         db  0xff ; '.'
0000000000016e68         db  0xb8 ; '.'
0000000000016e69         db  0xdf ; '.'
0000000000016e6a         db  0xfe ; '.'
0000000000016e6b         db  0xff ; '.'
0000000000016e6c         db  0xa0 ; '.'
0000000000016e6d         db  0xdf ; '.'
0000000000016e6e         db  0xfe ; '.'
0000000000016e6f         db  0xff ; '.'
0000000000016e70         db  0x50 ; 'P'
0000000000016e71         db  0xde ; '.'
0000000000016e72         db  0xfe ; '.'
0000000000016e73         db  0xff ; '.'
0000000000016e74         db  0x90 ; '.'
0000000000016e75         db  0xdf ; '.'
0000000000016e76         db  0xfe ; '.'
0000000000016e77         db  0xff ; '.'
0000000000016e78         db  0x38 ; '8'
0000000000016e79         db  0xde ; '.'
0000000000016e7a         db  0xfe ; '.'
0000000000016e7b         db  0xff ; '.'
0000000000016e7c         db  0x78 ; 'x'
0000000000016e7d         db  0xdf ; '.'
0000000000016e7e         db  0xfe ; '.'
0000000000016e7f         db  0xff ; '.'
0000000000016e80         db  0x88 ; '.'
0000000000016e81         db  0xdd ; '.'
0000000000016e82         db  0xfe ; '.'
0000000000016e83         db  0xff ; '.'
0000000000016e84         db  0x88 ; '.'
0000000000016e85         db  0xdd ; '.'
0000000000016e86         db  0xfe ; '.'
0000000000016e87         db  0xff ; '.'
0000000000016e88         db  0x88 ; '.'
0000000000016e89         db  0xdd ; '.'
0000000000016e8a         db  0xfe ; '.'
0000000000016e8b         db  0xff ; '.'
0000000000016e8c         db  0x88 ; '.'
0000000000016e8d         db  0xdd ; '.'
0000000000016e8e         db  0xfe ; '.'
0000000000016e8f         db  0xff ; '.'
0000000000016e90         db  0x88 ; '.'
0000000000016e91         db  0xdd ; '.'
0000000000016e92         db  0xfe ; '.'
0000000000016e93         db  0xff ; '.'
0000000000016e94         db  0x88 ; '.'
0000000000016e95         db  0xdd ; '.'
0000000000016e96         db  0xfe ; '.'
0000000000016e97         db  0xff ; '.'
0000000000016e98         db  0x88 ; '.'
0000000000016e99         db  0xdd ; '.'
0000000000016e9a         db  0xfe ; '.'
0000000000016e9b         db  0xff ; '.'
0000000000016e9c         db  0x88 ; '.'
0000000000016e9d         db  0xdd ; '.'
0000000000016e9e         db  0xfe ; '.'
0000000000016e9f         db  0xff ; '.'
0000000000016ea0         db  0x88 ; '.'
0000000000016ea1         db  0xdd ; '.'
0000000000016ea2         db  0xfe ; '.'
0000000000016ea3         db  0xff ; '.'
0000000000016ea4         db  0x88 ; '.'
0000000000016ea5         db  0xdd ; '.'
0000000000016ea6         db  0xfe ; '.'
0000000000016ea7         db  0xff ; '.'
0000000000016ea8         db  0x88 ; '.'
0000000000016ea9         db  0xdd ; '.'
0000000000016eaa         db  0xfe ; '.'
0000000000016eab         db  0xff ; '.'
0000000000016eac         db  0x88 ; '.'
0000000000016ead         db  0xdd ; '.'
0000000000016eae         db  0xfe ; '.'
0000000000016eaf         db  0xff ; '.'
0000000000016eb0         db  0x88 ; '.'
0000000000016eb1         db  0xdd ; '.'
0000000000016eb2         db  0xfe ; '.'
0000000000016eb3         db  0xff ; '.'
0000000000016eb4         db  0x88 ; '.'
0000000000016eb5         db  0xdd ; '.'
0000000000016eb6         db  0xfe ; '.'
0000000000016eb7         db  0xff ; '.'
0000000000016eb8         db  0x88 ; '.'
0000000000016eb9         db  0xdd ; '.'
0000000000016eba         db  0xfe ; '.'
0000000000016ebb         db  0xff ; '.'
0000000000016ebc         db  0x88 ; '.'
0000000000016ebd         db  0xdd ; '.'
0000000000016ebe         db  0xfe ; '.'
0000000000016ebf         db  0xff ; '.'
0000000000016ec0         db  0x88 ; '.'
0000000000016ec1         db  0xdd ; '.'
0000000000016ec2         db  0xfe ; '.'
0000000000016ec3         db  0xff ; '.'
0000000000016ec4         db  0x88 ; '.'
0000000000016ec5         db  0xdd ; '.'
0000000000016ec6         db  0xfe ; '.'
0000000000016ec7         db  0xff ; '.'
0000000000016ec8         db  0x60 ; '`'
0000000000016ec9         db  0xdf ; '.'
0000000000016eca         db  0xfe ; '.'
0000000000016ecb         db  0xff ; '.'
0000000000016ecc         db  0x48 ; 'H'
0000000000016ecd         db  0xdf ; '.'
0000000000016ece         db  0xfe ; '.'
0000000000016ecf         db  0xff ; '.'
0000000000016ed0         db  0x48 ; 'H'
0000000000016ed1         db  0xdf ; '.'
0000000000016ed2         db  0xfe ; '.'
0000000000016ed3         db  0xff ; '.'
0000000000016ed4         db  0x30 ; '0'
0000000000016ed5         db  0xdf ; '.'
0000000000016ed6         db  0xfe ; '.'
0000000000016ed7         db  0xff ; '.'
0000000000016ed8         db  0x48 ; 'H'
0000000000016ed9         db  0xdf ; '.'
0000000000016eda         db  0xfe ; '.'
0000000000016edb         db  0xff ; '.'
0000000000016edc         db  0x18 ; '.'
0000000000016edd         db  0xdf ; '.'
0000000000016ede         db  0xfe ; '.'
0000000000016edf         db  0xff ; '.'
0000000000016ee0         db  0x48 ; 'H'
0000000000016ee1         db  0xdf ; '.'
0000000000016ee2         db  0xfe ; '.'
0000000000016ee3         db  0xff ; '.'
0000000000016ee4         db  0x88 ; '.'
0000000000016ee5         db  0xdb ; '.'
0000000000016ee6         db  0xfe ; '.'
0000000000016ee7         db  0xff ; '.'
0000000000016ee8         db  0x48 ; 'H'
0000000000016ee9         db  0xdf ; '.'
0000000000016eea         db  0xfe ; '.'
0000000000016eeb         db  0xff ; '.'
0000000000016eec         db  0x48 ; 'H'
0000000000016eed         db  0xdf ; '.'
0000000000016eee         db  0xfe ; '.'
0000000000016eef         db  0xff ; '.'
0000000000016ef0         db  0x48 ; 'H'
0000000000016ef1         db  0xdf ; '.'
0000000000016ef2         db  0xfe ; '.'
0000000000016ef3         db  0xff ; '.'
0000000000016ef4         db  0x18 ; '.'
0000000000016ef5         db  0xdf ; '.'
0000000000016ef6         db  0xfe ; '.'
0000000000016ef7         db  0xff ; '.'
0000000000016ef8         db  0x18 ; '.'
0000000000016ef9         db  0xdf ; '.'
0000000000016efa         db  0xfe ; '.'
0000000000016efb         db  0xff ; '.'
0000000000016efc         db  0x18 ; '.'
0000000000016efd         db  0xdf ; '.'
0000000000016efe         db  0xfe ; '.'
0000000000016eff         db  0xff ; '.'
0000000000016f00         db  0x18 ; '.'
0000000000016f01         db  0xdf ; '.'
0000000000016f02         db  0xfe ; '.'
0000000000016f03         db  0xff ; '.'
0000000000016f04         db  0x18 ; '.'
0000000000016f05         db  0xdf ; '.'
0000000000016f06         db  0xfe ; '.'
0000000000016f07         db  0xff ; '.'
0000000000016f08         db  0x18 ; '.'
0000000000016f09         db  0xdf ; '.'
0000000000016f0a         db  0xfe ; '.'
0000000000016f0b         db  0xff ; '.'
0000000000016f0c         db  0x18 ; '.'
0000000000016f0d         db  0xdf ; '.'
0000000000016f0e         db  0xfe ; '.'
0000000000016f0f         db  0xff ; '.'
0000000000016f10         db  0x18 ; '.'
0000000000016f11         db  0xdf ; '.'
0000000000016f12         db  0xfe ; '.'
0000000000016f13         db  0xff ; '.'
0000000000016f14         db  0x18 ; '.'
0000000000016f15         db  0xdf ; '.'
0000000000016f16         db  0xfe ; '.'
0000000000016f17         db  0xff ; '.'
0000000000016f18         db  0x18 ; '.'
0000000000016f19         db  0xdf ; '.'
0000000000016f1a         db  0xfe ; '.'
0000000000016f1b         db  0xff ; '.'
0000000000016f1c         db  0x18 ; '.'
0000000000016f1d         db  0xdf ; '.'
0000000000016f1e         db  0xfe ; '.'
0000000000016f1f         db  0xff ; '.'
0000000000016f20         db  0x18 ; '.'
0000000000016f21         db  0xdf ; '.'
0000000000016f22         db  0xfe ; '.'
0000000000016f23         db  0xff ; '.'
0000000000016f24         db  0x18 ; '.'
0000000000016f25         db  0xdf ; '.'
0000000000016f26         db  0xfe ; '.'
0000000000016f27         db  0xff ; '.'
0000000000016f28         db  0x18 ; '.'
0000000000016f29         db  0xdf ; '.'
0000000000016f2a         db  0xfe ; '.'
0000000000016f2b         db  0xff ; '.'
0000000000016f2c         db  0x18 ; '.'
0000000000016f2d         db  0xdf ; '.'
0000000000016f2e         db  0xfe ; '.'
0000000000016f2f         db  0xff ; '.'
0000000000016f30         db  0x18 ; '.'
0000000000016f31         db  0xdf ; '.'
0000000000016f32         db  0xfe ; '.'
0000000000016f33         db  0xff ; '.'
0000000000016f34         db  0x48 ; 'H'
0000000000016f35         db  0xdf ; '.'
0000000000016f36         db  0xfe ; '.'
0000000000016f37         db  0xff ; '.'
0000000000016f38         db  0x48 ; 'H'
0000000000016f39         db  0xdf ; '.'
0000000000016f3a         db  0xfe ; '.'
0000000000016f3b         db  0xff ; '.'
0000000000016f3c         db  0x48 ; 'H'
0000000000016f3d         db  0xdf ; '.'
0000000000016f3e         db  0xfe ; '.'
0000000000016f3f         db  0xff ; '.'
0000000000016f40         db  0x48 ; 'H'
0000000000016f41         db  0xdf ; '.'
0000000000016f42         db  0xfe ; '.'
0000000000016f43         db  0xff ; '.'
0000000000016f44         db  0x58 ; 'X'
0000000000016f45         db  0xdb ; '.'
0000000000016f46         db  0xfe ; '.'
0000000000016f47         db  0xff ; '.'
0000000000016f48         db  0x88 ; '.'
0000000000016f49         db  0xdd ; '.'
0000000000016f4a         db  0xfe ; '.'
0000000000016f4b         db  0xff ; '.'
0000000000016f4c         db  0x18 ; '.'
0000000000016f4d         db  0xdf ; '.'
0000000000016f4e         db  0xfe ; '.'
0000000000016f4f         db  0xff ; '.'
0000000000016f50         db  0x18 ; '.'
0000000000016f51         db  0xdf ; '.'
0000000000016f52         db  0xfe ; '.'
0000000000016f53         db  0xff ; '.'
0000000000016f54         db  0x18 ; '.'
0000000000016f55         db  0xdf ; '.'
0000000000016f56         db  0xfe ; '.'
0000000000016f57         db  0xff ; '.'
0000000000016f58         db  0x18 ; '.'
0000000000016f59         db  0xdf ; '.'
0000000000016f5a         db  0xfe ; '.'
0000000000016f5b         db  0xff ; '.'
0000000000016f5c         db  0x18 ; '.'
0000000000016f5d         db  0xdf ; '.'
0000000000016f5e         db  0xfe ; '.'
0000000000016f5f         db  0xff ; '.'
0000000000016f60         db  0x18 ; '.'
0000000000016f61         db  0xdf ; '.'
0000000000016f62         db  0xfe ; '.'
0000000000016f63         db  0xff ; '.'
0000000000016f64         db  0x18 ; '.'
0000000000016f65         db  0xdf ; '.'
0000000000016f66         db  0xfe ; '.'
0000000000016f67         db  0xff ; '.'
0000000000016f68         db  0x18 ; '.'
0000000000016f69         db  0xdf ; '.'
0000000000016f6a         db  0xfe ; '.'
0000000000016f6b         db  0xff ; '.'
0000000000016f6c         db  0x18 ; '.'
0000000000016f6d         db  0xdf ; '.'
0000000000016f6e         db  0xfe ; '.'
0000000000016f6f         db  0xff ; '.'
0000000000016f70         db  0x18 ; '.'
0000000000016f71         db  0xdf ; '.'
0000000000016f72         db  0xfe ; '.'
0000000000016f73         db  0xff ; '.'
0000000000016f74         db  0x18 ; '.'
0000000000016f75         db  0xdf ; '.'
0000000000016f76         db  0xfe ; '.'
0000000000016f77         db  0xff ; '.'
0000000000016f78         db  0x18 ; '.'
0000000000016f79         db  0xdf ; '.'
0000000000016f7a         db  0xfe ; '.'
0000000000016f7b         db  0xff ; '.'
0000000000016f7c         db  0x18 ; '.'
0000000000016f7d         db  0xdf ; '.'
0000000000016f7e         db  0xfe ; '.'
0000000000016f7f         db  0xff ; '.'
0000000000016f80         db  0x18 ; '.'
0000000000016f81         db  0xdf ; '.'
0000000000016f82         db  0xfe ; '.'
0000000000016f83         db  0xff ; '.'
0000000000016f84         db  0x18 ; '.'
0000000000016f85         db  0xdf ; '.'
0000000000016f86         db  0xfe ; '.'
0000000000016f87         db  0xff ; '.'
0000000000016f88         db  0x18 ; '.'
0000000000016f89         db  0xdf ; '.'
0000000000016f8a         db  0xfe ; '.'
0000000000016f8b         db  0xff ; '.'
0000000000016f8c         db  0x18 ; '.'
0000000000016f8d         db  0xdf ; '.'
0000000000016f8e         db  0xfe ; '.'
0000000000016f8f         db  0xff ; '.'
0000000000016f90         db  0x18 ; '.'
0000000000016f91         db  0xdf ; '.'
0000000000016f92         db  0xfe ; '.'
0000000000016f93         db  0xff ; '.'
0000000000016f94         db  0x18 ; '.'
0000000000016f95         db  0xdf ; '.'
0000000000016f96         db  0xfe ; '.'
0000000000016f97         db  0xff ; '.'
0000000000016f98         db  0x18 ; '.'
0000000000016f99         db  0xdf ; '.'
0000000000016f9a         db  0xfe ; '.'
0000000000016f9b         db  0xff ; '.'
0000000000016f9c         db  0x18 ; '.'
0000000000016f9d         db  0xdf ; '.'
0000000000016f9e         db  0xfe ; '.'
0000000000016f9f         db  0xff ; '.'
0000000000016fa0         db  0x18 ; '.'
0000000000016fa1         db  0xdf ; '.'
0000000000016fa2         db  0xfe ; '.'
0000000000016fa3         db  0xff ; '.'
0000000000016fa4         db  0x18 ; '.'
0000000000016fa5         db  0xdf ; '.'
0000000000016fa6         db  0xfe ; '.'
0000000000016fa7         db  0xff ; '.'
0000000000016fa8         db  0x18 ; '.'
0000000000016fa9         db  0xdf ; '.'
0000000000016faa         db  0xfe ; '.'
0000000000016fab         db  0xff ; '.'
0000000000016fac         db  0x18 ; '.'
0000000000016fad         db  0xdf ; '.'
0000000000016fae         db  0xfe ; '.'
0000000000016faf         db  0xff ; '.'
0000000000016fb0         db  0x18 ; '.'
0000000000016fb1         db  0xdf ; '.'
0000000000016fb2         db  0xfe ; '.'
0000000000016fb3         db  0xff ; '.'
0000000000016fb4         db  0x48 ; 'H'
0000000000016fb5         db  0xdf ; '.'
0000000000016fb6         db  0xfe ; '.'
0000000000016fb7         db  0xff ; '.'
0000000000016fb8         db  0x18 ; '.'
0000000000016fb9         db  0xde ; '.'
0000000000016fba         db  0xfe ; '.'
0000000000016fbb         db  0xff ; '.'
0000000000016fbc         db  0x18 ; '.'
0000000000016fbd         db  0xdf ; '.'
0000000000016fbe         db  0xfe ; '.'
0000000000016fbf         db  0xff ; '.'
0000000000016fc0         db  0x48 ; 'H'
0000000000016fc1         db  0xdf ; '.'
0000000000016fc2         db  0xfe ; '.'
0000000000016fc3         db  0xff ; '.'
0000000000016fc4         db  0x18 ; '.'
0000000000016fc5         db  0xdf ; '.'
0000000000016fc6         db  0xfe ; '.'
0000000000016fc7         db  0xff ; '.'
0000000000016fc8         db  0x48 ; 'H'
0000000000016fc9         db  0xdf ; '.'
0000000000016fca         db  0xfe ; '.'
0000000000016fcb         db  0xff ; '.'
0000000000016fcc         db  0x18 ; '.'
0000000000016fcd         db  0xdf ; '.'
0000000000016fce         db  0xfe ; '.'
0000000000016fcf         db  0xff ; '.'
0000000000016fd0         db  0x18 ; '.'
0000000000016fd1         db  0xdf ; '.'
0000000000016fd2         db  0xfe ; '.'
0000000000016fd3         db  0xff ; '.'
0000000000016fd4         db  0x18 ; '.'
0000000000016fd5         db  0xdf ; '.'
0000000000016fd6         db  0xfe ; '.'
0000000000016fd7         db  0xff ; '.'
0000000000016fd8         db  0x18 ; '.'
0000000000016fd9         db  0xdf ; '.'
0000000000016fda         db  0xfe ; '.'
0000000000016fdb         db  0xff ; '.'
0000000000016fdc         db  0x18 ; '.'
0000000000016fdd         db  0xdf ; '.'
0000000000016fde         db  0xfe ; '.'
0000000000016fdf         db  0xff ; '.'
0000000000016fe0         db  0x18 ; '.'
0000000000016fe1         db  0xdf ; '.'
0000000000016fe2         db  0xfe ; '.'
0000000000016fe3         db  0xff ; '.'
0000000000016fe4         db  0x18 ; '.'
0000000000016fe5         db  0xdf ; '.'
0000000000016fe6         db  0xfe ; '.'
0000000000016fe7         db  0xff ; '.'
0000000000016fe8         db  0x18 ; '.'
0000000000016fe9         db  0xdf ; '.'
0000000000016fea         db  0xfe ; '.'
0000000000016feb         db  0xff ; '.'
0000000000016fec         db  0x18 ; '.'
0000000000016fed         db  0xdf ; '.'
0000000000016fee         db  0xfe ; '.'
0000000000016fef         db  0xff ; '.'
0000000000016ff0         db  0x18 ; '.'
0000000000016ff1         db  0xdf ; '.'
0000000000016ff2         db  0xfe ; '.'
0000000000016ff3         db  0xff ; '.'
0000000000016ff4         db  0x18 ; '.'
0000000000016ff5         db  0xdf ; '.'
0000000000016ff6         db  0xfe ; '.'
0000000000016ff7         db  0xff ; '.'
0000000000016ff8         db  0x18 ; '.'
0000000000016ff9         db  0xdf ; '.'
0000000000016ffa         db  0xfe ; '.'
0000000000016ffb         db  0xff ; '.'
0000000000016ffc         db  0x18 ; '.'
0000000000016ffd         db  0xdf ; '.'
0000000000016ffe         db  0xfe ; '.'
0000000000016fff         db  0xff ; '.'
0000000000017000         db  0x18 ; '.'
0000000000017001         db  0xdf ; '.'
0000000000017002         db  0xfe ; '.'
0000000000017003         db  0xff ; '.'
0000000000017004         db  0x18 ; '.'
0000000000017005         db  0xdf ; '.'
0000000000017006         db  0xfe ; '.'
0000000000017007         db  0xff ; '.'
0000000000017008         db  0x18 ; '.'
0000000000017009         db  0xdf ; '.'
000000000001700a         db  0xfe ; '.'
000000000001700b         db  0xff ; '.'
000000000001700c         db  0x18 ; '.'
000000000001700d         db  0xdf ; '.'
000000000001700e         db  0xfe ; '.'
000000000001700f         db  0xff ; '.'
0000000000017010         db  0x18 ; '.'
0000000000017011         db  0xdf ; '.'
0000000000017012         db  0xfe ; '.'
0000000000017013         db  0xff ; '.'
0000000000017014         db  0x18 ; '.'
0000000000017015         db  0xdf ; '.'
0000000000017016         db  0xfe ; '.'
0000000000017017         db  0xff ; '.'
0000000000017018         db  0x18 ; '.'
0000000000017019         db  0xdf ; '.'
000000000001701a         db  0xfe ; '.'
000000000001701b         db  0xff ; '.'
000000000001701c         db  0x18 ; '.'
000000000001701d         db  0xdf ; '.'
000000000001701e         db  0xfe ; '.'
000000000001701f         db  0xff ; '.'
0000000000017020         db  0x18 ; '.'
0000000000017021         db  0xdf ; '.'
0000000000017022         db  0xfe ; '.'
0000000000017023         db  0xff ; '.'
0000000000017024         db  0x18 ; '.'
0000000000017025         db  0xdf ; '.'
0000000000017026         db  0xfe ; '.'
0000000000017027         db  0xff ; '.'
0000000000017028         db  0x18 ; '.'
0000000000017029         db  0xdf ; '.'
000000000001702a         db  0xfe ; '.'
000000000001702b         db  0xff ; '.'
000000000001702c         db  0x18 ; '.'
000000000001702d         db  0xdf ; '.'
000000000001702e         db  0xfe ; '.'
000000000001702f         db  0xff ; '.'
0000000000017030         db  0x18 ; '.'
0000000000017031         db  0xdf ; '.'
0000000000017032         db  0xfe ; '.'
0000000000017033         db  0xff ; '.'
0000000000017034         db  0x88 ; '.'
0000000000017035         db  0xda ; '.'
0000000000017036         db  0xfe ; '.'
0000000000017037         db  0xff ; '.'
0000000000017038         db  0x48 ; 'H'
0000000000017039         db  0xdf ; '.'
000000000001703a         db  0xfe ; '.'
000000000001703b         db  0xff ; '.'
000000000001703c         db  0x88 ; '.'
000000000001703d         db  0xda ; '.'
000000000001703e         db  0xfe ; '.'
000000000001703f         db  0xff ; '.'
0000000000017040         db  0x30 ; '0'
0000000000017041         db  0xdf ; '.'
0000000000017042         db  0xfe ; '.'
0000000000017043         db  0xff ; '.'
0000000000017044         db  0x00 ; '.'
0000000000017045         db  0x00 ; '.'
0000000000017046         db  0x00 ; '.'
0000000000017047         db  0x00 ; '.'
0000000000017048         db  0x00 ; '.'
0000000000017049         db  0x00 ; '.'
000000000001704a         db  0x00 ; '.'
000000000001704b         db  0x00 ; '.'
000000000001704c         db  0x00 ; '.'
000000000001704d         db  0x00 ; '.'
000000000001704e         db  0x00 ; '.'
000000000001704f         db  0x00 ; '.'
0000000000017050         db  0x00 ; '.'
0000000000017051         db  0x00 ; '.'
0000000000017052         db  0x00 ; '.'
0000000000017053         db  0x00 ; '.'
0000000000017054         db  0x00 ; '.'
0000000000017055         db  0x00 ; '.'
0000000000017056         db  0x00 ; '.'
0000000000017057         db  0x00 ; '.'
0000000000017058         db  0x00 ; '.'
0000000000017059         db  0x00 ; '.'
000000000001705a         db  0x00 ; '.'
000000000001705b         db  0x00 ; '.'
000000000001705c         db  0x00 ; '.'
000000000001705d         db  0x00 ; '.'
000000000001705e         db  0x00 ; '.'
000000000001705f         db  0x00 ; '.'
                     quoting_style_vals:
0000000000017060         db  0x00 ; '.'
0000000000017061         db  0x00 ; '.'
0000000000017062         db  0x00 ; '.'
0000000000017063         db  0x00 ; '.'
0000000000017064         db  0x01 ; '.'
0000000000017065         db  0x00 ; '.'
0000000000017066         db  0x00 ; '.'
0000000000017067         db  0x00 ; '.'
0000000000017068         db  0x02 ; '.'
0000000000017069         db  0x00 ; '.'
000000000001706a         db  0x00 ; '.'
000000000001706b         db  0x00 ; '.'
000000000001706c         db  0x03 ; '.'
000000000001706d         db  0x00 ; '.'
000000000001706e         db  0x00 ; '.'
000000000001706f         db  0x00 ; '.'
0000000000017070         db  0x04 ; '.'
0000000000017071         db  0x00 ; '.'
0000000000017072         db  0x00 ; '.'
0000000000017073         db  0x00 ; '.'
0000000000017074         db  0x05 ; '.'
0000000000017075         db  0x00 ; '.'
0000000000017076         db  0x00 ; '.'
0000000000017077         db  0x00 ; '.'
0000000000017078         db  0x06 ; '.'
0000000000017079         db  0x00 ; '.'
000000000001707a         db  0x00 ; '.'
000000000001707b         db  0x00 ; '.'
000000000001707c         db  0x07 ; '.'
000000000001707d         db  0x00 ; '.'
000000000001707e         db  0x00 ; '.'
000000000001707f         db  0x00 ; '.'
0000000000017080         db  0x08 ; '.'
0000000000017081         db  0x00 ; '.'
0000000000017082         db  0x00 ; '.'
0000000000017083         db  0x00 ; '.'
0000000000017084         db  0x09 ; '.'
0000000000017085         db  0x00 ; '.'
0000000000017086         db  0x00 ; '.'
0000000000017087         db  0x00 ; '.'
                     aSSSn:
0000000000017088         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
0000000000017094         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
000000000001709b         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
000000000001709c         db  0x43 ; 'C'
000000000001709d         db  0x29 ; ')'
000000000001709e         db  0x00 ; '.'
                     aWrittenBySn:
000000000001709f         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
00000000000170af         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
00000000000170c6         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
00000000000170e2         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
00000000000170f7         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
000000000001710d         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
0000000000017121         align      8
                     aNlicenseGplv3G:
0000000000017128         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
00000000000171f4         align      8
                     aWrittenBySSSna:
00000000000171f8         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_17218:        // aWrittenBySSSns
0000000000017218         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
000000000001723c         align      64
                     aWrittenBySSSns_17240:        // aWrittenBySSSns
0000000000017240         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_17268:        // aWrittenBySSSns
0000000000017268         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
0000000000017294         align      8
                     aWrittenBySSSns_17298:        // aWrittenBySSSns
0000000000017298         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
00000000000172c8         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
00000000000172fc         align      256
                     aWrittenBySSSns_17300:        // aWrittenBySSSns
0000000000017300         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
000000000001733c         align      64
                     aGeneralHelpUsi:
0000000000017340         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
0000000000017381         align      4
                     switch_table_17384:        // switch_table
0000000000017384         dd         version_etc_arn.loc_6416-switch_table_17384, version_etc_arn.loc_64a8-switch_table_17384, version_etc_arn.loc_64e8-switch_table_17384, version_etc_arn.loc_6530-switch_table_17384 ; switch table used at 0x6394 containing 10 entries, DATA XREF=version_etc_arn+150
0000000000017394         dd         version_etc_arn.loc_6580-switch_table_17384, version_etc_arn.loc_65d8-switch_table_17384, version_etc_arn.loc_6608-switch_table_17384, version_etc_arn.loc_6670-switch_table_17384
00000000000173a4         dd         version_etc_arn.loc_63a0-switch_table_17384, version_etc_arn.loc_6450-switch_table_17384
00000000000173ac         align      64
                     version_etc_copyright:
00000000000173c0         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
00000000000173ef         align      16
                     aCoreutils831li:
00000000000173f0         db         "../coreutils-8.31/lib/xstrtol.c", 0        ; DATA XREF=xstrtoimax+1686, xstrtoumax+908
                     a0StrtolbaseStr:
0000000000017410         db         "0 <= strtol_base && strtol_base <= 36", 0  ; DATA XREF=xstrtoimax+1693, xstrtoumax+915
0000000000017436         align      8
                     switch_table_17438:        // switch_table
0000000000017438         dd         xstrtoimax.loc_7190-switch_table_17438, 2 dup (xstrtoimax.loc_6e28-switch_table_17438), xstrtoimax.loc_70c0-switch_table_17438, xstrtoimax.loc_6e28-switch_table_17438 ; switch table used at 0x6e5e containing 54 entries, DATA XREF=xstrtoimax+412
000000000001744c         dd         xstrtoimax.loc_7060-switch_table_17438, 3 dup (xstrtoimax.loc_6e28-switch_table_17438), xstrtoimax.loc_7020-switch_table_17438, xstrtoimax.loc_6e28-switch_table_17438
0000000000017464         dd         xstrtoimax.loc_6e60-switch_table_17438, 2 dup (xstrtoimax.loc_6e28-switch_table_17438), xstrtoimax.loc_7128-switch_table_17438, 3 dup (xstrtoimax.loc_6e28-switch_table_17438)
0000000000017480         dd         xstrtoimax.loc_71c0-switch_table_17438, 4 dup (xstrtoimax.loc_6e28-switch_table_17438), xstrtoimax.loc_6fb0-switch_table_17438, xstrtoimax.loc_6f40-switch_table_17438
000000000001749c         dd         7 dup (xstrtoimax.loc_6e28-switch_table_17438), xstrtoimax.loc_6f10-switch_table_17438, xstrtoimax.loc_6ec0-switch_table_17438, 3 dup (xstrtoimax.loc_6e28-switch_table_17438)
00000000000174cc         dd         xstrtoimax.loc_7060-switch_table_17438, 3 dup (xstrtoimax.loc_6e28-switch_table_17438), xstrtoimax.loc_7020-switch_table_17438, xstrtoimax.loc_6e28-switch_table_17438
00000000000174e4         dd         xstrtoimax.loc_6e60-switch_table_17438, 6 dup (xstrtoimax.loc_6e28-switch_table_17438), xstrtoimax.loc_71c0-switch_table_17438, 2 dup (xstrtoimax.loc_6e28-switch_table_17438)
000000000001750c         dd         xstrtoimax.loc_6ee0-switch_table_17438
                     __PRETTY_FUNCTION__.4162:
0000000000017510         db         "xstrtoimax", 0                             ; DATA XREF=xstrtoimax+1679
000000000001751b         align      32
                     switch_table_17520:        // switch_table
0000000000017520         dd         xstrtoumax.loc_7696-switch_table_17520, 2 dup (xstrtoumax.loc_758c-switch_table_17520), xstrtoumax.loc_7673-switch_table_17520, xstrtoumax.loc_758c-switch_table_17520 ; switch table used at 0x7546 containing 54 entries, DATA XREF=xstrtoumax+452
0000000000017534         dd         xstrtoumax.loc_76ac-switch_table_17520, 3 dup (xstrtoumax.loc_758c-switch_table_17520), xstrtoumax.loc_762f-switch_table_17520, xstrtoumax.loc_758c-switch_table_17520
000000000001754c         dd         xstrtoumax.loc_7548-switch_table_17520, 2 dup (xstrtoumax.loc_758c-switch_table_17520), xstrtoumax.loc_7650-switch_table_17520, 3 dup (xstrtoumax.loc_758c-switch_table_17520)
0000000000017568         dd         xstrtoumax.loc_760f-switch_table_17520, 4 dup (xstrtoumax.loc_758c-switch_table_17520), xstrtoumax.loc_75ea-switch_table_17520, xstrtoumax.loc_75c4-switch_table_17520
0000000000017584         dd         7 dup (xstrtoumax.loc_758c-switch_table_17520), xstrtoumax.loc_75ad-switch_table_17520, xstrtoumax.loc_7570-switch_table_17520, 3 dup (xstrtoumax.loc_758c-switch_table_17520)
00000000000175b4         dd         xstrtoumax.loc_76ac-switch_table_17520, 3 dup (xstrtoumax.loc_758c-switch_table_17520), xstrtoumax.loc_762f-switch_table_17520, xstrtoumax.loc_758c-switch_table_17520
00000000000175cc         dd         xstrtoumax.loc_7548-switch_table_17520, 6 dup (xstrtoumax.loc_758c-switch_table_17520), xstrtoumax.loc_760f-switch_table_17520, 2 dup (xstrtoumax.loc_758c-switch_table_17520)
00000000000175f4         dd         xstrtoumax.loc_7597-switch_table_17520
                     __PRETTY_FUNCTION__.4162_175f8:        // __PRETTY_FUNCTION__.4162
00000000000175f8         db         "xstrtoumax", 0                             ; DATA XREF=xstrtoumax+901
0000000000017603         align      8
                     aCoreutils831li_17608:        // aCoreutils831li
0000000000017608         db         "../coreutils-8.31/lib/regexec.c", 0        ; DATA XREF=pop_fail_stack.isra.25+124, re_search_internal+4148, re_search_internal+5432, re_search_stub+1065, re_search_stub+1096, re_search_stub+1127
                     aCoreutils831li_17628:        // aCoreutils831li
0000000000017628         db         "../coreutils-8.31/lib/regcomp.c", 0        ; DATA XREF=sub_13290+2817, sub_14bd0+18, sub_152b0+106, sub_152b0+137, sub_152b0+168
                     aIsepsilonnodeN:
0000000000017648         db         "!IS_EPSILON_NODE (node->token.type)", 0    ; DATA XREF=sub_152b0+144
000000000001766c         align      16
                     aNum0:
0000000000017670         db         "num >= 0", 0                               ; DATA XREF=pop_fail_stack.isra.25+131
                     aAlpha:
0000000000017679         db         "alpha", 0                                  ; DATA XREF=build_charclass.isra.29+65, build_charclass.isra.29+338, build_charclass.isra.29+626
                     aUpper:
000000000001767f         db         "upper", 0                                  ; DATA XREF=build_charclass.isra.29+35, build_charclass.isra.29+1100
                     aLower:
0000000000017685         db         "lower", 0                                  ; DATA XREF=build_charclass.isra.29+310, build_charclass.isra.29+424
                     aAlnum:
000000000001768b         db         "alnum", 0                                  ; DATA XREF=build_charclass.isra.29+108, sub_13290+463
                     aCntrl:
0000000000017691         db         "cntrl", 0                                  ; DATA XREF=build_charclass.isra.29+138
                     aSpace:
0000000000017697         db         "space", 0                                  ; DATA XREF=build_charclass.isra.29+450, sub_13290+383
                     aPrint:
000000000001769d         db         "print", 0                                  ; DATA XREF=build_charclass.isra.29+947
                     aBlank:
00000000000176a3         db         "blank", 0                                  ; DATA XREF=build_charclass.isra.29+1202
                     aGraph:
00000000000176a9         db         "graph", 0                                  ; DATA XREF=build_charclass.isra.29+1470
                     aPunct:
00000000000176af         db         "punct", 0                                  ; DATA XREF=build_charclass.isra.29+1610
00000000000176b5         db  0x78 ; 'x'                                         ; DATA XREF=build_charclass.isra.29+1748
                     aDigit:
00000000000176b6         db         "digit", 0                                  ; DATA XREF=build_charclass.isra.29+656
                     aErrRegespace:
00000000000176bc         db         "err == REG_ESPACE", 0                      ; DATA XREF=re_search_internal+4155, re_search_internal+5439
00000000000176ce         db  0x38 ; '8'                                         ; DATA XREF=re_compile_internal+352
00000000000176cf         db  0x00 ; '.'
                     aNodenextNull:
00000000000176d0         db         "node->next == NULL", 0                     ; DATA XREF=sub_14bd0+25
                     aLeft1:
00000000000176e3         db         "left > -1", 0                              ; DATA XREF=sub_152b0+175
                     aRight1:
00000000000176ed         db         "right > -1", 0                             ; DATA XREF=sub_152b0+113
                     aRegsallocatedR:
00000000000176f8         db         "regs_allocated == REGS_FIXED", 0           ; DATA XREF=re_search_stub+1134
                     aRegsnumregsNre:
0000000000017715         db         "regs->num_regs >= nregs", 0                ; DATA XREF=re_search_stub+1103
                     aPmatch0rmsoSta:
000000000001772d         db         "pmatch[0].rm_so == start", 0               ; DATA XREF=re_search_stub+1072
0000000000017746         align      32
                     switch_table_17760:        // switch_table
0000000000017760         dd         2 dup (re_search_internal.loc_10bb4-switch_table_17760), re_search_internal.loc_1061e-switch_table_17760, re_search_internal.loc_10b42-switch_table_17760, re_search_internal.loc_106c8-switch_table_17760 ; switch table used at 0x105e6 containing 5 entries, DATA XREF=re_search_internal+1256
                     switch_table_17774:        // switch_table
0000000000017774         dd         peek_token.loc_12600-switch_table_17774, 25 dup (peek_token.loc_1253c-switch_table_17774), peek_token.loc_12670-switch_table_17774, 3 dup (peek_token.loc_1253c-switch_table_17774) ; switch table used at 0x1241c containing 116 entries, DATA XREF=peek_token+314
00000000000177ec         dd         peek_token.loc_12650-switch_table_17774, peek_token.loc_12630-switch_table_17774, peek_token.loc_12620-switch_table_17774, peek_token.loc_125e0-switch_table_17774
00000000000177fc         dd         2 dup (peek_token.loc_1253c-switch_table_17774), peek_token.loc_125d0-switch_table_17774, 16 dup (peek_token.loc_1253c-switch_table_17774), peek_token.loc_125b0-switch_table_17774
000000000001784c         dd         27 dup (peek_token.loc_1253c-switch_table_17774), peek_token.loc_125a0-switch_table_17774, 2 dup (peek_token.loc_1253c-switch_table_17774), peek_token.loc_12578-switch_table_17774
00000000000178c8         dd         28 dup (peek_token.loc_1253c-switch_table_17774), peek_token.loc_12550-switch_table_17774, peek_token.loc_12528-switch_table_17774, peek_token.loc_12500-switch_table_17774
                     switch_table_17944:        // switch_table
0000000000017944         dd         peek_token.loc_12893-switch_table_17944, peek_token.loc_1287c-switch_table_17944, peek_token.loc_12865-switch_table_17944, peek_token.loc_128b5-switch_table_17944 ; switch table used at 0x124c8 containing 87 entries, DATA XREF=peek_token+487
0000000000017954         dd         peek_token.loc_1284a-switch_table_17944, 5 dup (peek_token.loc_128b5-switch_table_17944), 9 dup (peek_token.loc_12821-switch_table_17944), 2 dup (peek_token.loc_128b5-switch_table_17944)
0000000000017998         dd         peek_token.loc_127ff-switch_table_17944, peek_token.loc_128b5-switch_table_17944, peek_token.loc_127dd-switch_table_17944, peek_token.loc_127c2-switch_table_17944
00000000000179a8         dd         2 dup (peek_token.loc_128b5-switch_table_17944), peek_token.loc_127a0-switch_table_17944, 16 dup (peek_token.loc_128b5-switch_table_17944), peek_token.loc_12785-switch_table_17944
00000000000179f8         dd         3 dup (peek_token.loc_128b5-switch_table_17944), peek_token.loc_1276a-switch_table_17944, 8 dup (peek_token.loc_128b5-switch_table_17944), peek_token.loc_12748-switch_table_17944
0000000000017a2c         dd         peek_token.loc_128b5-switch_table_17944, peek_token.loc_12726-switch_table_17944, 16 dup (peek_token.loc_128b5-switch_table_17944), peek_token.loc_126ed-switch_table_17944
0000000000017a78         dd         3 dup (peek_token.loc_128b5-switch_table_17944), peek_token.loc_126d2-switch_table_17944, 3 dup (peek_token.loc_128b5-switch_table_17944), peek_token.loc_126b4-switch_table_17944
0000000000017a98         dd         peek_token.loc_12699-switch_table_17944, peek_token.loc_12708-switch_table_17944
0000000000017aa0         db  0xf0 ; '.'                                         ; DATA XREF=parse_expression+75
0000000000017aa1         db  0xb0 ; '.'
0000000000017aa2         db  0xff ; '.'
0000000000017aa3         db  0xff ; '.'
0000000000017aa4         db  0x7e ; '~'
0000000000017aa5         db  0xba ; '.'
0000000000017aa6         db  0xff ; '.'
0000000000017aa7         db  0xff ; '.'
0000000000017aa8         db  0xf0 ; '.'
0000000000017aa9         db  0xb0 ; '.'
0000000000017aaa         db  0xff ; '.'
0000000000017aab         db  0xff ; '.'
0000000000017aac         db  0xf0 ; '.'
0000000000017aad         db  0xb0 ; '.'
0000000000017aae         db  0xff ; '.'
0000000000017aaf         db  0xff ; '.'
0000000000017ab0         db  0xcf ; '.'
0000000000017ab1         db  0xb9 ; '.'
0000000000017ab2         db  0xff ; '.'
0000000000017ab3         db  0xff ; '.'
0000000000017ab4         db  0x39 ; '9'
0000000000017ab5         db  0xba ; '.'
0000000000017ab6         db  0xff ; '.'
0000000000017ab7         db  0xff ; '.'
0000000000017ab8         db  0xf0 ; '.'
0000000000017ab9         db  0xb0 ; '.'
0000000000017aba         db  0xff ; '.'
0000000000017abb         db  0xff ; '.'
0000000000017abc         db  0xf0 ; '.'
0000000000017abd         db  0xb0 ; '.'
0000000000017abe         db  0xff ; '.'
0000000000017abf         db  0xff ; '.'
0000000000017ac0         db  0x51 ; 'Q'
0000000000017ac1         db  0xb0 ; '.'
0000000000017ac2         db  0xff ; '.'
0000000000017ac3         db  0xff ; '.'
0000000000017ac4         db  0x68 ; 'h'
0000000000017ac5         db  0xbb ; '.'
0000000000017ac6         db  0xff ; '.'
0000000000017ac7         db  0xff ; '.'
0000000000017ac8         db  0xf0 ; '.'
0000000000017ac9         db  0xb0 ; '.'
0000000000017aca         db  0xff ; '.'
0000000000017acb         db  0xff ; '.'
0000000000017acc         db  0x3d ; '='
0000000000017acd         db  0xb1 ; '.'
0000000000017ace         db  0xff ; '.'
0000000000017acf         db  0xff ; '.'
0000000000017ad0         db  0xb0 ; '.'
0000000000017ad1         db  0xb6 ; '.'
0000000000017ad2         db  0xff ; '.'
0000000000017ad3         db  0xff ; '.'
0000000000017ad4         db  0xf0 ; '.'
0000000000017ad5         db  0xb0 ; '.'
0000000000017ad6         db  0xff ; '.'
0000000000017ad7         db  0xff ; '.'
0000000000017ad8         db  0xf0 ; '.'
0000000000017ad9         db  0xb0 ; '.'
0000000000017ada         db  0xff ; '.'
0000000000017adb         db  0xff ; '.'
0000000000017adc         db  0xf0 ; '.'
0000000000017add         db  0xb0 ; '.'
0000000000017ade         db  0xff ; '.'
0000000000017adf         db  0xff ; '.'
0000000000017ae0         db  0xf0 ; '.'
0000000000017ae1         db  0xb0 ; '.'
0000000000017ae2         db  0xff ; '.'
0000000000017ae3         db  0xff ; '.'
0000000000017ae4         db  0xf0 ; '.'
0000000000017ae5         db  0xb0 ; '.'
0000000000017ae6         db  0xff ; '.'
0000000000017ae7         db  0xff ; '.'
0000000000017ae8         db  0x3d ; '='
0000000000017ae9         db  0xb1 ; '.'
0000000000017aea         db  0xff ; '.'
0000000000017aeb         db  0xff ; '.'
0000000000017aec         db  0x3d ; '='
0000000000017aed         db  0xb1 ; '.'
0000000000017aee         db  0xff ; '.'
0000000000017aef         db  0xff ; '.'
0000000000017af0         db  0xf0 ; '.'
0000000000017af1         db  0xb7 ; '.'
0000000000017af2         db  0xff ; '.'
0000000000017af3         db  0xff ; '.'
0000000000017af4         db  0xf0 ; '.'
0000000000017af5         db  0xb0 ; '.'
0000000000017af6         db  0xff ; '.'
0000000000017af7         db  0xff ; '.'
0000000000017af8         db  0xf0 ; '.'
0000000000017af9         db  0xb0 ; '.'
0000000000017afa         db  0xff ; '.'
0000000000017afb         db  0xff ; '.'
0000000000017afc         db  0x2e ; '.'
0000000000017afd         db  0xb1 ; '.'
0000000000017afe         db  0xff ; '.'
0000000000017aff         db  0xff ; '.'
0000000000017b00         db  0x5b ; '['
0000000000017b01         db  0xb1 ; '.'
0000000000017b02         db  0xff ; '.'
0000000000017b03         db  0xff ; '.'
0000000000017b04         db  0xf0 ; '.'
0000000000017b05         db  0xb0 ; '.'
0000000000017b06         db  0xff ; '.'
0000000000017b07         db  0xff ; '.'
0000000000017b08         db  0xf0 ; '.'
0000000000017b09         db  0xb0 ; '.'
0000000000017b0a         db  0xff ; '.'
0000000000017b0b         db  0xff ; '.'
0000000000017b0c         db  0xf0 ; '.'
0000000000017b0d         db  0xb0 ; '.'
0000000000017b0e         db  0xff ; '.'
0000000000017b0f         db  0xff ; '.'
0000000000017b10         db  0xf0 ; '.'
0000000000017b11         db  0xb0 ; '.'
0000000000017b12         db  0xff ; '.'
0000000000017b13         db  0xff ; '.'
0000000000017b14         db  0xf0 ; '.'
0000000000017b15         db  0xb0 ; '.'
0000000000017b16         db  0xff ; '.'
0000000000017b17         db  0xff ; '.'
0000000000017b18         db  0xf0 ; '.'
0000000000017b19         db  0xb0 ; '.'
0000000000017b1a         db  0xff ; '.'
0000000000017b1b         db  0xff ; '.'
0000000000017b1c         db  0xf0 ; '.'
0000000000017b1d         db  0xb0 ; '.'
0000000000017b1e         db  0xff ; '.'
0000000000017b1f         db  0xff ; '.'
0000000000017b20         db  0xa8 ; '.'
0000000000017b21         db  0xb9 ; '.'
0000000000017b22         db  0xff ; '.'
0000000000017b23         db  0xff ; '.'
0000000000017b24         db  0xa8 ; '.'
0000000000017b25         db  0xb9 ; '.'
0000000000017b26         db  0xff ; '.'
0000000000017b27         db  0xff ; '.'
0000000000017b28         db  0x58 ; 'X'
0000000000017b29         db  0xb9 ; '.'
0000000000017b2a         db  0xff ; '.'
0000000000017b2b         db  0xff ; '.'
0000000000017b2c         db  0x58 ; 'X'
0000000000017b2d         db  0xb9 ; '.'
0000000000017b2e         db  0xff ; '.'
0000000000017b2f         db  0xff ; '.'
0000000000017b30         db  0xd3 ; '.'
0000000000017b31         db  0xbb ; '.'
0000000000017b32         db  0xff ; '.'
0000000000017b33         db  0xff ; '.'
                     switch_table_17b34:        // switch_table
0000000000017b34         dd         sub_13290.loc_13761-switch_table_17b34, sub_13290.loc_13737-switch_table_17b34, sub_13290.loc_136ed-switch_table_17b34, sub_13290.loc_136b5-switch_table_17b34 ; switch table used at 0x133f6 containing 5 entries, DATA XREF=sub_13290+139
0000000000017b44         dd         sub_13290.loc_13789-switch_table_17b34
0000000000017b48         db  0xd0 ; '.'                                         ; DATA XREF=re_compile_internal+1708
0000000000017b49         db  0xce ; '.'
0000000000017b4a         db  0xff ; '.'
0000000000017b4b         db  0xff ; '.'
0000000000017b4c         db  0xd0 ; '.'
0000000000017b4d         db  0xce ; '.'
0000000000017b4e         db  0xff ; '.'
0000000000017b4f         db  0xff ; '.'
0000000000017b50         db  0x88 ; '.'
0000000000017b51         db  0xd0 ; '.'
0000000000017b52         db  0xff ; '.'
0000000000017b53         db  0xff ; '.'
0000000000017b54         db  0xd0 ; '.'
0000000000017b55         db  0xce ; '.'
0000000000017b56         db  0xff ; '.'
0000000000017b57         db  0xff ; '.'
0000000000017b58         db  0xb8 ; '.'
0000000000017b59         db  0xd0 ; '.'
0000000000017b5a         db  0xff ; '.'
0000000000017b5b         db  0xff ; '.'
0000000000017b5c         db  0xd0 ; '.'
0000000000017b5d         db  0xce ; '.'
0000000000017b5e         db  0xff ; '.'
0000000000017b5f         db  0xff ; '.'
0000000000017b60         db  0xd0 ; '.'
0000000000017b61         db  0xce ; '.'
0000000000017b62         db  0xff ; '.'
0000000000017b63         db  0xff ; '.'
0000000000017b64         db  0xd0 ; '.'
0000000000017b65         db  0xce ; '.'
0000000000017b66         db  0xff ; '.'
0000000000017b67         db  0xff ; '.'
0000000000017b68         db  0x30 ; '0'
0000000000017b69         db  0xd0 ; '.'
0000000000017b6a         db  0xff ; '.'
0000000000017b6b         db  0xff ; '.'
0000000000017b6c         db  0x30 ; '0'
0000000000017b6d         db  0xd0 ; '.'
0000000000017b6e         db  0xff ; '.'
0000000000017b6f         db  0xff ; '.'
0000000000017b70         db  0x6f ; 'o'
0000000000017b71         db  0xcf ; '.'
0000000000017b72         db  0xff ; '.'
0000000000017b73         db  0xff ; '.'
0000000000017b74         db  0x6f ; 'o'
0000000000017b75         db  0xcf ; '.'
0000000000017b76         db  0xff ; '.'
0000000000017b77         db  0xff ; '.'
0000000000017b78         db  0x30 ; '0'
0000000000017b79         db  0xd0 ; '.'
0000000000017b7a         db  0xff ; '.'
0000000000017b7b         db  0xff ; '.'
0000000000017b7c         db  0xd0 ; '.'
0000000000017b7d         db  0xce ; '.'
0000000000017b7e         db  0xff ; '.'
0000000000017b7f         db  0xff ; '.'
0000000000017b80         db  0xd0 ; '.'
0000000000017b81         db  0xce ; '.'
0000000000017b82         db  0xff ; '.'
0000000000017b83         db  0xff ; '.'
0000000000017b84         db  0xd0 ; '.'
0000000000017b85         db  0xce ; '.'
0000000000017b86         db  0xff ; '.'
0000000000017b87         db  0xff ; '.'
0000000000017b88         db  0xe9 ; '.'
0000000000017b89         db  0xce ; '.'
0000000000017b8a         db  0xff ; '.'
0000000000017b8b         db  0xff ; '.'
0000000000017b8c         db  0x82 ; '.'                                         ; DATA XREF=sub_14c00+1071
0000000000017b8d         db  0xd7 ; '.'
0000000000017b8e         db  0xff ; '.'
0000000000017b8f         db  0xff ; '.'
0000000000017b90         db  0x84 ; '.'
0000000000017b91         db  0xd6 ; '.'
0000000000017b92         db  0xff ; '.'
0000000000017b93         db  0xff ; '.'
0000000000017b94         db  0x30 ; '0'
0000000000017b95         db  0xd6 ; '.'
0000000000017b96         db  0xff ; '.'
0000000000017b97         db  0xff ; '.'
0000000000017b98         db  0xac ; '.'
0000000000017b99         db  0xd6 ; '.'
0000000000017b9a         db  0xff ; '.'
0000000000017b9b         db  0xff ; '.'
0000000000017b9c         db  0x30 ; '0'
0000000000017b9d         db  0xd6 ; '.'
0000000000017b9e         db  0xff ; '.'
0000000000017b9f         db  0xff ; '.'
0000000000017ba0         db  0x2d ; '-'
0000000000017ba1         db  0xd6 ; '.'
0000000000017ba2         db  0xff ; '.'
0000000000017ba3         db  0xff ; '.'
0000000000017ba4         db  0xa2 ; '.'
0000000000017ba5         db  0xd2 ; '.'
0000000000017ba6         db  0xff ; '.'
0000000000017ba7         db  0xff ; '.'
0000000000017ba8         db  0x82 ; '.'
0000000000017ba9         db  0xd7 ; '.'
0000000000017baa         db  0xff ; '.'
0000000000017bab         db  0xff ; '.'
0000000000017bac         db  0x30 ; '0'
0000000000017bad         db  0xd6 ; '.'
0000000000017bae         db  0xff ; '.'
0000000000017baf         db  0xff ; '.'
0000000000017bb0         db  0x30 ; '0'
0000000000017bb1         db  0xd6 ; '.'
0000000000017bb2         db  0xff ; '.'
0000000000017bb3         db  0xff ; '.'
0000000000017bb4         db  0x30 ; '0'
0000000000017bb5         db  0xd6 ; '.'
0000000000017bb6         db  0xff ; '.'
0000000000017bb7         db  0xff ; '.'
0000000000017bb8         db  0x30 ; '0'
0000000000017bb9         db  0xd6 ; '.'
0000000000017bba         db  0xff ; '.'
0000000000017bbb         db  0xff ; '.'
0000000000017bbc         db  0x8d ; '.'
0000000000017bbd         db  0xd6 ; '.'
0000000000017bbe         db  0xff ; '.'
0000000000017bbf         db  0xff ; '.'
                     __PRETTY_FUNCTION__.7859:
0000000000017bc0         db         "re_copy_regs", 0                           ; DATA XREF=re_search_stub+1089, re_search_stub+1120
0000000000017bcd         align      16
                     __PRETTY_FUNCTION__.7847:
0000000000017bd0         db         "re_search_stub", 0                         ; DATA XREF=re_search_stub+1058
0000000000017bdf         align      32
                     __PRETTY_FUNCTION__.8040:
0000000000017be0         db         "pop_fail_stack", 0                         ; DATA XREF=pop_fail_stack.isra.25+117
0000000000017bef         align      16
                     __PRETTY_FUNCTION__.7972:
0000000000017bf0         db         "check_matching", 0                         ; DATA XREF=re_search_internal+4141, re_search_internal+5425
0000000000017bff         align      1024
                     __PRETTY_FUNCTION__.6981:
0000000000017c00         db         "link_nfa_nodes", 0                         ; DATA XREF=sub_14bd0+11, sub_152b0+99, sub_152b0+130, sub_152b0+161
0000000000017c0f         db  0x00 ; '.'
                     __PRETTY_FUNCTION__.7327:
0000000000017c10         db         "parse_bracket_exp", 0                      ; DATA XREF=sub_13290+2810
0000000000017c22         db  0x00 ; '.'
0000000000017c23         db  0x00 ; '.'
0000000000017c24         db  0x00 ; '.'
0000000000017c25         db  0x00 ; '.'
0000000000017c26         db  0x00 ; '.'
0000000000017c27         db  0x00 ; '.'
0000000000017c28         db  0x00 ; '.'
0000000000017c29         db  0x00 ; '.'
0000000000017c2a         db  0x00 ; '.'
0000000000017c2b         db  0x00 ; '.'
0000000000017c2c         db  0x00 ; '.'
0000000000017c2d         db  0x00 ; '.'
0000000000017c2e         db  0x00 ; '.'
0000000000017c2f         db  0x00 ; '.'
0000000000017c30         db  0x00 ; '.'
0000000000017c31         db  0x00 ; '.'
0000000000017c32         db  0x00 ; '.'
0000000000017c33         db  0x00 ; '.'
0000000000017c34         db  0x00 ; '.'
0000000000017c35         db  0x00 ; '.'
0000000000017c36         db  0x00 ; '.'
0000000000017c37         db  0x00 ; '.'
0000000000017c38         db  0x00 ; '.'
0000000000017c39         db  0x00 ; '.'
0000000000017c3a         db  0x00 ; '.'
0000000000017c3b         db  0x00 ; '.'
0000000000017c3c         db  0x00 ; '.'
0000000000017c3d         db  0x00 ; '.'
0000000000017c3e         db  0x00 ; '.'
0000000000017c3f         db  0x00 ; '.'
                     utf8_sb_map:
0000000000017c40         db  0xff ; '.'                                         ; DATA XREF=free_dfa_content+305, re_compile_internal+435
0000000000017c41         db  0xff ; '.'
0000000000017c42         db  0xff ; '.'
0000000000017c43         db  0xff ; '.'
0000000000017c44         db  0xff ; '.'
0000000000017c45         db  0xff ; '.'
0000000000017c46         db  0xff ; '.'
0000000000017c47         db  0xff ; '.'
0000000000017c48         db  0xff ; '.'
0000000000017c49         db  0xff ; '.'
0000000000017c4a         db  0xff ; '.'
0000000000017c4b         db  0xff ; '.'
0000000000017c4c         db  0xff ; '.'
0000000000017c4d         db  0xff ; '.'
0000000000017c4e         db  0xff ; '.'
0000000000017c4f         db  0xff ; '.'
0000000000017c50         db  0x00 ; '.'
0000000000017c51         db  0x00 ; '.'
0000000000017c52         db  0x00 ; '.'
0000000000017c53         db  0x00 ; '.'
0000000000017c54         db  0x00 ; '.'
0000000000017c55         db  0x00 ; '.'
0000000000017c56         db  0x00 ; '.'
0000000000017c57         db  0x00 ; '.'
0000000000017c58         db  0x00 ; '.'
0000000000017c59         db  0x00 ; '.'
0000000000017c5a         db  0x00 ; '.'
0000000000017c5b         db  0x00 ; '.'
0000000000017c5c         db  0x00 ; '.'
0000000000017c5d         db  0x00 ; '.'
0000000000017c5e         db  0x00 ; '.'
0000000000017c5f         db  0x00 ; '.'
                     __re_error_msgid_idx:
0000000000017c60         db  0x00 ; '.'                                         ; DATA XREF=rpl_re_compile_pattern+62, rpl_regerror+15
0000000000017c61         db  0x00 ; '.'
0000000000017c62         db  0x00 ; '.'
0000000000017c63         db  0x00 ; '.'
0000000000017c64         db  0x00 ; '.'
0000000000017c65         db  0x00 ; '.'
0000000000017c66         db  0x00 ; '.'
0000000000017c67         db  0x00 ; '.'
0000000000017c68         db  0x08 ; '.'
0000000000017c69         db  0x00 ; '.'
0000000000017c6a         db  0x00 ; '.'
0000000000017c6b         db  0x00 ; '.'
0000000000017c6c         db  0x00 ; '.'
0000000000017c6d         db  0x00 ; '.'
0000000000017c6e         db  0x00 ; '.'
0000000000017c6f         db  0x00 ; '.'
0000000000017c70         db  0x11 ; '.'
0000000000017c71         db  0x00 ; '.'
0000000000017c72         db  0x00 ; '.'
0000000000017c73         db  0x00 ; '.'
0000000000017c74         db  0x00 ; '.'
0000000000017c75         db  0x00 ; '.'
0000000000017c76         db  0x00 ; '.'
0000000000017c77         db  0x00 ; '.'
0000000000017c78         db  0x2c ; ','
0000000000017c79         db  0x00 ; '.'
0000000000017c7a         db  0x00 ; '.'
0000000000017c7b         db  0x00 ; '.'
0000000000017c7c         db  0x00 ; '.'
0000000000017c7d         db  0x00 ; '.'
0000000000017c7e         db  0x00 ; '.'
0000000000017c7f         db  0x00 ; '.'
0000000000017c80         db  0x48 ; 'H'
0000000000017c81         db  0x00 ; '.'
0000000000017c82         db  0x00 ; '.'
0000000000017c83         db  0x00 ; '.'
0000000000017c84         db  0x00 ; '.'
0000000000017c85         db  0x00 ; '.'
0000000000017c86         db  0x00 ; '.'
0000000000017c87         db  0x00 ; '.'
0000000000017c88         db  0x65 ; 'e'
0000000000017c89         db  0x00 ; '.'
0000000000017c8a         db  0x00 ; '.'
0000000000017c8b         db  0x00 ; '.'
0000000000017c8c         db  0x00 ; '.'
0000000000017c8d         db  0x00 ; '.'
0000000000017c8e         db  0x00 ; '.'
0000000000017c8f         db  0x00 ; '.'
0000000000017c90         db  0x78 ; 'x'
0000000000017c91         db  0x00 ; '.'
0000000000017c92         db  0x00 ; '.'
0000000000017c93         db  0x00 ; '.'
0000000000017c94         db  0x00 ; '.'
0000000000017c95         db  0x00 ; '.'
0000000000017c96         db  0x00 ; '.'
0000000000017c97         db  0x00 ; '.'
0000000000017c98         db  0x8f ; '.'
0000000000017c99         db  0x00 ; '.'
0000000000017c9a         db  0x00 ; '.'
0000000000017c9b         db  0x00 ; '.'
0000000000017c9c         db  0x00 ; '.'
0000000000017c9d         db  0x00 ; '.'
0000000000017c9e         db  0x00 ; '.'
0000000000017c9f         db  0x00 ; '.'
0000000000017ca0         db  0xae ; '.'
0000000000017ca1         db  0x00 ; '.'
0000000000017ca2         db  0x00 ; '.'
0000000000017ca3         db  0x00 ; '.'
0000000000017ca4         db  0x00 ; '.'
0000000000017ca5         db  0x00 ; '.'
0000000000017ca6         db  0x00 ; '.'
0000000000017ca7         db  0x00 ; '.'
0000000000017ca8         db  0xc0 ; '.'
0000000000017ca9         db  0x00 ; '.'
0000000000017caa         db  0x00 ; '.'
0000000000017cab         db  0x00 ; '.'
0000000000017cac         db  0x00 ; '.'
0000000000017cad         db  0x00 ; '.'
0000000000017cae         db  0x00 ; '.'
0000000000017caf         db  0x00 ; '.'
0000000000017cb0         db  0xcd ; '.'
0000000000017cb1         db  0x00 ; '.'
0000000000017cb2         db  0x00 ; '.'
0000000000017cb3         db  0x00 ; '.'
0000000000017cb4         db  0x00 ; '.'
0000000000017cb5         db  0x00 ; '.'
0000000000017cb6         db  0x00 ; '.'
0000000000017cb7         db  0x00 ; '.'
0000000000017cb8         db  0xe5 ; '.'
0000000000017cb9         db  0x00 ; '.'
0000000000017cba         db  0x00 ; '.'
0000000000017cbb         db  0x00 ; '.'
0000000000017cbc         db  0x00 ; '.'
0000000000017cbd         db  0x00 ; '.'
0000000000017cbe         db  0x00 ; '.'
0000000000017cbf         db  0x00 ; '.'
0000000000017cc0         db  0xf7 ; '.'
0000000000017cc1         db  0x00 ; '.'
0000000000017cc2         db  0x00 ; '.'
0000000000017cc3         db  0x00 ; '.'
0000000000017cc4         db  0x00 ; '.'
0000000000017cc5         db  0x00 ; '.'
0000000000017cc6         db  0x00 ; '.'
0000000000017cc7         db  0x00 ; '.'
0000000000017cc8         db  0x08 ; '.'
0000000000017cc9         db  0x01 ; '.'
0000000000017cca         db  0x00 ; '.'
0000000000017ccb         db  0x00 ; '.'
0000000000017ccc         db  0x00 ; '.'
0000000000017ccd         db  0x00 ; '.'
0000000000017cce         db  0x00 ; '.'
0000000000017ccf         db  0x00 ; '.'
0000000000017cd0         db  0x2d ; '-'
0000000000017cd1         db  0x01 ; '.'
0000000000017cd2         db  0x00 ; '.'
0000000000017cd3         db  0x00 ; '.'
0000000000017cd4         db  0x00 ; '.'
0000000000017cd5         db  0x00 ; '.'
0000000000017cd6         db  0x00 ; '.'
0000000000017cd7         db  0x00 ; '.'
0000000000017cd8         db  0x51 ; 'Q'
0000000000017cd9         db  0x01 ; '.'
0000000000017cda         db  0x00 ; '.'
0000000000017cdb         db  0x00 ; '.'
0000000000017cdc         db  0x00 ; '.'
0000000000017cdd         db  0x00 ; '.'
0000000000017cde         db  0x00 ; '.'
0000000000017cdf         db  0x00 ; '.'
0000000000017ce0         db  0x6c ; 'l'
0000000000017ce1         db  0x01 ; '.'
0000000000017ce2         db  0x00 ; '.'
0000000000017ce3         db  0x00 ; '.'
0000000000017ce4         db  0x00 ; '.'
0000000000017ce5         db  0x00 ; '.'
0000000000017ce6         db  0x00 ; '.'
0000000000017ce7         db  0x00 ; '.'
0000000000017ce8         db  0x00 ; '.'
0000000000017ce9         db  0x00 ; '.'
0000000000017cea         db  0x00 ; '.'
0000000000017ceb         db  0x00 ; '.'
0000000000017cec         db  0x00 ; '.'
0000000000017ced         db  0x00 ; '.'
0000000000017cee         db  0x00 ; '.'
0000000000017cef         db  0x00 ; '.'
0000000000017cf0         db  0x00 ; '.'
0000000000017cf1         db  0x00 ; '.'
0000000000017cf2         db  0x00 ; '.'
0000000000017cf3         db  0x00 ; '.'
0000000000017cf4         db  0x00 ; '.'
0000000000017cf5         db  0x00 ; '.'
0000000000017cf6         db  0x00 ; '.'
0000000000017cf7         db  0x00 ; '.'
0000000000017cf8         db  0x00 ; '.'
0000000000017cf9         db  0x00 ; '.'
0000000000017cfa         db  0x00 ; '.'
0000000000017cfb         db  0x00 ; '.'
0000000000017cfc         db  0x00 ; '.'
0000000000017cfd         db  0x00 ; '.'
0000000000017cfe         db  0x00 ; '.'
0000000000017cff         db  0x00 ; '.'
                     __re_error_msgid:
0000000000017d00         db         "Success", 0                                ; DATA XREF=rpl_re_compile_pattern+71, rpl_regerror+25
0000000000017d08         db  0x4e ; 'N'
0000000000017d09         db  0x6f ; 'o'
0000000000017d0a         db  0x20 ; ' '
0000000000017d0b         db  0x6d ; 'm'
0000000000017d0c         db  0x61 ; 'a'
0000000000017d0d         db  0x74 ; 't'
0000000000017d0e         db  0x63 ; 'c'
0000000000017d0f         db  0x68 ; 'h'
0000000000017d10         db  0x00 ; '.'
0000000000017d11         db  0x49 ; 'I'
0000000000017d12         db  0x6e ; 'n'
0000000000017d13         db  0x76 ; 'v'
0000000000017d14         db  0x61 ; 'a'
0000000000017d15         db  0x6c ; 'l'
0000000000017d16         db  0x69 ; 'i'
0000000000017d17         db  0x64 ; 'd'
0000000000017d18         db  0x20 ; ' '
0000000000017d19         db  0x72 ; 'r'
0000000000017d1a         db  0x65 ; 'e'
0000000000017d1b         db  0x67 ; 'g'
0000000000017d1c         db  0x75 ; 'u'
0000000000017d1d         db  0x6c ; 'l'
0000000000017d1e         db  0x61 ; 'a'
0000000000017d1f         db  0x72 ; 'r'
0000000000017d20         db  0x20 ; ' '
0000000000017d21         db  0x65 ; 'e'
0000000000017d22         db  0x78 ; 'x'
0000000000017d23         db  0x70 ; 'p'
0000000000017d24         db  0x72 ; 'r'
0000000000017d25         db  0x65 ; 'e'
0000000000017d26         db  0x73 ; 's'
0000000000017d27         db  0x73 ; 's'
0000000000017d28         db  0x69 ; 'i'
0000000000017d29         db  0x6f ; 'o'
0000000000017d2a         db  0x6e ; 'n'
0000000000017d2b         db  0x00 ; '.'
0000000000017d2c         db  0x49 ; 'I'
0000000000017d2d         db  0x6e ; 'n'
0000000000017d2e         db  0x76 ; 'v'
0000000000017d2f         db  0x61 ; 'a'
0000000000017d30         db  0x6c ; 'l'
0000000000017d31         db  0x69 ; 'i'
0000000000017d32         db  0x64 ; 'd'
0000000000017d33         db  0x20 ; ' '
0000000000017d34         db  0x63 ; 'c'
0000000000017d35         db  0x6f ; 'o'
0000000000017d36         db  0x6c ; 'l'
0000000000017d37         db  0x6c ; 'l'
0000000000017d38         db  0x61 ; 'a'
0000000000017d39         db  0x74 ; 't'
0000000000017d3a         db  0x69 ; 'i'
0000000000017d3b         db  0x6f ; 'o'
0000000000017d3c         db  0x6e ; 'n'
0000000000017d3d         db  0x20 ; ' '
0000000000017d3e         db  0x63 ; 'c'
0000000000017d3f         db  0x68 ; 'h'
0000000000017d40         db  0x61 ; 'a'
0000000000017d41         db  0x72 ; 'r'
0000000000017d42         db  0x61 ; 'a'
0000000000017d43         db  0x63 ; 'c'
0000000000017d44         db  0x74 ; 't'
0000000000017d45         db  0x65 ; 'e'
0000000000017d46         db  0x72 ; 'r'
0000000000017d47         db  0x00 ; '.'
0000000000017d48         db  0x49 ; 'I'
0000000000017d49         db  0x6e ; 'n'
0000000000017d4a         db  0x76 ; 'v'
0000000000017d4b         db  0x61 ; 'a'
0000000000017d4c         db  0x6c ; 'l'
0000000000017d4d         db  0x69 ; 'i'
0000000000017d4e         db  0x64 ; 'd'
0000000000017d4f         db  0x20 ; ' '
0000000000017d50         db  0x63 ; 'c'
0000000000017d51         db  0x68 ; 'h'
0000000000017d52         db  0x61 ; 'a'
0000000000017d53         db  0x72 ; 'r'
0000000000017d54         db  0x61 ; 'a'
0000000000017d55         db  0x63 ; 'c'
0000000000017d56         db  0x74 ; 't'
0000000000017d57         db  0x65 ; 'e'
0000000000017d58         db  0x72 ; 'r'
0000000000017d59         db  0x20 ; ' '
0000000000017d5a         db  0x63 ; 'c'
0000000000017d5b         db  0x6c ; 'l'
0000000000017d5c         db  0x61 ; 'a'
0000000000017d5d         db  0x73 ; 's'
0000000000017d5e         db  0x73 ; 's'
0000000000017d5f         db  0x20 ; ' '
0000000000017d60         db  0x6e ; 'n'
0000000000017d61         db  0x61 ; 'a'
0000000000017d62         db  0x6d ; 'm'
0000000000017d63         db  0x65 ; 'e'
0000000000017d64         db  0x00 ; '.'
0000000000017d65         db  0x54 ; 'T'
0000000000017d66         db  0x72 ; 'r'
0000000000017d67         db  0x61 ; 'a'
0000000000017d68         db  0x69 ; 'i'
0000000000017d69         db  0x6c ; 'l'
0000000000017d6a         db  0x69 ; 'i'
0000000000017d6b         db  0x6e ; 'n'
0000000000017d6c         db  0x67 ; 'g'
0000000000017d6d         db  0x20 ; ' '
0000000000017d6e         db  0x62 ; 'b'
0000000000017d6f         db  0x61 ; 'a'
0000000000017d70         db  0x63 ; 'c'
0000000000017d71         db  0x6b ; 'k'
0000000000017d72         db  0x73 ; 's'
0000000000017d73         db  0x6c ; 'l'
0000000000017d74         db  0x61 ; 'a'
0000000000017d75         db  0x73 ; 's'
0000000000017d76         db  0x68 ; 'h'
0000000000017d77         db  0x00 ; '.'
0000000000017d78         db  0x49 ; 'I'
0000000000017d79         db  0x6e ; 'n'
0000000000017d7a         db  0x76 ; 'v'
0000000000017d7b         db  0x61 ; 'a'
0000000000017d7c         db  0x6c ; 'l'
0000000000017d7d         db  0x69 ; 'i'
0000000000017d7e         db  0x64 ; 'd'
0000000000017d7f         db  0x20 ; ' '
0000000000017d80         db  0x62 ; 'b'
0000000000017d81         db  0x61 ; 'a'
0000000000017d82         db  0x63 ; 'c'
0000000000017d83         db  0x6b ; 'k'
0000000000017d84         db  0x20 ; ' '
0000000000017d85         db  0x72 ; 'r'
0000000000017d86         db  0x65 ; 'e'
0000000000017d87         db  0x66 ; 'f'
0000000000017d88         db  0x65 ; 'e'
0000000000017d89         db  0x72 ; 'r'
0000000000017d8a         db  0x65 ; 'e'
0000000000017d8b         db  0x6e ; 'n'
0000000000017d8c         db  0x63 ; 'c'
0000000000017d8d         db  0x65 ; 'e'
0000000000017d8e         db  0x00 ; '.'
0000000000017d8f         db  0x55 ; 'U'
0000000000017d90         db  0x6e ; 'n'
0000000000017d91         db  0x6d ; 'm'
0000000000017d92         db  0x61 ; 'a'
0000000000017d93         db  0x74 ; 't'
0000000000017d94         db  0x63 ; 'c'
0000000000017d95         db  0x68 ; 'h'
0000000000017d96         db  0x65 ; 'e'
0000000000017d97         db  0x64 ; 'd'
0000000000017d98         db  0x20 ; ' '
0000000000017d99         db  0x5b ; '['
0000000000017d9a         db  0x2c ; ','
0000000000017d9b         db  0x20 ; ' '
0000000000017d9c         db  0x5b ; '['
0000000000017d9d         db  0x5e ; '^'
0000000000017d9e         db  0x2c ; ','
0000000000017d9f         db  0x20 ; ' '
0000000000017da0         db  0x5b ; '['
0000000000017da1         db  0x3a ; ':'
0000000000017da2         db  0x2c ; ','
0000000000017da3         db  0x20 ; ' '
0000000000017da4         db  0x5b ; '['
0000000000017da5         db  0x2e ; '.'
0000000000017da6         db  0x2c ; ','
0000000000017da7         db  0x20 ; ' '
0000000000017da8         db  0x6f ; 'o'
0000000000017da9         db  0x72 ; 'r'
0000000000017daa         db  0x20 ; ' '
0000000000017dab         db  0x5b ; '['
0000000000017dac         db  0x3d ; '='
0000000000017dad         db  0x00 ; '.'
0000000000017dae         db  0x55 ; 'U'
0000000000017daf         db  0x6e ; 'n'
0000000000017db0         db  0x6d ; 'm'
0000000000017db1         db  0x61 ; 'a'
0000000000017db2         db  0x74 ; 't'
0000000000017db3         db  0x63 ; 'c'
0000000000017db4         db  0x68 ; 'h'
0000000000017db5         db  0x65 ; 'e'
0000000000017db6         db  0x64 ; 'd'
0000000000017db7         db  0x20 ; ' '
0000000000017db8         db  0x28 ; '('
0000000000017db9         db  0x20 ; ' '
0000000000017dba         db  0x6f ; 'o'
0000000000017dbb         db  0x72 ; 'r'
0000000000017dbc         db  0x20 ; ' '
0000000000017dbd         db  0x5c ; '\'
0000000000017dbe         db  0x28 ; '('
0000000000017dbf         db  0x00 ; '.'
0000000000017dc0         db  0x55 ; 'U'
0000000000017dc1         db  0x6e ; 'n'
0000000000017dc2         db  0x6d ; 'm'
0000000000017dc3         db  0x61 ; 'a'
0000000000017dc4         db  0x74 ; 't'
0000000000017dc5         db  0x63 ; 'c'
0000000000017dc6         db  0x68 ; 'h'
0000000000017dc7         db  0x65 ; 'e'
0000000000017dc8         db  0x64 ; 'd'
0000000000017dc9         db  0x20 ; ' '
0000000000017dca         db  0x5c ; '\'
0000000000017dcb         db  0x7b ; '{'
0000000000017dcc         db  0x00 ; '.'
0000000000017dcd         db  0x49 ; 'I'
0000000000017dce         db  0x6e ; 'n'
0000000000017dcf         db  0x76 ; 'v'
0000000000017dd0         db  0x61 ; 'a'
0000000000017dd1         db  0x6c ; 'l'
0000000000017dd2         db  0x69 ; 'i'
0000000000017dd3         db  0x64 ; 'd'
0000000000017dd4         db  0x20 ; ' '
0000000000017dd5         db  0x63 ; 'c'
0000000000017dd6         db  0x6f ; 'o'
0000000000017dd7         db  0x6e ; 'n'
0000000000017dd8         db  0x74 ; 't'
0000000000017dd9         db  0x65 ; 'e'
0000000000017dda         db  0x6e ; 'n'
0000000000017ddb         db  0x74 ; 't'
0000000000017ddc         db  0x20 ; ' '
0000000000017ddd         db  0x6f ; 'o'
0000000000017dde         db  0x66 ; 'f'
0000000000017ddf         db  0x20 ; ' '
0000000000017de0         db  0x5c ; '\'
0000000000017de1         db  0x7b ; '{'
0000000000017de2         db  0x5c ; '\'
0000000000017de3         db  0x7d ; '}'
0000000000017de4         db  0x00 ; '.'
0000000000017de5         db  0x49 ; 'I'
0000000000017de6         db  0x6e ; 'n'
0000000000017de7         db  0x76 ; 'v'
0000000000017de8         db  0x61 ; 'a'
0000000000017de9         db  0x6c ; 'l'
0000000000017dea         db  0x69 ; 'i'
0000000000017deb         db  0x64 ; 'd'
0000000000017dec         db  0x20 ; ' '
0000000000017ded         db  0x72 ; 'r'
0000000000017dee         db  0x61 ; 'a'
0000000000017def         db  0x6e ; 'n'
0000000000017df0         db  0x67 ; 'g'
0000000000017df1         db  0x65 ; 'e'
0000000000017df2         db  0x20 ; ' '
0000000000017df3         db  0x65 ; 'e'
0000000000017df4         db  0x6e ; 'n'
0000000000017df5         db  0x64 ; 'd'
0000000000017df6         db  0x00 ; '.'
0000000000017df7         db  0x4d ; 'M'
0000000000017df8         db  0x65 ; 'e'
0000000000017df9         db  0x6d ; 'm'
0000000000017dfa         db  0x6f ; 'o'
0000000000017dfb         db  0x72 ; 'r'
0000000000017dfc         db  0x79 ; 'y'
0000000000017dfd         db  0x20 ; ' '
0000000000017dfe         db  0x65 ; 'e'
0000000000017dff         db  0x78 ; 'x'
0000000000017e00         db  0x68 ; 'h'
0000000000017e01         db  0x61 ; 'a'
0000000000017e02         db  0x75 ; 'u'
0000000000017e03         db  0x73 ; 's'
0000000000017e04         db  0x74 ; 't'
0000000000017e05         db  0x65 ; 'e'
0000000000017e06         db  0x64 ; 'd'
0000000000017e07         db  0x00 ; '.'
0000000000017e08         db  0x49 ; 'I'
0000000000017e09         db  0x6e ; 'n'
0000000000017e0a         db  0x76 ; 'v'
0000000000017e0b         db  0x61 ; 'a'
0000000000017e0c         db  0x6c ; 'l'
0000000000017e0d         db  0x69 ; 'i'
0000000000017e0e         db  0x64 ; 'd'
0000000000017e0f         db  0x20 ; ' '
0000000000017e10         db  0x70 ; 'p'
0000000000017e11         db  0x72 ; 'r'
0000000000017e12         db  0x65 ; 'e'
0000000000017e13         db  0x63 ; 'c'
0000000000017e14         db  0x65 ; 'e'
0000000000017e15         db  0x64 ; 'd'
0000000000017e16         db  0x69 ; 'i'
0000000000017e17         db  0x6e ; 'n'
0000000000017e18         db  0x67 ; 'g'
0000000000017e19         db  0x20 ; ' '
0000000000017e1a         db  0x72 ; 'r'
0000000000017e1b         db  0x65 ; 'e'
0000000000017e1c         db  0x67 ; 'g'
0000000000017e1d         db  0x75 ; 'u'
0000000000017e1e         db  0x6c ; 'l'
0000000000017e1f         db  0x61 ; 'a'
0000000000017e20         db  0x72 ; 'r'
0000000000017e21         db  0x20 ; ' '
0000000000017e22         db  0x65 ; 'e'
0000000000017e23         db  0x78 ; 'x'
0000000000017e24         db  0x70 ; 'p'
0000000000017e25         db  0x72 ; 'r'
0000000000017e26         db  0x65 ; 'e'
0000000000017e27         db  0x73 ; 's'
0000000000017e28         db  0x73 ; 's'
0000000000017e29         db  0x69 ; 'i'
0000000000017e2a         db  0x6f ; 'o'
0000000000017e2b         db  0x6e ; 'n'
0000000000017e2c         db  0x00 ; '.'
0000000000017e2d         db  0x50 ; 'P'
0000000000017e2e         db  0x72 ; 'r'
0000000000017e2f         db  0x65 ; 'e'
0000000000017e30         db  0x6d ; 'm'
0000000000017e31         db  0x61 ; 'a'
0000000000017e32         db  0x74 ; 't'
0000000000017e33         db  0x75 ; 'u'
0000000000017e34         db  0x72 ; 'r'
0000000000017e35         db  0x65 ; 'e'
0000000000017e36         db  0x20 ; ' '
0000000000017e37         db  0x65 ; 'e'
0000000000017e38         db  0x6e ; 'n'
0000000000017e39         db  0x64 ; 'd'
0000000000017e3a         db  0x20 ; ' '
0000000000017e3b         db  0x6f ; 'o'
0000000000017e3c         db  0x66 ; 'f'
0000000000017e3d         db  0x20 ; ' '
0000000000017e3e         db  0x72 ; 'r'
0000000000017e3f         db  0x65 ; 'e'
0000000000017e40         db  0x67 ; 'g'
0000000000017e41         db  0x75 ; 'u'
0000000000017e42         db  0x6c ; 'l'
0000000000017e43         db  0x61 ; 'a'
0000000000017e44         db  0x72 ; 'r'
0000000000017e45         db  0x20 ; ' '
0000000000017e46         db  0x65 ; 'e'
0000000000017e47         db  0x78 ; 'x'
0000000000017e48         db  0x70 ; 'p'
0000000000017e49         db  0x72 ; 'r'
0000000000017e4a         db  0x65 ; 'e'
0000000000017e4b         db  0x73 ; 's'
0000000000017e4c         db  0x73 ; 's'
0000000000017e4d         db  0x69 ; 'i'
0000000000017e4e         db  0x6f ; 'o'
0000000000017e4f         db  0x6e ; 'n'
0000000000017e50         db  0x00 ; '.'
0000000000017e51         db  0x52 ; 'R'
0000000000017e52         db  0x65 ; 'e'
0000000000017e53         db  0x67 ; 'g'
0000000000017e54         db  0x75 ; 'u'
0000000000017e55         db  0x6c ; 'l'
0000000000017e56         db  0x61 ; 'a'
0000000000017e57         db  0x72 ; 'r'
0000000000017e58         db  0x20 ; ' '
0000000000017e59         db  0x65 ; 'e'
0000000000017e5a         db  0x78 ; 'x'
0000000000017e5b         db  0x70 ; 'p'
0000000000017e5c         db  0x72 ; 'r'
0000000000017e5d         db  0x65 ; 'e'
0000000000017e5e         db  0x73 ; 's'
0000000000017e5f         db  0x73 ; 's'
0000000000017e60         db  0x69 ; 'i'
0000000000017e61         db  0x6f ; 'o'
0000000000017e62         db  0x6e ; 'n'
0000000000017e63         db  0x20 ; ' '
0000000000017e64         db  0x74 ; 't'
0000000000017e65         db  0x6f ; 'o'
0000000000017e66         db  0x6f ; 'o'
0000000000017e67         db  0x20 ; ' '
0000000000017e68         db  0x62 ; 'b'
0000000000017e69         db  0x69 ; 'i'
0000000000017e6a         db  0x67 ; 'g'
0000000000017e6b         db  0x00 ; '.'
0000000000017e6c         db  0x55 ; 'U'
0000000000017e6d         db  0x6e ; 'n'
0000000000017e6e         db  0x6d ; 'm'
0000000000017e6f         db  0x61 ; 'a'
0000000000017e70         db  0x74 ; 't'
0000000000017e71         db  0x63 ; 'c'
0000000000017e72         db  0x68 ; 'h'
0000000000017e73         db  0x65 ; 'e'
0000000000017e74         db  0x64 ; 'd'
0000000000017e75         db  0x20 ; ' '
0000000000017e76         db  0x29 ; ')'
0000000000017e77         db  0x20 ; ' '
0000000000017e78         db  0x6f ; 'o'
0000000000017e79         db  0x72 ; 'r'
0000000000017e7a         db  0x20 ; ' '
0000000000017e7b         db  0x5c ; '\'
0000000000017e7c         db  0x29 ; ')'
0000000000017e7d         db  0x00 ; '.'
0000000000017e7e         db  0x00 ; '.'
0000000000017e7f         db  0x00 ; '.'
0000000000017e80         dq         2 dup (7.7486e-304)                         ; DATA XREF=re_compile_fastmap_iter.isra.30+1044, re_compile_fastmap_iter.isra.30+1204
0000000000017e90         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
0000000000017e91         db  0x00 ; '.'
                     aPosix:
0000000000017e92         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
0000000000017e98         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
0000000000017e9e         db  0x00 ; '.'
0000000000017e9f         db  0x00 ; '.'


        ; Section .eh_frame_hdr
        ; Range: [0x17ea0; 0x1848c[ (1516 bytes)
        ; File offset : [97952; 99468[ (1516 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000017ea0         db  0x01 ; '.'
0000000000017ea1         db  0x1b ; '.'
0000000000017ea2         db  0x03 ; '.'
0000000000017ea3         db  0x3b ; ';'
0000000000017ea4         db  0xec ; '.'
0000000000017ea5         db  0x05 ; '.'
0000000000017ea6         db  0x00 ; '.'
0000000000017ea7         db  0x00 ; '.'
0000000000017ea8         db  0xbc ; '.'
0000000000017ea9         db  0x00 ; '.'
0000000000017eaa         db  0x00 ; '.'
0000000000017eab         db  0x00 ; '.'
0000000000017eac         db  0x10 ; '.'
0000000000017ead         db  0x9c ; '.'
0000000000017eae         db  0xfe ; '.'
0000000000017eaf         db  0xff ; '.'
0000000000017eb0         db  0x38 ; '8'
0000000000017eb1         db  0x06 ; '.'
0000000000017eb2         db  0x00 ; '.'
0000000000017eb3         db  0x00 ; '.'
0000000000017eb4         db  0xd0 ; '.'
0000000000017eb5         db  0xa0 ; '.'
0000000000017eb6         db  0xfe ; '.'
0000000000017eb7         db  0xff ; '.'
0000000000017eb8         db  0x60 ; '`'
0000000000017eb9         db  0x06 ; '.'
0000000000017eba         db  0x00 ; '.'
0000000000017ebb         db  0x00 ; '.'
0000000000017ebc         db  0xe0 ; '.'
0000000000017ebd         db  0xa0 ; '.'
0000000000017ebe         db  0xfe ; '.'
0000000000017ebf         db  0xff ; '.'
0000000000017ec0         db  0x44 ; 'D'
0000000000017ec1         db  0x09 ; '.'
0000000000017ec2         db  0x00 ; '.'
0000000000017ec3         db  0x00 ; '.'
0000000000017ec4         db  0xc0 ; '.'
0000000000017ec5         db  0xa1 ; '.'
0000000000017ec6         db  0xfe ; '.'
0000000000017ec7         db  0xff ; '.'
0000000000017ec8         db  0xec ; '.'
0000000000017ec9         db  0x09 ; '.'
0000000000017eca         db  0x00 ; '.'
0000000000017ecb         db  0x00 ; '.'
0000000000017ecc         db  0xf0 ; '.'
0000000000017ecd         db  0xb0 ; '.'
0000000000017ece         db  0xfe ; '.'
0000000000017ecf         db  0xff ; '.'
0000000000017ed0         db  0x08 ; '.'
0000000000017ed1         db  0x06 ; '.'
0000000000017ed2         db  0x00 ; '.'
0000000000017ed3         db  0x00 ; '.'
0000000000017ed4         db  0x00 ; '.'
0000000000017ed5         db  0xb2 ; '.'
0000000000017ed6         db  0xfe ; '.'
0000000000017ed7         db  0xff ; '.'
0000000000017ed8         db  0x78 ; 'x'
0000000000017ed9         db  0x06 ; '.'
0000000000017eda         db  0x00 ; '.'
0000000000017edb         db  0x00 ; '.'
0000000000017edc         db  0xc0 ; '.'
0000000000017edd         db  0xb2 ; '.'
0000000000017ede         db  0xfe ; '.'
0000000000017edf         db  0xff ; '.'
0000000000017ee0         db  0xb0 ; '.'
0000000000017ee1         db  0x06 ; '.'
0000000000017ee2         db  0x00 ; '.'
0000000000017ee3         db  0x00 ; '.'
0000000000017ee4         db  0x80 ; '.'
0000000000017ee5         db  0xb3 ; '.'
0000000000017ee6         db  0xfe ; '.'
0000000000017ee7         db  0xff ; '.'
0000000000017ee8         db  0xf0 ; '.'
0000000000017ee9         db  0x06 ; '.'
0000000000017eea         db  0x00 ; '.'
0000000000017eeb         db  0x00 ; '.'
0000000000017eec         db  0xe0 ; '.'
0000000000017eed         db  0xb3 ; '.'
0000000000017eee         db  0xfe ; '.'
0000000000017eef         db  0xff ; '.'
0000000000017ef0         db  0x0c ; '.'
0000000000017ef1         db  0x07 ; '.'
0000000000017ef2         db  0x00 ; '.'
0000000000017ef3         db  0x00 ; '.'
0000000000017ef4         db  0xa0 ; '.'
0000000000017ef5         db  0xb5 ; '.'
0000000000017ef6         db  0xfe ; '.'
0000000000017ef7         db  0xff ; '.'
0000000000017ef8         db  0x48 ; 'H'
0000000000017ef9         db  0x07 ; '.'
0000000000017efa         db  0x00 ; '.'
0000000000017efb         db  0x00 ; '.'
0000000000017efc         db  0x30 ; '0'
0000000000017efd         db  0xb6 ; '.'
0000000000017efe         db  0xfe ; '.'
0000000000017eff         db  0xff ; '.'
0000000000017f00         db  0x74 ; 't'
0000000000017f01         db  0x07 ; '.'
0000000000017f02         db  0x00 ; '.'
0000000000017f03         db  0x00 ; '.'
0000000000017f04         db  0x40 ; '@'
0000000000017f05         db  0xb7 ; '.'
0000000000017f06         db  0xfe ; '.'
0000000000017f07         db  0xff ; '.'
0000000000017f08         db  0xa8 ; '.'
0000000000017f09         db  0x07 ; '.'
0000000000017f0a         db  0x00 ; '.'
0000000000017f0b         db  0x00 ; '.'
0000000000017f0c         db  0x70 ; 'p'
0000000000017f0d         db  0xb7 ; '.'
0000000000017f0e         db  0xfe ; '.'
0000000000017f0f         db  0xff ; '.'
0000000000017f10         db  0xc4 ; '.'
0000000000017f11         db  0x07 ; '.'
0000000000017f12         db  0x00 ; '.'
0000000000017f13         db  0x00 ; '.'
0000000000017f14         db  0x30 ; '0'
0000000000017f15         db  0xb8 ; '.'
0000000000017f16         db  0xfe ; '.'
0000000000017f17         db  0xff ; '.'
0000000000017f18         db  0xec ; '.'
0000000000017f19         db  0x07 ; '.'
0000000000017f1a         db  0x00 ; '.'
0000000000017f1b         db  0x00 ; '.'
0000000000017f1c         db  0x20 ; ' '
0000000000017f1d         db  0xb9 ; '.'
0000000000017f1e         db  0xfe ; '.'
0000000000017f1f         db  0xff ; '.'
0000000000017f20         db  0x28 ; '('
0000000000017f21         db  0x08 ; '.'
0000000000017f22         db  0x00 ; '.'
0000000000017f23         db  0x00 ; '.'
0000000000017f24         db  0x70 ; 'p'
0000000000017f25         db  0xb9 ; '.'
0000000000017f26         db  0xfe ; '.'
0000000000017f27         db  0xff ; '.'
0000000000017f28         db  0x54 ; 'T'
0000000000017f29         db  0x08 ; '.'
0000000000017f2a         db  0x00 ; '.'
0000000000017f2b         db  0x00 ; '.'
0000000000017f2c         db  0xb0 ; '.'
0000000000017f2d         db  0xb9 ; '.'
0000000000017f2e         db  0xfe ; '.'
0000000000017f2f         db  0xff ; '.'
0000000000017f30         db  0x68 ; 'h'
0000000000017f31         db  0x08 ; '.'
0000000000017f32         db  0x00 ; '.'
0000000000017f33         db  0x00 ; '.'
0000000000017f34         db  0x90 ; '.'
0000000000017f35         db  0xba ; '.'
0000000000017f36         db  0xfe ; '.'
0000000000017f37         db  0xff ; '.'
0000000000017f38         db  0x84 ; '.'
0000000000017f39         db  0x08 ; '.'
0000000000017f3a         db  0x00 ; '.'
0000000000017f3b         db  0x00 ; '.'
0000000000017f3c         db  0xf0 ; '.'
0000000000017f3d         db  0xbd ; '.'
0000000000017f3e         db  0xfe ; '.'
0000000000017f3f         db  0xff ; '.'
0000000000017f40         db  0x04 ; '.'
0000000000017f41         db  0x09 ; '.'
0000000000017f42         db  0x00 ; '.'
0000000000017f43         db  0x00 ; '.'
0000000000017f44         db  0xd0 ; '.'
0000000000017f45         db  0xbe ; '.'
0000000000017f46         db  0xfe ; '.'
0000000000017f47         db  0xff ; '.'
0000000000017f48         db  0x2c ; ','
0000000000017f49         db  0x09 ; '.'
0000000000017f4a         db  0x00 ; '.'
0000000000017f4b         db  0x00 ; '.'
0000000000017f4c         db  0x00 ; '.'
0000000000017f4d         db  0xbf ; '.'
0000000000017f4e         db  0xfe ; '.'
0000000000017f4f         db  0xff ; '.'
0000000000017f50         db  0x6c ; 'l'
0000000000017f51         db  0x09 ; '.'
0000000000017f52         db  0x00 ; '.'
0000000000017f53         db  0x00 ; '.'
0000000000017f54         db  0x00 ; '.'
0000000000017f55         db  0xc0 ; '.'
0000000000017f56         db  0xfe ; '.'
0000000000017f57         db  0xff ; '.'
0000000000017f58         db  0xa4 ; '.'
0000000000017f59         db  0x09 ; '.'
0000000000017f5a         db  0x00 ; '.'
0000000000017f5b         db  0x00 ; '.'
0000000000017f5c         db  0x70 ; 'p'
0000000000017f5d         db  0xc0 ; '.'
0000000000017f5e         db  0xfe ; '.'
0000000000017f5f         db  0xff ; '.'
0000000000017f60         db  0xc0 ; '.'
0000000000017f61         db  0x09 ; '.'
0000000000017f62         db  0x00 ; '.'
0000000000017f63         db  0x00 ; '.'
0000000000017f64         db  0x90 ; '.'
0000000000017f65         db  0xc4 ; '.'
0000000000017f66         db  0xfe ; '.'
0000000000017f67         db  0xff ; '.'
0000000000017f68         db  0x48 ; 'H'
0000000000017f69         db  0x0a ; '.'
0000000000017f6a         db  0x00 ; '.'
0000000000017f6b         db  0x00 ; '.'
0000000000017f6c         db  0xa0 ; '.'
0000000000017f6d         db  0xc4 ; '.'
0000000000017f6e         db  0xfe ; '.'
0000000000017f6f         db  0xff ; '.'
0000000000017f70         db  0x5c ; '\'
0000000000017f71         db  0x0a ; '.'
0000000000017f72         db  0x00 ; '.'
0000000000017f73         db  0x00 ; '.'
0000000000017f74         db  0xb0 ; '.'
0000000000017f75         db  0xc4 ; '.'
0000000000017f76         db  0xfe ; '.'
0000000000017f77         db  0xff ; '.'
0000000000017f78         db  0x70 ; 'p'
0000000000017f79         db  0x0a ; '.'
0000000000017f7a         db  0x00 ; '.'
0000000000017f7b         db  0x00 ; '.'
0000000000017f7c         db  0x60 ; '`'
0000000000017f7d         db  0xc5 ; '.'
0000000000017f7e         db  0xfe ; '.'
0000000000017f7f         db  0xff ; '.'
0000000000017f80         db  0xa0 ; '.'
0000000000017f81         db  0x0a ; '.'
0000000000017f82         db  0x00 ; '.'
0000000000017f83         db  0x00 ; '.'
0000000000017f84         db  0xc0 ; '.'
0000000000017f85         db  0xc5 ; '.'
0000000000017f86         db  0xfe ; '.'
0000000000017f87         db  0xff ; '.'
0000000000017f88         db  0xd8 ; '.'
0000000000017f89         db  0x0a ; '.'
0000000000017f8a         db  0x00 ; '.'
0000000000017f8b         db  0x00 ; '.'
0000000000017f8c         db  0x60 ; '`'
0000000000017f8d         db  0xc6 ; '.'
0000000000017f8e         db  0xfe ; '.'
0000000000017f8f         db  0xff ; '.'
0000000000017f90         db  0x08 ; '.'
0000000000017f91         db  0x0b ; '.'
0000000000017f92         db  0x00 ; '.'
0000000000017f93         db  0x00 ; '.'
0000000000017f94         db  0xb0 ; '.'
0000000000017f95         db  0xc6 ; '.'
0000000000017f96         db  0xfe ; '.'
0000000000017f97         db  0xff ; '.'
0000000000017f98         db  0x20 ; ' '
0000000000017f99         db  0x0b ; '.'
0000000000017f9a         db  0x00 ; '.'
0000000000017f9b         db  0x00 ; '.'
0000000000017f9c         db  0x50 ; 'P'
0000000000017f9d         db  0xc7 ; '.'
0000000000017f9e         db  0xfe ; '.'
0000000000017f9f         db  0xff ; '.'
0000000000017fa0         db  0x40 ; '@'
0000000000017fa1         db  0x0b ; '.'
0000000000017fa2         db  0x00 ; '.'
0000000000017fa3         db  0x00 ; '.'
0000000000017fa4         db  0x40 ; '@'
0000000000017fa5         db  0xc8 ; '.'
0000000000017fa6         db  0xfe ; '.'
0000000000017fa7         db  0xff ; '.'
0000000000017fa8         db  0x84 ; '.'
0000000000017fa9         db  0x0b ; '.'
0000000000017faa         db  0x00 ; '.'
0000000000017fab         db  0x00 ; '.'
0000000000017fac         db  0x80 ; '.'
0000000000017fad         db  0xda ; '.'
0000000000017fae         db  0xfe ; '.'
0000000000017faf         db  0xff ; '.'
0000000000017fb0         db  0xfc ; '.'
0000000000017fb1         db  0x0b ; '.'
0000000000017fb2         db  0x00 ; '.'
0000000000017fb3         db  0x00 ; '.'
0000000000017fb4         db  0x30 ; '0'
0000000000017fb5         db  0xdc ; '.'
0000000000017fb6         db  0xfe ; '.'
0000000000017fb7         db  0xff ; '.'
0000000000017fb8         db  0x68 ; 'h'
0000000000017fb9         db  0x0c ; '.'
0000000000017fba         db  0x00 ; '.'
0000000000017fbb         db  0x00 ; '.'
0000000000017fbc         db  0x70 ; 'p'
0000000000017fbd         db  0xdc ; '.'
0000000000017fbe         db  0xfe ; '.'
0000000000017fbf         db  0xff ; '.'
0000000000017fc0         db  0x94 ; '.'
0000000000017fc1         db  0x0c ; '.'
0000000000017fc2         db  0x00 ; '.'
0000000000017fc3         db  0x00 ; '.'
0000000000017fc4         db  0x90 ; '.'
0000000000017fc5         db  0xdc ; '.'
0000000000017fc6         db  0xfe ; '.'
0000000000017fc7         db  0xff ; '.'
0000000000017fc8         db  0xa8 ; '.'
0000000000017fc9         db  0x0c ; '.'
0000000000017fca         db  0x00 ; '.'
0000000000017fcb         db  0x00 ; '.'
0000000000017fcc         db  0xb0 ; '.'
0000000000017fcd         db  0xdc ; '.'
0000000000017fce         db  0xfe ; '.'
0000000000017fcf         db  0xff ; '.'
0000000000017fd0         db  0xbc ; '.'
0000000000017fd1         db  0x0c ; '.'
0000000000017fd2         db  0x00 ; '.'
0000000000017fd3         db  0x00 ; '.'
0000000000017fd4         db  0xf0 ; '.'
0000000000017fd5         db  0xdc ; '.'
0000000000017fd6         db  0xfe ; '.'
0000000000017fd7         db  0xff ; '.'
0000000000017fd8         db  0xd0 ; '.'
0000000000017fd9         db  0x0c ; '.'
0000000000017fda         db  0x00 ; '.'
0000000000017fdb         db  0x00 ; '.'
0000000000017fdc         db  0x10 ; '.'
0000000000017fdd         db  0xdd ; '.'
0000000000017fde         db  0xfe ; '.'
0000000000017fdf         db  0xff ; '.'
0000000000017fe0         db  0xe4 ; '.'
0000000000017fe1         db  0x0c ; '.'
0000000000017fe2         db  0x00 ; '.'
0000000000017fe3         db  0x00 ; '.'
0000000000017fe4         db  0x40 ; '@'
0000000000017fe5         db  0xdd ; '.'
0000000000017fe6         db  0xfe ; '.'
0000000000017fe7         db  0xff ; '.'
0000000000017fe8         db  0xf8 ; '.'
0000000000017fe9         db  0x0c ; '.'
0000000000017fea         db  0x00 ; '.'
0000000000017feb         db  0x00 ; '.'
0000000000017fec         db  0xc0 ; '.'
0000000000017fed         db  0xdd ; '.'
0000000000017fee         db  0xfe ; '.'
0000000000017fef         db  0xff ; '.'
0000000000017ff0         db  0x4c ; 'L'
0000000000017ff1         db  0x0d ; '.'
0000000000017ff2         db  0x00 ; '.'
0000000000017ff3         db  0x00 ; '.'
0000000000017ff4         db  0xb0 ; '.'
0000000000017ff5         db  0xde ; '.'
0000000000017ff6         db  0xfe ; '.'
0000000000017ff7         db  0xff ; '.'
0000000000017ff8         db  0xb8 ; '.'
0000000000017ff9         db  0x0d ; '.'
0000000000017ffa         db  0x00 ; '.'
0000000000017ffb         db  0x00 ; '.'
0000000000017ffc         db  0xc0 ; '.'
0000000000017ffd         db  0xde ; '.'
0000000000017ffe         db  0xfe ; '.'
0000000000017fff         db  0xff ; '.'
0000000000018000         db  0xcc ; '.'
0000000000018001         db  0x0d ; '.'
0000000000018002         db  0x00 ; '.'
0000000000018003         db  0x00 ; '.'
0000000000018004         db  0x60 ; '`'
0000000000018005         db  0xdf ; '.'
0000000000018006         db  0xfe ; '.'
0000000000018007         db  0xff ; '.'
0000000000018008         db  0xf8 ; '.'
0000000000018009         db  0x0d ; '.'
000000000001800a         db  0x00 ; '.'
000000000001800b         db  0x00 ; '.'
000000000001800c         db  0x80 ; '.'
000000000001800d         db  0xdf ; '.'
000000000001800e         db  0xfe ; '.'
000000000001800f         db  0xff ; '.'
0000000000018010         db  0x0c ; '.'
0000000000018011         db  0x0e ; '.'
0000000000018012         db  0x00 ; '.'
0000000000018013         db  0x00 ; '.'
0000000000018014         db  0x90 ; '.'
0000000000018015         db  0xdf ; '.'
0000000000018016         db  0xfe ; '.'
0000000000018017         db  0xff ; '.'
0000000000018018         db  0x20 ; ' '
0000000000018019         db  0x0e ; '.'
000000000001801a         db  0x00 ; '.'
000000000001801b         db  0x00 ; '.'
000000000001801c         db  0xb0 ; '.'
000000000001801d         db  0xdf ; '.'
000000000001801e         db  0xfe ; '.'
000000000001801f         db  0xff ; '.'
0000000000018020         db  0x34 ; '4'
0000000000018021         db  0x0e ; '.'
0000000000018022         db  0x00 ; '.'
0000000000018023         db  0x00 ; '.'
0000000000018024         db  0xd0 ; '.'
0000000000018025         db  0xdf ; '.'
0000000000018026         db  0xfe ; '.'
0000000000018027         db  0xff ; '.'
0000000000018028         db  0x48 ; 'H'
0000000000018029         db  0x0e ; '.'
000000000001802a         db  0x00 ; '.'
000000000001802b         db  0x00 ; '.'
000000000001802c         db  0x60 ; '`'
000000000001802d         db  0xe0 ; '.'
000000000001802e         db  0xfe ; '.'
000000000001802f         db  0xff ; '.'
0000000000018030         db  0x64 ; 'd'
0000000000018031         db  0x0e ; '.'
0000000000018032         db  0x00 ; '.'
0000000000018033         db  0x00 ; '.'
0000000000018034         db  0xf0 ; '.'
0000000000018035         db  0xe0 ; '.'
0000000000018036         db  0xfe ; '.'
0000000000018037         db  0xff ; '.'
0000000000018038         db  0x80 ; '.'
0000000000018039         db  0x0e ; '.'
000000000001803a         db  0x00 ; '.'
000000000001803b         db  0x00 ; '.'
000000000001803c         db  0x00 ; '.'
000000000001803d         db  0xe1 ; '.'
000000000001803e         db  0xfe ; '.'
000000000001803f         db  0xff ; '.'
0000000000018040         db  0x94 ; '.'
0000000000018041         db  0x0e ; '.'
0000000000018042         db  0x00 ; '.'
0000000000018043         db  0x00 ; '.'
0000000000018044         db  0x10 ; '.'
0000000000018045         db  0xe1 ; '.'
0000000000018046         db  0xfe ; '.'
0000000000018047         db  0xff ; '.'
0000000000018048         db  0xa8 ; '.'
0000000000018049         db  0x0e ; '.'
000000000001804a         db  0x00 ; '.'
000000000001804b         db  0x00 ; '.'
000000000001804c         db  0xb0 ; '.'
000000000001804d         db  0xe1 ; '.'
000000000001804e         db  0xfe ; '.'
000000000001804f         db  0xff ; '.'
0000000000018050         db  0xc4 ; '.'
0000000000018051         db  0x0e ; '.'
0000000000018052         db  0x00 ; '.'
0000000000018053         db  0x00 ; '.'
0000000000018054         db  0xc0 ; '.'
0000000000018055         db  0xe1 ; '.'
0000000000018056         db  0xfe ; '.'
0000000000018057         db  0xff ; '.'
0000000000018058         db  0xd8 ; '.'
0000000000018059         db  0x0e ; '.'
000000000001805a         db  0x00 ; '.'
000000000001805b         db  0x00 ; '.'
000000000001805c         db  0xe0 ; '.'
000000000001805d         db  0xe1 ; '.'
000000000001805e         db  0xfe ; '.'
000000000001805f         db  0xff ; '.'
0000000000018060         db  0xec ; '.'
0000000000018061         db  0x0e ; '.'
0000000000018062         db  0x00 ; '.'
0000000000018063         db  0x00 ; '.'
0000000000018064         db  0xf0 ; '.'
0000000000018065         db  0xe1 ; '.'
0000000000018066         db  0xfe ; '.'
0000000000018067         db  0xff ; '.'
0000000000018068         db  0x00 ; '.'
0000000000018069         db  0x0f ; '.'
000000000001806a         db  0x00 ; '.'
000000000001806b         db  0x00 ; '.'
000000000001806c         db  0x80 ; '.'
000000000001806d         db  0xe2 ; '.'
000000000001806e         db  0xfe ; '.'
000000000001806f         db  0xff ; '.'
0000000000018070         db  0x1c ; '.'
0000000000018071         db  0x0f ; '.'
0000000000018072         db  0x00 ; '.'
0000000000018073         db  0x00 ; '.'
0000000000018074         db  0x20 ; ' '
0000000000018075         db  0xe3 ; '.'
0000000000018076         db  0xfe ; '.'
0000000000018077         db  0xff ; '.'
0000000000018078         db  0x38 ; '8'
0000000000018079         db  0x0f ; '.'
000000000001807a         db  0x00 ; '.'
000000000001807b         db  0x00 ; '.'
000000000001807c         db  0x30 ; '0'
000000000001807d         db  0xe3 ; '.'
000000000001807e         db  0xfe ; '.'
000000000001807f         db  0xff ; '.'
0000000000018080         db  0x4c ; 'L'
0000000000018081         db  0x0f ; '.'
0000000000018082         db  0x00 ; '.'
0000000000018083         db  0x00 ; '.'
0000000000018084         db  0x50 ; 'P'
0000000000018085         db  0xe3 ; '.'
0000000000018086         db  0xfe ; '.'
0000000000018087         db  0xff ; '.'
0000000000018088         db  0x60 ; '`'
0000000000018089         db  0x0f ; '.'
000000000001808a         db  0x00 ; '.'
000000000001808b         db  0x00 ; '.'
000000000001808c         db  0x70 ; 'p'
000000000001808d         db  0xe3 ; '.'
000000000001808e         db  0xfe ; '.'
000000000001808f         db  0xff ; '.'
0000000000018090         db  0x74 ; 't'
0000000000018091         db  0x0f ; '.'
0000000000018092         db  0x00 ; '.'
0000000000018093         db  0x00 ; '.'
0000000000018094         db  0x80 ; '.'
0000000000018095         db  0xe3 ; '.'
0000000000018096         db  0xfe ; '.'
0000000000018097         db  0xff ; '.'
0000000000018098         db  0x88 ; '.'
0000000000018099         db  0x0f ; '.'
000000000001809a         db  0x00 ; '.'
000000000001809b         db  0x00 ; '.'
000000000001809c         db  0xa0 ; '.'
000000000001809d         db  0xe3 ; '.'
000000000001809e         db  0xfe ; '.'
000000000001809f         db  0xff ; '.'
00000000000180a0         db  0x9c ; '.'
00000000000180a1         db  0x0f ; '.'
00000000000180a2         db  0x00 ; '.'
00000000000180a3         db  0x00 ; '.'
00000000000180a4         db  0xc0 ; '.'
00000000000180a5         db  0xe3 ; '.'
00000000000180a6         db  0xfe ; '.'
00000000000180a7         db  0xff ; '.'
00000000000180a8         db  0xb0 ; '.'
00000000000180a9         db  0x0f ; '.'
00000000000180aa         db  0x00 ; '.'
00000000000180ab         db  0x00 ; '.'
00000000000180ac         db  0xe0 ; '.'
00000000000180ad         db  0xe3 ; '.'
00000000000180ae         db  0xfe ; '.'
00000000000180af         db  0xff ; '.'
00000000000180b0         db  0xc8 ; '.'
00000000000180b1         db  0x0f ; '.'
00000000000180b2         db  0x00 ; '.'
00000000000180b3         db  0x00 ; '.'
00000000000180b4         db  0x40 ; '@'
00000000000180b5         db  0xe4 ; '.'
00000000000180b6         db  0xfe ; '.'
00000000000180b7         db  0xff ; '.'
00000000000180b8         db  0x00 ; '.'
00000000000180b9         db  0x10 ; '.'
00000000000180ba         db  0x00 ; '.'
00000000000180bb         db  0x00 ; '.'
00000000000180bc         db  0x50 ; 'P'
00000000000180bd         db  0xe4 ; '.'
00000000000180be         db  0xfe ; '.'
00000000000180bf         db  0xff ; '.'
00000000000180c0         db  0x18 ; '.'
00000000000180c1         db  0x10 ; '.'
00000000000180c2         db  0x00 ; '.'
00000000000180c3         db  0x00 ; '.'
00000000000180c4         db  0x70 ; 'p'
00000000000180c5         db  0xe8 ; '.'
00000000000180c6         db  0xfe ; '.'
00000000000180c7         db  0xff ; '.'
00000000000180c8         db  0x2c ; ','
00000000000180c9         db  0x11 ; '.'
00000000000180ca         db  0x00 ; '.'
00000000000180cb         db  0x00 ; '.'
00000000000180cc         db  0x90 ; '.'
00000000000180cd         db  0xe8 ; '.'
00000000000180ce         db  0xfe ; '.'
00000000000180cf         db  0xff ; '.'
00000000000180d0         db  0x40 ; '@'
00000000000180d1         db  0x11 ; '.'
00000000000180d2         db  0x00 ; '.'
00000000000180d3         db  0x00 ; '.'
00000000000180d4         db  0x10 ; '.'
00000000000180d5         db  0xe9 ; '.'
00000000000180d6         db  0xfe ; '.'
00000000000180d7         db  0xff ; '.'
00000000000180d8         db  0x5c ; '\'
00000000000180d9         db  0x11 ; '.'
00000000000180da         db  0x00 ; '.'
00000000000180db         db  0x00 ; '.'
00000000000180dc         db  0xf0 ; '.'
00000000000180dd         db  0xe9 ; '.'
00000000000180de         db  0xfe ; '.'
00000000000180df         db  0xff ; '.'
00000000000180e0         db  0x88 ; '.'
00000000000180e1         db  0x11 ; '.'
00000000000180e2         db  0x00 ; '.'
00000000000180e3         db  0x00 ; '.'
00000000000180e4         db  0x70 ; 'p'
00000000000180e5         db  0xea ; '.'
00000000000180e6         db  0xfe ; '.'
00000000000180e7         db  0xff ; '.'
00000000000180e8         db  0xa8 ; '.'
00000000000180e9         db  0x11 ; '.'
00000000000180ea         db  0x00 ; '.'
00000000000180eb         db  0x00 ; '.'
00000000000180ec         db  0x90 ; '.'
00000000000180ed         db  0xea ; '.'
00000000000180ee         db  0xfe ; '.'
00000000000180ef         db  0xff ; '.'
00000000000180f0         db  0xc4 ; '.'
00000000000180f1         db  0x11 ; '.'
00000000000180f2         db  0x00 ; '.'
00000000000180f3         db  0x00 ; '.'
00000000000180f4         db  0xc0 ; '.'
00000000000180f5         db  0xea ; '.'
00000000000180f6         db  0xfe ; '.'
00000000000180f7         db  0xff ; '.'
00000000000180f8         db  0xd8 ; '.'
00000000000180f9         db  0x11 ; '.'
00000000000180fa         db  0x00 ; '.'
00000000000180fb         db  0x00 ; '.'
00000000000180fc         db  0xd0 ; '.'
00000000000180fd         db  0xea ; '.'
00000000000180fe         db  0xfe ; '.'
00000000000180ff         db  0xff ; '.'
0000000000018100         db  0xec ; '.'
0000000000018101         db  0x11 ; '.'
0000000000018102         db  0x00 ; '.'
0000000000018103         db  0x00 ; '.'
0000000000018104         db  0x10 ; '.'
0000000000018105         db  0xeb ; '.'
0000000000018106         db  0xfe ; '.'
0000000000018107         db  0xff ; '.'
0000000000018108         db  0x10 ; '.'
0000000000018109         db  0x12 ; '.'
000000000001810a         db  0x00 ; '.'
000000000001810b         db  0x00 ; '.'
000000000001810c         db  0x40 ; '@'
000000000001810d         db  0xeb ; '.'
000000000001810e         db  0xfe ; '.'
000000000001810f         db  0xff ; '.'
0000000000018110         db  0x24 ; '$'
0000000000018111         db  0x12 ; '.'
0000000000018112         db  0x00 ; '.'
0000000000018113         db  0x00 ; '.'
0000000000018114         db  0xd0 ; '.'
0000000000018115         db  0xeb ; '.'
0000000000018116         db  0xfe ; '.'
0000000000018117         db  0xff ; '.'
0000000000018118         db  0x3c ; '<'
0000000000018119         db  0x12 ; '.'
000000000001811a         db  0x00 ; '.'
000000000001811b         db  0x00 ; '.'
000000000001811c         db  0x20 ; ' '
000000000001811d         db  0xec ; '.'
000000000001811e         db  0xfe ; '.'
000000000001811f         db  0xff ; '.'
0000000000018120         db  0x54 ; 'T'
0000000000018121         db  0x12 ; '.'
0000000000018122         db  0x00 ; '.'
0000000000018123         db  0x00 ; '.'
0000000000018124         db  0x40 ; '@'
0000000000018125         db  0xec ; '.'
0000000000018126         db  0xfe ; '.'
0000000000018127         db  0xff ; '.'
0000000000018128         db  0x70 ; 'p'
0000000000018129         db  0x12 ; '.'
000000000001812a         db  0x00 ; '.'
000000000001812b         db  0x00 ; '.'
000000000001812c         db  0x70 ; 'p'
000000000001812d         db  0xec ; '.'
000000000001812e         db  0xfe ; '.'
000000000001812f         db  0xff ; '.'
0000000000018130         db  0x8c ; '.'
0000000000018131         db  0x12 ; '.'
0000000000018132         db  0x00 ; '.'
0000000000018133         db  0x00 ; '.'
0000000000018134         db  0xa0 ; '.'
0000000000018135         db  0xec ; '.'
0000000000018136         db  0xfe ; '.'
0000000000018137         db  0xff ; '.'
0000000000018138         db  0xb4 ; '.'
0000000000018139         db  0x12 ; '.'
000000000001813a         db  0x00 ; '.'
000000000001813b         db  0x00 ; '.'
000000000001813c         db  0xc0 ; '.'
000000000001813d         db  0xec ; '.'
000000000001813e         db  0xfe ; '.'
000000000001813f         db  0xff ; '.'
0000000000018140         db  0xd0 ; '.'
0000000000018141         db  0x12 ; '.'
0000000000018142         db  0x00 ; '.'
0000000000018143         db  0x00 ; '.'
0000000000018144         db  0xe0 ; '.'
0000000000018145         db  0xed ; '.'
0000000000018146         db  0xfe ; '.'
0000000000018147         db  0xff ; '.'
0000000000018148         db  0x1c ; '.'
0000000000018149         db  0x13 ; '.'
000000000001814a         db  0x00 ; '.'
000000000001814b         db  0x00 ; '.'
000000000001814c         db  0x10 ; '.'
000000000001814d         db  0xee ; '.'
000000000001814e         db  0xfe ; '.'
000000000001814f         db  0xff ; '.'
0000000000018150         db  0x38 ; '8'
0000000000018151         db  0x13 ; '.'
0000000000018152         db  0x00 ; '.'
0000000000018153         db  0x00 ; '.'
0000000000018154         db  0xd0 ; '.'
0000000000018155         db  0xf4 ; '.'
0000000000018156         db  0xfe ; '.'
0000000000018157         db  0xff ; '.'
0000000000018158         db  0x88 ; '.'
0000000000018159         db  0x13 ; '.'
000000000001815a         db  0x00 ; '.'
000000000001815b         db  0x00 ; '.'
000000000001815c         db  0xf0 ; '.'
000000000001815d         db  0xf8 ; '.'
000000000001815e         db  0xfe ; '.'
000000000001815f         db  0xff ; '.'
0000000000018160         db  0xd8 ; '.'
0000000000018161         db  0x13 ; '.'
0000000000018162         db  0x00 ; '.'
0000000000018163         db  0x00 ; '.'
0000000000018164         db  0x70 ; 'p'
0000000000018165         db  0xf9 ; '.'
0000000000018166         db  0xfe ; '.'
0000000000018167         db  0xff ; '.'
0000000000018168         db  0x10 ; '.'
0000000000018169         db  0x14 ; '.'
000000000001816a         db  0x00 ; '.'
000000000001816b         db  0x00 ; '.'
000000000001816c         db  0xf0 ; '.'
000000000001816d         db  0xfb ; '.'
000000000001816e         db  0xfe ; '.'
000000000001816f         db  0xff ; '.'
0000000000018170         db  0x48 ; 'H'
0000000000018171         db  0x14 ; '.'
0000000000018172         db  0x00 ; '.'
0000000000018173         db  0x00 ; '.'
0000000000018174         db  0x30 ; '0'
0000000000018175         db  0xfc ; '.'
0000000000018176         db  0xfe ; '.'
0000000000018177         db  0xff ; '.'
0000000000018178         db  0x68 ; 'h'
0000000000018179         db  0x14 ; '.'
000000000001817a         db  0x00 ; '.'
000000000001817b         db  0x00 ; '.'
000000000001817c         db  0x90 ; '.'
000000000001817d         db  0xfc ; '.'
000000000001817e         db  0xfe ; '.'
000000000001817f         db  0xff ; '.'
0000000000018180         db  0x98 ; '.'
0000000000018181         db  0x14 ; '.'
0000000000018182         db  0x00 ; '.'
0000000000018183         db  0x00 ; '.'
0000000000018184         db  0x20 ; ' '
0000000000018185         db  0xfd ; '.'
0000000000018186         db  0xfe ; '.'
0000000000018187         db  0xff ; '.'
0000000000018188         db  0xd8 ; '.'
0000000000018189         db  0x14 ; '.'
000000000001818a         db  0x00 ; '.'
000000000001818b         db  0x00 ; '.'
000000000001818c         db  0x50 ; 'P'
000000000001818d         db  0xfe ; '.'
000000000001818e         db  0xfe ; '.'
000000000001818f         db  0xff ; '.'
0000000000018190         db  0xec ; '.'
0000000000018191         db  0x14 ; '.'
0000000000018192         db  0x00 ; '.'
0000000000018193         db  0x00 ; '.'
0000000000018194         db  0x70 ; 'p'
0000000000018195         db  0xfe ; '.'
0000000000018196         db  0xfe ; '.'
0000000000018197         db  0xff ; '.'
0000000000018198         db  0x00 ; '.'
0000000000018199         db  0x15 ; '.'
000000000001819a         db  0x00 ; '.'
000000000001819b         db  0x00 ; '.'
000000000001819c         db  0xa0 ; '.'
000000000001819d         db  0x00 ; '.'
000000000001819e         db  0xff ; '.'
000000000001819f         db  0xff ; '.'
00000000000181a0         db  0x94 ; '.'
00000000000181a1         db  0x15 ; '.'
00000000000181a2         db  0x00 ; '.'
00000000000181a3         db  0x00 ; '.'
00000000000181a4         db  0x10 ; '.'
00000000000181a5         db  0x01 ; '.'
00000000000181a6         db  0xff ; '.'
00000000000181a7         db  0xff ; '.'
00000000000181a8         db  0xa8 ; '.'
00000000000181a9         db  0x15 ; '.'
00000000000181aa         db  0x00 ; '.'
00000000000181ab         db  0x00 ; '.'
00000000000181ac         db  0x80 ; '.'
00000000000181ad         db  0x01 ; '.'
00000000000181ae         db  0xff ; '.'
00000000000181af         db  0xff ; '.'
00000000000181b0         db  0xd4 ; '.'
00000000000181b1         db  0x15 ; '.'
00000000000181b2         db  0x00 ; '.'
00000000000181b3         db  0x00 ; '.'
00000000000181b4         db  0xe0 ; '.'
00000000000181b5         db  0x01 ; '.'
00000000000181b6         db  0xff ; '.'
00000000000181b7         db  0xff ; '.'
00000000000181b8         db  0x00 ; '.'
00000000000181b9         db  0x16 ; '.'
00000000000181ba         db  0x00 ; '.'
00000000000181bb         db  0x00 ; '.'
00000000000181bc         db  0x80 ; '.'
00000000000181bd         db  0x02 ; '.'
00000000000181be         db  0xff ; '.'
00000000000181bf         db  0xff ; '.'
00000000000181c0         db  0x34 ; '4'
00000000000181c1         db  0x16 ; '.'
00000000000181c2         db  0x00 ; '.'
00000000000181c3         db  0x00 ; '.'
00000000000181c4         db  0xf0 ; '.'
00000000000181c5         db  0x02 ; '.'
00000000000181c6         db  0xff ; '.'
00000000000181c7         db  0xff ; '.'
00000000000181c8         db  0x60 ; '`'
00000000000181c9         db  0x16 ; '.'
00000000000181ca         db  0x00 ; '.'
00000000000181cb         db  0x00 ; '.'
00000000000181cc         db  0x20 ; ' '
00000000000181cd         db  0x04 ; '.'
00000000000181ce         db  0xff ; '.'
00000000000181cf         db  0xff ; '.'
00000000000181d0         db  0x98 ; '.'
00000000000181d1         db  0x16 ; '.'
00000000000181d2         db  0x00 ; '.'
00000000000181d3         db  0x00 ; '.'
00000000000181d4         db  0x10 ; '.'
00000000000181d5         db  0x05 ; '.'
00000000000181d6         db  0xff ; '.'
00000000000181d7         db  0xff ; '.'
00000000000181d8         db  0xe8 ; '.'
00000000000181d9         db  0x16 ; '.'
00000000000181da         db  0x00 ; '.'
00000000000181db         db  0x00 ; '.'
00000000000181dc         db  0x80 ; '.'
00000000000181dd         db  0x05 ; '.'
00000000000181de         db  0xff ; '.'
00000000000181df         db  0xff ; '.'
00000000000181e0         db  0x18 ; '.'
00000000000181e1         db  0x17 ; '.'
00000000000181e2         db  0x00 ; '.'
00000000000181e3         db  0x00 ; '.'
00000000000181e4         db  0x50 ; 'P'
00000000000181e5         db  0x07 ; '.'
00000000000181e6         db  0xff ; '.'
00000000000181e7         db  0xff ; '.'
00000000000181e8         db  0x64 ; 'd'
00000000000181e9         db  0x17 ; '.'
00000000000181ea         db  0x00 ; '.'
00000000000181eb         db  0x00 ; '.'
00000000000181ec         db  0x70 ; 'p'
00000000000181ed         db  0x0d ; '.'
00000000000181ee         db  0xff ; '.'
00000000000181ef         db  0xff ; '.'
00000000000181f0         db  0xb0 ; '.'
00000000000181f1         db  0x17 ; '.'
00000000000181f2         db  0x00 ; '.'
00000000000181f3         db  0x00 ; '.'
00000000000181f4         db  0xc0 ; '.'
00000000000181f5         db  0x0e ; '.'
00000000000181f6         db  0xff ; '.'
00000000000181f7         db  0xff ; '.'
00000000000181f8         db  0x0c ; '.'
00000000000181f9         db  0x18 ; '.'
00000000000181fa         db  0x00 ; '.'
00000000000181fb         db  0x00 ; '.'
00000000000181fc         db  0x50 ; 'P'
00000000000181fd         db  0x0f ; '.'
00000000000181fe         db  0xff ; '.'
00000000000181ff         db  0xff ; '.'
0000000000018200         db  0x38 ; '8'
0000000000018201         db  0x18 ; '.'
0000000000018202         db  0x00 ; '.'
0000000000018203         db  0x00 ; '.'
0000000000018204         db  0x80 ; '.'
0000000000018205         db  0x0f ; '.'
0000000000018206         db  0xff ; '.'
0000000000018207         db  0xff ; '.'
0000000000018208         db  0x54 ; 'T'
0000000000018209         db  0x18 ; '.'
000000000001820a         db  0x00 ; '.'
000000000001820b         db  0x00 ; '.'
000000000001820c         db  0xb0 ; '.'
000000000001820d         db  0x0f ; '.'
000000000001820e         db  0xff ; '.'
000000000001820f         db  0xff ; '.'
0000000000018210         db  0x68 ; 'h'
0000000000018211         db  0x18 ; '.'
0000000000018212         db  0x00 ; '.'
0000000000018213         db  0x00 ; '.'
0000000000018214         db  0xd0 ; '.'
0000000000018215         db  0x0f ; '.'
0000000000018216         db  0xff ; '.'
0000000000018217         db  0xff ; '.'
0000000000018218         db  0x80 ; '.'
0000000000018219         db  0x18 ; '.'
000000000001821a         db  0x00 ; '.'
000000000001821b         db  0x00 ; '.'
000000000001821c         db  0xa0 ; '.'
000000000001821d         db  0x11 ; '.'
000000000001821e         db  0xff ; '.'
000000000001821f         db  0xff ; '.'
0000000000018220         db  0xcc ; '.'
0000000000018221         db  0x18 ; '.'
0000000000018222         db  0x00 ; '.'
0000000000018223         db  0x00 ; '.'
0000000000018224         db  0x40 ; '@'
0000000000018225         db  0x12 ; '.'
0000000000018226         db  0xff ; '.'
0000000000018227         db  0xff ; '.'
0000000000018228         db  0x04 ; '.'
0000000000018229         db  0x19 ; '.'
000000000001822a         db  0x00 ; '.'
000000000001822b         db  0x00 ; '.'
000000000001822c         db  0xc0 ; '.'
000000000001822d         db  0x14 ; '.'
000000000001822e         db  0xff ; '.'
000000000001822f         db  0xff ; '.'
0000000000018230         db  0x50 ; 'P'
0000000000018231         db  0x19 ; '.'
0000000000018232         db  0x00 ; '.'
0000000000018233         db  0x00 ; '.'
0000000000018234         db  0x20 ; ' '
0000000000018235         db  0x15 ; '.'
0000000000018236         db  0xff ; '.'
0000000000018237         db  0xff ; '.'
0000000000018238         db  0x6c ; 'l'
0000000000018239         db  0x19 ; '.'
000000000001823a         db  0x00 ; '.'
000000000001823b         db  0x00 ; '.'
000000000001823c         db  0x60 ; '`'
000000000001823d         db  0x15 ; '.'
000000000001823e         db  0xff ; '.'
000000000001823f         db  0xff ; '.'
0000000000018240         db  0x8c ; '.'
0000000000018241         db  0x19 ; '.'
0000000000018242         db  0x00 ; '.'
0000000000018243         db  0x00 ; '.'
0000000000018244         db  0xc0 ; '.'
0000000000018245         db  0x16 ; '.'
0000000000018246         db  0xff ; '.'
0000000000018247         db  0xff ; '.'
0000000000018248         db  0xc8 ; '.'
0000000000018249         db  0x19 ; '.'
000000000001824a         db  0x00 ; '.'
000000000001824b         db  0x00 ; '.'
000000000001824c         db  0x80 ; '.'
000000000001824d         db  0x17 ; '.'
000000000001824e         db  0xff ; '.'
000000000001824f         db  0xff ; '.'
0000000000018250         db  0x04 ; '.'
0000000000018251         db  0x1a ; '.'
0000000000018252         db  0x00 ; '.'
0000000000018253         db  0x00 ; '.'
0000000000018254         db  0xd0 ; '.'
0000000000018255         db  0x17 ; '.'
0000000000018256         db  0xff ; '.'
0000000000018257         db  0xff ; '.'
0000000000018258         db  0x18 ; '.'
0000000000018259         db  0x1a ; '.'
000000000001825a         db  0x00 ; '.'
000000000001825b         db  0x00 ; '.'
000000000001825c         db  0x30 ; '0'
000000000001825d         db  0x18 ; '.'
000000000001825e         db  0xff ; '.'
000000000001825f         db  0xff ; '.'
0000000000018260         db  0x2c ; ','
0000000000018261         db  0x1a ; '.'
0000000000018262         db  0x00 ; '.'
0000000000018263         db  0x00 ; '.'
0000000000018264         db  0xb0 ; '.'
0000000000018265         db  0x18 ; '.'
0000000000018266         db  0xff ; '.'
0000000000018267         db  0xff ; '.'
0000000000018268         db  0x40 ; '@'
0000000000018269         db  0x1a ; '.'
000000000001826a         db  0x00 ; '.'
000000000001826b         db  0x00 ; '.'
000000000001826c         db  0xb0 ; '.'
000000000001826d         db  0x19 ; '.'
000000000001826e         db  0xff ; '.'
000000000001826f         db  0xff ; '.'
0000000000018270         db  0xa4 ; '.'
0000000000018271         db  0x1a ; '.'
0000000000018272         db  0x00 ; '.'
0000000000018273         db  0x00 ; '.'
0000000000018274         db  0xf0 ; '.'
0000000000018275         db  0x19 ; '.'
0000000000018276         db  0xff ; '.'
0000000000018277         db  0xff ; '.'
0000000000018278         db  0xb8 ; '.'
0000000000018279         db  0x1a ; '.'
000000000001827a         db  0x00 ; '.'
000000000001827b         db  0x00 ; '.'
000000000001827c         db  0x80 ; '.'
000000000001827d         db  0x1a ; '.'
000000000001827e         db  0xff ; '.'
000000000001827f         db  0xff ; '.'
0000000000018280         db  0xcc ; '.'
0000000000018281         db  0x1a ; '.'
0000000000018282         db  0x00 ; '.'
0000000000018283         db  0x00 ; '.'
0000000000018284         db  0xe0 ; '.'
0000000000018285         db  0x1a ; '.'
0000000000018286         db  0xff ; '.'
0000000000018287         db  0xff ; '.'
0000000000018288         db  0xe0 ; '.'
0000000000018289         db  0x1a ; '.'
000000000001828a         db  0x00 ; '.'
000000000001828b         db  0x00 ; '.'
000000000001828c         db  0x50 ; 'P'
000000000001828d         db  0x1d ; '.'
000000000001828e         db  0xff ; '.'
000000000001828f         db  0xff ; '.'
0000000000018290         db  0x30 ; '0'
0000000000018291         db  0x1b ; '.'
0000000000018292         db  0x00 ; '.'
0000000000018293         db  0x00 ; '.'
0000000000018294         db  0x30 ; '0'
0000000000018295         db  0x1f ; '.'
0000000000018296         db  0xff ; '.'
0000000000018297         db  0xff ; '.'
0000000000018298         db  0x68 ; 'h'
0000000000018299         db  0x1b ; '.'
000000000001829a         db  0x00 ; '.'
000000000001829b         db  0x00 ; '.'
000000000001829c         db  0xe0 ; '.'
000000000001829d         db  0x21 ; '!'
000000000001829e         db  0xff ; '.'
000000000001829f         db  0xff ; '.'
00000000000182a0         db  0xb8 ; '.'
00000000000182a1         db  0x1b ; '.'
00000000000182a2         db  0x00 ; '.'
00000000000182a3         db  0x00 ; '.'
00000000000182a4         db  0x40 ; '@'
00000000000182a5         db  0x23 ; '#'
00000000000182a6         db  0xff ; '.'
00000000000182a7         db  0xff ; '.'
00000000000182a8         db  0x04 ; '.'
00000000000182a9         db  0x1c ; '.'
00000000000182aa         db  0x00 ; '.'
00000000000182ab         db  0x00 ; '.'
00000000000182ac         db  0xf0 ; '.'
00000000000182ad         db  0x24 ; '$'
00000000000182ae         db  0xff ; '.'
00000000000182af         db  0xff ; '.'
00000000000182b0         db  0x54 ; 'T'
00000000000182b1         db  0x1c ; '.'
00000000000182b2         db  0x00 ; '.'
00000000000182b3         db  0x00 ; '.'
00000000000182b4         db  0xd0 ; '.'
00000000000182b5         db  0x25 ; '%'
00000000000182b6         db  0xff ; '.'
00000000000182b7         db  0xff ; '.'
00000000000182b8         db  0x78 ; 'x'
00000000000182b9         db  0x1c ; '.'
00000000000182ba         db  0x00 ; '.'
00000000000182bb         db  0x00 ; '.'
00000000000182bc         db  0xb0 ; '.'
00000000000182bd         db  0x26 ; '&'
00000000000182be         db  0xff ; '.'
00000000000182bf         db  0xff ; '.'
00000000000182c0         db  0xbc ; '.'
00000000000182c1         db  0x1c ; '.'
00000000000182c2         db  0x00 ; '.'
00000000000182c3         db  0x00 ; '.'
00000000000182c4         db  0xf0 ; '.'
00000000000182c5         db  0x28 ; '('
00000000000182c6         db  0xff ; '.'
00000000000182c7         db  0xff ; '.'
00000000000182c8         db  0x0c ; '.'
00000000000182c9         db  0x1d ; '.'
00000000000182ca         db  0x00 ; '.'
00000000000182cb         db  0x00 ; '.'
00000000000182cc         db  0x90 ; '.'
00000000000182cd         db  0x29 ; ')'
00000000000182ce         db  0xff ; '.'
00000000000182cf         db  0xff ; '.'
00000000000182d0         db  0x38 ; '8'
00000000000182d1         db  0x1d ; '.'
00000000000182d2         db  0x00 ; '.'
00000000000182d3         db  0x00 ; '.'
00000000000182d4         db  0x20 ; ' '
00000000000182d5         db  0x2a ; '*'
00000000000182d6         db  0xff ; '.'
00000000000182d7         db  0xff ; '.'
00000000000182d8         db  0x74 ; 't'
00000000000182d9         db  0x1d ; '.'
00000000000182da         db  0x00 ; '.'
00000000000182db         db  0x00 ; '.'
00000000000182dc         db  0x80 ; '.'
00000000000182dd         db  0x2b ; '+'
00000000000182de         db  0xff ; '.'
00000000000182df         db  0xff ; '.'
00000000000182e0         db  0xd8 ; '.'
00000000000182e1         db  0x1d ; '.'
00000000000182e2         db  0x00 ; '.'
00000000000182e3         db  0x00 ; '.'
00000000000182e4         db  0x40 ; '@'
00000000000182e5         db  0x2e ; '.'
00000000000182e6         db  0xff ; '.'
00000000000182e7         db  0xff ; '.'
00000000000182e8         db  0x24 ; '$'
00000000000182e9         db  0x1e ; '.'
00000000000182ea         db  0x00 ; '.'
00000000000182eb         db  0x00 ; '.'
00000000000182ec         db  0x40 ; '@'
00000000000182ed         db  0x30 ; '0'
00000000000182ee         db  0xff ; '.'
00000000000182ef         db  0xff ; '.'
00000000000182f0         db  0x70 ; 'p'
00000000000182f1         db  0x1e ; '.'
00000000000182f2         db  0x00 ; '.'
00000000000182f3         db  0x00 ; '.'
00000000000182f4         db  0x20 ; ' '
00000000000182f5         db  0x31 ; '1'
00000000000182f6         db  0xff ; '.'
00000000000182f7         db  0xff ; '.'
00000000000182f8         db  0xbc ; '.'
00000000000182f9         db  0x1e ; '.'
00000000000182fa         db  0x00 ; '.'
00000000000182fb         db  0x00 ; '.'
00000000000182fc         db  0xc0 ; '.'
00000000000182fd         db  0x34 ; '4'
00000000000182fe         db  0xff ; '.'
00000000000182ff         db  0xff ; '.'
0000000000018300         db  0x08 ; '.'
0000000000018301         db  0x1f ; '.'
0000000000018302         db  0x00 ; '.'
0000000000018303         db  0x00 ; '.'
0000000000018304         db  0x10 ; '.'
0000000000018305         db  0x36 ; '6'
0000000000018306         db  0xff ; '.'
0000000000018307         db  0xff ; '.'
0000000000018308         db  0x54 ; 'T'
0000000000018309         db  0x1f ; '.'
000000000001830a         db  0x00 ; '.'
000000000001830b         db  0x00 ; '.'
000000000001830c         db  0x00 ; '.'
000000000001830d         db  0x37 ; '7'
000000000001830e         db  0xff ; '.'
000000000001830f         db  0xff ; '.'
0000000000018310         db  0x98 ; '.'
0000000000018311         db  0x1f ; '.'
0000000000018312         db  0x00 ; '.'
0000000000018313         db  0x00 ; '.'
0000000000018314         db  0x10 ; '.'
0000000000018315         db  0x38 ; '8'
0000000000018316         db  0xff ; '.'
0000000000018317         db  0xff ; '.'
0000000000018318         db  0xc0 ; '.'
0000000000018319         db  0x1f ; '.'
000000000001831a         db  0x00 ; '.'
000000000001831b         db  0x00 ; '.'
000000000001831c         db  0xe0 ; '.'
000000000001831d         db  0x38 ; '8'
000000000001831e         db  0xff ; '.'
000000000001831f         db  0xff ; '.'
0000000000018320         db  0xf8 ; '.'
0000000000018321         db  0x1f ; '.'
0000000000018322         db  0x00 ; '.'
0000000000018323         db  0x00 ; '.'
0000000000018324         db  0x80 ; '.'
0000000000018325         db  0x40 ; '@'
0000000000018326         db  0xff ; '.'
0000000000018327         db  0xff ; '.'
0000000000018328         db  0x48 ; 'H'
0000000000018329         db  0x20 ; ' '
000000000001832a         db  0x00 ; '.'
000000000001832b         db  0x00 ; '.'
000000000001832c         db  0xc0 ; '.'
000000000001832d         db  0x42 ; 'B'
000000000001832e         db  0xff ; '.'
000000000001832f         db  0xff ; '.'
0000000000018330         db  0x98 ; '.'
0000000000018331         db  0x20 ; ' '
0000000000018332         db  0x00 ; '.'
0000000000018333         db  0x00 ; '.'
0000000000018334         db  0x60 ; '`'
0000000000018335         db  0x4e ; 'N'
0000000000018336         db  0xff ; '.'
0000000000018337         db  0xff ; '.'
0000000000018338         db  0xe8 ; '.'
0000000000018339         db  0x20 ; ' '
000000000001833a         db  0x00 ; '.'
000000000001833b         db  0x00 ; '.'
000000000001833c         db  0xf0 ; '.'
000000000001833d         db  0x4e ; 'N'
000000000001833e         db  0xff ; '.'
000000000001833f         db  0xff ; '.'
0000000000018340         db  0x1c ; '.'
0000000000018341         db  0x21 ; '!'
0000000000018342         db  0x00 ; '.'
0000000000018343         db  0x00 ; '.'
0000000000018344         db  0x40 ; '@'
0000000000018345         db  0x4f ; 'O'
0000000000018346         db  0xff ; '.'
0000000000018347         db  0xff ; '.'
0000000000018348         db  0x48 ; 'H'
0000000000018349         db  0x21 ; '!'
000000000001834a         db  0x00 ; '.'
000000000001834b         db  0x00 ; '.'
000000000001834c         db  0xe0 ; '.'
000000000001834d         db  0x4f ; 'O'
000000000001834e         db  0xff ; '.'
000000000001834f         db  0xff ; '.'
0000000000018350         db  0x78 ; 'x'
0000000000018351         db  0x21 ; '!'
0000000000018352         db  0x00 ; '.'
0000000000018353         db  0x00 ; '.'
0000000000018354         db  0x30 ; '0'
0000000000018355         db  0x50 ; 'P'
0000000000018356         db  0xff ; '.'
0000000000018357         db  0xff ; '.'
0000000000018358         db  0xac ; '.'
0000000000018359         db  0x21 ; '!'
000000000001835a         db  0x00 ; '.'
000000000001835b         db  0x00 ; '.'
000000000001835c         db  0x40 ; '@'
000000000001835d         db  0x58 ; 'X'
000000000001835e         db  0xff ; '.'
000000000001835f         db  0xff ; '.'
0000000000018360         db  0xf0 ; '.'
0000000000018361         db  0x21 ; '!'
0000000000018362         db  0x00 ; '.'
0000000000018363         db  0x00 ; '.'
0000000000018364         db  0xb0 ; '.'
0000000000018365         db  0x5a ; 'Z'
0000000000018366         db  0xff ; '.'
0000000000018367         db  0xff ; '.'
0000000000018368         db  0x50 ; 'P'
0000000000018369         db  0x22 ; '"'
000000000001836a         db  0x00 ; '.'
000000000001836b         db  0x00 ; '.'
000000000001836c         db  0xe0 ; '.'
000000000001836d         db  0x5f ; '_'
000000000001836e         db  0xff ; '.'
000000000001836f         db  0xff ; '.'
0000000000018370         db  0xa0 ; '.'
0000000000018371         db  0x22 ; '"'
0000000000018372         db  0x00 ; '.'
0000000000018373         db  0x00 ; '.'
0000000000018374         db  0x40 ; '@'
0000000000018375         db  0x62 ; 'b'
0000000000018376         db  0xff ; '.'
0000000000018377         db  0xff ; '.'
0000000000018378         db  0xdc ; '.'
0000000000018379         db  0x22 ; '"'
000000000001837a         db  0x00 ; '.'
000000000001837b         db  0x00 ; '.'
000000000001837c         db  0xa0 ; '.'
000000000001837d         db  0x69 ; 'i'
000000000001837e         db  0xff ; '.'
000000000001837f         db  0xff ; '.'
0000000000018380         db  0x2c ; ','
0000000000018381         db  0x23 ; '#'
0000000000018382         db  0x00 ; '.'
0000000000018383         db  0x00 ; '.'
0000000000018384         db  0x90 ; '.'
0000000000018385         db  0x72 ; 'r'
0000000000018386         db  0xff ; '.'
0000000000018387         db  0xff ; '.'
0000000000018388         db  0x5c ; '\'
0000000000018389         db  0x23 ; '#'
000000000001838a         db  0x00 ; '.'
000000000001838b         db  0x00 ; '.'
000000000001838c         db  0x30 ; '0'
000000000001838d         db  0x74 ; 't'
000000000001838e         db  0xff ; '.'
000000000001838f         db  0xff ; '.'
0000000000018390         db  0xc8 ; '.'
0000000000018391         db  0x23 ; '#'
0000000000018392         db  0x00 ; '.'
0000000000018393         db  0x00 ; '.'
0000000000018394         db  0x20 ; ' '
0000000000018395         db  0x7d ; '}'
0000000000018396         db  0xff ; '.'
0000000000018397         db  0xff ; '.'
0000000000018398         db  0x28 ; '('
0000000000018399         db  0x24 ; '$'
000000000001839a         db  0x00 ; '.'
000000000001839b         db  0x00 ; '.'
000000000001839c         db  0x10 ; '.'
000000000001839d         db  0x7f ; '.'
000000000001839e         db  0xff ; '.'
000000000001839f         db  0xff ; '.'
00000000000183a0         db  0x74 ; 't'
00000000000183a1         db  0x24 ; '$'
00000000000183a2         db  0x00 ; '.'
00000000000183a3         db  0x00 ; '.'
00000000000183a4         db  0x50 ; 'P'
00000000000183a5         db  0x82 ; '.'
00000000000183a6         db  0xff ; '.'
00000000000183a7         db  0xff ; '.'
00000000000183a8         db  0xd4 ; '.'
00000000000183a9         db  0x24 ; '$'
00000000000183aa         db  0x00 ; '.'
00000000000183ab         db  0x00 ; '.'
00000000000183ac         db  0x80 ; '.'
00000000000183ad         db  0x99 ; '.'
00000000000183ae         db  0xff ; '.'
00000000000183af         db  0xff ; '.'
00000000000183b0         db  0x24 ; '$'
00000000000183b1         db  0x25 ; '%'
00000000000183b2         db  0x00 ; '.'
00000000000183b3         db  0x00 ; '.'
00000000000183b4         db  0xd0 ; '.'
00000000000183b5         db  0xa1 ; '.'
00000000000183b6         db  0xff ; '.'
00000000000183b7         db  0xff ; '.'
00000000000183b8         db  0x84 ; '.'
00000000000183b9         db  0x25 ; '%'
00000000000183ba         db  0x00 ; '.'
00000000000183bb         db  0x00 ; '.'
00000000000183bc         db  0x30 ; '0'
00000000000183bd         db  0xa4 ; '.'
00000000000183be         db  0xff ; '.'
00000000000183bf         db  0xff ; '.'
00000000000183c0         db  0xc8 ; '.'
00000000000183c1         db  0x25 ; '%'
00000000000183c2         db  0x00 ; '.'
00000000000183c3         db  0x00 ; '.'
00000000000183c4         db  0x30 ; '0'
00000000000183c5         db  0xab ; '.'
00000000000183c6         db  0xff ; '.'
00000000000183c7         db  0xff ; '.'
00000000000183c8         db  0x14 ; '.'
00000000000183c9         db  0x26 ; '&'
00000000000183ca         db  0x00 ; '.'
00000000000183cb         db  0x00 ; '.'
00000000000183cc         db  0xf0 ; '.'
00000000000183cd         db  0xab ; '.'
00000000000183ce         db  0xff ; '.'
00000000000183cf         db  0xff ; '.'
00000000000183d0         db  0x54 ; 'T'
00000000000183d1         db  0x26 ; '&'
00000000000183d2         db  0x00 ; '.'
00000000000183d3         db  0x00 ; '.'
00000000000183d4         db  0xd0 ; '.'
00000000000183d5         db  0xc0 ; '.'
00000000000183d6         db  0xff ; '.'
00000000000183d7         db  0xff ; '.'
00000000000183d8         db  0xb4 ; '.'
00000000000183d9         db  0x26 ; '&'
00000000000183da         db  0x00 ; '.'
00000000000183db         db  0x00 ; '.'
00000000000183dc         db  0x60 ; '`'
00000000000183dd         db  0xc2 ; '.'
00000000000183de         db  0xff ; '.'
00000000000183df         db  0xff ; '.'
00000000000183e0         db  0x00 ; '.'
00000000000183e1         db  0x27 ; '''
00000000000183e2         db  0x00 ; '.'
00000000000183e3         db  0x00 ; '.'
00000000000183e4         db  0xe0 ; '.'
00000000000183e5         db  0xc3 ; '.'
00000000000183e6         db  0xff ; '.'
00000000000183e7         db  0xff ; '.'
00000000000183e8         db  0x50 ; 'P'
00000000000183e9         db  0x27 ; '''
00000000000183ea         db  0x00 ; '.'
00000000000183eb         db  0x00 ; '.'
00000000000183ec         db  0xe0 ; '.'
00000000000183ed         db  0xd4 ; '.'
00000000000183ee         db  0xff ; '.'
00000000000183ef         db  0xff ; '.'
00000000000183f0         db  0xa0 ; '.'
00000000000183f1         db  0x27 ; '''
00000000000183f2         db  0x00 ; '.'
00000000000183f3         db  0x00 ; '.'
00000000000183f4         db  0x50 ; 'P'
00000000000183f5         db  0xd5 ; '.'
00000000000183f6         db  0xff ; '.'
00000000000183f7         db  0xff ; '.'
00000000000183f8         db  0xc0 ; '.'
00000000000183f9         db  0x27 ; '''
00000000000183fa         db  0x00 ; '.'
00000000000183fb         db  0x00 ; '.'
00000000000183fc         db  0x60 ; '`'
00000000000183fd         db  0xd5 ; '.'
00000000000183fe         db  0xff ; '.'
00000000000183ff         db  0xff ; '.'
0000000000018400         db  0xd4 ; '.'
0000000000018401         db  0x27 ; '''
0000000000018402         db  0x00 ; '.'
0000000000018403         db  0x00 ; '.'
0000000000018404         db  0x30 ; '0'
0000000000018405         db  0xd6 ; '.'
0000000000018406         db  0xff ; '.'
0000000000018407         db  0xff ; '.'
0000000000018408         db  0x00 ; '.'
0000000000018409         db  0x28 ; '('
000000000001840a         db  0x00 ; '.'
000000000001840b         db  0x00 ; '.'
000000000001840c         db  0xb0 ; '.'
000000000001840d         db  0xda ; '.'
000000000001840e         db  0xff ; '.'
000000000001840f         db  0xff ; '.'
0000000000018410         db  0x60 ; '`'
0000000000018411         db  0x28 ; '('
0000000000018412         db  0x00 ; '.'
0000000000018413         db  0x00 ; '.'
0000000000018414         db  0xd0 ; '.'
0000000000018415         db  0xdb ; '.'
0000000000018416         db  0xff ; '.'
0000000000018417         db  0xff ; '.'
0000000000018418         db  0xb8 ; '.'
0000000000018419         db  0x28 ; '('
000000000001841a         db  0x00 ; '.'
000000000001841b         db  0x00 ; '.'
000000000001841c         db  0xe0 ; '.'
000000000001841d         db  0xdc ; '.'
000000000001841e         db  0xff ; '.'
000000000001841f         db  0xff ; '.'
0000000000018420         db  0x04 ; '.'
0000000000018421         db  0x29 ; ')'
0000000000018422         db  0x00 ; '.'
0000000000018423         db  0x00 ; '.'
0000000000018424         db  0x70 ; 'p'
0000000000018425         db  0xdd ; '.'
0000000000018426         db  0xff ; '.'
0000000000018427         db  0xff ; '.'
0000000000018428         db  0x40 ; '@'
0000000000018429         db  0x29 ; ')'
000000000001842a         db  0x00 ; '.'
000000000001842b         db  0x00 ; '.'
000000000001842c         db  0xc0 ; '.'
000000000001842d         db  0xdd ; '.'
000000000001842e         db  0xff ; '.'
000000000001842f         db  0xff ; '.'
0000000000018430         db  0x5c ; '\'
0000000000018431         db  0x29 ; ')'
0000000000018432         db  0x00 ; '.'
0000000000018433         db  0x00 ; '.'
0000000000018434         db  0x60 ; '`'
0000000000018435         db  0xde ; '.'
0000000000018436         db  0xff ; '.'
0000000000018437         db  0xff ; '.'
0000000000018438         db  0xb8 ; '.'
0000000000018439         db  0x29 ; ')'
000000000001843a         db  0x00 ; '.'
000000000001843b         db  0x00 ; '.'
000000000001843c         db  0x80 ; '.'
000000000001843d         db  0xde ; '.'
000000000001843e         db  0xff ; '.'
000000000001843f         db  0xff ; '.'
0000000000018440         db  0xd8 ; '.'
0000000000018441         db  0x29 ; ')'
0000000000018442         db  0x00 ; '.'
0000000000018443         db  0x00 ; '.'
0000000000018444         db  0xa0 ; '.'
0000000000018445         db  0xde ; '.'
0000000000018446         db  0xff ; '.'
0000000000018447         db  0xff ; '.'
0000000000018448         db  0xf8 ; '.'
0000000000018449         db  0x29 ; ')'
000000000001844a         db  0x00 ; '.'
000000000001844b         db  0x00 ; '.'
000000000001844c         db  0xc0 ; '.'
000000000001844d         db  0xde ; '.'
000000000001844e         db  0xff ; '.'
000000000001844f         db  0xff ; '.'
0000000000018450         db  0x1c ; '.'
0000000000018451         db  0x2a ; '*'
0000000000018452         db  0x00 ; '.'
0000000000018453         db  0x00 ; '.'
0000000000018454         db  0xe0 ; '.'
0000000000018455         db  0xde ; '.'
0000000000018456         db  0xff ; '.'
0000000000018457         db  0xff ; '.'
0000000000018458         db  0x40 ; '@'
0000000000018459         db  0x2a ; '*'
000000000001845a         db  0x00 ; '.'
000000000001845b         db  0x00 ; '.'
000000000001845c         db  0x30 ; '0'
000000000001845d         db  0xdf ; '.'
000000000001845e         db  0xff ; '.'
000000000001845f         db  0xff ; '.'
0000000000018460         db  0x58 ; 'X'
0000000000018461         db  0x2a ; '*'
0000000000018462         db  0x00 ; '.'
0000000000018463         db  0x00 ; '.'
0000000000018464         db  0xb0 ; '.'
0000000000018465         db  0xdf ; '.'
0000000000018466         db  0xff ; '.'
0000000000018467         db  0xff ; '.'
0000000000018468         db  0xa8 ; '.'
0000000000018469         db  0x2a ; '*'
000000000001846a         db  0x00 ; '.'
000000000001846b         db  0x00 ; '.'
000000000001846c         db  0x10 ; '.'
000000000001846d         db  0xe0 ; '.'
000000000001846e         db  0xff ; '.'
000000000001846f         db  0xff ; '.'
0000000000018470         db  0xc8 ; '.'
0000000000018471         db  0x2a ; '*'
0000000000018472         db  0x00 ; '.'
0000000000018473         db  0x00 ; '.'
0000000000018474         db  0x50 ; 'P'
0000000000018475         db  0xe0 ; '.'
0000000000018476         db  0xff ; '.'
0000000000018477         db  0xff ; '.'
0000000000018478         db  0xe8 ; '.'
0000000000018479         db  0x2a ; '*'
000000000001847a         db  0x00 ; '.'
000000000001847b         db  0x00 ; '.'
000000000001847c         db  0xc0 ; '.'
000000000001847d         db  0xe0 ; '.'
000000000001847e         db  0xff ; '.'
000000000001847f         db  0xff ; '.'
0000000000018480         db  0x30 ; '0'
0000000000018481         db  0x2b ; '+'
0000000000018482         db  0x00 ; '.'
0000000000018483         db  0x00 ; '.'
0000000000018484         db  0xd0 ; '.'
0000000000018485         db  0xe0 ; '.'
0000000000018486         db  0xff ; '.'
0000000000018487         db  0xff ; '.'
0000000000018488         db  0x48 ; 'H'
0000000000018489         db  0x2b ; '+'
000000000001848a         db  0x00 ; '.'
000000000001848b         db  0x00 ; '.'
000000000001848c         db  0x00 ; '.'
000000000001848d         db  0x00 ; '.'
000000000001848e         db  0x00 ; '.'
000000000001848f         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0x18490; 0x1aa00[ (9584 bytes)
        ; File offset : [99472; 109056[ (9584 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000018490         dd         0x00000014                                  ; Length of the record
0000000000018494         dd         0x00000000                                  ; CIE ID
0000000000018498         db         0x01                                        ; Version
0000000000018499         db         "zR", 0                                     ; Augmentation String
000000000001849c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000001849d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000001849e         db         0x10                                        ; Return address register
000000000001849f         db         0x01                                        ; Augmentation data length
00000000000184a0         db         0x1b                                        ; FDE encoding
00000000000184a1         db  0x0c ; '.'
00000000000184a2         db  0x07 ; '.'
00000000000184a3         db  0x08 ; '.'
00000000000184a4         db  0x90 ; '.'
00000000000184a5         db  0x01 ; '.'
00000000000184a6         db  0x07 ; '.'
00000000000184a7         db  0x10 ; '.'
00000000000184a8         dd         0x00000014                                  ; Length of the record
00000000000184ac         dd         0x0000001c                                  ; FDE: parent CIE at 0x18490 (FDE encoding = 0x1B)
00000000000184b0         db         0xe0, 0xaa, 0xfe, 0xff                      ; begin 0x2f90
00000000000184b4         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x2fbb)
00000000000184b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000184b9         align      64
00000000000184c0         dd         0x00000014                                  ; Length of the record
00000000000184c4         dd         0x00000000                                  ; CIE ID
00000000000184c8         db         0x01                                        ; Version
00000000000184c9         db         "zR", 0                                     ; Augmentation String
00000000000184cc         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
00000000000184cd         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
00000000000184ce         db         0x10                                        ; Return address register
00000000000184cf         db         0x01                                        ; Augmentation data length
00000000000184d0         db         0x1b                                        ; FDE encoding
00000000000184d1         db  0x0c ; '.'
00000000000184d2         db  0x07 ; '.'
00000000000184d3         db  0x08 ; '.'
00000000000184d4         db  0x90 ; '.'
00000000000184d5         db  0x01 ; '.'
00000000000184d6         db  0x00 ; '.'
00000000000184d7         db  0x00 ; '.'
00000000000184d8         dd         0x00000024                                  ; Length of the record
00000000000184dc         dd         0x0000001c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000184e0         db         0xd0, 0x95, 0xfe, 0xff                      ; begin 0x1ab0
00000000000184e4         db         0xc0, 0x04, 2 dup (0x00)                    ; length 0x4c0 (end at 0x1f70)
00000000000184e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000184e9         db  0x0e ; '.'
00000000000184ea         db  0x10 ; '.'
00000000000184eb         db  0x46 ; 'F'
00000000000184ec         db  0x0e ; '.'
00000000000184ed         db  0x18 ; '.'
00000000000184ee         db  0x4a ; 'J'
00000000000184ef         db  0x0f ; '.'
00000000000184f0         db  0x0b ; '.'
00000000000184f1         db  0x77 ; 'w'
00000000000184f2         db  0x08 ; '.'
00000000000184f3         db  0x80 ; '.'
00000000000184f4         db  0x00 ; '.'
00000000000184f5         db  0x3f ; '?'
00000000000184f6         db  0x1a ; '.'
00000000000184f7         db  0x3b ; ';'
00000000000184f8         db  0x2a ; '*'
00000000000184f9         db  0x33 ; '3'
00000000000184fa         db  0x24 ; '$'
00000000000184fb         db  0x22 ; '"'
00000000000184fc         db  0x00 ; '.'
00000000000184fd         db  0x00 ; '.'
00000000000184fe         db  0x00 ; '.'
00000000000184ff         db  0x00 ; '.'
0000000000018500         dd         0x00000014                                  ; Length of the record
0000000000018504         dd         0x00000044                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018508         db         0x68, 0x9a, 0xfe, 0xff                      ; begin 0x1f70
000000000001850c         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x1f78)
0000000000018510         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018511         align      8
0000000000018518         dd         0x00000034                                  ; Length of the record
000000000001851c         dd         0x0000005c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018520         db         0x80, 0xab, 0xfe, 0xff                      ; begin 0x30a0
0000000000018524         db         0xba, 3 dup (0x00)                          ; length 0xba (end at 0x315a)
0000000000018528         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018529         db  0x42 ; 'B'
000000000001852a         db  0x0e ; '.'
000000000001852b         db  0x10 ; '.'
000000000001852c         db  0x8c ; '.'
000000000001852d         db  0x02 ; '.'
000000000001852e         db  0x48 ; 'H'
000000000001852f         db  0x0e ; '.'
0000000000018530         db  0x18 ; '.'
0000000000018531         db  0x86 ; '.'
0000000000018532         db  0x03 ; '.'
0000000000018533         db  0x4a ; 'J'
0000000000018534         db  0x0e ; '.'
0000000000018535         db  0x20 ; ' '
0000000000018536         db  0x83 ; '.'
0000000000018537         db  0x04 ; '.'
0000000000018538         db  0x02 ; '.'
0000000000018539         db  0x49 ; 'I'
000000000001853a         db  0x0a ; '.'
000000000001853b         db  0x0e ; '.'
000000000001853c         db  0x18 ; '.'
000000000001853d         db  0x48 ; 'H'
000000000001853e         db  0x0e ; '.'
000000000001853f         db  0x10 ; '.'
0000000000018540         db  0x42 ; 'B'
0000000000018541         db  0x0e ; '.'
0000000000018542         db  0x08 ; '.'
0000000000018543         db  0x49 ; 'I'
0000000000018544         db  0x0b ; '.'
0000000000018545         db  0x7f ; '.'
0000000000018546         db  0x0e ; '.'
0000000000018547         db  0x18 ; '.'
0000000000018548         db  0x48 ; 'H'
0000000000018549         db  0x0e ; '.'
000000000001854a         db  0x10 ; '.'
000000000001854b         db  0x42 ; 'B'
000000000001854c         db  0x0e ; '.'
000000000001854d         db  0x08 ; '.'
000000000001854e         db  0x00 ; '.'
000000000001854f         db  0x00 ; '.'
0000000000018550         dd         0x0000003c                                  ; Length of the record
0000000000018554         dd         0x00000094                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018558         db         0x08, 0xac, 0xfe, 0xff                      ; begin 0x3160
000000000001855c         db         0xb3, 3 dup (0x00)                          ; length 0xb3 (end at 0x3213)
0000000000018560         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018561         db  0x50 ; 'P'
0000000000018562         db  0x0e ; '.'
0000000000018563         db  0x10 ; '.'
0000000000018564         db  0x8d ; '.'
0000000000018565         db  0x02 ; '.'
0000000000018566         db  0x42 ; 'B'
0000000000018567         db  0x0e ; '.'
0000000000018568         db  0x18 ; '.'
0000000000018569         db  0x8c ; '.'
000000000001856a         db  0x03 ; '.'
000000000001856b         db  0x48 ; 'H'
000000000001856c         db  0x0e ; '.'
000000000001856d         db  0x20 ; ' '
000000000001856e         db  0x86 ; '.'
000000000001856f         db  0x04 ; '.'
0000000000018570         db  0x41 ; 'A'
0000000000018571         db  0x0e ; '.'
0000000000018572         db  0x28 ; '('
0000000000018573         db  0x83 ; '.'
0000000000018574         db  0x05 ; '.'
0000000000018575         db  0x49 ; 'I'
0000000000018576         db  0x0e ; '.'
0000000000018577         db  0x30 ; '0'
0000000000018578         db  0x02 ; '.'
0000000000018579         db  0x77 ; 'w'
000000000001857a         db  0x0e ; '.'
000000000001857b         db  0x28 ; '('
000000000001857c         db  0x41 ; 'A'
000000000001857d         db  0x0e ; '.'
000000000001857e         db  0x20 ; ' '
000000000001857f         db  0x41 ; 'A'
0000000000018580         db  0x0e ; '.'
0000000000018581         db  0x18 ; '.'
0000000000018582         db  0x42 ; 'B'
0000000000018583         db  0x0e ; '.'
0000000000018584         db  0x10 ; '.'
0000000000018585         db  0x42 ; 'B'
0000000000018586         db  0x0e ; '.'
0000000000018587         db  0x08 ; '.'
0000000000018588         db  0x47 ; 'G'
0000000000018589         db  0xc3 ; '.'
000000000001858a         db  0xc6 ; '.'
000000000001858b         db  0xcc ; '.'
000000000001858c         db  0xcd ; '.'
000000000001858d         db  0x00 ; '.'
000000000001858e         db  0x00 ; '.'
000000000001858f         db  0x00 ; '.'
0000000000018590         dd         0x00000018                                  ; Length of the record
0000000000018594         dd         0x000000d4                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018598         db         0x88, 0xac, 0xfe, 0xff                      ; begin 0x3220
000000000001859c         db         0x5f, 3 dup (0x00)                          ; length 0x5f (end at 0x327f)
00000000000185a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000185a1         db  0x41 ; 'A'
00000000000185a2         db  0x0e ; '.'
00000000000185a3         db  0x10 ; '.'
00000000000185a4         db  0x83 ; '.'
00000000000185a5         db  0x02 ; '.'
00000000000185a6         db  0x47 ; 'G'
00000000000185a7         db  0x0e ; '.'
00000000000185a8         db  0xa0 ; '.'
00000000000185a9         db  0x01 ; '.'
00000000000185aa         db  0x00 ; '.'
00000000000185ab         db  0x00 ; '.'
00000000000185ac         dd         0x00000038                                  ; Length of the record
00000000000185b0         dd         0x000000f0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000185b4         db         0xcc, 0xac, 0xfe, 0xff                      ; begin 0x3280
00000000000185b8         db         0xb7, 0x01, 2 dup (0x00)                    ; length 0x1b7 (end at 0x3437)
00000000000185bc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000185bd         db  0x42 ; 'B'
00000000000185be         db  0x0e ; '.'
00000000000185bf         db  0x10 ; '.'
00000000000185c0         db  0x8d ; '.'
00000000000185c1         db  0x02 ; '.'
00000000000185c2         db  0x42 ; 'B'
00000000000185c3         db  0x0e ; '.'
00000000000185c4         db  0x18 ; '.'
00000000000185c5         db  0x8c ; '.'
00000000000185c6         db  0x03 ; '.'
00000000000185c7         db  0x41 ; 'A'
00000000000185c8         db  0x0e ; '.'
00000000000185c9         db  0x20 ; ' '
00000000000185ca         db  0x86 ; '.'
00000000000185cb         db  0x04 ; '.'
00000000000185cc         db  0x41 ; 'A'
00000000000185cd         db  0x0e ; '.'
00000000000185ce         db  0x28 ; '('
00000000000185cf         db  0x83 ; '.'
00000000000185d0         db  0x05 ; '.'
00000000000185d1         db  0x47 ; 'G'
00000000000185d2         db  0x0e ; '.'
00000000000185d3         db  0xd0 ; '.'
00000000000185d4         db  0x01 ; '.'
00000000000185d5         db  0x02 ; '.'
00000000000185d6         db  0x7c ; '|'
00000000000185d7         db  0x0a ; '.'
00000000000185d8         db  0x0e ; '.'
00000000000185d9         db  0x28 ; '('
00000000000185da         db  0x41 ; 'A'
00000000000185db         db  0x0e ; '.'
00000000000185dc         db  0x20 ; ' '
00000000000185dd         db  0x41 ; 'A'
00000000000185de         db  0x0e ; '.'
00000000000185df         db  0x18 ; '.'
00000000000185e0         db  0x42 ; 'B'
00000000000185e1         db  0x0e ; '.'
00000000000185e2         db  0x10 ; '.'
00000000000185e3         db  0x42 ; 'B'
00000000000185e4         db  0x0e ; '.'
00000000000185e5         db  0x08 ; '.'
00000000000185e6         db  0x41 ; 'A'
00000000000185e7         db  0x0b ; '.'
00000000000185e8         dd         0x00000028                                  ; Length of the record
00000000000185ec         dd         0x0000012c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000185f0         db         0x50, 0xae, 0xfe, 0xff                      ; begin 0x3440
00000000000185f4         db         0x87, 3 dup (0x00)                          ; length 0x87 (end at 0x34c7)
00000000000185f8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000185f9         db  0x41 ; 'A'
00000000000185fa         db  0x0e ; '.'
00000000000185fb         db  0x10 ; '.'
00000000000185fc         db  0x86 ; '.'
00000000000185fd         db  0x02 ; '.'
00000000000185fe         db  0x41 ; 'A'
00000000000185ff         db  0x0e ; '.'
0000000000018600         db  0x18 ; '.'
0000000000018601         db  0x83 ; '.'
0000000000018602         db  0x03 ; '.'
0000000000018603         db  0x4c ; 'L'
0000000000018604         db  0x0e ; '.'
0000000000018605         db  0x20 ; ' '
0000000000018606         db  0x66 ; 'f'
0000000000018607         db  0x0a ; '.'
0000000000018608         db  0x0e ; '.'
0000000000018609         db  0x18 ; '.'
000000000001860a         db  0x41 ; 'A'
000000000001860b         db  0x0e ; '.'
000000000001860c         db  0x10 ; '.'
000000000001860d         db  0x41 ; 'A'
000000000001860e         db  0x0e ; '.'
000000000001860f         db  0x08 ; '.'
0000000000018610         db  0x41 ; 'A'
0000000000018611         db  0x0b ; '.'
0000000000018612         db  0x00 ; '.'
0000000000018613         db  0x00 ; '.'
0000000000018614         dd         0x00000030                                  ; Length of the record
0000000000018618         dd         0x00000158                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001861c         db         0xb4, 0xae, 0xfe, 0xff                      ; begin 0x34d0
0000000000018620         db         0x09, 0x01, 2 dup (0x00)                    ; length 0x109 (end at 0x35d9)
0000000000018624         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018625         db  0x42 ; 'B'
0000000000018626         db  0x0e ; '.'
0000000000018627         db  0x10 ; '.'
0000000000018628         db  0x8c ; '.'
0000000000018629         db  0x02 ; '.'
000000000001862a         db  0x41 ; 'A'
000000000001862b         db  0x0e ; '.'
000000000001862c         db  0x18 ; '.'
000000000001862d         db  0x86 ; '.'
000000000001862e         db  0x03 ; '.'
000000000001862f         db  0x46 ; 'F'
0000000000018630         db  0x0e ; '.'
0000000000018631         db  0x20 ; ' '
0000000000018632         db  0x83 ; '.'
0000000000018633         db  0x04 ; '.'
0000000000018634         db  0x47 ; 'G'
0000000000018635         db  0x0e ; '.'
0000000000018636         db  0xb0 ; '.'
0000000000018637         db  0x01 ; '.'
0000000000018638         db  0x02 ; '.'
0000000000018639         db  0xe3 ; '.'
000000000001863a         db  0x0a ; '.'
000000000001863b         db  0x0e ; '.'
000000000001863c         db  0x20 ; ' '
000000000001863d         db  0x41 ; 'A'
000000000001863e         db  0x0e ; '.'
000000000001863f         db  0x18 ; '.'
0000000000018640         db  0x41 ; 'A'
0000000000018641         db  0x0e ; '.'
0000000000018642         db  0x10 ; '.'
0000000000018643         db  0x42 ; 'B'
0000000000018644         db  0x0e ; '.'
0000000000018645         db  0x08 ; '.'
0000000000018646         db  0x41 ; 'A'
0000000000018647         db  0x0b ; '.'
0000000000018648         dd         0x00000018                                  ; Length of the record
000000000001864c         dd         0x0000018c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018650         db         0x90, 0xaf, 0xfe, 0xff                      ; begin 0x35e0
0000000000018654         db         0x29, 3 dup (0x00)                          ; length 0x29 (end at 0x3609)
0000000000018658         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018659         db  0x48 ; 'H'
000000000001865a         db  0x0e ; '.'
000000000001865b         db  0x10 ; '.'
000000000001865c         db  0x83 ; '.'
000000000001865d         db  0x02 ; '.'
000000000001865e         db  0x5c ; '\'
000000000001865f         db  0x0e ; '.'
0000000000018660         db  0x08 ; '.'
0000000000018661         db  0x00 ; '.'
0000000000018662         db  0x00 ; '.'
0000000000018663         db  0x00 ; '.'
0000000000018664         dd         0x00000024                                  ; Length of the record
0000000000018668         dd         0x000001a8                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001866c         db         0xa4, 0xaf, 0xfe, 0xff                      ; begin 0x3610
0000000000018670         db         0xc0, 3 dup (0x00)                          ; length 0xc0 (end at 0x36d0)
0000000000018674         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018675         db  0x42 ; 'B'
0000000000018676         db  0x0e ; '.'
0000000000018677         db  0x10 ; '.'
0000000000018678         db  0x8d ; '.'
0000000000018679         db  0x02 ; '.'
000000000001867a         db  0x42 ; 'B'
000000000001867b         db  0x0e ; '.'
000000000001867c         db  0x18 ; '.'
000000000001867d         db  0x8c ; '.'
000000000001867e         db  0x03 ; '.'
000000000001867f         db  0x41 ; 'A'
0000000000018680         db  0x0e ; '.'
0000000000018681         db  0x20 ; ' '
0000000000018682         db  0x86 ; '.'
0000000000018683         db  0x04 ; '.'
0000000000018684         db  0x41 ; 'A'
0000000000018685         db  0x0e ; '.'
0000000000018686         db  0x28 ; '('
0000000000018687         db  0x83 ; '.'
0000000000018688         db  0x05 ; '.'
0000000000018689         db  0x47 ; 'G'
000000000001868a         db  0x0e ; '.'
000000000001868b         db  0x50 ; 'P'
000000000001868c         dd         0x00000038                                  ; Length of the record
0000000000018690         dd         0x000001d0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018694         db         0x3c, 0xb0, 0xfe, 0xff                      ; begin 0x36d0
0000000000018698         db         0xeb, 3 dup (0x00)                          ; length 0xeb (end at 0x37bb)
000000000001869c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001869d         db  0x42 ; 'B'
000000000001869e         db  0x0e ; '.'
000000000001869f         db  0x10 ; '.'
00000000000186a0         db  0x8d ; '.'
00000000000186a1         db  0x02 ; '.'
00000000000186a2         db  0x42 ; 'B'
00000000000186a3         db  0x0e ; '.'
00000000000186a4         db  0x18 ; '.'
00000000000186a5         db  0x8c ; '.'
00000000000186a6         db  0x03 ; '.'
00000000000186a7         db  0x44 ; 'D'
00000000000186a8         db  0x0e ; '.'
00000000000186a9         db  0x20 ; ' '
00000000000186aa         db  0x86 ; '.'
00000000000186ab         db  0x04 ; '.'
00000000000186ac         db  0x41 ; 'A'
00000000000186ad         db  0x0e ; '.'
00000000000186ae         db  0x28 ; '('
00000000000186af         db  0x83 ; '.'
00000000000186b0         db  0x05 ; '.'
00000000000186b1         db  0x4a ; 'J'
00000000000186b2         db  0x0e ; '.'
00000000000186b3         db  0x30 ; '0'
00000000000186b4         db  0x02 ; '.'
00000000000186b5         db  0x40 ; '@'
00000000000186b6         db  0x0a ; '.'
00000000000186b7         db  0x0e ; '.'
00000000000186b8         db  0x28 ; '('
00000000000186b9         db  0x41 ; 'A'
00000000000186ba         db  0x0e ; '.'
00000000000186bb         db  0x20 ; ' '
00000000000186bc         db  0x41 ; 'A'
00000000000186bd         db  0x0e ; '.'
00000000000186be         db  0x18 ; '.'
00000000000186bf         db  0x42 ; 'B'
00000000000186c0         db  0x0e ; '.'
00000000000186c1         db  0x10 ; '.'
00000000000186c2         db  0x42 ; 'B'
00000000000186c3         db  0x0e ; '.'
00000000000186c4         db  0x08 ; '.'
00000000000186c5         db  0x47 ; 'G'
00000000000186c6         db  0x0b ; '.'
00000000000186c7         db  0x00 ; '.'
00000000000186c8         dd         0x00000028                                  ; Length of the record
00000000000186cc         dd         0x0000020c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000186d0         db         0xf0, 0xb0, 0xfe, 0xff                      ; begin 0x37c0
00000000000186d4         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x380a)
00000000000186d8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000186d9         db  0x42 ; 'B'
00000000000186da         db  0x0e ; '.'
00000000000186db         db  0x10 ; '.'
00000000000186dc         db  0x8c ; '.'
00000000000186dd         db  0x02 ; '.'
00000000000186de         db  0x41 ; 'A'
00000000000186df         db  0x0e ; '.'
00000000000186e0         db  0x18 ; '.'
00000000000186e1         db  0x86 ; '.'
00000000000186e2         db  0x03 ; '.'
00000000000186e3         db  0x47 ; 'G'
00000000000186e4         db  0x0e ; '.'
00000000000186e5         db  0x20 ; ' '
00000000000186e6         db  0x83 ; '.'
00000000000186e7         db  0x04 ; '.'
00000000000186e8         db  0x7c ; '|'
00000000000186e9         db  0x0e ; '.'
00000000000186ea         db  0x18 ; '.'
00000000000186eb         db  0x41 ; 'A'
00000000000186ec         db  0x0e ; '.'
00000000000186ed         db  0x10 ; '.'
00000000000186ee         db  0x42 ; 'B'
00000000000186ef         db  0x0e ; '.'
00000000000186f0         db  0x08 ; '.'
00000000000186f1         db  0x00 ; '.'
00000000000186f2         db  0x00 ; '.'
00000000000186f3         db  0x00 ; '.'
00000000000186f4         dd         0x00000010                                  ; Length of the record
00000000000186f8         dd         0x00000238                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000186fc         db         0x14, 0xb1, 0xfe, 0xff                      ; begin 0x3810
0000000000018700         db         0x31, 3 dup (0x00)                          ; length 0x31 (end at 0x3841)
0000000000018704         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018705         db  0x4b ; 'K'
0000000000018706         db  0x0e ; '.'
0000000000018707         db  0x10 ; '.'
0000000000018708         dd         0x00000018                                  ; Length of the record
000000000001870c         dd         0x0000024c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018710         db         0x40, 0xb1, 0xfe, 0xff                      ; begin 0x3850
0000000000018714         db         0xd9, 3 dup (0x00)                          ; length 0xd9 (end at 0x3929)
0000000000018718         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018719         db  0x44 ; 'D'
000000000001871a         db  0x0e ; '.'
000000000001871b         db  0x10 ; '.'
000000000001871c         db  0x02 ; '.'
000000000001871d         db  0x50 ; 'P'
000000000001871e         db  0x0a ; '.'
000000000001871f         db  0x0e ; '.'
0000000000018720         db  0x08 ; '.'
0000000000018721         db  0x44 ; 'D'
0000000000018722         db  0x0b ; '.'
0000000000018723         db  0x00 ; '.'
0000000000018724         dd         0x0000007c                                  ; Length of the record
0000000000018728         dd         0x00000268                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001872c         db         0x04, 0xb2, 0xfe, 0xff                      ; begin 0x3930
0000000000018730         db         0x5a, 0x03, 2 dup (0x00)                    ; length 0x35a (end at 0x3c8a)
0000000000018734         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018735         db  0x42 ; 'B'
0000000000018736         db  0x0e ; '.'
0000000000018737         db  0x10 ; '.'
0000000000018738         db  0x8f ; '.'
0000000000018739         db  0x02 ; '.'
000000000001873a         db  0x42 ; 'B'
000000000001873b         db  0x0e ; '.'
000000000001873c         db  0x18 ; '.'
000000000001873d         db  0x8e ; '.'
000000000001873e         db  0x03 ; '.'
000000000001873f         db  0x47 ; 'G'
0000000000018740         db  0x0e ; '.'
0000000000018741         db  0x20 ; ' '
0000000000018742         db  0x8d ; '.'
0000000000018743         db  0x04 ; '.'
0000000000018744         db  0x42 ; 'B'
0000000000018745         db  0x0e ; '.'
0000000000018746         db  0x28 ; '('
0000000000018747         db  0x8c ; '.'
0000000000018748         db  0x05 ; '.'
0000000000018749         db  0x41 ; 'A'
000000000001874a         db  0x0e ; '.'
000000000001874b         db  0x30 ; '0'
000000000001874c         db  0x86 ; '.'
000000000001874d         db  0x06 ; '.'
000000000001874e         db  0x41 ; 'A'
000000000001874f         db  0x0e ; '.'
0000000000018750         db  0x38 ; '8'
0000000000018751         db  0x83 ; '.'
0000000000018752         db  0x07 ; '.'
0000000000018753         db  0x44 ; 'D'
0000000000018754         db  0x0e ; '.'
0000000000018755         db  0x50 ; 'P'
0000000000018756         db  0x03 ; '.'
0000000000018757         db  0xa9 ; '.'
0000000000018758         db  0x02 ; '.'
0000000000018759         db  0x0a ; '.'
000000000001875a         db  0x0e ; '.'
000000000001875b         db  0x38 ; '8'
000000000001875c         db  0x46 ; 'F'
000000000001875d         db  0x0e ; '.'
000000000001875e         db  0x30 ; '0'
000000000001875f         db  0x41 ; 'A'
0000000000018760         db  0x0e ; '.'
0000000000018761         db  0x28 ; '('
0000000000018762         db  0x42 ; 'B'
0000000000018763         db  0x0e ; '.'
0000000000018764         db  0x20 ; ' '
0000000000018765         db  0x42 ; 'B'
0000000000018766         db  0x0e ; '.'
0000000000018767         db  0x18 ; '.'
0000000000018768         db  0x42 ; 'B'
0000000000018769         db  0x0e ; '.'
000000000001876a         db  0x10 ; '.'
000000000001876b         db  0x42 ; 'B'
000000000001876c         db  0x0e ; '.'
000000000001876d         db  0x08 ; '.'
000000000001876e         db  0x45 ; 'E'
000000000001876f         db  0x0b ; '.'
0000000000018770         db  0x02 ; '.'
0000000000018771         db  0x49 ; 'I'
0000000000018772         db  0x0a ; '.'
0000000000018773         db  0x0e ; '.'
0000000000018774         db  0x38 ; '8'
0000000000018775         db  0x43 ; 'C'
0000000000018776         db  0x0e ; '.'
0000000000018777         db  0x30 ; '0'
0000000000018778         db  0x41 ; 'A'
0000000000018779         db  0x0e ; '.'
000000000001877a         db  0x28 ; '('
000000000001877b         db  0x42 ; 'B'
000000000001877c         db  0x0e ; '.'
000000000001877d         db  0x20 ; ' '
000000000001877e         db  0x42 ; 'B'
000000000001877f         db  0x0e ; '.'
0000000000018780         db  0x18 ; '.'
0000000000018781         db  0x42 ; 'B'
0000000000018782         db  0x0e ; '.'
0000000000018783         db  0x10 ; '.'
0000000000018784         db  0x42 ; 'B'
0000000000018785         db  0x0e ; '.'
0000000000018786         db  0x08 ; '.'
0000000000018787         db  0x4b ; 'K'
0000000000018788         db  0x0b ; '.'
0000000000018789         db  0x4b ; 'K'
000000000001878a         db  0x0a ; '.'
000000000001878b         db  0x0e ; '.'
000000000001878c         db  0x38 ; '8'
000000000001878d         db  0x46 ; 'F'
000000000001878e         db  0x0e ; '.'
000000000001878f         db  0x30 ; '0'
0000000000018790         db  0x41 ; 'A'
0000000000018791         db  0x0e ; '.'
0000000000018792         db  0x28 ; '('
0000000000018793         db  0x42 ; 'B'
0000000000018794         db  0x0e ; '.'
0000000000018795         db  0x20 ; ' '
0000000000018796         db  0x42 ; 'B'
0000000000018797         db  0x0e ; '.'
0000000000018798         db  0x18 ; '.'
0000000000018799         db  0x42 ; 'B'
000000000001879a         db  0x0e ; '.'
000000000001879b         db  0x10 ; '.'
000000000001879c         db  0x42 ; 'B'
000000000001879d         db  0x0e ; '.'
000000000001879e         db  0x08 ; '.'
000000000001879f         db  0x41 ; 'A'
00000000000187a0         db  0x0b ; '.'
00000000000187a1         db  0x00 ; '.'
00000000000187a2         db  0x00 ; '.'
00000000000187a3         db  0x00 ; '.'
00000000000187a4         dd         0x00000024                                  ; Length of the record
00000000000187a8         dd         0x000002e8                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000187ac         db         0xe4, 0xb4, 0xfe, 0xff                      ; begin 0x3c90
00000000000187b0         db         0xd4, 3 dup (0x00)                          ; length 0xd4 (end at 0x3d64)
00000000000187b4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000187b5         db  0x41 ; 'A'
00000000000187b6         db  0x0e ; '.'
00000000000187b7         db  0x10 ; '.'
00000000000187b8         db  0x83 ; '.'
00000000000187b9         db  0x02 ; '.'
00000000000187ba         db  0x02 ; '.'
00000000000187bb         db  0x76 ; 'v'
00000000000187bc         db  0x0a ; '.'
00000000000187bd         db  0x0e ; '.'
00000000000187be         db  0x08 ; '.'
00000000000187bf         db  0x49 ; 'I'
00000000000187c0         db  0x0b ; '.'
00000000000187c1         db  0x62 ; 'b'
00000000000187c2         db  0x0a ; '.'
00000000000187c3         db  0x0e ; '.'
00000000000187c4         db  0x08 ; '.'
00000000000187c5         db  0x4e ; 'N'
00000000000187c6         db  0x0b ; '.'
00000000000187c7         db  0x63 ; 'c'
00000000000187c8         db  0x0e ; '.'
00000000000187c9         db  0x08 ; '.'
00000000000187ca         db  0x00 ; '.'
00000000000187cb         db  0x00 ; '.'
00000000000187cc         dd         0x00000014                                  ; Length of the record
00000000000187d0         dd         0x00000310                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000187d4         db         0x9c, 0xb5, 0xfe, 0xff                      ; begin 0x3d70
00000000000187d8         db         0x27, 3 dup (0x00)                          ; length 0x27 (end at 0x3d97)
00000000000187dc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000187dd         db  0x44 ; 'D'
00000000000187de         db  0x0e ; '.'
00000000000187df         db  0x10 ; '.'
00000000000187e0         db  0x62 ; 'b'
00000000000187e1         db  0x0e ; '.'
00000000000187e2         db  0x08 ; '.'
00000000000187e3         db  0x00 ; '.'
00000000000187e4         dd         0x00000024                                  ; Length of the record
00000000000187e8         dd         0x00000328                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000187ec         db         0x94, 0x97, 0xfe, 0xff                      ; begin 0x1f80
00000000000187f0         db         0xd2, 3 dup (0x00)                          ; length 0xd2 (end at 0x2052)
00000000000187f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000187f5         db  0x42 ; 'B'
00000000000187f6         db  0x0e ; '.'
00000000000187f7         db  0x10 ; '.'
00000000000187f8         db  0x8d ; '.'
00000000000187f9         db  0x02 ; '.'
00000000000187fa         db  0x42 ; 'B'
00000000000187fb         db  0x0e ; '.'
00000000000187fc         db  0x18 ; '.'
00000000000187fd         db  0x8c ; '.'
00000000000187fe         db  0x03 ; '.'
00000000000187ff         db  0x41 ; 'A'
0000000000018800         db  0x0e ; '.'
0000000000018801         db  0x20 ; ' '
0000000000018802         db  0x86 ; '.'
0000000000018803         db  0x04 ; '.'
0000000000018804         db  0x41 ; 'A'
0000000000018805         db  0x0e ; '.'
0000000000018806         db  0x28 ; '('
0000000000018807         db  0x83 ; '.'
0000000000018808         db  0x05 ; '.'
0000000000018809         db  0x49 ; 'I'
000000000001880a         db  0x0e ; '.'
000000000001880b         db  0x50 ; 'P'
000000000001880c         dd         0x00000034                                  ; Length of the record
0000000000018810         dd         0x00000350                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018814         db         0x8c, 0xb5, 0xfe, 0xff                      ; begin 0x3da0
0000000000018818         db         0xf6, 3 dup (0x00)                          ; length 0xf6 (end at 0x3e96)
000000000001881c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001881d         db  0x41 ; 'A'
000000000001881e         db  0x0e ; '.'
000000000001881f         db  0x10 ; '.'
0000000000018820         db  0x86 ; '.'
0000000000018821         db  0x02 ; '.'
0000000000018822         db  0x41 ; 'A'
0000000000018823         db  0x0e ; '.'
0000000000018824         db  0x18 ; '.'
0000000000018825         db  0x83 ; '.'
0000000000018826         db  0x03 ; '.'
0000000000018827         db  0x47 ; 'G'
0000000000018828         db  0x0e ; '.'
0000000000018829         db  0x20 ; ' '
000000000001882a         db  0x02 ; '.'
000000000001882b         db  0xb0 ; '.'
000000000001882c         db  0x0a ; '.'
000000000001882d         db  0x0e ; '.'
000000000001882e         db  0x18 ; '.'
000000000001882f         db  0x46 ; 'F'
0000000000018830         db  0x0e ; '.'
0000000000018831         db  0x10 ; '.'
0000000000018832         db  0x41 ; 'A'
0000000000018833         db  0x0e ; '.'
0000000000018834         db  0x08 ; '.'
0000000000018835         db  0x48 ; 'H'
0000000000018836         db  0x0b ; '.'
0000000000018837         db  0x44 ; 'D'
0000000000018838         db  0x0a ; '.'
0000000000018839         db  0x0e ; '.'
000000000001883a         db  0x18 ; '.'
000000000001883b         db  0x43 ; 'C'
000000000001883c         db  0x0e ; '.'
000000000001883d         db  0x10 ; '.'
000000000001883e         db  0x41 ; 'A'
000000000001883f         db  0x0e ; '.'
0000000000018840         db  0x08 ; '.'
0000000000018841         db  0x48 ; 'H'
0000000000018842         db  0x0b ; '.'
0000000000018843         db  0x00 ; '.'
0000000000018844         dd         0x00000018                                  ; Length of the record
0000000000018848         dd         0x00000388                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001884c         db         0x54, 0xb6, 0xfe, 0xff                      ; begin 0x3ea0
0000000000018850         db         0x64, 3 dup (0x00)                          ; length 0x64 (end at 0x3f04)
0000000000018854         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018855         db  0x60 ; '`'
0000000000018856         db  0x0e ; '.'
0000000000018857         db  0x10 ; '.'
0000000000018858         db  0x83 ; '.'
0000000000018859         db  0x02 ; '.'
000000000001885a         db  0x53 ; 'S'
000000000001885b         db  0x0a ; '.'
000000000001885c         db  0x0e ; '.'
000000000001885d         db  0x08 ; '.'
000000000001885e         db  0x45 ; 'E'
000000000001885f         db  0x0b ; '.'
0000000000018860         dd         0x00000028                                  ; Length of the record
0000000000018864         dd         0x000003a4                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018868         db         0xa8, 0xb6, 0xfe, 0xff                      ; begin 0x3f10
000000000001886c         db         0x1a, 0x04, 2 dup (0x00)                    ; length 0x41a (end at 0x432a)
0000000000018870         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018871         db  0x42 ; 'B'
0000000000018872         db  0x0e ; '.'
0000000000018873         db  0x10 ; '.'
0000000000018874         db  0x8d ; '.'
0000000000018875         db  0x02 ; '.'
0000000000018876         db  0x42 ; 'B'
0000000000018877         db  0x0e ; '.'
0000000000018878         db  0x18 ; '.'
0000000000018879         db  0x8c ; '.'
000000000001887a         db  0x03 ; '.'
000000000001887b         db  0x46 ; 'F'
000000000001887c         db  0x0e ; '.'
000000000001887d         db  0x20 ; ' '
000000000001887e         db  0x86 ; '.'
000000000001887f         db  0x04 ; '.'
0000000000018880         db  0x41 ; 'A'
0000000000018881         db  0x0e ; '.'
0000000000018882         db  0x28 ; '('
0000000000018883         db  0x83 ; '.'
0000000000018884         db  0x05 ; '.'
0000000000018885         db  0x49 ; 'I'
0000000000018886         db  0x0e ; '.'
0000000000018887         db  0xb0 ; '.'
0000000000018888         db  0x01 ; '.'
0000000000018889         db  0x00 ; '.'
000000000001888a         db  0x00 ; '.'
000000000001888b         db  0x00 ; '.'
000000000001888c         dd         0x00000058                                  ; Length of the record
0000000000018890         dd         0x000003d0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018894         db         0xcc, 0x97, 0xfe, 0xff                      ; begin 0x2060
0000000000018898         db         0x21, 0x0f, 2 dup (0x00)                    ; length 0xf21 (end at 0x2f81)
000000000001889c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001889d         db  0x42 ; 'B'
000000000001889e         db  0x0e ; '.'
000000000001889f         db  0x10 ; '.'
00000000000188a0         db  0x8f ; '.'
00000000000188a1         db  0x02 ; '.'
00000000000188a2         db  0x42 ; 'B'
00000000000188a3         db  0x0e ; '.'
00000000000188a4         db  0x18 ; '.'
00000000000188a5         db  0x8e ; '.'
00000000000188a6         db  0x03 ; '.'
00000000000188a7         db  0x42 ; 'B'
00000000000188a8         db  0x0e ; '.'
00000000000188a9         db  0x20 ; ' '
00000000000188aa         db  0x8d ; '.'
00000000000188ab         db  0x04 ; '.'
00000000000188ac         db  0x42 ; 'B'
00000000000188ad         db  0x0e ; '.'
00000000000188ae         db  0x28 ; '('
00000000000188af         db  0x8c ; '.'
00000000000188b0         db  0x05 ; '.'
00000000000188b1         db  0x44 ; 'D'
00000000000188b2         db  0x0e ; '.'
00000000000188b3         db  0x30 ; '0'
00000000000188b4         db  0x86 ; '.'
00000000000188b5         db  0x06 ; '.'
00000000000188b6         db  0x41 ; 'A'
00000000000188b7         db  0x0e ; '.'
00000000000188b8         db  0x38 ; '8'
00000000000188b9         db  0x83 ; '.'
00000000000188ba         db  0x07 ; '.'
00000000000188bb         db  0x4e ; 'N'
00000000000188bc         db  0x0e ; '.'
00000000000188bd         db  0xc0 ; '.'
00000000000188be         db  0x02 ; '.'
00000000000188bf         db  0x03 ; '.'
00000000000188c0         db  0xdc ; '.'
00000000000188c1         db  0x01 ; '.'
00000000000188c2         db  0x0a ; '.'
00000000000188c3         db  0x0e ; '.'
00000000000188c4         db  0xc8 ; '.'
00000000000188c5         db  0x02 ; '.'
00000000000188c6         db  0x50 ; 'P'
00000000000188c7         db  0x0e ; '.'
00000000000188c8         db  0xd0 ; '.'
00000000000188c9         db  0x02 ; '.'
00000000000188ca         db  0x6a ; 'j'
00000000000188cb         db  0x0b ; '.'
00000000000188cc         db  0x03 ; '.'
00000000000188cd         db  0x52 ; 'R'
00000000000188ce         db  0x09 ; '.'
00000000000188cf         db  0x0a ; '.'
00000000000188d0         db  0x0e ; '.'
00000000000188d1         db  0x38 ; '8'
00000000000188d2         db  0x41 ; 'A'
00000000000188d3         db  0x0e ; '.'
00000000000188d4         db  0x30 ; '0'
00000000000188d5         db  0x41 ; 'A'
00000000000188d6         db  0x0e ; '.'
00000000000188d7         db  0x28 ; '('
00000000000188d8         db  0x42 ; 'B'
00000000000188d9         db  0x0e ; '.'
00000000000188da         db  0x20 ; ' '
00000000000188db         db  0x42 ; 'B'
00000000000188dc         db  0x0e ; '.'
00000000000188dd         db  0x18 ; '.'
00000000000188de         db  0x42 ; 'B'
00000000000188df         db  0x0e ; '.'
00000000000188e0         db  0x10 ; '.'
00000000000188e1         db  0x42 ; 'B'
00000000000188e2         db  0x0e ; '.'
00000000000188e3         db  0x08 ; '.'
00000000000188e4         db  0x41 ; 'A'
00000000000188e5         db  0x0b ; '.'
00000000000188e6         db  0x00 ; '.'
00000000000188e7         db  0x00 ; '.'
00000000000188e8         dd         0x00000010                                  ; Length of the record
00000000000188ec         dd         0x0000042c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000188f0         db         0x40, 0xba, 0xfe, 0xff                      ; begin 0x4330
00000000000188f4         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x4338)
00000000000188f8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000188f9         align      4
00000000000188fc         dd         0x00000010                                  ; Length of the record
0000000000018900         dd         0x00000440                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018904         db         0x3c, 0xba, 0xfe, 0xff                      ; begin 0x4340
0000000000018908         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x4348)
000000000001890c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001890d         align      16
0000000000018910         dd         0x0000002c                                  ; Length of the record
0000000000018914         dd         0x00000454                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018918         db         0x38, 0xba, 0xfe, 0xff                      ; begin 0x4350
000000000001891c         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x43f4)
0000000000018920         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018921         db  0x41 ; 'A'
0000000000018922         db  0x0e ; '.'
0000000000018923         db  0x10 ; '.'
0000000000018924         db  0x86 ; '.'
0000000000018925         db  0x02 ; '.'
0000000000018926         db  0x41 ; 'A'
0000000000018927         db  0x0e ; '.'
0000000000018928         db  0x18 ; '.'
0000000000018929         db  0x83 ; '.'
000000000001892a         db  0x03 ; '.'
000000000001892b         db  0x44 ; 'D'
000000000001892c         db  0x0e ; '.'
000000000001892d         db  0x20 ; ' '
000000000001892e         db  0x7a ; 'z'
000000000001892f         db  0x0a ; '.'
0000000000018930         db  0x0e ; '.'
0000000000018931         db  0x18 ; '.'
0000000000018932         db  0x41 ; 'A'
0000000000018933         db  0x0e ; '.'
0000000000018934         db  0x10 ; '.'
0000000000018935         db  0x41 ; 'A'
0000000000018936         db  0x0e ; '.'
0000000000018937         db  0x08 ; '.'
0000000000018938         db  0x41 ; 'A'
0000000000018939         db  0x0b ; '.'
000000000001893a         db  0x00 ; '.'
000000000001893b         db  0x00 ; '.'
000000000001893c         db  0x00 ; '.'
000000000001893d         db  0x00 ; '.'
000000000001893e         db  0x00 ; '.'
000000000001893f         db  0x00 ; '.'
0000000000018940         dd         0x00000034                                  ; Length of the record
0000000000018944         dd         0x00000484                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018948         db         0xb8, 0xba, 0xfe, 0xff                      ; begin 0x4400
000000000001894c         db         0x56, 3 dup (0x00)                          ; length 0x56 (end at 0x4456)
0000000000018950         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018951         db  0x42 ; 'B'
0000000000018952         db  0x0e ; '.'
0000000000018953         db  0x10 ; '.'
0000000000018954         db  0x8d ; '.'
0000000000018955         db  0x02 ; '.'
0000000000018956         db  0x42 ; 'B'
0000000000018957         db  0x0e ; '.'
0000000000018958         db  0x18 ; '.'
0000000000018959         db  0x8c ; '.'
000000000001895a         db  0x03 ; '.'
000000000001895b         db  0x43 ; 'C'
000000000001895c         db  0x0e ; '.'
000000000001895d         db  0x20 ; ' '
000000000001895e         db  0x86 ; '.'
000000000001895f         db  0x04 ; '.'
0000000000018960         db  0x41 ; 'A'
0000000000018961         db  0x0e ; '.'
0000000000018962         db  0x28 ; '('
0000000000018963         db  0x83 ; '.'
0000000000018964         db  0x05 ; '.'
0000000000018965         db  0x4d ; 'M'
0000000000018966         db  0x0e ; '.'
0000000000018967         db  0x30 ; '0'
0000000000018968         db  0x78 ; 'x'
0000000000018969         db  0x0e ; '.'
000000000001896a         db  0x28 ; '('
000000000001896b         db  0x43 ; 'C'
000000000001896c         db  0x0e ; '.'
000000000001896d         db  0x20 ; ' '
000000000001896e         db  0x41 ; 'A'
000000000001896f         db  0x0e ; '.'
0000000000018970         db  0x18 ; '.'
0000000000018971         db  0x42 ; 'B'
0000000000018972         db  0x0e ; '.'
0000000000018973         db  0x10 ; '.'
0000000000018974         db  0x42 ; 'B'
0000000000018975         db  0x0e ; '.'
0000000000018976         db  0x08 ; '.'
0000000000018977         db  0x00 ; '.'
0000000000018978         dd         0x0000002c                                  ; Length of the record
000000000001897c         dd         0x000004bc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018980         db         0xe0, 0xba, 0xfe, 0xff                      ; begin 0x4460
0000000000018984         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x44f3)
0000000000018988         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018989         db  0x42 ; 'B'
000000000001898a         db  0x0e ; '.'
000000000001898b         db  0x10 ; '.'
000000000001898c         db  0x8c ; '.'
000000000001898d         db  0x02 ; '.'
000000000001898e         db  0x41 ; 'A'
000000000001898f         db  0x0e ; '.'
0000000000018990         db  0x18 ; '.'
0000000000018991         db  0x86 ; '.'
0000000000018992         db  0x03 ; '.'
0000000000018993         db  0x44 ; 'D'
0000000000018994         db  0x0e ; '.'
0000000000018995         db  0x20 ; ' '
0000000000018996         db  0x83 ; '.'
0000000000018997         db  0x04 ; '.'
0000000000018998         db  0x5e ; '^'
0000000000018999         db  0x0a ; '.'
000000000001899a         db  0x0e ; '.'
000000000001899b         db  0x18 ; '.'
000000000001899c         db  0x41 ; 'A'
000000000001899d         db  0x0e ; '.'
000000000001899e         db  0x10 ; '.'
000000000001899f         db  0x42 ; 'B'
00000000000189a0         db  0x0e ; '.'
00000000000189a1         db  0x08 ; '.'
00000000000189a2         db  0x48 ; 'H'
00000000000189a3         db  0x0b ; '.'
00000000000189a4         db  0x00 ; '.'
00000000000189a5         db  0x00 ; '.'
00000000000189a6         db  0x00 ; '.'
00000000000189a7         db  0x00 ; '.'
00000000000189a8         dd         0x00000014                                  ; Length of the record
00000000000189ac         dd         0x000004ec                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000189b0         db         0x50, 0xbb, 0xfe, 0xff                      ; begin 0x4500
00000000000189b4         db         0x42, 3 dup (0x00)                          ; length 0x42 (end at 0x4542)
00000000000189b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000189b9         align      64
00000000000189c0         dd         0x0000001c                                  ; Length of the record
00000000000189c4         dd         0x00000504                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000189c8         db         0x88, 0xbb, 0xfe, 0xff                      ; begin 0x4550
00000000000189cc         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x45ef)
00000000000189d0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000189d1         db  0x44 ; 'D'
00000000000189d2         db  0x0e ; '.'
00000000000189d3         db  0x10 ; '.'
00000000000189d4         db  0x83 ; '.'
00000000000189d5         db  0x02 ; '.'
00000000000189d6         db  0x02 ; '.'
00000000000189d7         db  0x78 ; 'x'
00000000000189d8         db  0x0a ; '.'
00000000000189d9         db  0x0e ; '.'
00000000000189da         db  0x08 ; '.'
00000000000189db         db  0x41 ; 'A'
00000000000189dc         db  0x0b ; '.'
00000000000189dd         db  0x00 ; '.'
00000000000189de         db  0x00 ; '.'
00000000000189df         db  0x00 ; '.'
00000000000189e0         dd         0x00000040                                  ; Length of the record
00000000000189e4         dd         0x00000524                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000189e8         db         0x08, 0xbc, 0xfe, 0xff                      ; begin 0x45f0
00000000000189ec         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x46d7)
00000000000189f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000189f1         db  0x41 ; 'A'
00000000000189f2         db  0x0e ; '.'
00000000000189f3         db  0x10 ; '.'
00000000000189f4         db  0x86 ; '.'
00000000000189f5         db  0x02 ; '.'
00000000000189f6         db  0x41 ; 'A'
00000000000189f7         db  0x0e ; '.'
00000000000189f8         db  0x18 ; '.'
00000000000189f9         db  0x83 ; '.'
00000000000189fa         db  0x03 ; '.'
00000000000189fb         db  0x49 ; 'I'
00000000000189fc         db  0x0e ; '.'
00000000000189fd         db  0x20 ; ' '
00000000000189fe         db  0x6e ; 'n'
00000000000189ff         db  0x0a ; '.'
0000000000018a00         db  0x0e ; '.'
0000000000018a01         db  0x18 ; '.'
0000000000018a02         db  0x41 ; 'A'
0000000000018a03         db  0x0e ; '.'
0000000000018a04         db  0x10 ; '.'
0000000000018a05         db  0x41 ; 'A'
0000000000018a06         db  0x0e ; '.'
0000000000018a07         db  0x08 ; '.'
0000000000018a08         db  0x45 ; 'E'
0000000000018a09         db  0x0b ; '.'
0000000000018a0a         db  0x02 ; '.'
0000000000018a0b         db  0x4a ; 'J'
0000000000018a0c         db  0x0a ; '.'
0000000000018a0d         db  0x0e ; '.'
0000000000018a0e         db  0x18 ; '.'
0000000000018a0f         db  0x41 ; 'A'
0000000000018a10         db  0x0e ; '.'
0000000000018a11         db  0x10 ; '.'
0000000000018a12         db  0x41 ; 'A'
0000000000018a13         db  0x0e ; '.'
0000000000018a14         db  0x08 ; '.'
0000000000018a15         db  0x44 ; 'D'
0000000000018a16         db  0x0b ; '.'
0000000000018a17         db  0x02 ; '.'
0000000000018a18         db  0x54 ; 'T'
0000000000018a19         db  0x0e ; '.'
0000000000018a1a         db  0x18 ; '.'
0000000000018a1b         db  0x41 ; 'A'
0000000000018a1c         db  0x0e ; '.'
0000000000018a1d         db  0x10 ; '.'
0000000000018a1e         db  0x41 ; 'A'
0000000000018a1f         db  0x0e ; '.'
0000000000018a20         db  0x08 ; '.'
0000000000018a21         db  0x00 ; '.'
0000000000018a22         db  0x00 ; '.'
0000000000018a23         db  0x00 ; '.'
0000000000018a24         dd         0x00000074                                  ; Length of the record
0000000000018a28         dd         0x00000568                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018a2c         db         0xb4, 0xbc, 0xfe, 0xff                      ; begin 0x46e0
0000000000018a30         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x5914)
0000000000018a34         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018a35         db  0x42 ; 'B'
0000000000018a36         db  0x0e ; '.'
0000000000018a37         db  0x10 ; '.'
0000000000018a38         db  0x8f ; '.'
0000000000018a39         db  0x02 ; '.'
0000000000018a3a         db  0x42 ; 'B'
0000000000018a3b         db  0x0e ; '.'
0000000000018a3c         db  0x18 ; '.'
0000000000018a3d         db  0x8e ; '.'
0000000000018a3e         db  0x03 ; '.'
0000000000018a3f         db  0x45 ; 'E'
0000000000018a40         db  0x0e ; '.'
0000000000018a41         db  0x20 ; ' '
0000000000018a42         db  0x8d ; '.'
0000000000018a43         db  0x04 ; '.'
0000000000018a44         db  0x42 ; 'B'
0000000000018a45         db  0x0e ; '.'
0000000000018a46         db  0x28 ; '('
0000000000018a47         db  0x8c ; '.'
0000000000018a48         db  0x05 ; '.'
0000000000018a49         db  0x44 ; 'D'
0000000000018a4a         db  0x0e ; '.'
0000000000018a4b         db  0x30 ; '0'
0000000000018a4c         db  0x86 ; '.'
0000000000018a4d         db  0x06 ; '.'
0000000000018a4e         db  0x41 ; 'A'
0000000000018a4f         db  0x0e ; '.'
0000000000018a50         db  0x38 ; '8'
0000000000018a51         db  0x83 ; '.'
0000000000018a52         db  0x07 ; '.'
0000000000018a53         db  0x53 ; 'S'
0000000000018a54         db  0x0e ; '.'
0000000000018a55         db  0xf0 ; '.'
0000000000018a56         db  0x01 ; '.'
0000000000018a57         db  0x03 ; '.'
0000000000018a58         db  0x81 ; '.'
0000000000018a59         db  0x0b ; '.'
0000000000018a5a         db  0x0e ; '.'
0000000000018a5b         db  0xf8 ; '.'
0000000000018a5c         db  0x01 ; '.'
0000000000018a5d         db  0x4a ; 'J'
0000000000018a5e         db  0x0e ; '.'
0000000000018a5f         db  0x80 ; '.'
0000000000018a60         db  0x02 ; '.'
0000000000018a61         db  0x44 ; 'D'
0000000000018a62         db  0x0e ; '.'
0000000000018a63         db  0x88 ; '.'
0000000000018a64         db  0x02 ; '.'
0000000000018a65         db  0x45 ; 'E'
0000000000018a66         db  0x0e ; '.'
0000000000018a67         db  0x90 ; '.'
0000000000018a68         db  0x02 ; '.'
0000000000018a69         db  0x5f ; '_'
0000000000018a6a         db  0x0e ; '.'
0000000000018a6b         db  0xf0 ; '.'
0000000000018a6c         db  0x01 ; '.'
0000000000018a6d         db  0x64 ; 'd'
0000000000018a6e         db  0x0a ; '.'
0000000000018a6f         db  0x0e ; '.'
0000000000018a70         db  0x38 ; '8'
0000000000018a71         db  0x41 ; 'A'
0000000000018a72         db  0x0e ; '.'
0000000000018a73         db  0x30 ; '0'
0000000000018a74         db  0x41 ; 'A'
0000000000018a75         db  0x0e ; '.'
0000000000018a76         db  0x28 ; '('
0000000000018a77         db  0x42 ; 'B'
0000000000018a78         db  0x0e ; '.'
0000000000018a79         db  0x20 ; ' '
0000000000018a7a         db  0x42 ; 'B'
0000000000018a7b         db  0x0e ; '.'
0000000000018a7c         db  0x18 ; '.'
0000000000018a7d         db  0x42 ; 'B'
0000000000018a7e         db  0x0e ; '.'
0000000000018a7f         db  0x10 ; '.'
0000000000018a80         db  0x42 ; 'B'
0000000000018a81         db  0x0e ; '.'
0000000000018a82         db  0x08 ; '.'
0000000000018a83         db  0x44 ; 'D'
0000000000018a84         db  0x0b ; '.'
0000000000018a85         db  0x03 ; '.'
0000000000018a86         db  0x99 ; '.'
0000000000018a87         db  0x05 ; '.'
0000000000018a88         db  0x0e ; '.'
0000000000018a89         db  0xf8 ; '.'
0000000000018a8a         db  0x01 ; '.'
0000000000018a8b         db  0x4d ; 'M'
0000000000018a8c         db  0x0e ; '.'
0000000000018a8d         db  0x80 ; '.'
0000000000018a8e         db  0x02 ; '.'
0000000000018a8f         db  0x44 ; 'D'
0000000000018a90         db  0x0e ; '.'
0000000000018a91         db  0x88 ; '.'
0000000000018a92         db  0x02 ; '.'
0000000000018a93         db  0x47 ; 'G'
0000000000018a94         db  0x0e ; '.'
0000000000018a95         db  0x90 ; '.'
0000000000018a96         db  0x02 ; '.'
0000000000018a97         db  0x5b ; '['
0000000000018a98         db  0x0e ; '.'
0000000000018a99         db  0xf0 ; '.'
0000000000018a9a         db  0x01 ; '.'
0000000000018a9b         db  0x00 ; '.'
0000000000018a9c         dd         0x00000068                                  ; Length of the record
0000000000018aa0         dd         0x000005e0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018aa4         db         0x7c, 0xce, 0xfe, 0xff                      ; begin 0x5920
0000000000018aa8         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x5acb)
0000000000018aac         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018aad         db  0x42 ; 'B'
0000000000018aae         db  0x0e ; '.'
0000000000018aaf         db  0x10 ; '.'
0000000000018ab0         db  0x8f ; '.'
0000000000018ab1         db  0x02 ; '.'
0000000000018ab2         db  0x42 ; 'B'
0000000000018ab3         db  0x0e ; '.'
0000000000018ab4         db  0x18 ; '.'
0000000000018ab5         db  0x8e ; '.'
0000000000018ab6         db  0x03 ; '.'
0000000000018ab7         db  0x45 ; 'E'
0000000000018ab8         db  0x0e ; '.'
0000000000018ab9         db  0x20 ; ' '
0000000000018aba         db  0x8d ; '.'
0000000000018abb         db  0x04 ; '.'
0000000000018abc         db  0x42 ; 'B'
0000000000018abd         db  0x0e ; '.'
0000000000018abe         db  0x28 ; '('
0000000000018abf         db  0x8c ; '.'
0000000000018ac0         db  0x05 ; '.'
0000000000018ac1         db  0x44 ; 'D'
0000000000018ac2         db  0x0e ; '.'
0000000000018ac3         db  0x30 ; '0'
0000000000018ac4         db  0x86 ; '.'
0000000000018ac5         db  0x06 ; '.'
0000000000018ac6         db  0x41 ; 'A'
0000000000018ac7         db  0x0e ; '.'
0000000000018ac8         db  0x38 ; '8'
0000000000018ac9         db  0x83 ; '.'
0000000000018aca         db  0x07 ; '.'
0000000000018acb         db  0x47 ; 'G'
0000000000018acc         db  0x0e ; '.'
0000000000018acd         db  0x60 ; '`'
0000000000018ace         db  0x02 ; '.'
0000000000018acf         db  0x99 ; '.'
0000000000018ad0         db  0x0e ; '.'
0000000000018ad1         db  0x68 ; 'h'
0000000000018ad2         db  0x5f ; '_'
0000000000018ad3         db  0x0e ; '.'
0000000000018ad4         db  0x70 ; 'p'
0000000000018ad5         db  0x46 ; 'F'
0000000000018ad6         db  0x0e ; '.'
0000000000018ad7         db  0x78 ; 'x'
0000000000018ad8         db  0x42 ; 'B'
0000000000018ad9         db  0x0e ; '.'
0000000000018ada         db  0x80 ; '.'
0000000000018adb         db  0x01 ; '.'
0000000000018adc         db  0x59 ; 'Y'
0000000000018add         db  0x0e ; '.'
0000000000018ade         db  0x60 ; '`'
0000000000018adf         db  0x02 ; '.'
0000000000018ae0         db  0x40 ; '@'
0000000000018ae1         db  0x0e ; '.'
0000000000018ae2         db  0x68 ; 'h'
0000000000018ae3         db  0x4b ; 'K'
0000000000018ae4         db  0x0e ; '.'
0000000000018ae5         db  0x70 ; 'p'
0000000000018ae6         db  0x43 ; 'C'
0000000000018ae7         db  0x0e ; '.'
0000000000018ae8         db  0x78 ; 'x'
0000000000018ae9         db  0x45 ; 'E'
0000000000018aea         db  0x0e ; '.'
0000000000018aeb         db  0x80 ; '.'
0000000000018aec         db  0x01 ; '.'
0000000000018aed         db  0x5e ; '^'
0000000000018aee         db  0x0e ; '.'
0000000000018aef         db  0x60 ; '`'
0000000000018af0         db  0x4c ; 'L'
0000000000018af1         db  0x0a ; '.'
0000000000018af2         db  0x0e ; '.'
0000000000018af3         db  0x38 ; '8'
0000000000018af4         db  0x44 ; 'D'
0000000000018af5         db  0x0e ; '.'
0000000000018af6         db  0x30 ; '0'
0000000000018af7         db  0x41 ; 'A'
0000000000018af8         db  0x0e ; '.'
0000000000018af9         db  0x28 ; '('
0000000000018afa         db  0x42 ; 'B'
0000000000018afb         db  0x0e ; '.'
0000000000018afc         db  0x20 ; ' '
0000000000018afd         db  0x42 ; 'B'
0000000000018afe         db  0x0e ; '.'
0000000000018aff         db  0x18 ; '.'
0000000000018b00         db  0x42 ; 'B'
0000000000018b01         db  0x0e ; '.'
0000000000018b02         db  0x10 ; '.'
0000000000018b03         db  0x42 ; 'B'
0000000000018b04         db  0x0e ; '.'
0000000000018b05         db  0x08 ; '.'
0000000000018b06         db  0x46 ; 'F'
0000000000018b07         db  0x0b ; '.'
0000000000018b08         dd         0x00000028                                  ; Length of the record
0000000000018b0c         dd         0x0000064c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018b10         db         0xc0, 0xcf, 0xfe, 0xff                      ; begin 0x5ad0
0000000000018b14         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x5b06)
0000000000018b18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018b19         db  0x42 ; 'B'
0000000000018b1a         db  0x0e ; '.'
0000000000018b1b         db  0x10 ; '.'
0000000000018b1c         db  0x8c ; '.'
0000000000018b1d         db  0x02 ; '.'
0000000000018b1e         db  0x41 ; 'A'
0000000000018b1f         db  0x0e ; '.'
0000000000018b20         db  0x18 ; '.'
0000000000018b21         db  0x86 ; '.'
0000000000018b22         db  0x03 ; '.'
0000000000018b23         db  0x41 ; 'A'
0000000000018b24         db  0x0e ; '.'
0000000000018b25         db  0x20 ; ' '
0000000000018b26         db  0x83 ; '.'
0000000000018b27         db  0x04 ; '.'
0000000000018b28         db  0x6e ; 'n'
0000000000018b29         db  0x0e ; '.'
0000000000018b2a         db  0x18 ; '.'
0000000000018b2b         db  0x41 ; 'A'
0000000000018b2c         db  0x0e ; '.'
0000000000018b2d         db  0x10 ; '.'
0000000000018b2e         db  0x42 ; 'B'
0000000000018b2f         db  0x0e ; '.'
0000000000018b30         db  0x08 ; '.'
0000000000018b31         db  0x00 ; '.'
0000000000018b32         db  0x00 ; '.'
0000000000018b33         db  0x00 ; '.'
0000000000018b34         dd         0x00000010                                  ; Length of the record
0000000000018b38         dd         0x00000678                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018b3c         db         0xd4, 0xcf, 0xfe, 0xff                      ; begin 0x5b10
0000000000018b40         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x5b21)
0000000000018b44         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018b45         align      8
0000000000018b48         dd         0x00000010                                  ; Length of the record
0000000000018b4c         dd         0x0000068c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018b50         db         0xe0, 0xcf, 0xfe, 0xff                      ; begin 0x5b30
0000000000018b54         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x5b41)
0000000000018b58         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018b59         align      4
0000000000018b5c         dd         0x00000010                                  ; Length of the record
0000000000018b60         dd         0x000006a0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018b64         db         0xec, 0xcf, 0xfe, 0xff                      ; begin 0x5b50
0000000000018b68         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x5b85)
0000000000018b6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018b6d         align      16
0000000000018b70         dd         0x00000010                                  ; Length of the record
0000000000018b74         dd         0x000006b4                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018b78         db         0x18, 0xd0, 0xfe, 0xff                      ; begin 0x5b90
0000000000018b7c         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x5ba5)
0000000000018b80         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018b81         align      4
0000000000018b84         dd         0x00000010                                  ; Length of the record
0000000000018b88         dd         0x000006c8                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018b8c         db         0x24, 0xd0, 0xfe, 0xff                      ; begin 0x5bb0
0000000000018b90         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x5be0)
0000000000018b94         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018b95         db  0x6b ; 'k'
0000000000018b96         db  0x0e ; '.'
0000000000018b97         db  0x10 ; '.'
0000000000018b98         dd         0x00000050                                  ; Length of the record
0000000000018b9c         dd         0x000006dc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018ba0         db         0x40, 0xd0, 0xfe, 0xff                      ; begin 0x5be0
0000000000018ba4         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x5c54)
0000000000018ba8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018ba9         db  0x42 ; 'B'
0000000000018baa         db  0x0e ; '.'
0000000000018bab         db  0x10 ; '.'
0000000000018bac         db  0x8f ; '.'
0000000000018bad         db  0x02 ; '.'
0000000000018bae         db  0x42 ; 'B'
0000000000018baf         db  0x0e ; '.'
0000000000018bb0         db  0x18 ; '.'
0000000000018bb1         db  0x8e ; '.'
0000000000018bb2         db  0x03 ; '.'
0000000000018bb3         db  0x49 ; 'I'
0000000000018bb4         db  0x0e ; '.'
0000000000018bb5         db  0x20 ; ' '
0000000000018bb6         db  0x8d ; '.'
0000000000018bb7         db  0x04 ; '.'
0000000000018bb8         db  0x42 ; 'B'
0000000000018bb9         db  0x0e ; '.'
0000000000018bba         db  0x28 ; '('
0000000000018bbb         db  0x8c ; '.'
0000000000018bbc         db  0x05 ; '.'
0000000000018bbd         db  0x44 ; 'D'
0000000000018bbe         db  0x0e ; '.'
0000000000018bbf         db  0x30 ; '0'
0000000000018bc0         db  0x86 ; '.'
0000000000018bc1         db  0x06 ; '.'
0000000000018bc2         db  0x41 ; 'A'
0000000000018bc3         db  0x0e ; '.'
0000000000018bc4         db  0x38 ; '8'
0000000000018bc5         db  0x83 ; '.'
0000000000018bc6         db  0x07 ; '.'
0000000000018bc7         db  0x4d ; 'M'
0000000000018bc8         db  0x0e ; '.'
0000000000018bc9         db  0x50 ; 'P'
0000000000018bca         db  0x5f ; '_'
0000000000018bcb         db  0x0e ; '.'
0000000000018bcc         db  0x58 ; 'X'
0000000000018bcd         db  0x47 ; 'G'
0000000000018bce         db  0x0e ; '.'
0000000000018bcf         db  0x60 ; '`'
0000000000018bd0         db  0x46 ; 'F'
0000000000018bd1         db  0x0e ; '.'
0000000000018bd2         db  0x68 ; 'h'
0000000000018bd3         db  0x44 ; 'D'
0000000000018bd4         db  0x0e ; '.'
0000000000018bd5         db  0x70 ; 'p'
0000000000018bd6         db  0x58 ; 'X'
0000000000018bd7         db  0x0e ; '.'
0000000000018bd8         db  0x38 ; '8'
0000000000018bd9         db  0x41 ; 'A'
0000000000018bda         db  0x0e ; '.'
0000000000018bdb         db  0x30 ; '0'
0000000000018bdc         db  0x41 ; 'A'
0000000000018bdd         db  0x0e ; '.'
0000000000018bde         db  0x28 ; '('
0000000000018bdf         db  0x42 ; 'B'
0000000000018be0         db  0x0e ; '.'
0000000000018be1         db  0x20 ; ' '
0000000000018be2         db  0x42 ; 'B'
0000000000018be3         db  0x0e ; '.'
0000000000018be4         db  0x18 ; '.'
0000000000018be5         db  0x42 ; 'B'
0000000000018be6         db  0x0e ; '.'
0000000000018be7         db  0x10 ; '.'
0000000000018be8         db  0x42 ; 'B'
0000000000018be9         db  0x0e ; '.'
0000000000018bea         db  0x08 ; '.'
0000000000018beb         db  0x00 ; '.'
0000000000018bec         dd         0x00000068                                  ; Length of the record
0000000000018bf0         dd         0x00000730                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018bf4         db         0x6c, 0xd0, 0xfe, 0xff                      ; begin 0x5c60
0000000000018bf8         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x5d43)
0000000000018bfc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018bfd         db  0x42 ; 'B'
0000000000018bfe         db  0x0e ; '.'
0000000000018bff         db  0x10 ; '.'
0000000000018c00         db  0x8f ; '.'
0000000000018c01         db  0x02 ; '.'
0000000000018c02         db  0x42 ; 'B'
0000000000018c03         db  0x0e ; '.'
0000000000018c04         db  0x18 ; '.'
0000000000018c05         db  0x8e ; '.'
0000000000018c06         db  0x03 ; '.'
0000000000018c07         db  0x49 ; 'I'
0000000000018c08         db  0x0e ; '.'
0000000000018c09         db  0x20 ; ' '
0000000000018c0a         db  0x8d ; '.'
0000000000018c0b         db  0x04 ; '.'
0000000000018c0c         db  0x42 ; 'B'
0000000000018c0d         db  0x0e ; '.'
0000000000018c0e         db  0x28 ; '('
0000000000018c0f         db  0x8c ; '.'
0000000000018c10         db  0x05 ; '.'
0000000000018c11         db  0x44 ; 'D'
0000000000018c12         db  0x0e ; '.'
0000000000018c13         db  0x30 ; '0'
0000000000018c14         db  0x86 ; '.'
0000000000018c15         db  0x06 ; '.'
0000000000018c16         db  0x41 ; 'A'
0000000000018c17         db  0x0e ; '.'
0000000000018c18         db  0x38 ; '8'
0000000000018c19         db  0x83 ; '.'
0000000000018c1a         db  0x07 ; '.'
0000000000018c1b         db  0x4d ; 'M'
0000000000018c1c         db  0x0e ; '.'
0000000000018c1d         db  0x70 ; 'p'
0000000000018c1e         db  0x65 ; 'e'
0000000000018c1f         db  0x0e ; '.'
0000000000018c20         db  0x78 ; 'x'
0000000000018c21         db  0x4d ; 'M'
0000000000018c22         db  0x0e ; '.'
0000000000018c23         db  0x80 ; '.'
0000000000018c24         db  0x01 ; '.'
0000000000018c25         db  0x46 ; 'F'
0000000000018c26         db  0x0e ; '.'
0000000000018c27         db  0x88 ; '.'
0000000000018c28         db  0x01 ; '.'
0000000000018c29         db  0x42 ; 'B'
0000000000018c2a         db  0x0e ; '.'
0000000000018c2b         db  0x90 ; '.'
0000000000018c2c         db  0x01 ; '.'
0000000000018c2d         db  0x5e ; '^'
0000000000018c2e         db  0x0e ; '.'
0000000000018c2f         db  0x70 ; 'p'
0000000000018c30         db  0x56 ; 'V'
0000000000018c31         db  0x0e ; '.'
0000000000018c32         db  0x78 ; 'x'
0000000000018c33         db  0x43 ; 'C'
0000000000018c34         db  0x0e ; '.'
0000000000018c35         db  0x80 ; '.'
0000000000018c36         db  0x01 ; '.'
0000000000018c37         db  0x43 ; 'C'
0000000000018c38         db  0x0e ; '.'
0000000000018c39         db  0x88 ; '.'
0000000000018c3a         db  0x01 ; '.'
0000000000018c3b         db  0x56 ; 'V'
0000000000018c3c         db  0x0e ; '.'
0000000000018c3d         db  0x90 ; '.'
0000000000018c3e         db  0x01 ; '.'
0000000000018c3f         db  0x52 ; 'R'
0000000000018c40         db  0x0e ; '.'
0000000000018c41         db  0x70 ; 'p'
0000000000018c42         db  0x5b ; '['
0000000000018c43         db  0x0e ; '.'
0000000000018c44         db  0x38 ; '8'
0000000000018c45         db  0x41 ; 'A'
0000000000018c46         db  0x0e ; '.'
0000000000018c47         db  0x30 ; '0'
0000000000018c48         db  0x41 ; 'A'
0000000000018c49         db  0x0e ; '.'
0000000000018c4a         db  0x28 ; '('
0000000000018c4b         db  0x42 ; 'B'
0000000000018c4c         db  0x0e ; '.'
0000000000018c4d         db  0x20 ; ' '
0000000000018c4e         db  0x42 ; 'B'
0000000000018c4f         db  0x0e ; '.'
0000000000018c50         db  0x18 ; '.'
0000000000018c51         db  0x42 ; 'B'
0000000000018c52         db  0x0e ; '.'
0000000000018c53         db  0x10 ; '.'
0000000000018c54         db  0x42 ; 'B'
0000000000018c55         db  0x0e ; '.'
0000000000018c56         db  0x08 ; '.'
0000000000018c57         db  0x00 ; '.'
0000000000018c58         dd         0x00000010                                  ; Length of the record
0000000000018c5c         dd         0x0000079c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018c60         db         0xf0, 0xd0, 0xfe, 0xff                      ; begin 0x5d50
0000000000018c64         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x5d5a)
0000000000018c68         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018c69         align      4
0000000000018c6c         dd         0x00000028                                  ; Length of the record
0000000000018c70         dd         0x000007b0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018c74         db         0xec, 0xd0, 0xfe, 0xff                      ; begin 0x5d60
0000000000018c78         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x5df3)
0000000000018c7c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018c7d         db  0x48 ; 'H'
0000000000018c7e         db  0x0e ; '.'
0000000000018c7f         db  0x10 ; '.'
0000000000018c80         db  0x8c ; '.'
0000000000018c81         db  0x02 ; '.'
0000000000018c82         db  0x48 ; 'H'
0000000000018c83         db  0x0e ; '.'
0000000000018c84         db  0x18 ; '.'
0000000000018c85         db  0x86 ; '.'
0000000000018c86         db  0x03 ; '.'
0000000000018c87         db  0x41 ; 'A'
0000000000018c88         db  0x0e ; '.'
0000000000018c89         db  0x20 ; ' '
0000000000018c8a         db  0x83 ; '.'
0000000000018c8b         db  0x04 ; '.'
0000000000018c8c         db  0x02 ; '.'
0000000000018c8d         db  0x74 ; 't'
0000000000018c8e         db  0x0e ; '.'
0000000000018c8f         db  0x18 ; '.'
0000000000018c90         db  0x4b ; 'K'
0000000000018c91         db  0x0e ; '.'
0000000000018c92         db  0x10 ; '.'
0000000000018c93         db  0x42 ; 'B'
0000000000018c94         db  0x0e ; '.'
0000000000018c95         db  0x08 ; '.'
0000000000018c96         db  0x00 ; '.'
0000000000018c97         db  0x00 ; '.'
0000000000018c98         dd         0x00000010                                  ; Length of the record
0000000000018c9c         dd         0x000007dc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018ca0         db         0x60, 0xd1, 0xfe, 0xff                      ; begin 0x5e00
0000000000018ca4         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x5e13)
0000000000018ca8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018ca9         align      4
0000000000018cac         dd         0x00000010                                  ; Length of the record
0000000000018cb0         dd         0x000007f0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018cb4         db         0x6c, 0xd1, 0xfe, 0xff                      ; begin 0x5e20
0000000000018cb8         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x5e2c)
0000000000018cbc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018cbd         align      64
0000000000018cc0         dd         0x00000010                                  ; Length of the record
0000000000018cc4         dd         0x00000804                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018cc8         db         0x68, 0xd1, 0xfe, 0xff                      ; begin 0x5e30
0000000000018ccc         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x5e48)
0000000000018cd0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018cd1         align      4
0000000000018cd4         dd         0x00000010                                  ; Length of the record
0000000000018cd8         dd         0x00000818                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018cdc         db         0x74, 0xd1, 0xfe, 0xff                      ; begin 0x5e50
0000000000018ce0         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x5e64)
0000000000018ce4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018ce5         align      8
0000000000018ce8         dd         0x00000018                                  ; Length of the record
0000000000018cec         dd         0x0000082c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018cf0         db         0x80, 0xd1, 0xfe, 0xff                      ; begin 0x5e70
0000000000018cf4         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x5efe)
0000000000018cf8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018cf9         db  0x44 ; 'D'
0000000000018cfa         db  0x0e ; '.'
0000000000018cfb         db  0x50 ; 'P'
0000000000018cfc         db  0x02 ; '.'
0000000000018cfd         db  0x7f ; '.'
0000000000018cfe         db  0x0a ; '.'
0000000000018cff         db  0x0e ; '.'
0000000000018d00         db  0x08 ; '.'
0000000000018d01         db  0x41 ; 'A'
0000000000018d02         db  0x0b ; '.'
0000000000018d03         db  0x00 ; '.'
0000000000018d04         dd         0x00000018                                  ; Length of the record
0000000000018d08         dd         0x00000848                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018d0c         db         0xf4, 0xd1, 0xfe, 0xff                      ; begin 0x5f00
0000000000018d10         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x5f8a)
0000000000018d14         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018d15         db  0x44 ; 'D'
0000000000018d16         db  0x0e ; '.'
0000000000018d17         db  0x50 ; 'P'
0000000000018d18         db  0x02 ; '.'
0000000000018d19         db  0x7b ; '{'
0000000000018d1a         db  0x0a ; '.'
0000000000018d1b         db  0x0e ; '.'
0000000000018d1c         db  0x08 ; '.'
0000000000018d1d         db  0x41 ; 'A'
0000000000018d1e         db  0x0b ; '.'
0000000000018d1f         db  0x00 ; '.'
0000000000018d20         dd         0x00000010                                  ; Length of the record
0000000000018d24         dd         0x00000864                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018d28         db         0x68, 0xd2, 0xfe, 0xff                      ; begin 0x5f90
0000000000018d2c         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x5f9c)
0000000000018d30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018d31         align      4
0000000000018d34         dd         0x00000010                                  ; Length of the record
0000000000018d38         dd         0x00000878                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018d3c         db         0x64, 0xd2, 0xfe, 0xff                      ; begin 0x5fa0
0000000000018d40         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x5faf)
0000000000018d44         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018d45         align      8
0000000000018d48         dd         0x00000018                                  ; Length of the record
0000000000018d4c         dd         0x0000088c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018d50         db         0x60, 0xd2, 0xfe, 0xff                      ; begin 0x5fb0
0000000000018d54         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x6048)
0000000000018d58         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018d59         db  0x44 ; 'D'
0000000000018d5a         db  0x0e ; '.'
0000000000018d5b         db  0x50 ; 'P'
0000000000018d5c         db  0x02 ; '.'
0000000000018d5d         db  0x8e ; '.'
0000000000018d5e         db  0x0a ; '.'
0000000000018d5f         db  0x0e ; '.'
0000000000018d60         db  0x08 ; '.'
0000000000018d61         db  0x41 ; 'A'
0000000000018d62         db  0x0b ; '.'
0000000000018d63         db  0x00 ; '.'
0000000000018d64         dd         0x00000010                                  ; Length of the record
0000000000018d68         dd         0x000008a8                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018d6c         db         0xe4, 0xd2, 0xfe, 0xff                      ; begin 0x6050
0000000000018d70         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x6060)
0000000000018d74         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018d75         align      8
0000000000018d78         dd         0x00000010                                  ; Length of the record
0000000000018d7c         dd         0x000008bc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018d80         db         0xe0, 0xd2, 0xfe, 0xff                      ; begin 0x6060
0000000000018d84         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x6071)
0000000000018d88         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018d89         align      4
0000000000018d8c         dd         0x00000010                                  ; Length of the record
0000000000018d90         dd         0x000008d0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018d94         db         0xec, 0xd2, 0xfe, 0xff                      ; begin 0x6080
0000000000018d98         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x608a)
0000000000018d9c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018d9d         align      32
0000000000018da0         dd         0x00000018                                  ; Length of the record
0000000000018da4         dd         0x000008e4                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018da8         db         0xe8, 0xd2, 0xfe, 0xff                      ; begin 0x6090
0000000000018dac         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x611e)
0000000000018db0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018db1         db  0x44 ; 'D'
0000000000018db2         db  0x0e ; '.'
0000000000018db3         db  0x50 ; 'P'
0000000000018db4         db  0x02 ; '.'
0000000000018db5         db  0x7f ; '.'
0000000000018db6         db  0x0a ; '.'
0000000000018db7         db  0x0e ; '.'
0000000000018db8         db  0x08 ; '.'
0000000000018db9         db  0x41 ; 'A'
0000000000018dba         db  0x0b ; '.'
0000000000018dbb         db  0x00 ; '.'
0000000000018dbc         dd         0x00000018                                  ; Length of the record
0000000000018dc0         dd         0x00000900                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018dc4         db         0x5c, 0xd3, 0xfe, 0xff                      ; begin 0x6120
0000000000018dc8         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x61b1)
0000000000018dcc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018dcd         db  0x44 ; 'D'
0000000000018dce         db  0x0e ; '.'
0000000000018dcf         db  0x50 ; 'P'
0000000000018dd0         db  0x02 ; '.'
0000000000018dd1         db  0x82 ; '.'
0000000000018dd2         db  0x0a ; '.'
0000000000018dd3         db  0x0e ; '.'
0000000000018dd4         db  0x08 ; '.'
0000000000018dd5         db  0x41 ; 'A'
0000000000018dd6         db  0x0b ; '.'
0000000000018dd7         db  0x00 ; '.'
0000000000018dd8         dd         0x00000010                                  ; Length of the record
0000000000018ddc         dd         0x0000091c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018de0         db         0xe0, 0xd3, 0xfe, 0xff                      ; begin 0x61c0
0000000000018de4         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x61cc)
0000000000018de8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018de9         align      4
0000000000018dec         dd         0x00000010                                  ; Length of the record
0000000000018df0         dd         0x00000930                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018df4         db         0xdc, 0xd3, 0xfe, 0xff                      ; begin 0x61d0
0000000000018df8         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x61e7)
0000000000018dfc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018dfd         align      512
0000000000018e00         dd         0x00000010                                  ; Length of the record
0000000000018e04         dd         0x00000944                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018e08         db         0xe8, 0xd3, 0xfe, 0xff                      ; begin 0x61f0
0000000000018e0c         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x6203)
0000000000018e10         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018e11         align      4
0000000000018e14         dd         0x00000010                                  ; Length of the record
0000000000018e18         dd         0x00000958                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018e1c         db         0xf4, 0xd3, 0xfe, 0xff                      ; begin 0x6210
0000000000018e20         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x621c)
0000000000018e24         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018e25         align      8
0000000000018e28         dd         0x00000010                                  ; Length of the record
0000000000018e2c         dd         0x0000096c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018e30         db         0xf0, 0xd3, 0xfe, 0xff                      ; begin 0x6220
0000000000018e34         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x6234)
0000000000018e38         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018e39         align      4
0000000000018e3c         dd         0x00000010                                  ; Length of the record
0000000000018e40         dd         0x00000980                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018e44         db         0xfc, 0xd3, 0xfe, 0xff                      ; begin 0x6240
0000000000018e48         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x6253)
0000000000018e4c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018e4d         align      16
0000000000018e50         dd         0x00000014                                  ; Length of the record
0000000000018e54         dd         0x00000994                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018e58         db         0x08, 0xd4, 0xfe, 0xff                      ; begin 0x6260
0000000000018e5c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x6278)
0000000000018e60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018e61         align      8
0000000000018e68         dd         0x00000034                                  ; Length of the record
0000000000018e6c         dd         0x000009ac                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018e70         db         0x10, 0xd4, 0xfe, 0xff                      ; begin 0x6280
0000000000018e74         db         0x5e, 3 dup (0x00)                          ; length 0x5e (end at 0x62de)
0000000000018e78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018e79         db  0x42 ; 'B'
0000000000018e7a         db  0x0e ; '.'
0000000000018e7b         db  0x10 ; '.'
0000000000018e7c         db  0x8d ; '.'
0000000000018e7d         db  0x02 ; '.'
0000000000018e7e         db  0x42 ; 'B'
0000000000018e7f         db  0x0e ; '.'
0000000000018e80         db  0x18 ; '.'
0000000000018e81         db  0x8c ; '.'
0000000000018e82         db  0x03 ; '.'
0000000000018e83         db  0x44 ; 'D'
0000000000018e84         db  0x0e ; '.'
0000000000018e85         db  0x20 ; ' '
0000000000018e86         db  0x86 ; '.'
0000000000018e87         db  0x04 ; '.'
0000000000018e88         db  0x41 ; 'A'
0000000000018e89         db  0x0e ; '.'
0000000000018e8a         db  0x28 ; '('
0000000000018e8b         db  0x83 ; '.'
0000000000018e8c         db  0x05 ; '.'
0000000000018e8d         db  0x4a ; 'J'
0000000000018e8e         db  0x0e ; '.'
0000000000018e8f         db  0x30 ; '0'
0000000000018e90         db  0x02 ; '.'
0000000000018e91         db  0x41 ; 'A'
0000000000018e92         db  0x0e ; '.'
0000000000018e93         db  0x28 ; '('
0000000000018e94         db  0x44 ; 'D'
0000000000018e95         db  0x0e ; '.'
0000000000018e96         db  0x20 ; ' '
0000000000018e97         db  0x41 ; 'A'
0000000000018e98         db  0x0e ; '.'
0000000000018e99         db  0x18 ; '.'
0000000000018e9a         db  0x42 ; 'B'
0000000000018e9b         db  0x0e ; '.'
0000000000018e9c         db  0x10 ; '.'
0000000000018e9d         db  0x42 ; 'B'
0000000000018e9e         db  0x0e ; '.'
0000000000018e9f         db  0x08 ; '.'
0000000000018ea0         dd         0x00000014                                  ; Length of the record
0000000000018ea4         dd         0x000009e4                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018ea8         db         0x38, 0xd4, 0xfe, 0xff                      ; begin 0x62e0
0000000000018eac         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x62ee)
0000000000018eb0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018eb1         align      8
0000000000018eb8         dd         0x00000110                                  ; Length of the record
0000000000018ebc         dd         0x000009fc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018ec0         db         0x30, 0xd4, 0xfe, 0xff                      ; begin 0x62f0
0000000000018ec4         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x6707)
0000000000018ec8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018ec9         db  0x42 ; 'B'
0000000000018eca         db  0x0e ; '.'
0000000000018ecb         db  0x10 ; '.'
0000000000018ecc         db  0x8f ; '.'
0000000000018ecd         db  0x02 ; '.'
0000000000018ece         db  0x42 ; 'B'
0000000000018ecf         db  0x0e ; '.'
0000000000018ed0         db  0x18 ; '.'
0000000000018ed1         db  0x8e ; '.'
0000000000018ed2         db  0x03 ; '.'
0000000000018ed3         db  0x42 ; 'B'
0000000000018ed4         db  0x0e ; '.'
0000000000018ed5         db  0x20 ; ' '
0000000000018ed6         db  0x8d ; '.'
0000000000018ed7         db  0x04 ; '.'
0000000000018ed8         db  0x42 ; 'B'
0000000000018ed9         db  0x0e ; '.'
0000000000018eda         db  0x28 ; '('
0000000000018edb         db  0x8c ; '.'
0000000000018edc         db  0x05 ; '.'
0000000000018edd         db  0x44 ; 'D'
0000000000018ede         db  0x0e ; '.'
0000000000018edf         db  0x30 ; '0'
0000000000018ee0         db  0x86 ; '.'
0000000000018ee1         db  0x06 ; '.'
0000000000018ee2         db  0x41 ; 'A'
0000000000018ee3         db  0x0e ; '.'
0000000000018ee4         db  0x38 ; '8'
0000000000018ee5         db  0x83 ; '.'
0000000000018ee6         db  0x07 ; '.'
0000000000018ee7         db  0x4a ; 'J'
0000000000018ee8         db  0x0e ; '.'
0000000000018ee9         db  0x60 ; '`'
0000000000018eea         db  0x02 ; '.'
0000000000018eeb         db  0xdd ; '.'
0000000000018eec         db  0x0e ; '.'
0000000000018eed         db  0x68 ; 'h'
0000000000018eee         db  0x57 ; 'W'
0000000000018eef         db  0x0e ; '.'
0000000000018ef0         db  0x70 ; 'p'
0000000000018ef1         db  0x42 ; 'B'
0000000000018ef2         db  0x0e ; '.'
0000000000018ef3         db  0x78 ; 'x'
0000000000018ef4         db  0x42 ; 'B'
0000000000018ef5         db  0x0e ; '.'
0000000000018ef6         db  0x80 ; '.'
0000000000018ef7         db  0x01 ; '.'
0000000000018ef8         db  0x42 ; 'B'
0000000000018ef9         db  0x0e ; '.'
0000000000018efa         db  0x88 ; '.'
0000000000018efb         db  0x01 ; '.'
0000000000018efc         db  0x42 ; 'B'
0000000000018efd         db  0x0e ; '.'
0000000000018efe         db  0x90 ; '.'
0000000000018eff         db  0x01 ; '.'
0000000000018f00         db  0x53 ; 'S'
0000000000018f01         db  0x0e ; '.'
0000000000018f02         db  0x60 ; '`'
0000000000018f03         db  0x44 ; 'D'
0000000000018f04         db  0x0a ; '.'
0000000000018f05         db  0x0e ; '.'
0000000000018f06         db  0x38 ; '8'
0000000000018f07         db  0x41 ; 'A'
0000000000018f08         db  0x0e ; '.'
0000000000018f09         db  0x30 ; '0'
0000000000018f0a         db  0x41 ; 'A'
0000000000018f0b         db  0x0e ; '.'
0000000000018f0c         db  0x28 ; '('
0000000000018f0d         db  0x42 ; 'B'
0000000000018f0e         db  0x0e ; '.'
0000000000018f0f         db  0x20 ; ' '
0000000000018f10         db  0x42 ; 'B'
0000000000018f11         db  0x0e ; '.'
0000000000018f12         db  0x18 ; '.'
0000000000018f13         db  0x42 ; 'B'
0000000000018f14         db  0x0e ; '.'
0000000000018f15         db  0x10 ; '.'
0000000000018f16         db  0x42 ; 'B'
0000000000018f17         db  0x0e ; '.'
0000000000018f18         db  0x08 ; '.'
0000000000018f19         db  0x44 ; 'D'
0000000000018f1a         db  0x0b ; '.'
0000000000018f1b         db  0x02 ; '.'
0000000000018f1c         db  0x78 ; 'x'
0000000000018f1d         db  0x0a ; '.'
0000000000018f1e         db  0x0e ; '.'
0000000000018f1f         db  0x68 ; 'h'
0000000000018f20         db  0x48 ; 'H'
0000000000018f21         db  0x0b ; '.'
0000000000018f22         db  0x5a ; 'Z'
0000000000018f23         db  0x0a ; '.'
0000000000018f24         db  0x0e ; '.'
0000000000018f25         db  0x38 ; '8'
0000000000018f26         db  0x47 ; 'G'
0000000000018f27         db  0x0e ; '.'
0000000000018f28         db  0x30 ; '0'
0000000000018f29         db  0x41 ; 'A'
0000000000018f2a         db  0x0e ; '.'
0000000000018f2b         db  0x28 ; '('
0000000000018f2c         db  0x42 ; 'B'
0000000000018f2d         db  0x0e ; '.'
0000000000018f2e         db  0x20 ; ' '
0000000000018f2f         db  0x42 ; 'B'
0000000000018f30         db  0x0e ; '.'
0000000000018f31         db  0x18 ; '.'
0000000000018f32         db  0x42 ; 'B'
0000000000018f33         db  0x0e ; '.'
0000000000018f34         db  0x10 ; '.'
0000000000018f35         db  0x42 ; 'B'
0000000000018f36         db  0x0e ; '.'
0000000000018f37         db  0x08 ; '.'
0000000000018f38         db  0x56 ; 'V'
0000000000018f39         db  0x0b ; '.'
0000000000018f3a         db  0x5e ; '^'
0000000000018f3b         db  0x0a ; '.'
0000000000018f3c         db  0x0e ; '.'
0000000000018f3d         db  0x38 ; '8'
0000000000018f3e         db  0x52 ; 'R'
0000000000018f3f         db  0x0e ; '.'
0000000000018f40         db  0x30 ; '0'
0000000000018f41         db  0x41 ; 'A'
0000000000018f42         db  0x0e ; '.'
0000000000018f43         db  0x28 ; '('
0000000000018f44         db  0x42 ; 'B'
0000000000018f45         db  0x0e ; '.'
0000000000018f46         db  0x20 ; ' '
0000000000018f47         db  0x42 ; 'B'
0000000000018f48         db  0x0e ; '.'
0000000000018f49         db  0x18 ; '.'
0000000000018f4a         db  0x42 ; 'B'
0000000000018f4b         db  0x0e ; '.'
0000000000018f4c         db  0x10 ; '.'
0000000000018f4d         db  0x42 ; 'B'
0000000000018f4e         db  0x0e ; '.'
0000000000018f4f         db  0x08 ; '.'
0000000000018f50         db  0x4f ; 'O'
0000000000018f51         db  0x0b ; '.'
0000000000018f52         db  0x62 ; 'b'
0000000000018f53         db  0x0a ; '.'
0000000000018f54         db  0x0e ; '.'
0000000000018f55         db  0x38 ; '8'
0000000000018f56         db  0x50 ; 'P'
0000000000018f57         db  0x0e ; '.'
0000000000018f58         db  0x30 ; '0'
0000000000018f59         db  0x41 ; 'A'
0000000000018f5a         db  0x0e ; '.'
0000000000018f5b         db  0x28 ; '('
0000000000018f5c         db  0x42 ; 'B'
0000000000018f5d         db  0x0e ; '.'
0000000000018f5e         db  0x20 ; ' '
0000000000018f5f         db  0x42 ; 'B'
0000000000018f60         db  0x0e ; '.'
0000000000018f61         db  0x18 ; '.'
0000000000018f62         db  0x42 ; 'B'
0000000000018f63         db  0x0e ; '.'
0000000000018f64         db  0x10 ; '.'
0000000000018f65         db  0x42 ; 'B'
0000000000018f66         db  0x0e ; '.'
0000000000018f67         db  0x08 ; '.'
0000000000018f68         db  0x55 ; 'U'
0000000000018f69         db  0x0b ; '.'
0000000000018f6a         db  0x66 ; 'f'
0000000000018f6b         db  0x0e ; '.'
0000000000018f6c         db  0x68 ; 'h'
0000000000018f6d         db  0x42 ; 'B'
0000000000018f6e         db  0x0e ; '.'
0000000000018f6f         db  0x70 ; 'p'
0000000000018f70         db  0x5c ; '\'
0000000000018f71         db  0x0e ; '.'
0000000000018f72         db  0x68 ; 'h'
0000000000018f73         db  0x41 ; 'A'
0000000000018f74         db  0x0e ; '.'
0000000000018f75         db  0x60 ; '`'
0000000000018f76         db  0x44 ; 'D'
0000000000018f77         db  0x0a ; '.'
0000000000018f78         db  0x0e ; '.'
0000000000018f79         db  0x38 ; '8'
0000000000018f7a         db  0x41 ; 'A'
0000000000018f7b         db  0x0e ; '.'
0000000000018f7c         db  0x30 ; '0'
0000000000018f7d         db  0x41 ; 'A'
0000000000018f7e         db  0x0e ; '.'
0000000000018f7f         db  0x28 ; '('
0000000000018f80         db  0x42 ; 'B'
0000000000018f81         db  0x0e ; '.'
0000000000018f82         db  0x20 ; ' '
0000000000018f83         db  0x42 ; 'B'
0000000000018f84         db  0x0e ; '.'
0000000000018f85         db  0x18 ; '.'
0000000000018f86         db  0x42 ; 'B'
0000000000018f87         db  0x0e ; '.'
0000000000018f88         db  0x10 ; '.'
0000000000018f89         db  0x42 ; 'B'
0000000000018f8a         db  0x0e ; '.'
0000000000018f8b         db  0x08 ; '.'
0000000000018f8c         db  0x45 ; 'E'
0000000000018f8d         db  0x0b ; '.'
0000000000018f8e         db  0x68 ; 'h'
0000000000018f8f         db  0x0a ; '.'
0000000000018f90         db  0x0e ; '.'
0000000000018f91         db  0x68 ; 'h'
0000000000018f92         db  0x48 ; 'H'
0000000000018f93         db  0x0b ; '.'
0000000000018f94         db  0x72 ; 'r'
0000000000018f95         db  0x0e ; '.'
0000000000018f96         db  0x68 ; 'h'
0000000000018f97         db  0x45 ; 'E'
0000000000018f98         db  0x0e ; '.'
0000000000018f99         db  0x70 ; 'p'
0000000000018f9a         db  0x42 ; 'B'
0000000000018f9b         db  0x0e ; '.'
0000000000018f9c         db  0x78 ; 'x'
0000000000018f9d         db  0x42 ; 'B'
0000000000018f9e         db  0x0e ; '.'
0000000000018f9f         db  0x80 ; '.'
0000000000018fa0         db  0x01 ; '.'
0000000000018fa1         db  0x5e ; '^'
0000000000018fa2         db  0x0e ; '.'
0000000000018fa3         db  0x60 ; '`'
0000000000018fa4         db  0x44 ; 'D'
0000000000018fa5         db  0x0a ; '.'
0000000000018fa6         db  0x0e ; '.'
0000000000018fa7         db  0x38 ; '8'
0000000000018fa8         db  0x41 ; 'A'
0000000000018fa9         db  0x0e ; '.'
0000000000018faa         db  0x30 ; '0'
0000000000018fab         db  0x41 ; 'A'
0000000000018fac         db  0x0e ; '.'
0000000000018fad         db  0x28 ; '('
0000000000018fae         db  0x42 ; 'B'
0000000000018faf         db  0x0e ; '.'
0000000000018fb0         db  0x20 ; ' '
0000000000018fb1         db  0x42 ; 'B'
0000000000018fb2         db  0x0e ; '.'
0000000000018fb3         db  0x18 ; '.'
0000000000018fb4         db  0x42 ; 'B'
0000000000018fb5         db  0x0e ; '.'
0000000000018fb6         db  0x10 ; '.'
0000000000018fb7         db  0x42 ; 'B'
0000000000018fb8         db  0x0e ; '.'
0000000000018fb9         db  0x08 ; '.'
0000000000018fba         db  0x41 ; 'A'
0000000000018fbb         db  0x0b ; '.'
0000000000018fbc         db  0x79 ; 'y'
0000000000018fbd         db  0x0a ; '.'
0000000000018fbe         db  0x0e ; '.'
0000000000018fbf         db  0x68 ; 'h'
0000000000018fc0         db  0x42 ; 'B'
0000000000018fc1         db  0x0e ; '.'
0000000000018fc2         db  0x70 ; 'p'
0000000000018fc3         db  0x42 ; 'B'
0000000000018fc4         db  0x0e ; '.'
0000000000018fc5         db  0x78 ; 'x'
0000000000018fc6         db  0x42 ; 'B'
0000000000018fc7         db  0x0e ; '.'
0000000000018fc8         db  0x80 ; '.'
0000000000018fc9         db  0x01 ; '.'
0000000000018fca         db  0x51 ; 'Q'
0000000000018fcb         db  0x0b ; '.'
0000000000018fcc         dd         0x00000010                                  ; Length of the record
0000000000018fd0         dd         0x00000b10                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018fd4         db         0x3c, 0xd7, 0xfe, 0xff                      ; begin 0x6710
0000000000018fd8         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x6730)
0000000000018fdc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018fdd         align      32
0000000000018fe0         dd         0x00000018                                  ; Length of the record
0000000000018fe4         dd         0x00000b24                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000018fe8         db         0x48, 0xd7, 0xfe, 0xff                      ; begin 0x6730
0000000000018fec         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x67a8)
0000000000018ff0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000018ff1         db  0x44 ; 'D'
0000000000018ff2         db  0x0e ; '.'
0000000000018ff3         db  0x70 ; 'p'
0000000000018ff4         db  0x02 ; '.'
0000000000018ff5         db  0x60 ; '`'
0000000000018ff6         db  0x0a ; '.'
0000000000018ff7         db  0x0e ; '.'
0000000000018ff8         db  0x08 ; '.'
0000000000018ff9         db  0x41 ; 'A'
0000000000018ffa         db  0x0b ; '.'
0000000000018ffb         db  0x00 ; '.'
0000000000018ffc         dd         0x00000028                                  ; Length of the record
0000000000019000         dd         0x00000b40                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019004         db         0xac, 0xd7, 0xfe, 0xff                      ; begin 0x67b0
0000000000019008         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x6885)
000000000001900c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001900d         db  0x41 ; 'A'
000000000001900e         db  0x0e ; '.'
000000000001900f         db  0x10 ; '.'
0000000000019010         db  0x86 ; '.'
0000000000019011         db  0x02 ; '.'
0000000000019012         db  0x41 ; 'A'
0000000000019013         db  0x0e ; '.'
0000000000019014         db  0x18 ; '.'
0000000000019015         db  0x83 ; '.'
0000000000019016         db  0x03 ; '.'
0000000000019017         db  0x50 ; 'P'
0000000000019018         db  0x0e ; '.'
0000000000019019         db  0xd0 ; '.'
000000000001901a         db  0x01 ; '.'
000000000001901b         db  0x02 ; '.'
000000000001901c         db  0xab ; '.'
000000000001901d         db  0x0a ; '.'
000000000001901e         db  0x0e ; '.'
000000000001901f         db  0x18 ; '.'
0000000000019020         db  0x41 ; 'A'
0000000000019021         db  0x0e ; '.'
0000000000019022         db  0x10 ; '.'
0000000000019023         db  0x41 ; 'A'
0000000000019024         db  0x0e ; '.'
0000000000019025         db  0x08 ; '.'
0000000000019026         db  0x41 ; 'A'
0000000000019027         db  0x0b ; '.'
0000000000019028         dd         0x0000001c                                  ; Length of the record
000000000001902c         dd         0x00000b6c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019030         db         0x60, 0xd8, 0xfe, 0xff                      ; begin 0x6890
0000000000019034         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x6910)
0000000000019038         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019039         db  0x41 ; 'A'
000000000001903a         db  0x0e ; '.'
000000000001903b         db  0x10 ; '.'
000000000001903c         db  0x83 ; '.'
000000000001903d         db  0x02 ; '.'
000000000001903e         db  0x02 ; '.'
000000000001903f         db  0x7a ; 'z'
0000000000019040         db  0x0e ; '.'
0000000000019041         db  0x08 ; '.'
0000000000019042         db  0x00 ; '.'
0000000000019043         db  0x00 ; '.'
0000000000019044         db  0x00 ; '.'
0000000000019045         db  0x00 ; '.'
0000000000019046         db  0x00 ; '.'
0000000000019047         db  0x00 ; '.'
0000000000019048         dd         0x00000018                                  ; Length of the record
000000000001904c         dd         0x00000b8c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019050         db         0xc0, 0xd8, 0xfe, 0xff                      ; begin 0x6910
0000000000019054         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x692a)
0000000000019058         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019059         db  0x41 ; 'A'
000000000001905a         db  0x0e ; '.'
000000000001905b         db  0x10 ; '.'
000000000001905c         db  0x83 ; '.'
000000000001905d         db  0x02 ; '.'
000000000001905e         db  0x53 ; 'S'
000000000001905f         db  0x0a ; '.'
0000000000019060         db  0x0e ; '.'
0000000000019061         db  0x08 ; '.'
0000000000019062         db  0x41 ; 'A'
0000000000019063         db  0x0b ; '.'
0000000000019064         dd         0x00000010                                  ; Length of the record
0000000000019068         dd         0x00000ba8                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001906c         db         0xc4, 0xd8, 0xfe, 0xff                      ; begin 0x6930
0000000000019070         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x6954)
0000000000019074         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019075         db  0x5f ; '_'
0000000000019076         db  0x0e ; '.'
0000000000019077         db  0x10 ; '.'
0000000000019078         dd         0x00000010                                  ; Length of the record
000000000001907c         dd         0x00000bbc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019080         db         0xe0, 0xd8, 0xfe, 0xff                      ; begin 0x6960
0000000000019084         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x6962)
0000000000019088         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019089         align      4
000000000001908c         dd         0x00000020                                  ; Length of the record
0000000000019090         dd         0x00000bd0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019094         db         0xdc, 0xd8, 0xfe, 0xff                      ; begin 0x6970
0000000000019098         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x69a6)
000000000001909c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001909d         db  0x44 ; 'D'
000000000001909e         db  0x0e ; '.'
000000000001909f         db  0x10 ; '.'
00000000000190a0         db  0x83 ; '.'
00000000000190a1         db  0x02 ; '.'
00000000000190a2         db  0x5d ; ']'
00000000000190a3         db  0x0a ; '.'
00000000000190a4         db  0x0e ; '.'
00000000000190a5         db  0x08 ; '.'
00000000000190a6         db  0x47 ; 'G'
00000000000190a7         db  0x0b ; '.'
00000000000190a8         db  0x48 ; 'H'
00000000000190a9         db  0x0a ; '.'
00000000000190aa         db  0x0e ; '.'
00000000000190ab         db  0x08 ; '.'
00000000000190ac         db  0x41 ; 'A'
00000000000190ad         db  0x0b ; '.'
00000000000190ae         db  0x00 ; '.'
00000000000190af         db  0x00 ; '.'
00000000000190b0         dd         0x00000010                                  ; Length of the record
00000000000190b4         dd         0x00000bf4                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000190b8         db         0xf8, 0xd8, 0xfe, 0xff                      ; begin 0x69b0
00000000000190bc         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x69d4)
00000000000190c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000190c1         db  0x5f ; '_'
00000000000190c2         db  0x0e ; '.'
00000000000190c3         db  0x10 ; '.'
00000000000190c4         dd         0x00000014                                  ; Length of the record
00000000000190c8         dd         0x00000c08                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000190cc         db         0x14, 0xd9, 0xfe, 0xff                      ; begin 0x69e0
00000000000190d0         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x6a62)
00000000000190d4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000190d5         db  0x02 ; '.'
00000000000190d6         db  0x5f ; '_'
00000000000190d7         db  0x0e ; '.'
00000000000190d8         db  0x10 ; '.'
00000000000190d9         db  0x49 ; 'I'
00000000000190da         db  0x0e ; '.'
00000000000190db         db  0x08 ; '.'
00000000000190dc         dd         0x00000014                                  ; Length of the record
00000000000190e0         dd         0x00000c20                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000190e4         db         0x8c, 0xd9, 0xfe, 0xff                      ; begin 0x6a70
00000000000190e8         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x6aba)
00000000000190ec         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000190ed         db  0x02 ; '.'
00000000000190ee         db  0x45 ; 'E'
00000000000190ef         db  0x0e ; '.'
00000000000190f0         db  0x10 ; '.'
00000000000190f1         db  0x00 ; '.'
00000000000190f2         db  0x00 ; '.'
00000000000190f3         db  0x00 ; '.'
00000000000190f4         dd         0x00000018                                  ; Length of the record
00000000000190f8         dd         0x00000c38                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000190fc         db         0xc4, 0xd9, 0xfe, 0xff                      ; begin 0x6ac0
0000000000019100         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x6ad7)
0000000000019104         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019105         db  0x41 ; 'A'
0000000000019106         db  0x0e ; '.'
0000000000019107         db  0x10 ; '.'
0000000000019108         db  0x83 ; '.'
0000000000019109         db  0x02 ; '.'
000000000001910a         db  0x51 ; 'Q'
000000000001910b         db  0x0e ; '.'
000000000001910c         db  0x08 ; '.'
000000000001910d         db  0x00 ; '.'
000000000001910e         db  0x00 ; '.'
000000000001910f         db  0x00 ; '.'
0000000000019110         dd         0x00000018                                  ; Length of the record
0000000000019114         dd         0x00000c54                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019118         db         0xc8, 0xd9, 0xfe, 0xff                      ; begin 0x6ae0
000000000001911c         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x6b0e)
0000000000019120         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019121         db  0x47 ; 'G'
0000000000019122         db  0x0e ; '.'
0000000000019123         db  0x10 ; '.'
0000000000019124         db  0x61 ; 'a'
0000000000019125         db  0x0a ; '.'
0000000000019126         db  0x0e ; '.'
0000000000019127         db  0x08 ; '.'
0000000000019128         db  0x41 ; 'A'
0000000000019129         db  0x0b ; '.'
000000000001912a         db  0x00 ; '.'
000000000001912b         db  0x00 ; '.'
000000000001912c         dd         0x00000024                                  ; Length of the record
0000000000019130         dd         0x00000c70                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019134         db         0xdc, 0xd9, 0xfe, 0xff                      ; begin 0x6b10
0000000000019138         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x6b38)
000000000001913c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001913d         db  0x41 ; 'A'
000000000001913e         db  0x0e ; '.'
000000000001913f         db  0x10 ; '.'
0000000000019140         db  0x86 ; '.'
0000000000019141         db  0x02 ; '.'
0000000000019142         db  0x41 ; 'A'
0000000000019143         db  0x0e ; '.'
0000000000019144         db  0x18 ; '.'
0000000000019145         db  0x83 ; '.'
0000000000019146         db  0x03 ; '.'
0000000000019147         db  0x4d ; 'M'
0000000000019148         db  0x0e ; '.'
0000000000019149         db  0x20 ; ' '
000000000001914a         db  0x49 ; 'I'
000000000001914b         db  0x0e ; '.'
000000000001914c         db  0x18 ; '.'
000000000001914d         db  0x47 ; 'G'
000000000001914e         db  0x0e ; '.'
000000000001914f         db  0x10 ; '.'
0000000000019150         db  0x41 ; 'A'
0000000000019151         db  0x0e ; '.'
0000000000019152         db  0x08 ; '.'
0000000000019153         db  0x00 ; '.'
0000000000019154         dd         0x00000018                                  ; Length of the record
0000000000019158         dd         0x00000c98                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001915c         db         0xe4, 0xd9, 0xfe, 0xff                      ; begin 0x6b40
0000000000019160         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x6b53)
0000000000019164         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019165         db  0x41 ; 'A'
0000000000019166         db  0x0e ; '.'
0000000000019167         db  0x10 ; '.'
0000000000019168         db  0x83 ; '.'
0000000000019169         db  0x02 ; '.'
000000000001916a         db  0x50 ; 'P'
000000000001916b         db  0x0e ; '.'
000000000001916c         db  0x08 ; '.'
000000000001916d         db  0x00 ; '.'
000000000001916e         db  0x00 ; '.'
000000000001916f         db  0x00 ; '.'
0000000000019170         dd         0x00000048                                  ; Length of the record
0000000000019174         dd         0x00000cb4                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019178         db         0xe8, 0xd9, 0xfe, 0xff                      ; begin 0x6b60
000000000001917c         db         0x11, 0x01, 2 dup (0x00)                    ; length 0x111 (end at 0x6c71)
0000000000019180         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019181         db  0x42 ; 'B'
0000000000019182         db  0x0e ; '.'
0000000000019183         db  0x10 ; '.'
0000000000019184         db  0x8f ; '.'
0000000000019185         db  0x02 ; '.'
0000000000019186         db  0x42 ; 'B'
0000000000019187         db  0x0e ; '.'
0000000000019188         db  0x18 ; '.'
0000000000019189         db  0x8e ; '.'
000000000001918a         db  0x03 ; '.'
000000000001918b         db  0x45 ; 'E'
000000000001918c         db  0x0e ; '.'
000000000001918d         db  0x20 ; ' '
000000000001918e         db  0x8d ; '.'
000000000001918f         db  0x04 ; '.'
0000000000019190         db  0x42 ; 'B'
0000000000019191         db  0x0e ; '.'
0000000000019192         db  0x28 ; '('
0000000000019193         db  0x8c ; '.'
0000000000019194         db  0x05 ; '.'
0000000000019195         db  0x44 ; 'D'
0000000000019196         db  0x0e ; '.'
0000000000019197         db  0x30 ; '0'
0000000000019198         db  0x86 ; '.'
0000000000019199         db  0x06 ; '.'
000000000001919a         db  0x41 ; 'A'
000000000001919b         db  0x0e ; '.'
000000000001919c         db  0x38 ; '8'
000000000001919d         db  0x83 ; '.'
000000000001919e         db  0x07 ; '.'
000000000001919f         db  0x4e ; 'N'
00000000000191a0         db  0x0e ; '.'
00000000000191a1         db  0x50 ; 'P'
00000000000191a2         db  0x02 ; '.'
00000000000191a3         db  0x9f ; '.'
00000000000191a4         db  0x0a ; '.'
00000000000191a5         db  0x0e ; '.'
00000000000191a6         db  0x38 ; '8'
00000000000191a7         db  0x41 ; 'A'
00000000000191a8         db  0x0e ; '.'
00000000000191a9         db  0x30 ; '0'
00000000000191aa         db  0x41 ; 'A'
00000000000191ab         db  0x0e ; '.'
00000000000191ac         db  0x28 ; '('
00000000000191ad         db  0x42 ; 'B'
00000000000191ae         db  0x0e ; '.'
00000000000191af         db  0x20 ; ' '
00000000000191b0         db  0x42 ; 'B'
00000000000191b1         db  0x0e ; '.'
00000000000191b2         db  0x18 ; '.'
00000000000191b3         db  0x42 ; 'B'
00000000000191b4         db  0x0e ; '.'
00000000000191b5         db  0x10 ; '.'
00000000000191b6         db  0x42 ; 'B'
00000000000191b7         db  0x0e ; '.'
00000000000191b8         db  0x08 ; '.'
00000000000191b9         db  0x49 ; 'I'
00000000000191ba         db  0x0b ; '.'
00000000000191bb         db  0x00 ; '.'
00000000000191bc         dd         0x00000018                                  ; Length of the record
00000000000191c0         dd         0x00000d00                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000191c4         db         0xbc, 0xda, 0xfe, 0xff                      ; begin 0x6c80
00000000000191c8         db         0x21, 3 dup (0x00)                          ; length 0x21 (end at 0x6ca1)
00000000000191cc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000191cd         db  0x44 ; 'D'
00000000000191ce         db  0x0e ; '.'
00000000000191cf         db  0x18 ; '.'
00000000000191d0         db  0x42 ; 'B'
00000000000191d1         db  0x0e ; '.'
00000000000191d2         db  0x20 ; ' '
00000000000191d3         db  0x5a ; 'Z'
00000000000191d4         db  0x0e ; '.'
00000000000191d5         db  0x08 ; '.'
00000000000191d6         db  0x00 ; '.'
00000000000191d7         db  0x00 ; '.'
00000000000191d8         dd         0x0000004c                                  ; Length of the record
00000000000191dc         dd         0x00000d1c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000191e0         db         0xd0, 0xda, 0xfe, 0xff                      ; begin 0x6cb0
00000000000191e4         db         0xb3, 0x06, 2 dup (0x00)                    ; length 0x6b3 (end at 0x7363)
00000000000191e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000191e9         db  0x42 ; 'B'
00000000000191ea         db  0x0e ; '.'
00000000000191eb         db  0x10 ; '.'
00000000000191ec         db  0x8f ; '.'
00000000000191ed         db  0x02 ; '.'
00000000000191ee         db  0x42 ; 'B'
00000000000191ef         db  0x0e ; '.'
00000000000191f0         db  0x18 ; '.'
00000000000191f1         db  0x8e ; '.'
00000000000191f2         db  0x03 ; '.'
00000000000191f3         db  0x42 ; 'B'
00000000000191f4         db  0x0e ; '.'
00000000000191f5         db  0x20 ; ' '
00000000000191f6         db  0x8d ; '.'
00000000000191f7         db  0x04 ; '.'
00000000000191f8         db  0x42 ; 'B'
00000000000191f9         db  0x0e ; '.'
00000000000191fa         db  0x28 ; '('
00000000000191fb         db  0x8c ; '.'
00000000000191fc         db  0x05 ; '.'
00000000000191fd         db  0x41 ; 'A'
00000000000191fe         db  0x0e ; '.'
00000000000191ff         db  0x30 ; '0'
0000000000019200         db  0x86 ; '.'
0000000000019201         db  0x06 ; '.'
0000000000019202         db  0x41 ; 'A'
0000000000019203         db  0x0e ; '.'
0000000000019204         db  0x38 ; '8'
0000000000019205         db  0x83 ; '.'
0000000000019206         db  0x07 ; '.'
0000000000019207         db  0x44 ; 'D'
0000000000019208         db  0x0e ; '.'
0000000000019209         db  0x60 ; '`'
000000000001920a         db  0x02 ; '.'
000000000001920b         db  0x96 ; '.'
000000000001920c         db  0x0a ; '.'
000000000001920d         db  0x0e ; '.'
000000000001920e         db  0x38 ; '8'
000000000001920f         db  0x41 ; 'A'
0000000000019210         db  0x0e ; '.'
0000000000019211         db  0x30 ; '0'
0000000000019212         db  0x41 ; 'A'
0000000000019213         db  0x0e ; '.'
0000000000019214         db  0x28 ; '('
0000000000019215         db  0x42 ; 'B'
0000000000019216         db  0x0e ; '.'
0000000000019217         db  0x20 ; ' '
0000000000019218         db  0x42 ; 'B'
0000000000019219         db  0x0e ; '.'
000000000001921a         db  0x18 ; '.'
000000000001921b         db  0x42 ; 'B'
000000000001921c         db  0x0e ; '.'
000000000001921d         db  0x10 ; '.'
000000000001921e         db  0x42 ; 'B'
000000000001921f         db  0x0e ; '.'
0000000000019220         db  0x08 ; '.'
0000000000019221         db  0x42 ; 'B'
0000000000019222         db  0x0b ; '.'
0000000000019223         db  0x00 ; '.'
0000000000019224         db  0x00 ; '.'
0000000000019225         db  0x00 ; '.'
0000000000019226         db  0x00 ; '.'
0000000000019227         db  0x00 ; '.'
0000000000019228         dd         0x0000004c                                  ; Length of the record
000000000001922c         dd         0x00000d6c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019230         db         0x40, 0xe1, 0xfe, 0xff                      ; begin 0x7370
0000000000019234         db         0x1c, 0x04, 2 dup (0x00)                    ; length 0x41c (end at 0x778c)
0000000000019238         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019239         db  0x42 ; 'B'
000000000001923a         db  0x0e ; '.'
000000000001923b         db  0x10 ; '.'
000000000001923c         db  0x8f ; '.'
000000000001923d         db  0x02 ; '.'
000000000001923e         db  0x42 ; 'B'
000000000001923f         db  0x0e ; '.'
0000000000019240         db  0x18 ; '.'
0000000000019241         db  0x8e ; '.'
0000000000019242         db  0x03 ; '.'
0000000000019243         db  0x42 ; 'B'
0000000000019244         db  0x0e ; '.'
0000000000019245         db  0x20 ; ' '
0000000000019246         db  0x8d ; '.'
0000000000019247         db  0x04 ; '.'
0000000000019248         db  0x42 ; 'B'
0000000000019249         db  0x0e ; '.'
000000000001924a         db  0x28 ; '('
000000000001924b         db  0x8c ; '.'
000000000001924c         db  0x05 ; '.'
000000000001924d         db  0x41 ; 'A'
000000000001924e         db  0x0e ; '.'
000000000001924f         db  0x30 ; '0'
0000000000019250         db  0x86 ; '.'
0000000000019251         db  0x06 ; '.'
0000000000019252         db  0x41 ; 'A'
0000000000019253         db  0x0e ; '.'
0000000000019254         db  0x38 ; '8'
0000000000019255         db  0x83 ; '.'
0000000000019256         db  0x07 ; '.'
0000000000019257         db  0x44 ; 'D'
0000000000019258         db  0x0e ; '.'
0000000000019259         db  0x60 ; '`'
000000000001925a         db  0x02 ; '.'
000000000001925b         db  0xe9 ; '.'
000000000001925c         db  0x0a ; '.'
000000000001925d         db  0x0e ; '.'
000000000001925e         db  0x38 ; '8'
000000000001925f         db  0x41 ; 'A'
0000000000019260         db  0x0e ; '.'
0000000000019261         db  0x30 ; '0'
0000000000019262         db  0x41 ; 'A'
0000000000019263         db  0x0e ; '.'
0000000000019264         db  0x28 ; '('
0000000000019265         db  0x42 ; 'B'
0000000000019266         db  0x0e ; '.'
0000000000019267         db  0x20 ; ' '
0000000000019268         db  0x42 ; 'B'
0000000000019269         db  0x0e ; '.'
000000000001926a         db  0x18 ; '.'
000000000001926b         db  0x42 ; 'B'
000000000001926c         db  0x0e ; '.'
000000000001926d         db  0x10 ; '.'
000000000001926e         db  0x42 ; 'B'
000000000001926f         db  0x0e ; '.'
0000000000019270         db  0x08 ; '.'
0000000000019271         db  0x47 ; 'G'
0000000000019272         db  0x0b ; '.'
0000000000019273         db  0x00 ; '.'
0000000000019274         db  0x00 ; '.'
0000000000019275         db  0x00 ; '.'
0000000000019276         db  0x00 ; '.'
0000000000019277         db  0x00 ; '.'
0000000000019278         dd         0x00000034                                  ; Length of the record
000000000001927c         dd         0x00000dbc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019280         db         0x10, 0xe5, 0xfe, 0xff                      ; begin 0x7790
0000000000019284         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0x780b)
0000000000019288         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019289         db  0x42 ; 'B'
000000000001928a         db  0x0e ; '.'
000000000001928b         db  0x10 ; '.'
000000000001928c         db  0x8c ; '.'
000000000001928d         db  0x02 ; '.'
000000000001928e         db  0x41 ; 'A'
000000000001928f         db  0x0e ; '.'
0000000000019290         db  0x18 ; '.'
0000000000019291         db  0x86 ; '.'
0000000000019292         db  0x03 ; '.'
0000000000019293         db  0x41 ; 'A'
0000000000019294         db  0x0e ; '.'
0000000000019295         db  0x20 ; ' '
0000000000019296         db  0x83 ; '.'
0000000000019297         db  0x04 ; '.'
0000000000019298         db  0x7d ; '}'
0000000000019299         db  0x0a ; '.'
000000000001929a         db  0x0e ; '.'
000000000001929b         db  0x18 ; '.'
000000000001929c         db  0x41 ; 'A'
000000000001929d         db  0x0e ; '.'
000000000001929e         db  0x10 ; '.'
000000000001929f         db  0x42 ; 'B'
00000000000192a0         db  0x0e ; '.'
00000000000192a1         db  0x08 ; '.'
00000000000192a2         db  0x44 ; 'D'
00000000000192a3         db  0x0b ; '.'
00000000000192a4         db  0x60 ; '`'
00000000000192a5         db  0x0a ; '.'
00000000000192a6         db  0x0e ; '.'
00000000000192a7         db  0x18 ; '.'
00000000000192a8         db  0x41 ; 'A'
00000000000192a9         db  0x0e ; '.'
00000000000192aa         db  0x10 ; '.'
00000000000192ab         db  0x42 ; 'B'
00000000000192ac         db  0x0e ; '.'
00000000000192ad         db  0x08 ; '.'
00000000000192ae         db  0x45 ; 'E'
00000000000192af         db  0x0b ; '.'
00000000000192b0         dd         0x00000034                                  ; Length of the record
00000000000192b4         dd         0x00000df4                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000192b8         db         0x58, 0xe5, 0xfe, 0xff                      ; begin 0x7810
00000000000192bc         db         0x7e, 0x02, 2 dup (0x00)                    ; length 0x27e (end at 0x7a8e)
00000000000192c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000192c1         db  0x42 ; 'B'
00000000000192c2         db  0x0e ; '.'
00000000000192c3         db  0x10 ; '.'
00000000000192c4         db  0x8c ; '.'
00000000000192c5         db  0x02 ; '.'
00000000000192c6         db  0x41 ; 'A'
00000000000192c7         db  0x0e ; '.'
00000000000192c8         db  0x18 ; '.'
00000000000192c9         db  0x86 ; '.'
00000000000192ca         db  0x03 ; '.'
00000000000192cb         db  0x43 ; 'C'
00000000000192cc         db  0x0e ; '.'
00000000000192cd         db  0x20 ; ' '
00000000000192ce         db  0x83 ; '.'
00000000000192cf         db  0x04 ; '.'
00000000000192d0         db  0x44 ; 'D'
00000000000192d1         db  0x0e ; '.'
00000000000192d2         db  0x70 ; 'p'
00000000000192d3         db  0x02 ; '.'
00000000000192d4         db  0xf0 ; '.'
00000000000192d5         db  0x0a ; '.'
00000000000192d6         db  0x0e ; '.'
00000000000192d7         db  0x20 ; ' '
00000000000192d8         db  0x41 ; 'A'
00000000000192d9         db  0x0e ; '.'
00000000000192da         db  0x18 ; '.'
00000000000192db         db  0x41 ; 'A'
00000000000192dc         db  0x0e ; '.'
00000000000192dd         db  0x10 ; '.'
00000000000192de         db  0x42 ; 'B'
00000000000192df         db  0x0e ; '.'
00000000000192e0         db  0x08 ; '.'
00000000000192e1         db  0x42 ; 'B'
00000000000192e2         db  0x0b ; '.'
00000000000192e3         db  0x00 ; '.'
00000000000192e4         db  0x00 ; '.'
00000000000192e5         db  0x00 ; '.'
00000000000192e6         db  0x00 ; '.'
00000000000192e7         db  0x00 ; '.'
00000000000192e8         dd         0x0000001c                                  ; Length of the record
00000000000192ec         dd         0x00000e2c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000192f0         db         0xa0, 0xe7, 0xfe, 0xff                      ; begin 0x7a90
00000000000192f4         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0x7ad0)
00000000000192f8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000192f9         db  0x44 ; 'D'
00000000000192fa         db  0x0e ; '.'
00000000000192fb         db  0x10 ; '.'
00000000000192fc         db  0x83 ; '.'
00000000000192fd         db  0x02 ; '.'
00000000000192fe         db  0x5a ; 'Z'
00000000000192ff         db  0x0a ; '.'
0000000000019300         db  0x0e ; '.'
0000000000019301         db  0x08 ; '.'
0000000000019302         db  0x4a ; 'J'
0000000000019303         db  0x0b ; '.'
0000000000019304         db  0x53 ; 'S'
0000000000019305         db  0x0e ; '.'
0000000000019306         db  0x08 ; '.'
0000000000019307         db  0x00 ; '.'
0000000000019308         dd         0x0000002c                                  ; Length of the record
000000000001930c         dd         0x00000e4c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019310         db         0xc0, 0xe7, 0xfe, 0xff                      ; begin 0x7ad0
0000000000019314         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x7b27)
0000000000019318         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019319         db  0x63 ; 'c'
000000000001931a         db  0x0e ; '.'
000000000001931b         db  0x10 ; '.'
000000000001931c         db  0x8c ; '.'
000000000001931d         db  0x02 ; '.'
000000000001931e         db  0x41 ; 'A'
000000000001931f         db  0x0e ; '.'
0000000000019320         db  0x18 ; '.'
0000000000019321         db  0x86 ; '.'
0000000000019322         db  0x03 ; '.'
0000000000019323         db  0x44 ; 'D'
0000000000019324         db  0x0e ; '.'
0000000000019325         db  0x20 ; ' '
0000000000019326         db  0x83 ; '.'
0000000000019327         db  0x04 ; '.'
0000000000019328         db  0x6b ; 'k'
0000000000019329         db  0x0e ; '.'
000000000001932a         db  0x18 ; '.'
000000000001932b         db  0x41 ; 'A'
000000000001932c         db  0x0e ; '.'
000000000001932d         db  0x10 ; '.'
000000000001932e         db  0x42 ; 'B'
000000000001932f         db  0x0e ; '.'
0000000000019330         db  0x08 ; '.'
0000000000019331         db  0x00 ; '.'
0000000000019332         db  0x00 ; '.'
0000000000019333         db  0x00 ; '.'
0000000000019334         db  0x00 ; '.'
0000000000019335         db  0x00 ; '.'
0000000000019336         db  0x00 ; '.'
0000000000019337         db  0x00 ; '.'
0000000000019338         dd         0x0000003c                                  ; Length of the record
000000000001933c         dd         0x00000e7c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019340         db         0xf0, 0xe7, 0xfe, 0xff                      ; begin 0x7b30
0000000000019344         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0x7bb3)
0000000000019348         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019349         db  0x42 ; 'B'
000000000001934a         db  0x0e ; '.'
000000000001934b         db  0x10 ; '.'
000000000001934c         db  0x8d ; '.'
000000000001934d         db  0x02 ; '.'
000000000001934e         db  0x42 ; 'B'
000000000001934f         db  0x0e ; '.'
0000000000019350         db  0x18 ; '.'
0000000000019351         db  0x8c ; '.'
0000000000019352         db  0x03 ; '.'
0000000000019353         db  0x44 ; 'D'
0000000000019354         db  0x0e ; '.'
0000000000019355         db  0x20 ; ' '
0000000000019356         db  0x86 ; '.'
0000000000019357         db  0x04 ; '.'
0000000000019358         db  0x41 ; 'A'
0000000000019359         db  0x0e ; '.'
000000000001935a         db  0x28 ; '('
000000000001935b         db  0x83 ; '.'
000000000001935c         db  0x05 ; '.'
000000000001935d         db  0x4a ; 'J'
000000000001935e         db  0x0e ; '.'
000000000001935f         db  0x40 ; '@'
0000000000019360         db  0x02 ; '.'
0000000000019361         db  0x64 ; 'd'
0000000000019362         db  0x0a ; '.'
0000000000019363         db  0x0e ; '.'
0000000000019364         db  0x28 ; '('
0000000000019365         db  0x41 ; 'A'
0000000000019366         db  0x0e ; '.'
0000000000019367         db  0x20 ; ' '
0000000000019368         db  0x41 ; 'A'
0000000000019369         db  0x0e ; '.'
000000000001936a         db  0x18 ; '.'
000000000001936b         db  0x42 ; 'B'
000000000001936c         db  0x0e ; '.'
000000000001936d         db  0x10 ; '.'
000000000001936e         db  0x42 ; 'B'
000000000001936f         db  0x0e ; '.'
0000000000019370         db  0x08 ; '.'
0000000000019371         db  0x41 ; 'A'
0000000000019372         db  0x0b ; '.'
0000000000019373         db  0x00 ; '.'
0000000000019374         db  0x00 ; '.'
0000000000019375         db  0x00 ; '.'
0000000000019376         db  0x00 ; '.'
0000000000019377         db  0x00 ; '.'
0000000000019378         dd         0x00000010                                  ; Length of the record
000000000001937c         dd         0x00000ebc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019380         db         0x40, 0xe8, 0xfe, 0xff                      ; begin 0x7bc0
0000000000019384         db         0x2f, 0x01, 2 dup (0x00)                    ; length 0x12f (end at 0x7cef)
0000000000019388         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019389         align      4
000000000001938c         dd         0x00000010                                  ; Length of the record
0000000000019390         dd         0x00000ed0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019394         db         0x5c, 0xe9, 0xfe, 0xff                      ; begin 0x7cf0
0000000000019398         db         0x1d, 3 dup (0x00)                          ; length 0x1d (end at 0x7d0d)
000000000001939c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001939d         align      4
00000000000193a4         dd         0x00000ee4                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000193a8         db         0x68, 0xe9, 0xfe, 0xff                      ; begin 0x7d10
00000000000193ac         db         0x2c, 0x02, 2 dup (0x00)                    ; length 0x22c (end at 0x7f3c)
00000000000193b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000193b1         db  0x42 ; 'B'
00000000000193b2         db  0x0e ; '.'
00000000000193b3         db  0x10 ; '.'
00000000000193b4         db  0x8f ; '.'
00000000000193b5         db  0x02 ; '.'
00000000000193b6         db  0x42 ; 'B'
00000000000193b7         db  0x0e ; '.'
00000000000193b8         db  0x18 ; '.'
00000000000193b9         db  0x8e ; '.'
00000000000193ba         db  0x03 ; '.'
00000000000193bb         db  0x45 ; 'E'
00000000000193bc         db  0x0e ; '.'
00000000000193bd         db  0x20 ; ' '
00000000000193be         db  0x8d ; '.'
00000000000193bf         db  0x04 ; '.'
00000000000193c0         db  0x42 ; 'B'
00000000000193c1         db  0x0e ; '.'
00000000000193c2         db  0x28 ; '('
00000000000193c3         db  0x8c ; '.'
00000000000193c4         db  0x05 ; '.'
00000000000193c5         db  0x45 ; 'E'
00000000000193c6         db  0x0e ; '.'
00000000000193c7         db  0x30 ; '0'
00000000000193c8         db  0x86 ; '.'
00000000000193c9         db  0x06 ; '.'
00000000000193ca         db  0x41 ; 'A'
00000000000193cb         db  0x0e ; '.'
00000000000193cc         db  0x38 ; '8'
00000000000193cd         db  0x83 ; '.'
00000000000193ce         db  0x07 ; '.'
00000000000193cf         db  0x47 ; 'G'
00000000000193d0         db  0x0e ; '.'
00000000000193d1         db  0x80 ; '.'
00000000000193d2         db  0x01 ; '.'
00000000000193d3         db  0x02 ; '.'
00000000000193d4         db  0xba ; '.'
00000000000193d5         db  0x0a ; '.'
00000000000193d6         db  0x0e ; '.'
00000000000193d7         db  0x38 ; '8'
00000000000193d8         db  0x46 ; 'F'
00000000000193d9         db  0x0e ; '.'
00000000000193da         db  0x30 ; '0'
00000000000193db         db  0x41 ; 'A'
00000000000193dc         db  0x0e ; '.'
00000000000193dd         db  0x28 ; '('
00000000000193de         db  0x42 ; 'B'
00000000000193df         db  0x0e ; '.'
00000000000193e0         db  0x20 ; ' '
00000000000193e1         db  0x42 ; 'B'
00000000000193e2         db  0x0e ; '.'
00000000000193e3         db  0x18 ; '.'
00000000000193e4         db  0x42 ; 'B'
00000000000193e5         db  0x0e ; '.'
00000000000193e6         db  0x10 ; '.'
00000000000193e7         db  0x42 ; 'B'
00000000000193e8         db  0x0e ; '.'
00000000000193e9         db  0x08 ; '.'
00000000000193ea         db  0x47 ; 'G'
00000000000193eb         db  0x0b ; '.'
00000000000193ec         db  0x02 ; '.'
00000000000193ed         db  0xe1 ; '.'
00000000000193ee         db  0x0a ; '.'
00000000000193ef         db  0x0e ; '.'
00000000000193f0         db  0x38 ; '8'
00000000000193f1         db  0x44 ; 'D'
00000000000193f2         db  0x0e ; '.'
00000000000193f3         db  0x30 ; '0'
00000000000193f4         db  0x43 ; 'C'
00000000000193f5         db  0x0e ; '.'
00000000000193f6         db  0x28 ; '('
00000000000193f7         db  0x42 ; 'B'
00000000000193f8         db  0x0e ; '.'
00000000000193f9         db  0x20 ; ' '
00000000000193fa         db  0x42 ; 'B'
00000000000193fb         db  0x0e ; '.'
00000000000193fc         db  0x18 ; '.'
00000000000193fd         db  0x42 ; 'B'
00000000000193fe         db  0x0e ; '.'
00000000000193ff         db  0x10 ; '.'
0000000000019400         db  0x42 ; 'B'
0000000000019401         db  0x0e ; '.'
0000000000019402         db  0x08 ; '.'
0000000000019403         db  0x48 ; 'H'
0000000000019404         db  0x0b ; '.'
0000000000019405         db  0x59 ; 'Y'
0000000000019406         db  0x0a ; '.'
0000000000019407         db  0x0e ; '.'
0000000000019408         db  0x38 ; '8'
0000000000019409         db  0x43 ; 'C'
000000000001940a         db  0x0e ; '.'
000000000001940b         db  0x30 ; '0'
000000000001940c         db  0x41 ; 'A'
000000000001940d         db  0x0e ; '.'
000000000001940e         db  0x28 ; '('
000000000001940f         db  0x42 ; 'B'
0000000000019410         db  0x0e ; '.'
0000000000019411         db  0x20 ; ' '
0000000000019412         db  0x42 ; 'B'
0000000000019413         db  0x0e ; '.'
0000000000019414         db  0x18 ; '.'
0000000000019415         db  0x42 ; 'B'
0000000000019416         db  0x0e ; '.'
0000000000019417         db  0x10 ; '.'
0000000000019418         db  0x42 ; 'B'
0000000000019419         db  0x0e ; '.'
000000000001941a         db  0x08 ; '.'
000000000001941b         db  0x4b ; 'K'
000000000001941c         db  0x0b ; '.'
000000000001941d         db  0x49 ; 'I'
000000000001941e         db  0x0e ; '.'
000000000001941f         db  0x38 ; '8'
0000000000019420         db  0x41 ; 'A'
0000000000019421         db  0x0e ; '.'
0000000000019422         db  0x30 ; '0'
0000000000019423         db  0x41 ; 'A'
0000000000019424         db  0x0e ; '.'
0000000000019425         db  0x28 ; '('
0000000000019426         db  0x48 ; 'H'
0000000000019427         db  0x0e ; '.'
0000000000019428         db  0x20 ; ' '
0000000000019429         db  0x44 ; 'D'
000000000001942a         db  0x0e ; '.'
000000000001942b         db  0x18 ; '.'
000000000001942c         db  0x42 ; 'B'
000000000001942d         db  0x0e ; '.'
000000000001942e         db  0x10 ; '.'
000000000001942f         db  0x42 ; 'B'
0000000000019430         db  0x0e ; '.'
0000000000019431         db  0x08 ; '.'
0000000000019432         db  0x00 ; '.'
0000000000019433         db  0x00 ; '.'
0000000000019434         dd         0x00000010                                  ; Length of the record
0000000000019438         dd         0x00000f78                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001943c         db         0x04, 0xeb, 0xfe, 0xff                      ; begin 0x7f40
0000000000019440         db         0x66, 3 dup (0x00)                          ; length 0x66 (end at 0x7fa6)
0000000000019444         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019445         align      8
0000000000019448         dd         0x00000028                                  ; Length of the record
000000000001944c         dd         0x00000f8c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019450         db         0x60, 0xeb, 0xfe, 0xff                      ; begin 0x7fb0
0000000000019454         db         0x6b, 3 dup (0x00)                          ; length 0x6b (end at 0x801b)
0000000000019458         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019459         db  0x42 ; 'B'
000000000001945a         db  0x0e ; '.'
000000000001945b         db  0x10 ; '.'
000000000001945c         db  0x8c ; '.'
000000000001945d         db  0x02 ; '.'
000000000001945e         db  0x44 ; 'D'
000000000001945f         db  0x0e ; '.'
0000000000019460         db  0x18 ; '.'
0000000000019461         db  0x86 ; '.'
0000000000019462         db  0x03 ; '.'
0000000000019463         db  0x44 ; 'D'
0000000000019464         db  0x0e ; '.'
0000000000019465         db  0x20 ; ' '
0000000000019466         db  0x83 ; '.'
0000000000019467         db  0x04 ; '.'
0000000000019468         db  0x02 ; '.'
0000000000019469         db  0x5d ; ']'
000000000001946a         db  0x0e ; '.'
000000000001946b         db  0x18 ; '.'
000000000001946c         db  0x41 ; 'A'
000000000001946d         db  0x0e ; '.'
000000000001946e         db  0x10 ; '.'
000000000001946f         db  0x42 ; 'B'
0000000000019470         db  0x0e ; '.'
0000000000019471         db  0x08 ; '.'
0000000000019472         db  0x00 ; '.'
0000000000019473         db  0x00 ; '.'
0000000000019474         dd         0x00000028                                  ; Length of the record
0000000000019478         dd         0x00000fb8                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001947c         db         0xa4, 0xeb, 0xfe, 0xff                      ; begin 0x8020
0000000000019480         db         0x51, 3 dup (0x00)                          ; length 0x51 (end at 0x8071)
0000000000019484         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019485         db  0x42 ; 'B'
0000000000019486         db  0x0e ; '.'
0000000000019487         db  0x10 ; '.'
0000000000019488         db  0x8c ; '.'
0000000000019489         db  0x02 ; '.'
000000000001948a         db  0x44 ; 'D'
000000000001948b         db  0x0e ; '.'
000000000001948c         db  0x18 ; '.'
000000000001948d         db  0x86 ; '.'
000000000001948e         db  0x03 ; '.'
000000000001948f         db  0x44 ; 'D'
0000000000019490         db  0x0e ; '.'
0000000000019491         db  0x20 ; ' '
0000000000019492         db  0x83 ; '.'
0000000000019493         db  0x04 ; '.'
0000000000019494         db  0x02 ; '.'
0000000000019495         db  0x43 ; 'C'
0000000000019496         db  0x0e ; '.'
0000000000019497         db  0x18 ; '.'
0000000000019498         db  0x41 ; 'A'
0000000000019499         db  0x0e ; '.'
000000000001949a         db  0x10 ; '.'
000000000001949b         db  0x42 ; 'B'
000000000001949c         db  0x0e ; '.'
000000000001949d         db  0x08 ; '.'
000000000001949e         db  0x00 ; '.'
000000000001949f         db  0x00 ; '.'
00000000000194a0         dd         0x00000030                                  ; Length of the record
00000000000194a4         dd         0x00000fe4                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000194a8         db         0xd8, 0xeb, 0xfe, 0xff                      ; begin 0x8080
00000000000194ac         db         0x9c, 3 dup (0x00)                          ; length 0x9c (end at 0x811c)
00000000000194b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000194b1         db  0x41 ; 'A'
00000000000194b2         db  0x0e ; '.'
00000000000194b3         db  0x10 ; '.'
00000000000194b4         db  0x86 ; '.'
00000000000194b5         db  0x02 ; '.'
00000000000194b6         db  0x41 ; 'A'
00000000000194b7         db  0x0e ; '.'
00000000000194b8         db  0x18 ; '.'
00000000000194b9         db  0x83 ; '.'
00000000000194ba         db  0x03 ; '.'
00000000000194bb         db  0x4a ; 'J'
00000000000194bc         db  0x0e ; '.'
00000000000194bd         db  0x20 ; ' '
00000000000194be         db  0x02 ; '.'
00000000000194bf         db  0x62 ; 'b'
00000000000194c0         db  0x0a ; '.'
00000000000194c1         db  0x0e ; '.'
00000000000194c2         db  0x18 ; '.'
00000000000194c3         db  0x43 ; 'C'
00000000000194c4         db  0x0e ; '.'
00000000000194c5         db  0x10 ; '.'
00000000000194c6         db  0x41 ; 'A'
00000000000194c7         db  0x0e ; '.'
00000000000194c8         db  0x08 ; '.'
00000000000194c9         db  0x46 ; 'F'
00000000000194ca         db  0x0b ; '.'
00000000000194cb         db  0x5c ; '\'
00000000000194cc         db  0x0e ; '.'
00000000000194cd         db  0x18 ; '.'
00000000000194ce         db  0x46 ; 'F'
00000000000194cf         db  0x0e ; '.'
00000000000194d0         db  0x10 ; '.'
00000000000194d1         db  0x41 ; 'A'
00000000000194d2         db  0x0e ; '.'
00000000000194d3         db  0x08 ; '.'
00000000000194d4         dd         0x00000028                                  ; Length of the record
00000000000194d8         dd         0x00001018                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000194dc         db         0x44, 0xec, 0xfe, 0xff                      ; begin 0x8120
00000000000194e0         db         0x64, 3 dup (0x00)                          ; length 0x64 (end at 0x8184)
00000000000194e4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000194e5         db  0x41 ; 'A'
00000000000194e6         db  0x0e ; '.'
00000000000194e7         db  0x10 ; '.'
00000000000194e8         db  0x86 ; '.'
00000000000194e9         db  0x02 ; '.'
00000000000194ea         db  0x41 ; 'A'
00000000000194eb         db  0x0e ; '.'
00000000000194ec         db  0x18 ; '.'
00000000000194ed         db  0x83 ; '.'
00000000000194ee         db  0x03 ; '.'
00000000000194ef         db  0x4a ; 'J'
00000000000194f0         db  0x0e ; '.'
00000000000194f1         db  0x20 ; ' '
00000000000194f2         db  0x62 ; 'b'
00000000000194f3         db  0x0a ; '.'
00000000000194f4         db  0x0e ; '.'
00000000000194f5         db  0x18 ; '.'
00000000000194f6         db  0x41 ; 'A'
00000000000194f7         db  0x0e ; '.'
00000000000194f8         db  0x10 ; '.'
00000000000194f9         db  0x41 ; 'A'
00000000000194fa         db  0x0e ; '.'
00000000000194fb         db  0x08 ; '.'
00000000000194fc         db  0x48 ; 'H'
00000000000194fd         db  0x0b ; '.'
00000000000194fe         db  0x00 ; '.'
00000000000194ff         db  0x00 ; '.'
0000000000019500         dd         0x00000034                                  ; Length of the record
0000000000019504         dd         0x00001044                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019508         db         0x88, 0xec, 0xfe, 0xff                      ; begin 0x8190
000000000001950c         db         0x2c, 0x01, 2 dup (0x00)                    ; length 0x12c (end at 0x82bc)
0000000000019510         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019511         db  0x41 ; 'A'
0000000000019512         db  0x0e ; '.'
0000000000019513         db  0x10 ; '.'
0000000000019514         db  0x86 ; '.'
0000000000019515         db  0x02 ; '.'
0000000000019516         db  0x41 ; 'A'
0000000000019517         db  0x0e ; '.'
0000000000019518         db  0x18 ; '.'
0000000000019519         db  0x83 ; '.'
000000000001951a         db  0x03 ; '.'
000000000001951b         db  0x4a ; 'J'
000000000001951c         db  0x0e ; '.'
000000000001951d         db  0x20 ; ' '
000000000001951e         db  0x66 ; 'f'
000000000001951f         db  0x0a ; '.'
0000000000019520         db  0x0e ; '.'
0000000000019521         db  0x18 ; '.'
0000000000019522         db  0x41 ; 'A'
0000000000019523         db  0x0e ; '.'
0000000000019524         db  0x10 ; '.'
0000000000019525         db  0x41 ; 'A'
0000000000019526         db  0x0e ; '.'
0000000000019527         db  0x08 ; '.'
0000000000019528         db  0x44 ; 'D'
0000000000019529         db  0x0b ; '.'
000000000001952a         db  0x6d ; 'm'
000000000001952b         db  0x0a ; '.'
000000000001952c         db  0x0e ; '.'
000000000001952d         db  0x18 ; '.'
000000000001952e         db  0x46 ; 'F'
000000000001952f         db  0x0e ; '.'
0000000000019530         db  0x10 ; '.'
0000000000019531         db  0x41 ; 'A'
0000000000019532         db  0x0e ; '.'
0000000000019533         db  0x08 ; '.'
0000000000019534         db  0x44 ; 'D'
0000000000019535         db  0x0b ; '.'
0000000000019536         db  0x00 ; '.'
0000000000019537         db  0x00 ; '.'
0000000000019538         dd         0x0000004c                                  ; Length of the record
000000000001953c         dd         0x0000107c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019540         db         0x80, 0xed, 0xfe, 0xff                      ; begin 0x82c0
0000000000019544         db         0xec, 3 dup (0x00)                          ; length 0xec (end at 0x83ac)
0000000000019548         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019549         db  0x42 ; 'B'
000000000001954a         db  0x0e ; '.'
000000000001954b         db  0x10 ; '.'
000000000001954c         db  0x8e ; '.'
000000000001954d         db  0x02 ; '.'
000000000001954e         db  0x42 ; 'B'
000000000001954f         db  0x0e ; '.'
0000000000019550         db  0x18 ; '.'
0000000000019551         db  0x8d ; '.'
0000000000019552         db  0x03 ; '.'
0000000000019553         db  0x45 ; 'E'
0000000000019554         db  0x0e ; '.'
0000000000019555         db  0x20 ; ' '
0000000000019556         db  0x8c ; '.'
0000000000019557         db  0x04 ; '.'
0000000000019558         db  0x41 ; 'A'
0000000000019559         db  0x0e ; '.'
000000000001955a         db  0x28 ; '('
000000000001955b         db  0x86 ; '.'
000000000001955c         db  0x05 ; '.'
000000000001955d         db  0x44 ; 'D'
000000000001955e         db  0x0e ; '.'
000000000001955f         db  0x30 ; '0'
0000000000019560         db  0x83 ; '.'
0000000000019561         db  0x06 ; '.'
0000000000019562         db  0x02 ; '.'
0000000000019563         db  0x71 ; 'q'
0000000000019564         db  0x0a ; '.'
0000000000019565         db  0x0e ; '.'
0000000000019566         db  0x28 ; '('
0000000000019567         db  0x46 ; 'F'
0000000000019568         db  0x0e ; '.'
0000000000019569         db  0x20 ; ' '
000000000001956a         db  0x42 ; 'B'
000000000001956b         db  0x0e ; '.'
000000000001956c         db  0x18 ; '.'
000000000001956d         db  0x42 ; 'B'
000000000001956e         db  0x0e ; '.'
000000000001956f         db  0x10 ; '.'
0000000000019570         db  0x42 ; 'B'
0000000000019571         db  0x0e ; '.'
0000000000019572         db  0x08 ; '.'
0000000000019573         db  0x45 ; 'E'
0000000000019574         db  0x0b ; '.'
0000000000019575         db  0x6e ; 'n'
0000000000019576         db  0x0a ; '.'
0000000000019577         db  0x0e ; '.'
0000000000019578         db  0x28 ; '('
0000000000019579         db  0x41 ; 'A'
000000000001957a         db  0x0e ; '.'
000000000001957b         db  0x20 ; ' '
000000000001957c         db  0x42 ; 'B'
000000000001957d         db  0x0e ; '.'
000000000001957e         db  0x18 ; '.'
000000000001957f         db  0x42 ; 'B'
0000000000019580         db  0x0e ; '.'
0000000000019581         db  0x10 ; '.'
0000000000019582         db  0x42 ; 'B'
0000000000019583         db  0x0e ; '.'
0000000000019584         db  0x08 ; '.'
0000000000019585         db  0x41 ; 'A'
0000000000019586         db  0x0b ; '.'
0000000000019587         db  0x00 ; '.'
0000000000019588         dd         0x0000002c                                  ; Length of the record
000000000001958c         dd         0x000010cc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019590         db         0x20, 0xee, 0xfe, 0xff                      ; begin 0x83b0
0000000000019594         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0x841e)
0000000000019598         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019599         db  0x42 ; 'B'
000000000001959a         db  0x0e ; '.'
000000000001959b         db  0x10 ; '.'
000000000001959c         db  0x8c ; '.'
000000000001959d         db  0x02 ; '.'
000000000001959e         db  0x49 ; 'I'
000000000001959f         db  0x0e ; '.'
00000000000195a0         db  0x18 ; '.'
00000000000195a1         db  0x86 ; '.'
00000000000195a2         db  0x03 ; '.'
00000000000195a3         db  0x49 ; 'I'
00000000000195a4         db  0x0e ; '.'
00000000000195a5         db  0x20 ; ' '
00000000000195a6         db  0x83 ; '.'
00000000000195a7         db  0x04 ; '.'
00000000000195a8         db  0x02 ; '.'
00000000000195a9         db  0x4a ; 'J'
00000000000195aa         db  0x0a ; '.'
00000000000195ab         db  0x0e ; '.'
00000000000195ac         db  0x18 ; '.'
00000000000195ad         db  0x41 ; 'A'
00000000000195ae         db  0x0e ; '.'
00000000000195af         db  0x10 ; '.'
00000000000195b0         db  0x42 ; 'B'
00000000000195b1         db  0x0e ; '.'
00000000000195b2         db  0x08 ; '.'
00000000000195b3         db  0x47 ; 'G'
00000000000195b4         db  0x0b ; '.'
00000000000195b5         db  0x00 ; '.'
00000000000195b6         db  0x00 ; '.'
00000000000195b7         db  0x00 ; '.'
00000000000195b8         dd         0x00000048                                  ; Length of the record
00000000000195bc         dd         0x000010fc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000195c0         db         0x60, 0xee, 0xfe, 0xff                      ; begin 0x8420
00000000000195c4         db         0xc3, 0x01, 2 dup (0x00)                    ; length 0x1c3 (end at 0x85e3)
00000000000195c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000195c9         db  0x42 ; 'B'
00000000000195ca         db  0x0e ; '.'
00000000000195cb         db  0x10 ; '.'
00000000000195cc         db  0x8f ; '.'
00000000000195cd         db  0x02 ; '.'
00000000000195ce         db  0x42 ; 'B'
00000000000195cf         db  0x0e ; '.'
00000000000195d0         db  0x18 ; '.'
00000000000195d1         db  0x8e ; '.'
00000000000195d2         db  0x03 ; '.'
00000000000195d3         db  0x42 ; 'B'
00000000000195d4         db  0x0e ; '.'
00000000000195d5         db  0x20 ; ' '
00000000000195d6         db  0x8d ; '.'
00000000000195d7         db  0x04 ; '.'
00000000000195d8         db  0x42 ; 'B'
00000000000195d9         db  0x0e ; '.'
00000000000195da         db  0x28 ; '('
00000000000195db         db  0x8c ; '.'
00000000000195dc         db  0x05 ; '.'
00000000000195dd         db  0x41 ; 'A'
00000000000195de         db  0x0e ; '.'
00000000000195df         db  0x30 ; '0'
00000000000195e0         db  0x86 ; '.'
00000000000195e1         db  0x06 ; '.'
00000000000195e2         db  0x41 ; 'A'
00000000000195e3         db  0x0e ; '.'
00000000000195e4         db  0x38 ; '8'
00000000000195e5         db  0x83 ; '.'
00000000000195e6         db  0x07 ; '.'
00000000000195e7         db  0x47 ; 'G'
00000000000195e8         db  0x0e ; '.'
00000000000195e9         db  0xa0 ; '.'
00000000000195ea         db  0x01 ; '.'
00000000000195eb         db  0x02 ; '.'
00000000000195ec         db  0xd3 ; '.'
00000000000195ed         db  0x0a ; '.'
00000000000195ee         db  0x0e ; '.'
00000000000195ef         db  0x38 ; '8'
00000000000195f0         db  0x41 ; 'A'
00000000000195f1         db  0x0e ; '.'
00000000000195f2         db  0x30 ; '0'
00000000000195f3         db  0x41 ; 'A'
00000000000195f4         db  0x0e ; '.'
00000000000195f5         db  0x28 ; '('
00000000000195f6         db  0x42 ; 'B'
00000000000195f7         db  0x0e ; '.'
00000000000195f8         db  0x20 ; ' '
00000000000195f9         db  0x42 ; 'B'
00000000000195fa         db  0x0e ; '.'
00000000000195fb         db  0x18 ; '.'
00000000000195fc         db  0x42 ; 'B'
00000000000195fd         db  0x0e ; '.'
00000000000195fe         db  0x10 ; '.'
00000000000195ff         db  0x42 ; 'B'
0000000000019600         db  0x0e ; '.'
0000000000019601         db  0x08 ; '.'
0000000000019602         db  0x42 ; 'B'
0000000000019603         db  0x0b ; '.'
0000000000019604         dd         0x00000048                                  ; Length of the record
0000000000019608         dd         0x00001148                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001960c         db         0xe4, 0xef, 0xfe, 0xff                      ; begin 0x85f0
0000000000019610         db         0x15, 0x06, 2 dup (0x00)                    ; length 0x615 (end at 0x8c05)
0000000000019614         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019615         db  0x42 ; 'B'
0000000000019616         db  0x0e ; '.'
0000000000019617         db  0x10 ; '.'
0000000000019618         db  0x8f ; '.'
0000000000019619         db  0x02 ; '.'
000000000001961a         db  0x42 ; 'B'
000000000001961b         db  0x0e ; '.'
000000000001961c         db  0x18 ; '.'
000000000001961d         db  0x8e ; '.'
000000000001961e         db  0x03 ; '.'
000000000001961f         db  0x45 ; 'E'
0000000000019620         db  0x0e ; '.'
0000000000019621         db  0x20 ; ' '
0000000000019622         db  0x8d ; '.'
0000000000019623         db  0x04 ; '.'
0000000000019624         db  0x42 ; 'B'
0000000000019625         db  0x0e ; '.'
0000000000019626         db  0x28 ; '('
0000000000019627         db  0x8c ; '.'
0000000000019628         db  0x05 ; '.'
0000000000019629         db  0x41 ; 'A'
000000000001962a         db  0x0e ; '.'
000000000001962b         db  0x30 ; '0'
000000000001962c         db  0x86 ; '.'
000000000001962d         db  0x06 ; '.'
000000000001962e         db  0x41 ; 'A'
000000000001962f         db  0x0e ; '.'
0000000000019630         db  0x38 ; '8'
0000000000019631         db  0x83 ; '.'
0000000000019632         db  0x07 ; '.'
0000000000019633         db  0x47 ; 'G'
0000000000019634         db  0x0e ; '.'
0000000000019635         db  0xe0 ; '.'
0000000000019636         db  0x01 ; '.'
0000000000019637         db  0x02 ; '.'
0000000000019638         db  0x69 ; 'i'
0000000000019639         db  0x0a ; '.'
000000000001963a         db  0x0e ; '.'
000000000001963b         db  0x38 ; '8'
000000000001963c         db  0x41 ; 'A'
000000000001963d         db  0x0e ; '.'
000000000001963e         db  0x30 ; '0'
000000000001963f         db  0x41 ; 'A'
0000000000019640         db  0x0e ; '.'
0000000000019641         db  0x28 ; '('
0000000000019642         db  0x42 ; 'B'
0000000000019643         db  0x0e ; '.'
0000000000019644         db  0x20 ; ' '
0000000000019645         db  0x42 ; 'B'
0000000000019646         db  0x0e ; '.'
0000000000019647         db  0x18 ; '.'
0000000000019648         db  0x42 ; 'B'
0000000000019649         db  0x0e ; '.'
000000000001964a         db  0x10 ; '.'
000000000001964b         db  0x42 ; 'B'
000000000001964c         db  0x0e ; '.'
000000000001964d         db  0x08 ; '.'
000000000001964e         db  0x49 ; 'I'
000000000001964f         db  0x0b ; '.'
0000000000019650         dd         0x00000058                                  ; Length of the record
0000000000019654         dd         0x00001194                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019658         db         0xb8, 0xf5, 0xfe, 0xff                      ; begin 0x8c10
000000000001965c         db         0x4e, 0x01, 2 dup (0x00)                    ; length 0x14e (end at 0x8d5e)
0000000000019660         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019661         db  0x41 ; 'A'
0000000000019662         db  0x0e ; '.'
0000000000019663         db  0x10 ; '.'
0000000000019664         db  0x86 ; '.'
0000000000019665         db  0x02 ; '.'
0000000000019666         db  0x41 ; 'A'
0000000000019667         db  0x0e ; '.'
0000000000019668         db  0x18 ; '.'
0000000000019669         db  0x83 ; '.'
000000000001966a         db  0x03 ; '.'
000000000001966b         db  0x4e ; 'N'
000000000001966c         db  0x0e ; '.'
000000000001966d         db  0x20 ; ' '
000000000001966e         db  0x02 ; '.'
000000000001966f         db  0x83 ; '.'
0000000000019670         db  0x0a ; '.'
0000000000019671         db  0x0e ; '.'
0000000000019672         db  0x18 ; '.'
0000000000019673         db  0x41 ; 'A'
0000000000019674         db  0x0e ; '.'
0000000000019675         db  0x10 ; '.'
0000000000019676         db  0x41 ; 'A'
0000000000019677         db  0x0e ; '.'
0000000000019678         db  0x08 ; '.'
0000000000019679         db  0x4b ; 'K'
000000000001967a         db  0x0b ; '.'
000000000001967b         db  0x02 ; '.'
000000000001967c         db  0x61 ; 'a'
000000000001967d         db  0x0a ; '.'
000000000001967e         db  0x0e ; '.'
000000000001967f         db  0x18 ; '.'
0000000000019680         db  0x43 ; 'C'
0000000000019681         db  0x0e ; '.'
0000000000019682         db  0x10 ; '.'
0000000000019683         db  0x41 ; 'A'
0000000000019684         db  0x0e ; '.'
0000000000019685         db  0x08 ; '.'
0000000000019686         db  0x4b ; 'K'
0000000000019687         db  0x0b ; '.'
0000000000019688         db  0x4c ; 'L'
0000000000019689         db  0x0a ; '.'
000000000001968a         db  0x0e ; '.'
000000000001968b         db  0x18 ; '.'
000000000001968c         db  0x43 ; 'C'
000000000001968d         db  0x0e ; '.'
000000000001968e         db  0x10 ; '.'
000000000001968f         db  0x41 ; 'A'
0000000000019690         db  0x0e ; '.'
0000000000019691         db  0x08 ; '.'
0000000000019692         db  0x48 ; 'H'
0000000000019693         db  0x0b ; '.'
0000000000019694         db  0x49 ; 'I'
0000000000019695         db  0x0a ; '.'
0000000000019696         db  0x0e ; '.'
0000000000019697         db  0x18 ; '.'
0000000000019698         db  0x43 ; 'C'
0000000000019699         db  0x0e ; '.'
000000000001969a         db  0x10 ; '.'
000000000001969b         db  0x41 ; 'A'
000000000001969c         db  0x0e ; '.'
000000000001969d         db  0x08 ; '.'
000000000001969e         db  0x4b ; 'K'
000000000001969f         db  0x0b ; '.'
00000000000196a0         db  0x49 ; 'I'
00000000000196a1         db  0x0e ; '.'
00000000000196a2         db  0x18 ; '.'
00000000000196a3         db  0x43 ; 'C'
00000000000196a4         db  0x0e ; '.'
00000000000196a5         db  0x10 ; '.'
00000000000196a6         db  0x41 ; 'A'
00000000000196a7         db  0x0e ; '.'
00000000000196a8         db  0x08 ; '.'
00000000000196a9         db  0x00 ; '.'
00000000000196aa         db  0x00 ; '.'
00000000000196ab         db  0x00 ; '.'
00000000000196ac         dd         0x00000028                                  ; Length of the record
00000000000196b0         dd         0x000011f0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000196b4         db         0xac, 0xf6, 0xfe, 0xff                      ; begin 0x8d60
00000000000196b8         db         0x86, 3 dup (0x00)                          ; length 0x86 (end at 0x8de6)
00000000000196bc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000196bd         db  0x42 ; 'B'
00000000000196be         db  0x0e ; '.'
00000000000196bf         db  0x10 ; '.'
00000000000196c0         db  0x8c ; '.'
00000000000196c1         db  0x02 ; '.'
00000000000196c2         db  0x41 ; 'A'
00000000000196c3         db  0x0e ; '.'
00000000000196c4         db  0x18 ; '.'
00000000000196c5         db  0x86 ; '.'
00000000000196c6         db  0x03 ; '.'
00000000000196c7         db  0x44 ; 'D'
00000000000196c8         db  0x0e ; '.'
00000000000196c9         db  0x20 ; ' '
00000000000196ca         db  0x83 ; '.'
00000000000196cb         db  0x04 ; '.'
00000000000196cc         db  0x70 ; 'p'
00000000000196cd         db  0x0a ; '.'
00000000000196ce         db  0x0e ; '.'
00000000000196cf         db  0x18 ; '.'
00000000000196d0         db  0x41 ; 'A'
00000000000196d1         db  0x0e ; '.'
00000000000196d2         db  0x10 ; '.'
00000000000196d3         db  0x42 ; 'B'
00000000000196d4         db  0x0e ; '.'
00000000000196d5         db  0x08 ; '.'
00000000000196d6         db  0x46 ; 'F'
00000000000196d7         db  0x0b ; '.'
00000000000196d8         dd         0x00000018                                  ; Length of the record
00000000000196dc         dd         0x0000121c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000196e0         db         0x10, 0xf7, 0xfe, 0xff                      ; begin 0x8df0
00000000000196e4         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x8e20)
00000000000196e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000196e9         db  0x41 ; 'A'
00000000000196ea         db  0x0e ; '.'
00000000000196eb         db  0x10 ; '.'
00000000000196ec         db  0x83 ; '.'
00000000000196ed         db  0x02 ; '.'
00000000000196ee         db  0x6a ; 'j'
00000000000196ef         db  0x0e ; '.'
00000000000196f0         db  0x08 ; '.'
00000000000196f1         db  0x00 ; '.'
00000000000196f2         db  0x00 ; '.'
00000000000196f3         db  0x00 ; '.'
00000000000196f4         dd         0x00000010                                  ; Length of the record
00000000000196f8         dd         0x00001238                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000196fc         db         0x24, 0xf7, 0xfe, 0xff                      ; begin 0x8e20
0000000000019700         db         0x25, 3 dup (0x00)                          ; length 0x25 (end at 0x8e45)
0000000000019704         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019705         align      8
0000000000019708         dd         0x00000014                                  ; Length of the record
000000000001970c         dd         0x0000124c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019710         db         0x40, 0xf7, 0xfe, 0xff                      ; begin 0x8e50
0000000000019714         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x8e64)
0000000000019718         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019719         db  0x48 ; 'H'
000000000001971a         db  0x0e ; '.'
000000000001971b         db  0x10 ; '.'
000000000001971c         db  0x4b ; 'K'
000000000001971d         db  0x0e ; '.'
000000000001971e         db  0x08 ; '.'
000000000001971f         db  0x00 ; '.'
0000000000019720         dd         0x00000048                                  ; Length of the record
0000000000019724         dd         0x00001264                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019728         db         0x48, 0xf7, 0xfe, 0xff                      ; begin 0x8e70
000000000001972c         db         0xce, 0x01, 2 dup (0x00)                    ; length 0x1ce (end at 0x903e)
0000000000019730         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019731         db  0x42 ; 'B'
0000000000019732         db  0x0e ; '.'
0000000000019733         db  0x10 ; '.'
0000000000019734         db  0x8f ; '.'
0000000000019735         db  0x02 ; '.'
0000000000019736         db  0x42 ; 'B'
0000000000019737         db  0x0e ; '.'
0000000000019738         db  0x18 ; '.'
0000000000019739         db  0x8e ; '.'
000000000001973a         db  0x03 ; '.'
000000000001973b         db  0x45 ; 'E'
000000000001973c         db  0x0e ; '.'
000000000001973d         db  0x20 ; ' '
000000000001973e         db  0x8d ; '.'
000000000001973f         db  0x04 ; '.'
0000000000019740         db  0x42 ; 'B'
0000000000019741         db  0x0e ; '.'
0000000000019742         db  0x28 ; '('
0000000000019743         db  0x8c ; '.'
0000000000019744         db  0x05 ; '.'
0000000000019745         db  0x41 ; 'A'
0000000000019746         db  0x0e ; '.'
0000000000019747         db  0x30 ; '0'
0000000000019748         db  0x86 ; '.'
0000000000019749         db  0x06 ; '.'
000000000001974a         db  0x41 ; 'A'
000000000001974b         db  0x0e ; '.'
000000000001974c         db  0x38 ; '8'
000000000001974d         db  0x83 ; '.'
000000000001974e         db  0x07 ; '.'
000000000001974f         db  0x47 ; 'G'
0000000000019750         db  0x0e ; '.'
0000000000019751         db  0x50 ; 'P'
0000000000019752         db  0x02 ; '.'
0000000000019753         db  0xac ; '.'
0000000000019754         db  0x0a ; '.'
0000000000019755         db  0x0e ; '.'
0000000000019756         db  0x38 ; '8'
0000000000019757         db  0x41 ; 'A'
0000000000019758         db  0x0e ; '.'
0000000000019759         db  0x30 ; '0'
000000000001975a         db  0x41 ; 'A'
000000000001975b         db  0x0e ; '.'
000000000001975c         db  0x28 ; '('
000000000001975d         db  0x42 ; 'B'
000000000001975e         db  0x0e ; '.'
000000000001975f         db  0x20 ; ' '
0000000000019760         db  0x42 ; 'B'
0000000000019761         db  0x0e ; '.'
0000000000019762         db  0x18 ; '.'
0000000000019763         db  0x42 ; 'B'
0000000000019764         db  0x0e ; '.'
0000000000019765         db  0x10 ; '.'
0000000000019766         db  0x42 ; 'B'
0000000000019767         db  0x0e ; '.'
0000000000019768         db  0x08 ; '.'
0000000000019769         db  0x46 ; 'F'
000000000001976a         db  0x0b ; '.'
000000000001976b         db  0x00 ; '.'
000000000001976c         dd         0x00000034                                  ; Length of the record
0000000000019770         dd         0x000012b0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019774         db         0xcc, 0xf8, 0xfe, 0xff                      ; begin 0x9040
0000000000019778         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x90df)
000000000001977c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001977d         db  0x42 ; 'B'
000000000001977e         db  0x0e ; '.'
000000000001977f         db  0x10 ; '.'
0000000000019780         db  0x8d ; '.'
0000000000019781         db  0x02 ; '.'
0000000000019782         db  0x42 ; 'B'
0000000000019783         db  0x0e ; '.'
0000000000019784         db  0x18 ; '.'
0000000000019785         db  0x8c ; '.'
0000000000019786         db  0x03 ; '.'
0000000000019787         db  0x44 ; 'D'
0000000000019788         db  0x0e ; '.'
0000000000019789         db  0x20 ; ' '
000000000001978a         db  0x86 ; '.'
000000000001978b         db  0x04 ; '.'
000000000001978c         db  0x41 ; 'A'
000000000001978d         db  0x0e ; '.'
000000000001978e         db  0x28 ; '('
000000000001978f         db  0x83 ; '.'
0000000000019790         db  0x05 ; '.'
0000000000019791         db  0x51 ; 'Q'
0000000000019792         db  0x0e ; '.'
0000000000019793         db  0x30 ; '0'
0000000000019794         db  0x02 ; '.'
0000000000019795         db  0x7e ; '~'
0000000000019796         db  0x0e ; '.'
0000000000019797         db  0x28 ; '('
0000000000019798         db  0x41 ; 'A'
0000000000019799         db  0x0e ; '.'
000000000001979a         db  0x20 ; ' '
000000000001979b         db  0x41 ; 'A'
000000000001979c         db  0x0e ; '.'
000000000001979d         db  0x18 ; '.'
000000000001979e         db  0x42 ; 'B'
000000000001979f         db  0x0e ; '.'
00000000000197a0         db  0x10 ; '.'
00000000000197a1         db  0x42 ; 'B'
00000000000197a2         db  0x0e ; '.'
00000000000197a3         db  0x08 ; '.'
00000000000197a4         dd         0x00000048                                  ; Length of the record
00000000000197a8         dd         0x000012e8                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000197ac         db         0x34, 0xf9, 0xfe, 0xff                      ; begin 0x90e0
00000000000197b0         db         0x75, 0x02, 2 dup (0x00)                    ; length 0x275 (end at 0x9355)
00000000000197b4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000197b5         db  0x42 ; 'B'
00000000000197b6         db  0x0e ; '.'
00000000000197b7         db  0x10 ; '.'
00000000000197b8         db  0x8f ; '.'
00000000000197b9         db  0x02 ; '.'
00000000000197ba         db  0x42 ; 'B'
00000000000197bb         db  0x0e ; '.'
00000000000197bc         db  0x18 ; '.'
00000000000197bd         db  0x8e ; '.'
00000000000197be         db  0x03 ; '.'
00000000000197bf         db  0x45 ; 'E'
00000000000197c0         db  0x0e ; '.'
00000000000197c1         db  0x20 ; ' '
00000000000197c2         db  0x8d ; '.'
00000000000197c3         db  0x04 ; '.'
00000000000197c4         db  0x42 ; 'B'
00000000000197c5         db  0x0e ; '.'
00000000000197c6         db  0x28 ; '('
00000000000197c7         db  0x8c ; '.'
00000000000197c8         db  0x05 ; '.'
00000000000197c9         db  0x44 ; 'D'
00000000000197ca         db  0x0e ; '.'
00000000000197cb         db  0x30 ; '0'
00000000000197cc         db  0x86 ; '.'
00000000000197cd         db  0x06 ; '.'
00000000000197ce         db  0x41 ; 'A'
00000000000197cf         db  0x0e ; '.'
00000000000197d0         db  0x38 ; '8'
00000000000197d1         db  0x83 ; '.'
00000000000197d2         db  0x07 ; '.'
00000000000197d3         db  0x4a ; 'J'
00000000000197d4         db  0x0e ; '.'
00000000000197d5         db  0x50 ; 'P'
00000000000197d6         db  0x03 ; '.'
00000000000197d7         db  0x1a ; '.'
00000000000197d8         db  0x01 ; '.'
00000000000197d9         db  0x0a ; '.'
00000000000197da         db  0x0e ; '.'
00000000000197db         db  0x38 ; '8'
00000000000197dc         db  0x41 ; 'A'
00000000000197dd         db  0x0e ; '.'
00000000000197de         db  0x30 ; '0'
00000000000197df         db  0x41 ; 'A'
00000000000197e0         db  0x0e ; '.'
00000000000197e1         db  0x28 ; '('
00000000000197e2         db  0x42 ; 'B'
00000000000197e3         db  0x0e ; '.'
00000000000197e4         db  0x20 ; ' '
00000000000197e5         db  0x42 ; 'B'
00000000000197e6         db  0x0e ; '.'
00000000000197e7         db  0x18 ; '.'
00000000000197e8         db  0x42 ; 'B'
00000000000197e9         db  0x0e ; '.'
00000000000197ea         db  0x10 ; '.'
00000000000197eb         db  0x42 ; 'B'
00000000000197ec         db  0x0e ; '.'
00000000000197ed         db  0x08 ; '.'
00000000000197ee         db  0x42 ; 'B'
00000000000197ef         db  0x0b ; '.'
00000000000197f0         dd         0x00000018                                  ; Length of the record
00000000000197f4         dd         0x00001334                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000197f8         db         0x68, 0xfb, 0xfe, 0xff                      ; begin 0x9360
00000000000197fc         db         0x59, 3 dup (0x00)                          ; length 0x59 (end at 0x93b9)
0000000000019800         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019801         db  0x41 ; 'A'
0000000000019802         db  0x0e ; '.'
0000000000019803         db  0x10 ; '.'
0000000000019804         db  0x83 ; '.'
0000000000019805         db  0x02 ; '.'
0000000000019806         db  0x02 ; '.'
0000000000019807         db  0x53 ; 'S'
0000000000019808         db  0x0e ; '.'
0000000000019809         db  0x08 ; '.'
000000000001980a         db  0x00 ; '.'
000000000001980b         db  0x00 ; '.'
000000000001980c         dd         0x0000001c                                  ; Length of the record
0000000000019810         dd         0x00001350                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019814         db         0xac, 0xfb, 0xfe, 0xff                      ; begin 0x93c0
0000000000019818         db         0x32, 3 dup (0x00)                          ; length 0x32 (end at 0x93f2)
000000000001981c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001981d         db  0x41 ; 'A'
000000000001981e         db  0x0e ; '.'
000000000001981f         db  0x10 ; '.'
0000000000019820         db  0x83 ; '.'
0000000000019821         db  0x02 ; '.'
0000000000019822         db  0x5f ; '_'
0000000000019823         db  0x0a ; '.'
0000000000019824         db  0x0e ; '.'
0000000000019825         db  0x08 ; '.'
0000000000019826         db  0x48 ; 'H'
0000000000019827         db  0x0b ; '.'
0000000000019828         db  0x45 ; 'E'
0000000000019829         db  0x0e ; '.'
000000000001982a         db  0x08 ; '.'
000000000001982b         db  0x00 ; '.'
000000000001982c         dd         0x00000038                                  ; Length of the record
0000000000019830         dd         0x00001370                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019834         db         0xcc, 0xfb, 0xfe, 0xff                      ; begin 0x9400
0000000000019838         db         0x5f, 0x01, 2 dup (0x00)                    ; length 0x15f (end at 0x955f)
000000000001983c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001983d         db  0x42 ; 'B'
000000000001983e         db  0x0e ; '.'
000000000001983f         db  0x10 ; '.'
0000000000019840         db  0x8e ; '.'
0000000000019841         db  0x02 ; '.'
0000000000019842         db  0x42 ; 'B'
0000000000019843         db  0x0e ; '.'
0000000000019844         db  0x18 ; '.'
0000000000019845         db  0x8d ; '.'
0000000000019846         db  0x03 ; '.'
0000000000019847         db  0x42 ; 'B'
0000000000019848         db  0x0e ; '.'
0000000000019849         db  0x20 ; ' '
000000000001984a         db  0x8c ; '.'
000000000001984b         db  0x04 ; '.'
000000000001984c         db  0x44 ; 'D'
000000000001984d         db  0x0e ; '.'
000000000001984e         db  0x28 ; '('
000000000001984f         db  0x86 ; '.'
0000000000019850         db  0x05 ; '.'
0000000000019851         db  0x41 ; 'A'
0000000000019852         db  0x0e ; '.'
0000000000019853         db  0x30 ; '0'
0000000000019854         db  0x83 ; '.'
0000000000019855         db  0x06 ; '.'
0000000000019856         db  0x03 ; '.'
0000000000019857         db  0x45 ; 'E'
0000000000019858         db  0x01 ; '.'
0000000000019859         db  0x0e ; '.'
000000000001985a         db  0x28 ; '('
000000000001985b         db  0x44 ; 'D'
000000000001985c         db  0x0e ; '.'
000000000001985d         db  0x20 ; ' '
000000000001985e         db  0x42 ; 'B'
000000000001985f         db  0x0e ; '.'
0000000000019860         db  0x18 ; '.'
0000000000019861         db  0x42 ; 'B'
0000000000019862         db  0x0e ; '.'
0000000000019863         db  0x10 ; '.'
0000000000019864         db  0x42 ; 'B'
0000000000019865         db  0x0e ; '.'
0000000000019866         db  0x08 ; '.'
0000000000019867         db  0x00 ; '.'
0000000000019868         dd         0x00000038                                  ; Length of the record
000000000001986c         dd         0x000013ac                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019870         db         0xf0, 0xfc, 0xfe, 0xff                      ; begin 0x9560
0000000000019874         db         0xb8, 3 dup (0x00)                          ; length 0xb8 (end at 0x9618)
0000000000019878         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019879         db  0x42 ; 'B'
000000000001987a         db  0x0e ; '.'
000000000001987b         db  0x10 ; '.'
000000000001987c         db  0x8e ; '.'
000000000001987d         db  0x02 ; '.'
000000000001987e         db  0x42 ; 'B'
000000000001987f         db  0x0e ; '.'
0000000000019880         db  0x18 ; '.'
0000000000019881         db  0x8d ; '.'
0000000000019882         db  0x03 ; '.'
0000000000019883         db  0x45 ; 'E'
0000000000019884         db  0x0e ; '.'
0000000000019885         db  0x20 ; ' '
0000000000019886         db  0x8c ; '.'
0000000000019887         db  0x04 ; '.'
0000000000019888         db  0x41 ; 'A'
0000000000019889         db  0x0e ; '.'
000000000001988a         db  0x28 ; '('
000000000001988b         db  0x86 ; '.'
000000000001988c         db  0x05 ; '.'
000000000001988d         db  0x41 ; 'A'
000000000001988e         db  0x0e ; '.'
000000000001988f         db  0x30 ; '0'
0000000000019890         db  0x83 ; '.'
0000000000019891         db  0x06 ; '.'
0000000000019892         db  0x02 ; '.'
0000000000019893         db  0x8f ; '.'
0000000000019894         db  0x0e ; '.'
0000000000019895         db  0x28 ; '('
0000000000019896         db  0x57 ; 'W'
0000000000019897         db  0x0e ; '.'
0000000000019898         db  0x20 ; ' '
0000000000019899         db  0x42 ; 'B'
000000000001989a         db  0x0e ; '.'
000000000001989b         db  0x18 ; '.'
000000000001989c         db  0x42 ; 'B'
000000000001989d         db  0x0e ; '.'
000000000001989e         db  0x10 ; '.'
000000000001989f         db  0x42 ; 'B'
00000000000198a0         db  0x0e ; '.'
00000000000198a1         db  0x08 ; '.'
00000000000198a2         db  0x00 ; '.'
00000000000198a3         db  0x00 ; '.'
00000000000198a4         dd         0x00000010                                  ; Length of the record
00000000000198a8         dd         0x000013e8                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000198ac         db         0x74, 0xfd, 0xfe, 0xff                      ; begin 0x9620
00000000000198b0         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0x966f)
00000000000198b4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000198b5         align      8
00000000000198b8         dd         0x00000010                                  ; Length of the record
00000000000198bc         dd         0x000013fc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000198c0         db         0xb0, 0xfd, 0xfe, 0xff                      ; begin 0x9670
00000000000198c4         db         0x53, 3 dup (0x00)                          ; length 0x53 (end at 0x96c3)
00000000000198c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000198c9         align      4
00000000000198cc         dd         0x00000010                                  ; Length of the record
00000000000198d0         dd         0x00001410                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000198d4         db         0xfc, 0xfd, 0xfe, 0xff                      ; begin 0x96d0
00000000000198d8         db         0x75, 3 dup (0x00)                          ; length 0x75 (end at 0x9745)
00000000000198dc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000198dd         align      32
00000000000198e0         dd         0x00000060                                  ; Length of the record
00000000000198e4         dd         0x00001424                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000198e8         db         0x68, 2 dup (0xfe), 0xff                    ; begin 0x9750
00000000000198ec         db         0xf5, 3 dup (0x00)                          ; length 0xf5 (end at 0x9845)
00000000000198f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000198f1         db  0x42 ; 'B'
00000000000198f2         db  0x0e ; '.'
00000000000198f3         db  0x10 ; '.'
00000000000198f4         db  0x8f ; '.'
00000000000198f5         db  0x02 ; '.'
00000000000198f6         db  0x42 ; 'B'
00000000000198f7         db  0x0e ; '.'
00000000000198f8         db  0x18 ; '.'
00000000000198f9         db  0x8e ; '.'
00000000000198fa         db  0x03 ; '.'
00000000000198fb         db  0x46 ; 'F'
00000000000198fc         db  0x0e ; '.'
00000000000198fd         db  0x20 ; ' '
00000000000198fe         db  0x8d ; '.'
00000000000198ff         db  0x04 ; '.'
0000000000019900         db  0x42 ; 'B'
0000000000019901         db  0x0e ; '.'
0000000000019902         db  0x28 ; '('
0000000000019903         db  0x8c ; '.'
0000000000019904         db  0x05 ; '.'
0000000000019905         db  0x44 ; 'D'
0000000000019906         db  0x0e ; '.'
0000000000019907         db  0x30 ; '0'
0000000000019908         db  0x86 ; '.'
0000000000019909         db  0x06 ; '.'
000000000001990a         db  0x41 ; 'A'
000000000001990b         db  0x0e ; '.'
000000000001990c         db  0x38 ; '8'
000000000001990d         db  0x83 ; '.'
000000000001990e         db  0x07 ; '.'
000000000001990f         db  0x50 ; 'P'
0000000000019910         db  0x0e ; '.'
0000000000019911         db  0x40 ; '@'
0000000000019912         db  0x02 ; '.'
0000000000019913         db  0x85 ; '.'
0000000000019914         db  0x0a ; '.'
0000000000019915         db  0x0e ; '.'
0000000000019916         db  0x38 ; '8'
0000000000019917         db  0x41 ; 'A'
0000000000019918         db  0x0e ; '.'
0000000000019919         db  0x30 ; '0'
000000000001991a         db  0x41 ; 'A'
000000000001991b         db  0x0e ; '.'
000000000001991c         db  0x28 ; '('
000000000001991d         db  0x42 ; 'B'
000000000001991e         db  0x0e ; '.'
000000000001991f         db  0x20 ; ' '
0000000000019920         db  0x42 ; 'B'
0000000000019921         db  0x0e ; '.'
0000000000019922         db  0x18 ; '.'
0000000000019923         db  0x42 ; 'B'
0000000000019924         db  0x0e ; '.'
0000000000019925         db  0x10 ; '.'
0000000000019926         db  0x42 ; 'B'
0000000000019927         db  0x0e ; '.'
0000000000019928         db  0x08 ; '.'
0000000000019929         db  0x48 ; 'H'
000000000001992a         db  0x0b ; '.'
000000000001992b         db  0x44 ; 'D'
000000000001992c         db  0x0a ; '.'
000000000001992d         db  0x0e ; '.'
000000000001992e         db  0x38 ; '8'
000000000001992f         db  0x46 ; 'F'
0000000000019930         db  0x0e ; '.'
0000000000019931         db  0x30 ; '0'
0000000000019932         db  0x41 ; 'A'
0000000000019933         db  0x0e ; '.'
0000000000019934         db  0x28 ; '('
0000000000019935         db  0x42 ; 'B'
0000000000019936         db  0x0e ; '.'
0000000000019937         db  0x20 ; ' '
0000000000019938         db  0x42 ; 'B'
0000000000019939         db  0x0e ; '.'
000000000001993a         db  0x18 ; '.'
000000000001993b         db  0x42 ; 'B'
000000000001993c         db  0x0e ; '.'
000000000001993d         db  0x10 ; '.'
000000000001993e         db  0x42 ; 'B'
000000000001993f         db  0x0e ; '.'
0000000000019940         db  0x08 ; '.'
0000000000019941         db  0x45 ; 'E'
0000000000019942         db  0x0b ; '.'
0000000000019943         db  0x00 ; '.'
0000000000019944         dd         0x00000010                                  ; Length of the record
0000000000019948         dd         0x00001488                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001994c         db         0x04, 0xff, 0xfe, 0xff                      ; begin 0x9850
0000000000019950         db         0x34, 3 dup (0x00)                          ; length 0x34 (end at 0x9884)
0000000000019954         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019955         align      8
0000000000019958         dd         0x00000010                                  ; Length of the record
000000000001995c         dd         0x0000149c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019960         db         0x30, 0xff, 0xfe, 0xff                      ; begin 0x9890
0000000000019964         db         0x8b, 3 dup (0x00)                          ; length 0x8b (end at 0x991b)
0000000000019968         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019969         align      4
000000000001996c         dd         0x00000010                                  ; Length of the record
0000000000019970         dd         0x000014b0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019974         db         0xac, 0xff, 0xfe, 0xff                      ; begin 0x9920
0000000000019978         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x9977)
000000000001997c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001997d         align      128
0000000000019980         dd         0x0000004c                                  ; Length of the record
0000000000019984         dd         0x000014c4                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019988         db         0xf8, 0xff, 0xfe, 0xff                      ; begin 0x9980
000000000001998c         db         0x69, 0x02, 2 dup (0x00)                    ; length 0x269 (end at 0x9be9)
0000000000019990         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019991         db  0x42 ; 'B'
0000000000019992         db  0x0e ; '.'
0000000000019993         db  0x10 ; '.'
0000000000019994         db  0x8f ; '.'
0000000000019995         db  0x02 ; '.'
0000000000019996         db  0x42 ; 'B'
0000000000019997         db  0x0e ; '.'
0000000000019998         db  0x18 ; '.'
0000000000019999         db  0x8e ; '.'
000000000001999a         db  0x03 ; '.'
000000000001999b         db  0x42 ; 'B'
000000000001999c         db  0x0e ; '.'
000000000001999d         db  0x20 ; ' '
000000000001999e         db  0x8d ; '.'
000000000001999f         db  0x04 ; '.'
00000000000199a0         db  0x42 ; 'B'
00000000000199a1         db  0x0e ; '.'
00000000000199a2         db  0x28 ; '('
00000000000199a3         db  0x8c ; '.'
00000000000199a4         db  0x05 ; '.'
00000000000199a5         db  0x41 ; 'A'
00000000000199a6         db  0x0e ; '.'
00000000000199a7         db  0x30 ; '0'
00000000000199a8         db  0x86 ; '.'
00000000000199a9         db  0x06 ; '.'
00000000000199aa         db  0x41 ; 'A'
00000000000199ab         db  0x0e ; '.'
00000000000199ac         db  0x38 ; '8'
00000000000199ad         db  0x83 ; '.'
00000000000199ae         db  0x07 ; '.'
00000000000199af         db  0x46 ; 'F'
00000000000199b0         db  0x0e ; '.'
00000000000199b1         db  0x80 ; '.'
00000000000199b2         db  0x01 ; '.'
00000000000199b3         db  0x03 ; '.'
00000000000199b4         db  0xd2 ; '.'
00000000000199b5         db  0x01 ; '.'
00000000000199b6         db  0x0a ; '.'
00000000000199b7         db  0x0e ; '.'
00000000000199b8         db  0x38 ; '8'
00000000000199b9         db  0x41 ; 'A'
00000000000199ba         db  0x0e ; '.'
00000000000199bb         db  0x30 ; '0'
00000000000199bc         db  0x41 ; 'A'
00000000000199bd         db  0x0e ; '.'
00000000000199be         db  0x28 ; '('
00000000000199bf         db  0x42 ; 'B'
00000000000199c0         db  0x0e ; '.'
00000000000199c1         db  0x20 ; ' '
00000000000199c2         db  0x42 ; 'B'
00000000000199c3         db  0x0e ; '.'
00000000000199c4         db  0x18 ; '.'
00000000000199c5         db  0x42 ; 'B'
00000000000199c6         db  0x0e ; '.'
00000000000199c7         db  0x10 ; '.'
00000000000199c8         db  0x42 ; 'B'
00000000000199c9         db  0x0e ; '.'
00000000000199ca         db  0x08 ; '.'
00000000000199cb         db  0x44 ; 'D'
00000000000199cc         db  0x0b ; '.'
00000000000199cd         db  0x00 ; '.'
00000000000199ce         db  0x00 ; '.'
00000000000199cf         db  0x00 ; '.'
00000000000199d0         dd         0x00000034                                  ; Length of the record
00000000000199d4         dd         0x00001514                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
00000000000199d8         db         0x18, 0x02, 2 dup (0xff)                    ; begin 0x9bf0
00000000000199dc         db         0xde, 0x01, 2 dup (0x00)                    ; length 0x1de (end at 0x9dce)
00000000000199e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000199e1         db  0x58 ; 'X'
00000000000199e2         db  0x0e ; '.'
00000000000199e3         db  0x10 ; '.'
00000000000199e4         db  0x8c ; '.'
00000000000199e5         db  0x02 ; '.'
00000000000199e6         db  0x41 ; 'A'
00000000000199e7         db  0x0e ; '.'
00000000000199e8         db  0x18 ; '.'
00000000000199e9         db  0x86 ; '.'
00000000000199ea         db  0x03 ; '.'
00000000000199eb         db  0x44 ; 'D'
00000000000199ec         db  0x0e ; '.'
00000000000199ed         db  0x20 ; ' '
00000000000199ee         db  0x83 ; '.'
00000000000199ef         db  0x04 ; '.'
00000000000199f0         db  0x02 ; '.'
00000000000199f1         db  0xd0 ; '.'
00000000000199f2         db  0x0e ; '.'
00000000000199f3         db  0x18 ; '.'
00000000000199f4         db  0x41 ; 'A'
00000000000199f5         db  0x0e ; '.'
00000000000199f6         db  0x10 ; '.'
00000000000199f7         db  0x42 ; 'B'
00000000000199f8         db  0x0e ; '.'
00000000000199f9         db  0x08 ; '.'
00000000000199fa         db  0x48 ; 'H'
00000000000199fb         db  0xc3 ; '.'
00000000000199fc         db  0xc6 ; '.'
00000000000199fd         db  0xcc ; '.'
00000000000199fe         db  0x48 ; 'H'
00000000000199ff         db  0x0e ; '.'
0000000000019a00         db  0x20 ; ' '
0000000000019a01         db  0x83 ; '.'
0000000000019a02         db  0x04 ; '.'
0000000000019a03         db  0x86 ; '.'
0000000000019a04         db  0x03 ; '.'
0000000000019a05         db  0x8c ; '.'
0000000000019a06         db  0x02 ; '.'
0000000000019a07         db  0x00 ; '.'
0000000000019a08         dd         0x0000004c                                  ; Length of the record
0000000000019a0c         dd         0x0000154c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019a10         db         0xc0, 0x03, 2 dup (0xff)                    ; begin 0x9dd0
0000000000019a14         db         0xaf, 0x02, 2 dup (0x00)                    ; length 0x2af (end at 0xa07f)
0000000000019a18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019a19         db  0x42 ; 'B'
0000000000019a1a         db  0x0e ; '.'
0000000000019a1b         db  0x10 ; '.'
0000000000019a1c         db  0x8f ; '.'
0000000000019a1d         db  0x02 ; '.'
0000000000019a1e         db  0x42 ; 'B'
0000000000019a1f         db  0x0e ; '.'
0000000000019a20         db  0x18 ; '.'
0000000000019a21         db  0x8e ; '.'
0000000000019a22         db  0x03 ; '.'
0000000000019a23         db  0x45 ; 'E'
0000000000019a24         db  0x0e ; '.'
0000000000019a25         db  0x20 ; ' '
0000000000019a26         db  0x8d ; '.'
0000000000019a27         db  0x04 ; '.'
0000000000019a28         db  0x42 ; 'B'
0000000000019a29         db  0x0e ; '.'
0000000000019a2a         db  0x28 ; '('
0000000000019a2b         db  0x8c ; '.'
0000000000019a2c         db  0x05 ; '.'
0000000000019a2d         db  0x41 ; 'A'
0000000000019a2e         db  0x0e ; '.'
0000000000019a2f         db  0x30 ; '0'
0000000000019a30         db  0x86 ; '.'
0000000000019a31         db  0x06 ; '.'
0000000000019a32         db  0x41 ; 'A'
0000000000019a33         db  0x0e ; '.'
0000000000019a34         db  0x38 ; '8'
0000000000019a35         db  0x83 ; '.'
0000000000019a36         db  0x07 ; '.'
0000000000019a37         db  0x4b ; 'K'
0000000000019a38         db  0x0e ; '.'
0000000000019a39         db  0xa0 ; '.'
0000000000019a3a         db  0x01 ; '.'
0000000000019a3b         db  0x03 ; '.'
0000000000019a3c         db  0xa6 ; '.'
0000000000019a3d         db  0x01 ; '.'
0000000000019a3e         db  0x0a ; '.'
0000000000019a3f         db  0x0e ; '.'
0000000000019a40         db  0x38 ; '8'
0000000000019a41         db  0x41 ; 'A'
0000000000019a42         db  0x0e ; '.'
0000000000019a43         db  0x30 ; '0'
0000000000019a44         db  0x41 ; 'A'
0000000000019a45         db  0x0e ; '.'
0000000000019a46         db  0x28 ; '('
0000000000019a47         db  0x42 ; 'B'
0000000000019a48         db  0x0e ; '.'
0000000000019a49         db  0x20 ; ' '
0000000000019a4a         db  0x42 ; 'B'
0000000000019a4b         db  0x0e ; '.'
0000000000019a4c         db  0x18 ; '.'
0000000000019a4d         db  0x42 ; 'B'
0000000000019a4e         db  0x0e ; '.'
0000000000019a4f         db  0x10 ; '.'
0000000000019a50         db  0x42 ; 'B'
0000000000019a51         db  0x0e ; '.'
0000000000019a52         db  0x08 ; '.'
0000000000019a53         db  0x48 ; 'H'
0000000000019a54         db  0x0b ; '.'
0000000000019a55         db  0x00 ; '.'
0000000000019a56         db  0x00 ; '.'
0000000000019a57         db  0x00 ; '.'
0000000000019a58         dd         0x00000048                                  ; Length of the record
0000000000019a5c         dd         0x0000159c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019a60         db         0x20, 0x06, 2 dup (0xff)                    ; begin 0xa080
0000000000019a64         db         0x59, 0x01, 2 dup (0x00)                    ; length 0x159 (end at 0xa1d9)
0000000000019a68         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019a69         db  0x42 ; 'B'
0000000000019a6a         db  0x0e ; '.'
0000000000019a6b         db  0x10 ; '.'
0000000000019a6c         db  0x8f ; '.'
0000000000019a6d         db  0x02 ; '.'
0000000000019a6e         db  0x42 ; 'B'
0000000000019a6f         db  0x0e ; '.'
0000000000019a70         db  0x18 ; '.'
0000000000019a71         db  0x8e ; '.'
0000000000019a72         db  0x03 ; '.'
0000000000019a73         db  0x45 ; 'E'
0000000000019a74         db  0x0e ; '.'
0000000000019a75         db  0x20 ; ' '
0000000000019a76         db  0x8d ; '.'
0000000000019a77         db  0x04 ; '.'
0000000000019a78         db  0x42 ; 'B'
0000000000019a79         db  0x0e ; '.'
0000000000019a7a         db  0x28 ; '('
0000000000019a7b         db  0x8c ; '.'
0000000000019a7c         db  0x05 ; '.'
0000000000019a7d         db  0x44 ; 'D'
0000000000019a7e         db  0x0e ; '.'
0000000000019a7f         db  0x30 ; '0'
0000000000019a80         db  0x86 ; '.'
0000000000019a81         db  0x06 ; '.'
0000000000019a82         db  0x41 ; 'A'
0000000000019a83         db  0x0e ; '.'
0000000000019a84         db  0x38 ; '8'
0000000000019a85         db  0x83 ; '.'
0000000000019a86         db  0x07 ; '.'
0000000000019a87         db  0x49 ; 'I'
0000000000019a88         db  0x0e ; '.'
0000000000019a89         db  0x70 ; 'p'
0000000000019a8a         db  0x03 ; '.'
0000000000019a8b         db  0x29 ; ')'
0000000000019a8c         db  0x01 ; '.'
0000000000019a8d         db  0x0a ; '.'
0000000000019a8e         db  0x0e ; '.'
0000000000019a8f         db  0x38 ; '8'
0000000000019a90         db  0x41 ; 'A'
0000000000019a91         db  0x0e ; '.'
0000000000019a92         db  0x30 ; '0'
0000000000019a93         db  0x41 ; 'A'
0000000000019a94         db  0x0e ; '.'
0000000000019a95         db  0x28 ; '('
0000000000019a96         db  0x42 ; 'B'
0000000000019a97         db  0x0e ; '.'
0000000000019a98         db  0x20 ; ' '
0000000000019a99         db  0x42 ; 'B'
0000000000019a9a         db  0x0e ; '.'
0000000000019a9b         db  0x18 ; '.'
0000000000019a9c         db  0x42 ; 'B'
0000000000019a9d         db  0x0e ; '.'
0000000000019a9e         db  0x10 ; '.'
0000000000019a9f         db  0x42 ; 'B'
0000000000019aa0         db  0x0e ; '.'
0000000000019aa1         db  0x08 ; '.'
0000000000019aa2         db  0x41 ; 'A'
0000000000019aa3         db  0x0b ; '.'
0000000000019aa4         dd         0x0000004c                                  ; Length of the record
0000000000019aa8         dd         0x000015e8                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019aac         db         0x34, 0x07, 2 dup (0xff)                    ; begin 0xa1e0
0000000000019ab0         db         0xa8, 0x01, 2 dup (0x00)                    ; length 0x1a8 (end at 0xa388)
0000000000019ab4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019ab5         db  0x5e ; '^'
0000000000019ab6         db  0x0e ; '.'
0000000000019ab7         db  0x10 ; '.'
0000000000019ab8         db  0x8d ; '.'
0000000000019ab9         db  0x02 ; '.'
0000000000019aba         db  0x42 ; 'B'
0000000000019abb         db  0x0e ; '.'
0000000000019abc         db  0x18 ; '.'
0000000000019abd         db  0x8c ; '.'
0000000000019abe         db  0x03 ; '.'
0000000000019abf         db  0x45 ; 'E'
0000000000019ac0         db  0x0e ; '.'
0000000000019ac1         db  0x20 ; ' '
0000000000019ac2         db  0x86 ; '.'
0000000000019ac3         db  0x04 ; '.'
0000000000019ac4         db  0x41 ; 'A'
0000000000019ac5         db  0x0e ; '.'
0000000000019ac6         db  0x28 ; '('
0000000000019ac7         db  0x83 ; '.'
0000000000019ac8         db  0x05 ; '.'
0000000000019ac9         db  0x4d ; 'M'
0000000000019aca         db  0x0e ; '.'
0000000000019acb         db  0x30 ; '0'
0000000000019acc         db  0x02 ; '.'
0000000000019acd         db  0x95 ; '.'
0000000000019ace         db  0x0e ; '.'
0000000000019acf         db  0x08 ; '.'
0000000000019ad0         db  0xc3 ; '.'
0000000000019ad1         db  0xc6 ; '.'
0000000000019ad2         db  0xcc ; '.'
0000000000019ad3         db  0xcd ; '.'
0000000000019ad4         db  0x48 ; 'H'
0000000000019ad5         db  0x0e ; '.'
0000000000019ad6         db  0x30 ; '0'
0000000000019ad7         db  0x83 ; '.'
0000000000019ad8         db  0x05 ; '.'
0000000000019ad9         db  0x86 ; '.'
0000000000019ada         db  0x04 ; '.'
0000000000019adb         db  0x8c ; '.'
0000000000019adc         db  0x03 ; '.'
0000000000019add         db  0x8d ; '.'
0000000000019ade         db  0x02 ; '.'
0000000000019adf         db  0x02 ; '.'
0000000000019ae0         db  0x90 ; '.'
0000000000019ae1         db  0x0a ; '.'
0000000000019ae2         db  0x0e ; '.'
0000000000019ae3         db  0x28 ; '('
0000000000019ae4         db  0x41 ; 'A'
0000000000019ae5         db  0x0e ; '.'
0000000000019ae6         db  0x20 ; ' '
0000000000019ae7         db  0x41 ; 'A'
0000000000019ae8         db  0x0e ; '.'
0000000000019ae9         db  0x18 ; '.'
0000000000019aea         db  0x42 ; 'B'
0000000000019aeb         db  0x0e ; '.'
0000000000019aec         db  0x10 ; '.'
0000000000019aed         db  0x42 ; 'B'
0000000000019aee         db  0x0e ; '.'
0000000000019aef         db  0x08 ; '.'
0000000000019af0         db  0x4a ; 'J'
0000000000019af1         db  0x0b ; '.'
0000000000019af2         db  0x00 ; '.'
0000000000019af3         db  0x00 ; '.'
0000000000019af4         dd         0x00000020                                  ; Length of the record
0000000000019af8         dd         0x00001638                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019afc         db         0x94, 0x08, 2 dup (0xff)                    ; begin 0xa390
0000000000019b00         db         0xe0, 3 dup (0x00)                          ; length 0xe0 (end at 0xa470)
0000000000019b04         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019b05         db  0x41 ; 'A'
0000000000019b06         db  0x0e ; '.'
0000000000019b07         db  0x10 ; '.'
0000000000019b08         db  0x83 ; '.'
0000000000019b09         db  0x02 ; '.'
0000000000019b0a         db  0x47 ; 'G'
0000000000019b0b         db  0x0e ; '.'
0000000000019b0c         db  0x30 ; '0'
0000000000019b0d         db  0x02 ; '.'
0000000000019b0e         db  0x77 ; 'w'
0000000000019b0f         db  0x0a ; '.'
0000000000019b10         db  0x0e ; '.'
0000000000019b11         db  0x10 ; '.'
0000000000019b12         db  0x41 ; 'A'
0000000000019b13         db  0x0e ; '.'
0000000000019b14         db  0x08 ; '.'
0000000000019b15         db  0x48 ; 'H'
0000000000019b16         db  0x0b ; '.'
0000000000019b17         db  0x00 ; '.'
0000000000019b18         dd         0x00000040                                  ; Length of the record
0000000000019b1c         dd         0x0000165c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019b20         db         0x50, 0x09, 2 dup (0xff)                    ; begin 0xa470
0000000000019b24         db         0xd1, 3 dup (0x00)                          ; length 0xd1 (end at 0xa541)
0000000000019b28         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019b29         db  0x42 ; 'B'
0000000000019b2a         db  0x0e ; '.'
0000000000019b2b         db  0x10 ; '.'
0000000000019b2c         db  0x8e ; '.'
0000000000019b2d         db  0x02 ; '.'
0000000000019b2e         db  0x42 ; 'B'
0000000000019b2f         db  0x0e ; '.'
0000000000019b30         db  0x18 ; '.'
0000000000019b31         db  0x8d ; '.'
0000000000019b32         db  0x03 ; '.'
0000000000019b33         db  0x46 ; 'F'
0000000000019b34         db  0x0e ; '.'
0000000000019b35         db  0x20 ; ' '
0000000000019b36         db  0x8c ; '.'
0000000000019b37         db  0x04 ; '.'
0000000000019b38         db  0x41 ; 'A'
0000000000019b39         db  0x0e ; '.'
0000000000019b3a         db  0x28 ; '('
0000000000019b3b         db  0x86 ; '.'
0000000000019b3c         db  0x05 ; '.'
0000000000019b3d         db  0x48 ; 'H'
0000000000019b3e         db  0x0e ; '.'
0000000000019b3f         db  0x30 ; '0'
0000000000019b40         db  0x83 ; '.'
0000000000019b41         db  0x06 ; '.'
0000000000019b42         db  0x47 ; 'G'
0000000000019b43         db  0x0e ; '.'
0000000000019b44         db  0x40 ; '@'
0000000000019b45         db  0x02 ; '.'
0000000000019b46         db  0x96 ; '.'
0000000000019b47         db  0x0a ; '.'
0000000000019b48         db  0x0e ; '.'
0000000000019b49         db  0x30 ; '0'
0000000000019b4a         db  0x41 ; 'A'
0000000000019b4b         db  0x0e ; '.'
0000000000019b4c         db  0x28 ; '('
0000000000019b4d         db  0x41 ; 'A'
0000000000019b4e         db  0x0e ; '.'
0000000000019b4f         db  0x20 ; ' '
0000000000019b50         db  0x42 ; 'B'
0000000000019b51         db  0x0e ; '.'
0000000000019b52         db  0x18 ; '.'
0000000000019b53         db  0x42 ; 'B'
0000000000019b54         db  0x0e ; '.'
0000000000019b55         db  0x10 ; '.'
0000000000019b56         db  0x42 ; 'B'
0000000000019b57         db  0x0e ; '.'
0000000000019b58         db  0x08 ; '.'
0000000000019b59         db  0x48 ; 'H'
0000000000019b5a         db  0x0b ; '.'
0000000000019b5b         db  0x00 ; '.'
0000000000019b5c         dd         0x0000004c                                  ; Length of the record
0000000000019b60         dd         0x000016a0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019b64         db         0xec, 0x09, 2 dup (0xff)                    ; begin 0xa550
0000000000019b68         db         0x37, 0x02, 2 dup (0x00)                    ; length 0x237 (end at 0xa787)
0000000000019b6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019b6d         db  0x42 ; 'B'
0000000000019b6e         db  0x0e ; '.'
0000000000019b6f         db  0x10 ; '.'
0000000000019b70         db  0x8f ; '.'
0000000000019b71         db  0x02 ; '.'
0000000000019b72         db  0x42 ; 'B'
0000000000019b73         db  0x0e ; '.'
0000000000019b74         db  0x18 ; '.'
0000000000019b75         db  0x8e ; '.'
0000000000019b76         db  0x03 ; '.'
0000000000019b77         db  0x42 ; 'B'
0000000000019b78         db  0x0e ; '.'
0000000000019b79         db  0x20 ; ' '
0000000000019b7a         db  0x8d ; '.'
0000000000019b7b         db  0x04 ; '.'
0000000000019b7c         db  0x42 ; 'B'
0000000000019b7d         db  0x0e ; '.'
0000000000019b7e         db  0x28 ; '('
0000000000019b7f         db  0x8c ; '.'
0000000000019b80         db  0x05 ; '.'
0000000000019b81         db  0x44 ; 'D'
0000000000019b82         db  0x0e ; '.'
0000000000019b83         db  0x30 ; '0'
0000000000019b84         db  0x86 ; '.'
0000000000019b85         db  0x06 ; '.'
0000000000019b86         db  0x41 ; 'A'
0000000000019b87         db  0x0e ; '.'
0000000000019b88         db  0x38 ; '8'
0000000000019b89         db  0x83 ; '.'
0000000000019b8a         db  0x07 ; '.'
0000000000019b8b         db  0x44 ; 'D'
0000000000019b8c         db  0x0e ; '.'
0000000000019b8d         db  0x80 ; '.'
0000000000019b8e         db  0x01 ; '.'
0000000000019b8f         db  0x03 ; '.'
0000000000019b90         db  0x87 ; '.'
0000000000019b91         db  0x01 ; '.'
0000000000019b92         db  0x0a ; '.'
0000000000019b93         db  0x0e ; '.'
0000000000019b94         db  0x38 ; '8'
0000000000019b95         db  0x41 ; 'A'
0000000000019b96         db  0x0e ; '.'
0000000000019b97         db  0x30 ; '0'
0000000000019b98         db  0x41 ; 'A'
0000000000019b99         db  0x0e ; '.'
0000000000019b9a         db  0x28 ; '('
0000000000019b9b         db  0x42 ; 'B'
0000000000019b9c         db  0x0e ; '.'
0000000000019b9d         db  0x20 ; ' '
0000000000019b9e         db  0x42 ; 'B'
0000000000019b9f         db  0x0e ; '.'
0000000000019ba0         db  0x18 ; '.'
0000000000019ba1         db  0x42 ; 'B'
0000000000019ba2         db  0x0e ; '.'
0000000000019ba3         db  0x10 ; '.'
0000000000019ba4         db  0x42 ; 'B'
0000000000019ba5         db  0x0e ; '.'
0000000000019ba6         db  0x08 ; '.'
0000000000019ba7         db  0x46 ; 'F'
0000000000019ba8         db  0x0b ; '.'
0000000000019ba9         db  0x00 ; '.'
0000000000019baa         db  0x00 ; '.'
0000000000019bab         db  0x00 ; '.'
0000000000019bac         dd         0x00000028                                  ; Length of the record
0000000000019bb0         dd         0x000016f0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019bb4         db         0xdc, 0x0b, 2 dup (0xff)                    ; begin 0xa790
0000000000019bb8         db         0xa0, 3 dup (0x00)                          ; length 0xa0 (end at 0xa830)
0000000000019bbc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019bbd         db  0x41 ; 'A'
0000000000019bbe         db  0x0e ; '.'
0000000000019bbf         db  0x10 ; '.'
0000000000019bc0         db  0x86 ; '.'
0000000000019bc1         db  0x02 ; '.'
0000000000019bc2         db  0x41 ; 'A'
0000000000019bc3         db  0x0e ; '.'
0000000000019bc4         db  0x18 ; '.'
0000000000019bc5         db  0x83 ; '.'
0000000000019bc6         db  0x03 ; '.'
0000000000019bc7         db  0x4a ; 'J'
0000000000019bc8         db  0x0e ; '.'
0000000000019bc9         db  0x30 ; '0'
0000000000019bca         db  0x02 ; '.'
0000000000019bcb         db  0x4e ; 'N'
0000000000019bcc         db  0x0a ; '.'
0000000000019bcd         db  0x0e ; '.'
0000000000019bce         db  0x18 ; '.'
0000000000019bcf         db  0x41 ; 'A'
0000000000019bd0         db  0x0e ; '.'
0000000000019bd1         db  0x10 ; '.'
0000000000019bd2         db  0x41 ; 'A'
0000000000019bd3         db  0x0e ; '.'
0000000000019bd4         db  0x08 ; '.'
0000000000019bd5         db  0x44 ; 'D'
0000000000019bd6         db  0x0b ; '.'
0000000000019bd7         db  0x00 ; '.'
0000000000019bd8         dd         0x00000038                                  ; Length of the record
0000000000019bdc         dd         0x0000171c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019be0         db         0x50, 0x0c, 2 dup (0xff)                    ; begin 0xa830
0000000000019be4         db         0x86, 3 dup (0x00)                          ; length 0x86 (end at 0xa8b6)
0000000000019be8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019be9         db  0x42 ; 'B'
0000000000019bea         db  0x0e ; '.'
0000000000019beb         db  0x10 ; '.'
0000000000019bec         db  0x8c ; '.'
0000000000019bed         db  0x02 ; '.'
0000000000019bee         db  0x41 ; 'A'
0000000000019bef         db  0x0e ; '.'
0000000000019bf0         db  0x18 ; '.'
0000000000019bf1         db  0x86 ; '.'
0000000000019bf2         db  0x03 ; '.'
0000000000019bf3         db  0x41 ; 'A'
0000000000019bf4         db  0x0e ; '.'
0000000000019bf5         db  0x20 ; ' '
0000000000019bf6         db  0x83 ; '.'
0000000000019bf7         db  0x04 ; '.'
0000000000019bf8         db  0x02 ; '.'
0000000000019bf9         db  0x47 ; 'G'
0000000000019bfa         db  0x0a ; '.'
0000000000019bfb         db  0x0e ; '.'
0000000000019bfc         db  0x18 ; '.'
0000000000019bfd         db  0x41 ; 'A'
0000000000019bfe         db  0x0e ; '.'
0000000000019bff         db  0x10 ; '.'
0000000000019c00         db  0x42 ; 'B'
0000000000019c01         db  0x0e ; '.'
0000000000019c02         db  0x08 ; '.'
0000000000019c03         db  0x42 ; 'B'
0000000000019c04         db  0x0b ; '.'
0000000000019c05         db  0x52 ; 'R'
0000000000019c06         db  0x0a ; '.'
0000000000019c07         db  0x0e ; '.'
0000000000019c08         db  0x18 ; '.'
0000000000019c09         db  0x41 ; 'A'
0000000000019c0a         db  0x0e ; '.'
0000000000019c0b         db  0x10 ; '.'
0000000000019c0c         db  0x42 ; 'B'
0000000000019c0d         db  0x0e ; '.'
0000000000019c0e         db  0x08 ; '.'
0000000000019c0f         db  0x4b ; 'K'
0000000000019c10         db  0x0b ; '.'
0000000000019c11         db  0x00 ; '.'
0000000000019c12         db  0x00 ; '.'
0000000000019c13         db  0x00 ; '.'
0000000000019c14         dd         0x00000060                                  ; Length of the record
0000000000019c18         dd         0x00001758                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019c1c         db         0xa4, 0x0c, 2 dup (0xff)                    ; begin 0xa8c0
0000000000019c20         db         0x52, 0x01, 2 dup (0x00)                    ; length 0x152 (end at 0xaa12)
0000000000019c24         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019c25         db  0x45 ; 'E'
0000000000019c26         db  0x0e ; '.'
0000000000019c27         db  0x10 ; '.'
0000000000019c28         db  0x8e ; '.'
0000000000019c29         db  0x02 ; '.'
0000000000019c2a         db  0x42 ; 'B'
0000000000019c2b         db  0x0e ; '.'
0000000000019c2c         db  0x18 ; '.'
0000000000019c2d         db  0x8d ; '.'
0000000000019c2e         db  0x03 ; '.'
0000000000019c2f         db  0x42 ; 'B'
0000000000019c30         db  0x0e ; '.'
0000000000019c31         db  0x20 ; ' '
0000000000019c32         db  0x8c ; '.'
0000000000019c33         db  0x04 ; '.'
0000000000019c34         db  0x41 ; 'A'
0000000000019c35         db  0x0e ; '.'
0000000000019c36         db  0x28 ; '('
0000000000019c37         db  0x86 ; '.'
0000000000019c38         db  0x05 ; '.'
0000000000019c39         db  0x41 ; 'A'
0000000000019c3a         db  0x0e ; '.'
0000000000019c3b         db  0x30 ; '0'
0000000000019c3c         db  0x83 ; '.'
0000000000019c3d         db  0x06 ; '.'
0000000000019c3e         db  0x02 ; '.'
0000000000019c3f         db  0xc8 ; '.'
0000000000019c40         db  0x0a ; '.'
0000000000019c41         db  0x0e ; '.'
0000000000019c42         db  0x28 ; '('
0000000000019c43         db  0x41 ; 'A'
0000000000019c44         db  0x0e ; '.'
0000000000019c45         db  0x20 ; ' '
0000000000019c46         db  0x42 ; 'B'
0000000000019c47         db  0x0e ; '.'
0000000000019c48         db  0x18 ; '.'
0000000000019c49         db  0x42 ; 'B'
0000000000019c4a         db  0x0e ; '.'
0000000000019c4b         db  0x10 ; '.'
0000000000019c4c         db  0x42 ; 'B'
0000000000019c4d         db  0x0e ; '.'
0000000000019c4e         db  0x08 ; '.'
0000000000019c4f         db  0x46 ; 'F'
0000000000019c50         db  0x0b ; '.'
0000000000019c51         db  0x44 ; 'D'
0000000000019c52         db  0x0a ; '.'
0000000000019c53         db  0x0e ; '.'
0000000000019c54         db  0x28 ; '('
0000000000019c55         db  0x41 ; 'A'
0000000000019c56         db  0x0e ; '.'
0000000000019c57         db  0x20 ; ' '
0000000000019c58         db  0x42 ; 'B'
0000000000019c59         db  0x0e ; '.'
0000000000019c5a         db  0x18 ; '.'
0000000000019c5b         db  0x42 ; 'B'
0000000000019c5c         db  0x0e ; '.'
0000000000019c5d         db  0x10 ; '.'
0000000000019c5e         db  0x42 ; 'B'
0000000000019c5f         db  0x0e ; '.'
0000000000019c60         db  0x08 ; '.'
0000000000019c61         db  0x45 ; 'E'
0000000000019c62         db  0x0b ; '.'
0000000000019c63         db  0x4d ; 'M'
0000000000019c64         db  0x0a ; '.'
0000000000019c65         db  0x0e ; '.'
0000000000019c66         db  0x28 ; '('
0000000000019c67         db  0x41 ; 'A'
0000000000019c68         db  0x0e ; '.'
0000000000019c69         db  0x20 ; ' '
0000000000019c6a         db  0x42 ; 'B'
0000000000019c6b         db  0x0e ; '.'
0000000000019c6c         db  0x18 ; '.'
0000000000019c6d         db  0x42 ; 'B'
0000000000019c6e         db  0x0e ; '.'
0000000000019c6f         db  0x10 ; '.'
0000000000019c70         db  0x42 ; 'B'
0000000000019c71         db  0x0e ; '.'
0000000000019c72         db  0x08 ; '.'
0000000000019c73         db  0x44 ; 'D'
0000000000019c74         db  0x0b ; '.'
0000000000019c75         db  0x00 ; '.'
0000000000019c76         db  0x00 ; '.'
0000000000019c77         db  0x00 ; '.'
0000000000019c78         dd         0x00000048                                  ; Length of the record
0000000000019c7c         dd         0x000017bc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019c80         db         0xa0, 0x0d, 2 dup (0xff)                    ; begin 0xaa20
0000000000019c84         db         0xba, 0x02, 2 dup (0x00)                    ; length 0x2ba (end at 0xacda)
0000000000019c88         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019c89         db  0x42 ; 'B'
0000000000019c8a         db  0x0e ; '.'
0000000000019c8b         db  0x10 ; '.'
0000000000019c8c         db  0x8f ; '.'
0000000000019c8d         db  0x02 ; '.'
0000000000019c8e         db  0x42 ; 'B'
0000000000019c8f         db  0x0e ; '.'
0000000000019c90         db  0x18 ; '.'
0000000000019c91         db  0x8e ; '.'
0000000000019c92         db  0x03 ; '.'
0000000000019c93         db  0x42 ; 'B'
0000000000019c94         db  0x0e ; '.'
0000000000019c95         db  0x20 ; ' '
0000000000019c96         db  0x8d ; '.'
0000000000019c97         db  0x04 ; '.'
0000000000019c98         db  0x42 ; 'B'
0000000000019c99         db  0x0e ; '.'
0000000000019c9a         db  0x28 ; '('
0000000000019c9b         db  0x8c ; '.'
0000000000019c9c         db  0x05 ; '.'
0000000000019c9d         db  0x41 ; 'A'
0000000000019c9e         db  0x0e ; '.'
0000000000019c9f         db  0x30 ; '0'
0000000000019ca0         db  0x86 ; '.'
0000000000019ca1         db  0x06 ; '.'
0000000000019ca2         db  0x41 ; 'A'
0000000000019ca3         db  0x0e ; '.'
0000000000019ca4         db  0x38 ; '8'
0000000000019ca5         db  0x83 ; '.'
0000000000019ca6         db  0x07 ; '.'
0000000000019ca7         db  0x44 ; 'D'
0000000000019ca8         db  0x0e ; '.'
0000000000019ca9         db  0x60 ; '`'
0000000000019caa         db  0x02 ; '.'
0000000000019cab         db  0xa2 ; '.'
0000000000019cac         db  0x0a ; '.'
0000000000019cad         db  0x0e ; '.'
0000000000019cae         db  0x38 ; '8'
0000000000019caf         db  0x44 ; 'D'
0000000000019cb0         db  0x0e ; '.'
0000000000019cb1         db  0x30 ; '0'
0000000000019cb2         db  0x41 ; 'A'
0000000000019cb3         db  0x0e ; '.'
0000000000019cb4         db  0x28 ; '('
0000000000019cb5         db  0x42 ; 'B'
0000000000019cb6         db  0x0e ; '.'
0000000000019cb7         db  0x20 ; ' '
0000000000019cb8         db  0x42 ; 'B'
0000000000019cb9         db  0x0e ; '.'
0000000000019cba         db  0x18 ; '.'
0000000000019cbb         db  0x42 ; 'B'
0000000000019cbc         db  0x0e ; '.'
0000000000019cbd         db  0x10 ; '.'
0000000000019cbe         db  0x42 ; 'B'
0000000000019cbf         db  0x0e ; '.'
0000000000019cc0         db  0x08 ; '.'
0000000000019cc1         db  0x43 ; 'C'
0000000000019cc2         db  0x0b ; '.'
0000000000019cc3         db  0x00 ; '.'
0000000000019cc4         dd         0x00000048                                  ; Length of the record
0000000000019cc8         dd         0x00001808                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019ccc         db         0x14, 0x10, 2 dup (0xff)                    ; begin 0xace0
0000000000019cd0         db         0xfa, 0x01, 2 dup (0x00)                    ; length 0x1fa (end at 0xaeda)
0000000000019cd4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019cd5         db  0x42 ; 'B'
0000000000019cd6         db  0x0e ; '.'
0000000000019cd7         db  0x10 ; '.'
0000000000019cd8         db  0x8f ; '.'
0000000000019cd9         db  0x02 ; '.'
0000000000019cda         db  0x42 ; 'B'
0000000000019cdb         db  0x0e ; '.'
0000000000019cdc         db  0x18 ; '.'
0000000000019cdd         db  0x8e ; '.'
0000000000019cde         db  0x03 ; '.'
0000000000019cdf         db  0x42 ; 'B'
0000000000019ce0         db  0x0e ; '.'
0000000000019ce1         db  0x20 ; ' '
0000000000019ce2         db  0x8d ; '.'
0000000000019ce3         db  0x04 ; '.'
0000000000019ce4         db  0x42 ; 'B'
0000000000019ce5         db  0x0e ; '.'
0000000000019ce6         db  0x28 ; '('
0000000000019ce7         db  0x8c ; '.'
0000000000019ce8         db  0x05 ; '.'
0000000000019ce9         db  0x41 ; 'A'
0000000000019cea         db  0x0e ; '.'
0000000000019ceb         db  0x30 ; '0'
0000000000019cec         db  0x86 ; '.'
0000000000019ced         db  0x06 ; '.'
0000000000019cee         db  0x41 ; 'A'
0000000000019cef         db  0x0e ; '.'
0000000000019cf0         db  0x38 ; '8'
0000000000019cf1         db  0x83 ; '.'
0000000000019cf2         db  0x07 ; '.'
0000000000019cf3         db  0x44 ; 'D'
0000000000019cf4         db  0x0e ; '.'
0000000000019cf5         db  0x40 ; '@'
0000000000019cf6         db  0x03 ; '.'
0000000000019cf7         db  0x85 ; '.'
0000000000019cf8         db  0x01 ; '.'
0000000000019cf9         db  0x0a ; '.'
0000000000019cfa         db  0x0e ; '.'
0000000000019cfb         db  0x38 ; '8'
0000000000019cfc         db  0x44 ; 'D'
0000000000019cfd         db  0x0e ; '.'
0000000000019cfe         db  0x30 ; '0'
0000000000019cff         db  0x41 ; 'A'
0000000000019d00         db  0x0e ; '.'
0000000000019d01         db  0x28 ; '('
0000000000019d02         db  0x42 ; 'B'
0000000000019d03         db  0x0e ; '.'
0000000000019d04         db  0x20 ; ' '
0000000000019d05         db  0x42 ; 'B'
0000000000019d06         db  0x0e ; '.'
0000000000019d07         db  0x18 ; '.'
0000000000019d08         db  0x42 ; 'B'
0000000000019d09         db  0x0e ; '.'
0000000000019d0a         db  0x10 ; '.'
0000000000019d0b         db  0x42 ; 'B'
0000000000019d0c         db  0x0e ; '.'
0000000000019d0d         db  0x08 ; '.'
0000000000019d0e         db  0x48 ; 'H'
0000000000019d0f         db  0x0b ; '.'
0000000000019d10         dd         0x00000048                                  ; Length of the record
0000000000019d14         dd         0x00001854                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019d18         db         0xc8, 0x11, 2 dup (0xff)                    ; begin 0xaee0
0000000000019d1c         db         0xdc, 3 dup (0x00)                          ; length 0xdc (end at 0xafbc)
0000000000019d20         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019d21         db  0x42 ; 'B'
0000000000019d22         db  0x0e ; '.'
0000000000019d23         db  0x10 ; '.'
0000000000019d24         db  0x8f ; '.'
0000000000019d25         db  0x02 ; '.'
0000000000019d26         db  0x42 ; 'B'
0000000000019d27         db  0x0e ; '.'
0000000000019d28         db  0x18 ; '.'
0000000000019d29         db  0x8e ; '.'
0000000000019d2a         db  0x03 ; '.'
0000000000019d2b         db  0x42 ; 'B'
0000000000019d2c         db  0x0e ; '.'
0000000000019d2d         db  0x20 ; ' '
0000000000019d2e         db  0x8d ; '.'
0000000000019d2f         db  0x04 ; '.'
0000000000019d30         db  0x42 ; 'B'
0000000000019d31         db  0x0e ; '.'
0000000000019d32         db  0x28 ; '('
0000000000019d33         db  0x8c ; '.'
0000000000019d34         db  0x05 ; '.'
0000000000019d35         db  0x41 ; 'A'
0000000000019d36         db  0x0e ; '.'
0000000000019d37         db  0x30 ; '0'
0000000000019d38         db  0x86 ; '.'
0000000000019d39         db  0x06 ; '.'
0000000000019d3a         db  0x41 ; 'A'
0000000000019d3b         db  0x0e ; '.'
0000000000019d3c         db  0x38 ; '8'
0000000000019d3d         db  0x83 ; '.'
0000000000019d3e         db  0x07 ; '.'
0000000000019d3f         db  0x44 ; 'D'
0000000000019d40         db  0x0e ; '.'
0000000000019d41         db  0x80 ; '.'
0000000000019d42         db  0x01 ; '.'
0000000000019d43         db  0x02 ; '.'
0000000000019d44         db  0xbe ; '.'
0000000000019d45         db  0x0a ; '.'
0000000000019d46         db  0x0e ; '.'
0000000000019d47         db  0x38 ; '8'
0000000000019d48         db  0x41 ; 'A'
0000000000019d49         db  0x0e ; '.'
0000000000019d4a         db  0x30 ; '0'
0000000000019d4b         db  0x41 ; 'A'
0000000000019d4c         db  0x0e ; '.'
0000000000019d4d         db  0x28 ; '('
0000000000019d4e         db  0x42 ; 'B'
0000000000019d4f         db  0x0e ; '.'
0000000000019d50         db  0x20 ; ' '
0000000000019d51         db  0x42 ; 'B'
0000000000019d52         db  0x0e ; '.'
0000000000019d53         db  0x18 ; '.'
0000000000019d54         db  0x42 ; 'B'
0000000000019d55         db  0x0e ; '.'
0000000000019d56         db  0x10 ; '.'
0000000000019d57         db  0x42 ; 'B'
0000000000019d58         db  0x0e ; '.'
0000000000019d59         db  0x08 ; '.'
0000000000019d5a         db  0x41 ; 'A'
0000000000019d5b         db  0x0b ; '.'
0000000000019d5c         dd         0x00000048                                  ; Length of the record
0000000000019d60         dd         0x000018a0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019d64         db         0x5c, 0x12, 2 dup (0xff)                    ; begin 0xafc0
0000000000019d68         db         0x9e, 0x03, 2 dup (0x00)                    ; length 0x39e (end at 0xb35e)
0000000000019d6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019d6d         db  0x42 ; 'B'
0000000000019d6e         db  0x0e ; '.'
0000000000019d6f         db  0x10 ; '.'
0000000000019d70         db  0x8f ; '.'
0000000000019d71         db  0x02 ; '.'
0000000000019d72         db  0x42 ; 'B'
0000000000019d73         db  0x0e ; '.'
0000000000019d74         db  0x18 ; '.'
0000000000019d75         db  0x8e ; '.'
0000000000019d76         db  0x03 ; '.'
0000000000019d77         db  0x42 ; 'B'
0000000000019d78         db  0x0e ; '.'
0000000000019d79         db  0x20 ; ' '
0000000000019d7a         db  0x8d ; '.'
0000000000019d7b         db  0x04 ; '.'
0000000000019d7c         db  0x42 ; 'B'
0000000000019d7d         db  0x0e ; '.'
0000000000019d7e         db  0x28 ; '('
0000000000019d7f         db  0x8c ; '.'
0000000000019d80         db  0x05 ; '.'
0000000000019d81         db  0x44 ; 'D'
0000000000019d82         db  0x0e ; '.'
0000000000019d83         db  0x30 ; '0'
0000000000019d84         db  0x86 ; '.'
0000000000019d85         db  0x06 ; '.'
0000000000019d86         db  0x41 ; 'A'
0000000000019d87         db  0x0e ; '.'
0000000000019d88         db  0x38 ; '8'
0000000000019d89         db  0x83 ; '.'
0000000000019d8a         db  0x07 ; '.'
0000000000019d8b         db  0x4c ; 'L'
0000000000019d8c         db  0x0e ; '.'
0000000000019d8d         db  0xb0 ; '.'
0000000000019d8e         db  0x01 ; '.'
0000000000019d8f         db  0x02 ; '.'
0000000000019d90         db  0xbe ; '.'
0000000000019d91         db  0x0a ; '.'
0000000000019d92         db  0x0e ; '.'
0000000000019d93         db  0x38 ; '8'
0000000000019d94         db  0x41 ; 'A'
0000000000019d95         db  0x0e ; '.'
0000000000019d96         db  0x30 ; '0'
0000000000019d97         db  0x41 ; 'A'
0000000000019d98         db  0x0e ; '.'
0000000000019d99         db  0x28 ; '('
0000000000019d9a         db  0x42 ; 'B'
0000000000019d9b         db  0x0e ; '.'
0000000000019d9c         db  0x20 ; ' '
0000000000019d9d         db  0x42 ; 'B'
0000000000019d9e         db  0x0e ; '.'
0000000000019d9f         db  0x18 ; '.'
0000000000019da0         db  0x42 ; 'B'
0000000000019da1         db  0x0e ; '.'
0000000000019da2         db  0x10 ; '.'
0000000000019da3         db  0x42 ; 'B'
0000000000019da4         db  0x0e ; '.'
0000000000019da5         db  0x08 ; '.'
0000000000019da6         db  0x47 ; 'G'
0000000000019da7         db  0x0b ; '.'
0000000000019da8         dd         0x00000048                                  ; Length of the record
0000000000019dac         dd         0x000018ec                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019db0         db         0xb0, 0x15, 2 dup (0xff)                    ; begin 0xb360
0000000000019db4         db         0x41, 0x01, 2 dup (0x00)                    ; length 0x141 (end at 0xb4a1)
0000000000019db8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019db9         db  0x42 ; 'B'
0000000000019dba         db  0x0e ; '.'
0000000000019dbb         db  0x10 ; '.'
0000000000019dbc         db  0x8f ; '.'
0000000000019dbd         db  0x02 ; '.'
0000000000019dbe         db  0x42 ; 'B'
0000000000019dbf         db  0x0e ; '.'
0000000000019dc0         db  0x18 ; '.'
0000000000019dc1         db  0x8e ; '.'
0000000000019dc2         db  0x03 ; '.'
0000000000019dc3         db  0x42 ; 'B'
0000000000019dc4         db  0x0e ; '.'
0000000000019dc5         db  0x20 ; ' '
0000000000019dc6         db  0x8d ; '.'
0000000000019dc7         db  0x04 ; '.'
0000000000019dc8         db  0x42 ; 'B'
0000000000019dc9         db  0x0e ; '.'
0000000000019dca         db  0x28 ; '('
0000000000019dcb         db  0x8c ; '.'
0000000000019dcc         db  0x05 ; '.'
0000000000019dcd         db  0x41 ; 'A'
0000000000019dce         db  0x0e ; '.'
0000000000019dcf         db  0x30 ; '0'
0000000000019dd0         db  0x86 ; '.'
0000000000019dd1         db  0x06 ; '.'
0000000000019dd2         db  0x41 ; 'A'
0000000000019dd3         db  0x0e ; '.'
0000000000019dd4         db  0x38 ; '8'
0000000000019dd5         db  0x83 ; '.'
0000000000019dd6         db  0x07 ; '.'
0000000000019dd7         db  0x44 ; 'D'
0000000000019dd8         db  0x0e ; '.'
0000000000019dd9         db  0x60 ; '`'
0000000000019dda         db  0x02 ; '.'
0000000000019ddb         db  0xd8 ; '.'
0000000000019ddc         db  0x0a ; '.'
0000000000019ddd         db  0x0e ; '.'
0000000000019dde         db  0x38 ; '8'
0000000000019ddf         db  0x41 ; 'A'
0000000000019de0         db  0x0e ; '.'
0000000000019de1         db  0x30 ; '0'
0000000000019de2         db  0x41 ; 'A'
0000000000019de3         db  0x0e ; '.'
0000000000019de4         db  0x28 ; '('
0000000000019de5         db  0x42 ; 'B'
0000000000019de6         db  0x0e ; '.'
0000000000019de7         db  0x20 ; ' '
0000000000019de8         db  0x42 ; 'B'
0000000000019de9         db  0x0e ; '.'
0000000000019dea         db  0x18 ; '.'
0000000000019deb         db  0x42 ; 'B'
0000000000019dec         db  0x0e ; '.'
0000000000019ded         db  0x10 ; '.'
0000000000019dee         db  0x42 ; 'B'
0000000000019def         db  0x0e ; '.'
0000000000019df0         db  0x08 ; '.'
0000000000019df1         db  0x41 ; 'A'
0000000000019df2         db  0x0b ; '.'
0000000000019df3         db  0x00 ; '.'
0000000000019df4         dd         0x00000040                                  ; Length of the record
0000000000019df8         dd         0x00001938                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019dfc         db         0xb4, 0x16, 2 dup (0xff)                    ; begin 0xb4b0
0000000000019e00         db         0xe6, 3 dup (0x00)                          ; length 0xe6 (end at 0xb596)
0000000000019e04         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019e05         db  0x41 ; 'A'
0000000000019e06         db  0x0e ; '.'
0000000000019e07         db  0x10 ; '.'
0000000000019e08         db  0x86 ; '.'
0000000000019e09         db  0x02 ; '.'
0000000000019e0a         db  0x41 ; 'A'
0000000000019e0b         db  0x0e ; '.'
0000000000019e0c         db  0x18 ; '.'
0000000000019e0d         db  0x83 ; '.'
0000000000019e0e         db  0x03 ; '.'
0000000000019e0f         db  0x47 ; 'G'
0000000000019e10         db  0x0e ; '.'
0000000000019e11         db  0x20 ; ' '
0000000000019e12         db  0x02 ; '.'
0000000000019e13         db  0x4d ; 'M'
0000000000019e14         db  0x0a ; '.'
0000000000019e15         db  0x0e ; '.'
0000000000019e16         db  0x18 ; '.'
0000000000019e17         db  0x41 ; 'A'
0000000000019e18         db  0x0e ; '.'
0000000000019e19         db  0x10 ; '.'
0000000000019e1a         db  0x41 ; 'A'
0000000000019e1b         db  0x0e ; '.'
0000000000019e1c         db  0x08 ; '.'
0000000000019e1d         db  0x48 ; 'H'
0000000000019e1e         db  0x0b ; '.'
0000000000019e1f         db  0x47 ; 'G'
0000000000019e20         db  0x0a ; '.'
0000000000019e21         db  0x0e ; '.'
0000000000019e22         db  0x18 ; '.'
0000000000019e23         db  0x41 ; 'A'
0000000000019e24         db  0x0e ; '.'
0000000000019e25         db  0x10 ; '.'
0000000000019e26         db  0x41 ; 'A'
0000000000019e27         db  0x0e ; '.'
0000000000019e28         db  0x08 ; '.'
0000000000019e29         db  0x47 ; 'G'
0000000000019e2a         db  0x0b ; '.'
0000000000019e2b         db  0x7c ; '|'
0000000000019e2c         db  0x0a ; '.'
0000000000019e2d         db  0x0e ; '.'
0000000000019e2e         db  0x18 ; '.'
0000000000019e2f         db  0x43 ; 'C'
0000000000019e30         db  0x0e ; '.'
0000000000019e31         db  0x10 ; '.'
0000000000019e32         db  0x41 ; 'A'
0000000000019e33         db  0x0e ; '.'
0000000000019e34         db  0x08 ; '.'
0000000000019e35         db  0x48 ; 'H'
0000000000019e36         db  0x0b ; '.'
0000000000019e37         db  0x00 ; '.'
0000000000019e38         dd         0x00000024                                  ; Length of the record
0000000000019e3c         dd         0x0000197c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019e40         db         0x60, 0x17, 2 dup (0xff)                    ; begin 0xb5a0
0000000000019e44         db         0x10, 0x01, 2 dup (0x00)                    ; length 0x110 (end at 0xb6b0)
0000000000019e48         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019e49         db  0x02 ; '.'
0000000000019e4a         db  0x51 ; 'Q'
0000000000019e4b         db  0x0e ; '.'
0000000000019e4c         db  0x10 ; '.'
0000000000019e4d         db  0x83 ; '.'
0000000000019e4e         db  0x02 ; '.'
0000000000019e4f         db  0x02 ; '.'
0000000000019e50         db  0x5c ; '\'
0000000000019e51         db  0x0e ; '.'
0000000000019e52         db  0x08 ; '.'
0000000000019e53         db  0x43 ; 'C'
0000000000019e54         db  0xc3 ; '.'
0000000000019e55         db  0x78 ; 'x'
0000000000019e56         db  0x0e ; '.'
0000000000019e57         db  0x10 ; '.'
0000000000019e58         db  0x83 ; '.'
0000000000019e59         db  0x02 ; '.'
0000000000019e5a         db  0x4c ; 'L'
0000000000019e5b         db  0x0e ; '.'
0000000000019e5c         db  0x08 ; '.'
0000000000019e5d         db  0x44 ; 'D'
0000000000019e5e         db  0xc3 ; '.'
0000000000019e5f         db  0x00 ; '.'
0000000000019e60         dd         0x00000034                                  ; Length of the record
0000000000019e64         dd         0x000019a4                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019e68         db         0x48, 0x18, 2 dup (0xff)                    ; begin 0xb6b0
0000000000019e6c         db         0xcf, 3 dup (0x00)                          ; length 0xcf (end at 0xb77f)
0000000000019e70         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019e71         db  0x42 ; 'B'
0000000000019e72         db  0x0e ; '.'
0000000000019e73         db  0x10 ; '.'
0000000000019e74         db  0x8c ; '.'
0000000000019e75         db  0x02 ; '.'
0000000000019e76         db  0x44 ; 'D'
0000000000019e77         db  0x0e ; '.'
0000000000019e78         db  0x18 ; '.'
0000000000019e79         db  0x86 ; '.'
0000000000019e7a         db  0x03 ; '.'
0000000000019e7b         db  0x41 ; 'A'
0000000000019e7c         db  0x0e ; '.'
0000000000019e7d         db  0x20 ; ' '
0000000000019e7e         db  0x83 ; '.'
0000000000019e7f         db  0x04 ; '.'
0000000000019e80         db  0x02 ; '.'
0000000000019e81         db  0x9f ; '.'
0000000000019e82         db  0x0a ; '.'
0000000000019e83         db  0x0e ; '.'
0000000000019e84         db  0x18 ; '.'
0000000000019e85         db  0x41 ; 'A'
0000000000019e86         db  0x0e ; '.'
0000000000019e87         db  0x10 ; '.'
0000000000019e88         db  0x42 ; 'B'
0000000000019e89         db  0x0e ; '.'
0000000000019e8a         db  0x08 ; '.'
0000000000019e8b         db  0x47 ; 'G'
0000000000019e8c         db  0x0b ; '.'
0000000000019e8d         db  0x59 ; 'Y'
0000000000019e8e         db  0x0e ; '.'
0000000000019e8f         db  0x18 ; '.'
0000000000019e90         db  0x43 ; 'C'
0000000000019e91         db  0x0e ; '.'
0000000000019e92         db  0x10 ; '.'
0000000000019e93         db  0x42 ; 'B'
0000000000019e94         db  0x0e ; '.'
0000000000019e95         db  0x08 ; '.'
0000000000019e96         db  0x00 ; '.'
0000000000019e97         db  0x00 ; '.'
0000000000019e98         dd         0x0000004c                                  ; Length of the record
0000000000019e9c         dd         0x000019dc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019ea0         db         0xe0, 0x18, 2 dup (0xff)                    ; begin 0xb780
0000000000019ea4         db         0x9f, 0x07, 2 dup (0x00)                    ; length 0x79f (end at 0xbf1f)
0000000000019ea8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019ea9         db  0x42 ; 'B'
0000000000019eaa         db  0x0e ; '.'
0000000000019eab         db  0x10 ; '.'
0000000000019eac         db  0x8f ; '.'
0000000000019ead         db  0x02 ; '.'
0000000000019eae         db  0x42 ; 'B'
0000000000019eaf         db  0x0e ; '.'
0000000000019eb0         db  0x18 ; '.'
0000000000019eb1         db  0x8e ; '.'
0000000000019eb2         db  0x03 ; '.'
0000000000019eb3         db  0x45 ; 'E'
0000000000019eb4         db  0x0e ; '.'
0000000000019eb5         db  0x20 ; ' '
0000000000019eb6         db  0x8d ; '.'
0000000000019eb7         db  0x04 ; '.'
0000000000019eb8         db  0x42 ; 'B'
0000000000019eb9         db  0x0e ; '.'
0000000000019eba         db  0x28 ; '('
0000000000019ebb         db  0x8c ; '.'
0000000000019ebc         db  0x05 ; '.'
0000000000019ebd         db  0x44 ; 'D'
0000000000019ebe         db  0x0e ; '.'
0000000000019ebf         db  0x30 ; '0'
0000000000019ec0         db  0x86 ; '.'
0000000000019ec1         db  0x06 ; '.'
0000000000019ec2         db  0x41 ; 'A'
0000000000019ec3         db  0x0e ; '.'
0000000000019ec4         db  0x38 ; '8'
0000000000019ec5         db  0x83 ; '.'
0000000000019ec6         db  0x07 ; '.'
0000000000019ec7         db  0x4a ; 'J'
0000000000019ec8         db  0x0e ; '.'
0000000000019ec9         db  0x80 ; '.'
0000000000019eca         db  0x01 ; '.'
0000000000019ecb         db  0x03 ; '.'
0000000000019ecc         db  0x3b ; ';'
0000000000019ecd         db  0x01 ; '.'
0000000000019ece         db  0x0a ; '.'
0000000000019ecf         db  0x0e ; '.'
0000000000019ed0         db  0x38 ; '8'
0000000000019ed1         db  0x41 ; 'A'
0000000000019ed2         db  0x0e ; '.'
0000000000019ed3         db  0x30 ; '0'
0000000000019ed4         db  0x41 ; 'A'
0000000000019ed5         db  0x0e ; '.'
0000000000019ed6         db  0x28 ; '('
0000000000019ed7         db  0x42 ; 'B'
0000000000019ed8         db  0x0e ; '.'
0000000000019ed9         db  0x20 ; ' '
0000000000019eda         db  0x42 ; 'B'
0000000000019edb         db  0x0e ; '.'
0000000000019edc         db  0x18 ; '.'
0000000000019edd         db  0x42 ; 'B'
0000000000019ede         db  0x0e ; '.'
0000000000019edf         db  0x10 ; '.'
0000000000019ee0         db  0x42 ; 'B'
0000000000019ee1         db  0x0e ; '.'
0000000000019ee2         db  0x08 ; '.'
0000000000019ee3         db  0x41 ; 'A'
0000000000019ee4         db  0x0b ; '.'
0000000000019ee5         db  0x00 ; '.'
0000000000019ee6         db  0x00 ; '.'
0000000000019ee7         db  0x00 ; '.'
0000000000019ee8         dd         0x0000004c                                  ; Length of the record
0000000000019eec         dd         0x00001a2c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019ef0         db         0x30, 0x20, 2 dup (0xff)                    ; begin 0xbf20
0000000000019ef4         db         0x3b, 0x02, 2 dup (0x00)                    ; length 0x23b (end at 0xc15b)
0000000000019ef8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019ef9         db  0x42 ; 'B'
0000000000019efa         db  0x0e ; '.'
0000000000019efb         db  0x10 ; '.'
0000000000019efc         db  0x8f ; '.'
0000000000019efd         db  0x02 ; '.'
0000000000019efe         db  0x42 ; 'B'
0000000000019eff         db  0x0e ; '.'
0000000000019f00         db  0x18 ; '.'
0000000000019f01         db  0x8e ; '.'
0000000000019f02         db  0x03 ; '.'
0000000000019f03         db  0x45 ; 'E'
0000000000019f04         db  0x0e ; '.'
0000000000019f05         db  0x20 ; ' '
0000000000019f06         db  0x8d ; '.'
0000000000019f07         db  0x04 ; '.'
0000000000019f08         db  0x42 ; 'B'
0000000000019f09         db  0x0e ; '.'
0000000000019f0a         db  0x28 ; '('
0000000000019f0b         db  0x8c ; '.'
0000000000019f0c         db  0x05 ; '.'
0000000000019f0d         db  0x45 ; 'E'
0000000000019f0e         db  0x0e ; '.'
0000000000019f0f         db  0x30 ; '0'
0000000000019f10         db  0x86 ; '.'
0000000000019f11         db  0x06 ; '.'
0000000000019f12         db  0x41 ; 'A'
0000000000019f13         db  0x0e ; '.'
0000000000019f14         db  0x38 ; '8'
0000000000019f15         db  0x83 ; '.'
0000000000019f16         db  0x07 ; '.'
0000000000019f17         db  0x48 ; 'H'
0000000000019f18         db  0x0e ; '.'
0000000000019f19         db  0x80 ; '.'
0000000000019f1a         db  0x01 ; '.'
0000000000019f1b         db  0x03 ; '.'
0000000000019f1c         db  0xf3 ; '.'
0000000000019f1d         db  0x01 ; '.'
0000000000019f1e         db  0x0a ; '.'
0000000000019f1f         db  0x0e ; '.'
0000000000019f20         db  0x38 ; '8'
0000000000019f21         db  0x41 ; 'A'
0000000000019f22         db  0x0e ; '.'
0000000000019f23         db  0x30 ; '0'
0000000000019f24         db  0x41 ; 'A'
0000000000019f25         db  0x0e ; '.'
0000000000019f26         db  0x28 ; '('
0000000000019f27         db  0x42 ; 'B'
0000000000019f28         db  0x0e ; '.'
0000000000019f29         db  0x20 ; ' '
0000000000019f2a         db  0x42 ; 'B'
0000000000019f2b         db  0x0e ; '.'
0000000000019f2c         db  0x18 ; '.'
0000000000019f2d         db  0x42 ; 'B'
0000000000019f2e         db  0x0e ; '.'
0000000000019f2f         db  0x10 ; '.'
0000000000019f30         db  0x42 ; 'B'
0000000000019f31         db  0x0e ; '.'
0000000000019f32         db  0x08 ; '.'
0000000000019f33         db  0x4a ; 'J'
0000000000019f34         db  0x0b ; '.'
0000000000019f35         db  0x00 ; '.'
0000000000019f36         db  0x00 ; '.'
0000000000019f37         db  0x00 ; '.'
0000000000019f38         dd         0x0000004c                                  ; Length of the record
0000000000019f3c         dd         0x00001a7c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019f40         db         0x20, 0x22, 2 dup (0xff)                    ; begin 0xc160
0000000000019f44         db         0x91, 0x0b, 2 dup (0x00)                    ; length 0xb91 (end at 0xccf1)
0000000000019f48         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019f49         db  0x42 ; 'B'
0000000000019f4a         db  0x0e ; '.'
0000000000019f4b         db  0x10 ; '.'
0000000000019f4c         db  0x8f ; '.'
0000000000019f4d         db  0x02 ; '.'
0000000000019f4e         db  0x42 ; 'B'
0000000000019f4f         db  0x0e ; '.'
0000000000019f50         db  0x18 ; '.'
0000000000019f51         db  0x8e ; '.'
0000000000019f52         db  0x03 ; '.'
0000000000019f53         db  0x45 ; 'E'
0000000000019f54         db  0x0e ; '.'
0000000000019f55         db  0x20 ; ' '
0000000000019f56         db  0x8d ; '.'
0000000000019f57         db  0x04 ; '.'
0000000000019f58         db  0x42 ; 'B'
0000000000019f59         db  0x0e ; '.'
0000000000019f5a         db  0x28 ; '('
0000000000019f5b         db  0x8c ; '.'
0000000000019f5c         db  0x05 ; '.'
0000000000019f5d         db  0x46 ; 'F'
0000000000019f5e         db  0x0e ; '.'
0000000000019f5f         db  0x30 ; '0'
0000000000019f60         db  0x86 ; '.'
0000000000019f61         db  0x06 ; '.'
0000000000019f62         db  0x41 ; 'A'
0000000000019f63         db  0x0e ; '.'
0000000000019f64         db  0x38 ; '8'
0000000000019f65         db  0x83 ; '.'
0000000000019f66         db  0x07 ; '.'
0000000000019f67         db  0x47 ; 'G'
0000000000019f68         db  0x0e ; '.'
0000000000019f69         db  0xc0 ; '.'
0000000000019f6a         db  0x02 ; '.'
0000000000019f6b         db  0x03 ; '.'
0000000000019f6c         db  0x17 ; '.'
0000000000019f6d         db  0x04 ; '.'
0000000000019f6e         db  0x0a ; '.'
0000000000019f6f         db  0x0e ; '.'
0000000000019f70         db  0x38 ; '8'
0000000000019f71         db  0x41 ; 'A'
0000000000019f72         db  0x0e ; '.'
0000000000019f73         db  0x30 ; '0'
0000000000019f74         db  0x41 ; 'A'
0000000000019f75         db  0x0e ; '.'
0000000000019f76         db  0x28 ; '('
0000000000019f77         db  0x42 ; 'B'
0000000000019f78         db  0x0e ; '.'
0000000000019f79         db  0x20 ; ' '
0000000000019f7a         db  0x42 ; 'B'
0000000000019f7b         db  0x0e ; '.'
0000000000019f7c         db  0x18 ; '.'
0000000000019f7d         db  0x42 ; 'B'
0000000000019f7e         db  0x0e ; '.'
0000000000019f7f         db  0x10 ; '.'
0000000000019f80         db  0x42 ; 'B'
0000000000019f81         db  0x0e ; '.'
0000000000019f82         db  0x08 ; '.'
0000000000019f83         db  0x46 ; 'F'
0000000000019f84         db  0x0b ; '.'
0000000000019f85         db  0x00 ; '.'
0000000000019f86         db  0x00 ; '.'
0000000000019f87         db  0x00 ; '.'
0000000000019f88         dd         0x00000030                                  ; Length of the record
0000000000019f8c         dd         0x00001acc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019f90         db         0x70, 0x2d, 2 dup (0xff)                    ; begin 0xcd00
0000000000019f94         db         0x87, 3 dup (0x00)                          ; length 0x87 (end at 0xcd87)
0000000000019f98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019f99         db  0x47 ; 'G'
0000000000019f9a         db  0x0e ; '.'
0000000000019f9b         db  0x10 ; '.'
0000000000019f9c         db  0x86 ; '.'
0000000000019f9d         db  0x02 ; '.'
0000000000019f9e         db  0x41 ; 'A'
0000000000019f9f         db  0x0e ; '.'
0000000000019fa0         db  0x18 ; '.'
0000000000019fa1         db  0x83 ; '.'
0000000000019fa2         db  0x03 ; '.'
0000000000019fa3         db  0x4a ; 'J'
0000000000019fa4         db  0x0e ; '.'
0000000000019fa5         db  0x20 ; ' '
0000000000019fa6         db  0x02 ; '.'
0000000000019fa7         db  0x4e ; 'N'
0000000000019fa8         db  0x0e ; '.'
0000000000019fa9         db  0x18 ; '.'
0000000000019faa         db  0x41 ; 'A'
0000000000019fab         db  0x0e ; '.'
0000000000019fac         db  0x10 ; '.'
0000000000019fad         db  0x41 ; 'A'
0000000000019fae         db  0x0e ; '.'
0000000000019faf         db  0x08 ; '.'
0000000000019fb0         db  0x46 ; 'F'
0000000000019fb1         db  0xc3 ; '.'
0000000000019fb2         db  0xc6 ; '.'
0000000000019fb3         db  0x58 ; 'X'
0000000000019fb4         db  0x0e ; '.'
0000000000019fb5         db  0x20 ; ' '
0000000000019fb6         db  0x83 ; '.'
0000000000019fb7         db  0x03 ; '.'
0000000000019fb8         db  0x86 ; '.'
0000000000019fb9         db  0x02 ; '.'
0000000000019fba         db  0x00 ; '.'
0000000000019fbb         db  0x00 ; '.'
0000000000019fbc         dd         0x00000028                                  ; Length of the record
0000000000019fc0         dd         0x00001b00                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019fc4         db         0xcc, 0x2d, 2 dup (0xff)                    ; begin 0xcd90
0000000000019fc8         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0xcddf)
0000000000019fcc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019fcd         db  0x42 ; 'B'
0000000000019fce         db  0x0e ; '.'
0000000000019fcf         db  0x10 ; '.'
0000000000019fd0         db  0x8c ; '.'
0000000000019fd1         db  0x02 ; '.'
0000000000019fd2         db  0x41 ; 'A'
0000000000019fd3         db  0x0e ; '.'
0000000000019fd4         db  0x18 ; '.'
0000000000019fd5         db  0x86 ; '.'
0000000000019fd6         db  0x03 ; '.'
0000000000019fd7         db  0x44 ; 'D'
0000000000019fd8         db  0x0e ; '.'
0000000000019fd9         db  0x20 ; ' '
0000000000019fda         db  0x83 ; '.'
0000000000019fdb         db  0x04 ; '.'
0000000000019fdc         db  0x7c ; '|'
0000000000019fdd         db  0x0e ; '.'
0000000000019fde         db  0x18 ; '.'
0000000000019fdf         db  0x45 ; 'E'
0000000000019fe0         db  0x0e ; '.'
0000000000019fe1         db  0x10 ; '.'
0000000000019fe2         db  0x42 ; 'B'
0000000000019fe3         db  0x0e ; '.'
0000000000019fe4         db  0x08 ; '.'
0000000000019fe5         db  0x00 ; '.'
0000000000019fe6         db  0x00 ; '.'
0000000000019fe7         db  0x00 ; '.'
0000000000019fe8         dd         0x0000002c                                  ; Length of the record
0000000000019fec         dd         0x00001b2c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
0000000000019ff0         db         0xf0, 0x2d, 2 dup (0xff)                    ; begin 0xcde0
0000000000019ff4         db         0x94, 3 dup (0x00)                          ; length 0x94 (end at 0xce74)
0000000000019ff8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000019ff9         db  0x42 ; 'B'
0000000000019ffa         db  0x0e ; '.'
0000000000019ffb         db  0x10 ; '.'
0000000000019ffc         db  0x8c ; '.'
0000000000019ffd         db  0x02 ; '.'
0000000000019ffe         db  0x41 ; 'A'
0000000000019fff         db  0x0e ; '.'
000000000001a000         db  0x18 ; '.'
000000000001a001         db  0x86 ; '.'
000000000001a002         db  0x03 ; '.'
000000000001a003         db  0x41 ; 'A'
000000000001a004         db  0x0e ; '.'
000000000001a005         db  0x20 ; ' '
000000000001a006         db  0x83 ; '.'
000000000001a007         db  0x04 ; '.'
000000000001a008         db  0x02 ; '.'
000000000001a009         db  0x6d ; 'm'
000000000001a00a         db  0x0a ; '.'
000000000001a00b         db  0x0e ; '.'
000000000001a00c         db  0x18 ; '.'
000000000001a00d         db  0x41 ; 'A'
000000000001a00e         db  0x0e ; '.'
000000000001a00f         db  0x10 ; '.'
000000000001a010         db  0x42 ; 'B'
000000000001a011         db  0x0e ; '.'
000000000001a012         db  0x08 ; '.'
000000000001a013         db  0x41 ; 'A'
000000000001a014         db  0x0b ; '.'
000000000001a015         db  0x00 ; '.'
000000000001a016         db  0x00 ; '.'
000000000001a017         db  0x00 ; '.'
000000000001a018         dd         0x00000030                                  ; Length of the record
000000000001a01c         dd         0x00001b5c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a020         db         0x60, 0x2e, 2 dup (0xff)                    ; begin 0xce80
000000000001a024         db         0x4c, 3 dup (0x00)                          ; length 0x4c (end at 0xcecc)
000000000001a028         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a029         db  0x41 ; 'A'
000000000001a02a         db  0x0e ; '.'
000000000001a02b         db  0x10 ; '.'
000000000001a02c         db  0x86 ; '.'
000000000001a02d         db  0x02 ; '.'
000000000001a02e         db  0x41 ; 'A'
000000000001a02f         db  0x0e ; '.'
000000000001a030         db  0x18 ; '.'
000000000001a031         db  0x83 ; '.'
000000000001a032         db  0x03 ; '.'
000000000001a033         db  0x4d ; 'M'
000000000001a034         db  0x0e ; '.'
000000000001a035         db  0x20 ; ' '
000000000001a036         db  0x67 ; 'g'
000000000001a037         db  0x0a ; '.'
000000000001a038         db  0x0e ; '.'
000000000001a039         db  0x18 ; '.'
000000000001a03a         db  0x43 ; 'C'
000000000001a03b         db  0x0e ; '.'
000000000001a03c         db  0x10 ; '.'
000000000001a03d         db  0x41 ; 'A'
000000000001a03e         db  0x0e ; '.'
000000000001a03f         db  0x08 ; '.'
000000000001a040         db  0x46 ; 'F'
000000000001a041         db  0x0b ; '.'
000000000001a042         db  0x44 ; 'D'
000000000001a043         db  0x0e ; '.'
000000000001a044         db  0x18 ; '.'
000000000001a045         db  0x46 ; 'F'
000000000001a046         db  0x0e ; '.'
000000000001a047         db  0x10 ; '.'
000000000001a048         db  0x41 ; 'A'
000000000001a049         db  0x0e ; '.'
000000000001a04a         db  0x08 ; '.'
000000000001a04b         db  0x00 ; '.'
000000000001a04c         dd         0x00000040                                  ; Length of the record
000000000001a050         dd         0x00001b90                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a054         db         0x7c, 0x2e, 2 dup (0xff)                    ; begin 0xced0
000000000001a058         db         0x0d, 0x08, 2 dup (0x00)                    ; length 0x80d (end at 0xd6dd)
000000000001a05c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a05d         db  0x42 ; 'B'
000000000001a05e         db  0x0e ; '.'
000000000001a05f         db  0x10 ; '.'
000000000001a060         db  0x8e ; '.'
000000000001a061         db  0x02 ; '.'
000000000001a062         db  0x42 ; 'B'
000000000001a063         db  0x0e ; '.'
000000000001a064         db  0x18 ; '.'
000000000001a065         db  0x8d ; '.'
000000000001a066         db  0x03 ; '.'
000000000001a067         db  0x45 ; 'E'
000000000001a068         db  0x0e ; '.'
000000000001a069         db  0x20 ; ' '
000000000001a06a         db  0x8c ; '.'
000000000001a06b         db  0x04 ; '.'
000000000001a06c         db  0x41 ; 'A'
000000000001a06d         db  0x0e ; '.'
000000000001a06e         db  0x28 ; '('
000000000001a06f         db  0x86 ; '.'
000000000001a070         db  0x05 ; '.'
000000000001a071         db  0x44 ; 'D'
000000000001a072         db  0x0e ; '.'
000000000001a073         db  0x30 ; '0'
000000000001a074         db  0x83 ; '.'
000000000001a075         db  0x06 ; '.'
000000000001a076         db  0x4a ; 'J'
000000000001a077         db  0x0e ; '.'
000000000001a078         db  0x40 ; '@'
000000000001a079         db  0x02 ; '.'
000000000001a07a         db  0xd2 ; '.'
000000000001a07b         db  0x0a ; '.'
000000000001a07c         db  0x0e ; '.'
000000000001a07d         db  0x30 ; '0'
000000000001a07e         db  0x41 ; 'A'
000000000001a07f         db  0x0e ; '.'
000000000001a080         db  0x28 ; '('
000000000001a081         db  0x41 ; 'A'
000000000001a082         db  0x0e ; '.'
000000000001a083         db  0x20 ; ' '
000000000001a084         db  0x42 ; 'B'
000000000001a085         db  0x0e ; '.'
000000000001a086         db  0x18 ; '.'
000000000001a087         db  0x42 ; 'B'
000000000001a088         db  0x0e ; '.'
000000000001a089         db  0x10 ; '.'
000000000001a08a         db  0x42 ; 'B'
000000000001a08b         db  0x0e ; '.'
000000000001a08c         db  0x08 ; '.'
000000000001a08d         db  0x46 ; 'F'
000000000001a08e         db  0x0b ; '.'
000000000001a08f         db  0x00 ; '.'
000000000001a090         dd         0x0000005c                                  ; Length of the record
000000000001a094         dd         0x00001bd4                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a098         db         0x48, 0x36, 2 dup (0xff)                    ; begin 0xd6e0
000000000001a09c         db         0x6a, 0x02, 2 dup (0x00)                    ; length 0x26a (end at 0xd94a)
000000000001a0a0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a0a1         db  0x42 ; 'B'
000000000001a0a2         db  0x0e ; '.'
000000000001a0a3         db  0x10 ; '.'
000000000001a0a4         db  0x8f ; '.'
000000000001a0a5         db  0x02 ; '.'
000000000001a0a6         db  0x42 ; 'B'
000000000001a0a7         db  0x0e ; '.'
000000000001a0a8         db  0x18 ; '.'
000000000001a0a9         db  0x8e ; '.'
000000000001a0aa         db  0x03 ; '.'
000000000001a0ab         db  0x45 ; 'E'
000000000001a0ac         db  0x0e ; '.'
000000000001a0ad         db  0x20 ; ' '
000000000001a0ae         db  0x8d ; '.'
000000000001a0af         db  0x04 ; '.'
000000000001a0b0         db  0x42 ; 'B'
000000000001a0b1         db  0x0e ; '.'
000000000001a0b2         db  0x28 ; '('
000000000001a0b3         db  0x8c ; '.'
000000000001a0b4         db  0x05 ; '.'
000000000001a0b5         db  0x44 ; 'D'
000000000001a0b6         db  0x0e ; '.'
000000000001a0b7         db  0x30 ; '0'
000000000001a0b8         db  0x86 ; '.'
000000000001a0b9         db  0x06 ; '.'
000000000001a0ba         db  0x41 ; 'A'
000000000001a0bb         db  0x0e ; '.'
000000000001a0bc         db  0x38 ; '8'
000000000001a0bd         db  0x83 ; '.'
000000000001a0be         db  0x07 ; '.'
000000000001a0bf         db  0x4f ; 'O'
000000000001a0c0         db  0x0e ; '.'
000000000001a0c1         db  0x90 ; '.'
000000000001a0c2         db  0x01 ; '.'
000000000001a0c3         db  0x02 ; '.'
000000000001a0c4         db  0x5b ; '['
000000000001a0c5         db  0x0e ; '.'
000000000001a0c6         db  0x98 ; '.'
000000000001a0c7         db  0x01 ; '.'
000000000001a0c8         db  0x45 ; 'E'
000000000001a0c9         db  0x0e ; '.'
000000000001a0ca         db  0xa0 ; '.'
000000000001a0cb         db  0x01 ; '.'
000000000001a0cc         db  0x6c ; 'l'
000000000001a0cd         db  0x0e ; '.'
000000000001a0ce         db  0x98 ; '.'
000000000001a0cf         db  0x01 ; '.'
000000000001a0d0         db  0x41 ; 'A'
000000000001a0d1         db  0x0e ; '.'
000000000001a0d2         db  0x90 ; '.'
000000000001a0d3         db  0x01 ; '.'
000000000001a0d4         db  0x03 ; '.'
000000000001a0d5         db  0x31 ; '1'
000000000001a0d6         db  0x01 ; '.'
000000000001a0d7         db  0x0a ; '.'
000000000001a0d8         db  0x0e ; '.'
000000000001a0d9         db  0x38 ; '8'
000000000001a0da         db  0x41 ; 'A'
000000000001a0db         db  0x0e ; '.'
000000000001a0dc         db  0x30 ; '0'
000000000001a0dd         db  0x41 ; 'A'
000000000001a0de         db  0x0e ; '.'
000000000001a0df         db  0x28 ; '('
000000000001a0e0         db  0x42 ; 'B'
000000000001a0e1         db  0x0e ; '.'
000000000001a0e2         db  0x20 ; ' '
000000000001a0e3         db  0x42 ; 'B'
000000000001a0e4         db  0x0e ; '.'
000000000001a0e5         db  0x18 ; '.'
000000000001a0e6         db  0x42 ; 'B'
000000000001a0e7         db  0x0e ; '.'
000000000001a0e8         db  0x10 ; '.'
000000000001a0e9         db  0x42 ; 'B'
000000000001a0ea         db  0x0e ; '.'
000000000001a0eb         db  0x08 ; '.'
000000000001a0ec         db  0x49 ; 'I'
000000000001a0ed         db  0x0b ; '.'
000000000001a0ee         db  0x00 ; '.'
000000000001a0ef         db  0x00 ; '.'
000000000001a0f0         dd         0x0000004c                                  ; Length of the record
000000000001a0f4         dd         0x00001c34                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a0f8         db         0x58, 0x38, 2 dup (0xff)                    ; begin 0xd950
000000000001a0fc         db         0x27, 0x05, 2 dup (0x00)                    ; length 0x527 (end at 0xde77)
000000000001a100         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a101         db  0x42 ; 'B'
000000000001a102         db  0x0e ; '.'
000000000001a103         db  0x10 ; '.'
000000000001a104         db  0x8f ; '.'
000000000001a105         db  0x02 ; '.'
000000000001a106         db  0x42 ; 'B'
000000000001a107         db  0x0e ; '.'
000000000001a108         db  0x18 ; '.'
000000000001a109         db  0x8e ; '.'
000000000001a10a         db  0x03 ; '.'
000000000001a10b         db  0x45 ; 'E'
000000000001a10c         db  0x0e ; '.'
000000000001a10d         db  0x20 ; ' '
000000000001a10e         db  0x8d ; '.'
000000000001a10f         db  0x04 ; '.'
000000000001a110         db  0x42 ; 'B'
000000000001a111         db  0x0e ; '.'
000000000001a112         db  0x28 ; '('
000000000001a113         db  0x8c ; '.'
000000000001a114         db  0x05 ; '.'
000000000001a115         db  0x41 ; 'A'
000000000001a116         db  0x0e ; '.'
000000000001a117         db  0x30 ; '0'
000000000001a118         db  0x86 ; '.'
000000000001a119         db  0x06 ; '.'
000000000001a11a         db  0x41 ; 'A'
000000000001a11b         db  0x0e ; '.'
000000000001a11c         db  0x38 ; '8'
000000000001a11d         db  0x83 ; '.'
000000000001a11e         db  0x07 ; '.'
000000000001a11f         db  0x4c ; 'L'
000000000001a120         db  0x0e ; '.'
000000000001a121         db  0xb0 ; '.'
000000000001a122         db  0x03 ; '.'
000000000001a123         db  0x03 ; '.'
000000000001a124         db  0x82 ; '.'
000000000001a125         db  0x04 ; '.'
000000000001a126         db  0x0a ; '.'
000000000001a127         db  0x0e ; '.'
000000000001a128         db  0x38 ; '8'
000000000001a129         db  0x41 ; 'A'
000000000001a12a         db  0x0e ; '.'
000000000001a12b         db  0x30 ; '0'
000000000001a12c         db  0x41 ; 'A'
000000000001a12d         db  0x0e ; '.'
000000000001a12e         db  0x28 ; '('
000000000001a12f         db  0x42 ; 'B'
000000000001a130         db  0x0e ; '.'
000000000001a131         db  0x20 ; ' '
000000000001a132         db  0x42 ; 'B'
000000000001a133         db  0x0e ; '.'
000000000001a134         db  0x18 ; '.'
000000000001a135         db  0x42 ; 'B'
000000000001a136         db  0x0e ; '.'
000000000001a137         db  0x10 ; '.'
000000000001a138         db  0x42 ; 'B'
000000000001a139         db  0x0e ; '.'
000000000001a13a         db  0x08 ; '.'
000000000001a13b         db  0x41 ; 'A'
000000000001a13c         db  0x0b ; '.'
000000000001a13d         db  0x00 ; '.'
000000000001a13e         db  0x00 ; '.'
000000000001a13f         db  0x00 ; '.'
000000000001a140         dd         0x00000038                                  ; Length of the record
000000000001a144         dd         0x00001c84                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a148         db         0x38, 0x3d, 2 dup (0xff)                    ; begin 0xde80
000000000001a14c         db         0x54, 0x02, 2 dup (0x00)                    ; length 0x254 (end at 0xe0d4)
000000000001a150         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a151         db  0x46 ; 'F'
000000000001a152         db  0x0e ; '.'
000000000001a153         db  0x10 ; '.'
000000000001a154         db  0x8d ; '.'
000000000001a155         db  0x02 ; '.'
000000000001a156         db  0x42 ; 'B'
000000000001a157         db  0x0e ; '.'
000000000001a158         db  0x18 ; '.'
000000000001a159         db  0x8c ; '.'
000000000001a15a         db  0x03 ; '.'
000000000001a15b         db  0x45 ; 'E'
000000000001a15c         db  0x0e ; '.'
000000000001a15d         db  0x20 ; ' '
000000000001a15e         db  0x86 ; '.'
000000000001a15f         db  0x04 ; '.'
000000000001a160         db  0x41 ; 'A'
000000000001a161         db  0x0e ; '.'
000000000001a162         db  0x28 ; '('
000000000001a163         db  0x83 ; '.'
000000000001a164         db  0x05 ; '.'
000000000001a165         db  0x44 ; 'D'
000000000001a166         db  0x0e ; '.'
000000000001a167         db  0x30 ; '0'
000000000001a168         db  0x02 ; '.'
000000000001a169         db  0xe4 ; '.'
000000000001a16a         db  0x0a ; '.'
000000000001a16b         db  0x0e ; '.'
000000000001a16c         db  0x28 ; '('
000000000001a16d         db  0x43 ; 'C'
000000000001a16e         db  0x0e ; '.'
000000000001a16f         db  0x20 ; ' '
000000000001a170         db  0x41 ; 'A'
000000000001a171         db  0x0e ; '.'
000000000001a172         db  0x18 ; '.'
000000000001a173         db  0x42 ; 'B'
000000000001a174         db  0x0e ; '.'
000000000001a175         db  0x10 ; '.'
000000000001a176         db  0x42 ; 'B'
000000000001a177         db  0x0e ; '.'
000000000001a178         db  0x08 ; '.'
000000000001a179         db  0x42 ; 'B'
000000000001a17a         db  0x0b ; '.'
000000000001a17b         db  0x00 ; '.'
000000000001a17c         dd         0x0000004c                                  ; Length of the record
000000000001a180         dd         0x00001cc0                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a184         db         0x5c, 0x3f, 2 dup (0xff)                    ; begin 0xe0e0
000000000001a188         db         0x51, 0x07, 2 dup (0x00)                    ; length 0x751 (end at 0xe831)
000000000001a18c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a18d         db  0x42 ; 'B'
000000000001a18e         db  0x0e ; '.'
000000000001a18f         db  0x10 ; '.'
000000000001a190         db  0x8f ; '.'
000000000001a191         db  0x02 ; '.'
000000000001a192         db  0x42 ; 'B'
000000000001a193         db  0x0e ; '.'
000000000001a194         db  0x18 ; '.'
000000000001a195         db  0x8e ; '.'
000000000001a196         db  0x03 ; '.'
000000000001a197         db  0x45 ; 'E'
000000000001a198         db  0x0e ; '.'
000000000001a199         db  0x20 ; ' '
000000000001a19a         db  0x8d ; '.'
000000000001a19b         db  0x04 ; '.'
000000000001a19c         db  0x42 ; 'B'
000000000001a19d         db  0x0e ; '.'
000000000001a19e         db  0x28 ; '('
000000000001a19f         db  0x8c ; '.'
000000000001a1a0         db  0x05 ; '.'
000000000001a1a1         db  0x41 ; 'A'
000000000001a1a2         db  0x0e ; '.'
000000000001a1a3         db  0x30 ; '0'
000000000001a1a4         db  0x86 ; '.'
000000000001a1a5         db  0x06 ; '.'
000000000001a1a6         db  0x41 ; 'A'
000000000001a1a7         db  0x0e ; '.'
000000000001a1a8         db  0x38 ; '8'
000000000001a1a9         db  0x83 ; '.'
000000000001a1aa         db  0x07 ; '.'
000000000001a1ab         db  0x4d ; 'M'
000000000001a1ac         db  0x0e ; '.'
000000000001a1ad         db  0x90 ; '.'
000000000001a1ae         db  0x02 ; '.'
000000000001a1af         db  0x03 ; '.'
000000000001a1b0         db  0x88 ; '.'
000000000001a1b1         db  0x05 ; '.'
000000000001a1b2         db  0x0a ; '.'
000000000001a1b3         db  0x0e ; '.'
000000000001a1b4         db  0x38 ; '8'
000000000001a1b5         db  0x41 ; 'A'
000000000001a1b6         db  0x0e ; '.'
000000000001a1b7         db  0x30 ; '0'
000000000001a1b8         db  0x41 ; 'A'
000000000001a1b9         db  0x0e ; '.'
000000000001a1ba         db  0x28 ; '('
000000000001a1bb         db  0x42 ; 'B'
000000000001a1bc         db  0x0e ; '.'
000000000001a1bd         db  0x20 ; ' '
000000000001a1be         db  0x42 ; 'B'
000000000001a1bf         db  0x0e ; '.'
000000000001a1c0         db  0x18 ; '.'
000000000001a1c1         db  0x42 ; 'B'
000000000001a1c2         db  0x0e ; '.'
000000000001a1c3         db  0x10 ; '.'
000000000001a1c4         db  0x42 ; 'B'
000000000001a1c5         db  0x0e ; '.'
000000000001a1c6         db  0x08 ; '.'
000000000001a1c7         db  0x44 ; 'D'
000000000001a1c8         db  0x0b ; '.'
000000000001a1c9         db  0x00 ; '.'
000000000001a1ca         db  0x00 ; '.'
000000000001a1cb         db  0x00 ; '.'
000000000001a1cc         dd         0x0000002c                                  ; Length of the record
000000000001a1d0         dd         0x00001d10                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a1d4         db         0x6c, 0x46, 2 dup (0xff)                    ; begin 0xe840
000000000001a1d8         db         0xea, 0x08, 2 dup (0x00)                    ; length 0x8ea (end at 0xf12a)
000000000001a1dc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a1dd         db  0x41 ; 'A'
000000000001a1de         db  0x0e ; '.'
000000000001a1df         db  0x10 ; '.'
000000000001a1e0         db  0x86 ; '.'
000000000001a1e1         db  0x02 ; '.'
000000000001a1e2         db  0x43 ; 'C'
000000000001a1e3         db  0x0d ; '.'
000000000001a1e4         db  0x06 ; '.'
000000000001a1e5         db  0x48 ; 'H'
000000000001a1e6         db  0x8f ; '.'
000000000001a1e7         db  0x03 ; '.'
000000000001a1e8         db  0x8e ; '.'
000000000001a1e9         db  0x04 ; '.'
000000000001a1ea         db  0x8d ; '.'
000000000001a1eb         db  0x05 ; '.'
000000000001a1ec         db  0x8c ; '.'
000000000001a1ed         db  0x06 ; '.'
000000000001a1ee         db  0x4e ; 'N'
000000000001a1ef         db  0x83 ; '.'
000000000001a1f0         db  0x07 ; '.'
000000000001a1f1         db  0x03 ; '.'
000000000001a1f2         db  0x20 ; ' '
000000000001a1f3         db  0x07 ; '.'
000000000001a1f4         db  0x0a ; '.'
000000000001a1f5         db  0x0c ; '.'
000000000001a1f6         db  0x07 ; '.'
000000000001a1f7         db  0x08 ; '.'
000000000001a1f8         db  0x41 ; 'A'
000000000001a1f9         db  0x0b ; '.'
000000000001a1fa         db  0x00 ; '.'
000000000001a1fb         db  0x00 ; '.'
000000000001a1fc         dd         0x00000068                                  ; Length of the record
000000000001a200         dd         0x00001d40                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a204         db         0x2c, 0x4f, 2 dup (0xff)                    ; begin 0xf130
000000000001a208         db         0x96, 0x01, 2 dup (0x00)                    ; length 0x196 (end at 0xf2c6)
000000000001a20c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a20d         db  0x42 ; 'B'
000000000001a20e         db  0x0e ; '.'
000000000001a20f         db  0x10 ; '.'
000000000001a210         db  0x8f ; '.'
000000000001a211         db  0x02 ; '.'
000000000001a212         db  0x42 ; 'B'
000000000001a213         db  0x0e ; '.'
000000000001a214         db  0x18 ; '.'
000000000001a215         db  0x8e ; '.'
000000000001a216         db  0x03 ; '.'
000000000001a217         db  0x45 ; 'E'
000000000001a218         db  0x0e ; '.'
000000000001a219         db  0x20 ; ' '
000000000001a21a         db  0x8d ; '.'
000000000001a21b         db  0x04 ; '.'
000000000001a21c         db  0x42 ; 'B'
000000000001a21d         db  0x0e ; '.'
000000000001a21e         db  0x28 ; '('
000000000001a21f         db  0x8c ; '.'
000000000001a220         db  0x05 ; '.'
000000000001a221         db  0x44 ; 'D'
000000000001a222         db  0x0e ; '.'
000000000001a223         db  0x30 ; '0'
000000000001a224         db  0x86 ; '.'
000000000001a225         db  0x06 ; '.'
000000000001a226         db  0x41 ; 'A'
000000000001a227         db  0x0e ; '.'
000000000001a228         db  0x38 ; '8'
000000000001a229         db  0x83 ; '.'
000000000001a22a         db  0x07 ; '.'
000000000001a22b         db  0x51 ; 'Q'
000000000001a22c         db  0x0e ; '.'
000000000001a22d         db  0x58 ; 'X'
000000000001a22e         db  0x49 ; 'I'
000000000001a22f         db  0x0e ; '.'
000000000001a230         db  0x60 ; '`'
000000000001a231         db  0x4e ; 'N'
000000000001a232         db  0x0e ; '.'
000000000001a233         db  0x58 ; 'X'
000000000001a234         db  0x41 ; 'A'
000000000001a235         db  0x0e ; '.'
000000000001a236         db  0x50 ; 'P'
000000000001a237         db  0x46 ; 'F'
000000000001a238         db  0x0a ; '.'
000000000001a239         db  0x0e ; '.'
000000000001a23a         db  0x38 ; '8'
000000000001a23b         db  0x41 ; 'A'
000000000001a23c         db  0x0e ; '.'
000000000001a23d         db  0x30 ; '0'
000000000001a23e         db  0x41 ; 'A'
000000000001a23f         db  0x0e ; '.'
000000000001a240         db  0x28 ; '('
000000000001a241         db  0x42 ; 'B'
000000000001a242         db  0x0e ; '.'
000000000001a243         db  0x20 ; ' '
000000000001a244         db  0x42 ; 'B'
000000000001a245         db  0x0e ; '.'
000000000001a246         db  0x18 ; '.'
000000000001a247         db  0x42 ; 'B'
000000000001a248         db  0x0e ; '.'
000000000001a249         db  0x10 ; '.'
000000000001a24a         db  0x42 ; 'B'
000000000001a24b         db  0x0e ; '.'
000000000001a24c         db  0x08 ; '.'
000000000001a24d         db  0x47 ; 'G'
000000000001a24e         db  0x0b ; '.'
000000000001a24f         db  0x02 ; '.'
000000000001a250         db  0x97 ; '.'
000000000001a251         db  0x0a ; '.'
000000000001a252         db  0x0e ; '.'
000000000001a253         db  0x38 ; '8'
000000000001a254         db  0x44 ; 'D'
000000000001a255         db  0x0e ; '.'
000000000001a256         db  0x30 ; '0'
000000000001a257         db  0x41 ; 'A'
000000000001a258         db  0x0e ; '.'
000000000001a259         db  0x28 ; '('
000000000001a25a         db  0x42 ; 'B'
000000000001a25b         db  0x0e ; '.'
000000000001a25c         db  0x20 ; ' '
000000000001a25d         db  0x42 ; 'B'
000000000001a25e         db  0x0e ; '.'
000000000001a25f         db  0x18 ; '.'
000000000001a260         db  0x42 ; 'B'
000000000001a261         db  0x0e ; '.'
000000000001a262         db  0x10 ; '.'
000000000001a263         db  0x42 ; 'B'
000000000001a264         db  0x0e ; '.'
000000000001a265         db  0x08 ; '.'
000000000001a266         db  0x4c ; 'L'
000000000001a267         db  0x0b ; '.'
000000000001a268         dd         0x0000005c                                  ; Length of the record
000000000001a26c         dd         0x00001dac                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a270         db         0x60, 0x50, 2 dup (0xff)                    ; begin 0xf2d0
000000000001a274         db         0xe1, 0x08, 2 dup (0x00)                    ; length 0x8e1 (end at 0xfbb1)
000000000001a278         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a279         db  0x42 ; 'B'
000000000001a27a         db  0x0e ; '.'
000000000001a27b         db  0x10 ; '.'
000000000001a27c         db  0x8f ; '.'
000000000001a27d         db  0x02 ; '.'
000000000001a27e         db  0x42 ; 'B'
000000000001a27f         db  0x0e ; '.'
000000000001a280         db  0x18 ; '.'
000000000001a281         db  0x8e ; '.'
000000000001a282         db  0x03 ; '.'
000000000001a283         db  0x42 ; 'B'
000000000001a284         db  0x0e ; '.'
000000000001a285         db  0x20 ; ' '
000000000001a286         db  0x8d ; '.'
000000000001a287         db  0x04 ; '.'
000000000001a288         db  0x42 ; 'B'
000000000001a289         db  0x0e ; '.'
000000000001a28a         db  0x28 ; '('
000000000001a28b         db  0x8c ; '.'
000000000001a28c         db  0x05 ; '.'
000000000001a28d         db  0x41 ; 'A'
000000000001a28e         db  0x0e ; '.'
000000000001a28f         db  0x30 ; '0'
000000000001a290         db  0x86 ; '.'
000000000001a291         db  0x06 ; '.'
000000000001a292         db  0x41 ; 'A'
000000000001a293         db  0x0e ; '.'
000000000001a294         db  0x38 ; '8'
000000000001a295         db  0x83 ; '.'
000000000001a296         db  0x07 ; '.'
000000000001a297         db  0x47 ; 'G'
000000000001a298         db  0x0e ; '.'
000000000001a299         db  0xf0 ; '.'
000000000001a29a         db  0x01 ; '.'
000000000001a29b         db  0x03 ; '.'
000000000001a29c         db  0x85 ; '.'
000000000001a29d         db  0x03 ; '.'
000000000001a29e         db  0x0a ; '.'
000000000001a29f         db  0x0e ; '.'
000000000001a2a0         db  0x38 ; '8'
000000000001a2a1         db  0x41 ; 'A'
000000000001a2a2         db  0x0e ; '.'
000000000001a2a3         db  0x30 ; '0'
000000000001a2a4         db  0x41 ; 'A'
000000000001a2a5         db  0x0e ; '.'
000000000001a2a6         db  0x28 ; '('
000000000001a2a7         db  0x42 ; 'B'
000000000001a2a8         db  0x0e ; '.'
000000000001a2a9         db  0x20 ; ' '
000000000001a2aa         db  0x42 ; 'B'
000000000001a2ab         db  0x0e ; '.'
000000000001a2ac         db  0x18 ; '.'
000000000001a2ad         db  0x42 ; 'B'
000000000001a2ae         db  0x0e ; '.'
000000000001a2af         db  0x10 ; '.'
000000000001a2b0         db  0x42 ; 'B'
000000000001a2b1         db  0x0e ; '.'
000000000001a2b2         db  0x08 ; '.'
000000000001a2b3         db  0x48 ; 'H'
000000000001a2b4         db  0x0b ; '.'
000000000001a2b5         db  0x03 ; '.'
000000000001a2b6         db  0xd8 ; '.'
000000000001a2b7         db  0x02 ; '.'
000000000001a2b8         db  0x0e ; '.'
000000000001a2b9         db  0xf8 ; '.'
000000000001a2ba         db  0x01 ; '.'
000000000001a2bb         db  0x42 ; 'B'
000000000001a2bc         db  0x0e ; '.'
000000000001a2bd         db  0x80 ; '.'
000000000001a2be         db  0x02 ; '.'
000000000001a2bf         db  0x4f ; 'O'
000000000001a2c0         db  0x0e ; '.'
000000000001a2c1         db  0xf8 ; '.'
000000000001a2c2         db  0x01 ; '.'
000000000001a2c3         db  0x44 ; 'D'
000000000001a2c4         db  0x0e ; '.'
000000000001a2c5         db  0xf0 ; '.'
000000000001a2c6         db  0x01 ; '.'
000000000001a2c7         db  0x00 ; '.'
000000000001a2c8         dd         0x00000048                                  ; Length of the record
000000000001a2cc         dd         0x00001e0c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a2d0         db         0xf0, 0x58, 2 dup (0xff)                    ; begin 0xfbc0
000000000001a2d4         db         0xec, 0x01, 2 dup (0x00)                    ; length 0x1ec (end at 0xfdac)
000000000001a2d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a2d9         db  0x42 ; 'B'
000000000001a2da         db  0x0e ; '.'
000000000001a2db         db  0x10 ; '.'
000000000001a2dc         db  0x8f ; '.'
000000000001a2dd         db  0x02 ; '.'
000000000001a2de         db  0x42 ; 'B'
000000000001a2df         db  0x0e ; '.'
000000000001a2e0         db  0x18 ; '.'
000000000001a2e1         db  0x8e ; '.'
000000000001a2e2         db  0x03 ; '.'
000000000001a2e3         db  0x42 ; 'B'
000000000001a2e4         db  0x0e ; '.'
000000000001a2e5         db  0x20 ; ' '
000000000001a2e6         db  0x8d ; '.'
000000000001a2e7         db  0x04 ; '.'
000000000001a2e8         db  0x42 ; 'B'
000000000001a2e9         db  0x0e ; '.'
000000000001a2ea         db  0x28 ; '('
000000000001a2eb         db  0x8c ; '.'
000000000001a2ec         db  0x05 ; '.'
000000000001a2ed         db  0x44 ; 'D'
000000000001a2ee         db  0x0e ; '.'
000000000001a2ef         db  0x30 ; '0'
000000000001a2f0         db  0x86 ; '.'
000000000001a2f1         db  0x06 ; '.'
000000000001a2f2         db  0x41 ; 'A'
000000000001a2f3         db  0x0e ; '.'
000000000001a2f4         db  0x38 ; '8'
000000000001a2f5         db  0x83 ; '.'
000000000001a2f6         db  0x07 ; '.'
000000000001a2f7         db  0x47 ; 'G'
000000000001a2f8         db  0x0e ; '.'
000000000001a2f9         db  0x70 ; 'p'
000000000001a2fa         db  0x02 ; '.'
000000000001a2fb         db  0x6c ; 'l'
000000000001a2fc         db  0x0a ; '.'
000000000001a2fd         db  0x0e ; '.'
000000000001a2fe         db  0x38 ; '8'
000000000001a2ff         db  0x41 ; 'A'
000000000001a300         db  0x0e ; '.'
000000000001a301         db  0x30 ; '0'
000000000001a302         db  0x41 ; 'A'
000000000001a303         db  0x0e ; '.'
000000000001a304         db  0x28 ; '('
000000000001a305         db  0x42 ; 'B'
000000000001a306         db  0x0e ; '.'
000000000001a307         db  0x20 ; ' '
000000000001a308         db  0x42 ; 'B'
000000000001a309         db  0x0e ; '.'
000000000001a30a         db  0x18 ; '.'
000000000001a30b         db  0x42 ; 'B'
000000000001a30c         db  0x0e ; '.'
000000000001a30d         db  0x10 ; '.'
000000000001a30e         db  0x42 ; 'B'
000000000001a30f         db  0x0e ; '.'
000000000001a310         db  0x08 ; '.'
000000000001a311         db  0x46 ; 'F'
000000000001a312         db  0x0b ; '.'
000000000001a313         db  0x00 ; '.'
000000000001a314         dd         0x0000005c                                  ; Length of the record
000000000001a318         dd         0x00001e58                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a31c         db         0x94, 0x5a, 2 dup (0xff)                    ; begin 0xfdb0
000000000001a320         db         0x40, 0x03, 2 dup (0x00)                    ; length 0x340 (end at 0x100f0)
000000000001a324         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a325         db  0x42 ; 'B'
000000000001a326         db  0x0e ; '.'
000000000001a327         db  0x10 ; '.'
000000000001a328         db  0x8f ; '.'
000000000001a329         db  0x02 ; '.'
000000000001a32a         db  0x42 ; 'B'
000000000001a32b         db  0x0e ; '.'
000000000001a32c         db  0x18 ; '.'
000000000001a32d         db  0x8e ; '.'
000000000001a32e         db  0x03 ; '.'
000000000001a32f         db  0x45 ; 'E'
000000000001a330         db  0x0e ; '.'
000000000001a331         db  0x20 ; ' '
000000000001a332         db  0x8d ; '.'
000000000001a333         db  0x04 ; '.'
000000000001a334         db  0x42 ; 'B'
000000000001a335         db  0x0e ; '.'
000000000001a336         db  0x28 ; '('
000000000001a337         db  0x8c ; '.'
000000000001a338         db  0x05 ; '.'
000000000001a339         db  0x44 ; 'D'
000000000001a33a         db  0x0e ; '.'
000000000001a33b         db  0x30 ; '0'
000000000001a33c         db  0x86 ; '.'
000000000001a33d         db  0x06 ; '.'
000000000001a33e         db  0x41 ; 'A'
000000000001a33f         db  0x0e ; '.'
000000000001a340         db  0x38 ; '8'
000000000001a341         db  0x83 ; '.'
000000000001a342         db  0x07 ; '.'
000000000001a343         db  0x44 ; 'D'
000000000001a344         db  0x0e ; '.'
000000000001a345         db  0xa0 ; '.'
000000000001a346         db  0x01 ; '.'
000000000001a347         db  0x03 ; '.'
000000000001a348         db  0x5d ; ']'
000000000001a349         db  0x01 ; '.'
000000000001a34a         db  0x0e ; '.'
000000000001a34b         db  0xa8 ; '.'
000000000001a34c         db  0x01 ; '.'
000000000001a34d         db  0x51 ; 'Q'
000000000001a34e         db  0x0e ; '.'
000000000001a34f         db  0xb0 ; '.'
000000000001a350         db  0x01 ; '.'
000000000001a351         db  0x52 ; 'R'
000000000001a352         db  0x0e ; '.'
000000000001a353         db  0xa8 ; '.'
000000000001a354         db  0x01 ; '.'
000000000001a355         db  0x41 ; 'A'
000000000001a356         db  0x0e ; '.'
000000000001a357         db  0xa0 ; '.'
000000000001a358         db  0x01 ; '.'
000000000001a359         db  0x03 ; '.'
000000000001a35a         db  0x94 ; '.'
000000000001a35b         db  0x01 ; '.'
000000000001a35c         db  0x0a ; '.'
000000000001a35d         db  0x0e ; '.'
000000000001a35e         db  0x38 ; '8'
000000000001a35f         db  0x41 ; 'A'
000000000001a360         db  0x0e ; '.'
000000000001a361         db  0x30 ; '0'
000000000001a362         db  0x41 ; 'A'
000000000001a363         db  0x0e ; '.'
000000000001a364         db  0x28 ; '('
000000000001a365         db  0x42 ; 'B'
000000000001a366         db  0x0e ; '.'
000000000001a367         db  0x20 ; ' '
000000000001a368         db  0x42 ; 'B'
000000000001a369         db  0x0e ; '.'
000000000001a36a         db  0x18 ; '.'
000000000001a36b         db  0x42 ; 'B'
000000000001a36c         db  0x0e ; '.'
000000000001a36d         db  0x10 ; '.'
000000000001a36e         db  0x42 ; 'B'
000000000001a36f         db  0x0e ; '.'
000000000001a370         db  0x08 ; '.'
000000000001a371         db  0x41 ; 'A'
000000000001a372         db  0x0b ; '.'
000000000001a373         db  0x00 ; '.'
000000000001a374         dd         0x0000004c                                  ; Length of the record
000000000001a378         dd         0x00001eb8                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a37c         db         0x74, 0x5d, 2 dup (0xff)                    ; begin 0x100f0
000000000001a380         db         0x30, 0x17, 2 dup (0x00)                    ; length 0x1730 (end at 0x11820)
000000000001a384         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a385         db  0x42 ; 'B'
000000000001a386         db  0x0e ; '.'
000000000001a387         db  0x10 ; '.'
000000000001a388         db  0x8f ; '.'
000000000001a389         db  0x02 ; '.'
000000000001a38a         db  0x42 ; 'B'
000000000001a38b         db  0x0e ; '.'
000000000001a38c         db  0x18 ; '.'
000000000001a38d         db  0x8e ; '.'
000000000001a38e         db  0x03 ; '.'
000000000001a38f         db  0x42 ; 'B'
000000000001a390         db  0x0e ; '.'
000000000001a391         db  0x20 ; ' '
000000000001a392         db  0x8d ; '.'
000000000001a393         db  0x04 ; '.'
000000000001a394         db  0x42 ; 'B'
000000000001a395         db  0x0e ; '.'
000000000001a396         db  0x28 ; '('
000000000001a397         db  0x8c ; '.'
000000000001a398         db  0x05 ; '.'
000000000001a399         db  0x44 ; 'D'
000000000001a39a         db  0x0e ; '.'
000000000001a39b         db  0x30 ; '0'
000000000001a39c         db  0x86 ; '.'
000000000001a39d         db  0x06 ; '.'
000000000001a39e         db  0x41 ; 'A'
000000000001a39f         db  0x0e ; '.'
000000000001a3a0         db  0x38 ; '8'
000000000001a3a1         db  0x83 ; '.'
000000000001a3a2         db  0x07 ; '.'
000000000001a3a3         db  0x52 ; 'R'
000000000001a3a4         db  0x0e ; '.'
000000000001a3a5         db  0xf0 ; '.'
000000000001a3a6         db  0x04 ; '.'
000000000001a3a7         db  0x03 ; '.'
000000000001a3a8         db  0x7c ; '|'
000000000001a3a9         db  0x0b ; '.'
000000000001a3aa         db  0x0a ; '.'
000000000001a3ab         db  0x0e ; '.'
000000000001a3ac         db  0x38 ; '8'
000000000001a3ad         db  0x41 ; 'A'
000000000001a3ae         db  0x0e ; '.'
000000000001a3af         db  0x30 ; '0'
000000000001a3b0         db  0x41 ; 'A'
000000000001a3b1         db  0x0e ; '.'
000000000001a3b2         db  0x28 ; '('
000000000001a3b3         db  0x42 ; 'B'
000000000001a3b4         db  0x0e ; '.'
000000000001a3b5         db  0x20 ; ' '
000000000001a3b6         db  0x42 ; 'B'
000000000001a3b7         db  0x0e ; '.'
000000000001a3b8         db  0x18 ; '.'
000000000001a3b9         db  0x42 ; 'B'
000000000001a3ba         db  0x0e ; '.'
000000000001a3bb         db  0x10 ; '.'
000000000001a3bc         db  0x42 ; 'B'
000000000001a3bd         db  0x0e ; '.'
000000000001a3be         db  0x08 ; '.'
000000000001a3bf         db  0x4b ; 'K'
000000000001a3c0         db  0x0b ; '.'
000000000001a3c1         db  0x00 ; '.'
000000000001a3c2         db  0x00 ; '.'
000000000001a3c3         db  0x00 ; '.'
000000000001a3c4         dd         0x0000005c                                  ; Length of the record
000000000001a3c8         dd         0x00001f08                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a3cc         db         0x54, 0x74, 2 dup (0xff)                    ; begin 0x11820
000000000001a3d0         db         0x50, 0x08, 2 dup (0x00)                    ; length 0x850 (end at 0x12070)
000000000001a3d4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a3d5         db  0x42 ; 'B'
000000000001a3d6         db  0x0e ; '.'
000000000001a3d7         db  0x10 ; '.'
000000000001a3d8         db  0x8f ; '.'
000000000001a3d9         db  0x02 ; '.'
000000000001a3da         db  0x42 ; 'B'
000000000001a3db         db  0x0e ; '.'
000000000001a3dc         db  0x18 ; '.'
000000000001a3dd         db  0x8e ; '.'
000000000001a3de         db  0x03 ; '.'
000000000001a3df         db  0x45 ; 'E'
000000000001a3e0         db  0x0e ; '.'
000000000001a3e1         db  0x20 ; ' '
000000000001a3e2         db  0x8d ; '.'
000000000001a3e3         db  0x04 ; '.'
000000000001a3e4         db  0x42 ; 'B'
000000000001a3e5         db  0x0e ; '.'
000000000001a3e6         db  0x28 ; '('
000000000001a3e7         db  0x8c ; '.'
000000000001a3e8         db  0x05 ; '.'
000000000001a3e9         db  0x44 ; 'D'
000000000001a3ea         db  0x0e ; '.'
000000000001a3eb         db  0x30 ; '0'
000000000001a3ec         db  0x86 ; '.'
000000000001a3ed         db  0x06 ; '.'
000000000001a3ee         db  0x41 ; 'A'
000000000001a3ef         db  0x0e ; '.'
000000000001a3f0         db  0x38 ; '8'
000000000001a3f1         db  0x83 ; '.'
000000000001a3f2         db  0x07 ; '.'
000000000001a3f3         db  0x55 ; 'U'
000000000001a3f4         db  0x0e ; '.'
000000000001a3f5         db  0xe0 ; '.'
000000000001a3f6         db  0x01 ; '.'
000000000001a3f7         db  0x02 ; '.'
000000000001a3f8         db  0x91 ; '.'
000000000001a3f9         db  0x0a ; '.'
000000000001a3fa         db  0x0e ; '.'
000000000001a3fb         db  0x38 ; '8'
000000000001a3fc         db  0x41 ; 'A'
000000000001a3fd         db  0x0e ; '.'
000000000001a3fe         db  0x30 ; '0'
000000000001a3ff         db  0x41 ; 'A'
000000000001a400         db  0x0e ; '.'
000000000001a401         db  0x28 ; '('
000000000001a402         db  0x42 ; 'B'
000000000001a403         db  0x0e ; '.'
000000000001a404         db  0x20 ; ' '
000000000001a405         db  0x42 ; 'B'
000000000001a406         db  0x0e ; '.'
000000000001a407         db  0x18 ; '.'
000000000001a408         db  0x42 ; 'B'
000000000001a409         db  0x0e ; '.'
000000000001a40a         db  0x10 ; '.'
000000000001a40b         db  0x42 ; 'B'
000000000001a40c         db  0x0e ; '.'
000000000001a40d         db  0x08 ; '.'
000000000001a40e         db  0x48 ; 'H'
000000000001a40f         db  0x0b ; '.'
000000000001a410         db  0x03 ; '.'
000000000001a411         db  0xc3 ; '.'
000000000001a412         db  0x05 ; '.'
000000000001a413         db  0x0e ; '.'
000000000001a414         db  0xe8 ; '.'
000000000001a415         db  0x01 ; '.'
000000000001a416         db  0x4a ; 'J'
000000000001a417         db  0x0e ; '.'
000000000001a418         db  0xf0 ; '.'
000000000001a419         db  0x01 ; '.'
000000000001a41a         db  0x56 ; 'V'
000000000001a41b         db  0x0e ; '.'
000000000001a41c         db  0xe8 ; '.'
000000000001a41d         db  0x01 ; '.'
000000000001a41e         db  0x41 ; 'A'
000000000001a41f         db  0x0e ; '.'
000000000001a420         db  0xe0 ; '.'
000000000001a421         db  0x01 ; '.'
000000000001a422         db  0x00 ; '.'
000000000001a423         db  0x00 ; '.'
000000000001a424         dd         0x00000040                                  ; Length of the record
000000000001a428         dd         0x00001f68                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a42c         db         0x44, 0x7c, 2 dup (0xff)                    ; begin 0x12070
000000000001a430         db         0x5d, 0x02, 2 dup (0x00)                    ; length 0x25d (end at 0x122cd)
000000000001a434         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a435         db  0x42 ; 'B'
000000000001a436         db  0x0e ; '.'
000000000001a437         db  0x10 ; '.'
000000000001a438         db  0x8e ; '.'
000000000001a439         db  0x02 ; '.'
000000000001a43a         db  0x42 ; 'B'
000000000001a43b         db  0x0e ; '.'
000000000001a43c         db  0x18 ; '.'
000000000001a43d         db  0x8d ; '.'
000000000001a43e         db  0x03 ; '.'
000000000001a43f         db  0x45 ; 'E'
000000000001a440         db  0x0e ; '.'
000000000001a441         db  0x20 ; ' '
000000000001a442         db  0x8c ; '.'
000000000001a443         db  0x04 ; '.'
000000000001a444         db  0x41 ; 'A'
000000000001a445         db  0x0e ; '.'
000000000001a446         db  0x28 ; '('
000000000001a447         db  0x86 ; '.'
000000000001a448         db  0x05 ; '.'
000000000001a449         db  0x44 ; 'D'
000000000001a44a         db  0x0e ; '.'
000000000001a44b         db  0x30 ; '0'
000000000001a44c         db  0x83 ; '.'
000000000001a44d         db  0x06 ; '.'
000000000001a44e         db  0x4a ; 'J'
000000000001a44f         db  0x0e ; '.'
000000000001a450         db  0x50 ; 'P'
000000000001a451         db  0x02 ; '.'
000000000001a452         db  0x61 ; 'a'
000000000001a453         db  0x0a ; '.'
000000000001a454         db  0x0e ; '.'
000000000001a455         db  0x30 ; '0'
000000000001a456         db  0x41 ; 'A'
000000000001a457         db  0x0e ; '.'
000000000001a458         db  0x28 ; '('
000000000001a459         db  0x41 ; 'A'
000000000001a45a         db  0x0e ; '.'
000000000001a45b         db  0x20 ; ' '
000000000001a45c         db  0x42 ; 'B'
000000000001a45d         db  0x0e ; '.'
000000000001a45e         db  0x18 ; '.'
000000000001a45f         db  0x42 ; 'B'
000000000001a460         db  0x0e ; '.'
000000000001a461         db  0x10 ; '.'
000000000001a462         db  0x42 ; 'B'
000000000001a463         db  0x0e ; '.'
000000000001a464         db  0x08 ; '.'
000000000001a465         db  0x47 ; 'G'
000000000001a466         db  0x0b ; '.'
000000000001a467         db  0x00 ; '.'
000000000001a468         dd         0x00000048                                  ; Length of the record
000000000001a46c         dd         0x00001fac                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a470         db         0x60, 0x7e, 2 dup (0xff)                    ; begin 0x122d0
000000000001a474         db         0xfd, 0x06, 2 dup (0x00)                    ; length 0x6fd (end at 0x129cd)
000000000001a478         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a479         db  0x42 ; 'B'
000000000001a47a         db  0x0e ; '.'
000000000001a47b         db  0x10 ; '.'
000000000001a47c         db  0x8f ; '.'
000000000001a47d         db  0x02 ; '.'
000000000001a47e         db  0x42 ; 'B'
000000000001a47f         db  0x0e ; '.'
000000000001a480         db  0x18 ; '.'
000000000001a481         db  0x8e ; '.'
000000000001a482         db  0x03 ; '.'
000000000001a483         db  0x42 ; 'B'
000000000001a484         db  0x0e ; '.'
000000000001a485         db  0x20 ; ' '
000000000001a486         db  0x8d ; '.'
000000000001a487         db  0x04 ; '.'
000000000001a488         db  0x42 ; 'B'
000000000001a489         db  0x0e ; '.'
000000000001a48a         db  0x28 ; '('
000000000001a48b         db  0x8c ; '.'
000000000001a48c         db  0x05 ; '.'
000000000001a48d         db  0x41 ; 'A'
000000000001a48e         db  0x0e ; '.'
000000000001a48f         db  0x30 ; '0'
000000000001a490         db  0x86 ; '.'
000000000001a491         db  0x06 ; '.'
000000000001a492         db  0x41 ; 'A'
000000000001a493         db  0x0e ; '.'
000000000001a494         db  0x38 ; '8'
000000000001a495         db  0x83 ; '.'
000000000001a496         db  0x07 ; '.'
000000000001a497         db  0x47 ; 'G'
000000000001a498         db  0x0e ; '.'
000000000001a499         db  0x70 ; 'p'
000000000001a49a         db  0x02 ; '.'
000000000001a49b         db  0xcb ; '.'
000000000001a49c         db  0x0a ; '.'
000000000001a49d         db  0x0e ; '.'
000000000001a49e         db  0x38 ; '8'
000000000001a49f         db  0x41 ; 'A'
000000000001a4a0         db  0x0e ; '.'
000000000001a4a1         db  0x30 ; '0'
000000000001a4a2         db  0x41 ; 'A'
000000000001a4a3         db  0x0e ; '.'
000000000001a4a4         db  0x28 ; '('
000000000001a4a5         db  0x42 ; 'B'
000000000001a4a6         db  0x0e ; '.'
000000000001a4a7         db  0x20 ; ' '
000000000001a4a8         db  0x42 ; 'B'
000000000001a4a9         db  0x0e ; '.'
000000000001a4aa         db  0x18 ; '.'
000000000001a4ab         db  0x42 ; 'B'
000000000001a4ac         db  0x0e ; '.'
000000000001a4ad         db  0x10 ; '.'
000000000001a4ae         db  0x42 ; 'B'
000000000001a4af         db  0x0e ; '.'
000000000001a4b0         db  0x08 ; '.'
000000000001a4b1         db  0x4a ; 'J'
000000000001a4b2         db  0x0b ; '.'
000000000001a4b3         db  0x00 ; '.'
000000000001a4b4         dd         0x0000003c                                  ; Length of the record
000000000001a4b8         dd         0x00001ff8                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a4bc         db         0x14, 0x85, 2 dup (0xff)                    ; begin 0x129d0
000000000001a4c0         db         0xb6, 3 dup (0x00)                          ; length 0xb6 (end at 0x12a86)
000000000001a4c4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a4c5         db  0x42 ; 'B'
000000000001a4c6         db  0x0e ; '.'
000000000001a4c7         db  0x10 ; '.'
000000000001a4c8         db  0x8e ; '.'
000000000001a4c9         db  0x02 ; '.'
000000000001a4ca         db  0x45 ; 'E'
000000000001a4cb         db  0x0e ; '.'
000000000001a4cc         db  0x18 ; '.'
000000000001a4cd         db  0x8d ; '.'
000000000001a4ce         db  0x03 ; '.'
000000000001a4cf         db  0x45 ; 'E'
000000000001a4d0         db  0x0e ; '.'
000000000001a4d1         db  0x20 ; ' '
000000000001a4d2         db  0x8c ; '.'
000000000001a4d3         db  0x04 ; '.'
000000000001a4d4         db  0x48 ; 'H'
000000000001a4d5         db  0x0e ; '.'
000000000001a4d6         db  0x28 ; '('
000000000001a4d7         db  0x86 ; '.'
000000000001a4d8         db  0x05 ; '.'
000000000001a4d9         db  0x44 ; 'D'
000000000001a4da         db  0x0e ; '.'
000000000001a4db         db  0x30 ; '0'
000000000001a4dc         db  0x83 ; '.'
000000000001a4dd         db  0x06 ; '.'
000000000001a4de         db  0x02 ; '.'
000000000001a4df         db  0x83 ; '.'
000000000001a4e0         db  0x0a ; '.'
000000000001a4e1         db  0x0e ; '.'
000000000001a4e2         db  0x28 ; '('
000000000001a4e3         db  0x41 ; 'A'
000000000001a4e4         db  0x0e ; '.'
000000000001a4e5         db  0x20 ; ' '
000000000001a4e6         db  0x42 ; 'B'
000000000001a4e7         db  0x0e ; '.'
000000000001a4e8         db  0x18 ; '.'
000000000001a4e9         db  0x42 ; 'B'
000000000001a4ea         db  0x0e ; '.'
000000000001a4eb         db  0x10 ; '.'
000000000001a4ec         db  0x42 ; 'B'
000000000001a4ed         db  0x0e ; '.'
000000000001a4ee         db  0x08 ; '.'
000000000001a4ef         db  0x46 ; 'F'
000000000001a4f0         db  0x0b ; '.'
000000000001a4f1         db  0x00 ; '.'
000000000001a4f2         db  0x00 ; '.'
000000000001a4f3         db  0x00 ; '.'
000000000001a4f4         dd         0x0000005c                                  ; Length of the record
000000000001a4f8         dd         0x00002038                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a4fc         db         0x94, 0x85, 2 dup (0xff)                    ; begin 0x12a90
000000000001a500         db         0xd3, 0x14, 2 dup (0x00)                    ; length 0x14d3 (end at 0x13f63)
000000000001a504         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a505         db  0x42 ; 'B'
000000000001a506         db  0x0e ; '.'
000000000001a507         db  0x10 ; '.'
000000000001a508         db  0x8f ; '.'
000000000001a509         db  0x02 ; '.'
000000000001a50a         db  0x42 ; 'B'
000000000001a50b         db  0x0e ; '.'
000000000001a50c         db  0x18 ; '.'
000000000001a50d         db  0x8e ; '.'
000000000001a50e         db  0x03 ; '.'
000000000001a50f         db  0x42 ; 'B'
000000000001a510         db  0x0e ; '.'
000000000001a511         db  0x20 ; ' '
000000000001a512         db  0x8d ; '.'
000000000001a513         db  0x04 ; '.'
000000000001a514         db  0x42 ; 'B'
000000000001a515         db  0x0e ; '.'
000000000001a516         db  0x28 ; '('
000000000001a517         db  0x8c ; '.'
000000000001a518         db  0x05 ; '.'
000000000001a519         db  0x41 ; 'A'
000000000001a51a         db  0x0e ; '.'
000000000001a51b         db  0x30 ; '0'
000000000001a51c         db  0x86 ; '.'
000000000001a51d         db  0x06 ; '.'
000000000001a51e         db  0x41 ; 'A'
000000000001a51f         db  0x0e ; '.'
000000000001a520         db  0x38 ; '8'
000000000001a521         db  0x83 ; '.'
000000000001a522         db  0x07 ; '.'
000000000001a523         db  0x47 ; 'G'
000000000001a524         db  0x0e ; '.'
000000000001a525         db  0xe0 ; '.'
000000000001a526         db  0x02 ; '.'
000000000001a527         db  0x03 ; '.'
000000000001a528         db  0x22 ; '"'
000000000001a529         db  0x01 ; '.'
000000000001a52a         db  0x0a ; '.'
000000000001a52b         db  0x0e ; '.'
000000000001a52c         db  0x38 ; '8'
000000000001a52d         db  0x41 ; 'A'
000000000001a52e         db  0x0e ; '.'
000000000001a52f         db  0x30 ; '0'
000000000001a530         db  0x41 ; 'A'
000000000001a531         db  0x0e ; '.'
000000000001a532         db  0x28 ; '('
000000000001a533         db  0x42 ; 'B'
000000000001a534         db  0x0e ; '.'
000000000001a535         db  0x20 ; ' '
000000000001a536         db  0x42 ; 'B'
000000000001a537         db  0x0e ; '.'
000000000001a538         db  0x18 ; '.'
000000000001a539         db  0x42 ; 'B'
000000000001a53a         db  0x0e ; '.'
000000000001a53b         db  0x10 ; '.'
000000000001a53c         db  0x42 ; 'B'
000000000001a53d         db  0x0e ; '.'
000000000001a53e         db  0x08 ; '.'
000000000001a53f         db  0x41 ; 'A'
000000000001a540         db  0x0b ; '.'
000000000001a541         db  0x03 ; '.'
000000000001a542         db  0xbf ; '.'
000000000001a543         db  0x0b ; '.'
000000000001a544         db  0x0e ; '.'
000000000001a545         db  0xe8 ; '.'
000000000001a546         db  0x02 ; '.'
000000000001a547         db  0x4c ; 'L'
000000000001a548         db  0x0e ; '.'
000000000001a549         db  0xf0 ; '.'
000000000001a54a         db  0x02 ; '.'
000000000001a54b         db  0x64 ; 'd'
000000000001a54c         db  0x0e ; '.'
000000000001a54d         db  0xe8 ; '.'
000000000001a54e         db  0x02 ; '.'
000000000001a54f         db  0x42 ; 'B'
000000000001a550         db  0x0e ; '.'
000000000001a551         db  0xe0 ; '.'
000000000001a552         db  0x02 ; '.'
000000000001a553         db  0x00 ; '.'
000000000001a554         dd         0x00000048                                  ; Length of the record
000000000001a558         dd         0x00002098                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a55c         db         0x14, 0x9a, 2 dup (0xff)                    ; begin 0x13f70
000000000001a560         db         0x82, 0x01, 2 dup (0x00)                    ; length 0x182 (end at 0x140f2)
000000000001a564         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a565         db  0x42 ; 'B'
000000000001a566         db  0x0e ; '.'
000000000001a567         db  0x10 ; '.'
000000000001a568         db  0x8f ; '.'
000000000001a569         db  0x02 ; '.'
000000000001a56a         db  0x42 ; 'B'
000000000001a56b         db  0x0e ; '.'
000000000001a56c         db  0x18 ; '.'
000000000001a56d         db  0x8e ; '.'
000000000001a56e         db  0x03 ; '.'
000000000001a56f         db  0x45 ; 'E'
000000000001a570         db  0x0e ; '.'
000000000001a571         db  0x20 ; ' '
000000000001a572         db  0x8d ; '.'
000000000001a573         db  0x04 ; '.'
000000000001a574         db  0x42 ; 'B'
000000000001a575         db  0x0e ; '.'
000000000001a576         db  0x28 ; '('
000000000001a577         db  0x8c ; '.'
000000000001a578         db  0x05 ; '.'
000000000001a579         db  0x44 ; 'D'
000000000001a57a         db  0x0e ; '.'
000000000001a57b         db  0x30 ; '0'
000000000001a57c         db  0x86 ; '.'
000000000001a57d         db  0x06 ; '.'
000000000001a57e         db  0x41 ; 'A'
000000000001a57f         db  0x0e ; '.'
000000000001a580         db  0x38 ; '8'
000000000001a581         db  0x83 ; '.'
000000000001a582         db  0x07 ; '.'
000000000001a583         db  0x4d ; 'M'
000000000001a584         db  0x0e ; '.'
000000000001a585         db  0x80 ; '.'
000000000001a586         db  0x01 ; '.'
000000000001a587         db  0x02 ; '.'
000000000001a588         db  0xfa ; '.'
000000000001a589         db  0x0a ; '.'
000000000001a58a         db  0x0e ; '.'
000000000001a58b         db  0x38 ; '8'
000000000001a58c         db  0x41 ; 'A'
000000000001a58d         db  0x0e ; '.'
000000000001a58e         db  0x30 ; '0'
000000000001a58f         db  0x41 ; 'A'
000000000001a590         db  0x0e ; '.'
000000000001a591         db  0x28 ; '('
000000000001a592         db  0x42 ; 'B'
000000000001a593         db  0x0e ; '.'
000000000001a594         db  0x20 ; ' '
000000000001a595         db  0x42 ; 'B'
000000000001a596         db  0x0e ; '.'
000000000001a597         db  0x18 ; '.'
000000000001a598         db  0x42 ; 'B'
000000000001a599         db  0x0e ; '.'
000000000001a59a         db  0x10 ; '.'
000000000001a59b         db  0x42 ; 'B'
000000000001a59c         db  0x0e ; '.'
000000000001a59d         db  0x08 ; '.'
000000000001a59e         db  0x47 ; 'G'
000000000001a59f         db  0x0b ; '.'
000000000001a5a0         dd         0x0000004c                                  ; Length of the record
000000000001a5a4         dd         0x000020e4                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a5a8         db         0x58, 0x9b, 2 dup (0xff)                    ; begin 0x14100
000000000001a5ac         db         0x7f, 0x01, 2 dup (0x00)                    ; length 0x17f (end at 0x1427f)
000000000001a5b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a5b1         db  0x42 ; 'B'
000000000001a5b2         db  0x0e ; '.'
000000000001a5b3         db  0x10 ; '.'
000000000001a5b4         db  0x8f ; '.'
000000000001a5b5         db  0x02 ; '.'
000000000001a5b6         db  0x42 ; 'B'
000000000001a5b7         db  0x0e ; '.'
000000000001a5b8         db  0x18 ; '.'
000000000001a5b9         db  0x8e ; '.'
000000000001a5ba         db  0x03 ; '.'
000000000001a5bb         db  0x45 ; 'E'
000000000001a5bc         db  0x0e ; '.'
000000000001a5bd         db  0x20 ; ' '
000000000001a5be         db  0x8d ; '.'
000000000001a5bf         db  0x04 ; '.'
000000000001a5c0         db  0x42 ; 'B'
000000000001a5c1         db  0x0e ; '.'
000000000001a5c2         db  0x28 ; '('
000000000001a5c3         db  0x8c ; '.'
000000000001a5c4         db  0x05 ; '.'
000000000001a5c5         db  0x44 ; 'D'
000000000001a5c6         db  0x0e ; '.'
000000000001a5c7         db  0x30 ; '0'
000000000001a5c8         db  0x86 ; '.'
000000000001a5c9         db  0x06 ; '.'
000000000001a5ca         db  0x41 ; 'A'
000000000001a5cb         db  0x0e ; '.'
000000000001a5cc         db  0x38 ; '8'
000000000001a5cd         db  0x83 ; '.'
000000000001a5ce         db  0x07 ; '.'
000000000001a5cf         db  0x4a ; 'J'
000000000001a5d0         db  0x0e ; '.'
000000000001a5d1         db  0x90 ; '.'
000000000001a5d2         db  0x01 ; '.'
000000000001a5d3         db  0x03 ; '.'
000000000001a5d4         db  0x45 ; 'E'
000000000001a5d5         db  0x01 ; '.'
000000000001a5d6         db  0x0a ; '.'
000000000001a5d7         db  0x0e ; '.'
000000000001a5d8         db  0x38 ; '8'
000000000001a5d9         db  0x41 ; 'A'
000000000001a5da         db  0x0e ; '.'
000000000001a5db         db  0x30 ; '0'
000000000001a5dc         db  0x41 ; 'A'
000000000001a5dd         db  0x0e ; '.'
000000000001a5de         db  0x28 ; '('
000000000001a5df         db  0x42 ; 'B'
000000000001a5e0         db  0x0e ; '.'
000000000001a5e1         db  0x20 ; ' '
000000000001a5e2         db  0x42 ; 'B'
000000000001a5e3         db  0x0e ; '.'
000000000001a5e4         db  0x18 ; '.'
000000000001a5e5         db  0x42 ; 'B'
000000000001a5e6         db  0x0e ; '.'
000000000001a5e7         db  0x10 ; '.'
000000000001a5e8         db  0x42 ; 'B'
000000000001a5e9         db  0x0e ; '.'
000000000001a5ea         db  0x08 ; '.'
000000000001a5eb         db  0x47 ; 'G'
000000000001a5ec         db  0x0b ; '.'
000000000001a5ed         db  0x00 ; '.'
000000000001a5ee         db  0x00 ; '.'
000000000001a5ef         db  0x00 ; '.'
000000000001a5f0         dd         0x0000004c                                  ; Length of the record
000000000001a5f4         dd         0x00002134                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a5f8         db         0x88, 0x9c, 2 dup (0xff)                    ; begin 0x14280
000000000001a5fc         db         0xf5, 0x10, 2 dup (0x00)                    ; length 0x10f5 (end at 0x15375)
000000000001a600         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a601         db  0x42 ; 'B'
000000000001a602         db  0x0e ; '.'
000000000001a603         db  0x10 ; '.'
000000000001a604         db  0x8f ; '.'
000000000001a605         db  0x02 ; '.'
000000000001a606         db  0x42 ; 'B'
000000000001a607         db  0x0e ; '.'
000000000001a608         db  0x18 ; '.'
000000000001a609         db  0x8e ; '.'
000000000001a60a         db  0x03 ; '.'
000000000001a60b         db  0x42 ; 'B'
000000000001a60c         db  0x0e ; '.'
000000000001a60d         db  0x20 ; ' '
000000000001a60e         db  0x8d ; '.'
000000000001a60f         db  0x04 ; '.'
000000000001a610         db  0x42 ; 'B'
000000000001a611         db  0x0e ; '.'
000000000001a612         db  0x28 ; '('
000000000001a613         db  0x8c ; '.'
000000000001a614         db  0x05 ; '.'
000000000001a615         db  0x41 ; 'A'
000000000001a616         db  0x0e ; '.'
000000000001a617         db  0x30 ; '0'
000000000001a618         db  0x86 ; '.'
000000000001a619         db  0x06 ; '.'
000000000001a61a         db  0x41 ; 'A'
000000000001a61b         db  0x0e ; '.'
000000000001a61c         db  0x38 ; '8'
000000000001a61d         db  0x83 ; '.'
000000000001a61e         db  0x07 ; '.'
000000000001a61f         db  0x47 ; 'G'
000000000001a620         db  0x0e ; '.'
000000000001a621         db  0xe0 ; '.'
000000000001a622         db  0x02 ; '.'
000000000001a623         db  0x03 ; '.'
000000000001a624         db  0xa9 ; '.'
000000000001a625         db  0x03 ; '.'
000000000001a626         db  0x0a ; '.'
000000000001a627         db  0x0e ; '.'
000000000001a628         db  0x38 ; '8'
000000000001a629         db  0x41 ; 'A'
000000000001a62a         db  0x0e ; '.'
000000000001a62b         db  0x30 ; '0'
000000000001a62c         db  0x41 ; 'A'
000000000001a62d         db  0x0e ; '.'
000000000001a62e         db  0x28 ; '('
000000000001a62f         db  0x42 ; 'B'
000000000001a630         db  0x0e ; '.'
000000000001a631         db  0x20 ; ' '
000000000001a632         db  0x42 ; 'B'
000000000001a633         db  0x0e ; '.'
000000000001a634         db  0x18 ; '.'
000000000001a635         db  0x42 ; 'B'
000000000001a636         db  0x0e ; '.'
000000000001a637         db  0x10 ; '.'
000000000001a638         db  0x42 ; 'B'
000000000001a639         db  0x0e ; '.'
000000000001a63a         db  0x08 ; '.'
000000000001a63b         db  0x41 ; 'A'
000000000001a63c         db  0x0b ; '.'
000000000001a63d         db  0x00 ; '.'
000000000001a63e         db  0x00 ; '.'
000000000001a63f         db  0x00 ; '.'
000000000001a640         dd         0x0000001c                                  ; Length of the record
000000000001a644         dd         0x00002184                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a648         db         0x38, 0xad, 2 dup (0xff)                    ; begin 0x15380
000000000001a64c         db         0x6f, 3 dup (0x00)                          ; length 0x6f (end at 0x153ef)
000000000001a650         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a651         db  0x44 ; 'D'
000000000001a652         db  0x0e ; '.'
000000000001a653         db  0x10 ; '.'
000000000001a654         db  0x02 ; '.'
000000000001a655         db  0x59 ; 'Y'
000000000001a656         db  0x0a ; '.'
000000000001a657         db  0x0e ; '.'
000000000001a658         db  0x08 ; '.'
000000000001a659         db  0x4b ; 'K'
000000000001a65a         db  0x0b ; '.'
000000000001a65b         db  0x46 ; 'F'
000000000001a65c         db  0x0e ; '.'
000000000001a65d         db  0x08 ; '.'
000000000001a65e         db  0x00 ; '.'
000000000001a65f         db  0x00 ; '.'
000000000001a660         dd         0x00000010                                  ; Length of the record
000000000001a664         dd         0x000021a4                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a668         db         0x88, 0xad, 2 dup (0xff)                    ; begin 0x153f0
000000000001a66c         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x153ff)
000000000001a670         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a671         align      4
000000000001a674         dd         0x00000028                                  ; Length of the record
000000000001a678         dd         0x000021b8                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a67c         db         0x84, 0xad, 2 dup (0xff)                    ; begin 0x15400
000000000001a680         db         0xc3, 3 dup (0x00)                          ; length 0xc3 (end at 0x154c3)
000000000001a684         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a685         db  0x42 ; 'B'
000000000001a686         db  0x0e ; '.'
000000000001a687         db  0x10 ; '.'
000000000001a688         db  0x8c ; '.'
000000000001a689         db  0x02 ; '.'
000000000001a68a         db  0x41 ; 'A'
000000000001a68b         db  0x0e ; '.'
000000000001a68c         db  0x18 ; '.'
000000000001a68d         db  0x86 ; '.'
000000000001a68e         db  0x03 ; '.'
000000000001a68f         db  0x43 ; 'C'
000000000001a690         db  0x0e ; '.'
000000000001a691         db  0x20 ; ' '
000000000001a692         db  0x83 ; '.'
000000000001a693         db  0x04 ; '.'
000000000001a694         db  0x02 ; '.'
000000000001a695         db  0xb9 ; '.'
000000000001a696         db  0x0e ; '.'
000000000001a697         db  0x18 ; '.'
000000000001a698         db  0x41 ; 'A'
000000000001a699         db  0x0e ; '.'
000000000001a69a         db  0x10 ; '.'
000000000001a69b         db  0x42 ; 'B'
000000000001a69c         db  0x0e ; '.'
000000000001a69d         db  0x08 ; '.'
000000000001a69e         db  0x00 ; '.'
000000000001a69f         db  0x00 ; '.'
000000000001a6a0         dd         0x0000005c                                  ; Length of the record
000000000001a6a4         dd         0x000021e4                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a6a8         db         0x28, 0xae, 2 dup (0xff)                    ; begin 0x154d0
000000000001a6ac         db         0x7f, 0x04, 2 dup (0x00)                    ; length 0x47f (end at 0x1594f)
000000000001a6b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a6b1         db  0x42 ; 'B'
000000000001a6b2         db  0x0e ; '.'
000000000001a6b3         db  0x10 ; '.'
000000000001a6b4         db  0x8f ; '.'
000000000001a6b5         db  0x02 ; '.'
000000000001a6b6         db  0x42 ; 'B'
000000000001a6b7         db  0x0e ; '.'
000000000001a6b8         db  0x18 ; '.'
000000000001a6b9         db  0x8e ; '.'
000000000001a6ba         db  0x03 ; '.'
000000000001a6bb         db  0x45 ; 'E'
000000000001a6bc         db  0x0e ; '.'
000000000001a6bd         db  0x20 ; ' '
000000000001a6be         db  0x8d ; '.'
000000000001a6bf         db  0x04 ; '.'
000000000001a6c0         db  0x42 ; 'B'
000000000001a6c1         db  0x0e ; '.'
000000000001a6c2         db  0x28 ; '('
000000000001a6c3         db  0x8c ; '.'
000000000001a6c4         db  0x05 ; '.'
000000000001a6c5         db  0x44 ; 'D'
000000000001a6c6         db  0x0e ; '.'
000000000001a6c7         db  0x30 ; '0'
000000000001a6c8         db  0x86 ; '.'
000000000001a6c9         db  0x06 ; '.'
000000000001a6ca         db  0x41 ; 'A'
000000000001a6cb         db  0x0e ; '.'
000000000001a6cc         db  0x38 ; '8'
000000000001a6cd         db  0x83 ; '.'
000000000001a6ce         db  0x07 ; '.'
000000000001a6cf         db  0x44 ; 'D'
000000000001a6d0         db  0x0e ; '.'
000000000001a6d1         db  0x70 ; 'p'
000000000001a6d2         db  0x02 ; '.'
000000000001a6d3         db  0xd4 ; '.'
000000000001a6d4         db  0x0e ; '.'
000000000001a6d5         db  0x78 ; 'x'
000000000001a6d6         db  0x4b ; 'K'
000000000001a6d7         db  0x0e ; '.'
000000000001a6d8         db  0x80 ; '.'
000000000001a6d9         db  0x01 ; '.'
000000000001a6da         db  0x41 ; 'A'
000000000001a6db         db  0x0e ; '.'
000000000001a6dc         db  0x88 ; '.'
000000000001a6dd         db  0x01 ; '.'
000000000001a6de         db  0x42 ; 'B'
000000000001a6df         db  0x0e ; '.'
000000000001a6e0         db  0x90 ; '.'
000000000001a6e1         db  0x01 ; '.'
000000000001a6e2         db  0x5d ; ']'
000000000001a6e3         db  0x0e ; '.'
000000000001a6e4         db  0x70 ; 'p'
000000000001a6e5         db  0x63 ; 'c'
000000000001a6e6         db  0x0a ; '.'
000000000001a6e7         db  0x0e ; '.'
000000000001a6e8         db  0x38 ; '8'
000000000001a6e9         db  0x44 ; 'D'
000000000001a6ea         db  0x0e ; '.'
000000000001a6eb         db  0x30 ; '0'
000000000001a6ec         db  0x41 ; 'A'
000000000001a6ed         db  0x0e ; '.'
000000000001a6ee         db  0x28 ; '('
000000000001a6ef         db  0x42 ; 'B'
000000000001a6f0         db  0x0e ; '.'
000000000001a6f1         db  0x20 ; ' '
000000000001a6f2         db  0x42 ; 'B'
000000000001a6f3         db  0x0e ; '.'
000000000001a6f4         db  0x18 ; '.'
000000000001a6f5         db  0x42 ; 'B'
000000000001a6f6         db  0x0e ; '.'
000000000001a6f7         db  0x10 ; '.'
000000000001a6f8         db  0x42 ; 'B'
000000000001a6f9         db  0x0e ; '.'
000000000001a6fa         db  0x08 ; '.'
000000000001a6fb         db  0x45 ; 'E'
000000000001a6fc         db  0x0b ; '.'
000000000001a6fd         db  0x00 ; '.'
000000000001a6fe         db  0x00 ; '.'
000000000001a6ff         db  0x00 ; '.'
000000000001a700         dd         0x00000054                                  ; Length of the record
000000000001a704         dd         0x00002244                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a708         db         0x48, 0xb2, 2 dup (0xff)                    ; begin 0x15950
000000000001a70c         db         0x1b, 0x01, 2 dup (0x00)                    ; length 0x11b (end at 0x15a6b)
000000000001a710         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a711         db  0x42 ; 'B'
000000000001a712         db  0x0e ; '.'
000000000001a713         db  0x10 ; '.'
000000000001a714         db  0x8f ; '.'
000000000001a715         db  0x02 ; '.'
000000000001a716         db  0x42 ; 'B'
000000000001a717         db  0x0e ; '.'
000000000001a718         db  0x18 ; '.'
000000000001a719         db  0x8e ; '.'
000000000001a71a         db  0x03 ; '.'
000000000001a71b         db  0x42 ; 'B'
000000000001a71c         db  0x0e ; '.'
000000000001a71d         db  0x20 ; ' '
000000000001a71e         db  0x8d ; '.'
000000000001a71f         db  0x04 ; '.'
000000000001a720         db  0x42 ; 'B'
000000000001a721         db  0x0e ; '.'
000000000001a722         db  0x28 ; '('
000000000001a723         db  0x8c ; '.'
000000000001a724         db  0x05 ; '.'
000000000001a725         db  0x44 ; 'D'
000000000001a726         db  0x0e ; '.'
000000000001a727         db  0x30 ; '0'
000000000001a728         db  0x86 ; '.'
000000000001a729         db  0x06 ; '.'
000000000001a72a         db  0x41 ; 'A'
000000000001a72b         db  0x0e ; '.'
000000000001a72c         db  0x38 ; '8'
000000000001a72d         db  0x83 ; '.'
000000000001a72e         db  0x07 ; '.'
000000000001a72f         db  0x4d ; 'M'
000000000001a730         db  0x0e ; '.'
000000000001a731         db  0x60 ; '`'
000000000001a732         db  0x02 ; '.'
000000000001a733         db  0x5a ; 'Z'
000000000001a734         db  0x0e ; '.'
000000000001a735         db  0x68 ; 'h'
000000000001a736         db  0x44 ; 'D'
000000000001a737         db  0x0e ; '.'
000000000001a738         db  0x70 ; 'p'
000000000001a739         db  0x61 ; 'a'
000000000001a73a         db  0x0e ; '.'
000000000001a73b         db  0x68 ; 'h'
000000000001a73c         db  0x41 ; 'A'
000000000001a73d         db  0x0e ; '.'
000000000001a73e         db  0x60 ; '`'
000000000001a73f         db  0x44 ; 'D'
000000000001a740         db  0x0a ; '.'
000000000001a741         db  0x0e ; '.'
000000000001a742         db  0x38 ; '8'
000000000001a743         db  0x44 ; 'D'
000000000001a744         db  0x0e ; '.'
000000000001a745         db  0x30 ; '0'
000000000001a746         db  0x41 ; 'A'
000000000001a747         db  0x0e ; '.'
000000000001a748         db  0x28 ; '('
000000000001a749         db  0x42 ; 'B'
000000000001a74a         db  0x0e ; '.'
000000000001a74b         db  0x20 ; ' '
000000000001a74c         db  0x42 ; 'B'
000000000001a74d         db  0x0e ; '.'
000000000001a74e         db  0x18 ; '.'
000000000001a74f         db  0x42 ; 'B'
000000000001a750         db  0x0e ; '.'
000000000001a751         db  0x10 ; '.'
000000000001a752         db  0x42 ; 'B'
000000000001a753         db  0x0e ; '.'
000000000001a754         db  0x08 ; '.'
000000000001a755         db  0x45 ; 'E'
000000000001a756         db  0x0b ; '.'
000000000001a757         db  0x00 ; '.'
000000000001a758         dd         0x00000048                                  ; Length of the record
000000000001a75c         dd         0x0000229c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a760         db         0x10, 0xb3, 2 dup (0xff)                    ; begin 0x15a70
000000000001a764         db         0x10, 0x01, 2 dup (0x00)                    ; length 0x110 (end at 0x15b80)
000000000001a768         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a769         db  0x44 ; 'D'
000000000001a76a         db  0x0e ; '.'
000000000001a76b         db  0x10 ; '.'
000000000001a76c         db  0x8e ; '.'
000000000001a76d         db  0x02 ; '.'
000000000001a76e         db  0x42 ; 'B'
000000000001a76f         db  0x0e ; '.'
000000000001a770         db  0x18 ; '.'
000000000001a771         db  0x8d ; '.'
000000000001a772         db  0x03 ; '.'
000000000001a773         db  0x45 ; 'E'
000000000001a774         db  0x0e ; '.'
000000000001a775         db  0x20 ; ' '
000000000001a776         db  0x8c ; '.'
000000000001a777         db  0x04 ; '.'
000000000001a778         db  0x41 ; 'A'
000000000001a779         db  0x0e ; '.'
000000000001a77a         db  0x28 ; '('
000000000001a77b         db  0x86 ; '.'
000000000001a77c         db  0x05 ; '.'
000000000001a77d         db  0x44 ; 'D'
000000000001a77e         db  0x0e ; '.'
000000000001a77f         db  0x30 ; '0'
000000000001a780         db  0x83 ; '.'
000000000001a781         db  0x06 ; '.'
000000000001a782         db  0x02 ; '.'
000000000001a783         db  0xad ; '.'
000000000001a784         db  0x0a ; '.'
000000000001a785         db  0x0e ; '.'
000000000001a786         db  0x28 ; '('
000000000001a787         db  0x43 ; 'C'
000000000001a788         db  0x0e ; '.'
000000000001a789         db  0x20 ; ' '
000000000001a78a         db  0x42 ; 'B'
000000000001a78b         db  0x0e ; '.'
000000000001a78c         db  0x18 ; '.'
000000000001a78d         db  0x42 ; 'B'
000000000001a78e         db  0x0e ; '.'
000000000001a78f         db  0x10 ; '.'
000000000001a790         db  0x42 ; 'B'
000000000001a791         db  0x0e ; '.'
000000000001a792         db  0x08 ; '.'
000000000001a793         db  0x4a ; 'J'
000000000001a794         db  0x0b ; '.'
000000000001a795         db  0x76 ; 'v'
000000000001a796         db  0x0e ; '.'
000000000001a797         db  0x28 ; '('
000000000001a798         db  0x43 ; 'C'
000000000001a799         db  0x0e ; '.'
000000000001a79a         db  0x20 ; ' '
000000000001a79b         db  0x42 ; 'B'
000000000001a79c         db  0x0e ; '.'
000000000001a79d         db  0x18 ; '.'
000000000001a79e         db  0x42 ; 'B'
000000000001a79f         db  0x0e ; '.'
000000000001a7a0         db  0x10 ; '.'
000000000001a7a1         db  0x42 ; 'B'
000000000001a7a2         db  0x0e ; '.'
000000000001a7a3         db  0x08 ; '.'
000000000001a7a4         dd         0x00000038                                  ; Length of the record
000000000001a7a8         dd         0x000022e8                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a7ac         db         0xd4, 0xb3, 2 dup (0xff)                    ; begin 0x15b80
000000000001a7b0         db         0x85, 3 dup (0x00)                          ; length 0x85 (end at 0x15c05)
000000000001a7b4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a7b5         db  0x42 ; 'B'
000000000001a7b6         db  0x0e ; '.'
000000000001a7b7         db  0x10 ; '.'
000000000001a7b8         db  0x8d ; '.'
000000000001a7b9         db  0x02 ; '.'
000000000001a7ba         db  0x42 ; 'B'
000000000001a7bb         db  0x0e ; '.'
000000000001a7bc         db  0x18 ; '.'
000000000001a7bd         db  0x8c ; '.'
000000000001a7be         db  0x03 ; '.'
000000000001a7bf         db  0x41 ; 'A'
000000000001a7c0         db  0x0e ; '.'
000000000001a7c1         db  0x20 ; ' '
000000000001a7c2         db  0x86 ; '.'
000000000001a7c3         db  0x04 ; '.'
000000000001a7c4         db  0x41 ; 'A'
000000000001a7c5         db  0x0e ; '.'
000000000001a7c6         db  0x28 ; '('
000000000001a7c7         db  0x83 ; '.'
000000000001a7c8         db  0x05 ; '.'
000000000001a7c9         db  0x44 ; 'D'
000000000001a7ca         db  0x0e ; '.'
000000000001a7cb         db  0x30 ; '0'
000000000001a7cc         db  0x02 ; '.'
000000000001a7cd         db  0x57 ; 'W'
000000000001a7ce         db  0x0a ; '.'
000000000001a7cf         db  0x0e ; '.'
000000000001a7d0         db  0x28 ; '('
000000000001a7d1         db  0x44 ; 'D'
000000000001a7d2         db  0x0e ; '.'
000000000001a7d3         db  0x20 ; ' '
000000000001a7d4         db  0x41 ; 'A'
000000000001a7d5         db  0x0e ; '.'
000000000001a7d6         db  0x18 ; '.'
000000000001a7d7         db  0x42 ; 'B'
000000000001a7d8         db  0x0e ; '.'
000000000001a7d9         db  0x10 ; '.'
000000000001a7da         db  0x42 ; 'B'
000000000001a7db         db  0x0e ; '.'
000000000001a7dc         db  0x08 ; '.'
000000000001a7dd         db  0x46 ; 'F'
000000000001a7de         db  0x0b ; '.'
000000000001a7df         db  0x00 ; '.'
000000000001a7e0         dd         0x00000018                                  ; Length of the record
000000000001a7e4         dd         0x00002324                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a7e8         db         0x28, 0xb4, 2 dup (0xff)                    ; begin 0x15c10
000000000001a7ec         db         0x44, 3 dup (0x00)                          ; length 0x44 (end at 0x15c54)
000000000001a7f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a7f1         db  0x41 ; 'A'
000000000001a7f2         db  0x0e ; '.'
000000000001a7f3         db  0x10 ; '.'
000000000001a7f4         db  0x83 ; '.'
000000000001a7f5         db  0x02 ; '.'
000000000001a7f6         db  0x02 ; '.'
000000000001a7f7         db  0x42 ; 'B'
000000000001a7f8         db  0x0e ; '.'
000000000001a7f9         db  0x08 ; '.'
000000000001a7fa         db  0x00 ; '.'
000000000001a7fb         db  0x00 ; '.'
000000000001a7fc         dd         0x00000058                                  ; Length of the record
000000000001a800         dd         0x00002340                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a804         db         0x5c, 0xb4, 2 dup (0xff)                    ; begin 0x15c60
000000000001a808         db         0x9e, 3 dup (0x00)                          ; length 0x9e (end at 0x15cfe)
000000000001a80c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a80d         db  0x4f ; 'O'
000000000001a80e         db  0x0e ; '.'
000000000001a80f         db  0x10 ; '.'
000000000001a810         db  0x8d ; '.'
000000000001a811         db  0x02 ; '.'
000000000001a812         db  0x42 ; 'B'
000000000001a813         db  0x0e ; '.'
000000000001a814         db  0x18 ; '.'
000000000001a815         db  0x8c ; '.'
000000000001a816         db  0x03 ; '.'
000000000001a817         db  0x44 ; 'D'
000000000001a818         db  0x0e ; '.'
000000000001a819         db  0x20 ; ' '
000000000001a81a         db  0x86 ; '.'
000000000001a81b         db  0x04 ; '.'
000000000001a81c         db  0x41 ; 'A'
000000000001a81d         db  0x0e ; '.'
000000000001a81e         db  0x28 ; '('
000000000001a81f         db  0x83 ; '.'
000000000001a820         db  0x05 ; '.'
000000000001a821         db  0x4d ; 'M'
000000000001a822         db  0x0e ; '.'
000000000001a823         db  0x40 ; '@'
000000000001a824         db  0x67 ; 'g'
000000000001a825         db  0x0e ; '.'
000000000001a826         db  0x48 ; 'H'
000000000001a827         db  0x41 ; 'A'
000000000001a828         db  0x0e ; '.'
000000000001a829         db  0x50 ; 'P'
000000000001a82a         db  0x42 ; 'B'
000000000001a82b         db  0x0e ; '.'
000000000001a82c         db  0x58 ; 'X'
000000000001a82d         db  0x42 ; 'B'
000000000001a82e         db  0x0e ; '.'
000000000001a82f         db  0x60 ; '`'
000000000001a830         db  0x52 ; 'R'
000000000001a831         db  0x0e ; '.'
000000000001a832         db  0x40 ; '@'
000000000001a833         db  0x49 ; 'I'
000000000001a834         db  0x0a ; '.'
000000000001a835         db  0x0e ; '.'
000000000001a836         db  0x28 ; '('
000000000001a837         db  0x41 ; 'A'
000000000001a838         db  0x0e ; '.'
000000000001a839         db  0x20 ; ' '
000000000001a83a         db  0x44 ; 'D'
000000000001a83b         db  0x0e ; '.'
000000000001a83c         db  0x18 ; '.'
000000000001a83d         db  0x42 ; 'B'
000000000001a83e         db  0x0e ; '.'
000000000001a83f         db  0x10 ; '.'
000000000001a840         db  0x42 ; 'B'
000000000001a841         db  0x0e ; '.'
000000000001a842         db  0x08 ; '.'
000000000001a843         db  0x45 ; 'E'
000000000001a844         db  0x0b ; '.'
000000000001a845         db  0x52 ; 'R'
000000000001a846         db  0x0e ; '.'
000000000001a847         db  0x48 ; 'H'
000000000001a848         db  0x41 ; 'A'
000000000001a849         db  0x0e ; '.'
000000000001a84a         db  0x50 ; 'P'
000000000001a84b         db  0x42 ; 'B'
000000000001a84c         db  0x0e ; '.'
000000000001a84d         db  0x58 ; 'X'
000000000001a84e         db  0x42 ; 'B'
000000000001a84f         db  0x0e ; '.'
000000000001a850         db  0x60 ; '`'
000000000001a851         db  0x49 ; 'I'
000000000001a852         db  0x0e ; '.'
000000000001a853         db  0x08 ; '.'
000000000001a854         db  0xc3 ; '.'
000000000001a855         db  0xc6 ; '.'
000000000001a856         db  0xcc ; '.'
000000000001a857         db  0xcd ; '.'
000000000001a858         dd         0x0000001c                                  ; Length of the record
000000000001a85c         dd         0x0000239c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a860         db         0xa0, 0xb4, 2 dup (0xff)                    ; begin 0x15d00
000000000001a864         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x15d18)
000000000001a868         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a869         db  0x44 ; 'D'
000000000001a86a         db  0x0e ; '.'
000000000001a86b         db  0x10 ; '.'
000000000001a86c         db  0x45 ; 'E'
000000000001a86d         db  0x0e ; '.'
000000000001a86e         db  0x18 ; '.'
000000000001a86f         db  0x42 ; 'B'
000000000001a870         db  0x0e ; '.'
000000000001a871         db  0x20 ; ' '
000000000001a872         db  0x4c ; 'L'
000000000001a873         db  0x0e ; '.'
000000000001a874         db  0x08 ; '.'
000000000001a875         db  0x00 ; '.'
000000000001a876         db  0x00 ; '.'
000000000001a877         db  0x00 ; '.'
000000000001a878         dd         0x0000001c                                  ; Length of the record
000000000001a87c         dd         0x000023bc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a880         db         0xa0, 0xb4, 2 dup (0xff)                    ; begin 0x15d20
000000000001a884         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x15d35)
000000000001a888         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a889         db  0x44 ; 'D'
000000000001a88a         db  0x0e ; '.'
000000000001a88b         db  0x10 ; '.'
000000000001a88c         db  0x42 ; 'B'
000000000001a88d         db  0x0e ; '.'
000000000001a88e         db  0x18 ; '.'
000000000001a88f         db  0x42 ; 'B'
000000000001a890         db  0x0e ; '.'
000000000001a891         db  0x20 ; ' '
000000000001a892         db  0x4c ; 'L'
000000000001a893         db  0x0e ; '.'
000000000001a894         db  0x08 ; '.'
000000000001a895         db  0x00 ; '.'
000000000001a896         db  0x00 ; '.'
000000000001a897         db  0x00 ; '.'
000000000001a898         dd         0x00000020                                  ; Length of the record
000000000001a89c         dd         0x000023dc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a8a0         db         0xa0, 0xb4, 2 dup (0xff)                    ; begin 0x15d40
000000000001a8a4         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x15d5a)
000000000001a8a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a8a9         db  0x44 ; 'D'
000000000001a8aa         db  0x0e ; '.'
000000000001a8ab         db  0x10 ; '.'
000000000001a8ac         db  0x42 ; 'B'
000000000001a8ad         db  0x0e ; '.'
000000000001a8ae         db  0x18 ; '.'
000000000001a8af         db  0x44 ; 'D'
000000000001a8b0         db  0x0e ; '.'
000000000001a8b1         db  0x20 ; ' '
000000000001a8b2         db  0x44 ; 'D'
000000000001a8b3         db  0x0e ; '.'
000000000001a8b4         db  0x28 ; '('
000000000001a8b5         db  0x42 ; 'B'
000000000001a8b6         db  0x0e ; '.'
000000000001a8b7         db  0x30 ; '0'
000000000001a8b8         db  0x49 ; 'I'
000000000001a8b9         db  0x0e ; '.'
000000000001a8ba         db  0x08 ; '.'
000000000001a8bb         db  0x00 ; '.'
000000000001a8bc         dd         0x00000020                                  ; Length of the record
000000000001a8c0         dd         0x00002400                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a8c4         db         0x9c, 0xb4, 2 dup (0xff)                    ; begin 0x15d60
000000000001a8c8         db         0x1c, 3 dup (0x00)                          ; length 0x1c (end at 0x15d7c)
000000000001a8cc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a8cd         db  0x44 ; 'D'
000000000001a8ce         db  0x0e ; '.'
000000000001a8cf         db  0x10 ; '.'
000000000001a8d0         db  0x42 ; 'B'
000000000001a8d1         db  0x0e ; '.'
000000000001a8d2         db  0x18 ; '.'
000000000001a8d3         db  0x44 ; 'D'
000000000001a8d4         db  0x0e ; '.'
000000000001a8d5         db  0x20 ; ' '
000000000001a8d6         db  0x44 ; 'D'
000000000001a8d7         db  0x0e ; '.'
000000000001a8d8         db  0x28 ; '('
000000000001a8d9         db  0x44 ; 'D'
000000000001a8da         db  0x0e ; '.'
000000000001a8db         db  0x30 ; '0'
000000000001a8dc         db  0x49 ; 'I'
000000000001a8dd         db  0x0e ; '.'
000000000001a8de         db  0x08 ; '.'
000000000001a8df         db  0x00 ; '.'
000000000001a8e0         dd         0x00000014                                  ; Length of the record
000000000001a8e4         dd         0x00002424                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a8e8         db         0x98, 0xb4, 2 dup (0xff)                    ; begin 0x15d80
000000000001a8ec         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x15dc1)
000000000001a8f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a8f1         align      8
000000000001a8f8         dd         0x0000004c                                  ; Length of the record
000000000001a8fc         dd         0x0000243c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a900         db         0xd0, 0xb4, 2 dup (0xff)                    ; begin 0x15dd0
000000000001a904         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x15e4d)
000000000001a908         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a909         db  0x42 ; 'B'
000000000001a90a         db  0x0e ; '.'
000000000001a90b         db  0x10 ; '.'
000000000001a90c         db  0x8c ; '.'
000000000001a90d         db  0x02 ; '.'
000000000001a90e         db  0x41 ; 'A'
000000000001a90f         db  0x0e ; '.'
000000000001a910         db  0x18 ; '.'
000000000001a911         db  0x86 ; '.'
000000000001a912         db  0x03 ; '.'
000000000001a913         db  0x44 ; 'D'
000000000001a914         db  0x0e ; '.'
000000000001a915         db  0x20 ; ' '
000000000001a916         db  0x83 ; '.'
000000000001a917         db  0x04 ; '.'
000000000001a918         db  0x69 ; 'i'
000000000001a919         db  0x0a ; '.'
000000000001a91a         db  0x0e ; '.'
000000000001a91b         db  0x18 ; '.'
000000000001a91c         db  0x41 ; 'A'
000000000001a91d         db  0x0e ; '.'
000000000001a91e         db  0x10 ; '.'
000000000001a91f         db  0x42 ; 'B'
000000000001a920         db  0x0e ; '.'
000000000001a921         db  0x08 ; '.'
000000000001a922         db  0x45 ; 'E'
000000000001a923         db  0x0b ; '.'
000000000001a924         db  0x55 ; 'U'
000000000001a925         db  0x0a ; '.'
000000000001a926         db  0x0e ; '.'
000000000001a927         db  0x18 ; '.'
000000000001a928         db  0x41 ; 'A'
000000000001a929         db  0x0e ; '.'
000000000001a92a         db  0x10 ; '.'
000000000001a92b         db  0x42 ; 'B'
000000000001a92c         db  0x0e ; '.'
000000000001a92d         db  0x08 ; '.'
000000000001a92e         db  0x48 ; 'H'
000000000001a92f         db  0x0b ; '.'
000000000001a930         db  0x41 ; 'A'
000000000001a931         db  0x0a ; '.'
000000000001a932         db  0x0e ; '.'
000000000001a933         db  0x18 ; '.'
000000000001a934         db  0x46 ; 'F'
000000000001a935         db  0x0e ; '.'
000000000001a936         db  0x10 ; '.'
000000000001a937         db  0x42 ; 'B'
000000000001a938         db  0x0e ; '.'
000000000001a939         db  0x08 ; '.'
000000000001a93a         db  0x47 ; 'G'
000000000001a93b         db  0x0b ; '.'
000000000001a93c         db  0x49 ; 'I'
000000000001a93d         db  0x0e ; '.'
000000000001a93e         db  0x18 ; '.'
000000000001a93f         db  0x41 ; 'A'
000000000001a940         db  0x0e ; '.'
000000000001a941         db  0x10 ; '.'
000000000001a942         db  0x42 ; 'B'
000000000001a943         db  0x0e ; '.'
000000000001a944         db  0x08 ; '.'
000000000001a945         db  0x00 ; '.'
000000000001a946         db  0x00 ; '.'
000000000001a947         db  0x00 ; '.'
000000000001a948         dd         0x0000001c                                  ; Length of the record
000000000001a94c         dd         0x0000248c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a950         db         0x00, 0xb5, 2 dup (0xff)                    ; begin 0x15e50
000000000001a954         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x15eb0)
000000000001a958         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a959         db  0x44 ; 'D'
000000000001a95a         db  0x0e ; '.'
000000000001a95b         db  0x10 ; '.'
000000000001a95c         db  0x75 ; 'u'
000000000001a95d         db  0x0a ; '.'
000000000001a95e         db  0x0e ; '.'
000000000001a95f         db  0x08 ; '.'
000000000001a960         db  0x47 ; 'G'
000000000001a961         db  0x0b ; '.'
000000000001a962         db  0x5f ; '_'
000000000001a963         db  0x0e ; '.'
000000000001a964         db  0x08 ; '.'
000000000001a965         db  0x00 ; '.'
000000000001a966         db  0x00 ; '.'
000000000001a967         db  0x00 ; '.'
000000000001a968         dd         0x0000001c                                  ; Length of the record
000000000001a96c         dd         0x000024ac                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a970         db         0x40, 0xb5, 2 dup (0xff)                    ; begin 0x15eb0
000000000001a974         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x15eec)
000000000001a978         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a979         db  0x44 ; 'D'
000000000001a97a         db  0x0e ; '.'
000000000001a97b         db  0x10 ; '.'
000000000001a97c         db  0x61 ; 'a'
000000000001a97d         db  0x0a ; '.'
000000000001a97e         db  0x0e ; '.'
000000000001a97f         db  0x08 ; '.'
000000000001a980         db  0x4b ; 'K'
000000000001a981         db  0x0b ; '.'
000000000001a982         db  0x4b ; 'K'
000000000001a983         db  0x0e ; '.'
000000000001a984         db  0x08 ; '.'
000000000001a985         db  0x00 ; '.'
000000000001a986         db  0x00 ; '.'
000000000001a987         db  0x00 ; '.'
000000000001a988         dd         0x00000044                                  ; Length of the record
000000000001a98c         dd         0x000024cc                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a990         db         0x60, 0xb5, 2 dup (0xff)                    ; begin 0x15ef0
000000000001a994         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x15f55)
000000000001a998         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a999         db  0x42 ; 'B'
000000000001a99a         db  0x0e ; '.'
000000000001a99b         db  0x10 ; '.'
000000000001a99c         db  0x8f ; '.'
000000000001a99d         db  0x02 ; '.'
000000000001a99e         db  0x42 ; 'B'
000000000001a99f         db  0x0e ; '.'
000000000001a9a0         db  0x18 ; '.'
000000000001a9a1         db  0x8e ; '.'
000000000001a9a2         db  0x03 ; '.'
000000000001a9a3         db  0x45 ; 'E'
000000000001a9a4         db  0x0e ; '.'
000000000001a9a5         db  0x20 ; ' '
000000000001a9a6         db  0x8d ; '.'
000000000001a9a7         db  0x04 ; '.'
000000000001a9a8         db  0x42 ; 'B'
000000000001a9a9         db  0x0e ; '.'
000000000001a9aa         db  0x28 ; '('
000000000001a9ab         db  0x8c ; '.'
000000000001a9ac         db  0x05 ; '.'
000000000001a9ad         db  0x48 ; 'H'
000000000001a9ae         db  0x0e ; '.'
000000000001a9af         db  0x30 ; '0'
000000000001a9b0         db  0x86 ; '.'
000000000001a9b1         db  0x06 ; '.'
000000000001a9b2         db  0x48 ; 'H'
000000000001a9b3         db  0x0e ; '.'
000000000001a9b4         db  0x38 ; '8'
000000000001a9b5         db  0x83 ; '.'
000000000001a9b6         db  0x07 ; '.'
000000000001a9b7         db  0x4d ; 'M'
000000000001a9b8         db  0x0e ; '.'
000000000001a9b9         db  0x40 ; '@'
000000000001a9ba         db  0x72 ; 'r'
000000000001a9bb         db  0x0e ; '.'
000000000001a9bc         db  0x38 ; '8'
000000000001a9bd         db  0x41 ; 'A'
000000000001a9be         db  0x0e ; '.'
000000000001a9bf         db  0x30 ; '0'
000000000001a9c0         db  0x41 ; 'A'
000000000001a9c1         db  0x0e ; '.'
000000000001a9c2         db  0x28 ; '('
000000000001a9c3         db  0x42 ; 'B'
000000000001a9c4         db  0x0e ; '.'
000000000001a9c5         db  0x20 ; ' '
000000000001a9c6         db  0x42 ; 'B'
000000000001a9c7         db  0x0e ; '.'
000000000001a9c8         db  0x18 ; '.'
000000000001a9c9         db  0x42 ; 'B'
000000000001a9ca         db  0x0e ; '.'
000000000001a9cb         db  0x10 ; '.'
000000000001a9cc         db  0x42 ; 'B'
000000000001a9cd         db  0x0e ; '.'
000000000001a9ce         db  0x08 ; '.'
000000000001a9cf         db  0x00 ; '.'
000000000001a9d0         dd         0x00000014                                  ; Length of the record
000000000001a9d4         dd         0x00002514                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a9d8         db         0x88, 0xb5, 2 dup (0xff)                    ; begin 0x15f60
000000000001a9dc         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x15f62)
000000000001a9e0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a9e1         align      8
000000000001a9e8         dd         0x00000010                                  ; Length of the record
000000000001a9ec         dd         0x0000252c                                  ; FDE: parent CIE at 0x184c0 (FDE encoding = 0x1B)
000000000001a9f0         db         0x80, 0xb5, 2 dup (0xff)                    ; begin 0x15f70
000000000001a9f4         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x15f7e)
000000000001a9f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001a9f9         align      512


        ; Segment Segment 3
        ; Range: [0x21b9b0; 0x21c388[ (2520 bytes)
        ; File offset : [113072; 114848[ (1776 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x21b9b0; 0x21b9b8[ (8 bytes)
        ; File offset : [113072; 113080[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
000000000021b9b0         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x21b9b8; 0x21b9c0[ (8 bytes)
        ; File offset : [113080; 113088[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
000000000021b9b8         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x21b9c0; 0x21bb78[ (440 bytes)
        ; File offset : [113088; 113528[ (440 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     longopts:
000000000021b9c0         db  0x89 ; '.'                                         ; DATA XREF=main+13
000000000021b9c1         db  0x61 ; 'a'
000000000021b9c2         db  0x01 ; '.'
000000000021b9c3         db  0x00 ; '.'
000000000021b9c4         db  0x00 ; '.'
000000000021b9c5         db  0x00 ; '.'
000000000021b9c6         db  0x00 ; '.'
000000000021b9c7         db  0x00 ; '.'
000000000021b9c8         db  0x01 ; '.'
000000000021b9c9         db  0x00 ; '.'
000000000021b9ca         db  0x00 ; '.'
000000000021b9cb         db  0x00 ; '.'
000000000021b9cc         db  0x00 ; '.'
000000000021b9cd         db  0x00 ; '.'
000000000021b9ce         db  0x00 ; '.'
000000000021b9cf         db  0x00 ; '.'
000000000021b9d0         db  0x00 ; '.'
000000000021b9d1         db  0x00 ; '.'
000000000021b9d2         db  0x00 ; '.'
000000000021b9d3         db  0x00 ; '.'
000000000021b9d4         db  0x00 ; '.'
000000000021b9d5         db  0x00 ; '.'
000000000021b9d6         db  0x00 ; '.'
000000000021b9d7         db  0x00 ; '.'
000000000021b9d8         db  0x6e ; 'n'
000000000021b9d9         db  0x00 ; '.'
000000000021b9da         db  0x00 ; '.'
000000000021b9db         db  0x00 ; '.'
000000000021b9dc         db  0x00 ; '.'
000000000021b9dd         db  0x00 ; '.'
000000000021b9de         db  0x00 ; '.'
000000000021b9df         db  0x00 ; '.'
000000000021b9e0         db  0x90 ; '.'
000000000021b9e1         db  0x61 ; 'a'
000000000021b9e2         db  0x01 ; '.'
000000000021b9e3         db  0x00 ; '.'
000000000021b9e4         db  0x00 ; '.'
000000000021b9e5         db  0x00 ; '.'
000000000021b9e6         db  0x00 ; '.'
000000000021b9e7         db  0x00 ; '.'
000000000021b9e8         db  0x00 ; '.'
000000000021b9e9         db  0x00 ; '.'
000000000021b9ea         db  0x00 ; '.'
000000000021b9eb         db  0x00 ; '.'
000000000021b9ec         db  0x00 ; '.'
000000000021b9ed         db  0x00 ; '.'
000000000021b9ee         db  0x00 ; '.'
000000000021b9ef         db  0x00 ; '.'
000000000021b9f0         db  0x00 ; '.'
000000000021b9f1         db  0x00 ; '.'
000000000021b9f2         db  0x00 ; '.'
000000000021b9f3         db  0x00 ; '.'
000000000021b9f4         db  0x00 ; '.'
000000000021b9f5         db  0x00 ; '.'
000000000021b9f6         db  0x00 ; '.'
000000000021b9f7         db  0x00 ; '.'
000000000021b9f8         db  0x71 ; 'q'
000000000021b9f9         db  0x00 ; '.'
000000000021b9fa         db  0x00 ; '.'
000000000021b9fb         db  0x00 ; '.'
000000000021b9fc         db  0x00 ; '.'
000000000021b9fd         db  0x00 ; '.'
000000000021b9fe         db  0x00 ; '.'
000000000021b9ff         db  0x00 ; '.'
000000000021ba00         db  0x96 ; '.'
000000000021ba01         db  0x61 ; 'a'
000000000021ba02         db  0x01 ; '.'
000000000021ba03         db  0x00 ; '.'
000000000021ba04         db  0x00 ; '.'
000000000021ba05         db  0x00 ; '.'
000000000021ba06         db  0x00 ; '.'
000000000021ba07         db  0x00 ; '.'
000000000021ba08         db  0x00 ; '.'
000000000021ba09         db  0x00 ; '.'
000000000021ba0a         db  0x00 ; '.'
000000000021ba0b         db  0x00 ; '.'
000000000021ba0c         db  0x00 ; '.'
000000000021ba0d         db  0x00 ; '.'
000000000021ba0e         db  0x00 ; '.'
000000000021ba0f         db  0x00 ; '.'
000000000021ba10         db  0x00 ; '.'
000000000021ba11         db  0x00 ; '.'
000000000021ba12         db  0x00 ; '.'
000000000021ba13         db  0x00 ; '.'
000000000021ba14         db  0x00 ; '.'
000000000021ba15         db  0x00 ; '.'
000000000021ba16         db  0x00 ; '.'
000000000021ba17         db  0x00 ; '.'
000000000021ba18         db  0x73 ; 's'
000000000021ba19         db  0x00 ; '.'
000000000021ba1a         db  0x00 ; '.'
000000000021ba1b         db  0x00 ; '.'
000000000021ba1c         db  0x00 ; '.'
000000000021ba1d         db  0x00 ; '.'
000000000021ba1e         db  0x00 ; '.'
000000000021ba1f         db  0x00 ; '.'
000000000021ba20         db  0x9d ; '.'
000000000021ba21         db  0x61 ; 'a'
000000000021ba22         db  0x01 ; '.'
000000000021ba23         db  0x00 ; '.'
000000000021ba24         db  0x00 ; '.'
000000000021ba25         db  0x00 ; '.'
000000000021ba26         db  0x00 ; '.'
000000000021ba27         db  0x00 ; '.'
000000000021ba28         db  0x00 ; '.'
000000000021ba29         db  0x00 ; '.'
000000000021ba2a         db  0x00 ; '.'
000000000021ba2b         db  0x00 ; '.'
000000000021ba2c         db  0x00 ; '.'
000000000021ba2d         db  0x00 ; '.'
000000000021ba2e         db  0x00 ; '.'
000000000021ba2f         db  0x00 ; '.'
000000000021ba30         db  0x00 ; '.'
000000000021ba31         db  0x00 ; '.'
000000000021ba32         db  0x00 ; '.'
000000000021ba33         db  0x00 ; '.'
000000000021ba34         db  0x00 ; '.'
000000000021ba35         db  0x00 ; '.'
000000000021ba36         db  0x00 ; '.'
000000000021ba37         db  0x00 ; '.'
000000000021ba38         db  0x6b ; 'k'
000000000021ba39         db  0x00 ; '.'
000000000021ba3a         db  0x00 ; '.'
000000000021ba3b         db  0x00 ; '.'
000000000021ba3c         db  0x00 ; '.'
000000000021ba3d         db  0x00 ; '.'
000000000021ba3e         db  0x00 ; '.'
000000000021ba3f         db  0x00 ; '.'
000000000021ba40         db  0xa8 ; '.'
000000000021ba41         db  0x61 ; 'a'
000000000021ba42         db  0x01 ; '.'
000000000021ba43         db  0x00 ; '.'
000000000021ba44         db  0x00 ; '.'
000000000021ba45         db  0x00 ; '.'
000000000021ba46         db  0x00 ; '.'
000000000021ba47         db  0x00 ; '.'
000000000021ba48         db  0x00 ; '.'
000000000021ba49         db  0x00 ; '.'
000000000021ba4a         db  0x00 ; '.'
000000000021ba4b         db  0x00 ; '.'
000000000021ba4c         db  0x00 ; '.'
000000000021ba4d         db  0x00 ; '.'
000000000021ba4e         db  0x00 ; '.'
000000000021ba4f         db  0x00 ; '.'
000000000021ba50         db  0x00 ; '.'
000000000021ba51         db  0x00 ; '.'
000000000021ba52         db  0x00 ; '.'
000000000021ba53         db  0x00 ; '.'
000000000021ba54         db  0x00 ; '.'
000000000021ba55         db  0x00 ; '.'
000000000021ba56         db  0x00 ; '.'
000000000021ba57         db  0x00 ; '.'
000000000021ba58         db  0x7a ; 'z'
000000000021ba59         db  0x00 ; '.'
000000000021ba5a         db  0x00 ; '.'
000000000021ba5b         db  0x00 ; '.'
000000000021ba5c         db  0x00 ; '.'
000000000021ba5d         db  0x00 ; '.'
000000000021ba5e         db  0x00 ; '.'
000000000021ba5f         db  0x00 ; '.'
000000000021ba60         db  0xba ; '.'
000000000021ba61         db  0x61 ; 'a'
000000000021ba62         db  0x01 ; '.'
000000000021ba63         db  0x00 ; '.'
000000000021ba64         db  0x00 ; '.'
000000000021ba65         db  0x00 ; '.'
000000000021ba66         db  0x00 ; '.'
000000000021ba67         db  0x00 ; '.'
000000000021ba68         db  0x01 ; '.'
000000000021ba69         db  0x00 ; '.'
000000000021ba6a         db  0x00 ; '.'
000000000021ba6b         db  0x00 ; '.'
000000000021ba6c         db  0x00 ; '.'
000000000021ba6d         db  0x00 ; '.'
000000000021ba6e         db  0x00 ; '.'
000000000021ba6f         db  0x00 ; '.'
000000000021ba70         db  0x00 ; '.'
000000000021ba71         db  0x00 ; '.'
000000000021ba72         db  0x00 ; '.'
000000000021ba73         db  0x00 ; '.'
000000000021ba74         db  0x00 ; '.'
000000000021ba75         db  0x00 ; '.'
000000000021ba76         db  0x00 ; '.'
000000000021ba77         db  0x00 ; '.'
000000000021ba78         db  0x66 ; 'f'
000000000021ba79         db  0x00 ; '.'
000000000021ba7a         db  0x00 ; '.'
000000000021ba7b         db  0x00 ; '.'
000000000021ba7c         db  0x00 ; '.'
000000000021ba7d         db  0x00 ; '.'
000000000021ba7e         db  0x00 ; '.'
000000000021ba7f         db  0x00 ; '.'
000000000021ba80         db  0xc1 ; '.'
000000000021ba81         db  0x61 ; 'a'
000000000021ba82         db  0x01 ; '.'
000000000021ba83         db  0x00 ; '.'
000000000021ba84         db  0x00 ; '.'
000000000021ba85         db  0x00 ; '.'
000000000021ba86         db  0x00 ; '.'
000000000021ba87         db  0x00 ; '.'
000000000021ba88         db  0x01 ; '.'
000000000021ba89         db  0x00 ; '.'
000000000021ba8a         db  0x00 ; '.'
000000000021ba8b         db  0x00 ; '.'
000000000021ba8c         db  0x00 ; '.'
000000000021ba8d         db  0x00 ; '.'
000000000021ba8e         db  0x00 ; '.'
000000000021ba8f         db  0x00 ; '.'
000000000021ba90         db  0x00 ; '.'
000000000021ba91         db  0x00 ; '.'
000000000021ba92         db  0x00 ; '.'
000000000021ba93         db  0x00 ; '.'
000000000021ba94         db  0x00 ; '.'
000000000021ba95         db  0x00 ; '.'
000000000021ba96         db  0x00 ; '.'
000000000021ba97         db  0x00 ; '.'
000000000021ba98         db  0x62 ; 'b'
000000000021ba99         db  0x00 ; '.'
000000000021ba9a         db  0x00 ; '.'
000000000021ba9b         db  0x00 ; '.'
000000000021ba9c         db  0x00 ; '.'
000000000021ba9d         db  0x00 ; '.'
000000000021ba9e         db  0x00 ; '.'
000000000021ba9f         db  0x00 ; '.'
000000000021baa0         db  0xcf ; '.'
000000000021baa1         db  0x61 ; 'a'
000000000021baa2         db  0x01 ; '.'
000000000021baa3         db  0x00 ; '.'
000000000021baa4         db  0x00 ; '.'
000000000021baa5         db  0x00 ; '.'
000000000021baa6         db  0x00 ; '.'
000000000021baa7         db  0x00 ; '.'
000000000021baa8         db  0x00 ; '.'
000000000021baa9         db  0x00 ; '.'
000000000021baaa         db  0x00 ; '.'
000000000021baab         db  0x00 ; '.'
000000000021baac         db  0x00 ; '.'
000000000021baad         db  0x00 ; '.'
000000000021baae         db  0x00 ; '.'
000000000021baaf         db  0x00 ; '.'
000000000021bab0         db  0x00 ; '.'
000000000021bab1         db  0x00 ; '.'
000000000021bab2         db  0x00 ; '.'
000000000021bab3         db  0x00 ; '.'
000000000021bab4         db  0x00 ; '.'
000000000021bab5         db  0x00 ; '.'
000000000021bab6         db  0x00 ; '.'
000000000021bab7         db  0x00 ; '.'
000000000021bab8         db  0x80 ; '.'
000000000021bab9         db  0x00 ; '.'
000000000021baba         db  0x00 ; '.'
000000000021babb         db  0x00 ; '.'
000000000021babc         db  0x00 ; '.'
000000000021babd         db  0x00 ; '.'
000000000021babe         db  0x00 ; '.'
000000000021babf         db  0x00 ; '.'
000000000021bac0         db  0xe0 ; '.'
000000000021bac1         db  0x61 ; 'a'
000000000021bac2         db  0x01 ; '.'
000000000021bac3         db  0x00 ; '.'
000000000021bac4         db  0x00 ; '.'
000000000021bac5         db  0x00 ; '.'
000000000021bac6         db  0x00 ; '.'
000000000021bac7         db  0x00 ; '.'
000000000021bac8         db  0x00 ; '.'
000000000021bac9         db  0x00 ; '.'
000000000021baca         db  0x00 ; '.'
000000000021bacb         db  0x00 ; '.'
000000000021bacc         db  0x00 ; '.'
000000000021bacd         db  0x00 ; '.'
000000000021bace         db  0x00 ; '.'
000000000021bacf         db  0x00 ; '.'
000000000021bad0         db  0x00 ; '.'
000000000021bad1         db  0x00 ; '.'
000000000021bad2         db  0x00 ; '.'
000000000021bad3         db  0x00 ; '.'
000000000021bad4         db  0x00 ; '.'
000000000021bad5         db  0x00 ; '.'
000000000021bad6         db  0x00 ; '.'
000000000021bad7         db  0x00 ; '.'
000000000021bad8         db  0x7e ; '~'
000000000021bad9         db  0xff ; '.'
000000000021bada         db  0xff ; '.'
000000000021badb         db  0xff ; '.'
000000000021badc         db  0x00 ; '.'
000000000021badd         db  0x00 ; '.'
000000000021bade         db  0x00 ; '.'
000000000021badf         db  0x00 ; '.'
000000000021bae0         db  0xe5 ; '.'
000000000021bae1         db  0x61 ; 'a'
000000000021bae2         db  0x01 ; '.'
000000000021bae3         db  0x00 ; '.'
000000000021bae4         db  0x00 ; '.'
000000000021bae5         db  0x00 ; '.'
000000000021bae6         db  0x00 ; '.'
000000000021bae7         db  0x00 ; '.'
000000000021bae8         db  0x00 ; '.'
000000000021bae9         db  0x00 ; '.'
000000000021baea         db  0x00 ; '.'
000000000021baeb         db  0x00 ; '.'
000000000021baec         db  0x00 ; '.'
000000000021baed         db  0x00 ; '.'
000000000021baee         db  0x00 ; '.'
000000000021baef         db  0x00 ; '.'
000000000021baf0         db  0x00 ; '.'
000000000021baf1         db  0x00 ; '.'
000000000021baf2         db  0x00 ; '.'
000000000021baf3         db  0x00 ; '.'
000000000021baf4         db  0x00 ; '.'
000000000021baf5         db  0x00 ; '.'
000000000021baf6         db  0x00 ; '.'
000000000021baf7         db  0x00 ; '.'
000000000021baf8         db  0x7d ; '}'
000000000021baf9         db  0xff ; '.'
000000000021bafa         db  0xff ; '.'
000000000021bafb         db  0xff ; '.'
000000000021bafc         db  0x00 ; '.'
000000000021bafd         db  0x00 ; '.'
000000000021bafe         db  0x00 ; '.'
000000000021baff         db  0x00 ; '.'
000000000021bb00         db  0x00 ; '.'
000000000021bb01         db  0x00 ; '.'
000000000021bb02         db  0x00 ; '.'
000000000021bb03         db  0x00 ; '.'
000000000021bb04         db  0x00 ; '.'
000000000021bb05         db  0x00 ; '.'
000000000021bb06         db  0x00 ; '.'
000000000021bb07         db  0x00 ; '.'
000000000021bb08         db  0x00 ; '.'
000000000021bb09         db  0x00 ; '.'
000000000021bb0a         db  0x00 ; '.'
000000000021bb0b         db  0x00 ; '.'
000000000021bb0c         db  0x00 ; '.'
000000000021bb0d         db  0x00 ; '.'
000000000021bb0e         db  0x00 ; '.'
000000000021bb0f         db  0x00 ; '.'
000000000021bb10         db  0x00 ; '.'
000000000021bb11         db  0x00 ; '.'
000000000021bb12         db  0x00 ; '.'
000000000021bb13         db  0x00 ; '.'
000000000021bb14         db  0x00 ; '.'
000000000021bb15         db  0x00 ; '.'
000000000021bb16         db  0x00 ; '.'
000000000021bb17         db  0x00 ; '.'
000000000021bb18         db  0x00 ; '.'
000000000021bb19         db  0x00 ; '.'
000000000021bb1a         db  0x00 ; '.'
000000000021bb1b         db  0x00 ; '.'
000000000021bb1c         db  0x00 ; '.'
000000000021bb1d         db  0x00 ; '.'
000000000021bb1e         db  0x00 ; '.'
000000000021bb1f         db  0x00 ; '.'
                     quoting_style_args:
000000000021bb20         db  0xc1 ; '.'
000000000021bb21         db  0x6b ; 'k'
000000000021bb22         db  0x01 ; '.'
000000000021bb23         db  0x00 ; '.'
000000000021bb24         db  0x00 ; '.'
000000000021bb25         db  0x00 ; '.'
000000000021bb26         db  0x00 ; '.'
000000000021bb27         db  0x00 ; '.'
000000000021bb28         db  0xc9 ; '.'
000000000021bb29         db  0x6b ; 'k'
000000000021bb2a         db  0x01 ; '.'
000000000021bb2b         db  0x00 ; '.'
000000000021bb2c         db  0x00 ; '.'
000000000021bb2d         db  0x00 ; '.'
000000000021bb2e         db  0x00 ; '.'
000000000021bb2f         db  0x00 ; '.'
000000000021bb30         db  0xcf ; '.'
000000000021bb31         db  0x6b ; 'k'
000000000021bb32         db  0x01 ; '.'
000000000021bb33         db  0x00 ; '.'
000000000021bb34         db  0x00 ; '.'
000000000021bb35         db  0x00 ; '.'
000000000021bb36         db  0x00 ; '.'
000000000021bb37         db  0x00 ; '.'
000000000021bb38         db  0xdc ; '.'
000000000021bb39         db  0x6b ; 'k'
000000000021bb3a         db  0x01 ; '.'
000000000021bb3b         db  0x00 ; '.'
000000000021bb3c         db  0x00 ; '.'
000000000021bb3d         db  0x00 ; '.'
000000000021bb3e         db  0x00 ; '.'
000000000021bb3f         db  0x00 ; '.'
000000000021bb40         db  0xe9 ; '.'
000000000021bb41         db  0x6b ; 'k'
000000000021bb42         db  0x01 ; '.'
000000000021bb43         db  0x00 ; '.'
000000000021bb44         db  0x00 ; '.'
000000000021bb45         db  0x00 ; '.'
000000000021bb46         db  0x00 ; '.'
000000000021bb47         db  0x00 ; '.'
000000000021bb48         db  0xfd ; '.'
000000000021bb49         db  0x6b ; 'k'
000000000021bb4a         db  0x01 ; '.'
000000000021bb4b         db  0x00 ; '.'
000000000021bb4c         db  0x00 ; '.'
000000000021bb4d         db  0x00 ; '.'
000000000021bb4e         db  0x00 ; '.'
000000000021bb4f         db  0x00 ; '.'
000000000021bb50         db  0xff ; '.'
000000000021bb51         db  0x6b ; 'k'
000000000021bb52         db  0x01 ; '.'
000000000021bb53         db  0x00 ; '.'
000000000021bb54         db  0x00 ; '.'
000000000021bb55         db  0x00 ; '.'
000000000021bb56         db  0x00 ; '.'
000000000021bb57         db  0x00 ; '.'
000000000021bb58         db  0xe2 ; '.'
000000000021bb59         db  0x6b ; 'k'
000000000021bb5a         db  0x01 ; '.'
000000000021bb5b         db  0x00 ; '.'
000000000021bb5c         db  0x00 ; '.'
000000000021bb5d         db  0x00 ; '.'
000000000021bb5e         db  0x00 ; '.'
000000000021bb5f         db  0x00 ; '.'
000000000021bb60         db  0xd4 ; '.'
000000000021bb61         db  0x60 ; '`'
000000000021bb62         db  0x01 ; '.'
000000000021bb63         db  0x00 ; '.'
000000000021bb64         db  0x00 ; '.'
000000000021bb65         db  0x00 ; '.'
000000000021bb66         db  0x00 ; '.'
000000000021bb67         db  0x00 ; '.'
000000000021bb68         db  0x07 ; '.'
000000000021bb69         db  0x6c ; 'l'
000000000021bb6a         db  0x01 ; '.'
000000000021bb6b         db  0x00 ; '.'
000000000021bb6c         db  0x00 ; '.'
000000000021bb6d         db  0x00 ; '.'
000000000021bb6e         db  0x00 ; '.'
000000000021bb6f         db  0x00 ; '.'
000000000021bb70         db  0x00 ; '.'
000000000021bb71         db  0x00 ; '.'
000000000021bb72         db  0x00 ; '.'
000000000021bb73         db  0x00 ; '.'
000000000021bb74         db  0x00 ; '.'
000000000021bb75         db  0x00 ; '.'
000000000021bb76         db  0x00 ; '.'
000000000021bb77         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x21bb78; 0x21bd68[ (496 bytes)
        ; File offset : [113528; 114024[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
000000000021bb78         db  0x01 ; '.'
000000000021bb79         db  0x00 ; '.'
000000000021bb7a         db  0x00 ; '.'
000000000021bb7b         db  0x00 ; '.'
000000000021bb7c         db  0x00 ; '.'
000000000021bb7d         db  0x00 ; '.'
000000000021bb7e         db  0x00 ; '.'
000000000021bb7f         db  0x00 ; '.'
000000000021bb80         db  0x01 ; '.'
000000000021bb81         db  0x00 ; '.'
000000000021bb82         db  0x00 ; '.'
000000000021bb83         db  0x00 ; '.'
000000000021bb84         db  0x00 ; '.'
000000000021bb85         db  0x00 ; '.'
000000000021bb86         db  0x00 ; '.'
000000000021bb87         db  0x00 ; '.'
000000000021bb88         db  0x0c ; '.'
000000000021bb89         db  0x00 ; '.'
000000000021bb8a         db  0x00 ; '.'
000000000021bb8b         db  0x00 ; '.'
000000000021bb8c         db  0x00 ; '.'
000000000021bb8d         db  0x00 ; '.'
000000000021bb8e         db  0x00 ; '.'
000000000021bb8f         db  0x00 ; '.'
000000000021bb90         db  0x98 ; '.'
000000000021bb91         db  0x1a ; '.'
000000000021bb92         db  0x00 ; '.'
000000000021bb93         db  0x00 ; '.'
000000000021bb94         db  0x00 ; '.'
000000000021bb95         db  0x00 ; '.'
000000000021bb96         db  0x00 ; '.'
000000000021bb97         db  0x00 ; '.'
000000000021bb98         db  0x0d ; '.'
000000000021bb99         db  0x00 ; '.'
000000000021bb9a         db  0x00 ; '.'
000000000021bb9b         db  0x00 ; '.'
000000000021bb9c         db  0x00 ; '.'
000000000021bb9d         db  0x00 ; '.'
000000000021bb9e         db  0x00 ; '.'
000000000021bb9f         db  0x00 ; '.'
000000000021bba0         db  0x80 ; '.'
000000000021bba1         db  0x5f ; '_'
000000000021bba2         db  0x01 ; '.'
000000000021bba3         db  0x00 ; '.'
000000000021bba4         db  0x00 ; '.'
000000000021bba5         db  0x00 ; '.'
000000000021bba6         db  0x00 ; '.'
000000000021bba7         db  0x00 ; '.'
000000000021bba8         db  0x19 ; '.'
000000000021bba9         db  0x00 ; '.'
000000000021bbaa         db  0x00 ; '.'
000000000021bbab         db  0x00 ; '.'
000000000021bbac         db  0x00 ; '.'
000000000021bbad         db  0x00 ; '.'
000000000021bbae         db  0x00 ; '.'
000000000021bbaf         db  0x00 ; '.'
000000000021bbb0         db  0xb0 ; '.'
000000000021bbb1         db  0xb9 ; '.'
000000000021bbb2         db  0x21 ; '!'
000000000021bbb3         db  0x00 ; '.'
000000000021bbb4         db  0x00 ; '.'
000000000021bbb5         db  0x00 ; '.'
000000000021bbb6         db  0x00 ; '.'
000000000021bbb7         db  0x00 ; '.'
000000000021bbb8         db  0x1b ; '.'
000000000021bbb9         db  0x00 ; '.'
000000000021bbba         db  0x00 ; '.'
000000000021bbbb         db  0x00 ; '.'
000000000021bbbc         db  0x00 ; '.'
000000000021bbbd         db  0x00 ; '.'
000000000021bbbe         db  0x00 ; '.'
000000000021bbbf         db  0x00 ; '.'
000000000021bbc0         db  0x08 ; '.'
000000000021bbc1         db  0x00 ; '.'
000000000021bbc2         db  0x00 ; '.'
000000000021bbc3         db  0x00 ; '.'
000000000021bbc4         db  0x00 ; '.'
000000000021bbc5         db  0x00 ; '.'
000000000021bbc6         db  0x00 ; '.'
000000000021bbc7         db  0x00 ; '.'
000000000021bbc8         db  0x1a ; '.'
000000000021bbc9         db  0x00 ; '.'
000000000021bbca         db  0x00 ; '.'
000000000021bbcb         db  0x00 ; '.'
000000000021bbcc         db  0x00 ; '.'
000000000021bbcd         db  0x00 ; '.'
000000000021bbce         db  0x00 ; '.'
000000000021bbcf         db  0x00 ; '.'
000000000021bbd0         db  0xb8 ; '.'
000000000021bbd1         db  0xb9 ; '.'
000000000021bbd2         db  0x21 ; '!'
000000000021bbd3         db  0x00 ; '.'
000000000021bbd4         db  0x00 ; '.'
000000000021bbd5         db  0x00 ; '.'
000000000021bbd6         db  0x00 ; '.'
000000000021bbd7         db  0x00 ; '.'
000000000021bbd8         db  0x1c ; '.'
000000000021bbd9         db  0x00 ; '.'
000000000021bbda         db  0x00 ; '.'
000000000021bbdb         db  0x00 ; '.'
000000000021bbdc         db  0x00 ; '.'
000000000021bbdd         db  0x00 ; '.'
000000000021bbde         db  0x00 ; '.'
000000000021bbdf         db  0x00 ; '.'
000000000021bbe0         db  0x08 ; '.'
000000000021bbe1         db  0x00 ; '.'
000000000021bbe2         db  0x00 ; '.'
000000000021bbe3         db  0x00 ; '.'
000000000021bbe4         db  0x00 ; '.'
000000000021bbe5         db  0x00 ; '.'
000000000021bbe6         db  0x00 ; '.'
000000000021bbe7         db  0x00 ; '.'
000000000021bbe8         db  0xf5 ; '.'
000000000021bbe9         db  0xfe ; '.'
000000000021bbea         db  0xff ; '.'
000000000021bbeb         db  0x6f ; 'o'
000000000021bbec         db  0x00 ; '.'
000000000021bbed         db  0x00 ; '.'
000000000021bbee         db  0x00 ; '.'
000000000021bbef         db  0x00 ; '.'
000000000021bbf0         db  0x98 ; '.'
000000000021bbf1         db  0x02 ; '.'
000000000021bbf2         db  0x00 ; '.'
000000000021bbf3         db  0x00 ; '.'
000000000021bbf4         db  0x00 ; '.'
000000000021bbf5         db  0x00 ; '.'
000000000021bbf6         db  0x00 ; '.'
000000000021bbf7         db  0x00 ; '.'
000000000021bbf8         db  0x05 ; '.'
000000000021bbf9         db  0x00 ; '.'
000000000021bbfa         db  0x00 ; '.'
000000000021bbfb         db  0x00 ; '.'
000000000021bbfc         db  0x00 ; '.'
000000000021bbfd         db  0x00 ; '.'
000000000021bbfe         db  0x00 ; '.'
000000000021bbff         db  0x00 ; '.'
000000000021bc00         db  0x38 ; '8'
000000000021bc01         db  0x0b ; '.'
000000000021bc02         db  0x00 ; '.'
000000000021bc03         db  0x00 ; '.'
000000000021bc04         db  0x00 ; '.'
000000000021bc05         db  0x00 ; '.'
000000000021bc06         db  0x00 ; '.'
000000000021bc07         db  0x00 ; '.'
000000000021bc08         db  0x06 ; '.'
000000000021bc09         db  0x00 ; '.'
000000000021bc0a         db  0x00 ; '.'
000000000021bc0b         db  0x00 ; '.'
000000000021bc0c         db  0x00 ; '.'
000000000021bc0d         db  0x00 ; '.'
000000000021bc0e         db  0x00 ; '.'
000000000021bc0f         db  0x00 ; '.'
000000000021bc10         db  0xe0 ; '.'
000000000021bc11         db  0x02 ; '.'
000000000021bc12         db  0x00 ; '.'
000000000021bc13         db  0x00 ; '.'
000000000021bc14         db  0x00 ; '.'
000000000021bc15         db  0x00 ; '.'
000000000021bc16         db  0x00 ; '.'
000000000021bc17         db  0x00 ; '.'
000000000021bc18         db  0x0a ; '.'
000000000021bc19         db  0x00 ; '.'
000000000021bc1a         db  0x00 ; '.'
000000000021bc1b         db  0x00 ; '.'
000000000021bc1c         db  0x00 ; '.'
000000000021bc1d         db  0x00 ; '.'
000000000021bc1e         db  0x00 ; '.'
000000000021bc1f         db  0x00 ; '.'
000000000021bc20         db  0xcc ; '.'
000000000021bc21         db  0x03 ; '.'
000000000021bc22         db  0x00 ; '.'
000000000021bc23         db  0x00 ; '.'
000000000021bc24         db  0x00 ; '.'
000000000021bc25         db  0x00 ; '.'
000000000021bc26         db  0x00 ; '.'
000000000021bc27         db  0x00 ; '.'
000000000021bc28         db  0x0b ; '.'
000000000021bc29         db  0x00 ; '.'
000000000021bc2a         db  0x00 ; '.'
000000000021bc2b         db  0x00 ; '.'
000000000021bc2c         db  0x00 ; '.'
000000000021bc2d         db  0x00 ; '.'
000000000021bc2e         db  0x00 ; '.'
000000000021bc2f         db  0x00 ; '.'
000000000021bc30         db  0x18 ; '.'
000000000021bc31         db  0x00 ; '.'
000000000021bc32         db  0x00 ; '.'
000000000021bc33         db  0x00 ; '.'
000000000021bc34         db  0x00 ; '.'
000000000021bc35         db  0x00 ; '.'
000000000021bc36         db  0x00 ; '.'
000000000021bc37         db  0x00 ; '.'
000000000021bc38         db  0x15 ; '.'
000000000021bc39         db  0x00 ; '.'
000000000021bc3a         db  0x00 ; '.'
000000000021bc3b         db  0x00 ; '.'
000000000021bc3c         db  0x00 ; '.'
000000000021bc3d         db  0x00 ; '.'
000000000021bc3e         db  0x00 ; '.'
000000000021bc3f         db  0x00 ; '.'
000000000021bc40         db  0x00 ; '.'
000000000021bc41         db  0x00 ; '.'
000000000021bc42         db  0x00 ; '.'
000000000021bc43         db  0x00 ; '.'
000000000021bc44         db  0x00 ; '.'
000000000021bc45         db  0x00 ; '.'
000000000021bc46         db  0x00 ; '.'
000000000021bc47         db  0x00 ; '.'
000000000021bc48         db  0x03 ; '.'
000000000021bc49         db  0x00 ; '.'
000000000021bc4a         db  0x00 ; '.'
000000000021bc4b         db  0x00 ; '.'
000000000021bc4c         db  0x00 ; '.'
000000000021bc4d         db  0x00 ; '.'
000000000021bc4e         db  0x00 ; '.'
000000000021bc4f         db  0x00 ; '.'
000000000021bc50         db  0x68 ; 'h'
000000000021bc51         db  0xbd ; '.'
000000000021bc52         db  0x21 ; '!'
000000000021bc53         db  0x00 ; '.'
000000000021bc54         db  0x00 ; '.'
000000000021bc55         db  0x00 ; '.'
000000000021bc56         db  0x00 ; '.'
000000000021bc57         db  0x00 ; '.'
000000000021bc58         db  0x02 ; '.'
000000000021bc59         db  0x00 ; '.'
000000000021bc5a         db  0x00 ; '.'
000000000021bc5b         db  0x00 ; '.'
000000000021bc5c         db  0x00 ; '.'
000000000021bc5d         db  0x00 ; '.'
000000000021bc5e         db  0x00 ; '.'
000000000021bc5f         db  0x00 ; '.'
000000000021bc60         db  0x08 ; '.'
000000000021bc61         db  0x07 ; '.'
000000000021bc62         db  0x00 ; '.'
000000000021bc63         db  0x00 ; '.'
000000000021bc64         db  0x00 ; '.'
000000000021bc65         db  0x00 ; '.'
000000000021bc66         db  0x00 ; '.'
000000000021bc67         db  0x00 ; '.'
000000000021bc68         db  0x14 ; '.'
000000000021bc69         db  0x00 ; '.'
000000000021bc6a         db  0x00 ; '.'
000000000021bc6b         db  0x00 ; '.'
000000000021bc6c         db  0x00 ; '.'
000000000021bc6d         db  0x00 ; '.'
000000000021bc6e         db  0x00 ; '.'
000000000021bc6f         db  0x00 ; '.'
000000000021bc70         db  0x07 ; '.'
000000000021bc71         db  0x00 ; '.'
000000000021bc72         db  0x00 ; '.'
000000000021bc73         db  0x00 ; '.'
000000000021bc74         db  0x00 ; '.'
000000000021bc75         db  0x00 ; '.'
000000000021bc76         db  0x00 ; '.'
000000000021bc77         db  0x00 ; '.'
000000000021bc78         db  0x17 ; '.'
000000000021bc79         db  0x00 ; '.'
000000000021bc7a         db  0x00 ; '.'
000000000021bc7b         db  0x00 ; '.'
000000000021bc7c         db  0x00 ; '.'
000000000021bc7d         db  0x00 ; '.'
000000000021bc7e         db  0x00 ; '.'
000000000021bc7f         db  0x00 ; '.'
000000000021bc80         db  0x90 ; '.'
000000000021bc81         db  0x13 ; '.'
000000000021bc82         db  0x00 ; '.'
000000000021bc83         db  0x00 ; '.'
000000000021bc84         db  0x00 ; '.'
000000000021bc85         db  0x00 ; '.'
000000000021bc86         db  0x00 ; '.'
000000000021bc87         db  0x00 ; '.'
000000000021bc88         db  0x07 ; '.'
000000000021bc89         db  0x00 ; '.'
000000000021bc8a         db  0x00 ; '.'
000000000021bc8b         db  0x00 ; '.'
000000000021bc8c         db  0x00 ; '.'
000000000021bc8d         db  0x00 ; '.'
000000000021bc8e         db  0x00 ; '.'
000000000021bc8f         db  0x00 ; '.'
000000000021bc90         db  0x18 ; '.'
000000000021bc91         db  0x10 ; '.'
000000000021bc92         db  0x00 ; '.'
000000000021bc93         db  0x00 ; '.'
000000000021bc94         db  0x00 ; '.'
000000000021bc95         db  0x00 ; '.'
000000000021bc96         db  0x00 ; '.'
000000000021bc97         db  0x00 ; '.'
000000000021bc98         db  0x08 ; '.'
000000000021bc99         db  0x00 ; '.'
000000000021bc9a         db  0x00 ; '.'
000000000021bc9b         db  0x00 ; '.'
000000000021bc9c         db  0x00 ; '.'
000000000021bc9d         db  0x00 ; '.'
000000000021bc9e         db  0x00 ; '.'
000000000021bc9f         db  0x00 ; '.'
000000000021bca0         db  0x78 ; 'x'
000000000021bca1         db  0x03 ; '.'
000000000021bca2         db  0x00 ; '.'
000000000021bca3         db  0x00 ; '.'
000000000021bca4         db  0x00 ; '.'
000000000021bca5         db  0x00 ; '.'
000000000021bca6         db  0x00 ; '.'
000000000021bca7         db  0x00 ; '.'
000000000021bca8         db  0x09 ; '.'
000000000021bca9         db  0x00 ; '.'
000000000021bcaa         db  0x00 ; '.'
000000000021bcab         db  0x00 ; '.'
000000000021bcac         db  0x00 ; '.'
000000000021bcad         db  0x00 ; '.'
000000000021bcae         db  0x00 ; '.'
000000000021bcaf         db  0x00 ; '.'
000000000021bcb0         db  0x18 ; '.'
000000000021bcb1         db  0x00 ; '.'
000000000021bcb2         db  0x00 ; '.'
000000000021bcb3         db  0x00 ; '.'
000000000021bcb4         db  0x00 ; '.'
000000000021bcb5         db  0x00 ; '.'
000000000021bcb6         db  0x00 ; '.'
000000000021bcb7         db  0x00 ; '.'
000000000021bcb8         db  0x1e ; '.'
000000000021bcb9         db  0x00 ; '.'
000000000021bcba         db  0x00 ; '.'
000000000021bcbb         db  0x00 ; '.'
000000000021bcbc         db  0x00 ; '.'
000000000021bcbd         db  0x00 ; '.'
000000000021bcbe         db  0x00 ; '.'
000000000021bcbf         db  0x00 ; '.'
000000000021bcc0         db  0x08 ; '.'
000000000021bcc1         db  0x00 ; '.'
000000000021bcc2         db  0x00 ; '.'
000000000021bcc3         db  0x00 ; '.'
000000000021bcc4         db  0x00 ; '.'
000000000021bcc5         db  0x00 ; '.'
000000000021bcc6         db  0x00 ; '.'
000000000021bcc7         db  0x00 ; '.'
000000000021bcc8         db  0xfb ; '.'
000000000021bcc9         db  0xff ; '.'
000000000021bcca         db  0xff ; '.'
000000000021bccb         db  0x6f ; 'o'
000000000021bccc         db  0x00 ; '.'
000000000021bccd         db  0x00 ; '.'
000000000021bcce         db  0x00 ; '.'
000000000021bccf         db  0x00 ; '.'
000000000021bcd0         db  0x01 ; '.'
000000000021bcd1         db  0x00 ; '.'
000000000021bcd2         db  0x00 ; '.'
000000000021bcd3         db  0x08 ; '.'
000000000021bcd4         db  0x00 ; '.'
000000000021bcd5         db  0x00 ; '.'
000000000021bcd6         db  0x00 ; '.'
000000000021bcd7         db  0x00 ; '.'
000000000021bcd8         db  0xfe ; '.'
000000000021bcd9         db  0xff ; '.'
000000000021bcda         db  0xff ; '.'
000000000021bcdb         db  0x6f ; 'o'
000000000021bcdc         db  0x00 ; '.'
000000000021bcdd         db  0x00 ; '.'
000000000021bcde         db  0x00 ; '.'
000000000021bcdf         db  0x00 ; '.'
000000000021bce0         db  0xb8 ; '.'
000000000021bce1         db  0x0f ; '.'
000000000021bce2         db  0x00 ; '.'
000000000021bce3         db  0x00 ; '.'
000000000021bce4         db  0x00 ; '.'
000000000021bce5         db  0x00 ; '.'
000000000021bce6         db  0x00 ; '.'
000000000021bce7         db  0x00 ; '.'
000000000021bce8         db  0xff ; '.'
000000000021bce9         db  0xff ; '.'
000000000021bcea         db  0xff ; '.'
000000000021bceb         db  0x6f ; 'o'
000000000021bcec         db  0x00 ; '.'
000000000021bced         db  0x00 ; '.'
000000000021bcee         db  0x00 ; '.'
000000000021bcef         db  0x00 ; '.'
000000000021bcf0         db  0x01 ; '.'
000000000021bcf1         db  0x00 ; '.'
000000000021bcf2         db  0x00 ; '.'
000000000021bcf3         db  0x00 ; '.'
000000000021bcf4         db  0x00 ; '.'
000000000021bcf5         db  0x00 ; '.'
000000000021bcf6         db  0x00 ; '.'
000000000021bcf7         db  0x00 ; '.'
000000000021bcf8         db  0xf0 ; '.'
000000000021bcf9         db  0xff ; '.'
000000000021bcfa         db  0xff ; '.'
000000000021bcfb         db  0x6f ; 'o'
000000000021bcfc         db  0x00 ; '.'
000000000021bcfd         db  0x00 ; '.'
000000000021bcfe         db  0x00 ; '.'
000000000021bcff         db  0x00 ; '.'
000000000021bd00         db  0x04 ; '.'
000000000021bd01         db  0x0f ; '.'
000000000021bd02         db  0x00 ; '.'
000000000021bd03         db  0x00 ; '.'
000000000021bd04         db  0x00 ; '.'
000000000021bd05         db  0x00 ; '.'
000000000021bd06         db  0x00 ; '.'
000000000021bd07         db  0x00 ; '.'
000000000021bd08         db  0xf9 ; '.'
000000000021bd09         db  0xff ; '.'
000000000021bd0a         db  0xff ; '.'
000000000021bd0b         db  0x6f ; 'o'
000000000021bd0c         db  0x00 ; '.'
000000000021bd0d         db  0x00 ; '.'
000000000021bd0e         db  0x00 ; '.'
000000000021bd0f         db  0x00 ; '.'
000000000021bd10         db  0x1a ; '.'
000000000021bd11         db  0x00 ; '.'
000000000021bd12         db  0x00 ; '.'
000000000021bd13         db  0x00 ; '.'
000000000021bd14         db  0x00 ; '.'
000000000021bd15         db  0x00 ; '.'
000000000021bd16         db  0x00 ; '.'
000000000021bd17         db  0x00 ; '.'
000000000021bd18         db  0x00 ; '.'
000000000021bd19         db  0x00 ; '.'
000000000021bd1a         db  0x00 ; '.'
000000000021bd1b         db  0x00 ; '.'
000000000021bd1c         db  0x00 ; '.'
000000000021bd1d         db  0x00 ; '.'
000000000021bd1e         db  0x00 ; '.'
000000000021bd1f         db  0x00 ; '.'
000000000021bd20         db  0x00 ; '.'
000000000021bd21         db  0x00 ; '.'
000000000021bd22         db  0x00 ; '.'
000000000021bd23         db  0x00 ; '.'
000000000021bd24         db  0x00 ; '.'
000000000021bd25         db  0x00 ; '.'
000000000021bd26         db  0x00 ; '.'
000000000021bd27         db  0x00 ; '.'
000000000021bd28         db  0x00 ; '.'
000000000021bd29         db  0x00 ; '.'
000000000021bd2a         db  0x00 ; '.'
000000000021bd2b         db  0x00 ; '.'
000000000021bd2c         db  0x00 ; '.'
000000000021bd2d         db  0x00 ; '.'
000000000021bd2e         db  0x00 ; '.'
000000000021bd2f         db  0x00 ; '.'
000000000021bd30         db  0x00 ; '.'
000000000021bd31         db  0x00 ; '.'
000000000021bd32         db  0x00 ; '.'
000000000021bd33         db  0x00 ; '.'
000000000021bd34         db  0x00 ; '.'
000000000021bd35         db  0x00 ; '.'
000000000021bd36         db  0x00 ; '.'
000000000021bd37         db  0x00 ; '.'
000000000021bd38         db  0x00 ; '.'
000000000021bd39         db  0x00 ; '.'
000000000021bd3a         db  0x00 ; '.'
000000000021bd3b         db  0x00 ; '.'
000000000021bd3c         db  0x00 ; '.'
000000000021bd3d         db  0x00 ; '.'
000000000021bd3e         db  0x00 ; '.'
000000000021bd3f         db  0x00 ; '.'
000000000021bd40         db  0x00 ; '.'
000000000021bd41         db  0x00 ; '.'
000000000021bd42         db  0x00 ; '.'
000000000021bd43         db  0x00 ; '.'
000000000021bd44         db  0x00 ; '.'
000000000021bd45         db  0x00 ; '.'
000000000021bd46         db  0x00 ; '.'
000000000021bd47         db  0x00 ; '.'
000000000021bd48         db  0x00 ; '.'
000000000021bd49         db  0x00 ; '.'
000000000021bd4a         db  0x00 ; '.'
000000000021bd4b         db  0x00 ; '.'
000000000021bd4c         db  0x00 ; '.'
000000000021bd4d         db  0x00 ; '.'
000000000021bd4e         db  0x00 ; '.'
000000000021bd4f         db  0x00 ; '.'
000000000021bd50         db  0x00 ; '.'
000000000021bd51         db  0x00 ; '.'
000000000021bd52         db  0x00 ; '.'
000000000021bd53         db  0x00 ; '.'
000000000021bd54         db  0x00 ; '.'
000000000021bd55         db  0x00 ; '.'
000000000021bd56         db  0x00 ; '.'
000000000021bd57         db  0x00 ; '.'
000000000021bd58         db  0x00 ; '.'
000000000021bd59         db  0x00 ; '.'
000000000021bd5a         db  0x00 ; '.'
000000000021bd5b         db  0x00 ; '.'
000000000021bd5c         db  0x00 ; '.'
000000000021bd5d         db  0x00 ; '.'
000000000021bd5e         db  0x00 ; '.'
000000000021bd5f         db  0x00 ; '.'
000000000021bd60         db  0x00 ; '.'
000000000021bd61         db  0x00 ; '.'
000000000021bd62         db  0x00 ; '.'
000000000021bd63         db  0x00 ; '.'
000000000021bd64         db  0x00 ; '.'
000000000021bd65         db  0x00 ; '.'
000000000021bd66         db  0x00 ; '.'
000000000021bd67         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x21bd68; 0x21c000[ (664 bytes)
        ; File offset : [114024; 114688[ (664 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
000000000021bd68         db  0x78 ; 'x'
000000000021bd69         db  0xbb ; '.'
000000000021bd6a         db  0x21 ; '!'
000000000021bd6b         db  0x00 ; '.'
000000000021bd6c         db  0x00 ; '.'
000000000021bd6d         db  0x00 ; '.'
000000000021bd6e         db  0x00 ; '.'
000000000021bd6f         db  0x00 ; '.'
                     qword_21bd70:
000000000021bd70         dq         0x0000000000000000                          ; DATA XREF=0x1ab0
000000000021bd78         db  0x00 ; '.'                                         ; DATA XREF=0x1ab6
000000000021bd79         db  0x00 ; '.'
000000000021bd7a         db  0x00 ; '.'
000000000021bd7b         db  0x00 ; '.'
000000000021bd7c         db  0x00 ; '.'
000000000021bd7d         db  0x00 ; '.'
000000000021bd7e         db  0x00 ; '.'
000000000021bd7f         db  0x00 ; '.'
                     __ctype_toupper_loc@GOT:        // __ctype_toupper_loc
000000000021bd80         dq         0x000000000021c390                          ; DATA XREF=j___ctype_toupper_loc
                     sigprocmask@GOT:        // sigprocmask
000000000021bd88         dq         0x000000000021c398                          ; DATA XREF=j_sigprocmask
                     __snprintf_chk@GOT:        // __snprintf_chk
000000000021bd90         dq         0x000000000021c3a0                          ; DATA XREF=j___snprintf_chk
                     raise@GOT:        // raise
000000000021bd98         dq         0x000000000021c3a8                          ; DATA XREF=j_raise
                     free@GOT:        // free
000000000021bda0         dq         0x000000000021c3b0                          ; DATA XREF=j_free
                     abort@GOT:        // abort
000000000021bda8         dq         0x000000000021c3b8                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
000000000021bdb0         dq         0x000000000021c3c0                          ; DATA XREF=j___errno_location
                     unlink@GOT:        // unlink
000000000021bdb8         dq         0x000000000021c3c8                          ; DATA XREF=j_unlink
                     strncmp@GOT:        // strncmp
000000000021bdc0         dq         0x000000000021c3d0                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
000000000021bdc8         dq         0x000000000021c3e0                          ; DATA XREF=j__exit
                     strcpy@GOT:        // strcpy
000000000021bdd0         dq         0x000000000021c3e8                          ; DATA XREF=j_strcpy
                     __fpending@GOT:        // __fpending
000000000021bdd8         dq         0x000000000021c3f0                          ; DATA XREF=j___fpending
                     sigaction@GOT:        // sigaction
000000000021bde0         dq         0x000000000021c3f8                          ; DATA XREF=j_sigaction
                     fcntl@GOT:        // fcntl
000000000021bde8         dq         0x000000000021c400                          ; DATA XREF=j_fcntl
                     textdomain@GOT:        // textdomain
000000000021bdf0         dq         0x000000000021c408                          ; DATA XREF=j_textdomain
                     __strtol_internal@GOT:        // __strtol_internal
000000000021bdf8         dq         0x000000000021c410                          ; DATA XREF=j___strtol_internal
                     iswctype@GOT:        // iswctype
000000000021be00         dq         0x000000000021c418                          ; DATA XREF=j_iswctype
                     fclose@GOT:        // fclose
000000000021be08         dq         0x000000000021c420                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
000000000021be10         dq         0x000000000021c428                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
000000000021be18         dq         0x000000000021c430                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
000000000021be20         dq         0x000000000021c438                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
000000000021be28         dq         0x000000000021c440                          ; DATA XREF=j_strlen
                     __stack_chk_fail@GOT:        // __stack_chk_fail
000000000021be30         dq         0x000000000021c448                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
000000000021be38         dq         0x000000000021c450                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
000000000021be40         dq         0x000000000021c458                          ; DATA XREF=j_mbrtowc
                     dup2@GOT:        // dup2
000000000021be48         dq         0x000000000021c460                          ; DATA XREF=j_dup2
                     strchr@GOT:        // strchr
000000000021be50         dq         0x000000000021c468                          ; DATA XREF=j_strchr
                     strrchr@GOT:        // strrchr
000000000021be58         dq         0x000000000021c470                          ; DATA XREF=j_strrchr
                     lseek@GOT:        // lseek
000000000021be60         dq         0x000000000021c478                          ; DATA XREF=j_lseek
                     __assert_fail@GOT:        // __assert_fail
000000000021be68         dq         0x000000000021c480                          ; DATA XREF=j___assert_fail
                     __strtoul_internal@GOT:        // __strtoul_internal
000000000021be70         dq         0x000000000021c488                          ; DATA XREF=j___strtoul_internal
                     memset@GOT:        // memset
000000000021be78         dq         0x000000000021c490                          ; DATA XREF=j_memset
                     close@GOT:        // close
000000000021be80         dq         0x000000000021c498                          ; DATA XREF=j_close
                     fputc@GOT:        // fputc
000000000021be88         dq         0x000000000021c4a0                          ; DATA XREF=j_fputc
                     memchr@GOT:        // memchr
000000000021be90         dq         0x000000000021c4a8                          ; DATA XREF=j_memchr
                     read@GOT:        // read
000000000021be98         dq         0x000000000021c4b0                          ; DATA XREF=j_read
                     memcmp@GOT:        // memcmp
000000000021bea0         dq         0x000000000021c4c0                          ; DATA XREF=j_memcmp
                     wctype@GOT:        // wctype
000000000021bea8         dq         0x000000000021c4c8                          ; DATA XREF=j_wctype
                     fputs_unlocked@GOT:        // fputs_unlocked
000000000021beb0         dq         0x000000000021c4d0                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
000000000021beb8         dq         0x000000000021c4d8                          ; DATA XREF=j_calloc
                     strcmp@GOT:        // strcmp
000000000021bec0         dq         0x000000000021c4e0                          ; DATA XREF=j_strcmp
                     signal@GOT:        // signal
000000000021bec8         dq         0x000000000021c4e8                          ; DATA XREF=j_signal
                     sigemptyset@GOT:        // sigemptyset
000000000021bed0         dq         0x000000000021c4f0                          ; DATA XREF=j_sigemptyset
                     memcpy@GOT:        // memcpy
000000000021bed8         dq         0x000000000021c500                          ; DATA XREF=j_memcpy
                     fileno@GOT:        // fileno
000000000021bee0         dq         0x000000000021c508                          ; DATA XREF=j_fileno
                     iswalnum@GOT:        // iswalnum
000000000021bee8         dq         0x000000000021c510                          ; DATA XREF=j_iswalnum
                     malloc@GOT:        // malloc
000000000021bef0         dq         0x000000000021c518                          ; DATA XREF=j_malloc
                     wcrtomb@GOT:        // wcrtomb
000000000021bef8         dq         0x000000000021c520                          ; DATA XREF=j_wcrtomb
                     fflush@GOT:        // fflush
000000000021bf00         dq         0x000000000021c528                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
000000000021bf08         dq         0x000000000021c530                          ; DATA XREF=j_nl_langinfo
                     __freading@GOT:        // __freading
000000000021bf10         dq         0x000000000021c538                          ; DATA XREF=j___freading
                     fwrite_unlocked@GOT:        // fwrite_unlocked
000000000021bf18         dq         0x000000000021c540                          ; DATA XREF=j_fwrite_unlocked
                     realloc@GOT:        // realloc
000000000021bf20         dq         0x000000000021c548                          ; DATA XREF=j_realloc
                     fdopen@GOT:        // fdopen
000000000021bf28         dq         0x000000000021c550                          ; DATA XREF=j_fdopen
                     setlocale@GOT:        // setlocale
000000000021bf30         dq         0x000000000021c558                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
000000000021bf38         dq         0x000000000021c560                          ; DATA XREF=j___printf_chk
                     btowc@GOT:        // btowc
000000000021bf40         dq         0x000000000021c568                          ; DATA XREF=j_btowc
                     memmove@GOT:        // memmove
000000000021bf48         dq         0x000000000021c570                          ; DATA XREF=j_memmove
                     error@GOT:        // error
000000000021bf50         dq         0x000000000021c578                          ; DATA XREF=j_error
                     open@GOT:        // open
000000000021bf58         dq         0x000000000021c580                          ; DATA XREF=j_open
                     fseeko@GOT:        // fseeko
000000000021bf60         dq         0x000000000021c588                          ; DATA XREF=j_fseeko
                     fopen@GOT:        // fopen
000000000021bf68         dq         0x000000000021c590                          ; DATA XREF=j_fopen
                     towlower@GOT:        // towlower
000000000021bf70         dq         0x000000000021c598                          ; DATA XREF=j_towlower
                     towupper@GOT:        // towupper
000000000021bf78         dq         0x000000000021c5a0                          ; DATA XREF=j_towupper
                     __cxa_atexit@GOT:        // __cxa_atexit
000000000021bf80         dq         0x000000000021c5a8                          ; DATA XREF=j___cxa_atexit
                     sigismember@GOT:        // sigismember
000000000021bf88         dq         0x000000000021c5b0                          ; DATA XREF=j_sigismember
                     exit@GOT:        // exit
000000000021bf90         dq         0x000000000021c5b8                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
000000000021bf98         dq         0x000000000021c5c0                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
000000000021bfa0         dq         0x000000000021c5c8                          ; DATA XREF=j___fprintf_chk
                     mbsinit@GOT:        // mbsinit
000000000021bfa8         dq         0x000000000021c5d8                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
000000000021bfb0         dq         0x000000000021c5e0                          ; DATA XREF=j_iswprint
                     sigaddset@GOT:        // sigaddset
000000000021bfb8         dq         0x000000000021c5f0                          ; DATA XREF=j_sigaddset
                     __ctype_tolower_loc@GOT:        // __ctype_tolower_loc
000000000021bfc0         dq         0x000000000021c5f8                          ; DATA XREF=j___ctype_tolower_loc
                     __ctype_b_loc@GOT:        // __ctype_b_loc
000000000021bfc8         dq         0x000000000021c600                          ; DATA XREF=j___ctype_b_loc
                     __sprintf_chk@GOT:        // __sprintf_chk
000000000021bfd0         dq         0x000000000021c608                          ; DATA XREF=j___sprintf_chk
                     qword_21bfd8:
000000000021bfd8         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
000000000021bfe0         db  0x00 ; '.'                                         ; DATA XREF=_start+36
000000000021bfe1         db  0x00 ; '.'
000000000021bfe2         db  0x00 ; '.'
000000000021bfe3         db  0x00 ; '.'
000000000021bfe4         db  0x00 ; '.'
000000000021bfe5         db  0x00 ; '.'
000000000021bfe6         db  0x00 ; '.'
000000000021bfe7         db  0x00 ; '.'
                     qword_21bfe8:
000000000021bfe8         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_21bff0:
000000000021bff0         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_21bff8:
000000000021bff8         dq         0x0000000000000000                          ; DATA XREF=j_qword_21bff8, __do_global_dtors_aux+9


        ; Section .data
        ; Range: [0x21c000; 0x21c0a0[ (160 bytes)
        ; File offset : [114688; 114848[ (160 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

000000000021c000         align      8
                     __dso_handle:
000000000021c008         dq         0x000000000021c008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     digits:
000000000021c010         dd         0x00000002                                  ; DATA XREF=main+392, main+694, main+709, make_filename+112
000000000021c014         align      8
                     Version:
000000000021c018         dq         0x0000000000016b4c                          ; "8.31", DATA XREF=main+510
                     exit_failure:
000000000021c020         dd         0x00000001                                  ; DATA XREF=close_stdout+130
000000000021c024         db  0x00 ; '.'
000000000021c025         db  0x00 ; '.'
000000000021c026         db  0x00 ; '.'
000000000021c027         db  0x00 ; '.'
000000000021c028         db  0x00 ; '.'
000000000021c029         db  0x00 ; '.'
000000000021c02a         db  0x00 ; '.'
000000000021c02b         db  0x00 ; '.'
000000000021c02c         db  0x00 ; '.'
000000000021c02d         db  0x00 ; '.'
000000000021c02e         db  0x00 ; '.'
000000000021c02f         db  0x00 ; '.'
000000000021c030         db  0x00 ; '.'
000000000021c031         db  0x00 ; '.'
000000000021c032         db  0x00 ; '.'
000000000021c033         db  0x00 ; '.'
000000000021c034         db  0x00 ; '.'
000000000021c035         db  0x00 ; '.'
000000000021c036         db  0x00 ; '.'
000000000021c037         db  0x00 ; '.'
000000000021c038         db  0x00 ; '.'
000000000021c039         db  0x00 ; '.'
000000000021c03a         db  0x00 ; '.'
000000000021c03b         db  0x00 ; '.'
000000000021c03c         db  0x00 ; '.'
000000000021c03d         db  0x00 ; '.'
000000000021c03e         db  0x00 ; '.'
000000000021c03f         db  0x00 ; '.'
                     quote_quoting_options:
000000000021c040         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
000000000021c041         db  0x00 ; '.'
000000000021c042         db  0x00 ; '.'
000000000021c043         db  0x00 ; '.'
000000000021c044         db  0x00 ; '.'
000000000021c045         db  0x00 ; '.'
000000000021c046         db  0x00 ; '.'
000000000021c047         db  0x00 ; '.'
000000000021c048         db  0x00 ; '.'
000000000021c049         db  0x00 ; '.'
000000000021c04a         db  0x00 ; '.'
000000000021c04b         db  0x00 ; '.'
000000000021c04c         db  0x00 ; '.'
000000000021c04d         db  0x00 ; '.'
000000000021c04e         db  0x00 ; '.'
000000000021c04f         db  0x00 ; '.'
000000000021c050         db  0x00 ; '.'
000000000021c051         db  0x00 ; '.'
000000000021c052         db  0x00 ; '.'
000000000021c053         db  0x00 ; '.'
000000000021c054         db  0x00 ; '.'
000000000021c055         db  0x00 ; '.'
000000000021c056         db  0x00 ; '.'
000000000021c057         db  0x00 ; '.'
000000000021c058         db  0x00 ; '.'
000000000021c059         db  0x00 ; '.'
000000000021c05a         db  0x00 ; '.'
000000000021c05b         db  0x00 ; '.'
000000000021c05c         db  0x00 ; '.'
000000000021c05d         db  0x00 ; '.'
000000000021c05e         db  0x00 ; '.'
000000000021c05f         db  0x00 ; '.'
000000000021c060         db  0x00 ; '.'
000000000021c061         db  0x00 ; '.'
000000000021c062         db  0x00 ; '.'
000000000021c063         db  0x00 ; '.'
000000000021c064         db  0x00 ; '.'
000000000021c065         db  0x00 ; '.'
000000000021c066         db  0x00 ; '.'
000000000021c067         db  0x00 ; '.'
000000000021c068         db  0x00 ; '.'
000000000021c069         db  0x00 ; '.'
000000000021c06a         db  0x00 ; '.'
000000000021c06b         db  0x00 ; '.'
000000000021c06c         db  0x00 ; '.'
000000000021c06d         db  0x00 ; '.'
000000000021c06e         db  0x00 ; '.'
000000000021c06f         db  0x00 ; '.'
000000000021c070         db  0x00 ; '.'
000000000021c071         db  0x00 ; '.'
000000000021c072         db  0x00 ; '.'
000000000021c073         db  0x00 ; '.'
000000000021c074         db  0x00 ; '.'
000000000021c075         db  0x00 ; '.'
000000000021c076         db  0x00 ; '.'
000000000021c077         db  0x00 ; '.'
                     nslots:
000000000021c078         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000021c07c         db  0x00 ; '.'
000000000021c07d         db  0x00 ; '.'
000000000021c07e         db  0x00 ; '.'
000000000021c07f         db  0x00 ; '.'
                     slotvec:
000000000021c080         dq         0x000000000021c090                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
000000000021c088         db  0x00 ; '.'
000000000021c089         db  0x00 ; '.'
000000000021c08a         db  0x00 ; '.'
000000000021c08b         db  0x00 ; '.'
000000000021c08c         db  0x00 ; '.'
000000000021c08d         db  0x00 ; '.'
000000000021c08e         db  0x00 ; '.'
000000000021c08f         db  0x00 ; '.'
                     slotvec0:
000000000021c090         dq         1.26481e-321, 1.09308e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x21c0a0; 0x21c388[ (744 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
000000000021c0a0         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
000000000021c0a1         db  0x00 ; '.'
000000000021c0a2         db  0x00 ; '.'
000000000021c0a3         db  0x00 ; '.'
000000000021c0a4         db  0x00 ; '.'
000000000021c0a5         db  0x00 ; '.'
000000000021c0a6         db  0x00 ; '.'
000000000021c0a7         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
000000000021c0a8         db  0x00 ; '.'                                         ; DATA XREF=main+503, close_output_file+157, usage+125, usage+162, usage+199, usage+236, usage+273, usage+310, usage+347, usage+384, usage+421
000000000021c0a9         db  0x00 ; '.'
000000000021c0aa         db  0x00 ; '.'
000000000021c0ab         db  0x00 ; '.'
000000000021c0ac         db  0x00 ; '.'
000000000021c0ad         db  0x00 ; '.'
000000000021c0ae         db  0x00 ; '.'
000000000021c0af         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
000000000021c0b0         db  0x00 ; '.'                                         ; DATA XREF=main+561, main+745, main+775, main+2713
000000000021c0b1         db  0x00 ; '.'
000000000021c0b2         db  0x00 ; '.'
000000000021c0b3         db  0x00 ; '.'
000000000021c0b4         db  0x00 ; '.'
000000000021c0b5         db  0x00 ; '.'
000000000021c0b6         db  0x00 ; '.'
000000000021c0b7         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
000000000021c0b8         db  0x00 ; '.'                                         ; DATA XREF=main+315, main+360, main+464
000000000021c0b9         db  0x00 ; '.'
000000000021c0ba         db  0x00 ; '.'
000000000021c0bb         db  0x00 ; '.'
000000000021c0bc         db  0x00 ; '.'
000000000021c0bd         db  0x00 ; '.'
000000000021c0be         db  0x00 ; '.'
000000000021c0bf         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
000000000021c0c0         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
000000000021c0c1         db  0x00 ; '.'
000000000021c0c2         db  0x00 ; '.'
000000000021c0c3         db  0x00 ; '.'
000000000021c0c4         db  0x00 ; '.'
000000000021c0c5         db  0x00 ; '.'
000000000021c0c6         db  0x00 ; '.'
000000000021c0c7         db  0x00 ; '.'
000000000021c0c8         db  0x00 ; '.'
000000000021c0c9         db  0x00 ; '.'
000000000021c0ca         db  0x00 ; '.'
000000000021c0cb         db  0x00 ; '.'
000000000021c0cc         db  0x00 ; '.'
000000000021c0cd         db  0x00 ; '.'
000000000021c0ce         db  0x00 ; '.'
000000000021c0cf         db  0x00 ; '.'
000000000021c0d0         db  0x00 ; '.'
000000000021c0d1         db  0x00 ; '.'
000000000021c0d2         db  0x00 ; '.'
000000000021c0d3         db  0x00 ; '.'
000000000021c0d4         db  0x00 ; '.'
000000000021c0d5         db  0x00 ; '.'
000000000021c0d6         db  0x00 ; '.'
000000000021c0d7         db  0x00 ; '.'
000000000021c0d8         db  0x00 ; '.'
000000000021c0d9         db  0x00 ; '.'
000000000021c0da         db  0x00 ; '.'
000000000021c0db         db  0x00 ; '.'
000000000021c0dc         db  0x00 ; '.'
000000000021c0dd         db  0x00 ; '.'
000000000021c0de         db  0x00 ; '.'
000000000021c0df         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
000000000021c0e0         db  0x00 ; '.'                                         ; DATA XREF=regexp_error+80, regexp_error+146, regexp_error+173, handle_line_error.isra.1+77, handle_line_error.isra.1+143, handle_line_error.isra.1+173, usage+61, close_stdout+44, set_program_name+125
000000000021c0e1         db  0x00 ; '.'
000000000021c0e2         db  0x00 ; '.'
000000000021c0e3         db  0x00 ; '.'
000000000021c0e4         db  0x00 ; '.'
000000000021c0e5         db  0x00 ; '.'
000000000021c0e6         db  0x00 ; '.'
000000000021c0e7         db  0x00 ; '.'
                     completed.7697:
000000000021c0e8         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
000000000021c0e9         db  0x00 ; '.'
000000000021c0ea         db  0x00 ; '.'
000000000021c0eb         db  0x00 ; '.'
000000000021c0ec         db  0x00 ; '.'
000000000021c0ed         db  0x00 ; '.'
000000000021c0ee         db  0x00 ; '.'
000000000021c0ef         db  0x00 ; '.'
000000000021c0f0         db  0x00 ; '.'
000000000021c0f1         db  0x00 ; '.'
000000000021c0f2         db  0x00 ; '.'
000000000021c0f3         db  0x00 ; '.'
000000000021c0f4         db  0x00 ; '.'
000000000021c0f5         db  0x00 ; '.'
000000000021c0f6         db  0x00 ; '.'
000000000021c0f7         db  0x00 ; '.'
000000000021c0f8         db  0x00 ; '.'
000000000021c0f9         db  0x00 ; '.'
000000000021c0fa         db  0x00 ; '.'
000000000021c0fb         db  0x00 ; '.'
000000000021c0fc         db  0x00 ; '.'
000000000021c0fd         db  0x00 ; '.'
000000000021c0fe         db  0x00 ; '.'
000000000021c0ff         db  0x00 ; '.'
                     prev_buf.7217:
000000000021c100         db  0x00 ; '.'                                         ; DATA XREF=remove_line+1, remove_line+34, remove_line+150
000000000021c101         db  0x00 ; '.'
000000000021c102         db  0x00 ; '.'
000000000021c103         db  0x00 ; '.'
000000000021c104         db  0x00 ; '.'
000000000021c105         db  0x00 ; '.'
000000000021c106         db  0x00 ; '.'
000000000021c107         db  0x00 ; '.'
                     control_allocated.7351:
000000000021c108         db  0x00 ; '.'                                         ; DATA XREF=new_control_record+11, new_control_record+123
000000000021c109         db  0x00 ; '.'
000000000021c10a         db  0x00 ; '.'
000000000021c10b         db  0x00 ; '.'
000000000021c10c         db  0x00 ; '.'
000000000021c10d         db  0x00 ; '.'
000000000021c10e         db  0x00 ; '.'
000000000021c10f         db  0x00 ; '.'
                     last_val.7392:
000000000021c110         db  0x00 ; '.'                                         ; DATA XREF=main+943, main+965
000000000021c111         db  0x00 ; '.'
000000000021c112         db  0x00 ; '.'
000000000021c113         db  0x00 ; '.'
000000000021c114         db  0x00 ; '.'
000000000021c115         db  0x00 ; '.'
000000000021c116         db  0x00 ; '.'
000000000021c117         db  0x00 ; '.'
000000000021c118         db  0x00 ; '.'
000000000021c119         db  0x00 ; '.'
000000000021c11a         db  0x00 ; '.'
000000000021c11b         db  0x00 ; '.'
000000000021c11c         db  0x00 ; '.'
000000000021c11d         db  0x00 ; '.'
000000000021c11e         db  0x00 ; '.'
000000000021c11f         db  0x00 ; '.'
                     caught_signals:
000000000021c120         db  0x00 ; '.'                                         ; DATA XREF=main+1295, main+1307, main+1383, main+1406, cleanup_fatal+35, close_output_file+192, create_output_file+115
000000000021c121         db  0x00 ; '.'
000000000021c122         db  0x00 ; '.'
000000000021c123         db  0x00 ; '.'
000000000021c124         db  0x00 ; '.'
000000000021c125         db  0x00 ; '.'
000000000021c126         db  0x00 ; '.'
000000000021c127         db  0x00 ; '.'
000000000021c128         db  0x00 ; '.'
000000000021c129         db  0x00 ; '.'
000000000021c12a         db  0x00 ; '.'
000000000021c12b         db  0x00 ; '.'
000000000021c12c         db  0x00 ; '.'
000000000021c12d         db  0x00 ; '.'
000000000021c12e         db  0x00 ; '.'
000000000021c12f         db  0x00 ; '.'
000000000021c130         db  0x00 ; '.'
000000000021c131         db  0x00 ; '.'
000000000021c132         db  0x00 ; '.'
000000000021c133         db  0x00 ; '.'
000000000021c134         db  0x00 ; '.'
000000000021c135         db  0x00 ; '.'
000000000021c136         db  0x00 ; '.'
000000000021c137         db  0x00 ; '.'
000000000021c138         db  0x00 ; '.'
000000000021c139         db  0x00 ; '.'
000000000021c13a         db  0x00 ; '.'
000000000021c13b         db  0x00 ; '.'
000000000021c13c         db  0x00 ; '.'
000000000021c13d         db  0x00 ; '.'
000000000021c13e         db  0x00 ; '.'
000000000021c13f         db  0x00 ; '.'
000000000021c140         db  0x00 ; '.'
000000000021c141         db  0x00 ; '.'
000000000021c142         db  0x00 ; '.'
000000000021c143         db  0x00 ; '.'
000000000021c144         db  0x00 ; '.'
000000000021c145         db  0x00 ; '.'
000000000021c146         db  0x00 ; '.'
000000000021c147         db  0x00 ; '.'
000000000021c148         db  0x00 ; '.'
000000000021c149         db  0x00 ; '.'
000000000021c14a         db  0x00 ; '.'
000000000021c14b         db  0x00 ; '.'
000000000021c14c         db  0x00 ; '.'
000000000021c14d         db  0x00 ; '.'
000000000021c14e         db  0x00 ; '.'
000000000021c14f         db  0x00 ; '.'
000000000021c150         db  0x00 ; '.'
000000000021c151         db  0x00 ; '.'
000000000021c152         db  0x00 ; '.'
000000000021c153         db  0x00 ; '.'
000000000021c154         db  0x00 ; '.'
000000000021c155         db  0x00 ; '.'
000000000021c156         db  0x00 ; '.'
000000000021c157         db  0x00 ; '.'
000000000021c158         db  0x00 ; '.'
000000000021c159         db  0x00 ; '.'
000000000021c15a         db  0x00 ; '.'
000000000021c15b         db  0x00 ; '.'
000000000021c15c         db  0x00 ; '.'
000000000021c15d         db  0x00 ; '.'
000000000021c15e         db  0x00 ; '.'
000000000021c15f         db  0x00 ; '.'
000000000021c160         db  0x00 ; '.'
000000000021c161         db  0x00 ; '.'
000000000021c162         db  0x00 ; '.'
000000000021c163         db  0x00 ; '.'
000000000021c164         db  0x00 ; '.'
000000000021c165         db  0x00 ; '.'
000000000021c166         db  0x00 ; '.'
000000000021c167         db  0x00 ; '.'
000000000021c168         db  0x00 ; '.'
000000000021c169         db  0x00 ; '.'
000000000021c16a         db  0x00 ; '.'
000000000021c16b         db  0x00 ; '.'
000000000021c16c         db  0x00 ; '.'
000000000021c16d         db  0x00 ; '.'
000000000021c16e         db  0x00 ; '.'
000000000021c16f         db  0x00 ; '.'
000000000021c170         db  0x00 ; '.'
000000000021c171         db  0x00 ; '.'
000000000021c172         db  0x00 ; '.'
000000000021c173         db  0x00 ; '.'
000000000021c174         db  0x00 ; '.'
000000000021c175         db  0x00 ; '.'
000000000021c176         db  0x00 ; '.'
000000000021c177         db  0x00 ; '.'
000000000021c178         db  0x00 ; '.'
000000000021c179         db  0x00 ; '.'
000000000021c17a         db  0x00 ; '.'
000000000021c17b         db  0x00 ; '.'
000000000021c17c         db  0x00 ; '.'
000000000021c17d         db  0x00 ; '.'
000000000021c17e         db  0x00 ; '.'
000000000021c17f         db  0x00 ; '.'
000000000021c180         db  0x00 ; '.'
000000000021c181         db  0x00 ; '.'
000000000021c182         db  0x00 ; '.'
000000000021c183         db  0x00 ; '.'
000000000021c184         db  0x00 ; '.'
000000000021c185         db  0x00 ; '.'
000000000021c186         db  0x00 ; '.'
000000000021c187         db  0x00 ; '.'
000000000021c188         db  0x00 ; '.'
000000000021c189         db  0x00 ; '.'
000000000021c18a         db  0x00 ; '.'
000000000021c18b         db  0x00 ; '.'
000000000021c18c         db  0x00 ; '.'
000000000021c18d         db  0x00 ; '.'
000000000021c18e         db  0x00 ; '.'
000000000021c18f         db  0x00 ; '.'
000000000021c190         db  0x00 ; '.'
000000000021c191         db  0x00 ; '.'
000000000021c192         db  0x00 ; '.'
000000000021c193         db  0x00 ; '.'
000000000021c194         db  0x00 ; '.'
000000000021c195         db  0x00 ; '.'
000000000021c196         db  0x00 ; '.'
000000000021c197         db  0x00 ; '.'
000000000021c198         db  0x00 ; '.'
000000000021c199         db  0x00 ; '.'
000000000021c19a         db  0x00 ; '.'
000000000021c19b         db  0x00 ; '.'
000000000021c19c         db  0x00 ; '.'
000000000021c19d         db  0x00 ; '.'
000000000021c19e         db  0x00 ; '.'
000000000021c19f         db  0x00 ; '.'
                     control_used:
000000000021c1a0         db  0x00 ; '.'                                         ; DATA XREF=main+150, main+1487, new_control_record+4, new_control_record+31, new_control_record+139
000000000021c1a1         db  0x00 ; '.'
000000000021c1a2         db  0x00 ; '.'
000000000021c1a3         db  0x00 ; '.'
000000000021c1a4         db  0x00 ; '.'
000000000021c1a5         db  0x00 ; '.'
000000000021c1a6         db  0x00 ; '.'
000000000021c1a7         db  0x00 ; '.'
                     controls:
000000000021c1a8         db  0x00 ; '.'                                         ; DATA XREF=main+139, main+1506, main+1977, main+2613, new_control_record+18, new_control_record+149
000000000021c1a9         db  0x00 ; '.'
000000000021c1aa         db  0x00 ; '.'
000000000021c1ab         db  0x00 ; '.'
000000000021c1ac         db  0x00 ; '.'
000000000021c1ad         db  0x00 ; '.'
000000000021c1ae         db  0x00 ; '.'
000000000021c1af         db  0x00 ; '.'
                     suppress_matched:
000000000021c1b0         db  0x00 ; '.'                                         ; DATA XREF=main+168, main+266, main+1562, main+1930, main+2116, main+2233, main+2259
                     elide_empty_files:
000000000021c1b1         db  0x00 ; '.'                                         ; DATA XREF=main+448, close_output_file+78
                     remove_files:
000000000021c1b2         db  0x00 ; '.'                                         ; DATA XREF=main+125, main+432, cleanup_fatal+52, interrupt_handler
                     suppress_count:
000000000021c1b3         db  0x00 ; '.'                                         ; DATA XREF=main+161, main+412, close_output_file+87
000000000021c1b4         db  0x00 ; '.'
000000000021c1b5         db  0x00 ; '.'
000000000021c1b6         db  0x00 ; '.'
000000000021c1b7         db  0x00 ; '.'
                     global_argv:
000000000021c1b8         db  0x00 ; '.'                                         ; DATA XREF=regexp_error+35, main+132, main+3536, main+3700, main+3765
000000000021c1b9         db  0x00 ; '.'
000000000021c1ba         db  0x00 ; '.'
000000000021c1bb         db  0x00 ; '.'
000000000021c1bc         db  0x00 ; '.'
000000000021c1bd         db  0x00 ; '.'
000000000021c1be         db  0x00 ; '.'
000000000021c1bf         db  0x00 ; '.'
                     output_filename:
000000000021c1c0         db  0x00 ; '.'                                         ; DATA XREF=close_output_file+210, close_output_file+326, close_output_file+390, save_line_to_file+55, create_output_file+49, create_output_file+253
000000000021c1c1         db  0x00 ; '.'
000000000021c1c2         db  0x00 ; '.'
000000000021c1c3         db  0x00 ; '.'
000000000021c1c4         db  0x00 ; '.'
000000000021c1c5         db  0x00 ; '.'
000000000021c1c6         db  0x00 ; '.'
000000000021c1c7         db  0x00 ; '.'
                     output_stream:
000000000021c1c8         db  0x00 ; '.'                                         ; DATA XREF=close_output_file+13, close_output_file+96, close_output_file+374, save_line_to_file+21, save_line_to_file+119, create_output_file+150
000000000021c1c9         db  0x00 ; '.'
000000000021c1ca         db  0x00 ; '.'
000000000021c1cb         db  0x00 ; '.'
000000000021c1cc         db  0x00 ; '.'
000000000021c1cd         db  0x00 ; '.'
000000000021c1ce         db  0x00 ; '.'
000000000021c1cf         db  0x00 ; '.'
                     bytes_written:
000000000021c1d0         db  0x00 ; '.'                                         ; DATA XREF=close_output_file+66, save_line_to_file+41, create_output_file+223
000000000021c1d1         db  0x00 ; '.'
000000000021c1d2         db  0x00 ; '.'
000000000021c1d3         db  0x00 ; '.'
000000000021c1d4         db  0x00 ; '.'
000000000021c1d5         db  0x00 ; '.'
000000000021c1d6         db  0x00 ; '.'
000000000021c1d7         db  0x00 ; '.'
                     files_created:
000000000021c1d8         db  0x00 ; '.'                                         ; DATA XREF=delete_all_files.part.0, delete_all_files.part.0+48, delete_all_files.part.0+131, delete_all_files.part.0+141, delete_all_files.part.0+168, close_output_file+235, close_output_file+260, create_output_file+35, create_output_file+56, create_output_file+162, create_output_file+190
000000000021c1d9         db  0x00 ; '.'
000000000021c1da         db  0x00 ; '.'
000000000021c1db         db  0x00 ; '.'
000000000021c1dc         db  0x00 ; '.'
000000000021c1dd         db  0x00 ; '.'
000000000021c1de         db  0x00 ; '.'
000000000021c1df         db  0x00 ; '.'
                     suffix:
000000000021c1e0         db  0x00 ; '.'                                         ; DATA XREF=main+471, main+607, main+619, make_filename+25, make_filename+37
000000000021c1e1         db  0x00 ; '.'
000000000021c1e2         db  0x00 ; '.'
000000000021c1e3         db  0x00 ; '.'
000000000021c1e4         db  0x00 ; '.'
000000000021c1e5         db  0x00 ; '.'
000000000021c1e6         db  0x00 ; '.'
000000000021c1e7         db  0x00 ; '.'
                     prefix:
000000000021c1e8         db  0x00 ; '.'                                         ; DATA XREF=main+175, main+322, main+582, make_filename+2, make_filename+51, make_filename+126
000000000021c1e9         db  0x00 ; '.'
000000000021c1ea         db  0x00 ; '.'
000000000021c1eb         db  0x00 ; '.'
000000000021c1ec         db  0x00 ; '.'
000000000021c1ed         db  0x00 ; '.'
000000000021c1ee         db  0x00 ; '.'
000000000021c1ef         db  0x00 ; '.'
                     filename_space:
000000000021c1f0         db  0x00 ; '.'                                         ; DATA XREF=main+751, make_filename+12, make_filename+44, make_filename+93, make_filename+119, make_filename+175
000000000021c1f1         db  0x00 ; '.'
000000000021c1f2         db  0x00 ; '.'
000000000021c1f3         db  0x00 ; '.'
000000000021c1f4         db  0x00 ; '.'
000000000021c1f5         db  0x00 ; '.'
000000000021c1f6         db  0x00 ; '.'
000000000021c1f7         db  0x00 ; '.'
                     have_read_eof:
000000000021c1f8         db  0x00 ; '.'                                         ; DATA XREF=load_buffer.part.5+220, load_buffer.part.5+342, load_buffer.part.5+420, remove_line+176, find_line+76, find_line+216, get_first_line_in_buffer+24
000000000021c1f9         db  0x00 ; '.'
000000000021c1fa         db  0x00 ; '.'
000000000021c1fb         db  0x00 ; '.'
000000000021c1fc         db  0x00 ; '.'
000000000021c1fd         db  0x00 ; '.'
000000000021c1fe         db  0x00 ; '.'
000000000021c1ff         db  0x00 ; '.'
                     current_line:
000000000021c200         db  0x00 ; '.'                                         ; DATA XREF=main+1571, main+1670, main+1681, main+1952, main+2023, main+2200, main+2211, main+2484, main+2602, remove_line+61, remove_line+70
000000000021c201         db  0x00 ; '.'
000000000021c202         db  0x00 ; '.'
000000000021c203         db  0x00 ; '.'
000000000021c204         db  0x00 ; '.'
000000000021c205         db  0x00 ; '.'
000000000021c206         db  0x00 ; '.'
000000000021c207         db  0x00 ; '.'
                     last_line_number:
000000000021c208         db  0x00 ; '.'                                         ; DATA XREF=load_buffer.part.5+127, load_buffer.part.5+378, load_buffer.part.5+399
000000000021c209         db  0x00 ; '.'
000000000021c20a         db  0x00 ; '.'
000000000021c20b         db  0x00 ; '.'
000000000021c20c         db  0x00 ; '.'
000000000021c20d         db  0x00 ; '.'
000000000021c20e         db  0x00 ; '.'
000000000021c20f         db  0x00 ; '.'
                     hold_count:
000000000021c210         db  0x00 ; '.'                                         ; DATA XREF=load_buffer.part.5+19, load_buffer.part.5+30, load_buffer.part.5+113, load_buffer.part.5+553, load_buffer.part.5+753
000000000021c211         db  0x00 ; '.'
000000000021c212         db  0x00 ; '.'
000000000021c213         db  0x00 ; '.'
000000000021c214         db  0x00 ; '.'
000000000021c215         db  0x00 ; '.'
000000000021c216         db  0x00 ; '.'
000000000021c217         db  0x00 ; '.'
                     hold_area:
000000000021c218         db  0x00 ; '.'                                         ; DATA XREF=load_buffer.part.5+528, load_buffer.part.5+731, load_buffer.part.5+746
000000000021c219         db  0x00 ; '.'
000000000021c21a         db  0x00 ; '.'
000000000021c21b         db  0x00 ; '.'
000000000021c21c         db  0x00 ; '.'
000000000021c21d         db  0x00 ; '.'
000000000021c21e         db  0x00 ; '.'
000000000021c21f         db  0x00 ; '.'
                     head:
000000000021c220         db  0x00 ; '.'                                         ; DATA XREF=load_buffer.part.5+656, sub_3c60, remove_line+45, remove_line+162, remove_line+194, find_line+9, find_line+234, get_first_line_in_buffer, get_first_line_in_buffer+43
000000000021c221         db  0x00 ; '.'
000000000021c222         db  0x00 ; '.'
000000000021c223         db  0x00 ; '.'
000000000021c224         db  0x00 ; '.'
000000000021c225         db  0x00 ; '.'
000000000021c226         db  0x00 ; '.'
000000000021c227         db  0x00 ; '.'
                     ignore_EPIPE:
000000000021c228         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
000000000021c229         db  0x00 ; '.'
000000000021c22a         db  0x00 ; '.'
000000000021c22b         db  0x00 ; '.'
000000000021c22c         db  0x00 ; '.'
000000000021c22d         db  0x00 ; '.'
000000000021c22e         db  0x00 ; '.'
000000000021c22f         db  0x00 ; '.'
                     file_name:
000000000021c230         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
000000000021c231         db  0x00 ; '.'
000000000021c232         db  0x00 ; '.'
000000000021c233         db  0x00 ; '.'
000000000021c234         db  0x00 ; '.'
000000000021c235         db  0x00 ; '.'
000000000021c236         db  0x00 ; '.'
000000000021c237         db  0x00 ; '.'
                     program_name:
000000000021c238         db  0x00 ; '.'                                         ; DATA XREF=regexp_error+60, handle_line_error.isra.1+57, usage+20, set_program_name+109
000000000021c239         db  0x00 ; '.'
000000000021c23a         db  0x00 ; '.'
000000000021c23b         db  0x00 ; '.'
000000000021c23c         db  0x00 ; '.'
000000000021c23d         db  0x00 ; '.'
000000000021c23e         db  0x00 ; '.'
000000000021c23f         db  0x00 ; '.'
                     slot0:
000000000021c240         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
000000000021c241         db  0x00 ; '.'
000000000021c242         db  0x00 ; '.'
000000000021c243         db  0x00 ; '.'
000000000021c244         db  0x00 ; '.'
000000000021c245         db  0x00 ; '.'
000000000021c246         db  0x00 ; '.'
000000000021c247         db  0x00 ; '.'
000000000021c248         db  0x00 ; '.'
000000000021c249         db  0x00 ; '.'
000000000021c24a         db  0x00 ; '.'
000000000021c24b         db  0x00 ; '.'
000000000021c24c         db  0x00 ; '.'
000000000021c24d         db  0x00 ; '.'
000000000021c24e         db  0x00 ; '.'
000000000021c24f         db  0x00 ; '.'
000000000021c250         db  0x00 ; '.'
000000000021c251         db  0x00 ; '.'
000000000021c252         db  0x00 ; '.'
000000000021c253         db  0x00 ; '.'
000000000021c254         db  0x00 ; '.'
000000000021c255         db  0x00 ; '.'
000000000021c256         db  0x00 ; '.'
000000000021c257         db  0x00 ; '.'
000000000021c258         db  0x00 ; '.'
000000000021c259         db  0x00 ; '.'
000000000021c25a         db  0x00 ; '.'
000000000021c25b         db  0x00 ; '.'
000000000021c25c         db  0x00 ; '.'
000000000021c25d         db  0x00 ; '.'
000000000021c25e         db  0x00 ; '.'
000000000021c25f         db  0x00 ; '.'
000000000021c260         db  0x00 ; '.'
000000000021c261         db  0x00 ; '.'
000000000021c262         db  0x00 ; '.'
000000000021c263         db  0x00 ; '.'
000000000021c264         db  0x00 ; '.'
000000000021c265         db  0x00 ; '.'
000000000021c266         db  0x00 ; '.'
000000000021c267         db  0x00 ; '.'
000000000021c268         db  0x00 ; '.'
000000000021c269         db  0x00 ; '.'
000000000021c26a         db  0x00 ; '.'
000000000021c26b         db  0x00 ; '.'
000000000021c26c         db  0x00 ; '.'
000000000021c26d         db  0x00 ; '.'
000000000021c26e         db  0x00 ; '.'
000000000021c26f         db  0x00 ; '.'
000000000021c270         db  0x00 ; '.'
000000000021c271         db  0x00 ; '.'
000000000021c272         db  0x00 ; '.'
000000000021c273         db  0x00 ; '.'
000000000021c274         db  0x00 ; '.'
000000000021c275         db  0x00 ; '.'
000000000021c276         db  0x00 ; '.'
000000000021c277         db  0x00 ; '.'
000000000021c278         db  0x00 ; '.'
000000000021c279         db  0x00 ; '.'
000000000021c27a         db  0x00 ; '.'
000000000021c27b         db  0x00 ; '.'
000000000021c27c         db  0x00 ; '.'
000000000021c27d         db  0x00 ; '.'
000000000021c27e         db  0x00 ; '.'
000000000021c27f         db  0x00 ; '.'
000000000021c280         db  0x00 ; '.'
000000000021c281         db  0x00 ; '.'
000000000021c282         db  0x00 ; '.'
000000000021c283         db  0x00 ; '.'
000000000021c284         db  0x00 ; '.'
000000000021c285         db  0x00 ; '.'
000000000021c286         db  0x00 ; '.'
000000000021c287         db  0x00 ; '.'
000000000021c288         db  0x00 ; '.'
000000000021c289         db  0x00 ; '.'
000000000021c28a         db  0x00 ; '.'
000000000021c28b         db  0x00 ; '.'
000000000021c28c         db  0x00 ; '.'
000000000021c28d         db  0x00 ; '.'
000000000021c28e         db  0x00 ; '.'
000000000021c28f         db  0x00 ; '.'
000000000021c290         db  0x00 ; '.'
000000000021c291         db  0x00 ; '.'
000000000021c292         db  0x00 ; '.'
000000000021c293         db  0x00 ; '.'
000000000021c294         db  0x00 ; '.'
000000000021c295         db  0x00 ; '.'
000000000021c296         db  0x00 ; '.'
000000000021c297         db  0x00 ; '.'
000000000021c298         db  0x00 ; '.'
000000000021c299         db  0x00 ; '.'
000000000021c29a         db  0x00 ; '.'
000000000021c29b         db  0x00 ; '.'
000000000021c29c         db  0x00 ; '.'
000000000021c29d         db  0x00 ; '.'
000000000021c29e         db  0x00 ; '.'
000000000021c29f         db  0x00 ; '.'
000000000021c2a0         db  0x00 ; '.'
000000000021c2a1         db  0x00 ; '.'
000000000021c2a2         db  0x00 ; '.'
000000000021c2a3         db  0x00 ; '.'
000000000021c2a4         db  0x00 ; '.'
000000000021c2a5         db  0x00 ; '.'
000000000021c2a6         db  0x00 ; '.'
000000000021c2a7         db  0x00 ; '.'
000000000021c2a8         db  0x00 ; '.'
000000000021c2a9         db  0x00 ; '.'
000000000021c2aa         db  0x00 ; '.'
000000000021c2ab         db  0x00 ; '.'
000000000021c2ac         db  0x00 ; '.'
000000000021c2ad         db  0x00 ; '.'
000000000021c2ae         db  0x00 ; '.'
000000000021c2af         db  0x00 ; '.'
000000000021c2b0         db  0x00 ; '.'
000000000021c2b1         db  0x00 ; '.'
000000000021c2b2         db  0x00 ; '.'
000000000021c2b3         db  0x00 ; '.'
000000000021c2b4         db  0x00 ; '.'
000000000021c2b5         db  0x00 ; '.'
000000000021c2b6         db  0x00 ; '.'
000000000021c2b7         db  0x00 ; '.'
000000000021c2b8         db  0x00 ; '.'
000000000021c2b9         db  0x00 ; '.'
000000000021c2ba         db  0x00 ; '.'
000000000021c2bb         db  0x00 ; '.'
000000000021c2bc         db  0x00 ; '.'
000000000021c2bd         db  0x00 ; '.'
000000000021c2be         db  0x00 ; '.'
000000000021c2bf         db  0x00 ; '.'
000000000021c2c0         db  0x00 ; '.'
000000000021c2c1         db  0x00 ; '.'
000000000021c2c2         db  0x00 ; '.'
000000000021c2c3         db  0x00 ; '.'
000000000021c2c4         db  0x00 ; '.'
000000000021c2c5         db  0x00 ; '.'
000000000021c2c6         db  0x00 ; '.'
000000000021c2c7         db  0x00 ; '.'
000000000021c2c8         db  0x00 ; '.'
000000000021c2c9         db  0x00 ; '.'
000000000021c2ca         db  0x00 ; '.'
000000000021c2cb         db  0x00 ; '.'
000000000021c2cc         db  0x00 ; '.'
000000000021c2cd         db  0x00 ; '.'
000000000021c2ce         db  0x00 ; '.'
000000000021c2cf         db  0x00 ; '.'
000000000021c2d0         db  0x00 ; '.'
000000000021c2d1         db  0x00 ; '.'
000000000021c2d2         db  0x00 ; '.'
000000000021c2d3         db  0x00 ; '.'
000000000021c2d4         db  0x00 ; '.'
000000000021c2d5         db  0x00 ; '.'
000000000021c2d6         db  0x00 ; '.'
000000000021c2d7         db  0x00 ; '.'
000000000021c2d8         db  0x00 ; '.'
000000000021c2d9         db  0x00 ; '.'
000000000021c2da         db  0x00 ; '.'
000000000021c2db         db  0x00 ; '.'
000000000021c2dc         db  0x00 ; '.'
000000000021c2dd         db  0x00 ; '.'
000000000021c2de         db  0x00 ; '.'
000000000021c2df         db  0x00 ; '.'
000000000021c2e0         db  0x00 ; '.'
000000000021c2e1         db  0x00 ; '.'
000000000021c2e2         db  0x00 ; '.'
000000000021c2e3         db  0x00 ; '.'
000000000021c2e4         db  0x00 ; '.'
000000000021c2e5         db  0x00 ; '.'
000000000021c2e6         db  0x00 ; '.'
000000000021c2e7         db  0x00 ; '.'
000000000021c2e8         db  0x00 ; '.'
000000000021c2e9         db  0x00 ; '.'
000000000021c2ea         db  0x00 ; '.'
000000000021c2eb         db  0x00 ; '.'
000000000021c2ec         db  0x00 ; '.'
000000000021c2ed         db  0x00 ; '.'
000000000021c2ee         db  0x00 ; '.'
000000000021c2ef         db  0x00 ; '.'
000000000021c2f0         db  0x00 ; '.'
000000000021c2f1         db  0x00 ; '.'
000000000021c2f2         db  0x00 ; '.'
000000000021c2f3         db  0x00 ; '.'
000000000021c2f4         db  0x00 ; '.'
000000000021c2f5         db  0x00 ; '.'
000000000021c2f6         db  0x00 ; '.'
000000000021c2f7         db  0x00 ; '.'
000000000021c2f8         db  0x00 ; '.'
000000000021c2f9         db  0x00 ; '.'
000000000021c2fa         db  0x00 ; '.'
000000000021c2fb         db  0x00 ; '.'
000000000021c2fc         db  0x00 ; '.'
000000000021c2fd         db  0x00 ; '.'
000000000021c2fe         db  0x00 ; '.'
000000000021c2ff         db  0x00 ; '.'
000000000021c300         db  0x00 ; '.'
000000000021c301         db  0x00 ; '.'
000000000021c302         db  0x00 ; '.'
000000000021c303         db  0x00 ; '.'
000000000021c304         db  0x00 ; '.'
000000000021c305         db  0x00 ; '.'
000000000021c306         db  0x00 ; '.'
000000000021c307         db  0x00 ; '.'
000000000021c308         db  0x00 ; '.'
000000000021c309         db  0x00 ; '.'
000000000021c30a         db  0x00 ; '.'
000000000021c30b         db  0x00 ; '.'
000000000021c30c         db  0x00 ; '.'
000000000021c30d         db  0x00 ; '.'
000000000021c30e         db  0x00 ; '.'
000000000021c30f         db  0x00 ; '.'
000000000021c310         db  0x00 ; '.'
000000000021c311         db  0x00 ; '.'
000000000021c312         db  0x00 ; '.'
000000000021c313         db  0x00 ; '.'
000000000021c314         db  0x00 ; '.'
000000000021c315         db  0x00 ; '.'
000000000021c316         db  0x00 ; '.'
000000000021c317         db  0x00 ; '.'
000000000021c318         db  0x00 ; '.'
000000000021c319         db  0x00 ; '.'
000000000021c31a         db  0x00 ; '.'
000000000021c31b         db  0x00 ; '.'
000000000021c31c         db  0x00 ; '.'
000000000021c31d         db  0x00 ; '.'
000000000021c31e         db  0x00 ; '.'
000000000021c31f         db  0x00 ; '.'
000000000021c320         db  0x00 ; '.'
000000000021c321         db  0x00 ; '.'
000000000021c322         db  0x00 ; '.'
000000000021c323         db  0x00 ; '.'
000000000021c324         db  0x00 ; '.'
000000000021c325         db  0x00 ; '.'
000000000021c326         db  0x00 ; '.'
000000000021c327         db  0x00 ; '.'
000000000021c328         db  0x00 ; '.'
000000000021c329         db  0x00 ; '.'
000000000021c32a         db  0x00 ; '.'
000000000021c32b         db  0x00 ; '.'
000000000021c32c         db  0x00 ; '.'
000000000021c32d         db  0x00 ; '.'
000000000021c32e         db  0x00 ; '.'
000000000021c32f         db  0x00 ; '.'
000000000021c330         db  0x00 ; '.'
000000000021c331         db  0x00 ; '.'
000000000021c332         db  0x00 ; '.'
000000000021c333         db  0x00 ; '.'
000000000021c334         db  0x00 ; '.'
000000000021c335         db  0x00 ; '.'
000000000021c336         db  0x00 ; '.'
000000000021c337         db  0x00 ; '.'
000000000021c338         db  0x00 ; '.'
000000000021c339         db  0x00 ; '.'
000000000021c33a         db  0x00 ; '.'
000000000021c33b         db  0x00 ; '.'
000000000021c33c         db  0x00 ; '.'
000000000021c33d         db  0x00 ; '.'
000000000021c33e         db  0x00 ; '.'
000000000021c33f         db  0x00 ; '.'
                     default_quoting_options:
000000000021c340         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
000000000021c341         db  0x00 ; '.'
000000000021c342         db  0x00 ; '.'
000000000021c343         db  0x00 ; '.'
000000000021c344         db  0x00 ; '.'
000000000021c345         db  0x00 ; '.'
000000000021c346         db  0x00 ; '.'
000000000021c347         db  0x00 ; '.'
000000000021c348         db  0x00 ; '.'
000000000021c349         db  0x00 ; '.'
000000000021c34a         db  0x00 ; '.'
000000000021c34b         db  0x00 ; '.'
000000000021c34c         db  0x00 ; '.'
000000000021c34d         db  0x00 ; '.'
000000000021c34e         db  0x00 ; '.'
000000000021c34f         db  0x00 ; '.'
000000000021c350         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
000000000021c351         db  0x00 ; '.'
000000000021c352         db  0x00 ; '.'
000000000021c353         db  0x00 ; '.'
000000000021c354         db  0x00 ; '.'
000000000021c355         db  0x00 ; '.'
000000000021c356         db  0x00 ; '.'
000000000021c357         db  0x00 ; '.'
000000000021c358         db  0x00 ; '.'
000000000021c359         db  0x00 ; '.'
000000000021c35a         db  0x00 ; '.'
000000000021c35b         db  0x00 ; '.'
000000000021c35c         db  0x00 ; '.'
000000000021c35d         db  0x00 ; '.'
000000000021c35e         db  0x00 ; '.'
000000000021c35f         db  0x00 ; '.'
000000000021c360         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
000000000021c361         db  0x00 ; '.'
000000000021c362         db  0x00 ; '.'
000000000021c363         db  0x00 ; '.'
000000000021c364         db  0x00 ; '.'
000000000021c365         db  0x00 ; '.'
000000000021c366         db  0x00 ; '.'
000000000021c367         db  0x00 ; '.'
000000000021c368         db  0x00 ; '.'
000000000021c369         db  0x00 ; '.'
000000000021c36a         db  0x00 ; '.'
000000000021c36b         db  0x00 ; '.'
000000000021c36c         db  0x00 ; '.'
000000000021c36d         db  0x00 ; '.'
000000000021c36e         db  0x00 ; '.'
000000000021c36f         db  0x00 ; '.'
                     qword_21c370:
000000000021c370         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
000000000021c371         db  0x00 ; '.'
000000000021c372         db  0x00 ; '.'
000000000021c373         db  0x00 ; '.'
000000000021c374         db  0x00 ; '.'
000000000021c375         db  0x00 ; '.'
000000000021c376         db  0x00 ; '.'
000000000021c377         db  0x00 ; '.'
                     have_dupfd_cloexec.3326:
000000000021c378         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+94, rpl_fcntl+143, rpl_fcntl+438, rpl_fcntl+574
000000000021c379         db  0x00 ; '.'
000000000021c37a         db  0x00 ; '.'
000000000021c37b         db  0x00 ; '.'
000000000021c37c         db  0x00 ; '.'
000000000021c37d         db  0x00 ; '.'
000000000021c37e         db  0x00 ; '.'
000000000021c37f         db  0x00 ; '.'
                     rpl_re_syntax_options:
000000000021c380         db  0x00 ; '.'                                         ; DATA XREF=main+1159, rpl_re_compile_pattern+4, rpl_re_set_syntax, rpl_re_set_syntax+7
000000000021c381         db  0x00 ; '.'
000000000021c382         db  0x00 ; '.'
000000000021c383         db  0x00 ; '.'
000000000021c384         db  0x00 ; '.'
000000000021c385         db  0x00 ; '.'
000000000021c386         db  0x00 ; '.'
000000000021c387         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x21c390; 0x21c890[ (1280 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x21c390; 0x438c20[ (2214032 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     __ctype_toupper_loc:
000000000021c390         extern function code                                   ; DATA XREF=__ctype_toupper_loc@GOT
                     sigprocmask:
000000000021c398         extern function code                                   ; DATA XREF=sigprocmask@GOT
                     __snprintf_chk:
000000000021c3a0         extern function code                                   ; DATA XREF=__snprintf_chk@GOT
                     raise:
000000000021c3a8         extern function code                                   ; DATA XREF=raise@GOT
                     free:
000000000021c3b0         extern function code                                   ; DATA XREF=free@GOT
                     abort:
000000000021c3b8         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
000000000021c3c0         extern function code                                   ; DATA XREF=__errno_location@GOT
                     unlink:
000000000021c3c8         extern function code                                   ; DATA XREF=unlink@GOT
                     strncmp:
000000000021c3d0         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
000000000021c3d8         extern function code
                     _exit:
000000000021c3e0         extern function code                                   ; DATA XREF=_exit@GOT
                     strcpy:
000000000021c3e8         extern function code                                   ; DATA XREF=strcpy@GOT
                     __fpending:
000000000021c3f0         extern function code                                   ; DATA XREF=__fpending@GOT
                     sigaction:
000000000021c3f8         extern function code                                   ; DATA XREF=sigaction@GOT
                     fcntl:
000000000021c400         extern function code                                   ; DATA XREF=fcntl@GOT
                     textdomain:
000000000021c408         extern function code                                   ; DATA XREF=textdomain@GOT
                     __strtol_internal:
000000000021c410         extern function code                                   ; DATA XREF=__strtol_internal@GOT
                     iswctype:
000000000021c418         extern function code                                   ; DATA XREF=iswctype@GOT
                     fclose:
000000000021c420         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
000000000021c428         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
000000000021c430         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
000000000021c438         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
000000000021c440         extern function code                                   ; DATA XREF=strlen@GOT
                     __stack_chk_fail:
000000000021c448         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
000000000021c450         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
000000000021c458         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     dup2:
000000000021c460         extern function code                                   ; DATA XREF=dup2@GOT
                     strchr:
000000000021c468         extern function code                                   ; DATA XREF=strchr@GOT
                     strrchr:
000000000021c470         extern function code                                   ; DATA XREF=strrchr@GOT
                     lseek:
000000000021c478         extern function code                                   ; DATA XREF=lseek@GOT
                     __assert_fail:
000000000021c480         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     __strtoul_internal:
000000000021c488         extern function code                                   ; DATA XREF=__strtoul_internal@GOT
                     memset:
000000000021c490         extern function code                                   ; DATA XREF=memset@GOT
                     close:
000000000021c498         extern function code                                   ; DATA XREF=close@GOT
                     fputc:
000000000021c4a0         extern function code                                   ; DATA XREF=fputc@GOT
                     memchr:
000000000021c4a8         extern function code                                   ; DATA XREF=memchr@GOT
                     read:
000000000021c4b0         extern function code                                   ; DATA XREF=read@GOT
                     __libc_start_main:
000000000021c4b8         extern function code
                     memcmp:
000000000021c4c0         extern function code                                   ; DATA XREF=memcmp@GOT
                     wctype:
000000000021c4c8         extern function code                                   ; DATA XREF=wctype@GOT
                     fputs_unlocked:
000000000021c4d0         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
000000000021c4d8         extern function code                                   ; DATA XREF=calloc@GOT
                     strcmp:
000000000021c4e0         extern function code                                   ; DATA XREF=strcmp@GOT
                     signal:
000000000021c4e8         extern function code                                   ; DATA XREF=signal@GOT
                     sigemptyset:
000000000021c4f0         extern function code                                   ; DATA XREF=sigemptyset@GOT
                     __gmon_start__:
000000000021c4f8         extern function code
                     memcpy:
000000000021c500         extern function code                                   ; DATA XREF=memcpy@GOT
                     fileno:
000000000021c508         extern function code                                   ; DATA XREF=fileno@GOT
                     iswalnum:
000000000021c510         extern function code                                   ; DATA XREF=iswalnum@GOT
                     malloc:
000000000021c518         extern function code                                   ; DATA XREF=malloc@GOT
                     wcrtomb:
000000000021c520         extern function code                                   ; DATA XREF=wcrtomb@GOT
                     fflush:
000000000021c528         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
000000000021c530         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     __freading:
000000000021c538         extern function code                                   ; DATA XREF=__freading@GOT
                     fwrite_unlocked:
000000000021c540         extern function code                                   ; DATA XREF=fwrite_unlocked@GOT
                     realloc:
000000000021c548         extern function code                                   ; DATA XREF=realloc@GOT
                     fdopen:
000000000021c550         extern function code                                   ; DATA XREF=fdopen@GOT
                     setlocale:
000000000021c558         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
000000000021c560         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     btowc:
000000000021c568         extern function code                                   ; DATA XREF=btowc@GOT
                     memmove:
000000000021c570         extern function code                                   ; DATA XREF=memmove@GOT
                     error:
000000000021c578         extern function code                                   ; DATA XREF=error@GOT
                     open:
000000000021c580         extern function code                                   ; DATA XREF=open@GOT
                     fseeko:
000000000021c588         extern function code                                   ; DATA XREF=fseeko@GOT
                     fopen:
000000000021c590         extern function code                                   ; DATA XREF=fopen@GOT
                     towlower:
000000000021c598         extern function code                                   ; DATA XREF=towlower@GOT
                     towupper:
000000000021c5a0         extern function code                                   ; DATA XREF=towupper@GOT
                     __cxa_atexit:
000000000021c5a8         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     sigismember:
000000000021c5b0         extern function code                                   ; DATA XREF=sigismember@GOT
                     exit:
000000000021c5b8         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
000000000021c5c0         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
000000000021c5c8         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
000000000021c5d0         extern function code
                     mbsinit:
000000000021c5d8         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
000000000021c5e0         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
000000000021c5e8         extern function code
                     sigaddset:
000000000021c5f0         extern function code                                   ; DATA XREF=sigaddset@GOT
                     __ctype_tolower_loc:
000000000021c5f8         extern function code                                   ; DATA XREF=__ctype_tolower_loc@GOT
                     __ctype_b_loc:
000000000021c600         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     __sprintf_chk:
000000000021c608         extern function code                                   ; DATA XREF=__sprintf_chk@GOT
                     __ctype_toupper_loc@@GLIBC_2.3:
000000000021c610         extern function code
                     sigprocmask@@GLIBC_2.2.5:
000000000021c618         extern function code
                     __snprintf_chk@@GLIBC_2.3.4:
000000000021c620         extern function code
                     raise@@GLIBC_2.2.5:
000000000021c628         extern function code
                     free@@GLIBC_2.2.5:
000000000021c630         extern function code
                     abort@@GLIBC_2.2.5:
000000000021c638         extern function code
                     __errno_location@@GLIBC_2.2.5:
000000000021c640         extern function code
                     unlink@@GLIBC_2.2.5:
000000000021c648         extern function code
                     strncmp@@GLIBC_2.2.5:
000000000021c650         extern function code
                     _ITM_deregisterTMCloneTable_21c658:        // _ITM_deregisterTMCloneTable
000000000021c658         extern function code
                     _exit@@GLIBC_2.2.5:
000000000021c660         extern function code
                     strcpy@@GLIBC_2.2.5:
000000000021c668         extern function code
                     __fpending@@GLIBC_2.2.5:
000000000021c670         extern function code
                     sigaction@@GLIBC_2.2.5:
000000000021c678         extern function code
                     fcntl@@GLIBC_2.2.5:
000000000021c680         extern function code
                     textdomain@@GLIBC_2.2.5:
000000000021c688         extern function code
                     __strtol_internal@@GLIBC_2.2.5:
000000000021c690         extern function code
                     iswctype@@GLIBC_2.2.5:
000000000021c698         extern function code
                     fclose@@GLIBC_2.2.5:
000000000021c6a0         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
000000000021c6a8         extern function code
                     dcgettext@@GLIBC_2.2.5:
000000000021c6b0         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
000000000021c6b8         extern function code
                     strlen@@GLIBC_2.2.5:
000000000021c6c0         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
000000000021c6c8         extern function code
                     getopt_long@@GLIBC_2.2.5:
000000000021c6d0         extern function code
                     mbrtowc@@GLIBC_2.2.5:
000000000021c6d8         extern function code
                     dup2@@GLIBC_2.2.5:
000000000021c6e0         extern function code
                     strchr@@GLIBC_2.2.5:
000000000021c6e8         extern function code
                     strrchr@@GLIBC_2.2.5:
000000000021c6f0         extern function code
                     lseek@@GLIBC_2.2.5:
000000000021c6f8         extern function code
                     __assert_fail@@GLIBC_2.2.5:
000000000021c700         extern function code
                     __strtoul_internal@@GLIBC_2.2.5:
000000000021c708         extern function code
                     memset@@GLIBC_2.2.5:
000000000021c710         extern function code
                     close@@GLIBC_2.2.5:
000000000021c718         extern function code
                     fputc@@GLIBC_2.2.5:
000000000021c720         extern function code
                     memchr@@GLIBC_2.2.5:
000000000021c728         extern function code
                     read@@GLIBC_2.2.5:
000000000021c730         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
000000000021c738         extern function code
                     memcmp@@GLIBC_2.2.5:
000000000021c740         extern function code
                     wctype@@GLIBC_2.2.5:
000000000021c748         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
000000000021c750         extern function code
                     calloc@@GLIBC_2.2.5:
000000000021c758         extern function code
                     strcmp@@GLIBC_2.2.5:
000000000021c760         extern function code
                     signal@@GLIBC_2.2.5:
000000000021c768         extern function code
                     sigemptyset@@GLIBC_2.2.5:
000000000021c770         extern function code
                     __gmon_start___21c778:        // __gmon_start__
000000000021c778         extern function code
                     memcpy@@GLIBC_2.14:
000000000021c780         extern function code
                     fileno@@GLIBC_2.2.5:
000000000021c788         extern function code
                     iswalnum@@GLIBC_2.2.5:
000000000021c790         extern function code
                     malloc@@GLIBC_2.2.5:
000000000021c798         extern function code
                     wcrtomb@@GLIBC_2.2.5:
000000000021c7a0         extern function code
                     fflush@@GLIBC_2.2.5:
000000000021c7a8         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
000000000021c7b0         extern function code
                     __freading@@GLIBC_2.2.5:
000000000021c7b8         extern function code
                     fwrite_unlocked@@GLIBC_2.2.5:
000000000021c7c0         extern function code
                     realloc@@GLIBC_2.2.5:
000000000021c7c8         extern function code
                     fdopen@@GLIBC_2.2.5:
000000000021c7d0         extern function code
                     setlocale@@GLIBC_2.2.5:
000000000021c7d8         extern function code
                     __printf_chk@@GLIBC_2.3.4:
000000000021c7e0         extern function code
                     btowc@@GLIBC_2.2.5:
000000000021c7e8         extern function code
                     memmove@@GLIBC_2.2.5:
000000000021c7f0         extern function code
                     error@@GLIBC_2.2.5:
000000000021c7f8         extern function code
                     open@@GLIBC_2.2.5:
000000000021c800         extern function code
                     fseeko@@GLIBC_2.2.5:
000000000021c808         extern function code
                     fopen@@GLIBC_2.2.5:
000000000021c810         extern function code
                     towlower@@GLIBC_2.2.5:
000000000021c818         extern function code
                     towupper@@GLIBC_2.2.5:
000000000021c820         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
000000000021c828         extern function code
                     sigismember@@GLIBC_2.2.5:
000000000021c830         extern function code
                     exit@@GLIBC_2.2.5:
000000000021c838         extern function code
                     fwrite@@GLIBC_2.2.5:
000000000021c840         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
000000000021c848         extern function code
                     _ITM_registerTMCloneTable_21c850:        // _ITM_registerTMCloneTable
000000000021c850         extern function code
                     mbsinit@@GLIBC_2.2.5:
000000000021c858         extern function code
                     iswprint@@GLIBC_2.2.5:
000000000021c860         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
000000000021c868         extern function code
                     sigaddset@@GLIBC_2.2.5:
000000000021c870         extern function code
                     __ctype_tolower_loc@@GLIBC_2.3:
000000000021c878         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
000000000021c880         extern function code
                     __sprintf_chk@@GLIBC_2.3.4:
000000000021c888         extern function code
