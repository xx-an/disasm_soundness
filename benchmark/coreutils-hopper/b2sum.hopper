
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/b2sum
        UUID: 88096C4D-23ED-8C08-622F-3D0327C87389
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0xbda8[ (48552 bytes)
        ; File offset : [0; 48552[ (48552 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0x00 ; '.'
0000000000000019         db  0x30 ; '0'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0x38 ; '8'
0000000000000029         db  0x65 ; 'e'
000000000000002a         db  0x04 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0xa8 ; '.'
00000000000000d1         db  0xbd ; '.'
00000000000000d2         db  0x00 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0xa8 ; '.'
00000000000000d9         db  0xbd ; '.'
00000000000000da         db  0x00 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0xb0 ; '.'
00000000000000f1         db  0xc9 ; '.'
00000000000000f2         db  0x00 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0xb0 ; '.'
00000000000000f9         db  0xc9 ; '.'
00000000000000fa         db  0x20 ; ' '
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0xb0 ; '.'                                         ; DATA XREF=blake2b+11, blake2b+164, quotearg_free+87, rpl_fflush+18, slotvec0
0000000000000101         db  0xc9 ; '.'                                         ; DATA XREF=blake2b_init_key+111
0000000000000102         db  0x20 ; ' '
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0xf0 ; '.'
0000000000000109         db  0x06 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0xd0 ; '.'
0000000000000111         db  0x08 ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'                                         ; DATA XREF=blake2b_stream+21, blake2b_stream+242
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0xf8 ; '.'
0000000000000129         db  0xcb ; '.'
000000000000012a         db  0x00 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0xf8 ; '.'
0000000000000131         db  0xcb ; '.'
0000000000000132         db  0x20 ; ' '
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0xf8 ; '.'
0000000000000139         db  0xcb ; '.'
000000000000013a         db  0x20 ; ' '
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'                                         ; DATA XREF=main+31, main+2723, blake2b_compress+10, blake2b_compress+5845
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0xe4 ; '.'
0000000000000199         db  0xa9 ; '.'
000000000000019a         db  0x00 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0xe4 ; '.'
00000000000001a1         db  0xa9 ; '.'
00000000000001a2         db  0x00 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0xe4 ; '.'
00000000000001a9         db  0xa9 ; '.'
00000000000001aa         db  0x00 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0x24 ; '$'
00000000000001b1         db  0x03 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0x24 ; '$'
00000000000001b9         db  0x03 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'                                         ; DATA XREF=main+3014, main+3553
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=main+766, main+788, main+799, main+1563, main+5048, usage+114, xstrtoul+573, xstrtoumax+573
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0xb0 ; '.'
0000000000000209         db  0xc9 ; '.'
000000000000020a         db  0x00 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0xb0 ; '.'
0000000000000211         db  0xc9 ; '.'
0000000000000212         db  0x20 ; ' '
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0xb0 ; '.'
0000000000000219         db  0xc9 ; '.'
000000000000021a         db  0x20 ; ' '
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x50 ; 'P'
0000000000000221         db  0x06 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x50 ; 'P'
0000000000000229         db  0x06 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0x88 ; '.'
0000000000000285         db  0x09 ; '.'
0000000000000286         db  0x6c ; 'l'
0000000000000287         db  0x4d ; 'M'
0000000000000288         db  0x23 ; '#'
0000000000000289         db  0xed ; '.'
000000000000028a         db  0x8c ; '.'
000000000000028b         db  0x08 ; '.'
000000000000028c         db  0x62 ; 'b'
000000000000028d         db  0x2f ; '/'
000000000000028e         db  0x3d ; '='
000000000000028f         db  0x03 ; '.'
0000000000000290         db  0x27 ; '''
0000000000000291         db  0xc8 ; '.'
0000000000000292         db  0x73 ; 's'
0000000000000293         db  0x89 ; '.'
0000000000000294         db  0x21 ; '!'
0000000000000295         db  0x6f ; 'o'
0000000000000296         db  0x76 ; 'v'
0000000000000297         db  0xee ; '.'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2e0[ (72 bytes)
        ; File offset : [664; 736[ (72 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x41 ; 'A'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x61 ; 'a'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0xa0 ; '.'
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x41 ; 'A'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x42 ; 'B'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x48 ; 'H'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x66 ; 'f'
00000000000002c5         db  0x55 ; 'U'
00000000000002c6         db  0x61 ; 'a'
00000000000002c7         db  0x10 ; '.'
00000000000002c8         db  0x96 ; '.'
00000000000002c9         db  0xa0 ; '.'
00000000000002ca         db  0x89 ; '.'
00000000000002cb         db  0x97 ; '.'
00000000000002cc         db  0xce ; '.'
00000000000002cd         db  0x2c ; ','
00000000000002ce         db  0x63 ; 'c'
00000000000002cf         db  0x72 ; 'r'
00000000000002d0         db  0xe4 ; '.'
00000000000002d1         db  0x62 ; 'b'
00000000000002d2         db  0x41 ; 'A'
00000000000002d3         db  0xf5 ; '.'
00000000000002d4         db  0x39 ; '9'
00000000000002d5         db  0xf2 ; '.'
00000000000002d6         db  0x8b ; '.'
00000000000002d7         db  0x1c ; '.'
00000000000002d8         db  0x32 ; '2'
00000000000002d9         db  0xc4 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0xb3 ; '.'
00000000000002dd         db  0xa2 ; '.'
00000000000002de         db  0xf7 ; '.'
00000000000002df         db  0x12 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0x9d0[ (1776 bytes)
        ; File offset : [736; 2512[ (1776 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0x9a ; '.'
00000000000002f9         db  0x02 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'
0000000000000310         db  0x85 ; '.'
0000000000000311         db  0x00 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0xfc ; '.'
0000000000000329         db  0x00 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0x37 ; '7'
0000000000000341         db  0x00 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0xfe ; '.'
0000000000000359         db  0x02 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x20 ; ' '
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0x91 ; '.'
0000000000000371         db  0x00 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x12 ; '.'
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0xbf ; '.'
0000000000000389         db  0x01 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x5f ; '_'
00000000000003a1         db  0x02 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x12 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0xac ; '.'
00000000000003b9         db  0x01 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x12 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x21 ; '!'
00000000000003d1         db  0x02 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0x2b ; '+'                                         ; DATA XREF=xstrtoul+420, xstrtoumax+420
00000000000003e9         db  0x02 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'
0000000000000400         db  0x36 ; '6'                                         ; DATA XREF=xstrtoul+437, xstrtoul+806, xstrtoul+878, xstrtoumax+437, xstrtoumax+806, xstrtoumax+878, rpl_fcntl+288
0000000000000401         db  0x01 ; '.'                                         ; DATA XREF=rpl_fcntl+272
0000000000000402         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+280
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+81, rpl_fcntl+123, rpl_fcntl+264
0000000000000407         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+256
0000000000000408         db  0x00 ; '.'
0000000000000409         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+336
000000000000040a         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+350
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x27 ; '''
0000000000000419         db  0x02 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x59 ; 'Y'
0000000000000431         db  0x00 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0xbd ; '.'
0000000000000449         db  0x00 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0xee ; '.'
0000000000000461         db  0x00 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x63 ; 'c'
0000000000000479         db  0x00 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0x87 ; '.'
0000000000000491         db  0x01 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0x29 ; ')'
00000000000004a9         db  0x00 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0xca ; '.'
00000000000004c1         db  0x01 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0x6d ; 'm'
00000000000004d9         db  0x02 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0x51 ; 'Q'
00000000000004f1         db  0x00 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x29 ; ')'
0000000000000509         db  0x01 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0xaf ; '.'
0000000000000521         db  0x00 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x78 ; 'x'
0000000000000539         db  0x02 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0xf5 ; '.'
0000000000000551         db  0x00 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x37 ; '7'
0000000000000569         db  0x01 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0xd9 ; '.'
0000000000000581         db  0x00 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x4d ; 'M'
0000000000000599         db  0x02 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'
00000000000005b0         db  0x0d ; '.'
00000000000005b1         db  0x01 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x8b ; '.'
00000000000005c9         db  0x02 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0xe7 ; '.'
00000000000005e1         db  0x00 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x9a ; '.'
00000000000005f9         db  0x01 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x46 ; 'F'
0000000000000611         db  0x02 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0xb2 ; '.'
0000000000000629         db  0x01 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0xd4 ; '.'
0000000000000641         db  0x00 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0x1a ; '.'
0000000000000659         db  0x03 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x20 ; ' '
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0x2f ; '/'
0000000000000671         db  0x01 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x93 ; '.'
0000000000000689         db  0x01 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0x45 ; 'E'
00000000000006a1         db  0x01 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x0b ; '.'
00000000000006b9         db  0x00 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x12 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0x54 ; 'T'
00000000000006d1         db  0x01 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0x75 ; 'u'
00000000000006e9         db  0x01 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x36 ; '6'
0000000000000701         db  0x02 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x7d ; '}'
0000000000000719         db  0x00 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0xef ; '.'
0000000000000731         db  0x01 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x1f ; '.'
0000000000000749         db  0x00 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x12 ; '.'
0000000000000761         db  0x00 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0x19 ; '.'
0000000000000779         db  0x02 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x60 ; '`'
0000000000000791         db  0x02 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x66 ; 'f'
00000000000007a9         db  0x02 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0x31 ; '1'
00000000000007c1         db  0x00 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0x3f ; '?'
00000000000007d9         db  0x00 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0x3d ; '='
00000000000007f1         db  0x01 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0xba ; '.'
0000000000000809         db  0x02 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0x92 ; '.'
0000000000000821         db  0x00 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0xa5 ; '.'
0000000000000839         db  0x01 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x14 ; '.'
0000000000000851         db  0x01 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x12 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0x29 ; ')'
0000000000000869         db  0x03 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x20 ; ' '
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x4c ; 'L'
0000000000000881         db  0x01 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0x74 ; 't'
0000000000000899         db  0x00 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x12 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0x0a ; '.'
00000000000008b1         db  0x02 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x22 ; '"'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0xf6 ; '.'
00000000000008c9         db  0x01 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0x60 ; '`'
00000000000008e1         db  0x01 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x12 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x00 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x00 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x00 ; '.'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x00 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0x22 ; '"'
00000000000008f9         db  0x01 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x11 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x19 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0xa8 ; '.'
0000000000000901         db  0xd0 ; '.'
0000000000000902         db  0x20 ; ' '
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x08 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0x9f ; '.'
0000000000000911         db  0x02 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x11 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x19 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0xa0 ; '.'
0000000000000919         db  0xd0 ; '.'
000000000000091a         db  0x20 ; ' '
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x08 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0x8b ; '.'
0000000000000929         db  0x00 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x11 ; '.'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x19 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0xb0 ; '.'
0000000000000931         db  0xd0 ; '.'
0000000000000932         db  0x20 ; ' '
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x08 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0x97 ; '.'
0000000000000941         db  0x00 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x21 ; '!'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x19 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0xc8 ; '.'
0000000000000949         db  0xd0 ; '.'
000000000000094a         db  0x20 ; ' '
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x08 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0xaa ; '.'
0000000000000959         db  0x02 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x11 ; '.'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x19 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0xc8 ; '.'
0000000000000961         db  0xd0 ; '.'
0000000000000962         db  0x20 ; ' '
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x08 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0xd1 ; '.'
0000000000000971         db  0x01 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x21 ; '!'
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x19 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0xa0 ; '.'
0000000000000979         db  0xd0 ; '.'
000000000000097a         db  0x20 ; ' '
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x08 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0x80 ; '.'
0000000000000989         db  0x01 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x11 ; '.'
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x19 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0xe0 ; '.'
0000000000000991         db  0xd0 ; '.'
0000000000000992         db  0x20 ; ' '
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x08 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0x4a ; 'J'
00000000000009a1         db  0x00 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x11 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x19 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0xb8 ; '.'
00000000000009a9         db  0xd0 ; '.'
00000000000009aa         db  0x20 ; ' '
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x04 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'
00000000000009b8         db  0x6e ; 'n'
00000000000009b9         db  0x01 ; '.'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x00 ; '.'
00000000000009bc         db  0x11 ; '.'
00000000000009bd         db  0x00 ; '.'
00000000000009be         db  0x19 ; '.'
00000000000009bf         db  0x00 ; '.'
00000000000009c0         db  0xc0 ; '.'
00000000000009c1         db  0xd0 ; '.'
00000000000009c2         db  0x20 ; ' '
00000000000009c3         db  0x00 ; '.'
00000000000009c4         db  0x00 ; '.'
00000000000009c5         db  0x00 ; '.'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x00 ; '.'
00000000000009c8         db  0x08 ; '.'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x00 ; '.'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x00 ; '.'
00000000000009cd         db  0x00 ; '.'
00000000000009ce         db  0x00 ; '.'
00000000000009cf         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0x9d0; 0xd13[ (835 bytes)
        ; File offset : [2512; 3347[ (835 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

00000000000009d0         db  0x00 ; '.'
00000000000009d1         db  0x6c ; 'l'
00000000000009d2         db  0x69 ; 'i'
00000000000009d3         db  0x62 ; 'b'
00000000000009d4         db  0x63 ; 'c'
00000000000009d5         db  0x2e ; '.'
00000000000009d6         db  0x73 ; 's'
00000000000009d7         db  0x6f ; 'o'
00000000000009d8         db  0x2e ; '.'
00000000000009d9         db  0x36 ; '6'
00000000000009da         db  0x00 ; '.'
00000000000009db         db  0x66 ; 'f'
00000000000009dc         db  0x66 ; 'f'
00000000000009dd         db  0x6c ; 'l'
00000000000009de         db  0x75 ; 'u'
00000000000009df         db  0x73 ; 's'
00000000000009e0         db  0x68 ; 'h'
00000000000009e1         db  0x00 ; '.'
00000000000009e2         db  0x5f ; '_'
00000000000009e3         db  0x5f ; '_'
00000000000009e4         db  0x70 ; 'p'
00000000000009e5         db  0x72 ; 'r'
00000000000009e6         db  0x69 ; 'i'
00000000000009e7         db  0x6e ; 'n'
00000000000009e8         db  0x74 ; 't'
00000000000009e9         db  0x66 ; 'f'
00000000000009ea         db  0x5f ; '_'
00000000000009eb         db  0x63 ; 'c'
00000000000009ec         db  0x68 ; 'h'
00000000000009ed         db  0x6b ; 'k'
00000000000009ee         db  0x00 ; '.'
00000000000009ef         db  0x73 ; 's'
00000000000009f0         db  0x65 ; 'e'
00000000000009f1         db  0x74 ; 't'
00000000000009f2         db  0x6c ; 'l'
00000000000009f3         db  0x6f ; 'o'
00000000000009f4         db  0x63 ; 'c'
00000000000009f5         db  0x61 ; 'a'
00000000000009f6         db  0x6c ; 'l'
00000000000009f7         db  0x65 ; 'e'
00000000000009f8         db  0x00 ; '.'
00000000000009f9         db  0x6d ; 'm'
00000000000009fa         db  0x62 ; 'b'
00000000000009fb         db  0x72 ; 'r'
00000000000009fc         db  0x74 ; 't'
00000000000009fd         db  0x6f ; 'o'
00000000000009fe         db  0x77 ; 'w'
00000000000009ff         db  0x63 ; 'c'
0000000000000a00         db  0x00 ; '.'
0000000000000a01         db  0x66 ; 'f'
0000000000000a02         db  0x6f ; 'o'
0000000000000a03         db  0x70 ; 'p'
0000000000000a04         db  0x65 ; 'e'
0000000000000a05         db  0x6e ; 'n'
0000000000000a06         db  0x00 ; '.'
0000000000000a07         db  0x73 ; 's'
0000000000000a08         db  0x74 ; 't'
0000000000000a09         db  0x72 ; 'r'
0000000000000a0a         db  0x6e ; 'n'
0000000000000a0b         db  0x63 ; 'c'
0000000000000a0c         db  0x6d ; 'm'
0000000000000a0d         db  0x70 ; 'p'
0000000000000a0e         db  0x00 ; '.'
0000000000000a0f         db  0x64 ; 'd'
0000000000000a10         db  0x63 ; 'c'
0000000000000a11         db  0x6e ; 'n'
0000000000000a12         db  0x67 ; 'g'
0000000000000a13         db  0x65 ; 'e'
0000000000000a14         db  0x74 ; 't'
0000000000000a15         db  0x74 ; 't'
0000000000000a16         db  0x65 ; 'e'
0000000000000a17         db  0x78 ; 'x'
0000000000000a18         db  0x74 ; 't'
0000000000000a19         db  0x00 ; '.'
0000000000000a1a         db  0x6f ; 'o'
0000000000000a1b         db  0x70 ; 'p'
0000000000000a1c         db  0x74 ; 't'
0000000000000a1d         db  0x69 ; 'i'
0000000000000a1e         db  0x6e ; 'n'
0000000000000a1f         db  0x64 ; 'd'
0000000000000a20         db  0x00 ; '.'
0000000000000a21         db  0x73 ; 's'
0000000000000a22         db  0x74 ; 't'
0000000000000a23         db  0x72 ; 'r'
0000000000000a24         db  0x72 ; 'r'
0000000000000a25         db  0x63 ; 'c'
0000000000000a26         db  0x68 ; 'h'
0000000000000a27         db  0x72 ; 'r'
0000000000000a28         db  0x00 ; '.'
0000000000000a29         db  0x64 ; 'd'
0000000000000a2a         db  0x63 ; 'c'
0000000000000a2b         db  0x67 ; 'g'
0000000000000a2c         db  0x65 ; 'e'
0000000000000a2d         db  0x74 ; 't'
0000000000000a2e         db  0x74 ; 't'
0000000000000a2f         db  0x65 ; 'e'
0000000000000a30         db  0x78 ; 'x'
0000000000000a31         db  0x74 ; 't'
0000000000000a32         db  0x00 ; '.'
0000000000000a33         db  0x5f ; '_'
0000000000000a34         db  0x5f ; '_'
0000000000000a35         db  0x73 ; 's'
0000000000000a36         db  0x74 ; 't'
0000000000000a37         db  0x61 ; 'a'
0000000000000a38         db  0x63 ; 'c'
0000000000000a39         db  0x6b ; 'k'
0000000000000a3a         db  0x5f ; '_'
0000000000000a3b         db  0x63 ; 'c'
0000000000000a3c         db  0x68 ; 'h'
0000000000000a3d         db  0x6b ; 'k'
0000000000000a3e         db  0x5f ; '_'
0000000000000a3f         db  0x66 ; 'f'
0000000000000a40         db  0x61 ; 'a'
0000000000000a41         db  0x69 ; 'i'
0000000000000a42         db  0x6c ; 'l'
0000000000000a43         db  0x00 ; '.'
0000000000000a44         db  0x69 ; 'i'
0000000000000a45         db  0x73 ; 's'
0000000000000a46         db  0x77 ; 'w'
0000000000000a47         db  0x70 ; 'p'
0000000000000a48         db  0x72 ; 'r'
0000000000000a49         db  0x69 ; 'i'
0000000000000a4a         db  0x6e ; 'n'
0000000000000a4b         db  0x74 ; 't'
0000000000000a4c         db  0x00 ; '.'
0000000000000a4d         db  0x72 ; 'r'
0000000000000a4e         db  0x65 ; 'e'
0000000000000a4f         db  0x61 ; 'a'
0000000000000a50         db  0x6c ; 'l'
0000000000000a51         db  0x6c ; 'l'
0000000000000a52         db  0x6f ; 'o'
0000000000000a53         db  0x63 ; 'c'
0000000000000a54         db  0x00 ; '.'
0000000000000a55         db  0x61 ; 'a'
0000000000000a56         db  0x62 ; 'b'
0000000000000a57         db  0x6f ; 'o'
0000000000000a58         db  0x72 ; 'r'
0000000000000a59         db  0x74 ; 't'
0000000000000a5a         db  0x00 ; '.'
0000000000000a5b         db  0x73 ; 's'
0000000000000a5c         db  0x74 ; 't'
0000000000000a5d         db  0x64 ; 'd'
0000000000000a5e         db  0x69 ; 'i'
0000000000000a5f         db  0x6e ; 'n'
0000000000000a60         db  0x00 ; '.'
0000000000000a61         db  0x5f ; '_'
0000000000000a62         db  0x65 ; 'e'
0000000000000a63         db  0x78 ; 'x'
0000000000000a64         db  0x69 ; 'i'
0000000000000a65         db  0x74 ; 't'
0000000000000a66         db  0x00 ; '.'
0000000000000a67         db  0x70 ; 'p'
0000000000000a68         db  0x72 ; 'r'
0000000000000a69         db  0x6f ; 'o'
0000000000000a6a         db  0x67 ; 'g'
0000000000000a6b         db  0x72 ; 'r'
0000000000000a6c         db  0x61 ; 'a'
0000000000000a6d         db  0x6d ; 'm'
0000000000000a6e         db  0x5f ; '_'
0000000000000a6f         db  0x69 ; 'i'
0000000000000a70         db  0x6e ; 'n'
0000000000000a71         db  0x76 ; 'v'
0000000000000a72         db  0x6f ; 'o'
0000000000000a73         db  0x63 ; 'c'
0000000000000a74         db  0x61 ; 'a'
0000000000000a75         db  0x74 ; 't'
0000000000000a76         db  0x69 ; 'i'
0000000000000a77         db  0x6f ; 'o'
0000000000000a78         db  0x6e ; 'n'
0000000000000a79         db  0x5f ; '_'
0000000000000a7a         db  0x6e ; 'n'
0000000000000a7b         db  0x61 ; 'a'
0000000000000a7c         db  0x6d ; 'm'
0000000000000a7d         db  0x65 ; 'e'
0000000000000a7e         db  0x00 ; '.'
0000000000000a7f         db  0x5f ; '_'
0000000000000a80         db  0x5f ; '_'
0000000000000a81         db  0x61 ; 'a'
0000000000000a82         db  0x73 ; 's'
0000000000000a83         db  0x73 ; 's'
0000000000000a84         db  0x65 ; 'e'
0000000000000a85         db  0x72 ; 'r'
0000000000000a86         db  0x74 ; 't'
0000000000000a87         db  0x5f ; '_'
0000000000000a88         db  0x66 ; 'f'
0000000000000a89         db  0x61 ; 'a'
0000000000000a8a         db  0x69 ; 'i'
0000000000000a8b         db  0x6c ; 'l'
0000000000000a8c         db  0x00 ; '.'
0000000000000a8d         db  0x5f ; '_'
0000000000000a8e         db  0x5f ; '_'
0000000000000a8f         db  0x63 ; 'c'
0000000000000a90         db  0x74 ; 't'
0000000000000a91         db  0x79 ; 'y'
0000000000000a92         db  0x70 ; 'p'
0000000000000a93         db  0x65 ; 'e'
0000000000000a94         db  0x5f ; '_'
0000000000000a95         db  0x67 ; 'g'
0000000000000a96         db  0x65 ; 'e'
0000000000000a97         db  0x74 ; 't'
0000000000000a98         db  0x5f ; '_'
0000000000000a99         db  0x6d ; 'm'
0000000000000a9a         db  0x62 ; 'b'
0000000000000a9b         db  0x5f ; '_'
0000000000000a9c         db  0x63 ; 'c'
0000000000000a9d         db  0x75 ; 'u'
0000000000000a9e         db  0x72 ; 'r'
0000000000000a9f         db  0x5f ; '_'
0000000000000aa0         db  0x6d ; 'm'
0000000000000aa1         db  0x61 ; 'a'
0000000000000aa2         db  0x78 ; 'x'
0000000000000aa3         db  0x00 ; '.'
0000000000000aa4         db  0x66 ; 'f'
0000000000000aa5         db  0x65 ; 'e'
0000000000000aa6         db  0x6f ; 'o'
0000000000000aa7         db  0x66 ; 'f'
0000000000000aa8         db  0x00 ; '.'
0000000000000aa9         db  0x70 ; 'p'
0000000000000aaa         db  0x6f ; 'o'
0000000000000aab         db  0x73 ; 's'
0000000000000aac         db  0x69 ; 'i'
0000000000000aad         db  0x78 ; 'x'
0000000000000aae         db  0x5f ; '_'
0000000000000aaf         db  0x66 ; 'f'
0000000000000ab0         db  0x61 ; 'a'
0000000000000ab1         db  0x64 ; 'd'
0000000000000ab2         db  0x76 ; 'v'
0000000000000ab3         db  0x69 ; 'i'
0000000000000ab4         db  0x73 ; 's'
0000000000000ab5         db  0x65 ; 'e'
0000000000000ab6         db  0x00 ; '.'
0000000000000ab7         db  0x63 ; 'c'
0000000000000ab8         db  0x61 ; 'a'
0000000000000ab9         db  0x6c ; 'l'
0000000000000aba         db  0x6c ; 'l'
0000000000000abb         db  0x6f ; 'o'
0000000000000abc         db  0x63 ; 'c'
0000000000000abd         db  0x00 ; '.'
0000000000000abe         db  0x73 ; 's'
0000000000000abf         db  0x74 ; 't'
0000000000000ac0         db  0x72 ; 'r'
0000000000000ac1         db  0x6c ; 'l'
0000000000000ac2         db  0x65 ; 'e'
0000000000000ac3         db  0x6e ; 'n'
0000000000000ac4         db  0x00 ; '.'
0000000000000ac5         db  0x6d ; 'm'
0000000000000ac6         db  0x65 ; 'e'
0000000000000ac7         db  0x6d ; 'm'
0000000000000ac8         db  0x73 ; 's'
0000000000000ac9         db  0x65 ; 'e'
0000000000000aca         db  0x74 ; 't'
0000000000000acb         db  0x00 ; '.'
0000000000000acc         db  0x5f ; '_'
0000000000000acd         db  0x5f ; '_'
0000000000000ace         db  0x65 ; 'e'
0000000000000acf         db  0x72 ; 'r'
0000000000000ad0         db  0x72 ; 'r'
0000000000000ad1         db  0x6e ; 'n'
0000000000000ad2         db  0x6f ; 'o'
0000000000000ad3         db  0x5f ; '_'
0000000000000ad4         db  0x6c ; 'l'
0000000000000ad5         db  0x6f ; 'o'
0000000000000ad6         db  0x63 ; 'c'
0000000000000ad7         db  0x61 ; 'a'
0000000000000ad8         db  0x74 ; 't'
0000000000000ad9         db  0x69 ; 'i'
0000000000000ada         db  0x6f ; 'o'
0000000000000adb         db  0x6e ; 'n'
0000000000000adc         db  0x00 ; '.'
0000000000000add         db  0x6d ; 'm'
0000000000000ade         db  0x65 ; 'e'
0000000000000adf         db  0x6d ; 'm'
0000000000000ae0         db  0x63 ; 'c'
0000000000000ae1         db  0x6d ; 'm'
0000000000000ae2         db  0x70 ; 'p'
0000000000000ae3         db  0x00 ; '.'
0000000000000ae4         db  0x5f ; '_'
0000000000000ae5         db  0x5f ; '_'
0000000000000ae6         db  0x66 ; 'f'
0000000000000ae7         db  0x70 ; 'p'
0000000000000ae8         db  0x72 ; 'r'
0000000000000ae9         db  0x69 ; 'i'
0000000000000aea         db  0x6e ; 'n'
0000000000000aeb         db  0x74 ; 't'
0000000000000aec         db  0x66 ; 'f'
0000000000000aed         db  0x5f ; '_'
0000000000000aee         db  0x63 ; 'c'
0000000000000aef         db  0x68 ; 'h'
0000000000000af0         db  0x6b ; 'k'
0000000000000af1         db  0x00 ; '.'
0000000000000af2         db  0x73 ; 's'
0000000000000af3         db  0x74 ; 't'
0000000000000af4         db  0x64 ; 'd'
0000000000000af5         db  0x6f ; 'o'
0000000000000af6         db  0x75 ; 'u'
0000000000000af7         db  0x74 ; 't'
0000000000000af8         db  0x00 ; '.'
0000000000000af9         db  0x6c ; 'l'
0000000000000afa         db  0x73 ; 's'
0000000000000afb         db  0x65 ; 'e'
0000000000000afc         db  0x65 ; 'e'
0000000000000afd         db  0x6b ; 'k'
0000000000000afe         db  0x00 ; '.'
0000000000000aff         db  0x6d ; 'm'
                     aEmcpy:
0000000000000b00         db         "emcpy", 0
0000000000000b06         db  0x66 ; 'f'
0000000000000b07         db  0x63 ; 'c'
0000000000000b08         db  0x6c ; 'l'
0000000000000b09         db  0x6f ; 'o'
0000000000000b0a         db  0x73 ; 's'
0000000000000b0b         db  0x65 ; 'e'
0000000000000b0c         db  0x00 ; '.'
0000000000000b0d         db  0x73 ; 's'
0000000000000b0e         db  0x74 ; 't'
0000000000000b0f         db  0x72 ; 'r'
0000000000000b10         db  0x74 ; 't'
0000000000000b11         db  0x6f ; 'o'
0000000000000b12         db  0x75 ; 'u'
0000000000000b13         db  0x6c ; 'l'
0000000000000b14         db  0x00 ; '.'
0000000000000b15         db  0x6d ; 'm'
0000000000000b16         db  0x61 ; 'a'
0000000000000b17         db  0x6c ; 'l'
0000000000000b18         db  0x6c ; 'l'
0000000000000b19         db  0x6f ; 'o'
0000000000000b1a         db  0x63 ; 'c'
0000000000000b1b         db  0x00 ; '.'
0000000000000b1c         db  0x6d ; 'm'
0000000000000b1d         db  0x62 ; 'b'
0000000000000b1e         db  0x73 ; 's'
0000000000000b1f         db  0x69 ; 'i'
0000000000000b20         db  0x6e ; 'n'
0000000000000b21         db  0x69 ; 'i'
0000000000000b22         db  0x74 ; 't'
0000000000000b23         db  0x00 ; '.'
0000000000000b24         db  0x6e ; 'n'
0000000000000b25         db  0x6c ; 'l'
0000000000000b26         db  0x5f ; '_'
0000000000000b27         db  0x6c ; 'l'
0000000000000b28         db  0x61 ; 'a'
0000000000000b29         db  0x6e ; 'n'
0000000000000b2a         db  0x67 ; 'g'
0000000000000b2b         db  0x69 ; 'i'
0000000000000b2c         db  0x6e ; 'n'
0000000000000b2d         db  0x66 ; 'f'
0000000000000b2e         db  0x6f ; 'o'
0000000000000b2f         db  0x00 ; '.'
0000000000000b30         db  0x5f ; '_'
0000000000000b31         db  0x5f ; '_'
0000000000000b32         db  0x63 ; 'c'
0000000000000b33         db  0x74 ; 't'
0000000000000b34         db  0x79 ; 'y'
0000000000000b35         db  0x70 ; 'p'
0000000000000b36         db  0x65 ; 'e'
0000000000000b37         db  0x5f ; '_'
0000000000000b38         db  0x62 ; 'b'
0000000000000b39         db  0x5f ; '_'
0000000000000b3a         db  0x6c ; 'l'
0000000000000b3b         db  0x6f ; 'o'
0000000000000b3c         db  0x63 ; 'c'
0000000000000b3d         db  0x00 ; '.'
0000000000000b3e         db  0x6f ; 'o'
0000000000000b3f         db  0x70 ; 'p'
0000000000000b40         db  0x74 ; 't'
0000000000000b41         db  0x61 ; 'a'
0000000000000b42         db  0x72 ; 'r'
0000000000000b43         db  0x67 ; 'g'
0000000000000b44         db  0x00 ; '.'
0000000000000b45         db  0x5f ; '_'
0000000000000b46         db  0x5f ; '_'
0000000000000b47         db  0x66 ; 'f'
0000000000000b48         db  0x72 ; 'r'
0000000000000b49         db  0x65 ; 'e'
0000000000000b4a         db  0x61 ; 'a'
0000000000000b4b         db  0x64 ; 'd'
0000000000000b4c         db  0x69 ; 'i'
0000000000000b4d         db  0x6e ; 'n'
0000000000000b4e         db  0x67 ; 'g'
0000000000000b4f         db  0x00 ; '.'
0000000000000b50         db  0x73 ; 's'
0000000000000b51         db  0x74 ; 't'
0000000000000b52         db  0x64 ; 'd'
0000000000000b53         db  0x65 ; 'e'
0000000000000b54         db  0x72 ; 'r'
0000000000000b55         db  0x72 ; 'r'
0000000000000b56         db  0x00 ; '.'
0000000000000b57         db  0x67 ; 'g'
0000000000000b58         db  0x65 ; 'e'
0000000000000b59         db  0x74 ; 't'
0000000000000b5a         db  0x6f ; 'o'
0000000000000b5b         db  0x70 ; 'p'
0000000000000b5c         db  0x74 ; 't'
0000000000000b5d         db  0x5f ; '_'
0000000000000b5e         db  0x6c ; 'l'
0000000000000b5f         db  0x6f ; 'o'
0000000000000b60         db  0x6e ; 'n'
0000000000000b61         db  0x67 ; 'g'
0000000000000b62         db  0x00 ; '.'
0000000000000b63         db  0x66 ; 'f'
0000000000000b64         db  0x69 ; 'i'
0000000000000b65         db  0x6c ; 'l'
0000000000000b66         db  0x65 ; 'e'
0000000000000b67         db  0x6e ; 'n'
0000000000000b68         db  0x6f ; 'o'
0000000000000b69         db  0x00 ; '.'
0000000000000b6a         db  0x5f ; '_'
0000000000000b6b         db  0x5f ; '_'
0000000000000b6c         db  0x67 ; 'g'
0000000000000b6d         db  0x65 ; 'e'
0000000000000b6e         db  0x74 ; 't'
0000000000000b6f         db  0x64 ; 'd'
0000000000000b70         db  0x65 ; 'e'
0000000000000b71         db  0x6c ; 'l'
0000000000000b72         db  0x69 ; 'i'
0000000000000b73         db  0x6d ; 'm'
0000000000000b74         db  0x00 ; '.'
0000000000000b75         db  0x66 ; 'f'
0000000000000b76         db  0x77 ; 'w'
0000000000000b77         db  0x72 ; 'r'
0000000000000b78         db  0x69 ; 'i'
0000000000000b79         db  0x74 ; 't'
0000000000000b7a         db  0x65 ; 'e'
0000000000000b7b         db  0x00 ; '.'
0000000000000b7c         db  0x66 ; 'f'
0000000000000b7d         db  0x72 ; 'r'
0000000000000b7e         db  0x65 ; 'e'
0000000000000b7f         db  0x61 ; 'a'
0000000000000b80         db  0x64 ; 'd'
0000000000000b81         db  0x00 ; '.'
0000000000000b82         db  0x5f ; '_'
0000000000000b83         db  0x5f ; '_'
0000000000000b84         db  0x6d ; 'm'
0000000000000b85         db  0x65 ; 'e'
0000000000000b86         db  0x6d ; 'm'
0000000000000b87         db  0x63 ; 'c'
0000000000000b88         db  0x70 ; 'p'
0000000000000b89         db  0x79 ; 'y'
0000000000000b8a         db  0x5f ; '_'
0000000000000b8b         db  0x63 ; 'c'
0000000000000b8c         db  0x68 ; 'h'
0000000000000b8d         db  0x6b ; 'k'
0000000000000b8e         db  0x00 ; '.'
0000000000000b8f         db  0x5f ; '_'
0000000000000b90         db  0x5f ; '_'
0000000000000b91         db  0x66 ; 'f'
0000000000000b92         db  0x70 ; 'p'
0000000000000b93         db  0x65 ; 'e'
0000000000000b94         db  0x6e ; 'n'
0000000000000b95         db  0x64 ; 'd'
0000000000000b96         db  0x69 ; 'i'
0000000000000b97         db  0x6e ; 'n'
0000000000000b98         db  0x67 ; 'g'
0000000000000b99         db  0x00 ; '.'
0000000000000b9a         db  0x73 ; 's'
0000000000000b9b         db  0x74 ; 't'
0000000000000b9c         db  0x72 ; 'r'
0000000000000b9d         db  0x63 ; 'c'
0000000000000b9e         db  0x68 ; 'h'
0000000000000b9f         db  0x72 ; 'r'
0000000000000ba0         db  0x00 ; '.'
0000000000000ba1         db  0x70 ; 'p'
0000000000000ba2         db  0x72 ; 'r'
0000000000000ba3         db  0x6f ; 'o'
0000000000000ba4         db  0x67 ; 'g'
0000000000000ba5         db  0x72 ; 'r'
0000000000000ba6         db  0x61 ; 'a'
0000000000000ba7         db  0x6d ; 'm'
0000000000000ba8         db  0x5f ; '_'
0000000000000ba9         db  0x69 ; 'i'
0000000000000baa         db  0x6e ; 'n'
0000000000000bab         db  0x76 ; 'v'
0000000000000bac         db  0x6f ; 'o'
0000000000000bad         db  0x63 ; 'c'
0000000000000bae         db  0x61 ; 'a'
0000000000000baf         db  0x74 ; 't'
0000000000000bb0         db  0x69 ; 'i'
0000000000000bb1         db  0x6f ; 'o'
0000000000000bb2         db  0x6e ; 'n'
0000000000000bb3         db  0x5f ; '_'
0000000000000bb4         db  0x73 ; 's'
0000000000000bb5         db  0x68 ; 'h'
0000000000000bb6         db  0x6f ; 'o'
0000000000000bb7         db  0x72 ; 'r'
0000000000000bb8         db  0x74 ; 't'
0000000000000bb9         db  0x5f ; '_'
0000000000000bba         db  0x6e ; 'n'
0000000000000bbb         db  0x61 ; 'a'
0000000000000bbc         db  0x6d ; 'm'
0000000000000bbd         db  0x65 ; 'e'
0000000000000bbe         db  0x00 ; '.'
0000000000000bbf         db  0x66 ; 'f'
0000000000000bc0         db  0x64 ; 'd'
0000000000000bc1         db  0x6f ; 'o'
0000000000000bc2         db  0x70 ; 'p'
0000000000000bc3         db  0x65 ; 'e'
0000000000000bc4         db  0x6e ; 'n'
0000000000000bc5         db  0x00 ; '.'
0000000000000bc6         db  0x5f ; '_'
0000000000000bc7         db  0x5f ; '_'
0000000000000bc8         db  0x63 ; 'c'
0000000000000bc9         db  0x74 ; 't'
0000000000000bca         db  0x79 ; 'y'
0000000000000bcb         db  0x70 ; 'p'
0000000000000bcc         db  0x65 ; 'e'
0000000000000bcd         db  0x5f ; '_'
0000000000000bce         db  0x74 ; 't'
0000000000000bcf         db  0x6f ; 'o'
0000000000000bd0         db  0x6c ; 'l'
0000000000000bd1         db  0x6f ; 'o'
0000000000000bd2         db  0x77 ; 'w'
0000000000000bd3         db  0x65 ; 'e'
0000000000000bd4         db  0x72 ; 'r'
0000000000000bd5         db  0x5f ; '_'
0000000000000bd6         db  0x6c ; 'l'
0000000000000bd7         db  0x6f ; 'o'
0000000000000bd8         db  0x63 ; 'c'
0000000000000bd9         db  0x00 ; '.'
0000000000000bda         db  0x5f ; '_'
0000000000000bdb         db  0x5f ; '_'
0000000000000bdc         db  0x63 ; 'c'
0000000000000bdd         db  0x78 ; 'x'
0000000000000bde         db  0x61 ; 'a'
0000000000000bdf         db  0x5f ; '_'
0000000000000be0         db  0x66 ; 'f'
0000000000000be1         db  0x69 ; 'i'
0000000000000be2         db  0x6e ; 'n'
0000000000000be3         db  0x61 ; 'a'
0000000000000be4         db  0x6c ; 'l'
0000000000000be5         db  0x69 ; 'i'
0000000000000be6         db  0x7a ; 'z'
0000000000000be7         db  0x65 ; 'e'
0000000000000be8         db  0x00 ; '.'
0000000000000be9         db  0x73 ; 's'
0000000000000bea         db  0x65 ; 'e'
0000000000000beb         db  0x74 ; 't'
0000000000000bec         db  0x76 ; 'v'
0000000000000bed         db  0x62 ; 'b'
0000000000000bee         db  0x75 ; 'u'
0000000000000bef         db  0x66 ; 'f'
0000000000000bf0         db  0x00 ; '.'
0000000000000bf1         db  0x66 ; 'f'
0000000000000bf2         db  0x63 ; 'c'
0000000000000bf3         db  0x6e ; 'n'
0000000000000bf4         db  0x74 ; 't'
0000000000000bf5         db  0x6c ; 'l'
0000000000000bf6         db  0x00 ; '.'
0000000000000bf7         db  0x62 ; 'b'
0000000000000bf8         db  0x69 ; 'i'
0000000000000bf9         db  0x6e ; 'n'
0000000000000bfa         db  0x64 ; 'd'
0000000000000bfb         db  0x74 ; 't'
0000000000000bfc         db  0x65 ; 'e'
0000000000000bfd         db  0x78 ; 'x'
0000000000000bfe         db  0x74 ; 't'
0000000000000bff         db  0x64 ; 'd'
                     aOmain:
0000000000000c00         db         "omain", 0
0000000000000c06         db  0x66 ; 'f'
0000000000000c07         db  0x77 ; 'w'
0000000000000c08         db  0x72 ; 'r'
0000000000000c09         db  0x69 ; 'i'
0000000000000c0a         db  0x74 ; 't'
0000000000000c0b         db  0x65 ; 'e'
0000000000000c0c         db  0x5f ; '_'
0000000000000c0d         db  0x75 ; 'u'
0000000000000c0e         db  0x6e ; 'n'
0000000000000c0f         db  0x6c ; 'l'
0000000000000c10         db  0x6f ; 'o'
0000000000000c11         db  0x63 ; 'c'
0000000000000c12         db  0x6b ; 'k'
0000000000000c13         db  0x65 ; 'e'
0000000000000c14         db  0x64 ; 'd'
0000000000000c15         db  0x00 ; '.'
0000000000000c16         db  0x73 ; 's'
0000000000000c17         db  0x74 ; 't'
0000000000000c18         db  0x72 ; 'r'
0000000000000c19         db  0x63 ; 'c'
0000000000000c1a         db  0x6d ; 'm'
0000000000000c1b         db  0x70 ; 'p'
0000000000000c1c         db  0x00 ; '.'
0000000000000c1d         db  0x5f ; '_'
0000000000000c1e         db  0x5f ; '_'
0000000000000c1f         db  0x6c ; 'l'
0000000000000c20         db  0x69 ; 'i'
0000000000000c21         db  0x62 ; 'b'
0000000000000c22         db  0x63 ; 'c'
0000000000000c23         db  0x5f ; '_'
0000000000000c24         db  0x73 ; 's'
0000000000000c25         db  0x74 ; 't'
0000000000000c26         db  0x61 ; 'a'
0000000000000c27         db  0x72 ; 'r'
0000000000000c28         db  0x74 ; 't'
0000000000000c29         db  0x5f ; '_'
0000000000000c2a         db  0x6d ; 'm'
0000000000000c2b         db  0x61 ; 'a'
0000000000000c2c         db  0x69 ; 'i'
0000000000000c2d         db  0x6e ; 'n'
0000000000000c2e         db  0x00 ; '.'
0000000000000c2f         db  0x66 ; 'f'
0000000000000c30         db  0x65 ; 'e'
0000000000000c31         db  0x72 ; 'r'
0000000000000c32         db  0x72 ; 'r'
0000000000000c33         db  0x6f ; 'o'
0000000000000c34         db  0x72 ; 'r'
0000000000000c35         db  0x00 ; '.'
0000000000000c36         db  0x66 ; 'f'
0000000000000c37         db  0x73 ; 's'
0000000000000c38         db  0x65 ; 'e'
0000000000000c39         db  0x65 ; 'e'
0000000000000c3a         db  0x6b ; 'k'
0000000000000c3b         db  0x6f ; 'o'
0000000000000c3c         db  0x00 ; '.'
0000000000000c3d         db  0x5f ; '_'
0000000000000c3e         db  0x5f ; '_'
0000000000000c3f         db  0x6f ; 'o'
0000000000000c40         db  0x76 ; 'v'
0000000000000c41         db  0x65 ; 'e'
0000000000000c42         db  0x72 ; 'r'
0000000000000c43         db  0x66 ; 'f'
0000000000000c44         db  0x6c ; 'l'
0000000000000c45         db  0x6f ; 'o'
0000000000000c46         db  0x77 ; 'w'
0000000000000c47         db  0x00 ; '.'
0000000000000c48         db  0x5f ; '_'
0000000000000c49         db  0x5f ; '_'
0000000000000c4a         db  0x73 ; 's'
0000000000000c4b         db  0x74 ; 't'
0000000000000c4c         db  0x72 ; 'r'
0000000000000c4d         db  0x74 ; 't'
0000000000000c4e         db  0x6f ; 'o'
0000000000000c4f         db  0x75 ; 'u'
0000000000000c50         db  0x6c ; 'l'
0000000000000c51         db  0x5f ; '_'
0000000000000c52         db  0x69 ; 'i'
0000000000000c53         db  0x6e ; 'n'
0000000000000c54         db  0x74 ; 't'
0000000000000c55         db  0x65 ; 'e'
0000000000000c56         db  0x72 ; 'r'
0000000000000c57         db  0x6e ; 'n'
0000000000000c58         db  0x61 ; 'a'
0000000000000c59         db  0x6c ; 'l'
0000000000000c5a         db  0x00 ; '.'
0000000000000c5b         db  0x66 ; 'f'
0000000000000c5c         db  0x70 ; 'p'
0000000000000c5d         db  0x75 ; 'u'
0000000000000c5e         db  0x74 ; 't'
0000000000000c5f         db  0x73 ; 's'
0000000000000c60         db  0x5f ; '_'
0000000000000c61         db  0x75 ; 'u'
0000000000000c62         db  0x6e ; 'n'
0000000000000c63         db  0x6c ; 'l'
0000000000000c64         db  0x6f ; 'o'
0000000000000c65         db  0x63 ; 'c'
0000000000000c66         db  0x6b ; 'k'
0000000000000c67         db  0x65 ; 'e'
0000000000000c68         db  0x64 ; 'd'
0000000000000c69         db  0x00 ; '.'
0000000000000c6a         db  0x66 ; 'f'
0000000000000c6b         db  0x72 ; 'r'
0000000000000c6c         db  0x65 ; 'e'
0000000000000c6d         db  0x65 ; 'e'
0000000000000c6e         db  0x00 ; '.'
0000000000000c6f         db  0x5f ; '_'
0000000000000c70         db  0x5f ; '_'
0000000000000c71         db  0x70 ; 'p'
0000000000000c72         db  0x72 ; 'r'
0000000000000c73         db  0x6f ; 'o'
0000000000000c74         db  0x67 ; 'g'
0000000000000c75         db  0x6e ; 'n'
0000000000000c76         db  0x61 ; 'a'
0000000000000c77         db  0x6d ; 'm'
0000000000000c78         db  0x65 ; 'e'
0000000000000c79         db  0x00 ; '.'
0000000000000c7a         db  0x5f ; '_'
0000000000000c7b         db  0x5f ; '_'
0000000000000c7c         db  0x70 ; 'p'
0000000000000c7d         db  0x72 ; 'r'
0000000000000c7e         db  0x6f ; 'o'
0000000000000c7f         db  0x67 ; 'g'
0000000000000c80         db  0x6e ; 'n'
0000000000000c81         db  0x61 ; 'a'
0000000000000c82         db  0x6d ; 'm'
0000000000000c83         db  0x65 ; 'e'
0000000000000c84         db  0x5f ; '_'
0000000000000c85         db  0x66 ; 'f'
0000000000000c86         db  0x75 ; 'u'
0000000000000c87         db  0x6c ; 'l'
0000000000000c88         db  0x6c ; 'l'
0000000000000c89         db  0x00 ; '.'
0000000000000c8a         db  0x5f ; '_'
0000000000000c8b         db  0x5f ; '_'
0000000000000c8c         db  0x63 ; 'c'
0000000000000c8d         db  0x78 ; 'x'
0000000000000c8e         db  0x61 ; 'a'
0000000000000c8f         db  0x5f ; '_'
0000000000000c90         db  0x61 ; 'a'
0000000000000c91         db  0x74 ; 't'
0000000000000c92         db  0x65 ; 'e'
0000000000000c93         db  0x78 ; 'x'
0000000000000c94         db  0x69 ; 'i'
0000000000000c95         db  0x74 ; 't'
0000000000000c96         db  0x00 ; '.'
0000000000000c97         db  0x47 ; 'G'
0000000000000c98         db  0x4c ; 'L'
0000000000000c99         db  0x49 ; 'I'
0000000000000c9a         db  0x42 ; 'B'
0000000000000c9b         db  0x43 ; 'C'
0000000000000c9c         db  0x5f ; '_'
0000000000000c9d         db  0x32 ; '2'
0000000000000c9e         db  0x2e ; '.'
0000000000000c9f         db  0x33 ; '3'
0000000000000ca0         db  0x00 ; '.'
0000000000000ca1         db  0x47 ; 'G'
0000000000000ca2         db  0x4c ; 'L'
0000000000000ca3         db  0x49 ; 'I'
0000000000000ca4         db  0x42 ; 'B'
0000000000000ca5         db  0x43 ; 'C'
0000000000000ca6         db  0x5f ; '_'
0000000000000ca7         db  0x32 ; '2'
0000000000000ca8         db  0x2e ; '.'
0000000000000ca9         db  0x31 ; '1'
0000000000000caa         db  0x34 ; '4'
0000000000000cab         db  0x00 ; '.'
0000000000000cac         db  0x47 ; 'G'
0000000000000cad         db  0x4c ; 'L'
0000000000000cae         db  0x49 ; 'I'
0000000000000caf         db  0x42 ; 'B'
0000000000000cb0         db  0x43 ; 'C'
0000000000000cb1         db  0x5f ; '_'
0000000000000cb2         db  0x32 ; '2'
0000000000000cb3         db  0x2e ; '.'
0000000000000cb4         db  0x33 ; '3'
0000000000000cb5         db  0x2e ; '.'
0000000000000cb6         db  0x34 ; '4'
0000000000000cb7         db  0x00 ; '.'
0000000000000cb8         db  0x47 ; 'G'
0000000000000cb9         db  0x4c ; 'L'
0000000000000cba         db  0x49 ; 'I'
0000000000000cbb         db  0x42 ; 'B'
0000000000000cbc         db  0x43 ; 'C'
0000000000000cbd         db  0x5f ; '_'
0000000000000cbe         db  0x32 ; '2'
0000000000000cbf         db  0x2e ; '.'
0000000000000cc0         db  0x34 ; '4'
0000000000000cc1         db  0x00 ; '.'
0000000000000cc2         db  0x47 ; 'G'
0000000000000cc3         db  0x4c ; 'L'
0000000000000cc4         db  0x49 ; 'I'
0000000000000cc5         db  0x42 ; 'B'
0000000000000cc6         db  0x43 ; 'C'
0000000000000cc7         db  0x5f ; '_'
0000000000000cc8         db  0x32 ; '2'
0000000000000cc9         db  0x2e ; '.'
0000000000000cca         db  0x32 ; '2'
0000000000000ccb         db  0x2e ; '.'
0000000000000ccc         db  0x35 ; '5'
0000000000000ccd         db  0x00 ; '.'
0000000000000cce         db  0x5f ; '_'
0000000000000ccf         db  0x49 ; 'I'
0000000000000cd0         db  0x54 ; 'T'
0000000000000cd1         db  0x4d ; 'M'
0000000000000cd2         db  0x5f ; '_'
0000000000000cd3         db  0x64 ; 'd'
0000000000000cd4         db  0x65 ; 'e'
0000000000000cd5         db  0x72 ; 'r'
0000000000000cd6         db  0x65 ; 'e'
0000000000000cd7         db  0x67 ; 'g'
0000000000000cd8         db  0x69 ; 'i'
0000000000000cd9         db  0x73 ; 's'
0000000000000cda         db  0x74 ; 't'
0000000000000cdb         db  0x65 ; 'e'
0000000000000cdc         db  0x72 ; 'r'
0000000000000cdd         db  0x54 ; 'T'
0000000000000cde         db  0x4d ; 'M'
0000000000000cdf         db  0x43 ; 'C'
0000000000000ce0         db  0x6c ; 'l'
0000000000000ce1         db  0x6f ; 'o'
0000000000000ce2         db  0x6e ; 'n'
0000000000000ce3         db  0x65 ; 'e'
0000000000000ce4         db  0x54 ; 'T'
0000000000000ce5         db  0x61 ; 'a'
0000000000000ce6         db  0x62 ; 'b'
0000000000000ce7         db  0x6c ; 'l'
0000000000000ce8         db  0x65 ; 'e'
0000000000000ce9         db  0x00 ; '.'
0000000000000cea         db  0x5f ; '_'
0000000000000ceb         db  0x5f ; '_'
0000000000000cec         db  0x67 ; 'g'
0000000000000ced         db  0x6d ; 'm'
0000000000000cee         db  0x6f ; 'o'
0000000000000cef         db  0x6e ; 'n'
0000000000000cf0         db  0x5f ; '_'
0000000000000cf1         db  0x73 ; 's'
0000000000000cf2         db  0x74 ; 't'
0000000000000cf3         db  0x61 ; 'a'
0000000000000cf4         db  0x72 ; 'r'
0000000000000cf5         db  0x74 ; 't'
0000000000000cf6         db  0x5f ; '_'
0000000000000cf7         db  0x5f ; '_'
0000000000000cf8         db  0x00 ; '.'
0000000000000cf9         db  0x5f ; '_'
0000000000000cfa         db  0x49 ; 'I'
0000000000000cfb         db  0x54 ; 'T'
0000000000000cfc         db  0x4d ; 'M'
0000000000000cfd         db  0x5f ; '_'
0000000000000cfe         db  0x72 ; 'r'
0000000000000cff         db  0x65 ; 'e'
                     aGistertmclonet:
0000000000000d00         db         "gisterTMCloneTable", 0
0000000000000d13         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xd14; 0xda8[ (148 bytes)
        ; File offset : [3348; 3496[ (148 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000d14         db  0x00 ; '.'
0000000000000d15         db  0x00 ; '.'
0000000000000d16         db  0x02 ; '.'
0000000000000d17         db  0x00 ; '.'
0000000000000d18         db  0x02 ; '.'
0000000000000d19         db  0x00 ; '.'
0000000000000d1a         db  0x02 ; '.'
0000000000000d1b         db  0x00 ; '.'
0000000000000d1c         db  0x02 ; '.'
0000000000000d1d         db  0x00 ; '.'
0000000000000d1e         db  0x00 ; '.'
0000000000000d1f         db  0x00 ; '.'
0000000000000d20         db  0x02 ; '.'
0000000000000d21         db  0x00 ; '.'
0000000000000d22         db  0x02 ; '.'
0000000000000d23         db  0x00 ; '.'
0000000000000d24         db  0x02 ; '.'
0000000000000d25         db  0x00 ; '.'
0000000000000d26         db  0x02 ; '.'
0000000000000d27         db  0x00 ; '.'
0000000000000d28         db  0x02 ; '.'
0000000000000d29         db  0x00 ; '.'
0000000000000d2a         db  0x02 ; '.'
0000000000000d2b         db  0x00 ; '.'
0000000000000d2c         db  0x02 ; '.'
0000000000000d2d         db  0x00 ; '.'
0000000000000d2e         db  0x02 ; '.'
0000000000000d2f         db  0x00 ; '.'
0000000000000d30         db  0x02 ; '.'
0000000000000d31         db  0x00 ; '.'
0000000000000d32         db  0x02 ; '.'
0000000000000d33         db  0x00 ; '.'
0000000000000d34         db  0x02 ; '.'
0000000000000d35         db  0x00 ; '.'
0000000000000d36         db  0x03 ; '.'
0000000000000d37         db  0x00 ; '.'
0000000000000d38         db  0x02 ; '.'
0000000000000d39         db  0x00 ; '.'
0000000000000d3a         db  0x02 ; '.'
0000000000000d3b         db  0x00 ; '.'
0000000000000d3c         db  0x02 ; '.'
0000000000000d3d         db  0x00 ; '.'
0000000000000d3e         db  0x02 ; '.'
0000000000000d3f         db  0x00 ; '.'
0000000000000d40         db  0x02 ; '.'
0000000000000d41         db  0x00 ; '.'
0000000000000d42         db  0x02 ; '.'
0000000000000d43         db  0x00 ; '.'
0000000000000d44         db  0x02 ; '.'
0000000000000d45         db  0x00 ; '.'
0000000000000d46         db  0x02 ; '.'
0000000000000d47         db  0x00 ; '.'
0000000000000d48         db  0x02 ; '.'
0000000000000d49         db  0x00 ; '.'
0000000000000d4a         db  0x02 ; '.'
0000000000000d4b         db  0x00 ; '.'
0000000000000d4c         db  0x02 ; '.'
0000000000000d4d         db  0x00 ; '.'
0000000000000d4e         db  0x02 ; '.'
0000000000000d4f         db  0x00 ; '.'
0000000000000d50         db  0x02 ; '.'
0000000000000d51         db  0x00 ; '.'
0000000000000d52         db  0x02 ; '.'
0000000000000d53         db  0x00 ; '.'
0000000000000d54         db  0x02 ; '.'
0000000000000d55         db  0x00 ; '.'
0000000000000d56         db  0x02 ; '.'
0000000000000d57         db  0x00 ; '.'
0000000000000d58         db  0x02 ; '.'
0000000000000d59         db  0x00 ; '.'
0000000000000d5a         db  0x04 ; '.'
0000000000000d5b         db  0x00 ; '.'
0000000000000d5c         db  0x02 ; '.'
0000000000000d5d         db  0x00 ; '.'
0000000000000d5e         db  0x00 ; '.'
0000000000000d5f         db  0x00 ; '.'
0000000000000d60         db  0x05 ; '.'
0000000000000d61         db  0x00 ; '.'
0000000000000d62         db  0x02 ; '.'
0000000000000d63         db  0x00 ; '.'
0000000000000d64         db  0x02 ; '.'
0000000000000d65         db  0x00 ; '.'
0000000000000d66         db  0x02 ; '.'
0000000000000d67         db  0x00 ; '.'
0000000000000d68         db  0x02 ; '.'
0000000000000d69         db  0x00 ; '.'
0000000000000d6a         db  0x02 ; '.'
0000000000000d6b         db  0x00 ; '.'
0000000000000d6c         db  0x02 ; '.'
0000000000000d6d         db  0x00 ; '.'
0000000000000d6e         db  0x02 ; '.'
0000000000000d6f         db  0x00 ; '.'
0000000000000d70         db  0x02 ; '.'
0000000000000d71         db  0x00 ; '.'
0000000000000d72         db  0x02 ; '.'
0000000000000d73         db  0x00 ; '.'
0000000000000d74         db  0x04 ; '.'
0000000000000d75         db  0x00 ; '.'
0000000000000d76         db  0x02 ; '.'
0000000000000d77         db  0x00 ; '.'
0000000000000d78         db  0x02 ; '.'
0000000000000d79         db  0x00 ; '.'
0000000000000d7a         db  0x02 ; '.'
0000000000000d7b         db  0x00 ; '.'
0000000000000d7c         db  0x02 ; '.'
0000000000000d7d         db  0x00 ; '.'
0000000000000d7e         db  0x02 ; '.'
0000000000000d7f         db  0x00 ; '.'
0000000000000d80         db  0x02 ; '.'
0000000000000d81         db  0x00 ; '.'
0000000000000d82         db  0x02 ; '.'
0000000000000d83         db  0x00 ; '.'
0000000000000d84         db  0x02 ; '.'
0000000000000d85         db  0x00 ; '.'
0000000000000d86         db  0x02 ; '.'
0000000000000d87         db  0x00 ; '.'
0000000000000d88         db  0x04 ; '.'
0000000000000d89         db  0x00 ; '.'
0000000000000d8a         db  0x00 ; '.'
0000000000000d8b         db  0x00 ; '.'
0000000000000d8c         db  0x02 ; '.'
0000000000000d8d         db  0x00 ; '.'
0000000000000d8e         db  0x02 ; '.'
0000000000000d8f         db  0x00 ; '.'
0000000000000d90         db  0x02 ; '.'
0000000000000d91         db  0x00 ; '.'
0000000000000d92         db  0x06 ; '.'
0000000000000d93         db  0x00 ; '.'
0000000000000d94         db  0x06 ; '.'
0000000000000d95         db  0x00 ; '.'
0000000000000d96         db  0x02 ; '.'
0000000000000d97         db  0x00 ; '.'
0000000000000d98         db  0x02 ; '.'
0000000000000d99         db  0x00 ; '.'
0000000000000d9a         db  0x02 ; '.'
0000000000000d9b         db  0x00 ; '.'
0000000000000d9c         db  0x02 ; '.'
0000000000000d9d         db  0x00 ; '.'
0000000000000d9e         db  0x02 ; '.'
0000000000000d9f         db  0x00 ; '.'
0000000000000da0         db  0x02 ; '.'
0000000000000da1         db  0x00 ; '.'
0000000000000da2         db  0x02 ; '.'
0000000000000da3         db  0x00 ; '.'
0000000000000da4         db  0x02 ; '.'
0000000000000da5         db  0x00 ; '.'
0000000000000da6         db  0x02 ; '.'
0000000000000da7         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0xda8; 0xe08[ (96 bytes)
        ; File offset : [3496; 3592[ (96 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000da8         db  0x01 ; '.'
0000000000000da9         db  0x00 ; '.'
0000000000000daa         db  0x05 ; '.'
0000000000000dab         db  0x00 ; '.'
0000000000000dac         db  0x01 ; '.'
0000000000000dad         db  0x00 ; '.'
0000000000000dae         db  0x00 ; '.'
0000000000000daf         db  0x00 ; '.'
0000000000000db0         db  0x10 ; '.'
0000000000000db1         db  0x00 ; '.'
0000000000000db2         db  0x00 ; '.'
0000000000000db3         db  0x00 ; '.'
0000000000000db4         db  0x00 ; '.'
0000000000000db5         db  0x00 ; '.'
0000000000000db6         db  0x00 ; '.'
0000000000000db7         db  0x00 ; '.'
0000000000000db8         db  0x13 ; '.'
0000000000000db9         db  0x69 ; 'i'
0000000000000dba         db  0x69 ; 'i'
0000000000000dbb         db  0x0d ; '.'
0000000000000dbc         db  0x00 ; '.'
0000000000000dbd         db  0x00 ; '.'
0000000000000dbe         db  0x06 ; '.'
0000000000000dbf         db  0x00 ; '.'
0000000000000dc0         db  0xc7 ; '.'
0000000000000dc1         db  0x02 ; '.'
0000000000000dc2         db  0x00 ; '.'
0000000000000dc3         db  0x00 ; '.'
0000000000000dc4         db  0x10 ; '.'
0000000000000dc5         db  0x00 ; '.'
0000000000000dc6         db  0x00 ; '.'
0000000000000dc7         db  0x00 ; '.'
0000000000000dc8         db  0x94 ; '.'
0000000000000dc9         db  0x91 ; '.'
0000000000000dca         db  0x96 ; '.'
0000000000000dcb         db  0x06 ; '.'
0000000000000dcc         db  0x00 ; '.'
0000000000000dcd         db  0x00 ; '.'
0000000000000dce         db  0x05 ; '.'
0000000000000dcf         db  0x00 ; '.'
0000000000000dd0         db  0xd1 ; '.'
0000000000000dd1         db  0x02 ; '.'
0000000000000dd2         db  0x00 ; '.'
0000000000000dd3         db  0x00 ; '.'
0000000000000dd4         db  0x10 ; '.'
0000000000000dd5         db  0x00 ; '.'
0000000000000dd6         db  0x00 ; '.'
0000000000000dd7         db  0x00 ; '.'
0000000000000dd8         db  0x74 ; 't'
0000000000000dd9         db  0x19 ; '.'
0000000000000dda         db  0x69 ; 'i'
0000000000000ddb         db  0x09 ; '.'
0000000000000ddc         db  0x00 ; '.'
0000000000000ddd         db  0x00 ; '.'
0000000000000dde         db  0x04 ; '.'
0000000000000ddf         db  0x00 ; '.'
0000000000000de0         db  0xdc ; '.'
0000000000000de1         db  0x02 ; '.'
0000000000000de2         db  0x00 ; '.'
0000000000000de3         db  0x00 ; '.'
0000000000000de4         db  0x10 ; '.'
0000000000000de5         db  0x00 ; '.'
0000000000000de6         db  0x00 ; '.'
0000000000000de7         db  0x00 ; '.'
0000000000000de8         db  0x14 ; '.'
0000000000000de9         db  0x69 ; 'i'
0000000000000dea         db  0x69 ; 'i'
0000000000000deb         db  0x0d ; '.'
0000000000000dec         db  0x00 ; '.'
0000000000000ded         db  0x00 ; '.'
0000000000000dee         db  0x03 ; '.'
0000000000000def         db  0x00 ; '.'
0000000000000df0         db  0xe8 ; '.'
0000000000000df1         db  0x02 ; '.'
0000000000000df2         db  0x00 ; '.'
0000000000000df3         db  0x00 ; '.'
0000000000000df4         db  0x10 ; '.'
0000000000000df5         db  0x00 ; '.'
0000000000000df6         db  0x00 ; '.'
0000000000000df7         db  0x00 ; '.'
0000000000000df8         db  0x75 ; 'u'
0000000000000df9         db  0x1a ; '.'
0000000000000dfa         db  0x69 ; 'i'
0000000000000dfb         db  0x09 ; '.'
0000000000000dfc         db  0x00 ; '.'
0000000000000dfd         db  0x00 ; '.'
0000000000000dfe         db  0x02 ; '.'
0000000000000dff         db  0x00 ; '.'
0000000000000e00         db  0xf2 ; '.'
0000000000000e01         db  0x02 ; '.'
0000000000000e02         db  0x00 ; '.'
0000000000000e03         db  0x00 ; '.'
0000000000000e04         db  0x00 ; '.'
0000000000000e05         db  0x00 ; '.'
0000000000000e06         db  0x00 ; '.'
0000000000000e07         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0xe08; 0x1240[ (1080 bytes)
        ; File offset : [3592; 4672[ (1080 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000e08         db  0xb0 ; '.'
0000000000000e09         db  0xc9 ; '.'
0000000000000e0a         db  0x20 ; ' '
0000000000000e0b         db  0x00 ; '.'
0000000000000e0c         db  0x00 ; '.'
0000000000000e0d         db  0x00 ; '.'
0000000000000e0e         db  0x00 ; '.'
0000000000000e0f         db  0x00 ; '.'
0000000000000e10         db  0x08 ; '.'
0000000000000e11         db  0x00 ; '.'
0000000000000e12         db  0x00 ; '.'
0000000000000e13         db  0x00 ; '.'
0000000000000e14         db  0x00 ; '.'
0000000000000e15         db  0x00 ; '.'
0000000000000e16         db  0x00 ; '.'
0000000000000e17         db  0x00 ; '.'
0000000000000e18         db  0x00 ; '.'
0000000000000e19         db  0x31 ; '1'
0000000000000e1a         db  0x00 ; '.'
0000000000000e1b         db  0x00 ; '.'
0000000000000e1c         db  0x00 ; '.'
0000000000000e1d         db  0x00 ; '.'
0000000000000e1e         db  0x00 ; '.'
0000000000000e1f         db  0x00 ; '.'
0000000000000e20         db  0xb8 ; '.'
0000000000000e21         db  0xc9 ; '.'
0000000000000e22         db  0x20 ; ' '
0000000000000e23         db  0x00 ; '.'
0000000000000e24         db  0x00 ; '.'
0000000000000e25         db  0x00 ; '.'
0000000000000e26         db  0x00 ; '.'
0000000000000e27         db  0x00 ; '.'
0000000000000e28         db  0x08 ; '.'
0000000000000e29         db  0x00 ; '.'
0000000000000e2a         db  0x00 ; '.'
0000000000000e2b         db  0x00 ; '.'
0000000000000e2c         db  0x00 ; '.'
0000000000000e2d         db  0x00 ; '.'
0000000000000e2e         db  0x00 ; '.'
0000000000000e2f         db  0x00 ; '.'
0000000000000e30         db  0xc0 ; '.'
0000000000000e31         db  0x30 ; '0'
0000000000000e32         db  0x00 ; '.'
0000000000000e33         db  0x00 ; '.'
0000000000000e34         db  0x00 ; '.'
0000000000000e35         db  0x00 ; '.'
0000000000000e36         db  0x00 ; '.'
0000000000000e37         db  0x00 ; '.'
0000000000000e38         db  0xc0 ; '.'
0000000000000e39         db  0xc9 ; '.'
0000000000000e3a         db  0x20 ; ' '
0000000000000e3b         db  0x00 ; '.'
0000000000000e3c         db  0x00 ; '.'
0000000000000e3d         db  0x00 ; '.'
0000000000000e3e         db  0x00 ; '.'
0000000000000e3f         db  0x00 ; '.'
0000000000000e40         db  0x08 ; '.'
0000000000000e41         db  0x00 ; '.'
0000000000000e42         db  0x00 ; '.'
0000000000000e43         db  0x00 ; '.'
0000000000000e44         db  0x00 ; '.'
0000000000000e45         db  0x00 ; '.'
0000000000000e46         db  0x00 ; '.'
0000000000000e47         db  0x00 ; '.'
0000000000000e48         db  0xc3 ; '.'
0000000000000e49         db  0x92 ; '.'
0000000000000e4a         db  0x00 ; '.'
0000000000000e4b         db  0x00 ; '.'
0000000000000e4c         db  0x00 ; '.'
0000000000000e4d         db  0x00 ; '.'
0000000000000e4e         db  0x00 ; '.'
0000000000000e4f         db  0x00 ; '.'
0000000000000e50         db  0xe0 ; '.'
0000000000000e51         db  0xc9 ; '.'
0000000000000e52         db  0x20 ; ' '
0000000000000e53         db  0x00 ; '.'
0000000000000e54         db  0x00 ; '.'
0000000000000e55         db  0x00 ; '.'
0000000000000e56         db  0x00 ; '.'
0000000000000e57         db  0x00 ; '.'
0000000000000e58         db  0x08 ; '.'
0000000000000e59         db  0x00 ; '.'
0000000000000e5a         db  0x00 ; '.'
0000000000000e5b         db  0x00 ; '.'
0000000000000e5c         db  0x00 ; '.'
0000000000000e5d         db  0x00 ; '.'
0000000000000e5e         db  0x00 ; '.'
0000000000000e5f         db  0x00 ; '.'
0000000000000e60         db  0xa1 ; '.'
0000000000000e61         db  0x93 ; '.'
0000000000000e62         db  0x00 ; '.'
0000000000000e63         db  0x00 ; '.'
0000000000000e64         db  0x00 ; '.'
0000000000000e65         db  0x00 ; '.'
0000000000000e66         db  0x00 ; '.'
0000000000000e67         db  0x00 ; '.'
0000000000000e68         db  0x00 ; '.'
0000000000000e69         db  0xca ; '.'
0000000000000e6a         db  0x20 ; ' '
0000000000000e6b         db  0x00 ; '.'
0000000000000e6c         db  0x00 ; '.'
0000000000000e6d         db  0x00 ; '.'
0000000000000e6e         db  0x00 ; '.'
0000000000000e6f         db  0x00 ; '.'
0000000000000e70         db  0x08 ; '.'
0000000000000e71         db  0x00 ; '.'
0000000000000e72         db  0x00 ; '.'
0000000000000e73         db  0x00 ; '.'
0000000000000e74         db  0x00 ; '.'
0000000000000e75         db  0x00 ; '.'
0000000000000e76         db  0x00 ; '.'
0000000000000e77         db  0x00 ; '.'
0000000000000e78         db  0xa8 ; '.'
0000000000000e79         db  0x93 ; '.'
0000000000000e7a         db  0x00 ; '.'
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x00 ; '.'
0000000000000e7d         db  0x00 ; '.'
0000000000000e7e         db  0x00 ; '.'
0000000000000e7f         db  0x00 ; '.'
0000000000000e80         db  0x20 ; ' '
0000000000000e81         db  0xca ; '.'
0000000000000e82         db  0x20 ; ' '
0000000000000e83         db  0x00 ; '.'
0000000000000e84         db  0x00 ; '.'
0000000000000e85         db  0x00 ; '.'
0000000000000e86         db  0x00 ; '.'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0x08 ; '.'
0000000000000e89         db  0x00 ; '.'
0000000000000e8a         db  0x00 ; '.'
0000000000000e8b         db  0x00 ; '.'
0000000000000e8c         db  0x00 ; '.'
0000000000000e8d         db  0x00 ; '.'
0000000000000e8e         db  0x00 ; '.'
0000000000000e8f         db  0x00 ; '.'
0000000000000e90         db  0xae ; '.'
0000000000000e91         db  0x93 ; '.'
0000000000000e92         db  0x00 ; '.'
0000000000000e93         db  0x00 ; '.'
0000000000000e94         db  0x00 ; '.'
0000000000000e95         db  0x00 ; '.'
0000000000000e96         db  0x00 ; '.'
0000000000000e97         db  0x00 ; '.'
0000000000000e98         db  0x40 ; '@'
0000000000000e99         db  0xca ; '.'
0000000000000e9a         db  0x20 ; ' '
0000000000000e9b         db  0x00 ; '.'
0000000000000e9c         db  0x00 ; '.'
0000000000000e9d         db  0x00 ; '.'
0000000000000e9e         db  0x00 ; '.'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0x08 ; '.'
0000000000000ea1         db  0x00 ; '.'
0000000000000ea2         db  0x00 ; '.'
0000000000000ea3         db  0x00 ; '.'
0000000000000ea4         db  0x00 ; '.'
0000000000000ea5         db  0x00 ; '.'
0000000000000ea6         db  0x00 ; '.'
0000000000000ea7         db  0x00 ; '.'
0000000000000ea8         db  0xbd ; '.'
0000000000000ea9         db  0x93 ; '.'
0000000000000eaa         db  0x00 ; '.'
0000000000000eab         db  0x00 ; '.'
0000000000000eac         db  0x00 ; '.'
0000000000000ead         db  0x00 ; '.'
0000000000000eae         db  0x00 ; '.'
0000000000000eaf         db  0x00 ; '.'
0000000000000eb0         db  0x60 ; '`'
0000000000000eb1         db  0xca ; '.'
0000000000000eb2         db  0x20 ; ' '
0000000000000eb3         db  0x00 ; '.'
0000000000000eb4         db  0x00 ; '.'
0000000000000eb5         db  0x00 ; '.'
0000000000000eb6         db  0x00 ; '.'
0000000000000eb7         db  0x00 ; '.'
0000000000000eb8         db  0x08 ; '.'
0000000000000eb9         db  0x00 ; '.'
0000000000000eba         db  0x00 ; '.'
0000000000000ebb         db  0x00 ; '.'
0000000000000ebc         db  0x00 ; '.'
0000000000000ebd         db  0x00 ; '.'
0000000000000ebe         db  0x00 ; '.'
0000000000000ebf         db  0x00 ; '.'
0000000000000ec0         db  0xc3 ; '.'
0000000000000ec1         db  0x93 ; '.'
0000000000000ec2         db  0x00 ; '.'
0000000000000ec3         db  0x00 ; '.'
0000000000000ec4         db  0x00 ; '.'
0000000000000ec5         db  0x00 ; '.'
0000000000000ec6         db  0x00 ; '.'
0000000000000ec7         db  0x00 ; '.'
0000000000000ec8         db  0x80 ; '.'
0000000000000ec9         db  0xca ; '.'
0000000000000eca         db  0x20 ; ' '
0000000000000ecb         db  0x00 ; '.'
0000000000000ecc         db  0x00 ; '.'
0000000000000ecd         db  0x00 ; '.'
0000000000000ece         db  0x00 ; '.'
0000000000000ecf         db  0x00 ; '.'
0000000000000ed0         db  0x08 ; '.'
0000000000000ed1         db  0x00 ; '.'
0000000000000ed2         db  0x00 ; '.'
0000000000000ed3         db  0x00 ; '.'
0000000000000ed4         db  0x00 ; '.'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x00 ; '.'
0000000000000ed7         db  0x00 ; '.'
0000000000000ed8         db  0xca ; '.'
0000000000000ed9         db  0x93 ; '.'
0000000000000eda         db  0x00 ; '.'
0000000000000edb         db  0x00 ; '.'
0000000000000edc         db  0x00 ; '.'
0000000000000edd         db  0x00 ; '.'
0000000000000ede         db  0x00 ; '.'
0000000000000edf         db  0x00 ; '.'
0000000000000ee0         db  0xa0 ; '.'
0000000000000ee1         db  0xca ; '.'
0000000000000ee2         db  0x20 ; ' '
0000000000000ee3         db  0x00 ; '.'
0000000000000ee4         db  0x00 ; '.'
0000000000000ee5         db  0x00 ; '.'
0000000000000ee6         db  0x00 ; '.'
0000000000000ee7         db  0x00 ; '.'
0000000000000ee8         db  0x08 ; '.'
0000000000000ee9         db  0x00 ; '.'
0000000000000eea         db  0x00 ; '.'
0000000000000eeb         db  0x00 ; '.'
0000000000000eec         db  0x00 ; '.'
0000000000000eed         db  0x00 ; '.'
0000000000000eee         db  0x00 ; '.'
0000000000000eef         db  0x00 ; '.'
0000000000000ef0         db  0xcf ; '.'
0000000000000ef1         db  0x93 ; '.'
0000000000000ef2         db  0x00 ; '.'
0000000000000ef3         db  0x00 ; '.'
0000000000000ef4         db  0x00 ; '.'
0000000000000ef5         db  0x00 ; '.'
0000000000000ef6         db  0x00 ; '.'
0000000000000ef7         db  0x00 ; '.'
0000000000000ef8         db  0xc0 ; '.'
0000000000000ef9         db  0xca ; '.'
0000000000000efa         db  0x20 ; ' '
0000000000000efb         db  0x00 ; '.'
0000000000000efc         db  0x00 ; '.'
0000000000000efd         db  0x00 ; '.'
0000000000000efe         db  0x00 ; '.'
0000000000000eff         db  0x00 ; '.'
0000000000000f00         db  0x08 ; '.'
0000000000000f01         db  0x00 ; '.'
0000000000000f02         db  0x00 ; '.'
0000000000000f03         db  0x00 ; '.'
0000000000000f04         db  0x00 ; '.'
0000000000000f05         db  0x00 ; '.'
0000000000000f06         db  0x00 ; '.'
0000000000000f07         db  0x00 ; '.'
0000000000000f08         db  0xd4 ; '.'
0000000000000f09         db  0x93 ; '.'
0000000000000f0a         db  0x00 ; '.'
0000000000000f0b         db  0x00 ; '.'
0000000000000f0c         db  0x00 ; '.'
0000000000000f0d         db  0x00 ; '.'
0000000000000f0e         db  0x00 ; '.'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0xe0 ; '.'
0000000000000f11         db  0xca ; '.'
0000000000000f12         db  0x20 ; ' '
0000000000000f13         db  0x00 ; '.'
0000000000000f14         db  0x00 ; '.'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x00 ; '.'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0x08 ; '.'
0000000000000f19         db  0x00 ; '.'
0000000000000f1a         db  0x00 ; '.'
0000000000000f1b         db  0x00 ; '.'
0000000000000f1c         db  0x00 ; '.'
0000000000000f1d         db  0x00 ; '.'
0000000000000f1e         db  0x00 ; '.'
0000000000000f1f         db  0x00 ; '.'
0000000000000f20         db  0xdb ; '.'
0000000000000f21         db  0x93 ; '.'
0000000000000f22         db  0x00 ; '.'
0000000000000f23         db  0x00 ; '.'
0000000000000f24         db  0x00 ; '.'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x00 ; '.'
0000000000000f27         db  0x00 ; '.'
0000000000000f28         db  0x00 ; '.'
0000000000000f29         db  0xcb ; '.'
0000000000000f2a         db  0x20 ; ' '
0000000000000f2b         db  0x00 ; '.'
0000000000000f2c         db  0x00 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x00 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0x08 ; '.'
0000000000000f31         db  0x00 ; '.'
0000000000000f32         db  0x00 ; '.'
0000000000000f33         db  0x00 ; '.'
0000000000000f34         db  0x00 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x00 ; '.'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0xdf ; '.'
0000000000000f39         db  0x93 ; '.'
0000000000000f3a         db  0x00 ; '.'
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x00 ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x00 ; '.'
0000000000000f3f         db  0x00 ; '.'
0000000000000f40         db  0x20 ; ' '
0000000000000f41         db  0xcb ; '.'
0000000000000f42         db  0x20 ; ' '
0000000000000f43         db  0x00 ; '.'
0000000000000f44         db  0x00 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x00 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0x08 ; '.'
0000000000000f49         db  0x00 ; '.'
0000000000000f4a         db  0x00 ; '.'
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x00 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x00 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0xe4 ; '.'
0000000000000f51         db  0x93 ; '.'
0000000000000f52         db  0x00 ; '.'
0000000000000f53         db  0x00 ; '.'
0000000000000f54         db  0x00 ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x00 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0x40 ; '@'
0000000000000f59         db  0xcb ; '.'
0000000000000f5a         db  0x20 ; ' '
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x00 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x00 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0x08 ; '.'
0000000000000f61         db  0x00 ; '.'
0000000000000f62         db  0x00 ; '.'
0000000000000f63         db  0x00 ; '.'
0000000000000f64         db  0x00 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x00 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0xe9 ; '.'
0000000000000f69         db  0x93 ; '.'
0000000000000f6a         db  0x00 ; '.'
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x00 ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x00 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0x80 ; '.'
0000000000000f71         db  0xcb ; '.'
0000000000000f72         db  0x20 ; ' '
0000000000000f73         db  0x00 ; '.'
0000000000000f74         db  0x00 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x00 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x08 ; '.'
0000000000000f79         db  0x00 ; '.'
0000000000000f7a         db  0x00 ; '.'
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x00 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x00 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0xf1 ; '.'
0000000000000f81         db  0x93 ; '.'
0000000000000f82         db  0x00 ; '.'
0000000000000f83         db  0x00 ; '.'
0000000000000f84         db  0x00 ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x00 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0x90 ; '.'
0000000000000f89         db  0xcb ; '.'
0000000000000f8a         db  0x20 ; ' '
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x00 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x00 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0x08 ; '.'
0000000000000f91         db  0x00 ; '.'
0000000000000f92         db  0x00 ; '.'
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x00 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x00 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0xf9 ; '.'
0000000000000f99         db  0x93 ; '.'
0000000000000f9a         db  0x00 ; '.'
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x00 ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x00 ; '.'
0000000000000f9f         db  0x00 ; '.'
0000000000000fa0         db  0xa0 ; '.'
0000000000000fa1         db  0xcb ; '.'
0000000000000fa2         db  0x20 ; ' '
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x00 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x00 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0x08 ; '.'
0000000000000fa9         db  0x00 ; '.'
0000000000000faa         db  0x00 ; '.'
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x00 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x00 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0x81 ; '.'
0000000000000fb1         db  0x9f ; '.'
0000000000000fb2         db  0x00 ; '.'
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x00 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x00 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0xa8 ; '.'
0000000000000fb9         db  0xcb ; '.'
0000000000000fba         db  0x20 ; ' '
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x00 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'
0000000000000fc0         db  0x08 ; '.'
0000000000000fc1         db  0x00 ; '.'
0000000000000fc2         db  0x00 ; '.'
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x00 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x00 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0x89 ; '.'
0000000000000fc9         db  0x9f ; '.'
0000000000000fca         db  0x00 ; '.'
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x00 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0xb0 ; '.'
0000000000000fd1         db  0xcb ; '.'
0000000000000fd2         db  0x20 ; ' '
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x00 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x00 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0x08 ; '.'
0000000000000fd9         db  0x00 ; '.'
0000000000000fda         db  0x00 ; '.'
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x00 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x00 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0x8f ; '.'
0000000000000fe1         db  0x9f ; '.'
0000000000000fe2         db  0x00 ; '.'
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x00 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x00 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0xb8 ; '.'
0000000000000fe9         db  0xcb ; '.'
0000000000000fea         db  0x20 ; ' '
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x00 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x00 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0x08 ; '.'
0000000000000ff1         db  0x00 ; '.'
0000000000000ff2         db  0x00 ; '.'
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x00 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x00 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0x9c ; '.'
0000000000000ff9         db  0x9f ; '.'
0000000000000ffa         db  0x00 ; '.'
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x00 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x00 ; '.'
0000000000000fff         db  0x00 ; '.'
0000000000001000         db  0xc0 ; '.'
0000000000001001         db  0xcb ; '.'
0000000000001002         db  0x20 ; ' '
0000000000001003         db  0x00 ; '.'
0000000000001004         db  0x00 ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x00 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0x08 ; '.'
0000000000001009         db  0x00 ; '.'
000000000000100a         db  0x00 ; '.'
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0xa9 ; '.'
0000000000001011         db  0x9f ; '.'
0000000000001012         db  0x00 ; '.'
0000000000001013         db  0x00 ; '.'
0000000000001014         db  0x00 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x00 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0xc8 ; '.'
0000000000001019         db  0xcb ; '.'
000000000000101a         db  0x20 ; ' '
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x00 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0x08 ; '.'
0000000000001021         db  0x00 ; '.'
0000000000001022         db  0x00 ; '.'
0000000000001023         db  0x00 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x00 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0xbd ; '.'
0000000000001029         db  0x9f ; '.'
000000000000102a         db  0x00 ; '.'
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x00 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0xd0 ; '.'
0000000000001031         db  0xcb ; '.'
0000000000001032         db  0x20 ; ' '
0000000000001033         db  0x00 ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x00 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0x08 ; '.'
0000000000001039         db  0x00 ; '.'
000000000000103a         db  0x00 ; '.'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0xbf ; '.'
0000000000001041         db  0x9f ; '.'
0000000000001042         db  0x00 ; '.'
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x00 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0xd8 ; '.'
0000000000001049         db  0xcb ; '.'
000000000000104a         db  0x20 ; ' '
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0x08 ; '.'
0000000000001051         db  0x00 ; '.'
0000000000001052         db  0x00 ; '.'
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0xa2 ; '.'
0000000000001059         db  0x9f ; '.'
000000000000105a         db  0x00 ; '.'
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x00 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0xe0 ; '.'
0000000000001061         db  0xcb ; '.'
0000000000001062         db  0x20 ; ' '
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0x08 ; '.'
0000000000001069         db  0x00 ; '.'
000000000000106a         db  0x00 ; '.'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0xb4 ; '.'
0000000000001071         db  0x92 ; '.'
0000000000001072         db  0x00 ; '.'
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x00 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0xe8 ; '.'
0000000000001079         db  0xcb ; '.'
000000000000107a         db  0x20 ; ' '
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0x08 ; '.'
0000000000001081         db  0x00 ; '.'
0000000000001082         db  0x00 ; '.'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0xc7 ; '.'
0000000000001089         db  0x9f ; '.'
000000000000108a         db  0x00 ; '.'
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x00 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x08 ; '.'
0000000000001091         db  0xd0 ; '.'
0000000000001092         db  0x20 ; ' '
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0x08 ; '.'
0000000000001099         db  0x00 ; '.'
000000000000109a         db  0x00 ; '.'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x08 ; '.'
00000000000010a1         db  0xd0 ; '.'
00000000000010a2         db  0x20 ; ' '
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x00 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x20 ; ' '
00000000000010a9         db  0xd0 ; '.'
00000000000010aa         db  0x20 ; ' '
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x08 ; '.'
00000000000010b1         db  0x00 ; '.'
00000000000010b2         db  0x00 ; '.'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0xb0 ; '.'
00000000000010b9         db  0x9e ; '.'
00000000000010ba         db  0x00 ; '.'
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x28 ; '('
00000000000010c1         db  0xd0 ; '.'
00000000000010c2         db  0x20 ; ' '
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x08 ; '.'
00000000000010c9         db  0x00 ; '.'
00000000000010ca         db  0x00 ; '.'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x50 ; 'P'
00000000000010d1         db  0x57 ; 'W'
00000000000010d2         db  0x00 ; '.'
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x00 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x80 ; '.'
00000000000010d9         db  0xd0 ; '.'
00000000000010da         db  0x20 ; ' '
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x08 ; '.'
00000000000010e1         db  0x00 ; '.'
00000000000010e2         db  0x00 ; '.'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x90 ; '.'
00000000000010e9         db  0xd0 ; '.'
00000000000010ea         db  0x20 ; ' '
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x00 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x98 ; '.'
00000000000010f1         db  0xd0 ; '.'
00000000000010f2         db  0x20 ; ' '
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0x08 ; '.'
00000000000010f9         db  0x00 ; '.'
00000000000010fa         db  0x00 ; '.'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0x40 ; '@'
0000000000001101         db  0xd1 ; '.'
0000000000001102         db  0x20 ; ' '
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x00 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0xd8 ; '.'
0000000000001109         db  0xcf ; '.'
000000000000110a         db  0x20 ; ' '
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x00 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0x06 ; '.'
0000000000001111         db  0x00 ; '.'
0000000000001112         db  0x00 ; '.'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x05 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0x00 ; '.'
0000000000001119         db  0x00 ; '.'
000000000000111a         db  0x00 ; '.'
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x00 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0xe0 ; '.'
0000000000001121         db  0xcf ; '.'
0000000000001122         db  0x20 ; ' '
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x00 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x06 ; '.'
0000000000001129         db  0x00 ; '.'
000000000000112a         db  0x00 ; '.'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x1d ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0x00 ; '.'
0000000000001131         db  0x00 ; '.'
0000000000001132         db  0x00 ; '.'
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0xe8 ; '.'
0000000000001139         db  0xcf ; '.'
000000000000113a         db  0x20 ; ' '
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x00 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x06 ; '.'
0000000000001141         db  0x00 ; '.'
0000000000001142         db  0x00 ; '.'
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x25 ; '%'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0x00 ; '.'
0000000000001149         db  0x00 ; '.'
000000000000114a         db  0x00 ; '.'
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x00 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0xf0 ; '.'
0000000000001151         db  0xcf ; '.'
0000000000001152         db  0x20 ; ' '
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x06 ; '.'
0000000000001159         db  0x00 ; '.'
000000000000115a         db  0x00 ; '.'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x3b ; ';'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0x00 ; '.'
0000000000001161         db  0x00 ; '.'
0000000000001162         db  0x00 ; '.'
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0xf8 ; '.'
0000000000001169         db  0xcf ; '.'
000000000000116a         db  0x20 ; ' '
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x00 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x06 ; '.'
0000000000001171         db  0x00 ; '.'
0000000000001172         db  0x00 ; '.'
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x3e ; '>'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0x00 ; '.'
0000000000001179         db  0x00 ; '.'
000000000000117a         db  0x00 ; '.'
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0x18 ; '.'
0000000000001181         db  0xd0 ; '.'
0000000000001182         db  0x20 ; ' '
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x01 ; '.'
0000000000001189         db  0x00 ; '.'
000000000000118a         db  0x00 ; '.'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x1a ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0x00 ; '.'
0000000000001191         db  0x00 ; '.'
0000000000001192         db  0x00 ; '.'
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0xa0 ; '.'
0000000000001199         db  0xd0 ; '.'
000000000000119a         db  0x20 ; ' '
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x05 ; '.'
00000000000011a1         db  0x00 ; '.'
00000000000011a2         db  0x00 ; '.'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x42 ; 'B'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0x00 ; '.'
00000000000011a9         db  0x00 ; '.'
00000000000011aa         db  0x00 ; '.'
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0xa8 ; '.'
00000000000011b1         db  0xd0 ; '.'
00000000000011b2         db  0x20 ; ' '
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x05 ; '.'
00000000000011b9         db  0x00 ; '.'
00000000000011ba         db  0x00 ; '.'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x41 ; 'A'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0x00 ; '.'
00000000000011c1         db  0x00 ; '.'
00000000000011c2         db  0x00 ; '.'
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0xb0 ; '.'
00000000000011c9         db  0xd0 ; '.'
00000000000011ca         db  0x20 ; ' '
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x05 ; '.'
00000000000011d1         db  0x00 ; '.'
00000000000011d2         db  0x00 ; '.'
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x43 ; 'C'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0x00 ; '.'
00000000000011d9         db  0x00 ; '.'
00000000000011da         db  0x00 ; '.'
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0xb8 ; '.'
00000000000011e1         db  0xd0 ; '.'
00000000000011e2         db  0x20 ; ' '
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x05 ; '.'
00000000000011e9         db  0x00 ; '.'
00000000000011ea         db  0x00 ; '.'
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x48 ; 'H'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0x00 ; '.'
00000000000011f1         db  0x00 ; '.'
00000000000011f2         db  0x00 ; '.'
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0xc0 ; '.'
00000000000011f9         db  0xd0 ; '.'
00000000000011fa         db  0x20 ; ' '
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x00 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x05 ; '.'
0000000000001201         db  0x00 ; '.'
0000000000001202         db  0x00 ; '.'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x49 ; 'I'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0x00 ; '.'
0000000000001209         db  0x00 ; '.'
000000000000120a         db  0x00 ; '.'
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0xc8 ; '.'
0000000000001211         db  0xd0 ; '.'
0000000000001212         db  0x20 ; ' '
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x00 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x05 ; '.'
0000000000001219         db  0x00 ; '.'
000000000000121a         db  0x00 ; '.'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x45 ; 'E'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0x00 ; '.'
0000000000001221         db  0x00 ; '.'
0000000000001222         db  0x00 ; '.'
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0xe0 ; '.'
0000000000001229         db  0xd0 ; '.'
000000000000122a         db  0x20 ; ' '
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x00 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x05 ; '.'
0000000000001231         db  0x00 ; '.'
0000000000001232         db  0x00 ; '.'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x47 ; 'G'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0x00 ; '.'
0000000000001239         db  0x00 ; '.'
000000000000123a         db  0x00 ; '.'
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x1240; 0x17c8[ (1416 bytes)
        ; File offset : [4672; 6088[ (1416 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001240         db  0x00 ; '.'
0000000000001241         db  0xce ; '.'
0000000000001242         db  0x20 ; ' '
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x00 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x07 ; '.'
0000000000001249         db  0x00 ; '.'
000000000000124a         db  0x00 ; '.'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x01 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0x00 ; '.'
0000000000001251         db  0x00 ; '.'
0000000000001252         db  0x00 ; '.'
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0x08 ; '.'
0000000000001259         db  0xce ; '.'
000000000000125a         db  0x20 ; ' '
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x00 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x07 ; '.'
0000000000001261         db  0x00 ; '.'
0000000000001262         db  0x00 ; '.'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x02 ; '.'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0x00 ; '.'
0000000000001269         db  0x00 ; '.'
000000000000126a         db  0x00 ; '.'
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x10 ; '.'
0000000000001271         db  0xce ; '.'
0000000000001272         db  0x20 ; ' '
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x00 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x07 ; '.'
0000000000001279         db  0x00 ; '.'
000000000000127a         db  0x00 ; '.'
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x03 ; '.'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0x00 ; '.'
0000000000001281         db  0x00 ; '.'
0000000000001282         db  0x00 ; '.'
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0x18 ; '.'
0000000000001289         db  0xce ; '.'
000000000000128a         db  0x20 ; ' '
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x00 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0x07 ; '.'
0000000000001291         db  0x00 ; '.'
0000000000001292         db  0x00 ; '.'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x04 ; '.'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0x00 ; '.'
0000000000001299         db  0x00 ; '.'
000000000000129a         db  0x00 ; '.'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0x20 ; ' '
00000000000012a1         db  0xce ; '.'
00000000000012a2         db  0x20 ; ' '
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x00 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x07 ; '.'
00000000000012a9         db  0x00 ; '.'
00000000000012aa         db  0x00 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x06 ; '.'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0x00 ; '.'
00000000000012b1         db  0x00 ; '.'
00000000000012b2         db  0x00 ; '.'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0x28 ; '('
00000000000012b9         db  0xce ; '.'
00000000000012ba         db  0x20 ; ' '
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x00 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x07 ; '.'
00000000000012c1         db  0x00 ; '.'
00000000000012c2         db  0x00 ; '.'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x07 ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0x00 ; '.'
00000000000012c9         db  0x00 ; '.'
00000000000012ca         db  0x00 ; '.'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0x30 ; '0'
00000000000012d1         db  0xce ; '.'
00000000000012d2         db  0x20 ; ' '
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x00 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x07 ; '.'
00000000000012d9         db  0x00 ; '.'
00000000000012da         db  0x00 ; '.'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x08 ; '.'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0x00 ; '.'
00000000000012e1         db  0x00 ; '.'
00000000000012e2         db  0x00 ; '.'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0x38 ; '8'
00000000000012e9         db  0xce ; '.'
00000000000012ea         db  0x20 ; ' '
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x00 ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x07 ; '.'
00000000000012f1         db  0x00 ; '.'
00000000000012f2         db  0x00 ; '.'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x09 ; '.'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0x00 ; '.'
00000000000012f9         db  0x00 ; '.'
00000000000012fa         db  0x00 ; '.'
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0x40 ; '@'
0000000000001301         db  0xce ; '.'
0000000000001302         db  0x20 ; ' '
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x00 ; '.'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x07 ; '.'
0000000000001309         db  0x00 ; '.'
000000000000130a         db  0x00 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x0a ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0x00 ; '.'
0000000000001311         db  0x00 ; '.'
0000000000001312         db  0x00 ; '.'
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0x48 ; 'H'
0000000000001319         db  0xce ; '.'
000000000000131a         db  0x20 ; ' '
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x00 ; '.'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x07 ; '.'
0000000000001321         db  0x00 ; '.'
0000000000001322         db  0x00 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x0b ; '.'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0x00 ; '.'
0000000000001329         db  0x00 ; '.'
000000000000132a         db  0x00 ; '.'
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0x50 ; 'P'
0000000000001331         db  0xce ; '.'
0000000000001332         db  0x20 ; ' '
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x00 ; '.'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x07 ; '.'
0000000000001339         db  0x00 ; '.'
000000000000133a         db  0x00 ; '.'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x0c ; '.'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0x00 ; '.'
0000000000001341         db  0x00 ; '.'
0000000000001342         db  0x00 ; '.'
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0x58 ; 'X'
0000000000001349         db  0xce ; '.'
000000000000134a         db  0x20 ; ' '
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x00 ; '.'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x07 ; '.'
0000000000001351         db  0x00 ; '.'
0000000000001352         db  0x00 ; '.'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x0d ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0x00 ; '.'
0000000000001359         db  0x00 ; '.'
000000000000135a         db  0x00 ; '.'
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0x60 ; '`'
0000000000001361         db  0xce ; '.'
0000000000001362         db  0x20 ; ' '
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x00 ; '.'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x07 ; '.'
0000000000001369         db  0x00 ; '.'
000000000000136a         db  0x00 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x0e ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0x00 ; '.'
0000000000001371         db  0x00 ; '.'
0000000000001372         db  0x00 ; '.'
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0x68 ; 'h'
0000000000001379         db  0xce ; '.'
000000000000137a         db  0x20 ; ' '
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x00 ; '.'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0x07 ; '.'
0000000000001381         db  0x00 ; '.'
0000000000001382         db  0x00 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x0f ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0x00 ; '.'
0000000000001389         db  0x00 ; '.'
000000000000138a         db  0x00 ; '.'
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'
0000000000001390         db  0x70 ; 'p'
0000000000001391         db  0xce ; '.'
0000000000001392         db  0x20 ; ' '
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x00 ; '.'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0x07 ; '.'
0000000000001399         db  0x00 ; '.'
000000000000139a         db  0x00 ; '.'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x10 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0x00 ; '.'
00000000000013a1         db  0x00 ; '.'
00000000000013a2         db  0x00 ; '.'
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x00 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0x78 ; 'x'
00000000000013a9         db  0xce ; '.'
00000000000013aa         db  0x20 ; ' '
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x00 ; '.'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0x07 ; '.'
00000000000013b1         db  0x00 ; '.'
00000000000013b2         db  0x00 ; '.'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x11 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0x00 ; '.'
00000000000013b9         db  0x00 ; '.'
00000000000013ba         db  0x00 ; '.'
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0x80 ; '.'
00000000000013c1         db  0xce ; '.'
00000000000013c2         db  0x20 ; ' '
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x00 ; '.'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0x07 ; '.'
00000000000013c9         db  0x00 ; '.'
00000000000013ca         db  0x00 ; '.'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x12 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0x00 ; '.'
00000000000013d1         db  0x00 ; '.'
00000000000013d2         db  0x00 ; '.'
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x00 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0x88 ; '.'
00000000000013d9         db  0xce ; '.'
00000000000013da         db  0x20 ; ' '
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x00 ; '.'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x07 ; '.'
00000000000013e1         db  0x00 ; '.'
00000000000013e2         db  0x00 ; '.'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x13 ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0x00 ; '.'
00000000000013e9         db  0x00 ; '.'
00000000000013ea         db  0x00 ; '.'
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0x90 ; '.'
00000000000013f1         db  0xce ; '.'
00000000000013f2         db  0x20 ; ' '
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x00 ; '.'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x07 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x14 ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'
0000000000001400         db  0x00 ; '.'
0000000000001401         db  0x00 ; '.'
0000000000001402         db  0x00 ; '.'
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0x98 ; '.'
0000000000001409         db  0xce ; '.'
000000000000140a         db  0x20 ; ' '
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x00 ; '.'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x07 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x15 ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0x00 ; '.'
0000000000001419         db  0x00 ; '.'
000000000000141a         db  0x00 ; '.'
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0xa0 ; '.'
0000000000001421         db  0xce ; '.'
0000000000001422         db  0x20 ; ' '
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x00 ; '.'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x07 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x00 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x16 ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0x00 ; '.'
0000000000001431         db  0x00 ; '.'
0000000000001432         db  0x00 ; '.'
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0xa8 ; '.'
0000000000001439         db  0xce ; '.'
000000000000143a         db  0x20 ; ' '
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x00 ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x07 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x00 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x17 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0x00 ; '.'
0000000000001449         db  0x00 ; '.'
000000000000144a         db  0x00 ; '.'
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0xb0 ; '.'
0000000000001451         db  0xce ; '.'
0000000000001452         db  0x20 ; ' '
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x00 ; '.'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x07 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x00 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x18 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0x00 ; '.'
0000000000001461         db  0x00 ; '.'
0000000000001462         db  0x00 ; '.'
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0xb8 ; '.'
0000000000001469         db  0xce ; '.'
000000000000146a         db  0x20 ; ' '
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x00 ; '.'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x07 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x00 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x19 ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0x00 ; '.'
0000000000001479         db  0x00 ; '.'
000000000000147a         db  0x00 ; '.'
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0xc0 ; '.'
0000000000001481         db  0xce ; '.'
0000000000001482         db  0x20 ; ' '
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x00 ; '.'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x07 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x00 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x1a ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0x00 ; '.'
0000000000001491         db  0x00 ; '.'
0000000000001492         db  0x00 ; '.'
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0xc8 ; '.'
0000000000001499         db  0xce ; '.'
000000000000149a         db  0x20 ; ' '
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x00 ; '.'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x07 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x00 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x1b ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0x00 ; '.'
00000000000014a9         db  0x00 ; '.'
00000000000014aa         db  0x00 ; '.'
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0xd0 ; '.'
00000000000014b1         db  0xce ; '.'
00000000000014b2         db  0x20 ; ' '
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x00 ; '.'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x07 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x00 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x1c ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0x00 ; '.'
00000000000014c1         db  0x00 ; '.'
00000000000014c2         db  0x00 ; '.'
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0xd8 ; '.'
00000000000014c9         db  0xce ; '.'
00000000000014ca         db  0x20 ; ' '
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x00 ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x07 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x00 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x1e ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0x00 ; '.'
00000000000014d9         db  0x00 ; '.'
00000000000014da         db  0x00 ; '.'
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0xe0 ; '.'
00000000000014e1         db  0xce ; '.'
00000000000014e2         db  0x20 ; ' '
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x00 ; '.'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x07 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x00 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x1f ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0x00 ; '.'
00000000000014f1         db  0x00 ; '.'
00000000000014f2         db  0x00 ; '.'
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0xe8 ; '.'
00000000000014f9         db  0xce ; '.'
00000000000014fa         db  0x20 ; ' '
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x00 ; '.'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x07 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x00 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x20 ; ' '
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0x00 ; '.'
0000000000001509         db  0x00 ; '.'
000000000000150a         db  0x00 ; '.'
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0xf0 ; '.'
0000000000001511         db  0xce ; '.'
0000000000001512         db  0x20 ; ' '
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x00 ; '.'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x07 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x21 ; '!'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0x00 ; '.'
0000000000001521         db  0x00 ; '.'
0000000000001522         db  0x00 ; '.'
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0xf8 ; '.'
0000000000001529         db  0xce ; '.'
000000000000152a         db  0x20 ; ' '
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x00 ; '.'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x07 ; '.'
0000000000001531         db  0x00 ; '.'
0000000000001532         db  0x00 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x22 ; '"'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0x00 ; '.'
0000000000001539         db  0x00 ; '.'
000000000000153a         db  0x00 ; '.'
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x00 ; '.'
0000000000001541         db  0xcf ; '.'
0000000000001542         db  0x20 ; ' '
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x00 ; '.'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x07 ; '.'
0000000000001549         db  0x00 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x23 ; '#'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x00 ; '.'
0000000000001551         db  0x00 ; '.'
0000000000001552         db  0x00 ; '.'
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x08 ; '.'
0000000000001559         db  0xcf ; '.'
000000000000155a         db  0x20 ; ' '
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x00 ; '.'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0x07 ; '.'
0000000000001561         db  0x00 ; '.'
0000000000001562         db  0x00 ; '.'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x24 ; '$'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0x00 ; '.'
0000000000001569         db  0x00 ; '.'
000000000000156a         db  0x00 ; '.'
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x10 ; '.'
0000000000001571         db  0xcf ; '.'
0000000000001572         db  0x20 ; ' '
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x00 ; '.'
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0x07 ; '.'
0000000000001579         db  0x00 ; '.'
000000000000157a         db  0x00 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x26 ; '&'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0x00 ; '.'
0000000000001581         db  0x00 ; '.'
0000000000001582         db  0x00 ; '.'
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0x18 ; '.'
0000000000001589         db  0xcf ; '.'
000000000000158a         db  0x20 ; ' '
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x00 ; '.'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x07 ; '.'
0000000000001591         db  0x00 ; '.'
0000000000001592         db  0x00 ; '.'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x27 ; '''
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0x00 ; '.'
0000000000001599         db  0x00 ; '.'
000000000000159a         db  0x00 ; '.'
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x00 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x20 ; ' '
00000000000015a1         db  0xcf ; '.'
00000000000015a2         db  0x20 ; ' '
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x00 ; '.'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0x07 ; '.'
00000000000015a9         db  0x00 ; '.'
00000000000015aa         db  0x00 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x28 ; '('
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0x00 ; '.'
00000000000015b1         db  0x00 ; '.'
00000000000015b2         db  0x00 ; '.'
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x28 ; '('
00000000000015b9         db  0xcf ; '.'
00000000000015ba         db  0x20 ; ' '
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x00 ; '.'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0x07 ; '.'
00000000000015c1         db  0x00 ; '.'
00000000000015c2         db  0x00 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x29 ; ')'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0x00 ; '.'
00000000000015c9         db  0x00 ; '.'
00000000000015ca         db  0x00 ; '.'
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x30 ; '0'
00000000000015d1         db  0xcf ; '.'
00000000000015d2         db  0x20 ; ' '
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x00 ; '.'
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x07 ; '.'
00000000000015d9         db  0x00 ; '.'
00000000000015da         db  0x00 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x2a ; '*'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0x00 ; '.'
00000000000015e1         db  0x00 ; '.'
00000000000015e2         db  0x00 ; '.'
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0x38 ; '8'
00000000000015e9         db  0xcf ; '.'
00000000000015ea         db  0x20 ; ' '
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x00 ; '.'
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x07 ; '.'
00000000000015f1         db  0x00 ; '.'
00000000000015f2         db  0x00 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x2b ; '+'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0x00 ; '.'
00000000000015f9         db  0x00 ; '.'
00000000000015fa         db  0x00 ; '.'
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0x40 ; '@'
0000000000001601         db  0xcf ; '.'
0000000000001602         db  0x20 ; ' '
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x00 ; '.'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0x07 ; '.'
0000000000001609         db  0x00 ; '.'
000000000000160a         db  0x00 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x2c ; ','
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0x00 ; '.'
0000000000001611         db  0x00 ; '.'
0000000000001612         db  0x00 ; '.'
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0x48 ; 'H'
0000000000001619         db  0xcf ; '.'
000000000000161a         db  0x20 ; ' '
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x00 ; '.'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0x07 ; '.'
0000000000001621         db  0x00 ; '.'
0000000000001622         db  0x00 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x2d ; '-'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0x00 ; '.'
0000000000001629         db  0x00 ; '.'
000000000000162a         db  0x00 ; '.'
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0x50 ; 'P'
0000000000001631         db  0xcf ; '.'
0000000000001632         db  0x20 ; ' '
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x00 ; '.'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x07 ; '.'
0000000000001639         db  0x00 ; '.'
000000000000163a         db  0x00 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x2e ; '.'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0x00 ; '.'
0000000000001641         db  0x00 ; '.'
0000000000001642         db  0x00 ; '.'
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0x58 ; 'X'
0000000000001649         db  0xcf ; '.'
000000000000164a         db  0x20 ; ' '
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x00 ; '.'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0x07 ; '.'
0000000000001651         db  0x00 ; '.'
0000000000001652         db  0x00 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x2f ; '/'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0x00 ; '.'
0000000000001659         db  0x00 ; '.'
000000000000165a         db  0x00 ; '.'
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0x60 ; '`'
0000000000001661         db  0xcf ; '.'
0000000000001662         db  0x20 ; ' '
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x00 ; '.'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0x07 ; '.'
0000000000001669         db  0x00 ; '.'
000000000000166a         db  0x00 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x30 ; '0'
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0x00 ; '.'
0000000000001671         db  0x00 ; '.'
0000000000001672         db  0x00 ; '.'
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0x68 ; 'h'
0000000000001679         db  0xcf ; '.'
000000000000167a         db  0x20 ; ' '
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x00 ; '.'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0x07 ; '.'
0000000000001681         db  0x00 ; '.'
0000000000001682         db  0x00 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x31 ; '1'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0x00 ; '.'
0000000000001689         db  0x00 ; '.'
000000000000168a         db  0x00 ; '.'
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0x70 ; 'p'
0000000000001691         db  0xcf ; '.'
0000000000001692         db  0x20 ; ' '
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x00 ; '.'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x07 ; '.'
0000000000001699         db  0x00 ; '.'
000000000000169a         db  0x00 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x32 ; '2'
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0x00 ; '.'
00000000000016a1         db  0x00 ; '.'
00000000000016a2         db  0x00 ; '.'
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0x78 ; 'x'
00000000000016a9         db  0xcf ; '.'
00000000000016aa         db  0x20 ; ' '
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x00 ; '.'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x07 ; '.'
00000000000016b1         db  0x00 ; '.'
00000000000016b2         db  0x00 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x33 ; '3'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0x00 ; '.'
00000000000016b9         db  0x00 ; '.'
00000000000016ba         db  0x00 ; '.'
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0x80 ; '.'
00000000000016c1         db  0xcf ; '.'
00000000000016c2         db  0x20 ; ' '
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x00 ; '.'
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x07 ; '.'
00000000000016c9         db  0x00 ; '.'
00000000000016ca         db  0x00 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x34 ; '4'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0x00 ; '.'
00000000000016d1         db  0x00 ; '.'
00000000000016d2         db  0x00 ; '.'
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0x88 ; '.'
00000000000016d9         db  0xcf ; '.'
00000000000016da         db  0x20 ; ' '
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x00 ; '.'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0x07 ; '.'
00000000000016e1         db  0x00 ; '.'
00000000000016e2         db  0x00 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x35 ; '5'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0x00 ; '.'
00000000000016e9         db  0x00 ; '.'
00000000000016ea         db  0x00 ; '.'
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0x90 ; '.'
00000000000016f1         db  0xcf ; '.'
00000000000016f2         db  0x20 ; ' '
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x00 ; '.'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x07 ; '.'
00000000000016f9         db  0x00 ; '.'
00000000000016fa         db  0x00 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x36 ; '6'
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0x00 ; '.'
0000000000001701         db  0x00 ; '.'
0000000000001702         db  0x00 ; '.'
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0x98 ; '.'
0000000000001709         db  0xcf ; '.'
000000000000170a         db  0x20 ; ' '
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x00 ; '.'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x07 ; '.'
0000000000001711         db  0x00 ; '.'
0000000000001712         db  0x00 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x37 ; '7'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0x00 ; '.'
0000000000001719         db  0x00 ; '.'
000000000000171a         db  0x00 ; '.'
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0xa0 ; '.'
0000000000001721         db  0xcf ; '.'
0000000000001722         db  0x20 ; ' '
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x00 ; '.'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x07 ; '.'
0000000000001729         db  0x00 ; '.'
000000000000172a         db  0x00 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x38 ; '8'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0x00 ; '.'
0000000000001731         db  0x00 ; '.'
0000000000001732         db  0x00 ; '.'
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0xa8 ; '.'
0000000000001739         db  0xcf ; '.'
000000000000173a         db  0x20 ; ' '
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x00 ; '.'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0x07 ; '.'
0000000000001741         db  0x00 ; '.'
0000000000001742         db  0x00 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x39 ; '9'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0x00 ; '.'
0000000000001749         db  0x00 ; '.'
000000000000174a         db  0x00 ; '.'
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0xb0 ; '.'
0000000000001751         db  0xcf ; '.'
0000000000001752         db  0x20 ; ' '
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x00 ; '.'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0x07 ; '.'
0000000000001759         db  0x00 ; '.'
000000000000175a         db  0x00 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x3a ; ':'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0x00 ; '.'
0000000000001761         db  0x00 ; '.'
0000000000001762         db  0x00 ; '.'
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0xb8 ; '.'
0000000000001769         db  0xcf ; '.'
000000000000176a         db  0x20 ; ' '
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x00 ; '.'
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0x07 ; '.'
0000000000001771         db  0x00 ; '.'
0000000000001772         db  0x00 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x3c ; '<'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0x00 ; '.'
0000000000001779         db  0x00 ; '.'
000000000000177a         db  0x00 ; '.'
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0xc0 ; '.'
0000000000001781         db  0xcf ; '.'
0000000000001782         db  0x20 ; ' '
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x00 ; '.'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0x07 ; '.'
0000000000001789         db  0x00 ; '.'
000000000000178a         db  0x00 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x3d ; '='
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0x00 ; '.'
0000000000001791         db  0x00 ; '.'
0000000000001792         db  0x00 ; '.'
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x00 ; '.'
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0xc8 ; '.'
0000000000001799         db  0xcf ; '.'
000000000000179a         db  0x20 ; ' '
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x00 ; '.'
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0x07 ; '.'
00000000000017a1         db  0x00 ; '.'
00000000000017a2         db  0x00 ; '.'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x3f ; '?'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0x00 ; '.'
00000000000017a9         db  0x00 ; '.'
00000000000017aa         db  0x00 ; '.'
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0xd0 ; '.'
00000000000017b1         db  0xcf ; '.'
00000000000017b2         db  0x20 ; ' '
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x00 ; '.'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0x07 ; '.'
00000000000017b9         db  0x00 ; '.'
00000000000017ba         db  0x00 ; '.'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x40 ; '@'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0x00 ; '.'
00000000000017c1         db  0x00 ; '.'
00000000000017c2         db  0x00 ; '.'
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x00 ; '.'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x17c8; 0x17df[ (23 bytes)
        ; File offset : [6088; 6111[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
00000000000017c8         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
00000000000017cc         mov        rax, qword [qword_20cfe8]                   ; qword_20cfe8
00000000000017d3         test       rax, rax
00000000000017d6         je         loc_17da

00000000000017d8         call       rax

                     loc_17da:
00000000000017da         add        rsp, 0x8                                    ; CODE XREF=_init+14
00000000000017de         ret
                        ; endp
00000000000017df         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x17e0; 0x1ba0[ (960 bytes)
        ; File offset : [6112; 7072[ (960 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_17e0:
00000000000017e0         push       qword [qword_20cdf0]                        ; Begin of unwind block (FDE at 0xad54), qword_20cdf0, CODE XREF=sub_17f6+5
00000000000017e6         jmp        qword [qword_20cdf0+8]                      ; 0x20cdf8
                        ; endp
00000000000017ec         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
00000000000017f0         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=main+2309, blake2b_stream+216, quotearg_n_options+277, quotearg_free+55, quotearg_free+82, quotearg_free+120, xrealloc+40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_17f6:
00000000000017f6         push       0x0
00000000000017fb         jmp        loc_17e0


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
0000000000001800         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=set_program_name+154, sub_6560+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, xalloc_die+48
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1806:
0000000000001806         push       0x1
000000000000180b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
0000000000001810         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=main+2929, main+3833, digest_file.isra.1+149, digest_file.isra.1+314, digest_file.isra.1+360, close_stdout+22, fopen_safer+93, fopen_safer+120, quotearg_n_options+28, clone_quoting_options+7, quotearg_buffer+45
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1816:
0000000000001816         push       0x2
000000000000181b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
0000000000001820         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+828, usage+1021, argmatch+162
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1826:
0000000000001826         push       0x3
000000000000182b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
0000000000001830         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1836:
0000000000001836         push       0x4
000000000000183b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
0000000000001840         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1846:
0000000000001846         push       0x5
000000000000184b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_ferror:        // ferror
0000000000001850         jmp        qword [ferror@GOT]                          ; ferror, ferror@GOT, CODE XREF=blake2b_stream+176
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1856:
0000000000001856         push       0x6
000000000000185b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fread:        // fread
0000000000001860         jmp        qword [fread@GOT]                           ; fread, fread@GOT, CODE XREF=blake2b_stream+132
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1866:
0000000000001866         push       0x7
000000000000186b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fcntl:        // fcntl
0000000000001870         jmp        qword [fcntl@GOT]                           ; fcntl, fcntl@GOT, CODE XREF=rpl_fcntl+128, rpl_fcntl+212, rpl_fcntl+320, rpl_fcntl+407, rpl_fcntl+423, rpl_fcntl+460, rpl_fcntl+483, rpl_fcntl+559, rpl_fcntl+606
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1876:
0000000000001876         push       0x8
000000000000187b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001880         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1886:
0000000000001886         push       0x9
000000000000188b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000001890         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1896:
0000000000001896         push       0xa
000000000000189b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
00000000000018a0         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+96
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18a6:
00000000000018a6         push       0xb
00000000000018ab         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
00000000000018b0         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+590, main+676, main+712, main+1091, main+1690, main+1762, main+2258, main+3376, main+3478, main+3825, main+4264
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18b6:
00000000000018b6         push       0xc
00000000000018bb         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
00000000000018c0         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=quotearg_buffer_restyled+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18c6:
00000000000018c6         push       0xd
00000000000018cb         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
00000000000018d0         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=argmatch+33, argmatch+174, quotearg_buffer_restyled+343, sub_6560+411, sub_6560+1742, xstrdup+4
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18d6:
00000000000018d6         push       0xe
00000000000018db         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
00000000000018e0         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=main+5074, blake2b_compress+5863, blake2b_init+135, blake2b_init_key+263, blake2b_final+364, blake2b+240, blake2b_stream+287, sub_6560+2739, quotearg_n_style+137, quotearg_n_style_mem+133, quotearg_char_mem+147
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18e6:
00000000000018e6         push       0xf
00000000000018eb         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
00000000000018f0         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+183
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_18f6:
00000000000018f6         push       0x10
00000000000018fb         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001900         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1906:
0000000000001906         push       0x11
000000000000190b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
0000000000001910         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=main+3081, main+3929, main+4117, xstrtoul+291, xstrtoul+323, xstrtoul+380, xstrtoumax+291, xstrtoumax+323, xstrtoumax+380
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1916:
0000000000001916         push       0x12
000000000000191b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___overflow:        // __overflow
0000000000001920         jmp        qword [__overflow@GOT]                      ; __overflow, __overflow@GOT, CODE XREF=main+4392, main+4428, main+4847, main+4875, main+4889, main+4904, main+4924, print_filename+187, argmatch_valid+283
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1926:
0000000000001926         push       0x13
000000000000192b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001930         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1936:
0000000000001936         push       0x14
000000000000193b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001940         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1946:
0000000000001946         push       0x15
000000000000194b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000001950         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=xstrtoul+927, xstrtoumax+927
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1956:
0000000000001956         push       0x16
000000000000195b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtoul_internal:        // __strtoul_internal
0000000000001960         jmp        qword [__strtoul_internal@GOT]              ; __strtoul_internal, __strtoul_internal@GOT, CODE XREF=xstrtoumax+142
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1966:
0000000000001966         push       0x17
000000000000196b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001970         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=blake2b_final+151, quotearg_n_options+153, xzalloc+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1976:
0000000000001976         push       0x18
000000000000197b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_close:        // close
0000000000001980         jmp        qword [close@GOT]                           ; close, close@GOT, CODE XREF=fopen_safer+106, rpl_fcntl+510
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1986:
0000000000001986         push       0x19
000000000000198b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_posix_fadvise:        // posix_fadvise
0000000000001990         jmp        qword [posix_fadvise@GOT]                   ; posix_fadvise, posix_fadvise@GOT, CODE XREF=fdadvise, fadvise+22
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1996:
0000000000001996         push       0x1a
000000000000199b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
00000000000019a0         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=argmatch+111, argmatch_valid+150, argmatch_to_argument+56, quotearg_buffer_restyled+410
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19a6:
00000000000019a6         push       0x1b
00000000000019ab         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
00000000000019b0         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=main+3541, print_filename+173, usage+170, usage+207, usage+285, usage+322, usage+359, usage+396, usage+433, usage+470, usage+514
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19b6:
00000000000019b6         push       0x1c
00000000000019bb         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
00000000000019c0         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19c6:
00000000000019c6         push       0x1d
00000000000019cb         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___getdelim:        // __getdelim
00000000000019d0         jmp        qword [__getdelim@GOT]                      ; __getdelim, __getdelim@GOT, CODE XREF=main+1234
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19d6:
00000000000019d6         push       0x1e
00000000000019db         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
00000000000019e0         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=main+1053
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19e6:
00000000000019e6         push       0x1f
00000000000019eb         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___memcpy_chk:        // __memcpy_chk
00000000000019f0         jmp        qword [__memcpy_chk@GOT]                    ; __memcpy_chk, __memcpy_chk@GOT, CODE XREF=blake2b_init_key+180
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19f6:
00000000000019f6         push       0x20
00000000000019fb         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_feof:        // feof
0000000000001a00         jmp        qword [feof@GOT]                            ; feof, feof@GOT, CODE XREF=blake2b_stream+104
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a06:
0000000000001a06         push       0x21
0000000000001a0b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000001a10         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=blake2b_update.part.3+57, blake2b_update.part.3+102, blake2b_final+289, xmemdup+35
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a16:
0000000000001a16         push       0x22
0000000000001a1b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000001a20         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=fadvise+8, fopen_safer+23, rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a26:
0000000000001a26         push       0x23
0000000000001a2b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000001a30         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=blake2b_stream+52, xmalloc+4
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a36:
0000000000001a36         push       0x24
0000000000001a3b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000001a40         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a46:
0000000000001a46         push       0x25
0000000000001a4b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001a50         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a56:
0000000000001a56         push       0x26
0000000000001a5b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001a60         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a66:
0000000000001a66         push       0x27
0000000000001a6b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite_unlocked:        // fwrite_unlocked
0000000000001a70         jmp        qword [fwrite_unlocked@GOT]                 ; fwrite_unlocked, fwrite_unlocked@GOT, CODE XREF=main+3590, main+3631, print_filename+57, print_filename+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a76:
0000000000001a76         push       0x28
0000000000001a7b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001a80         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a86:
0000000000001a86         push       0x29
0000000000001a8b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fdopen:        // fdopen
0000000000001a90         jmp        qword [fdopen@GOT]                          ; fdopen, fdopen@GOT, CODE XREF=fopen_safer+80
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a96:
0000000000001a96         push       0x2a
0000000000001a9b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001aa0         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+77, usage+803, usage+996, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1aa6:
0000000000001aa6         push       0x2b
0000000000001aab         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001ab0         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=main+3167, main+4286, main+4834, usage+133, usage+248, usage+555, usage+791, usage+884, usage+945, usage+984, usage+1087
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ab6:
0000000000001ab6         push       0x2c
0000000000001abb         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setvbuf:        // setvbuf
0000000000001ac0         jmp        qword [setvbuf@GOT]                         ; setvbuf, setvbuf@GOT, CODE XREF=main+141
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ac6:
0000000000001ac6         push       0x2d
0000000000001acb         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000001ad0         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+693, main+729, main+1710, main+1776, main+2285, main+2417, main+2477, main+2537, main+2950, main+3393, main+3502
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ad6:
0000000000001ad6         push       0x2e
0000000000001adb         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000001ae0         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ae6:
0000000000001ae6         push       0x2f
0000000000001aeb         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fopen:        // fopen
0000000000001af0         jmp        qword [fopen@GOT]                           ; fopen, fopen@GOT, CODE XREF=fopen_safer+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1af6:
0000000000001af6         push       0x30
0000000000001afb         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcngettext:        // dcngettext
0000000000001b00         jmp        qword [dcngettext@GOT]                      ; dcngettext, dcngettext@GOT, CODE XREF=main+2400, main+2460, main+2520
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b06:
0000000000001b06         push       0x31
0000000000001b0b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtoul:        // strtoul
0000000000001b10         jmp        qword [strtoul@GOT]                         ; strtoul, strtoul@GOT, CODE XREF=xstrtoul+140
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b16:
0000000000001b16         push       0x32
0000000000001b1b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000001b20         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b26:
0000000000001b26         push       0x33
0000000000001b2b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000001b30         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+428, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b36:
0000000000001b36         push       0x34
0000000000001b3b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000001b40         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b46:
0000000000001b46         push       0x35
0000000000001b4b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000001b50         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+81, argmatch_valid+122, argmatch_valid+198, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332, version_etc_arn+492, version_etc_arn+563, version_etc_arn+642, version_etc_arn+718
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b56:
0000000000001b56         push       0x36
0000000000001b5b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000001b60         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_6560+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b66:
0000000000001b66         push       0x37
0000000000001b6b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000001b70         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_6560+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b76:
0000000000001b76         push       0x38
0000000000001b7b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_tolower_loc:        // __ctype_tolower_loc
0000000000001b80         jmp        qword [__ctype_tolower_loc@GOT]             ; __ctype_tolower_loc, __ctype_tolower_loc@GOT, CODE XREF=main+4505
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b86:
0000000000001b86         push       0x39
0000000000001b8b         jmp        0x17e0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000001b90         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=main+1957, hex_digits+21, sub_6300+51, xstrtoul+85, xstrtoumax+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b96:
0000000000001b96         push       0x3a
0000000000001b9b         jmp        0x17e0
                        ; endp


        ; Section .plt.got
        ; Range: [0x1ba0; 0x1ba8[ (8 bytes)
        ; File offset : [7072; 7080[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_20cff8:        // qword_20cff8
0000000000001ba0         jmp        qword [qword_20cff8]                        ; qword, End of unwind block (FDE at 0xad54), Begin of unwind block (FDE at 0xad7c), qword_20cff8, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000001ba6         align      8
0000000000001ba8         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xad7c)
0000000000001ba9         db  0x00 ; '.'
0000000000001baa         db  0x00 ; '.'
0000000000001bab         db  0x00 ; '.'
0000000000001bac         db  0x00 ; '.'
0000000000001bad         db  0x00 ; '.'
0000000000001bae         db  0x00 ; '.'
0000000000001baf         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x1bb0; 0x91ce[ (30238 bytes)
        ; File offset : [7088; 37326[ (30238 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_88: int8_t, -136
        ;    var_D8: int8_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_FC: int32_t, -252
        ;    var_FD: int8_t, -253
        ;    var_FE: int8_t, -254
        ;    var_FF: int8_t, -255
        ;    var_100: int8_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_128: int64_t, -296
        ;    var_12C: int32_t, -300
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_150: int64_t, -336
        ;    var_158: int64_t, -344
        ;    var_160: int64_t, -352
        ;    var_168: int64_t, -360
        ;    var_170: int64_t, -368


                     main:
0000000000001bb0         push       r15                                         ; Begin of unwind block (FDE at 0xae90), DATA XREF=_start+29
0000000000001bb2         push       r14
0000000000001bb4         xor        r14d, r14d
0000000000001bb7         push       r13
0000000000001bb9         push       r12
0000000000001bbb         mov        r12d, edi
0000000000001bbe         push       rbp
0000000000001bbf         push       rbx
0000000000001bc0         mov        rbx, rsi
0000000000001bc3         lea        r13, qword [aWrittenBySSAnd+27]             ; 0xa4a1
0000000000001bca         mov        ebp, 0xffffffff
0000000000001bcf         sub        rsp, 0x148
0000000000001bd6         mov        rdi, qword [rsi]
0000000000001bd9         mov        rax, qword [fs:0x28]
0000000000001be2         mov        qword [rsp+0x178+var_40], rax
0000000000001bea         xor        eax, eax
0000000000001bec         call       set_program_name                            ; set_program_name
0000000000001bf1         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0xa4a1
0000000000001bf8         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
0000000000001bfd         call       j_setlocale                                 ; setlocale
0000000000001c02         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
0000000000001c09         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
0000000000001c10         call       j_bindtextdomain                            ; bindtextdomain
0000000000001c15         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
0000000000001c1c         call       j_textdomain                                ; textdomain
0000000000001c21         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
0000000000001c28         call       atexit                                      ; atexit
0000000000001c2d         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_setvbuf, stdout@@GLIBC_2.2.5
0000000000001c34         xor        ecx, ecx                                    ; argument "__n" for method j_setvbuf
0000000000001c36         mov        edx, 0x1                                    ; argument "__modes" for method j_setvbuf
0000000000001c3b         xor        esi, esi                                    ; argument "__buf" for method j_setvbuf
0000000000001c3d         call       j_setvbuf                                   ; setvbuf
0000000000001c42         mov        byte [rsp+0x178+var_100], 0x0
0000000000001c47         nop        word [rax+rax]

                     loc_1c50:
0000000000001c50         lea        rcx, qword [long_options]                   ; argument "__longopts" for method j_getopt_long, long_options, CODE XREF=main+255, main+318, main+349, main+442, main+469, main+501, main+519, main+533, main+565, main+645, main+743
0000000000001c57         lea        rdx, qword [aLbctwz]                        ; argument "__shortopts" for method j_getopt_long, "l:bctwz"
0000000000001c5e         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long
0000000000001c61         mov        rsi, rbx                                    ; argument "___argv" for method j_getopt_long
0000000000001c64         mov        edi, r12d                                   ; argument "___argc" for method j_getopt_long
0000000000001c67         call       j_getopt_long                               ; getopt_long
0000000000001c6c         cmp        eax, 0xffffffff
0000000000001c6f         je         loc_1e9c

0000000000001c75         cmp        eax, 0x77
0000000000001c78         je         loc_1dd0

0000000000001c7e         jle        loc_1cb8

0000000000001c80         cmp        eax, 0x81
0000000000001c85         je         loc_1d70

0000000000001c8b         jle        loc_1cf8

0000000000001c8d         cmp        eax, 0x83
0000000000001c92         je         loc_1db0

0000000000001c98         jl         loc_1d90

0000000000001c9e         cmp        eax, 0x84
0000000000001ca3         jne        loc_1cda

0000000000001ca5         mov        byte [rsp+0x178+var_100], 0x1
0000000000001caa         mov        ebp, 0x1
0000000000001caf         jmp        loc_1c50
0000000000001cb1         align      8

                     loc_1cb8:
0000000000001cb8         cmp        eax, 0x62                                   ; CODE XREF=main+206
0000000000001cbb         je         loc_1dc0

0000000000001cc1         jle        loc_1d18

0000000000001cc3         cmp        eax, 0x6c
0000000000001cc6         je         loc_1df0

0000000000001ccc         cmp        eax, 0x74
0000000000001ccf         je         loc_1d68

0000000000001cd5         cmp        eax, 0x63
0000000000001cd8         je         loc_1ce8

                     loc_1cda:
0000000000001cda         mov        edi, 0x1                                    ; argument #1 for method usage, CODE XREF=main+243, main+340, main+1781, main+4944
0000000000001cdf         call       usage                                       ; usage
0000000000001ce4         nop        dword [rax]

                     loc_1ce8:
0000000000001ce8         mov        r14d, 0x1                                   ; CODE XREF=main+296
0000000000001cee         jmp        loc_1c50
0000000000001cf3         align      8

                     loc_1cf8:
0000000000001cf8         cmp        eax, 0x7a                                   ; CODE XREF=main+219
0000000000001cfb         je         loc_1e90

0000000000001d01         add        eax, 0xffffff80
0000000000001d04         jne        loc_1cda

0000000000001d06         mov        byte [ignore_missing], 0x1                  ; ignore_missing
0000000000001d0d         jmp        loc_1c50
0000000000001d12         align      8

                     loc_1d18:
0000000000001d18         cmp        eax, 0xffffff7d                             ; CODE XREF=main+273
0000000000001d1d         jne        loc_2efb

0000000000001d23         sub        rsp, 0x8
0000000000001d27         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000001d2e         mov        rcx, qword [Version]                        ; Version
0000000000001d35         push       0x0
0000000000001d37         lea        r9, qword [aSamuelNeves]                    ; "Samuel Neves"
0000000000001d3e         lea        r8, qword [aPadraigBrady]                   ; "Padraig Brady"
0000000000001d45         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x9276
0000000000001d4c         lea        rsi, qword [aB2sum]                         ; "b2sum"
0000000000001d53         xor        eax, eax
0000000000001d55         call       version_etc                                 ; version_etc
0000000000001d5a         xor        edi, edi                                    ; argument "__status" for method j_exit
0000000000001d5c         call       j_exit                                      ; exit
                        ; endp
0000000000001d61         align      8

                     loc_1d68:
0000000000001d68         xor        ebp, ebp                                    ; CODE XREF=main+287
0000000000001d6a         jmp        loc_1c50
0000000000001d6f         align      16

                     loc_1d70:
0000000000001d70         mov        byte [status_only], 0x1                     ; status_only, CODE XREF=main+213
0000000000001d77         mov        byte [warn], 0x0                            ; warn
0000000000001d7e         mov        byte [quiet], 0x0                           ; quiet
0000000000001d85         jmp        loc_1c50
0000000000001d8a         align      16

                     loc_1d90:
0000000000001d90         mov        byte [status_only], 0x0                     ; status_only, CODE XREF=main+232
0000000000001d97         mov        byte [warn], 0x0                            ; warn
0000000000001d9e         mov        byte [quiet], 0x1                           ; quiet
0000000000001da5         jmp        loc_1c50
0000000000001daa         align      16

                     loc_1db0:
0000000000001db0         mov        byte [strict], 0x1                          ; strict, CODE XREF=main+226
0000000000001db7         jmp        loc_1c50
0000000000001dbc         align      64

                     loc_1dc0:
0000000000001dc0         mov        ebp, 0x1                                    ; CODE XREF=main+267
0000000000001dc5         jmp        loc_1c50
0000000000001dca         align      16

                     loc_1dd0:
0000000000001dd0         mov        byte [status_only], 0x0                     ; status_only, CODE XREF=main+200
0000000000001dd7         mov        byte [warn], 0x1                            ; warn
0000000000001dde         mov        byte [quiet], 0x0                           ; quiet
0000000000001de5         jmp        loc_1c50
0000000000001dea         align      16

                     loc_1df0:
0000000000001df0         lea        rsi, qword [aInvalidLength]                 ; argument "msgid" for method j_dcgettext, "invalid length", CODE XREF=main+278
0000000000001df7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001df9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001dfe         call       j_dcgettext                                 ; dcgettext
0000000000001e03         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001e0a         lea        rcx, qword [aWrittenBySSAnd+27]             ; 0xa4a1
0000000000001e11         xor        r9d, r9d
0000000000001e14         xor        esi, esi
0000000000001e16         mov        r8, rax
0000000000001e19         mov        rdx, 0xffffffffffffffff
0000000000001e20         call       xdectoumax                                  ; xdectoumax
0000000000001e25         test       al, 0x7
0000000000001e27         mov        qword [b2_length], rax                      ; b2_length
0000000000001e2e         mov        r13, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001e35         je         loc_1c50

0000000000001e3b         mov        rdi, r13
0000000000001e3e         call       quote                                       ; quote
0000000000001e43         lea        rsi, qword [aInvalidLengthS]                ; argument "msgid" for method j_dcgettext, "invalid length: %s"
0000000000001e4a         mov        rbx, rax
0000000000001e4d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001e52         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001e54         call       j_dcgettext                                 ; dcgettext
0000000000001e59         mov        rcx, rbx
0000000000001e5c         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000001e5f         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000001e61         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000001e63         xor        eax, eax
0000000000001e65         call       j_error                                     ; error
0000000000001e6a         lea        rsi, qword [aLengthIsNotAMu]                ; argument "msgid" for method j_dcgettext, "length is not a multiple of 8"
0000000000001e71         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001e76         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001e78         call       j_dcgettext                                 ; dcgettext
0000000000001e7d         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000001e7f         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000001e82         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000001e87         xor        eax, eax
0000000000001e89         call       j_error                                     ; error
0000000000001e8e         nop

                     loc_1e90:
0000000000001e90         mov        byte [delim], 0x0                           ; delim, CODE XREF=main+331
0000000000001e97         jmp        loc_1c50

                     loc_1e9c:
0000000000001e9c         mov        rax, qword [b2_length]                      ; b2_length, CODE XREF=main+191
0000000000001ea3         mov        qword [min_digest_line_length], 0x3         ; min_digest_line_length
0000000000001eae         cmp        rax, 0x200
0000000000001eb4         ja         loc_2f0d

0000000000001eba         test       rax, rax
0000000000001ebd         jne        loc_1ed4

0000000000001ebf         test       r14b, r14b
0000000000001ec2         jne        loc_1ed4

0000000000001ec4         mov        qword [b2_length], 0x200                    ; b2_length
0000000000001ecf         mov        eax, 0x200

                     loc_1ed4:
0000000000001ed4         shr        rax, 0x2                                    ; CODE XREF=main+781, main+786
0000000000001ed8         test       ebp, ebp
0000000000001eda         mov        qword [digest_hex_bytes], rax               ; digest_hex_bytes
0000000000001ee1         sete       al
0000000000001ee4         test       byte [rsp+0x178+var_100], al
0000000000001ee8         jne        loc_2fea

0000000000001eee         cmp        byte [delim], 0xa                           ; delim
0000000000001ef5         je         loc_2263

0000000000001efb         test       r14b, r14b
0000000000001efe         mov        edx, 0x5
0000000000001f03         lea        rsi, qword [aTheZeroOptionI]                ; "the --zero option is not supported when verifying checksums"
0000000000001f0a         jne        loc_2290

0000000000001f10         cmp        byte [ignore_missing], 0x0                  ; ignore_missing
0000000000001f17         jne        loc_2fd9

0000000000001f1d         cmp        byte [status_only], 0x0                     ; status_only
0000000000001f24         jne        loc_2fc8

                     loc_1f2a:
0000000000001f2a         cmp        byte [warn], 0x0                            ; warn, CODE XREF=main+5129
0000000000001f31         je         loc_22da

0000000000001f37         test       r14b, r14b
0000000000001f3a         mov        edx, 0x5
0000000000001f3f         lea        rsi, qword [aTheWarnOptionI]                ; "the --warn option is meaningful only when verifying checksums"
0000000000001f46         je         loc_2290

                     loc_1f4c:
0000000000001f4c         cmp        ebp, 0xffffffff                             ; CODE XREF=main+1828, main+1867, main+1888, main+3412
0000000000001f4f         jne        loc_1f53

0000000000001f51         xor        ebp, ebp

                     loc_1f53:
0000000000001f53         movsxd     rax, r12d                                   ; CODE XREF=main+927
0000000000001f56         lea        rax, qword [rbx+rax*8]
0000000000001f5a         mov        qword [rsp+0x178+var_118], rax
0000000000001f5f         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
0000000000001f66         cmp        eax, r12d
0000000000001f69         jne        loc_1f84

0000000000001f6b         mov        rsi, qword [rsp+0x178+var_118]
0000000000001f70         lea        rdi, qword [aLibs+10]                       ; 0x9f6a
0000000000001f77         add        rsi, 0x8
0000000000001f7b         mov        qword [rsi-8], rdi
0000000000001f7f         mov        qword [rsp+0x178+var_118], rsi

                     loc_1f84:
0000000000001f84         lea        rax, qword [rbx+rax*8]                      ; CODE XREF=main+953
0000000000001f88         cmp        qword [rsp+0x178+var_118], rax
0000000000001f8d         mov        qword [rsp+0x178+var_160], rax
0000000000001f92         jbe        loc_2e7a

0000000000001f98         cmp        ebp, 0x1
0000000000001f9b         mov        byte [rsp+0x178+var_FF], 0x1
0000000000001fa0         sbb        eax, eax
0000000000001fa2         and        eax, 0xfffffff6
0000000000001fa5         add        eax, 0x2a
0000000000001fa8         mov        dword [rsp+0x178+var_FC], eax
0000000000001fac         mov        byte [rsp+0x178+var_FD], al

                     loc_1fb0:
0000000000001fb0         mov        rax, qword [rsp+0x178+var_160]              ; CODE XREF=main+2670
0000000000001fb5         test       r14b, r14b
0000000000001fb8         mov        rdi, qword [rax]
0000000000001fbb         mov        qword [rsp+0x178+var_150], rdi
0000000000001fc0         je         loc_25e5

0000000000001fc6         lea        rsi, qword [aLibs+10]                       ; argument "__s2" for method j_strcmp, 0x9f6a
0000000000001fcd         call       j_strcmp                                    ; strcmp
0000000000001fd2         test       eax, eax
0000000000001fd4         mov        dword [rsp+0x178+var_12C], eax
0000000000001fd8         jne        loc_26f0

0000000000001fde         lea        rsi, qword [aStandardInput]                 ; argument "msgid" for method j_dcgettext, "standard input"
0000000000001fe5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001fea         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001fec         mov        byte [have_read_stdin], 0x1                 ; have_read_stdin
0000000000001ff3         call       j_dcgettext                                 ; dcgettext
0000000000001ff8         mov        r13, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
0000000000001fff         mov        qword [rsp+0x178+var_150], rax

                     loc_2004:
0000000000002004         lea        rax, qword [rsp+0x178+var_E8]               ; CODE XREF=main+2903
000000000000200c         mov        qword [rsp+0x178+var_F0], 0x0
0000000000002018         mov        qword [rsp+0x178+var_E8], 0x0
0000000000002024         mov        byte [rsp+0x178+var_FE], 0x0
0000000000002029         mov        byte [rsp+0x178+var_128], 0x0
000000000000202e         mov        r12d, 0x1
0000000000002034         mov        qword [rsp+0x178+var_168], rax
0000000000002039         lea        rax, qword [rsp+0x178+var_F0]
0000000000002041         mov        qword [rsp+0x178+var_108], 0x0
000000000000204a         mov        qword [rsp+0x178+var_110], 0x0
0000000000002053         mov        qword [rsp+0x178+var_148], 0x0
000000000000205c         mov        qword [rsp+0x178+var_170], rax
0000000000002061         lea        rax, qword [rsp+0x178+var_E0]
0000000000002069         mov        qword [rsp+0x178+var_120], rax
000000000000206e         nop

                     loc_2070:
0000000000002070         mov        rsi, qword [rsp+0x178+var_168]              ; argument "__n" for method j___getdelim, CODE XREF=main+1650
0000000000002075         mov        rdi, qword [rsp+0x178+var_170]              ; argument "__lineptr" for method j___getdelim
000000000000207a         mov        rcx, r13                                    ; argument "__stream" for method j___getdelim
000000000000207d         mov        edx, 0xa                                    ; argument "__delimiter" for method j___getdelim
0000000000002082         call       j___getdelim                                ; __getdelim
0000000000002087         test       rax, rax
000000000000208a         jle        loc_24ad

0000000000002090         mov        rbp, qword [rsp+0x178+var_F0]
0000000000002098         movzx      ecx, byte [rbp]
000000000000209c         cmp        cl, 0x23
000000000000209f         je         loc_2213

00000000000020a5         cmp        byte [rbp+rax-1], 0xa
00000000000020aa         mov        r15, rax
00000000000020ad         jne        loc_20c5

00000000000020af         sub        r15, 0x1
00000000000020b3         mov        byte [rbp+r15], 0x0
00000000000020b9         mov        rbp, qword [rsp+0x178+var_F0]
00000000000020c1         movzx      ecx, byte [rbp]

                     loc_20c5:
00000000000020c5         cmp        cl, 0x20                                    ; CODE XREF=main+1277
00000000000020c8         je         loc_20d1

00000000000020ca         xor        edx, edx
00000000000020cc         cmp        cl, 0x9
00000000000020cf         jne        loc_20eb

                     loc_20d1:
00000000000020d1         xor        edx, edx                                    ; CODE XREF=main+1304
00000000000020d3         nop        dword [rax+rax]

                     loc_20d8:
00000000000020d8         add        rdx, 0x1                                    ; CODE XREF=main+1332, main+1337
00000000000020dc         movzx      ecx, byte [rbp+rdx]
00000000000020e1         cmp        cl, 0x20
00000000000020e4         je         loc_20d8

00000000000020e6         cmp        cl, 0x9
00000000000020e9         je         loc_20d8

                     loc_20eb:
00000000000020eb         cmp        cl, 0x5c                                    ; CODE XREF=main+1311
00000000000020ee         mov        byte [rsp+0x178+var_158], 0x0
00000000000020f3         jne        loc_20fe

00000000000020f5         add        rdx, 0x1
00000000000020f9         mov        byte [rsp+0x178+var_158], r14b

                     loc_20fe:
00000000000020fe         lea        r8, qword [rbp+rdx]                         ; CODE XREF=main+1347
0000000000002103         lea        rdi, qword [aBlake2]                        ; "BLAKE2"
000000000000210a         mov        ecx, 0x6
000000000000210f         mov        rsi, r8
0000000000002112         rep  cmpsb byte [rsi], byte [rdi]
0000000000002114         seta       al
0000000000002117         sbb        al, 0x0
0000000000002119         test       al, al
000000000000211b         jne        loc_2320

0000000000002121         lea        r9, qword [rdx+6]
0000000000002125         lea        r11, qword [rbp+r9]
000000000000212a         movzx      ebx, byte [r11]
000000000000212e         test       bl, bl
0000000000002130         je         loc_2192

0000000000002132         cmp        bl, 0x20
0000000000002135         je         loc_2665

000000000000213b         cmp        bl, 0x9
000000000000213e         je         loc_2665

0000000000002144         cmp        bl, 0x2d
0000000000002147         je         loc_2192

0000000000002149         cmp        bl, 0x28
000000000000214c         je         loc_26ad

0000000000002152         lea        rax, qword [rbp+rdx+7]
0000000000002157         jmp        loc_2184
0000000000002159         align      32

                     loc_2160:
0000000000002160         cmp        bl, 0x20                                    ; CODE XREF=main+1504
0000000000002163         je         loc_2665

0000000000002169         cmp        bl, 0x9
000000000000216c         je         loc_2665

0000000000002172         cmp        bl, 0x2d
0000000000002175         je         loc_2192

0000000000002177         add        rax, 0x1
000000000000217b         cmp        bl, 0x28
000000000000217e         je         loc_26ad

                     loc_2184:
0000000000002184         movzx      ebx, byte [rax]                             ; CODE XREF=main+1447
0000000000002187         add        r9, 0x1
000000000000218b         mov        r11, rax
000000000000218e         test       bl, bl
0000000000002190         jne        loc_2160

                     loc_2192:
0000000000002192         lea        rsi, qword [algorithm_out_string]           ; algorithm_out_string, CODE XREF=main+1408, main+1431, main+1477
0000000000002199         xor        ecx, ecx
000000000000219b         xor        edx, edx
000000000000219d         mov        byte [r11], 0x0
00000000000021a1         mov        rdi, r8
00000000000021a4         mov        qword [rsp+0x178+var_140], r9
00000000000021a9         call       argmatch                                    ; argmatch
00000000000021ae         test       rax, rax
00000000000021b1         mov        r9, qword [rsp+0x178+var_140]
00000000000021b6         js         loc_2200

00000000000021b8         add        r9, 0x1
00000000000021bc         mov        dword [b2_algorithm], eax                   ; b2_algorithm

                     loc_21c2:
00000000000021c2         cmp        bl, 0x2d                                    ; CODE XREF=main+2808
00000000000021c5         je         loc_2742

                     loc_21cb:
00000000000021cb         mov        qword [b2_length], 0x200                    ; b2_length, CODE XREF=main+2875
00000000000021d6         mov        eax, 0x80

                     loc_21db:
00000000000021db         mov        qword [digest_hex_bytes], rax               ; digest_hex_bytes, CODE XREF=main+3066
00000000000021e2         movzx      eax, byte [rbp+r9]
00000000000021e8         cmp        al, 0x20
00000000000021ea         jne        loc_21f6

00000000000021ec         movzx      eax, byte [rbp+r9+1]
00000000000021f2         add        r9, 0x1

                     loc_21f6:
00000000000021f6         cmp        al, 0x28                                    ; CODE XREF=main+1594
00000000000021f8         je         loc_285e

00000000000021fe         nop

                     loc_2200:
0000000000002200         add        qword [rsp+0x178+var_148], 0x1              ; CODE XREF=main+1542, main+1940, main+2009, main+2030, main+2038, main+2077, main+2101, main+2159, main+2777, main+2859, main+2991
0000000000002206         cmp        byte [warn], 0x0                            ; warn
000000000000220d         jne        loc_2460

                     loc_2213:
0000000000002213         test       byte [r13], 0x30                            ; CODE XREF=main+1263, main+4296
0000000000002218         jne        loc_24ad

                     loc_221e:
000000000000221e         add        r12, 0x1                                    ; CODE XREF=main+2295
0000000000002222         jne        loc_2070

0000000000002228         mov        rdx, qword [rsp+0x178+var_150]
000000000000222d         mov        esi, 0x3
0000000000002232         xor        edi, edi
0000000000002234         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000002239         lea        rsi, qword [aSTooManyChecks]                ; argument "msgid" for method j_dcgettext, "%s: too many checksum lines"
0000000000002240         mov        rbx, rax
0000000000002243         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002248         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000224a         call       j_dcgettext                                 ; dcgettext
000000000000224f         mov        rcx, rbx
0000000000002252         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002255         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002257         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000225c         xor        eax, eax
000000000000225e         call       j_error                                     ; error

                     loc_2263:
0000000000002263         test       r14b, r14b                                  ; CODE XREF=main+837
0000000000002266         je         loc_227b

0000000000002268         cmp        byte [rsp+0x178+var_100], 0x0
000000000000226d         mov        edx, 0x5
0000000000002272         lea        rsi, qword [aTheTagOptionIs]                ; "the --tag option is meaningless when verifying checksums"
0000000000002279         jne        loc_2290

                     loc_227b:
000000000000227b         test       ebp, ebp                                    ; CODE XREF=main+1718
000000000000227d         js         loc_22aa

000000000000227f         test       r14b, r14b
0000000000002282         mov        edx, 0x5
0000000000002287         lea        rsi, qword [aTheBinaryAndTe]                ; "the --binary and --text options are meaningless when verifying checksums"
000000000000228e         je         loc_22aa

                     loc_2290:
0000000000002290         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=main+858, main+918, main+1737, main+1858, main+1894, main+5156, main+5173, main+5190
0000000000002292         call       j_dcgettext                                 ; dcgettext
0000000000002297         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002299         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000229c         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000229e         xor        eax, eax
00000000000022a0         call       j_error                                     ; error
00000000000022a5         jmp        loc_1cda

                     loc_22aa:
00000000000022aa         cmp        byte [ignore_missing], 0x0                  ; ignore_missing, CODE XREF=main+1741, main+1758
00000000000022b1         je         loc_2fb2

00000000000022b7         test       r14b, r14b
00000000000022ba         je         loc_2fd9

00000000000022c0         cmp        byte [status_only], 0x0                     ; status_only
00000000000022c7         je         loc_28fd

00000000000022cd         cmp        byte [warn], 0x0                            ; warn
00000000000022d4         jne        loc_1f4c

                     loc_22da:
00000000000022da         cmp        byte [quiet], 0x1                           ; quiet, CODE XREF=main+897
00000000000022e1         jne        loc_22f4

00000000000022e3         test       r14b, r14b
00000000000022e6         mov        edx, 0x5
00000000000022eb         lea        rsi, qword [aTheQuietOption]                ; "the --quiet option is meaningful only when verifying checksums"
00000000000022f2         je         loc_2290

                     loc_22f4:
00000000000022f4         cmp        byte [strict], 0x0                          ; strict, CODE XREF=main+1841, main+3418
00000000000022fb         je         loc_1f4c

0000000000002301         test       r14b, r14b
0000000000002304         mov        edx, 0x5
0000000000002309         lea        rsi, qword [aTheStrictOptio]                ; "the --strict option is meaningful only when verifying checksums"
0000000000002310         jne        loc_1f4c

0000000000002316         jmp        loc_2290
000000000000231b         align      32

                     loc_2320:
0000000000002320         mov        rcx, r15                                    ; CODE XREF=main+1387
0000000000002323         mov        qword [rsp+0x178+var_138], rdx
0000000000002328         mov        qword [rsp+0x178+var_140], r8
000000000000232d         sub        rcx, rdx
0000000000002330         cmp        byte [r8], 0x5c
0000000000002334         sete       al
0000000000002337         movzx      eax, al
000000000000233a         add        rax, qword [min_digest_line_length]         ; min_digest_line_length
0000000000002341         cmp        rcx, rax
0000000000002344         jb         loc_2200

000000000000234a         mov        qword [digest_hex_bytes], 0x0               ; digest_hex_bytes
0000000000002355         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000235a         xor        r9d, r9d
000000000000235d         mov        rdi, qword [rax]
0000000000002360         mov        rdx, qword [rsp+0x178+var_138]
0000000000002365         xor        eax, eax
0000000000002367         mov        r8, qword [rsp+0x178+var_140]
000000000000236c         jmp        loc_2376
000000000000236e         align      16

                     loc_2370:
0000000000002370         mov        rax, rsi                                    ; CODE XREF=main+2004
0000000000002373         mov        r9d, r14d

                     loc_2376:
0000000000002376         movzx      ecx, byte [r8+rax]                          ; CODE XREF=main+1980
000000000000237b         lea        rsi, qword [rax+1]
000000000000237f         test       byte [rdi+rcx*2+1], 0x10
0000000000002384         jne        loc_2370

0000000000002386         test       r9b, r9b
0000000000002389         je         loc_2200

000000000000238f         lea        rcx, qword [rax-2]
0000000000002393         mov        qword [digest_hex_bytes], rax               ; digest_hex_bytes
000000000000239a         cmp        rcx, 0x7e
000000000000239e         ja         loc_2200

00000000000023a4         test       al, 0x1
00000000000023a6         jne        loc_2200

00000000000023ac         lea        rbx, qword [rdx+rax]
00000000000023b0         lea        rcx, qword [rax*4]
00000000000023b8         lea        rdx, qword [rbp+rbx]
00000000000023bd         mov        qword [b2_length], rcx                      ; b2_length
00000000000023c4         movzx      eax, byte [rdx]
00000000000023c7         cmp        al, 0x20
00000000000023c9         je         loc_23d3

00000000000023cb         cmp        al, 0x9
00000000000023cd         jne        loc_2200

                     loc_23d3:
00000000000023d3         mov        byte [rdx], 0x0                             ; CODE XREF=main+2073
00000000000023d6         mov        rdi, r8
00000000000023d9         mov        qword [rsp+0x178+var_140], r8
00000000000023de         call       hex_digits                                  ; hex_digits
00000000000023e3         test       al, al
00000000000023e5         je         loc_2200

00000000000023eb         lea        rax, qword [rbx+1]
00000000000023ef         mov        rcx, r15
00000000000023f2         mov        edx, dword [bsd_reversed]                   ; bsd_reversed
00000000000023f8         mov        r8, qword [rsp+0x178+var_140]
00000000000023fd         sub        rcx, rax
0000000000002400         sub        rcx, 0x1
0000000000002404         je         loc_241d

0000000000002406         movzx      ecx, byte [rbp+rbx+1]
000000000000240b         cmp        cl, 0x20
000000000000240e         je         loc_2f87

0000000000002414         cmp        cl, 0x2a
0000000000002417         je         loc_2f87

                     loc_241d:
000000000000241d         test       edx, edx                                    ; CODE XREF=main+2132
000000000000241f         je         loc_2200

0000000000002425         mov        dword [bsd_reversed], 0x1                   ; bsd_reversed

                     loc_242f:
000000000000242f         add        rbp, rax                                    ; CODE XREF=main+5082, main+5102
0000000000002432         cmp        byte [rsp+0x178+var_158], 0x0
0000000000002437         je         loc_2b81

000000000000243d         mov        rsi, r15
0000000000002440         mov        rdi, rbp
0000000000002443         mov        qword [rsp+0x178+var_158], r8
0000000000002448         sub        rsi, rax
000000000000244b         call       filename_unescape                           ; filename_unescape
0000000000002450         test       rax, rax
0000000000002453         mov        r8, qword [rsp+0x178+var_158]
0000000000002458         setne      al
000000000000245b         jmp        loc_2b79

                     loc_2460:
0000000000002460         mov        rdx, qword [rsp+0x178+var_150]              ; CODE XREF=main+1629
0000000000002465         xor        edi, edi
0000000000002467         mov        esi, 0x3
000000000000246c         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000002471         lea        rsi, qword [aSLuImproperlyF]                ; argument "msgid" for method j_dcgettext, "%s: %lu: improperly formatted %s checksum line"
0000000000002478         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000247a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000247f         mov        rbx, rax
0000000000002482         call       j_dcgettext                                 ; dcgettext
0000000000002487         lea        r9, qword [aBlake2]                         ; "BLAKE2"
000000000000248e         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002491         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002493         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002495         xor        eax, eax
0000000000002497         mov        r8, r12
000000000000249a         mov        rcx, rbx
000000000000249d         call       j_error                                     ; error
00000000000024a2         test       byte [r13], 0x30
00000000000024a7         je         loc_221e

                     loc_24ad:
00000000000024ad         mov        rdi, qword [rsp+0x178+var_F0]               ; argument "__ptr" for method j_free, CODE XREF=main+1242, main+1640
00000000000024b5         call       j_free                                      ; free
00000000000024ba         mov        ebx, dword [r13]
00000000000024be         and        ebx, 0x20
00000000000024c1         jne        loc_28be

00000000000024c7         cmp        dword [rsp+0x178+var_12C], 0x0
00000000000024cc         jne        loc_290f

                     loc_24d2:
00000000000024d2         cmp        byte [rsp+0x178+var_128], 0x0               ; CODE XREF=main+3433
00000000000024d7         je         loc_2924

00000000000024dd         cmp        byte [status_only], 0x0                     ; status_only
00000000000024e4         jne        loc_28ae

00000000000024ea         cmp        qword [rsp+0x178+var_148], 0x0
00000000000024f0         je         loc_2526

00000000000024f2         mov        r15, qword [rsp+0x178+var_148]
00000000000024f7         lea        rdx, qword [aWarningLuLines]                ; argument "__msgid2" for method j_dcngettext, "WARNING: %lu lines are improperly formatted"
00000000000024fe         lea        rsi, qword [aWarningLuLineI]                ; argument "__msgid1" for method j_dcngettext, "WARNING: %lu line is improperly formatted"
0000000000002505         xor        edi, edi                                    ; argument "__domainname" for method j_dcngettext
0000000000002507         mov        r8d, 0x5                                    ; argument "__category" for method j_dcngettext
000000000000250d         mov        rcx, r15                                    ; argument "__n" for method j_dcngettext
0000000000002510         call       j_dcngettext                                ; dcngettext
0000000000002515         mov        rcx, r15
0000000000002518         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000251b         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000251d         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000251f         xor        eax, eax
0000000000002521         call       j_error                                     ; error

                     loc_2526:
0000000000002526         cmp        qword [rsp+0x178+var_110], 0x0              ; CODE XREF=main+2368
000000000000252c         je         loc_2562

000000000000252e         mov        r15, qword [rsp+0x178+var_110]
0000000000002533         lea        rdx, qword [aWarningLuListe]                ; argument "__msgid2" for method j_dcngettext, "WARNING: %lu listed files could not be read"
000000000000253a         lea        rsi, qword [aWarningLuListe_9e10]           ; argument "__msgid1" for method j_dcngettext, "WARNING: %lu listed file could not be read"
0000000000002541         xor        edi, edi                                    ; argument "__domainname" for method j_dcngettext
0000000000002543         mov        r8d, 0x5                                    ; argument "__category" for method j_dcngettext
0000000000002549         mov        rcx, r15                                    ; argument "__n" for method j_dcngettext
000000000000254c         call       j_dcngettext                                ; dcngettext
0000000000002551         mov        rcx, r15
0000000000002554         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002557         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002559         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000255b         xor        eax, eax
000000000000255d         call       j_error                                     ; error

                     loc_2562:
0000000000002562         cmp        qword [rsp+0x178+var_108], 0x0              ; CODE XREF=main+2428
0000000000002568         je         loc_259e

000000000000256a         mov        r15, qword [rsp+0x178+var_108]
000000000000256f         lea        rdx, qword [aWarningLuCompu]                ; argument "__msgid2" for method j_dcngettext, "WARNING: %lu computed checksums did NOT match"
0000000000002576         lea        rsi, qword [aWarningLuCompu_9e70]           ; argument "__msgid1" for method j_dcngettext, "WARNING: %lu computed checksum did NOT match"
000000000000257d         xor        edi, edi                                    ; argument "__domainname" for method j_dcngettext
000000000000257f         mov        r8d, 0x5                                    ; argument "__category" for method j_dcngettext
0000000000002585         mov        rcx, r15                                    ; argument "__n" for method j_dcngettext
0000000000002588         call       j_dcngettext                                ; dcngettext
000000000000258d         mov        rcx, r15
0000000000002590         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002593         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002595         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002597         xor        eax, eax
0000000000002599         call       j_error                                     ; error

                     loc_259e:
000000000000259e         cmp        byte [ignore_missing], 0x0                  ; ignore_missing, CODE XREF=main+2488
00000000000025a5         je         loc_28ae

00000000000025ab         cmp        byte [rsp+0x178+var_FE], 0x0
00000000000025b0         je         loc_2c7d

                     loc_25b6:
00000000000025b6         mov        rax, qword [rsp+0x178+var_110]              ; CODE XREF=main+3331
00000000000025bb         or         rax, qword [rsp+0x178+var_108]
00000000000025c0         jne        loc_25da

00000000000025c2         movzx      eax, byte [strict]                          ; strict
00000000000025c9         xor        eax, 0x1
00000000000025cc         cmp        qword [rsp+0x178+var_148], 0x0
00000000000025d2         sete       bl
00000000000025d5         or         eax, ebx
00000000000025d7         movzx      ebx, al

                     loc_25da:
00000000000025da         mov        eax, ebx                                    ; CODE XREF=main+2576, main+3337, main+3507, main+4357
00000000000025dc         and        eax, 0x1

                     loc_25df:
00000000000025df         and        byte [rsp+0x178+var_FF], al                 ; CODE XREF=main+2957, main+3400
00000000000025e3         jmp        loc_260e

                     loc_25e5:
00000000000025e5         lea        rbx, qword [rsp+0x178+var_D8]               ; CODE XREF=main+1040
00000000000025ed         mov        rdi, qword [rsp+0x178+var_150]
00000000000025f2         lea        rdx, qword [rsp+0x178+var_E0]
00000000000025fa         mov        rsi, rbx
00000000000025fd         call       digest_file.isra.1                          ; digest_file.isra.1
0000000000002602         test       al, al
0000000000002604         jne        loc_27af

                     loc_260a:
000000000000260a         mov        byte [rsp+0x178+var_FF], al                 ; CODE XREF=main+3241, main+4857

                     loc_260e:
000000000000260e         add        qword [rsp+0x178+var_160], 0x8              ; CODE XREF=main+2611
0000000000002614         mov        rax, qword [rsp+0x178+var_160]
0000000000002619         cmp        qword [rsp+0x178+var_118], rax
000000000000261e         ja         loc_1fb0

                     loc_2624:
0000000000002624         cmp        byte [have_read_stdin], 0x0                 ; have_read_stdin, CODE XREF=main+4815
000000000000262b         jne        loc_2a7e

                     loc_2631:
0000000000002631         movzx      eax, byte [rsp+0x178+var_FF]                ; CODE XREF=main+3805
0000000000002636         xor        eax, 0x1
0000000000002639         mov        rsi, qword [rsp+0x178+var_40]
0000000000002641         xor        rsi, qword [fs:0x28]
000000000000264a         movzx      eax, al
000000000000264d         jne        loc_2f82

0000000000002653         add        rsp, 0x148
000000000000265a         pop        rbx
000000000000265b         pop        rbp
000000000000265c         pop        r12
000000000000265e         pop        r13
0000000000002660         pop        r14
0000000000002662         pop        r15
0000000000002664         ret
                        ; endp

                     loc_2665:
0000000000002665         lea        rsi, qword [algorithm_out_string]           ; algorithm_out_string, CODE XREF=main+1413, main+1422, main+1459, main+1468
000000000000266c         xor        ecx, ecx
000000000000266e         xor        edx, edx
0000000000002670         mov        byte [r11], 0x0
0000000000002674         mov        rdi, r8
0000000000002677         mov        qword [rsp+0x178+var_138], r9
000000000000267c         mov        qword [rsp+0x178+var_140], r11
0000000000002681         call       argmatch                                    ; argmatch
0000000000002686         test       rax, rax
0000000000002689         js         loc_2200

000000000000268f         cmp        bl, 0x28
0000000000002692         mov        dword [b2_algorithm], eax                   ; b2_algorithm
0000000000002698         mov        r11, qword [rsp+0x178+var_140]
000000000000269d         mov        r9, qword [rsp+0x178+var_138]
00000000000026a2         je         loc_26e7

00000000000026a4         add        r9, 0x1
00000000000026a8         jmp        loc_21c2

                     loc_26ad:
00000000000026ad         lea        rsi, qword [algorithm_out_string]           ; algorithm_out_string, CODE XREF=main+1436, main+1486
00000000000026b4         mov        byte [r11], 0x0
00000000000026b8         xor        ecx, ecx
00000000000026ba         xor        edx, edx
00000000000026bc         mov        rdi, r8
00000000000026bf         mov        qword [rsp+0x178+var_138], r9
00000000000026c4         mov        qword [rsp+0x178+var_140], r11
00000000000026c9         call       argmatch                                    ; argmatch
00000000000026ce         test       rax, rax
00000000000026d1         mov        r11, qword [rsp+0x178+var_140]
00000000000026d6         mov        r9, qword [rsp+0x178+var_138]
00000000000026db         js         loc_2200

00000000000026e1         mov        dword [b2_algorithm], eax                   ; b2_algorithm

                     loc_26e7:
00000000000026e7         mov        byte [r11], 0x28                            ; CODE XREF=main+2802
00000000000026eb         jmp        loc_21cb

                     loc_26f0:
00000000000026f0         mov        rdi, qword [rsp+0x178+var_150]              ; CODE XREF=main+1064
00000000000026f5         lea        rsi, qword [aSReadError+13]                 ; 0x9374
00000000000026fc         call       fopen_safer                                 ; fopen_safer
0000000000002701         test       rax, rax
0000000000002704         mov        r13, rax
0000000000002707         jne        loc_2004

                     loc_270d:
000000000000270d         mov        rdx, qword [rsp+0x178+var_150]              ; CODE XREF=main+3439
0000000000002712         mov        esi, 0x3
0000000000002717         xor        edi, edi
0000000000002719         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
000000000000271e         mov        rbx, rax
0000000000002721         call       j___errno_location                          ; __errno_location
0000000000002726         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002728         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x9f0c
000000000000272f         xor        eax, eax
0000000000002731         mov        rcx, rbx
0000000000002734         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002736         call       j_error                                     ; error
000000000000273b         xor        eax, eax
000000000000273d         jmp        loc_25df

                     loc_2742:
0000000000002742         mov        rcx, qword [rsp+0x178+var_120]              ; CODE XREF=main+1557
0000000000002747         lea        rdi, qword [rbp+r9]
000000000000274c         xor        r8d, r8d
000000000000274f         xor        edx, edx
0000000000002751         xor        esi, esi
0000000000002753         mov        qword [rsp+0x178+var_140], r9
0000000000002758         call       xstrtoul                                    ; xstrtoul
000000000000275d         test       eax, eax
000000000000275f         jne        loc_2200

0000000000002765         mov        rax, qword [rsp+0x178+var_E0]
000000000000276d         mov        r9, qword [rsp+0x178+var_140]
0000000000002772         lea        rdx, qword [rax-1]
0000000000002776         cmp        rdx, 0x1ff
000000000000277d         ja         loc_2200

0000000000002783         test       al, 0x7
0000000000002785         jne        loc_2200

000000000000278b         mov        qword [b2_length], rax                      ; b2_length
0000000000002792         jmp        loc_2798

                     loc_2794:
0000000000002794         add        r9, 0x1                                     ; CODE XREF=main+3060

                     loc_2798:
0000000000002798         movsx      edx, byte [rbp+r9]                          ; CODE XREF=main+3042
000000000000279e         sub        edx, 0x30
00000000000027a1         cmp        edx, 0x9
00000000000027a4         jbe        loc_2794

00000000000027a6         shr        rax, 0x2
00000000000027aa         jmp        loc_21db

                     loc_27af:
00000000000027af         mov        rdi, qword [rsp+0x178+var_150]              ; argument "__s" for method j_strchr, CODE XREF=main+2644
00000000000027b4         mov        esi, 0x5c                                   ; argument "__c" for method j_strchr
00000000000027b9         call       j_strchr                                    ; strchr
00000000000027be         test       rax, rax
00000000000027c1         je         loc_2aff

                     loc_27c7:
00000000000027c7         cmp        byte [delim], 0xa                           ; delim, CODE XREF=main+3937
00000000000027ce         je         loc_2abf

                     loc_27d4:
00000000000027d4         cmp        byte [rsp+0x178+var_100], 0x0               ; CODE XREF=main+3943
00000000000027d9         jne        loc_2968

00000000000027df         mov        rax, qword [digest_hex_bytes]               ; digest_hex_bytes
00000000000027e6         xor        ebp, ebp
00000000000027e8         shr        rax, 0x1
00000000000027eb         je         loc_2a28

                     loc_27f1:
00000000000027f1         xor        r12d, r12d                                  ; CODE XREF=main+3698, main+4407
00000000000027f4         nop        dword [rax]

                     loc_27f8:
00000000000027f8         movzx      edx, byte [rbx+r12]                         ; CODE XREF=main+3185
00000000000027fd         lea        rsi, qword [aSNoFileWasVeri+38]             ; 0x939c
0000000000002804         xor        eax, eax
0000000000002806         mov        edi, 0x1
000000000000280b         add        r12, 0x1
000000000000280f         call       j___printf_chk                              ; __printf_chk
0000000000002814         mov        rax, qword [digest_hex_bytes]               ; digest_hex_bytes
000000000000281b         shr        rax, 0x1
000000000000281e         cmp        rax, r12
0000000000002821         ja         loc_27f8

                     loc_2823:
0000000000002823         cmp        byte [rsp+0x178+var_100], 0x0               ; CODE XREF=main+4413
0000000000002828         je         loc_2a28

                     loc_282e:
000000000000282e         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=main+3785
0000000000002835         movzx      edx, byte [delim]                           ; delim
000000000000283c         mov        rax, qword [rdi+0x28]
0000000000002840         cmp        rax, qword [rdi+0x30]
0000000000002844         jae        loc_2e9c

000000000000284a         lea        rcx, qword [rax+1]
000000000000284e         mov        qword [rdi+0x28], rcx
0000000000002852         mov        byte [rax], dl
0000000000002854         movzx      eax, byte [rsp+0x178+var_FF]
0000000000002859         jmp        loc_260a

                     loc_285e:
000000000000285e         add        r9, 0x1                                     ; CODE XREF=main+1608
0000000000002862         mov        r10, r15
0000000000002865         sub        r10, r9
0000000000002868         je         loc_2200

000000000000286e         mov        r11, r10
0000000000002871         add        rbp, r9
0000000000002874         sub        r11, 0x1
0000000000002878         je         loc_2899

000000000000287a         cmp        byte [rbp+r10-1], 0x29
0000000000002880         jne        loc_2893

0000000000002882         jmp        loc_2b1c

                     loc_2887:
0000000000002887         cmp        byte [rbp+r11], 0x29                        ; CODE XREF=main+3303
000000000000288d         je         loc_2b1c

                     loc_2893:
0000000000002893         sub        r11, 0x1                                    ; CODE XREF=main+3280
0000000000002897         jne        loc_2887

                     loc_2899:
0000000000002899         cmp        byte [rbp], 0x29                            ; CODE XREF=main+3272
000000000000289d         jne        loc_2200

00000000000028a3         mov        r10, rbp
00000000000028a6         xor        r11d, r11d
00000000000028a9         jmp        loc_2b21

                     loc_28ae:
00000000000028ae         cmp        byte [rsp+0x178+var_FE], 0x0                ; CODE XREF=main+2356, main+2549
00000000000028b3         jne        loc_25b6

00000000000028b9         jmp        loc_25da

                     loc_28be:
00000000000028be         mov        rdx, qword [rsp+0x178+var_150]              ; CODE XREF=main+2321
00000000000028c3         mov        esi, 0x3
00000000000028c8         xor        edi, edi
00000000000028ca         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000028cf         lea        rsi, qword [aSReadError]                    ; argument "msgid" for method j_dcgettext, "%s: read error"
00000000000028d6         mov        rbx, rax
00000000000028d9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000028de         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000028e0         call       j_dcgettext                                 ; dcgettext
00000000000028e5         mov        rcx, rbx
00000000000028e8         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000028eb         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000028ed         xor        eax, eax
00000000000028ef         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000028f1         call       j_error                                     ; error
00000000000028f6         xor        eax, eax
00000000000028f8         jmp        loc_25df

                     loc_28fd:
00000000000028fd         cmp        byte [warn], 0x0                            ; warn, CODE XREF=main+1815, main+5138
0000000000002904         jne        loc_1f4c

000000000000290a         jmp        loc_22f4

                     loc_290f:
000000000000290f         mov        rdi, r13                                    ; CODE XREF=main+2332
0000000000002912         call       rpl_fclose                                  ; rpl_fclose
0000000000002917         test       eax, eax
0000000000002919         je         loc_24d2

000000000000291f         jmp        loc_270d

                     loc_2924:
0000000000002924         mov        rdx, qword [rsp+0x178+var_150]              ; CODE XREF=main+2343
0000000000002929         xor        edi, edi
000000000000292b         mov        esi, 0x3
0000000000002930         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000002935         lea        rsi, qword [aSNoProperlyFor]                ; argument "msgid" for method j_dcgettext, "%s: no properly formatted %s checksum lines found"
000000000000293c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000293e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002943         mov        rbp, rax
0000000000002946         call       j_dcgettext                                 ; dcgettext
000000000000294b         lea        r8, qword [aBlake2]                         ; "BLAKE2"
0000000000002952         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002955         mov        rcx, rbp
0000000000002958         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000295a         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000295c         xor        eax, eax
000000000000295e         call       j_error                                     ; error
0000000000002963         jmp        loc_25da

                     loc_2968:
0000000000002968         xor        r12d, r12d                                  ; CODE XREF=main+3113
000000000000296b         xor        ebp, ebp

                     loc_296d:
000000000000296d         mov        eax, dword [b2_algorithm]                   ; b2_algorithm, CODE XREF=main+3914, main+4439
0000000000002973         lea        rsi, qword [algorithm_out_string]           ; algorithm_out_string
000000000000297a         mov        rdi, qword [rsi+rax*8]                      ; argument "__s" for method j_fputs_unlocked
000000000000297e         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5
0000000000002985         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000298a         mov        rdx, qword [b2_length]                      ; b2_length
0000000000002991         cmp        rdx, 0x1ff
0000000000002998         jbe        loc_2e84

                     loc_299e:
000000000000299e         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=main+4839
00000000000029a5         lea        rdi, qword [aSNoFileWasVeri+30]             ; argument "__ptr" for method j_fwrite_unlocked, 0x9394
00000000000029ac         mov        edx, 0x2                                    ; argument "__n" for method j_fwrite_unlocked
00000000000029b1         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
00000000000029b6         call       j_fwrite_unlocked                           ; fwrite_unlocked
00000000000029bb         mov        rdi, qword [rsp+0x178+var_150]
00000000000029c0         mov        esi, ebp
00000000000029c2         call       print_filename                              ; print_filename
00000000000029c7         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5
00000000000029ce         lea        rdi, qword [aSNoFileWasVeri+33]             ; argument "__ptr" for method j_fwrite_unlocked, 0x9397
00000000000029d5         mov        edx, 0x4                                    ; argument "__n" for method j_fwrite_unlocked
00000000000029da         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
00000000000029df         call       j_fwrite_unlocked                           ; fwrite_unlocked
00000000000029e4         cmp        byte [rsp+0x178+var_100], 0x0
00000000000029e9         jne        loc_2cdd

00000000000029ef         test       r12b, r12b
00000000000029f2         je         loc_2cdd

                     loc_29f8:
00000000000029f8         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=main+3865
00000000000029ff         mov        rax, qword [rdi+0x28]
0000000000002a03         cmp        rax, qword [rdi+0x30]
0000000000002a07         jae        loc_2cd3

0000000000002a0d         lea        rdx, qword [rax+1]
0000000000002a11         mov        qword [rdi+0x28], rdx
0000000000002a15         mov        byte [rax], 0x5c
0000000000002a18         mov        rax, qword [digest_hex_bytes]               ; digest_hex_bytes
0000000000002a1f         shr        rax, 0x1
0000000000002a22         jne        loc_27f1

                     loc_2a28:
0000000000002a28         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=main+3131, main+3192
0000000000002a2f         mov        rax, qword [rdi+0x28]
0000000000002a33         cmp        qword [rdi+0x30], rax
0000000000002a37         jbe        loc_2ed3

0000000000002a3d         lea        rdx, qword [rax+1]
0000000000002a41         mov        qword [rdi+0x28], rdx
0000000000002a45         mov        byte [rax], 0x20

                     loc_2a48:
0000000000002a48         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=main+4909
0000000000002a4f         mov        rax, qword [rdi+0x28]
0000000000002a53         cmp        rax, qword [rdi+0x30]
0000000000002a57         jae        loc_2ec5

0000000000002a5d         movzx      esi, byte [rsp+0x178+var_FD]
0000000000002a62         lea        rdx, qword [rax+1]
0000000000002a66         mov        qword [rdi+0x28], rdx
0000000000002a6a         mov        byte [rax], sil

                     loc_2a6d:
0000000000002a6d         mov        rdi, qword [rsp+0x178+var_150]              ; CODE XREF=main+4894
0000000000002a72         mov        esi, ebp
0000000000002a74         call       print_filename                              ; print_filename
0000000000002a79         jmp        loc_282e

                     loc_2a7e:
0000000000002a7e         mov        rdi, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5, CODE XREF=main+2683
0000000000002a85         call       rpl_fclose                                  ; rpl_fclose
0000000000002a8a         add        eax, 0x1
0000000000002a8d         jne        loc_2631

0000000000002a93         lea        rsi, qword [aStandardInput]                 ; argument "msgid" for method j_dcgettext, "standard input"
0000000000002a9a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002a9f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002aa1         call       j_dcgettext                                 ; dcgettext
0000000000002aa6         mov        rbx, rax
0000000000002aa9         call       j___errno_location                          ; __errno_location
0000000000002aae         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002ab0         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000002ab3         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002ab8         xor        eax, eax
0000000000002aba         call       j_error                                     ; error

                     loc_2abf:
0000000000002abf         cmp        byte [rsp+0x178+var_100], 0x0               ; CODE XREF=main+3102
0000000000002ac4         mov        ebp, 0x1
0000000000002ac9         je         loc_29f8

0000000000002acf         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002ad6         mov        rax, qword [rdi+0x28]
0000000000002ada         cmp        rax, qword [rdi+0x30]
0000000000002ade         jae        loc_2cf2

0000000000002ae4         lea        rdx, qword [rax+1]
0000000000002ae8         movzx      r12d, byte [rsp+0x178+var_100]
0000000000002aee         mov        ebp, 0x1
0000000000002af3         mov        qword [rdi+0x28], rdx
0000000000002af7         mov        byte [rax], 0x5c
0000000000002afa         jmp        loc_296d

                     loc_2aff:
0000000000002aff         mov        rdi, qword [rsp+0x178+var_150]              ; argument "__s" for method j_strchr, CODE XREF=main+3089
0000000000002b04         mov        esi, 0xa                                    ; argument "__c" for method j_strchr
0000000000002b09         call       j_strchr                                    ; strchr
0000000000002b0e         test       rax, rax
0000000000002b11         jne        loc_27c7

0000000000002b17         jmp        loc_27d4

                     loc_2b1c:
0000000000002b1c         lea        r10, qword [rbp+r11]                        ; CODE XREF=main+3282, main+3293

                     loc_2b21:
0000000000002b21         cmp        byte [rsp+0x178+var_158], 0x0               ; CODE XREF=main+3321
0000000000002b26         jne        loc_2cba

                     loc_2b2c:
0000000000002b2c         add        r11, 0x1                                    ; CODE XREF=main+4376
0000000000002b30         mov        byte [r10], 0x0
0000000000002b34         jmp        loc_2b3a

                     loc_2b36:
0000000000002b36         add        r11, 0x1                                    ; CODE XREF=main+3986, main+3990

                     loc_2b3a:
0000000000002b3a         movzx      eax, byte [rbp+r11]                         ; CODE XREF=main+3972
0000000000002b40         cmp        al, 0x20
0000000000002b42         je         loc_2b36

0000000000002b44         cmp        al, 0x9
0000000000002b46         je         loc_2b36

0000000000002b48         cmp        al, 0x3d
0000000000002b4a         jne        loc_2200

0000000000002b50         lea        rdx, qword [rbp+r11+1]

                     loc_2b55:
0000000000002b55         movzx      eax, byte [rdx]                             ; CODE XREF=main+4017, main+4021
0000000000002b58         mov        r8, rdx
0000000000002b5b         lea        rdx, qword [rdx+1]
0000000000002b5f         cmp        al, 0x20
0000000000002b61         je         loc_2b55

0000000000002b63         cmp        al, 0x9
0000000000002b65         je         loc_2b55

0000000000002b67         mov        rdi, r8
0000000000002b6a         mov        qword [rsp+0x178+var_158], r8
0000000000002b6f         call       hex_digits                                  ; hex_digits
0000000000002b74         mov        r8, qword [rsp+0x178+var_158]

                     loc_2b79:
0000000000002b79         test       al, al                                      ; CODE XREF=main+2219
0000000000002b7b         je         loc_2200

                     loc_2b81:
0000000000002b81         mov        eax, dword [rsp+0x178+var_12C]              ; CODE XREF=main+2183
0000000000002b85         test       eax, eax
0000000000002b87         jne        loc_2ba7

0000000000002b89         lea        rdi, qword [aLibs+10]                       ; 0x9f6a
0000000000002b90         mov        ecx, 0x2
0000000000002b95         mov        rsi, rbp
0000000000002b98         rep  cmpsb byte [rsi], byte [rdi]
0000000000002b9a         seta       al
0000000000002b9d         sbb        al, 0x0
0000000000002b9f         test       al, al
0000000000002ba1         je         loc_2200

                     loc_2ba7:
0000000000002ba7         cmp        byte [status_only], 0x0                     ; status_only, CODE XREF=main+4055
0000000000002bae         mov        dword [rsp+0x178+var_158], 0x0
0000000000002bb6         jne        loc_2bdc

0000000000002bb8         mov        esi, 0xa                                    ; argument "__c" for method j_strchr
0000000000002bbd         mov        rdi, rbp                                    ; argument "__s" for method j_strchr
0000000000002bc0         mov        qword [rsp+0x178+var_140], r8
0000000000002bc5         call       j_strchr                                    ; strchr
0000000000002bca         test       rax, rax
0000000000002bcd         mov        r8, qword [rsp+0x178+var_140]
0000000000002bd2         setne      al
0000000000002bd5         movzx      eax, al
0000000000002bd8         mov        dword [rsp+0x178+var_158], eax

                     loc_2bdc:
0000000000002bdc         lea        rbx, qword [rsp+0x178+var_88]               ; CODE XREF=main+4102
0000000000002be4         mov        rdx, qword [rsp+0x178+var_120]
0000000000002be9         mov        rdi, rbp
0000000000002bec         mov        qword [rsp+0x178+var_140], r8
0000000000002bf1         mov        rsi, rbx
0000000000002bf4         call       digest_file.isra.1                          ; digest_file.isra.1
0000000000002bf9         test       al, al
0000000000002bfb         mov        edi, eax
0000000000002bfd         mov        r8, qword [rsp+0x178+var_140]
0000000000002c02         jne        loc_2d10

0000000000002c08         add        qword [rsp+0x178+var_110], 0x1
0000000000002c0e         cmp        byte [status_only], 0x0                     ; status_only
0000000000002c15         jne        loc_2c73

0000000000002c17         cmp        dword [rsp+0x178+var_158], 0x0
0000000000002c1c         je         loc_2c3e

0000000000002c1e         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002c25         mov        rax, qword [rdi+0x28]
0000000000002c29         cmp        rax, qword [rdi+0x30]
0000000000002c2d         jae        loc_2eb6

0000000000002c33         lea        rdx, qword [rax+1]
0000000000002c37         mov        qword [rdi+0x28], rdx
0000000000002c3b         mov        byte [rax], 0x5c

                     loc_2c3e:
0000000000002c3e         mov        esi, dword [rsp+0x178+var_158]              ; CODE XREF=main+4204, main+4880
0000000000002c42         mov        rdi, rbp
0000000000002c45         call       print_filename                              ; print_filename
0000000000002c4a         lea        rsi, qword [aFailedOpenOrRe]                ; "FAILED open or read"
0000000000002c51         mov        edx, 0x5

                     loc_2c56:
0000000000002c56         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=main+4654, main+4805
0000000000002c58         call       j_dcgettext                                 ; dcgettext
0000000000002c5d         lea        rsi, qword [aSn]                            ; ": %s\\n"
0000000000002c64         mov        rdx, rax
0000000000002c67         mov        edi, 0x1
0000000000002c6c         xor        eax, eax
0000000000002c6e         call       j___printf_chk                              ; __printf_chk

                     loc_2c73:
0000000000002c73         mov        byte [rsp+0x178+var_128], r14b              ; CODE XREF=main+4197, main+4465, main+4619, main+4675, main+4694, main+4787
0000000000002c78         jmp        loc_2213

                     loc_2c7d:
0000000000002c7d         mov        rdx, qword [rsp+0x178+var_150]              ; CODE XREF=main+2560
0000000000002c82         xor        edi, edi
0000000000002c84         mov        esi, 0x3
0000000000002c89         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000002c8e         lea        rsi, qword [aSNoFileWasVeri]                ; argument "msgid" for method j_dcgettext, "%s: no file was verified"
0000000000002c95         mov        rbp, rax
0000000000002c98         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002c9a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002c9f         call       j_dcgettext                                 ; dcgettext
0000000000002ca4         mov        rcx, rbp
0000000000002ca7         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002caa         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002cac         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002cae         xor        eax, eax
0000000000002cb0         call       j_error                                     ; error
0000000000002cb5         jmp        loc_25da

                     loc_2cba:
0000000000002cba         mov        rsi, r11                                    ; CODE XREF=main+3958
0000000000002cbd         mov        rdi, rbp
0000000000002cc0         call       filename_unescape                           ; filename_unescape
0000000000002cc5         test       rax, rax
0000000000002cc8         jne        loc_2b2c

0000000000002cce         jmp        loc_2200

                     loc_2cd3:
0000000000002cd3         mov        esi, 0x5c                                   ; argument #2 for method j___overflow, CODE XREF=main+3671
0000000000002cd8         call       j___overflow                                ; __overflow

                     loc_2cdd:
0000000000002cdd         mov        rax, qword [digest_hex_bytes]               ; digest_hex_bytes, CODE XREF=main+3641, main+3650
0000000000002ce4         shr        rax, 0x1
0000000000002ce7         jne        loc_27f1

0000000000002ced         jmp        loc_2823

                     loc_2cf2:
0000000000002cf2         mov        esi, 0x5c                                   ; argument #2 for method j___overflow, CODE XREF=main+3886
0000000000002cf7         mov        ebp, 0x1
0000000000002cfc         call       j___overflow                                ; __overflow
0000000000002d01         movzx      r12d, byte [rsp+0x178+var_100]
0000000000002d07         jmp        loc_296d
0000000000002d0c         align      16

                     loc_2d10:
0000000000002d10         cmp        byte [ignore_missing], 0x0                  ; ignore_missing, CODE XREF=main+4178
0000000000002d17         je         loc_2d27

0000000000002d19         cmp        byte [rsp+0x178+var_E0], 0x0
0000000000002d21         jne        loc_2c73

                     loc_2d27:
0000000000002d27         mov        rdx, qword [digest_hex_bytes]               ; digest_hex_bytes, CODE XREF=main+4455
0000000000002d2e         mov        qword [rsp+0x178+var_128], r8
0000000000002d33         shr        rdx, 0x1
0000000000002d36         je         loc_2eae

0000000000002d3c         mov        qword [rsp+0x178+var_138], rdx
0000000000002d41         mov        byte [rsp+0x178+var_140], dil
0000000000002d46         xor        r15d, r15d
0000000000002d49         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
0000000000002d4e         movzx      edi, byte [rsp+0x178+var_140]
0000000000002d53         mov        r9, qword [rax]
0000000000002d56         mov        rdx, qword [rsp+0x178+var_138]
0000000000002d5b         mov        r8, qword [rsp+0x178+var_128]
0000000000002d60         jmp        loc_2d85
0000000000002d62         align      8

                     loc_2d68:
0000000000002d68         movzx      ecx, byte [r8+r15*2+1]                      ; CODE XREF=main+4599
0000000000002d6e         and        eax, 0xf
0000000000002d71         movsx      eax, byte [r10+rax]
0000000000002d76         cmp        dword [r9+rcx*4], eax
0000000000002d7a         jne        loc_2da9

0000000000002d7c         add        r15, 0x1
0000000000002d80         cmp        rdx, r15
0000000000002d83         je         loc_2de3

                     loc_2d85:
0000000000002d85         movzx      eax, byte [rbx+r15]                         ; CODE XREF=main+4528
0000000000002d8a         movzx      esi, byte [r8+r15*2]
0000000000002d8f         lea        r10, qword [bin2hex.7139]                   ; "0123456789abcdef8.31"
0000000000002d96         mov        ecx, eax
0000000000002d98         shr        cl, 0x4
0000000000002d9b         and        ecx, 0xf
0000000000002d9e         movsx      ecx, byte [r10+rcx]
0000000000002da3         cmp        dword [r9+rsi*4], ecx
0000000000002da7         je         loc_2d68

                     loc_2da9:
0000000000002da9         cmp        rdx, r15                                    ; CODE XREF=main+4554
0000000000002dac         je         loc_2de3

0000000000002dae         add        qword [rsp+0x178+var_108], 0x1
0000000000002db4         cmp        byte [status_only], 0x0                     ; status_only
0000000000002dbb         jne        loc_2c73

0000000000002dc1         cmp        dword [rsp+0x178+var_158], 0x0
0000000000002dc6         jne        loc_2e1c

0000000000002dc8         xor        esi, esi
0000000000002dca         mov        rdi, rbp
0000000000002dcd         call       print_filename                              ; print_filename

                     loc_2dd2:
0000000000002dd2         mov        edx, 0x5                                    ; CODE XREF=main+4774
0000000000002dd7         lea        rsi, qword [aFailed]                        ; "FAILED"
0000000000002dde         jmp        loc_2c56

                     loc_2de3:
0000000000002de3         mov        r15, rdx                                    ; CODE XREF=main+4563, main+4604

                     loc_2de6:
0000000000002de6         movzx      eax, byte [status_only]                     ; status_only, CODE XREF=main+4865
0000000000002ded         test       al, al
0000000000002def         mov        byte [rsp+0x178+var_FE], al
0000000000002df3         jne        loc_2c73

0000000000002df9         movzx      eax, byte [quiet]                           ; quiet
0000000000002e00         test       al, al
0000000000002e02         mov        byte [rsp+0x178+var_FE], al
0000000000002e06         jne        loc_2c73

0000000000002e0c         cmp        dword [rsp+0x178+var_158], 0x0
0000000000002e11         mov        byte [rsp+0x178+var_FE], dil
0000000000002e16         je         loc_2fa3

                     loc_2e1c:
0000000000002e1c         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=main+4630
0000000000002e23         mov        rax, qword [rdi+0x28]
0000000000002e27         cmp        rax, qword [rdi+0x30]
0000000000002e2b         jae        loc_2ee2

0000000000002e31         lea        rcx, qword [rax+1]
0000000000002e35         mov        qword [rdi+0x28], rcx
0000000000002e39         mov        byte [rax], 0x5c

                     loc_2e3c:
0000000000002e3c         mov        esi, 0x1                                    ; CODE XREF=main+4934
0000000000002e41         mov        rdi, rbp
0000000000002e44         mov        qword [rsp+0x178+var_158], rdx
0000000000002e49         call       print_filename                              ; print_filename
0000000000002e4e         mov        rdx, qword [rsp+0x178+var_158]
0000000000002e53         cmp        rdx, r15
0000000000002e56         jne        loc_2dd2

                     loc_2e5c:
0000000000002e5c         cmp        byte [quiet], 0x0                           ; quiet, CODE XREF=main+5117
0000000000002e63         jne        loc_2c73

0000000000002e69         mov        edx, 0x5
0000000000002e6e         lea        rsi, qword [aFailed+7]                      ; 0x9364
0000000000002e75         jmp        loc_2c56

                     loc_2e7a:
0000000000002e7a         mov        byte [rsp+0x178+var_FF], 0x1                ; CODE XREF=main+994
0000000000002e7f         jmp        loc_2624

                     loc_2e84:
0000000000002e84         lea        rsi, qword [aSNoFileWasVeri+25]             ; 0x938f, CODE XREF=main+3560
0000000000002e8b         mov        edi, 0x1
0000000000002e90         xor        eax, eax
0000000000002e92         call       j___printf_chk                              ; __printf_chk
0000000000002e97         jmp        loc_299e

                     loc_2e9c:
0000000000002e9c         movzx      esi, dl                                     ; argument #2 for method j___overflow, CODE XREF=main+3220
0000000000002e9f         call       j___overflow                                ; __overflow
0000000000002ea4         movzx      eax, byte [rsp+0x178+var_FF]
0000000000002ea9         jmp        loc_260a

                     loc_2eae:
0000000000002eae         xor        r15d, r15d                                  ; CODE XREF=main+4486
0000000000002eb1         jmp        loc_2de6

                     loc_2eb6:
0000000000002eb6         mov        esi, 0x5c                                   ; argument #2 for method j___overflow, CODE XREF=main+4221
0000000000002ebb         call       j___overflow                                ; __overflow
0000000000002ec0         jmp        loc_2c3e

                     loc_2ec5:
0000000000002ec5         mov        esi, dword [rsp+0x178+var_FC]               ; argument #2 for method j___overflow, CODE XREF=main+3751
0000000000002ec9         call       j___overflow                                ; __overflow
0000000000002ece         jmp        loc_2a6d

                     loc_2ed3:
0000000000002ed3         mov        esi, 0x20                                   ; argument #2 for method j___overflow, CODE XREF=main+3719
0000000000002ed8         call       j___overflow                                ; __overflow
0000000000002edd         jmp        loc_2a48

                     loc_2ee2:
0000000000002ee2         mov        esi, 0x5c                                   ; argument #2 for method j___overflow, CODE XREF=main+4731
0000000000002ee7         mov        qword [rsp+0x178+var_158], rdx
0000000000002eec         call       j___overflow                                ; __overflow
0000000000002ef1         mov        rdx, qword [rsp+0x178+var_158]
0000000000002ef6         jmp        loc_2e3c

                     loc_2efb:
0000000000002efb         cmp        eax, 0xffffff7e                             ; CODE XREF=main+365
0000000000002f00         jne        loc_1cda

0000000000002f06         xor        edi, edi                                    ; argument #1 for method usage
0000000000002f08         call       usage                                       ; usage

                     loc_2f0d:
0000000000002f0d         mov        rdi, r13                                    ; CODE XREF=main+772
0000000000002f10         call       quote                                       ; quote
0000000000002f15         lea        rsi, qword [aInvalidLengthS]                ; argument "msgid" for method j_dcgettext, "invalid length: %s"
0000000000002f1c         mov        rbx, rax
0000000000002f1f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f24         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f26         call       j_dcgettext                                 ; dcgettext
0000000000002f2b         mov        rcx, rbx
0000000000002f2e         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002f31         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002f33         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002f35         xor        eax, eax
0000000000002f37         call       j_error                                     ; error
0000000000002f3c         mov        edx, dword [b2_algorithm]                   ; b2_algorithm
0000000000002f42         lea        rax, qword [algorithm_in_string]            ; algorithm_in_string
0000000000002f49         mov        rdi, qword [rax+rdx*8]
0000000000002f4d         call       quote                                       ; quote
0000000000002f52         lea        rsi, qword [aMaximumDigestL]                ; argument "msgid" for method j_dcgettext, "maximum digest length for %s is %lu bits"
0000000000002f59         mov        rbx, rax
0000000000002f5c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f61         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f63         call       j_dcgettext                                 ; dcgettext
0000000000002f68         mov        r8d, 0x200
0000000000002f6e         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002f71         mov        rcx, rbx
0000000000002f74         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002f76         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002f7b         xor        eax, eax
0000000000002f7d         call       j_error                                     ; error

                     loc_2f82:
0000000000002f82         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=main+2717
                        ; endp

                     loc_2f87:
0000000000002f87         sub        edx, 0x1                                    ; CODE XREF=main+2142, main+2151
0000000000002f8a         je         loc_242f

0000000000002f90         mov        dword [bsd_reversed], 0x0                   ; bsd_reversed
0000000000002f9a         lea        rax, qword [rbx+2]
0000000000002f9e         jmp        loc_242f

                     loc_2fa3:
0000000000002fa3         xor        esi, esi                                    ; CODE XREF=main+4710
0000000000002fa5         mov        rdi, rbp
0000000000002fa8         call       print_filename                              ; print_filename
0000000000002fad         jmp        loc_2e5c

                     loc_2fb2:
0000000000002fb2         cmp        byte [status_only], 0x0                     ; status_only, CODE XREF=main+1793
0000000000002fb9         je         loc_1f2a

0000000000002fbf         test       r14b, r14b
0000000000002fc2         jne        loc_28fd

                     loc_2fc8:
0000000000002fc8         mov        edx, 0x5                                    ; CODE XREF=main+884
0000000000002fcd         lea        rsi, qword [aTheStatusOptio]                ; "the --status option is meaningful only when verifying checksums"
0000000000002fd4         jmp        loc_2290

                     loc_2fd9:
0000000000002fd9         mov        edx, 0x5                                    ; CODE XREF=main+871, main+1802
0000000000002fde         lea        rsi, qword [aTheIgnoremissi]                ; "the --ignore-missing option is meaningful only when verifying checksums"
0000000000002fe5         jmp        loc_2290

                     loc_2fea:
0000000000002fea         mov        edx, 0x5                                    ; CODE XREF=main+824
0000000000002fef         lea        rsi, qword [aTagDoesNotSupp]                ; "--tag does not support --text mode"
0000000000002ff6         jmp        loc_2290
0000000000002ffb         align      4096                                        ; End of unwind block (FDE at 0xae90)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000003000         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0xad24)
0000000000003002         mov        r9, rdx
0000000000003005         pop        rsi
0000000000003006         mov        rdx, rsp
0000000000003009         and        rsp, 0xfffffffffffffff0
000000000000300d         push       rax
000000000000300e         push       rsp
000000000000300f         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000003016         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
000000000000301d         lea        rdi, qword [main]                           ; main
0000000000003024         call       qword [qword_20cfd8+8]                      ; 0x20cfe0
000000000000302a         hlt
                        ; endp
000000000000302b         align      16                                          ; End of unwind block (FDE at 0xad24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000003030         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
0000000000003037         push       rbp
0000000000003038         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000303f         cmp        rax, rdi
0000000000003042         mov        rbp, rsp
0000000000003045         je         loc_3060

0000000000003047         mov        rax, qword [qword_20cfd8]                   ; qword_20cfd8
000000000000304e         test       rax, rax
0000000000003051         je         loc_3060

0000000000003053         pop        rbp
0000000000003054         jmp        rax
                        ; endp
0000000000003056         align      32

                     loc_3060:
0000000000003060         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000003061         ret
                        ; endp
0000000000003062         align      16

                     register_tm_clones:
0000000000003070         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
0000000000003077         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000307e         push       rbp
000000000000307f         sub        rsi, rdi
0000000000003082         mov        rbp, rsp
0000000000003085         sar        rsi, 0x3
0000000000003089         mov        rax, rsi
000000000000308c         shr        rax, 0x3f
0000000000003090         add        rsi, rax
0000000000003093         sar        rsi, 0x1
0000000000003096         je         loc_30b0

0000000000003098         mov        rax, qword [qword_20cff0]                   ; qword_20cff0
000000000000309f         test       rax, rax
00000000000030a2         je         loc_30b0

00000000000030a4         pop        rbp
00000000000030a5         jmp        rax
                        ; endp
00000000000030a7         align      16

                     loc_30b0:
00000000000030b0         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
00000000000030b1         ret
                        ; endp
00000000000030b2         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
00000000000030c0         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
00000000000030c7         jne        loc_30f8

00000000000030c9         cmp        qword [qword_20cff8], 0x0                   ; qword_20cff8
00000000000030d1         push       rbp
00000000000030d2         mov        rbp, rsp
00000000000030d5         je         loc_30e3

00000000000030d7         mov        rdi, qword [__dso_handle]                   ; __dso_handle
00000000000030de         call       j_qword_20cff8                              ; qword_20cff8

                     loc_30e3:
00000000000030e3         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
00000000000030e8         mov        byte [completed.7697], 0x1                  ; completed.7697
00000000000030ef         pop        rbp
00000000000030f0         ret
                        ; endp
00000000000030f1         align      8

                     loc_30f8:
00000000000030f8         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
00000000000030fa         align      256


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000003100         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000003101         mov        rbp, rsp
0000000000003104         pop        rbp
0000000000003105         jmp        register_tm_clones                          ; register_tm_clones
000000000000310a         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     filename_unescape:
0000000000003110         xor        edx, edx                                    ; Begin of unwind block (FDE at 0xad94), CODE XREF=main+2203, main+4368
0000000000003112         test       rsi, rsi
0000000000003115         lea        rcx, qword [rdi+1]
0000000000003119         lea        r8, qword [rsi-1]
000000000000311d         je         loc_3177

                     loc_311f:
000000000000311f         movzx      eax, byte [rdi+rdx]                         ; CODE XREF=filename_unescape+89
0000000000003123         test       al, al
0000000000003125         je         loc_3150

0000000000003127         cmp        al, 0x5c
0000000000003129         jne        loc_3158

000000000000312b         cmp        r8, rdx
000000000000312e         je         loc_3150

0000000000003130         add        rdx, 0x1
0000000000003134         movzx      eax, byte [rdi+rdx]
0000000000003138         cmp        al, 0x5c
000000000000313a         je         loc_3180

000000000000313c         cmp        al, 0x6e
000000000000313e         jne        loc_3150

0000000000003140         mov        r9, rcx
0000000000003143         mov        byte [rcx-1], 0xa
0000000000003147         jmp        loc_315e
0000000000003149         align      16

                     loc_3150:
0000000000003150         xor        eax, eax                                    ; CODE XREF=filename_unescape+21, filename_unescape+30, filename_unescape+46
0000000000003152         ret
                        ; endp
0000000000003153         align      8

                     loc_3158:
0000000000003158         mov        r9, rcx                                     ; CODE XREF=filename_unescape+25
000000000000315b         mov        byte [rcx-1], al

                     loc_315e:
000000000000315e         add        rdx, 0x1                                    ; CODE XREF=filename_unescape+55, filename_unescape+119
0000000000003162         add        rcx, 0x1
0000000000003166         cmp        rsi, rdx
0000000000003169         ja         loc_311f

000000000000316b         add        rsi, rdi
000000000000316e         cmp        r9, rsi
0000000000003171         jae        loc_3177

0000000000003173         mov        byte [r9], 0x0

                     loc_3177:
0000000000003177         mov        rax, rdi                                    ; CODE XREF=filename_unescape+13, filename_unescape+97
000000000000317a         ret
                        ; endp
000000000000317b         align      128

                     loc_3180:
0000000000003180         mov        r9, rcx                                     ; CODE XREF=filename_unescape+42
0000000000003183         mov        byte [rcx-1], 0x5c
0000000000003187         jmp        loc_315e
0000000000003189         align      16                                          ; End of unwind block (FDE at 0xad94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hex_digits:
0000000000003190         push       rbp                                         ; Begin of unwind block (FDE at 0xada8), CODE XREF=main+2094, main+4031
0000000000003191         push       rbx
0000000000003192         sub        rsp, 0x8
0000000000003196         mov        rbp, qword [digest_hex_bytes]               ; digest_hex_bytes
000000000000319d         test       rbp, rbp
00000000000031a0         je         loc_31e0

00000000000031a2         mov        rbx, rdi
00000000000031a5         call       j___ctype_b_loc                             ; __ctype_b_loc
00000000000031aa         mov        rcx, qword [rax]
00000000000031ad         mov        rax, rbx
00000000000031b0         jmp        loc_31c5
00000000000031b2         align      8

                     loc_31b8:
00000000000031b8         add        rax, 0x1                                    ; CODE XREF=hex_digits+61
00000000000031bc         mov        edx, eax
00000000000031be         sub        edx, ebx
00000000000031c0         cmp        rdx, rbp
00000000000031c3         jae        loc_31e3

                     loc_31c5:
00000000000031c5         movzx      edx, byte [rax]                             ; CODE XREF=hex_digits+32
00000000000031c8         test       byte [rcx+rdx*2+1], 0x10
00000000000031cd         jne        loc_31b8

00000000000031cf         add        rsp, 0x8
00000000000031d3         xor        eax, eax
00000000000031d5         pop        rbx
00000000000031d6         pop        rbp
00000000000031d7         ret
                        ; endp
00000000000031d8         align      32

                     loc_31e0:
00000000000031e0         mov        rax, rdi                                    ; CODE XREF=hex_digits+16

                     loc_31e3:
00000000000031e3         cmp        byte [rax], 0x0                             ; CODE XREF=hex_digits+51
00000000000031e6         sete       al
00000000000031e9         add        rsp, 0x8
00000000000031ed         pop        rbx
00000000000031ee         pop        rbp
00000000000031ef         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     print_filename:
00000000000031f0         push       rbp                                         ; End of unwind block (FDE at 0xada8), Begin of unwind block (FDE at 0xaddc), CODE XREF=main+3602, main+3780, main+4245, main+4637, main+4761, main+5112
00000000000031f1         push       rbx
00000000000031f2         mov        rbx, rdi
00000000000031f5         sub        rsp, 0x8
00000000000031f9         test       sil, sil
00000000000031fc         je         loc_3290

0000000000003202         movzx      esi, byte [rdi]
0000000000003205         lea        rbp, qword [_IO_stdin_used+4]               ; 0x91e4
000000000000320c         test       sil, sil
000000000000320f         jne        loc_323a

0000000000003211         jmp        loc_326e
0000000000003213         align      8

                     loc_3218:
0000000000003218         lea        rdi, qword [_IO_stdin_used+7]               ; argument "__ptr" for method j_fwrite_unlocked, 0x91e7, CODE XREF=print_filename+91
000000000000321f         mov        edx, 0x2                                    ; argument "__n" for method j_fwrite_unlocked
0000000000003224         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000003229         call       j_fwrite_unlocked                           ; fwrite_unlocked

                     loc_322e:
000000000000322e         add        rbx, 0x1                                    ; CODE XREF=print_filename+154, print_filename+192
0000000000003232         movzx      esi, byte [rbx]
0000000000003235         test       sil, sil
0000000000003238         je         loc_326e

                     loc_323a:
000000000000323a         cmp        sil, 0xa                                    ; CODE XREF=print_filename+31, print_filename+124
000000000000323e         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003245         je         loc_3278

0000000000003247         cmp        sil, 0x5c
000000000000324b         je         loc_3218

000000000000324d         mov        rax, qword [rcx+0x28]
0000000000003251         cmp        rax, qword [rcx+0x30]
0000000000003255         jae        loc_32a8

0000000000003257         lea        rdx, qword [rax+1]
000000000000325b         add        rbx, 0x1
000000000000325f         mov        qword [rcx+0x28], rdx
0000000000003263         mov        byte [rax], sil
0000000000003266         movzx      esi, byte [rbx]
0000000000003269         test       sil, sil
000000000000326c         jne        loc_323a

                     loc_326e:
000000000000326e         add        rsp, 0x8                                    ; CODE XREF=print_filename+33, print_filename+72
0000000000003272         pop        rbx
0000000000003273         pop        rbp
0000000000003274         ret
                        ; endp
0000000000003275         align      8

                     loc_3278:
0000000000003278         mov        edx, 0x2                                    ; argument "__n" for method j_fwrite_unlocked, CODE XREF=print_filename+85
000000000000327d         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000003282         mov        rdi, rbp                                    ; argument "__ptr" for method j_fwrite_unlocked
0000000000003285         call       j_fwrite_unlocked                           ; fwrite_unlocked
000000000000328a         jmp        loc_322e
000000000000328c         align      16

                     loc_3290:
0000000000003290         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=print_filename+12
0000000000003297         add        rsp, 0x8
000000000000329b         pop        rbx
000000000000329c         pop        rbp
000000000000329d         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp
00000000000032a2         align      8

                     loc_32a8:
00000000000032a8         mov        rdi, rcx                                    ; argument #1 for method j___overflow, CODE XREF=print_filename+101
00000000000032ab         call       j___overflow                                ; __overflow
00000000000032b0         jmp        loc_322e
00000000000032b5         align      64                                          ; End of unwind block (FDE at 0xaddc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     digest_file.isra.1:
00000000000032c0         push       r13                                         ; Begin of unwind block (FDE at 0xae14), CODE XREF=main+2637, main+4164
00000000000032c2         push       r12
00000000000032c4         mov        ecx, 0x2
00000000000032c9         push       rbp
00000000000032ca         push       rbx
00000000000032cb         mov        rbp, rdi
00000000000032ce         lea        rdi, qword [aLibs+10]                       ; 0x9f6a
00000000000032d5         mov        r12, rsi
00000000000032d8         mov        rsi, rbp
00000000000032db         sub        rsp, 0x8
00000000000032df         rep  cmpsb byte [rsi], byte [rdi]
00000000000032e1         mov        byte [rdx], 0x0
00000000000032e4         seta       al
00000000000032e7         sbb        al, 0x0
00000000000032e9         test       al, al
00000000000032eb         jne        loc_3390

00000000000032f1         mov        rbx, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
00000000000032f8         mov        esi, 0x2
00000000000032fd         mov        byte [have_read_stdin], 0x1                 ; have_read_stdin
0000000000003304         mov        rdi, rbx
0000000000003307         call       fadvise                                     ; fadvise
000000000000330c         mov        rdx, qword [b2_length]                      ; b2_length
0000000000003313         mov        rsi, r12
0000000000003316         mov        rdi, rbx
0000000000003319         shr        rdx, 0x3
000000000000331d         call       blake2b_stream                              ; blake2b_stream
0000000000003322         test       eax, eax
0000000000003324         jne        loc_3340

                     loc_3326:
0000000000003326         mov        r12d, 0x1                                   ; CODE XREF=digest_file.isra.1+287

                     loc_332c:
000000000000332c         add        rsp, 0x8                                    ; CODE XREF=digest_file.isra.1+182, digest_file.isra.1+340, digest_file.isra.1+417, digest_file.isra.1+437
0000000000003330         mov        eax, r12d
0000000000003333         pop        rbx
0000000000003334         pop        rbp
0000000000003335         pop        r12
0000000000003337         pop        r13
0000000000003339         ret
                        ; endp
000000000000333a         align      64

                     loc_3340:
0000000000003340         mov        rdx, rbp                                    ; CODE XREF=digest_file.isra.1+100, digest_file.isra.1+271
0000000000003343         xor        edi, edi
0000000000003345         mov        esi, 0x3
000000000000334a         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
000000000000334f         mov        rbp, rax
0000000000003352         xor        r12d, r12d
0000000000003355         call       j___errno_location                          ; __errno_location
000000000000335a         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000335c         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x9f0c
0000000000003363         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003365         xor        eax, eax
0000000000003367         mov        rcx, rbp
000000000000336a         call       j_error                                     ; error
000000000000336f         cmp        qword [stdin@@GLIBC_2.2.5], rbx             ; stdin@@GLIBC_2.2.5
0000000000003376         je         loc_332c

0000000000003378         mov        rdi, rbx
000000000000337b         call       rpl_fclose                                  ; rpl_fclose
0000000000003380         add        rsp, 0x8
0000000000003384         mov        eax, r12d
0000000000003387         pop        rbx
0000000000003388         pop        rbp
0000000000003389         pop        r12
000000000000338b         pop        r13
000000000000338d         ret
                        ; endp
000000000000338e         align      16

                     loc_3390:
0000000000003390         lea        rsi, qword [aSReadError+13]                 ; 0x9374, CODE XREF=digest_file.isra.1+43
0000000000003397         mov        rdi, rbp
000000000000339a         mov        r13, rdx
000000000000339d         call       fopen_safer                                 ; fopen_safer
00000000000033a2         test       rax, rax
00000000000033a5         mov        rbx, rax
00000000000033a8         je         loc_3420

00000000000033aa         mov        rdi, rax
00000000000033ad         mov        esi, 0x2
00000000000033b2         call       fadvise                                     ; fadvise
00000000000033b7         mov        rdx, qword [b2_length]                      ; b2_length
00000000000033be         mov        rsi, r12
00000000000033c1         mov        rdi, rbx
00000000000033c4         shr        rdx, 0x3
00000000000033c8         call       blake2b_stream                              ; blake2b_stream
00000000000033cd         test       eax, eax
00000000000033cf         jne        loc_3340

00000000000033d5         mov        rdi, rbx
00000000000033d8         call       rpl_fclose                                  ; rpl_fclose
00000000000033dd         test       eax, eax
00000000000033df         je         loc_3326

00000000000033e5         mov        rdx, rbp
00000000000033e8         mov        esi, 0x3
00000000000033ed         xor        edi, edi
00000000000033ef         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000033f4         mov        rbx, rax
00000000000033f7         xor        r12d, r12d
00000000000033fa         call       j___errno_location                          ; __errno_location
00000000000033ff         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000003401         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x9f0c
0000000000003408         mov        rcx, rbx
000000000000340b         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000340d         xor        eax, eax
000000000000340f         call       j_error                                     ; error
0000000000003414         jmp        loc_332c
0000000000003419         align      32

                     loc_3420:
0000000000003420         movzx      r12d, byte [ignore_missing]                 ; ignore_missing, CODE XREF=digest_file.isra.1+232
0000000000003428         call       j___errno_location                          ; __errno_location
000000000000342d         mov        rbx, rax
0000000000003430         test       r12b, r12b
0000000000003433         je         loc_343a

0000000000003435         cmp        dword [rax], 0x2
0000000000003438         je         loc_3470

                     loc_343a:
000000000000343a         mov        rdx, rbp                                    ; CODE XREF=digest_file.isra.1+371
000000000000343d         mov        esi, 0x3
0000000000003442         xor        edi, edi
0000000000003444         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000003449         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
000000000000344b         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x9f0c
0000000000003452         mov        rcx, rax
0000000000003455         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003457         xor        eax, eax
0000000000003459         xor        r12d, r12d
000000000000345c         call       j_error                                     ; error
0000000000003461         jmp        loc_332c
0000000000003466         align      16

                     loc_3470:
0000000000003470         mov        byte [r13], 0x1                             ; CODE XREF=digest_file.isra.1+376
0000000000003475         jmp        loc_332c
000000000000347a         align      128                                         ; End of unwind block (FDE at 0xae14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     usage:
0000000000003480         push       r13                                         ; Begin of unwind block (FDE at 0xae64), CODE XREF=main+303, main+4952, __argmatch_die+5
0000000000003482         push       r12
0000000000003484         mov        edx, 0x5
0000000000003489         push       rbp
000000000000348a         push       rbx
000000000000348b         mov        ebp, edi
000000000000348d         sub        rsp, 0x88
0000000000003494         mov        rbx, qword [program_name]                   ; program_name
000000000000349b         mov        rax, qword [fs:0x28]
00000000000034a4         mov        qword [rsp+0xa8+var_30], rax
00000000000034a9         xor        eax, eax
00000000000034ab         test       edi, edi
00000000000034ad         je         loc_34dd

00000000000034af         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
00000000000034b6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000034b8         call       j_dcgettext                                 ; dcgettext
00000000000034bd         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000034c4         mov        rdx, rax
00000000000034c7         mov        rcx, rbx
00000000000034ca         mov        esi, 0x1
00000000000034cf         xor        eax, eax
00000000000034d1         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_34d6:
00000000000034d6         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+950
00000000000034d8         call       j_exit                                      ; exit
                        ; endp

                     loc_34dd:
00000000000034dd         lea        rsi, qword [aUsageSOptionFi]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... [FILE]...\\nPrint or check %s (%d-bit) checksums.\\n", CODE XREF=usage+45
00000000000034e4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000034e6         call       j_dcgettext                                 ; dcgettext
00000000000034eb         lea        rcx, qword [aBlake2]                        ; "BLAKE2"
00000000000034f2         mov        r8d, 0x200
00000000000034f8         mov        rdx, rbx
00000000000034fb         mov        rsi, rax
00000000000034fe         mov        edi, 0x1
0000000000003503         xor        eax, eax
0000000000003505         call       j___printf_chk                              ; __printf_chk
000000000000350a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003511         lea        rsi, qword [aNwithNoFileOrW]                ; argument "msgid" for method j_dcgettext, "\\nWith no FILE, or when FILE is -, read standard input.\\n"
0000000000003518         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000351d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000351f         call       j_dcgettext                                 ; dcgettext
0000000000003524         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003527         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000352a         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000352f         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003536         lea        rsi, qword [aNBBinaryReadIn]                ; argument "msgid" for method j_dcgettext, "\\n  -b, --binary         read in binary mode\\n"
000000000000353d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003542         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003544         call       j_dcgettext                                 ; dcgettext
0000000000003549         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000354c         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000354f         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003554         lea        rsi, qword [aCCheckReadSSum]                ; argument "msgid" for method j_dcgettext, "  -c, --check          read %s sums from the FILEs and check them\\n"
000000000000355b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000355d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003562         call       j_dcgettext                                 ; dcgettext
0000000000003567         lea        rdx, qword [aBlake2]                        ; "BLAKE2"
000000000000356e         mov        rsi, rax
0000000000003571         mov        edi, 0x1
0000000000003576         xor        eax, eax
0000000000003578         call       j___printf_chk                              ; __printf_chk
000000000000357d         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003584         lea        rsi, qword [aLLengthDigestL]                ; argument "msgid" for method j_dcgettext, "  -l, --length         digest length in bits; must not exceed the maximum for\\n                       the blake2 algorithm and must be a multiple of 8\\n"
000000000000358b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003590         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003592         call       j_dcgettext                                 ; dcgettext
0000000000003597         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000359a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000359d         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000035a2         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000035a9         lea        rsi, qword [aTagCreateABsds]                ; argument "msgid" for method j_dcgettext, "      --tag            create a BSD-style checksum\\n"
00000000000035b0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000035b5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000035b7         call       j_dcgettext                                 ; dcgettext
00000000000035bc         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000035bf         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000035c2         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000035c7         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000035ce         lea        rsi, qword [aTTextReadInTex]                ; argument "msgid" for method j_dcgettext, "  -t, --text           read in text mode (default)\\n"
00000000000035d5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000035da         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000035dc         call       j_dcgettext                                 ; dcgettext
00000000000035e1         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000035e4         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000035e7         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000035ec         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000035f3         lea        rsi, qword [aZZeroEndEachOu]                ; argument "msgid" for method j_dcgettext, "  -z, --zero           end each output line with NUL, not newline,\\n                       and disable file name escaping\\n"
00000000000035fa         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000035ff         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003601         call       j_dcgettext                                 ; dcgettext
0000000000003606         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003609         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000360c         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003611         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003618         lea        rsi, qword [aNtheFollowingF]                ; argument "msgid" for method j_dcgettext, "\\nThe following five options are useful only when verifying checksums:\\n      --ignore-missing  don't fail or report status for missing files\\n      --quiet          don't print OK for each successfully verified file\\n      --status         don't output anythi…"
000000000000361f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003624         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003626         call       j_dcgettext                                 ; dcgettext
000000000000362b         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000362e         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003631         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003636         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000363d         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
0000000000003644         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003649         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000364b         call       j_dcgettext                                 ; dcgettext
0000000000003650         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003653         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003656         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000365b         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003662         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000003669         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000366b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003670         call       j_dcgettext                                 ; dcgettext
0000000000003675         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003678         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000367b         lea        rbx, qword [aB2sum]                         ; "b2sum"
0000000000003682         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003687         lea        rsi, qword [aNtheSumsAreCom]                ; argument "msgid" for method j_dcgettext, "\\nThe sums are computed as described in %s.  When checking, the input\\nshould be a former output of this program.  The default mode is to print a\\nline with checksum, a space, a character indicating input mode ('*' for binary,\\n' ' for text or where binary is …"
000000000000368e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003693         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003695         call       j_dcgettext                                 ; dcgettext
000000000000369a         lea        rdx, qword [aRfc7693]                       ; "RFC 7693"
00000000000036a1         mov        rsi, rax
00000000000036a4         mov        edi, 0x1
00000000000036a9         xor        eax, eax
00000000000036ab         call       j___printf_chk                              ; __printf_chk
00000000000036b0         lea        rax, qword [aRfc7693+9]                     ; 0x9200
00000000000036b7         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
00000000000036be         mov        qword [rsp+0xa8+var_48], 0x0
00000000000036c7         mov        qword [rsp+0xa8+var_40], 0x0
00000000000036d0         mov        rdx, rsp
00000000000036d3         mov        qword [rsp+0xa8+var_A8], rax
00000000000036d7         lea        rax, qword [aTestInvocation]                ; "test invocation"
00000000000036de         mov        qword [rsp+0xa8+var_78], rcx
00000000000036e3         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
00000000000036ea         mov        qword [rsp+0xa8+var_A0], rax
00000000000036ef         lea        rax, qword [aCoreutils]                     ; "coreutils"
00000000000036f6         mov        qword [rsp+0xa8+var_68], rcx
00000000000036fb         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
0000000000003702         mov        qword [rsp+0xa8+var_98], rax
0000000000003707         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
000000000000370e         mov        qword [rsp+0xa8+var_58], rcx
0000000000003713         mov        qword [rsp+0xa8+var_90], rax
0000000000003718         lea        rax, qword [aSha224sum]                     ; "sha224sum"
000000000000371f         mov        qword [rsp+0xa8+var_88], rax
0000000000003724         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
000000000000372b         mov        qword [rsp+0xa8+var_80], rax
0000000000003730         mov        qword [rsp+0xa8+var_70], rax
0000000000003735         mov        qword [rsp+0xa8+var_60], rax
000000000000373a         mov        qword [rsp+0xa8+var_50], rax
000000000000373f         nop

                     loc_3740:
0000000000003740         add        rdx, 0x10                                   ; CODE XREF=usage+733
0000000000003744         mov        rdi, qword [rdx]
0000000000003747         test       rdi, rdi
000000000000374a         je         loc_375f

000000000000374c         mov        ecx, 0x6
0000000000003751         mov        rsi, rbx
0000000000003754         rep  cmpsb byte [rsi], byte [rdi]
0000000000003756         seta       al
0000000000003759         sbb        al, 0x0
000000000000375b         test       al, al
000000000000375d         jne        loc_3740

                     loc_375f:
000000000000375f         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+714
0000000000003763         xor        edi, edi
0000000000003765         mov        edx, 0x5
000000000000376a         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
0000000000003771         test       r12, r12
0000000000003774         je         loc_383b

000000000000377a         call       j_dcgettext                                 ; dcgettext
000000000000377f         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000003786         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x9276
000000000000378d         mov        rsi, rax
0000000000003790         mov        edi, 0x1
0000000000003795         xor        eax, eax
0000000000003797         call       j___printf_chk                              ; __printf_chk
000000000000379c         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000379e         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
00000000000037a3         call       j_setlocale                                 ; setlocale
00000000000037a8         test       rax, rax
00000000000037ab         je         loc_37c9

00000000000037ad         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x9284
00000000000037b4         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
00000000000037b9         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
00000000000037bc         call       j_strncmp                                   ; strncmp
00000000000037c1         test       eax, eax
00000000000037c3         jne        loc_38d0

                     loc_37c9:
00000000000037c9         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+811, usage+1141
00000000000037d0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000037d2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000037d7         call       j_dcgettext                                 ; dcgettext
00000000000037dc         lea        rcx, qword [aB2sum]                         ; "b2sum"
00000000000037e3         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000037ea         mov        rsi, rax
00000000000037ed         mov        edi, 0x1
00000000000037f2         xor        eax, eax
00000000000037f4         call       j___printf_chk                              ; __printf_chk
00000000000037f9         cmp        r12, rbx
00000000000037fc         lea        rcx, qword [aMulticallInvoc+10]             ; 0x921c
0000000000003803         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0xa4a1
000000000000380a         cmove      rbx, rcx

                     loc_380e:
000000000000380e         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+1092
0000000000003815         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003817         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000381c         call       j_dcgettext                                 ; dcgettext
0000000000003821         mov        rcx, rbx
0000000000003824         mov        rsi, rax
0000000000003827         mov        rdx, r12
000000000000382a         mov        edi, 0x1
000000000000382f         xor        eax, eax
0000000000003831         call       j___printf_chk                              ; __printf_chk
0000000000003836         jmp        loc_34d6

                     loc_383b:
000000000000383b         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+756
0000000000003840         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000003847         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x9276
000000000000384e         mov        rsi, rax
0000000000003851         mov        edi, 0x1
0000000000003856         xor        eax, eax
0000000000003858         call       j___printf_chk                              ; __printf_chk
000000000000385d         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000385f         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000003864         call       j_setlocale                                 ; setlocale
0000000000003869         test       rax, rax
000000000000386c         je         loc_3886

000000000000386e         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x9284
0000000000003875         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
000000000000387a         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
000000000000387d         call       j_strncmp                                   ; strncmp
0000000000003882         test       eax, eax
0000000000003884         jne        loc_38c9

                     loc_3886:
0000000000003886         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+1004
000000000000388d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003892         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003894         lea        r12, qword [aB2sum]                         ; "b2sum"
000000000000389b         lea        rbx, qword [aMulticallInvoc+10]             ; 0x921c
00000000000038a2         call       j_dcgettext                                 ; dcgettext
00000000000038a7         lea        rcx, qword [aB2sum]                         ; "b2sum"
00000000000038ae         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000038b5         mov        rsi, rax
00000000000038b8         mov        edi, 0x1
00000000000038bd         xor        eax, eax
00000000000038bf         call       j___printf_chk                              ; __printf_chk
00000000000038c4         jmp        loc_380e

                     loc_38c9:
00000000000038c9         lea        r12, qword [aB2sum]                         ; "b2sum", CODE XREF=usage+1028

                     loc_38d0:
00000000000038d0         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+835
00000000000038d7         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
00000000000038de         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000038e0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000038e5         call       j_dcgettext                                 ; dcgettext
00000000000038ea         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
00000000000038ed         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000038f0         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000038f5         jmp        loc_37c9
00000000000038fa         align      256                                         ; End of unwind block (FDE at 0xae64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_128: int64_t, -296
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_150: int64_t, -336
        ;    var_158: int64_t, -344
        ;    var_160: int64_t, -352
        ;    var_168: int64_t, -360
        ;    var_170: int64_t, -368


                     blake2b_compress:
0000000000003900         push       r15                                         ; Begin of unwind block (FDE at 0xaeec), CODE XREF=blake2b_update.part.3+145, blake2b_update.part.3+228, blake2b_final+165
0000000000003902         push       r14
0000000000003904         push       r13
0000000000003906         push       r12
0000000000003908         push       rbp
0000000000003909         push       rbx
000000000000390a         sub        rsp, 0x148
0000000000003911         mov        rax, qword [fs:0x28]
000000000000391a         mov        qword [rsp+0x178+var_40], rax
0000000000003922         xor        eax, eax
0000000000003924         lea        rcx, qword [rsp+0x178+var_148]
0000000000003929         nop        dword [rax]

                     loc_3930:
0000000000003930         mov        rdx, qword [rsi+rax*8]                      ; CODE XREF=blake2b_compress+64
0000000000003934         mov        qword [rcx+rax*8], rdx
0000000000003938         add        rax, 0x1
000000000000393c         cmp        rax, 0x10
0000000000003940         jne        loc_3930

0000000000003942         lea        rcx, qword [rsp+0x178+var_C8]
000000000000394a         xor        eax, eax
000000000000394c         mov        qword [rsp+0x178+var_150], rcx
0000000000003951         nop        dword [rax]

                     loc_3958:
0000000000003958         mov        rdx, qword [rdi+rax*8]                      ; CODE XREF=blake2b_compress+104
000000000000395c         mov        qword [rcx+rax*8], rdx
0000000000003960         add        rax, 0x1
0000000000003964         cmp        rax, 0x8
0000000000003968         jne        loc_3958

000000000000396a         mov        r8, qword [rsp+0x178+var_A0]
0000000000003972         mov        rbx, qword [rsp+0x178+var_C0]
000000000000397a         movabs     rcx, 0x9b05688c2b3e6c1f
0000000000003984         mov        r13, qword [rsp+0x178+var_A8]
000000000000398c         mov        rbp, qword [rsp+0x178+var_C8]
0000000000003994         movabs     r9, 0x510e527fade682d1
000000000000399e         movabs     r15, 0xbb67ae8584caa73b
00000000000039a8         movabs     r14, 0x6a09e667f3bcc908
00000000000039b2         mov        rsi, qword [rsp+0x178+var_98]
00000000000039ba         add        rbx, r8
00000000000039bd         add        rbx, qword [rsp+0x178+var_138]
00000000000039c2         mov        r11, qword [rsp+0x178+var_B8]
00000000000039ca         add        rbp, r13
00000000000039cd         add        rbp, qword [rsp+0x178+var_148]
00000000000039d2         mov        r10, qword [rsp+0x178+var_B0]
00000000000039da         movabs     rdx, 0x1f83d9abfb41bd6b
00000000000039e4         movabs     r12, 0x3c6ef372fe94f82b
00000000000039ee         add        r11, rsi
00000000000039f1         add        r11, qword [rsp+0x178+var_128]
00000000000039f6         xor        rcx, rbx
00000000000039f9         xor        rcx, qword [rdi+0x48]
00000000000039fd         add        rbx, qword [rsp+0x178+var_130]
0000000000003a02         xor        r9, rbp
0000000000003a05         xor        r9, qword [rdi+0x40]
0000000000003a09         add        rbp, qword [rsp+0x178+var_140]
0000000000003a0e         xor        rdx, r11
0000000000003a11         rol        rcx, 0x20
0000000000003a15         add        r15, rcx
0000000000003a18         rol        r9, 0x20
0000000000003a1c         xor        r8, r15
0000000000003a1f         add        r14, r9
0000000000003a22         ror        r8, 0x18
0000000000003a26         xor        r13, r14
0000000000003a29         add        rbx, r8
0000000000003a2c         ror        r13, 0x18
0000000000003a30         xor        rcx, rbx
0000000000003a33         add        rbp, r13
0000000000003a36         ror        rcx, 0x10
0000000000003a3a         xor        r9, rbp
0000000000003a3d         lea        rax, qword [r15+rcx]
0000000000003a41         ror        r9, 0x10
0000000000003a45         movabs     r15, 0xa54ff53a5f1d36f1
0000000000003a4f         add        r14, r9
0000000000003a52         xor        r8, rax
0000000000003a55         mov        qword [rsp+0x178+var_170], rax
0000000000003a5a         mov        rax, qword [rsp+0x178+var_90]
0000000000003a62         xor        r13, r14
0000000000003a65         rol        r8, 0x1
0000000000003a68         rol        r13, 0x1
0000000000003a6b         xor        rdx, qword [rdi+0x50]
0000000000003a6f         add        r11, qword [rsp+0x178+var_120]
0000000000003a74         add        r10, rax
0000000000003a77         add        r10, qword [rsp+0x178+var_118]
0000000000003a7c         mov        qword [rsp+0x178+var_160], r13
0000000000003a81         movabs     r13, 0x5be0cd19137e2179
0000000000003a8b         add        rbp, qword [rsp+0x178+var_108]
0000000000003a90         rol        rdx, 0x20
0000000000003a94         xor        r13, r10
0000000000003a97         xor        r13, qword [rdi+0x58]
0000000000003a9b         add        r10, qword [rsp+0x178+var_110]
0000000000003aa0         add        r12, rdx
0000000000003aa3         add        rbp, r8
0000000000003aa6         xor        rsi, r12
0000000000003aa9         ror        rsi, 0x18
0000000000003aad         rol        r13, 0x20
0000000000003ab1         add        r11, rsi
0000000000003ab4         add        r15, r13
0000000000003ab7         xor        rdx, r11
0000000000003aba         xor        rax, r15
0000000000003abd         ror        rdx, 0x10
0000000000003ac1         ror        rax, 0x18
0000000000003ac5         add        r12, rdx
0000000000003ac8         add        r10, rax
0000000000003acb         xor        rsi, r12
0000000000003ace         xor        r13, r10
0000000000003ad1         rol        rsi, 0x1
0000000000003ad4         ror        r13, 0x10
0000000000003ad8         add        r15, r13
0000000000003adb         xor        r13, rbp
0000000000003ade         rol        r13, 0x20
0000000000003ae2         xor        rax, r15
0000000000003ae5         add        r12, r13
0000000000003ae8         rol        rax, 0x1
0000000000003aeb         xor        r8, r12
0000000000003aee         add        rbp, qword [rsp+0x178+var_100]
0000000000003af3         add        rbx, qword [rsp+0x178+var_F8]
0000000000003afb         ror        r8, 0x18
0000000000003aff         add        r11, qword [rsp+0x178+var_E8]
0000000000003b07         add        rbp, r8
0000000000003b0a         add        rbx, rsi
0000000000003b0d         xor        r13, rbp
0000000000003b10         xor        r9, rbx
0000000000003b13         add        rbx, qword [rsp+0x178+var_F0]
0000000000003b1b         ror        r13, 0x10
0000000000003b1f         rol        r9, 0x20
0000000000003b23         add        r11, rax
0000000000003b26         add        r12, r13
0000000000003b29         mov        qword [rsp+0x178+var_158], r13
0000000000003b2e         lea        r13, qword [r15+r9]
0000000000003b32         xor        rcx, r11
0000000000003b35         add        r11, qword [rsp+0x178+var_E0]
0000000000003b3d         xor        r8, r12
0000000000003b40         xor        rsi, r13
0000000000003b43         rol        rcx, 0x20
0000000000003b47         rol        r8, 0x1
0000000000003b4a         ror        rsi, 0x18
0000000000003b4e         add        r14, rcx
0000000000003b51         add        rbx, rsi
0000000000003b54         xor        rax, r14
0000000000003b57         xor        r9, rbx
0000000000003b5a         ror        rax, 0x18
0000000000003b5e         ror        r9, 0x10
0000000000003b62         add        r11, rax
0000000000003b65         lea        r15, qword [r13+r9]
0000000000003b6a         xor        rcx, r11
0000000000003b6d         mov        r13, qword [rsp+0x178+var_160]
0000000000003b72         ror        rcx, 0x10
0000000000003b76         xor        rsi, r15
0000000000003b79         mov        qword [rsp+0x178+var_168], r15
0000000000003b7e         rol        rsi, 0x1
0000000000003b81         add        r14, rcx
0000000000003b84         add        r10, qword [rsp+0x178+var_D8]
0000000000003b8c         mov        r15, qword [rsp+0x178+var_170]
0000000000003b91         add        rbp, qword [rsp+0x178+var_D8]
0000000000003b99         xor        rax, r14
0000000000003b9c         add        rbx, qword [rsp+0x178+var_128]
0000000000003ba1         rol        rax, 0x1
0000000000003ba4         add        r10, r13
0000000000003ba7         xor        rdx, r10
0000000000003baa         add        r10, qword [rsp+0x178+var_D0]
0000000000003bb2         rol        rdx, 0x20
0000000000003bb6         add        r15, rdx
0000000000003bb9         xor        r13, r15
0000000000003bbc         ror        r13, 0x18
0000000000003bc0         add        r10, r13
0000000000003bc3         xor        rdx, r10
0000000000003bc6         ror        rdx, 0x10
0000000000003bca         add        r15, rdx
0000000000003bcd         xor        r13, r15
0000000000003bd0         rol        r13, 0x1
0000000000003bd3         add        rbp, r13
0000000000003bd6         xor        r9, rbp
0000000000003bd9         add        rbp, qword [rsp+0x178+var_F8]
0000000000003be1         rol        r9, 0x20
0000000000003be5         add        r14, r9
0000000000003be8         xor        r13, r14
0000000000003beb         ror        r13, 0x18
0000000000003bef         add        rbp, r13
0000000000003bf2         xor        r9, rbp
0000000000003bf5         ror        r9, 0x10
0000000000003bf9         add        r14, r9
0000000000003bfc         xor        r13, r14
0000000000003bff         rol        r13, 0x1
0000000000003c02         add        rbx, r8
0000000000003c05         add        r11, qword [rsp+0x178+var_100]
0000000000003c0a         xor        rcx, rbx
0000000000003c0d         add        rbx, qword [rsp+0x178+var_108]
0000000000003c12         add        r10, qword [rsp+0x178+var_E0]
0000000000003c1a         rol        rcx, 0x20
0000000000003c1e         mov        qword [rsp+0x178+var_160], r13
0000000000003c23         mov        r13, qword [rsp+0x178+var_158]
0000000000003c28         add        r15, rcx
0000000000003c2b         add        r11, rsi
0000000000003c2e         xor        r8, r15
0000000000003c31         xor        rdx, r11
0000000000003c34         ror        r8, 0x18
0000000000003c38         add        r11, qword [rsp+0x178+var_D0]
0000000000003c40         rol        rdx, 0x20
0000000000003c44         add        rbx, r8
0000000000003c47         add        r10, rax
0000000000003c4a         add        r12, rdx
0000000000003c4d         xor        rcx, rbx
0000000000003c50         xor        r13, r10
0000000000003c53         xor        rsi, r12
0000000000003c56         ror        rcx, 0x10
0000000000003c5a         rol        r13, 0x20
0000000000003c5e         ror        rsi, 0x18
0000000000003c62         add        r15, rcx
0000000000003c65         add        r11, rsi
0000000000003c68         mov        qword [rsp+0x178+var_170], r15
0000000000003c6d         xor        r8, r15
0000000000003c70         xor        rdx, r11
0000000000003c73         mov        r15, qword [rsp+0x178+var_168]
0000000000003c78         rol        r8, 0x1
0000000000003c7b         ror        rdx, 0x10
0000000000003c7f         add        r12, rdx
0000000000003c82         xor        rsi, r12
0000000000003c85         add        r15, r13
0000000000003c88         rol        rsi, 0x1
0000000000003c8b         xor        rax, r15
0000000000003c8e         add        r10, qword [rsp+0x178+var_118]
0000000000003c93         add        rbp, qword [rsp+0x178+var_140]
0000000000003c98         ror        rax, 0x18
0000000000003c9c         add        rbx, qword [rsp+0x178+var_148]
0000000000003ca1         add        r10, rax
0000000000003ca4         xor        r13, r10
0000000000003ca7         add        rbp, r8
0000000000003caa         add        rbx, rsi
0000000000003cad         ror        r13, 0x10
0000000000003cb1         xor        r9, rbx
0000000000003cb4         add        rbx, qword [rsp+0x178+var_138]
0000000000003cb9         add        r15, r13
0000000000003cbc         xor        r13, rbp
0000000000003cbf         add        rbp, qword [rsp+0x178+var_E8]
0000000000003cc7         rol        r13, 0x20
0000000000003ccb         rol        r9, 0x20
0000000000003ccf         xor        rax, r15
0000000000003cd2         add        r12, r13
0000000000003cd5         add        r15, r9
0000000000003cd8         rol        rax, 0x1
0000000000003cdb         xor        r8, r12
0000000000003cde         xor        rsi, r15
0000000000003ce1         ror        r8, 0x18
0000000000003ce5         ror        rsi, 0x18
0000000000003ce9         add        rbp, r8
0000000000003cec         add        rbx, rsi
0000000000003cef         xor        r13, rbp
0000000000003cf2         ror        r13, 0x10
0000000000003cf6         add        r12, r13
0000000000003cf9         mov        qword [rsp+0x178+var_158], r13
0000000000003cfe         mov        r13, qword [rsp+0x178+var_160]
0000000000003d03         xor        r8, r12
0000000000003d06         rol        r8, 0x1
0000000000003d09         xor        r9, rbx
0000000000003d0c         add        r11, qword [rsp+0x178+var_F0]
0000000000003d14         add        r10, qword [rsp+0x178+var_120]
0000000000003d19         ror        r9, 0x10
0000000000003d1d         add        r15, r9
0000000000003d20         xor        rsi, r15
0000000000003d23         mov        qword [rsp+0x178+var_168], r15
0000000000003d28         mov        r15, qword [rsp+0x178+var_170]
0000000000003d2d         add        r11, rax
0000000000003d30         rol        rsi, 0x1
0000000000003d33         add        r10, r13
0000000000003d36         xor        rcx, r11
0000000000003d39         add        r11, qword [rsp+0x178+var_110]
0000000000003d3e         xor        rdx, r10
0000000000003d41         rol        rcx, 0x20
0000000000003d45         add        r10, qword [rsp+0x178+var_130]
0000000000003d4a         rol        rdx, 0x20
0000000000003d4e         add        r14, rcx
0000000000003d51         add        r15, rdx
0000000000003d54         xor        rax, r14
0000000000003d57         xor        r13, r15
0000000000003d5a         ror        rax, 0x18
0000000000003d5e         ror        r13, 0x18
0000000000003d62         add        r11, rax
0000000000003d65         add        r10, r13
0000000000003d68         xor        rcx, r11
0000000000003d6b         xor        rdx, r10
0000000000003d6e         ror        rcx, 0x10
0000000000003d72         ror        rdx, 0x10
0000000000003d76         add        r14, rcx
0000000000003d79         add        r15, rdx
0000000000003d7c         xor        rax, r14
0000000000003d7f         xor        r13, r15
0000000000003d82         rol        rax, 0x1
0000000000003d85         rol        r13, 0x1
0000000000003d88         add        rbp, qword [rsp+0x178+var_F0]
0000000000003d90         add        rbx, qword [rsp+0x178+var_E8]
0000000000003d98         add        rbp, r13
0000000000003d9b         add        rbx, r8
0000000000003d9e         xor        r9, rbp
0000000000003da1         add        rbp, qword [rsp+0x178+var_108]
0000000000003da6         xor        rcx, rbx
0000000000003da9         rol        r9, 0x20
0000000000003dad         rol        rcx, 0x20
0000000000003db1         add        rbx, qword [rsp+0x178+var_148]
0000000000003db6         add        r14, r9
0000000000003db9         add        r15, rcx
0000000000003dbc         xor        r13, r14
0000000000003dbf         xor        r8, r15
0000000000003dc2         ror        r13, 0x18
0000000000003dc6         ror        r8, 0x18
0000000000003dca         add        rbp, r13
0000000000003dcd         add        rbx, r8
0000000000003dd0         xor        r9, rbp
0000000000003dd3         xor        rcx, rbx
0000000000003dd6         ror        r9, 0x10
0000000000003dda         ror        rcx, 0x10
0000000000003dde         add        r14, r9
0000000000003de1         add        r15, rcx
0000000000003de4         xor        r13, r14
0000000000003de7         mov        qword [rsp+0x178+var_170], r15
0000000000003dec         xor        r8, r15
0000000000003def         rol        r13, 0x1
0000000000003df2         rol        r8, 0x1
0000000000003df5         mov        qword [rsp+0x178+var_160], r13
0000000000003dfa         add        r11, qword [rsp+0x178+var_120]
0000000000003dff         mov        r13, qword [rsp+0x178+var_158]
0000000000003e04         mov        r15, qword [rsp+0x178+var_168]
0000000000003e09         add        r11, rsi
0000000000003e0c         xor        rdx, r11
0000000000003e0f         rol        rdx, 0x20
0000000000003e13         add        r10, qword [rsp+0x178+var_D0]
0000000000003e1b         add        r11, qword [rsp+0x178+var_138]
0000000000003e20         add        r12, rdx
0000000000003e23         add        rbp, qword [rsp+0x178+var_F8]
0000000000003e2b         xor        rsi, r12
0000000000003e2e         ror        rsi, 0x18
0000000000003e32         add        r10, rax
0000000000003e35         add        r11, rsi
0000000000003e38         xor        r13, r10
0000000000003e3b         add        r10, qword [rsp+0x178+var_E0]
0000000000003e43         xor        rdx, r11
0000000000003e46         rol        r13, 0x20
0000000000003e4a         add        rbp, r8
0000000000003e4d         ror        rdx, 0x10
0000000000003e51         add        r15, r13
0000000000003e54         add        r12, rdx
0000000000003e57         xor        rax, r15
0000000000003e5a         xor        rsi, r12
0000000000003e5d         ror        rax, 0x18
0000000000003e61         rol        rsi, 0x1
0000000000003e64         add        r10, rax
0000000000003e67         xor        r13, r10
0000000000003e6a         ror        r13, 0x10
0000000000003e6e         add        r15, r13
0000000000003e71         xor        r13, rbp
0000000000003e74         rol        r13, 0x20
0000000000003e78         xor        rax, r15
0000000000003e7b         add        r12, r13
0000000000003e7e         rol        rax, 0x1
0000000000003e81         xor        r8, r12
0000000000003e84         ror        r8, 0x18
0000000000003e88         add        rbp, qword [rsp+0x178+var_D8]
0000000000003e90         add        rbx, qword [rsp+0x178+var_130]
0000000000003e95         add        r11, qword [rsp+0x178+var_110]
0000000000003e9a         add        rbx, rsi
0000000000003e9d         add        rbp, r8
0000000000003ea0         xor        r9, rbx
0000000000003ea3         add        r11, rax
0000000000003ea6         add        rbx, qword [rsp+0x178+var_118]
0000000000003eab         rol        r9, 0x20
0000000000003eaf         xor        rcx, r11
0000000000003eb2         add        r11, qword [rsp+0x178+var_140]
0000000000003eb7         add        r15, r9
0000000000003eba         rol        rcx, 0x20
0000000000003ebe         xor        r13, rbp
0000000000003ec1         xor        rsi, r15
0000000000003ec4         add        r14, rcx
0000000000003ec7         ror        r13, 0x10
0000000000003ecb         ror        rsi, 0x18
0000000000003ecf         xor        rax, r14
0000000000003ed2         add        r12, r13
0000000000003ed5         add        rbx, rsi
0000000000003ed8         ror        rax, 0x18
0000000000003edc         xor        r8, r12
0000000000003edf         xor        r9, rbx
0000000000003ee2         add        r11, rax
0000000000003ee5         rol        r8, 0x1
0000000000003ee8         ror        r9, 0x10
0000000000003eec         xor        rcx, r11
0000000000003eef         mov        qword [rsp+0x178+var_158], r13
0000000000003ef4         add        r15, r9
0000000000003ef7         ror        rcx, 0x10
0000000000003efb         mov        r13, qword [rsp+0x178+var_160]
0000000000003f00         xor        rsi, r15
0000000000003f03         mov        qword [rsp+0x178+var_168], r15
0000000000003f08         mov        r15, qword [rsp+0x178+var_170]
0000000000003f0d         rol        rsi, 0x1
0000000000003f10         add        r14, rcx
0000000000003f13         add        r10, qword [rsp+0x178+var_100]
0000000000003f18         add        rbp, qword [rsp+0x178+var_110]
0000000000003f1d         xor        rax, r14
0000000000003f20         add        rbx, qword [rsp+0x178+var_130]
0000000000003f25         rol        rax, 0x1
0000000000003f28         add        r10, r13
0000000000003f2b         xor        rdx, r10
0000000000003f2e         add        r10, qword [rsp+0x178+var_128]
0000000000003f33         rol        rdx, 0x20
0000000000003f37         add        r15, rdx
0000000000003f3a         xor        r13, r15
0000000000003f3d         ror        r13, 0x18
0000000000003f41         add        r10, r13
0000000000003f44         xor        rdx, r10
0000000000003f47         ror        rdx, 0x10
0000000000003f4b         add        r15, rdx
0000000000003f4e         xor        r13, r15
0000000000003f51         rol        r13, 0x1
0000000000003f54         add        rbp, r13
0000000000003f57         xor        r9, rbp
0000000000003f5a         add        rbp, qword [rsp+0x178+var_100]
0000000000003f5f         rol        r9, 0x20
0000000000003f63         add        r14, r9
0000000000003f66         xor        r13, r14
0000000000003f69         ror        r13, 0x18
0000000000003f6d         add        rbp, r13
0000000000003f70         xor        r9, rbp
0000000000003f73         ror        r9, 0x10
0000000000003f77         add        r14, r9
0000000000003f7a         xor        r13, r14
0000000000003f7d         rol        r13, 0x1
0000000000003f80         add        rbx, r8
0000000000003f83         add        r11, qword [rsp+0x178+var_E0]
0000000000003f8b         xor        rcx, rbx
0000000000003f8e         add        rbx, qword [rsp+0x178+var_140]
0000000000003f93         add        r10, qword [rsp+0x178+var_F0]
0000000000003f9b         rol        rcx, 0x20
0000000000003f9f         mov        qword [rsp+0x178+var_160], r13
0000000000003fa4         mov        r13, qword [rsp+0x178+var_158]
0000000000003fa9         add        r15, rcx
0000000000003fac         add        r11, rsi
0000000000003faf         xor        r8, r15
0000000000003fb2         xor        rdx, r11
0000000000003fb5         ror        r8, 0x18
0000000000003fb9         add        r11, qword [rsp+0x178+var_E8]
0000000000003fc1         rol        rdx, 0x20
0000000000003fc5         add        rbx, r8
0000000000003fc8         add        r10, rax
0000000000003fcb         add        r12, rdx
0000000000003fce         xor        rcx, rbx
0000000000003fd1         xor        r13, r10
0000000000003fd4         xor        rsi, r12
0000000000003fd7         ror        rcx, 0x10
0000000000003fdb         rol        r13, 0x20
0000000000003fdf         ror        rsi, 0x18
0000000000003fe3         add        r15, rcx
0000000000003fe6         add        r11, rsi
0000000000003fe9         xor        r8, r15
0000000000003fec         mov        qword [rsp+0x178+var_170], r15
0000000000003ff1         xor        rdx, r11
0000000000003ff4         mov        r15, qword [rsp+0x178+var_168]
0000000000003ff9         rol        r8, 0x1
0000000000003ffc         ror        rdx, 0x10
0000000000004000         add        r12, rdx                                    ; DATA XREF=sub_6300+88
0000000000004003         xor        rsi, r12
0000000000004006         add        r15, r13
0000000000004009         rol        rsi, 0x1
000000000000400c         xor        rax, r15
000000000000400f         add        r10, qword [rsp+0x178+var_D8]
0000000000004017         add        rbp, qword [rsp+0x178+var_138]
000000000000401c         ror        rax, 0x18
0000000000004020         add        r10, rax
0000000000004023         xor        r13, r10
0000000000004026         add        rbp, r8
0000000000004029         ror        r13, 0x10
000000000000402d         add        r15, r13
0000000000004030         xor        r13, rbp
0000000000004033         add        rbp, qword [rsp+0x178+var_118]
0000000000004038         rol        r13, 0x20
000000000000403c         xor        rax, r15
000000000000403f         add        r12, r13
0000000000004042         rol        rax, 0x1
0000000000004045         xor        r8, r12
0000000000004048         ror        r8, 0x18
000000000000404c         add        rbp, r8
000000000000404f         xor        r13, rbp
0000000000004052         ror        r13, 0x10
0000000000004056         mov        qword [rsp+0x178+var_158], r13
000000000000405b         add        rbx, qword [rsp+0x178+var_120]
0000000000004060         add        r12, r13
0000000000004063         xor        r8, r12
0000000000004066         mov        r13, qword [rsp+0x178+var_160]
000000000000406b         rol        r8, 0x1
000000000000406e         add        rbx, rsi
0000000000004071         xor        r9, rbx
0000000000004074         add        rbx, qword [rsp+0x178+var_F8]
000000000000407c         rol        r9, 0x20
0000000000004080         add        r15, r9
0000000000004083         xor        rsi, r15
0000000000004086         ror        rsi, 0x18
000000000000408a         add        rbx, rsi
000000000000408d         xor        r9, rbx
0000000000004090         add        r11, qword [rsp+0x178+var_128]
0000000000004095         add        r10, qword [rsp+0x178+var_D0]
000000000000409d         ror        r9, 0x10
00000000000040a1         add        r15, r9
00000000000040a4         mov        qword [rsp+0x178+var_168], r15
00000000000040a9         xor        rsi, r15
00000000000040ac         mov        r15, qword [rsp+0x178+var_170]
00000000000040b1         add        r11, rax
00000000000040b4         add        r10, r13
00000000000040b7         rol        rsi, 0x1
00000000000040ba         xor        rcx, r11
00000000000040bd         xor        rdx, r10
00000000000040c0         add        r11, qword [rsp+0x178+var_148]
00000000000040c5         rol        rcx, 0x20
00000000000040c9         rol        rdx, 0x20
00000000000040cd         add        r10, qword [rsp+0x178+var_108]
00000000000040d2         add        r14, rcx
00000000000040d5         add        r15, rdx
00000000000040d8         xor        rax, r14
00000000000040db         xor        r13, r15
00000000000040de         ror        rax, 0x18
00000000000040e2         ror        r13, 0x18
00000000000040e6         add        r11, rax
00000000000040e9         add        r10, r13
00000000000040ec         xor        rcx, r11
00000000000040ef         xor        rdx, r10
00000000000040f2         ror        rcx, 0x10
00000000000040f6         ror        rdx, 0x10
00000000000040fa         add        r14, rcx
00000000000040fd         add        r15, rdx
0000000000004100         xor        rax, r14
0000000000004103         xor        r13, r15
0000000000004106         rol        rax, 0x1
0000000000004109         rol        r13, 0x1
000000000000410c         add        rbp, qword [rsp+0x178+var_100]
0000000000004111         add        rbx, qword [rsp+0x178+var_120]
0000000000004116         add        r11, qword [rsp+0x178+var_138]
000000000000411b         add        rbp, r13
000000000000411e         add        rbx, r8
0000000000004121         xor        r9, rbp
0000000000004124         add        rbp, qword [rsp+0x178+var_148]
0000000000004129         xor        rcx, rbx
000000000000412c         rol        r9, 0x20
0000000000004130         add        rbx, qword [rsp+0x178+var_110]
0000000000004135         rol        rcx, 0x20
0000000000004139         add        r14, r9
000000000000413c         add        r11, rsi
000000000000413f         add        r15, rcx
0000000000004142         xor        r13, r14
0000000000004145         xor        rdx, r11
0000000000004148         xor        r8, r15
000000000000414b         ror        r13, 0x18
000000000000414f         ror        r8, 0x18
0000000000004153         add        rbp, r13
0000000000004156         add        rbx, r8
0000000000004159         xor        r9, rbp
000000000000415c         xor        rcx, rbx
000000000000415f         ror        r9, 0x10
0000000000004163         ror        rcx, 0x10
0000000000004167         add        r14, r9
000000000000416a         add        r15, rcx
000000000000416d         xor        r13, r14
0000000000004170         xor        r8, r15
0000000000004173         rol        r13, 0x1
0000000000004176         mov        qword [rsp+0x178+var_170], r15
000000000000417b         rol        r8, 0x1
000000000000417e         rol        rdx, 0x20
0000000000004182         add        r10, qword [rsp+0x178+var_F8]
000000000000418a         mov        qword [rsp+0x178+var_160], r13
000000000000418f         mov        r13, qword [rsp+0x178+var_158]
0000000000004194         add        r12, rdx
0000000000004197         mov        r15, qword [rsp+0x178+var_168]
000000000000419c         add        r11, qword [rsp+0x178+var_128]
00000000000041a1         xor        rsi, r12
00000000000041a4         add        rbp, qword [rsp+0x178+var_D8]
00000000000041ac         ror        rsi, 0x18
00000000000041b0         add        r10, rax
00000000000041b3         xor        r13, r10
00000000000041b6         add        r10, qword [rsp+0x178+var_D0]
00000000000041be         rol        r13, 0x20
00000000000041c2         add        r11, rsi
00000000000041c5         add        r15, r13
00000000000041c8         xor        rdx, r11
00000000000041cb         add        rbp, r8
00000000000041ce         xor        rax, r15
00000000000041d1         ror        rdx, 0x10
00000000000041d5         ror        rax, 0x18
00000000000041d9         add        r12, rdx
00000000000041dc         add        r10, rax
00000000000041df         xor        rsi, r12
00000000000041e2         xor        r13, r10
00000000000041e5         rol        rsi, 0x1
00000000000041e8         ror        r13, 0x10
00000000000041ec         add        r15, r13
00000000000041ef         xor        r13, rbp
00000000000041f2         rol        r13, 0x20
00000000000041f6         xor        rax, r15
00000000000041f9         add        r12, r13
00000000000041fc         rol        rax, 0x1
00000000000041ff         xor        r8, r12
0000000000004202         ror        r8, 0x18
0000000000004206         add        rbp, qword [rsp+0x178+var_140]
000000000000420b         add        rbx, qword [rsp+0x178+var_F0]
0000000000004213         add        r11, qword [rsp+0x178+var_118]
0000000000004218         add        rbx, rsi
000000000000421b         add        rbp, r8
000000000000421e         xor        r9, rbx
0000000000004221         add        r11, rax
0000000000004224         add        rbx, qword [rsp+0x178+var_E8]
000000000000422c         rol        r9, 0x20
0000000000004230         xor        rcx, r11
0000000000004233         add        r11, qword [rsp+0x178+var_108]
0000000000004238         add        r15, r9
000000000000423b         rol        rcx, 0x20
000000000000423f         xor        r13, rbp
0000000000004242         xor        rsi, r15
0000000000004245         add        r14, rcx
0000000000004248         ror        r13, 0x10
000000000000424c         ror        rsi, 0x18
0000000000004250         xor        rax, r14
0000000000004253         add        r12, r13
0000000000004256         add        rbx, rsi
0000000000004259         ror        rax, 0x18
000000000000425d         xor        r8, r12
0000000000004260         xor        r9, rbx
0000000000004263         add        r11, rax
0000000000004266         rol        r8, 0x1
0000000000004269         ror        r9, 0x10
000000000000426d         xor        rcx, r11
0000000000004270         mov        qword [rsp+0x178+var_158], r13
0000000000004275         add        r15, r9
0000000000004278         ror        rcx, 0x10
000000000000427c         mov        r13, qword [rsp+0x178+var_160]
0000000000004281         xor        rsi, r15
0000000000004284         mov        qword [rsp+0x178+var_168], r15
0000000000004289         mov        r15, qword [rsp+0x178+var_170]
000000000000428e         rol        rsi, 0x1
0000000000004291         add        r14, rcx
0000000000004294         add        r10, qword [rsp+0x178+var_130]
0000000000004299         xor        rax, r14
000000000000429c         rol        rax, 0x1
000000000000429f         add        r10, r13
00000000000042a2         xor        rdx, r10
00000000000042a5         add        r10, qword [rsp+0x178+var_E0]
00000000000042ad         add        rbp, qword [rsp+0x178+var_138]
00000000000042b2         rol        rdx, 0x20
00000000000042b6         add        rbx, qword [rsp+0x178+var_118]
00000000000042bb         add        r15, rdx
00000000000042be         xor        r13, r15
00000000000042c1         ror        r13, 0x18
00000000000042c5         add        r10, r13
00000000000042c8         xor        rdx, r10
00000000000042cb         ror        rdx, 0x10
00000000000042cf         add        r15, rdx
00000000000042d2         xor        r13, r15
00000000000042d5         rol        r13, 0x1
00000000000042d8         add        rbp, r13
00000000000042db         xor        r9, rbp
00000000000042de         add        rbp, qword [rsp+0x178+var_E8]
00000000000042e6         rol        r9, 0x20
00000000000042ea         add        r14, r9
00000000000042ed         xor        r13, r14
00000000000042f0         ror        r13, 0x18
00000000000042f4         add        rbp, r13
00000000000042f7         xor        r9, rbp
00000000000042fa         ror        r9, 0x10
00000000000042fe         add        r14, r9
0000000000004301         xor        r13, r14
0000000000004304         rol        r13, 0x1
0000000000004307         add        rbx, r8
000000000000430a         add        r11, qword [rsp+0x178+var_148]
000000000000430f         xor        rcx, rbx
0000000000004312         add        rbx, qword [rsp+0x178+var_F8]
000000000000431a         add        r10, qword [rsp+0x178+var_108]
000000000000431f         rol        rcx, 0x20
0000000000004323         mov        qword [rsp+0x178+var_160], r13
0000000000004328         mov        r13, qword [rsp+0x178+var_158]
000000000000432d         add        r15, rcx
0000000000004330         add        r11, rsi
0000000000004333         xor        r8, r15
0000000000004336         xor        rdx, r11
0000000000004339         ror        r8, 0x18
000000000000433d         add        r11, qword [rsp+0x178+var_F0]
0000000000004345         rol        rdx, 0x20
0000000000004349         add        rbx, r8
000000000000434c         add        r10, rax
000000000000434f         add        r12, rdx
0000000000004352         xor        rcx, rbx
0000000000004355         xor        r13, r10
0000000000004358         xor        rsi, r12
000000000000435b         ror        rcx, 0x10
000000000000435f         rol        r13, 0x20
0000000000004363         ror        rsi, 0x18
0000000000004367         add        r15, rcx
000000000000436a         add        r11, rsi
000000000000436d         mov        qword [rsp+0x178+var_170], r15
0000000000004372         xor        r8, r15
0000000000004375         xor        rdx, r11
0000000000004378         mov        r15, qword [rsp+0x178+var_168]
000000000000437d         rol        r8, 0x1
0000000000004380         ror        rdx, 0x10
0000000000004384         add        r12, rdx
0000000000004387         xor        rsi, r12
000000000000438a         add        r15, r13
000000000000438d         rol        rsi, 0x1
0000000000004390         xor        rax, r15
0000000000004393         add        r10, qword [rsp+0x178+var_130]
0000000000004398         add        rbp, qword [rsp+0x178+var_128]
000000000000439d         ror        rax, 0x18
00000000000043a1         add        rbx, qword [rsp+0x178+var_110]
00000000000043a6         add        r10, rax
00000000000043a9         xor        r13, r10
00000000000043ac         add        rbp, r8
00000000000043af         add        rbx, rsi
00000000000043b2         ror        r13, 0x10
00000000000043b6         xor        r9, rbx
00000000000043b9         add        rbx, qword [rsp+0x178+var_120]
00000000000043be         add        r15, r13
00000000000043c1         xor        r13, rbp
00000000000043c4         add        rbp, qword [rsp+0x178+var_E0]
00000000000043cc         rol        r13, 0x20
00000000000043d0         rol        r9, 0x20
00000000000043d4         xor        rax, r15
00000000000043d7         add        r12, r13
00000000000043da         add        r15, r9
00000000000043dd         rol        rax, 0x1
00000000000043e0         xor        r8, r12
00000000000043e3         xor        rsi, r15
00000000000043e6         ror        r8, 0x18
00000000000043ea         ror        rsi, 0x18
00000000000043ee         add        rbp, r8
00000000000043f1         add        rbx, rsi
00000000000043f4         xor        r13, rbp
00000000000043f7         ror        r13, 0x10
00000000000043fb         add        r12, r13
00000000000043fe         mov        qword [rsp+0x178+var_158], r13
0000000000004403         mov        r13, qword [rsp+0x178+var_160]
0000000000004408         xor        r8, r12
000000000000440b         rol        r8, 0x1
000000000000440e         xor        r9, rbx
0000000000004411         add        r11, qword [rsp+0x178+var_D0]
0000000000004419         add        r10, qword [rsp+0x178+var_140]
000000000000441e         ror        r9, 0x10
0000000000004422         add        r15, r9
0000000000004425         xor        rsi, r15
0000000000004428         mov        qword [rsp+0x178+var_168], r15
000000000000442d         mov        r15, qword [rsp+0x178+var_170]
0000000000004432         add        r11, rax
0000000000004435         rol        rsi, 0x1
0000000000004438         add        r10, r13
000000000000443b         xor        rcx, r11
000000000000443e         add        r11, qword [rsp+0x178+var_D8]
0000000000004446         xor        rdx, r10
0000000000004449         rol        rcx, 0x20
000000000000444d         add        r10, qword [rsp+0x178+var_100]
0000000000004452         rol        rdx, 0x20
0000000000004456         add        r14, rcx
0000000000004459         add        r15, rdx
000000000000445c         xor        rax, r14
000000000000445f         xor        r13, r15
0000000000004462         ror        rax, 0x18
0000000000004466         ror        r13, 0x18
000000000000446a         add        r11, rax
000000000000446d         add        r10, r13
0000000000004470         xor        rcx, r11
0000000000004473         xor        rdx, r10
0000000000004476         ror        rcx, 0x10
000000000000447a         ror        rdx, 0x10
000000000000447e         add        r14, rcx
0000000000004481         add        r15, rdx
0000000000004484         xor        rax, r14
0000000000004487         xor        r13, r15
000000000000448a         rol        rax, 0x1
000000000000448d         rol        r13, 0x1
0000000000004490         add        rbp, qword [rsp+0x178+var_E8]
0000000000004498         add        rbx, qword [rsp+0x178+var_140]
000000000000449d         add        r11, qword [rsp+0x178+var_D8]
00000000000044a5         add        rbp, r13
00000000000044a8         add        rbx, r8
00000000000044ab         xor        r9, rbp
00000000000044ae         xor        rcx, rbx
00000000000044b1         add        rbp, qword [rsp+0x178+var_120]
00000000000044b6         rol        r9, 0x20
00000000000044ba         rol        rcx, 0x20
00000000000044be         add        rbx, qword [rsp+0x178+var_D0]
00000000000044c6         add        r14, r9
00000000000044c9         add        r15, rcx
00000000000044cc         add        r11, rsi
00000000000044cf         xor        r13, r14
00000000000044d2         xor        r8, r15
00000000000044d5         xor        rdx, r11
00000000000044d8         ror        r13, 0x18
00000000000044dc         ror        r8, 0x18
00000000000044e0         add        rbp, r13
00000000000044e3         add        rbx, r8
00000000000044e6         xor        r9, rbp
00000000000044e9         xor        rcx, rbx
00000000000044ec         ror        r9, 0x10
00000000000044f0         ror        rcx, 0x10
00000000000044f4         add        r14, r9
00000000000044f7         add        r15, rcx
00000000000044fa         xor        r13, r14
00000000000044fd         xor        r8, r15
0000000000004500         mov        qword [rsp+0x178+var_170], r15
0000000000004505         rol        r13, 0x1
0000000000004508         rol        r8, 0x1
000000000000450b         rol        rdx, 0x20
000000000000450f         mov        qword [rsp+0x178+var_160], r13
0000000000004514         add        r11, qword [rsp+0x178+var_E0]
000000000000451c         add        r12, rdx
000000000000451f         add        r10, qword [rsp+0x178+var_128]
0000000000004524         mov        r13, qword [rsp+0x178+var_158]
0000000000004529         xor        rsi, r12
000000000000452c         mov        r15, qword [rsp+0x178+var_168]
0000000000004531         add        rbp, qword [rsp+0x178+var_148]
0000000000004536         ror        rsi, 0x18
000000000000453a         add        r11, rsi
000000000000453d         add        r10, rax
0000000000004540         xor        rdx, r11
0000000000004543         xor        r13, r10
0000000000004546         add        r10, qword [rsp+0x178+var_F8]
000000000000454e         add        rbp, r8
0000000000004551         rol        r13, 0x20
0000000000004555         ror        rdx, 0x10
0000000000004559         add        r15, r13
000000000000455c         add        r12, rdx
000000000000455f         xor        rax, r15
0000000000004562         xor        rsi, r12
0000000000004565         ror        rax, 0x18
0000000000004569         rol        rsi, 0x1
000000000000456c         add        r10, rax
000000000000456f         xor        r13, r10
0000000000004572         ror        r13, 0x10
0000000000004576         add        r15, r13
0000000000004579         xor        r13, rbp
000000000000457c         rol        r13, 0x20
0000000000004580         xor        rax, r15
0000000000004583         add        r12, r13
0000000000004586         rol        rax, 0x1
0000000000004589         xor        r8, r12
000000000000458c         ror        r8, 0x18
0000000000004590         add        rbp, qword [rsp+0x178+var_110]
0000000000004595         add        rbx, qword [rsp+0x178+var_118]
000000000000459a         add        r11, qword [rsp+0x178+var_100]
000000000000459f         add        rbx, rsi
00000000000045a2         add        rbp, r8
00000000000045a5         xor        r9, rbx
00000000000045a8         add        r11, rax
00000000000045ab         add        rbx, qword [rsp+0x178+var_130]
00000000000045b0         rol        r9, 0x20
00000000000045b4         xor        rcx, r11
00000000000045b7         add        r11, qword [rsp+0x178+var_138]
00000000000045bc         add        r15, r9
00000000000045bf         rol        rcx, 0x20
00000000000045c3         xor        r13, rbp
00000000000045c6         xor        rsi, r15
00000000000045c9         add        r14, rcx
00000000000045cc         ror        r13, 0x10
00000000000045d0         ror        rsi, 0x18
00000000000045d4         xor        rax, r14
00000000000045d7         add        r12, r13
00000000000045da         add        rbx, rsi
00000000000045dd         ror        rax, 0x18
00000000000045e1         xor        r8, r12
00000000000045e4         xor        r9, rbx
00000000000045e7         add        r11, rax
00000000000045ea         rol        r8, 0x1
00000000000045ed         ror        r9, 0x10
00000000000045f1         xor        rcx, r11
00000000000045f4         mov        qword [rsp+0x178+var_158], r13
00000000000045f9         add        r15, r9
00000000000045fc         ror        rcx, 0x10
0000000000004600         mov        r13, qword [rsp+0x178+var_160]
0000000000004605         xor        rsi, r15
0000000000004608         mov        qword [rsp+0x178+var_168], r15
000000000000460d         mov        r15, qword [rsp+0x178+var_170]
0000000000004612         rol        rsi, 0x1
0000000000004615         add        r14, rcx
0000000000004618         add        r10, qword [rsp+0x178+var_108]
000000000000461d         add        rbp, qword [rsp+0x178+var_E0]
0000000000004625         xor        rax, r14
0000000000004628         add        rbx, qword [rsp+0x178+var_110]
000000000000462d         rol        rax, 0x1
0000000000004630         add        r10, r13
0000000000004633         xor        rdx, r10
0000000000004636         add        r10, qword [rsp+0x178+var_F0]
000000000000463e         rol        rdx, 0x20
0000000000004642         add        r15, rdx
0000000000004645         xor        r13, r15
0000000000004648         ror        r13, 0x18
000000000000464c         add        r10, r13
000000000000464f         xor        rdx, r10
0000000000004652         ror        rdx, 0x10
0000000000004656         add        r15, rdx
0000000000004659         xor        r13, r15
000000000000465c         rol        r13, 0x1
000000000000465f         add        rbp, r13
0000000000004662         xor        r9, rbp
0000000000004665         add        rbp, qword [rsp+0x178+var_F0]
000000000000466d         rol        r9, 0x20
0000000000004671         add        r14, r9
0000000000004674         xor        r13, r14
0000000000004677         ror        r13, 0x18
000000000000467b         add        rbp, r13
000000000000467e         xor        r9, rbp
0000000000004681         ror        r9, 0x10
0000000000004685         add        r14, r9
0000000000004688         xor        r13, r14
000000000000468b         rol        r13, 0x1
000000000000468e         add        rbx, r8
0000000000004691         add        r11, qword [rsp+0x178+var_E8]
0000000000004699         xor        rcx, rbx
000000000000469c         add        rbx, qword [rsp+0x178+var_D8]
00000000000046a4         add        r10, qword [rsp+0x178+var_130]
00000000000046a9         rol        rcx, 0x20
00000000000046ad         mov        qword [rsp+0x178+var_160], r13
00000000000046b2         mov        r13, qword [rsp+0x178+var_158]
00000000000046b7         add        r15, rcx
00000000000046ba         add        r11, rsi
00000000000046bd         xor        r8, r15
00000000000046c0         xor        rdx, r11
00000000000046c3         ror        r8, 0x18
00000000000046c7         add        r11, qword [rsp+0x178+var_140]
00000000000046cc         rol        rdx, 0x20
00000000000046d0         add        rbx, r8
00000000000046d3         add        r10, rax
00000000000046d6         add        r12, rdx
00000000000046d9         xor        rcx, rbx
00000000000046dc         xor        r13, r10
00000000000046df         xor        rsi, r12
00000000000046e2         ror        rcx, 0x10
00000000000046e6         rol        r13, 0x20
00000000000046ea         ror        rsi, 0x18
00000000000046ee         add        r15, rcx
00000000000046f1         add        r11, rsi
00000000000046f4         xor        r8, r15
00000000000046f7         mov        qword [rsp+0x178+var_170], r15
00000000000046fc         xor        rdx, r11
00000000000046ff         mov        r15, qword [rsp+0x178+var_168]
0000000000004704         rol        r8, 0x1
0000000000004707         ror        rdx, 0x10
000000000000470b         add        r12, rdx
000000000000470e         xor        rsi, r12
0000000000004711         add        r15, r13
0000000000004714         rol        rsi, 0x1
0000000000004717         xor        rax, r15
000000000000471a         add        r10, qword [rsp+0x178+var_100]
000000000000471f         add        rbp, qword [rsp+0x178+var_120]
0000000000004724         ror        rax, 0x18
0000000000004728         add        r10, rax
000000000000472b         xor        r13, r10
000000000000472e         add        rbp, r8
0000000000004731         ror        r13, 0x10
0000000000004735         add        r15, r13
0000000000004738         xor        r13, rbp
000000000000473b         add        rbp, qword [rsp+0x178+var_148]
0000000000004740         rol        r13, 0x20
0000000000004744         xor        rax, r15
0000000000004747         add        r12, r13
000000000000474a         rol        rax, 0x1
000000000000474d         xor        r8, r12
0000000000004750         ror        r8, 0x18
0000000000004754         add        rbp, r8
0000000000004757         xor        r13, rbp
000000000000475a         ror        r13, 0x10
000000000000475e         mov        qword [rsp+0x178+var_158], r13
0000000000004763         add        rbx, qword [rsp+0x178+var_D0]
000000000000476b         add        r12, r13
000000000000476e         xor        r8, r12
0000000000004771         mov        r13, qword [rsp+0x178+var_160]
0000000000004776         rol        r8, 0x1
0000000000004779         add        rbx, rsi
000000000000477c         xor        r9, rbx
000000000000477f         add        rbx, qword [rsp+0x178+var_128]
0000000000004784         rol        r9, 0x20
0000000000004788         add        r15, r9
000000000000478b         xor        rsi, r15
000000000000478e         ror        rsi, 0x18
0000000000004792         add        rbx, rsi
0000000000004795         xor        r9, rbx
0000000000004798         add        r11, qword [rsp+0x178+var_108]
000000000000479d         add        r10, qword [rsp+0x178+var_138]
00000000000047a2         ror        r9, 0x10
00000000000047a6         add        r15, r9
00000000000047a9         mov        qword [rsp+0x178+var_168], r15
00000000000047ae         xor        rsi, r15
00000000000047b1         mov        r15, qword [rsp+0x178+var_170]
00000000000047b6         add        r11, rax
00000000000047b9         add        r10, r13
00000000000047bc         rol        rsi, 0x1
00000000000047bf         xor        rcx, r11
00000000000047c2         xor        rdx, r10
00000000000047c5         add        r11, qword [rsp+0x178+var_118]
00000000000047ca         rol        rcx, 0x20
00000000000047ce         rol        rdx, 0x20
00000000000047d2         add        r10, qword [rsp+0x178+var_F8]
00000000000047da         add        r14, rcx
00000000000047dd         add        r15, rdx
00000000000047e0         xor        rax, r14
00000000000047e3         xor        r13, r15
00000000000047e6         ror        rax, 0x18
00000000000047ea         ror        r13, 0x18
00000000000047ee         add        r11, rax
00000000000047f1         add        r10, r13
00000000000047f4         xor        rcx, r11
00000000000047f7         xor        rdx, r10
00000000000047fa         ror        rcx, 0x10
00000000000047fe         ror        rdx, 0x10
0000000000004802         add        r14, rcx
0000000000004805         add        r15, rdx
0000000000004808         xor        rax, r14
000000000000480b         xor        r13, r15
000000000000480e         rol        rax, 0x1
0000000000004811         rol        r13, 0x1
0000000000004814         add        rbp, qword [rsp+0x178+var_118]
0000000000004819         add        rbx, qword [rsp+0x178+var_D8]
0000000000004821         add        r11, qword [rsp+0x178+var_F0]
0000000000004829         add        rbp, r13
000000000000482c         add        rbx, r8
000000000000482f         xor        r9, rbp
0000000000004832         add        rbp, qword [rsp+0x178+var_D0]
000000000000483a         xor        rcx, rbx
000000000000483d         rol        r9, 0x20
0000000000004841         add        rbx, qword [rsp+0x178+var_100]
0000000000004846         rol        rcx, 0x20
000000000000484a         add        r14, r9
000000000000484d         add        r11, rsi
0000000000004850         add        r15, rcx
0000000000004853         xor        r13, r14
0000000000004856         xor        rdx, r11
0000000000004859         xor        r8, r15
000000000000485c         ror        r13, 0x18
0000000000004860         ror        r8, 0x18
0000000000004864         add        rbp, r13
0000000000004867         add        rbx, r8
000000000000486a         xor        r9, rbp
000000000000486d         xor        rcx, rbx
0000000000004870         ror        r9, 0x10
0000000000004874         ror        rcx, 0x10
0000000000004878         add        r14, r9
000000000000487b         add        r15, rcx
000000000000487e         xor        r13, r14
0000000000004881         xor        r8, r15
0000000000004884         rol        r13, 0x1
0000000000004887         mov        qword [rsp+0x178+var_170], r15
000000000000488c         rol        r8, 0x1
000000000000488f         rol        rdx, 0x20
0000000000004893         add        r10, qword [rsp+0x178+var_148]
0000000000004898         mov        qword [rsp+0x178+var_160], r13
000000000000489d         mov        r13, qword [rsp+0x178+var_158]
00000000000048a2         add        r12, rdx
00000000000048a5         mov        r15, qword [rsp+0x178+var_168]
00000000000048aa         add        r11, qword [rsp+0x178+var_130]
00000000000048af         xor        rsi, r12
00000000000048b2         add        rbp, qword [rsp+0x178+var_E8]
00000000000048ba         ror        rsi, 0x18
00000000000048be         add        r10, rax
00000000000048c1         xor        r13, r10
00000000000048c4         add        r10, qword [rsp+0x178+var_108]
00000000000048c9         rol        r13, 0x20
00000000000048cd         add        r11, rsi
00000000000048d0         add        r15, r13
00000000000048d3         xor        rdx, r11
00000000000048d6         add        rbp, r8
00000000000048d9         xor        rax, r15
00000000000048dc         ror        rdx, 0x10
00000000000048e0         ror        rax, 0x18
00000000000048e4         add        r12, rdx
00000000000048e7         add        r10, rax
00000000000048ea         xor        rsi, r12
00000000000048ed         xor        r13, r10
00000000000048f0         rol        rsi, 0x1
00000000000048f3         ror        r13, 0x10
00000000000048f7         add        r15, r13
00000000000048fa         xor        r13, rbp
00000000000048fd         rol        r13, 0x20
0000000000004901         xor        rax, r15
0000000000004904         add        r12, r13
0000000000004907         rol        rax, 0x1
000000000000490a         xor        r8, r12
000000000000490d         ror        r8, 0x18
0000000000004911         add        rbp, qword [rsp+0x178+var_138]
0000000000004916         add        rbx, qword [rsp+0x178+var_E0]
000000000000491e         add        r11, qword [rsp+0x178+var_140]
0000000000004923         add        rbx, rsi
0000000000004926         add        rbp, r8
0000000000004929         xor        r9, rbx
000000000000492c         add        r11, rax
000000000000492f         add        rbx, qword [rsp+0x178+var_110]
0000000000004934         rol        r9, 0x20
0000000000004938         xor        rcx, r11
000000000000493b         add        r11, qword [rsp+0x178+var_128]
0000000000004940         add        r15, r9
0000000000004943         rol        rcx, 0x20
0000000000004947         xor        r13, rbp
000000000000494a         xor        rsi, r15
000000000000494d         add        r14, rcx
0000000000004950         ror        r13, 0x10
0000000000004954         ror        rsi, 0x18
0000000000004958         xor        rax, r14
000000000000495b         add        r12, r13
000000000000495e         add        rbx, rsi
0000000000004961         ror        rax, 0x18
0000000000004965         xor        r8, r12
0000000000004968         xor        r9, rbx
000000000000496b         add        r11, rax
000000000000496e         rol        r8, 0x1
0000000000004971         ror        r9, 0x10
0000000000004975         xor        rcx, r11
0000000000004978         mov        qword [rsp+0x178+var_158], r13
000000000000497d         add        r15, r9
0000000000004980         ror        rcx, 0x10
0000000000004984         mov        r13, qword [rsp+0x178+var_160]
0000000000004989         xor        rsi, r15
000000000000498c         mov        qword [rsp+0x178+var_168], r15
0000000000004991         mov        r15, qword [rsp+0x178+var_170]
0000000000004996         rol        rsi, 0x1
0000000000004999         add        r14, rcx
000000000000499c         add        r10, qword [rsp+0x178+var_F8]
00000000000049a4         xor        rax, r14
00000000000049a7         rol        rax, 0x1
00000000000049aa         add        r10, r13
00000000000049ad         xor        rdx, r10
00000000000049b0         add        r10, qword [rsp+0x178+var_120]
00000000000049b5         add        rbp, qword [rsp+0x178+var_F8]
00000000000049bd         rol        rdx, 0x20
00000000000049c1         add        rbx, qword [rsp+0x178+var_108]
00000000000049c6         add        r15, rdx
00000000000049c9         xor        r13, r15
00000000000049cc         ror        r13, 0x18
00000000000049d0         add        r10, r13
00000000000049d3         xor        rdx, r10
00000000000049d6         ror        rdx, 0x10
00000000000049da         add        r15, rdx
00000000000049dd         xor        r13, r15
00000000000049e0         rol        r13, 0x1
00000000000049e3         add        rbp, r13
00000000000049e6         xor        r9, rbp
00000000000049e9         add        rbp, qword [rsp+0x178+var_138]
00000000000049ee         rol        r9, 0x20
00000000000049f2         add        r14, r9
00000000000049f5         xor        r13, r14
00000000000049f8         ror        r13, 0x18
00000000000049fc         add        rbp, r13
00000000000049ff         xor        r9, rbp
0000000000004a02         ror        r9, 0x10
0000000000004a06         add        r14, r9
0000000000004a09         xor        r13, r14
0000000000004a0c         rol        r13, 0x1
0000000000004a0f         add        rbx, r8
0000000000004a12         add        r11, qword [rsp+0x178+var_110]
0000000000004a17         xor        rcx, rbx
0000000000004a1a         add        rbx, qword [rsp+0x178+var_128]
0000000000004a1f         add        r10, qword [rsp+0x178+var_140]
0000000000004a24         rol        rcx, 0x20
0000000000004a28         mov        qword [rsp+0x178+var_160], r13
0000000000004a2d         mov        r13, qword [rsp+0x178+var_158]
0000000000004a32         add        r15, rcx
0000000000004a35         add        r11, rsi
0000000000004a38         xor        r8, r15
0000000000004a3b         xor        rdx, r11
0000000000004a3e         ror        r8, 0x18
0000000000004a42         add        r11, qword [rsp+0x178+var_118]
0000000000004a47         rol        rdx, 0x20
0000000000004a4b         add        rbx, r8
0000000000004a4e         add        r10, rax
0000000000004a51         add        r12, rdx
0000000000004a54         xor        rcx, rbx
0000000000004a57         xor        r13, r10
0000000000004a5a         xor        rsi, r12
0000000000004a5d         ror        rcx, 0x10
0000000000004a61         rol        r13, 0x20
0000000000004a65         ror        rsi, 0x18
0000000000004a69         add        r15, rcx
0000000000004a6c         add        r11, rsi
0000000000004a6f         mov        qword [rsp+0x178+var_170], r15
0000000000004a74         xor        r8, r15
0000000000004a77         xor        rdx, r11
0000000000004a7a         mov        r15, qword [rsp+0x178+var_168]
0000000000004a7f         rol        r8, 0x1
0000000000004a82         ror        rdx, 0x10
0000000000004a86         add        r12, rdx
0000000000004a89         xor        rsi, r12
0000000000004a8c         add        r15, r13
0000000000004a8f         rol        rsi, 0x1
0000000000004a92         xor        rax, r15
0000000000004a95         add        r10, qword [rsp+0x178+var_120]
0000000000004a9a         add        rbp, qword [rsp+0x178+var_D0]
0000000000004aa2         ror        rax, 0x18
0000000000004aa6         add        rbx, qword [rsp+0x178+var_100]
0000000000004aab         add        r10, rax
0000000000004aae         xor        r13, r10
0000000000004ab1         add        rbp, r8
0000000000004ab4         add        rbx, rsi
0000000000004ab7         ror        r13, 0x10
0000000000004abb         xor        r9, rbx
0000000000004abe         add        rbx, qword [rsp+0x178+var_D8]
0000000000004ac6         add        r15, r13
0000000000004ac9         xor        r13, rbp
0000000000004acc         add        rbp, qword [rsp+0x178+var_F0]
0000000000004ad4         rol        r13, 0x20
0000000000004ad8         rol        r9, 0x20
0000000000004adc         xor        rax, r15
0000000000004adf         add        r12, r13
0000000000004ae2         add        r15, r9
0000000000004ae5         rol        rax, 0x1
0000000000004ae8         xor        r8, r12
0000000000004aeb         xor        rsi, r15
0000000000004aee         ror        r8, 0x18
0000000000004af2         ror        rsi, 0x18
0000000000004af6         add        rbp, r8
0000000000004af9         add        rbx, rsi
0000000000004afc         xor        r13, rbp
0000000000004aff         ror        r13, 0x10
0000000000004b03         add        r12, r13
0000000000004b06         mov        qword [rsp+0x178+var_158], r13
0000000000004b0b         mov        r13, qword [rsp+0x178+var_160]
0000000000004b10         xor        r8, r12
0000000000004b13         rol        r8, 0x1
0000000000004b16         xor        r9, rbx
0000000000004b19         add        r11, qword [rsp+0x178+var_130]
0000000000004b1e         add        r10, qword [rsp+0x178+var_E0]
0000000000004b26         ror        r9, 0x10
0000000000004b2a         add        r15, r9
0000000000004b2d         xor        rsi, r15
0000000000004b30         mov        qword [rsp+0x178+var_168], r15
0000000000004b35         mov        r15, qword [rsp+0x178+var_170]
0000000000004b3a         add        r11, rax
0000000000004b3d         rol        rsi, 0x1
0000000000004b40         add        r10, r13
0000000000004b43         xor        rcx, r11
0000000000004b46         add        r11, qword [rsp+0x178+var_E8]
0000000000004b4e         xor        rdx, r10
0000000000004b51         rol        rcx, 0x20
0000000000004b55         add        r10, qword [rsp+0x178+var_148]
0000000000004b5a         rol        rdx, 0x20
0000000000004b5e         add        r14, rcx
0000000000004b61         add        r15, rdx
0000000000004b64         xor        rax, r14
0000000000004b67         xor        r13, r15
0000000000004b6a         ror        rax, 0x18
0000000000004b6e         ror        r13, 0x18
0000000000004b72         add        r11, rax
0000000000004b75         add        r10, r13
0000000000004b78         xor        rcx, r11
0000000000004b7b         xor        rdx, r10
0000000000004b7e         ror        rcx, 0x10
0000000000004b82         ror        rdx, 0x10
0000000000004b86         add        r14, rcx
0000000000004b89         add        r15, rdx
0000000000004b8c         xor        rax, r14
0000000000004b8f         xor        r13, r15
0000000000004b92         rol        rax, 0x1
0000000000004b95         rol        r13, 0x1
0000000000004b98         add        rbp, qword [rsp+0x178+var_148]
0000000000004b9d         add        rbx, qword [rsp+0x178+var_138]
0000000000004ba2         add        r11, qword [rsp+0x178+var_128]
0000000000004ba7         add        rbp, r13
0000000000004baa         add        rbx, r8
0000000000004bad         xor        r9, rbp
0000000000004bb0         xor        rcx, rbx
0000000000004bb3         add        rbp, qword [rsp+0x178+var_140]
0000000000004bb8         rol        r9, 0x20
0000000000004bbc         rol        rcx, 0x20
0000000000004bc0         add        rbx, qword [rsp+0x178+var_130]
0000000000004bc5         add        r14, r9
0000000000004bc8         add        r15, rcx
0000000000004bcb         add        r11, rsi
0000000000004bce         xor        r13, r14
0000000000004bd1         xor        r8, r15
0000000000004bd4         xor        rdx, r11
0000000000004bd7         ror        r13, 0x18
0000000000004bdb         ror        r8, 0x18
0000000000004bdf         add        rbp, r13
0000000000004be2         add        rbx, r8
0000000000004be5         xor        r9, rbp
0000000000004be8         xor        rcx, rbx
0000000000004beb         ror        r9, 0x10
0000000000004bef         ror        rcx, 0x10
0000000000004bf3         add        r14, r9
0000000000004bf6         add        r15, rcx
0000000000004bf9         xor        r13, r14
0000000000004bfc         xor        r8, r15
0000000000004bff         mov        qword [rsp+0x178+var_170], r15
0000000000004c04         rol        r13, 0x1
0000000000004c07         rol        r8, 0x1
0000000000004c0a         rol        rdx, 0x20
0000000000004c0e         mov        qword [rsp+0x178+var_160], r13
0000000000004c13         add        r11, qword [rsp+0x178+var_120]
0000000000004c18         add        r12, rdx
0000000000004c1b         add        r10, qword [rsp+0x178+var_118]
0000000000004c20         mov        r13, qword [rsp+0x178+var_158]
0000000000004c25         xor        rsi, r12
0000000000004c28         mov        r15, qword [rsp+0x178+var_168]
0000000000004c2d         add        rbp, qword [rsp+0x178+var_108]
0000000000004c32         ror        rsi, 0x18
0000000000004c36         add        r11, rsi
0000000000004c39         add        r10, rax
0000000000004c3c         xor        rdx, r11
0000000000004c3f         xor        r13, r10
0000000000004c42         add        r10, qword [rsp+0x178+var_110]
0000000000004c47         add        rbp, r8
0000000000004c4a         rol        r13, 0x20
0000000000004c4e         ror        rdx, 0x10
0000000000004c52         add        r15, r13
0000000000004c55         add        r12, rdx
0000000000004c58         xor        rax, r15
0000000000004c5b         xor        rsi, r12
0000000000004c5e         ror        rax, 0x18
0000000000004c62         rol        rsi, 0x1
0000000000004c65         add        r10, rax
0000000000004c68         xor        r13, r10
0000000000004c6b         ror        r13, 0x10
0000000000004c6f         add        r15, r13
0000000000004c72         xor        r13, rbp
0000000000004c75         rol        r13, 0x20
0000000000004c79         xor        rax, r15
0000000000004c7c         add        r12, r13
0000000000004c7f         rol        rax, 0x1
0000000000004c82         xor        r8, r12
0000000000004c85         ror        r8, 0x18
0000000000004c89         add        rbp, qword [rsp+0x178+var_100]
0000000000004c8e         add        rbx, qword [rsp+0x178+var_F8]
0000000000004c96         add        r11, qword [rsp+0x178+var_E8]
0000000000004c9e         add        rbx, rsi
0000000000004ca1         add        rbp, r8
0000000000004ca4         xor        r9, rbx
0000000000004ca7         add        r11, rax
0000000000004caa         add        rbx, qword [rsp+0x178+var_F0]
0000000000004cb2         rol        r9, 0x20
0000000000004cb6         xor        rcx, r11
0000000000004cb9         add        r11, qword [rsp+0x178+var_E0]
0000000000004cc1         add        r15, r9
0000000000004cc4         rol        rcx, 0x20
0000000000004cc8         xor        r13, rbp
0000000000004ccb         xor        rsi, r15
0000000000004cce         add        r14, rcx
0000000000004cd1         ror        r13, 0x10
0000000000004cd5         ror        rsi, 0x18
0000000000004cd9         xor        rax, r14
0000000000004cdc         add        r12, r13
0000000000004cdf         add        rbx, rsi
0000000000004ce2         ror        rax, 0x18
0000000000004ce6         xor        r8, r12
0000000000004ce9         xor        r9, rbx
0000000000004cec         add        r11, rax
0000000000004cef         rol        r8, 0x1
0000000000004cf2         ror        r9, 0x10
0000000000004cf6         xor        rcx, r11
0000000000004cf9         mov        qword [rsp+0x178+var_158], r13
0000000000004cfe         add        r15, r9
0000000000004d01         ror        rcx, 0x10
0000000000004d05         mov        r13, qword [rsp+0x178+var_160]
0000000000004d0a         xor        rsi, r15
0000000000004d0d         mov        qword [rsp+0x178+var_168], r15
0000000000004d12         mov        r15, qword [rsp+0x178+var_170]
0000000000004d17         rol        rsi, 0x1
0000000000004d1a         add        r14, rcx
0000000000004d1d         add        r10, qword [rsp+0x178+var_D8]
0000000000004d25         add        rbp, qword [rsp+0x178+var_D8]
0000000000004d2d         xor        rax, r14
0000000000004d30         add        rbx, qword [rsp+0x178+var_128]
0000000000004d35         rol        rax, 0x1
0000000000004d38         add        r10, r13
0000000000004d3b         xor        rdx, r10
0000000000004d3e         add        r10, qword [rsp+0x178+var_D0]
0000000000004d46         rol        rdx, 0x20
0000000000004d4a         add        r15, rdx
0000000000004d4d         xor        r13, r15
0000000000004d50         ror        r13, 0x18
0000000000004d54         add        r10, r13
0000000000004d57         xor        rdx, r10
0000000000004d5a         ror        rdx, 0x10
0000000000004d5e         add        r15, rdx
0000000000004d61         xor        r13, r15
0000000000004d64         rol        r13, 0x1
0000000000004d67         add        rbp, r13
0000000000004d6a         xor        r9, rbp
0000000000004d6d         add        rbp, qword [rsp+0x178+var_F8]
0000000000004d75         rol        r9, 0x20
0000000000004d79         add        r14, r9
0000000000004d7c         xor        r13, r14
0000000000004d7f         ror        r13, 0x18
0000000000004d83         add        rbp, r13
0000000000004d86         xor        r9, rbp
0000000000004d89         ror        r9, 0x10
0000000000004d8d         add        r14, r9
0000000000004d90         xor        r13, r14
0000000000004d93         rol        r13, 0x1
0000000000004d96         add        rbx, r8
0000000000004d99         add        r11, qword [rsp+0x178+var_100]
0000000000004d9e         xor        rcx, rbx
0000000000004da1         add        rbx, qword [rsp+0x178+var_108]
0000000000004da6         add        r10, qword [rsp+0x178+var_E0]
0000000000004dae         rol        rcx, 0x20
0000000000004db2         mov        qword [rsp+0x178+var_160], r13
0000000000004db7         mov        r13, qword [rsp+0x178+var_158]
0000000000004dbc         add        r15, rcx
0000000000004dbf         add        r11, rsi
0000000000004dc2         xor        r8, r15
0000000000004dc5         xor        rdx, r11
0000000000004dc8         ror        r8, 0x18
0000000000004dcc         add        r11, qword [rsp+0x178+var_D0]
0000000000004dd4         rol        rdx, 0x20
0000000000004dd8         add        rbx, r8
0000000000004ddb         add        r10, rax
0000000000004dde         add        r12, rdx
0000000000004de1         xor        rcx, rbx
0000000000004de4         xor        r13, r10
0000000000004de7         xor        rsi, r12
0000000000004dea         ror        rcx, 0x10
0000000000004dee         rol        r13, 0x20
0000000000004df2         ror        rsi, 0x18
0000000000004df6         add        r15, rcx
0000000000004df9         add        r11, rsi
0000000000004dfc         xor        r8, r15
0000000000004dff         mov        qword [rsp+0x178+var_170], r15
0000000000004e04         xor        rdx, r11
0000000000004e07         mov        r15, qword [rsp+0x178+var_168]
0000000000004e0c         rol        r8, 0x1
0000000000004e0f         ror        rdx, 0x10
0000000000004e13         add        r12, rdx
0000000000004e16         xor        rsi, r12
0000000000004e19         add        r15, r13
0000000000004e1c         rol        rsi, 0x1
0000000000004e1f         xor        rax, r15
0000000000004e22         add        r10, qword [rsp+0x178+var_118]
0000000000004e27         add        rbp, qword [rsp+0x178+var_140]
0000000000004e2c         ror        rax, 0x18
0000000000004e30         add        r10, rax
0000000000004e33         xor        r13, r10
0000000000004e36         add        rbp, r8
0000000000004e39         ror        r13, 0x10
0000000000004e3d         add        r15, r13
0000000000004e40         xor        r13, rbp
0000000000004e43         add        rbp, qword [rsp+0x178+var_E8]
0000000000004e4b         rol        r13, 0x20
0000000000004e4f         xor        rax, r15
0000000000004e52         add        r12, r13
0000000000004e55         rol        rax, 0x1
0000000000004e58         xor        r8, r12
0000000000004e5b         ror        r8, 0x18
0000000000004e5f         add        rbp, r8
0000000000004e62         xor        r13, rbp
0000000000004e65         mov        qword [rsp+0x178+var_C8], rbp
0000000000004e6d         ror        r13, 0x10
0000000000004e71         mov        qword [rsp+0x178+var_50], r13
0000000000004e79         add        rbx, qword [rsp+0x178+var_148]
0000000000004e7e         add        r12, r13
0000000000004e81         mov        qword [rsp+0x178+var_78], r12
0000000000004e89         xor        r12, r8
0000000000004e8c         rol        r12, 0x1
0000000000004e8f         mov        qword [rsp+0x178+var_A0], r12
0000000000004e97         add        rbx, rsi
0000000000004e9a         xor        r9, rbx
0000000000004e9d         add        rbx, qword [rsp+0x178+var_138]
0000000000004ea2         rol        r9, 0x20
0000000000004ea6         add        r15, r9
0000000000004ea9         xor        rsi, r15
0000000000004eac         ror        rsi, 0x18
0000000000004eb0         add        rbx, rsi
0000000000004eb3         mov        qword [rsp+0x178+var_C0], rbx
0000000000004ebb         xor        rbx, r9
0000000000004ebe         add        r11, qword [rsp+0x178+var_F0]
0000000000004ec6         ror        rbx, 0x10
0000000000004eca         add        r15, rbx
0000000000004ecd         mov        qword [rsp+0x178+var_68], rbx
0000000000004ed5         mov        qword [rsp+0x178+var_70], r15
0000000000004edd         xor        r15, rsi
0000000000004ee0         add        r11, rax
0000000000004ee3         rol        r15, 0x1
0000000000004ee6         xor        rcx, r11
0000000000004ee9         add        r11, qword [rsp+0x178+var_110]
0000000000004eee         mov        qword [rsp+0x178+var_98], r15
0000000000004ef6         rol        rcx, 0x20
0000000000004efa         mov        r15, qword [rsp+0x178+var_170]
0000000000004eff         add        r14, rcx
0000000000004f02         xor        rax, r14
0000000000004f05         ror        rax, 0x18
0000000000004f09         add        r11, rax
0000000000004f0c         xor        rcx, r11
0000000000004f0f         mov        qword [rsp+0x178+var_B8], r11
0000000000004f17         ror        rcx, 0x10
0000000000004f1b         add        r14, rcx
0000000000004f1e         mov        qword [rsp+0x178+var_60], rcx
0000000000004f26         mov        rcx, qword [rsp+0x178+var_120]
0000000000004f2b         xor        rax, r14
0000000000004f2e         mov        qword [rsp+0x178+var_88], r14
0000000000004f36         rol        rax, 0x1
0000000000004f39         mov        qword [rsp+0x178+var_90], rax
0000000000004f41         mov        rax, qword [rsp+0x178+var_160]
0000000000004f46         add        rcx, r10
0000000000004f49         add        rcx, rax
0000000000004f4c         xor        rdx, rcx
0000000000004f4f         add        rcx, qword [rsp+0x178+var_130]
0000000000004f54         rol        rdx, 0x20
0000000000004f58         add        r15, rdx
0000000000004f5b         xor        rax, r15
0000000000004f5e         mov        r13, rax
0000000000004f61         ror        r13, 0x18
0000000000004f65         lea        rax, qword [rcx+r13]
0000000000004f69         xor        rdx, rax
0000000000004f6c         mov        qword [rsp+0x178+var_B0], rax
0000000000004f74         ror        rdx, 0x10
0000000000004f78         mov        qword [rsp+0x178+var_58], rdx
0000000000004f80         add        rdx, r15
0000000000004f83         mov        qword [rsp+0x178+var_80], rdx
0000000000004f8b         xor        rdx, r13
0000000000004f8e         rol        rdx, 0x1
0000000000004f91         xor        eax, eax
0000000000004f93         mov        qword [rsp+0x178+var_A8], rdx
0000000000004f9b         mov        rdx, qword [rsp+0x178+var_150]
0000000000004fa0         jmp        loc_4fb1
0000000000004fa2         align      8

                     loc_4fa8:
0000000000004fa8         mov        rbp, qword [rdx+rax*8]                      ; CODE XREF=blake2b_compress+5824
0000000000004fac         mov        r14, qword [rdx+rax*8+0x40]

                     loc_4fb1:
0000000000004fb1         xor        rbp, r14                                    ; CODE XREF=blake2b_compress+5792
0000000000004fb4         xor        qword [rdi+rax*8], rbp
0000000000004fb8         add        rax, 0x1
0000000000004fbc         cmp        rax, 0x8
0000000000004fc0         jne        loc_4fa8

0000000000004fc2         mov        rax, qword [rsp+0x178+var_40]
0000000000004fca         xor        rax, qword [fs:0x28]
0000000000004fd3         jne        loc_4fe7

0000000000004fd5         add        rsp, 0x148
0000000000004fdc         pop        rbx
0000000000004fdd         pop        rbp
0000000000004fde         pop        r12
0000000000004fe0         pop        r13
0000000000004fe2         pop        r14
0000000000004fe4         pop        r15
0000000000004fe6         ret
                        ; endp

                     loc_4fe7:
0000000000004fe7         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=blake2b_compress+5843
                        ; endp
0000000000004fec         align      16                                          ; End of unwind block (FDE at 0xaeec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     blake2b_update.part.3:
0000000000004ff0         push       r15                                         ; Begin of unwind block (FDE at 0xaf3c), CODE XREF=blake2b_init_key+196, blake2b_update+9, blake2b+233
0000000000004ff2         push       r14
0000000000004ff4         push       r13
0000000000004ff6         push       r12
0000000000004ff8         mov        r13d, 0x80
0000000000004ffe         push       rbp
0000000000004fff         push       rbx
0000000000005000         mov        rbx, rdi
0000000000005003         lea        r14, qword [rbx+0x60]
0000000000005007         mov        rbp, rsi
000000000000500a         mov        r12, rdx
000000000000500d         sub        rsp, 0x8
0000000000005011         mov        rdi, qword [rdi+0xe0]
0000000000005018         sub        r13, rdi
000000000000501b         add        rdi, r14
000000000000501e         cmp        r13, rdx
0000000000005021         jb         loc_5048

                     loc_5023:
0000000000005023         mov        rdx, r12                                    ; argument "__n" for method j_memcpy, CODE XREF=blake2b_update.part.3+260
0000000000005026         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
0000000000005029         call       j_memcpy                                    ; memcpy
000000000000502e         add        qword [rbx+0xe0], r12
0000000000005035         add        rsp, 0x8
0000000000005039         pop        rbx
000000000000503a         pop        rbp
000000000000503b         pop        r12
000000000000503d         pop        r13
000000000000503f         pop        r14
0000000000005041         pop        r15
0000000000005043         ret
                        ; endp
0000000000005044         align      8

                     loc_5048:
0000000000005048         mov        rdx, r13                                    ; argument "__n" for method j_memcpy, CODE XREF=blake2b_update.part.3+49
000000000000504b         mov        qword [rbx+0xe0], 0x0
0000000000005056         call       j_memcpy                                    ; memcpy
000000000000505b         mov        rax, qword [rbx+0x40]
000000000000505f         mov        rsi, r14
0000000000005062         mov        rdi, rbx
0000000000005065         sub        rax, 0xffffffffffffff80
0000000000005069         cmp        rax, 0x7f
000000000000506d         mov        qword [rbx+0x40], rax
0000000000005071         setbe      al
0000000000005074         sub        r12, r13
0000000000005077         add        rbp, r13
000000000000507a         movzx      eax, al
000000000000507d         add        qword [rbx+0x48], rax
0000000000005081         call       blake2b_compress                            ; blake2b_compress
0000000000005086         cmp        r12, 0x80
000000000000508d         jbe        loc_50ea

000000000000508f         lea        r15, qword [r12-0x81]
0000000000005097         shr        r15, 0x7
000000000000509b         lea        r13, qword [r15+1]
000000000000509f         shl        r13, 0x7
00000000000050a3         add        r13, rbp
00000000000050a6         nop        word [cs:rax+rax]

                     loc_50b0:
00000000000050b0         mov        rax, qword [rbx+0x40]                       ; CODE XREF=blake2b_update.part.3+236
00000000000050b4         mov        rsi, rbp
00000000000050b7         mov        rdi, rbx
00000000000050ba         sub        rax, 0xffffffffffffff80
00000000000050be         cmp        rax, 0x7f
00000000000050c2         mov        qword [rbx+0x40], rax
00000000000050c6         setbe      al
00000000000050c9         sub        rbp, 0xffffffffffffff80
00000000000050cd         movzx      eax, al
00000000000050d0         add        qword [rbx+0x48], rax
00000000000050d4         call       blake2b_compress                            ; blake2b_compress
00000000000050d9         cmp        r13, rbp
00000000000050dc         jne        loc_50b0

00000000000050de         neg        r15
00000000000050e1         shl        r15, 0x7
00000000000050e5         lea        r12, qword [r12+r15-0x80]

                     loc_50ea:
00000000000050ea         mov        rdi, qword [rbx+0xe0]                       ; CODE XREF=blake2b_update.part.3+157
00000000000050f1         add        rdi, r14
00000000000050f4         jmp        loc_5023
00000000000050f9         align      256                                         ; End of unwind block (FDE at 0xaf3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     blake2b_init_param:
0000000000005100         mov        qword [rdi+0x40], 0x0                       ; Begin of unwind block (FDE at 0xaf88), CODE XREF=blake2b_init+96, blake2b_init_key+139
0000000000005108         mov        qword [rdi+0xf0], 0x0
0000000000005113         mov        r8, rdi
0000000000005116         lea        rdi, qword [rdi+0x48]
000000000000511a         mov        eax, r8d
000000000000511d         movabs     rdx, 0x6a09e667f3bcc908
0000000000005127         and        rdi, 0xfffffffffffffff8
000000000000512b         sub        eax, edi
000000000000512d         lea        ecx, dword [rax+0xf8]
0000000000005133         xor        eax, eax
0000000000005135         shr        ecx, 0x3
0000000000005138         rep stosq  qword [rdi], rax
000000000000513b         movabs     rax, 0xbb67ae8584caa73b
0000000000005145         mov        qword [r8], rdx
0000000000005148         mov        qword [r8+8], rax
000000000000514c         movabs     rax, 0x3c6ef372fe94f82b
0000000000005156         mov        qword [r8+0x10], rax
000000000000515a         movabs     rax, 0xa54ff53a5f1d36f1
0000000000005164         mov        qword [r8+0x18], rax
0000000000005168         movabs     rax, 0x510e527fade682d1
0000000000005172         mov        qword [r8+0x20], rax
0000000000005176         movabs     rax, 0x9b05688c2b3e6c1f
0000000000005180         mov        qword [r8+0x28], rax
0000000000005184         movabs     rax, 0x1f83d9abfb41bd6b
000000000000518e         mov        qword [r8+0x30], rax
0000000000005192         movabs     rax, 0x5be0cd19137e2179
000000000000519c         mov        qword [r8+0x38], rax
00000000000051a0         xor        eax, eax
00000000000051a2         jmp        loc_51ac
00000000000051a4         align      8

                     loc_51a8:
00000000000051a8         mov        rdx, qword [r8+rax*8]                       ; CODE XREF=blake2b_init_param+188

                     loc_51ac:
00000000000051ac         xor        rdx, qword [rsi+rax*8]                      ; CODE XREF=blake2b_init_param+162
00000000000051b0         mov        qword [r8+rax*8], rdx
00000000000051b4         add        rax, 0x1
00000000000051b8         cmp        rax, 0x8
00000000000051bc         jne        loc_51a8

00000000000051be         movzx      eax, byte [rsi]
00000000000051c1         mov        qword [r8+0xe8], rax
00000000000051c8         xor        eax, eax
00000000000051ca         ret
                        ; endp
00000000000051cb         align      16                                          ; End of unwind block (FDE at 0xaf88)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_28: -40
        ;    var_38: -56
        ;    var_46: int64_t, -70
        ;    var_47: int8_t, -71
        ;    var_4F: int64_t, -79
        ;    var_57: int64_t, -87
        ;    var_58: int8_t, -88


                     blake2b_init:
00000000000051d0         sub        rsp, 0x58                                   ; Begin of unwind block (FDE at 0xaf9c), CODE XREF=blake2b+115, blake2b_stream+86
00000000000051d4         mov        rax, qword [fs:0x28]
00000000000051dd         mov        qword [rsp+0x58+var_10], rax
00000000000051e2         xor        eax, eax
00000000000051e4         lea        rax, qword [rsi-1]
00000000000051e8         cmp        rax, 0x3f
00000000000051ec         ja         loc_5250

00000000000051ee         pxor       xmm0, xmm0
00000000000051f2         mov        byte [rsp+0x58+var_58], sil
00000000000051f6         xor        eax, eax
00000000000051f8         mov        rsi, rsp
00000000000051fb         mov        qword [rsp+0x58+var_46], 0x0
0000000000005204         mov        qword [rsp+0x58+var_57], 0x10100
000000000000520d         mov        dword [rsi+0x1a], 0x0
0000000000005214         mov        word [rsi+0x1e], ax
0000000000005218         mov        qword [rsp+0x58+var_4F], 0x0
0000000000005221         mov        byte [rsp+0x58+var_47], 0x0
0000000000005226         movaps     xmmword [rsp+0x58+var_38], xmm0
000000000000522b         movaps     xmmword [rsp+0x58+var_28], xmm0
0000000000005230         call       blake2b_init_param                          ; blake2b_init_param

                     loc_5235:
0000000000005235         mov        rdx, qword [rsp+0x58+var_10]                ; CODE XREF=blake2b_init+133
000000000000523a         xor        rdx, qword [fs:0x28]
0000000000005243         jne        loc_5257

0000000000005245         add        rsp, 0x58
0000000000005249         ret
                        ; endp
000000000000524a         align      16

                     loc_5250:
0000000000005250         mov        eax, 0xffffffff                             ; CODE XREF=blake2b_init+28
0000000000005255         jmp        loc_5235

                     loc_5257:
0000000000005257         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=blake2b_init+115
                        ; endp
000000000000525c         align      32                                          ; End of unwind block (FDE at 0xaf9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_A8: int8_t, -168
        ;    var_B8: -184
        ;    var_C8: -200
        ;    var_D6: int64_t, -214
        ;    var_DE: int64_t, -222
        ;    var_E6: int64_t, -230
        ;    var_E7: int8_t, -231
        ;    var_E8: int8_t, -232


                     blake2b_init_key:
0000000000005260         push       rbp                                         ; Begin of unwind block (FDE at 0xafb8), CODE XREF=blake2b+196
0000000000005261         push       rbx
0000000000005262         sub        rsp, 0xd8
0000000000005269         mov        rax, qword [fs:0x28]
0000000000005272         mov        qword [rsp+0xe8+var_20], rax
000000000000527a         xor        eax, eax
000000000000527c         lea        rax, qword [rsi-1]
0000000000005280         cmp        rax, 0x3f
0000000000005284         ja         loc_5360

000000000000528a         lea        rax, qword [rcx-1]
000000000000528e         mov        r9, rcx
0000000000005291         cmp        rax, 0x3f
0000000000005295         ja         loc_5360

000000000000529b         test       rdx, rdx
000000000000529e         mov        r10, rdx
00000000000052a1         je         loc_5360

00000000000052a7         pxor       xmm0, xmm0
00000000000052ab         xor        eax, eax
00000000000052ad         mov        byte [rsp+0xe8+var_E8], sil
00000000000052b1         mov        rsi, rsp
00000000000052b4         mov        qword [rsp+0xe8+var_D6], 0x0
00000000000052bd         mov        rbp, rdi
00000000000052c0         mov        dword [rsi+0x1a], 0x0
00000000000052c7         mov        word [rsi+0x1e], ax
00000000000052cb         mov        byte [rsp+0xe8+var_E7], cl
00000000000052cf         mov        qword [rsp+0xe8+var_E6], 0x101
00000000000052d8         mov        qword [rsp+0xe8+var_DE], 0x0
00000000000052e1         movaps     xmmword [rsp+0xe8+var_C8], xmm0
00000000000052e6         movaps     xmmword [rsp+0xe8+var_B8], xmm0
00000000000052eb         call       blake2b_init_param                          ; blake2b_init_param
00000000000052f0         test       eax, eax
00000000000052f2         js         loc_5360

00000000000052f4         lea        rbx, qword [rsp+0xe8+var_A8]
00000000000052f9         xor        eax, eax
00000000000052fb         mov        ecx, 0x10
0000000000005300         mov        rdx, r9
0000000000005303         mov        rsi, r10
0000000000005306         mov        rdi, rbx
0000000000005309         rep stosq  qword [rdi], rax
000000000000530c         mov        ecx, 0x80
0000000000005311         mov        rdi, rbx
0000000000005314         call       j___memcpy_chk                              ; __memcpy_chk
0000000000005319         mov        edx, 0x80
000000000000531e         mov        rsi, rbx
0000000000005321         mov        rdi, rbp
0000000000005324         call       blake2b_update.part.3                       ; blake2b_update.part.3
0000000000005329         mov        rax, qword [memset_v.3512]                  ; memset_v.3512
0000000000005330         mov        edx, 0x80
0000000000005335         xor        esi, esi
0000000000005337         mov        rdi, rbx
000000000000533a         call       rax
000000000000533c         xor        eax, eax

                     loc_533e:
000000000000533e         mov        rdx, qword [rsp+0xe8+var_20]                ; CODE XREF=blake2b_init_key+261
0000000000005346         xor        rdx, qword [fs:0x28]
000000000000534f         jne        loc_5367

0000000000005351         add        rsp, 0xd8
0000000000005358         pop        rbx
0000000000005359         pop        rbp
000000000000535a         ret
                        ; endp
000000000000535b         align      32

                     loc_5360:
0000000000005360         mov        eax, 0xffffffff                             ; CODE XREF=blake2b_init_key+36, blake2b_init_key+53, blake2b_init_key+65, blake2b_init_key+146
0000000000005365         jmp        loc_533e

                     loc_5367:
0000000000005367         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=blake2b_init_key+239
                        ; endp
000000000000536c         align      16                                          ; End of unwind block (FDE at 0xafb8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     blake2b_update:
0000000000005370         test       rdx, rdx                                    ; Begin of unwind block (FDE at 0xafe4), CODE XREF=blake2b_stream+160, blake2b_stream+273
0000000000005373         je         loc_5388

0000000000005375         sub        rsp, 0x8
0000000000005379         call       blake2b_update.part.3                       ; blake2b_update.part.3
000000000000537e         xor        eax, eax
0000000000005380         add        rsp, 0x8
0000000000005384         ret
                        ; endp
0000000000005385         align      8

                     loc_5388:
0000000000005388         xor        eax, eax                                    ; CODE XREF=blake2b_update+3
000000000000538a         ret
                        ; endp
000000000000538b         align      16                                          ; End of unwind block (FDE at 0xafe4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_38: -56
        ;    var_48: -72
        ;    var_58: -88
        ;    var_68: -104


                     blake2b_final:
0000000000005390         push       r12                                         ; Begin of unwind block (FDE at 0xaffc), CODE XREF=blake2b+138, blake2b_stream+208
0000000000005392         push       rbp
0000000000005393         push       rbx
0000000000005394         pxor       xmm0, xmm0
0000000000005398         sub        rsp, 0x50
000000000000539c         mov        rax, qword [fs:0x28]
00000000000053a5         mov        qword [rsp+0x68+var_20], rax
00000000000053aa         xor        eax, eax
00000000000053ac         test       rsi, rsi
00000000000053af         movaps     xmmword [rsp+0x68+var_68], xmm0
00000000000053b3         movaps     xmmword [rsp+0x68+var_58], xmm0
00000000000053b8         movaps     xmmword [rsp+0x68+var_48], xmm0
00000000000053bd         movaps     xmmword [rsp+0x68+var_38], xmm0
00000000000053c2         je         loc_54f5

00000000000053c8         mov        rbx, rdi
00000000000053cb         cmp        qword [rdi+0xe8], rdx
00000000000053d2         ja         loc_54f5

00000000000053d8         cmp        qword [rdi+0x50], 0x0
00000000000053dd         jne        loc_54f5

00000000000053e3         mov        rdi, qword [rdi+0xe0]
00000000000053ea         xor        eax, eax
00000000000053ec         mov        r12, rsi
00000000000053ef         mov        rdx, rdi
00000000000053f2         add        rdx, qword [rbx+0x40]
00000000000053f6         setb       al
00000000000053f9         add        qword [rbx+0x48], rax
00000000000053fd         cmp        byte [rbx+0xf0], 0x0
0000000000005404         mov        qword [rbx+0x40], rdx
0000000000005408         jne        loc_54e8

                     loc_540e:
000000000000540e         lea        rbp, qword [rbx+0x60]                       ; CODE XREF=blake2b_final+352
0000000000005412         mov        edx, 0x80
0000000000005417         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000005419         sub        rdx, rdi                                    ; argument "__n" for method j_memset
000000000000541c         mov        qword [rbx+0x50], 0xffffffffffffffff
0000000000005424         add        rdi, rbp                                    ; argument "__s" for method j_memset
0000000000005427         call       j_memset                                    ; memset
000000000000542c         mov        rsi, rbp
000000000000542f         mov        rdi, rbx
0000000000005432         mov        rbp, rsp
0000000000005435         call       blake2b_compress                            ; blake2b_compress
000000000000543a         lea        rdi, qword [rbp+0x40]
000000000000543e         mov        rcx, rbx
0000000000005441         mov        rax, rbp
0000000000005444         nop        dword [rax]

                     loc_5448:
0000000000005448         mov        rdx, qword [rcx]                            ; CODE XREF=blake2b_final+274
000000000000544b         add        rax, 0x8
000000000000544f         add        rcx, 0x8
0000000000005453         mov        rsi, rdx
0000000000005456         mov        byte [rax-8], dl
0000000000005459         shr        rsi, 0x8
000000000000545d         mov        byte [rax-7], sil
0000000000005461         mov        rsi, rdx
0000000000005464         shr        rsi, 0x10
0000000000005468         mov        byte [rax-6], sil
000000000000546c         mov        rsi, rdx
000000000000546f         shr        rsi, 0x18
0000000000005473         mov        byte [rax-5], sil
0000000000005477         mov        rsi, rdx
000000000000547a         shr        rsi, 0x20
000000000000547e         mov        byte [rax-4], sil
0000000000005482         mov        rsi, rdx
0000000000005485         shr        rsi, 0x28
0000000000005489         mov        byte [rax-3], sil
000000000000548d         mov        rsi, rdx
0000000000005490         shr        rdx, 0x38
0000000000005494         shr        rsi, 0x30
0000000000005498         mov        byte [rax-1], dl
000000000000549b         mov        byte [rax-2], sil
000000000000549f         cmp        rax, rdi
00000000000054a2         jne        loc_5448

00000000000054a4         mov        rdx, qword [rbx+0xe8]                       ; argument "__n" for method j_memcpy
00000000000054ab         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
00000000000054ae         mov        rdi, r12                                    ; argument "__dest" for method j_memcpy
00000000000054b1         call       j_memcpy                                    ; memcpy
00000000000054b6         mov        rax, qword [memset_v.3512]                  ; memset_v.3512
00000000000054bd         mov        edx, 0x40
00000000000054c2         xor        esi, esi
00000000000054c4         mov        rdi, rbp
00000000000054c7         call       rax
00000000000054c9         xor        eax, eax

                     loc_54cb:
00000000000054cb         mov        rbx, qword [rsp+0x68+var_20]                ; CODE XREF=blake2b_final+362
00000000000054d0         xor        rbx, qword [fs:0x28]
00000000000054d9         jne        loc_54fc

00000000000054db         add        rsp, 0x50
00000000000054df         pop        rbx
00000000000054e0         pop        rbp
00000000000054e1         pop        r12
00000000000054e3         ret
                        ; endp
00000000000054e4         align      8

                     loc_54e8:
00000000000054e8         mov        qword [rbx+0x58], 0xffffffffffffffff        ; CODE XREF=blake2b_final+120
00000000000054f0         jmp        loc_540e

                     loc_54f5:
00000000000054f5         mov        eax, 0xffffffff                             ; CODE XREF=blake2b_final+50, blake2b_final+66, blake2b_final+77
00000000000054fa         jmp        loc_54cb

                     loc_54fc:
00000000000054fc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=blake2b_final+329
                        ; endp
0000000000005501         align      16                                          ; End of unwind block (FDE at 0xaffc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48


                     blake2b:
0000000000005510         push       r14                                         ; Begin of unwind block (FDE at 0xb030), CODE XREF=blake2
0000000000005512         push       r13
0000000000005514         mov        r14, rdx
0000000000005517         push       r12
0000000000005519         push       rbp
000000000000551a         push       rbx
000000000000551b         sub        rsp, 0x100
0000000000005522         mov        rax, qword [fs:0x28]
000000000000552b         mov        qword [rsp+0x128+var_30], rax
0000000000005533         xor        eax, eax
0000000000005535         test       rdx, rdx
0000000000005538         sete       dl
000000000000553b         test       rcx, rcx
000000000000553e         setne      al
0000000000005541         test       dl, al
0000000000005543         jne        loc_55e0

0000000000005549         test       rdi, rdi
000000000000554c         mov        r13, rdi
000000000000554f         je         loc_55e0

0000000000005555         test       r8, r8
0000000000005558         mov        rbx, rsi
000000000000555b         mov        rbp, rcx
000000000000555e         jne        loc_5565

0000000000005560         test       r9, r9
0000000000005563         jne        loc_55e0

                     loc_5565:
0000000000005565         lea        rax, qword [rbx-1]                          ; CODE XREF=blake2b+78
0000000000005569         cmp        rax, 0x3f
000000000000556d         ja         loc_55e0

000000000000556f         cmp        r9, 0x40
0000000000005573         ja         loc_55e0

0000000000005575         test       r9, r9
0000000000005578         mov        r12, rsp
000000000000557b         jne        loc_55c8

000000000000557d         mov        rsi, rbx
0000000000005580         mov        rdi, r12
0000000000005583         call       blake2b_init                                ; blake2b_init
0000000000005588         test       eax, eax
000000000000558a         js         loc_55e0

                     loc_558c:
000000000000558c         test       rbp, rbp                                    ; CODE XREF=blake2b+203
000000000000558f         jne        loc_55f0

                     loc_5591:
0000000000005591         mov        rdx, rbx                                    ; CODE XREF=blake2b+238
0000000000005594         mov        rsi, r13
0000000000005597         mov        rdi, r12
000000000000559a         call       blake2b_final                               ; blake2b_final
000000000000559f         xor        eax, eax

                     loc_55a1:
00000000000055a1         mov        rcx, qword [rsp+0x128+var_30]               ; CODE XREF=blake2b+213
00000000000055a9         xor        rcx, qword [fs:0x28]
00000000000055b2         jne        loc_5600

00000000000055b4         add        rsp, 0x100
00000000000055bb         pop        rbx
00000000000055bc         pop        rbp
00000000000055bd         pop        r12
00000000000055bf         pop        r13
00000000000055c1         pop        r14
00000000000055c3         ret
                        ; endp
00000000000055c4         align      8

                     loc_55c8:
00000000000055c8         mov        rcx, r9                                     ; CODE XREF=blake2b+107
00000000000055cb         mov        rdx, r8
00000000000055ce         mov        rsi, rbx
00000000000055d1         mov        rdi, r12
00000000000055d4         call       blake2b_init_key                            ; blake2b_init_key
00000000000055d9         test       eax, eax
00000000000055db         jns        loc_558c

00000000000055dd         nop        dword [rax]

                     loc_55e0:
00000000000055e0         mov        eax, 0xffffffff                             ; CODE XREF=blake2b+51, blake2b+63, blake2b+83, blake2b+93, blake2b+99, blake2b+122
00000000000055e5         jmp        loc_55a1
00000000000055e7         align      16

                     loc_55f0:
00000000000055f0         mov        rdx, rbp                                    ; CODE XREF=blake2b+127
00000000000055f3         mov        rsi, r14
00000000000055f6         mov        rdi, r12
00000000000055f9         call       blake2b_update.part.3                       ; blake2b_update.part.3
00000000000055fe         jmp        loc_5591

                     loc_5600:
0000000000005600         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=blake2b+162
                        ; endp
0000000000005605         align      16                                          ; End of unwind block (FDE at 0xb030)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     blake2:
0000000000005610         jmp        blake2b                                     ; blake2b, Begin of unwind block (FDE at 0xb074)
                        ; endp
0000000000005615         align      32                                          ; End of unwind block (FDE at 0xb074)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_138: int8_t, -312
        ;    var_140: int64_t, -320


                     blake2b_stream:
0000000000005620         push       r15                                         ; Begin of unwind block (FDE at 0xb08c), CODE XREF=digest_file.isra.1+93, digest_file.isra.1+264
0000000000005622         push       r14
0000000000005624         mov        r14, rdx
0000000000005627         push       r13
0000000000005629         push       r12
000000000000562b         push       rbp
000000000000562c         push       rbx
000000000000562d         mov        rbx, rdi
0000000000005630         mov        edi, 0x8000                                 ; argument "__size" for method j_malloc
0000000000005635         sub        rsp, 0x118
000000000000563c         mov        rax, qword [fs:0x28]
0000000000005645         mov        qword [rsp+0x148+var_40], rax
000000000000564d         xor        eax, eax
000000000000564f         mov        qword [rsp+0x148+var_140], rsi
0000000000005654         call       j_malloc                                    ; malloc
0000000000005659         test       rax, rax
000000000000565c         je         loc_5738

0000000000005662         lea        r13, qword [rsp+0x148+var_138]
0000000000005667         mov        rsi, r14
000000000000566a         mov        r12d, 0x8000
0000000000005670         mov        rbp, rax
0000000000005673         mov        rdi, r13
0000000000005676         call       blake2b_init                                ; blake2b_init

                     loc_567b:
000000000000567b         xor        r15d, r15d                                  ; CODE XREF=blake2b_stream+165
000000000000567e         jmp        loc_5691

                     loc_5680:
0000000000005680         test       rax, rax                                    ; CODE XREF=blake2b_stream+147
0000000000005683         mov        rdi, rbx
0000000000005686         je         loc_56d0

0000000000005688         call       j_feof                                      ; feof
000000000000568d         test       eax, eax
000000000000568f         jne        loc_56de

                     loc_5691:
0000000000005691         lea        rdi, qword [rbp+r15]                        ; argument "__ptr" for method j_fread, CODE XREF=blake2b_stream+94
0000000000005696         mov        rdx, r12
0000000000005699         mov        rcx, rbx                                    ; argument "__stream" for method j_fread
000000000000569c         sub        rdx, r15                                    ; argument "__n" for method j_fread
000000000000569f         mov        esi, 0x1                                    ; argument "__size" for method j_fread
00000000000056a4         call       j_fread                                     ; fread
00000000000056a9         add        r15, rax
00000000000056ac         cmp        r15, 0x8000
00000000000056b3         jne        loc_5680

00000000000056b5         mov        edx, 0x8000
00000000000056ba         mov        rsi, rbp
00000000000056bd         mov        rdi, r13
00000000000056c0         call       blake2b_update                              ; blake2b_update
00000000000056c5         jmp        loc_567b
00000000000056c7         align      16

                     loc_56d0:
00000000000056d0         call       j_ferror                                    ; ferror, CODE XREF=blake2b_stream+102
00000000000056d5         test       eax, eax
00000000000056d7         mov        ebx, 0xffffffff
00000000000056dc         jne        loc_56f5

                     loc_56de:
00000000000056de         test       r15, r15                                    ; CODE XREF=blake2b_stream+111
00000000000056e1         jne        loc_5728

                     loc_56e3:
00000000000056e3         mov        rsi, qword [rsp+0x148+var_140]              ; CODE XREF=blake2b_stream+278
00000000000056e8         mov        rdx, r14
00000000000056eb         mov        rdi, r13
00000000000056ee         xor        ebx, ebx
00000000000056f0         call       blake2b_final                               ; blake2b_final

                     loc_56f5:
00000000000056f5         mov        rdi, rbp                                    ; argument "__ptr" for method j_free, CODE XREF=blake2b_stream+188
00000000000056f8         call       j_free                                      ; free

                     loc_56fd:
00000000000056fd         mov        rcx, qword [rsp+0x148+var_40]               ; CODE XREF=blake2b_stream+285
0000000000005705         xor        rcx, qword [fs:0x28]
000000000000570e         mov        eax, ebx
0000000000005710         jne        loc_573f

0000000000005712         add        rsp, 0x118
0000000000005719         pop        rbx
000000000000571a         pop        rbp
000000000000571b         pop        r12
000000000000571d         pop        r13
000000000000571f         pop        r14
0000000000005721         pop        r15
0000000000005723         ret
                        ; endp
0000000000005724         align      8

                     loc_5728:
0000000000005728         mov        rdx, r15                                    ; CODE XREF=blake2b_stream+193
000000000000572b         mov        rsi, rbp
000000000000572e         mov        rdi, r13
0000000000005731         call       blake2b_update                              ; blake2b_update
0000000000005736         jmp        loc_56e3

                     loc_5738:
0000000000005738         mov        ebx, 0xffffffff                             ; CODE XREF=blake2b_stream+60
000000000000573d         jmp        loc_56fd

                     loc_573f:
000000000000573f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=blake2b_stream+240
                        ; endp
0000000000005744         align      16                                          ; End of unwind block (FDE at 0xb08c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __argmatch_die:
0000000000005750         mov        edi, 0x1                                    ; Begin of unwind block (FDE at 0xb0dc), argument #1 for method usage
0000000000005755         jmp        usage                                       ; usage
                        ; endp
000000000000575a         align      32                                          ; End of unwind block (FDE at 0xb0dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_41: int8_t, -65
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     argmatch:
0000000000005760         push       r15                                         ; Begin of unwind block (FDE at 0xb0f0), CODE XREF=main+1529, main+2769, main+2841, __xargmatch_internal+44
0000000000005762         push       r14
0000000000005764         mov        r15, rsi
0000000000005767         push       r13
0000000000005769         push       r12
000000000000576b         mov        r13, rcx
000000000000576e         push       rbp
000000000000576f         push       rbx
0000000000005770         mov        rbp, rdx
0000000000005773         sub        rsp, 0x28
0000000000005777         mov        qword [rsp+0x58+var_50], rdi
000000000000577c         mov        qword [rsp+0x58+var_40], rdx
0000000000005781         call       j_strlen                                    ; strlen
0000000000005786         mov        r14, qword [r15]
0000000000005789         mov        qword [rsp+0x58+var_58], 0xffffffffffffffff
0000000000005791         test       r14, r14
0000000000005794         je         loc_584d

000000000000579a         mov        r12, rax
000000000000579d         mov        byte [rsp+0x58+var_41], 0x0
00000000000057a2         xor        ebx, ebx
00000000000057a4         jmp        loc_57f7
00000000000057a6         align      16

                     loc_57b0:
00000000000057b0         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=argmatch+189
00000000000057b5         test       rax, rax
00000000000057b8         je         loc_5860

00000000000057be         mov        rdi, qword [rsp+0x58+var_58]
00000000000057c2         mov        rdx, r13                                    ; argument "__n" for method j_memcmp
00000000000057c5         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
00000000000057c8         imul       rdi, r13
00000000000057cc         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
00000000000057cf         call       j_memcmp                                    ; memcmp
00000000000057d4         test       eax, eax
00000000000057d6         movzx      eax, byte [rsp+0x58+var_41]
00000000000057db         mov        ecx, 0x1
00000000000057e0         cmovne     eax, ecx
00000000000057e3         mov        byte [rsp+0x58+var_41], al

                     loc_57e7:
00000000000057e7         add        rbx, 0x1                                    ; CODE XREF=argmatch+169, argmatch+261
00000000000057eb         add        rbp, r13
00000000000057ee         mov        r14, qword [r15+rbx*8]
00000000000057f2         test       r14, r14
00000000000057f5         je         loc_5838

                     loc_57f7:
00000000000057f7         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__s2" for method j_strncmp, CODE XREF=argmatch+68, argmatch+209
00000000000057fc         mov        rdx, r12                                    ; argument "__n" for method j_strncmp
00000000000057ff         mov        rdi, r14                                    ; argument "__s1" for method j_strncmp
0000000000005802         call       j_strncmp                                   ; strncmp
0000000000005807         test       eax, eax
0000000000005809         jne        loc_57e7

000000000000580b         mov        rdi, r14                                    ; argument "__s" for method j_strlen
000000000000580e         call       j_strlen                                    ; strlen
0000000000005813         cmp        rax, r12
0000000000005816         je         loc_5870

0000000000005818         cmp        qword [rsp+0x58+var_58], 0xffffffffffffffff
000000000000581d         jne        loc_57b0

000000000000581f         mov        qword [rsp+0x58+var_58], rbx
0000000000005823         add        rbx, 0x1
0000000000005827         add        rbp, r13
000000000000582a         mov        r14, qword [r15+rbx*8]
000000000000582e         test       r14, r14
0000000000005831         jne        loc_57f7

0000000000005833         nop        dword [rax+rax]

                     loc_5838:
0000000000005838         cmp        byte [rsp+0x58+var_41], 0x0                 ; CODE XREF=argmatch+149
000000000000583d         mov        rax, 0xfffffffffffffffe
0000000000005844         cmove      rax, qword [rsp+0x58+var_58]
0000000000005849         mov        qword [rsp+0x58+var_58], rax

                     loc_584d:
000000000000584d         mov        rax, qword [rsp+0x58+var_58]                ; CODE XREF=argmatch+52, argmatch+276
0000000000005851         add        rsp, 0x28
0000000000005855         pop        rbx
0000000000005856         pop        rbp
0000000000005857         pop        r12
0000000000005859         pop        r13
000000000000585b         pop        r14
000000000000585d         pop        r15
000000000000585f         ret
                        ; endp

                     loc_5860:
0000000000005860         mov        byte [rsp+0x58+var_41], 0x1                 ; CODE XREF=argmatch+88
0000000000005865         jmp        loc_57e7
0000000000005867         align      16

                     loc_5870:
0000000000005870         mov        qword [rsp+0x58+var_58], rbx                ; CODE XREF=argmatch+182
0000000000005874         jmp        loc_584d
0000000000005876         align      128                                         ; End of unwind block (FDE at 0xb0f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_invalid:
0000000000005880         cmp        rdx, 0xffffffffffffffff                     ; Begin of unwind block (FDE at 0xb13c), CODE XREF=__xargmatch_internal+78
0000000000005884         push       r12
0000000000005886         mov        edx, 0x5
000000000000588b         push       rbp
000000000000588c         mov        r12, rsi
000000000000588f         push       rbx
0000000000005890         mov        rbp, rdi
0000000000005893         je         loc_58e0

0000000000005895         lea        rsi, qword [aAmbiguousArgum]                ; argument "msgid" for method j_dcgettext, "ambiguous argument %s for %s"
000000000000589c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000589e         call       j_dcgettext                                 ; dcgettext
00000000000058a3         mov        rbx, rax

                     loc_58a6:
00000000000058a6         mov        rsi, rbp                                    ; CODE XREF=argmatch_invalid+113
00000000000058a9         mov        edi, 0x1
00000000000058ae         call       quote_n                                     ; quote_n
00000000000058b3         mov        rdx, r12
00000000000058b6         mov        rbp, rax
00000000000058b9         mov        esi, 0x8
00000000000058be         xor        edi, edi
00000000000058c0         call       quotearg_n_style                            ; quotearg_n_style
00000000000058c5         mov        r8, rbp
00000000000058c8         mov        rdx, rbx                                    ; argument "__format" for method j_error
00000000000058cb         mov        rcx, rax
00000000000058ce         pop        rbx
00000000000058cf         pop        rbp
00000000000058d0         pop        r12
00000000000058d2         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000058d4         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000058d6         xor        eax, eax
00000000000058d8         jmp        j_error                                     ; error
                        ; endp
00000000000058dd         align      32

                     loc_58e0:
00000000000058e0         lea        rsi, qword [aInvalidArgumen]                ; argument "msgid" for method j_dcgettext, "invalid argument %s for %s", CODE XREF=argmatch_invalid+19
00000000000058e7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000058e9         call       j_dcgettext                                 ; dcgettext
00000000000058ee         mov        rbx, rax
00000000000058f1         jmp        loc_58a6
00000000000058f3         align      256                                         ; End of unwind block (FDE at 0xb13c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_valid:
0000000000005900         push       r15                                         ; Begin of unwind block (FDE at 0xb168), CODE XREF=__xargmatch_internal+92
0000000000005902         push       r14
0000000000005904         mov        r14, rdi
0000000000005907         push       r13
0000000000005909         push       r12
000000000000590b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000590d         push       rbp
000000000000590e         push       rbx
000000000000590f         mov        rbp, rsi
0000000000005912         lea        rsi, qword [aValidArguments]                ; argument "msgid" for method j_dcgettext, "Valid arguments are:"
0000000000005919         mov        r12, rdx
000000000000591c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005921         sub        rsp, 0x8
0000000000005925         mov        rbx, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
000000000000592c         call       j_dcgettext                                 ; dcgettext
0000000000005931         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005934         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005937         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000593c         mov        r15, qword [r14]
000000000000593f         test       r15, r15
0000000000005942         je         loc_59d8

0000000000005948         xor        r13d, r13d
000000000000594b         xor        ebx, ebx
000000000000594d         jmp        loc_5988
000000000000594f         align      16

                     loc_5950:
0000000000005950         mov        rdi, r15                                    ; CODE XREF=argmatch_valid+139, argmatch_valid+157
0000000000005953         add        rbx, 0x1
0000000000005957         mov        r13, rbp
000000000000595a         call       quote                                       ; quote
000000000000595f         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000005966         lea        rdx, qword [aNS]                            ; "\\n  - %s"
000000000000596d         mov        rcx, rax
0000000000005970         mov        esi, 0x1
0000000000005975         xor        eax, eax
0000000000005977         add        rbp, r12
000000000000597a         call       j___fprintf_chk                             ; __fprintf_chk
000000000000597f         mov        r15, qword [r14+rbx*8]
0000000000005983         test       r15, r15
0000000000005986         je         loc_59d8

                     loc_5988:
0000000000005988         test       rbx, rbx                                    ; CODE XREF=argmatch_valid+77, argmatch_valid+210
000000000000598b         je         loc_5950

000000000000598d         mov        rdx, r12                                    ; argument "__n" for method j_memcmp
0000000000005990         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000005993         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
0000000000005996         call       j_memcmp                                    ; memcmp
000000000000599b         test       eax, eax
000000000000599d         jne        loc_5950

000000000000599f         mov        rdi, r15
00000000000059a2         add        rbx, 0x1
00000000000059a6         add        rbp, r12
00000000000059a9         call       quote                                       ; quote
00000000000059ae         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000059b5         lea        rdx, qword [aNS+8]                          ; 0x9f0a
00000000000059bc         mov        rcx, rax
00000000000059bf         mov        esi, 0x1
00000000000059c4         xor        eax, eax
00000000000059c6         call       j___fprintf_chk                             ; __fprintf_chk
00000000000059cb         mov        r15, qword [r14+rbx*8]
00000000000059cf         test       r15, r15
00000000000059d2         jne        loc_5988

00000000000059d4         nop        dword [rax]

                     loc_59d8:
00000000000059d8         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=argmatch_valid+66, argmatch_valid+134
00000000000059df         mov        rax, qword [rdi+0x28]
00000000000059e3         cmp        rax, qword [rdi+0x30]
00000000000059e7         jae        loc_5a08

00000000000059e9         lea        rdx, qword [rax+1]
00000000000059ed         mov        qword [rdi+0x28], rdx
00000000000059f1         mov        byte [rax], 0xa
00000000000059f4         add        rsp, 0x8
00000000000059f8         pop        rbx
00000000000059f9         pop        rbp
00000000000059fa         pop        r12
00000000000059fc         pop        r13
00000000000059fe         pop        r14
0000000000005a00         pop        r15
0000000000005a02         ret
                        ; endp
0000000000005a03         align      8

                     loc_5a08:
0000000000005a08         add        rsp, 0x8                                    ; CODE XREF=argmatch_valid+231
0000000000005a0c         mov        esi, 0xa                                    ; argument #2 for method j___overflow
0000000000005a11         pop        rbx
0000000000005a12         pop        rbp
0000000000005a13         pop        r12
0000000000005a15         pop        r13
0000000000005a17         pop        r14
0000000000005a19         pop        r15
0000000000005a1b         jmp        j___overflow                                ; __overflow
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __xargmatch_internal:
0000000000005a20         push       r15                                         ; End of unwind block (FDE at 0xb168), Begin of unwind block (FDE at 0xb1c8)
0000000000005a22         push       r14
0000000000005a24         mov        r14, rdi
0000000000005a27         push       r13
0000000000005a29         push       r12
0000000000005a2b         mov        r12, rsi
0000000000005a2e         push       rbp
0000000000005a2f         push       rbx
0000000000005a30         mov        rbp, rcx
0000000000005a33         mov        rbx, rdx
0000000000005a36         mov        rcx, r8
0000000000005a39         mov        rdx, rbp
0000000000005a3c         sub        rsp, 0x8
0000000000005a40         mov        rsi, rbx
0000000000005a43         mov        rdi, r12
0000000000005a46         mov        r15, r8
0000000000005a49         mov        r13, r9
0000000000005a4c         call       argmatch                                    ; argmatch
0000000000005a51         test       rax, rax
0000000000005a54         js         loc_5a65

                     loc_5a56:
0000000000005a56         add        rsp, 0x8                                    ; CODE XREF=__xargmatch_internal+107
0000000000005a5a         pop        rbx
0000000000005a5b         pop        rbp
0000000000005a5c         pop        r12
0000000000005a5e         pop        r13
0000000000005a60         pop        r14
0000000000005a62         pop        r15
0000000000005a64         ret
                        ; endp

                     loc_5a65:
0000000000005a65         mov        rdx, rax                                    ; CODE XREF=__xargmatch_internal+52
0000000000005a68         mov        rsi, r12
0000000000005a6b         mov        rdi, r14
0000000000005a6e         call       argmatch_invalid                            ; argmatch_invalid
0000000000005a73         mov        rdx, r15
0000000000005a76         mov        rsi, rbp
0000000000005a79         mov        rdi, rbx
0000000000005a7c         call       argmatch_valid                              ; argmatch_valid
0000000000005a81         call       r13
0000000000005a84         mov        rax, 0xffffffffffffffff
0000000000005a8b         jmp        loc_5a56
0000000000005a8d         align      16                                          ; End of unwind block (FDE at 0xb1c8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_to_argument:
0000000000005a90         push       r14                                         ; Begin of unwind block (FDE at 0xb214)
0000000000005a92         push       r13
0000000000005a94         push       r12
0000000000005a96         push       rbp
0000000000005a97         push       rbx
0000000000005a98         mov        r14, qword [rsi]
0000000000005a9b         test       r14, r14
0000000000005a9e         je         loc_5ad1

0000000000005aa0         mov        r12, rcx
0000000000005aa3         mov        r13, rdi
0000000000005aa6         mov        rbp, rdx
0000000000005aa9         lea        rbx, qword [rsi+8]
0000000000005aad         jmp        loc_5abf
0000000000005aaf         align      16

                     loc_5ab0:
0000000000005ab0         mov        r14, qword [rbx]                            ; CODE XREF=argmatch_to_argument+63
0000000000005ab3         add        rbp, r12
0000000000005ab6         add        rbx, 0x8
0000000000005aba         test       r14, r14
0000000000005abd         je         loc_5ad1

                     loc_5abf:
0000000000005abf         mov        rdx, r12                                    ; argument "__n" for method j_memcmp, CODE XREF=argmatch_to_argument+29
0000000000005ac2         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000005ac5         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
0000000000005ac8         call       j_memcmp                                    ; memcmp
0000000000005acd         test       eax, eax
0000000000005acf         jne        loc_5ab0

                     loc_5ad1:
0000000000005ad1         pop        rbx                                         ; CODE XREF=argmatch_to_argument+14, argmatch_to_argument+45
0000000000005ad2         mov        rax, r14
0000000000005ad5         pop        rbp
0000000000005ad6         pop        r12
0000000000005ad8         pop        r13
0000000000005ada         pop        r14
0000000000005adc         ret
                        ; endp
0000000000005add         align      32                                          ; End of unwind block (FDE at 0xb214)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000005ae0         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0xb254), file_name
0000000000005ae7         ret
                        ; endp
0000000000005ae8         align      16                                          ; End of unwind block (FDE at 0xb254)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000005af0         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0xb268), ignore_EPIPE
0000000000005af7         ret
                        ; endp
0000000000005af8         align      256                                         ; End of unwind block (FDE at 0xb268)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
0000000000005b00         push       rbp                                         ; Begin of unwind block (FDE at 0xb27c), DATA XREF=main+113
0000000000005b01         push       rbx
0000000000005b02         sub        rsp, 0x8
0000000000005b06         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005b0d         call       close_stream                                ; close_stream
0000000000005b12         test       eax, eax
0000000000005b14         je         loc_5b2c

0000000000005b16         call       j___errno_location                          ; __errno_location
0000000000005b1b         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
0000000000005b22         mov        rbx, rax
0000000000005b25         je         loc_5b43

0000000000005b27         cmp        dword [rax], 0x20
0000000000005b2a         jne        loc_5b43

                     loc_5b2c:
0000000000005b2c         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
0000000000005b33         call       close_stream                                ; close_stream
0000000000005b38         test       eax, eax
0000000000005b3a         jne        loc_5b82

0000000000005b3c         add        rsp, 0x8
0000000000005b40         pop        rbx
0000000000005b41         pop        rbp
0000000000005b42         ret
                        ; endp

                     loc_5b43:
0000000000005b43         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
0000000000005b4a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005b4c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005b51         call       j_dcgettext                                 ; dcgettext
0000000000005b56         mov        rdi, qword [file_name]                      ; file_name
0000000000005b5d         mov        rbp, rax
0000000000005b60         test       rdi, rdi
0000000000005b63         je         loc_5b8d

0000000000005b65         call       quotearg_colon                              ; quotearg_colon
0000000000005b6a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000005b6c         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000005b73         mov        rcx, rax
0000000000005b76         mov        r8, rbp
0000000000005b79         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005b7b         xor        eax, eax
0000000000005b7d         call       j_error                                     ; error

                     loc_5b82:
0000000000005b82         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000005b88         call       j__exit                                     ; _exit
                        ; endp

                     loc_5b8d:
0000000000005b8d         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
0000000000005b8f         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x9f0c
0000000000005b96         mov        rcx, rax
0000000000005b99         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005b9b         xor        eax, eax
0000000000005b9d         call       j_error                                     ; error
0000000000005ba2         jmp        loc_5b82
0000000000005ba4         align      16                                          ; End of unwind block (FDE at 0xb27c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fdadvise:
0000000000005bb0         jmp        j_posix_fadvise                             ; posix_fadvise, Begin of unwind block (FDE at 0xb2ac)
                        ; endp
0000000000005bb5         align      64                                          ; End of unwind block (FDE at 0xb2ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fadvise:
0000000000005bc0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xb2c0), CODE XREF=digest_file.isra.1+71, digest_file.isra.1+242
0000000000005bc3         je         loc_5be0

0000000000005bc5         push       rbx
0000000000005bc6         mov        ebx, esi
0000000000005bc8         call       j_fileno                                    ; fileno
0000000000005bcd         mov        ecx, ebx                                    ; argument "__advise" for method j_posix_fadvise
0000000000005bcf         xor        edx, edx                                    ; argument "__len" for method j_posix_fadvise
0000000000005bd1         xor        esi, esi                                    ; argument "__offset" for method j_posix_fadvise
0000000000005bd3         pop        rbx
0000000000005bd4         mov        edi, eax                                    ; argument "__fd" for method j_posix_fadvise
0000000000005bd6         jmp        j_posix_fadvise                             ; posix_fadvise
                        ; endp
0000000000005bdb         align      32

                     loc_5be0:
0000000000005be0         ret                                                    ; CODE XREF=fadvise+3
                        ; endp
0000000000005be2         align      16                                          ; End of unwind block (FDE at 0xb2c0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fopen_safer:
0000000000005bf0         push       r12                                         ; Begin of unwind block (FDE at 0xb2dc), CODE XREF=main+2892, digest_file.isra.1+221
0000000000005bf2         push       rbp
0000000000005bf3         mov        rbp, rsi
0000000000005bf6         push       rbx
0000000000005bf7         call       j_fopen                                     ; fopen
0000000000005bfc         test       rax, rax
0000000000005bff         mov        rbx, rax
0000000000005c02         je         loc_5c11

0000000000005c04         mov        rdi, rax                                    ; argument "__stream" for method j_fileno
0000000000005c07         call       j_fileno                                    ; fileno
0000000000005c0c         cmp        eax, 0x2
0000000000005c0f         jbe        loc_5c20

                     loc_5c11:
0000000000005c11         mov        rax, rbx                                    ; CODE XREF=fopen_safer+18, fopen_safer+91, fopen_safer+115, fopen_safer+145
0000000000005c14         pop        rbx
0000000000005c15         pop        rbp
0000000000005c16         pop        r12
0000000000005c18         ret
                        ; endp
0000000000005c19         align      32

                     loc_5c20:
0000000000005c20         mov        edi, eax                                    ; CODE XREF=fopen_safer+31
0000000000005c22         call       dup_safer                                   ; dup_safer
0000000000005c27         test       eax, eax
0000000000005c29         mov        r12d, eax
0000000000005c2c         js         loc_5c68

0000000000005c2e         mov        rdi, rbx
0000000000005c31         call       rpl_fclose                                  ; rpl_fclose
0000000000005c36         test       eax, eax
0000000000005c38         jne        loc_5c4d

0000000000005c3a         mov        rsi, rbp                                    ; argument "__modes" for method j_fdopen
0000000000005c3d         mov        edi, r12d                                   ; argument "__fd" for method j_fdopen
0000000000005c40         call       j_fdopen                                    ; fdopen
0000000000005c45         test       rax, rax
0000000000005c48         mov        rbx, rax
0000000000005c4b         jne        loc_5c11

                     loc_5c4d:
0000000000005c4d         call       j___errno_location                          ; __errno_location, CODE XREF=fopen_safer+72
0000000000005c52         mov        ebp, dword [rax]
0000000000005c54         mov        rbx, rax
0000000000005c57         mov        edi, r12d                                   ; argument "__fd" for method j_close
0000000000005c5a         call       j_close                                     ; close
0000000000005c5f         mov        dword [rbx], ebp
0000000000005c61         xor        ebx, ebx
0000000000005c63         jmp        loc_5c11
0000000000005c65         align      8

                     loc_5c68:
0000000000005c68         call       j___errno_location                          ; __errno_location, CODE XREF=fopen_safer+60
0000000000005c6d         mov        r12d, dword [rax]
0000000000005c70         mov        rbp, rax
0000000000005c73         mov        rdi, rbx
0000000000005c76         call       rpl_fclose                                  ; rpl_fclose
0000000000005c7b         xor        ebx, ebx
0000000000005c7d         mov        dword [rbp], r12d
0000000000005c81         jmp        loc_5c11
0000000000005c83         align      16                                          ; End of unwind block (FDE at 0xb2dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
0000000000005c90         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xb30c), CODE XREF=main+60
0000000000005c93         push       rbx
0000000000005c94         je         loc_5d0d

0000000000005c96         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
0000000000005c9b         mov        rbx, rdi
0000000000005c9e         call       j_strrchr                                   ; strrchr
0000000000005ca3         test       rax, rax
0000000000005ca6         je         loc_5cfd

0000000000005ca8         lea        r8, qword [rax+1]
0000000000005cac         mov        rdx, r8
0000000000005caf         sub        rdx, rbx
0000000000005cb2         cmp        rdx, 0x6
0000000000005cb6         jle        loc_5cfd

0000000000005cb8         lea        rsi, qword [rax-6]
0000000000005cbc         lea        rdi, qword [aLibs]                          ; "/.libs/"
0000000000005cc3         mov        ecx, 0x7
0000000000005cc8         rep  cmpsb byte [rsi], byte [rdi]
0000000000005cca         seta       dl
0000000000005ccd         sbb        dl, 0x0
0000000000005cd0         test       dl, dl
0000000000005cd2         jne        loc_5cfd

0000000000005cd4         lea        rdi, qword [aLibs+8]                        ; 0x9f68
0000000000005cdb         mov        ecx, 0x3
0000000000005ce0         mov        rsi, r8
0000000000005ce3         mov        rbx, r8
0000000000005ce6         rep  cmpsb byte [rsi], byte [rdi]
0000000000005ce8         seta       dl
0000000000005ceb         sbb        dl, 0x0
0000000000005cee         test       dl, dl
0000000000005cf0         jne        loc_5cfd

0000000000005cf2         lea        rbx, qword [rax+4]
0000000000005cf6         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_5cfd:
0000000000005cfd         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
0000000000005d04         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
0000000000005d0b         pop        rbx
0000000000005d0c         ret
                        ; endp

                     loc_5d0d:
0000000000005d0d         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
0000000000005d14         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
0000000000005d1b         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
0000000000005d20         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000005d25         call       j_fwrite                                    ; fwrite
0000000000005d2a         call       j_abort                                     ; abort
                        ; endp
0000000000005d2f         align      16                                          ; End of unwind block (FDE at 0xb30c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
0000000000005d30         push       rbp                                         ; Begin of unwind block (FDE at 0xb32c), CODE XREF=sub_6560+2597, sub_6560+2619
0000000000005d31         push       rbx
0000000000005d32         mov        rbp, rdi
0000000000005d35         mov        ebx, esi
0000000000005d37         sub        rsp, 0x8
0000000000005d3b         call       locale_charset                              ; locale_charset
0000000000005d40         movzx      edx, byte [rax]
0000000000005d43         and        edx, 0xffffffdf
0000000000005d46         cmp        dl, 0x55
0000000000005d49         je         loc_5dc0

0000000000005d4b         cmp        dl, 0x47
0000000000005d4e         je         loc_5d70

                     loc_5d50:
0000000000005d50         lea        rax, qword [aLibs+27]                       ; 0x9f7b, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
0000000000005d57         lea        rdx, qword [aLibs+29]                       ; 0x9f7d
0000000000005d5e         cmp        ebx, 0x9
0000000000005d61         cmovne     rax, rdx
0000000000005d65         add        rsp, 0x8
0000000000005d69         pop        rbx
0000000000005d6a         pop        rbp
0000000000005d6b         ret
                        ; endp
0000000000005d6c         align      16

                     loc_5d70:
0000000000005d70         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
0000000000005d74         and        edx, 0xffffffdf
0000000000005d77         cmp        dl, 0x42
0000000000005d7a         jne        loc_5d50

0000000000005d7c         cmp        byte [rax+2], 0x31
0000000000005d80         jne        loc_5d50

0000000000005d82         cmp        byte [rax+3], 0x38
0000000000005d86         jne        loc_5d50

0000000000005d88         cmp        byte [rax+4], 0x30
0000000000005d8c         jne        loc_5d50

0000000000005d8e         cmp        byte [rax+5], 0x33
0000000000005d92         jne        loc_5d50

0000000000005d94         cmp        byte [rax+6], 0x30
0000000000005d98         jne        loc_5d50

0000000000005d9a         cmp        byte [rax+7], 0x0
0000000000005d9e         jne        loc_5d50

0000000000005da0         cmp        byte [rbp], 0x60
0000000000005da4         lea        rax, qword [aLibs+20]                       ; 0x9f74
0000000000005dab         lea        rdx, qword [aLibs+24]                       ; 0x9f78
0000000000005db2         cmovne     rax, rdx
0000000000005db6         add        rsp, 0x8
0000000000005dba         pop        rbx
0000000000005dbb         pop        rbp
0000000000005dbc         ret
                        ; endp
0000000000005dbd         align      64

                     loc_5dc0:
0000000000005dc0         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
0000000000005dc4         and        edx, 0xffffffdf
0000000000005dc7         cmp        dl, 0x54
0000000000005dca         jne        loc_5d50

0000000000005dcc         movzx      edx, byte [rax+2]
0000000000005dd0         and        edx, 0xffffffdf
0000000000005dd3         cmp        dl, 0x46
0000000000005dd6         jne        loc_5d50

0000000000005ddc         cmp        byte [rax+3], 0x2d
0000000000005de0         jne        loc_5d50

0000000000005de6         cmp        byte [rax+4], 0x38
0000000000005dea         jne        loc_5d50

0000000000005df0         cmp        byte [rax+5], 0x0
0000000000005df4         jne        loc_5d50

0000000000005dfa         cmp        byte [rbp], 0x60
0000000000005dfe         lea        rax, qword [aLibs+12]                       ; 0x9f6c
0000000000005e05         lea        rdx, qword [aLibs+16]                       ; 0x9f70
0000000000005e0c         cmovne     rax, rdx
0000000000005e10         add        rsp, 0x8
0000000000005e14         pop        rbx
0000000000005e15         pop        rbp
0000000000005e16         ret
                        ; endp
0000000000005e17         align      32                                          ; End of unwind block (FDE at 0xb32c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
0000000000005e20         push       r15                                         ; Begin of unwind block (FDE at 0xb370), CODE XREF=sub_6560+1165, sub_6560+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
0000000000005e22         push       r14
0000000000005e24         mov        r15d, r8d
0000000000005e27         push       r13
0000000000005e29         push       r12
0000000000005e2b         mov        r14, rdi
0000000000005e2e         push       rbp
0000000000005e2f         push       rbx
0000000000005e30         mov        ebx, r9d
0000000000005e33         mov        r13, rsi
0000000000005e36         mov        rbp, rcx
0000000000005e39         and        ebx, 0x2
0000000000005e3c         sub        rsp, 0xb8
0000000000005e43         mov        rax, qword [rsp+0xe8+arg_0]
0000000000005e4b         mov        qword [rsp+0xe8+var_D8], rdx
0000000000005e50         mov        dword [rsp+0xe8+var_E0], r8d
0000000000005e55         mov        dword [rsp+0xe8+var_70], r9d
0000000000005e5a         mov        qword [rsp+0xe8+var_C8], rax
0000000000005e5f         mov        rax, qword [rsp+0xe8+arg_8]
0000000000005e67         mov        qword [rsp+0xe8+var_80], rax
0000000000005e6c         mov        rax, qword [rsp+0xe8+arg_10]
0000000000005e74         mov        qword [rsp+0xe8+var_88], rax
0000000000005e79         mov        rax, qword [fs:0x28]
0000000000005e82         mov        qword [rsp+0xe8+var_40], rax
0000000000005e8a         xor        eax, eax
0000000000005e8c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000005e91         cmp        r15d, 0xa
0000000000005e95         mov        qword [rsp+0xe8+var_90], rax
0000000000005e9a         ja         loc_704f

0000000000005ea0         lea        rcx, qword [switch_table_9fe0]              ; switch_table_9fe0
0000000000005ea7         mov        edx, r15d
0000000000005eaa         movsxd     rax, dword [rcx+rdx*4]
0000000000005eae         add        rax, rcx
0000000000005eb1         jmp        rax                                         ; switch statement using table at 0x9fe0, with 11 cases, 0x5eb3,0x6a84,0x6ae0,0x6b35,0x6b7a,0x6bb4,0x6c5a,0x6c94,0x6e88

                     loc_5eb3:
0000000000005eb3         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_6560+1318
0000000000005eb8         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000005ebd         xor        r12d, r12d
0000000000005ec0         mov        qword [rsp+0xe8+var_98], 0x0
0000000000005ec9         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000005ece         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_5ed3:
0000000000005ed3         lea        rax, qword [aLibs+29]                       ; 0x9f7d, CODE XREF=sub_6560+1876
0000000000005eda         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000005ee3         xor        r15d, r15d
0000000000005ee6         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000005eee         mov        qword [rsp+0xe8+var_A0], rax

                     loc_5ef3:
0000000000005ef3         xor        r11d, r11d                                  ; CODE XREF=sub_6560+180, sub_6560+1400, sub_6560+1488, sub_6560+1557, sub_6560+1615, sub_6560+1781, sub_6560+1839, sub_6560+2408, sub_6560+2485
0000000000005ef6         mov        rax, rbp
0000000000005ef9         mov        r8d, r12d
0000000000005efc         mov        rbp, r11
0000000000005eff         mov        r11, rax
0000000000005f02         nop        word [rax+rax]

                     loc_5f08:
0000000000005f08         cmp        r11, rbp                                    ; CODE XREF=sub_6010+194
0000000000005f0b         setne      r12b
0000000000005f0f         cmp        r11, 0xffffffffffffffff
0000000000005f13         jne        loc_5f22

0000000000005f15         mov        rax, qword [rsp+0xe8+var_D8]
0000000000005f1a         cmp        byte [rax+rbp], 0x0
0000000000005f1e         setne      r12b

                     loc_5f22:
0000000000005f22         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
0000000000005f25         je         loc_6580

0000000000005f2b         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000005f30         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000005f35         lea        r9, qword [rdi+rbp]
0000000000005f39         setne      al
0000000000005f3c         and        al, byte [rsp+0xe8+var_DB]
0000000000005f40         mov        r10d, eax
0000000000005f43         je         loc_5ff0

0000000000005f49         mov        rax, qword [rsp+0xe8+var_D0]
0000000000005f4e         test       rax, rax
0000000000005f51         je         loc_6380

0000000000005f57         cmp        r11, 0xffffffffffffffff
0000000000005f5b         lea        rbx, qword [rbp+rax]
0000000000005f60         jne        loc_5f90

0000000000005f62         cmp        rax, 0x1
0000000000005f66         jbe        loc_5f90

0000000000005f68         mov        byte [rsp+0xe8+var_B0], r8b
0000000000005f6d         mov        byte [rsp+0xe8+var_B8], r10b
0000000000005f72         mov        qword [rsp+0xe8+var_C0], r9
0000000000005f77         call       j_strlen                                    ; strlen
0000000000005f7c         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000005f82         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000005f88         mov        r11, rax
0000000000005f8b         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_5f90:
0000000000005f90         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000005f93         mov        byte [rsp+0xe8+var_C0], r10b
0000000000005f98         ja         loc_6550

0000000000005f9e         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000005fa3         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000005fa8         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
0000000000005fab         mov        qword [rsp+0xe8+var_A8], r11
0000000000005fb0         mov        byte [rsp+0xe8+var_B0], r8b
0000000000005fb5         mov        qword [rsp+0xe8+var_B8], r9
0000000000005fba         call       j_memcmp                                    ; memcmp
0000000000005fbf         test       eax, eax
0000000000005fc1         mov        r9, qword [rsp+0xe8+var_B8]
0000000000005fc6         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000005fcc         mov        r11, qword [rsp+0xe8+var_A8]
0000000000005fd1         jne        loc_6550

0000000000005fd7         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000005fdc         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000005fe2         jne        loc_6f65

0000000000005fe8         nop        dword [rax+rax]

                     loc_5ff0:
0000000000005ff0         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_6540+19
0000000000005ff4         cmp        bl, 0x7e
0000000000005ff7         ja         loc_6318

0000000000005ffd         lea        rcx, qword [switch_table_9fe0+44]           ; 0xa00c
0000000000006004         movzx      edx, bl
0000000000006007         movsxd     rax, dword [rcx+rdx*4]
000000000000600b         add        rax, rcx
000000000000600e         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_6010:
0000000000006010         xor        r10d, r10d
0000000000006013         cmp        r11, 0x1
0000000000006017         setne      al
000000000000601a         cmp        r11, 0xffffffffffffffff
000000000000601e         jne        loc_602c

0000000000006020         mov        rax, qword [rsp+arg_8]
0000000000006025         cmp        byte [rax+1], 0x0
0000000000006029         setne      al

                     loc_602c:
000000000000602c         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_6010+14
0000000000006031         sete       dl
0000000000006034         test       al, al
0000000000006036         je         loc_6288

                     loc_603c:
000000000000603c         xor        r12d, r12d                                  ; CODE XREF=sub_6280+11
000000000000603f         xor        eax, eax
0000000000006041         nop        dword [rax]
                        ; endp

                     loc_6048:
0000000000006048         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_6230+50, sub_6300+119
000000000000604d         jne        loc_6162

0000000000006053         test       dl, dl
0000000000006055         jne        loc_6162

                     loc_605b:
000000000000605b         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_6110+87
0000000000006060         test       rsi, rsi
0000000000006063         je         loc_6079

0000000000006065         mov        edx, ebx
0000000000006067         shr        dl, 0x5
000000000000606a         movzx      edx, dl
000000000000606d         mov        edx, dword [rsi+rdx*4]
0000000000006070         bt         edx, ebx
0000000000006073         jb         loc_61c3

                     loc_6079:
0000000000006079         test       r10b, r10b                                  ; CODE XREF=sub_6010+83, sub_6110+93
000000000000607c         jne        loc_61c3

0000000000006082         xor        eax, 0x1
0000000000006085         add        rbp, 0x1
0000000000006089         and        eax, r8d

                     loc_608c:
000000000000608c         test       al, al                                      ; CODE XREF=sub_6560+936
000000000000608e         je         loc_60b0

0000000000006090         cmp        r13, r15
0000000000006093         jbe        loc_609a

0000000000006095         mov        byte [r14+r15], 0x27

                     loc_609a:
000000000000609a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_6010+131
000000000000609e         cmp        r13, rax
00000000000060a1         jbe        loc_60a9

00000000000060a3         mov        byte [r14+r15+1], 0x27

                     loc_60a9:
00000000000060a9         add        r15, 0x2                                    ; CODE XREF=sub_6010+145
00000000000060ad         xor        r8d, r8d

                     loc_60b0:
00000000000060b0         cmp        r15, r13                                    ; CODE XREF=sub_6010+126, sub_6110+275, sub_6560+869
00000000000060b3         jae        loc_60b9

00000000000060b5         mov        byte [r14+r15], bl

                     loc_60b9:
00000000000060b9         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_6010+163
00000000000060be         add        r15, 0x1
00000000000060c2         mov        eax, 0x0
00000000000060c7         test       r12b, r12b
00000000000060ca         cmove      edi, eax
00000000000060cd         mov        byte [rsp+0xe8+var_DA], dil
00000000000060d2         jmp        loc_5f08
00000000000060d7         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_60e0:
00000000000060e0         xor        r10d, r10d
00000000000060e3         mov        eax, dword [rsp+arg_0]
00000000000060e7         cmp        eax, 0x2
00000000000060ea         je         loc_66a8

00000000000060f0         cmp        eax, 0x5
00000000000060f3         je         loc_6668

00000000000060f9         cmp        eax, 0x2
00000000000060fc         mov        ebx, 0x3f
0000000000006101         sete       dl
0000000000006104         xor        r12d, r12d
0000000000006107         xor        eax, eax
0000000000006109         jmp        sub_6010+56
                        ; endp
000000000000610e         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_6110:
0000000000006110         xor        r10d, r10d
0000000000006113         cmp        dword [rsp+arg_0], 0x2
0000000000006118         je         loc_6620

000000000000611e         mov        byte [rsp+arg_74], r12b
0000000000006123         xor        edx, edx
0000000000006125         xor        eax, eax
0000000000006127         mov        ebx, 0x27
000000000000612c         jmp        sub_6010+56
                        ; endp
0000000000006131         nop        dword [rax]
0000000000006138         mov        edx, 0x9
000000000000613d         mov        ebx, 0x74

                     loc_6142:
0000000000006142         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_62d0+10, sub_63c0+37, sub_6500+53
0000000000006147         sete       al
000000000000614a         and        al, byte [rsp+arg_7]
000000000000614e         jne        sub_6280+30

0000000000006154         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_6110+114
0000000000006159         jne        loc_61c0

                     loc_615b:
000000000000615b         mov        ebx, edx                                    ; CODE XREF=sub_6230+18
000000000000615d         xor        r12d, r12d
0000000000006160         xor        eax, eax
                        ; endp

                     loc_6162:
0000000000006162         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_6010+61, sub_6010+69
0000000000006167         jne        loc_605b

000000000000616d         jmp        loc_6079
0000000000006172         nop        word [rax+rax]
0000000000006178         mov        edx, 0x8
000000000000617d         mov        ebx, 0x62
0000000000006182         jmp        sub_6110+68
0000000000006184         nop        dword [rax]
0000000000006188         cmp        dword [rsp+8], 0x2
000000000000618d         je         sub_6560                                    ; sub_6560
0000000000006193         cmp        byte [rsp+0xd], 0x0
0000000000006198         je         sub_63a0+16

                     loc_619e:
000000000000619e         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_63a0+8
00000000000061a3         je         loc_63b0

00000000000061a9         cmp        qword [rsp+arg_10], 0x0
00000000000061af         jne        loc_656b

00000000000061b5         mov        ebx, 0x5c
00000000000061ba         nop        word [rax+rax]
                        ; endp

                     loc_61c0:
00000000000061c0         xor        r12d, r12d                                  ; CODE XREF=sub_6110+73, sub_6500+29
                        ; endp

                     loc_61c3:
00000000000061c3         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_6010+99, sub_6010+108
00000000000061c8         sete       dl
00000000000061cb         cmp        byte [rsp+0xe8+var_D9], 0x0
00000000000061d0         mov        eax, edx
00000000000061d2         jne        loc_6a28

00000000000061d8         mov        eax, r8d
00000000000061db         xor        eax, 0x1
00000000000061de         and        al, dl
00000000000061e0         je         loc_6211

00000000000061e2         cmp        r13, r15
00000000000061e5         jbe        loc_61ec

00000000000061e7         mov        byte [r14+r15], 0x27

                     loc_61ec:
00000000000061ec         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_6110+213
00000000000061f0         cmp        r13, rdx
00000000000061f3         jbe        loc_61fb

00000000000061f5         mov        byte [r14+r15+1], 0x24

                     loc_61fb:
00000000000061fb         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_6110+227
00000000000061ff         cmp        r13, rdx
0000000000006202         jbe        loc_620a

0000000000006204         mov        byte [r14+r15+2], 0x27

                     loc_620a:
000000000000620a         add        r15, 0x3                                    ; CODE XREF=sub_6110+242
000000000000620e         mov        r8d, eax

                     loc_6211:
0000000000006211         cmp        r13, r15                                    ; CODE XREF=sub_6110+208
0000000000006214         jbe        loc_621b

0000000000006216         mov        byte [r14+r15], 0x5c

                     loc_621b:
000000000000621b         add        r15, 0x1                                    ; CODE XREF=sub_6110+260
000000000000621f         add        rbp, 0x1
0000000000006223         jmp        loc_60b0
0000000000006228         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_6230:
0000000000006230         cmp        byte [rsp+arg_5], 0x0
0000000000006235         jne        loc_6403

000000000000623b         xor        edx, edx
000000000000623d         test       byte [rsp+arg_70], 0x1
0000000000006242         je         loc_615b

0000000000006248         add        rbp, 0x1
000000000000624c         jmp        quotearg_buffer_restyled+232
                        ; endp
0000000000006251         nop        dword [rax]
0000000000006258         cmp        dword [rsp+8], 0x2
000000000000625d         sete       dl
0000000000006260         xor        eax, eax
0000000000006262         jmp        sub_6010+56
0000000000006267         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6270:
0000000000006270         mov        edx, 0x7
0000000000006275         mov        ebx, 0x61
000000000000627a         jmp        sub_6110+68
                        ; endp
000000000000627f         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6280:
0000000000006280         cmp        dword [rsp+8], 0x2
0000000000006285         sete       dl
                        ; endp

                     loc_6288:
0000000000006288         test       rbp, rbp                                    ; CODE XREF=sub_6010+38, sub_64a0+35
000000000000628b         jne        loc_603c

0000000000006291         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_64d0+43
0000000000006296         and        al, dl
0000000000006298         je         sub_6010+56

000000000000629e         mov        rbp, r11
00000000000062a1         mov        dword [rsp+arg_0], 0x2
00000000000062a9         jmp        sub_6560+1097
                        ; endp
00000000000062ae         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_62b0:
00000000000062b0         cmp        dword [rsp+arg_0], 0x2
00000000000062b5         sete       dl
00000000000062b8         xor        r12d, r12d
00000000000062bb         jmp        sub_6280+17
                        ; endp
00000000000062bd         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_62c0:
00000000000062c0         cmp        dword [rsp+arg_0], 0x2
00000000000062c5         mov        ebx, 0x20
00000000000062ca         sete       dl
00000000000062cd         jmp        sub_6280+17
                        ; endp
00000000000062cf         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_62d0:
00000000000062d0         mov        edx, 0xd
00000000000062d5         mov        ebx, 0x72
00000000000062da         jmp        loc_6142
00000000000062df         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_62e0:
00000000000062e0         mov        edx, 0xc
00000000000062e5         mov        ebx, 0x66
00000000000062ea         jmp        sub_6110+68
                        ; endp
00000000000062ef         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_62f0:
00000000000062f0         mov        edx, 0xb
00000000000062f5         mov        ebx, 0x76
00000000000062fa         jmp        sub_6110+68
                        ; endp
00000000000062ff         align      256


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6300:
0000000000006300         mov        edx, 0xa
0000000000006305         mov        ebx, 0x6e
000000000000630a         jmp        sub_6110+50
                        ; endp
000000000000630f         align      16

                     loc_6310:
0000000000006310         xor        r10d, r10d                                  ; CODE XREF=sub_6300+135
0000000000006313         nop        dword [rax+rax]

                     loc_6318:
0000000000006318         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
000000000000631e         jne        loc_66c8

0000000000006324         mov        qword [rsp+0xe8+var_B0], r11
0000000000006329         mov        byte [rsp+0xe8+var_B8], r8b
000000000000632e         mov        byte [rsp+0xe8+var_C0], r10b
0000000000006333         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000006338         mov        rcx, qword [rax]
000000000000633b         movzx      edx, bl
000000000000633e         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000006344         movzx      r8d, byte [rsp+0xe8+var_B8]
000000000000634a         mov        r11, qword [rsp+0xe8+var_B0]
000000000000634f         mov        edi, 0x1
0000000000006354         movzx      eax, word [rcx+rdx*2]
0000000000006358         and        ax, 0x4000
000000000000635c         setne      r12b
0000000000006360         sete       al
0000000000006363         and        al, byte [rsp+0xe8+var_DB]

                     loc_6367:
0000000000006367         test       al, al                                      ; CODE XREF=sub_6560+2221
0000000000006369         jne        loc_6d01

000000000000636f         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000006374         sete       dl
0000000000006377         jmp        loc_6048
000000000000637c         align      128

                     loc_6380:
0000000000006380         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000006384         cmp        bl, 0x7e
0000000000006387         ja         loc_6310

0000000000006389         lea        rcx, qword [switch_table_9fe0+552]          ; 0xa208
0000000000006390         movzx      edx, bl
0000000000006393         movsxd     rax, dword [rcx+rdx*4]
0000000000006397         add        rax, rcx
000000000000639a         jmp        rax
                        ; endp
000000000000639c         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_63a0:
00000000000063a0         xor        r10d, r10d
00000000000063a3         cmp        byte [rsp+arg_5], 0x0
00000000000063a8         jne        loc_619e

00000000000063ae         nop

                     loc_63b0:
00000000000063b0         mov        edx, 0x5c                                   ; CODE XREF=sub_6110+136, sub_6110+147
00000000000063b5         mov        ebx, 0x5c
00000000000063ba         jmp        sub_6110+68
                        ; endp
00000000000063bf         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_63c0:
00000000000063c0         mov        edx, 0xc
00000000000063c5         xor        r10d, r10d
00000000000063c8         mov        ebx, 0x66
00000000000063cd         jmp        sub_6110+68
                        ; endp
00000000000063d2         nop        word [rax+rax]
00000000000063d8         mov        edx, 0xa
00000000000063dd         xor        r10d, r10d
00000000000063e0         mov        ebx, 0x6e
00000000000063e5         jmp        sub_6110+50
00000000000063ea         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_63f0:
00000000000063f0         mov        ebx, 0x61
00000000000063f5         jmp        sub_6110+176
                        ; endp
00000000000063fa         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6400:
0000000000006400         xor        r10d, r10d
                        ; endp

                     loc_6403:
0000000000006403         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_6230+5
0000000000006408         sete       dl
000000000000640b         cmp        byte [rsp+arg_7], 0x0
0000000000006410         jne        loc_6faa

0000000000006416         mov        eax, r8d
0000000000006419         mov        rcx, r15
000000000000641c         xor        eax, 0x1
000000000000641f         and        al, dl
0000000000006421         je         loc_6450

0000000000006423         cmp        r13, r15
0000000000006426         jbe        loc_642d

0000000000006428         mov        byte [r14+r15], 0x27

                     loc_642d:
000000000000642d         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_6400+38
0000000000006431         cmp        r13, rcx
0000000000006434         jbe        loc_643c

0000000000006436         mov        byte [r14+r15+1], 0x24

                     loc_643c:
000000000000643c         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_6400+52
0000000000006440         cmp        r13, rcx
0000000000006443         ja         loc_6a79

                     loc_6449:
0000000000006449         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_6560+1311
000000000000644d         mov        r8d, eax

                     loc_6450:
0000000000006450         cmp        r13, rcx                                    ; CODE XREF=sub_6400+33
0000000000006453         jbe        loc_645a

0000000000006455         mov        byte [r14+rcx], 0x5c

                     loc_645a:
000000000000645a         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_6400+83
000000000000645f         lea        r15, qword [rcx+1]
0000000000006463         je         loc_6a69

0000000000006469         lea        rax, qword [rbp+1]
000000000000646d         cmp        rax, r11
0000000000006470         jae        loc_648b

0000000000006472         mov        rax, qword [rsp+arg_8]
0000000000006477         movzx      eax, byte [rax+rbp+1]
000000000000647c         mov        byte [rsp+arg_20], al
0000000000006480         sub        eax, 0x30
0000000000006483         cmp        al, 0x9
0000000000006485         jbe        loc_6cb9

                     loc_648b:
000000000000648b         mov        eax, r12d                                   ; CODE XREF=sub_6400+112
000000000000648e         mov        ebx, 0x30
0000000000006493         xor        r12d, r12d
0000000000006496         jmp        sub_6010+56
                        ; endp
000000000000649b         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_64a0:
00000000000064a0         cmp        dword [rsp+arg_0], 0x2
00000000000064a5         mov        r12d, r10d
00000000000064a8         sete       dl
00000000000064ab         xor        r10d, r10d
00000000000064ae         xor        eax, eax
00000000000064b0         jmp        sub_6010+56
                        ; endp
00000000000064b5         nop        dword [rax]
00000000000064b8         cmp        dword [rsp+8], 0x2
00000000000064bd         sete       dl
00000000000064c0         xor        r10d, r10d
00000000000064c3         jmp        sub_6280+8
00000000000064c8         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_64d0:
00000000000064d0         cmp        dword [rsp+8], 0x2
00000000000064d5         sete       dl
00000000000064d8         xor        r10d, r10d
00000000000064db         xor        r12d, r12d
00000000000064de         jmp        sub_6280+17
                        ; endp
00000000000064e3         nop        dword [rax+rax]
00000000000064e8         cmp        dword [rsp+8], 0x2
00000000000064ed         mov        r12d, r10d
00000000000064f0         mov        ebx, 0x20
00000000000064f5         sete       dl
00000000000064f8         xor        r10d, r10d
00000000000064fb         jmp        sub_6280+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6500:
0000000000006500         mov        edx, 0xd
0000000000006505         xor        r10d, r10d
0000000000006508         mov        ebx, 0x72
000000000000650d         jmp        sub_6110+50
                        ; endp
0000000000006512         nop        word [rax+rax]
0000000000006518         mov        ebx, 0x76
000000000000651d         jmp        sub_6110+176
0000000000006522         nop        word [rax+rax]
0000000000006528         mov        edx, 0x9
000000000000652d         xor        r10d, r10d
0000000000006530         mov        ebx, 0x74
0000000000006535         jmp        sub_6110+50
000000000000653a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6540:
0000000000006540         mov        ebx, 0x62
0000000000006545         jmp        sub_6110+176
                        ; endp
000000000000654a         nop        word [rax+rax]

                     loc_6550:
0000000000006550         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
0000000000006553         jmp        loc_5ff0
0000000000006558         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_6560:
0000000000006560         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_6110+125
0000000000006565         jne        sub_6560+2416
                        ; endp

                     loc_656b:
000000000000656b         add        rbp, 0x1                                    ; CODE XREF=sub_6110+159
000000000000656f         mov        eax, r8d
0000000000006572         xor        r12d, r12d
0000000000006575         mov        ebx, 0x5c
000000000000657a         jmp        sub_6010+124
                        ; endp
000000000000657f         align      128

                     loc_6580:
0000000000006580         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
0000000000006585         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000658a         mov        r12d, r8d
000000000000658d         mov        rbp, r11
0000000000006590         sete       dl
0000000000006593         mov        eax, ebx
0000000000006595         test       r15, r15
0000000000006598         sete       cl
000000000000659b         and        eax, edx
000000000000659d         and        al, cl
000000000000659f         jne        loc_7006

00000000000065a5         mov        eax, ebx
00000000000065a7         xor        eax, 0x1
00000000000065aa         and        dl, al
00000000000065ac         je         loc_6f1c

00000000000065b2         cmp        byte [rsp+0xe8+var_6C], 0x0
00000000000065b7         je         loc_6f1a

00000000000065bd         cmp        byte [rsp+0xe8+var_DA], 0x0
00000000000065c2         jne        loc_6fbd

00000000000065c8         test       r13, r13
00000000000065cb         sete       al
00000000000065ce         cmp        qword [rsp+0xe8+var_98], 0x0
00000000000065d4         setne      dl
00000000000065d7         and        al, dl
00000000000065d9         je         loc_6ffc

00000000000065df         mov        r13, qword [rsp+0xe8+var_98]

                     loc_65e4:
00000000000065e4         lea        rbx, qword [aLibs+29]                       ; 0x9f7d, CODE XREF=sub_6560+2781
00000000000065eb         mov        byte [r14], 0x27
00000000000065ef         mov        dword [rsp+0xe8+var_E0], 0x2
00000000000065f7         mov        r15d, 0x1
00000000000065fd         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000006606         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000660b         mov        qword [rsp+0xe8+var_A0], rbx
0000000000006610         mov        byte [rsp+0xe8+var_6C], al
0000000000006614         jmp        loc_5ef3
0000000000006619         align      32

                     loc_6620:
0000000000006620         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_6110+8
0000000000006625         jne        sub_6560+2416

000000000000662b         test       r13, r13
000000000000662e         je         loc_6a30

0000000000006634         xor        edx, edx
0000000000006636         cmp        qword [rsp+arg_48], 0x0
000000000000663c         jne        loc_6a30

                     loc_6642:
0000000000006642         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_6560+1284, sub_6560+2794
0000000000006647         add        r15, 0x3
000000000000664b         xor        eax, eax
000000000000664d         mov        byte [rsp+arg_74], r12b
0000000000006652         xor        r8d, r8d
0000000000006655         mov        r13, rdx
0000000000006658         mov        ebx, 0x27
000000000000665d         jmp        sub_6010+105
                        ; endp
0000000000006662         align      8

                     loc_6668:
0000000000006668         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_60e0+19
000000000000666d         je         loc_6690

000000000000666f         lea        rcx, qword [rbp+2]
0000000000006673         cmp        rcx, r11
0000000000006676         jae        loc_6690

0000000000006678         mov        rax, qword [rsp+arg_8]
000000000000667d         cmp        byte [rax+rbp+1], 0x3f
0000000000006682         je         loc_6e12

0000000000006688         nop        dword [rax+rax]

                     loc_6690:
0000000000006690         xor        edx, edx                                    ; CODE XREF=sub_6560+269, sub_6560+278, sub_6560+2233, sub_6560+2253
0000000000006692         xor        r12d, r12d
0000000000006695         xor        eax, eax
0000000000006697         mov        ebx, 0x3f
000000000000669c         jmp        sub_6010+56
                        ; endp
00000000000066a1         align      8

                     loc_66a8:
00000000000066a8         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_60e0+10
00000000000066ad         jne        loc_6ed0

00000000000066b3         xor        r12d, r12d
00000000000066b6         xor        eax, eax
00000000000066b8         mov        ebx, 0x3f
00000000000066bd         jmp        sub_6010+105
                        ; endp
00000000000066c2         align      8

                     loc_66c8:
00000000000066c8         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_6300+30
00000000000066d0         cmp        r11, 0xffffffffffffffff
00000000000066d4         mov        qword [rsp+0xe8+var_48], 0x0
00000000000066e0         mov        qword [rsp+0xe8+var_C0], rax
00000000000066e5         jne        loc_6714

00000000000066e7         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
00000000000066ec         mov        byte [rsp+0xe8+var_A8], r8b
00000000000066f1         mov        byte [rsp+0xe8+var_B0], r10b
00000000000066f6         mov        qword [rsp+0xe8+var_B8], r9
00000000000066fb         call       j_strlen                                    ; strlen
0000000000006700         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000006706         movzx      r10d, byte [rsp+0xe8+var_B0]
000000000000670c         mov        r11, rax
000000000000670f         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_6714:
0000000000006714         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_6560+389
000000000000671c         xor        ecx, ecx
000000000000671e         mov        byte [rsp+0xe8+var_6A], bl
0000000000006722         mov        byte [rsp+0xe8+var_6B], r8b
0000000000006727         mov        rbx, rcx
000000000000672a         mov        qword [rsp+0xe8+var_60], r9
0000000000006732         mov        qword [rsp+0xe8+var_B0], rax
0000000000006737         mov        byte [rsp+0xe8+var_69], r10b
000000000000673c         mov        qword [rsp+0xe8+var_68], r15
0000000000006744         mov        qword [rsp+0xe8+var_A8], r14
0000000000006749         mov        qword [rsp+0xe8+var_78], r13
000000000000674e         mov        qword [rsp+0xe8+var_B8], r11

                     loc_6753:
0000000000006753         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_6560+623
0000000000006758         lea        r14, qword [rbp+rbx]
000000000000675d         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000006762         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000006767         mov        rdi, qword [rsp+0xe8+var_B0]
000000000000676c         lea        r13, qword [rax+r14]
0000000000006770         sub        rdx, r14
0000000000006773         mov        rsi, r13
0000000000006776         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000677b         test       rax, rax
000000000000677e         mov        r15, rax
0000000000006781         je         loc_67d1

0000000000006783         cmp        rax, 0xffffffffffffffff
0000000000006787         je         loc_6da5

000000000000678d         cmp        rax, 0xfffffffffffffffe
0000000000006791         je         loc_6d31

0000000000006797         cmp        dword [rsp+0xe8+var_E0], 0x2
000000000000679c         sete       al
000000000000679f         and        al, byte [rsp+0xe8+var_D9]
00000000000067a3         jne        loc_6940

                     loc_67a9:
00000000000067a9         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_6560+996, sub_6560+1031
00000000000067b0         call       j_iswprint                                  ; iswprint
00000000000067b5         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
00000000000067ba         test       eax, eax
00000000000067bc         mov        eax, 0x0
00000000000067c1         cmove      r12d, eax
00000000000067c5         add        rbx, r15
00000000000067c8         call       j_mbsinit                                   ; mbsinit
00000000000067cd         test       eax, eax
00000000000067cf         je         loc_6753

                     loc_67d1:
00000000000067d1         mov        edx, r12d                                   ; CODE XREF=sub_6560+545
00000000000067d4         mov        rdi, rbx
00000000000067d7         movzx      r8d, byte [rsp+0xe8+var_6B]
00000000000067dd         xor        edx, 0x1
00000000000067e0         movzx      ebx, byte [rsp+0xe8+var_6A]
00000000000067e5         movzx      r10d, byte [rsp+0xe8+var_69]
00000000000067eb         and        dl, byte [rsp+0xe8+var_DB]
00000000000067ef         mov        r15, qword [rsp+0xe8+var_68]
00000000000067f7         mov        r14, qword [rsp+0xe8+var_A8]
00000000000067fc         mov        r13, qword [rsp+0xe8+var_78]
0000000000006801         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_6806:
0000000000006806         cmp        rdi, 0x1                                    ; CODE XREF=sub_6560+2112, sub_6560+2168
000000000000680a         jbe        loc_6e0b

                     loc_6810:
0000000000006810         mov        rcx, rdi                                    ; CODE XREF=sub_6560+1961
0000000000006813         xor        esi, esi
0000000000006815         movzx      r9d, byte [rsp+0xe8+var_D9]
000000000000681b         add        rcx, rbp
000000000000681e         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000006823         jmp        loc_68de
0000000000006828         align      16

                     loc_6830:
0000000000006830         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_6560+896
0000000000006835         sete       al
0000000000006838         test       r9b, r9b
000000000000683b         jne        loc_6cf0

0000000000006841         mov        esi, r8d
0000000000006844         xor        esi, 0x1
0000000000006847         and        al, sil
000000000000684a         je         loc_687b

000000000000684c         cmp        r13, r15
000000000000684f         jbe        loc_6856

0000000000006851         mov        byte [r14+r15], 0x27

                     loc_6856:
0000000000006856         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_6560+751
000000000000685a         cmp        r13, rsi
000000000000685d         jbe        loc_6865

000000000000685f         mov        byte [r14+r15+1], 0x24

                     loc_6865:
0000000000006865         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_6560+765
0000000000006869         cmp        r13, rsi
000000000000686c         jbe        loc_6874

000000000000686e         mov        byte [r14+r15+2], 0x27

                     loc_6874:
0000000000006874         add        r15, 0x3                                    ; CODE XREF=sub_6560+780
0000000000006878         mov        r8d, eax

                     loc_687b:
000000000000687b         cmp        r13, r15                                    ; CODE XREF=sub_6560+746
000000000000687e         jbe        loc_6885

0000000000006880         mov        byte [r14+r15], 0x5c

                     loc_6885:
0000000000006885         lea        rax, qword [r15+1]                          ; CODE XREF=sub_6560+798
0000000000006889         cmp        r13, rax
000000000000688c         jbe        loc_689b

000000000000688e         mov        eax, ebx
0000000000006890         shr        al, 0x6
0000000000006893         add        eax, 0x30
0000000000006896         mov        byte [r14+r15+1], al

                     loc_689b:
000000000000689b         lea        rax, qword [r15+2]                          ; CODE XREF=sub_6560+812
000000000000689f         cmp        r13, rax
00000000000068a2         jbe        loc_68b4

00000000000068a4         mov        eax, ebx
00000000000068a6         shr        al, 0x3
00000000000068a9         and        eax, 0x7
00000000000068ac         add        eax, 0x30
00000000000068af         mov        byte [r14+r15+2], al

                     loc_68b4:
00000000000068b4         and        ebx, 0x7                                    ; CODE XREF=sub_6560+834
00000000000068b7         add        rbp, 0x1
00000000000068bb         add        r15, 0x3
00000000000068bf         add        ebx, 0x30
00000000000068c2         cmp        rbp, rcx
00000000000068c5         jae        loc_60b0

00000000000068cb         mov        esi, edx

                     loc_68cd:
00000000000068cd         cmp        r13, r15                                    ; CODE XREF=sub_6560+985, sub_6560+1969
00000000000068d0         jbe        loc_68d6

00000000000068d2         mov        byte [r14+r15], bl

                     loc_68d6:
00000000000068d6         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_6560+880
00000000000068da         add        r15, 0x1

                     loc_68de:
00000000000068de         test       dl, dl                                      ; CODE XREF=sub_6560+707
00000000000068e0         jne        loc_6830

00000000000068e6         mov        eax, esi
00000000000068e8         xor        eax, 0x1
00000000000068eb         and        eax, r8d
00000000000068ee         test       r10b, r10b
00000000000068f1         je         loc_6901

00000000000068f3         cmp        r13, r15
00000000000068f6         jbe        loc_68fd

00000000000068f8         mov        byte [r14+r15], 0x5c

                     loc_68fd:
00000000000068fd         add        r15, 0x1                                    ; CODE XREF=sub_6560+918

                     loc_6901:
0000000000006901         add        rbp, 0x1                                    ; CODE XREF=sub_6560+913
0000000000006905         cmp        rbp, rcx
0000000000006908         jae        loc_608c

000000000000690e         test       al, al
0000000000006910         je         loc_6d0e

0000000000006916         cmp        r13, r15
0000000000006919         jbe        loc_6920

000000000000691b         mov        byte [r14+r15], 0x27

                     loc_6920:
0000000000006920         lea        rax, qword [r15+1]                          ; CODE XREF=sub_6560+953
0000000000006924         cmp        r13, rax
0000000000006927         jbe        loc_692f

0000000000006929         mov        byte [r14+r15+1], 0x27

                     loc_692f:
000000000000692f         add        r15, 0x2                                    ; CODE XREF=sub_6560+967
0000000000006933         xor        r10d, r10d
0000000000006936         xor        r8d, r8d
0000000000006939         jmp        loc_68cd
000000000000693b         align      64

                     loc_6940:
0000000000006940         cmp        r15, 0x1                                    ; CODE XREF=sub_6560+579
0000000000006944         je         loc_67a9

000000000000694a         mov        rdi, qword [rsp+0xe8+var_D8]
000000000000694f         lea        rcx, qword [rdi+r15]
0000000000006953         lea        rdx, qword [rdi+r14+1]
0000000000006958         lea        r8, qword [rcx+r14]
000000000000695c         jmp        loc_696d
000000000000695e         align      32

                     loc_6960:
0000000000006960         add        rdx, 0x1                                    ; CODE XREF=sub_6560+1046, sub_6560+1072
0000000000006964         cmp        r8, rdx
0000000000006967         je         loc_67a9

                     loc_696d:
000000000000696d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_6560+1020
0000000000006970         sub        ecx, 0x5b
0000000000006973         cmp        cl, 0x21
0000000000006976         ja         loc_6960

0000000000006978         mov        esi, 0x1
000000000000697d         shl        rsi, cl
0000000000006980         mov        rcx, rsi
0000000000006983         movabs     rsi, 0x20000002b
000000000000698d         test       rcx, rsi
0000000000006990         je         loc_6960

0000000000006992         mov        r14, qword [rsp+0xe8+var_A8]
0000000000006997         mov        r13, qword [rsp+0xe8+var_78]
000000000000699c         mov        rbp, qword [rsp+0xe8+var_B8]
00000000000069a1         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_69a9:
00000000000069a9         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_6560+1227, sub_6560+1948, sub_6560+2585, sub_6560+2734
00000000000069ae         je         loc_69c0

00000000000069b0         test       al, al
00000000000069b2         mov        eax, 0x4
00000000000069b7         cmove      eax, dword [rsp+0xe8+var_E0]
00000000000069bc         mov        dword [rsp+0xe8+var_E0], eax

                     loc_69c0:
00000000000069c0         sub        rsp, 0x8                                    ; CODE XREF=sub_6560+1102
00000000000069c4         mov        rcx, rbp
00000000000069c7         mov        rsi, r13
00000000000069ca         push       qword [rsp+0xf0+var_88]
00000000000069ce         push       qword [rsp+0xf8+var_80]
00000000000069d2         mov        rdi, r14
00000000000069d5         push       0x0
00000000000069d7         mov        r9d, dword [rsp+0x108+var_70]
00000000000069df         mov        r8d, dword [rsp+0x108+var_E0]
00000000000069e4         mov        rdx, qword [rsp+0x108+var_D8]
00000000000069e9         and        r9d, 0xfffffffd
00000000000069ed         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000069f2         add        rsp, 0x20
00000000000069f6         mov        r15, rax

                     loc_69f9:
00000000000069f9         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_6560+2549, sub_6560+2560, sub_6560+2711
0000000000006a01         xor        rbx, qword [fs:0x28]
0000000000006a0a         mov        rax, r15
0000000000006a0d         jne        loc_7013

0000000000006a13         add        rsp, 0xb8
0000000000006a1a         pop        rbx
0000000000006a1b         pop        rbp
0000000000006a1c         pop        r12
0000000000006a1e         pop        r13
0000000000006a20         pop        r14
0000000000006a22         pop        r15
0000000000006a24         ret
                        ; endp
0000000000006a25         align      8

                     loc_6a28:
0000000000006a28         mov        rbp, r11                                    ; CODE XREF=sub_6110+194
0000000000006a2b         jmp        loc_69a9

                     loc_6a30:
0000000000006a30         cmp        r13, r15                                    ; CODE XREF=sub_6560+206, sub_6560+220
0000000000006a33         jbe        loc_6a3a

0000000000006a35         mov        byte [r14+r15], 0x27

                     loc_6a3a:
0000000000006a3a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_6560+1235
0000000000006a3e         cmp        r13, rax
0000000000006a41         jbe        loc_6a49

0000000000006a43         mov        byte [r14+r15+1], 0x5c

                     loc_6a49:
0000000000006a49         lea        rax, qword [r15+2]                          ; CODE XREF=sub_6560+1249
0000000000006a4d         cmp        r13, rax
0000000000006a50         jbe        loc_7042

0000000000006a56         mov        rdx, r13
0000000000006a59         mov        byte [r14+r15+2], 0x27
0000000000006a5f         mov        r13, qword [rsp+arg_48]
0000000000006a64         jmp        loc_6642

                     loc_6a69:
0000000000006a69         mov        eax, r12d                                   ; CODE XREF=sub_6400+99
0000000000006a6c         mov        ebx, 0x30
0000000000006a71         xor        r12d, r12d
0000000000006a74         jmp        sub_6010+105
                        ; endp

                     loc_6a79:
0000000000006a79         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_6400+67
0000000000006a7f         jmp        loc_6449

                     loc_6a84:
0000000000006a84         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
0000000000006a86         jne        loc_5eb3

0000000000006a8c         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_6a91:
0000000000006a91         test       r13, r13                                    ; CODE XREF=sub_6560+2749
0000000000006a94         jne        loc_702a

0000000000006a9a         lea        rax, qword [aLibs+29]                       ; 0x9f7d
0000000000006aa1         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006aaa         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000006aaf         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006ab4         xor        r12d, r12d
0000000000006ab7         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000006abc         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000006ac5         mov        qword [rsp+0xe8+var_A0], rax
0000000000006aca         mov        r15d, 0x1
0000000000006ad0         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000006ad8         jmp        loc_5ef3
0000000000006add         align      32

                     loc_6ae0:
0000000000006ae0         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
0000000000006ae2         jne        loc_6edd

0000000000006ae8         test       r13, r13
0000000000006aeb         je         loc_6d16

0000000000006af1         mov        byte [r14], 0x22
0000000000006af5         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000006afa         xor        r12d, r12d
0000000000006afd         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006b02         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_6b0b:
0000000000006b0b         lea        rax, qword [aLibs+27]                       ; 0x9f7b, CODE XREF=sub_6560+1996
0000000000006b12         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000006b17         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000006b1c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000006b25         mov        r15d, 0x1
0000000000006b2b         mov        qword [rsp+0xe8+var_A0], rax
0000000000006b30         jmp        loc_5ef3

                     loc_6b35:
0000000000006b35         lea        rax, qword [aLibs+27]                       ; case 6, 0x9f7b, CODE XREF=quotearg_buffer_restyled+145
0000000000006b3c         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000006b41         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006b46         xor        r12d, r12d
0000000000006b49         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006b52         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000006b57         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000006b5c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000006b65         xor        r15d, r15d
0000000000006b68         mov        qword [rsp+0xe8+var_A0], rax
0000000000006b6d         mov        dword [rsp+0xe8+var_E0], 0x5
0000000000006b75         jmp        loc_5ef3

                     loc_6b7a:
0000000000006b7a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
0000000000006b7f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006b84         xor        r12d, r12d
0000000000006b87         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006b90         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000006b95         xor        r15d, r15d
0000000000006b98         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000006b9d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000006ba6         mov        qword [rsp+0xe8+var_A0], 0x0
0000000000006baf         jmp        loc_5ef3

                     loc_6bb4:
0000000000006bb4         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
0000000000006bb9         je         loc_6c11

0000000000006bbb         lea        rsi, qword [aLibs+31]                       ; argument "msgid" for method j_dcgettext, 0x9f7f
0000000000006bc2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006bc4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006bc9         call       j_dcgettext                                 ; dcgettext
0000000000006bce         mov        rcx, rax
0000000000006bd1         mov        qword [rsp+0xe8+var_80], rax
0000000000006bd6         lea        rax, qword [aLibs+31]                       ; 0x9f7f
0000000000006bdd         cmp        rcx, rax
0000000000006be0         je         loc_6f7e

                     loc_6be6:
0000000000006be6         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0x9f7d, CODE XREF=sub_6560+2607
0000000000006bed         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006bef         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006bf4         call       j_dcgettext                                 ; dcgettext
0000000000006bf9         mov        rcx, rax
0000000000006bfc         mov        qword [rsp+0xe8+var_88], rax
0000000000006c01         lea        rax, qword [aLibs+29]                       ; 0x9f7d
0000000000006c08         cmp        rcx, rax
0000000000006c0b         je         loc_6f94

                     loc_6c11:
0000000000006c11         xor        r15d, r15d                                  ; CODE XREF=sub_6560+1625, sub_6560+2629
0000000000006c14         test       ebx, ebx
0000000000006c16         je         loc_6ddd

                     loc_6c1c:
0000000000006c1c         test       ebx, ebx                                    ; CODE XREF=sub_6560+2183, sub_6560+2214
0000000000006c1e         mov        rbx, qword [rsp+0xe8+var_88]
0000000000006c23         setne      byte [rsp+0xe8+var_D9]
0000000000006c28         xor        r12d, r12d
0000000000006c2b         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
0000000000006c2e         call       j_strlen                                    ; strlen
0000000000006c33         mov        qword [rsp+0xe8+var_A0], rbx
0000000000006c38         mov        qword [rsp+0xe8+var_D0], rax
0000000000006c3d         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000006c42         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006c47         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006c50         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000006c55         jmp        loc_5ef3

                     loc_6c5a:
0000000000006c5a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
0000000000006c5f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006c64         xor        r12d, r12d
0000000000006c67         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006c70         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000006c75         xor        r15d, r15d
0000000000006c78         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000006c7d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000006c86         mov        qword [rsp+0xe8+var_A0], 0x0
0000000000006c8f         jmp        loc_5ef3

                     loc_6c94:
0000000000006c94         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
0000000000006c99         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006c9e         xor        r12d, r12d
0000000000006ca1         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006caa         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000006caf         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000006cb4         jmp        loc_5ed3

                     loc_6cb9:
0000000000006cb9         cmp        r13, r15                                    ; CODE XREF=sub_6400+133
0000000000006cbc         jbe        loc_6cc3

0000000000006cbe         mov        byte [r14+r15], 0x30

                     loc_6cc3:
0000000000006cc3         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_6560+1884
0000000000006cc7         cmp        r13, rax
0000000000006cca         jbe        loc_6cd2

0000000000006ccc         mov        byte [r14+rcx+2], 0x30

                     loc_6cd2:
0000000000006cd2         mov        eax, r12d                                   ; CODE XREF=sub_6560+1898
0000000000006cd5         lea        r15, qword [rcx+3]
0000000000006cd9         xor        r12d, r12d
0000000000006cdc         mov        ebx, 0x30
0000000000006ce1         jmp        sub_6010+56
                        ; endp
0000000000006ce6         align      16

                     loc_6cf0:
0000000000006cf0         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_6560+731
0000000000006cf5         mov        rbp, r11
0000000000006cf8         mov        byte [rsp+0xe8+var_DB], bl
0000000000006cfc         jmp        loc_69a9

                     loc_6d01:
0000000000006d01         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_6300+105
0000000000006d06         xor        r12d, r12d
0000000000006d09         jmp        loc_6810

                     loc_6d0e:
0000000000006d0e         xor        r10d, r10d                                  ; CODE XREF=sub_6560+944
0000000000006d11         jmp        loc_68cd

                     loc_6d16:
0000000000006d16         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_6560+1419
0000000000006d1f         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000006d24         xor        r12d, r12d
0000000000006d27         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006d2c         jmp        loc_6b0b

                     loc_6d31:
0000000000006d31         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_6560+561
0000000000006d36         mov        rsi, r14
0000000000006d39         mov        rcx, r13
0000000000006d3c         mov        rax, rbx
0000000000006d3f         mov        rdi, rbx
0000000000006d42         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000006d48         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000006d4d         mov        r9, qword [rsp+0xe8+var_60]
0000000000006d55         cmp        rsi, r11
0000000000006d58         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000006d5e         mov        r15, qword [rsp+0xe8+var_68]
0000000000006d66         mov        r14, qword [rsp+0xe8+var_A8]
0000000000006d6b         mov        r13, qword [rsp+0xe8+var_78]
0000000000006d70         jae        loc_6d98

0000000000006d72         cmp        byte [rcx], 0x0
0000000000006d75         jne        loc_6d87

0000000000006d77         jmp        loc_6d98
0000000000006d79         align      128

                     loc_6d80:
0000000000006d80         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_6560+2099
0000000000006d85         je         loc_6d95

                     loc_6d87:
0000000000006d87         add        rax, 0x1                                    ; CODE XREF=sub_6560+2069
0000000000006d8b         lea        rdx, qword [rbp+rax]
0000000000006d90         cmp        r11, rdx
0000000000006d93         ja         loc_6d80

                     loc_6d95:
0000000000006d95         mov        rdi, rax                                    ; CODE XREF=sub_6560+2085

                     loc_6d98:
0000000000006d98         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_6560+2064, sub_6560+2071
0000000000006d9d         xor        r12d, r12d
0000000000006da0         jmp        loc_6806

                     loc_6da5:
0000000000006da5         mov        rdi, rbx                                    ; CODE XREF=sub_6560+551
0000000000006da8         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000006dae         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000006db3         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000006db9         mov        r15, qword [rsp+0xe8+var_68]
0000000000006dc1         xor        r12d, r12d
0000000000006dc4         mov        r14, qword [rsp+0xe8+var_A8]
0000000000006dc9         mov        r13, qword [rsp+0xe8+var_78]
0000000000006dce         mov        r11, qword [rsp+0xe8+var_B8]
0000000000006dd3         movzx      edx, byte [rsp+0xe8+var_DB]
0000000000006dd8         jmp        loc_6806

                     loc_6ddd:
0000000000006ddd         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_6560+1718
0000000000006de2         movzx      eax, byte [rdx]
0000000000006de5         test       al, al
0000000000006de7         je         loc_6c1c

0000000000006ded         nop        dword [rax]

                     loc_6df0:
0000000000006df0         cmp        r13, r15                                    ; CODE XREF=sub_6560+2212
0000000000006df3         jbe        loc_6df9

0000000000006df5         mov        byte [r14+r15], al

                     loc_6df9:
0000000000006df9         add        r15, 0x1                                    ; CODE XREF=sub_6560+2195
0000000000006dfd         movzx      eax, byte [rdx+r15]
0000000000006e02         test       al, al
0000000000006e04         jne        loc_6df0

0000000000006e06         jmp        loc_6c1c

                     loc_6e0b:
0000000000006e0b         mov        eax, edx                                    ; CODE XREF=sub_6560+682
0000000000006e0d         jmp        loc_6367

                     loc_6e12:
0000000000006e12         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_6560+290
0000000000006e16         cmp        bl, 0x3e
0000000000006e19         ja         loc_6690

0000000000006e1f         movabs     rax, 0x7000a38200000000
0000000000006e29         bt         rax, rbx
0000000000006e2d         jae        loc_6690

0000000000006e33         cmp        byte [rsp+arg_7], 0x0
0000000000006e38         jne        loc_7022

0000000000006e3e         cmp        r13, r15
0000000000006e41         jbe        loc_6e48

0000000000006e43         mov        byte [r14+r15], 0x3f

                     loc_6e48:
0000000000006e48         lea        rax, qword [r15+1]                          ; CODE XREF=sub_6560+2273
0000000000006e4c         cmp        r13, rax
0000000000006e4f         jbe        loc_6e57

0000000000006e51         mov        byte [r14+r15+1], 0x22

                     loc_6e57:
0000000000006e57         lea        rax, qword [r15+2]                          ; CODE XREF=sub_6560+2287
0000000000006e5b         cmp        r13, rax
0000000000006e5e         jbe        loc_6e66

0000000000006e60         mov        byte [r14+r15+2], 0x22

                     loc_6e66:
0000000000006e66         lea        rax, qword [r15+3]                          ; CODE XREF=sub_6560+2302
0000000000006e6a         cmp        r13, rax
0000000000006e6d         jbe        loc_6e75

0000000000006e6f         mov        byte [r14+r15+3], 0x3f

                     loc_6e75:
0000000000006e75         add        r15, 0x4                                    ; CODE XREF=sub_6560+2317
0000000000006e79         xor        edx, edx
0000000000006e7b         xor        r12d, r12d
0000000000006e7e         xor        eax, eax
0000000000006e80         mov        rbp, rcx
0000000000006e83         jmp        sub_6010+56
                        ; endp

                     loc_6e88:
0000000000006e88         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
0000000000006e8a         je         loc_7018

0000000000006e90         lea        rax, qword [aLibs+29]                       ; 0x9f7d
0000000000006e97         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000006e9c         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006ea1         xor        r12d, r12d
0000000000006ea4         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006ead         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000006eb2         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000006eb7         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000006ec0         xor        r15d, r15d
0000000000006ec3         mov        qword [rsp+0xe8+var_A0], rax
0000000000006ec8         jmp        loc_5ef3
0000000000006ecd         align      16

                     loc_6ed0:
0000000000006ed0         mov        rbp, r11                                    ; CODE XREF=sub_6560+333
0000000000006ed3         movzx      eax, byte [rsp+arg_7]
0000000000006ed8         jmp        sub_6560+1097
                        ; endp

                     loc_6edd:
0000000000006edd         lea        rax, qword [aLibs+27]                       ; 0x9f7b, CODE XREF=sub_6560+1410
0000000000006ee4         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000006ee9         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006eee         xor        r12d, r12d
0000000000006ef1         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006efa         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000006eff         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000006f04         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000006f0d         xor        r15d, r15d
0000000000006f10         mov        qword [rsp+0xe8+var_A0], rax
0000000000006f15         jmp        loc_5ef3

                     loc_6f1a:
0000000000006f1a         mov        eax, edx                                    ; CODE XREF=sub_6560+87

                     loc_6f1c:
0000000000006f1c         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_6560+76, sub_6560+2721
0000000000006f21         test       rbx, rbx
0000000000006f24         je         loc_6f52

0000000000006f26         test       al, al
0000000000006f28         je         loc_6f52

0000000000006f2a         movzx      ecx, byte [rbx]
0000000000006f2d         mov        rax, rbx
0000000000006f30         test       cl, cl
0000000000006f32         je         loc_6f52

0000000000006f34         mov        rdx, r15
0000000000006f37         sub        rax, r15

                     loc_6f3a:
0000000000006f3a         cmp        r13, rdx                                    ; CODE XREF=sub_6560+2541
0000000000006f3d         jbe        loc_6f43

0000000000006f3f         mov        byte [r14+rdx], cl

                     loc_6f43:
0000000000006f43         add        rdx, 0x1                                    ; CODE XREF=sub_6560+2525
0000000000006f47         movzx      ecx, byte [rax+rdx]
0000000000006f4b         test       cl, cl
0000000000006f4d         jne        loc_6f3a

0000000000006f4f         mov        r15, rdx

                     loc_6f52:
0000000000006f52         cmp        r13, r15                                    ; CODE XREF=sub_6560+2500, sub_6560+2504, sub_6560+2514
0000000000006f55         jbe        loc_69f9

0000000000006f5b         mov        byte [r14+r15], 0x0
0000000000006f60         jmp        loc_69f9

                     loc_6f65:
0000000000006f65         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
0000000000006f6a         movzx      ebx, byte [rsp+0xe8+var_D9]
0000000000006f6f         mov        rbp, r11
0000000000006f72         sete       al
0000000000006f75         mov        byte [rsp+0xe8+var_DB], bl
0000000000006f79         jmp        loc_69a9

                     loc_6f7e:
0000000000006f7e         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_6560+1664
0000000000006f82         mov        rdi, rcx
0000000000006f85         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000006f8a         mov        qword [rsp+0xe8+var_80], rax
0000000000006f8f         jmp        loc_6be6

                     loc_6f94:
0000000000006f94         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_6560+1707
0000000000006f98         mov        rdi, rcx
0000000000006f9b         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000006fa0         mov        qword [rsp+0xe8+var_88], rax
0000000000006fa5         jmp        loc_6c11

                     loc_6faa:
0000000000006faa         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_6400+16
0000000000006faf         mov        rbp, r11
0000000000006fb2         mov        eax, edx
0000000000006fb4         mov        byte [rsp+arg_5], bl
0000000000006fb8         jmp        sub_6560+1097
                        ; endp

                     loc_6fbd:
0000000000006fbd         sub        rsp, 0x8                                    ; CODE XREF=sub_6560+98
0000000000006fc1         mov        r8d, 0x5
0000000000006fc7         mov        rcx, r11
0000000000006fca         push       qword [rsp+0xf0+var_88]
0000000000006fce         push       qword [rsp+0xf8+var_80]
0000000000006fd2         mov        rdi, r14
0000000000006fd5         push       qword [rsp+0x100+var_C8]
0000000000006fd9         mov        r9d, dword [rsp+0x108+var_70]
0000000000006fe1         mov        rdx, qword [rsp+0x108+var_D8]
0000000000006fe6         mov        rsi, qword [rsp+0x108+var_98]
0000000000006feb         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000006ff0         add        rsp, 0x20
0000000000006ff4         mov        r15, rax
0000000000006ff7         jmp        loc_69f9

                     loc_6ffc:
0000000000006ffc         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_6560+121
0000000000007001         jmp        loc_6f1c

                     loc_7006:
0000000000007006         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_6560+63
000000000000700e         jmp        loc_69a9

                     loc_7013:
0000000000007013         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_6560+1197
                        ; endp

                     loc_7018:
0000000000007018         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_6560+2346
000000000000701d         jmp        loc_6a91

                     loc_7022:
0000000000007022         mov        rbp, r11                                    ; CODE XREF=sub_6560+2264
0000000000007025         jmp        sub_6560+1120
                        ; endp

                     loc_702a:
000000000000702a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_6560+1332
000000000000702f         xor        eax, eax
0000000000007031         xor        r12d, r12d
0000000000007034         mov        qword [rsp+0xe8+var_98], 0x0
000000000000703d         jmp        loc_65e4

                     loc_7042:
0000000000007042         mov        rdx, r13                                    ; CODE XREF=sub_6560+1264
0000000000007045         mov        r13, qword [rsp+arg_48]
000000000000704a         jmp        loc_6642

                     loc_704f:
000000000000704f         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
0000000000007054         align      32                                          ; End of unwind block (FDE at 0xb370)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000007060         push       r15                                         ; Begin of unwind block (FDE at 0xb3e8), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000007062         push       r14
0000000000007064         movsxd     r15, edi
0000000000007067         push       r13
0000000000007069         push       r12
000000000000706b         mov        r14, rdx
000000000000706e         push       rbp
000000000000706f         push       rbx
0000000000007070         mov        rbp, rcx
0000000000007073         sub        rsp, 0x28
0000000000007077         mov        qword [rsp+0x58+var_50], rsi
000000000000707c         call       j___errno_location                          ; __errno_location
0000000000007081         mov        r13, rax
0000000000007084         mov        eax, dword [rax]
0000000000007086         test       r15d, r15d
0000000000007089         mov        rbx, qword [slotvec]                        ; slotvec
0000000000007090         mov        dword [rsp+0x58+var_40], eax
0000000000007094         js         loc_7201

000000000000709a         cmp        dword [nslots], r15d                        ; nslots
00000000000070a1         jg         loc_7105

00000000000070a3         cmp        r15d, 0x7fffffff
00000000000070aa         je         loc_7206

00000000000070b0         lea        r12d, dword [r15+1]
00000000000070b4         lea        rax, qword [slotvec0]                       ; slotvec0
00000000000070bb         movsxd     rsi, r12d
00000000000070be         shl        rsi, 0x4
00000000000070c2         cmp        rbx, rax
00000000000070c5         je         loc_71e0

00000000000070cb         mov        rdi, rbx                                    ; argument #1 for method xrealloc
00000000000070ce         call       xrealloc                                    ; xrealloc
00000000000070d3         mov        rbx, rax
00000000000070d6         mov        qword [slotvec], rax                        ; slotvec

                     loc_70dd:
00000000000070dd         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
00000000000070e4         mov        edx, r12d
00000000000070e7         xor        esi, esi                                    ; argument "__c" for method j_memset
00000000000070e9         sub        edx, edi
00000000000070eb         shl        rdi, 0x4
00000000000070ef         movsxd     rdx, edx
00000000000070f2         add        rdi, rbx                                    ; argument "__s" for method j_memset
00000000000070f5         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
00000000000070f9         call       j_memset                                    ; memset
00000000000070fe         mov        dword [nslots], r12d                        ; nslots

                     loc_7105:
0000000000007105         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
0000000000007108         shl        r15, 0x4
000000000000710c         sub        rsp, 0x8
0000000000007110         add        rbx, r15
0000000000007113         lea        r15, qword [rbp+8]
0000000000007117         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
000000000000711b         mov        r11, qword [rbx]
000000000000711e         mov        r12, qword [rbx+8]
0000000000007122         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000007125         or         eax, 0x1
0000000000007128         mov        dword [rsp+0x60+var_3C], eax
000000000000712c         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000712f         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
0000000000007132         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000007135         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000007137         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
000000000000713a         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
000000000000713f         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
0000000000007142         mov        qword [rsp+0x78+var_48], r11
0000000000007147         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000714c         add        rsp, 0x20
0000000000007150         mov        r11, qword [rsp+0x58+var_48]
0000000000007155         cmp        r11, rax
0000000000007158         ja         loc_71c1

000000000000715a         lea        rsi, qword [rax+1]
000000000000715e         lea        rax, qword [slot0]                          ; slot0
0000000000007165         cmp        r12, rax
0000000000007168         mov        qword [rbx], rsi
000000000000716b         je         loc_717f

000000000000716d         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000007170         mov        qword [rsp+0x58+var_48], rsi
0000000000007175         call       j_free                                      ; free
000000000000717a         mov        rsi, qword [rsp+0x58+var_48]

                     loc_717f:
000000000000717f         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
0000000000007182         mov        qword [rsp+0x58+var_48], rsi
0000000000007187         call       xmalloc                                     ; xmalloc
000000000000718c         sub        rsp, 0x8
0000000000007190         mov        qword [rbx+8], rax
0000000000007194         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000007198         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000719b         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
000000000000719e         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
00000000000071a1         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
00000000000071a3         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
00000000000071a8         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
00000000000071ab         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
00000000000071b0         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
00000000000071b5         mov        r12, rax
00000000000071b8         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000071bd         add        rsp, 0x20

                     loc_71c1:
00000000000071c1         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
00000000000071c5         mov        dword [r13], eax
00000000000071c9         add        rsp, 0x28
00000000000071cd         mov        rax, r12
00000000000071d0         pop        rbx
00000000000071d1         pop        rbp
00000000000071d2         pop        r12
00000000000071d4         pop        r13
00000000000071d6         pop        r14
00000000000071d8         pop        r15
00000000000071da         ret
                        ; endp
00000000000071db         align      32

                     loc_71e0:
00000000000071e0         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
00000000000071e2         call       xrealloc                                    ; xrealloc
00000000000071e7         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
00000000000071ef         mov        rbx, rax
00000000000071f2         mov        qword [slotvec], rax                        ; slotvec
00000000000071f9         movups     xmmword [rax], xmm0
00000000000071fc         jmp        loc_70dd

                     loc_7201:
0000000000007201         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_7206:
0000000000007206         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_720b:
000000000000720b         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0xb3e8)
                     clone_quoting_options:
0000000000007210         push       r12                                         ; Begin of unwind block (FDE at 0xb454)
0000000000007212         push       rbp
0000000000007213         push       rbx
0000000000007214         mov        rbx, rdi
0000000000007217         call       j___errno_location                          ; __errno_location
000000000000721c         mov        r12d, dword [rax]
000000000000721f         mov        rbp, rax
0000000000007222         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000007229         test       rbx, rbx
000000000000722c         mov        esi, 0x38
0000000000007231         cmove      rbx, rax
0000000000007235         mov        rdi, rbx
0000000000007238         call       xmemdup                                     ; xmemdup
000000000000723d         mov        dword [rbp], r12d
0000000000007241         pop        rbx
0000000000007242         pop        rbp
0000000000007243         pop        r12
0000000000007245         ret
                        ; endp
0000000000007246         align      16                                          ; End of unwind block (FDE at 0xb454)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
0000000000007250         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xb480), default_quoting_options
0000000000007257         test       rdi, rdi
000000000000725a         cmove      rdi, rax
000000000000725e         mov        eax, dword [rdi]
0000000000007260         ret
                        ; endp
0000000000007261         align      16                                          ; End of unwind block (FDE at 0xb480)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
0000000000007270         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xb494), default_quoting_options
0000000000007277         test       rdi, rdi
000000000000727a         cmove      rdi, rax
000000000000727e         mov        dword [rdi], esi
0000000000007280         ret
                        ; endp
0000000000007281         align      16                                          ; End of unwind block (FDE at 0xb494)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
0000000000007290         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xb4a8), default_quoting_options
0000000000007297         test       rdi, rdi
000000000000729a         mov        ecx, esi
000000000000729c         cmove      rdi, rax
00000000000072a0         mov        eax, esi
00000000000072a2         and        ecx, 0x1f
00000000000072a5         shr        al, 0x5
00000000000072a8         movzx      eax, al
00000000000072ab         lea        rdi, qword [rdi+rax*4+8]
00000000000072b0         mov        esi, dword [rdi]
00000000000072b2         mov        eax, esi
00000000000072b4         shr        eax, cl
00000000000072b6         xor        edx, eax
00000000000072b8         and        eax, 0x1
00000000000072bb         and        edx, 0x1
00000000000072be         shl        edx, cl
00000000000072c0         xor        edx, esi
00000000000072c2         mov        dword [rdi], edx
00000000000072c4         ret
                        ; endp
00000000000072c5         align      16                                          ; End of unwind block (FDE at 0xb4a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
00000000000072d0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xb4bc), default_quoting_options
00000000000072d7         test       rdi, rdi
00000000000072da         cmove      rdi, rax
00000000000072de         mov        eax, dword [rdi+4]
00000000000072e1         mov        dword [rdi+4], esi
00000000000072e4         ret
                        ; endp
00000000000072e5         align      16                                          ; End of unwind block (FDE at 0xb4bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
00000000000072f0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xb4d0), default_quoting_options
00000000000072f7         test       rdi, rdi
00000000000072fa         cmove      rdi, rax
00000000000072fe         test       rsi, rsi
0000000000007301         mov        dword [rdi], 0xa
0000000000007307         je         loc_7317

0000000000007309         test       rdx, rdx
000000000000730c         je         loc_7317

000000000000730e         mov        qword [rdi+0x28], rsi
0000000000007312         mov        qword [rdi+0x30], rdx
0000000000007316         ret
                        ; endp

                     loc_7317:
0000000000007317         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
000000000000731b         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
0000000000007320         push       r15                                         ; End of unwind block (FDE at 0xb4d0), Begin of unwind block (FDE at 0xb4e4)
0000000000007322         push       r14
0000000000007324         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000732b         push       r13
000000000000732d         push       r12
000000000000732f         mov        r13, rdi
0000000000007332         push       rbp
0000000000007333         push       rbx
0000000000007334         mov        rbx, r8
0000000000007337         mov        r14, rsi
000000000000733a         mov        r15, rdx
000000000000733d         sub        rsp, 0x18
0000000000007341         test       r8, r8
0000000000007344         cmove      rbx, rax
0000000000007348         mov        qword [rsp+0x48+var_40], rcx
000000000000734d         call       j___errno_location                          ; __errno_location
0000000000007352         mov        r12d, dword [rax]
0000000000007355         mov        rbp, rax
0000000000007358         lea        rax, qword [rbx+8]
000000000000735c         sub        rsp, 0x8
0000000000007360         mov        r9d, dword [rbx+4]
0000000000007364         push       qword [rbx+0x30]
0000000000007367         mov        r8d, dword [rbx]
000000000000736a         push       qword [rbx+0x28]
000000000000736d         mov        rdx, r15
0000000000007370         push       rax
0000000000007371         mov        rcx, qword [rsp+0x68+var_40]
0000000000007376         mov        rsi, r14
0000000000007379         mov        rdi, r13
000000000000737c         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000007381         mov        dword [rbp], r12d
0000000000007385         add        rsp, 0x38
0000000000007389         pop        rbx
000000000000738a         pop        rbp
000000000000738b         pop        r12
000000000000738d         pop        r13
000000000000738f         pop        r14
0000000000007391         pop        r15
0000000000007393         ret
                        ; endp
0000000000007394         align      32                                          ; End of unwind block (FDE at 0xb4e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
00000000000073a0         push       r15                                         ; Begin of unwind block (FDE at 0xb538), CODE XREF=quotearg_alloc+5
00000000000073a2         push       r14
00000000000073a4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000073ab         push       r13
00000000000073ad         push       r12
00000000000073af         mov        r12, rdx
00000000000073b2         push       rbp
00000000000073b3         push       rbx
00000000000073b4         mov        rbx, rcx
00000000000073b7         mov        r14, rdi
00000000000073ba         mov        r15, rsi
00000000000073bd         sub        rsp, 0x38
00000000000073c1         test       rcx, rcx
00000000000073c4         cmove      rbx, rax
00000000000073c8         xor        ebp, ebp
00000000000073ca         call       j___errno_location                          ; __errno_location
00000000000073cf         test       r12, r12
00000000000073d2         mov        r13, rax
00000000000073d5         mov        eax, dword [rax]
00000000000073d7         sete       bpl
00000000000073db         or         ebp, dword [rbx+4]
00000000000073de         lea        r10, qword [rbx+8]
00000000000073e2         sub        rsp, 0x8
00000000000073e6         mov        r8d, dword [rbx]
00000000000073e9         mov        rcx, r15
00000000000073ec         mov        dword [rsp+0x70+var_5C], eax
00000000000073f0         push       qword [rbx+0x30]
00000000000073f3         mov        rdx, r14
00000000000073f6         push       qword [rbx+0x28]
00000000000073f9         push       r10
00000000000073fb         xor        esi, esi
00000000000073fd         mov        r9d, ebp
0000000000007400         xor        edi, edi
0000000000007402         mov        qword [rsp+0x88+var_48], r10
0000000000007407         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000740c         lea        rsi, qword [rax+1]
0000000000007410         mov        qword [rsp+0x88+var_40], rax
0000000000007415         add        rsp, 0x20
0000000000007419         mov        rdi, rsi
000000000000741c         mov        qword [rsp+0x68+var_50], rsi
0000000000007421         call       xmalloc                                     ; xmalloc
0000000000007426         mov        qword [rsp+0x68+var_58], rax
000000000000742b         sub        rsp, 0x8
000000000000742f         push       qword [rbx+0x30]
0000000000007432         push       qword [rbx+0x28]
0000000000007435         mov        r10, qword [rsp+0x80+var_48]
000000000000743a         mov        r9d, ebp
000000000000743d         mov        r8d, dword [rbx]
0000000000007440         mov        rcx, r15
0000000000007443         mov        rdx, r14
0000000000007446         mov        rdi, rax
0000000000007449         push       r10
000000000000744b         mov        rsi, qword [rsp+0x88+var_50]
0000000000007450         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000007455         mov        eax, dword [rsp+0x88+var_5C]
0000000000007459         add        rsp, 0x20
000000000000745d         test       r12, r12
0000000000007460         mov        dword [r13], eax
0000000000007464         je         loc_746f

0000000000007466         mov        r11, qword [rsp+0x68+var_40]
000000000000746b         mov        qword [r12], r11

                     loc_746f:
000000000000746f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000007474         add        rsp, 0x38
0000000000007478         pop        rbx
0000000000007479         pop        rbp
000000000000747a         pop        r12
000000000000747c         pop        r13
000000000000747e         pop        r14
0000000000007480         pop        r15
0000000000007482         ret
                        ; endp
0000000000007483         align      16                                          ; End of unwind block (FDE at 0xb538)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
0000000000007490         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xb5a4)
0000000000007493         xor        edx, edx
0000000000007495         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
000000000000749a         align      32                                          ; End of unwind block (FDE at 0xb5a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
00000000000074a0         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0xb5b8), nslots
00000000000074a6         push       r12
00000000000074a8         mov        r12, qword [slotvec]                        ; slotvec
00000000000074af         push       rbp
00000000000074b0         push       rbx
00000000000074b1         cmp        eax, 0x1
00000000000074b4         jle        loc_74e1

00000000000074b6         sub        eax, 0x2
00000000000074b9         lea        rbx, qword [r12+0x18]
00000000000074be         shl        rax, 0x4
00000000000074c2         lea        rbp, qword [r12+rax+0x28]
00000000000074c7         nop        word [rax+rax]

                     loc_74d0:
00000000000074d0         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
00000000000074d3         add        rbx, 0x10
00000000000074d7         call       j_free                                      ; free
00000000000074dc         cmp        rbx, rbp
00000000000074df         jne        loc_74d0

                     loc_74e1:
00000000000074e1         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
00000000000074e6         lea        rbx, qword [slot0]                          ; slot0
00000000000074ed         cmp        rdi, rbx
00000000000074f0         je         loc_7509

00000000000074f2         call       j_free                                      ; free
00000000000074f7         mov        qword [slotvec0], 0x100                     ; slotvec0
0000000000007502         mov        qword [slotvec0+8], rbx                     ; 0x20d098

                     loc_7509:
0000000000007509         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
0000000000007510         cmp        r12, rbx
0000000000007513         je         loc_7524

0000000000007515         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000007518         call       j_free                                      ; free
000000000000751d         mov        qword [slotvec], rbx                        ; slotvec

                     loc_7524:
0000000000007524         pop        rbx                                         ; CODE XREF=quotearg_free+115
0000000000007525         mov        dword [nslots], 0x1                         ; nslots
000000000000752f         pop        rbp
0000000000007530         pop        r12
0000000000007532         ret
                        ; endp
0000000000007533         align      64                                          ; End of unwind block (FDE at 0xb5b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
0000000000007540         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xb5e4), default_quoting_options
0000000000007547         mov        rdx, 0xffffffffffffffff
000000000000754e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000007553         align      32                                          ; End of unwind block (FDE at 0xb5e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000007560         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xb5f8), default_quoting_options
0000000000007567         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000756c         align      16                                          ; End of unwind block (FDE at 0xb5f8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
0000000000007570         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xb60c), default_quoting_options
0000000000007577         mov        rsi, rdi
000000000000757a         mov        rdx, 0xffffffffffffffff
0000000000007581         xor        edi, edi
0000000000007583         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000007588         align      16                                          ; End of unwind block (FDE at 0xb60c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
0000000000007590         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xb620), default_quoting_options
0000000000007597         mov        rdx, rsi
000000000000759a         mov        rsi, rdi
000000000000759d         xor        edi, edi
000000000000759f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000075a4         align      16                                          ; End of unwind block (FDE at 0xb620)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
00000000000075b0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xb634), CODE XREF=argmatch_invalid+64
00000000000075b4         mov        rax, rdx
00000000000075b7         mov        rdx, qword [fs:0x28]
00000000000075c0         mov        qword [rsp+0x48+var_10], rdx
00000000000075c5         xor        edx, edx
00000000000075c7         cmp        esi, 0xa
00000000000075ca         je         loc_7634

00000000000075cc         mov        dword [rsp+0x48+var_48], esi
00000000000075cf         mov        rcx, rsp
00000000000075d2         mov        rdx, 0xffffffffffffffff
00000000000075d9         mov        rsi, rax
00000000000075dc         mov        qword [rsp+0x48+var_44], 0x0
00000000000075e5         mov        qword [rsp+0x48+var_3C], 0x0
00000000000075ee         mov        qword [rsp+0x48+var_34], 0x0
00000000000075f7         mov        qword [rsp+0x48+var_2C], 0x0
0000000000007600         mov        qword [rsp+0x48+var_24], 0x0
0000000000007609         mov        qword [rsp+0x48+var_1C], 0x0
0000000000007612         mov        dword [rsp+0x48+var_14], 0x0
000000000000761a         call       quotearg_n_options                          ; quotearg_n_options
000000000000761f         mov        rcx, qword [rsp+0x48+var_10]
0000000000007624         xor        rcx, qword [fs:0x28]
000000000000762d         jne        loc_7639

000000000000762f         add        rsp, 0x48
0000000000007633         ret
                        ; endp

                     loc_7634:
0000000000007634         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_7639:
0000000000007639         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
000000000000763e         align      64                                          ; End of unwind block (FDE at 0xb634)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
0000000000007640         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xb650), CODE XREF=quotearg_style_mem+10
0000000000007644         mov        rax, rdx
0000000000007647         mov        rdx, rcx
000000000000764a         mov        rcx, qword [fs:0x28]
0000000000007653         mov        qword [rsp+0x48+var_10], rcx
0000000000007658         xor        ecx, ecx
000000000000765a         cmp        esi, 0xa
000000000000765d         je         loc_76c0

000000000000765f         mov        dword [rsp+0x48+var_48], esi
0000000000007662         mov        rcx, rsp
0000000000007665         mov        rsi, rax
0000000000007668         mov        qword [rsp+0x48+var_44], 0x0
0000000000007671         mov        qword [rsp+0x48+var_3C], 0x0
000000000000767a         mov        qword [rsp+0x48+var_34], 0x0
0000000000007683         mov        qword [rsp+0x48+var_2C], 0x0
000000000000768c         mov        qword [rsp+0x48+var_24], 0x0
0000000000007695         mov        qword [rsp+0x48+var_1C], 0x0
000000000000769e         mov        dword [rsp+0x48+var_14], 0x0
00000000000076a6         call       quotearg_n_options                          ; quotearg_n_options
00000000000076ab         mov        rdx, qword [rsp+0x48+var_10]
00000000000076b0         xor        rdx, qword [fs:0x28]
00000000000076b9         jne        loc_76c5

00000000000076bb         add        rsp, 0x48
00000000000076bf         ret
                        ; endp

                     loc_76c0:
00000000000076c0         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_76c5:
00000000000076c5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
00000000000076ca         align      16                                          ; End of unwind block (FDE at 0xb650)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
00000000000076d0         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0xb66c)
00000000000076d3         mov        esi, edi
00000000000076d5         xor        edi, edi
00000000000076d7         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
00000000000076dc         align      32                                          ; End of unwind block (FDE at 0xb66c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
00000000000076e0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xb680)
00000000000076e3         mov        rdx, rsi
00000000000076e6         mov        esi, edi
00000000000076e8         xor        edi, edi
00000000000076ea         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
00000000000076ef         align      16                                          ; End of unwind block (FDE at 0xb680)

                     quotearg_char_mem:
00000000000076f0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xb694), CODE XREF=quotearg_char+11
00000000000076f4         mov        ecx, edx
00000000000076f6         mov        rax, qword [fs:0x28]
00000000000076ff         mov        qword [rsp+0x48+var_10], rax
0000000000007704         xor        eax, eax
0000000000007706         mov        rax, qword [qword_20d270]                   ; qword_20d270
000000000000770d         mov        r8, rsp
0000000000007710         and        ecx, 0x1f
0000000000007713         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
000000000000771b         mov        qword [rsp+0x48+var_18], rax
0000000000007720         mov        eax, edx
0000000000007722         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000007726         shr        al, 0x5
0000000000007729         movzx      eax, al
000000000000772c         lea        r9, qword [r8+rax*4+8]
0000000000007731         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20d250
0000000000007739         movaps     xmmword [rsp+0x48+var_38], xmm0
000000000000773e         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20d260
0000000000007746         movaps     xmmword [rsp+0x48+var_28], xmm0
000000000000774b         mov        edx, dword [r9]
000000000000774e         mov        eax, edx
0000000000007750         shr        eax, cl
0000000000007752         not        eax
0000000000007754         and        eax, 0x1
0000000000007757         shl        eax, cl
0000000000007759         mov        rcx, r8
000000000000775c         xor        eax, edx
000000000000775e         mov        rdx, rsi
0000000000007761         mov        rsi, rdi
0000000000007764         mov        dword [r9], eax
0000000000007767         xor        edi, edi
0000000000007769         call       quotearg_n_options                          ; quotearg_n_options
000000000000776e         mov        rsi, qword [rsp+0x48+var_10]
0000000000007773         xor        rsi, qword [fs:0x28]
000000000000777c         jne        loc_7783

000000000000777e         add        rsp, 0x48
0000000000007782         ret
                        ; endp

                     loc_7783:
0000000000007783         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
0000000000007788         align      16                                          ; End of unwind block (FDE at 0xb694)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
0000000000007790         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0xb6b0)
0000000000007794         mov        rsi, 0xffffffffffffffff
000000000000779b         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
00000000000077a0         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0xb6b0), Begin of unwind block (FDE at 0xb6c4), CODE XREF=close_stdout+101
00000000000077a5         mov        rsi, 0xffffffffffffffff
00000000000077ac         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
00000000000077b1         align      64                                          ; End of unwind block (FDE at 0xb6c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
00000000000077c0         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0xb6d8)
00000000000077c5         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
00000000000077ca         align      16                                          ; End of unwind block (FDE at 0xb6d8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
00000000000077d0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xb6ec), CODE XREF=main+1668, main+2236, main+2921, main+3354, main+3456, main+4313, digest_file.isra.1+138, digest_file.isra.1+303, digest_file.isra.1+388
00000000000077d4         mov        rax, rdx
00000000000077d7         mov        rdx, qword [fs:0x28]
00000000000077e0         mov        qword [rsp+0x48+var_10], rdx
00000000000077e5         xor        edx, edx
00000000000077e7         cmp        esi, 0xa
00000000000077ea         je         loc_7854

00000000000077ec         mov        dword [rsp+0x48+var_48], esi
00000000000077ef         mov        rcx, rsp
00000000000077f2         mov        rdx, 0xffffffffffffffff
00000000000077f9         mov        rsi, rax
00000000000077fc         mov        qword [rsp+0x48+var_44], 0x0
0000000000007805         mov        qword [rsp+0x48+var_3C], 0x4000000
000000000000780e         mov        qword [rsp+0x48+var_34], 0x0
0000000000007817         mov        qword [rsp+0x48+var_2C], 0x0
0000000000007820         mov        qword [rsp+0x48+var_24], 0x0
0000000000007829         mov        qword [rsp+0x48+var_1C], 0x0
0000000000007832         mov        dword [rsp+0x48+var_14], 0x0
000000000000783a         call       quotearg_n_options                          ; quotearg_n_options
000000000000783f         mov        rcx, qword [rsp+0x48+var_10]
0000000000007844         xor        rcx, qword [fs:0x28]
000000000000784d         jne        loc_7859

000000000000784f         add        rsp, 0x48
0000000000007853         ret
                        ; endp

                     loc_7854:
0000000000007854         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_7859:
0000000000007859         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
000000000000785e         align      32                                          ; End of unwind block (FDE at 0xb6ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom_mem:
0000000000007860         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xb708), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000007864         mov        r9, rcx
0000000000007867         mov        rcx, qword [qword_20d270]                   ; qword_20d270
000000000000786e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000007876         mov        rax, qword [fs:0x28]
000000000000787f         mov        qword [rsp+0x48+var_10], rax
0000000000007884         xor        eax, eax
0000000000007886         movaps     xmmword [rsp+0x48+var_48], xmm0
000000000000788a         test       rsi, rsi
000000000000788d         mov        qword [rsp+0x48+var_18], rcx
0000000000007892         mov        dword [rsp+0x48+var_48], 0xa
0000000000007899         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20d250
00000000000078a1         movaps     xmmword [rsp+0x48+var_38], xmm0
00000000000078a6         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20d260
00000000000078ae         movaps     xmmword [rsp+0x48+var_28], xmm0
00000000000078b3         je         loc_78e7

00000000000078b5         test       rdx, rdx
00000000000078b8         je         loc_78e7

00000000000078ba         mov        qword [rsp+0x48+var_20], rsi
00000000000078bf         mov        qword [rsp+0x48+var_18], rdx
00000000000078c4         mov        rcx, rsp
00000000000078c7         mov        rdx, r8
00000000000078ca         mov        rsi, r9
00000000000078cd         call       quotearg_n_options                          ; quotearg_n_options
00000000000078d2         mov        rdi, qword [rsp+0x48+var_10]
00000000000078d7         xor        rdi, qword [fs:0x28]
00000000000078e0         jne        loc_78ec

00000000000078e2         add        rsp, 0x48
00000000000078e6         ret
                        ; endp

                     loc_78e7:
00000000000078e7         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_78ec:
00000000000078ec         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
00000000000078f1         align      256                                         ; End of unwind block (FDE at 0xb708)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_custom:
0000000000007900         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0xb724)
0000000000007907         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
000000000000790c         align      16                                          ; End of unwind block (FDE at 0xb724)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000007910         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xb738)
0000000000007913         mov        r8, 0xffffffffffffffff
000000000000791a         mov        rdx, rsi
000000000000791d         mov        rsi, rdi
0000000000007920         xor        edi, edi
0000000000007922         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000007927         align      16                                          ; End of unwind block (FDE at 0xb738)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
0000000000007930         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0xb74c)
0000000000007933         mov        rcx, rdx
0000000000007936         mov        rdx, rsi
0000000000007939         mov        rsi, rdi
000000000000793c         xor        edi, edi
000000000000793e         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000007943         align      16                                          ; End of unwind block (FDE at 0xb74c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000007950         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xb760), quote_quoting_options
0000000000007957         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000795c         align      32                                          ; End of unwind block (FDE at 0xb760)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000007960         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xb774), quote_quoting_options
0000000000007967         mov        rdx, rsi
000000000000796a         mov        rsi, rdi
000000000000796d         xor        edi, edi
000000000000796f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000007974         align      128                                         ; End of unwind block (FDE at 0xb774)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
0000000000007980         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xb788), quote_quoting_options, CODE XREF=argmatch_invalid+46
0000000000007987         mov        rdx, 0xffffffffffffffff
000000000000798e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000007993         align      32                                          ; End of unwind block (FDE at 0xb788)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
00000000000079a0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xb79c), quote_quoting_options, CODE XREF=main+654, main+4960, main+5021, argmatch_valid+90, argmatch_valid+169, xnumtoumax+109
00000000000079a7         mov        rsi, rdi
00000000000079aa         mov        rdx, 0xffffffffffffffff
00000000000079b1         xor        edi, edi
00000000000079b3         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000079b8         align      64                                          ; End of unwind block (FDE at 0xb79c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int32_t, -104


                     dup_safer:
00000000000079c0         mov        edx, 0x3                                    ; Begin of unwind block (FDE at 0xb7b4), CODE XREF=fopen_safer+50
00000000000079c5         xor        esi, esi
00000000000079c7         xor        eax, eax
00000000000079c9         jmp        rpl_fcntl                                   ; rpl_fcntl
00000000000079ce         align      16                                          ; End of unwind block (FDE at 0xb7b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
00000000000079d0         push       r15                                         ; Begin of unwind block (FDE at 0xb7cc), CODE XREF=j_version_etc_arn, version_etc_va+75, version_etc+161
00000000000079d2         push       r14
00000000000079d4         push       r13
00000000000079d6         push       r12
00000000000079d8         mov        r12, r9
00000000000079db         push       rbp
00000000000079dc         push       rbx
00000000000079dd         mov        rbp, rdi
00000000000079e0         mov        rbx, r8
00000000000079e3         sub        rsp, 0x28
00000000000079e7         test       rsi, rsi
00000000000079ea         je         loc_7b08

00000000000079f0         mov        r8, rdx
00000000000079f3         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
00000000000079fa         mov        r9, rcx
00000000000079fd         xor        eax, eax
00000000000079ff         mov        rcx, rsi
0000000000007a02         mov        esi, 0x1
0000000000007a07         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_7a0c:
0000000000007a0c         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0xa45b, CODE XREF=version_etc_arn+337
0000000000007a13         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007a15         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007a1a         call       j_dcgettext                                 ; dcgettext
0000000000007a1f         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
0000000000007a26         mov        rcx, rax
0000000000007a29         mov        r8d, 0x7e3
0000000000007a2f         mov        esi, 0x1
0000000000007a34         mov        rdi, rbp
0000000000007a37         xor        eax, eax
0000000000007a39         call       j___fprintf_chk                             ; __fprintf_chk
0000000000007a3e         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
0000000000007a45         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007a47         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007a4c         call       j_dcgettext                                 ; dcgettext
0000000000007a51         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000007a54         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000007a57         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000007a5c         cmp        r12, 0x9
0000000000007a60         ja         loc_7da0

0000000000007a66         lea        rdx, qword [switch_table_a744]              ; switch_table_a744
0000000000007a6d         movsxd     rax, dword [rdx+r12*4]
0000000000007a71         add        rax, rdx
0000000000007a74         jmp        rax                                         ; switch statement using table at 0xa744, with 10 cases, 0x7a80,0x7af6,0x7b30,0x7b88,0x7bc8,0x7c10,0x7c60,0x7cb8,0x7ce8,0x7d50
0000000000007a76         align      128

                     loc_7a80:
0000000000007a80         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
0000000000007a84         mov        rax, qword [rbx+0x10]
0000000000007a88         lea        rsi, qword [aWrittenBySSSns_a658]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
0000000000007a8f         mov        r8, qword [rbx+8]
0000000000007a93         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007a98         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007a9a         mov        r13, qword [rbx+0x30]
0000000000007a9e         mov        r12, qword [rbx+0x28]
0000000000007aa2         mov        qword [rsp+0x58+var_48], r9
0000000000007aa7         mov        r15, qword [rbx+0x20]
0000000000007aab         mov        r14, qword [rbx+0x18]
0000000000007aaf         mov        qword [rsp+0x58+var_58], rax
0000000000007ab3         mov        qword [rsp+0x58+var_50], r8
0000000000007ab8         mov        rbx, qword [rbx]
0000000000007abb         call       j_dcgettext                                 ; dcgettext
0000000000007ac0         sub        rsp, 0x8

                     loc_7ac4:
0000000000007ac4         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000007ac9         mov        rdx, rax
0000000000007acc         mov        rcx, rbx
0000000000007acf         mov        esi, 0x1
0000000000007ad4         mov        rdi, rbp
0000000000007ad7         xor        eax, eax
0000000000007ad9         push       r9
0000000000007adb         push       r13
0000000000007add         push       r12
0000000000007adf         push       r15
0000000000007ae1         push       r14
0000000000007ae3         mov        r9, qword [rsp+0x88+var_58]
0000000000007ae8         mov        r8, qword [rsp+0x88+var_50]
0000000000007aed         call       j___fprintf_chk                             ; __fprintf_chk
0000000000007af2         add        rsp, 0x30

                     loc_7af6:
0000000000007af6         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
0000000000007afa         pop        rbx
0000000000007afb         pop        rbp
0000000000007afc         pop        r12
0000000000007afe         pop        r13
0000000000007b00         pop        r14
0000000000007b02         pop        r15
0000000000007b04         ret
                        ; endp
0000000000007b05         align      8

                     loc_7b08:
0000000000007b08         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
0000000000007b0b         mov        rcx, rdx
0000000000007b0e         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
0000000000007b15         mov        esi, 0x1
0000000000007b1a         xor        eax, eax
0000000000007b1c         call       j___fprintf_chk                             ; __fprintf_chk
0000000000007b21         jmp        loc_7a0c
0000000000007b26         align      16

                     loc_7b30:
0000000000007b30         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
0000000000007b34         mov        r9, qword [rbx+0x38]
0000000000007b38         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
0000000000007b3f         mov        rax, qword [rbx+0x10]
0000000000007b43         mov        r8, qword [rbx+8]
0000000000007b47         mov        edx, 0x5
0000000000007b4c         mov        r13, qword [rbx+0x30]
0000000000007b50         mov        r12, qword [rbx+0x28]
0000000000007b54         mov        r15, qword [rbx+0x20]
0000000000007b58         mov        r14, qword [rbx+0x18]
0000000000007b5c         mov        rbx, qword [rbx]
0000000000007b5f         mov        qword [rsp+0x58+var_40], r10
0000000000007b64         mov        qword [rsp+0x58+var_48], r9
0000000000007b69         mov        qword [rsp+0x58+var_58], rax
0000000000007b6d         mov        qword [rsp+0x58+var_50], r8

                     loc_7b72:
0000000000007b72         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
0000000000007b74         call       j_dcgettext                                 ; dcgettext
0000000000007b79         mov        r10, qword [rsp+0x58+var_40]
0000000000007b7e         push       r10
0000000000007b80         jmp        loc_7ac4
0000000000007b85         align      8

                     loc_7b88:
0000000000007b88         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
0000000000007b8b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
0000000000007b92         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007b97         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007b99         call       j_dcgettext                                 ; dcgettext
0000000000007b9e         add        rsp, 0x28
0000000000007ba2         mov        rcx, rbx
0000000000007ba5         mov        rdi, rbp
0000000000007ba8         pop        rbx
0000000000007ba9         pop        rbp
0000000000007baa         pop        r12
0000000000007bac         pop        r13
0000000000007bae         pop        r14
0000000000007bb0         pop        r15
0000000000007bb2         mov        rdx, rax
0000000000007bb5         mov        esi, 0x1
0000000000007bba         xor        eax, eax
0000000000007bbc         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000007bc1         align      8

                     loc_7bc8:
0000000000007bc8         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
0000000000007bcc         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
0000000000007bd3         mov        rbx, qword [rbx]
0000000000007bd6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007bdb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007bdd         call       j_dcgettext                                 ; dcgettext
0000000000007be2         add        rsp, 0x28
0000000000007be6         mov        r8, r12
0000000000007be9         mov        rcx, rbx
0000000000007bec         mov        rdi, rbp
0000000000007bef         mov        rdx, rax
0000000000007bf2         mov        esi, 0x1
0000000000007bf7         pop        rbx
0000000000007bf8         pop        rbp
0000000000007bf9         pop        r12
0000000000007bfb         pop        r13
0000000000007bfd         pop        r14
0000000000007bff         pop        r15
0000000000007c01         xor        eax, eax
0000000000007c03         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000007c08         align      16

                     loc_7c10:
0000000000007c10         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
0000000000007c14         mov        r12, qword [rbx+8]
0000000000007c18         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
0000000000007c1f         mov        rbx, qword [rbx]
0000000000007c22         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007c27         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007c29         call       j_dcgettext                                 ; dcgettext
0000000000007c2e         add        rsp, 0x28
0000000000007c32         mov        r9, r13
0000000000007c35         mov        r8, r12
0000000000007c38         mov        rcx, rbx
0000000000007c3b         mov        rdi, rbp
0000000000007c3e         mov        rdx, rax
0000000000007c41         pop        rbx
0000000000007c42         pop        rbp
0000000000007c43         pop        r12
0000000000007c45         pop        r13
0000000000007c47         pop        r14
0000000000007c49         pop        r15
0000000000007c4b         mov        esi, 0x1
0000000000007c50         xor        eax, eax
0000000000007c52         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000007c57         align      32

                     loc_7c60:
0000000000007c60         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
0000000000007c67         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007c6c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007c6e         mov        r14, qword [rbx+0x18]
0000000000007c72         mov        r13, qword [rbx+0x10]
0000000000007c76         mov        r12, qword [rbx+8]
0000000000007c7a         mov        rbx, qword [rbx]
0000000000007c7d         call       j_dcgettext                                 ; dcgettext
0000000000007c82         sub        rsp, 0x8

                     loc_7c86:
0000000000007c86         push       r14                                         ; CODE XREF=version_etc_arn+784
0000000000007c88         mov        rdx, rax
0000000000007c8b         mov        r9, r13
0000000000007c8e         mov        r8, r12
0000000000007c91         mov        rcx, rbx
0000000000007c94         mov        rdi, rbp
0000000000007c97         mov        esi, 0x1
0000000000007c9c         xor        eax, eax
0000000000007c9e         call       j___fprintf_chk                             ; __fprintf_chk
0000000000007ca3         pop        rax
0000000000007ca4         pop        rdx
0000000000007ca5         add        rsp, 0x28
0000000000007ca9         pop        rbx
0000000000007caa         pop        rbp
0000000000007cab         pop        r12
0000000000007cad         pop        r13
0000000000007caf         pop        r14
0000000000007cb1         pop        r15
0000000000007cb3         ret
                        ; endp
0000000000007cb4         align      8

                     loc_7cb8:
0000000000007cb8         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
0000000000007cbc         lea        rsi, qword [aWrittenBySSSns_a5d8]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
0000000000007cc3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007cc8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007cca         mov        r14, qword [rbx+0x18]
0000000000007cce         mov        r13, qword [rbx+0x10]
0000000000007cd2         mov        r12, qword [rbx+8]
0000000000007cd6         mov        rbx, qword [rbx]
0000000000007cd9         call       j_dcgettext                                 ; dcgettext
0000000000007cde         push       r15
0000000000007ce0         jmp        loc_7c86
0000000000007ce2         align      8

                     loc_7ce8:
0000000000007ce8         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
0000000000007cec         mov        r12, qword [rbx+0x28]
0000000000007cf0         lea        rsi, qword [aWrittenBySSSns_a600]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
0000000000007cf7         mov        r15, qword [rbx+0x20]
0000000000007cfb         mov        r14, qword [rbx+0x18]
0000000000007cff         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007d04         mov        r13, qword [rbx+0x10]
0000000000007d08         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007d0a         mov        rbx, qword [rbx]
0000000000007d0d         mov        qword [rsp+0x58+var_58], r8
0000000000007d11         call       j_dcgettext                                 ; dcgettext
0000000000007d16         sub        rsp, 0x8
0000000000007d1a         mov        r9, r13
0000000000007d1d         push       r12
0000000000007d1f         push       r15
0000000000007d21         push       r14

                     loc_7d23:
0000000000007d23         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
0000000000007d28         mov        rcx, rbx
0000000000007d2b         mov        rdx, rax
0000000000007d2e         mov        rdi, rbp
0000000000007d31         mov        esi, 0x1
0000000000007d36         xor        eax, eax
0000000000007d38         call       j___fprintf_chk                             ; __fprintf_chk
0000000000007d3d         add        rsp, 0x20
0000000000007d41         add        rsp, 0x28
0000000000007d45         pop        rbx
0000000000007d46         pop        rbp
0000000000007d47         pop        r12
0000000000007d49         pop        r13
0000000000007d4b         pop        r14
0000000000007d4d         pop        r15
0000000000007d4f         ret
                        ; endp

                     loc_7d50:
0000000000007d50         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
0000000000007d54         mov        r13, qword [rbx+0x30]
0000000000007d58         lea        rsi, qword [aWrittenBySSSns_a628]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
0000000000007d5f         mov        r12, qword [rbx+0x28]
0000000000007d63         mov        r15, qword [rbx+0x20]
0000000000007d67         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007d6c         mov        r14, qword [rbx+0x18]
0000000000007d70         mov        r8, qword [rbx+8]
0000000000007d74         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007d76         mov        qword [rsp+0x58+var_50], r9
0000000000007d7b         mov        rbx, qword [rbx]
0000000000007d7e         mov        qword [rsp+0x58+var_58], r8
0000000000007d82         call       j_dcgettext                                 ; dcgettext
0000000000007d87         push       r13
0000000000007d89         push       r12
0000000000007d8b         push       r15
0000000000007d8d         push       r14
0000000000007d8f         mov        r9, qword [rsp+0x78+var_50]
0000000000007d94         jmp        loc_7d23
0000000000007d96         align      32

                     loc_7da0:
0000000000007da0         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
0000000000007da4         mov        r9, qword [rbx+0x38]
0000000000007da8         mov        edx, 0x5
0000000000007dad         mov        rax, qword [rbx+0x10]
0000000000007db1         mov        r8, qword [rbx+8]
0000000000007db5         lea        rsi, qword [aWrittenBySSSns_a6c0]           ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
0000000000007dbc         mov        r13, qword [rbx+0x30]
0000000000007dc0         mov        r12, qword [rbx+0x28]
0000000000007dc4         mov        r15, qword [rbx+0x20]
0000000000007dc8         mov        r14, qword [rbx+0x18]
0000000000007dcc         mov        qword [rsp+0x58+var_40], r10
0000000000007dd1         mov        qword [rsp+0x58+var_48], r9
0000000000007dd6         mov        qword [rsp+0x58+var_58], rax
0000000000007dda         mov        qword [rsp+0x58+var_50], r8
0000000000007ddf         mov        rbx, qword [rbx]
0000000000007de2         jmp        loc_7b72
0000000000007de7         align      16                                          ; End of unwind block (FDE at 0xb7cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
0000000000007df0         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0xb8e0)
0000000000007df3         cmp        qword [r8], 0x0
0000000000007df7         je         j_version_etc_arn                           ; version_etc_arn

0000000000007df9         nop        dword [rax]

                     loc_7e00:
0000000000007e00         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
0000000000007e04         cmp        qword [r8+r9*8], 0x0
0000000000007e09         jne        loc_7e00

                     j_version_etc_arn:        // version_etc_arn
0000000000007e0b         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
0000000000007e10         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0xb8e0), Begin of unwind block (FDE at 0xb8f4)
0000000000007e14         mov        r10, r8
0000000000007e17         xor        r9d, r9d
0000000000007e1a         mov        rax, qword [fs:0x28]
0000000000007e23         mov        qword [rsp+0x68+var_10], rax
0000000000007e28         xor        eax, eax
0000000000007e2a         mov        r8, rsp
0000000000007e2d         nop        dword [rax]

                     loc_7e30:
0000000000007e30         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
0000000000007e33         cmp        eax, 0x2f
0000000000007e36         ja         loc_7e7a

0000000000007e38         mov        r11d, eax
0000000000007e3b         add        r11, qword [r10+0x10]
0000000000007e3f         add        eax, 0x8
0000000000007e42         mov        dword [r10], eax

                     loc_7e45:
0000000000007e45         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
0000000000007e48         test       rax, rax
0000000000007e4b         mov        qword [r8+r9*8], rax
0000000000007e4f         je         loc_7e5b

0000000000007e51         add        r9, 0x1
0000000000007e55         cmp        r9, 0xa
0000000000007e59         jne        loc_7e30

                     loc_7e5b:
0000000000007e5b         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
0000000000007e60         mov        rax, qword [rsp+0x68+var_10]
0000000000007e65         xor        rax, qword [fs:0x28]
0000000000007e6e         jne        loc_7e75

0000000000007e70         add        rsp, 0x68
0000000000007e74         ret
                        ; endp

                     loc_7e75:
0000000000007e75         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_7e7a:
0000000000007e7a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
0000000000007e7e         lea        rax, qword [r11+8]
0000000000007e82         mov        qword [r10+8], rax
0000000000007e86         jmp        loc_7e45
0000000000007e88         align      16                                          ; End of unwind block (FDE at 0xb8f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
0000000000007e90         push       rbp                                         ; Begin of unwind block (FDE at 0xb910), CODE XREF=main+421
0000000000007e91         push       rbx
0000000000007e92         mov        r10d, 0x20
0000000000007e98         xor        r11d, r11d
0000000000007e9b         sub        rsp, 0xb8
0000000000007ea2         mov        rax, qword [fs:0x28]
0000000000007eab         mov        qword [rsp+0xc8+var_50], rax
0000000000007eb0         xor        eax, eax
0000000000007eb2         lea        rax, qword [rsp+0xc8+arg_0]
0000000000007eba         mov        qword [rsp+0xc8+var_28], r8
0000000000007ec2         lea        rbx, qword [rsp+0xc8+arg_0]
0000000000007eca         lea        r8, qword [rsp+0xc8+var_A8]
0000000000007ecf         mov        qword [rsp+0xc8+var_20], r9
0000000000007ed7         mov        dword [rsp+0xc8+var_C0], 0x20
0000000000007edf         mov        qword [rsp+0xc8+var_B8], rax
0000000000007ee4         lea        rax, qword [rsp+0xc8+var_48]
0000000000007eec         xor        r9d, r9d
0000000000007eef         mov        qword [rsp+0xc8+var_B0], rax
0000000000007ef4         mov        rbp, rax
0000000000007ef7         nop        word [rax+rax]

                     loc_7f00:
0000000000007f00         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
0000000000007f04         ja         loc_7f5c

0000000000007f06         mov        eax, r10d
0000000000007f09         mov        r11d, 0x1
0000000000007f0f         add        r10d, 0x8
0000000000007f13         add        rax, rbp

                     loc_7f16:
0000000000007f16         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
0000000000007f19         test       rax, rax
0000000000007f1c         mov        qword [r8+r9*8], rax
0000000000007f20         je         loc_7f2c

0000000000007f22         add        r9, 0x1
0000000000007f26         cmp        r9, 0xa
0000000000007f2a         jne        loc_7f00

                     loc_7f2c:
0000000000007f2c         test       r11b, r11b                                  ; CODE XREF=version_etc+144
0000000000007f2f         jne        loc_7f55

                     loc_7f31:
0000000000007f31         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
0000000000007f36         mov        rax, qword [rsp+0xc8+var_50]
0000000000007f3b         xor        rax, qword [fs:0x28]
0000000000007f44         jne        loc_7f50

0000000000007f46         add        rsp, 0xb8
0000000000007f4d         pop        rbx
0000000000007f4e         pop        rbp
0000000000007f4f         ret
                        ; endp

                     loc_7f50:
0000000000007f50         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_7f55:
0000000000007f55         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
0000000000007f5a         jmp        loc_7f31

                     loc_7f5c:
0000000000007f5c         mov        rax, rbx                                    ; CODE XREF=version_etc+116
0000000000007f5f         add        rbx, 0x8
0000000000007f63         jmp        loc_7f16
0000000000007f65         align      16                                          ; End of unwind block (FDE at 0xb910)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
0000000000007f70         push       rbx                                         ; Begin of unwind block (FDE at 0xb93c)
0000000000007f71         lea        rsi, qword [aWrittenBySSAnd+28]             ; argument "msgid" for method j_dcgettext, 0xa4a2
0000000000007f78         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007f7d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007f7f         call       j_dcgettext                                 ; dcgettext
0000000000007f84         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
0000000000007f8b         mov        rsi, rax
0000000000007f8e         mov        edi, 0x1
0000000000007f93         xor        eax, eax
0000000000007f95         call       j___printf_chk                              ; __printf_chk
0000000000007f9a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
0000000000007fa1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007fa6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007fa8         call       j_dcgettext                                 ; dcgettext
0000000000007fad         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000007fb4         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x9276
0000000000007fbb         mov        rsi, rax
0000000000007fbe         mov        edi, 0x1
0000000000007fc3         xor        eax, eax
0000000000007fc5         call       j___printf_chk                              ; __printf_chk
0000000000007fca         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000007fd1         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
0000000000007fd8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007fda         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007fdf         call       j_dcgettext                                 ; dcgettext
0000000000007fe4         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000007fe7         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000007fea         pop        rbx
0000000000007feb         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
0000000000007ff0         push       rbx                                         ; End of unwind block (FDE at 0xb93c), Begin of unwind block (FDE at 0xb95c), CODE XREF=quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25, xcharalloc, xzalloc+4, xmemdup+15
0000000000007ff1         mov        rbx, rdi
0000000000007ff4         call       j_malloc                                    ; malloc
0000000000007ff9         test       rax, rax
0000000000007ffc         jne        loc_8003

0000000000007ffe         test       rbx, rbx
0000000000008001         jne        loc_8005

                     loc_8003:
0000000000008003         pop        rbx                                         ; CODE XREF=xmalloc+12
0000000000008004         ret
                        ; endp

                     loc_8005:
0000000000008005         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_800a:
000000000000800a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xb95c)
                     xnmalloc:
0000000000008010         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xb978)
0000000000008013         mul        rsi
0000000000008016         mov        rdi, rax
0000000000008019         seto       al
000000000000801c         test       rdi, rdi
000000000000801f         js         loc_802b

0000000000008021         movzx      eax, al
0000000000008024         test       rax, rax
0000000000008027         jne        loc_802b

0000000000008029         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_802b:
000000000000802b         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
000000000000802f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8034:
0000000000008034         nop                                                    ; End of unwind block (FDE at 0xb978)
0000000000008036         nop        word [cs:rax+rax]
                     xcharalloc:
0000000000008040         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0xb98c)
                        ; endp
0000000000008042         align      16                                          ; End of unwind block (FDE at 0xb98c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
0000000000008050         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0xb9a0), CODE XREF=quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
0000000000008053         push       rbx
0000000000008054         mov        rbx, rsi
0000000000008057         jne        loc_805e

0000000000008059         test       rdi, rdi
000000000000805c         jne        loc_8078

                     loc_805e:
000000000000805e         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
0000000000008061         call       j_realloc                                   ; realloc
0000000000008066         test       rax, rax
0000000000008069         jne        loc_8070

000000000000806b         test       rbx, rbx
000000000000806e         jne        loc_8081

                     loc_8070:
0000000000008070         pop        rbx                                         ; CODE XREF=xrealloc+25
0000000000008071         ret
                        ; endp
0000000000008072         align      8

                     loc_8078:
0000000000008078         call       j_free                                      ; free, CODE XREF=xrealloc+12
000000000000807d         xor        eax, eax
000000000000807f         pop        rbx
0000000000008080         ret
                        ; endp

                     loc_8081:
0000000000008081         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8086:
0000000000008086         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0xb9a0)
                     xnrealloc:
0000000000008090         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0xb9c4)
0000000000008093         mul        rdx
0000000000008096         mov        rsi, rax
0000000000008099         seto       al
000000000000809c         test       rsi, rsi
000000000000809f         js         loc_80ab

00000000000080a1         movzx      eax, al
00000000000080a4         test       rax, rax
00000000000080a7         jne        loc_80ab

00000000000080a9         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_80ab:
00000000000080ab         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
00000000000080af         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_80b4:
00000000000080b4         nop                                                    ; End of unwind block (FDE at 0xb9c4)
00000000000080b6         nop        word [cs:rax+rax]
                     x2nrealloc:
00000000000080c0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xb9d8)
00000000000080c3         mov        r9, rdx
00000000000080c6         mov        rcx, qword [rsi]
00000000000080c9         je         loc_8100

00000000000080cb         xor        edx, edx
00000000000080cd         movabs     rax, 0x5555555555555554
00000000000080d7         div        r9
00000000000080da         cmp        rax, rcx
00000000000080dd         jbe        loc_811b

00000000000080df         mov        rax, rcx
00000000000080e2         shr        rax, 0x1
00000000000080e5         lea        rcx, qword [rax+rcx+1]

                     loc_80ea:
00000000000080ea         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
00000000000080ed         imul       rcx, r9                                     ; argument #4 for method xrealloc
00000000000080f1         mov        rsi, rcx                                    ; argument #2 for method xrealloc
00000000000080f4         jmp        xrealloc                                    ; xrealloc
                        ; endp
00000000000080f9         align      256

                     loc_8100:
0000000000008100         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
0000000000008103         je         loc_8128

                     loc_8105:
0000000000008105         mov        rax, rcx                                    ; CODE XREF=sub_8124+28
0000000000008108         mul        r9
000000000000810b         seto       dl
000000000000810e         test       rax, rax
0000000000008111         movzx      edx, dl
0000000000008114         js         loc_811b

0000000000008116         test       rdx, rdx
0000000000008119         je         loc_80ea

                     loc_811b:
000000000000811b         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
000000000000811f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8124:
0000000000008124         nop        dword [rax]
                        ; endp

                     loc_8128:
0000000000008128         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
000000000000812a         mov        eax, 0x80
000000000000812f         xor        r8d, r8d
0000000000008132         div        r9
0000000000008135         test       rax, rax
0000000000008138         sete       r8b
000000000000813c         lea        rcx, qword [r8+rax]
0000000000008140         jmp        loc_8105
0000000000008142         align      16                                          ; End of unwind block (FDE at 0xb9d8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
0000000000008150         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xb9f0)
0000000000008153         mov        rax, qword [rsi]
0000000000008156         je         loc_8180

0000000000008158         movabs     rdx, 0x5555555555555553
0000000000008162         cmp        rax, rdx
0000000000008165         ja         loc_8191

0000000000008167         mov        rdx, rax
000000000000816a         shr        rdx, 0x1
000000000000816d         lea        rax, qword [rdx+rax+1]

                     loc_8172:
0000000000008172         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000008175         mov        rsi, rax                                    ; argument #2 for method xrealloc
0000000000008178         jmp        xrealloc                                    ; xrealloc
                        ; endp
000000000000817d         align      128

                     loc_8180:
0000000000008180         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000008183         mov        edx, 0x80
0000000000008188         cmove      rax, rdx
000000000000818c         test       rax, rax
000000000000818f         jns        loc_8172

                     loc_8191:
0000000000008191         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000008195         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_819a:
000000000000819a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xb9f0)
                     xzalloc:
00000000000081a0         push       rbx                                         ; Begin of unwind block (FDE at 0xba08)
00000000000081a1         mov        rbx, rdi
00000000000081a4         call       xmalloc                                     ; xmalloc
00000000000081a9         mov        rdx, rbx                                    ; argument "__n" for method j_memset
00000000000081ac         xor        esi, esi                                    ; argument "__c" for method j_memset
00000000000081ae         mov        rdi, rax                                    ; argument "__s" for method j_memset
00000000000081b1         pop        rbx
00000000000081b2         jmp        j_memset                                    ; memset
                        ; endp
00000000000081b7         align      64                                          ; End of unwind block (FDE at 0xba08)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
00000000000081c0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xba24)
00000000000081c3         sub        rsp, 0x8
00000000000081c7         mul        rsi
00000000000081ca         seto       dl
00000000000081cd         test       rax, rax
00000000000081d0         js         loc_81e9

00000000000081d2         movzx      edx, dl
00000000000081d5         test       rdx, rdx
00000000000081d8         jne        loc_81e9

00000000000081da         call       j_calloc                                    ; calloc
00000000000081df         test       rax, rax
00000000000081e2         je         loc_81e9

00000000000081e4         add        rsp, 0x8
00000000000081e8         ret
                        ; endp

                     loc_81e9:
00000000000081e9         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_81ee:
00000000000081ee         nop                                                    ; End of unwind block (FDE at 0xba24)
                        ; endp

                     xmemdup:
00000000000081f0         push       rbp                                         ; Begin of unwind block (FDE at 0xba40), CODE XREF=clone_quoting_options+40, xstrdup+17
00000000000081f1         push       rbx
00000000000081f2         mov        rbp, rdi
00000000000081f5         mov        rdi, rsi
00000000000081f8         mov        rbx, rsi
00000000000081fb         sub        rsp, 0x8
00000000000081ff         call       xmalloc                                     ; xmalloc
0000000000008204         add        rsp, 0x8
0000000000008208         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
000000000000820b         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
000000000000820e         pop        rbx
000000000000820f         pop        rbp
0000000000008210         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000008213         jmp        j_memcpy                                    ; memcpy
                        ; endp
0000000000008218         align      32                                          ; End of unwind block (FDE at 0xba40)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
0000000000008220         push       rbx                                         ; Begin of unwind block (FDE at 0xba68)
0000000000008221         mov        rbx, rdi
0000000000008224         call       j_strlen                                    ; strlen
0000000000008229         mov        rdi, rbx
000000000000822c         lea        rsi, qword [rax+1]
0000000000008230         pop        rbx
0000000000008231         jmp        xmemdup                                     ; xmemdup
0000000000008233         align      64                                          ; End of unwind block (FDE at 0xba68)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
0000000000008240         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0xba84), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41
0000000000008247         sub        rsp, 0x8
000000000000824b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008250         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000008252         call       j_dcgettext                                 ; dcgettext
0000000000008257         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
000000000000825d         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x9f0c
0000000000008264         mov        rcx, rax
0000000000008267         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000008269         xor        eax, eax
000000000000826b         call       j_error                                     ; error
0000000000008270         call       j_abort                                     ; abort
                        ; endp
0000000000008275         align      128                                         ; End of unwind block (FDE at 0xba84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     xnumtoumax:
0000000000008280         push       r15                                         ; Begin of unwind block (FDE at 0xba9c), CODE XREF=xdectoumax+23
0000000000008282         push       r14
0000000000008284         mov        r15, rcx
0000000000008287         push       r13
0000000000008289         push       r12
000000000000828b         mov        r14, rdx
000000000000828e         push       rbp
000000000000828f         push       rbx
0000000000008290         mov        edx, esi
0000000000008292         xor        esi, esi
0000000000008294         mov        r12, rdi
0000000000008297         mov        r13, r9
000000000000829a         sub        rsp, 0x18
000000000000829e         mov        rcx, rsp
00000000000082a1         mov        ebx, dword [rsp+0x48+arg_0]
00000000000082a5         mov        rax, qword [fs:0x28]
00000000000082ae         mov        qword [rsp+0x48+var_40], rax
00000000000082b3         xor        eax, eax
00000000000082b5         call       xstrtoumax                                  ; xstrtoumax
00000000000082ba         test       eax, eax
00000000000082bc         jne        loc_8350

00000000000082c2         mov        rbp, qword [rsp+0x48+var_48]
00000000000082c6         cmp        rbp, r14
00000000000082c9         jb         loc_82d0

00000000000082cb         cmp        rbp, r15
00000000000082ce         jbe        loc_8324

                     loc_82d0:
00000000000082d0         call       j___errno_location                          ; __errno_location, CODE XREF=xnumtoumax+73
00000000000082d5         cmp        rbp, 0x40000000
00000000000082dc         mov        r14, rax
00000000000082df         sbb        eax, eax
00000000000082e1         and        eax, 0xffffffd7
00000000000082e4         add        eax, 0x4b
00000000000082e7         mov        dword [r14], eax

                     loc_82ea:
00000000000082ea         mov        rdi, r12                                    ; CODE XREF=xnumtoumax+226, xnumtoumax+234, xnumtoumax+246
00000000000082ed         call       quote                                       ; quote
00000000000082f2         mov        esi, dword [r14]
00000000000082f5         mov        r8, rax
00000000000082f8         mov        eax, 0x0
00000000000082fd         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000008304         mov        rcx, r13
0000000000008307         cmp        esi, 0x16
000000000000830a         cmove      esi, eax                                    ; argument "__errnum" for method j_error
000000000000830d         test       ebx, ebx
000000000000830f         mov        eax, 0x1
0000000000008314         cmove      ebx, eax
0000000000008317         xor        eax, eax
0000000000008319         mov        edi, ebx                                    ; argument "__status" for method j_error
000000000000831b         call       j_error                                     ; error
0000000000008320         mov        rbp, qword [rsp+0x48+var_48]

                     loc_8324:
0000000000008324         mov        rdx, qword [rsp+0x48+var_40]                ; CODE XREF=xnumtoumax+78
0000000000008329         xor        rdx, qword [fs:0x28]
0000000000008332         mov        rax, rbp
0000000000008335         jne        loc_837b

0000000000008337         add        rsp, 0x18
000000000000833b         pop        rbx
000000000000833c         pop        rbp
000000000000833d         pop        r12
000000000000833f         pop        r13
0000000000008341         pop        r14
0000000000008343         pop        r15
0000000000008345         ret
                        ; endp
0000000000008346         align      16

                     loc_8350:
0000000000008350         mov        ebp, eax                                    ; CODE XREF=xnumtoumax+60
0000000000008352         call       j___errno_location                          ; __errno_location
0000000000008357         cmp        ebp, 0x1
000000000000835a         mov        r14, rax
000000000000835d         je         loc_8370

000000000000835f         cmp        ebp, 0x3
0000000000008362         jne        loc_82ea

0000000000008364         mov        dword [rax], 0x0
000000000000836a         jmp        loc_82ea
000000000000836f         align      16

                     loc_8370:
0000000000008370         mov        dword [rax], 0x4b                           ; CODE XREF=xnumtoumax+221
0000000000008376         jmp        loc_82ea

                     loc_837b:
000000000000837b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xnumtoumax+181
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xdectoumax:
0000000000008380         sub        rsp, 0x10                                   ; End of unwind block (FDE at 0xba9c), Begin of unwind block (FDE at 0xbae8), CODE XREF=main+624
0000000000008384         push       r9
0000000000008386         mov        r9, r8
0000000000008389         mov        r8, rcx
000000000000838c         mov        rcx, rdx
000000000000838f         mov        rdx, rsi
0000000000008392         mov        esi, 0xa
0000000000008397         call       xnumtoumax                                  ; xnumtoumax
000000000000839c         add        rsp, 0x18
00000000000083a0         ret
                        ; endp
00000000000083a1         align      16                                          ; End of unwind block (FDE at 0xbae8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoul:
00000000000083b0         push       r15                                         ; Begin of unwind block (FDE at 0xbb04), CODE XREF=main+2984
00000000000083b2         push       r14
00000000000083b4         push       r13
00000000000083b6         push       r12
00000000000083b8         push       rbp
00000000000083b9         push       rbx
00000000000083ba         sub        rsp, 0x28
00000000000083be         mov        rax, qword [fs:0x28]
00000000000083c7         mov        qword [rsp+0x58+var_40], rax
00000000000083cc         xor        eax, eax
00000000000083ce         cmp        edx, 0x24
00000000000083d1         ja         loc_8735

00000000000083d7         lea        rax, qword [rsp+0x58+var_48]
00000000000083dc         mov        r15, rsi
00000000000083df         test       rsi, rsi
00000000000083e2         mov        rbp, rdi
00000000000083e5         mov        dword [rsp+0x58+var_50], edx
00000000000083e9         mov        r14, rcx
00000000000083ec         mov        r13, r8
00000000000083ef         cmove      r15, rax
00000000000083f3         call       j___errno_location                          ; __errno_location
00000000000083f8         mov        dword [rax], 0x0
00000000000083fe         mov        r12, rax
0000000000008401         movzx      ebx, byte [rbp]
0000000000008405         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000840a         mov        edx, dword [rsp+0x58+var_50]
000000000000840e         mov        rsi, qword [rax]
0000000000008411         mov        rax, rbp
0000000000008414         jmp        loc_8427
0000000000008416         align      32

                     loc_8420:
0000000000008420         add        rax, 0x1                                    ; CODE XREF=xstrtoul+127
0000000000008424         movzx      ebx, byte [rax]

                     loc_8427:
0000000000008427         movzx      ecx, bl                                     ; CODE XREF=xstrtoul+100
000000000000842a         test       byte [rsi+rcx*2+1], 0x20
000000000000842f         jne        loc_8420

0000000000008431         cmp        bl, 0x2d
0000000000008434         je         loc_8488

0000000000008436         mov        rsi, r15                                    ; argument "__endptr" for method j_strtoul
0000000000008439         mov        rdi, rbp                                    ; argument "__nptr" for method j_strtoul
000000000000843c         call       j_strtoul                                   ; strtoul
0000000000008441         mov        rcx, qword [r15]
0000000000008444         mov        rbx, rax
0000000000008447         cmp        rcx, rbp
000000000000844a         je         loc_8478

000000000000844c         mov        eax, dword [r12]
0000000000008450         test       eax, eax
0000000000008452         je         loc_84b8

0000000000008454         cmp        eax, 0x22
0000000000008457         mov        ebp, 0x1
000000000000845c         jne        loc_8488

                     loc_845e:
000000000000845e         test       r13, r13                                    ; CODE XREF=xstrtoul+266
0000000000008461         je         loc_846c

0000000000008463         movzx      r12d, byte [rcx]
0000000000008467         test       r12b, r12b
000000000000846a         jne        loc_84e7

                     loc_846c:
000000000000846c         mov        qword [r14], rbx                            ; CODE XREF=xstrtoul+177
000000000000846f         jmp        loc_848d
0000000000008471         align      8

                     loc_8478:
0000000000008478         test       r13, r13                                    ; CODE XREF=xstrtoul+154
000000000000847b         mov        qword [rsp+0x58+var_50], rcx
0000000000008480         jne        loc_84c0

0000000000008482         nop        word [rax+rax]

                     loc_8488:
0000000000008488         mov        ebp, 0x4                                    ; CODE XREF=xstrtoul+132, xstrtoul+172, xstrtoul+280, xstrtoul+309

                     loc_848d:
000000000000848d         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoul+191, xstrtoul+535, xstrtoul+546
0000000000008492         xor        rdi, qword [fs:0x28]
000000000000849b         mov        eax, ebp
000000000000849d         jne        loc_8730

00000000000084a3         add        rsp, 0x28
00000000000084a7         pop        rbx
00000000000084a8         pop        rbp
00000000000084a9         pop        r12
00000000000084ab         pop        r13
00000000000084ad         pop        r14
00000000000084af         pop        r15
00000000000084b1         ret
                        ; endp
00000000000084b2         align      8

                     loc_84b8:
00000000000084b8         xor        ebp, ebp                                    ; CODE XREF=xstrtoul+162
00000000000084ba         jmp        loc_845e
00000000000084bc         align      64

                     loc_84c0:
00000000000084c0         movzx      r12d, byte [rbp]                            ; CODE XREF=xstrtoul+208
00000000000084c5         test       r12b, r12b
00000000000084c8         je         loc_8488

00000000000084ca         movsx      esi, r12b                                   ; argument "__c" for method j_strchr
00000000000084ce         mov        rdi, r13                                    ; argument "__s" for method j_strchr
00000000000084d1         xor        ebp, ebp
00000000000084d3         call       j_strchr                                    ; strchr
00000000000084d8         test       rax, rax
00000000000084db         mov        ebx, 0x1
00000000000084e0         mov        rcx, qword [rsp+0x58+var_50]
00000000000084e5         je         loc_8488

                     loc_84e7:
00000000000084e7         movsx      esi, r12b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoul+186
00000000000084eb         mov        rdi, r13                                    ; argument "__s" for method j_strchr
00000000000084ee         mov        qword [rsp+0x58+var_50], rcx
00000000000084f3         call       j_strchr                                    ; strchr
00000000000084f8         test       rax, rax
00000000000084fb         mov        rcx, qword [rsp+0x58+var_50]
0000000000008500         je         loc_85cc

0000000000008506         lea        eax, dword [r12-0x45]
000000000000850b         cmp        al, 0x2f
000000000000850d         ja         loc_8560

000000000000850f         movabs     rdx, 0x814400308945
0000000000008519         bt         rdx, rax
000000000000851d         jae        loc_8560

000000000000851f         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
0000000000008524         mov        rdi, r13                                    ; argument "__s" for method j_strchr
0000000000008527         mov        qword [rsp+0x58+var_50], rcx
000000000000852c         call       j_strchr                                    ; strchr
0000000000008531         test       rax, rax
0000000000008534         mov        rcx, qword [rsp+0x58+var_50]
0000000000008539         je         loc_8560

000000000000853b         movzx      eax, byte [rcx+1]
000000000000853f         cmp        al, 0x44
0000000000008541         je         loc_854f

0000000000008543         cmp        al, 0x69
0000000000008545         je         loc_8718

000000000000854b         cmp        al, 0x42
000000000000854d         jne        loc_8560

                     loc_854f:
000000000000854f         mov        edi, 0x2                                    ; CODE XREF=xstrtoul+401
0000000000008554         mov        esi, 0x3e8
0000000000008559         jmp        loc_856a
000000000000855b         align      32

                     loc_8560:
0000000000008560         mov        edi, 0x1                                    ; CODE XREF=xstrtoul+349, xstrtoul+365, xstrtoul+393, xstrtoul+413
0000000000008565         mov        esi, 0x400

                     loc_856a:
000000000000856a         sub        r12d, 0x42                                  ; CODE XREF=xstrtoul+425, xstrtoul+891
000000000000856e         cmp        r12b, 0x35
0000000000008572         ja         loc_85cc

0000000000008574         lea        rdx, qword [switch_table_a808]              ; switch_table_a808
000000000000857b         movzx      r12d, r12b
000000000000857f         movsxd     rax, dword [rdx+r12*4]
0000000000008583         add        rax, rdx
0000000000008586         jmp        rax                                         ; switch statement using table at 0xa808, with 54 cases, 0x8588,0x85b0,0x85cc,0x85d7,0x85ed,0x8604,0x862a,0x864f,0x866f,0x8690,0x86b3,0x86d6,0x86ec

                     loc_8588:
0000000000008588         mov        rax, rbx                                    ; case 43, CODE XREF=xstrtoul+470
000000000000858b         mul        rsi
000000000000858e         jo         loc_8781

0000000000008594         xor        r8d, r8d

                     loc_8597:
0000000000008597         mul        rsi                                         ; CODE XREF=xstrtoul+846, xstrtoul+862, xstrtoul+987
000000000000859a         jo         loc_8772

00000000000085a0         mov        rbx, rax

                     loc_85a3:
00000000000085a3         or         ebp, r8d                                    ; CODE XREF=xstrtoul+972
00000000000085a6         nop        word [cs:rax+rax]

                     loc_85b0:
00000000000085b0         movsxd     rdi, edi                                    ; case 33, CODE XREF=xstrtoul+470, xstrtoul+571, xstrtoul+594, xstrtoul+632, xstrtoul+712, xstrtoul+727, xstrtoul+823
00000000000085b3         mov        eax, ebp
00000000000085b5         add        rcx, rdi
00000000000085b8         or         eax, 0x2
00000000000085bb         mov        qword [r15], rcx
00000000000085be         cmp        byte [rcx], 0x0
00000000000085c1         mov        qword [r14], rbx
00000000000085c4         cmovne     ebp, eax
00000000000085c7         jmp        loc_848d

                     loc_85cc:
00000000000085cc         mov        qword [r14], rbx                            ; case 52, CODE XREF=xstrtoul+336, xstrtoul+450, xstrtoul+470
00000000000085cf         or         ebp, 0x2
00000000000085d2         jmp        loc_848d

                     loc_85d7:
00000000000085d7         mov        edx, 0x2                                    ; case 53, CODE XREF=xstrtoul+470
00000000000085dc         mov        rax, rdx
00000000000085df         mul        rbx
00000000000085e2         jo         loc_867e

00000000000085e8         add        rbx, rbx
00000000000085eb         jmp        loc_85b0

                     loc_85ed:
00000000000085ed         mov        edx, 0x200                                  ; case 32, CODE XREF=xstrtoul+470
00000000000085f2         mov        rax, rdx
00000000000085f5         mul        rbx
00000000000085f8         jo         loc_867e

00000000000085fe         shl        rbx, 0x9
0000000000008602         jmp        loc_85b0

                     loc_8604:
0000000000008604         mov        r8d, 0x7                                    ; case 24, CODE XREF=xstrtoul+470
000000000000860a         xor        r9d, r9d
000000000000860d         nop        dword [rax]

                     loc_8610:
0000000000008610         mov        rax, rbx                                    ; CODE XREF=xstrtoul+627
0000000000008613         mul        rsi
0000000000008616         mov        rbx, rax
0000000000008619         jo         loc_87ae

                     loc_861f:
000000000000861f         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+1032
0000000000008623         jne        loc_8610

                     loc_8625:
0000000000008625         or         ebp, r9d                                    ; CODE XREF=xstrtoul+669, xstrtoul+701, xstrtoul+766, xstrtoul+801
0000000000008628         jmp        loc_85b0

                     loc_862a:
000000000000862a         mov        r8d, 0x8                                    ; case 23, CODE XREF=xstrtoul+470
0000000000008630         xor        r9d, r9d
0000000000008633         nop        dword [rax+rax]

                     loc_8638:
0000000000008638         mov        rax, rbx                                    ; CODE XREF=xstrtoul+667
000000000000863b         mul        rsi
000000000000863e         mov        rbx, rax
0000000000008641         jo         loc_8790

                     loc_8647:
0000000000008647         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+1002
000000000000864b         jne        loc_8638

000000000000864d         jmp        loc_8625

                     loc_864f:
000000000000864f         mov        r8d, 0x4                                    ; case 50, CODE XREF=xstrtoul+470
0000000000008655         xor        r9d, r9d

                     loc_8658:
0000000000008658         mov        rax, rbx                                    ; CODE XREF=xstrtoul+699
000000000000865b         mul        rsi
000000000000865e         mov        rbx, rax
0000000000008661         jo         loc_8763

                     loc_8667:
0000000000008667         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+957
000000000000866b         jne        loc_8658

000000000000866d         jmp        loc_8625

                     loc_866f:
000000000000866f         mov        rax, rbx                                    ; case 41, CODE XREF=xstrtoul+470
0000000000008672         mul        rsi
0000000000008675         mov        rbx, rax
0000000000008678         jno        loc_85b0

                     loc_867e:
000000000000867e         mov        ebp, 0x1                                    ; CODE XREF=xstrtoul+562, xstrtoul+584, xstrtoul+817
0000000000008683         or         rbx, 0xffffffffffffffff
0000000000008687         jmp        loc_85b0
000000000000868c         align      16

                     loc_8690:
0000000000008690         mov        r8d, 0x5                                    ; case 14, CODE XREF=xstrtoul+470
0000000000008696         xor        r9d, r9d

                     loc_8699:
0000000000008699         mov        rax, rbx                                    ; CODE XREF=xstrtoul+764
000000000000869c         mul        rsi
000000000000869f         mov        rbx, rax
00000000000086a2         jo         loc_879f

                     loc_86a8:
00000000000086a8         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+1017
00000000000086ac         jne        loc_8699

00000000000086ae         jmp        loc_8625

                     loc_86b3:
00000000000086b3         mov        r8d, 0x6                                    ; case 3, CODE XREF=xstrtoul+470
00000000000086b9         xor        r9d, r9d

                     loc_86bc:
00000000000086bc         mov        rax, rbx                                    ; CODE XREF=xstrtoul+799
00000000000086bf         mul        rsi
00000000000086c2         mov        rbx, rax
00000000000086c5         jo         loc_8754

                     loc_86cb:
00000000000086cb         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+942
00000000000086cf         jne        loc_86bc

00000000000086d1         jmp        loc_8625

                     loc_86d6:
00000000000086d6         mov        edx, 0x400                                  ; case 0, CODE XREF=xstrtoul+470
00000000000086db         mov        rax, rdx
00000000000086de         mul        rbx
00000000000086e1         jo         loc_867e

00000000000086e3         shl        rbx, 0xa
00000000000086e7         jmp        loc_85b0

                     loc_86ec:
00000000000086ec         mov        rax, rbx                                    ; case 37, CODE XREF=xstrtoul+470
00000000000086ef         mul        rsi
00000000000086f2         jo         loc_87bd

00000000000086f8         xor        r8d, r8d

                     loc_86fb:
00000000000086fb         mul        rsi                                         ; CODE XREF=xstrtoul+1047
00000000000086fe         jno        loc_8597

0000000000008704         mov        r8d, 0x1
000000000000870a         or         rax, 0xffffffffffffffff
000000000000870e         jmp        loc_8597
0000000000008713         align      8

                     loc_8718:
0000000000008718         xor        edi, edi                                    ; CODE XREF=xstrtoul+405
000000000000871a         cmp        byte [rcx+2], 0x42
000000000000871e         mov        esi, 0x400
0000000000008723         sete       dil
0000000000008727         lea        edi, dword [rdi+rdi+1]
000000000000872b         jmp        loc_856a

                     loc_8730:
0000000000008730         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoul+237
                        ; endp

                     loc_8735:
0000000000008735         lea        rcx, qword [__PRETTY_FUNCTION__.4162]       ; argument "__function" for method j___assert_fail, "xstrtoul", CODE XREF=xstrtoul+33
000000000000873c         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
0000000000008743         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
000000000000874a         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
000000000000874f         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_8754:
0000000000008754         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+789
000000000000875a         or         rbx, 0xffffffffffffffff
000000000000875e         jmp        loc_86cb

                     loc_8763:
0000000000008763         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+689
0000000000008769         or         rbx, 0xffffffffffffffff
000000000000876d         jmp        loc_8667

                     loc_8772:
0000000000008772         mov        r8d, 0x1                                    ; CODE XREF=xstrtoul+490
0000000000008778         or         rbx, 0xffffffffffffffff
000000000000877c         jmp        loc_85a3

                     loc_8781:
0000000000008781         or         rax, 0xffffffffffffffff                     ; CODE XREF=xstrtoul+478
0000000000008785         mov        r8d, 0x1
000000000000878b         jmp        loc_8597

                     loc_8790:
0000000000008790         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+657
0000000000008796         or         rbx, 0xffffffffffffffff
000000000000879a         jmp        loc_8647

                     loc_879f:
000000000000879f         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+754
00000000000087a5         or         rbx, 0xffffffffffffffff
00000000000087a9         jmp        loc_86a8

                     loc_87ae:
00000000000087ae         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+617
00000000000087b4         or         rbx, 0xffffffffffffffff
00000000000087b8         jmp        loc_861f

                     loc_87bd:
00000000000087bd         mov        r8d, 0x1                                    ; CODE XREF=xstrtoul+834
00000000000087c3         or         rax, 0xffffffffffffffff
00000000000087c7         jmp        loc_86fb
00000000000087cc         align      16                                          ; End of unwind block (FDE at 0xbb04)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoumax:
00000000000087d0         push       r15                                         ; Begin of unwind block (FDE at 0xbb54), CODE XREF=xnumtoumax+53
00000000000087d2         push       r14
00000000000087d4         push       r13
00000000000087d6         push       r12
00000000000087d8         push       rbp
00000000000087d9         push       rbx
00000000000087da         sub        rsp, 0x28
00000000000087de         mov        rax, qword [fs:0x28]
00000000000087e7         mov        qword [rsp+0x58+var_40], rax
00000000000087ec         xor        eax, eax
00000000000087ee         cmp        edx, 0x24
00000000000087f1         ja         loc_8b55

00000000000087f7         lea        rax, qword [rsp+0x58+var_48]
00000000000087fc         mov        r15, rsi
00000000000087ff         test       rsi, rsi
0000000000008802         mov        rbp, rdi
0000000000008805         mov        dword [rsp+0x58+var_50], edx
0000000000008809         mov        r14, rcx
000000000000880c         mov        r13, r8
000000000000880f         cmove      r15, rax
0000000000008813         call       j___errno_location                          ; __errno_location
0000000000008818         mov        dword [rax], 0x0
000000000000881e         mov        r12, rax
0000000000008821         movzx      ebx, byte [rbp]
0000000000008825         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000882a         mov        edx, dword [rsp+0x58+var_50]
000000000000882e         mov        rsi, qword [rax]
0000000000008831         mov        rax, rbp
0000000000008834         jmp        loc_8847
0000000000008836         align      64

                     loc_8840:
0000000000008840         add        rax, 0x1                                    ; CODE XREF=xstrtoumax+127
0000000000008844         movzx      ebx, byte [rax]

                     loc_8847:
0000000000008847         movzx      ecx, bl                                     ; CODE XREF=xstrtoumax+100
000000000000884a         test       byte [rsi+rcx*2+1], 0x20
000000000000884f         jne        loc_8840

0000000000008851         cmp        bl, 0x2d
0000000000008854         je         loc_88a8

0000000000008856         xor        ecx, ecx
0000000000008858         mov        rsi, r15
000000000000885b         mov        rdi, rbp
000000000000885e         call       j___strtoul_internal                        ; __strtoul_internal
0000000000008863         mov        rcx, qword [r15]
0000000000008866         mov        rbx, rax
0000000000008869         cmp        rcx, rbp
000000000000886c         je         loc_8898

000000000000886e         mov        eax, dword [r12]
0000000000008872         test       eax, eax
0000000000008874         je         loc_88d8

0000000000008876         cmp        eax, 0x22
0000000000008879         mov        ebp, 0x1
000000000000887e         jne        loc_88a8

                     loc_8880:
0000000000008880         test       r13, r13                                    ; CODE XREF=xstrtoumax+266
0000000000008883         je         loc_888e

0000000000008885         movzx      r12d, byte [rcx]
0000000000008889         test       r12b, r12b
000000000000888c         jne        loc_8907

                     loc_888e:
000000000000888e         mov        qword [r14], rbx                            ; CODE XREF=xstrtoumax+179
0000000000008891         jmp        loc_88ad
0000000000008893         align      8

                     loc_8898:
0000000000008898         test       r13, r13                                    ; CODE XREF=xstrtoumax+156
000000000000889b         mov        qword [rsp+0x58+var_50], rcx
00000000000088a0         jne        loc_88e0

00000000000088a2         nop        word [rax+rax]

                     loc_88a8:
00000000000088a8         mov        ebp, 0x4                                    ; CODE XREF=xstrtoumax+132, xstrtoumax+174, xstrtoumax+280, xstrtoumax+309

                     loc_88ad:
00000000000088ad         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoumax+193, xstrtoumax+535, xstrtoumax+546
00000000000088b2         xor        rdi, qword [fs:0x28]
00000000000088bb         mov        eax, ebp
00000000000088bd         jne        loc_8b50

00000000000088c3         add        rsp, 0x28
00000000000088c7         pop        rbx
00000000000088c8         pop        rbp
00000000000088c9         pop        r12
00000000000088cb         pop        r13
00000000000088cd         pop        r14
00000000000088cf         pop        r15
00000000000088d1         ret
                        ; endp
00000000000088d2         align      8

                     loc_88d8:
00000000000088d8         xor        ebp, ebp                                    ; CODE XREF=xstrtoumax+164
00000000000088da         jmp        loc_8880
00000000000088dc         align      32

                     loc_88e0:
00000000000088e0         movzx      r12d, byte [rbp]                            ; CODE XREF=xstrtoumax+208
00000000000088e5         test       r12b, r12b
00000000000088e8         je         loc_88a8

00000000000088ea         movsx      esi, r12b                                   ; argument "__c" for method j_strchr
00000000000088ee         mov        rdi, r13                                    ; argument "__s" for method j_strchr
00000000000088f1         xor        ebp, ebp
00000000000088f3         call       j_strchr                                    ; strchr
00000000000088f8         test       rax, rax
00000000000088fb         mov        ebx, 0x1
0000000000008900         mov        rcx, qword [rsp+0x58+var_50]
0000000000008905         je         loc_88a8

                     loc_8907:
0000000000008907         movsx      esi, r12b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoumax+188
000000000000890b         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000890e         mov        qword [rsp+0x58+var_50], rcx
0000000000008913         call       j_strchr                                    ; strchr
0000000000008918         test       rax, rax
000000000000891b         mov        rcx, qword [rsp+0x58+var_50]
0000000000008920         je         loc_89ec

0000000000008926         lea        eax, dword [r12-0x45]
000000000000892b         cmp        al, 0x2f
000000000000892d         ja         loc_8980

000000000000892f         movabs     rdx, 0x814400308945
0000000000008939         bt         rdx, rax
000000000000893d         jae        loc_8980

000000000000893f         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
0000000000008944         mov        rdi, r13                                    ; argument "__s" for method j_strchr
0000000000008947         mov        qword [rsp+0x58+var_50], rcx
000000000000894c         call       j_strchr                                    ; strchr
0000000000008951         test       rax, rax
0000000000008954         mov        rcx, qword [rsp+0x58+var_50]
0000000000008959         je         loc_8980

000000000000895b         movzx      eax, byte [rcx+1]
000000000000895f         cmp        al, 0x44
0000000000008961         je         loc_896f

0000000000008963         cmp        al, 0x69
0000000000008965         je         loc_8b38

000000000000896b         cmp        al, 0x42
000000000000896d         jne        loc_8980

                     loc_896f:
000000000000896f         mov        edi, 0x2                                    ; CODE XREF=xstrtoumax+401
0000000000008974         mov        esi, 0x3e8
0000000000008979         jmp        loc_898a
000000000000897b         align      128

                     loc_8980:
0000000000008980         mov        edi, 0x1                                    ; CODE XREF=xstrtoumax+349, xstrtoumax+365, xstrtoumax+393, xstrtoumax+413
0000000000008985         mov        esi, 0x400

                     loc_898a:
000000000000898a         sub        r12d, 0x42                                  ; CODE XREF=xstrtoumax+425, xstrtoumax+891
000000000000898e         cmp        r12b, 0x35
0000000000008992         ja         loc_89ec

0000000000008994         lea        rdx, qword [switch_table_a8f0]              ; switch_table_a8f0
000000000000899b         movzx      r12d, r12b
000000000000899f         movsxd     rax, dword [rdx+r12*4]
00000000000089a3         add        rax, rdx
00000000000089a6         jmp        rax                                         ; switch statement using table at 0xa8f0, with 54 cases, 0x89a8,0x89d0,0x89ec,0x89f7,0x8a0d,0x8a24,0x8a4a,0x8a6f,0x8a8f,0x8ab0,0x8ad3,0x8af6,0x8b0c

                     loc_89a8:
00000000000089a8         mov        rax, rbx                                    ; case 43, CODE XREF=xstrtoumax+470
00000000000089ab         mul        rsi
00000000000089ae         jo         loc_8ba1

00000000000089b4         xor        r8d, r8d

                     loc_89b7:
00000000000089b7         mul        rsi                                         ; CODE XREF=xstrtoumax+846, xstrtoumax+862, xstrtoumax+987
00000000000089ba         jo         loc_8b92

00000000000089c0         mov        rbx, rax

                     loc_89c3:
00000000000089c3         or         ebp, r8d                                    ; CODE XREF=xstrtoumax+972
00000000000089c6         nop        word [cs:rax+rax]

                     loc_89d0:
00000000000089d0         movsxd     rdi, edi                                    ; case 33, CODE XREF=xstrtoumax+470, xstrtoumax+571, xstrtoumax+594, xstrtoumax+632, xstrtoumax+712, xstrtoumax+727, xstrtoumax+823
00000000000089d3         mov        eax, ebp
00000000000089d5         add        rcx, rdi
00000000000089d8         or         eax, 0x2
00000000000089db         mov        qword [r15], rcx
00000000000089de         cmp        byte [rcx], 0x0
00000000000089e1         mov        qword [r14], rbx
00000000000089e4         cmovne     ebp, eax
00000000000089e7         jmp        loc_88ad

                     loc_89ec:
00000000000089ec         mov        qword [r14], rbx                            ; case 52, CODE XREF=xstrtoumax+336, xstrtoumax+450, xstrtoumax+470
00000000000089ef         or         ebp, 0x2
00000000000089f2         jmp        loc_88ad

                     loc_89f7:
00000000000089f7         mov        edx, 0x2                                    ; case 53, CODE XREF=xstrtoumax+470
00000000000089fc         mov        rax, rdx
00000000000089ff         mul        rbx
0000000000008a02         jo         loc_8a9e

0000000000008a08         add        rbx, rbx
0000000000008a0b         jmp        loc_89d0

                     loc_8a0d:
0000000000008a0d         mov        edx, 0x200                                  ; case 32, CODE XREF=xstrtoumax+470
0000000000008a12         mov        rax, rdx
0000000000008a15         mul        rbx
0000000000008a18         jo         loc_8a9e

0000000000008a1e         shl        rbx, 0x9
0000000000008a22         jmp        loc_89d0

                     loc_8a24:
0000000000008a24         mov        r8d, 0x7                                    ; case 24, CODE XREF=xstrtoumax+470
0000000000008a2a         xor        r9d, r9d
0000000000008a2d         nop        dword [rax]

                     loc_8a30:
0000000000008a30         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+627
0000000000008a33         mul        rsi
0000000000008a36         mov        rbx, rax
0000000000008a39         jo         loc_8bce

                     loc_8a3f:
0000000000008a3f         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1032
0000000000008a43         jne        loc_8a30

                     loc_8a45:
0000000000008a45         or         ebp, r9d                                    ; CODE XREF=xstrtoumax+669, xstrtoumax+701, xstrtoumax+766, xstrtoumax+801
0000000000008a48         jmp        loc_89d0

                     loc_8a4a:
0000000000008a4a         mov        r8d, 0x8                                    ; case 23, CODE XREF=xstrtoumax+470
0000000000008a50         xor        r9d, r9d
0000000000008a53         nop        dword [rax+rax]

                     loc_8a58:
0000000000008a58         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+667
0000000000008a5b         mul        rsi
0000000000008a5e         mov        rbx, rax
0000000000008a61         jo         loc_8bb0

                     loc_8a67:
0000000000008a67         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1002
0000000000008a6b         jne        loc_8a58

0000000000008a6d         jmp        loc_8a45

                     loc_8a6f:
0000000000008a6f         mov        r8d, 0x4                                    ; case 50, CODE XREF=xstrtoumax+470
0000000000008a75         xor        r9d, r9d

                     loc_8a78:
0000000000008a78         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+699
0000000000008a7b         mul        rsi
0000000000008a7e         mov        rbx, rax
0000000000008a81         jo         loc_8b83

                     loc_8a87:
0000000000008a87         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+957
0000000000008a8b         jne        loc_8a78

0000000000008a8d         jmp        loc_8a45

                     loc_8a8f:
0000000000008a8f         mov        rax, rbx                                    ; case 41, CODE XREF=xstrtoumax+470
0000000000008a92         mul        rsi
0000000000008a95         mov        rbx, rax
0000000000008a98         jno        loc_89d0

                     loc_8a9e:
0000000000008a9e         mov        ebp, 0x1                                    ; CODE XREF=xstrtoumax+562, xstrtoumax+584, xstrtoumax+817
0000000000008aa3         or         rbx, 0xffffffffffffffff
0000000000008aa7         jmp        loc_89d0
0000000000008aac         align      16

                     loc_8ab0:
0000000000008ab0         mov        r8d, 0x5                                    ; case 14, CODE XREF=xstrtoumax+470
0000000000008ab6         xor        r9d, r9d

                     loc_8ab9:
0000000000008ab9         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+764
0000000000008abc         mul        rsi
0000000000008abf         mov        rbx, rax
0000000000008ac2         jo         loc_8bbf

                     loc_8ac8:
0000000000008ac8         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1017
0000000000008acc         jne        loc_8ab9

0000000000008ace         jmp        loc_8a45

                     loc_8ad3:
0000000000008ad3         mov        r8d, 0x6                                    ; case 3, CODE XREF=xstrtoumax+470
0000000000008ad9         xor        r9d, r9d

                     loc_8adc:
0000000000008adc         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+799
0000000000008adf         mul        rsi
0000000000008ae2         mov        rbx, rax
0000000000008ae5         jo         loc_8b74

                     loc_8aeb:
0000000000008aeb         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+942
0000000000008aef         jne        loc_8adc

0000000000008af1         jmp        loc_8a45

                     loc_8af6:
0000000000008af6         mov        edx, 0x400                                  ; case 0, CODE XREF=xstrtoumax+470
0000000000008afb         mov        rax, rdx
0000000000008afe         mul        rbx
0000000000008b01         jo         loc_8a9e

0000000000008b03         shl        rbx, 0xa
0000000000008b07         jmp        loc_89d0

                     loc_8b0c:
0000000000008b0c         mov        rax, rbx                                    ; case 37, CODE XREF=xstrtoumax+470
0000000000008b0f         mul        rsi
0000000000008b12         jo         loc_8bdd

0000000000008b18         xor        r8d, r8d

                     loc_8b1b:
0000000000008b1b         mul        rsi                                         ; CODE XREF=xstrtoumax+1047
0000000000008b1e         jno        loc_89b7

0000000000008b24         mov        r8d, 0x1
0000000000008b2a         or         rax, 0xffffffffffffffff
0000000000008b2e         jmp        loc_89b7
0000000000008b33         align      8

                     loc_8b38:
0000000000008b38         xor        edi, edi                                    ; CODE XREF=xstrtoumax+405
0000000000008b3a         cmp        byte [rcx+2], 0x42
0000000000008b3e         mov        esi, 0x400
0000000000008b43         sete       dil
0000000000008b47         lea        edi, dword [rdi+rdi+1]
0000000000008b4b         jmp        loc_898a

                     loc_8b50:
0000000000008b50         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoumax+237
                        ; endp

                     loc_8b55:
0000000000008b55         lea        rcx, qword [__PRETTY_FUNCTION__.4162_a9c8]  ; argument "__function" for method j___assert_fail, "xstrtoumax", CODE XREF=xstrtoumax+33
0000000000008b5c         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
0000000000008b63         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
0000000000008b6a         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
0000000000008b6f         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_8b74:
0000000000008b74         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+789
0000000000008b7a         or         rbx, 0xffffffffffffffff
0000000000008b7e         jmp        loc_8aeb

                     loc_8b83:
0000000000008b83         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+689
0000000000008b89         or         rbx, 0xffffffffffffffff
0000000000008b8d         jmp        loc_8a87

                     loc_8b92:
0000000000008b92         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+490
0000000000008b98         or         rbx, 0xffffffffffffffff
0000000000008b9c         jmp        loc_89c3

                     loc_8ba1:
0000000000008ba1         or         rax, 0xffffffffffffffff                     ; CODE XREF=xstrtoumax+478
0000000000008ba5         mov        r8d, 0x1
0000000000008bab         jmp        loc_89b7

                     loc_8bb0:
0000000000008bb0         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+657
0000000000008bb6         or         rbx, 0xffffffffffffffff
0000000000008bba         jmp        loc_8a67

                     loc_8bbf:
0000000000008bbf         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+754
0000000000008bc5         or         rbx, 0xffffffffffffffff
0000000000008bc9         jmp        loc_8ac8

                     loc_8bce:
0000000000008bce         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+617
0000000000008bd4         or         rbx, 0xffffffffffffffff
0000000000008bd8         jmp        loc_8a3f

                     loc_8bdd:
0000000000008bdd         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+834
0000000000008be3         or         rax, 0xffffffffffffffff
0000000000008be7         jmp        loc_8b1b
0000000000008bec         align      16                                          ; End of unwind block (FDE at 0xbb54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
0000000000008bf0         push       r12                                         ; Begin of unwind block (FDE at 0xbba4), CODE XREF=main+3426, main+3797, digest_file.isra.1+187, digest_file.isra.1+280, fopen_safer+65, fopen_safer+134, close_stream+21
0000000000008bf2         push       rbp
0000000000008bf3         push       rbx
0000000000008bf4         mov        rbx, rdi
0000000000008bf7         call       j_fileno                                    ; fileno
0000000000008bfc         test       eax, eax
0000000000008bfe         mov        rdi, rbx
0000000000008c01         js         loc_8c57

0000000000008c03         call       j___freading                                ; __freading
0000000000008c08         test       eax, eax
0000000000008c0a         jne        loc_8c38

                     loc_8c0c:
0000000000008c0c         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
0000000000008c0f         call       rpl_fflush                                  ; rpl_fflush
0000000000008c14         test       eax, eax
0000000000008c16         je         loc_8c54

0000000000008c18         call       j___errno_location                          ; __errno_location
0000000000008c1d         mov        r12d, dword [rax]
0000000000008c20         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
0000000000008c23         mov        rbp, rax
0000000000008c26         call       j_fclose                                    ; fclose
0000000000008c2b         test       r12d, r12d
0000000000008c2e         jne        loc_8c60

                     loc_8c30:
0000000000008c30         pop        rbx                                         ; CODE XREF=rpl_fclose+121
0000000000008c31         pop        rbp
0000000000008c32         pop        r12
0000000000008c34         ret
                        ; endp
0000000000008c35         align      8

                     loc_8c38:
0000000000008c38         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
0000000000008c3b         call       j_fileno                                    ; fileno
0000000000008c40         xor        esi, esi                                    ; argument "__offset" for method j_lseek
0000000000008c42         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000008c47         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000008c49         call       j_lseek                                     ; lseek
0000000000008c4e         cmp        rax, 0xffffffffffffffff
0000000000008c52         jne        loc_8c0c

                     loc_8c54:
0000000000008c54         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_8c57:
0000000000008c57         pop        rbx                                         ; CODE XREF=rpl_fclose+17
0000000000008c58         pop        rbp
0000000000008c59         pop        r12
0000000000008c5b         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_8c60:
0000000000008c60         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
0000000000008c64         mov        eax, 0xffffffff
0000000000008c69         jmp        loc_8c30
0000000000008c6b         align      16                                          ; End of unwind block (FDE at 0xbba4)

                     rpl_fcntl:
0000000000008c70         push       r12                                         ; Begin of unwind block (FDE at 0xbbdc), CODE XREF=dup_safer+9
0000000000008c72         push       rbp
0000000000008c73         mov        ebp, edi
0000000000008c75         push       rbx
0000000000008c76         sub        rsp, 0x50
0000000000008c7a         mov        rax, qword [fs:0x28]
0000000000008c83         mov        qword [rsp+0x68+var_50], rax
0000000000008c88         xor        eax, eax
0000000000008c8a         lea        rax, qword [rsp+0x68+arg_0]
0000000000008c8f         test       esi, esi
0000000000008c91         mov        qword [rsp+0x68+var_38], rdx
0000000000008c96         mov        qword [rsp+0x68+var_30], rcx
0000000000008c9b         mov        qword [rsp+0x68+var_28], r8
0000000000008ca0         mov        qword [rsp+0x68+var_60], rax
0000000000008ca5         lea        rax, qword [rsp+0x68+var_48]
0000000000008caa         mov        qword [rsp+0x68+var_20], r9
0000000000008caf         mov        dword [rsp+0x68+var_68], 0x10
0000000000008cb6         mov        qword [rsp+0x68+var_58], rax
0000000000008cbb         je         loc_8ec2

0000000000008cc1         cmp        esi, 0x406
0000000000008cc7         jne        loc_8d10

0000000000008cc9         mov        rax, qword [rsp+0x68+var_58]
0000000000008cce         cmp        dword [have_dupfd_cloexec.3326], 0x0        ; have_dupfd_cloexec.3326
0000000000008cd5         mov        dword [rsp+0x68+var_68], 0x18
0000000000008cdc         mov        r12d, dword [rax+0x10]
0000000000008ce0         mov        edx, r12d
0000000000008ce3         js         loc_8e13

0000000000008ce9         xor        eax, eax
0000000000008ceb         mov        esi, 0x406                                  ; argument "__cmd" for method j_fcntl
0000000000008cf0         call       j_fcntl                                     ; fcntl
0000000000008cf5         test       eax, eax
0000000000008cf7         mov        ebx, eax
0000000000008cf9         js         loc_8e88

                     loc_8cff:
0000000000008cff         mov        dword [have_dupfd_cloexec.3326], 0x1        ; have_dupfd_cloexec.3326, CODE XREF=rpl_fcntl+544
0000000000008d09         jmp        loc_8d50
0000000000008d0b         align      16

                     loc_8d10:
0000000000008d10         cmp        esi, 0xb                                    ; CODE XREF=rpl_fcntl+87
0000000000008d13         je         loc_8d40

0000000000008d15         jg         loc_8d70

0000000000008d17         cmp        esi, 0x4
0000000000008d1a         je         loc_8df0

0000000000008d20         jg         loc_8de0

0000000000008d26         cmp        esi, 0x2
0000000000008d29         je         loc_8df0

0000000000008d2f         jg         loc_8d40

0000000000008d31         cmp        esi, 0x1
0000000000008d34         jne        loc_8d98

0000000000008d36         nop        word [cs:rax+rax]

                     loc_8d40:
0000000000008d40         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl, CODE XREF=rpl_fcntl+163, rpl_fcntl+191, rpl_fcntl+278, rpl_fcntl+344, rpl_fcntl+358, rpl_fcntl+371
0000000000008d42         xor        eax, eax
0000000000008d44         call       j_fcntl                                     ; fcntl
0000000000008d49         mov        ebx, eax
0000000000008d4b         nop        dword [rax+rax]

                     loc_8d50:
0000000000008d50         mov        rcx, qword [rsp+0x68+var_50]                ; CODE XREF=rpl_fcntl+153, rpl_fcntl+327, rpl_fcntl+414, rpl_fcntl+432, rpl_fcntl+445, rpl_fcntl+491, rpl_fcntl+524, rpl_fcntl+568, rpl_fcntl+613
0000000000008d55         xor        rcx, qword [fs:0x28]
0000000000008d5e         mov        eax, ebx
0000000000008d60         jne        loc_8ebd

0000000000008d66         add        rsp, 0x50
0000000000008d6a         pop        rbx
0000000000008d6b         pop        rbp
0000000000008d6c         pop        r12
0000000000008d6e         ret
                        ; endp
0000000000008d6f         align      16

                     loc_8d70:
0000000000008d70         cmp        esi, 0x407                                  ; CODE XREF=rpl_fcntl+165
0000000000008d76         jg         loc_8dc0

0000000000008d78         cmp        esi, 0x406
0000000000008d7e         jge        loc_8df0

0000000000008d80         cmp        esi, 0x401
0000000000008d86         je         loc_8d40

0000000000008d88         cmp        esi, 0x402
0000000000008d8e         je         loc_8df0

0000000000008d90         cmp        esi, 0x400
0000000000008d96         je         loc_8df0

                     loc_8d98:
0000000000008d98         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+196, rpl_fcntl+356, rpl_fcntl+382
0000000000008d9b         cmp        eax, 0x2f
0000000000008d9e         ja         loc_8eda

0000000000008da4         add        rax, qword [rsp+0x68+var_58]

                     loc_8da9:
0000000000008da9         mov        rdx, qword [rax]                            ; CODE XREF=rpl_fcntl+623
0000000000008dac         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
0000000000008dae         xor        eax, eax
0000000000008db0         call       j_fcntl                                     ; fcntl
0000000000008db5         mov        ebx, eax
0000000000008db7         jmp        loc_8d50
0000000000008db9         align      64

                     loc_8dc0:
0000000000008dc0         cmp        esi, 0x409                                  ; CODE XREF=rpl_fcntl+262
0000000000008dc6         je         loc_8df0

0000000000008dc8         jl         loc_8d40

0000000000008dce         cmp        esi, 0x40a
0000000000008dd4         jne        loc_8d98

0000000000008dd6         jmp        loc_8d40
0000000000008ddb         align      32

                     loc_8de0:
0000000000008de0         cmp        esi, 0x9                                    ; CODE XREF=rpl_fcntl+176
0000000000008de3         je         loc_8d40

0000000000008de9         jg         loc_8df0

0000000000008deb         cmp        esi, 0x8
0000000000008dee         jne        loc_8d98

                     loc_8df0:
0000000000008df0         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+170, rpl_fcntl+185, rpl_fcntl+270, rpl_fcntl+286, rpl_fcntl+294, rpl_fcntl+342, rpl_fcntl+377
0000000000008df3         cmp        eax, 0x2f
0000000000008df6         ja         loc_8ee4

0000000000008dfc         add        rax, qword [rsp+0x68+var_58]

                     loc_8e01:
0000000000008e01         mov        edx, dword [rax]                            ; CODE XREF=rpl_fcntl+633
0000000000008e03         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
0000000000008e05         xor        eax, eax
0000000000008e07         call       j_fcntl                                     ; fcntl
0000000000008e0c         mov        ebx, eax
0000000000008e0e         jmp        loc_8d50

                     loc_8e13:
0000000000008e13         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl, CODE XREF=rpl_fcntl+115
0000000000008e15         xor        eax, eax
0000000000008e17         call       j_fcntl                                     ; fcntl
0000000000008e1c         test       eax, eax
0000000000008e1e         mov        ebx, eax
0000000000008e20         js         loc_8d50

0000000000008e26         cmp        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
0000000000008e2d         jne        loc_8d50

                     loc_8e33:
0000000000008e33         xor        eax, eax                                    ; CODE XREF=rpl_fcntl+584
0000000000008e35         mov        esi, 0x1                                    ; argument "__cmd" for method j_fcntl
0000000000008e3a         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
0000000000008e3c         call       j_fcntl                                     ; fcntl
0000000000008e41         test       eax, eax
0000000000008e43         js         loc_8e61

0000000000008e45         or         eax, 0x1
0000000000008e48         mov        esi, 0x2                                    ; argument "__cmd" for method j_fcntl
0000000000008e4d         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
0000000000008e4f         mov        edx, eax
0000000000008e51         xor        eax, eax
0000000000008e53         call       j_fcntl                                     ; fcntl
0000000000008e58         cmp        eax, 0xffffffff
0000000000008e5b         jne        loc_8d50

                     loc_8e61:
0000000000008e61         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+467
0000000000008e66         mov        r12d, dword [rax]
0000000000008e69         mov        rbp, rax
0000000000008e6c         mov        edi, ebx                                    ; argument "__fd" for method j_close
0000000000008e6e         call       j_close                                     ; close
0000000000008e73         mov        ebx, 0xffffffff
0000000000008e78         mov        dword [rbp], r12d
0000000000008e7c         jmp        loc_8d50
0000000000008e81         align      8

                     loc_8e88:
0000000000008e88         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+137
0000000000008e8d         cmp        dword [rax], 0x16
0000000000008e90         jne        loc_8cff

0000000000008e96         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
0000000000008e98         xor        eax, eax
0000000000008e9a         mov        edx, r12d
0000000000008e9d         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
0000000000008e9f         call       j_fcntl                                     ; fcntl
0000000000008ea4         test       eax, eax
0000000000008ea6         mov        ebx, eax
0000000000008ea8         js         loc_8d50

0000000000008eae         mov        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
0000000000008eb8         jmp        loc_8e33

                     loc_8ebd:
0000000000008ebd         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_fcntl+240
                        ; endp

                     loc_8ec2:
0000000000008ec2         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=rpl_fcntl+75
0000000000008ec7         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
0000000000008ec9         mov        edx, dword [rax+0x10]
0000000000008ecc         xor        eax, eax
0000000000008ece         call       j_fcntl                                     ; fcntl
0000000000008ed3         mov        ebx, eax
0000000000008ed5         jmp        loc_8d50

                     loc_8eda:
0000000000008eda         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+302
0000000000008edf         jmp        loc_8da9

                     loc_8ee4:
0000000000008ee4         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+390
0000000000008ee9         jmp        loc_8e01
0000000000008eee         align      16                                          ; End of unwind block (FDE at 0xbbdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
0000000000008ef0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xbc14), CODE XREF=rpl_fclose+31
0000000000008ef3         push       rbx
0000000000008ef4         mov        rbx, rdi
0000000000008ef7         je         loc_8f0a

0000000000008ef9         call       j___freading                                ; __freading
0000000000008efe         test       eax, eax
0000000000008f00         je         loc_8f0a

0000000000008f02         test       dword [rbx], 0x100
0000000000008f08         jne        loc_8f18

                     loc_8f0a:
0000000000008f0a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
0000000000008f0d         pop        rbx
0000000000008f0e         jmp        j_fflush                                    ; fflush
                        ; endp
0000000000008f13         align      8

                     loc_8f18:
0000000000008f18         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
0000000000008f1b         mov        edx, 0x1
0000000000008f20         xor        esi, esi
0000000000008f22         call       rpl_fseeko                                  ; rpl_fseeko
0000000000008f27         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
0000000000008f2a         pop        rbx
0000000000008f2b         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
0000000000008f30         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0xbc14), Begin of unwind block (FDE at 0xbc34), CODE XREF=rpl_fflush+50
0000000000008f34         cmp        qword [rdi+0x10], rax
0000000000008f38         je         loc_8f40

                     j_j_fseeko:        // fseeko
0000000000008f3a         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
0000000000008f3f         align      64

                     loc_8f40:
0000000000008f40         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
0000000000008f44         cmp        qword [rdi+0x28], rax
0000000000008f48         jne        j_j_fseeko                                  ; fseeko

0000000000008f4a         cmp        qword [rdi+0x48], 0x0
0000000000008f4f         jne        j_j_fseeko                                  ; fseeko

0000000000008f51         push       r12
0000000000008f53         push       rbp
0000000000008f54         mov        r12d, edx
0000000000008f57         push       rbx
0000000000008f58         mov        rbp, rsi
0000000000008f5b         mov        rbx, rdi
0000000000008f5e         call       j_fileno                                    ; fileno
0000000000008f63         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
0000000000008f66         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
0000000000008f69         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000008f6b         call       j_lseek                                     ; lseek
0000000000008f70         cmp        rax, 0xffffffffffffffff
0000000000008f74         je         loc_8f82

0000000000008f76         and        dword [rbx], 0xffffffef
0000000000008f79         mov        qword [rbx+0x90], rax
0000000000008f80         xor        eax, eax

                     loc_8f82:
0000000000008f82         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
0000000000008f83         pop        rbp
0000000000008f84         pop        r12
0000000000008f86         ret
                        ; endp
0000000000008f87         align      16                                          ; End of unwind block (FDE at 0xbc34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
0000000000008f90         push       r13                                         ; Begin of unwind block (FDE at 0xbc64), CODE XREF=sub_6560+534
0000000000008f92         push       r12
0000000000008f94         mov        r13, rsi
0000000000008f97         push       rbp
0000000000008f98         push       rbx
0000000000008f99         mov        rbx, rdi
0000000000008f9c         mov        r12, rdx
0000000000008f9f         sub        rsp, 0x18
0000000000008fa3         mov        rax, qword [fs:0x28]
0000000000008fac         mov        qword [rsp+0x38+var_30], rax
0000000000008fb1         xor        eax, eax
0000000000008fb3         lea        rax, qword [rsp+0x38+var_34]
0000000000008fb8         test       rdi, rdi
0000000000008fbb         cmove      rbx, rax
0000000000008fbf         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
0000000000008fc2         call       j_mbrtowc                                   ; mbrtowc
0000000000008fc7         cmp        rax, 0xfffffffffffffffd
0000000000008fcb         mov        rbp, rax
0000000000008fce         jbe        loc_8ff0

0000000000008fd0         test       r12, r12
0000000000008fd3         je         loc_8ff0

0000000000008fd5         xor        edi, edi
0000000000008fd7         call       hard_locale                                 ; hard_locale
0000000000008fdc         test       al, al
0000000000008fde         jne        loc_8ff0

0000000000008fe0         movzx      eax, byte [r13]
0000000000008fe5         mov        ebp, 0x1
0000000000008fea         mov        dword [rbx], eax
0000000000008fec         nop        dword [rax]

                     loc_8ff0:
0000000000008ff0         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
0000000000008ff5         xor        rdx, qword [fs:0x28]
0000000000008ffe         mov        rax, rbp
0000000000009001         jne        loc_900e

0000000000009003         add        rsp, 0x18
0000000000009007         pop        rbx
0000000000009008         pop        rbp
0000000000009009         pop        r12
000000000000900b         pop        r13
000000000000900d         ret
                        ; endp

                     loc_900e:
000000000000900e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
0000000000009013         align      32                                          ; End of unwind block (FDE at 0xbc64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
0000000000009020         push       r12                                         ; Begin of unwind block (FDE at 0xbca4), CODE XREF=close_stdout+13, close_stdout+51
0000000000009022         push       rbp
0000000000009023         mov        rbp, rdi
0000000000009026         push       rbx
0000000000009027         call       j___fpending                                ; __fpending
000000000000902c         mov        ebx, dword [rbp]
000000000000902f         mov        rdi, rbp
0000000000009032         mov        r12, rax
0000000000009035         call       rpl_fclose                                  ; rpl_fclose
000000000000903a         and        ebx, 0x20
000000000000903d         test       ebx, ebx
000000000000903f         jne        loc_9058

0000000000009041         test       eax, eax
0000000000009043         je         loc_904f

0000000000009045         test       r12, r12
0000000000009048         mov        eax, 0xffffffff
000000000000904d         je         loc_9088

                     loc_904f:
000000000000904f         pop        rbx                                         ; CODE XREF=close_stream+35
0000000000009050         pop        rbp
0000000000009051         pop        r12
0000000000009053         ret
                        ; endp
0000000000009054         align      8

                     loc_9058:
0000000000009058         test       eax, eax                                    ; CODE XREF=close_stream+31
000000000000905a         jne        loc_9078

000000000000905c         call       j___errno_location                          ; __errno_location
0000000000009061         mov        dword [rax], 0x0
0000000000009067         mov        eax, 0xffffffff
000000000000906c         pop        rbx
000000000000906d         pop        rbp
000000000000906e         pop        r12
0000000000009070         ret
                        ; endp
0000000000009071         align      8

                     loc_9078:
0000000000009078         pop        rbx                                         ; CODE XREF=close_stream+58
0000000000009079         mov        eax, 0xffffffff
000000000000907e         pop        rbp
000000000000907f         pop        r12
0000000000009081         ret
                        ; endp
0000000000009082         align      8

                     loc_9088:
0000000000009088         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
000000000000908d         cmp        dword [rax], 0x9
0000000000009090         pop        rbx
0000000000009091         pop        rbp
0000000000009092         pop        r12
0000000000009094         setne      al
0000000000009097         movzx      eax, al
000000000000909a         neg        eax
000000000000909c         ret
                        ; endp
000000000000909d         align      32                                          ; End of unwind block (FDE at 0xbca4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
00000000000090a0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xbcf4), CODE XREF=rpl_mbrtowc+71
00000000000090a4         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
00000000000090a6         call       j_setlocale                                 ; setlocale
00000000000090ab         mov        rdx, rax
00000000000090ae         mov        eax, 0x1
00000000000090b3         test       rdx, rdx
00000000000090b6         je         loc_90d5

00000000000090b8         lea        rdi, qword [__PRETTY_FUNCTION__.4162_a9c8+11] ; 0xa9d3
00000000000090bf         mov        ecx, 0x2
00000000000090c4         mov        rsi, rdx
00000000000090c7         rep  cmpsb byte [rsi], byte [rdi]
00000000000090c9         seta       cl
00000000000090cc         sbb        cl, 0x0
00000000000090cf         xor        eax, eax
00000000000090d1         test       cl, cl
00000000000090d3         jne        loc_90e0

                     loc_90d5:
00000000000090d5         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
00000000000090d9         ret
                        ; endp
00000000000090da         align      32

                     loc_90e0:
00000000000090e0         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
00000000000090e7         mov        ecx, 0x6
00000000000090ec         mov        rsi, rdx
00000000000090ef         rep  cmpsb byte [rsi], byte [rdi]
00000000000090f1         seta       al
00000000000090f4         sbb        al, 0x0
00000000000090f6         test       al, al
00000000000090f8         setne      al
00000000000090fb         add        rsp, 0x8
00000000000090ff         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
0000000000009100         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0xbcf4), Begin of unwind block (FDE at 0xbd14), CODE XREF=gettext_quote.part.1+11
0000000000009104         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
0000000000009109         call       j_nl_langinfo                               ; nl_langinfo
000000000000910e         test       rax, rax
0000000000009111         je         loc_9130

0000000000009113         cmp        byte [rax], 0x0
0000000000009116         lea        rdx, qword [aAscii]                         ; "ASCII"
000000000000911d         cmove      rax, rdx
0000000000009121         add        rsp, 0x8
0000000000009125         ret
                        ; endp
0000000000009126         align      16

                     loc_9130:
0000000000009130         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
0000000000009137         add        rsp, 0x8
000000000000913b         ret
                        ; endp
000000000000913c         align      64                                          ; End of unwind block (FDE at 0xbd14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
0000000000009140         push       r15                                         ; Begin of unwind block (FDE at 0xbd34), DATA XREF=_start+22
0000000000009142         push       r14
0000000000009144         mov        r15, rdx
0000000000009147         push       r13
0000000000009149         push       r12
000000000000914b         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
0000000000009152         push       rbp
0000000000009153         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000000915a         push       rbx
000000000000915b         mov        r13d, edi
000000000000915e         mov        r14, rsi
0000000000009161         sub        rbp, r12
0000000000009164         sub        rsp, 0x8
0000000000009168         sar        rbp, 0x3
000000000000916c         call       _init                                       ; _init
0000000000009171         test       rbp, rbp
0000000000009174         je         loc_9196

0000000000009176         xor        ebx, ebx
0000000000009178         nop        dword [rax+rax]

                     loc_9180:
0000000000009180         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
0000000000009183         mov        rsi, r14
0000000000009186         mov        edi, r13d
0000000000009189         call       qword [r12+rbx*8]
000000000000918d         add        rbx, 0x1
0000000000009191         cmp        rbp, rbx
0000000000009194         jne        loc_9180

                     loc_9196:
0000000000009196         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
000000000000919a         pop        rbx
000000000000919b         pop        rbp
000000000000919c         pop        r12
000000000000919e         pop        r13
00000000000091a0         pop        r14
00000000000091a2         pop        r15
00000000000091a4         ret
                        ; endp
00000000000091a5         align      16                                          ; End of unwind block (FDE at 0xbd34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
00000000000091b0         ret                                                    ; Begin of unwind block (FDE at 0xbd7c), DATA XREF=_start+15
                        ; endp
00000000000091b2         align      64                                          ; End of unwind block (FDE at 0xbd7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
00000000000091c0         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0xbd94), __dso_handle, CODE XREF=main+120
00000000000091c7         xor        esi, esi
00000000000091c9         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
00000000000091ce         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xbd94)
00000000000091cf         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0x91d0; 0x91d9[ (9 bytes)
        ; File offset : [37328; 37337[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
00000000000091d0         sub        rsp, 0x8
00000000000091d4         add        rsp, 0x8
00000000000091d8         ret
                        ; endp
00000000000091d9         db  0x00 ; '.'
00000000000091da         db  0x00 ; '.'
00000000000091db         db  0x00 ; '.'
00000000000091dc         db  0x00 ; '.'
00000000000091dd         db  0x00 ; '.'
00000000000091de         db  0x00 ; '.'
00000000000091df         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0x91e0; 0xa9e1[ (6145 bytes)
        ; File offset : [37344; 43489[ (6145 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
00000000000091e0         db  0x01 ; '.'
00000000000091e1         db  0x00 ; '.'
00000000000091e2         db  0x02 ; '.'
00000000000091e3         db  0x00 ; '.'
00000000000091e4         db  0x5c ; '\'                                         ; DATA XREF=print_filename+21
00000000000091e5         db  0x6e ; 'n'
00000000000091e6         db  0x00 ; '.'
00000000000091e7         db  0x5c ; '\'                                         ; DATA XREF=print_filename+40
00000000000091e8         db  0x5c ; '\'
00000000000091e9         db  0x00 ; '.'
                     aB2sum:
00000000000091ea         db         "b2sum", 0                                  ; DATA XREF=main+412, usage+507, usage+860, usage+1044, usage+1063, usage+1097
                     aBlake2:
00000000000091f0         db         "BLAKE2", 0                                 ; DATA XREF=main+1363, main+2263, main+3483, usage+107, usage+231
                     aRfc7693:
00000000000091f7         db         "RFC 7693", 0                               ; DATA XREF=usage+538
0000000000009200         db  0x5b ; '['                                         ; DATA XREF=usage+560
0000000000009201         db  0x00 ; '.'
                     aTestInvocation:
0000000000009202         db         "test invocation", 0                        ; DATA XREF=usage+599
                     aMulticallInvoc:
0000000000009212         db         "Multi-call invocation", 0                  ; DATA XREF=usage+647
                     aSha224sum:
0000000000009228         db         "sha224sum", 0                              ; DATA XREF=usage+664
                     aSha2Utilities:
0000000000009232         db         "sha2 utilities", 0                         ; DATA XREF=usage+676
                     aSha256sum:
0000000000009241         db         "sha256sum", 0                              ; DATA XREF=usage+567
                     aSha384sum:
000000000000924b         db         "sha384sum", 0                              ; DATA XREF=usage+611
                     aSha512sum:
0000000000009255         db         "sha512sum", 0                              ; DATA XREF=usage+635
                     aNsOnlineHelpSn:
000000000000925f         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+746
0000000000009276         db  0x47 ; 'G'                                         ; DATA XREF=main+405, usage+774, usage+967, emit_bug_reporting_address+68
0000000000009277         db  0x4e ; 'N'
0000000000009278         db  0x55 ; 'U'
0000000000009279         db  0x20 ; ' '
                     aCoreutils:
000000000000927a         db         "coreutils", 0                              ; DATA XREF=main+89, main+101, usage+623
0000000000009284         db  0x65 ; 'e'                                         ; DATA XREF=usage+813, usage+1006
0000000000009285         db  0x6e ; 'n'
0000000000009286         db  0x5f ; '_'
0000000000009287         db  0x00 ; '.'
                     aFullDocumentat:
0000000000009288         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+841, usage+1030
                     aUsrlocalsharel:
00000000000092a3         db         "/usr/local/share/locale", 0                ; DATA XREF=main+82
                     aInvalidLength:
00000000000092bb         db         "invalid length", 0                         ; DATA XREF=main+576
                     aInvalidLengthS:
00000000000092ca         db         "invalid length: %s", 0                     ; DATA XREF=main+659, main+4965
                     aLengthIsNotAMu:
00000000000092dd         db         "length is not a multiple of 8", 0          ; DATA XREF=main+698
                     aSamuelNeves:
00000000000092fb         db         "Samuel Neves", 0                           ; DATA XREF=main+391
                     aPadraigBrady:
0000000000009308         db         "Padraig Brady", 0                          ; DATA XREF=main+398
                     aLbctwz:
0000000000009316         db         "l:bctwz", 0                                ; DATA XREF=main+167
                     aStandardInput:
000000000000931e         db         "standard input", 0                         ; DATA XREF=main+1070, main+3811
                     aSTooManyChecks:
000000000000932d         db         "%s: too many checksum lines", 0            ; DATA XREF=main+1673
                     aFailedOpenOrRe:
0000000000009349         db         "FAILED open or read", 0                    ; DATA XREF=main+4250
                     aFailed:
000000000000935d         db         "FAILED", 0                                 ; DATA XREF=main+4647
0000000000009364         db  0x4f ; 'O'                                         ; DATA XREF=main+4798
0000000000009365         db  0x4b ; 'K'
0000000000009366         db  0x00 ; '.'
                     aSReadError:
0000000000009367         db         "%s: read error", 0                         ; DATA XREF=main+3359
                     aSNoFileWasVeri:
0000000000009376         db         "%s: no file was verified", 0               ; DATA XREF=main+4318
000000000000938f         db  0x2d ; '-'                                         ; DATA XREF=main+4820
0000000000009390         db  0x25 ; '%'
0000000000009391         db  0x6c ; 'l'
0000000000009392         db  0x75 ; 'u'
0000000000009393         db  0x00 ; '.'
0000000000009394         db  0x20 ; ' '                                         ; DATA XREF=main+3573
0000000000009395         db  0x28 ; '('
0000000000009396         db  0x00 ; '.'
0000000000009397         db  0x29 ; ')'                                         ; DATA XREF=main+3614
0000000000009398         db  0x20 ; ' '
0000000000009399         db  0x3d ; '='
000000000000939a         db  0x20 ; ' '
000000000000939b         db  0x00 ; '.'
000000000000939c         db  0x25 ; '%'                                         ; DATA XREF=main+3149
000000000000939d         db  0x30 ; '0'
000000000000939e         db  0x32 ; '2'
000000000000939f         db  0x78 ; 'x'
00000000000093a0         db  0x00 ; '.'
                     aBinary:
00000000000093a1         db         "binary", 0
                     aCheck:
00000000000093a8         db         "check", 0
                     aIgnoremissing:
00000000000093ae         db         "ignore-missing", 0
                     aQuiet:
00000000000093bd         db         "quiet", 0
                     aStatus:
00000000000093c3         db         "status", 0
                     aText:
00000000000093ca         db         "text", 0
                     aWarn:
00000000000093cf         db         "warn", 0
                     aStrict:
00000000000093d4         db         "strict", 0
00000000000093db         db  0x74 ; 't'
00000000000093dc         db  0x61 ; 'a'
00000000000093dd         db  0x67 ; 'g'
00000000000093de         db  0x00 ; '.'
                     aZero:
00000000000093df         db         "zero", 0
                     aHelp:
00000000000093e4         db         "help", 0
                     aVersion:
00000000000093e9         db         "version", 0
                     aBlake2b_93f1:        // aBlake2b
00000000000093f1         db         "BLAKE2b", 0
                     aBlake2b:
00000000000093f9         db         "blake2b", 0
0000000000009401         align      8
                     aTrySHelpForMor:
0000000000009408         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
000000000000942f         align      16
                     aUsageSOptionFi:
0000000000009430         db         "Usage: %s [OPTION]... [FILE]...\nPrint or check %s (%d-bit) checksums.\n", 0 ; DATA XREF=usage+93
0000000000009477         align      8
                     aNwithNoFileOrW:
0000000000009478         db         "\nWith no FILE, or when FILE is -, read standard input.\n", 0 ; DATA XREF=usage+145
                     aNBBinaryReadIn:
00000000000094b0         db         "\n  -b, --binary         read in binary mode\n", 0 ; DATA XREF=usage+182
00000000000094dd         align      32
                     aCCheckReadSSum:
00000000000094e0         db         "  -c, --check          read %s sums from the FILEs and check them\n", 0 ; DATA XREF=usage+212
0000000000009523         align      8
                     aLLengthDigestL:
0000000000009528         db         "  -l, --length         digest length in bits; must not exceed the maximum for\n                       the blake2 algorithm and must be a multiple of 8\n", 0 ; DATA XREF=usage+260
00000000000095bf         align      64
                     aTagCreateABsds:
00000000000095c0         db         "      --tag            create a BSD-style checksum\n", 0 ; DATA XREF=usage+297
00000000000095f4         align      8
                     aTTextReadInTex:
00000000000095f8         db         "  -t, --text           read in text mode (default)\n", 0 ; DATA XREF=usage+334
000000000000962c         align      16
                     aZZeroEndEachOu:
0000000000009630         db         "  -z, --zero           end each output line with NUL, not newline,\n                       and disable file name escaping\n", 0 ; DATA XREF=usage+371
00000000000096aa         align      16
                     aNtheFollowingF:
00000000000096b0         db         "\nThe following five options are useful only when verifying checksums:\n      --ignore-missing  don't fail or report status for missing files\n      --quiet          don't print OK for each successfully verified file\n      --status         don't output anythi" ; DATA XREF=usage+408
00000000000097b0         db         "ng, status code shows success\n      --strict         exit non-zero for improperly formatted checksum lines\n  -w, --warn           warn about improperly formatted checksum lines\n\n", 0
0000000000009863         align      8
                     aHelpDisplayThi:
0000000000009868         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+445
0000000000009895         align      8
                     aVersionOutputV:
0000000000009898         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+482
00000000000098ce         align      16
                     aNtheSumsAreCom:
00000000000098d0         db         "\nThe sums are computed as described in %s.  When checking, the input\nshould be a former output of this program.  The default mode is to print a\nline with checksum, a space, a character indicating input mode ('*' for binary,\n' ' for text or where binary is " ; DATA XREF=usage+519
00000000000099d0         db         "insignificant), and name for each FILE.\n", 0
00000000000099f9         align      512
                     aHttpswwwgnuorg:
0000000000009a00         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+767, usage+867, usage+960, usage+1070, emit_bug_reporting_address+61
                     aReportAnyTrans:
0000000000009a28         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+1111
0000000000009a6f         align      16
                     aOrAvailableLoc:
0000000000009a70         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+910
0000000000009aa3         align      8
                     aMaximumDigestL:
0000000000009aa8         db         "maximum digest length for %s is %lu bits", 0 ; DATA XREF=main+5026
0000000000009ad1         align      8
                     aTagDoesNotSupp:
0000000000009ad8         db         "--tag does not support --text mode", 0     ; DATA XREF=main+5183
0000000000009afb         align      256
                     aTheZeroOptionI:
0000000000009b00         db         "the --zero option is not supported when verifying checksums", 0 ; DATA XREF=main+851
0000000000009b3c         align      64
                     aTheTagOptionIs:
0000000000009b40         db         "the --tag option is meaningless when verifying checksums", 0 ; DATA XREF=main+1730
0000000000009b79         align      128
                     aTheBinaryAndTe:
0000000000009b80         db         "the --binary and --text options are meaningless when verifying checksums", 0 ; DATA XREF=main+1751
0000000000009bc9         align      16
                     aTheIgnoremissi:
0000000000009bd0         db         "the --ignore-missing option is meaningful only when verifying checksums", 0 ; DATA XREF=main+5166
                     aTheStatusOptio:
0000000000009c18         db         "the --status option is meaningful only when verifying checksums", 0 ; DATA XREF=main+5149
                     aTheWarnOptionI:
0000000000009c58         db         "the --warn option is meaningful only when verifying checksums", 0 ; DATA XREF=main+911
0000000000009c96         align      8
                     aTheQuietOption:
0000000000009c98         db         "the --quiet option is meaningful only when verifying checksums", 0 ; DATA XREF=main+1851
0000000000009cd7         align      8
                     aTheStrictOptio:
0000000000009cd8         db         "the --strict option is meaningful only when verifying checksums", 0 ; DATA XREF=main+1881
                     aSLuImproperlyF:
0000000000009d18         db         "%s: %lu: improperly formatted %s checksum line", 0 ; DATA XREF=main+2241
0000000000009d47         align      8
                     aSNoProperlyFor:
0000000000009d48         db         "%s: no properly formatted %s checksum lines found", 0 ; DATA XREF=main+3461
0000000000009d7a         align      128
                     aWarningLuLines:
0000000000009d80         db         "WARNING: %lu lines are improperly formatted", 0 ; DATA XREF=main+2375
0000000000009dac         align      16
                     aWarningLuLineI:
0000000000009db0         db         "WARNING: %lu line is improperly formatted", 0 ; DATA XREF=main+2382
0000000000009dda         align      32
                     aWarningLuListe:
0000000000009de0         db         "WARNING: %lu listed files could not be read", 0 ; DATA XREF=main+2435
0000000000009e0c         align      16
                     aWarningLuListe_9e10:        // aWarningLuListe
0000000000009e10         db         "WARNING: %lu listed file could not be read", 0 ; DATA XREF=main+2442
0000000000009e3b         align      64
                     aWarningLuCompu:
0000000000009e40         db         "WARNING: %lu computed checksums did NOT match", 0 ; DATA XREF=main+2495
0000000000009e6e         align      16
                     aWarningLuCompu_9e70:        // aWarningLuCompu
0000000000009e70         db         "WARNING: %lu computed checksum did NOT match", 0 ; DATA XREF=main+2502
0000000000009e9d         align      32
                     bin2hex.7139:
0000000000009ea0         db         "0123456789abcdef8.31", 0                   ; DATA XREF=main+4575
                     aInvalidArgumen:
0000000000009eb5         db         "invalid argument %s for %s", 0             ; DATA XREF=argmatch_invalid+96
                     aAmbiguousArgum:
0000000000009ed0         db         "ambiguous argument %s for %s", 0           ; DATA XREF=argmatch_invalid+21
                     aValidArguments:
0000000000009eed         db         "Valid arguments are:", 0                   ; DATA XREF=argmatch_valid+18
                     aNS:
0000000000009f02         db         "\n  - %s", 0                               ; DATA XREF=argmatch_valid+102
0000000000009f0a         db  0x2c ; ','                                         ; DATA XREF=argmatch_valid+181
0000000000009f0b         db  0x20 ; ' '
0000000000009f0c         db  0x25 ; '%'                                         ; DATA XREF=main+2936, digest_file.isra.1+156, digest_file.isra.1+321, digest_file.isra.1+395, close_stdout+143, xalloc_die+29
0000000000009f0d         db  0x73 ; 's'
0000000000009f0e         db  0x00 ; '.'
                     aWriteError:
0000000000009f0f         db         "write error", 0                            ; DATA XREF=close_stdout+67
                     aSS:
0000000000009f1b         db         "%s: %s", 0                                 ; DATA XREF=close_stdout+108, xnumtoumax+125
0000000000009f22         align      8
                     aANullArgv0WasP:
0000000000009f28         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
0000000000009f60         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
0000000000009f68         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
0000000000009f69         db  0x74 ; 't'
0000000000009f6a         db  0x2d ; '-'                                         ; DATA XREF=main+960, main+1046, main+4057, digest_file.isra.1+14
0000000000009f6b         db  0x00 ; '.'
0000000000009f6c         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
0000000000009f6d         db  0x80 ; '.'
0000000000009f6e         db  0x98 ; '.'
0000000000009f6f         db  0x00 ; '.'
0000000000009f70         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
0000000000009f71         db  0x80 ; '.'
0000000000009f72         db  0x99 ; '.'
0000000000009f73         db  0x00 ; '.'
0000000000009f74         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
0000000000009f75         db  0x07 ; '.'
0000000000009f76         db  0x65 ; 'e'
0000000000009f77         db  0x00 ; '.'
0000000000009f78         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
0000000000009f79         db  0xaf ; '.'
0000000000009f7a         db  0x00 ; '.'
0000000000009f7b         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_6560+1451, sub_6560+1493, sub_6560+2429
0000000000009f7c         db  0x00 ; '.'
0000000000009f7d         db  0x27 ; '''                                         ; DATA XREF=gettext_quote.part.1+39, quotearg_buffer_restyled+179, sub_6560+132, sub_6560+1338, sub_6560+1670, sub_6560+1697, sub_6560+2352
0000000000009f7e         db  0x00 ; '.'
0000000000009f7f         db  0x60 ; '`'                                         ; DATA XREF=sub_6560+1627, sub_6560+1654
0000000000009f80         db  0x00 ; '.'
                     aLiteral:
0000000000009f81         db         "literal", 0
                     aShell:
0000000000009f89         db         "shell", 0
                     aShellalways:
0000000000009f8f         db         "shell-always", 0
0000000000009f9c         db  0x73 ; 's'
0000000000009f9d         db  0x68 ; 'h'
0000000000009f9e         db  0x65 ; 'e'
0000000000009f9f         db  0x6c ; 'l'
0000000000009fa0         db  0x6c ; 'l'
0000000000009fa1         db  0x2d ; '-'
                     aEscape:
0000000000009fa2         db         "escape", 0
                     aShellescapealw:
0000000000009fa9         db         "shell-escape-always", 0
0000000000009fbd         db  0x63 ; 'c'
0000000000009fbe         db  0x00 ; '.'
                     aCmaybe:
0000000000009fbf         db         "c-maybe", 0
                     aClocale:
0000000000009fc7         db         "clocale", 0
0000000000009fcf         align      32
                     switch_table_9fe0:        // switch_table
0000000000009fe0         dd         quotearg_buffer_restyled.loc_6c5a-switch_table_9fe0, quotearg_buffer_restyled.loc_5eb3-switch_table_9fe0, quotearg_buffer_restyled.loc_6e88-switch_table_9fe0, quotearg_buffer_restyled.loc_6c94-switch_table_9fe0 ; switch table used at 0x5eb1 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
0000000000009ff0         dd         quotearg_buffer_restyled.loc_6a84-switch_table_9fe0, quotearg_buffer_restyled.loc_6ae0-switch_table_9fe0, quotearg_buffer_restyled.loc_6b35-switch_table_9fe0, quotearg_buffer_restyled.loc_6b7a-switch_table_9fe0
000000000000a000         dd         3 dup (quotearg_buffer_restyled.loc_6bb4-switch_table_9fe0)
000000000000a00c         db  0x24 ; '$'                                         ; DATA XREF=quotearg_buffer_restyled+477
000000000000a00d         db  0xc2 ; '.'
000000000000a00e         db  0xff ; '.'
000000000000a00f         db  0xff ; '.'
000000000000a010         db  0x0c ; '.'
000000000000a011         db  0xc3 ; '.'
000000000000a012         db  0xff ; '.'
000000000000a013         db  0xff ; '.'
000000000000a014         db  0x0c ; '.'
000000000000a015         db  0xc3 ; '.'
000000000000a016         db  0xff ; '.'
000000000000a017         db  0xff ; '.'
000000000000a018         db  0x0c ; '.'
000000000000a019         db  0xc3 ; '.'
000000000000a01a         db  0xff ; '.'
000000000000a01b         db  0xff ; '.'
000000000000a01c         db  0x0c ; '.'
000000000000a01d         db  0xc3 ; '.'
000000000000a01e         db  0xff ; '.'
000000000000a01f         db  0xff ; '.'
000000000000a020         db  0x0c ; '.'
000000000000a021         db  0xc3 ; '.'
000000000000a022         db  0xff ; '.'
000000000000a023         db  0xff ; '.'
000000000000a024         db  0x0c ; '.'
000000000000a025         db  0xc3 ; '.'
000000000000a026         db  0xff ; '.'
000000000000a027         db  0xff ; '.'
000000000000a028         db  0x64 ; 'd'
000000000000a029         db  0xc2 ; '.'
000000000000a02a         db  0xff ; '.'
000000000000a02b         db  0xff ; '.'
000000000000a02c         db  0x6c ; 'l'
000000000000a02d         db  0xc1 ; '.'
000000000000a02e         db  0xff ; '.'
000000000000a02f         db  0xff ; '.'
000000000000a030         db  0x2c ; ','
000000000000a031         db  0xc1 ; '.'
000000000000a032         db  0xff ; '.'
000000000000a033         db  0xff ; '.'
000000000000a034         db  0xf4 ; '.'
000000000000a035         db  0xc2 ; '.'
000000000000a036         db  0xff ; '.'
000000000000a037         db  0xff ; '.'
000000000000a038         db  0xe4 ; '.'
000000000000a039         db  0xc2 ; '.'
000000000000a03a         db  0xff ; '.'
000000000000a03b         db  0xff ; '.'
000000000000a03c         db  0xd4 ; '.'
000000000000a03d         db  0xc2 ; '.'
000000000000a03e         db  0xff ; '.'
000000000000a03f         db  0xff ; '.'
000000000000a040         db  0xc4 ; '.'
000000000000a041         db  0xc2 ; '.'
000000000000a042         db  0xff ; '.'
000000000000a043         db  0xff ; '.'
000000000000a044         db  0x0c ; '.'
000000000000a045         db  0xc3 ; '.'
000000000000a046         db  0xff ; '.'
000000000000a047         db  0xff ; '.'
000000000000a048         db  0x0c ; '.'
000000000000a049         db  0xc3 ; '.'
000000000000a04a         db  0xff ; '.'
000000000000a04b         db  0xff ; '.'
000000000000a04c         db  0x0c ; '.'
000000000000a04d         db  0xc3 ; '.'
000000000000a04e         db  0xff ; '.'
000000000000a04f         db  0xff ; '.'
000000000000a050         db  0x0c ; '.'
000000000000a051         db  0xc3 ; '.'
000000000000a052         db  0xff ; '.'
000000000000a053         db  0xff ; '.'
000000000000a054         db  0x0c ; '.'
000000000000a055         db  0xc3 ; '.'
000000000000a056         db  0xff ; '.'
000000000000a057         db  0xff ; '.'
000000000000a058         db  0x0c ; '.'
000000000000a059         db  0xc3 ; '.'
000000000000a05a         db  0xff ; '.'
000000000000a05b         db  0xff ; '.'
000000000000a05c         db  0x0c ; '.'
000000000000a05d         db  0xc3 ; '.'
000000000000a05e         db  0xff ; '.'
000000000000a05f         db  0xff ; '.'
000000000000a060         db  0x0c ; '.'
000000000000a061         db  0xc3 ; '.'
000000000000a062         db  0xff ; '.'
000000000000a063         db  0xff ; '.'
000000000000a064         db  0x0c ; '.'
000000000000a065         db  0xc3 ; '.'
000000000000a066         db  0xff ; '.'
000000000000a067         db  0xff ; '.'
000000000000a068         db  0x0c ; '.'
000000000000a069         db  0xc3 ; '.'
000000000000a06a         db  0xff ; '.'
000000000000a06b         db  0xff ; '.'
000000000000a06c         db  0x0c ; '.'
000000000000a06d         db  0xc3 ; '.'
000000000000a06e         db  0xff ; '.'
000000000000a06f         db  0xff ; '.'
000000000000a070         db  0x0c ; '.'
000000000000a071         db  0xc3 ; '.'
000000000000a072         db  0xff ; '.'
000000000000a073         db  0xff ; '.'
000000000000a074         db  0x0c ; '.'
000000000000a075         db  0xc3 ; '.'
000000000000a076         db  0xff ; '.'
000000000000a077         db  0xff ; '.'
000000000000a078         db  0x0c ; '.'
000000000000a079         db  0xc3 ; '.'
000000000000a07a         db  0xff ; '.'
000000000000a07b         db  0xff ; '.'
000000000000a07c         db  0x0c ; '.'
000000000000a07d         db  0xc3 ; '.'
000000000000a07e         db  0xff ; '.'
000000000000a07f         db  0xff ; '.'
000000000000a080         db  0x0c ; '.'
000000000000a081         db  0xc3 ; '.'
000000000000a082         db  0xff ; '.'
000000000000a083         db  0xff ; '.'
000000000000a084         db  0x0c ; '.'
000000000000a085         db  0xc3 ; '.'
000000000000a086         db  0xff ; '.'
000000000000a087         db  0xff ; '.'
000000000000a088         db  0x0c ; '.'
000000000000a089         db  0xc3 ; '.'
000000000000a08a         db  0xff ; '.'
000000000000a08b         db  0xff ; '.'
000000000000a08c         db  0xb4 ; '.'
000000000000a08d         db  0xc2 ; '.'
000000000000a08e         db  0xff ; '.'
000000000000a08f         db  0xff ; '.'
000000000000a090         db  0xa4 ; '.'
000000000000a091         db  0xc2 ; '.'
000000000000a092         db  0xff ; '.'
000000000000a093         db  0xff ; '.'
000000000000a094         db  0xa4 ; '.'
000000000000a095         db  0xc2 ; '.'
000000000000a096         db  0xff ; '.'
000000000000a097         db  0xff ; '.'
000000000000a098         db  0x74 ; 't'
000000000000a099         db  0xc2 ; '.'
000000000000a09a         db  0xff ; '.'
000000000000a09b         db  0xff ; '.'
000000000000a09c         db  0xa4 ; '.'
000000000000a09d         db  0xc2 ; '.'
000000000000a09e         db  0xff ; '.'
000000000000a09f         db  0xff ; '.'
000000000000a0a0         db  0x4c ; 'L'
000000000000a0a1         db  0xc2 ; '.'
000000000000a0a2         db  0xff ; '.'
000000000000a0a3         db  0xff ; '.'
000000000000a0a4         db  0xa4 ; '.'
000000000000a0a5         db  0xc2 ; '.'
000000000000a0a6         db  0xff ; '.'
000000000000a0a7         db  0xff ; '.'
000000000000a0a8         db  0x07 ; '.'
000000000000a0a9         db  0xc1 ; '.'
000000000000a0aa         db  0xff ; '.'
000000000000a0ab         db  0xff ; '.'
000000000000a0ac         db  0xa4 ; '.'
000000000000a0ad         db  0xc2 ; '.'
000000000000a0ae         db  0xff ; '.'
000000000000a0af         db  0xff ; '.'
000000000000a0b0         db  0xa4 ; '.'
000000000000a0b1         db  0xc2 ; '.'
000000000000a0b2         db  0xff ; '.'
000000000000a0b3         db  0xff ; '.'
000000000000a0b4         db  0xa4 ; '.'
000000000000a0b5         db  0xc2 ; '.'
000000000000a0b6         db  0xff ; '.'
000000000000a0b7         db  0xff ; '.'
000000000000a0b8         db  0x4c ; 'L'
000000000000a0b9         db  0xc2 ; '.'
000000000000a0ba         db  0xff ; '.'
000000000000a0bb         db  0xff ; '.'
000000000000a0bc         db  0x4c ; 'L'
000000000000a0bd         db  0xc2 ; '.'
000000000000a0be         db  0xff ; '.'
000000000000a0bf         db  0xff ; '.'
000000000000a0c0         db  0x4c ; 'L'
000000000000a0c1         db  0xc2 ; '.'
000000000000a0c2         db  0xff ; '.'
000000000000a0c3         db  0xff ; '.'
000000000000a0c4         db  0x4c ; 'L'
000000000000a0c5         db  0xc2 ; '.'
000000000000a0c6         db  0xff ; '.'
000000000000a0c7         db  0xff ; '.'
000000000000a0c8         db  0x4c ; 'L'
000000000000a0c9         db  0xc2 ; '.'
000000000000a0ca         db  0xff ; '.'
000000000000a0cb         db  0xff ; '.'
000000000000a0cc         db  0x4c ; 'L'
000000000000a0cd         db  0xc2 ; '.'
000000000000a0ce         db  0xff ; '.'
000000000000a0cf         db  0xff ; '.'
000000000000a0d0         db  0x4c ; 'L'
000000000000a0d1         db  0xc2 ; '.'
000000000000a0d2         db  0xff ; '.'
000000000000a0d3         db  0xff ; '.'
000000000000a0d4         db  0x4c ; 'L'
000000000000a0d5         db  0xc2 ; '.'
000000000000a0d6         db  0xff ; '.'
000000000000a0d7         db  0xff ; '.'
000000000000a0d8         db  0x4c ; 'L'
000000000000a0d9         db  0xc2 ; '.'
000000000000a0da         db  0xff ; '.'
000000000000a0db         db  0xff ; '.'
000000000000a0dc         db  0x4c ; 'L'
000000000000a0dd         db  0xc2 ; '.'
000000000000a0de         db  0xff ; '.'
000000000000a0df         db  0xff ; '.'
000000000000a0e0         db  0x4c ; 'L'
000000000000a0e1         db  0xc2 ; '.'
000000000000a0e2         db  0xff ; '.'
000000000000a0e3         db  0xff ; '.'
000000000000a0e4         db  0x4c ; 'L'
000000000000a0e5         db  0xc2 ; '.'
000000000000a0e6         db  0xff ; '.'
000000000000a0e7         db  0xff ; '.'
000000000000a0e8         db  0x4c ; 'L'
000000000000a0e9         db  0xc2 ; '.'
000000000000a0ea         db  0xff ; '.'
000000000000a0eb         db  0xff ; '.'
000000000000a0ec         db  0x4c ; 'L'
000000000000a0ed         db  0xc2 ; '.'
000000000000a0ee         db  0xff ; '.'
000000000000a0ef         db  0xff ; '.'
000000000000a0f0         db  0x4c ; 'L'
000000000000a0f1         db  0xc2 ; '.'
000000000000a0f2         db  0xff ; '.'
000000000000a0f3         db  0xff ; '.'
000000000000a0f4         db  0x4c ; 'L'
000000000000a0f5         db  0xc2 ; '.'
000000000000a0f6         db  0xff ; '.'
000000000000a0f7         db  0xff ; '.'
000000000000a0f8         db  0xa4 ; '.'
000000000000a0f9         db  0xc2 ; '.'
000000000000a0fa         db  0xff ; '.'
000000000000a0fb         db  0xff ; '.'
000000000000a0fc         db  0xa4 ; '.'
000000000000a0fd         db  0xc2 ; '.'
000000000000a0fe         db  0xff ; '.'
000000000000a0ff         db  0xff ; '.'
000000000000a100         db  0xa4 ; '.'
000000000000a101         db  0xc2 ; '.'
000000000000a102         db  0xff ; '.'
000000000000a103         db  0xff ; '.'
000000000000a104         db  0xa4 ; '.'
000000000000a105         db  0xc2 ; '.'
000000000000a106         db  0xff ; '.'
000000000000a107         db  0xff ; '.'
000000000000a108         db  0xd7 ; '.'
000000000000a109         db  0xc0 ; '.'
000000000000a10a         db  0xff ; '.'
000000000000a10b         db  0xff ; '.'
000000000000a10c         db  0x0c ; '.'
000000000000a10d         db  0xc3 ; '.'
000000000000a10e         db  0xff ; '.'
000000000000a10f         db  0xff ; '.'
000000000000a110         db  0x4c ; 'L'
000000000000a111         db  0xc2 ; '.'
000000000000a112         db  0xff ; '.'
000000000000a113         db  0xff ; '.'
000000000000a114         db  0x4c ; 'L'
000000000000a115         db  0xc2 ; '.'
000000000000a116         db  0xff ; '.'
000000000000a117         db  0xff ; '.'
000000000000a118         db  0x4c ; 'L'
000000000000a119         db  0xc2 ; '.'
000000000000a11a         db  0xff ; '.'
000000000000a11b         db  0xff ; '.'
000000000000a11c         db  0x4c ; 'L'
000000000000a11d         db  0xc2 ; '.'
000000000000a11e         db  0xff ; '.'
000000000000a11f         db  0xff ; '.'
000000000000a120         db  0x4c ; 'L'
000000000000a121         db  0xc2 ; '.'
000000000000a122         db  0xff ; '.'
000000000000a123         db  0xff ; '.'
000000000000a124         db  0x4c ; 'L'
000000000000a125         db  0xc2 ; '.'
000000000000a126         db  0xff ; '.'
000000000000a127         db  0xff ; '.'
000000000000a128         db  0x4c ; 'L'
000000000000a129         db  0xc2 ; '.'
000000000000a12a         db  0xff ; '.'
000000000000a12b         db  0xff ; '.'
000000000000a12c         db  0x4c ; 'L'
000000000000a12d         db  0xc2 ; '.'
000000000000a12e         db  0xff ; '.'
000000000000a12f         db  0xff ; '.'
000000000000a130         db  0x4c ; 'L'
000000000000a131         db  0xc2 ; '.'
000000000000a132         db  0xff ; '.'
000000000000a133         db  0xff ; '.'
000000000000a134         db  0x4c ; 'L'
000000000000a135         db  0xc2 ; '.'
000000000000a136         db  0xff ; '.'
000000000000a137         db  0xff ; '.'
000000000000a138         db  0x4c ; 'L'
000000000000a139         db  0xc2 ; '.'
000000000000a13a         db  0xff ; '.'
000000000000a13b         db  0xff ; '.'
000000000000a13c         db  0x4c ; 'L'
000000000000a13d         db  0xc2 ; '.'
000000000000a13e         db  0xff ; '.'
000000000000a13f         db  0xff ; '.'
000000000000a140         db  0x4c ; 'L'
000000000000a141         db  0xc2 ; '.'
000000000000a142         db  0xff ; '.'
000000000000a143         db  0xff ; '.'
000000000000a144         db  0x4c ; 'L'
000000000000a145         db  0xc2 ; '.'
000000000000a146         db  0xff ; '.'
000000000000a147         db  0xff ; '.'
000000000000a148         db  0x4c ; 'L'
000000000000a149         db  0xc2 ; '.'
000000000000a14a         db  0xff ; '.'
000000000000a14b         db  0xff ; '.'
000000000000a14c         db  0x4c ; 'L'
000000000000a14d         db  0xc2 ; '.'
000000000000a14e         db  0xff ; '.'
000000000000a14f         db  0xff ; '.'
000000000000a150         db  0x4c ; 'L'
000000000000a151         db  0xc2 ; '.'
000000000000a152         db  0xff ; '.'
000000000000a153         db  0xff ; '.'
000000000000a154         db  0x4c ; 'L'
000000000000a155         db  0xc2 ; '.'
000000000000a156         db  0xff ; '.'
000000000000a157         db  0xff ; '.'
000000000000a158         db  0x4c ; 'L'
000000000000a159         db  0xc2 ; '.'
000000000000a15a         db  0xff ; '.'
000000000000a15b         db  0xff ; '.'
000000000000a15c         db  0x4c ; 'L'
000000000000a15d         db  0xc2 ; '.'
000000000000a15e         db  0xff ; '.'
000000000000a15f         db  0xff ; '.'
000000000000a160         db  0x4c ; 'L'
000000000000a161         db  0xc2 ; '.'
000000000000a162         db  0xff ; '.'
000000000000a163         db  0xff ; '.'
000000000000a164         db  0x4c ; 'L'
000000000000a165         db  0xc2 ; '.'
000000000000a166         db  0xff ; '.'
000000000000a167         db  0xff ; '.'
000000000000a168         db  0x4c ; 'L'
000000000000a169         db  0xc2 ; '.'
000000000000a16a         db  0xff ; '.'
000000000000a16b         db  0xff ; '.'
000000000000a16c         db  0x4c ; 'L'
000000000000a16d         db  0xc2 ; '.'
000000000000a16e         db  0xff ; '.'
000000000000a16f         db  0xff ; '.'
000000000000a170         db  0x4c ; 'L'
000000000000a171         db  0xc2 ; '.'
000000000000a172         db  0xff ; '.'
000000000000a173         db  0xff ; '.'
000000000000a174         db  0x4c ; 'L'
000000000000a175         db  0xc2 ; '.'
000000000000a176         db  0xff ; '.'
000000000000a177         db  0xff ; '.'
000000000000a178         db  0xa4 ; '.'
000000000000a179         db  0xc2 ; '.'
000000000000a17a         db  0xff ; '.'
000000000000a17b         db  0xff ; '.'
000000000000a17c         db  0x7c ; '|'
000000000000a17d         db  0xc1 ; '.'
000000000000a17e         db  0xff ; '.'
000000000000a17f         db  0xff ; '.'
000000000000a180         db  0x4c ; 'L'
000000000000a181         db  0xc2 ; '.'
000000000000a182         db  0xff ; '.'
000000000000a183         db  0xff ; '.'
000000000000a184         db  0xa4 ; '.'
000000000000a185         db  0xc2 ; '.'
000000000000a186         db  0xff ; '.'
000000000000a187         db  0xff ; '.'
000000000000a188         db  0x4c ; 'L'
000000000000a189         db  0xc2 ; '.'
000000000000a18a         db  0xff ; '.'
000000000000a18b         db  0xff ; '.'
000000000000a18c         db  0xa4 ; '.'
000000000000a18d         db  0xc2 ; '.'
000000000000a18e         db  0xff ; '.'
000000000000a18f         db  0xff ; '.'
000000000000a190         db  0x4c ; 'L'
000000000000a191         db  0xc2 ; '.'
000000000000a192         db  0xff ; '.'
000000000000a193         db  0xff ; '.'
000000000000a194         db  0x4c ; 'L'
000000000000a195         db  0xc2 ; '.'
000000000000a196         db  0xff ; '.'
000000000000a197         db  0xff ; '.'
000000000000a198         db  0x4c ; 'L'
000000000000a199         db  0xc2 ; '.'
000000000000a19a         db  0xff ; '.'
000000000000a19b         db  0xff ; '.'
000000000000a19c         db  0x4c ; 'L'
000000000000a19d         db  0xc2 ; '.'
000000000000a19e         db  0xff ; '.'
000000000000a19f         db  0xff ; '.'
000000000000a1a0         db  0x4c ; 'L'
000000000000a1a1         db  0xc2 ; '.'
000000000000a1a2         db  0xff ; '.'
000000000000a1a3         db  0xff ; '.'
000000000000a1a4         db  0x4c ; 'L'
000000000000a1a5         db  0xc2 ; '.'
000000000000a1a6         db  0xff ; '.'
000000000000a1a7         db  0xff ; '.'
000000000000a1a8         db  0x4c ; 'L'
000000000000a1a9         db  0xc2 ; '.'
000000000000a1aa         db  0xff ; '.'
000000000000a1ab         db  0xff ; '.'
000000000000a1ac         db  0x4c ; 'L'
000000000000a1ad         db  0xc2 ; '.'
000000000000a1ae         db  0xff ; '.'
000000000000a1af         db  0xff ; '.'
000000000000a1b0         db  0x4c ; 'L'
000000000000a1b1         db  0xc2 ; '.'
000000000000a1b2         db  0xff ; '.'
000000000000a1b3         db  0xff ; '.'
000000000000a1b4         db  0x4c ; 'L'
000000000000a1b5         db  0xc2 ; '.'
000000000000a1b6         db  0xff ; '.'
000000000000a1b7         db  0xff ; '.'
000000000000a1b8         db  0x4c ; 'L'
000000000000a1b9         db  0xc2 ; '.'
000000000000a1ba         db  0xff ; '.'
000000000000a1bb         db  0xff ; '.'
000000000000a1bc         db  0x4c ; 'L'
000000000000a1bd         db  0xc2 ; '.'
000000000000a1be         db  0xff ; '.'
000000000000a1bf         db  0xff ; '.'
000000000000a1c0         db  0x4c ; 'L'
000000000000a1c1         db  0xc2 ; '.'
000000000000a1c2         db  0xff ; '.'
000000000000a1c3         db  0xff ; '.'
000000000000a1c4         db  0x4c ; 'L'
000000000000a1c5         db  0xc2 ; '.'
000000000000a1c6         db  0xff ; '.'
000000000000a1c7         db  0xff ; '.'
000000000000a1c8         db  0x4c ; 'L'
000000000000a1c9         db  0xc2 ; '.'
000000000000a1ca         db  0xff ; '.'
000000000000a1cb         db  0xff ; '.'
000000000000a1cc         db  0x4c ; 'L'
000000000000a1cd         db  0xc2 ; '.'
000000000000a1ce         db  0xff ; '.'
000000000000a1cf         db  0xff ; '.'
000000000000a1d0         db  0x4c ; 'L'
000000000000a1d1         db  0xc2 ; '.'
000000000000a1d2         db  0xff ; '.'
000000000000a1d3         db  0xff ; '.'
000000000000a1d4         db  0x4c ; 'L'
000000000000a1d5         db  0xc2 ; '.'
000000000000a1d6         db  0xff ; '.'
000000000000a1d7         db  0xff ; '.'
000000000000a1d8         db  0x4c ; 'L'
000000000000a1d9         db  0xc2 ; '.'
000000000000a1da         db  0xff ; '.'
000000000000a1db         db  0xff ; '.'
000000000000a1dc         db  0x4c ; 'L'
000000000000a1dd         db  0xc2 ; '.'
000000000000a1de         db  0xff ; '.'
000000000000a1df         db  0xff ; '.'
000000000000a1e0         db  0x4c ; 'L'
000000000000a1e1         db  0xc2 ; '.'
000000000000a1e2         db  0xff ; '.'
000000000000a1e3         db  0xff ; '.'
000000000000a1e4         db  0x4c ; 'L'
000000000000a1e5         db  0xc2 ; '.'
000000000000a1e6         db  0xff ; '.'
000000000000a1e7         db  0xff ; '.'
000000000000a1e8         db  0x4c ; 'L'
000000000000a1e9         db  0xc2 ; '.'
000000000000a1ea         db  0xff ; '.'
000000000000a1eb         db  0xff ; '.'
000000000000a1ec         db  0x4c ; 'L'
000000000000a1ed         db  0xc2 ; '.'
000000000000a1ee         db  0xff ; '.'
000000000000a1ef         db  0xff ; '.'
000000000000a1f0         db  0x4c ; 'L'
000000000000a1f1         db  0xc2 ; '.'
000000000000a1f2         db  0xff ; '.'
000000000000a1f3         db  0xff ; '.'
000000000000a1f4         db  0x4c ; 'L'
000000000000a1f5         db  0xc2 ; '.'
000000000000a1f6         db  0xff ; '.'
000000000000a1f7         db  0xff ; '.'
000000000000a1f8         db  0x07 ; '.'
000000000000a1f9         db  0xc0 ; '.'
000000000000a1fa         db  0xff ; '.'
000000000000a1fb         db  0xff ; '.'
000000000000a1fc         db  0xa4 ; '.'
000000000000a1fd         db  0xc2 ; '.'
000000000000a1fe         db  0xff ; '.'
000000000000a1ff         db  0xff ; '.'
000000000000a200         db  0x07 ; '.'
000000000000a201         db  0xc0 ; '.'
000000000000a202         db  0xff ; '.'
000000000000a203         db  0xff ; '.'
000000000000a204         db  0x74 ; 't'
000000000000a205         db  0xc2 ; '.'
000000000000a206         db  0xff ; '.'
000000000000a207         db  0xff ; '.'
000000000000a208         db  0xf8 ; '.'                                         ; DATA XREF=sub_6300+137
000000000000a209         db  0xc1 ; '.'
000000000000a20a         db  0xff ; '.'
000000000000a20b         db  0xff ; '.'
000000000000a20c         db  0x08 ; '.'
000000000000a20d         db  0xc1 ; '.'
000000000000a20e         db  0xff ; '.'
000000000000a20f         db  0xff ; '.'
000000000000a210         db  0x08 ; '.'
000000000000a211         db  0xc1 ; '.'
000000000000a212         db  0xff ; '.'
000000000000a213         db  0xff ; '.'
000000000000a214         db  0x08 ; '.'
000000000000a215         db  0xc1 ; '.'
000000000000a216         db  0xff ; '.'
000000000000a217         db  0xff ; '.'
000000000000a218         db  0x08 ; '.'
000000000000a219         db  0xc1 ; '.'
000000000000a21a         db  0xff ; '.'
000000000000a21b         db  0xff ; '.'
000000000000a21c         db  0x08 ; '.'
000000000000a21d         db  0xc1 ; '.'
000000000000a21e         db  0xff ; '.'
000000000000a21f         db  0xff ; '.'
000000000000a220         db  0x08 ; '.'
000000000000a221         db  0xc1 ; '.'
000000000000a222         db  0xff ; '.'
000000000000a223         db  0xff ; '.'
000000000000a224         db  0xe8 ; '.'
000000000000a225         db  0xc1 ; '.'
000000000000a226         db  0xff ; '.'
000000000000a227         db  0xff ; '.'
000000000000a228         db  0x38 ; '8'
000000000000a229         db  0xc3 ; '.'
000000000000a22a         db  0xff ; '.'
000000000000a22b         db  0xff ; '.'
000000000000a22c         db  0x20 ; ' '
000000000000a22d         db  0xc3 ; '.'
000000000000a22e         db  0xff ; '.'
000000000000a22f         db  0xff ; '.'
000000000000a230         db  0xd0 ; '.'
000000000000a231         db  0xc1 ; '.'
000000000000a232         db  0xff ; '.'
000000000000a233         db  0xff ; '.'
000000000000a234         db  0x10 ; '.'
000000000000a235         db  0xc3 ; '.'
000000000000a236         db  0xff ; '.'
000000000000a237         db  0xff ; '.'
000000000000a238         db  0xb8 ; '.'
000000000000a239         db  0xc1 ; '.'
000000000000a23a         db  0xff ; '.'
000000000000a23b         db  0xff ; '.'
000000000000a23c         db  0xf8 ; '.'
000000000000a23d         db  0xc2 ; '.'
000000000000a23e         db  0xff ; '.'
000000000000a23f         db  0xff ; '.'
000000000000a240         db  0x08 ; '.'
000000000000a241         db  0xc1 ; '.'
000000000000a242         db  0xff ; '.'
000000000000a243         db  0xff ; '.'
000000000000a244         db  0x08 ; '.'
000000000000a245         db  0xc1 ; '.'
000000000000a246         db  0xff ; '.'
000000000000a247         db  0xff ; '.'
000000000000a248         db  0x08 ; '.'
000000000000a249         db  0xc1 ; '.'
000000000000a24a         db  0xff ; '.'
000000000000a24b         db  0xff ; '.'
000000000000a24c         db  0x08 ; '.'
000000000000a24d         db  0xc1 ; '.'
000000000000a24e         db  0xff ; '.'
000000000000a24f         db  0xff ; '.'
000000000000a250         db  0x08 ; '.'
000000000000a251         db  0xc1 ; '.'
000000000000a252         db  0xff ; '.'
000000000000a253         db  0xff ; '.'
000000000000a254         db  0x08 ; '.'
000000000000a255         db  0xc1 ; '.'
000000000000a256         db  0xff ; '.'
000000000000a257         db  0xff ; '.'
000000000000a258         db  0x08 ; '.'
000000000000a259         db  0xc1 ; '.'
000000000000a25a         db  0xff ; '.'
000000000000a25b         db  0xff ; '.'
000000000000a25c         db  0x08 ; '.'
000000000000a25d         db  0xc1 ; '.'
000000000000a25e         db  0xff ; '.'
000000000000a25f         db  0xff ; '.'
000000000000a260         db  0x08 ; '.'
000000000000a261         db  0xc1 ; '.'
000000000000a262         db  0xff ; '.'
000000000000a263         db  0xff ; '.'
000000000000a264         db  0x08 ; '.'
000000000000a265         db  0xc1 ; '.'
000000000000a266         db  0xff ; '.'
000000000000a267         db  0xff ; '.'
000000000000a268         db  0x08 ; '.'
000000000000a269         db  0xc1 ; '.'
000000000000a26a         db  0xff ; '.'
000000000000a26b         db  0xff ; '.'
000000000000a26c         db  0x08 ; '.'
000000000000a26d         db  0xc1 ; '.'
000000000000a26e         db  0xff ; '.'
000000000000a26f         db  0xff ; '.'
000000000000a270         db  0x08 ; '.'
000000000000a271         db  0xc1 ; '.'
000000000000a272         db  0xff ; '.'
000000000000a273         db  0xff ; '.'
000000000000a274         db  0x08 ; '.'
000000000000a275         db  0xc1 ; '.'
000000000000a276         db  0xff ; '.'
000000000000a277         db  0xff ; '.'
000000000000a278         db  0x08 ; '.'
000000000000a279         db  0xc1 ; '.'
000000000000a27a         db  0xff ; '.'
000000000000a27b         db  0xff ; '.'
000000000000a27c         db  0x08 ; '.'
000000000000a27d         db  0xc1 ; '.'
000000000000a27e         db  0xff ; '.'
000000000000a27f         db  0xff ; '.'
000000000000a280         db  0x08 ; '.'
000000000000a281         db  0xc1 ; '.'
000000000000a282         db  0xff ; '.'
000000000000a283         db  0xff ; '.'
000000000000a284         db  0x08 ; '.'
000000000000a285         db  0xc1 ; '.'
000000000000a286         db  0xff ; '.'
000000000000a287         db  0xff ; '.'
000000000000a288         db  0xe0 ; '.'
000000000000a289         db  0xc2 ; '.'
000000000000a28a         db  0xff ; '.'
000000000000a28b         db  0xff ; '.'
000000000000a28c         db  0xc8 ; '.'
000000000000a28d         db  0xc2 ; '.'
000000000000a28e         db  0xff ; '.'
000000000000a28f         db  0xff ; '.'
000000000000a290         db  0xc8 ; '.'
000000000000a291         db  0xc2 ; '.'
000000000000a292         db  0xff ; '.'
000000000000a293         db  0xff ; '.'
000000000000a294         db  0xb0 ; '.'
000000000000a295         db  0xc2 ; '.'
000000000000a296         db  0xff ; '.'
000000000000a297         db  0xff ; '.'
000000000000a298         db  0xc8 ; '.'
000000000000a299         db  0xc2 ; '.'
000000000000a29a         db  0xff ; '.'
000000000000a29b         db  0xff ; '.'
000000000000a29c         db  0x98 ; '.'
000000000000a29d         db  0xc2 ; '.'
000000000000a29e         db  0xff ; '.'
000000000000a29f         db  0xff ; '.'
000000000000a2a0         db  0xc8 ; '.'
000000000000a2a1         db  0xc2 ; '.'
000000000000a2a2         db  0xff ; '.'
000000000000a2a3         db  0xff ; '.'
000000000000a2a4         db  0x08 ; '.'
000000000000a2a5         db  0xbf ; '.'
000000000000a2a6         db  0xff ; '.'
000000000000a2a7         db  0xff ; '.'
000000000000a2a8         db  0xc8 ; '.'
000000000000a2a9         db  0xc2 ; '.'
000000000000a2aa         db  0xff ; '.'
000000000000a2ab         db  0xff ; '.'
000000000000a2ac         db  0xc8 ; '.'
000000000000a2ad         db  0xc2 ; '.'
000000000000a2ae         db  0xff ; '.'
000000000000a2af         db  0xff ; '.'
000000000000a2b0         db  0xc8 ; '.'
000000000000a2b1         db  0xc2 ; '.'
000000000000a2b2         db  0xff ; '.'
000000000000a2b3         db  0xff ; '.'
000000000000a2b4         db  0x98 ; '.'
000000000000a2b5         db  0xc2 ; '.'
000000000000a2b6         db  0xff ; '.'
000000000000a2b7         db  0xff ; '.'
000000000000a2b8         db  0x98 ; '.'
000000000000a2b9         db  0xc2 ; '.'
000000000000a2ba         db  0xff ; '.'
000000000000a2bb         db  0xff ; '.'
000000000000a2bc         db  0x98 ; '.'
000000000000a2bd         db  0xc2 ; '.'
000000000000a2be         db  0xff ; '.'
000000000000a2bf         db  0xff ; '.'
000000000000a2c0         db  0x98 ; '.'
000000000000a2c1         db  0xc2 ; '.'
000000000000a2c2         db  0xff ; '.'
000000000000a2c3         db  0xff ; '.'
000000000000a2c4         db  0x98 ; '.'
000000000000a2c5         db  0xc2 ; '.'
000000000000a2c6         db  0xff ; '.'
000000000000a2c7         db  0xff ; '.'
000000000000a2c8         db  0x98 ; '.'
000000000000a2c9         db  0xc2 ; '.'
000000000000a2ca         db  0xff ; '.'
000000000000a2cb         db  0xff ; '.'
000000000000a2cc         db  0x98 ; '.'
000000000000a2cd         db  0xc2 ; '.'
000000000000a2ce         db  0xff ; '.'
000000000000a2cf         db  0xff ; '.'
000000000000a2d0         db  0x98 ; '.'
000000000000a2d1         db  0xc2 ; '.'
000000000000a2d2         db  0xff ; '.'
000000000000a2d3         db  0xff ; '.'
000000000000a2d4         db  0x98 ; '.'
000000000000a2d5         db  0xc2 ; '.'
000000000000a2d6         db  0xff ; '.'
000000000000a2d7         db  0xff ; '.'
000000000000a2d8         db  0x98 ; '.'
000000000000a2d9         db  0xc2 ; '.'
000000000000a2da         db  0xff ; '.'
000000000000a2db         db  0xff ; '.'
000000000000a2dc         db  0x98 ; '.'
000000000000a2dd         db  0xc2 ; '.'
000000000000a2de         db  0xff ; '.'
000000000000a2df         db  0xff ; '.'
000000000000a2e0         db  0x98 ; '.'
000000000000a2e1         db  0xc2 ; '.'
000000000000a2e2         db  0xff ; '.'
000000000000a2e3         db  0xff ; '.'
000000000000a2e4         db  0x98 ; '.'
000000000000a2e5         db  0xc2 ; '.'
000000000000a2e6         db  0xff ; '.'
000000000000a2e7         db  0xff ; '.'
000000000000a2e8         db  0x98 ; '.'
000000000000a2e9         db  0xc2 ; '.'
000000000000a2ea         db  0xff ; '.'
000000000000a2eb         db  0xff ; '.'
000000000000a2ec         db  0x98 ; '.'
000000000000a2ed         db  0xc2 ; '.'
000000000000a2ee         db  0xff ; '.'
000000000000a2ef         db  0xff ; '.'
000000000000a2f0         db  0x98 ; '.'
000000000000a2f1         db  0xc2 ; '.'
000000000000a2f2         db  0xff ; '.'
000000000000a2f3         db  0xff ; '.'
000000000000a2f4         db  0xc8 ; '.'
000000000000a2f5         db  0xc2 ; '.'
000000000000a2f6         db  0xff ; '.'
000000000000a2f7         db  0xff ; '.'
000000000000a2f8         db  0xc8 ; '.'
000000000000a2f9         db  0xc2 ; '.'
000000000000a2fa         db  0xff ; '.'
000000000000a2fb         db  0xff ; '.'
000000000000a2fc         db  0xc8 ; '.'
000000000000a2fd         db  0xc2 ; '.'
000000000000a2fe         db  0xff ; '.'
000000000000a2ff         db  0xff ; '.'
000000000000a300         db  0xc8 ; '.'
000000000000a301         db  0xc2 ; '.'
000000000000a302         db  0xff ; '.'
000000000000a303         db  0xff ; '.'
000000000000a304         db  0xd8 ; '.'
000000000000a305         db  0xbe ; '.'
000000000000a306         db  0xff ; '.'
000000000000a307         db  0xff ; '.'
000000000000a308         db  0x08 ; '.'
000000000000a309         db  0xc1 ; '.'
000000000000a30a         db  0xff ; '.'
000000000000a30b         db  0xff ; '.'
000000000000a30c         db  0x98 ; '.'
000000000000a30d         db  0xc2 ; '.'
000000000000a30e         db  0xff ; '.'
000000000000a30f         db  0xff ; '.'
000000000000a310         db  0x98 ; '.'
000000000000a311         db  0xc2 ; '.'
000000000000a312         db  0xff ; '.'
000000000000a313         db  0xff ; '.'
000000000000a314         db  0x98 ; '.'
000000000000a315         db  0xc2 ; '.'
000000000000a316         db  0xff ; '.'
000000000000a317         db  0xff ; '.'
000000000000a318         db  0x98 ; '.'
000000000000a319         db  0xc2 ; '.'
000000000000a31a         db  0xff ; '.'
000000000000a31b         db  0xff ; '.'
000000000000a31c         db  0x98 ; '.'
000000000000a31d         db  0xc2 ; '.'
000000000000a31e         db  0xff ; '.'
000000000000a31f         db  0xff ; '.'
000000000000a320         db  0x98 ; '.'
000000000000a321         db  0xc2 ; '.'
000000000000a322         db  0xff ; '.'
000000000000a323         db  0xff ; '.'
000000000000a324         db  0x98 ; '.'
000000000000a325         db  0xc2 ; '.'
000000000000a326         db  0xff ; '.'
000000000000a327         db  0xff ; '.'
000000000000a328         db  0x98 ; '.'
000000000000a329         db  0xc2 ; '.'
000000000000a32a         db  0xff ; '.'
000000000000a32b         db  0xff ; '.'
000000000000a32c         db  0x98 ; '.'
000000000000a32d         db  0xc2 ; '.'
000000000000a32e         db  0xff ; '.'
000000000000a32f         db  0xff ; '.'
000000000000a330         db  0x98 ; '.'
000000000000a331         db  0xc2 ; '.'
000000000000a332         db  0xff ; '.'
000000000000a333         db  0xff ; '.'
000000000000a334         db  0x98 ; '.'
000000000000a335         db  0xc2 ; '.'
000000000000a336         db  0xff ; '.'
000000000000a337         db  0xff ; '.'
000000000000a338         db  0x98 ; '.'
000000000000a339         db  0xc2 ; '.'
000000000000a33a         db  0xff ; '.'
000000000000a33b         db  0xff ; '.'
000000000000a33c         db  0x98 ; '.'
000000000000a33d         db  0xc2 ; '.'
000000000000a33e         db  0xff ; '.'
000000000000a33f         db  0xff ; '.'
000000000000a340         db  0x98 ; '.'
000000000000a341         db  0xc2 ; '.'
000000000000a342         db  0xff ; '.'
000000000000a343         db  0xff ; '.'
000000000000a344         db  0x98 ; '.'
000000000000a345         db  0xc2 ; '.'
000000000000a346         db  0xff ; '.'
000000000000a347         db  0xff ; '.'
000000000000a348         db  0x98 ; '.'
000000000000a349         db  0xc2 ; '.'
000000000000a34a         db  0xff ; '.'
000000000000a34b         db  0xff ; '.'
000000000000a34c         db  0x98 ; '.'
000000000000a34d         db  0xc2 ; '.'
000000000000a34e         db  0xff ; '.'
000000000000a34f         db  0xff ; '.'
000000000000a350         db  0x98 ; '.'
000000000000a351         db  0xc2 ; '.'
000000000000a352         db  0xff ; '.'
000000000000a353         db  0xff ; '.'
000000000000a354         db  0x98 ; '.'
000000000000a355         db  0xc2 ; '.'
000000000000a356         db  0xff ; '.'
000000000000a357         db  0xff ; '.'
000000000000a358         db  0x98 ; '.'
000000000000a359         db  0xc2 ; '.'
000000000000a35a         db  0xff ; '.'
000000000000a35b         db  0xff ; '.'
000000000000a35c         db  0x98 ; '.'
000000000000a35d         db  0xc2 ; '.'
000000000000a35e         db  0xff ; '.'
000000000000a35f         db  0xff ; '.'
000000000000a360         db  0x98 ; '.'
000000000000a361         db  0xc2 ; '.'
000000000000a362         db  0xff ; '.'
000000000000a363         db  0xff ; '.'
000000000000a364         db  0x98 ; '.'
000000000000a365         db  0xc2 ; '.'
000000000000a366         db  0xff ; '.'
000000000000a367         db  0xff ; '.'
000000000000a368         db  0x98 ; '.'
000000000000a369         db  0xc2 ; '.'
000000000000a36a         db  0xff ; '.'
000000000000a36b         db  0xff ; '.'
000000000000a36c         db  0x98 ; '.'
000000000000a36d         db  0xc2 ; '.'
000000000000a36e         db  0xff ; '.'
000000000000a36f         db  0xff ; '.'
000000000000a370         db  0x98 ; '.'
000000000000a371         db  0xc2 ; '.'
000000000000a372         db  0xff ; '.'
000000000000a373         db  0xff ; '.'
000000000000a374         db  0xc8 ; '.'
000000000000a375         db  0xc2 ; '.'
000000000000a376         db  0xff ; '.'
000000000000a377         db  0xff ; '.'
000000000000a378         db  0x98 ; '.'
000000000000a379         db  0xc1 ; '.'
000000000000a37a         db  0xff ; '.'
000000000000a37b         db  0xff ; '.'
000000000000a37c         db  0x98 ; '.'
000000000000a37d         db  0xc2 ; '.'
000000000000a37e         db  0xff ; '.'
000000000000a37f         db  0xff ; '.'
000000000000a380         db  0xc8 ; '.'
000000000000a381         db  0xc2 ; '.'
000000000000a382         db  0xff ; '.'
000000000000a383         db  0xff ; '.'
000000000000a384         db  0x98 ; '.'
000000000000a385         db  0xc2 ; '.'
000000000000a386         db  0xff ; '.'
000000000000a387         db  0xff ; '.'
000000000000a388         db  0xc8 ; '.'
000000000000a389         db  0xc2 ; '.'
000000000000a38a         db  0xff ; '.'
000000000000a38b         db  0xff ; '.'
000000000000a38c         db  0x98 ; '.'
000000000000a38d         db  0xc2 ; '.'
000000000000a38e         db  0xff ; '.'
000000000000a38f         db  0xff ; '.'
000000000000a390         db  0x98 ; '.'
000000000000a391         db  0xc2 ; '.'
000000000000a392         db  0xff ; '.'
000000000000a393         db  0xff ; '.'
000000000000a394         db  0x98 ; '.'
000000000000a395         db  0xc2 ; '.'
000000000000a396         db  0xff ; '.'
000000000000a397         db  0xff ; '.'
000000000000a398         db  0x98 ; '.'
000000000000a399         db  0xc2 ; '.'
000000000000a39a         db  0xff ; '.'
000000000000a39b         db  0xff ; '.'
000000000000a39c         db  0x98 ; '.'
000000000000a39d         db  0xc2 ; '.'
000000000000a39e         db  0xff ; '.'
000000000000a39f         db  0xff ; '.'
000000000000a3a0         db  0x98 ; '.'
000000000000a3a1         db  0xc2 ; '.'
000000000000a3a2         db  0xff ; '.'
000000000000a3a3         db  0xff ; '.'
000000000000a3a4         db  0x98 ; '.'
000000000000a3a5         db  0xc2 ; '.'
000000000000a3a6         db  0xff ; '.'
000000000000a3a7         db  0xff ; '.'
000000000000a3a8         db  0x98 ; '.'
000000000000a3a9         db  0xc2 ; '.'
000000000000a3aa         db  0xff ; '.'
000000000000a3ab         db  0xff ; '.'
000000000000a3ac         db  0x98 ; '.'
000000000000a3ad         db  0xc2 ; '.'
000000000000a3ae         db  0xff ; '.'
000000000000a3af         db  0xff ; '.'
000000000000a3b0         db  0x98 ; '.'
000000000000a3b1         db  0xc2 ; '.'
000000000000a3b2         db  0xff ; '.'
000000000000a3b3         db  0xff ; '.'
000000000000a3b4         db  0x98 ; '.'
000000000000a3b5         db  0xc2 ; '.'
000000000000a3b6         db  0xff ; '.'
000000000000a3b7         db  0xff ; '.'
000000000000a3b8         db  0x98 ; '.'
000000000000a3b9         db  0xc2 ; '.'
000000000000a3ba         db  0xff ; '.'
000000000000a3bb         db  0xff ; '.'
000000000000a3bc         db  0x98 ; '.'
000000000000a3bd         db  0xc2 ; '.'
000000000000a3be         db  0xff ; '.'
000000000000a3bf         db  0xff ; '.'
000000000000a3c0         db  0x98 ; '.'
000000000000a3c1         db  0xc2 ; '.'
000000000000a3c2         db  0xff ; '.'
000000000000a3c3         db  0xff ; '.'
000000000000a3c4         db  0x98 ; '.'
000000000000a3c5         db  0xc2 ; '.'
000000000000a3c6         db  0xff ; '.'
000000000000a3c7         db  0xff ; '.'
000000000000a3c8         db  0x98 ; '.'
000000000000a3c9         db  0xc2 ; '.'
000000000000a3ca         db  0xff ; '.'
000000000000a3cb         db  0xff ; '.'
000000000000a3cc         db  0x98 ; '.'
000000000000a3cd         db  0xc2 ; '.'
000000000000a3ce         db  0xff ; '.'
000000000000a3cf         db  0xff ; '.'
000000000000a3d0         db  0x98 ; '.'
000000000000a3d1         db  0xc2 ; '.'
000000000000a3d2         db  0xff ; '.'
000000000000a3d3         db  0xff ; '.'
000000000000a3d4         db  0x98 ; '.'
000000000000a3d5         db  0xc2 ; '.'
000000000000a3d6         db  0xff ; '.'
000000000000a3d7         db  0xff ; '.'
000000000000a3d8         db  0x98 ; '.'
000000000000a3d9         db  0xc2 ; '.'
000000000000a3da         db  0xff ; '.'
000000000000a3db         db  0xff ; '.'
000000000000a3dc         db  0x98 ; '.'
000000000000a3dd         db  0xc2 ; '.'
000000000000a3de         db  0xff ; '.'
000000000000a3df         db  0xff ; '.'
000000000000a3e0         db  0x98 ; '.'
000000000000a3e1         db  0xc2 ; '.'
000000000000a3e2         db  0xff ; '.'
000000000000a3e3         db  0xff ; '.'
000000000000a3e4         db  0x98 ; '.'
000000000000a3e5         db  0xc2 ; '.'
000000000000a3e6         db  0xff ; '.'
000000000000a3e7         db  0xff ; '.'
000000000000a3e8         db  0x98 ; '.'
000000000000a3e9         db  0xc2 ; '.'
000000000000a3ea         db  0xff ; '.'
000000000000a3eb         db  0xff ; '.'
000000000000a3ec         db  0x98 ; '.'
000000000000a3ed         db  0xc2 ; '.'
000000000000a3ee         db  0xff ; '.'
000000000000a3ef         db  0xff ; '.'
000000000000a3f0         db  0x98 ; '.'
000000000000a3f1         db  0xc2 ; '.'
000000000000a3f2         db  0xff ; '.'
000000000000a3f3         db  0xff ; '.'
000000000000a3f4         db  0x08 ; '.'
000000000000a3f5         db  0xbe ; '.'
000000000000a3f6         db  0xff ; '.'
000000000000a3f7         db  0xff ; '.'
000000000000a3f8         db  0xc8 ; '.'
000000000000a3f9         db  0xc2 ; '.'
000000000000a3fa         db  0xff ; '.'
000000000000a3fb         db  0xff ; '.'
000000000000a3fc         db  0x08 ; '.'
000000000000a3fd         db  0xbe ; '.'
000000000000a3fe         db  0xff ; '.'
000000000000a3ff         db  0xff ; '.'
000000000000a400         db  0xb0 ; '.'
000000000000a401         db  0xc2 ; '.'
000000000000a402         db  0xff ; '.'
000000000000a403         db  0xff ; '.'
000000000000a404         db  0x00 ; '.'
000000000000a405         db  0x00 ; '.'
000000000000a406         db  0x00 ; '.'
000000000000a407         db  0x00 ; '.'
000000000000a408         db  0x00 ; '.'
000000000000a409         db  0x00 ; '.'
000000000000a40a         db  0x00 ; '.'
000000000000a40b         db  0x00 ; '.'
000000000000a40c         db  0x00 ; '.'
000000000000a40d         db  0x00 ; '.'
000000000000a40e         db  0x00 ; '.'
000000000000a40f         db  0x00 ; '.'
000000000000a410         db  0x00 ; '.'
000000000000a411         db  0x00 ; '.'
000000000000a412         db  0x00 ; '.'
000000000000a413         db  0x00 ; '.'
000000000000a414         db  0x00 ; '.'
000000000000a415         db  0x00 ; '.'
000000000000a416         db  0x00 ; '.'
000000000000a417         db  0x00 ; '.'
000000000000a418         db  0x00 ; '.'
000000000000a419         db  0x00 ; '.'
000000000000a41a         db  0x00 ; '.'
000000000000a41b         db  0x00 ; '.'
000000000000a41c         db  0x00 ; '.'
000000000000a41d         db  0x00 ; '.'
000000000000a41e         db  0x00 ; '.'
000000000000a41f         db  0x00 ; '.'
                     quoting_style_vals:
000000000000a420         db  0x00 ; '.'
000000000000a421         db  0x00 ; '.'
000000000000a422         db  0x00 ; '.'
000000000000a423         db  0x00 ; '.'
000000000000a424         db  0x01 ; '.'
000000000000a425         db  0x00 ; '.'
000000000000a426         db  0x00 ; '.'
000000000000a427         db  0x00 ; '.'
000000000000a428         db  0x02 ; '.'
000000000000a429         db  0x00 ; '.'
000000000000a42a         db  0x00 ; '.'
000000000000a42b         db  0x00 ; '.'
000000000000a42c         db  0x03 ; '.'
000000000000a42d         db  0x00 ; '.'
000000000000a42e         db  0x00 ; '.'
000000000000a42f         db  0x00 ; '.'
000000000000a430         db  0x04 ; '.'
000000000000a431         db  0x00 ; '.'
000000000000a432         db  0x00 ; '.'
000000000000a433         db  0x00 ; '.'
000000000000a434         db  0x05 ; '.'
000000000000a435         db  0x00 ; '.'
000000000000a436         db  0x00 ; '.'
000000000000a437         db  0x00 ; '.'
000000000000a438         db  0x06 ; '.'
000000000000a439         db  0x00 ; '.'
000000000000a43a         db  0x00 ; '.'
000000000000a43b         db  0x00 ; '.'
000000000000a43c         db  0x07 ; '.'
000000000000a43d         db  0x00 ; '.'
000000000000a43e         db  0x00 ; '.'
000000000000a43f         db  0x00 ; '.'
000000000000a440         db  0x08 ; '.'
000000000000a441         db  0x00 ; '.'
000000000000a442         db  0x00 ; '.'
000000000000a443         db  0x00 ; '.'
000000000000a444         db  0x09 ; '.'
000000000000a445         db  0x00 ; '.'
000000000000a446         db  0x00 ; '.'
000000000000a447         db  0x00 ; '.'
                     aSSSn:
000000000000a448         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
000000000000a454         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
000000000000a45b         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
000000000000a45c         db  0x43 ; 'C'
000000000000a45d         db  0x29 ; ')'
000000000000a45e         db  0x00 ; '.'
                     aWrittenBySn:
000000000000a45f         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
000000000000a46f         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
000000000000a486         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
000000000000a4a2         db  0x0a ; '.'                                         ; DATA XREF=emit_bug_reporting_address+1
000000000000a4a3         db  0x52 ; 'R'
000000000000a4a4         db  0x65 ; 'e'
000000000000a4a5         db  0x70 ; 'p'
000000000000a4a6         db  0x6f ; 'o'
000000000000a4a7         db  0x72 ; 'r'
000000000000a4a8         db  0x74 ; 't'
000000000000a4a9         db  0x20 ; ' '
000000000000a4aa         db  0x62 ; 'b'
000000000000a4ab         db  0x75 ; 'u'
000000000000a4ac         db  0x67 ; 'g'
000000000000a4ad         db  0x73 ; 's'
000000000000a4ae         db  0x20 ; ' '
000000000000a4af         db  0x74 ; 't'
000000000000a4b0         db  0x6f ; 'o'
                     aSn:
000000000000a4b1         db         ": %s\n", 0                                 ; DATA XREF=main+4269
                     aBugcoreutilsgn:
000000000000a4b7         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
000000000000a4cd         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
000000000000a4e1         align      8
                     aNlicenseGplv3G:
000000000000a4e8         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
000000000000a5b4         align      8
                     aWrittenBySSSna:
000000000000a5b8         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_a5d8:        // aWrittenBySSSns
000000000000a5d8         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
000000000000a5fc         align      512
                     aWrittenBySSSns_a600:        // aWrittenBySSSns
000000000000a600         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_a628:        // aWrittenBySSSns
000000000000a628         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
000000000000a654         align      8
                     aWrittenBySSSns_a658:        // aWrittenBySSSns
000000000000a658         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
000000000000a688         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
000000000000a6bc         align      64
                     aWrittenBySSSns_a6c0:        // aWrittenBySSSns
000000000000a6c0         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
000000000000a6fc         align      256
                     aGeneralHelpUsi:
000000000000a700         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
000000000000a741         align      4
                     switch_table_a744:        // switch_table
000000000000a744         dd         version_etc_arn.loc_7af6-switch_table_a744, version_etc_arn.loc_7b88-switch_table_a744, version_etc_arn.loc_7bc8-switch_table_a744, version_etc_arn.loc_7c10-switch_table_a744 ; switch table used at 0x7a74 containing 10 entries, DATA XREF=version_etc_arn+150
000000000000a754         dd         version_etc_arn.loc_7c60-switch_table_a744, version_etc_arn.loc_7cb8-switch_table_a744, version_etc_arn.loc_7ce8-switch_table_a744, version_etc_arn.loc_7d50-switch_table_a744
000000000000a764         dd         version_etc_arn.loc_7a80-switch_table_a744, version_etc_arn.loc_7b30-switch_table_a744
000000000000a76c         align      128
                     version_etc_copyright:
000000000000a780         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
000000000000a7af         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aCoreutils831li:
000000000000a7c0         db         "../coreutils-8.31/lib/xstrtol.c", 0        ; DATA XREF=xstrtoul+908, xstrtoumax+908
                     a0StrtolbaseStr:
000000000000a7e0         db         "0 <= strtol_base && strtol_base <= 36", 0  ; DATA XREF=xstrtoul+915, xstrtoumax+915
000000000000a806         align      8
                     switch_table_a808:        // switch_table
000000000000a808         dd         xstrtoul.loc_86d6-switch_table_a808, 2 dup (xstrtoul.loc_85cc-switch_table_a808), xstrtoul.loc_86b3-switch_table_a808, xstrtoul.loc_85cc-switch_table_a808 ; switch table used at 0x8586 containing 54 entries, DATA XREF=xstrtoul+452
000000000000a81c         dd         xstrtoul.loc_86ec-switch_table_a808, 3 dup (xstrtoul.loc_85cc-switch_table_a808), xstrtoul.loc_866f-switch_table_a808, xstrtoul.loc_85cc-switch_table_a808
000000000000a834         dd         xstrtoul.loc_8588-switch_table_a808, 2 dup (xstrtoul.loc_85cc-switch_table_a808), xstrtoul.loc_8690-switch_table_a808, 3 dup (xstrtoul.loc_85cc-switch_table_a808)
000000000000a850         dd         xstrtoul.loc_864f-switch_table_a808, 4 dup (xstrtoul.loc_85cc-switch_table_a808), xstrtoul.loc_862a-switch_table_a808, xstrtoul.loc_8604-switch_table_a808
000000000000a86c         dd         7 dup (xstrtoul.loc_85cc-switch_table_a808), xstrtoul.loc_85ed-switch_table_a808, xstrtoul.loc_85b0-switch_table_a808, 3 dup (xstrtoul.loc_85cc-switch_table_a808)
000000000000a89c         dd         xstrtoul.loc_86ec-switch_table_a808, 3 dup (xstrtoul.loc_85cc-switch_table_a808), xstrtoul.loc_866f-switch_table_a808, xstrtoul.loc_85cc-switch_table_a808
000000000000a8b4         dd         xstrtoul.loc_8588-switch_table_a808, 6 dup (xstrtoul.loc_85cc-switch_table_a808), xstrtoul.loc_864f-switch_table_a808, 2 dup (xstrtoul.loc_85cc-switch_table_a808)
000000000000a8dc         dd         xstrtoul.loc_85d7-switch_table_a808
                     __PRETTY_FUNCTION__.4162:
000000000000a8e0         db         "xstrtoul", 0                               ; DATA XREF=xstrtoul+901
000000000000a8e9         align      16
                     switch_table_a8f0:        // switch_table
000000000000a8f0         dd         xstrtoumax.loc_8af6-switch_table_a8f0, 2 dup (xstrtoumax.loc_89ec-switch_table_a8f0), xstrtoumax.loc_8ad3-switch_table_a8f0, xstrtoumax.loc_89ec-switch_table_a8f0 ; switch table used at 0x89a6 containing 54 entries, DATA XREF=xstrtoumax+452
000000000000a904         dd         xstrtoumax.loc_8b0c-switch_table_a8f0, 3 dup (xstrtoumax.loc_89ec-switch_table_a8f0), xstrtoumax.loc_8a8f-switch_table_a8f0, xstrtoumax.loc_89ec-switch_table_a8f0
000000000000a91c         dd         xstrtoumax.loc_89a8-switch_table_a8f0, 2 dup (xstrtoumax.loc_89ec-switch_table_a8f0), xstrtoumax.loc_8ab0-switch_table_a8f0, 3 dup (xstrtoumax.loc_89ec-switch_table_a8f0)
000000000000a938         dd         xstrtoumax.loc_8a6f-switch_table_a8f0, 4 dup (xstrtoumax.loc_89ec-switch_table_a8f0), xstrtoumax.loc_8a4a-switch_table_a8f0, xstrtoumax.loc_8a24-switch_table_a8f0
000000000000a954         dd         7 dup (xstrtoumax.loc_89ec-switch_table_a8f0), xstrtoumax.loc_8a0d-switch_table_a8f0, xstrtoumax.loc_89d0-switch_table_a8f0, 3 dup (xstrtoumax.loc_89ec-switch_table_a8f0)
000000000000a984         dd         xstrtoumax.loc_8b0c-switch_table_a8f0, 3 dup (xstrtoumax.loc_89ec-switch_table_a8f0), xstrtoumax.loc_8a8f-switch_table_a8f0, xstrtoumax.loc_89ec-switch_table_a8f0
000000000000a99c         dd         xstrtoumax.loc_89a8-switch_table_a8f0, 6 dup (xstrtoumax.loc_89ec-switch_table_a8f0), xstrtoumax.loc_8a6f-switch_table_a8f0, 2 dup (xstrtoumax.loc_89ec-switch_table_a8f0)
000000000000a9c4         dd         xstrtoumax.loc_89f7-switch_table_a8f0
                     __PRETTY_FUNCTION__.4162_a9c8:        // __PRETTY_FUNCTION__.4162
000000000000a9c8         db         "xstrtoumax", 0                             ; DATA XREF=xstrtoumax+901
000000000000a9d3         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
000000000000a9d4         db  0x00 ; '.'
                     aPosix:
000000000000a9d5         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
000000000000a9db         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
000000000000a9e1         db  0x00 ; '.'
000000000000a9e2         db  0x00 ; '.'
000000000000a9e3         db  0x00 ; '.'


        ; Section .eh_frame_hdr
        ; Range: [0xa9e4; 0xad08[ (804 bytes)
        ; File offset : [43492; 44296[ (804 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000a9e4         db  0x01 ; '.'
000000000000a9e5         db  0x1b ; '.'
000000000000a9e6         db  0x03 ; '.'
000000000000a9e7         db  0x3b ; ';'
000000000000a9e8         db  0x20 ; ' '
000000000000a9e9         db  0x03 ; '.'
000000000000a9ea         db  0x00 ; '.'
000000000000a9eb         db  0x00 ; '.'
000000000000a9ec         db  0x63 ; 'c'
000000000000a9ed         db  0x00 ; '.'
000000000000a9ee         db  0x00 ; '.'
000000000000a9ef         db  0x00 ; '.'
000000000000a9f0         db  0xfc ; '.'
000000000000a9f1         db  0x6d ; 'm'
000000000000a9f2         db  0xff ; '.'
000000000000a9f3         db  0xff ; '.'
000000000000a9f4         db  0x6c ; 'l'
000000000000a9f5         db  0x03 ; '.'
000000000000a9f6         db  0x00 ; '.'
000000000000a9f7         db  0x00 ; '.'
000000000000a9f8         db  0xbc ; '.'
000000000000a9f9         db  0x71 ; 'q'
000000000000a9fa         db  0xff ; '.'
000000000000a9fb         db  0xff ; '.'
000000000000a9fc         db  0x94 ; '.'
000000000000a9fd         db  0x03 ; '.'
000000000000a9fe         db  0x00 ; '.'
000000000000a9ff         db  0x00 ; '.'
000000000000aa00         db  0xcc ; '.'
000000000000aa01         db  0x71 ; 'q'
000000000000aa02         db  0xff ; '.'
000000000000aa03         db  0xff ; '.'
000000000000aa04         db  0xa8 ; '.'
000000000000aa05         db  0x04 ; '.'
000000000000aa06         db  0x00 ; '.'
000000000000aa07         db  0x00 ; '.'
000000000000aa08         db  0x1c ; '.'
000000000000aa09         db  0x86 ; '.'
000000000000aa0a         db  0xff ; '.'
000000000000aa0b         db  0xff ; '.'
000000000000aa0c         db  0x3c ; '<'
000000000000aa0d         db  0x03 ; '.'
000000000000aa0e         db  0x00 ; '.'
000000000000aa0f         db  0x00 ; '.'
000000000000aa10         db  0x2c ; ','
000000000000aa11         db  0x87 ; '.'
000000000000aa12         db  0xff ; '.'
000000000000aa13         db  0xff ; '.'
000000000000aa14         db  0xac ; '.'
000000000000aa15         db  0x03 ; '.'
000000000000aa16         db  0x00 ; '.'
000000000000aa17         db  0x00 ; '.'
000000000000aa18         db  0xac ; '.'
000000000000aa19         db  0x87 ; '.'
000000000000aa1a         db  0xff ; '.'
000000000000aa1b         db  0xff ; '.'
000000000000aa1c         db  0xc0 ; '.'
000000000000aa1d         db  0x03 ; '.'
000000000000aa1e         db  0x00 ; '.'
000000000000aa1f         db  0x00 ; '.'
000000000000aa20         db  0x0c ; '.'
000000000000aa21         db  0x88 ; '.'
000000000000aa22         db  0xff ; '.'
000000000000aa23         db  0xff ; '.'
000000000000aa24         db  0xf4 ; '.'
000000000000aa25         db  0x03 ; '.'
000000000000aa26         db  0x00 ; '.'
000000000000aa27         db  0x00 ; '.'
000000000000aa28         db  0xdc ; '.'
000000000000aa29         db  0x88 ; '.'
000000000000aa2a         db  0xff ; '.'
000000000000aa2b         db  0xff ; '.'
000000000000aa2c         db  0x2c ; ','
000000000000aa2d         db  0x04 ; '.'
000000000000aa2e         db  0x00 ; '.'
000000000000aa2f         db  0x00 ; '.'
000000000000aa30         db  0x9c ; '.'
000000000000aa31         db  0x8a ; '.'
000000000000aa32         db  0xff ; '.'
000000000000aa33         db  0xff ; '.'
000000000000aa34         db  0x7c ; '|'
000000000000aa35         db  0x04 ; '.'
000000000000aa36         db  0x00 ; '.'
000000000000aa37         db  0x00 ; '.'
000000000000aa38         db  0x1c ; '.'
000000000000aa39         db  0x8f ; '.'
000000000000aa3a         db  0xff ; '.'
000000000000aa3b         db  0xff ; '.'
000000000000aa3c         db  0x04 ; '.'
000000000000aa3d         db  0x05 ; '.'
000000000000aa3e         db  0x00 ; '.'
000000000000aa3f         db  0x00 ; '.'
000000000000aa40         db  0x0c ; '.'
000000000000aa41         db  0xa6 ; '.'
000000000000aa42         db  0xff ; '.'
000000000000aa43         db  0xff ; '.'
000000000000aa44         db  0x54 ; 'T'
000000000000aa45         db  0x05 ; '.'
000000000000aa46         db  0x00 ; '.'
000000000000aa47         db  0x00 ; '.'
000000000000aa48         db  0x1c ; '.'
000000000000aa49         db  0xa7 ; '.'
000000000000aa4a         db  0xff ; '.'
000000000000aa4b         db  0xff ; '.'
000000000000aa4c         db  0xa0 ; '.'
000000000000aa4d         db  0x05 ; '.'
000000000000aa4e         db  0x00 ; '.'
000000000000aa4f         db  0x00 ; '.'
000000000000aa50         db  0xec ; '.'
000000000000aa51         db  0xa7 ; '.'
000000000000aa52         db  0xff ; '.'
000000000000aa53         db  0xff ; '.'
000000000000aa54         db  0xb4 ; '.'
000000000000aa55         db  0x05 ; '.'
000000000000aa56         db  0x00 ; '.'
000000000000aa57         db  0x00 ; '.'
000000000000aa58         db  0x7c ; '|'
000000000000aa59         db  0xa8 ; '.'
000000000000aa5a         db  0xff ; '.'
000000000000aa5b         db  0xff ; '.'
000000000000aa5c         db  0xd0 ; '.'
000000000000aa5d         db  0x05 ; '.'
000000000000aa5e         db  0x00 ; '.'
000000000000aa5f         db  0x00 ; '.'
000000000000aa60         db  0x8c ; '.'
000000000000aa61         db  0xa9 ; '.'
000000000000aa62         db  0xff ; '.'
000000000000aa63         db  0xff ; '.'
000000000000aa64         db  0xfc ; '.'
000000000000aa65         db  0x05 ; '.'
000000000000aa66         db  0x00 ; '.'
000000000000aa67         db  0x00 ; '.'
000000000000aa68         db  0xac ; '.'
000000000000aa69         db  0xa9 ; '.'
000000000000aa6a         db  0xff ; '.'
000000000000aa6b         db  0xff ; '.'
000000000000aa6c         db  0x14 ; '.'
000000000000aa6d         db  0x06 ; '.'
000000000000aa6e         db  0x00 ; '.'
000000000000aa6f         db  0x00 ; '.'
000000000000aa70         db  0x2c ; ','
000000000000aa71         db  0xab ; '.'
000000000000aa72         db  0xff ; '.'
000000000000aa73         db  0xff ; '.'
000000000000aa74         db  0x48 ; 'H'
000000000000aa75         db  0x06 ; '.'
000000000000aa76         db  0x00 ; '.'
000000000000aa77         db  0x00 ; '.'
000000000000aa78         db  0x2c ; ','
000000000000aa79         db  0xac ; '.'
000000000000aa7a         db  0xff ; '.'
000000000000aa7b         db  0xff ; '.'
000000000000aa7c         db  0x8c ; '.'
000000000000aa7d         db  0x06 ; '.'
000000000000aa7e         db  0x00 ; '.'
000000000000aa7f         db  0x00 ; '.'
000000000000aa80         db  0x3c ; '<'
000000000000aa81         db  0xac ; '.'
000000000000aa82         db  0xff ; '.'
000000000000aa83         db  0xff ; '.'
000000000000aa84         db  0xa4 ; '.'
000000000000aa85         db  0x06 ; '.'
000000000000aa86         db  0x00 ; '.'
000000000000aa87         db  0x00 ; '.'
000000000000aa88         db  0x6c ; 'l'
000000000000aa89         db  0xad ; '.'
000000000000aa8a         db  0xff ; '.'
000000000000aa8b         db  0xff ; '.'
000000000000aa8c         db  0xf4 ; '.'
000000000000aa8d         db  0x06 ; '.'
000000000000aa8e         db  0x00 ; '.'
000000000000aa8f         db  0x00 ; '.'
000000000000aa90         db  0x7c ; '|'
000000000000aa91         db  0xad ; '.'
000000000000aa92         db  0xff ; '.'
000000000000aa93         db  0xff ; '.'
000000000000aa94         db  0x08 ; '.'
000000000000aa95         db  0x07 ; '.'
000000000000aa96         db  0x00 ; '.'
000000000000aa97         db  0x00 ; '.'
000000000000aa98         db  0x9c ; '.'
000000000000aa99         db  0xae ; '.'
000000000000aa9a         db  0xff ; '.'
000000000000aa9b         db  0xff ; '.'
000000000000aa9c         db  0x54 ; 'T'
000000000000aa9d         db  0x07 ; '.'
000000000000aa9e         db  0x00 ; '.'
000000000000aa9f         db  0x00 ; '.'
000000000000aaa0         db  0x1c ; '.'
000000000000aaa1         db  0xaf ; '.'
000000000000aaa2         db  0xff ; '.'
000000000000aaa3         db  0xff ; '.'
000000000000aaa4         db  0x80 ; '.'
000000000000aaa5         db  0x07 ; '.'
000000000000aaa6         db  0x00 ; '.'
000000000000aaa7         db  0x00 ; '.'
000000000000aaa8         db  0x3c ; '<'
000000000000aaa9         db  0xb0 ; '.'
000000000000aaaa         db  0xff ; '.'
000000000000aaab         db  0xff ; '.'
000000000000aaac         db  0xe0 ; '.'
000000000000aaad         db  0x07 ; '.'
000000000000aaae         db  0x00 ; '.'
000000000000aaaf         db  0x00 ; '.'
000000000000aab0         db  0xac ; '.'
000000000000aab1         db  0xb0 ; '.'
000000000000aab2         db  0xff ; '.'
000000000000aab3         db  0xff ; '.'
000000000000aab4         db  0x2c ; ','
000000000000aab5         db  0x08 ; '.'
000000000000aab6         db  0x00 ; '.'
000000000000aab7         db  0x00 ; '.'
000000000000aab8         db  0xfc ; '.'
000000000000aab9         db  0xb0 ; '.'
000000000000aaba         db  0xff ; '.'
000000000000aabb         db  0xff ; '.'
000000000000aabc         db  0x6c ; 'l'
000000000000aabd         db  0x08 ; '.'
000000000000aabe         db  0x00 ; '.'
000000000000aabf         db  0x00 ; '.'
000000000000aac0         db  0x0c ; '.'
000000000000aac1         db  0xb1 ; '.'
000000000000aac2         db  0xff ; '.'
000000000000aac3         db  0xff ; '.'
000000000000aac4         db  0x80 ; '.'
000000000000aac5         db  0x08 ; '.'
000000000000aac6         db  0x00 ; '.'
000000000000aac7         db  0x00 ; '.'
000000000000aac8         db  0x1c ; '.'
000000000000aac9         db  0xb1 ; '.'
000000000000aaca         db  0xff ; '.'
000000000000aacb         db  0xff ; '.'
000000000000aacc         db  0x94 ; '.'
000000000000aacd         db  0x08 ; '.'
000000000000aace         db  0x00 ; '.'
000000000000aacf         db  0x00 ; '.'
000000000000aad0         db  0xcc ; '.'
000000000000aad1         db  0xb1 ; '.'
000000000000aad2         db  0xff ; '.'
000000000000aad3         db  0xff ; '.'
000000000000aad4         db  0xc4 ; '.'
000000000000aad5         db  0x08 ; '.'
000000000000aad6         db  0x00 ; '.'
000000000000aad7         db  0x00 ; '.'
000000000000aad8         db  0xdc ; '.'
000000000000aad9         db  0xb1 ; '.'
000000000000aada         db  0xff ; '.'
000000000000aadb         db  0xff ; '.'
000000000000aadc         db  0xd8 ; '.'
000000000000aadd         db  0x08 ; '.'
000000000000aade         db  0x00 ; '.'
000000000000aadf         db  0x00 ; '.'
000000000000aae0         db  0x0c ; '.'
000000000000aae1         db  0xb2 ; '.'
000000000000aae2         db  0xff ; '.'
000000000000aae3         db  0xff ; '.'
000000000000aae4         db  0xf4 ; '.'
000000000000aae5         db  0x08 ; '.'
000000000000aae6         db  0x00 ; '.'
000000000000aae7         db  0x00 ; '.'
000000000000aae8         db  0xac ; '.'
000000000000aae9         db  0xb2 ; '.'
000000000000aaea         db  0xff ; '.'
000000000000aaeb         db  0xff ; '.'
000000000000aaec         db  0x24 ; '$'
000000000000aaed         db  0x09 ; '.'
000000000000aaee         db  0x00 ; '.'
000000000000aaef         db  0x00 ; '.'
000000000000aaf0         db  0x4c ; 'L'
000000000000aaf1         db  0xb3 ; '.'
000000000000aaf2         db  0xff ; '.'
000000000000aaf3         db  0xff ; '.'
000000000000aaf4         db  0x44 ; 'D'
000000000000aaf5         db  0x09 ; '.'
000000000000aaf6         db  0x00 ; '.'
000000000000aaf7         db  0x00 ; '.'
000000000000aaf8         db  0x3c ; '<'
000000000000aaf9         db  0xb4 ; '.'
000000000000aafa         db  0xff ; '.'
000000000000aafb         db  0xff ; '.'
000000000000aafc         db  0x88 ; '.'
000000000000aafd         db  0x09 ; '.'
000000000000aafe         db  0x00 ; '.'
000000000000aaff         db  0x00 ; '.'
000000000000ab00         db  0x7c ; '|'
000000000000ab01         db  0xc6 ; '.'
000000000000ab02         db  0xff ; '.'
000000000000ab03         db  0xff ; '.'
000000000000ab04         db  0x00 ; '.'
000000000000ab05         db  0x0a ; '.'
000000000000ab06         db  0x00 ; '.'
000000000000ab07         db  0x00 ; '.'
000000000000ab08         db  0x2c ; ','
000000000000ab09         db  0xc8 ; '.'
000000000000ab0a         db  0xff ; '.'
000000000000ab0b         db  0xff ; '.'
000000000000ab0c         db  0x6c ; 'l'
000000000000ab0d         db  0x0a ; '.'
000000000000ab0e         db  0x00 ; '.'
000000000000ab0f         db  0x00 ; '.'
000000000000ab10         db  0x6c ; 'l'
000000000000ab11         db  0xc8 ; '.'
000000000000ab12         db  0xff ; '.'
000000000000ab13         db  0xff ; '.'
000000000000ab14         db  0x98 ; '.'
000000000000ab15         db  0x0a ; '.'
000000000000ab16         db  0x00 ; '.'
000000000000ab17         db  0x00 ; '.'
000000000000ab18         db  0x8c ; '.'
000000000000ab19         db  0xc8 ; '.'
000000000000ab1a         db  0xff ; '.'
000000000000ab1b         db  0xff ; '.'
000000000000ab1c         db  0xac ; '.'
000000000000ab1d         db  0x0a ; '.'
000000000000ab1e         db  0x00 ; '.'
000000000000ab1f         db  0x00 ; '.'
000000000000ab20         db  0xac ; '.'
000000000000ab21         db  0xc8 ; '.'
000000000000ab22         db  0xff ; '.'
000000000000ab23         db  0xff ; '.'
000000000000ab24         db  0xc0 ; '.'
000000000000ab25         db  0x0a ; '.'
000000000000ab26         db  0x00 ; '.'
000000000000ab27         db  0x00 ; '.'
000000000000ab28         db  0xec ; '.'
000000000000ab29         db  0xc8 ; '.'
000000000000ab2a         db  0xff ; '.'
000000000000ab2b         db  0xff ; '.'
000000000000ab2c         db  0xd4 ; '.'
000000000000ab2d         db  0x0a ; '.'
000000000000ab2e         db  0x00 ; '.'
000000000000ab2f         db  0x00 ; '.'
000000000000ab30         db  0x0c ; '.'
000000000000ab31         db  0xc9 ; '.'
000000000000ab32         db  0xff ; '.'
000000000000ab33         db  0xff ; '.'
000000000000ab34         db  0xe8 ; '.'
000000000000ab35         db  0x0a ; '.'
000000000000ab36         db  0x00 ; '.'
000000000000ab37         db  0x00 ; '.'
000000000000ab38         db  0x3c ; '<'
000000000000ab39         db  0xc9 ; '.'
000000000000ab3a         db  0xff ; '.'
000000000000ab3b         db  0xff ; '.'
000000000000ab3c         db  0xfc ; '.'
000000000000ab3d         db  0x0a ; '.'
000000000000ab3e         db  0x00 ; '.'
000000000000ab3f         db  0x00 ; '.'
000000000000ab40         db  0xbc ; '.'
000000000000ab41         db  0xc9 ; '.'
000000000000ab42         db  0xff ; '.'
000000000000ab43         db  0xff ; '.'
000000000000ab44         db  0x50 ; 'P'
000000000000ab45         db  0x0b ; '.'
000000000000ab46         db  0x00 ; '.'
000000000000ab47         db  0x00 ; '.'
000000000000ab48         db  0xac ; '.'
000000000000ab49         db  0xca ; '.'
000000000000ab4a         db  0xff ; '.'
000000000000ab4b         db  0xff ; '.'
000000000000ab4c         db  0xbc ; '.'
000000000000ab4d         db  0x0b ; '.'
000000000000ab4e         db  0x00 ; '.'
000000000000ab4f         db  0x00 ; '.'
000000000000ab50         db  0xbc ; '.'
000000000000ab51         db  0xca ; '.'
000000000000ab52         db  0xff ; '.'
000000000000ab53         db  0xff ; '.'
000000000000ab54         db  0xd0 ; '.'
000000000000ab55         db  0x0b ; '.'
000000000000ab56         db  0x00 ; '.'
000000000000ab57         db  0x00 ; '.'
000000000000ab58         db  0x5c ; '\'
000000000000ab59         db  0xcb ; '.'
000000000000ab5a         db  0xff ; '.'
000000000000ab5b         db  0xff ; '.'
000000000000ab5c         db  0xfc ; '.'
000000000000ab5d         db  0x0b ; '.'
000000000000ab5e         db  0x00 ; '.'
000000000000ab5f         db  0x00 ; '.'
000000000000ab60         db  0x7c ; '|'
000000000000ab61         db  0xcb ; '.'
000000000000ab62         db  0xff ; '.'
000000000000ab63         db  0xff ; '.'
000000000000ab64         db  0x10 ; '.'
000000000000ab65         db  0x0c ; '.'
000000000000ab66         db  0x00 ; '.'
000000000000ab67         db  0x00 ; '.'
000000000000ab68         db  0x8c ; '.'
000000000000ab69         db  0xcb ; '.'
000000000000ab6a         db  0xff ; '.'
000000000000ab6b         db  0xff ; '.'
000000000000ab6c         db  0x24 ; '$'
000000000000ab6d         db  0x0c ; '.'
000000000000ab6e         db  0x00 ; '.'
000000000000ab6f         db  0x00 ; '.'
000000000000ab70         db  0xac ; '.'
000000000000ab71         db  0xcb ; '.'
000000000000ab72         db  0xff ; '.'
000000000000ab73         db  0xff ; '.'
000000000000ab74         db  0x38 ; '8'
000000000000ab75         db  0x0c ; '.'
000000000000ab76         db  0x00 ; '.'
000000000000ab77         db  0x00 ; '.'
000000000000ab78         db  0xcc ; '.'
000000000000ab79         db  0xcb ; '.'
000000000000ab7a         db  0xff ; '.'
000000000000ab7b         db  0xff ; '.'
000000000000ab7c         db  0x4c ; 'L'
000000000000ab7d         db  0x0c ; '.'
000000000000ab7e         db  0x00 ; '.'
000000000000ab7f         db  0x00 ; '.'
000000000000ab80         db  0x5c ; '\'
000000000000ab81         db  0xcc ; '.'
000000000000ab82         db  0xff ; '.'
000000000000ab83         db  0xff ; '.'
000000000000ab84         db  0x68 ; 'h'
000000000000ab85         db  0x0c ; '.'
000000000000ab86         db  0x00 ; '.'
000000000000ab87         db  0x00 ; '.'
000000000000ab88         db  0xec ; '.'
000000000000ab89         db  0xcc ; '.'
000000000000ab8a         db  0xff ; '.'
000000000000ab8b         db  0xff ; '.'
000000000000ab8c         db  0x84 ; '.'
000000000000ab8d         db  0x0c ; '.'
000000000000ab8e         db  0x00 ; '.'
000000000000ab8f         db  0x00 ; '.'
000000000000ab90         db  0xfc ; '.'
000000000000ab91         db  0xcc ; '.'
000000000000ab92         db  0xff ; '.'
000000000000ab93         db  0xff ; '.'
000000000000ab94         db  0x98 ; '.'
000000000000ab95         db  0x0c ; '.'
000000000000ab96         db  0x00 ; '.'
000000000000ab97         db  0x00 ; '.'
000000000000ab98         db  0x0c ; '.'
000000000000ab99         db  0xcd ; '.'
000000000000ab9a         db  0xff ; '.'
000000000000ab9b         db  0xff ; '.'
000000000000ab9c         db  0xac ; '.'
000000000000ab9d         db  0x0c ; '.'
000000000000ab9e         db  0x00 ; '.'
000000000000ab9f         db  0x00 ; '.'
000000000000aba0         db  0xac ; '.'
000000000000aba1         db  0xcd ; '.'
000000000000aba2         db  0xff ; '.'
000000000000aba3         db  0xff ; '.'
000000000000aba4         db  0xc8 ; '.'
000000000000aba5         db  0x0c ; '.'
000000000000aba6         db  0x00 ; '.'
000000000000aba7         db  0x00 ; '.'
000000000000aba8         db  0xbc ; '.'
000000000000aba9         db  0xcd ; '.'
000000000000abaa         db  0xff ; '.'
000000000000abab         db  0xff ; '.'
000000000000abac         db  0xdc ; '.'
000000000000abad         db  0x0c ; '.'
000000000000abae         db  0x00 ; '.'
000000000000abaf         db  0x00 ; '.'
000000000000abb0         db  0xdc ; '.'
000000000000abb1         db  0xcd ; '.'
000000000000abb2         db  0xff ; '.'
000000000000abb3         db  0xff ; '.'
000000000000abb4         db  0xf0 ; '.'
000000000000abb5         db  0x0c ; '.'
000000000000abb6         db  0x00 ; '.'
000000000000abb7         db  0x00 ; '.'
000000000000abb8         db  0xec ; '.'
000000000000abb9         db  0xcd ; '.'
000000000000abba         db  0xff ; '.'
000000000000abbb         db  0xff ; '.'
000000000000abbc         db  0x04 ; '.'
000000000000abbd         db  0x0d ; '.'
000000000000abbe         db  0x00 ; '.'
000000000000abbf         db  0x00 ; '.'
000000000000abc0         db  0x7c ; '|'
000000000000abc1         db  0xce ; '.'
000000000000abc2         db  0xff ; '.'
000000000000abc3         db  0xff ; '.'
000000000000abc4         db  0x20 ; ' '
000000000000abc5         db  0x0d ; '.'
000000000000abc6         db  0x00 ; '.'
000000000000abc7         db  0x00 ; '.'
000000000000abc8         db  0x1c ; '.'
000000000000abc9         db  0xcf ; '.'
000000000000abca         db  0xff ; '.'
000000000000abcb         db  0xff ; '.'
000000000000abcc         db  0x3c ; '<'
000000000000abcd         db  0x0d ; '.'
000000000000abce         db  0x00 ; '.'
000000000000abcf         db  0x00 ; '.'
000000000000abd0         db  0x2c ; ','
000000000000abd1         db  0xcf ; '.'
000000000000abd2         db  0xff ; '.'
000000000000abd3         db  0xff ; '.'
000000000000abd4         db  0x50 ; 'P'
000000000000abd5         db  0x0d ; '.'
000000000000abd6         db  0x00 ; '.'
000000000000abd7         db  0x00 ; '.'
000000000000abd8         db  0x4c ; 'L'
000000000000abd9         db  0xcf ; '.'
000000000000abda         db  0xff ; '.'
000000000000abdb         db  0xff ; '.'
000000000000abdc         db  0x64 ; 'd'
000000000000abdd         db  0x0d ; '.'
000000000000abde         db  0x00 ; '.'
000000000000abdf         db  0x00 ; '.'
000000000000abe0         db  0x6c ; 'l'
000000000000abe1         db  0xcf ; '.'
000000000000abe2         db  0xff ; '.'
000000000000abe3         db  0xff ; '.'
000000000000abe4         db  0x78 ; 'x'
000000000000abe5         db  0x0d ; '.'
000000000000abe6         db  0x00 ; '.'
000000000000abe7         db  0x00 ; '.'
000000000000abe8         db  0x7c ; '|'
000000000000abe9         db  0xcf ; '.'
000000000000abea         db  0xff ; '.'
000000000000abeb         db  0xff ; '.'
000000000000abec         db  0x8c ; '.'
000000000000abed         db  0x0d ; '.'
000000000000abee         db  0x00 ; '.'
000000000000abef         db  0x00 ; '.'
000000000000abf0         db  0x9c ; '.'
000000000000abf1         db  0xcf ; '.'
000000000000abf2         db  0xff ; '.'
000000000000abf3         db  0xff ; '.'
000000000000abf4         db  0xa0 ; '.'
000000000000abf5         db  0x0d ; '.'
000000000000abf6         db  0x00 ; '.'
000000000000abf7         db  0x00 ; '.'
000000000000abf8         db  0xbc ; '.'
000000000000abf9         db  0xcf ; '.'
000000000000abfa         db  0xff ; '.'
000000000000abfb         db  0xff ; '.'
000000000000abfc         db  0xb4 ; '.'
000000000000abfd         db  0x0d ; '.'
000000000000abfe         db  0x00 ; '.'
000000000000abff         db  0x00 ; '.'
000000000000ac00         db  0xdc ; '.'
000000000000ac01         db  0xcf ; '.'
000000000000ac02         db  0xff ; '.'
000000000000ac03         db  0xff ; '.'
000000000000ac04         db  0xcc ; '.'
000000000000ac05         db  0x0d ; '.'
000000000000ac06         db  0x00 ; '.'
000000000000ac07         db  0x00 ; '.'
000000000000ac08         db  0xec ; '.'
000000000000ac09         db  0xcf ; '.'
000000000000ac0a         db  0xff ; '.'
000000000000ac0b         db  0xff ; '.'
000000000000ac0c         db  0xe4 ; '.'
000000000000ac0d         db  0x0d ; '.'
000000000000ac0e         db  0x00 ; '.'
000000000000ac0f         db  0x00 ; '.'
000000000000ac10         db  0x0c ; '.'
000000000000ac11         db  0xd4 ; '.'
000000000000ac12         db  0xff ; '.'
000000000000ac13         db  0xff ; '.'
000000000000ac14         db  0xf8 ; '.'
000000000000ac15         db  0x0e ; '.'
000000000000ac16         db  0x00 ; '.'
000000000000ac17         db  0x00 ; '.'
000000000000ac18         db  0x2c ; ','
000000000000ac19         db  0xd4 ; '.'
000000000000ac1a         db  0xff ; '.'
000000000000ac1b         db  0xff ; '.'
000000000000ac1c         db  0x0c ; '.'
000000000000ac1d         db  0x0f ; '.'
000000000000ac1e         db  0x00 ; '.'
000000000000ac1f         db  0x00 ; '.'
000000000000ac20         db  0xac ; '.'
000000000000ac21         db  0xd4 ; '.'
000000000000ac22         db  0xff ; '.'
000000000000ac23         db  0xff ; '.'
000000000000ac24         db  0x28 ; '('
000000000000ac25         db  0x0f ; '.'
000000000000ac26         db  0x00 ; '.'
000000000000ac27         db  0x00 ; '.'
000000000000ac28         db  0x8c ; '.'
000000000000ac29         db  0xd5 ; '.'
000000000000ac2a         db  0xff ; '.'
000000000000ac2b         db  0xff ; '.'
000000000000ac2c         db  0x54 ; 'T'
000000000000ac2d         db  0x0f ; '.'
000000000000ac2e         db  0x00 ; '.'
000000000000ac2f         db  0x00 ; '.'
000000000000ac30         db  0x0c ; '.'
000000000000ac31         db  0xd6 ; '.'
000000000000ac32         db  0xff ; '.'
000000000000ac33         db  0xff ; '.'
000000000000ac34         db  0x74 ; 't'
000000000000ac35         db  0x0f ; '.'
000000000000ac36         db  0x00 ; '.'
000000000000ac37         db  0x00 ; '.'
000000000000ac38         db  0x2c ; ','
000000000000ac39         db  0xd6 ; '.'
000000000000ac3a         db  0xff ; '.'
000000000000ac3b         db  0xff ; '.'
000000000000ac3c         db  0x90 ; '.'
000000000000ac3d         db  0x0f ; '.'
000000000000ac3e         db  0x00 ; '.'
000000000000ac3f         db  0x00 ; '.'
000000000000ac40         db  0x5c ; '\'
000000000000ac41         db  0xd6 ; '.'
000000000000ac42         db  0xff ; '.'
000000000000ac43         db  0xff ; '.'
000000000000ac44         db  0xa4 ; '.'
000000000000ac45         db  0x0f ; '.'
000000000000ac46         db  0x00 ; '.'
000000000000ac47         db  0x00 ; '.'
000000000000ac48         db  0x6c ; 'l'
000000000000ac49         db  0xd6 ; '.'
000000000000ac4a         db  0xff ; '.'
000000000000ac4b         db  0xff ; '.'
000000000000ac4c         db  0xb8 ; '.'
000000000000ac4d         db  0x0f ; '.'
000000000000ac4e         db  0x00 ; '.'
000000000000ac4f         db  0x00 ; '.'
000000000000ac50         db  0xac ; '.'
000000000000ac51         db  0xd6 ; '.'
000000000000ac52         db  0xff ; '.'
000000000000ac53         db  0xff ; '.'
000000000000ac54         db  0xdc ; '.'
000000000000ac55         db  0x0f ; '.'
000000000000ac56         db  0x00 ; '.'
000000000000ac57         db  0x00 ; '.'
000000000000ac58         db  0xdc ; '.'
000000000000ac59         db  0xd6 ; '.'
000000000000ac5a         db  0xff ; '.'
000000000000ac5b         db  0xff ; '.'
000000000000ac5c         db  0xf0 ; '.'
000000000000ac5d         db  0x0f ; '.'
000000000000ac5e         db  0x00 ; '.'
000000000000ac5f         db  0x00 ; '.'
000000000000ac60         db  0x6c ; 'l'
000000000000ac61         db  0xd7 ; '.'
000000000000ac62         db  0xff ; '.'
000000000000ac63         db  0xff ; '.'
000000000000ac64         db  0x08 ; '.'
000000000000ac65         db  0x10 ; '.'
000000000000ac66         db  0x00 ; '.'
000000000000ac67         db  0x00 ; '.'
000000000000ac68         db  0xbc ; '.'
000000000000ac69         db  0xd7 ; '.'
000000000000ac6a         db  0xff ; '.'
000000000000ac6b         db  0xff ; '.'
000000000000ac6c         db  0x20 ; ' '
000000000000ac6d         db  0x10 ; '.'
000000000000ac6e         db  0x00 ; '.'
000000000000ac6f         db  0x00 ; '.'
000000000000ac70         db  0xdc ; '.'
000000000000ac71         db  0xd7 ; '.'
000000000000ac72         db  0xff ; '.'
000000000000ac73         db  0xff ; '.'
000000000000ac74         db  0x3c ; '<'
000000000000ac75         db  0x10 ; '.'
000000000000ac76         db  0x00 ; '.'
000000000000ac77         db  0x00 ; '.'
000000000000ac78         db  0x0c ; '.'
000000000000ac79         db  0xd8 ; '.'
000000000000ac7a         db  0xff ; '.'
000000000000ac7b         db  0xff ; '.'
000000000000ac7c         db  0x58 ; 'X'
000000000000ac7d         db  0x10 ; '.'
000000000000ac7e         db  0x00 ; '.'
000000000000ac7f         db  0x00 ; '.'
000000000000ac80         db  0x3c ; '<'
000000000000ac81         db  0xd8 ; '.'
000000000000ac82         db  0xff ; '.'
000000000000ac83         db  0xff ; '.'
000000000000ac84         db  0x80 ; '.'
000000000000ac85         db  0x10 ; '.'
000000000000ac86         db  0x00 ; '.'
000000000000ac87         db  0x00 ; '.'
000000000000ac88         db  0x5c ; '\'
000000000000ac89         db  0xd8 ; '.'
000000000000ac8a         db  0xff ; '.'
000000000000ac8b         db  0xff ; '.'
000000000000ac8c         db  0x9c ; '.'
000000000000ac8d         db  0x10 ; '.'
000000000000ac8e         db  0x00 ; '.'
000000000000ac8f         db  0x00 ; '.'
000000000000ac90         db  0x9c ; '.'
000000000000ac91         db  0xd8 ; '.'
000000000000ac92         db  0xff ; '.'
000000000000ac93         db  0xff ; '.'
000000000000ac94         db  0xb4 ; '.'
000000000000ac95         db  0x10 ; '.'
000000000000ac96         db  0x00 ; '.'
000000000000ac97         db  0x00 ; '.'
000000000000ac98         db  0x9c ; '.'
000000000000ac99         db  0xd9 ; '.'
000000000000ac9a         db  0xff ; '.'
000000000000ac9b         db  0xff ; '.'
000000000000ac9c         db  0x00 ; '.'
000000000000ac9d         db  0x11 ; '.'
000000000000ac9e         db  0x00 ; '.'
000000000000ac9f         db  0x00 ; '.'
000000000000aca0         db  0xcc ; '.'
000000000000aca1         db  0xd9 ; '.'
000000000000aca2         db  0xff ; '.'
000000000000aca3         db  0xff ; '.'
000000000000aca4         db  0x1c ; '.'
000000000000aca5         db  0x11 ; '.'
000000000000aca6         db  0x00 ; '.'
000000000000aca7         db  0x00 ; '.'
000000000000aca8         db  0xec ; '.'
000000000000aca9         db  0xdd ; '.'
000000000000acaa         db  0xff ; '.'
000000000000acab         db  0xff ; '.'
000000000000acac         db  0x6c ; 'l'
000000000000acad         db  0x11 ; '.'
000000000000acae         db  0x00 ; '.'
000000000000acaf         db  0x00 ; '.'
000000000000acb0         db  0x0c ; '.'
000000000000acb1         db  0xe2 ; '.'
000000000000acb2         db  0xff ; '.'
000000000000acb3         db  0xff ; '.'
000000000000acb4         db  0xbc ; '.'
000000000000acb5         db  0x11 ; '.'
000000000000acb6         db  0x00 ; '.'
000000000000acb7         db  0x00 ; '.'
000000000000acb8         db  0x8c ; '.'
000000000000acb9         db  0xe2 ; '.'
000000000000acba         db  0xff ; '.'
000000000000acbb         db  0xff ; '.'
000000000000acbc         db  0xf4 ; '.'
000000000000acbd         db  0x11 ; '.'
000000000000acbe         db  0x00 ; '.'
000000000000acbf         db  0x00 ; '.'
000000000000acc0         db  0x0c ; '.'
000000000000acc1         db  0xe5 ; '.'
000000000000acc2         db  0xff ; '.'
000000000000acc3         db  0xff ; '.'
000000000000acc4         db  0x2c ; ','
000000000000acc5         db  0x12 ; '.'
000000000000acc6         db  0x00 ; '.'
000000000000acc7         db  0x00 ; '.'
000000000000acc8         db  0x4c ; 'L'
000000000000acc9         db  0xe5 ; '.'
000000000000acca         db  0xff ; '.'
000000000000accb         db  0xff ; '.'
000000000000accc         db  0x4c ; 'L'
000000000000accd         db  0x12 ; '.'
000000000000acce         db  0x00 ; '.'
000000000000accf         db  0x00 ; '.'
000000000000acd0         db  0xac ; '.'
000000000000acd1         db  0xe5 ; '.'
000000000000acd2         db  0xff ; '.'
000000000000acd3         db  0xff ; '.'
000000000000acd4         db  0x7c ; '|'
000000000000acd5         db  0x12 ; '.'
000000000000acd6         db  0x00 ; '.'
000000000000acd7         db  0x00 ; '.'
000000000000acd8         db  0x3c ; '<'
000000000000acd9         db  0xe6 ; '.'
000000000000acda         db  0xff ; '.'
000000000000acdb         db  0xff ; '.'
000000000000acdc         db  0xbc ; '.'
000000000000acdd         db  0x12 ; '.'
000000000000acde         db  0x00 ; '.'
000000000000acdf         db  0x00 ; '.'
000000000000ace0         db  0xbc ; '.'
000000000000ace1         db  0xe6 ; '.'
000000000000ace2         db  0xff ; '.'
000000000000ace3         db  0xff ; '.'
000000000000ace4         db  0x0c ; '.'
000000000000ace5         db  0x13 ; '.'
000000000000ace6         db  0x00 ; '.'
000000000000ace7         db  0x00 ; '.'
000000000000ace8         db  0x1c ; '.'
000000000000ace9         db  0xe7 ; '.'
000000000000acea         db  0xff ; '.'
000000000000aceb         db  0xff ; '.'
000000000000acec         db  0x2c ; ','
000000000000aced         db  0x13 ; '.'
000000000000acee         db  0x00 ; '.'
000000000000acef         db  0x00 ; '.'
000000000000acf0         db  0x5c ; '\'
000000000000acf1         db  0xe7 ; '.'
000000000000acf2         db  0xff ; '.'
000000000000acf3         db  0xff ; '.'
000000000000acf4         db  0x4c ; 'L'
000000000000acf5         db  0x13 ; '.'
000000000000acf6         db  0x00 ; '.'
000000000000acf7         db  0x00 ; '.'
000000000000acf8         db  0xcc ; '.'
000000000000acf9         db  0xe7 ; '.'
000000000000acfa         db  0xff ; '.'
000000000000acfb         db  0xff ; '.'
000000000000acfc         db  0x94 ; '.'
000000000000acfd         db  0x13 ; '.'
000000000000acfe         db  0x00 ; '.'
000000000000acff         db  0x00 ; '.'
000000000000ad00         db  0xdc ; '.'
000000000000ad01         db  0xe7 ; '.'
000000000000ad02         db  0xff ; '.'
000000000000ad03         db  0xff ; '.'
000000000000ad04         db  0xac ; '.'
000000000000ad05         db  0x13 ; '.'
000000000000ad06         db  0x00 ; '.'
000000000000ad07         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0xad08; 0xbda8[ (4256 bytes)
        ; File offset : [44296; 48552[ (4256 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000ad08         dd         0x00000014                                  ; Length of the record
000000000000ad0c         dd         0x00000000                                  ; CIE ID
000000000000ad10         db         0x01                                        ; Version
000000000000ad11         db         "zR", 0                                     ; Augmentation String
000000000000ad14         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000ad15         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000ad16         db         0x10                                        ; Return address register
000000000000ad17         db         0x01                                        ; Augmentation data length
000000000000ad18         db         0x1b                                        ; FDE encoding
000000000000ad19         db  0x0c ; '.'
000000000000ad1a         db  0x07 ; '.'
000000000000ad1b         db  0x08 ; '.'
000000000000ad1c         db  0x90 ; '.'
000000000000ad1d         db  0x01 ; '.'
000000000000ad1e         db  0x07 ; '.'
000000000000ad1f         db  0x10 ; '.'
000000000000ad20         dd         0x00000014                                  ; Length of the record
000000000000ad24         dd         0x0000001c                                  ; FDE: parent CIE at 0xad08 (FDE encoding = 0x1B)
000000000000ad28         db         0xd8, 0x82, 2 dup (0xff)                    ; begin 0x3000
000000000000ad2c         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x302b)
000000000000ad30         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ad31         align      8
000000000000ad38         dd         0x00000014                                  ; Length of the record
000000000000ad3c         dd         0x00000000                                  ; CIE ID
000000000000ad40         db         0x01                                        ; Version
000000000000ad41         db         "zR", 0                                     ; Augmentation String
000000000000ad44         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000ad45         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000ad46         db         0x10                                        ; Return address register
000000000000ad47         db         0x01                                        ; Augmentation data length
000000000000ad48         db         0x1b                                        ; FDE encoding
000000000000ad49         db  0x0c ; '.'
000000000000ad4a         db  0x07 ; '.'
000000000000ad4b         db  0x08 ; '.'
000000000000ad4c         db  0x90 ; '.'
000000000000ad4d         db  0x01 ; '.'
000000000000ad4e         db  0x00 ; '.'
000000000000ad4f         db  0x00 ; '.'
000000000000ad50         dd         0x00000024                                  ; Length of the record
000000000000ad54         dd         0x0000001c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000ad58         db         0x88, 0x6a, 2 dup (0xff)                    ; begin 0x17e0
000000000000ad5c         db         0xc0, 0x03, 2 dup (0x00)                    ; length 0x3c0 (end at 0x1ba0)
000000000000ad60         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ad61         db  0x0e ; '.'
000000000000ad62         db  0x10 ; '.'
000000000000ad63         db  0x46 ; 'F'
000000000000ad64         db  0x0e ; '.'
000000000000ad65         db  0x18 ; '.'
000000000000ad66         db  0x4a ; 'J'
000000000000ad67         db  0x0f ; '.'
000000000000ad68         db  0x0b ; '.'
000000000000ad69         db  0x77 ; 'w'
000000000000ad6a         db  0x08 ; '.'
000000000000ad6b         db  0x80 ; '.'
000000000000ad6c         db  0x00 ; '.'
000000000000ad6d         db  0x3f ; '?'
000000000000ad6e         db  0x1a ; '.'
000000000000ad6f         db  0x3b ; ';'
000000000000ad70         db  0x2a ; '*'
000000000000ad71         db  0x33 ; '3'
000000000000ad72         db  0x24 ; '$'
000000000000ad73         db  0x22 ; '"'
000000000000ad74         db  0x00 ; '.'
000000000000ad75         db  0x00 ; '.'
000000000000ad76         db  0x00 ; '.'
000000000000ad77         db  0x00 ; '.'
000000000000ad78         dd         0x00000014                                  ; Length of the record
000000000000ad7c         dd         0x00000044                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000ad80         db         0x20, 0x6e, 2 dup (0xff)                    ; begin 0x1ba0
000000000000ad84         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x1ba8)
000000000000ad88         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ad89         align      16
000000000000ad90         dd         0x00000010                                  ; Length of the record
000000000000ad94         dd         0x0000005c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000ad98         db         0x78, 0x83, 2 dup (0xff)                    ; begin 0x3110
000000000000ad9c         db         0x79, 3 dup (0x00)                          ; length 0x79 (end at 0x3189)
000000000000ada0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ada1         align      4
000000000000ada4         dd         0x00000030                                  ; Length of the record
000000000000ada8         dd         0x00000070                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000adac         db         0xe4, 0x83, 2 dup (0xff)                    ; begin 0x3190
000000000000adb0         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x31f0)
000000000000adb4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000adb5         db  0x41 ; 'A'
000000000000adb6         db  0x0e ; '.'
000000000000adb7         db  0x10 ; '.'
000000000000adb8         db  0x86 ; '.'
000000000000adb9         db  0x02 ; '.'
000000000000adba         db  0x41 ; 'A'
000000000000adbb         db  0x0e ; '.'
000000000000adbc         db  0x18 ; '.'
000000000000adbd         db  0x83 ; '.'
000000000000adbe         db  0x03 ; '.'
000000000000adbf         db  0x44 ; 'D'
000000000000adc0         db  0x0e ; '.'
000000000000adc1         db  0x20 ; ' '
000000000000adc2         db  0x7d ; '}'
000000000000adc3         db  0x0a ; '.'
000000000000adc4         db  0x0e ; '.'
000000000000adc5         db  0x18 ; '.'
000000000000adc6         db  0x43 ; 'C'
000000000000adc7         db  0x0e ; '.'
000000000000adc8         db  0x10 ; '.'
000000000000adc9         db  0x41 ; 'A'
000000000000adca         db  0x0e ; '.'
000000000000adcb         db  0x08 ; '.'
000000000000adcc         db  0x49 ; 'I'
000000000000adcd         db  0x0b ; '.'
000000000000adce         db  0x4d ; 'M'
000000000000adcf         db  0x0e ; '.'
000000000000add0         db  0x18 ; '.'
000000000000add1         db  0x41 ; 'A'
000000000000add2         db  0x0e ; '.'
000000000000add3         db  0x10 ; '.'
000000000000add4         db  0x41 ; 'A'
000000000000add5         db  0x0e ; '.'
000000000000add6         db  0x08 ; '.'
000000000000add7         db  0x00 ; '.'
000000000000add8         dd         0x00000034                                  ; Length of the record
000000000000addc         dd         0x000000a4                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000ade0         db         0x10, 0x84, 2 dup (0xff)                    ; begin 0x31f0
000000000000ade4         db         0xc5, 3 dup (0x00)                          ; length 0xc5 (end at 0x32b5)
000000000000ade8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ade9         db  0x41 ; 'A'
000000000000adea         db  0x0e ; '.'
000000000000adeb         db  0x10 ; '.'
000000000000adec         db  0x86 ; '.'
000000000000aded         db  0x02 ; '.'
000000000000adee         db  0x41 ; 'A'
000000000000adef         db  0x0e ; '.'
000000000000adf0         db  0x18 ; '.'
000000000000adf1         db  0x83 ; '.'
000000000000adf2         db  0x03 ; '.'
000000000000adf3         db  0x47 ; 'G'
000000000000adf4         db  0x0e ; '.'
000000000000adf5         db  0x20 ; ' '
000000000000adf6         db  0x02 ; '.'
000000000000adf7         db  0x79 ; 'y'
000000000000adf8         db  0x0a ; '.'
000000000000adf9         db  0x0e ; '.'
000000000000adfa         db  0x18 ; '.'
000000000000adfb         db  0x41 ; 'A'
000000000000adfc         db  0x0e ; '.'
000000000000adfd         db  0x10 ; '.'
000000000000adfe         db  0x41 ; 'A'
000000000000adff         db  0x0e ; '.'
000000000000ae00         db  0x08 ; '.'
000000000000ae01         db  0x44 ; 'D'
000000000000ae02         db  0x0b ; '.'
000000000000ae03         db  0x63 ; 'c'
000000000000ae04         db  0x0a ; '.'
000000000000ae05         db  0x0e ; '.'
000000000000ae06         db  0x18 ; '.'
000000000000ae07         db  0x41 ; 'A'
000000000000ae08         db  0x0e ; '.'
000000000000ae09         db  0x10 ; '.'
000000000000ae0a         db  0x41 ; 'A'
000000000000ae0b         db  0x0e ; '.'
000000000000ae0c         db  0x08 ; '.'
000000000000ae0d         db  0x4b ; 'K'
000000000000ae0e         db  0x0b ; '.'
000000000000ae0f         db  0x00 ; '.'
000000000000ae10         dd         0x0000004c                                  ; Length of the record
000000000000ae14         dd         0x000000dc                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000ae18         db         0xa8, 0x84, 2 dup (0xff)                    ; begin 0x32c0
000000000000ae1c         db         0xba, 0x01, 2 dup (0x00)                    ; length 0x1ba (end at 0x347a)
000000000000ae20         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ae21         db  0x42 ; 'B'
000000000000ae22         db  0x0e ; '.'
000000000000ae23         db  0x10 ; '.'
000000000000ae24         db  0x8d ; '.'
000000000000ae25         db  0x02 ; '.'
000000000000ae26         db  0x42 ; 'B'
000000000000ae27         db  0x0e ; '.'
000000000000ae28         db  0x18 ; '.'
000000000000ae29         db  0x8c ; '.'
000000000000ae2a         db  0x03 ; '.'
000000000000ae2b         db  0x46 ; 'F'
000000000000ae2c         db  0x0e ; '.'
000000000000ae2d         db  0x20 ; ' '
000000000000ae2e         db  0x86 ; '.'
000000000000ae2f         db  0x04 ; '.'
000000000000ae30         db  0x41 ; 'A'
000000000000ae31         db  0x0e ; '.'
000000000000ae32         db  0x28 ; '('
000000000000ae33         db  0x83 ; '.'
000000000000ae34         db  0x05 ; '.'
000000000000ae35         db  0x54 ; 'T'
000000000000ae36         db  0x0e ; '.'
000000000000ae37         db  0x30 ; '0'
000000000000ae38         db  0x02 ; '.'
000000000000ae39         db  0x51 ; 'Q'
000000000000ae3a         db  0x0a ; '.'
000000000000ae3b         db  0x0e ; '.'
000000000000ae3c         db  0x28 ; '('
000000000000ae3d         db  0x44 ; 'D'
000000000000ae3e         db  0x0e ; '.'
000000000000ae3f         db  0x20 ; ' '
000000000000ae40         db  0x41 ; 'A'
000000000000ae41         db  0x0e ; '.'
000000000000ae42         db  0x18 ; '.'
000000000000ae43         db  0x42 ; 'B'
000000000000ae44         db  0x0e ; '.'
000000000000ae45         db  0x10 ; '.'
000000000000ae46         db  0x42 ; 'B'
000000000000ae47         db  0x0e ; '.'
000000000000ae48         db  0x08 ; '.'
000000000000ae49         db  0x47 ; 'G'
000000000000ae4a         db  0x0b ; '.'
000000000000ae4b         db  0x02 ; '.'
000000000000ae4c         db  0x44 ; 'D'
000000000000ae4d         db  0x0a ; '.'
000000000000ae4e         db  0x0e ; '.'
000000000000ae4f         db  0x28 ; '('
000000000000ae50         db  0x44 ; 'D'
000000000000ae51         db  0x0e ; '.'
000000000000ae52         db  0x20 ; ' '
000000000000ae53         db  0x41 ; 'A'
000000000000ae54         db  0x0e ; '.'
000000000000ae55         db  0x18 ; '.'
000000000000ae56         db  0x42 ; 'B'
000000000000ae57         db  0x0e ; '.'
000000000000ae58         db  0x10 ; '.'
000000000000ae59         db  0x42 ; 'B'
000000000000ae5a         db  0x0e ; '.'
000000000000ae5b         db  0x08 ; '.'
000000000000ae5c         db  0x43 ; 'C'
000000000000ae5d         db  0x0b ; '.'
000000000000ae5e         db  0x00 ; '.'
000000000000ae5f         db  0x00 ; '.'
000000000000ae60         dd         0x00000028                                  ; Length of the record
000000000000ae64         dd         0x0000012c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000ae68         db         0x18, 0x86, 2 dup (0xff)                    ; begin 0x3480
000000000000ae6c         db         0x7a, 0x04, 2 dup (0x00)                    ; length 0x47a (end at 0x38fa)
000000000000ae70         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ae71         db  0x42 ; 'B'
000000000000ae72         db  0x0e ; '.'
000000000000ae73         db  0x10 ; '.'
000000000000ae74         db  0x8d ; '.'
000000000000ae75         db  0x02 ; '.'
000000000000ae76         db  0x42 ; 'B'
000000000000ae77         db  0x0e ; '.'
000000000000ae78         db  0x18 ; '.'
000000000000ae79         db  0x8c ; '.'
000000000000ae7a         db  0x03 ; '.'
000000000000ae7b         db  0x46 ; 'F'
000000000000ae7c         db  0x0e ; '.'
000000000000ae7d         db  0x20 ; ' '
000000000000ae7e         db  0x86 ; '.'
000000000000ae7f         db  0x04 ; '.'
000000000000ae80         db  0x41 ; 'A'
000000000000ae81         db  0x0e ; '.'
000000000000ae82         db  0x28 ; '('
000000000000ae83         db  0x83 ; '.'
000000000000ae84         db  0x05 ; '.'
000000000000ae85         db  0x49 ; 'I'
000000000000ae86         db  0x0e ; '.'
000000000000ae87         db  0xb0 ; '.'
000000000000ae88         db  0x01 ; '.'
000000000000ae89         db  0x00 ; '.'
000000000000ae8a         db  0x00 ; '.'
000000000000ae8b         db  0x00 ; '.'
000000000000ae8c         dd         0x00000058                                  ; Length of the record
000000000000ae90         dd         0x00000158                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000ae94         db         0x1c, 0x6d, 2 dup (0xff)                    ; begin 0x1bb0
000000000000ae98         db         0x4b, 0x14, 2 dup (0x00)                    ; length 0x144b (end at 0x2ffb)
000000000000ae9c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ae9d         db  0x42 ; 'B'
000000000000ae9e         db  0x0e ; '.'
000000000000ae9f         db  0x10 ; '.'
000000000000aea0         db  0x8f ; '.'
000000000000aea1         db  0x02 ; '.'
000000000000aea2         db  0x42 ; 'B'
000000000000aea3         db  0x0e ; '.'
000000000000aea4         db  0x18 ; '.'
000000000000aea5         db  0x8e ; '.'
000000000000aea6         db  0x03 ; '.'
000000000000aea7         db  0x45 ; 'E'
000000000000aea8         db  0x0e ; '.'
000000000000aea9         db  0x20 ; ' '
000000000000aeaa         db  0x8d ; '.'
000000000000aeab         db  0x04 ; '.'
000000000000aeac         db  0x42 ; 'B'
000000000000aead         db  0x0e ; '.'
000000000000aeae         db  0x28 ; '('
000000000000aeaf         db  0x8c ; '.'
000000000000aeb0         db  0x05 ; '.'
000000000000aeb1         db  0x44 ; 'D'
000000000000aeb2         db  0x0e ; '.'
000000000000aeb3         db  0x30 ; '0'
000000000000aeb4         db  0x86 ; '.'
000000000000aeb5         db  0x06 ; '.'
000000000000aeb6         db  0x41 ; 'A'
000000000000aeb7         db  0x0e ; '.'
000000000000aeb8         db  0x38 ; '8'
000000000000aeb9         db  0x83 ; '.'
000000000000aeba         db  0x07 ; '.'
000000000000aebb         db  0x56 ; 'V'
000000000000aebc         db  0x0e ; '.'
000000000000aebd         db  0x80 ; '.'
000000000000aebe         db  0x03 ; '.'
000000000000aebf         db  0x03 ; '.'
000000000000aec0         db  0x51 ; 'Q'
000000000000aec1         db  0x01 ; '.'
000000000000aec2         db  0x0a ; '.'
000000000000aec3         db  0x0e ; '.'
000000000000aec4         db  0x88 ; '.'
000000000000aec5         db  0x03 ; '.'
000000000000aec6         db  0x50 ; 'P'
000000000000aec7         db  0x0e ; '.'
000000000000aec8         db  0x90 ; '.'
000000000000aec9         db  0x03 ; '.'
000000000000aeca         db  0x71 ; 'q'
000000000000aecb         db  0x0b ; '.'
000000000000aecc         db  0x03 ; '.'
000000000000aecd         db  0xf2 ; '.'
000000000000aece         db  0x08 ; '.'
000000000000aecf         db  0x0a ; '.'
000000000000aed0         db  0x0e ; '.'
000000000000aed1         db  0x38 ; '8'
000000000000aed2         db  0x41 ; 'A'
000000000000aed3         db  0x0e ; '.'
000000000000aed4         db  0x30 ; '0'
000000000000aed5         db  0x41 ; 'A'
000000000000aed6         db  0x0e ; '.'
000000000000aed7         db  0x28 ; '('
000000000000aed8         db  0x42 ; 'B'
000000000000aed9         db  0x0e ; '.'
000000000000aeda         db  0x20 ; ' '
000000000000aedb         db  0x42 ; 'B'
000000000000aedc         db  0x0e ; '.'
000000000000aedd         db  0x18 ; '.'
000000000000aede         db  0x42 ; 'B'
000000000000aedf         db  0x0e ; '.'
000000000000aee0         db  0x10 ; '.'
000000000000aee1         db  0x42 ; 'B'
000000000000aee2         db  0x0e ; '.'
000000000000aee3         db  0x08 ; '.'
000000000000aee4         db  0x41 ; 'A'
000000000000aee5         db  0x0b ; '.'
000000000000aee6         db  0x00 ; '.'
000000000000aee7         db  0x00 ; '.'
000000000000aee8         dd         0x0000004c                                  ; Length of the record
000000000000aeec         dd         0x000001b4                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000aef0         db         0x10, 0x8a, 2 dup (0xff)                    ; begin 0x3900
000000000000aef4         db         0xec, 0x16, 2 dup (0x00)                    ; length 0x16ec (end at 0x4fec)
000000000000aef8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aef9         db  0x42 ; 'B'
000000000000aefa         db  0x0e ; '.'
000000000000aefb         db  0x10 ; '.'
000000000000aefc         db  0x8f ; '.'
000000000000aefd         db  0x02 ; '.'
000000000000aefe         db  0x42 ; 'B'
000000000000aeff         db  0x0e ; '.'
000000000000af00         db  0x18 ; '.'
000000000000af01         db  0x8e ; '.'
000000000000af02         db  0x03 ; '.'
000000000000af03         db  0x42 ; 'B'
000000000000af04         db  0x0e ; '.'
000000000000af05         db  0x20 ; ' '
000000000000af06         db  0x8d ; '.'
000000000000af07         db  0x04 ; '.'
000000000000af08         db  0x42 ; 'B'
000000000000af09         db  0x0e ; '.'
000000000000af0a         db  0x28 ; '('
000000000000af0b         db  0x8c ; '.'
000000000000af0c         db  0x05 ; '.'
000000000000af0d         db  0x41 ; 'A'
000000000000af0e         db  0x0e ; '.'
000000000000af0f         db  0x30 ; '0'
000000000000af10         db  0x86 ; '.'
000000000000af11         db  0x06 ; '.'
000000000000af12         db  0x41 ; 'A'
000000000000af13         db  0x0e ; '.'
000000000000af14         db  0x38 ; '8'
000000000000af15         db  0x83 ; '.'
000000000000af16         db  0x07 ; '.'
000000000000af17         db  0x47 ; 'G'
000000000000af18         db  0x0e ; '.'
000000000000af19         db  0x80 ; '.'
000000000000af1a         db  0x03 ; '.'
000000000000af1b         db  0x03 ; '.'
000000000000af1c         db  0xcb ; '.'
000000000000af1d         db  0x16 ; '.'
000000000000af1e         db  0x0a ; '.'
000000000000af1f         db  0x0e ; '.'
000000000000af20         db  0x38 ; '8'
000000000000af21         db  0x41 ; 'A'
000000000000af22         db  0x0e ; '.'
000000000000af23         db  0x30 ; '0'
000000000000af24         db  0x41 ; 'A'
000000000000af25         db  0x0e ; '.'
000000000000af26         db  0x28 ; '('
000000000000af27         db  0x42 ; 'B'
000000000000af28         db  0x0e ; '.'
000000000000af29         db  0x20 ; ' '
000000000000af2a         db  0x42 ; 'B'
000000000000af2b         db  0x0e ; '.'
000000000000af2c         db  0x18 ; '.'
000000000000af2d         db  0x42 ; 'B'
000000000000af2e         db  0x0e ; '.'
000000000000af2f         db  0x10 ; '.'
000000000000af30         db  0x42 ; 'B'
000000000000af31         db  0x0e ; '.'
000000000000af32         db  0x08 ; '.'
000000000000af33         db  0x41 ; 'A'
000000000000af34         db  0x0b ; '.'
000000000000af35         db  0x00 ; '.'
000000000000af36         db  0x00 ; '.'
000000000000af37         db  0x00 ; '.'
000000000000af38         dd         0x00000048                                  ; Length of the record
000000000000af3c         dd         0x00000204                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000af40         db         0xb0, 0xa0, 2 dup (0xff)                    ; begin 0x4ff0
000000000000af44         db         0x09, 0x01, 2 dup (0x00)                    ; length 0x109 (end at 0x50f9)
000000000000af48         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000af49         db  0x42 ; 'B'
000000000000af4a         db  0x0e ; '.'
000000000000af4b         db  0x10 ; '.'
000000000000af4c         db  0x8f ; '.'
000000000000af4d         db  0x02 ; '.'
000000000000af4e         db  0x42 ; 'B'
000000000000af4f         db  0x0e ; '.'
000000000000af50         db  0x18 ; '.'
000000000000af51         db  0x8e ; '.'
000000000000af52         db  0x03 ; '.'
000000000000af53         db  0x42 ; 'B'
000000000000af54         db  0x0e ; '.'
000000000000af55         db  0x20 ; ' '
000000000000af56         db  0x8d ; '.'
000000000000af57         db  0x04 ; '.'
000000000000af58         db  0x42 ; 'B'
000000000000af59         db  0x0e ; '.'
000000000000af5a         db  0x28 ; '('
000000000000af5b         db  0x8c ; '.'
000000000000af5c         db  0x05 ; '.'
000000000000af5d         db  0x47 ; 'G'
000000000000af5e         db  0x0e ; '.'
000000000000af5f         db  0x30 ; '0'
000000000000af60         db  0x86 ; '.'
000000000000af61         db  0x06 ; '.'
000000000000af62         db  0x41 ; 'A'
000000000000af63         db  0x0e ; '.'
000000000000af64         db  0x38 ; '8'
000000000000af65         db  0x83 ; '.'
000000000000af66         db  0x07 ; '.'
000000000000af67         db  0x51 ; 'Q'
000000000000af68         db  0x0e ; '.'
000000000000af69         db  0x40 ; '@'
000000000000af6a         db  0x68 ; 'h'
000000000000af6b         db  0x0a ; '.'
000000000000af6c         db  0x0e ; '.'
000000000000af6d         db  0x38 ; '8'
000000000000af6e         db  0x41 ; 'A'
000000000000af6f         db  0x0e ; '.'
000000000000af70         db  0x30 ; '0'
000000000000af71         db  0x41 ; 'A'
000000000000af72         db  0x0e ; '.'
000000000000af73         db  0x28 ; '('
000000000000af74         db  0x42 ; 'B'
000000000000af75         db  0x0e ; '.'
000000000000af76         db  0x20 ; ' '
000000000000af77         db  0x42 ; 'B'
000000000000af78         db  0x0e ; '.'
000000000000af79         db  0x18 ; '.'
000000000000af7a         db  0x42 ; 'B'
000000000000af7b         db  0x0e ; '.'
000000000000af7c         db  0x10 ; '.'
000000000000af7d         db  0x42 ; 'B'
000000000000af7e         db  0x0e ; '.'
000000000000af7f         db  0x08 ; '.'
000000000000af80         db  0x45 ; 'E'
000000000000af81         db  0x0b ; '.'
000000000000af82         db  0x00 ; '.'
000000000000af83         db  0x00 ; '.'
000000000000af84         dd         0x00000010                                  ; Length of the record
000000000000af88         dd         0x00000250                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000af8c         db         0x74, 0xa1, 2 dup (0xff)                    ; begin 0x5100
000000000000af90         db         0xcb, 3 dup (0x00)                          ; length 0xcb (end at 0x51cb)
000000000000af94         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000af95         align      8
000000000000af98         dd         0x00000018                                  ; Length of the record
000000000000af9c         dd         0x00000264                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000afa0         db         0x30, 0xa2, 2 dup (0xff)                    ; begin 0x51d0
000000000000afa4         db         0x8c, 3 dup (0x00)                          ; length 0x8c (end at 0x525c)
000000000000afa8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000afa9         db  0x44 ; 'D'
000000000000afaa         db  0x0e ; '.'
000000000000afab         db  0x60 ; '`'
000000000000afac         db  0x02 ; '.'
000000000000afad         db  0x75 ; 'u'
000000000000afae         db  0x0a ; '.'
000000000000afaf         db  0x0e ; '.'
000000000000afb0         db  0x08 ; '.'
000000000000afb1         db  0x47 ; 'G'
000000000000afb2         db  0x0b ; '.'
000000000000afb3         db  0x00 ; '.'
000000000000afb4         dd         0x00000028                                  ; Length of the record
000000000000afb8         dd         0x00000280                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000afbc         db         0xa4, 0xa2, 2 dup (0xff)                    ; begin 0x5260
000000000000afc0         db         0x0c, 0x01, 2 dup (0x00)                    ; length 0x10c (end at 0x536c)
000000000000afc4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000afc5         db  0x41 ; 'A'
000000000000afc6         db  0x0e ; '.'
000000000000afc7         db  0x10 ; '.'
000000000000afc8         db  0x86 ; '.'
000000000000afc9         db  0x02 ; '.'
000000000000afca         db  0x41 ; 'A'
000000000000afcb         db  0x0e ; '.'
000000000000afcc         db  0x18 ; '.'
000000000000afcd         db  0x83 ; '.'
000000000000afce         db  0x03 ; '.'
000000000000afcf         db  0x47 ; 'G'
000000000000afd0         db  0x0e ; '.'
000000000000afd1         db  0xf0 ; '.'
000000000000afd2         db  0x01 ; '.'
000000000000afd3         db  0x02 ; '.'
000000000000afd4         db  0xef ; '.'
000000000000afd5         db  0x0a ; '.'
000000000000afd6         db  0x0e ; '.'
000000000000afd7         db  0x18 ; '.'
000000000000afd8         db  0x41 ; 'A'
000000000000afd9         db  0x0e ; '.'
000000000000afda         db  0x10 ; '.'
000000000000afdb         db  0x41 ; 'A'
000000000000afdc         db  0x0e ; '.'
000000000000afdd         db  0x08 ; '.'
000000000000afde         db  0x46 ; 'F'
000000000000afdf         db  0x0b ; '.'
000000000000afe0         dd         0x00000014                                  ; Length of the record
000000000000afe4         dd         0x000002ac                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000afe8         db         0x88, 0xa3, 2 dup (0xff)                    ; begin 0x5370
000000000000afec         db         0x1b, 3 dup (0x00)                          ; length 0x1b (end at 0x538b)
000000000000aff0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aff1         db  0x49 ; 'I'
000000000000aff2         db  0x0e ; '.'
000000000000aff3         db  0x10 ; '.'
000000000000aff4         db  0x4b ; 'K'
000000000000aff5         db  0x0e ; '.'
000000000000aff6         db  0x08 ; '.'
000000000000aff7         db  0x00 ; '.'
000000000000aff8         dd         0x00000030                                  ; Length of the record
000000000000affc         dd         0x000002c4                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b000         db         0x90, 0xa3, 2 dup (0xff)                    ; begin 0x5390
000000000000b004         db         0x71, 0x01, 2 dup (0x00)                    ; length 0x171 (end at 0x5501)
000000000000b008         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b009         db  0x42 ; 'B'
000000000000b00a         db  0x0e ; '.'
000000000000b00b         db  0x10 ; '.'
000000000000b00c         db  0x8c ; '.'
000000000000b00d         db  0x02 ; '.'
000000000000b00e         db  0x41 ; 'A'
000000000000b00f         db  0x0e ; '.'
000000000000b010         db  0x18 ; '.'
000000000000b011         db  0x86 ; '.'
000000000000b012         db  0x03 ; '.'
000000000000b013         db  0x41 ; 'A'
000000000000b014         db  0x0e ; '.'
000000000000b015         db  0x20 ; ' '
000000000000b016         db  0x83 ; '.'
000000000000b017         db  0x04 ; '.'
000000000000b018         db  0x48 ; 'H'
000000000000b019         db  0x0e ; '.'
000000000000b01a         db  0x70 ; 'p'
000000000000b01b         db  0x03 ; '.'
000000000000b01c         db  0x43 ; 'C'
000000000000b01d         db  0x01 ; '.'
000000000000b01e         db  0x0a ; '.'
000000000000b01f         db  0x0e ; '.'
000000000000b020         db  0x20 ; ' '
000000000000b021         db  0x41 ; 'A'
000000000000b022         db  0x0e ; '.'
000000000000b023         db  0x18 ; '.'
000000000000b024         db  0x41 ; 'A'
000000000000b025         db  0x0e ; '.'
000000000000b026         db  0x10 ; '.'
000000000000b027         db  0x42 ; 'B'
000000000000b028         db  0x0e ; '.'
000000000000b029         db  0x08 ; '.'
000000000000b02a         db  0x45 ; 'E'
000000000000b02b         db  0x0b ; '.'
000000000000b02c         dd         0x00000040                                  ; Length of the record
000000000000b030         dd         0x000002f8                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b034         db         0xdc, 0xa4, 2 dup (0xff)                    ; begin 0x5510
000000000000b038         db         0xf5, 3 dup (0x00)                          ; length 0xf5 (end at 0x5605)
000000000000b03c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b03d         db  0x42 ; 'B'
000000000000b03e         db  0x0e ; '.'
000000000000b03f         db  0x10 ; '.'
000000000000b040         db  0x8e ; '.'
000000000000b041         db  0x02 ; '.'
000000000000b042         db  0x42 ; 'B'
000000000000b043         db  0x0e ; '.'
000000000000b044         db  0x18 ; '.'
000000000000b045         db  0x8d ; '.'
000000000000b046         db  0x03 ; '.'
000000000000b047         db  0x45 ; 'E'
000000000000b048         db  0x0e ; '.'
000000000000b049         db  0x20 ; ' '
000000000000b04a         db  0x8c ; '.'
000000000000b04b         db  0x04 ; '.'
000000000000b04c         db  0x41 ; 'A'
000000000000b04d         db  0x0e ; '.'
000000000000b04e         db  0x28 ; '('
000000000000b04f         db  0x86 ; '.'
000000000000b050         db  0x05 ; '.'
000000000000b051         db  0x41 ; 'A'
000000000000b052         db  0x0e ; '.'
000000000000b053         db  0x30 ; '0'
000000000000b054         db  0x83 ; '.'
000000000000b055         db  0x06 ; '.'
000000000000b056         db  0x47 ; 'G'
000000000000b057         db  0x0e ; '.'
000000000000b058         db  0xb0 ; '.'
000000000000b059         db  0x02 ; '.'
000000000000b05a         db  0x02 ; '.'
000000000000b05b         db  0x99 ; '.'
000000000000b05c         db  0x0a ; '.'
000000000000b05d         db  0x0e ; '.'
000000000000b05e         db  0x30 ; '0'
000000000000b05f         db  0x41 ; 'A'
000000000000b060         db  0x0e ; '.'
000000000000b061         db  0x28 ; '('
000000000000b062         db  0x41 ; 'A'
000000000000b063         db  0x0e ; '.'
000000000000b064         db  0x20 ; ' '
000000000000b065         db  0x42 ; 'B'
000000000000b066         db  0x0e ; '.'
000000000000b067         db  0x18 ; '.'
000000000000b068         db  0x42 ; 'B'
000000000000b069         db  0x0e ; '.'
000000000000b06a         db  0x10 ; '.'
000000000000b06b         db  0x42 ; 'B'
000000000000b06c         db  0x0e ; '.'
000000000000b06d         db  0x08 ; '.'
000000000000b06e         db  0x45 ; 'E'
000000000000b06f         db  0x0b ; '.'
000000000000b070         dd         0x00000014                                  ; Length of the record
000000000000b074         dd         0x0000033c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b078         db         0x98, 0xa5, 2 dup (0xff)                    ; begin 0x5610
000000000000b07c         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x5615)
000000000000b080         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b081         align      8
000000000000b088         dd         0x0000004c                                  ; Length of the record
000000000000b08c         dd         0x00000354                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b090         db         0x90, 0xa5, 2 dup (0xff)                    ; begin 0x5620
000000000000b094         db         0x24, 0x01, 2 dup (0x00)                    ; length 0x124 (end at 0x5744)
000000000000b098         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b099         db  0x42 ; 'B'
000000000000b09a         db  0x0e ; '.'
000000000000b09b         db  0x10 ; '.'
000000000000b09c         db  0x8f ; '.'
000000000000b09d         db  0x02 ; '.'
000000000000b09e         db  0x42 ; 'B'
000000000000b09f         db  0x0e ; '.'
000000000000b0a0         db  0x18 ; '.'
000000000000b0a1         db  0x8e ; '.'
000000000000b0a2         db  0x03 ; '.'
000000000000b0a3         db  0x45 ; 'E'
000000000000b0a4         db  0x0e ; '.'
000000000000b0a5         db  0x20 ; ' '
000000000000b0a6         db  0x8d ; '.'
000000000000b0a7         db  0x04 ; '.'
000000000000b0a8         db  0x42 ; 'B'
000000000000b0a9         db  0x0e ; '.'
000000000000b0aa         db  0x28 ; '('
000000000000b0ab         db  0x8c ; '.'
000000000000b0ac         db  0x05 ; '.'
000000000000b0ad         db  0x41 ; 'A'
000000000000b0ae         db  0x0e ; '.'
000000000000b0af         db  0x30 ; '0'
000000000000b0b0         db  0x86 ; '.'
000000000000b0b1         db  0x06 ; '.'
000000000000b0b2         db  0x41 ; 'A'
000000000000b0b3         db  0x0e ; '.'
000000000000b0b4         db  0x38 ; '8'
000000000000b0b5         db  0x83 ; '.'
000000000000b0b6         db  0x07 ; '.'
000000000000b0b7         db  0x4f ; 'O'
000000000000b0b8         db  0x0e ; '.'
000000000000b0b9         db  0xd0 ; '.'
000000000000b0ba         db  0x02 ; '.'
000000000000b0bb         db  0x02 ; '.'
000000000000b0bc         db  0xdd ; '.'
000000000000b0bd         db  0x0a ; '.'
000000000000b0be         db  0x0e ; '.'
000000000000b0bf         db  0x38 ; '8'
000000000000b0c0         db  0x41 ; 'A'
000000000000b0c1         db  0x0e ; '.'
000000000000b0c2         db  0x30 ; '0'
000000000000b0c3         db  0x41 ; 'A'
000000000000b0c4         db  0x0e ; '.'
000000000000b0c5         db  0x28 ; '('
000000000000b0c6         db  0x42 ; 'B'
000000000000b0c7         db  0x0e ; '.'
000000000000b0c8         db  0x20 ; ' '
000000000000b0c9         db  0x42 ; 'B'
000000000000b0ca         db  0x0e ; '.'
000000000000b0cb         db  0x18 ; '.'
000000000000b0cc         db  0x42 ; 'B'
000000000000b0cd         db  0x0e ; '.'
000000000000b0ce         db  0x10 ; '.'
000000000000b0cf         db  0x42 ; 'B'
000000000000b0d0         db  0x0e ; '.'
000000000000b0d1         db  0x08 ; '.'
000000000000b0d2         db  0x45 ; 'E'
000000000000b0d3         db  0x0b ; '.'
000000000000b0d4         db  0x00 ; '.'
000000000000b0d5         db  0x00 ; '.'
000000000000b0d6         db  0x00 ; '.'
000000000000b0d7         db  0x00 ; '.'
000000000000b0d8         dd         0x00000010                                  ; Length of the record
000000000000b0dc         dd         0x000003a4                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b0e0         db         0x70, 0xa6, 2 dup (0xff)                    ; begin 0x5750
000000000000b0e4         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x575a)
000000000000b0e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b0e9         align      4
000000000000b0ec         dd         0x00000048                                  ; Length of the record
000000000000b0f0         dd         0x000003b8                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b0f4         db         0x6c, 0xa6, 2 dup (0xff)                    ; begin 0x5760
000000000000b0f8         db         0x16, 0x01, 2 dup (0x00)                    ; length 0x116 (end at 0x5876)
000000000000b0fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b0fd         db  0x42 ; 'B'
000000000000b0fe         db  0x0e ; '.'
000000000000b0ff         db  0x10 ; '.'
000000000000b100         db  0x8f ; '.'
000000000000b101         db  0x02 ; '.'
000000000000b102         db  0x42 ; 'B'
000000000000b103         db  0x0e ; '.'
000000000000b104         db  0x18 ; '.'
000000000000b105         db  0x8e ; '.'
000000000000b106         db  0x03 ; '.'
000000000000b107         db  0x45 ; 'E'
000000000000b108         db  0x0e ; '.'
000000000000b109         db  0x20 ; ' '
000000000000b10a         db  0x8d ; '.'
000000000000b10b         db  0x04 ; '.'
000000000000b10c         db  0x42 ; 'B'
000000000000b10d         db  0x0e ; '.'
000000000000b10e         db  0x28 ; '('
000000000000b10f         db  0x8c ; '.'
000000000000b110         db  0x05 ; '.'
000000000000b111         db  0x44 ; 'D'
000000000000b112         db  0x0e ; '.'
000000000000b113         db  0x30 ; '0'
000000000000b114         db  0x86 ; '.'
000000000000b115         db  0x06 ; '.'
000000000000b116         db  0x41 ; 'A'
000000000000b117         db  0x0e ; '.'
000000000000b118         db  0x38 ; '8'
000000000000b119         db  0x83 ; '.'
000000000000b11a         db  0x07 ; '.'
000000000000b11b         db  0x47 ; 'G'
000000000000b11c         db  0x0e ; '.'
000000000000b11d         db  0x60 ; '`'
000000000000b11e         db  0x02 ; '.'
000000000000b11f         db  0xde ; '.'
000000000000b120         db  0x0a ; '.'
000000000000b121         db  0x0e ; '.'
000000000000b122         db  0x38 ; '8'
000000000000b123         db  0x41 ; 'A'
000000000000b124         db  0x0e ; '.'
000000000000b125         db  0x30 ; '0'
000000000000b126         db  0x41 ; 'A'
000000000000b127         db  0x0e ; '.'
000000000000b128         db  0x28 ; '('
000000000000b129         db  0x42 ; 'B'
000000000000b12a         db  0x0e ; '.'
000000000000b12b         db  0x20 ; ' '
000000000000b12c         db  0x42 ; 'B'
000000000000b12d         db  0x0e ; '.'
000000000000b12e         db  0x18 ; '.'
000000000000b12f         db  0x42 ; 'B'
000000000000b130         db  0x0e ; '.'
000000000000b131         db  0x10 ; '.'
000000000000b132         db  0x42 ; 'B'
000000000000b133         db  0x0e ; '.'
000000000000b134         db  0x08 ; '.'
000000000000b135         db  0x41 ; 'A'
000000000000b136         db  0x0b ; '.'
000000000000b137         db  0x00 ; '.'
000000000000b138         dd         0x00000028                                  ; Length of the record
000000000000b13c         dd         0x00000404                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b140         db         0x40, 0xa7, 2 dup (0xff)                    ; begin 0x5880
000000000000b144         db         0x73, 3 dup (0x00)                          ; length 0x73 (end at 0x58f3)
000000000000b148         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b149         db  0x46 ; 'F'
000000000000b14a         db  0x0e ; '.'
000000000000b14b         db  0x10 ; '.'
000000000000b14c         db  0x8c ; '.'
000000000000b14d         db  0x02 ; '.'
000000000000b14e         db  0x46 ; 'F'
000000000000b14f         db  0x0e ; '.'
000000000000b150         db  0x18 ; '.'
000000000000b151         db  0x86 ; '.'
000000000000b152         db  0x03 ; '.'
000000000000b153         db  0x44 ; 'D'
000000000000b154         db  0x0e ; '.'
000000000000b155         db  0x20 ; ' '
000000000000b156         db  0x83 ; '.'
000000000000b157         db  0x04 ; '.'
000000000000b158         db  0x7f ; '.'
000000000000b159         db  0x0a ; '.'
000000000000b15a         db  0x0e ; '.'
000000000000b15b         db  0x18 ; '.'
000000000000b15c         db  0x41 ; 'A'
000000000000b15d         db  0x0e ; '.'
000000000000b15e         db  0x10 ; '.'
000000000000b15f         db  0x42 ; 'B'
000000000000b160         db  0x0e ; '.'
000000000000b161         db  0x08 ; '.'
000000000000b162         db  0x4e ; 'N'
000000000000b163         db  0x0b ; '.'
000000000000b164         dd         0x0000005c                                  ; Length of the record
000000000000b168         dd         0x00000430                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b16c         db         0x94, 0xa7, 2 dup (0xff)                    ; begin 0x5900
000000000000b170         db         0x20, 0x01, 2 dup (0x00)                    ; length 0x120 (end at 0x5a20)
000000000000b174         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b175         db  0x42 ; 'B'
000000000000b176         db  0x0e ; '.'
000000000000b177         db  0x10 ; '.'
000000000000b178         db  0x8f ; '.'
000000000000b179         db  0x02 ; '.'
000000000000b17a         db  0x42 ; 'B'
000000000000b17b         db  0x0e ; '.'
000000000000b17c         db  0x18 ; '.'
000000000000b17d         db  0x8e ; '.'
000000000000b17e         db  0x03 ; '.'
000000000000b17f         db  0x45 ; 'E'
000000000000b180         db  0x0e ; '.'
000000000000b181         db  0x20 ; ' '
000000000000b182         db  0x8d ; '.'
000000000000b183         db  0x04 ; '.'
000000000000b184         db  0x42 ; 'B'
000000000000b185         db  0x0e ; '.'
000000000000b186         db  0x28 ; '('
000000000000b187         db  0x8c ; '.'
000000000000b188         db  0x05 ; '.'
000000000000b189         db  0x43 ; 'C'
000000000000b18a         db  0x0e ; '.'
000000000000b18b         db  0x30 ; '0'
000000000000b18c         db  0x86 ; '.'
000000000000b18d         db  0x06 ; '.'
000000000000b18e         db  0x41 ; 'A'
000000000000b18f         db  0x0e ; '.'
000000000000b190         db  0x38 ; '8'
000000000000b191         db  0x83 ; '.'
000000000000b192         db  0x07 ; '.'
000000000000b193         db  0x56 ; 'V'
000000000000b194         db  0x0e ; '.'
000000000000b195         db  0x40 ; '@'
000000000000b196         db  0x02 ; '.'
000000000000b197         db  0xd3 ; '.'
000000000000b198         db  0x0a ; '.'
000000000000b199         db  0x0e ; '.'
000000000000b19a         db  0x38 ; '8'
000000000000b19b         db  0x41 ; 'A'
000000000000b19c         db  0x0e ; '.'
000000000000b19d         db  0x30 ; '0'
000000000000b19e         db  0x41 ; 'A'
000000000000b19f         db  0x0e ; '.'
000000000000b1a0         db  0x28 ; '('
000000000000b1a1         db  0x42 ; 'B'
000000000000b1a2         db  0x0e ; '.'
000000000000b1a3         db  0x20 ; ' '
000000000000b1a4         db  0x42 ; 'B'
000000000000b1a5         db  0x0e ; '.'
000000000000b1a6         db  0x18 ; '.'
000000000000b1a7         db  0x42 ; 'B'
000000000000b1a8         db  0x0e ; '.'
000000000000b1a9         db  0x10 ; '.'
000000000000b1aa         db  0x42 ; 'B'
000000000000b1ab         db  0x0e ; '.'
000000000000b1ac         db  0x08 ; '.'
000000000000b1ad         db  0x46 ; 'F'
000000000000b1ae         db  0x0b ; '.'
000000000000b1af         db  0x44 ; 'D'
000000000000b1b0         db  0x0e ; '.'
000000000000b1b1         db  0x38 ; '8'
000000000000b1b2         db  0x46 ; 'F'
000000000000b1b3         db  0x0e ; '.'
000000000000b1b4         db  0x30 ; '0'
000000000000b1b5         db  0x41 ; 'A'
000000000000b1b6         db  0x0e ; '.'
000000000000b1b7         db  0x28 ; '('
000000000000b1b8         db  0x42 ; 'B'
000000000000b1b9         db  0x0e ; '.'
000000000000b1ba         db  0x20 ; ' '
000000000000b1bb         db  0x42 ; 'B'
000000000000b1bc         db  0x0e ; '.'
000000000000b1bd         db  0x18 ; '.'
000000000000b1be         db  0x42 ; 'B'
000000000000b1bf         db  0x0e ; '.'
000000000000b1c0         db  0x10 ; '.'
000000000000b1c1         db  0x42 ; 'B'
000000000000b1c2         db  0x0e ; '.'
000000000000b1c3         db  0x08 ; '.'
000000000000b1c4         dd         0x00000048                                  ; Length of the record
000000000000b1c8         dd         0x00000490                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b1cc         db         0x54, 0xa8, 2 dup (0xff)                    ; begin 0x5a20
000000000000b1d0         db         0x6d, 3 dup (0x00)                          ; length 0x6d (end at 0x5a8d)
000000000000b1d4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b1d5         db  0x42 ; 'B'
000000000000b1d6         db  0x0e ; '.'
000000000000b1d7         db  0x10 ; '.'
000000000000b1d8         db  0x8f ; '.'
000000000000b1d9         db  0x02 ; '.'
000000000000b1da         db  0x42 ; 'B'
000000000000b1db         db  0x0e ; '.'
000000000000b1dc         db  0x18 ; '.'
000000000000b1dd         db  0x8e ; '.'
000000000000b1de         db  0x03 ; '.'
000000000000b1df         db  0x45 ; 'E'
000000000000b1e0         db  0x0e ; '.'
000000000000b1e1         db  0x20 ; ' '
000000000000b1e2         db  0x8d ; '.'
000000000000b1e3         db  0x04 ; '.'
000000000000b1e4         db  0x42 ; 'B'
000000000000b1e5         db  0x0e ; '.'
000000000000b1e6         db  0x28 ; '('
000000000000b1e7         db  0x8c ; '.'
000000000000b1e8         db  0x05 ; '.'
000000000000b1e9         db  0x44 ; 'D'
000000000000b1ea         db  0x0e ; '.'
000000000000b1eb         db  0x30 ; '0'
000000000000b1ec         db  0x86 ; '.'
000000000000b1ed         db  0x06 ; '.'
000000000000b1ee         db  0x41 ; 'A'
000000000000b1ef         db  0x0e ; '.'
000000000000b1f0         db  0x38 ; '8'
000000000000b1f1         db  0x83 ; '.'
000000000000b1f2         db  0x07 ; '.'
000000000000b1f3         db  0x50 ; 'P'
000000000000b1f4         db  0x0e ; '.'
000000000000b1f5         db  0x40 ; '@'
000000000000b1f6         db  0x5a ; 'Z'
000000000000b1f7         db  0x0a ; '.'
000000000000b1f8         db  0x0e ; '.'
000000000000b1f9         db  0x38 ; '8'
000000000000b1fa         db  0x41 ; 'A'
000000000000b1fb         db  0x0e ; '.'
000000000000b1fc         db  0x30 ; '0'
000000000000b1fd         db  0x41 ; 'A'
000000000000b1fe         db  0x0e ; '.'
000000000000b1ff         db  0x28 ; '('
000000000000b200         db  0x42 ; 'B'
000000000000b201         db  0x0e ; '.'
000000000000b202         db  0x20 ; ' '
000000000000b203         db  0x42 ; 'B'
000000000000b204         db  0x0e ; '.'
000000000000b205         db  0x18 ; '.'
000000000000b206         db  0x42 ; 'B'
000000000000b207         db  0x0e ; '.'
000000000000b208         db  0x10 ; '.'
000000000000b209         db  0x42 ; 'B'
000000000000b20a         db  0x0e ; '.'
000000000000b20b         db  0x08 ; '.'
000000000000b20c         db  0x41 ; 'A'
000000000000b20d         db  0x0b ; '.'
000000000000b20e         db  0x00 ; '.'
000000000000b20f         db  0x00 ; '.'
000000000000b210         dd         0x0000003c                                  ; Length of the record
000000000000b214         dd         0x000004dc                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b218         db         0x78, 0xa8, 2 dup (0xff)                    ; begin 0x5a90
000000000000b21c         db         0x4d, 3 dup (0x00)                          ; length 0x4d (end at 0x5add)
000000000000b220         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b221         db  0x42 ; 'B'
000000000000b222         db  0x0e ; '.'
000000000000b223         db  0x10 ; '.'
000000000000b224         db  0x8e ; '.'
000000000000b225         db  0x02 ; '.'
000000000000b226         db  0x42 ; 'B'
000000000000b227         db  0x0e ; '.'
000000000000b228         db  0x18 ; '.'
000000000000b229         db  0x8d ; '.'
000000000000b22a         db  0x03 ; '.'
000000000000b22b         db  0x42 ; 'B'
000000000000b22c         db  0x0e ; '.'
000000000000b22d         db  0x20 ; ' '
000000000000b22e         db  0x8c ; '.'
000000000000b22f         db  0x04 ; '.'
000000000000b230         db  0x41 ; 'A'
000000000000b231         db  0x0e ; '.'
000000000000b232         db  0x28 ; '('
000000000000b233         db  0x86 ; '.'
000000000000b234         db  0x05 ; '.'
000000000000b235         db  0x41 ; 'A'
000000000000b236         db  0x0e ; '.'
000000000000b237         db  0x30 ; '0'
000000000000b238         db  0x83 ; '.'
000000000000b239         db  0x06 ; '.'
000000000000b23a         db  0x7a ; 'z'
000000000000b23b         db  0x0e ; '.'
000000000000b23c         db  0x28 ; '('
000000000000b23d         db  0x44 ; 'D'
000000000000b23e         db  0x0e ; '.'
000000000000b23f         db  0x20 ; ' '
000000000000b240         db  0x42 ; 'B'
000000000000b241         db  0x0e ; '.'
000000000000b242         db  0x18 ; '.'
000000000000b243         db  0x42 ; 'B'
000000000000b244         db  0x0e ; '.'
000000000000b245         db  0x10 ; '.'
000000000000b246         db  0x42 ; 'B'
000000000000b247         db  0x0e ; '.'
000000000000b248         db  0x08 ; '.'
000000000000b249         db  0x00 ; '.'
000000000000b24a         db  0x00 ; '.'
000000000000b24b         db  0x00 ; '.'
000000000000b24c         db  0x00 ; '.'
000000000000b24d         db  0x00 ; '.'
000000000000b24e         db  0x00 ; '.'
000000000000b24f         db  0x00 ; '.'
000000000000b250         dd         0x00000010                                  ; Length of the record
000000000000b254         dd         0x0000051c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b258         db         0x88, 0xa8, 2 dup (0xff)                    ; begin 0x5ae0
000000000000b25c         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5ae8)
000000000000b260         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b261         align      4
000000000000b264         dd         0x00000010                                  ; Length of the record
000000000000b268         dd         0x00000530                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b26c         db         0x84, 0xa8, 2 dup (0xff)                    ; begin 0x5af0
000000000000b270         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5af8)
000000000000b274         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b275         align      8
000000000000b278         dd         0x0000002c                                  ; Length of the record
000000000000b27c         dd         0x00000544                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b280         db         0x80, 0xa8, 2 dup (0xff)                    ; begin 0x5b00
000000000000b284         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x5ba4)
000000000000b288         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b289         db  0x41 ; 'A'
000000000000b28a         db  0x0e ; '.'
000000000000b28b         db  0x10 ; '.'
000000000000b28c         db  0x86 ; '.'
000000000000b28d         db  0x02 ; '.'
000000000000b28e         db  0x41 ; 'A'
000000000000b28f         db  0x0e ; '.'
000000000000b290         db  0x18 ; '.'
000000000000b291         db  0x83 ; '.'
000000000000b292         db  0x03 ; '.'
000000000000b293         db  0x44 ; 'D'
000000000000b294         db  0x0e ; '.'
000000000000b295         db  0x20 ; ' '
000000000000b296         db  0x7a ; 'z'
000000000000b297         db  0x0a ; '.'
000000000000b298         db  0x0e ; '.'
000000000000b299         db  0x18 ; '.'
000000000000b29a         db  0x41 ; 'A'
000000000000b29b         db  0x0e ; '.'
000000000000b29c         db  0x10 ; '.'
000000000000b29d         db  0x41 ; 'A'
000000000000b29e         db  0x0e ; '.'
000000000000b29f         db  0x08 ; '.'
000000000000b2a0         db  0x41 ; 'A'
000000000000b2a1         db  0x0b ; '.'
000000000000b2a2         db  0x00 ; '.'
000000000000b2a3         db  0x00 ; '.'
000000000000b2a4         db  0x00 ; '.'
000000000000b2a5         db  0x00 ; '.'
000000000000b2a6         db  0x00 ; '.'
000000000000b2a7         db  0x00 ; '.'
000000000000b2a8         dd         0x00000010                                  ; Length of the record
000000000000b2ac         dd         0x00000574                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b2b0         db         0x00, 0xa9, 2 dup (0xff)                    ; begin 0x5bb0
000000000000b2b4         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x5bb5)
000000000000b2b8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b2b9         align      4
000000000000b2bc         dd         0x00000018                                  ; Length of the record
000000000000b2c0         dd         0x00000588                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b2c4         db         0xfc, 0xa8, 2 dup (0xff)                    ; begin 0x5bc0
000000000000b2c8         db         0x22, 3 dup (0x00)                          ; length 0x22 (end at 0x5be2)
000000000000b2cc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b2cd         db  0x46 ; 'F'
000000000000b2ce         db  0x0e ; '.'
000000000000b2cf         db  0x10 ; '.'
000000000000b2d0         db  0x83 ; '.'
000000000000b2d1         db  0x02 ; '.'
000000000000b2d2         db  0x4e ; 'N'
000000000000b2d3         db  0xc3 ; '.'
000000000000b2d4         db  0x0e ; '.'
000000000000b2d5         db  0x08 ; '.'
000000000000b2d6         db  0x00 ; '.'
000000000000b2d7         db  0x00 ; '.'
000000000000b2d8         dd         0x0000002c                                  ; Length of the record
000000000000b2dc         dd         0x000005a4                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b2e0         db         0x10, 0xa9, 2 dup (0xff)                    ; begin 0x5bf0
000000000000b2e4         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x5c83)
000000000000b2e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b2e9         db  0x42 ; 'B'
000000000000b2ea         db  0x0e ; '.'
000000000000b2eb         db  0x10 ; '.'
000000000000b2ec         db  0x8c ; '.'
000000000000b2ed         db  0x02 ; '.'
000000000000b2ee         db  0x41 ; 'A'
000000000000b2ef         db  0x0e ; '.'
000000000000b2f0         db  0x18 ; '.'
000000000000b2f1         db  0x86 ; '.'
000000000000b2f2         db  0x03 ; '.'
000000000000b2f3         db  0x44 ; 'D'
000000000000b2f4         db  0x0e ; '.'
000000000000b2f5         db  0x20 ; ' '
000000000000b2f6         db  0x83 ; '.'
000000000000b2f7         db  0x04 ; '.'
000000000000b2f8         db  0x5e ; '^'
000000000000b2f9         db  0x0a ; '.'
000000000000b2fa         db  0x0e ; '.'
000000000000b2fb         db  0x18 ; '.'
000000000000b2fc         db  0x41 ; 'A'
000000000000b2fd         db  0x0e ; '.'
000000000000b2fe         db  0x10 ; '.'
000000000000b2ff         db  0x42 ; 'B'
000000000000b300         db  0x0e ; '.'
000000000000b301         db  0x08 ; '.'
000000000000b302         db  0x48 ; 'H'
000000000000b303         db  0x0b ; '.'
000000000000b304         db  0x00 ; '.'
000000000000b305         db  0x00 ; '.'
000000000000b306         db  0x00 ; '.'
000000000000b307         db  0x00 ; '.'
000000000000b308         dd         0x0000001c                                  ; Length of the record
000000000000b30c         dd         0x000005d4                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b310         db         0x80, 0xa9, 2 dup (0xff)                    ; begin 0x5c90
000000000000b314         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x5d2f)
000000000000b318         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b319         db  0x44 ; 'D'
000000000000b31a         db  0x0e ; '.'
000000000000b31b         db  0x10 ; '.'
000000000000b31c         db  0x83 ; '.'
000000000000b31d         db  0x02 ; '.'
000000000000b31e         db  0x02 ; '.'
000000000000b31f         db  0x78 ; 'x'
000000000000b320         db  0x0a ; '.'
000000000000b321         db  0x0e ; '.'
000000000000b322         db  0x08 ; '.'
000000000000b323         db  0x41 ; 'A'
000000000000b324         db  0x0b ; '.'
000000000000b325         db  0x00 ; '.'
000000000000b326         db  0x00 ; '.'
000000000000b327         db  0x00 ; '.'
000000000000b328         dd         0x00000040                                  ; Length of the record
000000000000b32c         dd         0x000005f4                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b330         db         0x00, 0xaa, 2 dup (0xff)                    ; begin 0x5d30
000000000000b334         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x5e17)
000000000000b338         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b339         db  0x41 ; 'A'
000000000000b33a         db  0x0e ; '.'
000000000000b33b         db  0x10 ; '.'
000000000000b33c         db  0x86 ; '.'
000000000000b33d         db  0x02 ; '.'
000000000000b33e         db  0x41 ; 'A'
000000000000b33f         db  0x0e ; '.'
000000000000b340         db  0x18 ; '.'
000000000000b341         db  0x83 ; '.'
000000000000b342         db  0x03 ; '.'
000000000000b343         db  0x49 ; 'I'
000000000000b344         db  0x0e ; '.'
000000000000b345         db  0x20 ; ' '
000000000000b346         db  0x6e ; 'n'
000000000000b347         db  0x0a ; '.'
000000000000b348         db  0x0e ; '.'
000000000000b349         db  0x18 ; '.'
000000000000b34a         db  0x41 ; 'A'
000000000000b34b         db  0x0e ; '.'
000000000000b34c         db  0x10 ; '.'
000000000000b34d         db  0x41 ; 'A'
000000000000b34e         db  0x0e ; '.'
000000000000b34f         db  0x08 ; '.'
000000000000b350         db  0x45 ; 'E'
000000000000b351         db  0x0b ; '.'
000000000000b352         db  0x02 ; '.'
000000000000b353         db  0x4a ; 'J'
000000000000b354         db  0x0a ; '.'
000000000000b355         db  0x0e ; '.'
000000000000b356         db  0x18 ; '.'
000000000000b357         db  0x41 ; 'A'
000000000000b358         db  0x0e ; '.'
000000000000b359         db  0x10 ; '.'
000000000000b35a         db  0x41 ; 'A'
000000000000b35b         db  0x0e ; '.'
000000000000b35c         db  0x08 ; '.'
000000000000b35d         db  0x44 ; 'D'
000000000000b35e         db  0x0b ; '.'
000000000000b35f         db  0x02 ; '.'
000000000000b360         db  0x54 ; 'T'
000000000000b361         db  0x0e ; '.'
000000000000b362         db  0x18 ; '.'
000000000000b363         db  0x41 ; 'A'
000000000000b364         db  0x0e ; '.'
000000000000b365         db  0x10 ; '.'
000000000000b366         db  0x41 ; 'A'
000000000000b367         db  0x0e ; '.'
000000000000b368         db  0x08 ; '.'
000000000000b369         db  0x00 ; '.'
000000000000b36a         db  0x00 ; '.'
000000000000b36b         db  0x00 ; '.'
000000000000b36c         dd         0x00000074                                  ; Length of the record
000000000000b370         dd         0x00000638                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b374         db         0xac, 0xaa, 2 dup (0xff)                    ; begin 0x5e20
000000000000b378         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x7054)
000000000000b37c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b37d         db  0x42 ; 'B'
000000000000b37e         db  0x0e ; '.'
000000000000b37f         db  0x10 ; '.'
000000000000b380         db  0x8f ; '.'
000000000000b381         db  0x02 ; '.'
000000000000b382         db  0x42 ; 'B'
000000000000b383         db  0x0e ; '.'
000000000000b384         db  0x18 ; '.'
000000000000b385         db  0x8e ; '.'
000000000000b386         db  0x03 ; '.'
000000000000b387         db  0x45 ; 'E'
000000000000b388         db  0x0e ; '.'
000000000000b389         db  0x20 ; ' '
000000000000b38a         db  0x8d ; '.'
000000000000b38b         db  0x04 ; '.'
000000000000b38c         db  0x42 ; 'B'
000000000000b38d         db  0x0e ; '.'
000000000000b38e         db  0x28 ; '('
000000000000b38f         db  0x8c ; '.'
000000000000b390         db  0x05 ; '.'
000000000000b391         db  0x44 ; 'D'
000000000000b392         db  0x0e ; '.'
000000000000b393         db  0x30 ; '0'
000000000000b394         db  0x86 ; '.'
000000000000b395         db  0x06 ; '.'
000000000000b396         db  0x41 ; 'A'
000000000000b397         db  0x0e ; '.'
000000000000b398         db  0x38 ; '8'
000000000000b399         db  0x83 ; '.'
000000000000b39a         db  0x07 ; '.'
000000000000b39b         db  0x53 ; 'S'
000000000000b39c         db  0x0e ; '.'
000000000000b39d         db  0xf0 ; '.'
000000000000b39e         db  0x01 ; '.'
000000000000b39f         db  0x03 ; '.'
000000000000b3a0         db  0x81 ; '.'
000000000000b3a1         db  0x0b ; '.'
000000000000b3a2         db  0x0e ; '.'
000000000000b3a3         db  0xf8 ; '.'
000000000000b3a4         db  0x01 ; '.'
000000000000b3a5         db  0x4a ; 'J'
000000000000b3a6         db  0x0e ; '.'
000000000000b3a7         db  0x80 ; '.'
000000000000b3a8         db  0x02 ; '.'
000000000000b3a9         db  0x44 ; 'D'
000000000000b3aa         db  0x0e ; '.'
000000000000b3ab         db  0x88 ; '.'
000000000000b3ac         db  0x02 ; '.'
000000000000b3ad         db  0x45 ; 'E'
000000000000b3ae         db  0x0e ; '.'
000000000000b3af         db  0x90 ; '.'
000000000000b3b0         db  0x02 ; '.'
000000000000b3b1         db  0x5f ; '_'
000000000000b3b2         db  0x0e ; '.'
000000000000b3b3         db  0xf0 ; '.'
000000000000b3b4         db  0x01 ; '.'
000000000000b3b5         db  0x64 ; 'd'
000000000000b3b6         db  0x0a ; '.'
000000000000b3b7         db  0x0e ; '.'
000000000000b3b8         db  0x38 ; '8'
000000000000b3b9         db  0x41 ; 'A'
000000000000b3ba         db  0x0e ; '.'
000000000000b3bb         db  0x30 ; '0'
000000000000b3bc         db  0x41 ; 'A'
000000000000b3bd         db  0x0e ; '.'
000000000000b3be         db  0x28 ; '('
000000000000b3bf         db  0x42 ; 'B'
000000000000b3c0         db  0x0e ; '.'
000000000000b3c1         db  0x20 ; ' '
000000000000b3c2         db  0x42 ; 'B'
000000000000b3c3         db  0x0e ; '.'
000000000000b3c4         db  0x18 ; '.'
000000000000b3c5         db  0x42 ; 'B'
000000000000b3c6         db  0x0e ; '.'
000000000000b3c7         db  0x10 ; '.'
000000000000b3c8         db  0x42 ; 'B'
000000000000b3c9         db  0x0e ; '.'
000000000000b3ca         db  0x08 ; '.'
000000000000b3cb         db  0x44 ; 'D'
000000000000b3cc         db  0x0b ; '.'
000000000000b3cd         db  0x03 ; '.'
000000000000b3ce         db  0x99 ; '.'
000000000000b3cf         db  0x05 ; '.'
000000000000b3d0         db  0x0e ; '.'
000000000000b3d1         db  0xf8 ; '.'
000000000000b3d2         db  0x01 ; '.'
000000000000b3d3         db  0x4d ; 'M'
000000000000b3d4         db  0x0e ; '.'
000000000000b3d5         db  0x80 ; '.'
000000000000b3d6         db  0x02 ; '.'
000000000000b3d7         db  0x44 ; 'D'
000000000000b3d8         db  0x0e ; '.'
000000000000b3d9         db  0x88 ; '.'
000000000000b3da         db  0x02 ; '.'
000000000000b3db         db  0x47 ; 'G'
000000000000b3dc         db  0x0e ; '.'
000000000000b3dd         db  0x90 ; '.'
000000000000b3de         db  0x02 ; '.'
000000000000b3df         db  0x5b ; '['
000000000000b3e0         db  0x0e ; '.'
000000000000b3e1         db  0xf0 ; '.'
000000000000b3e2         db  0x01 ; '.'
000000000000b3e3         db  0x00 ; '.'
000000000000b3e4         dd         0x00000068                                  ; Length of the record
000000000000b3e8         dd         0x000006b0                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b3ec         db         0x74, 0xbc, 2 dup (0xff)                    ; begin 0x7060
000000000000b3f0         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x720b)
000000000000b3f4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b3f5         db  0x42 ; 'B'
000000000000b3f6         db  0x0e ; '.'
000000000000b3f7         db  0x10 ; '.'
000000000000b3f8         db  0x8f ; '.'
000000000000b3f9         db  0x02 ; '.'
000000000000b3fa         db  0x42 ; 'B'
000000000000b3fb         db  0x0e ; '.'
000000000000b3fc         db  0x18 ; '.'
000000000000b3fd         db  0x8e ; '.'
000000000000b3fe         db  0x03 ; '.'
000000000000b3ff         db  0x45 ; 'E'
000000000000b400         db  0x0e ; '.'
000000000000b401         db  0x20 ; ' '
000000000000b402         db  0x8d ; '.'
000000000000b403         db  0x04 ; '.'
000000000000b404         db  0x42 ; 'B'
000000000000b405         db  0x0e ; '.'
000000000000b406         db  0x28 ; '('
000000000000b407         db  0x8c ; '.'
000000000000b408         db  0x05 ; '.'
000000000000b409         db  0x44 ; 'D'
000000000000b40a         db  0x0e ; '.'
000000000000b40b         db  0x30 ; '0'
000000000000b40c         db  0x86 ; '.'
000000000000b40d         db  0x06 ; '.'
000000000000b40e         db  0x41 ; 'A'
000000000000b40f         db  0x0e ; '.'
000000000000b410         db  0x38 ; '8'
000000000000b411         db  0x83 ; '.'
000000000000b412         db  0x07 ; '.'
000000000000b413         db  0x47 ; 'G'
000000000000b414         db  0x0e ; '.'
000000000000b415         db  0x60 ; '`'
000000000000b416         db  0x02 ; '.'
000000000000b417         db  0x99 ; '.'
000000000000b418         db  0x0e ; '.'
000000000000b419         db  0x68 ; 'h'
000000000000b41a         db  0x5f ; '_'
000000000000b41b         db  0x0e ; '.'
000000000000b41c         db  0x70 ; 'p'
000000000000b41d         db  0x46 ; 'F'
000000000000b41e         db  0x0e ; '.'
000000000000b41f         db  0x78 ; 'x'
000000000000b420         db  0x42 ; 'B'
000000000000b421         db  0x0e ; '.'
000000000000b422         db  0x80 ; '.'
000000000000b423         db  0x01 ; '.'
000000000000b424         db  0x59 ; 'Y'
000000000000b425         db  0x0e ; '.'
000000000000b426         db  0x60 ; '`'
000000000000b427         db  0x02 ; '.'
000000000000b428         db  0x40 ; '@'
000000000000b429         db  0x0e ; '.'
000000000000b42a         db  0x68 ; 'h'
000000000000b42b         db  0x4b ; 'K'
000000000000b42c         db  0x0e ; '.'
000000000000b42d         db  0x70 ; 'p'
000000000000b42e         db  0x43 ; 'C'
000000000000b42f         db  0x0e ; '.'
000000000000b430         db  0x78 ; 'x'
000000000000b431         db  0x45 ; 'E'
000000000000b432         db  0x0e ; '.'
000000000000b433         db  0x80 ; '.'
000000000000b434         db  0x01 ; '.'
000000000000b435         db  0x5e ; '^'
000000000000b436         db  0x0e ; '.'
000000000000b437         db  0x60 ; '`'
000000000000b438         db  0x4c ; 'L'
000000000000b439         db  0x0a ; '.'
000000000000b43a         db  0x0e ; '.'
000000000000b43b         db  0x38 ; '8'
000000000000b43c         db  0x44 ; 'D'
000000000000b43d         db  0x0e ; '.'
000000000000b43e         db  0x30 ; '0'
000000000000b43f         db  0x41 ; 'A'
000000000000b440         db  0x0e ; '.'
000000000000b441         db  0x28 ; '('
000000000000b442         db  0x42 ; 'B'
000000000000b443         db  0x0e ; '.'
000000000000b444         db  0x20 ; ' '
000000000000b445         db  0x42 ; 'B'
000000000000b446         db  0x0e ; '.'
000000000000b447         db  0x18 ; '.'
000000000000b448         db  0x42 ; 'B'
000000000000b449         db  0x0e ; '.'
000000000000b44a         db  0x10 ; '.'
000000000000b44b         db  0x42 ; 'B'
000000000000b44c         db  0x0e ; '.'
000000000000b44d         db  0x08 ; '.'
000000000000b44e         db  0x46 ; 'F'
000000000000b44f         db  0x0b ; '.'
000000000000b450         dd         0x00000028                                  ; Length of the record
000000000000b454         dd         0x0000071c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b458         db         0xb8, 0xbd, 2 dup (0xff)                    ; begin 0x7210
000000000000b45c         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x7246)
000000000000b460         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b461         db  0x42 ; 'B'
000000000000b462         db  0x0e ; '.'
000000000000b463         db  0x10 ; '.'
000000000000b464         db  0x8c ; '.'
000000000000b465         db  0x02 ; '.'
000000000000b466         db  0x41 ; 'A'
000000000000b467         db  0x0e ; '.'
000000000000b468         db  0x18 ; '.'
000000000000b469         db  0x86 ; '.'
000000000000b46a         db  0x03 ; '.'
000000000000b46b         db  0x41 ; 'A'
000000000000b46c         db  0x0e ; '.'
000000000000b46d         db  0x20 ; ' '
000000000000b46e         db  0x83 ; '.'
000000000000b46f         db  0x04 ; '.'
000000000000b470         db  0x6e ; 'n'
000000000000b471         db  0x0e ; '.'
000000000000b472         db  0x18 ; '.'
000000000000b473         db  0x41 ; 'A'
000000000000b474         db  0x0e ; '.'
000000000000b475         db  0x10 ; '.'
000000000000b476         db  0x42 ; 'B'
000000000000b477         db  0x0e ; '.'
000000000000b478         db  0x08 ; '.'
000000000000b479         db  0x00 ; '.'
000000000000b47a         db  0x00 ; '.'
000000000000b47b         db  0x00 ; '.'
000000000000b47c         dd         0x00000010                                  ; Length of the record
000000000000b480         dd         0x00000748                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b484         db         0xcc, 0xbd, 2 dup (0xff)                    ; begin 0x7250
000000000000b488         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x7261)
000000000000b48c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b48d         align      16
000000000000b490         dd         0x00000010                                  ; Length of the record
000000000000b494         dd         0x0000075c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b498         db         0xd8, 0xbd, 2 dup (0xff)                    ; begin 0x7270
000000000000b49c         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x7281)
000000000000b4a0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b4a1         align      4
000000000000b4a4         dd         0x00000010                                  ; Length of the record
000000000000b4a8         dd         0x00000770                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b4ac         db         0xe4, 0xbd, 2 dup (0xff)                    ; begin 0x7290
000000000000b4b0         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x72c5)
000000000000b4b4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b4b5         align      8
000000000000b4b8         dd         0x00000010                                  ; Length of the record
000000000000b4bc         dd         0x00000784                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b4c0         db         0x10, 0xbe, 2 dup (0xff)                    ; begin 0x72d0
000000000000b4c4         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x72e5)
000000000000b4c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b4c9         align      4
000000000000b4cc         dd         0x00000010                                  ; Length of the record
000000000000b4d0         dd         0x00000798                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b4d4         db         0x1c, 0xbe, 2 dup (0xff)                    ; begin 0x72f0
000000000000b4d8         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x7320)
000000000000b4dc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b4dd         db  0x6b ; 'k'
000000000000b4de         db  0x0e ; '.'
000000000000b4df         db  0x10 ; '.'
000000000000b4e0         dd         0x00000050                                  ; Length of the record
000000000000b4e4         dd         0x000007ac                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b4e8         db         0x38, 0xbe, 2 dup (0xff)                    ; begin 0x7320
000000000000b4ec         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x7394)
000000000000b4f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b4f1         db  0x42 ; 'B'
000000000000b4f2         db  0x0e ; '.'
000000000000b4f3         db  0x10 ; '.'
000000000000b4f4         db  0x8f ; '.'
000000000000b4f5         db  0x02 ; '.'
000000000000b4f6         db  0x42 ; 'B'
000000000000b4f7         db  0x0e ; '.'
000000000000b4f8         db  0x18 ; '.'
000000000000b4f9         db  0x8e ; '.'
000000000000b4fa         db  0x03 ; '.'
000000000000b4fb         db  0x49 ; 'I'
000000000000b4fc         db  0x0e ; '.'
000000000000b4fd         db  0x20 ; ' '
000000000000b4fe         db  0x8d ; '.'
000000000000b4ff         db  0x04 ; '.'
000000000000b500         db  0x42 ; 'B'
000000000000b501         db  0x0e ; '.'
000000000000b502         db  0x28 ; '('
000000000000b503         db  0x8c ; '.'
000000000000b504         db  0x05 ; '.'
000000000000b505         db  0x44 ; 'D'
000000000000b506         db  0x0e ; '.'
000000000000b507         db  0x30 ; '0'
000000000000b508         db  0x86 ; '.'
000000000000b509         db  0x06 ; '.'
000000000000b50a         db  0x41 ; 'A'
000000000000b50b         db  0x0e ; '.'
000000000000b50c         db  0x38 ; '8'
000000000000b50d         db  0x83 ; '.'
000000000000b50e         db  0x07 ; '.'
000000000000b50f         db  0x4d ; 'M'
000000000000b510         db  0x0e ; '.'
000000000000b511         db  0x50 ; 'P'
000000000000b512         db  0x5f ; '_'
000000000000b513         db  0x0e ; '.'
000000000000b514         db  0x58 ; 'X'
000000000000b515         db  0x47 ; 'G'
000000000000b516         db  0x0e ; '.'
000000000000b517         db  0x60 ; '`'
000000000000b518         db  0x46 ; 'F'
000000000000b519         db  0x0e ; '.'
000000000000b51a         db  0x68 ; 'h'
000000000000b51b         db  0x44 ; 'D'
000000000000b51c         db  0x0e ; '.'
000000000000b51d         db  0x70 ; 'p'
000000000000b51e         db  0x58 ; 'X'
000000000000b51f         db  0x0e ; '.'
000000000000b520         db  0x38 ; '8'
000000000000b521         db  0x41 ; 'A'
000000000000b522         db  0x0e ; '.'
000000000000b523         db  0x30 ; '0'
000000000000b524         db  0x41 ; 'A'
000000000000b525         db  0x0e ; '.'
000000000000b526         db  0x28 ; '('
000000000000b527         db  0x42 ; 'B'
000000000000b528         db  0x0e ; '.'
000000000000b529         db  0x20 ; ' '
000000000000b52a         db  0x42 ; 'B'
000000000000b52b         db  0x0e ; '.'
000000000000b52c         db  0x18 ; '.'
000000000000b52d         db  0x42 ; 'B'
000000000000b52e         db  0x0e ; '.'
000000000000b52f         db  0x10 ; '.'
000000000000b530         db  0x42 ; 'B'
000000000000b531         db  0x0e ; '.'
000000000000b532         db  0x08 ; '.'
000000000000b533         db  0x00 ; '.'
000000000000b534         dd         0x00000068                                  ; Length of the record
000000000000b538         dd         0x00000800                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b53c         db         0x64, 0xbe, 2 dup (0xff)                    ; begin 0x73a0
000000000000b540         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x7483)
000000000000b544         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b545         db  0x42 ; 'B'
000000000000b546         db  0x0e ; '.'
000000000000b547         db  0x10 ; '.'
000000000000b548         db  0x8f ; '.'
000000000000b549         db  0x02 ; '.'
000000000000b54a         db  0x42 ; 'B'
000000000000b54b         db  0x0e ; '.'
000000000000b54c         db  0x18 ; '.'
000000000000b54d         db  0x8e ; '.'
000000000000b54e         db  0x03 ; '.'
000000000000b54f         db  0x49 ; 'I'
000000000000b550         db  0x0e ; '.'
000000000000b551         db  0x20 ; ' '
000000000000b552         db  0x8d ; '.'
000000000000b553         db  0x04 ; '.'
000000000000b554         db  0x42 ; 'B'
000000000000b555         db  0x0e ; '.'
000000000000b556         db  0x28 ; '('
000000000000b557         db  0x8c ; '.'
000000000000b558         db  0x05 ; '.'
000000000000b559         db  0x44 ; 'D'
000000000000b55a         db  0x0e ; '.'
000000000000b55b         db  0x30 ; '0'
000000000000b55c         db  0x86 ; '.'
000000000000b55d         db  0x06 ; '.'
000000000000b55e         db  0x41 ; 'A'
000000000000b55f         db  0x0e ; '.'
000000000000b560         db  0x38 ; '8'
000000000000b561         db  0x83 ; '.'
000000000000b562         db  0x07 ; '.'
000000000000b563         db  0x4d ; 'M'
000000000000b564         db  0x0e ; '.'
000000000000b565         db  0x70 ; 'p'
000000000000b566         db  0x65 ; 'e'
000000000000b567         db  0x0e ; '.'
000000000000b568         db  0x78 ; 'x'
000000000000b569         db  0x4d ; 'M'
000000000000b56a         db  0x0e ; '.'
000000000000b56b         db  0x80 ; '.'
000000000000b56c         db  0x01 ; '.'
000000000000b56d         db  0x46 ; 'F'
000000000000b56e         db  0x0e ; '.'
000000000000b56f         db  0x88 ; '.'
000000000000b570         db  0x01 ; '.'
000000000000b571         db  0x42 ; 'B'
000000000000b572         db  0x0e ; '.'
000000000000b573         db  0x90 ; '.'
000000000000b574         db  0x01 ; '.'
000000000000b575         db  0x5e ; '^'
000000000000b576         db  0x0e ; '.'
000000000000b577         db  0x70 ; 'p'
000000000000b578         db  0x56 ; 'V'
000000000000b579         db  0x0e ; '.'
000000000000b57a         db  0x78 ; 'x'
000000000000b57b         db  0x43 ; 'C'
000000000000b57c         db  0x0e ; '.'
000000000000b57d         db  0x80 ; '.'
000000000000b57e         db  0x01 ; '.'
000000000000b57f         db  0x43 ; 'C'
000000000000b580         db  0x0e ; '.'
000000000000b581         db  0x88 ; '.'
000000000000b582         db  0x01 ; '.'
000000000000b583         db  0x56 ; 'V'
000000000000b584         db  0x0e ; '.'
000000000000b585         db  0x90 ; '.'
000000000000b586         db  0x01 ; '.'
000000000000b587         db  0x52 ; 'R'
000000000000b588         db  0x0e ; '.'
000000000000b589         db  0x70 ; 'p'
000000000000b58a         db  0x5b ; '['
000000000000b58b         db  0x0e ; '.'
000000000000b58c         db  0x38 ; '8'
000000000000b58d         db  0x41 ; 'A'
000000000000b58e         db  0x0e ; '.'
000000000000b58f         db  0x30 ; '0'
000000000000b590         db  0x41 ; 'A'
000000000000b591         db  0x0e ; '.'
000000000000b592         db  0x28 ; '('
000000000000b593         db  0x42 ; 'B'
000000000000b594         db  0x0e ; '.'
000000000000b595         db  0x20 ; ' '
000000000000b596         db  0x42 ; 'B'
000000000000b597         db  0x0e ; '.'
000000000000b598         db  0x18 ; '.'
000000000000b599         db  0x42 ; 'B'
000000000000b59a         db  0x0e ; '.'
000000000000b59b         db  0x10 ; '.'
000000000000b59c         db  0x42 ; 'B'
000000000000b59d         db  0x0e ; '.'
000000000000b59e         db  0x08 ; '.'
000000000000b59f         db  0x00 ; '.'
000000000000b5a0         dd         0x00000010                                  ; Length of the record
000000000000b5a4         dd         0x0000086c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b5a8         db         0xe8, 0xbe, 2 dup (0xff)                    ; begin 0x7490
000000000000b5ac         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x749a)
000000000000b5b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b5b1         align      4
000000000000b5b4         dd         0x00000028                                  ; Length of the record
000000000000b5b8         dd         0x00000880                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b5bc         db         0xe4, 0xbe, 2 dup (0xff)                    ; begin 0x74a0
000000000000b5c0         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x7533)
000000000000b5c4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b5c5         db  0x48 ; 'H'
000000000000b5c6         db  0x0e ; '.'
000000000000b5c7         db  0x10 ; '.'
000000000000b5c8         db  0x8c ; '.'
000000000000b5c9         db  0x02 ; '.'
000000000000b5ca         db  0x48 ; 'H'
000000000000b5cb         db  0x0e ; '.'
000000000000b5cc         db  0x18 ; '.'
000000000000b5cd         db  0x86 ; '.'
000000000000b5ce         db  0x03 ; '.'
000000000000b5cf         db  0x41 ; 'A'
000000000000b5d0         db  0x0e ; '.'
000000000000b5d1         db  0x20 ; ' '
000000000000b5d2         db  0x83 ; '.'
000000000000b5d3         db  0x04 ; '.'
000000000000b5d4         db  0x02 ; '.'
000000000000b5d5         db  0x74 ; 't'
000000000000b5d6         db  0x0e ; '.'
000000000000b5d7         db  0x18 ; '.'
000000000000b5d8         db  0x4b ; 'K'
000000000000b5d9         db  0x0e ; '.'
000000000000b5da         db  0x10 ; '.'
000000000000b5db         db  0x42 ; 'B'
000000000000b5dc         db  0x0e ; '.'
000000000000b5dd         db  0x08 ; '.'
000000000000b5de         db  0x00 ; '.'
000000000000b5df         db  0x00 ; '.'
000000000000b5e0         dd         0x00000010                                  ; Length of the record
000000000000b5e4         dd         0x000008ac                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b5e8         db         0x58, 0xbf, 2 dup (0xff)                    ; begin 0x7540
000000000000b5ec         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x7553)
000000000000b5f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b5f1         align      4
000000000000b5f4         dd         0x00000010                                  ; Length of the record
000000000000b5f8         dd         0x000008c0                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b5fc         db         0x64, 0xbf, 2 dup (0xff)                    ; begin 0x7560
000000000000b600         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x756c)
000000000000b604         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b605         align      8
000000000000b608         dd         0x00000010                                  ; Length of the record
000000000000b60c         dd         0x000008d4                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b610         db         0x60, 0xbf, 2 dup (0xff)                    ; begin 0x7570
000000000000b614         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x7588)
000000000000b618         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b619         align      4
000000000000b61c         dd         0x00000010                                  ; Length of the record
000000000000b620         dd         0x000008e8                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b624         db         0x6c, 0xbf, 2 dup (0xff)                    ; begin 0x7590
000000000000b628         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x75a4)
000000000000b62c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b62d         align      16
000000000000b630         dd         0x00000018                                  ; Length of the record
000000000000b634         dd         0x000008fc                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b638         db         0x78, 0xbf, 2 dup (0xff)                    ; begin 0x75b0
000000000000b63c         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x763e)
000000000000b640         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b641         db  0x44 ; 'D'
000000000000b642         db  0x0e ; '.'
000000000000b643         db  0x50 ; 'P'
000000000000b644         db  0x02 ; '.'
000000000000b645         db  0x7f ; '.'
000000000000b646         db  0x0a ; '.'
000000000000b647         db  0x0e ; '.'
000000000000b648         db  0x08 ; '.'
000000000000b649         db  0x41 ; 'A'
000000000000b64a         db  0x0b ; '.'
000000000000b64b         db  0x00 ; '.'
000000000000b64c         dd         0x00000018                                  ; Length of the record
000000000000b650         dd         0x00000918                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b654         db         0xec, 0xbf, 2 dup (0xff)                    ; begin 0x7640
000000000000b658         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x76ca)
000000000000b65c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b65d         db  0x44 ; 'D'
000000000000b65e         db  0x0e ; '.'
000000000000b65f         db  0x50 ; 'P'
000000000000b660         db  0x02 ; '.'
000000000000b661         db  0x7b ; '{'
000000000000b662         db  0x0a ; '.'
000000000000b663         db  0x0e ; '.'
000000000000b664         db  0x08 ; '.'
000000000000b665         db  0x41 ; 'A'
000000000000b666         db  0x0b ; '.'
000000000000b667         db  0x00 ; '.'
000000000000b668         dd         0x00000010                                  ; Length of the record
000000000000b66c         dd         0x00000934                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b670         db         0x60, 0xc0, 2 dup (0xff)                    ; begin 0x76d0
000000000000b674         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x76dc)
000000000000b678         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b679         align      4
000000000000b67c         dd         0x00000010                                  ; Length of the record
000000000000b680         dd         0x00000948                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b684         db         0x5c, 0xc0, 2 dup (0xff)                    ; begin 0x76e0
000000000000b688         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x76ef)
000000000000b68c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b68d         align      16
000000000000b690         dd         0x00000018                                  ; Length of the record
000000000000b694         dd         0x0000095c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b698         db         0x58, 0xc0, 2 dup (0xff)                    ; begin 0x76f0
000000000000b69c         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x7788)
000000000000b6a0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b6a1         db  0x44 ; 'D'
000000000000b6a2         db  0x0e ; '.'
000000000000b6a3         db  0x50 ; 'P'
000000000000b6a4         db  0x02 ; '.'
000000000000b6a5         db  0x8e ; '.'
000000000000b6a6         db  0x0a ; '.'
000000000000b6a7         db  0x0e ; '.'
000000000000b6a8         db  0x08 ; '.'
000000000000b6a9         db  0x41 ; 'A'
000000000000b6aa         db  0x0b ; '.'
000000000000b6ab         db  0x00 ; '.'
000000000000b6ac         dd         0x00000010                                  ; Length of the record
000000000000b6b0         dd         0x00000978                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b6b4         db         0xdc, 0xc0, 2 dup (0xff)                    ; begin 0x7790
000000000000b6b8         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x77a0)
000000000000b6bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b6bd         align      64
000000000000b6c0         dd         0x00000010                                  ; Length of the record
000000000000b6c4         dd         0x0000098c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b6c8         db         0xd8, 0xc0, 2 dup (0xff)                    ; begin 0x77a0
000000000000b6cc         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x77b1)
000000000000b6d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b6d1         align      4
000000000000b6d4         dd         0x00000010                                  ; Length of the record
000000000000b6d8         dd         0x000009a0                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b6dc         db         0xe4, 0xc0, 2 dup (0xff)                    ; begin 0x77c0
000000000000b6e0         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x77ca)
000000000000b6e4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b6e5         align      8
000000000000b6e8         dd         0x00000018                                  ; Length of the record
000000000000b6ec         dd         0x000009b4                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b6f0         db         0xe0, 0xc0, 2 dup (0xff)                    ; begin 0x77d0
000000000000b6f4         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x785e)
000000000000b6f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b6f9         db  0x44 ; 'D'
000000000000b6fa         db  0x0e ; '.'
000000000000b6fb         db  0x50 ; 'P'
000000000000b6fc         db  0x02 ; '.'
000000000000b6fd         db  0x7f ; '.'
000000000000b6fe         db  0x0a ; '.'
000000000000b6ff         db  0x0e ; '.'
000000000000b700         db  0x08 ; '.'
000000000000b701         db  0x41 ; 'A'
000000000000b702         db  0x0b ; '.'
000000000000b703         db  0x00 ; '.'
000000000000b704         dd         0x00000018                                  ; Length of the record
000000000000b708         dd         0x000009d0                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b70c         db         0x54, 0xc1, 2 dup (0xff)                    ; begin 0x7860
000000000000b710         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x78f1)
000000000000b714         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b715         db  0x44 ; 'D'
000000000000b716         db  0x0e ; '.'
000000000000b717         db  0x50 ; 'P'
000000000000b718         db  0x02 ; '.'
000000000000b719         db  0x82 ; '.'
000000000000b71a         db  0x0a ; '.'
000000000000b71b         db  0x0e ; '.'
000000000000b71c         db  0x08 ; '.'
000000000000b71d         db  0x41 ; 'A'
000000000000b71e         db  0x0b ; '.'
000000000000b71f         db  0x00 ; '.'
000000000000b720         dd         0x00000010                                  ; Length of the record
000000000000b724         dd         0x000009ec                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b728         db         0xd8, 0xc1, 2 dup (0xff)                    ; begin 0x7900
000000000000b72c         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x790c)
000000000000b730         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b731         align      4
000000000000b734         dd         0x00000010                                  ; Length of the record
000000000000b738         dd         0x00000a00                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b73c         db         0xd4, 0xc1, 2 dup (0xff)                    ; begin 0x7910
000000000000b740         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x7927)
000000000000b744         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b745         align      8
000000000000b748         dd         0x00000010                                  ; Length of the record
000000000000b74c         dd         0x00000a14                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b750         db         0xe0, 0xc1, 2 dup (0xff)                    ; begin 0x7930
000000000000b754         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x7943)
000000000000b758         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b759         align      4
000000000000b75c         dd         0x00000010                                  ; Length of the record
000000000000b760         dd         0x00000a28                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b764         db         0xec, 0xc1, 2 dup (0xff)                    ; begin 0x7950
000000000000b768         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x795c)
000000000000b76c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b76d         align      16
000000000000b770         dd         0x00000010                                  ; Length of the record
000000000000b774         dd         0x00000a3c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b778         db         0xe8, 0xc1, 2 dup (0xff)                    ; begin 0x7960
000000000000b77c         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x7974)
000000000000b780         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b781         align      4
000000000000b784         dd         0x00000010                                  ; Length of the record
000000000000b788         dd         0x00000a50                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b78c         db         0xf4, 0xc1, 2 dup (0xff)                    ; begin 0x7980
000000000000b790         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x7993)
000000000000b794         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b795         align      8
000000000000b798         dd         0x00000014                                  ; Length of the record
000000000000b79c         dd         0x00000a64                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b7a0         db         0x00, 0xc2, 2 dup (0xff)                    ; begin 0x79a0
000000000000b7a4         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x79b8)
000000000000b7a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b7a9         align      16
000000000000b7b0         dd         0x00000014                                  ; Length of the record
000000000000b7b4         dd         0x00000a7c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b7b8         db         0x08, 0xc2, 2 dup (0xff)                    ; begin 0x79c0
000000000000b7bc         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x79ce)
000000000000b7c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b7c1         align      8
000000000000b7c8         dd         0x00000110                                  ; Length of the record
000000000000b7cc         dd         0x00000a94                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b7d0         db         0x00, 0xc2, 2 dup (0xff)                    ; begin 0x79d0
000000000000b7d4         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x7de7)
000000000000b7d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b7d9         db  0x42 ; 'B'
000000000000b7da         db  0x0e ; '.'
000000000000b7db         db  0x10 ; '.'
000000000000b7dc         db  0x8f ; '.'
000000000000b7dd         db  0x02 ; '.'
000000000000b7de         db  0x42 ; 'B'
000000000000b7df         db  0x0e ; '.'
000000000000b7e0         db  0x18 ; '.'
000000000000b7e1         db  0x8e ; '.'
000000000000b7e2         db  0x03 ; '.'
000000000000b7e3         db  0x42 ; 'B'
000000000000b7e4         db  0x0e ; '.'
000000000000b7e5         db  0x20 ; ' '
000000000000b7e6         db  0x8d ; '.'
000000000000b7e7         db  0x04 ; '.'
000000000000b7e8         db  0x42 ; 'B'
000000000000b7e9         db  0x0e ; '.'
000000000000b7ea         db  0x28 ; '('
000000000000b7eb         db  0x8c ; '.'
000000000000b7ec         db  0x05 ; '.'
000000000000b7ed         db  0x44 ; 'D'
000000000000b7ee         db  0x0e ; '.'
000000000000b7ef         db  0x30 ; '0'
000000000000b7f0         db  0x86 ; '.'
000000000000b7f1         db  0x06 ; '.'
000000000000b7f2         db  0x41 ; 'A'
000000000000b7f3         db  0x0e ; '.'
000000000000b7f4         db  0x38 ; '8'
000000000000b7f5         db  0x83 ; '.'
000000000000b7f6         db  0x07 ; '.'
000000000000b7f7         db  0x4a ; 'J'
000000000000b7f8         db  0x0e ; '.'
000000000000b7f9         db  0x60 ; '`'
000000000000b7fa         db  0x02 ; '.'
000000000000b7fb         db  0xdd ; '.'
000000000000b7fc         db  0x0e ; '.'
000000000000b7fd         db  0x68 ; 'h'
000000000000b7fe         db  0x57 ; 'W'
000000000000b7ff         db  0x0e ; '.'
000000000000b800         db  0x70 ; 'p'
000000000000b801         db  0x42 ; 'B'
000000000000b802         db  0x0e ; '.'
000000000000b803         db  0x78 ; 'x'
000000000000b804         db  0x42 ; 'B'
000000000000b805         db  0x0e ; '.'
000000000000b806         db  0x80 ; '.'
000000000000b807         db  0x01 ; '.'
000000000000b808         db  0x42 ; 'B'
000000000000b809         db  0x0e ; '.'
000000000000b80a         db  0x88 ; '.'
000000000000b80b         db  0x01 ; '.'
000000000000b80c         db  0x42 ; 'B'
000000000000b80d         db  0x0e ; '.'
000000000000b80e         db  0x90 ; '.'
000000000000b80f         db  0x01 ; '.'
000000000000b810         db  0x53 ; 'S'
000000000000b811         db  0x0e ; '.'
000000000000b812         db  0x60 ; '`'
000000000000b813         db  0x44 ; 'D'
000000000000b814         db  0x0a ; '.'
000000000000b815         db  0x0e ; '.'
000000000000b816         db  0x38 ; '8'
000000000000b817         db  0x41 ; 'A'
000000000000b818         db  0x0e ; '.'
000000000000b819         db  0x30 ; '0'
000000000000b81a         db  0x41 ; 'A'
000000000000b81b         db  0x0e ; '.'
000000000000b81c         db  0x28 ; '('
000000000000b81d         db  0x42 ; 'B'
000000000000b81e         db  0x0e ; '.'
000000000000b81f         db  0x20 ; ' '
000000000000b820         db  0x42 ; 'B'
000000000000b821         db  0x0e ; '.'
000000000000b822         db  0x18 ; '.'
000000000000b823         db  0x42 ; 'B'
000000000000b824         db  0x0e ; '.'
000000000000b825         db  0x10 ; '.'
000000000000b826         db  0x42 ; 'B'
000000000000b827         db  0x0e ; '.'
000000000000b828         db  0x08 ; '.'
000000000000b829         db  0x44 ; 'D'
000000000000b82a         db  0x0b ; '.'
000000000000b82b         db  0x02 ; '.'
000000000000b82c         db  0x78 ; 'x'
000000000000b82d         db  0x0a ; '.'
000000000000b82e         db  0x0e ; '.'
000000000000b82f         db  0x68 ; 'h'
000000000000b830         db  0x48 ; 'H'
000000000000b831         db  0x0b ; '.'
000000000000b832         db  0x5a ; 'Z'
000000000000b833         db  0x0a ; '.'
000000000000b834         db  0x0e ; '.'
000000000000b835         db  0x38 ; '8'
000000000000b836         db  0x47 ; 'G'
000000000000b837         db  0x0e ; '.'
000000000000b838         db  0x30 ; '0'
000000000000b839         db  0x41 ; 'A'
000000000000b83a         db  0x0e ; '.'
000000000000b83b         db  0x28 ; '('
000000000000b83c         db  0x42 ; 'B'
000000000000b83d         db  0x0e ; '.'
000000000000b83e         db  0x20 ; ' '
000000000000b83f         db  0x42 ; 'B'
000000000000b840         db  0x0e ; '.'
000000000000b841         db  0x18 ; '.'
000000000000b842         db  0x42 ; 'B'
000000000000b843         db  0x0e ; '.'
000000000000b844         db  0x10 ; '.'
000000000000b845         db  0x42 ; 'B'
000000000000b846         db  0x0e ; '.'
000000000000b847         db  0x08 ; '.'
000000000000b848         db  0x56 ; 'V'
000000000000b849         db  0x0b ; '.'
000000000000b84a         db  0x5e ; '^'
000000000000b84b         db  0x0a ; '.'
000000000000b84c         db  0x0e ; '.'
000000000000b84d         db  0x38 ; '8'
000000000000b84e         db  0x52 ; 'R'
000000000000b84f         db  0x0e ; '.'
000000000000b850         db  0x30 ; '0'
000000000000b851         db  0x41 ; 'A'
000000000000b852         db  0x0e ; '.'
000000000000b853         db  0x28 ; '('
000000000000b854         db  0x42 ; 'B'
000000000000b855         db  0x0e ; '.'
000000000000b856         db  0x20 ; ' '
000000000000b857         db  0x42 ; 'B'
000000000000b858         db  0x0e ; '.'
000000000000b859         db  0x18 ; '.'
000000000000b85a         db  0x42 ; 'B'
000000000000b85b         db  0x0e ; '.'
000000000000b85c         db  0x10 ; '.'
000000000000b85d         db  0x42 ; 'B'
000000000000b85e         db  0x0e ; '.'
000000000000b85f         db  0x08 ; '.'
000000000000b860         db  0x4f ; 'O'
000000000000b861         db  0x0b ; '.'
000000000000b862         db  0x62 ; 'b'
000000000000b863         db  0x0a ; '.'
000000000000b864         db  0x0e ; '.'
000000000000b865         db  0x38 ; '8'
000000000000b866         db  0x50 ; 'P'
000000000000b867         db  0x0e ; '.'
000000000000b868         db  0x30 ; '0'
000000000000b869         db  0x41 ; 'A'
000000000000b86a         db  0x0e ; '.'
000000000000b86b         db  0x28 ; '('
000000000000b86c         db  0x42 ; 'B'
000000000000b86d         db  0x0e ; '.'
000000000000b86e         db  0x20 ; ' '
000000000000b86f         db  0x42 ; 'B'
000000000000b870         db  0x0e ; '.'
000000000000b871         db  0x18 ; '.'
000000000000b872         db  0x42 ; 'B'
000000000000b873         db  0x0e ; '.'
000000000000b874         db  0x10 ; '.'
000000000000b875         db  0x42 ; 'B'
000000000000b876         db  0x0e ; '.'
000000000000b877         db  0x08 ; '.'
000000000000b878         db  0x55 ; 'U'
000000000000b879         db  0x0b ; '.'
000000000000b87a         db  0x66 ; 'f'
000000000000b87b         db  0x0e ; '.'
000000000000b87c         db  0x68 ; 'h'
000000000000b87d         db  0x42 ; 'B'
000000000000b87e         db  0x0e ; '.'
000000000000b87f         db  0x70 ; 'p'
000000000000b880         db  0x5c ; '\'
000000000000b881         db  0x0e ; '.'
000000000000b882         db  0x68 ; 'h'
000000000000b883         db  0x41 ; 'A'
000000000000b884         db  0x0e ; '.'
000000000000b885         db  0x60 ; '`'
000000000000b886         db  0x44 ; 'D'
000000000000b887         db  0x0a ; '.'
000000000000b888         db  0x0e ; '.'
000000000000b889         db  0x38 ; '8'
000000000000b88a         db  0x41 ; 'A'
000000000000b88b         db  0x0e ; '.'
000000000000b88c         db  0x30 ; '0'
000000000000b88d         db  0x41 ; 'A'
000000000000b88e         db  0x0e ; '.'
000000000000b88f         db  0x28 ; '('
000000000000b890         db  0x42 ; 'B'
000000000000b891         db  0x0e ; '.'
000000000000b892         db  0x20 ; ' '
000000000000b893         db  0x42 ; 'B'
000000000000b894         db  0x0e ; '.'
000000000000b895         db  0x18 ; '.'
000000000000b896         db  0x42 ; 'B'
000000000000b897         db  0x0e ; '.'
000000000000b898         db  0x10 ; '.'
000000000000b899         db  0x42 ; 'B'
000000000000b89a         db  0x0e ; '.'
000000000000b89b         db  0x08 ; '.'
000000000000b89c         db  0x45 ; 'E'
000000000000b89d         db  0x0b ; '.'
000000000000b89e         db  0x68 ; 'h'
000000000000b89f         db  0x0a ; '.'
000000000000b8a0         db  0x0e ; '.'
000000000000b8a1         db  0x68 ; 'h'
000000000000b8a2         db  0x48 ; 'H'
000000000000b8a3         db  0x0b ; '.'
000000000000b8a4         db  0x72 ; 'r'
000000000000b8a5         db  0x0e ; '.'
000000000000b8a6         db  0x68 ; 'h'
000000000000b8a7         db  0x45 ; 'E'
000000000000b8a8         db  0x0e ; '.'
000000000000b8a9         db  0x70 ; 'p'
000000000000b8aa         db  0x42 ; 'B'
000000000000b8ab         db  0x0e ; '.'
000000000000b8ac         db  0x78 ; 'x'
000000000000b8ad         db  0x42 ; 'B'
000000000000b8ae         db  0x0e ; '.'
000000000000b8af         db  0x80 ; '.'
000000000000b8b0         db  0x01 ; '.'
000000000000b8b1         db  0x5e ; '^'
000000000000b8b2         db  0x0e ; '.'
000000000000b8b3         db  0x60 ; '`'
000000000000b8b4         db  0x44 ; 'D'
000000000000b8b5         db  0x0a ; '.'
000000000000b8b6         db  0x0e ; '.'
000000000000b8b7         db  0x38 ; '8'
000000000000b8b8         db  0x41 ; 'A'
000000000000b8b9         db  0x0e ; '.'
000000000000b8ba         db  0x30 ; '0'
000000000000b8bb         db  0x41 ; 'A'
000000000000b8bc         db  0x0e ; '.'
000000000000b8bd         db  0x28 ; '('
000000000000b8be         db  0x42 ; 'B'
000000000000b8bf         db  0x0e ; '.'
000000000000b8c0         db  0x20 ; ' '
000000000000b8c1         db  0x42 ; 'B'
000000000000b8c2         db  0x0e ; '.'
000000000000b8c3         db  0x18 ; '.'
000000000000b8c4         db  0x42 ; 'B'
000000000000b8c5         db  0x0e ; '.'
000000000000b8c6         db  0x10 ; '.'
000000000000b8c7         db  0x42 ; 'B'
000000000000b8c8         db  0x0e ; '.'
000000000000b8c9         db  0x08 ; '.'
000000000000b8ca         db  0x41 ; 'A'
000000000000b8cb         db  0x0b ; '.'
000000000000b8cc         db  0x79 ; 'y'
000000000000b8cd         db  0x0a ; '.'
000000000000b8ce         db  0x0e ; '.'
000000000000b8cf         db  0x68 ; 'h'
000000000000b8d0         db  0x42 ; 'B'
000000000000b8d1         db  0x0e ; '.'
000000000000b8d2         db  0x70 ; 'p'
000000000000b8d3         db  0x42 ; 'B'
000000000000b8d4         db  0x0e ; '.'
000000000000b8d5         db  0x78 ; 'x'
000000000000b8d6         db  0x42 ; 'B'
000000000000b8d7         db  0x0e ; '.'
000000000000b8d8         db  0x80 ; '.'
000000000000b8d9         db  0x01 ; '.'
000000000000b8da         db  0x51 ; 'Q'
000000000000b8db         db  0x0b ; '.'
000000000000b8dc         dd         0x00000010                                  ; Length of the record
000000000000b8e0         dd         0x00000ba8                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b8e4         db         0x0c, 0xc5, 2 dup (0xff)                    ; begin 0x7df0
000000000000b8e8         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x7e10)
000000000000b8ec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b8ed         align      16
000000000000b8f0         dd         0x00000018                                  ; Length of the record
000000000000b8f4         dd         0x00000bbc                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b8f8         db         0x18, 0xc5, 2 dup (0xff)                    ; begin 0x7e10
000000000000b8fc         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x7e88)
000000000000b900         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b901         db  0x44 ; 'D'
000000000000b902         db  0x0e ; '.'
000000000000b903         db  0x70 ; 'p'
000000000000b904         db  0x02 ; '.'
000000000000b905         db  0x60 ; '`'
000000000000b906         db  0x0a ; '.'
000000000000b907         db  0x0e ; '.'
000000000000b908         db  0x08 ; '.'
000000000000b909         db  0x41 ; 'A'
000000000000b90a         db  0x0b ; '.'
000000000000b90b         db  0x00 ; '.'
000000000000b90c         dd         0x00000028                                  ; Length of the record
000000000000b910         dd         0x00000bd8                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b914         db         0x7c, 0xc5, 2 dup (0xff)                    ; begin 0x7e90
000000000000b918         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x7f65)
000000000000b91c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b91d         db  0x41 ; 'A'
000000000000b91e         db  0x0e ; '.'
000000000000b91f         db  0x10 ; '.'
000000000000b920         db  0x86 ; '.'
000000000000b921         db  0x02 ; '.'
000000000000b922         db  0x41 ; 'A'
000000000000b923         db  0x0e ; '.'
000000000000b924         db  0x18 ; '.'
000000000000b925         db  0x83 ; '.'
000000000000b926         db  0x03 ; '.'
000000000000b927         db  0x50 ; 'P'
000000000000b928         db  0x0e ; '.'
000000000000b929         db  0xd0 ; '.'
000000000000b92a         db  0x01 ; '.'
000000000000b92b         db  0x02 ; '.'
000000000000b92c         db  0xab ; '.'
000000000000b92d         db  0x0a ; '.'
000000000000b92e         db  0x0e ; '.'
000000000000b92f         db  0x18 ; '.'
000000000000b930         db  0x41 ; 'A'
000000000000b931         db  0x0e ; '.'
000000000000b932         db  0x10 ; '.'
000000000000b933         db  0x41 ; 'A'
000000000000b934         db  0x0e ; '.'
000000000000b935         db  0x08 ; '.'
000000000000b936         db  0x41 ; 'A'
000000000000b937         db  0x0b ; '.'
000000000000b938         dd         0x0000001c                                  ; Length of the record
000000000000b93c         dd         0x00000c04                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b940         db         0x30, 0xc6, 2 dup (0xff)                    ; begin 0x7f70
000000000000b944         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x7ff0)
000000000000b948         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b949         db  0x41 ; 'A'
000000000000b94a         db  0x0e ; '.'
000000000000b94b         db  0x10 ; '.'
000000000000b94c         db  0x83 ; '.'
000000000000b94d         db  0x02 ; '.'
000000000000b94e         db  0x02 ; '.'
000000000000b94f         db  0x7a ; 'z'
000000000000b950         db  0x0e ; '.'
000000000000b951         db  0x08 ; '.'
000000000000b952         db  0x00 ; '.'
000000000000b953         db  0x00 ; '.'
000000000000b954         db  0x00 ; '.'
000000000000b955         db  0x00 ; '.'
000000000000b956         db  0x00 ; '.'
000000000000b957         db  0x00 ; '.'
000000000000b958         dd         0x00000018                                  ; Length of the record
000000000000b95c         dd         0x00000c24                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b960         db         0x90, 0xc6, 2 dup (0xff)                    ; begin 0x7ff0
000000000000b964         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x800a)
000000000000b968         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b969         db  0x41 ; 'A'
000000000000b96a         db  0x0e ; '.'
000000000000b96b         db  0x10 ; '.'
000000000000b96c         db  0x83 ; '.'
000000000000b96d         db  0x02 ; '.'
000000000000b96e         db  0x53 ; 'S'
000000000000b96f         db  0x0a ; '.'
000000000000b970         db  0x0e ; '.'
000000000000b971         db  0x08 ; '.'
000000000000b972         db  0x41 ; 'A'
000000000000b973         db  0x0b ; '.'
000000000000b974         dd         0x00000010                                  ; Length of the record
000000000000b978         dd         0x00000c40                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b97c         db         0x94, 0xc6, 2 dup (0xff)                    ; begin 0x8010
000000000000b980         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x8034)
000000000000b984         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b985         db  0x5f ; '_'
000000000000b986         db  0x0e ; '.'
000000000000b987         db  0x10 ; '.'
000000000000b988         dd         0x00000010                                  ; Length of the record
000000000000b98c         dd         0x00000c54                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b990         db         0xb0, 0xc6, 2 dup (0xff)                    ; begin 0x8040
000000000000b994         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x8042)
000000000000b998         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b999         align      4
000000000000b99c         dd         0x00000020                                  ; Length of the record
000000000000b9a0         dd         0x00000c68                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b9a4         db         0xac, 0xc6, 2 dup (0xff)                    ; begin 0x8050
000000000000b9a8         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x8086)
000000000000b9ac         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b9ad         db  0x44 ; 'D'
000000000000b9ae         db  0x0e ; '.'
000000000000b9af         db  0x10 ; '.'
000000000000b9b0         db  0x83 ; '.'
000000000000b9b1         db  0x02 ; '.'
000000000000b9b2         db  0x5d ; ']'
000000000000b9b3         db  0x0a ; '.'
000000000000b9b4         db  0x0e ; '.'
000000000000b9b5         db  0x08 ; '.'
000000000000b9b6         db  0x47 ; 'G'
000000000000b9b7         db  0x0b ; '.'
000000000000b9b8         db  0x48 ; 'H'
000000000000b9b9         db  0x0a ; '.'
000000000000b9ba         db  0x0e ; '.'
000000000000b9bb         db  0x08 ; '.'
000000000000b9bc         db  0x41 ; 'A'
000000000000b9bd         db  0x0b ; '.'
000000000000b9be         db  0x00 ; '.'
000000000000b9bf         db  0x00 ; '.'
000000000000b9c0         dd         0x00000010                                  ; Length of the record
000000000000b9c4         dd         0x00000c8c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b9c8         db         0xc8, 0xc6, 2 dup (0xff)                    ; begin 0x8090
000000000000b9cc         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x80b4)
000000000000b9d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b9d1         db  0x5f ; '_'
000000000000b9d2         db  0x0e ; '.'
000000000000b9d3         db  0x10 ; '.'
000000000000b9d4         dd         0x00000014                                  ; Length of the record
000000000000b9d8         dd         0x00000ca0                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b9dc         db         0xe4, 0xc6, 2 dup (0xff)                    ; begin 0x80c0
000000000000b9e0         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x8142)
000000000000b9e4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b9e5         db  0x02 ; '.'
000000000000b9e6         db  0x5f ; '_'
000000000000b9e7         db  0x0e ; '.'
000000000000b9e8         db  0x10 ; '.'
000000000000b9e9         db  0x49 ; 'I'
000000000000b9ea         db  0x0e ; '.'
000000000000b9eb         db  0x08 ; '.'
000000000000b9ec         dd         0x00000014                                  ; Length of the record
000000000000b9f0         dd         0x00000cb8                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000b9f4         db         0x5c, 0xc7, 2 dup (0xff)                    ; begin 0x8150
000000000000b9f8         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x819a)
000000000000b9fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b9fd         db  0x02 ; '.'
000000000000b9fe         db  0x45 ; 'E'
000000000000b9ff         db  0x0e ; '.'
000000000000ba00         db  0x10 ; '.'
000000000000ba01         db  0x00 ; '.'
000000000000ba02         db  0x00 ; '.'
000000000000ba03         db  0x00 ; '.'
000000000000ba04         dd         0x00000018                                  ; Length of the record
000000000000ba08         dd         0x00000cd0                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000ba0c         db         0x94, 0xc7, 2 dup (0xff)                    ; begin 0x81a0
000000000000ba10         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x81b7)
000000000000ba14         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ba15         db  0x41 ; 'A'
000000000000ba16         db  0x0e ; '.'
000000000000ba17         db  0x10 ; '.'
000000000000ba18         db  0x83 ; '.'
000000000000ba19         db  0x02 ; '.'
000000000000ba1a         db  0x51 ; 'Q'
000000000000ba1b         db  0x0e ; '.'
000000000000ba1c         db  0x08 ; '.'
000000000000ba1d         db  0x00 ; '.'
000000000000ba1e         db  0x00 ; '.'
000000000000ba1f         db  0x00 ; '.'
000000000000ba20         dd         0x00000018                                  ; Length of the record
000000000000ba24         dd         0x00000cec                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000ba28         db         0x98, 0xc7, 2 dup (0xff)                    ; begin 0x81c0
000000000000ba2c         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x81ee)
000000000000ba30         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ba31         db  0x47 ; 'G'
000000000000ba32         db  0x0e ; '.'
000000000000ba33         db  0x10 ; '.'
000000000000ba34         db  0x61 ; 'a'
000000000000ba35         db  0x0a ; '.'
000000000000ba36         db  0x0e ; '.'
000000000000ba37         db  0x08 ; '.'
000000000000ba38         db  0x41 ; 'A'
000000000000ba39         db  0x0b ; '.'
000000000000ba3a         db  0x00 ; '.'
000000000000ba3b         db  0x00 ; '.'
000000000000ba3c         dd         0x00000024                                  ; Length of the record
000000000000ba40         dd         0x00000d08                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000ba44         db         0xac, 0xc7, 2 dup (0xff)                    ; begin 0x81f0
000000000000ba48         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x8218)
000000000000ba4c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ba4d         db  0x41 ; 'A'
000000000000ba4e         db  0x0e ; '.'
000000000000ba4f         db  0x10 ; '.'
000000000000ba50         db  0x86 ; '.'
000000000000ba51         db  0x02 ; '.'
000000000000ba52         db  0x41 ; 'A'
000000000000ba53         db  0x0e ; '.'
000000000000ba54         db  0x18 ; '.'
000000000000ba55         db  0x83 ; '.'
000000000000ba56         db  0x03 ; '.'
000000000000ba57         db  0x4d ; 'M'
000000000000ba58         db  0x0e ; '.'
000000000000ba59         db  0x20 ; ' '
000000000000ba5a         db  0x49 ; 'I'
000000000000ba5b         db  0x0e ; '.'
000000000000ba5c         db  0x18 ; '.'
000000000000ba5d         db  0x47 ; 'G'
000000000000ba5e         db  0x0e ; '.'
000000000000ba5f         db  0x10 ; '.'
000000000000ba60         db  0x41 ; 'A'
000000000000ba61         db  0x0e ; '.'
000000000000ba62         db  0x08 ; '.'
000000000000ba63         db  0x00 ; '.'
000000000000ba64         dd         0x00000018                                  ; Length of the record
000000000000ba68         dd         0x00000d30                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000ba6c         db         0xb4, 0xc7, 2 dup (0xff)                    ; begin 0x8220
000000000000ba70         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x8233)
000000000000ba74         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ba75         db  0x41 ; 'A'
000000000000ba76         db  0x0e ; '.'
000000000000ba77         db  0x10 ; '.'
000000000000ba78         db  0x83 ; '.'
000000000000ba79         db  0x02 ; '.'
000000000000ba7a         db  0x50 ; 'P'
000000000000ba7b         db  0x0e ; '.'
000000000000ba7c         db  0x08 ; '.'
000000000000ba7d         db  0x00 ; '.'
000000000000ba7e         db  0x00 ; '.'
000000000000ba7f         db  0x00 ; '.'
000000000000ba80         dd         0x00000014                                  ; Length of the record
000000000000ba84         dd         0x00000d4c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000ba88         db         0xb8, 0xc7, 2 dup (0xff)                    ; begin 0x8240
000000000000ba8c         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x8275)
000000000000ba90         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ba91         db  0x4b ; 'K'
000000000000ba92         db  0x0e ; '.'
000000000000ba93         db  0x10 ; '.'
000000000000ba94         db  0x00 ; '.'
000000000000ba95         db  0x00 ; '.'
000000000000ba96         db  0x00 ; '.'
000000000000ba97         db  0x00 ; '.'
000000000000ba98         dd         0x00000048                                  ; Length of the record
000000000000ba9c         dd         0x00000d64                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000baa0         db         0xe0, 0xc7, 2 dup (0xff)                    ; begin 0x8280
000000000000baa4         db         0x00, 0x01, 2 dup (0x00)                    ; length 0x100 (end at 0x8380)
000000000000baa8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000baa9         db  0x42 ; 'B'
000000000000baaa         db  0x0e ; '.'
000000000000baab         db  0x10 ; '.'
000000000000baac         db  0x8f ; '.'
000000000000baad         db  0x02 ; '.'
000000000000baae         db  0x42 ; 'B'
000000000000baaf         db  0x0e ; '.'
000000000000bab0         db  0x18 ; '.'
000000000000bab1         db  0x8e ; '.'
000000000000bab2         db  0x03 ; '.'
000000000000bab3         db  0x45 ; 'E'
000000000000bab4         db  0x0e ; '.'
000000000000bab5         db  0x20 ; ' '
000000000000bab6         db  0x8d ; '.'
000000000000bab7         db  0x04 ; '.'
000000000000bab8         db  0x42 ; 'B'
000000000000bab9         db  0x0e ; '.'
000000000000baba         db  0x28 ; '('
000000000000babb         db  0x8c ; '.'
000000000000babc         db  0x05 ; '.'
000000000000babd         db  0x44 ; 'D'
000000000000babe         db  0x0e ; '.'
000000000000babf         db  0x30 ; '0'
000000000000bac0         db  0x86 ; '.'
000000000000bac1         db  0x06 ; '.'
000000000000bac2         db  0x41 ; 'A'
000000000000bac3         db  0x0e ; '.'
000000000000bac4         db  0x38 ; '8'
000000000000bac5         db  0x83 ; '.'
000000000000bac6         db  0x07 ; '.'
000000000000bac7         db  0x4e ; 'N'
000000000000bac8         db  0x0e ; '.'
000000000000bac9         db  0x50 ; 'P'
000000000000baca         db  0x02 ; '.'
000000000000bacb         db  0x9d ; '.'
000000000000bacc         db  0x0a ; '.'
000000000000bacd         db  0x0e ; '.'
000000000000bace         db  0x38 ; '8'
000000000000bacf         db  0x41 ; 'A'
000000000000bad0         db  0x0e ; '.'
000000000000bad1         db  0x30 ; '0'
000000000000bad2         db  0x41 ; 'A'
000000000000bad3         db  0x0e ; '.'
000000000000bad4         db  0x28 ; '('
000000000000bad5         db  0x42 ; 'B'
000000000000bad6         db  0x0e ; '.'
000000000000bad7         db  0x20 ; ' '
000000000000bad8         db  0x42 ; 'B'
000000000000bad9         db  0x0e ; '.'
000000000000bada         db  0x18 ; '.'
000000000000badb         db  0x42 ; 'B'
000000000000badc         db  0x0e ; '.'
000000000000badd         db  0x10 ; '.'
000000000000bade         db  0x42 ; 'B'
000000000000badf         db  0x0e ; '.'
000000000000bae0         db  0x08 ; '.'
000000000000bae1         db  0x4b ; 'K'
000000000000bae2         db  0x0b ; '.'
000000000000bae3         db  0x00 ; '.'
000000000000bae4         dd         0x00000018                                  ; Length of the record
000000000000bae8         dd         0x00000db0                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000baec         db         0x94, 0xc8, 2 dup (0xff)                    ; begin 0x8380
000000000000baf0         db         0x21, 3 dup (0x00)                          ; length 0x21 (end at 0x83a1)
000000000000baf4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000baf5         db  0x44 ; 'D'
000000000000baf6         db  0x0e ; '.'
000000000000baf7         db  0x18 ; '.'
000000000000baf8         db  0x42 ; 'B'
000000000000baf9         db  0x0e ; '.'
000000000000bafa         db  0x20 ; ' '
000000000000bafb         db  0x5a ; 'Z'
000000000000bafc         db  0x0e ; '.'
000000000000bafd         db  0x08 ; '.'
000000000000bafe         db  0x00 ; '.'
000000000000baff         db  0x00 ; '.'
000000000000bb00         dd         0x0000004c                                  ; Length of the record
000000000000bb04         dd         0x00000dcc                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000bb08         db         0xa8, 0xc8, 2 dup (0xff)                    ; begin 0x83b0
000000000000bb0c         db         0x1c, 0x04, 2 dup (0x00)                    ; length 0x41c (end at 0x87cc)
000000000000bb10         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bb11         db  0x42 ; 'B'
000000000000bb12         db  0x0e ; '.'
000000000000bb13         db  0x10 ; '.'
000000000000bb14         db  0x8f ; '.'
000000000000bb15         db  0x02 ; '.'
000000000000bb16         db  0x42 ; 'B'
000000000000bb17         db  0x0e ; '.'
000000000000bb18         db  0x18 ; '.'
000000000000bb19         db  0x8e ; '.'
000000000000bb1a         db  0x03 ; '.'
000000000000bb1b         db  0x42 ; 'B'
000000000000bb1c         db  0x0e ; '.'
000000000000bb1d         db  0x20 ; ' '
000000000000bb1e         db  0x8d ; '.'
000000000000bb1f         db  0x04 ; '.'
000000000000bb20         db  0x42 ; 'B'
000000000000bb21         db  0x0e ; '.'
000000000000bb22         db  0x28 ; '('
000000000000bb23         db  0x8c ; '.'
000000000000bb24         db  0x05 ; '.'
000000000000bb25         db  0x41 ; 'A'
000000000000bb26         db  0x0e ; '.'
000000000000bb27         db  0x30 ; '0'
000000000000bb28         db  0x86 ; '.'
000000000000bb29         db  0x06 ; '.'
000000000000bb2a         db  0x41 ; 'A'
000000000000bb2b         db  0x0e ; '.'
000000000000bb2c         db  0x38 ; '8'
000000000000bb2d         db  0x83 ; '.'
000000000000bb2e         db  0x07 ; '.'
000000000000bb2f         db  0x44 ; 'D'
000000000000bb30         db  0x0e ; '.'
000000000000bb31         db  0x60 ; '`'
000000000000bb32         db  0x02 ; '.'
000000000000bb33         db  0xe9 ; '.'
000000000000bb34         db  0x0a ; '.'
000000000000bb35         db  0x0e ; '.'
000000000000bb36         db  0x38 ; '8'
000000000000bb37         db  0x41 ; 'A'
000000000000bb38         db  0x0e ; '.'
000000000000bb39         db  0x30 ; '0'
000000000000bb3a         db  0x41 ; 'A'
000000000000bb3b         db  0x0e ; '.'
000000000000bb3c         db  0x28 ; '('
000000000000bb3d         db  0x42 ; 'B'
000000000000bb3e         db  0x0e ; '.'
000000000000bb3f         db  0x20 ; ' '
000000000000bb40         db  0x42 ; 'B'
000000000000bb41         db  0x0e ; '.'
000000000000bb42         db  0x18 ; '.'
000000000000bb43         db  0x42 ; 'B'
000000000000bb44         db  0x0e ; '.'
000000000000bb45         db  0x10 ; '.'
000000000000bb46         db  0x42 ; 'B'
000000000000bb47         db  0x0e ; '.'
000000000000bb48         db  0x08 ; '.'
000000000000bb49         db  0x47 ; 'G'
000000000000bb4a         db  0x0b ; '.'
000000000000bb4b         db  0x00 ; '.'
000000000000bb4c         db  0x00 ; '.'
000000000000bb4d         db  0x00 ; '.'
000000000000bb4e         db  0x00 ; '.'
000000000000bb4f         db  0x00 ; '.'
000000000000bb50         dd         0x0000004c                                  ; Length of the record
000000000000bb54         dd         0x00000e1c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000bb58         db         0x78, 0xcc, 2 dup (0xff)                    ; begin 0x87d0
000000000000bb5c         db         0x1c, 0x04, 2 dup (0x00)                    ; length 0x41c (end at 0x8bec)
000000000000bb60         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bb61         db  0x42 ; 'B'
000000000000bb62         db  0x0e ; '.'
000000000000bb63         db  0x10 ; '.'
000000000000bb64         db  0x8f ; '.'
000000000000bb65         db  0x02 ; '.'
000000000000bb66         db  0x42 ; 'B'
000000000000bb67         db  0x0e ; '.'
000000000000bb68         db  0x18 ; '.'
000000000000bb69         db  0x8e ; '.'
000000000000bb6a         db  0x03 ; '.'
000000000000bb6b         db  0x42 ; 'B'
000000000000bb6c         db  0x0e ; '.'
000000000000bb6d         db  0x20 ; ' '
000000000000bb6e         db  0x8d ; '.'
000000000000bb6f         db  0x04 ; '.'
000000000000bb70         db  0x42 ; 'B'
000000000000bb71         db  0x0e ; '.'
000000000000bb72         db  0x28 ; '('
000000000000bb73         db  0x8c ; '.'
000000000000bb74         db  0x05 ; '.'
000000000000bb75         db  0x41 ; 'A'
000000000000bb76         db  0x0e ; '.'
000000000000bb77         db  0x30 ; '0'
000000000000bb78         db  0x86 ; '.'
000000000000bb79         db  0x06 ; '.'
000000000000bb7a         db  0x41 ; 'A'
000000000000bb7b         db  0x0e ; '.'
000000000000bb7c         db  0x38 ; '8'
000000000000bb7d         db  0x83 ; '.'
000000000000bb7e         db  0x07 ; '.'
000000000000bb7f         db  0x44 ; 'D'
000000000000bb80         db  0x0e ; '.'
000000000000bb81         db  0x60 ; '`'
000000000000bb82         db  0x02 ; '.'
000000000000bb83         db  0xe9 ; '.'
000000000000bb84         db  0x0a ; '.'
000000000000bb85         db  0x0e ; '.'
000000000000bb86         db  0x38 ; '8'
000000000000bb87         db  0x41 ; 'A'
000000000000bb88         db  0x0e ; '.'
000000000000bb89         db  0x30 ; '0'
000000000000bb8a         db  0x41 ; 'A'
000000000000bb8b         db  0x0e ; '.'
000000000000bb8c         db  0x28 ; '('
000000000000bb8d         db  0x42 ; 'B'
000000000000bb8e         db  0x0e ; '.'
000000000000bb8f         db  0x20 ; ' '
000000000000bb90         db  0x42 ; 'B'
000000000000bb91         db  0x0e ; '.'
000000000000bb92         db  0x18 ; '.'
000000000000bb93         db  0x42 ; 'B'
000000000000bb94         db  0x0e ; '.'
000000000000bb95         db  0x10 ; '.'
000000000000bb96         db  0x42 ; 'B'
000000000000bb97         db  0x0e ; '.'
000000000000bb98         db  0x08 ; '.'
000000000000bb99         db  0x47 ; 'G'
000000000000bb9a         db  0x0b ; '.'
000000000000bb9b         db  0x00 ; '.'
000000000000bb9c         db  0x00 ; '.'
000000000000bb9d         db  0x00 ; '.'
000000000000bb9e         db  0x00 ; '.'
000000000000bb9f         db  0x00 ; '.'
000000000000bba0         dd         0x00000034                                  ; Length of the record
000000000000bba4         dd         0x00000e6c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000bba8         db         0x48, 0xd0, 2 dup (0xff)                    ; begin 0x8bf0
000000000000bbac         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0x8c6b)
000000000000bbb0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bbb1         db  0x42 ; 'B'
000000000000bbb2         db  0x0e ; '.'
000000000000bbb3         db  0x10 ; '.'
000000000000bbb4         db  0x8c ; '.'
000000000000bbb5         db  0x02 ; '.'
000000000000bbb6         db  0x41 ; 'A'
000000000000bbb7         db  0x0e ; '.'
000000000000bbb8         db  0x18 ; '.'
000000000000bbb9         db  0x86 ; '.'
000000000000bbba         db  0x03 ; '.'
000000000000bbbb         db  0x41 ; 'A'
000000000000bbbc         db  0x0e ; '.'
000000000000bbbd         db  0x20 ; ' '
000000000000bbbe         db  0x83 ; '.'
000000000000bbbf         db  0x04 ; '.'
000000000000bbc0         db  0x7d ; '}'
000000000000bbc1         db  0x0a ; '.'
000000000000bbc2         db  0x0e ; '.'
000000000000bbc3         db  0x18 ; '.'
000000000000bbc4         db  0x41 ; 'A'
000000000000bbc5         db  0x0e ; '.'
000000000000bbc6         db  0x10 ; '.'
000000000000bbc7         db  0x42 ; 'B'
000000000000bbc8         db  0x0e ; '.'
000000000000bbc9         db  0x08 ; '.'
000000000000bbca         db  0x44 ; 'D'
000000000000bbcb         db  0x0b ; '.'
000000000000bbcc         db  0x60 ; '`'
000000000000bbcd         db  0x0a ; '.'
000000000000bbce         db  0x0e ; '.'
000000000000bbcf         db  0x18 ; '.'
000000000000bbd0         db  0x41 ; 'A'
000000000000bbd1         db  0x0e ; '.'
000000000000bbd2         db  0x10 ; '.'
000000000000bbd3         db  0x42 ; 'B'
000000000000bbd4         db  0x0e ; '.'
000000000000bbd5         db  0x08 ; '.'
000000000000bbd6         db  0x45 ; 'E'
000000000000bbd7         db  0x0b ; '.'
000000000000bbd8         dd         0x00000034                                  ; Length of the record
000000000000bbdc         dd         0x00000ea4                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000bbe0         db         0x90, 0xd0, 2 dup (0xff)                    ; begin 0x8c70
000000000000bbe4         db         0x7e, 0x02, 2 dup (0x00)                    ; length 0x27e (end at 0x8eee)
000000000000bbe8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bbe9         db  0x42 ; 'B'
000000000000bbea         db  0x0e ; '.'
000000000000bbeb         db  0x10 ; '.'
000000000000bbec         db  0x8c ; '.'
000000000000bbed         db  0x02 ; '.'
000000000000bbee         db  0x41 ; 'A'
000000000000bbef         db  0x0e ; '.'
000000000000bbf0         db  0x18 ; '.'
000000000000bbf1         db  0x86 ; '.'
000000000000bbf2         db  0x03 ; '.'
000000000000bbf3         db  0x43 ; 'C'
000000000000bbf4         db  0x0e ; '.'
000000000000bbf5         db  0x20 ; ' '
000000000000bbf6         db  0x83 ; '.'
000000000000bbf7         db  0x04 ; '.'
000000000000bbf8         db  0x44 ; 'D'
000000000000bbf9         db  0x0e ; '.'
000000000000bbfa         db  0x70 ; 'p'
000000000000bbfb         db  0x02 ; '.'
000000000000bbfc         db  0xf0 ; '.'
000000000000bbfd         db  0x0a ; '.'
000000000000bbfe         db  0x0e ; '.'
000000000000bbff         db  0x20 ; ' '
000000000000bc00         db  0x41 ; 'A'
000000000000bc01         db  0x0e ; '.'
000000000000bc02         db  0x18 ; '.'
000000000000bc03         db  0x41 ; 'A'
000000000000bc04         db  0x0e ; '.'
000000000000bc05         db  0x10 ; '.'
000000000000bc06         db  0x42 ; 'B'
000000000000bc07         db  0x0e ; '.'
000000000000bc08         db  0x08 ; '.'
000000000000bc09         db  0x42 ; 'B'
000000000000bc0a         db  0x0b ; '.'
000000000000bc0b         db  0x00 ; '.'
000000000000bc0c         db  0x00 ; '.'
000000000000bc0d         db  0x00 ; '.'
000000000000bc0e         db  0x00 ; '.'
000000000000bc0f         db  0x00 ; '.'
000000000000bc10         dd         0x0000001c                                  ; Length of the record
000000000000bc14         dd         0x00000edc                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000bc18         db         0xd8, 0xd2, 2 dup (0xff)                    ; begin 0x8ef0
000000000000bc1c         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0x8f30)
000000000000bc20         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bc21         db  0x44 ; 'D'
000000000000bc22         db  0x0e ; '.'
000000000000bc23         db  0x10 ; '.'
000000000000bc24         db  0x83 ; '.'
000000000000bc25         db  0x02 ; '.'
000000000000bc26         db  0x5a ; 'Z'
000000000000bc27         db  0x0a ; '.'
000000000000bc28         db  0x0e ; '.'
000000000000bc29         db  0x08 ; '.'
000000000000bc2a         db  0x4a ; 'J'
000000000000bc2b         db  0x0b ; '.'
000000000000bc2c         db  0x53 ; 'S'
000000000000bc2d         db  0x0e ; '.'
000000000000bc2e         db  0x08 ; '.'
000000000000bc2f         db  0x00 ; '.'
000000000000bc30         dd         0x0000002c                                  ; Length of the record
000000000000bc34         dd         0x00000efc                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000bc38         db         0xf8, 0xd2, 2 dup (0xff)                    ; begin 0x8f30
000000000000bc3c         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x8f87)
000000000000bc40         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bc41         db  0x63 ; 'c'
000000000000bc42         db  0x0e ; '.'
000000000000bc43         db  0x10 ; '.'
000000000000bc44         db  0x8c ; '.'
000000000000bc45         db  0x02 ; '.'
000000000000bc46         db  0x41 ; 'A'
000000000000bc47         db  0x0e ; '.'
000000000000bc48         db  0x18 ; '.'
000000000000bc49         db  0x86 ; '.'
000000000000bc4a         db  0x03 ; '.'
000000000000bc4b         db  0x44 ; 'D'
000000000000bc4c         db  0x0e ; '.'
000000000000bc4d         db  0x20 ; ' '
000000000000bc4e         db  0x83 ; '.'
000000000000bc4f         db  0x04 ; '.'
000000000000bc50         db  0x6b ; 'k'
000000000000bc51         db  0x0e ; '.'
000000000000bc52         db  0x18 ; '.'
000000000000bc53         db  0x41 ; 'A'
000000000000bc54         db  0x0e ; '.'
000000000000bc55         db  0x10 ; '.'
000000000000bc56         db  0x42 ; 'B'
000000000000bc57         db  0x0e ; '.'
000000000000bc58         db  0x08 ; '.'
000000000000bc59         db  0x00 ; '.'
000000000000bc5a         db  0x00 ; '.'
000000000000bc5b         db  0x00 ; '.'
000000000000bc5c         db  0x00 ; '.'
000000000000bc5d         db  0x00 ; '.'
000000000000bc5e         db  0x00 ; '.'
000000000000bc5f         db  0x00 ; '.'
000000000000bc60         dd         0x0000003c                                  ; Length of the record
000000000000bc64         dd         0x00000f2c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000bc68         db         0x28, 0xd3, 2 dup (0xff)                    ; begin 0x8f90
000000000000bc6c         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0x9013)
000000000000bc70         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bc71         db  0x42 ; 'B'
000000000000bc72         db  0x0e ; '.'
000000000000bc73         db  0x10 ; '.'
000000000000bc74         db  0x8d ; '.'
000000000000bc75         db  0x02 ; '.'
000000000000bc76         db  0x42 ; 'B'
000000000000bc77         db  0x0e ; '.'
000000000000bc78         db  0x18 ; '.'
000000000000bc79         db  0x8c ; '.'
000000000000bc7a         db  0x03 ; '.'
000000000000bc7b         db  0x44 ; 'D'
000000000000bc7c         db  0x0e ; '.'
000000000000bc7d         db  0x20 ; ' '
000000000000bc7e         db  0x86 ; '.'
000000000000bc7f         db  0x04 ; '.'
000000000000bc80         db  0x41 ; 'A'
000000000000bc81         db  0x0e ; '.'
000000000000bc82         db  0x28 ; '('
000000000000bc83         db  0x83 ; '.'
000000000000bc84         db  0x05 ; '.'
000000000000bc85         db  0x4a ; 'J'
000000000000bc86         db  0x0e ; '.'
000000000000bc87         db  0x40 ; '@'
000000000000bc88         db  0x02 ; '.'
000000000000bc89         db  0x64 ; 'd'
000000000000bc8a         db  0x0a ; '.'
000000000000bc8b         db  0x0e ; '.'
000000000000bc8c         db  0x28 ; '('
000000000000bc8d         db  0x41 ; 'A'
000000000000bc8e         db  0x0e ; '.'
000000000000bc8f         db  0x20 ; ' '
000000000000bc90         db  0x41 ; 'A'
000000000000bc91         db  0x0e ; '.'
000000000000bc92         db  0x18 ; '.'
000000000000bc93         db  0x42 ; 'B'
000000000000bc94         db  0x0e ; '.'
000000000000bc95         db  0x10 ; '.'
000000000000bc96         db  0x42 ; 'B'
000000000000bc97         db  0x0e ; '.'
000000000000bc98         db  0x08 ; '.'
000000000000bc99         db  0x41 ; 'A'
000000000000bc9a         db  0x0b ; '.'
000000000000bc9b         db  0x00 ; '.'
000000000000bc9c         db  0x00 ; '.'
000000000000bc9d         db  0x00 ; '.'
000000000000bc9e         db  0x00 ; '.'
000000000000bc9f         db  0x00 ; '.'
000000000000bca0         dd         0x0000004c                                  ; Length of the record
000000000000bca4         dd         0x00000f6c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000bca8         db         0x78, 0xd3, 2 dup (0xff)                    ; begin 0x9020
000000000000bcac         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x909d)
000000000000bcb0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bcb1         db  0x42 ; 'B'
000000000000bcb2         db  0x0e ; '.'
000000000000bcb3         db  0x10 ; '.'
000000000000bcb4         db  0x8c ; '.'
000000000000bcb5         db  0x02 ; '.'
000000000000bcb6         db  0x41 ; 'A'
000000000000bcb7         db  0x0e ; '.'
000000000000bcb8         db  0x18 ; '.'
000000000000bcb9         db  0x86 ; '.'
000000000000bcba         db  0x03 ; '.'
000000000000bcbb         db  0x44 ; 'D'
000000000000bcbc         db  0x0e ; '.'
000000000000bcbd         db  0x20 ; ' '
000000000000bcbe         db  0x83 ; '.'
000000000000bcbf         db  0x04 ; '.'
000000000000bcc0         db  0x69 ; 'i'
000000000000bcc1         db  0x0a ; '.'
000000000000bcc2         db  0x0e ; '.'
000000000000bcc3         db  0x18 ; '.'
000000000000bcc4         db  0x41 ; 'A'
000000000000bcc5         db  0x0e ; '.'
000000000000bcc6         db  0x10 ; '.'
000000000000bcc7         db  0x42 ; 'B'
000000000000bcc8         db  0x0e ; '.'
000000000000bcc9         db  0x08 ; '.'
000000000000bcca         db  0x45 ; 'E'
000000000000bccb         db  0x0b ; '.'
000000000000bccc         db  0x55 ; 'U'
000000000000bccd         db  0x0a ; '.'
000000000000bcce         db  0x0e ; '.'
000000000000bccf         db  0x18 ; '.'
000000000000bcd0         db  0x41 ; 'A'
000000000000bcd1         db  0x0e ; '.'
000000000000bcd2         db  0x10 ; '.'
000000000000bcd3         db  0x42 ; 'B'
000000000000bcd4         db  0x0e ; '.'
000000000000bcd5         db  0x08 ; '.'
000000000000bcd6         db  0x48 ; 'H'
000000000000bcd7         db  0x0b ; '.'
000000000000bcd8         db  0x41 ; 'A'
000000000000bcd9         db  0x0a ; '.'
000000000000bcda         db  0x0e ; '.'
000000000000bcdb         db  0x18 ; '.'
000000000000bcdc         db  0x46 ; 'F'
000000000000bcdd         db  0x0e ; '.'
000000000000bcde         db  0x10 ; '.'
000000000000bcdf         db  0x42 ; 'B'
000000000000bce0         db  0x0e ; '.'
000000000000bce1         db  0x08 ; '.'
000000000000bce2         db  0x47 ; 'G'
000000000000bce3         db  0x0b ; '.'
000000000000bce4         db  0x49 ; 'I'
000000000000bce5         db  0x0e ; '.'
000000000000bce6         db  0x18 ; '.'
000000000000bce7         db  0x41 ; 'A'
000000000000bce8         db  0x0e ; '.'
000000000000bce9         db  0x10 ; '.'
000000000000bcea         db  0x42 ; 'B'
000000000000bceb         db  0x0e ; '.'
000000000000bcec         db  0x08 ; '.'
000000000000bced         db  0x00 ; '.'
000000000000bcee         db  0x00 ; '.'
000000000000bcef         db  0x00 ; '.'
000000000000bcf0         dd         0x0000001c                                  ; Length of the record
000000000000bcf4         dd         0x00000fbc                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000bcf8         db         0xa8, 0xd3, 2 dup (0xff)                    ; begin 0x90a0
000000000000bcfc         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x9100)
000000000000bd00         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bd01         db  0x44 ; 'D'
000000000000bd02         db  0x0e ; '.'
000000000000bd03         db  0x10 ; '.'
000000000000bd04         db  0x75 ; 'u'
000000000000bd05         db  0x0a ; '.'
000000000000bd06         db  0x0e ; '.'
000000000000bd07         db  0x08 ; '.'
000000000000bd08         db  0x47 ; 'G'
000000000000bd09         db  0x0b ; '.'
000000000000bd0a         db  0x5f ; '_'
000000000000bd0b         db  0x0e ; '.'
000000000000bd0c         db  0x08 ; '.'
000000000000bd0d         db  0x00 ; '.'
000000000000bd0e         db  0x00 ; '.'
000000000000bd0f         db  0x00 ; '.'
000000000000bd10         dd         0x0000001c                                  ; Length of the record
000000000000bd14         dd         0x00000fdc                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000bd18         db         0xe8, 0xd3, 2 dup (0xff)                    ; begin 0x9100
000000000000bd1c         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x913c)
000000000000bd20         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bd21         db  0x44 ; 'D'
000000000000bd22         db  0x0e ; '.'
000000000000bd23         db  0x10 ; '.'
000000000000bd24         db  0x61 ; 'a'
000000000000bd25         db  0x0a ; '.'
000000000000bd26         db  0x0e ; '.'
000000000000bd27         db  0x08 ; '.'
000000000000bd28         db  0x4b ; 'K'
000000000000bd29         db  0x0b ; '.'
000000000000bd2a         db  0x4b ; 'K'
000000000000bd2b         db  0x0e ; '.'
000000000000bd2c         db  0x08 ; '.'
000000000000bd2d         db  0x00 ; '.'
000000000000bd2e         db  0x00 ; '.'
000000000000bd2f         db  0x00 ; '.'
000000000000bd30         dd         0x00000044                                  ; Length of the record
000000000000bd34         dd         0x00000ffc                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000bd38         db         0x08, 0xd4, 2 dup (0xff)                    ; begin 0x9140
000000000000bd3c         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x91a5)
000000000000bd40         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bd41         db  0x42 ; 'B'
000000000000bd42         db  0x0e ; '.'
000000000000bd43         db  0x10 ; '.'
000000000000bd44         db  0x8f ; '.'
000000000000bd45         db  0x02 ; '.'
000000000000bd46         db  0x42 ; 'B'
000000000000bd47         db  0x0e ; '.'
000000000000bd48         db  0x18 ; '.'
000000000000bd49         db  0x8e ; '.'
000000000000bd4a         db  0x03 ; '.'
000000000000bd4b         db  0x45 ; 'E'
000000000000bd4c         db  0x0e ; '.'
000000000000bd4d         db  0x20 ; ' '
000000000000bd4e         db  0x8d ; '.'
000000000000bd4f         db  0x04 ; '.'
000000000000bd50         db  0x42 ; 'B'
000000000000bd51         db  0x0e ; '.'
000000000000bd52         db  0x28 ; '('
000000000000bd53         db  0x8c ; '.'
000000000000bd54         db  0x05 ; '.'
000000000000bd55         db  0x48 ; 'H'
000000000000bd56         db  0x0e ; '.'
000000000000bd57         db  0x30 ; '0'
000000000000bd58         db  0x86 ; '.'
000000000000bd59         db  0x06 ; '.'
000000000000bd5a         db  0x48 ; 'H'
000000000000bd5b         db  0x0e ; '.'
000000000000bd5c         db  0x38 ; '8'
000000000000bd5d         db  0x83 ; '.'
000000000000bd5e         db  0x07 ; '.'
000000000000bd5f         db  0x4d ; 'M'
000000000000bd60         db  0x0e ; '.'
000000000000bd61         db  0x40 ; '@'
000000000000bd62         db  0x72 ; 'r'
000000000000bd63         db  0x0e ; '.'
000000000000bd64         db  0x38 ; '8'
000000000000bd65         db  0x41 ; 'A'
000000000000bd66         db  0x0e ; '.'
000000000000bd67         db  0x30 ; '0'
000000000000bd68         db  0x41 ; 'A'
000000000000bd69         db  0x0e ; '.'
000000000000bd6a         db  0x28 ; '('
000000000000bd6b         db  0x42 ; 'B'
000000000000bd6c         db  0x0e ; '.'
000000000000bd6d         db  0x20 ; ' '
000000000000bd6e         db  0x42 ; 'B'
000000000000bd6f         db  0x0e ; '.'
000000000000bd70         db  0x18 ; '.'
000000000000bd71         db  0x42 ; 'B'
000000000000bd72         db  0x0e ; '.'
000000000000bd73         db  0x10 ; '.'
000000000000bd74         db  0x42 ; 'B'
000000000000bd75         db  0x0e ; '.'
000000000000bd76         db  0x08 ; '.'
000000000000bd77         db  0x00 ; '.'
000000000000bd78         dd         0x00000014                                  ; Length of the record
000000000000bd7c         dd         0x00001044                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000bd80         db         0x30, 0xd4, 2 dup (0xff)                    ; begin 0x91b0
000000000000bd84         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x91b2)
000000000000bd88         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bd89         align      16
000000000000bd90         dd         0x00000010                                  ; Length of the record
000000000000bd94         dd         0x0000105c                                  ; FDE: parent CIE at 0xad38 (FDE encoding = 0x1B)
000000000000bd98         db         0x28, 0xd4, 2 dup (0xff)                    ; begin 0x91c0
000000000000bd9c         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x91ce)
000000000000bda0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bda1         align      8


        ; Segment Segment 3
        ; Range: [0x20c9b0; 0x20d280[ (2256 bytes)
        ; File offset : [51632; 53408[ (1776 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x20c9b0; 0x20c9b8[ (8 bytes)
        ; File offset : [51632; 51640[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
000000000020c9b0         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x20c9b8; 0x20c9c0[ (8 bytes)
        ; File offset : [51640; 51648[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
000000000020c9b8         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x20c9c0; 0x20cbf8[ (568 bytes)
        ; File offset : [51648; 52216[ (568 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     long_options:
000000000020c9c0         db  0xc3 ; '.'                                         ; DATA XREF=main+160
000000000020c9c1         db  0x92 ; '.'
000000000020c9c2         db  0x00 ; '.'
000000000020c9c3         db  0x00 ; '.'
000000000020c9c4         db  0x00 ; '.'
000000000020c9c5         db  0x00 ; '.'
000000000020c9c6         db  0x00 ; '.'
000000000020c9c7         db  0x00 ; '.'
000000000020c9c8         db  0x01 ; '.'
000000000020c9c9         db  0x00 ; '.'
000000000020c9ca         db  0x00 ; '.'
000000000020c9cb         db  0x00 ; '.'
000000000020c9cc         db  0x00 ; '.'
000000000020c9cd         db  0x00 ; '.'
000000000020c9ce         db  0x00 ; '.'
000000000020c9cf         db  0x00 ; '.'
000000000020c9d0         db  0x00 ; '.'
000000000020c9d1         db  0x00 ; '.'
000000000020c9d2         db  0x00 ; '.'
000000000020c9d3         db  0x00 ; '.'
000000000020c9d4         db  0x00 ; '.'
000000000020c9d5         db  0x00 ; '.'
000000000020c9d6         db  0x00 ; '.'
000000000020c9d7         db  0x00 ; '.'
000000000020c9d8         db  0x6c ; 'l'
000000000020c9d9         db  0x00 ; '.'
000000000020c9da         db  0x00 ; '.'
000000000020c9db         db  0x00 ; '.'
000000000020c9dc         db  0x00 ; '.'
000000000020c9dd         db  0x00 ; '.'
000000000020c9de         db  0x00 ; '.'
000000000020c9df         db  0x00 ; '.'
000000000020c9e0         db  0xa1 ; '.'
000000000020c9e1         db  0x93 ; '.'
000000000020c9e2         db  0x00 ; '.'
000000000020c9e3         db  0x00 ; '.'
000000000020c9e4         db  0x00 ; '.'
000000000020c9e5         db  0x00 ; '.'
000000000020c9e6         db  0x00 ; '.'
000000000020c9e7         db  0x00 ; '.'
000000000020c9e8         db  0x00 ; '.'
000000000020c9e9         db  0x00 ; '.'
000000000020c9ea         db  0x00 ; '.'
000000000020c9eb         db  0x00 ; '.'
000000000020c9ec         db  0x00 ; '.'
000000000020c9ed         db  0x00 ; '.'
000000000020c9ee         db  0x00 ; '.'
000000000020c9ef         db  0x00 ; '.'
000000000020c9f0         db  0x00 ; '.'
000000000020c9f1         db  0x00 ; '.'
000000000020c9f2         db  0x00 ; '.'
000000000020c9f3         db  0x00 ; '.'
000000000020c9f4         db  0x00 ; '.'
000000000020c9f5         db  0x00 ; '.'
000000000020c9f6         db  0x00 ; '.'
000000000020c9f7         db  0x00 ; '.'
000000000020c9f8         db  0x62 ; 'b'
000000000020c9f9         db  0x00 ; '.'
000000000020c9fa         db  0x00 ; '.'
000000000020c9fb         db  0x00 ; '.'
000000000020c9fc         db  0x00 ; '.'
000000000020c9fd         db  0x00 ; '.'
000000000020c9fe         db  0x00 ; '.'
000000000020c9ff         db  0x00 ; '.'
000000000020ca00         db  0xa8 ; '.'
000000000020ca01         db  0x93 ; '.'
000000000020ca02         db  0x00 ; '.'
000000000020ca03         db  0x00 ; '.'
000000000020ca04         db  0x00 ; '.'
000000000020ca05         db  0x00 ; '.'
000000000020ca06         db  0x00 ; '.'
000000000020ca07         db  0x00 ; '.'
000000000020ca08         db  0x00 ; '.'
000000000020ca09         db  0x00 ; '.'
000000000020ca0a         db  0x00 ; '.'
000000000020ca0b         db  0x00 ; '.'
000000000020ca0c         db  0x00 ; '.'
000000000020ca0d         db  0x00 ; '.'
000000000020ca0e         db  0x00 ; '.'
000000000020ca0f         db  0x00 ; '.'
000000000020ca10         db  0x00 ; '.'
000000000020ca11         db  0x00 ; '.'
000000000020ca12         db  0x00 ; '.'
000000000020ca13         db  0x00 ; '.'
000000000020ca14         db  0x00 ; '.'
000000000020ca15         db  0x00 ; '.'
000000000020ca16         db  0x00 ; '.'
000000000020ca17         db  0x00 ; '.'
000000000020ca18         db  0x63 ; 'c'
000000000020ca19         db  0x00 ; '.'
000000000020ca1a         db  0x00 ; '.'
000000000020ca1b         db  0x00 ; '.'
000000000020ca1c         db  0x00 ; '.'
000000000020ca1d         db  0x00 ; '.'
000000000020ca1e         db  0x00 ; '.'
000000000020ca1f         db  0x00 ; '.'
000000000020ca20         db  0xae ; '.'
000000000020ca21         db  0x93 ; '.'
000000000020ca22         db  0x00 ; '.'
000000000020ca23         db  0x00 ; '.'
000000000020ca24         db  0x00 ; '.'
000000000020ca25         db  0x00 ; '.'
000000000020ca26         db  0x00 ; '.'
000000000020ca27         db  0x00 ; '.'
000000000020ca28         db  0x00 ; '.'
000000000020ca29         db  0x00 ; '.'
000000000020ca2a         db  0x00 ; '.'
000000000020ca2b         db  0x00 ; '.'
000000000020ca2c         db  0x00 ; '.'
000000000020ca2d         db  0x00 ; '.'
000000000020ca2e         db  0x00 ; '.'
000000000020ca2f         db  0x00 ; '.'
000000000020ca30         db  0x00 ; '.'
000000000020ca31         db  0x00 ; '.'
000000000020ca32         db  0x00 ; '.'
000000000020ca33         db  0x00 ; '.'
000000000020ca34         db  0x00 ; '.'
000000000020ca35         db  0x00 ; '.'
000000000020ca36         db  0x00 ; '.'
000000000020ca37         db  0x00 ; '.'
000000000020ca38         db  0x80 ; '.'
000000000020ca39         db  0x00 ; '.'
000000000020ca3a         db  0x00 ; '.'
000000000020ca3b         db  0x00 ; '.'
000000000020ca3c         db  0x00 ; '.'
000000000020ca3d         db  0x00 ; '.'
000000000020ca3e         db  0x00 ; '.'
000000000020ca3f         db  0x00 ; '.'
000000000020ca40         db  0xbd ; '.'
000000000020ca41         db  0x93 ; '.'
000000000020ca42         db  0x00 ; '.'
000000000020ca43         db  0x00 ; '.'
000000000020ca44         db  0x00 ; '.'
000000000020ca45         db  0x00 ; '.'
000000000020ca46         db  0x00 ; '.'
000000000020ca47         db  0x00 ; '.'
000000000020ca48         db  0x00 ; '.'
000000000020ca49         db  0x00 ; '.'
000000000020ca4a         db  0x00 ; '.'
000000000020ca4b         db  0x00 ; '.'
000000000020ca4c         db  0x00 ; '.'
000000000020ca4d         db  0x00 ; '.'
000000000020ca4e         db  0x00 ; '.'
000000000020ca4f         db  0x00 ; '.'
000000000020ca50         db  0x00 ; '.'
000000000020ca51         db  0x00 ; '.'
000000000020ca52         db  0x00 ; '.'
000000000020ca53         db  0x00 ; '.'
000000000020ca54         db  0x00 ; '.'
000000000020ca55         db  0x00 ; '.'
000000000020ca56         db  0x00 ; '.'
000000000020ca57         db  0x00 ; '.'
000000000020ca58         db  0x82 ; '.'
000000000020ca59         db  0x00 ; '.'
000000000020ca5a         db  0x00 ; '.'
000000000020ca5b         db  0x00 ; '.'
000000000020ca5c         db  0x00 ; '.'
000000000020ca5d         db  0x00 ; '.'
000000000020ca5e         db  0x00 ; '.'
000000000020ca5f         db  0x00 ; '.'
000000000020ca60         db  0xc3 ; '.'
000000000020ca61         db  0x93 ; '.'
000000000020ca62         db  0x00 ; '.'
000000000020ca63         db  0x00 ; '.'
000000000020ca64         db  0x00 ; '.'
000000000020ca65         db  0x00 ; '.'
000000000020ca66         db  0x00 ; '.'
000000000020ca67         db  0x00 ; '.'
000000000020ca68         db  0x00 ; '.'
000000000020ca69         db  0x00 ; '.'
000000000020ca6a         db  0x00 ; '.'
000000000020ca6b         db  0x00 ; '.'
000000000020ca6c         db  0x00 ; '.'
000000000020ca6d         db  0x00 ; '.'
000000000020ca6e         db  0x00 ; '.'
000000000020ca6f         db  0x00 ; '.'
000000000020ca70         db  0x00 ; '.'
000000000020ca71         db  0x00 ; '.'
000000000020ca72         db  0x00 ; '.'
000000000020ca73         db  0x00 ; '.'
000000000020ca74         db  0x00 ; '.'
000000000020ca75         db  0x00 ; '.'
000000000020ca76         db  0x00 ; '.'
000000000020ca77         db  0x00 ; '.'
000000000020ca78         db  0x81 ; '.'
000000000020ca79         db  0x00 ; '.'
000000000020ca7a         db  0x00 ; '.'
000000000020ca7b         db  0x00 ; '.'
000000000020ca7c         db  0x00 ; '.'
000000000020ca7d         db  0x00 ; '.'
000000000020ca7e         db  0x00 ; '.'
000000000020ca7f         db  0x00 ; '.'
000000000020ca80         db  0xca ; '.'
000000000020ca81         db  0x93 ; '.'
000000000020ca82         db  0x00 ; '.'
000000000020ca83         db  0x00 ; '.'
000000000020ca84         db  0x00 ; '.'
000000000020ca85         db  0x00 ; '.'
000000000020ca86         db  0x00 ; '.'
000000000020ca87         db  0x00 ; '.'
000000000020ca88         db  0x00 ; '.'
000000000020ca89         db  0x00 ; '.'
000000000020ca8a         db  0x00 ; '.'
000000000020ca8b         db  0x00 ; '.'
000000000020ca8c         db  0x00 ; '.'
000000000020ca8d         db  0x00 ; '.'
000000000020ca8e         db  0x00 ; '.'
000000000020ca8f         db  0x00 ; '.'
000000000020ca90         db  0x00 ; '.'
000000000020ca91         db  0x00 ; '.'
000000000020ca92         db  0x00 ; '.'
000000000020ca93         db  0x00 ; '.'
000000000020ca94         db  0x00 ; '.'
000000000020ca95         db  0x00 ; '.'
000000000020ca96         db  0x00 ; '.'
000000000020ca97         db  0x00 ; '.'
000000000020ca98         db  0x74 ; 't'
000000000020ca99         db  0x00 ; '.'
000000000020ca9a         db  0x00 ; '.'
000000000020ca9b         db  0x00 ; '.'
000000000020ca9c         db  0x00 ; '.'
000000000020ca9d         db  0x00 ; '.'
000000000020ca9e         db  0x00 ; '.'
000000000020ca9f         db  0x00 ; '.'
000000000020caa0         db  0xcf ; '.'
000000000020caa1         db  0x93 ; '.'
000000000020caa2         db  0x00 ; '.'
000000000020caa3         db  0x00 ; '.'
000000000020caa4         db  0x00 ; '.'
000000000020caa5         db  0x00 ; '.'
000000000020caa6         db  0x00 ; '.'
000000000020caa7         db  0x00 ; '.'
000000000020caa8         db  0x00 ; '.'
000000000020caa9         db  0x00 ; '.'
000000000020caaa         db  0x00 ; '.'
000000000020caab         db  0x00 ; '.'
000000000020caac         db  0x00 ; '.'
000000000020caad         db  0x00 ; '.'
000000000020caae         db  0x00 ; '.'
000000000020caaf         db  0x00 ; '.'
000000000020cab0         db  0x00 ; '.'
000000000020cab1         db  0x00 ; '.'
000000000020cab2         db  0x00 ; '.'
000000000020cab3         db  0x00 ; '.'
000000000020cab4         db  0x00 ; '.'
000000000020cab5         db  0x00 ; '.'
000000000020cab6         db  0x00 ; '.'
000000000020cab7         db  0x00 ; '.'
000000000020cab8         db  0x77 ; 'w'
000000000020cab9         db  0x00 ; '.'
000000000020caba         db  0x00 ; '.'
000000000020cabb         db  0x00 ; '.'
000000000020cabc         db  0x00 ; '.'
000000000020cabd         db  0x00 ; '.'
000000000020cabe         db  0x00 ; '.'
000000000020cabf         db  0x00 ; '.'
000000000020cac0         db  0xd4 ; '.'
000000000020cac1         db  0x93 ; '.'
000000000020cac2         db  0x00 ; '.'
000000000020cac3         db  0x00 ; '.'
000000000020cac4         db  0x00 ; '.'
000000000020cac5         db  0x00 ; '.'
000000000020cac6         db  0x00 ; '.'
000000000020cac7         db  0x00 ; '.'
000000000020cac8         db  0x00 ; '.'
000000000020cac9         db  0x00 ; '.'
000000000020caca         db  0x00 ; '.'
000000000020cacb         db  0x00 ; '.'
000000000020cacc         db  0x00 ; '.'
000000000020cacd         db  0x00 ; '.'
000000000020cace         db  0x00 ; '.'
000000000020cacf         db  0x00 ; '.'
000000000020cad0         db  0x00 ; '.'
000000000020cad1         db  0x00 ; '.'
000000000020cad2         db  0x00 ; '.'
000000000020cad3         db  0x00 ; '.'
000000000020cad4         db  0x00 ; '.'
000000000020cad5         db  0x00 ; '.'
000000000020cad6         db  0x00 ; '.'
000000000020cad7         db  0x00 ; '.'
000000000020cad8         db  0x83 ; '.'
000000000020cad9         db  0x00 ; '.'
000000000020cada         db  0x00 ; '.'
000000000020cadb         db  0x00 ; '.'
000000000020cadc         db  0x00 ; '.'
000000000020cadd         db  0x00 ; '.'
000000000020cade         db  0x00 ; '.'
000000000020cadf         db  0x00 ; '.'
000000000020cae0         db  0xdb ; '.'
000000000020cae1         db  0x93 ; '.'
000000000020cae2         db  0x00 ; '.'
000000000020cae3         db  0x00 ; '.'
000000000020cae4         db  0x00 ; '.'
000000000020cae5         db  0x00 ; '.'
000000000020cae6         db  0x00 ; '.'
000000000020cae7         db  0x00 ; '.'
000000000020cae8         db  0x00 ; '.'
000000000020cae9         db  0x00 ; '.'
000000000020caea         db  0x00 ; '.'
000000000020caeb         db  0x00 ; '.'
000000000020caec         db  0x00 ; '.'
000000000020caed         db  0x00 ; '.'
000000000020caee         db  0x00 ; '.'
000000000020caef         db  0x00 ; '.'
000000000020caf0         db  0x00 ; '.'
000000000020caf1         db  0x00 ; '.'
000000000020caf2         db  0x00 ; '.'
000000000020caf3         db  0x00 ; '.'
000000000020caf4         db  0x00 ; '.'
000000000020caf5         db  0x00 ; '.'
000000000020caf6         db  0x00 ; '.'
000000000020caf7         db  0x00 ; '.'
000000000020caf8         db  0x84 ; '.'
000000000020caf9         db  0x00 ; '.'
000000000020cafa         db  0x00 ; '.'
000000000020cafb         db  0x00 ; '.'
000000000020cafc         db  0x00 ; '.'
000000000020cafd         db  0x00 ; '.'
000000000020cafe         db  0x00 ; '.'
000000000020caff         db  0x00 ; '.'
000000000020cb00         db  0xdf ; '.'
000000000020cb01         db  0x93 ; '.'
000000000020cb02         db  0x00 ; '.'
000000000020cb03         db  0x00 ; '.'
000000000020cb04         db  0x00 ; '.'
000000000020cb05         db  0x00 ; '.'
000000000020cb06         db  0x00 ; '.'
000000000020cb07         db  0x00 ; '.'
000000000020cb08         db  0x00 ; '.'
000000000020cb09         db  0x00 ; '.'
000000000020cb0a         db  0x00 ; '.'
000000000020cb0b         db  0x00 ; '.'
000000000020cb0c         db  0x00 ; '.'
000000000020cb0d         db  0x00 ; '.'
000000000020cb0e         db  0x00 ; '.'
000000000020cb0f         db  0x00 ; '.'
000000000020cb10         db  0x00 ; '.'
000000000020cb11         db  0x00 ; '.'
000000000020cb12         db  0x00 ; '.'
000000000020cb13         db  0x00 ; '.'
000000000020cb14         db  0x00 ; '.'
000000000020cb15         db  0x00 ; '.'
000000000020cb16         db  0x00 ; '.'
000000000020cb17         db  0x00 ; '.'
000000000020cb18         db  0x7a ; 'z'
000000000020cb19         db  0x00 ; '.'
000000000020cb1a         db  0x00 ; '.'
000000000020cb1b         db  0x00 ; '.'
000000000020cb1c         db  0x00 ; '.'
000000000020cb1d         db  0x00 ; '.'
000000000020cb1e         db  0x00 ; '.'
000000000020cb1f         db  0x00 ; '.'
000000000020cb20         db  0xe4 ; '.'
000000000020cb21         db  0x93 ; '.'
000000000020cb22         db  0x00 ; '.'
000000000020cb23         db  0x00 ; '.'
000000000020cb24         db  0x00 ; '.'
000000000020cb25         db  0x00 ; '.'
000000000020cb26         db  0x00 ; '.'
000000000020cb27         db  0x00 ; '.'
000000000020cb28         db  0x00 ; '.'
000000000020cb29         db  0x00 ; '.'
000000000020cb2a         db  0x00 ; '.'
000000000020cb2b         db  0x00 ; '.'
000000000020cb2c         db  0x00 ; '.'
000000000020cb2d         db  0x00 ; '.'
000000000020cb2e         db  0x00 ; '.'
000000000020cb2f         db  0x00 ; '.'
000000000020cb30         db  0x00 ; '.'
000000000020cb31         db  0x00 ; '.'
000000000020cb32         db  0x00 ; '.'
000000000020cb33         db  0x00 ; '.'
000000000020cb34         db  0x00 ; '.'
000000000020cb35         db  0x00 ; '.'
000000000020cb36         db  0x00 ; '.'
000000000020cb37         db  0x00 ; '.'
000000000020cb38         db  0x7e ; '~'
000000000020cb39         db  0xff ; '.'
000000000020cb3a         db  0xff ; '.'
000000000020cb3b         db  0xff ; '.'
000000000020cb3c         db  0x00 ; '.'
000000000020cb3d         db  0x00 ; '.'
000000000020cb3e         db  0x00 ; '.'
000000000020cb3f         db  0x00 ; '.'
000000000020cb40         db  0xe9 ; '.'
000000000020cb41         db  0x93 ; '.'
000000000020cb42         db  0x00 ; '.'
000000000020cb43         db  0x00 ; '.'
000000000020cb44         db  0x00 ; '.'
000000000020cb45         db  0x00 ; '.'
000000000020cb46         db  0x00 ; '.'
000000000020cb47         db  0x00 ; '.'
000000000020cb48         db  0x00 ; '.'
000000000020cb49         db  0x00 ; '.'
000000000020cb4a         db  0x00 ; '.'
000000000020cb4b         db  0x00 ; '.'
000000000020cb4c         db  0x00 ; '.'
000000000020cb4d         db  0x00 ; '.'
000000000020cb4e         db  0x00 ; '.'
000000000020cb4f         db  0x00 ; '.'
000000000020cb50         db  0x00 ; '.'
000000000020cb51         db  0x00 ; '.'
000000000020cb52         db  0x00 ; '.'
000000000020cb53         db  0x00 ; '.'
000000000020cb54         db  0x00 ; '.'
000000000020cb55         db  0x00 ; '.'
000000000020cb56         db  0x00 ; '.'
000000000020cb57         db  0x00 ; '.'
000000000020cb58         db  0x7d ; '}'
000000000020cb59         db  0xff ; '.'
000000000020cb5a         db  0xff ; '.'
000000000020cb5b         db  0xff ; '.'
000000000020cb5c         db  0x00 ; '.'
000000000020cb5d         db  0x00 ; '.'
000000000020cb5e         db  0x00 ; '.'
000000000020cb5f         db  0x00 ; '.'
000000000020cb60         db  0x00 ; '.'
000000000020cb61         db  0x00 ; '.'
000000000020cb62         db  0x00 ; '.'
000000000020cb63         db  0x00 ; '.'
000000000020cb64         db  0x00 ; '.'
000000000020cb65         db  0x00 ; '.'
000000000020cb66         db  0x00 ; '.'
000000000020cb67         db  0x00 ; '.'
000000000020cb68         db  0x00 ; '.'
000000000020cb69         db  0x00 ; '.'
000000000020cb6a         db  0x00 ; '.'
000000000020cb6b         db  0x00 ; '.'
000000000020cb6c         db  0x00 ; '.'
000000000020cb6d         db  0x00 ; '.'
000000000020cb6e         db  0x00 ; '.'
000000000020cb6f         db  0x00 ; '.'
000000000020cb70         db  0x00 ; '.'
000000000020cb71         db  0x00 ; '.'
000000000020cb72         db  0x00 ; '.'
000000000020cb73         db  0x00 ; '.'
000000000020cb74         db  0x00 ; '.'
000000000020cb75         db  0x00 ; '.'
000000000020cb76         db  0x00 ; '.'
000000000020cb77         db  0x00 ; '.'
000000000020cb78         db  0x00 ; '.'
000000000020cb79         db  0x00 ; '.'
000000000020cb7a         db  0x00 ; '.'
000000000020cb7b         db  0x00 ; '.'
000000000020cb7c         db  0x00 ; '.'
000000000020cb7d         db  0x00 ; '.'
000000000020cb7e         db  0x00 ; '.'
000000000020cb7f         db  0x00 ; '.'
                     algorithm_out_string:
000000000020cb80         db  0xf1 ; '.'                                         ; DATA XREF=main+1506, main+2741, main+2813, main+3523
000000000020cb81         db  0x93 ; '.'
000000000020cb82         db  0x00 ; '.'
000000000020cb83         db  0x00 ; '.'
000000000020cb84         db  0x00 ; '.'
000000000020cb85         db  0x00 ; '.'
000000000020cb86         db  0x00 ; '.'
000000000020cb87         db  0x00 ; '.'
000000000020cb88         db  0x00 ; '.'
000000000020cb89         db  0x00 ; '.'
000000000020cb8a         db  0x00 ; '.'
000000000020cb8b         db  0x00 ; '.'
000000000020cb8c         db  0x00 ; '.'
000000000020cb8d         db  0x00 ; '.'
000000000020cb8e         db  0x00 ; '.'
000000000020cb8f         db  0x00 ; '.'
                     algorithm_in_string:
000000000020cb90         db  0xf9 ; '.'                                         ; DATA XREF=main+5010
000000000020cb91         db  0x93 ; '.'
000000000020cb92         db  0x00 ; '.'
000000000020cb93         db  0x00 ; '.'
000000000020cb94         db  0x00 ; '.'
000000000020cb95         db  0x00 ; '.'
000000000020cb96         db  0x00 ; '.'
000000000020cb97         db  0x00 ; '.'
000000000020cb98         db  0x00 ; '.'
000000000020cb99         db  0x00 ; '.'
000000000020cb9a         db  0x00 ; '.'
000000000020cb9b         db  0x00 ; '.'
000000000020cb9c         db  0x00 ; '.'
000000000020cb9d         db  0x00 ; '.'
000000000020cb9e         db  0x00 ; '.'
000000000020cb9f         db  0x00 ; '.'
                     quoting_style_args:
000000000020cba0         db  0x81 ; '.'
000000000020cba1         db  0x9f ; '.'
000000000020cba2         db  0x00 ; '.'
000000000020cba3         db  0x00 ; '.'
000000000020cba4         db  0x00 ; '.'
000000000020cba5         db  0x00 ; '.'
000000000020cba6         db  0x00 ; '.'
000000000020cba7         db  0x00 ; '.'
000000000020cba8         db  0x89 ; '.'
000000000020cba9         db  0x9f ; '.'
000000000020cbaa         db  0x00 ; '.'
000000000020cbab         db  0x00 ; '.'
000000000020cbac         db  0x00 ; '.'
000000000020cbad         db  0x00 ; '.'
000000000020cbae         db  0x00 ; '.'
000000000020cbaf         db  0x00 ; '.'
000000000020cbb0         db  0x8f ; '.'
000000000020cbb1         db  0x9f ; '.'
000000000020cbb2         db  0x00 ; '.'
000000000020cbb3         db  0x00 ; '.'
000000000020cbb4         db  0x00 ; '.'
000000000020cbb5         db  0x00 ; '.'
000000000020cbb6         db  0x00 ; '.'
000000000020cbb7         db  0x00 ; '.'
000000000020cbb8         db  0x9c ; '.'
000000000020cbb9         db  0x9f ; '.'
000000000020cbba         db  0x00 ; '.'
000000000020cbbb         db  0x00 ; '.'
000000000020cbbc         db  0x00 ; '.'
000000000020cbbd         db  0x00 ; '.'
000000000020cbbe         db  0x00 ; '.'
000000000020cbbf         db  0x00 ; '.'
000000000020cbc0         db  0xa9 ; '.'
000000000020cbc1         db  0x9f ; '.'
000000000020cbc2         db  0x00 ; '.'
000000000020cbc3         db  0x00 ; '.'
000000000020cbc4         db  0x00 ; '.'
000000000020cbc5         db  0x00 ; '.'
000000000020cbc6         db  0x00 ; '.'
000000000020cbc7         db  0x00 ; '.'
000000000020cbc8         db  0xbd ; '.'
000000000020cbc9         db  0x9f ; '.'
000000000020cbca         db  0x00 ; '.'
000000000020cbcb         db  0x00 ; '.'
000000000020cbcc         db  0x00 ; '.'
000000000020cbcd         db  0x00 ; '.'
000000000020cbce         db  0x00 ; '.'
000000000020cbcf         db  0x00 ; '.'
000000000020cbd0         db  0xbf ; '.'
000000000020cbd1         db  0x9f ; '.'
000000000020cbd2         db  0x00 ; '.'
000000000020cbd3         db  0x00 ; '.'
000000000020cbd4         db  0x00 ; '.'
000000000020cbd5         db  0x00 ; '.'
000000000020cbd6         db  0x00 ; '.'
000000000020cbd7         db  0x00 ; '.'
000000000020cbd8         db  0xa2 ; '.'
000000000020cbd9         db  0x9f ; '.'
000000000020cbda         db  0x00 ; '.'
000000000020cbdb         db  0x00 ; '.'
000000000020cbdc         db  0x00 ; '.'
000000000020cbdd         db  0x00 ; '.'
000000000020cbde         db  0x00 ; '.'
000000000020cbdf         db  0x00 ; '.'
000000000020cbe0         db  0xb4 ; '.'
000000000020cbe1         db  0x92 ; '.'
000000000020cbe2         db  0x00 ; '.'
000000000020cbe3         db  0x00 ; '.'
000000000020cbe4         db  0x00 ; '.'
000000000020cbe5         db  0x00 ; '.'
000000000020cbe6         db  0x00 ; '.'
000000000020cbe7         db  0x00 ; '.'
000000000020cbe8         db  0xc7 ; '.'
000000000020cbe9         db  0x9f ; '.'
000000000020cbea         db  0x00 ; '.'
000000000020cbeb         db  0x00 ; '.'
000000000020cbec         db  0x00 ; '.'
000000000020cbed         db  0x00 ; '.'
000000000020cbee         db  0x00 ; '.'
000000000020cbef         db  0x00 ; '.'
000000000020cbf0         db  0x00 ; '.'
000000000020cbf1         db  0x00 ; '.'
000000000020cbf2         db  0x00 ; '.'
000000000020cbf3         db  0x00 ; '.'
000000000020cbf4         db  0x00 ; '.'
000000000020cbf5         db  0x00 ; '.'
000000000020cbf6         db  0x00 ; '.'
000000000020cbf7         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x20cbf8; 0x20cde8[ (496 bytes)
        ; File offset : [52216; 52712[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
000000000020cbf8         db  0x01 ; '.'
000000000020cbf9         db  0x00 ; '.'
000000000020cbfa         db  0x00 ; '.'
000000000020cbfb         db  0x00 ; '.'
000000000020cbfc         db  0x00 ; '.'
000000000020cbfd         db  0x00 ; '.'
000000000020cbfe         db  0x00 ; '.'
000000000020cbff         db  0x00 ; '.'
000000000020cc00         db  0x01 ; '.'
000000000020cc01         db  0x00 ; '.'
000000000020cc02         db  0x00 ; '.'
000000000020cc03         db  0x00 ; '.'
000000000020cc04         db  0x00 ; '.'
000000000020cc05         db  0x00 ; '.'
000000000020cc06         db  0x00 ; '.'
000000000020cc07         db  0x00 ; '.'
000000000020cc08         db  0x0c ; '.'
000000000020cc09         db  0x00 ; '.'
000000000020cc0a         db  0x00 ; '.'
000000000020cc0b         db  0x00 ; '.'
000000000020cc0c         db  0x00 ; '.'
000000000020cc0d         db  0x00 ; '.'
000000000020cc0e         db  0x00 ; '.'
000000000020cc0f         db  0x00 ; '.'
000000000020cc10         db  0xc8 ; '.'
000000000020cc11         db  0x17 ; '.'
000000000020cc12         db  0x00 ; '.'
000000000020cc13         db  0x00 ; '.'
000000000020cc14         db  0x00 ; '.'
000000000020cc15         db  0x00 ; '.'
000000000020cc16         db  0x00 ; '.'
000000000020cc17         db  0x00 ; '.'
000000000020cc18         db  0x0d ; '.'
000000000020cc19         db  0x00 ; '.'
000000000020cc1a         db  0x00 ; '.'
000000000020cc1b         db  0x00 ; '.'
000000000020cc1c         db  0x00 ; '.'
000000000020cc1d         db  0x00 ; '.'
000000000020cc1e         db  0x00 ; '.'
000000000020cc1f         db  0x00 ; '.'
000000000020cc20         db  0xd0 ; '.'
000000000020cc21         db  0x91 ; '.'
000000000020cc22         db  0x00 ; '.'
000000000020cc23         db  0x00 ; '.'
000000000020cc24         db  0x00 ; '.'
000000000020cc25         db  0x00 ; '.'
000000000020cc26         db  0x00 ; '.'
000000000020cc27         db  0x00 ; '.'
000000000020cc28         db  0x19 ; '.'
000000000020cc29         db  0x00 ; '.'
000000000020cc2a         db  0x00 ; '.'
000000000020cc2b         db  0x00 ; '.'
000000000020cc2c         db  0x00 ; '.'
000000000020cc2d         db  0x00 ; '.'
000000000020cc2e         db  0x00 ; '.'
000000000020cc2f         db  0x00 ; '.'
000000000020cc30         db  0xb0 ; '.'
000000000020cc31         db  0xc9 ; '.'
000000000020cc32         db  0x20 ; ' '
000000000020cc33         db  0x00 ; '.'
000000000020cc34         db  0x00 ; '.'
000000000020cc35         db  0x00 ; '.'
000000000020cc36         db  0x00 ; '.'
000000000020cc37         db  0x00 ; '.'
000000000020cc38         db  0x1b ; '.'
000000000020cc39         db  0x00 ; '.'
000000000020cc3a         db  0x00 ; '.'
000000000020cc3b         db  0x00 ; '.'
000000000020cc3c         db  0x00 ; '.'
000000000020cc3d         db  0x00 ; '.'
000000000020cc3e         db  0x00 ; '.'
000000000020cc3f         db  0x00 ; '.'
000000000020cc40         db  0x08 ; '.'
000000000020cc41         db  0x00 ; '.'
000000000020cc42         db  0x00 ; '.'
000000000020cc43         db  0x00 ; '.'
000000000020cc44         db  0x00 ; '.'
000000000020cc45         db  0x00 ; '.'
000000000020cc46         db  0x00 ; '.'
000000000020cc47         db  0x00 ; '.'
000000000020cc48         db  0x1a ; '.'
000000000020cc49         db  0x00 ; '.'
000000000020cc4a         db  0x00 ; '.'
000000000020cc4b         db  0x00 ; '.'
000000000020cc4c         db  0x00 ; '.'
000000000020cc4d         db  0x00 ; '.'
000000000020cc4e         db  0x00 ; '.'
000000000020cc4f         db  0x00 ; '.'
000000000020cc50         db  0xb8 ; '.'
000000000020cc51         db  0xc9 ; '.'
000000000020cc52         db  0x20 ; ' '
000000000020cc53         db  0x00 ; '.'
000000000020cc54         db  0x00 ; '.'
000000000020cc55         db  0x00 ; '.'
000000000020cc56         db  0x00 ; '.'
000000000020cc57         db  0x00 ; '.'
000000000020cc58         db  0x1c ; '.'
000000000020cc59         db  0x00 ; '.'
000000000020cc5a         db  0x00 ; '.'
000000000020cc5b         db  0x00 ; '.'
000000000020cc5c         db  0x00 ; '.'
000000000020cc5d         db  0x00 ; '.'
000000000020cc5e         db  0x00 ; '.'
000000000020cc5f         db  0x00 ; '.'
000000000020cc60         db  0x08 ; '.'
000000000020cc61         db  0x00 ; '.'
000000000020cc62         db  0x00 ; '.'
000000000020cc63         db  0x00 ; '.'
000000000020cc64         db  0x00 ; '.'
000000000020cc65         db  0x00 ; '.'
000000000020cc66         db  0x00 ; '.'
000000000020cc67         db  0x00 ; '.'
000000000020cc68         db  0xf5 ; '.'
000000000020cc69         db  0xfe ; '.'
000000000020cc6a         db  0xff ; '.'
000000000020cc6b         db  0x6f ; 'o'
000000000020cc6c         db  0x00 ; '.'
000000000020cc6d         db  0x00 ; '.'
000000000020cc6e         db  0x00 ; '.'
000000000020cc6f         db  0x00 ; '.'
000000000020cc70         db  0x98 ; '.'
000000000020cc71         db  0x02 ; '.'
000000000020cc72         db  0x00 ; '.'
000000000020cc73         db  0x00 ; '.'
000000000020cc74         db  0x00 ; '.'
000000000020cc75         db  0x00 ; '.'
000000000020cc76         db  0x00 ; '.'
000000000020cc77         db  0x00 ; '.'
000000000020cc78         db  0x05 ; '.'
000000000020cc79         db  0x00 ; '.'
000000000020cc7a         db  0x00 ; '.'
000000000020cc7b         db  0x00 ; '.'
000000000020cc7c         db  0x00 ; '.'
000000000020cc7d         db  0x00 ; '.'
000000000020cc7e         db  0x00 ; '.'
000000000020cc7f         db  0x00 ; '.'
000000000020cc80         db  0xd0 ; '.'
000000000020cc81         db  0x09 ; '.'
000000000020cc82         db  0x00 ; '.'
000000000020cc83         db  0x00 ; '.'
000000000020cc84         db  0x00 ; '.'
000000000020cc85         db  0x00 ; '.'
000000000020cc86         db  0x00 ; '.'
000000000020cc87         db  0x00 ; '.'
000000000020cc88         db  0x06 ; '.'
000000000020cc89         db  0x00 ; '.'
000000000020cc8a         db  0x00 ; '.'
000000000020cc8b         db  0x00 ; '.'
000000000020cc8c         db  0x00 ; '.'
000000000020cc8d         db  0x00 ; '.'
000000000020cc8e         db  0x00 ; '.'
000000000020cc8f         db  0x00 ; '.'
000000000020cc90         db  0xe0 ; '.'
000000000020cc91         db  0x02 ; '.'
000000000020cc92         db  0x00 ; '.'
000000000020cc93         db  0x00 ; '.'
000000000020cc94         db  0x00 ; '.'
000000000020cc95         db  0x00 ; '.'
000000000020cc96         db  0x00 ; '.'
000000000020cc97         db  0x00 ; '.'
000000000020cc98         db  0x0a ; '.'
000000000020cc99         db  0x00 ; '.'
000000000020cc9a         db  0x00 ; '.'
000000000020cc9b         db  0x00 ; '.'
000000000020cc9c         db  0x00 ; '.'
000000000020cc9d         db  0x00 ; '.'
000000000020cc9e         db  0x00 ; '.'
000000000020cc9f         db  0x00 ; '.'
000000000020cca0         db  0x43 ; 'C'
000000000020cca1         db  0x03 ; '.'
000000000020cca2         db  0x00 ; '.'
000000000020cca3         db  0x00 ; '.'
000000000020cca4         db  0x00 ; '.'
000000000020cca5         db  0x00 ; '.'
000000000020cca6         db  0x00 ; '.'
000000000020cca7         db  0x00 ; '.'
000000000020cca8         db  0x0b ; '.'
000000000020cca9         db  0x00 ; '.'
000000000020ccaa         db  0x00 ; '.'
000000000020ccab         db  0x00 ; '.'
000000000020ccac         db  0x00 ; '.'
000000000020ccad         db  0x00 ; '.'
000000000020ccae         db  0x00 ; '.'
000000000020ccaf         db  0x00 ; '.'
000000000020ccb0         db  0x18 ; '.'
000000000020ccb1         db  0x00 ; '.'
000000000020ccb2         db  0x00 ; '.'
000000000020ccb3         db  0x00 ; '.'
000000000020ccb4         db  0x00 ; '.'
000000000020ccb5         db  0x00 ; '.'
000000000020ccb6         db  0x00 ; '.'
000000000020ccb7         db  0x00 ; '.'
000000000020ccb8         db  0x15 ; '.'
000000000020ccb9         db  0x00 ; '.'
000000000020ccba         db  0x00 ; '.'
000000000020ccbb         db  0x00 ; '.'
000000000020ccbc         db  0x00 ; '.'
000000000020ccbd         db  0x00 ; '.'
000000000020ccbe         db  0x00 ; '.'
000000000020ccbf         db  0x00 ; '.'
000000000020ccc0         db  0x00 ; '.'
000000000020ccc1         db  0x00 ; '.'
000000000020ccc2         db  0x00 ; '.'
000000000020ccc3         db  0x00 ; '.'
000000000020ccc4         db  0x00 ; '.'
000000000020ccc5         db  0x00 ; '.'
000000000020ccc6         db  0x00 ; '.'
000000000020ccc7         db  0x00 ; '.'
000000000020ccc8         db  0x03 ; '.'
000000000020ccc9         db  0x00 ; '.'
000000000020ccca         db  0x00 ; '.'
000000000020cccb         db  0x00 ; '.'
000000000020cccc         db  0x00 ; '.'
000000000020cccd         db  0x00 ; '.'
000000000020ccce         db  0x00 ; '.'
000000000020cccf         db  0x00 ; '.'
000000000020ccd0         db  0xe8 ; '.'
000000000020ccd1         db  0xcd ; '.'
000000000020ccd2         db  0x20 ; ' '
000000000020ccd3         db  0x00 ; '.'
000000000020ccd4         db  0x00 ; '.'
000000000020ccd5         db  0x00 ; '.'
000000000020ccd6         db  0x00 ; '.'
000000000020ccd7         db  0x00 ; '.'
000000000020ccd8         db  0x02 ; '.'
000000000020ccd9         db  0x00 ; '.'
000000000020ccda         db  0x00 ; '.'
000000000020ccdb         db  0x00 ; '.'
000000000020ccdc         db  0x00 ; '.'
000000000020ccdd         db  0x00 ; '.'
000000000020ccde         db  0x00 ; '.'
000000000020ccdf         db  0x00 ; '.'
000000000020cce0         db  0x88 ; '.'
000000000020cce1         db  0x05 ; '.'
000000000020cce2         db  0x00 ; '.'
000000000020cce3         db  0x00 ; '.'
000000000020cce4         db  0x00 ; '.'
000000000020cce5         db  0x00 ; '.'
000000000020cce6         db  0x00 ; '.'
000000000020cce7         db  0x00 ; '.'
000000000020cce8         db  0x14 ; '.'
000000000020cce9         db  0x00 ; '.'
000000000020ccea         db  0x00 ; '.'
000000000020cceb         db  0x00 ; '.'
000000000020ccec         db  0x00 ; '.'
000000000020cced         db  0x00 ; '.'
000000000020ccee         db  0x00 ; '.'
000000000020ccef         db  0x00 ; '.'
000000000020ccf0         db  0x07 ; '.'
000000000020ccf1         db  0x00 ; '.'
000000000020ccf2         db  0x00 ; '.'
000000000020ccf3         db  0x00 ; '.'
000000000020ccf4         db  0x00 ; '.'
000000000020ccf5         db  0x00 ; '.'
000000000020ccf6         db  0x00 ; '.'
000000000020ccf7         db  0x00 ; '.'
000000000020ccf8         db  0x17 ; '.'
000000000020ccf9         db  0x00 ; '.'
000000000020ccfa         db  0x00 ; '.'
000000000020ccfb         db  0x00 ; '.'
000000000020ccfc         db  0x00 ; '.'
000000000020ccfd         db  0x00 ; '.'
000000000020ccfe         db  0x00 ; '.'
000000000020ccff         db  0x00 ; '.'
000000000020cd00         db  0x40 ; '@'
000000000020cd01         db  0x12 ; '.'
000000000020cd02         db  0x00 ; '.'
000000000020cd03         db  0x00 ; '.'
000000000020cd04         db  0x00 ; '.'
000000000020cd05         db  0x00 ; '.'
000000000020cd06         db  0x00 ; '.'
000000000020cd07         db  0x00 ; '.'
000000000020cd08         db  0x07 ; '.'
000000000020cd09         db  0x00 ; '.'
000000000020cd0a         db  0x00 ; '.'
000000000020cd0b         db  0x00 ; '.'
000000000020cd0c         db  0x00 ; '.'
000000000020cd0d         db  0x00 ; '.'
000000000020cd0e         db  0x00 ; '.'
000000000020cd0f         db  0x00 ; '.'
000000000020cd10         db  0x08 ; '.'
000000000020cd11         db  0x0e ; '.'
000000000020cd12         db  0x00 ; '.'
000000000020cd13         db  0x00 ; '.'
000000000020cd14         db  0x00 ; '.'
000000000020cd15         db  0x00 ; '.'
000000000020cd16         db  0x00 ; '.'
000000000020cd17         db  0x00 ; '.'
000000000020cd18         db  0x08 ; '.'
000000000020cd19         db  0x00 ; '.'
000000000020cd1a         db  0x00 ; '.'
000000000020cd1b         db  0x00 ; '.'
000000000020cd1c         db  0x00 ; '.'
000000000020cd1d         db  0x00 ; '.'
000000000020cd1e         db  0x00 ; '.'
000000000020cd1f         db  0x00 ; '.'
000000000020cd20         db  0x38 ; '8'
000000000020cd21         db  0x04 ; '.'
000000000020cd22         db  0x00 ; '.'
000000000020cd23         db  0x00 ; '.'
000000000020cd24         db  0x00 ; '.'
000000000020cd25         db  0x00 ; '.'
000000000020cd26         db  0x00 ; '.'
000000000020cd27         db  0x00 ; '.'
000000000020cd28         db  0x09 ; '.'
000000000020cd29         db  0x00 ; '.'
000000000020cd2a         db  0x00 ; '.'
000000000020cd2b         db  0x00 ; '.'
000000000020cd2c         db  0x00 ; '.'
000000000020cd2d         db  0x00 ; '.'
000000000020cd2e         db  0x00 ; '.'
000000000020cd2f         db  0x00 ; '.'
000000000020cd30         db  0x18 ; '.'
000000000020cd31         db  0x00 ; '.'
000000000020cd32         db  0x00 ; '.'
000000000020cd33         db  0x00 ; '.'
000000000020cd34         db  0x00 ; '.'
000000000020cd35         db  0x00 ; '.'
000000000020cd36         db  0x00 ; '.'
000000000020cd37         db  0x00 ; '.'
000000000020cd38         db  0x1e ; '.'
000000000020cd39         db  0x00 ; '.'
000000000020cd3a         db  0x00 ; '.'
000000000020cd3b         db  0x00 ; '.'
000000000020cd3c         db  0x00 ; '.'
000000000020cd3d         db  0x00 ; '.'
000000000020cd3e         db  0x00 ; '.'
000000000020cd3f         db  0x00 ; '.'
000000000020cd40         db  0x08 ; '.'
000000000020cd41         db  0x00 ; '.'
000000000020cd42         db  0x00 ; '.'
000000000020cd43         db  0x00 ; '.'
000000000020cd44         db  0x00 ; '.'
000000000020cd45         db  0x00 ; '.'
000000000020cd46         db  0x00 ; '.'
000000000020cd47         db  0x00 ; '.'
000000000020cd48         db  0xfb ; '.'
000000000020cd49         db  0xff ; '.'
000000000020cd4a         db  0xff ; '.'
000000000020cd4b         db  0x6f ; 'o'
000000000020cd4c         db  0x00 ; '.'
000000000020cd4d         db  0x00 ; '.'
000000000020cd4e         db  0x00 ; '.'
000000000020cd4f         db  0x00 ; '.'
000000000020cd50         db  0x01 ; '.'
000000000020cd51         db  0x00 ; '.'
000000000020cd52         db  0x00 ; '.'
000000000020cd53         db  0x08 ; '.'
000000000020cd54         db  0x00 ; '.'
000000000020cd55         db  0x00 ; '.'
000000000020cd56         db  0x00 ; '.'
000000000020cd57         db  0x00 ; '.'
000000000020cd58         db  0xfe ; '.'
000000000020cd59         db  0xff ; '.'
000000000020cd5a         db  0xff ; '.'
000000000020cd5b         db  0x6f ; 'o'
000000000020cd5c         db  0x00 ; '.'
000000000020cd5d         db  0x00 ; '.'
000000000020cd5e         db  0x00 ; '.'
000000000020cd5f         db  0x00 ; '.'
000000000020cd60         db  0xa8 ; '.'
000000000020cd61         db  0x0d ; '.'
000000000020cd62         db  0x00 ; '.'
000000000020cd63         db  0x00 ; '.'
000000000020cd64         db  0x00 ; '.'
000000000020cd65         db  0x00 ; '.'
000000000020cd66         db  0x00 ; '.'
000000000020cd67         db  0x00 ; '.'
000000000020cd68         db  0xff ; '.'
000000000020cd69         db  0xff ; '.'
000000000020cd6a         db  0xff ; '.'
000000000020cd6b         db  0x6f ; 'o'
000000000020cd6c         db  0x00 ; '.'
000000000020cd6d         db  0x00 ; '.'
000000000020cd6e         db  0x00 ; '.'
000000000020cd6f         db  0x00 ; '.'
000000000020cd70         db  0x01 ; '.'
000000000020cd71         db  0x00 ; '.'
000000000020cd72         db  0x00 ; '.'
000000000020cd73         db  0x00 ; '.'
000000000020cd74         db  0x00 ; '.'
000000000020cd75         db  0x00 ; '.'
000000000020cd76         db  0x00 ; '.'
000000000020cd77         db  0x00 ; '.'
000000000020cd78         db  0xf0 ; '.'
000000000020cd79         db  0xff ; '.'
000000000020cd7a         db  0xff ; '.'
000000000020cd7b         db  0x6f ; 'o'
000000000020cd7c         db  0x00 ; '.'
000000000020cd7d         db  0x00 ; '.'
000000000020cd7e         db  0x00 ; '.'
000000000020cd7f         db  0x00 ; '.'
000000000020cd80         db  0x14 ; '.'
000000000020cd81         db  0x0d ; '.'
000000000020cd82         db  0x00 ; '.'
000000000020cd83         db  0x00 ; '.'
000000000020cd84         db  0x00 ; '.'
000000000020cd85         db  0x00 ; '.'
000000000020cd86         db  0x00 ; '.'
000000000020cd87         db  0x00 ; '.'
000000000020cd88         db  0xf9 ; '.'
000000000020cd89         db  0xff ; '.'
000000000020cd8a         db  0xff ; '.'
000000000020cd8b         db  0x6f ; 'o'
000000000020cd8c         db  0x00 ; '.'
000000000020cd8d         db  0x00 ; '.'
000000000020cd8e         db  0x00 ; '.'
000000000020cd8f         db  0x00 ; '.'
000000000020cd90         db  0x20 ; ' '
000000000020cd91         db  0x00 ; '.'
000000000020cd92         db  0x00 ; '.'
000000000020cd93         db  0x00 ; '.'
000000000020cd94         db  0x00 ; '.'
000000000020cd95         db  0x00 ; '.'
000000000020cd96         db  0x00 ; '.'
000000000020cd97         db  0x00 ; '.'
000000000020cd98         db  0x00 ; '.'
000000000020cd99         db  0x00 ; '.'
000000000020cd9a         db  0x00 ; '.'
000000000020cd9b         db  0x00 ; '.'
000000000020cd9c         db  0x00 ; '.'
000000000020cd9d         db  0x00 ; '.'
000000000020cd9e         db  0x00 ; '.'
000000000020cd9f         db  0x00 ; '.'
000000000020cda0         db  0x00 ; '.'
000000000020cda1         db  0x00 ; '.'
000000000020cda2         db  0x00 ; '.'
000000000020cda3         db  0x00 ; '.'
000000000020cda4         db  0x00 ; '.'
000000000020cda5         db  0x00 ; '.'
000000000020cda6         db  0x00 ; '.'
000000000020cda7         db  0x00 ; '.'
000000000020cda8         db  0x00 ; '.'
000000000020cda9         db  0x00 ; '.'
000000000020cdaa         db  0x00 ; '.'
000000000020cdab         db  0x00 ; '.'
000000000020cdac         db  0x00 ; '.'
000000000020cdad         db  0x00 ; '.'
000000000020cdae         db  0x00 ; '.'
000000000020cdaf         db  0x00 ; '.'
000000000020cdb0         db  0x00 ; '.'
000000000020cdb1         db  0x00 ; '.'
000000000020cdb2         db  0x00 ; '.'
000000000020cdb3         db  0x00 ; '.'
000000000020cdb4         db  0x00 ; '.'
000000000020cdb5         db  0x00 ; '.'
000000000020cdb6         db  0x00 ; '.'
000000000020cdb7         db  0x00 ; '.'
000000000020cdb8         db  0x00 ; '.'
000000000020cdb9         db  0x00 ; '.'
000000000020cdba         db  0x00 ; '.'
000000000020cdbb         db  0x00 ; '.'
000000000020cdbc         db  0x00 ; '.'
000000000020cdbd         db  0x00 ; '.'
000000000020cdbe         db  0x00 ; '.'
000000000020cdbf         db  0x00 ; '.'
000000000020cdc0         db  0x00 ; '.'
000000000020cdc1         db  0x00 ; '.'
000000000020cdc2         db  0x00 ; '.'
000000000020cdc3         db  0x00 ; '.'
000000000020cdc4         db  0x00 ; '.'
000000000020cdc5         db  0x00 ; '.'
000000000020cdc6         db  0x00 ; '.'
000000000020cdc7         db  0x00 ; '.'
000000000020cdc8         db  0x00 ; '.'
000000000020cdc9         db  0x00 ; '.'
000000000020cdca         db  0x00 ; '.'
000000000020cdcb         db  0x00 ; '.'
000000000020cdcc         db  0x00 ; '.'
000000000020cdcd         db  0x00 ; '.'
000000000020cdce         db  0x00 ; '.'
000000000020cdcf         db  0x00 ; '.'
000000000020cdd0         db  0x00 ; '.'
000000000020cdd1         db  0x00 ; '.'
000000000020cdd2         db  0x00 ; '.'
000000000020cdd3         db  0x00 ; '.'
000000000020cdd4         db  0x00 ; '.'
000000000020cdd5         db  0x00 ; '.'
000000000020cdd6         db  0x00 ; '.'
000000000020cdd7         db  0x00 ; '.'
000000000020cdd8         db  0x00 ; '.'
000000000020cdd9         db  0x00 ; '.'
000000000020cdda         db  0x00 ; '.'
000000000020cddb         db  0x00 ; '.'
000000000020cddc         db  0x00 ; '.'
000000000020cddd         db  0x00 ; '.'
000000000020cdde         db  0x00 ; '.'
000000000020cddf         db  0x00 ; '.'
000000000020cde0         db  0x00 ; '.'
000000000020cde1         db  0x00 ; '.'
000000000020cde2         db  0x00 ; '.'
000000000020cde3         db  0x00 ; '.'
000000000020cde4         db  0x00 ; '.'
000000000020cde5         db  0x00 ; '.'
000000000020cde6         db  0x00 ; '.'
000000000020cde7         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x20cde8; 0x20d000[ (536 bytes)
        ; File offset : [52712; 53248[ (536 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
000000000020cde8         db  0xf8 ; '.'
000000000020cde9         db  0xcb ; '.'
000000000020cdea         db  0x20 ; ' '
000000000020cdeb         db  0x00 ; '.'
000000000020cdec         db  0x00 ; '.'
000000000020cded         db  0x00 ; '.'
000000000020cdee         db  0x00 ; '.'
000000000020cdef         db  0x00 ; '.'
                     qword_20cdf0:
000000000020cdf0         dq         0x0000000000000000                          ; DATA XREF=0x17e0
000000000020cdf8         db  0x00 ; '.'                                         ; DATA XREF=0x17e6
000000000020cdf9         db  0x00 ; '.'
000000000020cdfa         db  0x00 ; '.'
000000000020cdfb         db  0x00 ; '.'
000000000020cdfc         db  0x00 ; '.'
000000000020cdfd         db  0x00 ; '.'
000000000020cdfe         db  0x00 ; '.'
000000000020cdff         db  0x00 ; '.'
                     free@GOT:        // free
000000000020ce00         dq         0x000000000020d290                          ; DATA XREF=j_free
                     abort@GOT:        // abort
000000000020ce08         dq         0x000000000020d298                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
000000000020ce10         dq         0x000000000020d2a0                          ; DATA XREF=j___errno_location
                     strncmp@GOT:        // strncmp
000000000020ce18         dq         0x000000000020d2a8                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
000000000020ce20         dq         0x000000000020d2b8                          ; DATA XREF=j__exit
                     __fpending@GOT:        // __fpending
000000000020ce28         dq         0x000000000020d2c0                          ; DATA XREF=j___fpending
                     ferror@GOT:        // ferror
000000000020ce30         dq         0x000000000020d2c8                          ; DATA XREF=j_ferror
                     fread@GOT:        // fread
000000000020ce38         dq         0x000000000020d2d0                          ; DATA XREF=j_fread
                     fcntl@GOT:        // fcntl
000000000020ce40         dq         0x000000000020d2d8                          ; DATA XREF=j_fcntl
                     textdomain@GOT:        // textdomain
000000000020ce48         dq         0x000000000020d2e0                          ; DATA XREF=j_textdomain
                     fclose@GOT:        // fclose
000000000020ce50         dq         0x000000000020d2e8                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
000000000020ce58         dq         0x000000000020d2f0                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
000000000020ce60         dq         0x000000000020d2f8                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
000000000020ce68         dq         0x000000000020d300                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
000000000020ce70         dq         0x000000000020d308                          ; DATA XREF=j_strlen
                     __stack_chk_fail@GOT:        // __stack_chk_fail
000000000020ce78         dq         0x000000000020d310                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
000000000020ce80         dq         0x000000000020d318                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
000000000020ce88         dq         0x000000000020d320                          ; DATA XREF=j_mbrtowc
                     strchr@GOT:        // strchr
000000000020ce90         dq         0x000000000020d328                          ; DATA XREF=j_strchr
                     __overflow@GOT:        // __overflow
000000000020ce98         dq         0x000000000020d330                          ; DATA XREF=j___overflow
                     strrchr@GOT:        // strrchr
000000000020cea0         dq         0x000000000020d338                          ; DATA XREF=j_strrchr
                     lseek@GOT:        // lseek
000000000020cea8         dq         0x000000000020d340                          ; DATA XREF=j_lseek
                     __assert_fail@GOT:        // __assert_fail
000000000020ceb0         dq         0x000000000020d348                          ; DATA XREF=j___assert_fail
                     __strtoul_internal@GOT:        // __strtoul_internal
000000000020ceb8         dq         0x000000000020d350                          ; DATA XREF=j___strtoul_internal
                     memset@GOT:        // memset
000000000020cec0         dq         0x000000000020d358                          ; DATA XREF=j_memset
                     close@GOT:        // close
000000000020cec8         dq         0x000000000020d360                          ; DATA XREF=j_close
                     posix_fadvise@GOT:        // posix_fadvise
000000000020ced0         dq         0x000000000020d368                          ; DATA XREF=j_posix_fadvise
                     memcmp@GOT:        // memcmp
000000000020ced8         dq         0x000000000020d378                          ; DATA XREF=j_memcmp
                     fputs_unlocked@GOT:        // fputs_unlocked
000000000020cee0         dq         0x000000000020d380                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
000000000020cee8         dq         0x000000000020d388                          ; DATA XREF=j_calloc
                     __getdelim@GOT:        // __getdelim
000000000020cef0         dq         0x000000000020d390                          ; DATA XREF=j___getdelim
                     strcmp@GOT:        // strcmp
000000000020cef8         dq         0x000000000020d398                          ; DATA XREF=j_strcmp
                     __memcpy_chk@GOT:        // __memcpy_chk
000000000020cf00         dq         0x000000000020d3a0                          ; DATA XREF=j___memcpy_chk
                     feof@GOT:        // feof
000000000020cf08         dq         0x000000000020d3a8                          ; DATA XREF=j_feof
                     memcpy@GOT:        // memcpy
000000000020cf10         dq         0x000000000020d3b8                          ; DATA XREF=j_memcpy
                     fileno@GOT:        // fileno
000000000020cf18         dq         0x000000000020d3c0                          ; DATA XREF=j_fileno
                     malloc@GOT:        // malloc
000000000020cf20         dq         0x000000000020d3c8                          ; DATA XREF=j_malloc
                     fflush@GOT:        // fflush
000000000020cf28         dq         0x000000000020d3d0                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
000000000020cf30         dq         0x000000000020d3d8                          ; DATA XREF=j_nl_langinfo
                     __freading@GOT:        // __freading
000000000020cf38         dq         0x000000000020d3e0                          ; DATA XREF=j___freading
                     fwrite_unlocked@GOT:        // fwrite_unlocked
000000000020cf40         dq         0x000000000020d3e8                          ; DATA XREF=j_fwrite_unlocked
                     realloc@GOT:        // realloc
000000000020cf48         dq         0x000000000020d3f0                          ; DATA XREF=j_realloc
                     fdopen@GOT:        // fdopen
000000000020cf50         dq         0x000000000020d3f8                          ; DATA XREF=j_fdopen
                     setlocale@GOT:        // setlocale
000000000020cf58         dq         0x000000000020d400                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
000000000020cf60         dq         0x000000000020d408                          ; DATA XREF=j___printf_chk
                     setvbuf@GOT:        // setvbuf
000000000020cf68         dq         0x000000000020d410                          ; DATA XREF=j_setvbuf
                     error@GOT:        // error
000000000020cf70         dq         0x000000000020d418                          ; DATA XREF=j_error
                     fseeko@GOT:        // fseeko
000000000020cf78         dq         0x000000000020d420                          ; DATA XREF=j_fseeko
                     fopen@GOT:        // fopen
000000000020cf80         dq         0x000000000020d428                          ; DATA XREF=j_fopen
                     dcngettext@GOT:        // dcngettext
000000000020cf88         dq         0x000000000020d430                          ; DATA XREF=j_dcngettext
                     strtoul@GOT:        // strtoul
000000000020cf90         dq         0x000000000020d438                          ; DATA XREF=j_strtoul
                     __cxa_atexit@GOT:        // __cxa_atexit
000000000020cf98         dq         0x000000000020d440                          ; DATA XREF=j___cxa_atexit
                     exit@GOT:        // exit
000000000020cfa0         dq         0x000000000020d448                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
000000000020cfa8         dq         0x000000000020d450                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
000000000020cfb0         dq         0x000000000020d458                          ; DATA XREF=j___fprintf_chk
                     mbsinit@GOT:        // mbsinit
000000000020cfb8         dq         0x000000000020d468                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
000000000020cfc0         dq         0x000000000020d470                          ; DATA XREF=j_iswprint
                     __ctype_tolower_loc@GOT:        // __ctype_tolower_loc
000000000020cfc8         dq         0x000000000020d480                          ; DATA XREF=j___ctype_tolower_loc
                     __ctype_b_loc@GOT:        // __ctype_b_loc
000000000020cfd0         dq         0x000000000020d488                          ; DATA XREF=j___ctype_b_loc
                     qword_20cfd8:
000000000020cfd8         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
000000000020cfe0         db  0x00 ; '.'                                         ; DATA XREF=_start+36
000000000020cfe1         db  0x00 ; '.'
000000000020cfe2         db  0x00 ; '.'
000000000020cfe3         db  0x00 ; '.'
000000000020cfe4         db  0x00 ; '.'
000000000020cfe5         db  0x00 ; '.'
000000000020cfe6         db  0x00 ; '.'
000000000020cfe7         db  0x00 ; '.'
                     qword_20cfe8:
000000000020cfe8         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_20cff0:
000000000020cff0         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_20cff8:
000000000020cff8         dq         0x0000000000000000                          ; DATA XREF=j_qword_20cff8, __do_global_dtors_aux+9


        ; Section .data
        ; Range: [0x20d000; 0x20d0a0[ (160 bytes)
        ; File offset : [53248; 53408[ (160 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

000000000020d000         align      8
                     __dso_handle:
000000000020d008         dq         0x000000000020d008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     delim:
000000000020d010         db         0x0a                                        ; DATA XREF=main+736, main+830, main+3095, main+3205
000000000020d011         align      4
                     bsd_reversed:
000000000020d014         dd         0xffffffff                                  ; DATA XREF=main+2114, main+2165, main+5088
                     memset_v.3512:
000000000020d018         dq         0x0000000000000000                          ; DATA XREF=blake2b_init_key+201, blake2b_final+294
                     Version:
000000000020d020         dq         0x0000000000009eb0                          ; DATA XREF=main+382
                     argmatch_die:
000000000020d028         db  0x50 ; 'P'
000000000020d029         db  0x57 ; 'W'
000000000020d02a         db  0x00 ; '.'
000000000020d02b         db  0x00 ; '.'
000000000020d02c         db  0x00 ; '.'
000000000020d02d         db  0x00 ; '.'
000000000020d02e         db  0x00 ; '.'
000000000020d02f         db  0x00 ; '.'
                     exit_failure:
000000000020d030         dd         0x00000001                                  ; DATA XREF=close_stdout+130, xalloc_die+23
000000000020d034         db  0x00 ; '.'
000000000020d035         db  0x00 ; '.'
000000000020d036         db  0x00 ; '.'
000000000020d037         db  0x00 ; '.'
000000000020d038         db  0x00 ; '.'
000000000020d039         db  0x00 ; '.'
000000000020d03a         db  0x00 ; '.'
000000000020d03b         db  0x00 ; '.'
000000000020d03c         db  0x00 ; '.'
000000000020d03d         db  0x00 ; '.'
000000000020d03e         db  0x00 ; '.'
000000000020d03f         db  0x00 ; '.'
                     quote_quoting_options:
000000000020d040         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
000000000020d041         db  0x00 ; '.'
000000000020d042         db  0x00 ; '.'
000000000020d043         db  0x00 ; '.'
000000000020d044         db  0x00 ; '.'
000000000020d045         db  0x00 ; '.'
000000000020d046         db  0x00 ; '.'
000000000020d047         db  0x00 ; '.'
000000000020d048         db  0x00 ; '.'
000000000020d049         db  0x00 ; '.'
000000000020d04a         db  0x00 ; '.'
000000000020d04b         db  0x00 ; '.'
000000000020d04c         db  0x00 ; '.'
000000000020d04d         db  0x00 ; '.'
000000000020d04e         db  0x00 ; '.'
000000000020d04f         db  0x00 ; '.'
000000000020d050         db  0x00 ; '.'
000000000020d051         db  0x00 ; '.'
000000000020d052         db  0x00 ; '.'
000000000020d053         db  0x00 ; '.'
000000000020d054         db  0x00 ; '.'
000000000020d055         db  0x00 ; '.'
000000000020d056         db  0x00 ; '.'
000000000020d057         db  0x00 ; '.'
000000000020d058         db  0x00 ; '.'
000000000020d059         db  0x00 ; '.'
000000000020d05a         db  0x00 ; '.'
000000000020d05b         db  0x00 ; '.'
000000000020d05c         db  0x00 ; '.'
000000000020d05d         db  0x00 ; '.'
000000000020d05e         db  0x00 ; '.'
000000000020d05f         db  0x00 ; '.'
000000000020d060         db  0x00 ; '.'
000000000020d061         db  0x00 ; '.'
000000000020d062         db  0x00 ; '.'
000000000020d063         db  0x00 ; '.'
000000000020d064         db  0x00 ; '.'
000000000020d065         db  0x00 ; '.'
000000000020d066         db  0x00 ; '.'
000000000020d067         db  0x00 ; '.'
000000000020d068         db  0x00 ; '.'
000000000020d069         db  0x00 ; '.'
000000000020d06a         db  0x00 ; '.'
000000000020d06b         db  0x00 ; '.'
000000000020d06c         db  0x00 ; '.'
000000000020d06d         db  0x00 ; '.'
000000000020d06e         db  0x00 ; '.'
000000000020d06f         db  0x00 ; '.'
000000000020d070         db  0x00 ; '.'
000000000020d071         db  0x00 ; '.'
000000000020d072         db  0x00 ; '.'
000000000020d073         db  0x00 ; '.'
000000000020d074         db  0x00 ; '.'
000000000020d075         db  0x00 ; '.'
000000000020d076         db  0x00 ; '.'
000000000020d077         db  0x00 ; '.'
                     nslots:
000000000020d078         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000020d07c         db  0x00 ; '.'
000000000020d07d         db  0x00 ; '.'
000000000020d07e         db  0x00 ; '.'
000000000020d07f         db  0x00 ; '.'
                     slotvec:
000000000020d080         dq         0x000000000020d090                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
000000000020d088         db  0x00 ; '.'
000000000020d089         db  0x00 ; '.'
000000000020d08a         db  0x00 ; '.'
000000000020d08b         db  0x00 ; '.'
000000000020d08c         db  0x00 ; '.'
000000000020d08d         db  0x00 ; '.'
000000000020d08e         db  0x00 ; '.'
000000000020d08f         db  0x00 ; '.'
                     slotvec0:
000000000020d090         dq         1.26481e-321, 1.0626e-317                   ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x20d0a0; 0x20d280[ (480 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
000000000020d0a0         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
000000000020d0a1         db  0x00 ; '.'
000000000020d0a2         db  0x00 ; '.'
000000000020d0a3         db  0x00 ; '.'
000000000020d0a4         db  0x00 ; '.'
000000000020d0a5         db  0x00 ; '.'
000000000020d0a6         db  0x00 ; '.'
000000000020d0a7         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
000000000020d0a8         db  0x00 ; '.'                                         ; DATA XREF=main+125, main+375, main+3198, main+3534, main+3566, main+3607, main+3656, main+3704, main+3736, main+3871, main+4206
000000000020d0a9         db  0x00 ; '.'
000000000020d0aa         db  0x00 ; '.'
000000000020d0ab         db  0x00 ; '.'
000000000020d0ac         db  0x00 ; '.'
000000000020d0ad         db  0x00 ; '.'
000000000020d0ae         db  0x00 ; '.'
000000000020d0af         db  0x00 ; '.'
                     stdin@@GLIBC_2.2.5:
000000000020d0b0         db  0x00 ; '.'                                         ; DATA XREF=main+1096, main+3790, digest_file.isra.1+49, digest_file.isra.1+175
000000000020d0b1         db  0x00 ; '.'
000000000020d0b2         db  0x00 ; '.'
000000000020d0b3         db  0x00 ; '.'
000000000020d0b4         db  0x00 ; '.'
000000000020d0b5         db  0x00 ; '.'
000000000020d0b6         db  0x00 ; '.'
000000000020d0b7         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
000000000020d0b8         db  0x00 ; '.'                                         ; DATA XREF=main+943
000000000020d0b9         db  0x00 ; '.'
000000000020d0ba         db  0x00 ; '.'
000000000020d0bb         db  0x00 ; '.'
000000000020d0bc         db  0x00 ; '.'
000000000020d0bd         db  0x00 ; '.'
000000000020d0be         db  0x00 ; '.'
000000000020d0bf         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
000000000020d0c0         db  0x00 ; '.'                                         ; DATA XREF=main+595, main+638
000000000020d0c1         db  0x00 ; '.'
000000000020d0c2         db  0x00 ; '.'
000000000020d0c3         db  0x00 ; '.'
000000000020d0c4         db  0x00 ; '.'
000000000020d0c5         db  0x00 ; '.'
000000000020d0c6         db  0x00 ; '.'
000000000020d0c7         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
000000000020d0c8         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
000000000020d0c9         db  0x00 ; '.'
000000000020d0ca         db  0x00 ; '.'
000000000020d0cb         db  0x00 ; '.'
000000000020d0cc         db  0x00 ; '.'
000000000020d0cd         db  0x00 ; '.'
000000000020d0ce         db  0x00 ; '.'
000000000020d0cf         db  0x00 ; '.'
000000000020d0d0         db  0x00 ; '.'
000000000020d0d1         db  0x00 ; '.'
000000000020d0d2         db  0x00 ; '.'
000000000020d0d3         db  0x00 ; '.'
000000000020d0d4         db  0x00 ; '.'
000000000020d0d5         db  0x00 ; '.'
000000000020d0d6         db  0x00 ; '.'
000000000020d0d7         db  0x00 ; '.'
000000000020d0d8         db  0x00 ; '.'
000000000020d0d9         db  0x00 ; '.'
000000000020d0da         db  0x00 ; '.'
000000000020d0db         db  0x00 ; '.'
000000000020d0dc         db  0x00 ; '.'
000000000020d0dd         db  0x00 ; '.'
000000000020d0de         db  0x00 ; '.'
000000000020d0df         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
000000000020d0e0         db  0x00 ; '.'                                         ; DATA XREF=usage+61, argmatch_valid+37, argmatch_valid+95, argmatch_valid+174, argmatch_valid+216, close_stdout+44, set_program_name+125
000000000020d0e1         db  0x00 ; '.'
000000000020d0e2         db  0x00 ; '.'
000000000020d0e3         db  0x00 ; '.'
000000000020d0e4         db  0x00 ; '.'
000000000020d0e5         db  0x00 ; '.'
000000000020d0e6         db  0x00 ; '.'
000000000020d0e7         db  0x00 ; '.'
                     completed.7697:
000000000020d0e8         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
000000000020d0e9         db  0x00 ; '.'
000000000020d0ea         db  0x00 ; '.'
000000000020d0eb         db  0x00 ; '.'
000000000020d0ec         db  0x00 ; '.'
000000000020d0ed         db  0x00 ; '.'
000000000020d0ee         db  0x00 ; '.'
000000000020d0ef         db  0x00 ; '.'
                     b2_length:
000000000020d0f0         db  0x00 ; '.'                                         ; DATA XREF=main+631, main+748, main+788, main+1563, main+2061, main+3035, main+3546, digest_file.isra.1+76, digest_file.isra.1+247
000000000020d0f1         db  0x00 ; '.'
000000000020d0f2         db  0x00 ; '.'
000000000020d0f3         db  0x00 ; '.'
000000000020d0f4         db  0x00 ; '.'
000000000020d0f5         db  0x00 ; '.'
000000000020d0f6         db  0x00 ; '.'
000000000020d0f7         db  0x00 ; '.'
                     b2_algorithm:
000000000020d0f8         db  0x00 ; '.'                                         ; DATA XREF=main+1548, main+2786, main+2865, main+3517, main+5004
000000000020d0f9         db  0x00 ; '.'
000000000020d0fa         db  0x00 ; '.'
000000000020d0fb         db  0x00 ; '.'
                     strict:
000000000020d0fc         db  0x00 ; '.'                                         ; DATA XREF=main+512, main+1860, main+2578
                     quiet:
000000000020d0fd         db  0x00 ; '.'                                         ; DATA XREF=main+462, main+494, main+558, main+1834, main+4681, main+4780
                     ignore_missing:
000000000020d0fe         db  0x00 ; '.'                                         ; DATA XREF=main+342, main+864, main+1786, main+2542, main+4448, digest_file.isra.1+352
                     warn:
000000000020d0ff         db  0x00 ; '.'                                         ; DATA XREF=main+455, main+487, main+551, main+890, main+1622, main+1821, main+3405
                     status_only:
000000000020d100         db  0x00 ; '.'                                         ; DATA XREF=main+448, main+480, main+544, main+877, main+1808, main+2349, main+4087, main+4190, main+4612, main+4662, main+5122
000000000020d101         db  0x00 ; '.'
000000000020d102         db  0x00 ; '.'
000000000020d103         db  0x00 ; '.'
000000000020d104         db  0x00 ; '.'
000000000020d105         db  0x00 ; '.'
000000000020d106         db  0x00 ; '.'
000000000020d107         db  0x00 ; '.'
                     digest_hex_bytes:
000000000020d108         db  0x00 ; '.'                                         ; DATA XREF=main+810, main+1579, main+1946, main+2019, main+3119, main+3172, main+3688, main+4397, main+4471, hex_digits+6
000000000020d109         db  0x00 ; '.'
000000000020d10a         db  0x00 ; '.'
000000000020d10b         db  0x00 ; '.'
000000000020d10c         db  0x00 ; '.'
000000000020d10d         db  0x00 ; '.'
000000000020d10e         db  0x00 ; '.'
000000000020d10f         db  0x00 ; '.'
                     min_digest_line_length:
000000000020d110         db  0x00 ; '.'                                         ; DATA XREF=main+755, main+1930
000000000020d111         db  0x00 ; '.'
000000000020d112         db  0x00 ; '.'
000000000020d113         db  0x00 ; '.'
000000000020d114         db  0x00 ; '.'
000000000020d115         db  0x00 ; '.'
000000000020d116         db  0x00 ; '.'
000000000020d117         db  0x00 ; '.'
                     have_read_stdin:
000000000020d118         db  0x00 ; '.'                                         ; DATA XREF=main+1084, main+2676, digest_file.isra.1+61
000000000020d119         db  0x00 ; '.'
000000000020d11a         db  0x00 ; '.'
000000000020d11b         db  0x00 ; '.'
000000000020d11c         db  0x00 ; '.'
000000000020d11d         db  0x00 ; '.'
000000000020d11e         db  0x00 ; '.'
000000000020d11f         db  0x00 ; '.'
                     ignore_EPIPE:
000000000020d120         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
000000000020d121         db  0x00 ; '.'
000000000020d122         db  0x00 ; '.'
000000000020d123         db  0x00 ; '.'
000000000020d124         db  0x00 ; '.'
000000000020d125         db  0x00 ; '.'
000000000020d126         db  0x00 ; '.'
000000000020d127         db  0x00 ; '.'
                     file_name:
000000000020d128         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
000000000020d129         db  0x00 ; '.'
000000000020d12a         db  0x00 ; '.'
000000000020d12b         db  0x00 ; '.'
000000000020d12c         db  0x00 ; '.'
000000000020d12d         db  0x00 ; '.'
000000000020d12e         db  0x00 ; '.'
000000000020d12f         db  0x00 ; '.'
                     program_name:
000000000020d130         db  0x00 ; '.'                                         ; DATA XREF=usage+20, set_program_name+109
000000000020d131         db  0x00 ; '.'
000000000020d132         db  0x00 ; '.'
000000000020d133         db  0x00 ; '.'
000000000020d134         db  0x00 ; '.'
000000000020d135         db  0x00 ; '.'
000000000020d136         db  0x00 ; '.'
000000000020d137         db  0x00 ; '.'
000000000020d138         db  0x00 ; '.'
000000000020d139         db  0x00 ; '.'
000000000020d13a         db  0x00 ; '.'
000000000020d13b         db  0x00 ; '.'
000000000020d13c         db  0x00 ; '.'
000000000020d13d         db  0x00 ; '.'
000000000020d13e         db  0x00 ; '.'
000000000020d13f         db  0x00 ; '.'
                     slot0:
000000000020d140         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
000000000020d141         db  0x00 ; '.'
000000000020d142         db  0x00 ; '.'
000000000020d143         db  0x00 ; '.'
000000000020d144         db  0x00 ; '.'
000000000020d145         db  0x00 ; '.'
000000000020d146         db  0x00 ; '.'
000000000020d147         db  0x00 ; '.'
000000000020d148         db  0x00 ; '.'
000000000020d149         db  0x00 ; '.'
000000000020d14a         db  0x00 ; '.'
000000000020d14b         db  0x00 ; '.'
000000000020d14c         db  0x00 ; '.'
000000000020d14d         db  0x00 ; '.'
000000000020d14e         db  0x00 ; '.'
000000000020d14f         db  0x00 ; '.'
000000000020d150         db  0x00 ; '.'
000000000020d151         db  0x00 ; '.'
000000000020d152         db  0x00 ; '.'
000000000020d153         db  0x00 ; '.'
000000000020d154         db  0x00 ; '.'
000000000020d155         db  0x00 ; '.'
000000000020d156         db  0x00 ; '.'
000000000020d157         db  0x00 ; '.'
000000000020d158         db  0x00 ; '.'
000000000020d159         db  0x00 ; '.'
000000000020d15a         db  0x00 ; '.'
000000000020d15b         db  0x00 ; '.'
000000000020d15c         db  0x00 ; '.'
000000000020d15d         db  0x00 ; '.'
000000000020d15e         db  0x00 ; '.'
000000000020d15f         db  0x00 ; '.'
000000000020d160         db  0x00 ; '.'
000000000020d161         db  0x00 ; '.'
000000000020d162         db  0x00 ; '.'
000000000020d163         db  0x00 ; '.'
000000000020d164         db  0x00 ; '.'
000000000020d165         db  0x00 ; '.'
000000000020d166         db  0x00 ; '.'
000000000020d167         db  0x00 ; '.'
000000000020d168         db  0x00 ; '.'
000000000020d169         db  0x00 ; '.'
000000000020d16a         db  0x00 ; '.'
000000000020d16b         db  0x00 ; '.'
000000000020d16c         db  0x00 ; '.'
000000000020d16d         db  0x00 ; '.'
000000000020d16e         db  0x00 ; '.'
000000000020d16f         db  0x00 ; '.'
000000000020d170         db  0x00 ; '.'
000000000020d171         db  0x00 ; '.'
000000000020d172         db  0x00 ; '.'
000000000020d173         db  0x00 ; '.'
000000000020d174         db  0x00 ; '.'
000000000020d175         db  0x00 ; '.'
000000000020d176         db  0x00 ; '.'
000000000020d177         db  0x00 ; '.'
000000000020d178         db  0x00 ; '.'
000000000020d179         db  0x00 ; '.'
000000000020d17a         db  0x00 ; '.'
000000000020d17b         db  0x00 ; '.'
000000000020d17c         db  0x00 ; '.'
000000000020d17d         db  0x00 ; '.'
000000000020d17e         db  0x00 ; '.'
000000000020d17f         db  0x00 ; '.'
000000000020d180         db  0x00 ; '.'
000000000020d181         db  0x00 ; '.'
000000000020d182         db  0x00 ; '.'
000000000020d183         db  0x00 ; '.'
000000000020d184         db  0x00 ; '.'
000000000020d185         db  0x00 ; '.'
000000000020d186         db  0x00 ; '.'
000000000020d187         db  0x00 ; '.'
000000000020d188         db  0x00 ; '.'
000000000020d189         db  0x00 ; '.'
000000000020d18a         db  0x00 ; '.'
000000000020d18b         db  0x00 ; '.'
000000000020d18c         db  0x00 ; '.'
000000000020d18d         db  0x00 ; '.'
000000000020d18e         db  0x00 ; '.'
000000000020d18f         db  0x00 ; '.'
000000000020d190         db  0x00 ; '.'
000000000020d191         db  0x00 ; '.'
000000000020d192         db  0x00 ; '.'
000000000020d193         db  0x00 ; '.'
000000000020d194         db  0x00 ; '.'
000000000020d195         db  0x00 ; '.'
000000000020d196         db  0x00 ; '.'
000000000020d197         db  0x00 ; '.'
000000000020d198         db  0x00 ; '.'
000000000020d199         db  0x00 ; '.'
000000000020d19a         db  0x00 ; '.'
000000000020d19b         db  0x00 ; '.'
000000000020d19c         db  0x00 ; '.'
000000000020d19d         db  0x00 ; '.'
000000000020d19e         db  0x00 ; '.'
000000000020d19f         db  0x00 ; '.'
000000000020d1a0         db  0x00 ; '.'
000000000020d1a1         db  0x00 ; '.'
000000000020d1a2         db  0x00 ; '.'
000000000020d1a3         db  0x00 ; '.'
000000000020d1a4         db  0x00 ; '.'
000000000020d1a5         db  0x00 ; '.'
000000000020d1a6         db  0x00 ; '.'
000000000020d1a7         db  0x00 ; '.'
000000000020d1a8         db  0x00 ; '.'
000000000020d1a9         db  0x00 ; '.'
000000000020d1aa         db  0x00 ; '.'
000000000020d1ab         db  0x00 ; '.'
000000000020d1ac         db  0x00 ; '.'
000000000020d1ad         db  0x00 ; '.'
000000000020d1ae         db  0x00 ; '.'
000000000020d1af         db  0x00 ; '.'
000000000020d1b0         db  0x00 ; '.'
000000000020d1b1         db  0x00 ; '.'
000000000020d1b2         db  0x00 ; '.'
000000000020d1b3         db  0x00 ; '.'
000000000020d1b4         db  0x00 ; '.'
000000000020d1b5         db  0x00 ; '.'
000000000020d1b6         db  0x00 ; '.'
000000000020d1b7         db  0x00 ; '.'
000000000020d1b8         db  0x00 ; '.'
000000000020d1b9         db  0x00 ; '.'
000000000020d1ba         db  0x00 ; '.'
000000000020d1bb         db  0x00 ; '.'
000000000020d1bc         db  0x00 ; '.'
000000000020d1bd         db  0x00 ; '.'
000000000020d1be         db  0x00 ; '.'
000000000020d1bf         db  0x00 ; '.'
000000000020d1c0         db  0x00 ; '.'
000000000020d1c1         db  0x00 ; '.'
000000000020d1c2         db  0x00 ; '.'
000000000020d1c3         db  0x00 ; '.'
000000000020d1c4         db  0x00 ; '.'
000000000020d1c5         db  0x00 ; '.'
000000000020d1c6         db  0x00 ; '.'
000000000020d1c7         db  0x00 ; '.'
000000000020d1c8         db  0x00 ; '.'
000000000020d1c9         db  0x00 ; '.'
000000000020d1ca         db  0x00 ; '.'
000000000020d1cb         db  0x00 ; '.'
000000000020d1cc         db  0x00 ; '.'
000000000020d1cd         db  0x00 ; '.'
000000000020d1ce         db  0x00 ; '.'
000000000020d1cf         db  0x00 ; '.'
000000000020d1d0         db  0x00 ; '.'
000000000020d1d1         db  0x00 ; '.'
000000000020d1d2         db  0x00 ; '.'
000000000020d1d3         db  0x00 ; '.'
000000000020d1d4         db  0x00 ; '.'
000000000020d1d5         db  0x00 ; '.'
000000000020d1d6         db  0x00 ; '.'
000000000020d1d7         db  0x00 ; '.'
000000000020d1d8         db  0x00 ; '.'
000000000020d1d9         db  0x00 ; '.'
000000000020d1da         db  0x00 ; '.'
000000000020d1db         db  0x00 ; '.'
000000000020d1dc         db  0x00 ; '.'
000000000020d1dd         db  0x00 ; '.'
000000000020d1de         db  0x00 ; '.'
000000000020d1df         db  0x00 ; '.'
000000000020d1e0         db  0x00 ; '.'
000000000020d1e1         db  0x00 ; '.'
000000000020d1e2         db  0x00 ; '.'
000000000020d1e3         db  0x00 ; '.'
000000000020d1e4         db  0x00 ; '.'
000000000020d1e5         db  0x00 ; '.'
000000000020d1e6         db  0x00 ; '.'
000000000020d1e7         db  0x00 ; '.'
000000000020d1e8         db  0x00 ; '.'
000000000020d1e9         db  0x00 ; '.'
000000000020d1ea         db  0x00 ; '.'
000000000020d1eb         db  0x00 ; '.'
000000000020d1ec         db  0x00 ; '.'
000000000020d1ed         db  0x00 ; '.'
000000000020d1ee         db  0x00 ; '.'
000000000020d1ef         db  0x00 ; '.'
000000000020d1f0         db  0x00 ; '.'
000000000020d1f1         db  0x00 ; '.'
000000000020d1f2         db  0x00 ; '.'
000000000020d1f3         db  0x00 ; '.'
000000000020d1f4         db  0x00 ; '.'
000000000020d1f5         db  0x00 ; '.'
000000000020d1f6         db  0x00 ; '.'
000000000020d1f7         db  0x00 ; '.'
000000000020d1f8         db  0x00 ; '.'
000000000020d1f9         db  0x00 ; '.'
000000000020d1fa         db  0x00 ; '.'
000000000020d1fb         db  0x00 ; '.'
000000000020d1fc         db  0x00 ; '.'
000000000020d1fd         db  0x00 ; '.'
000000000020d1fe         db  0x00 ; '.'
000000000020d1ff         db  0x00 ; '.'
000000000020d200         db  0x00 ; '.'
000000000020d201         db  0x00 ; '.'
000000000020d202         db  0x00 ; '.'
000000000020d203         db  0x00 ; '.'
000000000020d204         db  0x00 ; '.'
000000000020d205         db  0x00 ; '.'
000000000020d206         db  0x00 ; '.'
000000000020d207         db  0x00 ; '.'
000000000020d208         db  0x00 ; '.'
000000000020d209         db  0x00 ; '.'
000000000020d20a         db  0x00 ; '.'
000000000020d20b         db  0x00 ; '.'
000000000020d20c         db  0x00 ; '.'
000000000020d20d         db  0x00 ; '.'
000000000020d20e         db  0x00 ; '.'
000000000020d20f         db  0x00 ; '.'
000000000020d210         db  0x00 ; '.'
000000000020d211         db  0x00 ; '.'
000000000020d212         db  0x00 ; '.'
000000000020d213         db  0x00 ; '.'
000000000020d214         db  0x00 ; '.'
000000000020d215         db  0x00 ; '.'
000000000020d216         db  0x00 ; '.'
000000000020d217         db  0x00 ; '.'
000000000020d218         db  0x00 ; '.'
000000000020d219         db  0x00 ; '.'
000000000020d21a         db  0x00 ; '.'
000000000020d21b         db  0x00 ; '.'
000000000020d21c         db  0x00 ; '.'
000000000020d21d         db  0x00 ; '.'
000000000020d21e         db  0x00 ; '.'
000000000020d21f         db  0x00 ; '.'
000000000020d220         db  0x00 ; '.'
000000000020d221         db  0x00 ; '.'
000000000020d222         db  0x00 ; '.'
000000000020d223         db  0x00 ; '.'
000000000020d224         db  0x00 ; '.'
000000000020d225         db  0x00 ; '.'
000000000020d226         db  0x00 ; '.'
000000000020d227         db  0x00 ; '.'
000000000020d228         db  0x00 ; '.'
000000000020d229         db  0x00 ; '.'
000000000020d22a         db  0x00 ; '.'
000000000020d22b         db  0x00 ; '.'
000000000020d22c         db  0x00 ; '.'
000000000020d22d         db  0x00 ; '.'
000000000020d22e         db  0x00 ; '.'
000000000020d22f         db  0x00 ; '.'
000000000020d230         db  0x00 ; '.'
000000000020d231         db  0x00 ; '.'
000000000020d232         db  0x00 ; '.'
000000000020d233         db  0x00 ; '.'
000000000020d234         db  0x00 ; '.'
000000000020d235         db  0x00 ; '.'
000000000020d236         db  0x00 ; '.'
000000000020d237         db  0x00 ; '.'
000000000020d238         db  0x00 ; '.'
000000000020d239         db  0x00 ; '.'
000000000020d23a         db  0x00 ; '.'
000000000020d23b         db  0x00 ; '.'
000000000020d23c         db  0x00 ; '.'
000000000020d23d         db  0x00 ; '.'
000000000020d23e         db  0x00 ; '.'
000000000020d23f         db  0x00 ; '.'
                     default_quoting_options:
000000000020d240         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
000000000020d241         db  0x00 ; '.'
000000000020d242         db  0x00 ; '.'
000000000020d243         db  0x00 ; '.'
000000000020d244         db  0x00 ; '.'
000000000020d245         db  0x00 ; '.'
000000000020d246         db  0x00 ; '.'
000000000020d247         db  0x00 ; '.'
000000000020d248         db  0x00 ; '.'
000000000020d249         db  0x00 ; '.'
000000000020d24a         db  0x00 ; '.'
000000000020d24b         db  0x00 ; '.'
000000000020d24c         db  0x00 ; '.'
000000000020d24d         db  0x00 ; '.'
000000000020d24e         db  0x00 ; '.'
000000000020d24f         db  0x00 ; '.'
000000000020d250         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
000000000020d251         db  0x00 ; '.'
000000000020d252         db  0x00 ; '.'
000000000020d253         db  0x00 ; '.'
000000000020d254         db  0x00 ; '.'
000000000020d255         db  0x00 ; '.'
000000000020d256         db  0x00 ; '.'
000000000020d257         db  0x00 ; '.'
000000000020d258         db  0x00 ; '.'
000000000020d259         db  0x00 ; '.'
000000000020d25a         db  0x00 ; '.'
000000000020d25b         db  0x00 ; '.'
000000000020d25c         db  0x00 ; '.'
000000000020d25d         db  0x00 ; '.'
000000000020d25e         db  0x00 ; '.'
000000000020d25f         db  0x00 ; '.'
000000000020d260         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
000000000020d261         db  0x00 ; '.'
000000000020d262         db  0x00 ; '.'
000000000020d263         db  0x00 ; '.'
000000000020d264         db  0x00 ; '.'
000000000020d265         db  0x00 ; '.'
000000000020d266         db  0x00 ; '.'
000000000020d267         db  0x00 ; '.'
000000000020d268         db  0x00 ; '.'
000000000020d269         db  0x00 ; '.'
000000000020d26a         db  0x00 ; '.'
000000000020d26b         db  0x00 ; '.'
000000000020d26c         db  0x00 ; '.'
000000000020d26d         db  0x00 ; '.'
000000000020d26e         db  0x00 ; '.'
000000000020d26f         db  0x00 ; '.'
                     qword_20d270:
000000000020d270         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
000000000020d271         db  0x00 ; '.'
000000000020d272         db  0x00 ; '.'
000000000020d273         db  0x00 ; '.'
000000000020d274         db  0x00 ; '.'
000000000020d275         db  0x00 ; '.'
000000000020d276         db  0x00 ; '.'
000000000020d277         db  0x00 ; '.'
                     have_dupfd_cloexec.3326:
000000000020d278         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+94, rpl_fcntl+143, rpl_fcntl+438, rpl_fcntl+574
000000000020d279         db  0x00 ; '.'
000000000020d27a         db  0x00 ; '.'
000000000020d27b         db  0x00 ; '.'
000000000020d27c         db  0x00 ; '.'
000000000020d27d         db  0x00 ; '.'
000000000020d27e         db  0x00 ; '.'
000000000020d27f         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x20d290; 0x20d690[ (1024 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x20d290; 0x41a920[ (2152080 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     free:
000000000020d290         extern function code                                   ; DATA XREF=free@GOT
                     abort:
000000000020d298         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
000000000020d2a0         extern function code                                   ; DATA XREF=__errno_location@GOT
                     strncmp:
000000000020d2a8         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
000000000020d2b0         extern function code
                     _exit:
000000000020d2b8         extern function code                                   ; DATA XREF=_exit@GOT
                     __fpending:
000000000020d2c0         extern function code                                   ; DATA XREF=__fpending@GOT
                     ferror:
000000000020d2c8         extern function code                                   ; DATA XREF=ferror@GOT
                     fread:
000000000020d2d0         extern function code                                   ; DATA XREF=fread@GOT
                     fcntl:
000000000020d2d8         extern function code                                   ; DATA XREF=fcntl@GOT
                     textdomain:
000000000020d2e0         extern function code                                   ; DATA XREF=textdomain@GOT
                     fclose:
000000000020d2e8         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
000000000020d2f0         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
000000000020d2f8         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
000000000020d300         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
000000000020d308         extern function code                                   ; DATA XREF=strlen@GOT
                     __stack_chk_fail:
000000000020d310         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
000000000020d318         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
000000000020d320         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     strchr:
000000000020d328         extern function code                                   ; DATA XREF=strchr@GOT
                     __overflow:
000000000020d330         extern function code                                   ; DATA XREF=__overflow@GOT
                     strrchr:
000000000020d338         extern function code                                   ; DATA XREF=strrchr@GOT
                     lseek:
000000000020d340         extern function code                                   ; DATA XREF=lseek@GOT
                     __assert_fail:
000000000020d348         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     __strtoul_internal:
000000000020d350         extern function code                                   ; DATA XREF=__strtoul_internal@GOT
                     memset:
000000000020d358         extern function code                                   ; DATA XREF=memset@GOT
                     close:
000000000020d360         extern function code                                   ; DATA XREF=close@GOT
                     posix_fadvise:
000000000020d368         extern function code                                   ; DATA XREF=posix_fadvise@GOT
                     __libc_start_main:
000000000020d370         extern function code
                     memcmp:
000000000020d378         extern function code                                   ; DATA XREF=memcmp@GOT
                     fputs_unlocked:
000000000020d380         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
000000000020d388         extern function code                                   ; DATA XREF=calloc@GOT
                     __getdelim:
000000000020d390         extern function code                                   ; DATA XREF=__getdelim@GOT
                     strcmp:
000000000020d398         extern function code                                   ; DATA XREF=strcmp@GOT
                     __memcpy_chk:
000000000020d3a0         extern function code                                   ; DATA XREF=__memcpy_chk@GOT
                     feof:
000000000020d3a8         extern function code                                   ; DATA XREF=feof@GOT
                     __gmon_start__:
000000000020d3b0         extern function code
                     memcpy:
000000000020d3b8         extern function code                                   ; DATA XREF=memcpy@GOT
                     fileno:
000000000020d3c0         extern function code                                   ; DATA XREF=fileno@GOT
                     malloc:
000000000020d3c8         extern function code                                   ; DATA XREF=malloc@GOT
                     fflush:
000000000020d3d0         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
000000000020d3d8         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     __freading:
000000000020d3e0         extern function code                                   ; DATA XREF=__freading@GOT
                     fwrite_unlocked:
000000000020d3e8         extern function code                                   ; DATA XREF=fwrite_unlocked@GOT
                     realloc:
000000000020d3f0         extern function code                                   ; DATA XREF=realloc@GOT
                     fdopen:
000000000020d3f8         extern function code                                   ; DATA XREF=fdopen@GOT
                     setlocale:
000000000020d400         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
000000000020d408         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     setvbuf:
000000000020d410         extern function code                                   ; DATA XREF=setvbuf@GOT
                     error:
000000000020d418         extern function code                                   ; DATA XREF=error@GOT
                     fseeko:
000000000020d420         extern function code                                   ; DATA XREF=fseeko@GOT
                     fopen:
000000000020d428         extern function code                                   ; DATA XREF=fopen@GOT
                     dcngettext:
000000000020d430         extern function code                                   ; DATA XREF=dcngettext@GOT
                     strtoul:
000000000020d438         extern function code                                   ; DATA XREF=strtoul@GOT
                     __cxa_atexit:
000000000020d440         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     exit:
000000000020d448         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
000000000020d450         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
000000000020d458         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
000000000020d460         extern function code
                     mbsinit:
000000000020d468         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
000000000020d470         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
000000000020d478         extern function code
                     __ctype_tolower_loc:
000000000020d480         extern function code                                   ; DATA XREF=__ctype_tolower_loc@GOT
                     __ctype_b_loc:
000000000020d488         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     free@@GLIBC_2.2.5:
000000000020d490         extern function code
                     abort@@GLIBC_2.2.5:
000000000020d498         extern function code
                     __errno_location@@GLIBC_2.2.5:
000000000020d4a0         extern function code
                     strncmp@@GLIBC_2.2.5:
000000000020d4a8         extern function code
                     _ITM_deregisterTMCloneTable_20d4b0:        // _ITM_deregisterTMCloneTable
000000000020d4b0         extern function code
                     _exit@@GLIBC_2.2.5:
000000000020d4b8         extern function code
                     __fpending@@GLIBC_2.2.5:
000000000020d4c0         extern function code
                     ferror@@GLIBC_2.2.5:
000000000020d4c8         extern function code
                     fread@@GLIBC_2.2.5:
000000000020d4d0         extern function code
                     fcntl@@GLIBC_2.2.5:
000000000020d4d8         extern function code
                     textdomain@@GLIBC_2.2.5:
000000000020d4e0         extern function code
                     fclose@@GLIBC_2.2.5:
000000000020d4e8         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
000000000020d4f0         extern function code
                     dcgettext@@GLIBC_2.2.5:
000000000020d4f8         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
000000000020d500         extern function code
                     strlen@@GLIBC_2.2.5:
000000000020d508         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
000000000020d510         extern function code
                     getopt_long@@GLIBC_2.2.5:
000000000020d518         extern function code
                     mbrtowc@@GLIBC_2.2.5:
000000000020d520         extern function code
                     strchr@@GLIBC_2.2.5:
000000000020d528         extern function code
                     __overflow@@GLIBC_2.2.5:
000000000020d530         extern function code
                     strrchr@@GLIBC_2.2.5:
000000000020d538         extern function code
                     lseek@@GLIBC_2.2.5:
000000000020d540         extern function code
                     __assert_fail@@GLIBC_2.2.5:
000000000020d548         extern function code
                     __strtoul_internal@@GLIBC_2.2.5:
000000000020d550         extern function code
                     memset@@GLIBC_2.2.5:
000000000020d558         extern function code
                     close@@GLIBC_2.2.5:
000000000020d560         extern function code
                     posix_fadvise@@GLIBC_2.2.5:
000000000020d568         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
000000000020d570         extern function code
                     memcmp@@GLIBC_2.2.5:
000000000020d578         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
000000000020d580         extern function code
                     calloc@@GLIBC_2.2.5:
000000000020d588         extern function code
                     __getdelim@@GLIBC_2.2.5:
000000000020d590         extern function code
                     strcmp@@GLIBC_2.2.5:
000000000020d598         extern function code
                     __memcpy_chk@@GLIBC_2.3.4:
000000000020d5a0         extern function code
                     feof@@GLIBC_2.2.5:
000000000020d5a8         extern function code
                     __gmon_start___20d5b0:        // __gmon_start__
000000000020d5b0         extern function code
                     memcpy@@GLIBC_2.14:
000000000020d5b8         extern function code
                     fileno@@GLIBC_2.2.5:
000000000020d5c0         extern function code
                     malloc@@GLIBC_2.2.5:
000000000020d5c8         extern function code
                     fflush@@GLIBC_2.2.5:
000000000020d5d0         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
000000000020d5d8         extern function code
                     __freading@@GLIBC_2.2.5:
000000000020d5e0         extern function code
                     fwrite_unlocked@@GLIBC_2.2.5:
000000000020d5e8         extern function code
                     realloc@@GLIBC_2.2.5:
000000000020d5f0         extern function code
                     fdopen@@GLIBC_2.2.5:
000000000020d5f8         extern function code
                     setlocale@@GLIBC_2.2.5:
000000000020d600         extern function code
                     __printf_chk@@GLIBC_2.3.4:
000000000020d608         extern function code
                     setvbuf@@GLIBC_2.2.5:
000000000020d610         extern function code
                     error@@GLIBC_2.2.5:
000000000020d618         extern function code
                     fseeko@@GLIBC_2.2.5:
000000000020d620         extern function code
                     fopen@@GLIBC_2.2.5:
000000000020d628         extern function code
                     dcngettext@@GLIBC_2.2.5:
000000000020d630         extern function code
                     strtoul@@GLIBC_2.2.5:
000000000020d638         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
000000000020d640         extern function code
                     exit@@GLIBC_2.2.5:
000000000020d648         extern function code
                     fwrite@@GLIBC_2.2.5:
000000000020d650         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
000000000020d658         extern function code
                     _ITM_registerTMCloneTable_20d660:        // _ITM_registerTMCloneTable
000000000020d660         extern function code
                     mbsinit@@GLIBC_2.2.5:
000000000020d668         extern function code
                     iswprint@@GLIBC_2.2.5:
000000000020d670         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
000000000020d678         extern function code
                     __ctype_tolower_loc@@GLIBC_2.3:
000000000020d680         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
000000000020d688         extern function code
