
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/shuf
        UUID: 218E2373-4640-E144-562E-2B13F8C2153E
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0xbca0[ (48288 bytes)
        ; File offset : [0; 48288[ (48288 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0x40 ; '@'
0000000000000019         db  0x2c ; ','
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0xb8 ; '.'
0000000000000029         db  0x5e ; '^'
000000000000002a         db  0x04 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0xa0 ; '.'
00000000000000d1         db  0xbc ; '.'
00000000000000d2         db  0x00 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0xa0 ; '.'
00000000000000d9         db  0xbc ; '.'
00000000000000da         db  0x00 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0xf0 ; '.'
00000000000000f1         db  0xc9 ; '.'
00000000000000f2         db  0x00 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0xf0 ; '.'
00000000000000f9         db  0xc9 ; '.'
00000000000000fa         db  0x20 ; ' '
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0xf0 ; '.'                                         ; DATA XREF=quotearg_free+87, rpl_fflush+18, slotvec0
0000000000000101         db  0xc9 ; '.'
0000000000000102         db  0x20 ; ' '
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0x90 ; '.'
0000000000000109         db  0x06 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0x50 ; 'P'
0000000000000111         db  0x08 ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'                                         ; DATA XREF=main+31, main+1647
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0x98 ; '.'
0000000000000129         db  0xcb ; '.'
000000000000012a         db  0x00 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0x98 ; '.'
0000000000000131         db  0xcb ; '.'
0000000000000132         db  0x20 ; ' '
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0x98 ; '.'
0000000000000139         db  0xcb ; '.'
000000000000013a         db  0x20 ; ' '
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0xf8 ; '.'
0000000000000199         db  0xa2 ; '.'
000000000000019a         db  0x00 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0xf8 ; '.'
00000000000001a1         db  0xa2 ; '.'
00000000000001a2         db  0x00 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0xf8 ; '.'
00000000000001a9         db  0xa2 ; '.'
00000000000001aa         db  0x00 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0x3c ; '<'
00000000000001b1         db  0x04 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0x3c ; '<'
00000000000001b9         db  0x04 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=xstrtoul+573, xstrtoumax+573
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0xf0 ; '.'
0000000000000209         db  0xc9 ; '.'
000000000000020a         db  0x00 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0xf0 ; '.'
0000000000000211         db  0xc9 ; '.'
0000000000000212         db  0x20 ; ' '
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0xf0 ; '.'
0000000000000219         db  0xc9 ; '.'
000000000000021a         db  0x20 ; ' '
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x10 ; '.'
0000000000000221         db  0x06 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x10 ; '.'
0000000000000229         db  0x06 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0x21 ; '!'
0000000000000285         db  0x8e ; '.'
0000000000000286         db  0x23 ; '#'
0000000000000287         db  0x73 ; 's'
0000000000000288         db  0x46 ; 'F'
0000000000000289         db  0x40 ; '@'
000000000000028a         db  0xe1 ; '.'
000000000000028b         db  0x44 ; 'D'
000000000000028c         db  0x56 ; 'V'
000000000000028d         db  0x2e ; '.'
000000000000028e         db  0x2b ; '+'
000000000000028f         db  0x13 ; '.'
0000000000000290         db  0xf8 ; '.'
0000000000000291         db  0xc2 ; '.'
0000000000000292         db  0x15 ; '.'
0000000000000293         db  0x3e ; '>'
0000000000000294         db  0xf4 ; '.'
0000000000000295         db  0xff ; '.'
0000000000000296         db  0x8f ; '.'
0000000000000297         db  0xcb ; '.'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2e0[ (72 bytes)
        ; File offset : [664; 736[ (72 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x4b ; 'K'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x61 ; 'a'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0xa0 ; '.'
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x4b ; 'K'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x4c ; 'L'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x52 ; 'R'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x66 ; 'f'
00000000000002c5         db  0x55 ; 'U'
00000000000002c6         db  0x61 ; 'a'
00000000000002c7         db  0x10 ; '.'
00000000000002c8         db  0x96 ; '.'
00000000000002c9         db  0xa0 ; '.'
00000000000002ca         db  0x89 ; '.'
00000000000002cb         db  0x97 ; '.'
00000000000002cc         db  0xce ; '.'
00000000000002cd         db  0x2c ; ','
00000000000002ce         db  0x63 ; 'c'
00000000000002cf         db  0x72 ; 'r'
00000000000002d0         db  0xe4 ; '.'
00000000000002d1         db  0x62 ; 'b'
00000000000002d2         db  0x41 ; 'A'
00000000000002d3         db  0xf5 ; '.'
00000000000002d4         db  0x39 ; '9'
00000000000002d5         db  0xf2 ; '.'
00000000000002d6         db  0x8b ; '.'
00000000000002d7         db  0x1c ; '.'
00000000000002d8         db  0x32 ; '2'
00000000000002d9         db  0xc4 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0xb3 ; '.'
00000000000002dd         db  0xa2 ; '.'
00000000000002de         db  0xf7 ; '.'
00000000000002df         db  0x12 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0xac0[ (2016 bytes)
        ; File offset : [736; 2752[ (2016 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0x87 ; '.'
00000000000002f9         db  0x01 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'
0000000000000310         db  0xdf ; '.'
0000000000000311         db  0x02 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0x85 ; '.'
0000000000000329         db  0x00 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0x1c ; '.'
0000000000000341         db  0x01 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x37 ; '7'
0000000000000359         db  0x00 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0x4e ; 'N'
0000000000000371         db  0x03 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x20 ; ' '
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0x91 ; '.'
0000000000000389         db  0x00 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x71 ; 'q'
00000000000003a1         db  0x01 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x12 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0x1c ; '.'
00000000000003b9         db  0x02 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x12 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x58 ; 'X'
00000000000003d1         db  0x00 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0xa8 ; '.'                                         ; DATA XREF=xstrtoul+420, xstrtoumax+420
00000000000003e9         db  0x02 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'
0000000000000400         db  0xf4 ; '.'                                         ; DATA XREF=main+1140, main+1147, main+1258, xstrtoul+437, xstrtoul+806, xstrtoul+878, xstrtoumax+437, xstrtoumax+806, xstrtoumax+878, rpl_fcntl+288
0000000000000401         db  0x01 ; '.'                                         ; DATA XREF=rpl_fcntl+272
0000000000000402         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+280
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+81, rpl_fcntl+123, rpl_fcntl+264
0000000000000407         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+256
0000000000000408         db  0x00 ; '.'
0000000000000409         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+336
000000000000040a         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+350
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x6a ; 'j'
0000000000000419         db  0x02 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x9e ; '.'
0000000000000431         db  0x00 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0x06 ; '.'
0000000000000449         db  0x01 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0x74 ; 't'
0000000000000461         db  0x02 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x5b ; '['
0000000000000479         db  0x01 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0x70 ; 'p'
0000000000000491         db  0x02 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0xaf ; '.'
00000000000004a9         db  0x02 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0x4e ; 'N'
00000000000004c1         db  0x00 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0xcb ; '.'
00000000000004d9         db  0x00 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0xff ; '.'
00000000000004f1         db  0x00 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x63 ; 'c'
0000000000000509         db  0x00 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0xc2 ; '.'
0000000000000521         db  0x01 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0xc9 ; '.'
0000000000000539         db  0x01 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x29 ; ')'
0000000000000551         db  0x00 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x34 ; '4'
0000000000000569         db  0x01 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0x27 ; '''
0000000000000581         db  0x02 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x46 ; 'F'
0000000000000599         db  0x00 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'
00000000000005b0         db  0x4e ; 'N'
00000000000005b1         db  0x01 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0xfa ; '.'
00000000000005c9         db  0x01 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0xbd ; '.'
00000000000005e1         db  0x00 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0xbd ; '.'
00000000000005f9         db  0x02 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x15 ; '.'
0000000000000611         db  0x01 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0xd5 ; '.'
0000000000000629         db  0x01 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x5c ; '\'
0000000000000641         db  0x01 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0xe2 ; '.'
0000000000000659         db  0x00 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0x97 ; '.'
0000000000000671         db  0x00 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x96 ; '.'
0000000000000689         db  0x02 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0x2d ; '-'
00000000000006a1         db  0x01 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0xd0 ; '.'
00000000000006b9         db  0x02 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x12 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0xf8 ; '.'
00000000000006d1         db  0x00 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0x8f ; '.'
00000000000006e9         db  0x02 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x6a ; 'j'
0000000000000701         db  0x03 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x20 ; ' '
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x54 ; 'T'
0000000000000719         db  0x01 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0xe6 ; '.'
0000000000000731         db  0x01 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x80 ; '.'
0000000000000749         db  0x01 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x6a ; 'j'
0000000000000761         db  0x01 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0x0b ; '.'
0000000000000779         db  0x00 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x8f ; '.'
0000000000000791         db  0x01 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0xdd ; '.'
00000000000007a9         db  0x01 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0xb0 ; '.'
00000000000007c1         db  0x01 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0x7f ; '.'
00000000000007d9         db  0x02 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0x7d ; '}'
00000000000007f1         db  0x00 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'                                         ; DATA XREF=isaac_refill+74, isaac_refill+108, isaac_refill+141, isaac_refill+175, isaac_refill+207, isaac_refill+234, isaac_refill+275, isaac_refill+311, isaac_refill+378, isaac_refill+412, isaac_refill+445
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'                                         ; DATA XREF=randread_new+296, randread_new+495, randread_new+648, randread_new+735, randread_new+786, randread+200, randread+223
0000000000000800         db  0x00 ; '.'                                         ; DATA XREF=randread_new+250, randread_new+260, randread_new+431, randread_new+517, randread+165, randread+245, randread+258, randread+312, randread+323, randread+336
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0x4c ; 'L'
0000000000000809         db  0x02 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0x1f ; '.'
0000000000000821         db  0x00 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0x12 ; '.'
0000000000000839         db  0x00 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x62 ; 'b'
0000000000000851         db  0x02 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x12 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0xa9 ; '.'
0000000000000869         db  0x02 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x07 ; '.'
0000000000000881         db  0x02 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0x4e ; 'N'
0000000000000899         db  0x02 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x12 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0xb6 ; '.'
00000000000008b1         db  0x02 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0x31 ; '1'
00000000000008c9         db  0x00 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0x62 ; 'b'
00000000000008e1         db  0x01 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x12 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x00 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x00 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x00 ; '.'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x00 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0xff ; '.'
00000000000008f9         db  0x02 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x12 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x00 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0x00 ; '.'
0000000000000901         db  0x00 ; '.'
0000000000000902         db  0x00 ; '.'
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x00 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0xf0 ; '.'
0000000000000911         db  0x00 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x12 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x00 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0x00 ; '.'
0000000000000919         db  0x00 ; '.'
000000000000091a         db  0x00 ; '.'
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x00 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0x92 ; '.'
0000000000000929         db  0x00 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x12 ; '.'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x00 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0x00 ; '.'
0000000000000931         db  0x00 ; '.'
0000000000000932         db  0x00 ; '.'
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x00 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0xed ; '.'
0000000000000941         db  0x01 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x12 ; '.'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x00 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0x00 ; '.'
0000000000000949         db  0x00 ; '.'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x00 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0x39 ; '9'
0000000000000959         db  0x01 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x12 ; '.'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x00 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0x00 ; '.'
0000000000000961         db  0x00 ; '.'
0000000000000962         db  0x00 ; '.'
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x00 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0x79 ; 'y'
0000000000000971         db  0x03 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x20 ; ' '
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x00 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x00 ; '.'
0000000000000979         db  0x00 ; '.'
000000000000097a         db  0x00 ; '.'
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x00 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0x78 ; 'x'
0000000000000989         db  0x01 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x12 ; '.'
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x00 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0x00 ; '.'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x00 ; '.'
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x00 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0x74 ; 't'
00000000000009a1         db  0x00 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x12 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x00 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0x00 ; '.'
00000000000009a9         db  0x00 ; '.'
00000000000009aa         db  0x00 ; '.'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x00 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'
00000000000009b8         db  0x53 ; 'S'
00000000000009b9         db  0x02 ; '.'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x00 ; '.'
00000000000009bc         db  0x22 ; '"'
00000000000009bd         db  0x00 ; '.'
00000000000009be         db  0x00 ; '.'
00000000000009bf         db  0x00 ; '.'
00000000000009c0         db  0x00 ; '.'
00000000000009c1         db  0x00 ; '.'
00000000000009c2         db  0x00 ; '.'
00000000000009c3         db  0x00 ; '.'
00000000000009c4         db  0x00 ; '.'
00000000000009c5         db  0x00 ; '.'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x00 ; '.'
00000000000009c8         db  0x00 ; '.'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x00 ; '.'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x00 ; '.'
00000000000009cd         db  0x00 ; '.'
00000000000009ce         db  0x00 ; '.'
00000000000009cf         db  0x00 ; '.'
00000000000009d0         db  0x9b ; '.'
00000000000009d1         db  0x01 ; '.'
00000000000009d2         db  0x00 ; '.'
00000000000009d3         db  0x00 ; '.'
00000000000009d4         db  0x12 ; '.'
00000000000009d5         db  0x00 ; '.'
00000000000009d6         db  0x00 ; '.'
00000000000009d7         db  0x00 ; '.'
00000000000009d8         db  0x00 ; '.'
00000000000009d9         db  0x00 ; '.'
00000000000009da         db  0x00 ; '.'
00000000000009db         db  0x00 ; '.'
00000000000009dc         db  0x00 ; '.'
00000000000009dd         db  0x00 ; '.'
00000000000009de         db  0x00 ; '.'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x00 ; '.'
00000000000009e1         db  0x00 ; '.'
00000000000009e2         db  0x00 ; '.'
00000000000009e3         db  0x00 ; '.'
00000000000009e4         db  0x00 ; '.'
00000000000009e5         db  0x00 ; '.'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x00 ; '.'
00000000000009e8         db  0x47 ; 'G'
00000000000009e9         db  0x01 ; '.'
00000000000009ea         db  0x00 ; '.'
00000000000009eb         db  0x00 ; '.'
00000000000009ec         db  0x11 ; '.'
00000000000009ed         db  0x00 ; '.'
00000000000009ee         db  0x19 ; '.'
00000000000009ef         db  0x00 ; '.'
00000000000009f0         db  0x88 ; '.'
00000000000009f1         db  0xd0 ; '.'
00000000000009f2         db  0x20 ; ' '
00000000000009f3         db  0x00 ; '.'
00000000000009f4         db  0x00 ; '.'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x00 ; '.'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x08 ; '.'
00000000000009f9         db  0x00 ; '.'
00000000000009fa         db  0x00 ; '.'
00000000000009fb         db  0x00 ; '.'
00000000000009fc         db  0x00 ; '.'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x00 ; '.'
00000000000009ff         db  0x00 ; '.'
0000000000000a00         db  0xe4 ; '.'
0000000000000a01         db  0x02 ; '.'
0000000000000a02         db  0x00 ; '.'
0000000000000a03         db  0x00 ; '.'
0000000000000a04         db  0x11 ; '.'
0000000000000a05         db  0x00 ; '.'
0000000000000a06         db  0x19 ; '.'
0000000000000a07         db  0x00 ; '.'
0000000000000a08         db  0x80 ; '.'
0000000000000a09         db  0xd0 ; '.'
0000000000000a0a         db  0x20 ; ' '
0000000000000a0b         db  0x00 ; '.'
0000000000000a0c         db  0x00 ; '.'
0000000000000a0d         db  0x00 ; '.'
0000000000000a0e         db  0x00 ; '.'
0000000000000a0f         db  0x00 ; '.'
0000000000000a10         db  0x08 ; '.'
0000000000000a11         db  0x00 ; '.'
0000000000000a12         db  0x00 ; '.'
0000000000000a13         db  0x00 ; '.'
0000000000000a14         db  0x00 ; '.'
0000000000000a15         db  0x00 ; '.'
0000000000000a16         db  0x00 ; '.'
0000000000000a17         db  0x00 ; '.'
0000000000000a18         db  0x8b ; '.'
0000000000000a19         db  0x00 ; '.'
0000000000000a1a         db  0x00 ; '.'
0000000000000a1b         db  0x00 ; '.'
0000000000000a1c         db  0x11 ; '.'
0000000000000a1d         db  0x00 ; '.'
0000000000000a1e         db  0x19 ; '.'
0000000000000a1f         db  0x00 ; '.'
0000000000000a20         db  0x90 ; '.'
0000000000000a21         db  0xd0 ; '.'
0000000000000a22         db  0x20 ; ' '
0000000000000a23         db  0x00 ; '.'
0000000000000a24         db  0x00 ; '.'
0000000000000a25         db  0x00 ; '.'
0000000000000a26         db  0x00 ; '.'
0000000000000a27         db  0x00 ; '.'
0000000000000a28         db  0x08 ; '.'
0000000000000a29         db  0x00 ; '.'
0000000000000a2a         db  0x00 ; '.'
0000000000000a2b         db  0x00 ; '.'
0000000000000a2c         db  0x00 ; '.'
0000000000000a2d         db  0x00 ; '.'
0000000000000a2e         db  0x00 ; '.'
0000000000000a2f         db  0x00 ; '.'
0000000000000a30         db  0xa5 ; '.'
0000000000000a31         db  0x00 ; '.'
0000000000000a32         db  0x00 ; '.'
0000000000000a33         db  0x00 ; '.'
0000000000000a34         db  0x21 ; '!'
0000000000000a35         db  0x00 ; '.'
0000000000000a36         db  0x19 ; '.'
0000000000000a37         db  0x00 ; '.'
0000000000000a38         db  0xa8 ; '.'
0000000000000a39         db  0xd0 ; '.'
0000000000000a3a         db  0x20 ; ' '
0000000000000a3b         db  0x00 ; '.'
0000000000000a3c         db  0x00 ; '.'
0000000000000a3d         db  0x00 ; '.'
0000000000000a3e         db  0x00 ; '.'
0000000000000a3f         db  0x00 ; '.'
0000000000000a40         db  0x08 ; '.'
0000000000000a41         db  0x00 ; '.'
0000000000000a42         db  0x00 ; '.'
0000000000000a43         db  0x00 ; '.'
0000000000000a44         db  0x00 ; '.'
0000000000000a45         db  0x00 ; '.'
0000000000000a46         db  0x00 ; '.'
0000000000000a47         db  0x00 ; '.'
0000000000000a48         db  0xef ; '.'
0000000000000a49         db  0x02 ; '.'
0000000000000a4a         db  0x00 ; '.'
0000000000000a4b         db  0x00 ; '.'
0000000000000a4c         db  0x11 ; '.'
0000000000000a4d         db  0x00 ; '.'
0000000000000a4e         db  0x19 ; '.'
0000000000000a4f         db  0x00 ; '.'
0000000000000a50         db  0xa8 ; '.'
0000000000000a51         db  0xd0 ; '.'
0000000000000a52         db  0x20 ; ' '
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x00 ; '.'
0000000000000a55         db  0x00 ; '.'
0000000000000a56         db  0x00 ; '.'
0000000000000a57         db  0x00 ; '.'
0000000000000a58         db  0x08 ; '.'
0000000000000a59         db  0x00 ; '.'
0000000000000a5a         db  0x00 ; '.'
0000000000000a5b         db  0x00 ; '.'
0000000000000a5c         db  0x00 ; '.'
0000000000000a5d         db  0x00 ; '.'
0000000000000a5e         db  0x00 ; '.'
0000000000000a5f         db  0x00 ; '.'
0000000000000a60         db  0x2e ; '.'
0000000000000a61         db  0x02 ; '.'
0000000000000a62         db  0x00 ; '.'
0000000000000a63         db  0x00 ; '.'
0000000000000a64         db  0x21 ; '!'
0000000000000a65         db  0x00 ; '.'
0000000000000a66         db  0x19 ; '.'
0000000000000a67         db  0x00 ; '.'
0000000000000a68         db  0x80 ; '.'
0000000000000a69         db  0xd0 ; '.'
0000000000000a6a         db  0x20 ; ' '
0000000000000a6b         db  0x00 ; '.'
0000000000000a6c         db  0x00 ; '.'
0000000000000a6d         db  0x00 ; '.'
0000000000000a6e         db  0x00 ; '.'
0000000000000a6f         db  0x00 ; '.'
0000000000000a70         db  0x08 ; '.'
0000000000000a71         db  0x00 ; '.'
0000000000000a72         db  0x00 ; '.'
0000000000000a73         db  0x00 ; '.'
0000000000000a74         db  0x00 ; '.'
0000000000000a75         db  0x00 ; '.'
0000000000000a76         db  0x00 ; '.'
0000000000000a77         db  0x00 ; '.'
0000000000000a78         db  0xbb ; '.'
0000000000000a79         db  0x01 ; '.'
0000000000000a7a         db  0x00 ; '.'
0000000000000a7b         db  0x00 ; '.'
0000000000000a7c         db  0x11 ; '.'
0000000000000a7d         db  0x00 ; '.'
0000000000000a7e         db  0x19 ; '.'
0000000000000a7f         db  0x00 ; '.'
0000000000000a80         db  0xc0 ; '.'
0000000000000a81         db  0xd0 ; '.'
0000000000000a82         db  0x20 ; ' '
0000000000000a83         db  0x00 ; '.'
0000000000000a84         db  0x00 ; '.'
0000000000000a85         db  0x00 ; '.'
0000000000000a86         db  0x00 ; '.'
0000000000000a87         db  0x00 ; '.'
0000000000000a88         db  0x08 ; '.'
0000000000000a89         db  0x00 ; '.'
0000000000000a8a         db  0x00 ; '.'
0000000000000a8b         db  0x00 ; '.'
0000000000000a8c         db  0x00 ; '.'
0000000000000a8d         db  0x00 ; '.'
0000000000000a8e         db  0x00 ; '.'
0000000000000a8f         db  0x00 ; '.'
0000000000000a90         db  0x3f ; '?'
0000000000000a91         db  0x00 ; '.'
0000000000000a92         db  0x00 ; '.'
0000000000000a93         db  0x00 ; '.'
0000000000000a94         db  0x11 ; '.'
0000000000000a95         db  0x00 ; '.'
0000000000000a96         db  0x19 ; '.'
0000000000000a97         db  0x00 ; '.'
0000000000000a98         db  0x98 ; '.'
0000000000000a99         db  0xd0 ; '.'
0000000000000a9a         db  0x20 ; ' '
0000000000000a9b         db  0x00 ; '.'
0000000000000a9c         db  0x00 ; '.'
0000000000000a9d         db  0x00 ; '.'
0000000000000a9e         db  0x00 ; '.'
0000000000000a9f         db  0x00 ; '.'
0000000000000aa0         db  0x04 ; '.'
0000000000000aa1         db  0x00 ; '.'
0000000000000aa2         db  0x00 ; '.'
0000000000000aa3         db  0x00 ; '.'
0000000000000aa4         db  0x00 ; '.'
0000000000000aa5         db  0x00 ; '.'
0000000000000aa6         db  0x00 ; '.'
0000000000000aa7         db  0x00 ; '.'
0000000000000aa8         db  0xa9 ; '.'
0000000000000aa9         db  0x01 ; '.'
0000000000000aaa         db  0x00 ; '.'
0000000000000aab         db  0x00 ; '.'
0000000000000aac         db  0x11 ; '.'
0000000000000aad         db  0x00 ; '.'
0000000000000aae         db  0x19 ; '.'
0000000000000aaf         db  0x00 ; '.'
0000000000000ab0         db  0xa0 ; '.'
0000000000000ab1         db  0xd0 ; '.'
0000000000000ab2         db  0x20 ; ' '
0000000000000ab3         db  0x00 ; '.'
0000000000000ab4         db  0x00 ; '.'
0000000000000ab5         db  0x00 ; '.'
0000000000000ab6         db  0x00 ; '.'
0000000000000ab7         db  0x00 ; '.'
0000000000000ab8         db  0x08 ; '.'
0000000000000ab9         db  0x00 ; '.'
0000000000000aba         db  0x00 ; '.'
0000000000000abb         db  0x00 ; '.'
0000000000000abc         db  0x00 ; '.'
0000000000000abd         db  0x00 ; '.'
0000000000000abe         db  0x00 ; '.'
0000000000000abf         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0xac0; 0xe53[ (915 bytes)
        ; File offset : [2752; 3667[ (915 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000ac0         db  0x00 ; '.'
0000000000000ac1         db  0x6c ; 'l'
0000000000000ac2         db  0x69 ; 'i'
0000000000000ac3         db  0x62 ; 'b'
0000000000000ac4         db  0x63 ; 'c'
0000000000000ac5         db  0x2e ; '.'
0000000000000ac6         db  0x73 ; 's'
0000000000000ac7         db  0x6f ; 'o'
0000000000000ac8         db  0x2e ; '.'
0000000000000ac9         db  0x36 ; '6'
0000000000000aca         db  0x00 ; '.'
0000000000000acb         db  0x66 ; 'f'
0000000000000acc         db  0x66 ; 'f'
0000000000000acd         db  0x6c ; 'l'
0000000000000ace         db  0x75 ; 'u'
0000000000000acf         db  0x73 ; 's'
0000000000000ad0         db  0x68 ; 'h'
0000000000000ad1         db  0x00 ; '.'
0000000000000ad2         db  0x5f ; '_'
0000000000000ad3         db  0x5f ; '_'
0000000000000ad4         db  0x70 ; 'p'
0000000000000ad5         db  0x72 ; 'r'
0000000000000ad6         db  0x69 ; 'i'
0000000000000ad7         db  0x6e ; 'n'
0000000000000ad8         db  0x74 ; 't'
0000000000000ad9         db  0x66 ; 'f'
0000000000000ada         db  0x5f ; '_'
0000000000000adb         db  0x63 ; 'c'
0000000000000adc         db  0x68 ; 'h'
0000000000000add         db  0x6b ; 'k'
0000000000000ade         db  0x00 ; '.'
0000000000000adf         db  0x73 ; 's'
0000000000000ae0         db  0x65 ; 'e'
0000000000000ae1         db  0x74 ; 't'
0000000000000ae2         db  0x6c ; 'l'
0000000000000ae3         db  0x6f ; 'o'
0000000000000ae4         db  0x63 ; 'c'
0000000000000ae5         db  0x61 ; 'a'
0000000000000ae6         db  0x6c ; 'l'
0000000000000ae7         db  0x65 ; 'e'
0000000000000ae8         db  0x00 ; '.'
0000000000000ae9         db  0x6d ; 'm'
0000000000000aea         db  0x62 ; 'b'
0000000000000aeb         db  0x72 ; 'r'
0000000000000aec         db  0x74 ; 't'
0000000000000aed         db  0x6f ; 'o'
0000000000000aee         db  0x77 ; 'w'
0000000000000aef         db  0x63 ; 'c'
0000000000000af0         db  0x00 ; '.'
0000000000000af1         db  0x66 ; 'f'
0000000000000af2         db  0x6f ; 'o'
0000000000000af3         db  0x70 ; 'p'
0000000000000af4         db  0x65 ; 'e'
0000000000000af5         db  0x6e ; 'n'
0000000000000af6         db  0x00 ; '.'
0000000000000af7         db  0x73 ; 's'
0000000000000af8         db  0x74 ; 't'
0000000000000af9         db  0x72 ; 'r'
0000000000000afa         db  0x6e ; 'n'
0000000000000afb         db  0x63 ; 'c'
0000000000000afc         db  0x6d ; 'm'
0000000000000afd         db  0x70 ; 'p'
0000000000000afe         db  0x00 ; '.'
0000000000000aff         db  0x6f ; 'o'
                     aPtind:
0000000000000b00         db         "ptind", 0
0000000000000b06         db  0x73 ; 's'
0000000000000b07         db  0x74 ; 't'
0000000000000b08         db  0x72 ; 'r'
0000000000000b09         db  0x72 ; 'r'
0000000000000b0a         db  0x63 ; 'c'
0000000000000b0b         db  0x68 ; 'h'
0000000000000b0c         db  0x72 ; 'r'
0000000000000b0d         db  0x00 ; '.'
0000000000000b0e         db  0x64 ; 'd'
0000000000000b0f         db  0x63 ; 'c'
0000000000000b10         db  0x67 ; 'g'
0000000000000b11         db  0x65 ; 'e'
0000000000000b12         db  0x74 ; 't'
0000000000000b13         db  0x74 ; 't'
0000000000000b14         db  0x65 ; 'e'
0000000000000b15         db  0x78 ; 'x'
0000000000000b16         db  0x74 ; 't'
0000000000000b17         db  0x00 ; '.'
0000000000000b18         db  0x5f ; '_'
0000000000000b19         db  0x5f ; '_'
0000000000000b1a         db  0x72 ; 'r'
0000000000000b1b         db  0x65 ; 'e'
0000000000000b1c         db  0x61 ; 'a'
0000000000000b1d         db  0x64 ; 'd'
0000000000000b1e         db  0x5f ; '_'
0000000000000b1f         db  0x63 ; 'c'
0000000000000b20         db  0x68 ; 'h'
0000000000000b21         db  0x6b ; 'k'
0000000000000b22         db  0x00 ; '.'
0000000000000b23         db  0x5f ; '_'
0000000000000b24         db  0x5f ; '_'
0000000000000b25         db  0x73 ; 's'
0000000000000b26         db  0x74 ; 't'
0000000000000b27         db  0x61 ; 'a'
0000000000000b28         db  0x63 ; 'c'
0000000000000b29         db  0x6b ; 'k'
0000000000000b2a         db  0x5f ; '_'
0000000000000b2b         db  0x63 ; 'c'
0000000000000b2c         db  0x68 ; 'h'
0000000000000b2d         db  0x6b ; 'k'
0000000000000b2e         db  0x5f ; '_'
0000000000000b2f         db  0x66 ; 'f'
0000000000000b30         db  0x61 ; 'a'
0000000000000b31         db  0x69 ; 'i'
0000000000000b32         db  0x6c ; 'l'
0000000000000b33         db  0x00 ; '.'
0000000000000b34         db  0x69 ; 'i'
0000000000000b35         db  0x73 ; 's'
0000000000000b36         db  0x77 ; 'w'
0000000000000b37         db  0x70 ; 'p'
0000000000000b38         db  0x72 ; 'r'
0000000000000b39         db  0x69 ; 'i'
0000000000000b3a         db  0x6e ; 'n'
0000000000000b3b         db  0x74 ; 't'
0000000000000b3c         db  0x00 ; '.'
0000000000000b3d         db  0x72 ; 'r'
0000000000000b3e         db  0x65 ; 'e'
0000000000000b3f         db  0x61 ; 'a'
0000000000000b40         db  0x6c ; 'l'
0000000000000b41         db  0x6c ; 'l'
0000000000000b42         db  0x6f ; 'o'
0000000000000b43         db  0x63 ; 'c'
0000000000000b44         db  0x00 ; '.'
0000000000000b45         db  0x61 ; 'a'
0000000000000b46         db  0x62 ; 'b'
0000000000000b47         db  0x6f ; 'o'
0000000000000b48         db  0x72 ; 'r'
0000000000000b49         db  0x74 ; 't'
0000000000000b4a         db  0x00 ; '.'
0000000000000b4b         db  0x73 ; 's'
0000000000000b4c         db  0x74 ; 't'
0000000000000b4d         db  0x64 ; 'd'
0000000000000b4e         db  0x69 ; 'i'
0000000000000b4f         db  0x6e ; 'n'
0000000000000b50         db  0x00 ; '.'
0000000000000b51         db  0x5f ; '_'
0000000000000b52         db  0x65 ; 'e'
0000000000000b53         db  0x78 ; 'x'
0000000000000b54         db  0x69 ; 'i'
0000000000000b55         db  0x74 ; 't'
0000000000000b56         db  0x00 ; '.'
0000000000000b57         db  0x6d ; 'm'
0000000000000b58         db  0x65 ; 'e'
0000000000000b59         db  0x6d ; 'm'
0000000000000b5a         db  0x63 ; 'c'
0000000000000b5b         db  0x68 ; 'h'
0000000000000b5c         db  0x72 ; 'r'
0000000000000b5d         db  0x00 ; '.'
0000000000000b5e         db  0x67 ; 'g'
0000000000000b5f         db  0x65 ; 'e'
0000000000000b60         db  0x74 ; 't'
0000000000000b61         db  0x70 ; 'p'
0000000000000b62         db  0x69 ; 'i'
0000000000000b63         db  0x64 ; 'd'
0000000000000b64         db  0x00 ; '.'
0000000000000b65         db  0x70 ; 'p'
0000000000000b66         db  0x72 ; 'r'
0000000000000b67         db  0x6f ; 'o'
0000000000000b68         db  0x67 ; 'g'
0000000000000b69         db  0x72 ; 'r'
0000000000000b6a         db  0x61 ; 'a'
0000000000000b6b         db  0x6d ; 'm'
0000000000000b6c         db  0x5f ; '_'
0000000000000b6d         db  0x69 ; 'i'
0000000000000b6e         db  0x6e ; 'n'
0000000000000b6f         db  0x76 ; 'v'
0000000000000b70         db  0x6f ; 'o'
0000000000000b71         db  0x63 ; 'c'
0000000000000b72         db  0x61 ; 'a'
0000000000000b73         db  0x74 ; 't'
0000000000000b74         db  0x69 ; 'i'
0000000000000b75         db  0x6f ; 'o'
0000000000000b76         db  0x6e ; 'n'
0000000000000b77         db  0x5f ; '_'
0000000000000b78         db  0x6e ; 'n'
0000000000000b79         db  0x61 ; 'a'
0000000000000b7a         db  0x6d ; 'm'
0000000000000b7b         db  0x65 ; 'e'
0000000000000b7c         db  0x00 ; '.'
0000000000000b7d         db  0x5f ; '_'
0000000000000b7e         db  0x5f ; '_'
0000000000000b7f         db  0x61 ; 'a'
0000000000000b80         db  0x73 ; 's'
0000000000000b81         db  0x73 ; 's'
0000000000000b82         db  0x65 ; 'e'
0000000000000b83         db  0x72 ; 'r'
0000000000000b84         db  0x74 ; 't'
0000000000000b85         db  0x5f ; '_'
0000000000000b86         db  0x66 ; 'f'
0000000000000b87         db  0x61 ; 'a'
0000000000000b88         db  0x69 ; 'i'
0000000000000b89         db  0x6c ; 'l'
0000000000000b8a         db  0x00 ; '.'
0000000000000b8b         db  0x5f ; '_'
0000000000000b8c         db  0x5f ; '_'
0000000000000b8d         db  0x63 ; 'c'
0000000000000b8e         db  0x74 ; 't'
0000000000000b8f         db  0x79 ; 'y'
0000000000000b90         db  0x70 ; 'p'
0000000000000b91         db  0x65 ; 'e'
0000000000000b92         db  0x5f ; '_'
0000000000000b93         db  0x67 ; 'g'
0000000000000b94         db  0x65 ; 'e'
0000000000000b95         db  0x74 ; 't'
0000000000000b96         db  0x5f ; '_'
0000000000000b97         db  0x6d ; 'm'
0000000000000b98         db  0x62 ; 'b'
0000000000000b99         db  0x5f ; '_'
0000000000000b9a         db  0x63 ; 'c'
0000000000000b9b         db  0x75 ; 'u'
0000000000000b9c         db  0x72 ; 'r'
0000000000000b9d         db  0x5f ; '_'
0000000000000b9e         db  0x6d ; 'm'
0000000000000b9f         db  0x61 ; 'a'
0000000000000ba0         db  0x78 ; 'x'
0000000000000ba1         db  0x00 ; '.'
0000000000000ba2         db  0x70 ; 'p'
0000000000000ba3         db  0x6f ; 'o'
0000000000000ba4         db  0x73 ; 's'
0000000000000ba5         db  0x69 ; 'i'
0000000000000ba6         db  0x78 ; 'x'
0000000000000ba7         db  0x5f ; '_'
0000000000000ba8         db  0x66 ; 'f'
0000000000000ba9         db  0x61 ; 'a'
0000000000000baa         db  0x64 ; 'd'
0000000000000bab         db  0x76 ; 'v'
0000000000000bac         db  0x69 ; 'i'
0000000000000bad         db  0x73 ; 's'
0000000000000bae         db  0x65 ; 'e'
0000000000000baf         db  0x00 ; '.'
0000000000000bb0         db  0x67 ; 'g'
0000000000000bb1         db  0x65 ; 'e'
0000000000000bb2         db  0x74 ; 't'
0000000000000bb3         db  0x70 ; 'p'
0000000000000bb4         db  0x70 ; 'p'
0000000000000bb5         db  0x69 ; 'i'
0000000000000bb6         db  0x64 ; 'd'
0000000000000bb7         db  0x00 ; '.'
0000000000000bb8         db  0x63 ; 'c'
0000000000000bb9         db  0x61 ; 'a'
0000000000000bba         db  0x6c ; 'l'
0000000000000bbb         db  0x6c ; 'l'
0000000000000bbc         db  0x6f ; 'o'
0000000000000bbd         db  0x63 ; 'c'
0000000000000bbe         db  0x00 ; '.'
0000000000000bbf         db  0x73 ; 's'
0000000000000bc0         db  0x74 ; 't'
0000000000000bc1         db  0x72 ; 'r'
0000000000000bc2         db  0x6c ; 'l'
0000000000000bc3         db  0x65 ; 'e'
0000000000000bc4         db  0x6e ; 'n'
0000000000000bc5         db  0x00 ; '.'
0000000000000bc6         db  0x66 ; 'f'
0000000000000bc7         db  0x72 ; 'r'
0000000000000bc8         db  0x65 ; 'e'
0000000000000bc9         db  0x61 ; 'a'
0000000000000bca         db  0x64 ; 'd'
0000000000000bcb         db  0x5f ; '_'
0000000000000bcc         db  0x75 ; 'u'
0000000000000bcd         db  0x6e ; 'n'
0000000000000bce         db  0x6c ; 'l'
0000000000000bcf         db  0x6f ; 'o'
0000000000000bd0         db  0x63 ; 'c'
0000000000000bd1         db  0x6b ; 'k'
0000000000000bd2         db  0x65 ; 'e'
0000000000000bd3         db  0x64 ; 'd'
0000000000000bd4         db  0x00 ; '.'
0000000000000bd5         db  0x6d ; 'm'
0000000000000bd6         db  0x65 ; 'e'
0000000000000bd7         db  0x6d ; 'm'
0000000000000bd8         db  0x73 ; 's'
0000000000000bd9         db  0x65 ; 'e'
0000000000000bda         db  0x74 ; 't'
0000000000000bdb         db  0x00 ; '.'
0000000000000bdc         db  0x5f ; '_'
0000000000000bdd         db  0x5f ; '_'
0000000000000bde         db  0x65 ; 'e'
0000000000000bdf         db  0x72 ; 'r'
0000000000000be0         db  0x72 ; 'r'
0000000000000be1         db  0x6e ; 'n'
0000000000000be2         db  0x6f ; 'o'
0000000000000be3         db  0x5f ; '_'
0000000000000be4         db  0x6c ; 'l'
0000000000000be5         db  0x6f ; 'o'
0000000000000be6         db  0x63 ; 'c'
0000000000000be7         db  0x61 ; 'a'
0000000000000be8         db  0x74 ; 't'
0000000000000be9         db  0x69 ; 'i'
0000000000000bea         db  0x6f ; 'o'
0000000000000beb         db  0x6e ; 'n'
0000000000000bec         db  0x00 ; '.'
0000000000000bed         db  0x6d ; 'm'
0000000000000bee         db  0x65 ; 'e'
0000000000000bef         db  0x6d ; 'm'
0000000000000bf0         db  0x63 ; 'c'
0000000000000bf1         db  0x6d ; 'm'
0000000000000bf2         db  0x70 ; 'p'
0000000000000bf3         db  0x00 ; '.'
0000000000000bf4         db  0x64 ; 'd'
0000000000000bf5         db  0x75 ; 'u'
0000000000000bf6         db  0x70 ; 'p'
0000000000000bf7         db  0x32 ; '2'
0000000000000bf8         db  0x00 ; '.'
0000000000000bf9         db  0x5f ; '_'
0000000000000bfa         db  0x5f ; '_'
0000000000000bfb         db  0x66 ; 'f'
0000000000000bfc         db  0x70 ; 'p'
0000000000000bfd         db  0x72 ; 'r'
0000000000000bfe         db  0x69 ; 'i'
0000000000000bff         db  0x6e ; 'n'
                     aTfchk:
0000000000000c00         db         "tf_chk", 0
0000000000000c07         db  0x73 ; 's'
0000000000000c08         db  0x74 ; 't'
0000000000000c09         db  0x64 ; 'd'
0000000000000c0a         db  0x6f ; 'o'
0000000000000c0b         db  0x75 ; 'u'
0000000000000c0c         db  0x74 ; 't'
0000000000000c0d         db  0x00 ; '.'
0000000000000c0e         db  0x6c ; 'l'
0000000000000c0f         db  0x73 ; 's'
0000000000000c10         db  0x65 ; 'e'
0000000000000c11         db  0x65 ; 'e'
0000000000000c12         db  0x6b ; 'k'
0000000000000c13         db  0x00 ; '.'
0000000000000c14         db  0x6d ; 'm'
0000000000000c15         db  0x65 ; 'e'
0000000000000c16         db  0x6d ; 'm'
0000000000000c17         db  0x63 ; 'c'
0000000000000c18         db  0x70 ; 'p'
0000000000000c19         db  0x79 ; 'y'
0000000000000c1a         db  0x00 ; '.'
0000000000000c1b         db  0x66 ; 'f'
0000000000000c1c         db  0x63 ; 'c'
0000000000000c1d         db  0x6c ; 'l'
0000000000000c1e         db  0x6f ; 'o'
0000000000000c1f         db  0x73 ; 's'
0000000000000c20         db  0x65 ; 'e'
0000000000000c21         db  0x00 ; '.'
0000000000000c22         db  0x73 ; 's'
0000000000000c23         db  0x74 ; 't'
0000000000000c24         db  0x72 ; 'r'
0000000000000c25         db  0x74 ; 't'
0000000000000c26         db  0x6f ; 'o'
0000000000000c27         db  0x75 ; 'u'
0000000000000c28         db  0x6c ; 'l'
0000000000000c29         db  0x00 ; '.'
0000000000000c2a         db  0x6d ; 'm'
0000000000000c2b         db  0x61 ; 'a'
0000000000000c2c         db  0x6c ; 'l'
0000000000000c2d         db  0x6c ; 'l'
0000000000000c2e         db  0x6f ; 'o'
0000000000000c2f         db  0x63 ; 'c'
0000000000000c30         db  0x00 ; '.'
0000000000000c31         db  0x66 ; 'f'
0000000000000c32         db  0x74 ; 't'
0000000000000c33         db  0x65 ; 'e'
0000000000000c34         db  0x6c ; 'l'
0000000000000c35         db  0x6c ; 'l'
0000000000000c36         db  0x6f ; 'o'
0000000000000c37         db  0x00 ; '.'
0000000000000c38         db  0x6d ; 'm'
0000000000000c39         db  0x62 ; 'b'
0000000000000c3a         db  0x73 ; 's'
0000000000000c3b         db  0x69 ; 'i'
0000000000000c3c         db  0x6e ; 'n'
0000000000000c3d         db  0x69 ; 'i'
0000000000000c3e         db  0x74 ; 't'
0000000000000c3f         db  0x00 ; '.'
0000000000000c40         db  0x67 ; 'g'
0000000000000c41         db  0x65 ; 'e'
0000000000000c42         db  0x74 ; 't'
0000000000000c43         db  0x67 ; 'g'
0000000000000c44         db  0x69 ; 'i'
0000000000000c45         db  0x64 ; 'd'
0000000000000c46         db  0x00 ; '.'
0000000000000c47         db  0x5f ; '_'
0000000000000c48         db  0x5f ; '_'
0000000000000c49         db  0x75 ; 'u'
0000000000000c4a         db  0x66 ; 'f'
0000000000000c4b         db  0x6c ; 'l'
0000000000000c4c         db  0x6f ; 'o'
0000000000000c4d         db  0x77 ; 'w'
0000000000000c4e         db  0x00 ; '.'
0000000000000c4f         db  0x6e ; 'n'
0000000000000c50         db  0x6c ; 'l'
0000000000000c51         db  0x5f ; '_'
0000000000000c52         db  0x6c ; 'l'
0000000000000c53         db  0x61 ; 'a'
0000000000000c54         db  0x6e ; 'n'
0000000000000c55         db  0x67 ; 'g'
0000000000000c56         db  0x69 ; 'i'
0000000000000c57         db  0x6e ; 'n'
0000000000000c58         db  0x66 ; 'f'
0000000000000c59         db  0x6f ; 'o'
0000000000000c5a         db  0x00 ; '.'
0000000000000c5b         db  0x5f ; '_'
0000000000000c5c         db  0x5f ; '_'
0000000000000c5d         db  0x63 ; 'c'
0000000000000c5e         db  0x74 ; 't'
0000000000000c5f         db  0x79 ; 'y'
0000000000000c60         db  0x70 ; 'p'
0000000000000c61         db  0x65 ; 'e'
0000000000000c62         db  0x5f ; '_'
0000000000000c63         db  0x62 ; 'b'
0000000000000c64         db  0x5f ; '_'
0000000000000c65         db  0x6c ; 'l'
0000000000000c66         db  0x6f ; 'o'
0000000000000c67         db  0x63 ; 'c'
0000000000000c68         db  0x00 ; '.'
0000000000000c69         db  0x6f ; 'o'
0000000000000c6a         db  0x70 ; 'p'
0000000000000c6b         db  0x74 ; 't'
0000000000000c6c         db  0x61 ; 'a'
0000000000000c6d         db  0x72 ; 'r'
0000000000000c6e         db  0x67 ; 'g'
0000000000000c6f         db  0x00 ; '.'
0000000000000c70         db  0x5f ; '_'
0000000000000c71         db  0x5f ; '_'
0000000000000c72         db  0x66 ; 'f'
0000000000000c73         db  0x72 ; 'r'
0000000000000c74         db  0x65 ; 'e'
0000000000000c75         db  0x61 ; 'a'
0000000000000c76         db  0x64 ; 'd'
0000000000000c77         db  0x69 ; 'i'
0000000000000c78         db  0x6e ; 'n'
0000000000000c79         db  0x67 ; 'g'
0000000000000c7a         db  0x00 ; '.'
0000000000000c7b         db  0x73 ; 's'
0000000000000c7c         db  0x74 ; 't'
0000000000000c7d         db  0x64 ; 'd'
0000000000000c7e         db  0x65 ; 'e'
0000000000000c7f         db  0x72 ; 'r'
0000000000000c80         db  0x72 ; 'r'
0000000000000c81         db  0x00 ; '.'
0000000000000c82         db  0x67 ; 'g'
0000000000000c83         db  0x65 ; 'e'
0000000000000c84         db  0x74 ; 't'
0000000000000c85         db  0x75 ; 'u'
0000000000000c86         db  0x69 ; 'i'
0000000000000c87         db  0x64 ; 'd'
0000000000000c88         db  0x00 ; '.'
0000000000000c89         db  0x67 ; 'g'
0000000000000c8a         db  0x65 ; 'e'
0000000000000c8b         db  0x74 ; 't'
0000000000000c8c         db  0x6f ; 'o'
0000000000000c8d         db  0x70 ; 'p'
0000000000000c8e         db  0x74 ; 't'
0000000000000c8f         db  0x5f ; '_'
0000000000000c90         db  0x6c ; 'l'
0000000000000c91         db  0x6f ; 'o'
0000000000000c92         db  0x6e ; 'n'
0000000000000c93         db  0x67 ; 'g'
0000000000000c94         db  0x00 ; '.'
0000000000000c95         db  0x66 ; 'f'
0000000000000c96         db  0x72 ; 'r'
0000000000000c97         db  0x65 ; 'e'
0000000000000c98         db  0x6f ; 'o'
0000000000000c99         db  0x70 ; 'p'
0000000000000c9a         db  0x65 ; 'e'
0000000000000c9b         db  0x6e ; 'n'
0000000000000c9c         db  0x00 ; '.'
0000000000000c9d         db  0x5f ; '_'
0000000000000c9e         db  0x5f ; '_'
0000000000000c9f         db  0x66 ; 'f'
0000000000000ca0         db  0x78 ; 'x'
0000000000000ca1         db  0x73 ; 's'
0000000000000ca2         db  0x74 ; 't'
0000000000000ca3         db  0x61 ; 'a'
0000000000000ca4         db  0x74 ; 't'
0000000000000ca5         db  0x00 ; '.'
0000000000000ca6         db  0x66 ; 'f'
0000000000000ca7         db  0x69 ; 'i'
0000000000000ca8         db  0x6c ; 'l'
0000000000000ca9         db  0x65 ; 'e'
0000000000000caa         db  0x6e ; 'n'
0000000000000cab         db  0x6f ; 'o'
0000000000000cac         db  0x00 ; '.'
0000000000000cad         db  0x66 ; 'f'
0000000000000cae         db  0x77 ; 'w'
0000000000000caf         db  0x72 ; 'r'
0000000000000cb0         db  0x69 ; 'i'
0000000000000cb1         db  0x74 ; 't'
0000000000000cb2         db  0x65 ; 'e'
0000000000000cb3         db  0x00 ; '.'
0000000000000cb4         db  0x66 ; 'f'
0000000000000cb5         db  0x72 ; 'r'
0000000000000cb6         db  0x65 ; 'e'
0000000000000cb7         db  0x61 ; 'a'
0000000000000cb8         db  0x64 ; 'd'
0000000000000cb9         db  0x00 ; '.'
0000000000000cba         db  0x67 ; 'g'
0000000000000cbb         db  0x65 ; 'e'
0000000000000cbc         db  0x74 ; 't'
0000000000000cbd         db  0x74 ; 't'
0000000000000cbe         db  0x69 ; 'i'
0000000000000cbf         db  0x6d ; 'm'
0000000000000cc0         db  0x65 ; 'e'
0000000000000cc1         db  0x6f ; 'o'
0000000000000cc2         db  0x66 ; 'f'
0000000000000cc3         db  0x64 ; 'd'
0000000000000cc4         db  0x61 ; 'a'
0000000000000cc5         db  0x79 ; 'y'
0000000000000cc6         db  0x00 ; '.'
0000000000000cc7         db  0x5f ; '_'
0000000000000cc8         db  0x5f ; '_'
0000000000000cc9         db  0x65 ; 'e'
0000000000000cca         db  0x78 ; 'x'
0000000000000ccb         db  0x70 ; 'p'
0000000000000ccc         db  0x6c ; 'l'
0000000000000ccd         db  0x69 ; 'i'
0000000000000cce         db  0x63 ; 'c'
0000000000000ccf         db  0x69 ; 'i'
0000000000000cd0         db  0x74 ; 't'
0000000000000cd1         db  0x5f ; '_'
0000000000000cd2         db  0x62 ; 'b'
0000000000000cd3         db  0x7a ; 'z'
0000000000000cd4         db  0x65 ; 'e'
0000000000000cd5         db  0x72 ; 'r'
0000000000000cd6         db  0x6f ; 'o'
0000000000000cd7         db  0x5f ; '_'
0000000000000cd8         db  0x63 ; 'c'
0000000000000cd9         db  0x68 ; 'h'
0000000000000cda         db  0x6b ; 'k'
0000000000000cdb         db  0x00 ; '.'
0000000000000cdc         db  0x5f ; '_'
0000000000000cdd         db  0x5f ; '_'
0000000000000cde         db  0x66 ; 'f'
0000000000000cdf         db  0x70 ; 'p'
0000000000000ce0         db  0x65 ; 'e'
0000000000000ce1         db  0x6e ; 'n'
0000000000000ce2         db  0x64 ; 'd'
0000000000000ce3         db  0x69 ; 'i'
0000000000000ce4         db  0x6e ; 'n'
0000000000000ce5         db  0x67 ; 'g'
0000000000000ce6         db  0x00 ; '.'
0000000000000ce7         db  0x73 ; 's'
0000000000000ce8         db  0x74 ; 't'
0000000000000ce9         db  0x72 ; 'r'
0000000000000cea         db  0x63 ; 'c'
0000000000000ceb         db  0x68 ; 'h'
0000000000000cec         db  0x72 ; 'r'
0000000000000ced         db  0x00 ; '.'
0000000000000cee         db  0x70 ; 'p'
0000000000000cef         db  0x72 ; 'r'
0000000000000cf0         db  0x6f ; 'o'
0000000000000cf1         db  0x67 ; 'g'
0000000000000cf2         db  0x72 ; 'r'
0000000000000cf3         db  0x61 ; 'a'
0000000000000cf4         db  0x6d ; 'm'
0000000000000cf5         db  0x5f ; '_'
0000000000000cf6         db  0x69 ; 'i'
0000000000000cf7         db  0x6e ; 'n'
0000000000000cf8         db  0x76 ; 'v'
0000000000000cf9         db  0x6f ; 'o'
0000000000000cfa         db  0x63 ; 'c'
0000000000000cfb         db  0x61 ; 'a'
0000000000000cfc         db  0x74 ; 't'
0000000000000cfd         db  0x69 ; 'i'
0000000000000cfe         db  0x6f ; 'o'
0000000000000cff         db  0x6e ; 'n'
                     aShortname:
0000000000000d00         db         "_short_name", 0
0000000000000d0c         db  0x66 ; 'f'
0000000000000d0d         db  0x64 ; 'd'
0000000000000d0e         db  0x6f ; 'o'
0000000000000d0f         db  0x70 ; 'p'
0000000000000d10         db  0x65 ; 'e'
0000000000000d11         db  0x6e ; 'n'
0000000000000d12         db  0x00 ; '.'
0000000000000d13         db  0x5f ; '_'
0000000000000d14         db  0x5f ; '_'
0000000000000d15         db  0x63 ; 'c'
0000000000000d16         db  0x78 ; 'x'
0000000000000d17         db  0x61 ; 'a'
0000000000000d18         db  0x5f ; '_'
0000000000000d19         db  0x66 ; 'f'
0000000000000d1a         db  0x69 ; 'i'
0000000000000d1b         db  0x6e ; 'n'
0000000000000d1c         db  0x61 ; 'a'
0000000000000d1d         db  0x6c ; 'l'
0000000000000d1e         db  0x69 ; 'i'
0000000000000d1f         db  0x7a ; 'z'
0000000000000d20         db  0x65 ; 'e'
0000000000000d21         db  0x00 ; '.'
0000000000000d22         db  0x73 ; 's'
0000000000000d23         db  0x65 ; 'e'
0000000000000d24         db  0x74 ; 't'
0000000000000d25         db  0x76 ; 'v'
0000000000000d26         db  0x62 ; 'b'
0000000000000d27         db  0x75 ; 'u'
0000000000000d28         db  0x66 ; 'f'
0000000000000d29         db  0x00 ; '.'
0000000000000d2a         db  0x66 ; 'f'
0000000000000d2b         db  0x63 ; 'c'
0000000000000d2c         db  0x6e ; 'n'
0000000000000d2d         db  0x74 ; 't'
0000000000000d2e         db  0x6c ; 'l'
0000000000000d2f         db  0x00 ; '.'
0000000000000d30         db  0x62 ; 'b'
0000000000000d31         db  0x69 ; 'i'
0000000000000d32         db  0x6e ; 'n'
0000000000000d33         db  0x64 ; 'd'
0000000000000d34         db  0x74 ; 't'
0000000000000d35         db  0x65 ; 'e'
0000000000000d36         db  0x78 ; 'x'
0000000000000d37         db  0x74 ; 't'
0000000000000d38         db  0x64 ; 'd'
0000000000000d39         db  0x6f ; 'o'
0000000000000d3a         db  0x6d ; 'm'
0000000000000d3b         db  0x61 ; 'a'
0000000000000d3c         db  0x69 ; 'i'
0000000000000d3d         db  0x6e ; 'n'
0000000000000d3e         db  0x00 ; '.'
0000000000000d3f         db  0x66 ; 'f'
0000000000000d40         db  0x77 ; 'w'
0000000000000d41         db  0x72 ; 'r'
0000000000000d42         db  0x69 ; 'i'
0000000000000d43         db  0x74 ; 't'
0000000000000d44         db  0x65 ; 'e'
0000000000000d45         db  0x5f ; '_'
0000000000000d46         db  0x75 ; 'u'
0000000000000d47         db  0x6e ; 'n'
0000000000000d48         db  0x6c ; 'l'
0000000000000d49         db  0x6f ; 'o'
0000000000000d4a         db  0x63 ; 'c'
0000000000000d4b         db  0x6b ; 'k'
0000000000000d4c         db  0x65 ; 'e'
0000000000000d4d         db  0x64 ; 'd'
0000000000000d4e         db  0x00 ; '.'
0000000000000d4f         db  0x73 ; 's'
0000000000000d50         db  0x74 ; 't'
0000000000000d51         db  0x72 ; 'r'
0000000000000d52         db  0x63 ; 'c'
0000000000000d53         db  0x6d ; 'm'
0000000000000d54         db  0x70 ; 'p'
0000000000000d55         db  0x00 ; '.'
0000000000000d56         db  0x5f ; '_'
0000000000000d57         db  0x5f ; '_'
0000000000000d58         db  0x6c ; 'l'
0000000000000d59         db  0x69 ; 'i'
0000000000000d5a         db  0x62 ; 'b'
0000000000000d5b         db  0x63 ; 'c'
0000000000000d5c         db  0x5f ; '_'
0000000000000d5d         db  0x73 ; 's'
0000000000000d5e         db  0x74 ; 't'
0000000000000d5f         db  0x61 ; 'a'
0000000000000d60         db  0x72 ; 'r'
0000000000000d61         db  0x74 ; 't'
0000000000000d62         db  0x5f ; '_'
0000000000000d63         db  0x6d ; 'm'
0000000000000d64         db  0x61 ; 'a'
0000000000000d65         db  0x69 ; 'i'
0000000000000d66         db  0x6e ; 'n'
0000000000000d67         db  0x00 ; '.'
0000000000000d68         db  0x66 ; 'f'
0000000000000d69         db  0x65 ; 'e'
0000000000000d6a         db  0x72 ; 'r'
0000000000000d6b         db  0x72 ; 'r'
0000000000000d6c         db  0x6f ; 'o'
0000000000000d6d         db  0x72 ; 'r'
0000000000000d6e         db  0x00 ; '.'
0000000000000d6f         db  0x73 ; 's'
0000000000000d70         db  0x74 ; 't'
0000000000000d71         db  0x70 ; 'p'
0000000000000d72         db  0x63 ; 'c'
0000000000000d73         db  0x70 ; 'p'
0000000000000d74         db  0x79 ; 'y'
0000000000000d75         db  0x00 ; '.'
0000000000000d76         db  0x66 ; 'f'
0000000000000d77         db  0x73 ; 's'
0000000000000d78         db  0x65 ; 'e'
0000000000000d79         db  0x65 ; 'e'
0000000000000d7a         db  0x6b ; 'k'
0000000000000d7b         db  0x6f ; 'o'
0000000000000d7c         db  0x00 ; '.'
0000000000000d7d         db  0x5f ; '_'
0000000000000d7e         db  0x5f ; '_'
0000000000000d7f         db  0x73 ; 's'
0000000000000d80         db  0x74 ; 't'
0000000000000d81         db  0x72 ; 'r'
0000000000000d82         db  0x74 ; 't'
0000000000000d83         db  0x6f ; 'o'
0000000000000d84         db  0x75 ; 'u'
0000000000000d85         db  0x6c ; 'l'
0000000000000d86         db  0x5f ; '_'
0000000000000d87         db  0x69 ; 'i'
0000000000000d88         db  0x6e ; 'n'
0000000000000d89         db  0x74 ; 't'
0000000000000d8a         db  0x65 ; 'e'
0000000000000d8b         db  0x72 ; 'r'
0000000000000d8c         db  0x6e ; 'n'
0000000000000d8d         db  0x61 ; 'a'
0000000000000d8e         db  0x6c ; 'l'
0000000000000d8f         db  0x00 ; '.'
0000000000000d90         db  0x66 ; 'f'
0000000000000d91         db  0x70 ; 'p'
0000000000000d92         db  0x75 ; 'u'
0000000000000d93         db  0x74 ; 't'
0000000000000d94         db  0x73 ; 's'
0000000000000d95         db  0x5f ; '_'
0000000000000d96         db  0x75 ; 'u'
0000000000000d97         db  0x6e ; 'n'
0000000000000d98         db  0x6c ; 'l'
0000000000000d99         db  0x6f ; 'o'
0000000000000d9a         db  0x63 ; 'c'
0000000000000d9b         db  0x6b ; 'k'
0000000000000d9c         db  0x65 ; 'e'
0000000000000d9d         db  0x64 ; 'd'
0000000000000d9e         db  0x00 ; '.'
0000000000000d9f         db  0x66 ; 'f'
0000000000000da0         db  0x72 ; 'r'
0000000000000da1         db  0x65 ; 'e'
0000000000000da2         db  0x65 ; 'e'
0000000000000da3         db  0x00 ; '.'
0000000000000da4         db  0x5f ; '_'
0000000000000da5         db  0x5f ; '_'
0000000000000da6         db  0x70 ; 'p'
0000000000000da7         db  0x72 ; 'r'
0000000000000da8         db  0x6f ; 'o'
0000000000000da9         db  0x67 ; 'g'
0000000000000daa         db  0x6e ; 'n'
0000000000000dab         db  0x61 ; 'a'
0000000000000dac         db  0x6d ; 'm'
0000000000000dad         db  0x65 ; 'e'
0000000000000dae         db  0x00 ; '.'
0000000000000daf         db  0x5f ; '_'
0000000000000db0         db  0x5f ; '_'
0000000000000db1         db  0x70 ; 'p'
0000000000000db2         db  0x72 ; 'r'
0000000000000db3         db  0x6f ; 'o'
0000000000000db4         db  0x67 ; 'g'
0000000000000db5         db  0x6e ; 'n'
0000000000000db6         db  0x61 ; 'a'
0000000000000db7         db  0x6d ; 'm'
0000000000000db8         db  0x65 ; 'e'
0000000000000db9         db  0x5f ; '_'
0000000000000dba         db  0x66 ; 'f'
0000000000000dbb         db  0x75 ; 'u'
0000000000000dbc         db  0x6c ; 'l'
0000000000000dbd         db  0x6c ; 'l'
0000000000000dbe         db  0x00 ; '.'
0000000000000dbf         db  0x5f ; '_'
0000000000000dc0         db  0x5f ; '_'
0000000000000dc1         db  0x63 ; 'c'
0000000000000dc2         db  0x78 ; 'x'
0000000000000dc3         db  0x61 ; 'a'
0000000000000dc4         db  0x5f ; '_'
0000000000000dc5         db  0x61 ; 'a'
0000000000000dc6         db  0x74 ; 't'
0000000000000dc7         db  0x65 ; 'e'
0000000000000dc8         db  0x78 ; 'x'
0000000000000dc9         db  0x69 ; 'i'
0000000000000dca         db  0x74 ; 't'
0000000000000dcb         db  0x00 ; '.'
0000000000000dcc         db  0x47 ; 'G'
0000000000000dcd         db  0x4c ; 'L'
0000000000000dce         db  0x49 ; 'I'
0000000000000dcf         db  0x42 ; 'B'
0000000000000dd0         db  0x43 ; 'C'
0000000000000dd1         db  0x5f ; '_'
0000000000000dd2         db  0x32 ; '2'
0000000000000dd3         db  0x2e ; '.'
0000000000000dd4         db  0x33 ; '3'
0000000000000dd5         db  0x00 ; '.'
0000000000000dd6         db  0x47 ; 'G'
0000000000000dd7         db  0x4c ; 'L'
0000000000000dd8         db  0x49 ; 'I'
0000000000000dd9         db  0x42 ; 'B'
0000000000000dda         db  0x43 ; 'C'
0000000000000ddb         db  0x5f ; '_'
0000000000000ddc         db  0x32 ; '2'
0000000000000ddd         db  0x2e ; '.'
0000000000000dde         db  0x32 ; '2'
0000000000000ddf         db  0x35 ; '5'
0000000000000de0         db  0x00 ; '.'
0000000000000de1         db  0x47 ; 'G'
0000000000000de2         db  0x4c ; 'L'
0000000000000de3         db  0x49 ; 'I'
0000000000000de4         db  0x42 ; 'B'
0000000000000de5         db  0x43 ; 'C'
0000000000000de6         db  0x5f ; '_'
0000000000000de7         db  0x32 ; '2'
0000000000000de8         db  0x2e ; '.'
0000000000000de9         db  0x33 ; '3'
0000000000000dea         db  0x2e ; '.'
0000000000000deb         db  0x34 ; '4'
0000000000000dec         db  0x00 ; '.'
0000000000000ded         db  0x47 ; 'G'
0000000000000dee         db  0x4c ; 'L'
0000000000000def         db  0x49 ; 'I'
0000000000000df0         db  0x42 ; 'B'
0000000000000df1         db  0x43 ; 'C'
0000000000000df2         db  0x5f ; '_'
0000000000000df3         db  0x32 ; '2'
0000000000000df4         db  0x2e ; '.'
0000000000000df5         db  0x31 ; '1'
0000000000000df6         db  0x34 ; '4'
0000000000000df7         db  0x00 ; '.'
0000000000000df8         db  0x47 ; 'G'
0000000000000df9         db  0x4c ; 'L'
0000000000000dfa         db  0x49 ; 'I'
0000000000000dfb         db  0x42 ; 'B'
0000000000000dfc         db  0x43 ; 'C'
0000000000000dfd         db  0x5f ; '_'
0000000000000dfe         db  0x32 ; '2'
0000000000000dff         db  0x2e ; '.'
0000000000000e00         db  0x34 ; '4'
0000000000000e01         db  0x00 ; '.'
0000000000000e02         db  0x47 ; 'G'
0000000000000e03         db  0x4c ; 'L'
0000000000000e04         db  0x49 ; 'I'
0000000000000e05         db  0x42 ; 'B'
0000000000000e06         db  0x43 ; 'C'
0000000000000e07         db  0x5f ; '_'
0000000000000e08         db  0x32 ; '2'
0000000000000e09         db  0x2e ; '.'
0000000000000e0a         db  0x32 ; '2'
0000000000000e0b         db  0x2e ; '.'
0000000000000e0c         db  0x35 ; '5'
0000000000000e0d         db  0x00 ; '.'
0000000000000e0e         db  0x5f ; '_'
0000000000000e0f         db  0x49 ; 'I'
0000000000000e10         db  0x54 ; 'T'
0000000000000e11         db  0x4d ; 'M'
0000000000000e12         db  0x5f ; '_'
0000000000000e13         db  0x64 ; 'd'
0000000000000e14         db  0x65 ; 'e'
0000000000000e15         db  0x72 ; 'r'
0000000000000e16         db  0x65 ; 'e'
0000000000000e17         db  0x67 ; 'g'
0000000000000e18         db  0x69 ; 'i'
0000000000000e19         db  0x73 ; 's'
0000000000000e1a         db  0x74 ; 't'
0000000000000e1b         db  0x65 ; 'e'
0000000000000e1c         db  0x72 ; 'r'
0000000000000e1d         db  0x54 ; 'T'
0000000000000e1e         db  0x4d ; 'M'
0000000000000e1f         db  0x43 ; 'C'
0000000000000e20         db  0x6c ; 'l'
0000000000000e21         db  0x6f ; 'o'
0000000000000e22         db  0x6e ; 'n'
0000000000000e23         db  0x65 ; 'e'
0000000000000e24         db  0x54 ; 'T'
0000000000000e25         db  0x61 ; 'a'
0000000000000e26         db  0x62 ; 'b'
0000000000000e27         db  0x6c ; 'l'
0000000000000e28         db  0x65 ; 'e'
0000000000000e29         db  0x00 ; '.'
0000000000000e2a         db  0x5f ; '_'
0000000000000e2b         db  0x5f ; '_'
0000000000000e2c         db  0x67 ; 'g'
0000000000000e2d         db  0x6d ; 'm'
0000000000000e2e         db  0x6f ; 'o'
0000000000000e2f         db  0x6e ; 'n'
0000000000000e30         db  0x5f ; '_'
0000000000000e31         db  0x73 ; 's'
0000000000000e32         db  0x74 ; 't'
0000000000000e33         db  0x61 ; 'a'
0000000000000e34         db  0x72 ; 'r'
0000000000000e35         db  0x74 ; 't'
0000000000000e36         db  0x5f ; '_'
0000000000000e37         db  0x5f ; '_'
0000000000000e38         db  0x00 ; '.'
0000000000000e39         db  0x5f ; '_'
0000000000000e3a         db  0x49 ; 'I'
0000000000000e3b         db  0x54 ; 'T'
0000000000000e3c         db  0x4d ; 'M'
0000000000000e3d         db  0x5f ; '_'
0000000000000e3e         db  0x72 ; 'r'
0000000000000e3f         db  0x65 ; 'e'
0000000000000e40         db  0x67 ; 'g'
0000000000000e41         db  0x69 ; 'i'
0000000000000e42         db  0x73 ; 's'
0000000000000e43         db  0x74 ; 't'
0000000000000e44         db  0x65 ; 'e'
0000000000000e45         db  0x72 ; 'r'
0000000000000e46         db  0x54 ; 'T'
0000000000000e47         db  0x4d ; 'M'
0000000000000e48         db  0x43 ; 'C'
0000000000000e49         db  0x6c ; 'l'
0000000000000e4a         db  0x6f ; 'o'
0000000000000e4b         db  0x6e ; 'n'
0000000000000e4c         db  0x65 ; 'e'
0000000000000e4d         db  0x54 ; 'T'
0000000000000e4e         db  0x61 ; 'a'
0000000000000e4f         db  0x62 ; 'b'
0000000000000e50         db  0x6c ; 'l'
0000000000000e51         db  0x65 ; 'e'
0000000000000e52         db  0x00 ; '.'
0000000000000e53         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xe54; 0xefc[ (168 bytes)
        ; File offset : [3668; 3836[ (168 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000e54         db  0x00 ; '.'
0000000000000e55         db  0x00 ; '.'
0000000000000e56         db  0x02 ; '.'
0000000000000e57         db  0x00 ; '.'
0000000000000e58         db  0x02 ; '.'
0000000000000e59         db  0x00 ; '.'
0000000000000e5a         db  0x02 ; '.'
0000000000000e5b         db  0x00 ; '.'
0000000000000e5c         db  0x02 ; '.'
0000000000000e5d         db  0x00 ; '.'
0000000000000e5e         db  0x02 ; '.'
0000000000000e5f         db  0x00 ; '.'
0000000000000e60         db  0x00 ; '.'
0000000000000e61         db  0x00 ; '.'
0000000000000e62         db  0x02 ; '.'
0000000000000e63         db  0x00 ; '.'
0000000000000e64         db  0x02 ; '.'
0000000000000e65         db  0x00 ; '.'
0000000000000e66         db  0x02 ; '.'
0000000000000e67         db  0x00 ; '.'
0000000000000e68         db  0x03 ; '.'
0000000000000e69         db  0x00 ; '.'
0000000000000e6a         db  0x02 ; '.'
0000000000000e6b         db  0x00 ; '.'
0000000000000e6c         db  0x02 ; '.'
0000000000000e6d         db  0x00 ; '.'
0000000000000e6e         db  0x02 ; '.'
0000000000000e6f         db  0x00 ; '.'
0000000000000e70         db  0x02 ; '.'
0000000000000e71         db  0x00 ; '.'
0000000000000e72         db  0x02 ; '.'
0000000000000e73         db  0x00 ; '.'
0000000000000e74         db  0x02 ; '.'
0000000000000e75         db  0x00 ; '.'
0000000000000e76         db  0x02 ; '.'
0000000000000e77         db  0x00 ; '.'
0000000000000e78         db  0x02 ; '.'
0000000000000e79         db  0x00 ; '.'
0000000000000e7a         db  0x02 ; '.'
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x02 ; '.'
0000000000000e7d         db  0x00 ; '.'
0000000000000e7e         db  0x02 ; '.'
0000000000000e7f         db  0x00 ; '.'
0000000000000e80         db  0x02 ; '.'
0000000000000e81         db  0x00 ; '.'
0000000000000e82         db  0x03 ; '.'
0000000000000e83         db  0x00 ; '.'
0000000000000e84         db  0x02 ; '.'
0000000000000e85         db  0x00 ; '.'
0000000000000e86         db  0x02 ; '.'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0x02 ; '.'
0000000000000e89         db  0x00 ; '.'
0000000000000e8a         db  0x02 ; '.'
0000000000000e8b         db  0x00 ; '.'
0000000000000e8c         db  0x02 ; '.'
0000000000000e8d         db  0x00 ; '.'
0000000000000e8e         db  0x02 ; '.'
0000000000000e8f         db  0x00 ; '.'
0000000000000e90         db  0x02 ; '.'
0000000000000e91         db  0x00 ; '.'
0000000000000e92         db  0x02 ; '.'
0000000000000e93         db  0x00 ; '.'
0000000000000e94         db  0x02 ; '.'
0000000000000e95         db  0x00 ; '.'
0000000000000e96         db  0x02 ; '.'
0000000000000e97         db  0x00 ; '.'
0000000000000e98         db  0x02 ; '.'
0000000000000e99         db  0x00 ; '.'
0000000000000e9a         db  0x02 ; '.'
0000000000000e9b         db  0x00 ; '.'
0000000000000e9c         db  0x02 ; '.'
0000000000000e9d         db  0x00 ; '.'
0000000000000e9e         db  0x02 ; '.'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0x02 ; '.'
0000000000000ea1         db  0x00 ; '.'
0000000000000ea2         db  0x02 ; '.'
0000000000000ea3         db  0x00 ; '.'
0000000000000ea4         db  0x02 ; '.'
0000000000000ea5         db  0x00 ; '.'
0000000000000ea6         db  0x02 ; '.'
0000000000000ea7         db  0x00 ; '.'
0000000000000ea8         db  0x02 ; '.'
0000000000000ea9         db  0x00 ; '.'
0000000000000eaa         db  0x02 ; '.'
0000000000000eab         db  0x00 ; '.'
0000000000000eac         db  0x00 ; '.'
0000000000000ead         db  0x00 ; '.'
0000000000000eae         db  0x04 ; '.'
0000000000000eaf         db  0x00 ; '.'
0000000000000eb0         db  0x02 ; '.'
0000000000000eb1         db  0x00 ; '.'
0000000000000eb2         db  0x02 ; '.'
0000000000000eb3         db  0x00 ; '.'
0000000000000eb4         db  0x02 ; '.'
0000000000000eb5         db  0x00 ; '.'
0000000000000eb6         db  0x02 ; '.'
0000000000000eb7         db  0x00 ; '.'
0000000000000eb8         db  0x02 ; '.'
0000000000000eb9         db  0x00 ; '.'
0000000000000eba         db  0x02 ; '.'
0000000000000ebb         db  0x00 ; '.'
0000000000000ebc         db  0x02 ; '.'
0000000000000ebd         db  0x00 ; '.'
0000000000000ebe         db  0x02 ; '.'
0000000000000ebf         db  0x00 ; '.'
0000000000000ec0         db  0x02 ; '.'
0000000000000ec1         db  0x00 ; '.'
0000000000000ec2         db  0x02 ; '.'
0000000000000ec3         db  0x00 ; '.'
0000000000000ec4         db  0x02 ; '.'
0000000000000ec5         db  0x00 ; '.'
0000000000000ec6         db  0x05 ; '.'
0000000000000ec7         db  0x00 ; '.'
0000000000000ec8         db  0x02 ; '.'
0000000000000ec9         db  0x00 ; '.'
0000000000000eca         db  0x02 ; '.'
0000000000000ecb         db  0x00 ; '.'
0000000000000ecc         db  0x06 ; '.'
0000000000000ecd         db  0x00 ; '.'
0000000000000ece         db  0x02 ; '.'
0000000000000ecf         db  0x00 ; '.'
0000000000000ed0         db  0x02 ; '.'
0000000000000ed1         db  0x00 ; '.'
0000000000000ed2         db  0x02 ; '.'
0000000000000ed3         db  0x00 ; '.'
0000000000000ed4         db  0x02 ; '.'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x02 ; '.'
0000000000000ed7         db  0x00 ; '.'
0000000000000ed8         db  0x02 ; '.'
0000000000000ed9         db  0x00 ; '.'
0000000000000eda         db  0x02 ; '.'
0000000000000edb         db  0x00 ; '.'
0000000000000edc         db  0x02 ; '.'
0000000000000edd         db  0x00 ; '.'
0000000000000ede         db  0x05 ; '.'
0000000000000edf         db  0x00 ; '.'
0000000000000ee0         db  0x00 ; '.'
0000000000000ee1         db  0x00 ; '.'
0000000000000ee2         db  0x02 ; '.'
0000000000000ee3         db  0x00 ; '.'
0000000000000ee4         db  0x02 ; '.'
0000000000000ee5         db  0x00 ; '.'
0000000000000ee6         db  0x02 ; '.'
0000000000000ee7         db  0x00 ; '.'
0000000000000ee8         db  0x07 ; '.'
0000000000000ee9         db  0x00 ; '.'
0000000000000eea         db  0x02 ; '.'
0000000000000eeb         db  0x00 ; '.'
0000000000000eec         db  0x02 ; '.'
0000000000000eed         db  0x00 ; '.'
0000000000000eee         db  0x02 ; '.'
0000000000000eef         db  0x00 ; '.'
0000000000000ef0         db  0x02 ; '.'
0000000000000ef1         db  0x00 ; '.'
0000000000000ef2         db  0x02 ; '.'
0000000000000ef3         db  0x00 ; '.'
0000000000000ef4         db  0x02 ; '.'
0000000000000ef5         db  0x00 ; '.'
0000000000000ef6         db  0x02 ; '.'
0000000000000ef7         db  0x00 ; '.'
0000000000000ef8         db  0x02 ; '.'
0000000000000ef9         db  0x00 ; '.'
0000000000000efa         db  0x02 ; '.'
0000000000000efb         db  0x00 ; '.'
0000000000000efc         db  0x00 ; '.'
0000000000000efd         db  0x00 ; '.'
0000000000000efe         db  0x00 ; '.'
0000000000000eff         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0xf00; 0xf70[ (112 bytes)
        ; File offset : [3840; 3952[ (112 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000f00         db  0x01 ; '.'
0000000000000f01         db  0x00 ; '.'
0000000000000f02         db  0x06 ; '.'
0000000000000f03         db  0x00 ; '.'
0000000000000f04         db  0x01 ; '.'
0000000000000f05         db  0x00 ; '.'
0000000000000f06         db  0x00 ; '.'
0000000000000f07         db  0x00 ; '.'
0000000000000f08         db  0x10 ; '.'
0000000000000f09         db  0x00 ; '.'
0000000000000f0a         db  0x00 ; '.'
0000000000000f0b         db  0x00 ; '.'
0000000000000f0c         db  0x00 ; '.'
0000000000000f0d         db  0x00 ; '.'
0000000000000f0e         db  0x00 ; '.'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0x13 ; '.'
0000000000000f11         db  0x69 ; 'i'
0000000000000f12         db  0x69 ; 'i'
0000000000000f13         db  0x0d ; '.'
0000000000000f14         db  0x00 ; '.'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x07 ; '.'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0x0c ; '.'
0000000000000f19         db  0x03 ; '.'
0000000000000f1a         db  0x00 ; '.'
0000000000000f1b         db  0x00 ; '.'
0000000000000f1c         db  0x10 ; '.'
0000000000000f1d         db  0x00 ; '.'
0000000000000f1e         db  0x00 ; '.'
0000000000000f1f         db  0x00 ; '.'
0000000000000f20         db  0x85 ; '.'
0000000000000f21         db  0x91 ; '.'
0000000000000f22         db  0x96 ; '.'
0000000000000f23         db  0x06 ; '.'
0000000000000f24         db  0x00 ; '.'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x06 ; '.'
0000000000000f27         db  0x00 ; '.'
0000000000000f28         db  0x16 ; '.'
0000000000000f29         db  0x03 ; '.'
0000000000000f2a         db  0x00 ; '.'
0000000000000f2b         db  0x00 ; '.'
0000000000000f2c         db  0x10 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x00 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0x74 ; 't'
0000000000000f31         db  0x19 ; '.'
0000000000000f32         db  0x69 ; 'i'
0000000000000f33         db  0x09 ; '.'
0000000000000f34         db  0x00 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x05 ; '.'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0x21 ; '!'
0000000000000f39         db  0x03 ; '.'
0000000000000f3a         db  0x00 ; '.'
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x10 ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x00 ; '.'
0000000000000f3f         db  0x00 ; '.'
0000000000000f40         db  0x94 ; '.'
0000000000000f41         db  0x91 ; '.'
0000000000000f42         db  0x96 ; '.'
0000000000000f43         db  0x06 ; '.'
0000000000000f44         db  0x00 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x04 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0x2d ; '-'
0000000000000f49         db  0x03 ; '.'
0000000000000f4a         db  0x00 ; '.'
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x10 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x00 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0x14 ; '.'
0000000000000f51         db  0x69 ; 'i'
0000000000000f52         db  0x69 ; 'i'
0000000000000f53         db  0x0d ; '.'
0000000000000f54         db  0x00 ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x03 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0x38 ; '8'
0000000000000f59         db  0x03 ; '.'
0000000000000f5a         db  0x00 ; '.'
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x10 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x00 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0x75 ; 'u'
0000000000000f61         db  0x1a ; '.'
0000000000000f62         db  0x69 ; 'i'
0000000000000f63         db  0x09 ; '.'
0000000000000f64         db  0x00 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x02 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0x42 ; 'B'
0000000000000f69         db  0x03 ; '.'
0000000000000f6a         db  0x00 ; '.'
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x00 ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x00 ; '.'
0000000000000f6f         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0xf70; 0x1300[ (912 bytes)
        ; File offset : [3952; 4864[ (912 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000f70         db  0xf0 ; '.'
0000000000000f71         db  0xc9 ; '.'
0000000000000f72         db  0x20 ; ' '
0000000000000f73         db  0x00 ; '.'
0000000000000f74         db  0x00 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x00 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x08 ; '.'
0000000000000f79         db  0x00 ; '.'
0000000000000f7a         db  0x00 ; '.'
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x00 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x00 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0x40 ; '@'
0000000000000f81         db  0x2d ; '-'
0000000000000f82         db  0x00 ; '.'
0000000000000f83         db  0x00 ; '.'
0000000000000f84         db  0x00 ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x00 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0xf8 ; '.'
0000000000000f89         db  0xc9 ; '.'
0000000000000f8a         db  0x20 ; ' '
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x00 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x00 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0x08 ; '.'
0000000000000f91         db  0x00 ; '.'
0000000000000f92         db  0x00 ; '.'
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x00 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x00 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0x00 ; '.'
0000000000000f99         db  0x2d ; '-'
0000000000000f9a         db  0x00 ; '.'
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x00 ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x00 ; '.'
0000000000000f9f         db  0x00 ; '.'
0000000000000fa0         db  0x00 ; '.'
0000000000000fa1         db  0xca ; '.'
0000000000000fa2         db  0x20 ; ' '
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x00 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x00 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0x08 ; '.'
0000000000000fa9         db  0x00 ; '.'
0000000000000faa         db  0x00 ; '.'
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x00 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x00 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0x77 ; 'w'
0000000000000fb1         db  0x92 ; '.'
0000000000000fb2         db  0x00 ; '.'
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x00 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x00 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0x20 ; ' '
0000000000000fb9         db  0xca ; '.'
0000000000000fba         db  0x20 ; ' '
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x00 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'
0000000000000fc0         db  0x08 ; '.'
0000000000000fc1         db  0x00 ; '.'
0000000000000fc2         db  0x00 ; '.'
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x00 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x00 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0x7c ; '|'
0000000000000fc9         db  0x92 ; '.'
0000000000000fca         db  0x00 ; '.'
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x00 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x40 ; '@'
0000000000000fd1         db  0xca ; '.'
0000000000000fd2         db  0x20 ; ' '
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x00 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x00 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0x08 ; '.'
0000000000000fd9         db  0x00 ; '.'
0000000000000fda         db  0x00 ; '.'
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x00 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x00 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0x88 ; '.'
0000000000000fe1         db  0x92 ; '.'
0000000000000fe2         db  0x00 ; '.'
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x00 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x00 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x60 ; '`'
0000000000000fe9         db  0xca ; '.'
0000000000000fea         db  0x20 ; ' '
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x00 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x00 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0x08 ; '.'
0000000000000ff1         db  0x00 ; '.'
0000000000000ff2         db  0x00 ; '.'
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x00 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x00 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0x93 ; '.'
0000000000000ff9         db  0x92 ; '.'
0000000000000ffa         db  0x00 ; '.'
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x00 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x00 ; '.'
0000000000000fff         db  0x00 ; '.'
0000000000001000         db  0x80 ; '.'                                         ; DATA XREF=randread_new+97, randread_new+104
0000000000001001         db  0xca ; '.'
0000000000001002         db  0x20 ; ' '
0000000000001003         db  0x00 ; '.'
0000000000001004         db  0x00 ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x00 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0x08 ; '.'
0000000000001009         db  0x00 ; '.'
000000000000100a         db  0x00 ; '.'
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0x9a ; '.'
0000000000001011         db  0x92 ; '.'
0000000000001012         db  0x00 ; '.'
0000000000001013         db  0x00 ; '.'
0000000000001014         db  0x00 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x00 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0xa0 ; '.'                                         ; DATA XREF=randread_new+270
0000000000001019         db  0xca ; '.'
000000000000101a         db  0x20 ; ' '
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x00 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0x08 ; '.'
0000000000001021         db  0x00 ; '.'
0000000000001022         db  0x00 ; '.'
0000000000001023         db  0x00 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x00 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0x5c ; '\'
0000000000001029         db  0x92 ; '.'
000000000000102a         db  0x00 ; '.'
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x00 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0xc0 ; '.'
0000000000001031         db  0xca ; '.'
0000000000001032         db  0x20 ; ' '
0000000000001033         db  0x00 ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x00 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0x08 ; '.'                                         ; DATA XREF=randread_new+74, randread_new+176, randread_new+328, randread_free+12
0000000000001039         db  0x00 ; '.'
000000000000103a         db  0x00 ; '.'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0xa8 ; '.'
0000000000001041         db  0x92 ; '.'
0000000000001042         db  0x00 ; '.'
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x00 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0xe0 ; '.'
0000000000001049         db  0xca ; '.'
000000000000104a         db  0x20 ; ' '
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0x08 ; '.'
0000000000001051         db  0x00 ; '.'
0000000000001052         db  0x00 ; '.'
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0xb8 ; '.'
0000000000001059         db  0x92 ; '.'
000000000000105a         db  0x00 ; '.'
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x00 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0x00 ; '.'
0000000000001061         db  0xcb ; '.'
0000000000001062         db  0x20 ; ' '
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0x08 ; '.'
0000000000001069         db  0x00 ; '.'
000000000000106a         db  0x00 ; '.'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0xbd ; '.'
0000000000001071         db  0x92 ; '.'
0000000000001072         db  0x00 ; '.'
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x00 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x40 ; '@'
0000000000001079         db  0xcb ; '.'
000000000000107a         db  0x20 ; ' '
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0x08 ; '.'
0000000000001081         db  0x00 ; '.'
0000000000001082         db  0x00 ; '.'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0xc1 ; '.'
0000000000001089         db  0x97 ; '.'
000000000000108a         db  0x00 ; '.'
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x00 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x48 ; 'H'
0000000000001091         db  0xcb ; '.'
0000000000001092         db  0x20 ; ' '
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0x08 ; '.'
0000000000001099         db  0x00 ; '.'
000000000000109a         db  0x00 ; '.'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0xc9 ; '.'
00000000000010a1         db  0x97 ; '.'
00000000000010a2         db  0x00 ; '.'
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x00 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x50 ; 'P'
00000000000010a9         db  0xcb ; '.'
00000000000010aa         db  0x20 ; ' '
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x08 ; '.'
00000000000010b1         db  0x00 ; '.'
00000000000010b2         db  0x00 ; '.'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0xcf ; '.'
00000000000010b9         db  0x97 ; '.'
00000000000010ba         db  0x00 ; '.'
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x58 ; 'X'
00000000000010c1         db  0xcb ; '.'
00000000000010c2         db  0x20 ; ' '
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x08 ; '.'
00000000000010c9         db  0x00 ; '.'
00000000000010ca         db  0x00 ; '.'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0xdc ; '.'
00000000000010d1         db  0x97 ; '.'
00000000000010d2         db  0x00 ; '.'
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x00 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x60 ; '`'
00000000000010d9         db  0xcb ; '.'
00000000000010da         db  0x20 ; ' '
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x08 ; '.'
00000000000010e1         db  0x00 ; '.'
00000000000010e2         db  0x00 ; '.'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0xe9 ; '.'
00000000000010e9         db  0x97 ; '.'
00000000000010ea         db  0x00 ; '.'
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x00 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x68 ; 'h'
00000000000010f1         db  0xcb ; '.'
00000000000010f2         db  0x20 ; ' '
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0x08 ; '.'
00000000000010f9         db  0x00 ; '.'
00000000000010fa         db  0x00 ; '.'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0x67 ; 'g'
0000000000001101         db  0x92 ; '.'
0000000000001102         db  0x00 ; '.'
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x00 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x70 ; 'p'
0000000000001109         db  0xcb ; '.'
000000000000110a         db  0x20 ; ' '
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x00 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0x08 ; '.'
0000000000001111         db  0x00 ; '.'
0000000000001112         db  0x00 ; '.'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0xfd ; '.'
0000000000001119         db  0x97 ; '.'
000000000000111a         db  0x00 ; '.'
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x00 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x78 ; 'x'
0000000000001121         db  0xcb ; '.'
0000000000001122         db  0x20 ; ' '
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x00 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x08 ; '.'
0000000000001129         db  0x00 ; '.'
000000000000112a         db  0x00 ; '.'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0xe2 ; '.'
0000000000001131         db  0x97 ; '.'
0000000000001132         db  0x00 ; '.'
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x80 ; '.'
0000000000001139         db  0xcb ; '.'
000000000000113a         db  0x20 ; ' '
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x00 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x08 ; '.'
0000000000001141         db  0x00 ; '.'
0000000000001142         db  0x00 ; '.'
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0xbd ; '.'
0000000000001149         db  0x91 ; '.'
000000000000114a         db  0x00 ; '.'
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x00 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x88 ; '.'
0000000000001151         db  0xcb ; '.'
0000000000001152         db  0x20 ; ' '
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x08 ; '.'
0000000000001159         db  0x00 ; '.'
000000000000115a         db  0x00 ; '.'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0x05 ; '.'
0000000000001161         db  0x98 ; '.'
0000000000001162         db  0x00 ; '.'
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0x08 ; '.'
0000000000001169         db  0xd0 ; '.'
000000000000116a         db  0x20 ; ' '
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x00 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x08 ; '.'
0000000000001171         db  0x00 ; '.'
0000000000001172         db  0x00 ; '.'
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0x08 ; '.'
0000000000001179         db  0xd0 ; '.'
000000000000117a         db  0x20 ; ' '
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0x10 ; '.'
0000000000001181         db  0xd0 ; '.'
0000000000001182         db  0x20 ; ' '
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x08 ; '.'
0000000000001189         db  0x00 ; '.'
000000000000118a         db  0x00 ; '.'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0x59 ; 'Y'
0000000000001191         db  0x97 ; '.'
0000000000001192         db  0x00 ; '.'
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x60 ; '`'
0000000000001199         db  0xd0 ; '.'
000000000000119a         db  0x20 ; ' '
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x08 ; '.'
00000000000011a1         db  0x00 ; '.'
00000000000011a2         db  0x00 ; '.'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0x70 ; 'p'
00000000000011a9         db  0xd0 ; '.'
00000000000011aa         db  0x20 ; ' '
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x78 ; 'x'
00000000000011b1         db  0xd0 ; '.'
00000000000011b2         db  0x20 ; ' '
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x08 ; '.'
00000000000011b9         db  0x00 ; '.'
00000000000011ba         db  0x00 ; '.'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0x00 ; '.'
00000000000011c1         db  0xd1 ; '.'
00000000000011c2         db  0x20 ; ' '
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0xc0 ; '.'
00000000000011c9         db  0xcf ; '.'
00000000000011ca         db  0x20 ; ' '
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x06 ; '.'
00000000000011d1         db  0x00 ; '.'
00000000000011d2         db  0x00 ; '.'
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x02 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0x00 ; '.'
00000000000011d9         db  0x00 ; '.'
00000000000011da         db  0x00 ; '.'
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0xc8 ; '.'
00000000000011e1         db  0xcf ; '.'
00000000000011e2         db  0x20 ; ' '
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x06 ; '.'
00000000000011e9         db  0x00 ; '.'
00000000000011ea         db  0x00 ; '.'
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x06 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0x00 ; '.'
00000000000011f1         db  0x00 ; '.'
00000000000011f2         db  0x00 ; '.'
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0xd0 ; '.'
00000000000011f9         db  0xcf ; '.'
00000000000011fa         db  0x20 ; ' '
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x00 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x06 ; '.'
0000000000001201         db  0x00 ; '.'
0000000000001202         db  0x00 ; '.'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x27 ; '''
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0x00 ; '.'
0000000000001209         db  0x00 ; '.'
000000000000120a         db  0x00 ; '.'
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0xd8 ; '.'
0000000000001211         db  0xcf ; '.'
0000000000001212         db  0x20 ; ' '
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x00 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x06 ; '.'
0000000000001219         db  0x00 ; '.'
000000000000121a         db  0x00 ; '.'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x2c ; ','
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0x00 ; '.'
0000000000001221         db  0x00 ; '.'
0000000000001222         db  0x00 ; '.'
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0xe0 ; '.'
0000000000001229         db  0xcf ; '.'
000000000000122a         db  0x20 ; ' '
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x00 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x06 ; '.'
0000000000001231         db  0x00 ; '.'
0000000000001232         db  0x00 ; '.'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x46 ; 'F'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0x00 ; '.'
0000000000001239         db  0x00 ; '.'
000000000000123a         db  0x00 ; '.'
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0xe8 ; '.'
0000000000001241         db  0xcf ; '.'
0000000000001242         db  0x20 ; ' '
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x00 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x06 ; '.'
0000000000001249         db  0x00 ; '.'
000000000000124a         db  0x00 ; '.'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x49 ; 'I'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0x00 ; '.'
0000000000001251         db  0x00 ; '.'
0000000000001252         db  0x00 ; '.'
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0x80 ; '.'
0000000000001259         db  0xd0 ; '.'
000000000000125a         db  0x20 ; ' '
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x00 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x05 ; '.'
0000000000001261         db  0x00 ; '.'
0000000000001262         db  0x00 ; '.'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x4c ; 'L'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0x00 ; '.'
0000000000001269         db  0x00 ; '.'
000000000000126a         db  0x00 ; '.'
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x88 ; '.'
0000000000001271         db  0xd0 ; '.'
0000000000001272         db  0x20 ; ' '
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x00 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x05 ; '.'
0000000000001279         db  0x00 ; '.'
000000000000127a         db  0x00 ; '.'
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x4b ; 'K'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0x00 ; '.'
0000000000001281         db  0x00 ; '.'
0000000000001282         db  0x00 ; '.'
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0x90 ; '.'
0000000000001289         db  0xd0 ; '.'
000000000000128a         db  0x20 ; ' '
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x00 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0x05 ; '.'
0000000000001291         db  0x00 ; '.'
0000000000001292         db  0x00 ; '.'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x4d ; 'M'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0x00 ; '.'
0000000000001299         db  0x00 ; '.'
000000000000129a         db  0x00 ; '.'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0x98 ; '.'
00000000000012a1         db  0xd0 ; '.'
00000000000012a2         db  0x20 ; ' '
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x00 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x05 ; '.'
00000000000012a9         db  0x00 ; '.'
00000000000012aa         db  0x00 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x52 ; 'R'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0x00 ; '.'
00000000000012b1         db  0x00 ; '.'
00000000000012b2         db  0x00 ; '.'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0xa0 ; '.'
00000000000012b9         db  0xd0 ; '.'
00000000000012ba         db  0x20 ; ' '
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x00 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x05 ; '.'
00000000000012c1         db  0x00 ; '.'
00000000000012c2         db  0x00 ; '.'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x53 ; 'S'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0x00 ; '.'
00000000000012c9         db  0x00 ; '.'
00000000000012ca         db  0x00 ; '.'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0xa8 ; '.'
00000000000012d1         db  0xd0 ; '.'
00000000000012d2         db  0x20 ; ' '
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x00 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x05 ; '.'
00000000000012d9         db  0x00 ; '.'
00000000000012da         db  0x00 ; '.'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x4f ; 'O'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0x00 ; '.'
00000000000012e1         db  0x00 ; '.'
00000000000012e2         db  0x00 ; '.'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0xc0 ; '.'
00000000000012e9         db  0xd0 ; '.'
00000000000012ea         db  0x20 ; ' '
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x00 ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x05 ; '.'
00000000000012f1         db  0x00 ; '.'
00000000000012f2         db  0x00 ; '.'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x51 ; 'Q'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0x00 ; '.'
00000000000012f9         db  0x00 ; '.'
00000000000012fa         db  0x00 ; '.'
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x1300; 0x1960[ (1632 bytes)
        ; File offset : [4864; 6496[ (1632 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001300         db  0xa0 ; '.'
0000000000001301         db  0xcd ; '.'
0000000000001302         db  0x20 ; ' '
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x00 ; '.'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x07 ; '.'
0000000000001309         db  0x00 ; '.'
000000000000130a         db  0x00 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x01 ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0x00 ; '.'
0000000000001311         db  0x00 ; '.'
0000000000001312         db  0x00 ; '.'
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0xa8 ; '.'
0000000000001319         db  0xcd ; '.'
000000000000131a         db  0x20 ; ' '
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x00 ; '.'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x07 ; '.'
0000000000001321         db  0x00 ; '.'
0000000000001322         db  0x00 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x03 ; '.'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0x00 ; '.'
0000000000001329         db  0x00 ; '.'
000000000000132a         db  0x00 ; '.'
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0xb0 ; '.'
0000000000001331         db  0xcd ; '.'
0000000000001332         db  0x20 ; ' '
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x00 ; '.'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x07 ; '.'
0000000000001339         db  0x00 ; '.'
000000000000133a         db  0x00 ; '.'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x04 ; '.'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0x00 ; '.'
0000000000001341         db  0x00 ; '.'
0000000000001342         db  0x00 ; '.'
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0xb8 ; '.'
0000000000001349         db  0xcd ; '.'
000000000000134a         db  0x20 ; ' '
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x00 ; '.'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x07 ; '.'
0000000000001351         db  0x00 ; '.'
0000000000001352         db  0x00 ; '.'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x05 ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0x00 ; '.'
0000000000001359         db  0x00 ; '.'
000000000000135a         db  0x00 ; '.'
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0xc0 ; '.'
0000000000001361         db  0xcd ; '.'
0000000000001362         db  0x20 ; ' '
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x00 ; '.'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x07 ; '.'
0000000000001369         db  0x00 ; '.'
000000000000136a         db  0x00 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x07 ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0x00 ; '.'
0000000000001371         db  0x00 ; '.'
0000000000001372         db  0x00 ; '.'
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0xc8 ; '.'
0000000000001379         db  0xcd ; '.'
000000000000137a         db  0x20 ; ' '
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x00 ; '.'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0x07 ; '.'
0000000000001381         db  0x00 ; '.'
0000000000001382         db  0x00 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x08 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0x00 ; '.'
0000000000001389         db  0x00 ; '.'
000000000000138a         db  0x00 ; '.'
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'
0000000000001390         db  0xd0 ; '.'
0000000000001391         db  0xcd ; '.'
0000000000001392         db  0x20 ; ' '
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x00 ; '.'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0x07 ; '.'
0000000000001399         db  0x00 ; '.'
000000000000139a         db  0x00 ; '.'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x09 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0x00 ; '.'
00000000000013a1         db  0x00 ; '.'
00000000000013a2         db  0x00 ; '.'
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x00 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0xd8 ; '.'
00000000000013a9         db  0xcd ; '.'
00000000000013aa         db  0x20 ; ' '
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x00 ; '.'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0x07 ; '.'
00000000000013b1         db  0x00 ; '.'
00000000000013b2         db  0x00 ; '.'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x0a ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0x00 ; '.'
00000000000013b9         db  0x00 ; '.'
00000000000013ba         db  0x00 ; '.'
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0xe0 ; '.'
00000000000013c1         db  0xcd ; '.'
00000000000013c2         db  0x20 ; ' '
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x00 ; '.'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0x07 ; '.'
00000000000013c9         db  0x00 ; '.'
00000000000013ca         db  0x00 ; '.'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x0b ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0x00 ; '.'
00000000000013d1         db  0x00 ; '.'
00000000000013d2         db  0x00 ; '.'
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x00 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0xe8 ; '.'
00000000000013d9         db  0xcd ; '.'
00000000000013da         db  0x20 ; ' '
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x00 ; '.'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x07 ; '.'
00000000000013e1         db  0x00 ; '.'
00000000000013e2         db  0x00 ; '.'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x0c ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0x00 ; '.'
00000000000013e9         db  0x00 ; '.'
00000000000013ea         db  0x00 ; '.'
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0xf0 ; '.'
00000000000013f1         db  0xcd ; '.'
00000000000013f2         db  0x20 ; ' '
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x00 ; '.'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x07 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x0d ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'
0000000000001400         db  0x00 ; '.'
0000000000001401         db  0x00 ; '.'
0000000000001402         db  0x00 ; '.'
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0xf8 ; '.'
0000000000001409         db  0xcd ; '.'
000000000000140a         db  0x20 ; ' '
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x00 ; '.'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x07 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x0e ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0x00 ; '.'
0000000000001419         db  0x00 ; '.'
000000000000141a         db  0x00 ; '.'
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0x00 ; '.'
0000000000001421         db  0xce ; '.'
0000000000001422         db  0x20 ; ' '
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x00 ; '.'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x07 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x00 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x0f ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0x00 ; '.'
0000000000001431         db  0x00 ; '.'
0000000000001432         db  0x00 ; '.'
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0x08 ; '.'
0000000000001439         db  0xce ; '.'
000000000000143a         db  0x20 ; ' '
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x00 ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x07 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x00 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x10 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0x00 ; '.'
0000000000001449         db  0x00 ; '.'
000000000000144a         db  0x00 ; '.'
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0x10 ; '.'
0000000000001451         db  0xce ; '.'
0000000000001452         db  0x20 ; ' '
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x00 ; '.'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x07 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x00 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x11 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0x00 ; '.'
0000000000001461         db  0x00 ; '.'
0000000000001462         db  0x00 ; '.'
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0x18 ; '.'
0000000000001469         db  0xce ; '.'
000000000000146a         db  0x20 ; ' '
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x00 ; '.'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x07 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x00 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x12 ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0x00 ; '.'
0000000000001479         db  0x00 ; '.'
000000000000147a         db  0x00 ; '.'
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0x20 ; ' '
0000000000001481         db  0xce ; '.'
0000000000001482         db  0x20 ; ' '
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x00 ; '.'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x07 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x00 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x13 ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0x00 ; '.'
0000000000001491         db  0x00 ; '.'
0000000000001492         db  0x00 ; '.'
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0x28 ; '('
0000000000001499         db  0xce ; '.'
000000000000149a         db  0x20 ; ' '
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x00 ; '.'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x07 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x00 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x14 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0x00 ; '.'
00000000000014a9         db  0x00 ; '.'
00000000000014aa         db  0x00 ; '.'
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0x30 ; '0'
00000000000014b1         db  0xce ; '.'
00000000000014b2         db  0x20 ; ' '
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x00 ; '.'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x07 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x00 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x15 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0x00 ; '.'
00000000000014c1         db  0x00 ; '.'
00000000000014c2         db  0x00 ; '.'
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x38 ; '8'
00000000000014c9         db  0xce ; '.'
00000000000014ca         db  0x20 ; ' '
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x00 ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x07 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x00 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x16 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0x00 ; '.'
00000000000014d9         db  0x00 ; '.'
00000000000014da         db  0x00 ; '.'
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x40 ; '@'
00000000000014e1         db  0xce ; '.'
00000000000014e2         db  0x20 ; ' '
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x00 ; '.'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x07 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x00 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x17 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0x00 ; '.'
00000000000014f1         db  0x00 ; '.'
00000000000014f2         db  0x00 ; '.'
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0x48 ; 'H'
00000000000014f9         db  0xce ; '.'
00000000000014fa         db  0x20 ; ' '
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x00 ; '.'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x07 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x00 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x18 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0x00 ; '.'
0000000000001509         db  0x00 ; '.'
000000000000150a         db  0x00 ; '.'
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0x50 ; 'P'
0000000000001511         db  0xce ; '.'
0000000000001512         db  0x20 ; ' '
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x00 ; '.'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x07 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x19 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0x00 ; '.'
0000000000001521         db  0x00 ; '.'
0000000000001522         db  0x00 ; '.'
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0x58 ; 'X'
0000000000001529         db  0xce ; '.'
000000000000152a         db  0x20 ; ' '
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x00 ; '.'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x07 ; '.'
0000000000001531         db  0x00 ; '.'
0000000000001532         db  0x00 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x1a ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0x00 ; '.'
0000000000001539         db  0x00 ; '.'
000000000000153a         db  0x00 ; '.'
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x60 ; '`'
0000000000001541         db  0xce ; '.'
0000000000001542         db  0x20 ; ' '
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x00 ; '.'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x07 ; '.'
0000000000001549         db  0x00 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x1b ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x00 ; '.'
0000000000001551         db  0x00 ; '.'
0000000000001552         db  0x00 ; '.'
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x68 ; 'h'
0000000000001559         db  0xce ; '.'
000000000000155a         db  0x20 ; ' '
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x00 ; '.'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0x07 ; '.'
0000000000001561         db  0x00 ; '.'
0000000000001562         db  0x00 ; '.'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x1c ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0x00 ; '.'
0000000000001569         db  0x00 ; '.'
000000000000156a         db  0x00 ; '.'
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x70 ; 'p'
0000000000001571         db  0xce ; '.'
0000000000001572         db  0x20 ; ' '
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x00 ; '.'
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0x07 ; '.'
0000000000001579         db  0x00 ; '.'
000000000000157a         db  0x00 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x1d ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0x00 ; '.'
0000000000001581         db  0x00 ; '.'
0000000000001582         db  0x00 ; '.'
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0x78 ; 'x'
0000000000001589         db  0xce ; '.'
000000000000158a         db  0x20 ; ' '
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x00 ; '.'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x07 ; '.'
0000000000001591         db  0x00 ; '.'
0000000000001592         db  0x00 ; '.'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x1e ; '.'
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0x00 ; '.'
0000000000001599         db  0x00 ; '.'
000000000000159a         db  0x00 ; '.'
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x00 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x80 ; '.'
00000000000015a1         db  0xce ; '.'
00000000000015a2         db  0x20 ; ' '
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x00 ; '.'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0x07 ; '.'
00000000000015a9         db  0x00 ; '.'
00000000000015aa         db  0x00 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x1f ; '.'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0x00 ; '.'
00000000000015b1         db  0x00 ; '.'
00000000000015b2         db  0x00 ; '.'
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x88 ; '.'
00000000000015b9         db  0xce ; '.'
00000000000015ba         db  0x20 ; ' '
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x00 ; '.'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0x07 ; '.'
00000000000015c1         db  0x00 ; '.'
00000000000015c2         db  0x00 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x20 ; ' '
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0x00 ; '.'
00000000000015c9         db  0x00 ; '.'
00000000000015ca         db  0x00 ; '.'
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x90 ; '.'
00000000000015d1         db  0xce ; '.'
00000000000015d2         db  0x20 ; ' '
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x00 ; '.'
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x07 ; '.'
00000000000015d9         db  0x00 ; '.'
00000000000015da         db  0x00 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x21 ; '!'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0x00 ; '.'
00000000000015e1         db  0x00 ; '.'
00000000000015e2         db  0x00 ; '.'
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0x98 ; '.'
00000000000015e9         db  0xce ; '.'
00000000000015ea         db  0x20 ; ' '
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x00 ; '.'
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x07 ; '.'
00000000000015f1         db  0x00 ; '.'
00000000000015f2         db  0x00 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x22 ; '"'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0x00 ; '.'
00000000000015f9         db  0x00 ; '.'
00000000000015fa         db  0x00 ; '.'
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0xa0 ; '.'
0000000000001601         db  0xce ; '.'
0000000000001602         db  0x20 ; ' '
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x00 ; '.'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0x07 ; '.'
0000000000001609         db  0x00 ; '.'
000000000000160a         db  0x00 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x23 ; '#'
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0x00 ; '.'
0000000000001611         db  0x00 ; '.'
0000000000001612         db  0x00 ; '.'
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0xa8 ; '.'
0000000000001619         db  0xce ; '.'
000000000000161a         db  0x20 ; ' '
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x00 ; '.'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0x07 ; '.'
0000000000001621         db  0x00 ; '.'
0000000000001622         db  0x00 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x24 ; '$'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0x00 ; '.'
0000000000001629         db  0x00 ; '.'
000000000000162a         db  0x00 ; '.'
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0xb0 ; '.'
0000000000001631         db  0xce ; '.'
0000000000001632         db  0x20 ; ' '
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x00 ; '.'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x07 ; '.'
0000000000001639         db  0x00 ; '.'
000000000000163a         db  0x00 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x25 ; '%'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0x00 ; '.'
0000000000001641         db  0x00 ; '.'
0000000000001642         db  0x00 ; '.'
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0xb8 ; '.'
0000000000001649         db  0xce ; '.'
000000000000164a         db  0x20 ; ' '
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x00 ; '.'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0x07 ; '.'
0000000000001651         db  0x00 ; '.'
0000000000001652         db  0x00 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x26 ; '&'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0x00 ; '.'
0000000000001659         db  0x00 ; '.'
000000000000165a         db  0x00 ; '.'
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0xc0 ; '.'
0000000000001661         db  0xce ; '.'
0000000000001662         db  0x20 ; ' '
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x00 ; '.'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0x07 ; '.'
0000000000001669         db  0x00 ; '.'
000000000000166a         db  0x00 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x28 ; '('
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0x00 ; '.'
0000000000001671         db  0x00 ; '.'
0000000000001672         db  0x00 ; '.'
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0xc8 ; '.'
0000000000001679         db  0xce ; '.'
000000000000167a         db  0x20 ; ' '
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x00 ; '.'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0x07 ; '.'
0000000000001681         db  0x00 ; '.'
0000000000001682         db  0x00 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x29 ; ')'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0x00 ; '.'
0000000000001689         db  0x00 ; '.'
000000000000168a         db  0x00 ; '.'
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0xd0 ; '.'
0000000000001691         db  0xce ; '.'
0000000000001692         db  0x20 ; ' '
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x00 ; '.'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x07 ; '.'
0000000000001699         db  0x00 ; '.'
000000000000169a         db  0x00 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x2a ; '*'
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0x00 ; '.'
00000000000016a1         db  0x00 ; '.'
00000000000016a2         db  0x00 ; '.'
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0xd8 ; '.'
00000000000016a9         db  0xce ; '.'
00000000000016aa         db  0x20 ; ' '
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x00 ; '.'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x07 ; '.'
00000000000016b1         db  0x00 ; '.'
00000000000016b2         db  0x00 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x2b ; '+'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0x00 ; '.'
00000000000016b9         db  0x00 ; '.'
00000000000016ba         db  0x00 ; '.'
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0xe0 ; '.'
00000000000016c1         db  0xce ; '.'
00000000000016c2         db  0x20 ; ' '
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x00 ; '.'
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x07 ; '.'
00000000000016c9         db  0x00 ; '.'
00000000000016ca         db  0x00 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x2d ; '-'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0x00 ; '.'
00000000000016d1         db  0x00 ; '.'
00000000000016d2         db  0x00 ; '.'
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0xe8 ; '.'
00000000000016d9         db  0xce ; '.'
00000000000016da         db  0x20 ; ' '
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x00 ; '.'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0x07 ; '.'
00000000000016e1         db  0x00 ; '.'
00000000000016e2         db  0x00 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x2e ; '.'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0x00 ; '.'
00000000000016e9         db  0x00 ; '.'
00000000000016ea         db  0x00 ; '.'
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0xf0 ; '.'
00000000000016f1         db  0xce ; '.'
00000000000016f2         db  0x20 ; ' '
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x00 ; '.'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x07 ; '.'
00000000000016f9         db  0x00 ; '.'
00000000000016fa         db  0x00 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x2f ; '/'
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0x00 ; '.'
0000000000001701         db  0x00 ; '.'
0000000000001702         db  0x00 ; '.'
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0xf8 ; '.'
0000000000001709         db  0xce ; '.'
000000000000170a         db  0x20 ; ' '
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x00 ; '.'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x07 ; '.'
0000000000001711         db  0x00 ; '.'
0000000000001712         db  0x00 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x30 ; '0'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0x00 ; '.'
0000000000001719         db  0x00 ; '.'
000000000000171a         db  0x00 ; '.'
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0x00 ; '.'
0000000000001721         db  0xcf ; '.'
0000000000001722         db  0x20 ; ' '
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x00 ; '.'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x07 ; '.'
0000000000001729         db  0x00 ; '.'
000000000000172a         db  0x00 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x31 ; '1'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0x00 ; '.'
0000000000001731         db  0x00 ; '.'
0000000000001732         db  0x00 ; '.'
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0x08 ; '.'
0000000000001739         db  0xcf ; '.'
000000000000173a         db  0x20 ; ' '
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x00 ; '.'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0x07 ; '.'
0000000000001741         db  0x00 ; '.'
0000000000001742         db  0x00 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x32 ; '2'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0x00 ; '.'
0000000000001749         db  0x00 ; '.'
000000000000174a         db  0x00 ; '.'
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0x10 ; '.'
0000000000001751         db  0xcf ; '.'
0000000000001752         db  0x20 ; ' '
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x00 ; '.'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0x07 ; '.'
0000000000001759         db  0x00 ; '.'
000000000000175a         db  0x00 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x33 ; '3'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0x00 ; '.'
0000000000001761         db  0x00 ; '.'
0000000000001762         db  0x00 ; '.'
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0x18 ; '.'
0000000000001769         db  0xcf ; '.'
000000000000176a         db  0x20 ; ' '
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x00 ; '.'
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0x07 ; '.'
0000000000001771         db  0x00 ; '.'
0000000000001772         db  0x00 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x34 ; '4'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0x00 ; '.'
0000000000001779         db  0x00 ; '.'
000000000000177a         db  0x00 ; '.'
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0x20 ; ' '
0000000000001781         db  0xcf ; '.'
0000000000001782         db  0x20 ; ' '
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x00 ; '.'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0x07 ; '.'
0000000000001789         db  0x00 ; '.'
000000000000178a         db  0x00 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x35 ; '5'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0x00 ; '.'
0000000000001791         db  0x00 ; '.'
0000000000001792         db  0x00 ; '.'
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x00 ; '.'
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0x28 ; '('
0000000000001799         db  0xcf ; '.'
000000000000179a         db  0x20 ; ' '
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x00 ; '.'
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0x07 ; '.'
00000000000017a1         db  0x00 ; '.'
00000000000017a2         db  0x00 ; '.'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x36 ; '6'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0x00 ; '.'
00000000000017a9         db  0x00 ; '.'
00000000000017aa         db  0x00 ; '.'
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0x30 ; '0'
00000000000017b1         db  0xcf ; '.'
00000000000017b2         db  0x20 ; ' '
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x00 ; '.'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0x07 ; '.'
00000000000017b9         db  0x00 ; '.'
00000000000017ba         db  0x00 ; '.'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x37 ; '7'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0x00 ; '.'
00000000000017c1         db  0x00 ; '.'
00000000000017c2         db  0x00 ; '.'
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x00 ; '.'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'
00000000000017c8         db  0x38 ; '8'
00000000000017c9         db  0xcf ; '.'
00000000000017ca         db  0x20 ; ' '
00000000000017cb         db  0x00 ; '.'
00000000000017cc         db  0x00 ; '.'
00000000000017cd         db  0x00 ; '.'
00000000000017ce         db  0x00 ; '.'
00000000000017cf         db  0x00 ; '.'
00000000000017d0         db  0x07 ; '.'
00000000000017d1         db  0x00 ; '.'
00000000000017d2         db  0x00 ; '.'
00000000000017d3         db  0x00 ; '.'
00000000000017d4         db  0x38 ; '8'
00000000000017d5         db  0x00 ; '.'
00000000000017d6         db  0x00 ; '.'
00000000000017d7         db  0x00 ; '.'
00000000000017d8         db  0x00 ; '.'
00000000000017d9         db  0x00 ; '.'
00000000000017da         db  0x00 ; '.'
00000000000017db         db  0x00 ; '.'
00000000000017dc         db  0x00 ; '.'
00000000000017dd         db  0x00 ; '.'
00000000000017de         db  0x00 ; '.'
00000000000017df         db  0x00 ; '.'
00000000000017e0         db  0x40 ; '@'
00000000000017e1         db  0xcf ; '.'
00000000000017e2         db  0x20 ; ' '
00000000000017e3         db  0x00 ; '.'
00000000000017e4         db  0x00 ; '.'
00000000000017e5         db  0x00 ; '.'
00000000000017e6         db  0x00 ; '.'
00000000000017e7         db  0x00 ; '.'
00000000000017e8         db  0x07 ; '.'
00000000000017e9         db  0x00 ; '.'
00000000000017ea         db  0x00 ; '.'
00000000000017eb         db  0x00 ; '.'
00000000000017ec         db  0x39 ; '9'
00000000000017ed         db  0x00 ; '.'
00000000000017ee         db  0x00 ; '.'
00000000000017ef         db  0x00 ; '.'
00000000000017f0         db  0x00 ; '.'
00000000000017f1         db  0x00 ; '.'
00000000000017f2         db  0x00 ; '.'
00000000000017f3         db  0x00 ; '.'
00000000000017f4         db  0x00 ; '.'
00000000000017f5         db  0x00 ; '.'
00000000000017f6         db  0x00 ; '.'
00000000000017f7         db  0x00 ; '.'
00000000000017f8         db  0x48 ; 'H'
00000000000017f9         db  0xcf ; '.'
00000000000017fa         db  0x20 ; ' '
00000000000017fb         db  0x00 ; '.'
00000000000017fc         db  0x00 ; '.'
00000000000017fd         db  0x00 ; '.'
00000000000017fe         db  0x00 ; '.'
00000000000017ff         db  0x00 ; '.'
0000000000001800         db  0x07 ; '.'
0000000000001801         db  0x00 ; '.'
0000000000001802         db  0x00 ; '.'
0000000000001803         db  0x00 ; '.'
0000000000001804         db  0x3a ; ':'
0000000000001805         db  0x00 ; '.'
0000000000001806         db  0x00 ; '.'
0000000000001807         db  0x00 ; '.'
0000000000001808         db  0x00 ; '.'
0000000000001809         db  0x00 ; '.'
000000000000180a         db  0x00 ; '.'
000000000000180b         db  0x00 ; '.'
000000000000180c         db  0x00 ; '.'
000000000000180d         db  0x00 ; '.'
000000000000180e         db  0x00 ; '.'
000000000000180f         db  0x00 ; '.'
0000000000001810         db  0x50 ; 'P'
0000000000001811         db  0xcf ; '.'
0000000000001812         db  0x20 ; ' '
0000000000001813         db  0x00 ; '.'
0000000000001814         db  0x00 ; '.'
0000000000001815         db  0x00 ; '.'
0000000000001816         db  0x00 ; '.'
0000000000001817         db  0x00 ; '.'
0000000000001818         db  0x07 ; '.'
0000000000001819         db  0x00 ; '.'
000000000000181a         db  0x00 ; '.'
000000000000181b         db  0x00 ; '.'
000000000000181c         db  0x3b ; ';'
000000000000181d         db  0x00 ; '.'
000000000000181e         db  0x00 ; '.'
000000000000181f         db  0x00 ; '.'
0000000000001820         db  0x00 ; '.'
0000000000001821         db  0x00 ; '.'
0000000000001822         db  0x00 ; '.'
0000000000001823         db  0x00 ; '.'
0000000000001824         db  0x00 ; '.'
0000000000001825         db  0x00 ; '.'
0000000000001826         db  0x00 ; '.'
0000000000001827         db  0x00 ; '.'
0000000000001828         db  0x58 ; 'X'
0000000000001829         db  0xcf ; '.'
000000000000182a         db  0x20 ; ' '
000000000000182b         db  0x00 ; '.'
000000000000182c         db  0x00 ; '.'
000000000000182d         db  0x00 ; '.'
000000000000182e         db  0x00 ; '.'
000000000000182f         db  0x00 ; '.'
0000000000001830         db  0x07 ; '.'
0000000000001831         db  0x00 ; '.'
0000000000001832         db  0x00 ; '.'
0000000000001833         db  0x00 ; '.'
0000000000001834         db  0x3c ; '<'
0000000000001835         db  0x00 ; '.'
0000000000001836         db  0x00 ; '.'
0000000000001837         db  0x00 ; '.'
0000000000001838         db  0x00 ; '.'
0000000000001839         db  0x00 ; '.'
000000000000183a         db  0x00 ; '.'
000000000000183b         db  0x00 ; '.'
000000000000183c         db  0x00 ; '.'
000000000000183d         db  0x00 ; '.'
000000000000183e         db  0x00 ; '.'
000000000000183f         db  0x00 ; '.'
0000000000001840         db  0x60 ; '`'
0000000000001841         db  0xcf ; '.'
0000000000001842         db  0x20 ; ' '
0000000000001843         db  0x00 ; '.'
0000000000001844         db  0x00 ; '.'
0000000000001845         db  0x00 ; '.'
0000000000001846         db  0x00 ; '.'
0000000000001847         db  0x00 ; '.'
0000000000001848         db  0x07 ; '.'
0000000000001849         db  0x00 ; '.'
000000000000184a         db  0x00 ; '.'
000000000000184b         db  0x00 ; '.'
000000000000184c         db  0x3d ; '='
000000000000184d         db  0x00 ; '.'
000000000000184e         db  0x00 ; '.'
000000000000184f         db  0x00 ; '.'
0000000000001850         db  0x00 ; '.'
0000000000001851         db  0x00 ; '.'
0000000000001852         db  0x00 ; '.'
0000000000001853         db  0x00 ; '.'
0000000000001854         db  0x00 ; '.'
0000000000001855         db  0x00 ; '.'
0000000000001856         db  0x00 ; '.'
0000000000001857         db  0x00 ; '.'
0000000000001858         db  0x68 ; 'h'
0000000000001859         db  0xcf ; '.'
000000000000185a         db  0x20 ; ' '
000000000000185b         db  0x00 ; '.'
000000000000185c         db  0x00 ; '.'
000000000000185d         db  0x00 ; '.'
000000000000185e         db  0x00 ; '.'
000000000000185f         db  0x00 ; '.'
0000000000001860         db  0x07 ; '.'
0000000000001861         db  0x00 ; '.'
0000000000001862         db  0x00 ; '.'
0000000000001863         db  0x00 ; '.'
0000000000001864         db  0x3e ; '>'
0000000000001865         db  0x00 ; '.'
0000000000001866         db  0x00 ; '.'
0000000000001867         db  0x00 ; '.'
0000000000001868         db  0x00 ; '.'
0000000000001869         db  0x00 ; '.'
000000000000186a         db  0x00 ; '.'
000000000000186b         db  0x00 ; '.'
000000000000186c         db  0x00 ; '.'
000000000000186d         db  0x00 ; '.'
000000000000186e         db  0x00 ; '.'
000000000000186f         db  0x00 ; '.'
0000000000001870         db  0x70 ; 'p'
0000000000001871         db  0xcf ; '.'
0000000000001872         db  0x20 ; ' '
0000000000001873         db  0x00 ; '.'
0000000000001874         db  0x00 ; '.'
0000000000001875         db  0x00 ; '.'
0000000000001876         db  0x00 ; '.'
0000000000001877         db  0x00 ; '.'
0000000000001878         db  0x07 ; '.'
0000000000001879         db  0x00 ; '.'
000000000000187a         db  0x00 ; '.'
000000000000187b         db  0x00 ; '.'
000000000000187c         db  0x3f ; '?'
000000000000187d         db  0x00 ; '.'
000000000000187e         db  0x00 ; '.'
000000000000187f         db  0x00 ; '.'
0000000000001880         db  0x00 ; '.'
0000000000001881         db  0x00 ; '.'
0000000000001882         db  0x00 ; '.'
0000000000001883         db  0x00 ; '.'
0000000000001884         db  0x00 ; '.'
0000000000001885         db  0x00 ; '.'
0000000000001886         db  0x00 ; '.'
0000000000001887         db  0x00 ; '.'
0000000000001888         db  0x78 ; 'x'
0000000000001889         db  0xcf ; '.'
000000000000188a         db  0x20 ; ' '
000000000000188b         db  0x00 ; '.'
000000000000188c         db  0x00 ; '.'
000000000000188d         db  0x00 ; '.'
000000000000188e         db  0x00 ; '.'
000000000000188f         db  0x00 ; '.'
0000000000001890         db  0x07 ; '.'
0000000000001891         db  0x00 ; '.'
0000000000001892         db  0x00 ; '.'
0000000000001893         db  0x00 ; '.'
0000000000001894         db  0x40 ; '@'
0000000000001895         db  0x00 ; '.'
0000000000001896         db  0x00 ; '.'
0000000000001897         db  0x00 ; '.'
0000000000001898         db  0x00 ; '.'
0000000000001899         db  0x00 ; '.'
000000000000189a         db  0x00 ; '.'
000000000000189b         db  0x00 ; '.'
000000000000189c         db  0x00 ; '.'
000000000000189d         db  0x00 ; '.'
000000000000189e         db  0x00 ; '.'
000000000000189f         db  0x00 ; '.'
00000000000018a0         db  0x80 ; '.'
00000000000018a1         db  0xcf ; '.'
00000000000018a2         db  0x20 ; ' '
00000000000018a3         db  0x00 ; '.'
00000000000018a4         db  0x00 ; '.'
00000000000018a5         db  0x00 ; '.'
00000000000018a6         db  0x00 ; '.'
00000000000018a7         db  0x00 ; '.'
00000000000018a8         db  0x07 ; '.'
00000000000018a9         db  0x00 ; '.'
00000000000018aa         db  0x00 ; '.'
00000000000018ab         db  0x00 ; '.'
00000000000018ac         db  0x41 ; 'A'
00000000000018ad         db  0x00 ; '.'
00000000000018ae         db  0x00 ; '.'
00000000000018af         db  0x00 ; '.'
00000000000018b0         db  0x00 ; '.'
00000000000018b1         db  0x00 ; '.'
00000000000018b2         db  0x00 ; '.'
00000000000018b3         db  0x00 ; '.'
00000000000018b4         db  0x00 ; '.'
00000000000018b5         db  0x00 ; '.'
00000000000018b6         db  0x00 ; '.'
00000000000018b7         db  0x00 ; '.'
00000000000018b8         db  0x88 ; '.'
00000000000018b9         db  0xcf ; '.'
00000000000018ba         db  0x20 ; ' '
00000000000018bb         db  0x00 ; '.'
00000000000018bc         db  0x00 ; '.'
00000000000018bd         db  0x00 ; '.'
00000000000018be         db  0x00 ; '.'
00000000000018bf         db  0x00 ; '.'
00000000000018c0         db  0x07 ; '.'
00000000000018c1         db  0x00 ; '.'
00000000000018c2         db  0x00 ; '.'
00000000000018c3         db  0x00 ; '.'
00000000000018c4         db  0x42 ; 'B'
00000000000018c5         db  0x00 ; '.'
00000000000018c6         db  0x00 ; '.'
00000000000018c7         db  0x00 ; '.'
00000000000018c8         db  0x00 ; '.'
00000000000018c9         db  0x00 ; '.'
00000000000018ca         db  0x00 ; '.'
00000000000018cb         db  0x00 ; '.'
00000000000018cc         db  0x00 ; '.'
00000000000018cd         db  0x00 ; '.'
00000000000018ce         db  0x00 ; '.'
00000000000018cf         db  0x00 ; '.'
00000000000018d0         db  0x90 ; '.'
00000000000018d1         db  0xcf ; '.'
00000000000018d2         db  0x20 ; ' '
00000000000018d3         db  0x00 ; '.'
00000000000018d4         db  0x00 ; '.'
00000000000018d5         db  0x00 ; '.'
00000000000018d6         db  0x00 ; '.'
00000000000018d7         db  0x00 ; '.'
00000000000018d8         db  0x07 ; '.'
00000000000018d9         db  0x00 ; '.'
00000000000018da         db  0x00 ; '.'
00000000000018db         db  0x00 ; '.'
00000000000018dc         db  0x43 ; 'C'
00000000000018dd         db  0x00 ; '.'
00000000000018de         db  0x00 ; '.'
00000000000018df         db  0x00 ; '.'
00000000000018e0         db  0x00 ; '.'
00000000000018e1         db  0x00 ; '.'
00000000000018e2         db  0x00 ; '.'
00000000000018e3         db  0x00 ; '.'
00000000000018e4         db  0x00 ; '.'
00000000000018e5         db  0x00 ; '.'
00000000000018e6         db  0x00 ; '.'
00000000000018e7         db  0x00 ; '.'
00000000000018e8         db  0x98 ; '.'
00000000000018e9         db  0xcf ; '.'
00000000000018ea         db  0x20 ; ' '
00000000000018eb         db  0x00 ; '.'
00000000000018ec         db  0x00 ; '.'
00000000000018ed         db  0x00 ; '.'
00000000000018ee         db  0x00 ; '.'
00000000000018ef         db  0x00 ; '.'
00000000000018f0         db  0x07 ; '.'
00000000000018f1         db  0x00 ; '.'
00000000000018f2         db  0x00 ; '.'
00000000000018f3         db  0x00 ; '.'
00000000000018f4         db  0x44 ; 'D'
00000000000018f5         db  0x00 ; '.'
00000000000018f6         db  0x00 ; '.'
00000000000018f7         db  0x00 ; '.'
00000000000018f8         db  0x00 ; '.'
00000000000018f9         db  0x00 ; '.'
00000000000018fa         db  0x00 ; '.'
00000000000018fb         db  0x00 ; '.'
00000000000018fc         db  0x00 ; '.'
00000000000018fd         db  0x00 ; '.'
00000000000018fe         db  0x00 ; '.'
00000000000018ff         db  0x00 ; '.'
0000000000001900         db  0xa0 ; '.'
0000000000001901         db  0xcf ; '.'
0000000000001902         db  0x20 ; ' '
0000000000001903         db  0x00 ; '.'
0000000000001904         db  0x00 ; '.'
0000000000001905         db  0x00 ; '.'
0000000000001906         db  0x00 ; '.'
0000000000001907         db  0x00 ; '.'
0000000000001908         db  0x07 ; '.'
0000000000001909         db  0x00 ; '.'
000000000000190a         db  0x00 ; '.'
000000000000190b         db  0x00 ; '.'
000000000000190c         db  0x45 ; 'E'
000000000000190d         db  0x00 ; '.'
000000000000190e         db  0x00 ; '.'
000000000000190f         db  0x00 ; '.'
0000000000001910         db  0x00 ; '.'
0000000000001911         db  0x00 ; '.'
0000000000001912         db  0x00 ; '.'
0000000000001913         db  0x00 ; '.'
0000000000001914         db  0x00 ; '.'
0000000000001915         db  0x00 ; '.'
0000000000001916         db  0x00 ; '.'
0000000000001917         db  0x00 ; '.'
0000000000001918         db  0xa8 ; '.'
0000000000001919         db  0xcf ; '.'
000000000000191a         db  0x20 ; ' '
000000000000191b         db  0x00 ; '.'
000000000000191c         db  0x00 ; '.'
000000000000191d         db  0x00 ; '.'
000000000000191e         db  0x00 ; '.'
000000000000191f         db  0x00 ; '.'
0000000000001920         db  0x07 ; '.'
0000000000001921         db  0x00 ; '.'
0000000000001922         db  0x00 ; '.'
0000000000001923         db  0x00 ; '.'
0000000000001924         db  0x47 ; 'G'
0000000000001925         db  0x00 ; '.'
0000000000001926         db  0x00 ; '.'
0000000000001927         db  0x00 ; '.'
0000000000001928         db  0x00 ; '.'
0000000000001929         db  0x00 ; '.'
000000000000192a         db  0x00 ; '.'
000000000000192b         db  0x00 ; '.'
000000000000192c         db  0x00 ; '.'
000000000000192d         db  0x00 ; '.'
000000000000192e         db  0x00 ; '.'
000000000000192f         db  0x00 ; '.'
0000000000001930         db  0xb0 ; '.'
0000000000001931         db  0xcf ; '.'
0000000000001932         db  0x20 ; ' '
0000000000001933         db  0x00 ; '.'
0000000000001934         db  0x00 ; '.'
0000000000001935         db  0x00 ; '.'
0000000000001936         db  0x00 ; '.'
0000000000001937         db  0x00 ; '.'
0000000000001938         db  0x07 ; '.'
0000000000001939         db  0x00 ; '.'
000000000000193a         db  0x00 ; '.'
000000000000193b         db  0x00 ; '.'
000000000000193c         db  0x48 ; 'H'
000000000000193d         db  0x00 ; '.'
000000000000193e         db  0x00 ; '.'
000000000000193f         db  0x00 ; '.'
0000000000001940         db  0x00 ; '.'
0000000000001941         db  0x00 ; '.'
0000000000001942         db  0x00 ; '.'
0000000000001943         db  0x00 ; '.'
0000000000001944         db  0x00 ; '.'
0000000000001945         db  0x00 ; '.'
0000000000001946         db  0x00 ; '.'
0000000000001947         db  0x00 ; '.'
0000000000001948         db  0xb8 ; '.'
0000000000001949         db  0xcf ; '.'
000000000000194a         db  0x20 ; ' '
000000000000194b         db  0x00 ; '.'
000000000000194c         db  0x00 ; '.'
000000000000194d         db  0x00 ; '.'
000000000000194e         db  0x00 ; '.'
000000000000194f         db  0x00 ; '.'
0000000000001950         db  0x07 ; '.'
0000000000001951         db  0x00 ; '.'
0000000000001952         db  0x00 ; '.'
0000000000001953         db  0x00 ; '.'
0000000000001954         db  0x4a ; 'J'
0000000000001955         db  0x00 ; '.'
0000000000001956         db  0x00 ; '.'
0000000000001957         db  0x00 ; '.'
0000000000001958         db  0x00 ; '.'
0000000000001959         db  0x00 ; '.'
000000000000195a         db  0x00 ; '.'
000000000000195b         db  0x00 ; '.'
000000000000195c         db  0x00 ; '.'
000000000000195d         db  0x00 ; '.'
000000000000195e         db  0x00 ; '.'
000000000000195f         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x1960; 0x1977[ (23 bytes)
        ; File offset : [6496; 6519[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000001960         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
0000000000001964         mov        rax, qword [qword_20cfd8]                   ; qword_20cfd8
000000000000196b         test       rax, rax
000000000000196e         je         loc_1972

0000000000001970         call       rax

                     loc_1972:
0000000000001972         add        rsp, 0x8                                    ; CODE XREF=_init+14
0000000000001976         ret
                        ; endp
0000000000001977         db  0x00 ; '.'
0000000000001978         db  0x00 ; '.'
0000000000001979         db  0x00 ; '.'
000000000000197a         db  0x00 ; '.'
000000000000197b         db  0x00 ; '.'
000000000000197c         db  0x00 ; '.'
000000000000197d         db  0x00 ; '.'
000000000000197e         db  0x00 ; '.'
000000000000197f         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x1980; 0x1dd0[ (1104 bytes)
        ; File offset : [6528; 7632[ (1104 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_1980:
0000000000001980         push       qword [qword_20cd90]                        ; Begin of unwind block (FDE at 0xa784), qword_20cd90, CODE XREF=sub_1996+5
0000000000001986         jmp        qword [qword_20cd90+8]                      ; 0x20cd98
                        ; endp
000000000000198c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___uflow:        // __uflow
0000000000001990         jmp        qword [__uflow@GOT]                         ; __uflow, __uflow@GOT, CODE XREF=readlinebuffer_delim+187
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1996:
0000000000001996         push       0x0
000000000000199b         jmp        loc_1980


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
00000000000019a0         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=set_program_name+154, sub_3e50+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, randread_error+72, xalloc_die+48, safe_hasher+29
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19a6:
00000000000019a6         push       0x1
00000000000019ab         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
00000000000019b0         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=main+921, main+1433, main+2114, main+2823, main+3197, main+3404, main+3458, main+3538, close_stdout+22, protect_fd+46, freopen_safer+35
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19b6:
00000000000019b6         push       0x2
00000000000019bb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
00000000000019c0         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+668, usage+861
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19c6:
00000000000019c6         push       0x3
00000000000019cb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
00000000000019d0         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19d6:
00000000000019d6         push       0x4
00000000000019db         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_ftello:        // ftello
00000000000019e0         jmp        qword [ftello@GOT]                          ; ftello, ftello@GOT, CODE XREF=fread_file+427
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19e6:
00000000000019e6         push       0x5
00000000000019eb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
00000000000019f0         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19f6:
00000000000019f6         push       0x6
00000000000019fb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___read_chk:        // __read_chk
0000000000001a00         jmp        qword [__read_chk@GOT]                      ; __read_chk, __read_chk@GOT, CODE XREF=randread_new+280
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a06:
0000000000001a06         push       0x7
0000000000001a0b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_ferror:        // ferror
0000000000001a10         jmp        qword [ferror@GOT]                          ; ferror, ferror@GOT, CODE XREF=fread_file+234
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a16:
0000000000001a16         push       0x8
0000000000001a1b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fread:        // fread
0000000000001a20         jmp        qword [fread@GOT]                           ; fread, fread@GOT, CODE XREF=fread_file+207
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a26:
0000000000001a26         push       0x9
0000000000001a2b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fcntl:        // fcntl
0000000000001a30         jmp        qword [fcntl@GOT]                           ; fcntl, fcntl@GOT, CODE XREF=rpl_fcntl+128, rpl_fcntl+212, rpl_fcntl+320, rpl_fcntl+407, rpl_fcntl+423, rpl_fcntl+460, rpl_fcntl+483, rpl_fcntl+559, rpl_fcntl+606
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a36:
0000000000001a36         push       0xa
0000000000001a3b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getpid:        // getpid
0000000000001a40         jmp        qword [getpid@GOT]                          ; getpid, getpid@GOT, CODE XREF=randread_new+407, randread_new+706
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a46:
0000000000001a46         push       0xb
0000000000001a4b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fread_unlocked:        // fread_unlocked
0000000000001a50         jmp        qword [fread_unlocked@GOT]                  ; fread_unlocked, fread_unlocked@GOT, CODE XREF=randread+97
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a56:
0000000000001a56         push       0xc
0000000000001a5b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001a60         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a66:
0000000000001a66         push       0xd
0000000000001a6b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000001a70         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a76:
0000000000001a76         push       0xe
0000000000001a7b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000001a80         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+96
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a86:
0000000000001a86         push       0xf
0000000000001a8b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_stpcpy:        // stpcpy
0000000000001a90         jmp        qword [stpcpy@GOT]                          ; stpcpy, stpcpy@GOT, CODE XREF=main+1759
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a96:
0000000000001a96         push       0x10
0000000000001a9b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
0000000000001aa0         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+401, main+463, main+813, main+852, main+913, main+2106, main+3055, main+3147, main+3240, main+3396, main+3450
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1aa6:
0000000000001aa6         push       0x11
0000000000001aab         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
0000000000001ab0         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=quotearg_buffer_restyled+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ab6:
0000000000001ab6         push       0x12
0000000000001abb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000001ac0         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=quotearg_buffer_restyled+343, sub_3e50+411, sub_3e50+1742, xstrdup+4
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ac6:
0000000000001ac6         push       0x13
0000000000001acb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000001ad0         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=main+3091, sub_3e50+2739, quotearg_n_style+137, quotearg_n_style_mem+133, quotearg_char_mem+147, quotearg_n_style_colon+137, quotearg_n_custom_mem+140, randint_genmax+277, randperm_new+807, randread_new+591, fread_file+467
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ad6:
0000000000001ad6         push       0x14
0000000000001adb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getuid:        // getuid
0000000000001ae0         jmp        qword [getuid@GOT]                          ; getuid, getuid@GOT, CODE XREF=randread_new+452
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ae6:
0000000000001ae6         push       0x15
0000000000001aeb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
0000000000001af0         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+190
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1af6:
0000000000001af6         push       0x16
0000000000001afb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001b00         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b06:
0000000000001b06         push       0x17
0000000000001b0b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dup2:        // dup2
0000000000001b10         jmp        qword [dup2@GOT]                            ; dup2, dup2@GOT, CODE XREF=freopen_safer+79, freopen_safer+100, freopen_safer+116
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b16:
0000000000001b16         push       0x18
0000000000001b1b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
0000000000001b20         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=main+354, xstrtoul+291, xstrtoul+323, xstrtoul+380, xstrtoumax+291, xstrtoumax+323, xstrtoumax+380
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b26:
0000000000001b26         push       0x19
0000000000001b2b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001b30         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b36:
0000000000001b36         push       0x1a
0000000000001b3b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001b40         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=main+2236, rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b46:
0000000000001b46         push       0x1b
0000000000001b4b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_gettimeofday:        // gettimeofday
0000000000001b50         jmp        qword [gettimeofday@GOT]                    ; gettimeofday, gettimeofday@GOT, CODE XREF=randread_new+392, randread_new+632
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b56:
0000000000001b56         push       0x1c
0000000000001b5b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000001b60         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=xstrtoul+927, xstrtoumax+927
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b66:
0000000000001b66         push       0x1d
0000000000001b6b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtoul_internal:        // __strtoul_internal
0000000000001b70         jmp        qword [__strtoul_internal@GOT]              ; __strtoul_internal, __strtoul_internal@GOT, CODE XREF=xstrtoumax+142
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b76:
0000000000001b76         push       0x1e
0000000000001b7b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001b80         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=main+1329, quotearg_n_options+153, xzalloc+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b86:
0000000000001b86         push       0x1f
0000000000001b8b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_freopen:        // freopen
0000000000001b90         jmp        qword [freopen@GOT]                         ; freopen, freopen@GOT, CODE XREF=freopen_safer+187
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b96:
0000000000001b96         push       0x20
0000000000001b9b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_close:        // close
0000000000001ba0         jmp        qword [close@GOT]                           ; close, close@GOT, CODE XREF=protect_fd+41, freopen_safer+307, freopen_safer+325, freopen_safer+337, freopen_safer+373, randread_new+291, fopen_safer+106, rpl_fcntl+510
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ba6:
0000000000001ba6         push       0x21
0000000000001bab         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_posix_fadvise:        // posix_fadvise
0000000000001bb0         jmp        qword [posix_fadvise@GOT]                   ; posix_fadvise, posix_fadvise@GOT, CODE XREF=fdadvise, fadvise+22
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bb6:
0000000000001bb6         push       0x22
0000000000001bbb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memchr:        // memchr
0000000000001bc0         jmp        qword [memchr@GOT]                          ; memchr, memchr@GOT, CODE XREF=main+2374, main+2529
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bc6:
0000000000001bc6         push       0x23
0000000000001bcb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000001bd0         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=quotearg_buffer_restyled+410
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bd6:
0000000000001bd6         push       0x24
0000000000001bdb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000001be0         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=usage+163, usage+200, usage+237, usage+274, usage+311, usage+348, usage+392, usage+976, version_etc_arn+135, emit_bug_reporting_address+123
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1be6:
0000000000001be6         push       0x25
0000000000001beb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000001bf0         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26, hash_initialize+177, hash_rehash+198
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bf6:
0000000000001bf6         push       0x26
0000000000001bfb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
0000000000001c00         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=main+271, main+648, main+1058
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c06:
0000000000001c06         push       0x27
0000000000001c0b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000001c10         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=randread+190, randread+356, xmemdup+35
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c16:
0000000000001c16         push       0x28
0000000000001c1b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000001c20         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=fadvise+8, freopen_safer+28, fread_file+44, rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36, fopen_safer+23
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c26:
0000000000001c26         push       0x29
0000000000001c2b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getgid:        // getgid
0000000000001c30         jmp        qword [getgid@GOT]                          ; getgid, getgid@GOT, CODE XREF=randread_new+508
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c36:
0000000000001c36         push       0x2a
0000000000001c3b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000001c40         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=fread_file+98, xmalloc+4, transfer_entries+293, hash_initialize+62, hash_insert_if_absent+517
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c46:
0000000000001c46         push       0x2b
0000000000001c4b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000001c50         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c56:
0000000000001c56         push       0x2c
0000000000001c5b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001c60         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c66:
0000000000001c66         push       0x2d
0000000000001c6b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fxstat:        // __fxstat
0000000000001c70         jmp        qword [__fxstat@GOT]                        ; __fxstat, __fxstat@GOT, CODE XREF=main+2183, fread_file+61
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c76:
0000000000001c76         push       0x2e
0000000000001c7b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001c80         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c86:
0000000000001c86         push       0x2f
0000000000001c8b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite_unlocked:        // fwrite_unlocked
0000000000001c90         jmp        qword [fwrite_unlocked@GOT]                 ; fwrite_unlocked, fwrite_unlocked@GOT, CODE XREF=main+2082, main+2939, main+3353
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c96:
0000000000001c96         push       0x30
0000000000001c9b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001ca0         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=fread_file+169, fread_file+391, xrealloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ca6:
0000000000001ca6         push       0x31
0000000000001cab         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fdopen:        // fdopen
0000000000001cb0         jmp        qword [fdopen@GOT]                          ; fdopen, fdopen@GOT, CODE XREF=fopen_safer+80
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cb6:
0000000000001cb6         push       0x32
0000000000001cbb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001cc0         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+77, usage+643, usage+836, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cc6:
0000000000001cc6         push       0x33
0000000000001ccb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001cd0         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=main+1600, main+2007, usage+126, usage+631, usage+724, usage+785, usage+824, usage+927, emit_bug_reporting_address+37, emit_bug_reporting_address+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cd6:
0000000000001cd6         push       0x34
0000000000001cdb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setvbuf:        // setvbuf
0000000000001ce0         jmp        qword [setvbuf@GOT]                         ; setvbuf, setvbuf@GOT, CODE XREF=randread_new+130
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ce6:
0000000000001ce6         push       0x35
0000000000001ceb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000001cf0         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+833, main+948, main+1457, main+2131, main+2847, main+3069, main+3164, main+3221, main+3257, main+3421, main+3475
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cf6:
0000000000001cf6         push       0x36
0000000000001cfb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___explicit_bzero_chk:        // __explicit_bzero_chk
0000000000001d00         jmp        qword [__explicit_bzero_chk@GOT]            ; __explicit_bzero_chk, __explicit_bzero_chk@GOT, CODE XREF=randint_free+16, randint_all_free+50, randread_free+24
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d06:
0000000000001d06         push       0x37
0000000000001d0b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_open:        // open
0000000000001d10         jmp        qword [open@GOT]                            ; open, open@GOT, CODE XREF=protect_fd+24, randread_new+234
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d16:
0000000000001d16         push       0x38
0000000000001d1b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000001d20         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d26:
0000000000001d26         push       0x39
0000000000001d2b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fopen:        // fopen
0000000000001d30         jmp        qword [fopen@GOT]                           ; fopen, fopen@GOT, CODE XREF=internal_read_file+16, fopen_safer+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d36:
0000000000001d36         push       0x3a
0000000000001d3b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtoul:        // strtoul
0000000000001d40         jmp        qword [strtoul@GOT]                         ; strtoul, strtoul@GOT, CODE XREF=xstrtoul+140
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d46:
0000000000001d46         push       0x3b
0000000000001d4b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000001d50         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d56:
0000000000001d56         push       0x3c
0000000000001d5b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getppid:        // getppid
0000000000001d60         jmp        qword [getppid@GOT]                         ; getppid, getppid@GOT, CODE XREF=randread_new+419, randread_new+759
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d66:
0000000000001d66         push       0x3d
0000000000001d6b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000001d70         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+770, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d76:
0000000000001d76         push       0x3e
0000000000001d7b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000001d80         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d86:
0000000000001d86         push       0x3f
0000000000001d8b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000001d90         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+81, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332, version_etc_arn+492, version_etc_arn+563, version_etc_arn+642, version_etc_arn+718, version_etc_arn+872, hash_print_statistics+118
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d96:
0000000000001d96         push       0x40
0000000000001d9b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000001da0         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_3e50+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1da6:
0000000000001da6         push       0x41
0000000000001dab         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000001db0         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_3e50+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1db6:
0000000000001db6         push       0x42
0000000000001dbb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000001dc0         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=sub_3bf0+51, xstrtoul+85, xstrtoumax+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dc6:
0000000000001dc6         push       0x43
0000000000001dcb         jmp        0x1980
                        ; endp


        ; Section .plt.got
        ; Range: [0x1dd0; 0x1de0[ (16 bytes)
        ; File offset : [7632; 7648[ (16 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dd0:
0000000000001dd0         jmp        qword [qword_20cfc0]                        ; qword, End of unwind block (FDE at 0xa784), Begin of unwind block (FDE at 0xa7ac), qword_20cfc0, CODE XREF=freebuffer+4, quotearg_n_options+277, quotearg_free+55, quotearg_free+82, quotearg_free+120, randint_free+25, randint_all_free+58, randread_free+32, fread_file+337, fread_file+369, internal_read_file+92
                        ; endp
0000000000001dd6         align      8


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_20cfe8:        // qword_20cfe8
0000000000001dd8         jmp        qword [qword_20cfe8]                        ; qword, qword_20cfe8, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000001dde         align      32


        ; Section .text
        ; Range: [0x1de0; 0x90ee[ (29454 bytes)
        ; File offset : [7648; 37102[ (29454 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_A8: int64_t, -168
        ;    var_C0: int32_t, -192
        ;    var_D8: int8_t, -216
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_128: int64_t, -296
        ;    var_129: int8_t, -297
        ;    var_12A: int8_t, -298
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320


                     main:
0000000000001de0         push       r15                                         ; End of unwind block (FDE at 0xa7ac), Begin of unwind block (FDE at 0xa7f0), DATA XREF=_start+29
0000000000001de2         push       r14
0000000000001de4         xor        r15d, r15d
0000000000001de7         push       r13
0000000000001de9         push       r12
0000000000001deb         mov        r12, 0xffffffffffffffff
0000000000001df2         push       rbp
0000000000001df3         push       rbx
0000000000001df4         mov        ebp, edi
0000000000001df6         mov        rbx, rsi
0000000000001df9         xor        r13d, r13d
0000000000001dfc         mov        r14, r12
0000000000001dff         sub        rsp, 0x118
0000000000001e06         mov        rdi, qword [rsi]
0000000000001e09         mov        rax, qword [fs:0x28]
0000000000001e12         mov        qword [rsp+0x148+var_40], rax
0000000000001e1a         xor        eax, eax
0000000000001e1c         call       set_program_name                            ; set_program_name
0000000000001e21         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0x9d10
0000000000001e28         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
0000000000001e2d         call       j_setlocale                                 ; setlocale
0000000000001e32         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
0000000000001e39         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
0000000000001e40         call       j_bindtextdomain                            ; bindtextdomain
0000000000001e45         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
0000000000001e4c         call       j_textdomain                                ; textdomain
0000000000001e51         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
0000000000001e58         call       atexit                                      ; atexit
0000000000001e5d         lea        rax, qword [rsp+0x148+var_F8]
0000000000001e62         mov        byte [rsp+0x148+var_12A], 0x0
0000000000001e67         mov        byte [rsp+0x148+var_129], 0xa
0000000000001e6c         mov        qword [rsp+0x148+var_120], 0x0
0000000000001e75         mov        byte [rsp+0x148+var_140], 0x0
0000000000001e7a         mov        byte [rsp+0x148+var_138], 0x0
0000000000001e7f         mov        qword [rsp+0x148+var_128], rax
0000000000001e84         nop        dword [rax]

                     loc_1e88:
0000000000001e88         lea        rcx, qword [long_opts]                      ; argument "__longopts" for method j_getopt_long, long_opts, CODE XREF=main+292, main+535, main+549, main+607, main+669, main+685, main+701, main+778
0000000000001e8f         lea        rdx, qword [aEinorz]                        ; argument "__shortopts" for method j_getopt_long, "ei:n:o:rz"
0000000000001e96         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long
0000000000001e99         mov        rsi, rbx                                    ; argument "___argv" for method j_getopt_long
0000000000001e9c         mov        edi, ebp                                    ; argument "___argc" for method j_getopt_long
0000000000001e9e         call       j_getopt_long                               ; getopt_long
0000000000001ea3         cmp        eax, 0xffffffff
0000000000001ea6         je         loc_2199

0000000000001eac         cmp        eax, 0x6e
0000000000001eaf         je         loc_2010

0000000000001eb5         jle        loc_1f10

0000000000001eb7         cmp        eax, 0x72
0000000000001eba         je         loc_2088

0000000000001ec0         jle        loc_2048

0000000000001ec6         cmp        eax, 0x7a
0000000000001ec9         je         loc_2000

0000000000001ecf         add        eax, 0xffffff80
0000000000001ed2         jne        loc_29e2

0000000000001ed8         test       r13, r13
0000000000001edb         mov        rdx, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001ee2         je         loc_1f01

0000000000001ee4         mov        rsi, rdx                                    ; argument "__s2" for method j_strcmp
0000000000001ee7         mov        rdi, r13                                    ; argument "__s1" for method j_strcmp
0000000000001eea         mov        qword [rsp+0x148+var_118], rdx
0000000000001eef         call       j_strcmp                                    ; strcmp
0000000000001ef4         test       eax, eax
0000000000001ef6         mov        rdx, qword [rsp+0x148+var_118]
0000000000001efb         jne        loc_2bef

                     loc_1f01:
0000000000001f01         mov        r13, rdx                                    ; CODE XREF=main+258
0000000000001f04         jmp        loc_1e88
0000000000001f06         align      16

                     loc_1f10:
0000000000001f10         cmp        eax, 0xffffff7e                             ; CODE XREF=main+213
0000000000001f15         je         loc_29ec

0000000000001f1b         jle        loc_20a8

0000000000001f21         cmp        eax, 0x65
0000000000001f24         je         loc_2098

0000000000001f2a         cmp        eax, 0x69
0000000000001f2d         jne        loc_29e2

0000000000001f33         mov        r14, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001f3a         mov        esi, 0x2d                                   ; argument "__c" for method j_strchr
0000000000001f3f         mov        rdi, r14                                    ; argument "__s" for method j_strchr
0000000000001f42         call       j_strchr                                    ; strchr
0000000000001f47         cmp        byte [rsp+0x148+var_140], 0x0
0000000000001f4c         jne        loc_2c13

0000000000001f52         test       rax, rax
0000000000001f55         je         loc_2126

0000000000001f5b         lea        rsi, qword [aInvalidInputRa]                ; argument "msgid" for method j_dcgettext, "invalid input range"
0000000000001f62         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001f64         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001f69         mov        byte [rax], 0x0
0000000000001f6c         mov        qword [rsp+0x148+var_140], rax
0000000000001f71         call       j_dcgettext                                 ; dcgettext
0000000000001f76         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001f7d         lea        rcx, qword [aWrittenBySSAnd+27]             ; 0x9d10
0000000000001f84         xor        r9d, r9d
0000000000001f87         mov        r8, rax
0000000000001f8a         or         rdx, 0xffffffffffffffff
0000000000001f8e         xor        esi, esi
0000000000001f90         call       xdectoumax                                  ; xdectoumax
0000000000001f95         mov        r10, qword [rsp+0x148+var_140]
0000000000001f9a         lea        rsi, qword [aInvalidInputRa]                ; argument "msgid" for method j_dcgettext, "invalid input range"
0000000000001fa1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001fa3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001fa8         mov        r14, rax
0000000000001fab         mov        byte [r10], 0x2d
0000000000001faf         call       j_dcgettext                                 ; dcgettext
0000000000001fb4         mov        r10, qword [rsp+0x148+var_140]
0000000000001fb9         lea        rcx, qword [aWrittenBySSAnd+27]             ; 0x9d10
0000000000001fc0         or         rdx, 0xffffffffffffffff
0000000000001fc4         xor        r9d, r9d
0000000000001fc7         xor        esi, esi
0000000000001fc9         mov        r8, rax
0000000000001fcc         lea        rdi, qword [r10+1]
0000000000001fd0         call       xdectoumax                                  ; xdectoumax
0000000000001fd5         cmp        r14, rax
0000000000001fd8         mov        qword [rsp+0x148+var_120], rax
0000000000001fdd         seta       dl
0000000000001fe0         sub        rax, r14
0000000000001fe3         add        rax, 0x1
0000000000001fe7         sete       al
0000000000001fea         cmp        dl, al
0000000000001fec         jne        loc_2154

0000000000001ff2         mov        byte [rsp+0x148+var_140], 0x1
0000000000001ff7         jmp        loc_1e88
0000000000001ffc         align      8192

                     loc_2000:
0000000000002000         mov        byte [rsp+0x148+var_129], 0x0               ; CODE XREF=main+233, DATA XREF=fread_file+90
0000000000002005         jmp        loc_1e88
000000000000200a         align      16

                     loc_2010:
0000000000002010         mov        rcx, qword [rsp+0x148+var_128]              ; CODE XREF=main+207
0000000000002015         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
000000000000201c         xor        r8d, r8d
000000000000201f         xor        esi, esi
0000000000002021         mov        edx, 0xa
0000000000002026         call       xstrtoul                                    ; xstrtoul
000000000000202b         test       eax, eax
000000000000202d         jne        loc_20e7

0000000000002033         mov        rax, qword [rsp+0x148+var_F8]
0000000000002038         cmp        r12, rax
000000000000203b         cmova      r12, rax
000000000000203f         jmp        loc_1e88
0000000000002044         align      8

                     loc_2048:
0000000000002048         cmp        eax, 0x6f                                   ; CODE XREF=main+224
000000000000204b         jne        loc_29e2

0000000000002051         test       r15, r15
0000000000002054         mov        rdx, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
000000000000205b         je         loc_207a

000000000000205d         mov        rsi, rdx                                    ; argument "__s2" for method j_strcmp
0000000000002060         mov        rdi, r15                                    ; argument "__s1" for method j_strcmp
0000000000002063         mov        qword [rsp+0x148+var_118], rdx
0000000000002068         call       j_strcmp                                    ; strcmp
000000000000206d         test       eax, eax
000000000000206f         mov        rdx, qword [rsp+0x148+var_118]
0000000000002074         jne        loc_2a7a

                     loc_207a:
000000000000207a         mov        r15, rdx                                    ; CODE XREF=main+635
000000000000207d         jmp        loc_1e88
0000000000002082         align      8

                     loc_2088:
0000000000002088         mov        byte [rsp+0x148+var_12A], 0x1               ; CODE XREF=main+218
000000000000208d         jmp        loc_1e88
0000000000002092         align      8

                     loc_2098:
0000000000002098         mov        byte [rsp+0x148+var_138], 0x1               ; CODE XREF=main+324
000000000000209d         jmp        loc_1e88
00000000000020a2         align      8

                     loc_20a8:
00000000000020a8         cmp        eax, 0xffffff7d                             ; CODE XREF=main+315
00000000000020ad         jne        loc_29e2

00000000000020b3         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000020ba         mov        rcx, qword [Version]                        ; Version
00000000000020c1         lea        r8, qword [aPaulEggert]                     ; "Paul Eggert"
00000000000020c8         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x917f
00000000000020cf         lea        rsi, qword [_IO_stdin_used+4]               ; 0x9104
00000000000020d6         xor        r9d, r9d
00000000000020d9         xor        eax, eax
00000000000020db         call       version_etc                                 ; version_etc
00000000000020e0         xor        edi, edi                                    ; argument "__status" for method j_exit
00000000000020e2         call       j_exit                                      ; exit
                        ; endp

                     loc_20e7:
00000000000020e7         sub        eax, 0x1                                    ; CODE XREF=main+589
00000000000020ea         je         loc_1e88

00000000000020f0         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; argument #1 for method quote, optarg@@GLIBC_2.2.5
00000000000020f7         call       quote                                       ; quote
00000000000020fc         lea        rsi, qword [aInvalidLineCou]                ; argument "msgid" for method j_dcgettext, "invalid line count: %s"
0000000000002103         mov        rbx, rax
0000000000002106         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000210b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000210d         call       j_dcgettext                                 ; dcgettext
0000000000002112         mov        rcx, rbx
0000000000002115         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002118         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000211a         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000211f         xor        eax, eax
0000000000002121         call       j_error                                     ; error

                     loc_2126:
0000000000002126         lea        rsi, qword [aInvalidInputRa]                ; argument "msgid" for method j_dcgettext, "invalid input range", CODE XREF=main+373
000000000000212d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002132         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002134         call       j_dcgettext                                 ; dcgettext
0000000000002139         lea        rcx, qword [aWrittenBySSAnd+27]             ; 0x9d10
0000000000002140         mov        r8, rax
0000000000002143         xor        r9d, r9d
0000000000002146         or         rdx, 0xffffffffffffffff
000000000000214a         xor        esi, esi
000000000000214c         mov        rdi, r14
000000000000214f         call       xdectoumax                                  ; xdectoumax

                     loc_2154:
0000000000002154         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; argument #1 for method quote, optarg@@GLIBC_2.2.5, CODE XREF=main+524
000000000000215b         call       quote                                       ; quote
0000000000002160         lea        rsi, qword [aInvalidInputRa]                ; argument "msgid" for method j_dcgettext, "invalid input range"
0000000000002167         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000216c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000216e         mov        rbp, rax
0000000000002171         call       j_dcgettext                                 ; dcgettext
0000000000002176         mov        rbx, rax
0000000000002179         call       j___errno_location                          ; __errno_location
000000000000217e         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002180         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000002187         mov        r8, rbp
000000000000218a         mov        rcx, rbx
000000000000218d         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002192         xor        eax, eax
0000000000002194         call       j_error                                     ; error

                     loc_2199:
0000000000002199         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+198
00000000000021a0         sub        ebp, eax
00000000000021a2         cmp        byte [rsp+0x148+var_138], 0x0
00000000000021a7         lea        rbx, qword [rbx+rax*8]
00000000000021ab         je         loc_2320

00000000000021b1         cmp        byte [rsp+0x148+var_140], 0x0
00000000000021b6         jne        loc_29c1

                     loc_21bc:
00000000000021bc         cmp        byte [rsp+0x148+var_138], 0x0               ; CODE XREF=main+1349
00000000000021c1         jne        loc_2461

00000000000021c7         cmp        ebp, 0x1
00000000000021ca         mov        eax, 0x8
00000000000021cf         jg         loc_2a11

00000000000021d5         cmp        byte [rsp+0x148+var_138], 0x0
00000000000021da         jne        loc_2461

00000000000021e0         sub        ebp, 0x1
00000000000021e3         mov        rdx, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
00000000000021ea         jne        loc_2638

00000000000021f0         mov        rbp, qword [rbx]
00000000000021f3         lea        rsi, qword [aLibs+10]                       ; argument "__s2" for method j_strcmp, 0x97aa
00000000000021fa         mov        qword [rsp+0x148+var_128], rdx
00000000000021ff         mov        rdi, rbp                                    ; argument "__s1" for method j_strcmp
0000000000002202         call       j_strcmp                                    ; strcmp
0000000000002207         test       eax, eax
0000000000002209         mov        rdx, qword [rsp+0x148+var_128]
000000000000220e         je         loc_2638

0000000000002214         test       r12, r12
0000000000002217         jne        loc_297e

000000000000221d         mov        esi, 0x2
0000000000002222         mov        rdi, rdx
0000000000002225         call       fadvise                                     ; fadvise
000000000000222a         cmp        byte [rsp+0x148+var_12A], 0x0
000000000000222f         jne        loc_26ba

                     loc_2235:
0000000000002235         or         rsi, 0xffffffffffffffff                     ; CODE XREF=main+2165, main+2190, main+2213, main+2244, main+2260
0000000000002239         mov        rdi, r13
000000000000223c         call       randint_all_new                             ; randint_all_new
0000000000002241         test       rax, rax
0000000000002244         mov        qword [rsp+0x148+var_128], rax
0000000000002249         je         loc_2367

000000000000224f         movsx      eax, byte [rsp+0x148+var_129]
0000000000002254         cmp        r12, 0x400
000000000000225b         mov        ebx, 0x400
0000000000002260         cmovbe     rbx, r12
0000000000002264         mov        esi, 0x18
0000000000002269         xor        ebp, ebp
000000000000226b         mov        rdi, rbx
000000000000226e         mov        dword [rsp+0x148+var_118], eax
0000000000002272         mov        rax, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
0000000000002279         mov        qword [rsp+0x148+var_138], rax
000000000000227e         call       xcalloc                                     ; xcalloc
0000000000002283         mov        qword [rsp+0x148+var_108], r14
0000000000002288         xor        r8d, r8d
000000000000228b         mov        r14, rbx
000000000000228e         mov        rbx, rax

                     loc_2291:
0000000000002291         cmp        r12, rbp                                    ; CODE XREF=main+1251, main+1339
0000000000002294         je         loc_27e6

000000000000229a         imul       r13, rbp, 0x18
000000000000229e         mov        edx, dword [rsp+0x148+var_118]
00000000000022a2         mov        rsi, qword [rsp+0x148+var_138]
00000000000022a7         lea        rdi, qword [rbx+r13]
00000000000022ab         call       readlinebuffer_delim                        ; readlinebuffer_delim
00000000000022b0         test       rax, rax
00000000000022b3         mov        r8, rax
00000000000022b6         je         loc_2904

00000000000022bc         add        rbp, 0x1
00000000000022c0         cmp        rbp, r14
00000000000022c3         jb         loc_2291

00000000000022c5         mov        edx, 0x18
00000000000022ca         add        r14, 0x400
00000000000022d1         xor        esi, esi
00000000000022d3         mov        rax, rdx
00000000000022d6         mul        r14
00000000000022d9         jo         loc_2a05

                     loc_22df:
00000000000022df         test       rax, rax                                    ; CODE XREF=main+3114
00000000000022e2         mov        qword [rsp+0x148+var_110], r8
00000000000022e7         js         loc_2a00

00000000000022ed         test       rsi, rsi
00000000000022f0         jne        loc_2a00

00000000000022f6         imul       rsi, r14, 0x18                              ; argument #2 for method xrealloc
00000000000022fa         mov        rdi, rbx                                    ; argument #1 for method xrealloc
00000000000022fd         call       xrealloc                                    ; xrealloc
0000000000002302         lea        rdi, qword [rax+r13+0x18]                   ; argument "__s" for method j_memset
0000000000002307         mov        edx, 0x6000                                 ; argument "__n" for method j_memset
000000000000230c         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000230e         mov        rbx, rax
0000000000002311         call       j_memset                                    ; memset
0000000000002316         mov        r8, qword [rsp+0x148+var_110]
000000000000231b         jmp        loc_2291

                     loc_2320:
0000000000002320         cmp        byte [rsp+0x148+var_140], 0x0               ; CODE XREF=main+971
0000000000002325         je         loc_21bc

000000000000232b         test       ebp, ebp
000000000000232d         jg         loc_2a0f

0000000000002333         mov        rax, qword [rsp+0x148+var_120]
0000000000002338         xor        ebx, ebx
000000000000233a         add        rax, 0x1
000000000000233e         sub        rax, r14
0000000000002341         mov        qword [rsp+0x148+var_118], rax

                     loc_2346:
0000000000002346         cmp        byte [rsp+0x148+var_12A], 0x0               ; CODE XREF=main+1813, main+2561
000000000000234b         je         loc_2396

000000000000234d         or         rsi, 0xffffffffffffffff
0000000000002351         mov        rdi, r13
0000000000002354         call       randint_all_new                             ; randint_all_new
0000000000002359         test       rax, rax
000000000000235c         mov        qword [rsp+0x148+var_128], rax
0000000000002361         jne        loc_24fa

                     loc_2367:
0000000000002367         mov        rdx, r13                                    ; CODE XREF=main+1129, main+1504
000000000000236a         mov        esi, 0x3
000000000000236f         xor        edi, edi
0000000000002371         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000002376         mov        rbx, rax
0000000000002379         call       j___errno_location                          ; __errno_location
000000000000237e         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002380         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x91fa
0000000000002387         mov        rcx, rbx
000000000000238a         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000238f         xor        eax, eax
0000000000002391         call       j_error                                     ; error

                     loc_2396:
0000000000002396         mov        rax, qword [rsp+0x148+var_118]              ; CODE XREF=main+1387
000000000000239b         cmp        r12, rax
000000000000239e         mov        rsi, rax
00000000000023a1         cmova      r12, rax
00000000000023a5         mov        rdi, r12
00000000000023a8         call       randperm_bound                              ; randperm_bound
00000000000023ad         mov        rdi, r13
00000000000023b0         mov        rsi, rax
00000000000023b3         call       randint_all_new                             ; randint_all_new
00000000000023b8         test       rax, rax
00000000000023bb         mov        qword [rsp+0x148+var_128], rax
00000000000023c0         je         loc_2367

00000000000023c2         movzx      ecx, byte [rsp+0x148+var_138]
00000000000023c7         or         cl, byte [rsp+0x148+var_140]
00000000000023cb         je         loc_2505

00000000000023d1         mov        rdx, qword [rsp+0x148+var_118]
00000000000023d6         mov        rdi, qword [rsp+0x148+var_128]
00000000000023db         mov        rsi, r12
00000000000023de         call       randperm_new                                ; randperm_new
00000000000023e3         test       r15, r15
00000000000023e6         mov        r13, rax
00000000000023e9         jne        loc_28a2

                     loc_23ef:
00000000000023ef         cmp        byte [rsp+0x148+var_140], 0x0               ; CODE XREF=main+3306
00000000000023f4         je         loc_25ce

00000000000023fa         movsx      r15d, byte [rsp+0x148+var_129]
0000000000002400         xor        ebx, ebx
0000000000002402         lea        rbp, qword [aLuc]                           ; "%lu%c"
0000000000002409         jmp        loc_2431

                     loc_240b:
000000000000240b         mov        rdx, qword [r13+rbx*8]                      ; CODE XREF=main+1620
0000000000002410         xor        eax, eax
0000000000002412         mov        ecx, r15d
0000000000002415         mov        rsi, rbp
0000000000002418         mov        edi, 0x1
000000000000241d         add        rdx, r14
0000000000002420         call       j___printf_chk                              ; __printf_chk
0000000000002425         test       eax, eax
0000000000002427         js         loc_260c

000000000000242d         add        rbx, 0x1

                     loc_2431:
0000000000002431         cmp        rbx, r12                                    ; CODE XREF=main+1577
0000000000002434         jne        loc_240b

                     loc_2436:
0000000000002436         xor        eax, eax                                    ; CODE XREF=main+1917, main+2025, main+2042, main+2893, main+3377
0000000000002438         mov        rcx, qword [rsp+0x148+var_40]
0000000000002440         xor        rcx, qword [fs:0x28]
0000000000002449         jne        loc_29f3

000000000000244f         add        rsp, 0x118
0000000000002456         pop        rbx
0000000000002457         pop        rbp
0000000000002458         pop        r12
000000000000245a         pop        r13
000000000000245c         pop        r14
000000000000245e         pop        r15
0000000000002460         ret
                        ; endp

                     loc_2461:
0000000000002461         movsxd     rax, ebp                                    ; CODE XREF=main+993, main+1018
0000000000002464         xor        edx, edx
0000000000002466         or         r8, 0xffffffffffffffff
000000000000246a         mov        qword [rsp+0x148+var_118], rax
000000000000246f         mov        rsi, rax
0000000000002472         xor        eax, eax
0000000000002474         jmp        loc_248b

                     loc_2476:
0000000000002476         mov        rdi, qword [rbx+rdx*8]                      ; CODE XREF=main+1709
000000000000247a         mov        rcx, r8
000000000000247d         add        rdx, 0x1
0000000000002481         repne scasb al, byte [rdi]
0000000000002483         not        rcx
0000000000002486         lea        rsi, qword [rsi+rcx-1]

                     loc_248b:
000000000000248b         cmp        ebp, edx                                    ; CODE XREF=main+1684
000000000000248d         jg         loc_2476

000000000000248f         mov        rdi, rsi                                    ; argument #1 for method xmalloc
0000000000002492         call       xmalloc                                     ; xmalloc
0000000000002497         xor        edx, edx
0000000000002499         mov        qword [rsp+0x148+var_128], r14
000000000000249e         mov        qword [rsp+0x148+var_110], r13
00000000000024a3         mov        qword [rsp+0x148+var_108], r12
00000000000024a8         mov        r13, rax
00000000000024ab         mov        r12, rbx
00000000000024ae         mov        r14, rdx
00000000000024b1         movzx      ebx, byte [rsp+0x148+var_129]
00000000000024b6         jmp        loc_24d2

                     loc_24b8:
00000000000024b8         mov        rsi, qword [r12+r14*8]                      ; argument "__src" for method j_stpcpy, CODE XREF=main+1781
00000000000024bc         mov        rdi, r13                                    ; argument "__dest" for method j_stpcpy
00000000000024bf         call       j_stpcpy                                    ; stpcpy
00000000000024c4         mov        qword [r12+r14*8], r13
00000000000024c8         lea        r13, qword [rax+1]
00000000000024cc         mov        byte [rax], bl
00000000000024ce         add        r14, 0x1

                     loc_24d2:
00000000000024d2         cmp        ebp, r14d                                   ; CODE XREF=main+1750
00000000000024d5         jg         loc_24b8

00000000000024d7         mov        rax, qword [rsp+0x148+var_118]
00000000000024dc         mov        rbx, r12
00000000000024df         mov        rcx, r13
00000000000024e2         mov        r14, qword [rsp+0x148+var_128]
00000000000024e7         mov        r13, qword [rsp+0x148+var_110]
00000000000024ec         mov        r12, qword [rsp+0x148+var_108]
00000000000024f1         mov        qword [rbx+rax*8], rcx
00000000000024f5         jmp        loc_2346

                     loc_24fa:
00000000000024fa         movzx      ecx, byte [rsp+0x148+var_138]               ; CODE XREF=main+1409
00000000000024ff         or         cl, byte [rsp+0x148+var_140]
0000000000002503         jne        loc_2536

                     loc_2505:
0000000000002505         mov        qword [rsp+0x148+var_110], 0x0              ; CODE XREF=main+1515

                     loc_250e:
000000000000250e         mov        rdi, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5, CODE XREF=main+2749
0000000000002515         mov        byte [rsp+0x148+var_138], cl
0000000000002519         call       rpl_fclose                                  ; rpl_fclose
000000000000251e         test       eax, eax
0000000000002520         movzx      ecx, byte [rsp+0x148+var_138]
0000000000002525         jne        loc_2b16

000000000000252b         cmp        byte [rsp+0x148+var_12A], 0x0
0000000000002530         je         loc_2a9e

                     loc_2536:
0000000000002536         test       r15, r15                                    ; CODE XREF=main+1827
0000000000002539         je         loc_255a

000000000000253b         mov        rdx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002542         lea        rsi, qword [aWriteError+12]                 ; 0x9275
0000000000002549         mov        rdi, r15
000000000000254c         call       freopen_safer                               ; freopen_safer
0000000000002551         test       rax, rax
0000000000002554         je         loc_28d5

                     loc_255a:
000000000000255a         test       r12, r12                                    ; CODE XREF=main+1881
000000000000255d         je         loc_2436

0000000000002563         cmp        qword [rsp+0x148+var_118], 0x0
0000000000002569         je         loc_2b78

000000000000256f         cmp        byte [rsp+0x148+var_140], 0x0
0000000000002574         je         loc_2913

000000000000257a         mov        r13, qword [rsp+0x148+var_120]
000000000000257f         movsx      ebp, byte [rsp+0x148+var_129]
0000000000002584         xor        r15d, r15d
0000000000002587         mov        rax, r12
000000000000258a         lea        rbx, qword [aLuc]                           ; "%lu%c"
0000000000002591         mov        r12, r15
0000000000002594         mov        r15, rax
0000000000002597         sub        r13, r14

                     loc_259a:
000000000000259a         mov        rdi, qword [rsp+0x148+var_128]              ; CODE XREF=main+2023
000000000000259f         mov        rsi, r13
00000000000025a2         call       randint_genmax                              ; randint_genmax
00000000000025a7         lea        rdx, qword [r14+rax]
00000000000025ab         mov        ecx, ebp
00000000000025ad         xor        eax, eax
00000000000025af         mov        rsi, rbx
00000000000025b2         mov        edi, 0x1
00000000000025b7         call       j___printf_chk                              ; __printf_chk
00000000000025bc         test       eax, eax
00000000000025be         js         loc_260c

00000000000025c0         add        r12, 0x1
00000000000025c4         cmp        r15, r12
00000000000025c7         jne        loc_259a

00000000000025c9         jmp        loc_2436

                     loc_25ce:
00000000000025ce         xor        r14d, r14d                                  ; CODE XREF=main+1556
00000000000025d1         jmp        loc_25d7

                     loc_25d3:
00000000000025d3         add        r14, 0x1                                    ; CODE XREF=main+2090

                     loc_25d7:
00000000000025d7         cmp        r14, r12                                    ; CODE XREF=main+2033
00000000000025da         je         loc_2436

00000000000025e0         mov        rax, qword [r13+r14*8]
00000000000025e5         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5
00000000000025ec         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
00000000000025f1         lea        rax, qword [rbx+rax*8]
00000000000025f5         mov        rdi, qword [rax]                            ; argument "__ptr" for method j_fwrite_unlocked
00000000000025f8         mov        rbp, qword [rax+8]
00000000000025fc         sub        rbp, rdi
00000000000025ff         mov        rdx, rbp                                    ; argument "__n" for method j_fwrite_unlocked
0000000000002602         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000002607         cmp        rbp, rax
000000000000260a         je         loc_25d3

                     loc_260c:
000000000000260c         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=main+1607, main+2014, main+2949, main+3362
0000000000002613         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002618         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000261a         call       j_dcgettext                                 ; dcgettext
000000000000261f         mov        rbx, rax
0000000000002622         call       j___errno_location                          ; __errno_location
0000000000002627         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002629         mov        rdx, rbx                                    ; argument "__format" for method j_error
000000000000262c         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002631         xor        eax, eax
0000000000002633         call       j_error                                     ; error

                     loc_2638:
0000000000002638         mov        esi, 0x2                                    ; CODE XREF=main+1034, main+1070
000000000000263d         mov        rdi, rdx
0000000000002640         call       fadvise                                     ; fadvise
0000000000002645         cmp        byte [rsp+0x148+var_12A], 0x0
000000000000264a         jne        loc_26ba

000000000000264c         cmp        r12, 0xffffffffffffffff
0000000000002650         je         loc_26ba

0000000000002652         test       r12, r12
0000000000002655         je         loc_2235

                     loc_265b:
000000000000265b         lea        rdx, qword [rsp+0x148+var_D8]               ; argument "__stat_buf" for method j___fxstat, CODE XREF=main+3030
0000000000002660         xor        esi, esi                                    ; argument "__fildes" for method j___fxstat
0000000000002662         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
0000000000002667         call       j___fxstat                                  ; __fxstat
000000000000266c         test       eax, eax
000000000000266e         jne        loc_2235

0000000000002674         mov        eax, dword [rsp+0x148+var_C0]
000000000000267b         and        eax, 0xd000
0000000000002680         cmp        eax, 0x8000
0000000000002685         jne        loc_2235

000000000000268b         xor        esi, esi                                    ; argument "__offset" for method j_lseek
000000000000268d         xor        edi, edi                                    ; argument "__fd" for method j_lseek
000000000000268f         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000002694         mov        rbx, qword [rsp+0x148+var_A8]
000000000000269c         call       j_lseek                                     ; lseek
00000000000026a1         test       rax, rax
00000000000026a4         js         loc_2235

00000000000026aa         sub        rbx, rax
00000000000026ad         cmp        rbx, 0x800000
00000000000026b4         jg         loc_2235

                     loc_26ba:
00000000000026ba         movsx      eax, byte [rsp+0x148+var_129]               ; CODE XREF=main+1103, main+2154, main+2160, main+3020, main+3036
00000000000026bf         mov        rdi, qword [stdin@@GLIBC_2.2.5]             ; argument #1 for method fread_file, stdin@@GLIBC_2.2.5
00000000000026c6         lea        rsi, qword [rsp+0x148+var_F8]               ; argument #2 for method fread_file
00000000000026cb         mov        dword [rsp+0x148+var_128], eax
00000000000026cf         call       fread_file                                  ; fread_file
00000000000026d4         test       rax, rax
00000000000026d7         mov        rcx, rax
00000000000026da         je         loc_2b4c

00000000000026e0         mov        rbp, qword [rsp+0x148+var_F8]
00000000000026e5         test       rbp, rbp
00000000000026e8         je         loc_2706

00000000000026ea         movzx      ebx, byte [rsp+0x148+var_129]
00000000000026ef         cmp        bl, byte [rax+rbp-1]
00000000000026f3         je         loc_2706

00000000000026f5         lea        rax, qword [rbp+1]
00000000000026f9         mov        qword [rsp+0x148+var_F8], rax
00000000000026fe         mov        byte [rcx+rbp], bl
0000000000002701         mov        rbp, qword [rsp+0x148+var_F8]

                     loc_2706:
0000000000002706         add        rbp, rcx                                    ; CODE XREF=main+2312, main+2323
0000000000002709         mov        rdi, rcx
000000000000270c         xor        eax, eax
000000000000270e         mov        ebx, dword [rsp+0x148+var_128]
0000000000002712         mov        qword [rsp+0x148+var_110], rcx
0000000000002717         mov        qword [rsp+0x148+var_108], r12
000000000000271c         jmp        loc_2732

                     loc_271e:
000000000000271e         mov        rdx, rbp                                    ; CODE XREF=main+2393
0000000000002721         mov        esi, ebx                                    ; argument "__c" for method j_memchr
0000000000002723         sub        rdx, rdi                                    ; argument "__n" for method j_memchr
0000000000002726         call       j_memchr                                    ; memchr
000000000000272b         lea        rdi, qword [rax+1]
000000000000272f         mov        rax, r12

                     loc_2732:
0000000000002732         cmp        rbp, rdi                                    ; CODE XREF=main+2364
0000000000002735         lea        r12, qword [rax+1]
0000000000002739         ja         loc_271e

000000000000273b         mov        edx, 0x8
0000000000002740         mov        rbx, r12
0000000000002743         mov        qword [rsp+0x148+var_118], rax
0000000000002748         mov        rax, rdx
000000000000274b         xor        esi, esi
000000000000274d         mov        rcx, qword [rsp+0x148+var_110]
0000000000002752         mul        rbx
0000000000002755         mov        r12, qword [rsp+0x148+var_108]
000000000000275a         jo         loc_2b42

                     loc_2760:
0000000000002760         test       rax, rax                                    ; CODE XREF=main+3431
0000000000002763         js         loc_2a00

0000000000002769         test       rsi, rsi
000000000000276c         jne        loc_2a00

0000000000002772         lea        rdi, qword [rbx*8]                          ; argument #1 for method xmalloc
000000000000277a         mov        qword [rsp+0x148+var_110], rcx
000000000000277f         call       xmalloc                                     ; xmalloc
0000000000002784         mov        rcx, qword [rsp+0x148+var_110]
0000000000002789         mov        rbx, rax
000000000000278c         mov        qword [rsp+0x148+var_110], r15
0000000000002791         mov        qword [rsp+0x148+var_100], r12
0000000000002796         mov        qword [rsp+0x148+var_108], rbx
000000000000279b         mov        r12d, dword [rsp+0x148+var_128]
00000000000027a0         mov        qword [rax], rcx
00000000000027a3         mov        rax, qword [rsp+0x148+var_118]
00000000000027a8         mov        rdi, rcx
00000000000027ab         lea        rax, qword [rbx+rax*8]
00000000000027af         mov        r15, rax
00000000000027b2         jmp        loc_27cd

                     loc_27b4:
00000000000027b4         mov        rdx, rbp                                    ; CODE XREF=main+2544
00000000000027b7         mov        esi, r12d                                   ; argument "__c" for method j_memchr
00000000000027ba         add        rbx, 0x8
00000000000027be         sub        rdx, rdi                                    ; argument "__n" for method j_memchr
00000000000027c1         call       j_memchr                                    ; memchr
00000000000027c6         lea        rdi, qword [rax+1]
00000000000027ca         mov        qword [rbx], rdi

                     loc_27cd:
00000000000027cd         cmp        r15, rbx                                    ; CODE XREF=main+2514
00000000000027d0         jne        loc_27b4

00000000000027d2         mov        r15, qword [rsp+0x148+var_110]
00000000000027d7         mov        rbx, qword [rsp+0x148+var_108]
00000000000027dc         mov        r12, qword [rsp+0x148+var_100]
00000000000027e1         jmp        loc_2346

                     loc_27e6:
00000000000027e6         test       r8, r8                                      ; CODE XREF=main+1204
00000000000027e9         mov        r14, qword [rsp+0x148+var_108]
00000000000027ee         mov        qword [rsp+0x148+var_110], rbx
00000000000027f3         je         loc_29f8

00000000000027f9         lea        r13, qword [rsp+0x148+var_F8]
00000000000027fe         mov        rbp, r12
0000000000002801         mov        rdi, r13
0000000000002804         call       initbuffer                                  ; initbuffer
0000000000002809         mov        qword [rsp+0x148+var_108], r15
000000000000280e         mov        qword [rsp+0x148+var_100], r14
0000000000002813         mov        r15, qword [rsp+0x148+var_138]
0000000000002818         mov        r14d, dword [rsp+0x148+var_118]
000000000000281d         jmp        loc_282b

                     loc_281f:
000000000000281f         test       rbp, rbp                                    ; CODE XREF=main+2687
0000000000002822         je         loc_296a

0000000000002828         mov        rbp, rbx

                     loc_282b:
000000000000282b         mov        rdi, qword [rsp+0x148+var_128]              ; CODE XREF=main+2621
0000000000002830         mov        rsi, rbp
0000000000002833         lea        rbx, qword [rbp+1]
0000000000002837         call       randint_genmax                              ; randint_genmax
000000000000283c         cmp        r12, rax
000000000000283f         mov        rdi, r13
0000000000002842         jbe        loc_2851

0000000000002844         imul       rax, rax, 0x18
0000000000002848         mov        rcx, qword [rsp+0x148+var_110]
000000000000284d         lea        rdi, qword [rcx+rax]

                     loc_2851:
0000000000002851         mov        edx, r14d                                   ; CODE XREF=main+2658
0000000000002854         mov        rsi, r15
0000000000002857         call       readlinebuffer_delim                        ; readlinebuffer_delim
000000000000285c         test       rax, rax
000000000000285f         jne        loc_281f

0000000000002861         test       rbp, rbp
0000000000002864         mov        r15, qword [rsp+0x148+var_108]
0000000000002869         mov        r14, qword [rsp+0x148+var_100]
000000000000286e         je         loc_2bc8

                     loc_2874:
0000000000002874         mov        rdi, r13                                    ; CODE XREF=main+2969
0000000000002877         call       freebuffer                                  ; freebuffer

                     loc_287c:
000000000000287c         mov        rax, qword [rsp+0x148+var_138]              ; CODE XREF=main+2862, main+3099
0000000000002881         test       byte [rax], 0x20
0000000000002884         jne        loc_2b9c

000000000000288a         cmp        r12, rbp
000000000000288d         mov        ecx, 0x1
0000000000002892         cmova      r12, rbp
0000000000002896         xor        ebx, ebx
0000000000002898         mov        qword [rsp+0x148+var_118], r12
000000000000289d         jmp        loc_250e

                     loc_28a2:
00000000000028a2         xor        ecx, ecx                                    ; CODE XREF=main+1545
00000000000028a4         mov        qword [rsp+0x148+var_110], 0x0

                     loc_28ad:
00000000000028ad         mov        rdx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=main+3295
00000000000028b4         lea        rsi, qword [aWriteError+12]                 ; 0x9275
00000000000028bb         mov        rdi, r15
00000000000028be         mov        byte [rsp+0x148+var_138], cl
00000000000028c2         call       freopen_safer                               ; freopen_safer
00000000000028c7         test       rax, rax
00000000000028ca         movzx      ecx, byte [rsp+0x148+var_138]
00000000000028cf         jne        loc_2ac5

                     loc_28d5:
00000000000028d5         mov        rdx, r15                                    ; CODE XREF=main+1908
00000000000028d8         mov        esi, 0x3
00000000000028dd         xor        edi, edi
00000000000028df         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000028e4         mov        rbx, rax
00000000000028e7         call       j___errno_location                          ; __errno_location
00000000000028ec         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000028ee         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x91fa
00000000000028f5         mov        rcx, rbx
00000000000028f8         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000028fd         xor        eax, eax
00000000000028ff         call       j_error                                     ; error

                     loc_2904:
0000000000002904         mov        r14, qword [rsp+0x148+var_108]              ; CODE XREF=main+1238
0000000000002909         mov        qword [rsp+0x148+var_110], rbx
000000000000290e         jmp        loc_287c

                     loc_2913:
0000000000002913         mov        rax, qword [rsp+0x148+var_118]              ; CODE XREF=main+1940
0000000000002918         xor        r14d, r14d
000000000000291b         mov        r15, qword [rsp+0x148+var_128]
0000000000002920         lea        r13, qword [rax-1]
0000000000002924         jmp        loc_2933

                     loc_2926:
0000000000002926         add        r14, 0x1                                    ; CODE XREF=main+2947
000000000000292a         cmp        r12, r14
000000000000292d         je         loc_2436

                     loc_2933:
0000000000002933         mov        rsi, r13                                    ; CODE XREF=main+2884
0000000000002936         mov        rdi, r15
0000000000002939         call       randint_genmax                              ; randint_genmax
000000000000293e         lea        rax, qword [rbx+rax*8]
0000000000002942         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5
0000000000002949         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
000000000000294e         mov        rdi, qword [rax]                            ; argument "__ptr" for method j_fwrite_unlocked
0000000000002951         mov        rbp, qword [rax+8]
0000000000002955         sub        rbp, rdi
0000000000002958         mov        rdx, rbp                                    ; argument "__n" for method j_fwrite_unlocked
000000000000295b         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000002960         cmp        rbp, rax
0000000000002963         je         loc_2926

0000000000002965         jmp        loc_260c

                     loc_296a:
000000000000296a         mov        r15, qword [rsp+0x148+var_108]              ; CODE XREF=main+2626
000000000000296f         mov        r14, qword [rsp+0x148+var_100]
0000000000002974         mov        ebp, 0x1
0000000000002979         jmp        loc_2874

                     loc_297e:
000000000000297e         lea        rsi, qword [aSReadError+13]                 ; 0x9ca5, CODE XREF=main+1079
0000000000002985         mov        rdi, rbp
0000000000002988         call       freopen_safer                               ; freopen_safer
000000000000298d         test       rax, rax
0000000000002990         je         loc_2a4b

0000000000002996         mov        rdi, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
000000000000299d         mov        esi, 0x2
00000000000029a2         call       fadvise                                     ; fadvise
00000000000029a7         cmp        byte [rsp+0x148+var_12A], 0x0
00000000000029ac         jne        loc_26ba

00000000000029b2         cmp        r12, 0xffffffffffffffff
00000000000029b6         jne        loc_265b

00000000000029bc         jmp        loc_26ba

                     loc_29c1:
00000000000029c1         lea        rsi, qword [aCannotCombineE]                ; argument "msgid" for method j_dcgettext, "cannot combine -e and -i options", CODE XREF=main+982
00000000000029c8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000029cd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000029cf         call       j_dcgettext                                 ; dcgettext
00000000000029d4         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000029d6         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000029d9         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000029db         xor        eax, eax
00000000000029dd         call       j_error                                     ; error

                     loc_29e2:
00000000000029e2         mov        edi, 0x1                                    ; argument #1 for method usage, CODE XREF=main+242, main+333, main+619, main+717
00000000000029e7         call       usage                                       ; usage

                     loc_29ec:
00000000000029ec         xor        edi, edi                                    ; argument #1 for method usage, CODE XREF=main+309
00000000000029ee         call       usage                                       ; usage

                     loc_29f3:
00000000000029f3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=main+1641
                        ; endp

                     loc_29f8:
00000000000029f8         mov        rbp, r12                                    ; CODE XREF=main+2579
00000000000029fb         jmp        loc_287c

                     loc_2a00:
0000000000002a00         call       xalloc_die                                  ; xalloc_die, CODE XREF=main+1287, main+1296, main+2435, main+2444
                        ; endp

                     loc_2a05:
0000000000002a05         mov        esi, 0x1                                    ; CODE XREF=main+1273
0000000000002a0a         jmp        loc_22df

                     loc_2a0f:
0000000000002a0f         xor        eax, eax                                    ; CODE XREF=main+1357

                     loc_2a11:
0000000000002a11         mov        rdi, qword [rbx+rax]                        ; argument #1 for method quote, CODE XREF=main+1007
0000000000002a15         call       quote                                       ; quote
0000000000002a1a         lea        rsi, qword [aExtraOperandS]                 ; argument "msgid" for method j_dcgettext, "extra operand %s"
0000000000002a21         mov        rbx, rax
0000000000002a24         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002a29         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002a2b         call       j_dcgettext                                 ; dcgettext
0000000000002a30         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002a32         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002a35         mov        rcx, rbx
0000000000002a38         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002a3a         xor        eax, eax
0000000000002a3c         call       j_error                                     ; error
0000000000002a41         mov        edi, 0x1                                    ; argument #1 for method usage
0000000000002a46         call       usage                                       ; usage

                     loc_2a4b:
0000000000002a4b         mov        rdx, qword [rbx]                            ; CODE XREF=main+2992
0000000000002a4e         mov        esi, 0x3
0000000000002a53         xor        edi, edi
0000000000002a55         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000002a5a         mov        rbx, rax
0000000000002a5d         call       j___errno_location                          ; __errno_location
0000000000002a62         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002a64         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x91fa
0000000000002a6b         mov        rcx, rbx
0000000000002a6e         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002a73         xor        eax, eax
0000000000002a75         call       j_error                                     ; error

                     loc_2a7a:
0000000000002a7a         lea        rsi, qword [aMultipleOutput]                ; argument "msgid" for method j_dcgettext, "multiple output files specified", CODE XREF=main+660
0000000000002a81         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002a86         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002a88         call       j_dcgettext                                 ; dcgettext
0000000000002a8d         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002a8f         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002a92         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002a97         xor        eax, eax
0000000000002a99         call       j_error                                     ; error

                     loc_2a9e:
0000000000002a9e         mov        rdx, qword [rsp+0x148+var_118]              ; CODE XREF=main+1872
0000000000002aa3         mov        rdi, qword [rsp+0x148+var_128]
0000000000002aa8         mov        rsi, r12
0000000000002aab         mov        byte [rsp+0x148+var_138], cl
0000000000002aaf         call       randperm_new                                ; randperm_new
0000000000002ab4         test       r15, r15
0000000000002ab7         mov        r13, rax
0000000000002aba         movzx      ecx, byte [rsp+0x148+var_138]
0000000000002abf         jne        loc_28ad

                     loc_2ac5:
0000000000002ac5         xor        r15d, r15d                                  ; CODE XREF=main+2799
0000000000002ac8         test       cl, cl
0000000000002aca         je         loc_23ef

0000000000002ad0         mov        rbp, qword [rsp+0x148+var_118]
0000000000002ad5         mov        r12, qword [rsp+0x148+var_110]
0000000000002ada         jmp        loc_2b0c

                     loc_2adc:
0000000000002adc         imul       rbx, qword [r13+r15*8], 0x18                ; CODE XREF=main+3375
0000000000002ae2         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5
0000000000002ae9         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000002aee         add        rbx, r12
0000000000002af1         mov        rdx, qword [rbx+8]                          ; argument "__n" for method j_fwrite_unlocked
0000000000002af5         mov        rdi, qword [rbx+0x10]                       ; argument "__ptr" for method j_fwrite_unlocked
0000000000002af9         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000002afe         cmp        rax, qword [rbx+8]
0000000000002b02         jne        loc_260c

0000000000002b08         add        r15, 0x1

                     loc_2b0c:
0000000000002b0c         cmp        rbp, r15                                    ; CODE XREF=main+3322
0000000000002b0f         jne        loc_2adc

0000000000002b11         jmp        loc_2436

                     loc_2b16:
0000000000002b16         lea        rsi, qword [aSReadError+4]                  ; argument "msgid" for method j_dcgettext, 0x9c9c, CODE XREF=main+1861
0000000000002b1d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b22         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b24         call       j_dcgettext                                 ; dcgettext
0000000000002b29         mov        rbx, rax
0000000000002b2c         call       j___errno_location                          ; __errno_location
0000000000002b31         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002b33         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000002b36         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002b3b         xor        eax, eax
0000000000002b3d         call       j_error                                     ; error

                     loc_2b42:
0000000000002b42         mov        esi, 0x1                                    ; CODE XREF=main+2426
0000000000002b47         jmp        loc_2760

                     loc_2b4c:
0000000000002b4c         lea        rsi, qword [aSReadError+4]                  ; argument "msgid" for method j_dcgettext, 0x9c9c, CODE XREF=main+2298
0000000000002b53         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b58         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b5a         call       j_dcgettext                                 ; dcgettext
0000000000002b5f         mov        rbx, rax
0000000000002b62         call       j___errno_location                          ; __errno_location
0000000000002b67         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002b69         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000002b6c         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002b71         xor        eax, eax
0000000000002b73         call       j_error                                     ; error

                     loc_2b78:
0000000000002b78         lea        rsi, qword [aNoLinesToRepea]                ; argument "msgid" for method j_dcgettext, "no lines to repeat", CODE XREF=main+1929
0000000000002b7f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b84         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b86         call       j_dcgettext                                 ; dcgettext
0000000000002b8b         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002b8d         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002b90         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002b95         xor        eax, eax
0000000000002b97         call       j_error                                     ; error

                     loc_2b9c:
0000000000002b9c         lea        rsi, qword [aSReadError+4]                  ; argument "msgid" for method j_dcgettext, 0x9c9c, CODE XREF=main+2724
0000000000002ba3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ba8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002baa         call       j_dcgettext                                 ; dcgettext
0000000000002baf         mov        rbx, rax
0000000000002bb2         call       j___errno_location                          ; __errno_location
0000000000002bb7         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002bb9         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000002bbc         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002bc1         xor        eax, eax
0000000000002bc3         call       j_error                                     ; error

                     loc_2bc8:
0000000000002bc8         lea        rsi, qword [aTooManyInputLi]                ; argument "msgid" for method j_dcgettext, "too many input lines", CODE XREF=main+2702
0000000000002bcf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002bd4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002bd6         call       j_dcgettext                                 ; dcgettext
0000000000002bdb         mov        esi, 0x4b                                   ; argument "__errnum" for method j_error
0000000000002be0         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002be3         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002be8         xor        eax, eax
0000000000002bea         call       j_error                                     ; error

                     loc_2bef:
0000000000002bef         lea        rsi, qword [aMultipleRandom]                ; argument "msgid" for method j_dcgettext, "multiple random sources specified", CODE XREF=main+283
0000000000002bf6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002bfb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002bfd         call       j_dcgettext                                 ; dcgettext
0000000000002c02         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002c04         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002c07         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002c0c         xor        eax, eax
0000000000002c0e         call       j_error                                     ; error

                     loc_2c13:
0000000000002c13         lea        rsi, qword [aMultipleIOptio]                ; argument "msgid" for method j_dcgettext, "multiple -i options specified", CODE XREF=main+364
0000000000002c1a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002c1f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002c21         call       j_dcgettext                                 ; dcgettext
0000000000002c26         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002c28         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002c2b         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002c30         xor        eax, eax
0000000000002c32         call       j_error                                     ; error
0000000000002c37         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xa7f0)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000002c40         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0xa754)
0000000000002c42         mov        r9, rdx
0000000000002c45         pop        rsi
0000000000002c46         mov        rdx, rsp
0000000000002c49         and        rsp, 0xfffffffffffffff0
0000000000002c4d         push       rax
0000000000002c4e         push       rsp
0000000000002c4f         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000002c56         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
0000000000002c5d         lea        rdi, qword [main]                           ; main
0000000000002c64         call       qword [qword_20cfc8+8]                      ; 0x20cfd0
0000000000002c6a         hlt
                        ; endp
0000000000002c6b         align      16                                          ; End of unwind block (FDE at 0xa754)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000002c70         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
0000000000002c77         push       rbp
0000000000002c78         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
0000000000002c7f         cmp        rax, rdi
0000000000002c82         mov        rbp, rsp
0000000000002c85         je         loc_2ca0

0000000000002c87         mov        rax, qword [qword_20cfc8]                   ; qword_20cfc8
0000000000002c8e         test       rax, rax
0000000000002c91         je         loc_2ca0

0000000000002c93         pop        rbp
0000000000002c94         jmp        rax
                        ; endp
0000000000002c96         align      32

                     loc_2ca0:
0000000000002ca0         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000002ca1         ret
                        ; endp
0000000000002ca2         align      16

                     register_tm_clones:
0000000000002cb0         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
0000000000002cb7         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
0000000000002cbe         push       rbp
0000000000002cbf         sub        rsi, rdi
0000000000002cc2         mov        rbp, rsp
0000000000002cc5         sar        rsi, 0x3
0000000000002cc9         mov        rax, rsi
0000000000002ccc         shr        rax, 0x3f
0000000000002cd0         add        rsi, rax
0000000000002cd3         sar        rsi, 0x1
0000000000002cd6         je         loc_2cf0

0000000000002cd8         mov        rax, qword [qword_20cfe0]                   ; qword_20cfe0
0000000000002cdf         test       rax, rax
0000000000002ce2         je         loc_2cf0

0000000000002ce4         pop        rbp
0000000000002ce5         jmp        rax
                        ; endp
0000000000002ce7         align      16

                     loc_2cf0:
0000000000002cf0         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
0000000000002cf1         ret
                        ; endp
0000000000002cf2         align      256


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
0000000000002d00         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
0000000000002d07         jne        loc_2d38

0000000000002d09         cmp        qword [qword_20cfe8], 0x0                   ; qword_20cfe8
0000000000002d11         push       rbp
0000000000002d12         mov        rbp, rsp
0000000000002d15         je         loc_2d23

0000000000002d17         mov        rdi, qword [__dso_handle]                   ; __dso_handle
0000000000002d1e         call       j_qword_20cfe8                              ; qword_20cfe8

                     loc_2d23:
0000000000002d23         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
0000000000002d28         mov        byte [completed.7697], 0x1                  ; completed.7697
0000000000002d2f         pop        rbp
0000000000002d30         ret
                        ; endp
0000000000002d31         align      8

                     loc_2d38:
0000000000002d38         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
0000000000002d3a         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000002d40         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000002d41         mov        rbp, rsp
0000000000002d44         pop        rbp
0000000000002d45         jmp        register_tm_clones                          ; register_tm_clones
0000000000002d4a         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     usage:
0000000000002d50         push       r13                                         ; Begin of unwind block (FDE at 0xa7c4), CODE XREF=main+3079, main+3086, main+3174
0000000000002d52         push       r12
0000000000002d54         mov        edx, 0x5
0000000000002d59         push       rbp
0000000000002d5a         push       rbx
0000000000002d5b         mov        ebp, edi
0000000000002d5d         sub        rsp, 0x88
0000000000002d64         mov        rbx, qword [program_name]                   ; program_name
0000000000002d6b         mov        rax, qword [fs:0x28]
0000000000002d74         mov        qword [rsp+0xa8+var_30], rax
0000000000002d79         xor        eax, eax
0000000000002d7b         test       edi, edi
0000000000002d7d         je         loc_2dad

0000000000002d7f         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
0000000000002d86         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d88         call       j_dcgettext                                 ; dcgettext
0000000000002d8d         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000002d94         mov        rdx, rax
0000000000002d97         mov        rcx, rbx
0000000000002d9a         mov        esi, 0x1
0000000000002d9f         xor        eax, eax
0000000000002da1         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_2da6:
0000000000002da6         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+790
0000000000002da8         call       j_exit                                      ; exit
                        ; endp

                     loc_2dad:
0000000000002dad         lea        rsi, qword [aUsageSOptionFi]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... [FILE]\\n  or:  %s -e [OPTION]... [ARG]...\\n  or:  %s -i LO-HI [OPTION]...\\n", CODE XREF=usage+45
0000000000002db4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002db6         call       j_dcgettext                                 ; dcgettext
0000000000002dbb         mov        rcx, rbx
0000000000002dbe         mov        r8, rbx
0000000000002dc1         mov        rdx, rbx
0000000000002dc4         mov        rsi, rax
0000000000002dc7         mov        edi, 0x1
0000000000002dcc         xor        eax, eax
0000000000002dce         call       j___printf_chk                              ; __printf_chk
0000000000002dd3         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002dda         lea        rsi, qword [aWriteARandomPe]                ; argument "msgid" for method j_dcgettext, "Write a random permutation of the input lines to standard output.\\n"
0000000000002de1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002de6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002de8         call       j_dcgettext                                 ; dcgettext
0000000000002ded         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002df0         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002df3         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002df8         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002dff         lea        rsi, qword [aNwithNoFileOrW]                ; argument "msgid" for method j_dcgettext, "\\nWith no FILE, or when FILE is -, read standard input.\\n"
0000000000002e06         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e0b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e0d         call       j_dcgettext                                 ; dcgettext
0000000000002e12         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002e15         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002e18         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002e1d         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002e24         lea        rsi, qword [aNmandatoryArgu]                ; argument "msgid" for method j_dcgettext, "\\nMandatory arguments to long options are mandatory for short options too.\\n"
0000000000002e2b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e30         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e32         call       j_dcgettext                                 ; dcgettext
0000000000002e37         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002e3a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002e3d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002e42         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002e49         lea        rsi, qword [aEEchoTreatEach]                ; argument "msgid" for method j_dcgettext, "  -e, --echo                treat each ARG as an input line\\n  -i, --input-range=LO-HI   treat each number LO through HI as an input line\\n  -n, --head-count=COUNT    output at most COUNT lines\\n  -o, --output=FILE         write result to FILE instead of stan…"
0000000000002e50         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e55         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e57         call       j_dcgettext                                 ; dcgettext
0000000000002e5c         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002e5f         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002e62         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002e67         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002e6e         lea        rsi, qword [aZZeroterminate]                ; argument "msgid" for method j_dcgettext, "  -z, --zero-terminated     line delimiter is NUL, not newline\\n"
0000000000002e75         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e7a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e7c         call       j_dcgettext                                 ; dcgettext
0000000000002e81         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002e84         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002e87         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002e8c         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002e93         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
0000000000002e9a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e9f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ea1         call       j_dcgettext                                 ; dcgettext
0000000000002ea6         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002ea9         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002eac         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002eb1         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002eb8         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000002ebf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ec4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ec6         call       j_dcgettext                                 ; dcgettext
0000000000002ecb         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002ece         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002ed1         lea        rbx, qword [_IO_stdin_used+4]               ; 0x9104
0000000000002ed8         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002edd         lea        rax, qword [_IO_stdin_used+9]               ; 0x9109
0000000000002ee4         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
0000000000002eeb         mov        qword [rsp+0xa8+var_48], 0x0
0000000000002ef4         mov        qword [rsp+0xa8+var_40], 0x0
0000000000002efd         mov        rdx, rsp
0000000000002f00         mov        qword [rsp+0xa8+var_A8], rax
0000000000002f04         lea        rax, qword [aTestInvocation]                ; "test invocation"
0000000000002f0b         mov        qword [rsp+0xa8+var_78], rcx
0000000000002f10         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
0000000000002f17         mov        qword [rsp+0xa8+var_A0], rax
0000000000002f1c         lea        rax, qword [aCoreutils]                     ; "coreutils"
0000000000002f23         mov        qword [rsp+0xa8+var_68], rcx
0000000000002f28         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
0000000000002f2f         mov        qword [rsp+0xa8+var_98], rax
0000000000002f34         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
0000000000002f3b         mov        qword [rsp+0xa8+var_58], rcx
0000000000002f40         mov        qword [rsp+0xa8+var_90], rax
0000000000002f45         lea        rax, qword [aSha224sum]                     ; "sha224sum"
0000000000002f4c         mov        qword [rsp+0xa8+var_88], rax
0000000000002f51         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
0000000000002f58         mov        qword [rsp+0xa8+var_80], rax
0000000000002f5d         mov        qword [rsp+0xa8+var_70], rax
0000000000002f62         mov        qword [rsp+0xa8+var_60], rax
0000000000002f67         mov        qword [rsp+0xa8+var_50], rax
0000000000002f6c         nop        dword [rax]

                     loc_2f70:
0000000000002f70         add        rdx, 0x10                                   ; CODE XREF=usage+573
0000000000002f74         mov        rdi, qword [rdx]
0000000000002f77         test       rdi, rdi
0000000000002f7a         je         loc_2f8f

0000000000002f7c         mov        ecx, 0x5
0000000000002f81         mov        rsi, rbx
0000000000002f84         rep  cmpsb byte [rsi], byte [rdi]
0000000000002f86         seta       al
0000000000002f89         sbb        al, 0x0
0000000000002f8b         test       al, al
0000000000002f8d         jne        loc_2f70

                     loc_2f8f:
0000000000002f8f         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+554
0000000000002f93         xor        edi, edi
0000000000002f95         mov        edx, 0x5
0000000000002f9a         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
0000000000002fa1         test       r12, r12
0000000000002fa4         je         loc_306b

0000000000002faa         call       j_dcgettext                                 ; dcgettext
0000000000002faf         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002fb6         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x917f
0000000000002fbd         mov        rsi, rax
0000000000002fc0         mov        edi, 0x1
0000000000002fc5         xor        eax, eax
0000000000002fc7         call       j___printf_chk                              ; __printf_chk
0000000000002fcc         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000002fce         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000002fd3         call       j_setlocale                                 ; setlocale
0000000000002fd8         test       rax, rax
0000000000002fdb         je         loc_2ff9

0000000000002fdd         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x918d
0000000000002fe4         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000002fe9         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000002fec         call       j_strncmp                                   ; strncmp
0000000000002ff1         test       eax, eax
0000000000002ff3         jne        loc_3100

                     loc_2ff9:
0000000000002ff9         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+651, usage+981
0000000000003000         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003002         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003007         call       j_dcgettext                                 ; dcgettext
000000000000300c         lea        rcx, qword [_IO_stdin_used+4]               ; 0x9104
0000000000003013         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
000000000000301a         mov        rsi, rax
000000000000301d         mov        edi, 0x1
0000000000003022         xor        eax, eax
0000000000003024         call       j___printf_chk                              ; __printf_chk
0000000000003029         cmp        r12, rbx
000000000000302c         lea        rcx, qword [aMulticallInvoc+10]             ; 0x9125
0000000000003033         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0x9d10
000000000000303a         cmove      rbx, rcx

                     loc_303e:
000000000000303e         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+932
0000000000003045         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003047         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000304c         call       j_dcgettext                                 ; dcgettext
0000000000003051         mov        rcx, rbx
0000000000003054         mov        rsi, rax
0000000000003057         mov        rdx, r12
000000000000305a         mov        edi, 0x1
000000000000305f         xor        eax, eax
0000000000003061         call       j___printf_chk                              ; __printf_chk
0000000000003066         jmp        loc_2da6

                     loc_306b:
000000000000306b         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+596
0000000000003070         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000003077         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x917f
000000000000307e         mov        rsi, rax
0000000000003081         mov        edi, 0x1
0000000000003086         xor        eax, eax
0000000000003088         call       j___printf_chk                              ; __printf_chk
000000000000308d         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000308f         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000003094         call       j_setlocale                                 ; setlocale
0000000000003099         test       rax, rax
000000000000309c         je         loc_30b6

000000000000309e         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x918d
00000000000030a5         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
00000000000030aa         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
00000000000030ad         call       j_strncmp                                   ; strncmp
00000000000030b2         test       eax, eax
00000000000030b4         jne        loc_30f9

                     loc_30b6:
00000000000030b6         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+844
00000000000030bd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000030c2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000030c4         lea        r12, qword [_IO_stdin_used+4]               ; 0x9104
00000000000030cb         lea        rbx, qword [aMulticallInvoc+10]             ; 0x9125
00000000000030d2         call       j_dcgettext                                 ; dcgettext
00000000000030d7         lea        rcx, qword [_IO_stdin_used+4]               ; 0x9104
00000000000030de         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000030e5         mov        rsi, rax
00000000000030e8         mov        edi, 0x1
00000000000030ed         xor        eax, eax
00000000000030ef         call       j___printf_chk                              ; __printf_chk
00000000000030f4         jmp        loc_303e

                     loc_30f9:
00000000000030f9         lea        r12, qword [_IO_stdin_used+4]               ; 0x9104, CODE XREF=usage+868

                     loc_3100:
0000000000003100         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+675
0000000000003107         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
000000000000310e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003110         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003115         call       j_dcgettext                                 ; dcgettext
000000000000311a         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
000000000000311d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003120         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003125         jmp        loc_2ff9
000000000000312a         align      16                                          ; End of unwind block (FDE at 0xa7c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000003130         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0xa844), file_name
0000000000003137         ret
                        ; endp
0000000000003138         align      64                                          ; End of unwind block (FDE at 0xa844)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000003140         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0xa858), ignore_EPIPE
0000000000003147         ret
                        ; endp
0000000000003148         align      16                                          ; End of unwind block (FDE at 0xa858)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
0000000000003150         push       rbp                                         ; Begin of unwind block (FDE at 0xa86c), DATA XREF=main+113
0000000000003151         push       rbx
0000000000003152         sub        rsp, 0x8
0000000000003156         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000315d         call       close_stream                                ; close_stream
0000000000003162         test       eax, eax
0000000000003164         je         loc_317c

0000000000003166         call       j___errno_location                          ; __errno_location
000000000000316b         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
0000000000003172         mov        rbx, rax
0000000000003175         je         loc_3193

0000000000003177         cmp        dword [rax], 0x20
000000000000317a         jne        loc_3193

                     loc_317c:
000000000000317c         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
0000000000003183         call       close_stream                                ; close_stream
0000000000003188         test       eax, eax
000000000000318a         jne        loc_31d2

000000000000318c         add        rsp, 0x8
0000000000003190         pop        rbx
0000000000003191         pop        rbp
0000000000003192         ret
                        ; endp

                     loc_3193:
0000000000003193         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
000000000000319a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000319c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000031a1         call       j_dcgettext                                 ; dcgettext
00000000000031a6         mov        rdi, qword [file_name]                      ; file_name
00000000000031ad         mov        rbp, rax
00000000000031b0         test       rdi, rdi
00000000000031b3         je         loc_31dd

00000000000031b5         call       quotearg_colon                              ; quotearg_colon
00000000000031ba         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
00000000000031bc         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
00000000000031c3         mov        rcx, rax
00000000000031c6         mov        r8, rbp
00000000000031c9         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000031cb         xor        eax, eax
00000000000031cd         call       j_error                                     ; error

                     loc_31d2:
00000000000031d2         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
00000000000031d8         call       j__exit                                     ; _exit
                        ; endp

                     loc_31dd:
00000000000031dd         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
00000000000031df         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x91fa
00000000000031e6         mov        rcx, rax
00000000000031e9         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000031eb         xor        eax, eax
00000000000031ed         call       j_error                                     ; error
00000000000031f2         jmp        loc_31d2
00000000000031f4         align      512                                         ; End of unwind block (FDE at 0xa86c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fdadvise:
0000000000003200         jmp        j_posix_fadvise                             ; posix_fadvise, Begin of unwind block (FDE at 0xa89c)
                        ; endp
0000000000003205         align      16                                          ; End of unwind block (FDE at 0xa89c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fadvise:
0000000000003210         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xa8b0), CODE XREF=main+1093, main+2144, main+3010
0000000000003213         je         loc_3230

0000000000003215         push       rbx
0000000000003216         mov        ebx, esi
0000000000003218         call       j_fileno                                    ; fileno
000000000000321d         mov        ecx, ebx                                    ; argument "__advise" for method j_posix_fadvise
000000000000321f         xor        edx, edx                                    ; argument "__len" for method j_posix_fadvise
0000000000003221         xor        esi, esi                                    ; argument "__offset" for method j_posix_fadvise
0000000000003223         pop        rbx
0000000000003224         mov        edi, eax                                    ; argument "__fd" for method j_posix_fadvise
0000000000003226         jmp        j_posix_fadvise                             ; posix_fadvise
                        ; endp
000000000000322b         align      16

                     loc_3230:
0000000000003230         ret                                                    ; CODE XREF=fadvise+3
                        ; endp
0000000000003232         align      64                                          ; End of unwind block (FDE at 0xa8b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     protect_fd:
0000000000003240         push       rbp                                         ; Begin of unwind block (FDE at 0xa8cc), CODE XREF=freopen_safer+131, freopen_safer+161, freopen_safer+277
0000000000003241         push       rbx
0000000000003242         mov        ebp, edi
0000000000003244         lea        rdi, qword [aDevnull]                       ; argument "__file" for method j_open, "/dev/null"
000000000000324b         xor        esi, esi                                    ; argument "__oflag" for method j_open
000000000000324d         xor        eax, eax
000000000000324f         sub        rsp, 0x8
0000000000003253         mov        ebx, 0x1
0000000000003258         call       j_open                                      ; open
000000000000325d         cmp        ebp, eax
000000000000325f         je         loc_3279

0000000000003261         xor        ebx, ebx
0000000000003263         test       eax, eax
0000000000003265         js         loc_3279

0000000000003267         mov        edi, eax                                    ; argument "__fd" for method j_close
0000000000003269         call       j_close                                     ; close
000000000000326e         call       j___errno_location                          ; __errno_location
0000000000003273         mov        dword [rax], 0x9

                     loc_3279:
0000000000003279         add        rsp, 0x8                                    ; CODE XREF=protect_fd+31, protect_fd+37
000000000000327d         mov        eax, ebx
000000000000327f         pop        rbx
0000000000003280         pop        rbp
0000000000003281         ret
                        ; endp
0000000000003282         align      16                                          ; End of unwind block (FDE at 0xa8cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     freopen_safer:
0000000000003290         push       r15                                         ; Begin of unwind block (FDE at 0xa8f4), CODE XREF=main+1900, main+2786, main+2984
0000000000003292         push       r14
0000000000003294         mov        r15, rsi
0000000000003297         push       r13
0000000000003299         push       r12
000000000000329b         mov        r12, rdx
000000000000329e         push       rbp
000000000000329f         push       rbx
00000000000032a0         sub        rsp, 0x18
00000000000032a4         mov        qword [rsp+0x48+var_40], rdi
00000000000032a9         mov        rdi, rdx                                    ; argument "__stream" for method j_fileno
00000000000032ac         call       j_fileno                                    ; fileno
00000000000032b1         mov        ebx, eax
00000000000032b3         call       j___errno_location                          ; __errno_location
00000000000032b8         cmp        ebx, 0x1
00000000000032bb         mov        r14, rax
00000000000032be         je         loc_3420

00000000000032c4         cmp        ebx, 0x2
00000000000032c7         je         loc_3410

00000000000032cd         test       ebx, ebx
00000000000032cf         je         loc_3388

00000000000032d5         mov        esi, 0x2                                    ; argument "__fd2" for method j_dup2
00000000000032da         mov        edi, 0x2                                    ; argument "__fd" for method j_dup2
00000000000032df         call       j_dup2                                      ; dup2
00000000000032e4         cmp        eax, 0x2
00000000000032e7         setne      bl

                     loc_32ea:
00000000000032ea         mov        esi, 0x1                                    ; argument "__fd2" for method j_dup2, CODE XREF=freopen_safer+386
00000000000032ef         mov        edi, 0x1                                    ; argument "__fd" for method j_dup2
00000000000032f4         call       j_dup2                                      ; dup2
00000000000032f9         cmp        eax, 0x1
00000000000032fc         setne      bpl

                     loc_3300:
0000000000003300         xor        esi, esi                                    ; argument "__fd2" for method j_dup2, CODE XREF=freopen_safer+404
0000000000003302         xor        edi, edi                                    ; argument "__fd" for method j_dup2
0000000000003304         call       j_dup2                                      ; dup2
0000000000003309         test       eax, eax
000000000000330b         je         loc_3398

0000000000003311         xor        edi, edi
0000000000003313         call       protect_fd                                  ; protect_fd
0000000000003318         test       al, al
000000000000331a         mov        r13d, eax
000000000000331d         je         loc_3430

0000000000003323         test       bpl, bpl
0000000000003326         jne        loc_33a0

                     loc_3328:
0000000000003328         test       bl, bl                                      ; CODE XREF=freopen_safer+270, freopen_safer+286
000000000000332a         je         loc_3340

000000000000332c         mov        edi, 0x2
0000000000003331         call       protect_fd                                  ; protect_fd
0000000000003336         test       al, al
0000000000003338         mov        ebx, eax
000000000000333a         je         loc_33f0

                     loc_3340:
0000000000003340         mov        rdi, qword [rsp+0x48+var_40]                ; argument "__filename" for method j_freopen, CODE XREF=freopen_safer+154, freopen_safer+255
0000000000003345         mov        rdx, r12                                    ; argument "__stream" for method j_freopen
0000000000003348         mov        rsi, r15                                    ; argument "__modes" for method j_freopen
000000000000334b         call       j_freopen                                   ; freopen
0000000000003350         mov        r12, rax

                     loc_3353:
0000000000003353         test       bl, bl                                      ; CODE XREF=freopen_safer+425
0000000000003355         mov        r15d, dword [r14]
0000000000003358         jne        loc_3400

                     loc_335e:
000000000000335e         test       bpl, bpl                                    ; CODE XREF=freopen_safer+378
0000000000003361         jne        loc_33d0

0000000000003363         test       r13b, r13b
0000000000003366         jne        loc_33df

                     loc_3368:
0000000000003368         test       r12, r12                                    ; CODE XREF=freopen_safer+333, freopen_safer+342
000000000000336b         jne        loc_3370

000000000000336d         mov        dword [r14], r15d

                     loc_3370:
0000000000003370         add        rsp, 0x18                                   ; CODE XREF=freopen_safer+219
0000000000003374         mov        rax, r12
0000000000003377         pop        rbx
0000000000003378         pop        rbp
0000000000003379         pop        r12
000000000000337b         pop        r13
000000000000337d         pop        r14
000000000000337f         pop        r15
0000000000003381         ret
                        ; endp
0000000000003382         align      8

                     loc_3388:
0000000000003388         xor        ebx, ebx                                    ; CODE XREF=freopen_safer+63
000000000000338a         xor        ebp, ebp
000000000000338c         xor        r13d, r13d
000000000000338f         jmp        loc_3340
0000000000003391         align      8

                     loc_3398:
0000000000003398         xor        r13d, r13d                                  ; CODE XREF=freopen_safer+123
000000000000339b         test       bpl, bpl
000000000000339e         je         loc_3328

                     loc_33a0:
00000000000033a0         mov        edi, 0x1                                    ; CODE XREF=freopen_safer+150
00000000000033a5         call       protect_fd                                  ; protect_fd
00000000000033aa         test       al, al
00000000000033ac         mov        ebp, eax
00000000000033ae         jne        loc_3328

00000000000033b4         xor        r12d, r12d
00000000000033b7         test       bl, bl
00000000000033b9         mov        r15d, dword [r14]
00000000000033bc         je         loc_33d0

00000000000033be         mov        edi, 0x2                                    ; argument "__fd" for method j_close
00000000000033c3         call       j_close                                     ; close
00000000000033c8         nop        dword [rax+rax]

                     loc_33d0:
00000000000033d0         mov        edi, 0x1                                    ; argument "__fd" for method j_close, CODE XREF=freopen_safer+209, freopen_safer+300
00000000000033d5         call       j_close                                     ; close
00000000000033da         test       r13b, r13b
00000000000033dd         je         loc_3368

                     loc_33df:
00000000000033df         xor        edi, edi                                    ; argument "__fd" for method j_close, CODE XREF=freopen_safer+214
00000000000033e1         call       j_close                                     ; close
00000000000033e6         jmp        loc_3368
00000000000033e8         align      16

                     loc_33f0:
00000000000033f0         mov        r15d, dword [r14]                           ; CODE XREF=freopen_safer+170
00000000000033f3         xor        r12d, r12d
00000000000033f6         nop        word [cs:rax+rax]

                     loc_3400:
0000000000003400         mov        edi, 0x2                                    ; argument "__fd" for method j_close, CODE XREF=freopen_safer+200
0000000000003405         call       j_close                                     ; close
000000000000340a         jmp        loc_335e
000000000000340f         align      16

                     loc_3410:
0000000000003410         xor        ebx, ebx                                    ; CODE XREF=freopen_safer+55
0000000000003412         jmp        loc_32ea
0000000000003417         align      32

                     loc_3420:
0000000000003420         xor        ebx, ebx                                    ; CODE XREF=freopen_safer+46
0000000000003422         xor        ebp, ebp
0000000000003424         jmp        loc_3300
0000000000003429         align      16

                     loc_3430:
0000000000003430         mov        r13d, 0x1                                   ; CODE XREF=freopen_safer+141
0000000000003436         xor        r12d, r12d
0000000000003439         jmp        loc_3353
000000000000343e         align      64                                          ; End of unwind block (FDE at 0xa8f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     initbuffer:
0000000000003440         pxor       xmm0, xmm0                                  ; Begin of unwind block (FDE at 0xa944), CODE XREF=main+2596
0000000000003444         mov        qword [rdi+0x10], 0x0
000000000000344c         movups     xmmword [rdi], xmm0
000000000000344f         ret
                        ; endp

                     readlinebuffer_delim:
0000000000003450         push       r15                                         ; End of unwind block (FDE at 0xa944), Begin of unwind block (FDE at 0xa958), CODE XREF=main+1227, main+2679, readlinebuffer+5
0000000000003452         push       r14
0000000000003454         push       r13
0000000000003456         push       r12
0000000000003458         push       rbp
0000000000003459         push       rbx
000000000000345a         sub        rsp, 0x18
000000000000345e         mov        r13, qword [rdi+0x10]
0000000000003462         mov        r8, qword [rdi]
0000000000003465         add        r8, r13
0000000000003468         test       byte [rsi], 0x10
000000000000346b         jne        loc_3540

0000000000003471         mov        r14, rdi
0000000000003474         mov        rbp, rsi
0000000000003477         mov        rbx, r13
000000000000347a         movsx      r15d, dl
000000000000347e         jmp        loc_348b

                     loc_3480:
0000000000003480         cmp        r12d, r15d                                  ; CODE XREF=readlinebuffer_delim+90
0000000000003483         lea        rbx, qword [rsi+1]
0000000000003487         mov        byte [rsi], cl
0000000000003489         je         loc_34e6

                     loc_348b:
000000000000348b         mov        rcx, qword [rbp+8]                          ; CODE XREF=readlinebuffer_delim+46, readlinebuffer_delim+148
000000000000348f         cmp        rcx, qword [rbp+0x10]
0000000000003493         jae        loc_3500

0000000000003495         lea        rax, qword [rcx+1]
0000000000003499         mov        qword [rbp+8], rax
000000000000349d         movzx      r12d, byte [rcx]
00000000000034a1         mov        ecx, r12d

                     loc_34a4:
00000000000034a4         cmp        rbx, r8                                     ; CODE XREF=readlinebuffer_delim+230, readlinebuffer_delim+259
00000000000034a7         mov        rsi, rbx
00000000000034aa         jne        loc_3480

00000000000034ac         mov        rbx, qword [r14]
00000000000034af         mov        rsi, r14
00000000000034b2         mov        rdi, r13
00000000000034b5         mov        byte [rsp+0x48+var_39], dl
00000000000034b9         mov        byte [rsp+0x48+var_48], cl
00000000000034bc         call       x2realloc                                   ; x2realloc
00000000000034c1         mov        r8, qword [r14]
00000000000034c4         movzx      ecx, byte [rsp+0x48+var_48]
00000000000034c8         lea        rsi, qword [rax+rbx]
00000000000034cc         mov        qword [r14+0x10], rax
00000000000034d0         mov        r13, rax
00000000000034d3         movzx      edx, byte [rsp+0x48+var_39]
00000000000034d8         lea        rbx, qword [rsi+1]
00000000000034dc         add        r8, rax
00000000000034df         cmp        r12d, r15d
00000000000034e2         mov        byte [rsi], cl
00000000000034e4         jne        loc_348b

                     loc_34e6:
00000000000034e6         sub        rbx, r13                                    ; CODE XREF=readlinebuffer_delim+57, readlinebuffer_delim+223
00000000000034e9         mov        rax, r14
00000000000034ec         mov        qword [r14+8], rbx
00000000000034f0         add        rsp, 0x18
00000000000034f4         pop        rbx
00000000000034f5         pop        rbp
00000000000034f6         pop        r12
00000000000034f8         pop        r13
00000000000034fa         pop        r14
00000000000034fc         pop        r15
00000000000034fe         ret
                        ; endp
00000000000034ff         align      256

                     loc_3500:
0000000000003500         mov        rdi, rbp                                    ; argument #1 for method j___uflow, CODE XREF=readlinebuffer_delim+67
0000000000003503         mov        byte [rsp+0x48+var_39], dl
0000000000003507         mov        qword [rsp+0x48+var_48], r8
000000000000350b         call       j___uflow                                   ; __uflow
0000000000003510         cmp        eax, 0xffffffff
0000000000003513         mov        r12d, eax
0000000000003516         mov        r8, qword [rsp+0x48+var_48]
000000000000351a         movzx      edx, byte [rsp+0x48+var_39]
000000000000351f         jne        loc_3551

0000000000003521         cmp        r13, rbx
0000000000003524         je         loc_3540

0000000000003526         test       byte [rbp], 0x20
000000000000352a         jne        loc_3540

000000000000352c         cmp        byte [rbx-1], dl
000000000000352f         je         loc_34e6

0000000000003531         mov        r12d, r15d
0000000000003534         mov        ecx, edx
0000000000003536         jmp        loc_34a4
000000000000353b         align      64

                     loc_3540:
0000000000003540         add        rsp, 0x18                                   ; CODE XREF=readlinebuffer_delim+27, readlinebuffer_delim+212, readlinebuffer_delim+218
0000000000003544         xor        eax, eax
0000000000003546         pop        rbx
0000000000003547         pop        rbp
0000000000003548         pop        r12
000000000000354a         pop        r13
000000000000354c         pop        r14
000000000000354e         pop        r15
0000000000003550         ret
                        ; endp

                     loc_3551:
0000000000003551         mov        ecx, eax                                    ; CODE XREF=readlinebuffer_delim+207
0000000000003553         jmp        loc_34a4
0000000000003558         align      32                                          ; End of unwind block (FDE at 0xa958)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_39: int8_t, -57
        ;    var_48: int64_t, -72


                     readlinebuffer:
0000000000003560         mov        edx, 0xa                                    ; Begin of unwind block (FDE at 0xa9bc)
0000000000003565         jmp        readlinebuffer_delim                        ; readlinebuffer_delim
000000000000356a         align      16                                          ; End of unwind block (FDE at 0xa9bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     freebuffer:
0000000000003570         mov        rdi, qword [rdi+0x10]                       ; Begin of unwind block (FDE at 0xa9d0), CODE XREF=main+2711
0000000000003574         jmp        sub_1dd0                                    ; sub_1dd0
                        ; endp
0000000000003579         align      128                                         ; End of unwind block (FDE at 0xa9d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
0000000000003580         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xa9e4), CODE XREF=main+60
0000000000003583         push       rbx
0000000000003584         je         loc_35fd

0000000000003586         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
000000000000358b         mov        rbx, rdi
000000000000358e         call       j_strrchr                                   ; strrchr
0000000000003593         test       rax, rax
0000000000003596         je         loc_35ed

0000000000003598         lea        r8, qword [rax+1]
000000000000359c         mov        rdx, r8
000000000000359f         sub        rdx, rbx
00000000000035a2         cmp        rdx, 0x6
00000000000035a6         jle        loc_35ed

00000000000035a8         lea        rsi, qword [rax-6]
00000000000035ac         lea        rdi, qword [aLibs]                          ; "/.libs/"
00000000000035b3         mov        ecx, 0x7
00000000000035b8         rep  cmpsb byte [rsi], byte [rdi]
00000000000035ba         seta       dl
00000000000035bd         sbb        dl, 0x0
00000000000035c0         test       dl, dl
00000000000035c2         jne        loc_35ed

00000000000035c4         lea        rdi, qword [aLibs+8]                        ; 0x97a8
00000000000035cb         mov        ecx, 0x3
00000000000035d0         mov        rsi, r8
00000000000035d3         mov        rbx, r8
00000000000035d6         rep  cmpsb byte [rsi], byte [rdi]
00000000000035d8         seta       dl
00000000000035db         sbb        dl, 0x0
00000000000035de         test       dl, dl
00000000000035e0         jne        loc_35ed

00000000000035e2         lea        rbx, qword [rax+4]
00000000000035e6         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_35ed:
00000000000035ed         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
00000000000035f4         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
00000000000035fb         pop        rbx
00000000000035fc         ret
                        ; endp

                     loc_35fd:
00000000000035fd         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
0000000000003604         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
000000000000360b         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
0000000000003610         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000003615         call       j_fwrite                                    ; fwrite
000000000000361a         call       j_abort                                     ; abort
                        ; endp
000000000000361f         align      32                                          ; End of unwind block (FDE at 0xa9e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
0000000000003620         push       rbp                                         ; Begin of unwind block (FDE at 0xaa04), CODE XREF=sub_3e50+2597, sub_3e50+2619
0000000000003621         push       rbx
0000000000003622         mov        rbp, rdi
0000000000003625         mov        ebx, esi
0000000000003627         sub        rsp, 0x8
000000000000362b         call       locale_charset                              ; locale_charset
0000000000003630         movzx      edx, byte [rax]
0000000000003633         and        edx, 0xffffffdf
0000000000003636         cmp        dl, 0x55
0000000000003639         je         loc_36b0

000000000000363b         cmp        dl, 0x47
000000000000363e         je         loc_3660

                     loc_3640:
0000000000003640         lea        rax, qword [aLibs+27]                       ; 0x97bb, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
0000000000003647         lea        rdx, qword [aLibs+29]                       ; 0x97bd
000000000000364e         cmp        ebx, 0x9
0000000000003651         cmovne     rax, rdx
0000000000003655         add        rsp, 0x8
0000000000003659         pop        rbx
000000000000365a         pop        rbp
000000000000365b         ret
                        ; endp
000000000000365c         align      32

                     loc_3660:
0000000000003660         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
0000000000003664         and        edx, 0xffffffdf
0000000000003667         cmp        dl, 0x42
000000000000366a         jne        loc_3640

000000000000366c         cmp        byte [rax+2], 0x31
0000000000003670         jne        loc_3640

0000000000003672         cmp        byte [rax+3], 0x38
0000000000003676         jne        loc_3640

0000000000003678         cmp        byte [rax+4], 0x30
000000000000367c         jne        loc_3640

000000000000367e         cmp        byte [rax+5], 0x33
0000000000003682         jne        loc_3640

0000000000003684         cmp        byte [rax+6], 0x30
0000000000003688         jne        loc_3640

000000000000368a         cmp        byte [rax+7], 0x0
000000000000368e         jne        loc_3640

0000000000003690         cmp        byte [rbp], 0x60
0000000000003694         lea        rax, qword [aLibs+20]                       ; 0x97b4
000000000000369b         lea        rdx, qword [aLibs+24]                       ; 0x97b8
00000000000036a2         cmovne     rax, rdx
00000000000036a6         add        rsp, 0x8
00000000000036aa         pop        rbx
00000000000036ab         pop        rbp
00000000000036ac         ret
                        ; endp
00000000000036ad         align      16

                     loc_36b0:
00000000000036b0         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
00000000000036b4         and        edx, 0xffffffdf
00000000000036b7         cmp        dl, 0x54
00000000000036ba         jne        loc_3640

00000000000036bc         movzx      edx, byte [rax+2]
00000000000036c0         and        edx, 0xffffffdf
00000000000036c3         cmp        dl, 0x46
00000000000036c6         jne        loc_3640

00000000000036cc         cmp        byte [rax+3], 0x2d
00000000000036d0         jne        loc_3640

00000000000036d6         cmp        byte [rax+4], 0x38
00000000000036da         jne        loc_3640

00000000000036e0         cmp        byte [rax+5], 0x0
00000000000036e4         jne        loc_3640

00000000000036ea         cmp        byte [rbp], 0x60
00000000000036ee         lea        rax, qword [aLibs+12]                       ; 0x97ac
00000000000036f5         lea        rdx, qword [aLibs+16]                       ; 0x97b0
00000000000036fc         cmovne     rax, rdx
0000000000003700         add        rsp, 0x8
0000000000003704         pop        rbx
0000000000003705         pop        rbp
0000000000003706         ret
                        ; endp
0000000000003707         align      16                                          ; End of unwind block (FDE at 0xaa04)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
0000000000003710         push       r15                                         ; Begin of unwind block (FDE at 0xaa48), CODE XREF=sub_3e50+1165, sub_3e50+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
0000000000003712         push       r14
0000000000003714         mov        r15d, r8d
0000000000003717         push       r13
0000000000003719         push       r12
000000000000371b         mov        r14, rdi
000000000000371e         push       rbp
000000000000371f         push       rbx
0000000000003720         mov        ebx, r9d
0000000000003723         mov        r13, rsi
0000000000003726         mov        rbp, rcx
0000000000003729         and        ebx, 0x2
000000000000372c         sub        rsp, 0xb8
0000000000003733         mov        rax, qword [rsp+0xe8+arg_0]
000000000000373b         mov        qword [rsp+0xe8+var_D8], rdx
0000000000003740         mov        dword [rsp+0xe8+var_E0], r8d
0000000000003745         mov        dword [rsp+0xe8+var_70], r9d
000000000000374a         mov        qword [rsp+0xe8+var_C8], rax
000000000000374f         mov        rax, qword [rsp+0xe8+arg_8]
0000000000003757         mov        qword [rsp+0xe8+var_80], rax
000000000000375c         mov        rax, qword [rsp+0xe8+arg_10]
0000000000003764         mov        qword [rsp+0xe8+var_88], rax
0000000000003769         mov        rax, qword [fs:0x28]
0000000000003772         mov        qword [rsp+0xe8+var_40], rax
000000000000377a         xor        eax, eax
000000000000377c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000003781         cmp        r15d, 0xa
0000000000003785         mov        qword [rsp+0xe8+var_90], rax
000000000000378a         ja         loc_493f

0000000000003790         lea        rcx, qword [switch_table_9820]              ; switch_table_9820
0000000000003797         mov        edx, r15d
000000000000379a         movsxd     rax, dword [rcx+rdx*4]
000000000000379e         add        rax, rcx
00000000000037a1         jmp        rax                                         ; switch statement using table at 0x9820, with 11 cases, 0x37a3,0x4374,0x43d0,0x4425,0x446a,0x44a4,0x454a,0x4584,0x4778

                     loc_37a3:
00000000000037a3         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_3e50+1318
00000000000037a8         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000037ad         xor        r12d, r12d
00000000000037b0         mov        qword [rsp+0xe8+var_98], 0x0
00000000000037b9         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000037be         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_37c3:
00000000000037c3         lea        rax, qword [aLibs+29]                       ; 0x97bd, CODE XREF=sub_3e50+1876
00000000000037ca         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000037d3         xor        r15d, r15d
00000000000037d6         mov        dword [rsp+0xe8+var_E0], 0x2
00000000000037de         mov        qword [rsp+0xe8+var_A0], rax

                     loc_37e3:
00000000000037e3         xor        r11d, r11d                                  ; CODE XREF=sub_3e50+180, sub_3e50+1400, sub_3e50+1488, sub_3e50+1557, sub_3e50+1615, sub_3e50+1781, sub_3e50+1839, sub_3e50+2408, sub_3e50+2485
00000000000037e6         mov        rax, rbp
00000000000037e9         mov        r8d, r12d
00000000000037ec         mov        rbp, r11
00000000000037ef         mov        r11, rax
00000000000037f2         nop        word [rax+rax]

                     loc_37f8:
00000000000037f8         cmp        r11, rbp                                    ; CODE XREF=sub_3900+194
00000000000037fb         setne      r12b
00000000000037ff         cmp        r11, 0xffffffffffffffff
0000000000003803         jne        loc_3812

0000000000003805         mov        rax, qword [rsp+0xe8+var_D8]
000000000000380a         cmp        byte [rax+rbp], 0x0
000000000000380e         setne      r12b

                     loc_3812:
0000000000003812         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
0000000000003815         je         loc_3e70

000000000000381b         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003820         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000003825         lea        r9, qword [rdi+rbp]
0000000000003829         setne      al
000000000000382c         and        al, byte [rsp+0xe8+var_DB]
0000000000003830         mov        r10d, eax
0000000000003833         je         loc_38e0

0000000000003839         mov        rax, qword [rsp+0xe8+var_D0]
000000000000383e         test       rax, rax
0000000000003841         je         loc_3c70

0000000000003847         cmp        r11, 0xffffffffffffffff
000000000000384b         lea        rbx, qword [rbp+rax]
0000000000003850         jne        loc_3880

0000000000003852         cmp        rax, 0x1
0000000000003856         jbe        loc_3880

0000000000003858         mov        byte [rsp+0xe8+var_B0], r8b
000000000000385d         mov        byte [rsp+0xe8+var_B8], r10b
0000000000003862         mov        qword [rsp+0xe8+var_C0], r9
0000000000003867         call       j_strlen                                    ; strlen
000000000000386c         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000003872         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000003878         mov        r11, rax
000000000000387b         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_3880:
0000000000003880         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000003883         mov        byte [rsp+0xe8+var_C0], r10b
0000000000003888         ja         loc_3e40

000000000000388e         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000003893         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000003898         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
000000000000389b         mov        qword [rsp+0xe8+var_A8], r11
00000000000038a0         mov        byte [rsp+0xe8+var_B0], r8b
00000000000038a5         mov        qword [rsp+0xe8+var_B8], r9
00000000000038aa         call       j_memcmp                                    ; memcmp
00000000000038af         test       eax, eax
00000000000038b1         mov        r9, qword [rsp+0xe8+var_B8]
00000000000038b6         movzx      r8d, byte [rsp+0xe8+var_B0]
00000000000038bc         mov        r11, qword [rsp+0xe8+var_A8]
00000000000038c1         jne        loc_3e40

00000000000038c7         cmp        byte [rsp+0xe8+var_D9], 0x0
00000000000038cc         movzx      r10d, byte [rsp+0xe8+var_C0]
00000000000038d2         jne        loc_4855

00000000000038d8         nop        dword [rax+rax]

                     loc_38e0:
00000000000038e0         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_3e30+19
00000000000038e4         cmp        bl, 0x7e
00000000000038e7         ja         loc_3c08

00000000000038ed         lea        rcx, qword [switch_table_9820+44]           ; 0x984c
00000000000038f4         movzx      edx, bl
00000000000038f7         movsxd     rax, dword [rcx+rdx*4]
00000000000038fb         add        rax, rcx
00000000000038fe         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_3900:
0000000000003900         xor        r10d, r10d
0000000000003903         cmp        r11, 0x1
0000000000003907         setne      al
000000000000390a         cmp        r11, 0xffffffffffffffff
000000000000390e         jne        loc_391c

0000000000003910         mov        rax, qword [rsp+arg_8]
0000000000003915         cmp        byte [rax+1], 0x0
0000000000003919         setne      al

                     loc_391c:
000000000000391c         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_3900+14
0000000000003921         sete       dl
0000000000003924         test       al, al
0000000000003926         je         loc_3b78

                     loc_392c:
000000000000392c         xor        r12d, r12d                                  ; CODE XREF=sub_3b70+11
000000000000392f         xor        eax, eax
0000000000003931         nop        dword [rax]
                        ; endp

                     loc_3938:
0000000000003938         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_3b20+50, sub_3bf0+119
000000000000393d         jne        loc_3a52

0000000000003943         test       dl, dl
0000000000003945         jne        loc_3a52

                     loc_394b:
000000000000394b         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_3a00+87
0000000000003950         test       rsi, rsi
0000000000003953         je         loc_3969

0000000000003955         mov        edx, ebx
0000000000003957         shr        dl, 0x5
000000000000395a         movzx      edx, dl
000000000000395d         mov        edx, dword [rsi+rdx*4]
0000000000003960         bt         edx, ebx
0000000000003963         jb         loc_3ab3

                     loc_3969:
0000000000003969         test       r10b, r10b                                  ; CODE XREF=sub_3900+83, sub_3a00+93
000000000000396c         jne        loc_3ab3

0000000000003972         xor        eax, 0x1
0000000000003975         add        rbp, 0x1
0000000000003979         and        eax, r8d

                     loc_397c:
000000000000397c         test       al, al                                      ; CODE XREF=sub_3e50+936
000000000000397e         je         loc_39a0

0000000000003980         cmp        r13, r15
0000000000003983         jbe        loc_398a

0000000000003985         mov        byte [r14+r15], 0x27

                     loc_398a:
000000000000398a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3900+131
000000000000398e         cmp        r13, rax
0000000000003991         jbe        loc_3999

0000000000003993         mov        byte [r14+r15+1], 0x27

                     loc_3999:
0000000000003999         add        r15, 0x2                                    ; CODE XREF=sub_3900+145
000000000000399d         xor        r8d, r8d

                     loc_39a0:
00000000000039a0         cmp        r15, r13                                    ; CODE XREF=sub_3900+126, sub_3a00+275, sub_3e50+869
00000000000039a3         jae        loc_39a9

00000000000039a5         mov        byte [r14+r15], bl

                     loc_39a9:
00000000000039a9         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_3900+163
00000000000039ae         add        r15, 0x1
00000000000039b2         mov        eax, 0x0
00000000000039b7         test       r12b, r12b
00000000000039ba         cmove      edi, eax
00000000000039bd         mov        byte [rsp+0xe8+var_DA], dil
00000000000039c2         jmp        loc_37f8
00000000000039c7         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_39d0:
00000000000039d0         xor        r10d, r10d
00000000000039d3         mov        eax, dword [rsp+arg_0]
00000000000039d7         cmp        eax, 0x2
00000000000039da         je         loc_3f98

00000000000039e0         cmp        eax, 0x5
00000000000039e3         je         loc_3f58

00000000000039e9         cmp        eax, 0x2
00000000000039ec         mov        ebx, 0x3f
00000000000039f1         sete       dl
00000000000039f4         xor        r12d, r12d
00000000000039f7         xor        eax, eax
00000000000039f9         jmp        sub_3900+56
                        ; endp
00000000000039fe         align      512


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_3a00:
0000000000003a00         xor        r10d, r10d
0000000000003a03         cmp        dword [rsp+arg_0], 0x2
0000000000003a08         je         loc_3f10

0000000000003a0e         mov        byte [rsp+arg_74], r12b
0000000000003a13         xor        edx, edx
0000000000003a15         xor        eax, eax
0000000000003a17         mov        ebx, 0x27
0000000000003a1c         jmp        sub_3900+56
                        ; endp
0000000000003a21         nop        dword [rax]
0000000000003a28         mov        edx, 0x9
0000000000003a2d         mov        ebx, 0x74

                     loc_3a32:
0000000000003a32         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_3bc0+10, sub_3cb0+37, sub_3df0+53
0000000000003a37         sete       al
0000000000003a3a         and        al, byte [rsp+arg_7]
0000000000003a3e         jne        sub_3b70+30

0000000000003a44         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_3a00+114
0000000000003a49         jne        loc_3ab0

                     loc_3a4b:
0000000000003a4b         mov        ebx, edx                                    ; CODE XREF=sub_3b20+18
0000000000003a4d         xor        r12d, r12d
0000000000003a50         xor        eax, eax
                        ; endp

                     loc_3a52:
0000000000003a52         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_3900+61, sub_3900+69
0000000000003a57         jne        loc_394b

0000000000003a5d         jmp        loc_3969
0000000000003a62         nop        word [rax+rax]
0000000000003a68         mov        edx, 0x8
0000000000003a6d         mov        ebx, 0x62
0000000000003a72         jmp        sub_3a00+68
0000000000003a74         nop        dword [rax]
0000000000003a78         cmp        dword [rsp+8], 0x2
0000000000003a7d         je         sub_3e50                                    ; sub_3e50
0000000000003a83         cmp        byte [rsp+0xd], 0x0
0000000000003a88         je         sub_3c90+16

                     loc_3a8e:
0000000000003a8e         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3c90+8
0000000000003a93         je         loc_3ca0

0000000000003a99         cmp        qword [rsp+arg_10], 0x0
0000000000003a9f         jne        loc_3e5b

0000000000003aa5         mov        ebx, 0x5c
0000000000003aaa         nop        word [rax+rax]
                        ; endp

                     loc_3ab0:
0000000000003ab0         xor        r12d, r12d                                  ; CODE XREF=sub_3a00+73, sub_3df0+29
                        ; endp

                     loc_3ab3:
0000000000003ab3         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3900+99, sub_3900+108
0000000000003ab8         sete       dl
0000000000003abb         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000003ac0         mov        eax, edx
0000000000003ac2         jne        loc_4318

0000000000003ac8         mov        eax, r8d
0000000000003acb         xor        eax, 0x1
0000000000003ace         and        al, dl
0000000000003ad0         je         loc_3b01

0000000000003ad2         cmp        r13, r15
0000000000003ad5         jbe        loc_3adc

0000000000003ad7         mov        byte [r14+r15], 0x27

                     loc_3adc:
0000000000003adc         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_3a00+213
0000000000003ae0         cmp        r13, rdx
0000000000003ae3         jbe        loc_3aeb

0000000000003ae5         mov        byte [r14+r15+1], 0x24

                     loc_3aeb:
0000000000003aeb         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_3a00+227
0000000000003aef         cmp        r13, rdx
0000000000003af2         jbe        loc_3afa

0000000000003af4         mov        byte [r14+r15+2], 0x27

                     loc_3afa:
0000000000003afa         add        r15, 0x3                                    ; CODE XREF=sub_3a00+242
0000000000003afe         mov        r8d, eax

                     loc_3b01:
0000000000003b01         cmp        r13, r15                                    ; CODE XREF=sub_3a00+208
0000000000003b04         jbe        loc_3b0b

0000000000003b06         mov        byte [r14+r15], 0x5c

                     loc_3b0b:
0000000000003b0b         add        r15, 0x1                                    ; CODE XREF=sub_3a00+260
0000000000003b0f         add        rbp, 0x1
0000000000003b13         jmp        loc_39a0
0000000000003b18         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_3b20:
0000000000003b20         cmp        byte [rsp+arg_5], 0x0
0000000000003b25         jne        loc_3cf3

0000000000003b2b         xor        edx, edx
0000000000003b2d         test       byte [rsp+arg_70], 0x1
0000000000003b32         je         loc_3a4b

0000000000003b38         add        rbp, 0x1
0000000000003b3c         jmp        quotearg_buffer_restyled+232
                        ; endp
0000000000003b41         nop        dword [rax]
0000000000003b48         cmp        dword [rsp+8], 0x2
0000000000003b4d         sete       dl
0000000000003b50         xor        eax, eax
0000000000003b52         jmp        sub_3900+56
0000000000003b57         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3b60:
0000000000003b60         mov        edx, 0x7
0000000000003b65         mov        ebx, 0x61
0000000000003b6a         jmp        sub_3a00+68
                        ; endp
0000000000003b6f         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3b70:
0000000000003b70         cmp        dword [rsp+8], 0x2
0000000000003b75         sete       dl
                        ; endp

                     loc_3b78:
0000000000003b78         test       rbp, rbp                                    ; CODE XREF=sub_3900+38, sub_3d90+35
0000000000003b7b         jne        loc_392c

0000000000003b81         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_3dc0+43
0000000000003b86         and        al, dl
0000000000003b88         je         sub_3900+56

0000000000003b8e         mov        rbp, r11
0000000000003b91         mov        dword [rsp+arg_0], 0x2
0000000000003b99         jmp        sub_3e50+1097
                        ; endp
0000000000003b9e         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3ba0:
0000000000003ba0         cmp        dword [rsp+arg_0], 0x2
0000000000003ba5         sete       dl
0000000000003ba8         xor        r12d, r12d
0000000000003bab         jmp        sub_3b70+17
                        ; endp
0000000000003bad         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3bb0:
0000000000003bb0         cmp        dword [rsp+arg_0], 0x2
0000000000003bb5         mov        ebx, 0x20
0000000000003bba         sete       dl
0000000000003bbd         jmp        sub_3b70+17
                        ; endp
0000000000003bbf         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_3bc0:
0000000000003bc0         mov        edx, 0xd
0000000000003bc5         mov        ebx, 0x72
0000000000003bca         jmp        loc_3a32
0000000000003bcf         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3bd0:
0000000000003bd0         mov        edx, 0xc
0000000000003bd5         mov        ebx, 0x66
0000000000003bda         jmp        sub_3a00+68
                        ; endp
0000000000003bdf         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3be0:
0000000000003be0         mov        edx, 0xb
0000000000003be5         mov        ebx, 0x76
0000000000003bea         jmp        sub_3a00+68
                        ; endp
0000000000003bef         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3bf0:
0000000000003bf0         mov        edx, 0xa
0000000000003bf5         mov        ebx, 0x6e
0000000000003bfa         jmp        sub_3a00+50
                        ; endp
0000000000003bff         align      1024

                     loc_3c00:
0000000000003c00         xor        r10d, r10d                                  ; CODE XREF=sub_3bf0+135
0000000000003c03         nop        dword [rax+rax]

                     loc_3c08:
0000000000003c08         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
0000000000003c0e         jne        loc_3fb8

0000000000003c14         mov        qword [rsp+0xe8+var_B0], r11
0000000000003c19         mov        byte [rsp+0xe8+var_B8], r8b
0000000000003c1e         mov        byte [rsp+0xe8+var_C0], r10b
0000000000003c23         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000003c28         mov        rcx, qword [rax]
0000000000003c2b         movzx      edx, bl
0000000000003c2e         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000003c34         movzx      r8d, byte [rsp+0xe8+var_B8]
0000000000003c3a         mov        r11, qword [rsp+0xe8+var_B0]
0000000000003c3f         mov        edi, 0x1
0000000000003c44         movzx      eax, word [rcx+rdx*2]
0000000000003c48         and        ax, 0x4000
0000000000003c4c         setne      r12b
0000000000003c50         sete       al
0000000000003c53         and        al, byte [rsp+0xe8+var_DB]

                     loc_3c57:
0000000000003c57         test       al, al                                      ; CODE XREF=sub_3e50+2221
0000000000003c59         jne        loc_45f1

0000000000003c5f         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003c64         sete       dl
0000000000003c67         jmp        loc_3938
0000000000003c6c         align      16

                     loc_3c70:
0000000000003c70         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000003c74         cmp        bl, 0x7e
0000000000003c77         ja         loc_3c00

0000000000003c79         lea        rcx, qword [switch_table_9820+552]          ; 0x9a48
0000000000003c80         movzx      edx, bl
0000000000003c83         movsxd     rax, dword [rcx+rdx*4]
0000000000003c87         add        rax, rcx
0000000000003c8a         jmp        rax
                        ; endp
0000000000003c8c         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_3c90:
0000000000003c90         xor        r10d, r10d
0000000000003c93         cmp        byte [rsp+arg_5], 0x0
0000000000003c98         jne        loc_3a8e

0000000000003c9e         nop

                     loc_3ca0:
0000000000003ca0         mov        edx, 0x5c                                   ; CODE XREF=sub_3a00+136, sub_3a00+147
0000000000003ca5         mov        ebx, 0x5c
0000000000003caa         jmp        sub_3a00+68
                        ; endp
0000000000003caf         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3cb0:
0000000000003cb0         mov        edx, 0xc
0000000000003cb5         xor        r10d, r10d
0000000000003cb8         mov        ebx, 0x66
0000000000003cbd         jmp        sub_3a00+68
                        ; endp
0000000000003cc2         nop        word [rax+rax]
0000000000003cc8         mov        edx, 0xa
0000000000003ccd         xor        r10d, r10d
0000000000003cd0         mov        ebx, 0x6e
0000000000003cd5         jmp        sub_3a00+50
0000000000003cda         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3ce0:
0000000000003ce0         mov        ebx, 0x61
0000000000003ce5         jmp        sub_3a00+176
                        ; endp
0000000000003cea         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3cf0:
0000000000003cf0         xor        r10d, r10d
                        ; endp

                     loc_3cf3:
0000000000003cf3         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_3b20+5
0000000000003cf8         sete       dl
0000000000003cfb         cmp        byte [rsp+arg_7], 0x0
0000000000003d00         jne        loc_489a

0000000000003d06         mov        eax, r8d
0000000000003d09         mov        rcx, r15
0000000000003d0c         xor        eax, 0x1
0000000000003d0f         and        al, dl
0000000000003d11         je         loc_3d40

0000000000003d13         cmp        r13, r15
0000000000003d16         jbe        loc_3d1d

0000000000003d18         mov        byte [r14+r15], 0x27

                     loc_3d1d:
0000000000003d1d         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_3cf0+38
0000000000003d21         cmp        r13, rcx
0000000000003d24         jbe        loc_3d2c

0000000000003d26         mov        byte [r14+r15+1], 0x24

                     loc_3d2c:
0000000000003d2c         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_3cf0+52
0000000000003d30         cmp        r13, rcx
0000000000003d33         ja         loc_4369

                     loc_3d39:
0000000000003d39         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_3e50+1311
0000000000003d3d         mov        r8d, eax

                     loc_3d40:
0000000000003d40         cmp        r13, rcx                                    ; CODE XREF=sub_3cf0+33
0000000000003d43         jbe        loc_3d4a

0000000000003d45         mov        byte [r14+rcx], 0x5c

                     loc_3d4a:
0000000000003d4a         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_3cf0+83
0000000000003d4f         lea        r15, qword [rcx+1]
0000000000003d53         je         loc_4359

0000000000003d59         lea        rax, qword [rbp+1]
0000000000003d5d         cmp        rax, r11
0000000000003d60         jae        loc_3d7b

0000000000003d62         mov        rax, qword [rsp+arg_8]
0000000000003d67         movzx      eax, byte [rax+rbp+1]
0000000000003d6c         mov        byte [rsp+arg_20], al
0000000000003d70         sub        eax, 0x30
0000000000003d73         cmp        al, 0x9
0000000000003d75         jbe        loc_45a9

                     loc_3d7b:
0000000000003d7b         mov        eax, r12d                                   ; CODE XREF=sub_3cf0+112
0000000000003d7e         mov        ebx, 0x30
0000000000003d83         xor        r12d, r12d
0000000000003d86         jmp        sub_3900+56
                        ; endp
0000000000003d8b         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3d90:
0000000000003d90         cmp        dword [rsp+arg_0], 0x2
0000000000003d95         mov        r12d, r10d
0000000000003d98         sete       dl
0000000000003d9b         xor        r10d, r10d
0000000000003d9e         xor        eax, eax
0000000000003da0         jmp        sub_3900+56
                        ; endp
0000000000003da5         nop        dword [rax]
0000000000003da8         cmp        dword [rsp+8], 0x2
0000000000003dad         sete       dl
0000000000003db0         xor        r10d, r10d
0000000000003db3         jmp        sub_3b70+8
0000000000003db8         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3dc0:
0000000000003dc0         cmp        dword [rsp+8], 0x2
0000000000003dc5         sete       dl
0000000000003dc8         xor        r10d, r10d
0000000000003dcb         xor        r12d, r12d
0000000000003dce         jmp        sub_3b70+17
                        ; endp
0000000000003dd3         nop        dword [rax+rax]
0000000000003dd8         cmp        dword [rsp+8], 0x2
0000000000003ddd         mov        r12d, r10d
0000000000003de0         mov        ebx, 0x20
0000000000003de5         sete       dl
0000000000003de8         xor        r10d, r10d
0000000000003deb         jmp        sub_3b70+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3df0:
0000000000003df0         mov        edx, 0xd
0000000000003df5         xor        r10d, r10d
0000000000003df8         mov        ebx, 0x72
0000000000003dfd         jmp        sub_3a00+50
                        ; endp
0000000000003e02         nop        word [rax+rax]
0000000000003e08         mov        ebx, 0x76
0000000000003e0d         jmp        sub_3a00+176
0000000000003e12         nop        word [rax+rax]
0000000000003e18         mov        edx, 0x9
0000000000003e1d         xor        r10d, r10d
0000000000003e20         mov        ebx, 0x74
0000000000003e25         jmp        sub_3a00+50
0000000000003e2a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3e30:
0000000000003e30         mov        ebx, 0x62
0000000000003e35         jmp        sub_3a00+176
                        ; endp
0000000000003e3a         nop        word [rax+rax]

                     loc_3e40:
0000000000003e40         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
0000000000003e43         jmp        loc_38e0
0000000000003e48         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_3e50:
0000000000003e50         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3a00+125
0000000000003e55         jne        sub_3e50+2416
                        ; endp

                     loc_3e5b:
0000000000003e5b         add        rbp, 0x1                                    ; CODE XREF=sub_3a00+159
0000000000003e5f         mov        eax, r8d
0000000000003e62         xor        r12d, r12d
0000000000003e65         mov        ebx, 0x5c
0000000000003e6a         jmp        sub_3900+124
                        ; endp
0000000000003e6f         align      16

                     loc_3e70:
0000000000003e70         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
0000000000003e75         movzx      ebx, byte [rsp+0xe8+var_D9]
0000000000003e7a         mov        r12d, r8d
0000000000003e7d         mov        rbp, r11
0000000000003e80         sete       dl
0000000000003e83         mov        eax, ebx
0000000000003e85         test       r15, r15
0000000000003e88         sete       cl
0000000000003e8b         and        eax, edx
0000000000003e8d         and        al, cl
0000000000003e8f         jne        loc_48f6

0000000000003e95         mov        eax, ebx
0000000000003e97         xor        eax, 0x1
0000000000003e9a         and        dl, al
0000000000003e9c         je         loc_480c

0000000000003ea2         cmp        byte [rsp+0xe8+var_6C], 0x0
0000000000003ea7         je         loc_480a

0000000000003ead         cmp        byte [rsp+0xe8+var_DA], 0x0
0000000000003eb2         jne        loc_48ad

0000000000003eb8         test       r13, r13
0000000000003ebb         sete       al
0000000000003ebe         cmp        qword [rsp+0xe8+var_98], 0x0
0000000000003ec4         setne      dl
0000000000003ec7         and        al, dl
0000000000003ec9         je         loc_48ec

0000000000003ecf         mov        r13, qword [rsp+0xe8+var_98]

                     loc_3ed4:
0000000000003ed4         lea        rbx, qword [aLibs+29]                       ; 0x97bd, CODE XREF=sub_3e50+2781
0000000000003edb         mov        byte [r14], 0x27
0000000000003edf         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000003ee7         mov        r15d, 0x1
0000000000003eed         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000003ef6         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000003efb         mov        qword [rsp+0xe8+var_A0], rbx
0000000000003f00         mov        byte [rsp+0xe8+var_6C], al
0000000000003f04         jmp        loc_37e3
0000000000003f09         align      16

                     loc_3f10:
0000000000003f10         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3a00+8
0000000000003f15         jne        sub_3e50+2416

0000000000003f1b         test       r13, r13
0000000000003f1e         je         loc_4320

0000000000003f24         xor        edx, edx
0000000000003f26         cmp        qword [rsp+arg_48], 0x0
0000000000003f2c         jne        loc_4320

                     loc_3f32:
0000000000003f32         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_3e50+1284, sub_3e50+2794
0000000000003f37         add        r15, 0x3
0000000000003f3b         xor        eax, eax
0000000000003f3d         mov        byte [rsp+arg_74], r12b
0000000000003f42         xor        r8d, r8d
0000000000003f45         mov        r13, rdx
0000000000003f48         mov        ebx, 0x27
0000000000003f4d         jmp        sub_3900+105
                        ; endp
0000000000003f52         align      8

                     loc_3f58:
0000000000003f58         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_39d0+19
0000000000003f5d         je         loc_3f80

0000000000003f5f         lea        rcx, qword [rbp+2]
0000000000003f63         cmp        rcx, r11
0000000000003f66         jae        loc_3f80

0000000000003f68         mov        rax, qword [rsp+arg_8]
0000000000003f6d         cmp        byte [rax+rbp+1], 0x3f
0000000000003f72         je         loc_4702

0000000000003f78         nop        dword [rax+rax]

                     loc_3f80:
0000000000003f80         xor        edx, edx                                    ; CODE XREF=sub_3e50+269, sub_3e50+278, sub_3e50+2233, sub_3e50+2253
0000000000003f82         xor        r12d, r12d
0000000000003f85         xor        eax, eax
0000000000003f87         mov        ebx, 0x3f
0000000000003f8c         jmp        sub_3900+56
                        ; endp
0000000000003f91         align      8

                     loc_3f98:
0000000000003f98         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_39d0+10
0000000000003f9d         jne        loc_47c0

0000000000003fa3         xor        r12d, r12d
0000000000003fa6         xor        eax, eax
0000000000003fa8         mov        ebx, 0x3f
0000000000003fad         jmp        sub_3900+105
                        ; endp
0000000000003fb2         align      8

                     loc_3fb8:
0000000000003fb8         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_3bf0+30
0000000000003fc0         cmp        r11, 0xffffffffffffffff
0000000000003fc4         mov        qword [rsp+0xe8+var_48], 0x0
0000000000003fd0         mov        qword [rsp+0xe8+var_C0], rax
0000000000003fd5         jne        loc_4004

0000000000003fd7         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
0000000000003fdc         mov        byte [rsp+0xe8+var_A8], r8b
0000000000003fe1         mov        byte [rsp+0xe8+var_B0], r10b
0000000000003fe6         mov        qword [rsp+0xe8+var_B8], r9
0000000000003feb         call       j_strlen                                    ; strlen
0000000000003ff0         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000003ff6         movzx      r10d, byte [rsp+0xe8+var_B0]
0000000000003ffc         mov        r11, rax
0000000000003fff         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_4004:
0000000000004004         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_3e50+389
000000000000400c         xor        ecx, ecx
000000000000400e         mov        byte [rsp+0xe8+var_6A], bl
0000000000004012         mov        byte [rsp+0xe8+var_6B], r8b
0000000000004017         mov        rbx, rcx
000000000000401a         mov        qword [rsp+0xe8+var_60], r9
0000000000004022         mov        qword [rsp+0xe8+var_B0], rax
0000000000004027         mov        byte [rsp+0xe8+var_69], r10b
000000000000402c         mov        qword [rsp+0xe8+var_68], r15
0000000000004034         mov        qword [rsp+0xe8+var_A8], r14
0000000000004039         mov        qword [rsp+0xe8+var_78], r13
000000000000403e         mov        qword [rsp+0xe8+var_B8], r11

                     loc_4043:
0000000000004043         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_3e50+623
0000000000004048         lea        r14, qword [rbp+rbx]
000000000000404d         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000004052         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000004057         mov        rdi, qword [rsp+0xe8+var_B0]
000000000000405c         lea        r13, qword [rax+r14]
0000000000004060         sub        rdx, r14
0000000000004063         mov        rsi, r13
0000000000004066         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000406b         test       rax, rax
000000000000406e         mov        r15, rax
0000000000004071         je         loc_40c1

0000000000004073         cmp        rax, 0xffffffffffffffff
0000000000004077         je         loc_4695

000000000000407d         cmp        rax, 0xfffffffffffffffe
0000000000004081         je         loc_4621

0000000000004087         cmp        dword [rsp+0xe8+var_E0], 0x2
000000000000408c         sete       al
000000000000408f         and        al, byte [rsp+0xe8+var_D9]
0000000000004093         jne        loc_4230

                     loc_4099:
0000000000004099         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_3e50+996, sub_3e50+1031
00000000000040a0         call       j_iswprint                                  ; iswprint
00000000000040a5         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
00000000000040aa         test       eax, eax
00000000000040ac         mov        eax, 0x0
00000000000040b1         cmove      r12d, eax
00000000000040b5         add        rbx, r15
00000000000040b8         call       j_mbsinit                                   ; mbsinit
00000000000040bd         test       eax, eax
00000000000040bf         je         loc_4043

                     loc_40c1:
00000000000040c1         mov        edx, r12d                                   ; CODE XREF=sub_3e50+545
00000000000040c4         mov        rdi, rbx
00000000000040c7         movzx      r8d, byte [rsp+0xe8+var_6B]
00000000000040cd         xor        edx, 0x1
00000000000040d0         movzx      ebx, byte [rsp+0xe8+var_6A]
00000000000040d5         movzx      r10d, byte [rsp+0xe8+var_69]
00000000000040db         and        dl, byte [rsp+0xe8+var_DB]
00000000000040df         mov        r15, qword [rsp+0xe8+var_68]
00000000000040e7         mov        r14, qword [rsp+0xe8+var_A8]
00000000000040ec         mov        r13, qword [rsp+0xe8+var_78]
00000000000040f1         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_40f6:
00000000000040f6         cmp        rdi, 0x1                                    ; CODE XREF=sub_3e50+2112, sub_3e50+2168
00000000000040fa         jbe        loc_46fb

                     loc_4100:
0000000000004100         mov        rcx, rdi                                    ; CODE XREF=sub_3e50+1961
0000000000004103         xor        esi, esi
0000000000004105         movzx      r9d, byte [rsp+0xe8+var_D9]
000000000000410b         add        rcx, rbp
000000000000410e         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000004113         jmp        loc_41ce
0000000000004118         align      32

                     loc_4120:
0000000000004120         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3e50+896
0000000000004125         sete       al
0000000000004128         test       r9b, r9b
000000000000412b         jne        loc_45e0

0000000000004131         mov        esi, r8d
0000000000004134         xor        esi, 0x1
0000000000004137         and        al, sil
000000000000413a         je         loc_416b

000000000000413c         cmp        r13, r15
000000000000413f         jbe        loc_4146

0000000000004141         mov        byte [r14+r15], 0x27

                     loc_4146:
0000000000004146         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_3e50+751
000000000000414a         cmp        r13, rsi
000000000000414d         jbe        loc_4155

000000000000414f         mov        byte [r14+r15+1], 0x24

                     loc_4155:
0000000000004155         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_3e50+765
0000000000004159         cmp        r13, rsi
000000000000415c         jbe        loc_4164

000000000000415e         mov        byte [r14+r15+2], 0x27

                     loc_4164:
0000000000004164         add        r15, 0x3                                    ; CODE XREF=sub_3e50+780
0000000000004168         mov        r8d, eax

                     loc_416b:
000000000000416b         cmp        r13, r15                                    ; CODE XREF=sub_3e50+746
000000000000416e         jbe        loc_4175

0000000000004170         mov        byte [r14+r15], 0x5c

                     loc_4175:
0000000000004175         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3e50+798
0000000000004179         cmp        r13, rax
000000000000417c         jbe        loc_418b

000000000000417e         mov        eax, ebx
0000000000004180         shr        al, 0x6
0000000000004183         add        eax, 0x30
0000000000004186         mov        byte [r14+r15+1], al

                     loc_418b:
000000000000418b         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3e50+812
000000000000418f         cmp        r13, rax
0000000000004192         jbe        loc_41a4

0000000000004194         mov        eax, ebx
0000000000004196         shr        al, 0x3
0000000000004199         and        eax, 0x7
000000000000419c         add        eax, 0x30
000000000000419f         mov        byte [r14+r15+2], al

                     loc_41a4:
00000000000041a4         and        ebx, 0x7                                    ; CODE XREF=sub_3e50+834
00000000000041a7         add        rbp, 0x1
00000000000041ab         add        r15, 0x3
00000000000041af         add        ebx, 0x30
00000000000041b2         cmp        rbp, rcx
00000000000041b5         jae        loc_39a0

00000000000041bb         mov        esi, edx

                     loc_41bd:
00000000000041bd         cmp        r13, r15                                    ; CODE XREF=sub_3e50+985, sub_3e50+1969
00000000000041c0         jbe        loc_41c6

00000000000041c2         mov        byte [r14+r15], bl

                     loc_41c6:
00000000000041c6         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_3e50+880
00000000000041ca         add        r15, 0x1

                     loc_41ce:
00000000000041ce         test       dl, dl                                      ; CODE XREF=sub_3e50+707
00000000000041d0         jne        loc_4120

00000000000041d6         mov        eax, esi
00000000000041d8         xor        eax, 0x1
00000000000041db         and        eax, r8d
00000000000041de         test       r10b, r10b
00000000000041e1         je         loc_41f1

00000000000041e3         cmp        r13, r15
00000000000041e6         jbe        loc_41ed

00000000000041e8         mov        byte [r14+r15], 0x5c

                     loc_41ed:
00000000000041ed         add        r15, 0x1                                    ; CODE XREF=sub_3e50+918

                     loc_41f1:
00000000000041f1         add        rbp, 0x1                                    ; CODE XREF=sub_3e50+913
00000000000041f5         cmp        rbp, rcx
00000000000041f8         jae        loc_397c

00000000000041fe         test       al, al
0000000000004200         je         loc_45fe

0000000000004206         cmp        r13, r15
0000000000004209         jbe        loc_4210

000000000000420b         mov        byte [r14+r15], 0x27

                     loc_4210:
0000000000004210         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3e50+953
0000000000004214         cmp        r13, rax
0000000000004217         jbe        loc_421f

0000000000004219         mov        byte [r14+r15+1], 0x27

                     loc_421f:
000000000000421f         add        r15, 0x2                                    ; CODE XREF=sub_3e50+967
0000000000004223         xor        r10d, r10d
0000000000004226         xor        r8d, r8d
0000000000004229         jmp        loc_41bd
000000000000422b         align      16

                     loc_4230:
0000000000004230         cmp        r15, 0x1                                    ; CODE XREF=sub_3e50+579
0000000000004234         je         loc_4099

000000000000423a         mov        rdi, qword [rsp+0xe8+var_D8]
000000000000423f         lea        rcx, qword [rdi+r15]
0000000000004243         lea        rdx, qword [rdi+r14+1]
0000000000004248         lea        r8, qword [rcx+r14]
000000000000424c         jmp        loc_425d
000000000000424e         align      16

                     loc_4250:
0000000000004250         add        rdx, 0x1                                    ; CODE XREF=sub_3e50+1046, sub_3e50+1072
0000000000004254         cmp        r8, rdx
0000000000004257         je         loc_4099

                     loc_425d:
000000000000425d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_3e50+1020
0000000000004260         sub        ecx, 0x5b
0000000000004263         cmp        cl, 0x21
0000000000004266         ja         loc_4250

0000000000004268         mov        esi, 0x1
000000000000426d         shl        rsi, cl
0000000000004270         mov        rcx, rsi
0000000000004273         movabs     rsi, 0x20000002b
000000000000427d         test       rcx, rsi
0000000000004280         je         loc_4250

0000000000004282         mov        r14, qword [rsp+0xe8+var_A8]
0000000000004287         mov        r13, qword [rsp+0xe8+var_78]
000000000000428c         mov        rbp, qword [rsp+0xe8+var_B8]
0000000000004291         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_4299:
0000000000004299         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_3e50+1227, sub_3e50+1948, sub_3e50+2585, sub_3e50+2734
000000000000429e         je         loc_42b0

00000000000042a0         test       al, al
00000000000042a2         mov        eax, 0x4
00000000000042a7         cmove      eax, dword [rsp+0xe8+var_E0]
00000000000042ac         mov        dword [rsp+0xe8+var_E0], eax

                     loc_42b0:
00000000000042b0         sub        rsp, 0x8                                    ; CODE XREF=sub_3e50+1102
00000000000042b4         mov        rcx, rbp
00000000000042b7         mov        rsi, r13
00000000000042ba         push       qword [rsp+0xf0+var_88]
00000000000042be         push       qword [rsp+0xf8+var_80]
00000000000042c2         mov        rdi, r14
00000000000042c5         push       0x0
00000000000042c7         mov        r9d, dword [rsp+0x108+var_70]
00000000000042cf         mov        r8d, dword [rsp+0x108+var_E0]
00000000000042d4         mov        rdx, qword [rsp+0x108+var_D8]
00000000000042d9         and        r9d, 0xfffffffd
00000000000042dd         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000042e2         add        rsp, 0x20
00000000000042e6         mov        r15, rax

                     loc_42e9:
00000000000042e9         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_3e50+2549, sub_3e50+2560, sub_3e50+2711
00000000000042f1         xor        rbx, qword [fs:0x28]
00000000000042fa         mov        rax, r15
00000000000042fd         jne        loc_4903

0000000000004303         add        rsp, 0xb8
000000000000430a         pop        rbx
000000000000430b         pop        rbp
000000000000430c         pop        r12
000000000000430e         pop        r13
0000000000004310         pop        r14
0000000000004312         pop        r15
0000000000004314         ret
                        ; endp
0000000000004315         align      8

                     loc_4318:
0000000000004318         mov        rbp, r11                                    ; CODE XREF=sub_3a00+194
000000000000431b         jmp        loc_4299

                     loc_4320:
0000000000004320         cmp        r13, r15                                    ; CODE XREF=sub_3e50+206, sub_3e50+220
0000000000004323         jbe        loc_432a

0000000000004325         mov        byte [r14+r15], 0x27

                     loc_432a:
000000000000432a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3e50+1235
000000000000432e         cmp        r13, rax
0000000000004331         jbe        loc_4339

0000000000004333         mov        byte [r14+r15+1], 0x5c

                     loc_4339:
0000000000004339         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3e50+1249
000000000000433d         cmp        r13, rax
0000000000004340         jbe        loc_4932

0000000000004346         mov        rdx, r13
0000000000004349         mov        byte [r14+r15+2], 0x27
000000000000434f         mov        r13, qword [rsp+arg_48]
0000000000004354         jmp        loc_3f32

                     loc_4359:
0000000000004359         mov        eax, r12d                                   ; CODE XREF=sub_3cf0+99
000000000000435c         mov        ebx, 0x30
0000000000004361         xor        r12d, r12d
0000000000004364         jmp        sub_3900+105
                        ; endp

                     loc_4369:
0000000000004369         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_3cf0+67
000000000000436f         jmp        loc_3d39

                     loc_4374:
0000000000004374         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
0000000000004376         jne        loc_37a3

000000000000437c         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_4381:
0000000000004381         test       r13, r13                                    ; CODE XREF=sub_3e50+2749
0000000000004384         jne        loc_491a

000000000000438a         lea        rax, qword [aLibs+29]                       ; 0x97bd
0000000000004391         mov        qword [rsp+0xe8+var_98], 0x0
000000000000439a         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000439f         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000043a4         xor        r12d, r12d
00000000000043a7         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000043ac         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000043b5         mov        qword [rsp+0xe8+var_A0], rax
00000000000043ba         mov        r15d, 0x1
00000000000043c0         mov        dword [rsp+0xe8+var_E0], 0x2
00000000000043c8         jmp        loc_37e3
00000000000043cd         align      16

                     loc_43d0:
00000000000043d0         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
00000000000043d2         jne        loc_47cd

00000000000043d8         test       r13, r13
00000000000043db         je         loc_4606

00000000000043e1         mov        byte [r14], 0x22
00000000000043e5         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000043ea         xor        r12d, r12d
00000000000043ed         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000043f2         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_43fb:
00000000000043fb         lea        rax, qword [aLibs+27]                       ; 0x97bb, CODE XREF=sub_3e50+1996
0000000000004402         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004407         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000440c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004415         mov        r15d, 0x1
000000000000441b         mov        qword [rsp+0xe8+var_A0], rax
0000000000004420         jmp        loc_37e3

                     loc_4425:
0000000000004425         lea        rax, qword [aLibs+27]                       ; case 6, 0x97bb, CODE XREF=quotearg_buffer_restyled+145
000000000000442c         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004431         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004436         xor        r12d, r12d
0000000000004439         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004442         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000004447         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000444c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004455         xor        r15d, r15d
0000000000004458         mov        qword [rsp+0xe8+var_A0], rax
000000000000445d         mov        dword [rsp+0xe8+var_E0], 0x5
0000000000004465         jmp        loc_37e3

                     loc_446a:
000000000000446a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
000000000000446f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004474         xor        r12d, r12d
0000000000004477         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004480         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004485         xor        r15d, r15d
0000000000004488         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000448d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000004496         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000449f         jmp        loc_37e3

                     loc_44a4:
00000000000044a4         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
00000000000044a9         je         loc_4501

00000000000044ab         lea        rsi, qword [aLibs+31]                       ; argument "msgid" for method j_dcgettext, 0x97bf
00000000000044b2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000044b4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000044b9         call       j_dcgettext                                 ; dcgettext
00000000000044be         mov        rcx, rax
00000000000044c1         mov        qword [rsp+0xe8+var_80], rax
00000000000044c6         lea        rax, qword [aLibs+31]                       ; 0x97bf
00000000000044cd         cmp        rcx, rax
00000000000044d0         je         loc_486e

                     loc_44d6:
00000000000044d6         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0x97bd, CODE XREF=sub_3e50+2607
00000000000044dd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000044df         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000044e4         call       j_dcgettext                                 ; dcgettext
00000000000044e9         mov        rcx, rax
00000000000044ec         mov        qword [rsp+0xe8+var_88], rax
00000000000044f1         lea        rax, qword [aLibs+29]                       ; 0x97bd
00000000000044f8         cmp        rcx, rax
00000000000044fb         je         loc_4884

                     loc_4501:
0000000000004501         xor        r15d, r15d                                  ; CODE XREF=sub_3e50+1625, sub_3e50+2629
0000000000004504         test       ebx, ebx
0000000000004506         je         loc_46cd

                     loc_450c:
000000000000450c         test       ebx, ebx                                    ; CODE XREF=sub_3e50+2183, sub_3e50+2214
000000000000450e         mov        rbx, qword [rsp+0xe8+var_88]
0000000000004513         setne      byte [rsp+0xe8+var_D9]
0000000000004518         xor        r12d, r12d
000000000000451b         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
000000000000451e         call       j_strlen                                    ; strlen
0000000000004523         mov        qword [rsp+0xe8+var_A0], rbx
0000000000004528         mov        qword [rsp+0xe8+var_D0], rax
000000000000452d         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004532         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004537         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004540         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000004545         jmp        loc_37e3

                     loc_454a:
000000000000454a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
000000000000454f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004554         xor        r12d, r12d
0000000000004557         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004560         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004565         xor        r15d, r15d
0000000000004568         mov        byte [rsp+0xe8+var_DB], 0x0
000000000000456d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000004576         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000457f         jmp        loc_37e3

                     loc_4584:
0000000000004584         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
0000000000004589         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000458e         xor        r12d, r12d
0000000000004591         mov        qword [rsp+0xe8+var_98], 0x0
000000000000459a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000459f         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000045a4         jmp        loc_37c3

                     loc_45a9:
00000000000045a9         cmp        r13, r15                                    ; CODE XREF=sub_3cf0+133
00000000000045ac         jbe        loc_45b3

00000000000045ae         mov        byte [r14+r15], 0x30

                     loc_45b3:
00000000000045b3         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_3e50+1884
00000000000045b7         cmp        r13, rax
00000000000045ba         jbe        loc_45c2

00000000000045bc         mov        byte [r14+rcx+2], 0x30

                     loc_45c2:
00000000000045c2         mov        eax, r12d                                   ; CODE XREF=sub_3e50+1898
00000000000045c5         lea        r15, qword [rcx+3]
00000000000045c9         xor        r12d, r12d
00000000000045cc         mov        ebx, 0x30
00000000000045d1         jmp        sub_3900+56
                        ; endp
00000000000045d6         align      32

                     loc_45e0:
00000000000045e0         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_3e50+731
00000000000045e5         mov        rbp, r11
00000000000045e8         mov        byte [rsp+0xe8+var_DB], bl
00000000000045ec         jmp        loc_4299

                     loc_45f1:
00000000000045f1         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_3bf0+105
00000000000045f6         xor        r12d, r12d
00000000000045f9         jmp        loc_4100

                     loc_45fe:
00000000000045fe         xor        r10d, r10d                                  ; CODE XREF=sub_3e50+944
0000000000004601         jmp        loc_41bd

                     loc_4606:
0000000000004606         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_3e50+1419
000000000000460f         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004614         xor        r12d, r12d
0000000000004617         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000461c         jmp        loc_43fb

                     loc_4621:
0000000000004621         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_3e50+561
0000000000004626         mov        rsi, r14
0000000000004629         mov        rcx, r13
000000000000462c         mov        rax, rbx
000000000000462f         mov        rdi, rbx
0000000000004632         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000004638         movzx      ebx, byte [rsp+0xe8+var_6A]
000000000000463d         mov        r9, qword [rsp+0xe8+var_60]
0000000000004645         cmp        rsi, r11
0000000000004648         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000464e         mov        r15, qword [rsp+0xe8+var_68]
0000000000004656         mov        r14, qword [rsp+0xe8+var_A8]
000000000000465b         mov        r13, qword [rsp+0xe8+var_78]
0000000000004660         jae        loc_4688

0000000000004662         cmp        byte [rcx], 0x0
0000000000004665         jne        loc_4677

0000000000004667         jmp        loc_4688
0000000000004669         align      16

                     loc_4670:
0000000000004670         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_3e50+2099
0000000000004675         je         loc_4685

                     loc_4677:
0000000000004677         add        rax, 0x1                                    ; CODE XREF=sub_3e50+2069
000000000000467b         lea        rdx, qword [rbp+rax]
0000000000004680         cmp        r11, rdx
0000000000004683         ja         loc_4670

                     loc_4685:
0000000000004685         mov        rdi, rax                                    ; CODE XREF=sub_3e50+2085

                     loc_4688:
0000000000004688         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_3e50+2064, sub_3e50+2071
000000000000468d         xor        r12d, r12d
0000000000004690         jmp        loc_40f6

                     loc_4695:
0000000000004695         mov        rdi, rbx                                    ; CODE XREF=sub_3e50+551
0000000000004698         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000469e         movzx      ebx, byte [rsp+0xe8+var_6A]
00000000000046a3         movzx      r10d, byte [rsp+0xe8+var_69]
00000000000046a9         mov        r15, qword [rsp+0xe8+var_68]
00000000000046b1         xor        r12d, r12d
00000000000046b4         mov        r14, qword [rsp+0xe8+var_A8]
00000000000046b9         mov        r13, qword [rsp+0xe8+var_78]
00000000000046be         mov        r11, qword [rsp+0xe8+var_B8]
00000000000046c3         movzx      edx, byte [rsp+0xe8+var_DB]
00000000000046c8         jmp        loc_40f6

                     loc_46cd:
00000000000046cd         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_3e50+1718
00000000000046d2         movzx      eax, byte [rdx]
00000000000046d5         test       al, al
00000000000046d7         je         loc_450c

00000000000046dd         nop        dword [rax]

                     loc_46e0:
00000000000046e0         cmp        r13, r15                                    ; CODE XREF=sub_3e50+2212
00000000000046e3         jbe        loc_46e9

00000000000046e5         mov        byte [r14+r15], al

                     loc_46e9:
00000000000046e9         add        r15, 0x1                                    ; CODE XREF=sub_3e50+2195
00000000000046ed         movzx      eax, byte [rdx+r15]
00000000000046f2         test       al, al
00000000000046f4         jne        loc_46e0

00000000000046f6         jmp        loc_450c

                     loc_46fb:
00000000000046fb         mov        eax, edx                                    ; CODE XREF=sub_3e50+682
00000000000046fd         jmp        loc_3c57

                     loc_4702:
0000000000004702         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_3e50+290
0000000000004706         cmp        bl, 0x3e
0000000000004709         ja         loc_3f80

000000000000470f         movabs     rax, 0x7000a38200000000
0000000000004719         bt         rax, rbx
000000000000471d         jae        loc_3f80

0000000000004723         cmp        byte [rsp+arg_7], 0x0
0000000000004728         jne        loc_4912

000000000000472e         cmp        r13, r15
0000000000004731         jbe        loc_4738

0000000000004733         mov        byte [r14+r15], 0x3f

                     loc_4738:
0000000000004738         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3e50+2273
000000000000473c         cmp        r13, rax
000000000000473f         jbe        loc_4747

0000000000004741         mov        byte [r14+r15+1], 0x22

                     loc_4747:
0000000000004747         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3e50+2287
000000000000474b         cmp        r13, rax
000000000000474e         jbe        loc_4756

0000000000004750         mov        byte [r14+r15+2], 0x22

                     loc_4756:
0000000000004756         lea        rax, qword [r15+3]                          ; CODE XREF=sub_3e50+2302
000000000000475a         cmp        r13, rax
000000000000475d         jbe        loc_4765

000000000000475f         mov        byte [r14+r15+3], 0x3f

                     loc_4765:
0000000000004765         add        r15, 0x4                                    ; CODE XREF=sub_3e50+2317
0000000000004769         xor        edx, edx
000000000000476b         xor        r12d, r12d
000000000000476e         xor        eax, eax
0000000000004770         mov        rbp, rcx
0000000000004773         jmp        sub_3900+56
                        ; endp

                     loc_4778:
0000000000004778         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
000000000000477a         je         loc_4908

0000000000004780         lea        rax, qword [aLibs+29]                       ; 0x97bd
0000000000004787         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000478c         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004791         xor        r12d, r12d
0000000000004794         mov        qword [rsp+0xe8+var_98], 0x0
000000000000479d         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000047a2         mov        byte [rsp+0xe8+var_DB], 0x0
00000000000047a7         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000047b0         xor        r15d, r15d
00000000000047b3         mov        qword [rsp+0xe8+var_A0], rax
00000000000047b8         jmp        loc_37e3
00000000000047bd         align      64

                     loc_47c0:
00000000000047c0         mov        rbp, r11                                    ; CODE XREF=sub_3e50+333
00000000000047c3         movzx      eax, byte [rsp+arg_7]
00000000000047c8         jmp        sub_3e50+1097
                        ; endp

                     loc_47cd:
00000000000047cd         lea        rax, qword [aLibs+27]                       ; 0x97bb, CODE XREF=sub_3e50+1410
00000000000047d4         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000047d9         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000047de         xor        r12d, r12d
00000000000047e1         mov        qword [rsp+0xe8+var_98], 0x0
00000000000047ea         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000047ef         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000047f4         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000047fd         xor        r15d, r15d
0000000000004800         mov        qword [rsp+0xe8+var_A0], rax
0000000000004805         jmp        loc_37e3

                     loc_480a:
000000000000480a         mov        eax, edx                                    ; CODE XREF=sub_3e50+87

                     loc_480c:
000000000000480c         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_3e50+76, sub_3e50+2721
0000000000004811         test       rbx, rbx
0000000000004814         je         loc_4842

0000000000004816         test       al, al
0000000000004818         je         loc_4842

000000000000481a         movzx      ecx, byte [rbx]
000000000000481d         mov        rax, rbx
0000000000004820         test       cl, cl
0000000000004822         je         loc_4842

0000000000004824         mov        rdx, r15
0000000000004827         sub        rax, r15

                     loc_482a:
000000000000482a         cmp        r13, rdx                                    ; CODE XREF=sub_3e50+2541
000000000000482d         jbe        loc_4833

000000000000482f         mov        byte [r14+rdx], cl

                     loc_4833:
0000000000004833         add        rdx, 0x1                                    ; CODE XREF=sub_3e50+2525
0000000000004837         movzx      ecx, byte [rax+rdx]
000000000000483b         test       cl, cl
000000000000483d         jne        loc_482a

000000000000483f         mov        r15, rdx

                     loc_4842:
0000000000004842         cmp        r13, r15                                    ; CODE XREF=sub_3e50+2500, sub_3e50+2504, sub_3e50+2514
0000000000004845         jbe        loc_42e9

000000000000484b         mov        byte [r14+r15], 0x0
0000000000004850         jmp        loc_42e9

                     loc_4855:
0000000000004855         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
000000000000485a         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000485f         mov        rbp, r11
0000000000004862         sete       al
0000000000004865         mov        byte [rsp+0xe8+var_DB], bl
0000000000004869         jmp        loc_4299

                     loc_486e:
000000000000486e         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_3e50+1664
0000000000004872         mov        rdi, rcx
0000000000004875         call       gettext_quote.part.1                        ; gettext_quote.part.1
000000000000487a         mov        qword [rsp+0xe8+var_80], rax
000000000000487f         jmp        loc_44d6

                     loc_4884:
0000000000004884         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_3e50+1707
0000000000004888         mov        rdi, rcx
000000000000488b         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000004890         mov        qword [rsp+0xe8+var_88], rax
0000000000004895         jmp        loc_4501

                     loc_489a:
000000000000489a         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_3cf0+16
000000000000489f         mov        rbp, r11
00000000000048a2         mov        eax, edx
00000000000048a4         mov        byte [rsp+arg_5], bl
00000000000048a8         jmp        sub_3e50+1097
                        ; endp

                     loc_48ad:
00000000000048ad         sub        rsp, 0x8                                    ; CODE XREF=sub_3e50+98
00000000000048b1         mov        r8d, 0x5
00000000000048b7         mov        rcx, r11
00000000000048ba         push       qword [rsp+0xf0+var_88]
00000000000048be         push       qword [rsp+0xf8+var_80]
00000000000048c2         mov        rdi, r14
00000000000048c5         push       qword [rsp+0x100+var_C8]
00000000000048c9         mov        r9d, dword [rsp+0x108+var_70]
00000000000048d1         mov        rdx, qword [rsp+0x108+var_D8]
00000000000048d6         mov        rsi, qword [rsp+0x108+var_98]
00000000000048db         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000048e0         add        rsp, 0x20
00000000000048e4         mov        r15, rax
00000000000048e7         jmp        loc_42e9

                     loc_48ec:
00000000000048ec         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_3e50+121
00000000000048f1         jmp        loc_480c

                     loc_48f6:
00000000000048f6         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3e50+63
00000000000048fe         jmp        loc_4299

                     loc_4903:
0000000000004903         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_3e50+1197
                        ; endp

                     loc_4908:
0000000000004908         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_3e50+2346
000000000000490d         jmp        loc_4381

                     loc_4912:
0000000000004912         mov        rbp, r11                                    ; CODE XREF=sub_3e50+2264
0000000000004915         jmp        sub_3e50+1120
                        ; endp

                     loc_491a:
000000000000491a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_3e50+1332
000000000000491f         xor        eax, eax
0000000000004921         xor        r12d, r12d
0000000000004924         mov        qword [rsp+0xe8+var_98], 0x0
000000000000492d         jmp        loc_3ed4

                     loc_4932:
0000000000004932         mov        rdx, r13                                    ; CODE XREF=sub_3e50+1264
0000000000004935         mov        r13, qword [rsp+arg_48]
000000000000493a         jmp        loc_3f32

                     loc_493f:
000000000000493f         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
0000000000004944         align      16                                          ; End of unwind block (FDE at 0xaa48)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000004950         push       r15                                         ; Begin of unwind block (FDE at 0xaac0), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000004952         push       r14
0000000000004954         movsxd     r15, edi
0000000000004957         push       r13
0000000000004959         push       r12
000000000000495b         mov        r14, rdx
000000000000495e         push       rbp
000000000000495f         push       rbx
0000000000004960         mov        rbp, rcx
0000000000004963         sub        rsp, 0x28
0000000000004967         mov        qword [rsp+0x58+var_50], rsi
000000000000496c         call       j___errno_location                          ; __errno_location
0000000000004971         mov        r13, rax
0000000000004974         mov        eax, dword [rax]
0000000000004976         test       r15d, r15d
0000000000004979         mov        rbx, qword [slotvec]                        ; slotvec
0000000000004980         mov        dword [rsp+0x58+var_40], eax
0000000000004984         js         loc_4af1

000000000000498a         cmp        dword [nslots], r15d                        ; nslots
0000000000004991         jg         loc_49f5

0000000000004993         cmp        r15d, 0x7fffffff
000000000000499a         je         loc_4af6

00000000000049a0         lea        r12d, dword [r15+1]
00000000000049a4         lea        rax, qword [slotvec0]                       ; slotvec0
00000000000049ab         movsxd     rsi, r12d
00000000000049ae         shl        rsi, 0x4
00000000000049b2         cmp        rbx, rax
00000000000049b5         je         loc_4ad0

00000000000049bb         mov        rdi, rbx                                    ; argument #1 for method xrealloc
00000000000049be         call       xrealloc                                    ; xrealloc
00000000000049c3         mov        rbx, rax
00000000000049c6         mov        qword [slotvec], rax                        ; slotvec

                     loc_49cd:
00000000000049cd         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
00000000000049d4         mov        edx, r12d
00000000000049d7         xor        esi, esi                                    ; argument "__c" for method j_memset
00000000000049d9         sub        edx, edi
00000000000049db         shl        rdi, 0x4
00000000000049df         movsxd     rdx, edx
00000000000049e2         add        rdi, rbx                                    ; argument "__s" for method j_memset
00000000000049e5         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
00000000000049e9         call       j_memset                                    ; memset
00000000000049ee         mov        dword [nslots], r12d                        ; nslots

                     loc_49f5:
00000000000049f5         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
00000000000049f8         shl        r15, 0x4
00000000000049fc         sub        rsp, 0x8
0000000000004a00         add        rbx, r15
0000000000004a03         lea        r15, qword [rbp+8]
0000000000004a07         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000004a0b         mov        r11, qword [rbx]
0000000000004a0e         mov        r12, qword [rbx+8]
0000000000004a12         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000004a15         or         eax, 0x1
0000000000004a18         mov        dword [rsp+0x60+var_3C], eax
0000000000004a1c         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
0000000000004a1f         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
0000000000004a22         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000004a25         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000004a27         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
0000000000004a2a         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000004a2f         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
0000000000004a32         mov        qword [rsp+0x78+var_48], r11
0000000000004a37         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004a3c         add        rsp, 0x20
0000000000004a40         mov        r11, qword [rsp+0x58+var_48]
0000000000004a45         cmp        r11, rax
0000000000004a48         ja         loc_4ab1

0000000000004a4a         lea        rsi, qword [rax+1]
0000000000004a4e         lea        rax, qword [slot0]                          ; slot0
0000000000004a55         cmp        r12, rax
0000000000004a58         mov        qword [rbx], rsi
0000000000004a5b         je         loc_4a6f

0000000000004a5d         mov        rdi, r12
0000000000004a60         mov        qword [rsp+0x58+var_48], rsi
0000000000004a65         call       sub_1dd0                                    ; sub_1dd0
0000000000004a6a         mov        rsi, qword [rsp+0x58+var_48]

                     loc_4a6f:
0000000000004a6f         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
0000000000004a72         mov        qword [rsp+0x58+var_48], rsi
0000000000004a77         call       xmalloc                                     ; xmalloc
0000000000004a7c         sub        rsp, 0x8
0000000000004a80         mov        qword [rbx+8], rax
0000000000004a84         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000004a88         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
0000000000004a8b         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000004a8e         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000004a91         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000004a93         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
0000000000004a98         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
0000000000004a9b         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000004aa0         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
0000000000004aa5         mov        r12, rax
0000000000004aa8         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004aad         add        rsp, 0x20

                     loc_4ab1:
0000000000004ab1         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
0000000000004ab5         mov        dword [r13], eax
0000000000004ab9         add        rsp, 0x28
0000000000004abd         mov        rax, r12
0000000000004ac0         pop        rbx
0000000000004ac1         pop        rbp
0000000000004ac2         pop        r12
0000000000004ac4         pop        r13
0000000000004ac6         pop        r14
0000000000004ac8         pop        r15
0000000000004aca         ret
                        ; endp
0000000000004acb         align      16

                     loc_4ad0:
0000000000004ad0         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
0000000000004ad2         call       xrealloc                                    ; xrealloc
0000000000004ad7         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
0000000000004adf         mov        rbx, rax
0000000000004ae2         mov        qword [slotvec], rax                        ; slotvec
0000000000004ae9         movups     xmmword [rax], xmm0
0000000000004aec         jmp        loc_49cd

                     loc_4af1:
0000000000004af1         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_4af6:
0000000000004af6         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4afb:
0000000000004afb         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0xaac0)
                     clone_quoting_options:
0000000000004b00         push       r12                                         ; Begin of unwind block (FDE at 0xab2c)
0000000000004b02         push       rbp
0000000000004b03         push       rbx
0000000000004b04         mov        rbx, rdi
0000000000004b07         call       j___errno_location                          ; __errno_location
0000000000004b0c         mov        r12d, dword [rax]
0000000000004b0f         mov        rbp, rax
0000000000004b12         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000004b19         test       rbx, rbx
0000000000004b1c         mov        esi, 0x38                                   ; argument #2 for method xmemdup
0000000000004b21         cmove      rbx, rax
0000000000004b25         mov        rdi, rbx                                    ; argument #1 for method xmemdup
0000000000004b28         call       xmemdup                                     ; xmemdup
0000000000004b2d         mov        dword [rbp], r12d
0000000000004b31         pop        rbx
0000000000004b32         pop        rbp
0000000000004b33         pop        r12
0000000000004b35         ret
                        ; endp
0000000000004b36         align      64                                          ; End of unwind block (FDE at 0xab2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
0000000000004b40         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xab58), default_quoting_options
0000000000004b47         test       rdi, rdi
0000000000004b4a         cmove      rdi, rax
0000000000004b4e         mov        eax, dword [rdi]
0000000000004b50         ret
                        ; endp
0000000000004b51         align      32                                          ; End of unwind block (FDE at 0xab58)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
0000000000004b60         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xab6c), default_quoting_options
0000000000004b67         test       rdi, rdi
0000000000004b6a         cmove      rdi, rax
0000000000004b6e         mov        dword [rdi], esi
0000000000004b70         ret
                        ; endp
0000000000004b71         align      128                                         ; End of unwind block (FDE at 0xab6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
0000000000004b80         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xab80), default_quoting_options
0000000000004b87         test       rdi, rdi
0000000000004b8a         mov        ecx, esi
0000000000004b8c         cmove      rdi, rax
0000000000004b90         mov        eax, esi
0000000000004b92         and        ecx, 0x1f
0000000000004b95         shr        al, 0x5
0000000000004b98         movzx      eax, al
0000000000004b9b         lea        rdi, qword [rdi+rax*4+8]
0000000000004ba0         mov        esi, dword [rdi]
0000000000004ba2         mov        eax, esi
0000000000004ba4         shr        eax, cl
0000000000004ba6         xor        edx, eax
0000000000004ba8         and        eax, 0x1
0000000000004bab         and        edx, 0x1
0000000000004bae         shl        edx, cl
0000000000004bb0         xor        edx, esi
0000000000004bb2         mov        dword [rdi], edx
0000000000004bb4         ret
                        ; endp
0000000000004bb5         align      64                                          ; End of unwind block (FDE at 0xab80)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
0000000000004bc0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xab94), default_quoting_options
0000000000004bc7         test       rdi, rdi
0000000000004bca         cmove      rdi, rax
0000000000004bce         mov        eax, dword [rdi+4]
0000000000004bd1         mov        dword [rdi+4], esi
0000000000004bd4         ret
                        ; endp
0000000000004bd5         align      32                                          ; End of unwind block (FDE at 0xab94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
0000000000004be0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xaba8), default_quoting_options
0000000000004be7         test       rdi, rdi
0000000000004bea         cmove      rdi, rax
0000000000004bee         test       rsi, rsi
0000000000004bf1         mov        dword [rdi], 0xa
0000000000004bf7         je         loc_4c07

0000000000004bf9         test       rdx, rdx
0000000000004bfc         je         loc_4c07

0000000000004bfe         mov        qword [rdi+0x28], rsi
0000000000004c02         mov        qword [rdi+0x30], rdx
0000000000004c06         ret
                        ; endp

                     loc_4c07:
0000000000004c07         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
0000000000004c0b         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
0000000000004c10         push       r15                                         ; End of unwind block (FDE at 0xaba8), Begin of unwind block (FDE at 0xabbc)
0000000000004c12         push       r14
0000000000004c14         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000004c1b         push       r13
0000000000004c1d         push       r12
0000000000004c1f         mov        r13, rdi
0000000000004c22         push       rbp
0000000000004c23         push       rbx
0000000000004c24         mov        rbx, r8
0000000000004c27         mov        r14, rsi
0000000000004c2a         mov        r15, rdx
0000000000004c2d         sub        rsp, 0x18
0000000000004c31         test       r8, r8
0000000000004c34         cmove      rbx, rax
0000000000004c38         mov        qword [rsp+0x48+var_40], rcx
0000000000004c3d         call       j___errno_location                          ; __errno_location
0000000000004c42         mov        r12d, dword [rax]
0000000000004c45         mov        rbp, rax
0000000000004c48         lea        rax, qword [rbx+8]
0000000000004c4c         sub        rsp, 0x8
0000000000004c50         mov        r9d, dword [rbx+4]
0000000000004c54         push       qword [rbx+0x30]
0000000000004c57         mov        r8d, dword [rbx]
0000000000004c5a         push       qword [rbx+0x28]
0000000000004c5d         mov        rdx, r15
0000000000004c60         push       rax
0000000000004c61         mov        rcx, qword [rsp+0x68+var_40]
0000000000004c66         mov        rsi, r14
0000000000004c69         mov        rdi, r13
0000000000004c6c         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004c71         mov        dword [rbp], r12d
0000000000004c75         add        rsp, 0x38
0000000000004c79         pop        rbx
0000000000004c7a         pop        rbp
0000000000004c7b         pop        r12
0000000000004c7d         pop        r13
0000000000004c7f         pop        r14
0000000000004c81         pop        r15
0000000000004c83         ret
                        ; endp
0000000000004c84         align      16                                          ; End of unwind block (FDE at 0xabbc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
0000000000004c90         push       r15                                         ; Begin of unwind block (FDE at 0xac10), CODE XREF=quotearg_alloc+5
0000000000004c92         push       r14
0000000000004c94         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000004c9b         push       r13
0000000000004c9d         push       r12
0000000000004c9f         mov        r12, rdx
0000000000004ca2         push       rbp
0000000000004ca3         push       rbx
0000000000004ca4         mov        rbx, rcx
0000000000004ca7         mov        r14, rdi
0000000000004caa         mov        r15, rsi
0000000000004cad         sub        rsp, 0x38
0000000000004cb1         test       rcx, rcx
0000000000004cb4         cmove      rbx, rax
0000000000004cb8         xor        ebp, ebp
0000000000004cba         call       j___errno_location                          ; __errno_location
0000000000004cbf         test       r12, r12
0000000000004cc2         mov        r13, rax
0000000000004cc5         mov        eax, dword [rax]
0000000000004cc7         sete       bpl
0000000000004ccb         or         ebp, dword [rbx+4]
0000000000004cce         lea        r10, qword [rbx+8]
0000000000004cd2         sub        rsp, 0x8
0000000000004cd6         mov        r8d, dword [rbx]
0000000000004cd9         mov        rcx, r15
0000000000004cdc         mov        dword [rsp+0x70+var_5C], eax
0000000000004ce0         push       qword [rbx+0x30]
0000000000004ce3         mov        rdx, r14
0000000000004ce6         push       qword [rbx+0x28]
0000000000004ce9         push       r10
0000000000004ceb         xor        esi, esi
0000000000004ced         mov        r9d, ebp
0000000000004cf0         xor        edi, edi
0000000000004cf2         mov        qword [rsp+0x88+var_48], r10
0000000000004cf7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004cfc         lea        rsi, qword [rax+1]
0000000000004d00         mov        qword [rsp+0x88+var_40], rax
0000000000004d05         add        rsp, 0x20
0000000000004d09         mov        rdi, rsi
0000000000004d0c         mov        qword [rsp+0x68+var_50], rsi
0000000000004d11         call       xmalloc                                     ; xmalloc
0000000000004d16         mov        qword [rsp+0x68+var_58], rax
0000000000004d1b         sub        rsp, 0x8
0000000000004d1f         push       qword [rbx+0x30]
0000000000004d22         push       qword [rbx+0x28]
0000000000004d25         mov        r10, qword [rsp+0x80+var_48]
0000000000004d2a         mov        r9d, ebp
0000000000004d2d         mov        r8d, dword [rbx]
0000000000004d30         mov        rcx, r15
0000000000004d33         mov        rdx, r14
0000000000004d36         mov        rdi, rax
0000000000004d39         push       r10
0000000000004d3b         mov        rsi, qword [rsp+0x88+var_50]
0000000000004d40         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004d45         mov        eax, dword [rsp+0x88+var_5C]
0000000000004d49         add        rsp, 0x20
0000000000004d4d         test       r12, r12
0000000000004d50         mov        dword [r13], eax
0000000000004d54         je         loc_4d5f

0000000000004d56         mov        r11, qword [rsp+0x68+var_40]
0000000000004d5b         mov        qword [r12], r11

                     loc_4d5f:
0000000000004d5f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000004d64         add        rsp, 0x38
0000000000004d68         pop        rbx
0000000000004d69         pop        rbp
0000000000004d6a         pop        r12
0000000000004d6c         pop        r13
0000000000004d6e         pop        r14
0000000000004d70         pop        r15
0000000000004d72         ret
                        ; endp
0000000000004d73         align      128                                         ; End of unwind block (FDE at 0xac10)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
0000000000004d80         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xac7c)
0000000000004d83         xor        edx, edx
0000000000004d85         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
0000000000004d8a         align      16                                          ; End of unwind block (FDE at 0xac7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
0000000000004d90         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0xac90), nslots
0000000000004d96         push       r12
0000000000004d98         mov        r12, qword [slotvec]                        ; slotvec
0000000000004d9f         push       rbp
0000000000004da0         push       rbx
0000000000004da1         cmp        eax, 0x1
0000000000004da4         jle        loc_4dd1

0000000000004da6         sub        eax, 0x2
0000000000004da9         lea        rbx, qword [r12+0x18]
0000000000004dae         shl        rax, 0x4
0000000000004db2         lea        rbp, qword [r12+rax+0x28]
0000000000004db7         nop        word [rax+rax]

                     loc_4dc0:
0000000000004dc0         mov        rdi, qword [rbx]                            ; CODE XREF=quotearg_free+63
0000000000004dc3         add        rbx, 0x10
0000000000004dc7         call       sub_1dd0                                    ; sub_1dd0
0000000000004dcc         cmp        rbx, rbp
0000000000004dcf         jne        loc_4dc0

                     loc_4dd1:
0000000000004dd1         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
0000000000004dd6         lea        rbx, qword [slot0]                          ; slot0
0000000000004ddd         cmp        rdi, rbx
0000000000004de0         je         loc_4df9

0000000000004de2         call       sub_1dd0                                    ; sub_1dd0
0000000000004de7         mov        qword [slotvec0], 0x100                     ; slotvec0
0000000000004df2         mov        qword [slotvec0+8], rbx                     ; 0x20d078

                     loc_4df9:
0000000000004df9         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
0000000000004e00         cmp        r12, rbx
0000000000004e03         je         loc_4e14

0000000000004e05         mov        rdi, r12
0000000000004e08         call       sub_1dd0                                    ; sub_1dd0
0000000000004e0d         mov        qword [slotvec], rbx                        ; slotvec

                     loc_4e14:
0000000000004e14         pop        rbx                                         ; CODE XREF=quotearg_free+115
0000000000004e15         mov        dword [nslots], 0x1                         ; nslots
0000000000004e1f         pop        rbp
0000000000004e20         pop        r12
0000000000004e22         ret
                        ; endp
0000000000004e23         align      16                                          ; End of unwind block (FDE at 0xac90)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
0000000000004e30         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xacbc), default_quoting_options
0000000000004e37         mov        rdx, 0xffffffffffffffff
0000000000004e3e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004e43         align      16                                          ; End of unwind block (FDE at 0xacbc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000004e50         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xacd0), default_quoting_options
0000000000004e57         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004e5c         align      32                                          ; End of unwind block (FDE at 0xacd0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
0000000000004e60         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xace4), default_quoting_options
0000000000004e67         mov        rsi, rdi
0000000000004e6a         mov        rdx, 0xffffffffffffffff
0000000000004e71         xor        edi, edi
0000000000004e73         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004e78         align      128                                         ; End of unwind block (FDE at 0xace4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
0000000000004e80         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xacf8), default_quoting_options
0000000000004e87         mov        rdx, rsi
0000000000004e8a         mov        rsi, rdi
0000000000004e8d         xor        edi, edi
0000000000004e8f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004e94         align      32                                          ; End of unwind block (FDE at 0xacf8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
0000000000004ea0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xad0c)
0000000000004ea4         mov        rax, rdx
0000000000004ea7         mov        rdx, qword [fs:0x28]
0000000000004eb0         mov        qword [rsp+0x48+var_10], rdx
0000000000004eb5         xor        edx, edx
0000000000004eb7         cmp        esi, 0xa
0000000000004eba         je         loc_4f24

0000000000004ebc         mov        dword [rsp+0x48+var_48], esi
0000000000004ebf         mov        rcx, rsp
0000000000004ec2         mov        rdx, 0xffffffffffffffff
0000000000004ec9         mov        rsi, rax
0000000000004ecc         mov        qword [rsp+0x48+var_44], 0x0
0000000000004ed5         mov        qword [rsp+0x48+var_3C], 0x0
0000000000004ede         mov        qword [rsp+0x48+var_34], 0x0
0000000000004ee7         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004ef0         mov        qword [rsp+0x48+var_24], 0x0
0000000000004ef9         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004f02         mov        dword [rsp+0x48+var_14], 0x0
0000000000004f0a         call       quotearg_n_options                          ; quotearg_n_options
0000000000004f0f         mov        rcx, qword [rsp+0x48+var_10]
0000000000004f14         xor        rcx, qword [fs:0x28]
0000000000004f1d         jne        loc_4f29

0000000000004f1f         add        rsp, 0x48
0000000000004f23         ret
                        ; endp

                     loc_4f24:
0000000000004f24         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_4f29:
0000000000004f29         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
0000000000004f2e         align      16                                          ; End of unwind block (FDE at 0xad0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
0000000000004f30         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xad28), CODE XREF=quotearg_style_mem+10
0000000000004f34         mov        rax, rdx
0000000000004f37         mov        rdx, rcx
0000000000004f3a         mov        rcx, qword [fs:0x28]
0000000000004f43         mov        qword [rsp+0x48+var_10], rcx
0000000000004f48         xor        ecx, ecx
0000000000004f4a         cmp        esi, 0xa
0000000000004f4d         je         loc_4fb0

0000000000004f4f         mov        dword [rsp+0x48+var_48], esi
0000000000004f52         mov        rcx, rsp
0000000000004f55         mov        rsi, rax
0000000000004f58         mov        qword [rsp+0x48+var_44], 0x0
0000000000004f61         mov        qword [rsp+0x48+var_3C], 0x0
0000000000004f6a         mov        qword [rsp+0x48+var_34], 0x0
0000000000004f73         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004f7c         mov        qword [rsp+0x48+var_24], 0x0
0000000000004f85         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004f8e         mov        dword [rsp+0x48+var_14], 0x0
0000000000004f96         call       quotearg_n_options                          ; quotearg_n_options
0000000000004f9b         mov        rdx, qword [rsp+0x48+var_10]
0000000000004fa0         xor        rdx, qword [fs:0x28]
0000000000004fa9         jne        loc_4fb5

0000000000004fab         add        rsp, 0x48
0000000000004faf         ret
                        ; endp

                     loc_4fb0:
0000000000004fb0         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_4fb5:
0000000000004fb5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
0000000000004fba         align      64                                          ; End of unwind block (FDE at 0xad28)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
0000000000004fc0         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0xad44)
0000000000004fc3         mov        esi, edi
0000000000004fc5         xor        edi, edi
0000000000004fc7         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
0000000000004fcc         align      16                                          ; End of unwind block (FDE at 0xad44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
0000000000004fd0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xad58)
0000000000004fd3         mov        rdx, rsi
0000000000004fd6         mov        esi, edi
0000000000004fd8         xor        edi, edi
0000000000004fda         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
0000000000004fdf         align      32                                          ; End of unwind block (FDE at 0xad58)

                     quotearg_char_mem:
0000000000004fe0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xad6c), CODE XREF=quotearg_char+11
0000000000004fe4         mov        ecx, edx
0000000000004fe6         mov        rax, qword [fs:0x28]
0000000000004fef         mov        qword [rsp+0x48+var_10], rax
0000000000004ff4         xor        eax, eax
0000000000004ff6         mov        rax, qword [qword_20d230]                   ; qword_20d230
0000000000004ffd         mov        r8, rsp
0000000000005000         and        ecx, 0x1f
0000000000005003         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
000000000000500b         mov        qword [rsp+0x48+var_18], rax
0000000000005010         mov        eax, edx
0000000000005012         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000005016         shr        al, 0x5
0000000000005019         movzx      eax, al
000000000000501c         lea        r9, qword [r8+rax*4+8]
0000000000005021         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20d210
0000000000005029         movaps     xmmword [rsp+0x48+var_38], xmm0
000000000000502e         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20d220
0000000000005036         movaps     xmmword [rsp+0x48+var_28], xmm0
000000000000503b         mov        edx, dword [r9]
000000000000503e         mov        eax, edx
0000000000005040         shr        eax, cl
0000000000005042         not        eax
0000000000005044         and        eax, 0x1
0000000000005047         shl        eax, cl
0000000000005049         mov        rcx, r8
000000000000504c         xor        eax, edx
000000000000504e         mov        rdx, rsi
0000000000005051         mov        rsi, rdi
0000000000005054         mov        dword [r9], eax
0000000000005057         xor        edi, edi
0000000000005059         call       quotearg_n_options                          ; quotearg_n_options
000000000000505e         mov        rsi, qword [rsp+0x48+var_10]
0000000000005063         xor        rsi, qword [fs:0x28]
000000000000506c         jne        loc_5073

000000000000506e         add        rsp, 0x48
0000000000005072         ret
                        ; endp

                     loc_5073:
0000000000005073         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
0000000000005078         align      128                                         ; End of unwind block (FDE at 0xad6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
0000000000005080         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0xad88)
0000000000005084         mov        rsi, 0xffffffffffffffff
000000000000508b         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
0000000000005090         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0xad88), Begin of unwind block (FDE at 0xad9c), CODE XREF=close_stdout+101
0000000000005095         mov        rsi, 0xffffffffffffffff
000000000000509c         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
00000000000050a1         align      16                                          ; End of unwind block (FDE at 0xad9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
00000000000050b0         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0xadb0)
00000000000050b5         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
00000000000050ba         align      64                                          ; End of unwind block (FDE at 0xadb0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
00000000000050c0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xadc4), CODE XREF=main+1425, main+2815, main+3189
00000000000050c4         mov        rax, rdx
00000000000050c7         mov        rdx, qword [fs:0x28]
00000000000050d0         mov        qword [rsp+0x48+var_10], rdx
00000000000050d5         xor        edx, edx
00000000000050d7         cmp        esi, 0xa
00000000000050da         je         loc_5144

00000000000050dc         mov        dword [rsp+0x48+var_48], esi
00000000000050df         mov        rcx, rsp
00000000000050e2         mov        rdx, 0xffffffffffffffff
00000000000050e9         mov        rsi, rax
00000000000050ec         mov        qword [rsp+0x48+var_44], 0x0
00000000000050f5         mov        qword [rsp+0x48+var_3C], 0x4000000
00000000000050fe         mov        qword [rsp+0x48+var_34], 0x0
0000000000005107         mov        qword [rsp+0x48+var_2C], 0x0
0000000000005110         mov        qword [rsp+0x48+var_24], 0x0
0000000000005119         mov        qword [rsp+0x48+var_1C], 0x0
0000000000005122         mov        dword [rsp+0x48+var_14], 0x0
000000000000512a         call       quotearg_n_options                          ; quotearg_n_options
000000000000512f         mov        rcx, qword [rsp+0x48+var_10]
0000000000005134         xor        rcx, qword [fs:0x28]
000000000000513d         jne        loc_5149

000000000000513f         add        rsp, 0x48
0000000000005143         ret
                        ; endp

                     loc_5144:
0000000000005144         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_5149:
0000000000005149         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
000000000000514e         align      16                                          ; End of unwind block (FDE at 0xadc4)

                     quotearg_n_custom_mem:
0000000000005150         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xade0), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000005154         mov        r9, rcx
0000000000005157         mov        rcx, qword [qword_20d230]                   ; qword_20d230
000000000000515e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000005166         mov        rax, qword [fs:0x28]
000000000000516f         mov        qword [rsp+0x48+var_10], rax
0000000000005174         xor        eax, eax
0000000000005176         movaps     xmmword [rsp+0x48+var_48], xmm0
000000000000517a         test       rsi, rsi
000000000000517d         mov        qword [rsp+0x48+var_18], rcx
0000000000005182         mov        dword [rsp+0x48+var_48], 0xa
0000000000005189         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20d210
0000000000005191         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000005196         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20d220
000000000000519e         movaps     xmmword [rsp+0x48+var_28], xmm0
00000000000051a3         je         loc_51d7

00000000000051a5         test       rdx, rdx
00000000000051a8         je         loc_51d7

00000000000051aa         mov        qword [rsp+0x48+var_20], rsi
00000000000051af         mov        qword [rsp+0x48+var_18], rdx
00000000000051b4         mov        rcx, rsp
00000000000051b7         mov        rdx, r8
00000000000051ba         mov        rsi, r9
00000000000051bd         call       quotearg_n_options                          ; quotearg_n_options
00000000000051c2         mov        rdi, qword [rsp+0x48+var_10]
00000000000051c7         xor        rdi, qword [fs:0x28]
00000000000051d0         jne        loc_51dc

00000000000051d2         add        rsp, 0x48
00000000000051d6         ret
                        ; endp

                     loc_51d7:
00000000000051d7         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_51dc:
00000000000051dc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
00000000000051e1         align      16                                          ; End of unwind block (FDE at 0xade0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom:
00000000000051f0         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0xadfc)
00000000000051f7         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
00000000000051fc         align      512                                         ; End of unwind block (FDE at 0xadfc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000005200         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xae10)
0000000000005203         mov        r8, 0xffffffffffffffff
000000000000520a         mov        rdx, rsi
000000000000520d         mov        rsi, rdi
0000000000005210         xor        edi, edi
0000000000005212         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000005217         align      32                                          ; End of unwind block (FDE at 0xae10)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
0000000000005220         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0xae24)
0000000000005223         mov        rcx, rdx
0000000000005226         mov        rdx, rsi
0000000000005229         mov        rsi, rdi
000000000000522c         xor        edi, edi
000000000000522e         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000005233         align      64                                          ; End of unwind block (FDE at 0xae24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000005240         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xae38), quote_quoting_options
0000000000005247         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000524c         align      16                                          ; End of unwind block (FDE at 0xae38)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000005250         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xae4c), quote_quoting_options
0000000000005257         mov        rdx, rsi
000000000000525a         mov        rsi, rdi
000000000000525d         xor        edi, edi
000000000000525f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005264         align      16                                          ; End of unwind block (FDE at 0xae4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
0000000000005270         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xae60), quote_quoting_options
0000000000005277         mov        rdx, 0xffffffffffffffff
000000000000527e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005283         align      16                                          ; End of unwind block (FDE at 0xae60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
0000000000005290         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xae74), quote_quoting_options, CODE XREF=main+791, main+891, main+3125, randread_error+11, xnumtoumax+109
0000000000005297         mov        rsi, rdi
000000000000529a         mov        rdx, 0xffffffffffffffff
00000000000052a1         xor        edi, edi
00000000000052a3         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000052a8         align      16                                          ; End of unwind block (FDE at 0xae74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randint_new:
00000000000052b0         push       rbx                                         ; Begin of unwind block (FDE at 0xae8c)
00000000000052b1         mov        rbx, rdi
00000000000052b4         mov        edi, 0x18
00000000000052b9         call       xmalloc                                     ; xmalloc
00000000000052be         mov        qword [rax], rbx
00000000000052c1         mov        qword [rax+0x10], 0x0
00000000000052c9         mov        qword [rax+8], 0x0
00000000000052d1         pop        rbx
00000000000052d2         ret
                        ; endp
00000000000052d3         align      32                                          ; End of unwind block (FDE at 0xae8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randint_all_new:
00000000000052e0         push       rbx                                         ; Begin of unwind block (FDE at 0xaea8), CODE XREF=main+1116, main+1396, main+1491
00000000000052e1         call       randread_new                                ; randread_new
00000000000052e6         test       rax, rax
00000000000052e9         je         loc_5310

00000000000052eb         mov        rbx, rax
00000000000052ee         mov        edi, 0x18
00000000000052f3         call       xmalloc                                     ; xmalloc
00000000000052f8         mov        qword [rax], rbx
00000000000052fb         mov        qword [rax+0x10], 0x0
0000000000005303         mov        qword [rax+8], 0x0
000000000000530b         pop        rbx
000000000000530c         ret
                        ; endp
000000000000530d         align      16

                     loc_5310:
0000000000005310         xor        eax, eax                                    ; CODE XREF=randint_all_new+9
0000000000005312         pop        rbx
0000000000005313         ret
                        ; endp
0000000000005314         align      32                                          ; End of unwind block (FDE at 0xaea8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randint_get_source:
0000000000005320         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0xaec8)
0000000000005323         ret
                        ; endp
0000000000005324         align      16                                          ; End of unwind block (FDE at 0xaec8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     randint_genmax:
0000000000005330         push       r15                                         ; Begin of unwind block (FDE at 0xaedc), CODE XREF=main+1986, main+2647, main+2905, randperm_new+74, randperm_new+442
0000000000005332         push       r14
0000000000005334         lea        r15, qword [rsi+1]
0000000000005338         push       r13
000000000000533a         push       r12
000000000000533c         mov        r13, rdi
000000000000533f         push       rbp
0000000000005340         push       rbx
0000000000005341         mov        r14, rsi
0000000000005344         sub        rsp, 0x28
0000000000005348         mov        rbp, qword [rdi+8]
000000000000534c         mov        rbx, qword [rdi+0x10]
0000000000005350         mov        rax, qword [fs:0x28]
0000000000005359         mov        qword [rsp+0x58+var_40], rax
000000000000535e         xor        eax, eax
0000000000005360         mov        rax, qword [rdi]
0000000000005363         lea        r12, qword [rsp+0x58+var_48]
0000000000005368         mov        qword [rsp+0x58+var_50], rax
000000000000536d         jmp        loc_53a5
000000000000536f         align      16

                     loc_5370:
0000000000005370         cmp        rbx, r14                                    ; CODE XREF=randint_genmax+120
0000000000005373         je         loc_53ff

                     loc_5379:
0000000000005379         mov        rax, rbx                                    ; CODE XREF=randint_genmax+201
000000000000537c         xor        edx, edx
000000000000537e         sub        rax, r14
0000000000005381         div        r15
0000000000005384         sub        rbx, rdx
0000000000005387         mov        rdi, rdx
000000000000538a         mov        rsi, rax
000000000000538d         xor        edx, edx
000000000000538f         mov        rax, rbp
0000000000005392         div        r15
0000000000005395         cmp        rbp, rbx
0000000000005398         jbe        loc_5438

000000000000539e         lea        rbx, qword [rdi-1]
00000000000053a2         mov        rbp, rdx

                     loc_53a5:
00000000000053a5         cmp        rbx, r14                                    ; CODE XREF=randint_genmax+61
00000000000053a8         jae        loc_5370

00000000000053aa         mov        rax, rbx
00000000000053ad         xor        edx, edx
00000000000053af         nop

                     loc_53b0:
00000000000053b0         shl        rax, 0x8                                    ; CODE XREF=randint_genmax+145
00000000000053b4         add        rdx, 0x1
00000000000053b8         add        rax, 0xff
00000000000053be         cmp        r14, rax
00000000000053c1         ja         loc_53b0

00000000000053c3         mov        rdi, qword [rsp+0x58+var_50]
00000000000053c8         mov        rsi, r12
00000000000053cb         call       randread                                    ; randread
00000000000053d0         mov        rax, r12
00000000000053d3         nop        dword [rax+rax]

                     loc_53d8:
00000000000053d8         movzx      edx, byte [rax]                             ; CODE XREF=randint_genmax+196
00000000000053db         shl        rbx, 0x8
00000000000053df         shl        rbp, 0x8
00000000000053e3         add        rbx, 0xff
00000000000053ea         add        rax, 0x1
00000000000053ee         add        rbp, rdx
00000000000053f1         cmp        r14, rbx
00000000000053f4         ja         loc_53d8

00000000000053f6         cmp        rbx, r14
00000000000053f9         jne        loc_5379

                     loc_53ff:
00000000000053ff         mov        qword [r13+0x10], 0x0                       ; CODE XREF=randint_genmax+67
0000000000005407         mov        qword [r13+8], 0x0

                     loc_540f:
000000000000540f         mov        rcx, qword [rsp+0x58+var_40]                ; CODE XREF=randint_genmax+275
0000000000005414         xor        rcx, qword [fs:0x28]
000000000000541d         mov        rax, rbp
0000000000005420         jne        loc_5445

0000000000005422         add        rsp, 0x28
0000000000005426         pop        rbx
0000000000005427         pop        rbp
0000000000005428         pop        r12
000000000000542a         pop        r13
000000000000542c         pop        r14
000000000000542e         pop        r15
0000000000005430         ret
                        ; endp
0000000000005431         align      8

                     loc_5438:
0000000000005438         mov        qword [r13+8], rax                          ; CODE XREF=randint_genmax+104
000000000000543c         mov        qword [r13+0x10], rsi
0000000000005440         mov        rbp, rdx
0000000000005443         jmp        loc_540f

                     loc_5445:
0000000000005445         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=randint_genmax+240
                        ; endp
000000000000544a         align      16                                          ; End of unwind block (FDE at 0xaedc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randint_free:
0000000000005450         push       rbx                                         ; Begin of unwind block (FDE at 0xaf28)
0000000000005451         mov        rdx, 0xffffffffffffffff
0000000000005458         mov        rbx, rdi
000000000000545b         mov        esi, 0x18
0000000000005460         call       j___explicit_bzero_chk                      ; __explicit_bzero_chk
0000000000005465         mov        rdi, rbx
0000000000005468         pop        rbx
0000000000005469         jmp        sub_1dd0                                    ; sub_1dd0
                        ; endp
000000000000546e         align      16                                          ; End of unwind block (FDE at 0xaf28)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randint_all_free:
0000000000005470         push       r13                                         ; Begin of unwind block (FDE at 0xaf44)
0000000000005472         push       r12
0000000000005474         push       rbp
0000000000005475         push       rbx
0000000000005476         mov        rbx, rdi
0000000000005479         sub        rsp, 0x8
000000000000547d         mov        rdi, qword [rdi]
0000000000005480         call       randread_free                               ; randread_free
0000000000005485         mov        r12d, eax
0000000000005488         call       j___errno_location                          ; __errno_location
000000000000548d         mov        r13d, dword [rax]
0000000000005490         mov        rdi, rbx
0000000000005493         mov        rdx, 0xffffffffffffffff
000000000000549a         mov        esi, 0x18
000000000000549f         mov        rbp, rax
00000000000054a2         call       j___explicit_bzero_chk                      ; __explicit_bzero_chk
00000000000054a7         mov        rdi, rbx
00000000000054aa         call       sub_1dd0                                    ; sub_1dd0
00000000000054af         mov        dword [rbp], r13d
00000000000054b3         add        rsp, 0x8
00000000000054b7         mov        eax, r12d
00000000000054ba         pop        rbx
00000000000054bb         pop        rbp
00000000000054bc         pop        r12
00000000000054be         pop        r13
00000000000054c0         ret
                        ; endp
00000000000054c1         align      16                                          ; End of unwind block (FDE at 0xaf44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sparse_hash_:
00000000000054d0         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0xaf7c), DATA XREF=randperm_new+169
00000000000054d3         xor        edx, edx
00000000000054d5         div        rsi
00000000000054d8         mov        rax, rdx
00000000000054db         ret
                        ; endp
00000000000054dc         align      32                                          ; End of unwind block (FDE at 0xaf7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sparse_cmp_:
00000000000054e0         mov        rax, qword [rsi]                            ; Begin of unwind block (FDE at 0xaf90), DATA XREF=randperm_new+162
00000000000054e3         cmp        qword [rdi], rax
00000000000054e6         sete       al
00000000000054e9         ret
                        ; endp
00000000000054ea         align      16                                          ; End of unwind block (FDE at 0xaf90)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randperm_bound:
00000000000054f0         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0xafa4), CODE XREF=main+1480
00000000000054f3         sub        rax, 0x1
00000000000054f7         je         loc_5515

00000000000054f9         xor        esi, esi
00000000000054fb         nop        dword [rax+rax]

                     loc_5500:
0000000000005500         add        rsi, 0x1                                    ; CODE XREF=randperm_bound+23
0000000000005504         shr        rax, 0x1
0000000000005507         jne        loc_5500

0000000000005509         imul       rdi, rsi
000000000000550d         lea        rax, qword [rdi+7]
0000000000005511         shr        rax, 0x3

                     loc_5515:
0000000000005515         ret                                                    ; CODE XREF=randperm_bound+7
                        ; endp
0000000000005517         align      32                                          ; End of unwind block (FDE at 0xafa4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_94: int32_t, -148


                     randperm_new:
0000000000005520         push       r15                                         ; Begin of unwind block (FDE at 0xafb8), CODE XREF=main+1534, main+3279
0000000000005522         push       r14
0000000000005524         push       r13
0000000000005526         push       r12
0000000000005528         push       rbp
0000000000005529         push       rbx
000000000000552a         sub        rsp, 0x68
000000000000552e         mov        rax, qword [fs:0x28]
0000000000005537         mov        qword [rsp+0x98+var_40], rax
000000000000553c         xor        eax, eax
000000000000553e         test       rsi, rsi
0000000000005541         je         loc_57e8

0000000000005547         cmp        rsi, 0x1
000000000000554b         mov        r13, rdi
000000000000554e         mov        r12, rsi
0000000000005551         mov        rbp, rdx
0000000000005554         jne        loc_55a0

0000000000005556         mov        edi, 0x8                                    ; argument #1 for method xmalloc
000000000000555b         call       xmalloc                                     ; xmalloc
0000000000005560         lea        rsi, qword [rbp-1]
0000000000005564         mov        rbx, rax
0000000000005567         mov        rdi, r13
000000000000556a         call       randint_genmax                              ; randint_genmax
000000000000556f         mov        qword [rbx], rax

                     loc_5572:
0000000000005572         mov        rdx, qword [rsp+0x98+var_40]                ; CODE XREF=randperm_new+701, randperm_new+714, randperm_new+802
0000000000005577         xor        rdx, qword [fs:0x28]
0000000000005580         mov        rax, rbx
0000000000005583         jne        loc_5847

0000000000005589         add        rsp, 0x68
000000000000558d         pop        rbx
000000000000558e         pop        rbp
000000000000558f         pop        r12
0000000000005591         pop        r13
0000000000005593         pop        r14
0000000000005595         pop        r15
0000000000005597         ret
                        ; endp
0000000000005598         align      32

                     loc_55a0:
00000000000055a0         cmp        rdx, 0x1ffff                                ; CODE XREF=randperm_new+52
00000000000055a7         jbe        loc_5628

00000000000055a9         mov        rax, rdx
00000000000055ac         xor        edx, edx
00000000000055ae         div        rsi
00000000000055b1         cmp        rax, 0x1f
00000000000055b5         jbe        loc_5628

00000000000055b7         mov        r8, qword [qword_20cfc0]                    ; qword_20cfc0
00000000000055be         lea        rdi, qword [rsi+rsi]
00000000000055c2         lea        rcx, qword [sparse_cmp_]                    ; sparse_cmp_
00000000000055c9         lea        rdx, qword [sparse_hash_]                   ; sparse_hash_
00000000000055d0         xor        esi, esi
00000000000055d2         call       hash_initialize                             ; hash_initialize
00000000000055d7         test       rax, rax
00000000000055da         mov        qword [rsp+0x98+var_90], rax
00000000000055df         je         loc_584c

00000000000055e5         mov        edx, 0x8
00000000000055ea         xor        ecx, ecx
00000000000055ec         mov        rax, rdx
00000000000055ef         mul        r12
00000000000055f2         jo         loc_585b

                     loc_55f8:
00000000000055f8         test       rax, rax                                    ; CODE XREF=randperm_new+832
00000000000055fb         js         loc_584c

0000000000005601         test       rcx, rcx
0000000000005604         jne        loc_584c

000000000000560a         lea        rdi, qword [r12*8]                          ; argument #1 for method xmalloc
0000000000005612         call       xmalloc                                     ; xmalloc
0000000000005617         mov        dword [rsp+0x98+var_94], 0x1
000000000000561f         mov        rbx, rax
0000000000005622         jmp        loc_5686
0000000000005624         align      8

                     loc_5628:
0000000000005628         mov        edx, 0x8                                    ; CODE XREF=randperm_new+135, randperm_new+149
000000000000562d         xor        ecx, ecx
000000000000562f         mov        rax, rdx
0000000000005632         mul        rbp
0000000000005635         jo         loc_5865

                     loc_563b:
000000000000563b         test       rax, rax                                    ; CODE XREF=randperm_new+842
000000000000563e         js         loc_584c

0000000000005644         test       rcx, rcx
0000000000005647         jne        loc_584c

000000000000564d         lea        rdi, qword [rbp*8]                          ; argument #1 for method xmalloc
0000000000005655         call       xmalloc                                     ; xmalloc
000000000000565a         test       rbp, rbp
000000000000565d         mov        rbx, rax
0000000000005660         je         loc_5675

0000000000005662         xor        eax, eax
0000000000005664         nop        dword [rax]

                     loc_5668:
0000000000005668         mov        qword [rbx+rax*8], rax                      ; CODE XREF=randperm_new+339
000000000000566c         add        rax, 0x1
0000000000005670         cmp        rbp, rax
0000000000005673         jne        loc_5668

                     loc_5675:
0000000000005675         mov        dword [rsp+0x98+var_94], 0x0                ; CODE XREF=randperm_new+320
000000000000567d         mov        qword [rsp+0x98+var_90], 0x0

                     loc_5686:
0000000000005686         lea        rax, qword [rbp-1]                          ; CODE XREF=randperm_new+258
000000000000568a         xor        ebp, ebp
000000000000568c         mov        qword [rsp+0x98+var_88], rax
0000000000005691         lea        rax, qword [rsp+0x98+var_58]
0000000000005696         mov        qword [rsp+0x98+var_78], rax
000000000000569b         lea        rax, qword [rsp+0x98+var_68]
00000000000056a0         mov        qword [rsp+0x98+var_70], rax
00000000000056a5         jmp        loc_56cf
00000000000056a7         align      16

                     loc_56b0:
00000000000056b0         lea        rax, qword [rbx+r14*8]                      ; CODE XREF=randperm_new+457
00000000000056b4         mov        rsi, qword [rbx+rbp*8]
00000000000056b8         mov        rcx, qword [rax]
00000000000056bb         mov        qword [rbx+rbp*8], rcx
00000000000056bf         add        rbp, 0x1
00000000000056c3         mov        qword [rax], rsi
00000000000056c6         cmp        r12, rbp
00000000000056c9         jbe        loc_5799

                     loc_56cf:
00000000000056cf         mov        rsi, qword [rsp+0x98+var_88]                ; CODE XREF=randperm_new+389, randperm_new+627
00000000000056d4         mov        rdi, r13
00000000000056d7         sub        rsi, rbp
00000000000056da         call       randint_genmax                              ; randint_genmax
00000000000056df         mov        edx, dword [rsp+0x98+var_94]
00000000000056e3         lea        r14, qword [rax+rbp]
00000000000056e7         test       edx, edx
00000000000056e9         je         loc_56b0

00000000000056eb         mov        rsi, qword [rsp+0x98+var_78]
00000000000056f0         mov        rdi, qword [rsp+0x98+var_90]
00000000000056f5         mov        qword [rsp+0x98+var_58], rbp
00000000000056fa         mov        qword [rsp+0x98+var_50], 0x0
0000000000005703         call       hash_delete                                 ; hash_delete
0000000000005708         mov        rsi, qword [rsp+0x98+var_70]
000000000000570d         mov        rdi, qword [rsp+0x98+var_90]
0000000000005712         mov        r15, rax
0000000000005715         mov        qword [rsp+0x98+var_68], r14
000000000000571a         mov        qword [rsp+0x98+var_60], 0x0
0000000000005723         call       hash_delete                                 ; hash_delete
0000000000005728         test       r15, r15
000000000000572b         mov        r9, rax
000000000000572e         je         loc_5810

                     loc_5734:
0000000000005734         test       r9, r9                                      ; CODE XREF=randperm_new+782
0000000000005737         je         loc_57f0

000000000000573d         mov        r14, qword [r9+8]

                     loc_5741:
0000000000005741         mov        rax, qword [r15+8]                          ; CODE XREF=randperm_new+740
0000000000005745         mov        qword [r15+8], r14
0000000000005749         mov        rsi, r15
000000000000574c         mov        r14, qword [rsp+0x98+var_90]
0000000000005751         mov        qword [rsp+0x98+var_80], r9
0000000000005756         mov        qword [r9+8], rax
000000000000575a         mov        rdi, r14
000000000000575d         call       hash_insert                                 ; hash_insert
0000000000005762         test       rax, rax
0000000000005765         je         loc_584c

000000000000576b         mov        r9, qword [rsp+0x98+var_80]
0000000000005770         mov        rdi, r14
0000000000005773         mov        rsi, r9
0000000000005776         call       hash_insert                                 ; hash_insert
000000000000577b         test       rax, rax
000000000000577e         je         loc_584c

0000000000005784         mov        rax, qword [r15+8]
0000000000005788         mov        qword [rbx+rbp*8], rax
000000000000578c         add        rbp, 0x1
0000000000005790         cmp        r12, rbp
0000000000005793         ja         loc_56cf

                     loc_5799:
0000000000005799         mov        eax, dword [rsp+0x98+var_94]                ; CODE XREF=randperm_new+425
000000000000579d         test       eax, eax
000000000000579f         jne        loc_5838

00000000000057a5         mov        edx, 0x8
00000000000057aa         xor        ecx, ecx
00000000000057ac         mov        rax, rdx
00000000000057af         mul        r12
00000000000057b2         jo         loc_5851

                     loc_57b8:
00000000000057b8         test       rax, rax                                    ; CODE XREF=randperm_new+822
00000000000057bb         js         loc_584c

00000000000057c1         test       rcx, rcx
00000000000057c4         jne        loc_584c

00000000000057ca         lea        rsi, qword [r12*8]                          ; argument #2 for method xrealloc
00000000000057d2         mov        rdi, rbx                                    ; argument #1 for method xrealloc
00000000000057d5         call       xrealloc                                    ; xrealloc
00000000000057da         mov        rbx, rax
00000000000057dd         jmp        loc_5572
00000000000057e2         align      8

                     loc_57e8:
00000000000057e8         xor        ebx, ebx                                    ; CODE XREF=randperm_new+33
00000000000057ea         jmp        loc_5572
00000000000057ef         align      16

                     loc_57f0:
00000000000057f0         mov        edi, 0x10                                   ; argument #1 for method xmalloc, CODE XREF=randperm_new+535
00000000000057f5         call       xmalloc                                     ; xmalloc
00000000000057fa         mov        r9, rax
00000000000057fd         mov        qword [rax+8], r14
0000000000005801         mov        qword [rax], r14
0000000000005804         jmp        loc_5741
0000000000005809         align      16

                     loc_5810:
0000000000005810         mov        edi, 0x10                                   ; argument #1 for method xmalloc, CODE XREF=randperm_new+526
0000000000005815         mov        qword [rsp+0x98+var_80], rax
000000000000581a         call       xmalloc                                     ; xmalloc
000000000000581f         mov        r9, qword [rsp+0x98+var_80]
0000000000005824         mov        r15, rax
0000000000005827         mov        qword [rax+8], rbp
000000000000582b         mov        qword [rax], rbp
000000000000582e         jmp        loc_5734
0000000000005833         align      8

                     loc_5838:
0000000000005838         mov        rdi, qword [rsp+0x98+var_90]                ; CODE XREF=randperm_new+639
000000000000583d         call       hash_free                                   ; hash_free
0000000000005842         jmp        loc_5572

                     loc_5847:
0000000000005847         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=randperm_new+99
                        ; endp

                     loc_584c:
000000000000584c         call       xalloc_die                                  ; xalloc_die, CODE XREF=randperm_new+191, randperm_new+219, randperm_new+228, randperm_new+286, randperm_new+295, randperm_new+581, randperm_new+606, randperm_new+667, randperm_new+676
                        ; endp

                     loc_5851:
0000000000005851         mov        ecx, 0x1                                    ; CODE XREF=randperm_new+658
0000000000005856         jmp        loc_57b8

                     loc_585b:
000000000000585b         mov        ecx, 0x1                                    ; CODE XREF=randperm_new+210
0000000000005860         jmp        loc_55f8

                     loc_5865:
0000000000005865         mov        ecx, 0x1                                    ; CODE XREF=randperm_new+277
000000000000586a         jmp        loc_563b
000000000000586f         align      16                                          ; End of unwind block (FDE at 0xafb8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randread_error:
0000000000005870         push       rbp                                         ; Begin of unwind block (FDE at 0xb004), DATA XREF=randread_new+90, randread_new+196, randread_new+348
0000000000005871         push       rbx
0000000000005872         sub        rsp, 0x8
0000000000005876         test       rdi, rdi
0000000000005879         je         loc_58b8

000000000000587b         call       quote                                       ; quote
0000000000005880         mov        rbp, rax
0000000000005883         call       j___errno_location                          ; __errno_location
0000000000005888         cmp        dword [rax], 0x0
000000000000588b         mov        rbx, rax
000000000000588e         mov        edx, 0x5
0000000000005893         je         loc_58bd

0000000000005895         lea        rsi, qword [aSReadError]                    ; argument "msgid" for method j_dcgettext, "%s: read error"
000000000000589c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000589e         call       j_dcgettext                                 ; dcgettext

                     loc_58a3:
00000000000058a3         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure, CODE XREF=randread_error+91
00000000000058a9         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
00000000000058ab         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000058ae         mov        rcx, rbp
00000000000058b1         xor        eax, eax
00000000000058b3         call       j_error                                     ; error

                     loc_58b8:
00000000000058b8         call       j_abort                                     ; abort, CODE XREF=randread_error+9
                        ; endp

                     loc_58bd:
00000000000058bd         lea        rsi, qword [aSEndOfFile]                    ; argument "msgid" for method j_dcgettext, "%s: end of file", CODE XREF=randread_error+35
00000000000058c4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000058c6         call       j_dcgettext                                 ; dcgettext
00000000000058cb         jmp        loc_58a3
00000000000058cd         align      16                                          ; End of unwind block (FDE at 0xb004)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_58: int32_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     randread_new:
00000000000058d0         push       r15                                         ; Begin of unwind block (FDE at 0xb024), CODE XREF=randint_all_new+1
00000000000058d2         push       r14
00000000000058d4         push       r13
00000000000058d6         push       r12
00000000000058d8         push       rbp
00000000000058d9         push       rbx
00000000000058da         sub        rsp, 0x38
00000000000058de         mov        rax, qword [fs:0x28]
00000000000058e7         mov        qword [rsp+0x68+var_40], rax
00000000000058ec         xor        eax, eax
00000000000058ee         test       rsi, rsi
00000000000058f1         je         loc_5a18

00000000000058f7         test       rdi, rdi
00000000000058fa         mov        r12, rdi
00000000000058fd         mov        rbp, rsi
0000000000005900         je         loc_5980

0000000000005902         lea        rsi, qword [aDevurandom+13]                 ; 0x9cb4
0000000000005909         call       fopen_safer                                 ; fopen_safer
000000000000590e         test       rax, rax
0000000000005911         mov        r13, rax
0000000000005914         je         loc_5b18

000000000000591a         mov        edi, 0x1038
000000000000591f         call       xmalloc                                     ; xmalloc
0000000000005924         mov        rbx, rax
0000000000005927         mov        qword [rax], r13
000000000000592a         lea        rax, qword [randread_error]                 ; randread_error
0000000000005931         cmp        rbp, 0x1000
0000000000005938         mov        ecx, 0x1000
000000000000593d         lea        rsi, qword [rbx+0x18]                       ; argument "__buf" for method j_setvbuf
0000000000005941         cmovbe     rcx, rbp                                    ; argument "__n" for method j_setvbuf
0000000000005945         mov        qword [rbx+8], rax
0000000000005949         mov        qword [rbx+0x10], r12
000000000000594d         xor        edx, edx                                    ; argument "__modes" for method j_setvbuf
000000000000594f         mov        rdi, r13                                    ; argument "__stream" for method j_setvbuf
0000000000005952         call       j_setvbuf                                   ; setvbuf

                     loc_5957:
0000000000005957         mov        rdx, qword [rsp+0x68+var_40]                ; CODE XREF=randread_new+317, randread_new+367, randread_new+586
000000000000595c         xor        rdx, qword [fs:0x28]
0000000000005965         mov        rax, rbx
0000000000005968         jne        loc_5b1f

000000000000596e         add        rsp, 0x38
0000000000005972         pop        rbx
0000000000005973         pop        rbp
0000000000005974         pop        r12
0000000000005976         pop        r13
0000000000005978         pop        r14
000000000000597a         pop        r15
000000000000597c         ret
                        ; endp
000000000000597d         align      128

                     loc_5980:
0000000000005980         mov        edi, 0x1038                                 ; CODE XREF=randread_new+48
0000000000005985         call       xmalloc                                     ; xmalloc
000000000000598a         mov        rbx, rax
000000000000598d         mov        qword [rax], 0x0
0000000000005994         lea        rax, qword [randread_error]                 ; randread_error
000000000000599b         lea        rdi, qword [aDevurandom]                    ; argument "__file" for method j_open, "/dev/urandom"
00000000000059a2         xor        esi, esi                                    ; argument "__oflag" for method j_open
00000000000059a4         mov        qword [rbx+0x10], 0x0
00000000000059ac         mov        qword [rbx+8], rax
00000000000059b0         mov        qword [rbx+0x18], 0x0
00000000000059b8         xor        eax, eax
00000000000059ba         call       j_open                                      ; open
00000000000059bf         test       eax, eax
00000000000059c1         lea        r13, qword [rbx+0x20]
00000000000059c5         mov        r15d, eax
00000000000059c8         js         loc_5a48

00000000000059ca         cmp        rbp, 0x800
00000000000059d1         mov        rdx, rbp
00000000000059d4         mov        r14d, 0x800
00000000000059da         cmova      rdx, r14
00000000000059de         mov        ecx, 0x1018
00000000000059e3         mov        rsi, r13
00000000000059e6         mov        edi, eax
00000000000059e8         call       j___read_chk                                ; __read_chk
00000000000059ed         mov        edi, r15d                                   ; argument "__fd" for method j_close
00000000000059f0         mov        rbp, rax
00000000000059f3         call       j_close                                     ; close
00000000000059f8         cmp        rbp, 0x7ff
00000000000059ff         jle        loc_5b24

                     loc_5a05:
0000000000005a05         mov        rdi, r13                                    ; CODE XREF=randread_new+502, randread_new+547, randread_new+573, randread_new+663, randread_new+742, randread_new+798
0000000000005a08         call       isaac_seed                                  ; isaac_seed
0000000000005a0d         jmp        loc_5957
0000000000005a12         align      8

                     loc_5a18:
0000000000005a18         mov        edi, 0x1038                                 ; CODE XREF=randread_new+33
0000000000005a1d         call       xmalloc                                     ; xmalloc
0000000000005a22         mov        rbx, rax
0000000000005a25         mov        qword [rax], 0x0
0000000000005a2c         lea        rax, qword [randread_error]                 ; randread_error
0000000000005a33         mov        qword [rbx+0x10], 0x0
0000000000005a3b         mov        qword [rbx+8], rax
0000000000005a3f         jmp        loc_5957
0000000000005a44         align      8

                     loc_5a48:
0000000000005a48         lea        r12, qword [rsp+0x68+var_58]                ; CODE XREF=randread_new+248
0000000000005a4d         xor        esi, esi                                    ; argument "__tz" for method j_gettimeofday
0000000000005a4f         mov        r14d, 0x18
0000000000005a55         mov        rdi, r12                                    ; argument "__tv" for method j_gettimeofday
0000000000005a58         call       j_gettimeofday                              ; gettimeofday
0000000000005a5d         movdqa     xmm0, xmmword [rsp+0x68+var_58]
0000000000005a63         movups     xmmword [rbx+0x20], xmm0
0000000000005a67         call       j_getpid                                    ; getpid
0000000000005a6c         mov        dword [rbx+0x30], eax
0000000000005a6f         mov        dword [rsp+0x68+var_58], eax
0000000000005a73         call       j_getppid                                   ; getppid
0000000000005a78         mov        dword [rsp+0x68+var_58], eax
0000000000005a7c         mov        dword [rbx+0x34], eax

                     loc_5a7f:
0000000000005a7f         mov        ebp, 0x800                                  ; CODE XREF=randread_new+804
0000000000005a84         mov        eax, 0x4
0000000000005a89         sub        rbp, r14
0000000000005a8c         cmp        rbp, 0x4
0000000000005a90         cmova      rbp, rax
0000000000005a94         call       j_getuid                                    ; getuid
0000000000005a99         test       ebp, ebp
0000000000005a9b         mov        dword [rsp+0x68+var_58], eax
0000000000005a9f         lea        rcx, qword [r13+r14]
0000000000005aa4         mov        esi, ebp
0000000000005aa6         je         loc_5abc

0000000000005aa8         xor        eax, eax

                     loc_5aaa:
0000000000005aaa         mov        edx, eax                                    ; CODE XREF=randread_new+490
0000000000005aac         add        eax, 0x1
0000000000005aaf         movzx      edi, byte [r12+rdx]
0000000000005ab4         cmp        eax, esi
0000000000005ab6         mov        byte [rcx+rdx], dil
0000000000005aba         jb         loc_5aaa

                     loc_5abc:
0000000000005abc         add        rbp, r14                                    ; CODE XREF=randread_new+470
0000000000005abf         cmp        rbp, 0x7ff
0000000000005ac6         ja         loc_5a05

0000000000005acc         call       j_getgid                                    ; getgid
0000000000005ad1         mov        dword [rsp+0x68+var_58], eax
0000000000005ad5         mov        eax, 0x800
0000000000005ada         mov        edx, 0x4
0000000000005adf         sub        rax, rbp
0000000000005ae2         lea        rcx, qword [r13+rbp]
0000000000005ae7         cmp        rax, 0x4
0000000000005aeb         cmova      rax, rdx
0000000000005aef         test       eax, eax
0000000000005af1         mov        esi, eax
0000000000005af3         je         loc_5a05

0000000000005af9         xor        eax, eax

                     loc_5afb:
0000000000005afb         mov        edx, eax                                    ; CODE XREF=randread_new+571
0000000000005afd         add        eax, 0x1
0000000000005b00         movzx      edi, byte [r12+rdx]
0000000000005b05         cmp        eax, esi
0000000000005b07         mov        byte [rcx+rdx], dil
0000000000005b0b         jb         loc_5afb

0000000000005b0d         jmp        loc_5a05
0000000000005b12         align      8

                     loc_5b18:
0000000000005b18         xor        ebx, ebx                                    ; CODE XREF=randread_new+68
0000000000005b1a         jmp        loc_5957

                     loc_5b1f:
0000000000005b1f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=randread_new+152
                        ; endp

                     loc_5b24:
0000000000005b24         test       rbp, rbp                                    ; CODE XREF=randread_new+303
0000000000005b27         mov        r15, r14
0000000000005b2a         mov        eax, 0x10
0000000000005b2f         cmovs      rbp, r12
0000000000005b33         lea        r12, qword [rsp+0x68+var_58]
0000000000005b38         sub        r15, rbp
0000000000005b3b         cmp        r15, 0x10
0000000000005b3f         mov        rdi, r12                                    ; argument "__tv" for method j_gettimeofday
0000000000005b42         cmova      r15, rax
0000000000005b46         xor        esi, esi                                    ; argument "__tz" for method j_gettimeofday
0000000000005b48         call       j_gettimeofday                              ; gettimeofday
0000000000005b4d         lea        rax, qword [r13+rbp]
0000000000005b52         add        rbp, r15
0000000000005b55         mov        ecx, r15d
0000000000005b58         cmp        rbp, 0x7ff
0000000000005b5f         mov        rsi, r12
0000000000005b62         mov        rdi, rax
0000000000005b65         rep movsb  byte [rdi], byte [rsi]
0000000000005b67         ja         loc_5a05

0000000000005b6d         mov        r15, r14
0000000000005b70         mov        r8d, 0x4
0000000000005b76         sub        r15, rbp
0000000000005b79         mov        qword [rsp+0x68+var_60], r8
0000000000005b7e         cmp        r15, 0x4
0000000000005b82         cmova      r15, r8
0000000000005b86         lea        rdx, qword [rbp+r15]
0000000000005b8b         add        rbp, r13
0000000000005b8e         mov        qword [rsp+0x68+var_68], rdx
0000000000005b92         call       j_getpid                                    ; getpid
0000000000005b97         mov        rdx, qword [rsp+0x68+var_68]
0000000000005b9b         mov        dword [rsp+0x68+var_58], eax
0000000000005b9f         mov        ecx, r15d
0000000000005ba2         mov        rdi, rbp
0000000000005ba5         mov        rsi, r12
0000000000005ba8         mov        r8, qword [rsp+0x68+var_60]
0000000000005bad         rep movsb  byte [rdi], byte [rsi]
0000000000005baf         cmp        rdx, 0x7ff
0000000000005bb6         jg         loc_5a05

0000000000005bbc         sub        r14, rdx
0000000000005bbf         cmp        r14, 0x4
0000000000005bc3         cmova      r14, r8
0000000000005bc7         call       j_getppid                                   ; getppid
0000000000005bcc         mov        rdx, qword [rsp+0x68+var_68]
0000000000005bd0         mov        dword [rsp+0x68+var_58], eax
0000000000005bd4         mov        ecx, r14d
0000000000005bd7         mov        rsi, r12
0000000000005bda         lea        rax, qword [r13+rdx]
0000000000005bdf         add        r14, rdx
0000000000005be2         cmp        r14, 0x7ff
0000000000005be9         mov        rdi, rax
0000000000005bec         rep movsb  byte [rdi], byte [rsi]
0000000000005bee         ja         loc_5a05

0000000000005bf4         jmp        loc_5a7f
0000000000005bf9         align      1024                                        ; End of unwind block (FDE at 0xb024)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randread_set_handler:
0000000000005c00         mov        qword [rdi+8], rsi                          ; Begin of unwind block (FDE at 0xb070)
0000000000005c04         ret
                        ; endp
0000000000005c05         align      16                                          ; End of unwind block (FDE at 0xb070)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randread_set_handler_arg:
0000000000005c10         mov        qword [rdi+0x10], rsi                       ; Begin of unwind block (FDE at 0xb084)
0000000000005c14         ret
                        ; endp
0000000000005c15         align      32                                          ; End of unwind block (FDE at 0xb084)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     randread:
0000000000005c20         push       r15                                         ; Begin of unwind block (FDE at 0xb098), CODE XREF=randint_genmax+155
0000000000005c22         push       r14
0000000000005c24         push       r13
0000000000005c26         push       r12
0000000000005c28         mov        r12, rdi
0000000000005c2b         push       rbp
0000000000005c2c         push       rbx
0000000000005c2d         mov        rbp, rdx
0000000000005c30         mov        rbx, rsi
0000000000005c33         sub        rsp, 0x18
0000000000005c37         mov        rcx, qword [rdi]
0000000000005c3a         test       rcx, rcx
0000000000005c3d         mov        qword [rsp+0x48+var_40], rcx
0000000000005c42         je         loc_5ca8

0000000000005c44         call       j___errno_location                          ; __errno_location
0000000000005c49         mov        rcx, qword [rsp+0x48+var_40]
0000000000005c4e         mov        r13, rax
0000000000005c51         jmp        loc_5c76
0000000000005c53         align      8

                     loc_5c58:
0000000000005c58         mov        rax, qword [r12]                            ; CODE XREF=randread+112
0000000000005c5c         mov        rdi, qword [r12+0x10]
0000000000005c61         mov        eax, dword [rax]
0000000000005c63         and        eax, 0x20
0000000000005c66         cmovne     eax, edx
0000000000005c69         mov        dword [r13], eax
0000000000005c6d         call       qword [r12+8]
0000000000005c72         mov        rcx, qword [r12]

                     loc_5c76:
0000000000005c76         mov        rdx, rbp                                    ; argument "__n" for method j_fread_unlocked, CODE XREF=randread+49
0000000000005c79         mov        rdi, rbx                                    ; argument "__ptr" for method j_fread_unlocked
0000000000005c7c         mov        esi, 0x1                                    ; argument "__size" for method j_fread_unlocked
0000000000005c81         call       j_fread_unlocked                            ; fread_unlocked
0000000000005c86         add        rbx, rax
0000000000005c89         sub        rbp, rax
0000000000005c8c         mov        edx, dword [r13]
0000000000005c90         jne        loc_5c58

                     loc_5c92:
0000000000005c92         add        rsp, 0x18                                   ; CODE XREF=randread+366
0000000000005c96         pop        rbx
0000000000005c97         pop        rbp
0000000000005c98         pop        r12
0000000000005c9a         pop        r13
0000000000005c9c         pop        r14
0000000000005c9e         pop        r15
0000000000005ca0         ret
                        ; endp
0000000000005ca1         align      8

                     loc_5ca8:
0000000000005ca8         mov        r14, qword [rdi+0x18]                       ; CODE XREF=randread+34
0000000000005cac         lea        rax, qword [rdi+0x838]
0000000000005cb3         lea        r13, qword [rdi+0x20]
0000000000005cb7         mov        qword [rsp+0x48+var_40], rax
0000000000005cbc         cmp        rdx, r14
0000000000005cbf         jbe        loc_5da2

                     loc_5cc5:
0000000000005cc5         mov        esi, 0x800                                  ; CODE XREF=randread+330
0000000000005cca         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
0000000000005ccd         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000005cd0         sub        rsi, r14
0000000000005cd3         add        rsi, qword [rsp+0x48+var_40]                ; argument "__src" for method j_memcpy
0000000000005cd8         add        rbx, r14
0000000000005cdb         sub        rbp, r14
0000000000005cde         call       j_memcpy                                    ; memcpy
0000000000005ce3         test       bl, 0x7
0000000000005ce6         jne        loc_5d50

0000000000005ce8         cmp        rbp, 0x7ff
0000000000005cef         jbe        loc_5d93

0000000000005cf5         lea        r15, qword [rbp-0x800]
0000000000005cfc         mov        r14, r15
0000000000005cff         and        r14d, 0x7ff
0000000000005d06         jmp        loc_5d1c
0000000000005d08         align      16

                     loc_5d10:
0000000000005d10         cmp        r15, r14                                    ; CODE XREF=randread+276
0000000000005d13         je         loc_5d50

0000000000005d15         sub        r15, 0x800

                     loc_5d1c:
0000000000005d1c         mov        rsi, rbx                                    ; CODE XREF=randread+230
0000000000005d1f         mov        rdi, r13
0000000000005d22         add        rbx, 0x800
0000000000005d29         call       isaac_refill                                ; isaac_refill
0000000000005d2e         test       r15, r15
0000000000005d31         mov        rbp, r15
0000000000005d34         jne        loc_5d10

0000000000005d36         mov        qword [r12+0x18], 0x0
0000000000005d3f         add        rsp, 0x18
0000000000005d43         pop        rbx
0000000000005d44         pop        rbp
0000000000005d45         pop        r12
0000000000005d47         pop        r13
0000000000005d49         pop        r14
0000000000005d4b         pop        r15
0000000000005d4d         ret
                        ; endp
0000000000005d4e         align      16

                     loc_5d50:
0000000000005d50         mov        rsi, qword [rsp+0x48+var_40]                ; CODE XREF=randread+198, randread+243
0000000000005d55         mov        rdi, r13
0000000000005d58         mov        r14d, 0x800
0000000000005d5e         call       isaac_refill                                ; isaac_refill
0000000000005d63         cmp        rbp, 0x800
0000000000005d6a         ja         loc_5cc5

                     loc_5d70:
0000000000005d70         mov        r14d, 0x800                                 ; CODE XREF=randread+384

                     loc_5d76:
0000000000005d76         mov        rsi, qword [rsp+0x48+var_40]                ; argument "__src" for method j_memcpy, CODE XREF=randread+404
0000000000005d7b         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000005d7e         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
0000000000005d81         sub        r14, rbp
0000000000005d84         call       j_memcpy                                    ; memcpy
0000000000005d89         mov        qword [r12+0x18], r14
0000000000005d8e         jmp        loc_5c92

                     loc_5d93:
0000000000005d93         mov        rsi, qword [rsp+0x48+var_40]                ; CODE XREF=randread+207
0000000000005d98         mov        rdi, r13
0000000000005d9b         call       isaac_refill                                ; isaac_refill
0000000000005da0         jmp        loc_5d70

                     loc_5da2:
0000000000005da2         mov        r15, rax                                    ; CODE XREF=randread+159
0000000000005da5         sub        r15, r14
0000000000005da8         lea        rax, qword [r15+0x800]
0000000000005daf         mov        qword [rsp+0x48+var_40], rax
0000000000005db4         jmp        loc_5d76
0000000000005db6         align      64                                          ; End of unwind block (FDE at 0xb098)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     randread_free:
0000000000005dc0         push       rbp                                         ; Begin of unwind block (FDE at 0xb0fc), CODE XREF=randint_all_free+16
0000000000005dc1         push       rbx
0000000000005dc2         mov        rdx, 0xffffffffffffffff
0000000000005dc9         mov        rbx, rdi
0000000000005dcc         mov        esi, 0x1038
0000000000005dd1         sub        rsp, 0x8
0000000000005dd5         mov        rbp, qword [rdi]
0000000000005dd8         call       j___explicit_bzero_chk                      ; __explicit_bzero_chk
0000000000005ddd         mov        rdi, rbx
0000000000005de0         call       sub_1dd0                                    ; sub_1dd0
0000000000005de5         test       rbp, rbp
0000000000005de8         je         loc_5e00

0000000000005dea         add        rsp, 0x8
0000000000005dee         mov        rdi, rbp
0000000000005df1         pop        rbx
0000000000005df2         pop        rbp
0000000000005df3         jmp        rpl_fclose                                  ; rpl_fclose
                        ; endp
0000000000005df8         align      512

                     loc_5e00:
0000000000005e00         add        rsp, 0x8                                    ; CODE XREF=randread_free+40
0000000000005e04         xor        eax, eax
0000000000005e06         pop        rbx
0000000000005e07         pop        rbp
0000000000005e08         ret
                        ; endp
0000000000005e09         align      16                                          ; End of unwind block (FDE at 0xb0fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     isaac_refill:
0000000000005e10         mov        rax, qword [rdi+0x810]                      ; Begin of unwind block (FDE at 0xb134), CODE XREF=randread+265, randread+318, randread+379
0000000000005e17         mov        rdx, qword [rdi+0x800]
0000000000005e1e         lea        r9, qword [rdi+0x400]
0000000000005e25         lea        rcx, qword [rax+1]
0000000000005e29         mov        rax, rdi
0000000000005e2c         mov        qword [rdi+0x810], rcx
0000000000005e33         add        rcx, qword [rdi+0x808]
0000000000005e3a         nop        word [rax+rax]

                     loc_5e40:
0000000000005e40         mov        r8, rdx                                     ; CODE XREF=isaac_refill+329
0000000000005e43         shl        r8, 0x15
0000000000005e47         xor        rdx, r8
0000000000005e4a         mov        r8, qword [rax]
0000000000005e4d         not        rdx
0000000000005e50         add        rdx, qword [rax+0x400]
0000000000005e57         mov        r10, r8
0000000000005e5a         and        r10d, 0x7f8
0000000000005e61         mov        r11, qword [rdi+r10]
0000000000005e65         mov        r10, rdx
0000000000005e68         shr        r10, 0x5
0000000000005e6c         add        r11, rdx
0000000000005e6f         xor        rdx, r10
0000000000005e72         add        rcx, r11
0000000000005e75         mov        qword [rax], rcx
0000000000005e78         shr        rcx, 0x8
0000000000005e7c         and        ecx, 0x7f8
0000000000005e82         mov        r11, qword [rdi+rcx]
0000000000005e86         add        r11, r8
0000000000005e89         mov        qword [rsi], r11
0000000000005e8c         add        rdx, qword [rax+0x408]
0000000000005e93         mov        rcx, qword [rax+8]
0000000000005e97         mov        r10, rdx
0000000000005e9a         mov        rdx, rcx
0000000000005e9d         and        edx, 0x7f8
0000000000005ea3         mov        r8, qword [rdi+rdx]
0000000000005ea7         mov        rdx, r10
0000000000005eaa         shl        rdx, 0xc
0000000000005eae         xor        rdx, r10
0000000000005eb1         add        r8, r10
0000000000005eb4         add        r8, r11
0000000000005eb7         mov        qword [rax+8], r8
0000000000005ebb         shr        r8, 0x8
0000000000005ebf         and        r8d, 0x7f8
0000000000005ec6         add        rcx, qword [rdi+r8]
0000000000005eca         mov        qword [rsi+8], rcx
0000000000005ece         mov        r8, qword [rax+0x10]
0000000000005ed2         mov        r11, rcx
0000000000005ed5         add        rdx, qword [rax+0x410]
0000000000005edc         mov        rcx, r8
0000000000005edf         and        ecx, 0x7f8
0000000000005ee5         mov        r10, qword [rdi+rcx]
0000000000005ee9         add        r10, rdx
0000000000005eec         mov        rcx, r10
0000000000005eef         add        rcx, r11
0000000000005ef2         mov        qword [rax+0x10], rcx
0000000000005ef6         shr        rcx, 0x8
0000000000005efa         and        ecx, 0x7f8
0000000000005f00         mov        r10, qword [rdi+rcx]
0000000000005f04         mov        rcx, rdx
0000000000005f07         shr        rcx, 0x21
0000000000005f0b         xor        rdx, rcx
0000000000005f0e         add        r10, r8
0000000000005f11         mov        qword [rsi+0x10], r10
0000000000005f15         mov        rcx, qword [rax+0x18]
0000000000005f19         add        rdx, qword [rax+0x418]
0000000000005f20         mov        r8, rcx
0000000000005f23         and        r8d, 0x7f8
0000000000005f2a         mov        r11, qword [rdi+r8]
0000000000005f2e         add        r11, rdx
0000000000005f31         mov        r8, r11
0000000000005f34         add        r8, r10
0000000000005f37         add        rax, 0x20
0000000000005f3b         add        rsi, 0x20
0000000000005f3f         mov        qword [rax-8], r8
0000000000005f43         shr        r8, 0x8
0000000000005f47         and        r8d, 0x7f8
0000000000005f4e         add        rcx, qword [rdi+r8]
0000000000005f52         mov        qword [rsi-8], rcx
0000000000005f56         cmp        rax, r9
0000000000005f59         jb         loc_5e40

0000000000005f5f         lea        r9, qword [rdi+0x800]
0000000000005f66         nop        word [cs:rax+rax]

                     loc_5f70:
0000000000005f70         mov        r8, rdx                                     ; CODE XREF=isaac_refill+633
0000000000005f73         shl        r8, 0x15
0000000000005f77         xor        rdx, r8
0000000000005f7a         mov        r8, qword [rax]
0000000000005f7d         not        rdx
0000000000005f80         add        rdx, qword [rax-0x400]
0000000000005f87         mov        r10, r8
0000000000005f8a         and        r10d, 0x7f8
0000000000005f91         mov        r11, qword [rdi+r10]
0000000000005f95         mov        r10, rdx
0000000000005f98         shr        r10, 0x5
0000000000005f9c         add        r11, rdx
0000000000005f9f         xor        rdx, r10
0000000000005fa2         add        rcx, r11
0000000000005fa5         mov        qword [rax], rcx
0000000000005fa8         shr        rcx, 0x8
0000000000005fac         and        ecx, 0x7f8
0000000000005fb2         mov        r11, qword [rdi+rcx]
0000000000005fb6         add        r11, r8
0000000000005fb9         mov        qword [rsi], r11
0000000000005fbc         add        rdx, qword [rax-0x3f8]
0000000000005fc3         mov        rcx, qword [rax+8]
0000000000005fc7         mov        r10, rdx
0000000000005fca         mov        rdx, rcx
0000000000005fcd         and        edx, 0x7f8
0000000000005fd3         mov        r8, qword [rdi+rdx]
0000000000005fd7         mov        rdx, r10
0000000000005fda         shl        rdx, 0xc
0000000000005fde         xor        rdx, r10
0000000000005fe1         add        r8, r10
0000000000005fe4         add        r8, r11
0000000000005fe7         mov        qword [rax+8], r8
0000000000005feb         shr        r8, 0x8
0000000000005fef         and        r8d, 0x7f8
0000000000005ff6         add        rcx, qword [rdi+r8]
0000000000005ffa         mov        qword [rsi+8], rcx
0000000000005ffe         mov        r8, qword [rax+0x10]
0000000000006002         mov        r11, rcx
0000000000006005         add        rdx, qword [rax-0x3f0]
000000000000600c         mov        rcx, r8
000000000000600f         and        ecx, 0x7f8
0000000000006015         mov        r10, qword [rdi+rcx]
0000000000006019         add        r10, rdx
000000000000601c         mov        rcx, r10
000000000000601f         add        rcx, r11
0000000000006022         mov        qword [rax+0x10], rcx
0000000000006026         shr        rcx, 0x8
000000000000602a         and        ecx, 0x7f8
0000000000006030         mov        r10, qword [rdi+rcx]
0000000000006034         mov        rcx, rdx
0000000000006037         shr        rcx, 0x21
000000000000603b         xor        rdx, rcx
000000000000603e         add        r10, r8
0000000000006041         mov        qword [rsi+0x10], r10
0000000000006045         mov        rcx, qword [rax+0x18]
0000000000006049         add        rdx, qword [rax-0x3e8]
0000000000006050         mov        r8, rcx
0000000000006053         and        r8d, 0x7f8
000000000000605a         mov        r11, qword [rdi+r8]
000000000000605e         add        r11, rdx
0000000000006061         mov        r8, r11
0000000000006064         add        r8, r10
0000000000006067         add        rax, 0x20
000000000000606b         add        rsi, 0x20
000000000000606f         mov        qword [rax-8], r8
0000000000006073         shr        r8, 0x8
0000000000006077         and        r8d, 0x7f8
000000000000607e         add        rcx, qword [rdi+r8]
0000000000006082         mov        qword [rsi-8], rcx
0000000000006086         cmp        rax, r9
0000000000006089         jb         loc_5f70

000000000000608f         mov        qword [rdi+0x800], rdx
0000000000006096         mov        qword [rdi+0x808], rcx
000000000000609d         ret
                        ; endp
000000000000609e         align      32                                          ; End of unwind block (FDE at 0xb134)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     isaac_seed:
00000000000060a0         push       r13                                         ; Begin of unwind block (FDE at 0xb148), CODE XREF=randread_new+312
00000000000060a2         push       r12
00000000000060a4         lea        r12, qword [rdi+0x800]
00000000000060ab         push       rbp
00000000000060ac         mov        rdx, rdi
00000000000060af         push       rbx
00000000000060b0         mov        rax, rdi
00000000000060b3         movabs     rcx, 0x98f5704f6c44c0ab
00000000000060bd         movabs     r10, 0xae985bf2cbfc89ed
00000000000060c7         movabs     rbp, 0x48fe4a0fa5a09315
00000000000060d1         movabs     rsi, 0x82f053db8355e0ce
00000000000060db         movabs     r8, 0xb29b2e824a595524
00000000000060e5         movabs     rbx, 0x8c0ea5053d4712a0
00000000000060ef         movabs     r11, 0xb9f8b322c73ac862
00000000000060f9         movabs     r9, 0x647c4677a2884b7c
0000000000006103         nop        dword [rax+rax]

                     loc_6108:
0000000000006108         add        rsi, qword [rax+0x20]                       ; CODE XREF=isaac_seed+314
000000000000610c         add        rcx, qword [rax+0x38]
0000000000006110         mov        r13, qword [rax]
0000000000006113         add        rbp, qword [rax+0x28]
0000000000006117         add        r10, qword [rax+0x30]
000000000000611b         sub        r13, rsi
000000000000611e         add        r9, r13
0000000000006121         mov        r13, rcx
0000000000006124         shr        r13, 0x9
0000000000006128         add        rcx, r9
000000000000612b         xor        rbp, r13
000000000000612e         mov        r13, qword [rax+8]
0000000000006132         sub        r13, rbp
0000000000006135         add        r11, r13
0000000000006138         mov        r13, r9
000000000000613b         shl        r13, 0x9
000000000000613f         add        r9, r11
0000000000006142         xor        r10, r13
0000000000006145         mov        r13, qword [rax+0x10]
0000000000006149         sub        r13, r10
000000000000614c         add        rbx, r13
000000000000614f         mov        r13, r11
0000000000006152         shr        r13, 0x17
0000000000006156         add        r11, rbx
0000000000006159         xor        rcx, r13
000000000000615c         mov        r13, qword [rax+0x18]
0000000000006160         sub        r13, rcx
0000000000006163         add        r8, r13
0000000000006166         mov        r13, rbx
0000000000006169         shl        r13, 0xf
000000000000616d         add        rbx, r8
0000000000006170         xor        r9, r13
0000000000006173         mov        r13, r8
0000000000006176         sub        rsi, r9
0000000000006179         shr        r13, 0xe
000000000000617d         mov        qword [rax], r9
0000000000006180         xor        r11, r13
0000000000006183         mov        r13, rsi
0000000000006186         add        r8, rsi
0000000000006189         sub        rbp, r11
000000000000618c         shl        r13, 0x14
0000000000006190         mov        qword [rax+8], r11
0000000000006194         xor        rbx, r13
0000000000006197         lea        r13, qword [rsi+rbp]
000000000000619b         mov        rsi, rbp
000000000000619e         sub        r10, rbx
00000000000061a1         shr        rsi, 0x11
00000000000061a5         mov        qword [rax+0x10], rbx
00000000000061a9         xor        r8, rsi
00000000000061ac         mov        rsi, r10
00000000000061af         add        rbp, r10
00000000000061b2         sub        rcx, r8
00000000000061b5         shl        rsi, 0xe
00000000000061b9         mov        qword [rax+0x18], r8
00000000000061bd         xor        rsi, r13
00000000000061c0         add        r10, rcx
00000000000061c3         mov        qword [rax+0x28], rbp
00000000000061c7         mov        qword [rax+0x20], rsi
00000000000061cb         mov        qword [rax+0x30], r10
00000000000061cf         add        rax, 0x40
00000000000061d3         mov        qword [rax-8], rcx
00000000000061d7         cmp        r12, rax
00000000000061da         jne        loc_6108

                     loc_61e0:
00000000000061e0         add        rsi, qword [rdx+0x20]                       ; CODE XREF=isaac_seed+530
00000000000061e4         add        rcx, qword [rdx+0x38]
00000000000061e8         mov        r12, qword [rdx]
00000000000061eb         add        rbp, qword [rdx+0x28]
00000000000061ef         add        r10, qword [rdx+0x30]
00000000000061f3         sub        r12, rsi
00000000000061f6         add        r9, r12
00000000000061f9         mov        r12, rcx
00000000000061fc         shr        r12, 0x9
0000000000006200         add        rcx, r9
0000000000006203         xor        rbp, r12
0000000000006206         mov        r12, qword [rdx+8]
000000000000620a         sub        r12, rbp
000000000000620d         add        r11, r12
0000000000006210         mov        r12, r9
0000000000006213         shl        r12, 0x9
0000000000006217         add        r9, r11
000000000000621a         xor        r10, r12
000000000000621d         mov        r12, qword [rdx+0x10]
0000000000006221         sub        r12, r10
0000000000006224         add        rbx, r12
0000000000006227         mov        r12, r11
000000000000622a         shr        r12, 0x17
000000000000622e         add        r11, rbx
0000000000006231         xor        rcx, r12
0000000000006234         mov        r12, qword [rdx+0x18]
0000000000006238         sub        r12, rcx
000000000000623b         add        r8, r12
000000000000623e         mov        r12, rbx
0000000000006241         shl        r12, 0xf
0000000000006245         add        rbx, r8
0000000000006248         xor        r9, r12
000000000000624b         mov        r12, r8
000000000000624e         sub        rsi, r9
0000000000006251         shr        r12, 0xe
0000000000006255         mov        qword [rdx], r9
0000000000006258         xor        r11, r12
000000000000625b         mov        r12, rsi
000000000000625e         add        r8, rsi
0000000000006261         sub        rbp, r11
0000000000006264         shl        r12, 0x14
0000000000006268         mov        qword [rdx+8], r11
000000000000626c         xor        rbx, r12
000000000000626f         lea        r12, qword [rsi+rbp]
0000000000006273         mov        rsi, rbp
0000000000006276         sub        r10, rbx
0000000000006279         shr        rsi, 0x11
000000000000627d         mov        qword [rdx+0x10], rbx
0000000000006281         xor        r8, rsi
0000000000006284         mov        rsi, r10
0000000000006287         add        rbp, r10
000000000000628a         sub        rcx, r8
000000000000628d         shl        rsi, 0xe
0000000000006291         mov        qword [rdx+0x18], r8
0000000000006295         xor        rsi, r12
0000000000006298         add        r10, rcx
000000000000629b         mov        qword [rdx+0x28], rbp
000000000000629f         mov        qword [rdx+0x20], rsi
00000000000062a3         mov        qword [rdx+0x30], r10
00000000000062a7         add        rdx, 0x40
00000000000062ab         mov        qword [rdx-8], rcx
00000000000062af         cmp        rax, rdx
00000000000062b2         jne        loc_61e0

00000000000062b8         pop        rbx
00000000000062b9         mov        qword [rdi+0x810], 0x0
00000000000062c4         mov        qword [rdi+0x808], 0x0
00000000000062cf         pop        rbp
00000000000062d0         mov        qword [rdi+0x800], 0x0
00000000000062db         pop        r12
00000000000062dd         pop        r13
00000000000062df         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_A8: int64_t, -168
        ;    var_C0: int32_t, -192
        ;    var_D8: int8_t, -216
        ;    var_E0: int64_t, -224


                     fread_file:
00000000000062e0         push       r15                                         ; End of unwind block (FDE at 0xb148), Begin of unwind block (FDE at 0xb17c), CODE XREF=main+2287, internal_read_file+35
00000000000062e2         push       r14
00000000000062e4         push       r13
00000000000062e6         push       r12
00000000000062e8         mov        r13, rdi
00000000000062eb         push       rbp
00000000000062ec         push       rbx
00000000000062ed         sub        rsp, 0xb8
00000000000062f4         mov        qword [rsp+0xe8+var_E0], rsi
00000000000062f9         mov        rax, qword [fs:0x28]
0000000000006302         mov        qword [rsp+0xe8+var_40], rax
000000000000630a         xor        eax, eax
000000000000630c         call       j_fileno                                    ; fileno
0000000000006311         lea        rdx, qword [rsp+0xe8+var_D8]                ; argument "__stat_buf" for method j___fxstat
0000000000006316         mov        esi, eax                                    ; argument "__fildes" for method j___fxstat
0000000000006318         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
000000000000631d         call       j___fxstat                                  ; __fxstat
0000000000006322         test       eax, eax
0000000000006324         js         loc_633a

0000000000006326         mov        eax, dword [rsp+0xe8+var_C0]
000000000000632a         and        eax, 0xf000
000000000000632f         cmp        eax, 0x8000
0000000000006334         je         loc_6488

                     loc_633a:
000000000000633a         mov        ebx, 0x2000                                 ; CODE XREF=fread_file+68, fread_file+435, fread_file+449

                     loc_633f:
000000000000633f         mov        rdi, rbx                                    ; argument "__size" for method j_malloc, CODE XREF=fread_file+462
0000000000006342         call       j_malloc                                    ; malloc
0000000000006347         test       rax, rax
000000000000634a         mov        r12, rax
000000000000634d         je         loc_63f0

0000000000006353         xor        ebp, ebp
0000000000006355         mov        r15, 0xffffffffffffffff
000000000000635c         jmp        loc_639a
000000000000635e         align      32

                     loc_6360:
0000000000006360         cmp        rbx, 0xffffffffffffffff                     ; CODE XREF=fread_file+218
0000000000006364         je         loc_6440

000000000000636a         mov        rax, rbx
000000000000636d         mov        rdi, r12                                    ; argument "__ptr" for method j_realloc
0000000000006370         shr        rax, 0x1
0000000000006373         mov        rdx, rax
0000000000006376         add        rax, rbx
0000000000006379         not        rdx
000000000000637c         cmp        rdx, rbx
000000000000637f         cmovbe     rax, r15
0000000000006383         mov        rsi, rax                                    ; argument "__size" for method j_realloc
0000000000006386         mov        rbx, rax
0000000000006389         call       j_realloc                                   ; realloc
000000000000638e         test       rax, rax
0000000000006391         je         loc_6420

0000000000006397         mov        r12, rax

                     loc_639a:
000000000000639a         mov        r14, rbx                                    ; CODE XREF=fread_file+124
000000000000639d         lea        rdi, qword [r12+rbp]                        ; argument "__ptr" for method j_fread
00000000000063a1         mov        rcx, r13                                    ; argument "__stream" for method j_fread
00000000000063a4         sub        r14, rbp
00000000000063a7         mov        esi, 0x1                                    ; argument "__size" for method j_fread
00000000000063ac         mov        rdx, r14                                    ; argument "__n" for method j_fread
00000000000063af         call       j_fread                                     ; fread
00000000000063b4         add        rbp, rax
00000000000063b7         cmp        r14, rax
00000000000063ba         je         loc_6360

00000000000063bc         call       j___errno_location                          ; __errno_location
00000000000063c1         mov        rdi, r13                                    ; argument "__stream" for method j_ferror
00000000000063c4         mov        r14, rax
00000000000063c7         mov        r15d, dword [rax]
00000000000063ca         call       j_ferror                                    ; ferror
00000000000063cf         test       eax, eax
00000000000063d1         jne        loc_642b

00000000000063d3         sub        rbx, 0x1
00000000000063d7         cmp        rbx, rbp
00000000000063da         ja         loc_6460

00000000000063e0         mov        rax, qword [rsp+0xe8+var_E0]
00000000000063e5         mov        byte [r12+rbp], 0x0
00000000000063ea         mov        qword [rax], rbp
00000000000063ed         nop        dword [rax]

                     loc_63f0:
00000000000063f0         mov        rcx, qword [rsp+0xe8+var_40]                ; CODE XREF=fread_file+109, fread_file+345, fread_file+380, fread_file+416
00000000000063f8         xor        rcx, qword [fs:0x28]
0000000000006401         mov        rax, r12
0000000000006404         jne        loc_64b3

000000000000640a         add        rsp, 0xb8
0000000000006411         pop        rbx
0000000000006412         pop        rbp
0000000000006413         pop        r12
0000000000006415         pop        r13
0000000000006417         pop        r14
0000000000006419         pop        r15
000000000000641b         ret
                        ; endp
000000000000641c         align      32

                     loc_6420:
0000000000006420         call       j___errno_location                          ; __errno_location, CODE XREF=fread_file+177
0000000000006425         mov        r15d, dword [rax]
0000000000006428         mov        r14, rax

                     loc_642b:
000000000000642b         mov        rdi, r12                                    ; CODE XREF=fread_file+241
000000000000642e         xor        r12d, r12d
0000000000006431         call       sub_1dd0                                    ; sub_1dd0
0000000000006436         mov        dword [r14], r15d
0000000000006439         jmp        loc_63f0
000000000000643b         align      64

                     loc_6440:
0000000000006440         call       j___errno_location                          ; __errno_location, CODE XREF=fread_file+132
0000000000006445         mov        r15d, 0xc
000000000000644b         mov        r14, rax
000000000000644e         mov        rdi, r12
0000000000006451         call       sub_1dd0                                    ; sub_1dd0
0000000000006456         xor        r12d, r12d
0000000000006459         mov        dword [r14], r15d
000000000000645c         jmp        loc_63f0
000000000000645e         align      32

                     loc_6460:
0000000000006460         lea        rsi, qword [rbp+1]                          ; argument "__size" for method j_realloc, CODE XREF=fread_file+250
0000000000006464         mov        rdi, r12                                    ; argument "__ptr" for method j_realloc
0000000000006467         call       j_realloc                                   ; realloc
000000000000646c         test       rax, rax
000000000000646f         cmovne     r12, rax
0000000000006473         mov        rax, qword [rsp+0xe8+var_E0]
0000000000006478         mov        byte [r12+rbp], 0x0
000000000000647d         mov        qword [rax], rbp
0000000000006480         jmp        loc_63f0
0000000000006485         align      8

                     loc_6488:
0000000000006488         mov        rdi, r13                                    ; argument "__stream" for method j_ftello, CODE XREF=fread_file+84
000000000000648b         call       j_ftello                                    ; ftello
0000000000006490         test       rax, rax
0000000000006493         js         loc_633a

0000000000006499         mov        rbx, qword [rsp+0xe8+var_A8]
000000000000649e         cmp        rbx, rax
00000000000064a1         jle        loc_633a

00000000000064a7         sub        rbx, rax
00000000000064aa         add        rbx, 0x1
00000000000064ae         jmp        loc_633f

                     loc_64b3:
00000000000064b3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=fread_file+292
                        ; endp
00000000000064b8         align      64                                          ; End of unwind block (FDE at 0xb17c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     internal_read_file:
00000000000064c0         push       r13                                         ; Begin of unwind block (FDE at 0xb1cc), CODE XREF=read_file+7, read_binary_file+7
00000000000064c2         push       r12
00000000000064c4         push       rbp
00000000000064c5         push       rbx
00000000000064c6         mov        rbp, rsi
00000000000064c9         mov        rsi, rdx                                    ; argument "__modes" for method j_fopen
00000000000064cc         sub        rsp, 0x8
00000000000064d0         call       j_fopen                                     ; fopen
00000000000064d5         test       rax, rax
00000000000064d8         je         loc_6530

00000000000064da         mov        rsi, rbp
00000000000064dd         mov        rdi, rax
00000000000064e0         mov        rbx, rax
00000000000064e3         call       fread_file                                  ; fread_file
00000000000064e8         mov        rbp, rax
00000000000064eb         call       j___errno_location                          ; __errno_location
00000000000064f0         mov        rdi, rbx
00000000000064f3         mov        r12, rax
00000000000064f6         mov        r13d, dword [rax]
00000000000064f9         call       rpl_fclose                                  ; rpl_fclose
00000000000064fe         test       eax, eax
0000000000006500         jne        loc_6510

                     loc_6502:
0000000000006502         add        rsp, 0x8                                    ; CODE XREF=internal_read_file+103, internal_read_file+114
0000000000006506         mov        rax, rbp
0000000000006509         pop        rbx
000000000000650a         pop        rbp
000000000000650b         pop        r12
000000000000650d         pop        r13
000000000000650f         ret
                        ; endp

                     loc_6510:
0000000000006510         test       rbp, rbp                                    ; CODE XREF=internal_read_file+64
0000000000006513         je         loc_6521

0000000000006515         mov        rdi, rbp
0000000000006518         mov        r13d, dword [r12]
000000000000651c         call       sub_1dd0                                    ; sub_1dd0

                     loc_6521:
0000000000006521         mov        dword [r12], r13d                           ; CODE XREF=internal_read_file+83
0000000000006525         xor        ebp, ebp
0000000000006527         jmp        loc_6502
0000000000006529         align      16

                     loc_6530:
0000000000006530         xor        ebp, ebp                                    ; CODE XREF=internal_read_file+24
0000000000006532         jmp        loc_6502
0000000000006534         align      64                                          ; End of unwind block (FDE at 0xb1cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     read_file:
0000000000006540         lea        rdx, qword [aSReadError+13]                 ; Begin of unwind block (FDE at 0xb208), 0x9ca5
0000000000006547         jmp        internal_read_file                          ; internal_read_file
                        ; endp
000000000000654c         align      16                                          ; End of unwind block (FDE at 0xb208)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     read_binary_file:
0000000000006550         lea        rdx, qword [aDevurandom+13]                 ; Begin of unwind block (FDE at 0xb21c), 0x9cb4
0000000000006557         jmp        internal_read_file                          ; internal_read_file
                        ; endp
000000000000655c         align      32                                          ; End of unwind block (FDE at 0xb21c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
0000000000006560         push       r15                                         ; Begin of unwind block (FDE at 0xb234), CODE XREF=j_version_etc_arn, version_etc_va+75, version_etc+161
0000000000006562         push       r14
0000000000006564         push       r13
0000000000006566         push       r12
0000000000006568         mov        r12, r9
000000000000656b         push       rbp
000000000000656c         push       rbx
000000000000656d         mov        rbp, rdi
0000000000006570         mov        rbx, r8
0000000000006573         sub        rsp, 0x28
0000000000006577         test       rsi, rsi
000000000000657a         je         loc_6698

0000000000006580         mov        r8, rdx
0000000000006583         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
000000000000658a         mov        r9, rcx
000000000000658d         xor        eax, eax
000000000000658f         mov        rcx, rsi
0000000000006592         mov        esi, 0x1
0000000000006597         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_659c:
000000000000659c         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0x9cca, CODE XREF=version_etc_arn+337
00000000000065a3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000065a5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000065aa         call       j_dcgettext                                 ; dcgettext
00000000000065af         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
00000000000065b6         mov        rcx, rax
00000000000065b9         mov        r8d, 0x7e3
00000000000065bf         mov        esi, 0x1
00000000000065c4         mov        rdi, rbp
00000000000065c7         xor        eax, eax
00000000000065c9         call       j___fprintf_chk                             ; __fprintf_chk
00000000000065ce         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
00000000000065d5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000065d7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000065dc         call       j_dcgettext                                 ; dcgettext
00000000000065e1         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
00000000000065e4         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000065e7         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000065ec         cmp        r12, 0x9
00000000000065f0         ja         loc_6930

00000000000065f6         lea        rdx, qword [switch_table_9fac]              ; switch_table_9fac
00000000000065fd         movsxd     rax, dword [rdx+r12*4]
0000000000006601         add        rax, rdx
0000000000006604         jmp        rax                                         ; switch statement using table at 0x9fac, with 10 cases, 0x6610,0x6686,0x66c0,0x6718,0x6758,0x67a0,0x67f0,0x6848,0x6878,0x68e0
0000000000006606         align      16

                     loc_6610:
0000000000006610         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
0000000000006614         mov        rax, qword [rbx+0x10]
0000000000006618         lea        rsi, qword [aWrittenBySSSns_9ec0]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
000000000000661f         mov        r8, qword [rbx+8]
0000000000006623         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006628         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000662a         mov        r13, qword [rbx+0x30]
000000000000662e         mov        r12, qword [rbx+0x28]
0000000000006632         mov        qword [rsp+0x58+var_48], r9
0000000000006637         mov        r15, qword [rbx+0x20]
000000000000663b         mov        r14, qword [rbx+0x18]
000000000000663f         mov        qword [rsp+0x58+var_58], rax
0000000000006643         mov        qword [rsp+0x58+var_50], r8
0000000000006648         mov        rbx, qword [rbx]
000000000000664b         call       j_dcgettext                                 ; dcgettext
0000000000006650         sub        rsp, 0x8

                     loc_6654:
0000000000006654         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000006659         mov        rdx, rax
000000000000665c         mov        rcx, rbx
000000000000665f         mov        esi, 0x1
0000000000006664         mov        rdi, rbp
0000000000006667         xor        eax, eax
0000000000006669         push       r9
000000000000666b         push       r13
000000000000666d         push       r12
000000000000666f         push       r15
0000000000006671         push       r14
0000000000006673         mov        r9, qword [rsp+0x88+var_58]
0000000000006678         mov        r8, qword [rsp+0x88+var_50]
000000000000667d         call       j___fprintf_chk                             ; __fprintf_chk
0000000000006682         add        rsp, 0x30

                     loc_6686:
0000000000006686         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
000000000000668a         pop        rbx
000000000000668b         pop        rbp
000000000000668c         pop        r12
000000000000668e         pop        r13
0000000000006690         pop        r14
0000000000006692         pop        r15
0000000000006694         ret
                        ; endp
0000000000006695         align      8

                     loc_6698:
0000000000006698         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
000000000000669b         mov        rcx, rdx
000000000000669e         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
00000000000066a5         mov        esi, 0x1
00000000000066aa         xor        eax, eax
00000000000066ac         call       j___fprintf_chk                             ; __fprintf_chk
00000000000066b1         jmp        loc_659c
00000000000066b6         align      64

                     loc_66c0:
00000000000066c0         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
00000000000066c4         mov        r9, qword [rbx+0x38]
00000000000066c8         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
00000000000066cf         mov        rax, qword [rbx+0x10]
00000000000066d3         mov        r8, qword [rbx+8]
00000000000066d7         mov        edx, 0x5
00000000000066dc         mov        r13, qword [rbx+0x30]
00000000000066e0         mov        r12, qword [rbx+0x28]
00000000000066e4         mov        r15, qword [rbx+0x20]
00000000000066e8         mov        r14, qword [rbx+0x18]
00000000000066ec         mov        rbx, qword [rbx]
00000000000066ef         mov        qword [rsp+0x58+var_40], r10
00000000000066f4         mov        qword [rsp+0x58+var_48], r9
00000000000066f9         mov        qword [rsp+0x58+var_58], rax
00000000000066fd         mov        qword [rsp+0x58+var_50], r8

                     loc_6702:
0000000000006702         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
0000000000006704         call       j_dcgettext                                 ; dcgettext
0000000000006709         mov        r10, qword [rsp+0x58+var_40]
000000000000670e         push       r10
0000000000006710         jmp        loc_6654
0000000000006715         align      8

                     loc_6718:
0000000000006718         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
000000000000671b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
0000000000006722         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006727         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006729         call       j_dcgettext                                 ; dcgettext
000000000000672e         add        rsp, 0x28
0000000000006732         mov        rcx, rbx
0000000000006735         mov        rdi, rbp
0000000000006738         pop        rbx
0000000000006739         pop        rbp
000000000000673a         pop        r12
000000000000673c         pop        r13
000000000000673e         pop        r14
0000000000006740         pop        r15
0000000000006742         mov        rdx, rax
0000000000006745         mov        esi, 0x1
000000000000674a         xor        eax, eax
000000000000674c         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000006751         align      8

                     loc_6758:
0000000000006758         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
000000000000675c         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
0000000000006763         mov        rbx, qword [rbx]
0000000000006766         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000676b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000676d         call       j_dcgettext                                 ; dcgettext
0000000000006772         add        rsp, 0x28
0000000000006776         mov        r8, r12
0000000000006779         mov        rcx, rbx
000000000000677c         mov        rdi, rbp
000000000000677f         mov        rdx, rax
0000000000006782         mov        esi, 0x1
0000000000006787         pop        rbx
0000000000006788         pop        rbp
0000000000006789         pop        r12
000000000000678b         pop        r13
000000000000678d         pop        r14
000000000000678f         pop        r15
0000000000006791         xor        eax, eax
0000000000006793         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000006798         align      32

                     loc_67a0:
00000000000067a0         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
00000000000067a4         mov        r12, qword [rbx+8]
00000000000067a8         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
00000000000067af         mov        rbx, qword [rbx]
00000000000067b2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000067b7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000067b9         call       j_dcgettext                                 ; dcgettext
00000000000067be         add        rsp, 0x28
00000000000067c2         mov        r9, r13
00000000000067c5         mov        r8, r12
00000000000067c8         mov        rcx, rbx
00000000000067cb         mov        rdi, rbp
00000000000067ce         mov        rdx, rax
00000000000067d1         pop        rbx
00000000000067d2         pop        rbp
00000000000067d3         pop        r12
00000000000067d5         pop        r13
00000000000067d7         pop        r14
00000000000067d9         pop        r15
00000000000067db         mov        esi, 0x1
00000000000067e0         xor        eax, eax
00000000000067e2         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
00000000000067e7         align      16

                     loc_67f0:
00000000000067f0         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
00000000000067f7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000067fc         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000067fe         mov        r14, qword [rbx+0x18]
0000000000006802         mov        r13, qword [rbx+0x10]
0000000000006806         mov        r12, qword [rbx+8]
000000000000680a         mov        rbx, qword [rbx]
000000000000680d         call       j_dcgettext                                 ; dcgettext
0000000000006812         sub        rsp, 0x8

                     loc_6816:
0000000000006816         push       r14                                         ; CODE XREF=version_etc_arn+784
0000000000006818         mov        rdx, rax
000000000000681b         mov        r9, r13
000000000000681e         mov        r8, r12
0000000000006821         mov        rcx, rbx
0000000000006824         mov        rdi, rbp
0000000000006827         mov        esi, 0x1
000000000000682c         xor        eax, eax
000000000000682e         call       j___fprintf_chk                             ; __fprintf_chk
0000000000006833         pop        rax
0000000000006834         pop        rdx
0000000000006835         add        rsp, 0x28
0000000000006839         pop        rbx
000000000000683a         pop        rbp
000000000000683b         pop        r12
000000000000683d         pop        r13
000000000000683f         pop        r14
0000000000006841         pop        r15
0000000000006843         ret
                        ; endp
0000000000006844         align      8

                     loc_6848:
0000000000006848         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
000000000000684c         lea        rsi, qword [aWrittenBySSSns_9e40]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
0000000000006853         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006858         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000685a         mov        r14, qword [rbx+0x18]
000000000000685e         mov        r13, qword [rbx+0x10]
0000000000006862         mov        r12, qword [rbx+8]
0000000000006866         mov        rbx, qword [rbx]
0000000000006869         call       j_dcgettext                                 ; dcgettext
000000000000686e         push       r15
0000000000006870         jmp        loc_6816
0000000000006872         align      8

                     loc_6878:
0000000000006878         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
000000000000687c         mov        r12, qword [rbx+0x28]
0000000000006880         lea        rsi, qword [aWrittenBySSSns_9e68]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
0000000000006887         mov        r15, qword [rbx+0x20]
000000000000688b         mov        r14, qword [rbx+0x18]
000000000000688f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006894         mov        r13, qword [rbx+0x10]
0000000000006898         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000689a         mov        rbx, qword [rbx]
000000000000689d         mov        qword [rsp+0x58+var_58], r8
00000000000068a1         call       j_dcgettext                                 ; dcgettext
00000000000068a6         sub        rsp, 0x8
00000000000068aa         mov        r9, r13
00000000000068ad         push       r12
00000000000068af         push       r15
00000000000068b1         push       r14

                     loc_68b3:
00000000000068b3         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
00000000000068b8         mov        rcx, rbx
00000000000068bb         mov        rdx, rax
00000000000068be         mov        rdi, rbp
00000000000068c1         mov        esi, 0x1
00000000000068c6         xor        eax, eax
00000000000068c8         call       j___fprintf_chk                             ; __fprintf_chk
00000000000068cd         add        rsp, 0x20
00000000000068d1         add        rsp, 0x28
00000000000068d5         pop        rbx
00000000000068d6         pop        rbp
00000000000068d7         pop        r12
00000000000068d9         pop        r13
00000000000068db         pop        r14
00000000000068dd         pop        r15
00000000000068df         ret
                        ; endp

                     loc_68e0:
00000000000068e0         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
00000000000068e4         mov        r13, qword [rbx+0x30]
00000000000068e8         lea        rsi, qword [aWrittenBySSSns_9e90]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
00000000000068ef         mov        r12, qword [rbx+0x28]
00000000000068f3         mov        r15, qword [rbx+0x20]
00000000000068f7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000068fc         mov        r14, qword [rbx+0x18]
0000000000006900         mov        r8, qword [rbx+8]
0000000000006904         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006906         mov        qword [rsp+0x58+var_50], r9
000000000000690b         mov        rbx, qword [rbx]
000000000000690e         mov        qword [rsp+0x58+var_58], r8
0000000000006912         call       j_dcgettext                                 ; dcgettext
0000000000006917         push       r13
0000000000006919         push       r12
000000000000691b         push       r15
000000000000691d         push       r14
000000000000691f         mov        r9, qword [rsp+0x78+var_50]
0000000000006924         jmp        loc_68b3
0000000000006926         align      16

                     loc_6930:
0000000000006930         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
0000000000006934         mov        r9, qword [rbx+0x38]
0000000000006938         mov        edx, 0x5
000000000000693d         mov        rax, qword [rbx+0x10]
0000000000006941         mov        r8, qword [rbx+8]
0000000000006945         lea        rsi, qword [aWrittenBySSSns_9f28]           ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
000000000000694c         mov        r13, qword [rbx+0x30]
0000000000006950         mov        r12, qword [rbx+0x28]
0000000000006954         mov        r15, qword [rbx+0x20]
0000000000006958         mov        r14, qword [rbx+0x18]
000000000000695c         mov        qword [rsp+0x58+var_40], r10
0000000000006961         mov        qword [rsp+0x58+var_48], r9
0000000000006966         mov        qword [rsp+0x58+var_58], rax
000000000000696a         mov        qword [rsp+0x58+var_50], r8
000000000000696f         mov        rbx, qword [rbx]
0000000000006972         jmp        loc_6702
0000000000006977         align      128                                         ; End of unwind block (FDE at 0xb234)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
0000000000006980         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0xb348)
0000000000006983         cmp        qword [r8], 0x0
0000000000006987         je         j_version_etc_arn                           ; version_etc_arn

0000000000006989         nop        dword [rax]

                     loc_6990:
0000000000006990         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
0000000000006994         cmp        qword [r8+r9*8], 0x0
0000000000006999         jne        loc_6990

                     j_version_etc_arn:        // version_etc_arn
000000000000699b         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
00000000000069a0         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0xb348), Begin of unwind block (FDE at 0xb35c)
00000000000069a4         mov        r10, r8
00000000000069a7         xor        r9d, r9d
00000000000069aa         mov        rax, qword [fs:0x28]
00000000000069b3         mov        qword [rsp+0x68+var_10], rax
00000000000069b8         xor        eax, eax
00000000000069ba         mov        r8, rsp
00000000000069bd         nop        dword [rax]

                     loc_69c0:
00000000000069c0         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
00000000000069c3         cmp        eax, 0x2f
00000000000069c6         ja         loc_6a0a

00000000000069c8         mov        r11d, eax
00000000000069cb         add        r11, qword [r10+0x10]
00000000000069cf         add        eax, 0x8
00000000000069d2         mov        dword [r10], eax

                     loc_69d5:
00000000000069d5         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
00000000000069d8         test       rax, rax
00000000000069db         mov        qword [r8+r9*8], rax
00000000000069df         je         loc_69eb

00000000000069e1         add        r9, 0x1
00000000000069e5         cmp        r9, 0xa
00000000000069e9         jne        loc_69c0

                     loc_69eb:
00000000000069eb         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
00000000000069f0         mov        rax, qword [rsp+0x68+var_10]
00000000000069f5         xor        rax, qword [fs:0x28]
00000000000069fe         jne        loc_6a05

0000000000006a00         add        rsp, 0x68
0000000000006a04         ret
                        ; endp

                     loc_6a05:
0000000000006a05         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_6a0a:
0000000000006a0a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
0000000000006a0e         lea        rax, qword [r11+8]
0000000000006a12         mov        qword [r10+8], rax
0000000000006a16         jmp        loc_69d5
0000000000006a18         align      32                                          ; End of unwind block (FDE at 0xb35c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
0000000000006a20         push       rbp                                         ; Begin of unwind block (FDE at 0xb378), CODE XREF=main+763
0000000000006a21         push       rbx
0000000000006a22         mov        r10d, 0x20
0000000000006a28         xor        r11d, r11d
0000000000006a2b         sub        rsp, 0xb8
0000000000006a32         mov        rax, qword [fs:0x28]
0000000000006a3b         mov        qword [rsp+0xc8+var_50], rax
0000000000006a40         xor        eax, eax
0000000000006a42         lea        rax, qword [rsp+0xc8+arg_0]
0000000000006a4a         mov        qword [rsp+0xc8+var_28], r8
0000000000006a52         lea        rbx, qword [rsp+0xc8+arg_0]
0000000000006a5a         lea        r8, qword [rsp+0xc8+var_A8]
0000000000006a5f         mov        qword [rsp+0xc8+var_20], r9
0000000000006a67         mov        dword [rsp+0xc8+var_C0], 0x20
0000000000006a6f         mov        qword [rsp+0xc8+var_B8], rax
0000000000006a74         lea        rax, qword [rsp+0xc8+var_48]
0000000000006a7c         xor        r9d, r9d
0000000000006a7f         mov        qword [rsp+0xc8+var_B0], rax
0000000000006a84         mov        rbp, rax
0000000000006a87         nop        word [rax+rax]

                     loc_6a90:
0000000000006a90         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
0000000000006a94         ja         loc_6aec

0000000000006a96         mov        eax, r10d
0000000000006a99         mov        r11d, 0x1
0000000000006a9f         add        r10d, 0x8
0000000000006aa3         add        rax, rbp

                     loc_6aa6:
0000000000006aa6         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
0000000000006aa9         test       rax, rax
0000000000006aac         mov        qword [r8+r9*8], rax
0000000000006ab0         je         loc_6abc

0000000000006ab2         add        r9, 0x1
0000000000006ab6         cmp        r9, 0xa
0000000000006aba         jne        loc_6a90

                     loc_6abc:
0000000000006abc         test       r11b, r11b                                  ; CODE XREF=version_etc+144
0000000000006abf         jne        loc_6ae5

                     loc_6ac1:
0000000000006ac1         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
0000000000006ac6         mov        rax, qword [rsp+0xc8+var_50]
0000000000006acb         xor        rax, qword [fs:0x28]
0000000000006ad4         jne        loc_6ae0

0000000000006ad6         add        rsp, 0xb8
0000000000006add         pop        rbx
0000000000006ade         pop        rbp
0000000000006adf         ret
                        ; endp

                     loc_6ae0:
0000000000006ae0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_6ae5:
0000000000006ae5         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
0000000000006aea         jmp        loc_6ac1

                     loc_6aec:
0000000000006aec         mov        rax, rbx                                    ; CODE XREF=version_etc+116
0000000000006aef         add        rbx, 0x8
0000000000006af3         jmp        loc_6aa6
0000000000006af5         align      256                                         ; End of unwind block (FDE at 0xb378)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
0000000000006b00         push       rbx                                         ; Begin of unwind block (FDE at 0xb3a4)
0000000000006b01         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
0000000000006b08         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006b0d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006b0f         call       j_dcgettext                                 ; dcgettext
0000000000006b14         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
0000000000006b1b         mov        rsi, rax
0000000000006b1e         mov        edi, 0x1
0000000000006b23         xor        eax, eax
0000000000006b25         call       j___printf_chk                              ; __printf_chk
0000000000006b2a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
0000000000006b31         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006b36         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006b38         call       j_dcgettext                                 ; dcgettext
0000000000006b3d         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000006b44         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x917f
0000000000006b4b         mov        rsi, rax
0000000000006b4e         mov        edi, 0x1
0000000000006b53         xor        eax, eax
0000000000006b55         call       j___printf_chk                              ; __printf_chk
0000000000006b5a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000006b61         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
0000000000006b68         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006b6a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006b6f         call       j_dcgettext                                 ; dcgettext
0000000000006b74         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000006b77         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000006b7a         pop        rbx
0000000000006b7b         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
0000000000006b80         push       rbx                                         ; End of unwind block (FDE at 0xb3a4), Begin of unwind block (FDE at 0xb3c4), CODE XREF=main+1714, main+2463, quotearg_n_options+295, quotearg_alloc_mem+129, randint_new+9, randint_all_new+19, randperm_new+59, randperm_new+242, randperm_new+309, randperm_new+725, randperm_new+762
0000000000006b81         mov        rbx, rdi
0000000000006b84         call       j_malloc                                    ; malloc
0000000000006b89         test       rax, rax
0000000000006b8c         jne        loc_6b93

0000000000006b8e         test       rbx, rbx
0000000000006b91         jne        loc_6b95

                     loc_6b93:
0000000000006b93         pop        rbx                                         ; CODE XREF=xmalloc+12
0000000000006b94         ret
                        ; endp

                     loc_6b95:
0000000000006b95         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6b9a:
0000000000006b9a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xb3c4)
                     xnmalloc:
0000000000006ba0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xb3e0)
0000000000006ba3         mul        rsi
0000000000006ba6         mov        rdi, rax
0000000000006ba9         seto       al
0000000000006bac         test       rdi, rdi
0000000000006baf         js         loc_6bbb

0000000000006bb1         movzx      eax, al
0000000000006bb4         test       rax, rax
0000000000006bb7         jne        loc_6bbb

0000000000006bb9         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_6bbb:
0000000000006bbb         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
0000000000006bbf         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6bc4:
0000000000006bc4         nop                                                    ; End of unwind block (FDE at 0xb3e0)
0000000000006bc6         nop        word [cs:rax+rax]
                     xcharalloc:
0000000000006bd0         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0xb3f4)
                        ; endp
0000000000006bd2         align      32                                          ; End of unwind block (FDE at 0xb3f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
0000000000006be0         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0xb408), CODE XREF=main+1309, quotearg_n_options+110, quotearg_n_options+386, randperm_new+693, xnrealloc+25, x2nrealloc+52, x2realloc+40
0000000000006be3         push       rbx
0000000000006be4         mov        rbx, rsi
0000000000006be7         jne        loc_6bee

0000000000006be9         test       rdi, rdi
0000000000006bec         jne        loc_6c08

                     loc_6bee:
0000000000006bee         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
0000000000006bf1         call       j_realloc                                   ; realloc
0000000000006bf6         test       rax, rax
0000000000006bf9         jne        loc_6c00

0000000000006bfb         test       rbx, rbx
0000000000006bfe         jne        loc_6c11

                     loc_6c00:
0000000000006c00         pop        rbx                                         ; CODE XREF=xrealloc+25
0000000000006c01         ret
                        ; endp
0000000000006c02         align      8

                     loc_6c08:
0000000000006c08         call       sub_1dd0                                    ; sub_1dd0, CODE XREF=xrealloc+12
0000000000006c0d         xor        eax, eax
0000000000006c0f         pop        rbx
0000000000006c10         ret
                        ; endp

                     loc_6c11:
0000000000006c11         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6c16:
0000000000006c16         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0xb408)
                     xnrealloc:
0000000000006c20         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0xb42c)
0000000000006c23         mul        rdx
0000000000006c26         mov        rsi, rax
0000000000006c29         seto       al
0000000000006c2c         test       rsi, rsi
0000000000006c2f         js         loc_6c3b

0000000000006c31         movzx      eax, al
0000000000006c34         test       rax, rax
0000000000006c37         jne        loc_6c3b

0000000000006c39         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_6c3b:
0000000000006c3b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
0000000000006c3f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6c44:
0000000000006c44         nop                                                    ; End of unwind block (FDE at 0xb42c)
0000000000006c46         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000006c50         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xb440)
0000000000006c53         mov        r9, rdx
0000000000006c56         mov        rcx, qword [rsi]
0000000000006c59         je         loc_6c90

0000000000006c5b         xor        edx, edx
0000000000006c5d         movabs     rax, 0x5555555555555554
0000000000006c67         div        r9
0000000000006c6a         cmp        rax, rcx
0000000000006c6d         jbe        loc_6cab

0000000000006c6f         mov        rax, rcx
0000000000006c72         shr        rax, 0x1
0000000000006c75         lea        rcx, qword [rax+rcx+1]

                     loc_6c7a:
0000000000006c7a         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
0000000000006c7d         imul       rcx, r9                                     ; argument #4 for method xrealloc
0000000000006c81         mov        rsi, rcx                                    ; argument #2 for method xrealloc
0000000000006c84         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000006c89         align      16

                     loc_6c90:
0000000000006c90         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
0000000000006c93         je         loc_6cb8

                     loc_6c95:
0000000000006c95         mov        rax, rcx                                    ; CODE XREF=sub_6cb4+28
0000000000006c98         mul        r9
0000000000006c9b         seto       dl
0000000000006c9e         test       rax, rax
0000000000006ca1         movzx      edx, dl
0000000000006ca4         js         loc_6cab

0000000000006ca6         test       rdx, rdx
0000000000006ca9         je         loc_6c7a

                     loc_6cab:
0000000000006cab         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
0000000000006caf         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6cb4:
0000000000006cb4         nop        dword [rax]
                        ; endp

                     loc_6cb8:
0000000000006cb8         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
0000000000006cba         mov        eax, 0x80
0000000000006cbf         xor        r8d, r8d
0000000000006cc2         div        r9
0000000000006cc5         test       rax, rax
0000000000006cc8         sete       r8b
0000000000006ccc         lea        rcx, qword [r8+rax]
0000000000006cd0         jmp        loc_6c95
0000000000006cd2         align      32                                          ; End of unwind block (FDE at 0xb440)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
0000000000006ce0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xb458), CODE XREF=readlinebuffer_delim+108
0000000000006ce3         mov        rax, qword [rsi]
0000000000006ce6         je         loc_6d10

0000000000006ce8         movabs     rdx, 0x5555555555555553
0000000000006cf2         cmp        rax, rdx
0000000000006cf5         ja         loc_6d21

0000000000006cf7         mov        rdx, rax
0000000000006cfa         shr        rdx, 0x1
0000000000006cfd         lea        rax, qword [rdx+rax+1]

                     loc_6d02:
0000000000006d02         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000006d05         mov        rsi, rax                                    ; argument #2 for method xrealloc
0000000000006d08         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000006d0d         align      16

                     loc_6d10:
0000000000006d10         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000006d13         mov        edx, 0x80
0000000000006d18         cmove      rax, rdx
0000000000006d1c         test       rax, rax
0000000000006d1f         jns        loc_6d02

                     loc_6d21:
0000000000006d21         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000006d25         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6d2a:
0000000000006d2a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xb458)
                     xzalloc:
0000000000006d30         push       rbx                                         ; Begin of unwind block (FDE at 0xb470)
0000000000006d31         mov        rbx, rdi
0000000000006d34         call       xmalloc                                     ; xmalloc
0000000000006d39         mov        rdx, rbx                                    ; argument "__n" for method j_memset
0000000000006d3c         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000006d3e         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000006d41         pop        rbx
0000000000006d42         jmp        j_memset                                    ; memset
                        ; endp
0000000000006d47         align      16                                          ; End of unwind block (FDE at 0xb470)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000006d50         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xb48c), CODE XREF=main+1182
0000000000006d53         sub        rsp, 0x8
0000000000006d57         mul        rsi
0000000000006d5a         seto       dl
0000000000006d5d         test       rax, rax
0000000000006d60         js         loc_6d79

0000000000006d62         movzx      edx, dl
0000000000006d65         test       rdx, rdx
0000000000006d68         jne        loc_6d79

0000000000006d6a         call       j_calloc                                    ; calloc
0000000000006d6f         test       rax, rax
0000000000006d72         je         loc_6d79

0000000000006d74         add        rsp, 0x8
0000000000006d78         ret
                        ; endp

                     loc_6d79:
0000000000006d79         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6d7e:
0000000000006d7e         nop                                                    ; End of unwind block (FDE at 0xb48c)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmemdup:
0000000000006d80         push       rbp                                         ; Begin of unwind block (FDE at 0xb4a8), CODE XREF=clone_quoting_options+40
0000000000006d81         push       rbx
0000000000006d82         mov        rbp, rdi
0000000000006d85         mov        rdi, rsi
0000000000006d88         mov        rbx, rsi
0000000000006d8b         sub        rsp, 0x8
0000000000006d8f         call       xmalloc                                     ; xmalloc
0000000000006d94         add        rsp, 0x8
0000000000006d98         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000006d9b         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
0000000000006d9e         pop        rbx
0000000000006d9f         pop        rbp
0000000000006da0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006da3         jmp        j_memcpy                                    ; memcpy
                        ; endp
0000000000006da8         align      16                                          ; End of unwind block (FDE at 0xb4a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
0000000000006db0         push       rbx                                         ; Begin of unwind block (FDE at 0xb4d0)
0000000000006db1         mov        rbx, rdi
0000000000006db4         call       j_strlen                                    ; strlen
0000000000006db9         mov        rdi, rbx
0000000000006dbc         lea        rsi, qword [rax+1]
0000000000006dc0         pop        rbx
0000000000006dc1         jmp        xmemdup                                     ; xmemdup
                        ; endp
0000000000006dc3         align      16                                          ; End of unwind block (FDE at 0xb4d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
0000000000006dd0         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0xb4ec), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=main+3104, quotearg_n_options+422, randperm_new+812, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41
0000000000006dd7         sub        rsp, 0x8
0000000000006ddb         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006de0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006de2         call       j_dcgettext                                 ; dcgettext
0000000000006de7         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
0000000000006ded         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x91fa
0000000000006df4         mov        rcx, rax
0000000000006df7         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000006df9         xor        eax, eax
0000000000006dfb         call       j_error                                     ; error
0000000000006e00         call       j_abort                                     ; abort
                        ; endp
0000000000006e05         align      16                                          ; End of unwind block (FDE at 0xb4ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     xnumtoumax:
0000000000006e10         push       r15                                         ; Begin of unwind block (FDE at 0xb504), CODE XREF=xdectoumax+23
0000000000006e12         push       r14
0000000000006e14         mov        r15, rcx
0000000000006e17         push       r13
0000000000006e19         push       r12
0000000000006e1b         mov        r14, rdx
0000000000006e1e         push       rbp
0000000000006e1f         push       rbx
0000000000006e20         mov        edx, esi
0000000000006e22         xor        esi, esi
0000000000006e24         mov        r12, rdi
0000000000006e27         mov        r13, r9
0000000000006e2a         sub        rsp, 0x18
0000000000006e2e         mov        rcx, rsp
0000000000006e31         mov        ebx, dword [rsp+0x48+arg_0]
0000000000006e35         mov        rax, qword [fs:0x28]
0000000000006e3e         mov        qword [rsp+0x48+var_40], rax
0000000000006e43         xor        eax, eax
0000000000006e45         call       xstrtoumax                                  ; xstrtoumax
0000000000006e4a         test       eax, eax
0000000000006e4c         jne        loc_6ee0

0000000000006e52         mov        rbp, qword [rsp+0x48+var_48]
0000000000006e56         cmp        rbp, r14
0000000000006e59         jb         loc_6e60

0000000000006e5b         cmp        rbp, r15
0000000000006e5e         jbe        loc_6eb4

                     loc_6e60:
0000000000006e60         call       j___errno_location                          ; __errno_location, CODE XREF=xnumtoumax+73
0000000000006e65         cmp        rbp, 0x40000000
0000000000006e6c         mov        r14, rax
0000000000006e6f         sbb        eax, eax
0000000000006e71         and        eax, 0xffffffd7
0000000000006e74         add        eax, 0x4b
0000000000006e77         mov        dword [r14], eax

                     loc_6e7a:
0000000000006e7a         mov        rdi, r12                                    ; CODE XREF=xnumtoumax+226, xnumtoumax+234, xnumtoumax+246
0000000000006e7d         call       quote                                       ; quote
0000000000006e82         mov        esi, dword [r14]
0000000000006e85         mov        r8, rax
0000000000006e88         mov        eax, 0x0
0000000000006e8d         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000006e94         mov        rcx, r13
0000000000006e97         cmp        esi, 0x16
0000000000006e9a         cmove      esi, eax                                    ; argument "__errnum" for method j_error
0000000000006e9d         test       ebx, ebx
0000000000006e9f         mov        eax, 0x1
0000000000006ea4         cmove      ebx, eax
0000000000006ea7         xor        eax, eax
0000000000006ea9         mov        edi, ebx                                    ; argument "__status" for method j_error
0000000000006eab         call       j_error                                     ; error
0000000000006eb0         mov        rbp, qword [rsp+0x48+var_48]

                     loc_6eb4:
0000000000006eb4         mov        rdx, qword [rsp+0x48+var_40]                ; CODE XREF=xnumtoumax+78
0000000000006eb9         xor        rdx, qword [fs:0x28]
0000000000006ec2         mov        rax, rbp
0000000000006ec5         jne        loc_6f0b

0000000000006ec7         add        rsp, 0x18
0000000000006ecb         pop        rbx
0000000000006ecc         pop        rbp
0000000000006ecd         pop        r12
0000000000006ecf         pop        r13
0000000000006ed1         pop        r14
0000000000006ed3         pop        r15
0000000000006ed5         ret
                        ; endp
0000000000006ed6         align      32

                     loc_6ee0:
0000000000006ee0         mov        ebp, eax                                    ; CODE XREF=xnumtoumax+60
0000000000006ee2         call       j___errno_location                          ; __errno_location
0000000000006ee7         cmp        ebp, 0x1
0000000000006eea         mov        r14, rax
0000000000006eed         je         loc_6f00

0000000000006eef         cmp        ebp, 0x3
0000000000006ef2         jne        loc_6e7a

0000000000006ef4         mov        dword [rax], 0x0
0000000000006efa         jmp        loc_6e7a
0000000000006eff         align      256

                     loc_6f00:
0000000000006f00         mov        dword [rax], 0x4b                           ; CODE XREF=xnumtoumax+221
0000000000006f06         jmp        loc_6e7a

                     loc_6f0b:
0000000000006f0b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xnumtoumax+181
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xdectoumax:
0000000000006f10         sub        rsp, 0x10                                   ; End of unwind block (FDE at 0xb504), Begin of unwind block (FDE at 0xb550), CODE XREF=main+432, main+496, main+879
0000000000006f14         push       r9
0000000000006f16         mov        r9, r8
0000000000006f19         mov        r8, rcx
0000000000006f1c         mov        rcx, rdx
0000000000006f1f         mov        rdx, rsi
0000000000006f22         mov        esi, 0xa
0000000000006f27         call       xnumtoumax                                  ; xnumtoumax
0000000000006f2c         add        rsp, 0x18
0000000000006f30         ret
                        ; endp
0000000000006f31         align      64                                          ; End of unwind block (FDE at 0xb550)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoul:
0000000000006f40         push       r15                                         ; Begin of unwind block (FDE at 0xb56c), CODE XREF=main+582
0000000000006f42         push       r14
0000000000006f44         push       r13
0000000000006f46         push       r12
0000000000006f48         push       rbp
0000000000006f49         push       rbx
0000000000006f4a         sub        rsp, 0x28
0000000000006f4e         mov        rax, qword [fs:0x28]
0000000000006f57         mov        qword [rsp+0x58+var_40], rax
0000000000006f5c         xor        eax, eax
0000000000006f5e         cmp        edx, 0x24
0000000000006f61         ja         loc_72c5

0000000000006f67         lea        rax, qword [rsp+0x58+var_48]
0000000000006f6c         mov        r15, rsi
0000000000006f6f         test       rsi, rsi
0000000000006f72         mov        rbp, rdi
0000000000006f75         mov        dword [rsp+0x58+var_50], edx
0000000000006f79         mov        r14, rcx
0000000000006f7c         mov        r13, r8
0000000000006f7f         cmove      r15, rax
0000000000006f83         call       j___errno_location                          ; __errno_location
0000000000006f88         mov        dword [rax], 0x0
0000000000006f8e         mov        r12, rax
0000000000006f91         movzx      ebx, byte [rbp]
0000000000006f95         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000006f9a         mov        edx, dword [rsp+0x58+var_50]
0000000000006f9e         mov        rsi, qword [rax]
0000000000006fa1         mov        rax, rbp
0000000000006fa4         jmp        loc_6fb7
0000000000006fa6         align      16

                     loc_6fb0:
0000000000006fb0         add        rax, 0x1                                    ; CODE XREF=xstrtoul+127
0000000000006fb4         movzx      ebx, byte [rax]

                     loc_6fb7:
0000000000006fb7         movzx      ecx, bl                                     ; CODE XREF=xstrtoul+100
0000000000006fba         test       byte [rsi+rcx*2+1], 0x20
0000000000006fbf         jne        loc_6fb0

0000000000006fc1         cmp        bl, 0x2d
0000000000006fc4         je         loc_7018

0000000000006fc6         mov        rsi, r15                                    ; argument "__endptr" for method j_strtoul
0000000000006fc9         mov        rdi, rbp                                    ; argument "__nptr" for method j_strtoul
0000000000006fcc         call       j_strtoul                                   ; strtoul
0000000000006fd1         mov        rcx, qword [r15]
0000000000006fd4         mov        rbx, rax
0000000000006fd7         cmp        rcx, rbp
0000000000006fda         je         loc_7008

0000000000006fdc         mov        eax, dword [r12]
0000000000006fe0         test       eax, eax
0000000000006fe2         je         loc_7048

0000000000006fe4         cmp        eax, 0x22
0000000000006fe7         mov        ebp, 0x1
0000000000006fec         jne        loc_7018

                     loc_6fee:
0000000000006fee         test       r13, r13                                    ; CODE XREF=xstrtoul+266
0000000000006ff1         je         loc_6ffc

0000000000006ff3         movzx      r12d, byte [rcx]
0000000000006ff7         test       r12b, r12b
0000000000006ffa         jne        loc_7077

                     loc_6ffc:
0000000000006ffc         mov        qword [r14], rbx                            ; CODE XREF=xstrtoul+177
0000000000006fff         jmp        loc_701d
0000000000007001         align      8

                     loc_7008:
0000000000007008         test       r13, r13                                    ; CODE XREF=xstrtoul+154
000000000000700b         mov        qword [rsp+0x58+var_50], rcx
0000000000007010         jne        loc_7050

0000000000007012         nop        word [rax+rax]

                     loc_7018:
0000000000007018         mov        ebp, 0x4                                    ; CODE XREF=xstrtoul+132, xstrtoul+172, xstrtoul+280, xstrtoul+309

                     loc_701d:
000000000000701d         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoul+191, xstrtoul+535, xstrtoul+546
0000000000007022         xor        rdi, qword [fs:0x28]
000000000000702b         mov        eax, ebp
000000000000702d         jne        loc_72c0

0000000000007033         add        rsp, 0x28
0000000000007037         pop        rbx
0000000000007038         pop        rbp
0000000000007039         pop        r12
000000000000703b         pop        r13
000000000000703d         pop        r14
000000000000703f         pop        r15
0000000000007041         ret
                        ; endp
0000000000007042         align      8

                     loc_7048:
0000000000007048         xor        ebp, ebp                                    ; CODE XREF=xstrtoul+162
000000000000704a         jmp        loc_6fee
000000000000704c         align      16

                     loc_7050:
0000000000007050         movzx      r12d, byte [rbp]                            ; CODE XREF=xstrtoul+208
0000000000007055         test       r12b, r12b
0000000000007058         je         loc_7018

000000000000705a         movsx      esi, r12b                                   ; argument "__c" for method j_strchr
000000000000705e         mov        rdi, r13                                    ; argument "__s" for method j_strchr
0000000000007061         xor        ebp, ebp
0000000000007063         call       j_strchr                                    ; strchr
0000000000007068         test       rax, rax
000000000000706b         mov        ebx, 0x1
0000000000007070         mov        rcx, qword [rsp+0x58+var_50]
0000000000007075         je         loc_7018

                     loc_7077:
0000000000007077         movsx      esi, r12b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoul+186
000000000000707b         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000707e         mov        qword [rsp+0x58+var_50], rcx
0000000000007083         call       j_strchr                                    ; strchr
0000000000007088         test       rax, rax
000000000000708b         mov        rcx, qword [rsp+0x58+var_50]
0000000000007090         je         loc_715c

0000000000007096         lea        eax, dword [r12-0x45]
000000000000709b         cmp        al, 0x2f
000000000000709d         ja         loc_70f0

000000000000709f         movabs     rdx, 0x814400308945
00000000000070a9         bt         rdx, rax
00000000000070ad         jae        loc_70f0

00000000000070af         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
00000000000070b4         mov        rdi, r13                                    ; argument "__s" for method j_strchr
00000000000070b7         mov        qword [rsp+0x58+var_50], rcx
00000000000070bc         call       j_strchr                                    ; strchr
00000000000070c1         test       rax, rax
00000000000070c4         mov        rcx, qword [rsp+0x58+var_50]
00000000000070c9         je         loc_70f0

00000000000070cb         movzx      eax, byte [rcx+1]
00000000000070cf         cmp        al, 0x44
00000000000070d1         je         loc_70df

00000000000070d3         cmp        al, 0x69
00000000000070d5         je         loc_72a8

00000000000070db         cmp        al, 0x42
00000000000070dd         jne        loc_70f0

                     loc_70df:
00000000000070df         mov        edi, 0x2                                    ; CODE XREF=xstrtoul+401
00000000000070e4         mov        esi, 0x3e8
00000000000070e9         jmp        loc_70fa
00000000000070eb         align      16

                     loc_70f0:
00000000000070f0         mov        edi, 0x1                                    ; CODE XREF=xstrtoul+349, xstrtoul+365, xstrtoul+393, xstrtoul+413
00000000000070f5         mov        esi, 0x400

                     loc_70fa:
00000000000070fa         sub        r12d, 0x42                                  ; CODE XREF=xstrtoul+425, xstrtoul+891
00000000000070fe         cmp        r12b, 0x35
0000000000007102         ja         loc_715c

0000000000007104         lea        rdx, qword [switch_table_a068]              ; switch_table_a068
000000000000710b         movzx      r12d, r12b
000000000000710f         movsxd     rax, dword [rdx+r12*4]
0000000000007113         add        rax, rdx
0000000000007116         jmp        rax                                         ; switch statement using table at 0xa068, with 54 cases, 0x7118,0x7140,0x715c,0x7167,0x717d,0x7194,0x71ba,0x71df,0x71ff,0x7220,0x7243,0x7266,0x727c

                     loc_7118:
0000000000007118         mov        rax, rbx                                    ; case 43, CODE XREF=xstrtoul+470
000000000000711b         mul        rsi
000000000000711e         jo         loc_7311

0000000000007124         xor        r8d, r8d

                     loc_7127:
0000000000007127         mul        rsi                                         ; CODE XREF=xstrtoul+846, xstrtoul+862, xstrtoul+987
000000000000712a         jo         loc_7302

0000000000007130         mov        rbx, rax

                     loc_7133:
0000000000007133         or         ebp, r8d                                    ; CODE XREF=xstrtoul+972
0000000000007136         nop        word [cs:rax+rax]

                     loc_7140:
0000000000007140         movsxd     rdi, edi                                    ; case 33, CODE XREF=xstrtoul+470, xstrtoul+571, xstrtoul+594, xstrtoul+632, xstrtoul+712, xstrtoul+727, xstrtoul+823
0000000000007143         mov        eax, ebp
0000000000007145         add        rcx, rdi
0000000000007148         or         eax, 0x2
000000000000714b         mov        qword [r15], rcx
000000000000714e         cmp        byte [rcx], 0x0
0000000000007151         mov        qword [r14], rbx
0000000000007154         cmovne     ebp, eax
0000000000007157         jmp        loc_701d

                     loc_715c:
000000000000715c         mov        qword [r14], rbx                            ; case 52, CODE XREF=xstrtoul+336, xstrtoul+450, xstrtoul+470
000000000000715f         or         ebp, 0x2
0000000000007162         jmp        loc_701d

                     loc_7167:
0000000000007167         mov        edx, 0x2                                    ; case 53, CODE XREF=xstrtoul+470
000000000000716c         mov        rax, rdx
000000000000716f         mul        rbx
0000000000007172         jo         loc_720e

0000000000007178         add        rbx, rbx
000000000000717b         jmp        loc_7140

                     loc_717d:
000000000000717d         mov        edx, 0x200                                  ; case 32, CODE XREF=xstrtoul+470
0000000000007182         mov        rax, rdx
0000000000007185         mul        rbx
0000000000007188         jo         loc_720e

000000000000718e         shl        rbx, 0x9
0000000000007192         jmp        loc_7140

                     loc_7194:
0000000000007194         mov        r8d, 0x7                                    ; case 24, CODE XREF=xstrtoul+470
000000000000719a         xor        r9d, r9d
000000000000719d         nop        dword [rax]

                     loc_71a0:
00000000000071a0         mov        rax, rbx                                    ; CODE XREF=xstrtoul+627
00000000000071a3         mul        rsi
00000000000071a6         mov        rbx, rax
00000000000071a9         jo         loc_733e

                     loc_71af:
00000000000071af         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+1032
00000000000071b3         jne        loc_71a0

                     loc_71b5:
00000000000071b5         or         ebp, r9d                                    ; CODE XREF=xstrtoul+669, xstrtoul+701, xstrtoul+766, xstrtoul+801
00000000000071b8         jmp        loc_7140

                     loc_71ba:
00000000000071ba         mov        r8d, 0x8                                    ; case 23, CODE XREF=xstrtoul+470
00000000000071c0         xor        r9d, r9d
00000000000071c3         nop        dword [rax+rax]

                     loc_71c8:
00000000000071c8         mov        rax, rbx                                    ; CODE XREF=xstrtoul+667
00000000000071cb         mul        rsi
00000000000071ce         mov        rbx, rax
00000000000071d1         jo         loc_7320

                     loc_71d7:
00000000000071d7         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+1002
00000000000071db         jne        loc_71c8

00000000000071dd         jmp        loc_71b5

                     loc_71df:
00000000000071df         mov        r8d, 0x4                                    ; case 50, CODE XREF=xstrtoul+470
00000000000071e5         xor        r9d, r9d

                     loc_71e8:
00000000000071e8         mov        rax, rbx                                    ; CODE XREF=xstrtoul+699
00000000000071eb         mul        rsi
00000000000071ee         mov        rbx, rax
00000000000071f1         jo         loc_72f3

                     loc_71f7:
00000000000071f7         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+957
00000000000071fb         jne        loc_71e8

00000000000071fd         jmp        loc_71b5

                     loc_71ff:
00000000000071ff         mov        rax, rbx                                    ; case 41, CODE XREF=xstrtoul+470
0000000000007202         mul        rsi
0000000000007205         mov        rbx, rax
0000000000007208         jno        loc_7140

                     loc_720e:
000000000000720e         mov        ebp, 0x1                                    ; CODE XREF=xstrtoul+562, xstrtoul+584, xstrtoul+817
0000000000007213         or         rbx, 0xffffffffffffffff
0000000000007217         jmp        loc_7140
000000000000721c         align      32

                     loc_7220:
0000000000007220         mov        r8d, 0x5                                    ; case 14, CODE XREF=xstrtoul+470
0000000000007226         xor        r9d, r9d

                     loc_7229:
0000000000007229         mov        rax, rbx                                    ; CODE XREF=xstrtoul+764
000000000000722c         mul        rsi
000000000000722f         mov        rbx, rax
0000000000007232         jo         loc_732f

                     loc_7238:
0000000000007238         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+1017
000000000000723c         jne        loc_7229

000000000000723e         jmp        loc_71b5

                     loc_7243:
0000000000007243         mov        r8d, 0x6                                    ; case 3, CODE XREF=xstrtoul+470
0000000000007249         xor        r9d, r9d

                     loc_724c:
000000000000724c         mov        rax, rbx                                    ; CODE XREF=xstrtoul+799
000000000000724f         mul        rsi
0000000000007252         mov        rbx, rax
0000000000007255         jo         loc_72e4

                     loc_725b:
000000000000725b         sub        r8d, 0x1                                    ; CODE XREF=xstrtoul+942
000000000000725f         jne        loc_724c

0000000000007261         jmp        loc_71b5

                     loc_7266:
0000000000007266         mov        edx, 0x400                                  ; case 0, CODE XREF=xstrtoul+470
000000000000726b         mov        rax, rdx
000000000000726e         mul        rbx
0000000000007271         jo         loc_720e

0000000000007273         shl        rbx, 0xa
0000000000007277         jmp        loc_7140

                     loc_727c:
000000000000727c         mov        rax, rbx                                    ; case 37, CODE XREF=xstrtoul+470
000000000000727f         mul        rsi
0000000000007282         jo         loc_734d

0000000000007288         xor        r8d, r8d

                     loc_728b:
000000000000728b         mul        rsi                                         ; CODE XREF=xstrtoul+1047
000000000000728e         jno        loc_7127

0000000000007294         mov        r8d, 0x1
000000000000729a         or         rax, 0xffffffffffffffff
000000000000729e         jmp        loc_7127
00000000000072a3         align      8

                     loc_72a8:
00000000000072a8         xor        edi, edi                                    ; CODE XREF=xstrtoul+405
00000000000072aa         cmp        byte [rcx+2], 0x42
00000000000072ae         mov        esi, 0x400
00000000000072b3         sete       dil
00000000000072b7         lea        edi, dword [rdi+rdi+1]
00000000000072bb         jmp        loc_70fa

                     loc_72c0:
00000000000072c0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoul+237
                        ; endp

                     loc_72c5:
00000000000072c5         lea        rcx, qword [__PRETTY_FUNCTION__.4162]       ; argument "__function" for method j___assert_fail, "xstrtoul", CODE XREF=xstrtoul+33
00000000000072cc         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
00000000000072d3         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
00000000000072da         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
00000000000072df         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_72e4:
00000000000072e4         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+789
00000000000072ea         or         rbx, 0xffffffffffffffff
00000000000072ee         jmp        loc_725b

                     loc_72f3:
00000000000072f3         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+689
00000000000072f9         or         rbx, 0xffffffffffffffff
00000000000072fd         jmp        loc_71f7

                     loc_7302:
0000000000007302         mov        r8d, 0x1                                    ; CODE XREF=xstrtoul+490
0000000000007308         or         rbx, 0xffffffffffffffff
000000000000730c         jmp        loc_7133

                     loc_7311:
0000000000007311         or         rax, 0xffffffffffffffff                     ; CODE XREF=xstrtoul+478
0000000000007315         mov        r8d, 0x1
000000000000731b         jmp        loc_7127

                     loc_7320:
0000000000007320         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+657
0000000000007326         or         rbx, 0xffffffffffffffff
000000000000732a         jmp        loc_71d7

                     loc_732f:
000000000000732f         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+754
0000000000007335         or         rbx, 0xffffffffffffffff
0000000000007339         jmp        loc_7238

                     loc_733e:
000000000000733e         mov        r9d, 0x1                                    ; CODE XREF=xstrtoul+617
0000000000007344         or         rbx, 0xffffffffffffffff
0000000000007348         jmp        loc_71af

                     loc_734d:
000000000000734d         mov        r8d, 0x1                                    ; CODE XREF=xstrtoul+834
0000000000007353         or         rax, 0xffffffffffffffff
0000000000007357         jmp        loc_728b
000000000000735c         align      32                                          ; End of unwind block (FDE at 0xb56c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoumax:
0000000000007360         push       r15                                         ; Begin of unwind block (FDE at 0xb5bc), CODE XREF=xnumtoumax+53
0000000000007362         push       r14
0000000000007364         push       r13
0000000000007366         push       r12
0000000000007368         push       rbp
0000000000007369         push       rbx
000000000000736a         sub        rsp, 0x28
000000000000736e         mov        rax, qword [fs:0x28]
0000000000007377         mov        qword [rsp+0x58+var_40], rax
000000000000737c         xor        eax, eax
000000000000737e         cmp        edx, 0x24
0000000000007381         ja         loc_76e5

0000000000007387         lea        rax, qword [rsp+0x58+var_48]
000000000000738c         mov        r15, rsi
000000000000738f         test       rsi, rsi
0000000000007392         mov        rbp, rdi
0000000000007395         mov        dword [rsp+0x58+var_50], edx
0000000000007399         mov        r14, rcx
000000000000739c         mov        r13, r8
000000000000739f         cmove      r15, rax
00000000000073a3         call       j___errno_location                          ; __errno_location
00000000000073a8         mov        dword [rax], 0x0
00000000000073ae         mov        r12, rax
00000000000073b1         movzx      ebx, byte [rbp]
00000000000073b5         call       j___ctype_b_loc                             ; __ctype_b_loc
00000000000073ba         mov        edx, dword [rsp+0x58+var_50]
00000000000073be         mov        rsi, qword [rax]
00000000000073c1         mov        rax, rbp
00000000000073c4         jmp        loc_73d7
00000000000073c6         align      16

                     loc_73d0:
00000000000073d0         add        rax, 0x1                                    ; CODE XREF=xstrtoumax+127
00000000000073d4         movzx      ebx, byte [rax]

                     loc_73d7:
00000000000073d7         movzx      ecx, bl                                     ; CODE XREF=xstrtoumax+100
00000000000073da         test       byte [rsi+rcx*2+1], 0x20
00000000000073df         jne        loc_73d0

00000000000073e1         cmp        bl, 0x2d
00000000000073e4         je         loc_7438

00000000000073e6         xor        ecx, ecx
00000000000073e8         mov        rsi, r15
00000000000073eb         mov        rdi, rbp
00000000000073ee         call       j___strtoul_internal                        ; __strtoul_internal
00000000000073f3         mov        rcx, qword [r15]
00000000000073f6         mov        rbx, rax
00000000000073f9         cmp        rcx, rbp
00000000000073fc         je         loc_7428

00000000000073fe         mov        eax, dword [r12]
0000000000007402         test       eax, eax
0000000000007404         je         loc_7468

0000000000007406         cmp        eax, 0x22
0000000000007409         mov        ebp, 0x1
000000000000740e         jne        loc_7438

                     loc_7410:
0000000000007410         test       r13, r13                                    ; CODE XREF=xstrtoumax+266
0000000000007413         je         loc_741e

0000000000007415         movzx      r12d, byte [rcx]
0000000000007419         test       r12b, r12b
000000000000741c         jne        loc_7497

                     loc_741e:
000000000000741e         mov        qword [r14], rbx                            ; CODE XREF=xstrtoumax+179
0000000000007421         jmp        loc_743d
0000000000007423         align      8

                     loc_7428:
0000000000007428         test       r13, r13                                    ; CODE XREF=xstrtoumax+156
000000000000742b         mov        qword [rsp+0x58+var_50], rcx
0000000000007430         jne        loc_7470

0000000000007432         nop        word [rax+rax]

                     loc_7438:
0000000000007438         mov        ebp, 0x4                                    ; CODE XREF=xstrtoumax+132, xstrtoumax+174, xstrtoumax+280, xstrtoumax+309

                     loc_743d:
000000000000743d         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoumax+193, xstrtoumax+535, xstrtoumax+546
0000000000007442         xor        rdi, qword [fs:0x28]
000000000000744b         mov        eax, ebp
000000000000744d         jne        loc_76e0

0000000000007453         add        rsp, 0x28
0000000000007457         pop        rbx
0000000000007458         pop        rbp
0000000000007459         pop        r12
000000000000745b         pop        r13
000000000000745d         pop        r14
000000000000745f         pop        r15
0000000000007461         ret
                        ; endp
0000000000007462         align      8

                     loc_7468:
0000000000007468         xor        ebp, ebp                                    ; CODE XREF=xstrtoumax+164
000000000000746a         jmp        loc_7410
000000000000746c         align      16

                     loc_7470:
0000000000007470         movzx      r12d, byte [rbp]                            ; CODE XREF=xstrtoumax+208
0000000000007475         test       r12b, r12b
0000000000007478         je         loc_7438

000000000000747a         movsx      esi, r12b                                   ; argument "__c" for method j_strchr
000000000000747e         mov        rdi, r13                                    ; argument "__s" for method j_strchr
0000000000007481         xor        ebp, ebp
0000000000007483         call       j_strchr                                    ; strchr
0000000000007488         test       rax, rax
000000000000748b         mov        ebx, 0x1
0000000000007490         mov        rcx, qword [rsp+0x58+var_50]
0000000000007495         je         loc_7438

                     loc_7497:
0000000000007497         movsx      esi, r12b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoumax+188
000000000000749b         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000749e         mov        qword [rsp+0x58+var_50], rcx
00000000000074a3         call       j_strchr                                    ; strchr
00000000000074a8         test       rax, rax
00000000000074ab         mov        rcx, qword [rsp+0x58+var_50]
00000000000074b0         je         loc_757c

00000000000074b6         lea        eax, dword [r12-0x45]
00000000000074bb         cmp        al, 0x2f
00000000000074bd         ja         loc_7510

00000000000074bf         movabs     rdx, 0x814400308945
00000000000074c9         bt         rdx, rax
00000000000074cd         jae        loc_7510

00000000000074cf         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
00000000000074d4         mov        rdi, r13                                    ; argument "__s" for method j_strchr
00000000000074d7         mov        qword [rsp+0x58+var_50], rcx
00000000000074dc         call       j_strchr                                    ; strchr
00000000000074e1         test       rax, rax
00000000000074e4         mov        rcx, qword [rsp+0x58+var_50]
00000000000074e9         je         loc_7510

00000000000074eb         movzx      eax, byte [rcx+1]
00000000000074ef         cmp        al, 0x44
00000000000074f1         je         loc_74ff

00000000000074f3         cmp        al, 0x69
00000000000074f5         je         loc_76c8

00000000000074fb         cmp        al, 0x42
00000000000074fd         jne        loc_7510

                     loc_74ff:
00000000000074ff         mov        edi, 0x2                                    ; CODE XREF=xstrtoumax+401
0000000000007504         mov        esi, 0x3e8
0000000000007509         jmp        loc_751a
000000000000750b         align      16

                     loc_7510:
0000000000007510         mov        edi, 0x1                                    ; CODE XREF=xstrtoumax+349, xstrtoumax+365, xstrtoumax+393, xstrtoumax+413
0000000000007515         mov        esi, 0x400

                     loc_751a:
000000000000751a         sub        r12d, 0x42                                  ; CODE XREF=xstrtoumax+425, xstrtoumax+891
000000000000751e         cmp        r12b, 0x35
0000000000007522         ja         loc_757c

0000000000007524         lea        rdx, qword [switch_table_a150]              ; switch_table_a150
000000000000752b         movzx      r12d, r12b
000000000000752f         movsxd     rax, dword [rdx+r12*4]
0000000000007533         add        rax, rdx
0000000000007536         jmp        rax                                         ; switch statement using table at 0xa150, with 54 cases, 0x7538,0x7560,0x757c,0x7587,0x759d,0x75b4,0x75da,0x75ff,0x761f,0x7640,0x7663,0x7686,0x769c

                     loc_7538:
0000000000007538         mov        rax, rbx                                    ; case 43, CODE XREF=xstrtoumax+470
000000000000753b         mul        rsi
000000000000753e         jo         loc_7731

0000000000007544         xor        r8d, r8d

                     loc_7547:
0000000000007547         mul        rsi                                         ; CODE XREF=xstrtoumax+846, xstrtoumax+862, xstrtoumax+987
000000000000754a         jo         loc_7722

0000000000007550         mov        rbx, rax

                     loc_7553:
0000000000007553         or         ebp, r8d                                    ; CODE XREF=xstrtoumax+972
0000000000007556         nop        word [cs:rax+rax]

                     loc_7560:
0000000000007560         movsxd     rdi, edi                                    ; case 33, CODE XREF=xstrtoumax+470, xstrtoumax+571, xstrtoumax+594, xstrtoumax+632, xstrtoumax+712, xstrtoumax+727, xstrtoumax+823
0000000000007563         mov        eax, ebp
0000000000007565         add        rcx, rdi
0000000000007568         or         eax, 0x2
000000000000756b         mov        qword [r15], rcx
000000000000756e         cmp        byte [rcx], 0x0
0000000000007571         mov        qword [r14], rbx
0000000000007574         cmovne     ebp, eax
0000000000007577         jmp        loc_743d

                     loc_757c:
000000000000757c         mov        qword [r14], rbx                            ; case 52, CODE XREF=xstrtoumax+336, xstrtoumax+450, xstrtoumax+470
000000000000757f         or         ebp, 0x2
0000000000007582         jmp        loc_743d

                     loc_7587:
0000000000007587         mov        edx, 0x2                                    ; case 53, CODE XREF=xstrtoumax+470
000000000000758c         mov        rax, rdx
000000000000758f         mul        rbx
0000000000007592         jo         loc_762e

0000000000007598         add        rbx, rbx
000000000000759b         jmp        loc_7560

                     loc_759d:
000000000000759d         mov        edx, 0x200                                  ; case 32, CODE XREF=xstrtoumax+470
00000000000075a2         mov        rax, rdx
00000000000075a5         mul        rbx
00000000000075a8         jo         loc_762e

00000000000075ae         shl        rbx, 0x9
00000000000075b2         jmp        loc_7560

                     loc_75b4:
00000000000075b4         mov        r8d, 0x7                                    ; case 24, CODE XREF=xstrtoumax+470
00000000000075ba         xor        r9d, r9d
00000000000075bd         nop        dword [rax]

                     loc_75c0:
00000000000075c0         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+627
00000000000075c3         mul        rsi
00000000000075c6         mov        rbx, rax
00000000000075c9         jo         loc_775e

                     loc_75cf:
00000000000075cf         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1032
00000000000075d3         jne        loc_75c0

                     loc_75d5:
00000000000075d5         or         ebp, r9d                                    ; CODE XREF=xstrtoumax+669, xstrtoumax+701, xstrtoumax+766, xstrtoumax+801
00000000000075d8         jmp        loc_7560

                     loc_75da:
00000000000075da         mov        r8d, 0x8                                    ; case 23, CODE XREF=xstrtoumax+470
00000000000075e0         xor        r9d, r9d
00000000000075e3         nop        dword [rax+rax]

                     loc_75e8:
00000000000075e8         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+667
00000000000075eb         mul        rsi
00000000000075ee         mov        rbx, rax
00000000000075f1         jo         loc_7740

                     loc_75f7:
00000000000075f7         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1002
00000000000075fb         jne        loc_75e8

00000000000075fd         jmp        loc_75d5

                     loc_75ff:
00000000000075ff         mov        r8d, 0x4                                    ; case 50, CODE XREF=xstrtoumax+470
0000000000007605         xor        r9d, r9d

                     loc_7608:
0000000000007608         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+699
000000000000760b         mul        rsi
000000000000760e         mov        rbx, rax
0000000000007611         jo         loc_7713

                     loc_7617:
0000000000007617         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+957
000000000000761b         jne        loc_7608

000000000000761d         jmp        loc_75d5

                     loc_761f:
000000000000761f         mov        rax, rbx                                    ; case 41, CODE XREF=xstrtoumax+470
0000000000007622         mul        rsi
0000000000007625         mov        rbx, rax
0000000000007628         jno        loc_7560

                     loc_762e:
000000000000762e         mov        ebp, 0x1                                    ; CODE XREF=xstrtoumax+562, xstrtoumax+584, xstrtoumax+817
0000000000007633         or         rbx, 0xffffffffffffffff
0000000000007637         jmp        loc_7560
000000000000763c         align      64

                     loc_7640:
0000000000007640         mov        r8d, 0x5                                    ; case 14, CODE XREF=xstrtoumax+470
0000000000007646         xor        r9d, r9d

                     loc_7649:
0000000000007649         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+764
000000000000764c         mul        rsi
000000000000764f         mov        rbx, rax
0000000000007652         jo         loc_774f

                     loc_7658:
0000000000007658         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1017
000000000000765c         jne        loc_7649

000000000000765e         jmp        loc_75d5

                     loc_7663:
0000000000007663         mov        r8d, 0x6                                    ; case 3, CODE XREF=xstrtoumax+470
0000000000007669         xor        r9d, r9d

                     loc_766c:
000000000000766c         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+799
000000000000766f         mul        rsi
0000000000007672         mov        rbx, rax
0000000000007675         jo         loc_7704

                     loc_767b:
000000000000767b         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+942
000000000000767f         jne        loc_766c

0000000000007681         jmp        loc_75d5

                     loc_7686:
0000000000007686         mov        edx, 0x400                                  ; case 0, CODE XREF=xstrtoumax+470
000000000000768b         mov        rax, rdx
000000000000768e         mul        rbx
0000000000007691         jo         loc_762e

0000000000007693         shl        rbx, 0xa
0000000000007697         jmp        loc_7560

                     loc_769c:
000000000000769c         mov        rax, rbx                                    ; case 37, CODE XREF=xstrtoumax+470
000000000000769f         mul        rsi
00000000000076a2         jo         loc_776d

00000000000076a8         xor        r8d, r8d

                     loc_76ab:
00000000000076ab         mul        rsi                                         ; CODE XREF=xstrtoumax+1047
00000000000076ae         jno        loc_7547

00000000000076b4         mov        r8d, 0x1
00000000000076ba         or         rax, 0xffffffffffffffff
00000000000076be         jmp        loc_7547
00000000000076c3         align      8

                     loc_76c8:
00000000000076c8         xor        edi, edi                                    ; CODE XREF=xstrtoumax+405
00000000000076ca         cmp        byte [rcx+2], 0x42
00000000000076ce         mov        esi, 0x400
00000000000076d3         sete       dil
00000000000076d7         lea        edi, dword [rdi+rdi+1]
00000000000076db         jmp        loc_751a

                     loc_76e0:
00000000000076e0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoumax+237
                        ; endp

                     loc_76e5:
00000000000076e5         lea        rcx, qword [__PRETTY_FUNCTION__.4162_a228]  ; argument "__function" for method j___assert_fail, "xstrtoumax", CODE XREF=xstrtoumax+33
00000000000076ec         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
00000000000076f3         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
00000000000076fa         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
00000000000076ff         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_7704:
0000000000007704         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+789
000000000000770a         or         rbx, 0xffffffffffffffff
000000000000770e         jmp        loc_767b

                     loc_7713:
0000000000007713         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+689
0000000000007719         or         rbx, 0xffffffffffffffff
000000000000771d         jmp        loc_7617

                     loc_7722:
0000000000007722         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+490
0000000000007728         or         rbx, 0xffffffffffffffff
000000000000772c         jmp        loc_7553

                     loc_7731:
0000000000007731         or         rax, 0xffffffffffffffff                     ; CODE XREF=xstrtoumax+478
0000000000007735         mov        r8d, 0x1
000000000000773b         jmp        loc_7547

                     loc_7740:
0000000000007740         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+657
0000000000007746         or         rbx, 0xffffffffffffffff
000000000000774a         jmp        loc_75f7

                     loc_774f:
000000000000774f         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+754
0000000000007755         or         rbx, 0xffffffffffffffff
0000000000007759         jmp        loc_7658

                     loc_775e:
000000000000775e         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+617
0000000000007764         or         rbx, 0xffffffffffffffff
0000000000007768         jmp        loc_75cf

                     loc_776d:
000000000000776d         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+834
0000000000007773         or         rax, 0xffffffffffffffff
0000000000007777         jmp        loc_76ab
000000000000777c         align      128                                         ; End of unwind block (FDE at 0xb5bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
0000000000007780         push       r12                                         ; Begin of unwind block (FDE at 0xb60c), CODE XREF=main+1849, internal_read_file+57, close_stream+21, fopen_safer+65, fopen_safer+134
0000000000007782         push       rbp
0000000000007783         push       rbx
0000000000007784         mov        rbx, rdi
0000000000007787         call       j_fileno                                    ; fileno
000000000000778c         test       eax, eax
000000000000778e         mov        rdi, rbx
0000000000007791         js         loc_77e7

0000000000007793         call       j___freading                                ; __freading
0000000000007798         test       eax, eax
000000000000779a         jne        loc_77c8

                     loc_779c:
000000000000779c         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
000000000000779f         call       rpl_fflush                                  ; rpl_fflush
00000000000077a4         test       eax, eax
00000000000077a6         je         loc_77e4

00000000000077a8         call       j___errno_location                          ; __errno_location
00000000000077ad         mov        r12d, dword [rax]
00000000000077b0         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
00000000000077b3         mov        rbp, rax
00000000000077b6         call       j_fclose                                    ; fclose
00000000000077bb         test       r12d, r12d
00000000000077be         jne        loc_77f0

                     loc_77c0:
00000000000077c0         pop        rbx                                         ; CODE XREF=rpl_fclose+121
00000000000077c1         pop        rbp
00000000000077c2         pop        r12
00000000000077c4         ret
                        ; endp
00000000000077c5         align      8

                     loc_77c8:
00000000000077c8         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
00000000000077cb         call       j_fileno                                    ; fileno
00000000000077d0         xor        esi, esi                                    ; argument "__offset" for method j_lseek
00000000000077d2         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
00000000000077d7         mov        edi, eax                                    ; argument "__fd" for method j_lseek
00000000000077d9         call       j_lseek                                     ; lseek
00000000000077de         cmp        rax, 0xffffffffffffffff
00000000000077e2         jne        loc_779c

                     loc_77e4:
00000000000077e4         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_77e7:
00000000000077e7         pop        rbx                                         ; CODE XREF=rpl_fclose+17
00000000000077e8         pop        rbp
00000000000077e9         pop        r12
00000000000077eb         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_77f0:
00000000000077f0         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
00000000000077f4         mov        eax, 0xffffffff
00000000000077f9         jmp        loc_77c0
00000000000077fb         align      2048                                        ; End of unwind block (FDE at 0xb60c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
0000000000007800         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xb644), CODE XREF=rpl_fclose+31
0000000000007803         push       rbx
0000000000007804         mov        rbx, rdi
0000000000007807         je         loc_781a

0000000000007809         call       j___freading                                ; __freading
000000000000780e         test       eax, eax
0000000000007810         je         loc_781a

0000000000007812         test       dword [rbx], 0x100
0000000000007818         jne        loc_7828

                     loc_781a:
000000000000781a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
000000000000781d         pop        rbx
000000000000781e         jmp        j_fflush                                    ; fflush
                        ; endp
0000000000007823         align      8

                     loc_7828:
0000000000007828         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
000000000000782b         mov        edx, 0x1
0000000000007830         xor        esi, esi
0000000000007832         call       rpl_fseeko                                  ; rpl_fseeko
0000000000007837         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
000000000000783a         pop        rbx
000000000000783b         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
0000000000007840         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0xb644), Begin of unwind block (FDE at 0xb664), CODE XREF=rpl_fflush+50
0000000000007844         cmp        qword [rdi+0x10], rax
0000000000007848         je         loc_7850

                     j_j_fseeko:        // fseeko
000000000000784a         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
000000000000784f         align      16

                     loc_7850:
0000000000007850         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
0000000000007854         cmp        qword [rdi+0x28], rax
0000000000007858         jne        j_j_fseeko                                  ; fseeko

000000000000785a         cmp        qword [rdi+0x48], 0x0
000000000000785f         jne        j_j_fseeko                                  ; fseeko

0000000000007861         push       r12
0000000000007863         push       rbp
0000000000007864         mov        r12d, edx
0000000000007867         push       rbx
0000000000007868         mov        rbp, rsi
000000000000786b         mov        rbx, rdi
000000000000786e         call       j_fileno                                    ; fileno
0000000000007873         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
0000000000007876         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
0000000000007879         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000787b         call       j_lseek                                     ; lseek
0000000000007880         cmp        rax, 0xffffffffffffffff
0000000000007884         je         loc_7892

0000000000007886         and        dword [rbx], 0xffffffef
0000000000007889         mov        qword [rbx+0x90], rax
0000000000007890         xor        eax, eax

                     loc_7892:
0000000000007892         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
0000000000007893         pop        rbp
0000000000007894         pop        r12
0000000000007896         ret
                        ; endp
0000000000007897         align      32                                          ; End of unwind block (FDE at 0xb664)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
00000000000078a0         push       r13                                         ; Begin of unwind block (FDE at 0xb694), CODE XREF=sub_3e50+534
00000000000078a2         push       r12
00000000000078a4         mov        r13, rsi
00000000000078a7         push       rbp
00000000000078a8         push       rbx
00000000000078a9         mov        rbx, rdi
00000000000078ac         mov        r12, rdx
00000000000078af         sub        rsp, 0x18
00000000000078b3         mov        rax, qword [fs:0x28]
00000000000078bc         mov        qword [rsp+0x38+var_30], rax
00000000000078c1         xor        eax, eax
00000000000078c3         lea        rax, qword [rsp+0x38+var_34]
00000000000078c8         test       rdi, rdi
00000000000078cb         cmove      rbx, rax
00000000000078cf         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
00000000000078d2         call       j_mbrtowc                                   ; mbrtowc
00000000000078d7         cmp        rax, 0xfffffffffffffffd
00000000000078db         mov        rbp, rax
00000000000078de         jbe        loc_7900

00000000000078e0         test       r12, r12
00000000000078e3         je         loc_7900

00000000000078e5         xor        edi, edi
00000000000078e7         call       hard_locale                                 ; hard_locale
00000000000078ec         test       al, al
00000000000078ee         jne        loc_7900

00000000000078f0         movzx      eax, byte [r13]
00000000000078f5         mov        ebp, 0x1
00000000000078fa         mov        dword [rbx], eax
00000000000078fc         nop        dword [rax]

                     loc_7900:
0000000000007900         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
0000000000007905         xor        rdx, qword [fs:0x28]
000000000000790e         mov        rax, rbp
0000000000007911         jne        loc_791e

0000000000007913         add        rsp, 0x18
0000000000007917         pop        rbx
0000000000007918         pop        rbp
0000000000007919         pop        r12
000000000000791b         pop        r13
000000000000791d         ret
                        ; endp

                     loc_791e:
000000000000791e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
0000000000007923         align      16                                          ; End of unwind block (FDE at 0xb694)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
0000000000007930         push       r12                                         ; Begin of unwind block (FDE at 0xb6d4), CODE XREF=close_stdout+13, close_stdout+51
0000000000007932         push       rbp
0000000000007933         mov        rbp, rdi
0000000000007936         push       rbx
0000000000007937         call       j___fpending                                ; __fpending
000000000000793c         mov        ebx, dword [rbp]
000000000000793f         mov        rdi, rbp
0000000000007942         mov        r12, rax
0000000000007945         call       rpl_fclose                                  ; rpl_fclose
000000000000794a         and        ebx, 0x20
000000000000794d         test       ebx, ebx
000000000000794f         jne        loc_7968

0000000000007951         test       eax, eax
0000000000007953         je         loc_795f

0000000000007955         test       r12, r12
0000000000007958         mov        eax, 0xffffffff
000000000000795d         je         loc_7998

                     loc_795f:
000000000000795f         pop        rbx                                         ; CODE XREF=close_stream+35
0000000000007960         pop        rbp
0000000000007961         pop        r12
0000000000007963         ret
                        ; endp
0000000000007964         align      8

                     loc_7968:
0000000000007968         test       eax, eax                                    ; CODE XREF=close_stream+31
000000000000796a         jne        loc_7988

000000000000796c         call       j___errno_location                          ; __errno_location
0000000000007971         mov        dword [rax], 0x0
0000000000007977         mov        eax, 0xffffffff
000000000000797c         pop        rbx
000000000000797d         pop        rbp
000000000000797e         pop        r12
0000000000007980         ret
                        ; endp
0000000000007981         align      8

                     loc_7988:
0000000000007988         pop        rbx                                         ; CODE XREF=close_stream+58
0000000000007989         mov        eax, 0xffffffff
000000000000798e         pop        rbp
000000000000798f         pop        r12
0000000000007991         ret
                        ; endp
0000000000007992         align      8

                     loc_7998:
0000000000007998         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
000000000000799d         cmp        dword [rax], 0x9
00000000000079a0         pop        rbx
00000000000079a1         pop        rbp
00000000000079a2         pop        r12
00000000000079a4         setne      al
00000000000079a7         movzx      eax, al
00000000000079aa         neg        eax
00000000000079ac         ret
                        ; endp
00000000000079ad         align      16                                          ; End of unwind block (FDE at 0xb6d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fopen_safer:
00000000000079b0         push       r12                                         ; Begin of unwind block (FDE at 0xb724), CODE XREF=randread_new+57
00000000000079b2         push       rbp
00000000000079b3         mov        rbp, rsi
00000000000079b6         push       rbx
00000000000079b7         call       j_fopen                                     ; fopen
00000000000079bc         test       rax, rax
00000000000079bf         mov        rbx, rax
00000000000079c2         je         loc_79d1

00000000000079c4         mov        rdi, rax                                    ; argument "__stream" for method j_fileno
00000000000079c7         call       j_fileno                                    ; fileno
00000000000079cc         cmp        eax, 0x2
00000000000079cf         jbe        loc_79e0

                     loc_79d1:
00000000000079d1         mov        rax, rbx                                    ; CODE XREF=fopen_safer+18, fopen_safer+91, fopen_safer+115, fopen_safer+145
00000000000079d4         pop        rbx
00000000000079d5         pop        rbp
00000000000079d6         pop        r12
00000000000079d8         ret
                        ; endp
00000000000079d9         align      32

                     loc_79e0:
00000000000079e0         mov        edi, eax                                    ; CODE XREF=fopen_safer+31
00000000000079e2         call       dup_safer                                   ; dup_safer
00000000000079e7         test       eax, eax
00000000000079e9         mov        r12d, eax
00000000000079ec         js         loc_7a28

00000000000079ee         mov        rdi, rbx
00000000000079f1         call       rpl_fclose                                  ; rpl_fclose
00000000000079f6         test       eax, eax
00000000000079f8         jne        loc_7a0d

00000000000079fa         mov        rsi, rbp                                    ; argument "__modes" for method j_fdopen
00000000000079fd         mov        edi, r12d                                   ; argument "__fd" for method j_fdopen
0000000000007a00         call       j_fdopen                                    ; fdopen
0000000000007a05         test       rax, rax
0000000000007a08         mov        rbx, rax
0000000000007a0b         jne        loc_79d1

                     loc_7a0d:
0000000000007a0d         call       j___errno_location                          ; __errno_location, CODE XREF=fopen_safer+72
0000000000007a12         mov        ebp, dword [rax]
0000000000007a14         mov        rbx, rax
0000000000007a17         mov        edi, r12d                                   ; argument "__fd" for method j_close
0000000000007a1a         call       j_close                                     ; close
0000000000007a1f         mov        dword [rbx], ebp
0000000000007a21         xor        ebx, ebx
0000000000007a23         jmp        loc_79d1
0000000000007a25         align      8

                     loc_7a28:
0000000000007a28         call       j___errno_location                          ; __errno_location, CODE XREF=fopen_safer+60
0000000000007a2d         mov        r12d, dword [rax]
0000000000007a30         mov        rbp, rax
0000000000007a33         mov        rdi, rbx
0000000000007a36         call       rpl_fclose                                  ; rpl_fclose
0000000000007a3b         xor        ebx, ebx
0000000000007a3d         mov        dword [rbp], r12d
0000000000007a41         jmp        loc_79d1
0000000000007a43         align      16                                          ; End of unwind block (FDE at 0xb724)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
0000000000007a50         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xb754), CODE XREF=rpl_mbrtowc+71
0000000000007a54         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000007a56         call       j_setlocale                                 ; setlocale
0000000000007a5b         mov        rdx, rax
0000000000007a5e         mov        eax, 0x1
0000000000007a63         test       rdx, rdx
0000000000007a66         je         loc_7a85

0000000000007a68         lea        rdi, qword [__PRETTY_FUNCTION__.4162_a228+11] ; 0xa233
0000000000007a6f         mov        ecx, 0x2
0000000000007a74         mov        rsi, rdx
0000000000007a77         rep  cmpsb byte [rsi], byte [rdi]
0000000000007a79         seta       cl
0000000000007a7c         sbb        cl, 0x0
0000000000007a7f         xor        eax, eax
0000000000007a81         test       cl, cl
0000000000007a83         jne        loc_7a90

                     loc_7a85:
0000000000007a85         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
0000000000007a89         ret
                        ; endp
0000000000007a8a         align      16

                     loc_7a90:
0000000000007a90         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
0000000000007a97         mov        ecx, 0x6
0000000000007a9c         mov        rsi, rdx
0000000000007a9f         rep  cmpsb byte [rsi], byte [rdi]
0000000000007aa1         seta       al
0000000000007aa4         sbb        al, 0x0
0000000000007aa6         test       al, al
0000000000007aa8         setne      al
0000000000007aab         add        rsp, 0x8
0000000000007aaf         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     next_prime:
0000000000007ab0         cmp        rdi, 0xa                                    ; End of unwind block (FDE at 0xb754), Begin of unwind block (FDE at 0xb774), CODE XREF=hash_initialize+123, hash_rehash+123
0000000000007ab4         mov        eax, 0xa
0000000000007ab9         movabs     r9, 0xaaaaaaaaaaaaaaab
0000000000007ac3         cmovb      rdi, rax
0000000000007ac7         or         rdi, 0x1
0000000000007acb         cmp        rdi, 0xffffffffffffffff
0000000000007acf         je         loc_7b3f

0000000000007ad1         nop        dword [rax]

                     loc_7ad8:
0000000000007ad8         mov        rax, rdi                                    ; CODE XREF=next_prime+141
0000000000007adb         mov        rcx, rdi
0000000000007ade         mul        r9
0000000000007ae1         mov        rax, rdx
0000000000007ae4         shr        rax, 0x1
0000000000007ae7         lea        rax, qword [rax+rax*2]
0000000000007aeb         sub        rcx, rax
0000000000007aee         cmp        rdi, 0x9
0000000000007af2         mov        rax, rcx
0000000000007af5         jbe        loc_7b30

0000000000007af7         test       rcx, rcx
0000000000007afa         je         loc_7b35

0000000000007afc         mov        r8d, 0x10
0000000000007b02         mov        esi, 0x9
0000000000007b07         mov        ecx, 0x3
0000000000007b0c         jmp        loc_7b19
0000000000007b0e         align      16

                     loc_7b10:
0000000000007b10         add        r8, 0x8                                     ; CODE XREF=next_prime+126
0000000000007b14         test       rdx, rdx
0000000000007b17         je         loc_7b35

                     loc_7b19:
0000000000007b19         add        rcx, 0x2                                    ; CODE XREF=next_prime+92
0000000000007b1d         xor        edx, edx
0000000000007b1f         mov        rax, rdi
0000000000007b22         div        rcx
0000000000007b25         add        rsi, r8
0000000000007b28         cmp        rsi, rdi
0000000000007b2b         mov        rax, rdx
0000000000007b2e         jb         loc_7b10

                     loc_7b30:
0000000000007b30         test       rax, rax                                    ; CODE XREF=next_prime+69
0000000000007b33         jne        loc_7b3f

                     loc_7b35:
0000000000007b35         add        rdi, 0x2                                    ; CODE XREF=next_prime+74, next_prime+103
0000000000007b39         cmp        rdi, 0xffffffffffffffff
0000000000007b3d         jne        loc_7ad8

                     loc_7b3f:
0000000000007b3f         mov        rax, rdi                                    ; CODE XREF=next_prime+31, next_prime+131
0000000000007b42         ret
                        ; endp
0000000000007b43         align      16                                          ; End of unwind block (FDE at 0xb774)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     raw_hasher:
0000000000007b50         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xb788), DATA XREF=hash_initialize+4
0000000000007b53         xor        edx, edx
0000000000007b55         ror        rax, 0x3
0000000000007b59         div        rsi
0000000000007b5c         mov        rax, rdx
0000000000007b5f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     raw_comparator:
0000000000007b60         cmp        rdi, rsi                                    ; End of unwind block (FDE at 0xb788), Begin of unwind block (FDE at 0xb79c), DATA XREF=hash_initialize+48
0000000000007b63         sete       al
0000000000007b66         ret
                        ; endp
0000000000007b67         align      16                                          ; End of unwind block (FDE at 0xb79c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     safe_hasher:
0000000000007b70         push       rbx                                         ; Begin of unwind block (FDE at 0xb7b0), CODE XREF=hash_find_entry+20, transfer_entries+101, transfer_entries+175, hash_lookup+10, hash_get_next+12
0000000000007b71         mov        rbx, rdi
0000000000007b74         mov        rdi, rsi
0000000000007b77         mov        rsi, qword [rbx+0x10]
0000000000007b7b         call       qword [rbx+0x30]
0000000000007b7e         cmp        qword [rbx+0x10], rax
0000000000007b82         jbe        loc_7b8d

0000000000007b84         shl        rax, 0x4
0000000000007b88         add        rax, qword [rbx]
0000000000007b8b         pop        rbx
0000000000007b8c         ret
                        ; endp

                     loc_7b8d:
0000000000007b8d         call       j_abort                                     ; abort, CODE XREF=safe_hasher+18
                        ; endp
0000000000007b92         align      32                                          ; End of unwind block (FDE at 0xb7b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_find_entry:
0000000000007ba0         push       r14                                         ; Begin of unwind block (FDE at 0xb7cc), CODE XREF=hash_insert_if_absent+52, hash_insert_if_absent+463, hash_delete+35
0000000000007ba2         push       r13
0000000000007ba4         mov        r14, rdx
0000000000007ba7         push       r12
0000000000007ba9         push       rbp
0000000000007baa         mov        r12, rdi
0000000000007bad         push       rbx
0000000000007bae         mov        rbp, rsi
0000000000007bb1         mov        r13d, ecx
0000000000007bb4         call       safe_hasher                                 ; safe_hasher
0000000000007bb9         mov        qword [r14], rax
0000000000007bbc         mov        rsi, qword [rax]
0000000000007bbf         test       rsi, rsi
0000000000007bc2         je         loc_7cb0

0000000000007bc8         cmp        rsi, rbp
0000000000007bcb         mov        rbx, rax
0000000000007bce         je         loc_7c63

0000000000007bd4         mov        rdi, rbp
0000000000007bd7         call       qword [r12+0x38]
0000000000007bdc         test       al, al
0000000000007bde         jne        loc_7c60

0000000000007be4         mov        rax, qword [rbx+8]
0000000000007be8         test       rax, rax
0000000000007beb         je         loc_7cb0

0000000000007bf1         mov        rsi, qword [rax]
0000000000007bf4         cmp        rbp, rsi
0000000000007bf7         jne        loc_7c19

0000000000007bf9         jmp        loc_7c2c
0000000000007bfb         align      1024

                     loc_7c00:
0000000000007c00         mov        rbx, qword [rbx+8]                          ; CODE XREF=hash_find_entry+131
0000000000007c04         mov        rax, qword [rbx+8]
0000000000007c08         test       rax, rax
0000000000007c0b         je         loc_7cb0

0000000000007c11         mov        rsi, qword [rax]
0000000000007c14         cmp        rsi, rbp
0000000000007c17         je         loc_7c2c

                     loc_7c19:
0000000000007c19         mov        rdi, rbp                                    ; CODE XREF=hash_find_entry+87
0000000000007c1c         call       qword [r12+0x38]
0000000000007c21         test       al, al
0000000000007c23         je         loc_7c00

0000000000007c25         mov        rax, qword [rbx+8]
0000000000007c29         mov        rsi, qword [rax]

                     loc_7c2c:
0000000000007c2c         test       r13b, r13b                                  ; CODE XREF=hash_find_entry+89, hash_find_entry+119
0000000000007c2f         je         loc_7c4e

0000000000007c31         mov        rdx, qword [rax+8]
0000000000007c35         mov        qword [rbx+8], rdx
0000000000007c39         mov        qword [rax], 0x0
0000000000007c40         mov        rdx, qword [r12+0x48]
0000000000007c45         mov        qword [rax+8], rdx
0000000000007c49         mov        qword [r12+0x48], rax

                     loc_7c4e:
0000000000007c4e         pop        rbx                                         ; CODE XREF=hash_find_entry+143, hash_find_entry+198, hash_find_entry+263
0000000000007c4f         mov        rax, rsi
0000000000007c52         pop        rbp
0000000000007c53         pop        r12
0000000000007c55         pop        r13
0000000000007c57         pop        r14
0000000000007c59         ret
                        ; endp
0000000000007c5a         align      32

                     loc_7c60:
0000000000007c60         mov        rsi, qword [rbx]                            ; CODE XREF=hash_find_entry+62

                     loc_7c63:
0000000000007c63         test       r13b, r13b                                  ; CODE XREF=hash_find_entry+46
0000000000007c66         je         loc_7c4e

0000000000007c68         mov        rax, qword [rbx+8]
0000000000007c6c         test       rax, rax
0000000000007c6f         je         loc_7ca0

0000000000007c71         movdqu     xmm0, xmmword [rax]
0000000000007c75         movups     xmmword [rbx], xmm0
0000000000007c78         mov        qword [rax], 0x0
0000000000007c7f         mov        rdx, qword [r12+0x48]
0000000000007c84         mov        qword [rax+8], rdx
0000000000007c88         mov        qword [r12+0x48], rax
0000000000007c8d         mov        rax, rsi
0000000000007c90         pop        rbx
0000000000007c91         pop        rbp
0000000000007c92         pop        r12
0000000000007c94         pop        r13
0000000000007c96         pop        r14
0000000000007c98         ret
                        ; endp
0000000000007c99         align      32

                     loc_7ca0:
0000000000007ca0         mov        qword [rbx], 0x0                            ; CODE XREF=hash_find_entry+207
0000000000007ca7         jmp        loc_7c4e
0000000000007ca9         align      16

                     loc_7cb0:
0000000000007cb0         xor        esi, esi                                    ; CODE XREF=hash_find_entry+34, hash_find_entry+75, hash_find_entry+107
0000000000007cb2         pop        rbx
0000000000007cb3         mov        rax, rsi
0000000000007cb6         pop        rbp
0000000000007cb7         pop        r12
0000000000007cb9         pop        r13
0000000000007cbb         pop        r14
0000000000007cbd         ret
                        ; endp
0000000000007cbe         align      64                                          ; End of unwind block (FDE at 0xb7cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_tuning.isra.0:
0000000000007cc0         mov        rdx, qword [rdi]                            ; Begin of unwind block (FDE at 0xb82c), CODE XREF=hash_initialize+96, hash_initialize+283, hash_insert_if_absent+324, hash_delete+165
0000000000007cc3         lea        rcx, qword [default_tuning]                 ; default_tuning
0000000000007cca         mov        eax, 0x1
0000000000007ccf         cmp        rdx, rcx
0000000000007cd2         je         loc_7d35

0000000000007cd4         movss      xmm0, dword [rdx+8]
0000000000007cd9         ucomiss    xmm0, dword [float_a2c4]                    ; float_a2c4
0000000000007ce0         jbe        loc_7d30

0000000000007ce2         movss      xmm1, dword [float_a2c8]                    ; float_a2c8
0000000000007cea         ucomiss    xmm1, xmm0
0000000000007ced         jbe        loc_7d30

0000000000007cef         movss      xmm1, dword [rdx+0xc]
0000000000007cf4         ucomiss    xmm1, dword [float_a2cc]                    ; float_a2cc
0000000000007cfb         jbe        loc_7d30

0000000000007cfd         movss      xmm1, dword [rdx]
0000000000007d01         ucomiss    xmm1, dword [float_a2d0]                    ; float_a2d0
0000000000007d08         jb         loc_7d30

0000000000007d0a         addss      xmm1, dword [float_a2c4]                    ; float_a2c4
0000000000007d12         movss      xmm2, dword [rdx+4]
0000000000007d17         ucomiss    xmm2, xmm1
0000000000007d1a         jbe        loc_7d30

0000000000007d1c         movss      xmm3, dword [float_a2d4]                    ; float_a2d4
0000000000007d24         ucomiss    xmm3, xmm2
0000000000007d27         jb         loc_7d30

0000000000007d29         ucomiss    xmm0, xmm1
0000000000007d2c         ja         loc_7d35

0000000000007d2e         nop

                     loc_7d30:
0000000000007d30         mov        qword [rdi], rcx                            ; CODE XREF=check_tuning.isra.0+32, check_tuning.isra.0+45, check_tuning.isra.0+59, check_tuning.isra.0+72, check_tuning.isra.0+90, check_tuning.isra.0+103
0000000000007d33         xor        eax, eax

                     loc_7d35:
0000000000007d35         ret                                                    ; CODE XREF=check_tuning.isra.0+18, check_tuning.isra.0+108
                        ; endp
0000000000007d37         align      64                                          ; End of unwind block (FDE at 0xb82c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     transfer_entries:
0000000000007d40         push       r15                                         ; Begin of unwind block (FDE at 0xb840), CODE XREF=hash_rehash+303, hash_rehash+338, hash_rehash+359
0000000000007d42         push       r14
0000000000007d44         push       r13
0000000000007d46         push       r12
0000000000007d48         push       rbp
0000000000007d49         push       rbx
0000000000007d4a         sub        rsp, 0x8
0000000000007d4e         mov        r12, qword [rsi]
0000000000007d51         cmp        r12, qword [rsi+8]
0000000000007d55         jae        loc_7e38

0000000000007d5b         mov        rbp, rdi
0000000000007d5e         mov        r13, rsi
0000000000007d61         mov        r14d, edx
0000000000007d64         nop        dword [rax]

                     loc_7d68:
0000000000007d68         mov        r15, qword [r12]                            ; CODE XREF=transfer_entries+242
0000000000007d6c         test       r15, r15
0000000000007d6f         je         loc_7e2a

0000000000007d75         mov        rbx, qword [r12+8]
0000000000007d7a         test       rbx, rbx
0000000000007d7d         jne        loc_7d9c

0000000000007d7f         jmp        loc_7ddb
0000000000007d81         align      8

                     loc_7d88:
0000000000007d88         mov        rcx, qword [rax+8]                          ; CODE XREF=transfer_entries+114
0000000000007d8c         test       rdx, rdx
0000000000007d8f         mov        qword [rbx+8], rcx
0000000000007d93         mov        qword [rax+8], rbx
0000000000007d97         mov        rbx, rdx
0000000000007d9a         je         loc_7dd7

                     loc_7d9c:
0000000000007d9c         mov        r15, qword [rbx]                            ; CODE XREF=transfer_entries+61, transfer_entries+149
0000000000007d9f         mov        rdi, rbp
0000000000007da2         mov        rsi, r15
0000000000007da5         call       safe_hasher                                 ; safe_hasher
0000000000007daa         cmp        qword [rax], 0x0
0000000000007dae         mov        rdx, qword [rbx+8]
0000000000007db2         jne        loc_7d88

0000000000007db4         mov        qword [rax], r15
0000000000007db7         add        qword [rbp+0x18], 0x1
0000000000007dbc         test       rdx, rdx
0000000000007dbf         mov        qword [rbx], 0x0
0000000000007dc6         mov        rax, qword [rbp+0x48]
0000000000007dca         mov        qword [rbx+8], rax
0000000000007dce         mov        qword [rbp+0x48], rbx
0000000000007dd2         mov        rbx, rdx
0000000000007dd5         jne        loc_7d9c

                     loc_7dd7:
0000000000007dd7         mov        r15, qword [r12]                            ; CODE XREF=transfer_entries+90

                     loc_7ddb:
0000000000007ddb         test       r14b, r14b                                  ; CODE XREF=transfer_entries+63
0000000000007dde         mov        qword [r12+8], 0x0
0000000000007de7         jne        loc_7e2a

0000000000007de9         mov        rsi, r15
0000000000007dec         mov        rdi, rbp
0000000000007def         call       safe_hasher                                 ; safe_hasher
0000000000007df4         cmp        qword [rax], 0x0
0000000000007df8         mov        rbx, rax
0000000000007dfb         je         loc_7e50

0000000000007dfd         mov        rax, qword [rbp+0x48]
0000000000007e01         test       rax, rax
0000000000007e04         je         loc_7e60

0000000000007e06         mov        rdx, qword [rax+8]
0000000000007e0a         mov        qword [rbp+0x48], rdx

                     loc_7e0e:
0000000000007e0e         mov        rdx, qword [rbx+8]                          ; CODE XREF=transfer_entries+301
0000000000007e12         mov        qword [rax], r15
0000000000007e15         mov        qword [rax+8], rdx
0000000000007e19         mov        qword [rbx+8], rax

                     loc_7e1d:
0000000000007e1d         mov        qword [r12], 0x0                            ; CODE XREF=transfer_entries+280
0000000000007e25         sub        qword [r13+0x18], 0x1

                     loc_7e2a:
0000000000007e2a         add        r12, 0x10                                   ; CODE XREF=transfer_entries+47, transfer_entries+167
0000000000007e2e         cmp        qword [r13+8], r12
0000000000007e32         ja         loc_7d68

                     loc_7e38:
0000000000007e38         add        rsp, 0x8                                    ; CODE XREF=transfer_entries+21
0000000000007e3c         mov        eax, 0x1
0000000000007e41         pop        rbx
0000000000007e42         pop        rbp
0000000000007e43         pop        r12
0000000000007e45         pop        r13
0000000000007e47         pop        r14
0000000000007e49         pop        r15
0000000000007e4b         ret
                        ; endp
0000000000007e4c         align      16

                     loc_7e50:
0000000000007e50         mov        qword [rax], r15                            ; CODE XREF=transfer_entries+187
0000000000007e53         add        qword [rbp+0x18], 0x1
0000000000007e58         jmp        loc_7e1d
0000000000007e5a         align      32

                     loc_7e60:
0000000000007e60         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=transfer_entries+196
0000000000007e65         call       j_malloc                                    ; malloc
0000000000007e6a         test       rax, rax
0000000000007e6d         jne        loc_7e0e

0000000000007e6f         add        rsp, 0x8
0000000000007e73         xor        eax, eax
0000000000007e75         pop        rbx
0000000000007e76         pop        rbp
0000000000007e77         pop        r12
0000000000007e79         pop        r13
0000000000007e7b         pop        r14
0000000000007e7d         pop        r15
0000000000007e7f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_buckets:
0000000000007e80         mov        rax, qword [rdi+0x10]                       ; End of unwind block (FDE at 0xb840), Begin of unwind block (FDE at 0xb8a0)
0000000000007e84         ret
                        ; endp
0000000000007e85         align      16                                          ; End of unwind block (FDE at 0xb8a0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_buckets_used:
0000000000007e90         mov        rax, qword [rdi+0x18]                       ; Begin of unwind block (FDE at 0xb8b4)
0000000000007e94         ret
                        ; endp
0000000000007e95         align      32                                          ; End of unwind block (FDE at 0xb8b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_entries:
0000000000007ea0         mov        rax, qword [rdi+0x20]                       ; Begin of unwind block (FDE at 0xb8c8)
0000000000007ea4         ret
                        ; endp
0000000000007ea5         align      16                                          ; End of unwind block (FDE at 0xb8c8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_max_bucket_length:
0000000000007eb0         mov        rsi, qword [rdi]                            ; Begin of unwind block (FDE at 0xb8dc)
0000000000007eb3         mov        rdi, qword [rdi+8]
0000000000007eb7         xor        eax, eax
0000000000007eb9         cmp        rsi, rdi
0000000000007ebc         jae        loc_7ef7

0000000000007ebe         nop

                     loc_7ec0:
0000000000007ec0         cmp        qword [rsi], 0x0                            ; CODE XREF=hash_get_max_bucket_length+67
0000000000007ec4         je         loc_7eec

0000000000007ec6         mov        rdx, qword [rsi+8]
0000000000007eca         mov        ecx, 0x1
0000000000007ecf         test       rdx, rdx
0000000000007ed2         je         loc_7ee5

0000000000007ed4         nop        dword [rax]

                     loc_7ed8:
0000000000007ed8         mov        rdx, qword [rdx+8]                          ; CODE XREF=hash_get_max_bucket_length+51
0000000000007edc         add        rcx, 0x1
0000000000007ee0         test       rdx, rdx
0000000000007ee3         jne        loc_7ed8

                     loc_7ee5:
0000000000007ee5         cmp        rax, rcx                                    ; CODE XREF=hash_get_max_bucket_length+34
0000000000007ee8         cmovb      rax, rcx

                     loc_7eec:
0000000000007eec         add        rsi, 0x10                                   ; CODE XREF=hash_get_max_bucket_length+20
0000000000007ef0         cmp        rsi, rdi
0000000000007ef3         jb         loc_7ec0

0000000000007ef5         ret
                        ; endp

                     loc_7ef7:
0000000000007ef7         ret                                                    ; CODE XREF=hash_get_max_bucket_length+12
                        ; endp
0000000000007ef9         align      256                                         ; End of unwind block (FDE at 0xb8dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_table_ok:
0000000000007f00         mov        rcx, qword [rdi]                            ; Begin of unwind block (FDE at 0xb8f0)
0000000000007f03         mov        r8, qword [rdi+8]
0000000000007f07         xor        edx, edx
0000000000007f09         xor        esi, esi
0000000000007f0b         cmp        rcx, r8
0000000000007f0e         jae        loc_7f46

                     loc_7f10:
0000000000007f10         cmp        qword [rcx], 0x0                            ; CODE XREF=hash_table_ok+68
0000000000007f14         je         loc_7f3d

0000000000007f16         mov        rax, qword [rcx+8]
0000000000007f1a         add        rsi, 0x1
0000000000007f1e         add        rdx, 0x1
0000000000007f22         test       rax, rax
0000000000007f25         je         loc_7f3d

0000000000007f27         nop        word [rax+rax]

                     loc_7f30:
0000000000007f30         mov        rax, qword [rax+8]                          ; CODE XREF=hash_table_ok+59
0000000000007f34         add        rdx, 0x1
0000000000007f38         test       rax, rax
0000000000007f3b         jne        loc_7f30

                     loc_7f3d:
0000000000007f3d         add        rcx, 0x10                                   ; CODE XREF=hash_table_ok+20, hash_table_ok+37
0000000000007f41         cmp        rcx, r8
0000000000007f44         jb         loc_7f10

                     loc_7f46:
0000000000007f46         xor        eax, eax                                    ; CODE XREF=hash_table_ok+14
0000000000007f48         cmp        qword [rdi+0x18], rsi
0000000000007f4c         je         loc_7f50

0000000000007f4e         ret
                        ; endp

                     loc_7f50:
0000000000007f50         cmp        qword [rdi+0x20], rdx                       ; CODE XREF=hash_table_ok+76
0000000000007f54         sete       al
0000000000007f57         ret
                        ; endp
0000000000007f58         align      32                                          ; End of unwind block (FDE at 0xb8f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_print_statistics:
0000000000007f60         push       r13                                         ; Begin of unwind block (FDE at 0xb904)
0000000000007f62         push       r12
0000000000007f64         mov        r12, rsi
0000000000007f67         push       rbp
0000000000007f68         push       rbx
0000000000007f69         xor        ebx, ebx
0000000000007f6b         sub        rsp, 0x8
0000000000007f6f         mov        rsi, qword [rdi]
0000000000007f72         mov        rcx, qword [rdi+0x20]
0000000000007f76         mov        rbp, qword [rdi+0x10]
0000000000007f7a         mov        r13, qword [rdi+0x18]
0000000000007f7e         mov        rdi, qword [rdi+8]
0000000000007f82         cmp        rsi, rdi
0000000000007f85         jae        loc_7fc5

0000000000007f87         nop        word [rax+rax]

                     loc_7f90:
0000000000007f90         cmp        qword [rsi], 0x0                            ; CODE XREF=hash_print_statistics+99
0000000000007f94         je         loc_7fbc

0000000000007f96         mov        rax, qword [rsi+8]
0000000000007f9a         mov        edx, 0x1
0000000000007f9f         test       rax, rax
0000000000007fa2         je         loc_7fb5

0000000000007fa4         nop        dword [rax]

                     loc_7fa8:
0000000000007fa8         mov        rax, qword [rax+8]                          ; CODE XREF=hash_print_statistics+83
0000000000007fac         add        rdx, 0x1
0000000000007fb0         test       rax, rax
0000000000007fb3         jne        loc_7fa8

                     loc_7fb5:
0000000000007fb5         cmp        rbx, rdx                                    ; CODE XREF=hash_print_statistics+66
0000000000007fb8         cmovb      rbx, rdx

                     loc_7fbc:
0000000000007fbc         add        rsi, 0x10                                   ; CODE XREF=hash_print_statistics+52
0000000000007fc0         cmp        rsi, rdi
0000000000007fc3         jb         loc_7f90

                     loc_7fc5:
0000000000007fc5         lea        rdx, qword [aEntriesLun]                    ; "# entries:         %lu\\n", CODE XREF=hash_print_statistics+37
0000000000007fcc         mov        esi, 0x1
0000000000007fd1         mov        rdi, r12
0000000000007fd4         xor        eax, eax
0000000000007fd6         call       j___fprintf_chk                             ; __fprintf_chk
0000000000007fdb         lea        rdx, qword [aBucketsLun]                    ; "# buckets:         %lu\\n"
0000000000007fe2         xor        eax, eax
0000000000007fe4         mov        rcx, rbp
0000000000007fe7         mov        esi, 0x1
0000000000007fec         mov        rdi, r12
0000000000007fef         call       j___fprintf_chk                             ; __fprintf_chk
0000000000007ff4         test       r13, r13
0000000000007ff7         js         loc_8060

0000000000007ff9         pxor       xmm0, xmm0
0000000000007ffd         test       rbp, rbp
0000000000008000         cvtsi2sd   xmm0, r13                                   ; DATA XREF=main+2208, fread_file+79
0000000000008005         mulsd      xmm0, qword [float_a2e0+8]                  ; 0xa2e8
000000000000800d         js         loc_8089

                     loc_800f:
000000000000800f         pxor       xmm1, xmm1                                  ; CODE XREF=hash_print_statistics+295
0000000000008013         cvtsi2sd   xmm1, rbp

                     loc_8018:
0000000000008018         divsd      xmm0, xmm1                                  ; CODE XREF=hash_print_statistics+322
000000000000801c         lea        rdx, qword [aBucketsUsedLu2]                ; "# buckets used:    %lu (%.2f%%)\\n"
0000000000008023         mov        rcx, r13
0000000000008026         mov        rdi, r12
0000000000008029         mov        esi, 0x1
000000000000802e         mov        eax, 0x1
0000000000008033         call       j___fprintf_chk                             ; __fprintf_chk
0000000000008038         add        rsp, 0x8
000000000000803c         mov        rcx, rbx
000000000000803f         mov        rdi, r12
0000000000008042         pop        rbx
0000000000008043         pop        rbp
0000000000008044         pop        r12
0000000000008046         pop        r13
0000000000008048         lea        rdx, qword [aMaxBucketLengt]                ; "max bucket length: %lu\\n"
000000000000804f         mov        esi, 0x1
0000000000008054         xor        eax, eax
0000000000008056         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
000000000000805b         align      32

                     loc_8060:
0000000000008060         mov        rax, r13                                    ; CODE XREF=hash_print_statistics+151
0000000000008063         mov        rdx, r13
0000000000008066         pxor       xmm0, xmm0
000000000000806a         shr        rax, 0x1
000000000000806d         and        edx, 0x1
0000000000008070         or         rax, rdx
0000000000008073         test       rbp, rbp
0000000000008076         cvtsi2sd   xmm0, rax
000000000000807b         addsd      xmm0, xmm0
000000000000807f         mulsd      xmm0, qword [float_a2e0+8]                  ; 0xa2e8
0000000000008087         jns        loc_800f

                     loc_8089:
0000000000008089         mov        rax, rbp                                    ; CODE XREF=hash_print_statistics+173
000000000000808c         pxor       xmm1, xmm1
0000000000008090         shr        rax, 0x1
0000000000008093         and        ebp, 0x1
0000000000008096         or         rax, rbp
0000000000008099         cvtsi2sd   xmm1, rax
000000000000809e         addsd      xmm1, xmm1
00000000000080a2         jmp        loc_8018
00000000000080a7         align      16                                          ; End of unwind block (FDE at 0xb904)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_lookup:
00000000000080b0         push       r12                                         ; Begin of unwind block (FDE at 0xb940)
00000000000080b2         push       rbp
00000000000080b3         mov        r12, rdi
00000000000080b6         push       rbx
00000000000080b7         mov        rbp, rsi
00000000000080ba         call       safe_hasher                                 ; safe_hasher
00000000000080bf         mov        rsi, qword [rax]
00000000000080c2         test       rsi, rsi
00000000000080c5         je         loc_80ed

00000000000080c7         mov        rbx, rax
00000000000080ca         jmp        loc_80d3
00000000000080cc         align      16

                     loc_80d0:
00000000000080d0         mov        rsi, qword [rbx]                            ; CODE XREF=hash_lookup+59

                     loc_80d3:
00000000000080d3         cmp        rsi, rbp                                    ; CODE XREF=hash_lookup+26
00000000000080d6         je         loc_80ef

00000000000080d8         mov        rdi, rbp
00000000000080db         call       qword [r12+0x38]
00000000000080e0         test       al, al
00000000000080e2         jne        loc_8100

00000000000080e4         mov        rbx, qword [rbx+8]
00000000000080e8         test       rbx, rbx
00000000000080eb         jne        loc_80d0

                     loc_80ed:
00000000000080ed         xor        esi, esi                                    ; CODE XREF=hash_lookup+21

                     loc_80ef:
00000000000080ef         pop        rbx                                         ; CODE XREF=hash_lookup+38
00000000000080f0         mov        rax, rsi
00000000000080f3         pop        rbp
00000000000080f4         pop        r12
00000000000080f6         ret
                        ; endp
00000000000080f7         align      256

                     loc_8100:
0000000000008100         mov        rsi, qword [rbx]                            ; CODE XREF=hash_lookup+50
0000000000008103         pop        rbx
0000000000008104         pop        rbp
0000000000008105         mov        rax, rsi
0000000000008108         pop        r12
000000000000810a         ret
                        ; endp
000000000000810b         align      16                                          ; End of unwind block (FDE at 0xb940)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_first:
0000000000008110         cmp        qword [rdi+0x20], 0x0                       ; Begin of unwind block (FDE at 0xb978)
0000000000008115         je         loc_8143

0000000000008117         mov        rdx, qword [rdi]
000000000000811a         mov        rcx, qword [rdi+8]
000000000000811e         cmp        rdx, rcx
0000000000008121         jae        loc_8148

0000000000008123         mov        rax, qword [rdx]
0000000000008126         test       rax, rax
0000000000008129         jne        loc_8146

000000000000812b         nop        dword [rax+rax]

                     loc_8130:
0000000000008130         add        rdx, 0x10                                   ; CODE XREF=hash_get_first+47
0000000000008134         cmp        rdx, rcx
0000000000008137         jae        loc_8148

0000000000008139         mov        rax, qword [rdx]
000000000000813c         test       rax, rax
000000000000813f         je         loc_8130

0000000000008141         ret
                        ; endp

                     loc_8143:
0000000000008143         xor        eax, eax                                    ; CODE XREF=hash_get_first+5
0000000000008145         ret
                        ; endp

                     loc_8146:
0000000000008146         ret                                                    ; CODE XREF=hash_get_first+25
                        ; endp

                     loc_8148:
0000000000008148         sub        rsp, 0x8                                    ; CODE XREF=hash_get_first+17, hash_get_first+39
000000000000814c         call       j_abort                                     ; abort
                        ; endp
0000000000008151         align      32                                          ; End of unwind block (FDE at 0xb978)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_next:
0000000000008160         push       rbp                                         ; Begin of unwind block (FDE at 0xb98c)
0000000000008161         push       rbx
0000000000008162         mov        rbp, rdi
0000000000008165         mov        rbx, rsi
0000000000008168         sub        rsp, 0x8
000000000000816c         call       safe_hasher                                 ; safe_hasher
0000000000008171         mov        rdx, rax
0000000000008174         mov        rcx, rax
0000000000008177         mov        rax, qword [rdx]
000000000000817a         mov        rdx, qword [rdx+8]
000000000000817e         cmp        rax, rbx
0000000000008181         je         loc_8199

0000000000008183         nop        dword [rax+rax]

                     loc_8188:
0000000000008188         test       rdx, rdx                                    ; CODE XREF=hash_get_next+55
000000000000818b         je         loc_819e

000000000000818d         mov        rax, qword [rdx]
0000000000008190         mov        rdx, qword [rdx+8]
0000000000008194         cmp        rax, rbx
0000000000008197         jne        loc_8188

                     loc_8199:
0000000000008199         test       rdx, rdx                                    ; CODE XREF=hash_get_next+33
000000000000819c         jne        loc_81c8

                     loc_819e:
000000000000819e         mov        rdx, qword [rbp+8]                          ; CODE XREF=hash_get_next+43
00000000000081a2         jmp        loc_81b0
00000000000081a4         align      8

                     loc_81a8:
00000000000081a8         mov        rax, qword [rcx]                            ; CODE XREF=hash_get_next+87
00000000000081ab         test       rax, rax
00000000000081ae         jne        loc_81bb

                     loc_81b0:
00000000000081b0         add        rcx, 0x10                                   ; CODE XREF=hash_get_next+66
00000000000081b4         cmp        rdx, rcx
00000000000081b7         ja         loc_81a8

00000000000081b9         xor        eax, eax

                     loc_81bb:
00000000000081bb         add        rsp, 0x8                                    ; CODE XREF=hash_get_next+78
00000000000081bf         pop        rbx
00000000000081c0         pop        rbp
00000000000081c1         ret
                        ; endp
00000000000081c2         align      8

                     loc_81c8:
00000000000081c8         mov        rax, qword [rdx]                            ; CODE XREF=hash_get_next+60
00000000000081cb         add        rsp, 0x8
00000000000081cf         pop        rbx
00000000000081d0         pop        rbp
00000000000081d1         ret
                        ; endp
00000000000081d2         align      32                                          ; End of unwind block (FDE at 0xb98c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_entries:
00000000000081e0         mov        r9, qword [rdi]                             ; Begin of unwind block (FDE at 0xb9c0)
00000000000081e3         cmp        qword [rdi+8], r9
00000000000081e7         jbe        loc_8242

00000000000081e9         xor        r8d, r8d

                     loc_81ec:
00000000000081ec         mov        rcx, qword [r9]                             ; CODE XREF=hash_get_entries+85
00000000000081ef         test       rcx, rcx
00000000000081f2         je         loc_822d

00000000000081f4         cmp        rdx, r8
00000000000081f7         jbe        loc_8237

00000000000081f9         mov        qword [rsi+r8*8], rcx
00000000000081fd         mov        rcx, qword [r9+8]
0000000000008201         lea        rax, qword [r8+1]
0000000000008205         test       rcx, rcx
0000000000008208         je         loc_822a

000000000000820a         nop        word [rax+rax]

                     loc_8210:
0000000000008210         cmp        rdx, rax                                    ; CODE XREF=hash_get_entries+72
0000000000008213         je         loc_8240

0000000000008215         mov        r8, qword [rcx]
0000000000008218         add        rax, 0x1
000000000000821c         mov        qword [rsi+rax*8-8], r8
0000000000008221         mov        rcx, qword [rcx+8]
0000000000008225         test       rcx, rcx
0000000000008228         jne        loc_8210

                     loc_822a:
000000000000822a         mov        r8, rax                                     ; CODE XREF=hash_get_entries+40

                     loc_822d:
000000000000822d         add        r9, 0x10                                    ; CODE XREF=hash_get_entries+18
0000000000008231         cmp        qword [rdi+8], r9
0000000000008235         ja         loc_81ec

                     loc_8237:
0000000000008237         mov        rax, r8                                     ; CODE XREF=hash_get_entries+23
000000000000823a         ret
                        ; endp
000000000000823b         align      64

                     loc_8240:
0000000000008240         ret                                                    ; CODE XREF=hash_get_entries+51
                        ; endp

                     loc_8242:
0000000000008242         xor        eax, eax                                    ; CODE XREF=hash_get_entries+7
0000000000008244         ret
                        ; endp
0000000000008245         align      16                                          ; End of unwind block (FDE at 0xb9c0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_do_for_each:
0000000000008250         push       r15                                         ; Begin of unwind block (FDE at 0xb9d4)
0000000000008252         push       r14
0000000000008254         push       r13
0000000000008256         push       r12
0000000000008258         push       rbp
0000000000008259         push       rbx
000000000000825a         sub        rsp, 0x8
000000000000825e         mov        r14, qword [rdi]
0000000000008261         cmp        qword [rdi+8], r14
0000000000008265         jbe        loc_82b6

0000000000008267         mov        r13, rdx
000000000000826a         mov        r12, rsi
000000000000826d         mov        r15, rdi
0000000000008270         xor        ebp, ebp

                     loc_8272:
0000000000008272         mov        rdi, qword [r14]                            ; CODE XREF=hash_do_for_each+82
0000000000008275         test       rdi, rdi
0000000000008278         je         loc_829a

000000000000827a         mov        rbx, r14
000000000000827d         jmp        loc_8283
000000000000827f         align      128

                     loc_8280:
0000000000008280         mov        rdi, qword [rbx]                            ; CODE XREF=hash_do_for_each+72

                     loc_8283:
0000000000008283         mov        rsi, r13                                    ; CODE XREF=hash_do_for_each+45
0000000000008286         call       r12
0000000000008289         test       al, al
000000000000828b         je         loc_82a4

000000000000828d         mov        rbx, qword [rbx+8]
0000000000008291         add        rbp, 0x1
0000000000008295         test       rbx, rbx
0000000000008298         jne        loc_8280

                     loc_829a:
000000000000829a         add        r14, 0x10                                   ; CODE XREF=hash_do_for_each+40
000000000000829e         cmp        qword [r15+8], r14
00000000000082a2         ja         loc_8272

                     loc_82a4:
00000000000082a4         add        rsp, 0x8                                    ; CODE XREF=hash_do_for_each+59, hash_do_for_each+104
00000000000082a8         mov        rax, rbp
00000000000082ab         pop        rbx
00000000000082ac         pop        rbp
00000000000082ad         pop        r12
00000000000082af         pop        r13
00000000000082b1         pop        r14
00000000000082b3         pop        r15
00000000000082b5         ret
                        ; endp

                     loc_82b6:
00000000000082b6         xor        ebp, ebp                                    ; CODE XREF=hash_do_for_each+21
00000000000082b8         jmp        loc_82a4
00000000000082ba         align      64                                          ; End of unwind block (FDE at 0xb9d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_string:
00000000000082c0         movzx      ecx, byte [rdi]                             ; Begin of unwind block (FDE at 0xba20)
00000000000082c3         xor        edx, edx
00000000000082c5         test       cl, cl
00000000000082c7         je         loc_82ed

00000000000082c9         nop        dword [rax]

                     loc_82d0:
00000000000082d0         mov        rax, rdx                                    ; CODE XREF=hash_string+43
00000000000082d3         add        rdi, 0x1
00000000000082d7         shl        rax, 0x5
00000000000082db         sub        rax, rdx
00000000000082de         xor        edx, edx
00000000000082e0         add        rax, rcx
00000000000082e3         movzx      ecx, byte [rdi]
00000000000082e6         div        rsi
00000000000082e9         test       cl, cl
00000000000082eb         jne        loc_82d0

                     loc_82ed:
00000000000082ed         mov        rax, rdx                                    ; CODE XREF=hash_string+7
00000000000082f0         ret
                        ; endp
00000000000082f1         align      256                                         ; End of unwind block (FDE at 0xba20)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_reset_tuning:
0000000000008300         movabs     rax, 0x3f80000000000000                     ; Begin of unwind block (FDE at 0xba34)
000000000000830a         mov        byte [rdi+0x10], 0x0
000000000000830e         mov        qword [rdi], rax
0000000000008311         movabs     rax, 0x3fb4fdf43f4ccccd
000000000000831b         mov        qword [rdi+8], rax
000000000000831f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_initialize:
0000000000008320         push       r15                                         ; End of unwind block (FDE at 0xba34), Begin of unwind block (FDE at 0xba48), CODE XREF=randperm_new+178
0000000000008322         push       r14
0000000000008324         lea        rax, qword [raw_hasher]                     ; raw_hasher
000000000000832b         push       r13
000000000000832d         push       r12
000000000000832f         mov        r12, rdx
0000000000008332         push       rbp
0000000000008333         push       rbx
0000000000008334         mov        r13, rcx
0000000000008337         mov        rbp, rdi
000000000000833a         mov        edi, 0x50                                   ; argument "__size" for method j_malloc
000000000000833f         mov        r15, rsi
0000000000008342         sub        rsp, 0x8
0000000000008346         test       rdx, rdx
0000000000008349         mov        r14, r8
000000000000834c         cmove      r12, rax
0000000000008350         lea        rax, qword [raw_comparator]                 ; raw_comparator
0000000000008357         test       rcx, rcx
000000000000835a         cmove      r13, rax
000000000000835e         call       j_malloc                                    ; malloc
0000000000008363         test       rax, rax
0000000000008366         mov        rbx, rax
0000000000008369         je         loc_841a

000000000000836f         test       r15, r15
0000000000008372         lea        rdi, qword [rax+0x28]
0000000000008376         je         loc_8430

000000000000837c         mov        qword [rax+0x28], r15
0000000000008380         call       check_tuning.isra.0                         ; check_tuning.isra.0
0000000000008385         test       al, al
0000000000008387         je         loc_8410

000000000000838d         cmp        byte [r15+0x10], 0x0
0000000000008392         je         loc_8490

                     loc_8398:
0000000000008398         mov        rdi, rbp                                    ; CODE XREF=hash_initialize+362, hash_initialize+421
000000000000839b         call       next_prime                                  ; next_prime
00000000000083a0         mov        edx, 0x8
00000000000083a5         mov        rbp, rax
00000000000083a8         xor        ecx, ecx
00000000000083aa         mov        rax, rdx
00000000000083ad         mul        rbp
00000000000083b0         jo         loc_84ca

                     loc_83b6:
00000000000083b6         test       rax, rax                                    ; CODE XREF=hash_initialize+431
00000000000083b9         js         loc_8410

00000000000083bb         test       rcx, rcx
00000000000083be         jne        loc_8410

00000000000083c0         test       rbp, rbp
00000000000083c3         mov        qword [rbx+0x10], rbp
00000000000083c7         je         loc_8410

00000000000083c9         mov        esi, 0x10                                   ; argument "__size" for method j_calloc
00000000000083ce         mov        rdi, rbp                                    ; argument "__nmemb" for method j_calloc
00000000000083d1         call       j_calloc                                    ; calloc
00000000000083d6         test       rax, rax
00000000000083d9         mov        qword [rbx], rax
00000000000083dc         je         loc_8410

00000000000083de         shl        rbp, 0x4
00000000000083e2         mov        qword [rbx+0x18], 0x0
00000000000083ea         mov        qword [rbx+0x20], 0x0
00000000000083f2         add        rbp, rax
00000000000083f5         mov        qword [rbx+0x30], r12
00000000000083f9         mov        qword [rbx+0x38], r13
00000000000083fd         mov        qword [rbx+8], rbp
0000000000008401         mov        qword [rbx+0x40], r14
0000000000008405         mov        qword [rbx+0x48], 0x0
000000000000840d         jmp        loc_841a
000000000000840f         align      16

                     loc_8410:
0000000000008410         mov        rdi, rbx                                    ; CODE XREF=hash_initialize+103, hash_initialize+153, hash_initialize+158, hash_initialize+167, hash_initialize+188, hash_initialize+298, hash_initialize+325
0000000000008413         xor        ebx, ebx
0000000000008415         call       sub_1dd0                                    ; sub_1dd0

                     loc_841a:
000000000000841a         add        rsp, 0x8                                    ; CODE XREF=hash_initialize+73, hash_initialize+237
000000000000841e         mov        rax, rbx
0000000000008421         pop        rbx
0000000000008422         pop        rbp
0000000000008423         pop        r12
0000000000008425         pop        r13
0000000000008427         pop        r14
0000000000008429         pop        r15
000000000000842b         ret
                        ; endp
000000000000842c         align      16

                     loc_8430:
0000000000008430         lea        rax, qword [default_tuning]                 ; default_tuning, CODE XREF=hash_initialize+86
0000000000008437         mov        qword [rbx+0x28], rax
000000000000843b         call       check_tuning.isra.0                         ; check_tuning.isra.0
0000000000008440         test       al, al
0000000000008442         movss      xmm1, dword [float_a2d8]                    ; float_a2d8
000000000000844a         je         loc_8410

000000000000844c         test       rbp, rbp
000000000000844f         js         loc_849b

                     loc_8451:
0000000000008451         pxor       xmm0, xmm0                                  ; CODE XREF=hash_initialize+377
0000000000008455         cvtsi2ss   xmm0, rbp

                     loc_845a:
000000000000845a         divss      xmm0, xmm1                                  ; CODE XREF=hash_initialize+404
000000000000845e         ucomiss    xmm0, dword [float_a2dc]                    ; float_a2dc
0000000000008465         jae        loc_8410

0000000000008467         ucomiss    xmm0, dword [float_a2e0]                    ; float_a2e0
000000000000846e         jb         loc_84c0

0000000000008470         subss      xmm0, dword [float_a2e0]                    ; float_a2e0
0000000000008478         movabs     rax, 0x8000000000000000
0000000000008482         cvttss2si  rbp, xmm0
0000000000008487         xor        rbp, rax
000000000000848a         jmp        loc_8398
000000000000848f         align      16

                     loc_8490:
0000000000008490         test       rbp, rbp                                    ; CODE XREF=hash_initialize+114
0000000000008493         movss      xmm1, dword [r15+8]
0000000000008499         jns        loc_8451

                     loc_849b:
000000000000849b         mov        rax, rbp                                    ; CODE XREF=hash_initialize+303
000000000000849e         pxor       xmm0, xmm0
00000000000084a2         shr        rax, 0x1
00000000000084a5         and        ebp, 0x1
00000000000084a8         or         rax, rbp
00000000000084ab         cvtsi2ss   xmm0, rax
00000000000084b0         addss      xmm0, xmm0
00000000000084b4         jmp        loc_845a
00000000000084b6         align      64

                     loc_84c0:
00000000000084c0         cvttss2si  rbp, xmm0                                   ; CODE XREF=hash_initialize+334
00000000000084c5         jmp        loc_8398

                     loc_84ca:
00000000000084ca         mov        ecx, 0x1                                    ; CODE XREF=hash_initialize+144
00000000000084cf         jmp        loc_83b6
00000000000084d4         align      32                                          ; End of unwind block (FDE at 0xba48)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_clear:
00000000000084e0         push       r12                                         ; Begin of unwind block (FDE at 0xba94)
00000000000084e2         push       rbp
00000000000084e3         mov        rbp, rdi
00000000000084e6         push       rbx
00000000000084e7         mov        r12, qword [rdi]
00000000000084ea         cmp        r12, qword [rdi+8]
00000000000084ee         jae        loc_855b

                     loc_84f0:
00000000000084f0         cmp        qword [r12], 0x0                            ; CODE XREF=hash_clear+121
00000000000084f5         je         loc_8551

00000000000084f7         mov        rbx, qword [r12+8]
00000000000084fc         mov        rax, qword [rbp+0x40]
0000000000008500         test       rbx, rbx
0000000000008503         je         loc_8535

0000000000008505         nop        dword [rax]

                     loc_8508:
0000000000008508         test       rax, rax                                    ; CODE XREF=hash_clear+83
000000000000850b         je         loc_8516

000000000000850d         mov        rdi, qword [rbx]
0000000000008510         call       rax
0000000000008512         mov        rax, qword [rbp+0x40]

                     loc_8516:
0000000000008516         mov        rdx, qword [rbx+8]                          ; CODE XREF=hash_clear+43
000000000000851a         mov        rcx, qword [rbp+0x48]
000000000000851e         mov        qword [rbx], 0x0
0000000000008525         test       rdx, rdx
0000000000008528         mov        qword [rbx+8], rcx
000000000000852c         mov        qword [rbp+0x48], rbx
0000000000008530         mov        rbx, rdx
0000000000008533         jne        loc_8508

                     loc_8535:
0000000000008535         test       rax, rax                                    ; CODE XREF=hash_clear+35
0000000000008538         je         loc_8540

000000000000853a         mov        rdi, qword [r12]
000000000000853e         call       rax

                     loc_8540:
0000000000008540         mov        qword [r12], 0x0                            ; CODE XREF=hash_clear+88
0000000000008548         mov        qword [r12+8], 0x0

                     loc_8551:
0000000000008551         add        r12, 0x10                                   ; CODE XREF=hash_clear+21
0000000000008555         cmp        qword [rbp+8], r12
0000000000008559         ja         loc_84f0

                     loc_855b:
000000000000855b         mov        qword [rbp+0x18], 0x0                       ; CODE XREF=hash_clear+14
0000000000008563         mov        qword [rbp+0x20], 0x0
000000000000856b         pop        rbx
000000000000856c         pop        rbp
000000000000856d         pop        r12
000000000000856f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_free:
0000000000008570         push       r12                                         ; End of unwind block (FDE at 0xba94), Begin of unwind block (FDE at 0xbac0), CODE XREF=randperm_new+797
0000000000008572         push       rbp
0000000000008573         mov        r12, rdi
0000000000008576         push       rbx
0000000000008577         cmp        qword [rdi+0x40], 0x0
000000000000857c         mov        rbp, qword [rdi]
000000000000857f         mov        rax, qword [rdi+8]
0000000000008583         je         loc_85d3

0000000000008585         cmp        qword [rdi+0x20], 0x0
000000000000858a         je         loc_85d3

000000000000858c         cmp        rbp, rax
000000000000858f         jae        loc_860c

0000000000008591         nop        dword [rax]

                     loc_8598:
0000000000008598         mov        rdi, qword [rbp]                            ; CODE XREF=hash_free+93
000000000000859c         test       rdi, rdi
000000000000859f         je         loc_85c6

00000000000085a1         mov        rbx, rbp
00000000000085a4         jmp        loc_85b3
00000000000085a6         align      16

                     loc_85b0:
00000000000085b0         mov        rdi, qword [rbx]                            ; CODE XREF=hash_free+79

                     loc_85b3:
00000000000085b3         call       qword [r12+0x40]                            ; CODE XREF=hash_free+52
00000000000085b8         mov        rbx, qword [rbx+8]
00000000000085bc         test       rbx, rbx
00000000000085bf         jne        loc_85b0

00000000000085c1         mov        rax, qword [r12+8]

                     loc_85c6:
00000000000085c6         add        rbp, 0x10                                   ; CODE XREF=hash_free+47
00000000000085ca         cmp        rax, rbp
00000000000085cd         ja         loc_8598

00000000000085cf         mov        rbp, qword [r12]

                     loc_85d3:
00000000000085d3         cmp        rbp, rax                                    ; CODE XREF=hash_free+19, hash_free+26
00000000000085d6         jae        loc_860c

00000000000085d8         nop        dword [rax+rax]

                     loc_85e0:
00000000000085e0         mov        rdi, qword [rbp+8]                          ; CODE XREF=hash_free+154
00000000000085e4         test       rdi, rdi
00000000000085e7         je         loc_8601

00000000000085e9         nop        dword [rax]

                     loc_85f0:
00000000000085f0         mov        rbx, qword [rdi+8]                          ; CODE XREF=hash_free+143
00000000000085f4         call       sub_1dd0                                    ; sub_1dd0
00000000000085f9         test       rbx, rbx
00000000000085fc         mov        rdi, rbx
00000000000085ff         jne        loc_85f0

                     loc_8601:
0000000000008601         add        rbp, 0x10                                   ; CODE XREF=hash_free+119
0000000000008605         cmp        qword [r12+8], rbp
000000000000860a         ja         loc_85e0

                     loc_860c:
000000000000860c         mov        rdi, qword [r12+0x48]                       ; CODE XREF=hash_free+31, hash_free+102
0000000000008611         test       rdi, rdi
0000000000008614         je         loc_8631

0000000000008616         nop        word [cs:rax+rax]

                     loc_8620:
0000000000008620         mov        rbx, qword [rdi+8]                          ; CODE XREF=hash_free+191
0000000000008624         call       sub_1dd0                                    ; sub_1dd0
0000000000008629         test       rbx, rbx
000000000000862c         mov        rdi, rbx
000000000000862f         jne        loc_8620

                     loc_8631:
0000000000008631         mov        rdi, qword [r12]                            ; CODE XREF=hash_free+164
0000000000008635         call       sub_1dd0                                    ; sub_1dd0
000000000000863a         pop        rbx
000000000000863b         mov        rdi, r12
000000000000863e         pop        rbp
000000000000863f         pop        r12
0000000000008641         jmp        sub_1dd0                                    ; sub_1dd0
                        ; endp
0000000000008646         align      16                                          ; End of unwind block (FDE at 0xbac0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     hash_rehash:
0000000000008650         push       r12                                         ; Begin of unwind block (FDE at 0xbaec), CODE XREF=hash_insert_if_absent+443, hash_delete+271
0000000000008652         push       rbp
0000000000008653         mov        rbp, rdi
0000000000008656         push       rbx
0000000000008657         sub        rsp, 0x60
000000000000865b         mov        r12, qword [rdi+0x28]
000000000000865f         mov        rax, qword [fs:0x28]
0000000000008668         mov        qword [rsp+0x78+var_20], rax
000000000000866d         xor        eax, eax
000000000000866f         cmp        byte [r12+0x10], 0x0
0000000000008675         jne        loc_86c8

0000000000008677         test       rsi, rsi
000000000000867a         js         loc_87f8

0000000000008680         pxor       xmm0, xmm0
0000000000008684         cvtsi2ss   xmm0, rsi

                     loc_8689:
0000000000008689         divss      xmm0, dword [r12+8]                         ; CODE XREF=hash_rehash+449
0000000000008690         ucomiss    xmm0, dword [float_a2dc]                    ; float_a2dc
0000000000008697         jae        loc_87d0

000000000000869d         ucomiss    xmm0, dword [float_a2e0]                    ; float_a2e0
00000000000086a4         jb         loc_8820

00000000000086aa         subss      xmm0, dword [float_a2e0]                    ; float_a2e0
00000000000086b2         movabs     rax, 0x8000000000000000
00000000000086bc         cvttss2si  rsi, xmm0
00000000000086c1         xor        rsi, rax
00000000000086c4         nop        dword [rax]

                     loc_86c8:
00000000000086c8         mov        rdi, rsi                                    ; CODE XREF=hash_rehash+37, hash_rehash+469
00000000000086cb         call       next_prime                                  ; next_prime
00000000000086d0         mov        edx, 0x8
00000000000086d5         mov        rbx, rax
00000000000086d8         xor        ecx, ecx
00000000000086da         mov        rax, rdx
00000000000086dd         mul        rbx
00000000000086e0         jo         loc_887f

                     loc_86e6:
00000000000086e6         test       rax, rax                                    ; CODE XREF=hash_rehash+564
00000000000086e9         mov        eax, 0x1
00000000000086ee         cmovs      rcx, rax
00000000000086f2         test       rbx, rbx
00000000000086f5         je         loc_87d0

00000000000086fb         and        ecx, 0x1
00000000000086fe         jne        loc_87d0

0000000000008704         cmp        qword [rbp+0x10], rbx
0000000000008708         je         loc_8830

000000000000870e         mov        esi, 0x10                                   ; argument "__size" for method j_calloc
0000000000008713         mov        rdi, rbx                                    ; argument "__nmemb" for method j_calloc
0000000000008716         call       j_calloc                                    ; calloc
000000000000871b         test       rax, rax
000000000000871e         mov        qword [rsp+0x78+var_78], rax
0000000000008722         je         loc_87d0

0000000000008728         mov        qword [rsp+0x78+var_68], rbx
000000000000872d         shl        rbx, 0x4
0000000000008731         mov        qword [rsp+0x78+var_50], r12
0000000000008736         add        rbx, rax
0000000000008739         mov        rax, qword [rbp+0x30]
000000000000873d         mov        r12, rsp
0000000000008740         xor        edx, edx
0000000000008742         mov        rsi, rbp
0000000000008745         mov        rdi, r12
0000000000008748         mov        qword [rsp+0x78+var_70], rbx
000000000000874d         mov        qword [rsp+0x78+var_60], 0x0
0000000000008756         mov        qword [rsp+0x78+var_48], rax
000000000000875b         mov        rax, qword [rbp+0x38]
000000000000875f         mov        qword [rsp+0x78+var_58], 0x0
0000000000008768         mov        qword [rsp+0x78+var_40], rax
000000000000876d         mov        rax, qword [rbp+0x40]
0000000000008771         mov        qword [rsp+0x78+var_38], rax
0000000000008776         mov        rax, qword [rbp+0x48]
000000000000877a         mov        qword [rsp+0x78+var_30], rax
000000000000877f         call       transfer_entries                            ; transfer_entries
0000000000008784         test       al, al
0000000000008786         mov        ebx, eax
0000000000008788         jne        loc_8840

000000000000878e         mov        rax, qword [rsp+0x78+var_30]
0000000000008793         mov        edx, 0x1
0000000000008798         mov        rsi, r12
000000000000879b         mov        rdi, rbp
000000000000879e         mov        qword [rbp+0x48], rax
00000000000087a2         call       transfer_entries                            ; transfer_entries
00000000000087a7         test       al, al
00000000000087a9         je         loc_8889

00000000000087af         xor        edx, edx
00000000000087b1         mov        rsi, r12
00000000000087b4         mov        rdi, rbp
00000000000087b7         call       transfer_entries                            ; transfer_entries
00000000000087bc         test       al, al
00000000000087be         je         loc_8889

00000000000087c4         mov        rdi, qword [rsp+0x78+var_78]
00000000000087c8         call       sub_1dd0                                    ; sub_1dd0
00000000000087cd         jmp        loc_87d2
00000000000087cf         align      16

                     loc_87d0:
00000000000087d0         xor        ebx, ebx                                    ; CODE XREF=hash_rehash+71, hash_rehash+165, hash_rehash+174, hash_rehash+210

                     loc_87d2:
00000000000087d2         mov        rcx, qword [rsp+0x78+var_20]                ; CODE XREF=hash_rehash+381, hash_rehash+485, hash_rehash+549
00000000000087d7         xor        rcx, qword [fs:0x28]
00000000000087e0         mov        eax, ebx
00000000000087e2         jne        loc_887a

00000000000087e8         add        rsp, 0x60
00000000000087ec         pop        rbx
00000000000087ed         pop        rbp
00000000000087ee         pop        r12
00000000000087f0         ret
                        ; endp
00000000000087f1         align      8

                     loc_87f8:
00000000000087f8         mov        rax, rsi                                    ; CODE XREF=hash_rehash+42
00000000000087fb         pxor       xmm0, xmm0
00000000000087ff         shr        rax, 0x1
0000000000008802         and        esi, 0x1
0000000000008805         or         rax, rsi
0000000000008808         cvtsi2ss   xmm0, rax
000000000000880d         addss      xmm0, xmm0
0000000000008811         jmp        loc_8689
0000000000008816         align      32

                     loc_8820:
0000000000008820         cvttss2si  rsi, xmm0                                   ; CODE XREF=hash_rehash+84
0000000000008825         jmp        loc_86c8
000000000000882a         align      16

                     loc_8830:
0000000000008830         mov        ebx, 0x1                                    ; CODE XREF=hash_rehash+184
0000000000008835         jmp        loc_87d2
0000000000008837         align      64

                     loc_8840:
0000000000008840         mov        rdi, qword [rbp]                            ; CODE XREF=hash_rehash+312
0000000000008844         call       sub_1dd0                                    ; sub_1dd0
0000000000008849         mov        rax, qword [rsp+0x78+var_78]
000000000000884d         mov        qword [rbp], rax
0000000000008851         mov        rax, qword [rsp+0x78+var_70]
0000000000008856         mov        qword [rbp+8], rax
000000000000885a         mov        rax, qword [rsp+0x78+var_68]
000000000000885f         mov        qword [rbp+0x10], rax
0000000000008863         mov        rax, qword [rsp+0x78+var_60]
0000000000008868         mov        qword [rbp+0x18], rax
000000000000886c         mov        rax, qword [rsp+0x78+var_30]
0000000000008871         mov        qword [rbp+0x48], rax
0000000000008875         jmp        loc_87d2

                     loc_887a:
000000000000887a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_rehash+402
                        ; endp

                     loc_887f:
000000000000887f         mov        ecx, 0x1                                    ; CODE XREF=hash_rehash+144
0000000000008884         jmp        loc_86e6

                     loc_8889:
0000000000008889         call       j_abort                                     ; abort, CODE XREF=hash_rehash+345, hash_rehash+366
                        ; endp
000000000000888e         align      16                                          ; End of unwind block (FDE at 0xbaec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     hash_insert_if_absent:
0000000000008890         push       r13                                         ; Begin of unwind block (FDE at 0xbb24), CODE XREF=hash_insert+27
0000000000008892         push       r12
0000000000008894         push       rbp
0000000000008895         push       rbx
0000000000008896         sub        rsp, 0x18
000000000000889a         mov        rax, qword [fs:0x28]
00000000000088a3         mov        qword [rsp+0x38+var_30], rax
00000000000088a8         xor        eax, eax
00000000000088aa         test       rsi, rsi
00000000000088ad         je         loc_8a6d

00000000000088b3         mov        r12, rsp
00000000000088b6         xor        ecx, ecx
00000000000088b8         mov        r13, rdx
00000000000088bb         mov        rdx, r12
00000000000088be         mov        rbx, rdi
00000000000088c1         mov        rbp, rsi
00000000000088c4         call       hash_find_entry                             ; hash_find_entry
00000000000088c9         test       rax, rax
00000000000088cc         mov        rdx, rax
00000000000088cf         je         loc_8900

00000000000088d1         xor        eax, eax
00000000000088d3         test       r13, r13
00000000000088d6         je         loc_88dc

00000000000088d8         mov        qword [r13], rdx

                     loc_88dc:
00000000000088dc         mov        rcx, qword [rsp+0x38+var_30]                ; CODE XREF=hash_insert_if_absent+70, hash_insert_if_absent+233, hash_insert_if_absent+507, hash_insert_if_absent+536
00000000000088e1         xor        rcx, qword [fs:0x28]
00000000000088ea         jne        loc_8b0f

00000000000088f0         add        rsp, 0x18
00000000000088f4         pop        rbx
00000000000088f5         pop        rbp
00000000000088f6         pop        r12
00000000000088f8         pop        r13
00000000000088fa         ret
                        ; endp
00000000000088fb         align      256

                     loc_8900:
0000000000008900         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_insert_if_absent+63
0000000000008904         test       rax, rax
0000000000008907         js         loc_8980

0000000000008909         pxor       xmm1, xmm1
000000000000890d         mov        rdx, qword [rbx+0x28]
0000000000008911         cvtsi2ss   xmm1, rax
0000000000008916         mov        rax, qword [rbx+0x10]
000000000000891a         test       rax, rax
000000000000891d         js         loc_89aa

                     loc_8923:
0000000000008923         pxor       xmm0, xmm0                                  ; CODE XREF=hash_insert_if_absent+276
0000000000008927         cvtsi2ss   xmm0, rax

                     loc_892c:
000000000000892c         mulss      xmm0, dword [rdx+8]                         ; CODE XREF=hash_insert_if_absent+307
0000000000008931         ucomiss    xmm1, xmm0
0000000000008934         ja         loc_89d0

                     loc_893a:
000000000000893a         mov        r12, qword [rsp+0x38+var_38]                ; CODE XREF=hash_insert_if_absent+392, hash_insert_if_absent+471
000000000000893e         cmp        qword [r12], 0x0
0000000000008943         je         loc_8a78

0000000000008949         mov        rax, qword [rbx+0x48]
000000000000894d         test       rax, rax
0000000000008950         je         loc_8a90

0000000000008956         mov        rdx, qword [rax+8]
000000000000895a         mov        qword [rbx+0x48], rdx

                     loc_895e:
000000000000895e         mov        rdx, qword [r12+8]                          ; CODE XREF=hash_insert_if_absent+525
0000000000008963         mov        qword [rax], rbp
0000000000008966         mov        qword [rax+8], rdx
000000000000896a         mov        qword [r12+8], rax
000000000000896f         mov        eax, 0x1
0000000000008974         add        qword [rbx+0x20], 0x1
0000000000008979         jmp        loc_88dc
000000000000897e         align      128

                     loc_8980:
0000000000008980         mov        rdx, rax                                    ; CODE XREF=hash_insert_if_absent+119
0000000000008983         pxor       xmm1, xmm1
0000000000008987         and        eax, 0x1
000000000000898a         shr        rdx, 0x1
000000000000898d         or         rdx, rax
0000000000008990         mov        rax, qword [rbx+0x10]
0000000000008994         cvtsi2ss   xmm1, rdx
0000000000008999         mov        rdx, qword [rbx+0x28]
000000000000899d         test       rax, rax
00000000000089a0         addss      xmm1, xmm1
00000000000089a4         jns        loc_8923

                     loc_89aa:
00000000000089aa         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+141
00000000000089ad         pxor       xmm0, xmm0
00000000000089b1         shr        rcx, 0x1
00000000000089b4         and        eax, 0x1
00000000000089b7         or         rcx, rax
00000000000089ba         cvtsi2ss   xmm0, rcx
00000000000089bf         addss      xmm0, xmm0
00000000000089c3         jmp        loc_892c
00000000000089c8         align      16

                     loc_89d0:
00000000000089d0         lea        rdi, qword [rbx+0x28]                       ; CODE XREF=hash_insert_if_absent+164
00000000000089d4         call       check_tuning.isra.0                         ; check_tuning.isra.0
00000000000089d9         mov        rax, qword [rbx+0x10]
00000000000089dd         mov        rdx, qword [rbx+0x28]
00000000000089e1         test       rax, rax
00000000000089e4         movss      xmm2, dword [rdx+8]
00000000000089e9         js         loc_8ab0

00000000000089ef         pxor       xmm0, xmm0
00000000000089f3         cvtsi2ss   xmm0, rax

                     loc_89f8:
00000000000089f8         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_insert_if_absent+569
00000000000089fc         test       rax, rax
00000000000089ff         js         loc_8ad0

0000000000008a05         pxor       xmm1, xmm1
0000000000008a09         cvtsi2ss   xmm1, rax

                     loc_8a0e:
0000000000008a0e         movaps     xmm3, xmm2                                  ; CODE XREF=hash_insert_if_absent+601
0000000000008a11         mulss      xmm3, xmm0
0000000000008a15         ucomiss    xmm1, xmm3
0000000000008a18         jbe        loc_893a

0000000000008a1e         cmp        byte [rdx+0x10], 0x0
0000000000008a22         mulss      xmm0, dword [rdx+0xc]
0000000000008a27         jne        loc_8a2d

0000000000008a29         mulss      xmm0, xmm2

                     loc_8a2d:
0000000000008a2d         ucomiss    xmm0, dword [float_a2dc]                    ; float_a2dc, CODE XREF=hash_insert_if_absent+407
0000000000008a34         jae        loc_8aa3

0000000000008a36         ucomiss    xmm0, dword [float_a2e0]                    ; float_a2e0
0000000000008a3d         jae        loc_8af0

0000000000008a43         cvttss2si  rsi, xmm0

                     loc_8a48:
0000000000008a48         mov        rdi, rbx                                    ; CODE XREF=hash_insert_if_absent+634
0000000000008a4b         call       hash_rehash                                 ; hash_rehash
0000000000008a50         test       al, al
0000000000008a52         je         loc_8aa3

0000000000008a54         xor        ecx, ecx
0000000000008a56         mov        rdx, r12
0000000000008a59         mov        rsi, rbp
0000000000008a5c         mov        rdi, rbx
0000000000008a5f         call       hash_find_entry                             ; hash_find_entry
0000000000008a64         test       rax, rax
0000000000008a67         je         loc_893a

                     loc_8a6d:
0000000000008a6d         call       j_abort                                     ; abort, CODE XREF=hash_insert_if_absent+29
                        ; endp
0000000000008a72         align      8

                     loc_8a78:
0000000000008a78         mov        qword [r12], rbp                            ; CODE XREF=hash_insert_if_absent+179
0000000000008a7c         mov        eax, 0x1
0000000000008a81         add        qword [rbx+0x20], 0x1
0000000000008a86         add        qword [rbx+0x18], 0x1
0000000000008a8b         jmp        loc_88dc

                     loc_8a90:
0000000000008a90         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=hash_insert_if_absent+192
0000000000008a95         call       j_malloc                                    ; malloc
0000000000008a9a         test       rax, rax
0000000000008a9d         jne        loc_895e

                     loc_8aa3:
0000000000008aa3         mov        eax, 0xffffffff                             ; CODE XREF=hash_insert_if_absent+420, hash_insert_if_absent+450
0000000000008aa8         jmp        loc_88dc
0000000000008aad         align      16

                     loc_8ab0:
0000000000008ab0         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+345
0000000000008ab3         pxor       xmm0, xmm0
0000000000008ab7         shr        rcx, 0x1
0000000000008aba         and        eax, 0x1
0000000000008abd         or         rcx, rax
0000000000008ac0         cvtsi2ss   xmm0, rcx
0000000000008ac5         addss      xmm0, xmm0
0000000000008ac9         jmp        loc_89f8
0000000000008ace         align      16

                     loc_8ad0:
0000000000008ad0         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+367
0000000000008ad3         pxor       xmm1, xmm1
0000000000008ad7         shr        rcx, 0x1
0000000000008ada         and        eax, 0x1
0000000000008add         or         rcx, rax
0000000000008ae0         cvtsi2ss   xmm1, rcx
0000000000008ae5         addss      xmm1, xmm1
0000000000008ae9         jmp        loc_8a0e
0000000000008aee         align      16

                     loc_8af0:
0000000000008af0         subss      xmm0, dword [float_a2e0]                    ; float_a2e0, CODE XREF=hash_insert_if_absent+429
0000000000008af8         movabs     rax, 0x8000000000000000
0000000000008b02         cvttss2si  rsi, xmm0
0000000000008b07         xor        rsi, rax
0000000000008b0a         jmp        loc_8a48

                     loc_8b0f:
0000000000008b0f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_insert_if_absent+90
                        ; endp
0000000000008b14         align      32                                          ; End of unwind block (FDE at 0xbb24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     hash_insert:
0000000000008b20         push       rbx                                         ; Begin of unwind block (FDE at 0xbb60), CODE XREF=randperm_new+573, randperm_new+598
0000000000008b21         mov        rbx, rsi
0000000000008b24         sub        rsp, 0x10
0000000000008b28         mov        rdx, rsp
0000000000008b2b         mov        rax, qword [fs:0x28]
0000000000008b34         mov        qword [rsp+0x18+var_10], rax
0000000000008b39         xor        eax, eax
0000000000008b3b         call       hash_insert_if_absent                       ; hash_insert_if_absent
0000000000008b40         cmp        eax, 0xffffffff
0000000000008b43         je         loc_8b70

0000000000008b45         test       eax, eax
0000000000008b47         jne        loc_8b4d

0000000000008b49         mov        rbx, qword [rsp+0x18+var_18]

                     loc_8b4d:
0000000000008b4d         mov        rcx, qword [rsp+0x18+var_10]                ; CODE XREF=hash_insert+39, hash_insert+82
0000000000008b52         xor        rcx, qword [fs:0x28]
0000000000008b5b         mov        rax, rbx
0000000000008b5e         jne        loc_8b74

0000000000008b60         add        rsp, 0x10
0000000000008b64         pop        rbx
0000000000008b65         ret
                        ; endp
0000000000008b66         align      16

                     loc_8b70:
0000000000008b70         xor        ebx, ebx                                    ; CODE XREF=hash_insert+35
0000000000008b72         jmp        loc_8b4d

                     loc_8b74:
0000000000008b74         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_insert+62
                        ; endp
0000000000008b79         align      128                                         ; End of unwind block (FDE at 0xbb60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     hash_delete:
0000000000008b80         push       r12                                         ; Begin of unwind block (FDE at 0xbb84), CODE XREF=randperm_new+483, randperm_new+515
0000000000008b82         push       rbp
0000000000008b83         mov        ecx, 0x1
0000000000008b88         push       rbx
0000000000008b89         mov        rbx, rdi
0000000000008b8c         sub        rsp, 0x10
0000000000008b90         mov        rdx, rsp
0000000000008b93         mov        rax, qword [fs:0x28]
0000000000008b9c         mov        qword [rsp+0x28+var_20], rax
0000000000008ba1         xor        eax, eax
0000000000008ba3         call       hash_find_entry                             ; hash_find_entry
0000000000008ba8         test       rax, rax
0000000000008bab         mov        rbp, rax
0000000000008bae         je         loc_8bbf

0000000000008bb0         mov        rax, qword [rsp+0x28+var_28]
0000000000008bb4         sub        qword [rbx+0x20], 0x1
0000000000008bb9         cmp        qword [rax], 0x0
0000000000008bbd         je         loc_8be0

                     loc_8bbf:
0000000000008bbf         mov        rcx, qword [rsp+0x28+var_20]                ; CODE XREF=hash_delete+46, hash_delete+159, hash_delete+229, hash_delete+278, hash_delete+321
0000000000008bc4         xor        rcx, qword [fs:0x28]
0000000000008bcd         mov        rax, rbp
0000000000008bd0         jne        loc_8d7e

0000000000008bd6         add        rsp, 0x10
0000000000008bda         pop        rbx
0000000000008bdb         pop        rbp
0000000000008bdc         pop        r12
0000000000008bde         ret
                        ; endp
0000000000008bdf         align      32

                     loc_8be0:
0000000000008be0         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_delete+61
0000000000008be4         sub        rax, 0x1
0000000000008be8         test       rax, rax
0000000000008beb         mov        qword [rbx+0x18], rax
0000000000008bef         js         loc_8cf0

0000000000008bf5         pxor       xmm0, xmm0
0000000000008bf9         cvtsi2ss   xmm0, rax

                     loc_8bfe:
0000000000008bfe         mov        rax, qword [rbx+0x10]                       ; CODE XREF=hash_delete+393
0000000000008c02         mov        rdx, qword [rbx+0x28]
0000000000008c06         test       rax, rax
0000000000008c09         js         loc_8cd0

0000000000008c0f         pxor       xmm1, xmm1
0000000000008c13         cvtsi2ss   xmm1, rax

                     loc_8c18:
0000000000008c18         mulss      xmm1, dword [rdx]                           ; CODE XREF=hash_delete+361
0000000000008c1c         ucomiss    xmm1, xmm0
0000000000008c1f         jbe        loc_8bbf

0000000000008c21         lea        rdi, qword [rbx+0x28]
0000000000008c25         call       check_tuning.isra.0                         ; check_tuning.isra.0
0000000000008c2a         mov        rax, qword [rbx+0x10]
0000000000008c2e         mov        rdx, qword [rbx+0x28]
0000000000008c32         test       rax, rax
0000000000008c35         js         loc_8d60

0000000000008c3b         pxor       xmm0, xmm0
0000000000008c3f         cvtsi2ss   xmm0, rax

                     loc_8c44:
0000000000008c44         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_delete+505
0000000000008c48         test       rax, rax
0000000000008c4b         js         loc_8d40

0000000000008c51         pxor       xmm1, xmm1
0000000000008c55         cvtsi2ss   xmm1, rax

                     loc_8c5a:
0000000000008c5a         movss      xmm2, dword [rdx]                           ; CODE XREF=hash_delete+473
0000000000008c5e         mulss      xmm2, xmm0
0000000000008c62         ucomiss    xmm2, xmm1
0000000000008c65         jbe        loc_8bbf

0000000000008c6b         cmp        byte [rdx+0x10], 0x0
0000000000008c6f         mulss      xmm0, dword [rdx+4]
0000000000008c74         je         loc_8d30

                     loc_8c7a:
0000000000008c7a         ucomiss    xmm0, dword [float_a2e0]                    ; float_a2e0, CODE XREF=hash_delete+437
0000000000008c81         jae        loc_8d10

0000000000008c87         cvttss2si  rsi, xmm0

                     loc_8c8c:
0000000000008c8c         mov        rdi, rbx                                    ; CODE XREF=hash_delete+426
0000000000008c8f         call       hash_rehash                                 ; hash_rehash
0000000000008c94         test       al, al
0000000000008c96         jne        loc_8bbf

0000000000008c9c         mov        rdi, qword [rbx+0x48]
0000000000008ca0         test       rdi, rdi
0000000000008ca3         je         loc_8cb9

0000000000008ca5         nop        dword [rax]

                     loc_8ca8:
0000000000008ca8         mov        r12, qword [rdi+8]                          ; CODE XREF=hash_delete+311
0000000000008cac         call       sub_1dd0                                    ; sub_1dd0
0000000000008cb1         test       r12, r12
0000000000008cb4         mov        rdi, r12
0000000000008cb7         jne        loc_8ca8

                     loc_8cb9:
0000000000008cb9         mov        qword [rbx+0x48], 0x0                       ; CODE XREF=hash_delete+291
0000000000008cc1         jmp        loc_8bbf
0000000000008cc6         align      16

                     loc_8cd0:
0000000000008cd0         mov        rcx, rax                                    ; CODE XREF=hash_delete+137
0000000000008cd3         pxor       xmm1, xmm1
0000000000008cd7         shr        rcx, 0x1
0000000000008cda         and        eax, 0x1
0000000000008cdd         or         rcx, rax
0000000000008ce0         cvtsi2ss   xmm1, rcx
0000000000008ce5         addss      xmm1, xmm1
0000000000008ce9         jmp        loc_8c18
0000000000008cee         align      16

                     loc_8cf0:
0000000000008cf0         mov        rdx, rax                                    ; CODE XREF=hash_delete+111
0000000000008cf3         pxor       xmm0, xmm0
0000000000008cf7         shr        rdx, 0x1
0000000000008cfa         and        eax, 0x1
0000000000008cfd         or         rdx, rax
0000000000008d00         cvtsi2ss   xmm0, rdx
0000000000008d05         addss      xmm0, xmm0
0000000000008d09         jmp        loc_8bfe
0000000000008d0e         align      16

                     loc_8d10:
0000000000008d10         subss      xmm0, dword [float_a2e0]                    ; float_a2e0, CODE XREF=hash_delete+257
0000000000008d18         movabs     rax, 0x8000000000000000
0000000000008d22         cvttss2si  rsi, xmm0
0000000000008d27         xor        rsi, rax
0000000000008d2a         jmp        loc_8c8c
0000000000008d2f         align      16

                     loc_8d30:
0000000000008d30         mulss      xmm0, dword [rdx+8]                         ; CODE XREF=hash_delete+244
0000000000008d35         jmp        loc_8c7a
0000000000008d3a         align      64

                     loc_8d40:
0000000000008d40         mov        rcx, rax                                    ; CODE XREF=hash_delete+203
0000000000008d43         pxor       xmm1, xmm1
0000000000008d47         shr        rcx, 0x1
0000000000008d4a         and        eax, 0x1
0000000000008d4d         or         rcx, rax
0000000000008d50         cvtsi2ss   xmm1, rcx
0000000000008d55         addss      xmm1, xmm1
0000000000008d59         jmp        loc_8c5a
0000000000008d5e         align      32

                     loc_8d60:
0000000000008d60         mov        rcx, rax                                    ; CODE XREF=hash_delete+181
0000000000008d63         pxor       xmm0, xmm0
0000000000008d67         shr        rcx, 0x1
0000000000008d6a         and        eax, 0x1
0000000000008d6d         or         rcx, rax
0000000000008d70         cvtsi2ss   xmm0, rcx
0000000000008d75         addss      xmm0, xmm0
0000000000008d79         jmp        loc_8c44

                     loc_8d7e:
0000000000008d7e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_delete+80
                        ; endp
0000000000008d83         align      16                                          ; End of unwind block (FDE at 0xbb84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
0000000000008d90         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xbbbc), CODE XREF=gettext_quote.part.1+11
0000000000008d94         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
0000000000008d99         call       j_nl_langinfo                               ; nl_langinfo
0000000000008d9e         test       rax, rax
0000000000008da1         je         loc_8dc0

0000000000008da3         cmp        byte [rax], 0x0
0000000000008da6         lea        rdx, qword [aAscii]                         ; "ASCII"
0000000000008dad         cmove      rax, rdx
0000000000008db1         add        rsp, 0x8
0000000000008db5         ret
                        ; endp
0000000000008db6         align      64

                     loc_8dc0:
0000000000008dc0         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
0000000000008dc7         add        rsp, 0x8
0000000000008dcb         ret
                        ; endp
0000000000008dcc         align      16                                          ; End of unwind block (FDE at 0xbbbc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dup_safer:
0000000000008dd0         mov        edx, 0x3                                    ; Begin of unwind block (FDE at 0xbbdc), CODE XREF=fopen_safer+50
0000000000008dd5         xor        esi, esi
0000000000008dd7         xor        eax, eax
0000000000008dd9         jmp        rpl_fcntl                                   ; rpl_fcntl
                        ; endp
0000000000008dde         align      32                                          ; End of unwind block (FDE at 0xbbdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int32_t, -104


                     rpl_fcntl:
0000000000008de0         push       r12                                         ; Begin of unwind block (FDE at 0xbbf4), CODE XREF=dup_safer+9
0000000000008de2         push       rbp
0000000000008de3         mov        ebp, edi
0000000000008de5         push       rbx
0000000000008de6         sub        rsp, 0x50
0000000000008dea         mov        rax, qword [fs:0x28]
0000000000008df3         mov        qword [rsp+0x68+var_50], rax
0000000000008df8         xor        eax, eax
0000000000008dfa         lea        rax, qword [rsp+0x68+arg_0]
0000000000008dff         test       esi, esi
0000000000008e01         mov        qword [rsp+0x68+var_38], rdx
0000000000008e06         mov        qword [rsp+0x68+var_30], rcx
0000000000008e0b         mov        qword [rsp+0x68+var_28], r8
0000000000008e10         mov        qword [rsp+0x68+var_60], rax
0000000000008e15         lea        rax, qword [rsp+0x68+var_48]
0000000000008e1a         mov        qword [rsp+0x68+var_20], r9
0000000000008e1f         mov        dword [rsp+0x68+var_68], 0x10
0000000000008e26         mov        qword [rsp+0x68+var_58], rax
0000000000008e2b         je         loc_9032

0000000000008e31         cmp        esi, 0x406
0000000000008e37         jne        loc_8e80

0000000000008e39         mov        rax, qword [rsp+0x68+var_58]
0000000000008e3e         cmp        dword [have_dupfd_cloexec.3326], 0x0        ; have_dupfd_cloexec.3326
0000000000008e45         mov        dword [rsp+0x68+var_68], 0x18
0000000000008e4c         mov        r12d, dword [rax+0x10]
0000000000008e50         mov        edx, r12d
0000000000008e53         js         loc_8f83

0000000000008e59         xor        eax, eax
0000000000008e5b         mov        esi, 0x406                                  ; argument "__cmd" for method j_fcntl
0000000000008e60         call       j_fcntl                                     ; fcntl
0000000000008e65         test       eax, eax
0000000000008e67         mov        ebx, eax
0000000000008e69         js         loc_8ff8

                     loc_8e6f:
0000000000008e6f         mov        dword [have_dupfd_cloexec.3326], 0x1        ; have_dupfd_cloexec.3326, CODE XREF=rpl_fcntl+544
0000000000008e79         jmp        loc_8ec0
0000000000008e7b         align      128

                     loc_8e80:
0000000000008e80         cmp        esi, 0xb                                    ; CODE XREF=rpl_fcntl+87
0000000000008e83         je         loc_8eb0

0000000000008e85         jg         loc_8ee0

0000000000008e87         cmp        esi, 0x4
0000000000008e8a         je         loc_8f60

0000000000008e90         jg         loc_8f50

0000000000008e96         cmp        esi, 0x2
0000000000008e99         je         loc_8f60

0000000000008e9f         jg         loc_8eb0

0000000000008ea1         cmp        esi, 0x1
0000000000008ea4         jne        loc_8f08

0000000000008ea6         nop        word [cs:rax+rax]

                     loc_8eb0:
0000000000008eb0         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl, CODE XREF=rpl_fcntl+163, rpl_fcntl+191, rpl_fcntl+278, rpl_fcntl+344, rpl_fcntl+358, rpl_fcntl+371
0000000000008eb2         xor        eax, eax
0000000000008eb4         call       j_fcntl                                     ; fcntl
0000000000008eb9         mov        ebx, eax
0000000000008ebb         nop        dword [rax+rax]

                     loc_8ec0:
0000000000008ec0         mov        rcx, qword [rsp+0x68+var_50]                ; CODE XREF=rpl_fcntl+153, rpl_fcntl+327, rpl_fcntl+414, rpl_fcntl+432, rpl_fcntl+445, rpl_fcntl+491, rpl_fcntl+524, rpl_fcntl+568, rpl_fcntl+613
0000000000008ec5         xor        rcx, qword [fs:0x28]
0000000000008ece         mov        eax, ebx
0000000000008ed0         jne        loc_902d

0000000000008ed6         add        rsp, 0x50
0000000000008eda         pop        rbx
0000000000008edb         pop        rbp
0000000000008edc         pop        r12
0000000000008ede         ret
                        ; endp
0000000000008edf         align      32

                     loc_8ee0:
0000000000008ee0         cmp        esi, 0x407                                  ; CODE XREF=rpl_fcntl+165
0000000000008ee6         jg         loc_8f30

0000000000008ee8         cmp        esi, 0x406
0000000000008eee         jge        loc_8f60

0000000000008ef0         cmp        esi, 0x401
0000000000008ef6         je         loc_8eb0

0000000000008ef8         cmp        esi, 0x402
0000000000008efe         je         loc_8f60

0000000000008f00         cmp        esi, 0x400
0000000000008f06         je         loc_8f60

                     loc_8f08:
0000000000008f08         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+196, rpl_fcntl+356, rpl_fcntl+382
0000000000008f0b         cmp        eax, 0x2f
0000000000008f0e         ja         loc_904a

0000000000008f14         add        rax, qword [rsp+0x68+var_58]

                     loc_8f19:
0000000000008f19         mov        rdx, qword [rax]                            ; CODE XREF=rpl_fcntl+623
0000000000008f1c         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
0000000000008f1e         xor        eax, eax
0000000000008f20         call       j_fcntl                                     ; fcntl
0000000000008f25         mov        ebx, eax
0000000000008f27         jmp        loc_8ec0
0000000000008f29         align      16

                     loc_8f30:
0000000000008f30         cmp        esi, 0x409                                  ; CODE XREF=rpl_fcntl+262
0000000000008f36         je         loc_8f60

0000000000008f38         jl         loc_8eb0

0000000000008f3e         cmp        esi, 0x40a
0000000000008f44         jne        loc_8f08

0000000000008f46         jmp        loc_8eb0
0000000000008f4b         align      16

                     loc_8f50:
0000000000008f50         cmp        esi, 0x9                                    ; CODE XREF=rpl_fcntl+176
0000000000008f53         je         loc_8eb0

0000000000008f59         jg         loc_8f60

0000000000008f5b         cmp        esi, 0x8
0000000000008f5e         jne        loc_8f08

                     loc_8f60:
0000000000008f60         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+170, rpl_fcntl+185, rpl_fcntl+270, rpl_fcntl+286, rpl_fcntl+294, rpl_fcntl+342, rpl_fcntl+377
0000000000008f63         cmp        eax, 0x2f
0000000000008f66         ja         loc_9054

0000000000008f6c         add        rax, qword [rsp+0x68+var_58]

                     loc_8f71:
0000000000008f71         mov        edx, dword [rax]                            ; CODE XREF=rpl_fcntl+633
0000000000008f73         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
0000000000008f75         xor        eax, eax
0000000000008f77         call       j_fcntl                                     ; fcntl
0000000000008f7c         mov        ebx, eax
0000000000008f7e         jmp        loc_8ec0

                     loc_8f83:
0000000000008f83         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl, CODE XREF=rpl_fcntl+115
0000000000008f85         xor        eax, eax
0000000000008f87         call       j_fcntl                                     ; fcntl
0000000000008f8c         test       eax, eax
0000000000008f8e         mov        ebx, eax
0000000000008f90         js         loc_8ec0

0000000000008f96         cmp        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
0000000000008f9d         jne        loc_8ec0

                     loc_8fa3:
0000000000008fa3         xor        eax, eax                                    ; CODE XREF=rpl_fcntl+584
0000000000008fa5         mov        esi, 0x1                                    ; argument "__cmd" for method j_fcntl
0000000000008faa         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
0000000000008fac         call       j_fcntl                                     ; fcntl
0000000000008fb1         test       eax, eax
0000000000008fb3         js         loc_8fd1

0000000000008fb5         or         eax, 0x1
0000000000008fb8         mov        esi, 0x2                                    ; argument "__cmd" for method j_fcntl
0000000000008fbd         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
0000000000008fbf         mov        edx, eax
0000000000008fc1         xor        eax, eax
0000000000008fc3         call       j_fcntl                                     ; fcntl
0000000000008fc8         cmp        eax, 0xffffffff
0000000000008fcb         jne        loc_8ec0

                     loc_8fd1:
0000000000008fd1         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+467
0000000000008fd6         mov        r12d, dword [rax]
0000000000008fd9         mov        rbp, rax
0000000000008fdc         mov        edi, ebx                                    ; argument "__fd" for method j_close
0000000000008fde         call       j_close                                     ; close
0000000000008fe3         mov        ebx, 0xffffffff
0000000000008fe8         mov        dword [rbp], r12d
0000000000008fec         jmp        loc_8ec0
0000000000008ff1         align      8

                     loc_8ff8:
0000000000008ff8         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+137
0000000000008ffd         cmp        dword [rax], 0x16
0000000000009000         jne        loc_8e6f

0000000000009006         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
0000000000009008         xor        eax, eax
000000000000900a         mov        edx, r12d
000000000000900d         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000900f         call       j_fcntl                                     ; fcntl
0000000000009014         test       eax, eax
0000000000009016         mov        ebx, eax
0000000000009018         js         loc_8ec0

000000000000901e         mov        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
0000000000009028         jmp        loc_8fa3

                     loc_902d:
000000000000902d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_fcntl+240
                        ; endp

                     loc_9032:
0000000000009032         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=rpl_fcntl+75
0000000000009037         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
0000000000009039         mov        edx, dword [rax+0x10]
000000000000903c         xor        eax, eax
000000000000903e         call       j_fcntl                                     ; fcntl
0000000000009043         mov        ebx, eax
0000000000009045         jmp        loc_8ec0

                     loc_904a:
000000000000904a         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+302
000000000000904f         jmp        loc_8f19

                     loc_9054:
0000000000009054         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+390
0000000000009059         jmp        loc_8f71
000000000000905e         align      32                                          ; End of unwind block (FDE at 0xbbf4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
0000000000009060         push       r15                                         ; Begin of unwind block (FDE at 0xbc2c), DATA XREF=_start+22
0000000000009062         push       r14
0000000000009064         mov        r15, rdx
0000000000009067         push       r13
0000000000009069         push       r12
000000000000906b         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
0000000000009072         push       rbp
0000000000009073         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000000907a         push       rbx
000000000000907b         mov        r13d, edi
000000000000907e         mov        r14, rsi
0000000000009081         sub        rbp, r12
0000000000009084         sub        rsp, 0x8
0000000000009088         sar        rbp, 0x3
000000000000908c         call       _init                                       ; _init
0000000000009091         test       rbp, rbp
0000000000009094         je         loc_90b6

0000000000009096         xor        ebx, ebx
0000000000009098         nop        dword [rax+rax]

                     loc_90a0:
00000000000090a0         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
00000000000090a3         mov        rsi, r14
00000000000090a6         mov        edi, r13d
00000000000090a9         call       qword [r12+rbx*8]
00000000000090ad         add        rbx, 0x1
00000000000090b1         cmp        rbp, rbx
00000000000090b4         jne        loc_90a0

                     loc_90b6:
00000000000090b6         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
00000000000090ba         pop        rbx
00000000000090bb         pop        rbp
00000000000090bc         pop        r12
00000000000090be         pop        r13
00000000000090c0         pop        r14
00000000000090c2         pop        r15
00000000000090c4         ret
                        ; endp
00000000000090c5         align      16                                          ; End of unwind block (FDE at 0xbc2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
00000000000090d0         ret                                                    ; Begin of unwind block (FDE at 0xbc74), DATA XREF=_start+15
                        ; endp
00000000000090d2         align      32                                          ; End of unwind block (FDE at 0xbc74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
00000000000090e0         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0xbc8c), __dso_handle, CODE XREF=main+120
00000000000090e7         xor        esi, esi
00000000000090e9         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
00000000000090ee         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xbc8c)
00000000000090ef         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0x90f0; 0x90f9[ (9 bytes)
        ; File offset : [37104; 37113[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
00000000000090f0         sub        rsp, 0x8
00000000000090f4         add        rsp, 0x8
00000000000090f8         ret
                        ; endp
00000000000090f9         db  0x00 ; '.'
00000000000090fa         db  0x00 ; '.'
00000000000090fb         db  0x00 ; '.'
00000000000090fc         db  0x00 ; '.'
00000000000090fd         db  0x00 ; '.'
00000000000090fe         db  0x00 ; '.'
00000000000090ff         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0x9100; 0xa2f6[ (4598 bytes)
        ; File offset : [37120; 41718[ (4598 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
0000000000009100         db  0x01 ; '.'
0000000000009101         db  0x00 ; '.'
0000000000009102         db  0x02 ; '.'
0000000000009103         db  0x00 ; '.'
0000000000009104         db  0x73 ; 's'                                         ; DATA XREF=main+751, usage+385, usage+700, usage+884, usage+903, usage+937
0000000000009105         db  0x68 ; 'h'
0000000000009106         db  0x75 ; 'u'
0000000000009107         db  0x66 ; 'f'
0000000000009108         db  0x00 ; '.'
0000000000009109         db  0x5b ; '['                                         ; DATA XREF=usage+397
000000000000910a         db  0x00 ; '.'
                     aTestInvocation:
000000000000910b         db         "test invocation", 0                        ; DATA XREF=usage+436
                     aMulticallInvoc:
000000000000911b         db         "Multi-call invocation", 0                  ; DATA XREF=usage+484
                     aSha224sum:
0000000000009131         db         "sha224sum", 0                              ; DATA XREF=usage+501
                     aSha2Utilities:
000000000000913b         db         "sha2 utilities", 0                         ; DATA XREF=usage+513
                     aSha256sum:
000000000000914a         db         "sha256sum", 0                              ; DATA XREF=usage+404
                     aSha384sum:
0000000000009154         db         "sha384sum", 0                              ; DATA XREF=usage+448
                     aSha512sum:
000000000000915e         db         "sha512sum", 0                              ; DATA XREF=usage+472
                     aNsOnlineHelpSn:
0000000000009168         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+586
000000000000917f         db  0x47 ; 'G'                                         ; DATA XREF=main+744, usage+614, usage+807, emit_bug_reporting_address+68
0000000000009180         db  0x4e ; 'N'
0000000000009181         db  0x55 ; 'U'
0000000000009182         db  0x20 ; ' '
                     aCoreutils:
0000000000009183         db         "coreutils", 0                              ; DATA XREF=main+89, main+101, usage+460
000000000000918d         db  0x65 ; 'e'                                         ; DATA XREF=usage+653, usage+846
000000000000918e         db  0x6e ; 'n'
000000000000918f         db  0x5f ; '_'
0000000000009190         db  0x00 ; '.'
                     aFullDocumentat:
0000000000009191         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+681, usage+870
                     aUsrlocalsharel:
00000000000091ac         db         "/usr/local/share/locale", 0                ; DATA XREF=main+82
                     aMultipleIOptio:
00000000000091c4         db         "multiple -i options specified", 0          ; DATA XREF=main+3635
                     aInvalidInputRa:
00000000000091e2         db         "invalid input range", 0                    ; DATA XREF=main+379, main+442, main+838, main+896
                     aSS:
00000000000091f6         db         "%s: %s", 0                                 ; DATA XREF=main+928, close_stdout+108, xnumtoumax+125
                     aInvalidLineCou:
00000000000091fd         db         "invalid line count: %s", 0                 ; DATA XREF=main+796
                     aPaulEggert:
0000000000009214         db         "Paul Eggert", 0                            ; DATA XREF=main+737
                     aEinorz:
0000000000009220         db         "ei:n:o:rz", 0                              ; DATA XREF=main+175
                     aExtraOperandS:
000000000000922a         db         "extra operand %s", 0                       ; DATA XREF=main+3130
                     aTooManyInputLi:
000000000000923b         db         "too many input lines", 0                   ; DATA XREF=main+3560
                     aNoLinesToRepea:
0000000000009250         db         "no lines to repeat", 0                     ; DATA XREF=main+3480
                     aLuc:
0000000000009263         db         "%lu%c", 0                                  ; DATA XREF=main+1570, main+1962
                     aWriteError:
0000000000009269         db         "write error", 0                            ; DATA XREF=main+2092, close_stdout+67
0000000000009275         db  0x77 ; 'w'                                         ; DATA XREF=main+1890, main+2772
0000000000009276         db  0x00 ; '.'
                     aEcho:
0000000000009277         db         "echo", 0
                     aInputrange:
000000000000927c         db         "input-range", 0
                     aHeadcount:
0000000000009288         db         "head-count", 0
                     aOutput:
0000000000009293         db         "output", 0
                     aRandomsource:
000000000000929a         db         "random-source", 0
                     aZeroterminated:
00000000000092a8         db         "zero-terminated", 0
                     aHelp:
00000000000092b8         db         "help", 0
                     aVersion:
00000000000092bd         db         "version", 0
00000000000092c5         align      8
                     aTrySHelpForMor:
00000000000092c8         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
00000000000092ef         align      16
                     aUsageSOptionFi:
00000000000092f0         db         "Usage: %s [OPTION]... [FILE]\n  or:  %s -e [OPTION]... [ARG]...\n  or:  %s -i LO-HI [OPTION]...\n", 0 ; DATA XREF=usage+93
000000000000934f         align      16
                     aWriteARandomPe:
0000000000009350         db         "Write a random permutation of the input lines to standard output.\n", 0 ; DATA XREF=usage+138
0000000000009393         align      8
                     aNwithNoFileOrW:
0000000000009398         db         "\nWith no FILE, or when FILE is -, read standard input.\n", 0 ; DATA XREF=usage+175
                     aNmandatoryArgu:
00000000000093d0         db         "\nMandatory arguments to long options are mandatory for short options too.\n", 0 ; DATA XREF=usage+212
000000000000941b         align      32
                     aEEchoTreatEach:
0000000000009420         db         "  -e, --echo                treat each ARG as an input line\n  -i, --input-range=LO-HI   treat each number LO through HI as an input line\n  -n, --head-count=COUNT    output at most COUNT lines\n  -o, --output=FILE         write result to FILE instead of stan" ; DATA XREF=usage+249
0000000000009520         db         "dard output\n      --random-source=FILE  get random bytes from FILE\n  -r, --repeat              output lines can be repeated\n", 0
000000000000959d         align      32
                     aZZeroterminate:
00000000000095a0         db         "  -z, --zero-terminated     line delimiter is NUL, not newline\n", 0 ; DATA XREF=usage+286
                     aHelpDisplayThi:
00000000000095e0         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+323
000000000000960d         align      16
                     aVersionOutputV:
0000000000009610         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+360
0000000000009646         align      8
                     aHttpswwwgnuorg:
0000000000009648         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+607, usage+707, usage+800, usage+910, emit_bug_reporting_address+61
                     aReportAnyTrans:
0000000000009670         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+951
00000000000096b7         align      8
                     aOrAvailableLoc:
00000000000096b8         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+750
00000000000096eb         align      16
                     aMultipleOutput:
00000000000096f0         db         "multiple output files specified", 0        ; DATA XREF=main+3226
                     aMultipleRandom:
0000000000009710         db         "multiple random sources specified", 0      ; DATA XREF=main+3599
0000000000009732         align      8
                     aCannotCombineE:
0000000000009738         db         "cannot combine -e and -i options", 0       ; DATA XREF=main+3041
                     a831:
0000000000009759         db         "8.31", 0                                   ; DATA XREF=Version
                     aDevnull:
000000000000975e         db         "/dev/null", 0                              ; DATA XREF=protect_fd+4
                     aANullArgv0WasP:
0000000000009768         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
00000000000097a0         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
00000000000097a8         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
00000000000097a9         db  0x74 ; 't'
00000000000097aa         db  0x2d ; '-'                                         ; DATA XREF=main+1043
00000000000097ab         db  0x00 ; '.'
00000000000097ac         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
00000000000097ad         db  0x80 ; '.'
00000000000097ae         db  0x98 ; '.'
00000000000097af         db  0x00 ; '.'
00000000000097b0         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
00000000000097b1         db  0x80 ; '.'
00000000000097b2         db  0x99 ; '.'
00000000000097b3         db  0x00 ; '.'
00000000000097b4         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
00000000000097b5         db  0x07 ; '.'
00000000000097b6         db  0x65 ; 'e'
00000000000097b7         db  0x00 ; '.'
00000000000097b8         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
00000000000097b9         db  0xaf ; '.'
00000000000097ba         db  0x00 ; '.'
00000000000097bb         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_3e50+1451, sub_3e50+1493, sub_3e50+2429
00000000000097bc         db  0x00 ; '.'
00000000000097bd         db  0x27 ; '''                                         ; DATA XREF=gettext_quote.part.1+39, quotearg_buffer_restyled+179, sub_3e50+132, sub_3e50+1338, sub_3e50+1670, sub_3e50+1697, sub_3e50+2352
00000000000097be         db  0x00 ; '.'
00000000000097bf         db  0x60 ; '`'                                         ; DATA XREF=sub_3e50+1627, sub_3e50+1654
00000000000097c0         db  0x00 ; '.'
                     aLiteral:
00000000000097c1         db         "literal", 0
                     aShell:
00000000000097c9         db         "shell", 0
                     aShellalways:
00000000000097cf         db         "shell-always", 0
00000000000097dc         db  0x73 ; 's'
00000000000097dd         db  0x68 ; 'h'
00000000000097de         db  0x65 ; 'e'
00000000000097df         db  0x6c ; 'l'
00000000000097e0         db  0x6c ; 'l'
00000000000097e1         db  0x2d ; '-'
                     aEscape:
00000000000097e2         db         "escape", 0
                     aShellescapealw:
00000000000097e9         db         "shell-escape-always", 0
                     aCmaybe:
00000000000097fd         db         "c-maybe", 0
                     aClocale:
0000000000009805         db         "clocale", 0
000000000000980d         align      32
                     switch_table_9820:        // switch_table
0000000000009820         dd         quotearg_buffer_restyled.loc_454a-switch_table_9820, quotearg_buffer_restyled.loc_37a3-switch_table_9820, quotearg_buffer_restyled.loc_4778-switch_table_9820, quotearg_buffer_restyled.loc_4584-switch_table_9820 ; switch table used at 0x37a1 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
0000000000009830         dd         quotearg_buffer_restyled.loc_4374-switch_table_9820, quotearg_buffer_restyled.loc_43d0-switch_table_9820, quotearg_buffer_restyled.loc_4425-switch_table_9820, quotearg_buffer_restyled.loc_446a-switch_table_9820
0000000000009840         dd         3 dup (quotearg_buffer_restyled.loc_44a4-switch_table_9820)
000000000000984c         db  0xd4 ; '.'                                         ; DATA XREF=quotearg_buffer_restyled+477
000000000000984d         db  0xa2 ; '.'
000000000000984e         db  0xff ; '.'
000000000000984f         db  0xff ; '.'
0000000000009850         db  0xbc ; '.'
0000000000009851         db  0xa3 ; '.'
0000000000009852         db  0xff ; '.'
0000000000009853         db  0xff ; '.'
0000000000009854         db  0xbc ; '.'
0000000000009855         db  0xa3 ; '.'
0000000000009856         db  0xff ; '.'
0000000000009857         db  0xff ; '.'
0000000000009858         db  0xbc ; '.'
0000000000009859         db  0xa3 ; '.'
000000000000985a         db  0xff ; '.'
000000000000985b         db  0xff ; '.'
000000000000985c         db  0xbc ; '.'
000000000000985d         db  0xa3 ; '.'
000000000000985e         db  0xff ; '.'
000000000000985f         db  0xff ; '.'
0000000000009860         db  0xbc ; '.'
0000000000009861         db  0xa3 ; '.'
0000000000009862         db  0xff ; '.'
0000000000009863         db  0xff ; '.'
0000000000009864         db  0xbc ; '.'
0000000000009865         db  0xa3 ; '.'
0000000000009866         db  0xff ; '.'
0000000000009867         db  0xff ; '.'
0000000000009868         db  0x14 ; '.'
0000000000009869         db  0xa3 ; '.'
000000000000986a         db  0xff ; '.'
000000000000986b         db  0xff ; '.'
000000000000986c         db  0x1c ; '.'
000000000000986d         db  0xa2 ; '.'
000000000000986e         db  0xff ; '.'
000000000000986f         db  0xff ; '.'
0000000000009870         db  0xdc ; '.'
0000000000009871         db  0xa1 ; '.'
0000000000009872         db  0xff ; '.'
0000000000009873         db  0xff ; '.'
0000000000009874         db  0xa4 ; '.'
0000000000009875         db  0xa3 ; '.'
0000000000009876         db  0xff ; '.'
0000000000009877         db  0xff ; '.'
0000000000009878         db  0x94 ; '.'
0000000000009879         db  0xa3 ; '.'
000000000000987a         db  0xff ; '.'
000000000000987b         db  0xff ; '.'
000000000000987c         db  0x84 ; '.'
000000000000987d         db  0xa3 ; '.'
000000000000987e         db  0xff ; '.'
000000000000987f         db  0xff ; '.'
0000000000009880         db  0x74 ; 't'
0000000000009881         db  0xa3 ; '.'
0000000000009882         db  0xff ; '.'
0000000000009883         db  0xff ; '.'
0000000000009884         db  0xbc ; '.'
0000000000009885         db  0xa3 ; '.'
0000000000009886         db  0xff ; '.'
0000000000009887         db  0xff ; '.'
0000000000009888         db  0xbc ; '.'
0000000000009889         db  0xa3 ; '.'
000000000000988a         db  0xff ; '.'
000000000000988b         db  0xff ; '.'
000000000000988c         db  0xbc ; '.'
000000000000988d         db  0xa3 ; '.'
000000000000988e         db  0xff ; '.'
000000000000988f         db  0xff ; '.'
0000000000009890         db  0xbc ; '.'
0000000000009891         db  0xa3 ; '.'
0000000000009892         db  0xff ; '.'
0000000000009893         db  0xff ; '.'
0000000000009894         db  0xbc ; '.'
0000000000009895         db  0xa3 ; '.'
0000000000009896         db  0xff ; '.'
0000000000009897         db  0xff ; '.'
0000000000009898         db  0xbc ; '.'
0000000000009899         db  0xa3 ; '.'
000000000000989a         db  0xff ; '.'
000000000000989b         db  0xff ; '.'
000000000000989c         db  0xbc ; '.'
000000000000989d         db  0xa3 ; '.'
000000000000989e         db  0xff ; '.'
000000000000989f         db  0xff ; '.'
00000000000098a0         db  0xbc ; '.'
00000000000098a1         db  0xa3 ; '.'
00000000000098a2         db  0xff ; '.'
00000000000098a3         db  0xff ; '.'
00000000000098a4         db  0xbc ; '.'
00000000000098a5         db  0xa3 ; '.'
00000000000098a6         db  0xff ; '.'
00000000000098a7         db  0xff ; '.'
00000000000098a8         db  0xbc ; '.'
00000000000098a9         db  0xa3 ; '.'
00000000000098aa         db  0xff ; '.'
00000000000098ab         db  0xff ; '.'
00000000000098ac         db  0xbc ; '.'
00000000000098ad         db  0xa3 ; '.'
00000000000098ae         db  0xff ; '.'
00000000000098af         db  0xff ; '.'
00000000000098b0         db  0xbc ; '.'
00000000000098b1         db  0xa3 ; '.'
00000000000098b2         db  0xff ; '.'
00000000000098b3         db  0xff ; '.'
00000000000098b4         db  0xbc ; '.'
00000000000098b5         db  0xa3 ; '.'
00000000000098b6         db  0xff ; '.'
00000000000098b7         db  0xff ; '.'
00000000000098b8         db  0xbc ; '.'
00000000000098b9         db  0xa3 ; '.'
00000000000098ba         db  0xff ; '.'
00000000000098bb         db  0xff ; '.'
00000000000098bc         db  0xbc ; '.'
00000000000098bd         db  0xa3 ; '.'
00000000000098be         db  0xff ; '.'
00000000000098bf         db  0xff ; '.'
00000000000098c0         db  0xbc ; '.'
00000000000098c1         db  0xa3 ; '.'
00000000000098c2         db  0xff ; '.'
00000000000098c3         db  0xff ; '.'
00000000000098c4         db  0xbc ; '.'
00000000000098c5         db  0xa3 ; '.'
00000000000098c6         db  0xff ; '.'
00000000000098c7         db  0xff ; '.'
00000000000098c8         db  0xbc ; '.'
00000000000098c9         db  0xa3 ; '.'
00000000000098ca         db  0xff ; '.'
00000000000098cb         db  0xff ; '.'
00000000000098cc         db  0x64 ; 'd'
00000000000098cd         db  0xa3 ; '.'
00000000000098ce         db  0xff ; '.'
00000000000098cf         db  0xff ; '.'
00000000000098d0         db  0x54 ; 'T'
00000000000098d1         db  0xa3 ; '.'
00000000000098d2         db  0xff ; '.'
00000000000098d3         db  0xff ; '.'
00000000000098d4         db  0x54 ; 'T'
00000000000098d5         db  0xa3 ; '.'
00000000000098d6         db  0xff ; '.'
00000000000098d7         db  0xff ; '.'
00000000000098d8         db  0x24 ; '$'
00000000000098d9         db  0xa3 ; '.'
00000000000098da         db  0xff ; '.'
00000000000098db         db  0xff ; '.'
00000000000098dc         db  0x54 ; 'T'
00000000000098dd         db  0xa3 ; '.'
00000000000098de         db  0xff ; '.'
00000000000098df         db  0xff ; '.'
00000000000098e0         db  0xfc ; '.'
00000000000098e1         db  0xa2 ; '.'
00000000000098e2         db  0xff ; '.'
00000000000098e3         db  0xff ; '.'
00000000000098e4         db  0x54 ; 'T'
00000000000098e5         db  0xa3 ; '.'
00000000000098e6         db  0xff ; '.'
00000000000098e7         db  0xff ; '.'
00000000000098e8         db  0xb7 ; '.'
00000000000098e9         db  0xa1 ; '.'
00000000000098ea         db  0xff ; '.'
00000000000098eb         db  0xff ; '.'
00000000000098ec         db  0x54 ; 'T'
00000000000098ed         db  0xa3 ; '.'
00000000000098ee         db  0xff ; '.'
00000000000098ef         db  0xff ; '.'
00000000000098f0         db  0x54 ; 'T'
00000000000098f1         db  0xa3 ; '.'
00000000000098f2         db  0xff ; '.'
00000000000098f3         db  0xff ; '.'
00000000000098f4         db  0x54 ; 'T'
00000000000098f5         db  0xa3 ; '.'
00000000000098f6         db  0xff ; '.'
00000000000098f7         db  0xff ; '.'
00000000000098f8         db  0xfc ; '.'
00000000000098f9         db  0xa2 ; '.'
00000000000098fa         db  0xff ; '.'
00000000000098fb         db  0xff ; '.'
00000000000098fc         db  0xfc ; '.'
00000000000098fd         db  0xa2 ; '.'
00000000000098fe         db  0xff ; '.'
00000000000098ff         db  0xff ; '.'
0000000000009900         db  0xfc ; '.'
0000000000009901         db  0xa2 ; '.'
0000000000009902         db  0xff ; '.'
0000000000009903         db  0xff ; '.'
0000000000009904         db  0xfc ; '.'
0000000000009905         db  0xa2 ; '.'
0000000000009906         db  0xff ; '.'
0000000000009907         db  0xff ; '.'
0000000000009908         db  0xfc ; '.'
0000000000009909         db  0xa2 ; '.'
000000000000990a         db  0xff ; '.'
000000000000990b         db  0xff ; '.'
000000000000990c         db  0xfc ; '.'
000000000000990d         db  0xa2 ; '.'
000000000000990e         db  0xff ; '.'
000000000000990f         db  0xff ; '.'
0000000000009910         db  0xfc ; '.'
0000000000009911         db  0xa2 ; '.'
0000000000009912         db  0xff ; '.'
0000000000009913         db  0xff ; '.'
0000000000009914         db  0xfc ; '.'
0000000000009915         db  0xa2 ; '.'
0000000000009916         db  0xff ; '.'
0000000000009917         db  0xff ; '.'
0000000000009918         db  0xfc ; '.'
0000000000009919         db  0xa2 ; '.'
000000000000991a         db  0xff ; '.'
000000000000991b         db  0xff ; '.'
000000000000991c         db  0xfc ; '.'
000000000000991d         db  0xa2 ; '.'
000000000000991e         db  0xff ; '.'
000000000000991f         db  0xff ; '.'
0000000000009920         db  0xfc ; '.'
0000000000009921         db  0xa2 ; '.'
0000000000009922         db  0xff ; '.'
0000000000009923         db  0xff ; '.'
0000000000009924         db  0xfc ; '.'
0000000000009925         db  0xa2 ; '.'
0000000000009926         db  0xff ; '.'
0000000000009927         db  0xff ; '.'
0000000000009928         db  0xfc ; '.'
0000000000009929         db  0xa2 ; '.'
000000000000992a         db  0xff ; '.'
000000000000992b         db  0xff ; '.'
000000000000992c         db  0xfc ; '.'
000000000000992d         db  0xa2 ; '.'
000000000000992e         db  0xff ; '.'
000000000000992f         db  0xff ; '.'
0000000000009930         db  0xfc ; '.'
0000000000009931         db  0xa2 ; '.'
0000000000009932         db  0xff ; '.'
0000000000009933         db  0xff ; '.'
0000000000009934         db  0xfc ; '.'
0000000000009935         db  0xa2 ; '.'
0000000000009936         db  0xff ; '.'
0000000000009937         db  0xff ; '.'
0000000000009938         db  0x54 ; 'T'
0000000000009939         db  0xa3 ; '.'
000000000000993a         db  0xff ; '.'
000000000000993b         db  0xff ; '.'
000000000000993c         db  0x54 ; 'T'
000000000000993d         db  0xa3 ; '.'
000000000000993e         db  0xff ; '.'
000000000000993f         db  0xff ; '.'
0000000000009940         db  0x54 ; 'T'
0000000000009941         db  0xa3 ; '.'
0000000000009942         db  0xff ; '.'
0000000000009943         db  0xff ; '.'
0000000000009944         db  0x54 ; 'T'
0000000000009945         db  0xa3 ; '.'
0000000000009946         db  0xff ; '.'
0000000000009947         db  0xff ; '.'
0000000000009948         db  0x87 ; '.'
0000000000009949         db  0xa1 ; '.'
000000000000994a         db  0xff ; '.'
000000000000994b         db  0xff ; '.'
000000000000994c         db  0xbc ; '.'
000000000000994d         db  0xa3 ; '.'
000000000000994e         db  0xff ; '.'
000000000000994f         db  0xff ; '.'
0000000000009950         db  0xfc ; '.'
0000000000009951         db  0xa2 ; '.'
0000000000009952         db  0xff ; '.'
0000000000009953         db  0xff ; '.'
0000000000009954         db  0xfc ; '.'
0000000000009955         db  0xa2 ; '.'
0000000000009956         db  0xff ; '.'
0000000000009957         db  0xff ; '.'
0000000000009958         db  0xfc ; '.'
0000000000009959         db  0xa2 ; '.'
000000000000995a         db  0xff ; '.'
000000000000995b         db  0xff ; '.'
000000000000995c         db  0xfc ; '.'
000000000000995d         db  0xa2 ; '.'
000000000000995e         db  0xff ; '.'
000000000000995f         db  0xff ; '.'
0000000000009960         db  0xfc ; '.'
0000000000009961         db  0xa2 ; '.'
0000000000009962         db  0xff ; '.'
0000000000009963         db  0xff ; '.'
0000000000009964         db  0xfc ; '.'
0000000000009965         db  0xa2 ; '.'
0000000000009966         db  0xff ; '.'
0000000000009967         db  0xff ; '.'
0000000000009968         db  0xfc ; '.'
0000000000009969         db  0xa2 ; '.'
000000000000996a         db  0xff ; '.'
000000000000996b         db  0xff ; '.'
000000000000996c         db  0xfc ; '.'
000000000000996d         db  0xa2 ; '.'
000000000000996e         db  0xff ; '.'
000000000000996f         db  0xff ; '.'
0000000000009970         db  0xfc ; '.'
0000000000009971         db  0xa2 ; '.'
0000000000009972         db  0xff ; '.'
0000000000009973         db  0xff ; '.'
0000000000009974         db  0xfc ; '.'
0000000000009975         db  0xa2 ; '.'
0000000000009976         db  0xff ; '.'
0000000000009977         db  0xff ; '.'
0000000000009978         db  0xfc ; '.'
0000000000009979         db  0xa2 ; '.'
000000000000997a         db  0xff ; '.'
000000000000997b         db  0xff ; '.'
000000000000997c         db  0xfc ; '.'
000000000000997d         db  0xa2 ; '.'
000000000000997e         db  0xff ; '.'
000000000000997f         db  0xff ; '.'
0000000000009980         db  0xfc ; '.'
0000000000009981         db  0xa2 ; '.'
0000000000009982         db  0xff ; '.'
0000000000009983         db  0xff ; '.'
0000000000009984         db  0xfc ; '.'
0000000000009985         db  0xa2 ; '.'
0000000000009986         db  0xff ; '.'
0000000000009987         db  0xff ; '.'
0000000000009988         db  0xfc ; '.'
0000000000009989         db  0xa2 ; '.'
000000000000998a         db  0xff ; '.'
000000000000998b         db  0xff ; '.'
000000000000998c         db  0xfc ; '.'
000000000000998d         db  0xa2 ; '.'
000000000000998e         db  0xff ; '.'
000000000000998f         db  0xff ; '.'
0000000000009990         db  0xfc ; '.'
0000000000009991         db  0xa2 ; '.'
0000000000009992         db  0xff ; '.'
0000000000009993         db  0xff ; '.'
0000000000009994         db  0xfc ; '.'
0000000000009995         db  0xa2 ; '.'
0000000000009996         db  0xff ; '.'
0000000000009997         db  0xff ; '.'
0000000000009998         db  0xfc ; '.'
0000000000009999         db  0xa2 ; '.'
000000000000999a         db  0xff ; '.'
000000000000999b         db  0xff ; '.'
000000000000999c         db  0xfc ; '.'
000000000000999d         db  0xa2 ; '.'
000000000000999e         db  0xff ; '.'
000000000000999f         db  0xff ; '.'
00000000000099a0         db  0xfc ; '.'
00000000000099a1         db  0xa2 ; '.'
00000000000099a2         db  0xff ; '.'
00000000000099a3         db  0xff ; '.'
00000000000099a4         db  0xfc ; '.'
00000000000099a5         db  0xa2 ; '.'
00000000000099a6         db  0xff ; '.'
00000000000099a7         db  0xff ; '.'
00000000000099a8         db  0xfc ; '.'
00000000000099a9         db  0xa2 ; '.'
00000000000099aa         db  0xff ; '.'
00000000000099ab         db  0xff ; '.'
00000000000099ac         db  0xfc ; '.'
00000000000099ad         db  0xa2 ; '.'
00000000000099ae         db  0xff ; '.'
00000000000099af         db  0xff ; '.'
00000000000099b0         db  0xfc ; '.'
00000000000099b1         db  0xa2 ; '.'
00000000000099b2         db  0xff ; '.'
00000000000099b3         db  0xff ; '.'
00000000000099b4         db  0xfc ; '.'
00000000000099b5         db  0xa2 ; '.'
00000000000099b6         db  0xff ; '.'
00000000000099b7         db  0xff ; '.'
00000000000099b8         db  0x54 ; 'T'
00000000000099b9         db  0xa3 ; '.'
00000000000099ba         db  0xff ; '.'
00000000000099bb         db  0xff ; '.'
00000000000099bc         db  0x2c ; ','
00000000000099bd         db  0xa2 ; '.'
00000000000099be         db  0xff ; '.'
00000000000099bf         db  0xff ; '.'
00000000000099c0         db  0xfc ; '.'
00000000000099c1         db  0xa2 ; '.'
00000000000099c2         db  0xff ; '.'
00000000000099c3         db  0xff ; '.'
00000000000099c4         db  0x54 ; 'T'
00000000000099c5         db  0xa3 ; '.'
00000000000099c6         db  0xff ; '.'
00000000000099c7         db  0xff ; '.'
00000000000099c8         db  0xfc ; '.'
00000000000099c9         db  0xa2 ; '.'
00000000000099ca         db  0xff ; '.'
00000000000099cb         db  0xff ; '.'
00000000000099cc         db  0x54 ; 'T'
00000000000099cd         db  0xa3 ; '.'
00000000000099ce         db  0xff ; '.'
00000000000099cf         db  0xff ; '.'
00000000000099d0         db  0xfc ; '.'
00000000000099d1         db  0xa2 ; '.'
00000000000099d2         db  0xff ; '.'
00000000000099d3         db  0xff ; '.'
00000000000099d4         db  0xfc ; '.'
00000000000099d5         db  0xa2 ; '.'
00000000000099d6         db  0xff ; '.'
00000000000099d7         db  0xff ; '.'
00000000000099d8         db  0xfc ; '.'
00000000000099d9         db  0xa2 ; '.'
00000000000099da         db  0xff ; '.'
00000000000099db         db  0xff ; '.'
00000000000099dc         db  0xfc ; '.'
00000000000099dd         db  0xa2 ; '.'
00000000000099de         db  0xff ; '.'
00000000000099df         db  0xff ; '.'
00000000000099e0         db  0xfc ; '.'
00000000000099e1         db  0xa2 ; '.'
00000000000099e2         db  0xff ; '.'
00000000000099e3         db  0xff ; '.'
00000000000099e4         db  0xfc ; '.'
00000000000099e5         db  0xa2 ; '.'
00000000000099e6         db  0xff ; '.'
00000000000099e7         db  0xff ; '.'
00000000000099e8         db  0xfc ; '.'
00000000000099e9         db  0xa2 ; '.'
00000000000099ea         db  0xff ; '.'
00000000000099eb         db  0xff ; '.'
00000000000099ec         db  0xfc ; '.'
00000000000099ed         db  0xa2 ; '.'
00000000000099ee         db  0xff ; '.'
00000000000099ef         db  0xff ; '.'
00000000000099f0         db  0xfc ; '.'
00000000000099f1         db  0xa2 ; '.'
00000000000099f2         db  0xff ; '.'
00000000000099f3         db  0xff ; '.'
00000000000099f4         db  0xfc ; '.'
00000000000099f5         db  0xa2 ; '.'
00000000000099f6         db  0xff ; '.'
00000000000099f7         db  0xff ; '.'
00000000000099f8         db  0xfc ; '.'
00000000000099f9         db  0xa2 ; '.'
00000000000099fa         db  0xff ; '.'
00000000000099fb         db  0xff ; '.'
00000000000099fc         db  0xfc ; '.'
00000000000099fd         db  0xa2 ; '.'
00000000000099fe         db  0xff ; '.'
00000000000099ff         db  0xff ; '.'
0000000000009a00         db  0xfc ; '.'
0000000000009a01         db  0xa2 ; '.'
0000000000009a02         db  0xff ; '.'
0000000000009a03         db  0xff ; '.'
0000000000009a04         db  0xfc ; '.'
0000000000009a05         db  0xa2 ; '.'
0000000000009a06         db  0xff ; '.'
0000000000009a07         db  0xff ; '.'
0000000000009a08         db  0xfc ; '.'
0000000000009a09         db  0xa2 ; '.'
0000000000009a0a         db  0xff ; '.'
0000000000009a0b         db  0xff ; '.'
0000000000009a0c         db  0xfc ; '.'
0000000000009a0d         db  0xa2 ; '.'
0000000000009a0e         db  0xff ; '.'
0000000000009a0f         db  0xff ; '.'
0000000000009a10         db  0xfc ; '.'
0000000000009a11         db  0xa2 ; '.'
0000000000009a12         db  0xff ; '.'
0000000000009a13         db  0xff ; '.'
0000000000009a14         db  0xfc ; '.'
0000000000009a15         db  0xa2 ; '.'
0000000000009a16         db  0xff ; '.'
0000000000009a17         db  0xff ; '.'
0000000000009a18         db  0xfc ; '.'
0000000000009a19         db  0xa2 ; '.'
0000000000009a1a         db  0xff ; '.'
0000000000009a1b         db  0xff ; '.'
0000000000009a1c         db  0xfc ; '.'
0000000000009a1d         db  0xa2 ; '.'
0000000000009a1e         db  0xff ; '.'
0000000000009a1f         db  0xff ; '.'
0000000000009a20         db  0xfc ; '.'
0000000000009a21         db  0xa2 ; '.'
0000000000009a22         db  0xff ; '.'
0000000000009a23         db  0xff ; '.'
0000000000009a24         db  0xfc ; '.'
0000000000009a25         db  0xa2 ; '.'
0000000000009a26         db  0xff ; '.'
0000000000009a27         db  0xff ; '.'
0000000000009a28         db  0xfc ; '.'
0000000000009a29         db  0xa2 ; '.'
0000000000009a2a         db  0xff ; '.'
0000000000009a2b         db  0xff ; '.'
0000000000009a2c         db  0xfc ; '.'
0000000000009a2d         db  0xa2 ; '.'
0000000000009a2e         db  0xff ; '.'
0000000000009a2f         db  0xff ; '.'
0000000000009a30         db  0xfc ; '.'
0000000000009a31         db  0xa2 ; '.'
0000000000009a32         db  0xff ; '.'
0000000000009a33         db  0xff ; '.'
0000000000009a34         db  0xfc ; '.'
0000000000009a35         db  0xa2 ; '.'
0000000000009a36         db  0xff ; '.'
0000000000009a37         db  0xff ; '.'
0000000000009a38         db  0xb7 ; '.'
0000000000009a39         db  0xa0 ; '.'
0000000000009a3a         db  0xff ; '.'
0000000000009a3b         db  0xff ; '.'
0000000000009a3c         db  0x54 ; 'T'
0000000000009a3d         db  0xa3 ; '.'
0000000000009a3e         db  0xff ; '.'
0000000000009a3f         db  0xff ; '.'
0000000000009a40         db  0xb7 ; '.'
0000000000009a41         db  0xa0 ; '.'
0000000000009a42         db  0xff ; '.'
0000000000009a43         db  0xff ; '.'
0000000000009a44         db  0x24 ; '$'
0000000000009a45         db  0xa3 ; '.'
0000000000009a46         db  0xff ; '.'
0000000000009a47         db  0xff ; '.'
0000000000009a48         db  0xa8 ; '.'                                         ; DATA XREF=sub_3bf0+137
0000000000009a49         db  0xa2 ; '.'
0000000000009a4a         db  0xff ; '.'
0000000000009a4b         db  0xff ; '.'
0000000000009a4c         db  0xb8 ; '.'
0000000000009a4d         db  0xa1 ; '.'
0000000000009a4e         db  0xff ; '.'
0000000000009a4f         db  0xff ; '.'
0000000000009a50         db  0xb8 ; '.'
0000000000009a51         db  0xa1 ; '.'
0000000000009a52         db  0xff ; '.'
0000000000009a53         db  0xff ; '.'
0000000000009a54         db  0xb8 ; '.'
0000000000009a55         db  0xa1 ; '.'
0000000000009a56         db  0xff ; '.'
0000000000009a57         db  0xff ; '.'
0000000000009a58         db  0xb8 ; '.'
0000000000009a59         db  0xa1 ; '.'
0000000000009a5a         db  0xff ; '.'
0000000000009a5b         db  0xff ; '.'
0000000000009a5c         db  0xb8 ; '.'
0000000000009a5d         db  0xa1 ; '.'
0000000000009a5e         db  0xff ; '.'
0000000000009a5f         db  0xff ; '.'
0000000000009a60         db  0xb8 ; '.'
0000000000009a61         db  0xa1 ; '.'
0000000000009a62         db  0xff ; '.'
0000000000009a63         db  0xff ; '.'
0000000000009a64         db  0x98 ; '.'
0000000000009a65         db  0xa2 ; '.'
0000000000009a66         db  0xff ; '.'
0000000000009a67         db  0xff ; '.'
0000000000009a68         db  0xe8 ; '.'
0000000000009a69         db  0xa3 ; '.'
0000000000009a6a         db  0xff ; '.'
0000000000009a6b         db  0xff ; '.'
0000000000009a6c         db  0xd0 ; '.'
0000000000009a6d         db  0xa3 ; '.'
0000000000009a6e         db  0xff ; '.'
0000000000009a6f         db  0xff ; '.'
0000000000009a70         db  0x80 ; '.'
0000000000009a71         db  0xa2 ; '.'
0000000000009a72         db  0xff ; '.'
0000000000009a73         db  0xff ; '.'
0000000000009a74         db  0xc0 ; '.'
0000000000009a75         db  0xa3 ; '.'
0000000000009a76         db  0xff ; '.'
0000000000009a77         db  0xff ; '.'
0000000000009a78         db  0x68 ; 'h'
0000000000009a79         db  0xa2 ; '.'
0000000000009a7a         db  0xff ; '.'
0000000000009a7b         db  0xff ; '.'
0000000000009a7c         db  0xa8 ; '.'
0000000000009a7d         db  0xa3 ; '.'
0000000000009a7e         db  0xff ; '.'
0000000000009a7f         db  0xff ; '.'
0000000000009a80         db  0xb8 ; '.'
0000000000009a81         db  0xa1 ; '.'
0000000000009a82         db  0xff ; '.'
0000000000009a83         db  0xff ; '.'
0000000000009a84         db  0xb8 ; '.'
0000000000009a85         db  0xa1 ; '.'
0000000000009a86         db  0xff ; '.'
0000000000009a87         db  0xff ; '.'
0000000000009a88         db  0xb8 ; '.'
0000000000009a89         db  0xa1 ; '.'
0000000000009a8a         db  0xff ; '.'
0000000000009a8b         db  0xff ; '.'
0000000000009a8c         db  0xb8 ; '.'
0000000000009a8d         db  0xa1 ; '.'
0000000000009a8e         db  0xff ; '.'
0000000000009a8f         db  0xff ; '.'
0000000000009a90         db  0xb8 ; '.'
0000000000009a91         db  0xa1 ; '.'
0000000000009a92         db  0xff ; '.'
0000000000009a93         db  0xff ; '.'
0000000000009a94         db  0xb8 ; '.'
0000000000009a95         db  0xa1 ; '.'
0000000000009a96         db  0xff ; '.'
0000000000009a97         db  0xff ; '.'
0000000000009a98         db  0xb8 ; '.'
0000000000009a99         db  0xa1 ; '.'
0000000000009a9a         db  0xff ; '.'
0000000000009a9b         db  0xff ; '.'
0000000000009a9c         db  0xb8 ; '.'
0000000000009a9d         db  0xa1 ; '.'
0000000000009a9e         db  0xff ; '.'
0000000000009a9f         db  0xff ; '.'
0000000000009aa0         db  0xb8 ; '.'
0000000000009aa1         db  0xa1 ; '.'
0000000000009aa2         db  0xff ; '.'
0000000000009aa3         db  0xff ; '.'
0000000000009aa4         db  0xb8 ; '.'
0000000000009aa5         db  0xa1 ; '.'
0000000000009aa6         db  0xff ; '.'
0000000000009aa7         db  0xff ; '.'
0000000000009aa8         db  0xb8 ; '.'
0000000000009aa9         db  0xa1 ; '.'
0000000000009aaa         db  0xff ; '.'
0000000000009aab         db  0xff ; '.'
0000000000009aac         db  0xb8 ; '.'
0000000000009aad         db  0xa1 ; '.'
0000000000009aae         db  0xff ; '.'
0000000000009aaf         db  0xff ; '.'
0000000000009ab0         db  0xb8 ; '.'
0000000000009ab1         db  0xa1 ; '.'
0000000000009ab2         db  0xff ; '.'
0000000000009ab3         db  0xff ; '.'
0000000000009ab4         db  0xb8 ; '.'
0000000000009ab5         db  0xa1 ; '.'
0000000000009ab6         db  0xff ; '.'
0000000000009ab7         db  0xff ; '.'
0000000000009ab8         db  0xb8 ; '.'
0000000000009ab9         db  0xa1 ; '.'
0000000000009aba         db  0xff ; '.'
0000000000009abb         db  0xff ; '.'
0000000000009abc         db  0xb8 ; '.'
0000000000009abd         db  0xa1 ; '.'
0000000000009abe         db  0xff ; '.'
0000000000009abf         db  0xff ; '.'
0000000000009ac0         db  0xb8 ; '.'
0000000000009ac1         db  0xa1 ; '.'
0000000000009ac2         db  0xff ; '.'
0000000000009ac3         db  0xff ; '.'
0000000000009ac4         db  0xb8 ; '.'
0000000000009ac5         db  0xa1 ; '.'
0000000000009ac6         db  0xff ; '.'
0000000000009ac7         db  0xff ; '.'
0000000000009ac8         db  0x90 ; '.'
0000000000009ac9         db  0xa3 ; '.'
0000000000009aca         db  0xff ; '.'
0000000000009acb         db  0xff ; '.'
0000000000009acc         db  0x78 ; 'x'
0000000000009acd         db  0xa3 ; '.'
0000000000009ace         db  0xff ; '.'
0000000000009acf         db  0xff ; '.'
0000000000009ad0         db  0x78 ; 'x'
0000000000009ad1         db  0xa3 ; '.'
0000000000009ad2         db  0xff ; '.'
0000000000009ad3         db  0xff ; '.'
0000000000009ad4         db  0x60 ; '`'
0000000000009ad5         db  0xa3 ; '.'
0000000000009ad6         db  0xff ; '.'
0000000000009ad7         db  0xff ; '.'
0000000000009ad8         db  0x78 ; 'x'
0000000000009ad9         db  0xa3 ; '.'
0000000000009ada         db  0xff ; '.'
0000000000009adb         db  0xff ; '.'
0000000000009adc         db  0x48 ; 'H'
0000000000009add         db  0xa3 ; '.'
0000000000009ade         db  0xff ; '.'
0000000000009adf         db  0xff ; '.'
0000000000009ae0         db  0x78 ; 'x'
0000000000009ae1         db  0xa3 ; '.'
0000000000009ae2         db  0xff ; '.'
0000000000009ae3         db  0xff ; '.'
0000000000009ae4         db  0xb8 ; '.'
0000000000009ae5         db  0x9f ; '.'
0000000000009ae6         db  0xff ; '.'
0000000000009ae7         db  0xff ; '.'
0000000000009ae8         db  0x78 ; 'x'
0000000000009ae9         db  0xa3 ; '.'
0000000000009aea         db  0xff ; '.'
0000000000009aeb         db  0xff ; '.'
0000000000009aec         db  0x78 ; 'x'
0000000000009aed         db  0xa3 ; '.'
0000000000009aee         db  0xff ; '.'
0000000000009aef         db  0xff ; '.'
0000000000009af0         db  0x78 ; 'x'
0000000000009af1         db  0xa3 ; '.'
0000000000009af2         db  0xff ; '.'
0000000000009af3         db  0xff ; '.'
0000000000009af4         db  0x48 ; 'H'
0000000000009af5         db  0xa3 ; '.'
0000000000009af6         db  0xff ; '.'
0000000000009af7         db  0xff ; '.'
0000000000009af8         db  0x48 ; 'H'
0000000000009af9         db  0xa3 ; '.'
0000000000009afa         db  0xff ; '.'
0000000000009afb         db  0xff ; '.'
0000000000009afc         db  0x48 ; 'H'
0000000000009afd         db  0xa3 ; '.'
0000000000009afe         db  0xff ; '.'
0000000000009aff         db  0xff ; '.'
0000000000009b00         db  0x48 ; 'H'
0000000000009b01         db  0xa3 ; '.'
0000000000009b02         db  0xff ; '.'
0000000000009b03         db  0xff ; '.'
0000000000009b04         db  0x48 ; 'H'
0000000000009b05         db  0xa3 ; '.'
0000000000009b06         db  0xff ; '.'
0000000000009b07         db  0xff ; '.'
0000000000009b08         db  0x48 ; 'H'
0000000000009b09         db  0xa3 ; '.'
0000000000009b0a         db  0xff ; '.'
0000000000009b0b         db  0xff ; '.'
0000000000009b0c         db  0x48 ; 'H'
0000000000009b0d         db  0xa3 ; '.'
0000000000009b0e         db  0xff ; '.'
0000000000009b0f         db  0xff ; '.'
0000000000009b10         db  0x48 ; 'H'
0000000000009b11         db  0xa3 ; '.'
0000000000009b12         db  0xff ; '.'
0000000000009b13         db  0xff ; '.'
0000000000009b14         db  0x48 ; 'H'
0000000000009b15         db  0xa3 ; '.'
0000000000009b16         db  0xff ; '.'
0000000000009b17         db  0xff ; '.'
0000000000009b18         db  0x48 ; 'H'
0000000000009b19         db  0xa3 ; '.'
0000000000009b1a         db  0xff ; '.'
0000000000009b1b         db  0xff ; '.'
0000000000009b1c         db  0x48 ; 'H'
0000000000009b1d         db  0xa3 ; '.'
0000000000009b1e         db  0xff ; '.'
0000000000009b1f         db  0xff ; '.'
0000000000009b20         db  0x48 ; 'H'
0000000000009b21         db  0xa3 ; '.'
0000000000009b22         db  0xff ; '.'
0000000000009b23         db  0xff ; '.'
0000000000009b24         db  0x48 ; 'H'
0000000000009b25         db  0xa3 ; '.'
0000000000009b26         db  0xff ; '.'
0000000000009b27         db  0xff ; '.'
0000000000009b28         db  0x48 ; 'H'
0000000000009b29         db  0xa3 ; '.'
0000000000009b2a         db  0xff ; '.'
0000000000009b2b         db  0xff ; '.'
0000000000009b2c         db  0x48 ; 'H'
0000000000009b2d         db  0xa3 ; '.'
0000000000009b2e         db  0xff ; '.'
0000000000009b2f         db  0xff ; '.'
0000000000009b30         db  0x48 ; 'H'
0000000000009b31         db  0xa3 ; '.'
0000000000009b32         db  0xff ; '.'
0000000000009b33         db  0xff ; '.'
0000000000009b34         db  0x78 ; 'x'
0000000000009b35         db  0xa3 ; '.'
0000000000009b36         db  0xff ; '.'
0000000000009b37         db  0xff ; '.'
0000000000009b38         db  0x78 ; 'x'
0000000000009b39         db  0xa3 ; '.'
0000000000009b3a         db  0xff ; '.'
0000000000009b3b         db  0xff ; '.'
0000000000009b3c         db  0x78 ; 'x'
0000000000009b3d         db  0xa3 ; '.'
0000000000009b3e         db  0xff ; '.'
0000000000009b3f         db  0xff ; '.'
0000000000009b40         db  0x78 ; 'x'
0000000000009b41         db  0xa3 ; '.'
0000000000009b42         db  0xff ; '.'
0000000000009b43         db  0xff ; '.'
0000000000009b44         db  0x88 ; '.'
0000000000009b45         db  0x9f ; '.'
0000000000009b46         db  0xff ; '.'
0000000000009b47         db  0xff ; '.'
0000000000009b48         db  0xb8 ; '.'
0000000000009b49         db  0xa1 ; '.'
0000000000009b4a         db  0xff ; '.'
0000000000009b4b         db  0xff ; '.'
0000000000009b4c         db  0x48 ; 'H'
0000000000009b4d         db  0xa3 ; '.'
0000000000009b4e         db  0xff ; '.'
0000000000009b4f         db  0xff ; '.'
0000000000009b50         db  0x48 ; 'H'
0000000000009b51         db  0xa3 ; '.'
0000000000009b52         db  0xff ; '.'
0000000000009b53         db  0xff ; '.'
0000000000009b54         db  0x48 ; 'H'
0000000000009b55         db  0xa3 ; '.'
0000000000009b56         db  0xff ; '.'
0000000000009b57         db  0xff ; '.'
0000000000009b58         db  0x48 ; 'H'
0000000000009b59         db  0xa3 ; '.'
0000000000009b5a         db  0xff ; '.'
0000000000009b5b         db  0xff ; '.'
0000000000009b5c         db  0x48 ; 'H'
0000000000009b5d         db  0xa3 ; '.'
0000000000009b5e         db  0xff ; '.'
0000000000009b5f         db  0xff ; '.'
0000000000009b60         db  0x48 ; 'H'
0000000000009b61         db  0xa3 ; '.'
0000000000009b62         db  0xff ; '.'
0000000000009b63         db  0xff ; '.'
0000000000009b64         db  0x48 ; 'H'
0000000000009b65         db  0xa3 ; '.'
0000000000009b66         db  0xff ; '.'
0000000000009b67         db  0xff ; '.'
0000000000009b68         db  0x48 ; 'H'
0000000000009b69         db  0xa3 ; '.'
0000000000009b6a         db  0xff ; '.'
0000000000009b6b         db  0xff ; '.'
0000000000009b6c         db  0x48 ; 'H'
0000000000009b6d         db  0xa3 ; '.'
0000000000009b6e         db  0xff ; '.'
0000000000009b6f         db  0xff ; '.'
0000000000009b70         db  0x48 ; 'H'
0000000000009b71         db  0xa3 ; '.'
0000000000009b72         db  0xff ; '.'
0000000000009b73         db  0xff ; '.'
0000000000009b74         db  0x48 ; 'H'
0000000000009b75         db  0xa3 ; '.'
0000000000009b76         db  0xff ; '.'
0000000000009b77         db  0xff ; '.'
0000000000009b78         db  0x48 ; 'H'
0000000000009b79         db  0xa3 ; '.'
0000000000009b7a         db  0xff ; '.'
0000000000009b7b         db  0xff ; '.'
0000000000009b7c         db  0x48 ; 'H'
0000000000009b7d         db  0xa3 ; '.'
0000000000009b7e         db  0xff ; '.'
0000000000009b7f         db  0xff ; '.'
0000000000009b80         db  0x48 ; 'H'
0000000000009b81         db  0xa3 ; '.'
0000000000009b82         db  0xff ; '.'
0000000000009b83         db  0xff ; '.'
0000000000009b84         db  0x48 ; 'H'
0000000000009b85         db  0xa3 ; '.'
0000000000009b86         db  0xff ; '.'
0000000000009b87         db  0xff ; '.'
0000000000009b88         db  0x48 ; 'H'
0000000000009b89         db  0xa3 ; '.'
0000000000009b8a         db  0xff ; '.'
0000000000009b8b         db  0xff ; '.'
0000000000009b8c         db  0x48 ; 'H'
0000000000009b8d         db  0xa3 ; '.'
0000000000009b8e         db  0xff ; '.'
0000000000009b8f         db  0xff ; '.'
0000000000009b90         db  0x48 ; 'H'
0000000000009b91         db  0xa3 ; '.'
0000000000009b92         db  0xff ; '.'
0000000000009b93         db  0xff ; '.'
0000000000009b94         db  0x48 ; 'H'
0000000000009b95         db  0xa3 ; '.'
0000000000009b96         db  0xff ; '.'
0000000000009b97         db  0xff ; '.'
0000000000009b98         db  0x48 ; 'H'
0000000000009b99         db  0xa3 ; '.'
0000000000009b9a         db  0xff ; '.'
0000000000009b9b         db  0xff ; '.'
0000000000009b9c         db  0x48 ; 'H'
0000000000009b9d         db  0xa3 ; '.'
0000000000009b9e         db  0xff ; '.'
0000000000009b9f         db  0xff ; '.'
0000000000009ba0         db  0x48 ; 'H'
0000000000009ba1         db  0xa3 ; '.'
0000000000009ba2         db  0xff ; '.'
0000000000009ba3         db  0xff ; '.'
0000000000009ba4         db  0x48 ; 'H'
0000000000009ba5         db  0xa3 ; '.'
0000000000009ba6         db  0xff ; '.'
0000000000009ba7         db  0xff ; '.'
0000000000009ba8         db  0x48 ; 'H'
0000000000009ba9         db  0xa3 ; '.'
0000000000009baa         db  0xff ; '.'
0000000000009bab         db  0xff ; '.'
0000000000009bac         db  0x48 ; 'H'
0000000000009bad         db  0xa3 ; '.'
0000000000009bae         db  0xff ; '.'
0000000000009baf         db  0xff ; '.'
0000000000009bb0         db  0x48 ; 'H'
0000000000009bb1         db  0xa3 ; '.'
0000000000009bb2         db  0xff ; '.'
0000000000009bb3         db  0xff ; '.'
0000000000009bb4         db  0x78 ; 'x'
0000000000009bb5         db  0xa3 ; '.'
0000000000009bb6         db  0xff ; '.'
0000000000009bb7         db  0xff ; '.'
0000000000009bb8         db  0x48 ; 'H'
0000000000009bb9         db  0xa2 ; '.'
0000000000009bba         db  0xff ; '.'
0000000000009bbb         db  0xff ; '.'
0000000000009bbc         db  0x48 ; 'H'
0000000000009bbd         db  0xa3 ; '.'
0000000000009bbe         db  0xff ; '.'
0000000000009bbf         db  0xff ; '.'
0000000000009bc0         db  0x78 ; 'x'
0000000000009bc1         db  0xa3 ; '.'
0000000000009bc2         db  0xff ; '.'
0000000000009bc3         db  0xff ; '.'
0000000000009bc4         db  0x48 ; 'H'
0000000000009bc5         db  0xa3 ; '.'
0000000000009bc6         db  0xff ; '.'
0000000000009bc7         db  0xff ; '.'
0000000000009bc8         db  0x78 ; 'x'
0000000000009bc9         db  0xa3 ; '.'
0000000000009bca         db  0xff ; '.'
0000000000009bcb         db  0xff ; '.'
0000000000009bcc         db  0x48 ; 'H'
0000000000009bcd         db  0xa3 ; '.'
0000000000009bce         db  0xff ; '.'
0000000000009bcf         db  0xff ; '.'
0000000000009bd0         db  0x48 ; 'H'
0000000000009bd1         db  0xa3 ; '.'
0000000000009bd2         db  0xff ; '.'
0000000000009bd3         db  0xff ; '.'
0000000000009bd4         db  0x48 ; 'H'
0000000000009bd5         db  0xa3 ; '.'
0000000000009bd6         db  0xff ; '.'
0000000000009bd7         db  0xff ; '.'
0000000000009bd8         db  0x48 ; 'H'
0000000000009bd9         db  0xa3 ; '.'
0000000000009bda         db  0xff ; '.'
0000000000009bdb         db  0xff ; '.'
0000000000009bdc         db  0x48 ; 'H'
0000000000009bdd         db  0xa3 ; '.'
0000000000009bde         db  0xff ; '.'
0000000000009bdf         db  0xff ; '.'
0000000000009be0         db  0x48 ; 'H'
0000000000009be1         db  0xa3 ; '.'
0000000000009be2         db  0xff ; '.'
0000000000009be3         db  0xff ; '.'
0000000000009be4         db  0x48 ; 'H'
0000000000009be5         db  0xa3 ; '.'
0000000000009be6         db  0xff ; '.'
0000000000009be7         db  0xff ; '.'
0000000000009be8         db  0x48 ; 'H'
0000000000009be9         db  0xa3 ; '.'
0000000000009bea         db  0xff ; '.'
0000000000009beb         db  0xff ; '.'
0000000000009bec         db  0x48 ; 'H'
0000000000009bed         db  0xa3 ; '.'
0000000000009bee         db  0xff ; '.'
0000000000009bef         db  0xff ; '.'
0000000000009bf0         db  0x48 ; 'H'
0000000000009bf1         db  0xa3 ; '.'
0000000000009bf2         db  0xff ; '.'
0000000000009bf3         db  0xff ; '.'
0000000000009bf4         db  0x48 ; 'H'
0000000000009bf5         db  0xa3 ; '.'
0000000000009bf6         db  0xff ; '.'
0000000000009bf7         db  0xff ; '.'
0000000000009bf8         db  0x48 ; 'H'
0000000000009bf9         db  0xa3 ; '.'
0000000000009bfa         db  0xff ; '.'
0000000000009bfb         db  0xff ; '.'
0000000000009bfc         db  0x48 ; 'H'
0000000000009bfd         db  0xa3 ; '.'
0000000000009bfe         db  0xff ; '.'
0000000000009bff         db  0xff ; '.'
0000000000009c00         db  0x48 ; 'H'
0000000000009c01         db  0xa3 ; '.'
0000000000009c02         db  0xff ; '.'
0000000000009c03         db  0xff ; '.'
0000000000009c04         db  0x48 ; 'H'
0000000000009c05         db  0xa3 ; '.'
0000000000009c06         db  0xff ; '.'
0000000000009c07         db  0xff ; '.'
0000000000009c08         db  0x48 ; 'H'
0000000000009c09         db  0xa3 ; '.'
0000000000009c0a         db  0xff ; '.'
0000000000009c0b         db  0xff ; '.'
0000000000009c0c         db  0x48 ; 'H'
0000000000009c0d         db  0xa3 ; '.'
0000000000009c0e         db  0xff ; '.'
0000000000009c0f         db  0xff ; '.'
0000000000009c10         db  0x48 ; 'H'
0000000000009c11         db  0xa3 ; '.'
0000000000009c12         db  0xff ; '.'
0000000000009c13         db  0xff ; '.'
0000000000009c14         db  0x48 ; 'H'
0000000000009c15         db  0xa3 ; '.'
0000000000009c16         db  0xff ; '.'
0000000000009c17         db  0xff ; '.'
0000000000009c18         db  0x48 ; 'H'
0000000000009c19         db  0xa3 ; '.'
0000000000009c1a         db  0xff ; '.'
0000000000009c1b         db  0xff ; '.'
0000000000009c1c         db  0x48 ; 'H'
0000000000009c1d         db  0xa3 ; '.'
0000000000009c1e         db  0xff ; '.'
0000000000009c1f         db  0xff ; '.'
0000000000009c20         db  0x48 ; 'H'
0000000000009c21         db  0xa3 ; '.'
0000000000009c22         db  0xff ; '.'
0000000000009c23         db  0xff ; '.'
0000000000009c24         db  0x48 ; 'H'
0000000000009c25         db  0xa3 ; '.'
0000000000009c26         db  0xff ; '.'
0000000000009c27         db  0xff ; '.'
0000000000009c28         db  0x48 ; 'H'
0000000000009c29         db  0xa3 ; '.'
0000000000009c2a         db  0xff ; '.'
0000000000009c2b         db  0xff ; '.'
0000000000009c2c         db  0x48 ; 'H'
0000000000009c2d         db  0xa3 ; '.'
0000000000009c2e         db  0xff ; '.'
0000000000009c2f         db  0xff ; '.'
0000000000009c30         db  0x48 ; 'H'
0000000000009c31         db  0xa3 ; '.'
0000000000009c32         db  0xff ; '.'
0000000000009c33         db  0xff ; '.'
0000000000009c34         db  0xb8 ; '.'
0000000000009c35         db  0x9e ; '.'
0000000000009c36         db  0xff ; '.'
0000000000009c37         db  0xff ; '.'
0000000000009c38         db  0x78 ; 'x'
0000000000009c39         db  0xa3 ; '.'
0000000000009c3a         db  0xff ; '.'
0000000000009c3b         db  0xff ; '.'
0000000000009c3c         db  0xb8 ; '.'
0000000000009c3d         db  0x9e ; '.'
0000000000009c3e         db  0xff ; '.'
0000000000009c3f         db  0xff ; '.'
0000000000009c40         db  0x60 ; '`'
0000000000009c41         db  0xa3 ; '.'
0000000000009c42         db  0xff ; '.'
0000000000009c43         db  0xff ; '.'
0000000000009c44         db  0x00 ; '.'
0000000000009c45         db  0x00 ; '.'
0000000000009c46         db  0x00 ; '.'
0000000000009c47         db  0x00 ; '.'
0000000000009c48         db  0x00 ; '.'
0000000000009c49         db  0x00 ; '.'
0000000000009c4a         db  0x00 ; '.'
0000000000009c4b         db  0x00 ; '.'
0000000000009c4c         db  0x00 ; '.'
0000000000009c4d         db  0x00 ; '.'
0000000000009c4e         db  0x00 ; '.'
0000000000009c4f         db  0x00 ; '.'
0000000000009c50         db  0x00 ; '.'
0000000000009c51         db  0x00 ; '.'
0000000000009c52         db  0x00 ; '.'
0000000000009c53         db  0x00 ; '.'
0000000000009c54         db  0x00 ; '.'
0000000000009c55         db  0x00 ; '.'
0000000000009c56         db  0x00 ; '.'
0000000000009c57         db  0x00 ; '.'
0000000000009c58         db  0x00 ; '.'
0000000000009c59         db  0x00 ; '.'
0000000000009c5a         db  0x00 ; '.'
0000000000009c5b         db  0x00 ; '.'
0000000000009c5c         db  0x00 ; '.'
0000000000009c5d         db  0x00 ; '.'
0000000000009c5e         db  0x00 ; '.'
0000000000009c5f         db  0x00 ; '.'
                     quoting_style_vals:
0000000000009c60         db  0x00 ; '.'
0000000000009c61         db  0x00 ; '.'
0000000000009c62         db  0x00 ; '.'
0000000000009c63         db  0x00 ; '.'
0000000000009c64         db  0x01 ; '.'
0000000000009c65         db  0x00 ; '.'
0000000000009c66         db  0x00 ; '.'
0000000000009c67         db  0x00 ; '.'
0000000000009c68         db  0x02 ; '.'
0000000000009c69         db  0x00 ; '.'
0000000000009c6a         db  0x00 ; '.'
0000000000009c6b         db  0x00 ; '.'
0000000000009c6c         db  0x03 ; '.'
0000000000009c6d         db  0x00 ; '.'
0000000000009c6e         db  0x00 ; '.'
0000000000009c6f         db  0x00 ; '.'
0000000000009c70         db  0x04 ; '.'
0000000000009c71         db  0x00 ; '.'
0000000000009c72         db  0x00 ; '.'
0000000000009c73         db  0x00 ; '.'
0000000000009c74         db  0x05 ; '.'
0000000000009c75         db  0x00 ; '.'
0000000000009c76         db  0x00 ; '.'
0000000000009c77         db  0x00 ; '.'
0000000000009c78         db  0x06 ; '.'
0000000000009c79         db  0x00 ; '.'
0000000000009c7a         db  0x00 ; '.'
0000000000009c7b         db  0x00 ; '.'
0000000000009c7c         db  0x07 ; '.'
0000000000009c7d         db  0x00 ; '.'
0000000000009c7e         db  0x00 ; '.'
0000000000009c7f         db  0x00 ; '.'
0000000000009c80         db  0x08 ; '.'
0000000000009c81         db  0x00 ; '.'
0000000000009c82         db  0x00 ; '.'
0000000000009c83         db  0x00 ; '.'
0000000000009c84         db  0x09 ; '.'
0000000000009c85         db  0x00 ; '.'
0000000000009c86         db  0x00 ; '.'
0000000000009c87         db  0x00 ; '.'
                     aSEndOfFile:
0000000000009c88         db         "%s: end of file", 0                        ; DATA XREF=randread_error+77
                     aSReadError:
0000000000009c98         db         "%s: read error", 0                         ; DATA XREF=randread_error+37
                     aDevurandom:
0000000000009ca7         db         "/dev/urandom", 0                           ; DATA XREF=randread_new+203
0000000000009cb4         db  0x72 ; 'r'                                         ; DATA XREF=randread_new+50, read_binary_file
0000000000009cb5         db  0x62 ; 'b'
0000000000009cb6         db  0x00 ; '.'
                     aSSSn:
0000000000009cb7         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
0000000000009cc3         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
0000000000009cca         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
0000000000009ccb         db  0x43 ; 'C'
0000000000009ccc         db  0x29 ; ')'
0000000000009ccd         db  0x00 ; '.'
                     aWrittenBySn:
0000000000009cce         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
0000000000009cde         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
0000000000009cf5         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
0000000000009d11         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
0000000000009d26         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
0000000000009d3c         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
                     aNlicenseGplv3G:
0000000000009d50         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
0000000000009e1c         align      32
                     aWrittenBySSSna:
0000000000009e20         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_9e40:        // aWrittenBySSSns
0000000000009e40         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
0000000000009e64         align      8
                     aWrittenBySSSns_9e68:        // aWrittenBySSSns
0000000000009e68         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_9e90:        // aWrittenBySSSns
0000000000009e90         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
0000000000009ebc         align      64
                     aWrittenBySSSns_9ec0:        // aWrittenBySSSns
0000000000009ec0         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
0000000000009ef0         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
0000000000009f24         align      8
                     aWrittenBySSSns_9f28:        // aWrittenBySSSns
0000000000009f28         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
0000000000009f64         align      8
                     aGeneralHelpUsi:
0000000000009f68         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
0000000000009fa9         align      4
                     switch_table_9fac:        // switch_table
0000000000009fac         dd         version_etc_arn.loc_6686-switch_table_9fac, version_etc_arn.loc_6718-switch_table_9fac, version_etc_arn.loc_6758-switch_table_9fac, version_etc_arn.loc_67a0-switch_table_9fac ; switch table used at 0x6604 containing 10 entries, DATA XREF=version_etc_arn+150
0000000000009fbc         dd         version_etc_arn.loc_67f0-switch_table_9fac, version_etc_arn.loc_6848-switch_table_9fac, version_etc_arn.loc_6878-switch_table_9fac, version_etc_arn.loc_68e0-switch_table_9fac
0000000000009fcc         dd         version_etc_arn.loc_6610-switch_table_9fac, version_etc_arn.loc_66c0-switch_table_9fac
0000000000009fd4         align      32
                     version_etc_copyright:
0000000000009fe0         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
000000000000a00f         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aCoreutils831li:
000000000000a020         db         "../coreutils-8.31/lib/xstrtol.c", 0        ; DATA XREF=xstrtoul+908, xstrtoumax+908
                     a0StrtolbaseStr:
000000000000a040         db         "0 <= strtol_base && strtol_base <= 36", 0  ; DATA XREF=xstrtoul+915, xstrtoumax+915
000000000000a066         align      8
                     switch_table_a068:        // switch_table
000000000000a068         dd         xstrtoul.loc_7266-switch_table_a068, 2 dup (xstrtoul.loc_715c-switch_table_a068), xstrtoul.loc_7243-switch_table_a068, xstrtoul.loc_715c-switch_table_a068 ; switch table used at 0x7116 containing 54 entries, DATA XREF=xstrtoul+452
000000000000a07c         dd         xstrtoul.loc_727c-switch_table_a068, 3 dup (xstrtoul.loc_715c-switch_table_a068), xstrtoul.loc_71ff-switch_table_a068, xstrtoul.loc_715c-switch_table_a068
000000000000a094         dd         xstrtoul.loc_7118-switch_table_a068, 2 dup (xstrtoul.loc_715c-switch_table_a068), xstrtoul.loc_7220-switch_table_a068, 3 dup (xstrtoul.loc_715c-switch_table_a068)
000000000000a0b0         dd         xstrtoul.loc_71df-switch_table_a068, 4 dup (xstrtoul.loc_715c-switch_table_a068), xstrtoul.loc_71ba-switch_table_a068, xstrtoul.loc_7194-switch_table_a068
000000000000a0cc         dd         7 dup (xstrtoul.loc_715c-switch_table_a068), xstrtoul.loc_717d-switch_table_a068, xstrtoul.loc_7140-switch_table_a068, 3 dup (xstrtoul.loc_715c-switch_table_a068)
000000000000a0fc         dd         xstrtoul.loc_727c-switch_table_a068, 3 dup (xstrtoul.loc_715c-switch_table_a068), xstrtoul.loc_71ff-switch_table_a068, xstrtoul.loc_715c-switch_table_a068
000000000000a114         dd         xstrtoul.loc_7118-switch_table_a068, 6 dup (xstrtoul.loc_715c-switch_table_a068), xstrtoul.loc_71df-switch_table_a068, 2 dup (xstrtoul.loc_715c-switch_table_a068)
000000000000a13c         dd         xstrtoul.loc_7167-switch_table_a068
                     __PRETTY_FUNCTION__.4162:
000000000000a140         db         "xstrtoul", 0                               ; DATA XREF=xstrtoul+901
000000000000a149         align      16
                     switch_table_a150:        // switch_table
000000000000a150         dd         xstrtoumax.loc_7686-switch_table_a150, 2 dup (xstrtoumax.loc_757c-switch_table_a150), xstrtoumax.loc_7663-switch_table_a150, xstrtoumax.loc_757c-switch_table_a150 ; switch table used at 0x7536 containing 54 entries, DATA XREF=xstrtoumax+452
000000000000a164         dd         xstrtoumax.loc_769c-switch_table_a150, 3 dup (xstrtoumax.loc_757c-switch_table_a150), xstrtoumax.loc_761f-switch_table_a150, xstrtoumax.loc_757c-switch_table_a150
000000000000a17c         dd         xstrtoumax.loc_7538-switch_table_a150, 2 dup (xstrtoumax.loc_757c-switch_table_a150), xstrtoumax.loc_7640-switch_table_a150, 3 dup (xstrtoumax.loc_757c-switch_table_a150)
000000000000a198         dd         xstrtoumax.loc_75ff-switch_table_a150, 4 dup (xstrtoumax.loc_757c-switch_table_a150), xstrtoumax.loc_75da-switch_table_a150, xstrtoumax.loc_75b4-switch_table_a150
000000000000a1b4         dd         7 dup (xstrtoumax.loc_757c-switch_table_a150), xstrtoumax.loc_759d-switch_table_a150, xstrtoumax.loc_7560-switch_table_a150, 3 dup (xstrtoumax.loc_757c-switch_table_a150)
000000000000a1e4         dd         xstrtoumax.loc_769c-switch_table_a150, 3 dup (xstrtoumax.loc_757c-switch_table_a150), xstrtoumax.loc_761f-switch_table_a150, xstrtoumax.loc_757c-switch_table_a150
000000000000a1fc         dd         xstrtoumax.loc_7538-switch_table_a150, 6 dup (xstrtoumax.loc_757c-switch_table_a150), xstrtoumax.loc_75ff-switch_table_a150, 2 dup (xstrtoumax.loc_757c-switch_table_a150)
000000000000a224         dd         xstrtoumax.loc_7587-switch_table_a150
                     __PRETTY_FUNCTION__.4162_a228:        // __PRETTY_FUNCTION__.4162
000000000000a228         db         "xstrtoumax", 0                             ; DATA XREF=xstrtoumax+901
000000000000a233         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
000000000000a234         db  0x00 ; '.'
                     aPosix:
000000000000a235         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aEntriesLun:
000000000000a23b         db         "# entries:         %lu\n", 0               ; DATA XREF=hash_print_statistics+101
                     aBucketsLun:
000000000000a253         db         "# buckets:         %lu\n", 0               ; DATA XREF=hash_print_statistics+123
                     aMaxBucketLengt:
000000000000a26b         db         "max bucket length: %lu\n", 0               ; DATA XREF=hash_print_statistics+232
000000000000a283         align      8
                     aBucketsUsedLu2:
000000000000a288         db         "# buckets used:    %lu (%.2f%%)\n", 0      ; DATA XREF=hash_print_statistics+188
000000000000a2a9         db  0x00 ; '.'
000000000000a2aa         db  0x00 ; '.'
000000000000a2ab         db  0x00 ; '.'
000000000000a2ac         db  0x00 ; '.'
000000000000a2ad         db  0x00 ; '.'
000000000000a2ae         db  0x00 ; '.'
000000000000a2af         db  0x00 ; '.'
                     default_tuning:
000000000000a2b0         db  0x00 ; '.'                                         ; DATA XREF=check_tuning.isra.0+3, hash_initialize+272
000000000000a2b1         db  0x00 ; '.'
000000000000a2b2         db  0x00 ; '.'
000000000000a2b3         db  0x00 ; '.'
000000000000a2b4         db  0x00 ; '.'
000000000000a2b5         db  0x00 ; '.'
000000000000a2b6         db  0x80 ; '.'
000000000000a2b7         db  0x3f ; '?'
000000000000a2b8         db  0xcd ; '.'
000000000000a2b9         db  0xcc ; '.'
000000000000a2ba         db  0x4c ; 'L'
000000000000a2bb         db  0x3f ; '?'
000000000000a2bc         db  0xf4 ; '.'
000000000000a2bd         db  0xfd ; '.'
000000000000a2be         db  0xb4 ; '.'
000000000000a2bf         db  0x3f ; '?'
000000000000a2c0         db  0x00 ; '.'
000000000000a2c1         db  0x00 ; '.'
000000000000a2c2         db  0x00 ; '.'
000000000000a2c3         db  0x00 ; '.'
                     float_a2c4:        // float
000000000000a2c4         dd         0.1f                                        ; DATA XREF=check_tuning.isra.0+25, check_tuning.isra.0+74
                     float_a2c8:        // float
000000000000a2c8         dd         0.9f                                        ; DATA XREF=check_tuning.isra.0+34
                     float_a2cc:        // float
000000000000a2cc         dd         1.1f                                        ; DATA XREF=check_tuning.isra.0+52
                     float_a2d0:        // float
000000000000a2d0         dd         0.0f                                        ; DATA XREF=check_tuning.isra.0+65
                     float_a2d4:        // float
000000000000a2d4         dd         1.0f                                        ; DATA XREF=check_tuning.isra.0+92
                     float_a2d8:        // float
000000000000a2d8         dd         0.8f                                        ; DATA XREF=hash_initialize+290
                     float_a2dc:        // float
000000000000a2dc         dd         1.84467e+19f                                ; DATA XREF=hash_initialize+318, hash_rehash+64, hash_insert_if_absent+413
                     float_a2e0:        // float
000000000000a2e0         dd         9.22337e+18f                                ; DATA XREF=hash_initialize+327, hash_initialize+336, hash_rehash+77, hash_rehash+90, hash_insert_if_absent+422, hash_insert_if_absent+608, hash_delete+250, hash_delete+400
000000000000a2e4         align      2
000000000000a2ee         db  0x59 ; 'Y'
000000000000a2ef         db  0x40 ; '@'
                     aAscii:
000000000000a2f0         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
000000000000a2f6         db  0x00 ; '.'
000000000000a2f7         db  0x00 ; '.'


        ; Section .eh_frame_hdr
        ; Range: [0xa2f8; 0xa734[ (1084 bytes)
        ; File offset : [41720; 42804[ (1084 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000a2f8         db  0x01 ; '.'
000000000000a2f9         db  0x1b ; '.'
000000000000a2fa         db  0x03 ; '.'
000000000000a2fb         db  0x3b ; ';'
000000000000a2fc         db  0x3c ; '<'
000000000000a2fd         db  0x04 ; '.'
000000000000a2fe         db  0x00 ; '.'
000000000000a2ff         db  0x00 ; '.'
000000000000a300         db  0x86 ; '.'
000000000000a301         db  0x00 ; '.'
000000000000a302         db  0x00 ; '.'
000000000000a303         db  0x00 ; '.'
000000000000a304         db  0x88 ; '.'
000000000000a305         db  0x76 ; 'v'
000000000000a306         db  0xff ; '.'
000000000000a307         db  0xff ; '.'
000000000000a308         db  0x88 ; '.'
000000000000a309         db  0x04 ; '.'
000000000000a30a         db  0x00 ; '.'
000000000000a30b         db  0x00 ; '.'
000000000000a30c         db  0xd8 ; '.'
000000000000a30d         db  0x7a ; 'z'
000000000000a30e         db  0xff ; '.'
000000000000a30f         db  0xff ; '.'
000000000000a310         db  0xb0 ; '.'
000000000000a311         db  0x04 ; '.'
000000000000a312         db  0x00 ; '.'
000000000000a313         db  0x00 ; '.'
000000000000a314         db  0xe8 ; '.'
000000000000a315         db  0x7a ; 'z'
000000000000a316         db  0xff ; '.'
000000000000a317         db  0xff ; '.'
000000000000a318         db  0xf4 ; '.'
000000000000a319         db  0x04 ; '.'
000000000000a31a         db  0x00 ; '.'
000000000000a31b         db  0x00 ; '.'
000000000000a31c         db  0x48 ; 'H'
000000000000a31d         db  0x89 ; '.'
000000000000a31e         db  0xff ; '.'
000000000000a31f         db  0xff ; '.'
000000000000a320         db  0x58 ; 'X'
000000000000a321         db  0x04 ; '.'
000000000000a322         db  0x00 ; '.'
000000000000a323         db  0x00 ; '.'
000000000000a324         db  0x58 ; 'X'
000000000000a325         db  0x8a ; '.'
000000000000a326         db  0xff ; '.'
000000000000a327         db  0xff ; '.'
000000000000a328         db  0xc8 ; '.'
000000000000a329         db  0x04 ; '.'
000000000000a32a         db  0x00 ; '.'
000000000000a32b         db  0x00 ; '.'
000000000000a32c         db  0x38 ; '8'
000000000000a32d         db  0x8e ; '.'
000000000000a32e         db  0xff ; '.'
000000000000a32f         db  0xff ; '.'
000000000000a330         db  0x48 ; 'H'
000000000000a331         db  0x05 ; '.'
000000000000a332         db  0x00 ; '.'
000000000000a333         db  0x00 ; '.'
000000000000a334         db  0x48 ; 'H'
000000000000a335         db  0x8e ; '.'
000000000000a336         db  0xff ; '.'
000000000000a337         db  0xff ; '.'
000000000000a338         db  0x5c ; '\'
000000000000a339         db  0x05 ; '.'
000000000000a33a         db  0x00 ; '.'
000000000000a33b         db  0x00 ; '.'
000000000000a33c         db  0x58 ; 'X'
000000000000a33d         db  0x8e ; '.'
000000000000a33e         db  0xff ; '.'
000000000000a33f         db  0xff ; '.'
000000000000a340         db  0x70 ; 'p'
000000000000a341         db  0x05 ; '.'
000000000000a342         db  0x00 ; '.'
000000000000a343         db  0x00 ; '.'
000000000000a344         db  0x08 ; '.'
000000000000a345         db  0x8f ; '.'
000000000000a346         db  0xff ; '.'
000000000000a347         db  0xff ; '.'
000000000000a348         db  0xa0 ; '.'
000000000000a349         db  0x05 ; '.'
000000000000a34a         db  0x00 ; '.'
000000000000a34b         db  0x00 ; '.'
000000000000a34c         db  0x18 ; '.'
000000000000a34d         db  0x8f ; '.'
000000000000a34e         db  0xff ; '.'
000000000000a34f         db  0xff ; '.'
000000000000a350         db  0xb4 ; '.'
000000000000a351         db  0x05 ; '.'
000000000000a352         db  0x00 ; '.'
000000000000a353         db  0x00 ; '.'
000000000000a354         db  0x48 ; 'H'
000000000000a355         db  0x8f ; '.'
000000000000a356         db  0xff ; '.'
000000000000a357         db  0xff ; '.'
000000000000a358         db  0xd0 ; '.'
000000000000a359         db  0x05 ; '.'
000000000000a35a         db  0x00 ; '.'
000000000000a35b         db  0x00 ; '.'
000000000000a35c         db  0x98 ; '.'
000000000000a35d         db  0x8f ; '.'
000000000000a35e         db  0xff ; '.'
000000000000a35f         db  0xff ; '.'
000000000000a360         db  0xf8 ; '.'
000000000000a361         db  0x05 ; '.'
000000000000a362         db  0x00 ; '.'
000000000000a363         db  0x00 ; '.'
000000000000a364         db  0x48 ; 'H'
000000000000a365         db  0x91 ; '.'
000000000000a366         db  0xff ; '.'
000000000000a367         db  0xff ; '.'
000000000000a368         db  0x48 ; 'H'
000000000000a369         db  0x06 ; '.'
000000000000a36a         db  0x00 ; '.'
000000000000a36b         db  0x00 ; '.'
000000000000a36c         db  0x58 ; 'X'
000000000000a36d         db  0x91 ; '.'
000000000000a36e         db  0xff ; '.'
000000000000a36f         db  0xff ; '.'
000000000000a370         db  0x5c ; '\'
000000000000a371         db  0x06 ; '.'
000000000000a372         db  0x00 ; '.'
000000000000a373         db  0x00 ; '.'
000000000000a374         db  0x68 ; 'h'
000000000000a375         db  0x92 ; '.'
000000000000a376         db  0xff ; '.'
000000000000a377         db  0xff ; '.'
000000000000a378         db  0xc0 ; '.'
000000000000a379         db  0x06 ; '.'
000000000000a37a         db  0x00 ; '.'
000000000000a37b         db  0x00 ; '.'
000000000000a37c         db  0x78 ; 'x'
000000000000a37d         db  0x92 ; '.'
000000000000a37e         db  0xff ; '.'
000000000000a37f         db  0xff ; '.'
000000000000a380         db  0xd4 ; '.'
000000000000a381         db  0x06 ; '.'
000000000000a382         db  0x00 ; '.'
000000000000a383         db  0x00 ; '.'
000000000000a384         db  0x88 ; '.'
000000000000a385         db  0x92 ; '.'
000000000000a386         db  0xff ; '.'
000000000000a387         db  0xff ; '.'
000000000000a388         db  0xe8 ; '.'
000000000000a389         db  0x06 ; '.'
000000000000a38a         db  0x00 ; '.'
000000000000a38b         db  0x00 ; '.'
000000000000a38c         db  0x28 ; '('
000000000000a38d         db  0x93 ; '.'
000000000000a38e         db  0xff ; '.'
000000000000a38f         db  0xff ; '.'
000000000000a390         db  0x08 ; '.'
000000000000a391         db  0x07 ; '.'
000000000000a392         db  0x00 ; '.'
000000000000a393         db  0x00 ; '.'
000000000000a394         db  0x18 ; '.'
000000000000a395         db  0x94 ; '.'
000000000000a396         db  0xff ; '.'
000000000000a397         db  0xff ; '.'
000000000000a398         db  0x4c ; 'L'
000000000000a399         db  0x07 ; '.'
000000000000a39a         db  0x00 ; '.'
000000000000a39b         db  0x00 ; '.'
000000000000a39c         db  0x58 ; 'X'
000000000000a39d         db  0xa6 ; '.'
000000000000a39e         db  0xff ; '.'
000000000000a39f         db  0xff ; '.'
000000000000a3a0         db  0xc4 ; '.'
000000000000a3a1         db  0x07 ; '.'
000000000000a3a2         db  0x00 ; '.'
000000000000a3a3         db  0x00 ; '.'
000000000000a3a4         db  0x08 ; '.'
000000000000a3a5         db  0xa8 ; '.'
000000000000a3a6         db  0xff ; '.'
000000000000a3a7         db  0xff ; '.'
000000000000a3a8         db  0x30 ; '0'
000000000000a3a9         db  0x08 ; '.'
000000000000a3aa         db  0x00 ; '.'
000000000000a3ab         db  0x00 ; '.'
000000000000a3ac         db  0x48 ; 'H'
000000000000a3ad         db  0xa8 ; '.'
000000000000a3ae         db  0xff ; '.'
000000000000a3af         db  0xff ; '.'
000000000000a3b0         db  0x5c ; '\'
000000000000a3b1         db  0x08 ; '.'
000000000000a3b2         db  0x00 ; '.'
000000000000a3b3         db  0x00 ; '.'
000000000000a3b4         db  0x68 ; 'h'
000000000000a3b5         db  0xa8 ; '.'
000000000000a3b6         db  0xff ; '.'
000000000000a3b7         db  0xff ; '.'
000000000000a3b8         db  0x70 ; 'p'
000000000000a3b9         db  0x08 ; '.'
000000000000a3ba         db  0x00 ; '.'
000000000000a3bb         db  0x00 ; '.'
000000000000a3bc         db  0x88 ; '.'
000000000000a3bd         db  0xa8 ; '.'
000000000000a3be         db  0xff ; '.'
000000000000a3bf         db  0xff ; '.'
000000000000a3c0         db  0x84 ; '.'
000000000000a3c1         db  0x08 ; '.'
000000000000a3c2         db  0x00 ; '.'
000000000000a3c3         db  0x00 ; '.'
000000000000a3c4         db  0xc8 ; '.'
000000000000a3c5         db  0xa8 ; '.'
000000000000a3c6         db  0xff ; '.'
000000000000a3c7         db  0xff ; '.'
000000000000a3c8         db  0x98 ; '.'
000000000000a3c9         db  0x08 ; '.'
000000000000a3ca         db  0x00 ; '.'
000000000000a3cb         db  0x00 ; '.'
000000000000a3cc         db  0xe8 ; '.'
000000000000a3cd         db  0xa8 ; '.'
000000000000a3ce         db  0xff ; '.'
000000000000a3cf         db  0xff ; '.'
000000000000a3d0         db  0xac ; '.'
000000000000a3d1         db  0x08 ; '.'
000000000000a3d2         db  0x00 ; '.'
000000000000a3d3         db  0x00 ; '.'
000000000000a3d4         db  0x18 ; '.'
000000000000a3d5         db  0xa9 ; '.'
000000000000a3d6         db  0xff ; '.'
000000000000a3d7         db  0xff ; '.'
000000000000a3d8         db  0xc0 ; '.'
000000000000a3d9         db  0x08 ; '.'
000000000000a3da         db  0x00 ; '.'
000000000000a3db         db  0x00 ; '.'
000000000000a3dc         db  0x98 ; '.'
000000000000a3dd         db  0xa9 ; '.'
000000000000a3de         db  0xff ; '.'
000000000000a3df         db  0xff ; '.'
000000000000a3e0         db  0x14 ; '.'
000000000000a3e1         db  0x09 ; '.'
000000000000a3e2         db  0x00 ; '.'
000000000000a3e3         db  0x00 ; '.'
000000000000a3e4         db  0x88 ; '.'
000000000000a3e5         db  0xaa ; '.'
000000000000a3e6         db  0xff ; '.'
000000000000a3e7         db  0xff ; '.'
000000000000a3e8         db  0x80 ; '.'
000000000000a3e9         db  0x09 ; '.'
000000000000a3ea         db  0x00 ; '.'
000000000000a3eb         db  0x00 ; '.'
000000000000a3ec         db  0x98 ; '.'
000000000000a3ed         db  0xaa ; '.'
000000000000a3ee         db  0xff ; '.'
000000000000a3ef         db  0xff ; '.'
000000000000a3f0         db  0x94 ; '.'
000000000000a3f1         db  0x09 ; '.'
000000000000a3f2         db  0x00 ; '.'
000000000000a3f3         db  0x00 ; '.'
000000000000a3f4         db  0x38 ; '8'
000000000000a3f5         db  0xab ; '.'
000000000000a3f6         db  0xff ; '.'
000000000000a3f7         db  0xff ; '.'
000000000000a3f8         db  0xc0 ; '.'
000000000000a3f9         db  0x09 ; '.'
000000000000a3fa         db  0x00 ; '.'
000000000000a3fb         db  0x00 ; '.'
000000000000a3fc         db  0x58 ; 'X'
000000000000a3fd         db  0xab ; '.'
000000000000a3fe         db  0xff ; '.'
000000000000a3ff         db  0xff ; '.'
000000000000a400         db  0xd4 ; '.'
000000000000a401         db  0x09 ; '.'
000000000000a402         db  0x00 ; '.'
000000000000a403         db  0x00 ; '.'
000000000000a404         db  0x68 ; 'h'
000000000000a405         db  0xab ; '.'
000000000000a406         db  0xff ; '.'
000000000000a407         db  0xff ; '.'
000000000000a408         db  0xe8 ; '.'
000000000000a409         db  0x09 ; '.'
000000000000a40a         db  0x00 ; '.'
000000000000a40b         db  0x00 ; '.'
000000000000a40c         db  0x88 ; '.'
000000000000a40d         db  0xab ; '.'
000000000000a40e         db  0xff ; '.'
000000000000a40f         db  0xff ; '.'
000000000000a410         db  0xfc ; '.'
000000000000a411         db  0x09 ; '.'
000000000000a412         db  0x00 ; '.'
000000000000a413         db  0x00 ; '.'
000000000000a414         db  0xa8 ; '.'
000000000000a415         db  0xab ; '.'
000000000000a416         db  0xff ; '.'
000000000000a417         db  0xff ; '.'
000000000000a418         db  0x10 ; '.'
000000000000a419         db  0x0a ; '.'
000000000000a41a         db  0x00 ; '.'
000000000000a41b         db  0x00 ; '.'
000000000000a41c         db  0x38 ; '8'
000000000000a41d         db  0xac ; '.'
000000000000a41e         db  0xff ; '.'
000000000000a41f         db  0xff ; '.'
000000000000a420         db  0x2c ; ','
000000000000a421         db  0x0a ; '.'
000000000000a422         db  0x00 ; '.'
000000000000a423         db  0x00 ; '.'
000000000000a424         db  0xc8 ; '.'
000000000000a425         db  0xac ; '.'
000000000000a426         db  0xff ; '.'
000000000000a427         db  0xff ; '.'
000000000000a428         db  0x48 ; 'H'
000000000000a429         db  0x0a ; '.'
000000000000a42a         db  0x00 ; '.'
000000000000a42b         db  0x00 ; '.'
000000000000a42c         db  0xd8 ; '.'
000000000000a42d         db  0xac ; '.'
000000000000a42e         db  0xff ; '.'
000000000000a42f         db  0xff ; '.'
000000000000a430         db  0x5c ; '\'
000000000000a431         db  0x0a ; '.'
000000000000a432         db  0x00 ; '.'
000000000000a433         db  0x00 ; '.'
000000000000a434         db  0xe8 ; '.'
000000000000a435         db  0xac ; '.'
000000000000a436         db  0xff ; '.'
000000000000a437         db  0xff ; '.'
000000000000a438         db  0x70 ; 'p'
000000000000a439         db  0x0a ; '.'
000000000000a43a         db  0x00 ; '.'
000000000000a43b         db  0x00 ; '.'
000000000000a43c         db  0x88 ; '.'
000000000000a43d         db  0xad ; '.'
000000000000a43e         db  0xff ; '.'
000000000000a43f         db  0xff ; '.'
000000000000a440         db  0x8c ; '.'
000000000000a441         db  0x0a ; '.'
000000000000a442         db  0x00 ; '.'
000000000000a443         db  0x00 ; '.'
000000000000a444         db  0x98 ; '.'
000000000000a445         db  0xad ; '.'
000000000000a446         db  0xff ; '.'
000000000000a447         db  0xff ; '.'
000000000000a448         db  0xa0 ; '.'
000000000000a449         db  0x0a ; '.'
000000000000a44a         db  0x00 ; '.'
000000000000a44b         db  0x00 ; '.'
000000000000a44c         db  0xb8 ; '.'
000000000000a44d         db  0xad ; '.'
000000000000a44e         db  0xff ; '.'
000000000000a44f         db  0xff ; '.'
000000000000a450         db  0xb4 ; '.'
000000000000a451         db  0x0a ; '.'
000000000000a452         db  0x00 ; '.'
000000000000a453         db  0x00 ; '.'
000000000000a454         db  0xc8 ; '.'
000000000000a455         db  0xad ; '.'
000000000000a456         db  0xff ; '.'
000000000000a457         db  0xff ; '.'
000000000000a458         db  0xc8 ; '.'
000000000000a459         db  0x0a ; '.'
000000000000a45a         db  0x00 ; '.'
000000000000a45b         db  0x00 ; '.'
000000000000a45c         db  0x58 ; 'X'
000000000000a45d         db  0xae ; '.'
000000000000a45e         db  0xff ; '.'
000000000000a45f         db  0xff ; '.'
000000000000a460         db  0xe4 ; '.'
000000000000a461         db  0x0a ; '.'
000000000000a462         db  0x00 ; '.'
000000000000a463         db  0x00 ; '.'
000000000000a464         db  0xf8 ; '.'
000000000000a465         db  0xae ; '.'
000000000000a466         db  0xff ; '.'
000000000000a467         db  0xff ; '.'
000000000000a468         db  0x00 ; '.'
000000000000a469         db  0x0b ; '.'
000000000000a46a         db  0x00 ; '.'
000000000000a46b         db  0x00 ; '.'
000000000000a46c         db  0x08 ; '.'
000000000000a46d         db  0xaf ; '.'
000000000000a46e         db  0xff ; '.'
000000000000a46f         db  0xff ; '.'
000000000000a470         db  0x14 ; '.'
000000000000a471         db  0x0b ; '.'
000000000000a472         db  0x00 ; '.'
000000000000a473         db  0x00 ; '.'
000000000000a474         db  0x28 ; '('
000000000000a475         db  0xaf ; '.'
000000000000a476         db  0xff ; '.'
000000000000a477         db  0xff ; '.'
000000000000a478         db  0x28 ; '('
000000000000a479         db  0x0b ; '.'
000000000000a47a         db  0x00 ; '.'
000000000000a47b         db  0x00 ; '.'
000000000000a47c         db  0x48 ; 'H'
000000000000a47d         db  0xaf ; '.'
000000000000a47e         db  0xff ; '.'
000000000000a47f         db  0xff ; '.'
000000000000a480         db  0x3c ; '<'
000000000000a481         db  0x0b ; '.'
000000000000a482         db  0x00 ; '.'
000000000000a483         db  0x00 ; '.'
000000000000a484         db  0x58 ; 'X'
000000000000a485         db  0xaf ; '.'
000000000000a486         db  0xff ; '.'
000000000000a487         db  0xff ; '.'
000000000000a488         db  0x50 ; 'P'
000000000000a489         db  0x0b ; '.'
000000000000a48a         db  0x00 ; '.'
000000000000a48b         db  0x00 ; '.'
000000000000a48c         db  0x78 ; 'x'
000000000000a48d         db  0xaf ; '.'
000000000000a48e         db  0xff ; '.'
000000000000a48f         db  0xff ; '.'
000000000000a490         db  0x64 ; 'd'
000000000000a491         db  0x0b ; '.'
000000000000a492         db  0x00 ; '.'
000000000000a493         db  0x00 ; '.'
000000000000a494         db  0x98 ; '.'
000000000000a495         db  0xaf ; '.'
000000000000a496         db  0xff ; '.'
000000000000a497         db  0xff ; '.'
000000000000a498         db  0x78 ; 'x'
000000000000a499         db  0x0b ; '.'
000000000000a49a         db  0x00 ; '.'
000000000000a49b         db  0x00 ; '.'
000000000000a49c         db  0xb8 ; '.'
000000000000a49d         db  0xaf ; '.'
000000000000a49e         db  0xff ; '.'
000000000000a49f         db  0xff ; '.'
000000000000a4a0         db  0x90 ; '.'
000000000000a4a1         db  0x0b ; '.'
000000000000a4a2         db  0x00 ; '.'
000000000000a4a3         db  0x00 ; '.'
000000000000a4a4         db  0xe8 ; '.'
000000000000a4a5         db  0xaf ; '.'
000000000000a4a6         db  0xff ; '.'
000000000000a4a7         db  0xff ; '.'
000000000000a4a8         db  0xac ; '.'
000000000000a4a9         db  0x0b ; '.'
000000000000a4aa         db  0x00 ; '.'
000000000000a4ab         db  0x00 ; '.'
000000000000a4ac         db  0x28 ; '('
000000000000a4ad         db  0xb0 ; '.'
000000000000a4ae         db  0xff ; '.'
000000000000a4af         db  0xff ; '.'
000000000000a4b0         db  0xcc ; '.'
000000000000a4b1         db  0x0b ; '.'
000000000000a4b2         db  0x00 ; '.'
000000000000a4b3         db  0x00 ; '.'
000000000000a4b4         db  0x38 ; '8'
000000000000a4b5         db  0xb0 ; '.'
000000000000a4b6         db  0xff ; '.'
000000000000a4b7         db  0xff ; '.'
000000000000a4b8         db  0xe0 ; '.'
000000000000a4b9         db  0x0b ; '.'
000000000000a4ba         db  0x00 ; '.'
000000000000a4bb         db  0x00 ; '.'
000000000000a4bc         db  0x58 ; 'X'
000000000000a4bd         db  0xb1 ; '.'
000000000000a4be         db  0xff ; '.'
000000000000a4bf         db  0xff ; '.'
000000000000a4c0         db  0x2c ; ','
000000000000a4c1         db  0x0c ; '.'
000000000000a4c2         db  0x00 ; '.'
000000000000a4c3         db  0x00 ; '.'
000000000000a4c4         db  0x78 ; 'x'
000000000000a4c5         db  0xb1 ; '.'
000000000000a4c6         db  0xff ; '.'
000000000000a4c7         db  0xff ; '.'
000000000000a4c8         db  0x48 ; 'H'
000000000000a4c9         db  0x0c ; '.'
000000000000a4ca         db  0x00 ; '.'
000000000000a4cb         db  0x00 ; '.'
000000000000a4cc         db  0xd8 ; '.'
000000000000a4cd         db  0xb1 ; '.'
000000000000a4ce         db  0xff ; '.'
000000000000a4cf         db  0xff ; '.'
000000000000a4d0         db  0x80 ; '.'
000000000000a4d1         db  0x0c ; '.'
000000000000a4d2         db  0x00 ; '.'
000000000000a4d3         db  0x00 ; '.'
000000000000a4d4         db  0xe8 ; '.'
000000000000a4d5         db  0xb1 ; '.'
000000000000a4d6         db  0xff ; '.'
000000000000a4d7         db  0xff ; '.'
000000000000a4d8         db  0x94 ; '.'
000000000000a4d9         db  0x0c ; '.'
000000000000a4da         db  0x00 ; '.'
000000000000a4db         db  0x00 ; '.'
000000000000a4dc         db  0xf8 ; '.'
000000000000a4dd         db  0xb1 ; '.'
000000000000a4de         db  0xff ; '.'
000000000000a4df         db  0xff ; '.'
000000000000a4e0         db  0xa8 ; '.'
000000000000a4e1         db  0x0c ; '.'
000000000000a4e2         db  0x00 ; '.'
000000000000a4e3         db  0x00 ; '.'
000000000000a4e4         db  0x28 ; '('
000000000000a4e5         db  0xb2 ; '.'
000000000000a4e6         db  0xff ; '.'
000000000000a4e7         db  0xff ; '.'
000000000000a4e8         db  0xbc ; '.'
000000000000a4e9         db  0x0c ; '.'
000000000000a4ea         db  0x00 ; '.'
000000000000a4eb         db  0x00 ; '.'
000000000000a4ec         db  0x78 ; 'x'
000000000000a4ed         db  0xb5 ; '.'
000000000000a4ee         db  0xff ; '.'
000000000000a4ef         db  0xff ; '.'
000000000000a4f0         db  0x08 ; '.'
000000000000a4f1         db  0x0d ; '.'
000000000000a4f2         db  0x00 ; '.'
000000000000a4f3         db  0x00 ; '.'
000000000000a4f4         db  0xd8 ; '.'
000000000000a4f5         db  0xb5 ; '.'
000000000000a4f6         db  0xff ; '.'
000000000000a4f7         db  0xff ; '.'
000000000000a4f8         db  0x28 ; '('
000000000000a4f9         db  0x0d ; '.'
000000000000a4fa         db  0x00 ; '.'
000000000000a4fb         db  0x00 ; '.'
000000000000a4fc         db  0x08 ; '.'
000000000000a4fd         db  0xb9 ; '.'
000000000000a4fe         db  0xff ; '.'
000000000000a4ff         db  0xff ; '.'
000000000000a500         db  0x74 ; 't'
000000000000a501         db  0x0d ; '.'
000000000000a502         db  0x00 ; '.'
000000000000a503         db  0x00 ; '.'
000000000000a504         db  0x18 ; '.'
000000000000a505         db  0xb9 ; '.'
000000000000a506         db  0xff ; '.'
000000000000a507         db  0xff ; '.'
000000000000a508         db  0x88 ; '.'
000000000000a509         db  0x0d ; '.'
000000000000a50a         db  0x00 ; '.'
000000000000a50b         db  0x00 ; '.'
000000000000a50c         db  0x28 ; '('
000000000000a50d         db  0xb9 ; '.'
000000000000a50e         db  0xff ; '.'
000000000000a50f         db  0xff ; '.'
000000000000a510         db  0x9c ; '.'
000000000000a511         db  0x0d ; '.'
000000000000a512         db  0x00 ; '.'
000000000000a513         db  0x00 ; '.'
000000000000a514         db  0xc8 ; '.'
000000000000a515         db  0xba ; '.'
000000000000a516         db  0xff ; '.'
000000000000a517         db  0xff ; '.'
000000000000a518         db  0x00 ; '.'
000000000000a519         db  0x0e ; '.'
000000000000a51a         db  0x00 ; '.'
000000000000a51b         db  0x00 ; '.'
000000000000a51c         db  0x18 ; '.'
000000000000a51d         db  0xbb ; '.'
000000000000a51e         db  0xff ; '.'
000000000000a51f         db  0xff ; '.'
000000000000a520         db  0x38 ; '8'
000000000000a521         db  0x0e ; '.'
000000000000a522         db  0x00 ; '.'
000000000000a523         db  0x00 ; '.'
000000000000a524         db  0xa8 ; '.'
000000000000a525         db  0xbd ; '.'
000000000000a526         db  0xff ; '.'
000000000000a527         db  0xff ; '.'
000000000000a528         db  0x4c ; 'L'
000000000000a529         db  0x0e ; '.'
000000000000a52a         db  0x00 ; '.'
000000000000a52b         db  0x00 ; '.'
000000000000a52c         db  0xe8 ; '.'
000000000000a52d         db  0xbf ; '.'
000000000000a52e         db  0xff ; '.'
000000000000a52f         db  0xff ; '.'
000000000000a530         db  0x80 ; '.'
000000000000a531         db  0x0e ; '.'
000000000000a532         db  0x00 ; '.'
000000000000a533         db  0x00 ; '.'
000000000000a534         db  0xc8 ; '.'
000000000000a535         db  0xc1 ; '.'
000000000000a536         db  0xff ; '.'
000000000000a537         db  0xff ; '.'
000000000000a538         db  0xd0 ; '.'
000000000000a539         db  0x0e ; '.'
000000000000a53a         db  0x00 ; '.'
000000000000a53b         db  0x00 ; '.'
000000000000a53c         db  0x48 ; 'H'
000000000000a53d         db  0xc2 ; '.'
000000000000a53e         db  0xff ; '.'
000000000000a53f         db  0xff ; '.'
000000000000a540         db  0x0c ; '.'
000000000000a541         db  0x0f ; '.'
000000000000a542         db  0x00 ; '.'
000000000000a543         db  0x00 ; '.'
000000000000a544         db  0x58 ; 'X'
000000000000a545         db  0xc2 ; '.'
000000000000a546         db  0xff ; '.'
000000000000a547         db  0xff ; '.'
000000000000a548         db  0x20 ; ' '
000000000000a549         db  0x0f ; '.'
000000000000a54a         db  0x00 ; '.'
000000000000a54b         db  0x00 ; '.'
000000000000a54c         db  0x68 ; 'h'
000000000000a54d         db  0xc2 ; '.'
000000000000a54e         db  0xff ; '.'
000000000000a54f         db  0xff ; '.'
000000000000a550         db  0x38 ; '8'
000000000000a551         db  0x0f ; '.'
000000000000a552         db  0x00 ; '.'
000000000000a553         db  0x00 ; '.'
000000000000a554         db  0x88 ; '.'
000000000000a555         db  0xc6 ; '.'
000000000000a556         db  0xff ; '.'
000000000000a557         db  0xff ; '.'
000000000000a558         db  0x4c ; 'L'
000000000000a559         db  0x10 ; '.'
000000000000a55a         db  0x00 ; '.'
000000000000a55b         db  0x00 ; '.'
000000000000a55c         db  0xa8 ; '.'
000000000000a55d         db  0xc6 ; '.'
000000000000a55e         db  0xff ; '.'
000000000000a55f         db  0xff ; '.'
000000000000a560         db  0x60 ; '`'
000000000000a561         db  0x10 ; '.'
000000000000a562         db  0x00 ; '.'
000000000000a563         db  0x00 ; '.'
000000000000a564         db  0x28 ; '('
000000000000a565         db  0xc7 ; '.'
000000000000a566         db  0xff ; '.'
000000000000a567         db  0xff ; '.'
000000000000a568         db  0x7c ; '|'
000000000000a569         db  0x10 ; '.'
000000000000a56a         db  0x00 ; '.'
000000000000a56b         db  0x00 ; '.'
000000000000a56c         db  0x08 ; '.'
000000000000a56d         db  0xc8 ; '.'
000000000000a56e         db  0xff ; '.'
000000000000a56f         db  0xff ; '.'
000000000000a570         db  0xa8 ; '.'
000000000000a571         db  0x10 ; '.'
000000000000a572         db  0x00 ; '.'
000000000000a573         db  0x00 ; '.'
000000000000a574         db  0x88 ; '.'
000000000000a575         db  0xc8 ; '.'
000000000000a576         db  0xff ; '.'
000000000000a577         db  0xff ; '.'
000000000000a578         db  0xc8 ; '.'
000000000000a579         db  0x10 ; '.'
000000000000a57a         db  0x00 ; '.'
000000000000a57b         db  0x00 ; '.'
000000000000a57c         db  0xa8 ; '.'
000000000000a57d         db  0xc8 ; '.'
000000000000a57e         db  0xff ; '.'
000000000000a57f         db  0xff ; '.'
000000000000a580         db  0xe4 ; '.'
000000000000a581         db  0x10 ; '.'
000000000000a582         db  0x00 ; '.'
000000000000a583         db  0x00 ; '.'
000000000000a584         db  0xd8 ; '.'
000000000000a585         db  0xc8 ; '.'
000000000000a586         db  0xff ; '.'
000000000000a587         db  0xff ; '.'
000000000000a588         db  0xf8 ; '.'
000000000000a589         db  0x10 ; '.'
000000000000a58a         db  0x00 ; '.'
000000000000a58b         db  0x00 ; '.'
000000000000a58c         db  0xe8 ; '.'
000000000000a58d         db  0xc8 ; '.'
000000000000a58e         db  0xff ; '.'
000000000000a58f         db  0xff ; '.'
000000000000a590         db  0x0c ; '.'
000000000000a591         db  0x11 ; '.'
000000000000a592         db  0x00 ; '.'
000000000000a593         db  0x00 ; '.'
000000000000a594         db  0x28 ; '('
000000000000a595         db  0xc9 ; '.'
000000000000a596         db  0xff ; '.'
000000000000a597         db  0xff ; '.'
000000000000a598         db  0x30 ; '0'
000000000000a599         db  0x11 ; '.'
000000000000a59a         db  0x00 ; '.'
000000000000a59b         db  0x00 ; '.'
000000000000a59c         db  0x58 ; 'X'
000000000000a59d         db  0xc9 ; '.'
000000000000a59e         db  0xff ; '.'
000000000000a59f         db  0xff ; '.'
000000000000a5a0         db  0x44 ; 'D'
000000000000a5a1         db  0x11 ; '.'
000000000000a5a2         db  0x00 ; '.'
000000000000a5a3         db  0x00 ; '.'
000000000000a5a4         db  0xe8 ; '.'
000000000000a5a5         db  0xc9 ; '.'
000000000000a5a6         db  0xff ; '.'
000000000000a5a7         db  0xff ; '.'
000000000000a5a8         db  0x5c ; '\'
000000000000a5a9         db  0x11 ; '.'
000000000000a5aa         db  0x00 ; '.'
000000000000a5ab         db  0x00 ; '.'
000000000000a5ac         db  0x38 ; '8'
000000000000a5ad         db  0xca ; '.'
000000000000a5ae         db  0xff ; '.'
000000000000a5af         db  0xff ; '.'
000000000000a5b0         db  0x74 ; 't'
000000000000a5b1         db  0x11 ; '.'
000000000000a5b2         db  0x00 ; '.'
000000000000a5b3         db  0x00 ; '.'
000000000000a5b4         db  0x58 ; 'X'
000000000000a5b5         db  0xca ; '.'
000000000000a5b6         db  0xff ; '.'
000000000000a5b7         db  0xff ; '.'
000000000000a5b8         db  0x90 ; '.'
000000000000a5b9         db  0x11 ; '.'
000000000000a5ba         db  0x00 ; '.'
000000000000a5bb         db  0x00 ; '.'
000000000000a5bc         db  0x88 ; '.'
000000000000a5bd         db  0xca ; '.'
000000000000a5be         db  0xff ; '.'
000000000000a5bf         db  0xff ; '.'
000000000000a5c0         db  0xac ; '.'
000000000000a5c1         db  0x11 ; '.'
000000000000a5c2         db  0x00 ; '.'
000000000000a5c3         db  0x00 ; '.'
000000000000a5c4         db  0xb8 ; '.'
000000000000a5c5         db  0xca ; '.'
000000000000a5c6         db  0xff ; '.'
000000000000a5c7         db  0xff ; '.'
000000000000a5c8         db  0xd4 ; '.'
000000000000a5c9         db  0x11 ; '.'
000000000000a5ca         db  0x00 ; '.'
000000000000a5cb         db  0x00 ; '.'
000000000000a5cc         db  0xd8 ; '.'
000000000000a5cd         db  0xca ; '.'
000000000000a5ce         db  0xff ; '.'
000000000000a5cf         db  0xff ; '.'
000000000000a5d0         db  0xf0 ; '.'
000000000000a5d1         db  0x11 ; '.'
000000000000a5d2         db  0x00 ; '.'
000000000000a5d3         db  0x00 ; '.'
000000000000a5d4         db  0x18 ; '.'
000000000000a5d5         db  0xcb ; '.'
000000000000a5d6         db  0xff ; '.'
000000000000a5d7         db  0xff ; '.'
000000000000a5d8         db  0x08 ; '.'
000000000000a5d9         db  0x12 ; '.'
000000000000a5da         db  0x00 ; '.'
000000000000a5db         db  0x00 ; '.'
000000000000a5dc         db  0x18 ; '.'
000000000000a5dd         db  0xcc ; '.'
000000000000a5de         db  0xff ; '.'
000000000000a5df         db  0xff ; '.'
000000000000a5e0         db  0x54 ; 'T'
000000000000a5e1         db  0x12 ; '.'
000000000000a5e2         db  0x00 ; '.'
000000000000a5e3         db  0x00 ; '.'
000000000000a5e4         db  0x48 ; 'H'
000000000000a5e5         db  0xcc ; '.'
000000000000a5e6         db  0xff ; '.'
000000000000a5e7         db  0xff ; '.'
000000000000a5e8         db  0x70 ; 'p'
000000000000a5e9         db  0x12 ; '.'
000000000000a5ea         db  0x00 ; '.'
000000000000a5eb         db  0x00 ; '.'
000000000000a5ec         db  0x68 ; 'h'
000000000000a5ed         db  0xd0 ; '.'
000000000000a5ee         db  0xff ; '.'
000000000000a5ef         db  0xff ; '.'
000000000000a5f0         db  0xc0 ; '.'
000000000000a5f1         db  0x12 ; '.'
000000000000a5f2         db  0x00 ; '.'
000000000000a5f3         db  0x00 ; '.'
000000000000a5f4         db  0x88 ; '.'
000000000000a5f5         db  0xd4 ; '.'
000000000000a5f6         db  0xff ; '.'
000000000000a5f7         db  0xff ; '.'
000000000000a5f8         db  0x10 ; '.'
000000000000a5f9         db  0x13 ; '.'
000000000000a5fa         db  0x00 ; '.'
000000000000a5fb         db  0x00 ; '.'
000000000000a5fc         db  0x08 ; '.'
000000000000a5fd         db  0xd5 ; '.'
000000000000a5fe         db  0xff ; '.'
000000000000a5ff         db  0xff ; '.'
000000000000a600         db  0x48 ; 'H'
000000000000a601         db  0x13 ; '.'
000000000000a602         db  0x00 ; '.'
000000000000a603         db  0x00 ; '.'
000000000000a604         db  0x48 ; 'H'
000000000000a605         db  0xd5 ; '.'
000000000000a606         db  0xff ; '.'
000000000000a607         db  0xff ; '.'
000000000000a608         db  0x68 ; 'h'
000000000000a609         db  0x13 ; '.'
000000000000a60a         db  0x00 ; '.'
000000000000a60b         db  0x00 ; '.'
000000000000a60c         db  0xa8 ; '.'
000000000000a60d         db  0xd5 ; '.'
000000000000a60e         db  0xff ; '.'
000000000000a60f         db  0xff ; '.'
000000000000a610         db  0x98 ; '.'
000000000000a611         db  0x13 ; '.'
000000000000a612         db  0x00 ; '.'
000000000000a613         db  0x00 ; '.'
000000000000a614         db  0x38 ; '8'
000000000000a615         db  0xd6 ; '.'
000000000000a616         db  0xff ; '.'
000000000000a617         db  0xff ; '.'
000000000000a618         db  0xd8 ; '.'
000000000000a619         db  0x13 ; '.'
000000000000a61a         db  0x00 ; '.'
000000000000a61b         db  0x00 ; '.'
000000000000a61c         db  0xb8 ; '.'
000000000000a61d         db  0xd6 ; '.'
000000000000a61e         db  0xff ; '.'
000000000000a61f         db  0xff ; '.'
000000000000a620         db  0x28 ; '('
000000000000a621         db  0x14 ; '.'
000000000000a622         db  0x00 ; '.'
000000000000a623         db  0x00 ; '.'
000000000000a624         db  0x58 ; 'X'
000000000000a625         db  0xd7 ; '.'
000000000000a626         db  0xff ; '.'
000000000000a627         db  0xff ; '.'
000000000000a628         db  0x58 ; 'X'
000000000000a629         db  0x14 ; '.'
000000000000a62a         db  0x00 ; '.'
000000000000a62b         db  0x00 ; '.'
000000000000a62c         db  0xb8 ; '.'
000000000000a62d         db  0xd7 ; '.'
000000000000a62e         db  0xff ; '.'
000000000000a62f         db  0xff ; '.'
000000000000a630         db  0x78 ; 'x'
000000000000a631         db  0x14 ; '.'
000000000000a632         db  0x00 ; '.'
000000000000a633         db  0x00 ; '.'
000000000000a634         db  0x58 ; 'X'
000000000000a635         db  0xd8 ; '.'
000000000000a636         db  0xff ; '.'
000000000000a637         db  0xff ; '.'
000000000000a638         db  0x8c ; '.'
000000000000a639         db  0x14 ; '.'
000000000000a63a         db  0x00 ; '.'
000000000000a63b         db  0x00 ; '.'
000000000000a63c         db  0x68 ; 'h'
000000000000a63d         db  0xd8 ; '.'
000000000000a63e         db  0xff ; '.'
000000000000a63f         db  0xff ; '.'
000000000000a640         db  0xa0 ; '.'
000000000000a641         db  0x14 ; '.'
000000000000a642         db  0x00 ; '.'
000000000000a643         db  0x00 ; '.'
000000000000a644         db  0x78 ; 'x'
000000000000a645         db  0xd8 ; '.'
000000000000a646         db  0xff ; '.'
000000000000a647         db  0xff ; '.'
000000000000a648         db  0xb4 ; '.'
000000000000a649         db  0x14 ; '.'
000000000000a64a         db  0x00 ; '.'
000000000000a64b         db  0x00 ; '.'
000000000000a64c         db  0xa8 ; '.'
000000000000a64d         db  0xd8 ; '.'
000000000000a64e         db  0xff ; '.'
000000000000a64f         db  0xff ; '.'
000000000000a650         db  0xd0 ; '.'
000000000000a651         db  0x14 ; '.'
000000000000a652         db  0x00 ; '.'
000000000000a653         db  0x00 ; '.'
000000000000a654         db  0xc8 ; '.'
000000000000a655         db  0xd9 ; '.'
000000000000a656         db  0xff ; '.'
000000000000a657         db  0xff ; '.'
000000000000a658         db  0x30 ; '0'
000000000000a659         db  0x15 ; '.'
000000000000a65a         db  0x00 ; '.'
000000000000a65b         db  0x00 ; '.'
000000000000a65c         db  0x48 ; 'H'
000000000000a65d         db  0xda ; '.'
000000000000a65e         db  0xff ; '.'
000000000000a65f         db  0xff ; '.'
000000000000a660         db  0x44 ; 'D'
000000000000a661         db  0x15 ; '.'
000000000000a662         db  0x00 ; '.'
000000000000a663         db  0x00 ; '.'
000000000000a664         db  0x88 ; '.'
000000000000a665         db  0xdb ; '.'
000000000000a666         db  0xff ; '.'
000000000000a667         db  0xff ; '.'
000000000000a668         db  0xa4 ; '.'
000000000000a669         db  0x15 ; '.'
000000000000a66a         db  0x00 ; '.'
000000000000a66b         db  0x00 ; '.'
000000000000a66c         db  0x98 ; '.'
000000000000a66d         db  0xdb ; '.'
000000000000a66e         db  0xff ; '.'
000000000000a66f         db  0xff ; '.'
000000000000a670         db  0xb8 ; '.'
000000000000a671         db  0x15 ; '.'
000000000000a672         db  0x00 ; '.'
000000000000a673         db  0x00 ; '.'
000000000000a674         db  0xa8 ; '.'
000000000000a675         db  0xdb ; '.'
000000000000a676         db  0xff ; '.'
000000000000a677         db  0xff ; '.'
000000000000a678         db  0xcc ; '.'
000000000000a679         db  0x15 ; '.'
000000000000a67a         db  0x00 ; '.'
000000000000a67b         db  0x00 ; '.'
000000000000a67c         db  0xb8 ; '.'
000000000000a67d         db  0xdb ; '.'
000000000000a67e         db  0xff ; '.'
000000000000a67f         db  0xff ; '.'
000000000000a680         db  0xe0 ; '.'
000000000000a681         db  0x15 ; '.'
000000000000a682         db  0x00 ; '.'
000000000000a683         db  0x00 ; '.'
000000000000a684         db  0x08 ; '.'
000000000000a685         db  0xdc ; '.'
000000000000a686         db  0xff ; '.'
000000000000a687         db  0xff ; '.'
000000000000a688         db  0xf4 ; '.'
000000000000a689         db  0x15 ; '.'
000000000000a68a         db  0x00 ; '.'
000000000000a68b         db  0x00 ; '.'
000000000000a68c         db  0x68 ; 'h'
000000000000a68d         db  0xdc ; '.'
000000000000a68e         db  0xff ; '.'
000000000000a68f         db  0xff ; '.'
000000000000a690         db  0x08 ; '.'
000000000000a691         db  0x16 ; '.'
000000000000a692         db  0x00 ; '.'
000000000000a693         db  0x00 ; '.'
000000000000a694         db  0xb8 ; '.'
000000000000a695         db  0xdd ; '.'
000000000000a696         db  0xff ; '.'
000000000000a697         db  0xff ; '.'
000000000000a698         db  0x44 ; 'D'
000000000000a699         db  0x16 ; '.'
000000000000a69a         db  0x00 ; '.'
000000000000a69b         db  0x00 ; '.'
000000000000a69c         db  0x18 ; '.'
000000000000a69d         db  0xde ; '.'
000000000000a69e         db  0xff ; '.'
000000000000a69f         db  0xff ; '.'
000000000000a6a0         db  0x7c ; '|'
000000000000a6a1         db  0x16 ; '.'
000000000000a6a2         db  0x00 ; '.'
000000000000a6a3         db  0x00 ; '.'
000000000000a6a4         db  0x68 ; 'h'
000000000000a6a5         db  0xde ; '.'
000000000000a6a6         db  0xff ; '.'
000000000000a6a7         db  0xff ; '.'
000000000000a6a8         db  0x90 ; '.'
000000000000a6a9         db  0x16 ; '.'
000000000000a6aa         db  0x00 ; '.'
000000000000a6ab         db  0x00 ; '.'
000000000000a6ac         db  0xe8 ; '.'
000000000000a6ad         db  0xde ; '.'
000000000000a6ae         db  0xff ; '.'
000000000000a6af         db  0xff ; '.'
000000000000a6b0         db  0xc4 ; '.'
000000000000a6b1         db  0x16 ; '.'
000000000000a6b2         db  0x00 ; '.'
000000000000a6b3         db  0x00 ; '.'
000000000000a6b4         db  0x58 ; 'X'
000000000000a6b5         db  0xdf ; '.'
000000000000a6b6         db  0xff ; '.'
000000000000a6b7         db  0xff ; '.'
000000000000a6b8         db  0xd8 ; '.'
000000000000a6b9         db  0x16 ; '.'
000000000000a6ba         db  0x00 ; '.'
000000000000a6bb         db  0x00 ; '.'
000000000000a6bc         db  0xc8 ; '.'
000000000000a6bd         db  0xdf ; '.'
000000000000a6be         db  0xff ; '.'
000000000000a6bf         db  0xff ; '.'
000000000000a6c0         db  0x24 ; '$'
000000000000a6c1         db  0x17 ; '.'
000000000000a6c2         db  0x00 ; '.'
000000000000a6c3         db  0x00 ; '.'
000000000000a6c4         db  0x08 ; '.'
000000000000a6c5         db  0xe0 ; '.'
000000000000a6c6         db  0xff ; '.'
000000000000a6c7         db  0xff ; '.'
000000000000a6c8         db  0x38 ; '8'
000000000000a6c9         db  0x17 ; '.'
000000000000a6ca         db  0x00 ; '.'
000000000000a6cb         db  0x00 ; '.'
000000000000a6cc         db  0x28 ; '('
000000000000a6cd         db  0xe0 ; '.'
000000000000a6ce         db  0xff ; '.'
000000000000a6cf         db  0xff ; '.'
000000000000a6d0         db  0x4c ; 'L'
000000000000a6d1         db  0x17 ; '.'
000000000000a6d2         db  0x00 ; '.'
000000000000a6d3         db  0x00 ; '.'
000000000000a6d4         db  0xe8 ; '.'
000000000000a6d5         db  0xe1 ; '.'
000000000000a6d6         db  0xff ; '.'
000000000000a6d7         db  0xff ; '.'
000000000000a6d8         db  0x98 ; '.'
000000000000a6d9         db  0x17 ; '.'
000000000000a6da         db  0x00 ; '.'
000000000000a6db         db  0x00 ; '.'
000000000000a6dc         db  0x78 ; 'x'
000000000000a6dd         db  0xe2 ; '.'
000000000000a6de         db  0xff ; '.'
000000000000a6df         db  0xff ; '.'
000000000000a6e0         db  0xc4 ; '.'
000000000000a6e1         db  0x17 ; '.'
000000000000a6e2         db  0x00 ; '.'
000000000000a6e3         db  0x00 ; '.'
000000000000a6e4         db  0x58 ; 'X'
000000000000a6e5         db  0xe3 ; '.'
000000000000a6e6         db  0xff ; '.'
000000000000a6e7         db  0xff ; '.'
000000000000a6e8         db  0xf0 ; '.'
000000000000a6e9         db  0x17 ; '.'
000000000000a6ea         db  0x00 ; '.'
000000000000a6eb         db  0x00 ; '.'
000000000000a6ec         db  0x98 ; '.'
000000000000a6ed         db  0xe5 ; '.'
000000000000a6ee         db  0xff ; '.'
000000000000a6ef         db  0xff ; '.'
000000000000a6f0         db  0x28 ; '('
000000000000a6f1         db  0x18 ; '.'
000000000000a6f2         db  0x00 ; '.'
000000000000a6f3         db  0x00 ; '.'
000000000000a6f4         db  0x28 ; '('
000000000000a6f5         db  0xe8 ; '.'
000000000000a6f6         db  0xff ; '.'
000000000000a6f7         db  0xff ; '.'
000000000000a6f8         db  0x64 ; 'd'
000000000000a6f9         db  0x18 ; '.'
000000000000a6fa         db  0x00 ; '.'
000000000000a6fb         db  0x00 ; '.'
000000000000a6fc         db  0x88 ; '.'
000000000000a6fd         db  0xe8 ; '.'
000000000000a6fe         db  0xff ; '.'
000000000000a6ff         db  0xff ; '.'
000000000000a700         db  0x88 ; '.'
000000000000a701         db  0x18 ; '.'
000000000000a702         db  0x00 ; '.'
000000000000a703         db  0x00 ; '.'
000000000000a704         db  0x98 ; '.'
000000000000a705         db  0xea ; '.'
000000000000a706         db  0xff ; '.'
000000000000a707         db  0xff ; '.'
000000000000a708         db  0xc0 ; '.'
000000000000a709         db  0x18 ; '.'
000000000000a70a         db  0x00 ; '.'
000000000000a70b         db  0x00 ; '.'
000000000000a70c         db  0xd8 ; '.'
000000000000a70d         db  0xea ; '.'
000000000000a70e         db  0xff ; '.'
000000000000a70f         db  0xff ; '.'
000000000000a710         db  0xe0 ; '.'
000000000000a711         db  0x18 ; '.'
000000000000a712         db  0x00 ; '.'
000000000000a713         db  0x00 ; '.'
000000000000a714         db  0xe8 ; '.'
000000000000a715         db  0xea ; '.'
000000000000a716         db  0xff ; '.'
000000000000a717         db  0xff ; '.'
000000000000a718         db  0xf8 ; '.'
000000000000a719         db  0x18 ; '.'
000000000000a71a         db  0x00 ; '.'
000000000000a71b         db  0x00 ; '.'
000000000000a71c         db  0x68 ; 'h'
000000000000a71d         db  0xed ; '.'
000000000000a71e         db  0xff ; '.'
000000000000a71f         db  0xff ; '.'
000000000000a720         db  0x30 ; '0'
000000000000a721         db  0x19 ; '.'
000000000000a722         db  0x00 ; '.'
000000000000a723         db  0x00 ; '.'
000000000000a724         db  0xd8 ; '.'
000000000000a725         db  0xed ; '.'
000000000000a726         db  0xff ; '.'
000000000000a727         db  0xff ; '.'
000000000000a728         db  0x78 ; 'x'
000000000000a729         db  0x19 ; '.'
000000000000a72a         db  0x00 ; '.'
000000000000a72b         db  0x00 ; '.'
000000000000a72c         db  0xe8 ; '.'
000000000000a72d         db  0xed ; '.'
000000000000a72e         db  0xff ; '.'
000000000000a72f         db  0xff ; '.'
000000000000a730         db  0x90 ; '.'
000000000000a731         db  0x19 ; '.'
000000000000a732         db  0x00 ; '.'
000000000000a733         db  0x00 ; '.'
000000000000a734         db  0x00 ; '.'
000000000000a735         db  0x00 ; '.'
000000000000a736         db  0x00 ; '.'
000000000000a737         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0xa738; 0xbca0[ (5480 bytes)
        ; File offset : [42808; 48288[ (5480 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000a738         dd         0x00000014                                  ; Length of the record
000000000000a73c         dd         0x00000000                                  ; CIE ID
000000000000a740         db         0x01                                        ; Version
000000000000a741         db         "zR", 0                                     ; Augmentation String
000000000000a744         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000a745         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000a746         db         0x10                                        ; Return address register
000000000000a747         db         0x01                                        ; Augmentation data length
000000000000a748         db         0x1b                                        ; FDE encoding
000000000000a749         db  0x0c ; '.'
000000000000a74a         db  0x07 ; '.'
000000000000a74b         db  0x08 ; '.'
000000000000a74c         db  0x90 ; '.'
000000000000a74d         db  0x01 ; '.'
000000000000a74e         db  0x07 ; '.'
000000000000a74f         db  0x10 ; '.'
000000000000a750         dd         0x00000014                                  ; Length of the record
000000000000a754         dd         0x0000001c                                  ; FDE: parent CIE at 0xa738 (FDE encoding = 0x1B)
000000000000a758         db         0xe8, 0x84, 2 dup (0xff)                    ; begin 0x2c40
000000000000a75c         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x2c6b)
000000000000a760         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a761         align      8
000000000000a768         dd         0x00000014                                  ; Length of the record
000000000000a76c         dd         0x00000000                                  ; CIE ID
000000000000a770         db         0x01                                        ; Version
000000000000a771         db         "zR", 0                                     ; Augmentation String
000000000000a774         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000a775         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000a776         db         0x10                                        ; Return address register
000000000000a777         db         0x01                                        ; Augmentation data length
000000000000a778         db         0x1b                                        ; FDE encoding
000000000000a779         db  0x0c ; '.'
000000000000a77a         db  0x07 ; '.'
000000000000a77b         db  0x08 ; '.'
000000000000a77c         db  0x90 ; '.'
000000000000a77d         db  0x01 ; '.'
000000000000a77e         db  0x00 ; '.'
000000000000a77f         db  0x00 ; '.'
000000000000a780         dd         0x00000024                                  ; Length of the record
000000000000a784         dd         0x0000001c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000a788         db         0xf8, 0x71, 2 dup (0xff)                    ; begin 0x1980
000000000000a78c         db         0x50, 0x04, 2 dup (0x00)                    ; length 0x450 (end at 0x1dd0)
000000000000a790         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a791         db  0x0e ; '.'
000000000000a792         db  0x10 ; '.'
000000000000a793         db  0x46 ; 'F'
000000000000a794         db  0x0e ; '.'
000000000000a795         db  0x18 ; '.'
000000000000a796         db  0x4a ; 'J'
000000000000a797         db  0x0f ; '.'
000000000000a798         db  0x0b ; '.'
000000000000a799         db  0x77 ; 'w'
000000000000a79a         db  0x08 ; '.'
000000000000a79b         db  0x80 ; '.'
000000000000a79c         db  0x00 ; '.'
000000000000a79d         db  0x3f ; '?'
000000000000a79e         db  0x1a ; '.'
000000000000a79f         db  0x3b ; ';'
000000000000a7a0         db  0x2a ; '*'
000000000000a7a1         db  0x33 ; '3'
000000000000a7a2         db  0x24 ; '$'
000000000000a7a3         db  0x22 ; '"'
000000000000a7a4         db  0x00 ; '.'
000000000000a7a5         db  0x00 ; '.'
000000000000a7a6         db  0x00 ; '.'
000000000000a7a7         db  0x00 ; '.'
000000000000a7a8         dd         0x00000014                                  ; Length of the record
000000000000a7ac         dd         0x00000044                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000a7b0         db         0x20, 0x76, 2 dup (0xff)                    ; begin 0x1dd0
000000000000a7b4         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x1de0)
000000000000a7b8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a7b9         align      64
000000000000a7c0         dd         0x00000028                                  ; Length of the record
000000000000a7c4         dd         0x0000005c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000a7c8         db         0x88, 0x85, 2 dup (0xff)                    ; begin 0x2d50
000000000000a7cc         db         0xda, 0x03, 2 dup (0x00)                    ; length 0x3da (end at 0x312a)
000000000000a7d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a7d1         db  0x42 ; 'B'
000000000000a7d2         db  0x0e ; '.'
000000000000a7d3         db  0x10 ; '.'
000000000000a7d4         db  0x8d ; '.'
000000000000a7d5         db  0x02 ; '.'
000000000000a7d6         db  0x42 ; 'B'
000000000000a7d7         db  0x0e ; '.'
000000000000a7d8         db  0x18 ; '.'
000000000000a7d9         db  0x8c ; '.'
000000000000a7da         db  0x03 ; '.'
000000000000a7db         db  0x46 ; 'F'
000000000000a7dc         db  0x0e ; '.'
000000000000a7dd         db  0x20 ; ' '
000000000000a7de         db  0x86 ; '.'
000000000000a7df         db  0x04 ; '.'
000000000000a7e0         db  0x41 ; 'A'
000000000000a7e1         db  0x0e ; '.'
000000000000a7e2         db  0x28 ; '('
000000000000a7e3         db  0x83 ; '.'
000000000000a7e4         db  0x05 ; '.'
000000000000a7e5         db  0x49 ; 'I'
000000000000a7e6         db  0x0e ; '.'
000000000000a7e7         db  0xb0 ; '.'
000000000000a7e8         db  0x01 ; '.'
000000000000a7e9         db  0x00 ; '.'
000000000000a7ea         db  0x00 ; '.'
000000000000a7eb         db  0x00 ; '.'
000000000000a7ec         dd         0x00000050                                  ; Length of the record
000000000000a7f0         dd         0x00000088                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000a7f4         db         0xec, 0x75, 2 dup (0xff)                    ; begin 0x1de0
000000000000a7f8         db         0x57, 0x0e, 2 dup (0x00)                    ; length 0xe57 (end at 0x2c37)
000000000000a7fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a7fd         db  0x42 ; 'B'
000000000000a7fe         db  0x0e ; '.'
000000000000a7ff         db  0x10 ; '.'
000000000000a800         db  0x8f ; '.'
000000000000a801         db  0x02 ; '.'
000000000000a802         db  0x42 ; 'B'
000000000000a803         db  0x0e ; '.'
000000000000a804         db  0x18 ; '.'
000000000000a805         db  0x8e ; '.'
000000000000a806         db  0x03 ; '.'
000000000000a807         db  0x45 ; 'E'
000000000000a808         db  0x0e ; '.'
000000000000a809         db  0x20 ; ' '
000000000000a80a         db  0x8d ; '.'
000000000000a80b         db  0x04 ; '.'
000000000000a80c         db  0x42 ; 'B'
000000000000a80d         db  0x0e ; '.'
000000000000a80e         db  0x28 ; '('
000000000000a80f         db  0x8c ; '.'
000000000000a810         db  0x05 ; '.'
000000000000a811         db  0x48 ; 'H'
000000000000a812         db  0x0e ; '.'
000000000000a813         db  0x30 ; '0'
000000000000a814         db  0x86 ; '.'
000000000000a815         db  0x06 ; '.'
000000000000a816         db  0x41 ; 'A'
000000000000a817         db  0x0e ; '.'
000000000000a818         db  0x38 ; '8'
000000000000a819         db  0x83 ; '.'
000000000000a81a         db  0x07 ; '.'
000000000000a81b         db  0x52 ; 'R'
000000000000a81c         db  0x0e ; '.'
000000000000a81d         db  0xd0 ; '.'
000000000000a81e         db  0x02 ; '.'
000000000000a81f         db  0x03 ; '.'
000000000000a820         db  0x50 ; 'P'
000000000000a821         db  0x06 ; '.'
000000000000a822         db  0x0a ; '.'
000000000000a823         db  0x0e ; '.'
000000000000a824         db  0x38 ; '8'
000000000000a825         db  0x41 ; 'A'
000000000000a826         db  0x0e ; '.'
000000000000a827         db  0x30 ; '0'
000000000000a828         db  0x41 ; 'A'
000000000000a829         db  0x0e ; '.'
000000000000a82a         db  0x28 ; '('
000000000000a82b         db  0x42 ; 'B'
000000000000a82c         db  0x0e ; '.'
000000000000a82d         db  0x20 ; ' '
000000000000a82e         db  0x42 ; 'B'
000000000000a82f         db  0x0e ; '.'
000000000000a830         db  0x18 ; '.'
000000000000a831         db  0x42 ; 'B'
000000000000a832         db  0x0e ; '.'
000000000000a833         db  0x10 ; '.'
000000000000a834         db  0x42 ; 'B'
000000000000a835         db  0x0e ; '.'
000000000000a836         db  0x08 ; '.'
000000000000a837         db  0x41 ; 'A'
000000000000a838         db  0x0b ; '.'
000000000000a839         db  0x00 ; '.'
000000000000a83a         db  0x00 ; '.'
000000000000a83b         db  0x00 ; '.'
000000000000a83c         db  0x00 ; '.'
000000000000a83d         db  0x00 ; '.'
000000000000a83e         db  0x00 ; '.'
000000000000a83f         db  0x00 ; '.'
000000000000a840         dd         0x00000010                                  ; Length of the record
000000000000a844         dd         0x000000dc                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000a848         db         0xe8, 0x88, 2 dup (0xff)                    ; begin 0x3130
000000000000a84c         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x3138)
000000000000a850         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a851         align      4
000000000000a854         dd         0x00000010                                  ; Length of the record
000000000000a858         dd         0x000000f0                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000a85c         db         0xe4, 0x88, 2 dup (0xff)                    ; begin 0x3140
000000000000a860         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x3148)
000000000000a864         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a865         align      8
000000000000a868         dd         0x0000002c                                  ; Length of the record
000000000000a86c         dd         0x00000104                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000a870         db         0xe0, 0x88, 2 dup (0xff)                    ; begin 0x3150
000000000000a874         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x31f4)
000000000000a878         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a879         db  0x41 ; 'A'
000000000000a87a         db  0x0e ; '.'
000000000000a87b         db  0x10 ; '.'
000000000000a87c         db  0x86 ; '.'
000000000000a87d         db  0x02 ; '.'
000000000000a87e         db  0x41 ; 'A'
000000000000a87f         db  0x0e ; '.'
000000000000a880         db  0x18 ; '.'
000000000000a881         db  0x83 ; '.'
000000000000a882         db  0x03 ; '.'
000000000000a883         db  0x44 ; 'D'
000000000000a884         db  0x0e ; '.'
000000000000a885         db  0x20 ; ' '
000000000000a886         db  0x7a ; 'z'
000000000000a887         db  0x0a ; '.'
000000000000a888         db  0x0e ; '.'
000000000000a889         db  0x18 ; '.'
000000000000a88a         db  0x41 ; 'A'
000000000000a88b         db  0x0e ; '.'
000000000000a88c         db  0x10 ; '.'
000000000000a88d         db  0x41 ; 'A'
000000000000a88e         db  0x0e ; '.'
000000000000a88f         db  0x08 ; '.'
000000000000a890         db  0x41 ; 'A'
000000000000a891         db  0x0b ; '.'
000000000000a892         db  0x00 ; '.'
000000000000a893         db  0x00 ; '.'
000000000000a894         db  0x00 ; '.'
000000000000a895         db  0x00 ; '.'
000000000000a896         db  0x00 ; '.'
000000000000a897         db  0x00 ; '.'
000000000000a898         dd         0x00000010                                  ; Length of the record
000000000000a89c         dd         0x00000134                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000a8a0         db         0x60, 0x89, 2 dup (0xff)                    ; begin 0x3200
000000000000a8a4         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x3205)
000000000000a8a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a8a9         align      4
000000000000a8ac         dd         0x00000018                                  ; Length of the record
000000000000a8b0         dd         0x00000148                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000a8b4         db         0x5c, 0x89, 2 dup (0xff)                    ; begin 0x3210
000000000000a8b8         db         0x22, 3 dup (0x00)                          ; length 0x22 (end at 0x3232)
000000000000a8bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a8bd         db  0x46 ; 'F'
000000000000a8be         db  0x0e ; '.'
000000000000a8bf         db  0x10 ; '.'
000000000000a8c0         db  0x83 ; '.'
000000000000a8c1         db  0x02 ; '.'
000000000000a8c2         db  0x4e ; 'N'
000000000000a8c3         db  0xc3 ; '.'
000000000000a8c4         db  0x0e ; '.'
000000000000a8c5         db  0x08 ; '.'
000000000000a8c6         db  0x00 ; '.'
000000000000a8c7         db  0x00 ; '.'
000000000000a8c8         dd         0x00000024                                  ; Length of the record
000000000000a8cc         dd         0x00000164                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000a8d0         db         0x70, 0x89, 2 dup (0xff)                    ; begin 0x3240
000000000000a8d4         db         0x42, 3 dup (0x00)                          ; length 0x42 (end at 0x3282)
000000000000a8d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a8d9         db  0x41 ; 'A'
000000000000a8da         db  0x0e ; '.'
000000000000a8db         db  0x10 ; '.'
000000000000a8dc         db  0x86 ; '.'
000000000000a8dd         db  0x02 ; '.'
000000000000a8de         db  0x41 ; 'A'
000000000000a8df         db  0x0e ; '.'
000000000000a8e0         db  0x18 ; '.'
000000000000a8e1         db  0x83 ; '.'
000000000000a8e2         db  0x03 ; '.'
000000000000a8e3         db  0x51 ; 'Q'
000000000000a8e4         db  0x0e ; '.'
000000000000a8e5         db  0x20 ; ' '
000000000000a8e6         db  0x6a ; 'j'
000000000000a8e7         db  0x0e ; '.'
000000000000a8e8         db  0x18 ; '.'
000000000000a8e9         db  0x43 ; 'C'
000000000000a8ea         db  0x0e ; '.'
000000000000a8eb         db  0x10 ; '.'
000000000000a8ec         db  0x41 ; 'A'
000000000000a8ed         db  0x0e ; '.'
000000000000a8ee         db  0x08 ; '.'
000000000000a8ef         db  0x00 ; '.'
000000000000a8f0         dd         0x0000004c                                  ; Length of the record
000000000000a8f4         dd         0x0000018c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000a8f8         db         0x98, 0x89, 2 dup (0xff)                    ; begin 0x3290
000000000000a8fc         db         0xae, 0x01, 2 dup (0x00)                    ; length 0x1ae (end at 0x343e)
000000000000a900         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a901         db  0x42 ; 'B'
000000000000a902         db  0x0e ; '.'
000000000000a903         db  0x10 ; '.'
000000000000a904         db  0x8f ; '.'
000000000000a905         db  0x02 ; '.'
000000000000a906         db  0x42 ; 'B'
000000000000a907         db  0x0e ; '.'
000000000000a908         db  0x18 ; '.'
000000000000a909         db  0x8e ; '.'
000000000000a90a         db  0x03 ; '.'
000000000000a90b         db  0x45 ; 'E'
000000000000a90c         db  0x0e ; '.'
000000000000a90d         db  0x20 ; ' '
000000000000a90e         db  0x8d ; '.'
000000000000a90f         db  0x04 ; '.'
000000000000a910         db  0x42 ; 'B'
000000000000a911         db  0x0e ; '.'
000000000000a912         db  0x28 ; '('
000000000000a913         db  0x8c ; '.'
000000000000a914         db  0x05 ; '.'
000000000000a915         db  0x44 ; 'D'
000000000000a916         db  0x0e ; '.'
000000000000a917         db  0x30 ; '0'
000000000000a918         db  0x86 ; '.'
000000000000a919         db  0x06 ; '.'
000000000000a91a         db  0x41 ; 'A'
000000000000a91b         db  0x0e ; '.'
000000000000a91c         db  0x38 ; '8'
000000000000a91d         db  0x83 ; '.'
000000000000a91e         db  0x07 ; '.'
000000000000a91f         db  0x44 ; 'D'
000000000000a920         db  0x0e ; '.'
000000000000a921         db  0x50 ; 'P'
000000000000a922         db  0x02 ; '.'
000000000000a923         db  0xd0 ; '.'
000000000000a924         db  0x0a ; '.'
000000000000a925         db  0x0e ; '.'
000000000000a926         db  0x38 ; '8'
000000000000a927         db  0x44 ; 'D'
000000000000a928         db  0x0e ; '.'
000000000000a929         db  0x30 ; '0'
000000000000a92a         db  0x41 ; 'A'
000000000000a92b         db  0x0e ; '.'
000000000000a92c         db  0x28 ; '('
000000000000a92d         db  0x42 ; 'B'
000000000000a92e         db  0x0e ; '.'
000000000000a92f         db  0x20 ; ' '
000000000000a930         db  0x42 ; 'B'
000000000000a931         db  0x0e ; '.'
000000000000a932         db  0x18 ; '.'
000000000000a933         db  0x42 ; 'B'
000000000000a934         db  0x0e ; '.'
000000000000a935         db  0x10 ; '.'
000000000000a936         db  0x42 ; 'B'
000000000000a937         db  0x0e ; '.'
000000000000a938         db  0x08 ; '.'
000000000000a939         db  0x47 ; 'G'
000000000000a93a         db  0x0b ; '.'
000000000000a93b         db  0x00 ; '.'
000000000000a93c         db  0x00 ; '.'
000000000000a93d         db  0x00 ; '.'
000000000000a93e         db  0x00 ; '.'
000000000000a93f         db  0x00 ; '.'
000000000000a940         dd         0x00000010                                  ; Length of the record
000000000000a944         dd         0x000001dc                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000a948         db         0xf8, 0x8a, 2 dup (0xff)                    ; begin 0x3440
000000000000a94c         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x3450)
000000000000a950         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a951         align      4
000000000000a954         dd         0x00000060                                  ; Length of the record
000000000000a958         dd         0x000001f0                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000a95c         db         0xf4, 0x8a, 2 dup (0xff)                    ; begin 0x3450
000000000000a960         db         0x08, 0x01, 2 dup (0x00)                    ; length 0x108 (end at 0x3558)
000000000000a964         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a965         db  0x42 ; 'B'
000000000000a966         db  0x0e ; '.'
000000000000a967         db  0x10 ; '.'
000000000000a968         db  0x8f ; '.'
000000000000a969         db  0x02 ; '.'
000000000000a96a         db  0x42 ; 'B'
000000000000a96b         db  0x0e ; '.'
000000000000a96c         db  0x18 ; '.'
000000000000a96d         db  0x8e ; '.'
000000000000a96e         db  0x03 ; '.'
000000000000a96f         db  0x42 ; 'B'
000000000000a970         db  0x0e ; '.'
000000000000a971         db  0x20 ; ' '
000000000000a972         db  0x8d ; '.'
000000000000a973         db  0x04 ; '.'
000000000000a974         db  0x42 ; 'B'
000000000000a975         db  0x0e ; '.'
000000000000a976         db  0x28 ; '('
000000000000a977         db  0x8c ; '.'
000000000000a978         db  0x05 ; '.'
000000000000a979         db  0x41 ; 'A'
000000000000a97a         db  0x0e ; '.'
000000000000a97b         db  0x30 ; '0'
000000000000a97c         db  0x86 ; '.'
000000000000a97d         db  0x06 ; '.'
000000000000a97e         db  0x41 ; 'A'
000000000000a97f         db  0x0e ; '.'
000000000000a980         db  0x38 ; '8'
000000000000a981         db  0x83 ; '.'
000000000000a982         db  0x07 ; '.'
000000000000a983         db  0x44 ; 'D'
000000000000a984         db  0x0e ; '.'
000000000000a985         db  0x50 ; 'P'
000000000000a986         db  0x02 ; '.'
000000000000a987         db  0x96 ; '.'
000000000000a988         db  0x0a ; '.'
000000000000a989         db  0x0e ; '.'
000000000000a98a         db  0x38 ; '8'
000000000000a98b         db  0x41 ; 'A'
000000000000a98c         db  0x0e ; '.'
000000000000a98d         db  0x30 ; '0'
000000000000a98e         db  0x41 ; 'A'
000000000000a98f         db  0x0e ; '.'
000000000000a990         db  0x28 ; '('
000000000000a991         db  0x42 ; 'B'
000000000000a992         db  0x0e ; '.'
000000000000a993         db  0x20 ; ' '
000000000000a994         db  0x42 ; 'B'
000000000000a995         db  0x0e ; '.'
000000000000a996         db  0x18 ; '.'
000000000000a997         db  0x42 ; 'B'
000000000000a998         db  0x0e ; '.'
000000000000a999         db  0x10 ; '.'
000000000000a99a         db  0x42 ; 'B'
000000000000a99b         db  0x0e ; '.'
000000000000a99c         db  0x08 ; '.'
000000000000a99d         db  0x42 ; 'B'
000000000000a99e         db  0x0b ; '.'
000000000000a99f         db  0x02 ; '.'
000000000000a9a0         db  0x44 ; 'D'
000000000000a9a1         db  0x0a ; '.'
000000000000a9a2         db  0x0e ; '.'
000000000000a9a3         db  0x38 ; '8'
000000000000a9a4         db  0x43 ; 'C'
000000000000a9a5         db  0x0e ; '.'
000000000000a9a6         db  0x30 ; '0'
000000000000a9a7         db  0x41 ; 'A'
000000000000a9a8         db  0x0e ; '.'
000000000000a9a9         db  0x28 ; '('
000000000000a9aa         db  0x42 ; 'B'
000000000000a9ab         db  0x0e ; '.'
000000000000a9ac         db  0x20 ; ' '
000000000000a9ad         db  0x42 ; 'B'
000000000000a9ae         db  0x0e ; '.'
000000000000a9af         db  0x18 ; '.'
000000000000a9b0         db  0x42 ; 'B'
000000000000a9b1         db  0x0e ; '.'
000000000000a9b2         db  0x10 ; '.'
000000000000a9b3         db  0x42 ; 'B'
000000000000a9b4         db  0x0e ; '.'
000000000000a9b5         db  0x08 ; '.'
000000000000a9b6         db  0x41 ; 'A'
000000000000a9b7         db  0x0b ; '.'
000000000000a9b8         dd         0x00000010                                  ; Length of the record
000000000000a9bc         dd         0x00000254                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000a9c0         db         0xa0, 0x8b, 2 dup (0xff)                    ; begin 0x3560
000000000000a9c4         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x356a)
000000000000a9c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a9c9         align      4
000000000000a9cc         dd         0x00000010                                  ; Length of the record
000000000000a9d0         dd         0x00000268                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000a9d4         db         0x9c, 0x8b, 2 dup (0xff)                    ; begin 0x3570
000000000000a9d8         db         0x09, 3 dup (0x00)                          ; length 0x9 (end at 0x3579)
000000000000a9dc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a9dd         align      32
000000000000a9e0         dd         0x0000001c                                  ; Length of the record
000000000000a9e4         dd         0x0000027c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000a9e8         db         0x98, 0x8b, 2 dup (0xff)                    ; begin 0x3580
000000000000a9ec         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x361f)
000000000000a9f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a9f1         db  0x44 ; 'D'
000000000000a9f2         db  0x0e ; '.'
000000000000a9f3         db  0x10 ; '.'
000000000000a9f4         db  0x83 ; '.'
000000000000a9f5         db  0x02 ; '.'
000000000000a9f6         db  0x02 ; '.'
000000000000a9f7         db  0x78 ; 'x'
000000000000a9f8         db  0x0a ; '.'
000000000000a9f9         db  0x0e ; '.'
000000000000a9fa         db  0x08 ; '.'
000000000000a9fb         db  0x41 ; 'A'
000000000000a9fc         db  0x0b ; '.'
000000000000a9fd         db  0x00 ; '.'
000000000000a9fe         db  0x00 ; '.'
000000000000a9ff         db  0x00 ; '.'
000000000000aa00         dd         0x00000040                                  ; Length of the record
000000000000aa04         dd         0x0000029c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000aa08         db         0x18, 0x8c, 2 dup (0xff)                    ; begin 0x3620
000000000000aa0c         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x3707)
000000000000aa10         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aa11         db  0x41 ; 'A'
000000000000aa12         db  0x0e ; '.'
000000000000aa13         db  0x10 ; '.'
000000000000aa14         db  0x86 ; '.'
000000000000aa15         db  0x02 ; '.'
000000000000aa16         db  0x41 ; 'A'
000000000000aa17         db  0x0e ; '.'
000000000000aa18         db  0x18 ; '.'
000000000000aa19         db  0x83 ; '.'
000000000000aa1a         db  0x03 ; '.'
000000000000aa1b         db  0x49 ; 'I'
000000000000aa1c         db  0x0e ; '.'
000000000000aa1d         db  0x20 ; ' '
000000000000aa1e         db  0x6e ; 'n'
000000000000aa1f         db  0x0a ; '.'
000000000000aa20         db  0x0e ; '.'
000000000000aa21         db  0x18 ; '.'
000000000000aa22         db  0x41 ; 'A'
000000000000aa23         db  0x0e ; '.'
000000000000aa24         db  0x10 ; '.'
000000000000aa25         db  0x41 ; 'A'
000000000000aa26         db  0x0e ; '.'
000000000000aa27         db  0x08 ; '.'
000000000000aa28         db  0x45 ; 'E'
000000000000aa29         db  0x0b ; '.'
000000000000aa2a         db  0x02 ; '.'
000000000000aa2b         db  0x4a ; 'J'
000000000000aa2c         db  0x0a ; '.'
000000000000aa2d         db  0x0e ; '.'
000000000000aa2e         db  0x18 ; '.'
000000000000aa2f         db  0x41 ; 'A'
000000000000aa30         db  0x0e ; '.'
000000000000aa31         db  0x10 ; '.'
000000000000aa32         db  0x41 ; 'A'
000000000000aa33         db  0x0e ; '.'
000000000000aa34         db  0x08 ; '.'
000000000000aa35         db  0x44 ; 'D'
000000000000aa36         db  0x0b ; '.'
000000000000aa37         db  0x02 ; '.'
000000000000aa38         db  0x54 ; 'T'
000000000000aa39         db  0x0e ; '.'
000000000000aa3a         db  0x18 ; '.'
000000000000aa3b         db  0x41 ; 'A'
000000000000aa3c         db  0x0e ; '.'
000000000000aa3d         db  0x10 ; '.'
000000000000aa3e         db  0x41 ; 'A'
000000000000aa3f         db  0x0e ; '.'
000000000000aa40         db  0x08 ; '.'
000000000000aa41         db  0x00 ; '.'
000000000000aa42         db  0x00 ; '.'
000000000000aa43         db  0x00 ; '.'
000000000000aa44         dd         0x00000074                                  ; Length of the record
000000000000aa48         dd         0x000002e0                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000aa4c         db         0xc4, 0x8c, 2 dup (0xff)                    ; begin 0x3710
000000000000aa50         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x4944)
000000000000aa54         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aa55         db  0x42 ; 'B'
000000000000aa56         db  0x0e ; '.'
000000000000aa57         db  0x10 ; '.'
000000000000aa58         db  0x8f ; '.'
000000000000aa59         db  0x02 ; '.'
000000000000aa5a         db  0x42 ; 'B'
000000000000aa5b         db  0x0e ; '.'
000000000000aa5c         db  0x18 ; '.'
000000000000aa5d         db  0x8e ; '.'
000000000000aa5e         db  0x03 ; '.'
000000000000aa5f         db  0x45 ; 'E'
000000000000aa60         db  0x0e ; '.'
000000000000aa61         db  0x20 ; ' '
000000000000aa62         db  0x8d ; '.'
000000000000aa63         db  0x04 ; '.'
000000000000aa64         db  0x42 ; 'B'
000000000000aa65         db  0x0e ; '.'
000000000000aa66         db  0x28 ; '('
000000000000aa67         db  0x8c ; '.'
000000000000aa68         db  0x05 ; '.'
000000000000aa69         db  0x44 ; 'D'
000000000000aa6a         db  0x0e ; '.'
000000000000aa6b         db  0x30 ; '0'
000000000000aa6c         db  0x86 ; '.'
000000000000aa6d         db  0x06 ; '.'
000000000000aa6e         db  0x41 ; 'A'
000000000000aa6f         db  0x0e ; '.'
000000000000aa70         db  0x38 ; '8'
000000000000aa71         db  0x83 ; '.'
000000000000aa72         db  0x07 ; '.'
000000000000aa73         db  0x53 ; 'S'
000000000000aa74         db  0x0e ; '.'
000000000000aa75         db  0xf0 ; '.'
000000000000aa76         db  0x01 ; '.'
000000000000aa77         db  0x03 ; '.'
000000000000aa78         db  0x81 ; '.'
000000000000aa79         db  0x0b ; '.'
000000000000aa7a         db  0x0e ; '.'
000000000000aa7b         db  0xf8 ; '.'
000000000000aa7c         db  0x01 ; '.'
000000000000aa7d         db  0x4a ; 'J'
000000000000aa7e         db  0x0e ; '.'
000000000000aa7f         db  0x80 ; '.'
000000000000aa80         db  0x02 ; '.'
000000000000aa81         db  0x44 ; 'D'
000000000000aa82         db  0x0e ; '.'
000000000000aa83         db  0x88 ; '.'
000000000000aa84         db  0x02 ; '.'
000000000000aa85         db  0x45 ; 'E'
000000000000aa86         db  0x0e ; '.'
000000000000aa87         db  0x90 ; '.'
000000000000aa88         db  0x02 ; '.'
000000000000aa89         db  0x5f ; '_'
000000000000aa8a         db  0x0e ; '.'
000000000000aa8b         db  0xf0 ; '.'
000000000000aa8c         db  0x01 ; '.'
000000000000aa8d         db  0x64 ; 'd'
000000000000aa8e         db  0x0a ; '.'
000000000000aa8f         db  0x0e ; '.'
000000000000aa90         db  0x38 ; '8'
000000000000aa91         db  0x41 ; 'A'
000000000000aa92         db  0x0e ; '.'
000000000000aa93         db  0x30 ; '0'
000000000000aa94         db  0x41 ; 'A'
000000000000aa95         db  0x0e ; '.'
000000000000aa96         db  0x28 ; '('
000000000000aa97         db  0x42 ; 'B'
000000000000aa98         db  0x0e ; '.'
000000000000aa99         db  0x20 ; ' '
000000000000aa9a         db  0x42 ; 'B'
000000000000aa9b         db  0x0e ; '.'
000000000000aa9c         db  0x18 ; '.'
000000000000aa9d         db  0x42 ; 'B'
000000000000aa9e         db  0x0e ; '.'
000000000000aa9f         db  0x10 ; '.'
000000000000aaa0         db  0x42 ; 'B'
000000000000aaa1         db  0x0e ; '.'
000000000000aaa2         db  0x08 ; '.'
000000000000aaa3         db  0x44 ; 'D'
000000000000aaa4         db  0x0b ; '.'
000000000000aaa5         db  0x03 ; '.'
000000000000aaa6         db  0x99 ; '.'
000000000000aaa7         db  0x05 ; '.'
000000000000aaa8         db  0x0e ; '.'
000000000000aaa9         db  0xf8 ; '.'
000000000000aaaa         db  0x01 ; '.'
000000000000aaab         db  0x4d ; 'M'
000000000000aaac         db  0x0e ; '.'
000000000000aaad         db  0x80 ; '.'
000000000000aaae         db  0x02 ; '.'
000000000000aaaf         db  0x44 ; 'D'
000000000000aab0         db  0x0e ; '.'
000000000000aab1         db  0x88 ; '.'
000000000000aab2         db  0x02 ; '.'
000000000000aab3         db  0x47 ; 'G'
000000000000aab4         db  0x0e ; '.'
000000000000aab5         db  0x90 ; '.'
000000000000aab6         db  0x02 ; '.'
000000000000aab7         db  0x5b ; '['
000000000000aab8         db  0x0e ; '.'
000000000000aab9         db  0xf0 ; '.'
000000000000aaba         db  0x01 ; '.'
000000000000aabb         db  0x00 ; '.'
000000000000aabc         dd         0x00000068                                  ; Length of the record
000000000000aac0         dd         0x00000358                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000aac4         db         0x8c, 0x9e, 2 dup (0xff)                    ; begin 0x4950
000000000000aac8         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x4afb)
000000000000aacc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aacd         db  0x42 ; 'B'
000000000000aace         db  0x0e ; '.'
000000000000aacf         db  0x10 ; '.'
000000000000aad0         db  0x8f ; '.'
000000000000aad1         db  0x02 ; '.'
000000000000aad2         db  0x42 ; 'B'
000000000000aad3         db  0x0e ; '.'
000000000000aad4         db  0x18 ; '.'
000000000000aad5         db  0x8e ; '.'
000000000000aad6         db  0x03 ; '.'
000000000000aad7         db  0x45 ; 'E'
000000000000aad8         db  0x0e ; '.'
000000000000aad9         db  0x20 ; ' '
000000000000aada         db  0x8d ; '.'
000000000000aadb         db  0x04 ; '.'
000000000000aadc         db  0x42 ; 'B'
000000000000aadd         db  0x0e ; '.'
000000000000aade         db  0x28 ; '('
000000000000aadf         db  0x8c ; '.'
000000000000aae0         db  0x05 ; '.'
000000000000aae1         db  0x44 ; 'D'
000000000000aae2         db  0x0e ; '.'
000000000000aae3         db  0x30 ; '0'
000000000000aae4         db  0x86 ; '.'
000000000000aae5         db  0x06 ; '.'
000000000000aae6         db  0x41 ; 'A'
000000000000aae7         db  0x0e ; '.'
000000000000aae8         db  0x38 ; '8'
000000000000aae9         db  0x83 ; '.'
000000000000aaea         db  0x07 ; '.'
000000000000aaeb         db  0x47 ; 'G'
000000000000aaec         db  0x0e ; '.'
000000000000aaed         db  0x60 ; '`'
000000000000aaee         db  0x02 ; '.'
000000000000aaef         db  0x99 ; '.'
000000000000aaf0         db  0x0e ; '.'
000000000000aaf1         db  0x68 ; 'h'
000000000000aaf2         db  0x5f ; '_'
000000000000aaf3         db  0x0e ; '.'
000000000000aaf4         db  0x70 ; 'p'
000000000000aaf5         db  0x46 ; 'F'
000000000000aaf6         db  0x0e ; '.'
000000000000aaf7         db  0x78 ; 'x'
000000000000aaf8         db  0x42 ; 'B'
000000000000aaf9         db  0x0e ; '.'
000000000000aafa         db  0x80 ; '.'
000000000000aafb         db  0x01 ; '.'
000000000000aafc         db  0x59 ; 'Y'
000000000000aafd         db  0x0e ; '.'
000000000000aafe         db  0x60 ; '`'
000000000000aaff         db  0x02 ; '.'
000000000000ab00         db  0x40 ; '@'
000000000000ab01         db  0x0e ; '.'
000000000000ab02         db  0x68 ; 'h'
000000000000ab03         db  0x4b ; 'K'
000000000000ab04         db  0x0e ; '.'
000000000000ab05         db  0x70 ; 'p'
000000000000ab06         db  0x43 ; 'C'
000000000000ab07         db  0x0e ; '.'
000000000000ab08         db  0x78 ; 'x'
000000000000ab09         db  0x45 ; 'E'
000000000000ab0a         db  0x0e ; '.'
000000000000ab0b         db  0x80 ; '.'
000000000000ab0c         db  0x01 ; '.'
000000000000ab0d         db  0x5e ; '^'
000000000000ab0e         db  0x0e ; '.'
000000000000ab0f         db  0x60 ; '`'
000000000000ab10         db  0x4c ; 'L'
000000000000ab11         db  0x0a ; '.'
000000000000ab12         db  0x0e ; '.'
000000000000ab13         db  0x38 ; '8'
000000000000ab14         db  0x44 ; 'D'
000000000000ab15         db  0x0e ; '.'
000000000000ab16         db  0x30 ; '0'
000000000000ab17         db  0x41 ; 'A'
000000000000ab18         db  0x0e ; '.'
000000000000ab19         db  0x28 ; '('
000000000000ab1a         db  0x42 ; 'B'
000000000000ab1b         db  0x0e ; '.'
000000000000ab1c         db  0x20 ; ' '
000000000000ab1d         db  0x42 ; 'B'
000000000000ab1e         db  0x0e ; '.'
000000000000ab1f         db  0x18 ; '.'
000000000000ab20         db  0x42 ; 'B'
000000000000ab21         db  0x0e ; '.'
000000000000ab22         db  0x10 ; '.'
000000000000ab23         db  0x42 ; 'B'
000000000000ab24         db  0x0e ; '.'
000000000000ab25         db  0x08 ; '.'
000000000000ab26         db  0x46 ; 'F'
000000000000ab27         db  0x0b ; '.'
000000000000ab28         dd         0x00000028                                  ; Length of the record
000000000000ab2c         dd         0x000003c4                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ab30         db         0xd0, 0x9f, 2 dup (0xff)                    ; begin 0x4b00
000000000000ab34         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x4b36)
000000000000ab38         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ab39         db  0x42 ; 'B'
000000000000ab3a         db  0x0e ; '.'
000000000000ab3b         db  0x10 ; '.'
000000000000ab3c         db  0x8c ; '.'
000000000000ab3d         db  0x02 ; '.'
000000000000ab3e         db  0x41 ; 'A'
000000000000ab3f         db  0x0e ; '.'
000000000000ab40         db  0x18 ; '.'
000000000000ab41         db  0x86 ; '.'
000000000000ab42         db  0x03 ; '.'
000000000000ab43         db  0x41 ; 'A'
000000000000ab44         db  0x0e ; '.'
000000000000ab45         db  0x20 ; ' '
000000000000ab46         db  0x83 ; '.'
000000000000ab47         db  0x04 ; '.'
000000000000ab48         db  0x6e ; 'n'
000000000000ab49         db  0x0e ; '.'
000000000000ab4a         db  0x18 ; '.'
000000000000ab4b         db  0x41 ; 'A'
000000000000ab4c         db  0x0e ; '.'
000000000000ab4d         db  0x10 ; '.'
000000000000ab4e         db  0x42 ; 'B'
000000000000ab4f         db  0x0e ; '.'
000000000000ab50         db  0x08 ; '.'
000000000000ab51         db  0x00 ; '.'
000000000000ab52         db  0x00 ; '.'
000000000000ab53         db  0x00 ; '.'
000000000000ab54         dd         0x00000010                                  ; Length of the record
000000000000ab58         dd         0x000003f0                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ab5c         db         0xe4, 0x9f, 2 dup (0xff)                    ; begin 0x4b40
000000000000ab60         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4b51)
000000000000ab64         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ab65         align      8
000000000000ab68         dd         0x00000010                                  ; Length of the record
000000000000ab6c         dd         0x00000404                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ab70         db         0xf0, 0x9f, 2 dup (0xff)                    ; begin 0x4b60
000000000000ab74         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4b71)
000000000000ab78         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ab79         align      4
000000000000ab7c         dd         0x00000010                                  ; Length of the record
000000000000ab80         dd         0x00000418                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ab84         db         0xfc, 0x9f, 2 dup (0xff)                    ; begin 0x4b80
000000000000ab88         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x4bb5)
000000000000ab8c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ab8d         align      16
000000000000ab90         dd         0x00000010                                  ; Length of the record
000000000000ab94         dd         0x0000042c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ab98         db         0x28, 0xa0, 2 dup (0xff)                    ; begin 0x4bc0
000000000000ab9c         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x4bd5)
000000000000aba0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aba1         align      4
000000000000aba4         dd         0x00000010                                  ; Length of the record
000000000000aba8         dd         0x00000440                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000abac         db         0x34, 0xa0, 2 dup (0xff)                    ; begin 0x4be0
000000000000abb0         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x4c10)
000000000000abb4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000abb5         db  0x6b ; 'k'
000000000000abb6         db  0x0e ; '.'
000000000000abb7         db  0x10 ; '.'
000000000000abb8         dd         0x00000050                                  ; Length of the record
000000000000abbc         dd         0x00000454                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000abc0         db         0x50, 0xa0, 2 dup (0xff)                    ; begin 0x4c10
000000000000abc4         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x4c84)
000000000000abc8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000abc9         db  0x42 ; 'B'
000000000000abca         db  0x0e ; '.'
000000000000abcb         db  0x10 ; '.'
000000000000abcc         db  0x8f ; '.'
000000000000abcd         db  0x02 ; '.'
000000000000abce         db  0x42 ; 'B'
000000000000abcf         db  0x0e ; '.'
000000000000abd0         db  0x18 ; '.'
000000000000abd1         db  0x8e ; '.'
000000000000abd2         db  0x03 ; '.'
000000000000abd3         db  0x49 ; 'I'
000000000000abd4         db  0x0e ; '.'
000000000000abd5         db  0x20 ; ' '
000000000000abd6         db  0x8d ; '.'
000000000000abd7         db  0x04 ; '.'
000000000000abd8         db  0x42 ; 'B'
000000000000abd9         db  0x0e ; '.'
000000000000abda         db  0x28 ; '('
000000000000abdb         db  0x8c ; '.'
000000000000abdc         db  0x05 ; '.'
000000000000abdd         db  0x44 ; 'D'
000000000000abde         db  0x0e ; '.'
000000000000abdf         db  0x30 ; '0'
000000000000abe0         db  0x86 ; '.'
000000000000abe1         db  0x06 ; '.'
000000000000abe2         db  0x41 ; 'A'
000000000000abe3         db  0x0e ; '.'
000000000000abe4         db  0x38 ; '8'
000000000000abe5         db  0x83 ; '.'
000000000000abe6         db  0x07 ; '.'
000000000000abe7         db  0x4d ; 'M'
000000000000abe8         db  0x0e ; '.'
000000000000abe9         db  0x50 ; 'P'
000000000000abea         db  0x5f ; '_'
000000000000abeb         db  0x0e ; '.'
000000000000abec         db  0x58 ; 'X'
000000000000abed         db  0x47 ; 'G'
000000000000abee         db  0x0e ; '.'
000000000000abef         db  0x60 ; '`'
000000000000abf0         db  0x46 ; 'F'
000000000000abf1         db  0x0e ; '.'
000000000000abf2         db  0x68 ; 'h'
000000000000abf3         db  0x44 ; 'D'
000000000000abf4         db  0x0e ; '.'
000000000000abf5         db  0x70 ; 'p'
000000000000abf6         db  0x58 ; 'X'
000000000000abf7         db  0x0e ; '.'
000000000000abf8         db  0x38 ; '8'
000000000000abf9         db  0x41 ; 'A'
000000000000abfa         db  0x0e ; '.'
000000000000abfb         db  0x30 ; '0'
000000000000abfc         db  0x41 ; 'A'
000000000000abfd         db  0x0e ; '.'
000000000000abfe         db  0x28 ; '('
000000000000abff         db  0x42 ; 'B'
000000000000ac00         db  0x0e ; '.'
000000000000ac01         db  0x20 ; ' '
000000000000ac02         db  0x42 ; 'B'
000000000000ac03         db  0x0e ; '.'
000000000000ac04         db  0x18 ; '.'
000000000000ac05         db  0x42 ; 'B'
000000000000ac06         db  0x0e ; '.'
000000000000ac07         db  0x10 ; '.'
000000000000ac08         db  0x42 ; 'B'
000000000000ac09         db  0x0e ; '.'
000000000000ac0a         db  0x08 ; '.'
000000000000ac0b         db  0x00 ; '.'
000000000000ac0c         dd         0x00000068                                  ; Length of the record
000000000000ac10         dd         0x000004a8                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ac14         db         0x7c, 0xa0, 2 dup (0xff)                    ; begin 0x4c90
000000000000ac18         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x4d73)
000000000000ac1c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ac1d         db  0x42 ; 'B'
000000000000ac1e         db  0x0e ; '.'
000000000000ac1f         db  0x10 ; '.'
000000000000ac20         db  0x8f ; '.'
000000000000ac21         db  0x02 ; '.'
000000000000ac22         db  0x42 ; 'B'
000000000000ac23         db  0x0e ; '.'
000000000000ac24         db  0x18 ; '.'
000000000000ac25         db  0x8e ; '.'
000000000000ac26         db  0x03 ; '.'
000000000000ac27         db  0x49 ; 'I'
000000000000ac28         db  0x0e ; '.'
000000000000ac29         db  0x20 ; ' '
000000000000ac2a         db  0x8d ; '.'
000000000000ac2b         db  0x04 ; '.'
000000000000ac2c         db  0x42 ; 'B'
000000000000ac2d         db  0x0e ; '.'
000000000000ac2e         db  0x28 ; '('
000000000000ac2f         db  0x8c ; '.'
000000000000ac30         db  0x05 ; '.'
000000000000ac31         db  0x44 ; 'D'
000000000000ac32         db  0x0e ; '.'
000000000000ac33         db  0x30 ; '0'
000000000000ac34         db  0x86 ; '.'
000000000000ac35         db  0x06 ; '.'
000000000000ac36         db  0x41 ; 'A'
000000000000ac37         db  0x0e ; '.'
000000000000ac38         db  0x38 ; '8'
000000000000ac39         db  0x83 ; '.'
000000000000ac3a         db  0x07 ; '.'
000000000000ac3b         db  0x4d ; 'M'
000000000000ac3c         db  0x0e ; '.'
000000000000ac3d         db  0x70 ; 'p'
000000000000ac3e         db  0x65 ; 'e'
000000000000ac3f         db  0x0e ; '.'
000000000000ac40         db  0x78 ; 'x'
000000000000ac41         db  0x4d ; 'M'
000000000000ac42         db  0x0e ; '.'
000000000000ac43         db  0x80 ; '.'
000000000000ac44         db  0x01 ; '.'
000000000000ac45         db  0x46 ; 'F'
000000000000ac46         db  0x0e ; '.'
000000000000ac47         db  0x88 ; '.'
000000000000ac48         db  0x01 ; '.'
000000000000ac49         db  0x42 ; 'B'
000000000000ac4a         db  0x0e ; '.'
000000000000ac4b         db  0x90 ; '.'
000000000000ac4c         db  0x01 ; '.'
000000000000ac4d         db  0x5e ; '^'
000000000000ac4e         db  0x0e ; '.'
000000000000ac4f         db  0x70 ; 'p'
000000000000ac50         db  0x56 ; 'V'
000000000000ac51         db  0x0e ; '.'
000000000000ac52         db  0x78 ; 'x'
000000000000ac53         db  0x43 ; 'C'
000000000000ac54         db  0x0e ; '.'
000000000000ac55         db  0x80 ; '.'
000000000000ac56         db  0x01 ; '.'
000000000000ac57         db  0x43 ; 'C'
000000000000ac58         db  0x0e ; '.'
000000000000ac59         db  0x88 ; '.'
000000000000ac5a         db  0x01 ; '.'
000000000000ac5b         db  0x56 ; 'V'
000000000000ac5c         db  0x0e ; '.'
000000000000ac5d         db  0x90 ; '.'
000000000000ac5e         db  0x01 ; '.'
000000000000ac5f         db  0x52 ; 'R'
000000000000ac60         db  0x0e ; '.'
000000000000ac61         db  0x70 ; 'p'
000000000000ac62         db  0x5b ; '['
000000000000ac63         db  0x0e ; '.'
000000000000ac64         db  0x38 ; '8'
000000000000ac65         db  0x41 ; 'A'
000000000000ac66         db  0x0e ; '.'
000000000000ac67         db  0x30 ; '0'
000000000000ac68         db  0x41 ; 'A'
000000000000ac69         db  0x0e ; '.'
000000000000ac6a         db  0x28 ; '('
000000000000ac6b         db  0x42 ; 'B'
000000000000ac6c         db  0x0e ; '.'
000000000000ac6d         db  0x20 ; ' '
000000000000ac6e         db  0x42 ; 'B'
000000000000ac6f         db  0x0e ; '.'
000000000000ac70         db  0x18 ; '.'
000000000000ac71         db  0x42 ; 'B'
000000000000ac72         db  0x0e ; '.'
000000000000ac73         db  0x10 ; '.'
000000000000ac74         db  0x42 ; 'B'
000000000000ac75         db  0x0e ; '.'
000000000000ac76         db  0x08 ; '.'
000000000000ac77         db  0x00 ; '.'
000000000000ac78         dd         0x00000010                                  ; Length of the record
000000000000ac7c         dd         0x00000514                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ac80         db         0x00, 0xa1, 2 dup (0xff)                    ; begin 0x4d80
000000000000ac84         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x4d8a)
000000000000ac88         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ac89         align      4
000000000000ac8c         dd         0x00000028                                  ; Length of the record
000000000000ac90         dd         0x00000528                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ac94         db         0xfc, 0xa0, 2 dup (0xff)                    ; begin 0x4d90
000000000000ac98         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x4e23)
000000000000ac9c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ac9d         db  0x48 ; 'H'
000000000000ac9e         db  0x0e ; '.'
000000000000ac9f         db  0x10 ; '.'
000000000000aca0         db  0x8c ; '.'
000000000000aca1         db  0x02 ; '.'
000000000000aca2         db  0x48 ; 'H'
000000000000aca3         db  0x0e ; '.'
000000000000aca4         db  0x18 ; '.'
000000000000aca5         db  0x86 ; '.'
000000000000aca6         db  0x03 ; '.'
000000000000aca7         db  0x41 ; 'A'
000000000000aca8         db  0x0e ; '.'
000000000000aca9         db  0x20 ; ' '
000000000000acaa         db  0x83 ; '.'
000000000000acab         db  0x04 ; '.'
000000000000acac         db  0x02 ; '.'
000000000000acad         db  0x74 ; 't'
000000000000acae         db  0x0e ; '.'
000000000000acaf         db  0x18 ; '.'
000000000000acb0         db  0x4b ; 'K'
000000000000acb1         db  0x0e ; '.'
000000000000acb2         db  0x10 ; '.'
000000000000acb3         db  0x42 ; 'B'
000000000000acb4         db  0x0e ; '.'
000000000000acb5         db  0x08 ; '.'
000000000000acb6         db  0x00 ; '.'
000000000000acb7         db  0x00 ; '.'
000000000000acb8         dd         0x00000010                                  ; Length of the record
000000000000acbc         dd         0x00000554                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000acc0         db         0x70, 0xa1, 2 dup (0xff)                    ; begin 0x4e30
000000000000acc4         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x4e43)
000000000000acc8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000acc9         align      4
000000000000accc         dd         0x00000010                                  ; Length of the record
000000000000acd0         dd         0x00000568                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000acd4         db         0x7c, 0xa1, 2 dup (0xff)                    ; begin 0x4e50
000000000000acd8         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4e5c)
000000000000acdc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000acdd         align      32
000000000000ace0         dd         0x00000010                                  ; Length of the record
000000000000ace4         dd         0x0000057c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ace8         db         0x78, 0xa1, 2 dup (0xff)                    ; begin 0x4e60
000000000000acec         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x4e78)
000000000000acf0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000acf1         align      4
000000000000acf4         dd         0x00000010                                  ; Length of the record
000000000000acf8         dd         0x00000590                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000acfc         db         0x84, 0xa1, 2 dup (0xff)                    ; begin 0x4e80
000000000000ad00         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x4e94)
000000000000ad04         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ad05         align      8
000000000000ad08         dd         0x00000018                                  ; Length of the record
000000000000ad0c         dd         0x000005a4                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ad10         db         0x90, 0xa1, 2 dup (0xff)                    ; begin 0x4ea0
000000000000ad14         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x4f2e)
000000000000ad18         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ad19         db  0x44 ; 'D'
000000000000ad1a         db  0x0e ; '.'
000000000000ad1b         db  0x50 ; 'P'
000000000000ad1c         db  0x02 ; '.'
000000000000ad1d         db  0x7f ; '.'
000000000000ad1e         db  0x0a ; '.'
000000000000ad1f         db  0x0e ; '.'
000000000000ad20         db  0x08 ; '.'
000000000000ad21         db  0x41 ; 'A'
000000000000ad22         db  0x0b ; '.'
000000000000ad23         db  0x00 ; '.'
000000000000ad24         dd         0x00000018                                  ; Length of the record
000000000000ad28         dd         0x000005c0                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ad2c         db         0x04, 0xa2, 2 dup (0xff)                    ; begin 0x4f30
000000000000ad30         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x4fba)
000000000000ad34         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ad35         db  0x44 ; 'D'
000000000000ad36         db  0x0e ; '.'
000000000000ad37         db  0x50 ; 'P'
000000000000ad38         db  0x02 ; '.'
000000000000ad39         db  0x7b ; '{'
000000000000ad3a         db  0x0a ; '.'
000000000000ad3b         db  0x0e ; '.'
000000000000ad3c         db  0x08 ; '.'
000000000000ad3d         db  0x41 ; 'A'
000000000000ad3e         db  0x0b ; '.'
000000000000ad3f         db  0x00 ; '.'
000000000000ad40         dd         0x00000010                                  ; Length of the record
000000000000ad44         dd         0x000005dc                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ad48         db         0x78, 0xa2, 2 dup (0xff)                    ; begin 0x4fc0
000000000000ad4c         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4fcc)
000000000000ad50         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ad51         align      4
000000000000ad54         dd         0x00000010                                  ; Length of the record
000000000000ad58         dd         0x000005f0                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ad5c         db         0x74, 0xa2, 2 dup (0xff)                    ; begin 0x4fd0
000000000000ad60         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x4fdf)
000000000000ad64         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ad65         align      8
000000000000ad68         dd         0x00000018                                  ; Length of the record
000000000000ad6c         dd         0x00000604                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ad70         db         0x70, 0xa2, 2 dup (0xff)                    ; begin 0x4fe0
000000000000ad74         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x5078)
000000000000ad78         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ad79         db  0x44 ; 'D'
000000000000ad7a         db  0x0e ; '.'
000000000000ad7b         db  0x50 ; 'P'
000000000000ad7c         db  0x02 ; '.'
000000000000ad7d         db  0x8e ; '.'
000000000000ad7e         db  0x0a ; '.'
000000000000ad7f         db  0x0e ; '.'
000000000000ad80         db  0x08 ; '.'
000000000000ad81         db  0x41 ; 'A'
000000000000ad82         db  0x0b ; '.'
000000000000ad83         db  0x00 ; '.'
000000000000ad84         dd         0x00000010                                  ; Length of the record
000000000000ad88         dd         0x00000620                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ad8c         db         0xf4, 0xa2, 2 dup (0xff)                    ; begin 0x5080
000000000000ad90         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x5090)
000000000000ad94         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ad95         align      8
000000000000ad98         dd         0x00000010                                  ; Length of the record
000000000000ad9c         dd         0x00000634                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ada0         db         0xf0, 0xa2, 2 dup (0xff)                    ; begin 0x5090
000000000000ada4         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x50a1)
000000000000ada8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ada9         align      4
000000000000adac         dd         0x00000010                                  ; Length of the record
000000000000adb0         dd         0x00000648                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000adb4         db         0xfc, 0xa2, 2 dup (0xff)                    ; begin 0x50b0
000000000000adb8         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x50ba)
000000000000adbc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000adbd         align      64
000000000000adc0         dd         0x00000018                                  ; Length of the record
000000000000adc4         dd         0x0000065c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000adc8         db         0xf8, 0xa2, 2 dup (0xff)                    ; begin 0x50c0
000000000000adcc         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x514e)
000000000000add0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000add1         db  0x44 ; 'D'
000000000000add2         db  0x0e ; '.'
000000000000add3         db  0x50 ; 'P'
000000000000add4         db  0x02 ; '.'
000000000000add5         db  0x7f ; '.'
000000000000add6         db  0x0a ; '.'
000000000000add7         db  0x0e ; '.'
000000000000add8         db  0x08 ; '.'
000000000000add9         db  0x41 ; 'A'
000000000000adda         db  0x0b ; '.'
000000000000addb         db  0x00 ; '.'
000000000000addc         dd         0x00000018                                  ; Length of the record
000000000000ade0         dd         0x00000678                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ade4         db         0x6c, 0xa3, 2 dup (0xff)                    ; begin 0x5150
000000000000ade8         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x51e1)
000000000000adec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aded         db  0x44 ; 'D'
000000000000adee         db  0x0e ; '.'
000000000000adef         db  0x50 ; 'P'
000000000000adf0         db  0x02 ; '.'
000000000000adf1         db  0x82 ; '.'
000000000000adf2         db  0x0a ; '.'
000000000000adf3         db  0x0e ; '.'
000000000000adf4         db  0x08 ; '.'
000000000000adf5         db  0x41 ; 'A'
000000000000adf6         db  0x0b ; '.'
000000000000adf7         db  0x00 ; '.'
000000000000adf8         dd         0x00000010                                  ; Length of the record
000000000000adfc         dd         0x00000694                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ae00         db         0xf0, 0xa3, 2 dup (0xff)                    ; begin 0x51f0
000000000000ae04         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x51fc)
000000000000ae08         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ae09         align      4
000000000000ae0c         dd         0x00000010                                  ; Length of the record
000000000000ae10         dd         0x000006a8                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ae14         db         0xec, 0xa3, 2 dup (0xff)                    ; begin 0x5200
000000000000ae18         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x5217)
000000000000ae1c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ae1d         align      32
000000000000ae20         dd         0x00000010                                  ; Length of the record
000000000000ae24         dd         0x000006bc                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ae28         db         0xf8, 0xa3, 2 dup (0xff)                    ; begin 0x5220
000000000000ae2c         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x5233)
000000000000ae30         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ae31         align      4
000000000000ae34         dd         0x00000010                                  ; Length of the record
000000000000ae38         dd         0x000006d0                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ae3c         db         0x04, 0xa4, 2 dup (0xff)                    ; begin 0x5240
000000000000ae40         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x524c)
000000000000ae44         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ae45         align      8
000000000000ae48         dd         0x00000010                                  ; Length of the record
000000000000ae4c         dd         0x000006e4                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ae50         db         0x00, 0xa4, 2 dup (0xff)                    ; begin 0x5250
000000000000ae54         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x5264)
000000000000ae58         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ae59         align      4
000000000000ae5c         dd         0x00000010                                  ; Length of the record
000000000000ae60         dd         0x000006f8                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ae64         db         0x0c, 0xa4, 2 dup (0xff)                    ; begin 0x5270
000000000000ae68         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x5283)
000000000000ae6c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ae6d         align      16
000000000000ae70         dd         0x00000014                                  ; Length of the record
000000000000ae74         dd         0x0000070c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ae78         db         0x18, 0xa4, 2 dup (0xff)                    ; begin 0x5290
000000000000ae7c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x52a8)
000000000000ae80         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ae81         align      8
000000000000ae88         dd         0x00000018                                  ; Length of the record
000000000000ae8c         dd         0x00000724                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ae90         db         0x20, 0xa4, 2 dup (0xff)                    ; begin 0x52b0
000000000000ae94         db         0x23, 3 dup (0x00)                          ; length 0x23 (end at 0x52d3)
000000000000ae98         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ae99         db  0x41 ; 'A'
000000000000ae9a         db  0x0e ; '.'
000000000000ae9b         db  0x10 ; '.'
000000000000ae9c         db  0x83 ; '.'
000000000000ae9d         db  0x02 ; '.'
000000000000ae9e         db  0x61 ; 'a'
000000000000ae9f         db  0x0e ; '.'
000000000000aea0         db  0x08 ; '.'
000000000000aea1         db  0x00 ; '.'
000000000000aea2         db  0x00 ; '.'
000000000000aea3         db  0x00 ; '.'
000000000000aea4         dd         0x0000001c                                  ; Length of the record
000000000000aea8         dd         0x00000740                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000aeac         db         0x34, 0xa4, 2 dup (0xff)                    ; begin 0x52e0
000000000000aeb0         db         0x34, 3 dup (0x00)                          ; length 0x34 (end at 0x5314)
000000000000aeb4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aeb5         db  0x41 ; 'A'
000000000000aeb6         db  0x0e ; '.'
000000000000aeb7         db  0x10 ; '.'
000000000000aeb8         db  0x83 ; '.'
000000000000aeb9         db  0x02 ; '.'
000000000000aeba         db  0x6b ; 'k'
000000000000aebb         db  0x0a ; '.'
000000000000aebc         db  0x0e ; '.'
000000000000aebd         db  0x08 ; '.'
000000000000aebe         db  0x44 ; 'D'
000000000000aebf         db  0x0b ; '.'
000000000000aec0         db  0x43 ; 'C'
000000000000aec1         db  0x0e ; '.'
000000000000aec2         db  0x08 ; '.'
000000000000aec3         db  0x00 ; '.'
000000000000aec4         dd         0x00000010                                  ; Length of the record
000000000000aec8         dd         0x00000760                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000aecc         db         0x54, 0xa4, 2 dup (0xff)                    ; begin 0x5320
000000000000aed0         db         0x04, 3 dup (0x00)                          ; length 0x4 (end at 0x5324)
000000000000aed4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aed5         align      8
000000000000aed8         dd         0x00000048                                  ; Length of the record
000000000000aedc         dd         0x00000774                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000aee0         db         0x50, 0xa4, 2 dup (0xff)                    ; begin 0x5330
000000000000aee4         db         0x1a, 0x01, 2 dup (0x00)                    ; length 0x11a (end at 0x544a)
000000000000aee8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aee9         db  0x42 ; 'B'
000000000000aeea         db  0x0e ; '.'
000000000000aeeb         db  0x10 ; '.'
000000000000aeec         db  0x8f ; '.'
000000000000aeed         db  0x02 ; '.'
000000000000aeee         db  0x42 ; 'B'
000000000000aeef         db  0x0e ; '.'
000000000000aef0         db  0x18 ; '.'
000000000000aef1         db  0x8e ; '.'
000000000000aef2         db  0x03 ; '.'
000000000000aef3         db  0x46 ; 'F'
000000000000aef4         db  0x0e ; '.'
000000000000aef5         db  0x20 ; ' '
000000000000aef6         db  0x8d ; '.'
000000000000aef7         db  0x04 ; '.'
000000000000aef8         db  0x42 ; 'B'
000000000000aef9         db  0x0e ; '.'
000000000000aefa         db  0x28 ; '('
000000000000aefb         db  0x8c ; '.'
000000000000aefc         db  0x05 ; '.'
000000000000aefd         db  0x44 ; 'D'
000000000000aefe         db  0x0e ; '.'
000000000000aeff         db  0x30 ; '0'
000000000000af00         db  0x86 ; '.'
000000000000af01         db  0x06 ; '.'
000000000000af02         db  0x41 ; 'A'
000000000000af03         db  0x0e ; '.'
000000000000af04         db  0x38 ; '8'
000000000000af05         db  0x83 ; '.'
000000000000af06         db  0x07 ; '.'
000000000000af07         db  0x47 ; 'G'
000000000000af08         db  0x0e ; '.'
000000000000af09         db  0x60 ; '`'
000000000000af0a         db  0x02 ; '.'
000000000000af0b         db  0xde ; '.'
000000000000af0c         db  0x0a ; '.'
000000000000af0d         db  0x0e ; '.'
000000000000af0e         db  0x38 ; '8'
000000000000af0f         db  0x41 ; 'A'
000000000000af10         db  0x0e ; '.'
000000000000af11         db  0x30 ; '0'
000000000000af12         db  0x41 ; 'A'
000000000000af13         db  0x0e ; '.'
000000000000af14         db  0x28 ; '('
000000000000af15         db  0x42 ; 'B'
000000000000af16         db  0x0e ; '.'
000000000000af17         db  0x20 ; ' '
000000000000af18         db  0x42 ; 'B'
000000000000af19         db  0x0e ; '.'
000000000000af1a         db  0x18 ; '.'
000000000000af1b         db  0x42 ; 'B'
000000000000af1c         db  0x0e ; '.'
000000000000af1d         db  0x10 ; '.'
000000000000af1e         db  0x42 ; 'B'
000000000000af1f         db  0x0e ; '.'
000000000000af20         db  0x08 ; '.'
000000000000af21         db  0x48 ; 'H'
000000000000af22         db  0x0b ; '.'
000000000000af23         db  0x00 ; '.'
000000000000af24         dd         0x00000018                                  ; Length of the record
000000000000af28         dd         0x000007c0                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000af2c         db         0x24, 0xa5, 2 dup (0xff)                    ; begin 0x5450
000000000000af30         db         0x1e, 3 dup (0x00)                          ; length 0x1e (end at 0x546e)
000000000000af34         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000af35         db  0x41 ; 'A'
000000000000af36         db  0x0e ; '.'
000000000000af37         db  0x10 ; '.'
000000000000af38         db  0x83 ; '.'
000000000000af39         db  0x02 ; '.'
000000000000af3a         db  0x58 ; 'X'
000000000000af3b         db  0x0e ; '.'
000000000000af3c         db  0x08 ; '.'
000000000000af3d         db  0x00 ; '.'
000000000000af3e         db  0x00 ; '.'
000000000000af3f         db  0x00 ; '.'
000000000000af40         dd         0x00000034                                  ; Length of the record
000000000000af44         dd         0x000007dc                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000af48         db         0x28, 0xa5, 2 dup (0xff)                    ; begin 0x5470
000000000000af4c         db         0x51, 3 dup (0x00)                          ; length 0x51 (end at 0x54c1)
000000000000af50         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000af51         db  0x42 ; 'B'
000000000000af52         db  0x0e ; '.'
000000000000af53         db  0x10 ; '.'
000000000000af54         db  0x8d ; '.'
000000000000af55         db  0x02 ; '.'
000000000000af56         db  0x42 ; 'B'
000000000000af57         db  0x0e ; '.'
000000000000af58         db  0x18 ; '.'
000000000000af59         db  0x8c ; '.'
000000000000af5a         db  0x03 ; '.'
000000000000af5b         db  0x41 ; 'A'
000000000000af5c         db  0x0e ; '.'
000000000000af5d         db  0x20 ; ' '
000000000000af5e         db  0x86 ; '.'
000000000000af5f         db  0x04 ; '.'
000000000000af60         db  0x41 ; 'A'
000000000000af61         db  0x0e ; '.'
000000000000af62         db  0x28 ; '('
000000000000af63         db  0x83 ; '.'
000000000000af64         db  0x05 ; '.'
000000000000af65         db  0x47 ; 'G'
000000000000af66         db  0x0e ; '.'
000000000000af67         db  0x30 ; '0'
000000000000af68         db  0x7a ; 'z'
000000000000af69         db  0x0e ; '.'
000000000000af6a         db  0x28 ; '('
000000000000af6b         db  0x44 ; 'D'
000000000000af6c         db  0x0e ; '.'
000000000000af6d         db  0x20 ; ' '
000000000000af6e         db  0x41 ; 'A'
000000000000af6f         db  0x0e ; '.'
000000000000af70         db  0x18 ; '.'
000000000000af71         db  0x42 ; 'B'
000000000000af72         db  0x0e ; '.'
000000000000af73         db  0x10 ; '.'
000000000000af74         db  0x42 ; 'B'
000000000000af75         db  0x0e ; '.'
000000000000af76         db  0x08 ; '.'
000000000000af77         db  0x00 ; '.'
000000000000af78         dd         0x00000010                                  ; Length of the record
000000000000af7c         dd         0x00000814                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000af80         db         0x50, 0xa5, 2 dup (0xff)                    ; begin 0x54d0
000000000000af84         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x54dc)
000000000000af88         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000af89         align      4
000000000000af8c         dd         0x00000010                                  ; Length of the record
000000000000af90         dd         0x00000828                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000af94         db         0x4c, 0xa5, 2 dup (0xff)                    ; begin 0x54e0
000000000000af98         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x54ea)
000000000000af9c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000af9d         align      32
000000000000afa0         dd         0x00000010                                  ; Length of the record
000000000000afa4         dd         0x0000083c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000afa8         db         0x48, 0xa5, 2 dup (0xff)                    ; begin 0x54f0
000000000000afac         db         0x27, 3 dup (0x00)                          ; length 0x27 (end at 0x5517)
000000000000afb0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000afb1         align      4
000000000000afb4         dd         0x00000048                                  ; Length of the record
000000000000afb8         dd         0x00000850                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000afbc         db         0x64, 0xa5, 2 dup (0xff)                    ; begin 0x5520
000000000000afc0         db         0x4f, 0x03, 2 dup (0x00)                    ; length 0x34f (end at 0x586f)
000000000000afc4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000afc5         db  0x42 ; 'B'
000000000000afc6         db  0x0e ; '.'
000000000000afc7         db  0x10 ; '.'
000000000000afc8         db  0x8f ; '.'
000000000000afc9         db  0x02 ; '.'
000000000000afca         db  0x42 ; 'B'
000000000000afcb         db  0x0e ; '.'
000000000000afcc         db  0x18 ; '.'
000000000000afcd         db  0x8e ; '.'
000000000000afce         db  0x03 ; '.'
000000000000afcf         db  0x42 ; 'B'
000000000000afd0         db  0x0e ; '.'
000000000000afd1         db  0x20 ; ' '
000000000000afd2         db  0x8d ; '.'
000000000000afd3         db  0x04 ; '.'
000000000000afd4         db  0x42 ; 'B'
000000000000afd5         db  0x0e ; '.'
000000000000afd6         db  0x28 ; '('
000000000000afd7         db  0x8c ; '.'
000000000000afd8         db  0x05 ; '.'
000000000000afd9         db  0x41 ; 'A'
000000000000afda         db  0x0e ; '.'
000000000000afdb         db  0x30 ; '0'
000000000000afdc         db  0x86 ; '.'
000000000000afdd         db  0x06 ; '.'
000000000000afde         db  0x41 ; 'A'
000000000000afdf         db  0x0e ; '.'
000000000000afe0         db  0x38 ; '8'
000000000000afe1         db  0x83 ; '.'
000000000000afe2         db  0x07 ; '.'
000000000000afe3         db  0x44 ; 'D'
000000000000afe4         db  0x0e ; '.'
000000000000afe5         db  0xa0 ; '.'
000000000000afe6         db  0x01 ; '.'
000000000000afe7         db  0x02 ; '.'
000000000000afe8         db  0x5f ; '_'
000000000000afe9         db  0x0a ; '.'
000000000000afea         db  0x0e ; '.'
000000000000afeb         db  0x38 ; '8'
000000000000afec         db  0x41 ; 'A'
000000000000afed         db  0x0e ; '.'
000000000000afee         db  0x30 ; '0'
000000000000afef         db  0x41 ; 'A'
000000000000aff0         db  0x0e ; '.'
000000000000aff1         db  0x28 ; '('
000000000000aff2         db  0x42 ; 'B'
000000000000aff3         db  0x0e ; '.'
000000000000aff4         db  0x20 ; ' '
000000000000aff5         db  0x42 ; 'B'
000000000000aff6         db  0x0e ; '.'
000000000000aff7         db  0x18 ; '.'
000000000000aff8         db  0x42 ; 'B'
000000000000aff9         db  0x0e ; '.'
000000000000affa         db  0x10 ; '.'
000000000000affb         db  0x42 ; 'B'
000000000000affc         db  0x0e ; '.'
000000000000affd         db  0x08 ; '.'
000000000000affe         db  0x49 ; 'I'
000000000000afff         db  0x0b ; '.'
000000000000b000         dd         0x0000001c                                  ; Length of the record
000000000000b004         dd         0x0000089c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b008         db         0x68, 0xa8, 2 dup (0xff)                    ; begin 0x5870
000000000000b00c         db         0x5d, 3 dup (0x00)                          ; length 0x5d (end at 0x58cd)
000000000000b010         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b011         db  0x41 ; 'A'
000000000000b012         db  0x0e ; '.'
000000000000b013         db  0x10 ; '.'
000000000000b014         db  0x86 ; '.'
000000000000b015         db  0x02 ; '.'
000000000000b016         db  0x41 ; 'A'
000000000000b017         db  0x0e ; '.'
000000000000b018         db  0x18 ; '.'
000000000000b019         db  0x83 ; '.'
000000000000b01a         db  0x03 ; '.'
000000000000b01b         db  0x44 ; 'D'
000000000000b01c         db  0x0e ; '.'
000000000000b01d         db  0x20 ; ' '
000000000000b01e         db  0x00 ; '.'
000000000000b01f         db  0x00 ; '.'
000000000000b020         dd         0x00000048                                  ; Length of the record
000000000000b024         dd         0x000008bc                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b028         db         2 dup (0xa8), 2 dup (0xff)                  ; begin 0x58d0
000000000000b02c         db         0x29, 0x03, 2 dup (0x00)                    ; length 0x329 (end at 0x5bf9)
000000000000b030         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b031         db  0x42 ; 'B'
000000000000b032         db  0x0e ; '.'
000000000000b033         db  0x10 ; '.'
000000000000b034         db  0x8f ; '.'
000000000000b035         db  0x02 ; '.'
000000000000b036         db  0x42 ; 'B'
000000000000b037         db  0x0e ; '.'
000000000000b038         db  0x18 ; '.'
000000000000b039         db  0x8e ; '.'
000000000000b03a         db  0x03 ; '.'
000000000000b03b         db  0x42 ; 'B'
000000000000b03c         db  0x0e ; '.'
000000000000b03d         db  0x20 ; ' '
000000000000b03e         db  0x8d ; '.'
000000000000b03f         db  0x04 ; '.'
000000000000b040         db  0x42 ; 'B'
000000000000b041         db  0x0e ; '.'
000000000000b042         db  0x28 ; '('
000000000000b043         db  0x8c ; '.'
000000000000b044         db  0x05 ; '.'
000000000000b045         db  0x41 ; 'A'
000000000000b046         db  0x0e ; '.'
000000000000b047         db  0x30 ; '0'
000000000000b048         db  0x86 ; '.'
000000000000b049         db  0x06 ; '.'
000000000000b04a         db  0x41 ; 'A'
000000000000b04b         db  0x0e ; '.'
000000000000b04c         db  0x38 ; '8'
000000000000b04d         db  0x83 ; '.'
000000000000b04e         db  0x07 ; '.'
000000000000b04f         db  0x44 ; 'D'
000000000000b050         db  0x0e ; '.'
000000000000b051         db  0x70 ; 'p'
000000000000b052         db  0x02 ; '.'
000000000000b053         db  0x94 ; '.'
000000000000b054         db  0x0a ; '.'
000000000000b055         db  0x0e ; '.'
000000000000b056         db  0x38 ; '8'
000000000000b057         db  0x41 ; 'A'
000000000000b058         db  0x0e ; '.'
000000000000b059         db  0x30 ; '0'
000000000000b05a         db  0x41 ; 'A'
000000000000b05b         db  0x0e ; '.'
000000000000b05c         db  0x28 ; '('
000000000000b05d         db  0x42 ; 'B'
000000000000b05e         db  0x0e ; '.'
000000000000b05f         db  0x20 ; ' '
000000000000b060         db  0x42 ; 'B'
000000000000b061         db  0x0e ; '.'
000000000000b062         db  0x18 ; '.'
000000000000b063         db  0x42 ; 'B'
000000000000b064         db  0x0e ; '.'
000000000000b065         db  0x10 ; '.'
000000000000b066         db  0x42 ; 'B'
000000000000b067         db  0x0e ; '.'
000000000000b068         db  0x08 ; '.'
000000000000b069         db  0x44 ; 'D'
000000000000b06a         db  0x0b ; '.'
000000000000b06b         db  0x00 ; '.'
000000000000b06c         dd         0x00000010                                  ; Length of the record
000000000000b070         dd         0x00000908                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b074         db         0x8c, 0xab, 2 dup (0xff)                    ; begin 0x5c00
000000000000b078         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x5c05)
000000000000b07c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b07d         align      128
000000000000b080         dd         0x00000010                                  ; Length of the record
000000000000b084         dd         0x0000091c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b088         db         0x88, 0xab, 2 dup (0xff)                    ; begin 0x5c10
000000000000b08c         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x5c15)
000000000000b090         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b091         align      4
000000000000b094         dd         0x00000060                                  ; Length of the record
000000000000b098         dd         0x00000930                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b09c         db         0x84, 0xab, 2 dup (0xff)                    ; begin 0x5c20
000000000000b0a0         db         0x96, 0x01, 2 dup (0x00)                    ; length 0x196 (end at 0x5db6)
000000000000b0a4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b0a5         db  0x42 ; 'B'
000000000000b0a6         db  0x0e ; '.'
000000000000b0a7         db  0x10 ; '.'
000000000000b0a8         db  0x8f ; '.'
000000000000b0a9         db  0x02 ; '.'
000000000000b0aa         db  0x42 ; 'B'
000000000000b0ab         db  0x0e ; '.'
000000000000b0ac         db  0x18 ; '.'
000000000000b0ad         db  0x8e ; '.'
000000000000b0ae         db  0x03 ; '.'
000000000000b0af         db  0x42 ; 'B'
000000000000b0b0         db  0x0e ; '.'
000000000000b0b1         db  0x20 ; ' '
000000000000b0b2         db  0x8d ; '.'
000000000000b0b3         db  0x04 ; '.'
000000000000b0b4         db  0x42 ; 'B'
000000000000b0b5         db  0x0e ; '.'
000000000000b0b6         db  0x28 ; '('
000000000000b0b7         db  0x8c ; '.'
000000000000b0b8         db  0x05 ; '.'
000000000000b0b9         db  0x44 ; 'D'
000000000000b0ba         db  0x0e ; '.'
000000000000b0bb         db  0x30 ; '0'
000000000000b0bc         db  0x86 ; '.'
000000000000b0bd         db  0x06 ; '.'
000000000000b0be         db  0x41 ; 'A'
000000000000b0bf         db  0x0e ; '.'
000000000000b0c0         db  0x38 ; '8'
000000000000b0c1         db  0x83 ; '.'
000000000000b0c2         db  0x07 ; '.'
000000000000b0c3         db  0x4a ; 'J'
000000000000b0c4         db  0x0e ; '.'
000000000000b0c5         db  0x50 ; 'P'
000000000000b0c6         db  0x02 ; '.'
000000000000b0c7         db  0x5f ; '_'
000000000000b0c8         db  0x0a ; '.'
000000000000b0c9         db  0x0e ; '.'
000000000000b0ca         db  0x38 ; '8'
000000000000b0cb         db  0x41 ; 'A'
000000000000b0cc         db  0x0e ; '.'
000000000000b0cd         db  0x30 ; '0'
000000000000b0ce         db  0x41 ; 'A'
000000000000b0cf         db  0x0e ; '.'
000000000000b0d0         db  0x28 ; '('
000000000000b0d1         db  0x42 ; 'B'
000000000000b0d2         db  0x0e ; '.'
000000000000b0d3         db  0x20 ; ' '
000000000000b0d4         db  0x42 ; 'B'
000000000000b0d5         db  0x0e ; '.'
000000000000b0d6         db  0x18 ; '.'
000000000000b0d7         db  0x42 ; 'B'
000000000000b0d8         db  0x0e ; '.'
000000000000b0d9         db  0x10 ; '.'
000000000000b0da         db  0x42 ; 'B'
000000000000b0db         db  0x0e ; '.'
000000000000b0dc         db  0x08 ; '.'
000000000000b0dd         db  0x48 ; 'H'
000000000000b0de         db  0x0b ; '.'
000000000000b0df         db  0x02 ; '.'
000000000000b0e0         db  0x9b ; '.'
000000000000b0e1         db  0x0a ; '.'
000000000000b0e2         db  0x0e ; '.'
000000000000b0e3         db  0x38 ; '8'
000000000000b0e4         db  0x41 ; 'A'
000000000000b0e5         db  0x0e ; '.'
000000000000b0e6         db  0x30 ; '0'
000000000000b0e7         db  0x41 ; 'A'
000000000000b0e8         db  0x0e ; '.'
000000000000b0e9         db  0x28 ; '('
000000000000b0ea         db  0x42 ; 'B'
000000000000b0eb         db  0x0e ; '.'
000000000000b0ec         db  0x20 ; ' '
000000000000b0ed         db  0x42 ; 'B'
000000000000b0ee         db  0x0e ; '.'
000000000000b0ef         db  0x18 ; '.'
000000000000b0f0         db  0x42 ; 'B'
000000000000b0f1         db  0x0e ; '.'
000000000000b0f2         db  0x10 ; '.'
000000000000b0f3         db  0x42 ; 'B'
000000000000b0f4         db  0x0e ; '.'
000000000000b0f5         db  0x08 ; '.'
000000000000b0f6         db  0x43 ; 'C'
000000000000b0f7         db  0x0b ; '.'
000000000000b0f8         dd         0x00000034                                  ; Length of the record
000000000000b0fc         dd         0x00000994                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b100         db         0xc0, 0xac, 2 dup (0xff)                    ; begin 0x5dc0
000000000000b104         db         0x49, 3 dup (0x00)                          ; length 0x49 (end at 0x5e09)
000000000000b108         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b109         db  0x41 ; 'A'
000000000000b10a         db  0x0e ; '.'
000000000000b10b         db  0x10 ; '.'
000000000000b10c         db  0x86 ; '.'
000000000000b10d         db  0x02 ; '.'
000000000000b10e         db  0x41 ; 'A'
000000000000b10f         db  0x0e ; '.'
000000000000b110         db  0x18 ; '.'
000000000000b111         db  0x83 ; '.'
000000000000b112         db  0x03 ; '.'
000000000000b113         db  0x53 ; 'S'
000000000000b114         db  0x0e ; '.'
000000000000b115         db  0x20 ; ' '
000000000000b116         db  0x59 ; 'Y'
000000000000b117         db  0x0a ; '.'
000000000000b118         db  0x0e ; '.'
000000000000b119         db  0x18 ; '.'
000000000000b11a         db  0x44 ; 'D'
000000000000b11b         db  0x0e ; '.'
000000000000b11c         db  0x10 ; '.'
000000000000b11d         db  0x41 ; 'A'
000000000000b11e         db  0x0e ; '.'
000000000000b11f         db  0x08 ; '.'
000000000000b120         db  0x4d ; 'M'
000000000000b121         db  0x0b ; '.'
000000000000b122         db  0x44 ; 'D'
000000000000b123         db  0x0e ; '.'
000000000000b124         db  0x18 ; '.'
000000000000b125         db  0x43 ; 'C'
000000000000b126         db  0x0e ; '.'
000000000000b127         db  0x10 ; '.'
000000000000b128         db  0x41 ; 'A'
000000000000b129         db  0x0e ; '.'
000000000000b12a         db  0x08 ; '.'
000000000000b12b         db  0x00 ; '.'
000000000000b12c         db  0x00 ; '.'
000000000000b12d         db  0x00 ; '.'
000000000000b12e         db  0x00 ; '.'
000000000000b12f         db  0x00 ; '.'
000000000000b130         dd         0x00000010                                  ; Length of the record
000000000000b134         dd         0x000009cc                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b138         db         0xd8, 0xac, 2 dup (0xff)                    ; begin 0x5e10
000000000000b13c         db         0x8e, 0x02, 2 dup (0x00)                    ; length 0x28e (end at 0x609e)
000000000000b140         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b141         align      4
000000000000b144         dd         0x00000030                                  ; Length of the record
000000000000b148         dd         0x000009e0                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b14c         db         0x54, 0xaf, 2 dup (0xff)                    ; begin 0x60a0
000000000000b150         db         0x40, 0x02, 2 dup (0x00)                    ; length 0x240 (end at 0x62e0)
000000000000b154         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b155         db  0x42 ; 'B'
000000000000b156         db  0x0e ; '.'
000000000000b157         db  0x10 ; '.'
000000000000b158         db  0x8d ; '.'
000000000000b159         db  0x02 ; '.'
000000000000b15a         db  0x42 ; 'B'
000000000000b15b         db  0x0e ; '.'
000000000000b15c         db  0x18 ; '.'
000000000000b15d         db  0x8c ; '.'
000000000000b15e         db  0x03 ; '.'
000000000000b15f         db  0x48 ; 'H'
000000000000b160         db  0x0e ; '.'
000000000000b161         db  0x20 ; ' '
000000000000b162         db  0x86 ; '.'
000000000000b163         db  0x04 ; '.'
000000000000b164         db  0x44 ; 'D'
000000000000b165         db  0x0e ; '.'
000000000000b166         db  0x28 ; '('
000000000000b167         db  0x83 ; '.'
000000000000b168         db  0x05 ; '.'
000000000000b169         db  0x03 ; '.'
000000000000b16a         db  0x09 ; '.'
000000000000b16b         db  0x02 ; '.'
000000000000b16c         db  0x0e ; '.'
000000000000b16d         db  0x20 ; ' '
000000000000b16e         db  0x57 ; 'W'
000000000000b16f         db  0x0e ; '.'
000000000000b170         db  0x18 ; '.'
000000000000b171         db  0x4d ; 'M'
000000000000b172         db  0x0e ; '.'
000000000000b173         db  0x10 ; '.'
000000000000b174         db  0x42 ; 'B'
000000000000b175         db  0x0e ; '.'
000000000000b176         db  0x08 ; '.'
000000000000b177         db  0x00 ; '.'
000000000000b178         dd         0x0000004c                                  ; Length of the record
000000000000b17c         dd         0x00000a14                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b180         db         0x60, 0xb1, 2 dup (0xff)                    ; begin 0x62e0
000000000000b184         db         0xd8, 0x01, 2 dup (0x00)                    ; length 0x1d8 (end at 0x64b8)
000000000000b188         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b189         db  0x42 ; 'B'
000000000000b18a         db  0x0e ; '.'
000000000000b18b         db  0x10 ; '.'
000000000000b18c         db  0x8f ; '.'
000000000000b18d         db  0x02 ; '.'
000000000000b18e         db  0x42 ; 'B'
000000000000b18f         db  0x0e ; '.'
000000000000b190         db  0x18 ; '.'
000000000000b191         db  0x8e ; '.'
000000000000b192         db  0x03 ; '.'
000000000000b193         db  0x42 ; 'B'
000000000000b194         db  0x0e ; '.'
000000000000b195         db  0x20 ; ' '
000000000000b196         db  0x8d ; '.'
000000000000b197         db  0x04 ; '.'
000000000000b198         db  0x42 ; 'B'
000000000000b199         db  0x0e ; '.'
000000000000b19a         db  0x28 ; '('
000000000000b19b         db  0x8c ; '.'
000000000000b19c         db  0x05 ; '.'
000000000000b19d         db  0x44 ; 'D'
000000000000b19e         db  0x0e ; '.'
000000000000b19f         db  0x30 ; '0'
000000000000b1a0         db  0x86 ; '.'
000000000000b1a1         db  0x06 ; '.'
000000000000b1a2         db  0x41 ; 'A'
000000000000b1a3         db  0x0e ; '.'
000000000000b1a4         db  0x38 ; '8'
000000000000b1a5         db  0x83 ; '.'
000000000000b1a6         db  0x07 ; '.'
000000000000b1a7         db  0x47 ; 'G'
000000000000b1a8         db  0x0e ; '.'
000000000000b1a9         db  0xf0 ; '.'
000000000000b1aa         db  0x01 ; '.'
000000000000b1ab         db  0x03 ; '.'
000000000000b1ac         db  0x1d ; '.'
000000000000b1ad         db  0x01 ; '.'
000000000000b1ae         db  0x0a ; '.'
000000000000b1af         db  0x0e ; '.'
000000000000b1b0         db  0x38 ; '8'
000000000000b1b1         db  0x41 ; 'A'
000000000000b1b2         db  0x0e ; '.'
000000000000b1b3         db  0x30 ; '0'
000000000000b1b4         db  0x41 ; 'A'
000000000000b1b5         db  0x0e ; '.'
000000000000b1b6         db  0x28 ; '('
000000000000b1b7         db  0x42 ; 'B'
000000000000b1b8         db  0x0e ; '.'
000000000000b1b9         db  0x20 ; ' '
000000000000b1ba         db  0x42 ; 'B'
000000000000b1bb         db  0x0e ; '.'
000000000000b1bc         db  0x18 ; '.'
000000000000b1bd         db  0x42 ; 'B'
000000000000b1be         db  0x0e ; '.'
000000000000b1bf         db  0x10 ; '.'
000000000000b1c0         db  0x42 ; 'B'
000000000000b1c1         db  0x0e ; '.'
000000000000b1c2         db  0x08 ; '.'
000000000000b1c3         db  0x45 ; 'E'
000000000000b1c4         db  0x0b ; '.'
000000000000b1c5         db  0x00 ; '.'
000000000000b1c6         db  0x00 ; '.'
000000000000b1c7         db  0x00 ; '.'
000000000000b1c8         dd         0x00000038                                  ; Length of the record
000000000000b1cc         dd         0x00000a64                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b1d0         db         0xf0, 0xb2, 2 dup (0xff)                    ; begin 0x64c0
000000000000b1d4         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x6534)
000000000000b1d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b1d9         db  0x42 ; 'B'
000000000000b1da         db  0x0e ; '.'
000000000000b1db         db  0x10 ; '.'
000000000000b1dc         db  0x8d ; '.'
000000000000b1dd         db  0x02 ; '.'
000000000000b1de         db  0x42 ; 'B'
000000000000b1df         db  0x0e ; '.'
000000000000b1e0         db  0x18 ; '.'
000000000000b1e1         db  0x8c ; '.'
000000000000b1e2         db  0x03 ; '.'
000000000000b1e3         db  0x41 ; 'A'
000000000000b1e4         db  0x0e ; '.'
000000000000b1e5         db  0x20 ; ' '
000000000000b1e6         db  0x86 ; '.'
000000000000b1e7         db  0x04 ; '.'
000000000000b1e8         db  0x41 ; 'A'
000000000000b1e9         db  0x0e ; '.'
000000000000b1ea         db  0x28 ; '('
000000000000b1eb         db  0x83 ; '.'
000000000000b1ec         db  0x05 ; '.'
000000000000b1ed         db  0x4a ; 'J'
000000000000b1ee         db  0x0e ; '.'
000000000000b1ef         db  0x30 ; '0'
000000000000b1f0         db  0x76 ; 'v'
000000000000b1f1         db  0x0a ; '.'
000000000000b1f2         db  0x0e ; '.'
000000000000b1f3         db  0x28 ; '('
000000000000b1f4         db  0x44 ; 'D'
000000000000b1f5         db  0x0e ; '.'
000000000000b1f6         db  0x20 ; ' '
000000000000b1f7         db  0x41 ; 'A'
000000000000b1f8         db  0x0e ; '.'
000000000000b1f9         db  0x18 ; '.'
000000000000b1fa         db  0x42 ; 'B'
000000000000b1fb         db  0x0e ; '.'
000000000000b1fc         db  0x10 ; '.'
000000000000b1fd         db  0x42 ; 'B'
000000000000b1fe         db  0x0e ; '.'
000000000000b1ff         db  0x08 ; '.'
000000000000b200         db  0x41 ; 'A'
000000000000b201         db  0x0b ; '.'
000000000000b202         db  0x00 ; '.'
000000000000b203         db  0x00 ; '.'
000000000000b204         dd         0x00000010                                  ; Length of the record
000000000000b208         dd         0x00000aa0                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b20c         db         0x34, 0xb3, 2 dup (0xff)                    ; begin 0x6540
000000000000b210         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x654c)
000000000000b214         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b215         align      8
000000000000b218         dd         0x00000014                                  ; Length of the record
000000000000b21c         dd         0x00000ab4                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b220         db         0x30, 0xb3, 2 dup (0xff)                    ; begin 0x6550
000000000000b224         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x655c)
000000000000b228         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b229         align      16
000000000000b230         dd         0x00000110                                  ; Length of the record
000000000000b234         dd         0x00000acc                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b238         db         0x28, 0xb3, 2 dup (0xff)                    ; begin 0x6560
000000000000b23c         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x6977)
000000000000b240         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b241         db  0x42 ; 'B'
000000000000b242         db  0x0e ; '.'
000000000000b243         db  0x10 ; '.'
000000000000b244         db  0x8f ; '.'
000000000000b245         db  0x02 ; '.'
000000000000b246         db  0x42 ; 'B'
000000000000b247         db  0x0e ; '.'
000000000000b248         db  0x18 ; '.'
000000000000b249         db  0x8e ; '.'
000000000000b24a         db  0x03 ; '.'
000000000000b24b         db  0x42 ; 'B'
000000000000b24c         db  0x0e ; '.'
000000000000b24d         db  0x20 ; ' '
000000000000b24e         db  0x8d ; '.'
000000000000b24f         db  0x04 ; '.'
000000000000b250         db  0x42 ; 'B'
000000000000b251         db  0x0e ; '.'
000000000000b252         db  0x28 ; '('
000000000000b253         db  0x8c ; '.'
000000000000b254         db  0x05 ; '.'
000000000000b255         db  0x44 ; 'D'
000000000000b256         db  0x0e ; '.'
000000000000b257         db  0x30 ; '0'
000000000000b258         db  0x86 ; '.'
000000000000b259         db  0x06 ; '.'
000000000000b25a         db  0x41 ; 'A'
000000000000b25b         db  0x0e ; '.'
000000000000b25c         db  0x38 ; '8'
000000000000b25d         db  0x83 ; '.'
000000000000b25e         db  0x07 ; '.'
000000000000b25f         db  0x4a ; 'J'
000000000000b260         db  0x0e ; '.'
000000000000b261         db  0x60 ; '`'
000000000000b262         db  0x02 ; '.'
000000000000b263         db  0xdd ; '.'
000000000000b264         db  0x0e ; '.'
000000000000b265         db  0x68 ; 'h'
000000000000b266         db  0x57 ; 'W'
000000000000b267         db  0x0e ; '.'
000000000000b268         db  0x70 ; 'p'
000000000000b269         db  0x42 ; 'B'
000000000000b26a         db  0x0e ; '.'
000000000000b26b         db  0x78 ; 'x'
000000000000b26c         db  0x42 ; 'B'
000000000000b26d         db  0x0e ; '.'
000000000000b26e         db  0x80 ; '.'
000000000000b26f         db  0x01 ; '.'
000000000000b270         db  0x42 ; 'B'
000000000000b271         db  0x0e ; '.'
000000000000b272         db  0x88 ; '.'
000000000000b273         db  0x01 ; '.'
000000000000b274         db  0x42 ; 'B'
000000000000b275         db  0x0e ; '.'
000000000000b276         db  0x90 ; '.'
000000000000b277         db  0x01 ; '.'
000000000000b278         db  0x53 ; 'S'
000000000000b279         db  0x0e ; '.'
000000000000b27a         db  0x60 ; '`'
000000000000b27b         db  0x44 ; 'D'
000000000000b27c         db  0x0a ; '.'
000000000000b27d         db  0x0e ; '.'
000000000000b27e         db  0x38 ; '8'
000000000000b27f         db  0x41 ; 'A'
000000000000b280         db  0x0e ; '.'
000000000000b281         db  0x30 ; '0'
000000000000b282         db  0x41 ; 'A'
000000000000b283         db  0x0e ; '.'
000000000000b284         db  0x28 ; '('
000000000000b285         db  0x42 ; 'B'
000000000000b286         db  0x0e ; '.'
000000000000b287         db  0x20 ; ' '
000000000000b288         db  0x42 ; 'B'
000000000000b289         db  0x0e ; '.'
000000000000b28a         db  0x18 ; '.'
000000000000b28b         db  0x42 ; 'B'
000000000000b28c         db  0x0e ; '.'
000000000000b28d         db  0x10 ; '.'
000000000000b28e         db  0x42 ; 'B'
000000000000b28f         db  0x0e ; '.'
000000000000b290         db  0x08 ; '.'
000000000000b291         db  0x44 ; 'D'
000000000000b292         db  0x0b ; '.'
000000000000b293         db  0x02 ; '.'
000000000000b294         db  0x78 ; 'x'
000000000000b295         db  0x0a ; '.'
000000000000b296         db  0x0e ; '.'
000000000000b297         db  0x68 ; 'h'
000000000000b298         db  0x48 ; 'H'
000000000000b299         db  0x0b ; '.'
000000000000b29a         db  0x5a ; 'Z'
000000000000b29b         db  0x0a ; '.'
000000000000b29c         db  0x0e ; '.'
000000000000b29d         db  0x38 ; '8'
000000000000b29e         db  0x47 ; 'G'
000000000000b29f         db  0x0e ; '.'
000000000000b2a0         db  0x30 ; '0'
000000000000b2a1         db  0x41 ; 'A'
000000000000b2a2         db  0x0e ; '.'
000000000000b2a3         db  0x28 ; '('
000000000000b2a4         db  0x42 ; 'B'
000000000000b2a5         db  0x0e ; '.'
000000000000b2a6         db  0x20 ; ' '
000000000000b2a7         db  0x42 ; 'B'
000000000000b2a8         db  0x0e ; '.'
000000000000b2a9         db  0x18 ; '.'
000000000000b2aa         db  0x42 ; 'B'
000000000000b2ab         db  0x0e ; '.'
000000000000b2ac         db  0x10 ; '.'
000000000000b2ad         db  0x42 ; 'B'
000000000000b2ae         db  0x0e ; '.'
000000000000b2af         db  0x08 ; '.'
000000000000b2b0         db  0x56 ; 'V'
000000000000b2b1         db  0x0b ; '.'
000000000000b2b2         db  0x5e ; '^'
000000000000b2b3         db  0x0a ; '.'
000000000000b2b4         db  0x0e ; '.'
000000000000b2b5         db  0x38 ; '8'
000000000000b2b6         db  0x52 ; 'R'
000000000000b2b7         db  0x0e ; '.'
000000000000b2b8         db  0x30 ; '0'
000000000000b2b9         db  0x41 ; 'A'
000000000000b2ba         db  0x0e ; '.'
000000000000b2bb         db  0x28 ; '('
000000000000b2bc         db  0x42 ; 'B'
000000000000b2bd         db  0x0e ; '.'
000000000000b2be         db  0x20 ; ' '
000000000000b2bf         db  0x42 ; 'B'
000000000000b2c0         db  0x0e ; '.'
000000000000b2c1         db  0x18 ; '.'
000000000000b2c2         db  0x42 ; 'B'
000000000000b2c3         db  0x0e ; '.'
000000000000b2c4         db  0x10 ; '.'
000000000000b2c5         db  0x42 ; 'B'
000000000000b2c6         db  0x0e ; '.'
000000000000b2c7         db  0x08 ; '.'
000000000000b2c8         db  0x4f ; 'O'
000000000000b2c9         db  0x0b ; '.'
000000000000b2ca         db  0x62 ; 'b'
000000000000b2cb         db  0x0a ; '.'
000000000000b2cc         db  0x0e ; '.'
000000000000b2cd         db  0x38 ; '8'
000000000000b2ce         db  0x50 ; 'P'
000000000000b2cf         db  0x0e ; '.'
000000000000b2d0         db  0x30 ; '0'
000000000000b2d1         db  0x41 ; 'A'
000000000000b2d2         db  0x0e ; '.'
000000000000b2d3         db  0x28 ; '('
000000000000b2d4         db  0x42 ; 'B'
000000000000b2d5         db  0x0e ; '.'
000000000000b2d6         db  0x20 ; ' '
000000000000b2d7         db  0x42 ; 'B'
000000000000b2d8         db  0x0e ; '.'
000000000000b2d9         db  0x18 ; '.'
000000000000b2da         db  0x42 ; 'B'
000000000000b2db         db  0x0e ; '.'
000000000000b2dc         db  0x10 ; '.'
000000000000b2dd         db  0x42 ; 'B'
000000000000b2de         db  0x0e ; '.'
000000000000b2df         db  0x08 ; '.'
000000000000b2e0         db  0x55 ; 'U'
000000000000b2e1         db  0x0b ; '.'
000000000000b2e2         db  0x66 ; 'f'
000000000000b2e3         db  0x0e ; '.'
000000000000b2e4         db  0x68 ; 'h'
000000000000b2e5         db  0x42 ; 'B'
000000000000b2e6         db  0x0e ; '.'
000000000000b2e7         db  0x70 ; 'p'
000000000000b2e8         db  0x5c ; '\'
000000000000b2e9         db  0x0e ; '.'
000000000000b2ea         db  0x68 ; 'h'
000000000000b2eb         db  0x41 ; 'A'
000000000000b2ec         db  0x0e ; '.'
000000000000b2ed         db  0x60 ; '`'
000000000000b2ee         db  0x44 ; 'D'
000000000000b2ef         db  0x0a ; '.'
000000000000b2f0         db  0x0e ; '.'
000000000000b2f1         db  0x38 ; '8'
000000000000b2f2         db  0x41 ; 'A'
000000000000b2f3         db  0x0e ; '.'
000000000000b2f4         db  0x30 ; '0'
000000000000b2f5         db  0x41 ; 'A'
000000000000b2f6         db  0x0e ; '.'
000000000000b2f7         db  0x28 ; '('
000000000000b2f8         db  0x42 ; 'B'
000000000000b2f9         db  0x0e ; '.'
000000000000b2fa         db  0x20 ; ' '
000000000000b2fb         db  0x42 ; 'B'
000000000000b2fc         db  0x0e ; '.'
000000000000b2fd         db  0x18 ; '.'
000000000000b2fe         db  0x42 ; 'B'
000000000000b2ff         db  0x0e ; '.'
000000000000b300         db  0x10 ; '.'
000000000000b301         db  0x42 ; 'B'
000000000000b302         db  0x0e ; '.'
000000000000b303         db  0x08 ; '.'
000000000000b304         db  0x45 ; 'E'
000000000000b305         db  0x0b ; '.'
000000000000b306         db  0x68 ; 'h'
000000000000b307         db  0x0a ; '.'
000000000000b308         db  0x0e ; '.'
000000000000b309         db  0x68 ; 'h'
000000000000b30a         db  0x48 ; 'H'
000000000000b30b         db  0x0b ; '.'
000000000000b30c         db  0x72 ; 'r'
000000000000b30d         db  0x0e ; '.'
000000000000b30e         db  0x68 ; 'h'
000000000000b30f         db  0x45 ; 'E'
000000000000b310         db  0x0e ; '.'
000000000000b311         db  0x70 ; 'p'
000000000000b312         db  0x42 ; 'B'
000000000000b313         db  0x0e ; '.'
000000000000b314         db  0x78 ; 'x'
000000000000b315         db  0x42 ; 'B'
000000000000b316         db  0x0e ; '.'
000000000000b317         db  0x80 ; '.'
000000000000b318         db  0x01 ; '.'
000000000000b319         db  0x5e ; '^'
000000000000b31a         db  0x0e ; '.'
000000000000b31b         db  0x60 ; '`'
000000000000b31c         db  0x44 ; 'D'
000000000000b31d         db  0x0a ; '.'
000000000000b31e         db  0x0e ; '.'
000000000000b31f         db  0x38 ; '8'
000000000000b320         db  0x41 ; 'A'
000000000000b321         db  0x0e ; '.'
000000000000b322         db  0x30 ; '0'
000000000000b323         db  0x41 ; 'A'
000000000000b324         db  0x0e ; '.'
000000000000b325         db  0x28 ; '('
000000000000b326         db  0x42 ; 'B'
000000000000b327         db  0x0e ; '.'
000000000000b328         db  0x20 ; ' '
000000000000b329         db  0x42 ; 'B'
000000000000b32a         db  0x0e ; '.'
000000000000b32b         db  0x18 ; '.'
000000000000b32c         db  0x42 ; 'B'
000000000000b32d         db  0x0e ; '.'
000000000000b32e         db  0x10 ; '.'
000000000000b32f         db  0x42 ; 'B'
000000000000b330         db  0x0e ; '.'
000000000000b331         db  0x08 ; '.'
000000000000b332         db  0x41 ; 'A'
000000000000b333         db  0x0b ; '.'
000000000000b334         db  0x79 ; 'y'
000000000000b335         db  0x0a ; '.'
000000000000b336         db  0x0e ; '.'
000000000000b337         db  0x68 ; 'h'
000000000000b338         db  0x42 ; 'B'
000000000000b339         db  0x0e ; '.'
000000000000b33a         db  0x70 ; 'p'
000000000000b33b         db  0x42 ; 'B'
000000000000b33c         db  0x0e ; '.'
000000000000b33d         db  0x78 ; 'x'
000000000000b33e         db  0x42 ; 'B'
000000000000b33f         db  0x0e ; '.'
000000000000b340         db  0x80 ; '.'
000000000000b341         db  0x01 ; '.'
000000000000b342         db  0x51 ; 'Q'
000000000000b343         db  0x0b ; '.'
000000000000b344         dd         0x00000010                                  ; Length of the record
000000000000b348         dd         0x00000be0                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b34c         db         0x34, 0xb6, 2 dup (0xff)                    ; begin 0x6980
000000000000b350         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x69a0)
000000000000b354         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b355         align      8
000000000000b358         dd         0x00000018                                  ; Length of the record
000000000000b35c         dd         0x00000bf4                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b360         db         0x40, 0xb6, 2 dup (0xff)                    ; begin 0x69a0
000000000000b364         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x6a18)
000000000000b368         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b369         db  0x44 ; 'D'
000000000000b36a         db  0x0e ; '.'
000000000000b36b         db  0x70 ; 'p'
000000000000b36c         db  0x02 ; '.'
000000000000b36d         db  0x60 ; '`'
000000000000b36e         db  0x0a ; '.'
000000000000b36f         db  0x0e ; '.'
000000000000b370         db  0x08 ; '.'
000000000000b371         db  0x41 ; 'A'
000000000000b372         db  0x0b ; '.'
000000000000b373         db  0x00 ; '.'
000000000000b374         dd         0x00000028                                  ; Length of the record
000000000000b378         dd         0x00000c10                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b37c         db         0xa4, 0xb6, 2 dup (0xff)                    ; begin 0x6a20
000000000000b380         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x6af5)
000000000000b384         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b385         db  0x41 ; 'A'
000000000000b386         db  0x0e ; '.'
000000000000b387         db  0x10 ; '.'
000000000000b388         db  0x86 ; '.'
000000000000b389         db  0x02 ; '.'
000000000000b38a         db  0x41 ; 'A'
000000000000b38b         db  0x0e ; '.'
000000000000b38c         db  0x18 ; '.'
000000000000b38d         db  0x83 ; '.'
000000000000b38e         db  0x03 ; '.'
000000000000b38f         db  0x50 ; 'P'
000000000000b390         db  0x0e ; '.'
000000000000b391         db  0xd0 ; '.'
000000000000b392         db  0x01 ; '.'
000000000000b393         db  0x02 ; '.'
000000000000b394         db  0xab ; '.'
000000000000b395         db  0x0a ; '.'
000000000000b396         db  0x0e ; '.'
000000000000b397         db  0x18 ; '.'
000000000000b398         db  0x41 ; 'A'
000000000000b399         db  0x0e ; '.'
000000000000b39a         db  0x10 ; '.'
000000000000b39b         db  0x41 ; 'A'
000000000000b39c         db  0x0e ; '.'
000000000000b39d         db  0x08 ; '.'
000000000000b39e         db  0x41 ; 'A'
000000000000b39f         db  0x0b ; '.'
000000000000b3a0         dd         0x0000001c                                  ; Length of the record
000000000000b3a4         dd         0x00000c3c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b3a8         db         0x58, 0xb7, 2 dup (0xff)                    ; begin 0x6b00
000000000000b3ac         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x6b80)
000000000000b3b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b3b1         db  0x41 ; 'A'
000000000000b3b2         db  0x0e ; '.'
000000000000b3b3         db  0x10 ; '.'
000000000000b3b4         db  0x83 ; '.'
000000000000b3b5         db  0x02 ; '.'
000000000000b3b6         db  0x02 ; '.'
000000000000b3b7         db  0x7a ; 'z'
000000000000b3b8         db  0x0e ; '.'
000000000000b3b9         db  0x08 ; '.'
000000000000b3ba         db  0x00 ; '.'
000000000000b3bb         db  0x00 ; '.'
000000000000b3bc         db  0x00 ; '.'
000000000000b3bd         db  0x00 ; '.'
000000000000b3be         db  0x00 ; '.'
000000000000b3bf         db  0x00 ; '.'
000000000000b3c0         dd         0x00000018                                  ; Length of the record
000000000000b3c4         dd         0x00000c5c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b3c8         db         0xb8, 0xb7, 2 dup (0xff)                    ; begin 0x6b80
000000000000b3cc         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x6b9a)
000000000000b3d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b3d1         db  0x41 ; 'A'
000000000000b3d2         db  0x0e ; '.'
000000000000b3d3         db  0x10 ; '.'
000000000000b3d4         db  0x83 ; '.'
000000000000b3d5         db  0x02 ; '.'
000000000000b3d6         db  0x53 ; 'S'
000000000000b3d7         db  0x0a ; '.'
000000000000b3d8         db  0x0e ; '.'
000000000000b3d9         db  0x08 ; '.'
000000000000b3da         db  0x41 ; 'A'
000000000000b3db         db  0x0b ; '.'
000000000000b3dc         dd         0x00000010                                  ; Length of the record
000000000000b3e0         dd         0x00000c78                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b3e4         db         0xbc, 0xb7, 2 dup (0xff)                    ; begin 0x6ba0
000000000000b3e8         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x6bc4)
000000000000b3ec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b3ed         db  0x5f ; '_'
000000000000b3ee         db  0x0e ; '.'
000000000000b3ef         db  0x10 ; '.'
000000000000b3f0         dd         0x00000010                                  ; Length of the record
000000000000b3f4         dd         0x00000c8c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b3f8         db         0xd8, 0xb7, 2 dup (0xff)                    ; begin 0x6bd0
000000000000b3fc         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x6bd2)
000000000000b400         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b401         align      4
000000000000b404         dd         0x00000020                                  ; Length of the record
000000000000b408         dd         0x00000ca0                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b40c         db         0xd4, 0xb7, 2 dup (0xff)                    ; begin 0x6be0
000000000000b410         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x6c16)
000000000000b414         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b415         db  0x44 ; 'D'
000000000000b416         db  0x0e ; '.'
000000000000b417         db  0x10 ; '.'
000000000000b418         db  0x83 ; '.'
000000000000b419         db  0x02 ; '.'
000000000000b41a         db  0x5d ; ']'
000000000000b41b         db  0x0a ; '.'
000000000000b41c         db  0x0e ; '.'
000000000000b41d         db  0x08 ; '.'
000000000000b41e         db  0x47 ; 'G'
000000000000b41f         db  0x0b ; '.'
000000000000b420         db  0x48 ; 'H'
000000000000b421         db  0x0a ; '.'
000000000000b422         db  0x0e ; '.'
000000000000b423         db  0x08 ; '.'
000000000000b424         db  0x41 ; 'A'
000000000000b425         db  0x0b ; '.'
000000000000b426         db  0x00 ; '.'
000000000000b427         db  0x00 ; '.'
000000000000b428         dd         0x00000010                                  ; Length of the record
000000000000b42c         dd         0x00000cc4                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b430         db         0xf0, 0xb7, 2 dup (0xff)                    ; begin 0x6c20
000000000000b434         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x6c44)
000000000000b438         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b439         db  0x5f ; '_'
000000000000b43a         db  0x0e ; '.'
000000000000b43b         db  0x10 ; '.'
000000000000b43c         dd         0x00000014                                  ; Length of the record
000000000000b440         dd         0x00000cd8                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b444         db         0x0c, 0xb8, 2 dup (0xff)                    ; begin 0x6c50
000000000000b448         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x6cd2)
000000000000b44c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b44d         db  0x02 ; '.'
000000000000b44e         db  0x5f ; '_'
000000000000b44f         db  0x0e ; '.'
000000000000b450         db  0x10 ; '.'
000000000000b451         db  0x49 ; 'I'
000000000000b452         db  0x0e ; '.'
000000000000b453         db  0x08 ; '.'
000000000000b454         dd         0x00000014                                  ; Length of the record
000000000000b458         dd         0x00000cf0                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b45c         db         0x84, 0xb8, 2 dup (0xff)                    ; begin 0x6ce0
000000000000b460         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x6d2a)
000000000000b464         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b465         db  0x02 ; '.'
000000000000b466         db  0x45 ; 'E'
000000000000b467         db  0x0e ; '.'
000000000000b468         db  0x10 ; '.'
000000000000b469         db  0x00 ; '.'
000000000000b46a         db  0x00 ; '.'
000000000000b46b         db  0x00 ; '.'
000000000000b46c         dd         0x00000018                                  ; Length of the record
000000000000b470         dd         0x00000d08                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b474         db         0xbc, 0xb8, 2 dup (0xff)                    ; begin 0x6d30
000000000000b478         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x6d47)
000000000000b47c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b47d         db  0x41 ; 'A'
000000000000b47e         db  0x0e ; '.'
000000000000b47f         db  0x10 ; '.'
000000000000b480         db  0x83 ; '.'
000000000000b481         db  0x02 ; '.'
000000000000b482         db  0x51 ; 'Q'
000000000000b483         db  0x0e ; '.'
000000000000b484         db  0x08 ; '.'
000000000000b485         db  0x00 ; '.'
000000000000b486         db  0x00 ; '.'
000000000000b487         db  0x00 ; '.'
000000000000b488         dd         0x00000018                                  ; Length of the record
000000000000b48c         dd         0x00000d24                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b490         db         0xc0, 0xb8, 2 dup (0xff)                    ; begin 0x6d50
000000000000b494         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x6d7e)
000000000000b498         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b499         db  0x47 ; 'G'
000000000000b49a         db  0x0e ; '.'
000000000000b49b         db  0x10 ; '.'
000000000000b49c         db  0x61 ; 'a'
000000000000b49d         db  0x0a ; '.'
000000000000b49e         db  0x0e ; '.'
000000000000b49f         db  0x08 ; '.'
000000000000b4a0         db  0x41 ; 'A'
000000000000b4a1         db  0x0b ; '.'
000000000000b4a2         db  0x00 ; '.'
000000000000b4a3         db  0x00 ; '.'
000000000000b4a4         dd         0x00000024                                  ; Length of the record
000000000000b4a8         dd         0x00000d40                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b4ac         db         0xd4, 0xb8, 2 dup (0xff)                    ; begin 0x6d80
000000000000b4b0         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x6da8)
000000000000b4b4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b4b5         db  0x41 ; 'A'
000000000000b4b6         db  0x0e ; '.'
000000000000b4b7         db  0x10 ; '.'
000000000000b4b8         db  0x86 ; '.'
000000000000b4b9         db  0x02 ; '.'
000000000000b4ba         db  0x41 ; 'A'
000000000000b4bb         db  0x0e ; '.'
000000000000b4bc         db  0x18 ; '.'
000000000000b4bd         db  0x83 ; '.'
000000000000b4be         db  0x03 ; '.'
000000000000b4bf         db  0x4d ; 'M'
000000000000b4c0         db  0x0e ; '.'
000000000000b4c1         db  0x20 ; ' '
000000000000b4c2         db  0x49 ; 'I'
000000000000b4c3         db  0x0e ; '.'
000000000000b4c4         db  0x18 ; '.'
000000000000b4c5         db  0x47 ; 'G'
000000000000b4c6         db  0x0e ; '.'
000000000000b4c7         db  0x10 ; '.'
000000000000b4c8         db  0x41 ; 'A'
000000000000b4c9         db  0x0e ; '.'
000000000000b4ca         db  0x08 ; '.'
000000000000b4cb         db  0x00 ; '.'
000000000000b4cc         dd         0x00000018                                  ; Length of the record
000000000000b4d0         dd         0x00000d68                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b4d4         db         0xdc, 0xb8, 2 dup (0xff)                    ; begin 0x6db0
000000000000b4d8         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x6dc3)
000000000000b4dc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b4dd         db  0x41 ; 'A'
000000000000b4de         db  0x0e ; '.'
000000000000b4df         db  0x10 ; '.'
000000000000b4e0         db  0x83 ; '.'
000000000000b4e1         db  0x02 ; '.'
000000000000b4e2         db  0x50 ; 'P'
000000000000b4e3         db  0x0e ; '.'
000000000000b4e4         db  0x08 ; '.'
000000000000b4e5         db  0x00 ; '.'
000000000000b4e6         db  0x00 ; '.'
000000000000b4e7         db  0x00 ; '.'
000000000000b4e8         dd         0x00000014                                  ; Length of the record
000000000000b4ec         dd         0x00000d84                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b4f0         db         0xe0, 0xb8, 2 dup (0xff)                    ; begin 0x6dd0
000000000000b4f4         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x6e05)
000000000000b4f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b4f9         db  0x4b ; 'K'
000000000000b4fa         db  0x0e ; '.'
000000000000b4fb         db  0x10 ; '.'
000000000000b4fc         db  0x00 ; '.'
000000000000b4fd         db  0x00 ; '.'
000000000000b4fe         db  0x00 ; '.'
000000000000b4ff         db  0x00 ; '.'
000000000000b500         dd         0x00000048                                  ; Length of the record
000000000000b504         dd         0x00000d9c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b508         db         0x08, 0xb9, 2 dup (0xff)                    ; begin 0x6e10
000000000000b50c         db         0x00, 0x01, 2 dup (0x00)                    ; length 0x100 (end at 0x6f10)
000000000000b510         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b511         db  0x42 ; 'B'
000000000000b512         db  0x0e ; '.'
000000000000b513         db  0x10 ; '.'
000000000000b514         db  0x8f ; '.'
000000000000b515         db  0x02 ; '.'
000000000000b516         db  0x42 ; 'B'
000000000000b517         db  0x0e ; '.'
000000000000b518         db  0x18 ; '.'
000000000000b519         db  0x8e ; '.'
000000000000b51a         db  0x03 ; '.'
000000000000b51b         db  0x45 ; 'E'
000000000000b51c         db  0x0e ; '.'
000000000000b51d         db  0x20 ; ' '
000000000000b51e         db  0x8d ; '.'
000000000000b51f         db  0x04 ; '.'
000000000000b520         db  0x42 ; 'B'
000000000000b521         db  0x0e ; '.'
000000000000b522         db  0x28 ; '('
000000000000b523         db  0x8c ; '.'
000000000000b524         db  0x05 ; '.'
000000000000b525         db  0x44 ; 'D'
000000000000b526         db  0x0e ; '.'
000000000000b527         db  0x30 ; '0'
000000000000b528         db  0x86 ; '.'
000000000000b529         db  0x06 ; '.'
000000000000b52a         db  0x41 ; 'A'
000000000000b52b         db  0x0e ; '.'
000000000000b52c         db  0x38 ; '8'
000000000000b52d         db  0x83 ; '.'
000000000000b52e         db  0x07 ; '.'
000000000000b52f         db  0x4e ; 'N'
000000000000b530         db  0x0e ; '.'
000000000000b531         db  0x50 ; 'P'
000000000000b532         db  0x02 ; '.'
000000000000b533         db  0x9d ; '.'
000000000000b534         db  0x0a ; '.'
000000000000b535         db  0x0e ; '.'
000000000000b536         db  0x38 ; '8'
000000000000b537         db  0x41 ; 'A'
000000000000b538         db  0x0e ; '.'
000000000000b539         db  0x30 ; '0'
000000000000b53a         db  0x41 ; 'A'
000000000000b53b         db  0x0e ; '.'
000000000000b53c         db  0x28 ; '('
000000000000b53d         db  0x42 ; 'B'
000000000000b53e         db  0x0e ; '.'
000000000000b53f         db  0x20 ; ' '
000000000000b540         db  0x42 ; 'B'
000000000000b541         db  0x0e ; '.'
000000000000b542         db  0x18 ; '.'
000000000000b543         db  0x42 ; 'B'
000000000000b544         db  0x0e ; '.'
000000000000b545         db  0x10 ; '.'
000000000000b546         db  0x42 ; 'B'
000000000000b547         db  0x0e ; '.'
000000000000b548         db  0x08 ; '.'
000000000000b549         db  0x4b ; 'K'
000000000000b54a         db  0x0b ; '.'
000000000000b54b         db  0x00 ; '.'
000000000000b54c         dd         0x00000018                                  ; Length of the record
000000000000b550         dd         0x00000de8                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b554         db         0xbc, 0xb9, 2 dup (0xff)                    ; begin 0x6f10
000000000000b558         db         0x21, 3 dup (0x00)                          ; length 0x21 (end at 0x6f31)
000000000000b55c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b55d         db  0x44 ; 'D'
000000000000b55e         db  0x0e ; '.'
000000000000b55f         db  0x18 ; '.'
000000000000b560         db  0x42 ; 'B'
000000000000b561         db  0x0e ; '.'
000000000000b562         db  0x20 ; ' '
000000000000b563         db  0x5a ; 'Z'
000000000000b564         db  0x0e ; '.'
000000000000b565         db  0x08 ; '.'
000000000000b566         db  0x00 ; '.'
000000000000b567         db  0x00 ; '.'
000000000000b568         dd         0x0000004c                                  ; Length of the record
000000000000b56c         dd         0x00000e04                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b570         db         0xd0, 0xb9, 2 dup (0xff)                    ; begin 0x6f40
000000000000b574         db         0x1c, 0x04, 2 dup (0x00)                    ; length 0x41c (end at 0x735c)
000000000000b578         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b579         db  0x42 ; 'B'
000000000000b57a         db  0x0e ; '.'
000000000000b57b         db  0x10 ; '.'
000000000000b57c         db  0x8f ; '.'
000000000000b57d         db  0x02 ; '.'
000000000000b57e         db  0x42 ; 'B'
000000000000b57f         db  0x0e ; '.'
000000000000b580         db  0x18 ; '.'
000000000000b581         db  0x8e ; '.'
000000000000b582         db  0x03 ; '.'
000000000000b583         db  0x42 ; 'B'
000000000000b584         db  0x0e ; '.'
000000000000b585         db  0x20 ; ' '
000000000000b586         db  0x8d ; '.'
000000000000b587         db  0x04 ; '.'
000000000000b588         db  0x42 ; 'B'
000000000000b589         db  0x0e ; '.'
000000000000b58a         db  0x28 ; '('
000000000000b58b         db  0x8c ; '.'
000000000000b58c         db  0x05 ; '.'
000000000000b58d         db  0x41 ; 'A'
000000000000b58e         db  0x0e ; '.'
000000000000b58f         db  0x30 ; '0'
000000000000b590         db  0x86 ; '.'
000000000000b591         db  0x06 ; '.'
000000000000b592         db  0x41 ; 'A'
000000000000b593         db  0x0e ; '.'
000000000000b594         db  0x38 ; '8'
000000000000b595         db  0x83 ; '.'
000000000000b596         db  0x07 ; '.'
000000000000b597         db  0x44 ; 'D'
000000000000b598         db  0x0e ; '.'
000000000000b599         db  0x60 ; '`'
000000000000b59a         db  0x02 ; '.'
000000000000b59b         db  0xe9 ; '.'
000000000000b59c         db  0x0a ; '.'
000000000000b59d         db  0x0e ; '.'
000000000000b59e         db  0x38 ; '8'
000000000000b59f         db  0x41 ; 'A'
000000000000b5a0         db  0x0e ; '.'
000000000000b5a1         db  0x30 ; '0'
000000000000b5a2         db  0x41 ; 'A'
000000000000b5a3         db  0x0e ; '.'
000000000000b5a4         db  0x28 ; '('
000000000000b5a5         db  0x42 ; 'B'
000000000000b5a6         db  0x0e ; '.'
000000000000b5a7         db  0x20 ; ' '
000000000000b5a8         db  0x42 ; 'B'
000000000000b5a9         db  0x0e ; '.'
000000000000b5aa         db  0x18 ; '.'
000000000000b5ab         db  0x42 ; 'B'
000000000000b5ac         db  0x0e ; '.'
000000000000b5ad         db  0x10 ; '.'
000000000000b5ae         db  0x42 ; 'B'
000000000000b5af         db  0x0e ; '.'
000000000000b5b0         db  0x08 ; '.'
000000000000b5b1         db  0x47 ; 'G'
000000000000b5b2         db  0x0b ; '.'
000000000000b5b3         db  0x00 ; '.'
000000000000b5b4         db  0x00 ; '.'
000000000000b5b5         db  0x00 ; '.'
000000000000b5b6         db  0x00 ; '.'
000000000000b5b7         db  0x00 ; '.'
000000000000b5b8         dd         0x0000004c                                  ; Length of the record
000000000000b5bc         dd         0x00000e54                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b5c0         db         0xa0, 0xbd, 2 dup (0xff)                    ; begin 0x7360
000000000000b5c4         db         0x1c, 0x04, 2 dup (0x00)                    ; length 0x41c (end at 0x777c)
000000000000b5c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b5c9         db  0x42 ; 'B'
000000000000b5ca         db  0x0e ; '.'
000000000000b5cb         db  0x10 ; '.'
000000000000b5cc         db  0x8f ; '.'
000000000000b5cd         db  0x02 ; '.'
000000000000b5ce         db  0x42 ; 'B'
000000000000b5cf         db  0x0e ; '.'
000000000000b5d0         db  0x18 ; '.'
000000000000b5d1         db  0x8e ; '.'
000000000000b5d2         db  0x03 ; '.'
000000000000b5d3         db  0x42 ; 'B'
000000000000b5d4         db  0x0e ; '.'
000000000000b5d5         db  0x20 ; ' '
000000000000b5d6         db  0x8d ; '.'
000000000000b5d7         db  0x04 ; '.'
000000000000b5d8         db  0x42 ; 'B'
000000000000b5d9         db  0x0e ; '.'
000000000000b5da         db  0x28 ; '('
000000000000b5db         db  0x8c ; '.'
000000000000b5dc         db  0x05 ; '.'
000000000000b5dd         db  0x41 ; 'A'
000000000000b5de         db  0x0e ; '.'
000000000000b5df         db  0x30 ; '0'
000000000000b5e0         db  0x86 ; '.'
000000000000b5e1         db  0x06 ; '.'
000000000000b5e2         db  0x41 ; 'A'
000000000000b5e3         db  0x0e ; '.'
000000000000b5e4         db  0x38 ; '8'
000000000000b5e5         db  0x83 ; '.'
000000000000b5e6         db  0x07 ; '.'
000000000000b5e7         db  0x44 ; 'D'
000000000000b5e8         db  0x0e ; '.'
000000000000b5e9         db  0x60 ; '`'
000000000000b5ea         db  0x02 ; '.'
000000000000b5eb         db  0xe9 ; '.'
000000000000b5ec         db  0x0a ; '.'
000000000000b5ed         db  0x0e ; '.'
000000000000b5ee         db  0x38 ; '8'
000000000000b5ef         db  0x41 ; 'A'
000000000000b5f0         db  0x0e ; '.'
000000000000b5f1         db  0x30 ; '0'
000000000000b5f2         db  0x41 ; 'A'
000000000000b5f3         db  0x0e ; '.'
000000000000b5f4         db  0x28 ; '('
000000000000b5f5         db  0x42 ; 'B'
000000000000b5f6         db  0x0e ; '.'
000000000000b5f7         db  0x20 ; ' '
000000000000b5f8         db  0x42 ; 'B'
000000000000b5f9         db  0x0e ; '.'
000000000000b5fa         db  0x18 ; '.'
000000000000b5fb         db  0x42 ; 'B'
000000000000b5fc         db  0x0e ; '.'
000000000000b5fd         db  0x10 ; '.'
000000000000b5fe         db  0x42 ; 'B'
000000000000b5ff         db  0x0e ; '.'
000000000000b600         db  0x08 ; '.'
000000000000b601         db  0x47 ; 'G'
000000000000b602         db  0x0b ; '.'
000000000000b603         db  0x00 ; '.'
000000000000b604         db  0x00 ; '.'
000000000000b605         db  0x00 ; '.'
000000000000b606         db  0x00 ; '.'
000000000000b607         db  0x00 ; '.'
000000000000b608         dd         0x00000034                                  ; Length of the record
000000000000b60c         dd         0x00000ea4                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b610         db         0x70, 0xc1, 2 dup (0xff)                    ; begin 0x7780
000000000000b614         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0x77fb)
000000000000b618         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b619         db  0x42 ; 'B'
000000000000b61a         db  0x0e ; '.'
000000000000b61b         db  0x10 ; '.'
000000000000b61c         db  0x8c ; '.'
000000000000b61d         db  0x02 ; '.'
000000000000b61e         db  0x41 ; 'A'
000000000000b61f         db  0x0e ; '.'
000000000000b620         db  0x18 ; '.'
000000000000b621         db  0x86 ; '.'
000000000000b622         db  0x03 ; '.'
000000000000b623         db  0x41 ; 'A'
000000000000b624         db  0x0e ; '.'
000000000000b625         db  0x20 ; ' '
000000000000b626         db  0x83 ; '.'
000000000000b627         db  0x04 ; '.'
000000000000b628         db  0x7d ; '}'
000000000000b629         db  0x0a ; '.'
000000000000b62a         db  0x0e ; '.'
000000000000b62b         db  0x18 ; '.'
000000000000b62c         db  0x41 ; 'A'
000000000000b62d         db  0x0e ; '.'
000000000000b62e         db  0x10 ; '.'
000000000000b62f         db  0x42 ; 'B'
000000000000b630         db  0x0e ; '.'
000000000000b631         db  0x08 ; '.'
000000000000b632         db  0x44 ; 'D'
000000000000b633         db  0x0b ; '.'
000000000000b634         db  0x60 ; '`'
000000000000b635         db  0x0a ; '.'
000000000000b636         db  0x0e ; '.'
000000000000b637         db  0x18 ; '.'
000000000000b638         db  0x41 ; 'A'
000000000000b639         db  0x0e ; '.'
000000000000b63a         db  0x10 ; '.'
000000000000b63b         db  0x42 ; 'B'
000000000000b63c         db  0x0e ; '.'
000000000000b63d         db  0x08 ; '.'
000000000000b63e         db  0x45 ; 'E'
000000000000b63f         db  0x0b ; '.'
000000000000b640         dd         0x0000001c                                  ; Length of the record
000000000000b644         dd         0x00000edc                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b648         db         0xb8, 0xc1, 2 dup (0xff)                    ; begin 0x7800
000000000000b64c         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0x7840)
000000000000b650         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b651         db  0x44 ; 'D'
000000000000b652         db  0x0e ; '.'
000000000000b653         db  0x10 ; '.'
000000000000b654         db  0x83 ; '.'
000000000000b655         db  0x02 ; '.'
000000000000b656         db  0x5a ; 'Z'
000000000000b657         db  0x0a ; '.'
000000000000b658         db  0x0e ; '.'
000000000000b659         db  0x08 ; '.'
000000000000b65a         db  0x4a ; 'J'
000000000000b65b         db  0x0b ; '.'
000000000000b65c         db  0x53 ; 'S'
000000000000b65d         db  0x0e ; '.'
000000000000b65e         db  0x08 ; '.'
000000000000b65f         db  0x00 ; '.'
000000000000b660         dd         0x0000002c                                  ; Length of the record
000000000000b664         dd         0x00000efc                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b668         db         0xd8, 0xc1, 2 dup (0xff)                    ; begin 0x7840
000000000000b66c         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x7897)
000000000000b670         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b671         db  0x63 ; 'c'
000000000000b672         db  0x0e ; '.'
000000000000b673         db  0x10 ; '.'
000000000000b674         db  0x8c ; '.'
000000000000b675         db  0x02 ; '.'
000000000000b676         db  0x41 ; 'A'
000000000000b677         db  0x0e ; '.'
000000000000b678         db  0x18 ; '.'
000000000000b679         db  0x86 ; '.'
000000000000b67a         db  0x03 ; '.'
000000000000b67b         db  0x44 ; 'D'
000000000000b67c         db  0x0e ; '.'
000000000000b67d         db  0x20 ; ' '
000000000000b67e         db  0x83 ; '.'
000000000000b67f         db  0x04 ; '.'
000000000000b680         db  0x6b ; 'k'
000000000000b681         db  0x0e ; '.'
000000000000b682         db  0x18 ; '.'
000000000000b683         db  0x41 ; 'A'
000000000000b684         db  0x0e ; '.'
000000000000b685         db  0x10 ; '.'
000000000000b686         db  0x42 ; 'B'
000000000000b687         db  0x0e ; '.'
000000000000b688         db  0x08 ; '.'
000000000000b689         db  0x00 ; '.'
000000000000b68a         db  0x00 ; '.'
000000000000b68b         db  0x00 ; '.'
000000000000b68c         db  0x00 ; '.'
000000000000b68d         db  0x00 ; '.'
000000000000b68e         db  0x00 ; '.'
000000000000b68f         db  0x00 ; '.'
000000000000b690         dd         0x0000003c                                  ; Length of the record
000000000000b694         dd         0x00000f2c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b698         db         0x08, 0xc2, 2 dup (0xff)                    ; begin 0x78a0
000000000000b69c         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0x7923)
000000000000b6a0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b6a1         db  0x42 ; 'B'
000000000000b6a2         db  0x0e ; '.'
000000000000b6a3         db  0x10 ; '.'
000000000000b6a4         db  0x8d ; '.'
000000000000b6a5         db  0x02 ; '.'
000000000000b6a6         db  0x42 ; 'B'
000000000000b6a7         db  0x0e ; '.'
000000000000b6a8         db  0x18 ; '.'
000000000000b6a9         db  0x8c ; '.'
000000000000b6aa         db  0x03 ; '.'
000000000000b6ab         db  0x44 ; 'D'
000000000000b6ac         db  0x0e ; '.'
000000000000b6ad         db  0x20 ; ' '
000000000000b6ae         db  0x86 ; '.'
000000000000b6af         db  0x04 ; '.'
000000000000b6b0         db  0x41 ; 'A'
000000000000b6b1         db  0x0e ; '.'
000000000000b6b2         db  0x28 ; '('
000000000000b6b3         db  0x83 ; '.'
000000000000b6b4         db  0x05 ; '.'
000000000000b6b5         db  0x4a ; 'J'
000000000000b6b6         db  0x0e ; '.'
000000000000b6b7         db  0x40 ; '@'
000000000000b6b8         db  0x02 ; '.'
000000000000b6b9         db  0x64 ; 'd'
000000000000b6ba         db  0x0a ; '.'
000000000000b6bb         db  0x0e ; '.'
000000000000b6bc         db  0x28 ; '('
000000000000b6bd         db  0x41 ; 'A'
000000000000b6be         db  0x0e ; '.'
000000000000b6bf         db  0x20 ; ' '
000000000000b6c0         db  0x41 ; 'A'
000000000000b6c1         db  0x0e ; '.'
000000000000b6c2         db  0x18 ; '.'
000000000000b6c3         db  0x42 ; 'B'
000000000000b6c4         db  0x0e ; '.'
000000000000b6c5         db  0x10 ; '.'
000000000000b6c6         db  0x42 ; 'B'
000000000000b6c7         db  0x0e ; '.'
000000000000b6c8         db  0x08 ; '.'
000000000000b6c9         db  0x41 ; 'A'
000000000000b6ca         db  0x0b ; '.'
000000000000b6cb         db  0x00 ; '.'
000000000000b6cc         db  0x00 ; '.'
000000000000b6cd         db  0x00 ; '.'
000000000000b6ce         db  0x00 ; '.'
000000000000b6cf         db  0x00 ; '.'
000000000000b6d0         dd         0x0000004c                                  ; Length of the record
000000000000b6d4         dd         0x00000f6c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b6d8         db         0x58, 0xc2, 2 dup (0xff)                    ; begin 0x7930
000000000000b6dc         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x79ad)
000000000000b6e0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b6e1         db  0x42 ; 'B'
000000000000b6e2         db  0x0e ; '.'
000000000000b6e3         db  0x10 ; '.'
000000000000b6e4         db  0x8c ; '.'
000000000000b6e5         db  0x02 ; '.'
000000000000b6e6         db  0x41 ; 'A'
000000000000b6e7         db  0x0e ; '.'
000000000000b6e8         db  0x18 ; '.'
000000000000b6e9         db  0x86 ; '.'
000000000000b6ea         db  0x03 ; '.'
000000000000b6eb         db  0x44 ; 'D'
000000000000b6ec         db  0x0e ; '.'
000000000000b6ed         db  0x20 ; ' '
000000000000b6ee         db  0x83 ; '.'
000000000000b6ef         db  0x04 ; '.'
000000000000b6f0         db  0x69 ; 'i'
000000000000b6f1         db  0x0a ; '.'
000000000000b6f2         db  0x0e ; '.'
000000000000b6f3         db  0x18 ; '.'
000000000000b6f4         db  0x41 ; 'A'
000000000000b6f5         db  0x0e ; '.'
000000000000b6f6         db  0x10 ; '.'
000000000000b6f7         db  0x42 ; 'B'
000000000000b6f8         db  0x0e ; '.'
000000000000b6f9         db  0x08 ; '.'
000000000000b6fa         db  0x45 ; 'E'
000000000000b6fb         db  0x0b ; '.'
000000000000b6fc         db  0x55 ; 'U'
000000000000b6fd         db  0x0a ; '.'
000000000000b6fe         db  0x0e ; '.'
000000000000b6ff         db  0x18 ; '.'
000000000000b700         db  0x41 ; 'A'
000000000000b701         db  0x0e ; '.'
000000000000b702         db  0x10 ; '.'
000000000000b703         db  0x42 ; 'B'
000000000000b704         db  0x0e ; '.'
000000000000b705         db  0x08 ; '.'
000000000000b706         db  0x48 ; 'H'
000000000000b707         db  0x0b ; '.'
000000000000b708         db  0x41 ; 'A'
000000000000b709         db  0x0a ; '.'
000000000000b70a         db  0x0e ; '.'
000000000000b70b         db  0x18 ; '.'
000000000000b70c         db  0x46 ; 'F'
000000000000b70d         db  0x0e ; '.'
000000000000b70e         db  0x10 ; '.'
000000000000b70f         db  0x42 ; 'B'
000000000000b710         db  0x0e ; '.'
000000000000b711         db  0x08 ; '.'
000000000000b712         db  0x47 ; 'G'
000000000000b713         db  0x0b ; '.'
000000000000b714         db  0x49 ; 'I'
000000000000b715         db  0x0e ; '.'
000000000000b716         db  0x18 ; '.'
000000000000b717         db  0x41 ; 'A'
000000000000b718         db  0x0e ; '.'
000000000000b719         db  0x10 ; '.'
000000000000b71a         db  0x42 ; 'B'
000000000000b71b         db  0x0e ; '.'
000000000000b71c         db  0x08 ; '.'
000000000000b71d         db  0x00 ; '.'
000000000000b71e         db  0x00 ; '.'
000000000000b71f         db  0x00 ; '.'
000000000000b720         dd         0x0000002c                                  ; Length of the record
000000000000b724         dd         0x00000fbc                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b728         db         0x88, 0xc2, 2 dup (0xff)                    ; begin 0x79b0
000000000000b72c         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x7a43)
000000000000b730         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b731         db  0x42 ; 'B'
000000000000b732         db  0x0e ; '.'
000000000000b733         db  0x10 ; '.'
000000000000b734         db  0x8c ; '.'
000000000000b735         db  0x02 ; '.'
000000000000b736         db  0x41 ; 'A'
000000000000b737         db  0x0e ; '.'
000000000000b738         db  0x18 ; '.'
000000000000b739         db  0x86 ; '.'
000000000000b73a         db  0x03 ; '.'
000000000000b73b         db  0x44 ; 'D'
000000000000b73c         db  0x0e ; '.'
000000000000b73d         db  0x20 ; ' '
000000000000b73e         db  0x83 ; '.'
000000000000b73f         db  0x04 ; '.'
000000000000b740         db  0x5e ; '^'
000000000000b741         db  0x0a ; '.'
000000000000b742         db  0x0e ; '.'
000000000000b743         db  0x18 ; '.'
000000000000b744         db  0x41 ; 'A'
000000000000b745         db  0x0e ; '.'
000000000000b746         db  0x10 ; '.'
000000000000b747         db  0x42 ; 'B'
000000000000b748         db  0x0e ; '.'
000000000000b749         db  0x08 ; '.'
000000000000b74a         db  0x48 ; 'H'
000000000000b74b         db  0x0b ; '.'
000000000000b74c         db  0x00 ; '.'
000000000000b74d         db  0x00 ; '.'
000000000000b74e         db  0x00 ; '.'
000000000000b74f         db  0x00 ; '.'
000000000000b750         dd         0x0000001c                                  ; Length of the record
000000000000b754         dd         0x00000fec                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b758         db         0xf8, 0xc2, 2 dup (0xff)                    ; begin 0x7a50
000000000000b75c         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x7ab0)
000000000000b760         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b761         db  0x44 ; 'D'
000000000000b762         db  0x0e ; '.'
000000000000b763         db  0x10 ; '.'
000000000000b764         db  0x75 ; 'u'
000000000000b765         db  0x0a ; '.'
000000000000b766         db  0x0e ; '.'
000000000000b767         db  0x08 ; '.'
000000000000b768         db  0x47 ; 'G'
000000000000b769         db  0x0b ; '.'
000000000000b76a         db  0x5f ; '_'
000000000000b76b         db  0x0e ; '.'
000000000000b76c         db  0x08 ; '.'
000000000000b76d         db  0x00 ; '.'
000000000000b76e         db  0x00 ; '.'
000000000000b76f         db  0x00 ; '.'
000000000000b770         dd         0x00000010                                  ; Length of the record
000000000000b774         dd         0x0000100c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b778         db         0x38, 0xc3, 2 dup (0xff)                    ; begin 0x7ab0
000000000000b77c         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x7b43)
000000000000b780         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b781         align      4
000000000000b784         dd         0x00000010                                  ; Length of the record
000000000000b788         dd         0x00001020                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b78c         db         0xc4, 0xc3, 2 dup (0xff)                    ; begin 0x7b50
000000000000b790         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x7b60)
000000000000b794         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b795         align      8
000000000000b798         dd         0x00000010                                  ; Length of the record
000000000000b79c         dd         0x00001034                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b7a0         db         0xc0, 0xc3, 2 dup (0xff)                    ; begin 0x7b60
000000000000b7a4         db         0x07, 3 dup (0x00)                          ; length 0x7 (end at 0x7b67)
000000000000b7a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b7a9         align      4
000000000000b7ac         dd         0x00000018                                  ; Length of the record
000000000000b7b0         dd         0x00001048                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b7b4         db         0xbc, 0xc3, 2 dup (0xff)                    ; begin 0x7b70
000000000000b7b8         db         0x22, 3 dup (0x00)                          ; length 0x22 (end at 0x7b92)
000000000000b7bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b7bd         db  0x41 ; 'A'
000000000000b7be         db  0x0e ; '.'
000000000000b7bf         db  0x10 ; '.'
000000000000b7c0         db  0x83 ; '.'
000000000000b7c1         db  0x02 ; '.'
000000000000b7c2         db  0x5b ; '['
000000000000b7c3         db  0x0a ; '.'
000000000000b7c4         db  0x0e ; '.'
000000000000b7c5         db  0x08 ; '.'
000000000000b7c6         db  0x41 ; 'A'
000000000000b7c7         db  0x0b ; '.'
000000000000b7c8         dd         0x0000005c                                  ; Length of the record
000000000000b7cc         dd         0x00001064                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b7d0         db         0xd0, 0xc3, 2 dup (0xff)                    ; begin 0x7ba0
000000000000b7d4         db         0x1e, 0x01, 2 dup (0x00)                    ; length 0x11e (end at 0x7cbe)
000000000000b7d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b7d9         db  0x42 ; 'B'
000000000000b7da         db  0x0e ; '.'
000000000000b7db         db  0x10 ; '.'
000000000000b7dc         db  0x8e ; '.'
000000000000b7dd         db  0x02 ; '.'
000000000000b7de         db  0x42 ; 'B'
000000000000b7df         db  0x0e ; '.'
000000000000b7e0         db  0x18 ; '.'
000000000000b7e1         db  0x8d ; '.'
000000000000b7e2         db  0x03 ; '.'
000000000000b7e3         db  0x45 ; 'E'
000000000000b7e4         db  0x0e ; '.'
000000000000b7e5         db  0x20 ; ' '
000000000000b7e6         db  0x8c ; '.'
000000000000b7e7         db  0x04 ; '.'
000000000000b7e8         db  0x41 ; 'A'
000000000000b7e9         db  0x0e ; '.'
000000000000b7ea         db  0x28 ; '('
000000000000b7eb         db  0x86 ; '.'
000000000000b7ec         db  0x05 ; '.'
000000000000b7ed         db  0x44 ; 'D'
000000000000b7ee         db  0x0e ; '.'
000000000000b7ef         db  0x30 ; '0'
000000000000b7f0         db  0x83 ; '.'
000000000000b7f1         db  0x06 ; '.'
000000000000b7f2         db  0x02 ; '.'
000000000000b7f3         db  0xa1 ; '.'
000000000000b7f4         db  0x0a ; '.'
000000000000b7f5         db  0x0e ; '.'
000000000000b7f6         db  0x28 ; '('
000000000000b7f7         db  0x44 ; 'D'
000000000000b7f8         db  0x0e ; '.'
000000000000b7f9         db  0x20 ; ' '
000000000000b7fa         db  0x42 ; 'B'
000000000000b7fb         db  0x0e ; '.'
000000000000b7fc         db  0x18 ; '.'
000000000000b7fd         db  0x42 ; 'B'
000000000000b7fe         db  0x0e ; '.'
000000000000b7ff         db  0x10 ; '.'
000000000000b800         db  0x42 ; 'B'
000000000000b801         db  0x0e ; '.'
000000000000b802         db  0x08 ; '.'
000000000000b803         db  0x47 ; 'G'
000000000000b804         db  0x0b ; '.'
000000000000b805         db  0x71 ; 'q'
000000000000b806         db  0x0a ; '.'
000000000000b807         db  0x0e ; '.'
000000000000b808         db  0x28 ; '('
000000000000b809         db  0x41 ; 'A'
000000000000b80a         db  0x0e ; '.'
000000000000b80b         db  0x20 ; ' '
000000000000b80c         db  0x42 ; 'B'
000000000000b80d         db  0x0e ; '.'
000000000000b80e         db  0x18 ; '.'
000000000000b80f         db  0x42 ; 'B'
000000000000b810         db  0x0e ; '.'
000000000000b811         db  0x10 ; '.'
000000000000b812         db  0x42 ; 'B'
000000000000b813         db  0x0e ; '.'
000000000000b814         db  0x08 ; '.'
000000000000b815         db  0x48 ; 'H'
000000000000b816         db  0x0b ; '.'
000000000000b817         db  0x53 ; 'S'
000000000000b818         db  0x0e ; '.'
000000000000b819         db  0x28 ; '('
000000000000b81a         db  0x44 ; 'D'
000000000000b81b         db  0x0e ; '.'
000000000000b81c         db  0x20 ; ' '
000000000000b81d         db  0x42 ; 'B'
000000000000b81e         db  0x0e ; '.'
000000000000b81f         db  0x18 ; '.'
000000000000b820         db  0x42 ; 'B'
000000000000b821         db  0x0e ; '.'
000000000000b822         db  0x10 ; '.'
000000000000b823         db  0x42 ; 'B'
000000000000b824         db  0x0e ; '.'
000000000000b825         db  0x08 ; '.'
000000000000b826         db  0x00 ; '.'
000000000000b827         db  0x00 ; '.'
000000000000b828         dd         0x00000010                                  ; Length of the record
000000000000b82c         dd         0x000010c4                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b830         db         0x90, 0xc4, 2 dup (0xff)                    ; begin 0x7cc0
000000000000b834         db         0x77, 3 dup (0x00)                          ; length 0x77 (end at 0x7d37)
000000000000b838         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b839         align      4
000000000000b83c         dd         0x0000005c                                  ; Length of the record
000000000000b840         dd         0x000010d8                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b844         db         0xfc, 0xc4, 2 dup (0xff)                    ; begin 0x7d40
000000000000b848         db         0x40, 0x01, 2 dup (0x00)                    ; length 0x140 (end at 0x7e80)
000000000000b84c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b84d         db  0x42 ; 'B'
000000000000b84e         db  0x0e ; '.'
000000000000b84f         db  0x10 ; '.'
000000000000b850         db  0x8f ; '.'
000000000000b851         db  0x02 ; '.'
000000000000b852         db  0x42 ; 'B'
000000000000b853         db  0x0e ; '.'
000000000000b854         db  0x18 ; '.'
000000000000b855         db  0x8e ; '.'
000000000000b856         db  0x03 ; '.'
000000000000b857         db  0x42 ; 'B'
000000000000b858         db  0x0e ; '.'
000000000000b859         db  0x20 ; ' '
000000000000b85a         db  0x8d ; '.'
000000000000b85b         db  0x04 ; '.'
000000000000b85c         db  0x42 ; 'B'
000000000000b85d         db  0x0e ; '.'
000000000000b85e         db  0x28 ; '('
000000000000b85f         db  0x8c ; '.'
000000000000b860         db  0x05 ; '.'
000000000000b861         db  0x41 ; 'A'
000000000000b862         db  0x0e ; '.'
000000000000b863         db  0x30 ; '0'
000000000000b864         db  0x86 ; '.'
000000000000b865         db  0x06 ; '.'
000000000000b866         db  0x41 ; 'A'
000000000000b867         db  0x0e ; '.'
000000000000b868         db  0x38 ; '8'
000000000000b869         db  0x83 ; '.'
000000000000b86a         db  0x07 ; '.'
000000000000b86b         db  0x44 ; 'D'
000000000000b86c         db  0x0e ; '.'
000000000000b86d         db  0x40 ; '@'
000000000000b86e         db  0x02 ; '.'
000000000000b86f         db  0xee ; '.'
000000000000b870         db  0x0a ; '.'
000000000000b871         db  0x0e ; '.'
000000000000b872         db  0x38 ; '8'
000000000000b873         db  0x46 ; 'F'
000000000000b874         db  0x0e ; '.'
000000000000b875         db  0x30 ; '0'
000000000000b876         db  0x41 ; 'A'
000000000000b877         db  0x0e ; '.'
000000000000b878         db  0x28 ; '('
000000000000b879         db  0x42 ; 'B'
000000000000b87a         db  0x0e ; '.'
000000000000b87b         db  0x20 ; ' '
000000000000b87c         db  0x42 ; 'B'
000000000000b87d         db  0x0e ; '.'
000000000000b87e         db  0x18 ; '.'
000000000000b87f         db  0x42 ; 'B'
000000000000b880         db  0x0e ; '.'
000000000000b881         db  0x10 ; '.'
000000000000b882         db  0x42 ; 'B'
000000000000b883         db  0x0e ; '.'
000000000000b884         db  0x08 ; '.'
000000000000b885         db  0x45 ; 'E'
000000000000b886         db  0x0b ; '.'
000000000000b887         db  0x63 ; 'c'
000000000000b888         db  0x0e ; '.'
000000000000b889         db  0x38 ; '8'
000000000000b88a         db  0x43 ; 'C'
000000000000b88b         db  0x0e ; '.'
000000000000b88c         db  0x30 ; '0'
000000000000b88d         db  0x41 ; 'A'
000000000000b88e         db  0x0e ; '.'
000000000000b88f         db  0x28 ; '('
000000000000b890         db  0x42 ; 'B'
000000000000b891         db  0x0e ; '.'
000000000000b892         db  0x20 ; ' '
000000000000b893         db  0x42 ; 'B'
000000000000b894         db  0x0e ; '.'
000000000000b895         db  0x18 ; '.'
000000000000b896         db  0x42 ; 'B'
000000000000b897         db  0x0e ; '.'
000000000000b898         db  0x10 ; '.'
000000000000b899         db  0x42 ; 'B'
000000000000b89a         db  0x0e ; '.'
000000000000b89b         db  0x08 ; '.'
000000000000b89c         dd         0x00000010                                  ; Length of the record
000000000000b8a0         dd         0x00001138                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b8a4         db         0xdc, 0xc5, 2 dup (0xff)                    ; begin 0x7e80
000000000000b8a8         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x7e85)
000000000000b8ac         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b8ad         align      16
000000000000b8b0         dd         0x00000010                                  ; Length of the record
000000000000b8b4         dd         0x0000114c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b8b8         db         0xd8, 0xc5, 2 dup (0xff)                    ; begin 0x7e90
000000000000b8bc         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x7e95)
000000000000b8c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b8c1         align      4
000000000000b8c4         dd         0x00000010                                  ; Length of the record
000000000000b8c8         dd         0x00001160                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b8cc         db         0xd4, 0xc5, 2 dup (0xff)                    ; begin 0x7ea0
000000000000b8d0         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x7ea5)
000000000000b8d4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b8d5         align      8
000000000000b8d8         dd         0x00000010                                  ; Length of the record
000000000000b8dc         dd         0x00001174                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b8e0         db         0xd0, 0xc5, 2 dup (0xff)                    ; begin 0x7eb0
000000000000b8e4         db         0x49, 3 dup (0x00)                          ; length 0x49 (end at 0x7ef9)
000000000000b8e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b8e9         align      4
000000000000b8ec         dd         0x00000010                                  ; Length of the record
000000000000b8f0         dd         0x00001188                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b8f4         db         0x0c, 0xc6, 2 dup (0xff)                    ; begin 0x7f00
000000000000b8f8         db         0x58, 3 dup (0x00)                          ; length 0x58 (end at 0x7f58)
000000000000b8fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b8fd         align      256
000000000000b900         dd         0x00000038                                  ; Length of the record
000000000000b904         dd         0x0000119c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b908         db         0x58, 0xc6, 2 dup (0xff)                    ; begin 0x7f60
000000000000b90c         db         0x47, 0x01, 2 dup (0x00)                    ; length 0x147 (end at 0x80a7)
000000000000b910         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b911         db  0x42 ; 'B'
000000000000b912         db  0x0e ; '.'
000000000000b913         db  0x10 ; '.'
000000000000b914         db  0x8d ; '.'
000000000000b915         db  0x02 ; '.'
000000000000b916         db  0x42 ; 'B'
000000000000b917         db  0x0e ; '.'
000000000000b918         db  0x18 ; '.'
000000000000b919         db  0x8c ; '.'
000000000000b91a         db  0x03 ; '.'
000000000000b91b         db  0x44 ; 'D'
000000000000b91c         db  0x0e ; '.'
000000000000b91d         db  0x20 ; ' '
000000000000b91e         db  0x86 ; '.'
000000000000b91f         db  0x04 ; '.'
000000000000b920         db  0x41 ; 'A'
000000000000b921         db  0x0e ; '.'
000000000000b922         db  0x28 ; '('
000000000000b923         db  0x83 ; '.'
000000000000b924         db  0x05 ; '.'
000000000000b925         db  0x46 ; 'F'
000000000000b926         db  0x0e ; '.'
000000000000b927         db  0x30 ; '0'
000000000000b928         db  0x02 ; '.'
000000000000b929         db  0xcd ; '.'
000000000000b92a         db  0x0a ; '.'
000000000000b92b         db  0x0e ; '.'
000000000000b92c         db  0x28 ; '('
000000000000b92d         db  0x47 ; 'G'
000000000000b92e         db  0x0e ; '.'
000000000000b92f         db  0x20 ; ' '
000000000000b930         db  0x41 ; 'A'
000000000000b931         db  0x0e ; '.'
000000000000b932         db  0x18 ; '.'
000000000000b933         db  0x42 ; 'B'
000000000000b934         db  0x0e ; '.'
000000000000b935         db  0x10 ; '.'
000000000000b936         db  0x42 ; 'B'
000000000000b937         db  0x0e ; '.'
000000000000b938         db  0x08 ; '.'
000000000000b939         db  0x58 ; 'X'
000000000000b93a         db  0x0b ; '.'
000000000000b93b         db  0x00 ; '.'
000000000000b93c         dd         0x00000034                                  ; Length of the record
000000000000b940         dd         0x000011d8                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b944         db         0x6c, 0xc7, 2 dup (0xff)                    ; begin 0x80b0
000000000000b948         db         0x5b, 3 dup (0x00)                          ; length 0x5b (end at 0x810b)
000000000000b94c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b94d         db  0x42 ; 'B'
000000000000b94e         db  0x0e ; '.'
000000000000b94f         db  0x10 ; '.'
000000000000b950         db  0x8c ; '.'
000000000000b951         db  0x02 ; '.'
000000000000b952         db  0x41 ; 'A'
000000000000b953         db  0x0e ; '.'
000000000000b954         db  0x18 ; '.'
000000000000b955         db  0x86 ; '.'
000000000000b956         db  0x03 ; '.'
000000000000b957         db  0x44 ; 'D'
000000000000b958         db  0x0e ; '.'
000000000000b959         db  0x20 ; ' '
000000000000b95a         db  0x83 ; '.'
000000000000b95b         db  0x04 ; '.'
000000000000b95c         db  0x79 ; 'y'
000000000000b95d         db  0x0a ; '.'
000000000000b95e         db  0x0e ; '.'
000000000000b95f         db  0x18 ; '.'
000000000000b960         db  0x44 ; 'D'
000000000000b961         db  0x0e ; '.'
000000000000b962         db  0x10 ; '.'
000000000000b963         db  0x42 ; 'B'
000000000000b964         db  0x0e ; '.'
000000000000b965         db  0x08 ; '.'
000000000000b966         db  0x4a ; 'J'
000000000000b967         db  0x0b ; '.'
000000000000b968         db  0x44 ; 'D'
000000000000b969         db  0x0e ; '.'
000000000000b96a         db  0x18 ; '.'
000000000000b96b         db  0x41 ; 'A'
000000000000b96c         db  0x0e ; '.'
000000000000b96d         db  0x10 ; '.'
000000000000b96e         db  0x45 ; 'E'
000000000000b96f         db  0x0e ; '.'
000000000000b970         db  0x08 ; '.'
000000000000b971         db  0x00 ; '.'
000000000000b972         db  0x00 ; '.'
000000000000b973         db  0x00 ; '.'
000000000000b974         dd         0x00000010                                  ; Length of the record
000000000000b978         dd         0x00001210                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b97c         db         0x94, 0xc7, 2 dup (0xff)                    ; begin 0x8110
000000000000b980         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x8151)
000000000000b984         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b985         db  0x7c ; '|'
000000000000b986         db  0x0e ; '.'
000000000000b987         db  0x10 ; '.'
000000000000b988         dd         0x00000030                                  ; Length of the record
000000000000b98c         dd         0x00001224                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b990         db         0xd0, 0xc7, 2 dup (0xff)                    ; begin 0x8160
000000000000b994         db         0x72, 3 dup (0x00)                          ; length 0x72 (end at 0x81d2)
000000000000b998         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b999         db  0x41 ; 'A'
000000000000b99a         db  0x0e ; '.'
000000000000b99b         db  0x10 ; '.'
000000000000b99c         db  0x86 ; '.'
000000000000b99d         db  0x02 ; '.'
000000000000b99e         db  0x41 ; 'A'
000000000000b99f         db  0x0e ; '.'
000000000000b9a0         db  0x18 ; '.'
000000000000b9a1         db  0x83 ; '.'
000000000000b9a2         db  0x03 ; '.'
000000000000b9a3         db  0x4a ; 'J'
000000000000b9a4         db  0x0e ; '.'
000000000000b9a5         db  0x20 ; ' '
000000000000b9a6         db  0x02 ; '.'
000000000000b9a7         db  0x53 ; 'S'
000000000000b9a8         db  0x0a ; '.'
000000000000b9a9         db  0x0e ; '.'
000000000000b9aa         db  0x18 ; '.'
000000000000b9ab         db  0x41 ; 'A'
000000000000b9ac         db  0x0e ; '.'
000000000000b9ad         db  0x10 ; '.'
000000000000b9ae         db  0x41 ; 'A'
000000000000b9af         db  0x0e ; '.'
000000000000b9b0         db  0x08 ; '.'
000000000000b9b1         db  0x47 ; 'G'
000000000000b9b2         db  0x0b ; '.'
000000000000b9b3         db  0x47 ; 'G'
000000000000b9b4         db  0x0e ; '.'
000000000000b9b5         db  0x18 ; '.'
000000000000b9b6         db  0x41 ; 'A'
000000000000b9b7         db  0x0e ; '.'
000000000000b9b8         db  0x10 ; '.'
000000000000b9b9         db  0x41 ; 'A'
000000000000b9ba         db  0x0e ; '.'
000000000000b9bb         db  0x08 ; '.'
000000000000b9bc         dd         0x00000010                                  ; Length of the record
000000000000b9c0         dd         0x00001258                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b9c4         db         0x1c, 0xc8, 2 dup (0xff)                    ; begin 0x81e0
000000000000b9c8         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x8245)
000000000000b9cc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b9cd         align      16
000000000000b9d0         dd         0x00000048                                  ; Length of the record
000000000000b9d4         dd         0x0000126c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000b9d8         db         0x78, 0xc8, 2 dup (0xff)                    ; begin 0x8250
000000000000b9dc         db         0x6a, 3 dup (0x00)                          ; length 0x6a (end at 0x82ba)
000000000000b9e0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000b9e1         db  0x42 ; 'B'
000000000000b9e2         db  0x0e ; '.'
000000000000b9e3         db  0x10 ; '.'
000000000000b9e4         db  0x8f ; '.'
000000000000b9e5         db  0x02 ; '.'
000000000000b9e6         db  0x42 ; 'B'
000000000000b9e7         db  0x0e ; '.'
000000000000b9e8         db  0x18 ; '.'
000000000000b9e9         db  0x8e ; '.'
000000000000b9ea         db  0x03 ; '.'
000000000000b9eb         db  0x42 ; 'B'
000000000000b9ec         db  0x0e ; '.'
000000000000b9ed         db  0x20 ; ' '
000000000000b9ee         db  0x8d ; '.'
000000000000b9ef         db  0x04 ; '.'
000000000000b9f0         db  0x42 ; 'B'
000000000000b9f1         db  0x0e ; '.'
000000000000b9f2         db  0x28 ; '('
000000000000b9f3         db  0x8c ; '.'
000000000000b9f4         db  0x05 ; '.'
000000000000b9f5         db  0x41 ; 'A'
000000000000b9f6         db  0x0e ; '.'
000000000000b9f7         db  0x30 ; '0'
000000000000b9f8         db  0x86 ; '.'
000000000000b9f9         db  0x06 ; '.'
000000000000b9fa         db  0x41 ; 'A'
000000000000b9fb         db  0x0e ; '.'
000000000000b9fc         db  0x38 ; '8'
000000000000b9fd         db  0x83 ; '.'
000000000000b9fe         db  0x07 ; '.'
000000000000b9ff         db  0x44 ; 'D'
000000000000ba00         db  0x0e ; '.'
000000000000ba01         db  0x40 ; '@'
000000000000ba02         db  0x02 ; '.'
000000000000ba03         db  0x4a ; 'J'
000000000000ba04         db  0x0a ; '.'
000000000000ba05         db  0x0e ; '.'
000000000000ba06         db  0x38 ; '8'
000000000000ba07         db  0x44 ; 'D'
000000000000ba08         db  0x0e ; '.'
000000000000ba09         db  0x30 ; '0'
000000000000ba0a         db  0x41 ; 'A'
000000000000ba0b         db  0x0e ; '.'
000000000000ba0c         db  0x28 ; '('
000000000000ba0d         db  0x42 ; 'B'
000000000000ba0e         db  0x0e ; '.'
000000000000ba0f         db  0x20 ; ' '
000000000000ba10         db  0x42 ; 'B'
000000000000ba11         db  0x0e ; '.'
000000000000ba12         db  0x18 ; '.'
000000000000ba13         db  0x42 ; 'B'
000000000000ba14         db  0x0e ; '.'
000000000000ba15         db  0x10 ; '.'
000000000000ba16         db  0x42 ; 'B'
000000000000ba17         db  0x0e ; '.'
000000000000ba18         db  0x08 ; '.'
000000000000ba19         db  0x41 ; 'A'
000000000000ba1a         db  0x0b ; '.'
000000000000ba1b         db  0x00 ; '.'
000000000000ba1c         dd         0x00000010                                  ; Length of the record
000000000000ba20         dd         0x000012b8                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ba24         db         0x9c, 0xc8, 2 dup (0xff)                    ; begin 0x82c0
000000000000ba28         db         0x31, 3 dup (0x00)                          ; length 0x31 (end at 0x82f1)
000000000000ba2c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ba2d         align      16
000000000000ba30         dd         0x00000010                                  ; Length of the record
000000000000ba34         dd         0x000012cc                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ba38         db         2 dup (0xc8), 2 dup (0xff)                  ; begin 0x8300
000000000000ba3c         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x8320)
000000000000ba40         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ba41         align      4
000000000000ba44         dd         0x00000048                                  ; Length of the record
000000000000ba48         dd         0x000012e0                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ba4c         db         0xd4, 0xc8, 2 dup (0xff)                    ; begin 0x8320
000000000000ba50         db         0xb4, 0x01, 2 dup (0x00)                    ; length 0x1b4 (end at 0x84d4)
000000000000ba54         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ba55         db  0x42 ; 'B'
000000000000ba56         db  0x0e ; '.'
000000000000ba57         db  0x10 ; '.'
000000000000ba58         db  0x8f ; '.'
000000000000ba59         db  0x02 ; '.'
000000000000ba5a         db  0x42 ; 'B'
000000000000ba5b         db  0x0e ; '.'
000000000000ba5c         db  0x18 ; '.'
000000000000ba5d         db  0x8e ; '.'
000000000000ba5e         db  0x03 ; '.'
000000000000ba5f         db  0x49 ; 'I'
000000000000ba60         db  0x0e ; '.'
000000000000ba61         db  0x20 ; ' '
000000000000ba62         db  0x8d ; '.'
000000000000ba63         db  0x04 ; '.'
000000000000ba64         db  0x42 ; 'B'
000000000000ba65         db  0x0e ; '.'
000000000000ba66         db  0x28 ; '('
000000000000ba67         db  0x8c ; '.'
000000000000ba68         db  0x05 ; '.'
000000000000ba69         db  0x44 ; 'D'
000000000000ba6a         db  0x0e ; '.'
000000000000ba6b         db  0x30 ; '0'
000000000000ba6c         db  0x86 ; '.'
000000000000ba6d         db  0x06 ; '.'
000000000000ba6e         db  0x41 ; 'A'
000000000000ba6f         db  0x0e ; '.'
000000000000ba70         db  0x38 ; '8'
000000000000ba71         db  0x83 ; '.'
000000000000ba72         db  0x07 ; '.'
000000000000ba73         db  0x52 ; 'R'
000000000000ba74         db  0x0e ; '.'
000000000000ba75         db  0x40 ; '@'
000000000000ba76         db  0x02 ; '.'
000000000000ba77         db  0xd8 ; '.'
000000000000ba78         db  0x0a ; '.'
000000000000ba79         db  0x0e ; '.'
000000000000ba7a         db  0x38 ; '8'
000000000000ba7b         db  0x44 ; 'D'
000000000000ba7c         db  0x0e ; '.'
000000000000ba7d         db  0x30 ; '0'
000000000000ba7e         db  0x41 ; 'A'
000000000000ba7f         db  0x0e ; '.'
000000000000ba80         db  0x28 ; '('
000000000000ba81         db  0x42 ; 'B'
000000000000ba82         db  0x0e ; '.'
000000000000ba83         db  0x20 ; ' '
000000000000ba84         db  0x42 ; 'B'
000000000000ba85         db  0x0e ; '.'
000000000000ba86         db  0x18 ; '.'
000000000000ba87         db  0x42 ; 'B'
000000000000ba88         db  0x0e ; '.'
000000000000ba89         db  0x10 ; '.'
000000000000ba8a         db  0x42 ; 'B'
000000000000ba8b         db  0x0e ; '.'
000000000000ba8c         db  0x08 ; '.'
000000000000ba8d         db  0x45 ; 'E'
000000000000ba8e         db  0x0b ; '.'
000000000000ba8f         db  0x00 ; '.'
000000000000ba90         dd         0x00000028                                  ; Length of the record
000000000000ba94         dd         0x0000132c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000ba98         db         0x48, 0xca, 2 dup (0xff)                    ; begin 0x84e0
000000000000ba9c         db         0x90, 3 dup (0x00)                          ; length 0x90 (end at 0x8570)
000000000000baa0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000baa1         db  0x42 ; 'B'
000000000000baa2         db  0x0e ; '.'
000000000000baa3         db  0x10 ; '.'
000000000000baa4         db  0x8c ; '.'
000000000000baa5         db  0x02 ; '.'
000000000000baa6         db  0x41 ; 'A'
000000000000baa7         db  0x0e ; '.'
000000000000baa8         db  0x18 ; '.'
000000000000baa9         db  0x86 ; '.'
000000000000baaa         db  0x03 ; '.'
000000000000baab         db  0x44 ; 'D'
000000000000baac         db  0x0e ; '.'
000000000000baad         db  0x20 ; ' '
000000000000baae         db  0x83 ; '.'
000000000000baaf         db  0x04 ; '.'
000000000000bab0         db  0x02 ; '.'
000000000000bab1         db  0x85 ; '.'
000000000000bab2         db  0x0e ; '.'
000000000000bab3         db  0x18 ; '.'
000000000000bab4         db  0x41 ; 'A'
000000000000bab5         db  0x0e ; '.'
000000000000bab6         db  0x10 ; '.'
000000000000bab7         db  0x42 ; 'B'
000000000000bab8         db  0x0e ; '.'
000000000000bab9         db  0x08 ; '.'
000000000000baba         db  0x00 ; '.'
000000000000babb         db  0x00 ; '.'
000000000000babc         dd         0x00000028                                  ; Length of the record
000000000000bac0         dd         0x00001358                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000bac4         db         0xac, 0xca, 2 dup (0xff)                    ; begin 0x8570
000000000000bac8         db         0xd6, 3 dup (0x00)                          ; length 0xd6 (end at 0x8646)
000000000000bacc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bacd         db  0x42 ; 'B'
000000000000bace         db  0x0e ; '.'
000000000000bacf         db  0x10 ; '.'
000000000000bad0         db  0x8c ; '.'
000000000000bad1         db  0x02 ; '.'
000000000000bad2         db  0x41 ; 'A'
000000000000bad3         db  0x0e ; '.'
000000000000bad4         db  0x18 ; '.'
000000000000bad5         db  0x86 ; '.'
000000000000bad6         db  0x03 ; '.'
000000000000bad7         db  0x44 ; 'D'
000000000000bad8         db  0x0e ; '.'
000000000000bad9         db  0x20 ; ' '
000000000000bada         db  0x83 ; '.'
000000000000badb         db  0x04 ; '.'
000000000000badc         db  0x02 ; '.'
000000000000badd         db  0xc4 ; '.'
000000000000bade         db  0x0e ; '.'
000000000000badf         db  0x18 ; '.'
000000000000bae0         db  0x44 ; 'D'
000000000000bae1         db  0x0e ; '.'
000000000000bae2         db  0x10 ; '.'
000000000000bae3         db  0x42 ; 'B'
000000000000bae4         db  0x0e ; '.'
000000000000bae5         db  0x08 ; '.'
000000000000bae6         db  0x00 ; '.'
000000000000bae7         db  0x00 ; '.'
000000000000bae8         dd         0x00000034                                  ; Length of the record
000000000000baec         dd         0x00001384                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000baf0         db         0x60, 0xcb, 2 dup (0xff)                    ; begin 0x8650
000000000000baf4         db         0x3e, 0x02, 2 dup (0x00)                    ; length 0x23e (end at 0x888e)
000000000000baf8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000baf9         db  0x42 ; 'B'
000000000000bafa         db  0x0e ; '.'
000000000000bafb         db  0x10 ; '.'
000000000000bafc         db  0x8c ; '.'
000000000000bafd         db  0x02 ; '.'
000000000000bafe         db  0x41 ; 'A'
000000000000baff         db  0x0e ; '.'
000000000000bb00         db  0x18 ; '.'
000000000000bb01         db  0x86 ; '.'
000000000000bb02         db  0x03 ; '.'
000000000000bb03         db  0x44 ; 'D'
000000000000bb04         db  0x0e ; '.'
000000000000bb05         db  0x20 ; ' '
000000000000bb06         db  0x83 ; '.'
000000000000bb07         db  0x04 ; '.'
000000000000bb08         db  0x44 ; 'D'
000000000000bb09         db  0x0e ; '.'
000000000000bb0a         db  0x80 ; '.'
000000000000bb0b         db  0x01 ; '.'
000000000000bb0c         db  0x03 ; '.'
000000000000bb0d         db  0x91 ; '.'
000000000000bb0e         db  0x01 ; '.'
000000000000bb0f         db  0x0a ; '.'
000000000000bb10         db  0x0e ; '.'
000000000000bb11         db  0x20 ; ' '
000000000000bb12         db  0x41 ; 'A'
000000000000bb13         db  0x0e ; '.'
000000000000bb14         db  0x18 ; '.'
000000000000bb15         db  0x41 ; 'A'
000000000000bb16         db  0x0e ; '.'
000000000000bb17         db  0x10 ; '.'
000000000000bb18         db  0x42 ; 'B'
000000000000bb19         db  0x0e ; '.'
000000000000bb1a         db  0x08 ; '.'
000000000000bb1b         db  0x48 ; 'H'
000000000000bb1c         db  0x0b ; '.'
000000000000bb1d         db  0x00 ; '.'
000000000000bb1e         db  0x00 ; '.'
000000000000bb1f         db  0x00 ; '.'
000000000000bb20         dd         0x00000038                                  ; Length of the record
000000000000bb24         dd         0x000013bc                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000bb28         db         0x68, 0xcd, 2 dup (0xff)                    ; begin 0x8890
000000000000bb2c         db         0x84, 0x02, 2 dup (0x00)                    ; length 0x284 (end at 0x8b14)
000000000000bb30         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bb31         db  0x42 ; 'B'
000000000000bb32         db  0x0e ; '.'
000000000000bb33         db  0x10 ; '.'
000000000000bb34         db  0x8d ; '.'
000000000000bb35         db  0x02 ; '.'
000000000000bb36         db  0x42 ; 'B'
000000000000bb37         db  0x0e ; '.'
000000000000bb38         db  0x18 ; '.'
000000000000bb39         db  0x8c ; '.'
000000000000bb3a         db  0x03 ; '.'
000000000000bb3b         db  0x41 ; 'A'
000000000000bb3c         db  0x0e ; '.'
000000000000bb3d         db  0x20 ; ' '
000000000000bb3e         db  0x86 ; '.'
000000000000bb3f         db  0x04 ; '.'
000000000000bb40         db  0x41 ; 'A'
000000000000bb41         db  0x0e ; '.'
000000000000bb42         db  0x28 ; '('
000000000000bb43         db  0x83 ; '.'
000000000000bb44         db  0x05 ; '.'
000000000000bb45         db  0x44 ; 'D'
000000000000bb46         db  0x0e ; '.'
000000000000bb47         db  0x40 ; '@'
000000000000bb48         db  0x02 ; '.'
000000000000bb49         db  0x5a ; 'Z'
000000000000bb4a         db  0x0a ; '.'
000000000000bb4b         db  0x0e ; '.'
000000000000bb4c         db  0x28 ; '('
000000000000bb4d         db  0x41 ; 'A'
000000000000bb4e         db  0x0e ; '.'
000000000000bb4f         db  0x20 ; ' '
000000000000bb50         db  0x41 ; 'A'
000000000000bb51         db  0x0e ; '.'
000000000000bb52         db  0x18 ; '.'
000000000000bb53         db  0x42 ; 'B'
000000000000bb54         db  0x0e ; '.'
000000000000bb55         db  0x10 ; '.'
000000000000bb56         db  0x42 ; 'B'
000000000000bb57         db  0x0e ; '.'
000000000000bb58         db  0x08 ; '.'
000000000000bb59         db  0x46 ; 'F'
000000000000bb5a         db  0x0b ; '.'
000000000000bb5b         db  0x00 ; '.'
000000000000bb5c         dd         0x00000020                                  ; Length of the record
000000000000bb60         dd         0x000013f8                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000bb64         db         0xbc, 0xcf, 2 dup (0xff)                    ; begin 0x8b20
000000000000bb68         db         0x59, 3 dup (0x00)                          ; length 0x59 (end at 0x8b79)
000000000000bb6c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bb6d         db  0x41 ; 'A'
000000000000bb6e         db  0x0e ; '.'
000000000000bb6f         db  0x10 ; '.'
000000000000bb70         db  0x83 ; '.'
000000000000bb71         db  0x02 ; '.'
000000000000bb72         db  0x47 ; 'G'
000000000000bb73         db  0x0e ; '.'
000000000000bb74         db  0x20 ; ' '
000000000000bb75         db  0x7c ; '|'
000000000000bb76         db  0x0a ; '.'
000000000000bb77         db  0x0e ; '.'
000000000000bb78         db  0x10 ; '.'
000000000000bb79         db  0x41 ; 'A'
000000000000bb7a         db  0x0e ; '.'
000000000000bb7b         db  0x08 ; '.'
000000000000bb7c         db  0x4b ; 'K'
000000000000bb7d         db  0x0b ; '.'
000000000000bb7e         db  0x00 ; '.'
000000000000bb7f         db  0x00 ; '.'
000000000000bb80         dd         0x00000034                                  ; Length of the record
000000000000bb84         dd         0x0000141c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000bb88         db         0xf8, 0xcf, 2 dup (0xff)                    ; begin 0x8b80
000000000000bb8c         db         0x03, 0x02, 2 dup (0x00)                    ; length 0x203 (end at 0x8d83)
000000000000bb90         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bb91         db  0x42 ; 'B'
000000000000bb92         db  0x0e ; '.'
000000000000bb93         db  0x10 ; '.'
000000000000bb94         db  0x8c ; '.'
000000000000bb95         db  0x02 ; '.'
000000000000bb96         db  0x41 ; 'A'
000000000000bb97         db  0x0e ; '.'
000000000000bb98         db  0x18 ; '.'
000000000000bb99         db  0x86 ; '.'
000000000000bb9a         db  0x03 ; '.'
000000000000bb9b         db  0x46 ; 'F'
000000000000bb9c         db  0x0e ; '.'
000000000000bb9d         db  0x20 ; ' '
000000000000bb9e         db  0x83 ; '.'
000000000000bb9f         db  0x04 ; '.'
000000000000bba0         db  0x47 ; 'G'
000000000000bba1         db  0x0e ; '.'
000000000000bba2         db  0x30 ; '0'
000000000000bba3         db  0x02 ; '.'
000000000000bba4         db  0x4a ; 'J'
000000000000bba5         db  0x0a ; '.'
000000000000bba6         db  0x0e ; '.'
000000000000bba7         db  0x20 ; ' '
000000000000bba8         db  0x41 ; 'A'
000000000000bba9         db  0x0e ; '.'
000000000000bbaa         db  0x18 ; '.'
000000000000bbab         db  0x41 ; 'A'
000000000000bbac         db  0x0e ; '.'
000000000000bbad         db  0x10 ; '.'
000000000000bbae         db  0x42 ; 'B'
000000000000bbaf         db  0x0e ; '.'
000000000000bbb0         db  0x08 ; '.'
000000000000bbb1         db  0x42 ; 'B'
000000000000bbb2         db  0x0b ; '.'
000000000000bbb3         db  0x00 ; '.'
000000000000bbb4         db  0x00 ; '.'
000000000000bbb5         db  0x00 ; '.'
000000000000bbb6         db  0x00 ; '.'
000000000000bbb7         db  0x00 ; '.'
000000000000bbb8         dd         0x0000001c                                  ; Length of the record
000000000000bbbc         dd         0x00001454                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000bbc0         db         0xd0, 0xd1, 2 dup (0xff)                    ; begin 0x8d90
000000000000bbc4         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x8dcc)
000000000000bbc8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bbc9         db  0x44 ; 'D'
000000000000bbca         db  0x0e ; '.'
000000000000bbcb         db  0x10 ; '.'
000000000000bbcc         db  0x61 ; 'a'
000000000000bbcd         db  0x0a ; '.'
000000000000bbce         db  0x0e ; '.'
000000000000bbcf         db  0x08 ; '.'
000000000000bbd0         db  0x4b ; 'K'
000000000000bbd1         db  0x0b ; '.'
000000000000bbd2         db  0x4b ; 'K'
000000000000bbd3         db  0x0e ; '.'
000000000000bbd4         db  0x08 ; '.'
000000000000bbd5         db  0x00 ; '.'
000000000000bbd6         db  0x00 ; '.'
000000000000bbd7         db  0x00 ; '.'
000000000000bbd8         dd         0x00000014                                  ; Length of the record
000000000000bbdc         dd         0x00001474                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000bbe0         db         0xf0, 0xd1, 2 dup (0xff)                    ; begin 0x8dd0
000000000000bbe4         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x8dde)
000000000000bbe8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bbe9         align      16
000000000000bbf0         dd         0x00000034                                  ; Length of the record
000000000000bbf4         dd         0x0000148c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000bbf8         db         0xe8, 0xd1, 2 dup (0xff)                    ; begin 0x8de0
000000000000bbfc         db         0x7e, 0x02, 2 dup (0x00)                    ; length 0x27e (end at 0x905e)
000000000000bc00         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bc01         db  0x42 ; 'B'
000000000000bc02         db  0x0e ; '.'
000000000000bc03         db  0x10 ; '.'
000000000000bc04         db  0x8c ; '.'
000000000000bc05         db  0x02 ; '.'
000000000000bc06         db  0x41 ; 'A'
000000000000bc07         db  0x0e ; '.'
000000000000bc08         db  0x18 ; '.'
000000000000bc09         db  0x86 ; '.'
000000000000bc0a         db  0x03 ; '.'
000000000000bc0b         db  0x43 ; 'C'
000000000000bc0c         db  0x0e ; '.'
000000000000bc0d         db  0x20 ; ' '
000000000000bc0e         db  0x83 ; '.'
000000000000bc0f         db  0x04 ; '.'
000000000000bc10         db  0x44 ; 'D'
000000000000bc11         db  0x0e ; '.'
000000000000bc12         db  0x70 ; 'p'
000000000000bc13         db  0x02 ; '.'
000000000000bc14         db  0xf0 ; '.'
000000000000bc15         db  0x0a ; '.'
000000000000bc16         db  0x0e ; '.'
000000000000bc17         db  0x20 ; ' '
000000000000bc18         db  0x41 ; 'A'
000000000000bc19         db  0x0e ; '.'
000000000000bc1a         db  0x18 ; '.'
000000000000bc1b         db  0x41 ; 'A'
000000000000bc1c         db  0x0e ; '.'
000000000000bc1d         db  0x10 ; '.'
000000000000bc1e         db  0x42 ; 'B'
000000000000bc1f         db  0x0e ; '.'
000000000000bc20         db  0x08 ; '.'
000000000000bc21         db  0x42 ; 'B'
000000000000bc22         db  0x0b ; '.'
000000000000bc23         db  0x00 ; '.'
000000000000bc24         db  0x00 ; '.'
000000000000bc25         db  0x00 ; '.'
000000000000bc26         db  0x00 ; '.'
000000000000bc27         db  0x00 ; '.'
000000000000bc28         dd         0x00000044                                  ; Length of the record
000000000000bc2c         dd         0x000014c4                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000bc30         db         0x30, 0xd4, 2 dup (0xff)                    ; begin 0x9060
000000000000bc34         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x90c5)
000000000000bc38         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bc39         db  0x42 ; 'B'
000000000000bc3a         db  0x0e ; '.'
000000000000bc3b         db  0x10 ; '.'
000000000000bc3c         db  0x8f ; '.'
000000000000bc3d         db  0x02 ; '.'
000000000000bc3e         db  0x42 ; 'B'
000000000000bc3f         db  0x0e ; '.'
000000000000bc40         db  0x18 ; '.'
000000000000bc41         db  0x8e ; '.'
000000000000bc42         db  0x03 ; '.'
000000000000bc43         db  0x45 ; 'E'
000000000000bc44         db  0x0e ; '.'
000000000000bc45         db  0x20 ; ' '
000000000000bc46         db  0x8d ; '.'
000000000000bc47         db  0x04 ; '.'
000000000000bc48         db  0x42 ; 'B'
000000000000bc49         db  0x0e ; '.'
000000000000bc4a         db  0x28 ; '('
000000000000bc4b         db  0x8c ; '.'
000000000000bc4c         db  0x05 ; '.'
000000000000bc4d         db  0x48 ; 'H'
000000000000bc4e         db  0x0e ; '.'
000000000000bc4f         db  0x30 ; '0'
000000000000bc50         db  0x86 ; '.'
000000000000bc51         db  0x06 ; '.'
000000000000bc52         db  0x48 ; 'H'
000000000000bc53         db  0x0e ; '.'
000000000000bc54         db  0x38 ; '8'
000000000000bc55         db  0x83 ; '.'
000000000000bc56         db  0x07 ; '.'
000000000000bc57         db  0x4d ; 'M'
000000000000bc58         db  0x0e ; '.'
000000000000bc59         db  0x40 ; '@'
000000000000bc5a         db  0x72 ; 'r'
000000000000bc5b         db  0x0e ; '.'
000000000000bc5c         db  0x38 ; '8'
000000000000bc5d         db  0x41 ; 'A'
000000000000bc5e         db  0x0e ; '.'
000000000000bc5f         db  0x30 ; '0'
000000000000bc60         db  0x41 ; 'A'
000000000000bc61         db  0x0e ; '.'
000000000000bc62         db  0x28 ; '('
000000000000bc63         db  0x42 ; 'B'
000000000000bc64         db  0x0e ; '.'
000000000000bc65         db  0x20 ; ' '
000000000000bc66         db  0x42 ; 'B'
000000000000bc67         db  0x0e ; '.'
000000000000bc68         db  0x18 ; '.'
000000000000bc69         db  0x42 ; 'B'
000000000000bc6a         db  0x0e ; '.'
000000000000bc6b         db  0x10 ; '.'
000000000000bc6c         db  0x42 ; 'B'
000000000000bc6d         db  0x0e ; '.'
000000000000bc6e         db  0x08 ; '.'
000000000000bc6f         db  0x00 ; '.'
000000000000bc70         dd         0x00000014                                  ; Length of the record
000000000000bc74         dd         0x0000150c                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000bc78         db         0x58, 0xd4, 2 dup (0xff)                    ; begin 0x90d0
000000000000bc7c         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x90d2)
000000000000bc80         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bc81         align      8
000000000000bc88         dd         0x00000010                                  ; Length of the record
000000000000bc8c         dd         0x00001524                                  ; FDE: parent CIE at 0xa768 (FDE encoding = 0x1B)
000000000000bc90         db         0x50, 0xd4, 2 dup (0xff)                    ; begin 0x90e0
000000000000bc94         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x90ee)
000000000000bc98         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000bc99         align      32


        ; Segment Segment 3
        ; Range: [0x20c9f0; 0x20d240[ (2128 bytes)
        ; File offset : [51696; 53376[ (1680 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x20c9f0; 0x20c9f8[ (8 bytes)
        ; File offset : [51696; 51704[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
000000000020c9f0         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x20c9f8; 0x20ca00[ (8 bytes)
        ; File offset : [51704; 51712[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
000000000020c9f8         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x20ca00; 0x20cb98[ (408 bytes)
        ; File offset : [51712; 52120[ (408 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     long_opts:
000000000020ca00         db  0x77 ; 'w'                                         ; DATA XREF=main+168
000000000020ca01         db  0x92 ; '.'
000000000020ca02         db  0x00 ; '.'
000000000020ca03         db  0x00 ; '.'
000000000020ca04         db  0x00 ; '.'
000000000020ca05         db  0x00 ; '.'
000000000020ca06         db  0x00 ; '.'
000000000020ca07         db  0x00 ; '.'
000000000020ca08         db  0x00 ; '.'
000000000020ca09         db  0x00 ; '.'
000000000020ca0a         db  0x00 ; '.'
000000000020ca0b         db  0x00 ; '.'
000000000020ca0c         db  0x00 ; '.'
000000000020ca0d         db  0x00 ; '.'
000000000020ca0e         db  0x00 ; '.'
000000000020ca0f         db  0x00 ; '.'
000000000020ca10         db  0x00 ; '.'
000000000020ca11         db  0x00 ; '.'
000000000020ca12         db  0x00 ; '.'
000000000020ca13         db  0x00 ; '.'
000000000020ca14         db  0x00 ; '.'
000000000020ca15         db  0x00 ; '.'
000000000020ca16         db  0x00 ; '.'
000000000020ca17         db  0x00 ; '.'
000000000020ca18         db  0x65 ; 'e'
000000000020ca19         db  0x00 ; '.'
000000000020ca1a         db  0x00 ; '.'
000000000020ca1b         db  0x00 ; '.'
000000000020ca1c         db  0x00 ; '.'
000000000020ca1d         db  0x00 ; '.'
000000000020ca1e         db  0x00 ; '.'
000000000020ca1f         db  0x00 ; '.'
000000000020ca20         db  0x7c ; '|'
000000000020ca21         db  0x92 ; '.'
000000000020ca22         db  0x00 ; '.'
000000000020ca23         db  0x00 ; '.'
000000000020ca24         db  0x00 ; '.'
000000000020ca25         db  0x00 ; '.'
000000000020ca26         db  0x00 ; '.'
000000000020ca27         db  0x00 ; '.'
000000000020ca28         db  0x01 ; '.'
000000000020ca29         db  0x00 ; '.'
000000000020ca2a         db  0x00 ; '.'
000000000020ca2b         db  0x00 ; '.'
000000000020ca2c         db  0x00 ; '.'
000000000020ca2d         db  0x00 ; '.'
000000000020ca2e         db  0x00 ; '.'
000000000020ca2f         db  0x00 ; '.'
000000000020ca30         db  0x00 ; '.'
000000000020ca31         db  0x00 ; '.'
000000000020ca32         db  0x00 ; '.'
000000000020ca33         db  0x00 ; '.'
000000000020ca34         db  0x00 ; '.'
000000000020ca35         db  0x00 ; '.'
000000000020ca36         db  0x00 ; '.'
000000000020ca37         db  0x00 ; '.'
000000000020ca38         db  0x69 ; 'i'
000000000020ca39         db  0x00 ; '.'
000000000020ca3a         db  0x00 ; '.'
000000000020ca3b         db  0x00 ; '.'
000000000020ca3c         db  0x00 ; '.'
000000000020ca3d         db  0x00 ; '.'
000000000020ca3e         db  0x00 ; '.'
000000000020ca3f         db  0x00 ; '.'
000000000020ca40         db  0x88 ; '.'
000000000020ca41         db  0x92 ; '.'
000000000020ca42         db  0x00 ; '.'
000000000020ca43         db  0x00 ; '.'
000000000020ca44         db  0x00 ; '.'
000000000020ca45         db  0x00 ; '.'
000000000020ca46         db  0x00 ; '.'
000000000020ca47         db  0x00 ; '.'
000000000020ca48         db  0x01 ; '.'
000000000020ca49         db  0x00 ; '.'
000000000020ca4a         db  0x00 ; '.'
000000000020ca4b         db  0x00 ; '.'
000000000020ca4c         db  0x00 ; '.'
000000000020ca4d         db  0x00 ; '.'
000000000020ca4e         db  0x00 ; '.'
000000000020ca4f         db  0x00 ; '.'
000000000020ca50         db  0x00 ; '.'
000000000020ca51         db  0x00 ; '.'
000000000020ca52         db  0x00 ; '.'
000000000020ca53         db  0x00 ; '.'
000000000020ca54         db  0x00 ; '.'
000000000020ca55         db  0x00 ; '.'
000000000020ca56         db  0x00 ; '.'
000000000020ca57         db  0x00 ; '.'
000000000020ca58         db  0x6e ; 'n'
000000000020ca59         db  0x00 ; '.'
000000000020ca5a         db  0x00 ; '.'
000000000020ca5b         db  0x00 ; '.'
000000000020ca5c         db  0x00 ; '.'
000000000020ca5d         db  0x00 ; '.'
000000000020ca5e         db  0x00 ; '.'
000000000020ca5f         db  0x00 ; '.'
000000000020ca60         db  0x93 ; '.'
000000000020ca61         db  0x92 ; '.'
000000000020ca62         db  0x00 ; '.'
000000000020ca63         db  0x00 ; '.'
000000000020ca64         db  0x00 ; '.'
000000000020ca65         db  0x00 ; '.'
000000000020ca66         db  0x00 ; '.'
000000000020ca67         db  0x00 ; '.'
000000000020ca68         db  0x01 ; '.'
000000000020ca69         db  0x00 ; '.'
000000000020ca6a         db  0x00 ; '.'
000000000020ca6b         db  0x00 ; '.'
000000000020ca6c         db  0x00 ; '.'
000000000020ca6d         db  0x00 ; '.'
000000000020ca6e         db  0x00 ; '.'
000000000020ca6f         db  0x00 ; '.'
000000000020ca70         db  0x00 ; '.'
000000000020ca71         db  0x00 ; '.'
000000000020ca72         db  0x00 ; '.'
000000000020ca73         db  0x00 ; '.'
000000000020ca74         db  0x00 ; '.'
000000000020ca75         db  0x00 ; '.'
000000000020ca76         db  0x00 ; '.'
000000000020ca77         db  0x00 ; '.'
000000000020ca78         db  0x6f ; 'o'
000000000020ca79         db  0x00 ; '.'
000000000020ca7a         db  0x00 ; '.'
000000000020ca7b         db  0x00 ; '.'
000000000020ca7c         db  0x00 ; '.'
000000000020ca7d         db  0x00 ; '.'
000000000020ca7e         db  0x00 ; '.'
000000000020ca7f         db  0x00 ; '.'
000000000020ca80         db  0x9a ; '.'
000000000020ca81         db  0x92 ; '.'
000000000020ca82         db  0x00 ; '.'
000000000020ca83         db  0x00 ; '.'
000000000020ca84         db  0x00 ; '.'
000000000020ca85         db  0x00 ; '.'
000000000020ca86         db  0x00 ; '.'
000000000020ca87         db  0x00 ; '.'
000000000020ca88         db  0x01 ; '.'
000000000020ca89         db  0x00 ; '.'
000000000020ca8a         db  0x00 ; '.'
000000000020ca8b         db  0x00 ; '.'
000000000020ca8c         db  0x00 ; '.'
000000000020ca8d         db  0x00 ; '.'
000000000020ca8e         db  0x00 ; '.'
000000000020ca8f         db  0x00 ; '.'
000000000020ca90         db  0x00 ; '.'
000000000020ca91         db  0x00 ; '.'
000000000020ca92         db  0x00 ; '.'
000000000020ca93         db  0x00 ; '.'
000000000020ca94         db  0x00 ; '.'
000000000020ca95         db  0x00 ; '.'
000000000020ca96         db  0x00 ; '.'
000000000020ca97         db  0x00 ; '.'
000000000020ca98         db  0x80 ; '.'
000000000020ca99         db  0x00 ; '.'
000000000020ca9a         db  0x00 ; '.'
000000000020ca9b         db  0x00 ; '.'
000000000020ca9c         db  0x00 ; '.'
000000000020ca9d         db  0x00 ; '.'
000000000020ca9e         db  0x00 ; '.'
000000000020ca9f         db  0x00 ; '.'
000000000020caa0         db  0x5c ; '\'
000000000020caa1         db  0x92 ; '.'
000000000020caa2         db  0x00 ; '.'
000000000020caa3         db  0x00 ; '.'
000000000020caa4         db  0x00 ; '.'
000000000020caa5         db  0x00 ; '.'
000000000020caa6         db  0x00 ; '.'
000000000020caa7         db  0x00 ; '.'
000000000020caa8         db  0x00 ; '.'
000000000020caa9         db  0x00 ; '.'
000000000020caaa         db  0x00 ; '.'
000000000020caab         db  0x00 ; '.'
000000000020caac         db  0x00 ; '.'
000000000020caad         db  0x00 ; '.'
000000000020caae         db  0x00 ; '.'
000000000020caaf         db  0x00 ; '.'
000000000020cab0         db  0x00 ; '.'
000000000020cab1         db  0x00 ; '.'
000000000020cab2         db  0x00 ; '.'
000000000020cab3         db  0x00 ; '.'
000000000020cab4         db  0x00 ; '.'
000000000020cab5         db  0x00 ; '.'
000000000020cab6         db  0x00 ; '.'
000000000020cab7         db  0x00 ; '.'
000000000020cab8         db  0x72 ; 'r'
000000000020cab9         db  0x00 ; '.'
000000000020caba         db  0x00 ; '.'
000000000020cabb         db  0x00 ; '.'
000000000020cabc         db  0x00 ; '.'
000000000020cabd         db  0x00 ; '.'
000000000020cabe         db  0x00 ; '.'
000000000020cabf         db  0x00 ; '.'
000000000020cac0         db  0xa8 ; '.'
000000000020cac1         db  0x92 ; '.'
000000000020cac2         db  0x00 ; '.'
000000000020cac3         db  0x00 ; '.'
000000000020cac4         db  0x00 ; '.'
000000000020cac5         db  0x00 ; '.'
000000000020cac6         db  0x00 ; '.'
000000000020cac7         db  0x00 ; '.'
000000000020cac8         db  0x00 ; '.'
000000000020cac9         db  0x00 ; '.'
000000000020caca         db  0x00 ; '.'
000000000020cacb         db  0x00 ; '.'
000000000020cacc         db  0x00 ; '.'
000000000020cacd         db  0x00 ; '.'
000000000020cace         db  0x00 ; '.'
000000000020cacf         db  0x00 ; '.'
000000000020cad0         db  0x00 ; '.'
000000000020cad1         db  0x00 ; '.'
000000000020cad2         db  0x00 ; '.'
000000000020cad3         db  0x00 ; '.'
000000000020cad4         db  0x00 ; '.'
000000000020cad5         db  0x00 ; '.'
000000000020cad6         db  0x00 ; '.'
000000000020cad7         db  0x00 ; '.'
000000000020cad8         db  0x7a ; 'z'
000000000020cad9         db  0x00 ; '.'
000000000020cada         db  0x00 ; '.'
000000000020cadb         db  0x00 ; '.'
000000000020cadc         db  0x00 ; '.'
000000000020cadd         db  0x00 ; '.'
000000000020cade         db  0x00 ; '.'
000000000020cadf         db  0x00 ; '.'
000000000020cae0         db  0xb8 ; '.'
000000000020cae1         db  0x92 ; '.'
000000000020cae2         db  0x00 ; '.'
000000000020cae3         db  0x00 ; '.'
000000000020cae4         db  0x00 ; '.'
000000000020cae5         db  0x00 ; '.'
000000000020cae6         db  0x00 ; '.'
000000000020cae7         db  0x00 ; '.'
000000000020cae8         db  0x00 ; '.'
000000000020cae9         db  0x00 ; '.'
000000000020caea         db  0x00 ; '.'
000000000020caeb         db  0x00 ; '.'
000000000020caec         db  0x00 ; '.'
000000000020caed         db  0x00 ; '.'
000000000020caee         db  0x00 ; '.'
000000000020caef         db  0x00 ; '.'
000000000020caf0         db  0x00 ; '.'
000000000020caf1         db  0x00 ; '.'
000000000020caf2         db  0x00 ; '.'
000000000020caf3         db  0x00 ; '.'
000000000020caf4         db  0x00 ; '.'
000000000020caf5         db  0x00 ; '.'
000000000020caf6         db  0x00 ; '.'
000000000020caf7         db  0x00 ; '.'
000000000020caf8         db  0x7e ; '~'
000000000020caf9         db  0xff ; '.'
000000000020cafa         db  0xff ; '.'
000000000020cafb         db  0xff ; '.'
000000000020cafc         db  0x00 ; '.'
000000000020cafd         db  0x00 ; '.'
000000000020cafe         db  0x00 ; '.'
000000000020caff         db  0x00 ; '.'
000000000020cb00         db  0xbd ; '.'
000000000020cb01         db  0x92 ; '.'
000000000020cb02         db  0x00 ; '.'
000000000020cb03         db  0x00 ; '.'
000000000020cb04         db  0x00 ; '.'
000000000020cb05         db  0x00 ; '.'
000000000020cb06         db  0x00 ; '.'
000000000020cb07         db  0x00 ; '.'
000000000020cb08         db  0x00 ; '.'
000000000020cb09         db  0x00 ; '.'
000000000020cb0a         db  0x00 ; '.'
000000000020cb0b         db  0x00 ; '.'
000000000020cb0c         db  0x00 ; '.'
000000000020cb0d         db  0x00 ; '.'
000000000020cb0e         db  0x00 ; '.'
000000000020cb0f         db  0x00 ; '.'
000000000020cb10         db  0x00 ; '.'
000000000020cb11         db  0x00 ; '.'
000000000020cb12         db  0x00 ; '.'
000000000020cb13         db  0x00 ; '.'
000000000020cb14         db  0x00 ; '.'
000000000020cb15         db  0x00 ; '.'
000000000020cb16         db  0x00 ; '.'
000000000020cb17         db  0x00 ; '.'
000000000020cb18         db  0x7d ; '}'
000000000020cb19         db  0xff ; '.'
000000000020cb1a         db  0xff ; '.'
000000000020cb1b         db  0xff ; '.'
000000000020cb1c         db  0x00 ; '.'
000000000020cb1d         db  0x00 ; '.'
000000000020cb1e         db  0x00 ; '.'
000000000020cb1f         db  0x00 ; '.'
000000000020cb20         db  0x00 ; '.'
000000000020cb21         db  0x00 ; '.'
000000000020cb22         db  0x00 ; '.'
000000000020cb23         db  0x00 ; '.'
000000000020cb24         db  0x00 ; '.'
000000000020cb25         db  0x00 ; '.'
000000000020cb26         db  0x00 ; '.'
000000000020cb27         db  0x00 ; '.'
000000000020cb28         db  0x00 ; '.'
000000000020cb29         db  0x00 ; '.'
000000000020cb2a         db  0x00 ; '.'
000000000020cb2b         db  0x00 ; '.'
000000000020cb2c         db  0x00 ; '.'
000000000020cb2d         db  0x00 ; '.'
000000000020cb2e         db  0x00 ; '.'
000000000020cb2f         db  0x00 ; '.'
000000000020cb30         db  0x00 ; '.'
000000000020cb31         db  0x00 ; '.'
000000000020cb32         db  0x00 ; '.'
000000000020cb33         db  0x00 ; '.'
000000000020cb34         db  0x00 ; '.'
000000000020cb35         db  0x00 ; '.'
000000000020cb36         db  0x00 ; '.'
000000000020cb37         db  0x00 ; '.'
000000000020cb38         db  0x00 ; '.'
000000000020cb39         db  0x00 ; '.'
000000000020cb3a         db  0x00 ; '.'
000000000020cb3b         db  0x00 ; '.'
000000000020cb3c         db  0x00 ; '.'
000000000020cb3d         db  0x00 ; '.'
000000000020cb3e         db  0x00 ; '.'
000000000020cb3f         db  0x00 ; '.'
                     quoting_style_args:
000000000020cb40         db  0xc1 ; '.'
000000000020cb41         db  0x97 ; '.'
000000000020cb42         db  0x00 ; '.'
000000000020cb43         db  0x00 ; '.'
000000000020cb44         db  0x00 ; '.'
000000000020cb45         db  0x00 ; '.'
000000000020cb46         db  0x00 ; '.'
000000000020cb47         db  0x00 ; '.'
000000000020cb48         db  0xc9 ; '.'
000000000020cb49         db  0x97 ; '.'
000000000020cb4a         db  0x00 ; '.'
000000000020cb4b         db  0x00 ; '.'
000000000020cb4c         db  0x00 ; '.'
000000000020cb4d         db  0x00 ; '.'
000000000020cb4e         db  0x00 ; '.'
000000000020cb4f         db  0x00 ; '.'
000000000020cb50         db  0xcf ; '.'
000000000020cb51         db  0x97 ; '.'
000000000020cb52         db  0x00 ; '.'
000000000020cb53         db  0x00 ; '.'
000000000020cb54         db  0x00 ; '.'
000000000020cb55         db  0x00 ; '.'
000000000020cb56         db  0x00 ; '.'
000000000020cb57         db  0x00 ; '.'
000000000020cb58         db  0xdc ; '.'
000000000020cb59         db  0x97 ; '.'
000000000020cb5a         db  0x00 ; '.'
000000000020cb5b         db  0x00 ; '.'
000000000020cb5c         db  0x00 ; '.'
000000000020cb5d         db  0x00 ; '.'
000000000020cb5e         db  0x00 ; '.'
000000000020cb5f         db  0x00 ; '.'
000000000020cb60         db  0xe9 ; '.'
000000000020cb61         db  0x97 ; '.'
000000000020cb62         db  0x00 ; '.'
000000000020cb63         db  0x00 ; '.'
000000000020cb64         db  0x00 ; '.'
000000000020cb65         db  0x00 ; '.'
000000000020cb66         db  0x00 ; '.'
000000000020cb67         db  0x00 ; '.'
000000000020cb68         db  0x67 ; 'g'
000000000020cb69         db  0x92 ; '.'
000000000020cb6a         db  0x00 ; '.'
000000000020cb6b         db  0x00 ; '.'
000000000020cb6c         db  0x00 ; '.'
000000000020cb6d         db  0x00 ; '.'
000000000020cb6e         db  0x00 ; '.'
000000000020cb6f         db  0x00 ; '.'
000000000020cb70         db  0xfd ; '.'
000000000020cb71         db  0x97 ; '.'
000000000020cb72         db  0x00 ; '.'
000000000020cb73         db  0x00 ; '.'
000000000020cb74         db  0x00 ; '.'
000000000020cb75         db  0x00 ; '.'
000000000020cb76         db  0x00 ; '.'
000000000020cb77         db  0x00 ; '.'
000000000020cb78         db  0xe2 ; '.'
000000000020cb79         db  0x97 ; '.'
000000000020cb7a         db  0x00 ; '.'
000000000020cb7b         db  0x00 ; '.'
000000000020cb7c         db  0x00 ; '.'
000000000020cb7d         db  0x00 ; '.'
000000000020cb7e         db  0x00 ; '.'
000000000020cb7f         db  0x00 ; '.'
000000000020cb80         db  0xbd ; '.'
000000000020cb81         db  0x91 ; '.'
000000000020cb82         db  0x00 ; '.'
000000000020cb83         db  0x00 ; '.'
000000000020cb84         db  0x00 ; '.'
000000000020cb85         db  0x00 ; '.'
000000000020cb86         db  0x00 ; '.'
000000000020cb87         db  0x00 ; '.'
000000000020cb88         db  0x05 ; '.'
000000000020cb89         db  0x98 ; '.'
000000000020cb8a         db  0x00 ; '.'
000000000020cb8b         db  0x00 ; '.'
000000000020cb8c         db  0x00 ; '.'
000000000020cb8d         db  0x00 ; '.'
000000000020cb8e         db  0x00 ; '.'
000000000020cb8f         db  0x00 ; '.'
000000000020cb90         db  0x00 ; '.'
000000000020cb91         db  0x00 ; '.'
000000000020cb92         db  0x00 ; '.'
000000000020cb93         db  0x00 ; '.'
000000000020cb94         db  0x00 ; '.'
000000000020cb95         db  0x00 ; '.'
000000000020cb96         db  0x00 ; '.'
000000000020cb97         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x20cb98; 0x20cd88[ (496 bytes)
        ; File offset : [52120; 52616[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
000000000020cb98         db  0x01 ; '.'
000000000020cb99         db  0x00 ; '.'
000000000020cb9a         db  0x00 ; '.'
000000000020cb9b         db  0x00 ; '.'
000000000020cb9c         db  0x00 ; '.'
000000000020cb9d         db  0x00 ; '.'
000000000020cb9e         db  0x00 ; '.'
000000000020cb9f         db  0x00 ; '.'
000000000020cba0         db  0x01 ; '.'
000000000020cba1         db  0x00 ; '.'
000000000020cba2         db  0x00 ; '.'
000000000020cba3         db  0x00 ; '.'
000000000020cba4         db  0x00 ; '.'
000000000020cba5         db  0x00 ; '.'
000000000020cba6         db  0x00 ; '.'
000000000020cba7         db  0x00 ; '.'
000000000020cba8         db  0x0c ; '.'
000000000020cba9         db  0x00 ; '.'
000000000020cbaa         db  0x00 ; '.'
000000000020cbab         db  0x00 ; '.'
000000000020cbac         db  0x00 ; '.'
000000000020cbad         db  0x00 ; '.'
000000000020cbae         db  0x00 ; '.'
000000000020cbaf         db  0x00 ; '.'
000000000020cbb0         db  0x60 ; '`'
000000000020cbb1         db  0x19 ; '.'
000000000020cbb2         db  0x00 ; '.'
000000000020cbb3         db  0x00 ; '.'
000000000020cbb4         db  0x00 ; '.'
000000000020cbb5         db  0x00 ; '.'
000000000020cbb6         db  0x00 ; '.'
000000000020cbb7         db  0x00 ; '.'
000000000020cbb8         db  0x0d ; '.'
000000000020cbb9         db  0x00 ; '.'
000000000020cbba         db  0x00 ; '.'
000000000020cbbb         db  0x00 ; '.'
000000000020cbbc         db  0x00 ; '.'
000000000020cbbd         db  0x00 ; '.'
000000000020cbbe         db  0x00 ; '.'
000000000020cbbf         db  0x00 ; '.'
000000000020cbc0         db  0xf0 ; '.'
000000000020cbc1         db  0x90 ; '.'
000000000020cbc2         db  0x00 ; '.'
000000000020cbc3         db  0x00 ; '.'
000000000020cbc4         db  0x00 ; '.'
000000000020cbc5         db  0x00 ; '.'
000000000020cbc6         db  0x00 ; '.'
000000000020cbc7         db  0x00 ; '.'
000000000020cbc8         db  0x19 ; '.'
000000000020cbc9         db  0x00 ; '.'
000000000020cbca         db  0x00 ; '.'
000000000020cbcb         db  0x00 ; '.'
000000000020cbcc         db  0x00 ; '.'
000000000020cbcd         db  0x00 ; '.'
000000000020cbce         db  0x00 ; '.'
000000000020cbcf         db  0x00 ; '.'
000000000020cbd0         db  0xf0 ; '.'
000000000020cbd1         db  0xc9 ; '.'
000000000020cbd2         db  0x20 ; ' '
000000000020cbd3         db  0x00 ; '.'
000000000020cbd4         db  0x00 ; '.'
000000000020cbd5         db  0x00 ; '.'
000000000020cbd6         db  0x00 ; '.'
000000000020cbd7         db  0x00 ; '.'
000000000020cbd8         db  0x1b ; '.'
000000000020cbd9         db  0x00 ; '.'
000000000020cbda         db  0x00 ; '.'
000000000020cbdb         db  0x00 ; '.'
000000000020cbdc         db  0x00 ; '.'
000000000020cbdd         db  0x00 ; '.'
000000000020cbde         db  0x00 ; '.'
000000000020cbdf         db  0x00 ; '.'
000000000020cbe0         db  0x08 ; '.'
000000000020cbe1         db  0x00 ; '.'
000000000020cbe2         db  0x00 ; '.'
000000000020cbe3         db  0x00 ; '.'
000000000020cbe4         db  0x00 ; '.'
000000000020cbe5         db  0x00 ; '.'
000000000020cbe6         db  0x00 ; '.'
000000000020cbe7         db  0x00 ; '.'
000000000020cbe8         db  0x1a ; '.'
000000000020cbe9         db  0x00 ; '.'
000000000020cbea         db  0x00 ; '.'
000000000020cbeb         db  0x00 ; '.'
000000000020cbec         db  0x00 ; '.'
000000000020cbed         db  0x00 ; '.'
000000000020cbee         db  0x00 ; '.'
000000000020cbef         db  0x00 ; '.'
000000000020cbf0         db  0xf8 ; '.'
000000000020cbf1         db  0xc9 ; '.'
000000000020cbf2         db  0x20 ; ' '
000000000020cbf3         db  0x00 ; '.'
000000000020cbf4         db  0x00 ; '.'
000000000020cbf5         db  0x00 ; '.'
000000000020cbf6         db  0x00 ; '.'
000000000020cbf7         db  0x00 ; '.'
000000000020cbf8         db  0x1c ; '.'
000000000020cbf9         db  0x00 ; '.'
000000000020cbfa         db  0x00 ; '.'
000000000020cbfb         db  0x00 ; '.'
000000000020cbfc         db  0x00 ; '.'
000000000020cbfd         db  0x00 ; '.'
000000000020cbfe         db  0x00 ; '.'
000000000020cbff         db  0x00 ; '.'
000000000020cc00         db  0x08 ; '.'
000000000020cc01         db  0x00 ; '.'
000000000020cc02         db  0x00 ; '.'
000000000020cc03         db  0x00 ; '.'
000000000020cc04         db  0x00 ; '.'
000000000020cc05         db  0x00 ; '.'
000000000020cc06         db  0x00 ; '.'
000000000020cc07         db  0x00 ; '.'
000000000020cc08         db  0xf5 ; '.'
000000000020cc09         db  0xfe ; '.'
000000000020cc0a         db  0xff ; '.'
000000000020cc0b         db  0x6f ; 'o'
000000000020cc0c         db  0x00 ; '.'
000000000020cc0d         db  0x00 ; '.'
000000000020cc0e         db  0x00 ; '.'
000000000020cc0f         db  0x00 ; '.'
000000000020cc10         db  0x98 ; '.'
000000000020cc11         db  0x02 ; '.'
000000000020cc12         db  0x00 ; '.'
000000000020cc13         db  0x00 ; '.'
000000000020cc14         db  0x00 ; '.'
000000000020cc15         db  0x00 ; '.'
000000000020cc16         db  0x00 ; '.'
000000000020cc17         db  0x00 ; '.'
000000000020cc18         db  0x05 ; '.'
000000000020cc19         db  0x00 ; '.'
000000000020cc1a         db  0x00 ; '.'
000000000020cc1b         db  0x00 ; '.'
000000000020cc1c         db  0x00 ; '.'
000000000020cc1d         db  0x00 ; '.'
000000000020cc1e         db  0x00 ; '.'
000000000020cc1f         db  0x00 ; '.'
000000000020cc20         db  0xc0 ; '.'
000000000020cc21         db  0x0a ; '.'
000000000020cc22         db  0x00 ; '.'
000000000020cc23         db  0x00 ; '.'
000000000020cc24         db  0x00 ; '.'
000000000020cc25         db  0x00 ; '.'
000000000020cc26         db  0x00 ; '.'
000000000020cc27         db  0x00 ; '.'
000000000020cc28         db  0x06 ; '.'
000000000020cc29         db  0x00 ; '.'
000000000020cc2a         db  0x00 ; '.'
000000000020cc2b         db  0x00 ; '.'
000000000020cc2c         db  0x00 ; '.'
000000000020cc2d         db  0x00 ; '.'
000000000020cc2e         db  0x00 ; '.'
000000000020cc2f         db  0x00 ; '.'
000000000020cc30         db  0xe0 ; '.'
000000000020cc31         db  0x02 ; '.'
000000000020cc32         db  0x00 ; '.'
000000000020cc33         db  0x00 ; '.'
000000000020cc34         db  0x00 ; '.'
000000000020cc35         db  0x00 ; '.'
000000000020cc36         db  0x00 ; '.'
000000000020cc37         db  0x00 ; '.'
000000000020cc38         db  0x0a ; '.'
000000000020cc39         db  0x00 ; '.'
000000000020cc3a         db  0x00 ; '.'
000000000020cc3b         db  0x00 ; '.'
000000000020cc3c         db  0x00 ; '.'
000000000020cc3d         db  0x00 ; '.'
000000000020cc3e         db  0x00 ; '.'
000000000020cc3f         db  0x00 ; '.'
000000000020cc40         db  0x93 ; '.'
000000000020cc41         db  0x03 ; '.'
000000000020cc42         db  0x00 ; '.'
000000000020cc43         db  0x00 ; '.'
000000000020cc44         db  0x00 ; '.'
000000000020cc45         db  0x00 ; '.'
000000000020cc46         db  0x00 ; '.'
000000000020cc47         db  0x00 ; '.'
000000000020cc48         db  0x0b ; '.'
000000000020cc49         db  0x00 ; '.'
000000000020cc4a         db  0x00 ; '.'
000000000020cc4b         db  0x00 ; '.'
000000000020cc4c         db  0x00 ; '.'
000000000020cc4d         db  0x00 ; '.'
000000000020cc4e         db  0x00 ; '.'
000000000020cc4f         db  0x00 ; '.'
000000000020cc50         db  0x18 ; '.'
000000000020cc51         db  0x00 ; '.'
000000000020cc52         db  0x00 ; '.'
000000000020cc53         db  0x00 ; '.'
000000000020cc54         db  0x00 ; '.'
000000000020cc55         db  0x00 ; '.'
000000000020cc56         db  0x00 ; '.'
000000000020cc57         db  0x00 ; '.'
000000000020cc58         db  0x15 ; '.'
000000000020cc59         db  0x00 ; '.'
000000000020cc5a         db  0x00 ; '.'
000000000020cc5b         db  0x00 ; '.'
000000000020cc5c         db  0x00 ; '.'
000000000020cc5d         db  0x00 ; '.'
000000000020cc5e         db  0x00 ; '.'
000000000020cc5f         db  0x00 ; '.'
000000000020cc60         db  0x00 ; '.'
000000000020cc61         db  0x00 ; '.'
000000000020cc62         db  0x00 ; '.'
000000000020cc63         db  0x00 ; '.'
000000000020cc64         db  0x00 ; '.'
000000000020cc65         db  0x00 ; '.'
000000000020cc66         db  0x00 ; '.'
000000000020cc67         db  0x00 ; '.'
000000000020cc68         db  0x03 ; '.'
000000000020cc69         db  0x00 ; '.'
000000000020cc6a         db  0x00 ; '.'
000000000020cc6b         db  0x00 ; '.'
000000000020cc6c         db  0x00 ; '.'
000000000020cc6d         db  0x00 ; '.'
000000000020cc6e         db  0x00 ; '.'
000000000020cc6f         db  0x00 ; '.'
000000000020cc70         db  0x88 ; '.'
000000000020cc71         db  0xcd ; '.'
000000000020cc72         db  0x20 ; ' '
000000000020cc73         db  0x00 ; '.'
000000000020cc74         db  0x00 ; '.'
000000000020cc75         db  0x00 ; '.'
000000000020cc76         db  0x00 ; '.'
000000000020cc77         db  0x00 ; '.'
000000000020cc78         db  0x02 ; '.'
000000000020cc79         db  0x00 ; '.'
000000000020cc7a         db  0x00 ; '.'
000000000020cc7b         db  0x00 ; '.'
000000000020cc7c         db  0x00 ; '.'
000000000020cc7d         db  0x00 ; '.'
000000000020cc7e         db  0x00 ; '.'
000000000020cc7f         db  0x00 ; '.'
000000000020cc80         db  0x60 ; '`'
000000000020cc81         db  0x06 ; '.'
000000000020cc82         db  0x00 ; '.'
000000000020cc83         db  0x00 ; '.'
000000000020cc84         db  0x00 ; '.'
000000000020cc85         db  0x00 ; '.'
000000000020cc86         db  0x00 ; '.'
000000000020cc87         db  0x00 ; '.'
000000000020cc88         db  0x14 ; '.'
000000000020cc89         db  0x00 ; '.'
000000000020cc8a         db  0x00 ; '.'
000000000020cc8b         db  0x00 ; '.'
000000000020cc8c         db  0x00 ; '.'
000000000020cc8d         db  0x00 ; '.'
000000000020cc8e         db  0x00 ; '.'
000000000020cc8f         db  0x00 ; '.'
000000000020cc90         db  0x07 ; '.'
000000000020cc91         db  0x00 ; '.'
000000000020cc92         db  0x00 ; '.'
000000000020cc93         db  0x00 ; '.'
000000000020cc94         db  0x00 ; '.'
000000000020cc95         db  0x00 ; '.'
000000000020cc96         db  0x00 ; '.'
000000000020cc97         db  0x00 ; '.'
000000000020cc98         db  0x17 ; '.'
000000000020cc99         db  0x00 ; '.'
000000000020cc9a         db  0x00 ; '.'
000000000020cc9b         db  0x00 ; '.'
000000000020cc9c         db  0x00 ; '.'
000000000020cc9d         db  0x00 ; '.'
000000000020cc9e         db  0x00 ; '.'
000000000020cc9f         db  0x00 ; '.'
000000000020cca0         db  0x00 ; '.'
000000000020cca1         db  0x13 ; '.'
000000000020cca2         db  0x00 ; '.'
000000000020cca3         db  0x00 ; '.'
000000000020cca4         db  0x00 ; '.'
000000000020cca5         db  0x00 ; '.'
000000000020cca6         db  0x00 ; '.'
000000000020cca7         db  0x00 ; '.'
000000000020cca8         db  0x07 ; '.'
000000000020cca9         db  0x00 ; '.'
000000000020ccaa         db  0x00 ; '.'
000000000020ccab         db  0x00 ; '.'
000000000020ccac         db  0x00 ; '.'
000000000020ccad         db  0x00 ; '.'
000000000020ccae         db  0x00 ; '.'
000000000020ccaf         db  0x00 ; '.'
000000000020ccb0         db  0x70 ; 'p'
000000000020ccb1         db  0x0f ; '.'
000000000020ccb2         db  0x00 ; '.'
000000000020ccb3         db  0x00 ; '.'
000000000020ccb4         db  0x00 ; '.'
000000000020ccb5         db  0x00 ; '.'
000000000020ccb6         db  0x00 ; '.'
000000000020ccb7         db  0x00 ; '.'
000000000020ccb8         db  0x08 ; '.'
000000000020ccb9         db  0x00 ; '.'
000000000020ccba         db  0x00 ; '.'
000000000020ccbb         db  0x00 ; '.'
000000000020ccbc         db  0x00 ; '.'
000000000020ccbd         db  0x00 ; '.'
000000000020ccbe         db  0x00 ; '.'
000000000020ccbf         db  0x00 ; '.'
000000000020ccc0         db  0x90 ; '.'
000000000020ccc1         db  0x03 ; '.'
000000000020ccc2         db  0x00 ; '.'
000000000020ccc3         db  0x00 ; '.'
000000000020ccc4         db  0x00 ; '.'
000000000020ccc5         db  0x00 ; '.'
000000000020ccc6         db  0x00 ; '.'
000000000020ccc7         db  0x00 ; '.'
000000000020ccc8         db  0x09 ; '.'
000000000020ccc9         db  0x00 ; '.'
000000000020ccca         db  0x00 ; '.'
000000000020cccb         db  0x00 ; '.'
000000000020cccc         db  0x00 ; '.'
000000000020cccd         db  0x00 ; '.'
000000000020ccce         db  0x00 ; '.'
000000000020cccf         db  0x00 ; '.'
000000000020ccd0         db  0x18 ; '.'
000000000020ccd1         db  0x00 ; '.'
000000000020ccd2         db  0x00 ; '.'
000000000020ccd3         db  0x00 ; '.'
000000000020ccd4         db  0x00 ; '.'
000000000020ccd5         db  0x00 ; '.'
000000000020ccd6         db  0x00 ; '.'
000000000020ccd7         db  0x00 ; '.'
000000000020ccd8         db  0x1e ; '.'
000000000020ccd9         db  0x00 ; '.'
000000000020ccda         db  0x00 ; '.'
000000000020ccdb         db  0x00 ; '.'
000000000020ccdc         db  0x00 ; '.'
000000000020ccdd         db  0x00 ; '.'
000000000020ccde         db  0x00 ; '.'
000000000020ccdf         db  0x00 ; '.'
000000000020cce0         db  0x08 ; '.'
000000000020cce1         db  0x00 ; '.'
000000000020cce2         db  0x00 ; '.'
000000000020cce3         db  0x00 ; '.'
000000000020cce4         db  0x00 ; '.'
000000000020cce5         db  0x00 ; '.'
000000000020cce6         db  0x00 ; '.'
000000000020cce7         db  0x00 ; '.'
000000000020cce8         db  0xfb ; '.'
000000000020cce9         db  0xff ; '.'
000000000020ccea         db  0xff ; '.'
000000000020cceb         db  0x6f ; 'o'
000000000020ccec         db  0x00 ; '.'
000000000020cced         db  0x00 ; '.'
000000000020ccee         db  0x00 ; '.'
000000000020ccef         db  0x00 ; '.'
000000000020ccf0         db  0x01 ; '.'
000000000020ccf1         db  0x00 ; '.'
000000000020ccf2         db  0x00 ; '.'
000000000020ccf3         db  0x08 ; '.'
000000000020ccf4         db  0x00 ; '.'
000000000020ccf5         db  0x00 ; '.'
000000000020ccf6         db  0x00 ; '.'
000000000020ccf7         db  0x00 ; '.'
000000000020ccf8         db  0xfe ; '.'
000000000020ccf9         db  0xff ; '.'
000000000020ccfa         db  0xff ; '.'
000000000020ccfb         db  0x6f ; 'o'
000000000020ccfc         db  0x00 ; '.'
000000000020ccfd         db  0x00 ; '.'
000000000020ccfe         db  0x00 ; '.'
000000000020ccff         db  0x00 ; '.'
000000000020cd00         db  0x00 ; '.'
000000000020cd01         db  0x0f ; '.'
000000000020cd02         db  0x00 ; '.'
000000000020cd03         db  0x00 ; '.'
000000000020cd04         db  0x00 ; '.'
000000000020cd05         db  0x00 ; '.'
000000000020cd06         db  0x00 ; '.'
000000000020cd07         db  0x00 ; '.'
000000000020cd08         db  0xff ; '.'
000000000020cd09         db  0xff ; '.'
000000000020cd0a         db  0xff ; '.'
000000000020cd0b         db  0x6f ; 'o'
000000000020cd0c         db  0x00 ; '.'
000000000020cd0d         db  0x00 ; '.'
000000000020cd0e         db  0x00 ; '.'
000000000020cd0f         db  0x00 ; '.'
000000000020cd10         db  0x01 ; '.'
000000000020cd11         db  0x00 ; '.'
000000000020cd12         db  0x00 ; '.'
000000000020cd13         db  0x00 ; '.'
000000000020cd14         db  0x00 ; '.'
000000000020cd15         db  0x00 ; '.'
000000000020cd16         db  0x00 ; '.'
000000000020cd17         db  0x00 ; '.'
000000000020cd18         db  0xf0 ; '.'
000000000020cd19         db  0xff ; '.'
000000000020cd1a         db  0xff ; '.'
000000000020cd1b         db  0x6f ; 'o'
000000000020cd1c         db  0x00 ; '.'
000000000020cd1d         db  0x00 ; '.'
000000000020cd1e         db  0x00 ; '.'
000000000020cd1f         db  0x00 ; '.'
000000000020cd20         db  0x54 ; 'T'
000000000020cd21         db  0x0e ; '.'
000000000020cd22         db  0x00 ; '.'
000000000020cd23         db  0x00 ; '.'
000000000020cd24         db  0x00 ; '.'
000000000020cd25         db  0x00 ; '.'
000000000020cd26         db  0x00 ; '.'
000000000020cd27         db  0x00 ; '.'
000000000020cd28         db  0xf9 ; '.'
000000000020cd29         db  0xff ; '.'
000000000020cd2a         db  0xff ; '.'
000000000020cd2b         db  0x6f ; 'o'
000000000020cd2c         db  0x00 ; '.'
000000000020cd2d         db  0x00 ; '.'
000000000020cd2e         db  0x00 ; '.'
000000000020cd2f         db  0x00 ; '.'
000000000020cd30         db  0x19 ; '.'
000000000020cd31         db  0x00 ; '.'
000000000020cd32         db  0x00 ; '.'
000000000020cd33         db  0x00 ; '.'
000000000020cd34         db  0x00 ; '.'
000000000020cd35         db  0x00 ; '.'
000000000020cd36         db  0x00 ; '.'
000000000020cd37         db  0x00 ; '.'
000000000020cd38         db  0x00 ; '.'
000000000020cd39         db  0x00 ; '.'
000000000020cd3a         db  0x00 ; '.'
000000000020cd3b         db  0x00 ; '.'
000000000020cd3c         db  0x00 ; '.'
000000000020cd3d         db  0x00 ; '.'
000000000020cd3e         db  0x00 ; '.'
000000000020cd3f         db  0x00 ; '.'
000000000020cd40         db  0x00 ; '.'
000000000020cd41         db  0x00 ; '.'
000000000020cd42         db  0x00 ; '.'
000000000020cd43         db  0x00 ; '.'
000000000020cd44         db  0x00 ; '.'
000000000020cd45         db  0x00 ; '.'
000000000020cd46         db  0x00 ; '.'
000000000020cd47         db  0x00 ; '.'
000000000020cd48         db  0x00 ; '.'
000000000020cd49         db  0x00 ; '.'
000000000020cd4a         db  0x00 ; '.'
000000000020cd4b         db  0x00 ; '.'
000000000020cd4c         db  0x00 ; '.'
000000000020cd4d         db  0x00 ; '.'
000000000020cd4e         db  0x00 ; '.'
000000000020cd4f         db  0x00 ; '.'
000000000020cd50         db  0x00 ; '.'
000000000020cd51         db  0x00 ; '.'
000000000020cd52         db  0x00 ; '.'
000000000020cd53         db  0x00 ; '.'
000000000020cd54         db  0x00 ; '.'
000000000020cd55         db  0x00 ; '.'
000000000020cd56         db  0x00 ; '.'
000000000020cd57         db  0x00 ; '.'
000000000020cd58         db  0x00 ; '.'
000000000020cd59         db  0x00 ; '.'
000000000020cd5a         db  0x00 ; '.'
000000000020cd5b         db  0x00 ; '.'
000000000020cd5c         db  0x00 ; '.'
000000000020cd5d         db  0x00 ; '.'
000000000020cd5e         db  0x00 ; '.'
000000000020cd5f         db  0x00 ; '.'
000000000020cd60         db  0x00 ; '.'
000000000020cd61         db  0x00 ; '.'
000000000020cd62         db  0x00 ; '.'
000000000020cd63         db  0x00 ; '.'
000000000020cd64         db  0x00 ; '.'
000000000020cd65         db  0x00 ; '.'
000000000020cd66         db  0x00 ; '.'
000000000020cd67         db  0x00 ; '.'
000000000020cd68         db  0x00 ; '.'
000000000020cd69         db  0x00 ; '.'
000000000020cd6a         db  0x00 ; '.'
000000000020cd6b         db  0x00 ; '.'
000000000020cd6c         db  0x00 ; '.'
000000000020cd6d         db  0x00 ; '.'
000000000020cd6e         db  0x00 ; '.'
000000000020cd6f         db  0x00 ; '.'
000000000020cd70         db  0x00 ; '.'
000000000020cd71         db  0x00 ; '.'
000000000020cd72         db  0x00 ; '.'
000000000020cd73         db  0x00 ; '.'
000000000020cd74         db  0x00 ; '.'
000000000020cd75         db  0x00 ; '.'
000000000020cd76         db  0x00 ; '.'
000000000020cd77         db  0x00 ; '.'
000000000020cd78         db  0x00 ; '.'
000000000020cd79         db  0x00 ; '.'
000000000020cd7a         db  0x00 ; '.'
000000000020cd7b         db  0x00 ; '.'
000000000020cd7c         db  0x00 ; '.'
000000000020cd7d         db  0x00 ; '.'
000000000020cd7e         db  0x00 ; '.'
000000000020cd7f         db  0x00 ; '.'
000000000020cd80         db  0x00 ; '.'
000000000020cd81         db  0x00 ; '.'
000000000020cd82         db  0x00 ; '.'
000000000020cd83         db  0x00 ; '.'
000000000020cd84         db  0x00 ; '.'
000000000020cd85         db  0x00 ; '.'
000000000020cd86         db  0x00 ; '.'
000000000020cd87         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x20cd88; 0x20cff0[ (616 bytes)
        ; File offset : [52616; 53232[ (616 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
000000000020cd88         db  0x98 ; '.'
000000000020cd89         db  0xcb ; '.'
000000000020cd8a         db  0x20 ; ' '
000000000020cd8b         db  0x00 ; '.'
000000000020cd8c         db  0x00 ; '.'
000000000020cd8d         db  0x00 ; '.'
000000000020cd8e         db  0x00 ; '.'
000000000020cd8f         db  0x00 ; '.'
                     qword_20cd90:
000000000020cd90         dq         0x0000000000000000                          ; DATA XREF=0x1980
000000000020cd98         db  0x00 ; '.'                                         ; DATA XREF=0x1986
000000000020cd99         db  0x00 ; '.'
000000000020cd9a         db  0x00 ; '.'
000000000020cd9b         db  0x00 ; '.'
000000000020cd9c         db  0x00 ; '.'
000000000020cd9d         db  0x00 ; '.'
000000000020cd9e         db  0x00 ; '.'
000000000020cd9f         db  0x00 ; '.'
                     __uflow@GOT:        // __uflow
000000000020cda0         dq         0x000000000020d250                          ; DATA XREF=j___uflow
                     abort@GOT:        // abort
000000000020cda8         dq         0x000000000020d260                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
000000000020cdb0         dq         0x000000000020d268                          ; DATA XREF=j___errno_location
                     strncmp@GOT:        // strncmp
000000000020cdb8         dq         0x000000000020d270                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
000000000020cdc0         dq         0x000000000020d280                          ; DATA XREF=j__exit
                     ftello@GOT:        // ftello
000000000020cdc8         dq         0x000000000020d288                          ; DATA XREF=j_ftello
                     __fpending@GOT:        // __fpending
000000000020cdd0         dq         0x000000000020d290                          ; DATA XREF=j___fpending
                     __read_chk@GOT:        // __read_chk
000000000020cdd8         dq         0x000000000020d298                          ; DATA XREF=j___read_chk
                     ferror@GOT:        // ferror
000000000020cde0         dq         0x000000000020d2a0                          ; DATA XREF=j_ferror
                     fread@GOT:        // fread
000000000020cde8         dq         0x000000000020d2a8                          ; DATA XREF=j_fread
                     fcntl@GOT:        // fcntl
000000000020cdf0         dq         0x000000000020d2b0                          ; DATA XREF=j_fcntl
                     getpid@GOT:        // getpid
000000000020cdf8         dq         0x000000000020d2b8                          ; DATA XREF=j_getpid
                     fread_unlocked@GOT:        // fread_unlocked
000000000020ce00         dq         0x000000000020d2c0                          ; DATA XREF=j_fread_unlocked
                     textdomain@GOT:        // textdomain
000000000020ce08         dq         0x000000000020d2c8                          ; DATA XREF=j_textdomain
                     fclose@GOT:        // fclose
000000000020ce10         dq         0x000000000020d2d0                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
000000000020ce18         dq         0x000000000020d2d8                          ; DATA XREF=j_bindtextdomain
                     stpcpy@GOT:        // stpcpy
000000000020ce20         dq         0x000000000020d2e0                          ; DATA XREF=j_stpcpy
                     dcgettext@GOT:        // dcgettext
000000000020ce28         dq         0x000000000020d2e8                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
000000000020ce30         dq         0x000000000020d2f0                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
000000000020ce38         dq         0x000000000020d2f8                          ; DATA XREF=j_strlen
                     __stack_chk_fail@GOT:        // __stack_chk_fail
000000000020ce40         dq         0x000000000020d300                          ; DATA XREF=j___stack_chk_fail
                     getuid@GOT:        // getuid
000000000020ce48         dq         0x000000000020d308                          ; DATA XREF=j_getuid
                     getopt_long@GOT:        // getopt_long
000000000020ce50         dq         0x000000000020d310                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
000000000020ce58         dq         0x000000000020d318                          ; DATA XREF=j_mbrtowc
                     dup2@GOT:        // dup2
000000000020ce60         dq         0x000000000020d320                          ; DATA XREF=j_dup2
                     strchr@GOT:        // strchr
000000000020ce68         dq         0x000000000020d328                          ; DATA XREF=j_strchr
                     strrchr@GOT:        // strrchr
000000000020ce70         dq         0x000000000020d330                          ; DATA XREF=j_strrchr
                     lseek@GOT:        // lseek
000000000020ce78         dq         0x000000000020d338                          ; DATA XREF=j_lseek
                     gettimeofday@GOT:        // gettimeofday
000000000020ce80         dq         0x000000000020d340                          ; DATA XREF=j_gettimeofday
                     __assert_fail@GOT:        // __assert_fail
000000000020ce88         dq         0x000000000020d348                          ; DATA XREF=j___assert_fail
                     __strtoul_internal@GOT:        // __strtoul_internal
000000000020ce90         dq         0x000000000020d350                          ; DATA XREF=j___strtoul_internal
                     memset@GOT:        // memset
000000000020ce98         dq         0x000000000020d358                          ; DATA XREF=j_memset
                     freopen@GOT:        // freopen
000000000020cea0         dq         0x000000000020d360                          ; DATA XREF=j_freopen
                     close@GOT:        // close
000000000020cea8         dq         0x000000000020d368                          ; DATA XREF=j_close
                     posix_fadvise@GOT:        // posix_fadvise
000000000020ceb0         dq         0x000000000020d370                          ; DATA XREF=j_posix_fadvise
                     memchr@GOT:        // memchr
000000000020ceb8         dq         0x000000000020d378                          ; DATA XREF=j_memchr
                     memcmp@GOT:        // memcmp
000000000020cec0         dq         0x000000000020d388                          ; DATA XREF=j_memcmp
                     fputs_unlocked@GOT:        // fputs_unlocked
000000000020cec8         dq         0x000000000020d390                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
000000000020ced0         dq         0x000000000020d398                          ; DATA XREF=j_calloc
                     strcmp@GOT:        // strcmp
000000000020ced8         dq         0x000000000020d3a0                          ; DATA XREF=j_strcmp
                     memcpy@GOT:        // memcpy
000000000020cee0         dq         0x000000000020d3b0                          ; DATA XREF=j_memcpy
                     fileno@GOT:        // fileno
000000000020cee8         dq         0x000000000020d3b8                          ; DATA XREF=j_fileno
                     getgid@GOT:        // getgid
000000000020cef0         dq         0x000000000020d3c0                          ; DATA XREF=j_getgid
                     malloc@GOT:        // malloc
000000000020cef8         dq         0x000000000020d3c8                          ; DATA XREF=j_malloc
                     fflush@GOT:        // fflush
000000000020cf00         dq         0x000000000020d3d0                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
000000000020cf08         dq         0x000000000020d3d8                          ; DATA XREF=j_nl_langinfo
                     __fxstat@GOT:        // __fxstat
000000000020cf10         dq         0x000000000020d3e0                          ; DATA XREF=j___fxstat
                     __freading@GOT:        // __freading
000000000020cf18         dq         0x000000000020d3e8                          ; DATA XREF=j___freading
                     fwrite_unlocked@GOT:        // fwrite_unlocked
000000000020cf20         dq         0x000000000020d3f0                          ; DATA XREF=j_fwrite_unlocked
                     realloc@GOT:        // realloc
000000000020cf28         dq         0x000000000020d3f8                          ; DATA XREF=j_realloc
                     fdopen@GOT:        // fdopen
000000000020cf30         dq         0x000000000020d400                          ; DATA XREF=j_fdopen
                     setlocale@GOT:        // setlocale
000000000020cf38         dq         0x000000000020d408                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
000000000020cf40         dq         0x000000000020d410                          ; DATA XREF=j___printf_chk
                     setvbuf@GOT:        // setvbuf
000000000020cf48         dq         0x000000000020d418                          ; DATA XREF=j_setvbuf
                     error@GOT:        // error
000000000020cf50         dq         0x000000000020d420                          ; DATA XREF=j_error
                     __explicit_bzero_chk@GOT:        // __explicit_bzero_chk
000000000020cf58         dq         0x000000000020d428                          ; DATA XREF=j___explicit_bzero_chk
                     open@GOT:        // open
000000000020cf60         dq         0x000000000020d430                          ; DATA XREF=j_open
                     fseeko@GOT:        // fseeko
000000000020cf68         dq         0x000000000020d438                          ; DATA XREF=j_fseeko
                     fopen@GOT:        // fopen
000000000020cf70         dq         0x000000000020d440                          ; DATA XREF=j_fopen
                     strtoul@GOT:        // strtoul
000000000020cf78         dq         0x000000000020d448                          ; DATA XREF=j_strtoul
                     __cxa_atexit@GOT:        // __cxa_atexit
000000000020cf80         dq         0x000000000020d450                          ; DATA XREF=j___cxa_atexit
                     getppid@GOT:        // getppid
000000000020cf88         dq         0x000000000020d458                          ; DATA XREF=j_getppid
                     exit@GOT:        // exit
000000000020cf90         dq         0x000000000020d460                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
000000000020cf98         dq         0x000000000020d468                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
000000000020cfa0         dq         0x000000000020d470                          ; DATA XREF=j___fprintf_chk
                     mbsinit@GOT:        // mbsinit
000000000020cfa8         dq         0x000000000020d480                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
000000000020cfb0         dq         0x000000000020d488                          ; DATA XREF=j_iswprint
                     __ctype_b_loc@GOT:        // __ctype_b_loc
000000000020cfb8         dq         0x000000000020d498                          ; DATA XREF=j___ctype_b_loc
                     qword_20cfc0:
000000000020cfc0         dq         0x0000000000000000                          ; DATA XREF=sub_1dd0, randperm_new+151
                     qword_20cfc8:
000000000020cfc8         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
000000000020cfd0         db  0x00 ; '.'                                         ; DATA XREF=_start+36
000000000020cfd1         db  0x00 ; '.'
000000000020cfd2         db  0x00 ; '.'
000000000020cfd3         db  0x00 ; '.'
000000000020cfd4         db  0x00 ; '.'
000000000020cfd5         db  0x00 ; '.'
000000000020cfd6         db  0x00 ; '.'
000000000020cfd7         db  0x00 ; '.'
                     qword_20cfd8:
000000000020cfd8         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_20cfe0:
000000000020cfe0         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_20cfe8:
000000000020cfe8         dq         0x0000000000000000                          ; DATA XREF=j_qword_20cfe8, __do_global_dtors_aux+9
000000000020cff0         db  0x00 ; '.'
000000000020cff1         db  0x00 ; '.'
000000000020cff2         db  0x00 ; '.'
000000000020cff3         db  0x00 ; '.'
000000000020cff4         db  0x00 ; '.'
000000000020cff5         db  0x00 ; '.'
000000000020cff6         db  0x00 ; '.'
000000000020cff7         db  0x00 ; '.'
000000000020cff8         db  0x00 ; '.'
000000000020cff9         db  0x00 ; '.'
000000000020cffa         db  0x00 ; '.'
000000000020cffb         db  0x00 ; '.'
000000000020cffc         db  0x00 ; '.'
000000000020cffd         db  0x00 ; '.'
000000000020cffe         db  0x00 ; '.'
000000000020cfff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x20d000; 0x20d080[ (128 bytes)
        ; File offset : [53248; 53376[ (128 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

000000000020d000         db  0x00 ; '.'
000000000020d001         db  0x00 ; '.'
000000000020d002         db  0x00 ; '.'
000000000020d003         db  0x00 ; '.'
000000000020d004         db  0x00 ; '.'
000000000020d005         db  0x00 ; '.'
000000000020d006         db  0x00 ; '.'
000000000020d007         db  0x00 ; '.'
                     __dso_handle:
000000000020d008         dq         0x000000000020d008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     Version:
000000000020d010         dq         0x0000000000009759                          ; "8.31", DATA XREF=main+730
                     exit_failure:
000000000020d018         dd         0x00000001                                  ; DATA XREF=close_stdout+130, randread_error+51, xalloc_die+23
000000000020d01c         db  0x00 ; '.'
000000000020d01d         db  0x00 ; '.'
000000000020d01e         db  0x00 ; '.'
000000000020d01f         db  0x00 ; '.'
                     quote_quoting_options:
000000000020d020         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
000000000020d021         db  0x00 ; '.'
000000000020d022         db  0x00 ; '.'
000000000020d023         db  0x00 ; '.'
000000000020d024         db  0x00 ; '.'
000000000020d025         db  0x00 ; '.'
000000000020d026         db  0x00 ; '.'
000000000020d027         db  0x00 ; '.'
000000000020d028         db  0x00 ; '.'
000000000020d029         db  0x00 ; '.'
000000000020d02a         db  0x00 ; '.'
000000000020d02b         db  0x00 ; '.'
000000000020d02c         db  0x00 ; '.'
000000000020d02d         db  0x00 ; '.'
000000000020d02e         db  0x00 ; '.'
000000000020d02f         db  0x00 ; '.'
000000000020d030         db  0x00 ; '.'
000000000020d031         db  0x00 ; '.'
000000000020d032         db  0x00 ; '.'
000000000020d033         db  0x00 ; '.'
000000000020d034         db  0x00 ; '.'
000000000020d035         db  0x00 ; '.'
000000000020d036         db  0x00 ; '.'
000000000020d037         db  0x00 ; '.'
000000000020d038         db  0x00 ; '.'
000000000020d039         db  0x00 ; '.'
000000000020d03a         db  0x00 ; '.'
000000000020d03b         db  0x00 ; '.'
000000000020d03c         db  0x00 ; '.'
000000000020d03d         db  0x00 ; '.'
000000000020d03e         db  0x00 ; '.'
000000000020d03f         db  0x00 ; '.'
000000000020d040         db  0x00 ; '.'
000000000020d041         db  0x00 ; '.'
000000000020d042         db  0x00 ; '.'
000000000020d043         db  0x00 ; '.'
000000000020d044         db  0x00 ; '.'
000000000020d045         db  0x00 ; '.'
000000000020d046         db  0x00 ; '.'
000000000020d047         db  0x00 ; '.'
000000000020d048         db  0x00 ; '.'
000000000020d049         db  0x00 ; '.'
000000000020d04a         db  0x00 ; '.'
000000000020d04b         db  0x00 ; '.'
000000000020d04c         db  0x00 ; '.'
000000000020d04d         db  0x00 ; '.'
000000000020d04e         db  0x00 ; '.'
000000000020d04f         db  0x00 ; '.'
000000000020d050         db  0x00 ; '.'
000000000020d051         db  0x00 ; '.'
000000000020d052         db  0x00 ; '.'
000000000020d053         db  0x00 ; '.'
000000000020d054         db  0x00 ; '.'
000000000020d055         db  0x00 ; '.'
000000000020d056         db  0x00 ; '.'
000000000020d057         db  0x00 ; '.'
                     nslots:
000000000020d058         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000020d05c         align      32
                     slotvec:
000000000020d060         dq         0x000000000020d070                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
000000000020d068         db  0x00 ; '.'
000000000020d069         db  0x00 ; '.'
000000000020d06a         db  0x00 ; '.'
000000000020d06b         db  0x00 ; '.'
000000000020d06c         db  0x00 ; '.'
000000000020d06d         db  0x00 ; '.'
000000000020d06e         db  0x00 ; '.'
000000000020d06f         db  0x00 ; '.'
                     slotvec0:
000000000020d070         dq         1.26481e-321, 1.06257e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x20d080; 0x20d240[ (448 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
000000000020d080         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
000000000020d081         db  0x00 ; '.'
000000000020d082         db  0x00 ; '.'
000000000020d083         db  0x00 ; '.'
000000000020d084         db  0x00 ; '.'
000000000020d085         db  0x00 ; '.'
000000000020d086         db  0x00 ; '.'
000000000020d087         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
000000000020d088         db  0x00 ; '.'                                         ; DATA XREF=main+723, main+1883, main+2053, main+2765, main+2914, main+3330, usage+131, usage+168, usage+205, usage+242, usage+279
000000000020d089         db  0x00 ; '.'
000000000020d08a         db  0x00 ; '.'
000000000020d08b         db  0x00 ; '.'
000000000020d08c         db  0x00 ; '.'
000000000020d08d         db  0x00 ; '.'
000000000020d08e         db  0x00 ; '.'
000000000020d08f         db  0x00 ; '.'
                     stdin@@GLIBC_2.2.5:
000000000020d090         db  0x00 ; '.'                                         ; DATA XREF=main+1027, main+1170, main+1838, main+2271, main+2998
000000000020d091         db  0x00 ; '.'
000000000020d092         db  0x00 ; '.'
000000000020d093         db  0x00 ; '.'
000000000020d094         db  0x00 ; '.'
000000000020d095         db  0x00 ; '.'
000000000020d096         db  0x00 ; '.'
000000000020d097         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
000000000020d098         db  0x00 ; '.'                                         ; DATA XREF=main+953
000000000020d099         db  0x00 ; '.'
000000000020d09a         db  0x00 ; '.'
000000000020d09b         db  0x00 ; '.'
000000000020d09c         db  0x00 ; '.'
000000000020d09d         db  0x00 ; '.'
000000000020d09e         db  0x00 ; '.'
000000000020d09f         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
000000000020d0a0         db  0x00 ; '.'                                         ; DATA XREF=main+251, main+339, main+406, main+565, main+628, main+784, main+884
000000000020d0a1         db  0x00 ; '.'
000000000020d0a2         db  0x00 ; '.'
000000000020d0a3         db  0x00 ; '.'
000000000020d0a4         db  0x00 ; '.'
000000000020d0a5         db  0x00 ; '.'
000000000020d0a6         db  0x00 ; '.'
000000000020d0a7         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
000000000020d0a8         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
000000000020d0a9         db  0x00 ; '.'
000000000020d0aa         db  0x00 ; '.'
000000000020d0ab         db  0x00 ; '.'
000000000020d0ac         db  0x00 ; '.'
000000000020d0ad         db  0x00 ; '.'
000000000020d0ae         db  0x00 ; '.'
000000000020d0af         db  0x00 ; '.'
000000000020d0b0         db  0x00 ; '.'
000000000020d0b1         db  0x00 ; '.'
000000000020d0b2         db  0x00 ; '.'
000000000020d0b3         db  0x00 ; '.'
000000000020d0b4         db  0x00 ; '.'
000000000020d0b5         db  0x00 ; '.'
000000000020d0b6         db  0x00 ; '.'
000000000020d0b7         db  0x00 ; '.'
000000000020d0b8         db  0x00 ; '.'
000000000020d0b9         db  0x00 ; '.'
000000000020d0ba         db  0x00 ; '.'
000000000020d0bb         db  0x00 ; '.'
000000000020d0bc         db  0x00 ; '.'
000000000020d0bd         db  0x00 ; '.'
000000000020d0be         db  0x00 ; '.'
000000000020d0bf         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
000000000020d0c0         db  0x00 ; '.'                                         ; DATA XREF=usage+61, close_stdout+44, set_program_name+125
000000000020d0c1         db  0x00 ; '.'
000000000020d0c2         db  0x00 ; '.'
000000000020d0c3         db  0x00 ; '.'
000000000020d0c4         db  0x00 ; '.'
000000000020d0c5         db  0x00 ; '.'
000000000020d0c6         db  0x00 ; '.'
000000000020d0c7         db  0x00 ; '.'
                     completed.7697:
000000000020d0c8         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
000000000020d0c9         db  0x00 ; '.'
000000000020d0ca         db  0x00 ; '.'
000000000020d0cb         db  0x00 ; '.'
000000000020d0cc         db  0x00 ; '.'
000000000020d0cd         db  0x00 ; '.'
000000000020d0ce         db  0x00 ; '.'
000000000020d0cf         db  0x00 ; '.'
                     ignore_EPIPE:
000000000020d0d0         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
000000000020d0d1         db  0x00 ; '.'
000000000020d0d2         db  0x00 ; '.'
000000000020d0d3         db  0x00 ; '.'
000000000020d0d4         db  0x00 ; '.'
000000000020d0d5         db  0x00 ; '.'
000000000020d0d6         db  0x00 ; '.'
000000000020d0d7         db  0x00 ; '.'
                     file_name:
000000000020d0d8         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
000000000020d0d9         db  0x00 ; '.'
000000000020d0da         db  0x00 ; '.'
000000000020d0db         db  0x00 ; '.'
000000000020d0dc         db  0x00 ; '.'
000000000020d0dd         db  0x00 ; '.'
000000000020d0de         db  0x00 ; '.'
000000000020d0df         db  0x00 ; '.'
                     program_name:
000000000020d0e0         db  0x00 ; '.'                                         ; DATA XREF=usage+20, set_program_name+109
000000000020d0e1         db  0x00 ; '.'
000000000020d0e2         db  0x00 ; '.'
000000000020d0e3         db  0x00 ; '.'
000000000020d0e4         db  0x00 ; '.'
000000000020d0e5         db  0x00 ; '.'
000000000020d0e6         db  0x00 ; '.'
000000000020d0e7         db  0x00 ; '.'
000000000020d0e8         db  0x00 ; '.'
000000000020d0e9         db  0x00 ; '.'
000000000020d0ea         db  0x00 ; '.'
000000000020d0eb         db  0x00 ; '.'
000000000020d0ec         db  0x00 ; '.'
000000000020d0ed         db  0x00 ; '.'
000000000020d0ee         db  0x00 ; '.'
000000000020d0ef         db  0x00 ; '.'
000000000020d0f0         db  0x00 ; '.'
000000000020d0f1         db  0x00 ; '.'
000000000020d0f2         db  0x00 ; '.'
000000000020d0f3         db  0x00 ; '.'
000000000020d0f4         db  0x00 ; '.'
000000000020d0f5         db  0x00 ; '.'
000000000020d0f6         db  0x00 ; '.'
000000000020d0f7         db  0x00 ; '.'
000000000020d0f8         db  0x00 ; '.'
000000000020d0f9         db  0x00 ; '.'
000000000020d0fa         db  0x00 ; '.'
000000000020d0fb         db  0x00 ; '.'
000000000020d0fc         db  0x00 ; '.'
000000000020d0fd         db  0x00 ; '.'
000000000020d0fe         db  0x00 ; '.'
000000000020d0ff         db  0x00 ; '.'
                     slot0:
000000000020d100         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
000000000020d101         db  0x00 ; '.'
000000000020d102         db  0x00 ; '.'
000000000020d103         db  0x00 ; '.'
000000000020d104         db  0x00 ; '.'
000000000020d105         db  0x00 ; '.'
000000000020d106         db  0x00 ; '.'
000000000020d107         db  0x00 ; '.'
000000000020d108         db  0x00 ; '.'
000000000020d109         db  0x00 ; '.'
000000000020d10a         db  0x00 ; '.'
000000000020d10b         db  0x00 ; '.'
000000000020d10c         db  0x00 ; '.'
000000000020d10d         db  0x00 ; '.'
000000000020d10e         db  0x00 ; '.'
000000000020d10f         db  0x00 ; '.'
000000000020d110         db  0x00 ; '.'
000000000020d111         db  0x00 ; '.'
000000000020d112         db  0x00 ; '.'
000000000020d113         db  0x00 ; '.'
000000000020d114         db  0x00 ; '.'
000000000020d115         db  0x00 ; '.'
000000000020d116         db  0x00 ; '.'
000000000020d117         db  0x00 ; '.'
000000000020d118         db  0x00 ; '.'
000000000020d119         db  0x00 ; '.'
000000000020d11a         db  0x00 ; '.'
000000000020d11b         db  0x00 ; '.'
000000000020d11c         db  0x00 ; '.'
000000000020d11d         db  0x00 ; '.'
000000000020d11e         db  0x00 ; '.'
000000000020d11f         db  0x00 ; '.'
000000000020d120         db  0x00 ; '.'
000000000020d121         db  0x00 ; '.'
000000000020d122         db  0x00 ; '.'
000000000020d123         db  0x00 ; '.'
000000000020d124         db  0x00 ; '.'
000000000020d125         db  0x00 ; '.'
000000000020d126         db  0x00 ; '.'
000000000020d127         db  0x00 ; '.'
000000000020d128         db  0x00 ; '.'
000000000020d129         db  0x00 ; '.'
000000000020d12a         db  0x00 ; '.'
000000000020d12b         db  0x00 ; '.'
000000000020d12c         db  0x00 ; '.'
000000000020d12d         db  0x00 ; '.'
000000000020d12e         db  0x00 ; '.'
000000000020d12f         db  0x00 ; '.'
000000000020d130         db  0x00 ; '.'
000000000020d131         db  0x00 ; '.'
000000000020d132         db  0x00 ; '.'
000000000020d133         db  0x00 ; '.'
000000000020d134         db  0x00 ; '.'
000000000020d135         db  0x00 ; '.'
000000000020d136         db  0x00 ; '.'
000000000020d137         db  0x00 ; '.'
000000000020d138         db  0x00 ; '.'
000000000020d139         db  0x00 ; '.'
000000000020d13a         db  0x00 ; '.'
000000000020d13b         db  0x00 ; '.'
000000000020d13c         db  0x00 ; '.'
000000000020d13d         db  0x00 ; '.'
000000000020d13e         db  0x00 ; '.'
000000000020d13f         db  0x00 ; '.'
000000000020d140         db  0x00 ; '.'
000000000020d141         db  0x00 ; '.'
000000000020d142         db  0x00 ; '.'
000000000020d143         db  0x00 ; '.'
000000000020d144         db  0x00 ; '.'
000000000020d145         db  0x00 ; '.'
000000000020d146         db  0x00 ; '.'
000000000020d147         db  0x00 ; '.'
000000000020d148         db  0x00 ; '.'
000000000020d149         db  0x00 ; '.'
000000000020d14a         db  0x00 ; '.'
000000000020d14b         db  0x00 ; '.'
000000000020d14c         db  0x00 ; '.'
000000000020d14d         db  0x00 ; '.'
000000000020d14e         db  0x00 ; '.'
000000000020d14f         db  0x00 ; '.'
000000000020d150         db  0x00 ; '.'
000000000020d151         db  0x00 ; '.'
000000000020d152         db  0x00 ; '.'
000000000020d153         db  0x00 ; '.'
000000000020d154         db  0x00 ; '.'
000000000020d155         db  0x00 ; '.'
000000000020d156         db  0x00 ; '.'
000000000020d157         db  0x00 ; '.'
000000000020d158         db  0x00 ; '.'
000000000020d159         db  0x00 ; '.'
000000000020d15a         db  0x00 ; '.'
000000000020d15b         db  0x00 ; '.'
000000000020d15c         db  0x00 ; '.'
000000000020d15d         db  0x00 ; '.'
000000000020d15e         db  0x00 ; '.'
000000000020d15f         db  0x00 ; '.'
000000000020d160         db  0x00 ; '.'
000000000020d161         db  0x00 ; '.'
000000000020d162         db  0x00 ; '.'
000000000020d163         db  0x00 ; '.'
000000000020d164         db  0x00 ; '.'
000000000020d165         db  0x00 ; '.'
000000000020d166         db  0x00 ; '.'
000000000020d167         db  0x00 ; '.'
000000000020d168         db  0x00 ; '.'
000000000020d169         db  0x00 ; '.'
000000000020d16a         db  0x00 ; '.'
000000000020d16b         db  0x00 ; '.'
000000000020d16c         db  0x00 ; '.'
000000000020d16d         db  0x00 ; '.'
000000000020d16e         db  0x00 ; '.'
000000000020d16f         db  0x00 ; '.'
000000000020d170         db  0x00 ; '.'
000000000020d171         db  0x00 ; '.'
000000000020d172         db  0x00 ; '.'
000000000020d173         db  0x00 ; '.'
000000000020d174         db  0x00 ; '.'
000000000020d175         db  0x00 ; '.'
000000000020d176         db  0x00 ; '.'
000000000020d177         db  0x00 ; '.'
000000000020d178         db  0x00 ; '.'
000000000020d179         db  0x00 ; '.'
000000000020d17a         db  0x00 ; '.'
000000000020d17b         db  0x00 ; '.'
000000000020d17c         db  0x00 ; '.'
000000000020d17d         db  0x00 ; '.'
000000000020d17e         db  0x00 ; '.'
000000000020d17f         db  0x00 ; '.'
000000000020d180         db  0x00 ; '.'
000000000020d181         db  0x00 ; '.'
000000000020d182         db  0x00 ; '.'
000000000020d183         db  0x00 ; '.'
000000000020d184         db  0x00 ; '.'
000000000020d185         db  0x00 ; '.'
000000000020d186         db  0x00 ; '.'
000000000020d187         db  0x00 ; '.'
000000000020d188         db  0x00 ; '.'
000000000020d189         db  0x00 ; '.'
000000000020d18a         db  0x00 ; '.'
000000000020d18b         db  0x00 ; '.'
000000000020d18c         db  0x00 ; '.'
000000000020d18d         db  0x00 ; '.'
000000000020d18e         db  0x00 ; '.'
000000000020d18f         db  0x00 ; '.'
000000000020d190         db  0x00 ; '.'
000000000020d191         db  0x00 ; '.'
000000000020d192         db  0x00 ; '.'
000000000020d193         db  0x00 ; '.'
000000000020d194         db  0x00 ; '.'
000000000020d195         db  0x00 ; '.'
000000000020d196         db  0x00 ; '.'
000000000020d197         db  0x00 ; '.'
000000000020d198         db  0x00 ; '.'
000000000020d199         db  0x00 ; '.'
000000000020d19a         db  0x00 ; '.'
000000000020d19b         db  0x00 ; '.'
000000000020d19c         db  0x00 ; '.'
000000000020d19d         db  0x00 ; '.'
000000000020d19e         db  0x00 ; '.'
000000000020d19f         db  0x00 ; '.'
000000000020d1a0         db  0x00 ; '.'
000000000020d1a1         db  0x00 ; '.'
000000000020d1a2         db  0x00 ; '.'
000000000020d1a3         db  0x00 ; '.'
000000000020d1a4         db  0x00 ; '.'
000000000020d1a5         db  0x00 ; '.'
000000000020d1a6         db  0x00 ; '.'
000000000020d1a7         db  0x00 ; '.'
000000000020d1a8         db  0x00 ; '.'
000000000020d1a9         db  0x00 ; '.'
000000000020d1aa         db  0x00 ; '.'
000000000020d1ab         db  0x00 ; '.'
000000000020d1ac         db  0x00 ; '.'
000000000020d1ad         db  0x00 ; '.'
000000000020d1ae         db  0x00 ; '.'
000000000020d1af         db  0x00 ; '.'
000000000020d1b0         db  0x00 ; '.'
000000000020d1b1         db  0x00 ; '.'
000000000020d1b2         db  0x00 ; '.'
000000000020d1b3         db  0x00 ; '.'
000000000020d1b4         db  0x00 ; '.'
000000000020d1b5         db  0x00 ; '.'
000000000020d1b6         db  0x00 ; '.'
000000000020d1b7         db  0x00 ; '.'
000000000020d1b8         db  0x00 ; '.'
000000000020d1b9         db  0x00 ; '.'
000000000020d1ba         db  0x00 ; '.'
000000000020d1bb         db  0x00 ; '.'
000000000020d1bc         db  0x00 ; '.'
000000000020d1bd         db  0x00 ; '.'
000000000020d1be         db  0x00 ; '.'
000000000020d1bf         db  0x00 ; '.'
000000000020d1c0         db  0x00 ; '.'
000000000020d1c1         db  0x00 ; '.'
000000000020d1c2         db  0x00 ; '.'
000000000020d1c3         db  0x00 ; '.'
000000000020d1c4         db  0x00 ; '.'
000000000020d1c5         db  0x00 ; '.'
000000000020d1c6         db  0x00 ; '.'
000000000020d1c7         db  0x00 ; '.'
000000000020d1c8         db  0x00 ; '.'
000000000020d1c9         db  0x00 ; '.'
000000000020d1ca         db  0x00 ; '.'
000000000020d1cb         db  0x00 ; '.'
000000000020d1cc         db  0x00 ; '.'
000000000020d1cd         db  0x00 ; '.'
000000000020d1ce         db  0x00 ; '.'
000000000020d1cf         db  0x00 ; '.'
000000000020d1d0         db  0x00 ; '.'
000000000020d1d1         db  0x00 ; '.'
000000000020d1d2         db  0x00 ; '.'
000000000020d1d3         db  0x00 ; '.'
000000000020d1d4         db  0x00 ; '.'
000000000020d1d5         db  0x00 ; '.'
000000000020d1d6         db  0x00 ; '.'
000000000020d1d7         db  0x00 ; '.'
000000000020d1d8         db  0x00 ; '.'
000000000020d1d9         db  0x00 ; '.'
000000000020d1da         db  0x00 ; '.'
000000000020d1db         db  0x00 ; '.'
000000000020d1dc         db  0x00 ; '.'
000000000020d1dd         db  0x00 ; '.'
000000000020d1de         db  0x00 ; '.'
000000000020d1df         db  0x00 ; '.'
000000000020d1e0         db  0x00 ; '.'
000000000020d1e1         db  0x00 ; '.'
000000000020d1e2         db  0x00 ; '.'
000000000020d1e3         db  0x00 ; '.'
000000000020d1e4         db  0x00 ; '.'
000000000020d1e5         db  0x00 ; '.'
000000000020d1e6         db  0x00 ; '.'
000000000020d1e7         db  0x00 ; '.'
000000000020d1e8         db  0x00 ; '.'
000000000020d1e9         db  0x00 ; '.'
000000000020d1ea         db  0x00 ; '.'
000000000020d1eb         db  0x00 ; '.'
000000000020d1ec         db  0x00 ; '.'
000000000020d1ed         db  0x00 ; '.'
000000000020d1ee         db  0x00 ; '.'
000000000020d1ef         db  0x00 ; '.'
000000000020d1f0         db  0x00 ; '.'
000000000020d1f1         db  0x00 ; '.'
000000000020d1f2         db  0x00 ; '.'
000000000020d1f3         db  0x00 ; '.'
000000000020d1f4         db  0x00 ; '.'
000000000020d1f5         db  0x00 ; '.'
000000000020d1f6         db  0x00 ; '.'
000000000020d1f7         db  0x00 ; '.'
000000000020d1f8         db  0x00 ; '.'
000000000020d1f9         db  0x00 ; '.'
000000000020d1fa         db  0x00 ; '.'
000000000020d1fb         db  0x00 ; '.'
000000000020d1fc         db  0x00 ; '.'
000000000020d1fd         db  0x00 ; '.'
000000000020d1fe         db  0x00 ; '.'
000000000020d1ff         db  0x00 ; '.'
                     default_quoting_options:
000000000020d200         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
000000000020d201         db  0x00 ; '.'
000000000020d202         db  0x00 ; '.'
000000000020d203         db  0x00 ; '.'
000000000020d204         db  0x00 ; '.'
000000000020d205         db  0x00 ; '.'
000000000020d206         db  0x00 ; '.'
000000000020d207         db  0x00 ; '.'
000000000020d208         db  0x00 ; '.'
000000000020d209         db  0x00 ; '.'
000000000020d20a         db  0x00 ; '.'
000000000020d20b         db  0x00 ; '.'
000000000020d20c         db  0x00 ; '.'
000000000020d20d         db  0x00 ; '.'
000000000020d20e         db  0x00 ; '.'
000000000020d20f         db  0x00 ; '.'
000000000020d210         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
000000000020d211         db  0x00 ; '.'
000000000020d212         db  0x00 ; '.'
000000000020d213         db  0x00 ; '.'
000000000020d214         db  0x00 ; '.'
000000000020d215         db  0x00 ; '.'
000000000020d216         db  0x00 ; '.'
000000000020d217         db  0x00 ; '.'
000000000020d218         db  0x00 ; '.'
000000000020d219         db  0x00 ; '.'
000000000020d21a         db  0x00 ; '.'
000000000020d21b         db  0x00 ; '.'
000000000020d21c         db  0x00 ; '.'
000000000020d21d         db  0x00 ; '.'
000000000020d21e         db  0x00 ; '.'
000000000020d21f         db  0x00 ; '.'
000000000020d220         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
000000000020d221         db  0x00 ; '.'
000000000020d222         db  0x00 ; '.'
000000000020d223         db  0x00 ; '.'
000000000020d224         db  0x00 ; '.'
000000000020d225         db  0x00 ; '.'
000000000020d226         db  0x00 ; '.'
000000000020d227         db  0x00 ; '.'
000000000020d228         db  0x00 ; '.'
000000000020d229         db  0x00 ; '.'
000000000020d22a         db  0x00 ; '.'
000000000020d22b         db  0x00 ; '.'
000000000020d22c         db  0x00 ; '.'
000000000020d22d         db  0x00 ; '.'
000000000020d22e         db  0x00 ; '.'
000000000020d22f         db  0x00 ; '.'
                     qword_20d230:
000000000020d230         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
000000000020d231         db  0x00 ; '.'
000000000020d232         db  0x00 ; '.'
000000000020d233         db  0x00 ; '.'
000000000020d234         db  0x00 ; '.'
000000000020d235         db  0x00 ; '.'
000000000020d236         db  0x00 ; '.'
000000000020d237         db  0x00 ; '.'
                     have_dupfd_cloexec.3326:
000000000020d238         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+94, rpl_fcntl+143, rpl_fcntl+438, rpl_fcntl+574
000000000020d239         db  0x00 ; '.'
000000000020d23a         db  0x00 ; '.'
000000000020d23b         db  0x00 ; '.'
000000000020d23c         db  0x00 ; '.'
000000000020d23d         db  0x00 ; '.'
000000000020d23e         db  0x00 ; '.'
000000000020d23f         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x20d250; 0x20d6f0[ (1184 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x20d250; 0x41a940[ (2152176 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     __uflow:
000000000020d250         extern function code                                   ; DATA XREF=__uflow@GOT
                     free:
000000000020d258         extern function code
                     abort:
000000000020d260         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
000000000020d268         extern function code                                   ; DATA XREF=__errno_location@GOT
                     strncmp:
000000000020d270         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
000000000020d278         extern function code
                     _exit:
000000000020d280         extern function code                                   ; DATA XREF=_exit@GOT
                     ftello:
000000000020d288         extern function code                                   ; DATA XREF=ftello@GOT
                     __fpending:
000000000020d290         extern function code                                   ; DATA XREF=__fpending@GOT
                     __read_chk:
000000000020d298         extern function code                                   ; DATA XREF=__read_chk@GOT
                     ferror:
000000000020d2a0         extern function code                                   ; DATA XREF=ferror@GOT
                     fread:
000000000020d2a8         extern function code                                   ; DATA XREF=fread@GOT
                     fcntl:
000000000020d2b0         extern function code                                   ; DATA XREF=fcntl@GOT
                     getpid:
000000000020d2b8         extern function code                                   ; DATA XREF=getpid@GOT
                     fread_unlocked:
000000000020d2c0         extern function code                                   ; DATA XREF=fread_unlocked@GOT
                     textdomain:
000000000020d2c8         extern function code                                   ; DATA XREF=textdomain@GOT
                     fclose:
000000000020d2d0         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
000000000020d2d8         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     stpcpy:
000000000020d2e0         extern function code                                   ; DATA XREF=stpcpy@GOT
                     dcgettext:
000000000020d2e8         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
000000000020d2f0         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
000000000020d2f8         extern function code                                   ; DATA XREF=strlen@GOT
                     __stack_chk_fail:
000000000020d300         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getuid:
000000000020d308         extern function code                                   ; DATA XREF=getuid@GOT
                     getopt_long:
000000000020d310         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
000000000020d318         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     dup2:
000000000020d320         extern function code                                   ; DATA XREF=dup2@GOT
                     strchr:
000000000020d328         extern function code                                   ; DATA XREF=strchr@GOT
                     strrchr:
000000000020d330         extern function code                                   ; DATA XREF=strrchr@GOT
                     lseek:
000000000020d338         extern function code                                   ; DATA XREF=lseek@GOT
                     gettimeofday:
000000000020d340         extern function code                                   ; DATA XREF=gettimeofday@GOT
                     __assert_fail:
000000000020d348         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     __strtoul_internal:
000000000020d350         extern function code                                   ; DATA XREF=__strtoul_internal@GOT
                     memset:
000000000020d358         extern function code                                   ; DATA XREF=memset@GOT
                     freopen:
000000000020d360         extern function code                                   ; DATA XREF=freopen@GOT
                     close:
000000000020d368         extern function code                                   ; DATA XREF=close@GOT
                     posix_fadvise:
000000000020d370         extern function code                                   ; DATA XREF=posix_fadvise@GOT
                     memchr:
000000000020d378         extern function code                                   ; DATA XREF=memchr@GOT
                     __libc_start_main:
000000000020d380         extern function code
                     memcmp:
000000000020d388         extern function code                                   ; DATA XREF=memcmp@GOT
                     fputs_unlocked:
000000000020d390         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
000000000020d398         extern function code                                   ; DATA XREF=calloc@GOT
                     strcmp:
000000000020d3a0         extern function code                                   ; DATA XREF=strcmp@GOT
                     __gmon_start__:
000000000020d3a8         extern function code
                     memcpy:
000000000020d3b0         extern function code                                   ; DATA XREF=memcpy@GOT
                     fileno:
000000000020d3b8         extern function code                                   ; DATA XREF=fileno@GOT
                     getgid:
000000000020d3c0         extern function code                                   ; DATA XREF=getgid@GOT
                     malloc:
000000000020d3c8         extern function code                                   ; DATA XREF=malloc@GOT
                     fflush:
000000000020d3d0         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
000000000020d3d8         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     __fxstat:
000000000020d3e0         extern function code                                   ; DATA XREF=__fxstat@GOT
                     __freading:
000000000020d3e8         extern function code                                   ; DATA XREF=__freading@GOT
                     fwrite_unlocked:
000000000020d3f0         extern function code                                   ; DATA XREF=fwrite_unlocked@GOT
                     realloc:
000000000020d3f8         extern function code                                   ; DATA XREF=realloc@GOT
                     fdopen:
000000000020d400         extern function code                                   ; DATA XREF=fdopen@GOT
                     setlocale:
000000000020d408         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
000000000020d410         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     setvbuf:
000000000020d418         extern function code                                   ; DATA XREF=setvbuf@GOT
                     error:
000000000020d420         extern function code                                   ; DATA XREF=error@GOT
                     __explicit_bzero_chk:
000000000020d428         extern function code                                   ; DATA XREF=__explicit_bzero_chk@GOT
                     open:
000000000020d430         extern function code                                   ; DATA XREF=open@GOT
                     fseeko:
000000000020d438         extern function code                                   ; DATA XREF=fseeko@GOT
                     fopen:
000000000020d440         extern function code                                   ; DATA XREF=fopen@GOT
                     strtoul:
000000000020d448         extern function code                                   ; DATA XREF=strtoul@GOT
                     __cxa_atexit:
000000000020d450         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     getppid:
000000000020d458         extern function code                                   ; DATA XREF=getppid@GOT
                     exit:
000000000020d460         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
000000000020d468         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
000000000020d470         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
000000000020d478         extern function code
                     mbsinit:
000000000020d480         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
000000000020d488         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
000000000020d490         extern function code
                     __ctype_b_loc:
000000000020d498         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     __uflow@@GLIBC_2.2.5:
000000000020d4a0         extern function code
                     free@@GLIBC_2.2.5:
000000000020d4a8         extern function code
                     abort@@GLIBC_2.2.5:
000000000020d4b0         extern function code
                     __errno_location@@GLIBC_2.2.5:
000000000020d4b8         extern function code
                     strncmp@@GLIBC_2.2.5:
000000000020d4c0         extern function code
                     _ITM_deregisterTMCloneTable_20d4c8:        // _ITM_deregisterTMCloneTable
000000000020d4c8         extern function code
                     _exit@@GLIBC_2.2.5:
000000000020d4d0         extern function code
                     ftello@@GLIBC_2.2.5:
000000000020d4d8         extern function code
                     __fpending@@GLIBC_2.2.5:
000000000020d4e0         extern function code
                     __read_chk@@GLIBC_2.4:
000000000020d4e8         extern function code
                     ferror@@GLIBC_2.2.5:
000000000020d4f0         extern function code
                     fread@@GLIBC_2.2.5:
000000000020d4f8         extern function code
                     fcntl@@GLIBC_2.2.5:
000000000020d500         extern function code
                     getpid@@GLIBC_2.2.5:
000000000020d508         extern function code
                     fread_unlocked@@GLIBC_2.2.5:
000000000020d510         extern function code
                     textdomain@@GLIBC_2.2.5:
000000000020d518         extern function code
                     fclose@@GLIBC_2.2.5:
000000000020d520         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
000000000020d528         extern function code
                     stpcpy@@GLIBC_2.2.5:
000000000020d530         extern function code
                     dcgettext@@GLIBC_2.2.5:
000000000020d538         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
000000000020d540         extern function code
                     strlen@@GLIBC_2.2.5:
000000000020d548         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
000000000020d550         extern function code
                     getuid@@GLIBC_2.2.5:
000000000020d558         extern function code
                     getopt_long@@GLIBC_2.2.5:
000000000020d560         extern function code
                     mbrtowc@@GLIBC_2.2.5:
000000000020d568         extern function code
                     dup2@@GLIBC_2.2.5:
000000000020d570         extern function code
                     strchr@@GLIBC_2.2.5:
000000000020d578         extern function code
                     strrchr@@GLIBC_2.2.5:
000000000020d580         extern function code
                     lseek@@GLIBC_2.2.5:
000000000020d588         extern function code
                     gettimeofday@@GLIBC_2.2.5:
000000000020d590         extern function code
                     __assert_fail@@GLIBC_2.2.5:
000000000020d598         extern function code
                     __strtoul_internal@@GLIBC_2.2.5:
000000000020d5a0         extern function code
                     memset@@GLIBC_2.2.5:
000000000020d5a8         extern function code
                     freopen@@GLIBC_2.2.5:
000000000020d5b0         extern function code
                     close@@GLIBC_2.2.5:
000000000020d5b8         extern function code
                     posix_fadvise@@GLIBC_2.2.5:
000000000020d5c0         extern function code
                     memchr@@GLIBC_2.2.5:
000000000020d5c8         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
000000000020d5d0         extern function code
                     memcmp@@GLIBC_2.2.5:
000000000020d5d8         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
000000000020d5e0         extern function code
                     calloc@@GLIBC_2.2.5:
000000000020d5e8         extern function code
                     strcmp@@GLIBC_2.2.5:
000000000020d5f0         extern function code
                     __gmon_start___20d5f8:        // __gmon_start__
000000000020d5f8         extern function code
                     memcpy@@GLIBC_2.14:
000000000020d600         extern function code
                     fileno@@GLIBC_2.2.5:
000000000020d608         extern function code
                     getgid@@GLIBC_2.2.5:
000000000020d610         extern function code
                     malloc@@GLIBC_2.2.5:
000000000020d618         extern function code
                     fflush@@GLIBC_2.2.5:
000000000020d620         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
000000000020d628         extern function code
                     __fxstat@@GLIBC_2.2.5:
000000000020d630         extern function code
                     __freading@@GLIBC_2.2.5:
000000000020d638         extern function code
                     fwrite_unlocked@@GLIBC_2.2.5:
000000000020d640         extern function code
                     realloc@@GLIBC_2.2.5:
000000000020d648         extern function code
                     fdopen@@GLIBC_2.2.5:
000000000020d650         extern function code
                     setlocale@@GLIBC_2.2.5:
000000000020d658         extern function code
                     __printf_chk@@GLIBC_2.3.4:
000000000020d660         extern function code
                     setvbuf@@GLIBC_2.2.5:
000000000020d668         extern function code
                     error@@GLIBC_2.2.5:
000000000020d670         extern function code
                     __explicit_bzero_chk@@GLIBC_2.25:
000000000020d678         extern function code
                     open@@GLIBC_2.2.5:
000000000020d680         extern function code
                     fseeko@@GLIBC_2.2.5:
000000000020d688         extern function code
                     fopen@@GLIBC_2.2.5:
000000000020d690         extern function code
                     strtoul@@GLIBC_2.2.5:
000000000020d698         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
000000000020d6a0         extern function code
                     getppid@@GLIBC_2.2.5:
000000000020d6a8         extern function code
                     exit@@GLIBC_2.2.5:
000000000020d6b0         extern function code
                     fwrite@@GLIBC_2.2.5:
000000000020d6b8         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
000000000020d6c0         extern function code
                     _ITM_registerTMCloneTable_20d6c8:        // _ITM_registerTMCloneTable
000000000020d6c8         extern function code
                     mbsinit@@GLIBC_2.2.5:
000000000020d6d0         extern function code
                     iswprint@@GLIBC_2.2.5:
000000000020d6d8         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
000000000020d6e0         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
000000000020d6e8         extern function code
