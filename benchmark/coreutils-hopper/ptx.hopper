
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/ptx
        UUID: E9828FD6-766D-E689-337A-577F0ABCE57A
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0x1ffd8[ (131032 bytes)
        ; File offset : [0; 131032[ (131032 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0x40 ; '@'
0000000000000019         db  0x48 ; 'H'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0x08 ; '.'
0000000000000029         db  0xac ; '.'
000000000000002a         db  0x09 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0xd8 ; '.'
00000000000000d1         db  0xff ; '.'
00000000000000d2         db  0x01 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0xd8 ; '.'
00000000000000d9         db  0xff ; '.'
00000000000000da         db  0x01 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0x70 ; 'p'
00000000000000f1         db  0x08 ; '.'
00000000000000f2         db  0x02 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0x70 ; 'p'
00000000000000f9         db  0x08 ; '.'
00000000000000fa         db  0x22 ; '"'
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0x70 ; 'p'                                         ; DATA XREF=main+2906, main+2993, quotearg_free+87, rpl_fflush+18, build_trtable+736, build_trtable+2820, build_charclass.isra.29+219, build_charclass.isra.29+299, build_charclass.isra.29+540, build_charclass.isra.29+612, build_charclass.isra.29+748
0000000000000101         db  0x08 ; '.'
0000000000000102         db  0x22 ; '"'
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0x50 ; 'P'                                         ; DATA XREF=build_trtable+18, build_trtable+1065, knuth_morris_pratt_multibyte+16
0000000000000109         db  0x08 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0x90 ; '.'
0000000000000111         db  0x11 ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0x58 ; 'X'                                         ; DATA XREF=parse_expression+10, sub_153a0+156, re_compile_internal+10, re_compile_internal+947
0000000000000129         db  0x0b ; '.'
000000000000012a         db  0x02 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0x58 ; 'X'
0000000000000131         db  0x0b ; '.'
0000000000000132         db  0x22 ; '"'
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0x58 ; 'X'
0000000000000139         db  0x0b ; '.'
000000000000013a         db  0x22 ; '"'
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'                                         ; DATA XREF=re_compile_fastmap_iter.isra.30+18, re_compile_fastmap_iter.isra.30+1172
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0xb4 ; '.'                                         ; DATA XREF=mbsstr+16, mbsstr+413
0000000000000199         db  0xcf ; '.'
000000000000019a         db  0x01 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0xb4 ; '.'
00000000000001a1         db  0xcf ; '.'
00000000000001a2         db  0x01 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0xb4 ; '.'
00000000000001a9         db  0xcf ; '.'
00000000000001aa         db  0x01 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0x8c ; '.'
00000000000001b1         db  0x06 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0x8c ; '.'
00000000000001b9         db  0x06 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1079
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1141
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'                                         ; DATA XREF=re_search_stub+1110
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=sub_31ea+410, build_trtable+2601, build_trtable+2707, peek_token+1008, peek_token+1092, peek_token+1254
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0x70 ; 'p'
0000000000000209         db  0x08 ; '.'
000000000000020a         db  0x02 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0x70 ; 'p'
0000000000000211         db  0x08 ; '.'
0000000000000212         db  0x22 ; '"'
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0x70 ; 'p'
0000000000000219         db  0x08 ; '.'
000000000000021a         db  0x22 ; '"'
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x90 ; '.'
0000000000000221         db  0x07 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x90 ; '.'
0000000000000229         db  0x07 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0            ; DATA XREF=re_search_internal+24, re_search_internal+2964


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0xe9 ; '.'
0000000000000285         db  0x82 ; '.'
0000000000000286         db  0x8f ; '.'
0000000000000287         db  0xd6 ; '.'
0000000000000288         db  0x76 ; 'v'
0000000000000289         db  0x6d ; 'm'
000000000000028a         db  0xe6 ; '.'
000000000000028b         db  0x89 ; '.'
000000000000028c         db  0x33 ; '3'
000000000000028d         db  0x7a ; 'z'
000000000000028e         db  0x57 ; 'W'
000000000000028f         db  0x7f ; '.'
0000000000000290         db  0x0a ; '.'
0000000000000291         db  0xbc ; '.'
0000000000000292         db  0xe5 ; '.'
0000000000000293         db  0x7a ; 'z'
0000000000000294         db  0x80 ; '.'
0000000000000295         db  0x86 ; '.'
0000000000000296         db  0x8d ; '.'
0000000000000297         db  0x8c ; '.'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2e0[ (72 bytes)
        ; File offset : [664; 736[ (72 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x52 ; 'R'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x61 ; 'a'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0xa0 ; '.'
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x52 ; 'R'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x53 ; 'S'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x59 ; 'Y'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x66 ; 'f'
00000000000002c5         db  0x55 ; 'U'
00000000000002c6         db  0x61 ; 'a'
00000000000002c7         db  0x10 ; '.'
00000000000002c8         db  0x96 ; '.'
00000000000002c9         db  0xa0 ; '.'
00000000000002ca         db  0x89 ; '.'
00000000000002cb         db  0x97 ; '.'
00000000000002cc         db  0xce ; '.'
00000000000002cd         db  0x2c ; ','
00000000000002ce         db  0x63 ; 'c'
00000000000002cf         db  0x72 ; 'r'
00000000000002d0         db  0xe4 ; '.'
00000000000002d1         db  0x62 ; 'b'
00000000000002d2         db  0x41 ; 'A'
00000000000002d3         db  0xf5 ; '.'
00000000000002d4         db  0x39 ; '9'
00000000000002d5         db  0xf2 ; '.'
00000000000002d6         db  0x8b ; '.'
00000000000002d7         db  0x1c ; '.'
00000000000002d8         db  0x32 ; '2'
00000000000002d9         db  0xc4 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0xb3 ; '.'
00000000000002dd         db  0xa2 ; '.'
00000000000002de         db  0xf7 ; '.'
00000000000002df         db  0x12 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0xb68[ (2184 bytes)
        ; File offset : [736; 2920[ (2184 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0x65 ; 'e'
00000000000002f9         db  0x02 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'                                         ; DATA XREF=sub_159d0+7
0000000000000310         db  0x19 ; '.'
0000000000000311         db  0x03 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0xa3 ; '.'
0000000000000329         db  0x00 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0x27 ; '''
0000000000000341         db  0x01 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x40 ; '@'
0000000000000359         db  0x00 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0x7d ; '}'
0000000000000371         db  0x03 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x20 ; ' '
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0xaf ; '.'
0000000000000389         db  0x00 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x8e ; '.'
00000000000003a1         db  0x01 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x12 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0x15 ; '.'
00000000000003b9         db  0x02 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x12 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'                                         ; DATA XREF=create_token_tree.isra.16+136
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x30 ; '0'
00000000000003d1         db  0x02 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0xea ; '.'                                         ; DATA XREF=xstrtoimax+363
00000000000003e9         db  0x02 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'                                         ; DATA XREF=duplicate_node+58, duplicate_node+69, duplicate_node+113, duplicate_node_closure+214, duplicate_node_closure+428, calc_eclosure_iter+605, re_acquire_state_context+346, check_node_accept+118, check_halt_state_context.isra.20+111, build_trtable+211, calc_first+67
0000000000000400         db  0x54 ; 'T'                                         ; DATA XREF=main+1378, xstrtoimax+397, xstrtoimax+1614, build_trtable+894, build_trtable+2048, sub_15b10+1354
0000000000000401         db  0x02 ; '.'
0000000000000402         db  0x00 ; '.'                                         ; DATA XREF=peek_token+736, peek_token+784, peek_token+1266, peek_token+1402
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'
0000000000000407         db  0x00 ; '.'
0000000000000408         db  0x00 ; '.'
0000000000000409         db  0x00 ; '.'
000000000000040a         db  0x00 ; '.'
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x03 ; '.'
0000000000000419         db  0x02 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x27 ; '''
0000000000000431         db  0x02 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'                                         ; DATA XREF=re_search_internal+4162
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0xb6 ; '.'
0000000000000449         db  0x02 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0x75 ; 'u'
0000000000000461         db  0x01 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'                                         ; DATA XREF=re_search_internal+5446
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x17 ; '.'
0000000000000479         db  0x01 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0x6e ; 'n'
0000000000000491         db  0x01 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0xb2 ; '.'
00000000000004a9         db  0x02 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0xf1 ; '.'
00000000000004c1         db  0x02 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0x57 ; 'W'
00000000000004d9         db  0x00 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0xf2 ; '.'
00000000000004f1         db  0x00 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x10 ; '.'
0000000000000509         db  0x01 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0x72 ; 'r'
0000000000000521         db  0x00 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0xd8 ; '.'
0000000000000539         db  0x01 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x29 ; ')'
0000000000000551         db  0x00 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'                                         ; DATA XREF=pop_fail_stack.isra.25+138
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x3f ; '?'
0000000000000569         db  0x01 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0x20 ; ' '
0000000000000581         db  0x02 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0xff ; '.'
0000000000000599         db  0x02 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'                                         ; DATA XREF=sub_17450+32
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'                                         ; DATA XREF=sub_17b30+182
00000000000005b0         db  0x4f ; 'O'                                         ; DATA XREF=sub_17b30+120
00000000000005b1         db  0x00 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'                                         ; DATA XREF=sub_17b30+151
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x61 ; 'a'
00000000000005c9         db  0x01 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0xdb ; '.'
00000000000005e1         db  0x00 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x20 ; ' '
00000000000005f9         db  0x01 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0xe4 ; '.'
0000000000000611         db  0x01 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0x59 ; 'Y'
0000000000000629         db  0x01 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x0f ; '.'
0000000000000641         db  0x02 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0xb5 ; '.'
0000000000000659         db  0x00 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0xd8 ; '.'
0000000000000671         db  0x02 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x38 ; '8'
0000000000000689         db  0x01 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0x19 ; '.'
00000000000006a1         db  0x01 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x0a ; '.'
00000000000006b9         db  0x03 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x12 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0x09 ; '.'
00000000000006d1         db  0x01 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0xd1 ; '.'
00000000000006e9         db  0x02 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x99 ; '.'
0000000000000701         db  0x03 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x20 ; ' '
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x67 ; 'g'
0000000000000719         db  0x01 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0xf5 ; '.'
0000000000000731         db  0x01 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0xd0 ; '.'
0000000000000749         db  0x01 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0xe9 ; '.'
0000000000000761         db  0x00 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0x87 ; '.'
0000000000000779         db  0x01 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x61 ; 'a'
0000000000000791         db  0x00 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x0b ; '.'
00000000000007a9         db  0x00 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0x9d ; '.'
00000000000007c1         db  0x01 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0xec ; '.'
00000000000007d9         db  0x01 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0xbe ; '.'
00000000000007f1         db  0x01 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'                                         ; DATA XREF=peek_token+816, peek_token+1670
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0xc1 ; '.'
0000000000000809         db  0x02 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0x8c ; '.'
0000000000000821         db  0x00 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0x1f ; '.'
0000000000000839         db  0x00 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x12 ; '.'
0000000000000851         db  0x00 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x12 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0x09 ; '.'
0000000000000869         db  0x02 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x69 ; 'i'
0000000000000881         db  0x00 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0x94 ; '.'
0000000000000899         db  0x00 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x12 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0xaa ; '.'
00000000000008b1         db  0x02 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0xeb ; '.'
00000000000008c9         db  0x02 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0x60 ; '`'
00000000000008e1         db  0x02 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x12 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x00 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x00 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x00 ; '.'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x00 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0xf8 ; '.'
00000000000008f9         db  0x02 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x12 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x00 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0x00 ; '.'
0000000000000901         db  0x00 ; '.'
0000000000000902         db  0x00 ; '.'
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x00 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0x3a ; ':'
0000000000000911         db  0x00 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x12 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x00 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0x00 ; '.'
0000000000000919         db  0x00 ; '.'
000000000000091a         db  0x00 ; '.'
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x00 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0x31 ; '1'
0000000000000929         db  0x00 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x12 ; '.'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x00 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0x00 ; '.'
0000000000000931         db  0x00 ; '.'
0000000000000932         db  0x00 ; '.'
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x00 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0x9a ; '.'
0000000000000941         db  0x00 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x12 ; '.'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x00 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0x00 ; '.'
0000000000000949         db  0x00 ; '.'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x00 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0x39 ; '9'
0000000000000959         db  0x03 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x12 ; '.'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x00 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0x00 ; '.'
0000000000000961         db  0x00 ; '.'
0000000000000962         db  0x00 ; '.'
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x00 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0xb0 ; '.'
0000000000000971         db  0x00 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x12 ; '.'
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x00 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x00 ; '.'
0000000000000979         db  0x00 ; '.'
000000000000097a         db  0x00 ; '.'
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x00 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0xfc ; '.'
0000000000000989         db  0x01 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x12 ; '.'
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x00 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0x00 ; '.'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x00 ; '.'
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x00 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0x44 ; 'D'
00000000000009a1         db  0x01 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x12 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x00 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0x00 ; '.'
00000000000009a9         db  0x00 ; '.'
00000000000009aa         db  0x00 ; '.'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x00 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'
00000000000009b8         db  0xa8 ; '.'
00000000000009b9         db  0x03 ; '.'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x00 ; '.'
00000000000009bc         db  0x20 ; ' '
00000000000009bd         db  0x00 ; '.'
00000000000009be         db  0x00 ; '.'
00000000000009bf         db  0x00 ; '.'
00000000000009c0         db  0x00 ; '.'
00000000000009c1         db  0x00 ; '.'
00000000000009c2         db  0x00 ; '.'
00000000000009c3         db  0x00 ; '.'
00000000000009c4         db  0x00 ; '.'
00000000000009c5         db  0x00 ; '.'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x00 ; '.'
00000000000009c8         db  0x00 ; '.'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x00 ; '.'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x00 ; '.'
00000000000009cd         db  0x00 ; '.'
00000000000009ce         db  0x00 ; '.'
00000000000009cf         db  0x00 ; '.'
00000000000009d0         db  0xd4 ; '.'
00000000000009d1         db  0x00 ; '.'
00000000000009d2         db  0x00 ; '.'
00000000000009d3         db  0x00 ; '.'
00000000000009d4         db  0x12 ; '.'
00000000000009d5         db  0x00 ; '.'
00000000000009d6         db  0x00 ; '.'
00000000000009d7         db  0x00 ; '.'
00000000000009d8         db  0x00 ; '.'
00000000000009d9         db  0x00 ; '.'
00000000000009da         db  0x00 ; '.'
00000000000009db         db  0x00 ; '.'
00000000000009dc         db  0x00 ; '.'
00000000000009dd         db  0x00 ; '.'
00000000000009de         db  0x00 ; '.'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x00 ; '.'
00000000000009e1         db  0x00 ; '.'
00000000000009e2         db  0x00 ; '.'
00000000000009e3         db  0x00 ; '.'
00000000000009e4         db  0x00 ; '.'
00000000000009e5         db  0x00 ; '.'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x00 ; '.'
00000000000009e8         db  0x95 ; '.'
00000000000009e9         db  0x01 ; '.'
00000000000009ea         db  0x00 ; '.'
00000000000009eb         db  0x00 ; '.'
00000000000009ec         db  0x12 ; '.'
00000000000009ed         db  0x00 ; '.'
00000000000009ee         db  0x00 ; '.'
00000000000009ef         db  0x00 ; '.'
00000000000009f0         db  0x00 ; '.'
00000000000009f1         db  0x00 ; '.'
00000000000009f2         db  0x00 ; '.'
00000000000009f3         db  0x00 ; '.'
00000000000009f4         db  0x00 ; '.'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x00 ; '.'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x00 ; '.'
00000000000009f9         db  0x00 ; '.'
00000000000009fa         db  0x00 ; '.'
00000000000009fb         db  0x00 ; '.'
00000000000009fc         db  0x00 ; '.'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x00 ; '.'
00000000000009ff         db  0x00 ; '.'
0000000000000a00         db  0x83 ; '.'
0000000000000a01         db  0x00 ; '.'
0000000000000a02         db  0x00 ; '.'
0000000000000a03         db  0x00 ; '.'
0000000000000a04         db  0x12 ; '.'
0000000000000a05         db  0x00 ; '.'
0000000000000a06         db  0x00 ; '.'
0000000000000a07         db  0x00 ; '.'
0000000000000a08         db  0x00 ; '.'
0000000000000a09         db  0x00 ; '.'
0000000000000a0a         db  0x00 ; '.'
0000000000000a0b         db  0x00 ; '.'
0000000000000a0c         db  0x00 ; '.'
0000000000000a0d         db  0x00 ; '.'
0000000000000a0e         db  0x00 ; '.'
0000000000000a0f         db  0x00 ; '.'
0000000000000a10         db  0x00 ; '.'
0000000000000a11         db  0x00 ; '.'
0000000000000a12         db  0x00 ; '.'
0000000000000a13         db  0x00 ; '.'
0000000000000a14         db  0x00 ; '.'
0000000000000a15         db  0x00 ; '.'
0000000000000a16         db  0x00 ; '.'
0000000000000a17         db  0x00 ; '.'
0000000000000a18         db  0x8d ; '.'
0000000000000a19         db  0x02 ; '.'
0000000000000a1a         db  0x00 ; '.'
0000000000000a1b         db  0x00 ; '.'
0000000000000a1c         db  0x22 ; '"'
0000000000000a1d         db  0x00 ; '.'
0000000000000a1e         db  0x00 ; '.'
0000000000000a1f         db  0x00 ; '.'
0000000000000a20         db  0x00 ; '.'
0000000000000a21         db  0x00 ; '.'
0000000000000a22         db  0x00 ; '.'
0000000000000a23         db  0x00 ; '.'
0000000000000a24         db  0x00 ; '.'
0000000000000a25         db  0x00 ; '.'
0000000000000a26         db  0x00 ; '.'
0000000000000a27         db  0x00 ; '.'
0000000000000a28         db  0x00 ; '.'
0000000000000a29         db  0x00 ; '.'
0000000000000a2a         db  0x00 ; '.'
0000000000000a2b         db  0x00 ; '.'
0000000000000a2c         db  0x00 ; '.'
0000000000000a2d         db  0x00 ; '.'
0000000000000a2e         db  0x00 ; '.'
0000000000000a2f         db  0x00 ; '.'
0000000000000a30         db  0x79 ; 'y'
0000000000000a31         db  0x02 ; '.'
0000000000000a32         db  0x00 ; '.'
0000000000000a33         db  0x00 ; '.'
0000000000000a34         db  0x12 ; '.'
0000000000000a35         db  0x00 ; '.'
0000000000000a36         db  0x00 ; '.'
0000000000000a37         db  0x00 ; '.'
0000000000000a38         db  0x00 ; '.'
0000000000000a39         db  0x00 ; '.'
0000000000000a3a         db  0x00 ; '.'
0000000000000a3b         db  0x00 ; '.'
0000000000000a3c         db  0x00 ; '.'
0000000000000a3d         db  0x00 ; '.'
0000000000000a3e         db  0x00 ; '.'
0000000000000a3f         db  0x00 ; '.'
0000000000000a40         db  0x00 ; '.'
0000000000000a41         db  0x00 ; '.'
0000000000000a42         db  0x00 ; '.'
0000000000000a43         db  0x00 ; '.'
0000000000000a44         db  0x00 ; '.'
0000000000000a45         db  0x00 ; '.'
0000000000000a46         db  0x00 ; '.'
0000000000000a47         db  0x00 ; '.'
0000000000000a48         db  0xa9 ; '.'
0000000000000a49         db  0x01 ; '.'
0000000000000a4a         db  0x00 ; '.'
0000000000000a4b         db  0x00 ; '.'
0000000000000a4c         db  0x12 ; '.'
0000000000000a4d         db  0x00 ; '.'
0000000000000a4e         db  0x00 ; '.'
0000000000000a4f         db  0x00 ; '.'
0000000000000a50         db  0x00 ; '.'
0000000000000a51         db  0x00 ; '.'
0000000000000a52         db  0x00 ; '.'
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x00 ; '.'
0000000000000a55         db  0x00 ; '.'
0000000000000a56         db  0x00 ; '.'
0000000000000a57         db  0x00 ; '.'
0000000000000a58         db  0x00 ; '.'
0000000000000a59         db  0x00 ; '.'
0000000000000a5a         db  0x00 ; '.'
0000000000000a5b         db  0x00 ; '.'
0000000000000a5c         db  0x00 ; '.'
0000000000000a5d         db  0x00 ; '.'
0000000000000a5e         db  0x00 ; '.'
0000000000000a5f         db  0x00 ; '.'
0000000000000a60         db  0x5a ; 'Z'
0000000000000a61         db  0x02 ; '.'
0000000000000a62         db  0x00 ; '.'
0000000000000a63         db  0x00 ; '.'
0000000000000a64         db  0x12 ; '.'
0000000000000a65         db  0x00 ; '.'
0000000000000a66         db  0x00 ; '.'
0000000000000a67         db  0x00 ; '.'
0000000000000a68         db  0x00 ; '.'
0000000000000a69         db  0x00 ; '.'
0000000000000a6a         db  0x00 ; '.'
0000000000000a6b         db  0x00 ; '.'
0000000000000a6c         db  0x00 ; '.'
0000000000000a6d         db  0x00 ; '.'
0000000000000a6e         db  0x00 ; '.'
0000000000000a6f         db  0x00 ; '.'
0000000000000a70         db  0x00 ; '.'
0000000000000a71         db  0x00 ; '.'
0000000000000a72         db  0x00 ; '.'
0000000000000a73         db  0x00 ; '.'
0000000000000a74         db  0x00 ; '.'
0000000000000a75         db  0x00 ; '.'
0000000000000a76         db  0x00 ; '.'
0000000000000a77         db  0x00 ; '.'
0000000000000a78         db  0x9c ; '.'
0000000000000a79         db  0x02 ; '.'
0000000000000a7a         db  0x00 ; '.'
0000000000000a7b         db  0x00 ; '.'
0000000000000a7c         db  0x12 ; '.'
0000000000000a7d         db  0x00 ; '.'
0000000000000a7e         db  0x00 ; '.'
0000000000000a7f         db  0x00 ; '.'
0000000000000a80         db  0x00 ; '.'
0000000000000a81         db  0x00 ; '.'
0000000000000a82         db  0x00 ; '.'
0000000000000a83         db  0x00 ; '.'
0000000000000a84         db  0x00 ; '.'
0000000000000a85         db  0x00 ; '.'
0000000000000a86         db  0x00 ; '.'
0000000000000a87         db  0x00 ; '.'
0000000000000a88         db  0x00 ; '.'
0000000000000a89         db  0x00 ; '.'
0000000000000a8a         db  0x00 ; '.'
0000000000000a8b         db  0x00 ; '.'
0000000000000a8c         db  0x00 ; '.'
0000000000000a8d         db  0x00 ; '.'
0000000000000a8e         db  0x00 ; '.'
0000000000000a8f         db  0x00 ; '.'
0000000000000a90         db  0x52 ; 'R'
0000000000000a91         db  0x01 ; '.'
0000000000000a92         db  0x00 ; '.'
0000000000000a93         db  0x00 ; '.'
0000000000000a94         db  0x11 ; '.'
0000000000000a95         db  0x00 ; '.'
0000000000000a96         db  0x19 ; '.'
0000000000000a97         db  0x00 ; '.'
0000000000000a98         db  0xc8 ; '.'
0000000000000a99         db  0x10 ; '.'
0000000000000a9a         db  0x22 ; '"'
0000000000000a9b         db  0x00 ; '.'
0000000000000a9c         db  0x00 ; '.'
0000000000000a9d         db  0x00 ; '.'
0000000000000a9e         db  0x00 ; '.'
0000000000000a9f         db  0x00 ; '.'
0000000000000aa0         db  0x08 ; '.'
0000000000000aa1         db  0x00 ; '.'
0000000000000aa2         db  0x00 ; '.'
0000000000000aa3         db  0x00 ; '.'
0000000000000aa4         db  0x00 ; '.'
0000000000000aa5         db  0x00 ; '.'
0000000000000aa6         db  0x00 ; '.'
0000000000000aa7         db  0x00 ; '.'
0000000000000aa8         db  0x1e ; '.'
0000000000000aa9         db  0x03 ; '.'
0000000000000aaa         db  0x00 ; '.'
0000000000000aab         db  0x00 ; '.'
0000000000000aac         db  0x11 ; '.'
0000000000000aad         db  0x00 ; '.'
0000000000000aae         db  0x19 ; '.'
0000000000000aaf         db  0x00 ; '.'
0000000000000ab0         db  0xc0 ; '.'
0000000000000ab1         db  0x10 ; '.'
0000000000000ab2         db  0x22 ; '"'
0000000000000ab3         db  0x00 ; '.'
0000000000000ab4         db  0x00 ; '.'
0000000000000ab5         db  0x00 ; '.'
0000000000000ab6         db  0x00 ; '.'
0000000000000ab7         db  0x00 ; '.'
0000000000000ab8         db  0x08 ; '.'
0000000000000ab9         db  0x00 ; '.'
0000000000000aba         db  0x00 ; '.'
0000000000000abb         db  0x00 ; '.'
0000000000000abc         db  0x00 ; '.'
0000000000000abd         db  0x00 ; '.'
0000000000000abe         db  0x00 ; '.'
0000000000000abf         db  0x00 ; '.'
0000000000000ac0         db  0xa9 ; '.'
0000000000000ac1         db  0x00 ; '.'
0000000000000ac2         db  0x00 ; '.'
0000000000000ac3         db  0x00 ; '.'
0000000000000ac4         db  0x11 ; '.'
0000000000000ac5         db  0x00 ; '.'
0000000000000ac6         db  0x19 ; '.'
0000000000000ac7         db  0x00 ; '.'
0000000000000ac8         db  0xd0 ; '.'
0000000000000ac9         db  0x10 ; '.'
0000000000000aca         db  0x22 ; '"'
0000000000000acb         db  0x00 ; '.'
0000000000000acc         db  0x00 ; '.'
0000000000000acd         db  0x00 ; '.'
0000000000000ace         db  0x00 ; '.'
0000000000000acf         db  0x00 ; '.'
0000000000000ad0         db  0x08 ; '.'
0000000000000ad1         db  0x00 ; '.'
0000000000000ad2         db  0x00 ; '.'
0000000000000ad3         db  0x00 ; '.'
0000000000000ad4         db  0x00 ; '.'
0000000000000ad5         db  0x00 ; '.'
0000000000000ad6         db  0x00 ; '.'
0000000000000ad7         db  0x00 ; '.'
0000000000000ad8         db  0xbc ; '.'
0000000000000ad9         db  0x00 ; '.'
0000000000000ada         db  0x00 ; '.'
0000000000000adb         db  0x00 ; '.'
0000000000000adc         db  0x21 ; '!'
0000000000000add         db  0x00 ; '.'
0000000000000ade         db  0x19 ; '.'
0000000000000adf         db  0x00 ; '.'
0000000000000ae0         db  0xe8 ; '.'
0000000000000ae1         db  0x10 ; '.'
0000000000000ae2         db  0x22 ; '"'
0000000000000ae3         db  0x00 ; '.'
0000000000000ae4         db  0x00 ; '.'
0000000000000ae5         db  0x00 ; '.'
0000000000000ae6         db  0x00 ; '.'
0000000000000ae7         db  0x00 ; '.'
0000000000000ae8         db  0x08 ; '.'
0000000000000ae9         db  0x00 ; '.'
0000000000000aea         db  0x00 ; '.'
0000000000000aeb         db  0x00 ; '.'
0000000000000aec         db  0x00 ; '.'
0000000000000aed         db  0x00 ; '.'
0000000000000aee         db  0x00 ; '.'
0000000000000aef         db  0x00 ; '.'
0000000000000af0         db  0x29 ; ')'
0000000000000af1         db  0x03 ; '.'
0000000000000af2         db  0x00 ; '.'
0000000000000af3         db  0x00 ; '.'
0000000000000af4         db  0x11 ; '.'
0000000000000af5         db  0x00 ; '.'
0000000000000af6         db  0x19 ; '.'
0000000000000af7         db  0x00 ; '.'
0000000000000af8         db  0xe8 ; '.'
0000000000000af9         db  0x10 ; '.'
0000000000000afa         db  0x22 ; '"'
0000000000000afb         db  0x00 ; '.'
0000000000000afc         db  0x00 ; '.'
0000000000000afd         db  0x00 ; '.'
0000000000000afe         db  0x00 ; '.'
0000000000000aff         db  0x00 ; '.'
0000000000000b00         db  0x08 ; '.'
0000000000000b01         db  0x00 ; '.'
0000000000000b02         db  0x00 ; '.'
0000000000000b03         db  0x00 ; '.'
0000000000000b04         db  0x00 ; '.'
0000000000000b05         db  0x00 ; '.'
0000000000000b06         db  0x00 ; '.'
0000000000000b07         db  0x00 ; '.'
0000000000000b08         db  0x36 ; '6'
0000000000000b09         db  0x02 ; '.'
0000000000000b0a         db  0x00 ; '.'
0000000000000b0b         db  0x00 ; '.'
0000000000000b0c         db  0x21 ; '!'
0000000000000b0d         db  0x00 ; '.'
0000000000000b0e         db  0x19 ; '.'
0000000000000b0f         db  0x00 ; '.'
0000000000000b10         db  0xc0 ; '.'
0000000000000b11         db  0x10 ; '.'
0000000000000b12         db  0x22 ; '"'
0000000000000b13         db  0x00 ; '.'
0000000000000b14         db  0x00 ; '.'
0000000000000b15         db  0x00 ; '.'
0000000000000b16         db  0x00 ; '.'
0000000000000b17         db  0x00 ; '.'
0000000000000b18         db  0x08 ; '.'
0000000000000b19         db  0x00 ; '.'
0000000000000b1a         db  0x00 ; '.'
0000000000000b1b         db  0x00 ; '.'
0000000000000b1c         db  0x00 ; '.'
0000000000000b1d         db  0x00 ; '.'
0000000000000b1e         db  0x00 ; '.'
0000000000000b1f         db  0x00 ; '.'
0000000000000b20         db  0xc9 ; '.'
0000000000000b21         db  0x01 ; '.'
0000000000000b22         db  0x00 ; '.'
0000000000000b23         db  0x00 ; '.'
0000000000000b24         db  0x11 ; '.'
0000000000000b25         db  0x00 ; '.'
0000000000000b26         db  0x19 ; '.'
0000000000000b27         db  0x00 ; '.'
0000000000000b28         db  0x00 ; '.'
0000000000000b29         db  0x11 ; '.'
0000000000000b2a         db  0x22 ; '"'
0000000000000b2b         db  0x00 ; '.'
0000000000000b2c         db  0x00 ; '.'
0000000000000b2d         db  0x00 ; '.'
0000000000000b2e         db  0x00 ; '.'
0000000000000b2f         db  0x00 ; '.'
0000000000000b30         db  0x08 ; '.'
0000000000000b31         db  0x00 ; '.'
0000000000000b32         db  0x00 ; '.'
0000000000000b33         db  0x00 ; '.'
0000000000000b34         db  0x00 ; '.'
0000000000000b35         db  0x00 ; '.'
0000000000000b36         db  0x00 ; '.'
0000000000000b37         db  0x00 ; '.'
0000000000000b38         db  0x48 ; 'H'
0000000000000b39         db  0x00 ; '.'
0000000000000b3a         db  0x00 ; '.'
0000000000000b3b         db  0x00 ; '.'
0000000000000b3c         db  0x11 ; '.'
0000000000000b3d         db  0x00 ; '.'
0000000000000b3e         db  0x19 ; '.'
0000000000000b3f         db  0x00 ; '.'
0000000000000b40         db  0xd8 ; '.'
0000000000000b41         db  0x10 ; '.'
0000000000000b42         db  0x22 ; '"'
0000000000000b43         db  0x00 ; '.'
0000000000000b44         db  0x00 ; '.'
0000000000000b45         db  0x00 ; '.'
0000000000000b46         db  0x00 ; '.'
0000000000000b47         db  0x00 ; '.'
0000000000000b48         db  0x04 ; '.'
0000000000000b49         db  0x00 ; '.'
0000000000000b4a         db  0x00 ; '.'
0000000000000b4b         db  0x00 ; '.'
0000000000000b4c         db  0x00 ; '.'
0000000000000b4d         db  0x00 ; '.'
0000000000000b4e         db  0x00 ; '.'
0000000000000b4f         db  0x00 ; '.'
0000000000000b50         db  0xb7 ; '.'
0000000000000b51         db  0x01 ; '.'
0000000000000b52         db  0x00 ; '.'
0000000000000b53         db  0x00 ; '.'
0000000000000b54         db  0x11 ; '.'
0000000000000b55         db  0x00 ; '.'
0000000000000b56         db  0x19 ; '.'
0000000000000b57         db  0x00 ; '.'
0000000000000b58         db  0xe0 ; '.'
0000000000000b59         db  0x10 ; '.'
0000000000000b5a         db  0x22 ; '"'
0000000000000b5b         db  0x00 ; '.'
0000000000000b5c         db  0x00 ; '.'
0000000000000b5d         db  0x00 ; '.'
0000000000000b5e         db  0x00 ; '.'
0000000000000b5f         db  0x00 ; '.'
0000000000000b60         db  0x08 ; '.'
0000000000000b61         db  0x00 ; '.'
0000000000000b62         db  0x00 ; '.'
0000000000000b63         db  0x00 ; '.'
0000000000000b64         db  0x00 ; '.'
0000000000000b65         db  0x00 ; '.'
0000000000000b66         db  0x00 ; '.'
0000000000000b67         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0xb68; 0xf2a[ (962 bytes)
        ; File offset : [2920; 3882[ (962 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000b68         db  0x00 ; '.'
0000000000000b69         db  0x6c ; 'l'
0000000000000b6a         db  0x69 ; 'i'
0000000000000b6b         db  0x62 ; 'b'
0000000000000b6c         db  0x63 ; 'c'
0000000000000b6d         db  0x2e ; '.'
0000000000000b6e         db  0x73 ; 's'
0000000000000b6f         db  0x6f ; 'o'
0000000000000b70         db  0x2e ; '.'
0000000000000b71         db  0x36 ; '6'
0000000000000b72         db  0x00 ; '.'
0000000000000b73         db  0x66 ; 'f'
0000000000000b74         db  0x66 ; 'f'
0000000000000b75         db  0x6c ; 'l'
0000000000000b76         db  0x75 ; 'u'
0000000000000b77         db  0x73 ; 's'
0000000000000b78         db  0x68 ; 'h'
0000000000000b79         db  0x00 ; '.'
0000000000000b7a         db  0x5f ; '_'
0000000000000b7b         db  0x5f ; '_'
0000000000000b7c         db  0x70 ; 'p'
0000000000000b7d         db  0x72 ; 'r'
0000000000000b7e         db  0x69 ; 'i'
0000000000000b7f         db  0x6e ; 'n'
0000000000000b80         db  0x74 ; 't'
0000000000000b81         db  0x66 ; 'f'
0000000000000b82         db  0x5f ; '_'
0000000000000b83         db  0x63 ; 'c'
0000000000000b84         db  0x68 ; 'h'
0000000000000b85         db  0x6b ; 'k'
0000000000000b86         db  0x00 ; '.'
0000000000000b87         db  0x73 ; 's'
0000000000000b88         db  0x65 ; 'e'
0000000000000b89         db  0x74 ; 't'
0000000000000b8a         db  0x6c ; 'l'
0000000000000b8b         db  0x6f ; 'o'
0000000000000b8c         db  0x63 ; 'c'
0000000000000b8d         db  0x61 ; 'a'
0000000000000b8e         db  0x6c ; 'l'
0000000000000b8f         db  0x65 ; 'e'
0000000000000b90         db  0x00 ; '.'
0000000000000b91         db  0x6d ; 'm'
0000000000000b92         db  0x62 ; 'b'
0000000000000b93         db  0x72 ; 'r'
0000000000000b94         db  0x74 ; 't'
0000000000000b95         db  0x6f ; 'o'
0000000000000b96         db  0x77 ; 'w'
0000000000000b97         db  0x63 ; 'c'
0000000000000b98         db  0x00 ; '.'
0000000000000b99         db  0x74 ; 't'
0000000000000b9a         db  0x6f ; 'o'
0000000000000b9b         db  0x77 ; 'w'
0000000000000b9c         db  0x6c ; 'l'
0000000000000b9d         db  0x6f ; 'o'
0000000000000b9e         db  0x77 ; 'w'
0000000000000b9f         db  0x65 ; 'e'
0000000000000ba0         db  0x72 ; 'r'
0000000000000ba1         db  0x00 ; '.'
0000000000000ba2         db  0x66 ; 'f'
0000000000000ba3         db  0x6f ; 'o'
0000000000000ba4         db  0x70 ; 'p'
0000000000000ba5         db  0x65 ; 'e'
0000000000000ba6         db  0x6e ; 'n'
0000000000000ba7         db  0x00 ; '.'
0000000000000ba8         db  0x73 ; 's'
0000000000000ba9         db  0x74 ; 't'
0000000000000baa         db  0x72 ; 'r'
0000000000000bab         db  0x6e ; 'n'
0000000000000bac         db  0x63 ; 'c'
0000000000000bad         db  0x6d ; 'm'
0000000000000bae         db  0x70 ; 'p'
0000000000000baf         db  0x00 ; '.'
0000000000000bb0         db  0x6f ; 'o'
0000000000000bb1         db  0x70 ; 'p'
0000000000000bb2         db  0x74 ; 't'
0000000000000bb3         db  0x69 ; 'i'
0000000000000bb4         db  0x6e ; 'n'
0000000000000bb5         db  0x64 ; 'd'
0000000000000bb6         db  0x00 ; '.'
0000000000000bb7         db  0x73 ; 's'
0000000000000bb8         db  0x74 ; 't'
0000000000000bb9         db  0x72 ; 'r'
0000000000000bba         db  0x72 ; 'r'
0000000000000bbb         db  0x63 ; 'c'
0000000000000bbc         db  0x68 ; 'h'
0000000000000bbd         db  0x72 ; 'r'
0000000000000bbe         db  0x00 ; '.'
0000000000000bbf         db  0x64 ; 'd'
0000000000000bc0         db  0x63 ; 'c'
0000000000000bc1         db  0x67 ; 'g'
0000000000000bc2         db  0x65 ; 'e'
0000000000000bc3         db  0x74 ; 't'
0000000000000bc4         db  0x74 ; 't'
0000000000000bc5         db  0x65 ; 'e'
0000000000000bc6         db  0x78 ; 'x'
0000000000000bc7         db  0x74 ; 't'
0000000000000bc8         db  0x00 ; '.'
0000000000000bc9         db  0x77 ; 'w'
0000000000000bca         db  0x63 ; 'c'
0000000000000bcb         db  0x72 ; 'r'
0000000000000bcc         db  0x74 ; 't'
0000000000000bcd         db  0x6f ; 'o'
0000000000000bce         db  0x6d ; 'm'
0000000000000bcf         db  0x62 ; 'b'
0000000000000bd0         db  0x00 ; '.'
0000000000000bd1         db  0x69 ; 'i'
0000000000000bd2         db  0x73 ; 's'
0000000000000bd3         db  0x77 ; 'w'
0000000000000bd4         db  0x73 ; 's'
0000000000000bd5         db  0x70 ; 'p'
0000000000000bd6         db  0x61 ; 'a'
0000000000000bd7         db  0x63 ; 'c'
0000000000000bd8         db  0x65 ; 'e'
0000000000000bd9         db  0x00 ; '.'
0000000000000bda         db  0x5f ; '_'
0000000000000bdb         db  0x5f ; '_'
0000000000000bdc         db  0x73 ; 's'
0000000000000bdd         db  0x74 ; 't'
0000000000000bde         db  0x61 ; 'a'
0000000000000bdf         db  0x63 ; 'c'
0000000000000be0         db  0x6b ; 'k'
0000000000000be1         db  0x5f ; '_'
0000000000000be2         db  0x63 ; 'c'
0000000000000be3         db  0x68 ; 'h'
0000000000000be4         db  0x6b ; 'k'
0000000000000be5         db  0x5f ; '_'
0000000000000be6         db  0x66 ; 'f'
0000000000000be7         db  0x61 ; 'a'
0000000000000be8         db  0x69 ; 'i'
0000000000000be9         db  0x6c ; 'l'
0000000000000bea         db  0x00 ; '.'
0000000000000beb         db  0x69 ; 'i'
0000000000000bec         db  0x73 ; 's'
0000000000000bed         db  0x77 ; 'w'
0000000000000bee         db  0x70 ; 'p'
0000000000000bef         db  0x72 ; 'r'
0000000000000bf0         db  0x69 ; 'i'
0000000000000bf1         db  0x6e ; 'n'
0000000000000bf2         db  0x74 ; 't'
0000000000000bf3         db  0x00 ; '.'
0000000000000bf4         db  0x72 ; 'r'
0000000000000bf5         db  0x65 ; 'e'
0000000000000bf6         db  0x61 ; 'a'
0000000000000bf7         db  0x6c ; 'l'
0000000000000bf8         db  0x6c ; 'l'
0000000000000bf9         db  0x6f ; 'o'
0000000000000bfa         db  0x63 ; 'c'
0000000000000bfb         db  0x00 ; '.'
0000000000000bfc         db  0x62 ; 'b'
0000000000000bfd         db  0x74 ; 't'
0000000000000bfe         db  0x6f ; 'o'
0000000000000bff         db  0x77 ; 'w'
0000000000000c00         db  0x63 ; 'c'
0000000000000c01         db  0x00 ; '.'
0000000000000c02         db  0x74 ; 't'
0000000000000c03         db  0x6f ; 'o'
0000000000000c04         db  0x77 ; 'w'
0000000000000c05         db  0x75 ; 'u'
0000000000000c06         db  0x70 ; 'p'
0000000000000c07         db  0x70 ; 'p'
0000000000000c08         db  0x65 ; 'e'
0000000000000c09         db  0x72 ; 'r'
0000000000000c0a         db  0x00 ; '.'
0000000000000c0b         db  0x61 ; 'a'
0000000000000c0c         db  0x62 ; 'b'
0000000000000c0d         db  0x6f ; 'o'
0000000000000c0e         db  0x72 ; 'r'
0000000000000c0f         db  0x74 ; 't'
0000000000000c10         db  0x00 ; '.'
0000000000000c11         db  0x73 ; 's'
0000000000000c12         db  0x74 ; 't'
0000000000000c13         db  0x64 ; 'd'
0000000000000c14         db  0x69 ; 'i'
0000000000000c15         db  0x6e ; 'n'
0000000000000c16         db  0x00 ; '.'
0000000000000c17         db  0x5f ; '_'
0000000000000c18         db  0x65 ; 'e'
0000000000000c19         db  0x78 ; 'x'
0000000000000c1a         db  0x69 ; 'i'
0000000000000c1b         db  0x74 ; 't'
0000000000000c1c         db  0x00 ; '.'
0000000000000c1d         db  0x6d ; 'm'
0000000000000c1e         db  0x65 ; 'e'
0000000000000c1f         db  0x6d ; 'm'
0000000000000c20         db  0x63 ; 'c'
0000000000000c21         db  0x68 ; 'h'
0000000000000c22         db  0x72 ; 'r'
0000000000000c23         db  0x00 ; '.'
0000000000000c24         db  0x70 ; 'p'
0000000000000c25         db  0x72 ; 'r'
0000000000000c26         db  0x6f ; 'o'
0000000000000c27         db  0x67 ; 'g'
0000000000000c28         db  0x72 ; 'r'
0000000000000c29         db  0x61 ; 'a'
0000000000000c2a         db  0x6d ; 'm'
0000000000000c2b         db  0x5f ; '_'
0000000000000c2c         db  0x69 ; 'i'
0000000000000c2d         db  0x6e ; 'n'
0000000000000c2e         db  0x76 ; 'v'
0000000000000c2f         db  0x6f ; 'o'
0000000000000c30         db  0x63 ; 'c'
0000000000000c31         db  0x61 ; 'a'
0000000000000c32         db  0x74 ; 't'
0000000000000c33         db  0x69 ; 'i'
0000000000000c34         db  0x6f ; 'o'
0000000000000c35         db  0x6e ; 'n'
0000000000000c36         db  0x5f ; '_'
0000000000000c37         db  0x6e ; 'n'
0000000000000c38         db  0x61 ; 'a'
0000000000000c39         db  0x6d ; 'm'
0000000000000c3a         db  0x65 ; 'e'
0000000000000c3b         db  0x00 ; '.'
0000000000000c3c         db  0x73 ; 's'
0000000000000c3d         db  0x74 ; 't'
0000000000000c3e         db  0x72 ; 'r'
0000000000000c3f         db  0x64 ; 'd'
0000000000000c40         db  0x75 ; 'u'
0000000000000c41         db  0x70 ; 'p'
0000000000000c42         db  0x00 ; '.'
0000000000000c43         db  0x5f ; '_'
0000000000000c44         db  0x5f ; '_'
0000000000000c45         db  0x61 ; 'a'
0000000000000c46         db  0x73 ; 's'
0000000000000c47         db  0x73 ; 's'
0000000000000c48         db  0x65 ; 'e'
0000000000000c49         db  0x72 ; 'r'
0000000000000c4a         db  0x74 ; 't'
0000000000000c4b         db  0x5f ; '_'
0000000000000c4c         db  0x66 ; 'f'
0000000000000c4d         db  0x61 ; 'a'
0000000000000c4e         db  0x69 ; 'i'
0000000000000c4f         db  0x6c ; 'l'
0000000000000c50         db  0x00 ; '.'
0000000000000c51         db  0x69 ; 'i'
0000000000000c52         db  0x73 ; 's'
0000000000000c53         db  0x77 ; 'w'
0000000000000c54         db  0x61 ; 'a'
0000000000000c55         db  0x6c ; 'l'
0000000000000c56         db  0x6e ; 'n'
0000000000000c57         db  0x75 ; 'u'
0000000000000c58         db  0x6d ; 'm'
0000000000000c59         db  0x00 ; '.'
0000000000000c5a         db  0x5f ; '_'
0000000000000c5b         db  0x5f ; '_'
0000000000000c5c         db  0x63 ; 'c'
0000000000000c5d         db  0x74 ; 't'
0000000000000c5e         db  0x79 ; 'y'
0000000000000c5f         db  0x70 ; 'p'
0000000000000c60         db  0x65 ; 'e'
0000000000000c61         db  0x5f ; '_'
0000000000000c62         db  0x67 ; 'g'
0000000000000c63         db  0x65 ; 'e'
0000000000000c64         db  0x74 ; 't'
0000000000000c65         db  0x5f ; '_'
0000000000000c66         db  0x6d ; 'm'
0000000000000c67         db  0x62 ; 'b'
0000000000000c68         db  0x5f ; '_'
0000000000000c69         db  0x63 ; 'c'
0000000000000c6a         db  0x75 ; 'u'
0000000000000c6b         db  0x72 ; 'r'
0000000000000c6c         db  0x5f ; '_'
0000000000000c6d         db  0x6d ; 'm'
0000000000000c6e         db  0x61 ; 'a'
0000000000000c6f         db  0x78 ; 'x'
0000000000000c70         db  0x00 ; '.'
0000000000000c71         db  0x63 ; 'c'
0000000000000c72         db  0x61 ; 'a'
0000000000000c73         db  0x6c ; 'l'
0000000000000c74         db  0x6c ; 'l'
0000000000000c75         db  0x6f ; 'o'
0000000000000c76         db  0x63 ; 'c'
0000000000000c77         db  0x00 ; '.'
0000000000000c78         db  0x73 ; 's'
0000000000000c79         db  0x74 ; 't'
0000000000000c7a         db  0x72 ; 'r'
0000000000000c7b         db  0x6c ; 'l'
0000000000000c7c         db  0x65 ; 'e'
0000000000000c7d         db  0x6e ; 'n'
0000000000000c7e         db  0x00 ; '.'
0000000000000c7f         db  0x69 ; 'i'
0000000000000c80         db  0x73 ; 's'
0000000000000c81         db  0x77 ; 'w'
0000000000000c82         db  0x63 ; 'c'
0000000000000c83         db  0x74 ; 't'
0000000000000c84         db  0x79 ; 'y'
0000000000000c85         db  0x70 ; 'p'
0000000000000c86         db  0x65 ; 'e'
0000000000000c87         db  0x00 ; '.'
0000000000000c88         db  0x6d ; 'm'
0000000000000c89         db  0x65 ; 'e'
0000000000000c8a         db  0x6d ; 'm'
0000000000000c8b         db  0x73 ; 's'
0000000000000c8c         db  0x65 ; 'e'
0000000000000c8d         db  0x74 ; 't'
0000000000000c8e         db  0x00 ; '.'
0000000000000c8f         db  0x5f ; '_'
0000000000000c90         db  0x5f ; '_'
0000000000000c91         db  0x65 ; 'e'
0000000000000c92         db  0x72 ; 'r'
0000000000000c93         db  0x72 ; 'r'
0000000000000c94         db  0x6e ; 'n'
0000000000000c95         db  0x6f ; 'o'
0000000000000c96         db  0x5f ; '_'
0000000000000c97         db  0x6c ; 'l'
0000000000000c98         db  0x6f ; 'o'
0000000000000c99         db  0x63 ; 'c'
0000000000000c9a         db  0x61 ; 'a'
0000000000000c9b         db  0x74 ; 't'
0000000000000c9c         db  0x69 ; 'i'
0000000000000c9d         db  0x6f ; 'o'
0000000000000c9e         db  0x6e ; 'n'
0000000000000c9f         db  0x00 ; '.'
0000000000000ca0         db  0x6d ; 'm'
0000000000000ca1         db  0x65 ; 'e'
0000000000000ca2         db  0x6d ; 'm'
0000000000000ca3         db  0x63 ; 'c'
0000000000000ca4         db  0x6d ; 'm'
0000000000000ca5         db  0x70 ; 'p'
0000000000000ca6         db  0x00 ; '.'
0000000000000ca7         db  0x64 ; 'd'
0000000000000ca8         db  0x75 ; 'u'
0000000000000ca9         db  0x70 ; 'p'
0000000000000caa         db  0x32 ; '2'
0000000000000cab         db  0x00 ; '.'
0000000000000cac         db  0x5f ; '_'
0000000000000cad         db  0x5f ; '_'
0000000000000cae         db  0x66 ; 'f'
0000000000000caf         db  0x70 ; 'p'
0000000000000cb0         db  0x72 ; 'r'
0000000000000cb1         db  0x69 ; 'i'
0000000000000cb2         db  0x6e ; 'n'
0000000000000cb3         db  0x74 ; 't'
0000000000000cb4         db  0x66 ; 'f'
0000000000000cb5         db  0x5f ; '_'
0000000000000cb6         db  0x63 ; 'c'
0000000000000cb7         db  0x68 ; 'h'
0000000000000cb8         db  0x6b ; 'k'
0000000000000cb9         db  0x00 ; '.'
0000000000000cba         db  0x73 ; 's'
0000000000000cbb         db  0x74 ; 't'
0000000000000cbc         db  0x64 ; 'd'
0000000000000cbd         db  0x6f ; 'o'
0000000000000cbe         db  0x75 ; 'u'
0000000000000cbf         db  0x74 ; 't'
0000000000000cc0         db  0x00 ; '.'
0000000000000cc1         db  0x73 ; 's'
0000000000000cc2         db  0x74 ; 't'
0000000000000cc3         db  0x72 ; 'r'
0000000000000cc4         db  0x6e ; 'n'
0000000000000cc5         db  0x6c ; 'l'
0000000000000cc6         db  0x65 ; 'e'
0000000000000cc7         db  0x6e ; 'n'
0000000000000cc8         db  0x00 ; '.'
0000000000000cc9         db  0x6c ; 'l'
0000000000000cca         db  0x73 ; 's'
0000000000000ccb         db  0x65 ; 'e'
0000000000000ccc         db  0x65 ; 'e'
0000000000000ccd         db  0x6b ; 'k'
0000000000000cce         db  0x00 ; '.'
0000000000000ccf         db  0x6d ; 'm'
0000000000000cd0         db  0x65 ; 'e'
0000000000000cd1         db  0x6d ; 'm'
0000000000000cd2         db  0x63 ; 'c'
0000000000000cd3         db  0x70 ; 'p'
0000000000000cd4         db  0x79 ; 'y'
0000000000000cd5         db  0x00 ; '.'
0000000000000cd6         db  0x66 ; 'f'
0000000000000cd7         db  0x63 ; 'c'
0000000000000cd8         db  0x6c ; 'l'
0000000000000cd9         db  0x6f ; 'o'
0000000000000cda         db  0x73 ; 's'
0000000000000cdb         db  0x65 ; 'e'
0000000000000cdc         db  0x00 ; '.'
0000000000000cdd         db  0x5f ; '_'
0000000000000cde         db  0x5f ; '_'
0000000000000cdf         db  0x73 ; 's'
0000000000000ce0         db  0x74 ; 't'
0000000000000ce1         db  0x72 ; 'r'
0000000000000ce2         db  0x74 ; 't'
0000000000000ce3         db  0x6f ; 'o'
0000000000000ce4         db  0x6c ; 'l'
0000000000000ce5         db  0x5f ; '_'
0000000000000ce6         db  0x69 ; 'i'
0000000000000ce7         db  0x6e ; 'n'
0000000000000ce8         db  0x74 ; 't'
0000000000000ce9         db  0x65 ; 'e'
0000000000000cea         db  0x72 ; 'r'
0000000000000ceb         db  0x6e ; 'n'
0000000000000cec         db  0x61 ; 'a'
0000000000000ced         db  0x6c ; 'l'                                         ; DATA XREF=sub_15b10+2831
0000000000000cee         db  0x00 ; '.'
0000000000000cef         db  0x6d ; 'm'
0000000000000cf0         db  0x61 ; 'a'
0000000000000cf1         db  0x6c ; 'l'
0000000000000cf2         db  0x6c ; 'l'
0000000000000cf3         db  0x6f ; 'o'
0000000000000cf4         db  0x63 ; 'c'
0000000000000cf5         db  0x00 ; '.'
0000000000000cf6         db  0x66 ; 'f'
0000000000000cf7         db  0x74 ; 't'
0000000000000cf8         db  0x65 ; 'e'
0000000000000cf9         db  0x6c ; 'l'
0000000000000cfa         db  0x6c ; 'l'
0000000000000cfb         db  0x6f ; 'o'
0000000000000cfc         db  0x00 ; '.'
0000000000000cfd         db  0x6d ; 'm'
0000000000000cfe         db  0x62 ; 'b'
0000000000000cff         db  0x73 ; 's'
                     aInit:
0000000000000d00         db         "init", 0
0000000000000d05         db  0x6e ; 'n'
0000000000000d06         db  0x6c ; 'l'
0000000000000d07         db  0x5f ; '_'
0000000000000d08         db  0x6c ; 'l'
0000000000000d09         db  0x61 ; 'a'
0000000000000d0a         db  0x6e ; 'n'
0000000000000d0b         db  0x67 ; 'g'
0000000000000d0c         db  0x69 ; 'i'
0000000000000d0d         db  0x6e ; 'n'
0000000000000d0e         db  0x66 ; 'f'
0000000000000d0f         db  0x6f ; 'o'
0000000000000d10         db  0x00 ; '.'
0000000000000d11         db  0x5f ; '_'
0000000000000d12         db  0x5f ; '_'
0000000000000d13         db  0x63 ; 'c'
0000000000000d14         db  0x74 ; 't'
0000000000000d15         db  0x79 ; 'y'
0000000000000d16         db  0x70 ; 'p'
0000000000000d17         db  0x65 ; 'e'
0000000000000d18         db  0x5f ; '_'
0000000000000d19         db  0x62 ; 'b'
0000000000000d1a         db  0x5f ; '_'
0000000000000d1b         db  0x6c ; 'l'
0000000000000d1c         db  0x6f ; 'o'
0000000000000d1d         db  0x63 ; 'c'
0000000000000d1e         db  0x00 ; '.'
0000000000000d1f         db  0x6f ; 'o'
0000000000000d20         db  0x70 ; 'p'
0000000000000d21         db  0x74 ; 't'
0000000000000d22         db  0x61 ; 'a'
0000000000000d23         db  0x72 ; 'r'
0000000000000d24         db  0x67 ; 'g'
0000000000000d25         db  0x00 ; '.'
0000000000000d26         db  0x5f ; '_'
0000000000000d27         db  0x5f ; '_'
0000000000000d28         db  0x66 ; 'f'
0000000000000d29         db  0x72 ; 'r'
0000000000000d2a         db  0x65 ; 'e'
0000000000000d2b         db  0x61 ; 'a'
0000000000000d2c         db  0x64 ; 'd'
0000000000000d2d         db  0x69 ; 'i'
0000000000000d2e         db  0x6e ; 'n'
0000000000000d2f         db  0x67 ; 'g'
0000000000000d30         db  0x00 ; '.'
0000000000000d31         db  0x73 ; 's'
0000000000000d32         db  0x74 ; 't'
0000000000000d33         db  0x64 ; 'd'
0000000000000d34         db  0x65 ; 'e'
0000000000000d35         db  0x72 ; 'r'
0000000000000d36         db  0x72 ; 'r'
0000000000000d37         db  0x00 ; '.'
0000000000000d38         db  0x77 ; 'w'
0000000000000d39         db  0x63 ; 'c'
0000000000000d3a         db  0x77 ; 'w'
0000000000000d3b         db  0x69 ; 'i'
0000000000000d3c         db  0x64 ; 'd'
0000000000000d3d         db  0x74 ; 't'
0000000000000d3e         db  0x68 ; 'h'
0000000000000d3f         db  0x00 ; '.'
0000000000000d40         db  0x67 ; 'g'
0000000000000d41         db  0x65 ; 'e'
0000000000000d42         db  0x74 ; 't'
0000000000000d43         db  0x6f ; 'o'
0000000000000d44         db  0x70 ; 'p'
0000000000000d45         db  0x74 ; 't'
0000000000000d46         db  0x5f ; '_'
0000000000000d47         db  0x6c ; 'l'
0000000000000d48         db  0x6f ; 'o'
0000000000000d49         db  0x6e ; 'n'
0000000000000d4a         db  0x67 ; 'g'
0000000000000d4b         db  0x00 ; '.'
0000000000000d4c         db  0x66 ; 'f'
0000000000000d4d         db  0x72 ; 'r'
0000000000000d4e         db  0x65 ; 'e'
0000000000000d4f         db  0x6f ; 'o'
0000000000000d50         db  0x70 ; 'p'
0000000000000d51         db  0x65 ; 'e'
0000000000000d52         db  0x6e ; 'n'
0000000000000d53         db  0x00 ; '.'
0000000000000d54         db  0x5f ; '_'
0000000000000d55         db  0x5f ; '_'
0000000000000d56         db  0x66 ; 'f'
0000000000000d57         db  0x78 ; 'x'
0000000000000d58         db  0x73 ; 's'
0000000000000d59         db  0x74 ; 't'
0000000000000d5a         db  0x61 ; 'a'
0000000000000d5b         db  0x74 ; 't'
0000000000000d5c         db  0x00 ; '.'
0000000000000d5d         db  0x66 ; 'f'
0000000000000d5e         db  0x69 ; 'i'
0000000000000d5f         db  0x6c ; 'l'
0000000000000d60         db  0x65 ; 'e'
0000000000000d61         db  0x6e ; 'n'
0000000000000d62         db  0x6f ; 'o'
0000000000000d63         db  0x00 ; '.'
0000000000000d64         db  0x66 ; 'f'
0000000000000d65         db  0x77 ; 'w'
0000000000000d66         db  0x72 ; 'r'
0000000000000d67         db  0x69 ; 'i'
0000000000000d68         db  0x74 ; 't'
0000000000000d69         db  0x65 ; 'e'
0000000000000d6a         db  0x00 ; '.'
0000000000000d6b         db  0x66 ; 'f'
0000000000000d6c         db  0x72 ; 'r'
0000000000000d6d         db  0x65 ; 'e'
0000000000000d6e         db  0x61 ; 'a'
0000000000000d6f         db  0x64 ; 'd'
0000000000000d70         db  0x00 ; '.'
0000000000000d71         db  0x69 ; 'i'
0000000000000d72         db  0x63 ; 'c'
0000000000000d73         db  0x6f ; 'o'
0000000000000d74         db  0x6e ; 'n'
0000000000000d75         db  0x76 ; 'v'
0000000000000d76         db  0x5f ; '_'
0000000000000d77         db  0x63 ; 'c'
0000000000000d78         db  0x6c ; 'l'
0000000000000d79         db  0x6f ; 'o'
0000000000000d7a         db  0x73 ; 's'
0000000000000d7b         db  0x65 ; 'e'
0000000000000d7c         db  0x00 ; '.'
0000000000000d7d         db  0x5f ; '_'
0000000000000d7e         db  0x5f ; '_'
0000000000000d7f         db  0x66 ; 'f'
0000000000000d80         db  0x70 ; 'p'
0000000000000d81         db  0x65 ; 'e'
0000000000000d82         db  0x6e ; 'n'
0000000000000d83         db  0x64 ; 'd'
0000000000000d84         db  0x69 ; 'i'
0000000000000d85         db  0x6e ; 'n'
0000000000000d86         db  0x67 ; 'g'
0000000000000d87         db  0x00 ; '.'
0000000000000d88         db  0x73 ; 's'
0000000000000d89         db  0x74 ; 't'
0000000000000d8a         db  0x72 ; 'r'
0000000000000d8b         db  0x63 ; 'c'
0000000000000d8c         db  0x68 ; 'h'
0000000000000d8d         db  0x72 ; 'r'
0000000000000d8e         db  0x00 ; '.'
0000000000000d8f         db  0x69 ; 'i'
0000000000000d90         db  0x73 ; 's'
0000000000000d91         db  0x77 ; 'w'
0000000000000d92         db  0x63 ; 'c'
0000000000000d93         db  0x6e ; 'n'
0000000000000d94         db  0x74 ; 't'
0000000000000d95         db  0x72 ; 'r'
0000000000000d96         db  0x6c ; 'l'
0000000000000d97         db  0x00 ; '.'
0000000000000d98         db  0x69 ; 'i'
0000000000000d99         db  0x63 ; 'c'
0000000000000d9a         db  0x6f ; 'o'
0000000000000d9b         db  0x6e ; 'n'
0000000000000d9c         db  0x76 ; 'v'
0000000000000d9d         db  0x00 ; '.'
0000000000000d9e         db  0x70 ; 'p'
0000000000000d9f         db  0x72 ; 'r'
0000000000000da0         db  0x6f ; 'o'
0000000000000da1         db  0x67 ; 'g'
0000000000000da2         db  0x72 ; 'r'
0000000000000da3         db  0x61 ; 'a'
0000000000000da4         db  0x6d ; 'm'
0000000000000da5         db  0x5f ; '_'
0000000000000da6         db  0x69 ; 'i'
0000000000000da7         db  0x6e ; 'n'
0000000000000da8         db  0x76 ; 'v'
0000000000000da9         db  0x6f ; 'o'
0000000000000daa         db  0x63 ; 'c'
0000000000000dab         db  0x61 ; 'a'
0000000000000dac         db  0x74 ; 't'
0000000000000dad         db  0x69 ; 'i'
0000000000000dae         db  0x6f ; 'o'
0000000000000daf         db  0x6e ; 'n'
0000000000000db0         db  0x5f ; '_'
0000000000000db1         db  0x73 ; 's'
0000000000000db2         db  0x68 ; 'h'
0000000000000db3         db  0x6f ; 'o'
0000000000000db4         db  0x72 ; 'r'
0000000000000db5         db  0x74 ; 't'
0000000000000db6         db  0x5f ; '_'
0000000000000db7         db  0x6e ; 'n'
0000000000000db8         db  0x61 ; 'a'
0000000000000db9         db  0x6d ; 'm'
0000000000000dba         db  0x65 ; 'e'
0000000000000dbb         db  0x00 ; '.'
0000000000000dbc         db  0x71 ; 'q'
0000000000000dbd         db  0x73 ; 's'
0000000000000dbe         db  0x6f ; 'o'
0000000000000dbf         db  0x72 ; 'r'
0000000000000dc0         db  0x74 ; 't'
0000000000000dc1         db  0x00 ; '.'
0000000000000dc2         db  0x69 ; 'i'
0000000000000dc3         db  0x63 ; 'c'
0000000000000dc4         db  0x6f ; 'o'
0000000000000dc5         db  0x6e ; 'n'
0000000000000dc6         db  0x76 ; 'v'
0000000000000dc7         db  0x5f ; '_'
0000000000000dc8         db  0x6f ; 'o'
0000000000000dc9         db  0x70 ; 'p'
0000000000000dca         db  0x65 ; 'e'
0000000000000dcb         db  0x6e ; 'n'
0000000000000dcc         db  0x00 ; '.'
0000000000000dcd         db  0x5f ; '_'
0000000000000dce         db  0x5f ; '_'
0000000000000dcf         db  0x63 ; 'c'
0000000000000dd0         db  0x74 ; 't'
0000000000000dd1         db  0x79 ; 'y'
0000000000000dd2         db  0x70 ; 'p'
0000000000000dd3         db  0x65 ; 'e'
0000000000000dd4         db  0x5f ; '_'
0000000000000dd5         db  0x74 ; 't'
0000000000000dd6         db  0x6f ; 'o'
0000000000000dd7         db  0x75 ; 'u'
0000000000000dd8         db  0x70 ; 'p'
0000000000000dd9         db  0x70 ; 'p'
0000000000000dda         db  0x65 ; 'e'
0000000000000ddb         db  0x72 ; 'r'
0000000000000ddc         db  0x5f ; '_'
0000000000000ddd         db  0x6c ; 'l'
0000000000000dde         db  0x6f ; 'o'
0000000000000ddf         db  0x63 ; 'c'
0000000000000de0         db  0x00 ; '.'
0000000000000de1         db  0x5f ; '_'
0000000000000de2         db  0x5f ; '_'
0000000000000de3         db  0x63 ; 'c'
0000000000000de4         db  0x74 ; 't'
0000000000000de5         db  0x79 ; 'y'
0000000000000de6         db  0x70 ; 'p'
0000000000000de7         db  0x65 ; 'e'
0000000000000de8         db  0x5f ; '_'
0000000000000de9         db  0x74 ; 't'
0000000000000dea         db  0x6f ; 'o'
0000000000000deb         db  0x6c ; 'l'
0000000000000dec         db  0x6f ; 'o'
0000000000000ded         db  0x77 ; 'w'
0000000000000dee         db  0x65 ; 'e'
0000000000000def         db  0x72 ; 'r'
0000000000000df0         db  0x5f ; '_'
0000000000000df1         db  0x6c ; 'l'
0000000000000df2         db  0x6f ; 'o'
0000000000000df3         db  0x63 ; 'c'
0000000000000df4         db  0x00 ; '.'
0000000000000df5         db  0x5f ; '_'
0000000000000df6         db  0x5f ; '_'
0000000000000df7         db  0x63 ; 'c'
0000000000000df8         db  0x78 ; 'x'
0000000000000df9         db  0x61 ; 'a'
0000000000000dfa         db  0x5f ; '_'
0000000000000dfb         db  0x66 ; 'f'
0000000000000dfc         db  0x69 ; 'i'
0000000000000dfd         db  0x6e ; 'n'
0000000000000dfe         db  0x61 ; 'a'
0000000000000dff         db  0x6c ; 'l'
0000000000000e00         db  0x69 ; 'i'
0000000000000e01         db  0x7a ; 'z'
0000000000000e02         db  0x65 ; 'e'
0000000000000e03         db  0x00 ; '.'
0000000000000e04         db  0x5f ; '_'
0000000000000e05         db  0x5f ; '_'
0000000000000e06         db  0x73 ; 's'
0000000000000e07         db  0x70 ; 'p'
0000000000000e08         db  0x72 ; 'r'
0000000000000e09         db  0x69 ; 'i'
0000000000000e0a         db  0x6e ; 'n'
0000000000000e0b         db  0x74 ; 't'
0000000000000e0c         db  0x66 ; 'f'
0000000000000e0d         db  0x5f ; '_'
0000000000000e0e         db  0x63 ; 'c'
0000000000000e0f         db  0x68 ; 'h'
0000000000000e10         db  0x6b ; 'k'
0000000000000e11         db  0x00 ; '.'
0000000000000e12         db  0x6d ; 'm'
0000000000000e13         db  0x65 ; 'e'
0000000000000e14         db  0x6d ; 'm'
0000000000000e15         db  0x6d ; 'm'
0000000000000e16         db  0x6f ; 'o'
0000000000000e17         db  0x76 ; 'v'
0000000000000e18         db  0x65 ; 'e'
0000000000000e19         db  0x00 ; '.'
0000000000000e1a         db  0x62 ; 'b'
0000000000000e1b         db  0x69 ; 'i'
0000000000000e1c         db  0x6e ; 'n'
0000000000000e1d         db  0x64 ; 'd'
0000000000000e1e         db  0x74 ; 't'
0000000000000e1f         db  0x65 ; 'e'
0000000000000e20         db  0x78 ; 'x'
0000000000000e21         db  0x74 ; 't'
0000000000000e22         db  0x64 ; 'd'
0000000000000e23         db  0x6f ; 'o'
0000000000000e24         db  0x6d ; 'm'
0000000000000e25         db  0x61 ; 'a'
0000000000000e26         db  0x69 ; 'i'
0000000000000e27         db  0x6e ; 'n'
0000000000000e28         db  0x00 ; '.'
0000000000000e29         db  0x66 ; 'f'
0000000000000e2a         db  0x77 ; 'w'
0000000000000e2b         db  0x72 ; 'r'
0000000000000e2c         db  0x69 ; 'i'
0000000000000e2d         db  0x74 ; 't'
0000000000000e2e         db  0x65 ; 'e'
0000000000000e2f         db  0x5f ; '_'
0000000000000e30         db  0x75 ; 'u'
0000000000000e31         db  0x6e ; 'n'
0000000000000e32         db  0x6c ; 'l'
0000000000000e33         db  0x6f ; 'o'
0000000000000e34         db  0x63 ; 'c'
0000000000000e35         db  0x6b ; 'k'
0000000000000e36         db  0x65 ; 'e'
0000000000000e37         db  0x64 ; 'd'
0000000000000e38         db  0x00 ; '.'
0000000000000e39         db  0x73 ; 's'
0000000000000e3a         db  0x74 ; 't'
0000000000000e3b         db  0x72 ; 'r'
0000000000000e3c         db  0x63 ; 'c'
0000000000000e3d         db  0x6d ; 'm'
0000000000000e3e         db  0x70 ; 'p'
0000000000000e3f         db  0x00 ; '.'
0000000000000e40         db  0x5f ; '_'
0000000000000e41         db  0x5f ; '_'
0000000000000e42         db  0x6c ; 'l'
0000000000000e43         db  0x69 ; 'i'
0000000000000e44         db  0x62 ; 'b'
0000000000000e45         db  0x63 ; 'c'
0000000000000e46         db  0x5f ; '_'
0000000000000e47         db  0x73 ; 's'
0000000000000e48         db  0x74 ; 't'
0000000000000e49         db  0x61 ; 'a'
0000000000000e4a         db  0x72 ; 'r'
0000000000000e4b         db  0x74 ; 't'
0000000000000e4c         db  0x5f ; '_'
0000000000000e4d         db  0x6d ; 'm'
0000000000000e4e         db  0x61 ; 'a'
0000000000000e4f         db  0x69 ; 'i'
0000000000000e50         db  0x6e ; 'n'
0000000000000e51         db  0x00 ; '.'
0000000000000e52         db  0x66 ; 'f'
0000000000000e53         db  0x65 ; 'e'
0000000000000e54         db  0x72 ; 'r'
0000000000000e55         db  0x72 ; 'r'
0000000000000e56         db  0x6f ; 'o'
0000000000000e57         db  0x72 ; 'r'
0000000000000e58         db  0x00 ; '.'
0000000000000e59         db  0x73 ; 's'
0000000000000e5a         db  0x74 ; 't'
0000000000000e5b         db  0x70 ; 'p'
0000000000000e5c         db  0x63 ; 'c'
0000000000000e5d         db  0x70 ; 'p'
0000000000000e5e         db  0x79 ; 'y'
0000000000000e5f         db  0x00 ; '.'
0000000000000e60         db  0x66 ; 'f'
0000000000000e61         db  0x73 ; 's'
0000000000000e62         db  0x65 ; 'e'
0000000000000e63         db  0x65 ; 'e'
0000000000000e64         db  0x6b ; 'k'
0000000000000e65         db  0x6f ; 'o'
0000000000000e66         db  0x00 ; '.'
0000000000000e67         db  0x5f ; '_'
0000000000000e68         db  0x5f ; '_'
0000000000000e69         db  0x6f ; 'o'
0000000000000e6a         db  0x76 ; 'v'
0000000000000e6b         db  0x65 ; 'e'
0000000000000e6c         db  0x72 ; 'r'
0000000000000e6d         db  0x66 ; 'f'
0000000000000e6e         db  0x6c ; 'l'
0000000000000e6f         db  0x6f ; 'o'
0000000000000e70         db  0x77 ; 'w'
0000000000000e71         db  0x00 ; '.'
0000000000000e72         db  0x66 ; 'f'
0000000000000e73         db  0x70 ; 'p'
0000000000000e74         db  0x75 ; 'u'
0000000000000e75         db  0x74 ; 't'
0000000000000e76         db  0x73 ; 's'
0000000000000e77         db  0x5f ; '_'
0000000000000e78         db  0x75 ; 'u'
0000000000000e79         db  0x6e ; 'n'
0000000000000e7a         db  0x6c ; 'l'
0000000000000e7b         db  0x6f ; 'o'
0000000000000e7c         db  0x63 ; 'c'
0000000000000e7d         db  0x6b ; 'k'
0000000000000e7e         db  0x65 ; 'e'
0000000000000e7f         db  0x64 ; 'd'
0000000000000e80         db  0x00 ; '.'
0000000000000e81         db  0x66 ; 'f'
0000000000000e82         db  0x72 ; 'r'
0000000000000e83         db  0x65 ; 'e'
0000000000000e84         db  0x65 ; 'e'
0000000000000e85         db  0x00 ; '.'
0000000000000e86         db  0x5f ; '_'
0000000000000e87         db  0x5f ; '_'
0000000000000e88         db  0x70 ; 'p'
0000000000000e89         db  0x72 ; 'r'
0000000000000e8a         db  0x6f ; 'o'
0000000000000e8b         db  0x67 ; 'g'
0000000000000e8c         db  0x6e ; 'n'
0000000000000e8d         db  0x61 ; 'a'
0000000000000e8e         db  0x6d ; 'm'
0000000000000e8f         db  0x65 ; 'e'
0000000000000e90         db  0x00 ; '.'
0000000000000e91         db  0x5f ; '_'
0000000000000e92         db  0x5f ; '_'
0000000000000e93         db  0x70 ; 'p'
0000000000000e94         db  0x72 ; 'r'
0000000000000e95         db  0x6f ; 'o'
0000000000000e96         db  0x67 ; 'g'
0000000000000e97         db  0x6e ; 'n'
0000000000000e98         db  0x61 ; 'a'
0000000000000e99         db  0x6d ; 'm'
0000000000000e9a         db  0x65 ; 'e'
0000000000000e9b         db  0x5f ; '_'
0000000000000e9c         db  0x66 ; 'f'
0000000000000e9d         db  0x75 ; 'u'
0000000000000e9e         db  0x6c ; 'l'
0000000000000e9f         db  0x6c ; 'l'
0000000000000ea0         db  0x00 ; '.'
0000000000000ea1         db  0x5f ; '_'
0000000000000ea2         db  0x5f ; '_'
0000000000000ea3         db  0x63 ; 'c'
0000000000000ea4         db  0x78 ; 'x'
0000000000000ea5         db  0x61 ; 'a'
0000000000000ea6         db  0x5f ; '_'
0000000000000ea7         db  0x61 ; 'a'
0000000000000ea8         db  0x74 ; 't'
0000000000000ea9         db  0x65 ; 'e'
0000000000000eaa         db  0x78 ; 'x'
0000000000000eab         db  0x69 ; 'i'
0000000000000eac         db  0x74 ; 't'
0000000000000ead         db  0x00 ; '.'
0000000000000eae         db  0x47 ; 'G'
0000000000000eaf         db  0x4c ; 'L'
0000000000000eb0         db  0x49 ; 'I'
0000000000000eb1         db  0x42 ; 'B'
0000000000000eb2         db  0x43 ; 'C'
0000000000000eb3         db  0x5f ; '_'
0000000000000eb4         db  0x32 ; '2'
0000000000000eb5         db  0x2e ; '.'
0000000000000eb6         db  0x33 ; '3'
0000000000000eb7         db  0x2e ; '.'
0000000000000eb8         db  0x34 ; '4'
0000000000000eb9         db  0x00 ; '.'
0000000000000eba         db  0x47 ; 'G'
0000000000000ebb         db  0x4c ; 'L'
0000000000000ebc         db  0x49 ; 'I'
0000000000000ebd         db  0x42 ; 'B'
0000000000000ebe         db  0x43 ; 'C'
0000000000000ebf         db  0x5f ; '_'
0000000000000ec0         db  0x32 ; '2'
0000000000000ec1         db  0x2e ; '.'
0000000000000ec2         db  0x31 ; '1'
0000000000000ec3         db  0x34 ; '4'
0000000000000ec4         db  0x00 ; '.'
0000000000000ec5         db  0x47 ; 'G'
0000000000000ec6         db  0x4c ; 'L'
0000000000000ec7         db  0x49 ; 'I'
0000000000000ec8         db  0x42 ; 'B'
0000000000000ec9         db  0x43 ; 'C'
0000000000000eca         db  0x5f ; '_'
0000000000000ecb         db  0x32 ; '2'
0000000000000ecc         db  0x2e ; '.'
0000000000000ecd         db  0x34 ; '4'
0000000000000ece         db  0x00 ; '.'
0000000000000ecf         db  0x47 ; 'G'
0000000000000ed0         db  0x4c ; 'L'
0000000000000ed1         db  0x49 ; 'I'
0000000000000ed2         db  0x42 ; 'B'
0000000000000ed3         db  0x43 ; 'C'
0000000000000ed4         db  0x5f ; '_'
0000000000000ed5         db  0x32 ; '2'
0000000000000ed6         db  0x2e ; '.'
0000000000000ed7         db  0x32 ; '2'
0000000000000ed8         db  0x2e ; '.'
0000000000000ed9         db  0x35 ; '5'
0000000000000eda         db  0x00 ; '.'
0000000000000edb         db  0x47 ; 'G'
0000000000000edc         db  0x4c ; 'L'
0000000000000edd         db  0x49 ; 'I'
0000000000000ede         db  0x42 ; 'B'
0000000000000edf         db  0x43 ; 'C'
0000000000000ee0         db  0x5f ; '_'
0000000000000ee1         db  0x32 ; '2'
0000000000000ee2         db  0x2e ; '.'
0000000000000ee3         db  0x33 ; '3'
0000000000000ee4         db  0x00 ; '.'
0000000000000ee5         db  0x5f ; '_'
0000000000000ee6         db  0x49 ; 'I'
0000000000000ee7         db  0x54 ; 'T'
0000000000000ee8         db  0x4d ; 'M'
0000000000000ee9         db  0x5f ; '_'
0000000000000eea         db  0x64 ; 'd'
0000000000000eeb         db  0x65 ; 'e'
0000000000000eec         db  0x72 ; 'r'
0000000000000eed         db  0x65 ; 'e'
0000000000000eee         db  0x67 ; 'g'
0000000000000eef         db  0x69 ; 'i'
0000000000000ef0         db  0x73 ; 's'
0000000000000ef1         db  0x74 ; 't'
0000000000000ef2         db  0x65 ; 'e'
0000000000000ef3         db  0x72 ; 'r'
0000000000000ef4         db  0x54 ; 'T'
0000000000000ef5         db  0x4d ; 'M'
0000000000000ef6         db  0x43 ; 'C'
0000000000000ef7         db  0x6c ; 'l'
0000000000000ef8         db  0x6f ; 'o'
0000000000000ef9         db  0x6e ; 'n'
0000000000000efa         db  0x65 ; 'e'
0000000000000efb         db  0x54 ; 'T'
0000000000000efc         db  0x61 ; 'a'
0000000000000efd         db  0x62 ; 'b'
0000000000000efe         db  0x6c ; 'l'
0000000000000eff         db  0x65 ; 'e'
0000000000000f00         db  0x00 ; '.'
0000000000000f01         db  0x5f ; '_'
0000000000000f02         db  0x5f ; '_'
0000000000000f03         db  0x67 ; 'g'
0000000000000f04         db  0x6d ; 'm'
0000000000000f05         db  0x6f ; 'o'
0000000000000f06         db  0x6e ; 'n'
0000000000000f07         db  0x5f ; '_'
0000000000000f08         db  0x73 ; 's'
0000000000000f09         db  0x74 ; 't'
0000000000000f0a         db  0x61 ; 'a'
0000000000000f0b         db  0x72 ; 'r'
0000000000000f0c         db  0x74 ; 't'
0000000000000f0d         db  0x5f ; '_'
0000000000000f0e         db  0x5f ; '_'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0x5f ; '_'
0000000000000f11         db  0x49 ; 'I'
0000000000000f12         db  0x54 ; 'T'
0000000000000f13         db  0x4d ; 'M'
0000000000000f14         db  0x5f ; '_'
0000000000000f15         db  0x72 ; 'r'
0000000000000f16         db  0x65 ; 'e'
0000000000000f17         db  0x67 ; 'g'
0000000000000f18         db  0x69 ; 'i'
0000000000000f19         db  0x73 ; 's'
0000000000000f1a         db  0x74 ; 't'
0000000000000f1b         db  0x65 ; 'e'
0000000000000f1c         db  0x72 ; 'r'
0000000000000f1d         db  0x54 ; 'T'
0000000000000f1e         db  0x4d ; 'M'
0000000000000f1f         db  0x43 ; 'C'
0000000000000f20         db  0x6c ; 'l'
0000000000000f21         db  0x6f ; 'o'
0000000000000f22         db  0x6e ; 'n'
0000000000000f23         db  0x65 ; 'e'
0000000000000f24         db  0x54 ; 'T'
0000000000000f25         db  0x61 ; 'a'
0000000000000f26         db  0x62 ; 'b'
0000000000000f27         db  0x6c ; 'l'
0000000000000f28         db  0x65 ; 'e'
0000000000000f29         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xf2a; 0xfe0[ (182 bytes)
        ; File offset : [3882; 4064[ (182 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000f2a         db  0x00 ; '.'
0000000000000f2b         db  0x00 ; '.'
0000000000000f2c         db  0x02 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x03 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0x03 ; '.'
0000000000000f31         db  0x00 ; '.'
0000000000000f32         db  0x03 ; '.'
0000000000000f33         db  0x00 ; '.'
0000000000000f34         db  0x03 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x00 ; '.'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0x03 ; '.'
0000000000000f39         db  0x00 ; '.'
0000000000000f3a         db  0x03 ; '.'
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x03 ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x03 ; '.'
0000000000000f3f         db  0x00 ; '.'
0000000000000f40         db  0x03 ; '.'
0000000000000f41         db  0x00 ; '.'
0000000000000f42         db  0x03 ; '.'
0000000000000f43         db  0x00 ; '.'
0000000000000f44         db  0x03 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x03 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0x03 ; '.'
0000000000000f49         db  0x00 ; '.'
0000000000000f4a         db  0x03 ; '.'
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x03 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x03 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0x03 ; '.'
0000000000000f51         db  0x00 ; '.'
0000000000000f52         db  0x03 ; '.'
0000000000000f53         db  0x00 ; '.'
0000000000000f54         db  0x03 ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x03 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0x03 ; '.'
0000000000000f59         db  0x00 ; '.'
0000000000000f5a         db  0x04 ; '.'
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x03 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x03 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0x03 ; '.'
0000000000000f61         db  0x00 ; '.'
0000000000000f62         db  0x03 ; '.'
0000000000000f63         db  0x00 ; '.'
0000000000000f64         db  0x03 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x03 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0x03 ; '.'
0000000000000f69         db  0x00 ; '.'
0000000000000f6a         db  0x03 ; '.'
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x03 ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x03 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0x03 ; '.'
0000000000000f71         db  0x00 ; '.'
0000000000000f72         db  0x03 ; '.'
0000000000000f73         db  0x00 ; '.'
0000000000000f74         db  0x03 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x03 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x03 ; '.'
0000000000000f79         db  0x00 ; '.'
0000000000000f7a         db  0x03 ; '.'
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x03 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x03 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0x03 ; '.'
0000000000000f81         db  0x00 ; '.'
0000000000000f82         db  0x00 ; '.'
0000000000000f83         db  0x00 ; '.'
0000000000000f84         db  0x05 ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x03 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0x03 ; '.'
0000000000000f89         db  0x00 ; '.'
0000000000000f8a         db  0x03 ; '.'
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x03 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x03 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0x03 ; '.'
0000000000000f91         db  0x00 ; '.'
0000000000000f92         db  0x03 ; '.'
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x03 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x03 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0x03 ; '.'
0000000000000f99         db  0x00 ; '.'
0000000000000f9a         db  0x03 ; '.'
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x03 ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x06 ; '.'
0000000000000f9f         db  0x00 ; '.'
0000000000000fa0         db  0x03 ; '.'                                         ; DATA XREF=knuth_morris_pratt+77, knuth_morris_pratt_multibyte+129
0000000000000fa1         db  0x00 ; '.'
0000000000000fa2         db  0x03 ; '.'
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x03 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x03 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0x03 ; '.'
0000000000000fa9         db  0x00 ; '.'
0000000000000faa         db  0x03 ; '.'
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x03 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x03 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0x03 ; '.'
0000000000000fb1         db  0x00 ; '.'
0000000000000fb2         db  0x03 ; '.'
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x03 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x03 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0x03 ; '.'
0000000000000fb9         db  0x00 ; '.'
0000000000000fba         db  0x06 ; '.'
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x00 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x03 ; '.'
0000000000000fbf         db  0x00 ; '.'                                         ; DATA XREF=set_regs+166
0000000000000fc0         db  0x03 ; '.'
0000000000000fc1         db  0x00 ; '.'
0000000000000fc2         db  0x03 ; '.'
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x03 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x02 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0x02 ; '.'
0000000000000fc9         db  0x00 ; '.'
0000000000000fca         db  0x03 ; '.'
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x06 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x03 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x03 ; '.'
0000000000000fd1         db  0x00 ; '.'
0000000000000fd2         db  0x03 ; '.'
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x03 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x03 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0x03 ; '.'
0000000000000fd9         db  0x00 ; '.'
0000000000000fda         db  0x03 ; '.'
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x03 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x03 ; '.'
0000000000000fdf         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0xfe0; 0x1040[ (96 bytes)
        ; File offset : [4064; 4160[ (96 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000fe0         db  0x01 ; '.'
0000000000000fe1         db  0x00 ; '.'
0000000000000fe2         db  0x05 ; '.'
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x01 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x00 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x10 ; '.'
0000000000000fe9         db  0x00 ; '.'
0000000000000fea         db  0x00 ; '.'
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x00 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x00 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0x74 ; 't'
0000000000000ff1         db  0x19 ; '.'
0000000000000ff2         db  0x69 ; 'i'
0000000000000ff3         db  0x09 ; '.'
0000000000000ff4         db  0x00 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x06 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0x46 ; 'F'
0000000000000ff9         db  0x03 ; '.'
0000000000000ffa         db  0x00 ; '.'
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x10 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x00 ; '.'
0000000000000fff         db  0x00 ; '.'
0000000000001000         db  0x94 ; '.'                                         ; DATA XREF=mem_cd_iconv+189, mem_cd_iconv+253
0000000000001001         db  0x91 ; '.'
0000000000001002         db  0x96 ; '.'
0000000000001003         db  0x06 ; '.'
0000000000001004         db  0x00 ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x05 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0x52 ; 'R'
0000000000001009         db  0x03 ; '.'
000000000000100a         db  0x00 ; '.'
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x10 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0x14 ; '.'
0000000000001011         db  0x69 ; 'i'
0000000000001012         db  0x69 ; 'i'
0000000000001013         db  0x0d ; '.'
0000000000001014         db  0x00 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x04 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0x5d ; ']'
0000000000001019         db  0x03 ; '.'
000000000000101a         db  0x00 ; '.'
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x10 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0x75 ; 'u'
0000000000001021         db  0x1a ; '.'
0000000000001022         db  0x69 ; 'i'
0000000000001023         db  0x09 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x03 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0x67 ; 'g'
0000000000001029         db  0x03 ; '.'
000000000000102a         db  0x00 ; '.'
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x10 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0x13 ; '.'
0000000000001031         db  0x69 ; 'i'
0000000000001032         db  0x69 ; 'i'
0000000000001033         db  0x0d ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x02 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0x73 ; 's'
0000000000001039         db  0x03 ; '.'
000000000000103a         db  0x00 ; '.'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0x1040; 0x1508[ (1224 bytes)
        ; File offset : [4160; 5384[ (1224 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001040         db  0x70 ; 'p'
0000000000001041         db  0x08 ; '.'
0000000000001042         db  0x22 ; '"'
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x00 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0x08 ; '.'
0000000000001049         db  0x00 ; '.'
000000000000104a         db  0x00 ; '.'
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0x40 ; '@'
0000000000001051         db  0x49 ; 'I'
0000000000001052         db  0x00 ; '.'
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0x78 ; 'x'
0000000000001059         db  0x08 ; '.'
000000000000105a         db  0x22 ; '"'
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x00 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0x08 ; '.'
0000000000001061         db  0x00 ; '.'
0000000000001062         db  0x00 ; '.'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0x00 ; '.'                                         ; DATA XREF=mem_cd_iconv+23, mem_cd_iconv+557
0000000000001069         db  0x49 ; 'I'
000000000000106a         db  0x00 ; '.'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0x80 ; '.'
0000000000001071         db  0x08 ; '.'
0000000000001072         db  0x22 ; '"'
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x00 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x08 ; '.'
0000000000001079         db  0x00 ; '.'
000000000000107a         db  0x00 ; '.'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0xb2 ; '.'
0000000000001081         db  0xb8 ; '.'
0000000000001082         db  0x01 ; '.'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0x88 ; '.'
0000000000001089         db  0x08 ; '.'
000000000000108a         db  0x22 ; '"'
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x00 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x08 ; '.'
0000000000001091         db  0x00 ; '.'
0000000000001092         db  0x00 ; '.'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0xb7 ; '.'
0000000000001099         db  0xb8 ; '.'
000000000000109a         db  0x01 ; '.'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0xa0 ; '.'
00000000000010a1         db  0x08 ; '.'
00000000000010a2         db  0x22 ; '"'
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x00 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x08 ; '.'
00000000000010a9         db  0x00 ; '.'
00000000000010aa         db  0x00 ; '.'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0xbb ; '.'
00000000000010b1         db  0xb8 ; '.'
00000000000010b2         db  0x01 ; '.'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0xc0 ; '.'
00000000000010b9         db  0x08 ; '.'
00000000000010ba         db  0x22 ; '"'
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x08 ; '.'
00000000000010c1         db  0x00 ; '.'
00000000000010c2         db  0x00 ; '.'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0xca ; '.'
00000000000010c9         db  0xb8 ; '.'
00000000000010ca         db  0x01 ; '.'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0xe0 ; '.'
00000000000010d1         db  0x08 ; '.'
00000000000010d2         db  0x22 ; '"'
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x00 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x08 ; '.'
00000000000010d9         db  0x00 ; '.'
00000000000010da         db  0x00 ; '.'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0xd5 ; '.'
00000000000010e1         db  0xb8 ; '.'
00000000000010e2         db  0x01 ; '.'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x00 ; '.'
00000000000010e9         db  0x09 ; '.'
00000000000010ea         db  0x22 ; '"'
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x00 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x08 ; '.'
00000000000010f1         db  0x00 ; '.'
00000000000010f2         db  0x00 ; '.'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0xe5 ; '.'
00000000000010f9         db  0xb8 ; '.'
00000000000010fa         db  0x01 ; '.'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0x20 ; ' '
0000000000001101         db  0x09 ; '.'
0000000000001102         db  0x22 ; '"'
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x00 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x08 ; '.'
0000000000001109         db  0x00 ; '.'
000000000000110a         db  0x00 ; '.'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x00 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0xf1 ; '.'
0000000000001111         db  0xb8 ; '.'
0000000000001112         db  0x01 ; '.'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0x40 ; '@'
0000000000001119         db  0x09 ; '.'
000000000000111a         db  0x22 ; '"'
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x00 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x08 ; '.'
0000000000001121         db  0x00 ; '.'
0000000000001122         db  0x00 ; '.'
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x00 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0xfa ; '.'
0000000000001129         db  0xb8 ; '.'
000000000000112a         db  0x01 ; '.'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0x60 ; '`'
0000000000001131         db  0x09 ; '.'
0000000000001132         db  0x22 ; '"'
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x08 ; '.'
0000000000001139         db  0x00 ; '.'
000000000000113a         db  0x00 ; '.'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x00 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x06 ; '.'
0000000000001141         db  0xb9 ; '.'
0000000000001142         db  0x01 ; '.'
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0x80 ; '.'
0000000000001149         db  0x09 ; '.'
000000000000114a         db  0x22 ; '"'
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x00 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x08 ; '.'
0000000000001151         db  0x00 ; '.'
0000000000001152         db  0x00 ; '.'
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x11 ; '.'
0000000000001159         db  0xb9 ; '.'
000000000000115a         db  0x01 ; '.'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0xa0 ; '.'
0000000000001161         db  0x09 ; '.'
0000000000001162         db  0x22 ; '"'
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0x08 ; '.'
0000000000001169         db  0x00 ; '.'
000000000000116a         db  0x00 ; '.'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x00 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x1b ; '.'
0000000000001171         db  0xb9 ; '.'
0000000000001172         db  0x01 ; '.'
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0xc0 ; '.'
0000000000001179         db  0x09 ; '.'
000000000000117a         db  0x22 ; '"'
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0x08 ; '.'
0000000000001181         db  0x00 ; '.'
0000000000001182         db  0x00 ; '.'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x26 ; '&'
0000000000001189         db  0xb9 ; '.'
000000000000118a         db  0x01 ; '.'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0xe0 ; '.'
0000000000001191         db  0x09 ; '.'
0000000000001192         db  0x22 ; '"'
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x08 ; '.'
0000000000001199         db  0x00 ; '.'
000000000000119a         db  0x00 ; '.'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x4f ; 'O'
00000000000011a1         db  0xb8 ; '.'
00000000000011a2         db  0x01 ; '.'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0x00 ; '.'
00000000000011a9         db  0x0a ; '.'
00000000000011aa         db  0x22 ; '"'
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x08 ; '.'
00000000000011b1         db  0x00 ; '.'
00000000000011b2         db  0x00 ; '.'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x36 ; '6'
00000000000011b9         db  0xb9 ; '.'
00000000000011ba         db  0x01 ; '.'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0x20 ; ' '
00000000000011c1         db  0x0a ; '.'
00000000000011c2         db  0x22 ; '"'
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0x08 ; '.'
00000000000011c9         db  0x00 ; '.'
00000000000011ca         db  0x00 ; '.'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x46 ; 'F'
00000000000011d1         db  0xb9 ; '.'
00000000000011d2         db  0x01 ; '.'
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0x40 ; '@'
00000000000011d9         db  0x0a ; '.'
00000000000011da         db  0x22 ; '"'
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0x08 ; '.'
00000000000011e1         db  0x00 ; '.'
00000000000011e2         db  0x00 ; '.'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x52 ; 'R'
00000000000011e9         db  0xb9 ; '.'
00000000000011ea         db  0x01 ; '.'
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0x60 ; '`'
00000000000011f1         db  0x0a ; '.'
00000000000011f2         db  0x22 ; '"'
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0x08 ; '.'
00000000000011f9         db  0x00 ; '.'
00000000000011fa         db  0x00 ; '.'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x00 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x5f ; '_'                                         ; DATA XREF=peek_token+560, peek_token+572, peek_token+640, peek_token+652, peek_token+996, peek_token+1080
0000000000001201         db  0xb9 ; '.'
0000000000001202         db  0x01 ; '.'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x00 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0x80 ; '.'
0000000000001209         db  0x0a ; '.'
000000000000120a         db  0x22 ; '"'
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0x08 ; '.'
0000000000001211         db  0x00 ; '.'
0000000000001212         db  0x00 ; '.'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x00 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x65 ; 'e'
0000000000001219         db  0xb9 ; '.'
000000000000121a         db  0x01 ; '.'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x00 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0xa0 ; '.'
0000000000001221         db  0x0a ; '.'
0000000000001222         db  0x22 ; '"'
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0x08 ; '.'
0000000000001229         db  0x00 ; '.'
000000000000122a         db  0x00 ; '.'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x00 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x71 ; 'q'
0000000000001231         db  0xb9 ; '.'
0000000000001232         db  0x01 ; '.'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x00 ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0xc0 ; '.'
0000000000001239         db  0x0a ; '.'
000000000000123a         db  0x22 ; '"'
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0x08 ; '.'
0000000000001241         db  0x00 ; '.'
0000000000001242         db  0x00 ; '.'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x00 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x76 ; 'v'
0000000000001249         db  0xb9 ; '.'
000000000000124a         db  0x01 ; '.'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x00 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0x00 ; '.'
0000000000001251         db  0x0b ; '.'
0000000000001252         db  0x22 ; '"'
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0x08 ; '.'
0000000000001259         db  0x00 ; '.'
000000000000125a         db  0x00 ; '.'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x00 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x34 ; '4'
0000000000001261         db  0xbd ; '.'
0000000000001262         db  0x01 ; '.'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x00 ; '.'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0x08 ; '.'
0000000000001269         db  0x0b ; '.'
000000000000126a         db  0x22 ; '"'
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x08 ; '.'
0000000000001271         db  0x00 ; '.'
0000000000001272         db  0x00 ; '.'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x00 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x3c ; '<'
0000000000001279         db  0xbd ; '.'
000000000000127a         db  0x01 ; '.'
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x00 ; '.'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0x10 ; '.'
0000000000001281         db  0x0b ; '.'
0000000000001282         db  0x22 ; '"'
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0x08 ; '.'
0000000000001289         db  0x00 ; '.'
000000000000128a         db  0x00 ; '.'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x00 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0x42 ; 'B'
0000000000001291         db  0xbd ; '.'
0000000000001292         db  0x01 ; '.'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x00 ; '.'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0x18 ; '.'
0000000000001299         db  0x0b ; '.'
000000000000129a         db  0x22 ; '"'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0x08 ; '.'
00000000000012a1         db  0x00 ; '.'
00000000000012a2         db  0x00 ; '.'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x00 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x4f ; 'O'
00000000000012a9         db  0xbd ; '.'
00000000000012aa         db  0x01 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x00 ; '.'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0x20 ; ' '
00000000000012b1         db  0x0b ; '.'
00000000000012b2         db  0x22 ; '"'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0x08 ; '.'
00000000000012b9         db  0x00 ; '.'
00000000000012ba         db  0x00 ; '.'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x00 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x5c ; '\'
00000000000012c1         db  0xbd ; '.'
00000000000012c2         db  0x01 ; '.'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x00 ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0x28 ; '('
00000000000012c9         db  0x0b ; '.'
00000000000012ca         db  0x22 ; '"'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0x08 ; '.'
00000000000012d1         db  0x00 ; '.'
00000000000012d2         db  0x00 ; '.'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x00 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x1f ; '.'
00000000000012d9         db  0xb7 ; '.'
00000000000012da         db  0x01 ; '.'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x00 ; '.'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0x30 ; '0'
00000000000012e1         db  0x0b ; '.'
00000000000012e2         db  0x22 ; '"'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0x08 ; '.'
00000000000012e9         db  0x00 ; '.'
00000000000012ea         db  0x00 ; '.'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x00 ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x70 ; 'p'
00000000000012f1         db  0xbd ; '.'
00000000000012f2         db  0x01 ; '.'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x00 ; '.'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0x38 ; '8'
00000000000012f9         db  0x0b ; '.'
00000000000012fa         db  0x22 ; '"'
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0x08 ; '.'
0000000000001301         db  0x00 ; '.'
0000000000001302         db  0x00 ; '.'
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x00 ; '.'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x55 ; 'U'
0000000000001309         db  0xbd ; '.'
000000000000130a         db  0x01 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x00 ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0x40 ; '@'
0000000000001311         db  0x0b ; '.'
0000000000001312         db  0x22 ; '"'
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0x08 ; '.'
0000000000001319         db  0x00 ; '.'
000000000000131a         db  0x00 ; '.'
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x00 ; '.'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x19 ; '.'
0000000000001321         db  0xb8 ; '.'
0000000000001322         db  0x01 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x00 ; '.'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0x48 ; 'H'
0000000000001329         db  0x0b ; '.'
000000000000132a         db  0x22 ; '"'
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0x08 ; '.'
0000000000001331         db  0x00 ; '.'
0000000000001332         db  0x00 ; '.'
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x00 ; '.'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x78 ; 'x'
0000000000001339         db  0xbd ; '.'
000000000000133a         db  0x01 ; '.'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x00 ; '.'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0x08 ; '.'
0000000000001341         db  0x10 ; '.'
0000000000001342         db  0x22 ; '"'
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0x08 ; '.'
0000000000001349         db  0x00 ; '.'
000000000000134a         db  0x00 ; '.'
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x00 ; '.'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x08 ; '.'
0000000000001351         db  0x10 ; '.'
0000000000001352         db  0x22 ; '"'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x00 ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0x28 ; '('
0000000000001359         db  0x10 ; '.'
000000000000135a         db  0x22 ; '"'
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0x08 ; '.'
0000000000001361         db  0x00 ; '.'
0000000000001362         db  0x00 ; '.'
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x00 ; '.'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x7e ; '~'
0000000000001369         db  0xb9 ; '.'
000000000000136a         db  0x01 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x00 ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0x30 ; '0'
0000000000001371         db  0x10 ; '.'
0000000000001372         db  0x22 ; '"'
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0x08 ; '.'
0000000000001379         db  0x00 ; '.'
000000000000137a         db  0x00 ; '.'
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x00 ; '.'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0x8e ; '.'
0000000000001381         db  0xbc ; '.'
0000000000001382         db  0x01 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x00 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0x38 ; '8'
0000000000001389         db  0x10 ; '.'
000000000000138a         db  0x22 ; '"'
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'
0000000000001390         db  0x08 ; '.'
0000000000001391         db  0x00 ; '.'
0000000000001392         db  0x00 ; '.'
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x00 ; '.'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0xb8 ; '.'
0000000000001399         db  0xb9 ; '.'
000000000000139a         db  0x01 ; '.'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x00 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0x40 ; '@'
00000000000013a1         db  0x10 ; '.'
00000000000013a2         db  0x22 ; '"'
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x00 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0x08 ; '.'
00000000000013a9         db  0x00 ; '.'
00000000000013aa         db  0x00 ; '.'
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x00 ; '.'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0x30 ; '0'
00000000000013b1         db  0x59 ; 'Y'
00000000000013b2         db  0x00 ; '.'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x00 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0xa0 ; '.'
00000000000013b9         db  0x10 ; '.'
00000000000013ba         db  0x22 ; '"'
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0x08 ; '.'
00000000000013c1         db  0x00 ; '.'
00000000000013c2         db  0x00 ; '.'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x00 ; '.'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0xb0 ; '.'
00000000000013c9         db  0x10 ; '.'
00000000000013ca         db  0x22 ; '"'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x00 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0xb8 ; '.'
00000000000013d1         db  0x10 ; '.'
00000000000013d2         db  0x22 ; '"'
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x00 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0x08 ; '.'
00000000000013d9         db  0x00 ; '.'
00000000000013da         db  0x00 ; '.'
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x00 ; '.'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0xc0 ; '.'
00000000000013e1         db  0x18 ; '.'
00000000000013e2         db  0x22 ; '"'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x00 ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0xc0 ; '.'
00000000000013e9         db  0x0f ; '.'
00000000000013ea         db  0x22 ; '"'
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0x06 ; '.'
00000000000013f1         db  0x00 ; '.'
00000000000013f2         db  0x00 ; '.'
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x06 ; '.'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x00 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x00 ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'
0000000000001400         db  0xc8 ; '.'
0000000000001401         db  0x0f ; '.'
0000000000001402         db  0x22 ; '"'
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0x06 ; '.'
0000000000001409         db  0x00 ; '.'
000000000000140a         db  0x00 ; '.'
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x26 ; '&'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x00 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x00 ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0xd0 ; '.'
0000000000001419         db  0x0f ; '.'
000000000000141a         db  0x22 ; '"'
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0x06 ; '.'
0000000000001421         db  0x00 ; '.'
0000000000001422         db  0x00 ; '.'
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x2c ; ','
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x00 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x00 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x00 ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0xd8 ; '.'
0000000000001431         db  0x0f ; '.'
0000000000001432         db  0x22 ; '"'
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0x06 ; '.'
0000000000001439         db  0x00 ; '.'
000000000000143a         db  0x00 ; '.'
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x49 ; 'I'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x00 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x00 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x00 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0xe0 ; '.'
0000000000001449         db  0x0f ; '.'
000000000000144a         db  0x22 ; '"'
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0x06 ; '.'
0000000000001451         db  0x00 ; '.'
0000000000001452         db  0x00 ; '.'
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x4d ; 'M'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x00 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x00 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x00 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0xc0 ; '.'
0000000000001461         db  0x10 ; '.'
0000000000001462         db  0x22 ; '"'
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0x05 ; '.'
0000000000001469         db  0x00 ; '.'
000000000000146a         db  0x00 ; '.'
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x53 ; 'S'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x00 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x00 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x00 ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0xc8 ; '.'
0000000000001479         db  0x10 ; '.'
000000000000147a         db  0x22 ; '"'
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0x05 ; '.'
0000000000001481         db  0x00 ; '.'
0000000000001482         db  0x00 ; '.'
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x52 ; 'R'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x00 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x00 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x00 ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0xd0 ; '.'
0000000000001491         db  0x10 ; '.'
0000000000001492         db  0x22 ; '"'
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0x05 ; '.'
0000000000001499         db  0x00 ; '.'
000000000000149a         db  0x00 ; '.'
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x54 ; 'T'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x00 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x00 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x00 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0xd8 ; '.'
00000000000014a9         db  0x10 ; '.'
00000000000014aa         db  0x22 ; '"'
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0x05 ; '.'
00000000000014b1         db  0x00 ; '.'
00000000000014b2         db  0x00 ; '.'
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x59 ; 'Y'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x00 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x00 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x00 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0xe0 ; '.'
00000000000014c1         db  0x10 ; '.'
00000000000014c2         db  0x22 ; '"'
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x05 ; '.'
00000000000014c9         db  0x00 ; '.'
00000000000014ca         db  0x00 ; '.'
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x5a ; 'Z'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x00 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x00 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x00 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0xe8 ; '.'
00000000000014d9         db  0x10 ; '.'
00000000000014da         db  0x22 ; '"'
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x05 ; '.'
00000000000014e1         db  0x00 ; '.'
00000000000014e2         db  0x00 ; '.'
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x56 ; 'V'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x00 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x00 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x00 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0x00 ; '.'
00000000000014f1         db  0x11 ; '.'
00000000000014f2         db  0x22 ; '"'
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0x05 ; '.'
00000000000014f9         db  0x00 ; '.'
00000000000014fa         db  0x00 ; '.'
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x58 ; 'X'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x00 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x00 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x00 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x1508; 0x1c28[ (1824 bytes)
        ; File offset : [5384; 7208[ (1824 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001508         db  0x60 ; '`'
0000000000001509         db  0x0d ; '.'
000000000000150a         db  0x22 ; '"'
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0x07 ; '.'
0000000000001511         db  0x00 ; '.'
0000000000001512         db  0x00 ; '.'
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x01 ; '.'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x00 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x00 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0x68 ; 'h'
0000000000001521         db  0x0d ; '.'
0000000000001522         db  0x22 ; '"'
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0x07 ; '.'
0000000000001529         db  0x00 ; '.'
000000000000152a         db  0x00 ; '.'
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x02 ; '.'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x00 ; '.'
0000000000001531         db  0x00 ; '.'
0000000000001532         db  0x00 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x00 ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0x70 ; 'p'
0000000000001539         db  0x0d ; '.'
000000000000153a         db  0x22 ; '"'
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x07 ; '.'
0000000000001541         db  0x00 ; '.'
0000000000001542         db  0x00 ; '.'
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x03 ; '.'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x00 ; '.'
0000000000001549         db  0x00 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x00 ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x78 ; 'x'
0000000000001551         db  0x0d ; '.'
0000000000001552         db  0x22 ; '"'
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x07 ; '.'
0000000000001559         db  0x00 ; '.'
000000000000155a         db  0x00 ; '.'
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x04 ; '.'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0x00 ; '.'
0000000000001561         db  0x00 ; '.'
0000000000001562         db  0x00 ; '.'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x00 ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0x80 ; '.'
0000000000001569         db  0x0d ; '.'
000000000000156a         db  0x22 ; '"'
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x07 ; '.'
0000000000001571         db  0x00 ; '.'
0000000000001572         db  0x00 ; '.'
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x05 ; '.'
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0x00 ; '.'
0000000000001579         db  0x00 ; '.'
000000000000157a         db  0x00 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x00 ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0x88 ; '.'
0000000000001581         db  0x0d ; '.'
0000000000001582         db  0x22 ; '"'
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0x07 ; '.'
0000000000001589         db  0x00 ; '.'
000000000000158a         db  0x00 ; '.'
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x07 ; '.'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x00 ; '.'
0000000000001591         db  0x00 ; '.'
0000000000001592         db  0x00 ; '.'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x00 ; '.'
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0x90 ; '.'
0000000000001599         db  0x0d ; '.'
000000000000159a         db  0x22 ; '"'
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x00 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x07 ; '.'
00000000000015a1         db  0x00 ; '.'
00000000000015a2         db  0x00 ; '.'
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x08 ; '.'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0x00 ; '.'
00000000000015a9         db  0x00 ; '.'
00000000000015aa         db  0x00 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x00 ; '.'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0x98 ; '.'
00000000000015b1         db  0x0d ; '.'
00000000000015b2         db  0x22 ; '"'
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x07 ; '.'
00000000000015b9         db  0x00 ; '.'
00000000000015ba         db  0x00 ; '.'
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x09 ; '.'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0x00 ; '.'
00000000000015c1         db  0x00 ; '.'
00000000000015c2         db  0x00 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x00 ; '.'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0xa0 ; '.'
00000000000015c9         db  0x0d ; '.'
00000000000015ca         db  0x22 ; '"'
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x07 ; '.'
00000000000015d1         db  0x00 ; '.'
00000000000015d2         db  0x00 ; '.'
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x0a ; '.'
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x00 ; '.'
00000000000015d9         db  0x00 ; '.'
00000000000015da         db  0x00 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x00 ; '.'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0xa8 ; '.'
00000000000015e1         db  0x0d ; '.'
00000000000015e2         db  0x22 ; '"'
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0x07 ; '.'
00000000000015e9         db  0x00 ; '.'
00000000000015ea         db  0x00 ; '.'
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x0b ; '.'
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x00 ; '.'
00000000000015f1         db  0x00 ; '.'
00000000000015f2         db  0x00 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x00 ; '.'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0xb0 ; '.'
00000000000015f9         db  0x0d ; '.'
00000000000015fa         db  0x22 ; '"'
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0x07 ; '.'
0000000000001601         db  0x00 ; '.'
0000000000001602         db  0x00 ; '.'
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x0c ; '.'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0x00 ; '.'
0000000000001609         db  0x00 ; '.'
000000000000160a         db  0x00 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x00 ; '.'
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0xb8 ; '.'
0000000000001611         db  0x0d ; '.'
0000000000001612         db  0x22 ; '"'
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0x07 ; '.'
0000000000001619         db  0x00 ; '.'
000000000000161a         db  0x00 ; '.'
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x0d ; '.'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0x00 ; '.'
0000000000001621         db  0x00 ; '.'
0000000000001622         db  0x00 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x00 ; '.'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0xc0 ; '.'
0000000000001629         db  0x0d ; '.'
000000000000162a         db  0x22 ; '"'
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0x07 ; '.'
0000000000001631         db  0x00 ; '.'
0000000000001632         db  0x00 ; '.'
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x0e ; '.'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x00 ; '.'
0000000000001639         db  0x00 ; '.'
000000000000163a         db  0x00 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x00 ; '.'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0xc8 ; '.'
0000000000001641         db  0x0d ; '.'
0000000000001642         db  0x22 ; '"'
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0x07 ; '.'
0000000000001649         db  0x00 ; '.'
000000000000164a         db  0x00 ; '.'
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x0f ; '.'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0x00 ; '.'
0000000000001651         db  0x00 ; '.'
0000000000001652         db  0x00 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x00 ; '.'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0xd0 ; '.'
0000000000001659         db  0x0d ; '.'
000000000000165a         db  0x22 ; '"'
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0x07 ; '.'
0000000000001661         db  0x00 ; '.'
0000000000001662         db  0x00 ; '.'
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x10 ; '.'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0x00 ; '.'
0000000000001669         db  0x00 ; '.'
000000000000166a         db  0x00 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x00 ; '.'
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0xd8 ; '.'
0000000000001671         db  0x0d ; '.'
0000000000001672         db  0x22 ; '"'
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0x07 ; '.'
0000000000001679         db  0x00 ; '.'
000000000000167a         db  0x00 ; '.'
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x11 ; '.'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0x00 ; '.'
0000000000001681         db  0x00 ; '.'
0000000000001682         db  0x00 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x00 ; '.'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0xe0 ; '.'
0000000000001689         db  0x0d ; '.'
000000000000168a         db  0x22 ; '"'
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0x07 ; '.'
0000000000001691         db  0x00 ; '.'
0000000000001692         db  0x00 ; '.'
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x12 ; '.'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x00 ; '.'
0000000000001699         db  0x00 ; '.'
000000000000169a         db  0x00 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x00 ; '.'
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0xe8 ; '.'
00000000000016a1         db  0x0d ; '.'
00000000000016a2         db  0x22 ; '"'
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0x07 ; '.'
00000000000016a9         db  0x00 ; '.'
00000000000016aa         db  0x00 ; '.'
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x13 ; '.'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x00 ; '.'
00000000000016b1         db  0x00 ; '.'
00000000000016b2         db  0x00 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x00 ; '.'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0xf0 ; '.'
00000000000016b9         db  0x0d ; '.'
00000000000016ba         db  0x22 ; '"'
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0x07 ; '.'
00000000000016c1         db  0x00 ; '.'
00000000000016c2         db  0x00 ; '.'
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x14 ; '.'
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x00 ; '.'
00000000000016c9         db  0x00 ; '.'
00000000000016ca         db  0x00 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x00 ; '.'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0xf8 ; '.'
00000000000016d1         db  0x0d ; '.'
00000000000016d2         db  0x22 ; '"'
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0x07 ; '.'
00000000000016d9         db  0x00 ; '.'
00000000000016da         db  0x00 ; '.'
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x15 ; '.'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0x00 ; '.'
00000000000016e1         db  0x00 ; '.'
00000000000016e2         db  0x00 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x00 ; '.'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0x00 ; '.'
00000000000016e9         db  0x0e ; '.'
00000000000016ea         db  0x22 ; '"'
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0x07 ; '.'
00000000000016f1         db  0x00 ; '.'
00000000000016f2         db  0x00 ; '.'
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x16 ; '.'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x00 ; '.'
00000000000016f9         db  0x00 ; '.'
00000000000016fa         db  0x00 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x00 ; '.'
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0x08 ; '.'
0000000000001701         db  0x0e ; '.'
0000000000001702         db  0x22 ; '"'
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0x07 ; '.'
0000000000001709         db  0x00 ; '.'
000000000000170a         db  0x00 ; '.'
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x17 ; '.'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x00 ; '.'
0000000000001711         db  0x00 ; '.'
0000000000001712         db  0x00 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x00 ; '.'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0x10 ; '.'
0000000000001719         db  0x0e ; '.'
000000000000171a         db  0x22 ; '"'
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0x07 ; '.'
0000000000001721         db  0x00 ; '.'
0000000000001722         db  0x00 ; '.'
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x18 ; '.'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x00 ; '.'
0000000000001729         db  0x00 ; '.'
000000000000172a         db  0x00 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x00 ; '.'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0x18 ; '.'
0000000000001731         db  0x0e ; '.'
0000000000001732         db  0x22 ; '"'
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0x07 ; '.'
0000000000001739         db  0x00 ; '.'
000000000000173a         db  0x00 ; '.'
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x19 ; '.'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0x00 ; '.'
0000000000001741         db  0x00 ; '.'
0000000000001742         db  0x00 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x00 ; '.'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0x20 ; ' '
0000000000001749         db  0x0e ; '.'
000000000000174a         db  0x22 ; '"'
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0x07 ; '.'
0000000000001751         db  0x00 ; '.'
0000000000001752         db  0x00 ; '.'
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x1a ; '.'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0x00 ; '.'
0000000000001759         db  0x00 ; '.'
000000000000175a         db  0x00 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x00 ; '.'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0x28 ; '('
0000000000001761         db  0x0e ; '.'
0000000000001762         db  0x22 ; '"'
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0x07 ; '.'
0000000000001769         db  0x00 ; '.'
000000000000176a         db  0x00 ; '.'
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x1b ; '.'
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0x00 ; '.'
0000000000001771         db  0x00 ; '.'
0000000000001772         db  0x00 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x00 ; '.'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0x30 ; '0'
0000000000001779         db  0x0e ; '.'
000000000000177a         db  0x22 ; '"'
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0x07 ; '.'
0000000000001781         db  0x00 ; '.'
0000000000001782         db  0x00 ; '.'
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x1c ; '.'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0x00 ; '.'
0000000000001789         db  0x00 ; '.'
000000000000178a         db  0x00 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x00 ; '.'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0x38 ; '8'
0000000000001791         db  0x0e ; '.'
0000000000001792         db  0x22 ; '"'
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x00 ; '.'
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0x07 ; '.'
0000000000001799         db  0x00 ; '.'
000000000000179a         db  0x00 ; '.'
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x1d ; '.'
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0x00 ; '.'
00000000000017a1         db  0x00 ; '.'
00000000000017a2         db  0x00 ; '.'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x00 ; '.'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0x40 ; '@'
00000000000017a9         db  0x0e ; '.'
00000000000017aa         db  0x22 ; '"'
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0x07 ; '.'
00000000000017b1         db  0x00 ; '.'
00000000000017b2         db  0x00 ; '.'
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x1e ; '.'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0x00 ; '.'
00000000000017b9         db  0x00 ; '.'
00000000000017ba         db  0x00 ; '.'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x00 ; '.'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0x48 ; 'H'
00000000000017c1         db  0x0e ; '.'
00000000000017c2         db  0x22 ; '"'
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x00 ; '.'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'
00000000000017c8         db  0x07 ; '.'
00000000000017c9         db  0x00 ; '.'
00000000000017ca         db  0x00 ; '.'
00000000000017cb         db  0x00 ; '.'
00000000000017cc         db  0x1f ; '.'
00000000000017cd         db  0x00 ; '.'
00000000000017ce         db  0x00 ; '.'
00000000000017cf         db  0x00 ; '.'
00000000000017d0         db  0x00 ; '.'
00000000000017d1         db  0x00 ; '.'
00000000000017d2         db  0x00 ; '.'
00000000000017d3         db  0x00 ; '.'
00000000000017d4         db  0x00 ; '.'
00000000000017d5         db  0x00 ; '.'
00000000000017d6         db  0x00 ; '.'
00000000000017d7         db  0x00 ; '.'
00000000000017d8         db  0x50 ; 'P'
00000000000017d9         db  0x0e ; '.'
00000000000017da         db  0x22 ; '"'
00000000000017db         db  0x00 ; '.'
00000000000017dc         db  0x00 ; '.'
00000000000017dd         db  0x00 ; '.'
00000000000017de         db  0x00 ; '.'
00000000000017df         db  0x00 ; '.'
00000000000017e0         db  0x07 ; '.'
00000000000017e1         db  0x00 ; '.'
00000000000017e2         db  0x00 ; '.'
00000000000017e3         db  0x00 ; '.'
00000000000017e4         db  0x20 ; ' '
00000000000017e5         db  0x00 ; '.'
00000000000017e6         db  0x00 ; '.'
00000000000017e7         db  0x00 ; '.'
00000000000017e8         db  0x00 ; '.'
00000000000017e9         db  0x00 ; '.'
00000000000017ea         db  0x00 ; '.'
00000000000017eb         db  0x00 ; '.'
00000000000017ec         db  0x00 ; '.'
00000000000017ed         db  0x00 ; '.'
00000000000017ee         db  0x00 ; '.'
00000000000017ef         db  0x00 ; '.'
00000000000017f0         db  0x58 ; 'X'
00000000000017f1         db  0x0e ; '.'
00000000000017f2         db  0x22 ; '"'
00000000000017f3         db  0x00 ; '.'
00000000000017f4         db  0x00 ; '.'
00000000000017f5         db  0x00 ; '.'
00000000000017f6         db  0x00 ; '.'
00000000000017f7         db  0x00 ; '.'
00000000000017f8         db  0x07 ; '.'
00000000000017f9         db  0x00 ; '.'
00000000000017fa         db  0x00 ; '.'
00000000000017fb         db  0x00 ; '.'
00000000000017fc         db  0x21 ; '!'
00000000000017fd         db  0x00 ; '.'
00000000000017fe         db  0x00 ; '.'
00000000000017ff         db  0x00 ; '.'
0000000000001800         db  0x00 ; '.'
0000000000001801         db  0x00 ; '.'
0000000000001802         db  0x00 ; '.'
0000000000001803         db  0x00 ; '.'
0000000000001804         db  0x00 ; '.'
0000000000001805         db  0x00 ; '.'
0000000000001806         db  0x00 ; '.'
0000000000001807         db  0x00 ; '.'
0000000000001808         db  0x60 ; '`'
0000000000001809         db  0x0e ; '.'
000000000000180a         db  0x22 ; '"'
000000000000180b         db  0x00 ; '.'
000000000000180c         db  0x00 ; '.'
000000000000180d         db  0x00 ; '.'
000000000000180e         db  0x00 ; '.'
000000000000180f         db  0x00 ; '.'
0000000000001810         db  0x07 ; '.'
0000000000001811         db  0x00 ; '.'
0000000000001812         db  0x00 ; '.'
0000000000001813         db  0x00 ; '.'
0000000000001814         db  0x22 ; '"'
0000000000001815         db  0x00 ; '.'
0000000000001816         db  0x00 ; '.'
0000000000001817         db  0x00 ; '.'
0000000000001818         db  0x00 ; '.'
0000000000001819         db  0x00 ; '.'
000000000000181a         db  0x00 ; '.'
000000000000181b         db  0x00 ; '.'
000000000000181c         db  0x00 ; '.'
000000000000181d         db  0x00 ; '.'
000000000000181e         db  0x00 ; '.'
000000000000181f         db  0x00 ; '.'
0000000000001820         db  0x68 ; 'h'
0000000000001821         db  0x0e ; '.'
0000000000001822         db  0x22 ; '"'
0000000000001823         db  0x00 ; '.'
0000000000001824         db  0x00 ; '.'
0000000000001825         db  0x00 ; '.'
0000000000001826         db  0x00 ; '.'
0000000000001827         db  0x00 ; '.'
0000000000001828         db  0x07 ; '.'
0000000000001829         db  0x00 ; '.'
000000000000182a         db  0x00 ; '.'
000000000000182b         db  0x00 ; '.'
000000000000182c         db  0x23 ; '#'
000000000000182d         db  0x00 ; '.'
000000000000182e         db  0x00 ; '.'
000000000000182f         db  0x00 ; '.'
0000000000001830         db  0x00 ; '.'
0000000000001831         db  0x00 ; '.'
0000000000001832         db  0x00 ; '.'
0000000000001833         db  0x00 ; '.'
0000000000001834         db  0x00 ; '.'
0000000000001835         db  0x00 ; '.'
0000000000001836         db  0x00 ; '.'
0000000000001837         db  0x00 ; '.'
0000000000001838         db  0x70 ; 'p'
0000000000001839         db  0x0e ; '.'
000000000000183a         db  0x22 ; '"'
000000000000183b         db  0x00 ; '.'
000000000000183c         db  0x00 ; '.'
000000000000183d         db  0x00 ; '.'
000000000000183e         db  0x00 ; '.'
000000000000183f         db  0x00 ; '.'
0000000000001840         db  0x07 ; '.'
0000000000001841         db  0x00 ; '.'
0000000000001842         db  0x00 ; '.'
0000000000001843         db  0x00 ; '.'
0000000000001844         db  0x24 ; '$'
0000000000001845         db  0x00 ; '.'
0000000000001846         db  0x00 ; '.'
0000000000001847         db  0x00 ; '.'
0000000000001848         db  0x00 ; '.'
0000000000001849         db  0x00 ; '.'
000000000000184a         db  0x00 ; '.'
000000000000184b         db  0x00 ; '.'
000000000000184c         db  0x00 ; '.'
000000000000184d         db  0x00 ; '.'
000000000000184e         db  0x00 ; '.'
000000000000184f         db  0x00 ; '.'
0000000000001850         db  0x78 ; 'x'
0000000000001851         db  0x0e ; '.'
0000000000001852         db  0x22 ; '"'
0000000000001853         db  0x00 ; '.'
0000000000001854         db  0x00 ; '.'
0000000000001855         db  0x00 ; '.'
0000000000001856         db  0x00 ; '.'
0000000000001857         db  0x00 ; '.'
0000000000001858         db  0x07 ; '.'
0000000000001859         db  0x00 ; '.'
000000000000185a         db  0x00 ; '.'
000000000000185b         db  0x00 ; '.'
000000000000185c         db  0x25 ; '%'
000000000000185d         db  0x00 ; '.'
000000000000185e         db  0x00 ; '.'
000000000000185f         db  0x00 ; '.'
0000000000001860         db  0x00 ; '.'
0000000000001861         db  0x00 ; '.'
0000000000001862         db  0x00 ; '.'
0000000000001863         db  0x00 ; '.'
0000000000001864         db  0x00 ; '.'
0000000000001865         db  0x00 ; '.'
0000000000001866         db  0x00 ; '.'
0000000000001867         db  0x00 ; '.'
0000000000001868         db  0x80 ; '.'
0000000000001869         db  0x0e ; '.'
000000000000186a         db  0x22 ; '"'
000000000000186b         db  0x00 ; '.'
000000000000186c         db  0x00 ; '.'
000000000000186d         db  0x00 ; '.'
000000000000186e         db  0x00 ; '.'
000000000000186f         db  0x00 ; '.'
0000000000001870         db  0x07 ; '.'
0000000000001871         db  0x00 ; '.'
0000000000001872         db  0x00 ; '.'
0000000000001873         db  0x00 ; '.'
0000000000001874         db  0x27 ; '''
0000000000001875         db  0x00 ; '.'
0000000000001876         db  0x00 ; '.'
0000000000001877         db  0x00 ; '.'
0000000000001878         db  0x00 ; '.'
0000000000001879         db  0x00 ; '.'
000000000000187a         db  0x00 ; '.'
000000000000187b         db  0x00 ; '.'
000000000000187c         db  0x00 ; '.'
000000000000187d         db  0x00 ; '.'
000000000000187e         db  0x00 ; '.'
000000000000187f         db  0x00 ; '.'
0000000000001880         db  0x88 ; '.'
0000000000001881         db  0x0e ; '.'
0000000000001882         db  0x22 ; '"'
0000000000001883         db  0x00 ; '.'
0000000000001884         db  0x00 ; '.'
0000000000001885         db  0x00 ; '.'
0000000000001886         db  0x00 ; '.'
0000000000001887         db  0x00 ; '.'
0000000000001888         db  0x07 ; '.'
0000000000001889         db  0x00 ; '.'
000000000000188a         db  0x00 ; '.'
000000000000188b         db  0x00 ; '.'
000000000000188c         db  0x28 ; '('
000000000000188d         db  0x00 ; '.'
000000000000188e         db  0x00 ; '.'
000000000000188f         db  0x00 ; '.'
0000000000001890         db  0x00 ; '.'
0000000000001891         db  0x00 ; '.'
0000000000001892         db  0x00 ; '.'
0000000000001893         db  0x00 ; '.'
0000000000001894         db  0x00 ; '.'
0000000000001895         db  0x00 ; '.'
0000000000001896         db  0x00 ; '.'
0000000000001897         db  0x00 ; '.'
0000000000001898         db  0x90 ; '.'
0000000000001899         db  0x0e ; '.'
000000000000189a         db  0x22 ; '"'
000000000000189b         db  0x00 ; '.'
000000000000189c         db  0x00 ; '.'
000000000000189d         db  0x00 ; '.'
000000000000189e         db  0x00 ; '.'
000000000000189f         db  0x00 ; '.'
00000000000018a0         db  0x07 ; '.'
00000000000018a1         db  0x00 ; '.'
00000000000018a2         db  0x00 ; '.'
00000000000018a3         db  0x00 ; '.'
00000000000018a4         db  0x29 ; ')'
00000000000018a5         db  0x00 ; '.'
00000000000018a6         db  0x00 ; '.'
00000000000018a7         db  0x00 ; '.'
00000000000018a8         db  0x00 ; '.'
00000000000018a9         db  0x00 ; '.'
00000000000018aa         db  0x00 ; '.'
00000000000018ab         db  0x00 ; '.'
00000000000018ac         db  0x00 ; '.'
00000000000018ad         db  0x00 ; '.'
00000000000018ae         db  0x00 ; '.'
00000000000018af         db  0x00 ; '.'
00000000000018b0         db  0x98 ; '.'
00000000000018b1         db  0x0e ; '.'
00000000000018b2         db  0x22 ; '"'
00000000000018b3         db  0x00 ; '.'
00000000000018b4         db  0x00 ; '.'
00000000000018b5         db  0x00 ; '.'
00000000000018b6         db  0x00 ; '.'
00000000000018b7         db  0x00 ; '.'
00000000000018b8         db  0x07 ; '.'
00000000000018b9         db  0x00 ; '.'
00000000000018ba         db  0x00 ; '.'
00000000000018bb         db  0x00 ; '.'
00000000000018bc         db  0x2a ; '*'
00000000000018bd         db  0x00 ; '.'
00000000000018be         db  0x00 ; '.'
00000000000018bf         db  0x00 ; '.'
00000000000018c0         db  0x00 ; '.'
00000000000018c1         db  0x00 ; '.'
00000000000018c2         db  0x00 ; '.'
00000000000018c3         db  0x00 ; '.'
00000000000018c4         db  0x00 ; '.'
00000000000018c5         db  0x00 ; '.'
00000000000018c6         db  0x00 ; '.'
00000000000018c7         db  0x00 ; '.'
00000000000018c8         db  0xa0 ; '.'
00000000000018c9         db  0x0e ; '.'
00000000000018ca         db  0x22 ; '"'
00000000000018cb         db  0x00 ; '.'
00000000000018cc         db  0x00 ; '.'
00000000000018cd         db  0x00 ; '.'
00000000000018ce         db  0x00 ; '.'
00000000000018cf         db  0x00 ; '.'
00000000000018d0         db  0x07 ; '.'
00000000000018d1         db  0x00 ; '.'
00000000000018d2         db  0x00 ; '.'
00000000000018d3         db  0x00 ; '.'
00000000000018d4         db  0x2b ; '+'
00000000000018d5         db  0x00 ; '.'
00000000000018d6         db  0x00 ; '.'
00000000000018d7         db  0x00 ; '.'
00000000000018d8         db  0x00 ; '.'
00000000000018d9         db  0x00 ; '.'
00000000000018da         db  0x00 ; '.'
00000000000018db         db  0x00 ; '.'
00000000000018dc         db  0x00 ; '.'
00000000000018dd         db  0x00 ; '.'
00000000000018de         db  0x00 ; '.'
00000000000018df         db  0x00 ; '.'
00000000000018e0         db  0xa8 ; '.'
00000000000018e1         db  0x0e ; '.'
00000000000018e2         db  0x22 ; '"'
00000000000018e3         db  0x00 ; '.'
00000000000018e4         db  0x00 ; '.'
00000000000018e5         db  0x00 ; '.'
00000000000018e6         db  0x00 ; '.'
00000000000018e7         db  0x00 ; '.'
00000000000018e8         db  0x07 ; '.'
00000000000018e9         db  0x00 ; '.'
00000000000018ea         db  0x00 ; '.'
00000000000018eb         db  0x00 ; '.'
00000000000018ec         db  0x2d ; '-'
00000000000018ed         db  0x00 ; '.'
00000000000018ee         db  0x00 ; '.'
00000000000018ef         db  0x00 ; '.'
00000000000018f0         db  0x00 ; '.'
00000000000018f1         db  0x00 ; '.'
00000000000018f2         db  0x00 ; '.'
00000000000018f3         db  0x00 ; '.'
00000000000018f4         db  0x00 ; '.'
00000000000018f5         db  0x00 ; '.'
00000000000018f6         db  0x00 ; '.'
00000000000018f7         db  0x00 ; '.'
00000000000018f8         db  0xb0 ; '.'
00000000000018f9         db  0x0e ; '.'
00000000000018fa         db  0x22 ; '"'
00000000000018fb         db  0x00 ; '.'
00000000000018fc         db  0x00 ; '.'
00000000000018fd         db  0x00 ; '.'
00000000000018fe         db  0x00 ; '.'
00000000000018ff         db  0x00 ; '.'
0000000000001900         db  0x07 ; '.'
0000000000001901         db  0x00 ; '.'
0000000000001902         db  0x00 ; '.'
0000000000001903         db  0x00 ; '.'
0000000000001904         db  0x2e ; '.'
0000000000001905         db  0x00 ; '.'
0000000000001906         db  0x00 ; '.'
0000000000001907         db  0x00 ; '.'
0000000000001908         db  0x00 ; '.'
0000000000001909         db  0x00 ; '.'
000000000000190a         db  0x00 ; '.'
000000000000190b         db  0x00 ; '.'
000000000000190c         db  0x00 ; '.'
000000000000190d         db  0x00 ; '.'
000000000000190e         db  0x00 ; '.'
000000000000190f         db  0x00 ; '.'
0000000000001910         db  0xb8 ; '.'
0000000000001911         db  0x0e ; '.'
0000000000001912         db  0x22 ; '"'
0000000000001913         db  0x00 ; '.'
0000000000001914         db  0x00 ; '.'
0000000000001915         db  0x00 ; '.'
0000000000001916         db  0x00 ; '.'
0000000000001917         db  0x00 ; '.'
0000000000001918         db  0x07 ; '.'
0000000000001919         db  0x00 ; '.'
000000000000191a         db  0x00 ; '.'
000000000000191b         db  0x00 ; '.'
000000000000191c         db  0x2f ; '/'
000000000000191d         db  0x00 ; '.'
000000000000191e         db  0x00 ; '.'
000000000000191f         db  0x00 ; '.'
0000000000001920         db  0x00 ; '.'
0000000000001921         db  0x00 ; '.'
0000000000001922         db  0x00 ; '.'
0000000000001923         db  0x00 ; '.'
0000000000001924         db  0x00 ; '.'
0000000000001925         db  0x00 ; '.'
0000000000001926         db  0x00 ; '.'
0000000000001927         db  0x00 ; '.'
0000000000001928         db  0xc0 ; '.'
0000000000001929         db  0x0e ; '.'
000000000000192a         db  0x22 ; '"'
000000000000192b         db  0x00 ; '.'
000000000000192c         db  0x00 ; '.'
000000000000192d         db  0x00 ; '.'
000000000000192e         db  0x00 ; '.'
000000000000192f         db  0x00 ; '.'
0000000000001930         db  0x07 ; '.'
0000000000001931         db  0x00 ; '.'
0000000000001932         db  0x00 ; '.'
0000000000001933         db  0x00 ; '.'
0000000000001934         db  0x30 ; '0'
0000000000001935         db  0x00 ; '.'
0000000000001936         db  0x00 ; '.'
0000000000001937         db  0x00 ; '.'
0000000000001938         db  0x00 ; '.'
0000000000001939         db  0x00 ; '.'
000000000000193a         db  0x00 ; '.'
000000000000193b         db  0x00 ; '.'
000000000000193c         db  0x00 ; '.'
000000000000193d         db  0x00 ; '.'
000000000000193e         db  0x00 ; '.'
000000000000193f         db  0x00 ; '.'
0000000000001940         db  0xc8 ; '.'
0000000000001941         db  0x0e ; '.'
0000000000001942         db  0x22 ; '"'
0000000000001943         db  0x00 ; '.'
0000000000001944         db  0x00 ; '.'
0000000000001945         db  0x00 ; '.'
0000000000001946         db  0x00 ; '.'
0000000000001947         db  0x00 ; '.'
0000000000001948         db  0x07 ; '.'
0000000000001949         db  0x00 ; '.'
000000000000194a         db  0x00 ; '.'
000000000000194b         db  0x00 ; '.'
000000000000194c         db  0x31 ; '1'
000000000000194d         db  0x00 ; '.'
000000000000194e         db  0x00 ; '.'
000000000000194f         db  0x00 ; '.'
0000000000001950         db  0x00 ; '.'
0000000000001951         db  0x00 ; '.'
0000000000001952         db  0x00 ; '.'
0000000000001953         db  0x00 ; '.'
0000000000001954         db  0x00 ; '.'
0000000000001955         db  0x00 ; '.'
0000000000001956         db  0x00 ; '.'
0000000000001957         db  0x00 ; '.'
0000000000001958         db  0xd0 ; '.'
0000000000001959         db  0x0e ; '.'
000000000000195a         db  0x22 ; '"'
000000000000195b         db  0x00 ; '.'
000000000000195c         db  0x00 ; '.'
000000000000195d         db  0x00 ; '.'
000000000000195e         db  0x00 ; '.'
000000000000195f         db  0x00 ; '.'
0000000000001960         db  0x07 ; '.'
0000000000001961         db  0x00 ; '.'
0000000000001962         db  0x00 ; '.'
0000000000001963         db  0x00 ; '.'
0000000000001964         db  0x32 ; '2'
0000000000001965         db  0x00 ; '.'
0000000000001966         db  0x00 ; '.'
0000000000001967         db  0x00 ; '.'
0000000000001968         db  0x00 ; '.'
0000000000001969         db  0x00 ; '.'
000000000000196a         db  0x00 ; '.'
000000000000196b         db  0x00 ; '.'
000000000000196c         db  0x00 ; '.'
000000000000196d         db  0x00 ; '.'
000000000000196e         db  0x00 ; '.'
000000000000196f         db  0x00 ; '.'
0000000000001970         db  0xd8 ; '.'
0000000000001971         db  0x0e ; '.'
0000000000001972         db  0x22 ; '"'
0000000000001973         db  0x00 ; '.'
0000000000001974         db  0x00 ; '.'
0000000000001975         db  0x00 ; '.'
0000000000001976         db  0x00 ; '.'
0000000000001977         db  0x00 ; '.'
0000000000001978         db  0x07 ; '.'
0000000000001979         db  0x00 ; '.'
000000000000197a         db  0x00 ; '.'
000000000000197b         db  0x00 ; '.'
000000000000197c         db  0x33 ; '3'
000000000000197d         db  0x00 ; '.'
000000000000197e         db  0x00 ; '.'
000000000000197f         db  0x00 ; '.'
0000000000001980         db  0x00 ; '.'
0000000000001981         db  0x00 ; '.'
0000000000001982         db  0x00 ; '.'
0000000000001983         db  0x00 ; '.'
0000000000001984         db  0x00 ; '.'
0000000000001985         db  0x00 ; '.'
0000000000001986         db  0x00 ; '.'
0000000000001987         db  0x00 ; '.'
0000000000001988         db  0xe0 ; '.'
0000000000001989         db  0x0e ; '.'
000000000000198a         db  0x22 ; '"'
000000000000198b         db  0x00 ; '.'
000000000000198c         db  0x00 ; '.'
000000000000198d         db  0x00 ; '.'
000000000000198e         db  0x00 ; '.'
000000000000198f         db  0x00 ; '.'
0000000000001990         db  0x07 ; '.'
0000000000001991         db  0x00 ; '.'
0000000000001992         db  0x00 ; '.'
0000000000001993         db  0x00 ; '.'
0000000000001994         db  0x34 ; '4'
0000000000001995         db  0x00 ; '.'
0000000000001996         db  0x00 ; '.'
0000000000001997         db  0x00 ; '.'
0000000000001998         db  0x00 ; '.'
0000000000001999         db  0x00 ; '.'
000000000000199a         db  0x00 ; '.'
000000000000199b         db  0x00 ; '.'
000000000000199c         db  0x00 ; '.'
000000000000199d         db  0x00 ; '.'
000000000000199e         db  0x00 ; '.'
000000000000199f         db  0x00 ; '.'
00000000000019a0         db  0xe8 ; '.'
00000000000019a1         db  0x0e ; '.'
00000000000019a2         db  0x22 ; '"'
00000000000019a3         db  0x00 ; '.'
00000000000019a4         db  0x00 ; '.'
00000000000019a5         db  0x00 ; '.'
00000000000019a6         db  0x00 ; '.'
00000000000019a7         db  0x00 ; '.'
00000000000019a8         db  0x07 ; '.'
00000000000019a9         db  0x00 ; '.'
00000000000019aa         db  0x00 ; '.'
00000000000019ab         db  0x00 ; '.'
00000000000019ac         db  0x35 ; '5'
00000000000019ad         db  0x00 ; '.'
00000000000019ae         db  0x00 ; '.'
00000000000019af         db  0x00 ; '.'
00000000000019b0         db  0x00 ; '.'
00000000000019b1         db  0x00 ; '.'
00000000000019b2         db  0x00 ; '.'
00000000000019b3         db  0x00 ; '.'
00000000000019b4         db  0x00 ; '.'
00000000000019b5         db  0x00 ; '.'
00000000000019b6         db  0x00 ; '.'
00000000000019b7         db  0x00 ; '.'
00000000000019b8         db  0xf0 ; '.'
00000000000019b9         db  0x0e ; '.'
00000000000019ba         db  0x22 ; '"'
00000000000019bb         db  0x00 ; '.'
00000000000019bc         db  0x00 ; '.'
00000000000019bd         db  0x00 ; '.'
00000000000019be         db  0x00 ; '.'
00000000000019bf         db  0x00 ; '.'
00000000000019c0         db  0x07 ; '.'
00000000000019c1         db  0x00 ; '.'
00000000000019c2         db  0x00 ; '.'
00000000000019c3         db  0x00 ; '.'
00000000000019c4         db  0x36 ; '6'
00000000000019c5         db  0x00 ; '.'
00000000000019c6         db  0x00 ; '.'
00000000000019c7         db  0x00 ; '.'
00000000000019c8         db  0x00 ; '.'
00000000000019c9         db  0x00 ; '.'
00000000000019ca         db  0x00 ; '.'
00000000000019cb         db  0x00 ; '.'
00000000000019cc         db  0x00 ; '.'
00000000000019cd         db  0x00 ; '.'
00000000000019ce         db  0x00 ; '.'
00000000000019cf         db  0x00 ; '.'
00000000000019d0         db  0xf8 ; '.'
00000000000019d1         db  0x0e ; '.'
00000000000019d2         db  0x22 ; '"'
00000000000019d3         db  0x00 ; '.'
00000000000019d4         db  0x00 ; '.'
00000000000019d5         db  0x00 ; '.'
00000000000019d6         db  0x00 ; '.'
00000000000019d7         db  0x00 ; '.'
00000000000019d8         db  0x07 ; '.'
00000000000019d9         db  0x00 ; '.'
00000000000019da         db  0x00 ; '.'
00000000000019db         db  0x00 ; '.'
00000000000019dc         db  0x37 ; '7'
00000000000019dd         db  0x00 ; '.'
00000000000019de         db  0x00 ; '.'
00000000000019df         db  0x00 ; '.'
00000000000019e0         db  0x00 ; '.'
00000000000019e1         db  0x00 ; '.'
00000000000019e2         db  0x00 ; '.'
00000000000019e3         db  0x00 ; '.'
00000000000019e4         db  0x00 ; '.'
00000000000019e5         db  0x00 ; '.'
00000000000019e6         db  0x00 ; '.'
00000000000019e7         db  0x00 ; '.'
00000000000019e8         db  0x00 ; '.'
00000000000019e9         db  0x0f ; '.'
00000000000019ea         db  0x22 ; '"'
00000000000019eb         db  0x00 ; '.'
00000000000019ec         db  0x00 ; '.'
00000000000019ed         db  0x00 ; '.'
00000000000019ee         db  0x00 ; '.'
00000000000019ef         db  0x00 ; '.'
00000000000019f0         db  0x07 ; '.'
00000000000019f1         db  0x00 ; '.'
00000000000019f2         db  0x00 ; '.'
00000000000019f3         db  0x00 ; '.'
00000000000019f4         db  0x38 ; '8'
00000000000019f5         db  0x00 ; '.'
00000000000019f6         db  0x00 ; '.'
00000000000019f7         db  0x00 ; '.'
00000000000019f8         db  0x00 ; '.'
00000000000019f9         db  0x00 ; '.'
00000000000019fa         db  0x00 ; '.'
00000000000019fb         db  0x00 ; '.'
00000000000019fc         db  0x00 ; '.'
00000000000019fd         db  0x00 ; '.'
00000000000019fe         db  0x00 ; '.'
00000000000019ff         db  0x00 ; '.'
0000000000001a00         db  0x08 ; '.'
0000000000001a01         db  0x0f ; '.'
0000000000001a02         db  0x22 ; '"'
0000000000001a03         db  0x00 ; '.'
0000000000001a04         db  0x00 ; '.'
0000000000001a05         db  0x00 ; '.'
0000000000001a06         db  0x00 ; '.'
0000000000001a07         db  0x00 ; '.'
0000000000001a08         db  0x07 ; '.'
0000000000001a09         db  0x00 ; '.'
0000000000001a0a         db  0x00 ; '.'
0000000000001a0b         db  0x00 ; '.'
0000000000001a0c         db  0x39 ; '9'
0000000000001a0d         db  0x00 ; '.'
0000000000001a0e         db  0x00 ; '.'
0000000000001a0f         db  0x00 ; '.'
0000000000001a10         db  0x00 ; '.'
0000000000001a11         db  0x00 ; '.'
0000000000001a12         db  0x00 ; '.'
0000000000001a13         db  0x00 ; '.'
0000000000001a14         db  0x00 ; '.'
0000000000001a15         db  0x00 ; '.'
0000000000001a16         db  0x00 ; '.'
0000000000001a17         db  0x00 ; '.'
0000000000001a18         db  0x10 ; '.'
0000000000001a19         db  0x0f ; '.'
0000000000001a1a         db  0x22 ; '"'
0000000000001a1b         db  0x00 ; '.'
0000000000001a1c         db  0x00 ; '.'
0000000000001a1d         db  0x00 ; '.'
0000000000001a1e         db  0x00 ; '.'
0000000000001a1f         db  0x00 ; '.'
0000000000001a20         db  0x07 ; '.'
0000000000001a21         db  0x00 ; '.'
0000000000001a22         db  0x00 ; '.'
0000000000001a23         db  0x00 ; '.'
0000000000001a24         db  0x3a ; ':'
0000000000001a25         db  0x00 ; '.'
0000000000001a26         db  0x00 ; '.'
0000000000001a27         db  0x00 ; '.'
0000000000001a28         db  0x00 ; '.'
0000000000001a29         db  0x00 ; '.'
0000000000001a2a         db  0x00 ; '.'
0000000000001a2b         db  0x00 ; '.'
0000000000001a2c         db  0x00 ; '.'
0000000000001a2d         db  0x00 ; '.'
0000000000001a2e         db  0x00 ; '.'
0000000000001a2f         db  0x00 ; '.'
0000000000001a30         db  0x18 ; '.'
0000000000001a31         db  0x0f ; '.'
0000000000001a32         db  0x22 ; '"'
0000000000001a33         db  0x00 ; '.'
0000000000001a34         db  0x00 ; '.'
0000000000001a35         db  0x00 ; '.'
0000000000001a36         db  0x00 ; '.'
0000000000001a37         db  0x00 ; '.'
0000000000001a38         db  0x07 ; '.'
0000000000001a39         db  0x00 ; '.'
0000000000001a3a         db  0x00 ; '.'
0000000000001a3b         db  0x00 ; '.'
0000000000001a3c         db  0x3b ; ';'
0000000000001a3d         db  0x00 ; '.'
0000000000001a3e         db  0x00 ; '.'
0000000000001a3f         db  0x00 ; '.'
0000000000001a40         db  0x00 ; '.'
0000000000001a41         db  0x00 ; '.'
0000000000001a42         db  0x00 ; '.'
0000000000001a43         db  0x00 ; '.'
0000000000001a44         db  0x00 ; '.'
0000000000001a45         db  0x00 ; '.'
0000000000001a46         db  0x00 ; '.'
0000000000001a47         db  0x00 ; '.'
0000000000001a48         db  0x20 ; ' '
0000000000001a49         db  0x0f ; '.'
0000000000001a4a         db  0x22 ; '"'
0000000000001a4b         db  0x00 ; '.'
0000000000001a4c         db  0x00 ; '.'
0000000000001a4d         db  0x00 ; '.'
0000000000001a4e         db  0x00 ; '.'
0000000000001a4f         db  0x00 ; '.'
0000000000001a50         db  0x07 ; '.'
0000000000001a51         db  0x00 ; '.'
0000000000001a52         db  0x00 ; '.'
0000000000001a53         db  0x00 ; '.'
0000000000001a54         db  0x3c ; '<'
0000000000001a55         db  0x00 ; '.'
0000000000001a56         db  0x00 ; '.'
0000000000001a57         db  0x00 ; '.'
0000000000001a58         db  0x00 ; '.'
0000000000001a59         db  0x00 ; '.'
0000000000001a5a         db  0x00 ; '.'
0000000000001a5b         db  0x00 ; '.'
0000000000001a5c         db  0x00 ; '.'
0000000000001a5d         db  0x00 ; '.'
0000000000001a5e         db  0x00 ; '.'
0000000000001a5f         db  0x00 ; '.'
0000000000001a60         db  0x28 ; '('
0000000000001a61         db  0x0f ; '.'
0000000000001a62         db  0x22 ; '"'
0000000000001a63         db  0x00 ; '.'
0000000000001a64         db  0x00 ; '.'
0000000000001a65         db  0x00 ; '.'
0000000000001a66         db  0x00 ; '.'
0000000000001a67         db  0x00 ; '.'
0000000000001a68         db  0x07 ; '.'
0000000000001a69         db  0x00 ; '.'
0000000000001a6a         db  0x00 ; '.'
0000000000001a6b         db  0x00 ; '.'
0000000000001a6c         db  0x3d ; '='
0000000000001a6d         db  0x00 ; '.'
0000000000001a6e         db  0x00 ; '.'
0000000000001a6f         db  0x00 ; '.'
0000000000001a70         db  0x00 ; '.'
0000000000001a71         db  0x00 ; '.'
0000000000001a72         db  0x00 ; '.'
0000000000001a73         db  0x00 ; '.'
0000000000001a74         db  0x00 ; '.'
0000000000001a75         db  0x00 ; '.'
0000000000001a76         db  0x00 ; '.'
0000000000001a77         db  0x00 ; '.'
0000000000001a78         db  0x30 ; '0'
0000000000001a79         db  0x0f ; '.'
0000000000001a7a         db  0x22 ; '"'
0000000000001a7b         db  0x00 ; '.'
0000000000001a7c         db  0x00 ; '.'
0000000000001a7d         db  0x00 ; '.'
0000000000001a7e         db  0x00 ; '.'
0000000000001a7f         db  0x00 ; '.'
0000000000001a80         db  0x07 ; '.'
0000000000001a81         db  0x00 ; '.'
0000000000001a82         db  0x00 ; '.'
0000000000001a83         db  0x00 ; '.'
0000000000001a84         db  0x3e ; '>'
0000000000001a85         db  0x00 ; '.'
0000000000001a86         db  0x00 ; '.'
0000000000001a87         db  0x00 ; '.'
0000000000001a88         db  0x00 ; '.'
0000000000001a89         db  0x00 ; '.'
0000000000001a8a         db  0x00 ; '.'
0000000000001a8b         db  0x00 ; '.'
0000000000001a8c         db  0x00 ; '.'
0000000000001a8d         db  0x00 ; '.'
0000000000001a8e         db  0x00 ; '.'
0000000000001a8f         db  0x00 ; '.'
0000000000001a90         db  0x38 ; '8'
0000000000001a91         db  0x0f ; '.'
0000000000001a92         db  0x22 ; '"'
0000000000001a93         db  0x00 ; '.'
0000000000001a94         db  0x00 ; '.'
0000000000001a95         db  0x00 ; '.'
0000000000001a96         db  0x00 ; '.'
0000000000001a97         db  0x00 ; '.'
0000000000001a98         db  0x07 ; '.'
0000000000001a99         db  0x00 ; '.'
0000000000001a9a         db  0x00 ; '.'
0000000000001a9b         db  0x00 ; '.'
0000000000001a9c         db  0x3f ; '?'
0000000000001a9d         db  0x00 ; '.'
0000000000001a9e         db  0x00 ; '.'
0000000000001a9f         db  0x00 ; '.'
0000000000001aa0         db  0x00 ; '.'
0000000000001aa1         db  0x00 ; '.'
0000000000001aa2         db  0x00 ; '.'
0000000000001aa3         db  0x00 ; '.'
0000000000001aa4         db  0x00 ; '.'
0000000000001aa5         db  0x00 ; '.'
0000000000001aa6         db  0x00 ; '.'
0000000000001aa7         db  0x00 ; '.'
0000000000001aa8         db  0x40 ; '@'
0000000000001aa9         db  0x0f ; '.'
0000000000001aaa         db  0x22 ; '"'
0000000000001aab         db  0x00 ; '.'
0000000000001aac         db  0x00 ; '.'
0000000000001aad         db  0x00 ; '.'
0000000000001aae         db  0x00 ; '.'
0000000000001aaf         db  0x00 ; '.'
0000000000001ab0         db  0x07 ; '.'
0000000000001ab1         db  0x00 ; '.'
0000000000001ab2         db  0x00 ; '.'
0000000000001ab3         db  0x00 ; '.'
0000000000001ab4         db  0x40 ; '@'
0000000000001ab5         db  0x00 ; '.'
0000000000001ab6         db  0x00 ; '.'
0000000000001ab7         db  0x00 ; '.'
0000000000001ab8         db  0x00 ; '.'
0000000000001ab9         db  0x00 ; '.'
0000000000001aba         db  0x00 ; '.'
0000000000001abb         db  0x00 ; '.'
0000000000001abc         db  0x00 ; '.'
0000000000001abd         db  0x00 ; '.'
0000000000001abe         db  0x00 ; '.'
0000000000001abf         db  0x00 ; '.'
0000000000001ac0         db  0x48 ; 'H'
0000000000001ac1         db  0x0f ; '.'
0000000000001ac2         db  0x22 ; '"'
0000000000001ac3         db  0x00 ; '.'
0000000000001ac4         db  0x00 ; '.'
0000000000001ac5         db  0x00 ; '.'
0000000000001ac6         db  0x00 ; '.'
0000000000001ac7         db  0x00 ; '.'
0000000000001ac8         db  0x07 ; '.'
0000000000001ac9         db  0x00 ; '.'
0000000000001aca         db  0x00 ; '.'
0000000000001acb         db  0x00 ; '.'
0000000000001acc         db  0x41 ; 'A'
0000000000001acd         db  0x00 ; '.'
0000000000001ace         db  0x00 ; '.'
0000000000001acf         db  0x00 ; '.'
0000000000001ad0         db  0x00 ; '.'
0000000000001ad1         db  0x00 ; '.'
0000000000001ad2         db  0x00 ; '.'
0000000000001ad3         db  0x00 ; '.'
0000000000001ad4         db  0x00 ; '.'
0000000000001ad5         db  0x00 ; '.'
0000000000001ad6         db  0x00 ; '.'
0000000000001ad7         db  0x00 ; '.'
0000000000001ad8         db  0x50 ; 'P'
0000000000001ad9         db  0x0f ; '.'
0000000000001ada         db  0x22 ; '"'
0000000000001adb         db  0x00 ; '.'
0000000000001adc         db  0x00 ; '.'
0000000000001add         db  0x00 ; '.'
0000000000001ade         db  0x00 ; '.'
0000000000001adf         db  0x00 ; '.'
0000000000001ae0         db  0x07 ; '.'
0000000000001ae1         db  0x00 ; '.'
0000000000001ae2         db  0x00 ; '.'
0000000000001ae3         db  0x00 ; '.'
0000000000001ae4         db  0x42 ; 'B'
0000000000001ae5         db  0x00 ; '.'
0000000000001ae6         db  0x00 ; '.'
0000000000001ae7         db  0x00 ; '.'
0000000000001ae8         db  0x00 ; '.'
0000000000001ae9         db  0x00 ; '.'
0000000000001aea         db  0x00 ; '.'
0000000000001aeb         db  0x00 ; '.'
0000000000001aec         db  0x00 ; '.'
0000000000001aed         db  0x00 ; '.'
0000000000001aee         db  0x00 ; '.'
0000000000001aef         db  0x00 ; '.'
0000000000001af0         db  0x58 ; 'X'
0000000000001af1         db  0x0f ; '.'
0000000000001af2         db  0x22 ; '"'
0000000000001af3         db  0x00 ; '.'
0000000000001af4         db  0x00 ; '.'
0000000000001af5         db  0x00 ; '.'
0000000000001af6         db  0x00 ; '.'
0000000000001af7         db  0x00 ; '.'
0000000000001af8         db  0x07 ; '.'
0000000000001af9         db  0x00 ; '.'
0000000000001afa         db  0x00 ; '.'
0000000000001afb         db  0x00 ; '.'
0000000000001afc         db  0x43 ; 'C'
0000000000001afd         db  0x00 ; '.'
0000000000001afe         db  0x00 ; '.'
0000000000001aff         db  0x00 ; '.'
0000000000001b00         db  0x00 ; '.'
0000000000001b01         db  0x00 ; '.'
0000000000001b02         db  0x00 ; '.'
0000000000001b03         db  0x00 ; '.'
0000000000001b04         db  0x00 ; '.'
0000000000001b05         db  0x00 ; '.'
0000000000001b06         db  0x00 ; '.'
0000000000001b07         db  0x00 ; '.'
0000000000001b08         db  0x60 ; '`'
0000000000001b09         db  0x0f ; '.'
0000000000001b0a         db  0x22 ; '"'
0000000000001b0b         db  0x00 ; '.'
0000000000001b0c         db  0x00 ; '.'
0000000000001b0d         db  0x00 ; '.'
0000000000001b0e         db  0x00 ; '.'
0000000000001b0f         db  0x00 ; '.'
0000000000001b10         db  0x07 ; '.'
0000000000001b11         db  0x00 ; '.'
0000000000001b12         db  0x00 ; '.'
0000000000001b13         db  0x00 ; '.'
0000000000001b14         db  0x44 ; 'D'
0000000000001b15         db  0x00 ; '.'
0000000000001b16         db  0x00 ; '.'
0000000000001b17         db  0x00 ; '.'
0000000000001b18         db  0x00 ; '.'
0000000000001b19         db  0x00 ; '.'
0000000000001b1a         db  0x00 ; '.'
0000000000001b1b         db  0x00 ; '.'
0000000000001b1c         db  0x00 ; '.'
0000000000001b1d         db  0x00 ; '.'
0000000000001b1e         db  0x00 ; '.'
0000000000001b1f         db  0x00 ; '.'
0000000000001b20         db  0x68 ; 'h'
0000000000001b21         db  0x0f ; '.'
0000000000001b22         db  0x22 ; '"'
0000000000001b23         db  0x00 ; '.'
0000000000001b24         db  0x00 ; '.'
0000000000001b25         db  0x00 ; '.'
0000000000001b26         db  0x00 ; '.'
0000000000001b27         db  0x00 ; '.'
0000000000001b28         db  0x07 ; '.'
0000000000001b29         db  0x00 ; '.'
0000000000001b2a         db  0x00 ; '.'
0000000000001b2b         db  0x00 ; '.'
0000000000001b2c         db  0x45 ; 'E'
0000000000001b2d         db  0x00 ; '.'
0000000000001b2e         db  0x00 ; '.'
0000000000001b2f         db  0x00 ; '.'
0000000000001b30         db  0x00 ; '.'
0000000000001b31         db  0x00 ; '.'
0000000000001b32         db  0x00 ; '.'
0000000000001b33         db  0x00 ; '.'
0000000000001b34         db  0x00 ; '.'
0000000000001b35         db  0x00 ; '.'
0000000000001b36         db  0x00 ; '.'
0000000000001b37         db  0x00 ; '.'
0000000000001b38         db  0x70 ; 'p'
0000000000001b39         db  0x0f ; '.'
0000000000001b3a         db  0x22 ; '"'
0000000000001b3b         db  0x00 ; '.'
0000000000001b3c         db  0x00 ; '.'
0000000000001b3d         db  0x00 ; '.'
0000000000001b3e         db  0x00 ; '.'
0000000000001b3f         db  0x00 ; '.'
0000000000001b40         db  0x07 ; '.'
0000000000001b41         db  0x00 ; '.'
0000000000001b42         db  0x00 ; '.'
0000000000001b43         db  0x00 ; '.'
0000000000001b44         db  0x46 ; 'F'
0000000000001b45         db  0x00 ; '.'
0000000000001b46         db  0x00 ; '.'
0000000000001b47         db  0x00 ; '.'
0000000000001b48         db  0x00 ; '.'
0000000000001b49         db  0x00 ; '.'
0000000000001b4a         db  0x00 ; '.'
0000000000001b4b         db  0x00 ; '.'
0000000000001b4c         db  0x00 ; '.'
0000000000001b4d         db  0x00 ; '.'
0000000000001b4e         db  0x00 ; '.'
0000000000001b4f         db  0x00 ; '.'
0000000000001b50         db  0x78 ; 'x'
0000000000001b51         db  0x0f ; '.'
0000000000001b52         db  0x22 ; '"'
0000000000001b53         db  0x00 ; '.'
0000000000001b54         db  0x00 ; '.'
0000000000001b55         db  0x00 ; '.'
0000000000001b56         db  0x00 ; '.'
0000000000001b57         db  0x00 ; '.'
0000000000001b58         db  0x07 ; '.'
0000000000001b59         db  0x00 ; '.'
0000000000001b5a         db  0x00 ; '.'
0000000000001b5b         db  0x00 ; '.'
0000000000001b5c         db  0x47 ; 'G'
0000000000001b5d         db  0x00 ; '.'
0000000000001b5e         db  0x00 ; '.'
0000000000001b5f         db  0x00 ; '.'
0000000000001b60         db  0x00 ; '.'
0000000000001b61         db  0x00 ; '.'
0000000000001b62         db  0x00 ; '.'
0000000000001b63         db  0x00 ; '.'
0000000000001b64         db  0x00 ; '.'
0000000000001b65         db  0x00 ; '.'
0000000000001b66         db  0x00 ; '.'
0000000000001b67         db  0x00 ; '.'
0000000000001b68         db  0x80 ; '.'
0000000000001b69         db  0x0f ; '.'
0000000000001b6a         db  0x22 ; '"'
0000000000001b6b         db  0x00 ; '.'
0000000000001b6c         db  0x00 ; '.'
0000000000001b6d         db  0x00 ; '.'
0000000000001b6e         db  0x00 ; '.'
0000000000001b6f         db  0x00 ; '.'
0000000000001b70         db  0x07 ; '.'
0000000000001b71         db  0x00 ; '.'
0000000000001b72         db  0x00 ; '.'
0000000000001b73         db  0x00 ; '.'
0000000000001b74         db  0x48 ; 'H'
0000000000001b75         db  0x00 ; '.'
0000000000001b76         db  0x00 ; '.'
0000000000001b77         db  0x00 ; '.'
0000000000001b78         db  0x00 ; '.'
0000000000001b79         db  0x00 ; '.'
0000000000001b7a         db  0x00 ; '.'
0000000000001b7b         db  0x00 ; '.'
0000000000001b7c         db  0x00 ; '.'
0000000000001b7d         db  0x00 ; '.'
0000000000001b7e         db  0x00 ; '.'
0000000000001b7f         db  0x00 ; '.'
0000000000001b80         db  0x88 ; '.'
0000000000001b81         db  0x0f ; '.'
0000000000001b82         db  0x22 ; '"'
0000000000001b83         db  0x00 ; '.'
0000000000001b84         db  0x00 ; '.'
0000000000001b85         db  0x00 ; '.'
0000000000001b86         db  0x00 ; '.'
0000000000001b87         db  0x00 ; '.'
0000000000001b88         db  0x07 ; '.'
0000000000001b89         db  0x00 ; '.'
0000000000001b8a         db  0x00 ; '.'
0000000000001b8b         db  0x00 ; '.'
0000000000001b8c         db  0x4a ; 'J'
0000000000001b8d         db  0x00 ; '.'
0000000000001b8e         db  0x00 ; '.'
0000000000001b8f         db  0x00 ; '.'
0000000000001b90         db  0x00 ; '.'
0000000000001b91         db  0x00 ; '.'
0000000000001b92         db  0x00 ; '.'
0000000000001b93         db  0x00 ; '.'
0000000000001b94         db  0x00 ; '.'
0000000000001b95         db  0x00 ; '.'
0000000000001b96         db  0x00 ; '.'
0000000000001b97         db  0x00 ; '.'
0000000000001b98         db  0x90 ; '.'
0000000000001b99         db  0x0f ; '.'
0000000000001b9a         db  0x22 ; '"'
0000000000001b9b         db  0x00 ; '.'
0000000000001b9c         db  0x00 ; '.'
0000000000001b9d         db  0x00 ; '.'
0000000000001b9e         db  0x00 ; '.'
0000000000001b9f         db  0x00 ; '.'
0000000000001ba0         db  0x07 ; '.'
0000000000001ba1         db  0x00 ; '.'
0000000000001ba2         db  0x00 ; '.'
0000000000001ba3         db  0x00 ; '.'
0000000000001ba4         db  0x4b ; 'K'
0000000000001ba5         db  0x00 ; '.'
0000000000001ba6         db  0x00 ; '.'
0000000000001ba7         db  0x00 ; '.'
0000000000001ba8         db  0x00 ; '.'
0000000000001ba9         db  0x00 ; '.'
0000000000001baa         db  0x00 ; '.'
0000000000001bab         db  0x00 ; '.'
0000000000001bac         db  0x00 ; '.'
0000000000001bad         db  0x00 ; '.'
0000000000001bae         db  0x00 ; '.'
0000000000001baf         db  0x00 ; '.'
0000000000001bb0         db  0x98 ; '.'
0000000000001bb1         db  0x0f ; '.'
0000000000001bb2         db  0x22 ; '"'
0000000000001bb3         db  0x00 ; '.'
0000000000001bb4         db  0x00 ; '.'
0000000000001bb5         db  0x00 ; '.'
0000000000001bb6         db  0x00 ; '.'
0000000000001bb7         db  0x00 ; '.'
0000000000001bb8         db  0x07 ; '.'
0000000000001bb9         db  0x00 ; '.'
0000000000001bba         db  0x00 ; '.'
0000000000001bbb         db  0x00 ; '.'
0000000000001bbc         db  0x4c ; 'L'
0000000000001bbd         db  0x00 ; '.'
0000000000001bbe         db  0x00 ; '.'
0000000000001bbf         db  0x00 ; '.'
0000000000001bc0         db  0x00 ; '.'
0000000000001bc1         db  0x00 ; '.'
0000000000001bc2         db  0x00 ; '.'
0000000000001bc3         db  0x00 ; '.'
0000000000001bc4         db  0x00 ; '.'
0000000000001bc5         db  0x00 ; '.'
0000000000001bc6         db  0x00 ; '.'
0000000000001bc7         db  0x00 ; '.'
0000000000001bc8         db  0xa0 ; '.'
0000000000001bc9         db  0x0f ; '.'
0000000000001bca         db  0x22 ; '"'
0000000000001bcb         db  0x00 ; '.'
0000000000001bcc         db  0x00 ; '.'
0000000000001bcd         db  0x00 ; '.'
0000000000001bce         db  0x00 ; '.'
0000000000001bcf         db  0x00 ; '.'
0000000000001bd0         db  0x07 ; '.'
0000000000001bd1         db  0x00 ; '.'
0000000000001bd2         db  0x00 ; '.'
0000000000001bd3         db  0x00 ; '.'
0000000000001bd4         db  0x4e ; 'N'
0000000000001bd5         db  0x00 ; '.'
0000000000001bd6         db  0x00 ; '.'
0000000000001bd7         db  0x00 ; '.'
0000000000001bd8         db  0x00 ; '.'
0000000000001bd9         db  0x00 ; '.'
0000000000001bda         db  0x00 ; '.'
0000000000001bdb         db  0x00 ; '.'
0000000000001bdc         db  0x00 ; '.'
0000000000001bdd         db  0x00 ; '.'
0000000000001bde         db  0x00 ; '.'
0000000000001bdf         db  0x00 ; '.'
0000000000001be0         db  0xa8 ; '.'
0000000000001be1         db  0x0f ; '.'
0000000000001be2         db  0x22 ; '"'
0000000000001be3         db  0x00 ; '.'
0000000000001be4         db  0x00 ; '.'
0000000000001be5         db  0x00 ; '.'
0000000000001be6         db  0x00 ; '.'
0000000000001be7         db  0x00 ; '.'
0000000000001be8         db  0x07 ; '.'
0000000000001be9         db  0x00 ; '.'
0000000000001bea         db  0x00 ; '.'
0000000000001beb         db  0x00 ; '.'
0000000000001bec         db  0x4f ; 'O'
0000000000001bed         db  0x00 ; '.'
0000000000001bee         db  0x00 ; '.'
0000000000001bef         db  0x00 ; '.'
0000000000001bf0         db  0x00 ; '.'
0000000000001bf1         db  0x00 ; '.'
0000000000001bf2         db  0x00 ; '.'
0000000000001bf3         db  0x00 ; '.'
0000000000001bf4         db  0x00 ; '.'
0000000000001bf5         db  0x00 ; '.'
0000000000001bf6         db  0x00 ; '.'
0000000000001bf7         db  0x00 ; '.'
0000000000001bf8         db  0xb0 ; '.'
0000000000001bf9         db  0x0f ; '.'
0000000000001bfa         db  0x22 ; '"'
0000000000001bfb         db  0x00 ; '.'
0000000000001bfc         db  0x00 ; '.'
0000000000001bfd         db  0x00 ; '.'
0000000000001bfe         db  0x00 ; '.'
0000000000001bff         db  0x00 ; '.'
0000000000001c00         db  0x07 ; '.'
0000000000001c01         db  0x00 ; '.'
0000000000001c02         db  0x00 ; '.'
0000000000001c03         db  0x00 ; '.'
0000000000001c04         db  0x50 ; 'P'
0000000000001c05         db  0x00 ; '.'
0000000000001c06         db  0x00 ; '.'
0000000000001c07         db  0x00 ; '.'
0000000000001c08         db  0x00 ; '.'
0000000000001c09         db  0x00 ; '.'
0000000000001c0a         db  0x00 ; '.'
0000000000001c0b         db  0x00 ; '.'
0000000000001c0c         db  0x00 ; '.'
0000000000001c0d         db  0x00 ; '.'
0000000000001c0e         db  0x00 ; '.'
0000000000001c0f         db  0x00 ; '.'
0000000000001c10         db  0xb8 ; '.'
0000000000001c11         db  0x0f ; '.'
0000000000001c12         db  0x22 ; '"'
0000000000001c13         db  0x00 ; '.'
0000000000001c14         db  0x00 ; '.'
0000000000001c15         db  0x00 ; '.'
0000000000001c16         db  0x00 ; '.'
0000000000001c17         db  0x00 ; '.'
0000000000001c18         db  0x07 ; '.'
0000000000001c19         db  0x00 ; '.'
0000000000001c1a         db  0x00 ; '.'
0000000000001c1b         db  0x00 ; '.'
0000000000001c1c         db  0x51 ; 'Q'
0000000000001c1d         db  0x00 ; '.'
0000000000001c1e         db  0x00 ; '.'
0000000000001c1f         db  0x00 ; '.'
0000000000001c20         db  0x00 ; '.'
0000000000001c21         db  0x00 ; '.'
0000000000001c22         db  0x00 ; '.'
0000000000001c23         db  0x00 ; '.'
0000000000001c24         db  0x00 ; '.'
0000000000001c25         db  0x00 ; '.'
0000000000001c26         db  0x00 ; '.'
0000000000001c27         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x1c28; 0x1c3f[ (23 bytes)
        ; File offset : [7208; 7231[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000001c28         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
0000000000001c2c         mov        rax, qword [qword_220fd0]                   ; qword_220fd0
0000000000001c33         test       rax, rax
0000000000001c36         je         loc_1c3a

0000000000001c38         call       rax

                     loc_1c3a:
0000000000001c3a         add        rsp, 0x8                                    ; CODE XREF=_init+14
0000000000001c3e         ret
                        ; endp
0000000000001c3f         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x1c40; 0x2110[ (1232 bytes)
        ; File offset : [7232; 8464[ (1232 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_1c40:
0000000000001c40         push       qword [qword_220d50]                        ; Begin of unwind block (FDE at 0x1d68c), qword_220d50, CODE XREF=sub_1c56+5
0000000000001c46         jmp        qword [qword_220d50+8]                      ; 0x220d58
                        ; endp
0000000000001c4c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_toupper_loc:        // __ctype_toupper_loc
0000000000001c50         jmp        qword [__ctype_toupper_loc@GOT]             ; __ctype_toupper_loc, __ctype_toupper_loc@GOT, CODE XREF=main+1340, build_upper_buffer+29, build_wcs_upper_buffer+808
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c56:
0000000000001c56         push       0x0
0000000000001c5b         jmp        loc_1c40


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
0000000000001c60         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=main+1551, mbsstr_trimmed_wordbounded+223, proper_name_utf8+116, proper_name_utf8+134, proper_name_utf8+419, proper_name_utf8+450, proper_name_utf8+518, proper_name_utf8+683, quotearg_n_options+277, quotearg_free+55, quotearg_free+82
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c66:
0000000000001c66         push       0x1
0000000000001c6b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
0000000000001c70         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=set_program_name+154, sub_6901+81, sub_7550+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, xalloc_die+48, sub_17b30+94
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c76:
0000000000001c76         push       0x2
0000000000001c7b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
0000000000001c80         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=sub_31ea+5102, matcher_error+23, swallow_file_in_memory+168, close_stdout+22, protect_fd+46, freopen_safer+35, quotearg_n_options+28, clone_quoting_options+7, quotearg_buffer+45, quotearg_alloc_mem+42, fread_file+220
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c86:
0000000000001c86         push       0x3
0000000000001c8b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
0000000000001c90         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+780, usage+973, argmatch+162
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c96:
0000000000001c96         push       0x4
0000000000001c9b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
0000000000001ca0         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ca6:
0000000000001ca6         push       0x5
0000000000001cab         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_ftello:        // ftello
0000000000001cb0         jmp        qword [ftello@GOT]                          ; ftello, ftello@GOT, CODE XREF=fread_file+427
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cb6:
0000000000001cb6         push       0x6
0000000000001cbb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
0000000000001cc0         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cc6:
0000000000001cc6         push       0x7
0000000000001ccb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iconv:        // iconv
0000000000001cd0         jmp        qword [iconv@GOT]                           ; iconv, iconv@GOT, CODE XREF=mem_cd_iconv+72, mem_cd_iconv+198, mem_cd_iconv+262, mem_cd_iconv+373, mem_cd_iconv+439, mem_cd_iconv+477, str_cd_iconv+101, str_cd_iconv+282, str_cd_iconv+422
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cd6:
0000000000001cd6         push       0x8
0000000000001cdb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_ferror:        // ferror
0000000000001ce0         jmp        qword [ferror@GOT]                          ; ferror, ferror@GOT, CODE XREF=fread_file+234
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ce6:
0000000000001ce6         push       0x9
0000000000001ceb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qsort:        // qsort
0000000000001cf0         jmp        qword [qsort@GOT]                           ; qsort, qsort@GOT, CODE XREF=sub_31ea+459, digest_word_file+143
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cf6:
0000000000001cf6         push       0xa
0000000000001cfb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fread:        // fread
0000000000001d00         jmp        qword [fread@GOT]                           ; fread, fread@GOT, CODE XREF=fread_file+207
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d06:
0000000000001d06         push       0xb
0000000000001d0b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswcntrl:        // iswcntrl
0000000000001d10         jmp        qword [iswcntrl@GOT]                        ; iswcntrl, iswcntrl@GOT, CODE XREF=mb_width_aux+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d16:
0000000000001d16         push       0xc
0000000000001d1b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001d20         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+118
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d26:
0000000000001d26         push       0xd
0000000000001d2b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtol_internal:        // __strtol_internal
0000000000001d30         jmp        qword [__strtol_internal@GOT]               ; __strtol_internal, __strtol_internal@GOT, CODE XREF=xstrtoimax+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d36:
0000000000001d36         push       0xe
0000000000001d3b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswctype:        // iswctype
0000000000001d40         jmp        qword [iswctype@GOT]                        ; iswctype, iswctype@GOT, CODE XREF=check_node_accept_bytes.isra.31+217
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d46:
0000000000001d46         push       0xf
0000000000001d4b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000001d50         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d56:
0000000000001d56         push       0x10
0000000000001d5b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000001d60         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+106
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d66:
0000000000001d66         push       0x11
0000000000001d6b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_stpcpy:        // stpcpy
0000000000001d70         jmp        qword [stpcpy@GOT]                          ; stpcpy, stpcpy@GOT, CODE XREF=sub_31ea+2031
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d76:
0000000000001d76         push       0x12
0000000000001d7b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
0000000000001d80         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=sub_31ea+4840, sub_31ea+5050, sub_31ea+5177, sub_31ea+5231, matcher_error+15, compile_regex+129, usage+56, usage+102, usage+149, usage+186, usage+223
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d86:
0000000000001d86         push       0x13
0000000000001d8b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
0000000000001d90         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=mbsstr_trimmed_wordbounded+107, mbsstr_trimmed_wordbounded+430, mbsstr_trimmed_wordbounded+1039, mbsstr_trimmed_wordbounded+1446, mbsstr_trimmed_wordbounded+1874, mbsstr_trimmed_wordbounded+2037, quotearg_buffer_restyled+108, trim2+50, re_compile_internal+290, knuth_morris_pratt_multibyte+446, knuth_morris_pratt_multibyte+1464
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d96:
0000000000001d96         push       0x14
0000000000001d9b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000001da0         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=copy_unescaped_string+7, compile_regex+65, argmatch+33, argmatch+174, mbsstr_trimmed_wordbounded+172, mbsstr_trimmed_wordbounded+656, mbsstr_trimmed_wordbounded+1653, mbsstr_trimmed_wordbounded+1709, mbsstr_trimmed_wordbounded+1773, sub_6901+32, sub_6901+52
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1da6:
0000000000001da6         push       0x15
0000000000001dab         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000001db0         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=sub_31ea+5461, swallow_file_in_memory+197, digest_word_file+274, sub_6901+117, sub_7550+2739, quotearg_n_style+137, quotearg_n_style_mem+133, quotearg_char_mem+147, quotearg_n_style_colon+137, quotearg_n_custom_mem+140, fread_file+467
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1db6:
0000000000001db6         push       0x16
0000000000001dbb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
0000000000001dc0         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+158
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dc6:
0000000000001dc6         push       0x17
0000000000001dcb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001dd0         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dd6:
0000000000001dd6         push       0x18
0000000000001ddb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dup2:        // dup2
0000000000001de0         jmp        qword [dup2@GOT]                            ; dup2, dup2@GOT, CODE XREF=freopen_safer+79, freopen_safer+100, freopen_safer+116
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1de6:
0000000000001de6         push       0x19
0000000000001deb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
0000000000001df0         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=proper_name_utf8+437, xstrtoimax+236, xstrtoimax+271, xstrtoimax+323
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1df6:
0000000000001df6         push       0x1a
0000000000001dfb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___overflow:        // __overflow
0000000000001e00         jmp        qword [__overflow@GOT]                      ; __overflow, __overflow@GOT, CODE XREF=sub_31ea+5261, sub_31ea+5276, sub_31ea+5291, sub_31ea+5306, sub_31ea+5321, sub_31ea+5336, sub_31ea+5351, sub_31ea+5376, sub_31ea+5391, sub_31ea+5584, sub_31ea+5665
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e06:
0000000000001e06         push       0x1b
0000000000001e0b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001e10         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e16:
0000000000001e16         push       0x1c
0000000000001e1b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001e20         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e26:
0000000000001e26         push       0x1d
0000000000001e2b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000001e30         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=mbuiter_multi_next.part.0+30, mbiter_multi_next.part.0+30, mbuiter_multi_next.part.0_2166+30, sub_6901+112, sub_6901+148, trim2+1542, trim2+1578, xstrtoimax+1705, pop_fail_stack.isra.25+143, re_search_internal+4167, re_search_internal+5451
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e36:
0000000000001e36         push       0x1e
0000000000001e3b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001e40         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=quotearg_n_options+153, xzalloc+18, clean_state_log_if_needed+120, re_string_reconstruct+1128, re_string_reconstruct+1876, check_arrival+1782, get_subexp_sub.isra.32+344, sift_states_backward+744, re_search_internal+2450
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e46:
0000000000001e46         push       0x1f
0000000000001e4b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_freopen:        // freopen
0000000000001e50         jmp        qword [freopen@GOT]                         ; freopen, freopen@GOT, CODE XREF=freopen_safer+187
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e56:
0000000000001e56         push       0x20
0000000000001e5b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strnlen:        // strnlen
0000000000001e60         jmp        qword [strnlen@GOT]                         ; strnlen, strnlen@GOT, CODE XREF=mbsstr+208
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e66:
0000000000001e66         push       0x21
0000000000001e6b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_close:        // close
0000000000001e70         jmp        qword [close@GOT]                           ; close, close@GOT, CODE XREF=protect_fd+41, freopen_safer+307, freopen_safer+325, freopen_safer+337, freopen_safer+373
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e76:
0000000000001e76         push       0x22
0000000000001e7b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memchr:        // memchr
0000000000001e80         jmp        qword [memchr@GOT]                          ; memchr, memchr@GOT, CODE XREF=strnlen1+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e86:
0000000000001e86         push       0x23
0000000000001e8b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000001e90         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=argmatch+111, argmatch_valid+150, argmatch_to_argument+56, quotearg_buffer_restyled+410, set_regs+1041, transit_state_bkref.isra.34+663, knuth_morris_pratt_multibyte+754, knuth_morris_pratt_multibyte+1879, mbsstr+2080, mbsstr+2184
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e96:
0000000000001e96         push       0x24
0000000000001e9b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wctype:        // wctype
0000000000001ea0         jmp        qword [wctype@GOT]                          ; wctype, wctype@GOT, CODE XREF=build_charclass.isra.29+103
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ea6:
0000000000001ea6         push       0x25
0000000000001eab         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000001eb0         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=sub_31ea+3125, sub_31ea+3214, sub_31ea+3344, sub_31ea+3433, sub_31ea+3809, sub_31ea+4213, sub_31ea+5532, sub_31ea+5608, usage+160, usage+197, usage+234
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1eb6:
0000000000001eb6         push       0x26
0000000000001ebb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000001ec0         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26, re_acquire_state_context+202, re_acquire_state+160, check_subexp_matching_top.isra.18+156, build_trtable+746, build_trtable+2611, build_trtable+2830, build_charclass_op+70, build_charclass_op+97, transit_state_bkref.isra.34+1726, transit_state_bkref.isra.34+1865
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ec6:
0000000000001ec6         push       0x27
0000000000001ecb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
0000000000001ed0         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=main+1174, sub_31ea+4712, proper_name_utf8+94, proper_name_utf8+184, proper_name_utf8+466, build_charclass.isra.29+1480, build_charclass.isra.29+1620, build_charclass.isra.29+1758
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ed6:
0000000000001ed6         push       0x28
0000000000001edb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000001ee0         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=proper_name_utf8+346, xmemdup+35, build_wcs_upper_buffer+348, build_wcs_upper_buffer+697, build_wcs_upper_buffer+796, build_wcs_upper_buffer+1071, build_wcs_upper_buffer+1340, re_node_set_merge+320, re_node_set_merge+357, re_node_set_merge+458, re_node_set_add_intersect+341
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ee6:
0000000000001ee6         push       0x29
0000000000001eeb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000001ef0         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=freopen_safer+28, fread_file+44, rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ef6:
0000000000001ef6         push       0x2a
0000000000001efb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wcwidth:        // wcwidth
0000000000001f00         jmp        qword [wcwidth@GOT]                         ; wcwidth, wcwidth@GOT, CODE XREF=mb_width_aux+3
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f06:
0000000000001f06         push       0x2b
0000000000001f0b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswalnum:        // iswalnum
0000000000001f10         jmp        qword [iswalnum@GOT]                        ; iswalnum, iswalnum@GOT, CODE XREF=mbsstr_trimmed_wordbounded+730, mbsstr_trimmed_wordbounded+1291, re_string_context_at+202, re_string_reconstruct+1790, peek_token+144, peek_token+440
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f16:
0000000000001f16         push       0x2c
0000000000001f1b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000001f20         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=fread_file+98, xmalloc+4, re_node_set_insert+76, register_state+48, build_wcs_upper_buffer+1482, calc_eclosure_iter+87, check_arrival_expand_ecl+67, create_token_tree.isra.16+160, re_node_set_init_copy+38, re_node_set_init_union+74, re_acquire_state_context+629
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f26:
0000000000001f26         push       0x2d
0000000000001f2b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wcrtomb:        // wcrtomb
0000000000001f30         jmp        qword [wcrtomb@GOT]                         ; wcrtomb, wcrtomb@GOT, CODE XREF=build_wcs_upper_buffer+313, build_wcs_upper_buffer+668, re_compile_fastmap_iter.isra.30+534, re_compile_fastmap_iter.isra.30+698, re_compile_fastmap_iter.isra.30+797
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f36:
0000000000001f36         push       0x2e
0000000000001f3b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000001f40         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f46:
0000000000001f46         push       0x2f
0000000000001f4b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001f50         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=re_compile_internal+306, locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f56:
0000000000001f56         push       0x30
0000000000001f5b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fxstat:        // __fxstat
0000000000001f60         jmp        qword [__fxstat@GOT]                        ; __fxstat, __fxstat@GOT, CODE XREF=fread_file+61
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f66:
0000000000001f66         push       0x31
0000000000001f6b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001f70         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f76:
0000000000001f76         push       0x32
0000000000001f7b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite_unlocked:        // fwrite_unlocked
0000000000001f80         jmp        qword [fwrite_unlocked@GOT]                 ; fwrite_unlocked, fwrite_unlocked@GOT, CODE XREF=sub_31ea+2211, sub_31ea+2259, sub_31ea+2382, sub_31ea+2422, sub_31ea+3186, sub_31ea+3294, sub_31ea+3405, sub_31ea+3535, print_field+464, print_field+590, print_field+805
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f86:
0000000000001f86         push       0x33
0000000000001f8b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001f90         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=fread_file+169, fread_file+391, xrealloc+17, re_string_realloc_buffers+48, re_string_realloc_buffers+79, re_string_realloc_buffers+127, re_node_set_insert_last+74, re_node_set_insert+270, register_state+209, extend_buffers+95, re_dfa_add_node+247
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f96:
0000000000001f96         push       0x34
0000000000001f9b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001fa0         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+87, usage+755, usage+948, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1fa6:
0000000000001fa6         push       0x35
0000000000001fab         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001fb0         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=sub_31ea+2131, sub_31ea+3078, print_field+390, print_field+531, print_field+635, print_field+680, print_field+725, print_field+751, usage+123, usage+743, usage+836
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1fb6:
0000000000001fb6         push       0x36
0000000000001fbb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iconv_close:        // iconv_close
0000000000001fc0         jmp        qword [iconv_close@GOT]                     ; iconv_close, iconv_close@GOT, CODE XREF=str_iconv+118, str_iconv+206
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1fc6:
0000000000001fc6         push       0x37
0000000000001fcb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswspace:        // iswspace
0000000000001fd0         jmp        qword [iswspace@GOT]                        ; iswspace, iswspace@GOT, CODE XREF=trim2+220, trim2+381, trim2+589, trim2+1215
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1fd6:
0000000000001fd6         push       0x38
0000000000001fdb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_btowc:        // btowc
0000000000001fe0         jmp        qword [btowc@GOT]                           ; btowc, btowc@GOT, CODE XREF=sub_15b10+1827, sub_15b10+2551, re_compile_internal+1864
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1fe6:
0000000000001fe6         push       0x39
0000000000001feb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memmove:        // memmove
0000000000001ff0         jmp        qword [memmove@GOT]                         ; memmove, memmove@GOT, CODE XREF=trim2+903, trim2+1378, re_string_reconstruct+400, re_string_reconstruct+856, re_string_reconstruct+876, re_string_reconstruct+1179
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ff6:
0000000000001ff6         push       0x3a
0000000000001ffb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000002000         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=sub_31ea+4857, sub_31ea+5070, sub_31ea+5126, sub_31ea+5197, sub_31ea+5251, matcher_error+40, compile_regex+152, swallow_file_in_memory+192, argmatch_invalid+88, close_stdout+125, close_stdout+157
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2006:
0000000000002006         push       0x3b
000000000000200b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_open:        // open
0000000000002010         jmp        qword [open@GOT]                            ; open, open@GOT, CODE XREF=protect_fd+24
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2016:
0000000000002016         push       0x3c
000000000000201b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000002020         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2026:
0000000000002026         push       0x3d
000000000000202b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fopen:        // fopen
0000000000002030         jmp        qword [fopen@GOT]                           ; fopen, fopen@GOT, CODE XREF=internal_read_file+16
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2036:
0000000000002036         push       0x3e
000000000000203b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_towlower:        // towlower
0000000000002040         jmp        qword [towlower@GOT]                        ; towlower, towlower@GOT, CODE XREF=re_compile_fastmap_iter.isra.30+517, re_compile_fastmap_iter.isra.30+782
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2046:
0000000000002046         push       0x3f
000000000000204b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_towupper:        // towupper
0000000000002050         jmp        qword [towupper@GOT]                        ; towupper, towupper@GOT, CODE XREF=build_wcs_upper_buffer+268, build_wcs_upper_buffer+640
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2056:
0000000000002056         push       0x40
000000000000205b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000002060         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2066:
0000000000002066         push       0x41
000000000000206b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000002070         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+693, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2076:
0000000000002076         push       0x42
000000000000207b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000002080         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2086:
0000000000002086         push       0x43
000000000000208b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000002090         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+81, argmatch_valid+122, argmatch_valid+198, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332, version_etc_arn+492, version_etc_arn+563, version_etc_arn+642, version_etc_arn+718
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2096:
0000000000002096         push       0x44
000000000000209b         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strdup:        // strdup
00000000000020a0         jmp        qword [strdup@GOT]                          ; strdup, strdup@GOT, CODE XREF=trim2+33, str_iconv+42
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20a6:
00000000000020a6         push       0x45
00000000000020ab         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
00000000000020b0         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=mbsstr_trimmed_wordbounded+552, mbsstr_trimmed_wordbounded+588, mbsstr_trimmed_wordbounded+1021, mbsstr_trimmed_wordbounded+1162, mbsstr_trimmed_wordbounded+1428, mbsstr_trimmed_wordbounded+1561, mbsstr_trimmed_wordbounded+1856, mbsstr_trimmed_wordbounded+1974, mbsstr_trimmed_wordbounded+2019, mbsstr_trimmed_wordbounded+2151, sub_7550+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20b6:
00000000000020b6         push       0x46
00000000000020bb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
00000000000020c0         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_7550+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20c6:
00000000000020c6         push       0x47
00000000000020cb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_tolower_loc:        // __ctype_tolower_loc
00000000000020d0         jmp        qword [__ctype_tolower_loc@GOT]             ; __ctype_tolower_loc, __ctype_tolower_loc@GOT, CODE XREF=re_compile_fastmap_iter.isra.30+287, re_compile_fastmap_iter.isra.30+729, re_compile_fastmap_iter.isra.30+976
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20d6:
00000000000020d6         push       0x48
00000000000020db         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
00000000000020e0         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=main+1795, main+2004, main+2863, main+3563, main+3739, main+4038, sub_31ea+371, copy_unescaped_string+181, mbsstr_trimmed_wordbounded+131, mbsstr_trimmed_wordbounded+1800, sub_72f0+51
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20e6:
00000000000020e6         push       0x49
00000000000020eb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iconv_open:        // iconv_open
00000000000020f0         jmp        qword [iconv_open@GOT]                      ; iconv_open, iconv_open@GOT, CODE XREF=str_iconv+78
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20f6:
00000000000020f6         push       0x4a
00000000000020fb         jmp        0x1c40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___sprintf_chk:        // __sprintf_chk
0000000000002100         jmp        qword [__sprintf_chk@GOT]                   ; __sprintf_chk, __sprintf_chk@GOT, CODE XREF=sub_31ea+198, sub_31ea+2063, proper_name+121, proper_name_utf8+670
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2106:
0000000000002106         push       0x4b
000000000000210b         jmp        0x1c40
                        ; endp


        ; Section .plt.got
        ; Range: [0x2110; 0x2118[ (8 bytes)
        ; File offset : [8464; 8472[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_220fe0:        // qword_220fe0
0000000000002110         jmp        qword [qword_220fe0]                        ; qword, End of unwind block (FDE at 0x1d68c), Begin of unwind block (FDE at 0x1d6b4), qword_220fe0, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000002116         align      8
0000000000002118         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x1d6b4)
0000000000002119         db  0x00 ; '.'
000000000000211a         db  0x00 ; '.'
000000000000211b         db  0x00 ; '.'
000000000000211c         db  0x00 ; '.'
000000000000211d         db  0x00 ; '.'
000000000000211e         db  0x00 ; '.'
000000000000211f         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x2120; 0x1aede[ (101822 bytes)
        ; File offset : [8480; 110302[ (101822 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mbuiter_multi_next.part.0:
0000000000002120         lea        rcx, qword [__PRETTY_FUNCTION__.5159]       ; Begin of unwind block (FDE at 0x1dbbc), argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbsstr_trimmed_wordbounded+2252
0000000000002127         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
000000000000212e         lea        rdi, qword [aItercurwc0]                    ; argument "__assertion" for method j___assert_fail, "iter->cur.wc == 0"
0000000000002135         sub        rsp, 0x8
0000000000002139         mov        edx, 0xb3                                   ; argument "__line" for method j___assert_fail
000000000000213e         call       j___assert_fail                             ; __assert_fail
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mbiter_multi_next.part.0:
0000000000002143         lea        rcx, qword [__PRETTY_FUNCTION__.5134]       ; End of unwind block (FDE at 0x1dbbc), Begin of unwind block (FDE at 0x1e20c), argument "__function" for method j___assert_fail, "mbiter_multi_next", CODE XREF=trim2+1547
000000000000214a         lea        rsi, qword [aCoreutils831li_1c1f0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbiter.h"
0000000000002151         lea        rdi, qword [aItercurwc0]                    ; argument "__assertion" for method j___assert_fail, "iter->cur.wc == 0"
0000000000002158         sub        rsp, 0x8
000000000000215c         mov        edx, 0xaa                                   ; argument "__line" for method j___assert_fail
0000000000002161         call       j___assert_fail                             ; __assert_fail
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mbuiter_multi_next.part.0_2166:        // mbuiter_multi_next.part.0
0000000000002166         lea        rcx, qword [__PRETTY_FUNCTION__.5056]       ; End of unwind block (FDE at 0x1e20c), Begin of unwind block (FDE at 0x1fd64), argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=knuth_morris_pratt_multibyte+2658, mbsstr+3522
000000000000216d         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
0000000000002174         lea        rdi, qword [aItercurwc0]                    ; argument "__assertion" for method j___assert_fail, "iter->cur.wc == 0"
000000000000217b         sub        rsp, 0x8
000000000000217f         mov        edx, 0xb3                                   ; argument "__line" for method j___assert_fail
0000000000002184         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000002189         align      16                                          ; End of unwind block (FDE at 0x1fd64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_89: int8_t, -137
        ;    var_90: int32_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200


                     main:
0000000000002190         push       r15                                         ; Begin of unwind block (FDE at 0x1d904), DATA XREF=_start+29
0000000000002192         push       r14
0000000000002194         lea        r14, qword [format_vals]                    ; format_vals
000000000000219b         push       r13
000000000000219d         push       r12
000000000000219f         lea        r13, qword [long_options]                   ; long_options
00000000000021a6         push       rbp
00000000000021a7         push       rbx
00000000000021a8         mov        ebx, edi
00000000000021aa         mov        rbp, rsi
00000000000021ad         lea        r12, qword [aFPinard+10]                    ; 0x1b871
00000000000021b4         sub        rsp, 0x98
00000000000021bb         mov        rdi, qword [rsi]
00000000000021be         mov        rax, qword [fs:0x28]
00000000000021c7         mov        qword [rsp+0xc8+var_40], rax
00000000000021cf         xor        eax, eax
00000000000021d1         lea        r15, qword [rsp+0xc8+var_68]
00000000000021d6         call       set_program_name                            ; set_program_name
00000000000021db         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0x1c27b
00000000000021e2         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
00000000000021e7         call       j_setlocale                                 ; setlocale
00000000000021ec         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
00000000000021f3         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
00000000000021fa         call       j_bindtextdomain                            ; bindtextdomain
00000000000021ff         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
0000000000002206         call       j_textdomain                                ; textdomain
000000000000220b         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
0000000000002212         call       atexit                                      ; atexit
0000000000002217         nop        word [rax+rax]

                     loc_2220:
0000000000002220         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long, CODE XREF=main+232, main+279, main+322, main+405, main+413, main+479, main+507, main+528, main+549, main+573, main+594
0000000000002223         mov        rcx, r13                                    ; argument "__longopts" for method j_getopt_long
0000000000002226         mov        rdx, r12                                    ; argument "__shortopts" for method j_getopt_long
0000000000002229         mov        rsi, rbp                                    ; argument "___argv" for method j_getopt_long
000000000000222c         mov        edi, ebx                                    ; argument "___argc" for method j_getopt_long
000000000000222e         call       j_getopt_long                               ; getopt_long
0000000000002233         cmp        eax, 0xffffffff
0000000000002236         je         loc_24fd

000000000000223c         cmp        eax, 0x53
000000000000223f         je         loc_24ba

0000000000002245         jle        loc_227a

0000000000002247         cmp        eax, 0x67
000000000000224a         je         loc_2476

0000000000002250         jle        loc_22ac

0000000000002252         cmp        eax, 0x72
0000000000002255         je         loc_24ae

000000000000225b         jg         loc_232a

0000000000002261         cmp        eax, 0x69
0000000000002264         jne        loc_2374

000000000000226a         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000002271         mov        qword [ignore_file], rax                    ; ignore_file
0000000000002278         jmp        loc_2220

                     loc_227a:
000000000000227a         cmp        eax, 0x46                                   ; CODE XREF=main+181
000000000000227d         je         loc_24e5

0000000000002283         jle        loc_22d7

0000000000002285         cmp        eax, 0x4d
0000000000002288         je         loc_24d2

000000000000228e         jle        loc_2390

0000000000002294         cmp        eax, 0x4f
0000000000002297         jne        loc_23d2

000000000000229d         mov        dword [output_format], 0x2                  ; output_format
00000000000022a7         jmp        loc_2220

                     loc_22ac:
00000000000022ac         cmp        eax, 0x57                                   ; CODE XREF=main+192
00000000000022af         je         loc_244a

00000000000022b5         jle        loc_23ba

00000000000022bb         cmp        eax, 0x62
00000000000022be         jne        loc_23a5

00000000000022c4         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
00000000000022cb         mov        qword [break_file], rax                     ; break_file
00000000000022d2         jmp        loc_2220

                     loc_22d7:
00000000000022d7         cmp        eax, 0xffffff7e                             ; CODE XREF=main+243
00000000000022dc         je         loc_45f5

00000000000022e2         jle        loc_23fc

00000000000022e8         cmp        eax, 0xa
00000000000022eb         jne        loc_23e7

00000000000022f1         mov        r9, qword [argmatch_die]                    ; argmatch_die
00000000000022f8         mov        rsi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
00000000000022ff         lea        rdx, qword [format_args]                    ; format_args
0000000000002306         lea        rdi, qword [aFormat]                        ; "--format"
000000000000230d         mov        r8d, 0x4
0000000000002313         mov        rcx, r14
0000000000002316         call       __xargmatch_internal                        ; __xargmatch_internal
000000000000231b         mov        eax, dword [r14+rax*4]
000000000000231f         mov        dword [output_format], eax                  ; output_format
0000000000002325         jmp        loc_2220

                     loc_232a:
000000000000232a         cmp        eax, 0x74                                   ; CODE XREF=main+203
000000000000232d         je         loc_2220

0000000000002333         cmp        eax, 0x77
0000000000002336         jne        loc_44e8

000000000000233c         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000002343         xor        r8d, r8d
0000000000002346         xor        edx, edx
0000000000002348         xor        esi, esi
000000000000234a         mov        rcx, r15
000000000000234d         call       xstrtoimax                                  ; xstrtoimax
0000000000002352         test       eax, eax
0000000000002354         jne        loc_463c

000000000000235a         mov        rax, qword [rsp+0xc8+var_68]
000000000000235f         test       rax, rax
0000000000002362         jle        loc_463c

0000000000002368         mov        qword [line_width], rax                     ; line_width
000000000000236f         jmp        loc_2220

                     loc_2374:
0000000000002374         cmp        eax, 0x6f                                   ; CODE XREF=main+212
0000000000002377         jne        loc_44e8

000000000000237d         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000002384         mov        qword [only_file], rax                      ; only_file
000000000000238b         jmp        loc_2220

                     loc_2390:
0000000000002390         cmp        eax, 0x47                                   ; CODE XREF=main+254
0000000000002393         jne        loc_44e8

0000000000002399         mov        byte [gnu_extensions], 0x0                  ; gnu_extensions
00000000000023a0         jmp        loc_2220

                     loc_23a5:
00000000000023a5         cmp        eax, 0x66                                   ; CODE XREF=main+302
00000000000023a8         jne        loc_44e8

00000000000023ae         mov        byte [ignore_case], 0x1                     ; ignore_case
00000000000023b5         jmp        loc_2220

                     loc_23ba:
00000000000023ba         cmp        eax, 0x54                                   ; CODE XREF=main+293
00000000000023bd         jne        loc_44e8

00000000000023c3         mov        dword [output_format], 0x3                  ; output_format
00000000000023cd         jmp        loc_2220

                     loc_23d2:
00000000000023d2         cmp        eax, 0x52                                   ; CODE XREF=main+263
00000000000023d5         jne        loc_44e8

00000000000023db         mov        byte [right_reference], 0x1                 ; right_reference
00000000000023e2         jmp        loc_2220

                     loc_23e7:
00000000000023e7         cmp        eax, 0x41                                   ; CODE XREF=main+347
00000000000023ea         jne        loc_44e8

00000000000023f0         mov        byte [auto_reference], 0x1                  ; auto_reference
00000000000023f7         jmp        loc_2220

                     loc_23fc:
00000000000023fc         cmp        eax, 0xffffff7d                             ; CODE XREF=main+338
0000000000002401         jne        loc_44e8

0000000000002407         lea        rsi, qword [aFormat+9]                      ; 0x1b856
000000000000240e         lea        rdi, qword [aFPinard]                       ; "F. Pinard"
0000000000002415         call       proper_name_utf8                            ; proper_name_utf8
000000000000241a         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002421         mov        rcx, qword [Version]                        ; Version
0000000000002428         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x1b7d2
000000000000242f         lea        rsi, qword [aBackslash+13]                  ; 0x1b758
0000000000002436         mov        r8, rax
0000000000002439         xor        r9d, r9d
000000000000243c         xor        eax, eax
000000000000243e         call       version_etc                                 ; version_etc
0000000000002443         xor        edi, edi                                    ; argument "__status" for method j_exit
0000000000002445         call       j_exit                                      ; exit
                        ; endp

                     loc_244a:
000000000000244a         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; argument #1 for method copy_unescaped_string, optarg@@GLIBC_2.2.5, CODE XREF=main+287
0000000000002451         call       copy_unescaped_string                       ; copy_unescaped_string
0000000000002456         mov        qword [word_regex], rax                     ; word_regex
000000000000245d         cmp        byte [rax], 0x0
0000000000002460         jne        loc_2220

0000000000002466         mov        qword [word_regex], 0x0                     ; word_regex
0000000000002471         jmp        loc_2220

                     loc_2476:
0000000000002476         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+186
000000000000247d         xor        r8d, r8d
0000000000002480         xor        edx, edx
0000000000002482         xor        esi, esi
0000000000002484         mov        rcx, r15
0000000000002487         call       xstrtoimax                                  ; xstrtoimax
000000000000248c         test       eax, eax
000000000000248e         jne        loc_4606

0000000000002494         mov        rax, qword [rsp+0xc8+var_68]
0000000000002499         test       rax, rax
000000000000249c         jle        loc_4606

00000000000024a2         mov        qword [gap_size], rax                       ; gap_size
00000000000024a9         jmp        loc_2220

                     loc_24ae:
00000000000024ae         mov        byte [input_reference], 0x1                 ; input_reference, CODE XREF=main+197
00000000000024b5         jmp        loc_2220

                     loc_24ba:
00000000000024ba         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; argument #1 for method copy_unescaped_string, optarg@@GLIBC_2.2.5, CODE XREF=main+175
00000000000024c1         call       copy_unescaped_string                       ; copy_unescaped_string
00000000000024c6         mov        qword [context_regex], rax                  ; context_regex
00000000000024cd         jmp        loc_2220

                     loc_24d2:
00000000000024d2         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+248
00000000000024d9         mov        qword [macro_name], rax                     ; macro_name
00000000000024e0         jmp        loc_2220

                     loc_24e5:
00000000000024e5         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; argument #1 for method copy_unescaped_string, optarg@@GLIBC_2.2.5, CODE XREF=main+237
00000000000024ec         call       copy_unescaped_string                       ; copy_unescaped_string
00000000000024f1         mov        qword [truncation_string], rax              ; truncation_string
00000000000024f8         jmp        loc_2220

                     loc_24fd:
00000000000024fd         mov        eax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+166
0000000000002503         cmp        eax, ebx
0000000000002505         je         loc_265b

000000000000250b         cmp        byte [gnu_extensions], 0x0                  ; gnu_extensions
0000000000002512         je         loc_43e9

0000000000002518         mov        ecx, ebx
000000000000251a         mov        edx, 0x8
000000000000251f         xor        esi, esi
0000000000002521         sub        ecx, eax
0000000000002523         mov        rax, rdx
0000000000002526         mov        dword [number_input_files], ecx             ; number_input_files
000000000000252c         movsxd     rcx, ecx
000000000000252f         mul        rcx
0000000000002532         jo         loc_45fc

                     loc_2538:
0000000000002538         test       rax, rax                                    ; CODE XREF=sub_31ea+5143
000000000000253b         js         loc_31e5

0000000000002541         test       rsi, rsi
0000000000002544         jne        loc_31e5

000000000000254a         lea        rdi, qword [rcx*8]                          ; argument #1 for method xmalloc
0000000000002552         call       xmalloc                                     ; xmalloc
0000000000002557         movsxd     rcx, dword [number_input_files]             ; number_input_files
000000000000255e         mov        edx, 0x8
0000000000002563         mov        qword [input_file_name], rax                ; input_file_name
000000000000256a         mov        rax, rdx
000000000000256d         xor        esi, esi
000000000000256f         mul        rcx
0000000000002572         jo         loc_454c

                     loc_2578:
0000000000002578         test       rax, rax                                    ; CODE XREF=sub_31ea+4967
000000000000257b         js         loc_31e5

0000000000002581         test       rsi, rsi
0000000000002584         jne        loc_31e5

000000000000258a         lea        rdi, qword [rcx*8]                          ; argument #1 for method xmalloc
0000000000002592         call       xmalloc                                     ; xmalloc
0000000000002597         movsxd     rcx, dword [number_input_files]             ; number_input_files
000000000000259e         mov        edx, 0x10
00000000000025a3         mov        qword [file_line_count], rax                ; file_line_count
00000000000025aa         mov        rax, rdx
00000000000025ad         xor        esi, esi
00000000000025af         mul        rcx
00000000000025b2         jo         loc_4542

                     loc_25b8:
00000000000025b8         test       rax, rax                                    ; CODE XREF=sub_31ea+4957
00000000000025bb         js         loc_31e5

00000000000025c1         test       rsi, rsi
00000000000025c4         jne        loc_31e5

00000000000025ca         mov        rdi, rcx
00000000000025cd         shl        rdi, 0x4                                    ; argument #1 for method xmalloc
00000000000025d1         call       xmalloc                                     ; xmalloc
00000000000025d6         mov        edx, dword [number_input_files]             ; number_input_files
00000000000025dc         mov        qword [text_buffers], rax                   ; text_buffers
00000000000025e3         test       edx, edx
00000000000025e5         jle        loc_26a6

00000000000025eb         mov        eax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
00000000000025f1         lea        r13d, dword [rdx-1]
00000000000025f5         lea        ebx, dword [rax+1]
00000000000025f8         movsxd     rdx, eax
00000000000025fb         movsxd     rbx, ebx
00000000000025fe         imul       rax, rbx, 0xfffffffffffffff8
0000000000002602         lea        r12, qword [rbx+1]
0000000000002606         add        r13, r12
0000000000002609         lea        r14, qword [rax+rdx*8]
000000000000260d         add        rax, qword [input_file_name]                ; input_file_name
0000000000002614         add        r14, rbp
0000000000002617         mov        rbp, rax
000000000000261a         jmp        loc_2646

                     loc_261c:
000000000000261c         lea        rsi, qword [aLibs+10]                       ; argument "__s2" for method j_strcmp, 0x1bc92, CODE XREF=main+1214
0000000000002623         mov        rdi, r15                                    ; argument "__s1" for method j_strcmp
0000000000002626         call       j_strcmp                                    ; strcmp
000000000000262b         test       eax, eax
000000000000262d         je         loc_2650

000000000000262f         mov        qword [rbp+rbx*8], r15

                     loc_2634:
0000000000002634         cmp        r13, r12                                    ; CODE XREF=main+1225
0000000000002637         mov        dword [optind@@GLIBC_2.2.5], ebx            ; optind@@GLIBC_2.2.5
000000000000263d         mov        rbx, r12
0000000000002640         je         loc_26a6

0000000000002642         add        r12, 0x1

                     loc_2646:
0000000000002646         mov        r15, qword [r14+rbx*8]                      ; CODE XREF=main+1162
000000000000264a         cmp        byte [r15], 0x0
000000000000264e         jne        loc_261c

                     loc_2650:
0000000000002650         mov        qword [rbp+rbx*8], 0x0                      ; CODE XREF=main+1181
0000000000002659         jmp        loc_2634

                     loc_265b:
000000000000265b         mov        edi, 0x8                                    ; argument #1 for method xmalloc, CODE XREF=main+885
0000000000002660         call       xmalloc                                     ; xmalloc
0000000000002665         mov        edi, 0x8                                    ; argument #1 for method xmalloc
000000000000266a         mov        qword [input_file_name], rax                ; input_file_name
0000000000002671         call       xmalloc                                     ; xmalloc
0000000000002676         mov        edi, 0x10                                   ; argument #1 for method xmalloc
000000000000267b         mov        qword [file_line_count], rax                ; file_line_count
0000000000002682         call       xmalloc                                     ; xmalloc
0000000000002687         mov        qword [text_buffers], rax                   ; text_buffers
000000000000268e         mov        rax, qword [input_file_name]                ; input_file_name
0000000000002695         mov        dword [number_input_files], 0x1             ; number_input_files
000000000000269f         mov        qword [rax], 0x0

                     loc_26a6:
00000000000026a6         cmp        dword [output_format], 0x0                  ; output_format, CODE XREF=main+1109, main+1200, sub_31ea+4749, sub_31ea+4805
00000000000026ad         jne        loc_26c3

00000000000026af         cmp        byte [gnu_extensions], 0x1                  ; gnu_extensions
00000000000026b6         sbb        eax, eax
00000000000026b8         not        eax
00000000000026ba         add        eax, 0x2
00000000000026bd         mov        dword [output_format], eax                  ; output_format

                     loc_26c3:
00000000000026c3         cmp        byte [ignore_case], 0x0                     ; ignore_case, CODE XREF=main+1309
00000000000026ca         je         loc_26fb

00000000000026cc         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc
00000000000026d1         lea        rcx, qword [folded_chars]                   ; folded_chars
00000000000026d8         xor        edx, edx
00000000000026da         nop        word [rax+rax]

                     loc_26e0:
00000000000026e0         mov        rsi, qword [rax]                            ; CODE XREF=main+1385
00000000000026e3         add        rcx, 0x1
00000000000026e7         mov        esi, dword [rsi+rdx]
00000000000026ea         add        rdx, 0x4
00000000000026ee         mov        byte [rcx-1], sil
00000000000026f2         cmp        rdx, 0x400
00000000000026f9         jne        loc_26e0

                     loc_26fb:
00000000000026fb         mov        rax, qword [context_regex]                  ; context_regex, CODE XREF=main+1338
0000000000002702         test       rax, rax
0000000000002705         je         loc_4505

000000000000270b         cmp        byte [rax], 0x0
000000000000270e         je         loc_3392

                     loc_2714:
0000000000002714         lea        rdi, qword [context_regex]                  ; argument #1 for method compile_regex, context_regex, CODE XREF=sub_31ea+4923, sub_31ea+4947
000000000000271b         call       compile_regex                               ; compile_regex

                     loc_2720:
0000000000002720         cmp        qword [word_regex], 0x0                     ; word_regex, CODE XREF=sub_31ea+435
0000000000002728         jne        loc_3226

000000000000272e         mov        rdi, qword [break_file]                     ; break_file
0000000000002735         test       rdi, rdi
0000000000002738         je         loc_3350

                     loc_273e:
000000000000273e         lea        rsi, qword [rsp+0xc8+var_68]                ; CODE XREF=sub_31ea+88
0000000000002743         call       swallow_file_in_memory                      ; swallow_file_in_memory
0000000000002748         lea        rdx, qword [word_fastmap]                   ; word_fastmap
000000000000274f         mov        ecx, 0x20
0000000000002754         movabs     rax, 0x101010101010101
000000000000275e         mov        rdi, rdx
0000000000002761         rep stosq  qword [rdi], rax
0000000000002764         mov        rdi, qword [rsp+0xc8+var_68]
0000000000002769         mov        rcx, qword [rsp+0xc8+var_60]
000000000000276e         cmp        rdi, rcx
0000000000002771         jae        loc_2786

0000000000002773         mov        rax, rdi

                     loc_2776:
0000000000002776         movzx      esi, byte [rax]                             ; CODE XREF=main+1524
0000000000002779         add        rax, 0x1
000000000000277d         cmp        rax, rcx
0000000000002780         mov        byte [rdx+rsi], 0x0
0000000000002784         jne        loc_2776

                     loc_2786:
0000000000002786         cmp        byte [gnu_extensions], 0x0                  ; gnu_extensions, CODE XREF=main+1505
000000000000278d         jne        loc_279f

000000000000278f         mov        byte [byte_2213a0], 0x0                     ; byte_2213a0
0000000000002796         mov        word [word_221389], 0x0                     ; word_221389

                     loc_279f:
000000000000279f         call       j_free                                      ; free, CODE XREF=main+1533

                     loc_27a4:
00000000000027a4         mov        rdi, qword [ignore_file]                    ; ignore_file, CODE XREF=sub_31ea+82, sub_31ea+419, sub_31ea+5016
00000000000027ab         test       rdi, rdi
00000000000027ae         je         loc_27ca

00000000000027b0         lea        rsi, qword [ignore_table]                   ; argument #2 for method digest_word_file, ignore_table
00000000000027b7         call       digest_word_file                            ; digest_word_file
00000000000027bc         cmp        qword [qword_221350], 0x0                   ; qword_221350
00000000000027c4         je         loc_3340

                     loc_27ca:
00000000000027ca         mov        rdi, qword [only_file]                      ; only_file, CODE XREF=main+1566, sub_31ea+353
00000000000027d1         test       rdi, rdi
00000000000027d4         je         loc_27f0

00000000000027d6         lea        rsi, qword [only_table]                     ; argument #2 for method digest_word_file, only_table
00000000000027dd         call       digest_word_file                            ; digest_word_file
00000000000027e2         cmp        qword [qword_221330], 0x0                   ; qword_221330
00000000000027ea         je         loc_3330

                     loc_27f0:
00000000000027f0         cmp        dword [number_input_files], 0x0             ; number_input_files, CODE XREF=main+1604, sub_31ea+337
00000000000027f7         mov        qword [number_of_occurs], 0x0               ; number_of_occurs
0000000000002802         mov        qword [total_line_count], 0x0               ; total_line_count
000000000000280d         mov        qword [maximum_word_length], 0x0            ; maximum_word_length
0000000000002818         mov        qword [reference_max_width], 0x0            ; reference_max_width
0000000000002823         jle        loc_2bdd

0000000000002829         lea        r15, qword [word_fastmap]                   ; word_fastmap
0000000000002830         mov        qword [rsp+0xc8+var_70], 0x0
0000000000002839         mov        dword [rsp+0xc8+var_90], 0x0

                     loc_2841:
0000000000002841         mov        rdi, qword [rsp+0xc8+var_70]                ; CODE XREF=main+2615
0000000000002846         mov        rax, qword [input_file_name]                ; input_file_name
000000000000284d         mov        rsi, qword [text_buffers]                   ; text_buffers
0000000000002854         lea        rbx, qword [rdi+rdi]
0000000000002858         mov        rdi, qword [rax+rdi]                        ; argument #1 for method swallow_file_in_memory
000000000000285c         add        rsi, rbx
000000000000285f         call       swallow_file_in_memory                      ; swallow_file_in_memory
0000000000002864         mov        rax, qword [text_buffers]                   ; text_buffers
000000000000286b         add        rax, rbx
000000000000286e         cmp        byte [input_reference], 0x0                 ; input_reference
0000000000002875         mov        qword [rsp+0xc8+var_B0], rax
000000000000287a         mov        r12, qword [rax]
000000000000287d         je         loc_320c

0000000000002883         mov        rbp, qword [rax+8]
0000000000002887         cmp        r12, rbp
000000000000288a         mov        rbx, rbp
000000000000288d         jae        loc_3247

0000000000002893         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000002898         mov        r14, r12
000000000000289b         mov        rax, qword [rax]
000000000000289e         jmp        loc_28ad

                     loc_28a0:
00000000000028a0         add        r14, 0x1                                    ; CODE XREF=main+1830
00000000000028a4         cmp        r14, rbp
00000000000028a7         je         loc_324a

                     loc_28ad:
00000000000028ad         movzx      edx, byte [r14]                             ; CODE XREF=main+1806
00000000000028b1         test       byte [rax+rdx*2+1], 0x20
00000000000028b6         je         loc_28a0

00000000000028b8         mov        rsi, r14
00000000000028bb         sub        rsi, r12
00000000000028be         cmp        r14, rbp
00000000000028c1         mov        qword [rsp+0xc8+var_A8], rsi
00000000000028c6         jb         loc_28d9

00000000000028c8         jmp        loc_28e4
00000000000028ca         align      16

                     loc_28d0:
00000000000028d0         add        r14, 0x1                                    ; CODE XREF=main+1874
00000000000028d4         cmp        r14, rbp
00000000000028d7         je         loc_28e4

                     loc_28d9:
00000000000028d9         movzx      edx, byte [r14]                             ; CODE XREF=main+1846
00000000000028dd         test       byte [rax+rdx*2+1], 0x20
00000000000028e2         jne        loc_28d0

                     loc_28e4:
00000000000028e4         lea        rax, qword [rsp+0xc8+var_68]                ; CODE XREF=main+1848, main+1863, sub_31ea+55, sub_31ea+110
00000000000028e9         cmp        rbp, r12
00000000000028ec         mov        qword [rsp+0xc8+var_C8], r12
00000000000028f0         mov        qword [rsp+0xc8+var_78], rbp
00000000000028f5         mov        qword [rsp+0xc8+var_C0], rax
00000000000028fa         jbe        loc_2b8d

                     loc_2900:
0000000000002900         cmp        qword [context_regex], 0x0                  ; context_regex, CODE XREF=main+2551
0000000000002908         je         loc_2964

000000000000290a         mov        rdx, qword [rsp+0xc8+var_78]
000000000000290f         lea        r9, qword [context_regs]                    ; context_regs
0000000000002916         lea        rdi, qword [context_regex+8]                ; 0x221728
000000000000291d         xor        ecx, ecx
000000000000291f         mov        rsi, r12
0000000000002922         sub        rdx, r12
0000000000002925         mov        r8, rdx
0000000000002928         call       rpl_re_search                               ; rpl_re_search
000000000000292d         cmp        rax, 0xffffffffffffffff
0000000000002931         je         loc_2958

0000000000002933         test       rax, rax
0000000000002936         je         loc_4587

000000000000293c         cmp        rax, 0xfffffffffffffffe
0000000000002940         je         loc_452a

0000000000002946         mov        rax, qword [qword_2214b0]                   ; qword_2214b0
000000000000294d         mov        rsi, qword [rax]
0000000000002950         add        rsi, r12
0000000000002953         mov        qword [rsp+0xc8+var_78], rsi

                     loc_2958:
0000000000002958         cmp        r12, qword [rsp+0xc8+var_78]                ; CODE XREF=main+1953
000000000000295d         mov        rbp, qword [rsp+0xc8+var_78]
0000000000002962         jae        loc_298c

                     loc_2964:
0000000000002964         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=main+1912
0000000000002969         mov        rbp, qword [rsp+0xc8+var_78]
000000000000296e         mov        rdx, qword [rax]
0000000000002971         jmp        loc_2981
0000000000002973         align      8

                     loc_2978:
0000000000002978         sub        rbp, 0x1                                    ; CODE XREF=main+2042
000000000000297c         cmp        r12, rbp
000000000000297f         jae        loc_298c

                     loc_2981:
0000000000002981         movzx      eax, byte [rbp-1]                           ; CODE XREF=main+2017
0000000000002985         test       byte [rdx+rax*2+1], 0x20
000000000000298a         jne        loc_2978

                     loc_298c:
000000000000298c         lea        rax, qword [word_regex]                     ; word_regex, CODE XREF=main+2002, main+2031
0000000000002993         mov        qword [rsp+0xc8+var_B8], r12
0000000000002998         mov        rdx, qword [rax]
000000000000299b         nop        dword [rax+rax]

                     loc_29a0:
00000000000029a0         test       rdx, rdx                                    ; CODE XREF=main+3395, main+3870
00000000000029a3         je         loc_2b3b

                     loc_29a9:
00000000000029a9         mov        rdx, rbp                                    ; CODE XREF=main+2469
00000000000029ac         lea        r9, qword [word_regs]                       ; word_regs
00000000000029b3         lea        rdi, qword [word_regex+8]                   ; 0x2215c8
00000000000029ba         sub        rdx, r12
00000000000029bd         xor        ecx, ecx
00000000000029bf         mov        rsi, r12
00000000000029c2         mov        r8, rdx
00000000000029c5         call       rpl_re_search                               ; rpl_re_search
00000000000029ca         cmp        rax, 0xfffffffffffffffe
00000000000029ce         je         loc_452a

00000000000029d4         cmp        rax, 0xffffffffffffffff
00000000000029d8         je         loc_2b71

00000000000029de         mov        rax, qword [qword_221488]                   ; qword_221488
00000000000029e5         mov        rbx, qword [rax]
00000000000029e8         mov        rax, qword [qword_221490]                   ; qword_221490
00000000000029ef         add        rbx, r12
00000000000029f2         add        r12, qword [rax]

                     loc_29f5:
00000000000029f5         cmp        rbx, r12                                    ; CODE XREF=main+3886
00000000000029f8         je         loc_30a0

                     loc_29fe:
00000000000029fe         mov        rax, r12                                    ; CODE XREF=main+3469
0000000000002a01         mov        qword [rsp+0xc8+var_68], rbx
0000000000002a06         sub        rax, rbx
0000000000002a09         cmp        rax, qword [maximum_word_length]            ; maximum_word_length
0000000000002a10         mov        qword [rsp+0xc8+var_60], rax
0000000000002a15         jle        loc_2a1e

0000000000002a17         mov        qword [maximum_word_length], rax            ; maximum_word_length

                     loc_2a1e:
0000000000002a1e         movzx      r13d, byte [input_reference]                ; input_reference, CODE XREF=main+2181
0000000000002a26         test       r13b, r13b
0000000000002a29         jne        loc_2f28

                     loc_2a2f:
0000000000002a2f         cmp        qword [ignore_file], 0x0                    ; ignore_file, CODE XREF=main+3379
0000000000002a37         je         loc_2a59

0000000000002a39         mov        rdx, qword [qword_221350]                   ; argument #3 for method search_table.isra.1, qword_221350
0000000000002a40         mov        rsi, qword [ignore_table]                   ; argument #2 for method search_table.isra.1, ignore_table
0000000000002a47         mov        rdi, qword [rsp+0xc8+var_C0]                ; argument #1 for method search_table.isra.1
0000000000002a4c         call       search_table.isra.1                         ; search_table.isra.1
0000000000002a51         test       al, al
0000000000002a53         jne        loc_2ec9

                     loc_2a59:
0000000000002a59         cmp        qword [only_file], 0x0                      ; only_file, CODE XREF=main+2215
0000000000002a61         je         loc_2a83

0000000000002a63         mov        rdx, qword [qword_221330]                   ; argument #3 for method search_table.isra.1, qword_221330
0000000000002a6a         mov        rsi, qword [only_table]                     ; argument #2 for method search_table.isra.1, only_table
0000000000002a71         mov        rdi, qword [rsp+0xc8+var_C0]                ; argument #1 for method search_table.isra.1
0000000000002a76         call       search_table.isra.1                         ; search_table.isra.1
0000000000002a7b         test       al, al
0000000000002a7d         je         loc_2ec9

                     loc_2a83:
0000000000002a83         mov        rcx, qword [number_of_occurs]               ; number_of_occurs, CODE XREF=main+2257
0000000000002a8a         cmp        rcx, qword [occurs_alloc]                   ; occurs_alloc
0000000000002a91         mov        r8, qword [occurs_table]                    ; occurs_table
0000000000002a98         je         loc_30c8

                     loc_2a9e:
0000000000002a9e         lea        rdi, qword [rcx+rcx*2]                      ; CODE XREF=main+3983
0000000000002aa2         mov        rax, rdi
0000000000002aa5         shl        rax, 0x4
0000000000002aa9         lea        rdi, qword [r8+rax]
0000000000002aad         movzx      r8d, byte [auto_reference]                  ; auto_reference
0000000000002ab5         test       r8b, r8b
0000000000002ab8         jne        loc_2fc0

0000000000002abe         test       r13b, r13b
0000000000002ac1         je         loc_2af7

0000000000002ac3         mov        rax, qword [rsp+0xc8+var_C8]
0000000000002ac7         sub        rax, rbx
0000000000002aca         mov        qword [rdi+0x20], rax
0000000000002ace         mov        rax, qword [rsp+0xc8+var_A8]
0000000000002ad3         cmp        qword [reference_max_width], rax            ; reference_max_width
0000000000002ada         jge        loc_2ae3

0000000000002adc         mov        qword [reference_max_width], rax            ; reference_max_width

                     loc_2ae3:
0000000000002ae3         mov        rsi, qword [rsp+0xc8+var_B8]                ; CODE XREF=main+2378, main+3848
0000000000002ae8         cmp        qword [rsp+0xc8+var_C8], rsi
0000000000002aec         jne        loc_2af7

0000000000002aee         test       r13b, r13b
0000000000002af1         jne        loc_3140

                     loc_2af7:
0000000000002af7         mov        rax, qword [rsp+0xc8+var_B8]                ; CODE XREF=main+2353, main+2396, main+4022, main+4091, main+4128
0000000000002afc         add        rcx, 0x1
0000000000002b00         movdqa     xmm0, xmmword [rsp+0xc8+var_68]
0000000000002b06         mov        qword [number_of_occurs], rcx               ; number_of_occurs
0000000000002b0d         sub        rax, rbx
0000000000002b10         mov        qword [rdi+0x10], rax
0000000000002b14         mov        rax, rbp
0000000000002b17         sub        rax, rbx
0000000000002b1a         mov        qword [rdi+0x18], rax
0000000000002b1e         mov        eax, dword [rsp+0xc8+var_90]
0000000000002b22         movups     xmmword [rdi], xmm0
0000000000002b25         mov        dword [rdi+0x28], eax
0000000000002b28         lea        rax, qword [word_regex]                     ; word_regex
0000000000002b2f         mov        rdx, qword [rax]
0000000000002b32         test       rdx, rdx
0000000000002b35         jne        loc_29a9

                     loc_2b3b:
0000000000002b3b         cmp        r12, rbp                                    ; CODE XREF=main+2067
0000000000002b3e         jae        loc_3128

0000000000002b44         movzx      eax, byte [r12]
0000000000002b49         cmp        byte [r15+rax], 0x0
0000000000002b4e         je         loc_2b68

0000000000002b50         jmp        loc_2ee9
0000000000002b55         align      8

                     loc_2b58:
0000000000002b58         movzx      eax, byte [r12]                             ; CODE XREF=main+2527
0000000000002b5d         cmp        byte [r15+rax], 0x0
0000000000002b62         jne        loc_2ee0

                     loc_2b68:
0000000000002b68         add        r12, 0x1                                    ; CODE XREF=main+2494
0000000000002b6c         cmp        r12, rbp
0000000000002b6f         jne        loc_2b58

                     loc_2b71:
0000000000002b71         mov        rax, qword [rsp+0xc8+var_B0]                ; CODE XREF=main+2120, loc_3128
0000000000002b76         mov        r12, qword [rsp+0xc8+var_78]
0000000000002b7b         mov        rbp, qword [rax+8]
0000000000002b7f         cmp        rbp, r12
0000000000002b82         mov        qword [rsp+0xc8+var_78], rbp
0000000000002b87         ja         loc_2900

                     loc_2b8d:
0000000000002b8d         mov        rax, qword [total_line_count]               ; total_line_count, CODE XREF=main+1898
0000000000002b94         mov        rsi, qword [rsp+0xc8+var_70]
0000000000002b99         mov        rdx, qword [file_line_count]                ; file_line_count
0000000000002ba0         add        dword [rsp+0xc8+var_90], 0x1
0000000000002ba5         add        rax, 0x1
0000000000002ba9         mov        qword [rdx+rsi], rax
0000000000002bad         add        rsi, 0x8
0000000000002bb1         mov        qword [total_line_count], rax               ; total_line_count
0000000000002bb8         mov        eax, dword [rsp+0xc8+var_90]
0000000000002bbc         cmp        dword [number_input_files], eax             ; number_input_files
0000000000002bc2         mov        qword [rsp+0xc8+var_70], rsi
0000000000002bc7         jg         loc_2841

0000000000002bcd         mov        rsi, qword [number_of_occurs]               ; number_of_occurs
0000000000002bd4         test       rsi, rsi
0000000000002bd7         jne        loc_33a2

                     loc_2bdd:
0000000000002bdd         cmp        byte [auto_reference], 0x0                  ; auto_reference, CODE XREF=main+1683, sub_31ea+464
0000000000002be4         jne        loc_325d

                     loc_2bea:
0000000000002bea         cmp        byte [input_reference], 0x0                 ; input_reference, CODE XREF=sub_31ea+321
0000000000002bf1         je         loc_2c11

                     loc_2bf3:
0000000000002bf3         cmp        byte [right_reference], 0x0                 ; right_reference, CODE XREF=sub_31ea+315
0000000000002bfa         jne        loc_2c11

0000000000002bfc         mov        rax, qword [gap_size]                       ; gap_size
0000000000002c03         add        rax, qword [reference_max_width]            ; reference_max_width
0000000000002c0a         sub        qword [line_width], rax                     ; line_width

                     loc_2c11:
0000000000002c11         cmp        qword [line_width], 0x0                     ; line_width, CODE XREF=main+2657, main+2666
0000000000002c19         jns        loc_2c26

0000000000002c1b         mov        qword [line_width], 0x0                     ; line_width

                     loc_2c26:
0000000000002c26         mov        rax, qword [line_width]                     ; line_width, CODE XREF=main+2697
0000000000002c2d         mov        ecx, 0x2
0000000000002c32         mov        rdi, qword [truncation_string]              ; truncation_string
0000000000002c39         cqo
0000000000002c3b         idiv       rcx
0000000000002c3e         mov        rdx, rax
0000000000002c41         sub        rdx, qword [gap_size]                       ; gap_size
0000000000002c48         test       rdi, rdi
0000000000002c4b         mov        rsi, rax
0000000000002c4e         mov        qword [half_line_width], rax                ; half_line_width
0000000000002c55         mov        qword [keyafter_max_width], rax             ; keyafter_max_width
0000000000002c5c         mov        qword [before_max_width], rdx               ; before_max_width
0000000000002c63         je         loc_43d1

0000000000002c69         cmp        byte [rdi], 0x0
0000000000002c6c         je         loc_43d1

0000000000002c72         xor        eax, eax
0000000000002c74         or         rcx, 0xffffffffffffffff
0000000000002c78         repne scasb al, byte [rdi]
0000000000002c7a         mov        rax, rcx
0000000000002c7d         not        rax
0000000000002c80         sub        rax, 0x1
0000000000002c84         mov        qword [truncation_string_length], rax       ; truncation_string_length

                     loc_2c8b:
0000000000002c8b         mov        rax, qword [truncation_string_length]       ; truncation_string_length, CODE XREF=sub_31ea+4594
0000000000002c92         add        rax, rax
0000000000002c95         cmp        byte [gnu_extensions], 0x0                  ; gnu_extensions
0000000000002c9c         je         loc_43c8

0000000000002ca2         sub        rdx, rax
0000000000002ca5         test       rdx, rdx
0000000000002ca8         mov        qword [before_max_width], rdx               ; before_max_width
0000000000002caf         js         loc_4744

                     loc_2cb5:
0000000000002cb5         sub        rsi, rax                                    ; CODE XREF=sub_31ea+4578, sub_31ea+5477
0000000000002cb8         mov        qword [keyafter_max_width], rsi             ; keyafter_max_width
0000000000002cbf         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000002cc4         mov        rsi, qword [rax]
0000000000002cc7         lea        rcx, qword [edited_flag]                    ; edited_flag
0000000000002cce         mov        qword [rsp+0xc8+var_C8], rax
0000000000002cd2         xor        edx, edx
0000000000002cd4         nop        dword [rax]

                     loc_2cd8:
0000000000002cd8         movzx      eax, word [rsi+rdx*2]                       ; CODE XREF=main+2913
0000000000002cdc         shr        ax, 0xd
0000000000002ce0         and        eax, 0x1
0000000000002ce3         mov        byte [rcx+rdx], al
0000000000002ce6         add        rdx, 0x1
0000000000002cea         cmp        rdx, 0x100
0000000000002cf1         jne        loc_2cd8

0000000000002cf3         mov        eax, dword [output_format]                  ; output_format
0000000000002cf9         mov        byte [byte_2211ec], 0x1                     ; byte_2211ec
0000000000002d00         cmp        eax, 0x2
0000000000002d03         je         loc_43bc

0000000000002d09         cmp        eax, 0x3
0000000000002d0c         jne        loc_2d49

0000000000002d0e         lea        rdx, qword [aFullDocumentat+27]             ; 0x1b7ff
0000000000002d15         mov        eax, 0x24

                     loc_2d1a:
0000000000002d1a         add        rdx, 0x1                                    ; CODE XREF=main+2967
0000000000002d1e         mov        byte [rcx+rax], 0x1
0000000000002d22         movzx      eax, byte [rdx]
0000000000002d25         test       al, al
0000000000002d27         jne        loc_2d1a

0000000000002d29         lea        rdx, qword [diacrit_diac]                   ; diacrit_diac
0000000000002d30         mov        eax, 0x80

                     loc_2d35:
0000000000002d35         cmp        byte [rdx+rax], 0x0                         ; CODE XREF=main+2999
0000000000002d39         setne      byte [rcx+rax]
0000000000002d3d         add        rax, 0x1
0000000000002d41         cmp        rax, 0x100
0000000000002d47         jne        loc_2d35

                     loc_2d49:
0000000000002d49         cmp        qword [number_of_occurs], 0x0               ; number_of_occurs, CODE XREF=main+2940, sub_31ea+4569
0000000000002d51         mov        qword [tail], 0x0                           ; tail
0000000000002d5c         mov        qword [qword_2211a8], 0x0                   ; qword_2211a8
0000000000002d67         mov        byte [tail_truncation], 0x0                 ; tail_truncation
0000000000002d6e         mov        qword [head], 0x0                           ; head
0000000000002d79         mov        qword [qword_221148], 0x0                   ; qword_221148
0000000000002d84         mov        byte [head_truncation], 0x0                 ; head_truncation
0000000000002d8b         mov        r12, qword [occurs_table]                   ; occurs_table
0000000000002d92         jle        loc_3c39

0000000000002d98         mov        qword [rsp+0xc8+var_B8], 0x0

                     loc_2da1:
0000000000002da1         mov        rdx, qword [r12]                            ; CODE XREF=sub_31ea+2633
0000000000002da5         mov        rcx, qword [r12+0x10]
0000000000002daa         lea        rax, qword [keyafter]                       ; keyafter
0000000000002db1         mov        rbx, qword [r12+8]
0000000000002db6         mov        rbp, qword [r12+0x18]
0000000000002dbb         mov        qword [rax], rdx
0000000000002dbe         lea        rax, qword [rdx+rcx]
0000000000002dc2         add        rbx, rdx
0000000000002dc5         add        rbp, rdx
0000000000002dc8         mov        qword [rsp+0xc8+var_B0], rax
0000000000002dcd         movsxd     rax, dword [r12+0x28]
0000000000002dd2         mov        qword [qword_221168], rbx                   ; qword_221168
0000000000002dd9         shl        rax, 0x4
0000000000002ddd         add        rax, qword [text_buffers]                   ; text_buffers
0000000000002de4         mov        r13, qword [rax]
0000000000002de7         mov        r14, qword [rax+8]
0000000000002deb         mov        rax, qword [keyafter_max_width]             ; keyafter_max_width
0000000000002df2         add        rdx, rax
0000000000002df5         cmp        rbx, rbp
0000000000002df8         jae        loc_33f5

0000000000002dfe         cmp        rbx, rdx
0000000000002e01         jbe        loc_2e6a

0000000000002e03         jmp        loc_3d58
0000000000002e08         align      16

                     loc_2e10:
0000000000002e10         mov        rdx, rbp                                    ; CODE XREF=main+3308
0000000000002e13         lea        rdi, qword [word_regex+8]                   ; 0x2215c8
0000000000002e1a         xor        r8d, r8d
0000000000002e1d         sub        rdx, rbx
0000000000002e20         xor        ecx, ecx
0000000000002e22         mov        rsi, rbx
0000000000002e25         call       rpl_re_match                                ; rpl_re_match
0000000000002e2a         cmp        rax, 0xfffffffffffffffe
0000000000002e2e         je         loc_452a

0000000000002e34         cmp        rax, 0xffffffffffffffff
0000000000002e38         mov        edx, 0x1
0000000000002e3d         cmove      rax, rdx
0000000000002e41         add        rbx, rax
0000000000002e44         mov        rax, qword [keyafter_max_width]             ; keyafter_max_width

                     loc_2e4b:
0000000000002e4b         cmp        rbp, rbx                                    ; CODE XREF=main+3334
0000000000002e4e         jbe        loc_33f0

                     loc_2e54:
0000000000002e54         lea        rsi, qword [keyafter]                       ; keyafter, CODE XREF=sub_31ea+500
0000000000002e5b         mov        rdx, qword [rsi]
0000000000002e5e         add        rdx, rax
0000000000002e61         cmp        rbx, rdx
0000000000002e64         ja         loc_3d53

                     loc_2e6a:
0000000000002e6a         lea        rsi, qword [word_regex]                     ; word_regex, CODE XREF=main+3185
0000000000002e71         mov        qword [qword_221168], rbx                   ; qword_221168
0000000000002e78         cmp        qword [rsi], 0x0
0000000000002e7c         jne        loc_2e10

0000000000002e7e         movzx      edx, byte [rbx]
0000000000002e81         lea        rsi, qword [word_fastmap]                   ; word_fastmap
0000000000002e88         cmp        byte [rsi+rdx], 0x0
0000000000002e8c         jne        loc_33c0

0000000000002e92         add        rbx, 0x1
0000000000002e96         jmp        loc_2e4b
0000000000002e98         align      32

                     loc_2ea0:
0000000000002ea0         test       dl, dl                                      ; CODE XREF=main+3523
0000000000002ea2         mov        rbx, r13
0000000000002ea5         mov        rdi, r12
0000000000002ea8         mov        r13d, ebp
0000000000002eab         mov        r12, qword [rsp+0xc8+var_98]
0000000000002eb0         mov        rbp, qword [rsp+0xc8+var_A0]
0000000000002eb5         je         loc_2ec0

0000000000002eb7         mov        qword [total_line_count], rdi               ; total_line_count
0000000000002ebe         nop

                     loc_2ec0:
0000000000002ec0         cmp        r14, rbx                                    ; CODE XREF=main+3365, main+3483
0000000000002ec3         jbe        loc_2a2f

                     loc_2ec9:
0000000000002ec9         lea        rax, qword [word_regex]                     ; word_regex, CODE XREF=main+2243, main+2285
0000000000002ed0         mov        rdx, qword [rax]
0000000000002ed3         jmp        loc_29a0
0000000000002ed8         align      32

                     loc_2ee0:
0000000000002ee0         cmp        r12, rbp                                    ; CODE XREF=main+2514
0000000000002ee3         jae        loc_312e

                     loc_2ee9:
0000000000002ee9         movzx      eax, byte [r12]                             ; CODE XREF=main+2496
0000000000002eee         cmp        byte [r15+rax], 0x0
0000000000002ef3         je         loc_312e

0000000000002ef9         mov        rax, r12
0000000000002efc         jmp        loc_2f0e
0000000000002efe         align      256

                     loc_2f00:
0000000000002f00         movzx      edx, byte [rax]                             ; CODE XREF=main+3461
0000000000002f03         cmp        byte [r15+rdx], 0x0
0000000000002f08         je         loc_30b8

                     loc_2f0e:
0000000000002f0e         add        rax, 0x1                                    ; CODE XREF=main+3436
0000000000002f12         cmp        rax, rbp
0000000000002f15         jne        loc_2f00

0000000000002f17         mov        rbx, r12
0000000000002f1a         mov        r12, rbp
0000000000002f1d         jmp        loc_29fe
0000000000002f22         align      8

                     loc_2f28:
0000000000002f28         cmp        r14, rbx                                    ; CODE XREF=main+2201
0000000000002f2b         jae        loc_2ec0

0000000000002f2d         mov        rdi, qword [total_line_count]               ; total_line_count
0000000000002f34         mov        qword [rsp+0xc8+var_A0], rbp
0000000000002f39         xor        edx, edx
0000000000002f3b         mov        qword [rsp+0xc8+var_98], r12
0000000000002f40         mov        ebp, r13d
0000000000002f43         mov        r13, rbx
0000000000002f46         mov        r12, rdi
0000000000002f49         jmp        loc_2f59
0000000000002f4b         align      16

                     loc_2f50:
0000000000002f50         cmp        r14, r13                                    ; CODE XREF=main+3539, main+3623
0000000000002f53         jae        loc_2ea0

                     loc_2f59:
0000000000002f59         movzx      eax, byte [r14]                             ; CODE XREF=main+3513
0000000000002f5d         add        r14, 0x1
0000000000002f61         cmp        al, 0xa
0000000000002f63         jne        loc_2f50

0000000000002f65         mov        rax, qword [rsp+0xc8+var_B0]
0000000000002f6a         add        r12, 0x1
0000000000002f6e         mov        rbx, qword [rax+8]
0000000000002f72         cmp        rbx, r14
0000000000002f75         jbe        loc_31f0

0000000000002f7b         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000002f80         mov        rcx, qword [rax]
0000000000002f83         mov        rax, r14
0000000000002f86         jmp        loc_2f99
0000000000002f88         align      16

                     loc_2f90:
0000000000002f90         add        rax, 0x1                                    ; CODE XREF=main+3601
0000000000002f94         cmp        rax, rbx
0000000000002f97         je         loc_2fa3

                     loc_2f99:
0000000000002f99         movzx      edx, byte [rax]                             ; CODE XREF=main+3574
0000000000002f9c         test       byte [rcx+rdx*2+1], 0x20
0000000000002fa1         je         loc_2f90

                     loc_2fa3:
0000000000002fa3         mov        rsi, rax                                    ; CODE XREF=main+3591
0000000000002fa6         sub        rsi, r14
0000000000002fa9         mov        qword [rsp+0xc8+var_A8], rsi

                     loc_2fae:
0000000000002fae         mov        qword [rsp+0xc8+var_C8], r14                ; CODE XREF=sub_31ea+18
0000000000002fb2         mov        edx, ebp
0000000000002fb4         mov        r14, rax
0000000000002fb7         jmp        loc_2f50
0000000000002fb9         align      64

                     loc_2fc0:
0000000000002fc0         cmp        r14, rbx                                    ; CODE XREF=main+2344
0000000000002fc3         mov        r10, qword [total_line_count]               ; total_line_count
0000000000002fca         jae        loc_3094

0000000000002fd0         mov        qword [rsp+0xc8+var_A0], rbp
0000000000002fd5         mov        qword [rsp+0xc8+var_98], r12
0000000000002fda         xor        esi, esi
0000000000002fdc         mov        r12, r10
0000000000002fdf         mov        qword [rsp+0xc8+var_80], r10
0000000000002fe4         mov        byte [rsp+0xc8+var_89], r13b
0000000000002fe9         mov        r10, r14
0000000000002fec         mov        qword [rsp+0xc8+var_88], rcx
0000000000002ff1         mov        ebp, r8d
0000000000002ff4         mov        r14, rdi
0000000000002ff7         jmp        loc_3005
0000000000002ff9         align      4096

                     loc_3000:
0000000000003000         cmp        r10, rbx                                    ; CODE XREF=main+3711, sub_31ea+29
0000000000003003         jae        loc_3068

                     loc_3005:
0000000000003005         movzx      eax, byte [r10]                             ; CODE XREF=main+3687, main+3792
0000000000003009         add        r10, 0x1
000000000000300d         cmp        al, 0xa
000000000000300f         jne        loc_3000

0000000000003011         mov        rax, qword [rsp+0xc8+var_B0]
0000000000003016         add        r12, 0x1
000000000000301a         mov        r13, qword [rax+8]
000000000000301e         cmp        r13, r10
0000000000003021         jbe        loc_3201

0000000000003027         mov        qword [rsp+0xc8+var_C8], r10
000000000000302b         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000003030         mov        r10, qword [rsp+0xc8+var_C8]
0000000000003034         mov        r8, qword [rax]
0000000000003037         mov        rax, r10
000000000000303a         jmp        loc_3049
000000000000303c         align      64

                     loc_3040:
0000000000003040         add        rax, 0x1                                    ; CODE XREF=main+3778
0000000000003044         cmp        rax, r13
0000000000003047         je         loc_3054

                     loc_3049:
0000000000003049         movzx      edx, byte [rax]                             ; CODE XREF=main+3754
000000000000304c         test       byte [r8+rdx*2+1], 0x20
0000000000003052         je         loc_3040

                     loc_3054:
0000000000003054         mov        qword [rsp+0xc8+var_C8], r10                ; CODE XREF=main+3767
0000000000003058         mov        r10, rax
000000000000305b         mov        esi, ebp
000000000000305d         cmp        r10, rbx
0000000000003060         jb         loc_3005

0000000000003062         nop        word [rax+rax]

                     loc_3068:
0000000000003068         test       sil, sil                                    ; CODE XREF=main+3699
000000000000306b         mov        rdi, r14
000000000000306e         mov        r9, r12
0000000000003071         mov        r14, r10
0000000000003074         mov        rbp, qword [rsp+0xc8+var_A0]
0000000000003079         movzx      r13d, byte [rsp+0xc8+var_89]
000000000000307f         mov        rcx, qword [rsp+0xc8+var_88]
0000000000003084         mov        r12, qword [rsp+0xc8+var_98]
0000000000003089         mov        r10, qword [rsp+0xc8+var_80]
000000000000308e         jne        loc_482b

                     loc_3094:
0000000000003094         mov        qword [rdi+0x20], r10                       ; CODE XREF=main+3642, sub_31ea+5707
0000000000003098         jmp        loc_2ae3
000000000000309d         align      32

                     loc_30a0:
00000000000030a0         lea        rax, qword [word_regex]                     ; word_regex, CODE XREF=main+2152
00000000000030a7         mov        rdx, qword [rax]

                     loc_30aa:
00000000000030aa         lea        r12, qword [rbx+1]                          ; CODE XREF=main+4001
00000000000030ae         jmp        loc_29a0
00000000000030b3         align      8

                     loc_30b8:
00000000000030b8         mov        rbx, r12                                    ; CODE XREF=main+3448
00000000000030bb         mov        r12, rax
00000000000030be         jmp        loc_29f5
00000000000030c3         align      8

                     loc_30c8:
00000000000030c8         test       r8, r8                                      ; CODE XREF=main+2312
00000000000030cb         je         loc_31b8

00000000000030d1         movabs     rax, 0x1c71c71c71c71c6
00000000000030db         cmp        rcx, rax
00000000000030de         ja         loc_31e5

00000000000030e4         mov        rax, rcx
00000000000030e7         shr        rax, 0x1
00000000000030ea         lea        rcx, qword [rcx+rax+1]

                     loc_30ef:
00000000000030ef         lea        rsi, qword [rcx+rcx*2]                      ; CODE XREF=main+4175
00000000000030f3         mov        rdi, r8                                     ; argument #1 for method xrealloc
00000000000030f6         mov        qword [occurs_alloc], rcx                   ; occurs_alloc
00000000000030fd         shl        rsi, 0x4                                    ; argument #2 for method xrealloc
0000000000003101         call       xrealloc                                    ; xrealloc
0000000000003106         mov        rcx, qword [number_of_occurs]               ; number_of_occurs
000000000000310d         mov        r8, rax
0000000000003110         mov        qword [occurs_table], rax                   ; occurs_table
0000000000003117         movzx      r13d, byte [input_reference]                ; input_reference
000000000000311f         jmp        loc_2a9e
0000000000003124         align      8

                     loc_3128:
0000000000003128         je         loc_2b71                                    ; CODE XREF=main+2478

                     loc_312e:
000000000000312e         mov        rbx, r12                                    ; CODE XREF=main+3411, main+3427
0000000000003131         jmp        loc_30aa
0000000000003136         align      64

                     loc_3140:
0000000000003140         cmp        rsi, rbp                                    ; CODE XREF=main+2401
0000000000003143         mov        r13, rsi
0000000000003146         jae        loc_2af7

000000000000314c         mov        qword [rsp+0xc8+var_A0], rdi
0000000000003151         mov        qword [rsp+0xc8+var_B8], rcx
0000000000003156         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000315b         mov        rcx, qword [rsp+0xc8+var_B8]
0000000000003160         mov        rax, qword [rax]
0000000000003163         mov        rdx, r13
0000000000003166         mov        rdi, qword [rsp+0xc8+var_A0]
000000000000316b         jmp        loc_3179
000000000000316d         align      16

                     loc_3170:
0000000000003170         add        rdx, 0x1                                    ; CODE XREF=main+4081
0000000000003174         cmp        rdx, rbp
0000000000003177         je         loc_31ab

                     loc_3179:
0000000000003179         movzx      esi, byte [rdx]                             ; CODE XREF=main+4059
000000000000317c         test       byte [rax+rsi*2+1], 0x20
0000000000003181         je         loc_3170

0000000000003183         cmp        rdx, rbp
0000000000003186         mov        qword [rsp+0xc8+var_B8], rdx
000000000000318b         jae        loc_2af7

0000000000003191         nop        dword [rax]

                     loc_3198:
0000000000003198         add        rdx, 0x1                                    ; CODE XREF=main+4121
000000000000319c         cmp        rdx, rbp
000000000000319f         je         loc_31ab

00000000000031a1         movzx      esi, byte [rdx]
00000000000031a4         test       byte [rax+rsi*2+1], 0x20
00000000000031a9         jne        loc_3198

                     loc_31ab:
00000000000031ab         mov        qword [rsp+0xc8+var_B8], rdx                ; CODE XREF=main+4071, main+4111
00000000000031b0         jmp        loc_2af7
00000000000031b5         align      8

                     loc_31b8:
00000000000031b8         test       rcx, rcx                                    ; CODE XREF=main+3899
00000000000031bb         mov        eax, 0x2
00000000000031c0         mov        edx, 0x30
00000000000031c5         cmove      rcx, rax
00000000000031c9         mov        rax, rdx
00000000000031cc         xor        esi, esi
00000000000031ce         mul        rcx
00000000000031d1         jo         loc_4821

                     loc_31d7:
00000000000031d7         test       rax, rax                                    ; CODE XREF=sub_31ea+5692
00000000000031da         js         loc_31e5

00000000000031dc         test       rsi, rsi
00000000000031df         je         loc_30ef

                     loc_31e5:
00000000000031e5         call       xalloc_die                                  ; xalloc_die, CODE XREF=main+939, main+948, main+1003, main+1012, main+1067, main+1076, main+3918, main+4170
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_31ea:
00000000000031ea         nop        word [rax+rax]
                        ; endp

                     loc_31f0:
00000000000031f0         mov        rax, r14                                    ; CODE XREF=main+3557
00000000000031f3         mov        qword [rsp+0xc8+var_A8], 0x0
00000000000031fc         jmp        loc_2fae

                     loc_3201:
0000000000003201         mov        esi, ebp                                    ; CODE XREF=main+3729
0000000000003203         mov        qword [rsp+0xc8+var_C8], r10
0000000000003207         jmp        loc_3000

                     loc_320c:
000000000000320c         mov        rax, qword [rsp+0xc8+var_B0]                ; CODE XREF=main+1773
0000000000003211         mov        r14, r12
0000000000003214         mov        qword [rsp+0xc8+var_A8], 0x0
000000000000321d         mov        rbp, qword [rax+8]
0000000000003221         jmp        loc_28e4

                     loc_3226:
0000000000003226         lea        rdi, qword [word_regex]                     ; argument #1 for method compile_regex, word_regex, CODE XREF=main+1432
000000000000322d         call       compile_regex                               ; compile_regex
0000000000003232         mov        rdi, qword [break_file]                     ; break_file
0000000000003239         test       rdi, rdi
000000000000323c         je         loc_27a4

0000000000003242         jmp        loc_273e

                     loc_3247:
0000000000003247         mov        rbx, r12                                    ; CODE XREF=main+1789

                     loc_324a:
000000000000324a         mov        rax, rbx                                    ; CODE XREF=main+1815
000000000000324d         mov        r14, rbx
0000000000003250         sub        rax, r12
0000000000003253         mov        qword [rsp+0xc8+var_A8], rax
0000000000003258         jmp        loc_28e4

                     loc_325d:
000000000000325d         mov        qword [reference_max_width], 0x0            ; reference_max_width, CODE XREF=main+2644
0000000000003268         xor        r13d, r13d
000000000000326b         lea        r12, qword [rsp+0xc8+var_58]
0000000000003270         lea        rbp, qword [aExtraOperandS+18]              ; 0x1b8a0
0000000000003277         or         rbx, 0xffffffffffffffff
000000000000327b         jmp        loc_32f0

                     loc_327d:
000000000000327d         mov        rax, qword [file_line_count]                ; file_line_count, CODE XREF=sub_31ea+272
0000000000003284         test       r13, r13
0000000000003287         lea        r14, qword [r13*8]
000000000000328f         mov        rsi, qword [rax+r13*8]
0000000000003293         lea        r8, qword [rsi+1]
0000000000003297         je         loc_329e

0000000000003299         sub        r8, qword [rax+r14-8]

                     loc_329e:
000000000000329e         mov        edx, 0x15                                   ; CODE XREF=sub_31ea+173
00000000000032a3         mov        rdi, r12
00000000000032a6         xor        eax, eax
00000000000032a8         mov        rcx, rbp
00000000000032ab         mov        esi, 0x1
00000000000032b0         call       j___sprintf_chk                             ; __sprintf_chk
00000000000032b5         mov        edx, eax
00000000000032b7         mov        rax, qword [input_file_name]                ; input_file_name
00000000000032be         mov        rdi, qword [rax+r14]
00000000000032c2         movsxd     rax, edx
00000000000032c5         test       rdi, rdi
00000000000032c8         je         loc_32dc

00000000000032ca         xor        eax, eax
00000000000032cc         mov        rcx, rbx
00000000000032cf         repne scasb al, byte [rdi]
00000000000032d1         movsxd     rax, edx
00000000000032d4         not        rcx
00000000000032d7         lea        rax, qword [rcx+rax-1]

                     loc_32dc:
00000000000032dc         cmp        qword [reference_max_width], rax            ; reference_max_width, CODE XREF=sub_31ea+222
00000000000032e3         jge        loc_32ec

00000000000032e5         mov        qword [reference_max_width], rax            ; reference_max_width

                     loc_32ec:
00000000000032ec         add        r13, 0x1                                    ; CODE XREF=sub_31ea+249

                     loc_32f0:
00000000000032f0         movsxd     rax, dword [number_input_files]             ; number_input_files, CODE XREF=sub_31ea+145
00000000000032f7         cmp        r13, rax
00000000000032fa         jb         loc_327d

00000000000032fc         mov        rax, qword [reference_max_width]            ; reference_max_width
0000000000003303         lea        rdx, qword [rax+1]
0000000000003307         lea        rdi, qword [rax+2]                          ; argument #1 for method xmalloc
000000000000330b         mov        qword [reference_max_width], rdx            ; reference_max_width
0000000000003312         call       xmalloc                                     ; xmalloc
0000000000003317         cmp        byte [auto_reference], 0x0                  ; auto_reference
000000000000331e         mov        qword [reference], rax                      ; reference
0000000000003325         jne        loc_2bf3

000000000000332b         jmp        loc_2bea

                     loc_3330:
0000000000003330         mov        qword [only_file], 0x0                      ; only_file, CODE XREF=main+1626
000000000000333b         jmp        loc_27f0

                     loc_3340:
0000000000003340         mov        qword [ignore_file], 0x0                    ; ignore_file, CODE XREF=main+1588
000000000000334b         jmp        loc_27ca

                     loc_3350:
0000000000003350         cmp        byte [gnu_extensions], 0x0                  ; gnu_extensions, CODE XREF=main+1448
0000000000003357         je         loc_4556

000000000000335d         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000003362         lea        rsi, qword [word_fastmap]                   ; word_fastmap
0000000000003369         xor        ecx, ecx

                     loc_336b:
000000000000336b         mov        rdx, qword [rax]                            ; CODE XREF=sub_31ea+417
000000000000336e         add        rsi, 0x1
0000000000003372         movzx      edx, word [rdx+rcx]
0000000000003376         add        rcx, 0x2
000000000000337a         shr        dx, 0xa
000000000000337e         and        edx, 0x1
0000000000003381         mov        byte [rsi-1], dl
0000000000003384         cmp        rcx, 0x200
000000000000338b         jne        loc_336b

000000000000338d         jmp        loc_27a4

                     loc_3392:
0000000000003392         mov        qword [context_regex], 0x0                  ; context_regex, CODE XREF=main+1406
000000000000339d         jmp        loc_2720

                     loc_33a2:
00000000000033a2         mov        rdi, qword [occurs_table]                   ; argument "__base" for method j_qsort, occurs_table, CODE XREF=main+2631
00000000000033a9         lea        rcx, qword [compare_occurs]                 ; argument "__compar" for method j_qsort, compare_occurs
00000000000033b0         mov        edx, 0x30                                   ; argument "__size" for method j_qsort
00000000000033b5         call       j_qsort                                     ; qsort
00000000000033ba         jmp        loc_2bdd
00000000000033bf         align      64

                     loc_33c0:
00000000000033c0         cmp        rbp, rbx                                    ; CODE XREF=main+3324
00000000000033c3         ja         loc_33e4

00000000000033c5         jmp        loc_33f0
00000000000033c7         align      16

                     loc_33d0:
00000000000033d0         movzx      edx, byte [rbx]                             ; CODE XREF=sub_31ea+513
00000000000033d3         lea        rsi, qword [word_fastmap]                   ; word_fastmap
00000000000033da         cmp        byte [rsi+rdx], 0x0
00000000000033de         je         loc_2e54

                     loc_33e4:
00000000000033e4         add        rbx, 0x1                                    ; CODE XREF=sub_31ea+473
00000000000033e8         cmp        rbp, rbx
00000000000033eb         jne        loc_33d0

00000000000033ed         mov        rbx, rbp

                     loc_33f0:
00000000000033f0         mov        rcx, qword [r12+0x10]                       ; CODE XREF=main+3262, sub_31ea+475

                     loc_33f5:
00000000000033f5         lea        rsi, qword [keyafter]                       ; keyafter, CODE XREF=main+3176
00000000000033fc         mov        rsi, qword [rsi]
00000000000033ff         add        rax, rsi
0000000000003402         cmp        rbx, rax
0000000000003405         ja         loc_340e

0000000000003407         mov        qword [qword_221168], rbx                   ; qword_221168

                     loc_340e:
000000000000340e         xor        edi, edi                                    ; CODE XREF=sub_31ea+539, sub_31ea+2936
0000000000003410         cmp        qword [truncation_string], 0x0              ; truncation_string
0000000000003418         mov        rdx, qword [qword_221168]                   ; qword_221168
000000000000341f         mov        rax, rdx
0000000000003422         je         loc_342d

0000000000003424         xor        edi, edi
0000000000003426         cmp        rbp, rdx
0000000000003429         seta       dil

                     loc_342d:
000000000000342d         mov        byte [keyafter_truncation], dil             ; keyafter_truncation, CODE XREF=sub_31ea+568
0000000000003434         and        byte [keyafter_truncation], 0x1             ; keyafter_truncation
000000000000343b         cmp        rsi, rdx
000000000000343e         jae        loc_3472

0000000000003440         mov        rdi, qword [rsp+0xc8+var_C8]
0000000000003444         mov        r8, qword [rdi]
0000000000003447         xor        edi, edi
0000000000003449         jmp        loc_345d

                     loc_344b:
000000000000344b         sub        rax, 0x1                                    ; CODE XREF=sub_31ea+637
000000000000344f         mov        edi, 0x1
0000000000003454         cmp        rax, rsi
0000000000003457         je         loc_4815

                     loc_345d:
000000000000345d         movzx      edx, byte [rax-1]                           ; CODE XREF=sub_31ea+607
0000000000003461         test       byte [r8+rdx*2+1], 0x20
0000000000003467         jne        loc_344b

0000000000003469         test       dil, dil
000000000000346c         jne        loc_47fa

                     loc_3472:
0000000000003472         mov        rdx, qword [maximum_word_length]            ; maximum_word_length, CODE XREF=sub_31ea+596, sub_31ea+5655, sub_31ea+5682
0000000000003479         add        rdx, qword [half_line_width]                ; half_line_width
0000000000003480         mov        rax, rcx
0000000000003483         neg        rax
0000000000003486         cmp        rax, rdx
0000000000003489         jle        loc_3d4a

000000000000348f         lea        rax, qword [word_regex]                     ; word_regex
0000000000003496         mov        rbx, rsi
0000000000003499         sub        rbx, rdx
000000000000349c         cmp        qword [rax], 0x0
00000000000034a0         je         loc_41ca

00000000000034a6         lea        rdi, qword [rax+8]
00000000000034aa         xor        r8d, r8d
00000000000034ad         xor        ecx, ecx
00000000000034af         mov        rsi, rbx
00000000000034b2         call       rpl_re_match                                ; rpl_re_match
00000000000034b7         cmp        rax, 0xfffffffffffffffe
00000000000034bb         je         loc_452a

00000000000034c1         cmp        rax, 0xffffffffffffffff
00000000000034c5         jne        loc_34cc

00000000000034c7         mov        eax, 0x1

                     loc_34cc:
00000000000034cc         add        rbx, rax                                    ; CODE XREF=sub_31ea+731

                     loc_34cf:
00000000000034cf         lea        rax, qword [keyafter]                       ; keyafter, CODE XREF=sub_31ea+2916, sub_31ea+4089, sub_31ea+4108, sub_31ea+4123, sub_31ea+4479
00000000000034d6         lea        r15, qword [before]                         ; before
00000000000034dd         mov        qword [before], rbx                         ; before
00000000000034e4         mov        rax, qword [rax]
00000000000034e7         cmp        rbx, rax
00000000000034ea         mov        qword [qword_221188], rax                   ; qword_221188
00000000000034f1         jae        loc_3523

00000000000034f3         mov        rsi, qword [rsp+0xc8+var_C8]
00000000000034f7         xor        ecx, ecx
00000000000034f9         mov        rsi, qword [rsi]
00000000000034fc         jmp        loc_3510

                     loc_34fe:
00000000000034fe         sub        rax, 0x1                                    ; CODE XREF=sub_31ea+815
0000000000003502         mov        ecx, 0x1
0000000000003507         cmp        rbx, rax
000000000000350a         je         loc_47ee

                     loc_3510:
0000000000003510         movzx      edx, byte [rax-1]                           ; CODE XREF=sub_31ea+786
0000000000003514         test       byte [rsi+rdx*2+1], 0x20
0000000000003519         jne        loc_34fe

000000000000351b         test       cl, cl
000000000000351d         jne        loc_4703

                     loc_3523:
0000000000003523         mov        rcx, qword [before_max_width]               ; before_max_width, CODE XREF=sub_31ea+775, sub_31ea+5408, sub_31ea+5643
000000000000352a         mov        rdx, qword [qword_221188]                   ; qword_221188
0000000000003531         mov        rsi, rbx
0000000000003534         lea        rax, qword [rbx+rcx]

                     loc_3538:
0000000000003538         cmp        rdx, rax                                    ; CODE XREF=sub_31ea+1365, sub_31ea+1373, sub_31ea+1430, sub_31ea+5432
000000000000353b         jbe        loc_3596

                     loc_353d:
000000000000353d         lea        rdi, qword [word_regex]                     ; word_regex, CODE XREF=sub_31ea+938
0000000000003544         cmp        qword [rdi], 0x0
0000000000003548         je         loc_3723

000000000000354e         sub        rdx, rsi
0000000000003551         xor        r8d, r8d
0000000000003554         xor        ecx, ecx
0000000000003556         add        rdi, 0x8
000000000000355a         call       rpl_re_match                                ; rpl_re_match
000000000000355f         cmp        rax, 0xfffffffffffffffe
0000000000003563         je         loc_452a

0000000000003569         cmp        rax, 0xffffffffffffffff
000000000000356d         mov        edx, 0x1
0000000000003572         mov        rcx, qword [before_max_width]               ; before_max_width
0000000000003579         cmove      rax, rdx
000000000000357d         add        rax, qword [r15]
0000000000003580         mov        rdx, qword [qword_221188]                   ; qword_221188
0000000000003587         mov        rsi, rax
000000000000358a         mov        qword [r15], rax
000000000000358d         lea        rax, qword [rax+rcx]
0000000000003591         cmp        rdx, rax
0000000000003594         ja         loc_353d

                     loc_3596:
0000000000003596         cmp        qword [truncation_string], 0x0              ; truncation_string, CODE XREF=sub_31ea+849
000000000000359e         je         loc_3dbb

00000000000035a4         cmp        r13, rsi
00000000000035a7         jae        loc_43e1

00000000000035ad         mov        rax, qword [rsp+0xc8+var_C8]
00000000000035b1         mov        r8, qword [rax]
00000000000035b4         mov        rax, rsi
00000000000035b7         jmp        loc_35c6

                     loc_35b9:
00000000000035b9         sub        rax, 0x1                                    ; CODE XREF=sub_31ea+998
00000000000035bd         cmp        r13, rax
00000000000035c0         je         loc_3dc7

                     loc_35c6:
00000000000035c6         movzx      edi, byte [rax-1]                           ; CODE XREF=sub_31ea+973
00000000000035ca         test       byte [r8+rdi*2+1], 0x20
00000000000035d0         jne        loc_35b9

                     loc_35d2:
00000000000035d2         cmp        qword [rsp+0xc8+var_B0], rax                ; CODE XREF=sub_31ea+3040, sub_31ea+4602
00000000000035d7         setb       byte [before_truncation]                    ; before_truncation

                     loc_35de:
00000000000035de         cmp        r14, rsi                                    ; CODE XREF=sub_31ea+3032
00000000000035e1         jbe        loc_3614

00000000000035e3         mov        rax, qword [rsp+0xc8+var_C8]
00000000000035e7         xor        edi, edi
00000000000035e9         mov        r8, qword [rax]
00000000000035ec         jmp        loc_3600

                     loc_35ee:
00000000000035ee         add        rsi, 0x1                                    ; CODE XREF=sub_31ea+1055
00000000000035f2         mov        edi, 0x1
00000000000035f7         cmp        r14, rsi
00000000000035fa         je         loc_3d67

                     loc_3600:
0000000000003600         movzx      eax, byte [rsi]                             ; CODE XREF=sub_31ea+1026
0000000000003603         test       byte [r8+rax*2+1], 0x20
0000000000003609         jne        loc_35ee

000000000000360b         test       dil, dil
000000000000360e         jne        loc_476c

                     loc_3614:
0000000000003614         sub        rdx, rsi                                    ; CODE XREF=sub_31ea+1015, sub_31ea+2948, sub_31ea+5513
0000000000003617         sub        rcx, rdx
000000000000361a         sub        rcx, qword [gap_size]                       ; gap_size
0000000000003621         test       rcx, rcx
0000000000003624         mov        r10, rcx
0000000000003627         jle        loc_3d73

000000000000362d         mov        rdx, qword [qword_221168]                   ; qword_221168
0000000000003634         lea        r11, qword [tail]                           ; tail
000000000000363b         cmp        r14, rdx
000000000000363e         mov        r9, rdx
0000000000003641         mov        qword [tail], rdx                           ; tail
0000000000003648         jbe        loc_367a

000000000000364a         mov        rax, qword [rsp+0xc8+var_C8]
000000000000364e         xor        ecx, ecx
0000000000003650         mov        rsi, qword [rax]
0000000000003653         jmp        loc_3667

                     loc_3655:
0000000000003655         add        r9, 0x1                                     ; CODE XREF=sub_31ea+1158
0000000000003659         mov        ecx, 0x1
000000000000365e         cmp        r14, r9
0000000000003661         je         loc_3d9c

                     loc_3667:
0000000000003667         movzx      eax, byte [r9]                              ; CODE XREF=sub_31ea+1129
000000000000366b         test       byte [rsi+rax*2+1], 0x20
0000000000003670         jne        loc_3655

0000000000003672         test       cl, cl
0000000000003674         jne        loc_3d9c

                     loc_367a:
000000000000367a         mov        rax, qword [tail]                           ; tail, CODE XREF=sub_31ea+1118, sub_31ea+3001
0000000000003681         mov        qword [qword_2211a8], r9                    ; qword_2211a8
0000000000003688         add        rax, r10
000000000000368b         cmp        rbp, r9
000000000000368e         jbe        loc_37c3

0000000000003694         cmp        r9, rax
0000000000003697         jae        loc_3daf

000000000000369d         mov        r15, r10
00000000000036a0         mov        r14, r9
00000000000036a3         jmp        loc_36f8

                     loc_36a5:
00000000000036a5         mov        rdx, rbp                                    ; CODE XREF=sub_31ea+1312
00000000000036a8         lea        rdi, qword [rax+8]
00000000000036ac         xor        r8d, r8d
00000000000036af         sub        rdx, r14
00000000000036b2         xor        ecx, ecx
00000000000036b4         mov        rsi, r14
00000000000036b7         mov        qword [rsp+0xc8+var_C0], r11
00000000000036bc         call       rpl_re_match                                ; rpl_re_match
00000000000036c1         cmp        rax, 0xfffffffffffffffe
00000000000036c5         je         loc_452a

00000000000036cb         cmp        rax, 0xffffffffffffffff
00000000000036cf         mov        edx, 0x1
00000000000036d4         mov        r11, qword [rsp+0xc8+var_C0]
00000000000036d9         cmove      rax, rdx
00000000000036dd         add        r14, rax

                     loc_36e0:
00000000000036e0         cmp        rbp, r14                                    ; CODE XREF=sub_31ea+1335
00000000000036e3         jbe        loc_43aa

                     loc_36e9:
00000000000036e9         mov        rax, qword [r11]                            ; CODE XREF=sub_31ea+1469
00000000000036ec         add        rax, r15
00000000000036ef         cmp        r14, rax
00000000000036f2         jae        loc_3da8

                     loc_36f8:
00000000000036f8         lea        rax, qword [word_regex]                     ; word_regex, CODE XREF=sub_31ea+1209
00000000000036ff         mov        qword [qword_2211a8], r14                   ; qword_2211a8
0000000000003706         cmp        qword [rax], 0x0
000000000000370a         jne        loc_36a5

000000000000370c         movzx      eax, byte [r14]
0000000000003710         lea        rsi, qword [word_fastmap]                   ; word_fastmap
0000000000003717         cmp        byte [rsi+rax], 0x0
000000000000371b         jne        loc_3788

000000000000371d         add        r14, 0x1
0000000000003721         jmp        loc_36e0

                     loc_3723:
0000000000003723         movzx      edi, byte [rsi]                             ; CODE XREF=sub_31ea+862
0000000000003726         lea        r11, qword [word_fastmap]                   ; word_fastmap
000000000000372d         cmp        byte [r11+rdi], 0x0
0000000000003732         jne        loc_3744

0000000000003734         add        rsi, 0x1
0000000000003738         mov        qword [r15], rsi
000000000000373b         lea        rax, qword [rsi+rcx]
000000000000373f         jmp        loc_3538

                     loc_3744:
0000000000003744         cmp        rsi, rdx                                    ; CODE XREF=sub_31ea+1352
0000000000003747         jae        loc_3538

000000000000374d         lea        rax, qword [rsi+1]
0000000000003751         jmp        loc_3771
0000000000003753         align      8

                     loc_3758:
0000000000003758         movzx      edi, byte [rsi]                             ; CODE XREF=sub_31ea+1421
000000000000375b         lea        r11, qword [word_fastmap]                   ; word_fastmap
0000000000003762         lea        rax, qword [rax+1]
0000000000003766         cmp        byte [r11+rdi], 0x0
000000000000376b         je         loc_471b

                     loc_3771:
0000000000003771         cmp        rdx, rax                                    ; CODE XREF=sub_31ea+1383
0000000000003774         mov        rsi, rax
0000000000003777         jne        loc_3758

0000000000003779         mov        qword [r15], rdx
000000000000377c         lea        rax, qword [rdx+rcx]
0000000000003780         jmp        loc_3538
0000000000003785         align      8

                     loc_3788:
0000000000003788         cmp        rbp, r14                                    ; CODE XREF=sub_31ea+1329
000000000000378b         ja         loc_37ad

000000000000378d         jmp        loc_43aa
0000000000003792         align      8

                     loc_3798:
0000000000003798         movzx      eax, byte [r14]                             ; CODE XREF=sub_31ea+1482
000000000000379c         lea        rsi, qword [word_fastmap]                   ; word_fastmap
00000000000037a3         cmp        byte [rsi+rax], 0x0
00000000000037a7         je         loc_36e9

                     loc_37ad:
00000000000037ad         add        r14, 0x1                                    ; CODE XREF=sub_31ea+1441
00000000000037b1         cmp        rbp, r14
00000000000037b4         jne        loc_3798

00000000000037b6         mov        rdx, qword [qword_221168]                   ; qword_221168
00000000000037bd         mov        r10, r15
00000000000037c0         mov        r9, rbp

                     loc_37c3:
00000000000037c3         mov        rcx, qword [tail]                           ; tail, CODE XREF=sub_31ea+1188, sub_31ea+4557
00000000000037ca         add        r10, rcx
00000000000037cd         cmp        r9, r10
00000000000037d0         jae        loc_37d9

00000000000037d2         mov        qword [qword_2211a8], r9                    ; qword_2211a8

                     loc_37d9:
00000000000037d9         mov        rax, qword [qword_2211a8]                   ; qword_2211a8, CODE XREF=sub_31ea+1510, sub_31ea+3020
00000000000037e0         cmp        rax, rcx
00000000000037e3         jbe        loc_3dcf

00000000000037e9         cmp        qword [truncation_string], 0x0              ; truncation_string
00000000000037f1         mov        byte [keyafter_truncation], 0x0             ; keyafter_truncation
00000000000037f8         mov        r8, qword [tail]                            ; tail
00000000000037ff         setne      cl
0000000000003802         cmp        rbp, rax
0000000000003805         seta       sil
0000000000003809         and        ecx, esi
000000000000380b         mov        rsi, qword [rsp+0xc8+var_C8]
000000000000380f         mov        byte [tail_truncation], cl                  ; tail_truncation
0000000000003815         mov        rdi, qword [rsi]
0000000000003818         xor        esi, esi
000000000000381a         jmp        loc_3832
000000000000381c         align      32

                     loc_3820:
0000000000003820         sub        rax, 0x1                                    ; CODE XREF=sub_31ea+1617
0000000000003824         mov        esi, 0x1
0000000000003829         cmp        r8, rax
000000000000382c         jae        loc_470f

                     loc_3832:
0000000000003832         movzx      ecx, byte [rax-1]                           ; CODE XREF=sub_31ea+1584
0000000000003836         test       byte [rdi+rcx*2+1], 0x20
000000000000383b         jne        loc_3820

000000000000383d         test       sil, sil
0000000000003840         jne        loc_470f

                     loc_3846:
0000000000003846         lea        rax, qword [keyafter]                       ; keyafter, CODE XREF=sub_31ea+2989, sub_31ea+3052, sub_31ea+5420
000000000000384d         mov        r14, qword [keyafter_max_width]             ; keyafter_max_width
0000000000003854         sub        rdx, qword [rax]
0000000000003857         sub        r14, rdx
000000000000385a         sub        r14, qword [gap_size]                       ; gap_size
0000000000003861         test       r14, r14
0000000000003864         jle        loc_3cbd

000000000000386a         mov        rax, qword [before]                         ; before
0000000000003871         cmp        r13, rax
0000000000003874         mov        qword [qword_221148], rax                   ; qword_221148
000000000000387b         jae        loc_38ad

000000000000387d         mov        rsi, qword [rsp+0xc8+var_C8]
0000000000003881         xor        ecx, ecx
0000000000003883         mov        rsi, qword [rsi]
0000000000003886         jmp        loc_389a

                     loc_3888:
0000000000003888         sub        rax, 0x1                                    ; CODE XREF=sub_31ea+1721
000000000000388c         mov        ecx, 0x1
0000000000003891         cmp        r13, rax
0000000000003894         je         loc_4727

                     loc_389a:
000000000000389a         movzx      edx, byte [rax-1]                           ; CODE XREF=sub_31ea+1692
000000000000389e         test       byte [rsi+rdx*2+1], 0x20
00000000000038a3         jne        loc_3888

00000000000038a5         test       cl, cl
00000000000038a7         jne        loc_4760

                     loc_38ad:
00000000000038ad         mov        rdx, qword [qword_221148]                   ; qword_221148, CODE XREF=sub_31ea+1681, sub_31ea+5444, sub_31ea+5501
00000000000038b4         lea        r13, qword [head]                           ; head
00000000000038bb         lea        rax, qword [rbx+r14]
00000000000038bf         mov        qword [head], rbx                           ; head
00000000000038c6         mov        rsi, rbx

                     loc_38c9:
00000000000038c9         cmp        rdx, rax                                    ; CODE XREF=sub_31ea+2710, sub_31ea+2718, sub_31ea+2766
00000000000038cc         jbe        loc_3922

                     loc_38ce:
00000000000038ce         lea        rdi, qword [word_regex]                     ; word_regex, CODE XREF=sub_31ea+1846
00000000000038d5         cmp        qword [rdi], 0x0
00000000000038d9         je         loc_3c64

00000000000038df         sub        rdx, rsi
00000000000038e2         xor        r8d, r8d
00000000000038e5         xor        ecx, ecx
00000000000038e7         add        rdi, 0x8
00000000000038eb         call       rpl_re_match                                ; rpl_re_match
00000000000038f0         cmp        rax, 0xfffffffffffffffe
00000000000038f4         je         loc_452a

00000000000038fa         cmp        rax, 0xffffffffffffffff
00000000000038fe         mov        edx, 0x1
0000000000003903         cmove      rax, rdx
0000000000003907         add        rax, qword [r13]
000000000000390b         mov        rdx, qword [qword_221148]                   ; qword_221148
0000000000003912         mov        rsi, rax
0000000000003915         mov        qword [r13], rax
0000000000003919         lea        rax, qword [rax+r14]
000000000000391d         cmp        rdx, rax
0000000000003920         ja         loc_38ce

                     loc_3922:
0000000000003922         cmp        rdx, rsi                                    ; CODE XREF=sub_31ea+1762
0000000000003925         mov        rbx, rsi
0000000000003928         jbe        loc_3cd3

000000000000392e         cmp        qword [truncation_string], 0x0              ; truncation_string
0000000000003936         mov        byte [before_truncation], 0x0               ; before_truncation
000000000000393d         setne      al
0000000000003940         cmp        qword [rsp+0xc8+var_B0], rsi
0000000000003945         setb       cl
0000000000003948         and        eax, ecx
000000000000394a         xor        ecx, ecx
000000000000394c         mov        byte [head_truncation], al                  ; head_truncation
0000000000003952         mov        rax, qword [rsp+0xc8+var_C8]
0000000000003956         mov        rsi, qword [rax]
0000000000003959         jmp        loc_3972
000000000000395b         align      32

                     loc_3960:
0000000000003960         add        rbx, 0x1                                    ; CODE XREF=sub_31ea+1936
0000000000003964         mov        ecx, 0x1
0000000000003969         cmp        rbx, rdx
000000000000396c         je         loc_4733

                     loc_3972:
0000000000003972         movzx      eax, byte [rbx]                             ; CODE XREF=sub_31ea+1903
0000000000003975         test       byte [rsi+rax*2+1], 0x20
000000000000397a         jne        loc_3960

000000000000397c         test       cl, cl
000000000000397e         jne        loc_4733

                     loc_3984:
0000000000003984         movzx      edx, byte [auto_reference]                  ; auto_reference, CODE XREF=sub_31ea+2800, sub_31ea+5456
000000000000398b         test       dl, dl
000000000000398d         je         loc_3cdf

0000000000003993         movsxd     rdx, dword [r12+0x28]
0000000000003998         mov        rsi, qword [input_file_name]                ; input_file_name
000000000000399f         lea        rdi, qword [aWrittenBySSAnd+27]             ; 0x1c27b
00000000000039a6         mov        rsi, qword [rsi+rdx*8]
00000000000039aa         lea        rcx, qword [rdx*8]
00000000000039b2         test       rsi, rsi
00000000000039b5         cmove      rsi, rdi
00000000000039b9         mov        rdi, qword [r12+0x20]
00000000000039be         test       edx, edx
00000000000039c0         lea        rbx, qword [rdi+1]
00000000000039c4         jle        loc_39d2

00000000000039c6         mov        rax, qword [file_line_count]                ; file_line_count
00000000000039cd         sub        rbx, qword [rax+rcx-8]

                     loc_39d2:
00000000000039d2         mov        rdi, qword [reference]                      ; argument "__dest" for method j_stpcpy, reference, CODE XREF=sub_31ea+2010
00000000000039d9         call       j_stpcpy                                    ; stpcpy
00000000000039de         lea        rcx, qword [aExtraOperandS+17]              ; 0x1b89f
00000000000039e5         mov        rbp, rax
00000000000039e8         mov        rdi, rax
00000000000039eb         mov        r8, rbx
00000000000039ee         or         rdx, 0xffffffffffffffff
00000000000039f2         mov        esi, 0x1
00000000000039f7         xor        eax, eax
00000000000039f9         call       j___sprintf_chk                             ; __sprintf_chk
00000000000039fe         cdqe
0000000000003a00         add        rbp, rax
0000000000003a03         mov        qword [qword_221128], rbp                   ; qword_221128

                     loc_3a0a:
0000000000003a0a         mov        eax, dword [output_format]                  ; output_format, CODE XREF=sub_31ea+2814, sub_31ea+2852, sub_31ea+2894, sub_31ea+2907, sub_31ea+5489
0000000000003a10         cmp        eax, 0x2
0000000000003a13         je         loc_3ddb

0000000000003a19         jb         loc_3ff6

0000000000003a1f         cmp        eax, 0x3
0000000000003a22         jne        loc_3c1d

0000000000003a28         mov        rdx, qword [macro_name]                     ; macro_name
0000000000003a2f         lea        rsi, qword [aS+6]                           ; 0x1b8aa
0000000000003a36         mov        edi, 0x1
0000000000003a3b         xor        eax, eax
0000000000003a3d         call       j___printf_chk                              ; __printf_chk
0000000000003a42         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003a49         mov        rax, qword [rdi+0x28]
0000000000003a4d         cmp        rax, qword [rdi+0x30]
0000000000003a51         jae        loc_4672

0000000000003a57         lea        rdx, qword [rax+1]
0000000000003a5b         mov        qword [rdi+0x28], rdx
0000000000003a5f         mov        byte [rax], 0x7b

                     loc_3a62:
0000000000003a62         mov        rdi, qword [tail]                           ; argument #1 for method print_field, tail, CODE XREF=sub_31ea+5266
0000000000003a69         mov        rsi, qword [qword_2211a8]                   ; argument #2 for method print_field, qword_2211a8
0000000000003a70         call       print_field                                 ; print_field
0000000000003a75         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5
0000000000003a7c         lea        rdi, qword [aS+11]                          ; argument "__ptr" for method j_fwrite_unlocked, 0x1b8af
0000000000003a83         mov        edx, 0x2                                    ; argument "__n" for method j_fwrite_unlocked
0000000000003a88         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000003a8d         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000003a92         mov        rdi, qword [before]                         ; argument #1 for method print_field, before
0000000000003a99         mov        rsi, qword [qword_221188]                   ; argument #2 for method print_field, qword_221188
0000000000003aa0         call       print_field                                 ; print_field
0000000000003aa5         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5
0000000000003aac         lea        rdi, qword [aS+11]                          ; argument "__ptr" for method j_fwrite_unlocked, 0x1b8af
0000000000003ab3         mov        edx, 0x2                                    ; argument "__n" for method j_fwrite_unlocked
0000000000003ab8         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000003abd         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000003ac2         lea        rax, qword [keyafter]                       ; keyafter
0000000000003ac9         mov        rbp, qword [qword_221168]                   ; qword_221168
0000000000003ad0         mov        rbx, qword [rax]
0000000000003ad3         lea        rax, qword [word_regex]                     ; word_regex
0000000000003ada         cmp        qword [rax], 0x0
0000000000003ade         mov        r13, rbx
0000000000003ae1         je         loc_436e

0000000000003ae7         mov        rdx, rbp
0000000000003aea         lea        rdi, qword [rax+8]
0000000000003aee         xor        r8d, r8d
0000000000003af1         sub        rdx, rbx
0000000000003af4         xor        ecx, ecx
0000000000003af6         mov        rsi, rbx
0000000000003af9         call       rpl_re_match                                ; rpl_re_match
0000000000003afe         cmp        rax, 0xfffffffffffffffe
0000000000003b02         je         loc_452a

0000000000003b08         cmp        rax, 0xffffffffffffffff
0000000000003b0c         je         loc_46db

                     loc_3b12:
0000000000003b12         add        rbx, rax                                    ; CODE XREF=sub_31ea+5366

                     loc_3b15:
0000000000003b15         mov        rdi, r13                                    ; argument #1 for method print_field, CODE XREF=sub_31ea+4504, sub_31ea+4512, sub_31ea+4532
0000000000003b18         mov        rsi, rbx                                    ; argument #2 for method print_field
0000000000003b1b         call       print_field                                 ; print_field
0000000000003b20         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5
0000000000003b27         lea        rdi, qword [aS+11]                          ; argument "__ptr" for method j_fwrite_unlocked, 0x1b8af
0000000000003b2e         mov        edx, 0x2                                    ; argument "__n" for method j_fwrite_unlocked
0000000000003b33         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000003b38         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000003b3d         mov        rdi, rbx                                    ; argument #1 for method print_field
0000000000003b40         mov        rsi, rbp                                    ; argument #2 for method print_field
0000000000003b43         call       print_field                                 ; print_field
0000000000003b48         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5
0000000000003b4f         lea        rdi, qword [aS+11]                          ; argument "__ptr" for method j_fwrite_unlocked, 0x1b8af
0000000000003b56         mov        edx, 0x2                                    ; argument "__n" for method j_fwrite_unlocked
0000000000003b5b         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000003b60         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000003b65         mov        rdi, qword [head]                           ; argument #1 for method print_field, head
0000000000003b6c         mov        rsi, qword [qword_221148]                   ; argument #2 for method print_field, qword_221148
0000000000003b73         call       print_field                                 ; print_field
0000000000003b78         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003b7f         mov        rax, qword [rdi+0x28]
0000000000003b83         cmp        rax, qword [rdi+0x30]
0000000000003b87         jae        loc_46cc

0000000000003b8d         lea        rdx, qword [rax+1]
0000000000003b91         mov        qword [rdi+0x28], rdx
0000000000003b95         mov        byte [rax], 0x7d

                     loc_3b98:
0000000000003b98         cmp        byte [auto_reference], 0x0                  ; auto_reference, CODE XREF=sub_31ea+5356
0000000000003b9f         jne        loc_3baa

0000000000003ba1         cmp        byte [input_reference], 0x0                 ; input_reference
0000000000003ba8         je         loc_3bfd

                     loc_3baa:
0000000000003baa         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=sub_31ea+2485
0000000000003bb1         mov        rax, qword [rdi+0x28]
0000000000003bb5         cmp        rax, qword [rdi+0x30]
0000000000003bb9         jae        loc_4681

0000000000003bbf         lea        rdx, qword [rax+1]
0000000000003bc3         mov        qword [rdi+0x28], rdx
0000000000003bc7         mov        byte [rax], 0x7b

                     loc_3bca:
0000000000003bca         mov        rdi, qword [reference]                      ; argument #1 for method print_field, reference, CODE XREF=sub_31ea+5281
0000000000003bd1         mov        rsi, qword [qword_221128]                   ; argument #2 for method print_field, qword_221128
0000000000003bd8         call       print_field                                 ; print_field
0000000000003bdd         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003be4         mov        rax, qword [rdi+0x28]
0000000000003be8         cmp        rax, qword [rdi+0x30]
0000000000003bec         jae        loc_4690

0000000000003bf2         lea        rdx, qword [rax+1]
0000000000003bf6         mov        qword [rdi+0x28], rdx
0000000000003bfa         mov        byte [rax], 0x7d

                     loc_3bfd:
0000000000003bfd         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=sub_31ea+2494, sub_31ea+3505, sub_31ea+3591, sub_31ea+3930, sub_31ea+4022, sub_31ea+4059, sub_31ea+4141, sub_31ea+5296, sub_31ea+5311, sub_31ea+5631
0000000000003c04         mov        rax, qword [rdi+0x28]
0000000000003c08         cmp        rax, qword [rdi+0x30]
0000000000003c0c         jae        loc_4806

0000000000003c12         lea        rdx, qword [rax+1]
0000000000003c16         mov        qword [rdi+0x28], rdx
0000000000003c1a         mov        byte [rax], 0xa

                     loc_3c1d:
0000000000003c1d         add        qword [rsp+0xc8+var_B8], 0x1                ; CODE XREF=sub_31ea+2104, sub_31ea+5670
0000000000003c23         add        r12, 0x30
0000000000003c27         mov        rax, qword [rsp+0xc8+var_B8]
0000000000003c2c         cmp        rax, qword [number_of_occurs]               ; number_of_occurs
0000000000003c33         jl         loc_2da1

                     loc_3c39:
0000000000003c39         xor        eax, eax                                    ; CODE XREF=main+3074
0000000000003c3b         mov        rsi, qword [rsp+0xc8+var_40]
0000000000003c43         xor        rsi, qword [fs:0x28]
0000000000003c4c         jne        loc_473f

0000000000003c52         add        rsp, 0x98
0000000000003c59         pop        rbx
0000000000003c5a         pop        rbp
0000000000003c5b         pop        r12
0000000000003c5d         pop        r13
0000000000003c5f         pop        r14
0000000000003c61         pop        r15
0000000000003c63         ret
                        ; endp

                     loc_3c64:
0000000000003c64         movzx      ecx, byte [rsi]                             ; CODE XREF=sub_31ea+1775
0000000000003c67         lea        rdi, qword [word_fastmap]                   ; word_fastmap
0000000000003c6e         cmp        byte [rdi+rcx], 0x0
0000000000003c72         jne        loc_3c85

0000000000003c74         add        rsi, 0x1

                     loc_3c78:
0000000000003c78         mov        qword [r13], rsi                            ; CODE XREF=sub_31ea+2748
0000000000003c7c         lea        rax, qword [rsi+r14]
0000000000003c80         jmp        loc_38c9

                     loc_3c85:
0000000000003c85         cmp        rdx, rsi                                    ; CODE XREF=sub_31ea+2696
0000000000003c88         jbe        loc_38c9

0000000000003c8e         lea        rax, qword [rsi+1]
0000000000003c92         jmp        loc_3ca8

                     loc_3c94:
0000000000003c94         movzx      ecx, byte [rsi]                             ; CODE XREF=sub_31ea+2756
0000000000003c97         lea        rdi, qword [word_fastmap]                   ; word_fastmap
0000000000003c9e         lea        rax, qword [rax+1]
0000000000003ca2         cmp        byte [rdi+rcx], 0x0
0000000000003ca6         je         loc_3c78

                     loc_3ca8:
0000000000003ca8         cmp        rdx, rax                                    ; CODE XREF=sub_31ea+2728
0000000000003cab         mov        rsi, rax
0000000000003cae         jne        loc_3c94

0000000000003cb0         mov        qword [r13], rdx
0000000000003cb4         lea        rax, qword [rdx+r14]
0000000000003cb8         jmp        loc_38c9

                     loc_3cbd:
0000000000003cbd         mov        qword [head], 0x0                           ; head, CODE XREF=sub_31ea+1658
0000000000003cc8         mov        qword [qword_221148], 0x0                   ; qword_221148

                     loc_3cd3:
0000000000003cd3         mov        byte [head_truncation], 0x0                 ; head_truncation, CODE XREF=sub_31ea+1854
0000000000003cda         jmp        loc_3984

                     loc_3cdf:
0000000000003cdf         movzx      ecx, byte [input_reference]                 ; input_reference, CODE XREF=sub_31ea+1955
0000000000003ce6         test       cl, cl
0000000000003ce8         je         loc_3a0a

0000000000003cee         lea        rsi, qword [keyafter]                       ; keyafter
0000000000003cf5         mov        rax, qword [r12+0x20]
0000000000003cfa         add        rax, qword [rsi]
0000000000003cfd         cmp        rbp, rax
0000000000003d00         mov        qword [reference], rax                      ; reference
0000000000003d07         mov        qword [qword_221128], rax                   ; qword_221128
0000000000003d0e         jbe        loc_3a0a

0000000000003d14         mov        rsi, qword [rsp+0xc8+var_C8]
0000000000003d18         mov        rsi, qword [rsi]
0000000000003d1b         jmp        loc_3d2c

                     loc_3d1d:
0000000000003d1d         add        rax, 0x1                                    ; CODE XREF=sub_31ea+2890
0000000000003d21         mov        edx, ecx
0000000000003d23         cmp        rbp, rax
0000000000003d26         je         loc_4754

                     loc_3d2c:
0000000000003d2c         movzx      edi, byte [rax]                             ; CODE XREF=sub_31ea+2865
0000000000003d2f         test       byte [rsi+rdi*2+1], 0x20
0000000000003d34         je         loc_3d1d

0000000000003d36         test       dl, dl
0000000000003d38         je         loc_3a0a

0000000000003d3e         mov        qword [qword_221128], rax                   ; qword_221128
0000000000003d45         jmp        loc_3a0a

                     loc_3d4a:
0000000000003d4a         lea        rbx, qword [rsi+rcx]                        ; CODE XREF=sub_31ea+671
0000000000003d4e         jmp        loc_34cf

                     loc_3d53:
0000000000003d53         mov        rcx, qword [r12+0x10]                       ; CODE XREF=main+3284

                     loc_3d58:
0000000000003d58         lea        rax, qword [keyafter]                       ; keyafter, CODE XREF=main+3187
0000000000003d5f         mov        rsi, qword [rax]
0000000000003d62         jmp        loc_340e

                     loc_3d67:
0000000000003d67         mov        qword [before], r14                         ; before, CODE XREF=sub_31ea+1040
0000000000003d6e         jmp        loc_3614

                     loc_3d73:
0000000000003d73         mov        qword [tail], 0x0                           ; tail, CODE XREF=sub_31ea+1085
0000000000003d7e         mov        qword [qword_2211a8], 0x0                   ; qword_2211a8
0000000000003d89         mov        byte [tail_truncation], 0x0                 ; tail_truncation
0000000000003d90         mov        rdx, qword [qword_221168]                   ; qword_221168
0000000000003d97         jmp        loc_3846

                     loc_3d9c:
0000000000003d9c         mov        qword [tail], r9                            ; tail, CODE XREF=sub_31ea+1143, sub_31ea+1162
0000000000003da3         jmp        loc_367a

                     loc_3da8:
0000000000003da8         mov        rdx, qword [qword_221168]                   ; qword_221168, CODE XREF=sub_31ea+1288

                     loc_3daf:
0000000000003daf         mov        rcx, qword [tail]                           ; tail, CODE XREF=sub_31ea+1197
0000000000003db6         jmp        loc_37d9

                     loc_3dbb:
0000000000003dbb         mov        byte [before_truncation], 0x0               ; before_truncation, CODE XREF=sub_31ea+948
0000000000003dc2         jmp        loc_35de

                     loc_3dc7:
0000000000003dc7         mov        rax, r13                                    ; CODE XREF=sub_31ea+982
0000000000003dca         jmp        loc_35d2

                     loc_3dcf:
0000000000003dcf         mov        byte [tail_truncation], 0x0                 ; tail_truncation, CODE XREF=sub_31ea+1529
0000000000003dd6         jmp        loc_3846

                     loc_3ddb:
0000000000003ddb         mov        rdx, qword [macro_name]                     ; macro_name, CODE XREF=sub_31ea+2089
0000000000003de2         lea        rsi, qword [aS]                             ; ".%s \\\""
0000000000003de9         mov        edi, 0x1
0000000000003dee         xor        eax, eax
0000000000003df0         call       j___printf_chk                              ; __printf_chk
0000000000003df5         mov        rdi, qword [tail]                           ; argument #1 for method print_field, tail
0000000000003dfc         mov        rsi, qword [qword_2211a8]                   ; argument #2 for method print_field, qword_2211a8
0000000000003e03         call       print_field                                 ; print_field
0000000000003e08         cmp        byte [tail_truncation], 0x0                 ; tail_truncation
0000000000003e0f         je         loc_3e24

0000000000003e11         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5
0000000000003e18         mov        rdi, qword [truncation_string]              ; argument "__s" for method j_fputs_unlocked, truncation_string
0000000000003e1f         call       j_fputs_unlocked                            ; fputs_unlocked

                     loc_3e24:
0000000000003e24         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=sub_31ea+3109
0000000000003e2b         mov        rax, qword [rdi+0x28]
0000000000003e2f         cmp        rax, qword [rdi+0x30]
0000000000003e33         jae        loc_46f4

0000000000003e39         lea        rdx, qword [rax+1]
0000000000003e3d         mov        qword [rdi+0x28], rdx
0000000000003e41         mov        byte [rax], 0x22

                     loc_3e44:
0000000000003e44         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=sub_31ea+5396
0000000000003e4b         lea        rdi, qword [aS+3]                           ; argument "__ptr" for method j_fwrite_unlocked, 0x1b8a7
0000000000003e52         mov        edx, 0x2                                    ; argument "__n" for method j_fwrite_unlocked
0000000000003e57         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000003e5c         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000003e61         cmp        byte [before_truncation], 0x0               ; before_truncation
0000000000003e68         je         loc_3e7d

0000000000003e6a         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5
0000000000003e71         mov        rdi, qword [truncation_string]              ; argument "__s" for method j_fputs_unlocked, truncation_string
0000000000003e78         call       j_fputs_unlocked                            ; fputs_unlocked

                     loc_3e7d:
0000000000003e7d         mov        rdi, qword [before]                         ; argument #1 for method print_field, before, CODE XREF=sub_31ea+3198
0000000000003e84         mov        rsi, qword [qword_221188]                   ; argument #2 for method print_field, qword_221188
0000000000003e8b         call       print_field                                 ; print_field
0000000000003e90         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003e97         mov        rax, qword [rdi+0x28]
0000000000003e9b         cmp        rax, qword [rdi+0x30]
0000000000003e9f         jae        loc_46e5

0000000000003ea5         lea        rdx, qword [rax+1]
0000000000003ea9         mov        qword [rdi+0x28], rdx
0000000000003ead         mov        byte [rax], 0x22

                     loc_3eb0:
0000000000003eb0         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=sub_31ea+5381
0000000000003eb7         lea        rdi, qword [aS+3]                           ; argument "__ptr" for method j_fwrite_unlocked, 0x1b8a7
0000000000003ebe         mov        edx, 0x2                                    ; argument "__n" for method j_fwrite_unlocked
0000000000003ec3         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000003ec8         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000003ecd         lea        rax, qword [keyafter]                       ; keyafter
0000000000003ed4         mov        rsi, qword [qword_221168]                   ; argument #2 for method print_field, qword_221168
0000000000003edb         mov        rdi, qword [rax]                            ; argument #1 for method print_field
0000000000003ede         call       print_field                                 ; print_field
0000000000003ee3         cmp        byte [keyafter_truncation], 0x0             ; keyafter_truncation
0000000000003eea         je         loc_3eff

0000000000003eec         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5
0000000000003ef3         mov        rdi, qword [truncation_string]              ; argument "__s" for method j_fputs_unlocked, truncation_string
0000000000003efa         call       j_fputs_unlocked                            ; fputs_unlocked

                     loc_3eff:
0000000000003eff         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=sub_31ea+3328
0000000000003f06         mov        rax, qword [rdi+0x28]
0000000000003f0a         cmp        rax, qword [rdi+0x30]
0000000000003f0e         jae        loc_46bd

0000000000003f14         lea        rdx, qword [rax+1]
0000000000003f18         mov        qword [rdi+0x28], rdx
0000000000003f1c         mov        byte [rax], 0x22

                     loc_3f1f:
0000000000003f1f         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=sub_31ea+5341
0000000000003f26         lea        rdi, qword [aS+3]                           ; argument "__ptr" for method j_fwrite_unlocked, 0x1b8a7
0000000000003f2d         mov        edx, 0x2                                    ; argument "__n" for method j_fwrite_unlocked
0000000000003f32         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000003f37         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000003f3c         cmp        byte [head_truncation], 0x0                 ; head_truncation
0000000000003f43         je         loc_3f58

0000000000003f45         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5
0000000000003f4c         mov        rdi, qword [truncation_string]              ; argument "__s" for method j_fputs_unlocked, truncation_string
0000000000003f53         call       j_fputs_unlocked                            ; fputs_unlocked

                     loc_3f58:
0000000000003f58         mov        rdi, qword [head]                           ; argument #1 for method print_field, head, CODE XREF=sub_31ea+3417
0000000000003f5f         mov        rsi, qword [qword_221148]                   ; argument #2 for method print_field, qword_221148
0000000000003f66         call       print_field                                 ; print_field
0000000000003f6b         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003f72         mov        rax, qword [rdi+0x28]
0000000000003f76         cmp        rax, qword [rdi+0x30]
0000000000003f7a         jae        loc_46ae

0000000000003f80         lea        rdx, qword [rax+1]
0000000000003f84         mov        qword [rdi+0x28], rdx
0000000000003f88         mov        byte [rax], 0x22

                     loc_3f8b:
0000000000003f8b         cmp        byte [auto_reference], 0x0                  ; auto_reference, CODE XREF=sub_31ea+5326
0000000000003f92         jne        loc_3fa1

0000000000003f94         cmp        byte [input_reference], 0x0                 ; input_reference
0000000000003f9b         je         loc_3bfd

                     loc_3fa1:
0000000000003fa1         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=sub_31ea+3496
0000000000003fa8         lea        rdi, qword [aS+3]                           ; argument "__ptr" for method j_fwrite_unlocked, 0x1b8a7
0000000000003faf         mov        edx, 0x2                                    ; argument "__n" for method j_fwrite_unlocked
0000000000003fb4         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000003fb9         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000003fbe         mov        rdi, qword [reference]                      ; argument #1 for method print_field, reference
0000000000003fc5         mov        rsi, qword [qword_221128]                   ; argument #2 for method print_field, qword_221128
0000000000003fcc         call       print_field                                 ; print_field
0000000000003fd1         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003fd8         mov        rax, qword [rdi+0x28]
0000000000003fdc         cmp        rax, qword [rdi+0x30]
0000000000003fe0         jae        loc_469f

0000000000003fe6         lea        rdx, qword [rax+1]
0000000000003fea         mov        qword [rdi+0x28], rdx
0000000000003fee         mov        byte [rax], 0x22
0000000000003ff1         jmp        loc_3bfd

                     loc_3ff6:
0000000000003ff6         cmp        byte [right_reference], 0x0                 ; right_reference, CODE XREF=sub_31ea+2095
0000000000003ffd         jne        loc_4067

0000000000003fff         cmp        byte [auto_reference], 0x0                  ; auto_reference
0000000000004006         mov        rdi, qword [reference]                      ; reference
000000000000400d         mov        rsi, qword [qword_221128]                   ; qword_221128
0000000000004014         je         loc_421c

000000000000401a         call       print_field                                 ; print_field
000000000000401f         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004026         mov        rax, qword [rdi+0x28]
000000000000402a         cmp        rax, qword [rdi+0x30]
000000000000402e         jae        loc_47b5

0000000000004034         lea        rdx, qword [rax+1]
0000000000004038         mov        qword [rdi+0x28], rdx
000000000000403c         mov        byte [rax], 0x3a

                     loc_403f:
000000000000403f         mov        rdi, qword [gap_size]                       ; gap_size, CODE XREF=sub_31ea+5589
0000000000004046         mov        rax, qword [qword_221128]                   ; qword_221128
000000000000404d         add        rdi, qword [reference_max_width]            ; reference_max_width
0000000000004054         sub        rax, qword [reference]                      ; reference
000000000000405b         sub        rdi, rax
000000000000405e         sub        rdi, 0x1                                    ; argument #1 for method print_spaces
0000000000004062         call       print_spaces                                ; print_spaces

                     loc_4067:
0000000000004067         mov        rdi, qword [tail]                           ; tail, CODE XREF=sub_31ea+3603, sub_31ea+4187
000000000000406e         cmp        rdi, qword [qword_2211a8]                   ; qword_2211a8
0000000000004075         jb         loc_42f3

000000000000407b         mov        rdi, qword [half_line_width]                ; half_line_width
0000000000004082         mov        rax, qword [qword_221188]                   ; qword_221188
0000000000004089         sub        rdi, qword [gap_size]                       ; gap_size
0000000000004090         sub        rax, qword [before]                         ; before
0000000000004097         sub        rdi, rax
000000000000409a         xor        eax, eax
000000000000409c         cmp        byte [before_truncation], 0x0               ; before_truncation
00000000000040a3         je         loc_40ac

                     loc_40a5:
00000000000040a5         mov        rax, qword [truncation_string_length]       ; truncation_string_length, CODE XREF=sub_31ea+4470

                     loc_40ac:
00000000000040ac         sub        rdi, rax                                    ; argument #1 for method print_spaces, CODE XREF=sub_31ea+3769, sub_31ea+4464
00000000000040af         call       print_spaces                                ; print_spaces
00000000000040b4         cmp        byte [before_truncation], 0x0               ; before_truncation
00000000000040bb         je         loc_40d0

00000000000040bd         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5
00000000000040c4         mov        rdi, qword [truncation_string]              ; argument "__s" for method j_fputs_unlocked, truncation_string
00000000000040cb         call       j_fputs_unlocked                            ; fputs_unlocked

                     loc_40d0:
00000000000040d0         mov        rsi, qword [qword_221188]                   ; argument #2 for method print_field, qword_221188, CODE XREF=sub_31ea+3793
00000000000040d7         mov        rdi, qword [before]                         ; argument #1 for method print_field, before
00000000000040de         call       print_field                                 ; print_field
00000000000040e3         mov        rdi, qword [gap_size]                       ; argument #1 for method print_spaces, gap_size
00000000000040ea         call       print_spaces                                ; print_spaces
00000000000040ef         lea        rax, qword [keyafter]                       ; keyafter
00000000000040f6         mov        rsi, qword [qword_221168]                   ; argument #2 for method print_field, qword_221168
00000000000040fd         mov        rdi, qword [rax]                            ; argument #1 for method print_field
0000000000004100         call       print_field                                 ; print_field
0000000000004105         cmp        byte [keyafter_truncation], 0x0             ; keyafter_truncation
000000000000410c         jne        loc_424a

0000000000004112         mov        rcx, qword [head]                           ; head
0000000000004119         mov        rdx, qword [qword_221148]                   ; qword_221148
0000000000004120         lea        r13, qword [head]                           ; head
0000000000004127         cmp        rcx, rdx
000000000000412a         jb         loc_4790

                     loc_4130:
0000000000004130         cmp        byte [auto_reference], 0x0                  ; auto_reference, CODE XREF=sub_31ea+4235
0000000000004137         jne        loc_420a

000000000000413d         cmp        byte [input_reference], 0x0                 ; input_reference
0000000000004144         je         loc_3bfd

000000000000414a         cmp        byte [right_reference], 0x0                 ; right_reference
0000000000004151         je         loc_47dc

                     loc_4157:
0000000000004157         lea        rsi, qword [keyafter]                       ; keyafter, CODE XREF=sub_31ea+4135
000000000000415e         mov        rax, qword [qword_221168]                   ; qword_221168
0000000000004165         mov        rdi, qword [half_line_width]                ; half_line_width
000000000000416c         sub        rax, qword [rsi]
000000000000416f         sub        rdi, rax
0000000000004172         xor        eax, eax
0000000000004174         cmp        byte [keyafter_truncation], 0x0             ; keyafter_truncation
000000000000417b         je         loc_4184

000000000000417d         mov        rax, qword [truncation_string_length]       ; truncation_string_length

                     loc_4184:
0000000000004184         sub        rdi, rax                                    ; argument #1 for method print_spaces, CODE XREF=sub_31ea+3985
0000000000004187         call       print_spaces                                ; print_spaces

                     loc_418c:
000000000000418c         cmp        byte [auto_reference], 0x0                  ; auto_reference, CODE XREF=sub_31ea+4356
0000000000004193         je         loc_47dc

                     loc_4199:
0000000000004199         cmp        byte [right_reference], 0x0                 ; right_reference, CODE XREF=sub_31ea+5625
00000000000041a0         je         loc_3bfd

00000000000041a6         mov        rdi, qword [gap_size]                       ; argument #1 for method print_spaces, gap_size
00000000000041ad         call       print_spaces                                ; print_spaces
00000000000041b2         mov        rdi, qword [reference]                      ; argument #1 for method print_field, reference
00000000000041b9         mov        rsi, qword [qword_221128]                   ; argument #2 for method print_field, qword_221128
00000000000041c0         call       print_field                                 ; print_field
00000000000041c5         jmp        loc_3bfd

                     loc_41ca:
00000000000041ca         movzx      eax, byte [rbx]                             ; CODE XREF=sub_31ea+694
00000000000041cd         lea        rdi, qword [word_fastmap]                   ; word_fastmap
00000000000041d4         cmp        byte [rdi+rax], 0x0
00000000000041d8         je         loc_4365

00000000000041de         cmp        rbx, rsi
00000000000041e1         jb         loc_41fc

00000000000041e3         jmp        loc_34cf

                     loc_41e8:
00000000000041e8         movzx      eax, byte [rbx]                             ; CODE XREF=sub_31ea+4121
00000000000041eb         lea        rdi, qword [word_fastmap]                   ; word_fastmap
00000000000041f2         cmp        byte [rdi+rax], 0x0
00000000000041f6         je         loc_34cf

                     loc_41fc:
00000000000041fc         add        rbx, 0x1                                    ; CODE XREF=sub_31ea+4087
0000000000004200         cmp        rbx, rsi
0000000000004203         jne        loc_41e8

0000000000004205         jmp        loc_34cf

                     loc_420a:
000000000000420a         cmp        byte [right_reference], 0x0                 ; right_reference, CODE XREF=sub_31ea+3917
0000000000004211         jne        loc_4157

0000000000004217         jmp        loc_3bfd

                     loc_421c:
000000000000421c         call       print_field                                 ; print_field, CODE XREF=sub_31ea+3626
0000000000004221         mov        rdi, qword [gap_size]                       ; gap_size
0000000000004228         mov        rax, qword [qword_221128]                   ; qword_221128
000000000000422f         add        rdi, qword [reference_max_width]            ; reference_max_width
0000000000004236         sub        rax, qword [reference]                      ; reference
000000000000423d         sub        rdi, rax                                    ; argument #1 for method print_spaces
0000000000004240         call       print_spaces                                ; print_spaces
0000000000004245         jmp        loc_4067

                     loc_424a:
000000000000424a         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=sub_31ea+3874
0000000000004251         mov        rdi, qword [truncation_string]              ; argument "__s" for method j_fputs_unlocked, truncation_string
0000000000004258         lea        r13, qword [head]                           ; head
000000000000425f         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004264         mov        rcx, qword [head]                           ; head
000000000000426b         mov        rdx, qword [qword_221148]                   ; qword_221148
0000000000004272         cmp        rcx, rdx
0000000000004275         jae        loc_4130

000000000000427b         lea        rsi, qword [keyafter]                       ; keyafter
0000000000004282         mov        rax, qword [qword_221168]                   ; qword_221168
0000000000004289         sub        rax, qword [rsi]
000000000000428c         mov        rsi, qword [half_line_width]                ; half_line_width
0000000000004293         sub        rsi, rax
0000000000004296         mov        rax, rsi
0000000000004299         xor        esi, esi
000000000000429b         cmp        byte [keyafter_truncation], 0x0             ; keyafter_truncation
00000000000042a2         je         loc_42ab

00000000000042a4         mov        rsi, qword [truncation_string_length]       ; truncation_string_length

                     loc_42ab:
00000000000042ab         sub        rax, rsi                                    ; CODE XREF=sub_31ea+4280, sub_31ea+5574
00000000000042ae         sub        rdx, rcx
00000000000042b1         mov        rdi, rax
00000000000042b4         xor        eax, eax
00000000000042b6         sub        rdi, rdx
00000000000042b9         cmp        byte [head_truncation], 0x0                 ; head_truncation
00000000000042c0         je         loc_42c9

00000000000042c2         mov        rax, qword [truncation_string_length]       ; truncation_string_length

                     loc_42c9:
00000000000042c9         sub        rdi, rax                                    ; argument #1 for method print_spaces, CODE XREF=sub_31ea+4310
00000000000042cc         call       print_spaces                                ; print_spaces
00000000000042d1         cmp        byte [head_truncation], 0x0                 ; head_truncation
00000000000042d8         jne        loc_47c4

                     loc_42de:
00000000000042de         mov        rdi, qword [r13]                            ; argument #1 for method print_field, CODE XREF=sub_31ea+5613
00000000000042e2         mov        rsi, qword [qword_221148]                   ; argument #2 for method print_field, qword_221148
00000000000042e9         call       print_field                                 ; print_field
00000000000042ee         jmp        loc_418c

                     loc_42f3:
00000000000042f3         mov        rsi, qword [qword_2211a8]                   ; argument #2 for method print_field, qword_2211a8, CODE XREF=sub_31ea+3723
00000000000042fa         call       print_field                                 ; print_field
00000000000042ff         cmp        byte [tail_truncation], 0x0                 ; tail_truncation
0000000000004306         jne        loc_4778

                     loc_430c:
000000000000430c         mov        rdi, qword [half_line_width]                ; half_line_width, CODE XREF=sub_31ea+5537
0000000000004313         mov        rax, qword [qword_221188]                   ; qword_221188
000000000000431a         sub        rdi, qword [gap_size]                       ; gap_size
0000000000004321         sub        rax, qword [before]                         ; before
0000000000004328         sub        rdi, rax
000000000000432b         xor        eax, eax
000000000000432d         cmp        byte [before_truncation], 0x0               ; before_truncation
0000000000004334         je         loc_433d

0000000000004336         mov        rax, qword [truncation_string_length]       ; truncation_string_length

                     loc_433d:
000000000000433d         sub        rdi, rax                                    ; CODE XREF=sub_31ea+4426
0000000000004340         mov        rax, qword [qword_2211a8]                   ; qword_2211a8
0000000000004347         sub        rax, qword [tail]                           ; tail
000000000000434e         sub        rdi, rax
0000000000004351         xor        eax, eax
0000000000004353         cmp        byte [tail_truncation], 0x0                 ; tail_truncation
000000000000435a         je         loc_40ac

0000000000004360         jmp        loc_40a5

                     loc_4365:
0000000000004365         add        rbx, 0x1                                    ; CODE XREF=sub_31ea+4078
0000000000004369         jmp        loc_34cf

                     loc_436e:
000000000000436e         movzx      eax, byte [rbx]                             ; CODE XREF=sub_31ea+2295
0000000000004371         lea        rsi, qword [word_fastmap]                   ; word_fastmap
0000000000004378         cmp        byte [rsi+rax], 0x0
000000000000437c         jne        loc_4387

000000000000437e         add        rbx, 0x1
0000000000004382         jmp        loc_3b15

                     loc_4387:
0000000000004387         cmp        rbp, rbx                                    ; CODE XREF=sub_31ea+4498, sub_31ea+4542
000000000000438a         jbe        loc_3b15

0000000000004390         movzx      eax, byte [rbx]
0000000000004393         lea        rsi, qword [word_fastmap]                   ; word_fastmap
000000000000439a         cmp        byte [rsi+rax], 0x0
000000000000439e         je         loc_3b15

00000000000043a4         add        rbx, 0x1
00000000000043a8         jmp        loc_4387

                     loc_43aa:
00000000000043aa         mov        r10, r15                                    ; CODE XREF=sub_31ea+1273, sub_31ea+1443
00000000000043ad         mov        r9, r14
00000000000043b0         mov        rdx, qword [qword_221168]                   ; qword_221168
00000000000043b7         jmp        loc_37c3

                     loc_43bc:
00000000000043bc         mov        byte [byte_221202], 0x1                     ; byte_221202, CODE XREF=main+2931
00000000000043c3         jmp        loc_2d49

                     loc_43c8:
00000000000043c8         add        rax, 0x1                                    ; CODE XREF=main+2828
00000000000043cc         jmp        loc_2cb5

                     loc_43d1:
00000000000043d1         mov        qword [truncation_string], 0x0              ; truncation_string, CODE XREF=main+2771, main+2780
00000000000043dc         jmp        loc_2c8b

                     loc_43e1:
00000000000043e1         mov        rax, rsi                                    ; CODE XREF=sub_31ea+957
00000000000043e4         jmp        loc_35d2

                     loc_43e9:
00000000000043e9         mov        edi, 0x8                                    ; argument #1 for method xmalloc, CODE XREF=main+898
00000000000043ee         mov        dword [number_input_files], 0x1             ; number_input_files
00000000000043f8         call       xmalloc                                     ; xmalloc
00000000000043fd         mov        edi, 0x8                                    ; argument #1 for method xmalloc
0000000000004402         mov        qword [input_file_name], rax                ; input_file_name
0000000000004409         call       xmalloc                                     ; xmalloc
000000000000440e         mov        edi, 0x10                                   ; argument #1 for method xmalloc
0000000000004413         mov        qword [file_line_count], rax                ; file_line_count
000000000000441a         call       xmalloc                                     ; xmalloc
000000000000441f         mov        qword [text_buffers], rax                   ; text_buffers
0000000000004426         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
000000000000442d         mov        r13, qword [rbp+rax*8]
0000000000004432         mov        r12, rax
0000000000004435         lea        r14, qword [rax*8]
000000000000443d         cmp        byte [r13], 0x0
0000000000004442         je         loc_44f2

0000000000004448         lea        rsi, qword [aLibs+10]                       ; argument "__s2" for method j_strcmp, 0x1bc92
000000000000444f         mov        rdi, r13                                    ; argument "__s1" for method j_strcmp
0000000000004452         call       j_strcmp                                    ; strcmp
0000000000004457         test       eax, eax
0000000000004459         mov        rdx, qword [input_file_name]                ; input_file_name
0000000000004460         je         loc_44f9

0000000000004466         mov        qword [rdx], r13

                     loc_4469:
0000000000004469         add        r12d, 0x1                                   ; CODE XREF=sub_31ea+4886
000000000000446d         cmp        r12d, ebx
0000000000004470         mov        dword [optind@@GLIBC_2.2.5], r12d           ; optind@@GLIBC_2.2.5
0000000000004477         jge        loc_26a6

000000000000447d         mov        rdi, qword [rbp+r14+8]
0000000000004482         mov        rdx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004489         lea        rsi, qword [aFPinard+37]                    ; 0x1b88c
0000000000004490         call       freopen_safer                               ; freopen_safer
0000000000004495         test       rax, rax
0000000000004498         je         loc_45bd

000000000000449e         mov        eax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
00000000000044a4         add        eax, 0x1
00000000000044a7         cmp        eax, ebx
00000000000044a9         mov        dword [optind@@GLIBC_2.2.5], eax            ; optind@@GLIBC_2.2.5
00000000000044af         jge        loc_26a6

00000000000044b5         cdqe
00000000000044b7         mov        rdi, qword [rbp+rax*8]                      ; argument #1 for method quote
00000000000044bc         call       quote                                       ; quote
00000000000044c1         lea        rsi, qword [aExtraOperandS]                 ; argument "msgid" for method j_dcgettext, "extra operand %s"
00000000000044c8         mov        rbx, rax
00000000000044cb         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000044d0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000044d2         call       j_dcgettext                                 ; dcgettext
00000000000044d7         mov        rcx, rbx
00000000000044da         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000044dd         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000044df         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000044e1         xor        eax, eax
00000000000044e3         call       j_error                                     ; error

                     loc_44e8:
00000000000044e8         mov        edi, 0x1                                    ; argument #1 for method usage, CODE XREF=main+422, main+487, main+515, main+536, main+557, main+581, main+602, main+625
00000000000044ed         call       usage                                       ; usage

                     loc_44f2:
00000000000044f2         mov        rdx, qword [input_file_name]                ; input_file_name, CODE XREF=sub_31ea+4696

                     loc_44f9:
00000000000044f9         mov        qword [rdx], 0x0                            ; CODE XREF=sub_31ea+4726
0000000000004500         jmp        loc_4469

                     loc_4505:
0000000000004505         cmp        byte [gnu_extensions], 0x0                  ; gnu_extensions, CODE XREF=main+1397
000000000000450c         je         loc_452f

000000000000450e         cmp        byte [input_reference], 0x0                 ; input_reference
0000000000004515         jne        loc_452f

0000000000004517         lea        rax, qword [aOrAvailableLoc+56]             ; 0x1b688
000000000000451e         mov        qword [context_regex], rax                  ; context_regex
0000000000004525         jmp        loc_2714

                     loc_452a:
000000000000452a         call       matcher_error                               ; matcher_error, CODE XREF=main+1968, main+2110, main+3230, sub_31ea+721, sub_31ea+889, sub_31ea+1243, sub_31ea+1802, sub_31ea+2328

                     loc_452f:
000000000000452f         lea        rax, qword [aWrittenBySSAnd+26]             ; 0x1c27a, CODE XREF=sub_31ea+4898, sub_31ea+4907
0000000000004536         mov        qword [context_regex], rax                  ; context_regex
000000000000453d         jmp        loc_2714

                     loc_4542:
0000000000004542         mov        esi, 0x1                                    ; CODE XREF=main+1058
0000000000004547         jmp        loc_25b8

                     loc_454c:
000000000000454c         mov        esi, 0x1                                    ; CODE XREF=main+994
0000000000004551         jmp        loc_2578

                     loc_4556:
0000000000004556         lea        rdx, qword [word_fastmap]                   ; word_fastmap, CODE XREF=sub_31ea+365
000000000000455d         mov        ecx, 0x20
0000000000004562         movabs     rax, 0x101010101010101
000000000000456c         mov        rdi, rdx
000000000000456f         rep stosq  qword [rdi], rax
0000000000004572         mov        byte [byte_2213a0], 0x0                     ; byte_2213a0
0000000000004579         mov        word [word_221389], 0x0                     ; word_221389
0000000000004582         jmp        loc_27a4

                     loc_4587:
0000000000004587         mov        rdi, qword [context_regex]                  ; argument #1 for method quote, context_regex, CODE XREF=main+1958
000000000000458e         call       quote                                       ; quote
0000000000004593         lea        rsi, qword [aErrorRegularEx]                ; argument "msgid" for method j_dcgettext, "error: regular expression has a match of length zero: %s"
000000000000459a         mov        rbx, rax
000000000000459d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000045a2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000045a4         call       j_dcgettext                                 ; dcgettext
00000000000045a9         mov        rcx, rbx
00000000000045ac         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000045af         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000045b1         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000045b6         xor        eax, eax
00000000000045b8         call       j_error                                     ; error

                     loc_45bd:
00000000000045bd         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=sub_31ea+4782
00000000000045c4         mov        esi, 0x3                                    ; argument #2 for method quotearg_n_style_colon
00000000000045c9         xor        edi, edi                                    ; argument #1 for method quotearg_n_style_colon
00000000000045cb         mov        rdx, qword [rbp+rax*8]                      ; argument #3 for method quotearg_n_style_colon
00000000000045d0         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000045d5         mov        rbx, rax
00000000000045d8         call       j___errno_location                          ; __errno_location
00000000000045dd         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000045df         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x1ba14
00000000000045e6         mov        rcx, rbx
00000000000045e9         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000045ee         xor        eax, eax
00000000000045f0         call       j_error                                     ; error

                     loc_45f5:
00000000000045f5         xor        edi, edi                                    ; argument #1 for method usage, CODE XREF=main+332
00000000000045f7         call       usage                                       ; usage

                     loc_45fc:
00000000000045fc         mov        esi, 0x1                                    ; CODE XREF=main+930
0000000000004601         jmp        loc_2538

                     loc_4606:
0000000000004606         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; argument #1 for method quote, optarg@@GLIBC_2.2.5, CODE XREF=main+766, main+780
000000000000460d         call       quote                                       ; quote
0000000000004612         lea        rsi, qword [aInvalidGapWidt]                ; argument "msgid" for method j_dcgettext, "invalid gap width: %s"
0000000000004619         mov        rbx, rax
000000000000461c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004621         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004623         call       j_dcgettext                                 ; dcgettext
0000000000004628         mov        rcx, rbx
000000000000462b         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000462e         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004630         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000004635         xor        eax, eax
0000000000004637         call       j_error                                     ; error

                     loc_463c:
000000000000463c         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; argument #1 for method quote, optarg@@GLIBC_2.2.5, CODE XREF=main+452, main+466
0000000000004643         call       quote                                       ; quote
0000000000004648         lea        rsi, qword [aInvalidLineWid]                ; argument "msgid" for method j_dcgettext, "invalid line width: %s"
000000000000464f         mov        rbx, rax
0000000000004652         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004657         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004659         call       j_dcgettext                                 ; dcgettext
000000000000465e         mov        rcx, rbx
0000000000004661         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004664         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004666         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000466b         xor        eax, eax
000000000000466d         call       j_error                                     ; error

                     loc_4672:
0000000000004672         mov        esi, 0x7b                                   ; argument #2 for method j___overflow, CODE XREF=sub_31ea+2151
0000000000004677         call       j___overflow                                ; __overflow
000000000000467c         jmp        loc_3a62

                     loc_4681:
0000000000004681         mov        esi, 0x7b                                   ; argument #2 for method j___overflow, CODE XREF=sub_31ea+2511
0000000000004686         call       j___overflow                                ; __overflow
000000000000468b         jmp        loc_3bca

                     loc_4690:
0000000000004690         mov        esi, 0x7d                                   ; argument #2 for method j___overflow, CODE XREF=sub_31ea+2562
0000000000004695         call       j___overflow                                ; __overflow
000000000000469a         jmp        loc_3bfd

                     loc_469f:
000000000000469f         mov        esi, 0x22                                   ; argument #2 for method j___overflow, CODE XREF=sub_31ea+3574
00000000000046a4         call       j___overflow                                ; __overflow
00000000000046a9         jmp        loc_3bfd

                     loc_46ae:
00000000000046ae         mov        esi, 0x22                                   ; argument #2 for method j___overflow, CODE XREF=sub_31ea+3472
00000000000046b3         call       j___overflow                                ; __overflow
00000000000046b8         jmp        loc_3f8b

                     loc_46bd:
00000000000046bd         mov        esi, 0x22                                   ; argument #2 for method j___overflow, CODE XREF=sub_31ea+3364
00000000000046c2         call       j___overflow                                ; __overflow
00000000000046c7         jmp        loc_3f1f

                     loc_46cc:
00000000000046cc         mov        esi, 0x7d                                   ; argument #2 for method j___overflow, CODE XREF=sub_31ea+2461
00000000000046d1         call       j___overflow                                ; __overflow
00000000000046d6         jmp        loc_3b98

                     loc_46db:
00000000000046db         mov        eax, 0x1                                    ; CODE XREF=sub_31ea+2338
00000000000046e0         jmp        loc_3b12

                     loc_46e5:
00000000000046e5         mov        esi, 0x22                                   ; argument #2 for method j___overflow, CODE XREF=sub_31ea+3253
00000000000046ea         call       j___overflow                                ; __overflow
00000000000046ef         jmp        loc_3eb0

                     loc_46f4:
00000000000046f4         mov        esi, 0x22                                   ; argument #2 for method j___overflow, CODE XREF=sub_31ea+3145
00000000000046f9         call       j___overflow                                ; __overflow
00000000000046fe         jmp        loc_3e44

                     loc_4703:
0000000000004703         mov        qword [qword_221188], rax                   ; qword_221188, CODE XREF=sub_31ea+819
000000000000470a         jmp        loc_3523

                     loc_470f:
000000000000470f         mov        qword [qword_2211a8], rax                   ; qword_2211a8, CODE XREF=sub_31ea+1602, sub_31ea+1622
0000000000004716         jmp        loc_3846

                     loc_471b:
000000000000471b         mov        qword [r15], rsi                            ; CODE XREF=sub_31ea+1409
000000000000471e         lea        rax, qword [rsi+rcx]
0000000000004722         jmp        loc_3538

                     loc_4727:
0000000000004727         mov        qword [qword_221148], r13                   ; qword_221148, CODE XREF=sub_31ea+1706
000000000000472e         jmp        loc_38ad

                     loc_4733:
0000000000004733         mov        qword [head], rbx                           ; head, CODE XREF=sub_31ea+1922, sub_31ea+1940
000000000000473a         jmp        loc_3984

                     loc_473f:
000000000000473f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_31ea+2658
                        ; endp

                     loc_4744:
0000000000004744         mov        qword [before_max_width], 0x0               ; before_max_width, CODE XREF=main+2847
000000000000474f         jmp        loc_2cb5

                     loc_4754:
0000000000004754         mov        qword [qword_221128], rbp                   ; qword_221128, CODE XREF=sub_31ea+2876
000000000000475b         jmp        loc_3a0a

                     loc_4760:
0000000000004760         mov        qword [qword_221148], rax                   ; qword_221148, CODE XREF=sub_31ea+1725
0000000000004767         jmp        loc_38ad

                     loc_476c:
000000000000476c         mov        qword [before], rsi                         ; before, CODE XREF=sub_31ea+1060
0000000000004773         jmp        loc_3614

                     loc_4778:
0000000000004778         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=sub_31ea+4380
000000000000477f         mov        rdi, qword [truncation_string]              ; argument "__s" for method j_fputs_unlocked, truncation_string
0000000000004786         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000478b         jmp        loc_430c

                     loc_4790:
0000000000004790         lea        rsi, qword [keyafter]                       ; keyafter, CODE XREF=sub_31ea+3904
0000000000004797         mov        rax, qword [qword_221168]                   ; qword_221168
000000000000479e         sub        rax, qword [rsi]
00000000000047a1         mov        rsi, qword [half_line_width]                ; half_line_width
00000000000047a8         sub        rsi, rax
00000000000047ab         mov        rax, rsi
00000000000047ae         xor        esi, esi
00000000000047b0         jmp        loc_42ab

                     loc_47b5:
00000000000047b5         mov        esi, 0x3a                                   ; argument #2 for method j___overflow, CODE XREF=sub_31ea+3652
00000000000047ba         call       j___overflow                                ; __overflow
00000000000047bf         jmp        loc_403f

                     loc_47c4:
00000000000047c4         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=sub_31ea+4334
00000000000047cb         mov        rdi, qword [truncation_string]              ; argument "__s" for method j_fputs_unlocked, truncation_string
00000000000047d2         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000047d7         jmp        loc_42de

                     loc_47dc:
00000000000047dc         cmp        byte [input_reference], 0x0                 ; input_reference, CODE XREF=sub_31ea+3943, sub_31ea+4009
00000000000047e3         jne        loc_4199

00000000000047e9         jmp        loc_3bfd

                     loc_47ee:
00000000000047ee         mov        qword [qword_221188], rbx                   ; qword_221188, CODE XREF=sub_31ea+800
00000000000047f5         jmp        loc_3523

                     loc_47fa:
00000000000047fa         mov        qword [qword_221168], rax                   ; qword_221168, CODE XREF=sub_31ea+642
0000000000004801         jmp        loc_3472

                     loc_4806:
0000000000004806         mov        esi, 0xa                                    ; argument #2 for method j___overflow, CODE XREF=sub_31ea+2594
000000000000480b         call       j___overflow                                ; __overflow
0000000000004810         jmp        loc_3c1d

                     loc_4815:
0000000000004815         mov        qword [qword_221168], rsi                   ; qword_221168, CODE XREF=sub_31ea+621
000000000000481c         jmp        loc_3472

                     loc_4821:
0000000000004821         mov        esi, 0x1                                    ; CODE XREF=main+4161
0000000000004826         jmp        loc_31d7

                     loc_482b:
000000000000482b         mov        qword [total_line_count], r9                ; total_line_count, CODE XREF=main+3838
0000000000004832         mov        r10, r9
0000000000004835         jmp        loc_3094
000000000000483a         align      64                                          ; End of unwind block (FDE at 0x1d904)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000004840         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0x1d65c)
0000000000004842         mov        r9, rdx
0000000000004845         pop        rsi
0000000000004846         mov        rdx, rsp
0000000000004849         and        rsp, 0xfffffffffffffff0
000000000000484d         push       rax
000000000000484e         push       rsp
000000000000484f         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000004856         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
000000000000485d         lea        rdi, qword [main]                           ; main
0000000000004864         call       qword [qword_220fc0+8]                      ; 0x220fc8
000000000000486a         hlt
                        ; endp
000000000000486b         align      16                                          ; End of unwind block (FDE at 0x1d65c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000004870         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
0000000000004877         push       rbp
0000000000004878         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000487f         cmp        rax, rdi
0000000000004882         mov        rbp, rsp
0000000000004885         je         loc_48a0

0000000000004887         mov        rax, qword [qword_220fc0]                   ; qword_220fc0
000000000000488e         test       rax, rax
0000000000004891         je         loc_48a0

0000000000004893         pop        rbp
0000000000004894         jmp        rax
                        ; endp
0000000000004896         align      32

                     loc_48a0:
00000000000048a0         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
00000000000048a1         ret
                        ; endp
00000000000048a2         align      16

                     register_tm_clones:
00000000000048b0         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
00000000000048b7         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
00000000000048be         push       rbp
00000000000048bf         sub        rsi, rdi
00000000000048c2         mov        rbp, rsp
00000000000048c5         sar        rsi, 0x3
00000000000048c9         mov        rax, rsi
00000000000048cc         shr        rax, 0x3f
00000000000048d0         add        rsi, rax
00000000000048d3         sar        rsi, 0x1
00000000000048d6         je         loc_48f0

00000000000048d8         mov        rax, qword [qword_220fd8]                   ; qword_220fd8
00000000000048df         test       rax, rax
00000000000048e2         je         loc_48f0

00000000000048e4         pop        rbp
00000000000048e5         jmp        rax
                        ; endp
00000000000048e7         align      16

                     loc_48f0:
00000000000048f0         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
00000000000048f1         ret
                        ; endp
00000000000048f2         align      256


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
0000000000004900         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
0000000000004907         jne        loc_4938

0000000000004909         cmp        qword [qword_220fe0], 0x0                   ; qword_220fe0
0000000000004911         push       rbp
0000000000004912         mov        rbp, rsp
0000000000004915         je         loc_4923

0000000000004917         mov        rdi, qword [__dso_handle]                   ; __dso_handle
000000000000491e         call       j_qword_220fe0                              ; qword_220fe0

                     loc_4923:
0000000000004923         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
0000000000004928         mov        byte [completed.7697], 0x1                  ; completed.7697
000000000000492f         pop        rbp
0000000000004930         ret
                        ; endp
0000000000004931         align      8

                     loc_4938:
0000000000004938         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
000000000000493a         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000004940         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000004941         mov        rbp, rsp
0000000000004944         pop        rbp
0000000000004945         jmp        register_tm_clones                          ; register_tm_clones
000000000000494a         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     compare_words:
0000000000004950         mov        r10, qword [rsi+8]                          ; Begin of unwind block (FDE at 0x1d6cc), CODE XREF=compare_occurs+8, search_table.isra.1+73, DATA XREF=digest_word_file+131
0000000000004954         mov        r9, qword [rdi+8]
0000000000004958         cmp        r10, r9
000000000000495b         mov        r8, r9
000000000000495e         cmovle     r8, r10
0000000000004962         cmp        byte [ignore_case], 0x0                     ; ignore_case
0000000000004969         jne        loc_49b0

000000000000496b         test       r8, r8
000000000000496e         jle        loc_499d

0000000000004970         mov        rdi, qword [rdi]
0000000000004973         mov        rsi, qword [rsi]
0000000000004976         movzx      eax, byte [rdi]
0000000000004979         movzx      edx, byte [rsi]
000000000000497c         sub        eax, edx
000000000000497e         jne        loc_49ae

0000000000004980         xor        edx, edx
0000000000004982         jmp        loc_4994
0000000000004984         align      8

                     loc_4988:
0000000000004988         movzx      eax, byte [rdi+rdx]                         ; CODE XREF=compare_words+75
000000000000498c         movzx      ecx, byte [rsi+rdx]
0000000000004990         sub        eax, ecx
0000000000004992         jne        loc_49ae

                     loc_4994:
0000000000004994         add        rdx, 0x1                                    ; CODE XREF=compare_words+50
0000000000004998         cmp        r8, rdx
000000000000499b         jne        loc_4988

                     loc_499d:
000000000000499d         cmp        r10, r9                                     ; CODE XREF=compare_words+30, compare_words+99, compare_words+174
00000000000049a0         jg         loc_49a9

00000000000049a2         setl       al
00000000000049a5         movzx      eax, al
00000000000049a8         ret
                        ; endp

                     loc_49a9:
00000000000049a9         mov        eax, 0xffffffff                             ; CODE XREF=compare_words+80

                     loc_49ae:
00000000000049ae         ret                                                    ; CODE XREF=compare_words+46, compare_words+66, compare_words+131, compare_words+163
                        ; endp

                     loc_49b0:
00000000000049b0         test       r8, r8                                      ; CODE XREF=compare_words+25
00000000000049b3         jle        loc_499d

00000000000049b5         mov        r11, qword [rsi]
00000000000049b8         mov        rdi, qword [rdi]
00000000000049bb         lea        rsi, qword [folded_chars]                   ; folded_chars
00000000000049c2         movzx      eax, byte [rdi]
00000000000049c5         movzx      edx, byte [r11]
00000000000049c9         movzx      eax, byte [rsi+rax]
00000000000049cd         movzx      edx, byte [rsi+rdx]
00000000000049d1         sub        eax, edx
00000000000049d3         jne        loc_49ae

00000000000049d5         xor        edx, edx
00000000000049d7         jmp        loc_49f5
00000000000049d9         align      32

                     loc_49e0:
00000000000049e0         movzx      eax, byte [rdi+rdx]                         ; CODE XREF=compare_words+172
00000000000049e4         movzx      ecx, byte [r11+rdx]
00000000000049e9         movzx      eax, byte [rsi+rax]
00000000000049ed         movzx      ecx, byte [rsi+rcx]
00000000000049f1         sub        eax, ecx
00000000000049f3         jne        loc_49ae

                     loc_49f5:
00000000000049f5         add        rdx, 0x1                                    ; CODE XREF=compare_words+135
00000000000049f9         cmp        r8, rdx
00000000000049fc         jne        loc_49e0

00000000000049fe         jmp        loc_499d


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     matcher_error:
0000000000004a00         push       rbx                                         ; End of unwind block (FDE at 0x1d6cc), Begin of unwind block (FDE at 0x1d6e0), CODE XREF=sub_31ea+4928
0000000000004a01         lea        rsi, qword [aErrorInRegular]                ; argument "msgid" for method j_dcgettext, "error in regular expression matcher"
0000000000004a08         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004a0d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004a0f         call       j_dcgettext                                 ; dcgettext
0000000000004a14         mov        rbx, rax
0000000000004a17         call       j___errno_location                          ; __errno_location
0000000000004a1c         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000004a1e         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000004a21         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000004a26         xor        eax, eax
0000000000004a28         call       j_error                                     ; error
0000000000004a2d         nop        dword [rax]                                 ; End of unwind block (FDE at 0x1d6e0)
                     copy_unescaped_string:
0000000000004a30         push       r12                                         ; Begin of unwind block (FDE at 0x1d6f8), CODE XREF=main+705, main+817, main+860
0000000000004a32         push       rbp
0000000000004a33         push       rbx
0000000000004a34         mov        rbx, rdi
0000000000004a37         call       j_strlen                                    ; strlen
0000000000004a3c         lea        rdi, qword [rax+1]
0000000000004a40         call       xmalloc                                     ; xmalloc
0000000000004a45         mov        r12, rax
0000000000004a48         movzx      eax, byte [rbx]
0000000000004a4b         mov        rbp, r12

                     loc_4a4e:
0000000000004a4e         test       al, al                                      ; CODE XREF=copy_unescaped_string+262, copy_unescaped_string+302, copy_unescaped_string+410, copy_unescaped_string+464, copy_unescaped_string+488, copy_unescaped_string+512, copy_unescaped_string+536, copy_unescaped_string+560, copy_unescaped_string+584, copy_unescaped_string+603, copy_unescaped_string+629
0000000000004a50         je         loc_4a6e

                     loc_4a52:
0000000000004a52         cmp        al, 0x5c                                    ; CODE XREF=copy_unescaped_string+60
0000000000004a54         movzx      edx, byte [rbx+1]
0000000000004a58         lea        rcx, qword [rbx+1]
0000000000004a5c         je         loc_4a80

0000000000004a5e         mov        byte [rbp], al
0000000000004a61         mov        eax, edx
0000000000004a63         add        rbp, 0x1
0000000000004a67         test       al, al
0000000000004a69         mov        rbx, rcx
0000000000004a6c         jne        loc_4a52

                     loc_4a6e:
0000000000004a6e         mov        byte [rbp], 0x0                             ; CODE XREF=copy_unescaped_string+32, copy_unescaped_string+135, copy_unescaped_string+146, copy_unescaped_string+314
0000000000004a72         mov        rax, r12
0000000000004a75         pop        rbx
0000000000004a76         pop        rbp
0000000000004a77         pop        r12
0000000000004a79         ret
                        ; endp
0000000000004a7a         align      128

                     loc_4a80:
0000000000004a80         cmp        dl, 0x66                                    ; CODE XREF=copy_unescaped_string+44
0000000000004a83         je         loc_4c20

0000000000004a89         jg         loc_4ac8

0000000000004a8b         cmp        dl, 0x61
0000000000004a8e         je         loc_4c38

0000000000004a94         jle        loc_4b68

0000000000004a9a         cmp        dl, 0x62
0000000000004a9d         je         loc_4c68

0000000000004aa3         cmp        dl, 0x63
0000000000004aa6         jne        loc_4bb8

0000000000004aac         nop        dword [rax]

                     loc_4ab0:
0000000000004ab0         add        rcx, 0x1                                    ; CODE XREF=copy_unescaped_string+144
0000000000004ab4         cmp        byte [rcx], 0x0
0000000000004ab7         je         loc_4a6e

0000000000004ab9         add        rcx, 0x1
0000000000004abd         cmp        byte [rcx], 0x0
0000000000004ac0         jne        loc_4ab0

0000000000004ac2         jmp        loc_4a6e
0000000000004ac4         align      8

                     loc_4ac8:
0000000000004ac8         cmp        dl, 0x74                                    ; CODE XREF=copy_unescaped_string+89
0000000000004acb         je         loc_4c50

0000000000004ad1         jle        loc_4b40

0000000000004ad3         cmp        dl, 0x76
0000000000004ad6         je         loc_4bf0

0000000000004adc         cmp        dl, 0x78
0000000000004adf         jne        loc_4bb8

0000000000004ae5         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000004aea         mov        r8, qword [rax]
0000000000004aed         add        rbx, 0x2
0000000000004af1         xor        edi, edi
0000000000004af3         xor        ecx, ecx

                     loc_4af5:
0000000000004af5         movsx      edx, byte [rbx]                             ; CODE XREF=copy_unescaped_string+250
0000000000004af8         movzx      esi, dl
0000000000004afb         mov        eax, edx
0000000000004afd         test       byte [r8+rsi*2+1], 0x10
0000000000004b03         je         loc_4c90

0000000000004b09         mov        esi, ecx
0000000000004b0b         lea        ecx, dword [rax-0x61]
0000000000004b0e         shl        esi, 0x4
0000000000004b11         cmp        cl, 0x5
0000000000004b14         ja         loc_4bd0

0000000000004b1a         lea        eax, dword [rdx-0x57]

                     loc_4b1d:
0000000000004b1d         add        edi, 0x1                                    ; CODE XREF=copy_unescaped_string+433
0000000000004b20         add        rbx, 0x1
0000000000004b24         lea        ecx, dword [rsi+rax]
0000000000004b27         cmp        edi, 0x3
0000000000004b2a         jne        loc_4af5

                     loc_4b2c:
0000000000004b2c         mov        byte [rbp], cl                              ; CODE XREF=copy_unescaped_string+610
0000000000004b2f         movzx      eax, byte [rbx]
0000000000004b32         add        rbp, 0x1
0000000000004b36         jmp        loc_4a4e
0000000000004b3b         align      64

                     loc_4b40:
0000000000004b40         cmp        dl, 0x6e                                    ; CODE XREF=copy_unescaped_string+161
0000000000004b43         je         loc_4c08

0000000000004b49         cmp        dl, 0x72
0000000000004b4c         jne        loc_4bb8

0000000000004b4e         mov        byte [rbp], 0xd
0000000000004b52         movzx      eax, byte [rbx+2]
0000000000004b56         add        rbp, 0x1
0000000000004b5a         add        rbx, 0x2
0000000000004b5e         jmp        loc_4a4e
0000000000004b63         align      8

                     loc_4b68:
0000000000004b68         test       dl, dl                                      ; CODE XREF=copy_unescaped_string+100
0000000000004b6a         je         loc_4a6e

0000000000004b70         cmp        dl, 0x30
0000000000004b73         jne        loc_4bb8

0000000000004b75         lea        rdx, qword [rbx+2]
0000000000004b79         movsx      eax, byte [rdx]
0000000000004b7c         xor        ecx, ecx
0000000000004b7e         lea        rdi, qword [rbx+5]
0000000000004b82         lea        esi, dword [rax-0x30]
0000000000004b85         cmp        sil, 0x7
0000000000004b89         ja         loc_4bab

                     loc_4b8b:
0000000000004b8b         lea        rbx, qword [rdx+1]                          ; CODE XREF=copy_unescaped_string+377
0000000000004b8f         lea        ecx, dword [rax+rcx*8-0x30]
0000000000004b93         cmp        rdi, rbx
0000000000004b96         je         loc_4c80

0000000000004b9c         mov        rdx, rbx
0000000000004b9f         movsx      eax, byte [rdx]
0000000000004ba2         lea        esi, dword [rax-0x30]
0000000000004ba5         cmp        sil, 0x7
0000000000004ba9         jbe        loc_4b8b

                     loc_4bab:
0000000000004bab         mov        rbx, rdx                                    ; CODE XREF=copy_unescaped_string+345
0000000000004bae         jmp        loc_4c84
0000000000004bb3         align      8

                     loc_4bb8:
0000000000004bb8         mov        byte [rbp], 0x5c                            ; CODE XREF=copy_unescaped_string+118, copy_unescaped_string+175, copy_unescaped_string+284, copy_unescaped_string+323
0000000000004bbc         mov        byte [rbp+1], dl
0000000000004bbf         add        rbx, 0x2
0000000000004bc3         movzx      eax, byte [rbx]
0000000000004bc6         add        rbp, 0x2
0000000000004bca         jmp        loc_4a4e
0000000000004bcf         align      16

                     loc_4bd0:
0000000000004bd0         lea        r9d, dword [rax-0x41]                       ; CODE XREF=copy_unescaped_string+228
0000000000004bd4         lea        ecx, dword [rdx-0x30]
0000000000004bd7         lea        eax, dword [rdx-0x37]
0000000000004bda         cmp        r9b, 0x5
0000000000004bde         cmova      eax, ecx
0000000000004be1         jmp        loc_4b1d
0000000000004be6         align      16

                     loc_4bf0:
0000000000004bf0         mov        byte [rbp], 0xb                             ; CODE XREF=copy_unescaped_string+166
0000000000004bf4         movzx      eax, byte [rbx+2]
0000000000004bf8         add        rbp, 0x1
0000000000004bfc         add        rbx, 0x2
0000000000004c00         jmp        loc_4a4e
0000000000004c05         align      8

                     loc_4c08:
0000000000004c08         mov        byte [rbp], 0xa                             ; CODE XREF=copy_unescaped_string+275
0000000000004c0c         movzx      eax, byte [rbx+2]
0000000000004c10         add        rbp, 0x1
0000000000004c14         add        rbx, 0x2
0000000000004c18         jmp        loc_4a4e
0000000000004c1d         align      32

                     loc_4c20:
0000000000004c20         mov        byte [rbp], 0xc                             ; CODE XREF=copy_unescaped_string+83
0000000000004c24         movzx      eax, byte [rbx+2]
0000000000004c28         add        rbp, 0x1
0000000000004c2c         add        rbx, 0x2
0000000000004c30         jmp        loc_4a4e
0000000000004c35         align      8

                     loc_4c38:
0000000000004c38         mov        byte [rbp], 0x7                             ; CODE XREF=copy_unescaped_string+94
0000000000004c3c         movzx      eax, byte [rbx+2]
0000000000004c40         add        rbp, 0x1
0000000000004c44         add        rbx, 0x2
0000000000004c48         jmp        loc_4a4e
0000000000004c4d         align      16

                     loc_4c50:
0000000000004c50         mov        byte [rbp], 0x9                             ; CODE XREF=copy_unescaped_string+155
0000000000004c54         movzx      eax, byte [rbx+2]
0000000000004c58         add        rbp, 0x1
0000000000004c5c         add        rbx, 0x2
0000000000004c60         jmp        loc_4a4e
0000000000004c65         align      8

                     loc_4c68:
0000000000004c68         mov        byte [rbp], 0x8                             ; CODE XREF=copy_unescaped_string+109
0000000000004c6c         movzx      eax, byte [rbx+2]
0000000000004c70         add        rbp, 0x1
0000000000004c74         add        rbx, 0x2
0000000000004c78         jmp        loc_4a4e
0000000000004c7d         align      128

                     loc_4c80:
0000000000004c80         movzx      eax, byte [rdx+1]                           ; CODE XREF=copy_unescaped_string+358

                     loc_4c84:
0000000000004c84         mov        byte [rbp], cl                              ; CODE XREF=copy_unescaped_string+382
0000000000004c87         add        rbp, 0x1
0000000000004c8b         jmp        loc_4a4e

                     loc_4c90:
0000000000004c90         test       edi, edi                                    ; CODE XREF=copy_unescaped_string+211
0000000000004c92         jne        loc_4b2c

0000000000004c98         mov        edx, 0x785c
0000000000004c9d         add        rbp, 0x2
0000000000004ca1         mov        word [rbp-2], dx
0000000000004ca5         jmp        loc_4a4e
0000000000004caa         align      16                                          ; End of unwind block (FDE at 0x1d6f8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64


                     compile_regex:
0000000000004cb0         cmp        byte [ignore_case], 0x0                     ; Begin of unwind block (FDE at 0x1d728), ignore_case, CODE XREF=main+1419, sub_31ea+67
0000000000004cb7         lea        rax, qword [rdi+0x48]
0000000000004cbb         push       r12
0000000000004cbd         push       rbp
0000000000004cbe         push       rbx
0000000000004cbf         mov        edx, 0x0
0000000000004cc4         mov        rbx, qword [rdi]
0000000000004cc7         mov        qword [rdi+0x28], rax
0000000000004ccb         lea        rax, qword [folded_chars]                   ; folded_chars
0000000000004cd2         lea        rbp, qword [rdi+8]
0000000000004cd6         mov        qword [rdi+8], 0x0
0000000000004cde         mov        qword [rdi+0x10], 0x0
0000000000004ce6         cmove      rax, rdx
0000000000004cea         mov        qword [rdi+0x30], rax
0000000000004cee         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
0000000000004cf1         call       j_strlen                                    ; strlen
0000000000004cf6         mov        rdx, rbp
0000000000004cf9         mov        rsi, rax
0000000000004cfc         mov        rdi, rbx
0000000000004cff         call       rpl_re_compile_pattern                      ; rpl_re_compile_pattern
0000000000004d04         test       rax, rax
0000000000004d07         jne        loc_4d15

0000000000004d09         pop        rbx
0000000000004d0a         mov        rdi, rbp
0000000000004d0d         pop        rbp
0000000000004d0e         pop        r12
0000000000004d10         jmp        rpl_re_compile_fastmap                      ; rpl_re_compile_fastmap

                     loc_4d15:
0000000000004d15         mov        rdi, rbx                                    ; CODE XREF=compile_regex+87
0000000000004d18         mov        r12, rax
0000000000004d1b         call       quote                                       ; quote
0000000000004d20         lea        rsi, qword [aSForRegexpS]                   ; argument "msgid" for method j_dcgettext, "%s (for regexp %s)"
0000000000004d27         mov        rbx, rax
0000000000004d2a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004d2f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004d31         call       j_dcgettext                                 ; dcgettext
0000000000004d36         mov        r8, rbx
0000000000004d39         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004d3c         mov        rcx, r12
0000000000004d3f         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000004d41         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000004d46         xor        eax, eax
0000000000004d48         call       j_error                                     ; error
0000000000004d4d         nop        dword [rax]                                 ; End of unwind block (FDE at 0x1d728)
                     swallow_file_in_memory:
0000000000004d50         push       rbp                                         ; Begin of unwind block (FDE at 0x1d758), CODE XREF=main+1459, main+1743, digest_word_file+37
0000000000004d51         push       rbx
0000000000004d52         mov        rbp, rsi
0000000000004d55         sub        rsp, 0x18
0000000000004d59         mov        rax, qword [fs:0x28]
0000000000004d62         mov        qword [rsp+0x40+var_38], rax
0000000000004d67         xor        eax, eax
0000000000004d69         test       rdi, rdi
0000000000004d6c         je         loc_4d76

0000000000004d6e         cmp        byte [rdi], 0x0
0000000000004d71         mov        rbx, rdi
0000000000004d74         jne        loc_4db8

                     loc_4d76:
0000000000004d76         mov        rdi, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5, CODE XREF=swallow_file_in_memory+28, swallow_file_in_memory+128
0000000000004d7d         mov        rsi, rsp
0000000000004d80         call       fread_file                                  ; fread_file
0000000000004d85         test       rax, rax
0000000000004d88         mov        qword [rbp], rax
0000000000004d8c         je         loc_4e1a

                     loc_4d92:
0000000000004d92         add        rax, qword [rsp+0x40+var_40]                ; CODE XREF=swallow_file_in_memory+148
0000000000004d96         mov        qword [rbp+8], rax
0000000000004d9a         mov        rax, qword [rsp+0x40+var_38]
0000000000004d9f         xor        rax, qword [fs:0x28]
0000000000004da8         jne        loc_4e15

0000000000004daa         add        rsp, 0x18
0000000000004dae         pop        rbx
0000000000004daf         pop        rbp
0000000000004db0         ret
                        ; endp
0000000000004db1         align      8

                     loc_4db8:
0000000000004db8         lea        rdi, qword [aLibs+10]                       ; 0x1bc92, CODE XREF=swallow_file_in_memory+36
0000000000004dbf         mov        ecx, 0x2
0000000000004dc4         mov        rsi, rbx
0000000000004dc7         rep  cmpsb byte [rsi], byte [rdi]
0000000000004dc9         seta       al
0000000000004dcc         sbb        al, 0x0
0000000000004dce         test       al, al
0000000000004dd0         je         loc_4d76

0000000000004dd2         mov        rsi, rsp
0000000000004dd5         mov        rdi, rbx
0000000000004dd8         call       read_file                                   ; read_file
0000000000004ddd         test       rax, rax
0000000000004de0         mov        qword [rbp], rax
0000000000004de4         jne        loc_4d92

                     loc_4de6:
0000000000004de6         mov        rdx, rbx                                    ; CODE XREF=swallow_file_in_memory+209
0000000000004de9         mov        esi, 0x3
0000000000004dee         xor        edi, edi
0000000000004df0         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000004df5         mov        rbx, rax
0000000000004df8         call       j___errno_location                          ; __errno_location
0000000000004dfd         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000004dff         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x1ba14
0000000000004e06         mov        rcx, rbx
0000000000004e09         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000004e0e         xor        eax, eax
0000000000004e10         call       j_error                                     ; error

                     loc_4e15:
0000000000004e15         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=swallow_file_in_memory+88
                        ; endp

                     loc_4e1a:
0000000000004e1a         lea        rbx, qword [aLibs+10]                       ; 0x1bc92, CODE XREF=swallow_file_in_memory+60
0000000000004e21         jmp        loc_4de6
0000000000004e23         align      16                                          ; End of unwind block (FDE at 0x1d758)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     digest_word_file:
0000000000004e30         push       r13                                         ; Begin of unwind block (FDE at 0x1d784), CODE XREF=main+1575, main+1613
0000000000004e32         push       r12
0000000000004e34         mov        r12, rsi
0000000000004e37         push       rbp
0000000000004e38         push       rbx
0000000000004e39         lea        r13, qword [r12+8]
0000000000004e3e         sub        rsp, 0x28
0000000000004e42         mov        rsi, rsp
0000000000004e45         mov        rax, qword [fs:0x28]
0000000000004e4e         mov        qword [rsp+0x48+var_30], rax
0000000000004e53         xor        eax, eax
0000000000004e55         call       swallow_file_in_memory                      ; swallow_file_in_memory
0000000000004e5a         mov        rbp, qword [rsp+0x48+var_48]
0000000000004e5e         mov        rdx, qword [rsp+0x48+var_40]
0000000000004e63         xor        esi, esi
0000000000004e65         mov        qword [r12], 0x0
0000000000004e6d         mov        qword [r12+8], 0x0
0000000000004e76         xor        edi, edi
0000000000004e78         mov        qword [r12+0x10], 0x0

                     loc_4e81:
0000000000004e81         cmp        rbp, rdx                                    ; CODE XREF=digest_word_file+229, digest_word_file+269
0000000000004e84         jae        loc_4eb3

                     loc_4e86:
0000000000004e86         cmp        byte [rbp], 0xa                             ; CODE XREF=digest_word_file+129
0000000000004e8a         mov        rbx, rbp
0000000000004e8d         jne        loc_4e9d

0000000000004e8f         jmp        loc_4f11
0000000000004e94         align      8

                     loc_4e98:
0000000000004e98         cmp        byte [rbx], 0xa                             ; CODE XREF=digest_word_file+116
0000000000004e9b         je         loc_4ee0

                     loc_4e9d:
0000000000004e9d         add        rbx, 0x1                                    ; CODE XREF=digest_word_file+93
0000000000004ea1         cmp        rbx, rdx
0000000000004ea4         jne        loc_4e98

0000000000004ea6         cmp        rbp, rdx
0000000000004ea9         jb         loc_4ee5

0000000000004eab         mov        rbp, rdx
0000000000004eae         cmp        rbp, rdx
0000000000004eb1         jb         loc_4e86

                     loc_4eb3:
0000000000004eb3         lea        rcx, qword [compare_words]                  ; argument "__compar" for method j_qsort, compare_words, CODE XREF=digest_word_file+84
0000000000004eba         mov        edx, 0x10                                   ; argument "__size" for method j_qsort
0000000000004ebf         call       j_qsort                                     ; qsort
0000000000004ec4         mov        rax, qword [rsp+0x48+var_30]
0000000000004ec9         xor        rax, qword [fs:0x28]
0000000000004ed2         jne        loc_4f42

0000000000004ed4         add        rsp, 0x28
0000000000004ed8         pop        rbx
0000000000004ed9         pop        rbp
0000000000004eda         pop        r12
0000000000004edc         pop        r13
0000000000004ede         ret
                        ; endp
0000000000004edf         align      32

                     loc_4ee0:
0000000000004ee0         cmp        rbp, rbx                                    ; CODE XREF=digest_word_file+107
0000000000004ee3         jae        loc_4f11

                     loc_4ee5:
0000000000004ee5         cmp        rsi, qword [r12+8]                          ; CODE XREF=digest_word_file+121
0000000000004eea         je         loc_4f1a

                     loc_4eec:
0000000000004eec         mov        rcx, rsi                                    ; CODE XREF=digest_word_file+264
0000000000004eef         mov        rax, rbx
0000000000004ef2         add        rsi, 0x1
0000000000004ef6         shl        rcx, 0x4
0000000000004efa         sub        rax, rbp
0000000000004efd         add        rcx, rdi
0000000000004f00         cmp        rbx, rdx
0000000000004f03         mov        qword [rcx], rbp
0000000000004f06         mov        qword [rcx+8], rax
0000000000004f0a         mov        qword [r12+0x10], rsi
0000000000004f0f         jae        loc_4f3a

                     loc_4f11:
0000000000004f11         lea        rbp, qword [rbx+1]                          ; CODE XREF=digest_word_file+95, digest_word_file+179
0000000000004f15         jmp        loc_4e81

                     loc_4f1a:
0000000000004f1a         mov        edx, 0x10                                   ; CODE XREF=digest_word_file+186
0000000000004f1f         mov        rsi, r13
0000000000004f22         call       x2nrealloc                                  ; x2nrealloc
0000000000004f27         mov        rsi, qword [r12+0x10]
0000000000004f2c         mov        rdi, rax
0000000000004f2f         mov        qword [r12], rax
0000000000004f33         mov        rdx, qword [rsp+0x48+var_40]
0000000000004f38         jmp        loc_4eec

                     loc_4f3a:
0000000000004f3a         mov        rbp, rbx                                    ; CODE XREF=digest_word_file+223
0000000000004f3d         jmp        loc_4e81

                     loc_4f42:
0000000000004f42         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=digest_word_file+162
                        ; endp
0000000000004f47         align      16                                          ; End of unwind block (FDE at 0x1d784)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     print_spaces:
0000000000004f50         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x1d7c0), CODE XREF=sub_31ea+3704, sub_31ea+3781, sub_31ea+3840, sub_31ea+3997, sub_31ea+4035, sub_31ea+4182, sub_31ea+4322
0000000000004f53         jle        loc_4f98

0000000000004f55         push       rbx
0000000000004f56         mov        rbx, rdi
0000000000004f59         nop        dword [rax]

                     loc_4f60:
0000000000004f60         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=print_spaces+48
0000000000004f67         mov        rax, qword [rdi+0x28]
0000000000004f6b         cmp        rax, qword [rdi+0x30]
0000000000004f6f         jae        loc_4f88

0000000000004f71         lea        rdx, qword [rax+1]
0000000000004f75         mov        qword [rdi+0x28], rdx
0000000000004f79         mov        byte [rax], 0x20

                     loc_4f7c:
0000000000004f7c         sub        rbx, 0x1                                    ; CODE XREF=print_spaces+66
0000000000004f80         jne        loc_4f60

0000000000004f82         pop        rbx
0000000000004f83         ret
                        ; endp
0000000000004f84         align      8

                     loc_4f88:
0000000000004f88         mov        esi, 0x20                                   ; argument #2 for method j___overflow, CODE XREF=print_spaces+31
0000000000004f8d         call       j___overflow                                ; __overflow
0000000000004f92         jmp        loc_4f7c
0000000000004f94         align      8

                     loc_4f98:
0000000000004f98         ret                                                    ; CODE XREF=print_spaces+3
                        ; endp
0000000000004f9a         align      32                                          ; End of unwind block (FDE at 0x1d7c0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60


                     print_field:
0000000000004fa0         cmp        rsi, rdi                                    ; Begin of unwind block (FDE at 0x1d7e0), CODE XREF=sub_31ea+2182, sub_31ea+2230, sub_31ea+2353, sub_31ea+2393, sub_31ea+2441, sub_31ea+2542, sub_31ea+3097, sub_31ea+3233, sub_31ea+3316, sub_31ea+3452, sub_31ea+3554
0000000000004fa3         jbe        loc_51c0

0000000000004fa9         push       r15
0000000000004fab         push       r14
0000000000004fad         lea        r14, qword [diacrit_diac]                   ; diacrit_diac
0000000000004fb4         push       r13
0000000000004fb6         push       r12
0000000000004fb8         lea        r13, qword [edited_flag]                    ; edited_flag
0000000000004fbf         push       rbp
0000000000004fc0         push       rbx
0000000000004fc1         lea        r12, qword [switch_table_1b988]             ; switch_table_1b988
0000000000004fc8         mov        rbx, rdi
0000000000004fcb         mov        r15, rsi
0000000000004fce         sub        rsp, 0x18
0000000000004fd2         nop        word [rax+rax]

                     loc_4fd8:
0000000000004fd8         movzx      edx, byte [rbx]                             ; CODE XREF=print_field+192, print_field+295
0000000000004fdb         movsxd     rax, edx
0000000000004fde         mov        ebp, edx
0000000000004fe0         cmp        byte [r13+rax], 0x0
0000000000004fe6         je         loc_50a0

0000000000004fec         movzx      esi, byte [r14+rax]
0000000000004ff1         test       sil, sil
0000000000004ff4         je         loc_5003

0000000000004ff6         cmp        dword [output_format], 0x3                  ; output_format
0000000000004ffd         je         loc_5130

                     loc_5003:
0000000000005003         cmp        bpl, 0x5c                                   ; CODE XREF=print_field+84
0000000000005007         je         loc_5158

000000000000500d         jg         loc_50e0

0000000000005013         cmp        bpl, 0x22
0000000000005017         jne        loc_5078

0000000000005019         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005020         mov        rax, qword [rdi+0x28]
0000000000005024         cmp        rax, qword [rdi+0x30]
0000000000005028         jae        loc_5328

000000000000502e         lea        rdx, qword [rax+1]
0000000000005032         mov        qword [rdi+0x28], rdx
0000000000005036         mov        byte [rax], 0x22

                     loc_5039:
0000000000005039         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=print_field+914
0000000000005040         mov        rax, qword [rdi+0x28]
0000000000005044         cmp        rax, qword [rdi+0x30]
0000000000005048         jae        loc_5337

000000000000504e         lea        rdx, qword [rax+1]
0000000000005052         add        rbx, 0x1
0000000000005056         cmp        r15, rbx
0000000000005059         mov        qword [rdi+0x28], rdx
000000000000505d         mov        byte [rax], 0x22
0000000000005060         jne        loc_4fd8

0000000000005066         add        rsp, 0x18
000000000000506a         pop        rbx
000000000000506b         pop        rbp
000000000000506c         pop        r12
000000000000506e         pop        r13
0000000000005070         pop        r14
0000000000005072         pop        r15
0000000000005074         ret
                        ; endp
0000000000005075         align      8

                     loc_5078:
0000000000005078         jl         loc_50f2                                    ; CODE XREF=print_field+119

000000000000507a         cmp        bpl, 0x26
000000000000507e         jg         loc_50f2

                     loc_5080:
0000000000005080         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=print_field+336
0000000000005087         mov        rax, qword [rdi+0x28]
000000000000508b         cmp        rax, qword [rdi+0x30]
000000000000508f         jae        loc_5311

0000000000005095         lea        rcx, qword [rax+1]
0000000000005099         mov        qword [rdi+0x28], rcx
000000000000509d         mov        byte [rax], 0x5c

                     loc_50a0:
00000000000050a0         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=print_field+70, print_field+899
00000000000050a7         mov        rax, qword [rdi+0x28]
00000000000050ab         cmp        rax, qword [rdi+0x30]
00000000000050af         jae        loc_5180

00000000000050b5         lea        rdx, qword [rax+1]
00000000000050b9         mov        qword [rdi+0x28], rdx
00000000000050bd         mov        byte [rax], bpl

                     loc_50c0:
00000000000050c0         add        rbx, 0x1                                    ; case 0, CODE XREF=print_field+370, print_field+395, print_field+418, print_field+431, print_field+469, print_field+487, print_field+536, print_field+595, print_field+640, print_field+685, print_field+730
00000000000050c4         cmp        r15, rbx
00000000000050c7         jne        loc_4fd8

00000000000050cd         add        rsp, 0x18
00000000000050d1         pop        rbx
00000000000050d2         pop        rbp
00000000000050d3         pop        r12
00000000000050d5         pop        r13
00000000000050d7         pop        r14
00000000000050d9         pop        r15
00000000000050db         ret
                        ; endp
00000000000050dc         align      32

                     loc_50e0:
00000000000050e0         cmp        bpl, 0x7b                                   ; CODE XREF=print_field+109
00000000000050e4         je         loc_5118

00000000000050e6         cmp        bpl, 0x7d
00000000000050ea         je         loc_5118

00000000000050ec         cmp        bpl, 0x5f
00000000000050f0         je         loc_5080

                     loc_50f2:
00000000000050f2         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=loc_5078, print_field+222
00000000000050f9         mov        rax, qword [rdi+0x28]
00000000000050fd         cmp        rax, qword [rdi+0x30]
0000000000005101         jae        loc_5346

0000000000005107         lea        rdx, qword [rax+1]
000000000000510b         mov        qword [rdi+0x28], rdx
000000000000510f         mov        byte [rax], 0x20
0000000000005112         jmp        loc_50c0
0000000000005114         align      8

                     loc_5118:
0000000000005118         lea        rsi, qword [aAa_1b735+16]                   ; 0x1b745, CODE XREF=print_field+324, print_field+330
000000000000511f         mov        edi, 0x1
0000000000005124         xor        eax, eax
0000000000005126         call       j___printf_chk                              ; __printf_chk
000000000000512b         jmp        loc_50c0
000000000000512d         align      16

                     loc_5130:
0000000000005130         lea        rcx, qword [diacrit_base]                   ; diacrit_base, CODE XREF=print_field+93
0000000000005137         cmp        sil, 0x9
000000000000513b         movsx      ecx, byte [rcx+rax]
000000000000513f         mov        r10d, ecx
0000000000005142         ja         loc_50c0

0000000000005148         movsxd     rax, dword [r12+rsi*4]
000000000000514c         add        rax, r12
000000000000514f         jmp        rax                                         ; switch statement using table at 0x1b988, with 10 cases, 0x50c0,0x5190,0x51c2,0x51f8,0x5225,0x5252,0x527f,0x5299,0x52cf
0000000000005151         align      8

                     loc_5158:
0000000000005158         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fwrite_unlocked, stdout@@GLIBC_2.2.5, CODE XREF=print_field+103
000000000000515f         lea        rdi, qword [aBackslash]                     ; argument "__ptr" for method j_fwrite_unlocked, "\\backslash{}"
0000000000005166         mov        edx, 0xc                                    ; argument "__n" for method j_fwrite_unlocked
000000000000516b         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000005170         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000005175         jmp        loc_50c0
000000000000517a         align      128

                     loc_5180:
0000000000005180         mov        esi, edx                                    ; argument #2 for method j___overflow, CODE XREF=print_field+271
0000000000005182         call       j___overflow                                ; __overflow
0000000000005187         jmp        loc_50c0
000000000000518c         align      16

                     loc_5190:
0000000000005190         lea        rax, qword [aWrittenBySSAnd+27]             ; case 3, 0x1c27b, CODE XREF=print_field+431
0000000000005197         lea        rdx, qword [aFullDocumentat+34]             ; 0x1b806
000000000000519e         cmp        ecx, 0x69
00000000000051a1         lea        rsi, qword [aSc_1b70c]                      ; "\\'%s%c"
00000000000051a8         mov        edi, 0x1
00000000000051ad         cmovne     rdx, rax
00000000000051b1         xor        eax, eax
00000000000051b3         call       j___printf_chk                              ; __printf_chk
00000000000051b8         jmp        loc_50c0
00000000000051bd         align      64

                     loc_51c0:
00000000000051c0         ret                                                    ; CODE XREF=print_field+3
                        ; endp

                     loc_51c2:
00000000000051c2         cmp        r10b, 0x4f                                  ; case 9, CODE XREF=print_field+431
00000000000051c6         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000051cd         je         loc_5373

00000000000051d3         cmp        r10b, 0x6f
00000000000051d7         jne        loc_5355

00000000000051dd         lea        rdi, qword [aAa_1b735+6]                    ; argument "__ptr" for method j_fwrite_unlocked, 0x1b73b
00000000000051e4         mov        edx, 0x4                                    ; argument "__n" for method j_fwrite_unlocked
00000000000051e9         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
00000000000051ee         call       j_fwrite_unlocked                           ; fwrite_unlocked
00000000000051f3         jmp        loc_50c0

                     loc_51f8:
00000000000051f8         lea        rax, qword [aWrittenBySSAnd+27]             ; case 4, 0x1c27b, CODE XREF=print_field+431
00000000000051ff         lea        rdx, qword [aFullDocumentat+34]             ; 0x1b806
0000000000005206         cmp        ecx, 0x69
0000000000005209         lea        rsi, qword [aSc_1b713]                      ; "\\^%s%c"
0000000000005210         mov        edi, 0x1
0000000000005215         cmovne     rdx, rax
0000000000005219         xor        eax, eax
000000000000521b         call       j___printf_chk                              ; __printf_chk
0000000000005220         jmp        loc_50c0

                     loc_5225:
0000000000005225         lea        rax, qword [aWrittenBySSAnd+27]             ; case 5, 0x1c27b, CODE XREF=print_field+431
000000000000522c         lea        rdx, qword [aFullDocumentat+34]             ; 0x1b806
0000000000005233         cmp        ecx, 0x69
0000000000005236         lea        rsi, qword [aSc_1b71a]                      ; "\\\\\"%s%c"
000000000000523d         mov        edi, 0x1
0000000000005242         cmovne     rdx, rax
0000000000005246         xor        eax, eax
0000000000005248         call       j___printf_chk                              ; __printf_chk
000000000000524d         jmp        loc_50c0

                     loc_5252:
0000000000005252         lea        rax, qword [aWrittenBySSAnd+27]             ; case 6, 0x1c27b, CODE XREF=print_field+431
0000000000005259         lea        rdx, qword [aFullDocumentat+34]             ; 0x1b806
0000000000005260         cmp        ecx, 0x69
0000000000005263         lea        rsi, qword [aSc]                            ; "\\~%s%c"
000000000000526a         mov        edi, 0x1
000000000000526f         cmovne     rdx, rax
0000000000005273         xor        eax, eax
0000000000005275         call       j___printf_chk                              ; __printf_chk
000000000000527a         jmp        loc_50c0

                     loc_527f:
000000000000527f         lea        rsi, qword [aCc]                            ; case 7, "\\c{%c}", CODE XREF=print_field+431
0000000000005286         mov        edx, ecx
0000000000005288         mov        edi, 0x1
000000000000528d         xor        eax, eax
000000000000528f         call       j___printf_chk                              ; __printf_chk
0000000000005294         jmp        loc_50c0

                     loc_5299:
0000000000005299         cmp        r10b, 0x41                                  ; case 8, CODE XREF=print_field+431
000000000000529d         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000052a4         je         loc_538e

00000000000052aa         cmp        r10b, 0x61
00000000000052ae         jne        loc_5355

00000000000052b4         lea        rdi, qword [aAa]                            ; argument "__ptr" for method j_fwrite_unlocked, "\\aa{}"
00000000000052bb         mov        edx, 0x5                                    ; argument "__n" for method j_fwrite_unlocked
00000000000052c0         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
00000000000052c5         call       j_fwrite_unlocked                           ; fwrite_unlocked
00000000000052ca         jmp        loc_50c0

                     loc_52cf:
00000000000052cf         cmp        r10b, 0x4f                                  ; case 1, CODE XREF=print_field+431
00000000000052d3         mov        rcx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000052da         je         loc_53ca

00000000000052e0         jle        loc_53a9

00000000000052e6         cmp        r10b, 0x61
00000000000052ea         je         loc_53e5

00000000000052f0         cmp        r10b, 0x6f
00000000000052f4         jne        loc_5355

00000000000052f6         lea        rdi, qword [aOe]                            ; argument "__ptr" for method j_fwrite_unlocked, "\\oe{}"
00000000000052fd         mov        edx, 0x5                                    ; argument "__n" for method j_fwrite_unlocked
0000000000005302         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000005307         call       j_fwrite_unlocked                           ; fwrite_unlocked
000000000000530c         jmp        loc_50c0

                     loc_5311:
0000000000005311         mov        esi, 0x5c                                   ; argument #2 for method j___overflow, CODE XREF=print_field+239
0000000000005316         mov        dword [rsp+0x48+var_3C], edx
000000000000531a         call       j___overflow                                ; __overflow
000000000000531f         mov        edx, dword [rsp+0x48+var_3C]
0000000000005323         jmp        loc_50a0

                     loc_5328:
0000000000005328         mov        esi, 0x22                                   ; argument #2 for method j___overflow, CODE XREF=print_field+136
000000000000532d         call       j___overflow                                ; __overflow
0000000000005332         jmp        loc_5039

                     loc_5337:
0000000000005337         mov        esi, 0x22                                   ; argument #2 for method j___overflow, CODE XREF=print_field+168
000000000000533c         call       j___overflow                                ; __overflow
0000000000005341         jmp        loc_50c0

                     loc_5346:
0000000000005346         mov        esi, 0x20                                   ; argument #2 for method j___overflow, CODE XREF=print_field+353
000000000000534b         call       j___overflow                                ; __overflow
0000000000005350         jmp        loc_50c0

                     loc_5355:
0000000000005355         mov        rax, qword [rcx+0x28]                       ; CODE XREF=print_field+567, print_field+782, print_field+852, print_field+1037
0000000000005359         cmp        rax, qword [rcx+0x30]
000000000000535d         jae        loc_5400

0000000000005363         lea        rdx, qword [rax+1]
0000000000005367         mov        qword [rcx+0x28], rdx
000000000000536b         mov        byte [rax], 0x20
000000000000536e         jmp        loc_50c0

                     loc_5373:
0000000000005373         lea        rdi, qword [aAa_1b735+11]                   ; argument "__ptr" for method j_fwrite_unlocked, 0x1b740, CODE XREF=print_field+557
000000000000537a         mov        edx, 0x4                                    ; argument "__n" for method j_fwrite_unlocked
000000000000537f         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
0000000000005384         call       j_fwrite_unlocked                           ; fwrite_unlocked
0000000000005389         jmp        loc_50c0

                     loc_538e:
000000000000538e         lea        rdi, qword [aAa_1b735]                      ; argument "__ptr" for method j_fwrite_unlocked, "\\AA{}", CODE XREF=print_field+772
0000000000005395         mov        edx, 0x5                                    ; argument "__n" for method j_fwrite_unlocked
000000000000539a         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
000000000000539f         call       j_fwrite_unlocked                           ; fwrite_unlocked
00000000000053a4         jmp        loc_50c0

                     loc_53a9:
00000000000053a9         cmp        r10b, 0x41                                  ; CODE XREF=print_field+832
00000000000053ad         jne        loc_5355

00000000000053af         lea        rdi, qword [aAe_1b706]                      ; argument "__ptr" for method j_fwrite_unlocked, "\\AE{}"
00000000000053b6         mov        edx, 0x5                                    ; argument "__n" for method j_fwrite_unlocked
00000000000053bb         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
00000000000053c0         call       j_fwrite_unlocked                           ; fwrite_unlocked
00000000000053c5         jmp        loc_50c0

                     loc_53ca:
00000000000053ca         lea        rdi, qword [aOe_1b6fa]                      ; argument "__ptr" for method j_fwrite_unlocked, "\\OE{}", CODE XREF=print_field+826
00000000000053d1         mov        edx, 0x5                                    ; argument "__n" for method j_fwrite_unlocked
00000000000053d6         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
00000000000053db         call       j_fwrite_unlocked                           ; fwrite_unlocked
00000000000053e0         jmp        loc_50c0

                     loc_53e5:
00000000000053e5         lea        rdi, qword [aAe]                            ; argument "__ptr" for method j_fwrite_unlocked, "\\ae{}", CODE XREF=print_field+842
00000000000053ec         mov        edx, 0x5                                    ; argument "__n" for method j_fwrite_unlocked
00000000000053f1         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite_unlocked
00000000000053f6         call       j_fwrite_unlocked                           ; fwrite_unlocked
00000000000053fb         jmp        loc_50c0

                     loc_5400:
0000000000005400         mov        esi, 0x20                                   ; argument #2 for method j___overflow, CODE XREF=print_field+957
0000000000005405         mov        rdi, rcx                                    ; argument #1 for method j___overflow
0000000000005408         call       j___overflow                                ; __overflow
000000000000540d         jmp        loc_50c0
0000000000005412         align      32                                          ; End of unwind block (FDE at 0x1d7e0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     compare_occurs:
0000000000005420         push       rbp                                         ; Begin of unwind block (FDE at 0x1d860), DATA XREF=sub_31ea+447
0000000000005421         push       rbx
0000000000005422         mov        rbp, rdi
0000000000005425         mov        rbx, rsi
0000000000005428         call       compare_words                               ; compare_words
000000000000542d         test       eax, eax
000000000000542f         jne        loc_5440

0000000000005431         mov        rax, qword [rbx]
0000000000005434         cmp        qword [rbp], rax
0000000000005438         jb         loc_5448

000000000000543a         seta       al
000000000000543d         movzx      eax, al

                     loc_5440:
0000000000005440         pop        rbx                                         ; CODE XREF=compare_occurs+15, compare_occurs+45
0000000000005441         pop        rbp
0000000000005442         ret
                        ; endp
0000000000005443         align      8

                     loc_5448:
0000000000005448         mov        eax, 0xffffffff                             ; CODE XREF=compare_occurs+24
000000000000544d         jmp        loc_5440
000000000000544f         align      16                                          ; End of unwind block (FDE at 0x1d860)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     search_table.isra.1:
0000000000005450         sub        rdx, 0x1                                    ; Begin of unwind block (FDE at 0x1d884), CODE XREF=main+2236, main+2278
0000000000005454         js         loc_54ce

0000000000005456         push       r14
0000000000005458         xor        r14d, r14d
000000000000545b         push       r13
000000000000545d         mov        r13, rdx
0000000000005460         push       r12
0000000000005462         mov        r12, rsi
0000000000005465         push       rbp
0000000000005466         mov        rbp, rdi
0000000000005469         push       rbx
000000000000546a         jmp        loc_547b
000000000000546c         align      16

                     loc_5470:
0000000000005470         je         loc_54c0                                    ; CODE XREF=search_table.isra.1+80

0000000000005472         lea        r14, qword [rbx+1]
0000000000005476         cmp        r14, r13
0000000000005479         jg         loc_54ab

                     loc_547b:
000000000000547b         lea        rax, qword [r14+r13]                        ; CODE XREF=search_table.isra.1+26, search_table.isra.1+89
000000000000547f         mov        rdi, rbp
0000000000005482         mov        rbx, rax
0000000000005485         shr        rbx, 0x3f
0000000000005489         add        rbx, rax
000000000000548c         sar        rbx, 0x1
000000000000548f         mov        rsi, rbx
0000000000005492         shl        rsi, 0x4
0000000000005496         add        rsi, r12
0000000000005499         call       compare_words                               ; compare_words
000000000000549e         test       eax, eax
00000000000054a0         jns        loc_5470

00000000000054a2         lea        r13, qword [rbx-1]
00000000000054a6         cmp        r14, r13
00000000000054a9         jle        loc_547b

                     loc_54ab:
00000000000054ab         pop        rbx                                         ; CODE XREF=search_table.isra.1+41
00000000000054ac         xor        eax, eax
00000000000054ae         pop        rbp
00000000000054af         pop        r12
00000000000054b1         pop        r13
00000000000054b3         pop        r14
00000000000054b5         ret
                        ; endp
00000000000054b6         align      64

                     loc_54c0:
00000000000054c0         pop        rbx                                         ; CODE XREF=loc_5470
00000000000054c1         mov        eax, 0x1
00000000000054c6         pop        rbp
00000000000054c7         pop        r12
00000000000054c9         pop        r13
00000000000054cb         pop        r14
00000000000054cd         ret
                        ; endp

                     loc_54ce:
00000000000054ce         xor        eax, eax                                    ; CODE XREF=search_table.isra.1+4
00000000000054d0         ret
                        ; endp
00000000000054d1         align      32                                          ; End of unwind block (FDE at 0x1d884)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     usage:
00000000000054e0         push       r13                                         ; Begin of unwind block (FDE at 0x1d8d8), CODE XREF=sub_31ea+4867, sub_31ea+5133, __argmatch_die+5
00000000000054e2         push       r12
00000000000054e4         mov        edx, 0x5
00000000000054e9         push       rbp
00000000000054ea         push       rbx
00000000000054eb         mov        ebp, edi
00000000000054ed         sub        rsp, 0x88
00000000000054f4         mov        rbx, qword [program_name]                   ; program_name
00000000000054fb         mov        rax, qword [fs:0x28]
0000000000005504         mov        qword [rsp+0xa8+var_30], rax
0000000000005509         xor        eax, eax
000000000000550b         test       edi, edi
000000000000550d         je         loc_553d

000000000000550f         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
0000000000005516         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005518         call       j_dcgettext                                 ; dcgettext
000000000000551d         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000005524         mov        rdx, rax
0000000000005527         mov        rcx, rbx
000000000000552a         mov        esi, 0x1
000000000000552f         xor        eax, eax
0000000000005531         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_5536:
0000000000005536         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+902
0000000000005538         call       j_exit                                      ; exit
                        ; endp

                     loc_553d:
000000000000553d         lea        rsi, qword [aUsageSOptionIn]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... [INPUT]...   (without -G)\\n  or:  %s -G [OPTION]... [INPUT [OUTPUT]]\\n", CODE XREF=usage+45
0000000000005544         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005546         call       j_dcgettext                                 ; dcgettext
000000000000554b         mov        rcx, rbx
000000000000554e         mov        rdx, rbx
0000000000005551         mov        rsi, rax
0000000000005554         mov        edi, 0x1
0000000000005559         xor        eax, eax
000000000000555b         call       j___printf_chk                              ; __printf_chk
0000000000005560         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005567         lea        rsi, qword [aOutputAPermute]                ; argument "msgid" for method j_dcgettext, "Output a permuted index, including context, of the words in the input files.\\n"
000000000000556e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005573         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005575         call       j_dcgettext                                 ; dcgettext
000000000000557a         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000557d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005580         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005585         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000558c         lea        rsi, qword [aNwithNoFileOrW]                ; argument "msgid" for method j_dcgettext, "\\nWith no FILE, or when FILE is -, read standard input.\\n"
0000000000005593         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005598         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000559a         call       j_dcgettext                                 ; dcgettext
000000000000559f         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000055a2         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000055a5         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000055aa         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000055b1         lea        rsi, qword [aNmandatoryArgu]                ; argument "msgid" for method j_dcgettext, "\\nMandatory arguments to long options are mandatory for short options too.\\n"
00000000000055b8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000055bd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000055bf         call       j_dcgettext                                 ; dcgettext
00000000000055c4         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000055c7         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000055ca         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000055cf         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000055d6         lea        rsi, qword [aAAutoreference]                ; argument "msgid" for method j_dcgettext, "  -A, --auto-reference           output automatically generated references\\n  -G, --traditional              behave more like System V 'ptx'\\n"
00000000000055dd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000055e2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000055e4         call       j_dcgettext                                 ; dcgettext
00000000000055e9         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000055ec         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000055ef         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000055f4         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000055fb         lea        rsi, qword [aFFlagtruncatio]                ; argument "msgid" for method j_dcgettext, "  -F, --flag-truncation=STRING   use STRING for flagging line truncations.\\n                                 The default is '/'\\n"
0000000000005602         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005607         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005609         call       j_dcgettext                                 ; dcgettext
000000000000560e         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005611         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005614         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005619         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005620         lea        rsi, qword [aMMacronamestri]                ; argument "msgid" for method j_dcgettext, "  -M, --macro-name=STRING        macro name to use instead of 'xx'\\n  -O, --format=roff              generate output as roff directives\\n  -R, --right-side-refs          put references at right, not counted in -w\\n  -S, --sentence-regexp=REGEXP   for end of l…"
0000000000005627         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000562c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000562e         call       j_dcgettext                                 ; dcgettext
0000000000005633         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005636         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005639         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000563e         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005645         lea        rsi, qword [aWWordregexpreg]                ; argument "msgid" for method j_dcgettext, "  -W, --word-regexp=REGEXP       use REGEXP to match each keyword\\n  -b, --break-file=FILE          word break characters in this FILE\\n  -f, --ignore-case              fold lower case to upper case for sorting\\n  -g, --gap-size=NUMBER          gap size in co…"
000000000000564c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005651         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005653         call       j_dcgettext                                 ; dcgettext
0000000000005658         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000565b         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000565e         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005663         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000566a         lea        rsi, qword [aRReferencesFir]                ; argument "msgid" for method j_dcgettext, "  -r, --references               first field of each line is a reference\\n  -t, --typeset-mode               - not implemented -\\n  -w, --width=NUMBER             output width in columns, reference excluded\\n"
0000000000005671         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005676         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005678         call       j_dcgettext                                 ; dcgettext
000000000000567d         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005680         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005683         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005688         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000568f         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
0000000000005696         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000569b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000569d         call       j_dcgettext                                 ; dcgettext
00000000000056a2         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000056a5         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000056a8         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000056ad         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000056b4         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
00000000000056bb         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000056c0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000056c2         call       j_dcgettext                                 ; dcgettext
00000000000056c7         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000056ca         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000056cd         lea        rbx, qword [aBackslash+13]                  ; 0x1b758
00000000000056d4         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000056d9         lea        rax, qword [aBackslash+17]                  ; 0x1b75c
00000000000056e0         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
00000000000056e7         mov        qword [rsp+0xa8+var_48], 0x0
00000000000056f0         mov        qword [rsp+0xa8+var_40], 0x0
00000000000056f9         mov        rdx, rsp
00000000000056fc         mov        qword [rsp+0xa8+var_A8], rax
0000000000005700         lea        rax, qword [aTestInvocation]                ; "test invocation"
0000000000005707         mov        qword [rsp+0xa8+var_78], rcx
000000000000570c         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
0000000000005713         mov        qword [rsp+0xa8+var_A0], rax
0000000000005718         lea        rax, qword [aCoreutils]                     ; "coreutils"
000000000000571f         mov        qword [rsp+0xa8+var_68], rcx
0000000000005724         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
000000000000572b         mov        qword [rsp+0xa8+var_98], rax
0000000000005730         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
0000000000005737         mov        qword [rsp+0xa8+var_58], rcx
000000000000573c         mov        qword [rsp+0xa8+var_90], rax
0000000000005741         lea        rax, qword [aSha224sum]                     ; "sha224sum"
0000000000005748         mov        qword [rsp+0xa8+var_88], rax
000000000000574d         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
0000000000005754         mov        qword [rsp+0xa8+var_80], rax
0000000000005759         mov        qword [rsp+0xa8+var_70], rax
000000000000575e         mov        qword [rsp+0xa8+var_60], rax
0000000000005763         mov        qword [rsp+0xa8+var_50], rax
0000000000005768         nop        dword [rax+rax]

                     loc_5770:
0000000000005770         add        rdx, 0x10                                   ; CODE XREF=usage+685
0000000000005774         mov        rdi, qword [rdx]
0000000000005777         test       rdi, rdi
000000000000577a         je         loc_578f

000000000000577c         mov        ecx, 0x4
0000000000005781         mov        rsi, rbx
0000000000005784         rep  cmpsb byte [rsi], byte [rdi]
0000000000005786         seta       al
0000000000005789         sbb        al, 0x0
000000000000578b         test       al, al
000000000000578d         jne        loc_5770

                     loc_578f:
000000000000578f         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+666
0000000000005793         xor        edi, edi
0000000000005795         mov        edx, 0x5
000000000000579a         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
00000000000057a1         test       r12, r12
00000000000057a4         je         loc_586b

00000000000057aa         call       j_dcgettext                                 ; dcgettext
00000000000057af         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000057b6         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x1b7d2
00000000000057bd         mov        rsi, rax
00000000000057c0         mov        edi, 0x1
00000000000057c5         xor        eax, eax
00000000000057c7         call       j___printf_chk                              ; __printf_chk
00000000000057cc         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
00000000000057ce         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
00000000000057d3         call       j_setlocale                                 ; setlocale
00000000000057d8         test       rax, rax
00000000000057db         je         loc_57f9

00000000000057dd         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x1b7e0
00000000000057e4         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
00000000000057e9         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
00000000000057ec         call       j_strncmp                                   ; strncmp
00000000000057f1         test       eax, eax
00000000000057f3         jne        loc_5900

                     loc_57f9:
00000000000057f9         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+763, usage+1093
0000000000005800         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005802         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005807         call       j_dcgettext                                 ; dcgettext
000000000000580c         lea        rcx, qword [aBackslash+13]                  ; 0x1b758
0000000000005813         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
000000000000581a         mov        rsi, rax
000000000000581d         mov        edi, 0x1
0000000000005822         xor        eax, eax
0000000000005824         call       j___printf_chk                              ; __printf_chk
0000000000005829         cmp        r12, rbx
000000000000582c         lea        rcx, qword [aMulticallInvoc+10]             ; 0x1b778
0000000000005833         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0x1c27b
000000000000583a         cmove      rbx, rcx

                     loc_583e:
000000000000583e         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+1044
0000000000005845         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005847         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000584c         call       j_dcgettext                                 ; dcgettext
0000000000005851         mov        rcx, rbx
0000000000005854         mov        rsi, rax
0000000000005857         mov        rdx, r12
000000000000585a         mov        edi, 0x1
000000000000585f         xor        eax, eax
0000000000005861         call       j___printf_chk                              ; __printf_chk
0000000000005866         jmp        loc_5536

                     loc_586b:
000000000000586b         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+708
0000000000005870         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000005877         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x1b7d2
000000000000587e         mov        rsi, rax
0000000000005881         mov        edi, 0x1
0000000000005886         xor        eax, eax
0000000000005888         call       j___printf_chk                              ; __printf_chk
000000000000588d         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000588f         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000005894         call       j_setlocale                                 ; setlocale
0000000000005899         test       rax, rax
000000000000589c         je         loc_58b6

000000000000589e         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x1b7e0
00000000000058a5         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
00000000000058aa         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
00000000000058ad         call       j_strncmp                                   ; strncmp
00000000000058b2         test       eax, eax
00000000000058b4         jne        loc_58f9

                     loc_58b6:
00000000000058b6         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+956
00000000000058bd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000058c2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000058c4         lea        r12, qword [aBackslash+13]                  ; 0x1b758
00000000000058cb         lea        rbx, qword [aMulticallInvoc+10]             ; 0x1b778
00000000000058d2         call       j_dcgettext                                 ; dcgettext
00000000000058d7         lea        rcx, qword [aBackslash+13]                  ; 0x1b758
00000000000058de         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000058e5         mov        rsi, rax
00000000000058e8         mov        edi, 0x1
00000000000058ed         xor        eax, eax
00000000000058ef         call       j___printf_chk                              ; __printf_chk
00000000000058f4         jmp        loc_583e

                     loc_58f9:
00000000000058f9         lea        r12, qword [aBackslash+13]                  ; 0x1b758, CODE XREF=usage+980

                     loc_5900:
0000000000005900         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+787
0000000000005907         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
000000000000590e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005910         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005915         call       j_dcgettext                                 ; dcgettext
000000000000591a         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
000000000000591d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005920         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005925         jmp        loc_57f9
000000000000592a         align      16                                          ; End of unwind block (FDE at 0x1d8d8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __argmatch_die:
0000000000005930         mov        edi, 0x1                                    ; Begin of unwind block (FDE at 0x1d954), argument #1 for method usage, DATA XREF=argmatch_die
0000000000005935         jmp        usage                                       ; usage
                        ; endp
000000000000593a         align      64                                          ; End of unwind block (FDE at 0x1d954)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_41: int8_t, -65
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     argmatch:
0000000000005940         push       r15                                         ; Begin of unwind block (FDE at 0x1d968), CODE XREF=__xargmatch_internal+44
0000000000005942         push       r14
0000000000005944         mov        r15, rsi
0000000000005947         push       r13
0000000000005949         push       r12
000000000000594b         mov        r13, rcx
000000000000594e         push       rbp
000000000000594f         push       rbx
0000000000005950         mov        rbp, rdx
0000000000005953         sub        rsp, 0x28
0000000000005957         mov        qword [rsp+0x58+var_50], rdi
000000000000595c         mov        qword [rsp+0x58+var_40], rdx
0000000000005961         call       j_strlen                                    ; strlen
0000000000005966         mov        r14, qword [r15]
0000000000005969         mov        qword [rsp+0x58+var_58], 0xffffffffffffffff
0000000000005971         test       r14, r14
0000000000005974         je         loc_5a2d

000000000000597a         mov        r12, rax
000000000000597d         mov        byte [rsp+0x58+var_41], 0x0
0000000000005982         xor        ebx, ebx
0000000000005984         jmp        loc_59d7
0000000000005986         align      16

                     loc_5990:
0000000000005990         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=argmatch+189
0000000000005995         test       rax, rax
0000000000005998         je         loc_5a40

000000000000599e         mov        rdi, qword [rsp+0x58+var_58]
00000000000059a2         mov        rdx, r13                                    ; argument "__n" for method j_memcmp
00000000000059a5         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
00000000000059a8         imul       rdi, r13
00000000000059ac         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
00000000000059af         call       j_memcmp                                    ; memcmp
00000000000059b4         test       eax, eax
00000000000059b6         movzx      eax, byte [rsp+0x58+var_41]
00000000000059bb         mov        ecx, 0x1
00000000000059c0         cmovne     eax, ecx
00000000000059c3         mov        byte [rsp+0x58+var_41], al

                     loc_59c7:
00000000000059c7         add        rbx, 0x1                                    ; CODE XREF=argmatch+169, argmatch+261
00000000000059cb         add        rbp, r13
00000000000059ce         mov        r14, qword [r15+rbx*8]
00000000000059d2         test       r14, r14
00000000000059d5         je         loc_5a18

                     loc_59d7:
00000000000059d7         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__s2" for method j_strncmp, CODE XREF=argmatch+68, argmatch+209
00000000000059dc         mov        rdx, r12                                    ; argument "__n" for method j_strncmp
00000000000059df         mov        rdi, r14                                    ; argument "__s1" for method j_strncmp
00000000000059e2         call       j_strncmp                                   ; strncmp
00000000000059e7         test       eax, eax
00000000000059e9         jne        loc_59c7

00000000000059eb         mov        rdi, r14                                    ; argument "__s" for method j_strlen
00000000000059ee         call       j_strlen                                    ; strlen
00000000000059f3         cmp        rax, r12
00000000000059f6         je         loc_5a50

00000000000059f8         cmp        qword [rsp+0x58+var_58], 0xffffffffffffffff
00000000000059fd         jne        loc_5990

00000000000059ff         mov        qword [rsp+0x58+var_58], rbx
0000000000005a03         add        rbx, 0x1
0000000000005a07         add        rbp, r13
0000000000005a0a         mov        r14, qword [r15+rbx*8]
0000000000005a0e         test       r14, r14
0000000000005a11         jne        loc_59d7

0000000000005a13         nop        dword [rax+rax]

                     loc_5a18:
0000000000005a18         cmp        byte [rsp+0x58+var_41], 0x0                 ; CODE XREF=argmatch+149
0000000000005a1d         mov        rax, 0xfffffffffffffffe
0000000000005a24         cmove      rax, qword [rsp+0x58+var_58]
0000000000005a29         mov        qword [rsp+0x58+var_58], rax

                     loc_5a2d:
0000000000005a2d         mov        rax, qword [rsp+0x58+var_58]                ; CODE XREF=argmatch+52, argmatch+276
0000000000005a31         add        rsp, 0x28
0000000000005a35         pop        rbx
0000000000005a36         pop        rbp
0000000000005a37         pop        r12
0000000000005a39         pop        r13
0000000000005a3b         pop        r14
0000000000005a3d         pop        r15
0000000000005a3f         ret
                        ; endp

                     loc_5a40:
0000000000005a40         mov        byte [rsp+0x58+var_41], 0x1                 ; CODE XREF=argmatch+88
0000000000005a45         jmp        loc_59c7
0000000000005a47         align      16

                     loc_5a50:
0000000000005a50         mov        qword [rsp+0x58+var_58], rbx                ; CODE XREF=argmatch+182
0000000000005a54         jmp        loc_5a2d
0000000000005a56         align      32                                          ; End of unwind block (FDE at 0x1d968)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_invalid:
0000000000005a60         cmp        rdx, 0xffffffffffffffff                     ; Begin of unwind block (FDE at 0x1d9b4), CODE XREF=__xargmatch_internal+78
0000000000005a64         push       r12
0000000000005a66         mov        edx, 0x5
0000000000005a6b         push       rbp
0000000000005a6c         mov        r12, rsi
0000000000005a6f         push       rbx
0000000000005a70         mov        rbp, rdi
0000000000005a73         je         loc_5ac0

0000000000005a75         lea        rsi, qword [aAmbiguousArgum]                ; argument "msgid" for method j_dcgettext, "ambiguous argument %s for %s"
0000000000005a7c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005a7e         call       j_dcgettext                                 ; dcgettext
0000000000005a83         mov        rbx, rax

                     loc_5a86:
0000000000005a86         mov        rsi, rbp                                    ; CODE XREF=argmatch_invalid+113
0000000000005a89         mov        edi, 0x1
0000000000005a8e         call       quote_n                                     ; quote_n
0000000000005a93         mov        rdx, r12
0000000000005a96         mov        rbp, rax
0000000000005a99         mov        esi, 0x8
0000000000005a9e         xor        edi, edi
0000000000005aa0         call       quotearg_n_style                            ; quotearg_n_style
0000000000005aa5         mov        r8, rbp
0000000000005aa8         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000005aab         mov        rcx, rax
0000000000005aae         pop        rbx
0000000000005aaf         pop        rbp
0000000000005ab0         pop        r12
0000000000005ab2         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000005ab4         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005ab6         xor        eax, eax
0000000000005ab8         jmp        j_error                                     ; error
                        ; endp
0000000000005abd         align      64

                     loc_5ac0:
0000000000005ac0         lea        rsi, qword [aInvalidArgumen]                ; argument "msgid" for method j_dcgettext, "invalid argument %s for %s", CODE XREF=argmatch_invalid+19
0000000000005ac7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005ac9         call       j_dcgettext                                 ; dcgettext
0000000000005ace         mov        rbx, rax
0000000000005ad1         jmp        loc_5a86
0000000000005ad3         align      32                                          ; End of unwind block (FDE at 0x1d9b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_valid:
0000000000005ae0         push       r15                                         ; Begin of unwind block (FDE at 0x1d9e0), CODE XREF=__xargmatch_internal+92
0000000000005ae2         push       r14
0000000000005ae4         mov        r14, rdi
0000000000005ae7         push       r13
0000000000005ae9         push       r12
0000000000005aeb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005aed         push       rbp
0000000000005aee         push       rbx
0000000000005aef         mov        rbp, rsi
0000000000005af2         lea        rsi, qword [aValidArguments]                ; argument "msgid" for method j_dcgettext, "Valid arguments are:"
0000000000005af9         mov        r12, rdx
0000000000005afc         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005b01         sub        rsp, 0x8
0000000000005b05         mov        rbx, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000005b0c         call       j_dcgettext                                 ; dcgettext
0000000000005b11         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005b14         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005b17         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005b1c         mov        r15, qword [r14]
0000000000005b1f         test       r15, r15
0000000000005b22         je         loc_5bb8

0000000000005b28         xor        r13d, r13d
0000000000005b2b         xor        ebx, ebx
0000000000005b2d         jmp        loc_5b68
0000000000005b2f         align      16

                     loc_5b30:
0000000000005b30         mov        rdi, r15                                    ; CODE XREF=argmatch_valid+139, argmatch_valid+157
0000000000005b33         add        rbx, 0x1
0000000000005b37         mov        r13, rbp
0000000000005b3a         call       quote                                       ; quote
0000000000005b3f         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000005b46         lea        rdx, qword [aNS]                            ; "\\n  - %s"
0000000000005b4d         mov        rcx, rax
0000000000005b50         mov        esi, 0x1
0000000000005b55         xor        eax, eax
0000000000005b57         add        rbp, r12
0000000000005b5a         call       j___fprintf_chk                             ; __fprintf_chk
0000000000005b5f         mov        r15, qword [r14+rbx*8]
0000000000005b63         test       r15, r15
0000000000005b66         je         loc_5bb8

                     loc_5b68:
0000000000005b68         test       rbx, rbx                                    ; CODE XREF=argmatch_valid+77, argmatch_valid+210
0000000000005b6b         je         loc_5b30

0000000000005b6d         mov        rdx, r12                                    ; argument "__n" for method j_memcmp
0000000000005b70         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000005b73         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
0000000000005b76         call       j_memcmp                                    ; memcmp
0000000000005b7b         test       eax, eax
0000000000005b7d         jne        loc_5b30

0000000000005b7f         mov        rdi, r15
0000000000005b82         add        rbx, 0x1
0000000000005b86         add        rbp, r12
0000000000005b89         call       quote                                       ; quote
0000000000005b8e         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000005b95         lea        rdx, qword [aNS+8]                          ; 0x1ba12
0000000000005b9c         mov        rcx, rax
0000000000005b9f         mov        esi, 0x1
0000000000005ba4         xor        eax, eax
0000000000005ba6         call       j___fprintf_chk                             ; __fprintf_chk
0000000000005bab         mov        r15, qword [r14+rbx*8]
0000000000005baf         test       r15, r15
0000000000005bb2         jne        loc_5b68

0000000000005bb4         nop        dword [rax]

                     loc_5bb8:
0000000000005bb8         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=argmatch_valid+66, argmatch_valid+134
0000000000005bbf         mov        rax, qword [rdi+0x28]
0000000000005bc3         cmp        rax, qword [rdi+0x30]
0000000000005bc7         jae        loc_5be8

0000000000005bc9         lea        rdx, qword [rax+1]
0000000000005bcd         mov        qword [rdi+0x28], rdx
0000000000005bd1         mov        byte [rax], 0xa
0000000000005bd4         add        rsp, 0x8
0000000000005bd8         pop        rbx
0000000000005bd9         pop        rbp
0000000000005bda         pop        r12
0000000000005bdc         pop        r13
0000000000005bde         pop        r14
0000000000005be0         pop        r15
0000000000005be2         ret
                        ; endp
0000000000005be3         align      8

                     loc_5be8:
0000000000005be8         add        rsp, 0x8                                    ; CODE XREF=argmatch_valid+231
0000000000005bec         mov        esi, 0xa                                    ; argument #2 for method j___overflow
0000000000005bf1         pop        rbx
0000000000005bf2         pop        rbp
0000000000005bf3         pop        r12
0000000000005bf5         pop        r13
0000000000005bf7         pop        r14
0000000000005bf9         pop        r15
0000000000005bfb         jmp        j___overflow                                ; __overflow
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __xargmatch_internal:
0000000000005c00         push       r15                                         ; End of unwind block (FDE at 0x1d9e0), Begin of unwind block (FDE at 0x1da40), CODE XREF=main+390
0000000000005c02         push       r14
0000000000005c04         mov        r14, rdi
0000000000005c07         push       r13
0000000000005c09         push       r12
0000000000005c0b         mov        r12, rsi
0000000000005c0e         push       rbp
0000000000005c0f         push       rbx
0000000000005c10         mov        rbp, rcx
0000000000005c13         mov        rbx, rdx
0000000000005c16         mov        rcx, r8
0000000000005c19         mov        rdx, rbp
0000000000005c1c         sub        rsp, 0x8
0000000000005c20         mov        rsi, rbx
0000000000005c23         mov        rdi, r12
0000000000005c26         mov        r15, r8
0000000000005c29         mov        r13, r9
0000000000005c2c         call       argmatch                                    ; argmatch
0000000000005c31         test       rax, rax
0000000000005c34         js         loc_5c45

                     loc_5c36:
0000000000005c36         add        rsp, 0x8                                    ; CODE XREF=__xargmatch_internal+107
0000000000005c3a         pop        rbx
0000000000005c3b         pop        rbp
0000000000005c3c         pop        r12
0000000000005c3e         pop        r13
0000000000005c40         pop        r14
0000000000005c42         pop        r15
0000000000005c44         ret
                        ; endp

                     loc_5c45:
0000000000005c45         mov        rdx, rax                                    ; CODE XREF=__xargmatch_internal+52
0000000000005c48         mov        rsi, r12
0000000000005c4b         mov        rdi, r14
0000000000005c4e         call       argmatch_invalid                            ; argmatch_invalid
0000000000005c53         mov        rdx, r15
0000000000005c56         mov        rsi, rbp
0000000000005c59         mov        rdi, rbx
0000000000005c5c         call       argmatch_valid                              ; argmatch_valid
0000000000005c61         call       r13
0000000000005c64         mov        rax, 0xffffffffffffffff
0000000000005c6b         jmp        loc_5c36
0000000000005c6d         align      16                                          ; End of unwind block (FDE at 0x1da40)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_to_argument:
0000000000005c70         push       r14                                         ; Begin of unwind block (FDE at 0x1da8c)
0000000000005c72         push       r13
0000000000005c74         push       r12
0000000000005c76         push       rbp
0000000000005c77         push       rbx
0000000000005c78         mov        r14, qword [rsi]
0000000000005c7b         test       r14, r14
0000000000005c7e         je         loc_5cb1

0000000000005c80         mov        r12, rcx
0000000000005c83         mov        r13, rdi
0000000000005c86         mov        rbp, rdx
0000000000005c89         lea        rbx, qword [rsi+8]
0000000000005c8d         jmp        loc_5c9f
0000000000005c8f         align      16

                     loc_5c90:
0000000000005c90         mov        r14, qword [rbx]                            ; CODE XREF=argmatch_to_argument+63
0000000000005c93         add        rbp, r12
0000000000005c96         add        rbx, 0x8
0000000000005c9a         test       r14, r14
0000000000005c9d         je         loc_5cb1

                     loc_5c9f:
0000000000005c9f         mov        rdx, r12                                    ; argument "__n" for method j_memcmp, CODE XREF=argmatch_to_argument+29
0000000000005ca2         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000005ca5         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
0000000000005ca8         call       j_memcmp                                    ; memcmp
0000000000005cad         test       eax, eax
0000000000005caf         jne        loc_5c90

                     loc_5cb1:
0000000000005cb1         pop        rbx                                         ; CODE XREF=argmatch_to_argument+14, argmatch_to_argument+45
0000000000005cb2         mov        rax, r14
0000000000005cb5         pop        rbp
0000000000005cb6         pop        r12
0000000000005cb8         pop        r13
0000000000005cba         pop        r14
0000000000005cbc         ret
                        ; endp
0000000000005cbd         align      64                                          ; End of unwind block (FDE at 0x1da8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000005cc0         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0x1dacc), file_name
0000000000005cc7         ret
                        ; endp
0000000000005cc8         align      16                                          ; End of unwind block (FDE at 0x1dacc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000005cd0         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0x1dae0), ignore_EPIPE
0000000000005cd7         ret
                        ; endp
0000000000005cd8         align      32                                          ; End of unwind block (FDE at 0x1dae0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
0000000000005ce0         push       rbp                                         ; Begin of unwind block (FDE at 0x1daf4), DATA XREF=main+123
0000000000005ce1         push       rbx
0000000000005ce2         sub        rsp, 0x8
0000000000005ce6         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005ced         call       close_stream                                ; close_stream
0000000000005cf2         test       eax, eax
0000000000005cf4         je         loc_5d0c

0000000000005cf6         call       j___errno_location                          ; __errno_location
0000000000005cfb         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
0000000000005d02         mov        rbx, rax
0000000000005d05         je         loc_5d23

0000000000005d07         cmp        dword [rax], 0x20
0000000000005d0a         jne        loc_5d23

                     loc_5d0c:
0000000000005d0c         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
0000000000005d13         call       close_stream                                ; close_stream
0000000000005d18         test       eax, eax
0000000000005d1a         jne        loc_5d62

0000000000005d1c         add        rsp, 0x8
0000000000005d20         pop        rbx
0000000000005d21         pop        rbp
0000000000005d22         ret
                        ; endp

                     loc_5d23:
0000000000005d23         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
0000000000005d2a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005d2c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005d31         call       j_dcgettext                                 ; dcgettext
0000000000005d36         mov        rdi, qword [file_name]                      ; file_name
0000000000005d3d         mov        rbp, rax
0000000000005d40         test       rdi, rdi
0000000000005d43         je         loc_5d6d

0000000000005d45         call       quotearg_colon                              ; quotearg_colon
0000000000005d4a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000005d4c         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000005d53         mov        rcx, rax
0000000000005d56         mov        r8, rbp
0000000000005d59         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005d5b         xor        eax, eax
0000000000005d5d         call       j_error                                     ; error

                     loc_5d62:
0000000000005d62         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000005d68         call       j__exit                                     ; _exit
                        ; endp

                     loc_5d6d:
0000000000005d6d         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
0000000000005d6f         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x1ba14
0000000000005d76         mov        rcx, rax
0000000000005d79         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005d7b         xor        eax, eax
0000000000005d7d         call       j_error                                     ; error
0000000000005d82         jmp        loc_5d62
0000000000005d84         align      16                                          ; End of unwind block (FDE at 0x1daf4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     protect_fd:
0000000000005d90         push       rbp                                         ; Begin of unwind block (FDE at 0x1db24), CODE XREF=freopen_safer+131, freopen_safer+161, freopen_safer+277
0000000000005d91         push       rbx
0000000000005d92         mov        ebp, edi
0000000000005d94         lea        rdi, qword [aDevnull]                       ; argument "__file" for method j_open, "/dev/null"
0000000000005d9b         xor        esi, esi                                    ; argument "__oflag" for method j_open
0000000000005d9d         xor        eax, eax
0000000000005d9f         sub        rsp, 0x8
0000000000005da3         mov        ebx, 0x1
0000000000005da8         call       j_open                                      ; open
0000000000005dad         cmp        ebp, eax
0000000000005daf         je         loc_5dc9

0000000000005db1         xor        ebx, ebx
0000000000005db3         test       eax, eax
0000000000005db5         js         loc_5dc9

0000000000005db7         mov        edi, eax                                    ; argument "__fd" for method j_close
0000000000005db9         call       j_close                                     ; close
0000000000005dbe         call       j___errno_location                          ; __errno_location
0000000000005dc3         mov        dword [rax], 0x9

                     loc_5dc9:
0000000000005dc9         add        rsp, 0x8                                    ; CODE XREF=protect_fd+31, protect_fd+37
0000000000005dcd         mov        eax, ebx
0000000000005dcf         pop        rbx
0000000000005dd0         pop        rbp
0000000000005dd1         ret
                        ; endp
0000000000005dd2         align      32                                          ; End of unwind block (FDE at 0x1db24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     freopen_safer:
0000000000005de0         push       r15                                         ; Begin of unwind block (FDE at 0x1db4c), CODE XREF=sub_31ea+4774
0000000000005de2         push       r14
0000000000005de4         mov        r15, rsi
0000000000005de7         push       r13
0000000000005de9         push       r12
0000000000005deb         mov        r12, rdx
0000000000005dee         push       rbp
0000000000005def         push       rbx
0000000000005df0         sub        rsp, 0x18
0000000000005df4         mov        qword [rsp+0x48+var_40], rdi
0000000000005df9         mov        rdi, rdx                                    ; argument "__stream" for method j_fileno
0000000000005dfc         call       j_fileno                                    ; fileno
0000000000005e01         mov        ebx, eax
0000000000005e03         call       j___errno_location                          ; __errno_location
0000000000005e08         cmp        ebx, 0x1
0000000000005e0b         mov        r14, rax
0000000000005e0e         je         loc_5f70

0000000000005e14         cmp        ebx, 0x2
0000000000005e17         je         loc_5f60

0000000000005e1d         test       ebx, ebx
0000000000005e1f         je         loc_5ed8

0000000000005e25         mov        esi, 0x2                                    ; argument "__fd2" for method j_dup2
0000000000005e2a         mov        edi, 0x2                                    ; argument "__fd" for method j_dup2
0000000000005e2f         call       j_dup2                                      ; dup2
0000000000005e34         cmp        eax, 0x2
0000000000005e37         setne      bl

                     loc_5e3a:
0000000000005e3a         mov        esi, 0x1                                    ; argument "__fd2" for method j_dup2, CODE XREF=freopen_safer+386
0000000000005e3f         mov        edi, 0x1                                    ; argument "__fd" for method j_dup2
0000000000005e44         call       j_dup2                                      ; dup2
0000000000005e49         cmp        eax, 0x1
0000000000005e4c         setne      bpl

                     loc_5e50:
0000000000005e50         xor        esi, esi                                    ; argument "__fd2" for method j_dup2, CODE XREF=freopen_safer+404
0000000000005e52         xor        edi, edi                                    ; argument "__fd" for method j_dup2
0000000000005e54         call       j_dup2                                      ; dup2
0000000000005e59         test       eax, eax
0000000000005e5b         je         loc_5ee8

0000000000005e61         xor        edi, edi
0000000000005e63         call       protect_fd                                  ; protect_fd
0000000000005e68         test       al, al
0000000000005e6a         mov        r13d, eax
0000000000005e6d         je         loc_5f80

0000000000005e73         test       bpl, bpl
0000000000005e76         jne        loc_5ef0

                     loc_5e78:
0000000000005e78         test       bl, bl                                      ; CODE XREF=freopen_safer+270, freopen_safer+286
0000000000005e7a         je         loc_5e90

0000000000005e7c         mov        edi, 0x2
0000000000005e81         call       protect_fd                                  ; protect_fd
0000000000005e86         test       al, al
0000000000005e88         mov        ebx, eax
0000000000005e8a         je         loc_5f40

                     loc_5e90:
0000000000005e90         mov        rdi, qword [rsp+0x48+var_40]                ; argument "__filename" for method j_freopen, CODE XREF=freopen_safer+154, freopen_safer+255
0000000000005e95         mov        rdx, r12                                    ; argument "__stream" for method j_freopen
0000000000005e98         mov        rsi, r15                                    ; argument "__modes" for method j_freopen
0000000000005e9b         call       j_freopen                                   ; freopen
0000000000005ea0         mov        r12, rax

                     loc_5ea3:
0000000000005ea3         test       bl, bl                                      ; CODE XREF=freopen_safer+425
0000000000005ea5         mov        r15d, dword [r14]
0000000000005ea8         jne        loc_5f50

                     loc_5eae:
0000000000005eae         test       bpl, bpl                                    ; CODE XREF=freopen_safer+378
0000000000005eb1         jne        loc_5f20

0000000000005eb3         test       r13b, r13b
0000000000005eb6         jne        loc_5f2f

                     loc_5eb8:
0000000000005eb8         test       r12, r12                                    ; CODE XREF=freopen_safer+333, freopen_safer+342
0000000000005ebb         jne        loc_5ec0

0000000000005ebd         mov        dword [r14], r15d

                     loc_5ec0:
0000000000005ec0         add        rsp, 0x18                                   ; CODE XREF=freopen_safer+219
0000000000005ec4         mov        rax, r12
0000000000005ec7         pop        rbx
0000000000005ec8         pop        rbp
0000000000005ec9         pop        r12
0000000000005ecb         pop        r13
0000000000005ecd         pop        r14
0000000000005ecf         pop        r15
0000000000005ed1         ret
                        ; endp
0000000000005ed2         align      8

                     loc_5ed8:
0000000000005ed8         xor        ebx, ebx                                    ; CODE XREF=freopen_safer+63
0000000000005eda         xor        ebp, ebp
0000000000005edc         xor        r13d, r13d
0000000000005edf         jmp        loc_5e90
0000000000005ee1         align      8

                     loc_5ee8:
0000000000005ee8         xor        r13d, r13d                                  ; CODE XREF=freopen_safer+123
0000000000005eeb         test       bpl, bpl
0000000000005eee         je         loc_5e78

                     loc_5ef0:
0000000000005ef0         mov        edi, 0x1                                    ; CODE XREF=freopen_safer+150
0000000000005ef5         call       protect_fd                                  ; protect_fd
0000000000005efa         test       al, al
0000000000005efc         mov        ebp, eax
0000000000005efe         jne        loc_5e78

0000000000005f04         xor        r12d, r12d
0000000000005f07         test       bl, bl
0000000000005f09         mov        r15d, dword [r14]
0000000000005f0c         je         loc_5f20

0000000000005f0e         mov        edi, 0x2                                    ; argument "__fd" for method j_close
0000000000005f13         call       j_close                                     ; close
0000000000005f18         nop        dword [rax+rax]

                     loc_5f20:
0000000000005f20         mov        edi, 0x1                                    ; argument "__fd" for method j_close, CODE XREF=freopen_safer+209, freopen_safer+300
0000000000005f25         call       j_close                                     ; close
0000000000005f2a         test       r13b, r13b
0000000000005f2d         je         loc_5eb8

                     loc_5f2f:
0000000000005f2f         xor        edi, edi                                    ; argument "__fd" for method j_close, CODE XREF=freopen_safer+214
0000000000005f31         call       j_close                                     ; close
0000000000005f36         jmp        loc_5eb8
0000000000005f38         align      64

                     loc_5f40:
0000000000005f40         mov        r15d, dword [r14]                           ; CODE XREF=freopen_safer+170
0000000000005f43         xor        r12d, r12d
0000000000005f46         nop        word [cs:rax+rax]

                     loc_5f50:
0000000000005f50         mov        edi, 0x2                                    ; argument "__fd" for method j_close, CODE XREF=freopen_safer+200
0000000000005f55         call       j_close                                     ; close
0000000000005f5a         jmp        loc_5eae
0000000000005f5f         align      32

                     loc_5f60:
0000000000005f60         xor        ebx, ebx                                    ; CODE XREF=freopen_safer+55
0000000000005f62         jmp        loc_5e3a
0000000000005f67         align      16

                     loc_5f70:
0000000000005f70         xor        ebx, ebx                                    ; CODE XREF=freopen_safer+46
0000000000005f72         xor        ebp, ebp
0000000000005f74         jmp        loc_5e50
0000000000005f79         align      128

                     loc_5f80:
0000000000005f80         mov        r13d, 0x1                                   ; CODE XREF=freopen_safer+141
0000000000005f86         xor        r12d, r12d
0000000000005f89         jmp        loc_5ea3
0000000000005f8e         align      16                                          ; End of unwind block (FDE at 0x1db4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
0000000000005f90         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x1db9c), CODE XREF=main+70
0000000000005f93         push       rbx
0000000000005f94         je         loc_600d

0000000000005f96         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
0000000000005f9b         mov        rbx, rdi
0000000000005f9e         call       j_strrchr                                   ; strrchr
0000000000005fa3         test       rax, rax
0000000000005fa6         je         loc_5ffd

0000000000005fa8         lea        r8, qword [rax+1]
0000000000005fac         mov        rdx, r8
0000000000005faf         sub        rdx, rbx
0000000000005fb2         cmp        rdx, 0x6
0000000000005fb6         jle        loc_5ffd

0000000000005fb8         lea        rsi, qword [rax-6]
0000000000005fbc         lea        rdi, qword [aLibs]                          ; "/.libs/"
0000000000005fc3         mov        ecx, 0x7
0000000000005fc8         rep  cmpsb byte [rsi], byte [rdi]
0000000000005fca         seta       dl
0000000000005fcd         sbb        dl, 0x0
0000000000005fd0         test       dl, dl
0000000000005fd2         jne        loc_5ffd

0000000000005fd4         lea        rdi, qword [aLibs+8]                        ; 0x1bc90
0000000000005fdb         mov        ecx, 0x3
0000000000005fe0         mov        rsi, r8
0000000000005fe3         mov        rbx, r8
0000000000005fe6         rep  cmpsb byte [rsi], byte [rdi]
0000000000005fe8         seta       dl
0000000000005feb         sbb        dl, 0x0
0000000000005fee         test       dl, dl
0000000000005ff0         jne        loc_5ffd

0000000000005ff2         lea        rbx, qword [rax+4]
0000000000005ff6         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_5ffd:
0000000000005ffd         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
0000000000006004         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
000000000000600b         pop        rbx
000000000000600c         ret
                        ; endp

                     loc_600d:
000000000000600d         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
0000000000006014         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
000000000000601b         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
0000000000006020         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000006025         call       j_fwrite                                    ; fwrite
000000000000602a         call       j_abort                                     ; abort
                        ; endp
000000000000602f         align      16                                          ; End of unwind block (FDE at 0x1db9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_64: int32_t, -100
        ;    var_68: int8_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int8_t, -124
        ;    var_88: int8_t, -136
        ;    var_A4: int32_t, -164
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_BC: int8_t, -188
        ;    var_C8: int8_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224


                     mbsstr_trimmed_wordbounded:
0000000000006030         push       r15                                         ; Begin of unwind block (FDE at 0x1dbd0), CODE XREF=proper_name+36, proper_name_utf8+199, proper_name_utf8+219, proper_name_utf8+248, proper_name_utf8+485
0000000000006032         push       r14
0000000000006034         mov        r15, rdi
0000000000006037         push       r13
0000000000006039         push       r12
000000000000603b         mov        rdi, rsi
000000000000603e         push       rbp
000000000000603f         push       rbx
0000000000006040         mov        esi, 0x2
0000000000006045         lea        r13, qword [is_basic_table]                 ; is_basic_table
000000000000604c         sub        rsp, 0xb8
0000000000006053         lea        rbx, qword [rsp+0xe8+var_C8]
0000000000006058         lea        r12, qword [rsp+0xe8+var_88]
000000000000605d         mov        rax, qword [fs:0x28]
0000000000006066         mov        qword [rsp+0xe8+var_40], rax
000000000000606e         xor        eax, eax
0000000000006070         lea        r14, qword [rbx+0x24]
0000000000006074         call       trim2                                       ; trim2
0000000000006079         mov        qword [rsp+0xe8+var_E0], rax
000000000000607e         nop

                     loc_6080:
0000000000006080         cmp        byte [r15], 0x0                             ; CODE XREF=mbsstr_trimmed_wordbounded+1411
0000000000006084         je         loc_6105

                     loc_6086:
0000000000006086         mov        rsi, qword [rsp+0xe8+var_E0]                ; CODE XREF=mbsstr_trimmed_wordbounded+211
000000000000608b         mov        rdi, r15
000000000000608e         call       mbsstr                                      ; mbsstr
0000000000006093         test       rax, rax
0000000000006096         mov        rbp, rax
0000000000006099         je         loc_6105

000000000000609b         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
00000000000060a0         cmp        rax, 0x1
00000000000060a4         ja         loc_6148

00000000000060aa         cmp        r15, rbp
00000000000060ad         jae        loc_6718

00000000000060b3         call       j___ctype_b_loc                             ; __ctype_b_loc
00000000000060b8         movzx      edx, byte [rbp-1]
00000000000060bc         mov        rax, qword [rax]
00000000000060bf         mov        rdi, qword [rsp+0xe8+var_E0]                ; argument "__s" for method j_strlen
00000000000060c4         movzx      r15d, word [rax+rdx*2]
00000000000060c9         shr        r15w, 0x3
00000000000060ce         xor        r15d, 0x1
00000000000060d2         mov        eax, r15d
00000000000060d5         and        eax, 0x1
00000000000060d8         mov        byte [rsp+0xe8+var_D8], al
00000000000060dc         call       j_strlen                                    ; strlen
00000000000060e1         movzx      edx, byte [rbp+rax]
00000000000060e6         test       dl, dl
00000000000060e8         jne        loc_6734

                     loc_60ee:
00000000000060ee         cmp        byte [rsp+0xe8+var_D8], 0x0                 ; CODE XREF=mbsstr_trimmed_wordbounded+1823
00000000000060f3         jne        loc_610a

                     loc_60f5:
00000000000060f5         cmp        byte [rbp], 0x0                             ; CODE XREF=mbsstr_trimmed_wordbounded+1817
00000000000060f9         je         loc_6105

00000000000060fb         lea        r15, qword [rbp+1]
00000000000060ff         cmp        byte [r15], 0x0
0000000000006103         jne        loc_6086

                     loc_6105:
0000000000006105         mov        byte [rsp+0xe8+var_D8], 0x0                 ; CODE XREF=mbsstr_trimmed_wordbounded+84, mbsstr_trimmed_wordbounded+105, mbsstr_trimmed_wordbounded+201, mbsstr_trimmed_wordbounded+1397

                     loc_610a:
000000000000610a         mov        rdi, qword [rsp+0xe8+var_E0]                ; argument "__ptr" for method j_free, CODE XREF=mbsstr_trimmed_wordbounded+195, mbsstr_trimmed_wordbounded+1305, mbsstr_trimmed_wordbounded+1790
000000000000610f         call       j_free                                      ; free
0000000000006114         mov        rbx, qword [rsp+0xe8+var_40]
000000000000611c         xor        rbx, qword [fs:0x28]
0000000000006125         movzx      eax, byte [rsp+0xe8+var_D8]
000000000000612a         jne        loc_6976

0000000000006130         add        rsp, 0xb8
0000000000006137         pop        rbx
0000000000006138         pop        rbp
0000000000006139         pop        r12
000000000000613b         pop        r13
000000000000613d         pop        r14
000000000000613f         pop        r15
0000000000006141         ret
                        ; endp
0000000000006142         align      8

                     loc_6148:
0000000000006148         cmp        r15, rbp                                    ; CODE XREF=mbsstr_trimmed_wordbounded+116
000000000000614b         mov        qword [rsp+0xe8+var_B8], r15
0000000000006150         mov        byte [rsp+0xe8+var_C8], 0x0
0000000000006155         mov        qword [rbx+4], 0x0
000000000000615d         mov        byte [rsp+0xe8+var_BC], 0x0
0000000000006162         jb         loc_61d7

0000000000006164         jmp        loc_6708
0000000000006169         align      16

                     loc_6170:
0000000000006170         mov        r15, qword [rsp+0xe8+var_B8]                ; CODE XREF=mbsstr_trimmed_wordbounded+428
0000000000006175         movzx      edx, byte [r15]
0000000000006179         mov        eax, edx
000000000000617b         shr        al, 0x5
000000000000617e         and        eax, 0x7
0000000000006181         mov        eax, dword [r13+rax*4]
0000000000006186         bt         eax, edx
0000000000006189         jae        loc_6278

000000000000618f         mov        qword [rsp+0xe8+var_B0], 0x1
0000000000006198         movsx      edx, byte [r15]
000000000000619c         mov        byte [rsp+0xe8+var_A8], 0x1
00000000000061a1         mov        byte [rsp+0xe8+var_BC], 0x1
00000000000061a6         mov        dword [rsp+0xe8+var_A4], edx

                     loc_61aa:
00000000000061aa         test       edx, edx                                    ; CODE XREF=mbsstr_trimmed_wordbounded+575, mbsstr_trimmed_wordbounded+693
00000000000061ac         je         loc_6952

00000000000061b2         mov        r15, qword [rsp+0xe8+var_B8]

                     loc_61b7:
00000000000061b7         mov        rax, qword [rsp+0xe8+var_B0]                ; CODE XREF=mbsstr_trimmed_wordbounded+639, mbsstr_trimmed_wordbounded+675
00000000000061bc         movzx      ecx, byte [rsp+0xe8+var_A8]
00000000000061c1         mov        byte [rsp+0xe8+var_BC], 0x0
00000000000061c6         add        rax, r15
00000000000061c9         cmp        rax, rbp
00000000000061cc         mov        qword [rsp+0xe8+var_B8], rax
00000000000061d1         jae        loc_6300

                     loc_61d7:
00000000000061d7         cmp        byte [rsp+0xe8+var_C8], 0x0                 ; CODE XREF=mbsstr_trimmed_wordbounded+306
00000000000061dc         je         loc_6170

                     loc_61de:
00000000000061de         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbsstr_trimmed_wordbounded+606
00000000000061e3         mov        r15, qword [rsp+0xe8+var_B8]
00000000000061e8         mov        rsi, rax
00000000000061eb         mov        rdi, r15
00000000000061ee         call       strnlen1                                    ; strnlen1
00000000000061f3         lea        rcx, qword [rbx+4]
00000000000061f7         mov        rdx, rax
00000000000061fa         mov        rsi, r15
00000000000061fd         mov        rdi, r14
0000000000006200         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000006205         cmp        rax, 0xffffffffffffffff
0000000000006209         mov        qword [rsp+0xe8+var_B0], rax
000000000000620e         je         loc_6298

0000000000006214         cmp        rax, 0xfffffffffffffffe
0000000000006218         je         loc_62b8

000000000000621e         test       rax, rax
0000000000006221         jne        loc_62f0

0000000000006227         mov        r15, qword [rsp+0xe8+var_B8]
000000000000622c         mov        qword [rsp+0xe8+var_B0], 0x1
0000000000006235         cmp        byte [r15], 0x0
0000000000006239         jne        loc_697b

000000000000623f         mov        edx, dword [rsp+0xe8+var_A4]
0000000000006243         test       edx, edx
0000000000006245         jne        loc_68fc

                     loc_624b:
000000000000624b         lea        rdi, qword [rbx+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr_trimmed_wordbounded+708
000000000000624f         mov        dword [rsp+0xe8+var_D8], edx
0000000000006253         mov        byte [rsp+0xe8+var_A8], 0x1
0000000000006258         call       j_mbsinit                                   ; mbsinit
000000000000625d         test       eax, eax
000000000000625f         mov        edx, dword [rsp+0xe8+var_D8]
0000000000006263         je         loc_62e0

0000000000006265         mov        byte [rsp+0xe8+var_C8], 0x0
000000000000626a         mov        byte [rsp+0xe8+var_BC], 0x1
000000000000626f         jmp        loc_61aa
0000000000006274         align      8

                     loc_6278:
0000000000006278         lea        rdi, qword [rbx+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr_trimmed_wordbounded+345
000000000000627c         call       j_mbsinit                                   ; mbsinit
0000000000006281         test       eax, eax
0000000000006283         je         loc_6957

0000000000006289         mov        byte [rsp+0xe8+var_C8], 0x1
000000000000628e         jmp        loc_61de
0000000000006293         align      8

                     loc_6298:
0000000000006298         mov        qword [rsp+0xe8+var_B0], 0x1                ; CODE XREF=mbsstr_trimmed_wordbounded+478
00000000000062a1         mov        byte [rsp+0xe8+var_A8], 0x0
00000000000062a6         mov        edx, dword [rsp+0xe8+var_A4]
00000000000062aa         mov        r15, qword [rsp+0xe8+var_B8]
00000000000062af         jmp        loc_61b7
00000000000062b4         align      8

                     loc_62b8:
00000000000062b8         mov        r15, qword [rsp+0xe8+var_B8]                ; CODE XREF=mbsstr_trimmed_wordbounded+488
00000000000062bd         mov        rdi, r15                                    ; argument "__s" for method j_strlen
00000000000062c0         call       j_strlen                                    ; strlen
00000000000062c5         mov        byte [rsp+0xe8+var_A8], 0x0
00000000000062ca         mov        qword [rsp+0xe8+var_B0], rax
00000000000062cf         mov        edx, dword [rsp+0xe8+var_A4]
00000000000062d3         jmp        loc_61b7
00000000000062d8         align      32

                     loc_62e0:
00000000000062e0         mov        byte [rsp+0xe8+var_BC], 0x1                 ; CODE XREF=mbsstr_trimmed_wordbounded+563
00000000000062e5         jmp        loc_61aa
00000000000062ea         align      16

                     loc_62f0:
00000000000062f0         mov        edx, dword [rsp+0xe8+var_A4]                ; CODE XREF=mbsstr_trimmed_wordbounded+497
00000000000062f4         jmp        loc_624b
00000000000062f9         align      256

                     loc_6300:
0000000000006300         test       cl, cl                                      ; CODE XREF=mbsstr_trimmed_wordbounded+417
0000000000006302         je         loc_6708

0000000000006308         mov        edi, edx                                    ; argument "__wc" for method j_iswalnum
000000000000630a         call       j_iswalnum                                  ; iswalnum
000000000000630f         test       eax, eax
0000000000006311         sete       byte [rsp+0xe8+var_D8]

                     loc_6316:
0000000000006316         mov        rax, qword [rsp+0xe8+var_E0]                ; CODE XREF=mbsstr_trimmed_wordbounded+1757
000000000000631b         mov        qword [rsp+0xe8+var_B8], rbp
0000000000006320         mov        byte [rsp+0xe8+var_C8], 0x0
0000000000006325         mov        qword [rbx+4], 0x0
000000000000632d         mov        byte [rsp+0xe8+var_BC], 0x0
0000000000006332         mov        byte [rsp+0xe8+var_88], 0x0
0000000000006337         mov        qword [rsp+0xe8+var_78], rax
000000000000633c         mov        qword [r12+4], 0x0
0000000000006345         mov        byte [rsp+0xe8+var_7C], 0x0
000000000000634a         jmp        loc_63bd
000000000000634c         align      16

                     loc_6350:
0000000000006350         cmp        byte [rsp+0xe8+var_C8], 0x0                 ; CODE XREF=mbsstr_trimmed_wordbounded+994
0000000000006355         jne        loc_65d6

000000000000635b         mov        rcx, qword [rsp+0xe8+var_B8]
0000000000006360         movzx      edx, byte [rcx]
0000000000006363         mov        eax, edx
0000000000006365         shr        al, 0x5
0000000000006368         and        eax, 0x7
000000000000636b         mov        eax, dword [r13+rax*4]
0000000000006370         bt         eax, edx
0000000000006373         jae        loc_65c0

0000000000006379         mov        qword [rsp+0xe8+var_B0], 0x1
0000000000006382         movsx      eax, byte [rcx]
0000000000006385         mov        byte [rsp+0xe8+var_A8], 0x1
000000000000638a         mov        byte [rsp+0xe8+var_BC], 0x1
000000000000638f         mov        dword [rsp+0xe8+var_A4], eax

                     loc_6393:
0000000000006393         mov        edi, dword [rsp+0xe8+var_A4]                ; CODE XREF=mbsstr_trimmed_wordbounded+1007, mbsstr_trimmed_wordbounded+1584, mbsstr_trimmed_wordbounded+1741
0000000000006397         test       edi, edi
0000000000006399         je         loc_6952

                     loc_639f:
000000000000639f         mov        rax, qword [rsp+0xe8+var_B0]                ; CODE XREF=mbsstr_trimmed_wordbounded+1005, mbsstr_trimmed_wordbounded+1638, mbsstr_trimmed_wordbounded+1724
00000000000063a4         add        qword [rsp+0xe8+var_B8], rax
00000000000063a9         mov        rax, qword [rsp+0xe8+var_70]
00000000000063ae         add        qword [rsp+0xe8+var_78], rax
00000000000063b3         mov        byte [rsp+0xe8+var_BC], 0x0
00000000000063b8         mov        byte [rsp+0xe8+var_7C], 0x0

                     loc_63bd:
00000000000063bd         cmp        byte [rsp+0xe8+var_88], 0x0                 ; CODE XREF=mbsstr_trimmed_wordbounded+794
00000000000063c2         jne        loc_643f

00000000000063c4         mov        rcx, qword [rsp+0xe8+var_78]
00000000000063c9         movzx      edx, byte [rcx]
00000000000063cc         mov        eax, edx
00000000000063ce         shr        al, 0x5
00000000000063d1         and        eax, 0x7
00000000000063d4         mov        eax, dword [r13+rax*4]
00000000000063d9         bt         eax, edx
00000000000063dc         jae        loc_6428

00000000000063de         mov        qword [rsp+0xe8+var_70], 0x1
00000000000063e7         movsx      eax, byte [rcx]
00000000000063ea         mov        byte [rsp+0xe8+var_68], 0x1
00000000000063f2         mov        byte [rsp+0xe8+var_7C], 0x1
00000000000063f7         mov        dword [rsp+0xe8+var_64], eax

                     loc_63fe:
00000000000063fe         mov        ecx, dword [rsp+0xe8+var_64]                ; CODE XREF=mbsstr_trimmed_wordbounded+1693
0000000000006405         test       ecx, ecx
0000000000006407         je         loc_64e0

                     loc_640d:
000000000000640d         cmp        byte [rsp+0xe8+var_BC], 0x0                 ; CODE XREF=mbsstr_trimmed_wordbounded+1194, mbsstr_trimmed_wordbounded+1614, mbsstr_trimmed_wordbounded+1676
0000000000006412         je         loc_6350

0000000000006418         cmp        byte [rsp+0xe8+var_A8], 0x0
000000000000641d         je         loc_639f

000000000000641f         jmp        loc_6393
0000000000006424         align      8

                     loc_6428:
0000000000006428         lea        rdi, qword [r12+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr_trimmed_wordbounded+940
000000000000642d         call       j_mbsinit                                   ; mbsinit
0000000000006432         test       eax, eax
0000000000006434         je         loc_6957

000000000000643a         mov        byte [rsp+0xe8+var_88], 0x1

                     loc_643f:
000000000000643f         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbsstr_trimmed_wordbounded+914
0000000000006444         mov        r15, qword [rsp+0xe8+var_78]
0000000000006449         mov        rsi, rax
000000000000644c         mov        rdi, r15
000000000000644f         call       strnlen1                                    ; strnlen1
0000000000006454         lea        rcx, qword [r12+4]
0000000000006459         lea        rdi, qword [r12+0x24]
000000000000645e         mov        rdx, rax
0000000000006461         mov        rsi, r15
0000000000006464         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000006469         cmp        rax, 0xffffffffffffffff
000000000000646d         mov        qword [rsp+0xe8+var_70], rax
0000000000006472         je         loc_6668

0000000000006478         cmp        rax, 0xfffffffffffffffe
000000000000647c         je         loc_66a0

0000000000006482         test       rax, rax
0000000000006485         jne        loc_64ad

0000000000006487         mov        rax, qword [rsp+0xe8+var_78]
000000000000648c         mov        qword [rsp+0xe8+var_70], 0x1
0000000000006495         cmp        byte [rax], 0x0
0000000000006498         jne        loc_697b

000000000000649e         mov        esi, dword [rsp+0xe8+var_64]
00000000000064a5         test       esi, esi
00000000000064a7         jne        loc_68fc

                     loc_64ad:
00000000000064ad         lea        rdi, qword [r12+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr_trimmed_wordbounded+1109
00000000000064b2         mov        byte [rsp+0xe8+var_68], 0x1
00000000000064ba         call       j_mbsinit                                   ; mbsinit
00000000000064bf         test       eax, eax
00000000000064c1         je         loc_66c8

00000000000064c7         mov        ecx, dword [rsp+0xe8+var_64]
00000000000064ce         mov        byte [rsp+0xe8+var_88], 0x0
00000000000064d3         mov        byte [rsp+0xe8+var_7C], 0x1
00000000000064d8         test       ecx, ecx
00000000000064da         jne        loc_640d

                     loc_64e0:
00000000000064e0         cmp        byte [rsp+0xe8+var_BC], 0x0                 ; CODE XREF=mbsstr_trimmed_wordbounded+983
00000000000064e5         jne        loc_6758

00000000000064eb         cmp        byte [rsp+0xe8+var_C8], 0x0
00000000000064f0         jne        loc_6782

00000000000064f6         mov        rcx, qword [rsp+0xe8+var_B8]
00000000000064fb         movzx      edx, byte [rcx]
00000000000064fe         mov        eax, edx
0000000000006500         shr        al, 0x5
0000000000006503         and        eax, 0x7
0000000000006506         mov        eax, dword [r13+rax*4]
000000000000650b         bt         eax, edx
000000000000650e         jae        loc_676c

0000000000006514         mov        qword [rsp+0xe8+var_B0], 0x1
000000000000651d         movsx      edx, byte [rcx]
0000000000006520         mov        byte [rsp+0xe8+var_A8], 0x1
0000000000006525         mov        byte [rsp+0xe8+var_BC], 0x1
000000000000652a         mov        dword [rsp+0xe8+var_A4], edx

                     loc_652e:
000000000000652e         test       edx, edx                                    ; CODE XREF=mbsstr_trimmed_wordbounded+1847, mbsstr_trimmed_wordbounded+2001, sub_6901+22
0000000000006530         je         loc_6544

                     loc_6532:
0000000000006532         cmp        byte [rsp+0xe8+var_A8], 0x0                 ; CODE XREF=mbsstr_trimmed_wordbounded+1841, mbsstr_trimmed_wordbounded+2198, sub_6901+76
0000000000006537         je         loc_6544

0000000000006539         mov        edi, edx                                    ; argument "__wc" for method j_iswalnum
000000000000653b         call       j_iswalnum                                  ; iswalnum
0000000000006540         test       eax, eax
0000000000006542         jne        loc_654f

                     loc_6544:
0000000000006544         cmp        byte [rsp+0xe8+var_D8], 0x0                 ; CODE XREF=mbsstr_trimmed_wordbounded+1280, mbsstr_trimmed_wordbounded+1287
0000000000006549         jne        loc_610a

                     loc_654f:
000000000000654f         mov        qword [rsp+0xe8+var_B8], rbp                ; CODE XREF=mbsstr_trimmed_wordbounded+1298
0000000000006554         mov        byte [rsp+0xe8+var_C8], 0x0
0000000000006559         lea        r15, qword [rbx+4]
000000000000655d         mov        qword [rbx+4], 0x0
0000000000006565         mov        byte [rsp+0xe8+var_BC], 0x0
000000000000656a         movzx      edx, byte [rbp]
000000000000656e         mov        eax, edx
0000000000006570         shr        al, 0x5
0000000000006573         and        eax, 0x7
0000000000006576         mov        eax, dword [r13+rax*4]
000000000000657b         bt         eax, edx
000000000000657e         jae        loc_6810

0000000000006584         mov        qword [rsp+0xe8+var_B0], 0x1
000000000000658d         movsx      eax, byte [rbp]
0000000000006591         mov        byte [rsp+0xe8+var_A8], 0x1
0000000000006596         mov        byte [rsp+0xe8+var_BC], 0x1
000000000000659b         mov        dword [rsp+0xe8+var_A4], eax

                     loc_659f:
000000000000659f         mov        eax, dword [rsp+0xe8+var_A4]                ; CODE XREF=mbsstr_trimmed_wordbounded+2170, sub_6901+12
00000000000065a3         test       eax, eax
00000000000065a5         je         loc_6105

                     loc_65ab:
00000000000065ab         mov        r15, qword [rsp+0xe8+var_B0]                ; CODE XREF=mbsstr_trimmed_wordbounded+2212, sub_6901+42
00000000000065b0         add        r15, rbp
00000000000065b3         jmp        loc_6080
00000000000065b8         align      64

                     loc_65c0:
00000000000065c0         lea        rdi, qword [rbx+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr_trimmed_wordbounded+835
00000000000065c4         call       j_mbsinit                                   ; mbsinit
00000000000065c9         test       eax, eax
00000000000065cb         je         loc_6957

00000000000065d1         mov        byte [rsp+0xe8+var_C8], 0x1

                     loc_65d6:
00000000000065d6         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbsstr_trimmed_wordbounded+805
00000000000065db         mov        r15, qword [rsp+0xe8+var_B8]
00000000000065e0         mov        rsi, rax
00000000000065e3         mov        rdi, r15
00000000000065e6         call       strnlen1                                    ; strnlen1
00000000000065eb         lea        rcx, qword [rbx+4]
00000000000065ef         mov        rdx, rax
00000000000065f2         mov        rsi, r15
00000000000065f5         mov        rdi, r14
00000000000065f8         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000065fd         cmp        rax, 0xffffffffffffffff
0000000000006601         mov        qword [rsp+0xe8+var_B0], rax
0000000000006606         je         loc_6688

000000000000660c         cmp        rax, 0xfffffffffffffffe
0000000000006610         je         loc_66d8

0000000000006616         test       rax, rax
0000000000006619         jne        loc_6640

000000000000661b         mov        rax, qword [rsp+0xe8+var_B8]
0000000000006620         mov        qword [rsp+0xe8+var_B0], 0x1
0000000000006629         cmp        byte [rax], 0x0
000000000000662c         jne        loc_697b

0000000000006632         mov        r8d, dword [rsp+0xe8+var_A4]
0000000000006637         test       r8d, r8d
000000000000663a         jne        loc_68fc

                     loc_6640:
0000000000006640         lea        rdi, qword [rbx+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr_trimmed_wordbounded+1513
0000000000006644         mov        byte [rsp+0xe8+var_A8], 0x1
0000000000006649         call       j_mbsinit                                   ; mbsinit
000000000000664e         test       eax, eax
0000000000006650         je         loc_66f8

0000000000006656         mov        byte [rsp+0xe8+var_C8], 0x0
000000000000665b         mov        byte [rsp+0xe8+var_BC], 0x1
0000000000006660         jmp        loc_6393
0000000000006665         align      8

                     loc_6668:
0000000000006668         mov        qword [rsp+0xe8+var_70], 0x1                ; CODE XREF=mbsstr_trimmed_wordbounded+1090
0000000000006671         mov        byte [rsp+0xe8+var_68], 0x0
0000000000006679         mov        byte [rsp+0xe8+var_7C], 0x1
000000000000667e         jmp        loc_640d
0000000000006683         align      8

                     loc_6688:
0000000000006688         mov        qword [rsp+0xe8+var_B0], 0x1                ; CODE XREF=mbsstr_trimmed_wordbounded+1494
0000000000006691         mov        byte [rsp+0xe8+var_A8], 0x0
0000000000006696         jmp        loc_639f
000000000000669b         align      32

                     loc_66a0:
00000000000066a0         mov        rdi, qword [rsp+0xe8+var_78]                ; argument "__s" for method j_strlen, CODE XREF=mbsstr_trimmed_wordbounded+1100
00000000000066a5         call       j_strlen                                    ; strlen
00000000000066aa         mov        byte [rsp+0xe8+var_68], 0x0
00000000000066b2         mov        qword [rsp+0xe8+var_70], rax
00000000000066b7         mov        byte [rsp+0xe8+var_7C], 0x1
00000000000066bc         jmp        loc_640d
00000000000066c1         align      8

                     loc_66c8:
00000000000066c8         mov        byte [rsp+0xe8+var_7C], 0x1                 ; CODE XREF=mbsstr_trimmed_wordbounded+1169
00000000000066cd         jmp        loc_63fe
00000000000066d2         align      8

                     loc_66d8:
00000000000066d8         mov        rdi, qword [rsp+0xe8+var_B8]                ; argument "__s" for method j_strlen, CODE XREF=mbsstr_trimmed_wordbounded+1504
00000000000066dd         call       j_strlen                                    ; strlen
00000000000066e2         mov        byte [rsp+0xe8+var_A8], 0x0
00000000000066e7         mov        qword [rsp+0xe8+var_B0], rax
00000000000066ec         jmp        loc_639f
00000000000066f1         align      8

                     loc_66f8:
00000000000066f8         mov        byte [rsp+0xe8+var_BC], 0x1                 ; CODE XREF=mbsstr_trimmed_wordbounded+1568
00000000000066fd         jmp        loc_6393
0000000000006702         align      8

                     loc_6708:
0000000000006708         mov        byte [rsp+0xe8+var_D8], 0x1                 ; CODE XREF=mbsstr_trimmed_wordbounded+308, mbsstr_trimmed_wordbounded+722
000000000000670d         jmp        loc_6316
0000000000006712         align      8

                     loc_6718:
0000000000006718         mov        rdi, qword [rsp+0xe8+var_E0]                ; argument "__s" for method j_strlen, CODE XREF=mbsstr_trimmed_wordbounded+125
000000000000671d         call       j_strlen                                    ; strlen
0000000000006722         movzx      edx, byte [rbp+rax]
0000000000006727         mov        byte [rsp+0xe8+var_D8], 0x1
000000000000672c         test       dl, dl
000000000000672e         je         loc_610a

                     loc_6734:
0000000000006734         mov        byte [rsp+0xe8+var_D0], dl                  ; CODE XREF=mbsstr_trimmed_wordbounded+184
0000000000006738         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000673d         movzx      edx, byte [rsp+0xe8+var_D0]
0000000000006742         mov        rax, qword [rax]
0000000000006745         test       byte [rax+rdx*2], 0x8
0000000000006749         jne        loc_60f5

000000000000674f         jmp        loc_60ee
0000000000006754         align      8

                     loc_6758:
0000000000006758         cmp        byte [rsp+0xe8+var_A8], 0x0                 ; CODE XREF=mbsstr_trimmed_wordbounded+1205
000000000000675d         mov        edx, dword [rsp+0xe8+var_A4]
0000000000006761         je         loc_6532

0000000000006767         jmp        loc_652e

                     loc_676c:
000000000000676c         lea        rdi, qword [rbx+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr_trimmed_wordbounded+1246
0000000000006770         call       j_mbsinit                                   ; mbsinit
0000000000006775         test       eax, eax
0000000000006777         je         loc_6957

000000000000677d         mov        byte [rsp+0xe8+var_C8], 0x1

                     loc_6782:
0000000000006782         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbsstr_trimmed_wordbounded+1216
0000000000006787         mov        r8, qword [rsp+0xe8+var_B8]
000000000000678c         mov        rsi, rax
000000000000678f         mov        rdi, r8
0000000000006792         mov        qword [rsp+0xe8+var_D0], r8
0000000000006797         call       strnlen1                                    ; strnlen1
000000000000679c         mov        r8, qword [rsp+0xe8+var_D0]
00000000000067a1         lea        rcx, qword [rbx+4]
00000000000067a5         mov        rdx, rax
00000000000067a8         mov        rdi, r14
00000000000067ab         mov        rsi, r8
00000000000067ae         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000067b3         cmp        rax, 0xffffffffffffffff
00000000000067b7         mov        qword [rsp+0xe8+var_B0], rax
00000000000067bc         je         loc_68af

00000000000067c2         cmp        rax, 0xfffffffffffffffe
00000000000067c6         je         loc_6930

00000000000067cc         test       rax, rax
00000000000067cf         je         loc_68d9

00000000000067d5         mov        edx, dword [rsp+0xe8+var_A4]

                     loc_67d9:
00000000000067d9         lea        rdi, qword [rbx+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr_trimmed_wordbounded+2246
00000000000067dd         mov        dword [rsp+0xe8+var_D0], edx
00000000000067e1         mov        byte [rsp+0xe8+var_A8], 0x1
00000000000067e6         call       j_mbsinit                                   ; mbsinit
00000000000067eb         test       eax, eax
00000000000067ed         mov        edx, dword [rsp+0xe8+var_D0]
00000000000067f1         je         loc_6912

00000000000067f7         mov        byte [rsp+0xe8+var_C8], 0x0
00000000000067fc         mov        byte [rsp+0xe8+var_BC], 0x1
0000000000006801         jmp        loc_652e
0000000000006806         align      16

                     loc_6810:
0000000000006810         mov        rdi, r15                                    ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr_trimmed_wordbounded+1358
0000000000006813         call       j_mbsinit                                   ; mbsinit
0000000000006818         test       eax, eax
000000000000681a         je         loc_6957

0000000000006820         mov        byte [rsp+0xe8+var_C8], 0x1
0000000000006825         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
000000000000682a         mov        r8, qword [rsp+0xe8+var_B8]
000000000000682f         mov        rsi, rax
0000000000006832         mov        rdi, r8
0000000000006835         mov        qword [rsp+0xe8+var_D8], r8
000000000000683a         call       strnlen1                                    ; strnlen1
000000000000683f         mov        r8, qword [rsp+0xe8+var_D8]
0000000000006844         mov        rcx, r15
0000000000006847         mov        rdx, rax
000000000000684a         mov        rdi, r14
000000000000684d         mov        rsi, r8
0000000000006850         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000006855         cmp        rax, 0xffffffffffffffff
0000000000006859         mov        qword [rsp+0xe8+var_B0], rax
000000000000685e         je         loc_68cb

0000000000006860         cmp        rax, 0xfffffffffffffffe
0000000000006864         je         loc_691c

000000000000686a         test       rax, rax
000000000000686d         jne        loc_688e

000000000000686f         mov        rax, qword [rsp+0xe8+var_B8]
0000000000006874         mov        qword [rsp+0xe8+var_B0], 0x1
000000000000687d         cmp        byte [rax], 0x0
0000000000006880         jne        loc_697b

0000000000006886         mov        edx, dword [rsp+0xe8+var_A4]
000000000000688a         test       edx, edx
000000000000688c         jne        loc_68fc

                     loc_688e:
000000000000688e         lea        rdi, qword [rbx+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr_trimmed_wordbounded+2109
0000000000006892         mov        byte [rsp+0xe8+var_A8], 0x1
0000000000006897         call       j_mbsinit                                   ; mbsinit
000000000000689c         test       eax, eax
000000000000689e         je         loc_6908

00000000000068a0         mov        byte [rsp+0xe8+var_C8], 0x0
00000000000068a5         mov        byte [rsp+0xe8+var_BC], 0x1
00000000000068aa         jmp        loc_659f

                     loc_68af:
00000000000068af         mov        qword [rsp+0xe8+var_B0], 0x1                ; CODE XREF=mbsstr_trimmed_wordbounded+1932
00000000000068b8         mov        byte [rsp+0xe8+var_A8], 0x0
00000000000068bd         mov        edx, dword [rsp+0xe8+var_A4]
00000000000068c1         mov        byte [rsp+0xe8+var_BC], 0x1
00000000000068c6         jmp        loc_6532

                     loc_68cb:
00000000000068cb         mov        qword [rsp+0xe8+var_B0], 0x1                ; CODE XREF=mbsstr_trimmed_wordbounded+2094
00000000000068d4         jmp        loc_65ab

                     loc_68d9:
00000000000068d9         mov        rax, qword [rsp+0xe8+var_B8]                ; CODE XREF=mbsstr_trimmed_wordbounded+1951
00000000000068de         mov        qword [rsp+0xe8+var_B0], 0x1
00000000000068e7         cmp        byte [rax], 0x0
00000000000068ea         jne        loc_697b

00000000000068f0         mov        edx, dword [rsp+0xe8+var_A4]
00000000000068f4         test       edx, edx
00000000000068f6         je         loc_67d9

                     loc_68fc:
00000000000068fc         call       mbuiter_multi_next.part.0                   ; mbuiter_multi_next.part.0, CODE XREF=mbsstr_trimmed_wordbounded+533, mbsstr_trimmed_wordbounded+1143, mbsstr_trimmed_wordbounded+1546, mbsstr_trimmed_wordbounded+2140
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6901:
0000000000006901         nop        dword [rax]
                        ; endp

                     loc_6908:
0000000000006908         mov        byte [rsp+0xe8+var_BC], 0x1                 ; CODE XREF=mbsstr_trimmed_wordbounded+2158
000000000000690d         jmp        loc_659f

                     loc_6912:
0000000000006912         mov        byte [rsp+0xe8+var_BC], 0x1                 ; CODE XREF=mbsstr_trimmed_wordbounded+1985
0000000000006917         jmp        loc_652e

                     loc_691c:
000000000000691c         mov        rdi, qword [rsp+0xe8+var_B8]                ; argument "__s" for method j_strlen, CODE XREF=mbsstr_trimmed_wordbounded+2100
0000000000006921         call       j_strlen                                    ; strlen
0000000000006926         mov        qword [rsp+0xe8+var_B0], rax
000000000000692b         jmp        loc_65ab

                     loc_6930:
0000000000006930         mov        rdi, qword [rsp+0xe8+var_B8]                ; argument "__s" for method j_strlen, CODE XREF=mbsstr_trimmed_wordbounded+1942
0000000000006935         call       j_strlen                                    ; strlen
000000000000693a         mov        byte [rsp+0xe8+var_A8], 0x0
000000000000693f         mov        qword [rsp+0xe8+var_B0], rax
0000000000006944         mov        edx, dword [rsp+0xe8+var_A4]
0000000000006948         mov        byte [rsp+0xe8+var_BC], 0x1
000000000000694d         jmp        loc_6532

                     loc_6952:
0000000000006952         call       j_abort                                     ; abort, CODE XREF=mbsstr_trimmed_wordbounded+380, mbsstr_trimmed_wordbounded+873
                        ; endp

                     loc_6957:
0000000000006957         lea        rcx, qword [__PRETTY_FUNCTION__.5159]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbsstr_trimmed_wordbounded+595, mbsstr_trimmed_wordbounded+1028, mbsstr_trimmed_wordbounded+1435, mbsstr_trimmed_wordbounded+1863, mbsstr_trimmed_wordbounded+2026
000000000000695e         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
0000000000006965         lea        rdi, qword [aMbsinitItersta]                ; argument "__assertion" for method j___assert_fail, "mbsinit (&iter->state)"
000000000000696c         mov        edx, 0x96                                   ; argument "__line" for method j___assert_fail
0000000000006971         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_6976:
0000000000006976         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=mbsstr_trimmed_wordbounded+250
                        ; endp

                     loc_697b:
000000000000697b         lea        rcx, qword [__PRETTY_FUNCTION__.5159]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbsstr_trimmed_wordbounded+521, mbsstr_trimmed_wordbounded+1128, mbsstr_trimmed_wordbounded+1532, mbsstr_trimmed_wordbounded+2128, mbsstr_trimmed_wordbounded+2234
0000000000006982         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
0000000000006989         lea        rdi, qword [aItercurptr0]                   ; argument "__assertion" for method j___assert_fail, "*iter->cur.ptr == '\\0'"
0000000000006990         mov        edx, 0xb2                                   ; argument "__line" for method j___assert_fail
0000000000006995         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000699a         align      32                                          ; End of unwind block (FDE at 0x1dbd0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     proper_name:
00000000000069a0         push       r12                                         ; Begin of unwind block (FDE at 0x1dc1c)
00000000000069a2         push       rbp
00000000000069a3         mov        rsi, rdi                                    ; argument "msgid" for method j_dcgettext
00000000000069a6         push       rbx
00000000000069a7         mov        rbp, rdi
00000000000069aa         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000069af         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000069b1         call       j_dcgettext                                 ; dcgettext
00000000000069b6         cmp        rbp, rax
00000000000069b9         mov        rbx, rax
00000000000069bc         je         loc_69cd

00000000000069be         mov        rsi, rbp
00000000000069c1         mov        rdi, rax
00000000000069c4         call       mbsstr_trimmed_wordbounded                  ; mbsstr_trimmed_wordbounded
00000000000069c9         test       al, al
00000000000069cb         je         loc_69d8

                     loc_69cd:
00000000000069cd         mov        rax, rbx                                    ; CODE XREF=proper_name+28
00000000000069d0         pop        rbx
00000000000069d1         pop        rbp
00000000000069d2         pop        r12
00000000000069d4         ret
                        ; endp
00000000000069d5         align      8

                     loc_69d8:
00000000000069d8         mov        rdi, rbx                                    ; argument "__s" for method j_strlen, CODE XREF=proper_name+43
00000000000069db         call       j_strlen                                    ; strlen
00000000000069e0         mov        rdi, rbp                                    ; argument "__s" for method j_strlen
00000000000069e3         mov        r12, rax
00000000000069e6         call       j_strlen                                    ; strlen
00000000000069eb         lea        rdi, qword [r12+rax+4]
00000000000069f0         call       xmalloc                                     ; xmalloc
00000000000069f5         lea        rcx, qword [aSS_1bcf8]                      ; "%s (%s)"
00000000000069fc         mov        r12, rax
00000000000069ff         mov        r9, rbp
0000000000006a02         mov        r8, rbx
0000000000006a05         mov        rdi, rax
0000000000006a08         mov        rbx, r12
0000000000006a0b         mov        rdx, 0xffffffffffffffff
0000000000006a12         mov        esi, 0x1
0000000000006a17         xor        eax, eax
0000000000006a19         call       j___sprintf_chk                             ; __sprintf_chk
0000000000006a1e         mov        rax, rbx
0000000000006a21         pop        rbx
0000000000006a22         pop        rbp
0000000000006a23         pop        r12
0000000000006a25         ret
                        ; endp
0000000000006a26         align      16                                          ; End of unwind block (FDE at 0x1dc1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     proper_name_utf8:
0000000000006a30         push       r15                                         ; Begin of unwind block (FDE at 0x1dc54), CODE XREF=main+645
0000000000006a32         push       r14
0000000000006a34         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006a39         push       r13
0000000000006a3b         push       r12
0000000000006a3d         mov        r13, rdi
0000000000006a40         push       rbp
0000000000006a41         push       rbx
0000000000006a42         mov        rbp, rsi
0000000000006a45         mov        rsi, rdi                                    ; argument "msgid" for method j_dcgettext
0000000000006a48         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006a4a         sub        rsp, 0x18
0000000000006a4e         call       j_dcgettext                                 ; dcgettext
0000000000006a53         mov        r14, rax
0000000000006a56         call       locale_charset                              ; locale_charset
0000000000006a5b         lea        rsi, qword [aUtf8]                          ; "UTF-8"
0000000000006a62         mov        rdi, rax
0000000000006a65         mov        r12, rax
0000000000006a68         call       c_strcasecmp                                ; c_strcasecmp
0000000000006a6d         test       eax, eax
0000000000006a6f         jne        loc_6b58

0000000000006a75         test       rbp, rbp
0000000000006a78         je         loc_6ad0

0000000000006a7a         mov        qword [rsp+0x48+var_40], rbp
0000000000006a7f         mov        rbx, rbp
0000000000006a82         xor        r12d, r12d
0000000000006a85         xor        r15d, r15d

                     loc_6a88:
0000000000006a88         mov        rsi, r13                                    ; argument "__s2" for method j_strcmp, CODE XREF=proper_name_utf8+564, proper_name_utf8+596, proper_name_utf8+744
0000000000006a8b         mov        rdi, r14                                    ; argument "__s1" for method j_strcmp
0000000000006a8e         call       j_strcmp                                    ; strcmp
0000000000006a93         test       eax, eax
0000000000006a95         jne        loc_6af1

                     loc_6a97:
0000000000006a97         test       r15, r15                                    ; CODE XREF=proper_name_utf8+191
0000000000006a9a         je         loc_6aa9

0000000000006a9c         cmp        rbx, r15
0000000000006a9f         je         loc_6aa9

0000000000006aa1         mov        rdi, r15                                    ; argument "__ptr" for method j_free
0000000000006aa4         call       j_free                                      ; free

                     loc_6aa9:
0000000000006aa9         test       r12, r12                                    ; CODE XREF=proper_name_utf8+106, proper_name_utf8+111
0000000000006aac         je         loc_6abb

0000000000006aae         cmp        rbx, r12
0000000000006ab1         je         loc_6abb

                     loc_6ab3:
0000000000006ab3         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=proper_name_utf8+279, proper_name_utf8+526, proper_name_utf8+694
0000000000006ab6         call       j_free                                      ; free

                     loc_6abb:
0000000000006abb         add        rsp, 0x18                                   ; CODE XREF=proper_name_utf8+124, proper_name_utf8+129, proper_name_utf8+285, proper_name_utf8+473, proper_name_utf8+532, proper_name_utf8+700
0000000000006abf         mov        rax, rbx
0000000000006ac2         pop        rbx
0000000000006ac3         pop        rbp
0000000000006ac4         pop        r12
0000000000006ac6         pop        r13
0000000000006ac8         pop        r14
0000000000006aca         pop        r15
0000000000006acc         ret
                        ; endp
0000000000006acd         align      16

                     loc_6ad0:
0000000000006ad0         mov        rsi, r13                                    ; argument "__s2" for method j_strcmp, CODE XREF=proper_name_utf8+72
0000000000006ad3         mov        rdi, r14                                    ; argument "__s1" for method j_strcmp
0000000000006ad6         mov        qword [rsp+0x48+var_40], 0x0
0000000000006adf         xor        r12d, r12d
0000000000006ae2         xor        r15d, r15d
0000000000006ae5         mov        rbx, r13
0000000000006ae8         call       j_strcmp                                    ; strcmp
0000000000006aed         test       eax, eax
0000000000006aef         je         loc_6a97

                     loc_6af1:
0000000000006af1         mov        rsi, r13                                    ; CODE XREF=proper_name_utf8+101
0000000000006af4         mov        rdi, r14
0000000000006af7         call       mbsstr_trimmed_wordbounded                  ; mbsstr_trimmed_wordbounded
0000000000006afc         test       al, al
0000000000006afe         jne        loc_6b38

                     loc_6b00:
0000000000006b00         test       rbp, rbp                                    ; CODE XREF=proper_name_utf8+730
0000000000006b03         je         loc_6b14

0000000000006b05         mov        rsi, rbp
0000000000006b08         mov        rdi, r14
0000000000006b0b         call       mbsstr_trimmed_wordbounded                  ; mbsstr_trimmed_wordbounded
0000000000006b10         test       al, al
0000000000006b12         jne        loc_6b38

                     loc_6b14:
0000000000006b14         cmp        qword [rsp+0x48+var_40], 0x0                ; CODE XREF=proper_name_utf8+211
0000000000006b1a         je         loc_6c90

0000000000006b20         mov        rsi, qword [rsp+0x48+var_40]
0000000000006b25         mov        rdi, r14
0000000000006b28         call       mbsstr_trimmed_wordbounded                  ; mbsstr_trimmed_wordbounded
0000000000006b2d         test       al, al
0000000000006b2f         je         loc_6c90

0000000000006b35         nop        dword [rax]

                     loc_6b38:
0000000000006b38         test       r15, r15                                    ; CODE XREF=proper_name_utf8+206, proper_name_utf8+226
0000000000006b3b         jne        loc_6c30

0000000000006b41         test       r12, r12
0000000000006b44         mov        rbx, r14
0000000000006b47         jne        loc_6ab3

0000000000006b4d         jmp        loc_6abb
0000000000006b52         align      8

                     loc_6b58:
0000000000006b58         lea        rsi, qword [aUtf8]                          ; "UTF-8", CODE XREF=proper_name_utf8+63
0000000000006b5f         mov        rdx, r12
0000000000006b62         mov        rdi, rbp
0000000000006b65         call       xstr_iconv                                  ; xstr_iconv
0000000000006b6a         mov        rdi, r12                                    ; argument "__s" for method j_strlen
0000000000006b6d         mov        rbx, rax
0000000000006b70         call       j_strlen                                    ; strlen
0000000000006b75         lea        rdi, qword [rax+0xb]
0000000000006b79         mov        r15, rax
0000000000006b7c         call       xmalloc                                     ; xmalloc
0000000000006b81         mov        rdx, r15                                    ; argument "__n" for method j_memcpy
0000000000006b84         mov        rsi, r12                                    ; argument "__src" for method j_memcpy
0000000000006b87         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006b8a         call       j_memcpy                                    ; memcpy
0000000000006b8f         mov        rcx, rax
0000000000006b92         add        r15, rax
0000000000006b95         movabs     rax, 0x4c534e4152542f2f
0000000000006b9f         mov        qword [r15], rax
0000000000006ba2         lea        rsi, qword [aUtf8]                          ; "UTF-8"
0000000000006ba9         mov        eax, 0x5449
0000000000006bae         mov        rdx, rcx
0000000000006bb1         mov        rdi, rbp
0000000000006bb4         mov        word [r15+8], ax
0000000000006bb9         mov        byte [r15+0xa], 0x0
0000000000006bbe         mov        qword [rsp+0x48+var_40], rcx
0000000000006bc3         call       xstr_iconv                                  ; xstr_iconv
0000000000006bc8         mov        rcx, qword [rsp+0x48+var_40]
0000000000006bcd         mov        r12, rax
0000000000006bd0         mov        rdi, rcx                                    ; argument "__ptr" for method j_free
0000000000006bd3         call       j_free                                      ; free
0000000000006bd8         test       r12, r12
0000000000006bdb         je         loc_6bf7

0000000000006bdd         mov        esi, 0x3f                                   ; argument "__c" for method j_strchr
0000000000006be2         mov        rdi, r12                                    ; argument "__s" for method j_strchr
0000000000006be5         call       j_strchr                                    ; strchr
0000000000006bea         test       rax, rax
0000000000006bed         je         loc_6c50

0000000000006bef         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000006bf2         call       j_free                                      ; free

                     loc_6bf7:
0000000000006bf7         test       rbx, rbx                                    ; CODE XREF=proper_name_utf8+427
0000000000006bfa         je         loc_6c70

0000000000006bfc         mov        rsi, r13                                    ; argument "__s2" for method j_strcmp
0000000000006bff         mov        rdi, r14                                    ; argument "__s1" for method j_strcmp
0000000000006c02         call       j_strcmp                                    ; strcmp
0000000000006c07         test       eax, eax
0000000000006c09         je         loc_6abb

0000000000006c0f         mov        rsi, r13
0000000000006c12         mov        rdi, r14
0000000000006c15         call       mbsstr_trimmed_wordbounded                  ; mbsstr_trimmed_wordbounded
0000000000006c1a         test       al, al
0000000000006c1c         je         loc_6cf8

0000000000006c22         mov        r15, rbx
0000000000006c25         xor        r12d, r12d
0000000000006c28         nop        dword [rax+rax]

                     loc_6c30:
0000000000006c30         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=proper_name_utf8+267
0000000000006c33         mov        rbx, r14
0000000000006c36         call       j_free                                      ; free
0000000000006c3b         test       r12, r12
0000000000006c3e         jne        loc_6ab3

0000000000006c44         jmp        loc_6abb
0000000000006c49         align      16

                     loc_6c50:
0000000000006c50         test       rbx, rbx                                    ; CODE XREF=proper_name_utf8+445
0000000000006c53         mov        qword [rsp+0x48+var_40], r12
0000000000006c58         je         loc_6d10

0000000000006c5e         mov        rbp, rbx
0000000000006c61         mov        r15, rbx
0000000000006c64         jmp        loc_6a88
0000000000006c69         align      16

                     loc_6c70:
0000000000006c70         mov        rbx, r13                                    ; CODE XREF=proper_name_utf8+458
0000000000006c73         mov        qword [rsp+0x48+var_40], 0x0
0000000000006c7c         xor        ebp, ebp
0000000000006c7e         xor        r12d, r12d
0000000000006c81         xor        r15d, r15d
0000000000006c84         jmp        loc_6a88
0000000000006c89         align      16

                     loc_6c90:
0000000000006c90         mov        rdi, r14                                    ; argument "__s" for method j_strlen, CODE XREF=proper_name_utf8+234, proper_name_utf8+255
0000000000006c93         call       j_strlen                                    ; strlen
0000000000006c98         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
0000000000006c9b         mov        rbp, rax
0000000000006c9e         call       j_strlen                                    ; strlen
0000000000006ca3         lea        rdi, qword [rbp+rax+4]
0000000000006ca8         call       xmalloc                                     ; xmalloc
0000000000006cad         lea        rcx, qword [aSS_1bcf8]                      ; "%s (%s)"
0000000000006cb4         mov        rdi, rax
0000000000006cb7         mov        rbp, rax
0000000000006cba         mov        r9, rbx
0000000000006cbd         xor        eax, eax
0000000000006cbf         mov        r8, r14
0000000000006cc2         mov        rdx, 0xffffffffffffffff
0000000000006cc9         mov        esi, 0x1
0000000000006cce         call       j___sprintf_chk                             ; __sprintf_chk
0000000000006cd3         test       r15, r15
0000000000006cd6         je         loc_6ce0

0000000000006cd8         mov        rdi, r15                                    ; argument "__ptr" for method j_free
0000000000006cdb         call       j_free                                      ; free

                     loc_6ce0:
0000000000006ce0         test       r12, r12                                    ; CODE XREF=proper_name_utf8+678
0000000000006ce3         mov        rbx, rbp
0000000000006ce6         jne        loc_6ab3

0000000000006cec         jmp        loc_6abb
0000000000006cf1         align      8

                     loc_6cf8:
0000000000006cf8         mov        rbp, rbx                                    ; CODE XREF=proper_name_utf8+492
0000000000006cfb         mov        r15, rbx
0000000000006cfe         mov        qword [rsp+0x48+var_40], 0x0
0000000000006d07         xor        r12d, r12d
0000000000006d0a         jmp        loc_6b00
0000000000006d0f         align      16

                     loc_6d10:
0000000000006d10         xor        ebp, ebp                                    ; CODE XREF=proper_name_utf8+552
0000000000006d12         xor        r15d, r15d
0000000000006d15         mov        rbx, r12
0000000000006d18         jmp        loc_6a88
0000000000006d1d         align      32                                          ; End of unwind block (FDE at 0x1dc54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
0000000000006d20         push       rbp                                         ; Begin of unwind block (FDE at 0x1dca4), CODE XREF=sub_7550+2597, sub_7550+2619
0000000000006d21         push       rbx
0000000000006d22         mov        rbp, rdi
0000000000006d25         mov        ebx, esi
0000000000006d27         sub        rsp, 0x8
0000000000006d2b         call       locale_charset                              ; locale_charset
0000000000006d30         movzx      edx, byte [rax]
0000000000006d33         and        edx, 0xffffffdf
0000000000006d36         cmp        dl, 0x55
0000000000006d39         je         loc_6db0

0000000000006d3b         cmp        dl, 0x47
0000000000006d3e         je         loc_6d60

                     loc_6d40:
0000000000006d40         lea        rax, qword [aS+4]                           ; 0x1b8a8, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
0000000000006d47         lea        rdx, qword [aItercurptr0+21]                ; 0x1bcf6
0000000000006d4e         cmp        ebx, 0x9
0000000000006d51         cmovne     rax, rdx
0000000000006d55         add        rsp, 0x8
0000000000006d59         pop        rbx
0000000000006d5a         pop        rbp
0000000000006d5b         ret
                        ; endp
0000000000006d5c         align      32

                     loc_6d60:
0000000000006d60         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
0000000000006d64         and        edx, 0xffffffdf
0000000000006d67         cmp        dl, 0x42
0000000000006d6a         jne        loc_6d40

0000000000006d6c         cmp        byte [rax+2], 0x31
0000000000006d70         jne        loc_6d40

0000000000006d72         cmp        byte [rax+3], 0x38
0000000000006d76         jne        loc_6d40

0000000000006d78         cmp        byte [rax+4], 0x30
0000000000006d7c         jne        loc_6d40

0000000000006d7e         cmp        byte [rax+5], 0x33
0000000000006d82         jne        loc_6d40

0000000000006d84         cmp        byte [rax+6], 0x30
0000000000006d88         jne        loc_6d40

0000000000006d8a         cmp        byte [rax+7], 0x0
0000000000006d8e         jne        loc_6d40

0000000000006d90         cmp        byte [rbp], 0x60
0000000000006d94         lea        rax, qword [__PRETTY_FUNCTION__.5159+27]    ; 0x1bd2b
0000000000006d9b         lea        rdx, qword [__PRETTY_FUNCTION__.5159+31]    ; 0x1bd2f
0000000000006da2         cmovne     rax, rdx
0000000000006da6         add        rsp, 0x8
0000000000006daa         pop        rbx
0000000000006dab         pop        rbp
0000000000006dac         ret
                        ; endp
0000000000006dad         align      16

                     loc_6db0:
0000000000006db0         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
0000000000006db4         and        edx, 0xffffffdf
0000000000006db7         cmp        dl, 0x54
0000000000006dba         jne        loc_6d40

0000000000006dbc         movzx      edx, byte [rax+2]
0000000000006dc0         and        edx, 0xffffffdf
0000000000006dc3         cmp        dl, 0x46
0000000000006dc6         jne        loc_6d40

0000000000006dcc         cmp        byte [rax+3], 0x2d
0000000000006dd0         jne        loc_6d40

0000000000006dd6         cmp        byte [rax+4], 0x38
0000000000006dda         jne        loc_6d40

0000000000006de0         cmp        byte [rax+5], 0x0
0000000000006de4         jne        loc_6d40

0000000000006dea         cmp        byte [rbp], 0x60
0000000000006dee         lea        rax, qword [__PRETTY_FUNCTION__.5159+19]    ; 0x1bd23
0000000000006df5         lea        rdx, qword [__PRETTY_FUNCTION__.5159+23]    ; 0x1bd27
0000000000006dfc         cmovne     rax, rdx
0000000000006e00         add        rsp, 0x8
0000000000006e04         pop        rbx
0000000000006e05         pop        rbp
0000000000006e06         ret
                        ; endp
0000000000006e07         align      16                                          ; End of unwind block (FDE at 0x1dca4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
0000000000006e10         push       r15                                         ; Begin of unwind block (FDE at 0x1dce8), CODE XREF=sub_7550+1165, sub_7550+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
0000000000006e12         push       r14
0000000000006e14         mov        r15d, r8d
0000000000006e17         push       r13
0000000000006e19         push       r12
0000000000006e1b         mov        r14, rdi
0000000000006e1e         push       rbp
0000000000006e1f         push       rbx
0000000000006e20         mov        ebx, r9d
0000000000006e23         mov        r13, rsi
0000000000006e26         mov        rbp, rcx
0000000000006e29         and        ebx, 0x2
0000000000006e2c         sub        rsp, 0xb8
0000000000006e33         mov        rax, qword [rsp+0xe8+arg_0]
0000000000006e3b         mov        qword [rsp+0xe8+var_D8], rdx
0000000000006e40         mov        dword [rsp+0xe8+var_E0], r8d
0000000000006e45         mov        dword [rsp+0xe8+var_70], r9d
0000000000006e4a         mov        qword [rsp+0xe8+var_C8], rax
0000000000006e4f         mov        rax, qword [rsp+0xe8+arg_8]
0000000000006e57         mov        qword [rsp+0xe8+var_80], rax
0000000000006e5c         mov        rax, qword [rsp+0xe8+arg_10]
0000000000006e64         mov        qword [rsp+0xe8+var_88], rax
0000000000006e69         mov        rax, qword [fs:0x28]
0000000000006e72         mov        qword [rsp+0xe8+var_40], rax
0000000000006e7a         xor        eax, eax
0000000000006e7c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000006e81         cmp        r15d, 0xa
0000000000006e85         mov        qword [rsp+0xe8+var_90], rax
0000000000006e8a         ja         loc_803f

0000000000006e90         lea        rcx, qword [switch_table_1bd80]             ; switch_table_1bd80
0000000000006e97         mov        edx, r15d
0000000000006e9a         movsxd     rax, dword [rcx+rdx*4]
0000000000006e9e         add        rax, rcx
0000000000006ea1         jmp        rax                                         ; switch statement using table at 0x1bd80, with 11 cases, 0x6ea3,0x7a74,0x7ad0,0x7b25,0x7b6a,0x7ba4,0x7c4a,0x7c84,0x7e78

                     loc_6ea3:
0000000000006ea3         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_7550+1318
0000000000006ea8         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000006ead         xor        r12d, r12d
0000000000006eb0         mov        qword [rsp+0xe8+var_98], 0x0
0000000000006eb9         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000006ebe         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_6ec3:
0000000000006ec3         lea        rax, qword [aItercurptr0+21]                ; 0x1bcf6, CODE XREF=sub_7550+1876
0000000000006eca         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000006ed3         xor        r15d, r15d
0000000000006ed6         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000006ede         mov        qword [rsp+0xe8+var_A0], rax

                     loc_6ee3:
0000000000006ee3         xor        r11d, r11d                                  ; CODE XREF=sub_7550+180, sub_7550+1400, sub_7550+1488, sub_7550+1557, sub_7550+1615, sub_7550+1781, sub_7550+1839, sub_7550+2408, sub_7550+2485
0000000000006ee6         mov        rax, rbp
0000000000006ee9         mov        r8d, r12d
0000000000006eec         mov        rbp, r11
0000000000006eef         mov        r11, rax
0000000000006ef2         nop        word [rax+rax]

                     loc_6ef8:
0000000000006ef8         cmp        r11, rbp                                    ; CODE XREF=sub_7000+194
0000000000006efb         setne      r12b
0000000000006eff         cmp        r11, 0xffffffffffffffff
0000000000006f03         jne        loc_6f12

0000000000006f05         mov        rax, qword [rsp+0xe8+var_D8]
0000000000006f0a         cmp        byte [rax+rbp], 0x0
0000000000006f0e         setne      r12b

                     loc_6f12:
0000000000006f12         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
0000000000006f15         je         loc_7570

0000000000006f1b         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000006f20         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000006f25         lea        r9, qword [rdi+rbp]
0000000000006f29         setne      al
0000000000006f2c         and        al, byte [rsp+0xe8+var_DB]
0000000000006f30         mov        r10d, eax
0000000000006f33         je         loc_6fe0

0000000000006f39         mov        rax, qword [rsp+0xe8+var_D0]
0000000000006f3e         test       rax, rax
0000000000006f41         je         loc_7370

0000000000006f47         cmp        r11, 0xffffffffffffffff
0000000000006f4b         lea        rbx, qword [rbp+rax]
0000000000006f50         jne        loc_6f80

0000000000006f52         cmp        rax, 0x1
0000000000006f56         jbe        loc_6f80

0000000000006f58         mov        byte [rsp+0xe8+var_B0], r8b
0000000000006f5d         mov        byte [rsp+0xe8+var_B8], r10b
0000000000006f62         mov        qword [rsp+0xe8+var_C0], r9
0000000000006f67         call       j_strlen                                    ; strlen
0000000000006f6c         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000006f72         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000006f78         mov        r11, rax
0000000000006f7b         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_6f80:
0000000000006f80         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000006f83         mov        byte [rsp+0xe8+var_C0], r10b
0000000000006f88         ja         loc_7540

0000000000006f8e         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000006f93         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000006f98         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
0000000000006f9b         mov        qword [rsp+0xe8+var_A8], r11
0000000000006fa0         mov        byte [rsp+0xe8+var_B0], r8b
0000000000006fa5         mov        qword [rsp+0xe8+var_B8], r9
0000000000006faa         call       j_memcmp                                    ; memcmp
0000000000006faf         test       eax, eax
0000000000006fb1         mov        r9, qword [rsp+0xe8+var_B8]
0000000000006fb6         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000006fbc         mov        r11, qword [rsp+0xe8+var_A8]
0000000000006fc1         jne        loc_7540

0000000000006fc7         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000006fcc         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000006fd2         jne        loc_7f55

0000000000006fd8         nop        dword [rax+rax]

                     loc_6fe0:
0000000000006fe0         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_7530+19
0000000000006fe4         cmp        bl, 0x7e
0000000000006fe7         ja         loc_7308

0000000000006fed         lea        rcx, qword [switch_table_1bd80+44]          ; 0x1bdac
0000000000006ff4         movzx      edx, bl
0000000000006ff7         movsxd     rax, dword [rcx+rdx*4]
0000000000006ffb         add        rax, rcx
0000000000006ffe         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_7000:
0000000000007000         xor        r10d, r10d
0000000000007003         cmp        r11, 0x1
0000000000007007         setne      al
000000000000700a         cmp        r11, 0xffffffffffffffff
000000000000700e         jne        loc_701c

0000000000007010         mov        rax, qword [rsp+arg_8]
0000000000007015         cmp        byte [rax+1], 0x0
0000000000007019         setne      al

                     loc_701c:
000000000000701c         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_7000+14
0000000000007021         sete       dl
0000000000007024         test       al, al
0000000000007026         je         loc_7278

                     loc_702c:
000000000000702c         xor        r12d, r12d                                  ; CODE XREF=sub_7270+11
000000000000702f         xor        eax, eax
0000000000007031         nop        dword [rax]
                        ; endp

                     loc_7038:
0000000000007038         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_7220+50, sub_72f0+119
000000000000703d         jne        loc_7152

0000000000007043         test       dl, dl
0000000000007045         jne        loc_7152

                     loc_704b:
000000000000704b         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_7100+87
0000000000007050         test       rsi, rsi
0000000000007053         je         loc_7069

0000000000007055         mov        edx, ebx
0000000000007057         shr        dl, 0x5
000000000000705a         movzx      edx, dl
000000000000705d         mov        edx, dword [rsi+rdx*4]
0000000000007060         bt         edx, ebx
0000000000007063         jb         loc_71b3

                     loc_7069:
0000000000007069         test       r10b, r10b                                  ; CODE XREF=sub_7000+83, sub_7100+93
000000000000706c         jne        loc_71b3

0000000000007072         xor        eax, 0x1
0000000000007075         add        rbp, 0x1
0000000000007079         and        eax, r8d

                     loc_707c:
000000000000707c         test       al, al                                      ; CODE XREF=sub_7550+936
000000000000707e         je         loc_70a0

0000000000007080         cmp        r13, r15
0000000000007083         jbe        loc_708a

0000000000007085         mov        byte [r14+r15], 0x27

                     loc_708a:
000000000000708a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_7000+131
000000000000708e         cmp        r13, rax
0000000000007091         jbe        loc_7099

0000000000007093         mov        byte [r14+r15+1], 0x27

                     loc_7099:
0000000000007099         add        r15, 0x2                                    ; CODE XREF=sub_7000+145
000000000000709d         xor        r8d, r8d

                     loc_70a0:
00000000000070a0         cmp        r15, r13                                    ; CODE XREF=sub_7000+126, sub_7100+275, sub_7550+869
00000000000070a3         jae        loc_70a9

00000000000070a5         mov        byte [r14+r15], bl

                     loc_70a9:
00000000000070a9         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_7000+163
00000000000070ae         add        r15, 0x1
00000000000070b2         mov        eax, 0x0
00000000000070b7         test       r12b, r12b
00000000000070ba         cmove      edi, eax
00000000000070bd         mov        byte [rsp+0xe8+var_DA], dil
00000000000070c2         jmp        loc_6ef8
00000000000070c7         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_70d0:
00000000000070d0         xor        r10d, r10d
00000000000070d3         mov        eax, dword [rsp+arg_0]
00000000000070d7         cmp        eax, 0x2
00000000000070da         je         loc_7698

00000000000070e0         cmp        eax, 0x5
00000000000070e3         je         loc_7658

00000000000070e9         cmp        eax, 0x2
00000000000070ec         mov        ebx, 0x3f
00000000000070f1         sete       dl
00000000000070f4         xor        r12d, r12d
00000000000070f7         xor        eax, eax
00000000000070f9         jmp        sub_7000+56
                        ; endp
00000000000070fe         align      256


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_7100:
0000000000007100         xor        r10d, r10d
0000000000007103         cmp        dword [rsp+arg_0], 0x2
0000000000007108         je         loc_7610

000000000000710e         mov        byte [rsp+arg_74], r12b
0000000000007113         xor        edx, edx
0000000000007115         xor        eax, eax
0000000000007117         mov        ebx, 0x27
000000000000711c         jmp        sub_7000+56
                        ; endp
0000000000007121         nop        dword [rax]
0000000000007128         mov        edx, 0x9
000000000000712d         mov        ebx, 0x74

                     loc_7132:
0000000000007132         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_72c0+10, sub_73b0+37, sub_74f0+53
0000000000007137         sete       al
000000000000713a         and        al, byte [rsp+arg_7]
000000000000713e         jne        sub_7270+30

0000000000007144         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_7100+114
0000000000007149         jne        loc_71b0

                     loc_714b:
000000000000714b         mov        ebx, edx                                    ; CODE XREF=sub_7220+18
000000000000714d         xor        r12d, r12d
0000000000007150         xor        eax, eax
                        ; endp

                     loc_7152:
0000000000007152         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_7000+61, sub_7000+69
0000000000007157         jne        loc_704b

000000000000715d         jmp        loc_7069
0000000000007162         nop        word [rax+rax]
0000000000007168         mov        edx, 0x8
000000000000716d         mov        ebx, 0x62
0000000000007172         jmp        sub_7100+68
0000000000007174         nop        dword [rax]
0000000000007178         cmp        dword [rsp+8], 0x2
000000000000717d         je         sub_7550                                    ; sub_7550
0000000000007183         cmp        byte [rsp+0xd], 0x0
0000000000007188         je         sub_7390+16

                     loc_718e:
000000000000718e         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_7390+8
0000000000007193         je         loc_73a0

0000000000007199         cmp        qword [rsp+arg_10], 0x0
000000000000719f         jne        loc_755b

00000000000071a5         mov        ebx, 0x5c
00000000000071aa         nop        word [rax+rax]
                        ; endp

                     loc_71b0:
00000000000071b0         xor        r12d, r12d                                  ; CODE XREF=sub_7100+73, sub_74f0+29
                        ; endp

                     loc_71b3:
00000000000071b3         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_7000+99, sub_7000+108
00000000000071b8         sete       dl
00000000000071bb         cmp        byte [rsp+0xe8+var_D9], 0x0
00000000000071c0         mov        eax, edx
00000000000071c2         jne        loc_7a18

00000000000071c8         mov        eax, r8d
00000000000071cb         xor        eax, 0x1
00000000000071ce         and        al, dl
00000000000071d0         je         loc_7201

00000000000071d2         cmp        r13, r15
00000000000071d5         jbe        loc_71dc

00000000000071d7         mov        byte [r14+r15], 0x27

                     loc_71dc:
00000000000071dc         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_7100+213
00000000000071e0         cmp        r13, rdx
00000000000071e3         jbe        loc_71eb

00000000000071e5         mov        byte [r14+r15+1], 0x24

                     loc_71eb:
00000000000071eb         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_7100+227
00000000000071ef         cmp        r13, rdx
00000000000071f2         jbe        loc_71fa

00000000000071f4         mov        byte [r14+r15+2], 0x27

                     loc_71fa:
00000000000071fa         add        r15, 0x3                                    ; CODE XREF=sub_7100+242
00000000000071fe         mov        r8d, eax

                     loc_7201:
0000000000007201         cmp        r13, r15                                    ; CODE XREF=sub_7100+208
0000000000007204         jbe        loc_720b

0000000000007206         mov        byte [r14+r15], 0x5c

                     loc_720b:
000000000000720b         add        r15, 0x1                                    ; CODE XREF=sub_7100+260
000000000000720f         add        rbp, 0x1
0000000000007213         jmp        loc_70a0
0000000000007218         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_7220:
0000000000007220         cmp        byte [rsp+arg_5], 0x0
0000000000007225         jne        loc_73f3

000000000000722b         xor        edx, edx
000000000000722d         test       byte [rsp+arg_70], 0x1
0000000000007232         je         loc_714b

0000000000007238         add        rbp, 0x1
000000000000723c         jmp        quotearg_buffer_restyled+232
                        ; endp
0000000000007241         nop        dword [rax]
0000000000007248         cmp        dword [rsp+8], 0x2
000000000000724d         sete       dl
0000000000007250         xor        eax, eax
0000000000007252         jmp        sub_7000+56
0000000000007257         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7260:
0000000000007260         mov        edx, 0x7
0000000000007265         mov        ebx, 0x61
000000000000726a         jmp        sub_7100+68
                        ; endp
000000000000726f         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7270:
0000000000007270         cmp        dword [rsp+8], 0x2
0000000000007275         sete       dl
                        ; endp

                     loc_7278:
0000000000007278         test       rbp, rbp                                    ; CODE XREF=sub_7000+38, sub_7490+35
000000000000727b         jne        loc_702c

0000000000007281         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_74c0+43
0000000000007286         and        al, dl
0000000000007288         je         sub_7000+56

000000000000728e         mov        rbp, r11
0000000000007291         mov        dword [rsp+arg_0], 0x2
0000000000007299         jmp        sub_7550+1097
                        ; endp
000000000000729e         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_72a0:
00000000000072a0         cmp        dword [rsp+arg_0], 0x2
00000000000072a5         sete       dl
00000000000072a8         xor        r12d, r12d
00000000000072ab         jmp        sub_7270+17
                        ; endp
00000000000072ad         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_72b0:
00000000000072b0         cmp        dword [rsp+arg_0], 0x2
00000000000072b5         mov        ebx, 0x20
00000000000072ba         sete       dl
00000000000072bd         jmp        sub_7270+17
                        ; endp
00000000000072bf         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_72c0:
00000000000072c0         mov        edx, 0xd
00000000000072c5         mov        ebx, 0x72
00000000000072ca         jmp        loc_7132
00000000000072cf         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_72d0:
00000000000072d0         mov        edx, 0xc
00000000000072d5         mov        ebx, 0x66
00000000000072da         jmp        sub_7100+68
                        ; endp
00000000000072df         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_72e0:
00000000000072e0         mov        edx, 0xb
00000000000072e5         mov        ebx, 0x76
00000000000072ea         jmp        sub_7100+68
                        ; endp
00000000000072ef         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_72f0:
00000000000072f0         mov        edx, 0xa
00000000000072f5         mov        ebx, 0x6e
00000000000072fa         jmp        sub_7100+50
                        ; endp
00000000000072ff         align      256

                     loc_7300:
0000000000007300         xor        r10d, r10d                                  ; CODE XREF=sub_72f0+135
0000000000007303         nop        dword [rax+rax]

                     loc_7308:
0000000000007308         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
000000000000730e         jne        loc_76b8

0000000000007314         mov        qword [rsp+0xe8+var_B0], r11
0000000000007319         mov        byte [rsp+0xe8+var_B8], r8b
000000000000731e         mov        byte [rsp+0xe8+var_C0], r10b
0000000000007323         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000007328         mov        rcx, qword [rax]
000000000000732b         movzx      edx, bl
000000000000732e         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000007334         movzx      r8d, byte [rsp+0xe8+var_B8]
000000000000733a         mov        r11, qword [rsp+0xe8+var_B0]
000000000000733f         mov        edi, 0x1
0000000000007344         movzx      eax, word [rcx+rdx*2]
0000000000007348         and        ax, 0x4000
000000000000734c         setne      r12b
0000000000007350         sete       al
0000000000007353         and        al, byte [rsp+0xe8+var_DB]

                     loc_7357:
0000000000007357         test       al, al                                      ; CODE XREF=sub_7550+2221
0000000000007359         jne        loc_7cf1

000000000000735f         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000007364         sete       dl
0000000000007367         jmp        loc_7038
000000000000736c         align      16

                     loc_7370:
0000000000007370         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000007374         cmp        bl, 0x7e
0000000000007377         ja         loc_7300

0000000000007379         lea        rcx, qword [switch_table_1bd80+552]         ; 0x1bfa8
0000000000007380         movzx      edx, bl
0000000000007383         movsxd     rax, dword [rcx+rdx*4]
0000000000007387         add        rax, rcx
000000000000738a         jmp        rax
                        ; endp
000000000000738c         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_7390:
0000000000007390         xor        r10d, r10d
0000000000007393         cmp        byte [rsp+arg_5], 0x0
0000000000007398         jne        loc_718e

000000000000739e         nop

                     loc_73a0:
00000000000073a0         mov        edx, 0x5c                                   ; CODE XREF=sub_7100+136, sub_7100+147
00000000000073a5         mov        ebx, 0x5c
00000000000073aa         jmp        sub_7100+68
                        ; endp
00000000000073af         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_73b0:
00000000000073b0         mov        edx, 0xc
00000000000073b5         xor        r10d, r10d
00000000000073b8         mov        ebx, 0x66
00000000000073bd         jmp        sub_7100+68
                        ; endp
00000000000073c2         nop        word [rax+rax]
00000000000073c8         mov        edx, 0xa
00000000000073cd         xor        r10d, r10d
00000000000073d0         mov        ebx, 0x6e
00000000000073d5         jmp        sub_7100+50
00000000000073da         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_73e0:
00000000000073e0         mov        ebx, 0x61
00000000000073e5         jmp        sub_7100+176
                        ; endp
00000000000073ea         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_73f0:
00000000000073f0         xor        r10d, r10d
                        ; endp

                     loc_73f3:
00000000000073f3         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_7220+5
00000000000073f8         sete       dl
00000000000073fb         cmp        byte [rsp+arg_7], 0x0
0000000000007400         jne        loc_7f9a

0000000000007406         mov        eax, r8d
0000000000007409         mov        rcx, r15
000000000000740c         xor        eax, 0x1
000000000000740f         and        al, dl
0000000000007411         je         loc_7440

0000000000007413         cmp        r13, r15
0000000000007416         jbe        loc_741d

0000000000007418         mov        byte [r14+r15], 0x27

                     loc_741d:
000000000000741d         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_73f0+38
0000000000007421         cmp        r13, rcx
0000000000007424         jbe        loc_742c

0000000000007426         mov        byte [r14+r15+1], 0x24

                     loc_742c:
000000000000742c         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_73f0+52
0000000000007430         cmp        r13, rcx
0000000000007433         ja         loc_7a69

                     loc_7439:
0000000000007439         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_7550+1311
000000000000743d         mov        r8d, eax

                     loc_7440:
0000000000007440         cmp        r13, rcx                                    ; CODE XREF=sub_73f0+33
0000000000007443         jbe        loc_744a

0000000000007445         mov        byte [r14+rcx], 0x5c

                     loc_744a:
000000000000744a         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_73f0+83
000000000000744f         lea        r15, qword [rcx+1]
0000000000007453         je         loc_7a59

0000000000007459         lea        rax, qword [rbp+1]
000000000000745d         cmp        rax, r11
0000000000007460         jae        loc_747b

0000000000007462         mov        rax, qword [rsp+arg_8]
0000000000007467         movzx      eax, byte [rax+rbp+1]
000000000000746c         mov        byte [rsp+arg_20], al
0000000000007470         sub        eax, 0x30
0000000000007473         cmp        al, 0x9
0000000000007475         jbe        loc_7ca9

                     loc_747b:
000000000000747b         mov        eax, r12d                                   ; CODE XREF=sub_73f0+112
000000000000747e         mov        ebx, 0x30
0000000000007483         xor        r12d, r12d
0000000000007486         jmp        sub_7000+56
                        ; endp
000000000000748b         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_7490:
0000000000007490         cmp        dword [rsp+arg_0], 0x2
0000000000007495         mov        r12d, r10d
0000000000007498         sete       dl
000000000000749b         xor        r10d, r10d
000000000000749e         xor        eax, eax
00000000000074a0         jmp        sub_7000+56
                        ; endp
00000000000074a5         nop        dword [rax]
00000000000074a8         cmp        dword [rsp+8], 0x2
00000000000074ad         sete       dl
00000000000074b0         xor        r10d, r10d
00000000000074b3         jmp        sub_7270+8
00000000000074b8         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_74c0:
00000000000074c0         cmp        dword [rsp+8], 0x2
00000000000074c5         sete       dl
00000000000074c8         xor        r10d, r10d
00000000000074cb         xor        r12d, r12d
00000000000074ce         jmp        sub_7270+17
                        ; endp
00000000000074d3         nop        dword [rax+rax]
00000000000074d8         cmp        dword [rsp+8], 0x2
00000000000074dd         mov        r12d, r10d
00000000000074e0         mov        ebx, 0x20
00000000000074e5         sete       dl
00000000000074e8         xor        r10d, r10d
00000000000074eb         jmp        sub_7270+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_74f0:
00000000000074f0         mov        edx, 0xd
00000000000074f5         xor        r10d, r10d
00000000000074f8         mov        ebx, 0x72
00000000000074fd         jmp        sub_7100+50
                        ; endp
0000000000007502         nop        word [rax+rax]
0000000000007508         mov        ebx, 0x76
000000000000750d         jmp        sub_7100+176
0000000000007512         nop        word [rax+rax]
0000000000007518         mov        edx, 0x9
000000000000751d         xor        r10d, r10d
0000000000007520         mov        ebx, 0x74
0000000000007525         jmp        sub_7100+50
000000000000752a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7530:
0000000000007530         mov        ebx, 0x62
0000000000007535         jmp        sub_7100+176
                        ; endp
000000000000753a         nop        word [rax+rax]

                     loc_7540:
0000000000007540         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
0000000000007543         jmp        loc_6fe0
0000000000007548         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_7550:
0000000000007550         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_7100+125
0000000000007555         jne        sub_7550+2416
                        ; endp

                     loc_755b:
000000000000755b         add        rbp, 0x1                                    ; CODE XREF=sub_7100+159
000000000000755f         mov        eax, r8d
0000000000007562         xor        r12d, r12d
0000000000007565         mov        ebx, 0x5c
000000000000756a         jmp        sub_7000+124
                        ; endp
000000000000756f         align      16

                     loc_7570:
0000000000007570         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
0000000000007575         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000757a         mov        r12d, r8d
000000000000757d         mov        rbp, r11
0000000000007580         sete       dl
0000000000007583         mov        eax, ebx
0000000000007585         test       r15, r15
0000000000007588         sete       cl
000000000000758b         and        eax, edx
000000000000758d         and        al, cl
000000000000758f         jne        loc_7ff6

0000000000007595         mov        eax, ebx
0000000000007597         xor        eax, 0x1
000000000000759a         and        dl, al
000000000000759c         je         loc_7f0c

00000000000075a2         cmp        byte [rsp+0xe8+var_6C], 0x0
00000000000075a7         je         loc_7f0a

00000000000075ad         cmp        byte [rsp+0xe8+var_DA], 0x0
00000000000075b2         jne        loc_7fad

00000000000075b8         test       r13, r13
00000000000075bb         sete       al
00000000000075be         cmp        qword [rsp+0xe8+var_98], 0x0
00000000000075c4         setne      dl
00000000000075c7         and        al, dl
00000000000075c9         je         loc_7fec

00000000000075cf         mov        r13, qword [rsp+0xe8+var_98]

                     loc_75d4:
00000000000075d4         lea        rbx, qword [aItercurptr0+21]                ; 0x1bcf6, CODE XREF=sub_7550+2781
00000000000075db         mov        byte [r14], 0x27
00000000000075df         mov        dword [rsp+0xe8+var_E0], 0x2
00000000000075e7         mov        r15d, 0x1
00000000000075ed         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000075f6         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000075fb         mov        qword [rsp+0xe8+var_A0], rbx
0000000000007600         mov        byte [rsp+0xe8+var_6C], al
0000000000007604         jmp        loc_6ee3
0000000000007609         align      16

                     loc_7610:
0000000000007610         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_7100+8
0000000000007615         jne        sub_7550+2416

000000000000761b         test       r13, r13
000000000000761e         je         loc_7a20

0000000000007624         xor        edx, edx
0000000000007626         cmp        qword [rsp+arg_48], 0x0
000000000000762c         jne        loc_7a20

                     loc_7632:
0000000000007632         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_7550+1284, sub_7550+2794
0000000000007637         add        r15, 0x3
000000000000763b         xor        eax, eax
000000000000763d         mov        byte [rsp+arg_74], r12b
0000000000007642         xor        r8d, r8d
0000000000007645         mov        r13, rdx
0000000000007648         mov        ebx, 0x27
000000000000764d         jmp        sub_7000+105
                        ; endp
0000000000007652         align      8

                     loc_7658:
0000000000007658         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_70d0+19
000000000000765d         je         loc_7680

000000000000765f         lea        rcx, qword [rbp+2]
0000000000007663         cmp        rcx, r11
0000000000007666         jae        loc_7680

0000000000007668         mov        rax, qword [rsp+arg_8]
000000000000766d         cmp        byte [rax+rbp+1], 0x3f
0000000000007672         je         loc_7e02

0000000000007678         nop        dword [rax+rax]

                     loc_7680:
0000000000007680         xor        edx, edx                                    ; CODE XREF=sub_7550+269, sub_7550+278, sub_7550+2233, sub_7550+2253
0000000000007682         xor        r12d, r12d
0000000000007685         xor        eax, eax
0000000000007687         mov        ebx, 0x3f
000000000000768c         jmp        sub_7000+56
                        ; endp
0000000000007691         align      8

                     loc_7698:
0000000000007698         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_70d0+10
000000000000769d         jne        loc_7ec0

00000000000076a3         xor        r12d, r12d
00000000000076a6         xor        eax, eax
00000000000076a8         mov        ebx, 0x3f
00000000000076ad         jmp        sub_7000+105
                        ; endp
00000000000076b2         align      8

                     loc_76b8:
00000000000076b8         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_72f0+30
00000000000076c0         cmp        r11, 0xffffffffffffffff
00000000000076c4         mov        qword [rsp+0xe8+var_48], 0x0
00000000000076d0         mov        qword [rsp+0xe8+var_C0], rax
00000000000076d5         jne        loc_7704

00000000000076d7         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
00000000000076dc         mov        byte [rsp+0xe8+var_A8], r8b
00000000000076e1         mov        byte [rsp+0xe8+var_B0], r10b
00000000000076e6         mov        qword [rsp+0xe8+var_B8], r9
00000000000076eb         call       j_strlen                                    ; strlen
00000000000076f0         movzx      r8d, byte [rsp+0xe8+var_A8]
00000000000076f6         movzx      r10d, byte [rsp+0xe8+var_B0]
00000000000076fc         mov        r11, rax
00000000000076ff         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_7704:
0000000000007704         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_7550+389
000000000000770c         xor        ecx, ecx
000000000000770e         mov        byte [rsp+0xe8+var_6A], bl
0000000000007712         mov        byte [rsp+0xe8+var_6B], r8b
0000000000007717         mov        rbx, rcx
000000000000771a         mov        qword [rsp+0xe8+var_60], r9
0000000000007722         mov        qword [rsp+0xe8+var_B0], rax
0000000000007727         mov        byte [rsp+0xe8+var_69], r10b
000000000000772c         mov        qword [rsp+0xe8+var_68], r15
0000000000007734         mov        qword [rsp+0xe8+var_A8], r14
0000000000007739         mov        qword [rsp+0xe8+var_78], r13
000000000000773e         mov        qword [rsp+0xe8+var_B8], r11

                     loc_7743:
0000000000007743         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_7550+623
0000000000007748         lea        r14, qword [rbp+rbx]
000000000000774d         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000007752         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000007757         mov        rdi, qword [rsp+0xe8+var_B0]
000000000000775c         lea        r13, qword [rax+r14]
0000000000007760         sub        rdx, r14
0000000000007763         mov        rsi, r13
0000000000007766         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000776b         test       rax, rax
000000000000776e         mov        r15, rax
0000000000007771         je         loc_77c1

0000000000007773         cmp        rax, 0xffffffffffffffff
0000000000007777         je         loc_7d95

000000000000777d         cmp        rax, 0xfffffffffffffffe
0000000000007781         je         loc_7d21

0000000000007787         cmp        dword [rsp+0xe8+var_E0], 0x2
000000000000778c         sete       al
000000000000778f         and        al, byte [rsp+0xe8+var_D9]
0000000000007793         jne        loc_7930

                     loc_7799:
0000000000007799         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_7550+996, sub_7550+1031
00000000000077a0         call       j_iswprint                                  ; iswprint
00000000000077a5         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
00000000000077aa         test       eax, eax
00000000000077ac         mov        eax, 0x0
00000000000077b1         cmove      r12d, eax
00000000000077b5         add        rbx, r15
00000000000077b8         call       j_mbsinit                                   ; mbsinit
00000000000077bd         test       eax, eax
00000000000077bf         je         loc_7743

                     loc_77c1:
00000000000077c1         mov        edx, r12d                                   ; CODE XREF=sub_7550+545
00000000000077c4         mov        rdi, rbx
00000000000077c7         movzx      r8d, byte [rsp+0xe8+var_6B]
00000000000077cd         xor        edx, 0x1
00000000000077d0         movzx      ebx, byte [rsp+0xe8+var_6A]
00000000000077d5         movzx      r10d, byte [rsp+0xe8+var_69]
00000000000077db         and        dl, byte [rsp+0xe8+var_DB]
00000000000077df         mov        r15, qword [rsp+0xe8+var_68]
00000000000077e7         mov        r14, qword [rsp+0xe8+var_A8]
00000000000077ec         mov        r13, qword [rsp+0xe8+var_78]
00000000000077f1         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_77f6:
00000000000077f6         cmp        rdi, 0x1                                    ; CODE XREF=sub_7550+2112, sub_7550+2168
00000000000077fa         jbe        loc_7dfb

                     loc_7800:
0000000000007800         mov        rcx, rdi                                    ; CODE XREF=sub_7550+1961
0000000000007803         xor        esi, esi
0000000000007805         movzx      r9d, byte [rsp+0xe8+var_D9]
000000000000780b         add        rcx, rbp
000000000000780e         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000007813         jmp        loc_78ce
0000000000007818         align      32

                     loc_7820:
0000000000007820         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_7550+896
0000000000007825         sete       al
0000000000007828         test       r9b, r9b
000000000000782b         jne        loc_7ce0

0000000000007831         mov        esi, r8d
0000000000007834         xor        esi, 0x1
0000000000007837         and        al, sil
000000000000783a         je         loc_786b

000000000000783c         cmp        r13, r15
000000000000783f         jbe        loc_7846

0000000000007841         mov        byte [r14+r15], 0x27

                     loc_7846:
0000000000007846         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_7550+751
000000000000784a         cmp        r13, rsi
000000000000784d         jbe        loc_7855

000000000000784f         mov        byte [r14+r15+1], 0x24

                     loc_7855:
0000000000007855         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_7550+765
0000000000007859         cmp        r13, rsi
000000000000785c         jbe        loc_7864                                    ; DATA XREF=copy_unescaped_string+616

000000000000785e         mov        byte [r14+r15+2], 0x27

                     loc_7864:
0000000000007864         add        r15, 0x3                                    ; CODE XREF=sub_7550+780
0000000000007868         mov        r8d, eax

                     loc_786b:
000000000000786b         cmp        r13, r15                                    ; CODE XREF=sub_7550+746
000000000000786e         jbe        loc_7875

0000000000007870         mov        byte [r14+r15], 0x5c

                     loc_7875:
0000000000007875         lea        rax, qword [r15+1]                          ; CODE XREF=sub_7550+798
0000000000007879         cmp        r13, rax
000000000000787c         jbe        loc_788b

000000000000787e         mov        eax, ebx
0000000000007880         shr        al, 0x6
0000000000007883         add        eax, 0x30
0000000000007886         mov        byte [r14+r15+1], al

                     loc_788b:
000000000000788b         lea        rax, qword [r15+2]                          ; CODE XREF=sub_7550+812
000000000000788f         cmp        r13, rax
0000000000007892         jbe        loc_78a4

0000000000007894         mov        eax, ebx
0000000000007896         shr        al, 0x3
0000000000007899         and        eax, 0x7
000000000000789c         add        eax, 0x30
000000000000789f         mov        byte [r14+r15+2], al

                     loc_78a4:
00000000000078a4         and        ebx, 0x7                                    ; CODE XREF=sub_7550+834
00000000000078a7         add        rbp, 0x1
00000000000078ab         add        r15, 0x3
00000000000078af         add        ebx, 0x30
00000000000078b2         cmp        rbp, rcx
00000000000078b5         jae        loc_70a0

00000000000078bb         mov        esi, edx

                     loc_78bd:
00000000000078bd         cmp        r13, r15                                    ; CODE XREF=sub_7550+985, sub_7550+1969
00000000000078c0         jbe        loc_78c6

00000000000078c2         mov        byte [r14+r15], bl

                     loc_78c6:
00000000000078c6         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_7550+880
00000000000078ca         add        r15, 0x1

                     loc_78ce:
00000000000078ce         test       dl, dl                                      ; CODE XREF=sub_7550+707
00000000000078d0         jne        loc_7820

00000000000078d6         mov        eax, esi
00000000000078d8         xor        eax, 0x1
00000000000078db         and        eax, r8d
00000000000078de         test       r10b, r10b
00000000000078e1         je         loc_78f1

00000000000078e3         cmp        r13, r15
00000000000078e6         jbe        loc_78ed

00000000000078e8         mov        byte [r14+r15], 0x5c

                     loc_78ed:
00000000000078ed         add        r15, 0x1                                    ; CODE XREF=sub_7550+918

                     loc_78f1:
00000000000078f1         add        rbp, 0x1                                    ; CODE XREF=sub_7550+913
00000000000078f5         cmp        rbp, rcx
00000000000078f8         jae        loc_707c

00000000000078fe         test       al, al
0000000000007900         je         loc_7cfe

0000000000007906         cmp        r13, r15
0000000000007909         jbe        loc_7910

000000000000790b         mov        byte [r14+r15], 0x27

                     loc_7910:
0000000000007910         lea        rax, qword [r15+1]                          ; CODE XREF=sub_7550+953
0000000000007914         cmp        r13, rax
0000000000007917         jbe        loc_791f

0000000000007919         mov        byte [r14+r15+1], 0x27

                     loc_791f:
000000000000791f         add        r15, 0x2                                    ; CODE XREF=sub_7550+967
0000000000007923         xor        r10d, r10d
0000000000007926         xor        r8d, r8d
0000000000007929         jmp        loc_78bd
000000000000792b         align      16

                     loc_7930:
0000000000007930         cmp        r15, 0x1                                    ; CODE XREF=sub_7550+579
0000000000007934         je         loc_7799

000000000000793a         mov        rdi, qword [rsp+0xe8+var_D8]
000000000000793f         lea        rcx, qword [rdi+r15]
0000000000007943         lea        rdx, qword [rdi+r14+1]
0000000000007948         lea        r8, qword [rcx+r14]
000000000000794c         jmp        loc_795d
000000000000794e         align      16

                     loc_7950:
0000000000007950         add        rdx, 0x1                                    ; CODE XREF=sub_7550+1046, sub_7550+1072
0000000000007954         cmp        r8, rdx
0000000000007957         je         loc_7799

                     loc_795d:
000000000000795d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_7550+1020
0000000000007960         sub        ecx, 0x5b
0000000000007963         cmp        cl, 0x21
0000000000007966         ja         loc_7950

0000000000007968         mov        esi, 0x1
000000000000796d         shl        rsi, cl
0000000000007970         mov        rcx, rsi
0000000000007973         movabs     rsi, 0x20000002b
000000000000797d         test       rcx, rsi
0000000000007980         je         loc_7950

0000000000007982         mov        r14, qword [rsp+0xe8+var_A8]
0000000000007987         mov        r13, qword [rsp+0xe8+var_78]
000000000000798c         mov        rbp, qword [rsp+0xe8+var_B8]
0000000000007991         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_7999:
0000000000007999         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_7550+1227, sub_7550+1948, sub_7550+2585, sub_7550+2734
000000000000799e         je         loc_79b0

00000000000079a0         test       al, al
00000000000079a2         mov        eax, 0x4
00000000000079a7         cmove      eax, dword [rsp+0xe8+var_E0]
00000000000079ac         mov        dword [rsp+0xe8+var_E0], eax

                     loc_79b0:
00000000000079b0         sub        rsp, 0x8                                    ; CODE XREF=sub_7550+1102
00000000000079b4         mov        rcx, rbp
00000000000079b7         mov        rsi, r13
00000000000079ba         push       qword [rsp+0xf0+var_88]
00000000000079be         push       qword [rsp+0xf8+var_80]
00000000000079c2         mov        rdi, r14
00000000000079c5         push       0x0
00000000000079c7         mov        r9d, dword [rsp+0x108+var_70]
00000000000079cf         mov        r8d, dword [rsp+0x108+var_E0]
00000000000079d4         mov        rdx, qword [rsp+0x108+var_D8]
00000000000079d9         and        r9d, 0xfffffffd
00000000000079dd         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000079e2         add        rsp, 0x20
00000000000079e6         mov        r15, rax

                     loc_79e9:
00000000000079e9         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_7550+2549, sub_7550+2560, sub_7550+2711
00000000000079f1         xor        rbx, qword [fs:0x28]
00000000000079fa         mov        rax, r15
00000000000079fd         jne        loc_8003

0000000000007a03         add        rsp, 0xb8
0000000000007a0a         pop        rbx
0000000000007a0b         pop        rbp
0000000000007a0c         pop        r12
0000000000007a0e         pop        r13
0000000000007a10         pop        r14
0000000000007a12         pop        r15
0000000000007a14         ret
                        ; endp
0000000000007a15         align      8

                     loc_7a18:
0000000000007a18         mov        rbp, r11                                    ; CODE XREF=sub_7100+194
0000000000007a1b         jmp        loc_7999

                     loc_7a20:
0000000000007a20         cmp        r13, r15                                    ; CODE XREF=sub_7550+206, sub_7550+220
0000000000007a23         jbe        loc_7a2a

0000000000007a25         mov        byte [r14+r15], 0x27

                     loc_7a2a:
0000000000007a2a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_7550+1235
0000000000007a2e         cmp        r13, rax
0000000000007a31         jbe        loc_7a39

0000000000007a33         mov        byte [r14+r15+1], 0x5c

                     loc_7a39:
0000000000007a39         lea        rax, qword [r15+2]                          ; CODE XREF=sub_7550+1249
0000000000007a3d         cmp        r13, rax
0000000000007a40         jbe        loc_8032

0000000000007a46         mov        rdx, r13
0000000000007a49         mov        byte [r14+r15+2], 0x27
0000000000007a4f         mov        r13, qword [rsp+arg_48]
0000000000007a54         jmp        loc_7632

                     loc_7a59:
0000000000007a59         mov        eax, r12d                                   ; CODE XREF=sub_73f0+99
0000000000007a5c         mov        ebx, 0x30
0000000000007a61         xor        r12d, r12d
0000000000007a64         jmp        sub_7000+105
                        ; endp

                     loc_7a69:
0000000000007a69         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_73f0+67
0000000000007a6f         jmp        loc_7439

                     loc_7a74:
0000000000007a74         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
0000000000007a76         jne        loc_6ea3

0000000000007a7c         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_7a81:
0000000000007a81         test       r13, r13                                    ; CODE XREF=sub_7550+2749
0000000000007a84         jne        loc_801a

0000000000007a8a         lea        rax, qword [aItercurptr0+21]                ; 0x1bcf6
0000000000007a91         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007a9a         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000007a9f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007aa4         xor        r12d, r12d
0000000000007aa7         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000007aac         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000007ab5         mov        qword [rsp+0xe8+var_A0], rax
0000000000007aba         mov        r15d, 0x1
0000000000007ac0         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000007ac8         jmp        loc_6ee3
0000000000007acd         align      16

                     loc_7ad0:
0000000000007ad0         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
0000000000007ad2         jne        loc_7ecd

0000000000007ad8         test       r13, r13
0000000000007adb         je         loc_7d06

0000000000007ae1         mov        byte [r14], 0x22
0000000000007ae5         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000007aea         xor        r12d, r12d
0000000000007aed         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007af2         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_7afb:
0000000000007afb         lea        rax, qword [aS+4]                           ; 0x1b8a8, CODE XREF=sub_7550+1996
0000000000007b02         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000007b07         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000007b0c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000007b15         mov        r15d, 0x1
0000000000007b1b         mov        qword [rsp+0xe8+var_A0], rax
0000000000007b20         jmp        loc_6ee3

                     loc_7b25:
0000000000007b25         lea        rax, qword [aS+4]                           ; case 6, 0x1b8a8, CODE XREF=quotearg_buffer_restyled+145
0000000000007b2c         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000007b31         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007b36         xor        r12d, r12d
0000000000007b39         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007b42         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000007b47         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000007b4c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000007b55         xor        r15d, r15d
0000000000007b58         mov        qword [rsp+0xe8+var_A0], rax
0000000000007b5d         mov        dword [rsp+0xe8+var_E0], 0x5
0000000000007b65         jmp        loc_6ee3

                     loc_7b6a:
0000000000007b6a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
0000000000007b6f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007b74         xor        r12d, r12d
0000000000007b77         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007b80         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000007b85         xor        r15d, r15d
0000000000007b88         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000007b8d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000007b96         mov        qword [rsp+0xe8+var_A0], 0x0
0000000000007b9f         jmp        loc_6ee3

                     loc_7ba4:
0000000000007ba4         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
0000000000007ba9         je         loc_7c01

0000000000007bab         lea        rsi, qword [__PRETTY_FUNCTION__.5159+34]    ; argument "msgid" for method j_dcgettext, 0x1bd32
0000000000007bb2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007bb4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007bb9         call       j_dcgettext                                 ; dcgettext
0000000000007bbe         mov        rcx, rax
0000000000007bc1         mov        qword [rsp+0xe8+var_80], rax
0000000000007bc6         lea        rax, qword [__PRETTY_FUNCTION__.5159+34]    ; 0x1bd32
0000000000007bcd         cmp        rcx, rax
0000000000007bd0         je         loc_7f6e

                     loc_7bd6:
0000000000007bd6         lea        rsi, qword [aItercurptr0+21]                ; argument "msgid" for method j_dcgettext, 0x1bcf6, CODE XREF=sub_7550+2607
0000000000007bdd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000007bdf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000007be4         call       j_dcgettext                                 ; dcgettext
0000000000007be9         mov        rcx, rax
0000000000007bec         mov        qword [rsp+0xe8+var_88], rax
0000000000007bf1         lea        rax, qword [aItercurptr0+21]                ; 0x1bcf6
0000000000007bf8         cmp        rcx, rax
0000000000007bfb         je         loc_7f84

                     loc_7c01:
0000000000007c01         xor        r15d, r15d                                  ; CODE XREF=sub_7550+1625, sub_7550+2629
0000000000007c04         test       ebx, ebx
0000000000007c06         je         loc_7dcd

                     loc_7c0c:
0000000000007c0c         test       ebx, ebx                                    ; CODE XREF=sub_7550+2183, sub_7550+2214
0000000000007c0e         mov        rbx, qword [rsp+0xe8+var_88]
0000000000007c13         setne      byte [rsp+0xe8+var_D9]
0000000000007c18         xor        r12d, r12d
0000000000007c1b         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
0000000000007c1e         call       j_strlen                                    ; strlen
0000000000007c23         mov        qword [rsp+0xe8+var_A0], rbx
0000000000007c28         mov        qword [rsp+0xe8+var_D0], rax
0000000000007c2d         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000007c32         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007c37         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007c40         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000007c45         jmp        loc_6ee3

                     loc_7c4a:
0000000000007c4a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
0000000000007c4f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007c54         xor        r12d, r12d
0000000000007c57         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007c60         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000007c65         xor        r15d, r15d
0000000000007c68         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000007c6d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000007c76         mov        qword [rsp+0xe8+var_A0], 0x0
0000000000007c7f         jmp        loc_6ee3

                     loc_7c84:
0000000000007c84         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
0000000000007c89         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007c8e         xor        r12d, r12d
0000000000007c91         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007c9a         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000007c9f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000007ca4         jmp        loc_6ec3

                     loc_7ca9:
0000000000007ca9         cmp        r13, r15                                    ; CODE XREF=sub_73f0+133
0000000000007cac         jbe        loc_7cb3

0000000000007cae         mov        byte [r14+r15], 0x30

                     loc_7cb3:
0000000000007cb3         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_7550+1884
0000000000007cb7         cmp        r13, rax
0000000000007cba         jbe        loc_7cc2

0000000000007cbc         mov        byte [r14+rcx+2], 0x30

                     loc_7cc2:
0000000000007cc2         mov        eax, r12d                                   ; CODE XREF=sub_7550+1898
0000000000007cc5         lea        r15, qword [rcx+3]
0000000000007cc9         xor        r12d, r12d
0000000000007ccc         mov        ebx, 0x30
0000000000007cd1         jmp        sub_7000+56
                        ; endp
0000000000007cd6         align      32

                     loc_7ce0:
0000000000007ce0         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_7550+731
0000000000007ce5         mov        rbp, r11
0000000000007ce8         mov        byte [rsp+0xe8+var_DB], bl
0000000000007cec         jmp        loc_7999

                     loc_7cf1:
0000000000007cf1         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_72f0+105
0000000000007cf6         xor        r12d, r12d
0000000000007cf9         jmp        loc_7800

                     loc_7cfe:
0000000000007cfe         xor        r10d, r10d                                  ; CODE XREF=sub_7550+944
0000000000007d01         jmp        loc_78bd

                     loc_7d06:
0000000000007d06         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_7550+1419
0000000000007d0f         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000007d14         xor        r12d, r12d
0000000000007d17         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007d1c         jmp        loc_7afb

                     loc_7d21:
0000000000007d21         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_7550+561
0000000000007d26         mov        rsi, r14
0000000000007d29         mov        rcx, r13
0000000000007d2c         mov        rax, rbx
0000000000007d2f         mov        rdi, rbx
0000000000007d32         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000007d38         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000007d3d         mov        r9, qword [rsp+0xe8+var_60]
0000000000007d45         cmp        rsi, r11
0000000000007d48         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000007d4e         mov        r15, qword [rsp+0xe8+var_68]
0000000000007d56         mov        r14, qword [rsp+0xe8+var_A8]
0000000000007d5b         mov        r13, qword [rsp+0xe8+var_78]
0000000000007d60         jae        loc_7d88

0000000000007d62         cmp        byte [rcx], 0x0
0000000000007d65         jne        loc_7d77

0000000000007d67         jmp        loc_7d88
0000000000007d69         align      16

                     loc_7d70:
0000000000007d70         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_7550+2099
0000000000007d75         je         loc_7d85

                     loc_7d77:
0000000000007d77         add        rax, 0x1                                    ; CODE XREF=sub_7550+2069
0000000000007d7b         lea        rdx, qword [rbp+rax]
0000000000007d80         cmp        r11, rdx
0000000000007d83         ja         loc_7d70

                     loc_7d85:
0000000000007d85         mov        rdi, rax                                    ; CODE XREF=sub_7550+2085

                     loc_7d88:
0000000000007d88         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_7550+2064, sub_7550+2071
0000000000007d8d         xor        r12d, r12d
0000000000007d90         jmp        loc_77f6

                     loc_7d95:
0000000000007d95         mov        rdi, rbx                                    ; CODE XREF=sub_7550+551
0000000000007d98         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000007d9e         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000007da3         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000007da9         mov        r15, qword [rsp+0xe8+var_68]
0000000000007db1         xor        r12d, r12d
0000000000007db4         mov        r14, qword [rsp+0xe8+var_A8]
0000000000007db9         mov        r13, qword [rsp+0xe8+var_78]
0000000000007dbe         mov        r11, qword [rsp+0xe8+var_B8]
0000000000007dc3         movzx      edx, byte [rsp+0xe8+var_DB]
0000000000007dc8         jmp        loc_77f6

                     loc_7dcd:
0000000000007dcd         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_7550+1718
0000000000007dd2         movzx      eax, byte [rdx]
0000000000007dd5         test       al, al
0000000000007dd7         je         loc_7c0c

0000000000007ddd         nop        dword [rax]

                     loc_7de0:
0000000000007de0         cmp        r13, r15                                    ; CODE XREF=sub_7550+2212
0000000000007de3         jbe        loc_7de9

0000000000007de5         mov        byte [r14+r15], al

                     loc_7de9:
0000000000007de9         add        r15, 0x1                                    ; CODE XREF=sub_7550+2195
0000000000007ded         movzx      eax, byte [rdx+r15]
0000000000007df2         test       al, al
0000000000007df4         jne        loc_7de0

0000000000007df6         jmp        loc_7c0c

                     loc_7dfb:
0000000000007dfb         mov        eax, edx                                    ; CODE XREF=sub_7550+682
0000000000007dfd         jmp        loc_7357

                     loc_7e02:
0000000000007e02         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_7550+290
0000000000007e06         cmp        bl, 0x3e
0000000000007e09         ja         loc_7680

0000000000007e0f         movabs     rax, 0x7000a38200000000
0000000000007e19         bt         rax, rbx
0000000000007e1d         jae        loc_7680

0000000000007e23         cmp        byte [rsp+arg_7], 0x0
0000000000007e28         jne        loc_8012

0000000000007e2e         cmp        r13, r15
0000000000007e31         jbe        loc_7e38

0000000000007e33         mov        byte [r14+r15], 0x3f

                     loc_7e38:
0000000000007e38         lea        rax, qword [r15+1]                          ; CODE XREF=sub_7550+2273
0000000000007e3c         cmp        r13, rax
0000000000007e3f         jbe        loc_7e47

0000000000007e41         mov        byte [r14+r15+1], 0x22

                     loc_7e47:
0000000000007e47         lea        rax, qword [r15+2]                          ; CODE XREF=sub_7550+2287
0000000000007e4b         cmp        r13, rax
0000000000007e4e         jbe        loc_7e56

0000000000007e50         mov        byte [r14+r15+2], 0x22

                     loc_7e56:
0000000000007e56         lea        rax, qword [r15+3]                          ; CODE XREF=sub_7550+2302
0000000000007e5a         cmp        r13, rax
0000000000007e5d         jbe        loc_7e65

0000000000007e5f         mov        byte [r14+r15+3], 0x3f

                     loc_7e65:
0000000000007e65         add        r15, 0x4                                    ; CODE XREF=sub_7550+2317
0000000000007e69         xor        edx, edx
0000000000007e6b         xor        r12d, r12d
0000000000007e6e         xor        eax, eax
0000000000007e70         mov        rbp, rcx
0000000000007e73         jmp        sub_7000+56
                        ; endp

                     loc_7e78:
0000000000007e78         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
0000000000007e7a         je         loc_8008

0000000000007e80         lea        rax, qword [aItercurptr0+21]                ; 0x1bcf6
0000000000007e87         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000007e8c         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007e91         xor        r12d, r12d
0000000000007e94         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007e9d         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000007ea2         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000007ea7         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000007eb0         xor        r15d, r15d
0000000000007eb3         mov        qword [rsp+0xe8+var_A0], rax
0000000000007eb8         jmp        loc_6ee3
0000000000007ebd         align      64

                     loc_7ec0:
0000000000007ec0         mov        rbp, r11                                    ; CODE XREF=sub_7550+333
0000000000007ec3         movzx      eax, byte [rsp+arg_7]
0000000000007ec8         jmp        sub_7550+1097
                        ; endp

                     loc_7ecd:
0000000000007ecd         lea        rax, qword [aS+4]                           ; 0x1b8a8, CODE XREF=sub_7550+1410
0000000000007ed4         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000007ed9         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007ede         xor        r12d, r12d
0000000000007ee1         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007eea         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000007eef         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000007ef4         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000007efd         xor        r15d, r15d
0000000000007f00         mov        qword [rsp+0xe8+var_A0], rax
0000000000007f05         jmp        loc_6ee3

                     loc_7f0a:
0000000000007f0a         mov        eax, edx                                    ; CODE XREF=sub_7550+87

                     loc_7f0c:
0000000000007f0c         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_7550+76, sub_7550+2721
0000000000007f11         test       rbx, rbx
0000000000007f14         je         loc_7f42

0000000000007f16         test       al, al
0000000000007f18         je         loc_7f42

0000000000007f1a         movzx      ecx, byte [rbx]
0000000000007f1d         mov        rax, rbx
0000000000007f20         test       cl, cl
0000000000007f22         je         loc_7f42

0000000000007f24         mov        rdx, r15
0000000000007f27         sub        rax, r15

                     loc_7f2a:
0000000000007f2a         cmp        r13, rdx                                    ; CODE XREF=sub_7550+2541
0000000000007f2d         jbe        loc_7f33

0000000000007f2f         mov        byte [r14+rdx], cl

                     loc_7f33:
0000000000007f33         add        rdx, 0x1                                    ; CODE XREF=sub_7550+2525
0000000000007f37         movzx      ecx, byte [rax+rdx]
0000000000007f3b         test       cl, cl
0000000000007f3d         jne        loc_7f2a

0000000000007f3f         mov        r15, rdx

                     loc_7f42:
0000000000007f42         cmp        r13, r15                                    ; CODE XREF=sub_7550+2500, sub_7550+2504, sub_7550+2514
0000000000007f45         jbe        loc_79e9

0000000000007f4b         mov        byte [r14+r15], 0x0
0000000000007f50         jmp        loc_79e9

                     loc_7f55:
0000000000007f55         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
0000000000007f5a         movzx      ebx, byte [rsp+0xe8+var_D9]
0000000000007f5f         mov        rbp, r11
0000000000007f62         sete       al
0000000000007f65         mov        byte [rsp+0xe8+var_DB], bl
0000000000007f69         jmp        loc_7999

                     loc_7f6e:
0000000000007f6e         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_7550+1664
0000000000007f72         mov        rdi, rcx
0000000000007f75         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000007f7a         mov        qword [rsp+0xe8+var_80], rax
0000000000007f7f         jmp        loc_7bd6

                     loc_7f84:
0000000000007f84         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_7550+1707
0000000000007f88         mov        rdi, rcx
0000000000007f8b         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000007f90         mov        qword [rsp+0xe8+var_88], rax
0000000000007f95         jmp        loc_7c01

                     loc_7f9a:
0000000000007f9a         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_73f0+16
0000000000007f9f         mov        rbp, r11
0000000000007fa2         mov        eax, edx
0000000000007fa4         mov        byte [rsp+arg_5], bl
0000000000007fa8         jmp        sub_7550+1097
                        ; endp

                     loc_7fad:
0000000000007fad         sub        rsp, 0x8                                    ; CODE XREF=sub_7550+98
0000000000007fb1         mov        r8d, 0x5
0000000000007fb7         mov        rcx, r11
0000000000007fba         push       qword [rsp+0xf0+var_88]
0000000000007fbe         push       qword [rsp+0xf8+var_80]
0000000000007fc2         mov        rdi, r14
0000000000007fc5         push       qword [rsp+0x100+var_C8]
0000000000007fc9         mov        r9d, dword [rsp+0x108+var_70]
0000000000007fd1         mov        rdx, qword [rsp+0x108+var_D8]
0000000000007fd6         mov        rsi, qword [rsp+0x108+var_98]
0000000000007fdb         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000007fe0         add        rsp, 0x20
0000000000007fe4         mov        r15, rax
0000000000007fe7         jmp        loc_79e9

                     loc_7fec:
0000000000007fec         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_7550+121
0000000000007ff1         jmp        loc_7f0c

                     loc_7ff6:
0000000000007ff6         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_7550+63
0000000000007ffe         jmp        loc_7999

                     loc_8003:
0000000000008003         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_7550+1197
                        ; endp

                     loc_8008:
0000000000008008         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_7550+2346
000000000000800d         jmp        loc_7a81

                     loc_8012:
0000000000008012         mov        rbp, r11                                    ; CODE XREF=sub_7550+2264
0000000000008015         jmp        sub_7550+1120
                        ; endp

                     loc_801a:
000000000000801a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_7550+1332
000000000000801f         xor        eax, eax
0000000000008021         xor        r12d, r12d
0000000000008024         mov        qword [rsp+0xe8+var_98], 0x0
000000000000802d         jmp        loc_75d4

                     loc_8032:
0000000000008032         mov        rdx, r13                                    ; CODE XREF=sub_7550+1264
0000000000008035         mov        r13, qword [rsp+arg_48]
000000000000803a         jmp        loc_7632

                     loc_803f:
000000000000803f         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
0000000000008044         align      16                                          ; End of unwind block (FDE at 0x1dce8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000008050         push       r15                                         ; Begin of unwind block (FDE at 0x1dd60), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000008052         push       r14
0000000000008054         movsxd     r15, edi
0000000000008057         push       r13
0000000000008059         push       r12
000000000000805b         mov        r14, rdx
000000000000805e         push       rbp
000000000000805f         push       rbx
0000000000008060         mov        rbp, rcx
0000000000008063         sub        rsp, 0x28
0000000000008067         mov        qword [rsp+0x58+var_50], rsi
000000000000806c         call       j___errno_location                          ; __errno_location
0000000000008071         mov        r13, rax
0000000000008074         mov        eax, dword [rax]
0000000000008076         test       r15d, r15d
0000000000008079         mov        rbx, qword [slotvec]                        ; slotvec
0000000000008080         mov        dword [rsp+0x58+var_40], eax                ; DATA XREF=trim2+124, trim2+458, trim2+949
0000000000008084         js         loc_81f1

000000000000808a         cmp        dword [nslots], r15d                        ; nslots
0000000000008091         jg         loc_80f5

0000000000008093         cmp        r15d, 0x7fffffff
000000000000809a         je         loc_81f6

00000000000080a0         lea        r12d, dword [r15+1]
00000000000080a4         lea        rax, qword [slotvec0]                       ; slotvec0
00000000000080ab         movsxd     rsi, r12d
00000000000080ae         shl        rsi, 0x4
00000000000080b2         cmp        rbx, rax
00000000000080b5         je         loc_81d0

00000000000080bb         mov        rdi, rbx                                    ; argument #1 for method xrealloc
00000000000080be         call       xrealloc                                    ; xrealloc
00000000000080c3         mov        rbx, rax
00000000000080c6         mov        qword [slotvec], rax                        ; slotvec

                     loc_80cd:
00000000000080cd         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
00000000000080d4         mov        edx, r12d
00000000000080d7         xor        esi, esi                                    ; argument "__c" for method j_memset
00000000000080d9         sub        edx, edi
00000000000080db         shl        rdi, 0x4
00000000000080df         movsxd     rdx, edx
00000000000080e2         add        rdi, rbx                                    ; argument "__s" for method j_memset
00000000000080e5         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
00000000000080e9         call       j_memset                                    ; memset
00000000000080ee         mov        dword [nslots], r12d                        ; nslots

                     loc_80f5:
00000000000080f5         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
00000000000080f8         shl        r15, 0x4
00000000000080fc         sub        rsp, 0x8
0000000000008100         add        rbx, r15
0000000000008103         lea        r15, qword [rbp+8]
0000000000008107         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
000000000000810b         mov        r11, qword [rbx]
000000000000810e         mov        r12, qword [rbx+8]
0000000000008112         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000008115         or         eax, 0x1
0000000000008118         mov        dword [rsp+0x60+var_3C], eax
000000000000811c         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000811f         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
0000000000008122         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000008125         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000008127         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
000000000000812a         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
000000000000812f         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
0000000000008132         mov        qword [rsp+0x78+var_48], r11
0000000000008137         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000813c         add        rsp, 0x20
0000000000008140         mov        r11, qword [rsp+0x58+var_48]
0000000000008145         cmp        r11, rax
0000000000008148         ja         loc_81b1

000000000000814a         lea        rsi, qword [rax+1]
000000000000814e         lea        rax, qword [slot0]                          ; slot0
0000000000008155         cmp        r12, rax
0000000000008158         mov        qword [rbx], rsi
000000000000815b         je         loc_816f

000000000000815d         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000008160         mov        qword [rsp+0x58+var_48], rsi
0000000000008165         call       j_free                                      ; free
000000000000816a         mov        rsi, qword [rsp+0x58+var_48]

                     loc_816f:
000000000000816f         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
0000000000008172         mov        qword [rsp+0x58+var_48], rsi
0000000000008177         call       xmalloc                                     ; xmalloc
000000000000817c         sub        rsp, 0x8
0000000000008180         mov        qword [rbx+8], rax
0000000000008184         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000008188         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000818b         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
000000000000818e         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000008191         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000008193         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
0000000000008198         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
000000000000819b         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
00000000000081a0         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
00000000000081a5         mov        r12, rax
00000000000081a8         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000081ad         add        rsp, 0x20

                     loc_81b1:
00000000000081b1         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
00000000000081b5         mov        dword [r13], eax
00000000000081b9         add        rsp, 0x28
00000000000081bd         mov        rax, r12
00000000000081c0         pop        rbx
00000000000081c1         pop        rbp
00000000000081c2         pop        r12
00000000000081c4         pop        r13
00000000000081c6         pop        r14
00000000000081c8         pop        r15
00000000000081ca         ret
                        ; endp
00000000000081cb         align      16

                     loc_81d0:
00000000000081d0         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
00000000000081d2         call       xrealloc                                    ; xrealloc
00000000000081d7         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
00000000000081df         mov        rbx, rax
00000000000081e2         mov        qword [slotvec], rax                        ; slotvec
00000000000081e9         movups     xmmword [rax], xmm0
00000000000081ec         jmp        loc_80cd

                     loc_81f1:
00000000000081f1         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_81f6:
00000000000081f6         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_81fb:
00000000000081fb         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x1dd60)
                     clone_quoting_options:
0000000000008200         push       r12                                         ; Begin of unwind block (FDE at 0x1ddcc)
0000000000008202         push       rbp
0000000000008203         push       rbx
0000000000008204         mov        rbx, rdi
0000000000008207         call       j___errno_location                          ; __errno_location
000000000000820c         mov        r12d, dword [rax]
000000000000820f         mov        rbp, rax
0000000000008212         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000008219         test       rbx, rbx
000000000000821c         mov        esi, 0x38                                   ; argument #2 for method xmemdup
0000000000008221         cmove      rbx, rax
0000000000008225         mov        rdi, rbx                                    ; argument #1 for method xmemdup
0000000000008228         call       xmemdup                                     ; xmemdup
000000000000822d         mov        dword [rbp], r12d
0000000000008231         pop        rbx
0000000000008232         pop        rbp
0000000000008233         pop        r12
0000000000008235         ret
                        ; endp
0000000000008236         align      64                                          ; End of unwind block (FDE at 0x1ddcc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
0000000000008240         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x1ddf8), default_quoting_options
0000000000008247         test       rdi, rdi
000000000000824a         cmove      rdi, rax
000000000000824e         mov        eax, dword [rdi]
0000000000008250         ret
                        ; endp
0000000000008251         align      32                                          ; End of unwind block (FDE at 0x1ddf8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
0000000000008260         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x1de0c), default_quoting_options
0000000000008267         test       rdi, rdi
000000000000826a         cmove      rdi, rax
000000000000826e         mov        dword [rdi], esi
0000000000008270         ret
                        ; endp
0000000000008271         align      128                                         ; End of unwind block (FDE at 0x1de0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
0000000000008280         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x1de20), default_quoting_options
0000000000008287         test       rdi, rdi
000000000000828a         mov        ecx, esi
000000000000828c         cmove      rdi, rax
0000000000008290         mov        eax, esi
0000000000008292         and        ecx, 0x1f
0000000000008295         shr        al, 0x5
0000000000008298         movzx      eax, al
000000000000829b         lea        rdi, qword [rdi+rax*4+8]
00000000000082a0         mov        esi, dword [rdi]
00000000000082a2         mov        eax, esi
00000000000082a4         shr        eax, cl
00000000000082a6         xor        edx, eax
00000000000082a8         and        eax, 0x1
00000000000082ab         and        edx, 0x1
00000000000082ae         shl        edx, cl
00000000000082b0         xor        edx, esi
00000000000082b2         mov        dword [rdi], edx
00000000000082b4         ret
                        ; endp
00000000000082b5         align      64                                          ; End of unwind block (FDE at 0x1de20)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
00000000000082c0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x1de34), default_quoting_options
00000000000082c7         test       rdi, rdi
00000000000082ca         cmove      rdi, rax
00000000000082ce         mov        eax, dword [rdi+4]
00000000000082d1         mov        dword [rdi+4], esi
00000000000082d4         ret
                        ; endp
00000000000082d5         align      32                                          ; End of unwind block (FDE at 0x1de34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
00000000000082e0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x1de48), default_quoting_options
00000000000082e7         test       rdi, rdi
00000000000082ea         cmove      rdi, rax
00000000000082ee         test       rsi, rsi
00000000000082f1         mov        dword [rdi], 0xa
00000000000082f7         je         loc_8307

00000000000082f9         test       rdx, rdx
00000000000082fc         je         loc_8307

00000000000082fe         mov        qword [rdi+0x28], rsi
0000000000008302         mov        qword [rdi+0x30], rdx
0000000000008306         ret
                        ; endp

                     loc_8307:
0000000000008307         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
000000000000830b         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
0000000000008310         push       r15                                         ; End of unwind block (FDE at 0x1de48), Begin of unwind block (FDE at 0x1de5c)
0000000000008312         push       r14
0000000000008314         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000831b         push       r13
000000000000831d         push       r12
000000000000831f         mov        r13, rdi
0000000000008322         push       rbp
0000000000008323         push       rbx
0000000000008324         mov        rbx, r8
0000000000008327         mov        r14, rsi
000000000000832a         mov        r15, rdx
000000000000832d         sub        rsp, 0x18
0000000000008331         test       r8, r8
0000000000008334         cmove      rbx, rax
0000000000008338         mov        qword [rsp+0x48+var_40], rcx
000000000000833d         call       j___errno_location                          ; __errno_location
0000000000008342         mov        r12d, dword [rax]
0000000000008345         mov        rbp, rax
0000000000008348         lea        rax, qword [rbx+8]
000000000000834c         sub        rsp, 0x8
0000000000008350         mov        r9d, dword [rbx+4]
0000000000008354         push       qword [rbx+0x30]
0000000000008357         mov        r8d, dword [rbx]
000000000000835a         push       qword [rbx+0x28]
000000000000835d         mov        rdx, r15
0000000000008360         push       rax
0000000000008361         mov        rcx, qword [rsp+0x68+var_40]
0000000000008366         mov        rsi, r14
0000000000008369         mov        rdi, r13
000000000000836c         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008371         mov        dword [rbp], r12d
0000000000008375         add        rsp, 0x38
0000000000008379         pop        rbx
000000000000837a         pop        rbp
000000000000837b         pop        r12
000000000000837d         pop        r13
000000000000837f         pop        r14
0000000000008381         pop        r15
0000000000008383         ret
                        ; endp
0000000000008384         align      16                                          ; End of unwind block (FDE at 0x1de5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
0000000000008390         push       r15                                         ; Begin of unwind block (FDE at 0x1deb0), CODE XREF=quotearg_alloc+5
0000000000008392         push       r14
0000000000008394         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000839b         push       r13
000000000000839d         push       r12
000000000000839f         mov        r12, rdx
00000000000083a2         push       rbp
00000000000083a3         push       rbx
00000000000083a4         mov        rbx, rcx
00000000000083a7         mov        r14, rdi
00000000000083aa         mov        r15, rsi
00000000000083ad         sub        rsp, 0x38
00000000000083b1         test       rcx, rcx
00000000000083b4         cmove      rbx, rax
00000000000083b8         xor        ebp, ebp
00000000000083ba         call       j___errno_location                          ; __errno_location
00000000000083bf         test       r12, r12
00000000000083c2         mov        r13, rax
00000000000083c5         mov        eax, dword [rax]
00000000000083c7         sete       bpl
00000000000083cb         or         ebp, dword [rbx+4]
00000000000083ce         lea        r10, qword [rbx+8]
00000000000083d2         sub        rsp, 0x8
00000000000083d6         mov        r8d, dword [rbx]
00000000000083d9         mov        rcx, r15
00000000000083dc         mov        dword [rsp+0x70+var_5C], eax
00000000000083e0         push       qword [rbx+0x30]
00000000000083e3         mov        rdx, r14
00000000000083e6         push       qword [rbx+0x28]
00000000000083e9         push       r10
00000000000083eb         xor        esi, esi
00000000000083ed         mov        r9d, ebp
00000000000083f0         xor        edi, edi
00000000000083f2         mov        qword [rsp+0x88+var_48], r10
00000000000083f7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000083fc         lea        rsi, qword [rax+1]
0000000000008400         mov        qword [rsp+0x88+var_40], rax                ; DATA XREF=peek_token+600, peek_token+969
0000000000008405         add        rsp, 0x20
0000000000008409         mov        rdi, rsi
000000000000840c         mov        qword [rsp+0x68+var_50], rsi
0000000000008411         call       xmalloc                                     ; xmalloc
0000000000008416         mov        qword [rsp+0x68+var_58], rax
000000000000841b         sub        rsp, 0x8
000000000000841f         push       qword [rbx+0x30]
0000000000008422         push       qword [rbx+0x28]
0000000000008425         mov        r10, qword [rsp+0x80+var_48]
000000000000842a         mov        r9d, ebp
000000000000842d         mov        r8d, dword [rbx]
0000000000008430         mov        rcx, r15
0000000000008433         mov        rdx, r14
0000000000008436         mov        rdi, rax
0000000000008439         push       r10
000000000000843b         mov        rsi, qword [rsp+0x88+var_50]
0000000000008440         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008445         mov        eax, dword [rsp+0x88+var_5C]
0000000000008449         add        rsp, 0x20
000000000000844d         test       r12, r12
0000000000008450         mov        dword [r13], eax
0000000000008454         je         loc_845f

0000000000008456         mov        r11, qword [rsp+0x68+var_40]
000000000000845b         mov        qword [r12], r11

                     loc_845f:
000000000000845f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000008464         add        rsp, 0x38
0000000000008468         pop        rbx
0000000000008469         pop        rbp
000000000000846a         pop        r12
000000000000846c         pop        r13
000000000000846e         pop        r14
0000000000008470         pop        r15
0000000000008472         ret
                        ; endp
0000000000008473         align      128                                         ; End of unwind block (FDE at 0x1deb0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
0000000000008480         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x1df1c)
0000000000008483         xor        edx, edx
0000000000008485         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
000000000000848a         align      16                                          ; End of unwind block (FDE at 0x1df1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
0000000000008490         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0x1df30), nslots
0000000000008496         push       r12
0000000000008498         mov        r12, qword [slotvec]                        ; slotvec
000000000000849f         push       rbp
00000000000084a0         push       rbx
00000000000084a1         cmp        eax, 0x1
00000000000084a4         jle        loc_84d1

00000000000084a6         sub        eax, 0x2
00000000000084a9         lea        rbx, qword [r12+0x18]
00000000000084ae         shl        rax, 0x4
00000000000084b2         lea        rbp, qword [r12+rax+0x28]
00000000000084b7         nop        word [rax+rax]

                     loc_84c0:
00000000000084c0         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
00000000000084c3         add        rbx, 0x10
00000000000084c7         call       j_free                                      ; free
00000000000084cc         cmp        rbx, rbp
00000000000084cf         jne        loc_84c0

                     loc_84d1:
00000000000084d1         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
00000000000084d6         lea        rbx, qword [slot0]                          ; slot0
00000000000084dd         cmp        rdi, rbx
00000000000084e0         je         loc_84f9

00000000000084e2         call       j_free                                      ; free
00000000000084e7         mov        qword [slotvec0], 0x100                     ; slotvec0
00000000000084f2         mov        qword [slotvec0+8], rbx                     ; 0x2210b8

                     loc_84f9:
00000000000084f9         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
0000000000008500         cmp        r12, rbx
0000000000008503         je         loc_8514

0000000000008505         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000008508         call       j_free                                      ; free
000000000000850d         mov        qword [slotvec], rbx                        ; slotvec

                     loc_8514:
0000000000008514         pop        rbx                                         ; CODE XREF=quotearg_free+115
0000000000008515         mov        dword [nslots], 0x1                         ; nslots
000000000000851f         pop        rbp
0000000000008520         pop        r12
0000000000008522         ret
                        ; endp
0000000000008523         align      16                                          ; End of unwind block (FDE at 0x1df30)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
0000000000008530         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x1df5c), default_quoting_options
0000000000008537         mov        rdx, 0xffffffffffffffff
000000000000853e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000008543         align      16                                          ; End of unwind block (FDE at 0x1df5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000008550         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x1df70), default_quoting_options
0000000000008557         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000855c         align      32                                          ; End of unwind block (FDE at 0x1df70)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
0000000000008560         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x1df84), default_quoting_options
0000000000008567         mov        rsi, rdi
000000000000856a         mov        rdx, 0xffffffffffffffff
0000000000008571         xor        edi, edi
0000000000008573         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000008578         align      128                                         ; End of unwind block (FDE at 0x1df84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
0000000000008580         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x1df98), default_quoting_options
0000000000008587         mov        rdx, rsi
000000000000858a         mov        rsi, rdi
000000000000858d         xor        edi, edi
000000000000858f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000008594         align      32                                          ; End of unwind block (FDE at 0x1df98)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
00000000000085a0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x1dfac), CODE XREF=argmatch_invalid+64
00000000000085a4         mov        rax, rdx
00000000000085a7         mov        rdx, qword [fs:0x28]
00000000000085b0         mov        qword [rsp+0x48+var_10], rdx
00000000000085b5         xor        edx, edx
00000000000085b7         cmp        esi, 0xa
00000000000085ba         je         loc_8624

00000000000085bc         mov        dword [rsp+0x48+var_48], esi
00000000000085bf         mov        rcx, rsp
00000000000085c2         mov        rdx, 0xffffffffffffffff
00000000000085c9         mov        rsi, rax
00000000000085cc         mov        qword [rsp+0x48+var_44], 0x0
00000000000085d5         mov        qword [rsp+0x48+var_3C], 0x0
00000000000085de         mov        qword [rsp+0x48+var_34], 0x0
00000000000085e7         mov        qword [rsp+0x48+var_2C], 0x0
00000000000085f0         mov        qword [rsp+0x48+var_24], 0x0
00000000000085f9         mov        qword [rsp+0x48+var_1C], 0x0
0000000000008602         mov        dword [rsp+0x48+var_14], 0x0
000000000000860a         call       quotearg_n_options                          ; quotearg_n_options
000000000000860f         mov        rcx, qword [rsp+0x48+var_10]
0000000000008614         xor        rcx, qword [fs:0x28]
000000000000861d         jne        loc_8629

000000000000861f         add        rsp, 0x48
0000000000008623         ret
                        ; endp

                     loc_8624:
0000000000008624         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_8629:
0000000000008629         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
000000000000862e         align      16                                          ; End of unwind block (FDE at 0x1dfac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
0000000000008630         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x1dfc8), CODE XREF=quotearg_style_mem+10
0000000000008634         mov        rax, rdx
0000000000008637         mov        rdx, rcx
000000000000863a         mov        rcx, qword [fs:0x28]
0000000000008643         mov        qword [rsp+0x48+var_10], rcx
0000000000008648         xor        ecx, ecx
000000000000864a         cmp        esi, 0xa
000000000000864d         je         loc_86b0

000000000000864f         mov        dword [rsp+0x48+var_48], esi
0000000000008652         mov        rcx, rsp
0000000000008655         mov        rsi, rax
0000000000008658         mov        qword [rsp+0x48+var_44], 0x0
0000000000008661         mov        qword [rsp+0x48+var_3C], 0x0
000000000000866a         mov        qword [rsp+0x48+var_34], 0x0
0000000000008673         mov        qword [rsp+0x48+var_2C], 0x0
000000000000867c         mov        qword [rsp+0x48+var_24], 0x0
0000000000008685         mov        qword [rsp+0x48+var_1C], 0x0
000000000000868e         mov        dword [rsp+0x48+var_14], 0x0
0000000000008696         call       quotearg_n_options                          ; quotearg_n_options
000000000000869b         mov        rdx, qword [rsp+0x48+var_10]
00000000000086a0         xor        rdx, qword [fs:0x28]
00000000000086a9         jne        loc_86b5

00000000000086ab         add        rsp, 0x48
00000000000086af         ret
                        ; endp

                     loc_86b0:
00000000000086b0         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_86b5:
00000000000086b5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
00000000000086ba         align      64                                          ; End of unwind block (FDE at 0x1dfc8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
00000000000086c0         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0x1dfe4)
00000000000086c3         mov        esi, edi
00000000000086c5         xor        edi, edi
00000000000086c7         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
00000000000086cc         align      16                                          ; End of unwind block (FDE at 0x1dfe4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
00000000000086d0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x1dff8)
00000000000086d3         mov        rdx, rsi
00000000000086d6         mov        esi, edi
00000000000086d8         xor        edi, edi
00000000000086da         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
00000000000086df         align      32                                          ; End of unwind block (FDE at 0x1dff8)

                     quotearg_char_mem:
00000000000086e0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x1e00c), CODE XREF=quotearg_char+11
00000000000086e4         mov        ecx, edx
00000000000086e6         mov        rax, qword [fs:0x28]
00000000000086ef         mov        qword [rsp+0x48+var_10], rax
00000000000086f4         xor        eax, eax
00000000000086f6         mov        rax, qword [qword_2219f0]                   ; qword_2219f0
00000000000086fd         mov        r8, rsp
0000000000008700         and        ecx, 0x1f
0000000000008703         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
000000000000870b         mov        qword [rsp+0x48+var_18], rax
0000000000008710         mov        eax, edx
0000000000008712         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000008716         shr        al, 0x5
0000000000008719         movzx      eax, al
000000000000871c         lea        r9, qword [r8+rax*4+8]
0000000000008721         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x2219d0
0000000000008729         movaps     xmmword [rsp+0x48+var_38], xmm0
000000000000872e         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x2219e0
0000000000008736         movaps     xmmword [rsp+0x48+var_28], xmm0
000000000000873b         mov        edx, dword [r9]
000000000000873e         mov        eax, edx
0000000000008740         shr        eax, cl
0000000000008742         not        eax
0000000000008744         and        eax, 0x1
0000000000008747         shl        eax, cl
0000000000008749         mov        rcx, r8
000000000000874c         xor        eax, edx
000000000000874e         mov        rdx, rsi
0000000000008751         mov        rsi, rdi
0000000000008754         mov        dword [r9], eax
0000000000008757         xor        edi, edi
0000000000008759         call       quotearg_n_options                          ; quotearg_n_options
000000000000875e         mov        rsi, qword [rsp+0x48+var_10]
0000000000008763         xor        rsi, qword [fs:0x28]
000000000000876c         jne        loc_8773

000000000000876e         add        rsp, 0x48
0000000000008772         ret
                        ; endp

                     loc_8773:
0000000000008773         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
0000000000008778         align      128                                         ; End of unwind block (FDE at 0x1e00c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
0000000000008780         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0x1e028)
0000000000008784         mov        rsi, 0xffffffffffffffff
000000000000878b         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
0000000000008790         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0x1e028), Begin of unwind block (FDE at 0x1e03c), CODE XREF=close_stdout+101
0000000000008795         mov        rsi, 0xffffffffffffffff
000000000000879c         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
00000000000087a1         align      16                                          ; End of unwind block (FDE at 0x1e03c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
00000000000087b0         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0x1e050)
00000000000087b5         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
00000000000087ba         align      64                                          ; End of unwind block (FDE at 0x1e050)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
00000000000087c0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x1e064), CODE XREF=sub_31ea+5094, swallow_file_in_memory+160
00000000000087c4         mov        rax, rdx
00000000000087c7         mov        rdx, qword [fs:0x28]
00000000000087d0         mov        qword [rsp+0x48+var_10], rdx
00000000000087d5         xor        edx, edx
00000000000087d7         cmp        esi, 0xa
00000000000087da         je         loc_8844

00000000000087dc         mov        dword [rsp+0x48+var_48], esi
00000000000087df         mov        rcx, rsp
00000000000087e2         mov        rdx, 0xffffffffffffffff
00000000000087e9         mov        rsi, rax
00000000000087ec         mov        qword [rsp+0x48+var_44], 0x0
00000000000087f5         mov        qword [rsp+0x48+var_3C], 0x4000000
00000000000087fe         mov        qword [rsp+0x48+var_34], 0x0
0000000000008807         mov        qword [rsp+0x48+var_2C], 0x0
0000000000008810         mov        qword [rsp+0x48+var_24], 0x0
0000000000008819         mov        qword [rsp+0x48+var_1C], 0x0
0000000000008822         mov        dword [rsp+0x48+var_14], 0x0
000000000000882a         call       quotearg_n_options                          ; quotearg_n_options
000000000000882f         mov        rcx, qword [rsp+0x48+var_10]
0000000000008834         xor        rcx, qword [fs:0x28]
000000000000883d         jne        loc_8849

000000000000883f         add        rsp, 0x48
0000000000008843         ret
                        ; endp

                     loc_8844:
0000000000008844         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_8849:
0000000000008849         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
000000000000884e         align      16                                          ; End of unwind block (FDE at 0x1e064)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom_mem:
0000000000008850         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x1e080), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000008854         mov        r9, rcx
0000000000008857         mov        rcx, qword [qword_2219f0]                   ; qword_2219f0
000000000000885e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000008866         mov        rax, qword [fs:0x28]
000000000000886f         mov        qword [rsp+0x48+var_10], rax
0000000000008874         xor        eax, eax
0000000000008876         movaps     xmmword [rsp+0x48+var_48], xmm0
000000000000887a         test       rsi, rsi
000000000000887d         mov        qword [rsp+0x48+var_18], rcx
0000000000008882         mov        dword [rsp+0x48+var_48], 0xa
0000000000008889         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x2219d0
0000000000008891         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000008896         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x2219e0
000000000000889e         movaps     xmmword [rsp+0x48+var_28], xmm0
00000000000088a3         je         loc_88d7

00000000000088a5         test       rdx, rdx
00000000000088a8         je         loc_88d7

00000000000088aa         mov        qword [rsp+0x48+var_20], rsi
00000000000088af         mov        qword [rsp+0x48+var_18], rdx
00000000000088b4         mov        rcx, rsp
00000000000088b7         mov        rdx, r8
00000000000088ba         mov        rsi, r9
00000000000088bd         call       quotearg_n_options                          ; quotearg_n_options
00000000000088c2         mov        rdi, qword [rsp+0x48+var_10]
00000000000088c7         xor        rdi, qword [fs:0x28]
00000000000088d0         jne        loc_88dc

00000000000088d2         add        rsp, 0x48
00000000000088d6         ret
                        ; endp

                     loc_88d7:
00000000000088d7         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_88dc:
00000000000088dc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
00000000000088e1         align      16                                          ; End of unwind block (FDE at 0x1e080)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_custom:
00000000000088f0         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0x1e09c)
00000000000088f7         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
00000000000088fc         align      256                                         ; End of unwind block (FDE at 0x1e09c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000008900         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x1e0b0)
0000000000008903         mov        r8, 0xffffffffffffffff
000000000000890a         mov        rdx, rsi
000000000000890d         mov        rsi, rdi
0000000000008910         xor        edi, edi
0000000000008912         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000008917         align      32                                          ; End of unwind block (FDE at 0x1e0b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
0000000000008920         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0x1e0c4)
0000000000008923         mov        rcx, rdx
0000000000008926         mov        rdx, rsi
0000000000008929         mov        rsi, rdi
000000000000892c         xor        edi, edi
000000000000892e         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000008933         align      64                                          ; End of unwind block (FDE at 0x1e0c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000008940         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x1e0d8), quote_quoting_options
0000000000008947         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000894c         align      16                                          ; End of unwind block (FDE at 0x1e0d8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000008950         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x1e0ec), quote_quoting_options
0000000000008957         mov        rdx, rsi
000000000000895a         mov        rsi, rdi
000000000000895d         xor        edi, edi
000000000000895f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000008964         align      16                                          ; End of unwind block (FDE at 0x1e0ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
0000000000008970         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x1e100), quote_quoting_options, CODE XREF=argmatch_invalid+46
0000000000008977         mov        rdx, 0xffffffffffffffff
000000000000897e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000008983         align      16                                          ; End of unwind block (FDE at 0x1e100)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
0000000000008990         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x1e114), quote_quoting_options, CODE XREF=sub_31ea+4818, sub_31ea+5028, sub_31ea+5155, sub_31ea+5209, compile_regex+107, argmatch_valid+90, argmatch_valid+169
0000000000008997         mov        rsi, rdi
000000000000899a         mov        rdx, 0xffffffffffffffff
00000000000089a1         xor        edi, edi
00000000000089a3         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000089a8         align      16                                          ; End of unwind block (FDE at 0x1e114)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_A8: int64_t, -168
        ;    var_C0: int32_t, -192
        ;    var_D8: int8_t, -216
        ;    var_E0: int64_t, -224


                     fread_file:
00000000000089b0         push       r15                                         ; Begin of unwind block (FDE at 0x1e12c), CODE XREF=swallow_file_in_memory+48, internal_read_file+35
00000000000089b2         push       r14
00000000000089b4         push       r13
00000000000089b6         push       r12
00000000000089b8         mov        r13, rdi
00000000000089bb         push       rbp
00000000000089bc         push       rbx
00000000000089bd         sub        rsp, 0xb8
00000000000089c4         mov        qword [rsp+0xe8+var_E0], rsi
00000000000089c9         mov        rax, qword [fs:0x28]
00000000000089d2         mov        qword [rsp+0xe8+var_40], rax
00000000000089da         xor        eax, eax
00000000000089dc         call       j_fileno                                    ; fileno
00000000000089e1         lea        rdx, qword [rsp+0xe8+var_D8]                ; argument "__stat_buf" for method j___fxstat
00000000000089e6         mov        esi, eax                                    ; argument "__fildes" for method j___fxstat
00000000000089e8         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
00000000000089ed         call       j___fxstat                                  ; __fxstat
00000000000089f2         test       eax, eax
00000000000089f4         js         loc_8a0a

00000000000089f6         mov        eax, dword [rsp+0xe8+var_C0]
00000000000089fa         and        eax, 0xf000
00000000000089ff         cmp        eax, 0x8000
0000000000008a04         je         loc_8b58

                     loc_8a0a:
0000000000008a0a         mov        ebx, j_error                                ; CODE XREF=fread_file+68, fread_file+435, fread_file+449

                     loc_8a0f:
0000000000008a0f         mov        rdi, rbx                                    ; argument "__size" for method j_malloc, CODE XREF=fread_file+462
0000000000008a12         call       j_malloc                                    ; malloc
0000000000008a17         test       rax, rax
0000000000008a1a         mov        r12, rax
0000000000008a1d         je         loc_8ac0

0000000000008a23         xor        ebp, ebp
0000000000008a25         mov        r15, 0xffffffffffffffff
0000000000008a2c         jmp        loc_8a6a
0000000000008a2e         align      16

                     loc_8a30:
0000000000008a30         cmp        rbx, 0xffffffffffffffff                     ; CODE XREF=fread_file+218
0000000000008a34         je         loc_8b10

0000000000008a3a         mov        rax, rbx
0000000000008a3d         mov        rdi, r12                                    ; argument "__ptr" for method j_realloc
0000000000008a40         shr        rax, 0x1
0000000000008a43         mov        rdx, rax
0000000000008a46         add        rax, rbx
0000000000008a49         not        rdx
0000000000008a4c         cmp        rdx, rbx
0000000000008a4f         cmovbe     rax, r15
0000000000008a53         mov        rsi, rax                                    ; argument "__size" for method j_realloc
0000000000008a56         mov        rbx, rax
0000000000008a59         call       j_realloc                                   ; realloc
0000000000008a5e         test       rax, rax
0000000000008a61         je         loc_8af0

0000000000008a67         mov        r12, rax

                     loc_8a6a:
0000000000008a6a         mov        r14, rbx                                    ; CODE XREF=fread_file+124
0000000000008a6d         lea        rdi, qword [r12+rbp]                        ; argument "__ptr" for method j_fread
0000000000008a71         mov        rcx, r13                                    ; argument "__stream" for method j_fread
0000000000008a74         sub        r14, rbp
0000000000008a77         mov        esi, 0x1                                    ; argument "__size" for method j_fread
0000000000008a7c         mov        rdx, r14                                    ; argument "__n" for method j_fread
0000000000008a7f         call       j_fread                                     ; fread
0000000000008a84         add        rbp, rax
0000000000008a87         cmp        r14, rax
0000000000008a8a         je         loc_8a30

0000000000008a8c         call       j___errno_location                          ; __errno_location
0000000000008a91         mov        rdi, r13                                    ; argument "__stream" for method j_ferror
0000000000008a94         mov        r14, rax
0000000000008a97         mov        r15d, dword [rax]
0000000000008a9a         call       j_ferror                                    ; ferror
0000000000008a9f         test       eax, eax
0000000000008aa1         jne        loc_8afb

0000000000008aa3         sub        rbx, 0x1
0000000000008aa7         cmp        rbx, rbp
0000000000008aaa         ja         loc_8b30

0000000000008ab0         mov        rax, qword [rsp+0xe8+var_E0]
0000000000008ab5         mov        byte [r12+rbp], 0x0
0000000000008aba         mov        qword [rax], rbp
0000000000008abd         nop        dword [rax]

                     loc_8ac0:
0000000000008ac0         mov        rcx, qword [rsp+0xe8+var_40]                ; CODE XREF=fread_file+109, fread_file+345, fread_file+380, fread_file+416
0000000000008ac8         xor        rcx, qword [fs:0x28]
0000000000008ad1         mov        rax, r12
0000000000008ad4         jne        loc_8b83

0000000000008ada         add        rsp, 0xb8
0000000000008ae1         pop        rbx
0000000000008ae2         pop        rbp
0000000000008ae3         pop        r12
0000000000008ae5         pop        r13
0000000000008ae7         pop        r14
0000000000008ae9         pop        r15
0000000000008aeb         ret
                        ; endp
0000000000008aec         align      16

                     loc_8af0:
0000000000008af0         call       j___errno_location                          ; __errno_location, CODE XREF=fread_file+177
0000000000008af5         mov        r15d, dword [rax]
0000000000008af8         mov        r14, rax

                     loc_8afb:
0000000000008afb         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=fread_file+241
0000000000008afe         xor        r12d, r12d
0000000000008b01         call       j_free                                      ; free
0000000000008b06         mov        dword [r14], r15d
0000000000008b09         jmp        loc_8ac0
0000000000008b0b         align      16

                     loc_8b10:
0000000000008b10         call       j___errno_location                          ; __errno_location, CODE XREF=fread_file+132
0000000000008b15         mov        r15d, 0xc
0000000000008b1b         mov        r14, rax
0000000000008b1e         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000008b21         call       j_free                                      ; free
0000000000008b26         xor        r12d, r12d
0000000000008b29         mov        dword [r14], r15d
0000000000008b2c         jmp        loc_8ac0
0000000000008b2e         align      16

                     loc_8b30:
0000000000008b30         lea        rsi, qword [rbp+1]                          ; argument "__size" for method j_realloc, CODE XREF=fread_file+250
0000000000008b34         mov        rdi, r12                                    ; argument "__ptr" for method j_realloc
0000000000008b37         call       j_realloc                                   ; realloc
0000000000008b3c         test       rax, rax
0000000000008b3f         cmovne     r12, rax
0000000000008b43         mov        rax, qword [rsp+0xe8+var_E0]
0000000000008b48         mov        byte [r12+rbp], 0x0
0000000000008b4d         mov        qword [rax], rbp
0000000000008b50         jmp        loc_8ac0
0000000000008b55         align      8

                     loc_8b58:
0000000000008b58         mov        rdi, r13                                    ; argument "__stream" for method j_ftello, CODE XREF=fread_file+84
0000000000008b5b         call       j_ftello                                    ; ftello
0000000000008b60         test       rax, rax
0000000000008b63         js         loc_8a0a

0000000000008b69         mov        rbx, qword [rsp+0xe8+var_A8]
0000000000008b6e         cmp        rbx, rax
0000000000008b71         jle        loc_8a0a

0000000000008b77         sub        rbx, rax
0000000000008b7a         add        rbx, 0x1
0000000000008b7e         jmp        loc_8a0f

                     loc_8b83:
0000000000008b83         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=fread_file+292
                        ; endp
0000000000008b88         align      16                                          ; End of unwind block (FDE at 0x1e12c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     internal_read_file:
0000000000008b90         push       r13                                         ; Begin of unwind block (FDE at 0x1e17c), CODE XREF=read_file+7, read_binary_file+7
0000000000008b92         push       r12
0000000000008b94         push       rbp
0000000000008b95         push       rbx
0000000000008b96         mov        rbp, rsi
0000000000008b99         mov        rsi, rdx                                    ; argument "__modes" for method j_fopen
0000000000008b9c         sub        rsp, 0x8
0000000000008ba0         call       j_fopen                                     ; fopen
0000000000008ba5         test       rax, rax
0000000000008ba8         je         loc_8c00

0000000000008baa         mov        rsi, rbp
0000000000008bad         mov        rdi, rax
0000000000008bb0         mov        rbx, rax
0000000000008bb3         call       fread_file                                  ; fread_file
0000000000008bb8         mov        rbp, rax
0000000000008bbb         call       j___errno_location                          ; __errno_location
0000000000008bc0         mov        rdi, rbx
0000000000008bc3         mov        r12, rax
0000000000008bc6         mov        r13d, dword [rax]
0000000000008bc9         call       rpl_fclose                                  ; rpl_fclose
0000000000008bce         test       eax, eax
0000000000008bd0         jne        loc_8be0

                     loc_8bd2:
0000000000008bd2         add        rsp, 0x8                                    ; CODE XREF=internal_read_file+103, internal_read_file+114
0000000000008bd6         mov        rax, rbp
0000000000008bd9         pop        rbx
0000000000008bda         pop        rbp
0000000000008bdb         pop        r12
0000000000008bdd         pop        r13
0000000000008bdf         ret
                        ; endp

                     loc_8be0:
0000000000008be0         test       rbp, rbp                                    ; CODE XREF=internal_read_file+64
0000000000008be3         je         loc_8bf1

0000000000008be5         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000008be8         mov        r13d, dword [r12]
0000000000008bec         call       j_free                                      ; free

                     loc_8bf1:
0000000000008bf1         mov        dword [r12], r13d                           ; CODE XREF=internal_read_file+83
0000000000008bf5         xor        ebp, ebp
0000000000008bf7         jmp        loc_8bd2
0000000000008bf9         align      1024

                     loc_8c00:
0000000000008c00         xor        ebp, ebp                                    ; CODE XREF=internal_read_file+24
0000000000008c02         jmp        loc_8bd2
0000000000008c04         align      16                                          ; End of unwind block (FDE at 0x1e17c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     read_file:
0000000000008c10         lea        rdx, qword [aUpper+4]                       ; Begin of unwind block (FDE at 0x1e1b8), 0x1c74b, CODE XREF=swallow_file_in_memory+136
0000000000008c17         jmp        internal_read_file                          ; internal_read_file
                        ; endp
0000000000008c1c         align      32                                          ; End of unwind block (FDE at 0x1e1b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     read_binary_file:
0000000000008c20         lea        rdx, qword [quoting_style_vals+40]          ; Begin of unwind block (FDE at 0x1e1cc), 0x1c1e8
0000000000008c27         jmp        internal_read_file                          ; internal_read_file
                        ; endp
0000000000008c2c         align      16                                          ; End of unwind block (FDE at 0x1e1cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     strnlen1:
0000000000008c30         push       rbp                                         ; Begin of unwind block (FDE at 0x1e1e4), CODE XREF=mbsstr_trimmed_wordbounded+446, mbsstr_trimmed_wordbounded+1055, mbsstr_trimmed_wordbounded+1462, mbsstr_trimmed_wordbounded+1895, mbsstr_trimmed_wordbounded+2058, knuth_morris_pratt_multibyte+471, knuth_morris_pratt_multibyte+1486, knuth_morris_pratt_multibyte+1698, knuth_morris_pratt_multibyte+2233, mbsstr+1431, mbsstr+1648
0000000000008c31         push       rbx
0000000000008c32         mov        rdx, rsi                                    ; argument "__n" for method j_memchr
0000000000008c35         mov        rbx, rsi
0000000000008c38         xor        esi, esi                                    ; argument "__c" for method j_memchr
0000000000008c3a         mov        rbp, rdi
0000000000008c3d         sub        rsp, 0x8
0000000000008c41         call       j_memchr                                    ; memchr
0000000000008c46         mov        rdx, rax
0000000000008c49         sub        rdx, rbp
0000000000008c4c         add        rdx, 0x1
0000000000008c50         test       rax, rax
0000000000008c53         mov        rax, rbx
0000000000008c56         cmovne     rax, rdx
0000000000008c5a         add        rsp, 0x8
0000000000008c5e         pop        rbx
0000000000008c5f         pop        rbp
0000000000008c60         ret
                        ; endp
0000000000008c61         align      16                                          ; End of unwind block (FDE at 0x1e1e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_5C: int32_t, -92
        ;    var_60: int8_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_74: int8_t, -116
        ;    var_7C: int64_t, -124
        ;    var_80: int8_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160


                     trim2:
0000000000008c70         push       r15                                         ; Begin of unwind block (FDE at 0x1e220), CODE XREF=mbsstr_trimmed_wordbounded+68
0000000000008c72         push       r14
0000000000008c74         push       r13
0000000000008c76         push       r12
0000000000008c78         mov        r12d, esi
0000000000008c7b         push       rbp
0000000000008c7c         push       rbx
0000000000008c7d         sub        rsp, 0x78
0000000000008c81         mov        rax, qword [fs:0x28]
0000000000008c8a         mov        qword [rsp+0xa8+var_40], rax
0000000000008c8f         xor        eax, eax
0000000000008c91         call       j_strdup                                    ; strdup
0000000000008c96         test       rax, rax
0000000000008c99         je         loc_9257

0000000000008c9f         mov        rbx, rax
0000000000008ca2         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000008ca7         cmp        rax, 0x1
0000000000008cab         jbe        loc_8fb0

0000000000008cb1         test       r12d, r12d
0000000000008cb4         jne        loc_8e08

                     loc_8cba:
0000000000008cba         mov        qword [rsp+0xa8+var_70], rbx                ; CODE XREF=trim2+1393
0000000000008cbf         mov        rdx, rbx

                     loc_8cc2:
0000000000008cc2         mov        ecx, dword [rdx]                            ; CODE XREF=trim2+103
0000000000008cc4         add        rdx, 0x4
0000000000008cc8         lea        eax, dword [rcx-0x1010101]
0000000000008cce         not        ecx
0000000000008cd0         and        eax, ecx
0000000000008cd2         and        eax, 0x80808080
0000000000008cd7         je         loc_8cc2

0000000000008cd9         mov        ecx, eax
0000000000008cdb         mov        byte [rsp+0xa8+var_80], 0x0
0000000000008ce0         mov        qword [rsp+0xa8+var_7C], 0x0
0000000000008ce9         shr        ecx, 0x10
0000000000008cec         test       eax, 0x8080
0000000000008cf1         mov        byte [rsp+0xa8+var_74], 0x0
0000000000008cf6         cmove      eax, ecx
0000000000008cf9         lea        rcx, qword [rdx+2]
0000000000008cfd         mov        esi, eax
0000000000008cff         cmove      rdx, rcx
0000000000008d03         add        sil, al
0000000000008d06         mov        rsi, rbx
0000000000008d09         sbb        rdx, 0x3
0000000000008d0d         xor        r15d, r15d
0000000000008d10         cmp        rdx, rbx
0000000000008d13         mov        r14, rdx
0000000000008d16         mov        qword [rsp+0xa8+var_88], rdx
0000000000008d1b         jbe        loc_8f80

0000000000008d21         lea        rbp, qword [rsp+0xa8+var_88]
0000000000008d26         lea        rax, qword [rbp+0xc]
0000000000008d2a         mov        qword [rsp+0xa8+var_90], rax
0000000000008d2f         jmp        loc_8d6e
0000000000008d31         align      8

                     loc_8d38:
0000000000008d38         cmp        byte [rsp+0xa8+var_60], 0x0                 ; CODE XREF=trim2+340
0000000000008d3d         mov        r15d, 0x1
0000000000008d43         je         loc_8d57

0000000000008d45         mov        edi, dword [rsp+0xa8+var_5C]                ; argument "__wc" for method j_iswspace
0000000000008d49         xor        r15d, r15d
0000000000008d4c         call       j_iswspace                                  ; iswspace
0000000000008d51         test       eax, eax
0000000000008d53         sete       r15b

                     loc_8d57:
0000000000008d57         lea        rsi, qword [r12+r13]                        ; CODE XREF=trim2+211, trim2+397, trim2+1205, trim2+1245, trim2+1414
0000000000008d5b         mov        byte [rsp+0xa8+var_74], 0x0
0000000000008d60         cmp        rsi, r14
0000000000008d63         mov        qword [rsp+0xa8+var_70], rsi
0000000000008d68         jae        loc_8f70

                     loc_8d6e:
0000000000008d6e         cmp        byte [rsp+0xa8+var_80], 0x0                 ; CODE XREF=trim2+191
0000000000008d73         jne        loc_90a1

0000000000008d79         movzx      ecx, byte [rsi]
0000000000008d7c         lea        rdi, qword [is_basic_table]                 ; is_basic_table
0000000000008d83         mov        eax, ecx
0000000000008d85         shr        al, 0x5
0000000000008d88         and        eax, 0x7
0000000000008d8b         mov        eax, dword [rdi+rax*4]
0000000000008d8e         bt         eax, ecx
0000000000008d91         jae        loc_9080

0000000000008d97         mov        qword [rsp+0xa8+var_68], 0x1
0000000000008da0         movsx      eax, byte [rsi]
0000000000008da3         mov        r13d, 0x1
0000000000008da9         mov        r12, qword [rsp+0xa8+var_70]
0000000000008dae         mov        r14, qword [rsp+0xa8+var_88]
0000000000008db3         mov        byte [rsp+0xa8+var_60], 0x1
0000000000008db8         mov        dword [rsp+0xa8+var_5C], eax

                     loc_8dbc:
0000000000008dbc         test       r15d, r15d                                  ; CODE XREF=trim2+1192, trim2+1326, trim2+1445
0000000000008dbf         mov        byte [rsp+0xa8+var_74], 0x1
0000000000008dc4         je         loc_8d38

0000000000008dca         cmp        r15d, 0x1
0000000000008dce         je         loc_9120

0000000000008dd4         cmp        r15d, 0x2
0000000000008dd8         jne        loc_91f0

0000000000008dde         cmp        byte [rsp+0xa8+var_60], 0x0
0000000000008de3         je         loc_91f0

0000000000008de9         mov        edi, dword [rsp+0xa8+var_5C]                ; argument "__wc" for method j_iswspace
0000000000008ded         call       j_iswspace                                  ; iswspace
0000000000008df2         test       eax, eax
0000000000008df4         mov        eax, 0x1
0000000000008df9         cmove      r15d, eax
0000000000008dfd         jmp        loc_8d57
0000000000008e02         align      8

                     loc_8e08:
0000000000008e08         mov        qword [rsp+0xa8+var_70], rbx                ; CODE XREF=trim2+68
0000000000008e0d         mov        rdx, rbx

                     loc_8e10:
0000000000008e10         mov        ecx, dword [rdx]                            ; CODE XREF=trim2+437
0000000000008e12         add        rdx, 0x4
0000000000008e16         lea        eax, dword [rcx-0x1010101]
0000000000008e1c         not        ecx
0000000000008e1e         and        eax, ecx
0000000000008e20         and        eax, 0x80808080
0000000000008e25         je         loc_8e10

0000000000008e27         mov        ecx, eax
0000000000008e29         mov        byte [rsp+0xa8+var_80], 0x0
0000000000008e2e         mov        qword [rsp+0xa8+var_7C], 0x0
0000000000008e37         shr        ecx, 0x10
0000000000008e3a         test       eax, 0x8080
0000000000008e3f         mov        byte [rsp+0xa8+var_74], 0x0
0000000000008e44         cmove      eax, ecx
0000000000008e47         lea        rcx, qword [rdx+2]
0000000000008e4b         mov        r15, rbx
0000000000008e4e         mov        esi, eax
0000000000008e50         cmove      rdx, rcx
0000000000008e54         add        sil, al
0000000000008e57         sbb        rdx, 0x3
0000000000008e5b         cmp        rdx, rbx
0000000000008e5e         mov        qword [rsp+0xa8+var_88], rdx
0000000000008e63         jbe        loc_91c0

0000000000008e69         lea        rbp, qword [rsp+0xa8+var_88]
0000000000008e6e         lea        r14, qword [is_basic_table]                 ; is_basic_table
0000000000008e75         lea        r13, qword [rbp+0xc]
0000000000008e79         jmp        loc_8ee7
0000000000008e7b         align      128

                     loc_8e80:
0000000000008e80         movzx      ecx, byte [r15]                             ; CODE XREF=trim2+636
0000000000008e84         mov        eax, ecx
0000000000008e86         shr        al, 0x5
0000000000008e89         and        eax, 0x7
0000000000008e8c         mov        eax, dword [r14+rax*4]
0000000000008e90         bt         eax, ecx
0000000000008e93         jae        loc_9158

0000000000008e99         mov        qword [rsp+0xa8+var_68], 0x1
0000000000008ea2         movsx      eax, byte [r15]
0000000000008ea6         mov        r15, qword [rsp+0xa8+var_70]
0000000000008eab         mov        byte [rsp+0xa8+var_60], 0x1
0000000000008eb0         mov        byte [rsp+0xa8+var_74], 0x1
0000000000008eb5         mov        dword [rsp+0xa8+var_5C], eax

                     loc_8eb9:
0000000000008eb9         mov        edi, dword [rsp+0xa8+var_5C]                ; argument "__wc" for method j_iswspace, CODE XREF=trim2+755, trim2+1493
0000000000008ebd         call       j_iswspace                                  ; iswspace
0000000000008ec2         test       eax, eax
0000000000008ec4         je         loc_91c0

0000000000008eca         add        r15, qword [rsp+0xa8+var_68]
0000000000008ecf         mov        rdx, qword [rsp+0xa8+var_88]
0000000000008ed4         mov        byte [rsp+0xa8+var_74], 0x0
0000000000008ed9         cmp        r15, rdx
0000000000008edc         mov        qword [rsp+0xa8+var_70], r15
0000000000008ee1         jae        loc_91c0

                     loc_8ee7:
0000000000008ee7         cmp        byte [rsp+0xa8+var_80], 0x0                 ; CODE XREF=trim2+521
0000000000008eec         je         loc_8e80

                     loc_8eee:
0000000000008eee         lea        rcx, qword [rbp+0xc]                        ; CODE XREF=trim2+1287
0000000000008ef2         lea        rdi, qword [rbp+0x2c]                       ; argument #1 for method rpl_mbrtowc
0000000000008ef6         sub        rdx, r15                                    ; argument #3 for method rpl_mbrtowc
0000000000008ef9         mov        rsi, r15                                    ; argument #2 for method rpl_mbrtowc
0000000000008efc         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000008f01         cmp        rax, 0xffffffffffffffff
0000000000008f05         mov        qword [rsp+0xa8+var_68], rax
0000000000008f0a         je         loc_91a8

0000000000008f10         cmp        rax, 0xfffffffffffffffe
0000000000008f14         mov        r15, qword [rsp+0xa8+var_70]
0000000000008f19         je         loc_9220

0000000000008f1f         test       rax, rax
0000000000008f22         jne        loc_8f43

0000000000008f24         mov        qword [rsp+0xa8+var_68], 0x1
0000000000008f2d         cmp        byte [r15], 0x0
0000000000008f31         jne        loc_9280

0000000000008f37         mov        edx, dword [rsp+0xa8+var_5C]
0000000000008f3b         test       edx, edx
0000000000008f3d         jne        loc_927b

                     loc_8f43:
0000000000008f43         lea        rdi, qword [rbp+0xc]                        ; argument "__ps" for method j_mbsinit, CODE XREF=trim2+690
0000000000008f47         mov        byte [rsp+0xa8+var_60], 0x1
0000000000008f4c         call       j_mbsinit                                   ; mbsinit
0000000000008f51         test       eax, eax
0000000000008f53         je         loc_9240

0000000000008f59         mov        byte [rsp+0xa8+var_80], 0x0
0000000000008f5e         mov        byte [rsp+0xa8+var_74], 0x1
0000000000008f63         jmp        loc_8eb9
0000000000008f68         align      16

                     loc_8f70:
0000000000008f70         cmp        r15d, 0x2                                   ; CODE XREF=trim2+248
0000000000008f74         jne        loc_8f80

0000000000008f76         mov        rax, qword [rsp+0xa8+var_A0]
0000000000008f7b         mov        byte [rax], 0x0
0000000000008f7e         nop

                     loc_8f80:
0000000000008f80         mov        rax, rbx                                    ; CODE XREF=trim2+171, trim2+772, trim2+912, trim2+981, trim2+1011, trim2+1028, trim2+1387
0000000000008f83         mov        rbx, qword [rsp+0xa8+var_40]
0000000000008f88         xor        rbx, qword [fs:0x28]
0000000000008f91         jne        loc_9252

0000000000008f97         add        rsp, 0x78
0000000000008f9b         pop        rbx
0000000000008f9c         pop        rbp
0000000000008f9d         pop        r12
0000000000008f9f         pop        r13
0000000000008fa1         pop        r14
0000000000008fa3         pop        r15
0000000000008fa5         ret
                        ; endp
0000000000008fa6         align      16

                     loc_8fb0:
0000000000008fb0         test       r12d, r12d                                  ; CODE XREF=trim2+59
0000000000008fb3         je         loc_9006

0000000000008fb5         movzx      ebp, byte [rbx]
0000000000008fb8         test       bpl, bpl
0000000000008fbb         je         loc_924a

0000000000008fc1         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000008fc6         mov        r13, rbx
0000000000008fc9         mov        rax, qword [rax]
0000000000008fcc         jmp        loc_8fde
0000000000008fce         align      16

                     loc_8fd0:
0000000000008fd0         add        r13, 0x1                                    ; CODE XREF=trim2+883
0000000000008fd4         movzx      ebp, byte [r13]
0000000000008fd9         test       bpl, bpl
0000000000008fdc         je         loc_8fe5

                     loc_8fde:
0000000000008fde         test       byte [rax+rbp*2+1], 0x20                    ; CODE XREF=trim2+860
0000000000008fe3         jne        loc_8fd0

                     loc_8fe5:
0000000000008fe5         mov        rdi, r13                                    ; argument "__s" for method j_strlen, CODE XREF=trim2+876, trim2+1501
0000000000008fe8         call       j_strlen                                    ; strlen
0000000000008fed         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memmove
0000000000008ff1         mov        rsi, r13                                    ; argument "__src" for method j_memmove
0000000000008ff4         mov        rdi, rbx                                    ; argument "__dest" for method j_memmove
0000000000008ff7         call       j_memmove                                   ; memmove
0000000000008ffc         cmp        r12d, 0x1
0000000000009000         je         loc_8f80

                     loc_9006:
0000000000009006         mov        rdx, rbx                                    ; CODE XREF=trim2+835

                     loc_9009:
0000000000009009         mov        ecx, dword [rdx]                            ; CODE XREF=trim2+942
000000000000900b         add        rdx, 0x4
000000000000900f         lea        eax, dword [rcx-0x1010101]
0000000000009015         not        ecx
0000000000009017         and        eax, ecx
0000000000009019         and        eax, 0x80808080
000000000000901e         je         loc_9009

0000000000009020         mov        ecx, eax
0000000000009022         shr        ecx, 0x10
0000000000009025         test       eax, 0x8080
000000000000902a         cmove      eax, ecx
000000000000902d         lea        rcx, qword [rdx+2]
0000000000009031         mov        esi, eax
0000000000009033         cmove      rdx, rcx
0000000000009037         add        sil, al
000000000000903a         sbb        rdx, 0x3
000000000000903e         lea        rbp, qword [rdx-1]
0000000000009042         cmp        rbx, rbp
0000000000009045         ja         loc_8f80

000000000000904b         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000009050         mov        rdx, qword [rax]
0000000000009053         jmp        loc_9069
0000000000009055         align      8

                     loc_9058:
0000000000009058         mov        byte [rbp], 0x0                             ; CODE XREF=trim2+1026
000000000000905c         sub        rbp, 0x1
0000000000009060         cmp        rbx, rbp
0000000000009063         ja         loc_8f80

                     loc_9069:
0000000000009069         movzx      eax, byte [rbp]                             ; CODE XREF=trim2+995
000000000000906d         test       byte [rdx+rax*2+1], 0x20
0000000000009072         jne        loc_9058

0000000000009074         jmp        loc_8f80
0000000000009079         align      128

                     loc_9080:
0000000000009080         mov        rdi, qword [rsp+0xa8+var_90]                ; argument "__ps" for method j_mbsinit, CODE XREF=trim2+289
0000000000009085         mov        qword [rsp+0xa8+var_98], rsi
000000000000908a         call       j_mbsinit                                   ; mbsinit
000000000000908f         test       eax, eax
0000000000009091         je         loc_925c

0000000000009097         mov        rsi, qword [rsp+0xa8+var_98]
000000000000909c         mov        byte [rsp+0xa8+var_80], 0x1

                     loc_90a1:
00000000000090a1         lea        rcx, qword [rbp+0xc]                        ; CODE XREF=trim2+259
00000000000090a5         mov        rdx, r14
00000000000090a8         lea        rdi, qword [rbp+0x2c]                       ; argument #1 for method rpl_mbrtowc
00000000000090ac         sub        rdx, rsi                                    ; argument #3 for method rpl_mbrtowc
00000000000090af         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000090b4         cmp        rax, 0xffffffffffffffff
00000000000090b8         mov        qword [rsp+0xa8+var_68], rax
00000000000090bd         je         loc_9180

00000000000090c3         cmp        rax, 0xfffffffffffffffe
00000000000090c7         mov        r12, qword [rsp+0xa8+var_70]
00000000000090cc         je         loc_9200

00000000000090d2         test       rax, rax
00000000000090d5         jne        loc_90f7

00000000000090d7         mov        qword [rsp+0xa8+var_68], 0x1
00000000000090e0         cmp        byte [r12], 0x0
00000000000090e5         jne        loc_9280

00000000000090eb         mov        eax, dword [rsp+0xa8+var_5C]
00000000000090ef         test       eax, eax
00000000000090f1         jne        loc_927b

                     loc_90f7:
00000000000090f7         lea        rdi, qword [rbp+0xc]                        ; argument "__ps" for method j_mbsinit, CODE XREF=trim2+1125
00000000000090fb         mov        byte [rsp+0xa8+var_60], 0x1
0000000000009100         call       j_mbsinit                                   ; mbsinit
0000000000009105         test       eax, eax
0000000000009107         mov        r14, qword [rsp+0xa8+var_88]
000000000000910c         je         loc_9113

000000000000910e         mov        byte [rsp+0xa8+var_80], 0x0

                     loc_9113:
0000000000009113         mov        r13, qword [rsp+0xa8+var_68]                ; CODE XREF=trim2+1180
0000000000009118         jmp        loc_8dbc
000000000000911d         align      32

                     loc_9120:
0000000000009120         cmp        byte [rsp+0xa8+var_60], 0x0                 ; CODE XREF=trim2+350
0000000000009125         je         loc_8d57

000000000000912b         mov        edi, dword [rsp+0xa8+var_5C]                ; argument "__wc" for method j_iswspace
000000000000912f         call       j_iswspace                                  ; iswspace
0000000000009134         mov        rsi, qword [rsp+0xa8+var_A0]
0000000000009139         test       eax, eax
000000000000913b         mov        eax, 0x2
0000000000009140         cmovne     r15d, eax
0000000000009144         cmovne     rsi, r12
0000000000009148         mov        qword [rsp+0xa8+var_A0], rsi
000000000000914d         jmp        loc_8d57
0000000000009152         align      8

                     loc_9158:
0000000000009158         mov        rdi, r13                                    ; argument "__ps" for method j_mbsinit, CODE XREF=trim2+547
000000000000915b         mov        qword [rsp+0xa8+var_98], rdx
0000000000009160         call       j_mbsinit                                   ; mbsinit
0000000000009165         test       eax, eax
0000000000009167         mov        rdx, qword [rsp+0xa8+var_98]
000000000000916c         je         loc_925c

0000000000009172         mov        byte [rsp+0xa8+var_80], 0x1
0000000000009177         jmp        loc_8eee
000000000000917c         align      128

                     loc_9180:
0000000000009180         mov        qword [rsp+0xa8+var_68], 0x1                ; CODE XREF=trim2+1101
0000000000009189         mov        byte [rsp+0xa8+var_60], 0x0
000000000000918e         mov        r13d, 0x1
0000000000009194         mov        r12, qword [rsp+0xa8+var_70]
0000000000009199         mov        r14, qword [rsp+0xa8+var_88]
000000000000919e         jmp        loc_8dbc
00000000000091a3         align      8

                     loc_91a8:
00000000000091a8         mov        r15, qword [rsp+0xa8+var_70]                ; CODE XREF=trim2+666
00000000000091ad         mov        qword [rsp+0xa8+var_68], 0x1
00000000000091b6         mov        byte [rsp+0xa8+var_60], 0x0
00000000000091bb         mov        byte [rsp+0xa8+var_74], 0x1

                     loc_91c0:
00000000000091c0         mov        rdi, r15                                    ; argument "__s" for method j_strlen, CODE XREF=trim2+499, trim2+596, trim2+625, trim2+1479
00000000000091c3         call       j_strlen                                    ; strlen
00000000000091c8         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memmove
00000000000091cc         mov        rsi, r15                                    ; argument "__src" for method j_memmove
00000000000091cf         mov        rdi, rbx                                    ; argument "__dest" for method j_memmove
00000000000091d2         call       j_memmove                                   ; memmove
00000000000091d7         cmp        r12d, 0x1
00000000000091db         je         loc_8f80

00000000000091e1         jmp        loc_8cba
00000000000091e6         align      16

                     loc_91f0:
00000000000091f0         mov        r15d, 0x1                                   ; CODE XREF=trim2+360, trim2+371
00000000000091f6         jmp        loc_8d57
00000000000091fb         align      512

                     loc_9200:
0000000000009200         mov        r14, qword [rsp+0xa8+var_88]                ; CODE XREF=trim2+1116
0000000000009205         mov        byte [rsp+0xa8+var_60], 0x0
000000000000920a         mov        r13, r14
000000000000920d         sub        r13, r12
0000000000009210         mov        qword [rsp+0xa8+var_68], r13
0000000000009215         jmp        loc_8dbc
000000000000921a         align      32

                     loc_9220:
0000000000009220         mov        rax, qword [rsp+0xa8+var_88]                ; CODE XREF=trim2+681
0000000000009225         mov        byte [rsp+0xa8+var_60], 0x0
000000000000922a         mov        byte [rsp+0xa8+var_74], 0x1
000000000000922f         sub        rax, r15
0000000000009232         mov        qword [rsp+0xa8+var_68], rax
0000000000009237         jmp        loc_91c0
0000000000009239         align      64

                     loc_9240:
0000000000009240         mov        byte [rsp+0xa8+var_74], 0x1                 ; CODE XREF=trim2+739
0000000000009245         jmp        loc_8eb9

                     loc_924a:
000000000000924a         mov        r13, rbx                                    ; CODE XREF=trim2+843
000000000000924d         jmp        loc_8fe5

                     loc_9252:
0000000000009252         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=trim2+801
                        ; endp

                     loc_9257:
0000000000009257         call       xalloc_die                                  ; xalloc_die, CODE XREF=trim2+41
                        ; endp

                     loc_925c:
000000000000925c         lea        rcx, qword [__PRETTY_FUNCTION__.5134]       ; argument "__function" for method j___assert_fail, "mbiter_multi_next", CODE XREF=trim2+1057, trim2+1276
0000000000009263         lea        rsi, qword [aCoreutils831li_1c1f0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbiter.h"
000000000000926a         lea        rdi, qword [aMbsinitItersta]                ; argument "__assertion" for method j___assert_fail, "mbsinit (&iter->state)"
0000000000009271         mov        edx, 0x8e                                   ; argument "__line" for method j___assert_fail
0000000000009276         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_927b:
000000000000927b         call       mbiter_multi_next.part.0                    ; mbiter_multi_next.part.0, CODE XREF=trim2+717, trim2+1153
                        ; endp

                     loc_9280:
0000000000009280         lea        rcx, qword [__PRETTY_FUNCTION__.5134]       ; argument "__function" for method j___assert_fail, "mbiter_multi_next", CODE XREF=trim2+705, trim2+1141
0000000000009287         lea        rsi, qword [aCoreutils831li_1c1f0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbiter.h"
000000000000928e         lea        rdi, qword [aItercurptr0]                   ; argument "__assertion" for method j___assert_fail, "*iter->cur.ptr == '\\0'"
0000000000009295         mov        edx, 0xa9                                   ; argument "__line" for method j___assert_fail
000000000000929a         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000929f         align      32                                          ; End of unwind block (FDE at 0x1e220)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
00000000000092a0         push       r15                                         ; Begin of unwind block (FDE at 0x1e274), CODE XREF=j_version_etc_arn, version_etc_va+75, version_etc+161
00000000000092a2         push       r14
00000000000092a4         push       r13
00000000000092a6         push       r12
00000000000092a8         mov        r12, r9
00000000000092ab         push       rbp
00000000000092ac         push       rbx
00000000000092ad         mov        rbp, rdi
00000000000092b0         mov        rbx, r8
00000000000092b3         sub        rsp, 0x28
00000000000092b7         test       rsi, rsi
00000000000092ba         je         loc_93d8

00000000000092c0         mov        r8, rdx
00000000000092c3         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
00000000000092ca         mov        r9, rcx
00000000000092cd         xor        eax, eax
00000000000092cf         mov        rcx, rsi
00000000000092d2         mov        esi, 0x1
00000000000092d7         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_92dc:
00000000000092dc         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0x1c235, CODE XREF=version_etc_arn+337
00000000000092e3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000092e5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000092ea         call       j_dcgettext                                 ; dcgettext
00000000000092ef         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
00000000000092f6         mov        rcx, rax
00000000000092f9         mov        r8d, 0x7e3
00000000000092ff         mov        esi, 0x1
0000000000009304         mov        rdi, rbp
0000000000009307         xor        eax, eax
0000000000009309         call       j___fprintf_chk                             ; __fprintf_chk
000000000000930e         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
0000000000009315         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009317         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000931c         call       j_dcgettext                                 ; dcgettext
0000000000009321         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000009324         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000009327         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000932c         cmp        r12, 0x9
0000000000009330         ja         loc_9670

0000000000009336         lea        rdx, qword [switch_table_1c51c]             ; switch_table_1c51c
000000000000933d         movsxd     rax, dword [rdx+r12*4]
0000000000009341         add        rax, rdx
0000000000009344         jmp        rax                                         ; switch statement using table at 0x1c51c, with 10 cases, 0x9350,0x93c6,0x9400,0x9458,0x9498,0x94e0,0x9530,0x9588,0x95b8,0x9620
0000000000009346         align      16

                     loc_9350:
0000000000009350         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
0000000000009354         mov        rax, qword [rbx+0x10]
0000000000009358         lea        rsi, qword [aWrittenBySSSns_1c430]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
000000000000935f         mov        r8, qword [rbx+8]
0000000000009363         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009368         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000936a         mov        r13, qword [rbx+0x30]
000000000000936e         mov        r12, qword [rbx+0x28]
0000000000009372         mov        qword [rsp+0x58+var_48], r9
0000000000009377         mov        r15, qword [rbx+0x20]
000000000000937b         mov        r14, qword [rbx+0x18]
000000000000937f         mov        qword [rsp+0x58+var_58], rax
0000000000009383         mov        qword [rsp+0x58+var_50], r8
0000000000009388         mov        rbx, qword [rbx]
000000000000938b         call       j_dcgettext                                 ; dcgettext
0000000000009390         sub        rsp, 0x8

                     loc_9394:
0000000000009394         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000009399         mov        rdx, rax
000000000000939c         mov        rcx, rbx
000000000000939f         mov        esi, 0x1
00000000000093a4         mov        rdi, rbp
00000000000093a7         xor        eax, eax
00000000000093a9         push       r9
00000000000093ab         push       r13
00000000000093ad         push       r12
00000000000093af         push       r15
00000000000093b1         push       r14
00000000000093b3         mov        r9, qword [rsp+0x88+var_58]
00000000000093b8         mov        r8, qword [rsp+0x88+var_50]
00000000000093bd         call       j___fprintf_chk                             ; __fprintf_chk
00000000000093c2         add        rsp, 0x30

                     loc_93c6:
00000000000093c6         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
00000000000093ca         pop        rbx
00000000000093cb         pop        rbp
00000000000093cc         pop        r12
00000000000093ce         pop        r13
00000000000093d0         pop        r14
00000000000093d2         pop        r15
00000000000093d4         ret
                        ; endp
00000000000093d5         align      8

                     loc_93d8:
00000000000093d8         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
00000000000093db         mov        rcx, rdx
00000000000093de         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
00000000000093e5         mov        esi, 0x1
00000000000093ea         xor        eax, eax
00000000000093ec         call       j___fprintf_chk                             ; __fprintf_chk
00000000000093f1         jmp        loc_92dc
00000000000093f6         align      1024

                     loc_9400:
0000000000009400         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
0000000000009404         mov        r9, qword [rbx+0x38]
0000000000009408         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
000000000000940f         mov        rax, qword [rbx+0x10]
0000000000009413         mov        r8, qword [rbx+8]
0000000000009417         mov        edx, 0x5
000000000000941c         mov        r13, qword [rbx+0x30]
0000000000009420         mov        r12, qword [rbx+0x28]
0000000000009424         mov        r15, qword [rbx+0x20]
0000000000009428         mov        r14, qword [rbx+0x18]
000000000000942c         mov        rbx, qword [rbx]
000000000000942f         mov        qword [rsp+0x58+var_40], r10
0000000000009434         mov        qword [rsp+0x58+var_48], r9
0000000000009439         mov        qword [rsp+0x58+var_58], rax
000000000000943d         mov        qword [rsp+0x58+var_50], r8

                     loc_9442:
0000000000009442         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
0000000000009444         call       j_dcgettext                                 ; dcgettext
0000000000009449         mov        r10, qword [rsp+0x58+var_40]
000000000000944e         push       r10
0000000000009450         jmp        loc_9394
0000000000009455         align      8

                     loc_9458:
0000000000009458         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
000000000000945b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
0000000000009462         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009467         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009469         call       j_dcgettext                                 ; dcgettext
000000000000946e         add        rsp, 0x28
0000000000009472         mov        rcx, rbx
0000000000009475         mov        rdi, rbp
0000000000009478         pop        rbx
0000000000009479         pop        rbp
000000000000947a         pop        r12
000000000000947c         pop        r13
000000000000947e         pop        r14
0000000000009480         pop        r15
0000000000009482         mov        rdx, rax
0000000000009485         mov        esi, 0x1
000000000000948a         xor        eax, eax
000000000000948c         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000009491         align      8

                     loc_9498:
0000000000009498         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
000000000000949c         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
00000000000094a3         mov        rbx, qword [rbx]
00000000000094a6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000094ab         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000094ad         call       j_dcgettext                                 ; dcgettext
00000000000094b2         add        rsp, 0x28
00000000000094b6         mov        r8, r12
00000000000094b9         mov        rcx, rbx
00000000000094bc         mov        rdi, rbp
00000000000094bf         mov        rdx, rax
00000000000094c2         mov        esi, 0x1
00000000000094c7         pop        rbx
00000000000094c8         pop        rbp
00000000000094c9         pop        r12
00000000000094cb         pop        r13
00000000000094cd         pop        r14
00000000000094cf         pop        r15
00000000000094d1         xor        eax, eax
00000000000094d3         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
00000000000094d8         align      32

                     loc_94e0:
00000000000094e0         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
00000000000094e4         mov        r12, qword [rbx+8]
00000000000094e8         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
00000000000094ef         mov        rbx, qword [rbx]
00000000000094f2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000094f7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000094f9         call       j_dcgettext                                 ; dcgettext
00000000000094fe         add        rsp, 0x28
0000000000009502         mov        r9, r13
0000000000009505         mov        r8, r12
0000000000009508         mov        rcx, rbx
000000000000950b         mov        rdi, rbp
000000000000950e         mov        rdx, rax
0000000000009511         pop        rbx
0000000000009512         pop        rbp
0000000000009513         pop        r12
0000000000009515         pop        r13
0000000000009517         pop        r14
0000000000009519         pop        r15
000000000000951b         mov        esi, 0x1
0000000000009520         xor        eax, eax
0000000000009522         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000009527         align      16

                     loc_9530:
0000000000009530         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
0000000000009537         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000953c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000953e         mov        r14, qword [rbx+0x18]
0000000000009542         mov        r13, qword [rbx+0x10]
0000000000009546         mov        r12, qword [rbx+8]
000000000000954a         mov        rbx, qword [rbx]
000000000000954d         call       j_dcgettext                                 ; dcgettext
0000000000009552         sub        rsp, 0x8

                     loc_9556:
0000000000009556         push       r14                                         ; CODE XREF=version_etc_arn+784
0000000000009558         mov        rdx, rax
000000000000955b         mov        r9, r13
000000000000955e         mov        r8, r12
0000000000009561         mov        rcx, rbx
0000000000009564         mov        rdi, rbp
0000000000009567         mov        esi, 0x1
000000000000956c         xor        eax, eax
000000000000956e         call       j___fprintf_chk                             ; __fprintf_chk
0000000000009573         pop        rax
0000000000009574         pop        rdx
0000000000009575         add        rsp, 0x28
0000000000009579         pop        rbx
000000000000957a         pop        rbp
000000000000957b         pop        r12
000000000000957d         pop        r13
000000000000957f         pop        r14
0000000000009581         pop        r15
0000000000009583         ret
                        ; endp
0000000000009584         align      8

                     loc_9588:
0000000000009588         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
000000000000958c         lea        rsi, qword [aWrittenBySSSns_1c3b0]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
0000000000009593         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009598         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000959a         mov        r14, qword [rbx+0x18]
000000000000959e         mov        r13, qword [rbx+0x10]
00000000000095a2         mov        r12, qword [rbx+8]
00000000000095a6         mov        rbx, qword [rbx]
00000000000095a9         call       j_dcgettext                                 ; dcgettext
00000000000095ae         push       r15
00000000000095b0         jmp        loc_9556
00000000000095b2         align      8

                     loc_95b8:
00000000000095b8         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
00000000000095bc         mov        r12, qword [rbx+0x28]
00000000000095c0         lea        rsi, qword [aWrittenBySSSns_1c3d8]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
00000000000095c7         mov        r15, qword [rbx+0x20]
00000000000095cb         mov        r14, qword [rbx+0x18]
00000000000095cf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000095d4         mov        r13, qword [rbx+0x10]
00000000000095d8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000095da         mov        rbx, qword [rbx]
00000000000095dd         mov        qword [rsp+0x58+var_58], r8
00000000000095e1         call       j_dcgettext                                 ; dcgettext
00000000000095e6         sub        rsp, 0x8
00000000000095ea         mov        r9, r13
00000000000095ed         push       r12
00000000000095ef         push       r15
00000000000095f1         push       r14

                     loc_95f3:
00000000000095f3         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
00000000000095f8         mov        rcx, rbx
00000000000095fb         mov        rdx, rax
00000000000095fe         mov        rdi, rbp
0000000000009601         mov        esi, 0x1
0000000000009606         xor        eax, eax
0000000000009608         call       j___fprintf_chk                             ; __fprintf_chk
000000000000960d         add        rsp, 0x20
0000000000009611         add        rsp, 0x28
0000000000009615         pop        rbx
0000000000009616         pop        rbp
0000000000009617         pop        r12
0000000000009619         pop        r13
000000000000961b         pop        r14
000000000000961d         pop        r15
000000000000961f         ret
                        ; endp

                     loc_9620:
0000000000009620         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
0000000000009624         mov        r13, qword [rbx+0x30]
0000000000009628         lea        rsi, qword [aWrittenBySSSns_1c400]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
000000000000962f         mov        r12, qword [rbx+0x28]
0000000000009633         mov        r15, qword [rbx+0x20]
0000000000009637         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000963c         mov        r14, qword [rbx+0x18]
0000000000009640         mov        r8, qword [rbx+8]
0000000000009644         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009646         mov        qword [rsp+0x58+var_50], r9
000000000000964b         mov        rbx, qword [rbx]
000000000000964e         mov        qword [rsp+0x58+var_58], r8
0000000000009652         call       j_dcgettext                                 ; dcgettext
0000000000009657         push       r13
0000000000009659         push       r12
000000000000965b         push       r15
000000000000965d         push       r14
000000000000965f         mov        r9, qword [rsp+0x78+var_50]
0000000000009664         jmp        loc_95f3
0000000000009666         align      16

                     loc_9670:
0000000000009670         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
0000000000009674         mov        r9, qword [rbx+0x38]
0000000000009678         mov        edx, 0x5
000000000000967d         mov        rax, qword [rbx+0x10]
0000000000009681         mov        r8, qword [rbx+8]
0000000000009685         lea        rsi, qword [aWrittenBySSSns_1c498]          ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
000000000000968c         mov        r13, qword [rbx+0x30]
0000000000009690         mov        r12, qword [rbx+0x28]
0000000000009694         mov        r15, qword [rbx+0x20]
0000000000009698         mov        r14, qword [rbx+0x18]
000000000000969c         mov        qword [rsp+0x58+var_40], r10
00000000000096a1         mov        qword [rsp+0x58+var_48], r9
00000000000096a6         mov        qword [rsp+0x58+var_58], rax
00000000000096aa         mov        qword [rsp+0x58+var_50], r8
00000000000096af         mov        rbx, qword [rbx]
00000000000096b2         jmp        loc_9442
00000000000096b7         align      64                                          ; End of unwind block (FDE at 0x1e274)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
00000000000096c0         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0x1e388)
00000000000096c3         cmp        qword [r8], 0x0
00000000000096c7         je         j_version_etc_arn                           ; version_etc_arn

00000000000096c9         nop        dword [rax]

                     loc_96d0:
00000000000096d0         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
00000000000096d4         cmp        qword [r8+r9*8], 0x0
00000000000096d9         jne        loc_96d0

                     j_version_etc_arn:        // version_etc_arn
00000000000096db         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
00000000000096e0         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0x1e388), Begin of unwind block (FDE at 0x1e39c)
00000000000096e4         mov        r10, r8
00000000000096e7         xor        r9d, r9d
00000000000096ea         mov        rax, qword [fs:0x28]
00000000000096f3         mov        qword [rsp+0x68+var_10], rax
00000000000096f8         xor        eax, eax
00000000000096fa         mov        r8, rsp
00000000000096fd         nop        dword [rax]

                     loc_9700:
0000000000009700         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
0000000000009703         cmp        eax, 0x2f
0000000000009706         ja         loc_974a

0000000000009708         mov        r11d, eax
000000000000970b         add        r11, qword [r10+0x10]
000000000000970f         add        eax, 0x8
0000000000009712         mov        dword [r10], eax

                     loc_9715:
0000000000009715         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
0000000000009718         test       rax, rax
000000000000971b         mov        qword [r8+r9*8], rax
000000000000971f         je         loc_972b

0000000000009721         add        r9, 0x1
0000000000009725         cmp        r9, 0xa
0000000000009729         jne        loc_9700

                     loc_972b:
000000000000972b         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
0000000000009730         mov        rax, qword [rsp+0x68+var_10]
0000000000009735         xor        rax, qword [fs:0x28]
000000000000973e         jne        loc_9745

0000000000009740         add        rsp, 0x68
0000000000009744         ret
                        ; endp

                     loc_9745:
0000000000009745         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_974a:
000000000000974a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
000000000000974e         lea        rax, qword [r11+8]
0000000000009752         mov        qword [r10+8], rax
0000000000009756         jmp        loc_9715
0000000000009758         align      32                                          ; End of unwind block (FDE at 0x1e39c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
0000000000009760         push       rbp                                         ; Begin of unwind block (FDE at 0x1e3b8), CODE XREF=main+686
0000000000009761         push       rbx
0000000000009762         mov        r10d, 0x20
0000000000009768         xor        r11d, r11d
000000000000976b         sub        rsp, 0xb8
0000000000009772         mov        rax, qword [fs:0x28]
000000000000977b         mov        qword [rsp+0xc8+var_50], rax
0000000000009780         xor        eax, eax
0000000000009782         lea        rax, qword [rsp+0xc8+arg_0]
000000000000978a         mov        qword [rsp+0xc8+var_28], r8
0000000000009792         lea        rbx, qword [rsp+0xc8+arg_0]
000000000000979a         lea        r8, qword [rsp+0xc8+var_A8]
000000000000979f         mov        qword [rsp+0xc8+var_20], r9
00000000000097a7         mov        dword [rsp+0xc8+var_C0], 0x20
00000000000097af         mov        qword [rsp+0xc8+var_B8], rax
00000000000097b4         lea        rax, qword [rsp+0xc8+var_48]
00000000000097bc         xor        r9d, r9d
00000000000097bf         mov        qword [rsp+0xc8+var_B0], rax
00000000000097c4         mov        rbp, rax
00000000000097c7         nop        word [rax+rax]

                     loc_97d0:
00000000000097d0         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
00000000000097d4         ja         loc_982c

00000000000097d6         mov        eax, r10d
00000000000097d9         mov        r11d, 0x1
00000000000097df         add        r10d, 0x8
00000000000097e3         add        rax, rbp

                     loc_97e6:
00000000000097e6         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
00000000000097e9         test       rax, rax
00000000000097ec         mov        qword [r8+r9*8], rax
00000000000097f0         je         loc_97fc

00000000000097f2         add        r9, 0x1
00000000000097f6         cmp        r9, 0xa
00000000000097fa         jne        loc_97d0

                     loc_97fc:
00000000000097fc         test       r11b, r11b                                  ; CODE XREF=version_etc+144
00000000000097ff         jne        loc_9825

                     loc_9801:
0000000000009801         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
0000000000009806         mov        rax, qword [rsp+0xc8+var_50]
000000000000980b         xor        rax, qword [fs:0x28]
0000000000009814         jne        loc_9820

0000000000009816         add        rsp, 0xb8
000000000000981d         pop        rbx
000000000000981e         pop        rbp
000000000000981f         ret
                        ; endp

                     loc_9820:
0000000000009820         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_9825:
0000000000009825         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
000000000000982a         jmp        loc_9801

                     loc_982c:
000000000000982c         mov        rax, rbx                                    ; CODE XREF=version_etc+116
000000000000982f         add        rbx, 0x8
0000000000009833         jmp        loc_97e6
0000000000009835         align      64                                          ; End of unwind block (FDE at 0x1e3b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
0000000000009840         push       rbx                                         ; Begin of unwind block (FDE at 0x1e3e4)
0000000000009841         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
0000000000009848         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000984d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000984f         call       j_dcgettext                                 ; dcgettext
0000000000009854         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
000000000000985b         mov        rsi, rax
000000000000985e         mov        edi, 0x1
0000000000009863         xor        eax, eax
0000000000009865         call       j___printf_chk                              ; __printf_chk
000000000000986a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
0000000000009871         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009876         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009878         call       j_dcgettext                                 ; dcgettext
000000000000987d         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000009884         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x1b7d2
000000000000988b         mov        rsi, rax
000000000000988e         mov        edi, 0x1
0000000000009893         xor        eax, eax
0000000000009895         call       j___printf_chk                              ; __printf_chk
000000000000989a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000098a1         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
00000000000098a8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000098aa         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000098af         call       j_dcgettext                                 ; dcgettext
00000000000098b4         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000098b7         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000098ba         pop        rbx
00000000000098bb         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
00000000000098c0         push       rbx                                         ; End of unwind block (FDE at 0x1e3e4), Begin of unwind block (FDE at 0x1e404), CODE XREF=main+962, main+1026, main+1089, main+1232, main+1249, main+1266, sub_31ea+296, sub_31ea+4622, sub_31ea+4639, sub_31ea+4656, copy_unescaped_string+16
00000000000098c1         mov        rbx, rdi
00000000000098c4         call       j_malloc                                    ; malloc
00000000000098c9         test       rax, rax
00000000000098cc         jne        loc_98d3

00000000000098ce         test       rbx, rbx
00000000000098d1         jne        loc_98d5

                     loc_98d3:
00000000000098d3         pop        rbx                                         ; CODE XREF=xmalloc+12
00000000000098d4         ret
                        ; endp

                     loc_98d5:
00000000000098d5         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_98da:
00000000000098da         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x1e404)
                     xnmalloc:
00000000000098e0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x1e420)
00000000000098e3         mul        rsi
00000000000098e6         mov        rdi, rax
00000000000098e9         seto       al
00000000000098ec         test       rdi, rdi
00000000000098ef         js         loc_98fb

00000000000098f1         movzx      eax, al
00000000000098f4         test       rax, rax
00000000000098f7         jne        loc_98fb

00000000000098f9         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_98fb:
00000000000098fb         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
00000000000098ff         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9904:
0000000000009904         nop                                                    ; End of unwind block (FDE at 0x1e420)
0000000000009906         nop        word [cs:rax+rax]
                     xcharalloc:
0000000000009910         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0x1e434)
                        ; endp
0000000000009912         align      32                                          ; End of unwind block (FDE at 0x1e434)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
0000000000009920         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x1e448), CODE XREF=main+3953, quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
0000000000009923         push       rbx
0000000000009924         mov        rbx, rsi
0000000000009927         jne        loc_992e

0000000000009929         test       rdi, rdi
000000000000992c         jne        loc_9948

                     loc_992e:
000000000000992e         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
0000000000009931         call       j_realloc                                   ; realloc
0000000000009936         test       rax, rax
0000000000009939         jne        loc_9940

000000000000993b         test       rbx, rbx
000000000000993e         jne        loc_9951

                     loc_9940:
0000000000009940         pop        rbx                                         ; CODE XREF=xrealloc+25
0000000000009941         ret
                        ; endp
0000000000009942         align      8

                     loc_9948:
0000000000009948         call       j_free                                      ; free, CODE XREF=xrealloc+12
000000000000994d         xor        eax, eax
000000000000994f         pop        rbx
0000000000009950         ret
                        ; endp

                     loc_9951:
0000000000009951         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9956:
0000000000009956         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x1e448)
                     xnrealloc:
0000000000009960         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0x1e46c)
0000000000009963         mul        rdx
0000000000009966         mov        rsi, rax
0000000000009969         seto       al
000000000000996c         test       rsi, rsi
000000000000996f         js         loc_997b

0000000000009971         movzx      eax, al
0000000000009974         test       rax, rax
0000000000009977         jne        loc_997b

0000000000009979         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_997b:
000000000000997b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
000000000000997f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9984:
0000000000009984         nop                                                    ; End of unwind block (FDE at 0x1e46c)
0000000000009986         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000009990         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x1e480), CODE XREF=digest_word_file+242
0000000000009993         mov        r9, rdx
0000000000009996         mov        rcx, qword [rsi]
0000000000009999         je         loc_99d0

000000000000999b         xor        edx, edx
000000000000999d         movabs     rax, 0x5555555555555554
00000000000099a7         div        r9
00000000000099aa         cmp        rax, rcx
00000000000099ad         jbe        loc_99eb

00000000000099af         mov        rax, rcx
00000000000099b2         shr        rax, 0x1
00000000000099b5         lea        rcx, qword [rax+rcx+1]

                     loc_99ba:
00000000000099ba         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
00000000000099bd         imul       rcx, r9                                     ; argument #4 for method xrealloc
00000000000099c1         mov        rsi, rcx                                    ; argument #2 for method xrealloc
00000000000099c4         jmp        xrealloc                                    ; xrealloc
                        ; endp
00000000000099c9         align      16

                     loc_99d0:
00000000000099d0         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
00000000000099d3         je         loc_99f8

                     loc_99d5:
00000000000099d5         mov        rax, rcx                                    ; CODE XREF=sub_99f4+28
00000000000099d8         mul        r9
00000000000099db         seto       dl
00000000000099de         test       rax, rax
00000000000099e1         movzx      edx, dl
00000000000099e4         js         loc_99eb

00000000000099e6         test       rdx, rdx
00000000000099e9         je         loc_99ba

                     loc_99eb:
00000000000099eb         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
00000000000099ef         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_99f4:
00000000000099f4         nop        dword [rax]
                        ; endp

                     loc_99f8:
00000000000099f8         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
00000000000099fa         mov        eax, 0x80
00000000000099ff         xor        r8d, r8d
0000000000009a02         div        r9
0000000000009a05         test       rax, rax
0000000000009a08         sete       r8b
0000000000009a0c         lea        rcx, qword [r8+rax]
0000000000009a10         jmp        loc_99d5
0000000000009a12         align      32                                          ; End of unwind block (FDE at 0x1e480)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
0000000000009a20         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x1e498)
0000000000009a23         mov        rax, qword [rsi]
0000000000009a26         je         loc_9a50

0000000000009a28         movabs     rdx, 0x5555555555555553
0000000000009a32         cmp        rax, rdx
0000000000009a35         ja         loc_9a61

0000000000009a37         mov        rdx, rax
0000000000009a3a         shr        rdx, 0x1
0000000000009a3d         lea        rax, qword [rdx+rax+1]

                     loc_9a42:
0000000000009a42         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000009a45         mov        rsi, rax                                    ; argument #2 for method xrealloc
0000000000009a48         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000009a4d         align      16

                     loc_9a50:
0000000000009a50         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000009a53         mov        edx, 0x80
0000000000009a58         cmove      rax, rdx
0000000000009a5c         test       rax, rax
0000000000009a5f         jns        loc_9a42

                     loc_9a61:
0000000000009a61         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000009a65         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9a6a:
0000000000009a6a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x1e498)
                     xzalloc:
0000000000009a70         push       rbx                                         ; Begin of unwind block (FDE at 0x1e4b0)
0000000000009a71         mov        rbx, rdi
0000000000009a74         call       xmalloc                                     ; xmalloc
0000000000009a79         mov        rdx, rbx                                    ; argument "__n" for method j_memset
0000000000009a7c         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000009a7e         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000009a81         pop        rbx
0000000000009a82         jmp        j_memset                                    ; memset
                        ; endp
0000000000009a87         align      16                                          ; End of unwind block (FDE at 0x1e4b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000009a90         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x1e4cc)
0000000000009a93         sub        rsp, 0x8
0000000000009a97         mul        rsi
0000000000009a9a         seto       dl
0000000000009a9d         test       rax, rax
0000000000009aa0         js         loc_9ab9

0000000000009aa2         movzx      edx, dl
0000000000009aa5         test       rdx, rdx
0000000000009aa8         jne        loc_9ab9

0000000000009aaa         call       j_calloc                                    ; calloc
0000000000009aaf         test       rax, rax
0000000000009ab2         je         loc_9ab9

0000000000009ab4         add        rsp, 0x8
0000000000009ab8         ret
                        ; endp

                     loc_9ab9:
0000000000009ab9         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9abe:
0000000000009abe         nop                                                    ; End of unwind block (FDE at 0x1e4cc)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmemdup:
0000000000009ac0         push       rbp                                         ; Begin of unwind block (FDE at 0x1e4e8), CODE XREF=clone_quoting_options+40
0000000000009ac1         push       rbx
0000000000009ac2         mov        rbp, rdi
0000000000009ac5         mov        rdi, rsi
0000000000009ac8         mov        rbx, rsi
0000000000009acb         sub        rsp, 0x8
0000000000009acf         call       xmalloc                                     ; xmalloc
0000000000009ad4         add        rsp, 0x8
0000000000009ad8         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000009adb         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
0000000000009ade         pop        rbx
0000000000009adf         pop        rbp
0000000000009ae0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000009ae3         jmp        j_memcpy                                    ; memcpy
                        ; endp
0000000000009ae8         align      16                                          ; End of unwind block (FDE at 0x1e4e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
0000000000009af0         push       rbx                                         ; Begin of unwind block (FDE at 0x1e510)
0000000000009af1         mov        rbx, rdi
0000000000009af4         call       j_strlen                                    ; strlen
0000000000009af9         mov        rdi, rbx
0000000000009afc         lea        rsi, qword [rax+1]
0000000000009b00         pop        rbx
0000000000009b01         jmp        xmemdup                                     ; xmemdup
                        ; endp
0000000000009b03         align      16                                          ; End of unwind block (FDE at 0x1e510)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
0000000000009b10         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0x1e52c), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=main+4181, quotearg_n_options+422, trim2+1511, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41, xmem_cd_iconv+26
0000000000009b17         sub        rsp, 0x8
0000000000009b1b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009b20         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009b22         call       j_dcgettext                                 ; dcgettext
0000000000009b27         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
0000000000009b2d         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x1ba14
0000000000009b34         mov        rcx, rax
0000000000009b37         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000009b39         xor        eax, eax
0000000000009b3b         call       j_error                                     ; error
0000000000009b40         call       j_abort                                     ; abort
                        ; endp
0000000000009b45         align      16                                          ; End of unwind block (FDE at 0x1e52c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmem_cd_iconv:
0000000000009b50         push       rbx                                         ; Begin of unwind block (FDE at 0x1e544)
0000000000009b51         call       mem_cd_iconv                                ; mem_cd_iconv
0000000000009b56         test       eax, eax
0000000000009b58         mov        ebx, eax
0000000000009b5a         js         loc_9b60

                     loc_9b5c:
0000000000009b5c         mov        eax, ebx                                    ; CODE XREF=xmem_cd_iconv+24
0000000000009b5e         pop        rbx
0000000000009b5f         ret
                        ; endp

                     loc_9b60:
0000000000009b60         call       j___errno_location                          ; __errno_location, CODE XREF=xmem_cd_iconv+10
0000000000009b65         cmp        dword [rax], 0xc
0000000000009b68         jne        loc_9b5c

0000000000009b6a         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9b6f:
0000000000009b6f         nop                                                    ; End of unwind block (FDE at 0x1e544)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstr_cd_iconv:
0000000000009b70         push       rbx                                         ; Begin of unwind block (FDE at 0x1e560)
0000000000009b71         call       str_cd_iconv                                ; str_cd_iconv
0000000000009b76         test       rax, rax
0000000000009b79         mov        rbx, rax
0000000000009b7c         je         loc_9b88

                     loc_9b7e:
0000000000009b7e         mov        rax, rbx                                    ; CODE XREF=xstr_cd_iconv+32
0000000000009b81         pop        rbx
0000000000009b82         ret
                        ; endp
0000000000009b83         align      8

                     loc_9b88:
0000000000009b88         call       j___errno_location                          ; __errno_location, CODE XREF=xstr_cd_iconv+12
0000000000009b8d         cmp        dword [rax], 0xc
0000000000009b90         jne        loc_9b7e

0000000000009b92         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9b97:
0000000000009b97         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x1e560)
                     xstr_iconv:
0000000000009ba0         push       rbx                                         ; Begin of unwind block (FDE at 0x1e57c), CODE XREF=proper_name_utf8+309, proper_name_utf8+403
0000000000009ba1         call       str_iconv                                   ; str_iconv
0000000000009ba6         test       rax, rax
0000000000009ba9         mov        rbx, rax
0000000000009bac         je         loc_9bb8

                     loc_9bae:
0000000000009bae         mov        rax, rbx                                    ; CODE XREF=xstr_iconv+32
0000000000009bb1         pop        rbx
0000000000009bb2         ret
                        ; endp
0000000000009bb3         align      8

                     loc_9bb8:
0000000000009bb8         call       j___errno_location                          ; __errno_location, CODE XREF=xstr_iconv+12
0000000000009bbd         cmp        dword [rax], 0xc
0000000000009bc0         jne        loc_9bae

0000000000009bc2         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9bc7:
0000000000009bc7         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x1e57c)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoimax:
0000000000009bd0         push       r15                                         ; Begin of unwind block (FDE at 0x1e59c), CODE XREF=main+445, main+759
0000000000009bd2         push       r14
0000000000009bd4         push       r13
0000000000009bd6         push       r12
0000000000009bd8         push       rbp
0000000000009bd9         push       rbx
0000000000009bda         sub        rsp, 0x28
0000000000009bde         mov        rax, qword [fs:0x28]
0000000000009be7         mov        qword [rsp+0x58+var_40], rax
0000000000009bec         xor        eax, eax
0000000000009bee         cmp        edx, 0x24
0000000000009bf1         ja         loc_a25f

0000000000009bf7         lea        rax, qword [rsp+0x58+var_48]
0000000000009bfc         test       rsi, rsi
0000000000009bff         mov        rbx, rsi
0000000000009c02         mov        r12, rdi
0000000000009c05         mov        ebp, edx
0000000000009c07         mov        r14, rcx
0000000000009c0a         cmove      rbx, rax
0000000000009c0e         mov        r15, r8
0000000000009c11         call       j___errno_location                          ; __errno_location
0000000000009c16         xor        ecx, ecx
0000000000009c18         mov        edx, ebp
0000000000009c1a         mov        dword [rax], 0x0
0000000000009c20         mov        rsi, rbx
0000000000009c23         mov        rdi, r12
0000000000009c26         mov        r13, rax
0000000000009c29         call       j___strtol_internal                         ; __strtol_internal
0000000000009c2e         mov        rcx, qword [rbx]
0000000000009c31         mov        rbp, rax
0000000000009c34         cmp        rcx, r12
0000000000009c37         je         loc_9c98

0000000000009c39         mov        eax, dword [r13]
0000000000009c3d         test       eax, eax
0000000000009c3f         jne        loc_9c80

0000000000009c41         xor        r12d, r12d

                     loc_9c44:
0000000000009c44         test       r15, r15                                    ; CODE XREF=xstrtoimax+193
0000000000009c47         je         loc_9c56

0000000000009c49         movzx      r13d, byte [rcx]
0000000000009c4d         test       r13b, r13b
0000000000009c50         jne        loc_9cd3

                     loc_9c56:
0000000000009c56         mov        qword [r14], rbp                            ; CODE XREF=xstrtoimax+119, xstrtoimax+550

                     loc_9c59:
0000000000009c59         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoimax+185, xstrtoimax+227, xstrtoimax+249, xstrtoimax+383, xstrtoimax+1382
0000000000009c5e         xor        rdi, qword [fs:0x28]
0000000000009c67         mov        eax, r12d
0000000000009c6a         jne        loc_a27e

0000000000009c70         add        rsp, 0x28
0000000000009c74         pop        rbx
0000000000009c75         pop        rbp
0000000000009c76         pop        r12
0000000000009c78         pop        r13
0000000000009c7a         pop        r14
0000000000009c7c         pop        r15
0000000000009c7e         ret
                        ; endp
0000000000009c7f         align      128

                     loc_9c80:
0000000000009c80         cmp        eax, 0x22                                   ; CODE XREF=xstrtoimax+111
0000000000009c83         mov        r12d, 0x4
0000000000009c89         jne        loc_9c59

0000000000009c8b         mov        r12d, 0x1
0000000000009c91         jmp        loc_9c44
0000000000009c93         align      8

                     loc_9c98:
0000000000009c98         test       r15, r15                                    ; CODE XREF=xstrtoimax+103
0000000000009c9b         je         loc_a130

0000000000009ca1         movzx      r13d, byte [rcx]
0000000000009ca5         mov        qword [rsp+0x58+var_50], rcx
0000000000009caa         mov        r12d, 0x4
0000000000009cb0         test       r13b, r13b
0000000000009cb3         je         loc_9c59

0000000000009cb5         movsx      esi, r13b                                   ; argument "__c" for method j_strchr
0000000000009cb9         mov        rdi, r15                                    ; argument "__s" for method j_strchr
0000000000009cbc         call       j_strchr                                    ; strchr
0000000000009cc1         test       rax, rax
0000000000009cc4         mov        rcx, qword [rsp+0x58+var_50]
0000000000009cc9         je         loc_9c59

0000000000009ccb         mov        ebp, 0x1
0000000000009cd0         xor        r12d, r12d

                     loc_9cd3:
0000000000009cd3         movsx      esi, r13b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoimax+128
0000000000009cd7         mov        rdi, r15                                    ; argument "__s" for method j_strchr
0000000000009cda         mov        qword [rsp+0x58+var_50], rcx
0000000000009cdf         call       j_strchr                                    ; strchr
0000000000009ce4         test       rax, rax
0000000000009ce7         mov        rcx, qword [rsp+0x58+var_50]
0000000000009cec         je         loc_9d48

0000000000009cee         lea        eax, dword [r13-0x45]
0000000000009cf2         cmp        al, 0x2f
0000000000009cf4         ja         loc_9d58

0000000000009cf6         movabs     rdx, 0x814400308945
0000000000009d00         bt         rdx, rax
0000000000009d04         jae        loc_9d58

0000000000009d06         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
0000000000009d0b         mov        rdi, r15                                    ; argument "__s" for method j_strchr
0000000000009d0e         mov        qword [rsp+0x58+var_50], rcx
0000000000009d13         call       j_strchr                                    ; strchr
0000000000009d18         test       rax, rax
0000000000009d1b         mov        rcx, qword [rsp+0x58+var_50]
0000000000009d20         je         loc_9d58

0000000000009d22         movzx      eax, byte [rcx+1]
0000000000009d26         cmp        al, 0x44
0000000000009d28         je         loc_9d36

0000000000009d2a         cmp        al, 0x69
0000000000009d2c         je         loc_a218

0000000000009d32         cmp        al, 0x42
0000000000009d34         jne        loc_9d58

                     loc_9d36:
0000000000009d36         mov        edi, 0x2                                    ; CODE XREF=xstrtoimax+344
0000000000009d3b         mov        eax, 0x3e8
0000000000009d40         jmp        loc_9d62
0000000000009d42         align      8

                     loc_9d48:
0000000000009d48         mov        qword [r14], rbp                            ; case 52, CODE XREF=xstrtoimax+284, xstrtoimax+410, xstrtoimax+430
0000000000009d4b         or         r12d, 0x2
0000000000009d4f         jmp        loc_9c59
0000000000009d54         align      8

                     loc_9d58:
0000000000009d58         mov        edi, 0x1                                    ; CODE XREF=xstrtoimax+292, xstrtoimax+308, xstrtoimax+336, xstrtoimax+356
0000000000009d5d         mov        eax, 0x400

                     loc_9d62:
0000000000009d62         sub        r13d, 0x42                                  ; CODE XREF=xstrtoimax+368, xstrtoimax+1627
0000000000009d66         cmp        r13b, 0x35
0000000000009d6a         ja         loc_9d48

0000000000009d6c         lea        rsi, qword [switch_table_1c5e8]             ; switch_table_1c5e8
0000000000009d73         movzx      r13d, r13b
0000000000009d77         movsxd     rdx, dword [rsi+r13*4]
0000000000009d7b         add        rdx, rsi
0000000000009d7e         jmp        rdx                                         ; switch statement using table at 0x1c5e8, with 54 cases, 0x9d48,0x9d80,0x9de0,0x9e00,0x9e30,0x9e60,0x9ed0,0x9f40,0x9f80,0x9fe0,0xa048,0xa0b0,0xa0e0

                     loc_9d80:
0000000000009d80         movabs     r8, 0x8000000000000000                      ; case 43, CODE XREF=xstrtoimax+430
0000000000009d8a         movsxd     rsi, eax
0000000000009d8d         mov        rax, r8
0000000000009d90         cqo
0000000000009d92         idiv       rsi
0000000000009d95         cmp        rbp, rax
0000000000009d98         mov        r9, rax
0000000000009d9b         jl         loc_a245

0000000000009da1         movabs     r10, 0x7fffffffffffffff
0000000000009dab         mov        rax, r10
0000000000009dae         cqo
0000000000009db0         idiv       rsi
0000000000009db3         cmp        rbp, rax
0000000000009db6         jg         loc_a252

0000000000009dbc         imul       rbp, rsi
0000000000009dc0         cmp        r9, rbp
0000000000009dc3         jg         loc_a245

0000000000009dc9         cmp        rax, rbp
0000000000009dcc         jl         loc_a252

0000000000009dd2         imul       rbp, rsi
0000000000009dd6         xor        eax, eax

                     loc_9dd8:
0000000000009dd8         or         r12d, eax                                   ; CODE XREF=xstrtoimax+1661, xstrtoimax+1674
0000000000009ddb         nop        dword [rax+rax]

                     loc_9de0:
0000000000009de0         movsxd     rax, edi                                    ; case 33, CODE XREF=xstrtoimax+430, xstrtoimax+601, xstrtoimax+650, xstrtoimax+935, xstrtoimax+1027, xstrtoimax+1290, xstrtoimax+1408, xstrtoimax+1600
0000000000009de3         add        rcx, rax
0000000000009de6         mov        eax, r12d
0000000000009de9         or         eax, 0x2
0000000000009dec         mov        qword [rbx], rcx
0000000000009def         cmp        byte [rcx], 0x0
0000000000009df2         cmovne     r12d, eax
0000000000009df6         jmp        loc_9c56
0000000000009dfb         align      512

                     loc_9e00:
0000000000009e00         movabs     rax, 0xc000000000000000                     ; case 53, CODE XREF=xstrtoimax+430
0000000000009e0a         cmp        rbp, rax
0000000000009e0d         jl         loc_a140

0000000000009e13         movabs     rax, 0x3fffffffffffffff
0000000000009e1d         cmp        rbp, rax
0000000000009e20         jg         loc_a200

0000000000009e26         add        rbp, rbp
0000000000009e29         jmp        loc_9de0
0000000000009e2b         align      16

                     loc_9e30:
0000000000009e30         movabs     rax, 0xffc0000000000000                     ; case 32, CODE XREF=xstrtoimax+430
0000000000009e3a         cmp        rbp, rax
0000000000009e3d         jl         loc_a140

0000000000009e43         movabs     rax, 0x3fffffffffffff
0000000000009e4d         cmp        rbp, rax
0000000000009e50         jg         loc_a200

0000000000009e56         shl        rbp, 0x9
0000000000009e5a         jmp        loc_9de0
0000000000009e5c         align      32

                     loc_9e60:
0000000000009e60         movsxd     rsi, eax                                    ; case 24, CODE XREF=xstrtoimax+430
0000000000009e63         movabs     rax, 0x8000000000000000
0000000000009e6d         mov        r8d, 0x7
0000000000009e73         cqo
0000000000009e75         xor        r11d, r11d
0000000000009e78         movabs     r9, 0x7fffffffffffffff
0000000000009e82         idiv       rsi
0000000000009e85         mov        r10, rax
0000000000009e88         jmp        loc_9eaf
0000000000009e8a         align      16

                     loc_9e90:
0000000000009e90         mov        rax, r9                                     ; CODE XREF=xstrtoimax+738
0000000000009e93         cqo
0000000000009e95         idiv       rsi
0000000000009e98         cmp        rax, rbp
0000000000009e9b         jl         loc_a188

0000000000009ea1         imul       rbp, rsi

                     loc_9ea5:
0000000000009ea5         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+756, xstrtoimax+1480
0000000000009ea9         je         loc_9fd0

                     loc_9eaf:
0000000000009eaf         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+696
0000000000009eb2         jle        loc_9e90

0000000000009eb4         mov        r11d, 0x1
0000000000009eba         movabs     rbp, 0x8000000000000000
0000000000009ec4         jmp        loc_9ea5
0000000000009ec6         align      16

                     loc_9ed0:
0000000000009ed0         movsxd     rsi, eax                                    ; case 23, CODE XREF=xstrtoimax+430
0000000000009ed3         movabs     rax, 0x8000000000000000
0000000000009edd         mov        r8d, 0x8
0000000000009ee3         cqo
0000000000009ee5         xor        r11d, r11d
0000000000009ee8         movabs     r9, 0x7fffffffffffffff
0000000000009ef2         idiv       rsi
0000000000009ef5         mov        r10, rax
0000000000009ef8         jmp        loc_9f1f
0000000000009efa         align      256

                     loc_9f00:
0000000000009f00         mov        rax, r9                                     ; CODE XREF=xstrtoimax+850
0000000000009f03         cqo
0000000000009f05         idiv       rsi
0000000000009f08         cmp        rax, rbp
0000000000009f0b         jl         loc_a158

0000000000009f11         imul       rbp, rsi

                     loc_9f15:
0000000000009f15         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+868, xstrtoimax+1432
0000000000009f19         je         loc_9fd0

                     loc_9f1f:
0000000000009f1f         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+808
0000000000009f22         jle        loc_9f00

0000000000009f24         mov        r11d, 0x1
0000000000009f2a         movabs     rbp, 0x8000000000000000
0000000000009f34         jmp        loc_9f15
0000000000009f36         align      64

                     loc_9f40:
0000000000009f40         movabs     r8, 0x8000000000000000                      ; case 41, CODE XREF=xstrtoimax+430
0000000000009f4a         movsxd     rsi, eax
0000000000009f4d         mov        rax, r8
0000000000009f50         cqo
0000000000009f52         idiv       rsi
0000000000009f55         cmp        rbp, rax
0000000000009f58         jl         loc_a140

0000000000009f5e         sub        r8, 0x1
0000000000009f62         mov        rax, r8
0000000000009f65         cqo
0000000000009f67         idiv       rsi
0000000000009f6a         cmp        rbp, rax
0000000000009f6d         jg         loc_a200

0000000000009f73         imul       rbp, rsi
0000000000009f77         jmp        loc_9de0
0000000000009f7c         align      128

                     loc_9f80:
0000000000009f80         movsxd     rsi, eax                                    ; case 37, CODE XREF=xstrtoimax+430
0000000000009f83         movabs     rax, 0x8000000000000000
0000000000009f8d         mov        r8d, 0x3
0000000000009f93         cqo
0000000000009f95         xor        r11d, r11d
0000000000009f98         movabs     r9, 0x7fffffffffffffff
0000000000009fa2         idiv       rsi
0000000000009fa5         mov        r10, rax

                     loc_9fa8:
0000000000009fa8         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1018
0000000000009fab         jg         loc_a1a0

0000000000009fb1         mov        rax, r9
0000000000009fb4         cqo
0000000000009fb6         idiv       rsi
0000000000009fb9         cmp        rax, rbp
0000000000009fbc         jl         loc_a230

0000000000009fc2         imul       rbp, rsi

                     loc_9fc6:
0000000000009fc6         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1504, xstrtoimax+1648
0000000000009fca         jne        loc_9fa8

0000000000009fcc         nop        dword [rax]

                     loc_9fd0:
0000000000009fd0         or         r12d, r11d                                  ; CODE XREF=xstrtoimax+729, xstrtoimax+841, xstrtoimax+1113, xstrtoimax+1217, xstrtoimax+1368
0000000000009fd3         jmp        loc_9de0
0000000000009fd8         align      32

                     loc_9fe0:
0000000000009fe0         movsxd     rsi, eax                                    ; case 3, CODE XREF=xstrtoimax+430
0000000000009fe3         movabs     rax, 0x8000000000000000
0000000000009fed         mov        r8d, 0x6
0000000000009ff3         cqo
0000000000009ff5         xor        r11d, r11d
0000000000009ff8         movabs     r9, 0x7fffffffffffffff
000000000000a002         idiv       rsi
000000000000a005         mov        r10, rax
000000000000a008         jmp        loc_a02b
000000000000a00a         align      16

                     loc_a010:
000000000000a010         mov        rax, r9                                     ; CODE XREF=xstrtoimax+1118
000000000000a013         cqo
000000000000a015         idiv       rsi
000000000000a018         cmp        rax, rbp
000000000000a01b         jl         loc_a1b8

000000000000a021         imul       rbp, rsi

                     loc_a025:
000000000000a025         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1136, xstrtoimax+1528
000000000000a029         je         loc_9fd0

                     loc_a02b:
000000000000a02b         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1080
000000000000a02e         jle        loc_a010

000000000000a030         mov        r11d, 0x1
000000000000a036         movabs     rbp, 0x8000000000000000
000000000000a040         jmp        loc_a025
000000000000a042         align      8

                     loc_a048:
000000000000a048         movsxd     rsi, eax                                    ; case 14, CODE XREF=xstrtoimax+430
000000000000a04b         movabs     rax, 0x8000000000000000
000000000000a055         mov        r8d, 0x5
000000000000a05b         cqo
000000000000a05d         xor        r11d, r11d
000000000000a060         movabs     r9, 0x7fffffffffffffff
000000000000a06a         idiv       rsi
000000000000a06d         mov        r10, rax
000000000000a070         jmp        loc_a097
000000000000a072         align      8

                     loc_a078:
000000000000a078         mov        rax, r9                                     ; CODE XREF=xstrtoimax+1226
000000000000a07b         cqo
000000000000a07d         idiv       rsi
000000000000a080         cmp        rax, rbp
000000000000a083         jl         loc_a1d0

000000000000a089         imul       rbp, rsi

                     loc_a08d:
000000000000a08d         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1244, xstrtoimax+1552
000000000000a091         je         loc_9fd0

                     loc_a097:
000000000000a097         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1184
000000000000a09a         jle        loc_a078

000000000000a09c         mov        r11d, 0x1
000000000000a0a2         movabs     rbp, 0x8000000000000000
000000000000a0ac         jmp        loc_a08d
000000000000a0ae         align      16

                     loc_a0b0:
000000000000a0b0         movabs     rax, 0xffe0000000000000                     ; case 0, CODE XREF=xstrtoimax+430
000000000000a0ba         cmp        rbp, rax
000000000000a0bd         jl         loc_a140

000000000000a0c3         movabs     rax, 0x1fffffffffffff
000000000000a0cd         cmp        rbp, rax
000000000000a0d0         jg         loc_a200

000000000000a0d6         shl        rbp, 0xa
000000000000a0da         jmp        loc_9de0
000000000000a0df         align      32

                     loc_a0e0:
000000000000a0e0         movsxd     rsi, eax                                    ; case 50, CODE XREF=xstrtoimax+430
000000000000a0e3         movabs     rax, 0x8000000000000000
000000000000a0ed         mov        r8d, 0x4
000000000000a0f3         cqo
000000000000a0f5         xor        r11d, r11d
000000000000a0f8         movabs     r9, 0x7fffffffffffffff
000000000000a102         idiv       rsi
000000000000a105         mov        r10, rax

                     loc_a108:
000000000000a108         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1366
000000000000a10b         jg         loc_a170

000000000000a10d         mov        rax, r9
000000000000a110         cqo
000000000000a112         idiv       rsi
000000000000a115         cmp        rax, rbp
000000000000a118         jl         loc_a1e8

000000000000a11e         imul       rbp, rsi

                     loc_a122:
000000000000a122         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1456, xstrtoimax+1576
000000000000a126         jne        loc_a108

000000000000a128         jmp        loc_9fd0
000000000000a12d         align      16

                     loc_a130:
000000000000a130         mov        r12d, 0x4                                   ; CODE XREF=xstrtoimax+203
000000000000a136         jmp        loc_9c59
000000000000a13b         align      64

                     loc_a140:
000000000000a140         mov        r12d, 0x1                                   ; CODE XREF=xstrtoimax+573, xstrtoimax+621, xstrtoimax+904, xstrtoimax+1261
000000000000a146         movabs     rbp, 0x8000000000000000
000000000000a150         jmp        loc_9de0
000000000000a155         align      8

                     loc_a158:
000000000000a158         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+827
000000000000a15e         movabs     rbp, 0x7fffffffffffffff
000000000000a168         jmp        loc_9f15
000000000000a16d         align      16

                     loc_a170:
000000000000a170         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1339
000000000000a176         movabs     rbp, 0x8000000000000000
000000000000a180         jmp        loc_a122
000000000000a182         align      8

                     loc_a188:
000000000000a188         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+715
000000000000a18e         movabs     rbp, 0x7fffffffffffffff
000000000000a198         jmp        loc_9ea5
000000000000a19d         align      32

                     loc_a1a0:
000000000000a1a0         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+987
000000000000a1a6         movabs     rbp, 0x8000000000000000
000000000000a1b0         jmp        loc_9fc6
000000000000a1b5         align      8

                     loc_a1b8:
000000000000a1b8         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1099
000000000000a1be         movabs     rbp, 0x7fffffffffffffff
000000000000a1c8         jmp        loc_a025
000000000000a1cd         align      16

                     loc_a1d0:
000000000000a1d0         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1203
000000000000a1d6         movabs     rbp, 0x7fffffffffffffff
000000000000a1e0         jmp        loc_a08d
000000000000a1e5         align      8

                     loc_a1e8:
000000000000a1e8         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1352
000000000000a1ee         movabs     rbp, 0x7fffffffffffffff
000000000000a1f8         jmp        loc_a122
000000000000a1fd         align      512

                     loc_a200:
000000000000a200         mov        r12d, 0x1                                   ; CODE XREF=xstrtoimax+592, xstrtoimax+640, xstrtoimax+925, xstrtoimax+1280
000000000000a206         movabs     rbp, 0x7fffffffffffffff
000000000000a210         jmp        loc_9de0
000000000000a215         align      8

                     loc_a218:
000000000000a218         xor        edi, edi                                    ; CODE XREF=xstrtoimax+348
000000000000a21a         cmp        byte [rcx+2], 0x42
000000000000a21e         mov        eax, 0x400
000000000000a223         sete       dil
000000000000a227         lea        edi, dword [rdi+rdi+1]
000000000000a22b         jmp        loc_9d62

                     loc_a230:
000000000000a230         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1004
000000000000a236         movabs     rbp, 0x7fffffffffffffff
000000000000a240         jmp        loc_9fc6

                     loc_a245:
000000000000a245         mov        eax, 0x1                                    ; CODE XREF=xstrtoimax+459, xstrtoimax+499
000000000000a24a         mov        rbp, r8
000000000000a24d         jmp        loc_9dd8

                     loc_a252:
000000000000a252         mov        eax, 0x1                                    ; CODE XREF=xstrtoimax+486, xstrtoimax+508
000000000000a257         mov        rbp, r10
000000000000a25a         jmp        loc_9dd8

                     loc_a25f:
000000000000a25f         lea        rcx, qword [__PRETTY_FUNCTION__.4162]       ; argument "__function" for method j___assert_fail, "xstrtoimax", CODE XREF=xstrtoimax+33
000000000000a266         lea        rsi, qword [aCoreutils831li_1c5a0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
000000000000a26d         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
000000000000a274         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
000000000000a279         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_a27e:
000000000000a27e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoimax+154
                        ; endp
000000000000a283         align      16                                          ; End of unwind block (FDE at 0x1e59c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
000000000000a290         push       r12                                         ; Begin of unwind block (FDE at 0x1e5ec), CODE XREF=internal_read_file+57, close_stream+21
000000000000a292         push       rbp
000000000000a293         push       rbx
000000000000a294         mov        rbx, rdi
000000000000a297         call       j_fileno                                    ; fileno
000000000000a29c         test       eax, eax
000000000000a29e         mov        rdi, rbx
000000000000a2a1         js         loc_a2f7

000000000000a2a3         call       j___freading                                ; __freading
000000000000a2a8         test       eax, eax
000000000000a2aa         jne        loc_a2d8

                     loc_a2ac:
000000000000a2ac         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
000000000000a2af         call       rpl_fflush                                  ; rpl_fflush
000000000000a2b4         test       eax, eax
000000000000a2b6         je         loc_a2f4

000000000000a2b8         call       j___errno_location                          ; __errno_location
000000000000a2bd         mov        r12d, dword [rax]
000000000000a2c0         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
000000000000a2c3         mov        rbp, rax
000000000000a2c6         call       j_fclose                                    ; fclose
000000000000a2cb         test       r12d, r12d
000000000000a2ce         jne        loc_a300

                     loc_a2d0:
000000000000a2d0         pop        rbx                                         ; CODE XREF=rpl_fclose+121
000000000000a2d1         pop        rbp
000000000000a2d2         pop        r12
000000000000a2d4         ret
                        ; endp
000000000000a2d5         align      8

                     loc_a2d8:
000000000000a2d8         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
000000000000a2db         call       j_fileno                                    ; fileno
000000000000a2e0         xor        esi, esi                                    ; argument "__offset" for method j_lseek
000000000000a2e2         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
000000000000a2e7         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000a2e9         call       j_lseek                                     ; lseek
000000000000a2ee         cmp        rax, 0xffffffffffffffff
000000000000a2f2         jne        loc_a2ac

                     loc_a2f4:
000000000000a2f4         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_a2f7:
000000000000a2f7         pop        rbx                                         ; CODE XREF=rpl_fclose+17
000000000000a2f8         pop        rbp
000000000000a2f9         pop        r12
000000000000a2fb         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_a300:
000000000000a300         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
000000000000a304         mov        eax, 0xffffffff
000000000000a309         jmp        loc_a2d0
000000000000a30b         align      16                                          ; End of unwind block (FDE at 0x1e5ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
000000000000a310         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x1e624), CODE XREF=rpl_fclose+31
000000000000a313         push       rbx
000000000000a314         mov        rbx, rdi
000000000000a317         je         loc_a32a

000000000000a319         call       j___freading                                ; __freading
000000000000a31e         test       eax, eax
000000000000a320         je         loc_a32a

000000000000a322         test       dword [rbx], 0x100
000000000000a328         jne        loc_a338

                     loc_a32a:
000000000000a32a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
000000000000a32d         pop        rbx
000000000000a32e         jmp        j_fflush                                    ; fflush
                        ; endp
000000000000a333         align      8

                     loc_a338:
000000000000a338         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
000000000000a33b         mov        edx, 0x1
000000000000a340         xor        esi, esi
000000000000a342         call       rpl_fseeko                                  ; rpl_fseeko
000000000000a347         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
000000000000a34a         pop        rbx
000000000000a34b         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
000000000000a350         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0x1e624), Begin of unwind block (FDE at 0x1e644), CODE XREF=rpl_fflush+50
000000000000a354         cmp        qword [rdi+0x10], rax
000000000000a358         je         loc_a360

                     j_j_fseeko:        // fseeko
000000000000a35a         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
000000000000a35f         align      32

                     loc_a360:
000000000000a360         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
000000000000a364         cmp        qword [rdi+0x28], rax
000000000000a368         jne        j_j_fseeko                                  ; fseeko

000000000000a36a         cmp        qword [rdi+0x48], 0x0
000000000000a36f         jne        j_j_fseeko                                  ; fseeko

000000000000a371         push       r12
000000000000a373         push       rbp
000000000000a374         mov        r12d, edx
000000000000a377         push       rbx
000000000000a378         mov        rbp, rsi
000000000000a37b         mov        rbx, rdi
000000000000a37e         call       j_fileno                                    ; fileno
000000000000a383         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
000000000000a386         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
000000000000a389         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000a38b         call       j_lseek                                     ; lseek
000000000000a390         cmp        rax, 0xffffffffffffffff
000000000000a394         je         loc_a3a2

000000000000a396         and        dword [rbx], 0xffffffef
000000000000a399         mov        qword [rbx+0x90], rax
000000000000a3a0         xor        eax, eax

                     loc_a3a2:
000000000000a3a2         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
000000000000a3a3         pop        rbp
000000000000a3a4         pop        r12
000000000000a3a6         ret
                        ; endp
000000000000a3a7         align      16                                          ; End of unwind block (FDE at 0x1e644)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
000000000000a3b0         push       r13                                         ; Begin of unwind block (FDE at 0x1e674), CODE XREF=mbsstr_trimmed_wordbounded+464, mbsstr_trimmed_wordbounded+1076, mbsstr_trimmed_wordbounded+1480, mbsstr_trimmed_wordbounded+1918, mbsstr_trimmed_wordbounded+2080, sub_7550+534, trim2+652, trim2+1087, build_wcs_buffer+111, build_wcs_upper_buffer+231, build_wcs_upper_buffer+608
000000000000a3b2         push       r12
000000000000a3b4         mov        r13, rsi
000000000000a3b7         push       rbp
000000000000a3b8         push       rbx
000000000000a3b9         mov        rbx, rdi
000000000000a3bc         mov        r12, rdx
000000000000a3bf         sub        rsp, 0x18
000000000000a3c3         mov        rax, qword [fs:0x28]
000000000000a3cc         mov        qword [rsp+0x38+var_30], rax
000000000000a3d1         xor        eax, eax
000000000000a3d3         lea        rax, qword [rsp+0x38+var_34]
000000000000a3d8         test       rdi, rdi
000000000000a3db         cmove      rbx, rax
000000000000a3df         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
000000000000a3e2         call       j_mbrtowc                                   ; mbrtowc
000000000000a3e7         cmp        rax, 0xfffffffffffffffd
000000000000a3eb         mov        rbp, rax
000000000000a3ee         jbe        loc_a410

000000000000a3f0         test       r12, r12
000000000000a3f3         je         loc_a410

000000000000a3f5         xor        edi, edi
000000000000a3f7         call       hard_locale                                 ; hard_locale
000000000000a3fc         test       al, al
000000000000a3fe         jne        loc_a410

000000000000a400         movzx      eax, byte [r13]
000000000000a405         mov        ebp, 0x1
000000000000a40a         mov        dword [rbx], eax
000000000000a40c         nop        dword [rax]

                     loc_a410:
000000000000a410         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
000000000000a415         xor        rdx, qword [fs:0x28]
000000000000a41e         mov        rax, rbp
000000000000a421         jne        loc_a42e

000000000000a423         add        rsp, 0x18
000000000000a427         pop        rbx
000000000000a428         pop        rbp
000000000000a429         pop        r12
000000000000a42b         pop        r13
000000000000a42d         ret
                        ; endp

                     loc_a42e:
000000000000a42e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
000000000000a433         align      64                                          ; End of unwind block (FDE at 0x1e674)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     peek_token_bracket:
000000000000a440         mov        rax, qword [rsi+0x48]                       ; Begin of unwind block (FDE at 0x1e6b4), CODE XREF=parse_bracket_element.constprop.37+507, sub_15b10+84, sub_15b10+295, sub_15b10+1382, sub_15b10+1566, sub_15b10+1659
000000000000a444         cmp        qword [rsi+0x68], rax
000000000000a448         jle        loc_a4a0

000000000000a44a         mov        r8, qword [rsi+8]
000000000000a44e         cmp        dword [rsi+0x90], 0x1
000000000000a455         movzx      ecx, byte [r8+rax]
000000000000a45a         mov        byte [rdi], cl
000000000000a45c         jle        loc_a473

000000000000a45e         cmp        rax, qword [rsi+0x30]
000000000000a462         je         loc_a473

000000000000a464         mov        r9, qword [rsi+0x10]
000000000000a468         cmp        dword [r9+rax*4], 0xffffffff
000000000000a46d         je         loc_a4ef

                     loc_a473:
000000000000a473         cmp        cl, 0x5c                                    ; CODE XREF=peek_token_bracket+28, peek_token_bracket+34
000000000000a476         je         loc_a4e0

000000000000a478         cmp        cl, 0x5b
000000000000a47b         je         loc_a4b0

000000000000a47d         cmp        cl, 0x5d
000000000000a480         je         loc_a520

000000000000a486         cmp        cl, 0x5e
000000000000a489         je         loc_a510

000000000000a48f         cmp        cl, 0x2d
000000000000a492         jne        loc_a4ef

000000000000a494         mov        byte [rdi+8], 0x16
000000000000a498         mov        eax, 0x1
000000000000a49d         ret
                        ; endp
000000000000a49e         align      32

                     loc_a4a0:
000000000000a4a0         mov        byte [rdi+8], 0x2                           ; CODE XREF=peek_token_bracket+8
000000000000a4a4         xor        eax, eax
000000000000a4a6         ret
                        ; endp
000000000000a4a7         align      16

                     loc_a4b0:
000000000000a4b0         lea        rcx, qword [rax+1]                          ; CODE XREF=peek_token_bracket+59
000000000000a4b4         cmp        rcx, qword [rsi+0x58]
000000000000a4b8         jge        loc_a500

000000000000a4ba         movzx      eax, byte [r8+rax+1]
000000000000a4c0         cmp        al, 0x3a
000000000000a4c2         mov        byte [rdi], al
000000000000a4c4         je         loc_a560

000000000000a4ca         cmp        al, 0x3d
000000000000a4cc         je         loc_a550

000000000000a4d2         cmp        al, 0x2e
000000000000a4d4         jne        loc_a500

000000000000a4d6         mov        byte [rdi+8], 0x1a
000000000000a4da         mov        eax, 0x2
000000000000a4df         ret
                        ; endp

                     loc_a4e0:
000000000000a4e0         and        edx, 0x1                                    ; CODE XREF=peek_token_bracket+54
000000000000a4e3         je         loc_a4ef

000000000000a4e5         lea        rdx, qword [rax+1]
000000000000a4e9         cmp        rdx, qword [rsi+0x58]
000000000000a4ed         jl         loc_a530

                     loc_a4ef:
000000000000a4ef         mov        byte [rdi+8], 0x1                           ; CODE XREF=peek_token_bracket+45, peek_token_bracket+82, peek_token_bracket+163
000000000000a4f3         mov        eax, 0x1
000000000000a4f8         ret
                        ; endp
000000000000a4f9         align      256

                     loc_a500:
000000000000a500         mov        byte [rdi+8], 0x1                           ; CODE XREF=peek_token_bracket+120, peek_token_bracket+148, peek_token_bracket+291
000000000000a504         mov        byte [rdi], 0x5b
000000000000a507         mov        eax, 0x1
000000000000a50c         ret
                        ; endp
000000000000a50d         align      16

                     loc_a510:
000000000000a510         mov        byte [rdi+8], 0x19                          ; CODE XREF=peek_token_bracket+73
000000000000a514         mov        eax, 0x1
000000000000a519         ret
                        ; endp
000000000000a51a         align      32

                     loc_a520:
000000000000a520         mov        byte [rdi+8], 0x15                          ; CODE XREF=peek_token_bracket+64
000000000000a524         mov        eax, 0x1
000000000000a529         ret
                        ; endp
000000000000a52a         align      16

                     loc_a530:
000000000000a530         mov        qword [rsi+0x48], rdx                       ; CODE XREF=peek_token_bracket+173
000000000000a534         movzx      eax, byte [r8+rax+1]
000000000000a53a         mov        byte [rdi+8], 0x1
000000000000a53e         mov        byte [rdi], al
000000000000a540         mov        eax, 0x1
000000000000a545         ret
                        ; endp
000000000000a546         align      16

                     loc_a550:
000000000000a550         mov        byte [rdi+8], 0x1c                          ; CODE XREF=peek_token_bracket+140
000000000000a554         mov        eax, 0x2
000000000000a559         ret
                        ; endp
000000000000a55a         align      32

                     loc_a560:
000000000000a560         and        edx, 0x4                                    ; CODE XREF=peek_token_bracket+132
000000000000a563         je         loc_a500

000000000000a565         mov        byte [rdi+8], 0x1e
000000000000a569         mov        eax, 0x2
000000000000a56e         ret
                        ; endp
000000000000a56f         align      16                                          ; End of unwind block (FDE at 0x1e6b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mark_opt_subexp:
000000000000a570         cmp        byte [rsi+0x30], 0x11                       ; Begin of unwind block (FDE at 0x1e6c8), DATA XREF=sub_153a0+1284
000000000000a574         je         loc_a580

                     loc_a576:
000000000000a576         xor        eax, eax                                    ; CODE XREF=mark_opt_subexp+20
000000000000a578         ret
                        ; endp
000000000000a579         align      128

                     loc_a580:
000000000000a580         cmp        rdi, qword [rsi+0x28]                       ; CODE XREF=mark_opt_subexp+4
000000000000a584         jne        loc_a576

000000000000a586         or         byte [rsi+0x32], 0x8
000000000000a58a         xor        eax, eax
000000000000a58c         ret
                        ; endp
000000000000a58d         align      16                                          ; End of unwind block (FDE at 0x1e6c8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_52: int16_t, -82
        ;    var_58: int32_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120


                     check_dst_limits_calc_pos_1:
000000000000a590         push       r15                                         ; Begin of unwind block (FDE at 0x1e6dc), CODE XREF=check_dst_limits_calc_pos_1+349, check_dst_limits_calc_pos+88
000000000000a592         push       r14
000000000000a594         mov        r9, rdx
000000000000a597         push       r13
000000000000a599         push       r12
000000000000a59b         lea        rdx, qword [rcx+rcx*2]
000000000000a59f         push       rbp
000000000000a5a0         push       rbx
000000000000a5a1         mov        r15d, esi
000000000000a5a4         sub        rsp, 0x48
000000000000a5a8         mov        r14, qword [rdi+0x98]
000000000000a5af         mov        qword [rsp+0x78+var_78], rdi
000000000000a5b3         mov        rax, qword [r14+0x30]
000000000000a5b7         lea        r12, qword [rax+rdx*8]
000000000000a5bb         cmp        qword [r12+8], 0x0
000000000000a5c1         jle        loc_a755

000000000000a5c7         lea        rax, qword [r8+r8*4]
000000000000a5cb         mov        r11, rcx
000000000000a5ce         mov        ecx, r9d
000000000000a5d1         mov        r10, r8
000000000000a5d4         xor        ebx, ebx
000000000000a5d6         mov        dword [rsp+0x78+var_58], esi
000000000000a5da         shl        rax, 0x3
000000000000a5de         mov        r15, r9
000000000000a5e1         mov        qword [rsp+0x78+var_68], r11
000000000000a5e6         mov        qword [rsp+0x78+var_50], rax
000000000000a5eb         mov        eax, 0x1
000000000000a5f0         shl        rax, cl
000000000000a5f3         mov        qword [rsp+0x78+var_60], rax
000000000000a5f8         not        eax
000000000000a5fa         mov        word [rsp+0x78+var_52], ax
000000000000a5ff         mov        eax, esi
000000000000a601         and        eax, 0x1
000000000000a604         mov        dword [rsp+0x78+var_6C], eax
000000000000a608         mov        eax, esi
000000000000a60a         and        eax, 0x2
000000000000a60d         mov        dword [rsp+0x78+var_70], eax
000000000000a611         jmp        loc_a635
000000000000a613         align      8

                     loc_a618:
000000000000a618         cmp        dl, 0x9                                     ; CODE XREF=check_dst_limits_calc_pos_1+191
000000000000a61b         je         loc_a770

000000000000a621         cmp        dl, 0x4
000000000000a624         je         loc_a678

                     loc_a626:
000000000000a626         add        rbx, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos_1+199, check_dst_limits_calc_pos_1+204, check_dst_limits_calc_pos_1+236, check_dst_limits_calc_pos_1+486, check_dst_limits_calc_pos_1+495
000000000000a62a         cmp        qword [r12+8], rbx
000000000000a62f         jle        loc_a750

                     loc_a635:
000000000000a635         mov        rax, qword [r12+0x10]                       ; CODE XREF=check_dst_limits_calc_pos_1+129, check_dst_limits_calc_pos_1+436
000000000000a63a         mov        rbp, qword [rax+rbx*8]
000000000000a63e         mov        rax, rbp
000000000000a641         shl        rax, 0x4
000000000000a645         add        rax, qword [r14]
000000000000a648         movzx      edx, byte [rax+8]
000000000000a64c         cmp        dl, 0x8
000000000000a64f         jne        loc_a618

000000000000a651         mov        ecx, dword [rsp+0x78+var_6C]
000000000000a655         test       ecx, ecx
000000000000a657         je         loc_a626

000000000000a659         cmp        qword [rax], r15
000000000000a65c         jne        loc_a626

                     loc_a65e:
000000000000a65e         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+357
000000000000a662         mov        eax, 0xffffffff
000000000000a667         pop        rbx
000000000000a668         pop        rbp
000000000000a669         pop        r12
000000000000a66b         pop        r13
000000000000a66d         pop        r14
000000000000a66f         pop        r15
000000000000a671         ret
                        ; endp
000000000000a672         align      8

                     loc_a678:
000000000000a678         cmp        r10, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits_calc_pos_1+148
000000000000a67c         je         loc_a626

000000000000a67e         mov        rax, qword [rsp+0x78+var_78]
000000000000a682         mov        r13, qword [rsp+0x78+var_50]
000000000000a687         mov        rdi, rbp
000000000000a68a         mov        qword [rsp+0x78+var_48], r12
000000000000a68f         mov        qword [rsp+0x78+var_40], rbx
000000000000a694         mov        r12, r10
000000000000a697         add        r13, qword [rax+0xd8]
000000000000a69e         lea        rax, qword [rbp+rbp*2]
000000000000a6a3         mov        rbp, r14
000000000000a6a6         mov        r14, rdi
000000000000a6a9         shl        rax, 0x3
000000000000a6ad         mov        rbx, rax

                     loc_a6b0:
000000000000a6b0         cmp        qword [r13], r14                            ; CODE XREF=check_dst_limits_calc_pos_1+409
000000000000a6b4         jne        loc_a720

000000000000a6b6         cmp        r15, 0x3f
000000000000a6ba         jg         loc_a6c8

000000000000a6bc         movzx      eax, word [r13+0x22]
000000000000a6c1         test       qword [rsp+0x78+var_60], rax
000000000000a6c6         je         loc_a720

                     loc_a6c8:
000000000000a6c8         mov        rax, qword [rbp+0x28]                       ; CODE XREF=check_dst_limits_calc_pos_1+298
000000000000a6cc         mov        rax, qword [rax+rbx+0x10]
000000000000a6d1         mov        rcx, qword [rax]
000000000000a6d4         cmp        qword [rsp+0x78+var_68], rcx
000000000000a6d9         je         loc_a7a0

000000000000a6df         mov        esi, dword [rsp+0x78+var_58]
000000000000a6e3         mov        rdi, qword [rsp+0x78+var_78]
000000000000a6e7         mov        r8, r12
000000000000a6ea         mov        rdx, r15
000000000000a6ed         call       check_dst_limits_calc_pos_1                 ; check_dst_limits_calc_pos_1
000000000000a6f2         cmp        eax, 0xffffffff
000000000000a6f5         je         loc_a65e

000000000000a6fb         test       eax, eax
000000000000a6fd         jne        loc_a707

000000000000a6ff         mov        esi, dword [rsp+0x78+var_70]
000000000000a703         test       esi, esi
000000000000a705         jne        loc_a785

                     loc_a707:
000000000000a707         cmp        r15, 0x3f                                   ; CODE XREF=check_dst_limits_calc_pos_1+365
000000000000a70b         jg         loc_a720

000000000000a70d         movzx      eax, word [rsp+0x78+var_52]
000000000000a712         and        word [r13+0x22], ax
000000000000a717         nop        word [rax+rax]

                     loc_a720:
000000000000a720         add        r13, 0x28                                   ; CODE XREF=check_dst_limits_calc_pos_1+292, check_dst_limits_calc_pos_1+310, check_dst_limits_calc_pos_1+379
000000000000a724         cmp        byte [r13-8], 0x0
000000000000a729         jne        loc_a6b0

000000000000a72b         mov        rbx, qword [rsp+0x78+var_40]
000000000000a730         mov        r10, r12
000000000000a733         mov        r12, qword [rsp+0x78+var_48]
000000000000a738         mov        r14, rbp
000000000000a73b         add        rbx, 0x1
000000000000a73f         cmp        qword [r12+8], rbx
000000000000a744         jg         loc_a635

000000000000a74a         nop        word [rax+rax]

                     loc_a750:
000000000000a750         mov        r15d, dword [rsp+0x78+var_58]               ; CODE XREF=check_dst_limits_calc_pos_1+159

                     loc_a755:
000000000000a755         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+49
000000000000a759         mov        eax, r15d
000000000000a75c         pop        rbx
000000000000a75d         sar        eax, 0x1
000000000000a75f         pop        rbp
000000000000a760         pop        r12
000000000000a762         pop        r13
000000000000a764         pop        r14
000000000000a766         pop        r15
000000000000a768         ret
                        ; endp
000000000000a769         align      16

                     loc_a770:
000000000000a770         mov        edx, dword [rsp+0x78+var_70]                ; CODE XREF=check_dst_limits_calc_pos_1+139
000000000000a774         test       edx, edx
000000000000a776         je         loc_a626

000000000000a77c         cmp        qword [rax], r15
000000000000a77f         jne        loc_a626

                     loc_a785:
000000000000a785         add        rsp, 0x48                                   ; CODE XREF=check_dst_limits_calc_pos_1+373
000000000000a789         xor        eax, eax
000000000000a78b         pop        rbx
000000000000a78c         pop        rbp
000000000000a78d         pop        r12
000000000000a78f         pop        r13
000000000000a791         pop        r14
000000000000a793         pop        r15
000000000000a795         ret
                        ; endp
000000000000a796         align      32

                     loc_a7a0:
000000000000a7a0         mov        r15d, dword [rsp+0x78+var_58]               ; CODE XREF=check_dst_limits_calc_pos_1+329
000000000000a7a5         add        rsp, 0x48
000000000000a7a9         pop        rbx
000000000000a7aa         pop        rbp
000000000000a7ab         mov        eax, r15d
000000000000a7ae         and        eax, 0x1
000000000000a7b1         pop        r12
000000000000a7b3         neg        eax
000000000000a7b5         pop        r13
000000000000a7b7         pop        r14
000000000000a7b9         pop        r15
000000000000a7bb         ret
                        ; endp
000000000000a7bc         align      64                                          ; End of unwind block (FDE at 0x1e6dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_dst_limits_calc_pos:
000000000000a7c0         mov        rax, qword [rdi+0xd8]                       ; Begin of unwind block (FDE at 0x1e770), CODE XREF=check_dst_limits.isra.13+430, check_dst_limits.isra.13+464
000000000000a7c7         lea        rsi, qword [rsi+rsi*4]
000000000000a7cb         lea        rax, qword [rax+rsi*8]
000000000000a7cf         mov        r10, qword [rax+0x10]
000000000000a7d3         cmp        r10, r8
000000000000a7d6         jg         loc_a820

000000000000a7d8         mov        rax, qword [rax+0x18]
000000000000a7dc         cmp        rax, r8
000000000000a7df         jl         loc_a800

000000000000a7e1         xor        esi, esi
000000000000a7e3         cmp        r10, r8
000000000000a7e6         sete       sil
000000000000a7ea         or         esi, 0x2
000000000000a7ed         cmp        rax, r8
000000000000a7f0         je         loc_a815

000000000000a7f2         xor        eax, eax
000000000000a7f4         cmp        r10, r8
000000000000a7f7         je         loc_a810

000000000000a7f9         ret
                        ; endp
000000000000a7fb         align      2048

                     loc_a800:
000000000000a800         mov        eax, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos+31
000000000000a805         ret
                        ; endp
000000000000a806         align      16

                     loc_a810:
000000000000a810         mov        esi, 0x1                                    ; CODE XREF=check_dst_limits_calc_pos+55

                     loc_a815:
000000000000a815         mov        r8, r9                                      ; CODE XREF=check_dst_limits_calc_pos+48
000000000000a818         jmp        check_dst_limits_calc_pos_1                 ; check_dst_limits_calc_pos_1
                        ; endp
000000000000a81d         align      32

                     loc_a820:
000000000000a820         mov        eax, 0xffffffff                             ; CODE XREF=check_dst_limits_calc_pos+22
000000000000a825         ret
                        ; endp
000000000000a826         align      16                                          ; End of unwind block (FDE at 0x1e770)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     postorder:
000000000000a830         push       r12                                         ; Begin of unwind block (FDE at 0x1e784), CODE XREF=sub_153a0+93, sub_153a0+776, sub_153a0+1033, sub_153a0+1127, sub_153a0+1294, parse_branch+325, parse_branch+348, parse_branch+368, parse_reg_exp+317, re_compile_internal+1645, re_compile_internal+1672
000000000000a832         mov        r12, rsi
000000000000a835         push       rbp
000000000000a836         mov        rbp, rdx
000000000000a839         push       rbx
000000000000a83a         mov        rbx, rdi
000000000000a83d         jmp        loc_a843
000000000000a83f         align      64

                     loc_a840:
000000000000a840         mov        rbx, rax                                    ; CODE XREF=postorder+26, postorder+35, postorder+87

                     loc_a843:
000000000000a843         mov        rax, qword [rbx+8]                          ; CODE XREF=postorder+13
000000000000a847         test       rax, rax
000000000000a84a         jne        loc_a840

000000000000a84c         mov        rax, qword [rbx+0x10]
000000000000a850         test       rax, rax
000000000000a853         jne        loc_a840

000000000000a855         mov        rsi, rbx
000000000000a858         mov        rdi, rbp
000000000000a85b         call       r12
000000000000a85e         test       eax, eax
000000000000a860         jne        loc_a896

000000000000a862         nop        word [rax+rax]

                     loc_a868:
000000000000a868         mov        rdx, qword [rbx]                            ; CODE XREF=postorder+100
000000000000a86b         test       rdx, rdx
000000000000a86e         je         loc_a896

000000000000a870         mov        rax, qword [rdx+0x10]
000000000000a874         cmp        rax, rbx
000000000000a877         mov        rbx, rdx
000000000000a87a         sete       sil
000000000000a87e         test       rax, rax
000000000000a881         sete       cl
000000000000a884         or         sil, cl
000000000000a887         je         loc_a840

000000000000a889         mov        rsi, rbx
000000000000a88c         mov        rdi, rbp
000000000000a88f         call       r12
000000000000a892         test       eax, eax
000000000000a894         je         loc_a868

                     loc_a896:
000000000000a896         pop        rbx                                         ; CODE XREF=postorder+48, postorder+62
000000000000a897         pop        rbp
000000000000a898         pop        r12
000000000000a89a         ret
                        ; endp
000000000000a89b         align      32                                          ; End of unwind block (FDE at 0x1e784)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     preorder:
000000000000a8a0         push       r12                                         ; Begin of unwind block (FDE at 0x1e7b0), CODE XREF=re_compile_internal+1563, re_compile_internal+1699
000000000000a8a2         mov        r12, rsi
000000000000a8a5         push       rbp
000000000000a8a6         mov        rbp, rdx
000000000000a8a9         push       rbx
000000000000a8aa         mov        rbx, rdi
000000000000a8ad         jmp        loc_a8b3
000000000000a8af         align      16

                     loc_a8b0:
000000000000a8b0         mov        rbx, rdx                                    ; CODE XREF=preorder+41, preorder+63

                     loc_a8b3:
000000000000a8b3         mov        rsi, rbx                                    ; CODE XREF=preorder+13
000000000000a8b6         mov        rdi, rbp
000000000000a8b9         call       r12
000000000000a8bc         test       eax, eax
000000000000a8be         jne        loc_a8ec

000000000000a8c0         mov        rdx, qword [rbx+8]
000000000000a8c4         xor        ecx, ecx
000000000000a8c6         test       rdx, rdx
000000000000a8c9         jne        loc_a8b0

000000000000a8cb         jmp        loc_a8d3
000000000000a8cd         align      16

                     loc_a8d0:
000000000000a8d0         mov        rbx, rdx                                    ; CODE XREF=preorder+74

                     loc_a8d3:
000000000000a8d3         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=preorder+43
000000000000a8d7         cmp        rdx, rcx
000000000000a8da         je         loc_a8e1

000000000000a8dc         test       rdx, rdx
000000000000a8df         jne        loc_a8b0

                     loc_a8e1:
000000000000a8e1         mov        rdx, qword [rbx]                            ; CODE XREF=preorder+58
000000000000a8e4         mov        rcx, rbx
000000000000a8e7         test       rdx, rdx
000000000000a8ea         jne        loc_a8d0

                     loc_a8ec:
000000000000a8ec         pop        rbx                                         ; CODE XREF=preorder+30
000000000000a8ed         pop        rbp
000000000000a8ee         pop        r12
000000000000a8f0         ret
                        ; endp
000000000000a8f1         align      256                                         ; End of unwind block (FDE at 0x1e7b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_realloc_buffers:
000000000000a900         push       rbp                                         ; Begin of unwind block (FDE at 0x1e7dc), CODE XREF=extend_buffers+56, re_search_internal+587, re_compile_internal+789, re_compile_internal+1757
000000000000a901         push       rbx
000000000000a902         mov        rbp, rsi
000000000000a905         mov        rbx, rdi
000000000000a908         sub        rsp, 0x8
000000000000a90c         cmp        dword [rdi+0x90], 0x1
000000000000a913         jle        loc_a95d

000000000000a915         movabs     rax, 0x1fffffffffffffff
000000000000a91f         cmp        rsi, rax
000000000000a922         ja         loc_a990

000000000000a924         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_realloc
000000000000a928         lea        rsi, qword [rsi*4]                          ; argument "__size" for method j_realloc
000000000000a930         call       j_realloc                                   ; realloc
000000000000a935         test       rax, rax
000000000000a938         je         loc_a990

000000000000a93a         mov        rdi, qword [rbx+0x18]
000000000000a93e         mov        qword [rbx+0x10], rax
000000000000a942         test       rdi, rdi
000000000000a945         je         loc_a95d

000000000000a947         lea        rsi, qword [rbp*8]                          ; argument "__size" for method j_realloc
000000000000a94f         call       j_realloc                                   ; realloc
000000000000a954         test       rax, rax
000000000000a957         je         loc_a990

000000000000a959         mov        qword [rbx+0x18], rax

                     loc_a95d:
000000000000a95d         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_realloc_buffers+19, re_string_realloc_buffers+69
000000000000a964         jne        loc_a978

                     loc_a966:
000000000000a966         mov        qword [rbx+0x40], rbp                       ; CODE XREF=re_string_realloc_buffers+141
000000000000a96a         add        rsp, 0x8
000000000000a96e         xor        eax, eax
000000000000a970         pop        rbx
000000000000a971         pop        rbp
000000000000a972         ret
                        ; endp
000000000000a973         align      8

                     loc_a978:
000000000000a978         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_realloc, CODE XREF=re_string_realloc_buffers+100
000000000000a97c         mov        rsi, rbp                                    ; argument "__size" for method j_realloc
000000000000a97f         call       j_realloc                                   ; realloc
000000000000a984         test       rax, rax
000000000000a987         je         loc_a990

000000000000a989         mov        qword [rbx+8], rax
000000000000a98d         jmp        loc_a966
000000000000a98f         align      16

                     loc_a990:
000000000000a990         add        rsp, 0x8                                    ; CODE XREF=re_string_realloc_buffers+34, re_string_realloc_buffers+56, re_string_realloc_buffers+87, re_string_realloc_buffers+135
000000000000a994         mov        eax, 0xc
000000000000a999         pop        rbx
000000000000a99a         pop        rbp
000000000000a99b         ret
                        ; endp
000000000000a99c         align      32                                          ; End of unwind block (FDE at 0x1e7dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_insert_last:
000000000000a9a0         push       rbp                                         ; Begin of unwind block (FDE at 0x1e810), CODE XREF=register_state+117, sub_17480+481
000000000000a9a1         push       rbx
000000000000a9a2         mov        rbp, rsi
000000000000a9a5         mov        rbx, rdi
000000000000a9a8         sub        rsp, 0x8
000000000000a9ac         mov        rsi, qword [rdi+8]
000000000000a9b0         cmp        qword [rdi], rsi
000000000000a9b3         mov        rax, qword [rdi+0x10]
000000000000a9b7         je         loc_a9d8

                     loc_a9b9:
000000000000a9b9         lea        rdx, qword [rsi+1]                          ; CODE XREF=re_node_set_insert_last+92
000000000000a9bd         mov        qword [rbx+8], rdx
000000000000a9c1         mov        qword [rax+rsi*8], rbp
000000000000a9c5         mov        eax, 0x1

                     loc_a9ca:
000000000000a9ca         add        rsp, 0x8                                    ; CODE XREF=re_node_set_insert_last+98
000000000000a9ce         pop        rbx
000000000000a9cf         pop        rbp
000000000000a9d0         ret
                        ; endp
000000000000a9d1         align      8

                     loc_a9d8:
000000000000a9d8         add        rsi, 0x1                                    ; CODE XREF=re_node_set_insert_last+23
000000000000a9dc         lea        rdx, qword [rsi+rsi]
000000000000a9e0         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
000000000000a9e4         mov        qword [rdi], rdx
000000000000a9e7         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000000a9ea         call       j_realloc                                   ; realloc
000000000000a9ef         test       rax, rax
000000000000a9f2         je         loc_aa00

000000000000a9f4         mov        qword [rbx+0x10], rax
000000000000a9f8         mov        rsi, qword [rbx+8]
000000000000a9fc         jmp        loc_a9b9
000000000000a9fe         align      512

                     loc_aa00:
000000000000aa00         xor        eax, eax                                    ; CODE XREF=re_node_set_insert_last+82
000000000000aa02         jmp        loc_a9ca
000000000000aa04         align      16                                          ; End of unwind block (FDE at 0x1e810)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_insert:
000000000000aa10         push       rbp                                         ; Begin of unwind block (FDE at 0x1e83c), CODE XREF=duplicate_node_closure+224, duplicate_node_closure+282, duplicate_node_closure+352, duplicate_node_closure+465, duplicate_node_closure+607, check_arrival_expand_ecl_sub+84, check_arrival_expand_ecl_sub+148, calc_eclosure_iter+360, calc_eclosure_iter+495, expand_bkref_cache+409, build_trtable+1657
000000000000aa11         push       rbx
000000000000aa12         mov        rbp, rsi
000000000000aa15         mov        rbx, rdi
000000000000aa18         sub        rsp, 0x8
000000000000aa1c         mov        rdx, qword [rdi]
000000000000aa1f         test       rdx, rdx
000000000000aa22         je         loc_aa48

000000000000aa24         mov        rsi, qword [rdi+8]
000000000000aa28         mov        rax, qword [rdi+0x10]
000000000000aa2c         test       rsi, rsi
000000000000aa2f         jne        loc_aa80

000000000000aa31         mov        qword [rax], rbp
000000000000aa34         add        qword [rdi+8], 0x1
000000000000aa39         mov        eax, 0x1

                     loc_aa3e:
000000000000aa3e         add        rsp, 0x8                                    ; CODE XREF=re_node_set_insert+177, re_node_set_insert+247, re_node_set_insert+295
000000000000aa42         pop        rbx
000000000000aa43         pop        rbp
000000000000aa44         ret
                        ; endp
000000000000aa45         align      8

                     loc_aa48:
000000000000aa48         mov        qword [rdi], 0x1                            ; CODE XREF=re_node_set_insert+18
000000000000aa4f         mov        qword [rdi+8], 0x1
000000000000aa57         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
000000000000aa5c         call       j_malloc                                    ; malloc
000000000000aa61         test       rax, rax
000000000000aa64         mov        qword [rbx+0x10], rax
000000000000aa68         je         loc_aaf8

000000000000aa6e         mov        qword [rax], rbp
000000000000aa71         add        rsp, 0x8
000000000000aa75         mov        eax, 0x1
000000000000aa7a         pop        rbx
000000000000aa7b         pop        rbp
000000000000aa7c         ret
                        ; endp
000000000000aa7d         align      128

                     loc_aa80:
000000000000aa80         cmp        rdx, rsi                                    ; CODE XREF=re_node_set_insert+31
000000000000aa83         je         loc_ab10

                     loc_aa89:
000000000000aa89         cmp        qword [rax], rbp                            ; CODE XREF=re_node_set_insert+288
000000000000aa8c         lea        rdx, qword [rsi*8]
000000000000aa94         jle        loc_aad0

000000000000aa96         test       rsi, rsi
000000000000aa99         jle        loc_aab3

000000000000aa9b         add        rdx, rax
000000000000aa9e         nop

                     loc_aaa0:
000000000000aaa0         mov        rcx, qword [rdx-8]                          ; CODE XREF=re_node_set_insert+159
000000000000aaa4         sub        rdx, 0x8
000000000000aaa8         mov        qword [rdx+8], rcx
000000000000aaac         cmp        rax, rdx
000000000000aaaf         jne        loc_aaa0

000000000000aab1         xor        edx, edx

                     loc_aab3:
000000000000aab3         mov        qword [rax+rdx], rbp                        ; CODE XREF=re_node_set_insert+137, re_node_set_insert+200, re_node_set_insert+226
000000000000aab7         mov        eax, 0x1
000000000000aabc         add        qword [rbx+8], 0x1
000000000000aac1         jmp        loc_aa3e
000000000000aac6         align      16

                     loc_aad0:
000000000000aad0         mov        rcx, qword [rax+rdx-8]                      ; CODE XREF=re_node_set_insert+132
000000000000aad5         cmp        rbp, rcx
000000000000aad8         jge        loc_aab3

000000000000aada         nop        word [rax+rax]

                     loc_aae0:
000000000000aae0         mov        qword [rax+rdx], rcx                        ; CODE XREF=re_node_set_insert+224
000000000000aae4         sub        rdx, 0x8
000000000000aae8         mov        rcx, qword [rax+rdx-8]
000000000000aaed         cmp        rcx, rbp
000000000000aaf0         jg         loc_aae0

000000000000aaf2         jmp        loc_aab3
000000000000aaf4         align      8

                     loc_aaf8:
000000000000aaf8         mov        qword [rbx+8], 0x0                          ; CODE XREF=re_node_set_insert+88
000000000000ab00         mov        qword [rbx], 0x0
000000000000ab07         jmp        loc_aa3e
000000000000ab0c         align      16

                     loc_ab10:
000000000000ab10         lea        rdx, qword [rsi+rsi]                        ; CODE XREF=re_node_set_insert+115
000000000000ab14         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
000000000000ab18         mov        qword [rdi], rdx
000000000000ab1b         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000000ab1e         call       j_realloc                                   ; realloc
000000000000ab23         test       rax, rax
000000000000ab26         je         loc_ab35

000000000000ab28         mov        qword [rbx+0x10], rax
000000000000ab2c         mov        rsi, qword [rbx+8]
000000000000ab30         jmp        loc_aa89

                     loc_ab35:
000000000000ab35         xor        eax, eax                                    ; CODE XREF=re_node_set_insert+278
000000000000ab37         jmp        loc_aa3e
000000000000ab3c         align      64                                          ; End of unwind block (FDE at 0x1e83c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     register_state:
000000000000ab40         push       r14                                         ; Begin of unwind block (FDE at 0x1e874), CODE XREF=re_acquire_state_context+513, re_acquire_state+390
000000000000ab42         push       r13
000000000000ab44         mov        r14, rdi
000000000000ab47         push       r12
000000000000ab49         push       rbp
000000000000ab4a         mov        r12, rdx
000000000000ab4d         push       rbx
000000000000ab4e         mov        rbx, qword [rsi+0x10]
000000000000ab52         mov        rbp, rsi
000000000000ab55         mov        qword [rsi], rdx
000000000000ab58         mov        qword [rsi+0x28], 0x0
000000000000ab60         lea        r13, qword [rsi+0x20]
000000000000ab64         lea        rdi, qword [rbx*8]                          ; argument "__size" for method j_malloc
000000000000ab6c         mov        qword [rsi+0x20], rbx
000000000000ab70         call       j_malloc                                    ; malloc
000000000000ab75         test       rax, rax
000000000000ab78         mov        qword [rbp+0x30], rax
000000000000ab7c         je         loc_abbe

000000000000ab7e         test       rbx, rbx
000000000000ab81         jle        loc_abd0

000000000000ab83         xor        ebx, ebx
000000000000ab85         jmp        loc_ab9a
000000000000ab87         align      16

                     loc_ab90:
000000000000ab90         add        rbx, 0x1                                    ; CODE XREF=register_state+112, register_state+124
000000000000ab94         cmp        qword [rbp+0x10], rbx
000000000000ab98         jle        loc_abd0

                     loc_ab9a:
000000000000ab9a         mov        rax, qword [rbp+0x18]                       ; CODE XREF=register_state+69
000000000000ab9e         mov        rsi, qword [rax+rbx*8]
000000000000aba2         mov        rax, rsi
000000000000aba5         shl        rax, 0x4
000000000000aba9         add        rax, qword [r14]
000000000000abac         test       byte [rax+8], 0x8
000000000000abb0         jne        loc_ab90

000000000000abb2         mov        rdi, r13
000000000000abb5         call       re_node_set_insert_last                     ; re_node_set_insert_last
000000000000abba         test       al, al
000000000000abbc         jne        loc_ab90

                     loc_abbe:
000000000000abbe         pop        rbx                                         ; CODE XREF=register_state+60, register_state+217
000000000000abbf         mov        eax, 0xc
000000000000abc4         pop        rbp
000000000000abc5         pop        r12
000000000000abc7         pop        r13
000000000000abc9         pop        r14
000000000000abcb         ret
                        ; endp
000000000000abcc         align      16

                     loc_abd0:
000000000000abd0         and        r12, qword [r14+0x88]                       ; CODE XREF=register_state+65, register_state+88
000000000000abd7         mov        rax, qword [r14+0x40]
000000000000abdb         lea        rdx, qword [r12+r12*2]
000000000000abdf         lea        rbx, qword [rax+rdx*8]
000000000000abe3         mov        rdx, qword [rbx]
000000000000abe6         cmp        qword [rbx+8], rdx
000000000000abea         mov        rax, qword [rbx+0x10]
000000000000abee         lea        rsi, qword [rdx+1]
000000000000abf2         jle        loc_ac06

                     loc_abf4:
000000000000abf4         mov        qword [rbx], rsi                            ; CODE XREF=register_state+234
000000000000abf7         mov        qword [rax+rdx*8], rbp
000000000000abfb         xor        eax, eax
000000000000abfd         pop        rbx
000000000000abfe         pop        rbp
000000000000abff         pop        r12
000000000000ac01         pop        r13
000000000000ac03         pop        r14
000000000000ac05         ret
                        ; endp

                     loc_ac06:
000000000000ac06         lea        r12, qword [rsi+rsi]                        ; CODE XREF=register_state+178
000000000000ac0a         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000000ac0d         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
000000000000ac11         call       j_realloc                                   ; realloc
000000000000ac16         test       rax, rax
000000000000ac19         je         loc_abbe

000000000000ac1b         mov        rdx, qword [rbx]
000000000000ac1e         mov        qword [rbx+0x10], rax
000000000000ac22         mov        qword [rbx+8], r12
000000000000ac26         lea        rsi, qword [rdx+1]
000000000000ac2a         jmp        loc_abf4
000000000000ac2c         align      16                                          ; End of unwind block (FDE at 0x1e874)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     build_upper_buffer:
000000000000ac30         push       r12                                         ; Begin of unwind block (FDE at 0x1e8c4), CODE XREF=extend_buffers+320, re_string_reconstruct+1651, sub_17480+1344
000000000000ac32         mov        r12, qword [rdi+0x58]
000000000000ac36         cmp        qword [rdi+0x40], r12
000000000000ac3a         push       rbp
000000000000ac3b         mov        rbp, rdi
000000000000ac3e         cmovle     r12, qword [rdi+0x40]
000000000000ac43         push       rbx
000000000000ac44         mov        rbx, qword [rdi+0x30]
000000000000ac48         cmp        r12, rbx
000000000000ac4b         jle        loc_ac85

000000000000ac4d         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc
000000000000ac52         nop        word [rax+rax]

                     loc_ac58:
000000000000ac58         mov        rdx, qword [rbp]                            ; CODE XREF=build_upper_buffer+83
000000000000ac5c         mov        rcx, qword [rbp+0x78]
000000000000ac60         add        rdx, rbx
000000000000ac63         add        rdx, qword [rbp+0x28]
000000000000ac67         test       rcx, rcx
000000000000ac6a         movzx      edx, byte [rdx]
000000000000ac6d         jne        loc_ac98

                     loc_ac6f:
000000000000ac6f         mov        rsi, qword [rax]                            ; CODE XREF=build_upper_buffer+108
000000000000ac72         mov        rcx, qword [rbp+8]
000000000000ac76         mov        edx, dword [rsi+rdx*4]
000000000000ac79         mov        byte [rcx+rbx], dl
000000000000ac7c         add        rbx, 0x1
000000000000ac80         cmp        r12, rbx
000000000000ac83         jne        loc_ac58

                     loc_ac85:
000000000000ac85         mov        qword [rbp+0x30], rbx                       ; CODE XREF=build_upper_buffer+27
000000000000ac89         mov        qword [rbp+0x38], rbx
000000000000ac8d         pop        rbx
000000000000ac8e         pop        rbp
000000000000ac8f         pop        r12
000000000000ac91         ret
                        ; endp
000000000000ac92         align      8

                     loc_ac98:
000000000000ac98         movzx      edx, byte [rcx+rdx]                         ; CODE XREF=build_upper_buffer+61
000000000000ac9c         jmp        loc_ac6f
000000000000ac9e         align      32                                          ; End of unwind block (FDE at 0x1e8c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_88: int8_t, -136
        ;    var_8C: int32_t, -140


                     build_wcs_buffer:
000000000000aca0         push       r15                                         ; Begin of unwind block (FDE at 0x1e8f4), CODE XREF=extend_buffers+275, re_string_reconstruct+424, sub_17480+1021
000000000000aca2         push       r14
000000000000aca4         push       r13
000000000000aca6         push       r12
000000000000aca8         push       rbp
000000000000aca9         push       rbx
000000000000acaa         mov        rbx, rdi
000000000000acad         sub        rsp, 0x68
000000000000acb1         mov        r12, qword [rdi+0x58]
000000000000acb5         mov        rbp, qword [rdi+0x30]
000000000000acb9         mov        rax, qword [fs:0x28]
000000000000acc2         mov        qword [rsp+0x98+var_40], rax
000000000000acc7         xor        eax, eax
000000000000acc9         cmp        qword [rdi+0x40], r12
000000000000accd         cmovle     r12, qword [rdi+0x40]
000000000000acd2         cmp        r12, rbp
000000000000acd5         jle        loc_ad64

000000000000acdb         lea        r14, qword [rdi+0x20]
000000000000acdf         lea        r13, qword [rsp+0x98+var_8C]
000000000000ace4         nop        dword [rax]

                     loc_ace8:
000000000000ace8         mov        rdi, qword [rbx+0x78]                       ; CODE XREF=build_wcs_buffer+194, build_wcs_buffer+246
000000000000acec         mov        rdx, r12
000000000000acef         mov        r15, qword [rbx+0x20]
000000000000acf3         sub        rdx, rbp
000000000000acf6         test       rdi, rdi
000000000000acf9         jne        loc_ade0

000000000000acff         mov        rsi, qword [rbx+0x28]
000000000000ad03         add        rsi, rbp
000000000000ad06         add        rsi, qword [rbx]

                     loc_ad09:
000000000000ad09         mov        rcx, r14                                    ; CODE XREF=build_wcs_buffer+337, build_wcs_buffer+359, build_wcs_buffer+413
000000000000ad0c         mov        rdi, r13
000000000000ad0f         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000ad14         lea        rdx, qword [rax-1]
000000000000ad18         cmp        rdx, 0xfffffffffffffffd
000000000000ad1c         ja         loc_adb0

000000000000ad22         cmp        rax, 0xfffffffffffffffe
000000000000ad26         mov        edx, dword [rsp+0x98+var_8C]
000000000000ad2a         je         loc_ada0

                     loc_ad2c:
000000000000ad2c         mov        rcx, qword [rbx+0x10]                       ; CODE XREF=build_wcs_buffer+311
000000000000ad30         lea        rsi, qword [rbp+1]
000000000000ad34         lea        rdi, qword [rbp*4]
000000000000ad3c         mov        dword [rcx+rbp*4], edx
000000000000ad3f         add        rbp, rax
000000000000ad42         cmp        rsi, rbp
000000000000ad45         jge        loc_ad90

000000000000ad47         lea        rdx, qword [rcx+rdi+4]
000000000000ad4c         lea        rax, qword [rcx+rbp*4]

                     loc_ad50:
000000000000ad50         mov        dword [rdx], 0xffffffff                     ; CODE XREF=build_wcs_buffer+189
000000000000ad56         add        rdx, 0x4
000000000000ad5a         cmp        rax, rdx
000000000000ad5d         jne        loc_ad50

000000000000ad5f         cmp        rbp, r12
000000000000ad62         jl         loc_ace8

                     loc_ad64:
000000000000ad64         mov        rax, qword [rsp+0x98+var_40]                ; CODE XREF=build_wcs_buffer+53, build_wcs_buffer+252, build_wcs_buffer+428
000000000000ad69         xor        rax, qword [fs:0x28]
000000000000ad72         mov        qword [rbx+0x30], rbp
000000000000ad76         mov        qword [rbx+0x38], rbp
000000000000ad7a         jne        loc_ae5e

000000000000ad80         add        rsp, 0x68
000000000000ad84         pop        rbx
000000000000ad85         pop        rbp
000000000000ad86         pop        r12
000000000000ad88         pop        r13
000000000000ad8a         pop        r14
000000000000ad8c         pop        r15
000000000000ad8e         ret
                        ; endp
000000000000ad8f         align      16

                     loc_ad90:
000000000000ad90         mov        rbp, rsi                                    ; CODE XREF=build_wcs_buffer+165
000000000000ad93         cmp        rbp, r12
000000000000ad96         jl         loc_ace8

000000000000ad9c         jmp        loc_ad64
000000000000ad9e         align      32

                     loc_ada0:
000000000000ada0         mov        rax, qword [rbx+0x58]                       ; CODE XREF=build_wcs_buffer+138
000000000000ada4         cmp        qword [rbx+0x40], rax
000000000000ada8         jl         loc_ae48

000000000000adae         nop

                     loc_adb0:
000000000000adb0         mov        rax, qword [rbx]                            ; CODE XREF=build_wcs_buffer+124
000000000000adb3         mov        rcx, qword [rbx+0x78]
000000000000adb7         add        rax, rbp
000000000000adba         add        rax, qword [rbx+0x28]
000000000000adbe         test       rcx, rcx
000000000000adc1         movzx      edx, byte [rax]
000000000000adc4         mov        dword [rsp+0x98+var_8C], edx
000000000000adc8         jne        loc_ae51

                     loc_adce:
000000000000adce         mov        qword [rbx+0x20], r15                       ; CODE XREF=build_wcs_buffer+441
000000000000add2         mov        eax, 0x1
000000000000add7         jmp        loc_ad2c
000000000000addc         align      32

                     loc_ade0:
000000000000ade0         mov        ecx, dword [rbx+0x90]                       ; CODE XREF=build_wcs_buffer+89
000000000000ade6         xor        eax, eax
000000000000ade8         lea        rsi, qword [rsp+0x98+var_88]
000000000000aded         test       ecx, ecx
000000000000adef         jg         loc_ae11

000000000000adf1         jmp        loc_ad09
000000000000adf6         align      512

                     loc_ae00:
000000000000ae00         add        rax, 0x1                                    ; CODE XREF=build_wcs_buffer+411
000000000000ae04         cmp        rdx, rax
000000000000ae07         je         loc_ad09

000000000000ae0d         mov        rdi, qword [rbx+0x78]

                     loc_ae11:
000000000000ae11         mov        rcx, qword [rbx]                            ; CODE XREF=build_wcs_buffer+335
000000000000ae14         add        rcx, rbp
000000000000ae17         add        rcx, rax
000000000000ae1a         add        rcx, qword [rbx+0x28]
000000000000ae1e         movzx      ecx, byte [rcx]
000000000000ae21         movzx      ecx, byte [rdi+rcx]
000000000000ae25         mov        rdi, qword [rbx+8]
000000000000ae29         add        rdi, rbp
000000000000ae2c         mov        byte [rdi+rax], cl
000000000000ae2f         mov        byte [rsi+rax], cl
000000000000ae32         lea        ecx, dword [rax+1]
000000000000ae35         cmp        ecx, dword [rbx+0x90]
000000000000ae3b         jl         loc_ae00

000000000000ae3d         jmp        loc_ad09
000000000000ae42         align      8

                     loc_ae48:
000000000000ae48         mov        qword [rbx+0x20], r15                       ; CODE XREF=build_wcs_buffer+264
000000000000ae4c         jmp        loc_ad64

                     loc_ae51:
000000000000ae51         movzx      edx, byte [rcx+rdx]                         ; CODE XREF=build_wcs_buffer+296
000000000000ae55         mov        dword [rsp+0x98+var_8C], edx
000000000000ae59         jmp        loc_adce

                     loc_ae5e:
000000000000ae5e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_wcs_buffer+218
                        ; endp
000000000000ae63         align      16                                          ; End of unwind block (FDE at 0x1e8f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_88: int8_t, -136
        ;    var_90: int64_t, -144
        ;    var_94: int32_t, -148
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208


                     build_wcs_upper_buffer:
000000000000ae70         push       r15                                         ; Begin of unwind block (FDE at 0x1e940), CODE XREF=extend_buffers+149, re_string_reconstruct+298, re_compile_internal+724
000000000000ae72         push       r14
000000000000ae74         mov        r14, rdi
000000000000ae77         push       r13
000000000000ae79         push       r12
000000000000ae7b         push       rbp
000000000000ae7c         push       rbx
000000000000ae7d         sub        rsp, 0xa8
000000000000ae84         mov        rbx, qword [rdi+0x58]
000000000000ae88         mov        r15, qword [rdi+0x30]
000000000000ae8c         mov        rax, qword [fs:0x28]
000000000000ae95         mov        qword [rsp+0xd8+var_40], rax
000000000000ae9d         xor        eax, eax
000000000000ae9f         cmp        qword [rdi+0x40], rbx
000000000000aea3         cmovle     rbx, qword [rdi+0x40]
000000000000aea8         cmp        byte [rdi+0x8a], 0x0
000000000000aeaf         jne        loc_aebc

000000000000aeb1         cmp        qword [rdi+0x78], 0x0
000000000000aeb6         je         loc_b040

                     loc_aebc:
000000000000aebc         mov        r13, qword [r14+0x38]                       ; CODE XREF=build_wcs_upper_buffer+63, build_wcs_upper_buffer+471

                     loc_aec0:
000000000000aec0         cmp        r15, rbx                                    ; CODE XREF=build_wcs_upper_buffer+408, build_wcs_upper_buffer+450, build_wcs_upper_buffer+1169, build_wcs_upper_buffer+1184, build_wcs_upper_buffer+1459
000000000000aec3         jl         loc_af00

                     loc_aec5:
000000000000aec5         mov        qword [r14+0x30], r15                       ; CODE XREF=build_wcs_upper_buffer+1233
000000000000aec9         mov        qword [r14+0x38], r13
000000000000aecd         xor        eax, eax

                     loc_aecf:
000000000000aecf         mov        rcx, qword [rsp+0xd8+var_40]                ; CODE XREF=build_wcs_upper_buffer+898, build_wcs_upper_buffer+1515
000000000000aed7         xor        rcx, qword [fs:0x28]
000000000000aee0         jne        loc_b46a

000000000000aee6         add        rsp, 0xa8
000000000000aeed         pop        rbx
000000000000aeee         pop        rbp
000000000000aeef         pop        r12
000000000000aef1         pop        r13
000000000000aef3         pop        r14
000000000000aef5         pop        r15
000000000000aef7         ret
                        ; endp
000000000000aef8         align      256

                     loc_af00:
000000000000af00         lea        rax, qword [r14+0x20]                       ; CODE XREF=build_wcs_upper_buffer+83
000000000000af04         mov        qword [rsp+0xd8+var_D0], rax
000000000000af09         mov        rax, rbx
000000000000af0c         sub        rax, r15
000000000000af0f         mov        qword [rsp+0xd8+var_C8], rax
000000000000af14         lea        rax, qword [rsp+0xd8+var_94]
000000000000af19         mov        qword [rsp+0xd8+var_B8], rax

                     loc_af1e:
000000000000af1e         mov        rdx, qword [r14+0x78]                       ; CODE XREF=build_wcs_upper_buffer+1051
000000000000af22         mov        rax, qword [r14+0x20]
000000000000af26         test       rdx, rdx
000000000000af29         mov        qword [rsp+0xd8+var_90], rax
000000000000af2e         jne        loc_b239

000000000000af34         mov        rbp, qword [r14+0x28]
000000000000af38         add        rbp, r13
000000000000af3b         add        rbp, qword [r14]
000000000000af3e         mov        qword [rsp+0xd8+var_C0], rbp

                     loc_af43:
000000000000af43         mov        rcx, qword [rsp+0xd8+var_D0]                ; CODE XREF=build_wcs_upper_buffer+1040
000000000000af48         mov        rdx, qword [rsp+0xd8+var_C8]
000000000000af4d         mov        rsi, qword [rsp+0xd8+var_C0]
000000000000af52         mov        rdi, qword [rsp+0xd8+var_B8]
000000000000af57         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000af5c         mov        rbp, rax
000000000000af5f         lea        rax, qword [rax-1]
000000000000af63         cmp        rax, 0xfffffffffffffffc
000000000000af67         mov        qword [rsp+0xd8+var_B8], rax
000000000000af6c         ja         loc_b2a9

000000000000af72         mov        edx, dword [rsp+0xd8+var_94]
000000000000af76         mov        edi, edx                                    ; argument "__wc" for method j_towupper
000000000000af78         mov        dword [rsp+0xd8+var_C8], edx
000000000000af7c         call       j_towupper                                  ; towupper
000000000000af81         mov        edx, dword [rsp+0xd8+var_C8]
000000000000af85         mov        r12d, eax
000000000000af88         mov        qword [rsp+0xd8+var_D0], r15
000000000000af8d         cmp        edx, eax
000000000000af8f         je         loc_b290

000000000000af95         lea        rcx, qword [rsp+0xd8+var_88]
000000000000af9a         lea        rdx, qword [rsp+0xd8+var_90]                ; argument "__ps" for method j_wcrtomb
000000000000af9f         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
000000000000afa1         mov        rdi, rcx                                    ; argument "__s" for method j_wcrtomb
000000000000afa4         mov        qword [rsp+0xd8+var_C8], rcx
000000000000afa9         call       j_wcrtomb                                   ; wcrtomb
000000000000afae         cmp        rbp, rax
000000000000afb1         mov        r11, rax
000000000000afb4         mov        rcx, qword [rsp+0xd8+var_C8]
000000000000afb9         jne        loc_b346

000000000000afbf         mov        rdi, qword [r14+8]
000000000000afc3         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
000000000000afc6         mov        rsi, rcx                                    ; argument "__src" for method j_memcpy
000000000000afc9         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
000000000000afcc         call       j_memcpy                                    ; memcpy

                     loc_afd1:
000000000000afd1         cmp        byte [r14+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+1076
000000000000afd9         lea        rax, qword [rbp+r13]
000000000000afde         jne        loc_b315

                     loc_afe4:
000000000000afe4         add        r15, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+1219
000000000000afe8         mov        rsi, qword [rsp+0xd8+var_D0]
000000000000afed         mov        rdx, qword [r14+0x10]
000000000000aff1         lea        rcx, qword [r15+rbp-1]
000000000000aff6         mov        r13, rax
000000000000aff9         cmp        r15, rcx
000000000000affc         lea        rax, qword [rsi*4]
000000000000b004         mov        dword [rdx+rsi*4], r12d
000000000000b008         jge        loc_aec0

000000000000b00e         lea        rax, qword [rdx+rax+4]
000000000000b013         lea        rdx, qword [rdx+rcx*4]
000000000000b017         nop        word [rax+rax]

                     loc_b020:
000000000000b020         mov        dword [rax], 0xffffffff                     ; CODE XREF=build_wcs_upper_buffer+445
000000000000b026         add        rax, 0x4
000000000000b02a         cmp        rdx, rax
000000000000b02d         jne        loc_b020

000000000000b02f         mov        r15, rcx
000000000000b032         jmp        loc_aec0
000000000000b037         align      64

                     loc_b040:
000000000000b040         cmp        byte [rdi+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+70
000000000000b047         jne        loc_aebc

000000000000b04d         cmp        r15, rbx
000000000000b050         jge        loc_b1e8

000000000000b056         lea        rax, qword [rdi+0x20]
000000000000b05a         mov        qword [rsp+0xd8+var_D0], rax
000000000000b05f         lea        rax, qword [rsp+0xd8+var_94]
000000000000b064         mov        qword [rsp+0xd8+var_A8], rax
000000000000b069         lea        rax, qword [rsp+0xd8+var_90]
000000000000b06e         mov        qword [rsp+0xd8+var_A0], rax
000000000000b073         lea        rax, qword [rsp+0xd8+var_88]
000000000000b078         mov        qword [rsp+0xd8+var_B0], rax
000000000000b07d         nop        dword [rax]

                     loc_b080:
000000000000b080         mov        rbp, qword [r14+0x28]                       ; CODE XREF=build_wcs_upper_buffer+765
000000000000b084         mov        r13, r15
000000000000b087         add        rbp, r15
000000000000b08a         add        rbp, qword [r14]
000000000000b08d         movzx      r12d, byte [rbp]
000000000000b092         test       r12b, 0x80
000000000000b096         jne        loc_b0aa

000000000000b098         mov        rdi, qword [rsp+0xd8+var_D0]                ; argument "__ps" for method j_mbsinit
000000000000b09d         call       j_mbsinit                                   ; mbsinit
000000000000b0a2         test       eax, eax
000000000000b0a4         jne        loc_b198

                     loc_b0aa:
000000000000b0aa         mov        rax, qword [r14+0x20]                       ; CODE XREF=build_wcs_upper_buffer+550
000000000000b0ae         mov        rdi, qword [rsp+0xd8+var_A8]
000000000000b0b3         mov        rdx, rbx
000000000000b0b6         mov        rcx, qword [rsp+0xd8+var_D0]
000000000000b0bb         sub        rdx, r15
000000000000b0be         mov        rsi, rbp
000000000000b0c1         mov        qword [rsp+0xd8+var_C8], rdx
000000000000b0c6         mov        qword [rsp+0xd8+var_90], rax
000000000000b0cb         mov        qword [rsp+0xd8+var_B8], rdi
000000000000b0d0         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000b0d5         mov        rbp, rax
000000000000b0d8         lea        rax, qword [rax-1]
000000000000b0dc         cmp        rax, 0xfffffffffffffffc
000000000000b0e0         ja         loc_b1c8

000000000000b0e6         mov        edx, dword [rsp+0xd8+var_94]
000000000000b0ea         mov        edi, edx                                    ; argument "__wc" for method j_towupper
000000000000b0ec         mov        dword [rsp+0xd8+var_C0], edx
000000000000b0f0         call       j_towupper                                  ; towupper
000000000000b0f5         mov        edx, dword [rsp+0xd8+var_C0]
000000000000b0f9         mov        r12d, eax
000000000000b0fc         cmp        edx, eax
000000000000b0fe         je         loc_b178

000000000000b100         mov        rdx, qword [rsp+0xd8+var_A0]                ; argument "__ps" for method j_wcrtomb
000000000000b105         mov        rdi, qword [rsp+0xd8+var_B0]                ; argument "__s" for method j_wcrtomb
000000000000b10a         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
000000000000b10c         call       j_wcrtomb                                   ; wcrtomb
000000000000b111         cmp        rbp, rax
000000000000b114         jne        loc_b288

000000000000b11a         mov        rdi, qword [r14+8]
000000000000b11e         mov        rsi, qword [rsp+0xd8+var_B0]                ; argument "__src" for method j_memcpy
000000000000b123         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
000000000000b126         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
000000000000b129         call       j_memcpy                                    ; memcpy

                     loc_b12e:
000000000000b12e         add        r15, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+801
000000000000b132         mov        rdx, qword [r14+0x10]
000000000000b136         lea        rax, qword [r13*4]
000000000000b13e         lea        rcx, qword [r15+rbp-1]
000000000000b143         cmp        r15, rcx
000000000000b146         mov        dword [rdx+r13*4], r12d
000000000000b14a         jge        loc_b16a

000000000000b14c         lea        rax, qword [rdx+rax+4]
000000000000b151         lea        rdx, qword [rdx+rcx*4]
000000000000b155         nop        dword [rax]

                     loc_b158:
000000000000b158         mov        dword [rax], 0xffffffff                     ; CODE XREF=build_wcs_upper_buffer+757
000000000000b15e         add        rax, 0x4
000000000000b162         cmp        rdx, rax
000000000000b165         jne        loc_b158

000000000000b167         mov        r15, rcx

                     loc_b16a:
000000000000b16a         cmp        rbx, r15                                    ; CODE XREF=build_wcs_upper_buffer+730, build_wcs_upper_buffer+849, build_wcs_upper_buffer+949, build_wcs_upper_buffer+964
000000000000b16d         jg         loc_b080

000000000000b173         jmp        loc_b1e8
000000000000b175         align      8

                     loc_b178:
000000000000b178         mov        rsi, qword [r14+0x28]                       ; CODE XREF=build_wcs_upper_buffer+654
000000000000b17c         mov        rdi, qword [r14+8]
000000000000b180         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
000000000000b183         add        rsi, r15
000000000000b186         add        rsi, qword [r14]                            ; argument "__src" for method j_memcpy
000000000000b189         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
000000000000b18c         call       j_memcpy                                    ; memcpy
000000000000b191         jmp        loc_b12e
000000000000b193         align      8

                     loc_b198:
000000000000b198         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc, CODE XREF=build_wcs_upper_buffer+564
000000000000b19d         mov        rax, qword [rax]
000000000000b1a0         mov        rdx, qword [r14+8]
000000000000b1a4         mov        eax, dword [rax+r12*4]
000000000000b1a8         mov        byte [rdx+r15], al
000000000000b1ac         mov        rdx, qword [r14+8]
000000000000b1b0         mov        rax, qword [r14+0x10]
000000000000b1b4         movzx      edx, byte [rdx+r15]
000000000000b1b9         mov        dword [rax+r15*4], edx
000000000000b1bd         add        r15, 0x1
000000000000b1c1         jmp        loc_b16a
000000000000b1c3         align      8

                     loc_b1c8:
000000000000b1c8         cmp        rax, 0xfffffffffffffffd                     ; CODE XREF=build_wcs_upper_buffer+624
000000000000b1cc         jne        loc_b200

000000000000b1ce         mov        rax, qword [r14+0x58]
000000000000b1d2         cmp        qword [r14+0x40], rax
000000000000b1d6         jge        loc_b200

000000000000b1d8         mov        rax, qword [rsp+0xd8+var_90]
000000000000b1dd         mov        qword [r14+0x20], rax
000000000000b1e1         nop        dword [rax]

                     loc_b1e8:
000000000000b1e8         mov        qword [r14+0x30], r15                       ; CODE XREF=build_wcs_upper_buffer+480, build_wcs_upper_buffer+771
000000000000b1ec         mov        qword [r14+0x38], r15
000000000000b1f0         xor        eax, eax
000000000000b1f2         jmp        loc_aecf
000000000000b1f7         align      512

                     loc_b200:
000000000000b200         mov        rax, qword [r14]                            ; CODE XREF=build_wcs_upper_buffer+860, build_wcs_upper_buffer+870
000000000000b203         mov        rdx, qword [r14+8]
000000000000b207         add        rax, r15
000000000000b20a         add        rax, qword [r14+0x28]
000000000000b20e         movzx      eax, byte [rax]
000000000000b211         mov        byte [rdx+r15], al
000000000000b215         mov        rdx, qword [r14+0x10]
000000000000b219         add        r15, 0x1
000000000000b21d         cmp        rbp, 0xffffffffffffffff
000000000000b221         mov        dword [rdx+r13*4], eax
000000000000b225         jne        loc_b16a

000000000000b22b         mov        rax, qword [rsp+0xd8+var_90]
000000000000b230         mov        qword [r14+0x20], rax
000000000000b234         jmp        loc_b16a

                     loc_b239:
000000000000b239         mov        eax, dword [r14+0x90]                       ; CODE XREF=build_wcs_upper_buffer+190
000000000000b240         test       eax, eax
000000000000b242         jle        loc_b460

000000000000b248         mov        rdi, qword [r14+0x28]
000000000000b24c         lea        r11d, dword [rax-1]
000000000000b250         lea        rcx, qword [rsp+0xd8+var_88]
000000000000b255         xor        eax, eax
000000000000b257         add        rdi, r13
000000000000b25a         add        rdi, qword [r14]
000000000000b25d         jmp        loc_b26a

                     loc_b25f:
000000000000b25f         add        rax, 0x1                                    ; CODE XREF=build_wcs_upper_buffer+1033
000000000000b263         cmp        qword [rsp+0xd8+var_C8], rax
000000000000b268         je         loc_b27b

                     loc_b26a:
000000000000b26a         movzx      esi, byte [rdi+rax]                         ; CODE XREF=build_wcs_upper_buffer+1005
000000000000b26e         cmp        r11, rax
000000000000b271         movzx      esi, byte [rdx+rsi]
000000000000b275         mov        byte [rcx+rax], sil
000000000000b279         jne        loc_b25f

                     loc_b27b:
000000000000b27b         mov        qword [rsp+0xd8+var_C0], rcx                ; CODE XREF=build_wcs_upper_buffer+1016, build_wcs_upper_buffer+1525
000000000000b280         jmp        loc_af43
000000000000b285         align      8

                     loc_b288:
000000000000b288         mov        r13, r15                                    ; CODE XREF=build_wcs_upper_buffer+676
000000000000b28b         jmp        loc_af1e

                     loc_b290:
000000000000b290         mov        rdi, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+287, build_wcs_upper_buffer+1242
000000000000b294         mov        rsi, qword [rsp+0xd8+var_C0]                ; argument "__src" for method j_memcpy
000000000000b299         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
000000000000b29c         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
000000000000b29f         call       j_memcpy                                    ; memcpy
000000000000b2a4         jmp        loc_afd1

                     loc_b2a9:
000000000000b2a9         cmp        qword [rsp+0xd8+var_B8], 0xfffffffffffffffd ; CODE XREF=build_wcs_upper_buffer+252
000000000000b2af         jne        loc_b2bb

000000000000b2b1         mov        rax, qword [r14+0x58]
000000000000b2b5         cmp        qword [r14+0x40], rax
000000000000b2b9         jl         loc_b338

                     loc_b2bb:
000000000000b2bb         mov        rax, qword [r14]                            ; CODE XREF=build_wcs_upper_buffer+1087
000000000000b2be         mov        rdx, qword [r14+0x78]
000000000000b2c2         add        rax, r13
000000000000b2c5         add        rax, qword [r14+0x28]
000000000000b2c9         test       rdx, rdx
000000000000b2cc         movzx      eax, byte [rax]
000000000000b2cf         jne        loc_b47c

                     loc_b2d5:
000000000000b2d5         mov        rdx, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+1552
000000000000b2d9         mov        rcx, r15
000000000000b2dc         mov        byte [rdx+r15], al
000000000000b2e0         cmp        byte [r14+0x8c], 0x0
000000000000b2e8         jne        loc_b46f

                     loc_b2ee:
000000000000b2ee         mov        rdx, qword [r14+0x10]                       ; CODE XREF=build_wcs_upper_buffer+1543
000000000000b2f2         add        r13, 0x1
000000000000b2f6         add        r15, 0x1
000000000000b2fa         cmp        rbp, 0xffffffffffffffff
000000000000b2fe         mov        dword [rdx+rcx*4], eax
000000000000b301         jne        loc_aec0

000000000000b307         mov        rax, qword [rsp+0xd8+var_90]
000000000000b30c         mov        qword [r14+0x20], rax
000000000000b310         jmp        loc_aec0

                     loc_b315:
000000000000b315         mov        rdx, qword [r14+0x18]                       ; CODE XREF=build_wcs_upper_buffer+366
000000000000b319         mov        rcx, r15
000000000000b31c         mov        r10, r13
000000000000b31f         sub        rcx, r13
000000000000b322         lea        rdx, qword [rdx+rcx*8]

                     loc_b326:
000000000000b326         mov        qword [rdx+r10*8], r10                      ; CODE XREF=build_wcs_upper_buffer+1217
000000000000b32a         add        r10, 0x1
000000000000b32e         cmp        rax, r10
000000000000b331         jne        loc_b326

000000000000b333         jmp        loc_afe4

                     loc_b338:
000000000000b338         mov        rax, qword [rsp+0xd8+var_90]                ; CODE XREF=build_wcs_upper_buffer+1097, build_wcs_upper_buffer+1267
000000000000b33d         mov        qword [r14+0x20], rax
000000000000b341         jmp        loc_aec5

                     loc_b346:
000000000000b346         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=build_wcs_upper_buffer+329
000000000000b34a         je         loc_b290

000000000000b350         lea        rax, qword [rax+r15]
000000000000b354         mov        rsi, rax
000000000000b357         mov        qword [rsp+0xd8+var_D0], rax
000000000000b35c         mov        rax, qword [r14+0x40]
000000000000b360         cmp        rsi, rax
000000000000b363         ja         loc_b338

000000000000b365         cmp        qword [r14+0x18], 0x0
000000000000b36a         je         loc_b428

                     loc_b370:
000000000000b370         cmp        byte [r14+0x8c], 0x0                        ; CODE XREF=build_wcs_upper_buffer+1504
000000000000b378         jne        loc_b39a

000000000000b37a         test       r15, r15
000000000000b37d         je         loc_b392

000000000000b37f         mov        rdx, qword [r14+0x18]
000000000000b383         xor        eax, eax

                     loc_b385:
000000000000b385         mov        qword [rdx+rax*8], rax                      ; CODE XREF=build_wcs_upper_buffer+1312
000000000000b389         add        rax, 0x1
000000000000b38d         cmp        rax, r15
000000000000b390         jne        loc_b385

                     loc_b392:
000000000000b392         mov        byte [r14+0x8c], 0x1                        ; CODE XREF=build_wcs_upper_buffer+1293

                     loc_b39a:
000000000000b39a         mov        rdi, qword [r14+8]                          ; CODE XREF=build_wcs_upper_buffer+1288
000000000000b39e         mov        rsi, rcx                                    ; argument "__src" for method j_memcpy
000000000000b3a1         mov        rdx, r11                                    ; argument "__n" for method j_memcpy
000000000000b3a4         mov        qword [rsp+0xd8+var_C8], r11
000000000000b3a9         add        rdi, r15                                    ; argument "__dest" for method j_memcpy
000000000000b3ac         call       j_memcpy                                    ; memcpy
000000000000b3b1         mov        rax, qword [r14+0x10]
000000000000b3b5         mov        r11, qword [rsp+0xd8+var_C8]
000000000000b3ba         lea        rcx, qword [rax+r15*4]
000000000000b3be         mov        rax, qword [r14+0x18]
000000000000b3c2         cmp        r11, 0x1
000000000000b3c6         mov        dword [rcx], r12d
000000000000b3c9         lea        rsi, qword [rax+r15*8]
000000000000b3cd         mov        qword [rsi], r13
000000000000b3d0         jbe        loc_b3fa

000000000000b3d2         mov        eax, 0x1

                     loc_b3d7:
000000000000b3d7         mov        rdx, qword [rsp+0xd8+var_B8]                ; CODE XREF=build_wcs_upper_buffer+1416
000000000000b3dc         cmp        rax, rbp
000000000000b3df         cmovb      rdx, rax
000000000000b3e3         add        rdx, r13
000000000000b3e6         mov        qword [rsi+rax*8], rdx
000000000000b3ea         mov        dword [rcx+rax*4], 0xffffffff
000000000000b3f1         add        rax, 0x1
000000000000b3f5         cmp        rax, r11
000000000000b3f8         jne        loc_b3d7

                     loc_b3fa:
000000000000b3fa         mov        rbx, qword [r14+0x58]                       ; CODE XREF=build_wcs_upper_buffer+1376
000000000000b3fe         sub        r11, rbp
000000000000b401         add        rbx, r11
000000000000b404         cmp        r13, qword [r14+0x60]
000000000000b408         mov        qword [r14+0x58], rbx
000000000000b40c         jge        loc_b412

000000000000b40e         add        qword [r14+0x68], r11

                     loc_b412:
000000000000b412         cmp        qword [r14+0x40], rbx                       ; CODE XREF=build_wcs_upper_buffer+1436
000000000000b416         mov        r15, qword [rsp+0xd8+var_D0]
000000000000b41b         cmovle     rbx, qword [r14+0x40]
000000000000b420         add        r13, rbp
000000000000b423         jmp        loc_aec0

                     loc_b428:
000000000000b428         lea        rdi, qword [rax*8]                          ; argument "__size" for method j_malloc, CODE XREF=build_wcs_upper_buffer+1274
000000000000b430         mov        qword [rsp+0xd8+var_C0], rcx
000000000000b435         mov        qword [rsp+0xd8+var_C8], r11
000000000000b43a         call       j_malloc                                    ; malloc
000000000000b43f         test       rax, rax
000000000000b442         mov        qword [r14+0x18], rax
000000000000b446         mov        r11, qword [rsp+0xd8+var_C8]
000000000000b44b         mov        rcx, qword [rsp+0xd8+var_C0]
000000000000b450         jne        loc_b370

000000000000b456         mov        eax, 0xc
000000000000b45b         jmp        loc_aecf

                     loc_b460:
000000000000b460         lea        rcx, qword [rsp+0xd8+var_88]                ; CODE XREF=build_wcs_upper_buffer+978
000000000000b465         jmp        loc_b27b

                     loc_b46a:
000000000000b46a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_wcs_upper_buffer+112
                        ; endp

                     loc_b46f:
000000000000b46f         mov        rdx, qword [r14+0x18]                       ; CODE XREF=build_wcs_upper_buffer+1144
000000000000b473         mov        qword [rdx+r15*8], r13
000000000000b477         jmp        loc_b2ee

                     loc_b47c:
000000000000b47c         movzx      eax, byte [rdx+rax]                         ; CODE XREF=build_wcs_upper_buffer+1119
000000000000b480         jmp        loc_b2d5
000000000000b485         align      16                                          ; End of unwind block (FDE at 0x1e940)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     extend_buffers:
000000000000b490         push       rbp                                         ; Begin of unwind block (FDE at 0x1e98c), CODE XREF=clean_state_log_if_needed+38, clean_state_log_if_needed+85, transit_state_bkref.isra.34+2162, re_search_internal+3125
000000000000b491         push       rbx
000000000000b492         movabs     rdx, 0xffffffffffffffe
000000000000b49c         sub        rsp, 0x8
000000000000b4a0         mov        rax, qword [rdi+0x40]
000000000000b4a4         cmp        rax, rdx
000000000000b4a7         ja         loc_b5b8

000000000000b4ad         mov        rdx, qword [rdi+0x58]
000000000000b4b1         add        rax, rax
000000000000b4b4         movsxd     rsi, esi
000000000000b4b7         mov        rbx, rdi
000000000000b4ba         cmp        rax, rdx
000000000000b4bd         cmovg      rax, rdx
000000000000b4c1         cmp        rax, rsi
000000000000b4c4         cmovge     rsi, rax
000000000000b4c8         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
000000000000b4cd         test       eax, eax
000000000000b4cf         mov        ebp, eax
000000000000b4d1         jne        loc_b58d

000000000000b4d7         mov        rdi, qword [rbx+0xb8]
000000000000b4de         test       rdi, rdi
000000000000b4e1         je         loc_b504

000000000000b4e3         mov        rax, qword [rbx+0x40]
000000000000b4e7         lea        rsi, qword [0x8+rax*8]                      ; argument "__size" for method j_realloc
000000000000b4ef         call       j_realloc                                   ; realloc
000000000000b4f4         test       rax, rax
000000000000b4f7         je         loc_b5b8

000000000000b4fd         mov        qword [rbx+0xb8], rax

                     loc_b504:
000000000000b504         cmp        byte [rbx+0x88], 0x0                        ; CODE XREF=extend_buffers+81
000000000000b50b         mov        eax, dword [rbx+0x90]
000000000000b511         je         loc_b530

000000000000b513         cmp        eax, 0x1
000000000000b516         mov        rdi, rbx
000000000000b519         jle        loc_b5d0

000000000000b51f         add        rsp, 0x8
000000000000b523         pop        rbx
000000000000b524         pop        rbp
000000000000b525         jmp        build_wcs_upper_buffer                      ; build_wcs_upper_buffer
                        ; endp
000000000000b52a         align      16

                     loc_b530:
000000000000b530         cmp        eax, 0x1                                    ; CODE XREF=extend_buffers+129
000000000000b533         jg         loc_b5a0

000000000000b535         mov        rcx, qword [rbx+0x78]
000000000000b539         test       rcx, rcx
000000000000b53c         je         loc_b58d

000000000000b53e         mov        rsi, qword [rbx+0x58]
000000000000b542         cmp        qword [rbx+0x40], rsi
000000000000b546         cmovle     rsi, qword [rbx+0x40]
000000000000b54b         mov        rax, qword [rbx+0x30]
000000000000b54f         cmp        rsi, rax
000000000000b552         jg         loc_b564

000000000000b554         jmp        loc_b585
000000000000b556         align      32

                     loc_b560:
000000000000b560         mov        rcx, qword [rbx+0x78]                       ; CODE XREF=extend_buffers+243

                     loc_b564:
000000000000b564         mov        rdx, qword [rbx]                            ; CODE XREF=extend_buffers+194
000000000000b567         add        rdx, rax
000000000000b56a         add        rdx, qword [rbx+0x28]
000000000000b56e         movzx      edx, byte [rdx]
000000000000b571         movzx      ecx, byte [rcx+rdx]
000000000000b575         mov        rdx, qword [rbx+8]
000000000000b579         mov        byte [rdx+rax], cl
000000000000b57c         add        rax, 0x1
000000000000b580         cmp        rsi, rax
000000000000b583         jne        loc_b560

                     loc_b585:
000000000000b585         mov        qword [rbx+0x30], rax                       ; CODE XREF=extend_buffers+196
000000000000b589         mov        qword [rbx+0x38], rax

                     loc_b58d:
000000000000b58d         add        rsp, 0x8                                    ; CODE XREF=extend_buffers+65, extend_buffers+172
000000000000b591         mov        eax, ebp
000000000000b593         pop        rbx
000000000000b594         pop        rbp
000000000000b595         ret
                        ; endp
000000000000b596         align      32

                     loc_b5a0:
000000000000b5a0         mov        rdi, rbx                                    ; CODE XREF=extend_buffers+163
000000000000b5a3         call       build_wcs_buffer                            ; build_wcs_buffer
000000000000b5a8         add        rsp, 0x8
000000000000b5ac         mov        eax, ebp
000000000000b5ae         pop        rbx
000000000000b5af         pop        rbp
000000000000b5b0         ret
                        ; endp
000000000000b5b1         align      8

                     loc_b5b8:
000000000000b5b8         mov        ebp, 0xc                                    ; CODE XREF=extend_buffers+23, extend_buffers+103
000000000000b5bd         add        rsp, 0x8
000000000000b5c1         mov        eax, ebp
000000000000b5c3         pop        rbx
000000000000b5c4         pop        rbp
000000000000b5c5         ret
                        ; endp
000000000000b5c6         align      16

                     loc_b5d0:
000000000000b5d0         call       build_upper_buffer                          ; build_upper_buffer, CODE XREF=extend_buffers+137
000000000000b5d5         add        rsp, 0x8
000000000000b5d9         mov        eax, ebp
000000000000b5db         pop        rbx
000000000000b5dc         pop        rbp
000000000000b5dd         ret
                        ; endp
000000000000b5de         align      32                                          ; End of unwind block (FDE at 0x1e98c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     clean_state_log_if_needed:
000000000000b5e0         push       r12                                         ; Begin of unwind block (FDE at 0x1e9e8), CODE XREF=get_subexp_sub.isra.32+244, transit_state_bkref.isra.34+816, re_search_internal+3351
000000000000b5e2         push       rbp
000000000000b5e3         mov        rbp, rsi
000000000000b5e6         push       rbx
000000000000b5e7         mov        rax, qword [rdi+0x40]
000000000000b5eb         mov        rbx, rdi
000000000000b5ee         mov        r12, qword [rdi+0xc0]
000000000000b5f5         cmp        rax, rsi
000000000000b5f8         jg         loc_b620

000000000000b5fa         cmp        rax, qword [rdi+0x58]
000000000000b5fe         jge        loc_b620

000000000000b600         lea        esi, dword [rbp+1]
000000000000b603         mov        rdi, rbx
000000000000b606         call       extend_buffers                              ; extend_buffers
000000000000b60b         test       eax, eax
000000000000b60d         jne        loc_b616

                     loc_b60f:
000000000000b60f         cmp        r12, rbp                                    ; CODE XREF=clean_state_log_if_needed+71, clean_state_log_if_needed+77, clean_state_log_if_needed+92
000000000000b612         jl         loc_b640

                     loc_b614:
000000000000b614         xor        eax, eax                                    ; CODE XREF=clean_state_log_if_needed+132

                     loc_b616:
000000000000b616         pop        rbx                                         ; CODE XREF=clean_state_log_if_needed+45, clean_state_log_if_needed+94
000000000000b617         pop        rbp
000000000000b618         pop        r12
000000000000b61a         ret
                        ; endp
000000000000b61b         align      32

                     loc_b620:
000000000000b620         mov        rax, qword [rbx+0x30]                       ; CODE XREF=clean_state_log_if_needed+24, clean_state_log_if_needed+30
000000000000b624         cmp        rax, rbp
000000000000b627         jg         loc_b60f

000000000000b629         cmp        rax, qword [rbx+0x58]
000000000000b62d         jge        loc_b60f

000000000000b62f         lea        esi, dword [rbp+1]
000000000000b632         mov        rdi, rbx
000000000000b635         call       extend_buffers                              ; extend_buffers
000000000000b63a         test       eax, eax
000000000000b63c         je         loc_b60f

000000000000b63e         jmp        loc_b616

                     loc_b640:
000000000000b640         mov        rax, qword [rbx+0xb8]                       ; CODE XREF=clean_state_log_if_needed+50
000000000000b647         mov        rdx, rbp
000000000000b64a         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000b64c         sub        rdx, r12
000000000000b64f         shl        rdx, 0x3                                    ; argument "__n" for method j_memset
000000000000b653         lea        rdi, qword [rax+r12*8+8]                    ; argument "__s" for method j_memset
000000000000b658         call       j_memset                                    ; memset
000000000000b65d         mov        qword [rbx+0xc0], rbp
000000000000b664         jmp        loc_b614
000000000000b666         align      16                                          ; End of unwind block (FDE at 0x1e9e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_charset:
000000000000b670         push       rbx                                         ; Begin of unwind block (FDE at 0x1ea14), CODE XREF=free_token+35, build_charclass_op+499, build_charclass_op+523, build_charclass_op+593, sub_15b10+1155, sub_15b10+2271
000000000000b671         mov        rbx, rdi
000000000000b674         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_free
000000000000b677         call       j_free                                      ; free
000000000000b67c         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_free
000000000000b680         call       j_free                                      ; free
000000000000b685         mov        rdi, qword [rbx+0x10]                       ; argument "__ptr" for method j_free
000000000000b689         call       j_free                                      ; free
000000000000b68e         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free
000000000000b692         call       j_free                                      ; free
000000000000b697         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
000000000000b69a         pop        rbx
000000000000b69b         jmp        j_free                                      ; free
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_token:
000000000000b6a0         mov        eax, dword [rdi+8]                          ; End of unwind block (FDE at 0x1ea14), Begin of unwind block (FDE at 0x1ea30), CODE XREF=free_tree+8, free_dfa_content+50
000000000000b6a3         and        eax, 0x400ff
000000000000b6a8         cmp        eax, 0x6
000000000000b6ab         je         loc_b6c0

000000000000b6ad         cmp        eax, 0x3
000000000000b6b0         je         loc_b6b8

000000000000b6b2         ret
                        ; endp
000000000000b6b4         align      8

                     loc_b6b8:
000000000000b6b8         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_free, CODE XREF=free_token+16
000000000000b6bb         jmp        j_free                                      ; free
                        ; endp

                     loc_b6c0:
000000000000b6c0         mov        rdi, qword [rdi]                            ; CODE XREF=free_token+11
000000000000b6c3         jmp        free_charset                                ; free_charset
                        ; endp
000000000000b6c5         align      16                                          ; End of unwind block (FDE at 0x1ea30)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_tree:
000000000000b6d0         lea        rdi, qword [rsi+0x28]                       ; Begin of unwind block (FDE at 0x1ea44), DATA XREF=sub_153a0+81, sub_153a0+764, sub_153a0+1024, sub_153a0+1118, parse_branch+313, parse_branch+336, parse_branch+353, parse_reg_exp+305
000000000000b6d4         sub        rsp, 0x8
000000000000b6d8         call       free_token                                  ; free_token
000000000000b6dd         xor        eax, eax
000000000000b6df         add        rsp, 0x8
000000000000b6e3         ret
                        ; endp
000000000000b6e4         align      16                                          ; End of unwind block (FDE at 0x1ea44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     re_dfa_add_node:
000000000000b6f0         push       r15                                         ; Begin of unwind block (FDE at 0x1ea5c), CODE XREF=duplicate_node+38, calc_first+30
000000000000b6f2         push       r14
000000000000b6f4         mov        r14, rsi
000000000000b6f7         push       r13
000000000000b6f9         push       r12
000000000000b6fb         push       rbp
000000000000b6fc         push       rbx
000000000000b6fd         mov        rbx, rdi
000000000000b700         sub        rsp, 0x18
000000000000b704         mov        rsi, qword [rdi+0x10]
000000000000b708         mov        rbp, qword [rdi+8]
000000000000b70c         cmp        rsi, rbp
000000000000b70f         jae        loc_b7c0

000000000000b715         mov        r12, qword [rdi+0x18]
000000000000b719         mov        rbp, qword [rdi+0x28]

                     loc_b71d:
000000000000b71d         mov        rax, rsi                                    ; CODE XREF=re_dfa_add_node+391
000000000000b720         mov        ecx, edx
000000000000b722         shl        rax, 0x4
000000000000b726         add        rax, qword [rbx]
000000000000b729         and        ecx, 0xfffc00ff
000000000000b72f         mov        qword [rax+8], rdx
000000000000b733         mov        dword [rax+8], ecx
000000000000b736         xor        ecx, ecx
000000000000b738         cmp        dl, 0x6
000000000000b73b         mov        qword [rax], r14
000000000000b73e         sete       cl
000000000000b741         cmp        dl, 0x5
000000000000b744         jne        loc_b752

000000000000b746         xor        ecx, ecx
000000000000b748         cmp        dword [rbx+0xb4], 0x1
000000000000b74f         setg       cl

                     loc_b752:
000000000000b752         movzx      edx, byte [rax+0xa]                         ; CODE XREF=re_dfa_add_node+84
000000000000b756         shl        ecx, 0x4
000000000000b759         pxor       xmm0, xmm0
000000000000b75d         and        edx, 0xffffffef
000000000000b760         or         edx, ecx
000000000000b762         mov        byte [rax+0xa], dl
000000000000b765         mov        qword [r12+rsi*8], 0xffffffffffffffff
000000000000b76d         mov        rax, qword [rbx+0x10]
000000000000b771         lea        rax, qword [rax+rax*2]
000000000000b775         lea        rax, qword [rbp+rax*8]
000000000000b77a         movups     xmmword [rax], xmm0
000000000000b77d         mov        qword [rax+0x10], 0x0
000000000000b785         mov        rax, qword [rbx+0x10]
000000000000b789         lea        rdx, qword [rax+rax*2]
000000000000b78d         mov        rax, qword [rbx+0x30]
000000000000b791         lea        rax, qword [rax+rdx*8]
000000000000b795         movups     xmmword [rax], xmm0
000000000000b798         mov        qword [rax+0x10], 0x0
000000000000b7a0         mov        rax, qword [rbx+0x10]
000000000000b7a4         lea        rdx, qword [rax+1]
000000000000b7a8         mov        qword [rbx+0x10], rdx

                     loc_b7ac:
000000000000b7ac         add        rsp, 0x18                                   ; CODE XREF=re_dfa_add_node+457
000000000000b7b0         pop        rbx
000000000000b7b1         pop        rbp
000000000000b7b2         pop        r12
000000000000b7b4         pop        r13
000000000000b7b6         pop        r14
000000000000b7b8         pop        r15
000000000000b7ba         ret
                        ; endp
000000000000b7bb         align      64

                     loc_b7c0:
000000000000b7c0         lea        r13, qword [rbp+rbp]                        ; CODE XREF=re_dfa_add_node+31
000000000000b7c5         movabs     rax, 0xaaaaaaaaaaaaaaa
000000000000b7cf         cmp        r13, rax
000000000000b7d2         ja         loc_b8b2

000000000000b7d8         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_realloc
000000000000b7db         mov        rsi, rbp
000000000000b7de         mov        qword [rsp+0x48+var_40], rdx
000000000000b7e3         shl        rsi, 0x5                                    ; argument "__size" for method j_realloc
000000000000b7e7         call       j_realloc                                   ; realloc
000000000000b7ec         test       rax, rax
000000000000b7ef         je         loc_b8b2

000000000000b7f5         mov        r15, rbp
000000000000b7f8         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_realloc
000000000000b7fc         mov        qword [rbx], rax
000000000000b7ff         shl        r15, 0x4
000000000000b803         mov        rsi, r15                                    ; argument "__size" for method j_realloc
000000000000b806         call       j_realloc                                   ; realloc
000000000000b80b         mov        rdi, qword [rbx+0x20]                       ; argument "__ptr" for method j_realloc
000000000000b80f         mov        rsi, r15                                    ; argument "__size" for method j_realloc
000000000000b812         lea        r15, qword [r13+rbp*4]
000000000000b817         mov        r12, rax
000000000000b81a         shl        r15, 0x3
000000000000b81e         call       j_realloc                                   ; realloc
000000000000b823         mov        rdi, qword [rbx+0x28]                       ; argument "__ptr" for method j_realloc
000000000000b827         mov        rsi, r15                                    ; argument "__size" for method j_realloc
000000000000b82a         mov        qword [rsp+0x48+var_48], rax
000000000000b82e         call       j_realloc                                   ; realloc
000000000000b833         mov        rdi, qword [rbx+0x30]                       ; argument "__ptr" for method j_realloc
000000000000b837         mov        rsi, r15                                    ; argument "__size" for method j_realloc
000000000000b83a         mov        rbp, rax
000000000000b83d         call       j_realloc                                   ; realloc
000000000000b842         test       r12, r12
000000000000b845         mov        rcx, qword [rsp+0x48+var_48]
000000000000b849         je         loc_b880

000000000000b84b         test       rcx, rcx
000000000000b84e         je         loc_b880

000000000000b850         test       rbp, rbp
000000000000b853         je         loc_b880

000000000000b855         test       rax, rax
000000000000b858         mov        rdx, qword [rsp+0x48+var_40]
000000000000b85d         je         loc_b880

000000000000b85f         mov        qword [rbx+0x18], r12
000000000000b863         mov        qword [rbx+0x20], rcx
000000000000b867         mov        qword [rbx+0x28], rbp
000000000000b86b         mov        qword [rbx+0x30], rax
000000000000b86f         mov        qword [rbx+8], r13
000000000000b873         mov        rsi, qword [rbx+0x10]
000000000000b877         jmp        loc_b71d
000000000000b87c         align      128

                     loc_b880:
000000000000b880         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_dfa_add_node+345, re_dfa_add_node+350, re_dfa_add_node+355, re_dfa_add_node+365
000000000000b883         mov        qword [rsp+0x48+var_40], rax
000000000000b888         mov        qword [rsp+0x48+var_48], rcx
000000000000b88c         call       j_free                                      ; free
000000000000b891         mov        rcx, qword [rsp+0x48+var_48]
000000000000b895         mov        rdi, rcx                                    ; argument "__ptr" for method j_free
000000000000b898         call       j_free                                      ; free
000000000000b89d         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
000000000000b8a0         call       j_free                                      ; free
000000000000b8a5         mov        rax, qword [rsp+0x48+var_40]
000000000000b8aa         mov        rdi, rax                                    ; argument "__ptr" for method j_free
000000000000b8ad         call       j_free                                      ; free

                     loc_b8b2:
000000000000b8b2         mov        rax, 0xffffffffffffffff                     ; CODE XREF=re_dfa_add_node+226, re_dfa_add_node+255
000000000000b8b9         jmp        loc_b7ac
000000000000b8be         align      64                                          ; End of unwind block (FDE at 0x1ea5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     duplicate_node:
000000000000b8c0         push       r13                                         ; Begin of unwind block (FDE at 0x1eaa8), CODE XREF=duplicate_node_closure+258, duplicate_node_closure+328, duplicate_node_closure+437, duplicate_node_closure+542
000000000000b8c2         push       r12
000000000000b8c4         mov        r13, rsi
000000000000b8c7         push       rbp
000000000000b8c8         push       rbx
000000000000b8c9         shl        r13, 0x4
000000000000b8cd         mov        rbp, rsi
000000000000b8d0         mov        r12d, edx
000000000000b8d3         mov        rbx, rdi
000000000000b8d6         sub        rsp, 0x8
000000000000b8da         mov        rax, qword [rdi]
000000000000b8dd         mov        rsi, qword [rax+r13]
000000000000b8e1         mov        rdx, qword [rax+r13+8]
000000000000b8e6         call       re_dfa_add_node                             ; re_dfa_add_node
000000000000b8eb         cmp        rax, 0xffffffffffffffff
000000000000b8ef         je         loc_b954

000000000000b8f1         mov        edi, r12d
000000000000b8f4         mov        r8, qword [rbx]
000000000000b8f7         mov        rsi, rax
000000000000b8fa         and        di, 0x3ff
000000000000b8ff         shl        rsi, 0x4
000000000000b903         mov        ecx, edi
000000000000b905         and        ecx, 0x3ff
000000000000b90b         add        rsi, r8
000000000000b90e         shl        ecx, 0x8
000000000000b911         mov        edx, ecx
000000000000b913         mov        ecx, dword [rsi+8]
000000000000b916         and        ecx, 0xfffc00ff
000000000000b91c         or         ecx, edx
000000000000b91e         mov        dword [rsi+8], ecx
000000000000b921         mov        edx, dword [r8+r13+8]
000000000000b926         and        ecx, 0xfffc00ff
000000000000b92c         shr        edx, 0x8
000000000000b92f         or         edx, edi
000000000000b931         and        edx, 0x3ff
000000000000b937         shl        edx, 0x8
000000000000b93a         or         edx, ecx
000000000000b93c         mov        ecx, edx
000000000000b93e         mov        dword [rsi+8], edx
000000000000b941         shr        ecx, 0x10
000000000000b944         mov        edx, ecx
000000000000b946         or         edx, 0x4
000000000000b949         mov        byte [rsi+0xa], dl
000000000000b94c         mov        rdx, qword [rbx+0x20]
000000000000b950         mov        qword [rdx+rax*8], rbp

                     loc_b954:
000000000000b954         add        rsp, 0x8                                    ; CODE XREF=duplicate_node+47
000000000000b958         pop        rbx
000000000000b959         pop        rbp
000000000000b95a         pop        r12
000000000000b95c         pop        r13
000000000000b95e         ret
                        ; endp
000000000000b95f         align      32                                          ; End of unwind block (FDE at 0x1eaa8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     duplicate_node_closure:
000000000000b960         push       r15                                         ; Begin of unwind block (FDE at 0x1eae0), CODE XREF=duplicate_node_closure+378, calc_eclosure_iter+618
000000000000b962         push       r14
000000000000b964         mov        r9, rsi
000000000000b967         push       r13
000000000000b969         push       r12
000000000000b96b         mov        r14, rdi
000000000000b96e         push       rbp
000000000000b96f         push       rbx
000000000000b970         mov        r13, rdx
000000000000b973         mov        ebp, r8d
000000000000b976         sub        rsp, 0x18
000000000000b97a         mov        qword [rsp+0x48+var_40], rcx

                     loc_b97f:
000000000000b97f         mov        r8, qword [r14]                             ; CODE XREF=duplicate_node_closure+293, duplicate_node_closure+481
000000000000b982         mov        rax, r9
000000000000b985         mov        rdi, qword [r14+0x28]
000000000000b989         shl        rax, 0x4
000000000000b98d         mov        r12, r13
000000000000b990         add        rax, r8
000000000000b993         cmp        byte [rax+8], 0x4
000000000000b997         je         loc_bb50

000000000000b99d         lea        r12, qword [r9+r9*2]
000000000000b9a1         shl        r12, 0x3
000000000000b9a5         lea        rsi, qword [rdi+r12]
000000000000b9a9         mov        rcx, qword [rsi+8]
000000000000b9ad         test       rcx, rcx
000000000000b9b0         je         loc_bba9

000000000000b9b6         lea        rbx, qword [r13+r13*2]
000000000000b9bb         mov        rsi, qword [rsi+0x10]
000000000000b9bf         shl        rbx, 0x3
000000000000b9c3         add        rdi, rbx
000000000000b9c6         cmp        rcx, 0x1
000000000000b9ca         mov        r15, qword [rsi]
000000000000b9cd         mov        qword [rdi+8], 0x0
000000000000b9d5         je         loc_baf0

000000000000b9db         mov        rdx, qword [r14+0x10]
000000000000b9df         lea        rsi, qword [rdx-1]
000000000000b9e3         mov        rax, rsi
000000000000b9e6         shl        rax, 0x4
000000000000b9ea         add        rax, r8
000000000000b9ed         test       byte [rax+0xa], 0x4
000000000000b9f1         je         loc_baa0

000000000000b9f7         test       rsi, rsi
000000000000b9fa         jle        loc_baa0

000000000000ba00         shl        rdx, 0x4
000000000000ba04         sub        r8, rax
000000000000ba07         mov        rcx, qword [r14+0x20]
000000000000ba0b         lea        r8, qword [r8+rdx-0x20]
000000000000ba10         jmp        loc_ba2a
000000000000ba12         align      8

                     loc_ba18:
000000000000ba18         add        rax, r8                                     ; CODE XREF=duplicate_node_closure+206, duplicate_node_closure+222
000000000000ba1b         sub        rsi, 0x1
000000000000ba1f         test       byte [rax+0xa], 0x4
000000000000ba23         je         loc_baa0

000000000000ba25         test       rsi, rsi
000000000000ba28         jle        loc_baa0

                     loc_ba2a:
000000000000ba2a         cmp        qword [rcx+rsi*8], r15                      ; CODE XREF=duplicate_node_closure+176
000000000000ba2e         jne        loc_ba18

000000000000ba30         mov        edx, dword [rax+8]
000000000000ba33         shr        edx, 0x8
000000000000ba36         and        edx, 0x3ff
000000000000ba3c         cmp        ebp, edx
000000000000ba3e         jne        loc_ba18

000000000000ba40         call       re_node_set_insert                          ; re_node_set_insert
000000000000ba45         test       al, al
000000000000ba47         je         loc_ba8b

                     loc_ba49:
000000000000ba49         mov        rax, qword [r14+0x28]                       ; CODE XREF=duplicate_node_closure+385
000000000000ba4d         mov        edx, ebp
000000000000ba4f         mov        rdi, r14
000000000000ba52         mov        rax, qword [rax+r12+0x10]
000000000000ba57         mov        r9, qword [rax+8]
000000000000ba5b         mov        rsi, r9
000000000000ba5e         mov        qword [rsp+0x48+var_48], r9
000000000000ba62         call       duplicate_node                              ; duplicate_node
000000000000ba67         cmp        rax, 0xffffffffffffffff
000000000000ba6b         mov        r13, rax
000000000000ba6e         je         loc_ba8b

                     loc_ba70:
000000000000ba70         add        rbx, qword [r14+0x28]                       ; CODE XREF=duplicate_node_closure+580
000000000000ba74         mov        rsi, r13
000000000000ba77         mov        rdi, rbx
000000000000ba7a         call       re_node_set_insert                          ; re_node_set_insert
000000000000ba7f         test       al, al
000000000000ba81         mov        r9, qword [rsp+0x48+var_48]
000000000000ba85         jne        loc_b97f

                     loc_ba8b:
000000000000ba8b         mov        eax, 0xc                                    ; CODE XREF=duplicate_node_closure+231, duplicate_node_closure+270, duplicate_node_closure+340, duplicate_node_closure+359, duplicate_node_closure+449, duplicate_node_closure+472, duplicate_node_closure+558, duplicate_node_closure+624

                     loc_ba90:
000000000000ba90         add        rsp, 0x18                                   ; CODE XREF=duplicate_node_closure+391, duplicate_node_closure+599, duplicate_node_closure+618
000000000000ba94         pop        rbx
000000000000ba95         pop        rbp
000000000000ba96         pop        r12
000000000000ba98         pop        r13
000000000000ba9a         pop        r14
000000000000ba9c         pop        r15
000000000000ba9e         ret
                        ; endp
000000000000ba9f         align      32

                     loc_baa0:
000000000000baa0         mov        edx, ebp                                    ; CODE XREF=duplicate_node_closure+145, duplicate_node_closure+154, duplicate_node_closure+195, duplicate_node_closure+200
000000000000baa2         mov        rsi, r15
000000000000baa5         mov        rdi, r14
000000000000baa8         call       duplicate_node                              ; duplicate_node
000000000000baad         cmp        rax, 0xffffffffffffffff
000000000000bab1         mov        r13, rax
000000000000bab4         je         loc_ba8b

000000000000bab6         mov        rdi, qword [r14+0x28]
000000000000baba         mov        rsi, r13
000000000000babd         add        rdi, rbx
000000000000bac0         call       re_node_set_insert                          ; re_node_set_insert
000000000000bac5         test       al, al
000000000000bac7         je         loc_ba8b

000000000000bac9         mov        rcx, qword [rsp+0x48+var_40]
000000000000bace         mov        r8d, ebp
000000000000bad1         mov        rdx, r13
000000000000bad4         mov        rsi, r15
000000000000bad7         mov        rdi, r14
000000000000bada         call       duplicate_node_closure                      ; duplicate_node_closure
000000000000badf         test       eax, eax
000000000000bae1         je         loc_ba49

000000000000bae7         jmp        loc_ba90
000000000000bae9         align      16

                     loc_baf0:
000000000000baf0         cmp        r9, qword [rsp+0x48+var_40]                 ; CODE XREF=duplicate_node_closure+117
000000000000baf5         jne        loc_bb00

000000000000baf7         cmp        r9, r13
000000000000bafa         jne        loc_bbbc

                     loc_bb00:
000000000000bb00         mov        eax, dword [rax+8]                          ; CODE XREF=duplicate_node_closure+405
000000000000bb03         mov        rsi, r15
000000000000bb06         mov        rdi, r14
000000000000bb09         shr        eax, 0x8
000000000000bb0c         and        eax, 0x3ff
000000000000bb11         or         ebp, eax
000000000000bb13         mov        edx, ebp
000000000000bb15         call       duplicate_node                              ; duplicate_node
000000000000bb1a         cmp        rax, 0xffffffffffffffff
000000000000bb1e         mov        r13, rax
000000000000bb21         je         loc_ba8b

000000000000bb27         add        rbx, qword [r14+0x28]
000000000000bb2b         mov        rsi, rax
000000000000bb2e         mov        rdi, rbx
000000000000bb31         call       re_node_set_insert                          ; re_node_set_insert
000000000000bb36         test       al, al
000000000000bb38         je         loc_ba8b

000000000000bb3e         mov        r9, r15
000000000000bb41         jmp        loc_b97f
000000000000bb46         align      16

                     loc_bb50:
000000000000bb50         mov        rax, qword [r14+0x18]                       ; CODE XREF=duplicate_node_closure+55
000000000000bb54         lea        rbx, qword [r13+r13*2]
000000000000bb59         lea        r15, qword [r9*8]
000000000000bb61         mov        edx, ebp
000000000000bb63         shl        rbx, 0x3
000000000000bb67         mov        r9, qword [rax+r9*8]
000000000000bb6b         mov        qword [rdi+rbx+8], 0x0
000000000000bb74         mov        rdi, r14
000000000000bb77         mov        rsi, r9
000000000000bb7a         mov        qword [rsp+0x48+var_48], r9
000000000000bb7e         call       duplicate_node                              ; duplicate_node
000000000000bb83         cmp        rax, 0xffffffffffffffff
000000000000bb87         mov        r13, rax
000000000000bb8a         mov        r9, qword [rsp+0x48+var_48]
000000000000bb8e         je         loc_ba8b

000000000000bb94         mov        rax, qword [r14+0x18]
000000000000bb98         mov        qword [rsp+0x48+var_48], r9
000000000000bb9c         mov        rcx, qword [rax+r15]
000000000000bba0         mov        qword [rax+r12*8], rcx
000000000000bba4         jmp        loc_ba70

                     loc_bba9:
000000000000bba9         mov        rax, qword [r14+0x18]                       ; CODE XREF=duplicate_node_closure+80
000000000000bbad         mov        rcx, qword [rax+r9*8]
000000000000bbb1         mov        qword [rax+r13*8], rcx
000000000000bbb5         xor        eax, eax
000000000000bbb7         jmp        loc_ba90

                     loc_bbbc:
000000000000bbbc         mov        rsi, r15                                    ; CODE XREF=duplicate_node_closure+410
000000000000bbbf         call       re_node_set_insert                          ; re_node_set_insert
000000000000bbc4         mov        edx, eax
000000000000bbc6         xor        eax, eax
000000000000bbc8         test       dl, dl
000000000000bbca         jne        loc_ba90

000000000000bbd0         jmp        loc_ba8b
000000000000bbd5         align      32                                          ; End of unwind block (FDE at 0x1eae0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_state:
000000000000bbe0         push       rbx                                         ; Begin of unwind block (FDE at 0x1eb2c), CODE XREF=free_dfa_content+252, re_acquire_state_context+529, re_acquire_state+487
000000000000bbe1         mov        rbx, rdi
000000000000bbe4         mov        rdi, qword [rdi+0x30]                       ; argument "__ptr" for method j_free
000000000000bbe8         call       j_free                                      ; free
000000000000bbed         mov        rdi, qword [rbx+0x48]                       ; argument "__ptr" for method j_free
000000000000bbf1         call       j_free                                      ; free
000000000000bbf6         mov        rax, qword [rbx+0x50]
000000000000bbfa         lea        rdx, qword [rbx+8]
000000000000bbfe         cmp        rax, rdx
000000000000bc01         je         loc_bc15

000000000000bc03         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_free
000000000000bc07         call       j_free                                      ; free
000000000000bc0c         mov        rdi, qword [rbx+0x50]                       ; argument "__ptr" for method j_free
000000000000bc10         call       j_free                                      ; free

                     loc_bc15:
000000000000bc15         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free, CODE XREF=free_state+33
000000000000bc19         call       j_free                                      ; free
000000000000bc1e         mov        rdi, qword [rbx+0x60]                       ; argument "__ptr" for method j_free
000000000000bc22         call       j_free                                      ; free
000000000000bc27         mov        rdi, qword [rbx+0x58]                       ; argument "__ptr" for method j_free
000000000000bc2b         call       j_free                                      ; free
000000000000bc30         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
000000000000bc33         pop        rbx
000000000000bc34         jmp        j_free                                      ; free
                        ; endp
000000000000bc39         align      64                                          ; End of unwind block (FDE at 0x1eb2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_destruct:
000000000000bc40         push       rbx                                         ; Begin of unwind block (FDE at 0x1eb48), CODE XREF=re_search_internal+2932, re_compile_internal+887, sub_17480+983
000000000000bc41         mov        rbx, rdi
000000000000bc44         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_free
000000000000bc48         call       j_free                                      ; free
000000000000bc4d         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free
000000000000bc51         call       j_free                                      ; free
000000000000bc56         cmp        byte [rbx+0x8b], 0x0
000000000000bc5d         jne        loc_bc68

000000000000bc5f         pop        rbx
000000000000bc60         ret
                        ; endp
000000000000bc61         align      8

                     loc_bc68:
000000000000bc68         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_free, CODE XREF=re_string_destruct+29
000000000000bc6c         pop        rbx
000000000000bc6d         jmp        j_free                                      ; free
                        ; endp
000000000000bc72         align      128                                         ; End of unwind block (FDE at 0x1eb48)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_dfa_content:
000000000000bc80         push       r14                                         ; Begin of unwind block (FDE at 0x1eb68), CODE XREF=re_compile_internal+895, rpl_regfree+12
000000000000bc82         push       r13
000000000000bc84         push       r12
000000000000bc86         mov        r12, rdi
000000000000bc89         push       rbp
000000000000bc8a         push       rbx
000000000000bc8b         mov        rdi, qword [rdi]
000000000000bc8e         test       rdi, rdi
000000000000bc91         je         loc_bcbe

000000000000bc93         cmp        qword [r12+0x10], 0x0
000000000000bc99         je         loc_bcbe

000000000000bc9b         xor        ebx, ebx
000000000000bc9d         jmp        loc_bca4
000000000000bc9f         align      32

                     loc_bca0:
000000000000bca0         mov        rdi, qword [r12]                            ; CODE XREF=free_dfa_content+60

                     loc_bca4:
000000000000bca4         mov        rax, rbx                                    ; CODE XREF=free_dfa_content+29
000000000000bca7         add        rbx, 0x1
000000000000bcab         shl        rax, 0x4
000000000000bcaf         add        rdi, rax
000000000000bcb2         call       free_token                                  ; free_token
000000000000bcb7         cmp        qword [r12+0x10], rbx
000000000000bcbc         ja         loc_bca0

                     loc_bcbe:
000000000000bcbe         mov        rdi, qword [r12+0x18]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+17, free_dfa_content+25
000000000000bcc3         call       j_free                                      ; free
000000000000bcc8         cmp        qword [r12+0x10], 0x0
000000000000bcce         je         loc_bd23

000000000000bcd0         xor        ebx, ebx
000000000000bcd2         xor        ebp, ebp
000000000000bcd4         nop        dword [rax]

                     loc_bcd8:
000000000000bcd8         mov        rax, qword [r12+0x30]                       ; CODE XREF=free_dfa_content+161
000000000000bcdd         test       rax, rax
000000000000bce0         je         loc_bcec

000000000000bce2         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000bce7         call       j_free                                      ; free

                     loc_bcec:
000000000000bcec         mov        rax, qword [r12+0x38]                       ; CODE XREF=free_dfa_content+96
000000000000bcf1         test       rax, rax
000000000000bcf4         je         loc_bd00

000000000000bcf6         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000bcfb         call       j_free                                      ; free

                     loc_bd00:
000000000000bd00         mov        rax, qword [r12+0x28]                       ; CODE XREF=free_dfa_content+116
000000000000bd05         test       rax, rax
000000000000bd08         je         loc_bd14

000000000000bd0a         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000bd0f         call       j_free                                      ; free

                     loc_bd14:
000000000000bd14         add        rbp, 0x1                                    ; CODE XREF=free_dfa_content+136
000000000000bd18         add        rbx, 0x18
000000000000bd1c         cmp        qword [r12+0x10], rbp
000000000000bd21         ja         loc_bcd8

                     loc_bd23:
000000000000bd23         mov        rdi, qword [r12+0x28]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+78
000000000000bd28         call       j_free                                      ; free
000000000000bd2d         mov        rdi, qword [r12+0x30]                       ; argument "__ptr" for method j_free
000000000000bd32         call       j_free                                      ; free
000000000000bd37         mov        rdi, qword [r12+0x38]                       ; argument "__ptr" for method j_free
000000000000bd3c         call       j_free                                      ; free
000000000000bd41         mov        rdi, qword [r12]                            ; argument "__ptr" for method j_free
000000000000bd45         call       j_free                                      ; free
000000000000bd4a         mov        rdi, qword [r12+0x40]
000000000000bd4f         test       rdi, rdi
000000000000bd52         je         loc_bda7

000000000000bd54         xor        r14d, r14d
000000000000bd57         xor        r13d, r13d
000000000000bd5a         nop        word [rax+rax]

                     loc_bd60:
000000000000bd60         lea        rbp, qword [rdi+r14]                        ; CODE XREF=free_dfa_content+293
000000000000bd64         cmp        qword [rbp], 0x0
000000000000bd69         jle        loc_bd87

000000000000bd6b         xor        ebx, ebx
000000000000bd6d         nop        dword [rax]

                     loc_bd70:
000000000000bd70         mov        rax, qword [rbp+0x10]                       ; CODE XREF=free_dfa_content+261
000000000000bd74         mov        rdi, qword [rax+rbx*8]
000000000000bd78         add        rbx, 0x1
000000000000bd7c         call       free_state                                  ; free_state
000000000000bd81         cmp        qword [rbp], rbx
000000000000bd85         jg         loc_bd70

                     loc_bd87:
000000000000bd87         mov        rdi, qword [rbp+0x10]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+233
000000000000bd8b         add        r13, 0x1
000000000000bd8f         add        r14, 0x18
000000000000bd93         call       j_free                                      ; free
000000000000bd98         cmp        qword [r12+0x88], r13
000000000000bda0         mov        rdi, qword [r12+0x40]
000000000000bda5         jae        loc_bd60

                     loc_bda7:
000000000000bda7         call       j_free                                      ; free, CODE XREF=free_dfa_content+210
000000000000bdac         mov        rdi, qword [r12+0x78]
000000000000bdb1         lea        rax, qword [utf8_sb_map]                    ; utf8_sb_map
000000000000bdb8         cmp        rdi, rax
000000000000bdbb         je         loc_bdc2

000000000000bdbd         call       j_free                                      ; free

                     loc_bdc2:
000000000000bdc2         mov        rdi, qword [r12+0xe0]                       ; argument "__ptr" for method j_free, CODE XREF=free_dfa_content+315
000000000000bdca         call       j_free                                      ; free
000000000000bdcf         pop        rbx
000000000000bdd0         mov        rdi, r12                                    ; argument "__ptr" for method j_free
000000000000bdd3         pop        rbp
000000000000bdd4         pop        r12
000000000000bdd6         pop        r13
000000000000bdd8         pop        r14
000000000000bdda         jmp        j_free                                      ; free
                        ; endp
000000000000bddf         align      32                                          ; End of unwind block (FDE at 0x1eb68)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     match_ctx_clean:
000000000000bde0         push       r14                                         ; Begin of unwind block (FDE at 0x1eba4), CODE XREF=re_search_internal+3892, re_search_internal+5268
000000000000bde2         push       r13
000000000000bde4         mov        r14, rdi
000000000000bde7         push       r12
000000000000bde9         push       rbp
000000000000bdea         push       rbx
000000000000bdeb         cmp        qword [rdi+0xe8], 0x0
000000000000bdf3         jle        loc_be79

000000000000bdf9         xor        r13d, r13d
000000000000bdfc         nop        dword [rax]

                     loc_be00:
000000000000be00         mov        rax, qword [r14+0xf8]                       ; CODE XREF=match_ctx_clean+151
000000000000be07         mov        r12, qword [rax+r13*8]
000000000000be0b         cmp        qword [r12+0x20], 0x0
000000000000be11         jle        loc_be3d

000000000000be13         xor        ebx, ebx
000000000000be15         nop        dword [rax]

                     loc_be18:
000000000000be18         mov        rax, qword [r12+0x28]                       ; CODE XREF=match_ctx_clean+91
000000000000be1d         mov        rbp, qword [rax+rbx*8]
000000000000be21         add        rbx, 0x1
000000000000be25         mov        rdi, qword [rbp+0x20]                       ; argument "__ptr" for method j_free
000000000000be29         call       j_free                                      ; free
000000000000be2e         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
000000000000be31         call       j_free                                      ; free
000000000000be36         cmp        qword [r12+0x20], rbx
000000000000be3b         jg         loc_be18

                     loc_be3d:
000000000000be3d         mov        rdi, qword [r12+0x28]                       ; argument "__ptr" for method j_free, CODE XREF=match_ctx_clean+49
000000000000be42         call       j_free                                      ; free
000000000000be47         mov        rax, qword [r12+0x10]
000000000000be4c         test       rax, rax
000000000000be4f         je         loc_be64

000000000000be51         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_free
000000000000be55         call       j_free                                      ; free
000000000000be5a         mov        rdi, qword [r12+0x10]                       ; argument "__ptr" for method j_free
000000000000be5f         call       j_free                                      ; free

                     loc_be64:
000000000000be64         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=match_ctx_clean+111
000000000000be67         add        r13, 0x1
000000000000be6b         call       j_free                                      ; free
000000000000be70         cmp        qword [r14+0xe8], r13
000000000000be77         jg         loc_be00

                     loc_be79:
000000000000be79         pop        rbx                                         ; CODE XREF=match_ctx_clean+19
000000000000be7a         mov        qword [r14+0xe8], 0x0
000000000000be85         mov        qword [r14+0xc8], 0x0
000000000000be90         pop        rbp
000000000000be91         pop        r12
000000000000be93         pop        r13
000000000000be95         pop        r14
000000000000be97         ret
                        ; endp
000000000000be98         align      32                                          ; End of unwind block (FDE at 0x1eba4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_char_size_at.part.0:
000000000000bea0         mov        rcx, qword [rdi+0x30]                       ; Begin of unwind block (FDE at 0x1ebe0), CODE XREF=check_node_accept_bytes.isra.31+58, parse_bracket_element.constprop.37+59, parse_bracket_element.constprop.37+463
000000000000bea4         lea        rax, qword [rsi+1]
000000000000bea8         cmp        rax, rcx
000000000000beab         jge        loc_bee8

000000000000bead         mov        rdx, qword [rdi+0x10]
000000000000beb1         lea        rdi, qword [rax*4]
000000000000beb9         cmp        dword [rdx+rax*4], 0xffffffff
000000000000bebd         jne        loc_bee8

000000000000bebf         sub        rcx, rsi
000000000000bec2         lea        rsi, qword [rdx+rdi-4]
000000000000bec7         mov        edx, 0x2
000000000000becc         jmp        loc_bedb
000000000000bece         align      16

                     loc_bed0:
000000000000bed0         add        rdx, 0x1                                    ; CODE XREF=re_string_char_size_at.part.0+64
000000000000bed4         cmp        dword [rsi+rdx*4-4], 0xffffffff
000000000000bed9         jne        loc_beed

                     loc_bedb:
000000000000bedb         cmp        rdx, rcx                                    ; CODE XREF=re_string_char_size_at.part.0+44
000000000000bede         mov        eax, edx
000000000000bee0         jne        loc_bed0

000000000000bee2         ret
                        ; endp
000000000000bee4         align      8

                     loc_bee8:
000000000000bee8         mov        eax, 0x1                                    ; CODE XREF=re_string_char_size_at.part.0+11, re_string_char_size_at.part.0+29

                     loc_beed:
000000000000beed         ret                                                    ; CODE XREF=re_string_char_size_at.part.0+57
                        ; endp
000000000000beef         align      16                                          ; End of unwind block (FDE at 0x1ebe0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_compare.part.2:
000000000000bef0         mov        rdx, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x1ebf4), CODE XREF=re_acquire_state_context+163, re_acquire_state+128
000000000000bef4         xor        eax, eax
000000000000bef6         cmp        rdx, qword [rsi+8]
000000000000befa         je         loc_bf00

000000000000befc         ret
                        ; endp
000000000000befe         align      256

                     loc_bf00:
000000000000bf00         lea        rax, qword [rdx-1]                          ; CODE XREF=re_node_set_compare.part.2+10
000000000000bf04         lea        rdx, qword [rax*8]
000000000000bf0c         jmp        loc_bf2d
000000000000bf0e         align      16

                     loc_bf10:
000000000000bf10         mov        rcx, qword [rdi+0x10]                       ; CODE XREF=re_node_set_compare.part.2+64
000000000000bf14         mov        r8, qword [rcx+rdx]
000000000000bf18         mov        rcx, qword [rsi+0x10]
000000000000bf1c         mov        rcx, qword [rcx+rdx]
000000000000bf20         sub        rdx, 0x8
000000000000bf24         cmp        r8, rcx
000000000000bf27         jne        loc_bf40

000000000000bf29         sub        rax, 0x1

                     loc_bf2d:
000000000000bf2d         test       rax, rax                                    ; CODE XREF=re_node_set_compare.part.2+28
000000000000bf30         jns        loc_bf10

000000000000bf32         mov        eax, 0x1
000000000000bf37         ret
                        ; endp
000000000000bf38         align      64

                     loc_bf40:
000000000000bf40         xor        eax, eax                                    ; CODE XREF=re_node_set_compare.part.2+55
000000000000bf42         ret
                        ; endp
000000000000bf43         align      16                                          ; End of unwind block (FDE at 0x1ebf4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_contains.isra.3:
000000000000bf50         xor        eax, eax                                    ; Begin of unwind block (FDE at 0x1ec08), CODE XREF=check_arrival_expand_ecl_sub+43, expand_bkref_cache+371, expand_bkref_cache+537, expand_bkref_cache+599, sub_epsilon_src_nodes+124, sub_epsilon_src_nodes+264, sub_epsilon_src_nodes+305, sub_epsilon_src_nodes+350, sub_epsilon_src_nodes+372, sub_epsilon_src_nodes+435, sub_epsilon_src_nodes+456
000000000000bf52         test       rdi, rdi
000000000000bf55         jle        loc_bf95

000000000000bf57         mov        r8, qword [rsi]
000000000000bf5a         sub        rdi, 0x1
000000000000bf5e         xor        esi, esi

                     loc_bf60:
000000000000bf60         cmp        rsi, rdi                                    ; CODE XREF=re_node_set_contains.isra.3+103
000000000000bf63         jae        loc_bf8d

000000000000bf65         lea        rcx, qword [rsi+rdi]
000000000000bf69         shr        rcx, 0x1
000000000000bf6c         cmp        rdx, qword [r8+rcx*8]
000000000000bf70         jle        loc_bf88

000000000000bf72         jmp        loc_bfa0
000000000000bf74         align      8

                     loc_bf78:
000000000000bf78         lea        rax, qword [rsi+rcx]                        ; CODE XREF=re_node_set_contains.isra.3+59
000000000000bf7c         shr        rax, 0x1
000000000000bf7f         cmp        qword [r8+rax*8], rdx
000000000000bf83         jl         loc_bfb0

000000000000bf85         mov        rcx, rax

                     loc_bf88:
000000000000bf88         cmp        rsi, rcx                                    ; CODE XREF=re_node_set_contains.isra.3+32
000000000000bf8b         jb         loc_bf78

                     loc_bf8d:
000000000000bf8d         xor        eax, eax                                    ; CODE XREF=re_node_set_contains.isra.3+19
000000000000bf8f         cmp        rdx, qword [r8+rsi*8]
000000000000bf93         je         loc_bfc0

                     loc_bf95:
000000000000bf95         ret                                                    ; CODE XREF=re_node_set_contains.isra.3+5
                        ; endp
000000000000bf97         align      32

                     loc_bfa0:
000000000000bfa0         mov        rax, rcx                                    ; CODE XREF=re_node_set_contains.isra.3+34
000000000000bfa3         mov        rcx, rdi
000000000000bfa6         nop        word [cs:rax+rax]

                     loc_bfb0:
000000000000bfb0         lea        rsi, qword [rax+1]                          ; CODE XREF=re_node_set_contains.isra.3+51
000000000000bfb4         mov        rdi, rcx
000000000000bfb7         jmp        loc_bf60
000000000000bfb9         align      64

                     loc_bfc0:
000000000000bfc0         lea        rax, qword [rsi+1]                          ; CODE XREF=re_node_set_contains.isra.3+67
000000000000bfc4         ret
                        ; endp
000000000000bfc5         align      16                                          ; End of unwind block (FDE at 0x1ec08)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_arrival_expand_ecl_sub:
000000000000bfd0         push       r15                                         ; Begin of unwind block (FDE at 0x1ec1c), CODE XREF=check_arrival_expand_ecl_sub+224, check_arrival_expand_ecl+216
000000000000bfd2         push       r14
000000000000bfd4         lea        r14, qword [rsi+0x10]
000000000000bfd8         push       r13
000000000000bfda         push       r12
000000000000bfdc         mov        r15, rcx
000000000000bfdf         push       rbp
000000000000bfe0         push       rbx
000000000000bfe1         mov        r12, rdi
000000000000bfe4         mov        rbp, rsi
000000000000bfe7         mov        rbx, rdx
000000000000bfea         mov        r13d, r8d
000000000000bfed         sub        rsp, 0x8

                     loc_bff1:
000000000000bff1         mov        rdi, qword [rbp+8]                          ; CODE XREF=check_arrival_expand_ecl_sub+131
000000000000bff5         mov        rdx, rbx
000000000000bff8         mov        rsi, r14
000000000000bffb         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000c000         test       rax, rax
000000000000c003         jne        loc_c070

000000000000c005         mov        rax, rbx
000000000000c008         shl        rax, 0x4
000000000000c00c         add        rax, qword [r12]
000000000000c010         movzx      edx, byte [rax+8]
000000000000c014         cmp        edx, r13d
000000000000c017         jne        loc_c01e

000000000000c019         cmp        qword [rax], r15
000000000000c01c         je         loc_c058

                     loc_c01e:
000000000000c01e         mov        rsi, rbx                                    ; CODE XREF=check_arrival_expand_ecl_sub+71
000000000000c021         mov        rdi, rbp
000000000000c024         call       re_node_set_insert                          ; re_node_set_insert
000000000000c029         test       al, al
000000000000c02b         je         loc_c088

000000000000c02d         lea        rbx, qword [rbx+rbx*2]
000000000000c031         mov        rdx, qword [r12+0x28]
000000000000c036         shl        rbx, 0x3
000000000000c03a         add        rdx, rbx
000000000000c03d         mov        rax, qword [rdx+8]
000000000000c041         test       rax, rax
000000000000c044         je         loc_c070

000000000000c046         cmp        rax, 0x2
000000000000c04a         mov        rdx, qword [rdx+0x10]
000000000000c04e         je         loc_c0a0

                     loc_c050:
000000000000c050         mov        rbx, qword [rdx]                            ; CODE XREF=check_arrival_expand_ecl_sub+243
000000000000c053         jmp        loc_bff1
000000000000c055         align      8

                     loc_c058:
000000000000c058         cmp        r13d, 0x9                                   ; CODE XREF=check_arrival_expand_ecl_sub+76
000000000000c05c         jne        loc_c070

000000000000c05e         mov        rsi, rbx
000000000000c061         mov        rdi, rbp
000000000000c064         call       re_node_set_insert                          ; re_node_set_insert
000000000000c069         test       al, al
000000000000c06b         je         loc_c088

000000000000c06d         nop        dword [rax]

                     loc_c070:
000000000000c070         xor        eax, eax                                    ; CODE XREF=check_arrival_expand_ecl_sub+51, check_arrival_expand_ecl_sub+116, check_arrival_expand_ecl_sub+140

                     loc_c072:
000000000000c072         add        rsp, 0x8                                    ; CODE XREF=check_arrival_expand_ecl_sub+231
000000000000c076         pop        rbx
000000000000c077         pop        rbp
000000000000c078         pop        r12
000000000000c07a         pop        r13
000000000000c07c         pop        r14
000000000000c07e         pop        r15
000000000000c080         ret
                        ; endp
000000000000c081         align      8

                     loc_c088:
000000000000c088         add        rsp, 0x8                                    ; CODE XREF=check_arrival_expand_ecl_sub+91, check_arrival_expand_ecl_sub+155
000000000000c08c         mov        eax, 0xc
000000000000c091         pop        rbx
000000000000c092         pop        rbp
000000000000c093         pop        r12
000000000000c095         pop        r13
000000000000c097         pop        r14
000000000000c099         pop        r15
000000000000c09b         ret
                        ; endp
000000000000c09c         align      32

                     loc_c0a0:
000000000000c0a0         mov        rdx, qword [rdx+8]                          ; CODE XREF=check_arrival_expand_ecl_sub+126
000000000000c0a4         mov        r8d, r13d
000000000000c0a7         mov        rcx, r15
000000000000c0aa         mov        rsi, rbp
000000000000c0ad         mov        rdi, r12
000000000000c0b0         call       check_arrival_expand_ecl_sub                ; check_arrival_expand_ecl_sub
000000000000c0b5         test       eax, eax
000000000000c0b7         jne        loc_c072

000000000000c0b9         mov        rax, qword [r12+0x28]
000000000000c0be         mov        rdx, qword [rax+rbx+0x10]
000000000000c0c3         jmp        loc_c050
000000000000c0c5         align      16                                          ; End of unwind block (FDE at 0x1ec1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_remove_at.isra.4.part.5:
000000000000c0d0         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0x1ec80), CODE XREF=re_acquire_state_context+473, sub_epsilon_src_nodes+477, update_cur_sifted_state+1890
000000000000c0d3         cmp        rax, rdx
000000000000c0d6         jle        loc_c102

000000000000c0d8         sub        rax, 0x1
000000000000c0dc         cmp        rdx, rax
000000000000c0df         mov        qword [rdi], rax
000000000000c0e2         jge        loc_c102

000000000000c0e4         mov        rax, qword [rsi]
000000000000c0e7         nop        word [rax+rax]

                     loc_c0f0:
000000000000c0f0         mov        rcx, qword [rax+rdx*8+8]                    ; CODE XREF=re_node_set_remove_at.isra.4.part.5+48
000000000000c0f5         mov        qword [rax+rdx*8], rcx
000000000000c0f9         add        rdx, 0x1
000000000000c0fd         cmp        rdx, qword [rdi]
000000000000c100         jl         loc_c0f0

                     loc_c102:
000000000000c102         ret                                                    ; CODE XREF=re_node_set_remove_at.isra.4.part.5+6, re_node_set_remove_at.isra.4.part.5+18
                        ; endp
000000000000c104         align      16                                          ; End of unwind block (FDE at 0x1ec80)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     optimize_subexps:
000000000000c110         movzx      eax, byte [rsi+0x30]                        ; Begin of unwind block (FDE at 0x1ec94), DATA XREF=re_compile_internal+1553
000000000000c114         cmp        al, 0x4
000000000000c116         je         loc_c170

000000000000c118         cmp        al, 0x11
000000000000c11a         je         loc_c120

                     loc_c11c:
000000000000c11c         xor        eax, eax                                    ; CODE XREF=optimize_subexps+23, optimize_subexps+29, optimize_subexps+74, optimize_subexps+93, optimize_subexps+106
000000000000c11e         ret
                        ; endp
000000000000c11f         align      32

                     loc_c120:
000000000000c120         mov        rax, qword [rsi+8]                          ; CODE XREF=optimize_subexps+10
000000000000c124         test       rax, rax
000000000000c127         je         loc_c11c

000000000000c129         cmp        byte [rax+0x30], 0x11
000000000000c12d         jne        loc_c11c

000000000000c12f         mov        rcx, qword [rax+0x28]
000000000000c133         mov        rax, qword [rax+8]
000000000000c137         test       rax, rax
000000000000c13a         mov        qword [rsi+8], rax
000000000000c13e         je         loc_c143

000000000000c140         mov        qword [rax], rsi

                     loc_c143:
000000000000c143         mov        rax, qword [rdi+0xe0]                       ; CODE XREF=optimize_subexps+46
000000000000c14a         mov        rdx, qword [rsi+0x28]
000000000000c14e         cmp        rcx, 0x3f
000000000000c152         mov        rdx, qword [rax+rdx*8]
000000000000c156         mov        qword [rax+rcx*8], rdx
000000000000c15a         jg         loc_c11c

000000000000c15c         mov        rax, 0xfffffffffffffffe
000000000000c163         rol        rax, cl
000000000000c166         and        qword [rdi+0xa0], rax
000000000000c16d         jmp        loc_c11c
000000000000c16f         align      16

                     loc_c170:
000000000000c170         mov        rax, qword [rdi+0xe0]                       ; CODE XREF=optimize_subexps+6
000000000000c177         test       rax, rax
000000000000c17a         je         loc_c11c

000000000000c17c         movsxd     rdx, dword [rsi+0x28]
000000000000c180         mov        rcx, qword [rax+rdx*8]
000000000000c184         mov        eax, 0x1
000000000000c189         shl        eax, cl
000000000000c18b         mov        qword [rsi+0x28], rcx
000000000000c18f         cdqe
000000000000c191         or         qword [rdi+0xa0], rax
000000000000c198         xor        eax, eax
000000000000c19a         ret
                        ; endp
000000000000c19b         align      32                                          ; End of unwind block (FDE at 0x1ec94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     calc_next:
000000000000c1a0         movzx      eax, byte [rsi+0x30]                        ; Begin of unwind block (FDE at 0x1eca8), DATA XREF=re_compile_internal+1689
000000000000c1a4         mov        rdx, qword [rsi+8]
000000000000c1a8         cmp        al, 0xb
000000000000c1aa         je         loc_c1f0

000000000000c1ac         cmp        al, 0x10
000000000000c1ae         je         loc_c1d8

000000000000c1b0         test       rdx, rdx
000000000000c1b3         je         loc_c1bd

000000000000c1b5         mov        rax, qword [rsi+0x20]
000000000000c1b9         mov        qword [rdx+0x20], rax

                     loc_c1bd:
000000000000c1bd         mov        rax, qword [rsi+0x10]                       ; CODE XREF=calc_next+19
000000000000c1c1         test       rax, rax
000000000000c1c4         je         loc_c1ce

000000000000c1c6         mov        rdx, qword [rsi+0x20]
000000000000c1ca         mov        qword [rax+0x20], rdx

                     loc_c1ce:
000000000000c1ce         xor        eax, eax                                    ; CODE XREF=calc_next+36
000000000000c1d0         ret
                        ; endp
000000000000c1d1         align      8

                     loc_c1d8:
000000000000c1d8         mov        rax, qword [rsi+0x10]                       ; CODE XREF=calc_next+14
000000000000c1dc         mov        rcx, qword [rax+0x18]
000000000000c1e0         mov        qword [rdx+0x20], rcx
000000000000c1e4         mov        rdx, qword [rsi+0x20]
000000000000c1e8         mov        qword [rax+0x20], rdx
000000000000c1ec         xor        eax, eax
000000000000c1ee         ret
                        ; endp
000000000000c1ef         align      16

                     loc_c1f0:
000000000000c1f0         mov        qword [rdx+0x20], rsi                       ; CODE XREF=calc_next+10
000000000000c1f4         xor        eax, eax
000000000000c1f6         ret
                        ; endp
000000000000c1f7         align      512                                         ; End of unwind block (FDE at 0x1eca8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112


                     check_dst_limits.isra.13:
000000000000c200         push       r15                                         ; Begin of unwind block (FDE at 0x1ecbc), CODE XREF=sift_states_backward+396, update_cur_sifted_state+1699
000000000000c202         push       r14
000000000000c204         push       r13
000000000000c206         push       r12
000000000000c208         push       rbp
000000000000c209         push       rbx
000000000000c20a         xor        ebx, ebx
000000000000c20c         sub        rsp, 0x48
000000000000c210         mov        rax, qword [rdi+0x98]
000000000000c217         mov        r15, qword [rdi+0xc8]
000000000000c21e         mov        r12, qword [rsp+0x78+arg_0]
000000000000c226         mov        qword [rsp+0x78+var_70], rax
000000000000c22b         mov        rbp, r15

                     loc_c22e:
000000000000c22e         cmp        rbx, rbp                                    ; CODE XREF=check_dst_limits.isra.13+519
000000000000c231         jge        loc_c28b

000000000000c233         lea        rax, qword [rbx+rbp]
000000000000c237         mov        r13, qword [rdi+0xd8]
000000000000c23e         mov        r10, rax
000000000000c241         shr        r10, 0x3f
000000000000c245         add        r10, rax
000000000000c248         sar        r10, 0x1
000000000000c24b         lea        rax, qword [r10+r10*4]
000000000000c24f         cmp        r8, qword [r13+rax*8+8]
000000000000c254         jle        loc_c286

000000000000c256         jmp        loc_c3f0
000000000000c25b         align      32

                     loc_c260:
000000000000c260         lea        r11, qword [rbx+r10]                        ; CODE XREF=check_dst_limits.isra.13+137
000000000000c264         mov        rax, r11
000000000000c267         shr        rax, 0x3f
000000000000c26b         add        rax, r11
000000000000c26e         sar        rax, 0x1
000000000000c271         lea        r11, qword [rax+rax*4]
000000000000c275         mov        r14, rax
000000000000c278         cmp        qword [r13+r11*8+8], r8
000000000000c27d         jl         loc_c400

000000000000c283         mov        r10, rax

                     loc_c286:
000000000000c286         cmp        rbx, r10                                    ; CODE XREF=check_dst_limits.isra.13+84
000000000000c289         jl         loc_c260

                     loc_c28b:
000000000000c28b         cmp        r15, rbx                                    ; CODE XREF=check_dst_limits.isra.13+49
000000000000c28e         jle        loc_c430

000000000000c294         mov        r11, qword [rdi+0xd8]
000000000000c29b         lea        rax, qword [rbx+rbx*4]
000000000000c29f         lea        rax, qword [r11+rax*8]
000000000000c2a3         cmp        r8, qword [rax+8]
000000000000c2a7         mov        rax, 0xffffffffffffffff
000000000000c2ae         cmovne     rbx, rax

                     loc_c2b2:
000000000000c2b2         mov        rax, r15                                    ; CODE XREF=sub_c410+39
000000000000c2b5         xor        ebp, ebp

                     loc_c2b7:
000000000000c2b7         cmp        rbp, rax                                    ; CODE XREF=sub_c410+23
000000000000c2ba         jge        loc_c314

000000000000c2bc         lea        r11, qword [rbp+rax]
000000000000c2c1         mov        r10, r11
000000000000c2c4         shr        r10, 0x3f
000000000000c2c8         add        r10, r11
000000000000c2cb         mov        r11, qword [rdi+0xd8]
000000000000c2d2         sar        r10, 0x1
000000000000c2d5         lea        r13, qword [r10+r10*4]
000000000000c2d9         cmp        r12, qword [r11+r13*8+8]
000000000000c2de         jle        loc_c30f

000000000000c2e0         jmp        sub_c410                                    ; sub_c410
                        ; endp
000000000000c2e5         align      8

                     loc_c2e8:
000000000000c2e8         lea        r13, qword [rbp+r10]                        ; CODE XREF=check_dst_limits.isra.13+274
000000000000c2ed         mov        rax, r13
000000000000c2f0         shr        rax, 0x3f
000000000000c2f4         add        rax, r13
000000000000c2f7         sar        rax, 0x1
000000000000c2fa         lea        r13, qword [rax+rax*4]
000000000000c2fe         mov        r14, rax
000000000000c301         cmp        qword [r11+r13*8+8], r12
000000000000c306         jl         loc_c420

000000000000c30c         mov        r10, rax

                     loc_c30f:
000000000000c30f         cmp        rbp, r10                                    ; CODE XREF=check_dst_limits.isra.13+222
000000000000c312         jl         loc_c2e8

                     loc_c314:
000000000000c314         cmp        r15, rbp                                    ; CODE XREF=check_dst_limits.isra.13+186
000000000000c317         jle        loc_c440

000000000000c31d         mov        r10, qword [rdi+0xd8]
000000000000c324         lea        rax, qword [rbp+rbp*4]
000000000000c329         lea        rax, qword [r10+rax*8]
000000000000c32d         cmp        r12, qword [rax+8]
000000000000c331         mov        rax, 0xffffffffffffffff
000000000000c338         cmovne     rbp, rax

                     loc_c33c:
000000000000c33c         cmp        qword [rsi], 0x0                            ; CODE XREF=sub_c410+55
000000000000c340         jle        loc_c462

000000000000c346         mov        qword [rsp+0x78+var_48], rbp
000000000000c34b         mov        qword [rsp+0x78+var_58], r9
000000000000c350         mov        r13, rdi
000000000000c353         mov        qword [rsp+0x78+var_60], r8
000000000000c358         mov        qword [rsp+0x78+var_68], rcx
000000000000c35d         xor        r14d, r14d
000000000000c360         mov        qword [rsp+0x78+var_40], rsi
000000000000c365         mov        qword [rsp+0x78+var_50], rbx
000000000000c36a         mov        rbp, rdx
000000000000c36d         mov        r15, r12

                     loc_c370:
000000000000c370         mov        rax, qword [rbp]                            ; CODE XREF=sub_c410+76
000000000000c374         mov        rdx, qword [r13+0xd8]
000000000000c37b         mov        rdi, r13
000000000000c37e         mov        r9, qword [rsp+0x78+var_50]
000000000000c383         mov        r8, qword [rsp+0x78+var_60]
000000000000c388         mov        rcx, qword [rsp+0x78+var_68]
000000000000c38d         mov        rsi, qword [rax+r14*8]
000000000000c391         lea        rax, qword [rsi+rsi*4]
000000000000c395         lea        rax, qword [rdx+rax*8]
000000000000c399         mov        rdx, qword [rsp+0x78+var_70]
000000000000c39e         mov        rax, qword [rax]
000000000000c3a1         shl        rax, 0x4
000000000000c3a5         add        rax, qword [rdx]
000000000000c3a8         mov        r12, qword [rax]
000000000000c3ab         mov        rdx, r12
000000000000c3ae         call       check_dst_limits_calc_pos                   ; check_dst_limits_calc_pos
000000000000c3b3         mov        ebx, eax
000000000000c3b5         mov        rax, qword [rbp]
000000000000c3b9         mov        r9, qword [rsp+0x78+var_48]
000000000000c3be         mov        rcx, qword [rsp+0x78+var_58]
000000000000c3c3         mov        r8, r15
000000000000c3c6         mov        rdx, r12
000000000000c3c9         mov        rdi, r13
000000000000c3cc         mov        rsi, qword [rax+r14*8]
000000000000c3d0         call       check_dst_limits_calc_pos                   ; check_dst_limits_calc_pos
000000000000c3d5         cmp        ebx, eax
000000000000c3d7         je         loc_c450

000000000000c3d9         mov        eax, 0x1

                     loc_c3de:
000000000000c3de         add        rsp, 0x48                                   ; CODE XREF=sub_c410+84
000000000000c3e2         pop        rbx
000000000000c3e3         pop        rbp
000000000000c3e4         pop        r12
000000000000c3e6         pop        r13
000000000000c3e8         pop        r14
000000000000c3ea         pop        r15
000000000000c3ec         ret
                        ; endp
000000000000c3ed         align      16

                     loc_c3f0:
000000000000c3f0         mov        r14, r10                                    ; CODE XREF=check_dst_limits.isra.13+86
000000000000c3f3         mov        r10, rbp
000000000000c3f6         nop        word [cs:rax+rax]

                     loc_c400:
000000000000c400         lea        rbx, qword [r14+1]                          ; CODE XREF=check_dst_limits.isra.13+125
000000000000c404         mov        rbp, r10
000000000000c407         jmp        loc_c22e
000000000000c40c         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_c410:
000000000000c410         mov        r14, r10                                    ; CODE XREF=check_dst_limits.isra.13+224
000000000000c413         mov        r10, rax
000000000000c416         nop        word [cs:rax+rax]
                        ; endp

                     loc_c420:
000000000000c420         lea        rbp, qword [r14+1]                          ; CODE XREF=check_dst_limits.isra.13+262
000000000000c424         mov        rax, r10
000000000000c427         jmp        loc_c2b7
000000000000c42c         align      16

                     loc_c430:
000000000000c430         mov        rbx, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits.isra.13+142
000000000000c437         jmp        loc_c2b2
000000000000c43c         align      64

                     loc_c440:
000000000000c440         mov        rbp, 0xffffffffffffffff                     ; CODE XREF=check_dst_limits.isra.13+279
000000000000c447         jmp        loc_c33c
000000000000c44c         align      16

                     loc_c450:
000000000000c450         mov        rax, qword [rsp+0x78+var_40]                ; CODE XREF=check_dst_limits.isra.13+471
000000000000c455         add        r14, 0x1
000000000000c459         cmp        r14, qword [rax]
000000000000c45c         jl         loc_c370

                     loc_c462:
000000000000c462         xor        eax, eax                                    ; CODE XREF=check_dst_limits.isra.13+320
000000000000c464         jmp        loc_c3de
000000000000c469         align      16                                          ; End of unwind block (FDE at 0x1ecbc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_merge:
000000000000c470         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x1ed0c), CODE XREF=calc_eclosure_iter+306, check_arrival_expand_ecl+275, expand_bkref_cache+694, build_trtable+557, check_arrival+389, check_arrival+692, update_cur_sifted_state+870, sub_17480+791
000000000000c473         je         loc_c568

000000000000c479         mov        rdx, qword [rsi+8]
000000000000c47d         test       rdx, rdx
000000000000c480         je         loc_c568

000000000000c486         push       r12
000000000000c488         push       rbp
000000000000c489         mov        r12, rsi
000000000000c48c         push       rbx
000000000000c48d         mov        rax, qword [rdi+8]
000000000000c491         mov        rbx, rdi
000000000000c494         mov        rsi, qword [rdi]
000000000000c497         lea        rcx, qword [rax+rdx*2]
000000000000c49b         cmp        rsi, rcx
000000000000c49e         jl         loc_c5e8

                     loc_c4a4:
000000000000c4a4         test       rax, rax                                    ; CODE XREF=re_node_set_merge+420
000000000000c4a7         je         loc_c620

000000000000c4ad         lea        rbp, qword [rax+rdx*2]
000000000000c4b1         sub        rdx, 0x1
000000000000c4b5         sub        rax, 0x1
000000000000c4b9         mov        rdi, rdx
000000000000c4bc         not        rdi

                     loc_c4bf:
000000000000c4bf         test       rdi, rdi                                    ; CODE XREF=re_node_set_merge+270, re_node_set_merge+284
000000000000c4c2         jns        loc_c500

                     loc_c4c4:
000000000000c4c4         test       rax, rax                                    ; CODE XREF=re_node_set_merge+139
000000000000c4c7         js         loc_c500

000000000000c4c9         mov        rcx, qword [rbx+0x10]
000000000000c4cd         mov        rsi, qword [r12+0x10]
000000000000c4d2         mov        rsi, qword [rsi+rdx*8]
000000000000c4d6         cmp        qword [rcx+rax*8], rsi
000000000000c4da         je         loc_c570

000000000000c4e0         jge        loc_c588

000000000000c4e6         sub        rdx, 0x1
000000000000c4ea         sub        rbp, 0x1
000000000000c4ee         mov        rdi, rdx
000000000000c4f1         mov        qword [rcx+rbp*8], rsi
000000000000c4f5         not        rdi
000000000000c4f8         test       rdi, rdi
000000000000c4fb         js         loc_c4c4

000000000000c4fd         nop        dword [rax]

                     loc_c500:
000000000000c500         test       rdx, rdx                                    ; CODE XREF=re_node_set_merge+82, re_node_set_merge+87
000000000000c503         jns        loc_c598

                     loc_c509:
000000000000c509         mov        rcx, qword [rbx+8]                          ; CODE XREF=re_node_set_merge+325
000000000000c50d         mov        rax, qword [r12+8]
000000000000c512         lea        r8, qword [rcx+rax*2-1]
000000000000c517         mov        rdx, r8
000000000000c51a         sub        rdx, rbp
000000000000c51d         add        rdx, 0x1
000000000000c521         je         loc_c55a

000000000000c523         mov        rdi, qword [rbx+0x10]
000000000000c527         lea        rax, qword [rcx-1]
000000000000c52b         add        rcx, rdx
000000000000c52e         mov        qword [rbx+8], rcx
000000000000c532         nop        word [rax+rax]

                     loc_c538:
000000000000c538         mov        rsi, qword [rdi+r8*8]                       ; CODE XREF=re_node_set_merge+232, re_node_set_merge+343
000000000000c53c         mov        rcx, qword [rdi+rax*8]
000000000000c540         lea        r9, qword [rax+rdx]
000000000000c544         lea        r9, qword [rdi+r9*8]
000000000000c548         cmp        rsi, rcx
000000000000c54b         jle        loc_c5c0

000000000000c54d         sub        r8, 0x1
000000000000c551         sub        rdx, 0x1
000000000000c555         mov        qword [r9], rsi
000000000000c558         jne        loc_c538

                     loc_c55a:
000000000000c55a         xor        eax, eax                                    ; CODE XREF=re_node_set_merge+177, re_node_set_merge+463

                     loc_c55c:
000000000000c55c         pop        rbx                                         ; CODE XREF=re_node_set_merge+364, re_node_set_merge+473
000000000000c55d         pop        rbp
000000000000c55e         pop        r12
000000000000c560         ret
                        ; endp
000000000000c561         align      8

                     loc_c568:
000000000000c568         xor        eax, eax                                    ; CODE XREF=re_node_set_merge+3, re_node_set_merge+16
000000000000c56a         ret
                        ; endp
000000000000c56b         align      16

                     loc_c570:
000000000000c570         sub        rdx, 0x1                                    ; CODE XREF=re_node_set_merge+106
000000000000c574         sub        rax, 0x1
000000000000c578         mov        rdi, rdx
000000000000c57b         not        rdi
000000000000c57e         jmp        loc_c4bf
000000000000c583         align      8

                     loc_c588:
000000000000c588         sub        rax, 0x1                                    ; CODE XREF=re_node_set_merge+112
000000000000c58c         jmp        loc_c4bf
000000000000c591         align      8

                     loc_c598:
000000000000c598         mov        rax, qword [rbx+0x10]                       ; CODE XREF=re_node_set_merge+147
000000000000c59c         add        rdx, 0x1
000000000000c5a0         mov        rsi, qword [r12+0x10]                       ; argument "__src" for method j_memcpy
000000000000c5a5         sub        rbp, rdx
000000000000c5a8         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
000000000000c5ac         lea        rdi, qword [rax+rbp*8]                      ; argument "__dest" for method j_memcpy
000000000000c5b0         call       j_memcpy                                    ; memcpy
000000000000c5b5         jmp        loc_c509
000000000000c5ba         align      64

                     loc_c5c0:
000000000000c5c0         sub        rax, 0x1                                    ; CODE XREF=re_node_set_merge+219
000000000000c5c4         mov        qword [r9], rcx
000000000000c5c7         jns        loc_c538

000000000000c5cd         lea        rsi, qword [rdi+rbp*8]                      ; argument "__src" for method j_memcpy
000000000000c5d1         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
000000000000c5d5         call       j_memcpy                                    ; memcpy
000000000000c5da         xor        eax, eax
000000000000c5dc         jmp        loc_c55c
000000000000c5e1         align      8

                     loc_c5e8:
000000000000c5e8         add        rdx, rsi                                    ; CODE XREF=re_node_set_merge+46
000000000000c5eb         mov        rdi, qword [rdi+0x10]                       ; argument "__ptr" for method j_realloc
000000000000c5ef         lea        rbp, qword [rdx+rdx]
000000000000c5f3         shl        rdx, 0x4
000000000000c5f7         mov        rsi, rdx                                    ; argument "__size" for method j_realloc
000000000000c5fa         call       j_realloc                                   ; realloc
000000000000c5ff         test       rax, rax
000000000000c602         je         loc_c644

000000000000c604         mov        qword [rbx+0x10], rax
000000000000c608         mov        qword [rbx], rbp
000000000000c60b         mov        rax, qword [rbx+8]
000000000000c60f         mov        rdx, qword [r12+8]
000000000000c614         jmp        loc_c4a4
000000000000c619         align      32

                     loc_c620:
000000000000c620         mov        qword [rbx+8], rdx                          ; CODE XREF=re_node_set_merge+55
000000000000c624         mov        rax, qword [r12+8]
000000000000c629         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memcpy
000000000000c62d         mov        rsi, qword [r12+0x10]                       ; argument "__src" for method j_memcpy
000000000000c632         lea        rdx, qword [rax*8]                          ; argument "__n" for method j_memcpy
000000000000c63a         call       j_memcpy                                    ; memcpy
000000000000c63f         jmp        loc_c55a

                     loc_c644:
000000000000c644         mov        eax, 0xc                                    ; CODE XREF=re_node_set_merge+402
000000000000c649         jmp        loc_c55c
000000000000c64e         align      16                                          ; End of unwind block (FDE at 0x1ed0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_7D: int8_t, -125
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144


                     calc_eclosure_iter:
000000000000c650         push       r15                                         ; Begin of unwind block (FDE at 0x1ed44), CODE XREF=calc_eclosure_iter+654, sub_17480+170
000000000000c652         push       r14
000000000000c654         mov        r15, rsi
000000000000c657         push       r13
000000000000c659         push       r12
000000000000c65b         push       rbp
000000000000c65c         push       rbx
000000000000c65d         lea        rbx, qword [rdx+rdx*2]
000000000000c661         mov        rbp, rdx
000000000000c664         sub        rsp, 0x68
000000000000c668         mov        r12, qword [rsi+0x28]
000000000000c66c         shl        rbx, 0x3
000000000000c670         mov        rax, qword [fs:0x28]
000000000000c679         mov        qword [rsp+0x98+var_40], rax
000000000000c67e         xor        eax, eax
000000000000c680         mov        qword [rsp+0x98+var_88], rdi
000000000000c685         mov        dword [rsp+0x98+var_7C], ecx
000000000000c689         add        r12, rbx
000000000000c68c         mov        rax, qword [r12+8]
000000000000c691         mov        qword [rsp+0x98+var_70], 0x0
000000000000c69a         lea        rdi, qword [rax+1]
000000000000c69e         mov        qword [rsp+0x98+var_78], rdi
000000000000c6a3         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
000000000000c6a7         call       j_malloc                                    ; malloc
000000000000c6ac         test       rax, rax
000000000000c6af         mov        qword [rsp+0x98+var_68], rax
000000000000c6b4         je         loc_c8f0

000000000000c6ba         mov        rax, qword [r15+0x30]
000000000000c6be         mov        rdx, qword [r15]
000000000000c6c1         mov        r13, rbp
000000000000c6c4         shl        r13, 0x4
000000000000c6c8         mov        qword [rax+rbx+8], 0xffffffffffffffff
000000000000c6d1         lea        rax, qword [rdx+r13]
000000000000c6d5         mov        r8d, dword [rax+8]
000000000000c6d9         test       r8d, 0x3ff00
000000000000c6e0         jne        loc_c880

                     loc_c6e6:
000000000000c6e6         test       byte [rax+8], 0x8                           ; CODE XREF=calc_eclosure_iter+589, calc_eclosure_iter+637
000000000000c6ea         je         loc_c7b0

000000000000c6f0         mov        rsi, qword [r15+0x28]
000000000000c6f4         lea        rax, qword [rsi+rbx]
000000000000c6f8         cmp        qword [rax+8], 0x0
000000000000c6fd         jle        loc_c7b0

000000000000c703         lea        rdx, qword [rsp+0x98+var_78]
000000000000c708         mov        byte [rsp+0x98+var_7D], 0x0
000000000000c70d         xor        r14d, r14d
000000000000c710         lea        r12, qword [rsp+0x98+var_58]
000000000000c715         mov        qword [rsp+0x98+var_90], rdx
000000000000c71a         jmp        loc_c736
000000000000c71c         align      32

                     loc_c720:
000000000000c720         mov        rsi, qword [r15+0x28]                       ; CODE XREF=calc_eclosure_iter+325, calc_eclosure_iter+342
000000000000c724         add        r14, 0x1
000000000000c728         lea        rax, qword [rsi+rbx]
000000000000c72c         cmp        qword [rax+8], r14
000000000000c730         jle        loc_c837

                     loc_c736:
000000000000c736         mov        rax, qword [rax+0x10]                       ; CODE XREF=calc_eclosure_iter+202, calc_eclosure_iter+481
000000000000c73a         mov        rdx, qword [rax+r14*8]
000000000000c73e         mov        rax, qword [r15+0x30]
000000000000c742         lea        r8, qword [rdx+rdx*2]
000000000000c746         lea        r13, qword [r8*8]
000000000000c74e         add        rax, r13
000000000000c751         mov        rcx, qword [rax+8]
000000000000c755         cmp        rcx, 0xffffffffffffffff
000000000000c759         je         loc_c820

000000000000c75f         test       rcx, rcx
000000000000c762         je         loc_c8d8

000000000000c768         movdqu     xmm0, xmmword [rax]
000000000000c76c         movaps     xmmword [rsp+0x98+var_58], xmm0
000000000000c771         mov        rax, qword [rax+0x10]
000000000000c775         mov        qword [rsp+0x98+var_48], rax

                     loc_c77a:
000000000000c77a         mov        rdi, qword [rsp+0x98+var_90]                ; CODE XREF=calc_eclosure_iter+661
000000000000c77f         mov        rsi, r12
000000000000c782         call       re_node_set_merge                           ; re_node_set_merge
000000000000c787         test       eax, eax
000000000000c789         jne        loc_c7f6

000000000000c78b         mov        rax, qword [r15+0x30]
000000000000c78f         cmp        qword [rax+r13+8], 0x0
000000000000c795         jne        loc_c720

000000000000c797         mov        rdi, qword [rsp+0x98+var_48]                ; argument "__ptr" for method j_free
000000000000c79c         call       j_free                                      ; free
000000000000c7a1         mov        byte [rsp+0x98+var_7D], 0x1
000000000000c7a6         jmp        loc_c720
000000000000c7ab         align      16

                     loc_c7b0:
000000000000c7b0         lea        rdi, qword [rsp+0x98+var_78]                ; CODE XREF=calc_eclosure_iter+154, calc_eclosure_iter+173, calc_eclosure_iter+566
000000000000c7b5         mov        rsi, rbp
000000000000c7b8         call       re_node_set_insert                          ; re_node_set_insert
000000000000c7bd         test       al, al
000000000000c7bf         je         loc_c8f0

000000000000c7c5         mov        rax, qword [r15+0x30]

                     loc_c7c9:
000000000000c7c9         movdqa     xmm0, xmmword [rsp+0x98+var_78]             ; CODE XREF=calc_eclosure_iter+521, calc_eclosure_iter+532
000000000000c7cf         movups     xmmword [rax+rbx], xmm0
000000000000c7d3         mov        rdx, qword [rsp+0x98+var_68]
000000000000c7d8         mov        qword [rax+rbx+0x10], rdx

                     loc_c7dd:
000000000000c7dd         mov        rbx, qword [rsp+0x98+var_88]                ; CODE XREF=calc_eclosure_iter+546
000000000000c7e2         mov        rax, qword [rsp+0x98+var_68]
000000000000c7e7         movdqa     xmm0, xmmword [rsp+0x98+var_78]
000000000000c7ed         movaps     xmmword [rbx], xmm0
000000000000c7f0         mov        qword [rbx+0x10], rax
000000000000c7f4         xor        eax, eax

                     loc_c7f6:
000000000000c7f6         mov        rsi, qword [rsp+0x98+var_40]                ; CODE XREF=calc_eclosure_iter+313, calc_eclosure_iter+625, calc_eclosure_iter+667, calc_eclosure_iter+677
000000000000c7fb         xor        rsi, qword [fs:0x28]
000000000000c804         jne        loc_c8fa

000000000000c80a         add        rsp, 0x68
000000000000c80e         pop        rbx
000000000000c80f         pop        rbp
000000000000c810         pop        r12
000000000000c812         pop        r13
000000000000c814         pop        r14
000000000000c816         pop        r15
000000000000c818         ret
                        ; endp
000000000000c819         align      32

                     loc_c820:
000000000000c820         lea        rax, qword [rsi+rbx]                        ; CODE XREF=calc_eclosure_iter+265
000000000000c824         add        r14, 0x1
000000000000c828         mov        byte [rsp+0x98+var_7D], 0x1
000000000000c82d         cmp        qword [rax+8], r14
000000000000c831         jg         loc_c736

                     loc_c837:
000000000000c837         lea        rdi, qword [rsp+0x98+var_78]                ; CODE XREF=calc_eclosure_iter+224
000000000000c83c         mov        rsi, rbp
000000000000c83f         call       re_node_set_insert                          ; re_node_set_insert
000000000000c844         test       al, al
000000000000c846         je         loc_c8f0

000000000000c84c         cmp        byte [rsp+0x98+var_7C], 0x1
000000000000c851         mov        rax, qword [r15+0x30]
000000000000c855         lea        rdx, qword [rax+rbx]
000000000000c859         je         loc_c7c9

000000000000c85f         cmp        byte [rsp+0x98+var_7D], 0x0
000000000000c864         je         loc_c7c9

000000000000c86a         mov        qword [rdx+8], 0x0
000000000000c872         jmp        loc_c7dd
000000000000c877         align      128

                     loc_c880:
000000000000c880         cmp        qword [r12+8], 0x0                          ; CODE XREF=calc_eclosure_iter+144
000000000000c886         je         loc_c7b0

000000000000c88c         mov        rcx, qword [r12+0x10]
000000000000c891         mov        rcx, qword [rcx]
000000000000c894         shl        rcx, 0x4
000000000000c898         test       byte [rdx+rcx+0xa], 0x4
000000000000c89d         jne        loc_c6e6

000000000000c8a3         shr        r8d, 0x8
000000000000c8a7         mov        rcx, rbp
000000000000c8aa         mov        rdx, rbp
000000000000c8ad         and        r8d, 0x3ff
000000000000c8b4         mov        rsi, rbp
000000000000c8b7         mov        rdi, r15
000000000000c8ba         call       duplicate_node_closure                      ; duplicate_node_closure
000000000000c8bf         test       eax, eax
000000000000c8c1         jne        loc_c7f6

000000000000c8c7         mov        rax, qword [r15]
000000000000c8ca         add        rax, r13
000000000000c8cd         jmp        loc_c6e6
000000000000c8d2         align      8

                     loc_c8d8:
000000000000c8d8         mov        rsi, r15                                    ; CODE XREF=calc_eclosure_iter+274
000000000000c8db         mov        rdi, r12
000000000000c8de         call       calc_eclosure_iter                          ; calc_eclosure_iter
000000000000c8e3         test       eax, eax
000000000000c8e5         je         loc_c77a

000000000000c8eb         jmp        loc_c7f6

                     loc_c8f0:
000000000000c8f0         mov        eax, 0xc                                    ; CODE XREF=calc_eclosure_iter+100, calc_eclosure_iter+367, calc_eclosure_iter+502
000000000000c8f5         jmp        loc_c7f6

                     loc_c8fa:
000000000000c8fa         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=calc_eclosure_iter+436
                        ; endp
000000000000c8ff         align      256                                         ; End of unwind block (FDE at 0x1ed44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     check_arrival_expand_ecl:
000000000000c900         push       r15                                         ; Begin of unwind block (FDE at 0x1ed94), CODE XREF=expand_bkref_cache+680, check_arrival+884, check_arrival+1283
000000000000c902         push       r14
000000000000c904         mov        r14, rdi
000000000000c907         push       r13
000000000000c909         push       r12
000000000000c90b         mov        r15, rsi
000000000000c90e         push       rbp
000000000000c90f         push       rbx
000000000000c910         mov        rbp, rdx
000000000000c913         mov        ebx, ecx
000000000000c915         sub        rsp, 0x38
000000000000c919         mov        r12, qword [rsi+8]
000000000000c91d         mov        rax, qword [fs:0x28]
000000000000c926         mov        qword [rsp+0x68+var_40], rax
000000000000c92b         xor        eax, eax
000000000000c92d         mov        qword [rsp+0x68+var_50], 0x0
000000000000c936         lea        rdi, qword [r12*8]                          ; argument "__size" for method j_malloc
000000000000c93e         mov        qword [rsp+0x68+var_58], r12
000000000000c943         call       j_malloc                                    ; malloc
000000000000c948         test       rax, rax
000000000000c94b         mov        qword [rsp+0x68+var_48], rax
000000000000c950         je         loc_ca4d

000000000000c956         test       r12, r12
000000000000c959         jle        loc_c9eb

000000000000c95f         lea        r12, qword [rsp+0x68+var_58]
000000000000c964         xor        r13d, r13d
000000000000c967         nop        word [rax+rax]

                     loc_c970:
000000000000c970         mov        rax, qword [r15+0x10]                       ; CODE XREF=check_arrival_expand_ecl+233
000000000000c974         mov        rdx, qword [rax+r13*8]
000000000000c978         mov        rax, qword [r14+0x30]
000000000000c97c         lea        rcx, qword [rdx+rdx*2]
000000000000c980         lea        rsi, qword [rax+rcx*8]
000000000000c984         mov        r8, qword [rsi+8]
000000000000c988         test       r8, r8
000000000000c98b         jle        loc_ca10

000000000000c991         mov        r10, qword [rsi+0x10]
000000000000c995         mov        r9, qword [r14]
000000000000c998         xor        ecx, ecx
000000000000c99a         jmp        loc_c9a9
000000000000c99c         align      32

                     loc_c9a0:
000000000000c9a0         add        rcx, 0x1                                    ; CODE XREF=check_arrival_expand_ecl+191, check_arrival_expand_ecl+196
000000000000c9a4         cmp        r8, rcx
000000000000c9a7         je         loc_ca10

                     loc_c9a9:
000000000000c9a9         mov        rdi, qword [r10+rcx*8]                      ; CODE XREF=check_arrival_expand_ecl+154
000000000000c9ad         mov        rax, rdi
000000000000c9b0         shl        rax, 0x4
000000000000c9b4         add        rax, r9
000000000000c9b7         movzx      r11d, byte [rax+8]
000000000000c9bc         cmp        ebx, r11d
000000000000c9bf         jne        loc_c9a0

000000000000c9c1         cmp        rbp, qword [rax]
000000000000c9c4         jne        loc_c9a0

000000000000c9c6         cmp        rdi, 0xffffffffffffffff
000000000000c9ca         je         loc_ca10

000000000000c9cc         mov        r8d, ebx
000000000000c9cf         mov        rcx, rbp
000000000000c9d2         mov        rsi, r12
000000000000c9d5         mov        rdi, r14
000000000000c9d8         call       check_arrival_expand_ecl_sub                ; check_arrival_expand_ecl_sub
000000000000c9dd         test       eax, eax
000000000000c9df         jne        loc_ca1c

                     loc_c9e1:
000000000000c9e1         add        r13, 0x1                                    ; CODE XREF=check_arrival_expand_ecl+282
000000000000c9e5         cmp        qword [r15+8], r13
000000000000c9e9         jg         loc_c970

                     loc_c9eb:
000000000000c9eb         mov        rdi, qword [r15+0x10]                       ; argument "__ptr" for method j_free, CODE XREF=check_arrival_expand_ecl+89
000000000000c9ef         call       j_free                                      ; free
000000000000c9f4         mov        rax, qword [rsp+0x68+var_48]
000000000000c9f9         movdqa     xmm0, xmmword [rsp+0x68+var_58]
000000000000c9ff         mov        qword [r15+0x10], rax
000000000000ca03         xor        eax, eax
000000000000ca05         movaps     xmmword [r15], xmm0
000000000000ca09         jmp        loc_ca2e
000000000000ca0b         align      16

                     loc_ca10:
000000000000ca10         mov        rdi, r12                                    ; CODE XREF=check_arrival_expand_ecl+139, check_arrival_expand_ecl+167, check_arrival_expand_ecl+202
000000000000ca13         call       re_node_set_merge                           ; re_node_set_merge
000000000000ca18         test       eax, eax
000000000000ca1a         je         loc_c9e1

                     loc_ca1c:
000000000000ca1c         mov        rdi, qword [rsp+0x68+var_48]                ; argument "__ptr" for method j_free, CODE XREF=check_arrival_expand_ecl+223
000000000000ca21         mov        dword [rsp+0x68+var_5C], eax
000000000000ca25         call       j_free                                      ; free
000000000000ca2a         mov        eax, dword [rsp+0x68+var_5C]

                     loc_ca2e:
000000000000ca2e         mov        rdx, qword [rsp+0x68+var_40]                ; CODE XREF=check_arrival_expand_ecl+265, check_arrival_expand_ecl+338
000000000000ca33         xor        rdx, qword [fs:0x28]
000000000000ca3c         jne        loc_ca54

000000000000ca3e         add        rsp, 0x38
000000000000ca42         pop        rbx
000000000000ca43         pop        rbp
000000000000ca44         pop        r12
000000000000ca46         pop        r13
000000000000ca48         pop        r14
000000000000ca4a         pop        r15
000000000000ca4c         ret
                        ; endp

                     loc_ca4d:
000000000000ca4d         mov        eax, 0xc                                    ; CODE XREF=check_arrival_expand_ecl+80
000000000000ca52         jmp        loc_ca2e

                     loc_ca54:
000000000000ca54         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=check_arrival_expand_ecl+316
                        ; endp
000000000000ca59         align      32                                          ; End of unwind block (FDE at 0x1ed94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_add_intersect:
000000000000ca60         mov        r9, qword [rsi+8]                           ; Begin of unwind block (FDE at 0x1ede0), CODE XREF=sub_epsilon_src_nodes+156, update_cur_sifted_state+263
000000000000ca64         xor        eax, eax
000000000000ca66         test       r9, r9
000000000000ca69         je         loc_cb28

000000000000ca6f         mov        r11, qword [rdx+8]
000000000000ca73         test       r11, r11
000000000000ca76         je         loc_cb28

000000000000ca7c         push       r13
000000000000ca7e         push       r12
000000000000ca80         lea        rax, qword [r9+r11]
000000000000ca84         push       rbp
000000000000ca85         push       rbx
000000000000ca86         mov        r12, rdx
000000000000ca89         mov        rbx, rdi
000000000000ca8c         mov        rbp, rsi
000000000000ca8f         sub        rsp, 0x8
000000000000ca93         mov        rcx, qword [rdi+8]
000000000000ca97         mov        r13, qword [rdi]
000000000000ca9a         mov        rdi, qword [rdi+0x10]
000000000000ca9e         lea        rdx, qword [rax+rcx]
000000000000caa2         cmp        rdx, r13
000000000000caa5         jg         loc_cbd0

                     loc_caab:
000000000000caab         lea        rsi, qword [rcx+r9]                         ; CODE XREF=re_node_set_add_intersect+412
000000000000caaf         mov        r13, qword [rbp+0x10]
000000000000cab3         mov        rdx, qword [r12+0x10]
000000000000cab8         sub        r9, 0x1
000000000000cabc         sub        rcx, 0x1
000000000000cac0         add        rsi, r11
000000000000cac3         sub        r11, 0x1
000000000000cac7         mov        rax, qword [r13+r9*8]
000000000000cacc         mov        r8, qword [rdx+r11*8]

                     loc_cad0:
000000000000cad0         cmp        rax, r8                                     ; CODE XREF=re_node_set_add_intersect+219
000000000000cad3         je         loc_cae6

                     loc_cad5:
000000000000cad5         jge        loc_cb30                                    ; CODE XREF=re_node_set_add_intersect+132

000000000000cad7         sub        r11, 0x1
000000000000cadb         js         loc_cb40

                     loc_cadd:
000000000000cadd         mov        r8, qword [rdx+r11*8]                       ; CODE XREF=re_node_set_add_intersect+193
000000000000cae1         cmp        rax, r8
000000000000cae4         jne        loc_cad5

                     loc_cae6:
000000000000cae6         test       rcx, rcx                                    ; CODE XREF=re_node_set_add_intersect+115
000000000000cae9         jns        loc_cafa

000000000000caeb         jmp        loc_cb08
000000000000caed         align      16

                     loc_caf0:
000000000000caf0         sub        rcx, 0x1                                    ; CODE XREF=re_node_set_add_intersect+161
000000000000caf4         cmp        rcx, 0xffffffffffffffff
000000000000caf8         je         loc_cb08

                     loc_cafa:
000000000000cafa         mov        r10, qword [rdi+rcx*8]                      ; CODE XREF=re_node_set_add_intersect+137
000000000000cafe         cmp        r10, r8
000000000000cb01         jg         loc_caf0

000000000000cb03         cmp        r10, r8
000000000000cb06         je         loc_cb10

                     loc_cb08:
000000000000cb08         sub        rsi, 0x1                                    ; CODE XREF=re_node_set_add_intersect+139, re_node_set_add_intersect+152
000000000000cb0c         mov        qword [rdi+rsi*8], r8

                     loc_cb10:
000000000000cb10         sub        r9, 0x1                                     ; CODE XREF=re_node_set_add_intersect+166
000000000000cb14         js         loc_cb40

000000000000cb16         sub        r11, 0x1
000000000000cb1a         js         loc_cb40

000000000000cb1c         mov        rax, qword [r13+r9*8]
000000000000cb21         jmp        loc_cadd
000000000000cb23         align      8

                     loc_cb28:
000000000000cb28         ret                                                    ; CODE XREF=re_node_set_add_intersect+9, re_node_set_add_intersect+22
                        ; endp
000000000000cb2a         align      16

                     loc_cb30:
000000000000cb30         sub        r9, 0x1                                     ; CODE XREF=loc_cad5
000000000000cb34         js         loc_cb40

000000000000cb36         mov        rax, qword [r13+r9*8]
000000000000cb3b         jmp        loc_cad0
000000000000cb3d         align      64

                     loc_cb40:
000000000000cb40         mov        rcx, qword [rbx+8]                          ; CODE XREF=re_node_set_add_intersect+123, re_node_set_add_intersect+180, re_node_set_add_intersect+186, re_node_set_add_intersect+212
000000000000cb44         mov        rdx, qword [rbp+8]
000000000000cb48         add        rdx, rcx
000000000000cb4b         add        rdx, qword [r12+8]
000000000000cb50         lea        rax, qword [rcx-1]
000000000000cb54         lea        r9, qword [rdx-1]
000000000000cb58         sub        rdx, rsi
000000000000cb5b         add        rcx, rdx
000000000000cb5e         test       rdx, rdx
000000000000cb61         mov        qword [rbx+8], rcx
000000000000cb65         jle        loc_cbad

000000000000cb67         test       rax, rax
000000000000cb6a         js         loc_cbad

000000000000cb6c         nop        dword [rax]

                     loc_cb70:
000000000000cb70         mov        r8, qword [rdi+r9*8]                        ; CODE XREF=re_node_set_add_intersect+304, re_node_set_add_intersect+331
000000000000cb74         mov        rcx, qword [rdi+rax*8]
000000000000cb78         lea        r10, qword [rax+rdx]
000000000000cb7c         lea        r10, qword [rdi+r10*8]
000000000000cb80         cmp        r8, rcx
000000000000cb83         jle        loc_cba0

000000000000cb85         sub        r9, 0x1
000000000000cb89         sub        rdx, 0x1
000000000000cb8d         mov        qword [r10], r8
000000000000cb90         jne        loc_cb70

000000000000cb92         xor        edx, edx
000000000000cb94         jmp        loc_cbb1
000000000000cb96         align      32

                     loc_cba0:
000000000000cba0         sub        rax, 0x1                                    ; CODE XREF=re_node_set_add_intersect+291
000000000000cba4         mov        qword [r10], rcx
000000000000cba7         cmp        rax, 0xffffffffffffffff
000000000000cbab         jne        loc_cb70

                     loc_cbad:
000000000000cbad         shl        rdx, 0x3                                    ; CODE XREF=re_node_set_add_intersect+261, re_node_set_add_intersect+266

                     loc_cbb1:
000000000000cbb1         lea        rsi, qword [rdi+rsi*8]                      ; argument "__src" for method j_memcpy, CODE XREF=re_node_set_add_intersect+308
000000000000cbb5         call       j_memcpy                                    ; memcpy
000000000000cbba         xor        eax, eax

                     loc_cbbc:
000000000000cbbc         add        rsp, 0x8                                    ; CODE XREF=re_node_set_add_intersect+422
000000000000cbc0         pop        rbx
000000000000cbc1         pop        rbp
000000000000cbc2         pop        r12
000000000000cbc4         pop        r13
000000000000cbc6         ret
                        ; endp
000000000000cbc7         align      16

                     loc_cbd0:
000000000000cbd0         add        r13, rax                                    ; CODE XREF=re_node_set_add_intersect+69
000000000000cbd3         lea        rsi, qword [r13*8]                          ; argument "__size" for method j_realloc
000000000000cbdb         call       j_realloc                                   ; realloc
000000000000cbe0         test       rax, rax
000000000000cbe3         mov        rdi, rax
000000000000cbe6         je         loc_cc01

000000000000cbe8         mov        qword [rbx+0x10], rax
000000000000cbec         mov        qword [rbx], r13
000000000000cbef         mov        rcx, qword [rbx+8]
000000000000cbf3         mov        r9, qword [rbp+8]
000000000000cbf7         mov        r11, qword [r12+8]
000000000000cbfc         jmp        loc_caab

                     loc_cc01:
000000000000cc01         mov        eax, 0xc                                    ; CODE XREF=re_node_set_add_intersect+390
000000000000cc06         jmp        loc_cbbc
000000000000cc08         align      16                                          ; End of unwind block (FDE at 0x1ede0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     create_token_tree.isra.16:
000000000000cc10         push       rbx                                         ; Begin of unwind block (FDE at 0x1ee30), CODE XREF=duplicate_tree+62, lower_subexp+130, lower_subexp+156, lower_subexp+215, lower_subexp+241, lower_subexp+279, lower_subexp+463, lower_subexp+489, lower_subexp+531, build_charclass_op+350, build_charclass_op+410
000000000000cc11         mov        rbx, rdi
000000000000cc14         sub        rsp, 0x20
000000000000cc18         mov        eax, dword [rsi]
000000000000cc1a         cmp        eax, 0xf
000000000000cc1d         je         loc_cc98

000000000000cc1f         movsxd     r9, eax
000000000000cc22         lea        r10d, dword [rax+1]
000000000000cc26         mov        rdi, qword [rdi]
000000000000cc29         mov        rax, r9
000000000000cc2c         shl        rax, 0x6
000000000000cc30         add        rax, 0x8

                     loc_cc34:
000000000000cc34         shl        r9, 0x6                                     ; CODE XREF=create_token_tree.isra.16+215
000000000000cc38         mov        dword [rsi], r10d
000000000000cc3b         add        rax, rdi
000000000000cc3e         lea        rsi, qword [rdi+r9]
000000000000cc42         mov        qword [rsi+8], 0x0
000000000000cc4a         mov        qword [rsi+0x10], rdx
000000000000cc4e         lea        rdi, qword [rsi+0x20]
000000000000cc52         mov        qword [rsi+0x18], rcx
000000000000cc56         movdqu     xmm0, xmmword [r8]
000000000000cc5b         movups     xmmword [rsi+0x30], xmm0
000000000000cc5f         and        byte [rdi+0x1a], 0xf3
000000000000cc63         test       rdx, rdx
000000000000cc66         mov        qword [rsi+0x20], 0x0
000000000000cc6e         mov        qword [rsi+0x28], 0x0
000000000000cc76         mov        qword [rsi+0x40], 0xffffffffffffffff
000000000000cc7e         je         loc_cc83

000000000000cc80         mov        qword [rdx], rax

                     loc_cc83:
000000000000cc83         test       rcx, rcx                                    ; CODE XREF=create_token_tree.isra.16+110
000000000000cc86         je         loc_cc8b

000000000000cc88         mov        qword [rcx], rax

                     loc_cc8b:
000000000000cc8b         add        rsp, 0x20                                   ; CODE XREF=create_token_tree.isra.16+118, create_token_tree.isra.16+222
000000000000cc8f         pop        rbx
000000000000cc90         ret
                        ; endp
000000000000cc91         align      8

                     loc_cc98:
000000000000cc98         mov        edi, 0x3c8                                  ; argument "__size" for method j_malloc, CODE XREF=create_token_tree.isra.16+13
000000000000cc9d         mov        qword [rsp+0x28+var_10], r8
000000000000cca2         mov        qword [rsp+0x28+var_18], rcx
000000000000cca7         mov        qword [rsp+0x28+var_20], rdx
000000000000ccac         mov        qword [rsp+0x28+var_28], rsi
000000000000ccb0         call       j_malloc                                    ; malloc
000000000000ccb5         test       rax, rax
000000000000ccb8         mov        rdi, rax
000000000000ccbb         je         loc_ccec

000000000000ccbd         mov        rax, qword [rbx]
000000000000ccc0         mov        r10d, 0x1
000000000000ccc6         mov        qword [rbx], rdi
000000000000ccc9         xor        r9d, r9d
000000000000cccc         mov        r8, qword [rsp+0x28+var_10]
000000000000ccd1         mov        rcx, qword [rsp+0x28+var_18]
000000000000ccd6         mov        rdx, qword [rsp+0x28+var_20]
000000000000ccdb         mov        rsi, qword [rsp+0x28+var_28]
000000000000ccdf         mov        qword [rdi], rax
000000000000cce2         mov        eax, 0x8
000000000000cce7         jmp        loc_cc34

                     loc_ccec:
000000000000ccec         xor        eax, eax                                    ; CODE XREF=create_token_tree.isra.16+171
000000000000ccee         jmp        loc_cc8b


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     duplicate_tree:
000000000000ccf0         push       r14                                         ; End of unwind block (FDE at 0x1ee30), Begin of unwind block (FDE at 0x1ee54), CODE XREF=sub_153a0+540, sub_153a0+888, sub_153a0+982
000000000000ccf2         push       r13
000000000000ccf4         lea        r13, qword [rsi+0x70]
000000000000ccf8         push       r12
000000000000ccfa         push       rbp
000000000000ccfb         lea        r12, qword [rsi+0x80]
000000000000cd02         push       rbx
000000000000cd03         mov        rbx, rdi
000000000000cd06         sub        rsp, 0x10
000000000000cd0a         mov        rbp, qword [rdi]
000000000000cd0d         mov        rax, qword [fs:0x28]
000000000000cd16         mov        qword [rsp+0x38+var_30], rax
000000000000cd1b         xor        eax, eax
000000000000cd1d         mov        r14, rsp

                     loc_cd20:
000000000000cd20         lea        r8, qword [rbx+0x28]                        ; CODE XREF=duplicate_tree+101, duplicate_tree+199
000000000000cd24         xor        ecx, ecx
000000000000cd26         xor        edx, edx
000000000000cd28         mov        rsi, r12
000000000000cd2b         mov        rdi, r13
000000000000cd2e         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000cd33         test       rax, rax
000000000000cd36         mov        qword [r14], rax
000000000000cd39         je         loc_cd8c

000000000000cd3b         mov        qword [rax], rbp
000000000000cd3e         mov        rbp, qword [r14]
000000000000cd41         or         byte [rbp+0x32], 0x4
000000000000cd45         mov        rax, qword [rbx+8]
000000000000cd49         test       rax, rax
000000000000cd4c         je         loc_cd60

000000000000cd4e         lea        r14, qword [rbp+8]
000000000000cd52         mov        rbx, rax
000000000000cd55         jmp        loc_cd20
000000000000cd57         align      32

                     loc_cd60:
000000000000cd60         xor        edx, edx                                    ; CODE XREF=duplicate_tree+92
000000000000cd62         jmp        loc_cd6b
000000000000cd64         align      8

                     loc_cd68:
000000000000cd68         mov        rbx, rax                                    ; CODE XREF=duplicate_tree+150

                     loc_cd6b:
000000000000cd6b         mov        rax, qword [rbx+0x10]                       ; CODE XREF=duplicate_tree+114
000000000000cd6f         test       rax, rax
000000000000cd72         je         loc_cd79

000000000000cd74         cmp        rax, rdx
000000000000cd77         jne        loc_cdb0

                     loc_cd79:
000000000000cd79         mov        rax, qword [rbx]                            ; CODE XREF=duplicate_tree+130
000000000000cd7c         mov        rbp, qword [rbp]
000000000000cd80         mov        rdx, rbx
000000000000cd83         test       rax, rax
000000000000cd86         jne        loc_cd68

000000000000cd88         mov        rax, qword [rsp+0x38+var_38]

                     loc_cd8c:
000000000000cd8c         mov        rcx, qword [rsp+0x38+var_30]                ; CODE XREF=duplicate_tree+73
000000000000cd91         xor        rcx, qword [fs:0x28]
000000000000cd9a         jne        loc_cdbc

000000000000cd9c         add        rsp, 0x10
000000000000cda0         pop        rbx
000000000000cda1         pop        rbp
000000000000cda2         pop        r12
000000000000cda4         pop        r13
000000000000cda6         pop        r14
000000000000cda8         ret
                        ; endp
000000000000cda9         align      16

                     loc_cdb0:
000000000000cdb0         lea        r14, qword [rbp+0x10]                       ; CODE XREF=duplicate_tree+135
000000000000cdb4         mov        rbx, rax
000000000000cdb7         jmp        loc_cd20

                     loc_cdbc:
000000000000cdbc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=duplicate_tree+170
                        ; endp
000000000000cdc1         align      16                                          ; End of unwind block (FDE at 0x1ee54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112


                     lower_subexp:
000000000000cdd0         push       r15                                         ; Begin of unwind block (FDE at 0x1ee98), CODE XREF=lower_subexps+104, lower_subexps+136
000000000000cdd2         push       r14
000000000000cdd4         push       r13
000000000000cdd6         push       r12
000000000000cdd8         mov        r13, rdx
000000000000cddb         push       rbp
000000000000cddc         push       rbx
000000000000cddd         sub        rsp, 0x48
000000000000cde1         mov        rbx, qword [rsi]
000000000000cde4         mov        rbp, qword [rdx+8]
000000000000cde8         mov        rax, qword [fs:0x28]
000000000000cdf1         mov        qword [rsp+0x78+var_40], rax
000000000000cdf6         xor        eax, eax
000000000000cdf8         test       byte [rsi+0x38], 0x10
000000000000cdfc         mov        qword [rsp+0x78+var_60], rdi
000000000000ce01         je         loc_cf78

000000000000ce07         test       rbp, rbp
000000000000ce0a         je         loc_ce80

000000000000ce0c         mov        rax, qword [rdx+0x28]
000000000000ce10         cmp        rax, 0x3f
000000000000ce14         jg         loc_cf4d

000000000000ce1a         mov        rdx, qword [rbx+0xa0]
000000000000ce21         bt         rdx, rax
000000000000ce25         jae        loc_cf4d

000000000000ce2b         lea        rax, qword [rbx+0x70]
000000000000ce2f         lea        r14, qword [rsp+0x78+var_58]
000000000000ce34         sub        rbx, 0xffffffffffffff80
000000000000ce38         xor        ecx, ecx
000000000000ce3a         xor        edx, edx
000000000000ce3c         mov        rsi, rbx
000000000000ce3f         mov        r15, rax
000000000000ce42         mov        r8, r14
000000000000ce45         mov        rdi, rax
000000000000ce48         mov        byte [rsp+0x78+var_50], 0x8
000000000000ce4d         mov        qword [rsp+0x78+var_70], rax
000000000000ce52         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000ce57         mov        rdi, r15
000000000000ce5a         mov        r8, r14
000000000000ce5d         xor        ecx, ecx
000000000000ce5f         xor        edx, edx
000000000000ce61         mov        rsi, rbx
000000000000ce64         mov        r12, rax
000000000000ce67         mov        byte [rsp+0x78+var_50], 0x9
000000000000ce6c         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000ce71         mov        r15, rax
000000000000ce74         jmp        loc_cfcd
000000000000ce79         align      128

                     loc_ce80:
000000000000ce80         lea        rax, qword [rbx+0x70]                       ; CODE XREF=lower_subexp+58
000000000000ce84         lea        r14, qword [rsp+0x78+var_58]
000000000000ce89         sub        rbx, 0xffffffffffffff80
000000000000ce8d         xor        ecx, ecx
000000000000ce8f         xor        edx, edx
000000000000ce91         mov        rsi, rbx
000000000000ce94         mov        r15, rax
000000000000ce97         mov        r8, r14
000000000000ce9a         mov        rdi, rax
000000000000ce9d         mov        byte [rsp+0x78+var_50], 0x8
000000000000cea2         mov        qword [rsp+0x78+var_70], rax
000000000000cea7         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000ceac         mov        rdi, r15
000000000000ceaf         mov        r8, r14
000000000000ceb2         xor        ecx, ecx
000000000000ceb4         xor        edx, edx
000000000000ceb6         mov        rsi, rbx
000000000000ceb9         mov        r12, rax
000000000000cebc         mov        byte [rsp+0x78+var_50], 0x9
000000000000cec1         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000cec6         mov        r11, rax
000000000000cec9         mov        r15, rax

                     loc_cecc:
000000000000cecc         mov        rdi, qword [rsp+0x78+var_70]                ; CODE XREF=lower_subexp+503, lower_subexp+539
000000000000ced1         mov        r8, r14
000000000000ced4         mov        rcx, r11
000000000000ced7         mov        rdx, r12
000000000000ceda         mov        rsi, rbx
000000000000cedd         mov        byte [rsp+0x78+var_50], 0x10
000000000000cee2         mov        qword [rsp+0x78+var_68], r11
000000000000cee7         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000ceec         test       rax, rax
000000000000ceef         mov        rbp, rax
000000000000cef2         je         loc_cff0

000000000000cef8         mov        r11, qword [rsp+0x78+var_68]
000000000000cefd         test       r11, r11
000000000000cf00         je         loc_cff0

000000000000cf06         test       r12, r12
000000000000cf09         je         loc_cff0

000000000000cf0f         test       r15, r15
000000000000cf12         je         loc_cff0

000000000000cf18         mov        rax, qword [r13+0x28]
000000000000cf1c         mov        qword [r15+0x28], rax
000000000000cf20         mov        qword [r12+0x28], rax
000000000000cf25         movzx      eax, byte [r13+0x32]
000000000000cf2a         movzx      edx, byte [r15+0x32]
000000000000cf2f         and        eax, 0x8
000000000000cf32         and        edx, 0xfffffff7
000000000000cf35         mov        ecx, eax
000000000000cf37         or         edx, ecx
000000000000cf39         mov        byte [r15+0x32], dl
000000000000cf3d         movzx      eax, byte [r12+0x32]
000000000000cf43         and        eax, 0xfffffff7
000000000000cf46         or         eax, ecx
000000000000cf48         mov        byte [r12+0x32], al

                     loc_cf4d:
000000000000cf4d         mov        rdi, qword [rsp+0x78+var_40]                ; CODE XREF=lower_subexp+68, lower_subexp+85, lower_subexp+557
000000000000cf52         xor        rdi, qword [fs:0x28]
000000000000cf5b         mov        rax, rbp
000000000000cf5e         jne        loc_d002

000000000000cf64         add        rsp, 0x48
000000000000cf68         pop        rbx
000000000000cf69         pop        rbp
000000000000cf6a         pop        r12
000000000000cf6c         pop        r13
000000000000cf6e         pop        r14
000000000000cf70         pop        r15
000000000000cf72         ret
                        ; endp
000000000000cf73         align      8

                     loc_cf78:
000000000000cf78         lea        rax, qword [rbx+0x70]                       ; CODE XREF=lower_subexp+49
000000000000cf7c         lea        r14, qword [rsp+0x78+var_58]
000000000000cf81         sub        rbx, 0xffffffffffffff80
000000000000cf85         xor        ecx, ecx
000000000000cf87         xor        edx, edx
000000000000cf89         mov        rsi, rbx
000000000000cf8c         mov        r15, rax
000000000000cf8f         mov        r8, r14
000000000000cf92         mov        rdi, rax
000000000000cf95         mov        byte [rsp+0x78+var_50], 0x8
000000000000cf9a         mov        qword [rsp+0x78+var_70], rax
000000000000cf9f         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000cfa4         xor        ecx, ecx
000000000000cfa6         xor        edx, edx
000000000000cfa8         mov        rdi, r15
000000000000cfab         mov        r8, r14
000000000000cfae         mov        rsi, rbx
000000000000cfb1         mov        r12, rax
000000000000cfb4         mov        byte [rsp+0x78+var_50], 0x9
000000000000cfb9         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000cfbe         test       rbp, rbp
000000000000cfc1         mov        r15, rax
000000000000cfc4         mov        r11, rax
000000000000cfc7         je         loc_cecc

                     loc_cfcd:
000000000000cfcd         mov        rdi, qword [rsp+0x78+var_70]                ; CODE XREF=lower_subexp+164
000000000000cfd2         mov        r8, r14
000000000000cfd5         mov        rcx, r15
000000000000cfd8         mov        rdx, rbp
000000000000cfdb         mov        rsi, rbx
000000000000cfde         mov        byte [rsp+0x78+var_50], 0x10
000000000000cfe3         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000000cfe8         mov        r11, rax
000000000000cfeb         jmp        loc_cecc

                     loc_cff0:
000000000000cff0         mov        rax, qword [rsp+0x78+var_60]                ; CODE XREF=lower_subexp+290, lower_subexp+304, lower_subexp+313, lower_subexp+322
000000000000cff5         xor        ebp, ebp
000000000000cff7         mov        dword [rax], 0xc
000000000000cffd         jmp        loc_cf4d

                     loc_d002:
000000000000d002         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=lower_subexp+398
                        ; endp
000000000000d007         align      16                                          ; End of unwind block (FDE at 0x1ee98)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_24: int32_t, -36


                     lower_subexps:
000000000000d010         push       rbp                                         ; Begin of unwind block (FDE at 0x1eee8), DATA XREF=re_compile_internal+1638
000000000000d011         push       rbx
000000000000d012         mov        rbp, rdi
000000000000d015         mov        rbx, rsi
000000000000d018         sub        rsp, 0x18
000000000000d01c         mov        rdx, qword [rsi+8]
000000000000d020         mov        rax, qword [fs:0x28]
000000000000d029         mov        qword [rsp+0x28+var_20], rax
000000000000d02e         xor        eax, eax
000000000000d030         mov        dword [rsp+0x28+var_24], 0x0
000000000000d038         test       rdx, rdx
000000000000d03b         je         loc_d043

000000000000d03d         cmp        byte [rdx+0x30], 0x11
000000000000d041         je         loc_d090

                     loc_d043:
000000000000d043         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=lower_subexps+43, lower_subexps+148, lower_subexps+153
000000000000d047         test       rdx, rdx
000000000000d04a         je         loc_d052

000000000000d04c         cmp        byte [rdx+0x30], 0x11
000000000000d050         je         loc_d070

                     loc_d052:
000000000000d052         mov        rcx, qword [rsp+0x28+var_20]                ; CODE XREF=lower_subexps+58, lower_subexps+116, lower_subexps+121
000000000000d057         xor        rcx, qword [fs:0x28]
000000000000d060         mov        eax, dword [rsp+0x28+var_24]
000000000000d064         jne        loc_d0ab

000000000000d066         add        rsp, 0x18
000000000000d06a         pop        rbx
000000000000d06b         pop        rbp
000000000000d06c         ret
                        ; endp
000000000000d06d         align      16

                     loc_d070:
000000000000d070         lea        rdi, qword [rsp+0x28+var_24]                ; CODE XREF=lower_subexps+64
000000000000d075         mov        rsi, rbp
000000000000d078         call       lower_subexp                                ; lower_subexp
000000000000d07d         test       rax, rax
000000000000d080         mov        qword [rbx+0x10], rax
000000000000d084         je         loc_d052

000000000000d086         mov        qword [rax], rbx
000000000000d089         jmp        loc_d052
000000000000d08b         align      16

                     loc_d090:
000000000000d090         lea        rdi, qword [rsp+0x28+var_24]                ; CODE XREF=lower_subexps+49
000000000000d095         mov        rsi, rbp
000000000000d098         call       lower_subexp                                ; lower_subexp
000000000000d09d         test       rax, rax
000000000000d0a0         mov        qword [rbx+8], rax
000000000000d0a4         je         loc_d043

000000000000d0a6         mov        qword [rax], rbx
000000000000d0a9         jmp        loc_d043

                     loc_d0ab:
000000000000d0ab         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=lower_subexps+84
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_init_copy:
000000000000d0b0         push       r12                                         ; End of unwind block (FDE at 0x1eee8), Begin of unwind block (FDE at 0x1ef14), CODE XREF=re_node_set_init_union+235, re_acquire_state_context+232, re_acquire_state_context+649, re_acquire_state+187, expand_bkref_cache+390, build_trtable+1614, check_arrival+1551, set_regs+1237, update_cur_sifted_state+2049, sub_17480+592
000000000000d0b2         push       rbp
000000000000d0b3         push       rbx
000000000000d0b4         mov        rax, qword [rsi+8]
000000000000d0b8         mov        qword [rdi+8], rax
000000000000d0bc         mov        r12, qword [rsi+8]
000000000000d0c0         test       r12, r12
000000000000d0c3         jle        loc_d100

000000000000d0c5         mov        rbx, rdi
000000000000d0c8         mov        qword [rdi], rax
000000000000d0cb         lea        rdi, qword [rax*8]                          ; argument "__size" for method j_malloc
000000000000d0d3         mov        rbp, rsi
000000000000d0d6         call       j_malloc                                    ; malloc
000000000000d0db         test       rax, rax
000000000000d0de         mov        qword [rbx+0x10], rax
000000000000d0e2         je         loc_d120

000000000000d0e4         mov        rsi, qword [rbp+0x10]                       ; argument "__src" for method j_memcpy
000000000000d0e8         lea        rdx, qword [r12*8]                          ; argument "__n" for method j_memcpy
000000000000d0f0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000d0f3         call       j_memcpy                                    ; memcpy
000000000000d0f8         xor        eax, eax

                     loc_d0fa:
000000000000d0fa         pop        rbx                                         ; CODE XREF=re_node_set_init_copy+132
000000000000d0fb         pop        rbp
000000000000d0fc         pop        r12
000000000000d0fe         ret
                        ; endp
000000000000d0ff         align      256

                     loc_d100:
000000000000d100         pxor       xmm0, xmm0                                  ; CODE XREF=re_node_set_init_copy+19
000000000000d104         mov        qword [rdi+0x10], 0x0
000000000000d10c         xor        eax, eax
000000000000d10e         movups     xmmword [rdi], xmm0
000000000000d111         pop        rbx
000000000000d112         pop        rbp
000000000000d113         pop        r12
000000000000d115         ret
                        ; endp
000000000000d116         align      32

                     loc_d120:
000000000000d120         mov        qword [rbx+8], 0x0                          ; CODE XREF=re_node_set_init_copy+50
000000000000d128         mov        qword [rbx], 0x0
000000000000d12f         mov        eax, 0xc
000000000000d134         jmp        loc_d0fa
000000000000d136         align      64                                          ; End of unwind block (FDE at 0x1ef14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_node_set_init_union:
000000000000d140         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x1ef50), CODE XREF=merge_state_array+96, transit_state_bkref.isra.34+1185, merge_state_with_log+188, re_search_internal+3431
000000000000d143         push       r14
000000000000d145         push       r13
000000000000d147         push       r12
000000000000d149         push       rbp
000000000000d14a         push       rbx
000000000000d14b         je         loc_d1f5

000000000000d151         test       rdx, rdx
000000000000d154         mov        r13, qword [rsi+8]
000000000000d158         je         loc_d1f0

000000000000d15e         test       r13, r13
000000000000d161         jle        loc_d1f0

000000000000d167         mov        r14, qword [rdx+8]
000000000000d16b         test       r14, r14
000000000000d16e         jle        loc_d223

000000000000d174         mov        r12, rdi
000000000000d177         lea        rdi, qword [r13+r14]
000000000000d17c         mov        rbx, rdx
000000000000d17f         mov        rbp, rsi
000000000000d182         mov        qword [r12], rdi
000000000000d186         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
000000000000d18a         call       j_malloc                                    ; malloc
000000000000d18f         test       rax, rax
000000000000d192         mov        qword [r12+0x10], rax
000000000000d197         je         loc_d288

000000000000d19d         mov        r9, qword [rbx+0x10]
000000000000d1a1         mov        r8, qword [rbp+0x10]
000000000000d1a5         xor        ebx, ebx
000000000000d1a7         xor        ecx, ecx
000000000000d1a9         xor        esi, esi
000000000000d1ab         jmp        loc_d1ce
000000000000d1ad         align      16

                     loc_d1b0:
000000000000d1b0         sete       dil                                         ; CODE XREF=re_node_set_init_union+157
000000000000d1b4         mov        qword [rax+rbx*8-8], rdx
000000000000d1b9         add        rsi, 0x1
000000000000d1bd         movzx      edi, dil
000000000000d1c1         add        rcx, rdi

                     loc_d1c4:
000000000000d1c4         cmp        r13, rsi                                    ; CODE XREF=re_node_set_init_union+168
000000000000d1c7         jle        loc_d230

000000000000d1c9         cmp        r14, rcx
000000000000d1cc         jle        loc_d248

                     loc_d1ce:
000000000000d1ce         mov        rdx, qword [r8+rsi*8]                       ; CODE XREF=re_node_set_init_union+107
000000000000d1d2         mov        rdi, qword [r9+rcx*8]
000000000000d1d6         add        rbx, 0x1
000000000000d1da         cmp        rdx, rdi
000000000000d1dd         jle        loc_d1b0

000000000000d1df         add        rcx, 0x1
000000000000d1e3         mov        qword [rax+rbx*8-8], rdi
000000000000d1e8         jmp        loc_d1c4
000000000000d1ea         align      16

                     loc_d1f0:
000000000000d1f0         test       r13, r13                                    ; CODE XREF=re_node_set_init_union+24, re_node_set_init_union+33
000000000000d1f3         jg         loc_d223

                     loc_d1f5:
000000000000d1f5         test       rdx, rdx                                    ; CODE XREF=re_node_set_init_union+11
000000000000d1f8         je         loc_d201

000000000000d1fa         cmp        qword [rdx+8], 0x0
000000000000d1ff         jg         loc_d220

                     loc_d201:
000000000000d201         pxor       xmm0, xmm0                                  ; CODE XREF=re_node_set_init_union+184
000000000000d205         mov        qword [rdi+0x10], 0x0
000000000000d20d         xor        eax, eax
000000000000d20f         movaps     xmmword [rdi], xmm0

                     loc_d212:
000000000000d212         pop        rbx                                         ; CODE XREF=re_node_set_init_union+333
000000000000d213         pop        rbp
000000000000d214         pop        r12
000000000000d216         pop        r13
000000000000d218         pop        r14
000000000000d21a         ret
                        ; endp
000000000000d21b         align      32

                     loc_d220:
000000000000d220         mov        rsi, rdx                                    ; CODE XREF=re_node_set_init_union+191

                     loc_d223:
000000000000d223         pop        rbx                                         ; CODE XREF=re_node_set_init_union+46, re_node_set_init_union+179
000000000000d224         pop        rbp
000000000000d225         pop        r12
000000000000d227         pop        r13
000000000000d229         pop        r14
000000000000d22b         jmp        re_node_set_init_copy                       ; re_node_set_init_copy
                        ; endp

                     loc_d230:
000000000000d230         cmp        r14, rcx                                    ; CODE XREF=re_node_set_init_union+135
000000000000d233         jg         loc_d268

                     loc_d235:
000000000000d235         mov        qword [r12+8], rbx                          ; CODE XREF=re_node_set_init_union+291, re_node_set_init_union+323
000000000000d23a         xor        eax, eax
000000000000d23c         pop        rbx
000000000000d23d         pop        rbp
000000000000d23e         pop        r12
000000000000d240         pop        r13
000000000000d242         pop        r14
000000000000d244         ret
                        ; endp
000000000000d245         align      8

                     loc_d248:
000000000000d248         sub        r13, rsi                                    ; CODE XREF=re_node_set_init_union+140
000000000000d24b         lea        rdi, qword [rax+rbx*8]                      ; argument "__dest" for method j_memcpy
000000000000d24f         lea        rsi, qword [r8+rsi*8]                       ; argument "__src" for method j_memcpy
000000000000d253         lea        rdx, qword [r13*8]                          ; argument "__n" for method j_memcpy
000000000000d25b         add        rbx, r13
000000000000d25e         call       j_memcpy                                    ; memcpy
000000000000d263         jmp        loc_d235
000000000000d265         align      8

                     loc_d268:
000000000000d268         sub        r14, rcx                                    ; CODE XREF=re_node_set_init_union+243
000000000000d26b         lea        rdi, qword [rax+rbx*8]                      ; argument "__dest" for method j_memcpy
000000000000d26f         lea        rsi, qword [r9+rcx*8]                       ; argument "__src" for method j_memcpy
000000000000d273         lea        rdx, qword [r14*8]                          ; argument "__n" for method j_memcpy
000000000000d27b         add        rbx, r14
000000000000d27e         call       j_memcpy                                    ; memcpy
000000000000d283         jmp        loc_d235
000000000000d285         align      8

                     loc_d288:
000000000000d288         mov        eax, 0xc                                    ; CODE XREF=re_node_set_init_union+87
000000000000d28d         jmp        loc_d212
000000000000d292         align      32                                          ; End of unwind block (FDE at 0x1ef50)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84


                     re_acquire_state_context:
000000000000d2a0         push       r15                                         ; Begin of unwind block (FDE at 0x1efb4), CODE XREF=build_trtable+597, build_trtable+2464, build_trtable+2539, check_arrival+987, check_arrival+1653, transit_state_bkref.isra.34+1239, transit_state_bkref.isra.34+1970, merge_state_with_log+254, merge_state_with_log+354, re_search_internal+3497, re_search_internal+3734
000000000000d2a2         push       r14
000000000000d2a4         push       r13
000000000000d2a6         push       r12
000000000000d2a8         push       rbp
000000000000d2a9         push       rbx
000000000000d2aa         sub        rsp, 0x28
000000000000d2ae         mov        r10, qword [rdx+8]
000000000000d2b2         test       r10, r10
000000000000d2b5         je         loc_d53f

000000000000d2bb         mov        r8d, ecx
000000000000d2be         test       r10, r10
000000000000d2c1         lea        r12, qword [r8+r10]
000000000000d2c5         jle        loc_d2dc

000000000000d2c7         mov        rax, qword [rdx+0x10]
000000000000d2cb         lea        r10, qword [rax+r10*8]
000000000000d2cf         nop

                     loc_d2d0:
000000000000d2d0         add        r12, qword [rax]                            ; CODE XREF=re_acquire_state_context+58
000000000000d2d3         add        rax, 0x8
000000000000d2d7         cmp        r10, rax
000000000000d2da         jne        loc_d2d0

                     loc_d2dc:
000000000000d2dc         mov        rax, qword [rsi+0x88]                       ; CODE XREF=re_acquire_state_context+37
000000000000d2e3         mov        rbp, rdx
000000000000d2e6         mov        dword [rsp+0x58+var_54], ecx
000000000000d2ea         mov        r13, rsi
000000000000d2ed         mov        qword [rsp+0x58+var_40], rdi
000000000000d2f2         and        rax, r12
000000000000d2f5         lea        rdx, qword [rax+rax*2]
000000000000d2f9         mov        rax, qword [rsi+0x40]
000000000000d2fd         lea        rax, qword [rax+rdx*8]
000000000000d301         mov        r11, qword [rax]
000000000000d304         test       r11, r11
000000000000d307         jle        loc_d360

000000000000d309         mov        rbx, qword [rax+0x10]
000000000000d30d         xor        r10d, r10d
000000000000d310         mov        r9d, ecx
000000000000d313         jmp        loc_d321
000000000000d315         align      8

                     loc_d318:
000000000000d318         add        r10, 0x1                                    ; CODE XREF=re_acquire_state_context+136, re_acquire_state_context+149, re_acquire_state_context+158, re_acquire_state_context+170
000000000000d31c         cmp        r10, r11
000000000000d31f         je         loc_d360

                     loc_d321:
000000000000d321         mov        r14, qword [rbx+r10*8]                      ; CODE XREF=re_acquire_state_context+115
000000000000d325         cmp        qword [r14], r12
000000000000d328         jne        loc_d318

000000000000d32a         movzx      eax, byte [r14+0x68]
000000000000d32f         and        eax, 0xf
000000000000d332         cmp        eax, r9d
000000000000d335         jne        loc_d318

000000000000d337         mov        rdi, qword [r14+0x50]
000000000000d33b         test       rdi, rdi
000000000000d33e         je         loc_d318

000000000000d340         mov        rsi, rbp
000000000000d343         call       re_node_set_compare.part.2                  ; re_node_set_compare.part.2
000000000000d348         test       al, al
000000000000d34a         je         loc_d318

                     loc_d34c:
000000000000d34c         add        rsp, 0x28                                   ; CODE XREF=re_acquire_state_context+520, re_acquire_state_context+548, re_acquire_state_context+680
000000000000d350         mov        rax, r14
000000000000d353         pop        rbx
000000000000d354         pop        rbp
000000000000d355         pop        r12
000000000000d357         pop        r13
000000000000d359         pop        r14
000000000000d35b         pop        r15
000000000000d35d         ret
                        ; endp
000000000000d35e         align      32

                     loc_d360:
000000000000d360         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_acquire_state_context+103, re_acquire_state_context+127
000000000000d365         mov        edi, 0x70                                   ; argument "__nmemb" for method j_calloc
000000000000d36a         call       j_calloc                                    ; calloc
000000000000d36f         test       rax, rax
000000000000d372         mov        r14, rax
000000000000d375         je         loc_d4b6

000000000000d37b         lea        rax, qword [rax+8]
000000000000d37f         mov        rsi, rbp
000000000000d382         mov        rdi, rax
000000000000d385         mov        rbx, rax
000000000000d388         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000d38d         test       eax, eax
000000000000d38f         jne        loc_d54d

000000000000d395         movzx      eax, byte [r14+0x68]
000000000000d39a         movzx      edx, byte [rsp+0x58+var_54]
000000000000d39f         mov        qword [r14+0x50], rbx
000000000000d3a3         and        edx, 0xf
000000000000d3a6         and        eax, 0xfffffff0
000000000000d3a9         or         eax, edx
000000000000d3ab         cmp        qword [rbp+8], 0x0
000000000000d3b0         mov        byte [r14+0x68], al
000000000000d3b4         jle        loc_d498

000000000000d3ba         lea        rcx, qword [r14+0x18]
000000000000d3be         xor        r15d, r15d
000000000000d3c1         mov        qword [rsp+0x58+var_48], r12
000000000000d3c6         xor        r10d, r10d
000000000000d3c9         mov        r12, r13
000000000000d3cc         mov        r13, r15
000000000000d3cf         mov        qword [rsp+0x58+var_50], rcx
000000000000d3d4         mov        r15, rbx
000000000000d3d7         nop        word [rax+rax]

                     loc_d3e0:
000000000000d3e0         mov        rax, qword [rbp+0x10]                       ; CODE XREF=re_acquire_state_context+490
000000000000d3e4         mov        rax, qword [rax+r13*8]
000000000000d3e8         shl        rax, 0x4
000000000000d3ec         add        rax, qword [r12]
000000000000d3f0         movzx      esi, byte [rax+8]
000000000000d3f4         mov        ebx, dword [rax+8]
000000000000d3f7         shr        ebx, 0x8
000000000000d3fa         and        bx, 0x3ff
000000000000d3ff         cmp        esi, 0x1
000000000000d402         movzx      edi, bx
000000000000d405         jne        loc_d40b

000000000000d407         test       edi, edi
000000000000d409         je         loc_d482

                     loc_d40b:
000000000000d40b         movzx      edx, byte [r14+0x68]                        ; CODE XREF=re_acquire_state_context+357
000000000000d410         movzx      eax, byte [rax+0xa]
000000000000d414         mov        r9d, edx
000000000000d417         shr        al, 0x4
000000000000d41a         and        edx, 0xffffffdf
000000000000d41d         shr        r9b, 0x5
000000000000d421         or         eax, r9d
000000000000d424         and        eax, 0x1
000000000000d427         shl        eax, 0x5
000000000000d42a         or         eax, edx
000000000000d42c         cmp        esi, 0x2
000000000000d42f         mov        byte [r14+0x68], al
000000000000d433         je         loc_d500

000000000000d439         cmp        esi, 0x4
000000000000d43c         jne        loc_d445

000000000000d43e         or         eax, 0x40
000000000000d441         mov        byte [r14+0x68], al

                     loc_d445:
000000000000d445         test       edi, edi                                    ; CODE XREF=re_acquire_state_context+412, re_acquire_state_context+615
000000000000d447         je         loc_d482

000000000000d449         cmp        r15, qword [r14+0x50]
000000000000d44d         je         loc_d510

                     loc_d453:
000000000000d453         test       bl, 0x1                                     ; CODE XREF=re_acquire_state_context+666
000000000000d456         je         loc_d4d0

000000000000d458         test       byte [rsp+0x58+var_54], 0x1
000000000000d45d         je         loc_d468

000000000000d45f         test       bl, 0x2
000000000000d462         je         loc_d4dc

000000000000d464         nop        dword [rax]

                     loc_d468:
000000000000d468         mov        rdx, r13                                    ; CODE XREF=re_acquire_state_context+445, re_acquire_state_context+570, re_acquire_state_context+582, re_acquire_state_context+596
000000000000d46b         sub        rdx, r10
000000000000d46e         js         loc_d47e

000000000000d470         mov        rsi, qword [rsp+0x58+var_50]
000000000000d475         lea        rdi, qword [r14+0x10]
000000000000d479         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_d47e:
000000000000d47e         add        r10, 0x1                                    ; CODE XREF=re_acquire_state_context+462

                     loc_d482:
000000000000d482         add        r13, 0x1                                    ; CODE XREF=re_acquire_state_context+361, re_acquire_state_context+423, re_acquire_state_context+587, re_acquire_state_context+594
000000000000d486         cmp        r13, qword [rbp+8]
000000000000d48a         jl         loc_d3e0

000000000000d490         mov        r13, r12
000000000000d493         mov        r12, qword [rsp+0x58+var_48]

                     loc_d498:
000000000000d498         mov        rdx, r12                                    ; CODE XREF=re_acquire_state_context+276
000000000000d49b         mov        rsi, r14
000000000000d49e         mov        rdi, r13
000000000000d4a1         call       register_state                              ; register_state
000000000000d4a6         test       eax, eax
000000000000d4a8         je         loc_d34c

                     loc_d4ae:
000000000000d4ae         mov        rdi, r14                                    ; CODE XREF=re_acquire_state_context+641
000000000000d4b1         call       free_state                                  ; free_state

                     loc_d4b6:
000000000000d4b6         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=re_acquire_state_context+213, re_acquire_state_context+656, re_acquire_state_context+693
000000000000d4bb         xor        r14d, r14d
000000000000d4be         mov        dword [rax], 0xc
000000000000d4c4         jmp        loc_d34c
000000000000d4c9         align      16

                     loc_d4d0:
000000000000d4d0         test       bl, 0x2                                     ; CODE XREF=re_acquire_state_context+438
000000000000d4d3         je         loc_d4dc

000000000000d4d5         test       byte [rsp+0x58+var_54], 0x1
000000000000d4da         jne        loc_d468

                     loc_d4dc:
000000000000d4dc         test       bl, 0x10                                    ; CODE XREF=re_acquire_state_context+450, re_acquire_state_context+563
000000000000d4df         je         loc_d4e8

000000000000d4e1         test       byte [rsp+0x58+var_54], 0x2
000000000000d4e6         je         loc_d468

                     loc_d4e8:
000000000000d4e8         and        ebx, 0x40                                   ; CODE XREF=re_acquire_state_context+575
000000000000d4eb         je         loc_d482

000000000000d4ed         test       byte [rsp+0x58+var_54], 0x4
000000000000d4f2         jne        loc_d482

000000000000d4f4         jmp        loc_d468
000000000000d4f9         align      256

                     loc_d500:
000000000000d500         or         eax, 0x10                                   ; CODE XREF=re_acquire_state_context+403
000000000000d503         mov        byte [r14+0x68], al
000000000000d507         jmp        loc_d445
000000000000d50c         align      16

                     loc_d510:
000000000000d510         mov        edi, 0x18                                   ; argument "__size" for method j_malloc, CODE XREF=re_acquire_state_context+429
000000000000d515         call       j_malloc                                    ; malloc
000000000000d51a         test       rax, rax
000000000000d51d         mov        qword [r14+0x50], rax
000000000000d521         je         loc_d4ae

000000000000d523         mov        rsi, rbp
000000000000d526         mov        rdi, rax
000000000000d529         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000d52e         test       eax, eax
000000000000d530         jne        loc_d4b6

000000000000d532         or         byte [r14+0x68], 0x80
000000000000d537         xor        r10d, r10d
000000000000d53a         jmp        loc_d453

                     loc_d53f:
000000000000d53f         mov        dword [rdi], 0x0                            ; CODE XREF=re_acquire_state_context+21
000000000000d545         xor        r14d, r14d
000000000000d548         jmp        loc_d34c

                     loc_d54d:
000000000000d54d         mov        rdi, r14                                    ; argument "__ptr" for method j_free, CODE XREF=re_acquire_state_context+239
000000000000d550         call       j_free                                      ; free
000000000000d555         jmp        loc_d4b6
000000000000d55a         align      32                                          ; End of unwind block (FDE at 0x1efb4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_acquire_state:
000000000000d560         push       r15                                         ; Begin of unwind block (FDE at 0x1f000), CODE XREF=merge_state_array+120, expand_bkref_cache+464, check_arrival+754, update_cur_sifted_state+219, update_cur_sifted_state+307
000000000000d562         push       r14
000000000000d564         push       r13
000000000000d566         push       r12
000000000000d568         push       rbp
000000000000d569         push       rbx
000000000000d56a         sub        rsp, 0x8
000000000000d56e         mov        rbp, qword [rdx+8]
000000000000d572         test       rbp, rbp
000000000000d575         je         loc_d750

000000000000d57b         test       rbp, rbp
000000000000d57e         jle        loc_d59c

000000000000d580         mov        rax, qword [rdx+0x10]
000000000000d584         lea        rcx, qword [rax+rbp*8]
000000000000d588         nop        dword [rax+rax]

                     loc_d590:
000000000000d590         add        rbp, qword [rax]                            ; CODE XREF=re_acquire_state+58
000000000000d593         add        rax, 0x8
000000000000d597         cmp        rcx, rax
000000000000d59a         jne        loc_d590

                     loc_d59c:
000000000000d59c         mov        rax, qword [rsi+0x88]                       ; CODE XREF=re_acquire_state+30
000000000000d5a3         mov        r14, rdx
000000000000d5a6         mov        r12, rsi
000000000000d5a9         mov        r13, rdi
000000000000d5ac         and        rax, rbp
000000000000d5af         lea        rdx, qword [rax+rax*2]
000000000000d5b3         mov        rax, qword [rsi+0x40]
000000000000d5b7         lea        rax, qword [rax+rdx*8]
000000000000d5bb         mov        r10, qword [rax]
000000000000d5be         test       r10, r10
000000000000d5c1         jle        loc_d5f6

000000000000d5c3         mov        r11, qword [rax+0x10]
000000000000d5c7         xor        r9d, r9d
000000000000d5ca         nop        word [rax+rax]

                     loc_d5d0:
000000000000d5d0         mov        rbx, qword [r11+r9*8]                       ; CODE XREF=re_acquire_state+148
000000000000d5d4         cmp        qword [rbx], rbp
000000000000d5d7         jne        loc_d5ed

000000000000d5d9         lea        rdi, qword [rbx+8]
000000000000d5dd         mov        rsi, r14
000000000000d5e0         call       re_node_set_compare.part.2                  ; re_node_set_compare.part.2
000000000000d5e5         test       al, al
000000000000d5e7         jne        loc_d6ef

                     loc_d5ed:
000000000000d5ed         add        r9, 0x1                                     ; CODE XREF=re_acquire_state+119
000000000000d5f1         cmp        r10, r9
000000000000d5f4         jne        loc_d5d0

                     loc_d5f6:
000000000000d5f6         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_acquire_state+97
000000000000d5fb         mov        edi, 0x70                                   ; argument "__nmemb" for method j_calloc
000000000000d600         call       j_calloc                                    ; calloc
000000000000d605         test       rax, rax
000000000000d608         mov        rbx, rax
000000000000d60b         je         loc_d738

000000000000d611         lea        r15, qword [rax+8]
000000000000d615         mov        rsi, r14
000000000000d618         mov        rdi, r15
000000000000d61b         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000d620         test       eax, eax
000000000000d622         jne        loc_d730

000000000000d628         mov        rax, qword [r14+8]
000000000000d62c         mov        qword [rbx+0x50], r15
000000000000d630         test       rax, rax
000000000000d633         jle        loc_d6dd

000000000000d639         mov        rsi, qword [r14+0x10]
000000000000d63d         mov        r8, qword [r12]
000000000000d641         lea        r9, qword [rsi+rax*8]
000000000000d645         jmp        loc_d694
000000000000d647         align      16

                     loc_d650:
000000000000d650         movzx      ecx, byte [rbx+0x68]                        ; CODE XREF=re_acquire_state+325
000000000000d654         movzx      edx, byte [rax+0xa]
000000000000d658         mov        r10d, ecx
000000000000d65b         shr        dl, 0x4
000000000000d65e         and        ecx, 0xffffffdf
000000000000d661         shr        r10b, 0x5
000000000000d665         or         edx, r10d
000000000000d668         and        edx, 0x1
000000000000d66b         shl        edx, 0x5
000000000000d66e         or         edx, ecx
000000000000d670         cmp        edi, 0x2
000000000000d673         mov        byte [rbx+0x68], dl
000000000000d676         je         loc_d708

000000000000d67c         cmp        edi, 0x4
000000000000d67f         jne        loc_d718

000000000000d685         or         edx, 0x40
000000000000d688         mov        byte [rbx+0x68], dl

                     loc_d68b:
000000000000d68b         add        rsi, 0x8                                    ; CODE XREF=re_acquire_state+334, re_acquire_state+430, re_acquire_state+452
000000000000d68f         cmp        r9, rsi
000000000000d692         je         loc_d6dd

                     loc_d694:
000000000000d694         mov        rax, qword [rsi]                            ; CODE XREF=re_acquire_state+229, re_acquire_state+379
000000000000d697         shl        rax, 0x4
000000000000d69b         add        rax, r8
000000000000d69e         movzx      edi, byte [rax+8]
000000000000d6a2         cmp        edi, 0x1
000000000000d6a5         jne        loc_d650

000000000000d6a7         test       dword [rax+8], 0x3ff00
000000000000d6ae         je         loc_d68b

000000000000d6b0         movzx      edx, byte [rbx+0x68]
000000000000d6b4         movzx      eax, byte [rax+0xa]
000000000000d6b8         mov        ecx, edx
000000000000d6ba         shr        al, 0x4
000000000000d6bd         and        edx, 0xffffffdf
000000000000d6c0         shr        cl, 0x5
000000000000d6c3         or         eax, ecx
000000000000d6c5         and        eax, 0x1
000000000000d6c8         shl        eax, 0x5
000000000000d6cb         or         eax, edx
000000000000d6cd         mov        byte [rbx+0x68], al

                     loc_d6d0:
000000000000d6d0         add        rsi, 0x8                                    ; CODE XREF=re_acquire_state+443, re_acquire_state+458
000000000000d6d4         or         byte [rbx+0x68], 0x80
000000000000d6d8         cmp        r9, rsi
000000000000d6db         jne        loc_d694

                     loc_d6dd:
000000000000d6dd         mov        rdx, rbp                                    ; CODE XREF=re_acquire_state+211, re_acquire_state+306
000000000000d6e0         mov        rsi, rbx
000000000000d6e3         mov        rdi, r12
000000000000d6e6         call       register_state                              ; register_state
000000000000d6eb         test       eax, eax
000000000000d6ed         jne        loc_d744

                     loc_d6ef:
000000000000d6ef         add        rsp, 0x8                                    ; CODE XREF=re_acquire_state+135, re_acquire_state+482, re_acquire_state+504
000000000000d6f3         mov        rax, rbx
000000000000d6f6         pop        rbx
000000000000d6f7         pop        rbp
000000000000d6f8         pop        r12
000000000000d6fa         pop        r13
000000000000d6fc         pop        r14
000000000000d6fe         pop        r15
000000000000d700         ret
                        ; endp
000000000000d701         align      8

                     loc_d708:
000000000000d708         or         edx, 0x10                                   ; CODE XREF=re_acquire_state+278
000000000000d70b         mov        byte [rbx+0x68], dl
000000000000d70e         jmp        loc_d68b
000000000000d713         align      8

                     loc_d718:
000000000000d718         cmp        edi, 0xc                                    ; CODE XREF=re_acquire_state+287
000000000000d71b         je         loc_d6d0

000000000000d71d         test       dword [rax+8], 0x3ff00
000000000000d724         je         loc_d68b

000000000000d72a         jmp        loc_d6d0
000000000000d72c         align      16

                     loc_d730:
000000000000d730         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=re_acquire_state+194
000000000000d733         call       j_free                                      ; free

                     loc_d738:
000000000000d738         mov        dword [r13], 0xc                            ; CODE XREF=re_acquire_state+171, re_acquire_state+492
000000000000d740         xor        ebx, ebx
000000000000d742         jmp        loc_d6ef

                     loc_d744:
000000000000d744         mov        rdi, rbx                                    ; CODE XREF=re_acquire_state+397
000000000000d747         call       free_state                                  ; free_state
000000000000d74c         jmp        loc_d738
000000000000d74e         align      16

                     loc_d750:
000000000000d750         mov        dword [rdi], 0x0                            ; CODE XREF=re_acquire_state+21
000000000000d756         xor        ebx, ebx
000000000000d758         jmp        loc_d6ef
000000000000d75a         align      32                                          ; End of unwind block (FDE at 0x1f000)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112


                     merge_state_array:
000000000000d760         push       r15                                         ; Begin of unwind block (FDE at 0x1f04c), CODE XREF=re_search_internal+5755, update_cur_sifted_state+1819
000000000000d762         push       r14
000000000000d764         push       r13
000000000000d766         push       r12
000000000000d768         push       rbp
000000000000d769         push       rbx
000000000000d76a         sub        rsp, 0x48
000000000000d76e         mov        rax, qword [fs:0x28]
000000000000d777         mov        qword [rsp+0x78+var_40], rax
000000000000d77c         xor        eax, eax
000000000000d77e         test       rcx, rcx
000000000000d781         jle        loc_d816

000000000000d787         lea        rax, qword [rsp+0x78+var_5C]
000000000000d78c         mov        r14, rdi
000000000000d78f         mov        rbx, rsi
000000000000d792         mov        r12, rdx
000000000000d795         mov        rbp, rcx
000000000000d798         xor        r15d, r15d
000000000000d79b         lea        r13, qword [rsp+0x78+var_58]
000000000000d7a0         mov        qword [rsp+0x78+var_70], rax
000000000000d7a5         jmp        loc_d7fc
000000000000d7a7         align      16

                     loc_d7b0:
000000000000d7b0         test       rdx, rdx                                    ; CODE XREF=merge_state_array+167
000000000000d7b3         je         loc_d7f3

000000000000d7b5         add        rdx, 0x8
000000000000d7b9         add        rsi, 0x8
000000000000d7bd         mov        rdi, r13
000000000000d7c0         call       re_node_set_init_union                      ; re_node_set_init_union
000000000000d7c5         test       eax, eax
000000000000d7c7         mov        dword [rsp+0x78+var_5C], eax
000000000000d7cb         jne        loc_d818

000000000000d7cd         mov        rdi, qword [rsp+0x78+var_70]
000000000000d7d2         mov        rdx, r13
000000000000d7d5         mov        rsi, r14
000000000000d7d8         call       re_acquire_state                            ; re_acquire_state
000000000000d7dd         mov        rdi, qword [rsp+0x78+var_48]                ; argument "__ptr" for method j_free
000000000000d7e2         mov        qword [rbx+r15*8], rax
000000000000d7e6         call       j_free                                      ; free
000000000000d7eb         mov        eax, dword [rsp+0x78+var_5C]
000000000000d7ef         test       eax, eax
000000000000d7f1         jne        loc_d818

                     loc_d7f3:
000000000000d7f3         add        r15, 0x1                                    ; CODE XREF=merge_state_array+83
000000000000d7f7         cmp        rbp, r15
000000000000d7fa         je         loc_d816

                     loc_d7fc:
000000000000d7fc         mov        rsi, qword [rbx+r15*8]                      ; CODE XREF=merge_state_array+69, merge_state_array+180
000000000000d800         mov        rdx, qword [r12+r15*8]
000000000000d804         test       rsi, rsi
000000000000d807         jne        loc_d7b0

000000000000d809         mov        qword [rbx+r15*8], rdx
000000000000d80d         add        r15, 0x1
000000000000d811         cmp        rbp, r15
000000000000d814         jne        loc_d7fc

                     loc_d816:
000000000000d816         xor        eax, eax                                    ; CODE XREF=merge_state_array+33, merge_state_array+154

                     loc_d818:
000000000000d818         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=merge_state_array+107, merge_state_array+145
000000000000d81d         xor        rcx, qword [fs:0x28]
000000000000d826         jne        loc_d837

000000000000d828         add        rsp, 0x48
000000000000d82c         pop        rbx
000000000000d82d         pop        rbp
000000000000d82e         pop        r12
000000000000d830         pop        r13
000000000000d832         pop        r14
000000000000d834         pop        r15
000000000000d836         ret
                        ; endp

                     loc_d837:
000000000000d837         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=merge_state_array+198
                        ; endp
000000000000d83c         align      64                                          ; End of unwind block (FDE at 0x1f04c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     expand_bkref_cache:
000000000000d840         push       r15                                         ; Begin of unwind block (FDE at 0x1f098), CODE XREF=check_arrival+928, check_arrival+1614
000000000000d842         push       r14
000000000000d844         push       r13
000000000000d846         push       r12
000000000000d848         mov        r12, rdx
000000000000d84b         push       rbp
000000000000d84c         push       rbx
000000000000d84d         mov        rbx, rdi
000000000000d850         mov        rbp, rsi
000000000000d853         xor        esi, esi
000000000000d855         sub        rsp, 0x78
000000000000d859         mov        rdi, qword [rdi+0xc8]
000000000000d860         mov        rax, qword [fs:0x28]
000000000000d869         mov        qword [rsp+0xa8+var_40], rax
000000000000d86e         xor        eax, eax
000000000000d870         mov        qword [rsp+0xa8+var_88], rcx
000000000000d875         mov        dword [rsp+0xa8+var_7C], r8d
000000000000d87a         mov        rdx, rdi

                     loc_d87d:
000000000000d87d         cmp        rsi, rdx                                    ; CODE XREF=expand_bkref_cache+247
000000000000d880         jge        loc_d8d7

000000000000d882         lea        rax, qword [rsi+rdx]
000000000000d886         mov        r8, qword [rbx+0xd8]
000000000000d88d         mov        rcx, rax
000000000000d890         shr        rcx, 0x3f
000000000000d894         add        rcx, rax
000000000000d897         sar        rcx, 0x1
000000000000d89a         lea        rax, qword [rcx+rcx*4]
000000000000d89e         cmp        r12, qword [r8+rax*8+8]
000000000000d8a3         jle        loc_d8d2

000000000000d8a5         jmp        loc_d928
000000000000d8aa         align      16

                     loc_d8b0:
000000000000d8b0         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=expand_bkref_cache+149
000000000000d8b4         mov        rax, rdx
000000000000d8b7         shr        rax, 0x3f
000000000000d8bb         add        rax, rdx
000000000000d8be         sar        rax, 0x1
000000000000d8c1         lea        rdx, qword [rax+rax*4]
000000000000d8c5         mov        r9, rax
000000000000d8c8         cmp        r12, qword [r8+rdx*8+8]
000000000000d8cd         jg         loc_d930

000000000000d8cf         mov        rcx, rax

                     loc_d8d2:
000000000000d8d2         cmp        rsi, rcx                                    ; CODE XREF=expand_bkref_cache+99
000000000000d8d5         jl         loc_d8b0

                     loc_d8d7:
000000000000d8d7         cmp        rdi, rsi                                    ; CODE XREF=expand_bkref_cache+64
000000000000d8da         jle        loc_d8fd

000000000000d8dc         mov        rcx, qword [rbx+0xd8]
000000000000d8e3         lea        rax, qword [rsi+rsi*4]
000000000000d8e7         shl        rax, 0x3
000000000000d8eb         cmp        qword [rcx+rax+8], r12
000000000000d8f0         mov        qword [rsp+0xa8+var_78], rax
000000000000d8f5         jne        loc_d8fd

000000000000d8f7         cmp        rsi, 0xffffffffffffffff
000000000000d8fb         jne        loc_d940

                     loc_d8fd:
000000000000d8fd         xor        eax, eax                                    ; CODE XREF=expand_bkref_cache+154, expand_bkref_cache+181, expand_bkref_cache+514

                     loc_d8ff:
000000000000d8ff         mov        rbx, qword [rsp+0xa8+var_40]                ; CODE XREF=expand_bkref_cache+833, expand_bkref_cache+854, expand_bkref_cache+865, expand_bkref_cache+872, expand_bkref_cache+888
000000000000d904         xor        rbx, qword [fs:0x28]
000000000000d90d         jne        loc_dbd9

000000000000d913         add        rsp, 0x78
000000000000d917         pop        rbx
000000000000d918         pop        rbp
000000000000d919         pop        r12
000000000000d91b         pop        r13
000000000000d91d         pop        r14
000000000000d91f         pop        r15
000000000000d921         ret
                        ; endp
000000000000d922         align      8

                     loc_d928:
000000000000d928         mov        r9, rcx                                     ; CODE XREF=expand_bkref_cache+101
000000000000d92b         mov        rcx, rdx
000000000000d92e         nop

                     loc_d930:
000000000000d930         lea        rsi, qword [r9+1]                           ; CODE XREF=expand_bkref_cache+141
000000000000d934         mov        rdx, rcx
000000000000d937         jmp        loc_d87d
000000000000d93c         align      64

                     loc_d940:
000000000000d940         lea        rax, qword [rbp+0x10]                       ; CODE XREF=expand_bkref_cache+187
000000000000d944         mov        r13, qword [rbx+0x98]
000000000000d94b         mov        qword [rsp+0xa8+var_A8], rax
000000000000d94f         lea        rax, qword [rsp+0xa8+var_5C]
000000000000d954         mov        qword [rsp+0xa8+var_70], rax
000000000000d959         lea        rax, qword [rsp+0xa8+var_58]
000000000000d95e         mov        qword [rsp+0xa8+var_98], rax

                     loc_d963:
000000000000d963         mov        rax, qword [rsp+0xa8+var_78]                ; CODE XREF=expand_bkref_cache+737
000000000000d968         lea        r15, qword [rcx+rax]
000000000000d96c         jmp        loc_da48
000000000000d971         align      8

                     loc_d978:
000000000000d978         mov        rax, qword [r13+0x18]                       ; CODE XREF=expand_bkref_cache+564
000000000000d97c         mov        rcx, qword [rax+r10*8]
000000000000d980         mov        r10, qword [rbx+0xb8]
000000000000d987         lea        rax, qword [r14*8]
000000000000d98f         mov        qword [rsp+0xa8+var_90], rax
000000000000d994         add        r10, rax
000000000000d997         mov        qword [rsp+0xa8+var_A0], rcx
000000000000d99c         mov        r9, qword [r10]
000000000000d99f         test       r9, r9
000000000000d9a2         je         loc_db30

000000000000d9a8         mov        rdi, qword [r9+0x10]
000000000000d9ac         lea        rsi, qword [r9+0x18]
000000000000d9b0         mov        rdx, rcx
000000000000d9b3         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000d9b8         test       rax, rax
000000000000d9bb         jne        loc_da39

000000000000d9bd         mov        rdi, qword [rsp+0xa8+var_98]
000000000000d9c2         lea        rsi, qword [r9+8]
000000000000d9c6         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000d9cb         mov        rsi, qword [rsp+0xa8+var_A0]
000000000000d9d0         mov        rdi, qword [rsp+0xa8+var_98]
000000000000d9d5         mov        dword [rsp+0xa8+var_5C], eax
000000000000d9d9         call       re_node_set_insert                          ; re_node_set_insert
000000000000d9de         mov        edx, dword [rsp+0xa8+var_5C]
000000000000d9e2         test       edx, edx
000000000000d9e4         jne        loc_db86

000000000000d9ea         cmp        al, 0x1
000000000000d9ec         jne        loc_db86

000000000000d9f2         mov        r10, qword [rsp+0xa8+var_90]
000000000000d9f7         add        r10, qword [rbx+0xb8]

                     loc_d9fe:
000000000000d9fe         mov        rdx, qword [rsp+0xa8+var_98]                ; CODE XREF=expand_bkref_cache+816
000000000000da03         mov        rdi, qword [rsp+0xa8+var_70]
000000000000da08         mov        rsi, r13
000000000000da0b         mov        qword [rsp+0xa8+var_A0], r10
000000000000da10         call       re_acquire_state                            ; re_acquire_state
000000000000da15         mov        r10, qword [rsp+0xa8+var_A0]
000000000000da1a         mov        rdi, qword [rsp+0xa8+var_48]                ; argument "__ptr" for method j_free
000000000000da1f         mov        qword [r10], rax
000000000000da22         call       j_free                                      ; free
000000000000da27         mov        rax, qword [rbx+0xb8]
000000000000da2e         cmp        qword [rax+r14*8], 0x0
000000000000da33         je         loc_db75

                     loc_da39:
000000000000da39         add        r15, 0x28                                   ; CODE XREF=expand_bkref_cache+379, expand_bkref_cache+545, expand_bkref_cache+607, expand_bkref_cache+827
000000000000da3d         cmp        byte [r15-8], 0x0
000000000000da42         je         loc_d8fd

                     loc_da48:
000000000000da48         mov        r10, qword [r15]                            ; CODE XREF=expand_bkref_cache+300
000000000000da4b         mov        r9, qword [rbp+8]
000000000000da4f         mov        rsi, qword [rsp+0xa8+var_A8]
000000000000da53         mov        rdx, r10
000000000000da56         mov        rdi, r9
000000000000da59         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000da5e         test       rax, rax
000000000000da61         je         loc_da39

000000000000da63         mov        r8, qword [r15+0x18]
000000000000da67         add        r8, r12
000000000000da6a         mov        r14, r8
000000000000da6d         sub        r14, qword [r15+0x10]
000000000000da71         cmp        r12, r14
000000000000da74         jne        loc_d978

000000000000da7a         mov        rcx, qword [r13+0x28]
000000000000da7e         lea        rax, qword [r10+r10*2]
000000000000da82         mov        rsi, qword [rsp+0xa8+var_A8]
000000000000da86         mov        rdi, r9
000000000000da89         lea        rax, qword [rcx+rax*8]
000000000000da8d         mov        rax, qword [rax+0x10]
000000000000da91         mov        r14, qword [rax]
000000000000da94         mov        rdx, r14
000000000000da97         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000da9c         test       rax, rax
000000000000da9f         jne        loc_da39

000000000000daa1         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
000000000000daa6         mov        qword [rsp+0xa8+var_58], 0x1
000000000000daaf         mov        qword [rsp+0xa8+var_50], 0x1
000000000000dab8         call       j_malloc                                    ; malloc
000000000000dabd         test       rax, rax
000000000000dac0         mov        qword [rsp+0xa8+var_48], rax
000000000000dac5         je         loc_dbbd

000000000000dacb         mov        qword [rax], r14
000000000000dace         xor        eax, eax

                     loc_dad0:
000000000000dad0         mov        r15, qword [rsp+0xa8+var_98]                ; CODE XREF=expand_bkref_cache+916
000000000000dad5         mov        rdx, qword [rsp+0xa8+var_88]
000000000000dada         mov        rdi, r13
000000000000dadd         mov        ecx, dword [rsp+0xa8+var_7C]
000000000000dae1         mov        dword [rsp+0xa8+var_5C], eax
000000000000dae5         mov        rsi, r15
000000000000dae8         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
000000000000daed         mov        rsi, r15
000000000000daf0         mov        rdi, rbp
000000000000daf3         mov        r14d, eax
000000000000daf6         call       re_node_set_merge                           ; re_node_set_merge
000000000000dafb         mov        rdi, qword [rsp+0xa8+var_48]                ; argument "__ptr" for method j_free
000000000000db00         mov        r15d, eax
000000000000db03         call       j_free                                      ; free
000000000000db08         mov        eax, dword [rsp+0xa8+var_5C]
000000000000db0c         mov        edx, r14d
000000000000db0f         or         edx, r15d
000000000000db12         or         edx, eax
000000000000db14         jne        loc_dba6

000000000000db1a         mov        rcx, qword [rbx+0xd8]
000000000000db21         jmp        loc_d963
000000000000db26         align      16

                     loc_db30:
000000000000db30         mov        edi, 0x8                                    ; argument "__size" for method j_malloc, CODE XREF=expand_bkref_cache+354
000000000000db35         mov        qword [rsp+0xa8+var_90], r10
000000000000db3a         mov        qword [rsp+0xa8+var_58], 0x1
000000000000db43         mov        qword [rsp+0xa8+var_50], 0x1
000000000000db4c         call       j_malloc                                    ; malloc
000000000000db51         test       rax, rax
000000000000db54         mov        qword [rsp+0xa8+var_48], rax
000000000000db59         je         loc_db9c

000000000000db5b         mov        rdi, qword [rsp+0xa8+var_A0]
000000000000db60         mov        dword [rsp+0xa8+var_5C], 0x0
000000000000db68         mov        r10, qword [rsp+0xa8+var_90]
000000000000db6d         mov        qword [rax], rdi
000000000000db70         jmp        loc_d9fe

                     loc_db75:
000000000000db75         mov        eax, dword [rsp+0xa8+var_5C]                ; CODE XREF=expand_bkref_cache+499
000000000000db79         test       eax, eax
000000000000db7b         je         loc_da39

000000000000db81         jmp        loc_d8ff

                     loc_db86:
000000000000db86         mov        rdi, qword [rsp+0xa8+var_48]                ; argument "__ptr" for method j_free, CODE XREF=expand_bkref_cache+420, expand_bkref_cache+428
000000000000db8b         call       j_free                                      ; free
000000000000db90         mov        eax, dword [rsp+0xa8+var_5C]
000000000000db94         test       eax, eax
000000000000db96         jne        loc_d8ff

                     loc_db9c:
000000000000db9c         mov        eax, 0xc                                    ; CODE XREF=expand_bkref_cache+793
000000000000dba1         jmp        loc_d8ff

                     loc_dba6:
000000000000dba6         test       eax, eax                                    ; CODE XREF=expand_bkref_cache+724
000000000000dba8         jne        loc_d8ff

000000000000dbae         test       r14d, r14d
000000000000dbb1         mov        eax, r14d
000000000000dbb4         cmove      eax, r15d
000000000000dbb8         jmp        loc_d8ff

                     loc_dbbd:
000000000000dbbd         mov        qword [rsp+0xa8+var_50], 0x0                ; CODE XREF=expand_bkref_cache+645
000000000000dbc6         mov        qword [rsp+0xa8+var_58], 0x0
000000000000dbcf         mov        eax, 0xc
000000000000dbd4         jmp        loc_dad0

                     loc_dbd9:
000000000000dbd9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=expand_bkref_cache+205
                        ; endp
000000000000dbde         align      32                                          ; End of unwind block (FDE at 0x1f098)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     check_subexp_matching_top.isra.18:
000000000000dbe0         push       r15                                         ; Begin of unwind block (FDE at 0x1f0e4), CODE XREF=transit_state_bkref.isra.34+2056, merge_state_with_log+417, re_search_internal+5535
000000000000dbe2         push       r14
000000000000dbe4         push       r13
000000000000dbe6         push       r12
000000000000dbe8         push       rbp
000000000000dbe9         push       rbx
000000000000dbea         sub        rsp, 0x28
000000000000dbee         cmp        qword [rsi], 0x0
000000000000dbf2         mov        r13, qword [rdi+0x98]
000000000000dbf9         jle        loc_dcc0

000000000000dbff         mov        r14, rdx
000000000000dc02         mov        r12, rsi
000000000000dc05         mov        r15, rdi
000000000000dc08         xor        ebx, ebx
000000000000dc0a         jmp        loc_dc1e
000000000000dc0c         align      16

                     loc_dc10:
000000000000dc10         add        rbx, 0x1                                    ; CODE XREF=check_subexp_matching_top.isra.18+84, check_subexp_matching_top.isra.18+93, check_subexp_matching_top.isra.18+106
000000000000dc14         cmp        rbx, qword [r12]
000000000000dc18         jge        loc_dcc0

                     loc_dc1e:
000000000000dc1e         mov        rax, qword [r14]                            ; CODE XREF=check_subexp_matching_top.isra.18+42, check_subexp_matching_top.isra.18+211
000000000000dc21         mov        rbp, qword [rax+rbx*8]
000000000000dc25         mov        rax, rbp
000000000000dc28         shl        rax, 0x4
000000000000dc2c         add        rax, qword [r13]
000000000000dc30         cmp        byte [rax+8], 0x8
000000000000dc34         jne        loc_dc10

000000000000dc36         mov        rax, qword [rax]
000000000000dc39         cmp        rax, 0x3f
000000000000dc3d         jg         loc_dc10

000000000000dc3f         mov        rsi, qword [r13+0xa0]
000000000000dc46         bt         rsi, rax
000000000000dc4a         jae        loc_dc10

000000000000dc4c         mov        r8, qword [r15+0xe8]
000000000000dc53         cmp        r8, qword [r15+0xf0]
000000000000dc5a         mov        r9, qword [r15+0xf8]
000000000000dc61         je         loc_dcd8

                     loc_dc63:
000000000000dc63         mov        esi, 0x30                                   ; argument "__size" for method j_calloc, CODE XREF=check_subexp_matching_top.isra.18+316
000000000000dc68         mov        edi, 0x1                                    ; argument "__nmemb" for method j_calloc
000000000000dc6d         mov        qword [rsp+0x58+var_48], r9
000000000000dc72         mov        qword [rsp+0x58+var_50], r8
000000000000dc77         mov        qword [rsp+0x58+var_40], rcx
000000000000dc7c         call       j_calloc                                    ; calloc
000000000000dc81         mov        r8, qword [rsp+0x58+var_50]
000000000000dc86         mov        r9, qword [rsp+0x58+var_48]
000000000000dc8b         test       rax, rax
000000000000dc8e         mov        qword [r9+r8*8], rax
000000000000dc92         je         loc_dcd1

000000000000dc94         add        r8, 0x1
000000000000dc98         add        rbx, 0x1
000000000000dc9c         mov        rcx, qword [rsp+0x58+var_40]
000000000000dca1         mov        qword [r15+0xe8], r8
000000000000dca8         cmp        rbx, qword [r12]
000000000000dcac         mov        qword [rax+8], rbp
000000000000dcb0         mov        qword [rax], rcx
000000000000dcb3         jl         loc_dc1e

000000000000dcb9         nop        dword [rax]

                     loc_dcc0:
000000000000dcc0         xor        eax, eax                                    ; CODE XREF=check_subexp_matching_top.isra.18+25, check_subexp_matching_top.isra.18+56

                     loc_dcc2:
000000000000dcc2         add        rsp, 0x28                                   ; CODE XREF=check_subexp_matching_top.isra.18+246
000000000000dcc6         pop        rbx
000000000000dcc7         pop        rbp
000000000000dcc8         pop        r12
000000000000dcca         pop        r13
000000000000dccc         pop        r14
000000000000dcce         pop        r15
000000000000dcd0         ret
                        ; endp

                     loc_dcd1:
000000000000dcd1         mov        eax, 0xc                                    ; CODE XREF=check_subexp_matching_top.isra.18+178, check_subexp_matching_top.isra.18+288
000000000000dcd6         jmp        loc_dcc2

                     loc_dcd8:
000000000000dcd8         lea        rax, qword [r8+r8]                          ; CODE XREF=check_subexp_matching_top.isra.18+129
000000000000dcdc         mov        rsi, r8
000000000000dcdf         mov        rdi, r9                                     ; argument "__ptr" for method j_realloc
000000000000dce2         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
000000000000dce6         mov        qword [rsp+0x58+var_50], rcx
000000000000dceb         mov        qword [rsp+0x58+var_48], rax
000000000000dcf0         call       j_realloc                                   ; realloc
000000000000dcf5         test       rax, rax
000000000000dcf8         mov        r9, rax
000000000000dcfb         mov        rcx, qword [rsp+0x58+var_50]
000000000000dd00         je         loc_dcd1

000000000000dd02         mov        qword [r15+0xf8], rax
000000000000dd09         mov        rax, qword [rsp+0x58+var_48]
000000000000dd0e         mov        r8, qword [r15+0xe8]
000000000000dd15         mov        qword [r15+0xf0], rax
000000000000dd1c         jmp        loc_dc63
000000000000dd21         align      16                                          ; End of unwind block (FDE at 0x1f0e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     re_string_context_at:
000000000000dd30         push       rbp                                         ; Begin of unwind block (FDE at 0x1f130), CODE XREF=check_node_accept+109, check_halt_state_context.isra.20+22, re_string_reconstruct+201, re_string_reconstruct+805, re_string_reconstruct+1635, check_arrival+192, check_arrival+962, check_arrival+1179, transit_state_bkref.isra.34+265, transit_state_bkref.isra.34+1092, merge_state_with_log+222
000000000000dd31         push       rbx
000000000000dd32         mov        rbp, rdi
000000000000dd35         sub        rsp, 0x8
000000000000dd39         test       rsi, rsi
000000000000dd3c         js         loc_dd90

000000000000dd3e         cmp        qword [rdi+0x58], rsi
000000000000dd42         je         loc_dde8

000000000000dd48         cmp        dword [rdi+0x90], 0x1
000000000000dd4f         jle        loc_dda0

000000000000dd51         mov        rax, qword [rdi+0x10]
000000000000dd55         jmp        loc_dd6a
000000000000dd57         align      32

                     loc_dd60:
000000000000dd60         sub        rsi, 0x1                                    ; CODE XREF=re_string_context_at+64
000000000000dd64         cmp        rsi, 0xffffffffffffffff
000000000000dd68         je         loc_dd90

                     loc_dd6a:
000000000000dd6a         mov        ebx, dword [rax+rsi*4]                      ; CODE XREF=re_string_context_at+37
000000000000dd6d         cmp        ebx, 0xffffffff
000000000000dd70         je         loc_dd60

000000000000dd72         cmp        byte [rbp+0x8e], 0x0
000000000000dd79         jne        loc_ddf8

                     loc_dd7b:
000000000000dd7b         xor        eax, eax                                    ; CODE XREF=re_string_context_at+214
000000000000dd7d         cmp        ebx, 0xa
000000000000dd80         je         loc_ddcc

                     loc_dd82:
000000000000dd82         add        rsp, 0x8                                    ; CODE XREF=re_string_context_at+147, re_string_context_at+154, re_string_context_at+198, re_string_context_at+225
000000000000dd86         pop        rbx
000000000000dd87         pop        rbp
000000000000dd88         ret
                        ; endp
000000000000dd89         align      16

                     loc_dd90:
000000000000dd90         mov        eax, dword [rbp+0x70]                       ; CODE XREF=re_string_context_at+12, re_string_context_at+56
000000000000dd93         add        rsp, 0x8
000000000000dd97         pop        rbx
000000000000dd98         pop        rbp
000000000000dd99         ret
                        ; endp
000000000000dd9a         align      32

                     loc_dda0:
000000000000dda0         mov        rax, qword [rdi+8]                          ; CODE XREF=re_string_context_at+31
000000000000dda4         mov        rcx, qword [rdi+0x80]
000000000000ddab         movzx      eax, byte [rax+rsi]
000000000000ddaf         mov        rdx, rax
000000000000ddb2         sar        rax, 0x6
000000000000ddb6         mov        rcx, qword [rcx+rax*8]
000000000000ddba         mov        eax, 0x1
000000000000ddbf         bt         rcx, rdx
000000000000ddc3         jb         loc_dd82

000000000000ddc5         xor        eax, eax
000000000000ddc7         cmp        dl, 0xa
000000000000ddca         jne        loc_dd82

                     loc_ddcc:
000000000000ddcc         xor        eax, eax                                    ; CODE XREF=re_string_context_at+80
000000000000ddce         cmp        byte [rbp+0x8d], 0x0
000000000000ddd5         setne      al
000000000000ddd8         add        rsp, 0x8
000000000000dddc         add        eax, eax
000000000000ddde         pop        rbx
000000000000dddf         pop        rbp
000000000000dde0         ret
                        ; endp
000000000000dde1         align      8

                     loc_dde8:
000000000000dde8         and        edx, 0x2                                    ; CODE XREF=re_string_context_at+18
000000000000ddeb         cmp        edx, 0x1
000000000000ddee         sbb        eax, eax
000000000000ddf0         and        eax, 0x2
000000000000ddf3         add        eax, 0x8
000000000000ddf6         jmp        loc_dd82

                     loc_ddf8:
000000000000ddf8         mov        edi, ebx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=re_string_context_at+73
000000000000ddfa         call       j_iswalnum                                  ; iswalnum
000000000000ddff         test       eax, eax
000000000000de01         jne        loc_de0c

000000000000de03         cmp        ebx, 0x5f
000000000000de06         jne        loc_dd7b

                     loc_de0c:
000000000000de0c         mov        eax, 0x1                                    ; CODE XREF=re_string_context_at+209
000000000000de11         jmp        loc_dd82
000000000000de16         align      32                                          ; End of unwind block (FDE at 0x1f130)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_node_accept:
000000000000de20         mov        rax, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x1f174), CODE XREF=check_arrival+495, set_regs+378, sift_states_backward+295
000000000000de24         movzx      ecx, byte [rax+rdx]
000000000000de28         movzx      eax, byte [rsi+8]
000000000000de2c         cmp        al, 0x3
000000000000de2e         je         loc_dee8

000000000000de34         jbe        loc_ded0

000000000000de3a         cmp        al, 0x5
000000000000de3c         je         loc_de50

000000000000de3e         cmp        al, 0x7
000000000000de40         jne        loc_dee0

000000000000de46         xor        eax, eax
000000000000de48         test       cl, cl
000000000000de4a         js         loc_deda

                     loc_de50:
000000000000de50         cmp        cl, 0xa                                     ; CODE XREF=check_node_accept+28
000000000000de53         je         loc_df18

000000000000de59         test       cl, cl
000000000000de5b         jne        loc_de70

000000000000de5d         mov        rcx, qword [rdi+0x98]
000000000000de64         xor        eax, eax
000000000000de66         test       byte [rcx+0xd8], 0x80
000000000000de6d         jne        loc_deda

000000000000de6f         nop

                     loc_de70:
000000000000de70         push       rbx                                         ; CODE XREF=check_node_accept+59, check_node_accept+184, check_node_accept+220, check_node_accept+264
000000000000de71         mov        ebx, dword [rsi+8]
000000000000de74         mov        eax, 0x1
000000000000de79         test       ebx, 0x3ff00
000000000000de7f         je         loc_decc

000000000000de81         mov        rsi, rdx
000000000000de84         mov        edx, dword [rdi+0xa0]
000000000000de8a         shr        ebx, 0x8
000000000000de8d         call       re_string_context_at                        ; re_string_context_at
000000000000de92         mov        ecx, ebx
000000000000de94         mov        edx, eax
000000000000de96         and        cx, 0x3ff
000000000000de9b         test       bl, 0x4
000000000000de9e         je         loc_df08

000000000000dea0         xor        eax, eax
000000000000dea2         test       dl, 0x1
000000000000dea5         je         loc_decc

000000000000dea7         and        ebx, 0x8
000000000000deaa         jne        loc_decc

                     loc_deac:
000000000000deac         test       cl, 0x20                                    ; CODE XREF=check_node_accept+235, check_node_accept+239
000000000000deaf         je         loc_deb8

000000000000deb1         xor        eax, eax
000000000000deb3         test       dl, 0x2
000000000000deb6         je         loc_decc

                     loc_deb8:
000000000000deb8         shr        edx, 0x3                                    ; CODE XREF=check_node_accept+143
000000000000debb         mov        eax, 0x1
000000000000dec0         and        edx, 0x1
000000000000dec3         and        ecx, 0x80
000000000000dec9         cmovne     eax, edx

                     loc_decc:
000000000000decc         pop        rbx                                         ; CODE XREF=check_node_accept+95, check_node_accept+133, check_node_accept+138, check_node_accept+150
000000000000decd         ret
                        ; endp
000000000000dece         align      16

                     loc_ded0:
000000000000ded0         cmp        al, 0x1                                     ; CODE XREF=check_node_accept+20
000000000000ded2         jne        loc_dee0

000000000000ded4         xor        eax, eax
000000000000ded6         cmp        byte [rsi], cl
000000000000ded8         je         loc_de70

                     loc_deda:
000000000000deda         ret                                                    ; CODE XREF=check_node_accept+42, check_node_accept+77
                        ; endp
000000000000dedc         align      32

                     loc_dee0:
000000000000dee0         xor        eax, eax                                    ; CODE XREF=check_node_accept+32, check_node_accept+178
000000000000dee2         ret
                        ; endp
000000000000dee3         align      8

                     loc_dee8:
000000000000dee8         mov        r8, qword [rsi]                             ; CODE XREF=check_node_accept+14
000000000000deeb         movzx      eax, cl
000000000000deee         sar        rax, 0x6
000000000000def2         mov        r8, qword [r8+rax*8]
000000000000def6         xor        eax, eax
000000000000def8         bt         r8, rcx
000000000000defc         jb         loc_de70

000000000000df02         ret
                        ; endp
000000000000df04         align      8

                     loc_df08:
000000000000df08         and        ebx, 0x8                                    ; CODE XREF=check_node_accept+126
000000000000df0b         je         loc_deac

000000000000df0d         test       al, 0x1
000000000000df0f         je         loc_deac

000000000000df11         xor        eax, eax
000000000000df13         pop        rbx
000000000000df14         ret
                        ; endp
000000000000df15         align      8

                     loc_df18:
000000000000df18         mov        rcx, qword [rdi+0x98]                       ; CODE XREF=check_node_accept+51
000000000000df1f         xor        eax, eax
000000000000df21         test       byte [rcx+0xd8], 0x40
000000000000df28         jne        loc_de70

000000000000df2e         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_halt_state_context.isra.20:
000000000000df30         push       r12                                         ; End of unwind block (FDE at 0x1f174), Begin of unwind block (FDE at 0x1f19c), CODE XREF=re_search_internal+2247, re_search_internal+2620, re_search_internal+3076, re_search_internal+4556, re_search_internal+5591
000000000000df32         mov        r12, rdx
000000000000df35         push       rbp
000000000000df36         push       rbx
000000000000df37         mov        edx, dword [rdi+0xa0]
000000000000df3d         mov        rbx, rsi
000000000000df40         mov        rsi, rcx
000000000000df43         mov        rbp, rdi
000000000000df46         call       re_string_context_at                        ; re_string_context_at
000000000000df4b         test       rbx, rbx
000000000000df4e         jle        loc_dff8

000000000000df54         mov        rdx, qword [rbp+0x98]
000000000000df5b         mov        r11d, eax
000000000000df5e         mov        ebp, eax
000000000000df60         and        eax, 0x1
000000000000df63         mov        r9, qword [r12]
000000000000df67         xor        esi, esi
000000000000df69         and        ebp, 0x8
000000000000df6c         and        r11d, 0x2
000000000000df70         mov        r10d, eax
000000000000df73         mov        r8, qword [rdx]
000000000000df76         jmp        loc_df89
000000000000df78         align      128

                     loc_df80:
000000000000df80         add        rsi, 0x1                                    ; CODE XREF=check_halt_state_context.isra.20+120, check_halt_state_context.isra.20+135, check_halt_state_context.isra.20+140, check_halt_state_context.isra.20+151, check_halt_state_context.isra.20+163, check_halt_state_context.isra.20+184
000000000000df84         cmp        rsi, rbx
000000000000df87         je         loc_dff8

                     loc_df89:
000000000000df89         mov        rax, qword [r9+rsi*8]                       ; CODE XREF=check_halt_state_context.isra.20+70
000000000000df8d         mov        rdx, rax
000000000000df90         shl        rdx, 0x4
000000000000df94         add        rdx, r8
000000000000df97         mov        ecx, dword [rdx+8]
000000000000df9a         shr        ecx, 0x8
000000000000df9d         mov        edi, ecx
000000000000df9f         and        di, 0x3ff
000000000000dfa4         cmp        byte [rdx+8], 0x2
000000000000dfa8         jne        loc_df80

000000000000dfaa         test       di, di
000000000000dfad         je         loc_dfd5

000000000000dfaf         test       cl, 0x4
000000000000dfb2         je         loc_dfe0

000000000000dfb4         test       r10d, r10d
000000000000dfb7         je         loc_df80

000000000000dfb9         and        ecx, 0x8
000000000000dfbc         jne        loc_df80

                     loc_dfbe:
000000000000dfbe         test       dil, 0x20                                   ; CODE XREF=check_halt_state_context.isra.20+179
000000000000dfc2         je         loc_dfc9

                     loc_dfc4:
000000000000dfc4         test       r11d, r11d                                  ; CODE XREF=check_halt_state_context.isra.20+192
000000000000dfc7         je         loc_df80

                     loc_dfc9:
000000000000dfc9         and        edi, 0x80                                   ; CODE XREF=check_halt_state_context.isra.20+146, check_halt_state_context.isra.20+190
000000000000dfcf         je         loc_dfd5

000000000000dfd1         test       ebp, ebp
000000000000dfd3         je         loc_df80

                     loc_dfd5:
000000000000dfd5         pop        rbx                                         ; CODE XREF=check_halt_state_context.isra.20+125, check_halt_state_context.isra.20+159
000000000000dfd6         pop        rbp
000000000000dfd7         pop        r12
000000000000dfd9         ret
                        ; endp
000000000000dfda         align      32

                     loc_dfe0:
000000000000dfe0         and        ecx, 0x8                                    ; CODE XREF=check_halt_state_context.isra.20+130
000000000000dfe3         je         loc_dfbe

000000000000dfe5         test       r10d, r10d
000000000000dfe8         jne        loc_df80

000000000000dfea         test       dil, 0x20
000000000000dfee         je         loc_dfc9

000000000000dff0         jmp        loc_dfc4
000000000000dff2         align      8

                     loc_dff8:
000000000000dff8         pop        rbx                                         ; CODE XREF=check_halt_state_context.isra.20+30, check_halt_state_context.isra.20+87
000000000000dff9         xor        eax, eax
000000000000dffb         pop        rbp
000000000000dffc         pop        r12
000000000000dffe         ret
                        ; endp
000000000000dfff         align      8192                                        ; End of unwind block (FDE at 0x1f19c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_46: int8_t, -70
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_78: int64_t, -120


                     re_string_reconstruct:
000000000000e000         push       r15                                         ; Begin of unwind block (FDE at 0x1f1d4), CODE XREF=re_search_internal+1510, re_search_internal+4443
000000000000e002         push       r14
000000000000e004         mov        r15, rsi
000000000000e007         push       r13
000000000000e009         push       r12
000000000000e00b         mov        r10d, edx
000000000000e00e         push       rbp
000000000000e00f         push       rbx
000000000000e010         mov        rbp, rsi
000000000000e013         mov        rbx, rdi
000000000000e016         sub        rsp, 0x48
000000000000e01a         mov        rax, qword [fs:0x28]
000000000000e023         mov        qword [rsp+0x78+var_40], rax
000000000000e028         xor        eax, eax
000000000000e02a         mov        rax, qword [rdi+0x28]
000000000000e02e         sub        rbp, rax
000000000000e031         cmp        rax, rsi
000000000000e034         jle        loc_e096

000000000000e036         cmp        dword [rdi+0x90], 0x1
000000000000e03d         jg         loc_e170

                     loc_e043:
000000000000e043         mov        rax, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+376
000000000000e047         mov        qword [rbx+0x30], 0x0
000000000000e04f         mov        rbp, r15
000000000000e052         mov        qword [rbx+0x28], 0x0
000000000000e05a         mov        qword [rbx+0x38], 0x0
000000000000e062         mov        byte [rbx+0x8c], 0x0
000000000000e069         mov        qword [rbx+0x58], rax
000000000000e06d         mov        rax, qword [rbx+0x60]
000000000000e071         mov        qword [rbx+0x68], rax
000000000000e075         mov        eax, r10d
000000000000e078         and        eax, 0x1
000000000000e07b         cmp        eax, 0x1
000000000000e07e         sbb        eax, eax
000000000000e080         and        eax, 0x2
000000000000e083         add        eax, 0x4
000000000000e086         cmp        byte [rbx+0x8b], 0x0
000000000000e08d         mov        dword [rbx+0x70], eax
000000000000e090         je         loc_e160

                     loc_e096:
000000000000e096         test       rbp, rbp                                    ; CODE XREF=re_string_reconstruct+52, re_string_reconstruct+359
000000000000e099         je         loc_e0fe

000000000000e09b         mov        rax, qword [rbx+0x38]
000000000000e09f         movzx      edx, byte [rbx+0x8c]
000000000000e0a6         mov        r8, qword [rbx+0x30]
000000000000e0aa         cmp        rax, rbp
000000000000e0ad         jle        loc_e1d0

000000000000e0b3         test       dl, dl
000000000000e0b5         jne        loc_e2c8

000000000000e0bb         lea        rsi, qword [rbp-1]
000000000000e0bf         mov        edx, r10d
000000000000e0c2         mov        rdi, rbx
000000000000e0c5         mov        qword [rsp+0x78+var_78], r8
000000000000e0c9         call       re_string_context_at                        ; re_string_context_at
000000000000e0ce         mov        r8, qword [rsp+0x78+var_78]
000000000000e0d2         mov        dword [rbx+0x70], eax
000000000000e0d5         sub        r8, rbp
000000000000e0d8         cmp        dword [rbx+0x90], 0x1
000000000000e0df         jg         loc_e180

                     loc_e0e5:
000000000000e0e5         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_reconstruct+412
000000000000e0ec         jne        loc_e490

000000000000e0f2         sub        qword [rbx+0x38], rbp
000000000000e0f6         mov        qword [rbx+0x30], r8

                     loc_e0fa:
000000000000e0fa         add        qword [rbx+8], rbp                          ; CODE XREF=re_string_reconstruct+1150, re_string_reconstruct+1780

                     loc_e0fe:
000000000000e0fe         mov        rax, qword [rbx+0x58]                       ; CODE XREF=re_string_reconstruct+153, re_string_reconstruct+1156
000000000000e102         sub        qword [rbx+0x68], rbp
000000000000e106         mov        qword [rbx+0x28], r15
000000000000e10a         sub        rax, rbp
000000000000e10d         cmp        dword [rbx+0x90], 0x1
000000000000e114         mov        qword [rbx+0x58], rax
000000000000e118         jle        loc_e1b8

000000000000e11e         cmp        byte [rbx+0x88], 0x0
000000000000e125         mov        rdi, rbx
000000000000e128         je         loc_e1a8

000000000000e12a         call       build_wcs_upper_buffer                      ; build_wcs_upper_buffer
000000000000e12f         test       eax, eax
000000000000e131         jne        loc_e13d

                     loc_e133:
000000000000e133         mov        qword [rbx+0x48], 0x0                       ; CODE XREF=re_string_reconstruct+429, re_string_reconstruct+457, re_string_reconstruct+1412, re_string_reconstruct+1488, re_string_reconstruct+1656
000000000000e13b         xor        eax, eax

                     loc_e13d:
000000000000e13d         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=re_string_reconstruct+305
000000000000e142         xor        rcx, qword [fs:0x28]
000000000000e14b         jne        loc_e79a

000000000000e151         add        rsp, 0x48
000000000000e155         pop        rbx
000000000000e156         pop        rbp
000000000000e157         pop        r12
000000000000e159         pop        r13
000000000000e15b         pop        r14
000000000000e15d         pop        r15
000000000000e15f         ret
                        ; endp

                     loc_e160:
000000000000e160         mov        rax, qword [rbx]                            ; CODE XREF=re_string_reconstruct+144
000000000000e163         mov        qword [rbx+8], rax
000000000000e167         jmp        loc_e096
000000000000e16c         align      16

                     loc_e170:
000000000000e170         mov        qword [rdi+0x20], 0x0                       ; CODE XREF=re_string_reconstruct+61
000000000000e178         jmp        loc_e043
000000000000e17d         align      128

                     loc_e180:
000000000000e180         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memmove, CODE XREF=re_string_reconstruct+223
000000000000e184         lea        rdx, qword [r8*4]                           ; argument "__n" for method j_memmove
000000000000e18c         lea        rsi, qword [rdi+rbp*4]                      ; argument "__src" for method j_memmove
000000000000e190         call       j_memmove                                   ; memmove
000000000000e195         mov        r8, qword [rbx+0x30]
000000000000e199         sub        r8, rbp
000000000000e19c         jmp        loc_e0e5
000000000000e1a1         align      8

                     loc_e1a8:
000000000000e1a8         call       build_wcs_buffer                            ; build_wcs_buffer, CODE XREF=re_string_reconstruct+296
000000000000e1ad         jmp        loc_e133
000000000000e1b2         align      8

                     loc_e1b8:
000000000000e1b8         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=re_string_reconstruct+280
000000000000e1bf         jne        loc_e570

000000000000e1c5         mov        qword [rbx+0x30], rax
000000000000e1c9         jmp        loc_e133
000000000000e1ce         align      16

                     loc_e1d0:
000000000000e1d0         test       dl, dl                                      ; CODE XREF=re_string_reconstruct+173
000000000000e1d2         jne        loc_e67d

                     loc_e1d8:
000000000000e1d8         movsxd     rdx, dword [rbx+0x90]                       ; CODE XREF=re_string_reconstruct+1696
000000000000e1df         mov        qword [rbx+0x30], 0x0
000000000000e1e7         mov        r11, qword [rbx+0x28]
000000000000e1eb         cmp        edx, 0x1
000000000000e1ee         jle        loc_e5d8

000000000000e1f4         cmp        byte [rbx+0x89], 0x0
000000000000e1fb         jne        loc_e4b8

                     loc_e201:
000000000000e201         lea        r14, qword [r11+rax]                        ; CODE XREF=re_string_reconstruct+1244, re_string_reconstruct+1263, re_string_reconstruct+1380
000000000000e205         cmp        r15, r14
000000000000e208         jle        loc_e64f

000000000000e20e         lea        rax, qword [rbx+0x20]
000000000000e212         lea        r13, qword [rsp+0x78+var_54]
000000000000e217         mov        qword [rsp+0x78+var_68], rax
000000000000e21c         nop        dword [rax]

                     loc_e220:
000000000000e220         mov        r12, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+624
000000000000e224         mov        rsi, qword [rbx]
000000000000e227         mov        rdi, r13
000000000000e22a         mov        rax, qword [rbx+0x20]
000000000000e22e         mov        rcx, qword [rsp+0x78+var_68]
000000000000e233         mov        dword [rsp+0x78+var_6C], r10d
000000000000e238         mov        qword [rsp+0x78+var_78], r8
000000000000e23c         sub        r12, r14
000000000000e23f         add        rsi, r14
000000000000e242         mov        rdx, r12
000000000000e245         mov        qword [rsp+0x78+var_60], rax
000000000000e24a         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000e24f         lea        rcx, qword [rax-1]
000000000000e253         mov        edx, dword [rsp+0x78+var_54]
000000000000e257         mov        r8, qword [rsp+0x78+var_78]
000000000000e25b         mov        r10d, dword [rsp+0x78+var_6C]
000000000000e260         cmp        rcx, 0xfffffffffffffffc
000000000000e264         ja         loc_e6a5

                     loc_e26a:
000000000000e26a         add        r14, rax                                    ; CODE XREF=re_string_reconstruct+1733
000000000000e26d         cmp        r15, r14
000000000000e270         jg         loc_e220

000000000000e272         sub        r14, r15
000000000000e275         cmp        edx, 0xffffffff
000000000000e278         mov        r12, r14
000000000000e27b         mov        qword [rbx+0x30], r14
000000000000e27f         je         loc_e659

                     loc_e285:
000000000000e285         cmp        byte [rbx+0x8e], 0x0                        ; CODE XREF=re_string_reconstruct+1850
000000000000e28c         jne        loc_e6f9

                     loc_e292:
000000000000e292         xor        eax, eax                                    ; CODE XREF=re_string_reconstruct+1805
000000000000e294         cmp        edx, 0xa
000000000000e297         jne        loc_e2a7

000000000000e299         xor        eax, eax
000000000000e29b         cmp        byte [rbx+0x8d], 0x0
000000000000e2a2         setne      al
000000000000e2a5         add        eax, eax

                     loc_e2a7:
000000000000e2a7         mov        dword [rbx+0x70], eax                       ; CODE XREF=re_string_reconstruct+663, re_string_reconstruct+1816

                     loc_e2aa:
000000000000e2aa         cmp        r12, 0x0                                    ; CODE XREF=re_string_reconstruct+1643
000000000000e2ae         jne        loc_e6ca

                     loc_e2b4:
000000000000e2b4         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+1885
000000000000e2bb         mov        qword [rbx+0x38], r12
000000000000e2bf         jmp        loc_e47c
000000000000e2c4         align      8

                     loc_e2c8:
000000000000e2c8         mov        r14, qword [rbx+0x18]                       ; CODE XREF=re_string_reconstruct+181
000000000000e2cc         mov        rcx, r8
000000000000e2cf         xor        esi, esi
000000000000e2d1         jmp        loc_e2e3
000000000000e2d3         align      8

                     loc_e2d8:
000000000000e2d8         jge        loc_e313                                    ; CODE XREF=re_string_reconstruct+766

000000000000e2da         lea        rsi, qword [rax+1]

                     loc_e2de:
000000000000e2de         cmp        rsi, rcx                                    ; CODE XREF=re_string_reconstruct+771
000000000000e2e1         jge        loc_e308

                     loc_e2e3:
000000000000e2e3         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=re_string_reconstruct+721
000000000000e2e7         mov        rax, rdx
000000000000e2ea         shr        rax, 0x3f
000000000000e2ee         add        rax, rdx
000000000000e2f1         sar        rax, 0x1
000000000000e2f4         mov        rdx, qword [r14+rax*8]
000000000000e2f8         mov        r12, rax
000000000000e2fb         cmp        rdx, rbp
000000000000e2fe         jle        loc_e2d8

000000000000e300         mov        rcx, rax
000000000000e303         jmp        loc_e2de
000000000000e305         align      8

                     loc_e308:
000000000000e308         lea        r12, qword [rax+1]                          ; CODE XREF=re_string_reconstruct+737
000000000000e30c         cmp        rdx, rbp
000000000000e30f         cmovge     r12, rax

                     loc_e313:
000000000000e313         lea        r13, qword [r12-1]                          ; CODE XREF=loc_e2d8
000000000000e318         mov        edx, r10d
000000000000e31b         mov        rdi, rbx
000000000000e31e         mov        qword [rsp+0x78+var_78], r8
000000000000e322         mov        rsi, r13
000000000000e325         call       re_string_context_at                        ; re_string_context_at
000000000000e32a         cmp        rbp, r12
000000000000e32d         mov        dword [rbx+0x70], eax
000000000000e330         mov        r8, qword [rsp+0x78+var_78]
000000000000e334         jne        loc_e3b8

000000000000e33a         cmp        rbp, r8
000000000000e33d         jge        loc_e3b8

000000000000e33f         cmp        qword [r14+r12*8], rbp
000000000000e343         jne        loc_e3b8

000000000000e345         mov        rdi, qword [rbx+0x10]                       ; argument "__dest" for method j_memmove
000000000000e349         sub        r8, rbp
000000000000e34c         lea        rdx, qword [r8*4]                           ; argument "__n" for method j_memmove
000000000000e354         lea        rsi, qword [rdi+rbp*4]                      ; argument "__src" for method j_memmove
000000000000e358         call       j_memmove                                   ; memmove
000000000000e35d         mov        rdi, qword [rbx+8]                          ; argument "__dest" for method j_memmove
000000000000e361         mov        rdx, qword [rbx+0x30]
000000000000e365         lea        rsi, qword [rdi+rbp]                        ; argument "__src" for method j_memmove
000000000000e369         sub        rdx, rbp                                    ; argument "__n" for method j_memmove
000000000000e36c         call       j_memmove                                   ; memmove
000000000000e371         mov        rax, qword [rbx+0x30]
000000000000e375         sub        qword [rbx+0x38], rbp
000000000000e379         sub        rax, rbp
000000000000e37c         test       rax, rax
000000000000e37f         mov        qword [rbx+0x30], rax
000000000000e383         jle        loc_e3a8

000000000000e385         mov        rcx, qword [rbx+0x18]
000000000000e389         xor        eax, eax
000000000000e38b         lea        rsi, qword [rcx+rbp*8]
000000000000e38f         nop

                     loc_e390:
000000000000e390         mov        rdx, qword [rsi+rax*8]                      ; CODE XREF=re_string_reconstruct+931
000000000000e394         sub        rdx, rbp
000000000000e397         mov        qword [rcx+rax*8], rdx
000000000000e39b         add        rax, 0x1
000000000000e39f         cmp        qword [rbx+0x30], rax
000000000000e3a3         jg         loc_e390

000000000000e3a5         nop        dword [rax]

                     loc_e3a8:
000000000000e3a8         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+899, re_string_reconstruct+1587
000000000000e3af         jmp        loc_e47c
000000000000e3b4         align      8

                     loc_e3b8:
000000000000e3b8         mov        rax, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+820, re_string_reconstruct+829, re_string_reconstruct+835
000000000000e3bc         mov        byte [rbx+0x8c], 0x0
000000000000e3c3         add        rax, rbp
000000000000e3c6         sub        rax, r15
000000000000e3c9         mov        qword [rbx+0x58], rax
000000000000e3cd         mov        rax, qword [rbx+0x60]
000000000000e3d1         add        rax, rbp
000000000000e3d4         sub        rax, r15
000000000000e3d7         test       r12, r12
000000000000e3da         mov        qword [rbx+0x68], rax
000000000000e3de         jle        loc_e403

000000000000e3e0         cmp        qword [r14+r12*8-8], rbp
000000000000e3e5         je         loc_e3fb

000000000000e3e7         jmp        loc_e403
000000000000e3e9         align      16

                     loc_e3f0:
000000000000e3f0         cmp        qword [r14+r13*8-8], rbp                    ; CODE XREF=re_string_reconstruct+1025
000000000000e3f5         jne        loc_e403

000000000000e3f7         sub        r13, 0x1

                     loc_e3fb:
000000000000e3fb         test       r13, r13                                    ; CODE XREF=re_string_reconstruct+997
000000000000e3fe         mov        r12, r13
000000000000e401         jne        loc_e3f0

                     loc_e403:
000000000000e403         cmp        r12, r8                                     ; CODE XREF=re_string_reconstruct+990, re_string_reconstruct+999, re_string_reconstruct+1013
000000000000e406         jge        loc_e638

000000000000e40c         mov        rax, qword [rbx+0x10]
000000000000e410         jmp        loc_e425
000000000000e412         align      8

                     loc_e418:
000000000000e418         add        r12, 0x1                                    ; CODE XREF=re_string_reconstruct+1066
000000000000e41c         cmp        r12, r8
000000000000e41f         je         loc_e640

                     loc_e425:
000000000000e425         cmp        dword [rax+r12*4], 0xffffffff               ; CODE XREF=re_string_reconstruct+1040
000000000000e42a         je         loc_e418

                     loc_e42c:
000000000000e42c         mov        rdx, qword [r14+r12*8]                      ; CODE XREF=loc_e638
000000000000e430         sub        rdx, rbp
000000000000e433         cmp        rdx, 0x0
000000000000e437         mov        qword [rbx+0x30], rdx
000000000000e43b         je         loc_e471

000000000000e43d         jle        loc_e45f

000000000000e43f         mov        rax, qword [rbx+0x10]
000000000000e443         lea        rcx, qword [rax+rdx*4]
000000000000e447         nop        word [rax+rax]

                     loc_e450:
000000000000e450         mov        dword [rax], 0xffffffff                     ; CODE XREF=re_string_reconstruct+1117
000000000000e456         add        rax, 0x4
000000000000e45a         cmp        rcx, rax
000000000000e45d         jne        loc_e450

                     loc_e45f:
000000000000e45f         mov        rdi, qword [rbx+8]                          ; argument "__s" for method j_memset, CODE XREF=re_string_reconstruct+1085
000000000000e463         mov        esi, 0xff                                   ; argument "__c" for method j_memset
000000000000e468         call       j_memset                                    ; memset
000000000000e46d         mov        rdx, qword [rbx+0x30]

                     loc_e471:
000000000000e471         movzx      eax, byte [rbx+0x8b]                        ; CODE XREF=re_string_reconstruct+1083, re_string_reconstruct+1610
000000000000e478         mov        qword [rbx+0x38], rdx

                     loc_e47c:
000000000000e47c         test       al, al                                      ; CODE XREF=re_string_reconstruct+703, re_string_reconstruct+943, re_string_reconstruct+1199
000000000000e47e         je         loc_e0fa

000000000000e484         jmp        loc_e0fe
000000000000e489         align      16

                     loc_e490:
000000000000e490         mov        rdi, qword [rbx+8]                          ; argument "__dest" for method j_memmove, CODE XREF=re_string_reconstruct+236
000000000000e494         mov        rdx, r8                                     ; argument "__n" for method j_memmove
000000000000e497         lea        rsi, qword [rdi+rbp]                        ; argument "__src" for method j_memmove
000000000000e49b         call       j_memmove                                   ; memmove
000000000000e4a0         movzx      eax, byte [rbx+0x8b]
000000000000e4a7         sub        qword [rbx+0x30], rbp
000000000000e4ab         sub        qword [rbx+0x38], rbp
000000000000e4af         jmp        loc_e47c
000000000000e4b1         align      8

                     loc_e4b8:
000000000000e4b8         mov        rcx, qword [rbx]                            ; CODE XREF=re_string_reconstruct+507
000000000000e4bb         mov        rdi, rbp
000000000000e4be         sub        rdi, rdx
000000000000e4c1         mov        rdx, rdi
000000000000e4c4         lea        r12, qword [rcx+r11]
000000000000e4c8         add        rdx, r12
000000000000e4cb         lea        rsi, qword [r12+rbp-1]
000000000000e4d0         cmp        rcx, rdx
000000000000e4d3         cmovb      rcx, rdx
000000000000e4d7         cmp        rcx, rsi
000000000000e4da         jbe        loc_e4f5

000000000000e4dc         jmp        loc_e201
000000000000e4e1         align      8

                     loc_e4e8:
000000000000e4e8         sub        rsi, 0x1                                    ; CODE XREF=re_string_reconstruct+1278
000000000000e4ec         cmp        rcx, rsi
000000000000e4ef         ja         loc_e201

                     loc_e4f5:
000000000000e4f5         movzx      edx, byte [rsi]                             ; CODE XREF=re_string_reconstruct+1242
000000000000e4f8         and        edx, 0xffffffc0
000000000000e4fb         cmp        dl, 0x80
000000000000e4fe         je         loc_e4e8

000000000000e500         mov        rdx, qword [rbx+0x58]
000000000000e504         mov        rcx, qword [rbx+0x78]
000000000000e508         mov        r14, rsi
000000000000e50b         add        rdx, r12
000000000000e50e         sub        rdx, rsi
000000000000e511         test       rcx, rcx
000000000000e514         jne        loc_e762

                     loc_e51a:
000000000000e51a         lea        r13, qword [rsp+0x78+var_54]                ; CODE XREF=re_string_reconstruct+1941
000000000000e51f         add        r12, rbp
000000000000e522         lea        rcx, qword [rsp+0x78+var_50]
000000000000e527         sub        r12, r14
000000000000e52a         mov        dword [rsp+0x78+var_6C], r10d
000000000000e52f         mov        qword [rsp+0x78+var_78], r8
000000000000e533         mov        rdi, r13
000000000000e536         mov        qword [rsp+0x78+var_50], 0x0
000000000000e53f         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000e544         cmp        r12, rax
000000000000e547         mov        r8, qword [rsp+0x78+var_78]
000000000000e54b         mov        r10d, dword [rsp+0x78+var_6C]
000000000000e550         ja         loc_e55c

000000000000e552         cmp        rax, 0xfffffffffffffffd
000000000000e556         jbe        loc_e721

                     loc_e55c:
000000000000e55c         mov        r11, qword [rbx+0x28]                       ; CODE XREF=re_string_reconstruct+1360, re_string_reconstruct+1856
000000000000e560         mov        rax, qword [rbx+0x38]
000000000000e564         jmp        loc_e201
000000000000e569         align      16

                     loc_e570:
000000000000e570         cmp        byte [rbx+0x88], 0x0                        ; CODE XREF=re_string_reconstruct+447
000000000000e577         jne        loc_e670

000000000000e57d         mov        rcx, qword [rbx+0x78]
000000000000e581         test       rcx, rcx
000000000000e584         je         loc_e133

000000000000e58a         cmp        qword [rbx+0x40], rax
000000000000e58e         mov        rdx, qword [rbx+0x30]
000000000000e592         cmovle     rax, qword [rbx+0x40]
000000000000e597         cmp        rax, rdx
000000000000e59a         jg         loc_e5a8

000000000000e59c         jmp        loc_e5c8
000000000000e59e         align      32

                     loc_e5a0:
000000000000e5a0         mov        r15, qword [rbx+0x28]                       ; CODE XREF=re_string_reconstruct+1478
000000000000e5a4         mov        rcx, qword [rbx+0x78]

                     loc_e5a8:
000000000000e5a8         mov        rsi, qword [rbx]                            ; CODE XREF=re_string_reconstruct+1434
000000000000e5ab         add        rsi, rdx
000000000000e5ae         movzx      esi, byte [rsi+r15]
000000000000e5b3         movzx      esi, byte [rcx+rsi]
000000000000e5b7         mov        rcx, qword [rbx+8]
000000000000e5bb         mov        byte [rcx+rdx], sil
000000000000e5bf         add        rdx, 0x1
000000000000e5c3         cmp        rax, rdx
000000000000e5c6         jne        loc_e5a0

                     loc_e5c8:
000000000000e5c8         mov        qword [rbx+0x30], rdx                       ; CODE XREF=re_string_reconstruct+1436
000000000000e5cc         mov        qword [rbx+0x38], rdx
000000000000e5d0         jmp        loc_e133
000000000000e5d5         align      8

                     loc_e5d8:
000000000000e5d8         mov        rax, qword [rbx]                            ; CODE XREF=re_string_reconstruct+494
000000000000e5db         mov        rdx, qword [rbx+0x78]
000000000000e5df         add        rax, rbp
000000000000e5e2         test       rdx, rdx
000000000000e5e5         movzx      eax, byte [r11+rax-1]
000000000000e5eb         mov        qword [rbx+0x38], 0x0
000000000000e5f3         je         loc_e5f9

000000000000e5f5         movzx      eax, byte [rdx+rax]

                     loc_e5f9:
000000000000e5f9         mov        rcx, qword [rbx+0x80]                       ; CODE XREF=re_string_reconstruct+1523
000000000000e600         movzx      edx, al
000000000000e603         sar        rdx, 0x6
000000000000e607         mov        rcx, qword [rcx+rdx*8]
000000000000e60b         mov        edx, 0x1
000000000000e610         bt         rcx, rax
000000000000e614         jb         loc_e630

000000000000e616         xor        edx, edx
000000000000e618         cmp        al, 0xa
000000000000e61a         jne        loc_e630

000000000000e61c         xor        edx, edx
000000000000e61e         cmp        byte [rbx+0x8d], 0x0
000000000000e625         setne      dl
000000000000e628         add        edx, edx
000000000000e62a         nop        word [rax+rax]

                     loc_e630:
000000000000e630         mov        dword [rbx+0x70], edx                       ; CODE XREF=re_string_reconstruct+1556, re_string_reconstruct+1562
000000000000e633         jmp        loc_e3a8

                     loc_e638:
000000000000e638         jne        loc_e42c                                    ; CODE XREF=re_string_reconstruct+1030

000000000000e63e         nop

                     loc_e640:
000000000000e640         mov        qword [rbx+0x30], 0x0                       ; CODE XREF=re_string_reconstruct+1055
000000000000e648         xor        edx, edx
000000000000e64a         jmp        loc_e471

                     loc_e64f:
000000000000e64f         sub        r14, r15                                    ; CODE XREF=re_string_reconstruct+520
000000000000e652         mov        r12, r14
000000000000e655         mov        qword [rbx+0x30], r14

                     loc_e659:
000000000000e659         lea        rsi, qword [r8-1]                           ; CODE XREF=re_string_reconstruct+639
000000000000e65d         mov        edx, r10d
000000000000e660         mov        rdi, rbx
000000000000e663         call       re_string_context_at                        ; re_string_context_at
000000000000e668         mov        dword [rbx+0x70], eax
000000000000e66b         jmp        loc_e2aa

                     loc_e670:
000000000000e670         mov        rdi, rbx                                    ; CODE XREF=re_string_reconstruct+1399
000000000000e673         call       build_upper_buffer                          ; build_upper_buffer
000000000000e678         jmp        loc_e133

                     loc_e67d:
000000000000e67d         mov        rdx, qword [rbx+0x50]                       ; CODE XREF=re_string_reconstruct+466
000000000000e681         mov        byte [rbx+0x8c], 0x0
000000000000e688         add        rdx, rbp
000000000000e68b         sub        rdx, r15
000000000000e68e         mov        qword [rbx+0x58], rdx
000000000000e692         mov        rdx, qword [rbx+0x60]
000000000000e696         add        rdx, rbp
000000000000e699         sub        rdx, r15
000000000000e69c         mov        qword [rbx+0x68], rdx
000000000000e6a0         jmp        loc_e1d8

                     loc_e6a5:
000000000000e6a5         test       rax, rax                                    ; CODE XREF=re_string_reconstruct+612
000000000000e6a8         je         loc_e71d

000000000000e6aa         test       r12, r12
000000000000e6ad         je         loc_e71d

000000000000e6af         mov        rax, qword [rbx]
000000000000e6b2         movzx      edx, byte [rax+r14]

                     loc_e6b7:
000000000000e6b7         mov        rax, qword [rsp+0x78+var_60]                ; CODE XREF=re_string_reconstruct+1823
000000000000e6bc         mov        qword [rbx+0x20], rax
000000000000e6c0         mov        eax, 0x1
000000000000e6c5         jmp        loc_e26a

                     loc_e6ca:
000000000000e6ca         jle        loc_e6e7                                    ; CODE XREF=re_string_reconstruct+686

000000000000e6cc         mov        rax, qword [rbx+0x10]
000000000000e6d0         lea        rdx, qword [rax+r12*4]
000000000000e6d4         nop        dword [rax]

                     loc_e6d8:
000000000000e6d8         mov        dword [rax], 0xffffffff                     ; CODE XREF=re_string_reconstruct+1765
000000000000e6de         add        rax, 0x4
000000000000e6e2         cmp        rdx, rax
000000000000e6e5         jne        loc_e6d8

                     loc_e6e7:
000000000000e6e7         cmp        byte [rbx+0x8b], 0x0                        ; CODE XREF=loc_e6ca
000000000000e6ee         jne        loc_e748

000000000000e6f0         mov        qword [rbx+0x38], r12
000000000000e6f4         jmp        loc_e0fa

                     loc_e6f9:
000000000000e6f9         mov        edi, edx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=re_string_reconstruct+652
000000000000e6fb         mov        dword [rsp+0x78+var_78], edx
000000000000e6fe         call       j_iswalnum                                  ; iswalnum
000000000000e703         test       eax, eax
000000000000e705         jne        loc_e713

000000000000e707         mov        edx, dword [rsp+0x78+var_78]
000000000000e70a         cmp        edx, 0x5f
000000000000e70d         jne        loc_e292

                     loc_e713:
000000000000e713         mov        eax, 0x1                                    ; CODE XREF=re_string_reconstruct+1797
000000000000e718         jmp        loc_e2a7

                     loc_e71d:
000000000000e71d         xor        edx, edx                                    ; CODE XREF=re_string_reconstruct+1704, re_string_reconstruct+1709
000000000000e71f         jmp        loc_e6b7

                     loc_e721:
000000000000e721         mov        edx, dword [rsp+0x78+var_54]                ; CODE XREF=re_string_reconstruct+1366
000000000000e725         sub        rax, r12
000000000000e728         mov        qword [rbx+0x20], 0x0
000000000000e730         mov        r12, rax
000000000000e733         mov        qword [rbx+0x30], rax
000000000000e737         cmp        edx, 0xffffffff
000000000000e73a         jne        loc_e285

000000000000e740         jmp        loc_e55c
000000000000e745         align      8

                     loc_e748:
000000000000e748         mov        rdi, qword [rbx+8]                          ; argument "__s" for method j_memset, CODE XREF=re_string_reconstruct+1774
000000000000e74c         mov        rdx, r12                                    ; argument "__n" for method j_memset
000000000000e74f         mov        esi, 0xff                                   ; argument "__c" for method j_memset
000000000000e754         call       j_memset                                    ; memset
000000000000e759         mov        r12, qword [rbx+0x30]
000000000000e75d         jmp        loc_e2b4

                     loc_e762:
000000000000e762         cmp        rdx, 0x6                                    ; CODE XREF=re_string_reconstruct+1300
000000000000e766         mov        edi, 0x6
000000000000e76b         lea        r11, qword [rsp+0x78+var_46]
000000000000e770         cmovle     rdi, rdx
000000000000e774         sub        edi, 0x1
000000000000e777         test       edi, edi
000000000000e779         movsxd     rax, edi
000000000000e77c         js         loc_e792

                     loc_e77e:
000000000000e77e         movzx      edi, byte [rsi+rax]                         ; CODE XREF=re_string_reconstruct+1936
000000000000e782         movzx      edi, byte [rcx+rdi]
000000000000e786         mov        byte [r11+rax], dil
000000000000e78a         sub        rax, 0x1
000000000000e78e         test       eax, eax
000000000000e790         jns        loc_e77e

                     loc_e792:
000000000000e792         mov        rsi, r11                                    ; CODE XREF=re_string_reconstruct+1916
000000000000e795         jmp        loc_e51a

                     loc_e79a:
000000000000e79a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_string_reconstruct+331
                        ; endp
000000000000e79f         align      32                                          ; End of unwind block (FDE at 0x1f1d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     sub_epsilon_src_nodes:
000000000000e7a0         push       r15                                         ; Begin of unwind block (FDE at 0x1f224), CODE XREF=update_cur_sifted_state+1100, update_cur_sifted_state+1290, update_cur_sifted_state+1448
000000000000e7a2         push       r14
000000000000e7a4         mov        r14, rdx
000000000000e7a7         push       r13
000000000000e7a9         push       r12
000000000000e7ab         lea        rdx, qword [rsi+rsi*2]
000000000000e7af         push       rbp
000000000000e7b0         push       rbx
000000000000e7b1         pxor       xmm0, xmm0
000000000000e7b5         sub        rsp, 0x48
000000000000e7b9         mov        rax, qword [fs:0x28]
000000000000e7c2         mov        qword [rsp+0x78+var_40], rax
000000000000e7c7         xor        eax, eax
000000000000e7c9         mov        rax, qword [rdi+0x38]
000000000000e7cd         mov        qword [rsp+0x78+var_48], 0x0
000000000000e7d6         movaps     xmmword [rsp+0x78+var_58], xmm0
000000000000e7db         mov        qword [rsp+0x78+var_68], rcx
000000000000e7e0         lea        rbp, qword [rax+rdx*8]
000000000000e7e4         mov        r10, qword [rbp+8]
000000000000e7e8         test       r10, r10
000000000000e7eb         jle        loc_e9d2

000000000000e7f1         lea        rax, qword [rsp+0x78+var_58]
000000000000e7f6         mov        r12, rdi
000000000000e7f9         mov        r13, rsi
000000000000e7fc         xor        ebx, ebx
000000000000e7fe         mov        qword [rsp+0x78+var_60], rax
000000000000e803         jmp        loc_e85d
000000000000e805         align      8

                     loc_e808:
000000000000e808         test       rax, rax                                    ; CODE XREF=sub_epsilon_src_nodes+283
000000000000e80b         jne        loc_e8e8

000000000000e811         mov        rdi, qword [r14+8]
000000000000e815         lea        rsi, qword [r14+0x10]
000000000000e819         mov        rdx, r8
000000000000e81c         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000e821         test       rax, rax
000000000000e824         je         loc_e8e8

                     loc_e82a:
000000000000e82a         mov        rdx, qword [r12+0x38]                       ; CODE XREF=sub_epsilon_src_nodes+313, sub_epsilon_src_nodes+386
000000000000e82f         mov        rsi, qword [rsp+0x78+var_68]
000000000000e834         mov        rdi, qword [rsp+0x78+var_60]
000000000000e839         add        rdx, r9
000000000000e83c         call       re_node_set_add_intersect                   ; re_node_set_add_intersect
000000000000e841         test       eax, eax
000000000000e843         jne        loc_e9c0

000000000000e849         mov        r10, qword [rbp+8]
000000000000e84d         nop        dword [rax]

                     loc_e850:
000000000000e850         add        rbx, 0x1                                    ; CODE XREF=sub_epsilon_src_nodes+200, sub_epsilon_src_nodes+217, sub_epsilon_src_nodes+292, sub_epsilon_src_nodes+319, sub_epsilon_src_nodes+335, sub_epsilon_src_nodes+358, sub_epsilon_src_nodes+380
000000000000e854         cmp        r10, rbx
000000000000e857         jle        loc_e930

                     loc_e85d:
000000000000e85d         mov        rax, qword [rbp+0x10]                       ; CODE XREF=sub_epsilon_src_nodes+99
000000000000e861         mov        rax, qword [rax+rbx*8]
000000000000e865         cmp        r13, rax
000000000000e868         je         loc_e850

000000000000e86a         mov        rdx, rax
000000000000e86d         shl        rdx, 0x4
000000000000e871         add        rdx, qword [r12]
000000000000e875         test       byte [rdx+8], 0x8
000000000000e879         je         loc_e850

000000000000e87b         lea        r9, qword [rax+rax*2]
000000000000e87f         mov        rcx, qword [r12+0x28]
000000000000e884         lea        r11, qword [rbp+0x10]
000000000000e888         mov        rdi, r10
000000000000e88b         shl        r9, 0x3
000000000000e88f         mov        rsi, r11
000000000000e892         add        rcx, r9
000000000000e895         mov        r15, qword [rcx+0x10]
000000000000e899         mov        qword [rsp+0x78+var_70], rcx
000000000000e89e         mov        r8, qword [r15]
000000000000e8a1         mov        rdx, r8
000000000000e8a4         mov        qword [rsp+0x78+var_78], r8
000000000000e8a8         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000e8ad         mov        rcx, qword [rsp+0x78+var_70]
000000000000e8b2         mov        r8, qword [rsp+0x78+var_78]
000000000000e8b6         cmp        qword [rcx+8], 0x1
000000000000e8bb         jg         loc_e808

000000000000e8c1         test       rax, rax
000000000000e8c4         jne        loc_e850

000000000000e8c6         mov        rdi, qword [r14+8]
000000000000e8ca         lea        rsi, qword [r14+0x10]
000000000000e8ce         mov        rdx, r8
000000000000e8d1         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000e8d6         test       rax, rax
000000000000e8d9         jne        loc_e82a

000000000000e8df         jmp        loc_e850
000000000000e8e4         align      8

                     loc_e8e8:
000000000000e8e8         mov        r15, qword [r15+8]                          ; CODE XREF=sub_epsilon_src_nodes+107, sub_epsilon_src_nodes+132
000000000000e8ec         test       r15, r15
000000000000e8ef         jle        loc_e850

000000000000e8f5         mov        rdx, r15
000000000000e8f8         mov        rsi, r11
000000000000e8fb         mov        rdi, r10
000000000000e8fe         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000e903         test       rax, rax
000000000000e906         jne        loc_e850

000000000000e90c         mov        rdi, qword [r14+8]
000000000000e910         lea        rsi, qword [r14+0x10]
000000000000e914         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000e919         test       rax, rax
000000000000e91c         je         loc_e850

000000000000e922         jmp        loc_e82a
000000000000e927         align      16

                     loc_e930:
000000000000e930         xor        r9d, r9d                                    ; CODE XREF=sub_epsilon_src_nodes+183
000000000000e933         test       r10, r10
000000000000e936         lea        r11, qword [rsp+0x78+var_48]
000000000000e93b         jle        loc_e98c

000000000000e93d         nop        dword [rax]

                     loc_e940:
000000000000e940         mov        rax, qword [rbp+0x10]                       ; CODE XREF=sub_epsilon_src_nodes+490
000000000000e944         mov        rdi, qword [rsp+0x78+var_50]
000000000000e949         mov        rsi, r11
000000000000e94c         mov        r10, qword [rax+r9*8]
000000000000e950         mov        rdx, r10
000000000000e953         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000e958         test       rax, rax
000000000000e95b         jne        loc_e982

000000000000e95d         lea        rbx, qword [r14+0x10]
000000000000e961         mov        rdi, qword [r14+8]
000000000000e965         mov        rsi, rbx
000000000000e968         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000000e96d         sub        rax, 0x1
000000000000e971         mov        rdx, rax
000000000000e974         js         loc_e982

000000000000e976         lea        rdi, qword [r14+8]
000000000000e97a         mov        rsi, rbx
000000000000e97d         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_e982:
000000000000e982         add        r9, 0x1                                     ; CODE XREF=sub_epsilon_src_nodes+443, sub_epsilon_src_nodes+468
000000000000e986         cmp        qword [rbp+8], r9
000000000000e98a         jg         loc_e940

                     loc_e98c:
000000000000e98c         mov        rdi, qword [rsp+0x78+var_48]                ; CODE XREF=sub_epsilon_src_nodes+411

                     loc_e991:
000000000000e991         call       j_free                                      ; free, CODE XREF=sub_epsilon_src_nodes+564
000000000000e996         xor        eax, eax

                     loc_e998:
000000000000e998         mov        rsi, qword [rsp+0x78+var_40]                ; CODE XREF=sub_epsilon_src_nodes+560
000000000000e99d         xor        rsi, qword [fs:0x28]
000000000000e9a6         jne        loc_e9d6

000000000000e9a8         add        rsp, 0x48
000000000000e9ac         pop        rbx
000000000000e9ad         pop        rbp
000000000000e9ae         pop        r12
000000000000e9b0         pop        r13
000000000000e9b2         pop        r14
000000000000e9b4         pop        r15
000000000000e9b6         ret
                        ; endp
000000000000e9b7         align      64

                     loc_e9c0:
000000000000e9c0         mov        rdi, qword [rsp+0x78+var_48]                ; argument "__ptr" for method j_free, CODE XREF=sub_epsilon_src_nodes+163
000000000000e9c5         mov        dword [rsp+0x78+var_78], eax
000000000000e9c8         call       j_free                                      ; free
000000000000e9cd         mov        eax, dword [rsp+0x78+var_78]
000000000000e9d0         jmp        loc_e998

                     loc_e9d2:
000000000000e9d2         xor        edi, edi                                    ; CODE XREF=sub_epsilon_src_nodes+75
000000000000e9d4         jmp        loc_e991

                     loc_e9d6:
000000000000e9d6         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_epsilon_src_nodes+518
                        ; endp
000000000000e9db         align      32                                          ; End of unwind block (FDE at 0x1f224)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_58: -88
        ;    var_67: int8_t, -103
        ;    var_68: int8_t, -104
        ;    var_78: -120
        ;    var_88: int8_t, -136
        ;    var_98: -152
        ;    var_A8: int64_t, -168
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_CC: int32_t, -204
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_E9: int8_t, -233
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_128: int64_t, -296
        ;    var_130: int64_t, -304


                     build_trtable:
000000000000e9e0         push       r15                                         ; Begin of unwind block (FDE at 0x1f274), CODE XREF=re_search_internal+4240
000000000000e9e2         push       r14
000000000000e9e4         mov        r15, rdi
000000000000e9e7         push       r13
000000000000e9e9         push       r12
000000000000e9eb         mov        edi, 0x3800                                 ; argument "__size" for method j_malloc
000000000000e9f0         push       rbp
000000000000e9f1         push       rbx
000000000000e9f2         sub        rsp, 0x108
000000000000e9f9         mov        rax, qword [fs:0x28]
000000000000ea02         mov        qword [rsp+0x138+var_40], rax
000000000000ea0a         xor        eax, eax
000000000000ea0c         mov        qword [rsp+0x138+var_130], rsi
000000000000ea11         call       j_malloc                                    ; malloc
000000000000ea16         test       rax, rax
000000000000ea19         mov        qword [rsp+0x138+var_120], rax
000000000000ea1e         je         loc_edf0

000000000000ea24         mov        rax, qword [rsp+0x138+var_120]
000000000000ea29         pxor       xmm0, xmm0
000000000000ea2d         lea        rbx, qword [rax+0x1800]
000000000000ea34         mov        rax, qword [rsp+0x138+var_130]
000000000000ea39         movaps     xmmword [rsp+0x138+var_A8], xmm0
000000000000ea41         mov        qword [rsp+0x138+var_F8], rbx
000000000000ea46         movaps     xmmword [rsp+0x138+var_98], xmm0
000000000000ea4e         cmp        qword [rax+0x10], 0x0
000000000000ea53         mov        qword [rax+0x58], 0x0
000000000000ea5b         mov        qword [rax+0x60], 0x0
000000000000ea63         jle        loc_f4da

000000000000ea69         mov        qword [rsp+0x138+var_108], r15
000000000000ea6e         xor        ebp, ebp
000000000000ea70         mov        qword [rsp+0x138+var_128], 0x0
000000000000ea79         mov        r15, rbx

                     loc_ea7c:
000000000000ea7c         mov        rbx, qword [rsp+0x138+var_128]              ; CODE XREF=build_trtable+275
000000000000ea81         lea        rax, qword [rbx*8]
000000000000ea89         mov        qword [rsp+0x138+var_118], rax
000000000000ea8e         mov        rax, qword [rsp+0x138+var_130]
000000000000ea93         mov        rax, qword [rax+0x18]
000000000000ea97         mov        r13, qword [rax+rbx*8]
000000000000ea9b         mov        rax, qword [rsp+0x138+var_108]
000000000000eaa0         shl        r13, 0x4
000000000000eaa4         add        r13, qword [rax]
000000000000eaa7         movzx      r14d, byte [r13+8]
000000000000eaac         mov        eax, dword [r13+8]
000000000000eab0         shr        eax, 0x8
000000000000eab3         and        ax, 0x3ff
000000000000eab7         cmp        r14d, 0x1
000000000000eabb         je         loc_ee20

000000000000eac1         cmp        r14d, 0x3
000000000000eac5         je         loc_f290

000000000000eacb         cmp        r14d, 0x5
000000000000eacf         je         loc_f150

000000000000ead5         cmp        r14d, 0x7
000000000000ead9         je         loc_f2b9

                     loc_eadf:
000000000000eadf         mov        rbx, qword [rsp+0x138+var_130]              ; CODE XREF=build_trtable+1231, build_trtable+1316, build_trtable+1694, build_trtable+1827, build_trtable+2042, build_trtable+2144, build_trtable+2337
000000000000eae4         add        qword [rsp+0x138+var_128], 0x1
000000000000eaea         mov        rax, qword [rsp+0x138+var_128]
000000000000eaef         cmp        rax, qword [rbx+0x10]
000000000000eaf3         jl         loc_ea7c

000000000000eaf5         test       rbp, rbp
000000000000eaf8         mov        r15, qword [rsp+0x138+var_108]
000000000000eafd         jle        loc_f559

000000000000eb03         lea        rbx, qword [rbp+1]
000000000000eb07         mov        qword [rsp+0x138+var_C0], 0x0
000000000000eb10         mov        qword [rsp+0x138+var_C8], rbx
000000000000eb15         shl        rbx, 0x3
000000000000eb19         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
000000000000eb1c         call       j_malloc                                    ; malloc
000000000000eb21         test       rax, rax
000000000000eb24         mov        r12, rax
000000000000eb27         mov        qword [rsp+0x138+var_B8], rax
000000000000eb2f         je         loc_f32f

000000000000eb35         movabs     rax, 0xaaaaaaaaaaaa855
000000000000eb3f         mov        dword [rsp+0x138+var_CC], 0x0
000000000000eb47         cmp        rbp, rax
000000000000eb4a         jg         loc_f32f

000000000000eb50         lea        rax, qword [rbp+rbp*2]
000000000000eb55         shl        rax, 0x3
000000000000eb59         mov        rdi, rax                                    ; argument "__size" for method j_malloc
000000000000eb5c         mov        qword [rsp+0x138+var_E0], rax
000000000000eb61         call       j_malloc                                    ; malloc
000000000000eb66         test       rax, rax
000000000000eb69         mov        qword [rsp+0x138+var_128], rax
000000000000eb6e         je         loc_f32f

000000000000eb74         mov        rax, qword [rsp+0x138+var_128]
000000000000eb79         sub        rbx, 0x8
000000000000eb7d         mov        r12, qword [rsp+0x138+var_F8]
000000000000eb82         pxor       xmm0, xmm0
000000000000eb86         lea        r14, qword [rsp+0x138+var_C8]
000000000000eb8b         mov        qword [rsp+0x138+var_118], rbp
000000000000eb90         mov        byte [rsp+0x138+var_E9], 0x0
000000000000eb95         mov        rbp, r15
000000000000eb98         add        rax, rbx
000000000000eb9b         mov        qword [rsp+0x138+var_E8], r12
000000000000eba0         add        rbx, rax
000000000000eba3         mov        qword [rsp+0x138+var_108], rax
000000000000eba8         mov        rax, qword [rsp+0x138+var_120]
000000000000ebad         movaps     xmmword [rsp+0x138+var_68], xmm0
000000000000ebb5         mov        qword [rsp+0x138+var_100], rbx
000000000000ebba         xor        ebx, ebx
000000000000ebbc         lea        r13, qword [rax+8]
000000000000ebc0         lea        rax, qword [rsp+0x138+var_CC]
000000000000ebc5         movaps     xmmword [rsp+0x138+var_58], xmm0
000000000000ebcd         mov        qword [rsp+0x138+var_110], rax

                     loc_ebd2:
000000000000ebd2         mov        qword [rsp+0x138+var_C0], 0x0               ; CODE XREF=build_trtable+706
000000000000ebdb         cmp        qword [r13], 0x0
000000000000ebe0         jle        loc_ec28

000000000000ebe2         xor        r15d, r15d
000000000000ebe5         nop        dword [rax]

                     loc_ebe8:
000000000000ebe8         mov        rax, qword [r13+8]                          ; CODE XREF=build_trtable+582
000000000000ebec         mov        rdx, qword [rax+r15*8]
000000000000ebf0         mov        rax, qword [rbp+0x18]
000000000000ebf4         mov        rax, qword [rax+rdx*8]
000000000000ebf8         cmp        rax, 0xffffffffffffffff
000000000000ebfc         je         loc_ec1e

000000000000ebfe         lea        rdx, qword [rax+rax*2]
000000000000ec02         mov        rax, qword [rbp+0x30]
000000000000ec06         mov        rdi, r14
000000000000ec09         lea        rsi, qword [rax+rdx*8]
000000000000ec0d         call       re_node_set_merge                           ; re_node_set_merge
000000000000ec12         test       eax, eax
000000000000ec14         mov        dword [rsp+0x138+var_CC], eax
000000000000ec18         jne        loc_f318

                     loc_ec1e:
000000000000ec1e         add        r15, 0x1                                    ; CODE XREF=build_trtable+540
000000000000ec22         cmp        qword [r13], r15
000000000000ec26         jg         loc_ebe8

                     loc_ec28:
000000000000ec28         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+512
000000000000ec2d         xor        ecx, ecx
000000000000ec2f         mov        rsi, rbp
000000000000ec32         mov        rdx, r14
000000000000ec35         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000ec3a         mov        rsi, qword [rsp+0x138+var_128]
000000000000ec3f         test       rax, rax
000000000000ec42         mov        qword [rsi+rbx*8], rax
000000000000ec46         je         loc_f3f8

                     loc_ec4c:
000000000000ec4c         cmp        byte [rax+0x68], 0x0                        ; CODE XREF=build_trtable+2590
000000000000ec50         js         loc_f370

000000000000ec56         mov        rdi, qword [rsp+0x138+var_108]
000000000000ec5b         mov        rsi, qword [rsp+0x138+var_100]
000000000000ec60         mov        qword [rdi+rbx*8], rax
000000000000ec64         mov        rax, qword [rsp+0x138+var_128]
000000000000ec69         mov        rax, qword [rax+rbx*8]
000000000000ec6d         mov        qword [rsi+rbx*8], rax

                     loc_ec71:
000000000000ec71         lea        rdx, qword [rsp+0x138+var_68]               ; CODE XREF=build_trtable+2556, build_trtable+2568
000000000000ec79         xor        eax, eax

                     loc_ec7b:
000000000000ec7b         mov        rcx, qword [rdx+rax]                        ; CODE XREF=build_trtable+687
000000000000ec7f         or         rcx, qword [r12+rax]
000000000000ec83         mov        qword [rdx+rax], rcx
000000000000ec87         add        rax, 0x8
000000000000ec8b         cmp        rax, 0x20
000000000000ec8f         jne        loc_ec7b

000000000000ec91         add        rbx, 0x1
000000000000ec95         add        r13, 0x18
000000000000ec99         add        r12, 0x20
000000000000ec9d         cmp        rbx, qword [rsp+0x138+var_118]
000000000000eca2         jne        loc_ebd2

000000000000eca8         cmp        byte [rsp+0x138+var_E9], 0x0
000000000000ecad         mov        r15, rbp
000000000000ecb0         mov        rbp, qword [rsp+0x138+var_118]
000000000000ecb5         mov        qword [rsp+0x138+var_118], rdx
000000000000ecba         jne        loc_f409

000000000000ecc0         mov        esi, 0x100                                  ; argument "__size" for method j_calloc
000000000000ecc5         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
000000000000ecca         call       j_calloc                                    ; calloc
000000000000eccf         mov        r11, rax
000000000000ecd2         mov        rax, qword [rsp+0x138+var_130]
000000000000ecd7         test       r11, r11
000000000000ecda         mov        qword [rax+0x58], r11
000000000000ecde         je         loc_f31d

000000000000ece4         mov        rbx, qword [rsp+0x138+var_F8]
000000000000ece9         mov        r12, qword [rsp+0x138+var_128]
000000000000ecee         xor        r9d, r9d
000000000000ecf1         mov        r13, qword [rsp+0x138+var_108]
000000000000ecf6         mov        rdx, qword [rsp+0x138+var_118]
000000000000ecfb         add        rbx, 0x20

                     loc_ecff:
000000000000ecff         mov        rax, qword [rdx+r9]                         ; CODE XREF=build_trtable+860
000000000000ed03         test       rax, rax
000000000000ed06         je         loc_ed34

000000000000ed08         mov        rsi, r9
000000000000ed0b         mov        ecx, 0x1
000000000000ed10         shl        rsi, 0x6
000000000000ed14         add        rsi, r11
000000000000ed17         nop        word [rax+rax]

                     loc_ed20:
000000000000ed20         test       al, 0x1                                     ; CODE XREF=build_trtable+850
000000000000ed22         jne        loc_f488

                     loc_ed28:
000000000000ed28         add        rcx, rcx                                    ; CODE XREF=build_trtable+2793, build_trtable+2805
000000000000ed2b         add        rsi, 0x8
000000000000ed2f         shr        rax, 0x1
000000000000ed32         jne        loc_ed20

                     loc_ed34:
000000000000ed34         add        r9, 0x8                                     ; CODE XREF=build_trtable+806
000000000000ed38         cmp        r9, 0x20
000000000000ed3c         jne        loc_ecff

                     loc_ed3e:
000000000000ed3e         test       byte [rsp+0x138+var_67], 0x4                ; CODE XREF=build_trtable+2720
000000000000ed46         je         loc_ed82

000000000000ed48         xor        eax, eax
000000000000ed4a         mov        rdx, qword [rsp+0x138+var_E8]
000000000000ed4f         jmp        loc_ed5e

                     loc_ed51:
000000000000ed51         add        rax, 0x1                                    ; CODE XREF=build_trtable+901
000000000000ed55         add        rdx, 0x20
000000000000ed59         cmp        rax, rbp
000000000000ed5c         je         loc_ed82

                     loc_ed5e:
000000000000ed5e         test       qword [rdx], 0x400                          ; CODE XREF=build_trtable+879
000000000000ed65         je         loc_ed51

000000000000ed67         mov        rbx, qword [rsp+0x138+var_100]
000000000000ed6c         cmp        byte [rsp+0x138+var_E9], 0x0
000000000000ed71         mov        rax, qword [rbx+rax*8]
000000000000ed75         mov        qword [r11+0x50], rax
000000000000ed79         je         loc_ed82

000000000000ed7b         mov        qword [r11+0x850], rax

                     loc_ed82:
000000000000ed82         mov        rdi, qword [rsp+0x138+var_128]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+870, build_trtable+892, build_trtable+921
000000000000ed87         call       j_free                                      ; free
000000000000ed8c         mov        rdi, qword [rsp+0x138+var_B8]               ; argument "__ptr" for method j_free
000000000000ed94         call       j_free                                      ; free
000000000000ed99         mov        rax, qword [rsp+0x138+var_120]
000000000000ed9e         mov        rbx, qword [rsp+0x138+var_E0]
000000000000eda3         lea        rbp, qword [rax+0x10]
000000000000eda7         add        rbx, rbp

                     loc_edaa:
000000000000edaa         mov        rdi, qword [rbp]                            ; argument "__ptr" for method j_free, CODE XREF=build_trtable+986
000000000000edae         add        rbp, 0x18
000000000000edb2         call       j_free                                      ; free
000000000000edb7         cmp        rbx, rbp
000000000000edba         jne        loc_edaa

000000000000edbc         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000edc1         call       j_free                                      ; free
000000000000edc6         mov        eax, 0x1
000000000000edcb         jmp        loc_edf2

                     loc_edcd:
000000000000edcd         test       rbp, rbp                                    ; CODE XREF=build_trtable+1799
000000000000edd0         mov        qword [rbx+8], 0x0
000000000000edd8         mov        qword [rbx], 0x0
000000000000eddf         jne        loc_f110

000000000000ede5         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000edea         call       j_free                                      ; free
000000000000edef         nop

                     loc_edf0:
000000000000edf0         xor        eax, eax                                    ; CODE XREF=build_trtable+62, build_trtable+1891, build_trtable+2443, build_trtable+2950

                     loc_edf2:
000000000000edf2         mov        rbx, qword [rsp+0x138+var_40]               ; CODE XREF=build_trtable+1003, build_trtable+2850
000000000000edfa         xor        rbx, qword [fs:0x28]
000000000000ee03         jne        loc_f554

000000000000ee09         add        rsp, 0x108
000000000000ee10         pop        rbx
000000000000ee11         pop        rbp
000000000000ee12         pop        r12
000000000000ee14         pop        r13
000000000000ee16         pop        r14
000000000000ee18         pop        r15
000000000000ee1a         ret
                        ; endp
000000000000ee1b         align      32

                     loc_ee20:
000000000000ee20         movzx      ecx, byte [r13]                             ; CODE XREF=build_trtable+219
000000000000ee25         lea        r12, qword [rsp+0x138+var_A8]
000000000000ee2d         mov        edi, 0x1
000000000000ee32         mov        rdx, rcx
000000000000ee35         and        ecx, 0x3f
000000000000ee38         shr        rdx, 0x3
000000000000ee3c         shl        rdi, cl
000000000000ee3f         and        edx, 0x18
000000000000ee42         or         qword [r12+rdx], rdi

                     loc_ee46:
000000000000ee46         test       ax, ax                                      ; CODE XREF=build_trtable+1993, build_trtable+2008, build_trtable+2260
000000000000ee49         je         loc_ef10

000000000000ee4f         test       al, 0x20
000000000000ee51         jne        loc_f1c0

                     loc_ee57:
000000000000ee57         test       al, 0x80                                    ; CODE XREF=build_trtable+2060
000000000000ee59         jne        loc_f0f4

000000000000ee5f         test       al, 0x4
000000000000ee61         je         loc_eeb5

000000000000ee63         cmp        r14d, 0x1
000000000000ee67         je         loc_f245

000000000000ee6d         mov        r8, qword [rsp+0x138+var_108]
000000000000ee72         cmp        dword [r8+0xb4], 0x1
000000000000ee7a         jle        loc_f2d2

                     loc_ee80:
000000000000ee80         mov        rdi, qword [r8+0x78]                        ; CODE XREF=build_trtable+2173
000000000000ee84         xor        esi, esi
000000000000ee86         xor        ecx, ecx

                     loc_ee88:
000000000000ee88         mov        rdx, qword [rdi+rcx*8]                      ; CODE XREF=build_trtable+1226
000000000000ee8c         not        rdx
000000000000ee8f         or         rdx, qword [r8+rcx*8+0xb8]
000000000000ee97         and        rdx, qword [r12+rcx*8]
000000000000ee9b         mov        qword [r12+rcx*8], rdx
000000000000ee9f         add        rcx, 0x1
000000000000eea3         or         rsi, rdx
000000000000eea6         cmp        rcx, 0x4
000000000000eeaa         jne        loc_ee88

000000000000eeac         test       rsi, rsi
000000000000eeaf         je         loc_eadf

                     loc_eeb5:
000000000000eeb5         test       al, 0x8                                     ; CODE XREF=build_trtable+1153, build_trtable+2331
000000000000eeb7         je         loc_ef10

000000000000eeb9         cmp        r14d, 0x1
000000000000eebd         je         loc_f1f1

000000000000eec3         mov        rdi, qword [rsp+0x138+var_108]
000000000000eec8         cmp        dword [rdi+0xb4], 0x1
000000000000eecf         jle        loc_f20e

                     loc_eed5:
000000000000eed5         mov        rsi, qword [rdi+0x78]                       ; CODE XREF=build_trtable+2088
000000000000eed9         xor        ecx, ecx
000000000000eedb         xor        edx, edx

                     loc_eedd:
000000000000eedd         mov        rax, qword [rdi+rdx*8+0xb8]                 ; CODE XREF=build_trtable+1311
000000000000eee5         and        rax, qword [rsi+rdx*8]
000000000000eee9         not        rax
000000000000eeec         and        rax, qword [r12+rdx*8]
000000000000eef0         mov        qword [r12+rdx*8], rax
000000000000eef4         add        rdx, 0x1
000000000000eef8         or         rcx, rax
000000000000eefb         cmp        rdx, 0x4
000000000000eeff         jne        loc_eedd

000000000000ef01         test       rcx, rcx
000000000000ef04         je         loc_eadf

000000000000ef0a         nop        word [rax+rax]

                     loc_ef10:
000000000000ef10         xor        ebx, ebx                                    ; CODE XREF=build_trtable+1129, build_trtable+1239, build_trtable+2138
000000000000ef12         test       rbp, rbp
000000000000ef15         jle        loc_f07b

000000000000ef1b         mov        qword [rsp+0x138+var_110], r13
000000000000ef20         mov        r13, r15
000000000000ef23         nop        dword [rax+rax]

                     loc_ef28:
000000000000ef28         mov        r10, rbx                                    ; CODE XREF=build_trtable+1682
000000000000ef2b         shl        r10, 0x5
000000000000ef2f         cmp        r14d, 0x1
000000000000ef33         jne        loc_ef58

000000000000ef35         mov        rax, qword [rsp+0x138+var_110]
000000000000ef3a         movzx      edx, byte [rax]
000000000000ef3d         mov        rax, rdx
000000000000ef40         shr        rax, 0x3
000000000000ef44         and        eax, 0x18
000000000000ef47         add        rax, r13
000000000000ef4a         mov        rax, qword [rax+r10]
000000000000ef4e         bt         rax, rdx
000000000000ef52         jae        loc_f06b

                     loc_ef58:
000000000000ef58         lea        rdi, qword [r13+r10]                        ; CODE XREF=build_trtable+1363
000000000000ef5d         lea        rsi, qword [rsp+0x138+var_88]
000000000000ef65         xor        ecx, ecx
000000000000ef67         xor        eax, eax

                     loc_ef69:
000000000000ef69         mov        rdx, qword [r12+rax*8]                      ; CODE XREF=build_trtable+1440
000000000000ef6d         and        rdx, qword [rdi+rax*8]
000000000000ef71         mov        qword [rsi+rax*8], rdx
000000000000ef75         add        rax, 0x1
000000000000ef79         or         rcx, rdx
000000000000ef7c         cmp        rax, 0x4
000000000000ef80         jne        loc_ef69

000000000000ef82         test       rcx, rcx
000000000000ef85         je         loc_f06b

000000000000ef8b         lea        r11, qword [rsp+0x138+var_68]
000000000000ef93         xor        r15d, r15d
000000000000ef96         xor        r9d, r9d
000000000000ef99         xor        ecx, ecx

                     loc_ef9b:
000000000000ef9b         mov        rsi, qword [r12+rcx*8]                      ; CODE XREF=build_trtable+1512
000000000000ef9f         mov        rax, qword [rdi+rcx*8]
000000000000efa3         mov        rdx, rsi
000000000000efa6         not        rdx
000000000000efa9         and        rdx, rax
000000000000efac         not        rax
000000000000efaf         and        rax, rsi
000000000000efb2         mov        qword [r11+rcx*8], rdx
000000000000efb6         or         r9, rdx
000000000000efb9         mov        qword [r12+rcx*8], rax
000000000000efbd         add        rcx, 0x1
000000000000efc1         or         r15, rax
000000000000efc4         cmp        rcx, 0x4
000000000000efc8         jne        loc_ef9b

000000000000efca         mov        rdi, qword [rsp+0x138+var_120]
000000000000efcf         lea        rax, qword [rbx+rbx*2]
000000000000efd3         test       r9, r9
000000000000efd6         lea        rdx, qword [rdi+rax*8]
000000000000efda         je         loc_f044

000000000000efdc         mov        rax, rbp
000000000000efdf         movdqa     xmm0, xmmword [rsp+0x138+var_68]
000000000000efe8         shl        rax, 0x5
000000000000efec         mov        rsi, rdx
000000000000efef         mov        qword [rsp+0x138+var_100], rdx
000000000000eff4         add        rax, r13
000000000000eff7         movups     xmmword [rax], xmm0
000000000000effa         movdqa     xmm0, xmmword [rsp+0x138+var_58]
000000000000f003         movups     xmmword [rax+0x10], xmm0
000000000000f007         lea        rax, qword [rbp+rbp*2]
000000000000f00c         lea        rdi, qword [rdi+rax*8]
000000000000f010         movdqa     xmm0, xmmword [rsp+0x138+var_88]
000000000000f019         movups     xmmword [r13+r10], xmm0
000000000000f01f         movdqa     xmm0, xmmword [rsp+0x138+var_78]
000000000000f028         movups     xmmword [r13+r10+0x10], xmm0
000000000000f02e         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000000f033         test       eax, eax
000000000000f035         jne        loc_f110

000000000000f03b         mov        rdx, qword [rsp+0x138+var_100]
000000000000f040         add        rbp, 0x1

                     loc_f044:
000000000000f044         mov        rax, qword [rsp+0x138+var_130]              ; CODE XREF=build_trtable+1530
000000000000f049         mov        rsi, qword [rsp+0x138+var_118]
000000000000f04e         mov        rdi, rdx
000000000000f051         mov        rax, qword [rax+0x18]
000000000000f055         mov        rsi, qword [rax+rsi]
000000000000f059         call       re_node_set_insert                          ; re_node_set_insert
000000000000f05e         test       al, al
000000000000f060         je         loc_f110

000000000000f066         test       r15, r15
000000000000f069         je         loc_f078

                     loc_f06b:
000000000000f06b         add        rbx, 0x1                                    ; CODE XREF=build_trtable+1394, build_trtable+1445
000000000000f06f         cmp        rbx, rbp
000000000000f072         jl         loc_ef28

                     loc_f078:
000000000000f078         mov        r15, r13                                    ; CODE XREF=build_trtable+1673

                     loc_f07b:
000000000000f07b         cmp        rbp, rbx                                    ; CODE XREF=build_trtable+1333
000000000000f07e         jne        loc_eadf

000000000000f084         mov        rax, rbp
000000000000f087         movdqa     xmm0, xmmword [rsp+0x138+var_A8]
000000000000f090         shl        rax, 0x5
000000000000f094         mov        rbx, qword [rsp+0x138+var_118]
000000000000f099         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
000000000000f09e         add        rax, r15
000000000000f0a1         movups     xmmword [rax], xmm0
000000000000f0a4         movdqa     xmm0, xmmword [rsp+0x138+var_98]
000000000000f0ad         movups     xmmword [rax+0x10], xmm0
000000000000f0b1         mov        rax, qword [rsp+0x138+var_130]
000000000000f0b6         mov        rax, qword [rax+0x18]
000000000000f0ba         mov        r13, qword [rax+rbx]
000000000000f0be         mov        rbx, qword [rsp+0x138+var_120]
000000000000f0c3         lea        rax, qword [rbp+rbp*2]
000000000000f0c8         lea        rbx, qword [rbx+rax*8]
000000000000f0cc         mov        qword [rbx], 0x1
000000000000f0d3         mov        qword [rbx+8], 0x1
000000000000f0db         call       j_malloc                                    ; malloc
000000000000f0e0         test       rax, rax
000000000000f0e3         mov        qword [rbx+0x10], rax
000000000000f0e7         je         loc_edcd

000000000000f0ed         mov        qword [rax], r13
000000000000f0f0         add        rbp, 0x1

                     loc_f0f4:
000000000000f0f4         pxor       xmm0, xmm0                                  ; CODE XREF=build_trtable+1145, build_trtable+2070, build_trtable+2154
000000000000f0f8         movaps     xmmword [r12], xmm0
000000000000f0fd         movaps     xmmword [r12+0x10], xmm0
000000000000f103         jmp        loc_eadf
000000000000f108         align      16

                     loc_f110:
000000000000f110         mov        rax, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+1023, build_trtable+1621, build_trtable+1664
000000000000f115         lea        rbx, qword [rax+0x10]
000000000000f119         lea        rax, qword [rbp+rbp*2]
000000000000f11e         lea        rbp, qword [rbx+rax*8]
000000000000f122         nop        word [rax+rax]

                     loc_f128:
000000000000f128         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=build_trtable+1879
000000000000f12b         add        rbx, 0x18
000000000000f12f         call       j_free                                      ; free
000000000000f134         cmp        rbp, rbx
000000000000f137         jne        loc_f128

000000000000f139         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000f13e         call       j_free                                      ; free
000000000000f143         jmp        loc_edf0
000000000000f148         align      16

                     loc_f150:
000000000000f150         mov        rsi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+239
000000000000f155         cmp        dword [rsi+0xb4], 0x1
000000000000f15c         jle        loc_f265

000000000000f162         mov        rsi, qword [rsi+0x78]
000000000000f166         lea        r12, qword [rsp+0x138+var_A8]
000000000000f16e         xor        edx, edx

                     loc_f170:
000000000000f170         mov        rcx, qword [r12+rdx]                        ; CODE XREF=build_trtable+1956
000000000000f174         or         rcx, qword [rsi+rdx]
000000000000f178         mov        qword [r12+rdx], rcx
000000000000f17c         add        rdx, 0x8
000000000000f180         cmp        rdx, 0x20
000000000000f184         jne        loc_f170

                     loc_f186:
000000000000f186         mov        rbx, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+2209, build_trtable+2285
000000000000f18b         mov        rdx, qword [rbx+0xd8]
000000000000f192         test       dl, 0x40
000000000000f195         jne        loc_f1a3

000000000000f197         and        qword [rsp+0x138+var_A8], 0xfffffffffffffbff

                     loc_f1a3:
000000000000f1a3         and        edx, 0x80                                   ; CODE XREF=build_trtable+1973
000000000000f1a9         je         loc_ee46

000000000000f1af         and        qword [rsp+0x138+var_A8], 0xfffffffffffffffe
000000000000f1b8         jmp        loc_ee46
000000000000f1bd         align      64

                     loc_f1c0:
000000000000f1c0         mov        rdx, qword [rsp+0x138+var_A8]               ; CODE XREF=build_trtable+1137
000000000000f1c8         pxor       xmm0, xmm0
000000000000f1cc         and        dh, 0x4
000000000000f1cf         movaps     xmmword [r12], xmm0
000000000000f1d4         movaps     xmmword [r12+0x10], xmm0
000000000000f1da         je         loc_eadf

000000000000f1e0         mov        qword [rsp+0x138+var_A8], 0x400
000000000000f1ec         jmp        loc_ee57

                     loc_f1f1:
000000000000f1f1         test       byte [r13+0xa], 0x40                        ; CODE XREF=build_trtable+1245
000000000000f1f6         jne        loc_f0f4

000000000000f1fc         mov        rdi, qword [rsp+0x138+var_108]
000000000000f201         cmp        dword [rdi+0xb4], 0x1
000000000000f208         jg         loc_eed5

                     loc_f20e:
000000000000f20e         mov        rsi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+1263
000000000000f213         xor        ecx, ecx
000000000000f215         xor        edx, edx

                     loc_f217:
000000000000f217         mov        rax, qword [rsi+rdx*8+0xb8]                 ; CODE XREF=build_trtable+2133
000000000000f21f         not        rax
000000000000f222         and        rax, qword [r12+rdx*8]
000000000000f226         mov        qword [r12+rdx*8], rax
000000000000f22a         add        rdx, 0x1
000000000000f22e         or         rcx, rax
000000000000f231         cmp        rdx, 0x4
000000000000f235         jne        loc_f217

000000000000f237         test       rcx, rcx
000000000000f23a         jne        loc_ef10

000000000000f240         jmp        loc_eadf

                     loc_f245:
000000000000f245         test       byte [r13+0xa], 0x40                        ; CODE XREF=build_trtable+1159
000000000000f24a         je         loc_f0f4

000000000000f250         mov        r8, qword [rsp+0x138+var_108]
000000000000f255         cmp        dword [r8+0xb4], 0x1
000000000000f25d         jg         loc_ee80

000000000000f263         jmp        loc_f2d2

                     loc_f265:
000000000000f265         pcmpeqd    xmm0, xmm0                                  ; CODE XREF=build_trtable+1916
000000000000f269         lea        r12, qword [rsp+0x138+var_A8]
000000000000f271         movaps     xmmword [rsp+0x138+var_A8], xmm0
000000000000f279         movaps     xmmword [rsp+0x138+var_98], xmm0
000000000000f281         jmp        loc_f186
000000000000f286         align      16

                     loc_f290:
000000000000f290         mov        rsi, qword [r13]                            ; CODE XREF=build_trtable+229
000000000000f294         lea        r12, qword [rsp+0x138+var_A8]
000000000000f29c         xor        edx, edx

                     loc_f29e:
000000000000f29e         mov        rcx, qword [r12+rdx]                        ; CODE XREF=build_trtable+2258
000000000000f2a2         or         rcx, qword [rsi+rdx]
000000000000f2a6         mov        qword [r12+rdx], rcx
000000000000f2aa         add        rdx, 0x8
000000000000f2ae         cmp        rdx, 0x20
000000000000f2b2         jne        loc_f29e

000000000000f2b4         jmp        loc_ee46

                     loc_f2b9:
000000000000f2b9         pcmpeqd    xmm0, xmm0                                  ; CODE XREF=build_trtable+249
000000000000f2bd         lea        r12, qword [rsp+0x138+var_A8]
000000000000f2c5         movaps     xmmword [rsp+0x138+var_A8], xmm0
000000000000f2cd         jmp        loc_f186

                     loc_f2d2:
000000000000f2d2         mov        rdi, qword [rsp+0x138+var_108]              ; CODE XREF=build_trtable+1178, build_trtable+2179
000000000000f2d7         xor        esi, esi
000000000000f2d9         xor        edx, edx

                     loc_f2db:
000000000000f2db         mov        rcx, qword [r12+rdx*8]                      ; CODE XREF=build_trtable+2326
000000000000f2df         and        rcx, qword [rdi+rdx*8+0xb8]
000000000000f2e7         mov        qword [r12+rdx*8], rcx
000000000000f2eb         add        rdx, 0x1
000000000000f2ef         or         rsi, rcx
000000000000f2f2         cmp        rdx, 0x4
000000000000f2f6         jne        loc_f2db

000000000000f2f8         test       rsi, rsi
000000000000f2fb         jne        loc_eeb5

000000000000f301         jmp        loc_eadf

                     loc_f306:
000000000000f306         mov        edx, dword [rsp+0x138+var_CC]               ; CODE XREF=build_trtable+2481
000000000000f30a         test       edx, edx
000000000000f30c         je         loc_f397

000000000000f312         nop        word [rax+rax]

                     loc_f318:
000000000000f318         mov        rbp, qword [rsp+0x138+var_118]              ; CODE XREF=build_trtable+568, build_trtable+2574, build_trtable+2596

                     loc_f31d:
000000000000f31d         mov        rdi, qword [rsp+0x138+var_128]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+766, build_trtable+2631
000000000000f322         call       j_free                                      ; free
000000000000f327         mov        r12, qword [rsp+0x138+var_B8]

                     loc_f32f:
000000000000f32f         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=build_trtable+335, build_trtable+362, build_trtable+398
000000000000f332         call       j_free                                      ; free
000000000000f337         mov        rax, qword [rsp+0x138+var_120]
000000000000f33c         lea        rbx, qword [rax+0x10]
000000000000f340         lea        rax, qword [rbp+rbp*2]
000000000000f345         lea        rbp, qword [rbx+rax*8]
000000000000f349         nop        dword [rax]

                     loc_f350:
000000000000f350         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=build_trtable+2431
000000000000f353         add        rbx, 0x18
000000000000f357         call       j_free                                      ; free
000000000000f35c         cmp        rbp, rbx
000000000000f35f         jne        loc_f350

000000000000f361         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free
000000000000f366         call       j_free                                      ; free
000000000000f36b         jmp        loc_edf0

                     loc_f370:
000000000000f370         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+624
000000000000f375         mov        ecx, 0x1
000000000000f37a         mov        rdx, r14
000000000000f37d         mov        rsi, rbp
000000000000f380         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000f385         mov        rdi, qword [rsp+0x138+var_108]
000000000000f38a         test       rax, rax
000000000000f38d         mov        qword [rdi+rbx*8], rax
000000000000f391         je         loc_f306

                     loc_f397:
000000000000f397         mov        rdi, qword [rsp+0x138+var_128]              ; CODE XREF=build_trtable+2348
000000000000f39c         cmp        rax, qword [rdi+rbx*8]
000000000000f3a0         je         loc_f3bb

000000000000f3a2         movzx      edi, byte [rsp+0x138+var_E9]
000000000000f3a7         cmp        dword [rbp+0xb4], 0x2
000000000000f3ae         mov        eax, 0x1
000000000000f3b3         cmovge     edi, eax
000000000000f3b6         mov        byte [rsp+0x138+var_E9], dil

                     loc_f3bb:
000000000000f3bb         mov        rdi, qword [rsp+0x138+var_110]              ; CODE XREF=build_trtable+2496
000000000000f3c0         mov        rsi, rbp
000000000000f3c3         mov        ecx, 0x2
000000000000f3c8         mov        rdx, r14
000000000000f3cb         call       re_acquire_state_context                    ; re_acquire_state_context
000000000000f3d0         mov        rsi, qword [rsp+0x138+var_100]
000000000000f3d5         test       rax, rax
000000000000f3d8         mov        qword [rsi+rbx*8], rax
000000000000f3dc         jne        loc_ec71

000000000000f3e2         mov        eax, dword [rsp+0x138+var_CC]
000000000000f3e6         test       eax, eax
000000000000f3e8         je         loc_ec71

000000000000f3ee         jmp        loc_f318
000000000000f3f3         align      8

                     loc_f3f8:
000000000000f3f8         mov        ecx, dword [rsp+0x138+var_CC]               ; CODE XREF=build_trtable+614
000000000000f3fc         test       ecx, ecx
000000000000f3fe         je         loc_ec4c

000000000000f404         jmp        loc_f318

                     loc_f409:
000000000000f409         mov        esi, 0x200                                  ; argument "__size" for method j_calloc, CODE XREF=build_trtable+730
000000000000f40e         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
000000000000f413         call       j_calloc                                    ; calloc
000000000000f418         mov        r11, rax
000000000000f41b         mov        rax, qword [rsp+0x138+var_130]
000000000000f420         test       r11, r11
000000000000f423         mov        qword [rax+0x60], r11
000000000000f427         je         loc_f31d

000000000000f42d         mov        r13, qword [rsp+0x138+var_F8]
000000000000f432         mov        r10, qword [rsp+0x138+var_128]
000000000000f437         mov        r12, r11
000000000000f43a         mov        r14, qword [rsp+0x138+var_108]
000000000000f43f         mov        rdx, qword [rsp+0x138+var_118]
000000000000f444         xor        ebx, ebx
000000000000f446         add        r13, 0x20

                     loc_f44a:
000000000000f44a         mov        rax, qword [rdx+rbx]                        ; CODE XREF=build_trtable+2718
000000000000f44e         test       rax, rax
000000000000f451         je         loc_f46f

000000000000f453         mov        rsi, r12
000000000000f456         mov        ecx, 0x1

                     loc_f45b:
000000000000f45b         test       al, 0x1                                     ; CODE XREF=build_trtable+2701
000000000000f45d         jne        loc_f50c

                     loc_f463:
000000000000f463         add        rcx, rcx                                    ; CODE XREF=build_trtable+2923
000000000000f466         add        rsi, 0x8
000000000000f46a         shr        rax, 0x1
000000000000f46d         jne        loc_f45b

                     loc_f46f:
000000000000f46f         add        rbx, 0x8                                    ; CODE XREF=build_trtable+2673
000000000000f473         add        r12, 0x200
000000000000f47a         cmp        rbx, 0x20
000000000000f47e         jne        loc_f44a

000000000000f480         jmp        loc_ed3e
000000000000f485         align      8

                     loc_f488:
000000000000f488         mov        rdi, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+834
000000000000f48d         test       qword [rdi+r9+0x1800], rcx
000000000000f495         jne        loc_f507

000000000000f497         lea        rdi, qword [rbx+r9]
000000000000f49b         xor        r8d, r8d
000000000000f49e         nop

                     loc_f4a0:
000000000000f4a0         mov        r10, qword [rdi]                            ; CODE XREF=build_trtable+2769
000000000000f4a3         add        r8, 0x1
000000000000f4a7         add        rdi, 0x20
000000000000f4ab         and        r10, rcx
000000000000f4ae         test       r10, r10
000000000000f4b1         je         loc_f4a0

000000000000f4b3         shl        r8, 0x3

                     loc_f4b7:
000000000000f4b7         test       qword [r15+r9+0xb8], rcx                    ; CODE XREF=build_trtable+2858
000000000000f4bf         je         loc_f4ce

000000000000f4c1         mov        rdi, qword [r13+r8]
000000000000f4c6         mov        qword [rsi], rdi
000000000000f4c9         jmp        loc_ed28

                     loc_f4ce:
000000000000f4ce         mov        rdi, qword [r12+r8]                         ; CODE XREF=build_trtable+2783
000000000000f4d2         mov        qword [rsi], rdi
000000000000f4d5         jmp        loc_ed28

                     loc_f4da:
000000000000f4da         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+131
000000000000f4df         call       j_free                                      ; free

                     loc_f4e4:
000000000000f4e4         mov        esi, 0x100                                  ; argument "__size" for method j_calloc, CODE XREF=build_trtable+2956
000000000000f4e9         mov        edi, 0x8                                    ; argument "__nmemb" for method j_calloc
000000000000f4ee         call       j_calloc                                    ; calloc
000000000000f4f3         mov        rbx, qword [rsp+0x138+var_130]
000000000000f4f8         test       rax, rax
000000000000f4fb         mov        qword [rbx+0x58], rax
000000000000f4ff         setne      al
000000000000f502         jmp        loc_edf2

                     loc_f507:
000000000000f507         xor        r8d, r8d                                    ; CODE XREF=build_trtable+2741
000000000000f50a         jmp        loc_f4b7

                     loc_f50c:
000000000000f50c         mov        rdi, qword [rsp+0x138+var_120]              ; CODE XREF=build_trtable+2685
000000000000f511         test       qword [rdi+rbx+0x1800], rcx
000000000000f519         jne        loc_f550

000000000000f51b         lea        r9, qword [r13+rbx]
000000000000f520         xor        r8d, r8d

                     loc_f523:
000000000000f523         mov        r15, qword [r9]                             ; CODE XREF=build_trtable+2903
000000000000f526         add        r8, 0x1
000000000000f52a         add        r9, 0x20
000000000000f52e         mov        rdi, r8
000000000000f531         and        r15, rcx
000000000000f534         test       r15, r15
000000000000f537         je         loc_f523

                     loc_f539:
000000000000f539         mov        r8, qword [r10+rdi*8]                       ; CODE XREF=build_trtable+2930
000000000000f53d         mov        qword [rsi], r8
000000000000f540         mov        rdi, qword [r14+rdi*8]
000000000000f544         mov        qword [rsi+0x800], rdi
000000000000f54b         jmp        loc_f463

                     loc_f550:
000000000000f550         xor        edi, edi                                    ; CODE XREF=build_trtable+2873
000000000000f552         jmp        loc_f539

                     loc_f554:
000000000000f554         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_trtable+1059
                        ; endp

                     loc_f559:
000000000000f559         mov        rdi, qword [rsp+0x138+var_120]              ; argument "__ptr" for method j_free, CODE XREF=build_trtable+285
000000000000f55e         call       j_free                                      ; free
000000000000f563         test       rbp, rbp
000000000000f566         jne        loc_edf0

000000000000f56c         jmp        loc_f4e4
000000000000f571         align      128                                         ; End of unwind block (FDE at 0x1f274)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     calc_first:
000000000000f580         cmp        byte [rsi+0x30], 0x10                       ; Begin of unwind block (FDE at 0x1f2c4), DATA XREF=re_compile_internal+1662
000000000000f584         je         loc_f5e8

000000000000f586         push       rbp
000000000000f587         push       rbx
000000000000f588         mov        rbx, rsi
000000000000f58b         mov        rbp, rdi
000000000000f58e         sub        rsp, 0x8
000000000000f592         mov        qword [rbx+0x18], rsi
000000000000f596         mov        rdx, qword [rbx+0x30]
000000000000f59a         mov        rsi, qword [rsi+0x28]
000000000000f59e         call       re_dfa_add_node                             ; re_dfa_add_node
000000000000f5a3         cmp        rax, 0xffffffffffffffff
000000000000f5a7         mov        rdx, rax
000000000000f5aa         mov        qword [rbx+0x38], rax
000000000000f5ae         je         loc_f600

000000000000f5b0         xor        eax, eax
000000000000f5b2         cmp        byte [rbx+0x30], 0xc
000000000000f5b6         jne        loc_f5dc

000000000000f5b8         mov        ecx, dword [rbx+0x28]
000000000000f5bb         shl        rdx, 0x4
000000000000f5bf         add        rdx, qword [rbp]
000000000000f5c3         and        ecx, 0x3ff
000000000000f5c9         shl        ecx, 0x8
000000000000f5cc         mov        esi, ecx
000000000000f5ce         mov        ecx, dword [rdx+8]
000000000000f5d1         and        ecx, 0xfffc00ff
000000000000f5d7         or         ecx, esi
000000000000f5d9         mov        dword [rdx+8], ecx

                     loc_f5dc:
000000000000f5dc         add        rsp, 0x8                                    ; CODE XREF=calc_first+54, calc_first+133
000000000000f5e0         pop        rbx
000000000000f5e1         pop        rbp
000000000000f5e2         ret
                        ; endp
000000000000f5e3         align      8

                     loc_f5e8:
000000000000f5e8         mov        rax, qword [rsi+8]                          ; CODE XREF=calc_first+4
000000000000f5ec         mov        rdx, qword [rax+0x18]
000000000000f5f0         mov        rax, qword [rax+0x38]
000000000000f5f4         mov        qword [rsi+0x18], rdx
000000000000f5f8         mov        qword [rsi+0x38], rax
000000000000f5fc         xor        eax, eax
000000000000f5fe         ret
                        ; endp
000000000000f5ff         align      512

                     loc_f600:
000000000000f600         mov        eax, 0xc                                    ; CODE XREF=calc_first+46
000000000000f605         jmp        loc_f5dc
000000000000f607         align      16                                          ; End of unwind block (FDE at 0x1f2c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_fail_stack_return.part.24:
000000000000f610         push       r12                                         ; Begin of unwind block (FDE at 0x1f2f8), CODE XREF=set_regs+1279, set_regs+1383, set_regs+1810, set_regs+2005
000000000000f612         push       rbp
000000000000f613         mov        rbp, rdi
000000000000f616         push       rbx
000000000000f617         cmp        qword [rdi], 0x0
000000000000f61b         jle        loc_f652

000000000000f61d         xor        ebx, ebx
000000000000f61f         xor        r12d, r12d
000000000000f622         nop        word [rax+rax]

                     loc_f628:
000000000000f628         mov        rax, qword [rbp+0x10]                       ; CODE XREF=free_fail_stack_return.part.24+64
000000000000f62c         add        r12, 0x1
000000000000f630         mov        rdi, qword [rax+rbx+0x28]                   ; argument "__ptr" for method j_free
000000000000f635         call       j_free                                      ; free
000000000000f63a         mov        rax, qword [rbp+0x10]
000000000000f63e         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000f643         add        rbx, 0x30
000000000000f647         call       j_free                                      ; free
000000000000f64c         cmp        r12, qword [rbp]
000000000000f650         jl         loc_f628

                     loc_f652:
000000000000f652         pop        rbx                                         ; CODE XREF=free_fail_stack_return.part.24+11
000000000000f653         mov        rdi, qword [rbp+0x10]                       ; argument "__ptr" for method j_free
000000000000f657         pop        rbp
000000000000f658         pop        r12
000000000000f65a         jmp        j_free                                      ; free
                        ; endp
000000000000f65f         align      32                                          ; End of unwind block (FDE at 0x1f2f8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     pop_fail_stack.isra.25:
000000000000f660         push       r12                                         ; Begin of unwind block (FDE at 0x1f324), CODE XREF=set_regs+1459, set_regs+1542
000000000000f662         push       rbp
000000000000f663         push       rbx
000000000000f664         mov        rax, qword [rdi]
000000000000f667         sub        rax, 0x1
000000000000f66b         test       rax, rax
000000000000f66e         mov        qword [rdi], rax
000000000000f671         js         loc_f6d5

000000000000f673         lea        rbx, qword [rax+rax*2]
000000000000f677         mov        rax, qword [rsi]
000000000000f67a         mov        r12, rsi
000000000000f67d         shl        rcx, 0x4
000000000000f681         mov        rbp, r9
000000000000f684         mov        rdi, r8                                     ; argument "__dest" for method j_memcpy
000000000000f687         shl        rbx, 0x4
000000000000f68b         add        rax, rbx
000000000000f68e         mov        rsi, qword [rax]
000000000000f691         mov        qword [rdx], rsi
000000000000f694         mov        rsi, qword [rax+0x10]                       ; argument "__src" for method j_memcpy
000000000000f698         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
000000000000f69b         call       j_memcpy                                    ; memcpy
000000000000f6a0         mov        rdi, qword [rbp+0x10]                       ; argument "__ptr" for method j_free
000000000000f6a4         call       j_free                                      ; free
000000000000f6a9         mov        rax, qword [r12]
000000000000f6ad         mov        rdi, qword [rax+rbx+0x10]                   ; argument "__ptr" for method j_free
000000000000f6b2         call       j_free                                      ; free
000000000000f6b7         add        rbx, qword [r12]
000000000000f6bb         movdqu     xmm0, xmmword [rbx+0x18]
000000000000f6c0         movaps     xmmword [rbp], xmm0
000000000000f6c4         mov        rax, qword [rbx+0x28]
000000000000f6c8         mov        qword [rbp+0x10], rax
000000000000f6cc         mov        rax, qword [rbx+8]
000000000000f6d0         pop        rbx
000000000000f6d1         pop        rbp
000000000000f6d2         pop        r12
000000000000f6d4         ret
                        ; endp

                     loc_f6d5:
000000000000f6d5         lea        rcx, qword [__PRETTY_FUNCTION__.8040]       ; argument "__function" for method j___assert_fail, "pop_fail_stack", CODE XREF=pop_fail_stack.isra.25+17
000000000000f6dc         lea        rsi, qword [aCoreutils831li_1c6d0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000000f6e3         lea        rdi, qword [aNum0]                          ; argument "__assertion" for method j___assert_fail, "num >= 0"
000000000000f6ea         mov        edx, 0x555                                  ; argument "__line" for method j___assert_fail
000000000000f6ef         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000f6f4         align      256                                         ; End of unwind block (FDE at 0x1f324)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     build_collating_symbol.isra.28:
000000000000f700         push       rbp                                         ; Begin of unwind block (FDE at 0x1f354), CODE XREF=sub_15b10+1072, sub_15b10+1128
000000000000f701         push       rbx
000000000000f702         mov        rbp, rdi
000000000000f705         mov        rdi, rsi                                    ; argument "__s" for method j_strlen
000000000000f708         mov        rbx, rsi
000000000000f70b         sub        rsp, 0x8
000000000000f70f         call       j_strlen                                    ; strlen
000000000000f714         cmp        rax, 0x1
000000000000f718         jne        loc_f740

000000000000f71a         movzx      ecx, byte [rbx]
000000000000f71d         mov        rdx, rcx
000000000000f720         and        ecx, 0x3f
000000000000f723         shr        rdx, 0x3
000000000000f727         shl        rax, cl
000000000000f72a         and        edx, 0x18
000000000000f72d         or         qword [rbp+rdx], rax
000000000000f732         add        rsp, 0x8
000000000000f736         xor        eax, eax
000000000000f738         pop        rbx
000000000000f739         pop        rbp
000000000000f73a         ret
                        ; endp
000000000000f73b         align      64

                     loc_f740:
000000000000f740         add        rsp, 0x8                                    ; CODE XREF=build_collating_symbol.isra.28+24
000000000000f744         mov        eax, 0x3
000000000000f749         pop        rbx
000000000000f74a         pop        rbp
000000000000f74b         ret
                        ; endp
000000000000f74c         align      16                                          ; End of unwind block (FDE at 0x1f354)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     build_charclass.isra.29:
000000000000f750         push       r14                                         ; Begin of unwind block (FDE at 0x1f388), CODE XREF=build_charclass_op+163, sub_15b10+1309
000000000000f752         push       r13
000000000000f754         mov        r13, rcx
000000000000f757         push       r12
000000000000f759         push       rbp
000000000000f75a         mov        r12, r9
000000000000f75d         push       rbx
000000000000f75e         mov        rbp, rdi
000000000000f761         mov        rbx, rsi
000000000000f764         sub        rsp, 0x10
000000000000f768         test       qword [rsp+0x38+arg_0], 0x400000
000000000000f771         je         loc_f798

000000000000f773         lea        rdi, qword [aUpper]                         ; "upper"
000000000000f77a         mov        ecx, 0x6
000000000000f77f         mov        rsi, r9
000000000000f782         rep  cmpsb byte [rsi], byte [rdi]
000000000000f784         seta       al
000000000000f787         sbb        al, 0x0
000000000000f789         test       al, al
000000000000f78b         jne        loc_f886

000000000000f791         lea        r12, qword [aAlpha]                         ; "alpha"

                     loc_f798:
000000000000f798         mov        rcx, qword [r13]                            ; CODE XREF=build_charclass.isra.29+33
000000000000f79c         cmp        qword [r8], rcx
000000000000f79f         mov        rax, qword [rdx]
000000000000f7a2         je         loc_f8b9

                     loc_f7a8:
000000000000f7a8         lea        rdx, qword [rcx+1]                          ; CODE XREF=build_charclass.isra.29+355, build_charclass.isra.29+419
000000000000f7ac         mov        rdi, r12                                    ; argument "__property" for method j_wctype
000000000000f7af         mov        qword [r13], rdx
000000000000f7b3         lea        r13, qword [rax+rcx*8]
000000000000f7b7         call       j_wctype                                    ; wctype
000000000000f7bc         lea        rdi, qword [aAlnum]                         ; "alnum"
000000000000f7c3         mov        qword [r13], rax
000000000000f7c7         mov        ecx, 0x6
000000000000f7cc         mov        rsi, r12
000000000000f7cf         rep  cmpsb byte [rsi], byte [rdi]
000000000000f7d1         seta       al
000000000000f7d4         sbb        al, 0x0
000000000000f7d6         test       al, al
000000000000f7d8         je         loc_f848

000000000000f7da         lea        rdi, qword [aCntrl]                         ; "cntrl"
000000000000f7e1         mov        ecx, 0x6
000000000000f7e6         mov        rsi, r12
000000000000f7e9         rep  cmpsb byte [rsi], byte [rdi]
000000000000f7eb         seta       al
000000000000f7ee         sbb        al, 0x0
000000000000f7f0         test       al, al
000000000000f7f2         jne        loc_f8f8

000000000000f7f8         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000f7fd         xor        ecx, ecx
000000000000f7ff         test       rbp, rbp
000000000000f802         mov        rdx, qword [rax]
000000000000f805         mov        edi, 0x1
000000000000f80a         jne        loc_faca

                     loc_f810:
000000000000f810         test       byte [rdx+rcx*2], 0x2                       ; CODE XREF=build_charclass.isra.29+226
000000000000f814         je         loc_f827

000000000000f816         mov        rax, rcx
000000000000f819         mov        rsi, rdi
000000000000f81c         sar        rax, 0x6
000000000000f820         shl        rsi, cl
000000000000f823         or         qword [rbx+rax*8], rsi

                     loc_f827:
000000000000f827         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+196
000000000000f82b         cmp        rcx, 0x100
000000000000f832         jne        loc_f810

                     loc_f834:
000000000000f834         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+308, build_charclass.isra.29+549, build_charclass.isra.29+621, build_charclass.isra.29+757, build_charclass.isra.29+814, build_charclass.isra.29+885, build_charclass.isra.29+942, build_charclass.isra.29+1037, build_charclass.isra.29+1095, build_charclass.isra.29+1187, build_charclass.isra.29+1292

                     loc_f836:
000000000000f836         add        rsp, 0x10                                   ; CODE XREF=build_charclass.isra.29+1197, build_charclass.isra.29+1893
000000000000f83a         pop        rbx
000000000000f83b         pop        rbp
000000000000f83c         pop        r12
000000000000f83e         pop        r13
000000000000f840         pop        r14
000000000000f842         ret
                        ; endp
000000000000f843         align      8

                     loc_f848:
000000000000f848         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+136
000000000000f84d         xor        ecx, ecx
000000000000f84f         test       rbp, rbp
000000000000f852         mov        rdx, qword [rax]
000000000000f855         mov        edi, 0x1
000000000000f85a         jne        loc_fa4a

                     loc_f860:
000000000000f860         test       byte [rdx+rcx*2], 0x8                       ; CODE XREF=build_charclass.isra.29+306
000000000000f864         je         loc_f877

000000000000f866         mov        rax, rcx
000000000000f869         mov        rsi, rdi
000000000000f86c         sar        rax, 0x6
000000000000f870         shl        rsi, cl
000000000000f873         or         qword [rbx+rax*8], rsi

                     loc_f877:
000000000000f877         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+276
000000000000f87b         cmp        rcx, 0x100
000000000000f882         jne        loc_f860

000000000000f884         jmp        loc_f834

                     loc_f886:
000000000000f886         lea        rdi, qword [aLower]                         ; "lower", CODE XREF=build_charclass.isra.29+59
000000000000f88d         mov        ecx, 0x6
000000000000f892         mov        rsi, r9
000000000000f895         rep  cmpsb byte [rsi], byte [rdi]
000000000000f897         mov        rcx, qword [r13]
000000000000f89b         seta       al
000000000000f89e         sbb        al, 0x0
000000000000f8a0         test       al, al
000000000000f8a2         lea        rax, qword [aAlpha]                         ; "alpha"
000000000000f8a9         cmove      r12, rax
000000000000f8ad         cmp        qword [r8], rcx
000000000000f8b0         mov        rax, qword [rdx]
000000000000f8b3         jne        loc_f7a8

                     loc_f8b9:
000000000000f8b9         lea        r14, qword [rcx+rcx+1]                      ; CODE XREF=build_charclass.isra.29+82
000000000000f8be         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
000000000000f8c1         mov        qword [rsp+0x38+var_30], r8
000000000000f8c6         mov        qword [rsp+0x38+var_38], rdx
000000000000f8ca         lea        rsi, qword [r14*8]                          ; argument "__size" for method j_realloc
000000000000f8d2         call       j_realloc                                   ; realloc
000000000000f8d7         test       rax, rax
000000000000f8da         je         loc_fbf8

000000000000f8e0         mov        rdx, qword [rsp+0x38+var_38]
000000000000f8e4         mov        r8, qword [rsp+0x38+var_30]
000000000000f8e9         mov        qword [rdx], rax
000000000000f8ec         mov        qword [r8], r14
000000000000f8ef         mov        rcx, qword [r13]
000000000000f8f3         jmp        loc_f7a8

                     loc_f8f8:
000000000000f8f8         lea        rdi, qword [aLower]                         ; "lower", CODE XREF=build_charclass.isra.29+162
000000000000f8ff         mov        ecx, 0x6
000000000000f904         mov        rsi, r12
000000000000f907         rep  cmpsb byte [rsi], byte [rdi]
000000000000f909         seta       al
000000000000f90c         sbb        al, 0x0
000000000000f90e         test       al, al
000000000000f910         je         loc_f97a

000000000000f912         lea        rdi, qword [aSpace]                         ; "space"
000000000000f919         mov        ecx, 0x6
000000000000f91e         mov        rsi, r12
000000000000f921         rep  cmpsb byte [rsi], byte [rdi]
000000000000f923         seta       al
000000000000f926         sbb        al, 0x0
000000000000f928         test       al, al
000000000000f92a         jne        loc_f9c2

000000000000f930         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000f935         xor        ecx, ecx
000000000000f937         test       rbp, rbp
000000000000f93a         mov        rdx, qword [rax]
000000000000f93d         mov        edi, 0x1
000000000000f942         jne        loc_fc9e

000000000000f948         nop        dword [rax+rax]

                     loc_f950:
000000000000f950         test       byte [rdx+rcx*2+1], 0x20                    ; CODE XREF=build_charclass.isra.29+547
000000000000f955         je         loc_f968

000000000000f957         mov        rax, rcx
000000000000f95a         mov        rsi, rdi
000000000000f95d         sar        rax, 0x6
000000000000f961         shl        rsi, cl
000000000000f964         or         qword [rbx+rax*8], rsi

                     loc_f968:
000000000000f968         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+517
000000000000f96c         cmp        rcx, 0x100
000000000000f973         jne        loc_f950

000000000000f975         jmp        loc_f834

                     loc_f97a:
000000000000f97a         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+448
000000000000f97f         xor        ecx, ecx
000000000000f981         test       rbp, rbp
000000000000f984         mov        rdx, qword [rax]
000000000000f987         mov        edi, 0x1
000000000000f98c         jne        loc_fb62

000000000000f992         nop        word [rax+rax]

                     loc_f998:
000000000000f998         test       byte [rdx+rcx*2+1], 0x2                     ; CODE XREF=build_charclass.isra.29+619
000000000000f99d         je         loc_f9b0

000000000000f99f         mov        rax, rcx
000000000000f9a2         mov        rsi, rdi
000000000000f9a5         sar        rax, 0x6
000000000000f9a9         shl        rsi, cl
000000000000f9ac         or         qword [rbx+rax*8], rsi

                     loc_f9b0:
000000000000f9b0         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+589
000000000000f9b4         cmp        rcx, 0x100
000000000000f9bb         jne        loc_f998

000000000000f9bd         jmp        loc_f834

                     loc_f9c2:
000000000000f9c2         lea        rdi, qword [aAlpha]                         ; "alpha", CODE XREF=build_charclass.isra.29+474
000000000000f9c9         mov        ecx, 0x6
000000000000f9ce         mov        rsi, r12
000000000000f9d1         rep  cmpsb byte [rsi], byte [rdi]
000000000000f9d3         seta       al
000000000000f9d6         sbb        al, 0x0
000000000000f9d8         test       al, al
000000000000f9da         je         loc_fa83

000000000000f9e0         lea        rdi, qword [aDigit]                         ; "digit"
000000000000f9e7         mov        ecx, 0x6
000000000000f9ec         mov        rsi, r12
000000000000f9ef         rep  cmpsb byte [rsi], byte [rdi]
000000000000f9f1         seta       al
000000000000f9f4         sbb        al, 0x0
000000000000f9f6         test       al, al
000000000000f9f8         jne        loc_fb03

000000000000f9fe         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000fa03         xor        ecx, ecx
000000000000fa05         test       rbp, rbp
000000000000fa08         mov        rdx, qword [rax]
000000000000fa0b         mov        edi, 0x1
000000000000fa10         jne        loc_feba

000000000000fa16         nop        word [cs:rax+rax]

                     loc_fa20:
000000000000fa20         test       byte [rdx+rcx*2+1], 0x8                     ; CODE XREF=build_charclass.isra.29+755
000000000000fa25         je         loc_fa38

000000000000fa27         mov        rax, rcx
000000000000fa2a         mov        rsi, rdi
000000000000fa2d         sar        rax, 0x6
000000000000fa31         shl        rsi, cl
000000000000fa34         or         qword [rbx+rax*8], rsi

                     loc_fa38:
000000000000fa38         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+725
000000000000fa3c         cmp        rcx, 0x100
000000000000fa43         jne        loc_fa20

000000000000fa45         jmp        loc_f834

                     loc_fa4a:
000000000000fa4a         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+266
000000000000fa4c         nop        dword [rax]

                     loc_fa50:
000000000000fa50         test       byte [rdx+rax*2], 0x8                       ; CODE XREF=build_charclass.isra.29+812
000000000000fa54         je         loc_fa72

000000000000fa56         movzx      ecx, byte [rbp+rax]
000000000000fa5b         mov        r10, rdi
000000000000fa5e         mov        rsi, rcx
000000000000fa61         and        ecx, 0x3f
000000000000fa64         shr        rsi, 0x3
000000000000fa68         shl        r10, cl
000000000000fa6b         and        esi, 0x18
000000000000fa6e         or         qword [rbx+rsi], r10

                     loc_fa72:
000000000000fa72         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+772
000000000000fa76         cmp        rax, 0x100
000000000000fa7c         jne        loc_fa50

000000000000fa7e         jmp        loc_f834

                     loc_fa83:
000000000000fa83         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=build_charclass.isra.29+650
000000000000fa88         xor        ecx, ecx
000000000000fa8a         test       rbp, rbp
000000000000fa8d         mov        rdx, qword [rax]
000000000000fa90         mov        edi, 0x1
000000000000fa95         jne        loc_fc68

000000000000fa9b         nop        dword [rax+rax]

                     loc_faa0:
000000000000faa0         test       byte [rdx+rcx*2+1], 0x4                     ; CODE XREF=build_charclass.isra.29+883
000000000000faa5         je         loc_fab8

000000000000faa7         mov        rax, rcx
000000000000faaa         mov        rsi, rdi
000000000000faad         sar        rax, 0x6
000000000000fab1         shl        rsi, cl
000000000000fab4         or         qword [rbx+rax*8], rsi

                     loc_fab8:
000000000000fab8         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+853
000000000000fabc         cmp        rcx, 0x100
000000000000fac3         jne        loc_faa0

000000000000fac5         jmp        loc_f834

                     loc_faca:
000000000000faca         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+186
000000000000facc         nop        dword [rax]

                     loc_fad0:
000000000000fad0         test       byte [rdx+rax*2], 0x2                       ; CODE XREF=build_charclass.isra.29+940
000000000000fad4         je         loc_faf2

000000000000fad6         movzx      ecx, byte [rbp+rax]
000000000000fadb         mov        r11, rdi
000000000000fade         mov        rsi, rcx
000000000000fae1         and        ecx, 0x3f
000000000000fae4         shr        rsi, 0x3
000000000000fae8         shl        r11, cl
000000000000faeb         and        esi, 0x18
000000000000faee         or         qword [rbx+rsi], r11

                     loc_faf2:
000000000000faf2         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+900
000000000000faf6         cmp        rax, 0x100
000000000000fafc         jne        loc_fad0

000000000000fafe         jmp        loc_f834

                     loc_fb03:
000000000000fb03         lea        rdi, qword [aPrint]                         ; "print", CODE XREF=build_charclass.isra.29+680
000000000000fb0a         mov        ecx, 0x6
000000000000fb0f         mov        rsi, r12
000000000000fb12         rep  cmpsb byte [rsi], byte [rdi]
000000000000fb14         seta       al
000000000000fb17         sbb        al, 0x0
000000000000fb19         test       al, al
000000000000fb1b         jne        loc_fb9c

000000000000fb1d         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000fb22         xor        ecx, ecx
000000000000fb24         test       rbp, rbp
000000000000fb27         mov        rdx, qword [rax]
000000000000fb2a         mov        edi, 0x1
000000000000fb2f         jne        loc_ff27

000000000000fb35         nop        dword [rax]

                     loc_fb38:
000000000000fb38         test       byte [rdx+rcx*2+1], 0x40                    ; CODE XREF=build_charclass.isra.29+1035
000000000000fb3d         je         loc_fb50

000000000000fb3f         mov        rax, rcx
000000000000fb42         mov        rsi, rdi
000000000000fb45         sar        rax, 0x6
000000000000fb49         shl        rsi, cl
000000000000fb4c         or         qword [rbx+rax*8], rsi

                     loc_fb50:
000000000000fb50         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1005
000000000000fb54         cmp        rcx, 0x100
000000000000fb5b         jne        loc_fb38

000000000000fb5d         jmp        loc_f834

                     loc_fb62:
000000000000fb62         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+572
000000000000fb64         nop        dword [rax]

                     loc_fb68:
000000000000fb68         test       byte [rdx+rax*2+1], 0x2                     ; CODE XREF=build_charclass.isra.29+1093
000000000000fb6d         je         loc_fb8b

000000000000fb6f         movzx      ecx, byte [rbp+rax]
000000000000fb74         mov        r14, rdi
000000000000fb77         mov        rsi, rcx
000000000000fb7a         and        ecx, 0x3f
000000000000fb7d         shr        rsi, 0x3
000000000000fb81         shl        r14, cl
000000000000fb84         and        esi, 0x18
000000000000fb87         or         qword [rbx+rsi], r14

                     loc_fb8b:
000000000000fb8b         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1053
000000000000fb8f         cmp        rax, 0x100
000000000000fb95         jne        loc_fb68

000000000000fb97         jmp        loc_f834

                     loc_fb9c:
000000000000fb9c         lea        rdi, qword [aUpper]                         ; "upper", CODE XREF=build_charclass.isra.29+971
000000000000fba3         mov        ecx, 0x6
000000000000fba8         mov        rsi, r12
000000000000fbab         rep  cmpsb byte [rsi], byte [rdi]
000000000000fbad         seta       al
000000000000fbb0         sbb        al, 0x0
000000000000fbb2         test       al, al
000000000000fbb4         jne        loc_fc02

000000000000fbb6         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000fbbb         xor        ecx, ecx
000000000000fbbd         test       rbp, rbp
000000000000fbc0         mov        rax, qword [rax]
000000000000fbc3         mov        edi, 0x1
000000000000fbc8         jne        loc_fef0

                     loc_fbce:
000000000000fbce         test       byte [rax+rcx*2+1], 0x1                     ; CODE XREF=build_charclass.isra.29+1185
000000000000fbd3         je         loc_fbe6

000000000000fbd5         mov        rdx, rcx
000000000000fbd8         mov        rsi, rdi
000000000000fbdb         sar        rdx, 0x6
000000000000fbdf         shl        rsi, cl
000000000000fbe2         or         qword [rbx+rdx*8], rsi

                     loc_fbe6:
000000000000fbe6         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1155
000000000000fbea         cmp        rcx, 0x100
000000000000fbf1         jne        loc_fbce

000000000000fbf3         jmp        loc_f834

                     loc_fbf8:
000000000000fbf8         mov        eax, 0xc                                    ; CODE XREF=build_charclass.isra.29+394
000000000000fbfd         jmp        loc_f836

                     loc_fc02:
000000000000fc02         lea        rdi, qword [aBlank]                         ; "blank", CODE XREF=build_charclass.isra.29+1124
000000000000fc09         mov        ecx, 0x6
000000000000fc0e         mov        rsi, r12
000000000000fc11         rep  cmpsb byte [rsi], byte [rdi]
000000000000fc13         seta       al
000000000000fc16         sbb        al, 0x0
000000000000fc18         test       al, al
000000000000fc1a         jne        loc_fd0e

000000000000fc20         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000fc25         xor        ecx, ecx
000000000000fc27         test       rbp, rbp
000000000000fc2a         mov        rdx, qword [rax]
000000000000fc2d         mov        esi, 0x1
000000000000fc32         jne        loc_fcd4

                     loc_fc38:
000000000000fc38         test       byte [rdx+rcx*2], 0x1                       ; CODE XREF=build_charclass.isra.29+1290
000000000000fc3c         je         loc_fc4f

000000000000fc3e         mov        rax, rcx
000000000000fc41         mov        rdi, rsi
000000000000fc44         sar        rax, 0x6
000000000000fc48         shl        rdi, cl
000000000000fc4b         or         qword [rbx+rax*8], rdi

                     loc_fc4f:
000000000000fc4f         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1260
000000000000fc53         cmp        rcx, 0x100
000000000000fc5a         jne        loc_fc38

000000000000fc5c         jmp        loc_f834
000000000000fc61         align      8

                     loc_fc68:
000000000000fc68         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+837

                     loc_fc6a:
000000000000fc6a         test       byte [rdx+rax*2+1], 0x4                     ; CODE XREF=build_charclass.isra.29+1351
000000000000fc6f         je         loc_fc8d

000000000000fc71         movzx      ecx, byte [rbp+rax]
000000000000fc76         mov        r9, rdi
000000000000fc79         mov        rsi, rcx
000000000000fc7c         and        ecx, 0x3f
000000000000fc7f         shr        rsi, 0x3
000000000000fc83         shl        r9, cl
000000000000fc86         and        esi, 0x18
000000000000fc89         or         qword [rbx+rsi], r9

                     loc_fc8d:
000000000000fc8d         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1311
000000000000fc91         cmp        rax, 0x100
000000000000fc97         jne        loc_fc6a

000000000000fc99         jmp        loc_f834

                     loc_fc9e:
000000000000fc9e         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+498

                     loc_fca0:
000000000000fca0         test       byte [rdx+rax*2+1], 0x20                    ; CODE XREF=build_charclass.isra.29+1405
000000000000fca5         je         loc_fcc3

000000000000fca7         movzx      ecx, byte [rbp+rax]
000000000000fcac         mov        r9, rdi
000000000000fcaf         mov        rsi, rcx
000000000000fcb2         and        ecx, 0x3f
000000000000fcb5         shr        rsi, 0x3
000000000000fcb9         shl        r9, cl
000000000000fcbc         and        esi, 0x18
000000000000fcbf         or         qword [rbx+rsi], r9

                     loc_fcc3:
000000000000fcc3         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1365
000000000000fcc7         cmp        rax, 0x100
000000000000fccd         jne        loc_fca0

000000000000fccf         jmp        loc_f834

                     loc_fcd4:
000000000000fcd4         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1250
000000000000fcd6         mov        edi, 0x1

                     loc_fcdb:
000000000000fcdb         test       byte [rdx+rax*2], 0x1                       ; CODE XREF=build_charclass.isra.29+1463
000000000000fcdf         je         loc_fcfd

000000000000fce1         movzx      ecx, byte [rbp+rax]
000000000000fce6         mov        r14, rdi
000000000000fce9         mov        rsi, rcx
000000000000fcec         and        ecx, 0x3f
000000000000fcef         shr        rsi, 0x3
000000000000fcf3         shl        r14, cl
000000000000fcf6         and        esi, 0x18
000000000000fcf9         or         qword [rbx+rsi], r14

                     loc_fcfd:
000000000000fcfd         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1423
000000000000fd01         cmp        rax, 0x100
000000000000fd07         jne        loc_fcdb

000000000000fd09         jmp        loc_f834

                     loc_fd0e:
000000000000fd0e         lea        rsi, qword [aGraph]                         ; argument "__s2" for method j_strcmp, "graph", CODE XREF=build_charclass.isra.29+1226
000000000000fd15         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
000000000000fd18         call       j_strcmp                                    ; strcmp
000000000000fd1d         test       eax, eax
000000000000fd1f         jne        loc_fd9a

000000000000fd21         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000fd26         xor        ecx, ecx
000000000000fd28         test       rbp, rbp
000000000000fd2b         mov        rsi, qword [rax]
000000000000fd2e         mov        edx, 0x1
000000000000fd33         jne        loc_fd5f

                     loc_fd35:
000000000000fd35         cmp        word [rsi+rcx*2], 0x0                       ; CODE XREF=build_charclass.isra.29+1544
000000000000fd3a         jns        loc_fd4d

000000000000fd3c         mov        rax, rcx
000000000000fd3f         mov        rdi, rdx
000000000000fd42         sar        rax, 0x6
000000000000fd46         shl        rdi, cl
000000000000fd49         or         qword [rbx+rax*8], rdi

                     loc_fd4d:
000000000000fd4d         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1514
000000000000fd51         cmp        rcx, 0x100
000000000000fd58         jne        loc_fd35

000000000000fd5a         jmp        loc_f834

                     loc_fd5f:
000000000000fd5f         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1507
000000000000fd61         mov        edi, 0x1

                     loc_fd66:
000000000000fd66         cmp        word [rsi+rax*2], 0x0                       ; CODE XREF=build_charclass.isra.29+1603
000000000000fd6b         jns        loc_fd89

000000000000fd6d         movzx      ecx, byte [rbp+rax]
000000000000fd72         mov        r9, rdi
000000000000fd75         mov        rdx, rcx
000000000000fd78         and        ecx, 0x3f
000000000000fd7b         shr        rdx, 0x3
000000000000fd7f         shl        r9, cl
000000000000fd82         and        edx, 0x18
000000000000fd85         or         qword [rbx+rdx], r9

                     loc_fd89:
000000000000fd89         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1563
000000000000fd8d         cmp        rax, 0x100
000000000000fd93         jne        loc_fd66

000000000000fd95         jmp        loc_f834

                     loc_fd9a:
000000000000fd9a         lea        rsi, qword [aPunct]                         ; argument "__s2" for method j_strcmp, "punct", CODE XREF=build_charclass.isra.29+1487
000000000000fda1         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
000000000000fda4         call       j_strcmp                                    ; strcmp
000000000000fda9         test       eax, eax
000000000000fdab         jne        loc_fe24

000000000000fdad         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000fdb2         xor        ecx, ecx
000000000000fdb4         test       rbp, rbp
000000000000fdb7         mov        rsi, qword [rax]
000000000000fdba         mov        edx, 0x1
000000000000fdbf         jne        loc_fdea

                     loc_fdc1:
000000000000fdc1         test       byte [rsi+rcx*2], 0x4                       ; CODE XREF=build_charclass.isra.29+1683
000000000000fdc5         je         loc_fdd8

000000000000fdc7         mov        rax, rcx
000000000000fdca         mov        rdi, rdx
000000000000fdcd         sar        rax, 0x6
000000000000fdd1         shl        rdi, cl
000000000000fdd4         or         qword [rbx+rax*8], rdi

                     loc_fdd8:
000000000000fdd8         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1653
000000000000fddc         cmp        rcx, 0x100
000000000000fde3         jne        loc_fdc1

000000000000fde5         jmp        loc_f834

                     loc_fdea:
000000000000fdea         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1647
000000000000fdec         mov        edi, 0x1

                     loc_fdf1:
000000000000fdf1         test       byte [rsi+rax*2], 0x4                       ; CODE XREF=build_charclass.isra.29+1741
000000000000fdf5         je         loc_fe13

000000000000fdf7         movzx      ecx, byte [rbp+rax]
000000000000fdfc         mov        r14, rdi
000000000000fdff         mov        rdx, rcx
000000000000fe02         and        ecx, 0x3f
000000000000fe05         shr        rdx, 0x3
000000000000fe09         shl        r14, cl
000000000000fe0c         and        edx, 0x18
000000000000fe0f         or         qword [rbx+rdx], r14

                     loc_fe13:
000000000000fe13         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1701
000000000000fe17         cmp        rax, 0x100
000000000000fe1d         jne        loc_fdf1

000000000000fe1f         jmp        loc_f834

                     loc_fe24:
000000000000fe24         lea        rsi, qword [aPunct+6]                       ; argument "__s2" for method j_strcmp, 0x1c77d, CODE XREF=build_charclass.isra.29+1627
000000000000fe2b         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
000000000000fe2e         call       j_strcmp                                    ; strcmp
000000000000fe33         test       eax, eax
000000000000fe35         jne        loc_feb0

000000000000fe37         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000fe3c         xor        ecx, ecx
000000000000fe3e         test       rbp, rbp
000000000000fe41         mov        rsi, qword [rax]
000000000000fe44         mov        edx, 0x1
000000000000fe49         jne        loc_fe75

                     loc_fe4b:
000000000000fe4b         test       byte [rsi+rcx*2+1], 0x10                    ; CODE XREF=build_charclass.isra.29+1822
000000000000fe50         je         loc_fe63

000000000000fe52         mov        rax, rcx
000000000000fe55         mov        rdi, rdx
000000000000fe58         sar        rax, 0x6
000000000000fe5c         shl        rdi, cl
000000000000fe5f         or         qword [rbx+rax*8], rdi

                     loc_fe63:
000000000000fe63         add        rcx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1792
000000000000fe67         cmp        rcx, 0x100
000000000000fe6e         jne        loc_fe4b

000000000000fe70         jmp        loc_f834

                     loc_fe75:
000000000000fe75         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+1785
000000000000fe77         mov        edi, 0x1

                     loc_fe7c:
000000000000fe7c         test       byte [rsi+rax*2+1], 0x10                    ; CODE XREF=build_charclass.isra.29+1881
000000000000fe81         je         loc_fe9f

000000000000fe83         movzx      ecx, byte [rbp+rax]
000000000000fe88         mov        r9, rdi
000000000000fe8b         mov        rdx, rcx
000000000000fe8e         and        ecx, 0x3f
000000000000fe91         shr        rdx, 0x3
000000000000fe95         shl        r9, cl
000000000000fe98         and        edx, 0x18
000000000000fe9b         or         qword [rbx+rdx], r9

                     loc_fe9f:
000000000000fe9f         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1841
000000000000fea3         cmp        rax, 0x100
000000000000fea9         jne        loc_fe7c

000000000000feab         jmp        loc_f834

                     loc_feb0:
000000000000feb0         mov        eax, 0x4                                    ; CODE XREF=build_charclass.isra.29+1765
000000000000feb5         jmp        loc_f836

                     loc_feba:
000000000000feba         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+704

                     loc_febc:
000000000000febc         test       byte [rdx+rax*2+1], 0x8                     ; CODE XREF=build_charclass.isra.29+1945
000000000000fec1         je         loc_fedf

000000000000fec3         movzx      ecx, byte [rbp+rax]
000000000000fec8         mov        r14, rdi
000000000000fecb         mov        rsi, rcx
000000000000fece         and        ecx, 0x3f
000000000000fed1         shr        rsi, 0x3
000000000000fed5         shl        r14, cl
000000000000fed8         and        esi, 0x18
000000000000fedb         or         qword [rbx+rsi], r14

                     loc_fedf:
000000000000fedf         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+1905
000000000000fee3         cmp        rax, 0x100
000000000000fee9         jne        loc_febc

000000000000feeb         jmp        loc_f834

                     loc_fef0:
000000000000fef0         xor        edx, edx                                    ; CODE XREF=build_charclass.isra.29+1144

                     loc_fef2:
000000000000fef2         test       byte [rax+rdx*2+1], 0x1                     ; CODE XREF=build_charclass.isra.29+2000
000000000000fef7         je         loc_ff15

000000000000fef9         movzx      ecx, byte [rbp+rdx]
000000000000fefe         mov        r9, rdi
000000000000ff01         mov        rsi, rcx
000000000000ff04         and        ecx, 0x3f
000000000000ff07         shr        rsi, 0x3
000000000000ff0b         shl        r9, cl
000000000000ff0e         and        esi, 0x18
000000000000ff11         or         qword [rbx+rsi], r9

                     loc_ff15:
000000000000ff15         add        rdx, 0x1                                    ; CODE XREF=build_charclass.isra.29+1959
000000000000ff19         cmp        rdx, 0x100
000000000000ff20         jne        loc_fef2

000000000000ff22         jmp        loc_f834

                     loc_ff27:
000000000000ff27         xor        eax, eax                                    ; CODE XREF=build_charclass.isra.29+991

                     loc_ff29:
000000000000ff29         test       byte [rdx+rax*2+1], 0x40                    ; CODE XREF=build_charclass.isra.29+2054
000000000000ff2e         je         loc_ff4c

000000000000ff30         movzx      ecx, byte [rbp+rax]
000000000000ff35         mov        r14, rdi
000000000000ff38         mov        rsi, rcx
000000000000ff3b         and        ecx, 0x3f
000000000000ff3e         shr        rsi, 0x3
000000000000ff42         shl        r14, cl
000000000000ff45         and        esi, 0x18
000000000000ff48         or         qword [rbx+rsi], r14

                     loc_ff4c:
000000000000ff4c         add        rax, 0x1                                    ; CODE XREF=build_charclass.isra.29+2014
000000000000ff50         cmp        rax, 0x100
000000000000ff56         jne        loc_ff29

000000000000ff58         jmp        loc_f834
000000000000ff5d         align      32                                          ; End of unwind block (FDE at 0x1f388)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int8_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136


                     build_charclass_op:
000000000000ff60         push       r15                                         ; Begin of unwind block (FDE at 0x1f3cc), CODE XREF=sub_15b10+402
000000000000ff62         push       r14
000000000000ff64         mov        r14, rdx
000000000000ff67         push       r13
000000000000ff69         push       r12
000000000000ff6b         mov        r13, rcx
000000000000ff6e         push       rbp
000000000000ff6f         push       rbx
000000000000ff70         mov        rbp, rdi
000000000000ff73         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
000000000000ff78         mov        r12d, r8d
000000000000ff7b         sub        rsp, 0x58
000000000000ff7f         mov        qword [rsp+0x88+var_88], rsi
000000000000ff83         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
000000000000ff88         mov        qword [rsp+0x88+var_80], r9
000000000000ff8d         mov        rax, qword [fs:0x28]
000000000000ff96         mov        qword [rsp+0x88+var_40], rax
000000000000ff9b         xor        eax, eax
000000000000ff9d         mov        qword [rsp+0x88+var_70], 0x0
000000000000ffa6         call       j_calloc                                    ; calloc
000000000000ffab         test       rax, rax
000000000000ffae         je         loc_10170

000000000000ffb4         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
000000000000ffb9         mov        edi, 0x50                                   ; argument "__nmemb" for method j_calloc
000000000000ffbe         mov        rbx, rax
000000000000ffc1         call       j_calloc                                    ; calloc
000000000000ffc6         test       rax, rax
000000000000ffc9         mov        r15, rax
000000000000ffcc         je         loc_10180

000000000000ffd2         movzx      eax, byte [rax+0x20]
000000000000ffd6         sub        rsp, 0x8
000000000000ffda         mov        edx, r12d
000000000000ffdd         push       0x0
000000000000ffdf         and        edx, 0x1
000000000000ffe2         mov        rdi, qword [rsp+0x98+var_88]
000000000000ffe7         lea        rcx, qword [r15+0x48]
000000000000ffeb         mov        r9, r14
000000000000ffee         mov        rsi, rbx
000000000000fff1         lea        r8, qword [rsp+0x98+var_70]
000000000000fff6         and        eax, 0xfffffffe
000000000000fff9         or         eax, edx
000000000000fffb         lea        rdx, qword [r15+0x18]
000000000000ffff         mov        byte [r15+0x20], al
0000000000010003         call       build_charclass.isra.29                     ; build_charclass.isra.29
0000000000010008         test       eax, eax
000000000001000a         pop        rdx
000000000001000b         pop        rcx
000000000001000c         jne        loc_101a0

0000000000010012         movsx      rcx, byte [r13]
0000000000010017         mov        esi, 0x1
000000000001001c         test       cl, cl
000000000001001e         je         loc_1005a

                     loc_10020:
0000000000010020         lea        rax, qword [rcx+0x3f]                       ; CODE XREF=build_charclass_op+248
0000000000010024         test       rcx, rcx
0000000000010027         mov        rdx, rcx
000000000001002a         cmovns     rax, rcx
000000000001002e         sar        rdx, 0x3f
0000000000010032         add        r13, 0x1
0000000000010036         shr        rdx, 0x3a
000000000001003a         sar        rax, 0x6
000000000001003e         add        rcx, rdx
0000000000010041         and        ecx, 0x3f
0000000000010044         sub        rcx, rdx
0000000000010047         mov        rdx, rsi
000000000001004a         shl        rdx, cl
000000000001004d         movsx      rcx, byte [r13]
0000000000010052         or         qword [rbx+rax*8], rdx
0000000000010056         test       cl, cl
0000000000010058         jne        loc_10020

                     loc_1005a:
000000000001005a         test       r12b, r12b                                  ; CODE XREF=build_charclass_op+190
000000000001005d         je         loc_10072

000000000001005f         lea        rdx, qword [rbx+0x20]
0000000000010063         mov        rax, rbx

                     loc_10066:
0000000000010066         not        qword [rax]                                 ; CODE XREF=build_charclass_op+272
0000000000010069         add        rax, 0x8
000000000001006d         cmp        rdx, rax
0000000000010070         jne        loc_10066

                     loc_10072:
0000000000010072         cmp        dword [rbp+0xb4], 0x1                       ; CODE XREF=build_charclass_op+253
0000000000010079         jle        loc_10093

000000000001007b         mov        rcx, qword [rbp+0x78]
000000000001007f         xor        eax, eax

                     loc_10081:
0000000000010081         mov        rdx, qword [rcx+rax]                        ; CODE XREF=build_charclass_op+305
0000000000010085         and        qword [rbx+rax], rdx
0000000000010089         add        rax, 0x8
000000000001008d         cmp        rax, 0x20
0000000000010091         jne        loc_10081

                     loc_10093:
0000000000010093         lea        r9, qword [rsp+0x88+var_68]                 ; CODE XREF=build_charclass_op+281
0000000000010098         lea        r12, qword [rbp+0x70]
000000000001009c         lea        r13, qword [rbp+0x80]
00000000000100a3         xor        ecx, ecx
00000000000100a5         xor        edx, edx
00000000000100a7         mov        byte [rsp+0x88+var_60], 0x3
00000000000100ac         mov        r8, r9
00000000000100af         mov        rsi, r13
00000000000100b2         mov        rdi, r12
00000000000100b5         mov        qword [rsp+0x88+var_68], rbx
00000000000100ba         mov        qword [rsp+0x88+var_88], r9
00000000000100be         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000100c3         test       rax, rax
00000000000100c6         mov        r14, rax
00000000000100c9         je         loc_10160

00000000000100cf         cmp        dword [rbp+0xb4], 0x1
00000000000100d6         jle        loc_10150

00000000000100d8         or         byte [rbp+0xb0], 0x2
00000000000100df         mov        r9, qword [rsp+0x88+var_88]
00000000000100e3         xor        ecx, ecx
00000000000100e5         xor        edx, edx
00000000000100e7         mov        rsi, r13
00000000000100ea         mov        rdi, r12
00000000000100ed         mov        byte [rsp+0x88+var_60], 0x6
00000000000100f2         mov        qword [rsp+0x88+var_68], r15
00000000000100f7         mov        r8, r9
00000000000100fa         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000100ff         test       rax, rax
0000000000010102         je         loc_10160

0000000000010104         lea        r8, qword [rsp+0x88+var_58]
0000000000010109         mov        rdx, r14
000000000001010c         mov        rcx, rax
000000000001010f         mov        rsi, r13
0000000000010112         mov        rdi, r12
0000000000010115         mov        byte [rsp+0x88+var_50], 0xa
000000000001011a         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001011f         mov        r14, rax

                     loc_10122:
0000000000010122         mov        rdi, qword [rsp+0x88+var_40]                ; CODE XREF=build_charclass_op+504, build_charclass_op+542, build_charclass_op+566, build_charclass_op+608
0000000000010127         xor        rdi, qword [fs:0x28]
0000000000010130         mov        rax, r14
0000000000010133         jne        loc_101c5

0000000000010139         add        rsp, 0x58
000000000001013d         pop        rbx
000000000001013e         pop        rbp
000000000001013f         pop        r12
0000000000010141         pop        r13
0000000000010143         pop        r14
0000000000010145         pop        r15
0000000000010147         ret
                        ; endp
0000000000010148         align      16

                     loc_10150:
0000000000010150         mov        rdi, r15                                    ; CODE XREF=build_charclass_op+374
0000000000010153         call       free_charset                                ; free_charset
0000000000010158         jmp        loc_10122
000000000001015a         align      32

                     loc_10160:
0000000000010160         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=build_charclass_op+361, build_charclass_op+418
0000000000010163         call       j_free                                      ; free
0000000000010168         mov        rdi, r15
000000000001016b         call       free_charset                                ; free_charset

                     loc_10170:
0000000000010170         mov        rax, qword [rsp+0x88+var_80]                ; CODE XREF=build_charclass_op+78
0000000000010175         xor        r14d, r14d
0000000000010178         mov        dword [rax], 0xc
000000000001017e         jmp        loc_10122

                     loc_10180:
0000000000010180         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=build_charclass_op+108
0000000000010183         xor        r14d, r14d
0000000000010186         call       j_free                                      ; free
000000000001018b         mov        rax, qword [rsp+0x88+var_80]
0000000000010190         mov        dword [rax], 0xc
0000000000010196         jmp        loc_10122
0000000000010198         align      32

                     loc_101a0:
00000000000101a0         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=build_charclass_op+172
00000000000101a3         mov        dword [rsp+0x88+var_88], eax
00000000000101a6         xor        r14d, r14d
00000000000101a9         call       j_free                                      ; free
00000000000101ae         mov        rdi, r15
00000000000101b1         call       free_charset                                ; free_charset
00000000000101b6         mov        rdi, qword [rsp+0x88+var_80]
00000000000101bb         mov        eax, dword [rsp+0x88+var_88]
00000000000101be         mov        dword [rdi], eax
00000000000101c0         jmp        loc_10122

                     loc_101c5:
00000000000101c5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=build_charclass_op+467
                        ; endp
00000000000101ca         align      16                                          ; End of unwind block (FDE at 0x1f3cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_148: int8_t, -328
        ;    var_150: int8_t, -336
        ;    var_154: int32_t, -340
        ;    var_160: int64_t, -352
        ;    var_168: int64_t, -360
        ;    var_170: int64_t, -368
        ;    var_178: int64_t, -376
        ;    var_180: int64_t, -384
        ;    var_188: int64_t, -392
        ;    var_190: int64_t, -400
        ;    var_198: int64_t, -408
        ;    var_1A0: int64_t, -416
        ;    var_1A8: int64_t, -424


                     re_compile_fastmap_iter.isra.30:
00000000000101d0         push       r15                                         ; Begin of unwind block (FDE at 0x1f42c), CODE XREF=rpl_re_compile_fastmap+80, rpl_re_compile_fastmap+111, rpl_re_compile_fastmap+145, rpl_re_compile_fastmap+179
00000000000101d2         push       r14
00000000000101d4         mov        rax, rdi
00000000000101d7         push       r13
00000000000101d9         push       r12
00000000000101db         push       rbp
00000000000101dc         push       rbx
00000000000101dd         xor        ebx, ebx
00000000000101df         mov        rbp, rcx
00000000000101e2         sub        rsp, 0x178
00000000000101e9         mov        rax, qword [rax]
00000000000101ec         mov        qword [rsp+0x1a8+var_178], rdi
00000000000101f1         mov        qword [rsp+0x1a8+var_188], rsi
00000000000101f6         mov        rdi, qword [fs:0x28]
00000000000101ff         mov        qword [rsp+0x1a8+var_40], rdi
0000000000010207         xor        edi, edi
0000000000010209         cmp        dword [rax+0xb4], 0x1
0000000000010210         mov        qword [rsp+0x1a8+var_180], rdx
0000000000010215         mov        qword [rsp+0x1a8+var_1A0], rax
000000000001021a         jne        loc_10233

000000000001021c         mov        rax, qword [rsp+0x1a8+var_178]
0000000000010221         mov        rax, qword [rax+0x18]
0000000000010225         mov        rbx, rax
0000000000010228         mov        qword [rsp+0x1a8+var_1A8], rax
000000000001022c         shr        rbx, 0x16
0000000000010230         and        ebx, 0x1

                     loc_10233:
0000000000010233         mov        rax, qword [rsp+0x1a8+var_188]              ; CODE XREF=re_compile_fastmap_iter.isra.30+74
0000000000010238         cmp        qword [rax], 0x0
000000000001023c         jle        loc_1064d

0000000000010242         lea        rax, qword [rsp+0x1a8+var_150]
0000000000010247         mov        qword [rsp+0x1a8+var_1A8], 0x0
000000000001024f         mov        qword [rsp+0x1a8+var_168], rax
0000000000010254         lea        rax, qword [rsp+0x1a8+var_154]
0000000000010259         mov        qword [rsp+0x1a8+var_160], rax
000000000001025e         lea        rax, qword [rsp+0x1a8+var_148]
0000000000010263         mov        qword [rsp+0x1a8+var_170], rax
0000000000010268         jmp        loc_102ae
000000000001026a         align      16

                     loc_10270:
0000000000010270         cmp        eax, 0x3                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+271
0000000000010273         je         loc_10566

0000000000010279         cmp        eax, 0x6
000000000001027c         je         loc_10408

0000000000010282         and        edx, 0xfffffffd
0000000000010285         cmp        dl, 0x5
0000000000010288         je         loc_10684

000000000001028e         cmp        eax, 0x2
0000000000010291         je         loc_105e4

                     loc_10297:
0000000000010297         mov        rdi, qword [rsp+0x1a8+var_188]              ; CODE XREF=re_compile_fastmap_iter.isra.30+313, re_compile_fastmap_iter.isra.30+327, re_compile_fastmap_iter.isra.30+507, re_compile_fastmap_iter.isra.30+543, re_compile_fastmap_iter.isra.30+559, re_compile_fastmap_iter.isra.30+630, re_compile_fastmap_iter.isra.30+842, re_compile_fastmap_iter.isra.30+913, re_compile_fastmap_iter.isra.30+1028
000000000001029c         add        qword [rsp+0x1a8+var_1A8], 0x1
00000000000102a1         mov        rax, qword [rsp+0x1a8+var_1A8]
00000000000102a5         cmp        rax, qword [rdi]
00000000000102a8         jge        loc_1064d

                     loc_102ae:
00000000000102ae         mov        rax, qword [rsp+0x1a8+var_180]              ; CODE XREF=re_compile_fastmap_iter.isra.30+152
00000000000102b3         mov        rdi, qword [rsp+0x1a8+var_1A8]
00000000000102b7         mov        rax, qword [rax]
00000000000102ba         mov        r12, qword [rax+rdi*8]
00000000000102be         mov        rax, qword [rsp+0x1a8+var_1A0]
00000000000102c3         mov        rcx, qword [rax]
00000000000102c6         mov        rax, r12
00000000000102c9         shl        rax, 0x4
00000000000102cd         mov        qword [rsp+0x1a8+var_198], rax
00000000000102d2         lea        rsi, qword [rcx+rax]
00000000000102d6         movzx      eax, byte [rsi+8]
00000000000102da         cmp        eax, 0x1
00000000000102dd         mov        edx, eax
00000000000102df         jne        loc_10270

00000000000102e1         movzx      r13d, byte [rsi]
00000000000102e5         test       ebx, ebx
00000000000102e7         mov        byte [rbp+r13], 0x1
00000000000102ed         je         loc_10300

00000000000102ef         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
00000000000102f4         mov        rax, qword [rax]
00000000000102f7         movsxd     rax, dword [rax+r13*4]
00000000000102fb         mov        byte [rbp+rax], 0x1

                     loc_10300:
0000000000010300         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+285
0000000000010305         test       byte [rax+0x1a], 0x40
0000000000010309         je         loc_10297

000000000001030b         mov        rsi, qword [rsp+0x1a8+var_1A0]
0000000000010310         cmp        dword [rsi+0xb4], 0x1
0000000000010317         jle        loc_10297

000000000001031d         mov        rax, qword [rsi]
0000000000010320         mov        rdi, qword [rsp+0x1a8+var_198]
0000000000010325         movzx      edx, byte [rax+rdi]
0000000000010329         mov        byte [rsp+0x1a8+var_148], dl
000000000001032d         lea        rdx, qword [r12+1]
0000000000010332         cmp        qword [rsi+0x10], rdx
0000000000010336         jbe        loc_10676

000000000001033c         lea        rcx, qword [rax+rdi+0x10]
0000000000010341         mov        eax, dword [rcx+8]
0000000000010344         and        eax, 0x2000ff
0000000000010349         cmp        eax, 0x200001
000000000001034e         jne        loc_10676

0000000000010354         add        rdi, 0x20
0000000000010358         mov        r13, rdi
000000000001035b         mov        rdi, qword [rsp+0x1a8+var_170]
0000000000010360         lea        rax, qword [rdi+1]
0000000000010364         jmp        loc_1038b
0000000000010366         align      16

                     loc_10370:
0000000000010370         mov        rcx, qword [rsi]                            ; CODE XREF=re_compile_fastmap_iter.isra.30+466
0000000000010373         add        rcx, r13
0000000000010376         add        r13, 0x10
000000000001037a         mov        edx, dword [rcx+8]
000000000001037d         and        edx, 0x2000ff
0000000000010383         cmp        edx, 0x200001
0000000000010389         jne        loc_103a4

                     loc_1038b:
000000000001038b         movzx      edx, byte [rcx]                             ; CODE XREF=re_compile_fastmap_iter.isra.30+404
000000000001038e         add        rax, 0x1
0000000000010392         mov        byte [rax-1], dl
0000000000010395         mov        rdx, rax
0000000000010398         sub        rdx, rdi
000000000001039b         add        rdx, r12
000000000001039e         cmp        qword [rsi+0x10], rdx
00000000000103a2         ja         loc_10370

                     loc_103a4:
00000000000103a4         mov        rsi, qword [rsp+0x1a8+var_170]              ; CODE XREF=re_compile_fastmap_iter.isra.30+441, re_compile_fastmap_iter.isra.30+1199
00000000000103a9         mov        rcx, qword [rsp+0x1a8+var_168]
00000000000103ae         mov        rdi, qword [rsp+0x1a8+var_160]
00000000000103b3         sub        rax, rsi
00000000000103b6         mov        qword [rcx], 0x0
00000000000103bd         mov        r12, rax
00000000000103c0         mov        rdx, rax
00000000000103c3         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000103c8         cmp        r12, rax
00000000000103cb         jne        loc_10297

00000000000103d1         mov        edi, dword [rsp+0x1a8+var_154]              ; argument "__wc" for method j_towlower
00000000000103d5         call       j_towlower                                  ; towlower
00000000000103da         mov        rdx, qword [rsp+0x1a8+var_168]              ; argument "__ps" for method j_wcrtomb
00000000000103df         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
00000000000103e4         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
00000000000103e6         call       j_wcrtomb                                   ; wcrtomb
00000000000103eb         cmp        rax, 0xffffffffffffffff
00000000000103ef         je         loc_10297

00000000000103f5         movzx      eax, byte [rsp+0x1a8+var_148]
00000000000103fa         mov        byte [rbp+rax], 0x1
00000000000103ff         jmp        loc_10297
0000000000010404         align      8

                     loc_10408:
0000000000010408         mov        rax, qword [rsp+0x1a8+var_1A0]              ; CODE XREF=re_compile_fastmap_iter.isra.30+172
000000000001040d         mov        r12, qword [rsi]
0000000000010410         cmp        dword [rax+0xb4], 0x1
0000000000010417         jle        loc_1043d

0000000000010419         cmp        qword [r12+0x48], 0x0
000000000001041f         jne        loc_1051f

0000000000010425         test       byte [r12+0x20], 0x1
000000000001042b         jne        loc_1051f

0000000000010431         cmp        qword [r12+0x40], 0x0
0000000000010437         jne        loc_1051f

                     loc_1043d:
000000000001043d         xor        r13d, r13d                                  ; CODE XREF=re_compile_fastmap_iter.isra.30+583
0000000000010440         cmp        qword [r12+0x28], 0x0
0000000000010446         jle        loc_10297

000000000001044c         mov        r15, r12
000000000001044f         mov        r14, qword [rsp+0x1a8+var_168]
0000000000010454         mov        r12, rbp
0000000000010457         mov        rbp, r13
000000000001045a         mov        r13d, ebx
000000000001045d         jmp        loc_1046d

                     loc_1045f:
000000000001045f         add        rbp, 0x1                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+760, re_compile_fastmap_iter.isra.30+774, re_compile_fastmap_iter.isra.30+806
0000000000010463         cmp        rbp, qword [r15+0x28]
0000000000010467         jge        loc_10514

                     loc_1046d:
000000000001046d         mov        qword [r14], 0x0                            ; CODE XREF=re_compile_fastmap_iter.isra.30+653, re_compile_fastmap_iter.isra.30+830
0000000000010474         mov        rax, qword [r15]
0000000000010477         mov        rdx, r14                                    ; argument "__ps" for method j_wcrtomb
000000000001047a         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
000000000001047f         lea        rbx, qword [rbp*4]
0000000000010487         mov        esi, dword [rax+rbp*4]                      ; argument "__wc" for method j_wcrtomb
000000000001048a         call       j_wcrtomb                                   ; wcrtomb
000000000001048f         cmp        rax, 0xffffffffffffffff
0000000000010493         je         loc_104bf

0000000000010495         movzx      edx, byte [rsp+0x1a8+var_148]
000000000001049a         test       r13d, r13d
000000000001049d         mov        byte [r12+rdx], 0x1
00000000000104a2         mov        qword [rsp+0x1a8+var_198], rdx
00000000000104a7         je         loc_104bf

00000000000104a9         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
00000000000104ae         mov        rdx, qword [rsp+0x1a8+var_198]
00000000000104b3         mov        rax, qword [rax]
00000000000104b6         movsxd     rax, dword [rax+rdx*4]
00000000000104ba         mov        byte [r12+rax], 0x1

                     loc_104bf:
00000000000104bf         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+707, re_compile_fastmap_iter.isra.30+727
00000000000104c4         test       byte [rax+0x1a], 0x40
00000000000104c8         je         loc_1045f

00000000000104ca         mov        rax, qword [rsp+0x1a8+var_1A0]
00000000000104cf         cmp        dword [rax+0xb4], 0x1
00000000000104d6         jle        loc_1045f

00000000000104d8         mov        rax, qword [r15]
00000000000104db         mov        edi, dword [rax+rbx]                        ; argument "__wc" for method j_towlower
00000000000104de         call       j_towlower                                  ; towlower
00000000000104e3         mov        rdi, qword [rsp+0x1a8+var_170]              ; argument "__s" for method j_wcrtomb
00000000000104e8         mov        rdx, r14                                    ; argument "__ps" for method j_wcrtomb
00000000000104eb         mov        esi, eax                                    ; argument "__wc" for method j_wcrtomb
00000000000104ed         call       j_wcrtomb                                   ; wcrtomb
00000000000104f2         cmp        rax, 0xffffffffffffffff
00000000000104f6         je         loc_1045f

00000000000104fc         movzx      eax, byte [rsp+0x1a8+var_148]
0000000000010501         add        rbp, 0x1
0000000000010505         mov        byte [r12+rax], 0x1
000000000001050a         cmp        rbp, qword [r15+0x28]
000000000001050e         jl         loc_1046d

                     loc_10514:
0000000000010514         mov        ebx, r13d                                   ; CODE XREF=re_compile_fastmap_iter.isra.30+663
0000000000010517         mov        rbp, r12
000000000001051a         jmp        loc_10297

                     loc_1051f:
000000000001051f         mov        r12, qword [rsp+0x1a8+var_168]              ; CODE XREF=re_compile_fastmap_iter.isra.30+591, re_compile_fastmap_iter.isra.30+603, re_compile_fastmap_iter.isra.30+615
0000000000010524         mov        r13, qword [rsp+0x1a8+var_160]
0000000000010529         mov        byte [rsp+0x1a8+var_154], 0x0
000000000001052e         nop

                     loc_10530:
0000000000010530         xor        edi, edi                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+911
0000000000010532         mov        qword [r12], 0x0
000000000001053a         mov        rcx, r12
000000000001053d         mov        edx, 0x1
0000000000010542         mov        rsi, r13
0000000000010545         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000001054a         cmp        rax, 0xfffffffffffffffe
000000000001054e         jne        loc_1055a

0000000000010550         movzx      eax, byte [rsp+0x1a8+var_154]
0000000000010555         mov        byte [rbp+rax], 0x1

                     loc_1055a:
000000000001055a         add        byte [rsp+0x1a8+var_154], 0x1               ; CODE XREF=re_compile_fastmap_iter.isra.30+894
000000000001055f         jne        loc_10530

0000000000010561         jmp        loc_10297

                     loc_10566:
0000000000010566         mov        r13, rbp                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+163
0000000000010569         xor        r12d, r12d
000000000001056c         mov        qword [rsp+0x1a8+var_190], 0x0

                     loc_10575:
0000000000010575         mov        rax, qword [rsp+0x1a8+var_198]              ; CODE XREF=re_compile_fastmap_iter.isra.30+1042
000000000001057a         mov        rsi, qword [rsp+0x1a8+var_190]
000000000001057f         xor        r14d, r14d
0000000000010582         mov        rax, qword [rcx+rax]
0000000000010586         mov        r15, qword [rax+rsi]
000000000001058a         nop        word [rax+rax]

                     loc_10590:
0000000000010590         bt         r15, r14                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+1005
0000000000010594         jae        loc_105b5

0000000000010596         test       ebx, ebx
0000000000010598         mov        byte [r13+r14], 0x1
000000000001059e         je         loc_105b5

00000000000105a0         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
00000000000105a5         mov        rax, qword [rax]
00000000000105a8         lea        rdx, qword [r12+r14]
00000000000105ac         movsxd     rax, dword [rax+rdx*4]
00000000000105b0         mov        byte [rbp+rax], 0x1

                     loc_105b5:
00000000000105b5         add        r14, 0x1                                    ; CODE XREF=re_compile_fastmap_iter.isra.30+964, re_compile_fastmap_iter.isra.30+974
00000000000105b9         cmp        r14, 0x40
00000000000105bd         jne        loc_10590

00000000000105bf         add        r12, 0x40
00000000000105c3         add        qword [rsp+0x1a8+var_190], 0x8
00000000000105c9         add        r13, 0x40
00000000000105cd         cmp        r12, 0x100
00000000000105d4         je         loc_10297

00000000000105da         mov        rax, qword [rsp+0x1a8+var_1A0]
00000000000105df         mov        rcx, qword [rax]
00000000000105e2         jmp        loc_10575

                     loc_105e4:
00000000000105e4         movdqa     xmm0, xmmword [__re_error_msgid+384]        ; 0x1cf40, CODE XREF=re_compile_fastmap_iter.isra.30+193
00000000000105ec         movups     xmmword [rbp], xmm0
00000000000105f0         movups     xmmword [rbp+0x10], xmm0
00000000000105f4         movups     xmmword [rbp+0x20], xmm0
00000000000105f8         movups     xmmword [rbp+0x30], xmm0
00000000000105fc         movups     xmmword [rbp+0x40], xmm0
0000000000010600         movups     xmmword [rbp+0x50], xmm0
0000000000010604         movups     xmmword [rbp+0x60], xmm0
0000000000010608         movups     xmmword [rbp+0x70], xmm0
000000000001060c         movups     xmmword [rbp+0x80], xmm0
0000000000010613         movups     xmmword [rbp+0x90], xmm0
000000000001061a         movups     xmmword [rbp+0xa0], xmm0
0000000000010621         movups     xmmword [rbp+0xb0], xmm0
0000000000010628         movups     xmmword [rbp+0xc0], xmm0
000000000001062f         movups     xmmword [rbp+0xd0], xmm0
0000000000010636         movups     xmmword [rbp+0xe0], xmm0
000000000001063d         movups     xmmword [rbp+0xf0], xmm0

                     loc_10644:
0000000000010644         mov        rax, qword [rsp+0x1a8+var_178]              ; CODE XREF=re_compile_fastmap_iter.isra.30+1309
0000000000010649         or         byte [rax+0x38], 0x1

                     loc_1064d:
000000000001064d         mov        rax, qword [rsp+0x1a8+var_40]               ; CODE XREF=re_compile_fastmap_iter.isra.30+108, re_compile_fastmap_iter.isra.30+216, re_compile_fastmap_iter.isra.30+1303
0000000000010655         xor        rax, qword [fs:0x28]
000000000001065e         jne        loc_106f2

0000000000010664         add        rsp, 0x178
000000000001066b         pop        rbx
000000000001066c         pop        rbp
000000000001066d         pop        r12
000000000001066f         pop        r13
0000000000010671         pop        r14
0000000000010673         pop        r15
0000000000010675         ret
                        ; endp

                     loc_10676:
0000000000010676         mov        rax, qword [rsp+0x1a8+var_170]              ; CODE XREF=re_compile_fastmap_iter.isra.30+358, re_compile_fastmap_iter.isra.30+382
000000000001067b         add        rax, 0x1
000000000001067f         jmp        loc_103a4

                     loc_10684:
0000000000010684         movdqa     xmm0, xmmword [__re_error_msgid+384]        ; 0x1cf40, CODE XREF=re_compile_fastmap_iter.isra.30+184
000000000001068c         cmp        eax, 0x2
000000000001068f         movups     xmmword [rbp], xmm0
0000000000010693         movups     xmmword [rbp+0x10], xmm0
0000000000010697         movups     xmmword [rbp+0x20], xmm0
000000000001069b         movups     xmmword [rbp+0x30], xmm0
000000000001069f         movups     xmmword [rbp+0x40], xmm0
00000000000106a3         movups     xmmword [rbp+0x50], xmm0
00000000000106a7         movups     xmmword [rbp+0x60], xmm0
00000000000106ab         movups     xmmword [rbp+0x70], xmm0
00000000000106af         movups     xmmword [rbp+0x80], xmm0
00000000000106b6         movups     xmmword [rbp+0x90], xmm0
00000000000106bd         movups     xmmword [rbp+0xa0], xmm0
00000000000106c4         movups     xmmword [rbp+0xb0], xmm0
00000000000106cb         movups     xmmword [rbp+0xc0], xmm0
00000000000106d2         movups     xmmword [rbp+0xd0], xmm0
00000000000106d9         movups     xmmword [rbp+0xe0], xmm0
00000000000106e0         movups     xmmword [rbp+0xf0], xmm0
00000000000106e7         jne        loc_1064d

00000000000106ed         jmp        loc_10644

                     loc_106f2:
00000000000106f2         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_compile_fastmap_iter.isra.30+1166
                        ; endp
00000000000106f7         align      256                                         ; End of unwind block (FDE at 0x1f42c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_node_accept_bytes.isra.31:
0000000000010700         shl        rdx, 0x4                                    ; Begin of unwind block (FDE at 0x1f47c), CODE XREF=check_arrival+597, set_regs+888, sift_states_backward+521, re_search_internal+3298
0000000000010704         push       r13
0000000000010706         push       r12
0000000000010708         lea        r9, qword [rdi+rdx]
000000000001070c         push       rbp
000000000001070d         push       rbx
000000000001070e         sub        rsp, 0x8
0000000000010712         movzx      r11d, byte [r9+8]
0000000000010717         cmp        r11b, 0x7
000000000001071b         je         loc_10830

0000000000010721         cmp        dword [rcx+0x90], 0x1
0000000000010728         je         loc_107f0

000000000001072e         mov        rbx, rsi
0000000000010731         mov        rdi, rcx
0000000000010734         mov        rsi, r8
0000000000010737         mov        r10, rcx
000000000001073a         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
000000000001073f         cmp        r11b, 0x5
0000000000010743         mov        ebp, eax
0000000000010745         je         loc_10800

000000000001074b         cmp        r11b, 0x6
000000000001074f         jne        loc_107f0

0000000000010755         cmp        eax, 0x1
0000000000010758         jle        loc_107f0

000000000001075e         mov        r13, qword [r9]
0000000000010761         mov        rsi, qword [r13+0x40]
0000000000010765         mov        rdx, qword [r13+0x28]
0000000000010769         test       rsi, rsi
000000000001076c         jne        loc_10779

000000000001076e         cmp        qword [r13+0x48], 0x0
0000000000010773         je         loc_10868

                     loc_10779:
0000000000010779         mov        rax, qword [r10+0x10]                       ; CODE XREF=check_node_accept_bytes.isra.31+108, check_node_accept_bytes.isra.31+363
000000000001077d         test       rdx, rdx
0000000000010780         mov        r12d, dword [rax+r8*4]
0000000000010784         jle        loc_107a7

0000000000010786         mov        rcx, qword [r13]
000000000001078a         cmp        r12d, dword [rcx]
000000000001078d         je         loc_107e2

000000000001078f         xor        eax, eax
0000000000010791         jmp        loc_1079e
0000000000010793         align      8

                     loc_10798:
0000000000010798         cmp        r12d, dword [rcx+rax*4]                     ; CODE XREF=check_node_accept_bytes.isra.31+165
000000000001079c         je         loc_107e2

                     loc_1079e:
000000000001079e         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+145
00000000000107a2         cmp        rax, rdx
00000000000107a5         jne        loc_10798

                     loc_107a7:
00000000000107a7         mov        rax, qword [r13+0x48]                       ; CODE XREF=check_node_accept_bytes.isra.31+132
00000000000107ab         test       rax, rax
00000000000107ae         jle        loc_1088c

00000000000107b4         xor        ebx, ebx
00000000000107b6         jmp        loc_107ce
00000000000107b8         align      64

                     loc_107c0:
00000000000107c0         add        rbx, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+224
00000000000107c4         cmp        rbx, qword [r13+0x48]
00000000000107c8         jge        loc_10888

                     loc_107ce:
00000000000107ce         mov        rax, qword [r13+0x18]                       ; CODE XREF=check_node_accept_bytes.isra.31+182
00000000000107d2         mov        edi, r12d                                   ; argument "__wc" for method j_iswctype
00000000000107d5         mov        rsi, qword [rax+rbx*8]                      ; argument "__desc" for method j_iswctype
00000000000107d9         call       j_iswctype                                  ; iswctype
00000000000107de         test       eax, eax
00000000000107e0         je         loc_107c0

                     loc_107e2:
00000000000107e2         test       byte [r13+0x20], 0x1                        ; CODE XREF=check_node_accept_bytes.isra.31+141, check_node_accept_bytes.isra.31+156, check_node_accept_bytes.isra.31+441
00000000000107e7         je         loc_107f2

00000000000107e9         nop        dword [rax]

                     loc_107f0:
00000000000107f0         xor        ebp, ebp                                    ; CODE XREF=check_node_accept_bytes.isra.31+40, check_node_accept_bytes.isra.31+79, check_node_accept_bytes.isra.31+88, check_node_accept_bytes.isra.31+259, check_node_accept_bytes.isra.31+281, check_node_accept_bytes.isra.31+299, check_node_accept_bytes.isra.31+317, check_node_accept_bytes.isra.31+330, check_node_accept_bytes.isra.31+353, check_node_accept_bytes.isra.31+380, check_node_accept_bytes.isra.31+457

                     loc_107f2:
00000000000107f2         add        rsp, 0x8                                    ; CODE XREF=check_node_accept_bytes.isra.31+231, check_node_accept_bytes.isra.31+270, check_node_accept_bytes.isra.31+283, check_node_accept_bytes.isra.31+355, check_node_accept_bytes.isra.31+374, check_node_accept_bytes.isra.31+497
00000000000107f6         mov        eax, ebp
00000000000107f8         pop        rbx
00000000000107f9         pop        rbp
00000000000107fa         pop        r12
00000000000107fc         pop        r13
00000000000107fe         ret
                        ; endp
00000000000107ff         align      2048

                     loc_10800:
0000000000010800         cmp        eax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+69
0000000000010803         jle        loc_107f0

0000000000010805         mov        rax, qword [rbx]
0000000000010808         test       al, 0x40
000000000001080a         je         loc_10820

                     loc_1080c:
000000000001080c         test       al, 0x80                                    ; CODE XREF=check_node_accept_bytes.isra.31+297
000000000001080e         je         loc_107f2

0000000000010810         mov        rax, qword [r10+8]
0000000000010814         cmp        byte [rax+r8], 0x0
0000000000010819         je         loc_107f0

000000000001081b         jmp        loc_107f2
000000000001081d         align      32

                     loc_10820:
0000000000010820         mov        rdx, qword [r10+8]                          ; CODE XREF=check_node_accept_bytes.isra.31+266
0000000000010824         cmp        byte [rdx+r8], 0xa
0000000000010829         jne        loc_1080c

000000000001082b         jmp        loc_107f0
000000000001082d         align      16

                     loc_10830:
0000000000010830         mov        rdx, qword [rcx+8]                          ; CODE XREF=check_node_accept_bytes.isra.31+27
0000000000010834         lea        rsi, qword [rdx+r8]
0000000000010838         movzx      eax, byte [rsi]
000000000001083b         cmp        al, 0xc1
000000000001083d         jbe        loc_107f0

000000000001083f         mov        rcx, qword [rcx+0x58]
0000000000010843         lea        rdi, qword [r8+1]
0000000000010847         cmp        rdi, rcx
000000000001084a         jge        loc_107f0

000000000001084c         cmp        al, 0xdf
000000000001084e         movzx      edx, byte [rdx+r8+1]
0000000000010854         ja         loc_108be

0000000000010856         add        edx, 0xffffff80
0000000000010859         mov        ebp, 0x2
000000000001085e         cmp        dl, 0x3f
0000000000010861         ja         loc_107f0

0000000000010863         jmp        loc_107f2
0000000000010865         align      8

                     loc_10868:
0000000000010868         test       rdx, rdx                                    ; CODE XREF=check_node_accept_bytes.isra.31+115
000000000001086b         jne        loc_10779

                     loc_10871:
0000000000010871         test       byte [r13+0x20], 0x1                        ; CODE XREF=check_node_accept_bytes.isra.31+399, check_node_accept_bytes.isra.31+423
0000000000010876         jne        loc_107f2

000000000001087c         jmp        loc_107f0
0000000000010881         align      8

                     loc_10888:
0000000000010888         mov        rsi, qword [r13+0x40]                       ; CODE XREF=check_node_accept_bytes.isra.31+200

                     loc_1088c:
000000000001088c         test       rsi, rsi                                    ; CODE XREF=check_node_accept_bytes.isra.31+174
000000000001088f         jle        loc_10871

0000000000010891         mov        rdx, qword [r13+8]
0000000000010895         xor        eax, eax
0000000000010897         jmp        loc_108a9
0000000000010899         align      32

                     loc_108a0:
00000000000108a0         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+429, check_node_accept_bytes.isra.31+439
00000000000108a4         cmp        rax, rsi
00000000000108a7         je         loc_10871

                     loc_108a9:
00000000000108a9         cmp        r12d, dword [rdx+rax*4]                     ; CODE XREF=check_node_accept_bytes.isra.31+407
00000000000108ad         jl         loc_108a0

00000000000108af         mov        rcx, qword [r13+0x10]
00000000000108b3         cmp        r12d, dword [rcx+rax*4]
00000000000108b7         jg         loc_108a0

00000000000108b9         jmp        loc_107e2

                     loc_108be:
00000000000108be         cmp        al, 0xef                                    ; CODE XREF=check_node_accept_bytes.isra.31+340
00000000000108c0         ja         loc_10908

00000000000108c2         cmp        al, 0xe0
00000000000108c4         jne        loc_108cf

00000000000108c6         cmp        dl, 0x9f
00000000000108c9         jbe        loc_107f0

                     loc_108cf:
00000000000108cf         mov        ebp, 0x3                                    ; CODE XREF=check_node_accept_bytes.isra.31+452

                     loc_108d4:
00000000000108d4         movsxd     rdi, ebp                                    ; CODE XREF=check_node_accept_bytes.isra.31+542, check_node_accept_bytes.isra.31+566, check_node_accept_bytes.isra.31+594
00000000000108d7         add        r8, rdi
00000000000108da         cmp        rcx, r8
00000000000108dd         jl         loc_107f0

00000000000108e3         mov        eax, 0x1
00000000000108e8         jmp        loc_108f7

                     loc_108ea:
00000000000108ea         add        rax, 0x1                                    ; CODE XREF=check_node_accept_bytes.isra.31+513
00000000000108ee         cmp        rdi, rax
00000000000108f1         jle        loc_107f2

                     loc_108f7:
00000000000108f7         movzx      ebx, byte [rsi+rax]                         ; CODE XREF=check_node_accept_bytes.isra.31+488
00000000000108fb         lea        edx, dword [rbx-0x80]
00000000000108fe         cmp        dl, 0x3f
0000000000010901         jbe        loc_108ea

0000000000010903         jmp        loc_107f0

                     loc_10908:
0000000000010908         cmp        al, 0xf7                                    ; CODE XREF=check_node_accept_bytes.isra.31+448
000000000001090a         ja         loc_10920

000000000001090c         cmp        al, 0xf0
000000000001090e         jne        loc_10919

0000000000010910         cmp        dl, 0x8f
0000000000010913         jbe        loc_107f0

                     loc_10919:
0000000000010919         mov        ebp, 0x4                                    ; CODE XREF=check_node_accept_bytes.isra.31+526
000000000001091e         jmp        loc_108d4

                     loc_10920:
0000000000010920         cmp        al, 0xfb                                    ; CODE XREF=check_node_accept_bytes.isra.31+522
0000000000010922         ja         loc_10938

0000000000010924         cmp        al, 0xf8
0000000000010926         jne        loc_10931

0000000000010928         cmp        dl, 0x87
000000000001092b         jbe        loc_107f0

                     loc_10931:
0000000000010931         mov        ebp, 0x5                                    ; CODE XREF=check_node_accept_bytes.isra.31+550
0000000000010936         jmp        loc_108d4

                     loc_10938:
0000000000010938         cmp        al, 0xfd                                    ; CODE XREF=check_node_accept_bytes.isra.31+546
000000000001093a         ja         loc_107f0

0000000000010940         cmp        al, 0xfc
0000000000010942         jne        loc_1094d

0000000000010944         cmp        dl, 0x83
0000000000010947         jbe        loc_107f0

                     loc_1094d:
000000000001094d         mov        ebp, 0x6                                    ; CODE XREF=check_node_accept_bytes.isra.31+578
0000000000010952         jmp        loc_108d4
0000000000010954         align      32                                          ; End of unwind block (FDE at 0x1f47c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int8_t, -88
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_80: int32_t, -128
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264


                     check_arrival:
0000000000010960         push       r15                                         ; Begin of unwind block (FDE at 0x1f4b8), CODE XREF=get_subexp_sub.isra.32+48, transit_state_bkref.isra.34+1675
0000000000010962         push       r14
0000000000010964         mov        r15, rdi
0000000000010967         push       r13
0000000000010969         push       r12
000000000001096b         push       rbp
000000000001096c         push       rbx
000000000001096d         mov        rbp, rcx
0000000000010970         mov        rbx, rdx
0000000000010973         sub        rsp, 0xd8
000000000001097a         mov        rcx, qword [rdi+0x98]
0000000000010981         mov        r13, qword [rsi+8]
0000000000010985         mov        rax, qword [fs:0x28]
000000000001098e         mov        qword [rsp+0x108+var_40], rax
0000000000010996         xor        eax, eax
0000000000010998         mov        rax, rdx
000000000001099b         mov        qword [rsp+0x108+var_A8], rsi
00000000000109a0         mov        qword [rsp+0x108+var_90], r8
00000000000109a5         shl        rax, 0x4
00000000000109a9         add        rax, qword [rcx]
00000000000109ac         mov        qword [rsp+0x108+var_C8], r9
00000000000109b1         mov        qword [rsp+0x108+var_D8], rcx
00000000000109b6         mov        dword [rsp+0x108+var_80], 0x0
00000000000109c1         mov        rax, qword [rax]
00000000000109c4         mov        qword [rsp+0x108+var_C0], rax
00000000000109c9         movsxd     rax, dword [rdi+0xe0]
00000000000109d0         add        rax, r9
00000000000109d3         cmp        rax, r13
00000000000109d6         jge        loc_10ff6

                     loc_109dc:
00000000000109dc         mov        rax, qword [rsp+0x108+var_A8]               ; CODE XREF=check_arrival+1787
00000000000109e1         mov        rdx, qword [r15+0xb8]
00000000000109e8         mov        rcx, qword [r15+0x48]
00000000000109ec         mov        r12, qword [rax]
00000000000109ef         mov        r14, qword [rax+0x10]
00000000000109f3         mov        qword [rsp+0x108+var_A0], rdx
00000000000109f8         mov        qword [rsp+0x108+var_98], rcx
00000000000109fd         mov        edx, dword [r15+0xa0]
0000000000010a04         test       r12, r12
0000000000010a07         mov        qword [r15+0xb8], r14
0000000000010a0e         je         loc_10df0

0000000000010a14         lea        rsi, qword [r12-1]
0000000000010a19         mov        qword [r15+0x48], r12
0000000000010a1d         mov        rdi, r15
0000000000010a20         call       re_string_context_at                        ; re_string_context_at
0000000000010a25         cmp        r12, rbp
0000000000010a28         mov        r13d, eax
0000000000010a2b         je         loc_10e03

0000000000010a31         mov        rbp, qword [r14+r12*8]
0000000000010a35         test       rbp, rbp
0000000000010a38         je         loc_10a44

0000000000010a3a         test       byte [rbp+0x68], 0x40
0000000000010a3e         jne        loc_10f60

                     loc_10a44:
0000000000010a44         pxor       xmm0, xmm0                                  ; CODE XREF=check_arrival+216
0000000000010a48         mov        qword [rsp+0x108+var_68], 0x0
0000000000010a54         movaps     xmmword [rsp+0x108+var_78], xmm0

                     loc_10a5c:
0000000000010a5c         cmp        r12, qword [rsp+0x108+var_C8]               ; CODE XREF=check_arrival+1575, check_arrival+1681
0000000000010a61         jge        loc_10d88

0000000000010a67         mov        ecx, dword [r15+0xe0]
0000000000010a6e         test       ecx, ecx
0000000000010a70         js         loc_10d88

0000000000010a76         lea        rbx, qword [rsp+0x108+var_78]
0000000000010a7e         lea        rax, qword [0x8+r12*8]
0000000000010a86         mov        qword [rsp+0x108+var_108], r12
0000000000010a8a         mov        qword [rsp+0x108+var_E8], 0x0
0000000000010a93         mov        qword [rsp+0x108+var_100], rbx
0000000000010a98         lea        rbx, qword [rsp+0x108+var_58]
0000000000010aa0         mov        qword [rsp+0x108+var_F8], rax
0000000000010aa5         mov        rax, qword [r15+0xb8]
0000000000010aac         mov        qword [rsp+0x108+var_F0], rbx
0000000000010ab1         lea        rbx, qword [rsp+0x108+var_7C]
0000000000010ab9         mov        qword [rsp+0x108+var_B0], rbx

                     loc_10abe:
0000000000010abe         mov        rcx, qword [rsp+0x108+var_F8]               ; CODE XREF=check_arrival+1058
0000000000010ac3         mov        qword [rsp+0x108+var_70], 0x0
0000000000010acf         mov        rsi, qword [rax+rcx]
0000000000010ad3         test       rsi, rsi
0000000000010ad6         je         loc_10e98

0000000000010adc         mov        rdi, qword [rsp+0x108+var_100]
0000000000010ae1         add        rsi, 0x8
0000000000010ae5         call       re_node_set_merge                           ; re_node_set_merge
0000000000010aea         test       eax, eax
0000000000010aec         mov        dword [rsp+0x108+var_80], eax
0000000000010af3         jne        loc_10ed0

0000000000010af9         test       rbp, rbp
0000000000010afc         je         loc_10ca8

                     loc_10b02:
0000000000010b02         cmp        qword [rbp+0x28], 0x0                       ; CODE XREF=check_arrival+1339
0000000000010b07         mov        rax, qword [rsp+0x108+var_F0]
0000000000010b0c         pxor       xmm0, xmm0
0000000000010b10         mov        r12, qword [r15+0x98]
0000000000010b17         mov        dword [rsp+0x108+var_7C], 0x0
0000000000010b22         mov        qword [rax+0x10], 0x0
0000000000010b2a         movaps     xmmword [rax], xmm0
0000000000010b2d         jle        loc_11060

0000000000010b33         lea        rax, qword [r12+0xd8]
0000000000010b3b         xor        ebx, ebx
0000000000010b3d         mov        qword [rsp+0x108+var_E0], rax
0000000000010b42         jmp        loc_10b89
0000000000010b44         align      8

                     loc_10b48:
0000000000010b48         mov        rdx, qword [rsp+0x108+var_108]              ; CODE XREF=check_arrival+580, check_arrival+1327
0000000000010b4c         mov        rdi, r15
0000000000010b4f         call       check_node_accept                           ; check_node_accept
0000000000010b54         test       al, al
0000000000010b56         je         loc_10b7b

                     loc_10b58:
0000000000010b58         lea        r13, qword [r14*8]                          ; CODE XREF=check_arrival+1314

                     loc_10b60:
0000000000010b60         mov        rax, qword [r12+0x18]                       ; CODE XREF=check_arrival+779, check_arrival+794
0000000000010b65         mov        rdi, qword [rsp+0x108+var_100]
0000000000010b6a         mov        rsi, qword [rax+r13]
0000000000010b6e         call       re_node_set_insert                          ; re_node_set_insert
0000000000010b73         test       al, al
0000000000010b75         je         loc_10eb8

                     loc_10b7b:
0000000000010b7b         add        rbx, 0x1                                    ; CODE XREF=check_arrival+502
0000000000010b7f         cmp        rbx, qword [rbp+0x28]
0000000000010b83         jge        loc_10f10

                     loc_10b89:
0000000000010b89         mov        rax, qword [rbp+0x30]                       ; CODE XREF=check_arrival+482
0000000000010b8d         mov        rdi, qword [r12]
0000000000010b91         mov        r14, qword [rax+rbx*8]
0000000000010b95         mov        r13, r14
0000000000010b98         shl        r13, 0x4
0000000000010b9c         lea        rsi, qword [rdi+r13]
0000000000010ba0         test       byte [rsi+0xa], 0x10
0000000000010ba4         je         loc_10b48

0000000000010ba6         mov        r8, qword [rsp+0x108+var_108]
0000000000010baa         mov        rsi, qword [rsp+0x108+var_E0]
0000000000010baf         mov        rcx, r15
0000000000010bb2         mov        rdx, r14
0000000000010bb5         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
0000000000010bba         cmp        eax, 0x1
0000000000010bbd         jle        loc_10e80

0000000000010bc3         cdqe
0000000000010bc5         add        rax, qword [rsp+0x108+var_108]
0000000000010bc9         mov        rdx, qword [r12+0x18]
0000000000010bce         lea        r13, qword [r14*8]
0000000000010bd6         mov        rdx, qword [rdx+r14*8]
0000000000010bda         mov        rcx, rax
0000000000010bdd         mov        qword [rsp+0x108+var_D0], rax
0000000000010be2         lea        r14, qword [rax*8]
0000000000010bea         mov        rax, qword [r15+0xb8]
0000000000010bf1         mov        rsi, qword [rax+rcx*8]
0000000000010bf5         mov        qword [rsp+0x108+var_50], 0x0
0000000000010c01         test       rsi, rsi
0000000000010c04         je         loc_10c29

0000000000010c06         mov        rdi, qword [rsp+0x108+var_F0]
0000000000010c0b         add        rsi, 0x8
0000000000010c0f         mov        qword [rsp+0x108+var_B8], rdx
0000000000010c14         call       re_node_set_merge                           ; re_node_set_merge
0000000000010c19         test       eax, eax
0000000000010c1b         mov        dword [rsp+0x108+var_7C], eax
0000000000010c22         mov        rdx, qword [rsp+0x108+var_B8]
0000000000010c27         jne        loc_10c80

                     loc_10c29:
0000000000010c29         mov        rdi, qword [rsp+0x108+var_F0]               ; CODE XREF=check_arrival+676
0000000000010c2e         mov        rsi, rdx
0000000000010c31         call       re_node_set_insert                          ; re_node_set_insert
0000000000010c36         test       al, al
0000000000010c38         je         loc_10eb8

0000000000010c3e         add        r14, qword [r15+0xb8]
0000000000010c45         mov        rdx, qword [rsp+0x108+var_F0]
0000000000010c4a         mov        rsi, r12
0000000000010c4d         mov        rdi, qword [rsp+0x108+var_B0]
0000000000010c52         call       re_acquire_state                            ; re_acquire_state
0000000000010c57         mov        rdx, qword [rsp+0x108+var_D0]
0000000000010c5c         mov        qword [r14], rax
0000000000010c5f         mov        rax, qword [r15+0xb8]
0000000000010c66         cmp        qword [rax+rdx*8], 0x0
0000000000010c6b         jne        loc_10b60

0000000000010c71         mov        edx, dword [rsp+0x108+var_7C]
0000000000010c78         test       edx, edx
0000000000010c7a         je         loc_10b60

                     loc_10c80:
0000000000010c80         mov        rdi, qword [rsp+0x108+var_48]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+711
0000000000010c88         call       j_free                                      ; free
0000000000010c8d         mov        eax, dword [rsp+0x108+var_7C]
0000000000010c94         test       eax, eax
0000000000010c96         mov        dword [rsp+0x108+var_80], eax
0000000000010c9d         jne        loc_10ed0

0000000000010ca3         nop        dword [rax+rax]

                     loc_10ca8:
0000000000010ca8         mov        rax, qword [rsp+0x108+var_108]              ; CODE XREF=check_arrival+412, check_arrival+1480
0000000000010cac         cmp        qword [rsp+0x108+var_70], 0x0
0000000000010cb5         lea        rbx, qword [rax+1]
0000000000010cb9         mov        r12, rbx
0000000000010cbc         je         loc_10d14

0000000000010cbe         mov        ecx, dword [rsp+0x108+arg_0]
0000000000010cc5         mov        rdx, qword [rsp+0x108+var_C0]
0000000000010cca         mov        rsi, qword [rsp+0x108+var_100]
0000000000010ccf         mov        rdi, qword [rsp+0x108+var_D8]
0000000000010cd4         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
0000000000010cd9         test       eax, eax
0000000000010cdb         mov        dword [rsp+0x108+var_80], eax
0000000000010ce2         jne        loc_10ed0

0000000000010ce8         mov        r8d, dword [rsp+0x108+arg_0]
0000000000010cf0         mov        rcx, qword [rsp+0x108+var_C0]
0000000000010cf5         mov        rdx, rbx
0000000000010cf8         mov        rsi, qword [rsp+0x108+var_100]
0000000000010cfd         mov        rdi, r15
0000000000010d00         call       expand_bkref_cache                          ; expand_bkref_cache
0000000000010d05         test       eax, eax
0000000000010d07         mov        dword [rsp+0x108+var_80], eax
0000000000010d0e         jne        loc_10ed0

                     loc_10d14:
0000000000010d14         mov        edx, dword [r15+0xa0]                       ; CODE XREF=check_arrival+860, check_arrival+1356
0000000000010d1b         mov        rsi, qword [rsp+0x108+var_108]
0000000000010d1f         mov        rdi, r15
0000000000010d22         call       re_string_context_at                        ; re_string_context_at
0000000000010d27         mov        rdx, qword [rsp+0x108+var_100]
0000000000010d2c         mov        rsi, qword [rsp+0x108+var_D8]
0000000000010d31         lea        rdi, qword [rsp+0x108+var_80]
0000000000010d39         mov        ecx, eax
0000000000010d3b         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000010d40         test       rax, rax
0000000000010d43         mov        rbp, rax
0000000000010d46         je         loc_10f30

0000000000010d4c         mov        rax, qword [r15+0xb8]
0000000000010d53         mov        rdx, qword [rsp+0x108+var_F8]
0000000000010d58         mov        qword [rsp+0x108+var_E8], 0x0
0000000000010d61         mov        qword [rax+rdx], rbp

                     loc_10d65:
0000000000010d65         cmp        qword [rsp+0x108+var_C8], rbx               ; CODE XREF=check_arrival+1525
0000000000010d6a         jle        loc_10d88

0000000000010d6c         movsxd     rdx, dword [r15+0xe0]
0000000000010d73         add        qword [rsp+0x108+var_F8], 0x8
0000000000010d79         cmp        rdx, qword [rsp+0x108+var_E8]
0000000000010d7e         mov        qword [rsp+0x108+var_108], rbx
0000000000010d82         jge        loc_10abe

                     loc_10d88:
0000000000010d88         mov        rdi, qword [rsp+0x108+var_68]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+257, check_arrival+272, check_arrival+1034
0000000000010d90         call       j_free                                      ; free
0000000000010d95         mov        rax, qword [r15+0xb8]
0000000000010d9c         mov        rbx, qword [rsp+0x108+var_C8]
0000000000010da1         mov        rax, qword [rax+rbx*8]
0000000000010da5         test       rax, rax
0000000000010da8         je         loc_11085

0000000000010dae         mov        rbx, qword [rsp+0x108+var_A8]
0000000000010db3         mov        rdx, qword [rsp+0x108+var_90]
0000000000010db8         lea        rsi, qword [rax+0x18]
0000000000010dbc         mov        qword [rbx], r12
0000000000010dbf         mov        rbx, qword [rsp+0x108+var_A0]
0000000000010dc4         mov        qword [r15+0xb8], rbx
0000000000010dcb         mov        rbx, qword [rsp+0x108+var_98]
0000000000010dd0         mov        qword [r15+0x48], rbx
0000000000010dd4         mov        rdi, qword [rax+0x10]
0000000000010dd8         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000010ddd         test       rax, rax
0000000000010de0         sete       al
0000000000010de3         movzx      eax, al
0000000000010de6         jmp        loc_10ee4
0000000000010deb         align      16

                     loc_10df0:
0000000000010df0         lea        rsi, qword [rbp-1]                          ; CODE XREF=check_arrival+174
0000000000010df4         mov        qword [r15+0x48], rbp
0000000000010df8         mov        rdi, r15
0000000000010dfb         call       re_string_context_at                        ; re_string_context_at
0000000000010e00         mov        r13d, eax

                     loc_10e03:
0000000000010e03         mov        edi, 0x8                                    ; argument "__size" for method j_malloc, CODE XREF=check_arrival+203
0000000000010e08         mov        qword [rsp+0x108+var_78], 0x1
0000000000010e14         mov        qword [rsp+0x108+var_70], 0x1
0000000000010e20         call       j_malloc                                    ; malloc
0000000000010e25         test       rax, rax
0000000000010e28         mov        qword [rsp+0x108+var_68], rax
0000000000010e30         je         loc_1107b

0000000000010e36         mov        qword [rax], rbx
0000000000010e39         mov        ecx, dword [rsp+0x108+arg_0]
0000000000010e40         lea        rbx, qword [rsp+0x108+var_78]
0000000000010e48         mov        rdx, qword [rsp+0x108+var_C0]
0000000000010e4d         mov        rdi, qword [rsp+0x108+var_D8]
0000000000010e52         mov        r12, rbp
0000000000010e55         mov        rsi, rbx
0000000000010e58         mov        dword [rsp+0x108+var_80], 0x0
0000000000010e63         call       check_arrival_expand_ecl                    ; check_arrival_expand_ecl
0000000000010e68         test       eax, eax
0000000000010e6a         mov        dword [rsp+0x108+var_80], eax
0000000000010e71         je         loc_10f8d

0000000000010e77         jmp        loc_10ed0
0000000000010e79         align      128

                     loc_10e80:
0000000000010e80         test       eax, eax                                    ; CODE XREF=check_arrival+605
0000000000010e82         jne        loc_10b58

0000000000010e88         mov        rsi, qword [r12]
0000000000010e8c         add        rsi, r13
0000000000010e8f         jmp        loc_10b48
0000000000010e94         align      8

                     loc_10e98:
0000000000010e98         test       rbp, rbp                                    ; CODE XREF=check_arrival+374
0000000000010e9b         jne        loc_10b02

0000000000010ea1         mov        rax, qword [rsp+0x108+var_108]
0000000000010ea5         lea        rbx, qword [rax+1]
0000000000010ea9         mov        r12, rbx
0000000000010eac         jmp        loc_10d14
0000000000010eb1         align      8

                     loc_10eb8:
0000000000010eb8         mov        rdi, qword [rsp+0x108+var_48]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+533, check_arrival+728
0000000000010ec0         call       j_free                                      ; free
0000000000010ec5         mov        dword [rsp+0x108+var_80], 0xc

                     loc_10ed0:
0000000000010ed0         mov        rdi, qword [rsp+0x108+var_68]               ; argument "__ptr" for method j_free, CODE XREF=check_arrival+403, check_arrival+829, check_arrival+898, check_arrival+942, check_arrival+1303, check_arrival+1497, check_arrival+1628, check_arrival+1814
0000000000010ed8         call       j_free                                      ; free
0000000000010edd         mov        eax, dword [rsp+0x108+var_80]

                     loc_10ee4:
0000000000010ee4         mov        rbx, qword [rsp+0x108+var_40]               ; CODE XREF=check_arrival+1158, check_arrival+1565, check_arrival+1824, check_arrival+1863
0000000000010eec         xor        rbx, qword [fs:0x28]
0000000000010ef5         jne        loc_110ac

0000000000010efb         add        rsp, 0xd8
0000000000010f02         pop        rbx
0000000000010f03         pop        rbp
0000000000010f04         pop        r12
0000000000010f06         pop        r13
0000000000010f08         pop        r14
0000000000010f0a         pop        r15
0000000000010f0c         ret
                        ; endp
0000000000010f0d         align      16

                     loc_10f10:
0000000000010f10         mov        rdi, qword [rsp+0x108+var_48]               ; CODE XREF=check_arrival+547

                     loc_10f18:
0000000000010f18         call       j_free                                      ; free, CODE XREF=check_arrival+1794
0000000000010f1d         mov        dword [rsp+0x108+var_80], 0x0
0000000000010f28         jmp        loc_10ca8
0000000000010f2d         align      16

                     loc_10f30:
0000000000010f30         mov        eax, dword [rsp+0x108+var_80]               ; CODE XREF=check_arrival+998
0000000000010f37         test       eax, eax
0000000000010f39         jne        loc_10ed0

0000000000010f3b         mov        rax, qword [r15+0xb8]
0000000000010f42         mov        rdx, qword [rsp+0x108+var_F8]
0000000000010f47         add        qword [rsp+0x108+var_E8], 0x1
0000000000010f4d         mov        qword [rax+rdx], 0x0
0000000000010f55         jmp        loc_10d65
0000000000010f5a         align      32

                     loc_10f60:
0000000000010f60         lea        rbx, qword [rsp+0x108+var_78]               ; CODE XREF=check_arrival+222
0000000000010f68         lea        rsi, qword [rbp+8]
0000000000010f6c         mov        rdi, rbx
0000000000010f6f         call       re_node_set_init_copy                       ; re_node_set_init_copy
0000000000010f74         test       eax, eax
0000000000010f76         mov        dword [rsp+0x108+var_80], eax
0000000000010f7d         jne        loc_10ee4

0000000000010f83         test       byte [rbp+0x68], 0x40
0000000000010f87         je         loc_10a5c

                     loc_10f8d:
0000000000010f8d         cmp        qword [rsp+0x108+var_70], 0x0               ; CODE XREF=check_arrival+1297
0000000000010f96         je         loc_10fc2

0000000000010f98         mov        r8d, dword [rsp+0x108+arg_0]
0000000000010fa0         mov        rcx, qword [rsp+0x108+var_C0]
0000000000010fa5         mov        rdx, r12
0000000000010fa8         mov        rsi, rbx
0000000000010fab         mov        rdi, r15
0000000000010fae         call       expand_bkref_cache                          ; expand_bkref_cache
0000000000010fb3         test       eax, eax
0000000000010fb5         mov        dword [rsp+0x108+var_80], eax
0000000000010fbc         jne        loc_10ed0

                     loc_10fc2:
0000000000010fc2         mov        rsi, qword [rsp+0x108+var_D8]               ; CODE XREF=check_arrival+1590
0000000000010fc7         lea        rdi, qword [rsp+0x108+var_80]
0000000000010fcf         mov        ecx, r13d
0000000000010fd2         mov        rdx, rbx
0000000000010fd5         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000010fda         test       rax, rax
0000000000010fdd         mov        rbp, rax
0000000000010fe0         je         loc_11067

                     loc_10fe6:
0000000000010fe6         mov        rax, qword [r15+0xb8]                       ; CODE XREF=check_arrival+1808
0000000000010fed         mov        qword [rax+r12*8], rbp
0000000000010ff1         jmp        loc_10a5c

                     loc_10ff6:
0000000000010ff6         lea        r12, qword [rax+1]                          ; CODE XREF=check_arrival+118
0000000000010ffa         movabs     rax, 0x7fffffffffffffff
0000000000011004         sub        rax, r13
0000000000011007         cmp        rax, r12
000000000001100a         jl         loc_1107b

000000000001100c         lea        r14, qword [r13+r12]
0000000000011011         movabs     rax, 0x1fffffffffffffff
000000000001101b         cmp        r14, rax
000000000001101e         ja         loc_1107b

0000000000011020         mov        rax, qword [rsp+0x108+var_A8]
0000000000011025         lea        rsi, qword [r14*8]                          ; argument "__size" for method j_realloc
000000000001102d         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_realloc
0000000000011031         call       j_realloc                                   ; realloc
0000000000011036         test       rax, rax
0000000000011039         je         loc_1107b

000000000001103b         mov        rcx, qword [rsp+0x108+var_A8]
0000000000011040         lea        rdx, qword [r12*8]                          ; argument "__n" for method j_memset
0000000000011048         lea        rdi, qword [rax+r13*8]                      ; argument "__s" for method j_memset
000000000001104c         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000001104e         mov        qword [rcx+0x10], rax
0000000000011052         mov        qword [rcx+8], r14
0000000000011056         call       j_memset                                    ; memset
000000000001105b         jmp        loc_109dc

                     loc_11060:
0000000000011060         xor        edi, edi                                    ; CODE XREF=check_arrival+461
0000000000011062         jmp        loc_10f18

                     loc_11067:
0000000000011067         mov        esi, dword [rsp+0x108+var_80]               ; CODE XREF=check_arrival+1664
000000000001106e         test       esi, esi
0000000000011070         je         loc_10fe6

0000000000011076         jmp        loc_10ed0

                     loc_1107b:
000000000001107b         mov        eax, 0xc                                    ; CODE XREF=check_arrival+1232, check_arrival+1706, check_arrival+1726, check_arrival+1753
0000000000011080         jmp        loc_10ee4

                     loc_11085:
0000000000011085         mov        rax, qword [rsp+0x108+var_A8]               ; CODE XREF=check_arrival+1096
000000000001108a         mov        qword [rax], r12
000000000001108d         mov        rax, qword [rsp+0x108+var_A0]
0000000000011092         mov        qword [r15+0xb8], rax
0000000000011099         mov        rax, qword [rsp+0x108+var_98]
000000000001109e         mov        qword [r15+0x48], rax
00000000000110a2         mov        eax, 0x1
00000000000110a7         jmp        loc_10ee4

                     loc_110ac:
00000000000110ac         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=check_arrival+1429
                        ; endp
00000000000110b1         align      64                                          ; End of unwind block (FDE at 0x1f4b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int8_t, -112
        ;    var_78: int64_t, -120
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_C9: int8_t, -201
        ;    var_D1: int8_t, -209
        ;    var_D8: int64_t, -216


                     set_regs:
00000000000110c0         push       rbp                                         ; Begin of unwind block (FDE at 0x1f508), CODE XREF=re_search_internal+4945
00000000000110c1         mov        rbp, rsp
00000000000110c4         push       r15
00000000000110c6         push       r14
00000000000110c8         push       r13
00000000000110ca         push       r12
00000000000110cc         mov        r13, rcx
00000000000110cf         push       rbx
00000000000110d0         mov        r12, rsi
00000000000110d3         sub        rsp, 0xb8
00000000000110da         mov        qword [rbp+var_98], rdx
00000000000110e1         mov        qword [rbp+var_50], 0x0
00000000000110e9         mov        rax, qword [fs:0x28]
00000000000110f2         mov        qword [rbp+var_38], rax
00000000000110f6         xor        eax, eax
00000000000110f8         mov        rax, qword [rdi]
00000000000110fb         test       r8b, r8b
00000000000110fe         mov        qword [rbp+var_48], 0x2
0000000000011106         mov        qword [rbp+var_40], 0x0
000000000001110e         mov        qword [rbp+var_90], rax
0000000000011115         je         loc_118bd

000000000001111b         mov        edi, 0x60                                   ; argument "__size" for method j_malloc
0000000000011120         call       j_malloc                                    ; malloc
0000000000011125         lea        rcx, qword [rbp+var_50]
0000000000011129         test       rax, rax
000000000001112c         mov        qword [rbp+var_40], rax
0000000000011130         mov        qword [rbp+var_88], rcx
0000000000011137         je         loc_1185c

                     loc_1113d:
000000000001113d         mov        rax, qword [rbp+var_90]                     ; CODE XREF=set_regs+2056
0000000000011144         pxor       xmm0, xmm0
0000000000011148         mov        qword [rbp+var_60], 0x0
0000000000011150         mov        rbx, qword [rax+0x90]
0000000000011157         mov        rax, qword [rbp+var_98]
000000000001115e         movaps     xmmword [rbp+var_70], xmm0
0000000000011162         shl        rax, 0x4
0000000000011166         cmp        rax, 0xfbf
000000000001116c         mov        qword [rbp+var_B8], rax
0000000000011173         ja         loc_11866

0000000000011179         add        rax, 0x10
000000000001117d         mov        byte [rbp+var_C9], 0x0
0000000000011184         sub        rsp, rax
0000000000011187         lea        rax, qword [rsp+0xe0+var_D1]
000000000001118c         and        rax, 0xfffffffffffffff0
0000000000011190         mov        qword [rbp+var_C0], rax

                     loc_11197:
0000000000011197         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+1987
000000000001119e         mov        rdi, qword [rbp+var_C0]                     ; argument "__dest" for method j_memcpy
00000000000111a5         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
00000000000111a8         call       j_memcpy                                    ; memcpy
00000000000111ad         lea        rax, qword [rbp+var_70]
00000000000111b1         mov        rcx, qword [r13]
00000000000111b5         mov        qword [rbp+var_A8], rax
00000000000111bc         add        rax, 0x10
00000000000111c0         mov        qword [rbp+var_78], rcx
00000000000111c4         mov        qword [rbp+var_C8], rax

                     loc_111cb:
00000000000111cb         lea        rax, qword [rbp+var_78]                     ; CODE XREF=set_regs+1554
00000000000111cf         mov        qword [rbp+var_B0], rax
00000000000111d6         jmp        loc_112b9
00000000000111db         align      32

                     loc_111e0:
00000000000111e0         cmp        esi, 0x9                                    ; CODE XREF=set_regs+548
00000000000111e3         je         loc_113d0

                     loc_111e9:
00000000000111e9         cmp        rax, rcx                                    ; CODE XREF=set_regs+568, set_regs+596, set_regs+798, set_regs+854, set_regs+1770, set_regs+1901
00000000000111ec         jne        loc_111fc

00000000000111ee         cmp        qword [r12+0xb0], rbx
00000000000111f6         je         loc_115d0

                     loc_111fc:
00000000000111fc         mov        r14, qword [r12+0x98]                       ; CODE XREF=set_regs+300, set_regs+1477
0000000000011204         mov        rdi, qword [r14]
0000000000011207         lea        rsi, qword [rdi+r9]
000000000001120b         movzx      eax, byte [rsi+8]
000000000001120f         test       al, 0x8
0000000000011211         jne        loc_11320

0000000000011217         test       byte [rsi+0xa], 0x10
000000000001121b         jne        loc_11420

0000000000011221         cmp        al, 0x4
0000000000011223         je         loc_11460

0000000000011229         mov        rcx, qword [rbp+var_78]

                     loc_1122d:
000000000001122d         mov        rdx, rcx                                    ; CODE XREF=set_regs+922, set_regs+1701
0000000000011230         mov        rdi, r12
0000000000011233         mov        qword [rbp+var_A0], rcx
000000000001123a         call       check_node_accept                           ; check_node_accept
000000000001123f         test       al, al
0000000000011241         mov        rcx, qword [rbp+var_A0]
0000000000011248         je         loc_11698

000000000001124e         mov        rax, qword [r14+0x18]
0000000000011252         lea        rdx, qword [rcx+1]
0000000000011256         mov        rbx, qword [rax+r15*8]

                     loc_1125a:
000000000001125a         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+1073
0000000000011262         mov        qword [rbp+var_78], rdx
0000000000011266         je         loc_112a4

0000000000011268         cmp        rdx, qword [r12+0xa8]
0000000000011270         jg         loc_116a6

0000000000011276         mov        rax, qword [r12+0xb8]
000000000001127e         mov        rax, qword [rax+rdx*8]
0000000000011282         test       rax, rax
0000000000011285         je         loc_116a6

000000000001128b         mov        rdi, qword [rax+0x10]
000000000001128f         lea        rsi, qword [rax+0x18]
0000000000011293         mov        rdx, rbx
0000000000011296         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000001129b         test       rax, rax
000000000001129e         je         loc_116a6

                     loc_112a4:
00000000000112a4         mov        qword [rbp+var_68], 0x0                     ; CODE XREF=set_regs+422

                     loc_112ac:
00000000000112ac         test       rbx, rbx                                    ; CODE XREF=set_regs+772, set_regs+1136, set_regs+1244, set_regs+1571, set_regs+1675
00000000000112af         js         loc_1168a

00000000000112b5         mov        rcx, qword [rbp+var_78]

                     loc_112b9:
00000000000112b9         mov        rax, qword [r13+8]                          ; CODE XREF=set_regs+278
00000000000112bd         cmp        rax, rcx
00000000000112c0         jl         loc_117b0

00000000000112c6         mov        rdi, qword [rbp+var_90]
00000000000112cd         mov        r9, rbx
00000000000112d0         mov        r15, rbx
00000000000112d3         shl        r9, 0x4
00000000000112d7         mov        rdx, qword [rdi]
00000000000112da         add        rdx, r9
00000000000112dd         movzx      esi, byte [rdx+8]
00000000000112e1         cmp        esi, 0x8
00000000000112e4         jne        loc_111e0

00000000000112ea         mov        rdx, qword [rdx]
00000000000112ed         add        rdx, 0x1
00000000000112f1         cmp        qword [rbp+var_98], rdx
00000000000112f8         jle        loc_111e9

00000000000112fe         shl        rdx, 0x4
0000000000011302         add        rdx, r13
0000000000011305         mov        qword [rdx+8], 0xffffffffffffffff
000000000001130d         mov        qword [rdx], rcx
0000000000011310         mov        rax, qword [r13+8]
0000000000011314         jmp        loc_111e9
0000000000011319         align      32

                     loc_11320:
0000000000011320         mov        rax, qword [r12+0xb8]                       ; CODE XREF=set_regs+337
0000000000011328         mov        rdx, qword [rbp+var_78]
000000000001132c         mov        rsi, rbx
000000000001132f         mov        rdi, qword [rbp+var_A8]
0000000000011336         mov        r9, qword [rax+rdx*8]
000000000001133a         mov        rax, qword [r14+0x28]
000000000001133e         lea        rdx, qword [rbx+rbx*2]
0000000000011342         mov        qword [rbp+var_A0], r9
0000000000011349         lea        r15, qword [rax+rdx*8]
000000000001134d         call       re_node_set_insert                          ; re_node_set_insert
0000000000011352         test       al, al
0000000000011354         mov        r9, qword [rbp+var_A0]
000000000001135b         je         loc_11838

0000000000011361         mov        r10, qword [r15+8]
0000000000011365         test       r10, r10
0000000000011368         jle        loc_11698

000000000001136e         mov        r15, qword [r15+0x10]
0000000000011372         mov        r11, qword [r9+0x10]
0000000000011376         lea        r14, qword [r9+0x18]
000000000001137a         mov        rbx, 0xffffffffffffffff
0000000000011381         xor        r9d, r9d
0000000000011384         mov        qword [rbp+var_A0], r12
000000000001138b         nop        dword [rax+rax]

                     loc_11390:
0000000000011390         mov        r12, qword [r15+r9*8]                       ; CODE XREF=set_regs+763
0000000000011394         mov        rsi, r14
0000000000011397         mov        rdi, r11
000000000001139a         mov        rdx, r12
000000000001139d         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
00000000000113a2         test       rax, rax
00000000000113a5         je         loc_113b4

00000000000113a7         cmp        rbx, 0xffffffffffffffff
00000000000113ab         jne        loc_11500

00000000000113b1         mov        rbx, r12

                     loc_113b4:
00000000000113b4         add        r9, 0x1                                     ; CODE XREF=set_regs+741
00000000000113b8         cmp        r10, r9
00000000000113bb         jne        loc_11390

00000000000113bd         mov        r12, qword [rbp+var_A0]
00000000000113c4         jmp        loc_112ac
00000000000113c9         align      16

                     loc_113d0:
00000000000113d0         mov        rdi, qword [rdx]                            ; CODE XREF=set_regs+291
00000000000113d3         lea        rsi, qword [rdi+1]
00000000000113d7         cmp        qword [rbp+var_98], rsi
00000000000113de         jle        loc_111e9

00000000000113e4         shl        rsi, 0x4
00000000000113e8         lea        rax, qword [r13+rsi]
00000000000113ed         cmp        qword [rax], rcx
00000000000113f0         jl         loc_11770

00000000000113f6         test       byte [rdx+0xa], 0x8
00000000000113fa         je         loc_1140e

00000000000113fc         mov        rdi, qword [rbp+var_C0]
0000000000011403         cmp        qword [rdi+rsi], 0xffffffffffffffff
0000000000011408         jne        loc_117fb

                     loc_1140e:
000000000001140e         mov        qword [rax+8], rcx                          ; CODE XREF=set_regs+826
0000000000011412         mov        rax, qword [r13+8]
0000000000011416         jmp        loc_111e9
000000000001141b         align      32

                     loc_11420:
0000000000011420         mov        r8, qword [rbp+var_78]                      ; CODE XREF=set_regs+347
0000000000011424         lea        rsi, qword [r14+0xd8]
000000000001142b         mov        rcx, r12
000000000001142e         mov        rdx, rbx
0000000000011431         mov        qword [rbp+var_A0], r9
0000000000011438         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000001143d         movsxd     rcx, eax
0000000000011440         test       rcx, rcx
0000000000011443         jne        loc_11641

0000000000011449         mov        r9, qword [rbp+var_A0]
0000000000011450         mov        rsi, qword [r14]
0000000000011453         mov        rcx, qword [rbp+var_78]
0000000000011457         add        rsi, r9
000000000001145a         jmp        loc_1122d
000000000001145f         align      32

                     loc_11460:
0000000000011460         mov        rax, qword [rsi]                            ; CODE XREF=set_regs+355
0000000000011463         add        rax, 0x1
0000000000011467         shl        rax, 0x4
000000000001146b         add        rax, r13
000000000001146e         mov        rdx, qword [rax+8]
0000000000011472         mov        rdi, qword [rax]
0000000000011475         mov        rcx, rdx
0000000000011478         sub        rcx, rdi
000000000001147b         cmp        qword [rbp+var_88], 0x0
0000000000011483         je         loc_11638

0000000000011489         cmp        rdi, 0xffffffffffffffff
000000000001148d         je         loc_116a6

0000000000011493         cmp        rdx, 0xffffffffffffffff
0000000000011497         je         loc_116a6

000000000001149d         test       rcx, rcx
00000000000114a0         je         loc_116f0

00000000000114a6         mov        r15, qword [rbp+var_78]
00000000000114aa         mov        rdx, qword [r12+0x30]
00000000000114af         mov        rax, qword [r12+8]
00000000000114b4         sub        rdx, r15
00000000000114b7         cmp        rcx, rdx
00000000000114ba         jg         loc_116a6

00000000000114c0         lea        rsi, qword [rax+r15]                        ; argument "__s2" for method j_memcmp
00000000000114c4         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
00000000000114c7         mov        rdx, rcx                                    ; argument "__n" for method j_memcmp
00000000000114ca         mov        qword [rbp+var_A0], rcx
00000000000114d1         call       j_memcmp                                    ; memcmp
00000000000114d6         test       eax, eax
00000000000114d8         mov        rcx, qword [rbp+var_A0]
00000000000114df         jne        loc_116a6

                     loc_114e5:
00000000000114e5         mov        rax, qword [r14+0x18]                       ; CODE XREF=set_regs+1413
00000000000114e9         lea        rdx, qword [r15+rcx]
00000000000114ed         mov        rbx, qword [rax+rbx*8]
00000000000114f1         jmp        loc_1125a
00000000000114f6         align      256

                     loc_11500:
0000000000011500         mov        rsi, qword [rbp+var_C8]                     ; CODE XREF=set_regs+747
0000000000011507         mov        rdi, qword [rbp+var_68]
000000000001150b         mov        rdx, rbx
000000000001150e         mov        r14, r12
0000000000011511         mov        r12, qword [rbp+var_A0]
0000000000011518         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000001151d         test       rax, rax
0000000000011520         jne        loc_116e0

0000000000011526         mov        rcx, qword [rbp+var_88]
000000000001152d         test       rcx, rcx
0000000000011530         je         loc_112ac

0000000000011536         mov        r15, qword [rcx]
0000000000011539         mov        rdx, qword [rbp+var_78]
000000000001153d         lea        rax, qword [r15+1]
0000000000011541         cmp        rax, qword [rcx+8]
0000000000011545         mov        qword [rcx], rax
0000000000011548         je         loc_118cd

000000000001154e         mov        rax, qword [rcx+0x10]

                     loc_11552:
0000000000011552         lea        r15, qword [r15+r15*2]                      ; CODE XREF=set_regs+2119
0000000000011556         shl        r15, 0x4
000000000001155a         add        r15, rax
000000000001155d         mov        qword [r15+8], r14
0000000000011561         mov        r14, qword [rbp+var_B8]
0000000000011568         mov        qword [r15], rdx
000000000001156b         mov        rdi, r14                                    ; argument "__size" for method j_malloc
000000000001156e         call       j_malloc                                    ; malloc
0000000000011573         test       rax, rax
0000000000011576         mov        qword [r15+0x10], rax
000000000001157a         je         loc_115a2

000000000001157c         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000001157f         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
0000000000011582         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000011585         call       j_memcpy                                    ; memcpy
000000000001158a         mov        rsi, qword [rbp+var_A8]
0000000000011591         lea        rdi, qword [r15+0x18]
0000000000011595         call       re_node_set_init_copy                       ; re_node_set_init_copy
000000000001159a         test       eax, eax
000000000001159c         je         loc_112ac

                     loc_115a2:
00000000000115a2         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1210
00000000000115a6         call       j_free                                      ; free
00000000000115ab         cmp        byte [rbp+var_C9], 0x0
00000000000115b2         jne        loc_1194b

                     loc_115b8:
00000000000115b8         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+1942, set_regs+2181
00000000000115bf         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
00000000000115c4         mov        eax, 0xc
00000000000115c9         jmp        loc_117d9
00000000000115ce         align      16

                     loc_115d0:
00000000000115d0         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+310
00000000000115d8         je         loc_1190c

00000000000115de         mov        rcx, qword [rbp+var_98]
00000000000115e5         test       rcx, rcx
00000000000115e8         je         loc_1160a

00000000000115ea         mov        rax, r13
00000000000115ed         xor        edx, edx
00000000000115ef         nop

                     loc_115f0:
00000000000115f0         cmp        qword [rax], 0x0                            ; CODE XREF=set_regs+1352
00000000000115f4         js         loc_115fd

00000000000115f6         cmp        qword [rax+8], 0xffffffffffffffff
00000000000115fb         je         loc_11650

                     loc_115fd:
00000000000115fd         add        rdx, 0x1                                    ; CODE XREF=set_regs+1332
0000000000011601         add        rax, 0x10
0000000000011605         cmp        rcx, rdx
0000000000011608         jne        loc_115f0

                     loc_1160a:
000000000001160a         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1320
000000000001160e         call       j_free                                      ; free
0000000000011613         cmp        byte [rbp+var_C9], 0x0
000000000001161a         jne        loc_11994

                     loc_11620:
0000000000011620         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+2272
0000000000011627         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
000000000001162c         xor        eax, eax
000000000001162e         jmp        loc_117d9
0000000000011633         align      8

                     loc_11638:
0000000000011638         test       rcx, rcx                                    ; CODE XREF=set_regs+963
000000000001163b         je         loc_116f0

                     loc_11641:
0000000000011641         mov        r15, qword [rbp+var_78]                     ; CODE XREF=set_regs+899
0000000000011645         jmp        loc_114e5
000000000001164a         align      16

                     loc_11650:
0000000000011650         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+1339
0000000000011657         mov        r9, qword [rbp+var_A8]
000000000001165e         mov        r8, r13
0000000000011661         mov        rcx, qword [rbp+var_98]
0000000000011668         mov        rdx, qword [rbp+var_B0]
000000000001166f         lea        rsi, qword [rdi+0x10]
0000000000011673         call       pop_fail_stack.isra.25                      ; pop_fail_stack.isra.25
0000000000011678         mov        r9, rax
000000000001167b         mov        rbx, rax
000000000001167e         mov        r15, rax
0000000000011681         shl        r9, 0x4
0000000000011685         jmp        loc_111fc

                     loc_1168a:
000000000001168a         cmp        rbx, 0xfffffffffffffffe                     ; CODE XREF=set_regs+495
000000000001168e         je         loc_11838

0000000000011694         nop        dword [rax]

                     loc_11698:
0000000000011698         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+392, set_regs+680
00000000000116a0         je         loc_1195c

                     loc_116a6:
00000000000116a6         mov        rdi, qword [rbp+var_88]                     ; CODE XREF=set_regs+432, set_regs+453, set_regs+478, set_regs+973, set_regs+983, set_regs+1018, set_regs+1055
00000000000116ad         mov        rcx, qword [rbp+var_98]
00000000000116b4         lea        rdx, qword [rbp+var_78]
00000000000116b8         mov        r9, qword [rbp+var_A8]
00000000000116bf         mov        r8, r13
00000000000116c2         lea        rsi, qword [rdi+0x10]
00000000000116c6         call       pop_fail_stack.isra.25                      ; pop_fail_stack.isra.25
00000000000116cb         mov        rcx, qword [rbp+var_78]
00000000000116cf         mov        rbx, rax
00000000000116d2         jmp        loc_111cb
00000000000116d7         align      32

                     loc_116e0:
00000000000116e0         mov        rbx, r14                                    ; CODE XREF=set_regs+1120
00000000000116e3         jmp        loc_112ac
00000000000116e8         align      16

                     loc_116f0:
00000000000116f0         mov        rdi, qword [rbp+var_A8]                     ; CODE XREF=set_regs+992, set_regs+1403
00000000000116f7         mov        rsi, rbx
00000000000116fa         mov        qword [rbp+var_A0], r9
0000000000011701         call       re_node_set_insert                          ; re_node_set_insert
0000000000011706         test       al, al
0000000000011708         je         loc_11838

000000000001170e         mov        rdx, qword [r14+0x28]
0000000000011712         lea        rax, qword [rbx+rbx*2]
0000000000011716         mov        rcx, qword [rbp+var_78]
000000000001171a         lea        rax, qword [rdx+rax*8]
000000000001171e         mov        qword [rbp+var_D8], rcx
0000000000011725         mov        rax, qword [rax+0x10]
0000000000011729         mov        rbx, qword [rax]
000000000001172c         mov        rax, qword [r12+0xb8]
0000000000011734         mov        rax, qword [rax+rcx*8]
0000000000011738         mov        rdx, rbx
000000000001173b         mov        rdi, qword [rax+0x10]
000000000001173f         lea        rsi, qword [rax+0x18]
0000000000011743         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000011748         test       rax, rax
000000000001174b         jne        loc_112ac

0000000000011751         mov        r9, qword [rbp+var_A0]
0000000000011758         mov        rsi, qword [r14]
000000000001175b         mov        rcx, qword [rbp+var_D8]
0000000000011762         add        rsi, r9
0000000000011765         jmp        loc_1122d
000000000001176a         align      16

                     loc_11770:
0000000000011770         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+816
0000000000011777         mov        rdi, qword [rbp+var_C0]                     ; argument "__dest" for method j_memcpy
000000000001177e         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
0000000000011781         mov        qword [rax+8], rcx
0000000000011785         mov        qword [rbp+var_D8], r9
000000000001178c         mov        qword [rbp+var_A0], rcx
0000000000011793         call       j_memcpy                                    ; memcpy
0000000000011798         mov        rax, qword [r13+8]
000000000001179c         mov        rcx, qword [rbp+var_A0]
00000000000117a3         mov        r9, qword [rbp+var_D8]
00000000000117aa         jmp        loc_111e9
00000000000117af         align      16

                     loc_117b0:
00000000000117b0         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+512
00000000000117b4         call       j_free                                      ; free
00000000000117b9         cmp        byte [rbp+var_C9], 0x0
00000000000117c0         jne        loc_1189c

00000000000117c6         mov        rdi, qword [rbp+var_88]
00000000000117cd         test       rdi, rdi
00000000000117d0         je         loc_117d7

                     loc_117d2:
00000000000117d2         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24, CODE XREF=set_regs+2034

                     loc_117d7:
00000000000117d7         xor        eax, eax                                    ; CODE XREF=set_regs+1808, set_regs+2040, set_regs+2140

                     loc_117d9:
00000000000117d9         mov        rbx, qword [rbp+var_38]                     ; CODE XREF=set_regs+1289, set_regs+1390, set_regs+1953, set_regs+2160, set_regs+2225, set_regs+2255
00000000000117dd         xor        rbx, qword [fs:0x28]
00000000000117e6         jne        loc_119a5

00000000000117ec         lea        rsp, qword [rbp+var_28]
00000000000117f0         pop        rbx
00000000000117f1         pop        r12
00000000000117f3         pop        r13
00000000000117f5         pop        r14
00000000000117f7         pop        r15
00000000000117f9         pop        rbp
00000000000117fa         ret
                        ; endp

                     loc_117fb:
00000000000117fb         mov        rdx, qword [rbp+var_B8]                     ; argument "__n" for method j_memcpy, CODE XREF=set_regs+840
0000000000011802         mov        rsi, rdi                                    ; argument "__src" for method j_memcpy
0000000000011805         mov        rdi, r13                                    ; argument "__dest" for method j_memcpy
0000000000011808         mov        qword [rbp+var_D8], rcx
000000000001180f         mov        qword [rbp+var_A0], r9
0000000000011816         call       j_memcpy                                    ; memcpy
000000000001181b         mov        rax, qword [r13+8]
000000000001181f         mov        r9, qword [rbp+var_A0]
0000000000011826         mov        rcx, qword [rbp+var_D8]
000000000001182d         jmp        loc_111e9
0000000000011832         align      8

                     loc_11838:
0000000000011838         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+667, set_regs+1486, set_regs+1608
000000000001183c         call       j_free                                      ; free
0000000000011841         cmp        byte [rbp+var_C9], 0x0
0000000000011848         jne        loc_1194b

                     loc_1184e:
000000000001184e         cmp        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+2199
0000000000011856         jne        loc_115b8

                     loc_1185c:
000000000001185c         mov        eax, 0xc                                    ; CODE XREF=set_regs+119, set_regs+2003, set_regs+2010
0000000000011861         jmp        loc_117d9

                     loc_11866:
0000000000011866         mov        rdi, qword [rbp+var_B8]                     ; argument "__size" for method j_malloc, CODE XREF=set_regs+179
000000000001186d         call       j_malloc                                    ; malloc
0000000000011872         test       rax, rax
0000000000011875         mov        qword [rbp+var_C0], rax
000000000001187c         mov        byte [rbp+var_C9], 0x1
0000000000011883         jne        loc_11197

0000000000011889         mov        rdi, qword [rbp+var_88]
0000000000011890         test       rdi, rdi
0000000000011893         je         loc_1185c

0000000000011895         call       free_fail_stack_return.part.24              ; free_fail_stack_return.part.24
000000000001189a         jmp        loc_1185c

                     loc_1189c:
000000000001189c         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1792
00000000000118a3         call       j_free                                      ; free
00000000000118a8         mov        rdi, qword [rbp+var_88]
00000000000118af         test       rdi, rdi
00000000000118b2         jne        loc_117d2

00000000000118b8         jmp        loc_117d7

                     loc_118bd:
00000000000118bd         mov        qword [rbp+var_88], 0x0                     ; CODE XREF=set_regs+85
00000000000118c8         jmp        loc_1113d

                     loc_118cd:
00000000000118cd         lea        rsi, qword [rax+rax*2]                      ; CODE XREF=set_regs+1160
00000000000118d1         mov        rax, qword [rbp+var_88]
00000000000118d8         mov        qword [rbp+var_A0], rdx
00000000000118df         shl        rsi, 0x5                                    ; argument "__size" for method j_realloc
00000000000118e3         mov        rdi, qword [rax+0x10]                       ; argument "__ptr" for method j_realloc
00000000000118e7         call       j_realloc                                   ; realloc
00000000000118ec         test       rax, rax
00000000000118ef         je         loc_11935

00000000000118f1         mov        rcx, qword [rbp+var_88]
00000000000118f8         mov        rdx, qword [rbp+var_A0]
00000000000118ff         shl        qword [rcx+8], 0x1
0000000000011903         mov        qword [rcx+0x10], rax
0000000000011907         jmp        loc_11552

                     loc_1190c:
000000000001190c         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1304
0000000000011910         call       j_free                                      ; free
0000000000011915         cmp        byte [rbp+var_C9], 0x0
000000000001191c         je         loc_117d7

0000000000011922         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free
0000000000011929         call       j_free                                      ; free
000000000001192e         xor        eax, eax
0000000000011930         jmp        loc_117d9

                     loc_11935:
0000000000011935         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+2095
0000000000011939         call       j_free                                      ; free
000000000001193e         cmp        byte [rbp+var_C9], 0x0
0000000000011945         je         loc_115b8

                     loc_1194b:
000000000001194b         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1266, set_regs+1928
0000000000011952         call       j_free                                      ; free
0000000000011957         jmp        loc_1184e

                     loc_1195c:
000000000001195c         mov        rdi, qword [rbp+var_60]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1504
0000000000011960         call       j_free                                      ; free
0000000000011965         cmp        byte [rbp+var_C9], 0x0
000000000001196c         mov        eax, 0x1
0000000000011971         je         loc_117d9

0000000000011977         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free
000000000001197e         mov        dword [rbp+var_88], eax
0000000000011984         call       j_free                                      ; free
0000000000011989         mov        eax, dword [rbp+var_88]
000000000001198f         jmp        loc_117d9

                     loc_11994:
0000000000011994         mov        rdi, qword [rbp+var_C0]                     ; argument "__ptr" for method j_free, CODE XREF=set_regs+1370
000000000001199b         call       j_free                                      ; free
00000000000119a0         jmp        loc_11620

                     loc_119a5:
00000000000119a5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=set_regs+1830
                        ; endp
00000000000119aa         align      16                                          ; End of unwind block (FDE at 0x1f508)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     get_subexp_sub.isra.32:
00000000000119b0         push       r15                                         ; Begin of unwind block (FDE at 0x1f538), CODE XREF=transit_state_bkref.isra.34+710, transit_state_bkref.isra.34+1789
00000000000119b2         push       r14
00000000000119b4         mov        r14, rcx
00000000000119b7         push       r13
00000000000119b9         push       r12
00000000000119bb         mov        r13, rsi
00000000000119be         push       rbp
00000000000119bf         push       rbx
00000000000119c0         lea        rsi, qword [rdx+0x10]
00000000000119c4         mov        rbp, rdx
00000000000119c7         mov        r9, r8
00000000000119ca         mov        r12, r8
00000000000119cd         sub        rsp, 0x20
00000000000119d1         mov        rcx, qword [rdx+8]
00000000000119d5         mov        r8, r14
00000000000119d8         push       0x8
00000000000119da         mov        rdx, qword [rdx]
00000000000119dd         mov        rbx, rdi
00000000000119e0         call       check_arrival                               ; check_arrival
00000000000119e5         test       eax, eax
00000000000119e7         pop        rdx
00000000000119e8         pop        rcx
00000000000119e9         je         loc_11a00

                     loc_119eb:
00000000000119eb         add        rsp, 0x18                                   ; CODE XREF=get_subexp_sub.isra.32+401
00000000000119ef         pop        rbx
00000000000119f0         pop        rbp
00000000000119f1         pop        r12
00000000000119f3         pop        r13
00000000000119f5         pop        r14
00000000000119f7         pop        r15
00000000000119f9         ret
                        ; endp
00000000000119fa         align      512

                     loc_11a00:
0000000000011a00         mov        rax, qword [rbx+0xc8]                       ; CODE XREF=get_subexp_sub.isra.32+57
0000000000011a07         mov        rdx, qword [rbx+0xd0]
0000000000011a0e         mov        r15, qword [rbp+8]
0000000000011a12         mov        rcx, qword [r13]
0000000000011a16         mov        rdi, qword [rbx+0xd8]
0000000000011a1d         cmp        rax, rdx
0000000000011a20         mov        rsi, r15
0000000000011a23         jge        loc_11ac0

                     loc_11a29:
0000000000011a29         lea        rdx, qword [rax+rax*4]                      ; CODE XREF=get_subexp_sub.isra.32+379
0000000000011a2d         shl        rdx, 0x3
0000000000011a31         test       rax, rax
0000000000011a34         jle        loc_11a41

0000000000011a36         lea        r8, qword [rdi+rdx-0x28]
0000000000011a3b         cmp        r12, qword [r8+8]
0000000000011a3f         je         loc_11ab0

                     loc_11a41:
0000000000011a41         add        rdi, rdx                                    ; CODE XREF=get_subexp_sub.isra.32+132, get_subexp_sub.isra.32+261
0000000000011a44         xor        edx, edx
0000000000011a46         cmp        r15, rcx
0000000000011a49         sete       dl
0000000000011a4c         add        rax, 0x1
0000000000011a50         mov        qword [rdi], r14
0000000000011a53         neg        edx
0000000000011a55         mov        qword [rdi+8], r12
0000000000011a59         mov        qword [rdi+0x10], rcx
0000000000011a5d         mov        word [rdi+0x22], dx
0000000000011a61         mov        qword [rdi+0x18], r15
0000000000011a65         mov        qword [rbx+0xc8], rax
0000000000011a6c         mov        byte [rdi+0x20], 0x0
0000000000011a70         mov        rax, r15
0000000000011a73         movsxd     rdx, dword [rbx+0xe0]
0000000000011a7a         sub        rax, rcx
0000000000011a7d         cmp        rdx, rax
0000000000011a80         jge        loc_11a8c

0000000000011a82         sub        r15d, ecx
0000000000011a85         mov        dword [rbx+0xe0], r15d

                     loc_11a8c:
0000000000011a8c         add        rsi, r12                                    ; CODE XREF=get_subexp_sub.isra.32+208
0000000000011a8f         sub        rsi, qword [r13]
0000000000011a93         add        rsp, 0x18
0000000000011a97         mov        rdi, rbx
0000000000011a9a         pop        rbx
0000000000011a9b         pop        rbp
0000000000011a9c         pop        r12
0000000000011a9e         pop        r13
0000000000011aa0         pop        r14
0000000000011aa2         pop        r15
0000000000011aa4         jmp        clean_state_log_if_needed                   ; clean_state_log_if_needed
                        ; endp
0000000000011aa9         align      16

                     loc_11ab0:
0000000000011ab0         mov        byte [r8+0x20], 0x1                         ; CODE XREF=get_subexp_sub.isra.32+143
0000000000011ab5         jmp        loc_11a41
0000000000011ab7         align      64

                     loc_11ac0:
0000000000011ac0         lea        rsi, qword [rdx+rdx*4]                      ; CODE XREF=get_subexp_sub.isra.32+115
0000000000011ac4         mov        qword [rsp+0x48+var_40], rcx
0000000000011ac9         shl        rsi, 0x4                                    ; argument "__size" for method j_realloc
0000000000011acd         call       j_realloc                                   ; realloc
0000000000011ad2         test       rax, rax
0000000000011ad5         mov        rcx, qword [rsp+0x48+var_40]
0000000000011ada         je         loc_11b30

0000000000011adc         mov        rsi, qword [rbx+0xc8]
0000000000011ae3         mov        rdx, qword [rbx+0xd0]
0000000000011aea         mov        qword [rbx+0xd8], rax
0000000000011af1         mov        qword [rsp+0x48+var_40], rcx
0000000000011af6         lea        rsi, qword [rsi+rsi*4]
0000000000011afa         lea        rdx, qword [rdx+rdx*4]
0000000000011afe         lea        rdi, qword [rax+rsi*8]                      ; argument "__s" for method j_memset
0000000000011b02         shl        rdx, 0x3                                    ; argument "__n" for method j_memset
0000000000011b06         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000011b08         call       j_memset                                    ; memset
0000000000011b0d         shl        qword [rbx+0xd0], 0x1
0000000000011b14         mov        rax, qword [rbx+0xc8]
0000000000011b1b         mov        rdi, qword [rbx+0xd8]
0000000000011b22         mov        rsi, qword [rbp+8]
0000000000011b26         mov        rcx, qword [rsp+0x48+var_40]
0000000000011b2b         jmp        loc_11a29

                     loc_11b30:
0000000000011b30         mov        rdi, qword [rbx+0xd8]                       ; argument "__ptr" for method j_free, CODE XREF=get_subexp_sub.isra.32+298
0000000000011b37         call       j_free                                      ; free
0000000000011b3c         mov        eax, 0xc
0000000000011b41         jmp        loc_119eb
0000000000011b46         align      16                                          ; End of unwind block (FDE at 0x1f538)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_5C: int32_t, -92
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232


                     transit_state_bkref.isra.34:
0000000000011b50         push       r15                                         ; Begin of unwind block (FDE at 0x1f5a4), CODE XREF=transit_state_bkref.isra.34+2090, merge_state_with_log+449, re_search_internal+5802
0000000000011b52         push       r14
0000000000011b54         push       r13
0000000000011b56         push       r12
0000000000011b58         push       rbp
0000000000011b59         push       rbx
0000000000011b5a         sub        rsp, 0xb8
0000000000011b61         mov        r15, qword [rdi+0x48]
0000000000011b65         mov        rax, qword [fs:0x28]
0000000000011b6e         mov        qword [rsp+0xe8+var_40], rax
0000000000011b76         xor        eax, eax
0000000000011b78         cmp        qword [rsi], 0x0
0000000000011b7c         mov        rax, qword [rdi+0x98]
0000000000011b83         mov        qword [rsp+0xe8+var_A0], rsi
0000000000011b88         mov        qword [rsp+0xe8+var_A8], rdx
0000000000011b8d         mov        qword [rsp+0xe8+var_B0], rax
0000000000011b92         jle        loc_11ec0

0000000000011b98         lea        rax, qword [r15*8]
0000000000011ba0         mov        r14, rdi
0000000000011ba3         mov        qword [rsp+0xe8+var_E8], 0x0
0000000000011bab         mov        qword [rsp+0xe8+var_E0], r15
0000000000011bb0         mov        qword [rsp+0xe8+var_88], rax
0000000000011bb5         lea        rax, qword [rsp+0xe8+var_58]
0000000000011bbd         mov        qword [rsp+0xe8+var_80], rax
0000000000011bc2         lea        rax, qword [rsp+0xe8+var_5C]
0000000000011bca         mov        qword [rsp+0xe8+var_70], rax
0000000000011bcf         jmp        loc_11c17
0000000000011bd1         align      8

                     loc_11bd8:
0000000000011bd8         test       al, 0x1                                     ; CODE XREF=transit_state_bkref.isra.34+285
0000000000011bda         je         loc_11c00

0000000000011bdc         and        edx, 0x8
0000000000011bdf         jne        loc_11c00

                     loc_11be1:
0000000000011be1         test       cl, 0x20                                    ; CODE XREF=transit_state_bkref.isra.34+294, transit_state_bkref.isra.34+302
0000000000011be4         je         loc_11bea

0000000000011be6         test       al, 0x2
0000000000011be8         je         loc_11c00

                     loc_11bea:
0000000000011bea         and        ecx, 0x80                                   ; CODE XREF=transit_state_bkref.isra.34+148
0000000000011bf0         je         loc_11c90

0000000000011bf6         test       al, 0x8
0000000000011bf8         jne        loc_11c90

0000000000011bfe         nop

                     loc_11c00:
0000000000011c00         mov        rdi, qword [rsp+0xe8+var_A0]                ; CODE XREF=transit_state_bkref.isra.34+138, transit_state_bkref.isra.34+143, transit_state_bkref.isra.34+152, transit_state_bkref.isra.34+237, transit_state_bkref.isra.34+308, transit_state_bkref.isra.34+976, transit_state_bkref.isra.34+1335
0000000000011c05         add        qword [rsp+0xe8+var_E8], 0x1
0000000000011c0a         mov        rax, qword [rsp+0xe8+var_E8]
0000000000011c0e         cmp        rax, qword [rdi]
0000000000011c11         jge        loc_11ec0

                     loc_11c17:
0000000000011c17         mov        rax, qword [rsp+0xe8+var_A8]                ; CODE XREF=transit_state_bkref.isra.34+127
0000000000011c1c         mov        rdi, qword [rsp+0xe8+var_E8]
0000000000011c20         mov        rax, qword [rax]
0000000000011c23         mov        r13, qword [rax+rdi*8]
0000000000011c27         mov        rdi, qword [rsp+0xe8+var_B0]
0000000000011c2c         mov        rax, qword [rdi]
0000000000011c2f         mov        rbx, r13
0000000000011c32         shl        rbx, 0x4
0000000000011c36         add        rax, rbx
0000000000011c39         cmp        byte [rax+8], 0x4
0000000000011c3d         jne        loc_11c00

0000000000011c3f         mov        ebp, dword [rax+8]
0000000000011c42         test       ebp, 0x3ff00
0000000000011c48         je         loc_11c90

0000000000011c4a         mov        edx, dword [r14+0xa0]
0000000000011c51         mov        rsi, qword [rsp+0xe8+var_E0]
0000000000011c56         mov        rdi, r14
0000000000011c59         call       re_string_context_at                        ; re_string_context_at
0000000000011c5e         mov        edx, ebp
0000000000011c60         shr        edx, 0x8
0000000000011c63         mov        ecx, edx
0000000000011c65         and        cx, 0x3ff
0000000000011c6a         test       dl, 0x4
0000000000011c6d         jne        loc_11bd8

0000000000011c73         and        edx, 0x8
0000000000011c76         je         loc_11be1

0000000000011c7c         test       al, 0x1
0000000000011c7e         je         loc_11be1

0000000000011c84         jmp        loc_11c00
0000000000011c89         align      16

                     loc_11c90:
0000000000011c90         mov        rdi, qword [r14+0xc8]                       ; CODE XREF=transit_state_bkref.isra.34+160, transit_state_bkref.isra.34+168, transit_state_bkref.isra.34+248
0000000000011c97         mov        rax, qword [r14+0x98]
0000000000011c9e         xor        ecx, ecx
0000000000011ca0         mov        r10, qword [r14+8]
0000000000011ca4         mov        r9, qword [rsp+0xe8+var_E0]
0000000000011ca9         mov        qword [rsp+0xe8+var_78], rdi
0000000000011cae         mov        qword [rsp+0xe8+var_98], rax

                     loc_11cb3:
0000000000011cb3         cmp        rcx, rdi                                    ; CODE XREF=transit_state_bkref.isra.34+871
0000000000011cb6         jge        loc_11d0b

0000000000011cb8         lea        rax, qword [rcx+rdi]
0000000000011cbc         mov        r11, qword [r14+0xd8]
0000000000011cc3         mov        rsi, rax
0000000000011cc6         shr        rsi, 0x3f
0000000000011cca         add        rsi, rax
0000000000011ccd         sar        rsi, 0x1
0000000000011cd0         lea        rax, qword [rsi+rsi*4]
0000000000011cd4         cmp        r9, qword [r11+rax*8+8]
0000000000011cd9         jle        loc_11d06

0000000000011cdb         jmp        loc_11ea8

                     loc_11ce0:
0000000000011ce0         lea        rdx, qword [rsi+rcx]                        ; CODE XREF=transit_state_bkref.isra.34+441
0000000000011ce4         mov        rax, rdx
0000000000011ce7         shr        rax, 0x3f
0000000000011ceb         add        rax, rdx
0000000000011cee         sar        rax, 0x1
0000000000011cf1         lea        rdx, qword [rax+rax*4]
0000000000011cf5         mov        r8, rax
0000000000011cf8         cmp        r9, qword [r11+rdx*8+8]
0000000000011cfd         jg         loc_11eb0

0000000000011d03         mov        rsi, rax

                     loc_11d06:
0000000000011d06         cmp        rsi, rcx                                    ; CODE XREF=transit_state_bkref.isra.34+393
0000000000011d09         jg         loc_11ce0

                     loc_11d0b:
0000000000011d0b         cmp        qword [rsp+0xe8+var_78], rcx                ; CODE XREF=transit_state_bkref.isra.34+358
0000000000011d10         jle        loc_11d36

0000000000011d12         mov        rdx, qword [r14+0xd8]
0000000000011d19         lea        rax, qword [rcx+rcx*4]
0000000000011d1d         mov        rdi, qword [rsp+0xe8+var_E0]
0000000000011d22         lea        rax, qword [rdx+rax*8]
0000000000011d26         cmp        qword [rax+8], rdi
0000000000011d2a         jne        loc_11d36

0000000000011d2c         cmp        rcx, 0xffffffffffffffff
0000000000011d30         jne        loc_11f06

                     loc_11d36:
0000000000011d36         mov        rax, qword [rsp+0xe8+var_98]                ; CODE XREF=transit_state_bkref.isra.34+448, transit_state_bkref.isra.34+474, transit_state_bkref.isra.34+944
0000000000011d3b         cmp        qword [r14+0xe8], 0x0
0000000000011d43         mov        rdx, qword [rax]
0000000000011d46         mov        rax, qword [rdx+rbx]
0000000000011d4a         mov        qword [rsp+0xe8+var_90], rax
0000000000011d4f         jle        loc_11f0b

0000000000011d55         mov        qword [rsp+0xe8+var_B8], r13
0000000000011d5a         mov        qword [rsp+0xe8+var_C0], 0x0
0000000000011d63         mov        r13, r10

                     loc_11d66:
0000000000011d66         mov        rax, qword [r14+0xf8]                       ; CODE XREF=transit_state_bkref.isra.34+601
0000000000011d6d         mov        rbx, qword [rsp+0xe8+var_C0]
0000000000011d72         mov        rdi, qword [rsp+0xe8+var_90]
0000000000011d77         mov        rbx, qword [rax+rbx*8]
0000000000011d7b         mov        rax, qword [rbx+8]
0000000000011d7f         shl        rax, 0x4
0000000000011d83         cmp        rdi, qword [rdx+rax]
0000000000011d87         je         loc_11db0

                     loc_11d89:
0000000000011d89         add        qword [rsp+0xe8+var_C0], 0x1                ; CODE XREF=transit_state_bkref.isra.34+1447, transit_state_bkref.isra.34+1829, transit_state_bkref.isra.34+1925
0000000000011d8f         mov        rax, qword [rsp+0xe8+var_C0]
0000000000011d94         cmp        rax, qword [r14+0xe8]
0000000000011d9b         jge        loc_12411

0000000000011da1         mov        rax, qword [rsp+0xe8+var_98]
0000000000011da6         mov        rdx, qword [rax]
0000000000011da9         jmp        loc_11d66
0000000000011dab         align      16

                     loc_11db0:
0000000000011db0         cmp        qword [rbx+0x20], 0x0                       ; CODE XREF=transit_state_bkref.isra.34+567
0000000000011db5         mov        r11, qword [rbx]
0000000000011db8         jle        loc_12422

0000000000011dbe         mov        rcx, qword [rsp+0xe8+var_E0]
0000000000011dc3         mov        r8, r13
0000000000011dc6         xor        ebp, ebp
0000000000011dc8         mov        r13, rbx
0000000000011dcb         mov        rbx, rcx
0000000000011dce         jmp        loc_11e3c

                     loc_11dd0:
0000000000011dd0         lea        rsi, qword [r8+r11]                         ; argument "__s2" for method j_memcmp, CODE XREF=transit_state_bkref.isra.34+779, transit_state_bkref.isra.34+844
0000000000011dd4         lea        rdi, qword [r8+rbx]                         ; argument "__s1" for method j_memcmp
0000000000011dd8         mov        qword [rsp+0xe8+var_C8], r9
0000000000011ddd         mov        qword [rsp+0xe8+var_D0], r11
0000000000011de2         mov        qword [rsp+0xe8+var_D8], r8
0000000000011de7         call       j_memcmp                                    ; memcmp
0000000000011dec         test       eax, eax
0000000000011dee         mov        r8, qword [rsp+0xe8+var_D8]
0000000000011df3         mov        r11, qword [rsp+0xe8+var_D0]
0000000000011df8         mov        r9, qword [rsp+0xe8+var_C8]
0000000000011dfd         jne        loc_122c8

                     loc_11e03:
0000000000011e03         mov        r8, qword [rsp+0xe8+var_E0]                 ; CODE XREF=transit_state_bkref.isra.34+773
0000000000011e08         mov        rcx, qword [rsp+0xe8+var_B8]
0000000000011e0d         mov        rdx, r9
0000000000011e10         mov        rsi, r13
0000000000011e13         mov        rdi, r14
0000000000011e16         call       get_subexp_sub.isra.32                      ; get_subexp_sub.isra.32
0000000000011e1b         cmp        eax, 0x1
0000000000011e1e         mov        r8, qword [r14+8]
0000000000011e22         ja         loc_11ec8

0000000000011e28         add        rbp, 0x1
0000000000011e2c         cmp        rbp, qword [r13+0x20]
0000000000011e30         mov        r11, r15
0000000000011e33         mov        rbx, r12
0000000000011e36         jge        loc_120e8

                     loc_11e3c:
0000000000011e3c         mov        rax, qword [r13+0x28]                       ; CODE XREF=transit_state_bkref.isra.34+638
0000000000011e40         mov        r9, qword [rax+rbp*8]
0000000000011e44         mov        r15, qword [r9+8]
0000000000011e48         mov        rdx, r15
0000000000011e4b         sub        rdx, r11
0000000000011e4e         test       rdx, rdx
0000000000011e51         lea        r12, qword [rdx+rbx]
0000000000011e55         jle        loc_11e03

0000000000011e57         cmp        qword [r14+0x30], r12
0000000000011e5b         jge        loc_11dd0

0000000000011e61         cmp        qword [r14+0x58], r12
0000000000011e65         mov        qword [rsp+0xe8+var_D0], rdx
0000000000011e6a         mov        qword [rsp+0xe8+var_D8], r9
0000000000011e6f         jl         loc_122c8

0000000000011e75         mov        rsi, r12
0000000000011e78         mov        rdi, r14
0000000000011e7b         mov        qword [rsp+0xe8+var_C8], r11
0000000000011e80         call       clean_state_log_if_needed                   ; clean_state_log_if_needed
0000000000011e85         test       eax, eax
0000000000011e87         jne        loc_11ec8

0000000000011e89         mov        r8, qword [r14+8]
0000000000011e8d         mov        rdx, qword [rsp+0xe8+var_D0]
0000000000011e92         mov        r9, qword [rsp+0xe8+var_D8]
0000000000011e97         mov        r11, qword [rsp+0xe8+var_C8]
0000000000011e9c         jmp        loc_11dd0
0000000000011ea1         align      8

                     loc_11ea8:
0000000000011ea8         mov        r8, rsi                                     ; CODE XREF=transit_state_bkref.isra.34+395
0000000000011eab         mov        rsi, rdi
0000000000011eae         nop

                     loc_11eb0:
0000000000011eb0         lea        rcx, qword [r8+1]                           ; CODE XREF=transit_state_bkref.isra.34+429
0000000000011eb4         mov        rdi, rsi
0000000000011eb7         jmp        loc_11cb3
0000000000011ebc         align      64

                     loc_11ec0:
0000000000011ec0         xor        eax, eax                                    ; CODE XREF=transit_state_bkref.isra.34+66, transit_state_bkref.isra.34+193
0000000000011ec2         nop        word [rax+rax]

                     loc_11ec8:
0000000000011ec8         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=transit_state_bkref.isra.34+722, transit_state_bkref.isra.34+823, transit_state_bkref.isra.34+1694, transit_state_bkref.isra.34+1801, transit_state_bkref.isra.34+1902, transit_state_bkref.isra.34+2016, transit_state_bkref.isra.34+2070, transit_state_bkref.isra.34+2110, transit_state_bkref.isra.34+2140, transit_state_bkref.isra.34+2169
0000000000011ed0         xor        rbx, qword [fs:0x28]
0000000000011ed9         jne        loc_1242c

0000000000011edf         add        rsp, 0xb8
0000000000011ee6         pop        rbx
0000000000011ee7         pop        rbp
0000000000011ee8         pop        r12
0000000000011eea         pop        r13
0000000000011eec         pop        r14
0000000000011eee         pop        r15
0000000000011ef0         ret
                        ; endp
0000000000011ef1         align      8

                     loc_11ef8:
0000000000011ef8         add        rax, 0x28                                   ; CODE XREF=transit_state_bkref.isra.34+953
0000000000011efc         cmp        byte [rax-8], 0x0
0000000000011f00         je         loc_11d36

                     loc_11f06:
0000000000011f06         cmp        r13, qword [rax]                            ; CODE XREF=transit_state_bkref.isra.34+480
0000000000011f09         jne        loc_11ef8

                     loc_11f0b:
0000000000011f0b         mov        rax, qword [rsp+0xe8+var_78]                ; CODE XREF=transit_state_bkref.isra.34+511

                     loc_11f10:
0000000000011f10         cmp        qword [rsp+0xe8+var_78], rax                ; CODE XREF=transit_state_bkref.isra.34+2253
0000000000011f15         mov        dword [rsp+0xe8+var_5C], 0x0
0000000000011f20         jge        loc_11c00

0000000000011f26         lea        rax, qword [r13*8]
0000000000011f2e         mov        r12, qword [rsp+0xe8+var_78]
0000000000011f33         mov        rbp, qword [rsp+0xe8+var_B0]
0000000000011f38         mov        qword [rsp+0xe8+var_98], rax
0000000000011f3d         lea        rax, qword [r13+r13*2]
0000000000011f42         lea        r8, qword [r12+r12*4]
0000000000011f46         shl        rax, 0x3
0000000000011f4a         mov        qword [rsp+0xe8+var_90], rax
0000000000011f4f         lea        r15, qword [r8*8]
0000000000011f57         jmp        loc_1208d
0000000000011f5c         align      32

                     loc_11f60:
0000000000011f60         mov        rcx, qword [rbp+0x28]                       ; CODE XREF=transit_state_bkref.isra.34+1390
0000000000011f64         mov        rdi, qword [rsp+0xe8+var_90]
0000000000011f69         mov        rcx, qword [rcx+rdi+0x10]
0000000000011f6e         mov        rcx, qword [rcx]
0000000000011f71         lea        rcx, qword [rcx+rcx*2]
0000000000011f75         lea        rcx, qword [rdx+rcx*8]
0000000000011f79         mov        qword [rsp+0xe8+var_D0], rcx

                     loc_11f7e:
0000000000011f7e         add        rbx, qword [rsp+0xe8+var_E0]                ; CODE XREF=transit_state_bkref.isra.34+1422
0000000000011f83         mov        edx, dword [r14+0xa0]
0000000000011f8a         mov        rdi, r14
0000000000011f8d         sub        rbx, rax
0000000000011f90         lea        rsi, qword [rbx-1]
0000000000011f94         call       re_string_context_at                        ; re_string_context_at
0000000000011f99         mov        rsi, qword [rsp+0xe8+var_88]
0000000000011f9e         mov        ecx, eax
0000000000011fa0         mov        rax, qword [r14+0xb8]
0000000000011fa7         lea        r10, qword [rbx*8]
0000000000011faf         mov        qword [rsp+0xe8+var_D8], 0x0
0000000000011fb8         lea        r11, qword [rax+r10]
0000000000011fbc         mov        rax, qword [rax+rsi]
0000000000011fc0         mov        rdx, qword [r11]
0000000000011fc3         test       rax, rax
0000000000011fc6         je         loc_11fd1

0000000000011fc8         mov        rax, qword [rax+0x10]
0000000000011fcc         mov        qword [rsp+0xe8+var_D8], rax

                     loc_11fd1:
0000000000011fd1         test       rdx, rdx                                    ; CODE XREF=transit_state_bkref.isra.34+1142
0000000000011fd4         je         loc_122f0

0000000000011fda         mov        rsi, qword [rdx+0x50]
0000000000011fde         mov        rdi, qword [rsp+0xe8+var_80]
0000000000011fe3         mov        rdx, qword [rsp+0xe8+var_D0]
0000000000011fe8         mov        qword [rsp+0xe8+var_B8], r10
0000000000011fed         mov        dword [rsp+0xe8+var_C0], ecx
0000000000011ff1         call       re_node_set_init_union                      ; re_node_set_init_union
0000000000011ff6         test       eax, eax
0000000000011ff8         mov        dword [rsp+0xe8+var_5C], eax
0000000000011fff         mov        ecx, dword [rsp+0xe8+var_C0]
0000000000012003         mov        r10, qword [rsp+0xe8+var_B8]
0000000000012008         jne        loc_12398

000000000001200e         add        r10, qword [r14+0xb8]
0000000000012015         mov        rdx, qword [rsp+0xe8+var_80]
000000000001201a         mov        rsi, rbp
000000000001201d         mov        rdi, qword [rsp+0xe8+var_70]
0000000000012022         mov        qword [rsp+0xe8+var_C0], r10
0000000000012027         call       re_acquire_state_context                    ; re_acquire_state_context
000000000001202c         mov        r10, qword [rsp+0xe8+var_C0]
0000000000012031         mov        rdi, qword [rsp+0xe8+var_48]                ; argument "__ptr" for method j_free
0000000000012039         mov        qword [r10], rax
000000000001203c         call       j_free                                      ; free
0000000000012041         mov        rdx, qword [r14+0xb8]
0000000000012048         cmp        qword [rdx+rbx*8], 0x0
000000000001204d         je         loc_12321

                     loc_12053:
0000000000012053         cmp        qword [rsp+0xe8+var_C8], 0x0                ; CODE XREF=transit_state_bkref.isra.34+1995, transit_state_bkref.isra.34+2010
0000000000012059         jne        loc_12078

000000000001205b         mov        rax, qword [rsp+0xe8+var_88]
0000000000012060         mov        rbx, qword [rsp+0xe8+var_D8]
0000000000012065         mov        rax, qword [rdx+rax]
0000000000012069         cmp        qword [rax+0x10], rbx
000000000001206d         jg         loc_12338

0000000000012073         nop        dword [rax+rax]

                     loc_12078:
0000000000012078         add        r12, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1289, transit_state_bkref.isra.34+1354, transit_state_bkref.isra.34+1365, transit_state_bkref.isra.34+2104
000000000001207c         add        r15, 0x28
0000000000012080         cmp        r12, qword [r14+0xc8]
0000000000012087         jge        loc_11c00

                     loc_1208d:
000000000001208d         mov        rax, qword [r14+0xd8]                       ; CODE XREF=transit_state_bkref.isra.34+1031
0000000000012094         add        rax, r15
0000000000012097         cmp        r13, qword [rax]
000000000001209a         jne        loc_12078

000000000001209c         mov        rdi, qword [rsp+0xe8+var_E0]
00000000000120a1         cmp        rdi, qword [rax+8]
00000000000120a5         jne        loc_12078

00000000000120a7         mov        rbx, qword [rax+0x18]
00000000000120ab         mov        rax, qword [rax+0x10]
00000000000120af         mov        rdx, qword [rbp+0x30]
00000000000120b3         mov        rcx, rbx
00000000000120b6         sub        rcx, rax
00000000000120b9         mov        qword [rsp+0xe8+var_C8], rcx
00000000000120be         je         loc_11f60

00000000000120c4         mov        rcx, qword [rbp+0x18]
00000000000120c8         mov        rdi, qword [rsp+0xe8+var_98]
00000000000120cd         mov        rcx, qword [rcx+rdi]
00000000000120d1         lea        rcx, qword [rcx+rcx*2]
00000000000120d5         lea        rcx, qword [rdx+rcx*8]
00000000000120d9         mov        qword [rsp+0xe8+var_D0], rcx
00000000000120de         jmp        loc_11f7e
00000000000120e3         align      8

                     loc_120e8:
00000000000120e8         mov        rbx, r13                                    ; CODE XREF=transit_state_bkref.isra.34+742
00000000000120eb         mov        r13, r8

                     loc_120ee:
00000000000120ee         lea        r11, qword [r15+1]                          ; CODE XREF=transit_state_bkref.isra.34+1946

                     loc_120f2:
00000000000120f2         cmp        qword [rsp+0xe8+var_E0], r11                ; CODE XREF=transit_state_bkref.isra.34+1937, transit_state_bkref.isra.34+2263
00000000000120f7         jl         loc_11d89

00000000000120fd         mov        rax, r12
0000000000012100         lea        r15, qword [r11*8]
0000000000012108         mov        r12, rbx
000000000001210b         mov        rbx, r11
000000000001210e         mov        r11, r13
0000000000012111         mov        r13, rax
0000000000012114         nop        dword [rax]

                     loc_12118:
0000000000012118         mov        rax, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+1820
000000000001211b         sub        rax, qword [r12]
000000000001211f         test       rax, rax
0000000000012122         jle        loc_12145

0000000000012124         cmp        qword [r14+0x30], r13
0000000000012128         jle        loc_123b1

                     loc_1212e:
000000000001212e         movzx      ecx, byte [r11+rbx-1]                       ; CODE XREF=transit_state_bkref.isra.34+2179
0000000000012134         lea        rax, qword [r13+1]
0000000000012138         cmp        byte [r11+r13], cl
000000000001213c         jne        loc_12272

0000000000012142         mov        r13, rax

                     loc_12145:
0000000000012145         mov        rax, qword [r14+0xb8]                       ; CODE XREF=transit_state_bkref.isra.34+1490
000000000001214c         mov        rax, qword [rax+r15]
0000000000012150         test       rax, rax
0000000000012153         je         loc_1225f

0000000000012159         mov        rcx, qword [rax+0x10]
000000000001215d         test       rcx, rcx
0000000000012160         jle        loc_1225f

0000000000012166         mov        rdi, qword [rax+0x18]
000000000001216a         mov        rax, qword [rsp+0xe8+var_98]
000000000001216f         xor        edx, edx
0000000000012171         mov        r8, qword [rsp+0xe8+var_90]
0000000000012176         mov        rsi, qword [rax]
0000000000012179         jmp        loc_1218d
000000000001217b         align      128

                     loc_12180:
0000000000012180         add        rdx, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1615, transit_state_bkref.isra.34+1620
0000000000012184         cmp        rcx, rdx
0000000000012187         je         loc_1225f

                     loc_1218d:
000000000001218d         mov        rbp, qword [rdi+rdx*8]                      ; CODE XREF=transit_state_bkref.isra.34+1577
0000000000012191         mov        rax, rbp
0000000000012194         shl        rax, 0x4
0000000000012198         add        rax, rsi
000000000001219b         cmp        byte [rax+8], 0x9
000000000001219f         jne        loc_12180

00000000000121a1         cmp        r8, qword [rax]
00000000000121a4         jne        loc_12180

00000000000121a6         cmp        rbp, 0xffffffffffffffff
00000000000121aa         je         loc_1225f

00000000000121b0         mov        rsi, qword [r12+0x10]
00000000000121b5         mov        rcx, qword [r12]
00000000000121b9         test       rsi, rsi
00000000000121bc         je         loc_12280

                     loc_121c2:
00000000000121c2         mov        qword [rsp+0xe8+var_D8], r11                ; CODE XREF=transit_state_bkref.isra.34+1891
00000000000121c7         mov        rdx, qword [r12+8]
00000000000121cc         sub        rsp, 0x8
00000000000121d0         push       0x9
00000000000121d2         mov        r9, rbx
00000000000121d5         mov        r8, rbp
00000000000121d8         mov        rdi, r14
00000000000121db         call       check_arrival                               ; check_arrival
00000000000121e0         pop        rdx
00000000000121e1         cmp        eax, 0x1
00000000000121e4         pop        rcx
00000000000121e5         mov        r11, qword [rsp+0xe8+var_D8]
00000000000121ea         je         loc_1225f

00000000000121ec         test       eax, eax
00000000000121ee         jne        loc_11ec8

00000000000121f4         mov        rax, qword [r12+0x20]
00000000000121f9         cmp        rax, qword [r12+0x18]
00000000000121fe         je         loc_123d8

                     loc_12204:
0000000000012204         mov        esi, 0x28                                   ; argument "__size" for method j_calloc, CODE XREF=transit_state_bkref.isra.34+2236
0000000000012209         mov        edi, 0x1                                    ; argument "__nmemb" for method j_calloc
000000000001220e         call       j_calloc                                    ; calloc
0000000000012213         test       rax, rax
0000000000012216         je         loc_122b9

000000000001221c         mov        rdx, qword [r12+0x20]
0000000000012221         mov        rcx, qword [r12+0x28]
0000000000012226         mov        rsi, r12
0000000000012229         mov        r8, qword [rsp+0xe8+var_E0]
000000000001222e         mov        rdi, r14
0000000000012231         mov        qword [rcx+rdx*8], rax
0000000000012235         mov        rcx, qword [rsp+0xe8+var_B8]
000000000001223a         add        rdx, 0x1
000000000001223e         mov        qword [rax], rbp
0000000000012241         mov        qword [rax+8], rbx
0000000000012245         mov        qword [r12+0x20], rdx
000000000001224a         mov        rdx, rax
000000000001224d         call       get_subexp_sub.isra.32                      ; get_subexp_sub.isra.32
0000000000012252         cmp        eax, 0x1
0000000000012255         mov        r11, qword [r14+8]
0000000000012259         ja         loc_11ec8

                     loc_1225f:
000000000001225f         add        rbx, 0x1                                    ; CODE XREF=transit_state_bkref.isra.34+1539, transit_state_bkref.isra.34+1552, transit_state_bkref.isra.34+1591, transit_state_bkref.isra.34+1626, transit_state_bkref.isra.34+1690
0000000000012263         add        r15, 0x8
0000000000012267         cmp        qword [rsp+0xe8+var_E0], rbx
000000000001226c         jge        loc_12118

                     loc_12272:
0000000000012272         mov        r13, r11                                    ; CODE XREF=transit_state_bkref.isra.34+1516, transit_state_bkref.isra.34+2149
0000000000012275         jmp        loc_11d89
000000000001227a         align      128

                     loc_12280:
0000000000012280         mov        rsi, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+1644
0000000000012283         mov        edi, 0x18                                   ; argument "__nmemb" for method j_calloc
0000000000012288         mov        qword [rsp+0xe8+var_D0], r11
000000000001228d         sub        rsi, rcx
0000000000012290         mov        qword [rsp+0xe8+var_D8], rcx
0000000000012295         add        rsi, 0x1                                    ; argument "__size" for method j_calloc
0000000000012299         call       j_calloc                                    ; calloc
000000000001229e         test       rax, rax
00000000000122a1         mov        rsi, rax
00000000000122a4         mov        qword [r12+0x10], rax
00000000000122a9         mov        rcx, qword [rsp+0xe8+var_D8]
00000000000122ae         mov        r11, qword [rsp+0xe8+var_D0]
00000000000122b3         jne        loc_121c2

                     loc_122b9:
00000000000122b9         mov        eax, 0xc                                    ; CODE XREF=transit_state_bkref.isra.34+1734, transit_state_bkref.isra.34+2215
00000000000122be         jmp        loc_11ec8
00000000000122c3         align      8

                     loc_122c8:
00000000000122c8         mov        rcx, rbx                                    ; CODE XREF=transit_state_bkref.isra.34+685, transit_state_bkref.isra.34+799
00000000000122cb         mov        rbx, r13
00000000000122ce         mov        r13, r8
00000000000122d1         cmp        qword [rbx+0x20], rbp
00000000000122d5         jg         loc_11d89

00000000000122db         test       rbp, rbp
00000000000122de         mov        r12, rcx
00000000000122e1         je         loc_120f2

00000000000122e7         mov        r15, r11
00000000000122ea         jmp        loc_120ee
00000000000122ef         align      16

                     loc_122f0:
00000000000122f0         mov        rdx, qword [rsp+0xe8+var_D0]                ; CODE XREF=transit_state_bkref.isra.34+1156
00000000000122f5         mov        rdi, qword [rsp+0xe8+var_70]
00000000000122fa         mov        rsi, rbp
00000000000122fd         mov        qword [rsp+0xe8+var_C0], r11
0000000000012302         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000012307         mov        r11, qword [rsp+0xe8+var_C0]
000000000001230c         mov        rdx, qword [r14+0xb8]
0000000000012313         mov        qword [r11], rax
0000000000012316         cmp        qword [rdx+rbx*8], 0x0
000000000001231b         jne        loc_12053

                     loc_12321:
0000000000012321         mov        eax, dword [rsp+0xe8+var_5C]                ; CODE XREF=transit_state_bkref.isra.34+1277
0000000000012328         test       eax, eax
000000000001232a         je         loc_12053

0000000000012330         jmp        loc_11ec8
0000000000012335         align      8

                     loc_12338:
0000000000012338         mov        rax, qword [rsp+0xe8+var_D0]                ; CODE XREF=transit_state_bkref.isra.34+1309
000000000001233d         mov        rcx, qword [rsp+0xe8+var_E0]
0000000000012342         mov        rdi, r14
0000000000012345         lea        r8, qword [rax+0x10]
0000000000012349         lea        rbx, qword [rax+8]
000000000001234d         mov        rdx, r8
0000000000012350         mov        rsi, rbx
0000000000012353         mov        qword [rsp+0xe8+var_D8], r8
0000000000012358         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
000000000001235d         test       eax, eax
000000000001235f         mov        dword [rsp+0xe8+var_5C], eax
0000000000012366         jne        loc_11ec8

000000000001236c         mov        r8, qword [rsp+0xe8+var_D8]
0000000000012371         mov        rsi, rbx
0000000000012374         mov        rdi, r14
0000000000012377         mov        rdx, r8
000000000001237a         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
000000000001237f         test       eax, eax
0000000000012381         mov        dword [rsp+0xe8+var_5C], eax
0000000000012388         je         loc_12078

000000000001238e         jmp        loc_11ec8
0000000000012393         align      8

                     loc_12398:
0000000000012398         mov        rdi, qword [rsp+0xe8+var_48]                ; argument "__ptr" for method j_free, CODE XREF=transit_state_bkref.isra.34+1208
00000000000123a0         call       j_free                                      ; free
00000000000123a5         mov        eax, dword [rsp+0xe8+var_5C]
00000000000123ac         jmp        loc_11ec8

                     loc_123b1:
00000000000123b1         cmp        qword [r14+0x58], r13                       ; CODE XREF=transit_state_bkref.isra.34+1496
00000000000123b5         jle        loc_12272

00000000000123bb         lea        esi, dword [r13+1]
00000000000123bf         mov        rdi, r14
00000000000123c2         call       extend_buffers                              ; extend_buffers
00000000000123c7         test       eax, eax
00000000000123c9         jne        loc_11ec8

00000000000123cf         mov        r11, qword [r14+8]
00000000000123d3         jmp        loc_1212e

                     loc_123d8:
00000000000123d8         lea        rdx, qword [rax+rax+1]                      ; CODE XREF=transit_state_bkref.isra.34+1710
00000000000123dd         mov        rdi, qword [r12+0x28]                       ; argument "__ptr" for method j_realloc
00000000000123e2         lea        rsi, qword [rdx*8]                          ; argument "__size" for method j_realloc
00000000000123ea         mov        qword [rsp+0xe8+var_D8], rdx
00000000000123ef         call       j_realloc                                   ; realloc
00000000000123f4         test       rax, rax
00000000000123f7         je         loc_122b9

00000000000123fd         mov        rdx, qword [rsp+0xe8+var_D8]
0000000000012402         mov        qword [r12+0x28], rax
0000000000012407         mov        qword [r12+0x18], rdx
000000000001240c         jmp        loc_12204

                     loc_12411:
0000000000012411         mov        r13, qword [rsp+0xe8+var_B8]                ; CODE XREF=transit_state_bkref.isra.34+587
0000000000012416         mov        rax, qword [r14+0xc8]
000000000001241d         jmp        loc_11f10

                     loc_12422:
0000000000012422         mov        r12, qword [rsp+0xe8+var_E0]                ; CODE XREF=transit_state_bkref.isra.34+616
0000000000012427         jmp        loc_120f2

                     loc_1242c:
000000000001242c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=transit_state_bkref.isra.34+905
                        ; endp
0000000000012431         align      64                                          ; End of unwind block (FDE at 0x1f5a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     merge_state_with_log:
0000000000012440         push       r15                                         ; Begin of unwind block (FDE at 0x1f604), CODE XREF=re_search_internal+2012, re_search_internal+3011
0000000000012442         push       r14
0000000000012444         push       r13
0000000000012446         push       r12
0000000000012448         mov        r13, rdi
000000000001244b         push       rbp
000000000001244c         push       rbx
000000000001244d         mov        rbx, rsi
0000000000012450         sub        rsp, 0x38
0000000000012454         mov        r12, qword [rsi+0x48]
0000000000012458         mov        r14, qword [rsi+0xb8]
000000000001245f         mov        rax, qword [fs:0x28]
0000000000012468         mov        qword [rsp+0x68+var_40], rax
000000000001246d         xor        eax, eax
000000000001246f         mov        r15, qword [rsi+0x98]
0000000000012476         lea        rbp, qword [r12*8]
000000000001247e         add        r14, rbp
0000000000012481         cmp        qword [rsi+0xc0], r12
0000000000012488         jge        loc_124d0

000000000001248a         mov        qword [r14], rdx
000000000001248d         mov        rbp, rdx
0000000000012490         mov        qword [rsi+0xc0], r12

                     loc_12497:
0000000000012497         cmp        qword [r15+0x98], 0x0                       ; CODE XREF=merge_state_with_log+273, merge_state_with_log+289, merge_state_with_log+365, merge_state_with_log+382
000000000001249f         jne        loc_125c8

                     loc_124a5:
00000000000124a5         mov        rcx, qword [rsp+0x68+var_40]                ; CODE XREF=merge_state_with_log+434, merge_state_with_log+473, merge_state_with_log+482
00000000000124aa         xor        rcx, qword [fs:0x28]
00000000000124b3         mov        rax, rbp
00000000000124b6         jne        loc_12627

00000000000124bc         add        rsp, 0x38
00000000000124c0         pop        rbx
00000000000124c1         pop        rbp
00000000000124c2         pop        r12
00000000000124c4         pop        r13
00000000000124c6         pop        r14
00000000000124c8         pop        r15
00000000000124ca         ret
                        ; endp
00000000000124cb         align      16

                     loc_124d0:
00000000000124d0         mov        rax, qword [r14]                            ; CODE XREF=merge_state_with_log+72
00000000000124d3         test       rax, rax
00000000000124d6         je         loc_125b8

00000000000124dc         test       rdx, rdx
00000000000124df         mov        rax, qword [rax+0x50]
00000000000124e3         je         loc_12570

00000000000124e9         mov        r14, qword [rdx+0x50]
00000000000124ed         lea        rdi, qword [rsp+0x68+var_58]
00000000000124f2         mov        rdx, rax
00000000000124f5         mov        qword [rsp+0x68+var_68], rdi
00000000000124f9         mov        rsi, r14
00000000000124fc         call       re_node_set_init_union                      ; re_node_set_init_union
0000000000012501         test       eax, eax
0000000000012503         mov        dword [r13], eax
0000000000012507         jne        loc_12620

000000000001250d         mov        rax, qword [rbx+0x48]
0000000000012511         mov        edx, dword [rbx+0xa0]
0000000000012517         mov        rdi, rbx
000000000001251a         lea        rsi, qword [rax-1]
000000000001251e         call       re_string_context_at                        ; re_string_context_at
0000000000012523         mov        r8, qword [rbx+0xb8]
000000000001252a         mov        rdx, qword [rsp+0x68+var_68]
000000000001252e         mov        ecx, eax
0000000000012530         mov        rsi, r15
0000000000012533         mov        rdi, r13
0000000000012536         add        r8, rbp
0000000000012539         mov        qword [rsp+0x68+var_60], r8
000000000001253e         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000012543         mov        r8, qword [rsp+0x68+var_60]
0000000000012548         test       r14, r14
000000000001254b         mov        rbp, rax
000000000001254e         mov        qword [r8], rax
0000000000012551         je         loc_12497

0000000000012557         mov        rdi, qword [rsp+0x68+var_48]                ; argument "__ptr" for method j_free
000000000001255c         call       j_free                                      ; free
0000000000012561         jmp        loc_12497
0000000000012566         align      16

                     loc_12570:
0000000000012570         movdqu     xmm0, xmmword [rax]                         ; CODE XREF=merge_state_with_log+163
0000000000012574         mov        rdi, rbx
0000000000012577         mov        edx, dword [rsi+0xa0]
000000000001257d         lea        rsi, qword [r12-1]
0000000000012582         movaps     xmmword [rsp+0x68+var_58], xmm0
0000000000012587         mov        rax, qword [rax+0x10]
000000000001258b         mov        qword [rsp+0x68+var_48], rax
0000000000012590         call       re_string_context_at                        ; re_string_context_at
0000000000012595         lea        rdx, qword [rsp+0x68+var_58]
000000000001259a         mov        ecx, eax
000000000001259c         mov        rsi, r15
000000000001259f         mov        rdi, r13
00000000000125a2         call       re_acquire_state_context                    ; re_acquire_state_context
00000000000125a7         mov        rbp, rax
00000000000125aa         mov        qword [r14], rax
00000000000125ad         jmp        loc_12497
00000000000125b2         align      8

                     loc_125b8:
00000000000125b8         mov        qword [r14], rdx                            ; CODE XREF=merge_state_with_log+150
00000000000125bb         mov        rbp, rdx
00000000000125be         jmp        loc_12497
00000000000125c3         align      8

                     loc_125c8:
00000000000125c8         test       rbp, rbp                                    ; CODE XREF=merge_state_with_log+95
00000000000125cb         je         loc_12620

00000000000125cd         lea        r14, qword [rbp+0x10]
00000000000125d1         lea        r15, qword [rbp+0x18]
00000000000125d5         mov        rcx, r12
00000000000125d8         mov        rdi, rbx
00000000000125db         mov        rdx, r15
00000000000125de         mov        rsi, r14
00000000000125e1         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
00000000000125e6         test       eax, eax
00000000000125e8         mov        dword [r13], eax
00000000000125ec         jne        loc_12620

00000000000125ee         test       byte [rbp+0x68], 0x40
00000000000125f2         je         loc_124a5

00000000000125f8         mov        rdx, r15
00000000000125fb         mov        rsi, r14
00000000000125fe         mov        rdi, rbx
0000000000012601         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
0000000000012606         test       eax, eax
0000000000012608         mov        dword [r13], eax
000000000001260c         jne        loc_12620

000000000001260e         mov        rax, qword [rbx+0xb8]
0000000000012615         mov        rbp, qword [rax+r12*8]
0000000000012619         jmp        loc_124a5
000000000001261e         align      32

                     loc_12620:
0000000000012620         xor        ebp, ebp                                    ; CODE XREF=merge_state_with_log+199, merge_state_with_log+395, merge_state_with_log+428, merge_state_with_log+460
0000000000012622         jmp        loc_124a5

                     loc_12627:
0000000000012627         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=merge_state_with_log+118
                        ; endp
000000000001262c         align      16                                          ; End of unwind block (FDE at 0x1f604)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int32_t, -108
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152


                     sift_states_backward:
0000000000012630         push       r15                                         ; Begin of unwind block (FDE at 0x1f650), CODE XREF=re_search_internal+2510, re_search_internal+4661, update_cur_sifted_state+1785
0000000000012632         push       r14
0000000000012634         mov        r14, rdi
0000000000012637         push       r13
0000000000012639         push       r12
000000000001263b         mov        r13, rsi
000000000001263e         push       rbp
000000000001263f         push       rbx
0000000000012640         sub        rsp, 0x68
0000000000012644         mov        r15, qword [rsi+0x18]
0000000000012648         mov        rbx, qword [rsi+0x10]
000000000001264c         mov        qword [rsp+0x98+var_98], rdi
0000000000012650         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
0000000000012655         mov        qword [rsp+0x98+var_58], 0x1
000000000001265e         mov        rax, qword [fs:0x28]
0000000000012667         mov        qword [rsp+0x98+var_40], rax
000000000001266c         xor        eax, eax
000000000001266e         mov        qword [rsp+0x98+var_50], 0x1
0000000000012677         call       j_malloc                                    ; malloc
000000000001267c         test       rax, rax
000000000001267f         mov        qword [rsp+0x98+var_48], rax
0000000000012684         je         loc_12964

000000000001268a         lea        rcx, qword [rsp+0x98+var_58]
000000000001268f         mov        qword [rax], rbx
0000000000012692         mov        rdx, r15
0000000000012695         mov        rsi, r13
0000000000012698         mov        rdi, r14
000000000001269b         mov        qword [rsp+0x98+var_88], rcx
00000000000126a0         call       update_cur_sifted_state                     ; update_cur_sifted_state
00000000000126a5         test       eax, eax
00000000000126a7         jne        loc_12935

00000000000126ad         lea        rax, qword [r15*8]
00000000000126b5         test       r15, r15
00000000000126b8         mov        dword [rsp+0x98+var_6C], 0x0
00000000000126c0         mov        qword [rsp+0x98+var_90], rax
00000000000126c5         lea        rax, qword [r13+0x30]
00000000000126c9         mov        qword [rsp+0x98+var_60], rax
00000000000126ce         jle        loc_128d7

                     loc_126d4:
00000000000126d4         mov        rdi, qword [r13]                            ; CODE XREF=sift_states_backward+673
00000000000126d8         mov        rax, qword [rsp+0x98+var_90]
00000000000126dd         cmp        qword [rdi+rax], 0x0
00000000000126e2         je         loc_128f8

00000000000126e8         mov        rax, qword [rsp+0x98+var_98]
00000000000126ec         mov        dword [rsp+0x98+var_6C], 0x0
00000000000126f4         mov        ecx, dword [rsp+0x98+var_6C]
00000000000126f8         cmp        dword [rax+0xe0], ecx
00000000000126fe         jl         loc_12911

                     loc_12704:
0000000000012704         mov        rbx, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+731
0000000000012708         mov        rdi, qword [rsp+0x98+var_90]
000000000001270d         sub        r15, 0x1
0000000000012711         mov        qword [rsp+0x98+var_50], 0x0
000000000001271a         mov        rax, qword [rbx+0xb8]
0000000000012721         mov        r12, qword [rax+rdi-8]
0000000000012726         test       r12, r12
0000000000012729         je         loc_128b0

000000000001272f         cmp        qword [r12+0x28], 0x0
0000000000012735         mov        r14, qword [rbx+0x98]
000000000001273c         jle        loc_128b0

0000000000012742         xor        ebx, ebx
0000000000012744         jmp        loc_127eb
0000000000012749         align      16

                     loc_12750:
0000000000012750         mov        rdi, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+469, sift_states_backward+625, sift_states_backward+700
0000000000012754         mov        rdx, r15
0000000000012757         call       check_node_accept                           ; check_node_accept
000000000001275c         test       al, al
000000000001275e         je         loc_127dc

0000000000012760         mov        rax, qword [r13]
0000000000012764         mov        rcx, qword [rsp+0x98+var_90]
0000000000012769         mov        rax, qword [rax+rcx]
000000000001276d         test       rax, rax
0000000000012770         je         loc_127dc

0000000000012772         mov        rdx, qword [r14+0x18]
0000000000012776         mov        rdi, qword [rax+0x10]
000000000001277a         lea        rsi, qword [rax+0x18]
000000000001277e         mov        rdx, qword [rdx+rbp*8]
0000000000012782         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000012787         test       rax, rax
000000000001278a         je         loc_127dc

000000000001278c         mov        r10d, 0x1

                     loc_12792:
0000000000012792         cmp        qword [r13+0x28], 0x0                       ; CODE XREF=sift_states_backward+555, sift_states_backward+608, loc_128e0
0000000000012797         je         loc_127c7

0000000000012799         mov        rax, qword [r14+0x18]
000000000001279d         sub        rsp, 0x8
00000000000127a1         lea        rsi, qword [r13+0x28]
00000000000127a5         lea        r8, qword [r10+r15]
00000000000127a9         mov        r9, rbp
00000000000127ac         mov        rcx, qword [rax+rbp*8]
00000000000127b0         push       r15
00000000000127b2         mov        rdx, qword [rsp+0xa8+var_60]
00000000000127b7         mov        rdi, qword [rsp+0xa8+var_98]
00000000000127bc         call       check_dst_limits.isra.13                    ; check_dst_limits.isra.13
00000000000127c1         test       al, al
00000000000127c3         pop        rdx
00000000000127c4         pop        rcx
00000000000127c5         jne        loc_127dc

                     loc_127c7:
00000000000127c7         mov        rdi, qword [rsp+0x98+var_88]                ; CODE XREF=sift_states_backward+359
00000000000127cc         mov        rsi, rbp
00000000000127cf         call       re_node_set_insert                          ; re_node_set_insert
00000000000127d4         test       al, al
00000000000127d6         je         loc_12930

                     loc_127dc:
00000000000127dc         add        rbx, 0x1                                    ; CODE XREF=sift_states_backward+302, sift_states_backward+320, sift_states_backward+346, sift_states_backward+405
00000000000127e0         cmp        rbx, qword [r12+0x28]
00000000000127e5         jge        loc_128b0

                     loc_127eb:
00000000000127eb         mov        rax, qword [r12+0x30]                       ; CODE XREF=sift_states_backward+276
00000000000127f0         mov        rsi, qword [r14]
00000000000127f3         mov        rbp, qword [rax+rbx*8]
00000000000127f7         mov        r9, rbp
00000000000127fa         shl        r9, 0x4
00000000000127fe         add        rsi, r9
0000000000012801         test       byte [rsi+0xa], 0x10
0000000000012805         je         loc_12750

000000000001280b         mov        rcx, qword [rsp+0x98+var_98]
000000000001280f         mov        rax, qword [r13+0x18]
0000000000012813         mov        r8, r15
0000000000012816         mov        rdx, rbp
0000000000012819         mov        qword [rsp+0x98+var_80], r9
000000000001281e         mov        r11, qword [rcx+0x98]
0000000000012825         mov        qword [rsp+0x98+var_78], rax
000000000001282a         mov        rdi, qword [r11]
000000000001282d         lea        rsi, qword [r11+0xd8]
0000000000012834         mov        qword [rsp+0x98+var_68], r11
0000000000012839         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
000000000001283e         movsxd     r10, eax
0000000000012841         mov        r9, qword [rsp+0x98+var_80]
0000000000012846         cmp        r10d, 0x0
000000000001284a         jle        loc_128e0

0000000000012850         movsxd     rax, r10d
0000000000012853         add        rax, r15
0000000000012856         cmp        qword [rsp+0x98+var_78], rax
000000000001285b         jl         loc_12792

0000000000012861         mov        rdx, qword [r13]
0000000000012865         mov        r11, qword [rsp+0x98+var_68]
000000000001286a         mov        rax, qword [rdx+rax*8]
000000000001286e         test       rax, rax
0000000000012871         je         loc_128e6

0000000000012873         mov        rdx, qword [r11+0x18]
0000000000012877         mov        rdi, qword [rax+0x10]
000000000001287b         lea        rsi, qword [rax+0x18]
000000000001287f         mov        qword [rsp+0x98+var_80], r9
0000000000012884         mov        rdx, qword [rdx+rbp*8]
0000000000012888         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000001288d         test       rax, rax
0000000000012890         jne        loc_12792

0000000000012896         mov        r9, qword [rsp+0x98+var_80]
000000000001289b         mov        rsi, qword [r14]
000000000001289e         add        rsi, r9
00000000000128a1         jmp        loc_12750
00000000000128a6         align      16

                     loc_128b0:
00000000000128b0         mov        rcx, qword [rsp+0x98+var_88]                ; CODE XREF=sift_states_backward+249, sift_states_backward+268, sift_states_backward+437
00000000000128b5         mov        rdi, qword [rsp+0x98+var_98]
00000000000128b9         mov        rdx, r15
00000000000128bc         mov        rsi, r13
00000000000128bf         call       update_cur_sifted_state                     ; update_cur_sifted_state
00000000000128c4         test       eax, eax
00000000000128c6         jne        loc_12935

00000000000128c8         sub        qword [rsp+0x98+var_90], 0x8
00000000000128ce         test       r15, r15
00000000000128d1         jne        loc_126d4

                     loc_128d7:
00000000000128d7         xor        eax, eax                                    ; CODE XREF=sift_states_backward+158
00000000000128d9         jmp        loc_12935
00000000000128db         align      32

                     loc_128e0:
00000000000128e0         jne        loc_12792                                   ; CODE XREF=sift_states_backward+538

                     loc_128e6:
00000000000128e6         mov        rsi, qword [r14]                            ; CODE XREF=sift_states_backward+577
00000000000128e9         add        rsi, r9
00000000000128ec         jmp        loc_12750
00000000000128f1         align      8

                     loc_128f8:
00000000000128f8         mov        rax, qword [rsp+0x98+var_98]                ; CODE XREF=sift_states_backward+178
00000000000128fc         add        dword [rsp+0x98+var_6C], 0x1
0000000000012901         mov        ecx, dword [rsp+0x98+var_6C]
0000000000012905         cmp        dword [rax+0xe0], ecx
000000000001290b         jge        loc_12704

                     loc_12911:
0000000000012911         mov        rdx, qword [rsp+0x98+var_90]                ; argument "__n" for method j_memset, CODE XREF=sift_states_backward+206
0000000000012916         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000012918         call       j_memset                                    ; memset
000000000001291d         mov        rdi, qword [rsp+0x98+var_48]                ; argument "__ptr" for method j_free
0000000000012922         call       j_free                                      ; free
0000000000012927         xor        eax, eax
0000000000012929         jmp        loc_12945
000000000001292b         align      16

                     loc_12930:
0000000000012930         mov        eax, 0xc                                    ; CODE XREF=sift_states_backward+422

                     loc_12935:
0000000000012935         mov        rdi, qword [rsp+0x98+var_48]                ; argument "__ptr" for method j_free, CODE XREF=sift_states_backward+119, sift_states_backward+662, sift_states_backward+681
000000000001293a         mov        dword [rsp+0x98+var_98], eax
000000000001293d         call       j_free                                      ; free
0000000000012942         mov        eax, dword [rsp+0x98+var_98]

                     loc_12945:
0000000000012945         mov        rdx, qword [rsp+0x98+var_40]                ; CODE XREF=sift_states_backward+761, sift_states_backward+825
000000000001294a         xor        rdx, qword [fs:0x28]
0000000000012953         jne        loc_1296b

0000000000012955         add        rsp, 0x68
0000000000012959         pop        rbx
000000000001295a         pop        rbp
000000000001295b         pop        r12
000000000001295d         pop        r13
000000000001295f         pop        r14
0000000000012961         pop        r15
0000000000012963         ret
                        ; endp

                     loc_12964:
0000000000012964         mov        eax, 0xc                                    ; CODE XREF=sift_states_backward+84
0000000000012969         jmp        loc_12945

                     loc_1296b:
000000000001296b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sift_states_backward+803
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_68: int32_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int32_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int32_t, -184
        ;    var_BA: int8_t, -186
        ;    var_BB: int8_t, -187
        ;    var_BC: int8_t, -188
        ;    var_BD: int8_t, -189
        ;    var_BE: int8_t, -190
        ;    var_BF: int8_t, -191
        ;    var_C0: int8_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int32_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_158: int64_t, -344
        ;    var_168: -360
        ;    var_170: int64_t, -368
        ;    var_178: int64_t, -376
        ;    var_180: int64_t, -384
        ;    var_188: int64_t, -392
        ;    var_190: int64_t, -400
        ;    var_194: int32_t, -404
        ;    var_198: int32_t, -408
        ;    var_199: int8_t, -409
        ;    var_19A: int8_t, -410
        ;    var_1A0: int32_t, -416
        ;    var_1A8: int64_t, -424
        ;    var_1B0: int64_t, -432
        ;    var_1B8: int64_t, -440
        ;    var_1BC: int32_t, -444
        ;    var_1C0: int32_t, -448
        ;    var_1C8: int64_t, -456
        ;    var_1D0: int64_t, -464
        ;    var_1D8: int64_t, -472
        ;    var_1E0: int64_t, -480
        ;    var_1E8: int64_t, -488
        ;    var_1F0: int64_t, -496
        ;    var_1F8: int64_t, -504
        ;    var_200: int64_t, -512
        ;    var_208: int64_t, -520
        ;    var_20C: int32_t, -524
        ;    var_210: int32_t, -528
        ;    var_218: int64_t, -536
        ;    var_220: int64_t, -544
        ;    var_228: int64_t, -552
        ;    var_230: int64_t, -560
        ;    var_238: int64_t, -568
        ;    var_240: int64_t, -576
        ;    var_248: int64_t, -584
        ;    var_250: int64_t, -592
        ;    var_258: int64_t, -600
        ;    var_260: int64_t, -608
        ;    var_268: int64_t, -616


                     re_search_internal:
0000000000012970         push       r15                                         ; End of unwind block (FDE at 0x1f650), Begin of unwind block (FDE at 0x1f6b0), CODE XREF=re_search_stub+266, rpl_regexec+88
0000000000012972         push       r14
0000000000012974         push       r13
0000000000012976         push       r12
0000000000012978         mov        r13, r9
000000000001297b         push       rbp
000000000001297c         push       rbx
000000000001297d         mov        rbp, rcx
0000000000012980         mov        ecx, 0x20
0000000000012985         mov        r12, r8
0000000000012988         sub        rsp, aLib64ldlinuxx8                        ; "/lib64/ld-linux-x86-64.so.2"
000000000001298f         mov        rbx, qword [rdi]
0000000000012992         mov        rax, qword [rsp+0x268+arg_8]
000000000001299a         mov        qword [rsp+0x268+var_220], rdi
000000000001299f         mov        qword [rsp+0x268+var_1F0], rsi
00000000000129a4         mov        rsi, rdi
00000000000129a7         lea        rdi, qword [rsp+0x268+var_148]
00000000000129af         mov        qword [rsp+0x268+var_1E0], rdx
00000000000129b7         mov        qword [rsp+0x268+var_230], rbx
00000000000129bc         mov        qword [rsp+0x268+var_1B0], rax
00000000000129c4         mov        qword [rsp+0x268+var_268], rdi
00000000000129c8         mov        rax, qword [fs:0x28]
00000000000129d1         mov        qword [rsp+0x268+var_40], rax
00000000000129d9         xor        eax, eax
00000000000129db         rep stosq  qword [rdi], rax
00000000000129de         mov        rdi, qword [rsi+0x20]
00000000000129e2         mov        qword [rsp+0x268+var_B0], rbx
00000000000129ea         test       rdi, rdi
00000000000129ed         mov        qword [rsp+0x268+var_200], rdi
00000000000129f2         je         loc_12a16

00000000000129f4         movzx      edx, byte [rsi+0x38]
00000000000129f8         test       dl, 0x8
00000000000129fb         je         loc_12e90

0000000000012a01         cmp        rbp, r8
0000000000012a04         je         loc_12e90

0000000000012a0a         and        edx, 0x1
0000000000012a0d         cmove      rax, rdi
0000000000012a11         mov        qword [rsp+0x268+var_200], rax

                     loc_12a16:
0000000000012a16         mov        rax, qword [rsp+0x268+var_220]              ; CODE XREF=re_search_internal+130, re_search_internal+1321
0000000000012a1b         mov        qword [rsp+0x268+var_1D0], 0x0
0000000000012a27         mov        rax, qword [rax+0x30]
0000000000012a2b         cmp        rax, qword [rsp+0x268+arg_0]
0000000000012a33         jae        loc_12a54

0000000000012a35         mov        rcx, qword [rsp+0x268+arg_0]
0000000000012a3d         lea        rdx, qword [rcx-1]
0000000000012a41         sub        rdx, rax
0000000000012a44         sub        qword [rsp+0x268+arg_0], rdx
0000000000012a4c         mov        qword [rsp+0x268+var_1D0], rdx

                     loc_12a54:
0000000000012a54         mov        rsi, qword [rsp+0x268+var_220]              ; CODE XREF=re_search_internal+195
0000000000012a59         cmp        qword [rsi+0x10], 0x0
0000000000012a5e         je         loc_138f0

0000000000012a64         mov        rdi, qword [rsp+0x268+var_230]
0000000000012a69         mov        rax, qword [rdi+0x48]
0000000000012a6d         test       rax, rax
0000000000012a70         je         loc_138f0

0000000000012a76         mov        rdx, qword [rdi+0x50]
0000000000012a7a         test       rdx, rdx
0000000000012a7d         je         loc_138f0

0000000000012a83         mov        rcx, qword [rdi+0x58]
0000000000012a87         test       rcx, rcx
0000000000012a8a         je         loc_138f0

0000000000012a90         cmp        qword [rdi+0x60], 0x0
0000000000012a95         je         loc_138f0

0000000000012a9b         cmp        qword [rax+0x10], 0x0
0000000000012aa0         jne        loc_12ad8

0000000000012aa2         cmp        qword [rdx+0x10], 0x0
0000000000012aa7         jne        loc_12ad8

0000000000012aa9         cmp        qword [rcx+0x10], 0x0
0000000000012aae         je         loc_12ab6

0000000000012ab0         cmp        byte [rsi+0x38], 0x0
0000000000012ab4         js         loc_12ad8

                     loc_12ab6:
0000000000012ab6         test       rbp, rbp                                    ; CODE XREF=re_search_internal+318
0000000000012ab9         je         loc_12acc

0000000000012abb         test       r12, r12
0000000000012abe         mov        dword [rsp+0x268+var_20C], 0x1
0000000000012ac6         jne        loc_134e9

                     loc_12acc:
0000000000012acc         xor        r12d, r12d                                  ; CODE XREF=re_search_internal+329
0000000000012acf         xor        ebp, ebp
0000000000012ad1         nop        dword [rax]

                     loc_12ad8:
0000000000012ad8         cmp        qword [rsp+0x268+arg_0], 0x0                ; CODE XREF=re_search_internal+304, re_search_internal+311, re_search_internal+324
0000000000012ae1         mov        dword [rsp+0x268+var_210], 0x1
0000000000012ae9         je         loc_12e70

                     loc_12aef:
0000000000012aef         mov        r11, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+1303
0000000000012af4         mov        rax, qword [rsp+0x268+var_220]
0000000000012af9         mov        rdi, qword [rsp+0x268+var_1E0]
0000000000012b01         mov        rsi, qword [r11+0x10]
0000000000012b05         mov        rbx, qword [rax+0x28]
0000000000012b09         mov        edx, dword [r11+0xb4]
0000000000012b10         mov        rax, qword [rax+0x18]
0000000000012b14         mov        qword [rsp+0x268+var_F0], rdi
0000000000012b1c         mov        qword [rsp+0x268+var_F8], rdi
0000000000012b24         mov        qword [rsp+0x268+var_260], rsi
0000000000012b29         lea        rsi, qword [rsi+1]
0000000000012b2d         mov        qword [rsp+0x268+var_1B8], rbx
0000000000012b35         movsxd     rcx, edx
0000000000012b38         shr        rax, 0x16
0000000000012b3c         mov        qword [rsp+0x268+var_D0], rbx
0000000000012b44         and        eax, 0x1
0000000000012b47         cmp        rsi, rcx
0000000000012b4a         mov        dword [rsp+0x268+var_B8], edx
0000000000012b51         cmovl      rsi, rcx
0000000000012b55         lea        rcx, qword [rdi+1]
0000000000012b59         mov        byte [rsp+0x268+var_C0], al
0000000000012b60         mov        qword [rsp+0x268+var_E0], rdi
0000000000012b68         mov        qword [rsp+0x268+var_E8], rdi
0000000000012b70         cmp        rsi, rcx
0000000000012b73         mov        rdi, qword [rsp+0x268+var_268]
0000000000012b77         cmovg      rsi, rcx
0000000000012b7b         test       rbx, rbx
0000000000012b7e         mov        rcx, qword [rsp+0x268+var_1F0]
0000000000012b83         setne      bl
0000000000012b86         or         eax, ebx
0000000000012b88         mov        byte [rsp+0x268+var_BD], al
0000000000012b8f         movzx      eax, byte [r11+0xb0]
0000000000012b97         mov        qword [rsp+0x268+var_148], rcx
0000000000012b9f         mov        edx, eax
0000000000012ba1         shr        al, 0x3
0000000000012ba4         shr        dl, 0x2
0000000000012ba7         and        eax, 0x1
0000000000012baa         and        edx, 0x1
0000000000012bad         mov        byte [rsp+0x268+var_BE], al
0000000000012bb4         mov        byte [rsp+0x268+var_BF], dl
0000000000012bbb         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
0000000000012bc0         test       eax, eax
0000000000012bc2         mov        dword [rsp+0x268+var_20C], eax
0000000000012bc6         jne        loc_134c0

0000000000012bcc         mov        rdi, qword [rsp+0x268+var_230]
0000000000012bd1         lea        rax, qword [rdi+0xb8]
0000000000012bd8         mov        qword [rsp+0x268+var_C8], rax
0000000000012be0         movzx      eax, byte [rdi+0xb0]
0000000000012be7         mov        byte [rsp+0x268+var_260], al
0000000000012beb         shr        al, 0x4
0000000000012bee         and        eax, 0x1
0000000000012bf1         cmp        byte [rsp+0x268+var_BD], 0x0
0000000000012bf9         mov        byte [rsp+0x268+var_BA], al
0000000000012c00         jne        loc_12c25

0000000000012c02         mov        rsi, qword [rsp+0x268+var_230]
0000000000012c07         mov        rax, qword [rsp+0x268+var_1F0]
0000000000012c0c         cmp        dword [rsi+0xb4], 0x1
0000000000012c13         mov        qword [rsp+0x268+var_140], rax
0000000000012c1b         mov        rax, qword [rsp+0x268+var_1E0]
0000000000012c23         jle        loc_12c27

                     loc_12c25:
0000000000012c25         xor        eax, eax                                    ; CODE XREF=re_search_internal+656

                     loc_12c27:
0000000000012c27         mov        qword [rsp+0x268+var_118], rax              ; CODE XREF=re_search_internal+691
0000000000012c2f         mov        qword [rsp+0x268+var_110], rax
0000000000012c37         mov        rax, qword [rsp+0x268+var_220]
0000000000012c3c         mov        qword [rsp+0x268+var_E0], r13
0000000000012c44         mov        qword [rsp+0x268+var_E8], r13
0000000000012c4c         movzx      eax, byte [rax+0x38]
0000000000012c50         mov        byte [rsp+0x268+var_260], al
0000000000012c54         shr        al, 0x7
0000000000012c57         mov        byte [rsp+0x268+var_BB], al
0000000000012c5e         mov        rax, qword [rsp+0x268+var_230]
0000000000012c63         mov        r14, qword [rax+0x98]
0000000000012c6a         mov        eax, dword [rsp+0x268+arg_10]
0000000000012c71         mov        qword [rsp+0x268+var_A0], 0xffffffffffffffff
0000000000012c7d         lea        r13, qword [r14+r14]
0000000000012c81         mov        dword [rsp+0x268+var_A8], eax
0000000000012c88         test       r13, r13
0000000000012c8b         jle        loc_12cdf

0000000000012c8d         movabs     rax, 0x666666666666666
0000000000012c97         cmp        r13, rax
0000000000012c9a         jg         loc_139e0

0000000000012ca0         lea        rdi, qword [r13+r14*8]
0000000000012ca5         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
0000000000012ca9         call       j_malloc                                    ; malloc
0000000000012cae         mov        rdi, r14
0000000000012cb1         mov        r15, rax
0000000000012cb4         mov        qword [rsp+0x268+var_70], rax
0000000000012cbc         shl        rdi, 0x4                                    ; argument "__size" for method j_malloc
0000000000012cc0         call       j_malloc                                    ; malloc
0000000000012cc5         test       rax, rax
0000000000012cc8         mov        qword [rsp+0x268+var_50], rax
0000000000012cd0         je         loc_139e0

0000000000012cd6         test       r15, r15
0000000000012cd9         je         loc_139e0

                     loc_12cdf:
0000000000012cdf         cmp        qword [rsp+0x268+arg_0], 0x1                ; CODE XREF=re_search_internal+795
0000000000012ce8         mov        qword [rsp+0x268+var_78], r13
0000000000012cf0         mov        dword [rsp+0x268+var_68], 0x1
0000000000012cfb         mov        qword [rsp+0x268+var_58], r13
0000000000012d03         jbe        loc_13e28

                     loc_12d09:
0000000000012d09         mov        rax, qword [rsp+0x268+var_108]              ; CODE XREF=re_search_internal+5316
0000000000012d11         movabs     rdx, 0x1ffffffffffffffe
0000000000012d1b         cmp        rax, rdx
0000000000012d1e         ja         loc_139e0

0000000000012d24         lea        rdi, qword [0x8+rax*8]                      ; argument "__size" for method j_malloc
0000000000012d2c         call       j_malloc                                    ; malloc
0000000000012d31         test       rax, rax
0000000000012d34         mov        rdi, rax
0000000000012d37         mov        qword [rsp+0x268+var_90], rax
0000000000012d3f         je         loc_13a30

                     loc_12d45:
0000000000012d45         mov        eax, dword [rsp+0x268+arg_10]               ; CODE XREF=re_search_internal+5334
0000000000012d4c         mov        qword [rsp+0x268+var_190], rbp
0000000000012d54         and        eax, 0x1
0000000000012d57         cmp        eax, 0x1
0000000000012d5a         sbb        eax, eax
0000000000012d5c         and        eax, 0x2
0000000000012d5f         add        eax, 0x4
0000000000012d62         mov        dword [rsp+0x268+var_D8], eax
0000000000012d69         xor        eax, eax
0000000000012d6b         cmp        rbp, r12
0000000000012d6e         setle      al
0000000000012d71         lea        eax, dword [rax+rax-1]
0000000000012d75         mov        dword [rsp+0x268+var_1BC], eax
0000000000012d7c         mov        rax, r12
0000000000012d7f         cmovle     rax, rbp
0000000000012d83         mov        qword [rsp+0x268+var_1D8], rax
0000000000012d8b         mov        rax, r12
0000000000012d8e         cmovge     rax, rbp
0000000000012d92         cmp        qword [rsp+0x268+var_200], 0x0
0000000000012d98         mov        qword [rsp+0x268+var_1F8], rax
0000000000012d9d         mov        rax, qword [rsp+0x268+var_230]
0000000000012da2         mov        esi, dword [rax+0xb4]
0000000000012da8         mov        eax, 0x8
0000000000012dad         mov        dword [rsp+0x268+var_1A0], esi
0000000000012db4         je         loc_12def

0000000000012db6         cmp        esi, 0x1
0000000000012db9         mov        ecx, 0x4
0000000000012dbe         je         loc_12dde

0000000000012dc0         mov        rax, qword [rsp+0x268+var_220]
0000000000012dc5         test       byte [rax+0x1a], 0x40
0000000000012dc9         jne        loc_13b4e

0000000000012dcf         cmp        qword [rsp+0x268+var_1B8], 0x0
0000000000012dd8         jne        loc_13b4e

                     loc_12dde:
0000000000012dde         xor        edx, edx                                    ; CODE XREF=re_search_internal+1102, re_search_internal+4576
0000000000012de0         cmp        rbp, r12
0000000000012de3         movzx      eax, bl
0000000000012de6         setle      dl
0000000000012de9         or         eax, ecx
0000000000012deb         add        edx, edx
0000000000012ded         or         eax, edx

                     loc_12def:
0000000000012def         cmp        rbp, qword [rsp+0x268+var_1F8]              ; CODE XREF=re_search_internal+1092
0000000000012df4         setg       cl
0000000000012df7         cmp        rbp, qword [rsp+0x268+var_1D8]
0000000000012dff         setl       dl
0000000000012e02         or         cl, dl
0000000000012e04         jne        loc_138d9

0000000000012e0a         lea        rcx, qword [rsp+0x268+var_190]
0000000000012e12         cmp        rbp, r12
0000000000012e15         mov        edx, 0x0
0000000000012e1a         cmovle     rdx, rcx
0000000000012e1e         test       rdx, rdx
0000000000012e21         mov        qword [rsp+0x268+var_1A8], rdx
0000000000012e29         setne      byte [rsp+0x268+var_199]
0000000000012e31         sub        eax, 0x4
0000000000012e34         mov        dword [rsp+0x268+var_1C0], eax
0000000000012e3b         lea        rax, qword [rsp+0x268+var_198]
0000000000012e43         mov        qword [rsp+0x268+var_240], rax

                     loc_12e48:
0000000000012e48         mov        eax, dword [rsp+0x268+var_1C0]              ; CODE XREF=re_search_internal+3939
0000000000012e4f         cmp        eax, 0x4
0000000000012e52         ja         loc_13a3d

0000000000012e58         lea        rcx, qword [switch_table_1c820]             ; switch_table_1c820
0000000000012e5f         movsxd     rax, dword [rcx+rax*4]
0000000000012e63         add        rax, rcx
0000000000012e66         jmp        rax                                         ; switch statement using table at 0x1c820, with 5 cases, 0x12e9e,0x12f48,0x133c2,0x13434
0000000000012e68         align      16

                     loc_12e70:
0000000000012e70         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+377
0000000000012e75         cmp        qword [rax+0x98], 0x0
0000000000012e7d         setne      al
0000000000012e80         movzx      eax, al
0000000000012e83         mov        dword [rsp+0x268+var_210], eax
0000000000012e87         jmp        loc_12aef
0000000000012e8c         align      16

                     loc_12e90:
0000000000012e90         mov        qword [rsp+0x268+var_200], 0x0              ; CODE XREF=re_search_internal+139, re_search_internal+148
0000000000012e99         jmp        loc_12a16

                     loc_12e9e:
0000000000012e9e         cmp        qword [rsp+0x268+var_1F8], rbp              ; case 2, CODE XREF=re_search_internal+1270
0000000000012ea3         jle        loc_12eff

0000000000012ea5         mov        rax, qword [rsp+0x268+var_1F0]
0000000000012eaa         mov        rdi, qword [rsp+0x268+var_200]
0000000000012eaf         movzx      edx, byte [rax+rbp]
0000000000012eb3         lea        rax, qword [rbp+1]
0000000000012eb7         cmp        byte [rdi+rdx], 0x0
0000000000012ebb         jne        loc_12f48

0000000000012ec1         mov        rsi, qword [rsp+0x268+var_200]
0000000000012ec6         mov        rcx, qword [rsp+0x268+var_1F8]
0000000000012ecb         mov        rdi, qword [rsp+0x268+var_1F0]
0000000000012ed0         jmp        loc_12eea
0000000000012ed2         align      8

                     loc_12ed8:
0000000000012ed8         movzx      edx, byte [rdi+rax]                         ; CODE XREF=re_search_internal+1408
0000000000012edc         lea        rax, qword [rax+1]
0000000000012ee0         cmp        byte [rsi+rdx], 0x0
0000000000012ee4         jne        loc_14081

                     loc_12eea:
0000000000012eea         cmp        rcx, rax                                    ; CODE XREF=re_search_internal+1376
0000000000012eed         mov        rbp, rax
0000000000012ef0         jne        loc_12ed8

                     loc_12ef2:
0000000000012ef2         mov        rax, qword [rsp+0x268+var_1F8]              ; CODE XREF=re_search_internal+2751
0000000000012ef7         mov        qword [rsp+0x268+var_190], rax

                     loc_12eff:
0000000000012eff         cmp        qword [rsp+0x268+var_1F8], rbp              ; CODE XREF=re_search_internal+1331, re_search_internal+2647
0000000000012f04         jne        loc_12f48

0000000000012f06         xor        eax, eax
0000000000012f08         mov        rsi, qword [rsp+0x268+var_1F8]
0000000000012f0d         cmp        qword [rsp+0x268+var_1E0], rsi
0000000000012f15         jle        loc_12f20

0000000000012f17         mov        rax, qword [rsp+0x268+var_1F0]
0000000000012f1c         movzx      eax, byte [rax+rsi]

                     loc_12f20:
0000000000012f20         mov        rsi, qword [rsp+0x268+var_1B8]              ; CODE XREF=re_search_internal+1445
0000000000012f28         test       rsi, rsi
0000000000012f2b         je         loc_12f31

0000000000012f2d         movzx      eax, byte [rsi+rax]

                     loc_12f31:
0000000000012f31         mov        rdi, qword [rsp+0x268+var_200]              ; CODE XREF=re_search_internal+1467
0000000000012f36         cmp        byte [rdi+rax], 0x0
0000000000012f3a         je         loc_138d9

0000000000012f40         mov        rbp, qword [rsp+0x268+var_1F8]
0000000000012f45         nop        dword [rax]

                     loc_12f48:
0000000000012f48         mov        edx, dword [rsp+0x268+arg_10]               ; case 4, CODE XREF=re_search_internal+1270, re_search_internal+1355, re_search_internal+1428, re_search_internal+2687, re_search_internal+2863, re_search_internal+2880, re_search_internal+4370, re_search_internal+5913
0000000000012f4f         mov        rdi, qword [rsp+0x268+var_268]
0000000000012f53         mov        rsi, rbp
0000000000012f56         call       re_string_reconstruct                       ; re_string_reconstruct
0000000000012f5b         test       eax, eax
0000000000012f5d         mov        dword [rsp+0x268+var_20C], eax
0000000000012f61         jne        loc_134c0

0000000000012f67         cmp        dword [rsp+0x268+var_1A0], 0x1
0000000000012f6f         je         loc_12f8d

0000000000012f71         cmp        qword [rsp+0x268+var_118], 0x0
0000000000012f7a         je         loc_12f8d

0000000000012f7c         mov        rax, qword [rsp+0x268+var_138]
0000000000012f84         cmp        dword [rax], 0xffffffff
0000000000012f87         je         loc_138b1

                     loc_12f8d:
0000000000012f8d         mov        rbx, qword [rsp+0x268+var_B0]               ; CODE XREF=re_search_internal+1535, re_search_internal+1546
0000000000012f95         movzx      eax, byte [rsp+0x268+var_210]
0000000000012f9a         mov        dword [rsp+0x268+var_68], 0x0
0000000000012fa5         mov        qword [rsp+0x268+var_80], 0x0
0000000000012fb1         mov        qword [rsp+0x268+var_88], 0x0
0000000000012fbd         mov        dword [rsp+0x268+var_198], 0x0
0000000000012fc8         mov        r14, qword [rbx+0x48]
0000000000012fcc         and        eax, 0x1
0000000000012fcf         mov        byte [rsp+0x268+var_19A], al
0000000000012fd6         mov        rax, qword [rsp+0x268+var_100]
0000000000012fde         cmp        byte [r14+0x68], 0x0
0000000000012fe3         mov        qword [rsp+0x268+var_260], rax
0000000000012fe8         js         loc_13960

                     loc_12fee:
0000000000012fee         mov        rax, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+4115, re_search_internal+4471, re_search_internal+5698
0000000000012ff6         test       rax, rax
0000000000012ff9         je         loc_13012

0000000000012ffb         cmp        qword [rbx+0x98], 0x0
0000000000013003         mov        rdi, qword [rsp+0x268+var_260]
0000000000013008         mov        qword [rax+rdi*8], r14
000000000001300c         jne        loc_13efb

                     loc_13012:
0000000000013012         movzx      eax, byte [rsp+0x268+var_199]               ; CODE XREF=re_search_internal+1673
000000000001301a         mov        byte [rsp+0x268+var_250], al
000000000001301e         movzx      eax, byte [r14+0x68]

                     loc_13023:
0000000000013023         test       al, 0x10                                    ; CODE XREF=re_search_internal+5569
0000000000013025         mov        qword [rsp+0x268+var_248], 0xffffffffffffffff
000000000001302e         mov        qword [rsp+0x268+var_238], 0x0
0000000000013037         jne        loc_13ec0

                     loc_1303d:
000000000001303d         mov        rax, qword [rsp+0x268+var_1A8]              ; CODE XREF=re_search_internal+5494, re_search_internal+5604
0000000000013045         mov        r8, qword [rsp+0x268+var_100]
000000000001304d         mov        qword [rsp+0x268+var_218], rax
0000000000013052         lea        rax, qword [rsp+0x268+var_188]
000000000001305a         mov        qword [rsp+0x268+var_208], rax
000000000001305f         lea        rax, qword [rsp+0x268+var_194]
0000000000013067         mov        qword [rsp+0x268+var_1E8], rax
000000000001306f         jmp        loc_130cc
0000000000013071         align      8

                     loc_13078:
0000000000013078         cmp        r14, r13                                    ; CODE XREF=re_search_internal+2023, re_search_internal+5395, re_search_internal+5411
000000000001307b         mov        r8, qword [rsp+0x268+var_100]
0000000000013083         sete       al
0000000000013086         and        byte [rsp+0x268+var_250], al
000000000001308a         movzx      eax, byte [r13+0x68]
000000000001308f         cmove      rbx, qword [rsp+0x268+var_260]
0000000000013095         test       al, 0x10
0000000000013097         mov        qword [rsp+0x268+var_260], rbx
000000000001309c         je         loc_130c9

000000000001309e         test       al, al
00000000000130a0         js         loc_13560

                     loc_130a6:
00000000000130a6         mov        eax, dword [rsp+0x268+var_210]              ; CODE XREF=re_search_internal+3095
00000000000130aa         mov        qword [rsp+0x268+var_248], r8
00000000000130af         test       eax, eax
00000000000130b1         je         loc_131d6

00000000000130b7         mov        qword [rsp+0x268+var_238], 0x1
00000000000130c0         mov        qword [rsp+0x268+var_218], 0x0

                     loc_130c9:
00000000000130c9         mov        r14, r13                                    ; CODE XREF=re_search_internal+1836, re_search_internal+3089

                     loc_130cc:
00000000000130cc         cmp        qword [rsp+0x268+var_E0], r8                ; CODE XREF=re_search_internal+1791
00000000000130d4         jle        loc_131c4

00000000000130da         mov        rax, qword [rsp+0x268+var_108]
00000000000130e2         lea        rbx, qword [r8+1]
00000000000130e6         cmp        rbx, rax
00000000000130e9         jge        loc_13590

                     loc_130ef:
00000000000130ef         mov        rax, qword [rsp+0x268+var_118]              ; CODE XREF=re_search_internal+3112
00000000000130f7         cmp        rbx, rax
00000000000130fa         jge        loc_13880

                     loc_13100:
0000000000013100         test       byte [r14+0x68], 0x20                       ; CODE XREF=re_search_internal+3864
0000000000013105         jne        loc_135d0

                     loc_1310b:
000000000001310b         lea        rax, qword [r8+1]                           ; CODE XREF=re_search_internal+3158, re_search_internal+4006
000000000001310f         mov        qword [rsp+0x268+var_100], rax
0000000000013117         mov        rax, qword [rsp+0x268+var_140]
000000000001311f         movzx      r13d, byte [rax+r8]

                     loc_13124:
0000000000013124         mov        rax, qword [r14+0x58]                       ; CODE XREF=re_search_internal+4247
0000000000013128         test       rax, rax
000000000001312b         je         loc_13840

0000000000013131         mov        r13, qword [rax+r13*8]

                     loc_13135:
0000000000013135         cmp        qword [rsp+0x268+var_90], 0x0               ; CODE XREF=re_search_internal+3849, re_search_internal+4021
000000000001313e         je         loc_13154

                     loc_13140:
0000000000013140         mov        rsi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+4067
0000000000013144         mov        rdi, qword [rsp+0x268+var_240]
0000000000013149         mov        rdx, r13
000000000001314c         call       merge_state_with_log                        ; merge_state_with_log
0000000000013151         mov        r13, rax

                     loc_13154:
0000000000013154         test       r13, r13                                    ; CODE XREF=re_search_internal+1998
0000000000013157         jne        loc_13078

000000000001315d         mov        ecx, dword [rsp+0x268+var_198]
0000000000013164         mov        rdi, qword [rsp+0x268+var_90]
000000000001316c         test       ecx, ecx
000000000001316e         jne        loc_13a30

0000000000013174         test       rdi, rdi
0000000000013177         je         loc_131c4

0000000000013179         movzx      eax, byte [rsp+0x268+var_19A]
0000000000013181         xor        eax, 0x1
0000000000013184         test       byte [rsp+0x268+var_238], al
0000000000013188         jne        loc_131c4

                     loc_1318a:
000000000001318a         mov        rsi, qword [rsp+0x268+var_88]               ; CODE XREF=re_search_internal+3048
0000000000013192         mov        rax, qword [rsp+0x268+var_100]
000000000001319a         xor        ecx, ecx
000000000001319c         jmp        loc_131b3
000000000001319e         align      32

                     loc_131a0:
00000000000131a0         cmp        qword [rdi+rdx*8], 0x0                      ; CODE XREF=re_search_internal+2122
00000000000131a5         mov        rax, rdx
00000000000131a8         mov        ecx, 0x1
00000000000131ad         jne        loc_13520

                     loc_131b3:
00000000000131b3         lea        rdx, qword [rax+1]                          ; CODE XREF=re_search_internal+2092
00000000000131b7         cmp        rsi, rdx
00000000000131ba         jge        loc_131a0

00000000000131bc         test       cl, cl
00000000000131be         jne        loc_1408e

                     loc_131c4:
00000000000131c4         mov        rax, qword [rsp+0x268+var_218]              ; CODE XREF=re_search_internal+1892, re_search_internal+2055, re_search_internal+2072, re_search_internal+5401, re_search_internal+5926
00000000000131c9         test       rax, rax
00000000000131cc         je         loc_131d6

00000000000131ce         mov        rdi, qword [rsp+0x268+var_260]
00000000000131d3         add        qword [rax], rdi

                     loc_131d6:
00000000000131d6         mov        rax, qword [rsp+0x268+var_248]              ; CODE XREF=re_search_internal+1857, re_search_internal+2140, re_search_internal+5479, re_search_internal+5631
00000000000131db         cmp        rax, 0xffffffffffffffff
00000000000131df         je         loc_138a0

00000000000131e5         cmp        rax, 0xfffffffffffffffe
00000000000131e9         je         loc_139e0

00000000000131ef         mov        rax, qword [rsp+0x268+var_248]
00000000000131f4         mov        qword [rsp+0x268+var_A0], rax
00000000000131fc         mov        rax, qword [rsp+0x268+var_220]
0000000000013201         test       byte [rax+0x38], 0x10
0000000000013205         jne        loc_139c0

000000000001320b         cmp        qword [rsp+0x268+arg_0], 0x1
0000000000013214         jbe        loc_13b0c

000000000001321a         mov        rcx, qword [rsp+0x268+var_248]
000000000001321f         mov        rbx, qword [rsp+0x268+var_90]
0000000000013227         mov        rdi, qword [rsp+0x268+var_268]
000000000001322b         mov        rax, qword [rbx+rcx*8]
000000000001322f         mov        rsi, qword [rax+0x10]
0000000000013233         lea        rdx, qword [rax+0x18]
0000000000013237         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
000000000001323c         mov        r13, rax
000000000001323f         mov        qword [rsp+0x268+var_98], rax
0000000000013247         mov        rax, qword [rsp+0x268+var_230]
000000000001324c         test       byte [rax+0xb0], 0x1
0000000000013253         jne        loc_13270

0000000000013255         mov        rax, qword [rsp+0x268+var_230]
000000000001325a         cmp        qword [rax+0x98], 0x0
0000000000013262         je         loc_13bfc

                     loc_13268:
0000000000013268         mov        r13, qword [rsp+0x268+var_98]               ; CODE XREF=re_search_internal+4569

                     loc_13270:
0000000000013270         movabs     rsi, 0x1ffffffffffffffe                     ; CODE XREF=re_search_internal+2275
000000000001327a         cmp        qword [rsp+0x268+var_248], rsi
000000000001327f         mov        r15, qword [rsp+0x268+var_B0]
0000000000013287         ja         loc_13eeb

000000000001328d         mov        rax, qword [rsp+0x268+var_248]
0000000000013292         add        rax, 0x1
0000000000013296         lea        rbx, qword [rax*8]
000000000001329e         mov        qword [rsp+0x268+var_260], rax
00000000000132a3         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
00000000000132a6         call       j_malloc                                    ; malloc
00000000000132ab         test       rax, rax
00000000000132ae         mov        r12, rax
00000000000132b1         je         loc_139e0

00000000000132b7         cmp        qword [r15+0x98], 0x0
00000000000132bf         je         loc_13b55

00000000000132c5         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
00000000000132c8         call       j_malloc                                    ; malloc
00000000000132cd         test       rax, rax
00000000000132d0         mov        rbp, rax
00000000000132d3         je         loc_139d8

00000000000132d9         mov        r14, qword [rsp+0x268+var_248]
00000000000132de         lea        rbx, qword [rsp+0x268+var_188]
00000000000132e6         mov        qword [rsp+0x268+var_258], r15
00000000000132eb         mov        qword [rsp+0x268+var_250], rax

                     loc_132f0:
00000000000132f0         mov        rax, qword [rsp+0x268+var_260]              ; CODE XREF=re_search_internal+2637
00000000000132f5         xor        esi, esi                                    ; argument "__c" for method j_memset
00000000000132f7         mov        rdi, rbp                                    ; argument "__s" for method j_memset
00000000000132fa         lea        rdx, qword [rax*8]                          ; argument "__n" for method j_memset
0000000000013302         call       j_memset                                    ; memset
0000000000013307         pxor       xmm0, xmm0
000000000001330b         mov        qword [rsp+0x268+var_188], r12
0000000000013313         mov        qword [rsp+0x268+var_180], rbp
000000000001331b         mov        qword [rsp+0x268+var_178], r13
0000000000013323         mov        rsi, rbx
0000000000013326         mov        qword [rsp+0x268+var_170], r14
000000000001332e         mov        rdi, qword [rsp+0x268+var_268]
0000000000013332         movaps     xmmword [rbx+0x20], xmm0
0000000000013336         mov        qword [rbx+0x30], 0x0
000000000001333e         call       sift_states_backward                        ; sift_states_backward
0000000000013343         mov        rdi, qword [rsp+0x268+var_158]              ; argument "__ptr" for method j_free
000000000001334b         mov        r15d, eax
000000000001334e         call       j_free                                      ; free
0000000000013353         test       r15d, r15d
0000000000013356         jne        loc_13f74

000000000001335c         cmp        qword [r12], 0x0
0000000000013361         jne        loc_13fd3

0000000000013367         cmp        qword [rbp], 0x0
000000000001336c         jne        loc_13fd3

0000000000013372         mov        rdx, qword [rsp+0x268+var_90]
000000000001337a         nop        word [rax+rax]

                     loc_13380:
0000000000013380         sub        r14, 0x1                                    ; CODE XREF=re_search_internal+2597, re_search_internal+2603
0000000000013384         cmp        r14, 0xffffffffffffffff
0000000000013388         je         loc_13e4b

000000000001338e         mov        rax, qword [rdx+r14*8]
0000000000013392         test       rax, rax
0000000000013395         je         loc_13380

0000000000013397         test       byte [rax+0x68], 0x10
000000000001339b         je         loc_13380

000000000001339d         mov        rsi, qword [rax+0x10]
00000000000133a1         mov        rdi, qword [rsp+0x268+var_268]
00000000000133a5         lea        rdx, qword [rax+0x18]
00000000000133a9         mov        rcx, r14
00000000000133ac         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
00000000000133b1         mov        r13, rax
00000000000133b4         lea        rax, qword [r14+1]
00000000000133b8         mov        qword [rsp+0x268+var_260], rax
00000000000133bd         jmp        loc_132f0

                     loc_133c2:
00000000000133c2         cmp        qword [rsp+0x268+var_1F8], rbp              ; case 3, CODE XREF=re_search_internal+1270
00000000000133c7         jle        loc_12eff

00000000000133cd         mov        rax, qword [rsp+0x268+var_1F0]
00000000000133d2         mov        rdi, qword [rsp+0x268+var_1B8]
00000000000133da         mov        rsi, qword [rsp+0x268+var_200]
00000000000133df         movzx      eax, byte [rax+rbp]
00000000000133e3         movzx      edx, byte [rdi+rax]
00000000000133e7         lea        rax, qword [rbp+1]
00000000000133eb         cmp        byte [rsi+rdx], 0x0
00000000000133ef         jne        loc_12f48

00000000000133f5         mov        rsi, qword [rsp+0x268+var_200]
00000000000133fa         mov        rdi, qword [rsp+0x268+var_1B8]
0000000000013402         mov        rcx, qword [rsp+0x268+var_1F8]
0000000000013407         mov        r8, qword [rsp+0x268+var_1F0]
000000000001340c         jmp        loc_13427
000000000001340e         align      16

                     loc_13410:
0000000000013410         movzx      eax, byte [r8+rax]                          ; CODE XREF=re_search_internal+2749
0000000000013415         movzx      edx, byte [rdi+rax]
0000000000013419         lea        rax, qword [rbp+1]
000000000001341d         cmp        byte [rsi+rdx], 0x0
0000000000013421         jne        loc_14081

                     loc_13427:
0000000000013427         cmp        rcx, rax                                    ; CODE XREF=re_search_internal+2716
000000000001342a         mov        rbp, rax
000000000001342d         jne        loc_13410

000000000001342f         jmp        loc_12ef2

                     loc_13434:
0000000000013434         cmp        qword [rsp+0x268+var_1D8], rbp              ; case 1, CODE XREF=re_search_internal+1270
000000000001343c         jg         loc_138d9

0000000000013442         xor        ecx, ecx
0000000000013444         mov        rax, rbp
0000000000013447         mov        rdi, qword [rsp+0x268+var_200]
000000000001344c         mov        rsi, qword [rsp+0x268+var_1B8]
0000000000013454         mov        r9, qword [rsp+0x268+var_1D8]
000000000001345c         mov        r10, qword [rsp+0x268+var_1F0]
0000000000013461         mov        r8, qword [rsp+0x268+var_1E0]
0000000000013469         jmp        loc_13482
000000000001346b         align      16

                     loc_13470:
0000000000013470         sub        rax, 0x1                                    ; CODE XREF=re_search_internal+2859
0000000000013474         mov        ecx, 0x1
0000000000013479         cmp        rax, r9
000000000001347c         jl         loc_13e60

                     loc_13482:
0000000000013482         xor        edx, edx                                    ; CODE XREF=re_search_internal+2809
0000000000013484         cmp        r8, rax
0000000000013487         jle        loc_1348e

0000000000013489         movzx      edx, byte [r10+rax]

                     loc_1348e:
000000000001348e         test       rsi, rsi                                    ; CODE XREF=re_search_internal+2839
0000000000013491         je         loc_13497

0000000000013493         movzx      edx, byte [rsi+rdx]

                     loc_13497:
0000000000013497         cmp        byte [rdi+rdx], 0x0                         ; CODE XREF=re_search_internal+2849
000000000001349b         je         loc_13470

000000000001349d         test       cl, cl
000000000001349f         je         loc_12f48

00000000000134a5         mov        qword [rsp+0x268+var_190], rax
00000000000134ad         mov        rbp, rax
00000000000134b0         jmp        loc_12f48
00000000000134b5         align      8

                     loc_134b8:
00000000000134b8         mov        dword [rsp+0x268+var_20C], eax              ; CODE XREF=re_search_internal+4450
00000000000134bc         nop        dword [rax]

                     loc_134c0:
00000000000134c0         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+598, re_search_internal+1521, re_search_internal+4135, re_search_internal+4757

                     loc_134c8:
00000000000134c8         call       j_free                                      ; free, CODE XREF=re_search_internal+3961, re_search_internal+4224, re_search_internal+4296, re_search_internal+5164, re_search_internal+5250, re_search_internal+5384, re_search_internal+5510, re_search_internal+5689
00000000000134cd         mov        rax, qword [rsp+0x268+var_230]
00000000000134d2         cmp        qword [rax+0x98], 0x0
00000000000134da         jne        loc_13e00

                     loc_134e0:
00000000000134e0         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+5299
00000000000134e4         call       re_string_destruct                          ; re_string_destruct

                     loc_134e9:
00000000000134e9         mov        rsi, qword [rsp+0x268+var_40]               ; CODE XREF=re_search_internal+342, re_search_internal+3976
00000000000134f1         xor        rsi, qword [fs:0x28]
00000000000134fa         mov        eax, dword [rsp+0x268+var_20C]
00000000000134fe         jne        loc_1409b

0000000000013504         add        rsp, aLib64ldlinuxx8                        ; "/lib64/ld-linux-x86-64.so.2"
000000000001350b         pop        rbx
000000000001350c         pop        rbp
000000000001350d         pop        r12
000000000001350f         pop        r13
0000000000013511         pop        r14
0000000000013513         pop        r15
0000000000013515         ret
                        ; endp
0000000000013516         align      32

                     loc_13520:
0000000000013520         mov        rsi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2109
0000000000013524         mov        rdi, qword [rsp+0x268+var_240]
0000000000013529         mov        qword [rsp+0x268+var_100], rdx
0000000000013531         xor        edx, edx
0000000000013533         call       merge_state_with_log                        ; merge_state_with_log
0000000000013538         mov        edx, dword [rsp+0x268+var_198]
000000000001353f         test       edx, edx
0000000000013541         jne        loc_13e7d

0000000000013547         test       rax, rax
000000000001354a         jne        loc_13e90

0000000000013550         mov        rdi, qword [rsp+0x268+var_90]
0000000000013558         jmp        loc_1318a
000000000001355d         align      32

                     loc_13560:
0000000000013560         mov        rsi, qword [r13+0x10]                       ; CODE XREF=re_search_internal+1840
0000000000013564         mov        rdi, qword [rsp+0x268+var_268]
0000000000013568         lea        rdx, qword [r13+0x18]
000000000001356c         mov        rcx, r8
000000000001356f         mov        qword [rsp+0x268+var_258], r8
0000000000013574         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
0000000000013579         test       rax, rax
000000000001357c         mov        r8, qword [rsp+0x268+var_258]
0000000000013581         je         loc_130c9

0000000000013587         jmp        loc_130a6
000000000001358c         align      16

                     loc_13590:
0000000000013590         cmp        rax, qword [rsp+0x268+var_F0]               ; CODE XREF=re_search_internal+1913
0000000000013598         jge        loc_130ef

                     loc_1359e:
000000000001359e         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+3870
00000000000135a2         lea        esi, dword [rbx+1]
00000000000135a5         call       extend_buffers                              ; extend_buffers
00000000000135aa         test       eax, eax
00000000000135ac         mov        dword [rsp+0x268+var_198], eax
00000000000135b3         jne        loc_13e98

00000000000135b9         test       byte [r14+0x68], 0x20
00000000000135be         mov        r8, qword [rsp+0x268+var_100]
00000000000135c6         je         loc_1310b

00000000000135cc         nop        dword [rax]

                     loc_135d0:
00000000000135d0         cmp        qword [r14+0x10], 0x0                       ; CODE XREF=re_search_internal+1941
00000000000135d5         mov        r13, qword [rsp+0x268+var_B0]
00000000000135dd         jle        loc_1390b

00000000000135e3         lea        rax, qword [r13+0xd8]
00000000000135ea         xor        r12d, r12d
00000000000135ed         mov        qword [rsp+0x268+var_1C8], rbx
00000000000135f5         mov        rbx, r12
00000000000135f8         mov        r12, r8
00000000000135fb         mov        qword [rsp+0x268+var_228], rax
0000000000013600         jmp        loc_13758
0000000000013605         align      8

                     loc_13608:
0000000000013608         test       al, 0x1                                     ; CODE XREF=re_search_internal+3643
000000000001360a         je         loc_1374a

0000000000013610         and        ecx, 0x8
0000000000013613         jne        loc_1374a

                     loc_13619:
0000000000013619         test       dl, 0x20                                    ; CODE XREF=re_search_internal+3652, re_search_internal+3660
000000000001361c         je         loc_13626

000000000001361e         test       al, 0x2
0000000000013620         je         loc_1374a

                     loc_13626:
0000000000013626         and        edx, 0x80                                   ; CODE XREF=re_search_internal+3244
000000000001362c         je         loc_13640

000000000001362e         test       al, 0x8
0000000000013630         je         loc_1374a

0000000000013636         nop        word [cs:rax+rax]

                     loc_13640:
0000000000013640         mov        rcx, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+3260, re_search_internal+3601
0000000000013644         mov        rsi, qword [rsp+0x268+var_228]
0000000000013649         mov        r8, r12
000000000001364c         mov        rdx, r15
000000000001364f         mov        rdi, rbp
0000000000013652         call       check_node_accept_bytes.isra.31             ; check_node_accept_bytes.isra.31
0000000000013657         test       eax, eax
0000000000013659         je         loc_13742

000000000001365f         movsxd     rbp, eax
0000000000013662         add        rbp, qword [rsp+0x268+var_100]
000000000001366a         cmp        dword [rsp+0x268+var_68], eax
0000000000013671         cmovge     eax, dword [rsp+0x268+var_68]
0000000000013679         mov        rdi, qword [rsp+0x268+var_268]
000000000001367d         mov        rsi, rbp
0000000000013680         mov        dword [rsp+0x268+var_68], eax
0000000000013687         call       clean_state_log_if_needed                   ; clean_state_log_if_needed
000000000001368c         test       eax, eax
000000000001368e         mov        dword [rsp+0x268+var_194], eax
0000000000013695         jne        loc_13930

000000000001369b         mov        rax, qword [r13+0x18]
000000000001369f         lea        r12, qword [rbp*8]
00000000000136a7         mov        rax, qword [rax+r15*8]
00000000000136ab         mov        r15, qword [rsp+0x268+var_90]
00000000000136b3         lea        rdx, qword [rax+rax*2]
00000000000136b7         mov        rax, qword [r13+0x30]
00000000000136bb         add        r15, r12
00000000000136be         lea        rdx, qword [rax+rdx*8]
00000000000136c2         mov        rax, qword [r15]
00000000000136c5         test       rax, rax
00000000000136c8         je         loc_137c8

00000000000136ce         mov        rsi, qword [rax+0x50]
00000000000136d2         mov        rdi, qword [rsp+0x268+var_208]
00000000000136d7         call       re_node_set_init_union                      ; re_node_set_init_union
00000000000136dc         test       eax, eax
00000000000136de         mov        dword [rsp+0x268+var_194], eax
00000000000136e5         jne        loc_13930

00000000000136eb         mov        edx, dword [rsp+0x268+var_A8]
00000000000136f2         mov        rdi, qword [rsp+0x268+var_268]
00000000000136f6         lea        rsi, qword [rbp-1]
00000000000136fa         call       re_string_context_at                        ; re_string_context_at
00000000000136ff         mov        rdx, qword [rsp+0x268+var_208]
0000000000013704         mov        rdi, qword [rsp+0x268+var_1E8]
000000000001370c         mov        ecx, eax
000000000001370e         add        r12, qword [rsp+0x268+var_90]
0000000000013716         mov        rsi, r13
0000000000013719         call       re_acquire_state_context                    ; re_acquire_state_context
000000000001371e         mov        rdi, qword [rsp+0x268+var_178]              ; argument "__ptr" for method j_free
0000000000013726         mov        qword [r12], rax
000000000001372a         call       j_free                                      ; free
000000000001372f         mov        rdi, qword [rsp+0x268+var_90]
0000000000013737         cmp        qword [rdi+rbp*8], 0x0
000000000001373c         je         loc_13821

                     loc_13742:
0000000000013742         mov        r12, qword [rsp+0x268+var_100]              ; CODE XREF=re_search_internal+3305, re_search_internal+3755, re_search_internal+3770

                     loc_1374a:
000000000001374a         add        rbx, 0x1                                    ; CODE XREF=re_search_internal+3226, re_search_internal+3235, re_search_internal+3248, re_search_internal+3264, re_search_internal+3586, re_search_internal+3666
000000000001374e         cmp        rbx, qword [r14+0x10]
0000000000013752         jge        loc_13900

                     loc_13758:
0000000000013758         mov        rax, qword [r14+0x18]                       ; CODE XREF=re_search_internal+3216
000000000001375c         mov        rbp, qword [r13]
0000000000013760         mov        r15, qword [rax+rbx*8]
0000000000013764         mov        rax, r15
0000000000013767         shl        rax, 0x4
000000000001376b         add        rax, rbp
000000000001376e         test       byte [rax+0xa], 0x10
0000000000013772         je         loc_1374a

0000000000013774         mov        ecx, dword [rax+8]
0000000000013777         test       ecx, 0x3ff00
000000000001377d         mov        dword [rsp+0x268+var_258], ecx
0000000000013781         je         loc_13640

0000000000013787         mov        edx, dword [rsp+0x268+var_A8]
000000000001378e         mov        rdi, qword [rsp+0x268+var_268]
0000000000013792         mov        rsi, r12
0000000000013795         call       re_string_context_at                        ; re_string_context_at
000000000001379a         mov        ecx, dword [rsp+0x268+var_258]
000000000001379e         shr        ecx, 0x8
00000000000137a1         mov        edx, ecx
00000000000137a3         and        dx, 0x3ff
00000000000137a8         test       cl, 0x4
00000000000137ab         jne        loc_13608

00000000000137b1         and        ecx, 0x8
00000000000137b4         je         loc_13619

00000000000137ba         test       al, 0x1
00000000000137bc         je         loc_13619

00000000000137c2         jmp        loc_1374a
00000000000137c4         align      8

                     loc_137c8:
00000000000137c8         movdqu     xmm0, xmmword [rdx]                         ; CODE XREF=re_search_internal+3416
00000000000137cc         lea        rsi, qword [rbp-1]
00000000000137d0         mov        rdi, qword [rsp+0x268+var_268]
00000000000137d4         movaps     xmmword [rsp+0x268+var_188], xmm0
00000000000137dc         mov        rax, qword [rdx+0x10]
00000000000137e0         mov        edx, dword [rsp+0x268+var_A8]
00000000000137e7         mov        qword [rsp+0x268+var_178], rax
00000000000137ef         call       re_string_context_at                        ; re_string_context_at
00000000000137f4         mov        rdi, qword [rsp+0x268+var_1E8]
00000000000137fc         mov        rdx, qword [rsp+0x268+var_208]
0000000000013801         mov        ecx, eax
0000000000013803         mov        rsi, r13
0000000000013806         call       re_acquire_state_context                    ; re_acquire_state_context
000000000001380b         mov        rdi, qword [rsp+0x268+var_90]
0000000000013813         mov        qword [r15], rax
0000000000013816         cmp        qword [rdi+rbp*8], 0x0
000000000001381b         jne        loc_13742

                     loc_13821:
0000000000013821         mov        eax, dword [rsp+0x268+var_194]              ; CODE XREF=re_search_internal+3532
0000000000013828         test       eax, eax
000000000001382a         je         loc_13742

0000000000013830         mov        rbx, qword [rsp+0x268+var_1C8]
0000000000013838         jmp        loc_13940
000000000001383d         align      64

                     loc_13840:
0000000000013840         mov        rbp, qword [r14+0x60]                       ; CODE XREF=re_search_internal+1979
0000000000013844         test       rbp, rbp
0000000000013847         je         loc_139f5

000000000001384d         mov        rax, qword [rsp+0x268+var_100]
0000000000013855         mov        edx, dword [rsp+0x268+var_A8]
000000000001385c         mov        rdi, qword [rsp+0x268+var_268]
0000000000013860         lea        rsi, qword [rax-1]
0000000000013864         call       re_string_context_at                        ; re_string_context_at
0000000000013869         test       al, 0x1
000000000001386b         je         loc_13920

0000000000013871         mov        r13, qword [rbp+r13*8+0x800]
0000000000013879         jmp        loc_13135
000000000001387e         align      128

                     loc_13880:
0000000000013880         cmp        rax, qword [rsp+0x268+var_F0]               ; CODE XREF=re_search_internal+1930
0000000000013888         jge        loc_13100

000000000001388e         jmp        loc_1359e

                     loc_13893:
0000000000013893         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+4700
0000000000013896         call       j_free                                      ; free
000000000001389b         nop        dword [rax+rax]

                     loc_138a0:
00000000000138a0         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2159, re_search_internal+5355, re_search_internal+5671
00000000000138a4         call       match_ctx_clean                             ; match_ctx_clean
00000000000138a9         mov        rbp, qword [rsp+0x268+var_190]

                     loc_138b1:
00000000000138b1         movsxd     rax, dword [rsp+0x268+var_1BC]              ; CODE XREF=re_search_internal+1559
00000000000138b9         add        rbp, rax
00000000000138bc         cmp        rbp, qword [rsp+0x268+var_1D8]
00000000000138c4         mov        qword [rsp+0x268+var_190], rbp
00000000000138cc         jl         loc_138d9

00000000000138ce         cmp        rbp, qword [rsp+0x268+var_1F8]
00000000000138d3         jle        loc_12e48

                     loc_138d9:
00000000000138d9         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+1172, re_search_internal+1482, re_search_internal+2764, re_search_internal+3932, re_search_internal+4393, re_search_internal+4402
00000000000138e1         mov        dword [rsp+0x268+var_20C], 0x1
00000000000138e9         jmp        loc_134c8
00000000000138ee         align      16

                     loc_138f0:
00000000000138f0         mov        dword [rsp+0x268+var_20C], 0x1              ; CODE XREF=re_search_internal+238, re_search_internal+256, re_search_internal+269, re_search_internal+282, re_search_internal+293
00000000000138f8         jmp        loc_134e9
00000000000138fd         align      256

                     loc_13900:
0000000000013900         mov        rbx, qword [rsp+0x268+var_1C8]              ; CODE XREF=re_search_internal+3554
0000000000013908         mov        r8, r12

                     loc_1390b:
000000000001390b         mov        dword [rsp+0x268+var_198], 0x0              ; CODE XREF=re_search_internal+3181
0000000000013916         jmp        loc_1310b
000000000001391b         align      32

                     loc_13920:
0000000000013920         mov        r13, qword [rbp+r13*8]                      ; CODE XREF=re_search_internal+3835
0000000000013925         jmp        loc_13135
000000000001392a         align      16

                     loc_13930:
0000000000013930         mov        rbx, qword [rsp+0x268+var_1C8]              ; CODE XREF=re_search_internal+3365, re_search_internal+3445
0000000000013938         mov        rdi, qword [rsp+0x268+var_90]

                     loc_13940:
0000000000013940         test       rdi, rdi                                    ; CODE XREF=re_search_internal+3784
0000000000013943         mov        dword [rsp+0x268+var_198], eax
000000000001394a         je         loc_13a30

                     loc_13950:
0000000000013950         xor        r13d, r13d                                  ; CODE XREF=re_search_internal+4275
0000000000013953         jmp        loc_13140
0000000000013958         align      32

                     loc_13960:
0000000000013960         mov        edx, dword [rsp+0x268+var_A8]               ; CODE XREF=re_search_internal+1656
0000000000013967         mov        rdi, qword [rsp+0x268+var_268]
000000000001396b         lea        rsi, qword [rax-1]
000000000001396f         call       re_string_context_at                        ; re_string_context_at
0000000000013974         test       al, 0x1
0000000000013976         je         loc_13ae5

000000000001397c         mov        r14, qword [rbx+0x50]

                     loc_13980:
0000000000013980         test       r14, r14                                    ; CODE XREF=re_search_internal+4503, re_search_internal+5619, re_search_internal+5726
0000000000013983         jne        loc_12fee

0000000000013989         mov        eax, dword [rsp+0x268+var_198]
0000000000013990         cmp        eax, 0xc
0000000000013993         mov        dword [rsp+0x268+var_20C], eax
0000000000013997         je         loc_134c0

000000000001399d         lea        rcx, qword [__PRETTY_FUNCTION__.7972]       ; argument "__function" for method j___assert_fail, "check_matching"
00000000000139a4         lea        rsi, qword [aCoreutils831li_1c6d0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
00000000000139ab         lea        rdi, qword [aErrRegespace]                  ; argument "__assertion" for method j___assert_fail, "err == REG_ESPACE"
00000000000139b2         mov        edx, 0x435                                  ; argument "__line" for method j___assert_fail
00000000000139b7         call       j___assert_fail                             ; __assert_fail
                        ; endp
00000000000139bc         align      64

                     loc_139c0:
00000000000139c0         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+2197
00000000000139c5         cmp        qword [rax+0x98], 0x0
00000000000139cd         je         loc_13bfc

00000000000139d3         jmp        loc_13b1f

                     loc_139d8:
00000000000139d8         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+2403
00000000000139db         call       j_free                                      ; free

                     loc_139e0:
00000000000139e0         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+810, re_search_internal+864, re_search_internal+873, re_search_internal+942, re_search_internal+2169, re_search_internal+2369, re_search_internal+5419
00000000000139e8         mov        dword [rsp+0x268+var_20C], 0xc
00000000000139f0         jmp        loc_134c8

                     loc_139f5:
00000000000139f5         mov        rdi, qword [rsp+0x268+var_B0]               ; CODE XREF=re_search_internal+3799
00000000000139fd         mov        rsi, r14
0000000000013a00         call       build_trtable                               ; build_trtable
0000000000013a05         test       al, al
0000000000013a07         jne        loc_13124

0000000000013a0d         mov        rdi, qword [rsp+0x268+var_90]
0000000000013a15         mov        dword [rsp+0x268+var_198], 0xc
0000000000013a20         test       rdi, rdi
0000000000013a23         jne        loc_13950

0000000000013a29         nop        dword [rax]

                     loc_13a30:
0000000000013a30         mov        dword [rsp+0x268+var_20C], 0xc              ; CODE XREF=re_search_internal+975, re_search_internal+2046, re_search_internal+4058
0000000000013a38         jmp        loc_134c8

                     loc_13a3d:
0000000000013a3d         mov        rbx, qword [rsp+0x268+var_200]              ; CODE XREF=re_search_internal+1250
0000000000013a42         mov        r13d, dword [rsp+0x268+var_1BC]
0000000000013a4a         mov        r14, qword [rsp+0x268+var_1D8]
0000000000013a52         mov        r15, qword [rsp+0x268+var_1F8]
0000000000013a57         mov        r12, qword [rsp+0x268+var_1E0]
0000000000013a5f         jmp        loc_13aa8
0000000000013a61         align      8

                     loc_13a68:
0000000000013a68         cmp        r12, rbp                                    ; CODE XREF=re_search_internal+4427, re_search_internal+4467
0000000000013a6b         mov        rax, rbx
0000000000013a6e         jle        loc_13a7f

0000000000013a70         mov        rax, qword [rsp+0x268+var_140]
0000000000013a78         movzx      eax, byte [rax+rdx]
0000000000013a7c         add        rax, rbx

                     loc_13a7f:
0000000000013a7f         cmp        byte [rax], 0x0                             ; CODE XREF=re_search_internal+4350
0000000000013a82         jne        loc_12f48

0000000000013a88         movsxd     rax, r13d
0000000000013a8b         add        rbp, rax
0000000000013a8e         cmp        rbp, r14
0000000000013a91         mov        qword [rsp+0x268+var_190], rbp
0000000000013a99         jl         loc_138d9

0000000000013a9f         cmp        rbp, r15
0000000000013aa2         jg         loc_138d9

                     loc_13aa8:
0000000000013aa8         mov        rdx, rbp                                    ; CODE XREF=re_search_internal+4335
0000000000013aab         sub        rdx, qword [rsp+0x268+var_120]
0000000000013ab3         cmp        qword [rsp+0x268+var_110], rdx
0000000000013abb         ja         loc_13a68

0000000000013abd         mov        edx, dword [rsp+0x268+arg_10]
0000000000013ac4         mov        rdi, qword [rsp+0x268+var_268]
0000000000013ac8         mov        rsi, rbp
0000000000013acb         call       re_string_reconstruct                       ; re_string_reconstruct
0000000000013ad0         test       eax, eax
0000000000013ad2         jne        loc_134b8

0000000000013ad8         mov        rdx, rbp
0000000000013adb         sub        rdx, qword [rsp+0x268+var_120]
0000000000013ae3         jmp        loc_13a68

                     loc_13ae5:
0000000000013ae5         test       eax, eax                                    ; CODE XREF=re_search_internal+4102
0000000000013ae7         je         loc_12fee

0000000000013aed         mov        edx, eax
0000000000013aef         and        edx, 0x6
0000000000013af2         cmp        edx, 0x6
0000000000013af5         je         loc_13f5f

0000000000013afb         test       al, 0x2
0000000000013afd         je         loc_13fb0

0000000000013b03         mov        r14, qword [rbx+0x58]
0000000000013b07         jmp        loc_13980

                     loc_13b0c:
0000000000013b0c         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+2212
0000000000013b11         cmp        qword [rax+0x98], 0x0
0000000000013b19         je         loc_13bfc

                     loc_13b1f:
0000000000013b1f         mov        rcx, qword [rsp+0x268+var_248]              ; CODE XREF=re_search_internal+4195
0000000000013b24         mov        rbx, qword [rsp+0x268+var_90]
0000000000013b2c         mov        rdi, qword [rsp+0x268+var_268]
0000000000013b30         mov        rax, qword [rbx+rcx*8]
0000000000013b34         mov        rsi, qword [rax+0x10]
0000000000013b38         lea        rdx, qword [rax+0x18]
0000000000013b3c         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
0000000000013b41         mov        qword [rsp+0x268+var_98], rax
0000000000013b49         jmp        loc_13268

                     loc_13b4e:
0000000000013b4e         xor        ecx, ecx                                    ; CODE XREF=re_search_internal+1113, re_search_internal+1128
0000000000013b50         jmp        loc_12dde

                     loc_13b55:
0000000000013b55         pxor       xmm0, xmm0                                  ; CODE XREF=re_search_internal+2383
0000000000013b59         mov        qword [rsp+0x268+var_188], rax
0000000000013b61         mov        rdi, qword [rsp+0x268+var_268]
0000000000013b65         mov        rax, qword [rsp+0x268+var_248]
0000000000013b6a         lea        rbx, qword [rsp+0x268+var_188]
0000000000013b72         mov        qword [rsp+0x268+var_180], 0x0
0000000000013b7e         mov        qword [rsp+0x268+var_178], r13
0000000000013b86         mov        rsi, rbx
0000000000013b89         mov        qword [rsp+0x268+var_158], 0x0
0000000000013b95         movaps     xmmword [rsp+0x268+var_168], xmm0
0000000000013b9d         mov        qword [rsp+0x268+var_170], rax
0000000000013ba5         call       sift_states_backward                        ; sift_states_backward
0000000000013baa         mov        rdi, qword [rsp+0x268+var_158]              ; argument "__ptr" for method j_free
0000000000013bb2         mov        dword [rsp+0x268+var_260], eax
0000000000013bb6         call       j_free                                      ; free
0000000000013bbb         mov        eax, dword [rsp+0x268+var_260]
0000000000013bbf         test       eax, eax
0000000000013bc1         jne        loc_14008

0000000000013bc7         cmp        qword [r12], 0x0
0000000000013bcc         je         loc_13893

                     loc_13bd2:
0000000000013bd2         mov        rdi, qword [rsp+0x268+var_90]               ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+5778
0000000000013bda         call       j_free                                      ; free
0000000000013bdf         mov        rax, qword [rsp+0x268+var_248]
0000000000013be4         mov        qword [rsp+0x268+var_90], r12
0000000000013bec         mov        qword [rsp+0x268+var_98], r13
0000000000013bf4         mov        qword [rsp+0x268+var_A0], rax

                     loc_13bfc:
0000000000013bfc         cmp        qword [rsp+0x268+arg_0], 0x0                ; CODE XREF=re_search_internal+2290, re_search_internal+4189, re_search_internal+4521
0000000000013c05         je         loc_134c0

0000000000013c0b         cmp        qword [rsp+0x268+arg_0], 0x1
0000000000013c14         je         loc_14038

0000000000013c1a         mov        rsi, qword [rsp+0x268+var_1B0]
0000000000013c22         mov        rcx, qword [rsp+0x268+arg_0]
0000000000013c2a         mov        rdx, 0xffffffffffffffff
0000000000013c31         shl        rcx, 0x4
0000000000013c35         lea        rax, qword [rsi+0x10]
0000000000013c39         add        rcx, rsi

                     loc_13c3c:
0000000000013c3c         mov        qword [rax+8], rdx                          ; CODE XREF=re_search_internal+4826
0000000000013c40         mov        qword [rax], rdx
0000000000013c43         add        rax, 0x10
0000000000013c47         cmp        rcx, rax
0000000000013c4a         jne        loc_13c3c

0000000000013c4c         mov        rdi, qword [rsp+0x268+var_1B0]
0000000000013c54         mov        rax, qword [rsp+0x268+var_A0]
0000000000013c5c         mov        qword [rdi+8], rax
0000000000013c60         mov        rax, qword [rsp+0x268+var_220]
0000000000013c65         mov        qword [rdi], 0x0
0000000000013c6c         test       byte [rax+0x38], 0x10
0000000000013c70         jne        loc_14053

0000000000013c76         cmp        qword [rsp+0x268+arg_0], 0x1
0000000000013c7f         je         loc_14053

0000000000013c85         mov        rax, qword [rsp+0x268+var_230]
0000000000013c8a         xor        r8d, r8d
0000000000013c8d         test       byte [rax+0xb0], 0x1
0000000000013c94         je         loc_13ca5

0000000000013c96         xor        r8d, r8d
0000000000013c99         cmp        qword [rax+0x98], 0x0
0000000000013ca1         setg       r8b

                     loc_13ca5:
0000000000013ca5         mov        rbx, qword [rsp+0x268+var_1B0]              ; CODE XREF=re_search_internal+4900
0000000000013cad         mov        rdx, qword [rsp+0x268+arg_0]
0000000000013cb5         mov        rsi, qword [rsp+0x268+var_268]
0000000000013cb9         mov        rdi, qword [rsp+0x268+var_220]
0000000000013cbe         mov        rcx, rbx
0000000000013cc1         call       set_regs                                    ; set_regs
0000000000013cc6         test       eax, eax
0000000000013cc8         jne        loc_13f9d

0000000000013cce         mov        rax, qword [rbx]

                     loc_13cd1:
0000000000013cd1         movzx      r11d, byte [rsp+0x268+var_BC]               ; CODE XREF=re_search_internal+5861
0000000000013cda         mov        r10, qword [rsp+0x268+var_118]
0000000000013ce2         xor        ecx, ecx
0000000000013ce4         mov        r9, qword [rsp+0x268+var_130]
0000000000013cec         mov        r8, qword [rsp+0x268+var_110]
0000000000013cf4         mov        rdi, qword [rsp+0x268+var_190]
0000000000013cfc         mov        rdx, qword [rsp+0x268+var_1B0]
0000000000013d04         jmp        loc_13d09

                     loc_13d06:
0000000000013d06         mov        rax, qword [rdx]                            ; CODE XREF=re_search_internal+5065

                     loc_13d09:
0000000000013d09         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=re_search_internal+5012
0000000000013d0d         je         loc_13d29

0000000000013d0f         test       r11b, r11b
0000000000013d12         mov        rsi, qword [rdx+8]
0000000000013d16         jne        loc_1405a

                     loc_13d1c:
0000000000013d1c         add        rax, rdi                                    ; CODE XREF=re_search_internal+5887, re_search_internal+5895
0000000000013d1f         add        rsi, rdi
0000000000013d22         mov        qword [rdx], rax
0000000000013d25         mov        qword [rdx+8], rsi

                     loc_13d29:
0000000000013d29         add        rcx, 0x1                                    ; CODE XREF=re_search_internal+5021
0000000000013d2d         add        rdx, 0x10
0000000000013d31         cmp        rcx, qword [rsp+0x268+arg_0]
0000000000013d39         jne        loc_13d06

0000000000013d3b         cmp        qword [rsp+0x268+var_1D0], 0x0
0000000000013d44         jle        loc_13d85

0000000000013d46         mov        rdx, qword [rsp+0x268+var_1D0]
0000000000013d4e         mov        rdi, qword [rsp+0x268+var_1B0]
0000000000013d56         mov        rax, rcx
0000000000013d59         shl        rax, 0x4
0000000000013d5d         add        rdx, rcx
0000000000013d60         lea        rax, qword [rdi+rax+8]
0000000000013d65         shl        rdx, 0x4
0000000000013d69         lea        rsi, qword [rdi+rdx+8]
0000000000013d6e         mov        rdx, 0xffffffffffffffff

                     loc_13d75:
0000000000013d75         mov        qword [rax-8], rdx                          ; CODE XREF=re_search_internal+5139
0000000000013d79         mov        qword [rax], rdx
0000000000013d7c         add        rax, 0x10
0000000000013d80         cmp        rsi, rax
0000000000013d83         jne        loc_13d75

                     loc_13d85:
0000000000013d85         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+5076
0000000000013d8a         mov        rdi, qword [rsp+0x268+var_90]
0000000000013d92         mov        r9, qword [rax+0xe0]
0000000000013d99         test       r9, r9
0000000000013d9c         je         loc_134c8

0000000000013da2         mov        r10, qword [rsp+0x268+var_1B0]
0000000000013daa         xor        r8d, r8d
0000000000013dad         lea        rdx, qword [r10+0x10]
0000000000013db1         jmp        loc_13de9

                     loc_13db3:
0000000000013db3         mov        rax, qword [r9+rsi*8-8]                     ; CODE XREF=re_search_internal+5248
0000000000013db8         cmp        rax, r8
0000000000013dbb         je         loc_13de2

0000000000013dbd         add        rax, 0x1
0000000000013dc1         shl        rax, 0x4
0000000000013dc5         mov        rax, qword [r10+rax]
0000000000013dc9         mov        qword [rdx], rax
0000000000013dcc         mov        rax, qword [r9+rsi*8-8]
0000000000013dd1         add        rax, 0x1
0000000000013dd5         shl        rax, 0x4
0000000000013dd9         mov        rax, qword [r10+rax+8]
0000000000013dde         mov        qword [rdx+8], rax

                     loc_13de2:
0000000000013de2         add        rdx, 0x10                                   ; CODE XREF=re_search_internal+5195
0000000000013de6         mov        r8, rsi

                     loc_13de9:
0000000000013de9         lea        rsi, qword [r8+1]                           ; CODE XREF=re_search_internal+5185
0000000000013ded         cmp        rsi, rcx
0000000000013df0         jne        loc_13db3

0000000000013df2         jmp        loc_134c8
0000000000013df7         align      512

                     loc_13e00:
0000000000013e00         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+2922
0000000000013e04         call       match_ctx_clean                             ; match_ctx_clean
0000000000013e09         mov        rdi, qword [rsp+0x268+var_50]               ; argument "__ptr" for method j_free
0000000000013e11         call       j_free                                      ; free
0000000000013e16         mov        rdi, qword [rsp+0x268+var_70]               ; argument "__ptr" for method j_free
0000000000013e1e         call       j_free                                      ; free
0000000000013e23         jmp        loc_134e0

                     loc_13e28:
0000000000013e28         mov        rax, qword [rsp+0x268+var_230]              ; CODE XREF=re_search_internal+915
0000000000013e2d         test       byte [rax+0xb0], 0x2
0000000000013e34         jne        loc_12d09

0000000000013e3a         mov        qword [rsp+0x268+var_90], 0x0
0000000000013e46         jmp        loc_12d45

                     loc_13e4b:
0000000000013e4b         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+2584
0000000000013e4e         call       j_free                                      ; free
0000000000013e53         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000013e56         call       j_free                                      ; free
0000000000013e5b         jmp        loc_138a0

                     loc_13e60:
0000000000013e60         mov        qword [rsp+0x268+var_190], rax              ; CODE XREF=re_search_internal+2828
0000000000013e68         mov        rdi, qword [rsp+0x268+var_90]
0000000000013e70         mov        dword [rsp+0x268+var_20C], 0x1
0000000000013e78         jmp        loc_134c8

                     loc_13e7d:
0000000000013e7d         test       rax, rax                                    ; CODE XREF=re_search_internal+3025
0000000000013e80         mov        r13, rax
0000000000013e83         jne        loc_13078

0000000000013e89         jmp        loc_131c4
0000000000013e8e         align      16

                     loc_13e90:
0000000000013e90         mov        r13, rax                                    ; CODE XREF=re_search_internal+3034
0000000000013e93         jmp        loc_13078

                     loc_13e98:
0000000000013e98         cmp        eax, 0xc                                    ; CODE XREF=re_search_internal+3139
0000000000013e9b         je         loc_139e0

0000000000013ea1         lea        rcx, qword [__PRETTY_FUNCTION__.7972]       ; argument "__function" for method j___assert_fail, "check_matching"
0000000000013ea8         lea        rsi, qword [aCoreutils831li_1c6d0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
0000000000013eaf         lea        rdi, qword [aErrRegespace]                  ; argument "__assertion" for method j___assert_fail, "err == REG_ESPACE"
0000000000013eb6         mov        edx, 0x46c                                  ; argument "__line" for method j___assert_fail
0000000000013ebb         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_13ec0:
0000000000013ec0         cmp        byte [r14+0x68], 0x0                        ; CODE XREF=re_search_internal+1735
0000000000013ec5         js         loc_13f36

                     loc_13ec7:
0000000000013ec7         mov        esi, dword [rsp+0x268+var_210]              ; CODE XREF=re_search_internal+5610
0000000000013ecb         mov        rax, qword [rsp+0x268+var_260]
0000000000013ed0         test       esi, esi
0000000000013ed2         mov        qword [rsp+0x268+var_248], rax
0000000000013ed7         je         loc_131d6

0000000000013edd         mov        qword [rsp+0x268+var_238], 0x1
0000000000013ee6         jmp        loc_1303d

                     loc_13eeb:
0000000000013eeb         mov        rdi, rbx                                    ; CODE XREF=re_search_internal+2327
0000000000013eee         mov        dword [rsp+0x268+var_20C], 0xc
0000000000013ef6         jmp        loc_134c8

                     loc_13efb:
0000000000013efb         lea        rbx, qword [r14+0x10]                       ; CODE XREF=re_search_internal+1692
0000000000013eff         lea        rbp, qword [r14+0x18]
0000000000013f03         mov        rdi, qword [rsp+0x268+var_268]
0000000000013f07         xor        ecx, ecx
0000000000013f09         mov        rdx, rbp
0000000000013f0c         mov        rsi, rbx
0000000000013f0f         call       check_subexp_matching_top.isra.18           ; check_subexp_matching_top.isra.18
0000000000013f14         test       eax, eax
0000000000013f16         mov        dword [rsp+0x268+var_198], eax
0000000000013f1d         jne        loc_13f68

0000000000013f1f         movzx      eax, byte [r14+0x68]
0000000000013f24         test       al, 0x40
0000000000013f26         jne        loc_14010

                     loc_13f2c:
0000000000013f2c         mov        byte [rsp+0x268+var_250], 0x0               ; CODE XREF=re_search_internal+5827
0000000000013f31         jmp        loc_13023

                     loc_13f36:
0000000000013f36         mov        rsi, qword [r14+0x10]                       ; CODE XREF=re_search_internal+5461
0000000000013f3a         mov        rcx, qword [rsp+0x268+var_260]
0000000000013f3f         lea        rdx, qword [r14+0x18]
0000000000013f43         mov        rdi, qword [rsp+0x268+var_268]
0000000000013f47         call       check_halt_state_context.isra.20            ; check_halt_state_context.isra.20
0000000000013f4c         test       rax, rax
0000000000013f4f         mov        qword [rsp+0x268+var_238], rax
0000000000013f54         je         loc_1303d

0000000000013f5a         jmp        loc_13ec7

                     loc_13f5f:
0000000000013f5f         mov        r14, qword [rbx+0x60]                       ; CODE XREF=re_search_internal+4485
0000000000013f63         jmp        loc_13980

                     loc_13f68:
0000000000013f68         cdqe                                                   ; CODE XREF=re_search_internal+5549, re_search_internal+5816
0000000000013f6a         mov        qword [rsp+0x268+var_248], rax
0000000000013f6f         jmp        loc_131d6

                     loc_13f74:
0000000000013f74         mov        r14, qword [rsp+0x268+var_250]              ; CODE XREF=re_search_internal+2534
0000000000013f79         mov        eax, r15d

                     loc_13f7c:
0000000000013f7c         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_internal+5787
0000000000013f7f         mov        dword [rsp+0x268+var_260], eax
0000000000013f83         call       j_free                                      ; free
0000000000013f88         mov        rdi, r14                                    ; argument "__ptr" for method j_free
0000000000013f8b         call       j_free                                      ; free
0000000000013f90         mov        eax, dword [rsp+0x268+var_260]
0000000000013f94         cmp        eax, 0x1
0000000000013f97         je         loc_138a0

                     loc_13f9d:
0000000000013f9d         mov        rdi, qword [rsp+0x268+var_90]               ; CODE XREF=re_search_internal+4952
0000000000013fa5         mov        dword [rsp+0x268+var_20C], eax
0000000000013fa9         jmp        loc_134c8
0000000000013fae         align      16

                     loc_13fb0:
0000000000013fb0         test       al, 0x4                                     ; CODE XREF=re_search_internal+4493
0000000000013fb2         je         loc_12fee

0000000000013fb8         mov        rdx, qword [r14+0x50]
0000000000013fbc         mov        rdi, qword [rsp+0x268+var_240]
0000000000013fc1         mov        ecx, eax
0000000000013fc3         mov        rsi, rbx
0000000000013fc6         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000013fcb         mov        r14, rax
0000000000013fce         jmp        loc_13980

                     loc_13fd3:
0000000000013fd3         mov        r15, qword [rsp+0x268+var_258]              ; CODE XREF=re_search_internal+2545, re_search_internal+2556
0000000000013fd8         mov        rcx, qword [rsp+0x268+var_260]
0000000000013fdd         mov        rdx, rbp
0000000000013fe0         mov        rsi, r12
0000000000013fe3         mov        qword [rsp+0x268+var_248], r14
0000000000013fe8         mov        rdi, r15
0000000000013feb         call       merge_state_array                           ; merge_state_array
0000000000013ff0         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000013ff3         mov        dword [rsp+0x268+var_260], eax
0000000000013ff7         call       j_free                                      ; free
0000000000013ffc         mov        eax, dword [rsp+0x268+var_260]
0000000000014000         test       eax, eax
0000000000014002         je         loc_13bd2

                     loc_14008:
0000000000014008         xor        r14d, r14d                                  ; CODE XREF=re_search_internal+4689
000000000001400b         jmp        loc_13f7c

                     loc_14010:
0000000000014010         mov        rdi, qword [rsp+0x268+var_268]              ; CODE XREF=re_search_internal+5558
0000000000014014         mov        rdx, rbp
0000000000014017         mov        rsi, rbx
000000000001401a         call       transit_state_bkref.isra.34                 ; transit_state_bkref.isra.34
000000000001401f         test       eax, eax
0000000000014021         mov        dword [rsp+0x268+var_198], eax
0000000000014028         jne        loc_13f68

000000000001402e         movzx      eax, byte [r14+0x68]
0000000000014033         jmp        loc_13f2c

                     loc_14038:
0000000000014038         mov        rsi, qword [rsp+0x268+var_1B0]              ; CODE XREF=re_search_internal+4772
0000000000014040         mov        rax, qword [rsp+0x268+var_A0]
0000000000014048         mov        qword [rsi], 0x0
000000000001404f         mov        qword [rsi+8], rax

                     loc_14053:
0000000000014053         xor        eax, eax                                    ; CODE XREF=re_search_internal+4864, re_search_internal+4879
0000000000014055         jmp        loc_13cd1

                     loc_1405a:
000000000001405a         cmp        r10, rax                                    ; CODE XREF=re_search_internal+5030
000000000001405d         je         loc_1407c

000000000001405f         mov        rax, qword [r9+rax*8]

                     loc_14063:
0000000000014063         cmp        r10, rsi                                    ; CODE XREF=re_search_internal+5903
0000000000014066         mov        qword [rdx], rax
0000000000014069         je         loc_14074

000000000001406b         mov        rsi, qword [r9+rsi*8]
000000000001406f         jmp        loc_13d1c

                     loc_14074:
0000000000014074         mov        rsi, r8                                     ; CODE XREF=re_search_internal+5881
0000000000014077         jmp        loc_13d1c

                     loc_1407c:
000000000001407c         mov        rax, r8                                     ; CODE XREF=re_search_internal+5869
000000000001407f         jmp        loc_14063

                     loc_14081:
0000000000014081         mov        qword [rsp+0x268+var_190], rbp              ; CODE XREF=re_search_internal+1396, re_search_internal+2737
0000000000014089         jmp        loc_12f48

                     loc_1408e:
000000000001408e         mov        qword [rsp+0x268+var_100], rax              ; CODE XREF=re_search_internal+2126
0000000000014096         jmp        loc_131c4

                     loc_1409b:
000000000001409b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_search_internal+2958
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_78: int64_t, -120
        ;    var_7C: int32_t, -124
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208


                     update_cur_sifted_state:
00000000000140a0         push       r15                                         ; End of unwind block (FDE at 0x1f6b0), Begin of unwind block (FDE at 0x1f700), CODE XREF=sift_states_backward+112, sift_states_backward+655
00000000000140a2         push       r14
00000000000140a4         mov        rax, rdi
00000000000140a7         push       r13
00000000000140a9         push       r12
00000000000140ab         mov        r13, rsi
00000000000140ae         push       rbp
00000000000140af         push       rbx
00000000000140b0         mov        rbp, rdx
00000000000140b3         mov        rbx, rcx
00000000000140b6         lea        rcx, qword [rdx*8]
00000000000140be         sub        rsp, 0xa8
00000000000140c5         mov        r12, qword [rax+0x98]
00000000000140cc         mov        rax, qword [rax+0xb8]
00000000000140d3         mov        qword [rsp+0xd8+var_D0], rdi
00000000000140d8         mov        qword [rsp+0xd8+var_C0], rcx
00000000000140dd         mov        rdi, qword [fs:0x28]
00000000000140e6         mov        qword [rsp+0xd8+var_40], rdi
00000000000140ee         xor        edi, edi
00000000000140f0         mov        rdx, qword [rax+rdx*8]
00000000000140f4         mov        dword [rsp+0xd8+var_7C], 0x0
00000000000140fc         mov        rcx, qword [rbx+8]
0000000000014100         test       rdx, rdx
0000000000014103         je         loc_14358

0000000000014109         lea        rdi, qword [rdx+8]
000000000001410d         test       rcx, rcx
0000000000014110         mov        qword [rsp+0xd8+var_C8], rdi
0000000000014115         jne        loc_14168

0000000000014117         mov        rdx, qword [rsi]
000000000001411a         mov        qword [rdx+rbp*8], 0x0
0000000000014122         mov        rdx, qword [rax+rbp*8]
0000000000014126         xor        eax, eax
0000000000014128         test       byte [rdx+0x68], 0x40
000000000001412c         jne        loc_1420f

0000000000014132         nop        word [rax+rax]

                     loc_14138:
0000000000014138         mov        rdi, qword [rsp+0xd8+var_40]                ; CODE XREF=update_cur_sifted_state+233, update_cur_sifted_state+274, update_cur_sifted_state+321, update_cur_sifted_state+333, update_cur_sifted_state+361, update_cur_sifted_state+725, update_cur_sifted_state+738, update_cur_sifted_state+888, update_cur_sifted_state+1107, update_cur_sifted_state+1297, update_cur_sifted_state+1455
0000000000014140         xor        rdi, qword [fs:0x28]
0000000000014149         jne        loc_148eb

000000000001414f         add        rsp, 0xa8
0000000000014156         pop        rbx
0000000000014157         pop        rbp
0000000000014158         pop        r12
000000000001415a         pop        r13
000000000001415c         pop        r14
000000000001415e         pop        r15
0000000000014160         ret
                        ; endp
0000000000014161         align      8

                     loc_14168:
0000000000014168         lea        rdi, qword [rsp+0xd8+var_78]                ; CODE XREF=update_cur_sifted_state+117
000000000001416d         mov        rdx, rbx
0000000000014170         mov        rsi, r12
0000000000014173         mov        dword [rsp+0xd8+var_78], 0x0
000000000001417b         call       re_acquire_state                            ; re_acquire_state
0000000000014180         mov        rdx, rax
0000000000014183         mov        eax, dword [rsp+0xd8+var_78]
0000000000014187         test       eax, eax
0000000000014189         jne        loc_14138

000000000001418b         mov        r15, qword [rdx+0x38]
000000000001418f         lea        r14, qword [rdx+0x38]
0000000000014193         test       r15, r15
0000000000014196         je         loc_143a0

                     loc_1419c:
000000000001419c         mov        rsi, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+827, update_cur_sifted_state+840
00000000000141a1         mov        rdx, r14
00000000000141a4         mov        rdi, rbx
00000000000141a7         call       re_node_set_add_intersect                   ; re_node_set_add_intersect
00000000000141ac         test       eax, eax
00000000000141ae         mov        dword [rsp+0xd8+var_7C], eax
00000000000141b2         jne        loc_14138

00000000000141b4         cmp        qword [r13+0x28], 0x0
00000000000141b9         jne        loc_14430

                     loc_141bf:
00000000000141bf         mov        r14, qword [rsp+0xd8+var_C0]                ; CODE XREF=update_cur_sifted_state+1155
00000000000141c4         add        r14, qword [r13]

                     loc_141c8:
00000000000141c8         lea        rdi, qword [rsp+0xd8+var_7C]                ; CODE XREF=update_cur_sifted_state+905
00000000000141cd         mov        rdx, rbx
00000000000141d0         mov        rsi, r12
00000000000141d3         call       re_acquire_state                            ; re_acquire_state
00000000000141d8         mov        qword [r14], rax
00000000000141db         mov        eax, dword [rsp+0xd8+var_7C]
00000000000141df         test       eax, eax
00000000000141e1         jne        loc_14138

00000000000141e7         cmp        qword [rsp+0xd8+var_C8], 0x0
00000000000141ed         je         loc_14138

00000000000141f3         mov        rax, qword [rsp+0xd8+var_D0]
00000000000141f8         mov        rax, qword [rax+0xb8]
00000000000141ff         mov        rdx, qword [rax+rbp*8]
0000000000014203         xor        eax, eax
0000000000014205         test       byte [rdx+0x68], 0x40
0000000000014209         je         loc_14138

                     loc_1420f:
000000000001420f         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+140
0000000000014214         xor        ebx, ebx
0000000000014216         mov        rsi, qword [rax+0xc8]
000000000001421d         mov        rdx, rsi

                     loc_14220:
0000000000014220         cmp        rbx, rdx                                    ; CODE XREF=update_cur_sifted_state+759
0000000000014223         jge        loc_14283

0000000000014225         lea        rax, qword [rbx+rdx]
0000000000014229         mov        rcx, rax
000000000001422c         shr        rcx, 0x3f
0000000000014230         add        rcx, rax
0000000000014233         mov        rax, qword [rsp+0xd8+var_D0]
0000000000014238         sar        rcx, 0x1
000000000001423b         mov        rdi, qword [rax+0xd8]
0000000000014242         lea        rax, qword [rcx+rcx*4]
0000000000014246         cmp        rbp, qword [rdi+rax*8+8]
000000000001424b         jle        loc_1427e

000000000001424d         jmp        loc_14387
0000000000014252         align      8

                     loc_14258:
0000000000014258         lea        rdx, qword [rbx+rcx]                        ; CODE XREF=update_cur_sifted_state+481
000000000001425c         mov        rax, rdx
000000000001425f         shr        rax, 0x3f
0000000000014263         add        rax, rdx
0000000000014266         sar        rax, 0x1
0000000000014269         lea        rdx, qword [rax+rax*4]
000000000001426d         mov        r8, rax
0000000000014270         cmp        rbp, qword [rdi+rdx*8+8]
0000000000014275         jg         loc_14390

000000000001427b         mov        rcx, rax

                     loc_1427e:
000000000001427e         cmp        rbx, rcx                                    ; CODE XREF=update_cur_sifted_state+427
0000000000014281         jl         loc_14258

                     loc_14283:
0000000000014283         cmp        rsi, rbx                                    ; CODE XREF=update_cur_sifted_state+387
0000000000014286         jle        loc_14380

000000000001428c         lea        rax, qword [rbx+rbx*4]
0000000000014290         lea        rsi, qword [rax*8]
0000000000014298         mov        rax, qword [rsp+0xd8+var_D0]
000000000001429d         mov        qword [rsp+0xd8+var_98], rsi
00000000000142a2         mov        rax, qword [rax+0xd8]
00000000000142a9         cmp        rbp, qword [rax+rsi+8]
00000000000142ae         jne        loc_14380

00000000000142b4         cmp        rbx, 0xffffffffffffffff
00000000000142b8         je         loc_14380

00000000000142be         mov        rax, qword [rsp+0xd8+var_D0]
00000000000142c3         mov        qword [rsp+0xd8+var_78], 0x0
00000000000142cc         mov        r12, qword [rax+0x98]
00000000000142d3         mov        rax, qword [rsp+0xd8+var_C8]
00000000000142d8         cmp        qword [rax+8], 0x0
00000000000142dd         jle        loc_14380

00000000000142e3         lea        rax, qword [rsp+0xd8+var_78]
00000000000142e8         mov        qword [rsp+0xd8+var_B8], 0x0
00000000000142f1         mov        qword [rsp+0xd8+var_90], rbx
00000000000142f6         mov        r15, r13
00000000000142f9         mov        qword [rsp+0xd8+var_A0], rax
00000000000142fe         jmp        loc_14322

                     loc_14300:
0000000000014300         cmp        al, 0x4                                     ; CODE XREF=update_cur_sifted_state+679, update_cur_sifted_state+685
0000000000014302         je         loc_14688

                     loc_14308:
0000000000014308         mov        rcx, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+687, update_cur_sifted_state+1987
000000000001430d         add        qword [rsp+0xd8+var_B8], 0x1
0000000000014313         mov        rax, qword [rsp+0xd8+var_B8]
0000000000014318         cmp        rax, qword [rcx+8]
000000000001431c         jge        loc_148db

                     loc_14322:
0000000000014322         mov        rax, qword [rsp+0xd8+var_C8]                ; CODE XREF=update_cur_sifted_state+606
0000000000014327         mov        rdi, qword [rsp+0xd8+var_B8]
000000000001432c         mov        rax, qword [rax+0x10]
0000000000014330         mov        r14, qword [rax+rdi*8]
0000000000014334         mov        rax, r14
0000000000014337         shl        rax, 0x4
000000000001433b         add        rax, qword [r12]
000000000001433f         cmp        r14, qword [r15+0x10]
0000000000014343         movzx      eax, byte [rax+8]
0000000000014347         jne        loc_14300

0000000000014349         cmp        rbp, qword [r15+0x18]
000000000001434d         jne        loc_14300

000000000001434f         jmp        loc_14308
0000000000014351         align      8

                     loc_14358:
0000000000014358         lea        r14, qword [rbp*8]                          ; CODE XREF=update_cur_sifted_state+99
0000000000014360         add        r14, qword [rsi]
0000000000014363         test       rcx, rcx
0000000000014366         jne        loc_14420

000000000001436c         mov        qword [r14], 0x0
0000000000014373         xor        eax, eax
0000000000014375         jmp        loc_14138
000000000001437a         align      128

                     loc_14380:
0000000000014380         xor        eax, eax                                    ; CODE XREF=update_cur_sifted_state+486, update_cur_sifted_state+526, update_cur_sifted_state+536, update_cur_sifted_state+573, update_cur_sifted_state+2113
0000000000014382         jmp        loc_14138

                     loc_14387:
0000000000014387         mov        r8, rcx                                     ; CODE XREF=update_cur_sifted_state+429
000000000001438a         mov        rcx, rdx
000000000001438d         nop        dword [rax]

                     loc_14390:
0000000000014390         lea        rbx, qword [r8+1]                           ; CODE XREF=update_cur_sifted_state+469
0000000000014394         mov        rdx, rcx
0000000000014397         jmp        loc_14220
000000000001439c         align      32

                     loc_143a0:
00000000000143a0         mov        rdi, qword [rbx+8]                          ; CODE XREF=update_cur_sifted_state+246
00000000000143a4         mov        qword [rdx+0x40], 0x0
00000000000143ac         mov        qword [rsp+0xd8+var_B8], rdx
00000000000143b1         mov        qword [rdx+0x38], rdi
00000000000143b5         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
00000000000143b9         call       j_malloc                                    ; malloc
00000000000143be         mov        rdx, qword [rsp+0xd8+var_B8]
00000000000143c3         test       rax, rax
00000000000143c6         mov        qword [rdx+0x48], rax
00000000000143ca         je         loc_14413

00000000000143cc         cmp        qword [rbx+8], 0x0
00000000000143d1         mov        dword [rsp+0xd8+var_78], 0x0
00000000000143d9         jg         loc_143ee

00000000000143db         jmp        loc_1419c

                     loc_143e0:
00000000000143e0         add        r15, 0x1                                    ; CODE XREF=update_cur_sifted_state+881
00000000000143e4         cmp        r15, qword [rbx+8]
00000000000143e8         jge        loc_1419c

                     loc_143ee:
00000000000143ee         mov        rax, qword [rbx+0x10]                       ; CODE XREF=update_cur_sifted_state+825
00000000000143f2         mov        rdi, r14
00000000000143f5         mov        rax, qword [rax+r15*8]
00000000000143f9         lea        rdx, qword [rax+rax*2]
00000000000143fd         mov        rax, qword [r12+0x38]
0000000000014402         lea        rsi, qword [rax+rdx*8]
0000000000014406         call       re_node_set_merge                           ; re_node_set_merge
000000000001440b         test       eax, eax
000000000001440d         mov        dword [rsp+0xd8+var_78], eax
0000000000014411         je         loc_143e0

                     loc_14413:
0000000000014413         mov        eax, 0xc                                    ; CODE XREF=update_cur_sifted_state+810
0000000000014418         jmp        loc_14138
000000000001441d         align      32

                     loc_14420:
0000000000014420         mov        qword [rsp+0xd8+var_C8], 0x0                ; CODE XREF=update_cur_sifted_state+710
0000000000014429         jmp        loc_141c8
000000000001442e         align      16

                     loc_14430:
0000000000014430         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+281
0000000000014435         mov        rax, qword [rax+0xd8]
000000000001443c         mov        qword [rsp+0xd8+var_B8], rax
0000000000014441         jle        loc_1451b

0000000000014447         xor        r15d, r15d
000000000001444a         nop        word [rax+rax]

                     loc_14450:
0000000000014450         mov        rax, qword [r13+0x30]                       ; CODE XREF=update_cur_sifted_state+1141
0000000000014454         mov        rdi, qword [rsp+0xd8+var_B8]
0000000000014459         mov        rax, qword [rax+r15*8]
000000000001445d         lea        rax, qword [rax+rax*4]
0000000000014461         lea        rdx, qword [rdi+rax*8]
0000000000014465         cmp        rbp, qword [rdx+0x10]
0000000000014469         jle        loc_1450d

000000000001446f         cmp        rbp, qword [rdx+8]
0000000000014473         jg         loc_1450d

0000000000014479         mov        rcx, qword [rdx]
000000000001447c         mov        rax, qword [r12]
0000000000014480         mov        rsi, qword [rbx+8]
0000000000014484         shl        rcx, 0x4
0000000000014488         cmp        rbp, qword [rdx+0x18]
000000000001448c         mov        r8, qword [rax+rcx]
0000000000014490         je         loc_14530

0000000000014496         xor        r14d, r14d
0000000000014499         test       rsi, rsi
000000000001449c         jle        loc_1450d

000000000001449e         mov        qword [rsp+0xd8+var_B0], rbp
00000000000144a3         mov        rbp, r8
00000000000144a6         jmp        loc_144be
00000000000144a8         align      16

                     loc_144b0:
00000000000144b0         add        r14, 0x1                                    ; CODE XREF=update_cur_sifted_state+1082, update_cur_sifted_state+1087
00000000000144b4         cmp        r14, qword [rbx+8]
00000000000144b8         jge        loc_14508

                     loc_144ba:
00000000000144ba         mov        rax, qword [r12]                            ; CODE XREF=update_cur_sifted_state+1121

                     loc_144be:
00000000000144be         mov        rdx, qword [rbx+0x10]                       ; CODE XREF=update_cur_sifted_state+1030
00000000000144c2         mov        rsi, qword [rdx+r14*8]
00000000000144c6         mov        rdx, rsi
00000000000144c9         shl        rdx, 0x4
00000000000144cd         add        rax, rdx
00000000000144d0         movzx      edx, byte [rax+8]
00000000000144d4         sub        edx, 0x8
00000000000144d7         cmp        edx, 0x1
00000000000144da         ja         loc_144b0

00000000000144dc         cmp        rbp, qword [rax]
00000000000144df         jne        loc_144b0

00000000000144e1         mov        rcx, qword [rsp+0xd8+var_C8]
00000000000144e6         mov        rdx, rbx
00000000000144e9         mov        rdi, r12
00000000000144ec         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
00000000000144f1         test       eax, eax
00000000000144f3         jne        loc_14138

00000000000144f9         add        r14, 0x1
00000000000144fd         cmp        r14, qword [rbx+8]
0000000000014501         jl         loc_144ba

0000000000014503         nop        dword [rax+rax]

                     loc_14508:
0000000000014508         mov        rbp, qword [rsp+0xd8+var_B0]                ; CODE XREF=update_cur_sifted_state+1048

                     loc_1450d:
000000000001450d         add        r15, 0x1                                    ; CODE XREF=update_cur_sifted_state+969, update_cur_sifted_state+979, update_cur_sifted_state+1020, update_cur_sifted_state+1171, update_cur_sifted_state+1306, update_cur_sifted_state+1317, update_cur_sifted_state+1484, update_cur_sifted_state+1501
0000000000014511         cmp        r15, qword [r13+0x28]
0000000000014515         jl         loc_14450

                     loc_1451b:
000000000001451b         mov        dword [rsp+0xd8+var_7C], 0x0                ; CODE XREF=update_cur_sifted_state+929
0000000000014523         jmp        loc_141bf
0000000000014528         align      16

                     loc_14530:
0000000000014530         test       rsi, rsi                                    ; CODE XREF=update_cur_sifted_state+1008
0000000000014533         jle        loc_1450d

0000000000014535         mov        r10, qword [rbx+0x10]
0000000000014539         mov        r9, 0xffffffffffffffff
0000000000014540         lea        r11, qword [r10+rsi*8]
0000000000014544         mov        rcx, r10
0000000000014547         mov        rsi, r9
000000000001454a         jmp        loc_14566
000000000001454c         align      16

                     loc_14550:
0000000000014550         cmp        r14d, 0x9                                   ; CODE XREF=update_cur_sifted_state+1244
0000000000014554         jne        loc_1455d

0000000000014556         cmp        r8, qword [rdx]
0000000000014559         cmove      r9, rdi

                     loc_1455d:
000000000001455d         add        rcx, 0x8                                    ; CODE XREF=update_cur_sifted_state+1204
0000000000014561         cmp        r11, rcx
0000000000014564         je         loc_1458e

                     loc_14566:
0000000000014566         mov        rdi, qword [rcx]                            ; CODE XREF=update_cur_sifted_state+1194, update_cur_sifted_state+1260
0000000000014569         mov        rdx, rdi
000000000001456c         shl        rdx, 0x4
0000000000014570         add        rdx, rax
0000000000014573         movzx      r14d, byte [rdx+8]
0000000000014578         cmp        r14d, 0x8
000000000001457c         jne        loc_14550

000000000001457e         cmp        r8, qword [rdx]
0000000000014581         cmove      rsi, rdi
0000000000014585         add        rcx, 0x8
0000000000014589         cmp        r11, rcx
000000000001458c         jne        loc_14566

                     loc_1458e:
000000000001458e         test       rsi, rsi                                    ; CODE XREF=update_cur_sifted_state+1220
0000000000014591         mov        r14, r9
0000000000014594         mov        qword [rsp+0xd8+var_B0], r9
0000000000014599         js         loc_14660

000000000001459f         mov        rcx, qword [rsp+0xd8+var_C8]
00000000000145a4         mov        rdx, rbx
00000000000145a7         mov        rdi, r12
00000000000145aa         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
00000000000145af         test       eax, eax
00000000000145b1         jne        loc_14138

00000000000145b7         test       r14, r14
00000000000145ba         js         loc_1450d

00000000000145c0         cmp        qword [rbx+8], 0x0
00000000000145c5         jle        loc_1450d

00000000000145cb         mov        r10, qword [rbx+0x10]

                     loc_145cf:
00000000000145cf         xor        r14d, r14d                                  ; CODE XREF=update_cur_sifted_state+1478
00000000000145d2         mov        qword [rsp+0xd8+var_A8], rbp
00000000000145d7         mov        rbp, r14
00000000000145da         mov        r14, qword [rsp+0xd8+var_B0]
00000000000145df         jmp        loc_145fa
00000000000145e1         align      8

                     loc_145e8:
00000000000145e8         add        rbp, 0x1                                    ; CODE XREF=update_cur_sifted_state+1409, update_cur_sifted_state+1432, update_cur_sifted_state+1465
00000000000145ec         cmp        rbp, qword [rbx+8]
00000000000145f0         jge        loc_14678

00000000000145f6         mov        r10, qword [rbx+0x10]

                     loc_145fa:
00000000000145fa         mov        r10, qword [r10+rbp*8]                      ; CODE XREF=update_cur_sifted_state+1343
00000000000145fe         mov        rax, qword [r12+0x38]
0000000000014603         mov        rdx, r14
0000000000014606         lea        r9, qword [r10+r10*2]
000000000001460a         shl        r9, 0x3
000000000001460e         add        rax, r9
0000000000014611         mov        rdi, qword [rax+8]
0000000000014615         lea        rsi, qword [rax+0x10]
0000000000014619         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000001461e         test       rax, rax
0000000000014621         jne        loc_145e8

0000000000014623         add        r9, qword [r12+0x30]
0000000000014628         mov        rdi, qword [r9+8]
000000000001462c         lea        rsi, qword [r9+0x10]
0000000000014630         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000014635         test       rax, rax
0000000000014638         jne        loc_145e8

000000000001463a         mov        rcx, qword [rsp+0xd8+var_C8]
000000000001463f         mov        rdx, rbx
0000000000014642         mov        rsi, r10
0000000000014645         mov        rdi, r12
0000000000014648         call       sub_epsilon_src_nodes                       ; sub_epsilon_src_nodes
000000000001464d         test       eax, eax
000000000001464f         jne        loc_14138

0000000000014655         sub        rbp, 0x1
0000000000014659         jmp        loc_145e8
000000000001465b         align      32

                     loc_14660:
0000000000014660         cmp        qword [rsp+0xd8+var_B0], 0x0                ; CODE XREF=update_cur_sifted_state+1273
0000000000014666         jns        loc_145cf

000000000001466c         jmp        loc_1450d
0000000000014671         align      8

                     loc_14678:
0000000000014678         mov        rbp, qword [rsp+0xd8+var_A8]                ; CODE XREF=update_cur_sifted_state+1360
000000000001467d         jmp        loc_1450d
0000000000014682         align      8

                     loc_14688:
0000000000014688         mov        rax, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+610
000000000001468d         mov        r13, qword [rsp+0xd8+var_98]
0000000000014692         mov        rbx, qword [rsp+0xd8+var_90]
0000000000014697         add        r13, qword [rax+0xd8]
000000000001469e         lea        rax, qword [r14+r14*2]
00000000000146a2         shl        rax, 0x3
00000000000146a6         mov        qword [rsp+0xd8+var_A8], rax
00000000000146ab         lea        rax, qword [r14*8]
00000000000146b3         mov        qword [rsp+0xd8+var_B0], rax
00000000000146b8         mov        rax, r15
00000000000146bb         mov        r15, r13
00000000000146be         mov        r13, rbx
00000000000146c1         mov        rbx, rax
00000000000146c4         jmp        loc_1482e
00000000000146c9         align      16

                     loc_146d0:
00000000000146d0         mov        rax, qword [r15+0x18]                       ; CODE XREF=update_cur_sifted_state+1937
00000000000146d4         sub        rax, qword [r15+0x10]
00000000000146d8         test       rax, rax
00000000000146db         lea        r9, qword [rbp+rax]
00000000000146e0         je         loc_14840

00000000000146e6         mov        rax, qword [r12+0x18]
00000000000146eb         mov        rsi, qword [rsp+0xd8+var_B0]
00000000000146f0         mov        r10, qword [rax+rsi]

                     loc_146f4:
00000000000146f4         cmp        r9, qword [rbx+0x18]                        ; CODE XREF=update_cur_sifted_state+1970
00000000000146f8         jg         loc_14837

00000000000146fe         mov        rax, qword [rbx]
0000000000014701         mov        rax, qword [rax+r9*8]
0000000000014705         test       rax, rax
0000000000014708         je         loc_14837

000000000001470e         mov        rdi, qword [rax+0x10]
0000000000014712         lea        rsi, qword [rax+0x18]
0000000000014716         mov        rdx, r10
0000000000014719         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
000000000001471e         test       rax, rax
0000000000014721         je         loc_14837

0000000000014727         sub        rsp, 0x8
000000000001472b         lea        rdx, qword [rbx+0x30]
000000000001472f         lea        rsi, qword [rbx+0x28]
0000000000014733         push       r9
0000000000014735         mov        rdi, qword [rsp+0xe8+var_D0]
000000000001473a         mov        rcx, r14
000000000001473d         mov        r9, r10
0000000000014740         mov        r8, rbp
0000000000014743         call       check_dst_limits.isra.13                    ; check_dst_limits.isra.13
0000000000014748         test       al, al
000000000001474a         pop        rdx
000000000001474b         pop        rcx
000000000001474c         jne        loc_14837

0000000000014752         cmp        qword [rsp+0xd8+var_78], 0x0
0000000000014758         je         loc_14868

                     loc_1475e:
000000000001475e         mov        rax, qword [rsp+0xd8+var_A0]                ; CODE XREF=update_cur_sifted_state+2056
0000000000014763         mov        rsi, r13
0000000000014766         mov        qword [rsp+0xd8+var_68], r14
000000000001476b         mov        qword [rsp+0xd8+var_60], rbp
0000000000014770         lea        rdi, qword [rax+0x20]
0000000000014774         call       re_node_set_insert                          ; re_node_set_insert
0000000000014779         test       al, al
000000000001477b         je         loc_148d4

0000000000014781         mov        rdi, qword [rsp+0xd8+var_C0]
0000000000014786         mov        rax, qword [rsp+0xd8+var_78]
000000000001478b         mov        rsi, qword [rsp+0xd8+var_A0]
0000000000014790         mov        r15, qword [rax+rdi]
0000000000014794         mov        rdi, qword [rsp+0xd8+var_D0]
0000000000014799         call       sift_states_backward                        ; sift_states_backward
000000000001479e         test       eax, eax
00000000000147a0         jne        loc_148ae

00000000000147a6         mov        rsi, qword [rbx+8]
00000000000147aa         mov        rdx, qword [rsp+0xd8+var_78]
00000000000147af         test       rsi, rsi
00000000000147b2         je         loc_147cd

00000000000147b4         lea        rcx, qword [rbp+1]
00000000000147b8         mov        rdi, r12
00000000000147bb         call       merge_state_array                           ; merge_state_array
00000000000147c0         test       eax, eax
00000000000147c2         jne        loc_148ae

00000000000147c8         mov        rdx, qword [rsp+0xd8+var_78]

                     loc_147cd:
00000000000147cd         mov        r11, qword [rsp+0xd8+var_A0]                ; CODE XREF=update_cur_sifted_state+1810
00000000000147d2         mov        rax, qword [rsp+0xd8+var_C0]
00000000000147d7         mov        rdi, qword [rsp+0xd8+var_50]
00000000000147df         lea        r9, qword [r11+0x30]
00000000000147e3         mov        qword [rdx+rax], r15
00000000000147e7         mov        rdx, r13
00000000000147ea         mov        rsi, r9
00000000000147ed         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
00000000000147f2         sub        rax, 0x1
00000000000147f6         mov        rdx, rax
00000000000147f9         js         loc_14807

00000000000147fb         lea        rdi, qword [r11+0x28]
00000000000147ff         mov        rsi, r9
0000000000014802         call       re_node_set_remove_at.isra.4.part.5         ; re_node_set_remove_at.isra.4.part.5

                     loc_14807:
0000000000014807         mov        rcx, qword [rsp+0xd8+var_D0]                ; CODE XREF=update_cur_sifted_state+1881
000000000001480c         lea        rax, qword [r13+r13*4]
0000000000014811         mov        rdx, qword [rcx+0xd8]
0000000000014818         lea        rax, qword [rdx+rax*8]
000000000001481c         nop        dword [rax]

                     loc_14820:
0000000000014820         add        r13, 0x1                                    ; CODE XREF=update_cur_sifted_state+1946
0000000000014824         cmp        byte [rax+0x20], 0x0
0000000000014828         lea        r15, qword [rax+0x28]
000000000001482c         je         loc_14860

                     loc_1482e:
000000000001482e         cmp        r14, qword [r15]                            ; CODE XREF=update_cur_sifted_state+1572
0000000000014831         je         loc_146d0

                     loc_14837:
0000000000014837         mov        rax, r15                                    ; CODE XREF=update_cur_sifted_state+1624, update_cur_sifted_state+1640, update_cur_sifted_state+1665, update_cur_sifted_state+1708
000000000001483a         jmp        loc_14820
000000000001483c         align      64

                     loc_14840:
0000000000014840         mov        rax, qword [r12+0x28]                       ; CODE XREF=update_cur_sifted_state+1600
0000000000014845         mov        rdi, qword [rsp+0xd8+var_A8]
000000000001484a         mov        rax, qword [rax+rdi+0x10]
000000000001484f         mov        r10, qword [rax]
0000000000014852         jmp        loc_146f4
0000000000014857         align      32

                     loc_14860:
0000000000014860         mov        r15, rbx                                    ; CODE XREF=update_cur_sifted_state+1932
0000000000014863         jmp        loc_14308

                     loc_14868:
0000000000014868         mov        rax, qword [rbx+0x30]                       ; CODE XREF=update_cur_sifted_state+1720
000000000001486c         lea        rsi, qword [rbx+0x20]
0000000000014870         movdqa     xmm0, xmmword [rbx]
0000000000014874         mov        qword [rsp+0xd8+var_48], rax
000000000001487c         mov        rax, qword [rsp+0xd8+var_A0]
0000000000014881         movaps     xmmword [rsp+0xd8+var_78], xmm0
0000000000014886         lea        rdi, qword [rax+0x20]
000000000001488a         movdqa     xmm0, xmmword [rbx+0x10]
000000000001488f         movaps     xmmword [rsp+0xd8+var_68], xmm0
0000000000014894         movdqa     xmm0, xmmword [rbx+0x20]
0000000000014899         movaps     xmmword [rsp+0xd8+var_58], xmm0
00000000000148a1         call       re_node_set_init_copy                       ; re_node_set_init_copy
00000000000148a6         test       eax, eax
00000000000148a8         je         loc_1475e

                     loc_148ae:
00000000000148ae         cmp        qword [rsp+0xd8+var_78], 0x0                ; CODE XREF=update_cur_sifted_state+1792, update_cur_sifted_state+1826, update_cur_sifted_state+2105
00000000000148b4         je         loc_14138

                     loc_148ba:
00000000000148ba         mov        rdi, qword [rsp+0xd8+var_48]                ; argument "__ptr" for method j_free, CODE XREF=update_cur_sifted_state+2121
00000000000148c2         mov        dword [rsp+0xd8+var_D0], eax
00000000000148c6         call       j_free                                      ; free
00000000000148cb         mov        eax, dword [rsp+0xd8+var_D0]
00000000000148cf         jmp        loc_14138

                     loc_148d4:
00000000000148d4         mov        eax, 0xc                                    ; CODE XREF=update_cur_sifted_state+1755
00000000000148d9         jmp        loc_148ae

                     loc_148db:
00000000000148db         cmp        qword [rsp+0xd8+var_78], 0x0                ; CODE XREF=update_cur_sifted_state+636
00000000000148e1         je         loc_14380

00000000000148e7         xor        eax, eax
00000000000148e9         jmp        loc_148ba

                     loc_148eb:
00000000000148eb         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=update_cur_sifted_state+169
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int8_t, -64


                     parse_bracket_element.constprop.37:
00000000000148f0         push       r14                                         ; End of unwind block (FDE at 0x1f700), Begin of unwind block (FDE at 0x1f760), CODE XREF=sub_15b10+271, sub_15b10+1639
00000000000148f2         push       r13
00000000000148f4         mov        r10, rsi
00000000000148f7         push       r12
00000000000148f9         push       rbp
00000000000148fa         movsxd     r11, ecx
00000000000148fd         push       rbx
00000000000148fe         mov        rbp, rdx
0000000000014901         mov        rbx, rdi
0000000000014904         sub        rsp, 0x20
0000000000014908         mov        r12, qword [rsi+0x48]
000000000001490c         mov        rax, qword [fs:0x28]
0000000000014915         mov        qword [rsp+0x48+var_30], rax
000000000001491a         xor        eax, eax
000000000001491c         cmp        dword [rsi+0x90], 0x1
0000000000014923         je         loc_14978

0000000000014925         mov        rsi, r12
0000000000014928         mov        rdi, r10
000000000001492b         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
0000000000014930         cmp        eax, 0x1
0000000000014933         jle        loc_14978

0000000000014935         mov        rdx, qword [r10+0x10]
0000000000014939         cdqe
000000000001493b         mov        dword [rbx], 0x1
0000000000014941         add        rax, r12
0000000000014944         mov        edx, dword [rdx+r12*4]
0000000000014948         mov        dword [rbx+8], edx
000000000001494b         mov        qword [r10+0x48], rax
000000000001494f         xor        eax, eax

                     loc_14951:
0000000000014951         mov        rcx, qword [rsp+0x48+var_30]                ; CODE XREF=parse_bracket_element.constprop.37+189, parse_bracket_element.constprop.37+353, parse_bracket_element.constprop.37+493, parse_bracket_element.constprop.37+528, parse_bracket_element.constprop.37+569, parse_bracket_element.constprop.37+582, parse_bracket_element.constprop.37+595
0000000000014956         xor        rcx, qword [fs:0x28]
000000000001495f         jne        loc_14b48

0000000000014965         add        rsp, 0x20
0000000000014969         pop        rbx
000000000001496a         pop        rbp
000000000001496b         pop        r12
000000000001496d         pop        r13
000000000001496f         pop        r14
0000000000014971         ret
                        ; endp
0000000000014972         align      8

                     loc_14978:
0000000000014978         movzx      eax, byte [rbp+8]                           ; CODE XREF=parse_bracket_element.constprop.37+51, parse_bracket_element.constprop.37+67
000000000001497c         add        r11, r12
000000000001497f         mov        qword [r10+0x48], r11
0000000000014983         mov        edx, eax
0000000000014985         and        edx, 0xfffffffb
0000000000014988         cmp        dl, 0x1a
000000000001498b         je         loc_149b0

000000000001498d         cmp        al, 0x1c
000000000001498f         je         loc_149b0

0000000000014991         cmp        al, 0x16
0000000000014993         jne        loc_1499e

0000000000014995         test       r9b, r9b
0000000000014998         je         loc_14ae2

                     loc_1499e:
000000000001499e         movzx      eax, byte [rbp]                             ; CODE XREF=parse_bracket_element.constprop.37+163, parse_bracket_element.constprop.37+522
00000000000149a2         mov        dword [rbx], 0x0
00000000000149a8         mov        byte [rbx+8], al
00000000000149ab         xor        eax, eax
00000000000149ad         jmp        loc_14951
00000000000149af         align      16

                     loc_149b0:
00000000000149b0         mov        r12, qword [r10+0x68]                       ; CODE XREF=parse_bracket_element.constprop.37+155, parse_bracket_element.constprop.37+159
00000000000149b4         cmp        r11, r12
00000000000149b7         jge        loc_14ad8

00000000000149bd         movzx      r13d, byte [rbp]
00000000000149c2         xor        r8d, r8d
00000000000149c5         jmp        loc_149f2
00000000000149c7         align      16

                     loc_149d0:
00000000000149d0         mov        rax, qword [rbx+8]                          ; CODE XREF=parse_bracket_element.constprop.37+294, parse_bracket_element.constprop.37+304
00000000000149d4         mov        byte [rax+r8], r9b
00000000000149d8         add        r8, 0x1
00000000000149dc         cmp        r8, 0x20
00000000000149e0         je         loc_14ad8

00000000000149e6         movzx      eax, byte [rbp+8]
00000000000149ea         mov        r11, qword [r10+0x48]
00000000000149ee         mov        r12, qword [r10+0x68]

                     loc_149f2:
00000000000149f2         cmp        al, 0x1e                                    ; CODE XREF=parse_bracket_element.constprop.37+213
00000000000149f4         movsxd     r14, r8d
00000000000149f7         je         loc_14a60

                     loc_149f9:
00000000000149f9         mov        rdx, qword [r10+8]                          ; CODE XREF=parse_bracket_element.constprop.37+376, parse_bracket_element.constprop.37+407, parse_bracket_element.constprop.37+436
00000000000149fd         lea        rax, qword [r11+1]
0000000000014a01         mov        qword [r10+0x48], rax
0000000000014a05         movzx      r9d, byte [rdx+r11]

                     loc_14a0a:
0000000000014a0a         cmp        rax, r12                                    ; CODE XREF=parse_bracket_element.constprop.37+477, parse_bracket_element.constprop.37+556
0000000000014a0d         jge        loc_14ad8

0000000000014a13         cmp        r13b, r9b
0000000000014a16         jne        loc_149d0

0000000000014a18         mov        rdx, qword [r10+8]
0000000000014a1c         cmp        byte [rdx+rax], 0x5d
0000000000014a20         jne        loc_149d0

0000000000014a22         add        rax, 0x1
0000000000014a26         mov        qword [r10+0x48], rax
0000000000014a2a         mov        rax, qword [rbx+8]
0000000000014a2e         mov        byte [rax+r14], 0x0
0000000000014a33         movzx      eax, byte [rbp+8]
0000000000014a37         cmp        al, 0x1c
0000000000014a39         je         loc_14b3b

0000000000014a3f         cmp        al, 0x1e
0000000000014a41         je         loc_14b2e

0000000000014a47         cmp        al, 0x1a
0000000000014a49         je         loc_14b21

0000000000014a4f         xor        eax, eax
0000000000014a51         jmp        loc_14951
0000000000014a56         align      32

                     loc_14a60:
0000000000014a60         cmp        byte [r10+0x8b], 0x0                        ; CODE XREF=parse_bracket_element.constprop.37+263
0000000000014a68         je         loc_149f9

0000000000014a6a         cmp        byte [r10+0x8c], 0x0
0000000000014a72         je         loc_14b08

0000000000014a78         cmp        r11, qword [r10+0x30]
0000000000014a7c         je         loc_14a8d

0000000000014a7e         mov        rax, qword [r10+0x10]
0000000000014a82         cmp        dword [rax+r11*4], 0xffffffff
0000000000014a87         je         loc_149f9

                     loc_14a8d:
0000000000014a8d         mov        rax, qword [r10+0x18]                       ; CODE XREF=parse_bracket_element.constprop.37+396
0000000000014a91         mov        rax, qword [rax+r11*8]
0000000000014a95         add        rax, qword [r10]
0000000000014a98         add        rax, qword [r10+0x28]
0000000000014a9c         movzx      r9d, byte [rax]
0000000000014aa0         test       r9b, 0x80
0000000000014aa4         jne        loc_149f9

0000000000014aaa         cmp        dword [r10+0x90], 0x1
0000000000014ab2         mov        eax, 0x1
0000000000014ab7         je         loc_14ac6

0000000000014ab9         mov        rsi, r11
0000000000014abc         mov        rdi, r10
0000000000014abf         call       re_string_char_size_at.part.0               ; re_string_char_size_at.part.0
0000000000014ac4         cdqe

                     loc_14ac6:
0000000000014ac6         add        rax, r11                                    ; CODE XREF=parse_bracket_element.constprop.37+455
0000000000014ac9         mov        qword [r10+0x48], rax
0000000000014acd         jmp        loc_14a0a
0000000000014ad2         align      8

                     loc_14ad8:
0000000000014ad8         mov        eax, 0x7                                    ; CODE XREF=parse_bracket_element.constprop.37+199, parse_bracket_element.constprop.37+240, parse_bracket_element.constprop.37+285
0000000000014add         jmp        loc_14951

                     loc_14ae2:
0000000000014ae2         mov        rdi, rsp                                    ; CODE XREF=parse_bracket_element.constprop.37+168
0000000000014ae5         mov        rdx, r8
0000000000014ae8         mov        rsi, r10
0000000000014aeb         call       peek_token_bracket                          ; peek_token_bracket
0000000000014af0         cmp        byte [rsp+0x48+var_40], 0x15
0000000000014af5         mov        eax, 0xb
0000000000014afa         je         loc_1499e

0000000000014b00         jmp        loc_14951
0000000000014b05         align      8

                     loc_14b08:
0000000000014b08         lea        rax, qword [r11+1]                          ; CODE XREF=parse_bracket_element.constprop.37+386
0000000000014b0c         add        r11, qword [r10]
0000000000014b0f         mov        rdx, qword [r10+0x28]
0000000000014b13         mov        qword [r10+0x48], rax
0000000000014b17         movzx      r9d, byte [r11+rdx]
0000000000014b1c         jmp        loc_14a0a

                     loc_14b21:
0000000000014b21         mov        dword [rbx], 0x3                            ; CODE XREF=parse_bracket_element.constprop.37+345
0000000000014b27         xor        eax, eax
0000000000014b29         jmp        loc_14951

                     loc_14b2e:
0000000000014b2e         mov        dword [rbx], 0x4                            ; CODE XREF=parse_bracket_element.constprop.37+337
0000000000014b34         xor        eax, eax
0000000000014b36         jmp        loc_14951

                     loc_14b3b:
0000000000014b3b         mov        dword [rbx], 0x2                            ; CODE XREF=parse_bracket_element.constprop.37+329
0000000000014b41         xor        eax, eax
0000000000014b43         jmp        loc_14951

                     loc_14b48:
0000000000014b48         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_bracket_element.constprop.37+111
                        ; endp
0000000000014b4d         align      16                                          ; End of unwind block (FDE at 0x1f760)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     peek_token:
0000000000014b50         push       r15                                         ; Begin of unwind block (FDE at 0x1f7a4), CODE XREF=peek_token+1722, fetch_number+41, parse_expression+139, sub_153a0+292, sub_153a0+385, sub_153a0+1077, sub_159d0+304, sub_15b10+789, sub_15b10+2010, parse_reg_exp+266, re_compile_internal+1168
0000000000014b52         push       r14
0000000000014b54         push       r13
0000000000014b56         push       r12
0000000000014b58         push       rbp
0000000000014b59         push       rbx
0000000000014b5a         mov        rbp, rdi
0000000000014b5d         sub        rsp, 0x38
0000000000014b61         mov        r14, qword [rsi+0x48]
0000000000014b65         mov        rax, qword [fs:0x28]
0000000000014b6e         mov        qword [rsp+0x68+var_40], rax
0000000000014b73         xor        eax, eax
0000000000014b75         cmp        qword [rsi+0x68], r14
0000000000014b79         jle        loc_14c10

0000000000014b7f         movzx      r13d, byte [rdi+0xa]
0000000000014b84         mov        r15, rdx
0000000000014b87         mov        rdx, qword [rsi+8]
0000000000014b8b         mov        rbx, rsi
0000000000014b8e         movzx      r12d, byte [rdx+r14]
0000000000014b93         and        r13d, 0xffffff9f
0000000000014b97         mov        byte [rdi+0xa], r13b
0000000000014b9b         mov        eax, dword [rsi+0x90]
0000000000014ba1         mov        byte [rdi], r12b
0000000000014ba4         cmp        eax, 0x1
0000000000014ba7         jle        loc_14c40

0000000000014bad         cmp        r14, qword [rsi+0x30]
0000000000014bb1         je         loc_14d50

0000000000014bb7         mov        rcx, qword [rsi+0x10]
0000000000014bbb         mov        ecx, dword [rcx+r14*4]
0000000000014bbf         cmp        ecx, 0xffffffff
0000000000014bc2         je         loc_14ca0

0000000000014bc8         cmp        r12b, 0x5c
0000000000014bcc         je         loc_14cc0

0000000000014bd2         mov        byte [rdi+8], 0x1

                     loc_14bd6:
0000000000014bd6         mov        edi, ecx                                    ; argument "__wc" for method j_iswalnum, CODE XREF=peek_token+534
0000000000014bd8         mov        qword [rsp+0x68+var_60], rdx
0000000000014bdd         mov        dword [rsp+0x68+var_68], ecx
0000000000014be0         call       j_iswalnum                                  ; iswalnum
0000000000014be5         mov        ecx, dword [rsp+0x68+var_68]
0000000000014be8         test       eax, eax
0000000000014bea         setne      al
0000000000014bed         cmp        ecx, 0x5f
0000000000014bf0         sete       cl
0000000000014bf3         or         eax, ecx
0000000000014bf5         shl        eax, 0x6
0000000000014bf8         or         r13d, eax
0000000000014bfb         mov        byte [rbp+0xa], r13b
0000000000014bff         mov        rdx, qword [rsp+0x68+var_60]
0000000000014c04         jmp        loc_14c7c
0000000000014c06         align      16

                     loc_14c10:
0000000000014c10         mov        byte [rdi+8], 0x2                           ; CODE XREF=peek_token+41

                     loc_14c14:
0000000000014c14         mov        rdi, qword [rsp+0x68+var_40]                ; CODE XREF=peek_token+353, peek_token+553, peek_token+579, peek_token+589, peek_token+625, peek_token+659, peek_token+669, peek_token+714, peek_token+729, peek_token+748, peek_token+758
0000000000014c19         xor        rdi, qword [fs:0x28]
0000000000014c22         jne        loc_15248

0000000000014c28         add        rsp, 0x38
0000000000014c2c         pop        rbx
0000000000014c2d         pop        rbp
0000000000014c2e         pop        r12
0000000000014c30         pop        r13
0000000000014c32         pop        r14
0000000000014c34         pop        r15
0000000000014c36         ret
                        ; endp
0000000000014c37         align      64

                     loc_14c40:
0000000000014c40         cmp        r12b, 0x5c                                  ; CODE XREF=peek_token+87
0000000000014c44         je         loc_14cc0

0000000000014c46         mov        byte [rbp+8], 0x1
0000000000014c4a         mov        qword [rsp+0x68+var_68], rdx
0000000000014c4e         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000014c53         mov        rsi, qword [rax]
0000000000014c56         movzx      ecx, r12b
0000000000014c5a         movzx      eax, word [rsi+rcx*2]
0000000000014c5e         shr        ax, 0x3
0000000000014c62         and        eax, 0x1
0000000000014c65         cmp        r12b, 0x5f
0000000000014c69         sete       cl
0000000000014c6c         or         eax, ecx
0000000000014c6e         shl        eax, 0x6
0000000000014c71         or         r13d, eax
0000000000014c74         mov        byte [rbp+0xa], r13b
0000000000014c78         mov        rdx, qword [rsp+0x68+var_68]

                     loc_14c7c:
0000000000014c7c         sub        r12d, 0xa                                   ; CODE XREF=peek_token+180
0000000000014c80         cmp        r12b, 0x73
0000000000014c84         ja         loc_14dbc

0000000000014c8a         lea        rcx, qword [switch_table_1c834]             ; switch_table_1c834
0000000000014c91         movzx      r12d, r12b
0000000000014c95         movsxd     rax, dword [rcx+r12*4]
0000000000014c99         add        rax, rcx
0000000000014c9c         jmp        rax                                         ; switch statement using table at 0x1c834, with 116 cases, 0x14d80,0x14da8,0x14dbc,0x14dd0,0x14df8,0x14e20,0x14e30,0x14e50,0x14e60,0x14e80,0x14ea0,0x14eb0,0x14ed0,0x14ef0
0000000000014c9e         align      32

                     loc_14ca0:
0000000000014ca0         or         r13d, 0x20                                  ; CODE XREF=peek_token+114
0000000000014ca4         mov        byte [rdi+8], 0x1
0000000000014ca8         mov        eax, 0x1
0000000000014cad         mov        byte [rdi+0xa], r13b
0000000000014cb1         jmp        loc_14c14
0000000000014cb6         align      64

                     loc_14cc0:
0000000000014cc0         lea        rsi, qword [r14+1]                          ; CODE XREF=peek_token+124, peek_token+244, peek_token+516
0000000000014cc4         cmp        rsi, qword [rbx+0x58]
0000000000014cc8         jge        loc_14d70

0000000000014cce         cmp        byte [rbx+0x8b], 0x0
0000000000014cd5         jne        loc_15160

                     loc_14cdb:
0000000000014cdb         movzx      edi, byte [rdx+r14+1]                       ; CODE XREF=peek_token+1647
0000000000014ce1         mov        r12d, edi
0000000000014ce4         mov        dword [rsp+0x68+var_60], edi

                     loc_14ce8:
0000000000014ce8         cmp        eax, 0x1                                    ; CODE XREF=peek_token+1653, peek_token+1702
0000000000014ceb         mov        byte [rbp], r12b
0000000000014cef         mov        byte [rbp+8], 0x1
0000000000014cf3         jle        loc_15140

0000000000014cf9         mov        rax, qword [rbx+0x10]
0000000000014cfd         mov        r8d, dword [rax+rsi*4]

                     loc_14d01:
0000000000014d01         mov        edi, r8d                                    ; argument "__wc" for method j_iswalnum, CODE XREF=peek_token+1779
0000000000014d04         mov        dword [rsp+0x68+var_68], r8d
0000000000014d08         call       j_iswalnum                                  ; iswalnum
0000000000014d0d         mov        r8d, dword [rsp+0x68+var_68]
0000000000014d11         test       eax, eax
0000000000014d13         setne      al
0000000000014d16         cmp        r8d, 0x5f

                     loc_14d1a:
0000000000014d1a         sete       dl                                          ; CODE XREF=peek_token+1547
0000000000014d1d         lea        ecx, dword [r12-0x27]
0000000000014d22         or         eax, edx
0000000000014d24         shl        eax, 0x6
0000000000014d27         or         r13d, eax
0000000000014d2a         cmp        cl, 0x56
0000000000014d2d         mov        byte [rbp+0xa], r13b
0000000000014d31         ja         loc_15135

0000000000014d37         lea        rdx, qword [switch_table_1ca04]             ; switch_table_1ca04
0000000000014d3e         movzx      ecx, cl
0000000000014d41         movsxd     rax, dword [rdx+rcx*4]
0000000000014d45         add        rax, rdx
0000000000014d48         jmp        rax                                         ; switch statement using table at 0x1ca04, with 87 cases, 0x14f19,0x14f34,0x14f52,0x14f6d,0x14f88,0x14fa6,0x14fc8,0x14fea,0x15005,0x15020,0x15042,0x1505d,0x1507f,0x150a1,0x150ca,0x150e5,0x150fc,0x15113,0x15135
0000000000014d4a         align      16

                     loc_14d50:
0000000000014d50         cmp        r12b, 0x5c                                  ; CODE XREF=peek_token+97
0000000000014d54         je         loc_14cc0

0000000000014d5a         mov        rax, qword [rbx+0x10]
0000000000014d5e         mov        byte [rbp+8], 0x1
0000000000014d62         mov        ecx, dword [rax+r14*4]
0000000000014d66         jmp        loc_14bd6
0000000000014d6b         align      16

                     loc_14d70:
0000000000014d70         mov        byte [rbp+8], 0x24                          ; CODE XREF=peek_token+376
0000000000014d74         mov        eax, 0x1
0000000000014d79         jmp        loc_14c14
0000000000014d7e         align      128

                     loc_14d80:
0000000000014d80         and        r15d, 0x1200                                ; case 115, CODE XREF=peek_token+332
0000000000014d87         mov        eax, 0x1
0000000000014d8c         cmp        r15, 0x1200
0000000000014d93         jne        loc_14c14

                     loc_14d99:
0000000000014d99         mov        byte [rbp+8], 0x18                          ; CODE XREF=peek_token+1105
0000000000014d9d         jmp        loc_14c14
0000000000014da2         align      8

                     loc_14da8:
0000000000014da8         and        r15d, 0x8400                                ; case 114, CODE XREF=peek_token+332
0000000000014daf         cmp        r15, 0x8000
0000000000014db6         je         loc_14e92

                     loc_14dbc:
0000000000014dbc         mov        eax, 0x1                                    ; case 112, CODE XREF=peek_token+308, peek_token+332, peek_token+1664, peek_token+1677
0000000000014dc1         jmp        loc_14c14
0000000000014dc6         align      16

                     loc_14dd0:
0000000000014dd0         and        r15d, 0x1200                                ; case 113, CODE XREF=peek_token+332
0000000000014dd7         mov        eax, 0x1
0000000000014ddc         cmp        r15, 0x1200
0000000000014de3         jne        loc_14c14

                     loc_14de9:
0000000000014de9         mov        byte [rbp+8], 0x17                          ; CODE XREF=peek_token+1021
0000000000014ded         jmp        loc_14c14
0000000000014df2         align      8

                     loc_14df8:
0000000000014df8         test       r15d, 0x800008                              ; case 84, CODE XREF=peek_token+332
0000000000014dff         jne        loc_14e0a

0000000000014e01         test       r14, r14
0000000000014e04         jne        loc_151ca

                     loc_14e0a:
0000000000014e0a         mov        byte [rbp+8], 0xc                           ; CODE XREF=peek_token+687, peek_token+1683
0000000000014e0e         mov        dword [rbp], 0x10
0000000000014e15         mov        eax, 0x1
0000000000014e1a         jmp        loc_14c14
0000000000014e1f         align      32

                     loc_14e20:
0000000000014e20         mov        byte [rbp+8], 0x14                          ; case 81, CODE XREF=peek_token+332
0000000000014e24         mov        eax, 0x1
0000000000014e29         jmp        loc_14c14
0000000000014e2e         align      16

                     loc_14e30:
0000000000014e30         test       r15d, 0x402                                 ; case 53, CODE XREF=peek_token+332
0000000000014e37         mov        eax, 0x1
0000000000014e3c         jne        loc_14c14

                     loc_14e42:
0000000000014e42         mov        byte [rbp+8], 0x13                          ; CODE XREF=peek_token+1288
0000000000014e46         jmp        loc_14c14
0000000000014e4b         align      16

                     loc_14e50:
0000000000014e50         mov        byte [rbp+8], 0x5                           ; case 36, CODE XREF=peek_token+332
0000000000014e54         mov        eax, 0x1
0000000000014e59         jmp        loc_14c14
0000000000014e5e         align      32

                     loc_14e60:
0000000000014e60         test       r15d, 0x402                                 ; case 33, CODE XREF=peek_token+332
0000000000014e67         mov        eax, 0x1
0000000000014e6c         jne        loc_14c14

                     loc_14e72:
0000000000014e72         mov        byte [rbp+8], 0x12                          ; CODE XREF=peek_token+1424
0000000000014e76         jmp        loc_14c14
0000000000014e7b         align      128

                     loc_14e80:
0000000000014e80         test       r15d, 0x800                                 ; case 0, CODE XREF=peek_token+332
0000000000014e87         mov        eax, 0x1
0000000000014e8c         je         loc_14c14

                     loc_14e92:
0000000000014e92         mov        byte [rbp+8], 0xa                           ; CODE XREF=peek_token+614
0000000000014e96         mov        eax, 0x1
0000000000014e9b         jmp        loc_14c14

                     loc_14ea0:
0000000000014ea0         mov        byte [rbp+8], 0xb                           ; case 32, CODE XREF=peek_token+332
0000000000014ea4         mov        eax, 0x1
0000000000014ea9         jmp        loc_14c14
0000000000014eae         align      16

                     loc_14eb0:
0000000000014eb0         test       r15d, j_error                               ; case 31, CODE XREF=peek_token+332
0000000000014eb7         mov        eax, 0x1
0000000000014ebc         je         loc_14c14

                     loc_14ec2:
0000000000014ec2         mov        byte [rbp+8], 0x9                           ; CODE XREF=peek_token+1447
0000000000014ec6         jmp        loc_14c14
0000000000014ecb         align      16

                     loc_14ed0:
0000000000014ed0         test       r15d, j_error                               ; case 30, CODE XREF=peek_token+332
0000000000014ed7         mov        eax, 0x1
0000000000014edc         je         loc_14c14

                     loc_14ee2:
0000000000014ee2         mov        byte [rbp+8], 0x8                           ; CODE XREF=peek_token+1470
0000000000014ee6         jmp        loc_14c14
0000000000014eeb         align      16

                     loc_14ef0:
0000000000014ef0         test       r15b, 0x8                                   ; case 26, CODE XREF=peek_token+332
0000000000014ef4         jne        loc_14f04

0000000000014ef6         add        r14, 0x1
0000000000014efa         cmp        r14, qword [rbx+0x58]
0000000000014efe         jne        loc_151fb

                     loc_14f04:
0000000000014f04         mov        byte [rbp+8], 0xc                           ; CODE XREF=peek_token+932, peek_token+1754
0000000000014f08         mov        dword [rbp], 0x20
0000000000014f0f         mov        eax, 0x1
0000000000014f14         jmp        loc_14c14

                     loc_14f19:
0000000000014f19         test       r15d, 0x8400                                ; case 85, CODE XREF=peek_token+504
0000000000014f20         mov        eax, 0x2
0000000000014f25         jne        loc_14c14

0000000000014f2b         mov        byte [rbp+8], 0xa
0000000000014f2f         jmp        loc_14c14

                     loc_14f34:
0000000000014f34         and        r15d, 0x1200                                ; case 84, CODE XREF=peek_token+504
0000000000014f3b         mov        eax, 0x2
0000000000014f40         cmp        r15, 0x200
0000000000014f47         jne        loc_14c14

0000000000014f4d         jmp        loc_14de9

                     loc_14f52:
0000000000014f52         test       r15d, 0x80000                               ; case 80, CODE XREF=peek_token+504
0000000000014f59         mov        eax, 0x2
0000000000014f5e         jne        loc_14c14

0000000000014f64         mov        byte [rbp+8], 0x20
0000000000014f68         jmp        loc_14c14

                     loc_14f6d:
0000000000014f6d         test       r15d, 0x80000                               ; case 76, CODE XREF=peek_token+504
0000000000014f74         mov        eax, 0x2
0000000000014f79         jne        loc_14c14

0000000000014f7f         mov        byte [rbp+8], 0x22
0000000000014f83         jmp        loc_14c14

                     loc_14f88:
0000000000014f88         and        r15d, 0x1200                                ; case 86, CODE XREF=peek_token+504
0000000000014f8f         mov        eax, 0x2
0000000000014f94         cmp        r15, 0x200
0000000000014f9b         jne        loc_14c14

0000000000014fa1         jmp        loc_14d99

                     loc_14fa6:
0000000000014fa6         test       r15d, 0x80000                               ; case 59, CODE XREF=peek_token+504
0000000000014fad         mov        eax, 0x2
0000000000014fb2         jne        loc_14c14

0000000000014fb8         mov        byte [rbp+8], 0xc
0000000000014fbc         mov        dword [rbp], 0x100
0000000000014fc3         jmp        loc_14c14

                     loc_14fc8:
0000000000014fc8         test       r15d, 0x80000                               ; case 57, CODE XREF=peek_token+504
0000000000014fcf         mov        eax, 0x2
0000000000014fd4         jne        loc_14c14

0000000000014fda         mov        byte [rbp+8], 0xc
0000000000014fde         mov        dword [rbp], 0x40
0000000000014fe5         jmp        loc_14c14

                     loc_14fea:
0000000000014fea         test       r15d, 0x80000                               ; case 48, CODE XREF=peek_token+504
0000000000014ff1         mov        eax, 0x2
0000000000014ff6         jne        loc_14c14

0000000000014ffc         mov        byte [rbp+8], 0x21
0000000000015000         jmp        loc_14c14

                     loc_15005:
0000000000015005         test       r15d, 0x80000                               ; case 44, CODE XREF=peek_token+504
000000000001500c         mov        eax, 0x2
0000000000015011         jne        loc_14c14

0000000000015017         mov        byte [rbp+8], 0x23
000000000001501b         jmp        loc_14c14

                     loc_15020:
0000000000015020         test       r15d, 0x80000                               ; case 27, CODE XREF=peek_token+504
0000000000015027         mov        eax, 0x2
000000000001502c         jne        loc_14c14

0000000000015032         mov        byte [rbp+8], 0xc
0000000000015036         mov        dword [rbp], 0x200
000000000001503d         jmp        loc_14c14

                     loc_15042:
0000000000015042         and        r15d, 0x402                                 ; case 24, CODE XREF=peek_token+504
0000000000015049         mov        eax, 0x2
000000000001504e         cmp        r15, 0x2
0000000000015052         jne        loc_14c14

0000000000015058         jmp        loc_14e42

                     loc_1505d:
000000000001505d         test       r15d, 0x80000                               ; case 23, CODE XREF=peek_token+504
0000000000015064         mov        eax, 0x2
0000000000015069         jne        loc_14c14

000000000001506f         mov        byte [rbp+8], 0xc
0000000000015073         mov        dword [rbp], 0x9
000000000001507a         jmp        loc_14c14

                     loc_1507f:
000000000001507f         test       r15d, 0x80000                               ; case 21, CODE XREF=peek_token+504
0000000000015086         mov        eax, 0x2
000000000001508b         jne        loc_14c14

0000000000015091         mov        byte [rbp+8], 0xc
0000000000015095         mov        dword [rbp], 0x6
000000000001509c         jmp        loc_14c14

                     loc_150a1:
00000000000150a1         test       r15d, 0x4000                                ; case 18, CODE XREF=peek_token+504
00000000000150a8         mov        eax, 0x2
00000000000150ad         jne        loc_14c14

00000000000150b3         mov        edx, dword [rsp+0x68+var_60]
00000000000150b7         mov        byte [rbp+8], 0x4
00000000000150bb         sub        edx, 0x31
00000000000150be         movsxd     rdx, edx
00000000000150c1         mov        qword [rbp], rdx
00000000000150c5         jmp        loc_14c14

                     loc_150ca:
00000000000150ca         and        r15d, 0x402                                 ; case 4, CODE XREF=peek_token+504
00000000000150d1         mov        eax, 0x2
00000000000150d6         cmp        r15, 0x2
00000000000150da         jne        loc_14c14

00000000000150e0         jmp        loc_14e72

                     loc_150e5:
00000000000150e5         test       r15d, j_error                               ; case 2, CODE XREF=peek_token+504
00000000000150ec         mov        eax, 0x2
00000000000150f1         jne        loc_14c14

00000000000150f7         jmp        loc_14ec2

                     loc_150fc:
00000000000150fc         test       r15d, j_error                               ; case 1, CODE XREF=peek_token+504
0000000000015103         mov        eax, 0x2
0000000000015108         jne        loc_14c14

000000000001510e         jmp        loc_14ee2

                     loc_15113:
0000000000015113         test       r15d, 0x80000                               ; case 0, CODE XREF=peek_token+504
000000000001511a         mov        eax, 0x2
000000000001511f         jne        loc_14c14

0000000000015125         mov        byte [rbp+8], 0xc
0000000000015129         mov        dword [rbp], 0x80
0000000000015130         jmp        loc_14c14

                     loc_15135:
0000000000015135         mov        eax, 0x2                                    ; case 83, CODE XREF=peek_token+481, peek_token+504
000000000001513a         jmp        loc_14c14
000000000001513f         align      64

                     loc_15140:
0000000000015140         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=peek_token+419
0000000000015145         mov        rsi, qword [rax]
0000000000015148         movzx      edx, r12b
000000000001514c         movzx      eax, word [rsi+rdx*2]
0000000000015150         shr        ax, 0x3
0000000000015154         and        eax, 0x1
0000000000015157         cmp        r12b, 0x5f
000000000001515b         jmp        loc_14d1a

                     loc_15160:
0000000000015160         cmp        eax, 0x1                                    ; CODE XREF=peek_token+389
0000000000015163         jle        loc_15194

0000000000015165         mov        rcx, qword [rbx+0x10]
0000000000015169         lea        rdi, qword [rsi*4]
0000000000015171         mov        r8d, dword [rcx+rsi*4]
0000000000015175         cmp        r8d, 0xffffffff
0000000000015179         je         loc_1522f

000000000001517f         lea        r9, qword [r14+2]
0000000000015183         cmp        qword [rbx+0x30], r9
0000000000015187         je         loc_15194

0000000000015189         cmp        dword [rcx+rdi+4], 0xffffffff
000000000001518e         je         loc_1522f

                     loc_15194:
0000000000015194         cmp        byte [rbx+0x8c], 0x0                        ; CODE XREF=peek_token+1555, peek_token+1591
000000000001519b         mov        rcx, qword [rbx]
000000000001519e         mov        rdi, qword [rbx+0x28]
00000000000151a2         je         loc_151e8

00000000000151a4         mov        r8, qword [rbx+0x18]
00000000000151a8         add        rcx, rdi
00000000000151ab         add        rcx, qword [r8+rsi*8]
00000000000151af         movzx      edi, byte [rcx]
00000000000151b2         mov        r12d, edi
00000000000151b5         mov        dword [rsp+0x68+var_60], edi
00000000000151b9         and        edi, 0x80
00000000000151bf         jne        loc_14cdb

00000000000151c5         jmp        loc_14ce8

                     loc_151ca:
00000000000151ca         cmp        byte [rdx+r14-1], 0xa                       ; CODE XREF=peek_token+692
00000000000151d0         jne        loc_14dbc

00000000000151d6         test       r15d, 0x800
00000000000151dd         je         loc_14dbc

00000000000151e3         jmp        loc_14e0a

                     loc_151e8:
00000000000151e8         add        rcx, rsi                                    ; CODE XREF=peek_token+1618
00000000000151eb         movzx      edi, byte [rcx+rdi]
00000000000151ef         mov        r12d, edi
00000000000151f2         mov        dword [rsp+0x68+var_60], edi
00000000000151f6         jmp        loc_14ce8

                     loc_151fb:
00000000000151fb         lea        rdi, qword [rsp+0x68+var_58]                ; CODE XREF=peek_token+942
0000000000015200         mov        rdx, r15
0000000000015203         mov        qword [rbx+0x48], r14
0000000000015207         mov        rsi, rbx
000000000001520a         call       peek_token                                  ; peek_token
000000000001520f         movzx      eax, byte [rsp+0x68+var_50]
0000000000015214         sub        qword [rbx+0x48], 0x1
0000000000015219         lea        edx, dword [rax-9]
000000000001521c         mov        eax, 0x1
0000000000015221         cmp        dl, 0x1
0000000000015224         ja         loc_14c14

000000000001522a         jmp        loc_14f04

                     loc_1522f:
000000000001522f         movzx      eax, byte [rdx+r14+1]                       ; CODE XREF=peek_token+1577, peek_token+1598
0000000000015235         mov        byte [rbp+8], 0x1
0000000000015239         mov        r12d, eax
000000000001523c         mov        byte [rbp], al
000000000001523f         mov        dword [rsp+0x68+var_60], eax
0000000000015243         jmp        loc_14d01

                     loc_15248:
0000000000015248         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=peek_token+210
                        ; endp
000000000001524d         align      16                                          ; End of unwind block (FDE at 0x1f7a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fetch_number:
0000000000015250         push       r14                                         ; Begin of unwind block (FDE at 0x1f7f0), CODE XREF=sub_153a0+1175, sub_153a0+1409
0000000000015252         mov        r14, rdi
0000000000015255         push       r13
0000000000015257         mov        r13, rsi
000000000001525a         push       r12
000000000001525c         mov        r12, 0xfffffffffffffffe
0000000000015263         push       rbp
0000000000015264         mov        rbp, rdx
0000000000015267         push       rbx
0000000000015268         mov        rbx, 0xffffffffffffffff
000000000001526f         nop

                     loc_15270:
0000000000015270         mov        rdx, rbp                                    ; CODE XREF=fetch_number+82, fetch_number+135, fetch_number+177
0000000000015273         mov        rsi, r14
0000000000015276         mov        rdi, r13
0000000000015279         call       peek_token                                  ; peek_token
000000000001527e         cdqe
0000000000015280         add        qword [r14+0x48], rax
0000000000015284         movzx      eax, byte [r13+8]
0000000000015289         movzx      edx, byte [r13]
000000000001528e         cmp        al, 0x2
0000000000015290         je         loc_152e0

0000000000015292         cmp        al, 0x18
0000000000015294         je         loc_152e7

0000000000015296         cmp        dl, 0x2c
0000000000015299         je         loc_152e7

000000000001529b         cmp        al, 0x1
000000000001529d         je         loc_152a8

                     loc_1529f:
000000000001529f         mov        rbx, r12                                    ; CODE XREF=fetch_number+93, fetch_number+99
00000000000152a2         jmp        loc_15270
00000000000152a4         align      8

                     loc_152a8:
00000000000152a8         lea        eax, dword [rdx-0x30]                       ; CODE XREF=fetch_number+77
00000000000152ab         cmp        al, 0x9
00000000000152ad         ja         loc_1529f

00000000000152af         cmp        rbx, 0xfffffffffffffffe
00000000000152b3         je         loc_1529f

00000000000152b5         cmp        rbx, 0xffffffffffffffff
00000000000152b9         je         loc_152f8

00000000000152bb         lea        rax, qword [rbx+rbx*4]
00000000000152bf         lea        rbx, qword [rdx+rax*2]
00000000000152c3         mov        eax, 0x8030
00000000000152c8         cmp        rbx, 0x8030
00000000000152cf         cmovg      rbx, rax
00000000000152d3         sub        rbx, 0x30
00000000000152d7         jmp        loc_15270
00000000000152d9         align      32

                     loc_152e0:
00000000000152e0         mov        rbx, 0xfffffffffffffffe                     ; CODE XREF=fetch_number+64

                     loc_152e7:
00000000000152e7         mov        rax, rbx                                    ; CODE XREF=fetch_number+68, fetch_number+73
00000000000152ea         pop        rbx
00000000000152eb         pop        rbp
00000000000152ec         pop        r12
00000000000152ee         pop        r13
00000000000152f0         pop        r14
00000000000152f2         ret
                        ; endp
00000000000152f3         align      8

                     loc_152f8:
00000000000152f8         movzx      ebx, dl                                     ; CODE XREF=fetch_number+105
00000000000152fb         sub        ebx, 0x30
00000000000152fe         movsxd     rbx, ebx
0000000000015301         jmp        loc_15270
0000000000015306         align      16                                          ; End of unwind block (FDE at 0x1f7f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_118: int64_t, -280
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328


                     parse_expression:
0000000000015310         push       r15                                         ; Begin of unwind block (FDE at 0x1f830), CODE XREF=sub_15b10+2042, parse_branch+57, parse_branch+146
0000000000015312         push       r14
0000000000015314         push       r13
0000000000015316         push       r12
0000000000015318         push       rbp
0000000000015319         push       rbx
000000000001531a         sub        rsp, 0x128
0000000000015321         mov        qword [rsp+0x158+var_138], rcx
0000000000015326         movzx      ecx, byte [rdx+8]
000000000001532a         mov        rax, qword [fs:0x28]
0000000000015333         mov        qword [rsp+0x158+var_40], rax
000000000001533b         xor        eax, eax
000000000001533d         mov        rax, qword [rsi]
0000000000015340         mov        qword [rsp+0x158+var_140], rdx
0000000000015345         mov        qword [rsp+0x158+var_118], r9
000000000001534a         cmp        cl, 0x24
000000000001534d         mov        qword [rsp+0x158+var_148], rax
0000000000015352         ja         loc_15410

0000000000015358         mov        rbp, rsi
000000000001535b         lea        rsi, qword [switch_table_1ca04+348]         ; 0x1cb60
0000000000015362         movzx      edx, cl
0000000000015365         mov        r14, rdi
0000000000015368         movsxd     rax, dword [rsi+rdx*4]
000000000001536c         add        rax, rsi
000000000001536f         jmp        rax
                        ; endp
0000000000015371         mov        rbx, qword [rbp+0x30]
0000000000015375         mov        r15, qword [rsp+0x20]
000000000001537a         mov        rsi, rdi
000000000001537d         mov        r13, qword [rsp+0x18]
0000000000015382         mov        qword [rsp], r8
0000000000015386         lea        rax, qword [rbx+1]
000000000001538a         mov        rdx, r15
000000000001538d         or         rdx, 0x800000
0000000000015394         mov        rdi, r13
0000000000015397         mov        qword [rbp+0x30], rax
000000000001539b         call       peek_token                                  ; peek_token


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_153a0:
00000000000153a0         cdqe
00000000000153a2         add        qword [r14+0x48], rax
00000000000153a6         xor        eax, eax
00000000000153a8         cmp        byte [r13+8], 0x9
00000000000153ad         mov        rdx, r13
00000000000153b0         je         loc_15eb0

00000000000153b6         mov        r13, qword [rsp+64]
00000000000153bb         mov        r8, qword [rsp+0]
00000000000153bf         mov        rcx, r15                                    ; argument #4 for method parse_reg_exp
00000000000153c2         mov        rsi, rbp                                    ; argument #2 for method parse_reg_exp
00000000000153c5         mov        rdi, r14                                    ; argument #1 for method parse_reg_exp
00000000000153c8         add        r8, 0x1                                     ; argument #5 for method parse_reg_exp
00000000000153cc         mov        r9, r13                                     ; argument #6 for method parse_reg_exp
00000000000153cf         call       parse_reg_exp                               ; parse_reg_exp
00000000000153d4         mov        r11d, dword [r13]
00000000000153d8         test       r11d, r11d
00000000000153db         jne        sub_153a0+112

00000000000153dd         mov        rdx, qword [rsp+24]
00000000000153e2         cmp        byte [rdx+8], 0x9
00000000000153e6         je         loc_15eb0

00000000000153ec         test       rax, rax
00000000000153ef         je         loc_15402

00000000000153f1         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
00000000000153f8         xor        edx, edx                                    ; argument #3 for method postorder
00000000000153fa         mov        rdi, rax                                    ; argument #1 for method postorder
00000000000153fd         call       postorder                                   ; postorder

                     loc_15402:
0000000000015402         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_153a0+79
0000000000015407         mov        dword [rax], 0x8
000000000001540d         nop        dword [rax]
                        ; endp

                     loc_15410:
0000000000015410         mov        qword [rsp+0x158+var_130], 0x0              ; CODE XREF=parse_expression+66, sub_15b10+431
0000000000015419         nop        dword [rax]
0000000000015420         mov        rdi, qword [rsp+0x158+var_40]               ; CODE XREF=sub_15b10+923, sub_15b10+1015, sub_15b10+2052, sub_15b10+2114
0000000000015428         xor        rdi, qword [fs:0x28]
0000000000015431         mov        rax, qword [rsp+0x158+var_130]
0000000000015436         jne        loc_167ae

000000000001543c         add        rsp, 0x128
0000000000015443         pop        rbx
0000000000015444         pop        rbp
0000000000015445         pop        r12
0000000000015447         pop        r13
0000000000015449         pop        r14
000000000001544b         pop        r15
000000000001544d         ret
                        ; endp
000000000001544e         test       qword [rsp+0x20], 0x1000000
0000000000015457         jne        sub_153a0+781
000000000001545d         mov        rax, qword [rsp+0x20]
0000000000015462         test       al, 0x20
0000000000015464         jne        sub_153a0+781
000000000001546a         test       al, 0x10
000000000001546c         jne        sub_15b10+1989
0000000000015472         cmp        cl, 0x9
0000000000015475         je         sub_15b10+888
000000000001547b         mov        rax, qword [rsp+0x10]                       ; CODE XREF=sub_15b10+897
0000000000015480         mov        r8, qword [rsp+0x18]
0000000000015485         xor        ecx, ecx
0000000000015487         xor        edx, edx
0000000000015489         lea        rsi, qword [rax+0x80]
0000000000015490         lea        rdi, qword [rax+0x70]
0000000000015494         mov        byte [r8+8], 0x1
0000000000015499         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001549e         test       rax, rax
00000000000154a1         mov        qword [rsp+0x28], rax
00000000000154a6         je         sub_15b10+872

                     loc_154ac:
00000000000154ac         mov        rbx, qword [rsp+24]                         ; CODE XREF=sub_15b10+416, sub_15b10+425, sub_15b10+580, sub_15b10+636, sub_15b10+649, sub_15b10+729, sub_15b10+990, sub_15b10+1526
00000000000154b1         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token
00000000000154b6         mov        rsi, r14                                    ; argument #2 for method peek_token
00000000000154b9         lea        r15, qword [rsp+192]
00000000000154c1         mov        rdi, rbx                                    ; argument #1 for method peek_token
00000000000154c4         call       peek_token                                  ; peek_token
00000000000154c9         cdqe
00000000000154cb         add        qword [r14+0x48], rax
00000000000154cf         movzx      eax, byte [rbx+8]
00000000000154d3         nop        dword [rax+rax]

                     loc_154d8:
00000000000154d8         cmp        al, 0x17                                    ; CODE XREF=sub_153a0+736, sub_153a0+748
00000000000154da         ja         sub_153a0+128

00000000000154e0         cmp        al, 0x12
00000000000154e2         mov        ecx, 0x8c0800
00000000000154e7         sete       bl
00000000000154ea         bt         rcx, rax
00000000000154ee         jae        sub_153a0+128

00000000000154f4         mov        rcx, qword [rsp+24]
00000000000154f9         cmp        al, 0x17
00000000000154fb         mov        rbp, qword [r14+0x48]
00000000000154ff         movdqa     xmm0, xmmword [rcx]
0000000000015503         je         loc_15828

0000000000015509         cmp        al, 0x13
000000000001550b         movzx      ebx, bl
000000000001550e         je         loc_157c0

0000000000015514         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token
0000000000015519         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
000000000001551e         mov        rsi, r14                                    ; argument #2 for method peek_token
0000000000015521         call       peek_token                                  ; peek_token
0000000000015526         cdqe
0000000000015528         add        qword [r14+0x48], rax
000000000001552c         cmp        qword [rsp+40], 0x0
0000000000015532         je         loc_158c0

0000000000015538         mov        qword [rsp+0], 0xffffffffffffffff

                     loc_15540:
0000000000015540         test       rbx, rbx                                    ; CODE XREF=sub_153a0+1107
0000000000015543         mov        rbp, qword [rsp+40]
0000000000015548         mov        qword [rsp+48], 0x0
0000000000015551         jg         loc_156d0

                     loc_15557:
0000000000015557         cmp        byte [rbp+0x30], 0x11                       ; CODE XREF=sub_153a0+993
000000000001555b         je         loc_158a0

                     loc_15561:
0000000000015561         cmp        qword [rsp+0], 0xffffffffffffffff           ; CODE XREF=sub_153a0+1299
0000000000015566         mov        rdx, rbp                                    ; argument #3 for method create_token_tree.isra.16
0000000000015569         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001556c         sete       al
000000000001556f         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000015571         add        eax, 0xa
0000000000015574         mov        byte [rsp+200], al
000000000001557b         mov        rax, qword [rsp+16]
0000000000015580         lea        r12, qword [rax+0x70]
0000000000015584         lea        r13, qword [rax+0x80]
000000000001558b         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
000000000001558e         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
0000000000015591         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000015596         test       rax, rax
0000000000015599         mov        rdx, rax
000000000001559c         je         loc_15790

00000000000155a2         add        rbx, 0x2
00000000000155a6         cmp        rbx, qword [rsp+0]
00000000000155aa         jg         loc_1562b

00000000000155ac         mov        qword [rsp+72], r14
00000000000155b1         mov        r14, rax

                     loc_155b4:
00000000000155b4         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree, CODE XREF=sub_153a0+641
00000000000155b9         mov        rdi, rbp                                    ; argument #1 for method duplicate_tree
00000000000155bc         call       duplicate_tree                              ; duplicate_tree
00000000000155c1         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
00000000000155c4         mov        rbp, rax
00000000000155c7         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
00000000000155ca         mov        rdx, r14                                    ; argument #3 for method create_token_tree.isra.16
00000000000155cd         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
00000000000155d0         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
00000000000155d3         mov        byte [rsp+200], 0x10
00000000000155db         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000155e0         test       rbp, rbp
00000000000155e3         je         loc_15790

00000000000155e9         test       rax, rax
00000000000155ec         je         loc_15790

00000000000155f2         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
00000000000155f4         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
00000000000155f7         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
00000000000155fa         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
00000000000155fd         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
0000000000015600         mov        byte [rsp+200], 0xa
0000000000015608         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001560d         test       rax, rax
0000000000015610         mov        r14, rax
0000000000015613         je         loc_15790

0000000000015619         add        rbx, 0x1
000000000001561d         cmp        rbx, qword [rsp+0]
0000000000015621         jle        loc_155b4

0000000000015623         mov        r14, qword [rsp+72]
0000000000015628         mov        rdx, rax

                     loc_1562b:
000000000001562b         mov        rax, qword [rsp+48]                         ; CODE XREF=sub_153a0+522
0000000000015630         test       rax, rax
0000000000015633         je         loc_158e0

0000000000015639         mov        rcx, rdx                                    ; argument #4 for method create_token_tree.isra.16
000000000001563c         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001563f         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
0000000000015642         mov        rsi, r13                                    ; argument #2 for method create_token_tree.isra.16
0000000000015645         mov        rdi, r12                                    ; argument #1 for method create_token_tree.isra.16
0000000000015648         mov        byte [rsp+200], 0x10
0000000000015650         call       create_token_tree.isra.16                   ; create_token_tree.isra.16

                     loc_15655:
0000000000015655         mov        rdi, qword [rsp+64]                         ; CODE XREF=sub_153a0+1265
000000000001565a         mov        edx, dword [rdi]
000000000001565c         test       edx, edx
000000000001565e         je         loc_15669

0000000000015660         test       rax, rax
0000000000015663         je         loc_159bb

                     loc_15669:
0000000000015669         mov        qword [rsp+40], rax                         ; CODE XREF=sub_153a0+702

                     loc_1566e:
000000000001566e         test       qword [rsp+32], 0x1000000                   ; CODE XREF=sub_153a0+1152, sub_153a0+1349
0000000000015677         mov        rax, qword [rsp+24]
000000000001567c         movzx      eax, byte [rax+8]
0000000000015680         je         loc_154d8

0000000000015686         cmp        al, 0xb
0000000000015688         je         loc_15692

000000000001568a         cmp        al, 0x17
000000000001568c         jne        loc_154d8

                     loc_15692:
0000000000015692         mov        rax, qword [rsp+40]                         ; CODE XREF=sub_153a0+744
0000000000015697         test       rax, rax
000000000001569a         je         loc_156ad

000000000001569c         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
00000000000156a3         xor        edx, edx                                    ; argument #3 for method postorder
00000000000156a5         mov        rdi, rax                                    ; argument #1 for method postorder
00000000000156a8         call       postorder                                   ; postorder

                     loc_156ad:
00000000000156ad         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_153a0+183, sub_153a0+196, sub_153a0+762
00000000000156b2         mov        qword [rsp+40], 0x0
00000000000156bb         mov        dword [rax], 0xd
00000000000156c1         jmp        sub_153a0+128
                        ; endp
00000000000156c6         nop        word [cs:rax+rax]

                     loc_156d0:
00000000000156d0         cmp        rbx, 0x1                                    ; CODE XREF=sub_153a0+433
00000000000156d4         je         loc_15f0c

00000000000156da         mov        rax, qword [rsp+16]
00000000000156df         mov        r13, rbp
00000000000156e2         mov        qword [rsp+72], r14
00000000000156e7         lea        r12, qword [rax+0x80]
00000000000156ee         lea        rdi, qword [rax+0x70]
00000000000156f2         mov        rax, rbp
00000000000156f5         mov        r14, rax
00000000000156f8         mov        ebp, 0x2
00000000000156fd         mov        rsi, r12
0000000000015700         mov        qword [rsp+48], rdi
0000000000015705         mov        r12, r13
0000000000015708         mov        r13, rbx
000000000001570b         mov        rbx, rsi
000000000001570e         nop

                     loc_15710:
0000000000015710         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree, CODE XREF=sub_153a0+946
0000000000015715         mov        rdi, r12                                    ; argument #1 for method duplicate_tree
0000000000015718         call       duplicate_tree                              ; duplicate_tree
000000000001571d         mov        rdi, qword [rsp+48]                         ; argument #1 for method create_token_tree.isra.16
0000000000015722         mov        r12, rax
0000000000015725         mov        rdx, r14                                    ; argument #3 for method create_token_tree.isra.16
0000000000015728         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001572b         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
000000000001572e         mov        rsi, rbx                                    ; argument #2 for method create_token_tree.isra.16
0000000000015731         mov        byte [rsp+200], 0x10
0000000000015739         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001573e         test       r12, r12
0000000000015741         mov        r14, rax
0000000000015744         je         loc_15790

0000000000015746         test       rax, rax
0000000000015749         je         loc_15790

000000000001574b         add        rbp, 0x1
000000000001574f         cmp        rbp, r13
0000000000015752         jle        loc_15710

0000000000015754         mov        r14, qword [rsp+72]
0000000000015759         mov        rbx, r13
000000000001575c         mov        qword [rsp+48], rax
0000000000015761         mov        r13, r12

                     loc_15764:
0000000000015764         cmp        qword [rsp+0], rbx                          ; CODE XREF=sub_15b10+1030
0000000000015768         je         loc_158d4

000000000001576e         mov        rsi, qword [rsp+16]                         ; argument #2 for method duplicate_tree
0000000000015773         mov        rdi, r13                                    ; argument #1 for method duplicate_tree
0000000000015776         call       duplicate_tree                              ; duplicate_tree
000000000001577b         test       rax, rax
000000000001577e         mov        rbp, rax
0000000000015781         jne        loc_15557

0000000000015787         nop        word [rax+rax]

                     loc_15790:
0000000000015790         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_153a0+508, sub_153a0+579, sub_153a0+588, sub_153a0+627, sub_153a0+932, sub_153a0+937
0000000000015795         mov        dword [rax], 0xc

                     loc_1579b:
000000000001579b         mov        rdi, qword [rsp+40]                         ; argument #1 for method postorder, CODE XREF=sub_153a0+1141, sub_153a0+1569
00000000000157a0         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
00000000000157a7         xor        edx, edx                                    ; argument #3 for method postorder
00000000000157a9         call       postorder                                   ; postorder
00000000000157ae         mov        qword [rsp+40], 0x0
00000000000157b7         jmp        sub_153a0+128
                        ; endp
00000000000157bc         nop        dword [rax]

                     loc_157c0:
00000000000157c0         mov        qword [rsp+0], 0x1                          ; CODE XREF=sub_153a0+366

                     loc_157c8:
00000000000157c8         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token, CODE XREF=sub_153a0+1482
00000000000157cd         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
00000000000157d2         mov        rsi, r14                                    ; argument #2 for method peek_token
00000000000157d5         call       peek_token                                  ; peek_token
00000000000157da         cdqe
00000000000157dc         add        qword [r14+0x48], rax
00000000000157e0         cmp        qword [rsp+40], 0x0
00000000000157e6         je         loc_158c0

00000000000157ec         mov        rax, qword [rsp+0]
00000000000157f0         or         rax, rbx
00000000000157f3         jne        loc_15540

00000000000157f9         mov        rdi, qword [rsp+40]                         ; argument #1 for method postorder
00000000000157fe         lea        rsi, qword [free_tree]                      ; argument #2 for method postorder, free_tree
0000000000015805         xor        edx, edx                                    ; argument #3 for method postorder
0000000000015807         call       postorder                                   ; postorder
000000000001580c         mov        rax, qword [rsp+64]
0000000000015811         mov        esi, dword [rax]
0000000000015813         test       esi, esi
0000000000015815         jne        loc_1579b

                     loc_15817:
0000000000015817         mov        qword [rsp+40], 0x0                         ; CODE XREF=sub_153a0+1321
0000000000015820         jmp        loc_1566e
0000000000015825         nop        dword [rax]

                     loc_15828:
0000000000015828         mov        rdx, qword [rsp+32]                         ; argument #3 for method fetch_number, CODE XREF=sub_153a0+355
000000000001582d         mov        rsi, rcx                                    ; argument #2 for method fetch_number
0000000000015830         mov        rdi, r14                                    ; argument #1 for method fetch_number
0000000000015833         movaps     xmmword [rsp+0], xmm0
0000000000015837         call       fetch_number                                ; fetch_number
000000000001583c         cmp        rax, 0xffffffffffffffff
0000000000015840         mov        rbx, rax
0000000000015843         movdqa     xmm0, xmmword [rsp+0]
0000000000015848         je         loc_158f0

000000000001584e         cmp        rax, 0xfffffffffffffffe
0000000000015852         je         loc_1586d

0000000000015854         mov        rax, qword [rsp+24]
0000000000015859         movzx      eax, byte [rax+8]
000000000001585d         cmp        al, 0x18
000000000001585f         je         loc_15980

0000000000015865         cmp        al, 0x1
0000000000015867         je         loc_15993

                     loc_1586d:
000000000001586d         test       qword [rsp+32], 0x200000                    ; CODE XREF=sub_153a0+1202, sub_153a0+1428
0000000000015876         je         loc_167b3

                     loc_1587c:
000000000001587c         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_153a0+1546
0000000000015881         mov        qword [r14+0x48], rbp
0000000000015885         movaps     xmmword [rax], xmm0
0000000000015888         mov        byte [rax+8], 0x1
000000000001588c         mov        rax, qword [rsp+40]
0000000000015891         jmp        loc_15655
0000000000015896         nop        word [cs:rax+rax]

                     loc_158a0:
00000000000158a0         mov        rdx, qword [rbp+0x28]                       ; argument #3 for method postorder, CODE XREF=sub_153a0+443
00000000000158a4         lea        rsi, qword [mark_opt_subexp]                ; argument #2 for method postorder, mark_opt_subexp
00000000000158ab         mov        rdi, rbp                                    ; argument #1 for method postorder
00000000000158ae         call       postorder                                   ; postorder
00000000000158b3         jmp        loc_15561
00000000000158b8         nop        dword [rax+rax]

                     loc_158c0:
00000000000158c0         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_153a0+402, sub_153a0+1094
00000000000158c5         mov        ecx, dword [rax]
00000000000158c7         test       ecx, ecx
00000000000158c9         je         loc_15817

00000000000158cf         jmp        sub_153a0+112
                        ; endp

                     loc_158d4:
00000000000158d4         mov        rdx, qword [rsp+48]                         ; CODE XREF=sub_153a0+968
00000000000158d9         nop        dword [rax]

                     loc_158e0:
00000000000158e0         mov        qword [rsp+40], rdx                         ; CODE XREF=sub_153a0+659
00000000000158e5         jmp        loc_1566e
00000000000158ea         nop        word [rax+rax]

                     loc_158f0:
00000000000158f0         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_153a0+1192
00000000000158f5         cmp        byte [rax+8], 0x1
00000000000158f9         jne        loc_159b0

00000000000158ff         mov        rax, qword [rsp+24]
0000000000015904         cmp        byte [rax], 0x2c
0000000000015907         jne        loc_159b0

000000000001590d         xor        ebx, ebx

                     loc_1590f:
000000000001590f         mov        rdx, qword [rsp+32]                         ; argument #3 for method fetch_number, CODE XREF=sub_153a0+1531
0000000000015914         mov        rsi, qword [rsp+24]                         ; argument #2 for method fetch_number
0000000000015919         mov        rdi, r14                                    ; argument #1 for method fetch_number
000000000001591c         movaps     xmmword [rsp+48], xmm0
0000000000015921         call       fetch_number                                ; fetch_number
0000000000015926         cmp        rax, 0xfffffffffffffffe
000000000001592a         mov        qword [rsp+0], rax
000000000001592e         movdqa     xmm0, xmmword [rsp+48]
0000000000015934         je         loc_1586d

000000000001593a         mov        rax, qword [rsp+0]
000000000001593e         cmp        rax, 0xffffffffffffffff
0000000000015942         je         loc_15949

0000000000015944         cmp        rax, rbx
0000000000015947         jl         loc_159b0

                     loc_15949:
0000000000015949         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_153a0+1442
000000000001594e         cmp        byte [rax+8], 0x18
0000000000015952         jne        loc_159b0

0000000000015954         cmp        qword [rsp+0], 0xffffffffffffffff
0000000000015959         jne        loc_15984

000000000001595b         xor        eax, eax
000000000001595d         cmp        rbx, 0x7fff
0000000000015964         setg       al

                     loc_15967:
0000000000015967         test       rax, rax                                    ; CODE XREF=sub_153a0+1521
000000000001596a         je         loc_157c8

0000000000015970         mov        rax, qword [rsp+64]
0000000000015975         mov        dword [rax], 0xf
000000000001597b         jmp        loc_159bb
000000000001597d         nop        dword [rax]

                     loc_15980:
0000000000015980         mov        qword [rsp+0], rbx                          ; CODE XREF=sub_153a0+1215

                     loc_15984:
0000000000015984         xor        eax, eax                                    ; CODE XREF=sub_153a0+1465
0000000000015986         cmp        qword [rsp+0], 0x7fff
000000000001598e         setg       al
0000000000015991         jmp        loc_15967

                     loc_15993:
0000000000015993         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_153a0+1223
0000000000015998         cmp        byte [rax], 0x2c
000000000001599b         je         loc_1590f

00000000000159a1         test       qword [rsp+32], 0x200000
00000000000159aa         jne        loc_1587c

                     loc_159b0:
00000000000159b0         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_153a0+1369, sub_153a0+1383, sub_153a0+1447, sub_153a0+1458, sub_15b10+3244
00000000000159b5         mov        dword [rax], 0xa

                     loc_159bb:
00000000000159bb         cmp        qword [rsp+40], 0x0                         ; CODE XREF=sub_153a0+707, sub_153a0+1499, sub_15b10+3261
00000000000159c1         jne        loc_1579b

00000000000159c7         jmp        sub_153a0+112
                        ; endp
00000000000159cc         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_159d0:
00000000000159d0         mov        rax, qword [rsp+24]
00000000000159d5         mov        ebp, dword [rax]
00000000000159d7         test       ebp, 0x30f
00000000000159dd         je         loc_15a41

00000000000159df         mov        rax, qword [rsp+16]
00000000000159e4         movzx      eax, byte [rax+0xb0]
00000000000159eb         test       al, 0x10
00000000000159ed         jne        loc_15a41

00000000000159ef         mov        rdi, qword [rsp+16]
00000000000159f4         or         eax, 0x10
00000000000159f7         test       al, 0x8
00000000000159f9         mov        byte [rdi+0xb0], al
00000000000159ff         jne        loc_16603

0000000000015a05         movabs     rdx, 0x3ff000000000000
0000000000015a0f         test       al, 0x4
0000000000015a11         mov        qword [rdi+0xb8], rdx
0000000000015a18         movabs     rdx, 0x7fffffe87fffffe
0000000000015a22         mov        qword [rdi+0xc0], rdx
0000000000015a29         je         loc_16588

0000000000015a2f         pxor       xmm0, xmm0
0000000000015a33         mov        rax, qword [rsp+24]
0000000000015a38         movups     xmmword [rdi+0xc8], xmm0
0000000000015a3f         mov        ebp, dword [rax]

                     loc_15a41:
0000000000015a41         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_159d0+13, sub_159d0+29, sub_15b10+2798
0000000000015a46         lea        rbx, qword [rax+0x70]
0000000000015a4a         lea        r12, qword [rax+0x80]
0000000000015a51         lea        eax, dword [rbp-0x100]
0000000000015a57         test       eax, 0xfffffeff
0000000000015a5c         jne        loc_160ca

0000000000015a62         cmp        ebp, 0x100
0000000000015a68         mov        r15, qword [rsp+24]
0000000000015a6d         je         loc_160a2

0000000000015a73         mov        dword [r15], 0x5
0000000000015a7a         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000015a7d         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000015a7f         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000015a81         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000015a84         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000015a87         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000015a8c         mov        dword [r15], 0xa
0000000000015a93         mov        rbp, rax

                     loc_15a96:
0000000000015a96         mov        r8, qword [rsp+24]                          ; argument #5 for method create_token_tree.isra.16, CODE XREF=sub_15b10+1461
0000000000015a9b         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000015a9d         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000015a9f         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000015aa2         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000015aa5         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000015aaa         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
0000000000015ab2         mov        rdx, rbp                                    ; argument #3 for method create_token_tree.isra.16
0000000000015ab5         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000015ab8         mov        rcx, rax                                    ; argument #4 for method create_token_tree.isra.16
0000000000015abb         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
0000000000015abe         mov        r13, rax
0000000000015ac1         mov        byte [rsp+200], 0xa
0000000000015ac9         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000015ace         test       rbp, rbp
0000000000015ad1         mov        rdi, rax
0000000000015ad4         mov        qword [rsp+40], rax
0000000000015ad9         sete       dl
0000000000015adc         test       r13, r13
0000000000015adf         sete       al
0000000000015ae2         or         dl, al
0000000000015ae4         jne        sub_15b10+872

0000000000015aea         test       rdi, rdi
0000000000015aed         je         sub_15b10+872

                     loc_15af3:
0000000000015af3         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token, CODE XREF=sub_15b10+1494
0000000000015af8         mov        rdi, qword [rsp+24]                         ; argument #1 for method peek_token
0000000000015afd         mov        rsi, r14                                    ; argument #2 for method peek_token
0000000000015b00         call       peek_token                                  ; peek_token
0000000000015b05         cdqe
0000000000015b07         add        qword [r14+0x48], rax
0000000000015b0b         jmp        sub_153a0+128
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15b10:
0000000000015b10         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
0000000000015b15         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
0000000000015b1a         mov        qword [rsp+152], 0x0
0000000000015b26         call       j_calloc                                    ; calloc
0000000000015b2b         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
0000000000015b30         mov        r12, rax
0000000000015b33         mov        edi, 0x50                                   ; argument "__nmemb" for method j_calloc
0000000000015b38         call       j_calloc                                    ; calloc
0000000000015b3d         test       r12, r12
0000000000015b40         mov        r13, rax
0000000000015b43         sete       dl
0000000000015b46         test       rax, rax
0000000000015b49         sete       al
0000000000015b4c         or         dl, al
0000000000015b4e         jne        loc_16329

0000000000015b54         mov        r10, qword [rsp+24]
0000000000015b59         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
0000000000015b5e         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
0000000000015b61         mov        rdi, r10                                    ; argument #1 for method peek_token_bracket
0000000000015b64         call       peek_token_bracket                          ; peek_token_bracket
0000000000015b69         movsxd     rbx, eax
0000000000015b6c         movzx      eax, byte [r10+8]
0000000000015b71         cmp        al, 0x2
0000000000015b73         je         loc_16319

0000000000015b79         cmp        al, 0x19
0000000000015b7b         mov        byte [rsp+87], 0x0
0000000000015b80         je         loc_1604a

                     loc_15b86:
0000000000015b86         cmp        al, 0x15                                    ; CODE XREF=sub_15b10+1407
0000000000015b88         je         loc_16094

                     loc_15b8e:
0000000000015b8e         lea        rax, qword [rsp+208]                        ; CODE XREF=sub_15b10+1421
0000000000015b96         mov        r15, qword [rsp+24]
0000000000015b9b         lea        rbp, qword [switch_table_1cbf4]             ; switch_table_1cbf4
0000000000015ba2         mov        qword [rsp+72], 0x0
0000000000015bab         mov        r9d, 0x1
0000000000015bb1         mov        qword [rsp+48], 0x0
0000000000015bba         mov        qword [rsp+40], rax
0000000000015bbf         lea        rax, qword [rsp+160]
0000000000015bc7         mov        qword [rsp+0], rax
0000000000015bcb         lea        rax, qword [rsp+152]
0000000000015bd3         mov        qword [rsp+88], rax
0000000000015bd8         lea        rax, qword [rsp+192]
0000000000015be0         mov        qword [rsp+96], rax
0000000000015be5         lea        rax, qword [rsp+240]
0000000000015bed         mov        qword [rsp+104], rax

                     loc_15bf2:
0000000000015bf2         mov        rax, qword [rsp+40]                         ; CODE XREF=sub_15b10+1112
0000000000015bf7         mov        r8, qword [rsp+32]                          ; argument #5 for method parse_bracket_element.constprop.37
0000000000015bfc         and        r9d, 0x1                                    ; argument #6 for method parse_bracket_element.constprop.37
0000000000015c00         mov        rdi, qword [rsp+0]                          ; argument #1 for method parse_bracket_element.constprop.37
0000000000015c04         mov        ecx, ebx                                    ; argument #4 for method parse_bracket_element.constprop.37
0000000000015c06         mov        rdx, r15                                    ; argument #3 for method parse_bracket_element.constprop.37
0000000000015c09         mov        rsi, r14                                    ; argument #2 for method parse_bracket_element.constprop.37
0000000000015c0c         mov        dword [rsp+160], 0x3
0000000000015c17         mov        qword [rsp+168], rax
0000000000015c1f         call       parse_bracket_element.constprop.37          ; parse_bracket_element.constprop.37
0000000000015c24         test       eax, eax
0000000000015c26         jne        loc_1610b

0000000000015c2c         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
0000000000015c31         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
0000000000015c34         mov        rdi, r15                                    ; argument #1 for method peek_token_bracket
0000000000015c37         call       peek_token_bracket                          ; peek_token_bracket
0000000000015c3c         movsxd     rbx, eax
0000000000015c3f         mov        eax, dword [rsp+160]
0000000000015c46         lea        edx, dword [rax-2]
0000000000015c49         and        edx, 0xfffffffd
0000000000015c4c         je         loc_15c65

0000000000015c4e         movzx      edx, byte [r15+8]
0000000000015c53         cmp        dl, 0x2
0000000000015c56         je         loc_160f1

0000000000015c5c         cmp        dl, 0x16
0000000000015c5f         je         loc_16117

                     loc_15c65:
0000000000015c65         cmp        eax, 0x4                                    ; CODE XREF=sub_15b10+316, sub_15b10+2141
0000000000015c68         ja         loc_1660a

0000000000015c6e         movsxd     rax, dword [rbp+rax*4]
0000000000015c73         add        rax, rbp
0000000000015c76         jmp        rax                                         ; switch statement using table at 0x1cbf4, with 5 cases, 0x15f35,0x15f6d,0x15fb7,0x15fe1,0x16009
0000000000015c78         mov        rbx, qword [rsp+0x40]
0000000000015c7d         cmp        cl, 0x23
0000000000015c80         mov        rsi, qword [rdi+0x78]
0000000000015c84         sete       r8b
0000000000015c88         lea        rcx, qword [aWrittenBySSAnd+27]             ; 0x1c27b
0000000000015c8f         lea        rdx, qword [aSpace]                         ; "space"
0000000000015c96         movzx      r8d, r8b
0000000000015c9a         mov        r9, rbx
0000000000015c9d         mov        rdi, qword [rsp+0x10]                       ; CODE XREF=sub_15b10+477
0000000000015ca2         call       build_charclass_op                          ; build_charclass_op
0000000000015ca7         mov        edi, dword [rbx]
0000000000015ca9         mov        qword [rsp+0x28], rax
0000000000015cae         test       edi, edi
0000000000015cb0         je         sub_153a0+268
0000000000015cb6         test       rax, rax
0000000000015cb9         jne        sub_153a0+268
0000000000015cbf         jmp        sub_153a0+112
0000000000015cc4         nop        dword [rax]
0000000000015cc8         mov        rbx, qword [rsp+0x40]
0000000000015ccd         cmp        cl, 0x21
0000000000015cd0         mov        rsi, qword [rdi+0x78]
0000000000015cd4         sete       r8b
0000000000015cd8         lea        rcx, qword [aCoreutils+12]                  ; 0x1b7e2
0000000000015cdf         lea        rdx, qword [aAlnum]                         ; "alnum"
0000000000015ce6         movzx      r8d, r8b
0000000000015cea         mov        r9, rbx
0000000000015ced         jmp        sub_15b10+397
0000000000015cef         mov        rax, qword [rsp+0x18]
0000000000015cf4         mov        rdi, qword [rsp+0x10]
0000000000015cf9         mov        rcx, qword [rax]
0000000000015cfc         mov        eax, 0x1
0000000000015d01         shl        eax, cl
0000000000015d03         cdqe
0000000000015d05         test       qword [rdi+0xa8], rax
0000000000015d0c         je         sub_15b10+2094
0000000000015d12         mov        rbx, qword [rsp+0x10]
0000000000015d17         mov        r8, qword [rsp+0x18]
0000000000015d1c         xor        ecx, ecx
0000000000015d1e         xor        edx, edx
0000000000015d20         or         qword [rbx+0xa0], rax
0000000000015d27         lea        rsi, qword [rbx+0x80]
0000000000015d2e         lea        rdi, qword [rbx+0x70]
0000000000015d32         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000015d37         test       rax, rax
0000000000015d3a         mov        qword [rsp+0x28], rax
0000000000015d3f         je         sub_15b10+872
0000000000015d45         add        qword [rbx+0x98], 0x1
0000000000015d4d         or         byte [rbx+0xb0], 0x2
0000000000015d54         jmp        sub_153a0+268
0000000000015d59         mov        rbx, qword [rsp+0x10]
0000000000015d5e         mov        r8, qword [rsp+0x18]
0000000000015d63         xor        ecx, ecx
0000000000015d65         xor        edx, edx
0000000000015d67         lea        rsi, qword [rbx+0x80]
0000000000015d6e         lea        rdi, qword [rbx+0x70]
0000000000015d72         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000015d77         test       rax, rax
0000000000015d7a         mov        qword [rsp+0x28], rax
0000000000015d7f         je         sub_15b10+872
0000000000015d85         cmp        dword [rbx+0xb4], 0x1
0000000000015d8c         jle        sub_153a0+268
0000000000015d92         or         byte [rbx+0xb0], 0x2
0000000000015d99         jmp        sub_153a0+268
0000000000015d9e         mov        rax, qword [rsp+0x10]
0000000000015da3         mov        r8, qword [rsp+0x18]
0000000000015da8         xor        ecx, ecx
0000000000015daa         xor        edx, edx
0000000000015dac         lea        rbx, qword [rax+0x70]
0000000000015db0         lea        rbp, qword [rax+0x80]
0000000000015db7         mov        rdi, rbx
0000000000015dba         mov        rsi, rbp
0000000000015dbd         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000015dc2         test       rax, rax
0000000000015dc5         mov        qword [rsp+0x28], rax
0000000000015dca         je         sub_15b10+872
0000000000015dd0         mov        rax, qword [rsp+0x10]
0000000000015dd5         lea        r12, qword [rsp+0xc0]
0000000000015ddd         mov        r15, qword [rsp+0x28]
0000000000015de2         cmp        dword [rax+0xb4], 0x1
0000000000015de9         jle        sub_153a0+268
0000000000015def         mov        rax, qword [r14+0x48]                       ; CODE XREF=sub_15b10+866
0000000000015df3         cmp        qword [r14+0x68], rax
0000000000015df7         jle        sub_15b10+1521
0000000000015dfd         cmp        rax, qword [r14+0x30]
0000000000015e01         je         sub_15b10+1521
0000000000015e07         mov        rdx, qword [r14+0x10]
0000000000015e0b         cmp        dword [rdx+rax*4], 0xffffffff
0000000000015e0f         jne        sub_15b10+1521
0000000000015e15         mov        r13, qword [rsp+0x18]
0000000000015e1a         mov        rdx, qword [rsp+0x20]
0000000000015e1f         mov        rsi, r14
0000000000015e22         mov        rdi, r13
0000000000015e25         call       peek_token                                  ; peek_token
0000000000015e2a         cdqe
0000000000015e2c         add        qword [r14+0x48], rax
0000000000015e30         mov        r8, r13
0000000000015e33         xor        ecx, ecx
0000000000015e35         xor        edx, edx
0000000000015e37         mov        rsi, rbp
0000000000015e3a         mov        rdi, rbx
0000000000015e3d         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000015e42         mov        rdx, r15
0000000000015e45         mov        r13, rax
0000000000015e48         mov        r8, r12
0000000000015e4b         mov        rcx, rax
0000000000015e4e         mov        rsi, rbp
0000000000015e51         mov        rdi, rbx
0000000000015e54         mov        byte [rsp+0xc8], 0x10
0000000000015e5c         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000015e61         test       r13, r13
0000000000015e64         mov        r15, rax
0000000000015e67         sete       dl
0000000000015e6a         test       rax, rax
0000000000015e6d         sete       al
0000000000015e70         or         dl, al
0000000000015e72         je         sub_15b10+735

                     loc_15e78:
0000000000015e78         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_153a0+262, sub_15b10+559, sub_15b10+623, sub_15b10+698, sub_15b10+984
0000000000015e7d         mov        dword [rax], 0xc
0000000000015e83         jmp        sub_153a0+112
                        ; endp
0000000000015e88         test       qword [rsp+0x20], 0x20000                   ; CODE XREF=sub_153a0+213
0000000000015e91         jne        sub_153a0+219
0000000000015e97         mov        rax, qword [rsp+0x40]
0000000000015e9c         mov        qword [rsp+0x28], 0x0
0000000000015ea5         mov        dword [rax], 0x10
0000000000015eab         jmp        sub_153a0+128

                     loc_15eb0:
0000000000015eb0         cmp        rbx, 0x8                                    ; CODE XREF=sub_153a0+16, sub_153a0+70
0000000000015eb4         jbe        loc_15f1b

                     loc_15eb6:
0000000000015eb6         mov        rdi, qword [rsp+16]                         ; CODE XREF=sub_15b10+1059
0000000000015ebb         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
0000000000015ec3         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000015ec5         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
0000000000015ec8         mov        byte [rsp+200], 0x11
0000000000015ed0         lea        rsi, qword [rdi+0x80]                       ; argument #2 for method create_token_tree.isra.16
0000000000015ed7         add        rdi, 0x70                                   ; argument #1 for method create_token_tree.isra.16
0000000000015edb         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000015ee0         test       rax, rax
0000000000015ee3         mov        qword [rsp+40], rax
0000000000015ee8         je         loc_15e78

0000000000015eea         mov        qword [rax+0x28], rbx
0000000000015eee         jmp        loc_154ac
0000000000015ef3         mov        rax, qword [rsp+0x40]
0000000000015ef8         mov        qword [rsp+0x28], 0x0
0000000000015f01         mov        dword [rax], 0x5
0000000000015f07         jmp        sub_153a0+128

                     loc_15f0c:
0000000000015f0c         mov        r13, qword [rsp+40]                         ; CODE XREF=sub_153a0+820
0000000000015f11         mov        qword [rsp+48], r13
0000000000015f16         jmp        loc_15764

                     loc_15f1b:
0000000000015f1b         mov        rsi, qword [rsp+16]                         ; CODE XREF=sub_15b10+932
0000000000015f20         mov        edx, 0x1
0000000000015f25         mov        ecx, ebx
0000000000015f27         shl        edx, cl
0000000000015f29         movsxd     rdx, edx
0000000000015f2c         or         qword [rsi+0xa8], rdx
0000000000015f33         jmp        loc_15eb6

                     loc_15f35:
0000000000015f35         mov        rsi, qword [rsp+168]                        ; case 3, argument #2 for method build_collating_symbol.isra.28, CODE XREF=sub_15b10+358
0000000000015f3d         mov        rdi, r12                                    ; argument #1 for method build_collating_symbol.isra.28
0000000000015f40         call       build_collating_symbol.isra.28              ; build_collating_symbol.isra.28
0000000000015f45         mov        rdx, qword [rsp+64]
0000000000015f4a         test       eax, eax
0000000000015f4c         mov        dword [rdx], eax
0000000000015f4e         jne        loc_15f88

                     loc_15f50:
0000000000015f50         movzx      eax, byte [r15+8]                           ; CODE XREF=sub_15b10+1142, sub_15b10+1228, sub_15b10+1268, sub_15b10+1327, sub_15b10+1984
0000000000015f55         cmp        al, 0x2
0000000000015f57         je         loc_160f1

0000000000015f5d         cmp        al, 0x15
0000000000015f5f         je         loc_16372

0000000000015f65         xor        r9d, r9d
0000000000015f68         jmp        loc_15bf2

                     loc_15f6d:
0000000000015f6d         mov        rsi, qword [rsp+168]                        ; case 2, argument #2 for method build_collating_symbol.isra.28, CODE XREF=sub_15b10+358
0000000000015f75         mov        rdi, r12                                    ; argument #1 for method build_collating_symbol.isra.28
0000000000015f78         call       build_collating_symbol.isra.28              ; build_collating_symbol.isra.28
0000000000015f7d         mov        rdx, qword [rsp+64]
0000000000015f82         test       eax, eax
0000000000015f84         mov        dword [rdx], eax
0000000000015f86         je         loc_15f50

                     loc_15f88:
0000000000015f88         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=sub_15b10+1086, sub_15b10+1333, sub_15b10+1516, sub_15b10+1538, sub_15b10+2068, sub_15b10+2350, sub_15b10+2852, sub_15b10+2904, sub_15b10+3128
0000000000015f8b         call       j_free                                      ; free
0000000000015f90         mov        rdi, r13                                    ; argument #1 for method free_charset
0000000000015f93         call       free_charset                                ; free_charset
0000000000015f98         mov        rax, qword [rsp+64]
0000000000015f9d         mov        r8d, dword [rax]
0000000000015fa0         test       r8d, r8d
0000000000015fa3         jne        sub_153a0+112

0000000000015fa9         mov        qword [rsp+40], 0x0
0000000000015fb2         jmp        sub_153a0+268
                        ; endp

                     loc_15fb7:
0000000000015fb7         mov        rdx, qword [r13+0x28]                       ; case 1, CODE XREF=sub_15b10+358
0000000000015fbb         cmp        rdx, qword [rsp+48]
0000000000015fc0         mov        rax, qword [r13]
0000000000015fc4         je         loc_164be

                     loc_15fca:
0000000000015fca         lea        rcx, qword [rdx+1]                          ; CODE XREF=sub_15b10+2526
0000000000015fce         mov        qword [r13+0x28], rcx
0000000000015fd2         mov        ecx, dword [rsp+168]
0000000000015fd9         mov        dword [rax+rdx*4], ecx
0000000000015fdc         jmp        loc_15f50

                     loc_15fe1:
0000000000015fe1         movzx      edx, byte [rsp+168]                         ; case 0, CODE XREF=sub_15b10+358
0000000000015fe9         mov        esi, 0x1
0000000000015fee         mov        rax, rdx
0000000000015ff1         and        edx, 0x3f
0000000000015ff4         shr        rax, 0x3
0000000000015ff8         mov        ecx, edx
0000000000015ffa         and        eax, 0x18
0000000000015ffd         shl        rsi, cl
0000000000016000         or         qword [r12+rax], rsi
0000000000016004         jmp        loc_15f50

                     loc_16009:
0000000000016009         sub        rsp, 0x8                                    ; case 4, CODE XREF=sub_15b10+358
000000000001600d         mov        rdi, qword [r14+0x78]                       ; argument #1 for method build_charclass.isra.29
0000000000016011         lea        rdx, qword [r13+0x18]                       ; argument #3 for method build_charclass.isra.29
0000000000016015         push       qword [rsp+40]                              ; argument #7 for method build_charclass.isra.29
0000000000016019         mov        r9, qword [rsp+184]                         ; argument #6 for method build_charclass.isra.29
0000000000016021         lea        rcx, qword [r13+0x48]                       ; argument #4 for method build_charclass.isra.29
0000000000016025         mov        r8, qword [rsp+104]                         ; argument #5 for method build_charclass.isra.29
000000000001602a         mov        rsi, r12                                    ; argument #2 for method build_charclass.isra.29
000000000001602d         call       build_charclass.isra.29                     ; build_charclass.isra.29
0000000000016032         mov        rdx, qword [rsp+80]
0000000000016037         test       eax, eax
0000000000016039         mov        dword [rdx], eax
000000000001603b         pop        r9
000000000001603d         pop        r10
000000000001603f         je         loc_15f50

0000000000016045         jmp        loc_15f88

                     loc_1604a:
000000000001604a         or         byte [r13+0x20], 0x1                        ; CODE XREF=sub_15b10+112
000000000001604f         test       qword [rsp+32], 0x100
0000000000016058         je         loc_16062

000000000001605a         or         qword [r12], 0x400

                     loc_16062:
0000000000016062         add        qword [r14+0x48], rbx                       ; CODE XREF=sub_15b10+1352
0000000000016066         mov        r11, qword [rsp+24]
000000000001606b         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
000000000001606e         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
0000000000016073         mov        rdi, r11                                    ; argument #1 for method peek_token_bracket
0000000000016076         call       peek_token_bracket                          ; peek_token_bracket
000000000001607b         mov        ebx, eax
000000000001607d         movzx      eax, byte [r11+8]
0000000000016082         cmp        al, 0x2
0000000000016084         je         loc_16319

000000000001608a         mov        byte [rsp+87], 0x1
000000000001608f         jmp        loc_15b86

                     loc_16094:
0000000000016094         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_15b10+120
0000000000016099         mov        byte [rax+8], 0x1
000000000001609d         jmp        loc_15b8e

                     loc_160a2:
00000000000160a2         mov        dword [r15], 0x6                            ; CODE XREF=sub_159d0+157
00000000000160a9         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
00000000000160ac         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
00000000000160ae         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
00000000000160b0         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
00000000000160b3         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
00000000000160b6         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000160bb         mov        dword [r15], 0x9
00000000000160c2         mov        rbp, rax
00000000000160c5         jmp        loc_15a96

                     loc_160ca:
00000000000160ca         mov        r8, qword [rsp+24]                          ; argument #5 for method create_token_tree.isra.16, CODE XREF=sub_159d0+140
00000000000160cf         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
00000000000160d1         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
00000000000160d3         mov        rsi, r12                                    ; argument #2 for method create_token_tree.isra.16
00000000000160d6         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
00000000000160d9         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000160de         test       rax, rax
00000000000160e1         mov        qword [rsp+40], rax
00000000000160e6         jne        loc_15af3

00000000000160ec         jmp        sub_15b10+872
                        ; endp

                     loc_160f1:
00000000000160f1         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_15b10+326, sub_15b10+1095, sub_15b10+1582
00000000000160f6         mov        dword [rax], 0x7
00000000000160fc         jmp        loc_15f88
0000000000016101         mov        qword [rsp+0x28], r15                       ; CODE XREF=sub_15b10+743, sub_15b10+753, sub_15b10+767
0000000000016106         jmp        sub_153a0+268

                     loc_1610b:
000000000001610b         mov        rdx, qword [rsp+64]                         ; CODE XREF=sub_15b10+278, sub_15b10+1646
0000000000016110         mov        dword [rdx], eax
0000000000016112         jmp        loc_15f88

                     loc_16117:
0000000000016117         movsxd     rax, ebx                                    ; CODE XREF=sub_15b10+335
000000000001611a         mov        r11, qword [rsp+32]
000000000001611f         add        qword [r14+0x48], rax
0000000000016123         mov        r10, qword [rsp+96]
0000000000016128         mov        rdx, r11                                    ; argument #3 for method peek_token_bracket
000000000001612b         mov        rdi, r10                                    ; argument #1 for method peek_token_bracket
000000000001612e         call       peek_token_bracket                          ; peek_token_bracket
0000000000016133         movzx      edx, byte [rsp+200]
000000000001613b         cmp        dl, 0x2
000000000001613e         je         loc_160f1

0000000000016140         cmp        dl, 0x15
0000000000016143         je         loc_16357

0000000000016149         mov        rdx, qword [rsp+104]
000000000001614e         lea        rdi, qword [rsp+176]                        ; argument #1 for method parse_bracket_element.constprop.37
0000000000016156         mov        r9d, 0x1                                    ; argument #6 for method parse_bracket_element.constprop.37
000000000001615c         mov        r8, r11                                     ; argument #5 for method parse_bracket_element.constprop.37
000000000001615f         mov        ecx, eax                                    ; argument #4 for method parse_bracket_element.constprop.37
0000000000016161         mov        dword [rsp+176], 0x3
000000000001616c         mov        qword [rsp+184], rdx
0000000000016174         mov        rdx, r10                                    ; argument #3 for method parse_bracket_element.constprop.37
0000000000016177         call       parse_bracket_element.constprop.37          ; parse_bracket_element.constprop.37
000000000001617c         test       eax, eax
000000000001617e         jne        loc_1610b

0000000000016180         mov        rdx, qword [rsp+32]                         ; argument #3 for method peek_token_bracket
0000000000016185         mov        rsi, r14                                    ; argument #2 for method peek_token_bracket
0000000000016188         mov        rdi, r15                                    ; argument #1 for method peek_token_bracket
000000000001618b         call       peek_token_bracket                          ; peek_token_bracket
0000000000016190         movsxd     rbx, eax
0000000000016193         mov        rax, qword [rsp+16]
0000000000016198         mov        esi, dword [rsp+160]
000000000001619f         mov        r9d, 0x0
00000000000161a5         cmp        dword [rax+0xb4], 0x1
00000000000161ac         lea        eax, dword [rsi-2]
00000000000161af         cmovg      r9, r13
00000000000161b3         and        eax, 0xfffffffd
00000000000161b6         je         loc_16629

00000000000161bc         mov        r10d, dword [rsp+176]
00000000000161c4         lea        eax, dword [r10-2]
00000000000161c8         and        eax, 0xfffffffd
00000000000161cb         je         loc_16629

00000000000161d1         cmp        esi, 0x3
00000000000161d4         sete       r11b
00000000000161d8         je         loc_1666d

                     loc_161de:
00000000000161de         cmp        r10d, 0x3                                   ; CODE XREF=sub_15b10+2939
00000000000161e2         je         loc_16639

                     loc_161e8:
00000000000161e8         test       esi, esi                                    ; CODE XREF=sub_15b10+2887
00000000000161ea         jne        loc_16559

00000000000161f0         movzx      edx, byte [rsp+168]

                     loc_161f8:
00000000000161f8         test       r10d, r10d                                  ; CODE XREF=sub_15b10+2638, sub_15b10+2655
00000000000161fb         jne        loc_1653d

0000000000016201         movzx      r8d, byte [rsp+184]

                     loc_1620a:
000000000001620a         test       esi, esi                                    ; CODE XREF=sub_15b10+3278
000000000001620c         je         loc_164f6

0000000000016212         test       r11b, r11b
0000000000016215         jne        loc_164f6

000000000001621b         test       r9, r9
000000000001621e         mov        edx, dword [rsp+168]
0000000000016225         je         loc_16244

                     loc_16227:
0000000000016227         mov        edi, r8d                                    ; argument "__c" for method j_btowc, CODE XREF=sub_15b10+2578, sub_15b10+2586
000000000001622a         mov        dword [rsp+120], edx
000000000001622e         mov        qword [rsp+112], r9
0000000000016233         call       j_btowc                                     ; btowc
0000000000016238         mov        r9, qword [rsp+112]
000000000001623d         mov        edx, dword [rsp+120]
0000000000016241         mov        r8d, eax

                     loc_16244:
0000000000016244         cmp        edx, 0xffffffff                             ; CODE XREF=sub_15b10+1813, sub_15b10+2600
0000000000016247         je         loc_1665d

000000000001624d         cmp        r8d, 0xffffffff
0000000000016251         je         loc_1665d

                     loc_16257:
0000000000016257         test       qword [rsp+32], 0x10000                     ; CODE XREF=sub_15b10+2663, sub_15b10+2675
0000000000016260         je         loc_1626b

0000000000016262         cmp        r8d, edx
0000000000016265         jb         loc_16629

                     loc_1626b:
000000000001626b         test       r9, r9                                      ; CODE XREF=sub_15b10+1872
000000000001626e         je         loc_16296

0000000000016270         mov        rax, qword [r9+0x40]
0000000000016274         cmp        rax, qword [rsp+72]
0000000000016279         mov        rcx, qword [r9+8]
000000000001627d         je         loc_16693

                     loc_16283:
0000000000016283         mov        dword [rcx+rax*4], edx                      ; CODE XREF=sub_15b10+3088
0000000000016286         mov        rcx, qword [r9+0x10]
000000000001628a         lea        rsi, qword [rax+1]
000000000001628e         mov        qword [r9+0x40], rsi
0000000000016292         mov        dword [rcx+rax*4], r8d

                     loc_16296:
0000000000016296         xor        eax, eax                                    ; CODE XREF=sub_15b10+1886
0000000000016298         mov        edi, 0x1

                     loc_1629d:
000000000001629d         cmp        edx, eax                                    ; CODE XREF=sub_15b10+1971
000000000001629f         mov        ecx, eax
00000000000162a1         ja         loc_162b9

00000000000162a3         cmp        r8d, eax
00000000000162a6         jb         loc_162b9

00000000000162a8         mov        rsi, rax
00000000000162ab         mov        r11, rdi
00000000000162ae         sar        rsi, 0x6
00000000000162b2         shl        r11, cl
00000000000162b5         or         qword [r12+rsi*8], r11

                     loc_162b9:
00000000000162b9         add        rax, 0x1                                    ; CODE XREF=sub_15b10+1937, sub_15b10+1942
00000000000162bd         cmp        rax, 0x100
00000000000162c3         jne        loc_1629d

00000000000162c5         mov        rax, qword [rsp+64]
00000000000162ca         mov        dword [rax], 0x0
00000000000162d0         jmp        loc_15f50
00000000000162d5         mov        rbx, qword [rsp+0x18]                       ; CODE XREF=sub_153a0+204
00000000000162da         mov        rdx, rax
00000000000162dd         mov        rsi, r14
00000000000162e0         mov        qword [rsp], r8
00000000000162e4         mov        r15, rax
00000000000162e7         mov        rdi, rbx
00000000000162ea         call       peek_token                                  ; peek_token
00000000000162ef         cdqe
00000000000162f1         add        qword [r14+0x48], rax
00000000000162f5         mov        r9, qword [rsp+0x40]
00000000000162fa         mov        r8, qword [rsp]
00000000000162fe         mov        rcx, r15
0000000000016301         mov        rdx, rbx
0000000000016304         mov        rsi, rbp
0000000000016307         mov        rdi, r14
000000000001630a         call       parse_expression                            ; parse_expression
000000000001630f         mov        qword [rsp+0x28], rax
0000000000016314         jmp        sub_153a0+128

                     loc_16319:
0000000000016319         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_15b10+99, sub_15b10+1396
000000000001631e         mov        dword [rax], 0x2
0000000000016324         jmp        loc_15f88

                     loc_16329:
0000000000016329         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=sub_15b10+62
000000000001632c         call       j_free                                      ; free
0000000000016331         mov        rdi, r13                                    ; argument "__ptr" for method j_free
0000000000016334         call       j_free                                      ; free
0000000000016339         jmp        sub_15b10+872
                        ; endp
000000000001633e         mov        rax, qword [rsp+0x40]                       ; CODE XREF=sub_15b10+508
0000000000016343         mov        qword [rsp+0x28], 0x0
000000000001634c         mov        dword [rax], 0x6
0000000000016352         jmp        sub_153a0+128

                     loc_16357:
0000000000016357         mov        eax, ebx                                    ; CODE XREF=sub_15b10+1587
0000000000016359         neg        eax
000000000001635b         cdqe
000000000001635d         add        qword [r14+0x48], rax
0000000000016361         mov        byte [r15+8], 0x1
0000000000016366         mov        eax, dword [rsp+160]
000000000001636d         jmp        loc_15c65

                     loc_16372:
0000000000016372         add        qword [r14+0x48], rbx                       ; CODE XREF=sub_15b10+1103
0000000000016376         cmp        byte [rsp+87], 0x0
000000000001637b         je         loc_16391

000000000001637d         lea        rdx, qword [r12+0x20]
0000000000016382         mov        rax, r12

                     loc_16385:
0000000000016385         not        qword [rax]                                 ; CODE XREF=sub_15b10+2175
0000000000016388         add        rax, 0x8
000000000001638c         cmp        rdx, rax
000000000001638f         jne        loc_16385

                     loc_16391:
0000000000016391         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_15b10+2155
0000000000016396         mov        edx, dword [rax+0xb4]
000000000001639c         cmp        edx, 0x1
000000000001639f         jle        loc_163b9

00000000000163a1         mov        rcx, qword [rax+0x78]
00000000000163a5         xor        eax, eax

                     loc_163a7:
00000000000163a7         mov        rsi, qword [rcx+rax]                        ; CODE XREF=sub_15b10+2215
00000000000163ab         and        qword [r12+rax], rsi
00000000000163af         add        rax, 0x8
00000000000163b3         cmp        rax, 0x20
00000000000163b7         jne        loc_163a7

                     loc_163b9:
00000000000163b9         cmp        qword [r13+0x28], 0x0                       ; CODE XREF=sub_15b10+2191
00000000000163be         jne        loc_16448

00000000000163c4         cmp        qword [r13+0x30], 0x0
00000000000163c9         jne        loc_16448

00000000000163cb         cmp        qword [r13+0x38], 0x0
00000000000163d0         jne        loc_16448

00000000000163d2         cmp        qword [r13+0x40], 0x0
00000000000163d7         jne        loc_16448

00000000000163d9         sub        edx, 0x1
00000000000163dc         jle        loc_163ec

00000000000163de         cmp        qword [r13+0x48], 0x0
00000000000163e3         jne        loc_16448

00000000000163e5         test       byte [r13+0x20], 0x1
00000000000163ea         jne        loc_16448

                     loc_163ec:
00000000000163ec         mov        rdi, r13                                    ; argument #1 for method free_charset, CODE XREF=sub_15b10+2252
00000000000163ef         call       free_charset                                ; free_charset
00000000000163f4         mov        rax, qword [rsp+16]
00000000000163f9         lea        r8, qword [rsp+176]                         ; argument #5 for method create_token_tree.isra.16
0000000000016401         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000016403         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000016405         mov        byte [rsp+184], 0x3
000000000001640d         mov        qword [rsp+176], r12
0000000000016415         lea        rsi, qword [rax+0x80]                       ; argument #2 for method create_token_tree.isra.16
000000000001641c         lea        rdi, qword [rax+0x70]                       ; argument #1 for method create_token_tree.isra.16
0000000000016420         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000016425         test       rax, rax
0000000000016428         mov        qword [rsp+40], rax
000000000001642d         jne        sub_153a0+268

                     loc_16433:
0000000000016433         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_15b10+2444, sub_15b10+2512, sub_15b10+3170, sub_15b10+3225
0000000000016438         mov        dword [rax], 0xc
000000000001643e         jmp        loc_15f88
0000000000016443         nop        dword [rax+rax]

                     loc_16448:
0000000000016448         mov        rax, qword [rsp+16]                         ; CODE XREF=sub_15b10+2222, sub_15b10+2233, sub_15b10+2240, sub_15b10+2247, sub_15b10+2259, sub_15b10+2266
000000000001644d         lea        r15, qword [rsp+176]
0000000000016455         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000016457         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16
0000000000016459         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
000000000001645c         or         byte [rax+0xb0], 0x2
0000000000016463         lea        rbx, qword [rax+0x70]
0000000000016467         lea        rbp, qword [rax+0x80]
000000000001646e         mov        byte [rsp+184], 0x6
0000000000016476         mov        qword [rsp+176], r13
000000000001647e         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
0000000000016481         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
0000000000016484         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000016489         mov        rdi, rax
000000000001648c         mov        qword [rsp+40], rax
0000000000016491         lea        rdx, qword [r12+0x20]
0000000000016496         test       rdi, rdi
0000000000016499         mov        rax, r12
000000000001649c         je         loc_16433

                     loc_1649e:
000000000001649e         cmp        qword [rax], 0x0                            ; CODE XREF=sub_15b10+2463
00000000000164a2         jne        loc_1674d

00000000000164a8         add        rax, 0x8
00000000000164ac         cmp        rdx, rax
00000000000164af         jne        loc_1649e

00000000000164b1         mov        rdi, r12                                    ; argument "__ptr" for method j_free
00000000000164b4         call       j_free                                      ; free
00000000000164b9         jmp        sub_153a0+268
                        ; endp

                     loc_164be:
00000000000164be         mov        rdx, qword [rsp+48]                         ; CODE XREF=sub_15b10+1204
00000000000164c3         lea        rdi, qword [rdx+rdx+1]
00000000000164c8         lea        rsi, qword [rdi*4]                          ; argument "__size" for method j_realloc
00000000000164d0         mov        qword [rsp+48], rdi
00000000000164d5         mov        rdi, rax                                    ; argument "__ptr" for method j_realloc
00000000000164d8         call       j_realloc                                   ; realloc
00000000000164dd         test       rax, rax
00000000000164e0         je         loc_16433

00000000000164e6         mov        qword [r13], rax
00000000000164ea         mov        rdx, qword [r13+0x28]
00000000000164ee         jmp        loc_15fca

                     loc_164f3:
00000000000164f3         xor        r8d, r8d                                    ; CODE XREF=sub_15b10+2617, sub_15b10+2622

                     loc_164f6:
00000000000164f6         test       r9, r9                                      ; CODE XREF=sub_15b10+1788, sub_15b10+1797
00000000000164f9         je         loc_16574

00000000000164fb         mov        edi, edx                                    ; argument "__c" for method j_btowc
00000000000164fd         mov        dword [rsp+120], r8d
0000000000016502         mov        qword [rsp+112], r9
0000000000016507         call       j_btowc                                     ; btowc
000000000001650c         mov        edx, eax
000000000001650e         mov        eax, dword [rsp+176]
0000000000016515         mov        r9, qword [rsp+112]
000000000001651a         mov        r8d, dword [rsp+120]
000000000001651f         cmp        eax, 0x3
0000000000016522         je         loc_16227

0000000000016528         test       eax, eax
000000000001652a         je         loc_16227

                     loc_16530:
0000000000016530         mov        r8d, dword [rsp+184]                        ; CODE XREF=sub_15b10+2631, sub_15b10+2673
0000000000016538         jmp        loc_16244

                     loc_1653d:
000000000001653d         cmp        r10d, 0x3                                   ; CODE XREF=sub_15b10+1771
0000000000016541         je         loc_167d2

0000000000016547         test       esi, esi
0000000000016549         je         loc_164f3

000000000001654b         test       r11b, r11b
000000000001654e         jne        loc_164f3

0000000000016550         mov        edx, dword [rsp+168]
0000000000016557         jmp        loc_16530

                     loc_16559:
0000000000016559         xor        edx, edx                                    ; CODE XREF=sub_15b10+1754
000000000001655b         cmp        esi, 0x3
000000000001655e         jne        loc_161f8

0000000000016564         mov        rax, qword [rsp+168]
000000000001656c         movzx      edx, byte [rax]
000000000001656f         jmp        loc_161f8

                     loc_16574:
0000000000016574         test       r10d, r10d                                  ; CODE XREF=sub_15b10+2537
0000000000016577         je         loc_16257

000000000001657d         cmp        r10d, 0x3
0000000000016581         jne        loc_16530

0000000000016583         jmp        loc_16257

                     loc_16588:
0000000000016588         mov        ebx, 0x80                                   ; CODE XREF=sub_159d0+89
000000000001658d         mov        r12d, 0x2

                     loc_16593:
0000000000016593         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=sub_15b10+2808
0000000000016598         movsxd     rdx, ebx
000000000001659b         movsxd     r9, r12d
000000000001659e         mov        r8d, 0x1
00000000000165a4         add        rdx, rdx
00000000000165a7         add        rdx, qword [rax]
00000000000165aa         mov        rax, qword [rsp+16]
00000000000165af         lea        rdi, qword [rax+r9*8]

                     loc_165b3:
00000000000165b3         xor        eax, eax                                    ; CODE XREF=sub_15b10+2796
00000000000165b5         jmp        loc_165d2
00000000000165b7         nop        word [rax+rax]

                     loc_165c0:
00000000000165c0         lea        esi, dword [rbx+rax]                        ; CODE XREF=sub_15b10+2760
00000000000165c3         cmp        esi, 0x5f
00000000000165c6         je         loc_165da

                     loc_165c8:
00000000000165c8         add        rax, 0x1                                    ; CODE XREF=sub_15b10+2775
00000000000165cc         cmp        rax, 0x40
00000000000165d0         je         loc_165e9

                     loc_165d2:
00000000000165d2         test       byte [rdx+rax*2], 0x8                       ; CODE XREF=sub_15b10+2725
00000000000165d6         mov        ecx, eax
00000000000165d8         je         loc_165c0

                     loc_165da:
00000000000165da         mov        rsi, r8                                     ; CODE XREF=sub_15b10+2742
00000000000165dd         shl        rsi, cl
00000000000165e0         or         qword [rdi+0xb8], rsi
00000000000165e7         jmp        loc_165c8

                     loc_165e9:
00000000000165e9         add        r9, 0x1                                     ; CODE XREF=sub_15b10+2752
00000000000165ed         add        ebx, 0x40
00000000000165f0         sub        rdx, 0xffffffffffffff80
00000000000165f4         add        rdi, 0x8
00000000000165f8         cmp        r9d, 0x3
00000000000165fc         jle        loc_165b3

00000000000165fe         jmp        loc_15a41

                     loc_16603:
0000000000016603         xor        ebx, ebx                                    ; CODE XREF=sub_159d0+47
0000000000016605         xor        r12d, r12d
0000000000016608         jmp        loc_16593

                     loc_1660a:
000000000001660a         lea        rcx, qword [__PRETTY_FUNCTION__.7327]       ; argument "__function" for method j___assert_fail, "parse_bracket_exp", CODE XREF=sub_15b10+344
0000000000016611         lea        rsi, qword [aCoreutils831li_1c6f0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
0000000000016618         lea        rdi, qword [aItercurwc0+16]                 ; argument "__assertion" for method j___assert_fail, 0x1bcc8
000000000001661f         mov        edx, 0xced                                  ; argument "__line" for method j___assert_fail
0000000000016624         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_16629:
0000000000016629         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_15b10+1702, sub_15b10+1723, sub_15b10+1877
000000000001662e         mov        dword [rax], 0xb
0000000000016634         jmp        loc_15f88

                     loc_16639:
0000000000016639         mov        rdi, qword [rsp+184]                        ; CODE XREF=sub_15b10+1746
0000000000016641         xor        eax, eax
0000000000016643         or         rcx, 0xffffffffffffffff
0000000000016647         repne scasb al, byte [rdi]
0000000000016649         mov        rax, rcx
000000000001664c         not        rax
000000000001664f         sub        rax, 0x1
0000000000016653         cmp        rax, 0x1
0000000000016657         jbe        loc_161e8

                     loc_1665d:
000000000001665d         mov        rax, qword [rsp+64]                         ; CODE XREF=sub_15b10+1847, sub_15b10+1857, sub_15b10+2945
0000000000016662         mov        dword [rax], 0x3
0000000000016668         jmp        loc_15f88

                     loc_1666d:
000000000001666d         mov        rdi, qword [rsp+168]                        ; CODE XREF=sub_15b10+1736
0000000000016675         xor        eax, eax
0000000000016677         or         rcx, 0xffffffffffffffff
000000000001667b         repne scasb al, byte [rdi]
000000000001667d         mov        rax, rcx
0000000000016680         not        rax
0000000000016683         sub        rax, 0x1
0000000000016687         cmp        rax, 0x1
000000000001668b         jbe        loc_161de

0000000000016691         jmp        loc_1665d

                     loc_16693:
0000000000016693         mov        rax, qword [rsp+72]                         ; CODE XREF=sub_15b10+1901
0000000000016698         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000001669b         mov        dword [rsp+140], r8d
00000000000166a3         mov        dword [rsp+136], edx
00000000000166aa         mov        qword [rsp+112], r9
00000000000166af         add        rax, rax
00000000000166b2         add        rax, 0x1
00000000000166b6         lea        r10, qword [rax*4]
00000000000166be         mov        qword [rsp+72], rax
00000000000166c3         mov        rsi, r10                                    ; argument "__size" for method j_realloc
00000000000166c6         mov        qword [rsp+128], r10
00000000000166ce         call       j_realloc                                   ; realloc
00000000000166d3         mov        r9, qword [rsp+112]
00000000000166d8         mov        r10, qword [rsp+128]
00000000000166e0         mov        qword [rsp+120], rax
00000000000166e5         mov        rdi, qword [r9+0x10]                        ; argument "__ptr" for method j_realloc
00000000000166e9         mov        rsi, r10                                    ; argument "__size" for method j_realloc
00000000000166ec         call       j_realloc                                   ; realloc
00000000000166f1         mov        rcx, qword [rsp+120]
00000000000166f6         test       rcx, rcx
00000000000166f9         je         loc_16725

00000000000166fb         test       rax, rax
00000000000166fe         mov        r9, qword [rsp+112]
0000000000016703         mov        edx, dword [rsp+136]
000000000001670a         mov        r8d, dword [rsp+140]
0000000000016712         je         loc_16725

0000000000016714         mov        qword [r9+0x10], rax
0000000000016718         mov        qword [r9+8], rcx
000000000001671c         mov        rax, qword [r9+0x40]
0000000000016720         jmp        loc_16283

                     loc_16725:
0000000000016725         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=sub_15b10+3049, sub_15b10+3074
0000000000016728         mov        qword [rsp+0], rax
000000000001672c         call       j_free                                      ; free
0000000000016731         mov        rax, qword [rsp+0]
0000000000016735         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000016738         call       j_free                                      ; free
000000000001673d         mov        rax, qword [rsp+64]
0000000000016742         mov        dword [rax], 0xc
0000000000016748         jmp        loc_15f88

                     loc_1674d:
000000000001674d         xor        ecx, ecx                                    ; argument #4 for method create_token_tree.isra.16, CODE XREF=sub_15b10+2450
000000000001674f         xor        edx, edx                                    ; argument #3 for method create_token_tree.isra.16
0000000000016751         mov        r8, r15                                     ; argument #5 for method create_token_tree.isra.16
0000000000016754         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
0000000000016757         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
000000000001675a         mov        byte [rsp+184], 0x3
0000000000016762         mov        qword [rsp+176], r12
000000000001676a         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001676f         test       rax, rax
0000000000016772         je         loc_16433

0000000000016778         mov        rcx, qword [rsp+40]                         ; argument #4 for method create_token_tree.isra.16
000000000001677d         lea        r8, qword [rsp+192]                         ; argument #5 for method create_token_tree.isra.16
0000000000016785         mov        rdx, rax                                    ; argument #3 for method create_token_tree.isra.16
0000000000016788         mov        rsi, rbp                                    ; argument #2 for method create_token_tree.isra.16
000000000001678b         mov        rdi, rbx                                    ; argument #1 for method create_token_tree.isra.16
000000000001678e         mov        byte [rsp+200], 0xa
0000000000016796         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
000000000001679b         test       rax, rax
000000000001679e         mov        qword [rsp+40], rax
00000000000167a3         jne        sub_153a0+268

00000000000167a9         jmp        loc_16433

                     loc_167ae:
00000000000167ae         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_153a0+150
                        ; endp

                     loc_167b3:
00000000000167b3         mov        rax, qword [rsp+24]                         ; CODE XREF=sub_153a0+1238
00000000000167b8         cmp        byte [rax+8], 0x2
00000000000167bc         jne        loc_159b0

00000000000167c2         mov        rax, qword [rsp+64]
00000000000167c7         mov        dword [rax], 0x9
00000000000167cd         jmp        loc_159bb

                     loc_167d2:
00000000000167d2         mov        rax, qword [rsp+184]                        ; CODE XREF=sub_15b10+2609
00000000000167da         movzx      r8d, byte [rax]
00000000000167de         jmp        loc_1620a
00000000000167e3         nop        dword [rax]                                 ; End of unwind block (FDE at 0x1f830)
00000000000167e6         nop        word [cs:rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     parse_branch:
00000000000167f0         push       r15                                         ; Begin of unwind block (FDE at 0x1f890), CODE XREF=parse_reg_exp+67, parse_reg_exp+174
00000000000167f2         push       r14
00000000000167f4         mov        r15, rcx
00000000000167f7         push       r13
00000000000167f9         push       r12
00000000000167fb         mov        r13, rsi
00000000000167fe         push       rbp
00000000000167ff         push       rbx
0000000000016800         mov        rbx, r9
0000000000016803         mov        rbp, rdx
0000000000016806         mov        r12, r8
0000000000016809         sub        rsp, 0x48
000000000001680d         mov        rax, qword [fs:0x28]
0000000000016816         mov        qword [rsp+0x78+var_40], rax
000000000001681b         xor        eax, eax
000000000001681d         mov        rax, qword [rsi]
0000000000016820         mov        qword [rsp+0x78+var_78], rdi
0000000000016824         mov        qword [rsp+0x78+var_68], rax
0000000000016829         call       parse_expression                            ; parse_expression
000000000001682e         mov        edx, dword [rbx]
0000000000016830         mov        r14, rax
0000000000016833         test       edx, edx
0000000000016835         je         loc_16840

0000000000016837         test       rax, rax
000000000001683a         je         loc_1693a

                     loc_16840:
0000000000016840         lea        rax, qword [rsp+0x78+var_58]                ; CODE XREF=parse_branch+69
0000000000016845         mov        qword [rsp+0x78+var_60], rax
000000000001684a         nop        word [rax+rax]

                     loc_16850:
0000000000016850         movzx      eax, byte [rbp+8]                           ; CODE XREF=parse_branch+303
0000000000016854         mov        edx, eax
0000000000016856         and        edx, 0xfffffff7
0000000000016859         cmp        dl, 0x2
000000000001685c         je         loc_168f0

                     loc_16862:
0000000000016862         cmp        al, 0x9                                     ; CODE XREF=parse_branch+246
0000000000016864         jne        loc_1686f

0000000000016866         test       r12, r12
0000000000016869         jne        loc_168f0

                     loc_1686f:
000000000001686f         mov        rdi, qword [rsp+0x78+var_78]                ; CODE XREF=parse_branch+116
0000000000016873         mov        r9, rbx
0000000000016876         mov        r8, r12
0000000000016879         mov        rcx, r15
000000000001687c         mov        rdx, rbp
000000000001687f         mov        rsi, r13
0000000000016882         call       parse_expression                            ; parse_expression
0000000000016887         mov        r9, rax
000000000001688a         mov        eax, dword [rbx]
000000000001688c         test       eax, eax
000000000001688e         je         loc_16899

0000000000016890         test       r9, r9
0000000000016893         je         loc_16924

                     loc_16899:
0000000000016899         test       r14, r14                                    ; CODE XREF=parse_branch+158
000000000001689c         je         loc_16918

000000000001689e         test       r9, r9
00000000000168a1         je         loc_16918

00000000000168a3         mov        rax, qword [rsp+0x78+var_68]
00000000000168a8         mov        r8, qword [rsp+0x78+var_60]
00000000000168ad         mov        rcx, r9
00000000000168b0         mov        rdx, r14
00000000000168b3         mov        qword [rsp+0x78+var_70], r9
00000000000168b8         mov        byte [rsp+0x78+var_50], 0x10
00000000000168bd         lea        rsi, qword [rax+0x80]
00000000000168c4         lea        rdi, qword [rax+0x70]
00000000000168c8         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
00000000000168cd         test       rax, rax
00000000000168d0         mov        r9, qword [rsp+0x78+var_70]
00000000000168d5         je         loc_16940

00000000000168d7         mov        r14, rax
00000000000168da         movzx      eax, byte [rbp+8]
00000000000168de         mov        edx, eax
00000000000168e0         and        edx, 0xfffffff7
00000000000168e3         cmp        dl, 0x2
00000000000168e6         jne        loc_16862

00000000000168ec         nop        dword [rax]

                     loc_168f0:
00000000000168f0         mov        rcx, qword [rsp+0x78+var_40]                ; CODE XREF=parse_branch+108, parse_branch+121, parse_branch+333, parse_branch+379
00000000000168f5         xor        rcx, qword [fs:0x28]
00000000000168fe         mov        rax, r14
0000000000016901         jne        loc_1696d

0000000000016903         add        rsp, 0x48
0000000000016907         pop        rbx
0000000000016908         pop        rbp
0000000000016909         pop        r12
000000000001690b         pop        r13
000000000001690d         pop        r14
000000000001690f         pop        r15
0000000000016911         ret
                        ; endp
0000000000016912         align      8

                     loc_16918:
0000000000016918         test       r14, r14                                    ; CODE XREF=parse_branch+172, parse_branch+177
000000000001691b         cmove      r14, r9
000000000001691f         jmp        loc_16850

                     loc_16924:
0000000000016924         test       r14, r14                                    ; CODE XREF=parse_branch+163
0000000000016927         je         loc_1693a

0000000000016929         lea        rsi, qword [free_tree]                      ; free_tree
0000000000016930         xor        edx, edx
0000000000016932         mov        rdi, r14
0000000000016935         call       postorder                                   ; postorder

                     loc_1693a:
000000000001693a         xor        r14d, r14d                                  ; CODE XREF=parse_branch+74, parse_branch+311
000000000001693d         jmp        loc_168f0
000000000001693f         align      64

                     loc_16940:
0000000000016940         lea        rsi, qword [free_tree]                      ; free_tree, CODE XREF=parse_branch+229
0000000000016947         mov        rdi, r9
000000000001694a         xor        edx, edx
000000000001694c         call       postorder                                   ; postorder
0000000000016951         lea        rsi, qword [free_tree]                      ; free_tree
0000000000016958         mov        rdi, r14
000000000001695b         xor        edx, edx
000000000001695d         xor        r14d, r14d
0000000000016960         call       postorder                                   ; postorder
0000000000016965         mov        dword [rbx], 0xc
000000000001696b         jmp        loc_168f0

                     loc_1696d:
000000000001696d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_branch+273
                        ; endp
0000000000016972         align      128                                         ; End of unwind block (FDE at 0x1f890)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_50: int8_t, -80
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128


                     parse_reg_exp:
0000000000016980         push       r15                                         ; Begin of unwind block (FDE at 0x1f8dc), CODE XREF=sub_153a0+47, re_compile_internal+1203
0000000000016982         push       r14
0000000000016984         mov        r14, rcx
0000000000016987         push       r13
0000000000016989         push       r12
000000000001698b         mov        r13, r9
000000000001698e         push       rbp
000000000001698f         push       rbx
0000000000016990         mov        rbp, rdx
0000000000016993         mov        r12, rdi
0000000000016996         sub        rsp, 0x58
000000000001699a         mov        rbx, qword [rsi]
000000000001699d         mov        rax, qword [fs:0x28]
00000000000169a6         mov        qword [rsp+0x88+var_40], rax
00000000000169ab         xor        eax, eax
00000000000169ad         mov        qword [rsp+0x88+var_60], rsi
00000000000169b2         mov        qword [rsp+0x88+var_78], r8
00000000000169b7         mov        rax, qword [rbx+0xa8]
00000000000169be         mov        qword [rsp+0x88+var_68], rax
00000000000169c3         call       parse_branch                                ; parse_branch
00000000000169c8         mov        edx, dword [r13]
00000000000169cc         mov        r15, rax
00000000000169cf         test       edx, edx
00000000000169d1         je         loc_169dc

00000000000169d3         test       rax, rax
00000000000169d6         je         loc_16ac2

                     loc_169dc:
00000000000169dc         lea        rax, qword [rsp+0x88+var_58]                ; CODE XREF=parse_reg_exp+81
00000000000169e1         mov        qword [rsp+0x88+var_80], rax
00000000000169e6         jmp        loc_16a74
00000000000169eb         align      16

                     loc_169f0:
00000000000169f0         cmp        al, 0x9                                     ; CODE XREF=parse_reg_exp+290
00000000000169f2         jne        loc_16a00

00000000000169f4         cmp        qword [rsp+0x88+var_78], 0x0
00000000000169fa         jne        loc_16aa8

                     loc_16a00:
0000000000016a00         mov        rax, qword [rbx+0xa8]                       ; CODE XREF=parse_reg_exp+114
0000000000016a07         mov        r8, qword [rsp+0x88+var_78]
0000000000016a0c         mov        rcx, r14
0000000000016a0f         mov        rsi, qword [rsp+0x88+var_60]
0000000000016a14         mov        r9, r13
0000000000016a17         mov        rdx, rbp
0000000000016a1a         mov        rdi, r12
0000000000016a1d         mov        qword [rsp+0x88+var_70], rax
0000000000016a22         mov        rax, qword [rsp+0x88+var_68]
0000000000016a27         mov        qword [rbx+0xa8], rax
0000000000016a2e         call       parse_branch                                ; parse_branch
0000000000016a33         mov        rcx, rax
0000000000016a36         mov        eax, dword [r13]
0000000000016a3a         test       eax, eax
0000000000016a3c         je         loc_16a43

0000000000016a3e         test       rcx, rcx
0000000000016a41         je         loc_16aac

                     loc_16a43:
0000000000016a43         mov        rax, qword [rsp+0x88+var_70]                ; CODE XREF=parse_reg_exp+188
0000000000016a48         or         qword [rbx+0xa8], rax

                     loc_16a4f:
0000000000016a4f         mov        r8, qword [rsp+0x88+var_80]                 ; CODE XREF=parse_reg_exp+298
0000000000016a54         lea        rsi, qword [rbx+0x80]
0000000000016a5b         lea        rdi, qword [rbx+0x70]
0000000000016a5f         mov        rdx, r15
0000000000016a62         mov        byte [rsp+0x88+var_50], 0xa
0000000000016a67         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000016a6c         test       rax, rax
0000000000016a6f         mov        r15, rax
0000000000016a72         je         loc_16af0

                     loc_16a74:
0000000000016a74         cmp        byte [rbp+8], 0xa                           ; CODE XREF=parse_reg_exp+102
0000000000016a78         jne        loc_16ac8

0000000000016a7a         mov        rdx, r14
0000000000016a7d         mov        rsi, r12
0000000000016a80         mov        rdi, rbp
0000000000016a83         or         rdx, 0x800000
0000000000016a8a         call       peek_token                                  ; peek_token
0000000000016a8f         cdqe
0000000000016a91         add        qword [r12+0x48], rax
0000000000016a96         movzx      eax, byte [rbp+8]
0000000000016a9a         mov        edx, eax
0000000000016a9c         and        edx, 0xfffffff7
0000000000016a9f         cmp        dl, 0x2
0000000000016aa2         jne        loc_169f0

                     loc_16aa8:
0000000000016aa8         xor        ecx, ecx                                    ; CODE XREF=parse_reg_exp+122
0000000000016aaa         jmp        loc_16a4f

                     loc_16aac:
0000000000016aac         test       r15, r15                                    ; CODE XREF=parse_reg_exp+193
0000000000016aaf         je         loc_16ac2

0000000000016ab1         lea        rsi, qword [free_tree]                      ; free_tree
0000000000016ab8         xor        edx, edx
0000000000016aba         mov        rdi, r15
0000000000016abd         call       postorder                                   ; postorder

                     loc_16ac2:
0000000000016ac2         xor        r15d, r15d                                  ; CODE XREF=parse_reg_exp+86, parse_reg_exp+303
0000000000016ac5         nop        dword [rax]

                     loc_16ac8:
0000000000016ac8         mov        rcx, qword [rsp+0x88+var_40]                ; CODE XREF=parse_reg_exp+248, parse_reg_exp+376
0000000000016acd         xor        rcx, qword [fs:0x28]
0000000000016ad6         mov        rax, r15
0000000000016ad9         jne        loc_16afa

0000000000016adb         add        rsp, 0x58
0000000000016adf         pop        rbx
0000000000016ae0         pop        rbp
0000000000016ae1         pop        r12
0000000000016ae3         pop        r13
0000000000016ae5         pop        r14
0000000000016ae7         pop        r15
0000000000016ae9         ret
                        ; endp
0000000000016aea         align      16

                     loc_16af0:
0000000000016af0         mov        dword [r13], 0xc                            ; CODE XREF=parse_reg_exp+242
0000000000016af8         jmp        loc_16ac8

                     loc_16afa:
0000000000016afa         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=parse_reg_exp+345
                        ; endp
0000000000016aff         align      256                                         ; End of unwind block (FDE at 0x1f8dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int32_t, -72
        ;    var_4D: int8_t, -77
        ;    var_4E: int8_t, -78
        ;    var_4F: int8_t, -79
        ;    var_50: int8_t, -80
        ;    var_60: int64_t, -96
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int8_t, -248
        ;    var_108: int32_t, -264
        ;    var_10C: int32_t, -268
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_150: int64_t, -336
        ;    var_158: int64_t, -344


                     re_compile_internal:
0000000000016b00         push       r15                                         ; Begin of unwind block (FDE at 0x1f92c), CODE XREF=rpl_re_compile_pattern+53, rpl_regcomp+164
0000000000016b02         push       r14
0000000000016b04         push       r13
0000000000016b06         push       r12
0000000000016b08         push       rbp
0000000000016b09         push       rbx
0000000000016b0a         sub        rsp, 0x128
0000000000016b11         mov        qword [rdi+0x18], rcx
0000000000016b15         mov        qword [rdi+0x10], 0x0
0000000000016b1d         mov        rax, qword [fs:0x28]
0000000000016b26         mov        qword [rsp+0x158+var_40], rax
0000000000016b2e         xor        eax, eax
0000000000016b30         movzx      eax, byte [rdi+0x38]
0000000000016b34         mov        qword [rsp+0x158+var_150], rdi
0000000000016b39         mov        qword [rsp+0x158+var_148], rsi
0000000000016b3e         mov        qword [rsp+0x158+var_158], rdx
0000000000016b42         mov        qword [rsp+0x158+var_140], rcx
0000000000016b47         mov        dword [rsp+0x158+var_10C], 0x0
0000000000016b4f         mov        qword [rdi+0x30], 0x0
0000000000016b57         mov        rbx, qword [rdi]
0000000000016b5a         mov        byte [rsp+0x158+var_138], al
0000000000016b5e         and        eax, 0xffffff90
0000000000016b61         cmp        qword [rdi+8], 0xe7
0000000000016b69         mov        byte [rdi+0x38], al
0000000000016b6c         jbe        loc_17966

                     loc_16b72:
0000000000016b72         lea        rdi, qword [rbx+8]                          ; CODE XREF=sub_17480+1295
0000000000016b76         mov        rax, qword [rsp+0x158+var_150]
0000000000016b7b         mov        rcx, rbx
0000000000016b7e         and        rdi, 0xfffffffffffffff8
0000000000016b82         sub        rcx, rdi
0000000000016b85         mov        qword [rax+0x10], 0xe8
0000000000016b8d         xor        eax, eax
0000000000016b8f         add        ecx, 0xe8
0000000000016b95         mov        qword [rbx], 0x0
0000000000016b9c         mov        qword [rbx+0xe0], 0x0
0000000000016ba7         shr        ecx, 0x3
0000000000016baa         rep stosq  qword [rdi], rax
0000000000016bad         movabs     rax, 0x555555555555554
0000000000016bb7         mov        dword [rbx+0x80], 0xf
0000000000016bc1         cmp        qword [rsp+0x158+var_158], rax
0000000000016bc5         ja         loc_17206

0000000000016bcb         mov        r14, qword [rsp+0x158+var_158]
0000000000016bcf         lea        rax, qword [r14+1]
0000000000016bd3         mov        rdi, rax
0000000000016bd6         mov        qword [rbx+8], rax
0000000000016bda         mov        qword [rsp+0x158+var_130], rax
0000000000016bdf         shl        rdi, 0x4                                    ; argument "__size" for method j_malloc
0000000000016be3         call       j_malloc                                    ; malloc
0000000000016be8         test       r14, r14
0000000000016beb         mov        qword [rbx], rax
0000000000016bee         je         loc_178d5

0000000000016bf4         mov        esi, 0x1
0000000000016bf9         nop        dword [rax]

                     loc_16c00:
0000000000016c00         add        rsi, rsi                                    ; CODE XREF=re_compile_internal+263
0000000000016c03         cmp        qword [rsp+0x158+var_158], rsi
0000000000016c07         jae        loc_16c00

0000000000016c09         lea        rbp, qword [rsi-1]

                     loc_16c0d:
0000000000016c0d         mov        edi, 0x18                                   ; argument "__nmemb" for method j_calloc, CODE XREF=sub_17480+1116
0000000000016c12         call       j_calloc                                    ; calloc
0000000000016c17         mov        qword [rbx+0x88], rbp
0000000000016c1e         mov        qword [rbx+0x40], rax
0000000000016c22         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000016c27         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
0000000000016c2c         mov        dword [rbx+0xb4], eax
0000000000016c32         call       j_nl_langinfo                               ; nl_langinfo
0000000000016c37         movzx      edx, byte [rax]
0000000000016c3a         and        edx, 0xffffffdf
0000000000016c3d         cmp        dl, 0x55
0000000000016c40         jne        loc_16c90

0000000000016c42         movzx      edx, byte [rax+1]
0000000000016c46         and        edx, 0xffffffdf
0000000000016c49         cmp        dl, 0x54
0000000000016c4c         jne        loc_16c90

0000000000016c4e         movzx      edx, byte [rax+2]
0000000000016c52         and        edx, 0xffffffdf
0000000000016c55         cmp        dl, 0x46
0000000000016c58         jne        loc_16c90

0000000000016c5a         xor        edx, edx
0000000000016c5c         cmp        byte [rax+3], 0x2d
0000000000016c60         lea        rdi, qword [aUtf8+4]                        ; 0x1bd04
0000000000016c67         mov        ecx, 0x2
0000000000016c6c         sete       dl
0000000000016c6f         lea        rsi, qword [rax+rdx+3]
0000000000016c74         rep  cmpsb byte [rsi], byte [rdi]
0000000000016c76         seta       al
0000000000016c79         sbb        al, 0x0
0000000000016c7b         test       al, al
0000000000016c7d         jne        loc_16c90

0000000000016c7f         or         byte [rbx+0xb0], 0x4
0000000000016c86         nop        word [cs:rax+rax]

                     loc_16c90:
0000000000016c90         movzx      eax, byte [rbx+0xb0]                        ; CODE XREF=re_compile_internal+320, re_compile_internal+332, re_compile_internal+344, re_compile_internal+381
0000000000016c97         mov        edx, eax
0000000000016c99         and        edx, 0xfffffff7
0000000000016c9c         cmp        dword [rbx+0xb4], 0x1
0000000000016ca3         mov        byte [rbx+0xb0], dl
0000000000016ca9         jle        loc_16cbe

0000000000016cab         test       al, 0x4
0000000000016cad         je         loc_17213

0000000000016cb3         lea        rax, qword [utf8_sb_map]                    ; utf8_sb_map
0000000000016cba         mov        qword [rbx+0x78], rax

                     loc_16cbe:
0000000000016cbe         cmp        qword [rbx], 0x0                            ; CODE XREF=re_compile_internal+425, re_compile_internal+1939
0000000000016cc2         je         loc_17206

0000000000016cc8         cmp        qword [rbx+0x40], 0x0
0000000000016ccd         je         loc_17206

0000000000016cd3         mov        rax, qword [rsp+0x158+var_140]
0000000000016cd8         lea        rbp, qword [rsp+0x158+var_D8]
0000000000016ce0         mov        ecx, 0x12
0000000000016ce5         mov        dword [rsp+0x158+var_10C], 0x0
0000000000016ced         lea        r8, qword [rbp+8]
0000000000016cf1         and        eax, 0x400000
0000000000016cf6         mov        qword [rsp+0x158+var_138], rax
0000000000016cfb         mov        rax, qword [rsp+0x158+var_150]
0000000000016d00         setne      dl
0000000000016d03         mov        rdi, r8
0000000000016d06         mov        rsi, qword [rax+0x28]
0000000000016d0a         xor        eax, eax
0000000000016d0c         rep stosq  qword [rdi], rax
0000000000016d0f         mov        rax, qword [rsp+0x158+var_148]
0000000000016d14         mov        rdi, qword [rsp+0x158+var_158]
0000000000016d18         test       rsi, rsi
0000000000016d1b         mov        byte [rsp+0x158+var_50], dl
0000000000016d22         mov        ecx, dword [rbx+0xb4]
0000000000016d28         setne      r12b
0000000000016d2c         mov        qword [rsp+0x158+var_60], rsi
0000000000016d34         mov        qword [rsp+0x158+var_D8], rax
0000000000016d3c         movzx      eax, byte [rbx+0xb0]
0000000000016d43         or         r12d, edx
0000000000016d46         mov        qword [rsp+0x158+var_80], rdi
0000000000016d4e         mov        qword [rsp+0x158+var_88], rdi
0000000000016d56         mov        esi, r12d
0000000000016d59         mov        byte [rsp+0x158+var_4D], r12b
0000000000016d61         mov        dword [rsp+0x158+var_48], ecx
0000000000016d68         mov        qword [rsp+0x158+var_70], rdi
0000000000016d70         mov        qword [rsp+0x158+var_78], rdi
0000000000016d78         mov        edx, eax
0000000000016d7a         shr        al, 0x3
0000000000016d7d         shr        dl, 0x2
0000000000016d80         and        eax, 0x1
0000000000016d83         and        edx, 0x1
0000000000016d86         test       rdi, rdi
0000000000016d89         mov        byte [rsp+0x158+var_4E], al
0000000000016d90         mov        byte [rsp+0x158+var_4F], dl
0000000000016d97         jne        loc_171d5

0000000000016d9d         test       sil, sil
0000000000016da0         je         loc_16daf

                     loc_16da2:
0000000000016da2         mov        rax, qword [rsp+0x158+var_D0]               ; CODE XREF=re_compile_internal+1793
0000000000016daa         mov        qword [rsp+0x158+var_148], rax

                     loc_16daf:
0000000000016daf         cmp        qword [rsp+0x158+var_138], 0x0              ; CODE XREF=re_compile_internal+672, re_compile_internal+1787
0000000000016db5         mov        rax, qword [rsp+0x158+var_148]
0000000000016dba         mov        qword [rsp+0x158+var_D0], rax
0000000000016dc2         je         loc_16ec5

0000000000016dc8         cmp        ecx, 0x1
0000000000016dcb         jle        loc_179bd

                     loc_16dd1:
0000000000016dd1         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+796
0000000000016dd4         call       build_wcs_upper_buffer                      ; build_wcs_upper_buffer
0000000000016dd9         test       eax, eax
0000000000016ddb         jne        loc_16e20

0000000000016ddd         mov        rax, qword [rsp+0x158+var_158]
0000000000016de1         cmp        rax, qword [rsp+0x158+var_A0]
0000000000016de9         jle        loc_179a0

0000000000016def         movsxd     rax, dword [rbx+0xb4]
0000000000016df6         mov        rsi, qword [rsp+0x158+var_98]
0000000000016dfe         add        rax, qword [rsp+0x158+var_A8]
0000000000016e06         cmp        rsi, rax
0000000000016e09         jg         loc_179a0

0000000000016e0f         add        rsi, rsi
0000000000016e12         mov        rdi, rbp
0000000000016e15         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
0000000000016e1a         test       eax, eax
0000000000016e1c         je         loc_16dd1

0000000000016e1e         nop

                     loc_16e20:
0000000000016e20         mov        dword [rsp+0x158+var_10C], eax              ; CODE XREF=re_compile_internal+731, re_compile_internal+1652, re_compile_internal+1679, re_compile_internal+1764, sub_17480+177, sub_17480+495
0000000000016e24         mov        rax, qword [rsp+0x158+var_150]
0000000000016e29         mov        r13, qword [rax]

                     loc_16e2c:
0000000000016e2c         mov        rdi, qword [r13+0x70]                       ; CODE XREF=sub_17480+1013, sub_17480+1378, sub_17a90+124, sub_17a90+155
0000000000016e30         test       rdi, rdi
0000000000016e33         je         loc_16e48

0000000000016e35         nop        dword [rax]

                     loc_16e38:
0000000000016e38         mov        r12, qword [rdi]                            ; CODE XREF=re_compile_internal+838
0000000000016e3b         call       j_free                                      ; free
0000000000016e40         test       r12, r12
0000000000016e43         mov        rdi, r12
0000000000016e46         jne        loc_16e38

                     loc_16e48:
0000000000016e48         mov        rdi, qword [r13+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=re_compile_internal+819
0000000000016e4c         mov        qword [r13+0x70], 0x0
0000000000016e54         mov        dword [r13+0x80], 0xf
0000000000016e5f         mov        qword [r13+0x68], 0x0
0000000000016e67         call       j_free                                      ; free
0000000000016e6c         mov        qword [r13+0x20], 0x0
0000000000016e74         mov        rdi, rbp
0000000000016e77         call       re_string_destruct                          ; re_string_destruct

                     loc_16e7c:
0000000000016e7c         mov        rdi, rbx                                    ; CODE XREF=re_compile_internal+1806, sub_17480+1000
0000000000016e7f         call       free_dfa_content                            ; free_dfa_content
0000000000016e84         mov        rax, qword [rsp+0x158+var_150]
0000000000016e89         mov        qword [rax], 0x0
0000000000016e90         mov        qword [rax+8], 0x0
0000000000016e98         mov        eax, dword [rsp+0x158+var_10C]

                     loc_16e9c:
0000000000016e9c         mov        rbx, qword [rsp+0x158+var_40]               ; CODE XREF=sub_17480+994, sub_17a90+134
0000000000016ea4         xor        rbx, qword [fs:0x28]
0000000000016ead         jne        loc_17bf0

0000000000016eb3         add        rsp, 0x128
0000000000016eba         pop        rbx
0000000000016ebb         pop        rbp
0000000000016ebc         pop        r12
0000000000016ebe         pop        r13
0000000000016ec0         pop        r14
0000000000016ec2         pop        r15
0000000000016ec4         ret
                        ; endp

                     loc_16ec5:
0000000000016ec5         cmp        ecx, 0x1                                    ; CODE XREF=re_compile_internal+706
0000000000016ec8         jg         loc_1787a

0000000000016ece         test       r12b, r12b
0000000000016ed1         mov        rsi, qword [rsp+0x158+var_98]
0000000000016ed9         je         loc_174f4

0000000000016edf         cmp        qword [rsp+0x158+var_80], rsi
0000000000016ee7         mov        rax, qword [rsp+0x158+var_A8]
0000000000016eef         cmovle     rsi, qword [rsp+0x158+var_80]
0000000000016ef8         cmp        rsi, rax
0000000000016efb         jg         loc_16f0d

0000000000016efd         jmp        loc_16f40
0000000000016eff         align      256

                     loc_16f00:
0000000000016f00         mov        rdx, qword [rsp+0x158+var_D0]               ; CODE XREF=re_compile_internal+1086
0000000000016f08         mov        qword [rsp+0x158+var_148], rdx

                     loc_16f0d:
0000000000016f0d         mov        rdx, qword [rsp+0x158+var_D8]               ; CODE XREF=re_compile_internal+1019
0000000000016f15         mov        rcx, qword [rsp+0x158+var_60]
0000000000016f1d         add        rdx, rax
0000000000016f20         add        rdx, qword [rsp+0x158+var_B0]
0000000000016f28         movzx      edx, byte [rdx]
0000000000016f2b         movzx      edx, byte [rcx+rdx]
0000000000016f2f         mov        rcx, qword [rsp+0x158+var_148]
0000000000016f34         mov        byte [rcx+rax], dl
0000000000016f37         add        rax, 0x1
0000000000016f3b         cmp        rsi, rax
0000000000016f3e         jne        loc_16f00

                     loc_16f40:
0000000000016f40         mov        qword [rsp+0x158+var_A8], rax               ; CODE XREF=re_compile_internal+1021
0000000000016f48         mov        qword [rsp+0x158+var_A0], rax
0000000000016f50         mov        dword [rsp+0x158+var_10C], 0x0

                     loc_16f58:
0000000000016f58         mov        r12, qword [rsp+0x158+var_150]              ; CODE XREF=sub_17480+140, sub_17480+1034, sub_17480+1320, sub_17480+1357
0000000000016f5d         mov        r14, qword [rsp+0x158+var_140]
0000000000016f62         lea        r13, qword [rsp+0x158+var_108]
0000000000016f67         mov        rsi, rbp
0000000000016f6a         mov        rdi, r13
0000000000016f6d         mov        qword [rsp+0x158+var_130], r13
0000000000016f72         mov        r15, qword [r12]
0000000000016f76         mov        rdx, r14
0000000000016f79         mov        qword [r12+0x30], 0x0
0000000000016f82         or         rdx, 0x800000
0000000000016f89         mov        qword [r15+0xd8], r14
0000000000016f90         call       peek_token                                  ; peek_token
0000000000016f95         lea        r9, qword [rsp+0x158+var_10C]
0000000000016f9a         xor        r8d, r8d
0000000000016f9d         mov        rcx, r14
0000000000016fa0         mov        rdx, r13
0000000000016fa3         mov        rsi, r12
0000000000016fa6         mov        rdi, rbp
0000000000016fa9         cdqe
0000000000016fab         add        qword [rsp+0x158+var_90], rax
0000000000016fb3         call       parse_reg_exp                               ; parse_reg_exp
0000000000016fb8         mov        ecx, dword [rsp+0x158+var_10C]
0000000000016fbc         test       ecx, ecx
0000000000016fbe         jne        loc_179e7

0000000000016fc4         lea        r13, qword [r15+0x70]
0000000000016fc8         lea        r12, qword [rsp+0x158+var_F8]
0000000000016fcd         sub        r15, 0xffffffffffffff80
0000000000016fd1         xor        edx, edx
0000000000016fd3         xor        ecx, ecx
0000000000016fd5         mov        rsi, r15
0000000000016fd8         mov        r8, r12
0000000000016fdb         mov        rdi, r13
0000000000016fde         mov        qword [rsp+0x158+var_158], rax
0000000000016fe2         mov        byte [rsp+0x158+var_F0], 0x2
0000000000016fe7         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000016fec         mov        r9, qword [rsp+0x158+var_158]
0000000000016ff0         mov        r11, rax
0000000000016ff3         mov        rdx, rax
0000000000016ff6         test       r9, r9
0000000000016ff9         je         loc_17022

                     loc_16ffb:
0000000000016ffb         mov        rcx, r11                                    ; CODE XREF=sub_17480+1439
0000000000016ffe         mov        rdx, r9
0000000000017001         mov        r8, r12
0000000000017004         mov        rsi, r15
0000000000017007         mov        rdi, r13
000000000001700a         mov        qword [rsp+0x158+var_158], r11
000000000001700e         mov        byte [rsp+0x158+var_F0], 0x10
0000000000017013         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000017018         mov        r11, qword [rsp+0x158+var_158]
000000000001701c         mov        rdx, r11
000000000001701f         mov        r11, rax

                     loc_17022:
0000000000017022         test       rdx, rdx                                    ; CODE XREF=re_compile_internal+1273
0000000000017025         mov        rcx, qword [rsp+0x158+var_150]
000000000001702a         sete       dl
000000000001702d         test       r11, r11
0000000000017030         sete       al
0000000000017033         or         dl, al
0000000000017035         mov        r13, qword [rcx]
0000000000017038         jne        loc_179d2

000000000001703e         mov        r15, qword [r13+8]
0000000000017042         mov        qword [rbx+0x68], r11
0000000000017046         lea        rcx, qword [r15*8]
000000000001704e         lea        r15, qword [r15+r15*2]
0000000000017052         mov        rdi, rcx                                    ; argument "__size" for method j_malloc
0000000000017055         mov        qword [rsp+0x158+var_158], rcx
0000000000017059         shl        r15, 0x3
000000000001705d         call       j_malloc                                    ; malloc
0000000000017062         mov        rcx, qword [rsp+0x158+var_158]
0000000000017066         mov        qword [r13+0x18], rax
000000000001706a         mov        qword [rsp+0x158+var_140], rax
000000000001706f         mov        rdi, rcx                                    ; argument "__size" for method j_malloc
0000000000017072         call       j_malloc                                    ; malloc
0000000000017077         mov        rdi, r15                                    ; argument "__size" for method j_malloc
000000000001707a         mov        qword [r13+0x20], rax
000000000001707e         mov        qword [rsp+0x158+var_148], rax
0000000000017083         call       j_malloc                                    ; malloc
0000000000017088         mov        rdi, r15                                    ; argument "__size" for method j_malloc
000000000001708b         mov        qword [r13+0x28], rax
000000000001708f         mov        qword [rsp+0x158+var_158], rax
0000000000017093         call       j_malloc                                    ; malloc
0000000000017098         mov        rdx, qword [rsp+0x158+var_140]
000000000001709d         mov        qword [r13+0x30], rax
00000000000170a1         mov        rsi, qword [rsp+0x158+var_158]
00000000000170a5         mov        rcx, qword [rsp+0x158+var_148]
00000000000170aa         test       rdx, rdx
00000000000170ad         je         loc_1786d

00000000000170b3         test       rcx, rcx
00000000000170b6         je         loc_1786d

00000000000170bc         test       rsi, rsi
00000000000170bf         je         loc_1786d

00000000000170c5         test       rax, rax
00000000000170c8         je         loc_1786d

00000000000170ce         mov        rax, qword [rsp+0x158+var_150]
00000000000170d3         mov        r15, qword [rax+0x30]
00000000000170d7         lea        rdi, qword [r15*8]                          ; argument "__size" for method j_malloc
00000000000170df         call       j_malloc                                    ; malloc
00000000000170e4         test       rax, rax
00000000000170e7         mov        qword [r13+0xe0], rax
00000000000170ee         je         loc_1715d

00000000000170f0         test       r15, r15
00000000000170f3         je         loc_1710d

00000000000170f5         xor        edx, edx
00000000000170f7         nop        word [rax+rax]

                     loc_17100:
0000000000017100         mov        qword [rax+rdx*8], rdx                      ; CODE XREF=re_compile_internal+1547
0000000000017104         add        rdx, 0x1
0000000000017108         cmp        rdx, r15
000000000001710b         jne        loc_17100

                     loc_1710d:
000000000001710d         mov        rdi, qword [r13+0x68]                       ; CODE XREF=re_compile_internal+1523
0000000000017111         lea        rsi, qword [optimize_subexps]               ; optimize_subexps
0000000000017118         mov        rdx, r13
000000000001711b         call       preorder                                    ; preorder
0000000000017120         mov        rax, qword [rsp+0x158+var_150]
0000000000017125         mov        rdi, qword [r13+0xe0]
000000000001712c         mov        rdx, qword [rax+0x30]
0000000000017130         test       rdx, rdx
0000000000017133         je         loc_17a24

0000000000017139         mov        rax, qword [rdi]
000000000001713c         test       rax, rax
000000000001713f         je         loc_1714e

0000000000017141         jmp        loc_1715d
0000000000017143         align      8

                     loc_17148:
0000000000017148         cmp        qword [rdi+rax*8], rax                      ; CODE XREF=re_compile_internal+1621
000000000001714c         jne        loc_1715d

                     loc_1714e:
000000000001714e         add        rax, 0x1                                    ; CODE XREF=re_compile_internal+1599
0000000000017152         cmp        rdx, rax
0000000000017155         ja         loc_17148

0000000000017157         je         loc_17a24

                     loc_1715d:
000000000001715d         mov        rdi, qword [r13+0x68]                       ; CODE XREF=re_compile_internal+1518, re_compile_internal+1601, re_compile_internal+1612, sub_17480+1460
0000000000017161         mov        rdx, qword [rsp+0x158+var_150]
0000000000017166         lea        rsi, qword [lower_subexps]                  ; lower_subexps
000000000001716d         call       postorder                                   ; postorder
0000000000017172         test       eax, eax
0000000000017174         jne        loc_16e20

000000000001717a         mov        rdi, qword [r13+0x68]
000000000001717e         lea        rsi, qword [calc_first]                     ; calc_first
0000000000017185         mov        rdx, r13
0000000000017188         call       postorder                                   ; postorder
000000000001718d         test       eax, eax
000000000001718f         jne        loc_16e20

0000000000017195         mov        rdi, qword [r13+0x68]
0000000000017199         lea        rsi, qword [calc_next]                      ; calc_next
00000000000171a0         mov        rdx, r13
00000000000171a3         call       preorder                                    ; preorder
00000000000171a8         mov        rdx, qword [r13+0x68]
00000000000171ac         lea        rsi, qword [switch_table_1cbf4+20]          ; 0x1cc08
00000000000171b3         nop        dword [rax+rax]

                     loc_171b8:
00000000000171b8         movzx      ecx, byte [rdx+0x30]                        ; CODE XREF=re_compile_internal+1983
00000000000171bc         mov        rdi, qword [rdx+0x38]
00000000000171c0         cmp        cl, 0x10
00000000000171c3         ja         loc_17298

00000000000171c9         movzx      eax, cl
00000000000171cc         movsxd     rax, dword [rsi+rax*4]
00000000000171d0         add        rax, rsi
00000000000171d3         jmp        rax
                        ; endp

                     loc_171d5:
00000000000171d5         mov        rsi, qword [rsp+0x158+var_130]              ; CODE XREF=re_compile_internal+663
00000000000171da         mov        rdi, rbp
00000000000171dd         call       re_string_realloc_buffers                   ; re_string_realloc_buffers
00000000000171e2         test       eax, eax
00000000000171e4         jne        loc_16e20

00000000000171ea         movzx      esi, byte [rsp+0x158+var_4D]
00000000000171f2         mov        ecx, dword [rbx+0xb4]
00000000000171f8         test       sil, sil
00000000000171fb         je         loc_16daf

0000000000017201         jmp        loc_16da2

                     loc_17206:
0000000000017206         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+197, re_compile_internal+450, re_compile_internal+461, re_compile_internal+1833
000000000001720e         jmp        loc_16e7c

                     loc_17213:
0000000000017213         mov        esi, 0x1                                    ; argument "__size" for method j_calloc, CODE XREF=re_compile_internal+429
0000000000017218         mov        edi, 0x20                                   ; argument "__nmemb" for method j_calloc
000000000001721d         call       j_calloc                                    ; calloc
0000000000017222         test       rax, rax
0000000000017225         mov        qword [rbx+0x78], rax
0000000000017229         je         loc_17206

000000000001722b         xor        r12d, r12d
000000000001722e         xor        ebp, ebp
0000000000017230         mov        r13d, 0x1

                     loc_17236:
0000000000017236         xor        r15d, r15d                                  ; CODE XREF=re_compile_internal+1937
0000000000017239         nop        dword [rax]

                     loc_17240:
0000000000017240         lea        r14d, dword [rbp+r15]                       ; CODE XREF=re_compile_internal+1922
0000000000017245         mov        edi, r14d                                   ; argument "__c" for method j_btowc
0000000000017248         call       j_btowc                                     ; btowc
000000000001724d         cmp        eax, 0xffffffff
0000000000017250         je         loc_17265

0000000000017252         mov        rsi, qword [rbx+0x78]
0000000000017256         mov        rdi, r13
0000000000017259         mov        ecx, r15d
000000000001725c         shl        rdi, cl
000000000001725f         add        rsi, r12
0000000000017262         or         qword [rsi], rdi

                     loc_17265:
0000000000017265         test       r14d, 0xffffff80                            ; CODE XREF=re_compile_internal+1872
000000000001726c         jne        loc_1727a

000000000001726e         cmp        eax, r14d
0000000000017271         je         loc_1727a

0000000000017273         or         byte [rbx+0xb0], 0x8

                     loc_1727a:
000000000001727a         add        r15, 0x1                                    ; CODE XREF=re_compile_internal+1900, re_compile_internal+1905
000000000001727e         cmp        r15, 0x40
0000000000017282         jne        loc_17240

0000000000017284         add        ebp, 0x40
0000000000017287         add        r12, 0x8
000000000001728b         cmp        ebp, 0x100
0000000000017291         jne        loc_17236

0000000000017293         jmp        loc_16cbe

                     loc_17298:
0000000000017298         and        ecx, 0x8                                    ; CODE XREF=re_compile_internal+1731
000000000001729b         jne        loc_17bb2

00000000000172a1         mov        rax, qword [rdx+0x20]
00000000000172a5         mov        rcx, qword [rax+0x38]
00000000000172a9         mov        rax, qword [r13+0x18]
00000000000172ad         mov        qword [rax+rdi*8], rcx
00000000000172b1         mov        r15, qword [rdx+8]
00000000000172b5         xor        edi, edi                                    ; CODE XREF=sub_173b0+155
00000000000172b7         test       r15, r15
00000000000172ba         je         loc_172cb

                     loc_172bc:
00000000000172bc         mov        rdx, r15                                    ; CODE XREF=re_compile_internal+2017
00000000000172bf         jmp        loc_171b8
00000000000172c4         align      8

                     loc_172c8:
00000000000172c8         mov        rdx, rax                                    ; CODE XREF=re_compile_internal+2028

                     loc_172cb:
00000000000172cb         mov        r15, qword [rdx+0x10]                       ; CODE XREF=re_compile_internal+1978
00000000000172cf         test       r15, r15
00000000000172d2         sete       cl
00000000000172d5         cmp        r15, rdi
00000000000172d8         sete       al
00000000000172db         or         cl, al
00000000000172dd         mov        byte [rsp+0x158+var_148], cl
00000000000172e1         je         loc_172bc

00000000000172e3         mov        rax, qword [rdx]
00000000000172e6         mov        rdi, rdx
00000000000172e9         test       rax, rax
00000000000172ec         jne        loc_172c8

00000000000172ee         xor        r14d, r14d
00000000000172f1         xor        r15d, r15d
00000000000172f4         nop        dword [rax]

                     loc_172f8:
00000000000172f8         mov        rdx, qword [r13+0x10]                       ; CODE XREF=sub_17480+201
00000000000172fc         cmp        rdx, r15
00000000000172ff         je         loc_17326

                     loc_17301:
0000000000017301         lea        r10, qword [r15+r15*2]                      ; CODE XREF=re_compile_internal+2084, re_compile_internal+2101, sub_17480+233
0000000000017305         mov        rax, qword [r13+0x30]
0000000000017309         shl        r10, 0x3
000000000001730d         cmp        qword [rax+r10+8], 0x0
0000000000017313         je         loc_17518

0000000000017319         mov        rdx, qword [r13+0x10]
000000000001731d         add        r15, 0x1
0000000000017321         cmp        rdx, r15
0000000000017324         jne        loc_17301

                     loc_17326:
0000000000017326         test       r14b, r14b                                  ; CODE XREF=re_compile_internal+2047
0000000000017329         je         loc_1756e

                     loc_1732f:
000000000001732f         xor        r14d, r14d                                  ; CODE XREF=sub_17480+221
0000000000017332         xor        r15d, r15d
0000000000017335         jmp        loc_17301
0000000000017337         or         byte [r13+0xb0], 0x1
000000000001733f         mov        r15, qword [rdx+8]
0000000000017343         test       r15, r15
0000000000017346         je         sub_17480+1241
000000000001734c         mov        rax, qword [r15+0x18]
0000000000017350         mov        rcx, qword [rax+0x38]
0000000000017354         mov        rax, qword [rdx+0x10]                       ; CODE XREF=sub_17480+1249
0000000000017358         test       rax, rax
000000000001735b         je         sub_17480+1228
0000000000017361         mov        rax, qword [rax+0x18]
0000000000017365         mov        r9, qword [rax+0x38]
0000000000017369         test       rcx, rcx                                    ; CODE XREF=sub_17480+1236
000000000001736c         js         sub_17b30+161
0000000000017372         test       r9, r9
0000000000017375         js         sub_17b30+99
000000000001737b         mov        rax, qword [r13+0x28]
000000000001737f         lea        rdi, qword [rdi+rdi*2]
0000000000017383         mov        qword [rsp+0x38], rsi
0000000000017388         mov        qword [rsp+0x30], r9
000000000001738d         mov        qword [rsp+0x18], rcx
0000000000017392         mov        qword [rsp+0x10], rdx
0000000000017397         lea        r10, qword [rax+rdi*8]
000000000001739b         mov        edi, 0x10
00000000000173a0         mov        qword [r10], 0x2
00000000000173a7         mov        qword [rsp], r10
00000000000173ab         call       j_malloc                                    ; malloc


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_173b0:
00000000000173b0         mov        r10, qword [rsp+0]
00000000000173b4         test       rax, rax
00000000000173b7         mov        rdx, qword [rsp+16]
00000000000173bc         mov        rcx, qword [rsp+24]
00000000000173c1         mov        r9, qword [rsp+48]
00000000000173c6         mov        rsi, qword [rsp+56]
00000000000173cb         mov        qword [r10+0x10], rax
00000000000173cf         je         sub_17480+490

00000000000173d5         cmp        rcx, r9
00000000000173d8         je         loc_179ad

00000000000173de         mov        qword [r10+8], 0x2
00000000000173e6         jl         loc_17994

00000000000173ec         mov        qword [rax], r9
00000000000173ef         mov        qword [rax+8], rcx
00000000000173f3         jmp        re_compile_internal+1973
                        ; endp
00000000000173f8         mov        rax, qword [rdx+0x20]
00000000000173fc         lea        rcx, qword [rdi+rdi*2]
0000000000017400         mov        edi, 0x8
0000000000017405         mov        qword [rsp+0x10], rsi
000000000001740a         mov        qword [rsp], rdx
000000000001740e         mov        r14, qword [rax+0x38]
0000000000017412         mov        rax, qword [r13+0x28]
0000000000017416         lea        r15, qword [rax+rcx*8]
000000000001741a         mov        qword [r15], 0x1
0000000000017421         mov        qword [r15+8], 0x1
0000000000017429         call       j_malloc                                    ; malloc
000000000001742e         test       rax, rax
0000000000017431         mov        qword [r15+0x10], rax
0000000000017435         mov        rdx, qword [rsp]
0000000000017439         mov        rsi, qword [rsp+0x10]
000000000001743e         je         sub_17a90+88
0000000000017444         mov        qword [rax], r14
0000000000017447         mov        r15, qword [rdx+8]
000000000001744b         jmp        re_compile_internal+1973


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_17450:
0000000000017450         cmp        qword [rdx+0x20], 0x0
0000000000017455         je         re_compile_internal+1969

000000000001745b         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; argument "__function" for method j___assert_fail, "link_nfa_nodes"
0000000000017462         lea        rsi, qword [aCoreutils831li_1c6f0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
0000000000017469         lea        rdi, qword [aNodenextNull]                  ; argument "__assertion" for method j___assert_fail, "node->next == NULL"
0000000000017470         mov        edx, 0x59f                                  ; argument "__line" for method j___assert_fail
0000000000017475         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000001747a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_17480:
0000000000017480         mov        rax, qword [rdx+0x20]
0000000000017484         mov        r15, qword [rax+0x38]
0000000000017488         mov        rax, qword [r13+0x18]
000000000001748c         mov        qword [rax+rdi*8], r15
0000000000017490         cmp        byte [rdx+0x30], 0x4
0000000000017494         jne        re_compile_internal+1969

000000000001749a         mov        rax, qword [r13+0x28]
000000000001749e         lea        rcx, qword [rdi+rdi*2]
00000000000174a2         mov        edi, 0x8                                    ; argument "__size" for method j_malloc
00000000000174a7         mov        qword [rsp+24], rsi
00000000000174ac         mov        qword [rsp+16], rdx
00000000000174b1         lea        rcx, qword [rax+rcx*8]
00000000000174b5         mov        qword [rcx], 0x1
00000000000174bc         mov        qword [rcx+8], 0x1
00000000000174c4         mov        qword [rsp+0], rcx
00000000000174c8         call       j_malloc                                    ; malloc
00000000000174cd         mov        rcx, qword [rsp+0]
00000000000174d1         test       rax, rax
00000000000174d4         mov        rdx, qword [rsp+16]
00000000000174d9         mov        rsi, qword [rsp+24]
00000000000174de         mov        qword [rcx+0x10], rax
00000000000174e2         je         sub_17b30                                   ; sub_17b30

00000000000174e8         mov        qword [rax], r15
00000000000174eb         mov        r15, qword [rdx+8]
00000000000174ef         jmp        re_compile_internal+1973
                        ; endp

                     loc_174f4:
00000000000174f4         mov        qword [rsp+0x158+var_A8], rsi               ; CODE XREF=re_compile_internal+985
00000000000174fc         mov        qword [rsp+0x158+var_A0], rsi
0000000000017504         mov        dword [rsp+0x158+var_10C], 0x0
000000000001750c         jmp        loc_16f58
0000000000017511         align      8

                     loc_17518:
0000000000017518         mov        ecx, 0x1                                    ; CODE XREF=re_compile_internal+2067
000000000001751d         mov        rdx, r15
0000000000017520         mov        rsi, r13
0000000000017523         mov        rdi, r12
0000000000017526         mov        qword [rsp+0x158+var_158], r10
000000000001752a         call       calc_eclosure_iter                          ; calc_eclosure_iter
000000000001752f         test       eax, eax
0000000000017531         jne        loc_16e20

0000000000017537         mov        rax, qword [r13+0x30]
000000000001753b         mov        r10, qword [rsp+0x158+var_158]
000000000001753f         add        r15, 0x1
0000000000017543         cmp        qword [rax+r10+8], 0x0
0000000000017549         jne        loc_172f8

000000000001754f         mov        rdi, qword [rsp+0x158+var_E8]               ; argument "__ptr" for method j_free
0000000000017554         call       j_free                                      ; free
0000000000017559         cmp        qword [r13+0x10], r15
000000000001755d         je         loc_1732f

0000000000017563         movzx      r14d, byte [rsp+0x158+var_148]
0000000000017569         jmp        loc_17301

                     loc_1756e:
000000000001756e         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=re_compile_internal+2089
0000000000017573         test       byte [rax+0x38], 0x10
0000000000017577         jne        loc_1758a

0000000000017579         cmp        qword [rax+0x30], 0x0
000000000001757e         je         loc_1758a

0000000000017580         test       byte [r13+0xb0], 0x1
0000000000017588         jne        loc_17598

                     loc_1758a:
000000000001758a         cmp        qword [r13+0x98], 0x0                       ; CODE XREF=sub_17480+247, sub_17480+254
0000000000017592         je         loc_1768b

                     loc_17598:
0000000000017598         lea        rdi, qword [rdx+rdx*2]                      ; CODE XREF=sub_17480+264
000000000001759c         mov        qword [rsp+0x158+var_158], rdx
00000000000175a0         shl        rdi, 0x3                                    ; argument "__size" for method j_malloc
00000000000175a4         call       j_malloc                                    ; malloc
00000000000175a9         test       rax, rax
00000000000175ac         mov        qword [r13+0x38], rax
00000000000175b0         je         loc_17afc

00000000000175b6         mov        rdx, qword [rsp+0x158+var_158]
00000000000175ba         xor        esi, esi
00000000000175bc         xor        ecx, ecx
00000000000175be         test       rdx, rdx
00000000000175c1         jne        loc_175d4

00000000000175c3         jmp        loc_1768b
00000000000175c8         align      16

                     loc_175d0:
00000000000175d0         mov        rax, qword [r13+0x38]                       ; CODE XREF=sub_17480+373

                     loc_175d4:
00000000000175d4         pxor       xmm0, xmm0                                  ; CODE XREF=sub_17480+321
00000000000175d8         add        rax, rsi
00000000000175db         add        rcx, 0x1
00000000000175df         mov        qword [rax+0x10], 0x0
00000000000175e7         add        rsi, 0x18
00000000000175eb         movups     xmmword [rax], xmm0
00000000000175ee         mov        rax, qword [r13+0x10]
00000000000175f2         cmp        rcx, rax
00000000000175f5         jb         loc_175d0

00000000000175f7         test       rax, rax
00000000000175fa         je         loc_1768b

0000000000017600         mov        rax, qword [r13+0x30]
0000000000017604         mov        qword [rsp+0x158+var_140], 0x0
000000000001760d         mov        qword [rsp+0x158+var_148], 0x0

                     loc_17616:
0000000000017616         mov        rcx, qword [rsp+0x158+var_140]              ; CODE XREF=sub_17480+521
000000000001761b         lea        rdx, qword [rax+rcx]
000000000001761f         cmp        qword [rdx+8], 0x0
0000000000017624         mov        rcx, qword [rdx+0x10]
0000000000017628         jle        loc_17674

000000000001762a         xor        r15d, r15d
000000000001762d         jmp        loc_17648
000000000001762f         align      16

                     loc_17630:
0000000000017630         mov        rax, qword [r13+0x30]                       ; CODE XREF=sub_17480+488
0000000000017634         mov        rdx, qword [rsp+0x158+var_140]
0000000000017639         add        r15, 0x1
000000000001763d         mov        rcx, qword [rsp+0x158+var_158]
0000000000017641         cmp        r15, qword [rax+rdx+8]
0000000000017646         jge        loc_17674

                     loc_17648:
0000000000017648         mov        rax, qword [rcx+r15*8]                      ; CODE XREF=sub_17480+429
000000000001764c         mov        qword [rsp+0x158+var_158], rcx
0000000000017650         lea        rsi, qword [rax+rax*2]
0000000000017654         mov        rax, qword [r13+0x38]
0000000000017658         lea        rdi, qword [rax+rsi*8]
000000000001765c         mov        rsi, qword [rsp+0x158+var_148]
0000000000017661         call       re_node_set_insert_last                     ; re_node_set_insert_last
0000000000017666         test       al, al
0000000000017668         jne        loc_17630

000000000001766a         mov        eax, 0xc                                    ; CODE XREF=sub_17a90+103
000000000001766f         jmp        loc_16e20

                     loc_17674:
0000000000017674         add        qword [rsp+0x158+var_148], 0x1              ; CODE XREF=sub_17480+424, sub_17480+454
000000000001767a         add        qword [rsp+0x158+var_140], 0x18
0000000000017680         mov        rdx, qword [rsp+0x158+var_148]
0000000000017685         cmp        rdx, qword [r13+0x10]
0000000000017689         jb         loc_17616

                     loc_1768b:
000000000001768b         movzx      eax, byte [rbx+0xb0]                        ; CODE XREF=sub_17480+274, sub_17480+323, sub_17480+378
0000000000017692         mov        dword [rsp+0x158+var_10C], 0x0
000000000001769a         shr        al, 0x2
000000000001769d         cmp        qword [rsp+0x158+var_138], 0x0
00000000000176a3         sete       dl
00000000000176a6         and        al, dl
00000000000176a8         jne        loc_1788f

                     loc_176ae:
00000000000176ae         mov        rax, qword [rbx+0x68]                       ; CODE XREF=sub_17480+1049, sub_17a90+32, sub_17a90+48, sub_17a90+65, sub_17b30+34, sub_17b30+89
00000000000176b2         mov        rdi, r12
00000000000176b5         mov        rax, qword [rax+0x18]
00000000000176b9         mov        rax, qword [rax+0x38]
00000000000176bd         lea        rdx, qword [rax+rax*2]
00000000000176c1         mov        qword [rbx+0x90], rax
00000000000176c8         mov        rax, qword [rbx+0x30]
00000000000176cc         lea        rsi, qword [rax+rdx*8]
00000000000176d0         call       re_node_set_init_copy                       ; re_node_set_init_copy
00000000000176d5         test       eax, eax
00000000000176d7         mov        r15d, eax
00000000000176da         mov        dword [rsp+0x158+var_108], eax
00000000000176de         jne        loc_177ff

00000000000176e4         cmp        qword [rbx+0x98], 0x0
00000000000176ec         jle        loc_177c0

00000000000176f2         mov        r9, qword [rsp+0x158+var_F0]
00000000000176f7         test       r9, r9
00000000000176fa         jle        loc_177c0

0000000000017700         xor        r10d, r10d
0000000000017703         lea        r13, qword [r12+0x10]
0000000000017708         jmp        loc_1771d
000000000001770a         align      16

                     loc_17710:
0000000000017710         add        r10, 0x1                                    ; CODE XREF=sub_17480+695, sub_17480+711, sub_17480+774
0000000000017714         cmp        r9, r10
0000000000017717         jle        loc_177c0

                     loc_1771d:
000000000001771d         mov        rcx, qword [rsp+0x158+var_E8]               ; CODE XREF=sub_17480+648, sub_17480+818
0000000000017722         mov        rsi, qword [rbx]
0000000000017725         mov        r8, qword [rcx+r10*8]
0000000000017729         mov        rdi, r8
000000000001772c         shl        rdi, 0x4
0000000000017730         add        rdi, rsi
0000000000017733         cmp        byte [rdi+8], 0x4
0000000000017737         jne        loc_17710

0000000000017739         xor        edx, edx
000000000001773b         jmp        loc_17749
000000000001773d         align      64

                     loc_17740:
0000000000017740         add        rdx, 0x1                                    ; CODE XREF=sub_17480+728, sub_17480+736
0000000000017744         cmp        r9, rdx
0000000000017747         je         loc_17710

                     loc_17749:
0000000000017749         mov        rax, qword [rcx+rdx*8]                      ; CODE XREF=sub_17480+699
000000000001774d         shl        rax, 0x4
0000000000017751         add        rax, rsi
0000000000017754         cmp        byte [rax+8], 0x9
0000000000017758         jne        loc_17740

000000000001775a         mov        r11, qword [rdi]
000000000001775d         cmp        qword [rax], r11
0000000000017760         jne        loc_17740

0000000000017762         mov        rdx, qword [rbx+0x28]
0000000000017766         lea        rax, qword [r8+r8*2]
000000000001776a         mov        rsi, r13
000000000001776d         mov        rdi, r9
0000000000017770         lea        rax, qword [rdx+rax*8]
0000000000017774         mov        rax, qword [rax+0x10]
0000000000017778         mov        r11, qword [rax]
000000000001777b         mov        rdx, r11
000000000001777e         call       re_node_set_contains.isra.3                 ; re_node_set_contains.isra.3
0000000000017783         test       rax, rax
0000000000017786         jne        loc_17710

0000000000017788         mov        rax, qword [rbx+0x30]
000000000001778c         lea        rdx, qword [r11+r11*2]
0000000000017790         mov        rdi, r12
0000000000017793         lea        rsi, qword [rax+rdx*8]
0000000000017797         call       re_node_set_merge                           ; re_node_set_merge
000000000001779c         test       eax, eax
000000000001779e         jne        loc_17ae0

00000000000177a4         mov        r9, qword [rsp+0x158+var_F0]
00000000000177a9         mov        r10d, 0x1
00000000000177af         cmp        r9, r10
00000000000177b2         jg         loc_1771d

00000000000177b8         nop        dword [rax+rax]

                     loc_177c0:
00000000000177c0         mov        rdi, qword [rsp+0x158+var_130]              ; CODE XREF=sub_17480+620, sub_17480+634, sub_17480+663
00000000000177c5         xor        ecx, ecx
00000000000177c7         mov        rdx, r12
00000000000177ca         mov        rsi, rbx
00000000000177cd         call       re_acquire_state_context                    ; re_acquire_state_context
00000000000177d2         test       rax, rax
00000000000177d5         mov        qword [rbx+0x48], rax
00000000000177d9         je         loc_17942

00000000000177df         cmp        byte [rax+0x68], 0x0
00000000000177e3         js         loc_178e1

00000000000177e9         mov        qword [rbx+0x60], rax
00000000000177ed         mov        qword [rbx+0x58], rax
00000000000177f1         mov        qword [rbx+0x50], rax

                     loc_177f5:
00000000000177f5         mov        rdi, qword [rsp+0x158+var_E8]               ; argument "__ptr" for method j_free, CODE XREF=sub_17480+1212
00000000000177fa         call       j_free                                      ; free

                     loc_177ff:
00000000000177ff         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_17480+606, sub_17480+1223, sub_17a90+83
0000000000017804         mov        dword [rsp+0x158+var_10C], r15d
0000000000017809         mov        r13, qword [rax]
000000000001780c         mov        rdi, qword [r13+0x70]
0000000000017810         test       rdi, rdi
0000000000017813         je         loc_17828

0000000000017815         nop        dword [rax]

                     loc_17818:
0000000000017818         mov        r12, qword [rdi]                            ; CODE XREF=sub_17480+934
000000000001781b         call       j_free                                      ; free
0000000000017820         test       r12, r12
0000000000017823         mov        rdi, r12
0000000000017826         jne        loc_17818

                     loc_17828:
0000000000017828         mov        rdi, qword [r13+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=sub_17480+915
000000000001782c         mov        qword [r13+0x70], 0x0
0000000000017834         mov        dword [r13+0x80], 0xf
000000000001783f         mov        qword [r13+0x68], 0x0
0000000000017847         call       j_free                                      ; free
000000000001784c         mov        qword [r13+0x20], 0x0
0000000000017854         mov        rdi, rbp
0000000000017857         call       re_string_destruct                          ; re_string_destruct
000000000001785c         mov        eax, dword [rsp+0x158+var_10C]
0000000000017860         test       eax, eax
0000000000017862         je         loc_16e9c

0000000000017868         jmp        loc_16e7c

                     loc_1786d:
000000000001786d         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+1453, re_compile_internal+1462, re_compile_internal+1471, re_compile_internal+1480
0000000000017875         jmp        loc_16e2c

                     loc_1787a:
000000000001787a         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+968
000000000001787d         call       build_wcs_buffer                            ; build_wcs_buffer
0000000000017882         mov        dword [rsp+0x158+var_10C], 0x0
000000000001788a         jmp        loc_16f58

                     loc_1788f:
000000000001788f         mov        rcx, qword [rsp+0x158+var_150]              ; CODE XREF=sub_17480+552
0000000000017894         cmp        qword [rcx+0x28], 0x0
0000000000017899         jne        loc_176ae

000000000001789f         mov        r10, qword [rbx+0x10]
00000000000178a3         test       r10, r10
00000000000178a6         je         loc_17b5a

00000000000178ac         mov        rsi, qword [rbx]
00000000000178af         lea        r9, qword [switch_table_1cbf4+88]           ; 0x1cc4c
00000000000178b6         xor        r8d, r8d
00000000000178b9         xor        edx, edx
00000000000178bb         mov        rcx, rsi
00000000000178be         cmp        byte [rcx+8], 0xc
00000000000178c2         ja         loc_17b8e

00000000000178c8         movzx      edi, byte [rcx+8]
00000000000178cc         movsxd     rdi, dword [r9+rdi*4]
00000000000178d0         add        rdi, r9
00000000000178d3         jmp        rdi
                        ; endp

                     loc_178d5:
00000000000178d5         xor        ebp, ebp                                    ; CODE XREF=re_compile_internal+238
00000000000178d7         mov        esi, 0x1
00000000000178dc         jmp        loc_16c0d

                     loc_178e1:
00000000000178e1         mov        r14, qword [rsp+0x158+var_130]              ; CODE XREF=sub_17480+867
00000000000178e6         mov        ecx, 0x1
00000000000178eb         mov        rdx, r12
00000000000178ee         mov        rsi, rbx
00000000000178f1         mov        rdi, r14
00000000000178f4         call       re_acquire_state_context                    ; re_acquire_state_context
00000000000178f9         mov        ecx, 0x2
00000000000178fe         mov        rdx, r12
0000000000017901         mov        rsi, rbx
0000000000017904         mov        rdi, r14
0000000000017907         mov        qword [rbx+0x50], rax
000000000001790b         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000017910         mov        ecx, 0x6
0000000000017915         mov        qword [rbx+0x58], rax
0000000000017919         mov        rdx, r12
000000000001791c         mov        rsi, rbx
000000000001791f         mov        rdi, r14
0000000000017922         call       re_acquire_state_context                    ; re_acquire_state_context
0000000000017927         cmp        qword [rbx+0x50], 0x0
000000000001792c         mov        qword [rbx+0x60], rax
0000000000017930         je         loc_17942

0000000000017932         cmp        qword [rbx+0x58], 0x0
0000000000017937         je         loc_17942

0000000000017939         test       rax, rax
000000000001793c         jne        loc_177f5

                     loc_17942:
0000000000017942         mov        r15d, dword [rsp+0x158+var_108]             ; CODE XREF=sub_17480+857, sub_17480+1200, sub_17480+1207
0000000000017947         jmp        loc_177ff
000000000001794c         mov        rax, qword [rdx+0x20]                       ; CODE XREF=re_compile_internal+2139
0000000000017950         mov        r9, qword [rax+0x38]
0000000000017954         jmp        re_compile_internal+2153
0000000000017959         mov        rax, qword [rdx+0x20]                       ; CODE XREF=re_compile_internal+2118
000000000001795d         mov        rcx, qword [rax+0x38]
0000000000017961         jmp        re_compile_internal+2132

                     loc_17966:
0000000000017966         mov        rdi, rbx                                    ; argument "__ptr" for method j_realloc, CODE XREF=re_compile_internal+108
0000000000017969         mov        esi, 0xe8                                   ; argument "__size" for method j_realloc
000000000001796e         call       j_realloc                                   ; realloc
0000000000017973         test       rax, rax
0000000000017976         mov        rbx, rax
0000000000017979         je         loc_17b11

000000000001797f         mov        rax, qword [rsp+0x158+var_150]
0000000000017984         mov        qword [rax+8], 0xe8
000000000001798c         mov        qword [rax], rbx
000000000001798f         jmp        loc_16b72

                     loc_17994:
0000000000017994         mov        qword [rax], rcx                            ; CODE XREF=sub_173b0+54
0000000000017997         mov        qword [rax+8], r9
000000000001799b         jmp        re_compile_internal+1973
                        ; endp

                     loc_179a0:
00000000000179a0         mov        dword [rsp+0x158+var_10C], 0x0              ; CODE XREF=re_compile_internal+745, re_compile_internal+777
00000000000179a8         jmp        loc_16f58

                     loc_179ad:
00000000000179ad         mov        qword [r10+8], 0x1                          ; CODE XREF=sub_173b0+40
00000000000179b5         mov        qword [rax], rcx
00000000000179b8         jmp        re_compile_internal+1973
                        ; endp

                     loc_179bd:
00000000000179bd         mov        rdi, rbp                                    ; CODE XREF=re_compile_internal+715
00000000000179c0         call       build_upper_buffer                          ; build_upper_buffer
00000000000179c5         mov        dword [rsp+0x158+var_10C], 0x0
00000000000179cd         jmp        loc_16f58

                     loc_179d2:
00000000000179d2         mov        dword [rsp+0x158+var_10C], 0xc              ; CODE XREF=re_compile_internal+1336
00000000000179da         mov        qword [rbx+0x68], 0x0
00000000000179e2         jmp        loc_16e2c

                     loc_179e7:
00000000000179e7         test       rax, rax                                    ; CODE XREF=re_compile_internal+1214
00000000000179ea         je         loc_17b1b

00000000000179f0         lea        r13, qword [r15+0x70]
00000000000179f4         lea        r12, qword [rsp+0x158+var_F8]
00000000000179f9         sub        r15, 0xffffffffffffff80
00000000000179fd         xor        ecx, ecx
00000000000179ff         xor        edx, edx
0000000000017a01         mov        rsi, r15
0000000000017a04         mov        r8, r12
0000000000017a07         mov        rdi, r13
0000000000017a0a         mov        qword [rsp+0x158+var_158], rax
0000000000017a0e         mov        byte [rsp+0x158+var_F0], 0x2
0000000000017a13         call       create_token_tree.isra.16                   ; create_token_tree.isra.16
0000000000017a18         mov        r9, qword [rsp+0x158+var_158]
0000000000017a1c         mov        r11, rax
0000000000017a1f         jmp        loc_16ffb

                     loc_17a24:
0000000000017a24         call       j_free                                      ; free, CODE XREF=re_compile_internal+1587, re_compile_internal+1623
0000000000017a29         mov        qword [r13+0xe0], 0x0
0000000000017a34         jmp        loc_1715d
0000000000017a39         mov        r8d, eax

                     loc_17a3c:
0000000000017a3c         add        rdx, 0x1                                    ; CODE XREF=sub_17a90+7, sub_17a90+14, sub_17a90+25, sub_17a90+30, sub_17a90+59, sub_17b30+28
0000000000017a40         add        rcx, 0x10
0000000000017a44         cmp        rdx, r10
0000000000017a47         jne        sub_17480+1086

0000000000017a4d         or         r14b, r8b
0000000000017a50         je         sub_17b30+42

0000000000017a56         mov        rax, rdx
0000000000017a59         shl        rax, 0x4
0000000000017a5d         add        rax, rsi
0000000000017a60         jmp        loc_17a78

                     loc_17a62:
0000000000017a62         cmp        dl, 0x5                                     ; CODE XREF=sub_17480+1535
0000000000017a65         jne        loc_17a6b

0000000000017a67         mov        byte [rsi+8], 0x7

                     loc_17a6b:
0000000000017a6b         add        rsi, 0x10                                   ; CODE XREF=sub_17480+1509, sub_17480+1540, sub_17480+1546
0000000000017a6f         cmp        rax, rsi
0000000000017a72         je         loc_17b57

                     loc_17a78:
0000000000017a78         movzx      edx, byte [rsi+8]                           ; CODE XREF=sub_17480+1504
0000000000017a7c         cmp        dl, 0x1
0000000000017a7f         jne        loc_17a62

0000000000017a81         cmp        byte [rsi], 0x0
0000000000017a84         jns        loc_17a6b

0000000000017a86         and        byte [rsi+0xa], 0xdf
0000000000017a8a         jmp        loc_17a6b
0000000000017a8c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_17a90:
0000000000017a90         cmp        byte [rcx], 0x0
0000000000017a93         cmovs      r14d, eax
0000000000017a97         jmp        loc_17a3c
0000000000017a99         mov        edi, dword [rcx]
0000000000017a9b         cmp        edi, 0x20
0000000000017a9e         je         sub_17480+1468
0000000000017aa0         jbe        sub_17b30+25
0000000000017aa6         cmp        edi, 0x40
0000000000017aa9         je         sub_17480+1468
0000000000017aab         add        edi, 0xffffff80
0000000000017aae         je         sub_17480+1468
0000000000017ab0         jmp        sub_17480+558
0000000000017ab5         nop        dword [rax]
0000000000017ab8         mov        rdi, qword [rcx]
0000000000017abb         cmp        qword [rdi+0x10], 0x0
0000000000017ac0         jne        sub_17480+558
0000000000017ac6         cmp        qword [rdi+0x18], 0x0
0000000000017acb         je         sub_17480+1468
0000000000017ad1         jmp        sub_17480+558
0000000000017ad6         nop        word [cs:rax+rax]

                     loc_17ae0:
0000000000017ae0         mov        r15d, eax                                   ; CODE XREF=sub_17480+798
0000000000017ae3         jmp        loc_177ff
0000000000017ae8         mov        qword [r15+8], 0x0                          ; CODE XREF=sub_173b0+142
0000000000017af0         mov        qword [r15], 0x0
0000000000017af7         jmp        sub_17480+490

                     loc_17afc:
0000000000017afc         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_17480+304
0000000000017b01         mov        dword [rsp+0x158+var_10C], 0xc
0000000000017b09         mov        r13, qword [rax]
0000000000017b0c         jmp        loc_16e2c

                     loc_17b11:
0000000000017b11         mov        eax, 0xc                                    ; CODE XREF=sub_17480+1273
0000000000017b16         jmp        loc_16e9c

                     loc_17b1b:
0000000000017b1b         mov        rax, qword [rsp+0x158+var_150]              ; CODE XREF=sub_17480+1386
0000000000017b20         mov        qword [rbx+0x68], 0x0
0000000000017b28         mov        r13, qword [rax]
0000000000017b2b         jmp        loc_16e2c


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_17b30:
0000000000017b30         mov        qword [rcx+8], 0x0
0000000000017b38         mov        qword [rcx], 0x0
0000000000017b3f         mov        eax, 0xc
0000000000017b44         jmp        re_compile_internal+800
                        ; endp
0000000000017b49         cmp        edi, 0x10                                   ; CODE XREF=sub_17a90+16
0000000000017b4c         je         sub_17480+1468
0000000000017b52         jmp        sub_17480+558

                     loc_17b57:
0000000000017b57         mov        r14d, r8d                                   ; CODE XREF=sub_17480+1522
                        ; endp

                     loc_17b5a:
0000000000017b5a         cmp        qword [rbx+0x98], 0x0                       ; CODE XREF=sub_17480+1062
0000000000017b62         movzx      edx, byte [rbx+0xb0]
0000000000017b69         mov        dword [rbx+0xb4], 0x1
0000000000017b73         setg       al
0000000000017b76         and        edx, 0xfffffff9
0000000000017b79         or         eax, r14d
0000000000017b7c         and        eax, 0x1
0000000000017b7f         add        eax, eax
0000000000017b81         or         eax, edx
0000000000017b83         mov        byte [rbx+0xb0], al
0000000000017b89         jmp        loc_176ae

                     loc_17b8e:
0000000000017b8e         call       j_abort                                     ; abort, CODE XREF=sub_17480+1090
                        ; endp
0000000000017b93         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; "link_nfa_nodes", CODE XREF=re_compile_internal+2165
0000000000017b9a         lea        rsi, qword [aCoreutils831li_1c6f0]          ; "../coreutils-8.31/lib/regcomp.c"
0000000000017ba1         lea        rdi, qword [aRight1]                        ; "right > -1"
0000000000017ba8         mov        edx, 0x5b0
0000000000017bad         call       j___assert_fail                             ; __assert_fail

                     loc_17bb2:
0000000000017bb2         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; argument "__function" for method j___assert_fail, "link_nfa_nodes", CODE XREF=re_compile_internal+1947
0000000000017bb9         lea        rsi, qword [aCoreutils831li_1c6f0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regcomp.c"
0000000000017bc0         lea        rdi, qword [aIsepsilonnodeN]                ; argument "__assertion" for method j___assert_fail, "!IS_EPSILON_NODE (node->token.type)"
0000000000017bc7         mov        edx, 0x5c2                                  ; argument "__line" for method j___assert_fail
0000000000017bcc         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000017bd1         lea        rcx, qword [__PRETTY_FUNCTION__.6981]       ; "link_nfa_nodes", CODE XREF=re_compile_internal+2156
0000000000017bd8         lea        rsi, qword [aCoreutils831li_1c6f0]          ; "../coreutils-8.31/lib/regcomp.c"
0000000000017bdf         lea        rdi, qword [aLeft1]                         ; "left > -1"
0000000000017be6         mov        edx, 0x5af
0000000000017beb         call       j___assert_fail                             ; __assert_fail

                     loc_17bf0:
0000000000017bf0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=re_compile_internal+941
                        ; endp
0000000000017bf5         align      1024                                        ; End of unwind block (FDE at 0x1f92c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_compile_pattern:
0000000000017c00         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1f97c), CODE XREF=compile_regex+79
0000000000017c04         mov        rcx, qword [rpl_re_syntax_options]          ; rpl_re_syntax_options
0000000000017c0b         mov        r8, rdi
0000000000017c0e         mov        rdi, rdx
0000000000017c11         mov        rax, rcx
0000000000017c14         shr        rax, 0x19
0000000000017c18         and        eax, 0x1
0000000000017c1b         shl        eax, 0x4
0000000000017c1e         mov        edx, eax
0000000000017c20         movzx      eax, byte [rdi+0x38]
0000000000017c24         and        eax, 0xffffffef
0000000000017c27         or         eax, edx
0000000000017c29         mov        rdx, rsi
0000000000017c2c         mov        rsi, r8
0000000000017c2f         or         eax, 0xffffff80
0000000000017c32         mov        byte [rdi+0x38], al
0000000000017c35         call       re_compile_internal                         ; re_compile_internal
0000000000017c3a         test       eax, eax
0000000000017c3c         je         loc_17c68

0000000000017c3e         lea        rdx, qword [__re_error_msgid_idx]           ; __re_error_msgid_idx
0000000000017c45         cdqe
0000000000017c47         lea        rsi, qword [__re_error_msgid]               ; "Success"
0000000000017c4e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000017c50         add        rsi, qword [rdx+rax*8]                      ; argument "msgid" for method j_dcgettext
0000000000017c54         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000017c59         add        rsp, 0x8
0000000000017c5d         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
0000000000017c62         align      8

                     loc_17c68:
0000000000017c68         xor        eax, eax                                    ; CODE XREF=rpl_re_compile_pattern+60
0000000000017c6a         add        rsp, 0x8
0000000000017c6e         ret
                        ; endp
0000000000017c6f         align      16                                          ; End of unwind block (FDE at 0x1f97c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_set_syntax:
0000000000017c70         mov        rax, qword [rpl_re_syntax_options]          ; Begin of unwind block (FDE at 0x1f99c), rpl_re_syntax_options
0000000000017c77         mov        qword [rpl_re_syntax_options], rdi          ; rpl_re_syntax_options
0000000000017c7e         ret
                        ; endp
0000000000017c7f         align      128                                         ; End of unwind block (FDE at 0x1f99c)

                     rpl_re_compile_fastmap:
0000000000017c80         push       r12                                         ; Begin of unwind block (FDE at 0x1f9b0), CODE XREF=compile_regex+96, re_search_stub+663, rpl_regcomp+183
0000000000017c82         push       rbp
0000000000017c83         xor        eax, eax
0000000000017c85         push       rbx
0000000000017c86         mov        rbp, qword [rdi+0x20]
0000000000017c8a         mov        rbx, rdi
0000000000017c8d         mov        r12, qword [rdi]
0000000000017c90         lea        rdi, qword [rbp+8]
0000000000017c94         mov        rcx, rbp
0000000000017c97         mov        qword [rbp], 0x0
0000000000017c9f         mov        qword [rbp+0xf8], 0x0
0000000000017caa         and        rdi, 0xfffffffffffffff8
0000000000017cae         sub        rcx, rdi
0000000000017cb1         add        ecx, 0x100
0000000000017cb7         shr        ecx, 0x3
0000000000017cba         rep stosq  qword [rdi], rax
0000000000017cbd         mov        rcx, rbp
0000000000017cc0         mov        rdi, rbx
0000000000017cc3         mov        rsi, qword [r12+0x48]
0000000000017cc8         lea        rdx, qword [rsi+0x18]
0000000000017ccc         add        rsi, 0x10
0000000000017cd0         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
0000000000017cd5         mov        rax, qword [r12+0x50]
0000000000017cda         cmp        qword [r12+0x48], rax
0000000000017cdf         je         loc_17cf9

0000000000017ce1         lea        rdx, qword [rax+0x18]
0000000000017ce5         lea        rsi, qword [rax+0x10]
0000000000017ce9         mov        rcx, rbp
0000000000017cec         mov        rdi, rbx
0000000000017cef         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
0000000000017cf4         mov        rax, qword [r12+0x48]

                     loc_17cf9:
0000000000017cf9         mov        rsi, qword [r12+0x58]                       ; CODE XREF=rpl_re_compile_fastmap+95
0000000000017cfe         cmp        rsi, rax
0000000000017d01         je         loc_17d1b

0000000000017d03         lea        rdx, qword [rsi+0x18]
0000000000017d07         mov        rcx, rbp
0000000000017d0a         add        rsi, 0x10
0000000000017d0e         mov        rdi, rbx
0000000000017d11         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30
0000000000017d16         mov        rax, qword [r12+0x48]

                     loc_17d1b:
0000000000017d1b         mov        rsi, qword [r12+0x60]                       ; CODE XREF=rpl_re_compile_fastmap+129
0000000000017d20         cmp        rsi, rax
0000000000017d23         je         loc_17d38

0000000000017d25         lea        rdx, qword [rsi+0x18]
0000000000017d29         mov        rcx, rbp
0000000000017d2c         add        rsi, 0x10
0000000000017d30         mov        rdi, rbx
0000000000017d33         call       re_compile_fastmap_iter.isra.30             ; re_compile_fastmap_iter.isra.30

                     loc_17d38:
0000000000017d38         or         byte [rbx+0x38], 0x8                        ; CODE XREF=rpl_re_compile_fastmap+163
0000000000017d3c         xor        eax, eax
0000000000017d3e         pop        rbx
0000000000017d3f         pop        rbp
0000000000017d40         pop        r12
0000000000017d42         ret
                        ; endp
0000000000017d43         align      16                                          ; End of unwind block (FDE at 0x1f9b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96


                     re_search_stub:
0000000000017d50         push       r15                                         ; Begin of unwind block (FDE at 0x1f9dc), CODE XREF=re_search_2_stub+136, rpl_re_match+14, rpl_re_search+11
0000000000017d52         push       r14
0000000000017d54         mov        rax, r8
0000000000017d57         push       r13
0000000000017d59         push       r12
0000000000017d5b         add        r8, rcx
0000000000017d5e         push       rbp
0000000000017d5f         push       rbx
0000000000017d60         sub        rsp, 0x38
0000000000017d64         test       rcx, rcx
0000000000017d67         mov        ebx, dword [rsp+0x68+arg_8]
0000000000017d6b         mov        r12, qword [rsp+0x68+arg_0]
0000000000017d70         mov        dword [rsp+0x68+var_40], ebx
0000000000017d74         js         loc_180b0

0000000000017d7a         cmp        rcx, rdx
0000000000017d7d         jg         loc_180b0

0000000000017d83         cmp        r8, rdx
0000000000017d86         mov        rbx, rcx
0000000000017d89         mov        r15, rdi
0000000000017d8c         jg         loc_18010

0000000000017d92         test       rax, rax
0000000000017d95         js         loc_17da0

0000000000017d97         cmp        rcx, r8
0000000000017d9a         jg         loc_18010

                     loc_17da0:
0000000000017da0         test       r8, r8                                      ; CODE XREF=re_search_stub+69
0000000000017da3         js         loc_18088

0000000000017da9         test       rax, rax
0000000000017dac         jns        loc_17db7

0000000000017dae         cmp        rbx, r8
0000000000017db1         jle        loc_18088

                     loc_17db7:
0000000000017db7         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+92, re_search_stub+707
0000000000017dbc         mov        r13d, eax
0000000000017dbf         shr        r13b, 0x5
0000000000017dc3         mov        edi, r13d
0000000000017dc6         and        edi, 0x3
0000000000017dc9         cmp        r8, rbx
0000000000017dcc         mov        dword [rsp+0x68+var_3C], edi
0000000000017dd0         jle        loc_17de1

0000000000017dd2         cmp        qword [r15+0x20], 0x0
0000000000017dd7         je         loc_17de1

0000000000017dd9         test       al, 0x8
0000000000017ddb         je         loc_17fd0

                     loc_17de1:
0000000000017de1         test       al, 0x10                                    ; CODE XREF=re_search_stub+128, re_search_stub+135, re_search_stub+693, re_search_stub+849
0000000000017de3         jne        loc_17fb0

0000000000017de9         test       r12, r12
0000000000017dec         je         loc_17fb0

0000000000017df2         and        eax, 0x6
0000000000017df5         mov        rcx, qword [r15+0x30]
0000000000017df9         cmp        al, 0x4
0000000000017dfb         je         loc_17f90

                     loc_17e01:
0000000000017e01         lea        r14, qword [rcx+1]                          ; CODE XREF=re_search_stub+583
0000000000017e05         mov        r13, r14

                     loc_17e08:
0000000000017e08         mov        rdi, r14                                    ; CODE XREF=re_search_stub+595
0000000000017e0b         shl        rdi, 0x4

                     loc_17e0f:
0000000000017e0f         mov        qword [rsp+0x68+var_48], r9                 ; CODE XREF=re_search_stub+628
0000000000017e14         mov        qword [rsp+0x68+var_50], rdx
0000000000017e19         mov        qword [rsp+0x68+var_58], rsi
0000000000017e1e         mov        qword [rsp+0x68+var_60], r8
0000000000017e23         call       j_malloc                                    ; malloc
0000000000017e28         test       rax, rax
0000000000017e2b         mov        rbp, rax
0000000000017e2e         je         loc_180c0

0000000000017e34         sub        rsp, 0x8
0000000000017e38         mov        rcx, rbx
0000000000017e3b         mov        rdi, r15
0000000000017e3e         mov        eax, dword [rsp+0x70+var_3C]
0000000000017e42         push       rax
0000000000017e43         push       rbp
0000000000017e44         push       r14
0000000000017e46         mov        r9, qword [rsp+0x88+var_48]
0000000000017e4b         mov        r8, qword [rsp+0x88+var_60]
0000000000017e50         mov        rdx, qword [rsp+0x88+var_50]
0000000000017e55         mov        rsi, qword [rsp+0x88+var_58]
0000000000017e5a         call       re_search_internal                          ; re_search_internal
0000000000017e5f         add        rsp, 0x20
0000000000017e63         test       eax, eax
0000000000017e65         je         loc_17e98

0000000000017e67         cmp        eax, 0x1
0000000000017e6a         mov        r12, 0xffffffffffffffff
0000000000017e71         je         loc_17e7a

                     loc_17e73:
0000000000017e73         mov        r12, 0xfffffffffffffffe                     ; CODE XREF=re_search_stub+530

                     loc_17e7a:
0000000000017e7a         mov        rdi, rbp                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_stub+289, re_search_stub+545, re_search_stub+567
0000000000017e7d         call       j_free                                      ; free

                     loc_17e82:
0000000000017e82         add        rsp, 0x38                                   ; CODE XREF=re_search_stub+871, re_search_stub+887
0000000000017e86         mov        rax, r12
0000000000017e89         pop        rbx
0000000000017e8a         pop        rbp
0000000000017e8b         pop        r12
0000000000017e8d         pop        r13
0000000000017e8f         pop        r14
0000000000017e91         pop        r15
0000000000017e93         ret
                        ; endp
0000000000017e94         align      8

                     loc_17e98:
0000000000017e98         test       r12, r12                                    ; CODE XREF=re_search_stub+277
0000000000017e9b         je         loc_17f68

0000000000017ea1         movzx      eax, byte [r15+0x38]
0000000000017ea6         lea        rdx, qword [r13+1]
0000000000017eaa         shr        al, 0x1
0000000000017eac         and        eax, 0x3
0000000000017eaf         je         loc_18020

0000000000017eb5         cmp        eax, 0x1
0000000000017eb8         je         loc_180d0

0000000000017ebe         cmp        eax, 0x2
0000000000017ec1         jne        loc_181b0

0000000000017ec7         cmp        r14, qword [r12]
0000000000017ecb         ja         loc_18191

0000000000017ed1         mov        r9d, 0x2

                     loc_17ed7:
0000000000017ed7         test       r13, r13                                    ; CODE XREF=re_search_stub+812, re_search_stub+906, re_search_stub+1004
0000000000017eda         jle        loc_18148

0000000000017ee0         mov        r8, qword [r12+8]
0000000000017ee5         mov        rdi, qword [r12+0x10]
0000000000017eea         lea        rsi, qword [r13*8]
0000000000017ef2         mov        rdx, r13
0000000000017ef5         xor        eax, eax
0000000000017ef7         nop        word [rax+rax]

                     loc_17f00:
0000000000017f00         mov        rcx, qword [rbp+rax*2]                      ; CODE XREF=re_search_stub+457
0000000000017f05         mov        qword [r8+rax], rcx
0000000000017f09         mov        rcx, qword [rbp+rax*2+8]
0000000000017f0e         mov        qword [rdi+rax], rcx
0000000000017f12         add        rax, 0x8
0000000000017f16         cmp        rsi, rax
0000000000017f19         jne        loc_17f00

                     loc_17f1b:
0000000000017f1b         cmp        qword [r12], rdx                            ; CODE XREF=re_search_stub+1021
0000000000017f1f         jbe        loc_17f4d

0000000000017f21         mov        rsi, qword [r12+0x10]
0000000000017f26         mov        rcx, qword [r12+8]
0000000000017f2b         mov        rax, 0xffffffffffffffff
0000000000017f32         nop        word [rax+rax]

                     loc_17f38:
0000000000017f38         mov        qword [rsi+rdx*8], rax                      ; CODE XREF=re_search_stub+507
0000000000017f3c         add        r13, 0x1
0000000000017f40         mov        qword [rcx+rdx*8], rax
0000000000017f44         cmp        r13, qword [r12]
0000000000017f48         mov        rdx, r13
0000000000017f4b         jb         loc_17f38

                     loc_17f4d:
0000000000017f4d         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+463, re_search_stub+1037, re_search_stub+1053
0000000000017f52         lea        r13d, dword [r9+r9]
0000000000017f56         and        eax, 0xfffffff9
0000000000017f59         or         eax, r13d
0000000000017f5c         test       al, 0x6
0000000000017f5e         mov        byte [r15+0x38], al
0000000000017f62         je         loc_17e73

                     loc_17f68:
0000000000017f68         cmp        byte [rsp+0x68+var_40], 0x0                 ; CODE XREF=re_search_stub+331
0000000000017f6d         mov        r12, qword [rbp]
0000000000017f71         je         loc_17e7a

0000000000017f77         cmp        r12, rbx
0000000000017f7a         jne        loc_18172

0000000000017f80         mov        r12, qword [rbp+8]
0000000000017f84         sub        r12, rbx
0000000000017f87         jmp        loc_17e7a
0000000000017f8c         align      16

                     loc_17f90:
0000000000017f90         mov        r14, qword [r12]                            ; CODE XREF=re_search_stub+171
0000000000017f94         cmp        r14, rcx
0000000000017f97         ja         loc_17e01

0000000000017f9d         test       r14, r14
0000000000017fa0         mov        r13, r14
0000000000017fa3         jg         loc_17e08

0000000000017fa9         nop        dword [rax]

                     loc_17fb0:
0000000000017fb0         mov        edi, 0x10                                   ; CODE XREF=re_search_stub+147, re_search_stub+156
0000000000017fb5         mov        r14d, 0x1
0000000000017fbb         mov        r13d, 0x1
0000000000017fc1         xor        r12d, r12d
0000000000017fc4         jmp        loc_17e0f
0000000000017fc9         align      16

                     loc_17fd0:
0000000000017fd0         mov        rdi, r15                                    ; CODE XREF=re_search_stub+139
0000000000017fd3         mov        qword [rsp+0x68+var_48], r9
0000000000017fd8         mov        qword [rsp+0x68+var_50], rdx
0000000000017fdd         mov        qword [rsp+0x68+var_58], rsi
0000000000017fe2         mov        qword [rsp+0x68+var_60], r8
0000000000017fe7         call       rpl_re_compile_fastmap                      ; rpl_re_compile_fastmap
0000000000017fec         movzx      eax, byte [r15+0x38]
0000000000017ff1         mov        r9, qword [rsp+0x68+var_48]
0000000000017ff6         mov        rdx, qword [rsp+0x68+var_50]
0000000000017ffb         mov        rsi, qword [rsp+0x68+var_58]
0000000000018000         mov        r8, qword [rsp+0x68+var_60]
0000000000018005         jmp        loc_17de1
000000000001800a         align      16

                     loc_18010:
0000000000018010         mov        r8, rdx                                     ; CODE XREF=re_search_stub+60, re_search_stub+74
0000000000018013         jmp        loc_17db7
0000000000018018         align      32

                     loc_18020:
0000000000018020         lea        r14, qword [rdx*8]                          ; CODE XREF=re_search_stub+351
0000000000018028         mov        qword [rsp+0x68+var_60], rdx
000000000001802d         mov        rdi, r14                                    ; argument "__size" for method j_malloc
0000000000018030         call       j_malloc                                    ; malloc
0000000000018035         test       rax, rax
0000000000018038         mov        qword [r12+8], rax
000000000001803d         mov        rdx, qword [rsp+0x68+var_60]
0000000000018042         je         loc_1815a

0000000000018048         mov        rdi, r14                                    ; argument "__size" for method j_malloc
000000000001804b         mov        qword [rsp+0x68+var_60], rdx
0000000000018050         mov        qword [rsp+0x68+var_58], rax
0000000000018055         call       j_malloc                                    ; malloc
000000000001805a         test       rax, rax
000000000001805d         mov        qword [r12+0x10], rax
0000000000018062         mov        rdx, qword [rsp+0x68+var_60]
0000000000018067         mov        rcx, qword [rsp+0x68+var_58]
000000000001806c         je         loc_18152

0000000000018072         mov        qword [r12], rdx
0000000000018076         mov        r9d, 0x1
000000000001807c         jmp        loc_17ed7
0000000000018081         align      8

                     loc_18088:
0000000000018088         movzx      eax, byte [r15+0x38]                        ; CODE XREF=re_search_stub+83, re_search_stub+97
000000000001808d         xor        r8d, r8d
0000000000018090         mov        r13d, eax
0000000000018093         shr        r13b, 0x5
0000000000018097         mov        edi, r13d
000000000001809a         and        edi, 0x3
000000000001809d         mov        dword [rsp+0x68+var_3C], edi
00000000000180a1         jmp        loc_17de1
00000000000180a6         align      16

                     loc_180b0:
00000000000180b0         mov        r12, 0xffffffffffffffff                     ; CODE XREF=re_search_stub+36, re_search_stub+45
00000000000180b7         jmp        loc_17e82
00000000000180bc         align      64

                     loc_180c0:
00000000000180c0         mov        r12, 0xfffffffffffffffe                     ; CODE XREF=re_search_stub+222
00000000000180c7         jmp        loc_17e82
00000000000180cc         align      16

                     loc_180d0:
00000000000180d0         cmp        qword [r12], rdx                            ; CODE XREF=re_search_stub+360
00000000000180d4         mov        r9d, 0x1
00000000000180da         jae        loc_17ed7

00000000000180e0         lea        rcx, qword [rdx*8]
00000000000180e8         mov        rdi, qword [r12+8]                          ; argument "__ptr" for method j_realloc
00000000000180ed         mov        byte [rsp+0x68+var_50], r9b
00000000000180f2         mov        qword [rsp+0x68+var_58], rdx
00000000000180f7         mov        rsi, rcx                                    ; argument "__size" for method j_realloc
00000000000180fa         mov        qword [rsp+0x68+var_60], rcx
00000000000180ff         call       j_realloc                                   ; realloc
0000000000018104         test       rax, rax
0000000000018107         mov        r14, rax
000000000001810a         je         loc_1815a

000000000001810c         mov        rcx, qword [rsp+0x68+var_60]
0000000000018111         mov        rdi, qword [r12+0x10]                       ; argument "__ptr" for method j_realloc
0000000000018116         mov        rsi, rcx                                    ; argument "__size" for method j_realloc
0000000000018119         call       j_realloc                                   ; realloc
000000000001811e         test       rax, rax
0000000000018121         mov        rdx, qword [rsp+0x68+var_58]
0000000000018126         movzx      r9d, byte [rsp+0x68+var_50]
000000000001812c         je         loc_18162

000000000001812e         mov        qword [r12+8], r14
0000000000018133         mov        qword [r12+0x10], rax
0000000000018138         mov        qword [r12], rdx
000000000001813c         jmp        loc_17ed7
0000000000018141         align      8

                     loc_18148:
0000000000018148         xor        edx, edx                                    ; CODE XREF=re_search_stub+394
000000000001814a         xor        r13d, r13d
000000000001814d         jmp        loc_17f1b

                     loc_18152:
0000000000018152         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_stub+796
0000000000018155         call       j_free                                      ; free

                     loc_1815a:
000000000001815a         xor        r9d, r9d                                    ; CODE XREF=re_search_stub+754, re_search_stub+954
000000000001815d         jmp        loc_17f4d

                     loc_18162:
0000000000018162         mov        rdi, r14                                    ; argument "__ptr" for method j_free, CODE XREF=re_search_stub+988
0000000000018165         call       j_free                                      ; free
000000000001816a         xor        r9d, r9d
000000000001816d         jmp        loc_17f4d

                     loc_18172:
0000000000018172         lea        rcx, qword [__PRETTY_FUNCTION__.7847]       ; argument "__function" for method j___assert_fail, "re_search_stub", CODE XREF=re_search_stub+554
0000000000018179         lea        rsi, qword [aCoreutils831li_1c6d0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
0000000000018180         lea        rdi, qword [aPmatch0rmsoSta]                ; argument "__assertion" for method j___assert_fail, "pmatch[0].rm_so == start"
0000000000018187         mov        edx, 0x1be                                  ; argument "__line" for method j___assert_fail
000000000001818c         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_18191:
0000000000018191         lea        rcx, qword [__PRETTY_FUNCTION__.7859]       ; argument "__function" for method j___assert_fail, "re_copy_regs", CODE XREF=re_search_stub+379
0000000000018198         lea        rsi, qword [aCoreutils831li_1c6d0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
000000000001819f         lea        rdi, qword [aRegsnumregsNre]                ; argument "__assertion" for method j___assert_fail, "regs->num_regs >= nregs"
00000000000181a6         mov        edx, 0x1fb                                  ; argument "__line" for method j___assert_fail
00000000000181ab         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_181b0:
00000000000181b0         lea        rcx, qword [__PRETTY_FUNCTION__.7859]       ; argument "__function" for method j___assert_fail, "re_copy_regs", CODE XREF=re_search_stub+369
00000000000181b7         lea        rsi, qword [aCoreutils831li_1c6d0]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/regexec.c"
00000000000181be         lea        rdi, qword [aRegsallocatedR]                ; argument "__assertion" for method j___assert_fail, "regs_allocated == REGS_FIXED"
00000000000181c5         mov        edx, 0x1f9                                  ; argument "__line" for method j___assert_fail
00000000000181ca         call       j___assert_fail                             ; __assert_fail
                        ; endp
00000000000181cf         align      16                                          ; End of unwind block (FDE at 0x1f9dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_3C: int32_t, -60
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     re_search_2_stub:
00000000000181d0         push       r15                                         ; Begin of unwind block (FDE at 0x1fa3c), CODE XREF=rpl_re_match_2+16, rpl_re_search_2+18
00000000000181d2         push       r14
00000000000181d4         push       r13
00000000000181d6         push       r12
00000000000181d8         mov        r12, rdi
00000000000181db         push       rbp
00000000000181dc         push       rbx
00000000000181dd         mov        rbp, r8
00000000000181e0         mov        rbx, rdx
00000000000181e3         mov        rdx, rbp
00000000000181e6         sub        rsp, 0x28
00000000000181ea         shr        rdx, 0x3f
00000000000181ee         mov        rax, qword [rsp+0x58+arg_10]
00000000000181f3         mov        edi, edx
00000000000181f5         mov        r8d, dword [rsp+0x58+arg_18]
00000000000181fa         shr        rax, 0x3f
00000000000181fe         or         dil, al
0000000000018201         jne        loc_182d0

0000000000018207         test       rbx, rbx
000000000001820a         js         loc_182d0

0000000000018210         mov        r15, rbx
0000000000018213         add        r15, rbp
0000000000018216         jo         loc_182d0

000000000001821c         test       rbp, rbp
000000000001821f         mov        r14, rcx
0000000000018222         mov        rcx, r9
0000000000018225         je         loc_182e0

000000000001822b         xor        r13d, r13d
000000000001822e         test       rbx, rbx
0000000000018231         mov        qword [rsp+0x58+var_50], rsi
0000000000018236         jne        loc_18280

                     loc_18238:
0000000000018238         movzx      r8d, r8b                                    ; CODE XREF=re_search_2_stub+247, re_search_2_stub+278
000000000001823c         mov        rdx, r15
000000000001823f         mov        rsi, r14
0000000000018242         push       r8
0000000000018244         push       qword [rsp+0x60+arg_8]
0000000000018248         mov        rdi, r12
000000000001824b         mov        r9, qword [rsp+0x68+arg_10]
0000000000018253         mov        r8, qword [rsp+0x68+arg_0]
0000000000018258         call       re_search_stub                              ; re_search_stub
000000000001825d         mov        rdi, r13                                    ; argument "__ptr" for method j_free
0000000000018260         mov        rbx, rax
0000000000018263         call       j_free                                      ; free
0000000000018268         pop        rax
0000000000018269         pop        rdx

                     loc_1826a:
000000000001826a         add        rsp, 0x28                                   ; CODE XREF=re_search_2_stub+263
000000000001826e         mov        rax, rbx
0000000000018271         pop        rbx
0000000000018272         pop        rbp
0000000000018273         pop        r12
0000000000018275         pop        r13
0000000000018277         pop        r14
0000000000018279         pop        r15
000000000001827b         ret
                        ; endp
000000000001827c         align      128

                     loc_18280:
0000000000018280         mov        rdi, r15                                    ; argument "__size" for method j_malloc, CODE XREF=re_search_2_stub+102
0000000000018283         mov        dword [rsp+0x58+var_3C], r8d
0000000000018288         mov        qword [rsp+0x58+var_48], r9
000000000001828d         call       j_malloc                                    ; malloc
0000000000018292         test       rax, rax
0000000000018295         mov        r13, rax
0000000000018298         je         loc_182d0

000000000001829a         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__src" for method j_memcpy
000000000001829f         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
00000000000182a2         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000182a5         call       j_memcpy                                    ; memcpy
00000000000182aa         lea        rdi, qword [r13+rbx]                        ; argument "__dest" for method j_memcpy
00000000000182af         mov        rsi, r14                                    ; argument "__src" for method j_memcpy
00000000000182b2         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
00000000000182b5         mov        r14, r13
00000000000182b8         call       j_memcpy                                    ; memcpy
00000000000182bd         mov        rcx, qword [rsp+0x58+var_48]
00000000000182c2         mov        r8d, dword [rsp+0x58+var_3C]
00000000000182c7         jmp        loc_18238
00000000000182cc         align      16

                     loc_182d0:
00000000000182d0         mov        rbx, 0xfffffffffffffffe                     ; CODE XREF=re_search_2_stub+49, re_search_2_stub+58, re_search_2_stub+70, re_search_2_stub+200
00000000000182d7         jmp        loc_1826a
00000000000182d9         align      32

                     loc_182e0:
00000000000182e0         mov        r14, rsi                                    ; CODE XREF=re_search_2_stub+85
00000000000182e3         xor        r13d, r13d
00000000000182e6         jmp        loc_18238
00000000000182eb         align      16                                          ; End of unwind block (FDE at 0x1fa3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regcomp:
00000000000182f0         mov        eax, edx                                    ; Begin of unwind block (FDE at 0x1fa94)
00000000000182f2         push       r14
00000000000182f4         push       r13
00000000000182f6         and        eax, 0x1
00000000000182f9         push       r12
00000000000182fb         push       rbp
00000000000182fc         cmp        eax, 0x1
00000000000182ff         push       rbx
0000000000018300         mov        rbx, rdi
0000000000018303         sbb        r14, r14
0000000000018306         mov        qword [rdi], 0x0
000000000001830d         mov        qword [rdi+8], 0x0
0000000000018315         and        r14d, 0xfd4fca
000000000001831c         mov        qword [rdi+0x10], 0x0
0000000000018324         mov        edi, 0x100                                  ; argument "__size" for method j_malloc
0000000000018329         mov        r12, rsi
000000000001832c         mov        ebp, edx
000000000001832e         add        r14, 0x3b2fc
0000000000018335         call       j_malloc                                    ; malloc
000000000001833a         test       rax, rax
000000000001833d         mov        qword [rbx+0x20], rax
0000000000018341         je         loc_183f0

0000000000018347         mov        r13, rbp
000000000001834a         shl        r13, 0x15
000000000001834e         and        r13d, 0x400000
0000000000018355         or         r13, r14
0000000000018358         test       bpl, 0x4
000000000001835c         jne        loc_183c0

000000000001835e         and        byte [rbx+0x38], 0x7f

                     loc_18362:
0000000000018362         movzx      edx, byte [rbx+0x38]                        ; CODE XREF=rpl_regcomp+223
0000000000018366         shr        ebp, 0x3
0000000000018369         mov        rdi, r12                                    ; argument "__s" for method j_strlen
000000000001836c         and        ebp, 0x1
000000000001836f         mov        qword [rbx+0x28], 0x0
0000000000018377         shl        ebp, 0x4
000000000001837a         and        edx, 0xffffffef
000000000001837d         or         ebp, edx
000000000001837f         mov        byte [rbx+0x38], bpl
0000000000018383         call       j_strlen                                    ; strlen
0000000000018388         mov        rcx, r13
000000000001838b         mov        rdx, rax
000000000001838e         mov        rsi, r12
0000000000018391         mov        rdi, rbx
0000000000018394         call       re_compile_internal                         ; re_compile_internal
0000000000018399         cmp        eax, 0x10
000000000001839c         mov        ebp, eax
000000000001839e         je         loc_183d8

00000000000183a0         test       eax, eax
00000000000183a2         jne        loc_183dd

00000000000183a4         mov        rdi, rbx
00000000000183a7         call       rpl_re_compile_fastmap                      ; rpl_re_compile_fastmap

                     loc_183ac:
00000000000183ac         pop        rbx                                         ; CODE XREF=rpl_regcomp+254
00000000000183ad         mov        eax, ebp
00000000000183af         pop        rbp
00000000000183b0         pop        r12
00000000000183b2         pop        r13
00000000000183b4         pop        r14
00000000000183b6         ret
                        ; endp
00000000000183b7         align      64

                     loc_183c0:
00000000000183c0         and        r13, 0xffffffffffffffbf                     ; CODE XREF=rpl_regcomp+108
00000000000183c4         or         byte [rbx+0x38], 0x80
00000000000183c8         or         r13, 0x100
00000000000183cf         jmp        loc_18362
00000000000183d1         align      8

                     loc_183d8:
00000000000183d8         mov        ebp, 0x8                                    ; CODE XREF=rpl_regcomp+174

                     loc_183dd:
00000000000183dd         mov        rdi, qword [rbx+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=rpl_regcomp+178
00000000000183e1         call       j_free                                      ; free
00000000000183e6         mov        qword [rbx+0x20], 0x0
00000000000183ee         jmp        loc_183ac

                     loc_183f0:
00000000000183f0         mov        ebp, 0xc                                    ; CODE XREF=rpl_regcomp+81
00000000000183f5         pop        rbx
00000000000183f6         mov        eax, ebp
00000000000183f8         pop        rbp
00000000000183f9         pop        r12
00000000000183fb         pop        r13
00000000000183fd         pop        r14
00000000000183ff         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regerror:
0000000000018400         push       r13                                         ; End of unwind block (FDE at 0x1fa94), Begin of unwind block (FDE at 0x1fae0)
0000000000018402         push       r12
0000000000018404         push       rbp
0000000000018405         push       rbx
0000000000018406         sub        rsp, 0x8
000000000001840a         cmp        edi, 0x10
000000000001840d         ja         loc_18470

000000000001840f         lea        rax, qword [__re_error_msgid_idx]           ; __re_error_msgid_idx
0000000000018416         movsxd     rdi, edi
0000000000018419         lea        rsi, qword [__re_error_msgid]               ; "Success"
0000000000018420         mov        rbp, rdx
0000000000018423         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000018428         mov        r12, rcx
000000000001842b         add        rsi, qword [rax+rdi*8]                      ; argument "msgid" for method j_dcgettext
000000000001842f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000018431         call       j_dcgettext                                 ; dcgettext
0000000000018436         mov        rdi, rax                                    ; argument "__s" for method j_strlen
0000000000018439         mov        r13, rax
000000000001843c         call       j_strlen                                    ; strlen
0000000000018441         test       r12, r12
0000000000018444         lea        rbx, qword [rax+1]
0000000000018448         je         loc_1845d

000000000001844a         cmp        rbx, r12
000000000001844d         mov        rdx, rbx
0000000000018450         ja         loc_18478

                     loc_18452:
0000000000018452         mov        rsi, r13                                    ; argument "__src" for method j_memcpy, CODE XREF=rpl_regerror+131
0000000000018455         mov        rdi, rbp                                    ; argument "__dest" for method j_memcpy
0000000000018458         call       j_memcpy                                    ; memcpy

                     loc_1845d:
000000000001845d         add        rsp, 0x8                                    ; CODE XREF=rpl_regerror+72
0000000000018461         mov        rax, rbx
0000000000018464         pop        rbx
0000000000018465         pop        rbp
0000000000018466         pop        r12
0000000000018468         pop        r13
000000000001846a         ret
                        ; endp
000000000001846b         align      16

                     loc_18470:
0000000000018470         call       j_abort                                     ; abort, CODE XREF=rpl_regerror+13
                        ; endp
0000000000018475         align      8

                     loc_18478:
0000000000018478         lea        rdx, qword [r12-1]                          ; CODE XREF=rpl_regerror+80
000000000001847d         mov        byte [rbp+r12-1], 0x0
0000000000018483         jmp        loc_18452
0000000000018485         align      16                                          ; End of unwind block (FDE at 0x1fae0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_regfree:
0000000000018490         push       rbx                                         ; Begin of unwind block (FDE at 0x1fb1c)
0000000000018491         mov        rbx, rdi
0000000000018494         mov        rdi, qword [rdi]
0000000000018497         test       rdi, rdi
000000000001849a         je         loc_184a1

000000000001849c         call       free_dfa_content                            ; free_dfa_content

                     loc_184a1:
00000000000184a1         mov        rdi, qword [rbx+0x20]                       ; argument "__ptr" for method j_free, CODE XREF=rpl_regfree+10
00000000000184a5         mov        qword [rbx], 0x0
00000000000184ac         mov        qword [rbx+8], 0x0
00000000000184b4         call       j_free                                      ; free
00000000000184b9         mov        rdi, qword [rbx+0x28]                       ; argument "__ptr" for method j_free
00000000000184bd         mov        qword [rbx+0x20], 0x0
00000000000184c5         call       j_free                                      ; free
00000000000184ca         mov        qword [rbx+0x28], 0x0
00000000000184d2         pop        rbx
00000000000184d3         ret
                        ; endp
00000000000184d4         align      32                                          ; End of unwind block (FDE at 0x1fb1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48


                     rpl_regexec:
00000000000184e0         test       r8d, 0xfffffff8                             ; Begin of unwind block (FDE at 0x1fb38)
00000000000184e7         jne        loc_18578

00000000000184ed         push       r13
00000000000184ef         push       r12
00000000000184f1         mov        r13, rdx
00000000000184f4         push       rbp
00000000000184f5         push       rbx
00000000000184f6         mov        r12, rcx
00000000000184f9         mov        ebx, r8d
00000000000184fc         mov        rbp, rdi
00000000000184ff         sub        rsp, 0x18
0000000000018503         test       r8b, 0x4
0000000000018507         jne        loc_18558

0000000000018509         mov        rdi, rsi                                    ; argument "__s" for method j_strlen
000000000001850c         mov        qword [rsp+0x38+var_30], rsi
0000000000018511         call       j_strlen                                    ; strlen
0000000000018516         xor        ecx, ecx
0000000000018518         test       byte [rbp+0x38], 0x10
000000000001851c         mov        rdx, rax
000000000001851f         mov        rsi, qword [rsp+0x38+var_30]
0000000000018524         je         loc_18566

                     loc_18526:
0000000000018526         sub        rsp, 0x8                                    ; CODE XREF=rpl_regexec+132
000000000001852a         push       rbx
000000000001852b         push       0x0
000000000001852d         push       0x0

                     loc_1852f:
000000000001852f         mov        rdi, rbp                                    ; CODE XREF=rpl_regexec+143
0000000000018532         mov        r9, rdx
0000000000018535         mov        r8, rdx
0000000000018538         call       re_search_internal                          ; re_search_internal
000000000001853d         add        rsp, 0x20
0000000000018541         test       eax, eax
0000000000018543         setne      al
0000000000018546         add        rsp, 0x18
000000000001854a         pop        rbx
000000000001854b         movzx      eax, al
000000000001854e         pop        rbp
000000000001854f         pop        r12
0000000000018551         pop        r13
0000000000018553         ret
                        ; endp
0000000000018554         align      8

                     loc_18558:
0000000000018558         test       byte [rbp+0x38], 0x10                       ; CODE XREF=rpl_regexec+39
000000000001855c         mov        rcx, qword [rcx]
000000000001855f         mov        rdx, qword [r12+8]
0000000000018564         jne        loc_18526

                     loc_18566:
0000000000018566         sub        rsp, 0x8                                    ; CODE XREF=rpl_regexec+68
000000000001856a         push       rbx
000000000001856b         push       r12
000000000001856d         push       r13
000000000001856f         jmp        loc_1852f
0000000000018571         align      8

                     loc_18578:
0000000000018578         mov        eax, 0x2                                    ; CODE XREF=rpl_regexec+7
000000000001857d         ret
                        ; endp
000000000001857e         align      128                                         ; End of unwind block (FDE at 0x1fb38)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_match:
0000000000018580         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1fb94), CODE XREF=main+3221, sub_31ea+712, sub_31ea+880, sub_31ea+1234, sub_31ea+1793, sub_31ea+2319
0000000000018584         mov        r9, rdx
0000000000018587         push       0x1
0000000000018589         push       r8
000000000001858b         xor        r8d, r8d
000000000001858e         call       re_search_stub                              ; re_search_stub
0000000000018593         add        rsp, 0x18
0000000000018597         ret
                        ; endp
0000000000018598         align      32                                          ; End of unwind block (FDE at 0x1fb94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_search:
00000000000185a0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1fbb4), CODE XREF=main+1944, main+2101
00000000000185a4         push       0x0
00000000000185a6         push       r9
00000000000185a8         mov        r9, rdx
00000000000185ab         call       re_search_stub                              ; re_search_stub
00000000000185b0         add        rsp, 0x18
00000000000185b4         ret
                        ; endp
00000000000185b5         align      64                                          ; End of unwind block (FDE at 0x1fbb4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     rpl_re_match_2:
00000000000185c0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1fbd4)
00000000000185c4         push       0x1
00000000000185c6         push       qword [rsp+0x10+arg_8]
00000000000185ca         push       qword [rsp+0x18+arg_0]
00000000000185ce         push       0x0
00000000000185d0         call       re_search_2_stub                            ; re_search_2_stub
00000000000185d5         add        rsp, 0x28
00000000000185d9         ret
                        ; endp
00000000000185da         align      32                                          ; End of unwind block (FDE at 0x1fbd4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     rpl_re_search_2:
00000000000185e0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1fbf8)
00000000000185e4         push       0x0
00000000000185e6         push       qword [rsp+0x10+arg_10]
00000000000185ea         push       qword [rsp+0x18+arg_8]
00000000000185ee         push       qword [rsp+0x20+arg_0]
00000000000185f2         call       re_search_2_stub                            ; re_search_2_stub
00000000000185f7         add        rsp, 0x28
00000000000185fb         ret
                        ; endp
00000000000185fc         align      512                                         ; End of unwind block (FDE at 0x1fbf8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_re_set_registers:
0000000000018600         test       rdx, rdx                                    ; Begin of unwind block (FDE at 0x1fc1c)
0000000000018603         jne        loc_18628

0000000000018605         and        byte [rdi+0x38], 0xf9
0000000000018609         mov        qword [rsi], 0x0
0000000000018610         mov        qword [rsi+0x10], 0x0
0000000000018618         mov        qword [rsi+8], 0x0
0000000000018620         ret
                        ; endp
0000000000018621         align      8

                     loc_18628:
0000000000018628         movzx      eax, byte [rdi+0x38]                        ; CODE XREF=rpl_re_set_registers+3
000000000001862c         and        eax, 0xfffffff9
000000000001862f         or         eax, 0x2
0000000000018632         mov        byte [rdi+0x38], al
0000000000018635         mov        qword [rsi], rdx
0000000000018638         mov        qword [rsi+8], rcx
000000000001863c         mov        qword [rsi+0x10], r8
0000000000018640         ret
                        ; endp
0000000000018641         align      16                                          ; End of unwind block (FDE at 0x1fc1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     c_strcasecmp:
0000000000018650         xor        eax, eax                                    ; Begin of unwind block (FDE at 0x1fc34), CODE XREF=proper_name_utf8+56, str_iconv+30
0000000000018652         cmp        rdi, rsi
0000000000018655         jne        loc_1866c

0000000000018657         jmp        loc_1869c
0000000000018659         align      32

                     loc_18660:
0000000000018660         add        rdi, 0x1                                    ; CODE XREF=c_strcasecmp+66
0000000000018664         add        rsi, 0x1
0000000000018668         cmp        al, dl
000000000001866a         jne        loc_18694

                     loc_1866c:
000000000001866c         movzx      eax, byte [rdi]                             ; CODE XREF=c_strcasecmp+5
000000000001866f         mov        edx, eax
0000000000018671         lea        ecx, dword [rax+0x20]
0000000000018674         sub        edx, 0x41
0000000000018677         cmp        dl, 0x1a
000000000001867a         movzx      edx, byte [rsi]
000000000001867d         cmovb      eax, ecx
0000000000018680         mov        ecx, edx
0000000000018682         lea        r9d, dword [rdx+0x20]
0000000000018686         sub        ecx, 0x41
0000000000018689         cmp        cl, 0x1a
000000000001868c         cmovb      edx, r9d
0000000000018690         test       al, al
0000000000018692         jne        loc_18660

                     loc_18694:
0000000000018694         movzx      eax, al                                     ; CODE XREF=c_strcasecmp+26
0000000000018697         movzx      edx, dl
000000000001869a         sub        eax, edx

                     loc_1869c:
000000000001869c         ret                                                    ; CODE XREF=c_strcasecmp+7
                        ; endp
000000000001869e         align      32                                          ; End of unwind block (FDE at 0x1fc34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
00000000000186a0         push       r12                                         ; Begin of unwind block (FDE at 0x1fc4c), CODE XREF=close_stdout+13, close_stdout+51
00000000000186a2         push       rbp
00000000000186a3         mov        rbp, rdi
00000000000186a6         push       rbx
00000000000186a7         call       j___fpending                                ; __fpending
00000000000186ac         mov        ebx, dword [rbp]
00000000000186af         mov        rdi, rbp
00000000000186b2         mov        r12, rax
00000000000186b5         call       rpl_fclose                                  ; rpl_fclose
00000000000186ba         and        ebx, 0x20
00000000000186bd         test       ebx, ebx
00000000000186bf         jne        loc_186d8

00000000000186c1         test       eax, eax
00000000000186c3         je         loc_186cf

00000000000186c5         test       r12, r12
00000000000186c8         mov        eax, 0xffffffff
00000000000186cd         je         loc_18708

                     loc_186cf:
00000000000186cf         pop        rbx                                         ; CODE XREF=close_stream+35
00000000000186d0         pop        rbp
00000000000186d1         pop        r12
00000000000186d3         ret
                        ; endp
00000000000186d4         align      8

                     loc_186d8:
00000000000186d8         test       eax, eax                                    ; CODE XREF=close_stream+31
00000000000186da         jne        loc_186f8

00000000000186dc         call       j___errno_location                          ; __errno_location
00000000000186e1         mov        dword [rax], 0x0
00000000000186e7         mov        eax, 0xffffffff
00000000000186ec         pop        rbx
00000000000186ed         pop        rbp
00000000000186ee         pop        r12
00000000000186f0         ret
                        ; endp
00000000000186f1         align      8

                     loc_186f8:
00000000000186f8         pop        rbx                                         ; CODE XREF=close_stream+58
00000000000186f9         mov        eax, 0xffffffff
00000000000186fe         pop        rbp
00000000000186ff         pop        r12
0000000000018701         ret
                        ; endp
0000000000018702         align      8

                     loc_18708:
0000000000018708         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
000000000001870d         cmp        dword [rax], 0x9
0000000000018710         pop        rbx
0000000000018711         pop        rbp
0000000000018712         pop        r12
0000000000018714         setne      al
0000000000018717         movzx      eax, al
000000000001871a         neg        eax
000000000001871c         ret
                        ; endp
000000000001871d         align      32                                          ; End of unwind block (FDE at 0x1fc4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
0000000000018720         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x1fc9c), CODE XREF=rpl_mbrtowc+71
0000000000018724         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000018726         call       j_setlocale                                 ; setlocale
000000000001872b         mov        rdx, rax
000000000001872e         mov        eax, 0x1
0000000000018733         test       rdx, rdx
0000000000018736         je         loc_18755

0000000000018738         lea        rdi, qword [__re_error_msgid+400]           ; 0x1cf50
000000000001873f         mov        ecx, 0x2
0000000000018744         mov        rsi, rdx
0000000000018747         rep  cmpsb byte [rsi], byte [rdi]
0000000000018749         seta       cl
000000000001874c         sbb        cl, 0x0
000000000001874f         xor        eax, eax
0000000000018751         test       cl, cl
0000000000018753         jne        loc_18760

                     loc_18755:
0000000000018755         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
0000000000018759         ret
                        ; endp
000000000001875a         align      32

                     loc_18760:
0000000000018760         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
0000000000018767         mov        ecx, 0x6
000000000001876c         mov        rsi, rdx
000000000001876f         rep  cmpsb byte [rsi], byte [rdi]
0000000000018771         seta       al
0000000000018774         sbb        al, 0x0
0000000000018776         test       al, al
0000000000018778         setne      al
000000000001877b         add        rsp, 0x8
000000000001877f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
0000000000018780         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0x1fc9c), Begin of unwind block (FDE at 0x1fcbc), CODE XREF=proper_name_utf8+38, gettext_quote.part.1+11
0000000000018784         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
0000000000018789         call       j_nl_langinfo                               ; nl_langinfo
000000000001878e         test       rax, rax
0000000000018791         je         loc_187b0

0000000000018793         cmp        byte [rax], 0x0
0000000000018796         lea        rdx, qword [aAscii]                         ; "ASCII"
000000000001879d         cmove      rax, rdx
00000000000187a1         add        rsp, 0x8
00000000000187a5         ret
                        ; endp
00000000000187a6         align      16

                     loc_187b0:
00000000000187b0         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
00000000000187b7         add        rsp, 0x8
00000000000187bb         ret
                        ; endp
00000000000187bc         align      64                                          ; End of unwind block (FDE at 0x1fcbc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mb_width_aux:
00000000000187c0         push       rbx                                         ; Begin of unwind block (FDE at 0x1fcdc)
00000000000187c1         mov        ebx, edi
00000000000187c3         call       j_wcwidth                                   ; wcwidth
00000000000187c8         test       eax, eax
00000000000187ca         js         loc_187d0

00000000000187cc         pop        rbx
00000000000187cd         ret
                        ; endp
00000000000187ce         align      16

                     loc_187d0:
00000000000187d0         mov        edi, ebx                                    ; argument "__wc" for method j_iswcntrl, CODE XREF=mb_width_aux+10
00000000000187d2         call       j_iswcntrl                                  ; iswcntrl
00000000000187d7         test       eax, eax
00000000000187d9         sete       al
00000000000187dc         movzx      eax, al
00000000000187df         pop        rbx
00000000000187e0         ret
                        ; endp
00000000000187e1         align      16                                          ; End of unwind block (FDE at 0x1fcdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mb_copy:
00000000000187f0         push       rbp                                         ; Begin of unwind block (FDE at 0x1fcfc)
00000000000187f1         push       rbx
00000000000187f2         mov        rbx, rsi
00000000000187f5         lea        rax, qword [rbx+0x18]
00000000000187f9         mov        rbp, rdi
00000000000187fc         sub        rsp, 0x8
0000000000018800         mov        rsi, qword [rsi]
0000000000018803         mov        rdx, qword [rbx+8]
0000000000018807         cmp        rsi, rax
000000000001880a         je         loc_18830

000000000001880c         mov        qword [rdi], rsi

                     loc_1880f:
000000000001880f         movzx      eax, byte [rbx+0x10]                        ; CODE XREF=mb_copy+84
0000000000018813         mov        qword [rbp+8], rdx
0000000000018817         test       al, al
0000000000018819         mov        byte [rbp+0x10], al
000000000001881c         je         loc_18824

000000000001881e         mov        eax, dword [rbx+0x14]
0000000000018821         mov        dword [rbp+0x14], eax

                     loc_18824:
0000000000018824         add        rsp, 0x8                                    ; CODE XREF=mb_copy+44
0000000000018828         pop        rbx
0000000000018829         pop        rbp
000000000001882a         ret
                        ; endp
000000000001882b         align      16

                     loc_18830:
0000000000018830         lea        rcx, qword [rdi+0x18]                       ; CODE XREF=mb_copy+26
0000000000018834         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
0000000000018837         call       j_memcpy                                    ; memcpy
000000000001883c         mov        rdx, qword [rbx+8]
0000000000018840         mov        qword [rbp], rax
0000000000018844         jmp        loc_1880f
0000000000018846         align      16                                          ; End of unwind block (FDE at 0x1fcfc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     is_basic:
0000000000018850         mov        eax, edi                                    ; Begin of unwind block (FDE at 0x1fd28)
0000000000018852         lea        rdx, qword [is_basic_table]                 ; is_basic_table
0000000000018859         mov        ecx, edi
000000000001885b         shr        al, 0x5
000000000001885e         and        ecx, 0x1f
0000000000018861         and        eax, 0x7
0000000000018864         mov        eax, dword [rdx+rax*4]
0000000000018867         shr        eax, cl
0000000000018869         and        eax, 0x1
000000000001886c         ret
                        ; endp
000000000001886d         align      16                                          ; End of unwind block (FDE at 0x1fd28)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int8_t, -16
        ;    var_18: int64_t, -24
        ;    var_21: int8_t, -33
        ;    var_28: int64_t, -40
        ;    var_30: int64_t, -48


                     knuth_morris_pratt:
0000000000018870         push       rbp                                         ; Begin of unwind block (FDE at 0x1fd3c), CODE XREF=mbsstr+264
0000000000018871         mov        rbp, rsp
0000000000018874         push       r12
0000000000018876         push       rbx
0000000000018877         mov        r12, rdx
000000000001887a         mov        edx, 0x8
000000000001887f         mov        rbx, rdi
0000000000018882         sub        rsp, 0x20
0000000000018886         mov        rax, qword [fs:0x28]
000000000001888f         mov        qword [rbp+var_18], rax
0000000000018893         xor        eax, eax
0000000000018895         mov        rax, rdx
0000000000018898         mul        r12
000000000001889b         jo         loc_18a0d

00000000000188a1         xor        edi, edi

                     loc_188a3:
00000000000188a3         test       rax, rax                                    ; CODE XREF=knuth_morris_pratt+418
00000000000188a6         js         loc_18980

00000000000188ac         test       rdi, rdi
00000000000188af         jne        loc_18980

00000000000188b5         lea        rdi, qword [r12*8]
00000000000188bd         cmp        rdi, 0xfa0
00000000000188c4         ja         loc_189e8

00000000000188ca         add        rdi, 0x3d
00000000000188ce         and        rdi, 0xfffffffffffffff0
00000000000188d2         sub        rsp, rdi
00000000000188d5         lea        rdi, qword [rsp+0x30+var_21]
00000000000188da         and        rdi, 0xfffffffffffffff0
00000000000188de         add        rdi, 0x1f
00000000000188e2         and        rdi, 0xffffffffffffffe0

                     loc_188e6:
00000000000188e6         test       rdi, rdi                                    ; CODE XREF=knuth_morris_pratt+400
00000000000188e9         je         loc_18980

00000000000188ef         cmp        r12, 0x2
00000000000188f3         mov        qword [rdi+8], 0x1
00000000000188fb         jbe        loc_18941

00000000000188fd         xor        edx, edx
00000000000188ff         mov        r8d, 0x2
0000000000018905         nop        dword [rax]

                     loc_18908:
0000000000018908         movzx      eax, byte [rsi+r8-1]                        ; CODE XREF=knuth_morris_pratt+207
000000000001890e         cmp        al, byte [rsi+rdx]
0000000000018911         jne        loc_1892d

0000000000018913         jmp        loc_189d0
0000000000018918         align      32

                     loc_18920:
0000000000018920         sub        rdx, qword [rdi+rdx*8]                      ; CODE XREF=knuth_morris_pratt+192
0000000000018924         cmp        byte [rsi+rdx], al
0000000000018927         je         loc_189d0

                     loc_1892d:
000000000001892d         test       rdx, rdx                                    ; CODE XREF=knuth_morris_pratt+161
0000000000018930         jne        loc_18920

0000000000018932         mov        qword [rdi+r8*8], r8
0000000000018936         xor        edx, edx

                     loc_18938:
0000000000018938         add        r8, 0x1                                     ; CODE XREF=knuth_morris_pratt+366
000000000001893c         cmp        r12, r8
000000000001893f         jne        loc_18908

                     loc_18941:
0000000000018941         mov        qword [rcx], 0x0                            ; CODE XREF=knuth_morris_pratt+139
0000000000018948         movzx      edx, byte [rbx]
000000000001894b         mov        r8, rbx
000000000001894e         xor        eax, eax

                     loc_18950:
0000000000018950         test       dl, dl                                      ; CODE XREF=knuth_morris_pratt+325, knuth_morris_pratt+349
0000000000018952         je         loc_1896c

                     loc_18954:
0000000000018954         cmp        byte [rsi+rax], dl                          ; CODE XREF=knuth_morris_pratt+250
0000000000018957         je         loc_189a0

0000000000018959         test       rax, rax
000000000001895c         je         loc_189c0

000000000001895e         mov        r9, qword [rdi+rax*8]
0000000000018962         add        rbx, r9
0000000000018965         sub        rax, r9
0000000000018968         test       dl, dl
000000000001896a         jne        loc_18954

                     loc_1896c:
000000000001896c         call       freea                                       ; freea, CODE XREF=knuth_morris_pratt+226, knuth_morris_pratt+408
0000000000018971         mov        eax, 0x1
0000000000018976         jmp        loc_18982
0000000000018978         align      128

                     loc_18980:
0000000000018980         xor        eax, eax                                    ; CODE XREF=knuth_morris_pratt+54, knuth_morris_pratt+63, knuth_morris_pratt+121

                     loc_18982:
0000000000018982         mov        rcx, qword [rbp+var_18]                     ; CODE XREF=knuth_morris_pratt+262
0000000000018986         xor        rcx, qword [fs:0x28]
000000000001898f         jne        loc_18a17

0000000000018995         lea        rsp, qword [rbp+var_10]
0000000000018999         pop        rbx
000000000001899a         pop        r12
000000000001899c         pop        rbp
000000000001899d         ret
                        ; endp
000000000001899e         align      32

                     loc_189a0:
00000000000189a0         add        rax, 0x1                                    ; CODE XREF=knuth_morris_pratt+231
00000000000189a4         lea        r9, qword [r8+1]
00000000000189a8         cmp        r12, rax
00000000000189ab         je         loc_18a05

00000000000189ad         movzx      edx, byte [r8+1]
00000000000189b2         mov        r8, r9
00000000000189b5         jmp        loc_18950
00000000000189b7         align      64

                     loc_189c0:
00000000000189c0         movzx      edx, byte [r8+1]                            ; CODE XREF=knuth_morris_pratt+236
00000000000189c5         add        rbx, 0x1
00000000000189c9         add        r8, 0x1
00000000000189cd         jmp        loc_18950
00000000000189cf         align      16

                     loc_189d0:
00000000000189d0         add        rdx, 0x1                                    ; CODE XREF=knuth_morris_pratt+163, knuth_morris_pratt+183
00000000000189d4         mov        rax, r8
00000000000189d7         sub        rax, rdx
00000000000189da         mov        qword [rdi+r8*8], rax
00000000000189de         jmp        loc_18938
00000000000189e3         align      8

                     loc_189e8:
00000000000189e8         mov        qword [rbp+var_30], rcx                     ; CODE XREF=knuth_morris_pratt+84
00000000000189ec         mov        qword [rbp+var_28], rsi
00000000000189f0         call       mmalloca                                    ; mmalloca
00000000000189f5         mov        rcx, qword [rbp+var_30]
00000000000189f9         mov        rdi, rax
00000000000189fc         mov        rsi, qword [rbp+var_28]
0000000000018a00         jmp        loc_188e6

                     loc_18a05:
0000000000018a05         mov        qword [rcx], rbx                            ; CODE XREF=knuth_morris_pratt+315
0000000000018a08         jmp        loc_1896c

                     loc_18a0d:
0000000000018a0d         mov        edi, 0x1                                    ; CODE XREF=knuth_morris_pratt+43
0000000000018a12         jmp        loc_188a3

                     loc_18a17:
0000000000018a17         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=knuth_morris_pratt+287
                        ; endp
0000000000018a1c         align      32                                          ; End of unwind block (FDE at 0x1fd3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_5C: int32_t, -92
        ;    var_60: int8_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_74: int8_t, -116
        ;    var_7C: int64_t, -124
        ;    var_80: int8_t, -128
        ;    var_9C: int32_t, -156
        ;    var_A0: int8_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B4: int8_t, -180
        ;    var_BC: int64_t, -188
        ;    var_C0: int8_t, -192
        ;    var_DC: int32_t, -220
        ;    var_E0: int8_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F4: int8_t, -244
        ;    var_FC: int64_t, -252
        ;    var_100: int8_t, -256
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_121: int8_t, -289
        ;    var_128: int64_t, -296


                     knuth_morris_pratt_multibyte:
0000000000018a20         push       rbp                                         ; Begin of unwind block (FDE at 0x1fd78), CODE XREF=mbsstr+2776
0000000000018a21         mov        rbp, rsp
0000000000018a24         push       r15
0000000000018a26         push       r14
0000000000018a28         push       r13
0000000000018a2a         push       r12
0000000000018a2c         push       rbx
0000000000018a2d         mov        rbx, rsi
0000000000018a30         sub        rsp, 0x108
0000000000018a37         mov        qword [rbp+var_118], rdi
0000000000018a3e         mov        rdi, rsi
0000000000018a41         mov        qword [rbp+var_128], rdx
0000000000018a48         mov        rax, qword [fs:0x28]
0000000000018a51         mov        qword [rbp+var_38], rax
0000000000018a55         xor        eax, eax
0000000000018a57         call       mbslen                                      ; mbslen
0000000000018a5c         mov        edx, 0x38
0000000000018a61         mov        rsi, rax
0000000000018a64         mov        qword [rbp+var_108], rax
0000000000018a6b         mov        rax, rdx
0000000000018a6e         mul        rsi
0000000000018a71         jo         loc_19487

0000000000018a77         xor        ecx, ecx

                     loc_18a79:
0000000000018a79         test       rax, rax                                    ; CODE XREF=knuth_morris_pratt_multibyte+2668
0000000000018a7c         js         loc_18ea0

0000000000018a82         test       rcx, rcx
0000000000018a85         jne        loc_18ea0

0000000000018a8b         mov        rax, qword [rbp+var_108]
0000000000018a92         lea        rdi, qword [rax*8]
0000000000018a9a         sub        rdi, rax
0000000000018a9d         shl        rdi, 0x3
0000000000018aa1         cmp        rdi, 0xfa0
0000000000018aa8         ja         loc_193e4

0000000000018aae         add        rdi, 0x3d
0000000000018ab2         and        rdi, 0xfffffffffffffff0
0000000000018ab6         sub        rsp, rdi
0000000000018ab9         lea        r12, qword [rsp+0x130+var_121]
0000000000018abe         and        r12, 0xfffffffffffffff0
0000000000018ac2         add        r12, 0x1f
0000000000018ac6         and        r12, 0xffffffffffffffe0

                     loc_18aca:
0000000000018aca         test       r12, r12                                    ; CODE XREF=knuth_morris_pratt_multibyte+2508
0000000000018acd         je         loc_18ea0

0000000000018ad3         mov        rax, qword [rbp+var_108]
0000000000018ada         mov        qword [rbp+var_F0], rbx
0000000000018ae1         lea        rbx, qword [rbp+var_100]
0000000000018ae8         mov        byte [rbp+var_100], 0x0
0000000000018aef         mov        qword [rbp+var_FC], 0x0
0000000000018afa         mov        r15, r12
0000000000018afd         mov        byte [rbp+var_F4], 0x0
0000000000018b04         mov        r14d, 0x1
0000000000018b0a         lea        r13, qword [rax+rax*2]
0000000000018b0e         lea        rax, qword [rbx+4]
0000000000018b12         shl        r13, 0x4
0000000000018b16         mov        qword [rbp+var_120], rax
0000000000018b1d         add        r13, r12
0000000000018b20         jmp        loc_18bd1
0000000000018b25         align      8

                     loc_18b28:
0000000000018b28         mov        rcx, qword [rbp+var_F0]                     ; CODE XREF=knuth_morris_pratt_multibyte+440
0000000000018b2f         lea        rsi, qword [is_basic_table]                 ; is_basic_table
0000000000018b36         movzx      edx, byte [rcx]
0000000000018b39         mov        eax, edx
0000000000018b3b         shr        al, 0x5
0000000000018b3e         and        eax, 0x7
0000000000018b41         mov        eax, dword [rsi+rax*4]
0000000000018b44         bt         eax, edx
0000000000018b47         jae        loc_18ec8

0000000000018b4d         mov        qword [rbp+var_E8], 0x1
0000000000018b58         movsx      eax, byte [rcx]
0000000000018b5b         mov        byte [rbp+var_E0], r14b
0000000000018b62         mov        byte [rbp+var_F4], r14b
0000000000018b69         mov        dword [rbp+var_DC], eax

                     loc_18b6f:
0000000000018b6f         mov        r8d, dword [rbp+var_DC]                     ; CODE XREF=knuth_morris_pratt_multibyte+2472
0000000000018b76         test       r8d, r8d
0000000000018b79         je         loc_18ca0

                     loc_18b7f:
0000000000018b7f         mov        eax, 0x1                                    ; CODE XREF=knuth_morris_pratt_multibyte+625

                     loc_18b84:
0000000000018b84         mov        rsi, qword [rbp+var_F0]                     ; CODE XREF=knuth_morris_pratt_multibyte+1299, knuth_morris_pratt_multibyte+2460
0000000000018b8b         lea        rcx, qword [rbx+0x28]
0000000000018b8f         mov        rdx, qword [rbp+var_E8]
0000000000018b96         cmp        rsi, rcx
0000000000018b99         je         loc_18ef0

0000000000018b9f         mov        qword [r15], rsi

                     loc_18ba2:
0000000000018ba2         test       al, al                                      ; CODE XREF=knuth_morris_pratt_multibyte+1261
0000000000018ba4         mov        qword [r15+8], rdx
0000000000018ba8         mov        byte [r15+0x10], al
0000000000018bac         je         loc_18bb8

0000000000018bae         mov        eax, dword [rbp+var_DC]
0000000000018bb4         mov        dword [r15+0x14], eax

                     loc_18bb8:
0000000000018bb8         mov        rax, qword [rbp+var_E8]                     ; CODE XREF=knuth_morris_pratt_multibyte+396
0000000000018bbf         add        qword [rbp+var_F0], rax
0000000000018bc6         add        r15, 0x30
0000000000018bca         mov        byte [rbp+var_F4], 0x0

                     loc_18bd1:
0000000000018bd1         cmp        byte [rbp+var_100], 0x0                     ; CODE XREF=knuth_morris_pratt_multibyte+256
0000000000018bd8         je         loc_18b28

                     loc_18bde:
0000000000018bde         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=knuth_morris_pratt_multibyte+1219
0000000000018be3         mov        r9, qword [rbp+var_F0]
0000000000018bea         mov        rsi, rax
0000000000018bed         mov        rdi, r9
0000000000018bf0         mov        qword [rbp+var_110], r9
0000000000018bf7         call       strnlen1                                    ; strnlen1
0000000000018bfc         mov        r9, qword [rbp+var_110]
0000000000018c03         lea        rcx, qword [rbx+4]
0000000000018c07         lea        rdi, qword [rbx+0x24]                       ; argument #1 for method rpl_mbrtowc
0000000000018c0b         mov        rdx, rax                                    ; argument #3 for method rpl_mbrtowc
0000000000018c0e         mov        rsi, r9                                     ; argument #2 for method rpl_mbrtowc
0000000000018c11         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000018c16         cmp        rax, 0xffffffffffffffff
0000000000018c1a         mov        qword [rbp+var_E8], rax
0000000000018c21         je         loc_18f18

0000000000018c27         cmp        rax, 0xfffffffffffffffe
0000000000018c2b         je         loc_19399

0000000000018c31         test       rax, rax
0000000000018c34         jne        loc_18c61

0000000000018c36         mov        rax, qword [rbp+var_F0]
0000000000018c3d         mov        qword [rbp+var_E8], 0x1
0000000000018c48         cmp        byte [rax], 0x0
0000000000018c4b         jne        loc_19463

0000000000018c51         mov        r9d, dword [rbp+var_DC]
0000000000018c58         test       r9d, r9d
0000000000018c5b         jne        loc_19482

                     loc_18c61:
0000000000018c61         lea        rdi, qword [rbx+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=knuth_morris_pratt_multibyte+532
0000000000018c65         mov        byte [rbp+var_E0], r14b
0000000000018c6c         call       j_mbsinit                                   ; mbsinit
0000000000018c71         test       eax, eax
0000000000018c73         je         loc_193c1

0000000000018c79         mov        r8d, dword [rbp+var_DC]
0000000000018c80         mov        byte [rbp+var_100], 0x0
0000000000018c87         mov        byte [rbp+var_F4], r14b
0000000000018c8e         test       r8d, r8d
0000000000018c91         jne        loc_18b7f

0000000000018c97         nop        word [rax+rax]

                     loc_18ca0:
0000000000018ca0         cmp        qword [rbp+var_108], 0x2                    ; CODE XREF=knuth_morris_pratt_multibyte+345
0000000000018ca8         mov        qword [r13+8], 0x1
0000000000018cb0         jbe        loc_18d46

0000000000018cb6         lea        r14, qword [r12+0x30]
0000000000018cbb         xor        ebx, ebx
0000000000018cbd         mov        r15d, 0x2
0000000000018cc3         nop        dword [rax+rax]

                     loc_18cc8:
0000000000018cc8         movzx      ecx, byte [r14+0x10]                        ; CODE XREF=knuth_morris_pratt_multibyte+800
0000000000018ccd         jmp        loc_18ced
0000000000018ccf         align      16

                     loc_18cd0:
0000000000018cd0         cmp        byte [rax+0x10], 0x0                        ; CODE XREF=knuth_morris_pratt_multibyte+730
0000000000018cd4         je         loc_18cfc

0000000000018cd6         mov        eax, dword [rax+0x14]
0000000000018cd9         cmp        dword [r14+0x14], eax
0000000000018cdd         je         loc_18d22

                     loc_18cdf:
0000000000018cdf         test       rbx, rbx                                    ; CODE XREF=knuth_morris_pratt_multibyte+740, knuth_morris_pratt_multibyte+768
0000000000018ce2         je         loc_19298

0000000000018ce8         sub        rbx, qword [r13+rbx*8]

                     loc_18ced:
0000000000018ced         lea        rax, qword [rbx+rbx*2]                      ; CODE XREF=knuth_morris_pratt_multibyte+685
0000000000018cf1         shl        rax, 0x4
0000000000018cf5         add        rax, r12
0000000000018cf8         test       cl, cl
0000000000018cfa         jne        loc_18cd0

                     loc_18cfc:
0000000000018cfc         mov        rdx, qword [r14+8]                          ; CODE XREF=knuth_morris_pratt_multibyte+692
0000000000018d00         cmp        rdx, qword [rax+8]
0000000000018d04         jne        loc_18cdf

0000000000018d06         mov        rsi, qword [rax]                            ; argument "__s2" for method j_memcmp
0000000000018d09         mov        rdi, qword [r14]                            ; argument "__s1" for method j_memcmp
0000000000018d0c         mov        byte [rbp+var_110], cl
0000000000018d12         call       j_memcmp                                    ; memcmp
0000000000018d17         test       eax, eax
0000000000018d19         movzx      ecx, byte [rbp+var_110]
0000000000018d20         jne        loc_18cdf

                     loc_18d22:
0000000000018d22         add        rbx, 0x1                                    ; CODE XREF=knuth_morris_pratt_multibyte+701
0000000000018d26         mov        rax, r15
0000000000018d29         sub        rax, rbx
0000000000018d2c         mov        qword [r13+r15*8], rax

                     loc_18d31:
0000000000018d31         add        r15, 0x1                                    ; CODE XREF=knuth_morris_pratt_multibyte+2173
0000000000018d35         add        r14, 0x30
0000000000018d39         cmp        qword [rbp+var_108], r15
0000000000018d40         jne        loc_18cc8

                     loc_18d46:
0000000000018d46         mov        rax, qword [rbp+var_128]                    ; CODE XREF=knuth_morris_pratt_multibyte+656
0000000000018d4d         lea        rbx, qword [rbp+var_80]
0000000000018d51         mov        byte [rbp+var_C0], 0x0
0000000000018d58         mov        qword [rbp+var_BC], 0x0
0000000000018d63         mov        byte [rbp+var_B4], 0x0
0000000000018d6a         xor        r15d, r15d
0000000000018d6d         mov        byte [rbp+var_80], 0x0
0000000000018d71         mov        qword [rbp+var_7C], 0x0
0000000000018d79         mov        qword [rax], 0x0
0000000000018d80         mov        rax, qword [rbp+var_118]
0000000000018d87         mov        qword [rbp+var_118], rbx
0000000000018d8e         add        rbx, 0x4
0000000000018d92         mov        byte [rbp+var_74], 0x0
0000000000018d96         mov        qword [rbp+var_120], rbx
0000000000018d9d         lea        rbx, qword [rbp+var_C0]
0000000000018da4         mov        qword [rbp+var_B0], rax
0000000000018dab         mov        qword [rbp+var_70], rax
0000000000018daf         xor        eax, eax
0000000000018db1         nop        dword [rax]

                     loc_18db8:
0000000000018db8         test       al, al                                      ; CODE XREF=knuth_morris_pratt_multibyte+997, knuth_morris_pratt_multibyte+2115
0000000000018dba         je         loc_18f9c

0000000000018dc0         cmp        byte [rbp+var_60], 0x0
0000000000018dc4         jne        loc_18f56

                     loc_18dca:
0000000000018dca         lea        rax, qword [r15+r15*2]                      ; CODE XREF=knuth_morris_pratt_multibyte+2144, knuth_morris_pratt_multibyte+2405
0000000000018dce         shl        rax, 0x4
0000000000018dd2         add        rax, r12

                     loc_18dd5:
0000000000018dd5         mov        rdx, qword [rax+8]                          ; CODE XREF=knuth_morris_pratt_multibyte+1360
0000000000018dd9         cmp        rdx, qword [rbp+var_68]
0000000000018ddd         je         loc_19170

                     loc_18de3:
0000000000018de3         test       r15, r15                                    ; CODE XREF=knuth_morris_pratt_multibyte+1369, knuth_morris_pratt_multibyte+1886
0000000000018de6         je         loc_191c0

0000000000018dec         mov        r14, qword [r13+r15*8]
0000000000018df1         mov        rax, r15
0000000000018df4         sub        rax, r14
0000000000018df7         test       r14, r14
0000000000018dfa         mov        qword [rbp+var_110], rax
0000000000018e01         movzx      eax, byte [rbp+var_74]
0000000000018e05         je         loc_18db8

0000000000018e07         cmp        byte [rbp+var_B4], 0x0
0000000000018e0e         je         loc_18e38

0000000000018e10         cmp        byte [rbp+var_A0], 0x0
0000000000018e17         jne        loc_18e8c

                     loc_18e19:
0000000000018e19         mov        rax, qword [rbp+var_A8]                     ; CODE XREF=knuth_morris_pratt_multibyte+1140, knuth_morris_pratt_multibyte+1858, knuth_morris_pratt_multibyte+1930
0000000000018e20         add        qword [rbp+var_B0], rax
0000000000018e27         sub        r14, 0x1
0000000000018e2b         mov        byte [rbp+var_B4], 0x0
0000000000018e32         je         loc_19258

                     loc_18e38:
0000000000018e38         cmp        byte [rbp+var_C0], 0x0                      ; CODE XREF=knuth_morris_pratt_multibyte+1006
0000000000018e3f         jne        loc_190b0

0000000000018e45         mov        rcx, qword [rbp+var_B0]
0000000000018e4c         lea        rsi, qword [is_basic_table]                 ; is_basic_table
0000000000018e53         movzx      edx, byte [rcx]
0000000000018e56         mov        eax, edx
0000000000018e58         shr        al, 0x5
0000000000018e5b         and        eax, 0x7
0000000000018e5e         mov        eax, dword [rsi+rax*4]
0000000000018e61         bt         eax, edx
0000000000018e64         jae        loc_19098

0000000000018e6a         mov        qword [rbp+var_A8], 0x1
0000000000018e75         movsx      eax, byte [rcx]
0000000000018e78         mov        byte [rbp+var_A0], 0x1
0000000000018e7f         mov        byte [rbp+var_B4], 0x1
0000000000018e86         mov        dword [rbp+var_9C], eax

                     loc_18e8c:
0000000000018e8c         mov        esi, dword [rbp+var_9C]                     ; CODE XREF=knuth_morris_pratt_multibyte+1015, knuth_morris_pratt_multibyte+1825, knuth_morris_pratt_multibyte+1943
0000000000018e92         test       esi, esi
0000000000018e94         jne        loc_18e19

                     loc_18e96:
0000000000018e96         call       j_abort                                     ; abort, CODE XREF=knuth_morris_pratt_multibyte+2057
                        ; endp
0000000000018e9b         align      32

                     loc_18ea0:
0000000000018ea0         xor        eax, eax                                    ; CODE XREF=knuth_morris_pratt_multibyte+92, knuth_morris_pratt_multibyte+101, knuth_morris_pratt_multibyte+173

                     loc_18ea2:
0000000000018ea2         mov        rbx, qword [rbp+var_38]                     ; CODE XREF=knuth_morris_pratt_multibyte+1645, knuth_morris_pratt_multibyte+2586
0000000000018ea6         xor        rbx, qword [fs:0x28]
0000000000018eaf         jne        loc_1945e

0000000000018eb5         lea        rsp, qword [rbp+var_28]
0000000000018eb9         pop        rbx
0000000000018eba         pop        r12
0000000000018ebc         pop        r13
0000000000018ebe         pop        r14
0000000000018ec0         pop        r15
0000000000018ec2         pop        rbp
0000000000018ec3         ret
                        ; endp
0000000000018ec4         align      8

                     loc_18ec8:
0000000000018ec8         mov        rdi, qword [rbp+var_120]                    ; argument "__ps" for method j_mbsinit, CODE XREF=knuth_morris_pratt_multibyte+295
0000000000018ecf         call       j_mbsinit                                   ; mbsinit
0000000000018ed4         test       eax, eax
0000000000018ed6         je         loc_1943f

0000000000018edc         mov        byte [rbp+var_100], r14b
0000000000018ee3         jmp        loc_18bde
0000000000018ee8         align      16

                     loc_18ef0:
0000000000018ef0         lea        rcx, qword [r15+0x18]                       ; CODE XREF=knuth_morris_pratt_multibyte+377
0000000000018ef4         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
0000000000018ef7         call       j_memcpy                                    ; memcpy
0000000000018efc         mov        rdx, qword [rbp+var_E8]
0000000000018f03         mov        qword [r15], rax
0000000000018f06         movzx      eax, byte [rbp+var_E0]
0000000000018f0d         jmp        loc_18ba2
0000000000018f12         align      8

                     loc_18f18:
0000000000018f18         mov        qword [rbp+var_E8], 0x1                     ; CODE XREF=knuth_morris_pratt_multibyte+513
0000000000018f23         mov        byte [rbp+var_E0], 0x0
0000000000018f2a         xor        eax, eax
0000000000018f2c         mov        byte [rbp+var_F4], r14b
0000000000018f33         jmp        loc_18b84
0000000000018f38         align      64

                     loc_18f40:
0000000000018f40         mov        qword [rbp+var_68], 0x1                     ; CODE XREF=knuth_morris_pratt_multibyte+1438
0000000000018f48         movsx      eax, byte [rcx]
0000000000018f4b         mov        byte [rbp+var_60], 0x1
0000000000018f4f         mov        byte [rbp+var_74], 0x1
0000000000018f53         mov        dword [rbp+var_5C], eax

                     loc_18f56:
0000000000018f56         mov        edx, dword [rbp+var_5C]                     ; CODE XREF=knuth_morris_pratt_multibyte+932, knuth_morris_pratt_multibyte+2420
0000000000018f59         test       edx, edx
0000000000018f5b         je         loc_19080

                     loc_18f61:
0000000000018f61         lea        rax, qword [r15+r15*2]                      ; CODE XREF=knuth_morris_pratt_multibyte+1626
0000000000018f65         shl        rax, 0x4
0000000000018f69         add        rax, r12
0000000000018f6c         cmp        byte [rax+0x10], 0x0
0000000000018f70         je         loc_18dd5

0000000000018f76         cmp        dword [rax+0x14], edx
0000000000018f79         jne        loc_18de3

                     loc_18f7f:
0000000000018f7f         add        r15, 0x1                                    ; CODE XREF=knuth_morris_pratt_multibyte+1892
0000000000018f83         mov        rax, qword [rbp+var_68]
0000000000018f87         add        qword [rbp+var_70], rax
0000000000018f8b         cmp        qword [rbp+var_108], r15
0000000000018f92         mov        byte [rbp+var_74], 0x0
0000000000018f96         je         loc_1941c

                     loc_18f9c:
0000000000018f9c         cmp        byte [rbp+var_80], 0x0                      ; CODE XREF=knuth_morris_pratt_multibyte+922, knuth_morris_pratt_multibyte+2096
0000000000018fa0         jne        loc_18fd8

0000000000018fa2         mov        rcx, qword [rbp+var_70]
0000000000018fa6         lea        rsi, qword [is_basic_table]                 ; is_basic_table
0000000000018fad         movzx      edx, byte [rcx]
0000000000018fb0         mov        eax, edx
0000000000018fb2         shr        al, 0x5
0000000000018fb5         and        eax, 0x7
0000000000018fb8         mov        eax, dword [rsi+rax*4]
0000000000018fbb         bt         eax, edx
0000000000018fbe         jb         loc_18f40

0000000000018fc0         mov        rdi, qword [rbp+var_120]                    ; argument "__ps" for method j_mbsinit
0000000000018fc7         call       j_mbsinit                                   ; mbsinit
0000000000018fcc         test       eax, eax
0000000000018fce         je         loc_1943f

0000000000018fd4         mov        byte [rbp+var_80], 0x1

                     loc_18fd8:
0000000000018fd8         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=knuth_morris_pratt_multibyte+1408
0000000000018fdd         mov        r8, qword [rbp+var_70]
0000000000018fe1         mov        rsi, rax
0000000000018fe4         mov        rdi, r8
0000000000018fe7         mov        qword [rbp+var_110], r8
0000000000018fee         call       strnlen1                                    ; strnlen1
0000000000018ff3         mov        rsi, qword [rbp+var_118]
0000000000018ffa         mov        r8, qword [rbp+var_110]
0000000000019001         mov        rdx, rax                                    ; argument #3 for method rpl_mbrtowc
0000000000019004         lea        rcx, qword [rsi+4]
0000000000019008         lea        rdi, qword [rsi+0x24]                       ; argument #1 for method rpl_mbrtowc
000000000001900c         mov        rsi, r8                                     ; argument #2 for method rpl_mbrtowc
000000000001900f         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000019014         cmp        rax, 0xffffffffffffffff
0000000000019018         mov        qword [rbp+var_68], rax
000000000001901c         je         loc_19270

0000000000019022         cmp        rax, 0xfffffffffffffffe
0000000000019026         je         loc_19370

000000000001902c         test       rax, rax
000000000001902f         jne        loc_19051

0000000000019031         mov        rax, qword [rbp+var_70]
0000000000019035         mov        qword [rbp+var_68], 0x1
000000000001903d         cmp        byte [rax], 0x0
0000000000019040         jne        loc_19463

0000000000019046         mov        eax, dword [rbp+var_5C]
0000000000019049         test       eax, eax
000000000001904b         jne        loc_19482

                     loc_19051:
0000000000019051         mov        rax, qword [rbp+var_118]                    ; CODE XREF=knuth_morris_pratt_multibyte+1551
0000000000019058         mov        byte [rbp+var_60], 0x1
000000000001905c         lea        rdi, qword [rax+4]                          ; argument "__ps" for method j_mbsinit
0000000000019060         call       j_mbsinit                                   ; mbsinit
0000000000019065         test       eax, eax
0000000000019067         je         loc_19390

000000000001906d         mov        edx, dword [rbp+var_5C]
0000000000019070         mov        byte [rbp+var_80], 0x0
0000000000019074         mov        byte [rbp+var_74], 0x1
0000000000019078         test       edx, edx
000000000001907a         jne        loc_18f61

                     loc_19080:
0000000000019080         mov        rdi, r12                                    ; CODE XREF=knuth_morris_pratt_multibyte+1339
0000000000019083         call       freea                                       ; freea
0000000000019088         mov        eax, 0x1
000000000001908d         jmp        loc_18ea2
0000000000019092         align      8

                     loc_19098:
0000000000019098         lea        rdi, qword [rbx+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=knuth_morris_pratt_multibyte+1092
000000000001909c         call       j_mbsinit                                   ; mbsinit
00000000000190a1         test       eax, eax
00000000000190a3         je         loc_1943f

00000000000190a9         mov        byte [rbp+var_C0], 0x1

                     loc_190b0:
00000000000190b0         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=knuth_morris_pratt_multibyte+1055
00000000000190b5         mov        r15, qword [rbp+var_B0]
00000000000190bc         mov        rsi, rax
00000000000190bf         mov        rdi, r15
00000000000190c2         call       strnlen1                                    ; strnlen1
00000000000190c7         lea        rcx, qword [rbx+4]
00000000000190cb         lea        rdi, qword [rbx+0x24]                       ; argument #1 for method rpl_mbrtowc
00000000000190cf         mov        rdx, rax                                    ; argument #3 for method rpl_mbrtowc
00000000000190d2         mov        rsi, r15                                    ; argument #2 for method rpl_mbrtowc
00000000000190d5         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000190da         cmp        rax, 0xffffffffffffffff
00000000000190de         mov        qword [rbp+var_A8], rax
00000000000190e5         je         loc_19150

00000000000190e7         cmp        rax, 0xfffffffffffffffe
00000000000190eb         je         loc_19190

00000000000190f1         test       rax, rax
00000000000190f4         jne        loc_1911f

00000000000190f6         mov        rax, qword [rbp+var_B0]
00000000000190fd         mov        qword [rbp+var_A8], 0x1
0000000000019108         cmp        byte [rax], 0x0
000000000001910b         jne        loc_19463

0000000000019111         mov        edi, dword [rbp+var_9C]
0000000000019117         test       edi, edi
0000000000019119         jne        loc_19482

                     loc_1911f:
000000000001911f         lea        rdi, qword [rbx+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=knuth_morris_pratt_multibyte+1748
0000000000019123         mov        byte [rbp+var_A0], 0x1
000000000001912a         call       j_mbsinit                                   ; mbsinit
000000000001912f         test       eax, eax
0000000000019131         je         loc_191b0

0000000000019133         mov        byte [rbp+var_C0], 0x0
000000000001913a         mov        byte [rbp+var_B4], 0x1
0000000000019141         jmp        loc_18e8c
0000000000019146         align      16

                     loc_19150:
0000000000019150         mov        qword [rbp+var_A8], 0x1                     ; CODE XREF=knuth_morris_pratt_multibyte+1733
000000000001915b         mov        byte [rbp+var_A0], 0x0
0000000000019162         jmp        loc_18e19
0000000000019167         align      16

                     loc_19170:
0000000000019170         mov        rsi, qword [rbp+var_70]                     ; argument "__s2" for method j_memcmp, CODE XREF=knuth_morris_pratt_multibyte+957
0000000000019174         mov        rdi, qword [rax]                            ; argument "__s1" for method j_memcmp
0000000000019177         call       j_memcmp                                    ; memcmp
000000000001917c         test       eax, eax
000000000001917e         jne        loc_18de3

0000000000019184         jmp        loc_18f7f
0000000000019189         align      16

                     loc_19190:
0000000000019190         mov        rdi, qword [rbp+var_B0]                     ; argument "__s" for method j_strlen, CODE XREF=knuth_morris_pratt_multibyte+1739
0000000000019197         call       j_strlen                                    ; strlen
000000000001919c         mov        byte [rbp+var_A0], 0x0
00000000000191a3         mov        qword [rbp+var_A8], rax
00000000000191aa         jmp        loc_18e19
00000000000191af         align      16

                     loc_191b0:
00000000000191b0         mov        byte [rbp+var_B4], 0x1                      ; CODE XREF=knuth_morris_pratt_multibyte+1809
00000000000191b7         jmp        loc_18e8c
00000000000191bc         align      64

                     loc_191c0:
00000000000191c0         cmp        byte [rbp+var_B4], 0x0                      ; CODE XREF=knuth_morris_pratt_multibyte+966
00000000000191c7         jne        loc_19288

00000000000191cd         cmp        byte [rbp+var_C0], 0x0
00000000000191d4         jne        loc_192c0

00000000000191da         mov        rcx, qword [rbp+var_B0]
00000000000191e1         lea        rsi, qword [is_basic_table]                 ; is_basic_table
00000000000191e8         movzx      edx, byte [rcx]
00000000000191eb         mov        eax, edx
00000000000191ed         shr        al, 0x5
00000000000191f0         and        eax, 0x7
00000000000191f3         mov        eax, dword [rsi+rax*4]
00000000000191f6         bt         eax, edx
00000000000191f9         jae        loc_192a8

00000000000191ff         mov        qword [rbp+var_A8], 0x1
000000000001920a         movsx      eax, byte [rcx]
000000000001920d         mov        byte [rbp+var_A0], 0x1
0000000000019214         mov        byte [rbp+var_B4], 0x1
000000000001921b         mov        dword [rbp+var_9C], eax

                     loc_19221:
0000000000019221         mov        edx, dword [rbp+var_9C]                     ; CODE XREF=knuth_morris_pratt_multibyte+2161, knuth_morris_pratt_multibyte+2375, knuth_morris_pratt_multibyte+2520
0000000000019227         test       edx, edx
0000000000019229         je         loc_18e96

                     loc_1922f:
000000000001922f         mov        rax, qword [rbp+var_A8]                     ; CODE XREF=knuth_morris_pratt_multibyte+2159, knuth_morris_pratt_multibyte+2495, knuth_morris_pratt_multibyte+2551
0000000000019236         mov        byte [rbp+var_B4], 0x0
000000000001923d         add        qword [rbp+var_B0], rax
0000000000019244         mov        byte [rbp+var_74], 0x0
0000000000019248         mov        rax, qword [rbp+var_68]
000000000001924c         add        qword [rbp+var_70], rax
0000000000019250         jmp        loc_18f9c
0000000000019255         align      8

                     loc_19258:
0000000000019258         movzx      eax, byte [rbp+var_74]                      ; CODE XREF=knuth_morris_pratt_multibyte+1042
000000000001925c         mov        r15, qword [rbp+var_110]
0000000000019263         jmp        loc_18db8
0000000000019268         align      16

                     loc_19270:
0000000000019270         mov        qword [rbp+var_68], 0x1                     ; CODE XREF=knuth_morris_pratt_multibyte+1532
0000000000019278         mov        byte [rbp+var_60], 0x0
000000000001927c         mov        byte [rbp+var_74], 0x1
0000000000019280         jmp        loc_18dca
0000000000019285         align      8

                     loc_19288:
0000000000019288         cmp        byte [rbp+var_A0], 0x0                      ; CODE XREF=knuth_morris_pratt_multibyte+1959
000000000001928f         je         loc_1922f

0000000000019291         jmp        loc_19221
0000000000019293         align      8

                     loc_19298:
0000000000019298         mov        qword [r13+r15*8], r15                      ; CODE XREF=knuth_morris_pratt_multibyte+706
000000000001929d         jmp        loc_18d31
00000000000192a2         align      8

                     loc_192a8:
00000000000192a8         lea        rdi, qword [rbx+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=knuth_morris_pratt_multibyte+2009
00000000000192ac         call       j_mbsinit                                   ; mbsinit
00000000000192b1         test       eax, eax
00000000000192b3         je         loc_1943f

00000000000192b9         mov        byte [rbp+var_C0], 0x1

                     loc_192c0:
00000000000192c0         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=knuth_morris_pratt_multibyte+1972
00000000000192c5         mov        r8, qword [rbp+var_B0]
00000000000192cc         mov        rsi, rax
00000000000192cf         mov        rdi, r8
00000000000192d2         mov        qword [rbp+var_110], r8
00000000000192d9         call       strnlen1                                    ; strnlen1
00000000000192de         mov        r8, qword [rbp+var_110]
00000000000192e5         lea        rcx, qword [rbx+4]
00000000000192e9         lea        rdi, qword [rbx+0x24]                       ; argument #1 for method rpl_mbrtowc
00000000000192ed         mov        rdx, rax                                    ; argument #3 for method rpl_mbrtowc
00000000000192f0         mov        rsi, r8                                     ; argument #2 for method rpl_mbrtowc
00000000000192f3         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000192f8         cmp        rax, 0xffffffffffffffff
00000000000192fc         mov        qword [rbp+var_A8], rax
0000000000019303         je         loc_193cd

0000000000019309         cmp        rax, 0xfffffffffffffffe
000000000001930d         je         loc_193fd

0000000000019313         test       rax, rax
0000000000019316         jne        loc_19341

0000000000019318         mov        rax, qword [rbp+var_B0]
000000000001931f         mov        qword [rbp+var_A8], 0x1
000000000001932a         cmp        byte [rax], 0x0
000000000001932d         jne        loc_19463

0000000000019333         mov        ecx, dword [rbp+var_9C]
0000000000019339         test       ecx, ecx
000000000001933b         jne        loc_19482

                     loc_19341:
0000000000019341         lea        rdi, qword [rbx+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=knuth_morris_pratt_multibyte+2294
0000000000019345         mov        byte [rbp+var_A0], 0x1
000000000001934c         call       j_mbsinit                                   ; mbsinit
0000000000019351         test       eax, eax
0000000000019353         je         loc_193f1

0000000000019359         mov        byte [rbp+var_C0], 0x0
0000000000019360         mov        byte [rbp+var_B4], 0x1
0000000000019367         jmp        loc_19221
000000000001936c         align      16

                     loc_19370:
0000000000019370         mov        rdi, qword [rbp+var_70]                     ; argument "__s" for method j_strlen, CODE XREF=knuth_morris_pratt_multibyte+1542
0000000000019374         call       j_strlen                                    ; strlen
0000000000019379         mov        byte [rbp+var_60], 0x0
000000000001937d         mov        qword [rbp+var_68], rax
0000000000019381         mov        byte [rbp+var_74], 0x1
0000000000019385         jmp        loc_18dca
000000000001938a         align      16

                     loc_19390:
0000000000019390         mov        byte [rbp+var_74], 0x1                      ; CODE XREF=knuth_morris_pratt_multibyte+1607
0000000000019394         jmp        loc_18f56

                     loc_19399:
0000000000019399         mov        rdi, qword [rbp+var_F0]                     ; argument "__s" for method j_strlen, CODE XREF=knuth_morris_pratt_multibyte+523
00000000000193a0         call       j_strlen                                    ; strlen
00000000000193a5         mov        byte [rbp+var_E0], 0x0
00000000000193ac         mov        qword [rbp+var_E8], rax
00000000000193b3         xor        eax, eax
00000000000193b5         mov        byte [rbp+var_F4], r14b
00000000000193bc         jmp        loc_18b84

                     loc_193c1:
00000000000193c1         mov        byte [rbp+var_F4], r14b                     ; CODE XREF=knuth_morris_pratt_multibyte+595
00000000000193c8         jmp        loc_18b6f

                     loc_193cd:
00000000000193cd         mov        qword [rbp+var_A8], 0x1                     ; CODE XREF=knuth_morris_pratt_multibyte+2275
00000000000193d8         mov        byte [rbp+var_A0], 0x0
00000000000193df         jmp        loc_1922f

                     loc_193e4:
00000000000193e4         call       mmalloca                                    ; mmalloca, CODE XREF=knuth_morris_pratt_multibyte+136
00000000000193e9         mov        r12, rax
00000000000193ec         jmp        loc_18aca

                     loc_193f1:
00000000000193f1         mov        byte [rbp+var_B4], 0x1                      ; CODE XREF=knuth_morris_pratt_multibyte+2355
00000000000193f8         jmp        loc_19221

                     loc_193fd:
00000000000193fd         mov        rdi, qword [rbp+var_B0]                     ; argument "__s" for method j_strlen, CODE XREF=knuth_morris_pratt_multibyte+2285
0000000000019404         call       j_strlen                                    ; strlen
0000000000019409         mov        byte [rbp+var_A0], 0x0
0000000000019410         mov        qword [rbp+var_A8], rax
0000000000019417         jmp        loc_1922f

                     loc_1941c:
000000000001941c         mov        rax, qword [rbp+var_B0]                     ; CODE XREF=knuth_morris_pratt_multibyte+1398
0000000000019423         mov        rbx, qword [rbp+var_128]
000000000001942a         mov        rdi, r12
000000000001942d         mov        qword [rbx], rax
0000000000019430         call       freea                                       ; freea
0000000000019435         mov        eax, 0x1
000000000001943a         jmp        loc_18ea2

                     loc_1943f:
000000000001943f         lea        rcx, qword [__PRETTY_FUNCTION__.5056]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=knuth_morris_pratt_multibyte+1206, knuth_morris_pratt_multibyte+1454, knuth_morris_pratt_multibyte+1667, knuth_morris_pratt_multibyte+2195
0000000000019446         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
000000000001944d         lea        rdi, qword [aMbsinitItersta]                ; argument "__assertion" for method j___assert_fail, "mbsinit (&iter->state)"
0000000000019454         mov        edx, 0x96                                   ; argument "__line" for method j___assert_fail
0000000000019459         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_1945e:
000000000001945e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=knuth_morris_pratt_multibyte+1167
                        ; endp

                     loc_19463:
0000000000019463         lea        rcx, qword [__PRETTY_FUNCTION__.5056]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=knuth_morris_pratt_multibyte+555, knuth_morris_pratt_multibyte+1568, knuth_morris_pratt_multibyte+1771, knuth_morris_pratt_multibyte+2317
000000000001946a         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
0000000000019471         lea        rdi, qword [aItercurptr0]                   ; argument "__assertion" for method j___assert_fail, "*iter->cur.ptr == '\\0'"
0000000000019478         mov        edx, 0xb2                                   ; argument "__line" for method j___assert_fail
000000000001947d         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_19482:
0000000000019482         call       mbuiter_multi_next.part.0_2166              ; mbuiter_multi_next.part.0, CODE XREF=knuth_morris_pratt_multibyte+571, knuth_morris_pratt_multibyte+1579, knuth_morris_pratt_multibyte+1785, knuth_morris_pratt_multibyte+2331
                        ; endp

                     loc_19487:
0000000000019487         mov        ecx, 0x1                                    ; CODE XREF=knuth_morris_pratt_multibyte+81
000000000001948c         jmp        loc_18a79
0000000000019491         align      32                                          ; End of unwind block (FDE at 0x1fd78)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_64: int32_t, -100
        ;    var_68: int8_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_7C: int8_t, -124
        ;    var_88: int8_t, -136
        ;    var_98: -152
        ;    var_A4: int32_t, -164
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_BC: int8_t, -188
        ;    var_C8: int8_t, -200
        ;    var_D8: -216
        ;    var_E4: int32_t, -228
        ;    var_E8: int8_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_FC: int8_t, -252
        ;    var_104: int64_t, -260
        ;    var_108: int8_t, -264
        ;    var_124: int32_t, -292
        ;    var_128: int8_t, -296
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_13C: int8_t, -316
        ;    var_144: int64_t, -324
        ;    var_148: int8_t, -328
        ;    var_164: int32_t, -356
        ;    var_168: int8_t, -360
        ;    var_170: int64_t, -368
        ;    var_178: int64_t, -376
        ;    var_17C: int8_t, -380
        ;    var_184: int64_t, -388
        ;    var_188: int8_t, -392
        ;    var_190: int64_t, -400
        ;    var_1A0: int64_t, -416
        ;    var_1A8: int64_t, -424
        ;    var_1B0: int64_t, -432
        ;    var_1B8: int64_t, -440
        ;    var_1C0: int64_t, -448
        ;    var_1C8: int64_t, -456


                     mbsstr:
00000000000194a0         push       r15                                         ; Begin of unwind block (FDE at 0x1fda8), CODE XREF=mbsstr_trimmed_wordbounded+94
00000000000194a2         push       r14
00000000000194a4         push       r13
00000000000194a6         push       r12
00000000000194a8         mov        r12, rdi
00000000000194ab         push       rbp
00000000000194ac         push       rbx
00000000000194ad         mov        rbx, rsi
00000000000194b0         sub        rsp, 0x198
00000000000194b7         mov        rax, qword [fs:0x28]
00000000000194c0         mov        qword [rsp+0x1c8+var_40], rax
00000000000194c8         xor        eax, eax
00000000000194ca         mov        qword [rsp+0x1c8+var_1C0], rsi
00000000000194cf         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
00000000000194d4         cmp        rax, 0x1
00000000000194d8         ja         loc_195c0

00000000000194de         mov        rax, qword [rsp+0x1c8+var_1C0]
00000000000194e3         movzx      r15d, byte [rax]
00000000000194e7         mov        rax, r12
00000000000194ea         test       r15b, r15b
00000000000194ed         je         loc_19626

00000000000194f3         movzx      esi, byte [r12]
00000000000194f8         test       sil, sil
00000000000194fb         je         loc_19ca0

0000000000019501         lea        rbx, qword [rsp+0x1c8+var_190]
0000000000019506         mov        rbp, qword [rsp+0x1c8+var_1C0]
000000000001950b         xor        r13d, r13d
000000000001950e         xor        edx, edx
0000000000019510         xor        r8d, r8d
0000000000019513         mov        eax, 0x1
0000000000019518         mov        qword [rsp+0x1c8+var_1B8], rbx
000000000001951d         nop        dword [rax]

                     loc_19520:
0000000000019520         add        r13, 0x1                                    ; CODE XREF=mbsstr+444
0000000000019524         cmp        sil, r15b
0000000000019527         lea        rbx, qword [rdx+1]
000000000001952b         lea        r14, qword [r12+1]
0000000000019530         je         loc_19e10

0000000000019536         cmp        byte [r12+1], 0x0
000000000001953c         je         loc_19ca0

                     loc_19542:
0000000000019542         cmp        r13, 0x9                                    ; CODE XREF=mbsstr+2454, mbsstr+2500
0000000000019546         seta       dl
0000000000019549         and        dl, al
000000000001954b         je         loc_19652

0000000000019551         lea        rax, qword [r13+r13*4]
0000000000019556         cmp        rax, rbx
0000000000019559         ja         loc_19650

000000000001955f         test       rbp, rbp
0000000000019562         mov        byte [rsp+0x1c8+var_1C8], dl
0000000000019565         je         loc_19589

0000000000019567         mov        rsi, rbx
000000000001956a         mov        rdi, rbp                                    ; argument "__string" for method j_strnlen
000000000001956d         sub        rsi, r8                                     ; argument "__maxlen" for method j_strnlen
0000000000019570         call       j_strnlen                                   ; strnlen
0000000000019575         add        rbp, rax
0000000000019578         mov        r8, rbx
000000000001957b         movzx      edx, byte [rsp+0x1c8+var_1C8]
000000000001957f         cmp        byte [rbp], 0x0
0000000000019583         jne        loc_19650

                     loc_19589:
0000000000019589         mov        rbp, qword [rsp+0x1c8+var_1C0]              ; CODE XREF=mbsstr+197
000000000001958e         mov        qword [rsp+0x1c8+var_1C8], r8
0000000000019592         mov        rdi, rbp                                    ; argument "__s" for method j_strlen
0000000000019595         call       j_strlen                                    ; strlen
000000000001959a         mov        rcx, qword [rsp+0x1c8+var_1B8]              ; argument #4 for method knuth_morris_pratt
000000000001959f         mov        rdx, rax                                    ; argument #3 for method knuth_morris_pratt
00000000000195a2         mov        rsi, rbp                                    ; argument #2 for method knuth_morris_pratt
00000000000195a5         mov        rdi, r14                                    ; argument #1 for method knuth_morris_pratt
00000000000195a8         call       knuth_morris_pratt                          ; knuth_morris_pratt
00000000000195ad         test       al, al
00000000000195af         mov        r8, qword [rsp+0x1c8+var_1C8]
00000000000195b3         jne        loc_1a49f

00000000000195b9         xor        ebp, ebp
00000000000195bb         jmp        loc_19652

                     loc_195c0:
00000000000195c0         mov        rax, rbx                                    ; CODE XREF=mbsstr+56
00000000000195c3         lea        r13, qword [is_basic_table]                 ; is_basic_table
00000000000195ca         mov        qword [rsp+0x1c8+var_178], rbx
00000000000195cf         movsx      edx, byte [rax]
00000000000195d2         lea        rbx, qword [rsp+0x1c8+var_188]
00000000000195d7         mov        byte [rsp+0x1c8+var_188], 0x0
00000000000195dc         mov        qword [rsp+0x1c8+var_184], 0x0
00000000000195e5         mov        byte [rsp+0x1c8+var_17C], 0x0
00000000000195ea         lea        rbp, qword [rbx+4]
00000000000195ee         mov        eax, edx
00000000000195f0         shr        al, 0x5
00000000000195f3         and        eax, 0x7
00000000000195f6         mov        eax, dword [r13+rax*4]
00000000000195fb         bt         eax, edx
00000000000195fe         jae        loc_1a2a0

0000000000019604         mov        qword [rsp+0x1c8+var_170], 0x1
000000000001960d         mov        dword [rsp+0x1c8+var_164], edx
0000000000019611         mov        byte [rsp+0x1c8+var_168], 0x1
0000000000019616         mov        byte [rsp+0x1c8+var_17C], 0x1

                     loc_1961b:
000000000001961b         mov        eax, dword [rsp+0x1c8+var_164]              ; CODE XREF=sub_1a267+214, sub_1a267+521
000000000001961f         test       eax, eax
0000000000019621         jne        loc_1967b

                     loc_19623:
0000000000019623         mov        rax, r12                                    ; CODE XREF=mbsstr+2428, mbsstr+2516

                     loc_19626:
0000000000019626         mov        rbx, qword [rsp+0x1c8+var_40]               ; CODE XREF=mbsstr+77, mbsstr+1824, mbsstr+2050, sub_1a267+573
000000000001962e         xor        rbx, qword [fs:0x28]
0000000000019637         jne        loc_1a580

000000000001963d         add        rsp, 0x198
0000000000019644         pop        rbx
0000000000019645         pop        rbp
0000000000019646         pop        r12
0000000000019648         pop        r13
000000000001964a         pop        r14
000000000001964c         pop        r15
000000000001964e         ret
                        ; endp
000000000001964f         align      16

                     loc_19650:
0000000000019650         mov        eax, edx                                    ; CODE XREF=mbsstr+185, mbsstr+227

                     loc_19652:
0000000000019652         movzx      esi, byte [r14]                             ; CODE XREF=mbsstr+171, mbsstr+283
0000000000019656         mov        r12, r14
0000000000019659         mov        rdx, rbx
000000000001965c         jmp        loc_19520
0000000000019661         align      8

                     loc_19668:
0000000000019668         mov        qword [rsp+0x1c8+var_170], 0x1              ; CODE XREF=sub_1a267+126
0000000000019671         mov        byte [rsp+0x1c8+var_168], 0x0
0000000000019676         mov        byte [rsp+0x1c8+var_17C], 0x1

                     loc_1967b:
000000000001967b         mov        rax, qword [rsp+0x1c8+var_1C0]              ; CODE XREF=mbsstr+385, sub_1a267+637
0000000000019680         mov        byte [rsp+0x1c8+var_108], 0x0
0000000000019688         xor        r14d, r14d
000000000001968b         xor        ebx, ebx
000000000001968d         cmp        byte [rsp+0x1c8+var_108], 0x0
0000000000019695         mov        byte [rsp+0x1c8+var_148], 0x0
000000000001969d         mov        qword [rsp+0x1c8+var_144], 0x0
00000000000196a9         mov        byte [rsp+0x1c8+var_13C], 0x0
00000000000196b1         lea        rbp, qword [rsp+0x1c8+var_88]
00000000000196b9         mov        qword [rsp+0x1c8+var_138], rax
00000000000196c1         lea        rax, qword [rsp+0x1c8+var_190]
00000000000196c6         mov        qword [rsp+0x1c8+var_F8], r12
00000000000196ce         mov        qword [rsp+0x1c8+var_104], 0x0
00000000000196da         mov        byte [rsp+0x1c8+var_FC], 0x0
00000000000196e2         lea        r15, qword [rsp+0x1c8+var_C8]
00000000000196ea         mov        qword [rsp+0x1c8+var_1A8], 0x0
00000000000196f3         mov        byte [rsp+0x1c8+var_1B8], 0x1
00000000000196f8         mov        qword [rsp+0x1c8+var_1A0], rax
00000000000196fd         jne        loc_19a13

0000000000019703         nop        dword [rax+rax]

                     loc_19708:
0000000000019708         mov        rcx, qword [rsp+0x1c8+var_F8]               ; CODE XREF=mbsstr+1389
0000000000019710         movzx      edx, byte [rcx]
0000000000019713         mov        eax, edx
0000000000019715         shr        al, 0x5
0000000000019718         and        eax, 0x7
000000000001971b         mov        eax, dword [r13+rax*4]
0000000000019720         bt         eax, edx
0000000000019723         jae        loc_19e80

0000000000019729         mov        qword [rsp+0x1c8+var_F0], 0x1
0000000000019735         movsx      eax, byte [rcx]
0000000000019738         mov        byte [rsp+0x1c8+var_E8], 0x1
0000000000019740         mov        byte [rsp+0x1c8+var_FC], 0x1
0000000000019748         mov        dword [rsp+0x1c8+var_E4], eax

                     loc_1974f:
000000000001974f         mov        eax, dword [rsp+0x1c8+var_E4]               ; CODE XREF=mbsstr+1586, mbsstr+3128
0000000000019756         test       eax, eax
0000000000019758         je         loc_19ca0

000000000001975e         cmp        r14, 0x9
0000000000019762         seta       al
0000000000019765         and        al, byte [rsp+0x1c8+var_1B8]
0000000000019769         je         loc_1a577

000000000001976f         lea        rdx, qword [r14+r14*4]
0000000000019773         cmp        rbx, rdx
0000000000019776         jae        loc_19eb0

000000000001977c         add        rbx, 0x1
0000000000019780         mov        byte [rsp+0x1c8+var_1B8], al

                     loc_19784:
0000000000019784         cmp        byte [rsp+0x1c8+var_168], 0x0               ; CODE XREF=mbsstr+3305, sub_1a267+788
0000000000019789         je         loc_19d01

000000000001978f         mov        eax, dword [rsp+0x1c8+var_164]
0000000000019793         cmp        dword [rsp+0x1c8+var_E4], eax
000000000001979a         jne        loc_199e9

                     loc_197a0:
00000000000197a0         movdqa     xmm0, xmmword [rsp+0x1c8+var_108]           ; CODE XREF=mbsstr+2201
00000000000197a9         lea        rcx, qword [rbp+4]
00000000000197ad         mov        byte [rsp+0x1c8+var_88], 0x0
00000000000197b5         mov        qword [rbp+4], 0x0
00000000000197bd         movaps     xmmword [rsp+0x1c8+var_C8], xmm0
00000000000197c5         mov        byte [rsp+0x1c8+var_7C], 0x0
00000000000197cd         mov        byte [rsp+0x1c8+var_BC], 0x0
00000000000197d5         movdqa     xmm0, xmmword [rsp+0x1c8+var_F8]
00000000000197de         movaps     xmmword [rsp+0x1c8+var_B8], xmm0
00000000000197e6         mov        rax, qword [rsp+0x1c8+var_B0]
00000000000197ee         add        qword [rsp+0x1c8+var_B8], rax
00000000000197f6         mov        rax, qword [rsp+0x1c8+var_1C0]
00000000000197fb         movdqa     xmm0, xmmword [rsp+0x1c8+var_E8]
0000000000019804         movsx      edx, byte [rax]
0000000000019807         mov        qword [rsp+0x1c8+var_78], rax
000000000001980f         movaps     xmmword [rsp+0x1c8+var_A8], xmm0
0000000000019817         mov        eax, edx
0000000000019819         shr        al, 0x5
000000000001981c         movdqa     xmm0, xmmword [rsp+0x1c8+var_D8]
0000000000019825         and        eax, 0x7
0000000000019828         mov        eax, dword [r13+rax*4]
000000000001982d         movaps     xmmword [rsp+0x1c8+var_98], xmm0
0000000000019835         bt         eax, edx
0000000000019838         jae        loc_1a1c8

000000000001983e         mov        qword [rsp+0x1c8+var_70], 0x1
000000000001984a         mov        dword [rsp+0x1c8+var_64], edx
0000000000019851         mov        byte [rsp+0x1c8+var_68], 0x1
0000000000019859         mov        byte [rsp+0x1c8+var_7C], 0x1

                     loc_19861:
0000000000019861         mov        esi, dword [rsp+0x1c8+var_64]               ; CODE XREF=sub_1a267+50, sub_1a267+511
0000000000019868         test       esi, esi
000000000001986a         je         loc_1a5a4

                     loc_19870:
0000000000019870         mov        rax, qword [rsp+0x1c8+var_70]               ; CODE XREF=sub_1a267+245, sub_1a267+607
0000000000019878         mov        byte [rsp+0x1c8+var_7C], 0x0
0000000000019880         add        rbx, 0x1
0000000000019884         add        qword [rsp+0x1c8+var_78], rax
000000000001988c         jmp        loc_19953
0000000000019891         align      8

                     loc_19898:
0000000000019898         cmp        byte [rsp+0x1c8+var_C8], 0x0                ; CODE XREF=mbsstr+1311
00000000000198a0         jne        loc_19be1

00000000000198a6         mov        rcx, qword [rsp+0x1c8+var_B8]
00000000000198ae         movzx      edx, byte [rcx]
00000000000198b1         mov        eax, edx
00000000000198b3         shr        al, 0x5
00000000000198b6         and        eax, 0x7
00000000000198b9         mov        eax, dword [r13+rax*4]
00000000000198be         bt         eax, edx
00000000000198c1         jae        loc_19bc8

00000000000198c7         mov        qword [rsp+0x1c8+var_B0], 0x1
00000000000198d3         movsx      eax, byte [rcx]
00000000000198d6         mov        byte [rsp+0x1c8+var_A8], 0x1
00000000000198de         mov        byte [rsp+0x1c8+var_BC], 0x1
00000000000198e6         mov        dword [rsp+0x1c8+var_A4], eax

                     loc_198ed:
00000000000198ed         mov        eax, dword [rsp+0x1c8+var_A4]               ; CODE XREF=mbsstr+1325, mbsstr+2408
00000000000198f4         test       eax, eax
00000000000198f6         je         loc_19ca0

                     loc_198fc:
00000000000198fc         cmp        byte [rsp+0x1c8+var_68], 0x0                ; CODE XREF=mbsstr+2035
0000000000019904         je         loc_199d3

000000000001990a         cmp        dword [rsp+0x1c8+var_64], eax
0000000000019911         setne      al

                     loc_19914:
0000000000019914         test       al, al                                      ; CODE XREF=mbsstr+2090
0000000000019916         lea        rdx, qword [rbx+1]
000000000001991a         jne        loc_199e9

0000000000019920         mov        rax, qword [rsp+0x1c8+var_B0]
0000000000019928         add        qword [rsp+0x1c8+var_B8], rax
0000000000019930         mov        rbx, rdx
0000000000019933         mov        rax, qword [rsp+0x1c8+var_70]
000000000001993b         add        qword [rsp+0x1c8+var_78], rax
0000000000019943         mov        byte [rsp+0x1c8+var_BC], 0x0
000000000001994b         mov        byte [rsp+0x1c8+var_7C], 0x0

                     loc_19953:
0000000000019953         cmp        byte [rsp+0x1c8+var_88], 0x0                ; CODE XREF=mbsstr+1004
000000000001995b         jne        loc_19af9

0000000000019961         mov        rcx, qword [rsp+0x1c8+var_78]
0000000000019969         movzx      edx, byte [rcx]
000000000001996c         mov        eax, edx
000000000001996e         shr        al, 0x5
0000000000019971         and        eax, 0x7
0000000000019974         mov        eax, dword [r13+rax*4]
0000000000019979         bt         eax, edx
000000000001997c         jae        loc_19ae0

0000000000019982         mov        qword [rsp+0x1c8+var_70], 0x1
000000000001998e         movsx      eax, byte [rcx]
0000000000019991         mov        byte [rsp+0x1c8+var_68], 0x1
0000000000019999         mov        byte [rsp+0x1c8+var_7C], 0x1
00000000000199a1         mov        dword [rsp+0x1c8+var_64], eax

                     loc_199a8:
00000000000199a8         mov        edx, dword [rsp+0x1c8+var_64]               ; CODE XREF=mbsstr+2344
00000000000199af         test       edx, edx
00000000000199b1         je         loc_19bb8

                     loc_199b7:
00000000000199b7         cmp        byte [rsp+0x1c8+var_BC], 0x0                ; CODE XREF=mbsstr+1803, mbsstr+2236, mbsstr+2325
00000000000199bf         je         loc_19898

00000000000199c5         cmp        byte [rsp+0x1c8+var_A8], 0x0
00000000000199cd         jne        loc_198ed

                     loc_199d3:
00000000000199d3         mov        rdx, qword [rsp+0x1c8+var_B0]               ; CODE XREF=mbsstr+1124, mbsstr+2276, mbsstr+2389
00000000000199db         cmp        rdx, qword [rsp+0x1c8+var_70]
00000000000199e3         je         loc_19cb0

                     loc_199e9:
00000000000199e9         mov        rcx, qword [rsp+0x1c8+var_F0]               ; CODE XREF=mbsstr+762, mbsstr+1146

                     loc_199f1:
00000000000199f1         add        qword [rsp+0x1c8+var_F8], rcx               ; CODE XREF=mbsstr+2158, mbsstr+2195
00000000000199f9         add        r14, 0x1
00000000000199fd         cmp        byte [rsp+0x1c8+var_108], 0x0
0000000000019a05         mov        byte [rsp+0x1c8+var_FC], 0x0
0000000000019a0d         je         loc_19708

                     loc_19a13:
0000000000019a13         lea        rax, qword [rsp+0x1c8+var_108]              ; CODE XREF=mbsstr+605
0000000000019a1b         mov        qword [rsp+0x1c8+var_1C8], rax

                     loc_19a1f:
0000000000019a1f         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbsstr+2569
0000000000019a24         mov        r8, qword [rsp+0x1c8+var_F8]
0000000000019a2c         mov        rsi, rax
0000000000019a2f         mov        rdi, r8
0000000000019a32         mov        qword [rsp+0x1c8+var_1B0], r8
0000000000019a37         call       strnlen1                                    ; strnlen1
0000000000019a3c         mov        rsi, qword [rsp+0x1c8+var_1C8]
0000000000019a40         mov        r8, qword [rsp+0x1c8+var_1B0]
0000000000019a45         mov        rdx, rax                                    ; argument #3 for method rpl_mbrtowc
0000000000019a48         lea        rcx, qword [rsi+4]
0000000000019a4c         lea        rdi, qword [rsi+0x24]                       ; argument #1 for method rpl_mbrtowc
0000000000019a50         mov        rsi, r8                                     ; argument #2 for method rpl_mbrtowc
0000000000019a53         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000019a58         cmp        rax, 0xffffffffffffffff
0000000000019a5c         mov        qword [rsp+0x1c8+var_F0], rax
0000000000019a64         je         loc_19cd0

0000000000019a6a         cmp        rax, 0xfffffffffffffffe
0000000000019a6e         je         loc_1a198

0000000000019a74         test       rax, rax
0000000000019a77         jne        loc_19aa5

0000000000019a79         mov        rax, qword [rsp+0x1c8+var_F8]
0000000000019a81         mov        qword [rsp+0x1c8+var_F0], 0x1
0000000000019a8d         cmp        byte [rax], 0x0
0000000000019a90         jne        loc_1a585

0000000000019a96         mov        eax, dword [rsp+0x1c8+var_E4]
0000000000019a9d         test       eax, eax
0000000000019a9f         jne        loc_1a262

                     loc_19aa5:
0000000000019aa5         mov        rdi, qword [rsp+0x1c8+var_1C8]              ; CODE XREF=mbsstr+1495
0000000000019aa9         mov        byte [rsp+0x1c8+var_E8], 0x1
0000000000019ab1         add        rdi, 0x4                                    ; argument "__ps" for method j_mbsinit
0000000000019ab5         call       j_mbsinit                                   ; mbsinit
0000000000019aba         test       eax, eax
0000000000019abc         je         loc_1a0d0

0000000000019ac2         mov        byte [rsp+0x1c8+var_108], 0x0
0000000000019aca         mov        byte [rsp+0x1c8+var_FC], 0x1
0000000000019ad2         jmp        loc_1974f
0000000000019ad7         align      32

                     loc_19ae0:
0000000000019ae0         lea        rdi, qword [rbp+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr+1244
0000000000019ae4         call       j_mbsinit                                   ; mbsinit
0000000000019ae9         test       eax, eax
0000000000019aeb         je         loc_1a558

0000000000019af1         mov        byte [rsp+0x1c8+var_88], 0x1

                     loc_19af9:
0000000000019af9         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbsstr+1211
0000000000019afe         mov        r8, qword [rsp+0x1c8+var_78]
0000000000019b06         mov        rsi, rax
0000000000019b09         mov        rdi, r8
0000000000019b0c         mov        qword [rsp+0x1c8+var_1C8], r8
0000000000019b10         call       strnlen1                                    ; strnlen1
0000000000019b15         mov        r8, qword [rsp+0x1c8+var_1C8]
0000000000019b19         lea        rcx, qword [rbp+4]
0000000000019b1d         lea        rdi, qword [rbp+0x24]                       ; argument #1 for method rpl_mbrtowc
0000000000019b21         mov        rdx, rax                                    ; argument #3 for method rpl_mbrtowc
0000000000019b24         mov        rsi, r8                                     ; argument #2 for method rpl_mbrtowc
0000000000019b27         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000019b2c         cmp        rax, 0xffffffffffffffff
0000000000019b30         mov        qword [rsp+0x1c8+var_70], rax
0000000000019b38         je         loc_19d40

0000000000019b3e         cmp        rax, 0xfffffffffffffffe
0000000000019b42         je         loc_19d90

0000000000019b48         test       rax, rax
0000000000019b4b         jne        loc_19b79

0000000000019b4d         mov        rax, qword [rsp+0x1c8+var_78]
0000000000019b55         mov        qword [rsp+0x1c8+var_70], 0x1
0000000000019b61         cmp        byte [rax], 0x0
0000000000019b64         jne        loc_1a585

0000000000019b6a         mov        ecx, dword [rsp+0x1c8+var_64]
0000000000019b71         test       ecx, ecx
0000000000019b73         jne        loc_1a262

                     loc_19b79:
0000000000019b79         lea        rdi, qword [rbp+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr+1707
0000000000019b7d         mov        byte [rsp+0x1c8+var_68], 0x1
0000000000019b85         call       j_mbsinit                                   ; mbsinit
0000000000019b8a         test       eax, eax
0000000000019b8c         je         loc_19dc0

0000000000019b92         mov        edx, dword [rsp+0x1c8+var_64]
0000000000019b99         mov        byte [rsp+0x1c8+var_88], 0x0
0000000000019ba1         mov        byte [rsp+0x1c8+var_7C], 0x1
0000000000019ba9         test       edx, edx
0000000000019bab         jne        loc_199b7

0000000000019bb1         nop        dword [rax]

                     loc_19bb8:
0000000000019bb8         mov        rax, qword [rsp+0x1c8+var_F8]               ; CODE XREF=mbsstr+1297
0000000000019bc0         jmp        loc_19626
0000000000019bc5         align      8

                     loc_19bc8:
0000000000019bc8         lea        rdi, qword [r15+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr+1057
0000000000019bcc         call       j_mbsinit                                   ; mbsinit
0000000000019bd1         test       eax, eax
0000000000019bd3         je         loc_1a558

0000000000019bd9         mov        byte [rsp+0x1c8+var_C8], 0x1

                     loc_19be1:
0000000000019be1         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbsstr+1024
0000000000019be6         mov        r8, qword [rsp+0x1c8+var_B8]
0000000000019bee         mov        rsi, rax
0000000000019bf1         mov        rdi, r8
0000000000019bf4         mov        qword [rsp+0x1c8+var_1C8], r8
0000000000019bf8         call       strnlen1                                    ; strnlen1
0000000000019bfd         mov        r8, qword [rsp+0x1c8+var_1C8]
0000000000019c01         lea        rcx, qword [r15+4]
0000000000019c05         lea        rdi, qword [r15+0x24]                       ; argument #1 for method rpl_mbrtowc
0000000000019c09         mov        rdx, rax                                    ; argument #3 for method rpl_mbrtowc
0000000000019c0c         mov        rsi, r8                                     ; argument #2 for method rpl_mbrtowc
0000000000019c0f         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000019c14         cmp        rax, 0xffffffffffffffff
0000000000019c18         mov        qword [rsp+0x1c8+var_B0], rax
0000000000019c20         je         loc_19d68

0000000000019c26         cmp        rax, 0xfffffffffffffffe
0000000000019c2a         je         loc_19dd0

0000000000019c30         test       rax, rax
0000000000019c33         jne        loc_19c61

0000000000019c35         mov        rax, qword [rsp+0x1c8+var_B8]
0000000000019c3d         mov        qword [rsp+0x1c8+var_B0], 0x1
0000000000019c49         cmp        byte [rax], 0x0
0000000000019c4c         jne        loc_1a585

0000000000019c52         mov        eax, dword [rsp+0x1c8+var_A4]
0000000000019c59         test       eax, eax
0000000000019c5b         jne        loc_1a262

                     loc_19c61:
0000000000019c61         lea        rdi, qword [r15+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr+1939
0000000000019c65         mov        byte [rsp+0x1c8+var_A8], 0x1
0000000000019c6d         call       j_mbsinit                                   ; mbsinit
0000000000019c72         test       eax, eax
0000000000019c74         je         loc_19e00

0000000000019c7a         mov        eax, dword [rsp+0x1c8+var_A4]
0000000000019c81         mov        byte [rsp+0x1c8+var_C8], 0x0
0000000000019c89         mov        byte [rsp+0x1c8+var_BC], 0x1
0000000000019c91         test       eax, eax
0000000000019c93         jne        loc_198fc

0000000000019c99         nop        dword [rax]

                     loc_19ca0:
0000000000019ca0         xor        eax, eax                                    ; CODE XREF=mbsstr+91, mbsstr+156, mbsstr+696, mbsstr+1110, mbsstr+2441, mbsstr+2487
0000000000019ca2         jmp        loc_19626
0000000000019ca7         align      16

                     loc_19cb0:
0000000000019cb0         mov        rsi, qword [rsp+0x1c8+var_78]               ; argument "__s2" for method j_memcmp, CODE XREF=mbsstr+1347
0000000000019cb8         mov        rdi, qword [rsp+0x1c8+var_B8]               ; argument "__s1" for method j_memcmp
0000000000019cc0         call       j_memcmp                                    ; memcmp
0000000000019cc5         test       eax, eax
0000000000019cc7         setne      al
0000000000019cca         jmp        loc_19914
0000000000019ccf         align      16

                     loc_19cd0:
0000000000019cd0         mov        qword [rsp+0x1c8+var_F0], 0x1               ; CODE XREF=mbsstr+1476
0000000000019cdc         mov        byte [rsp+0x1c8+var_E8], 0x0
0000000000019ce4         mov        byte [rsp+0x1c8+var_FC], 0x1

                     loc_19cec:
0000000000019cec         cmp        r14, 0x9                                    ; CODE XREF=mbsstr+3357
0000000000019cf0         seta       al
0000000000019cf3         and        al, byte [rsp+0x1c8+var_1B8]
0000000000019cf7         jne        loc_1a538

0000000000019cfd         add        rbx, 0x1

                     loc_19d01:
0000000000019d01         mov        rcx, qword [rsp+0x1c8+var_F0]               ; CODE XREF=mbsstr+745, mbsstr+3311, sub_1a267+742
0000000000019d09         cmp        rcx, qword [rsp+0x1c8+var_170]
0000000000019d0e         jne        loc_199f1

0000000000019d14         mov        rsi, qword [rsp+0x1c8+var_178]              ; argument "__s2" for method j_memcmp
0000000000019d19         mov        rdi, qword [rsp+0x1c8+var_F8]               ; argument "__s1" for method j_memcmp
0000000000019d21         mov        rdx, rcx                                    ; argument "__n" for method j_memcmp
0000000000019d24         mov        qword [rsp+0x1c8+var_1C8], rcx
0000000000019d28         call       j_memcmp                                    ; memcmp
0000000000019d2d         test       eax, eax
0000000000019d2f         mov        rcx, qword [rsp+0x1c8+var_1C8]
0000000000019d33         jne        loc_199f1

0000000000019d39         jmp        loc_197a0
0000000000019d3e         align      64

                     loc_19d40:
0000000000019d40         mov        qword [rsp+0x1c8+var_70], 0x1               ; CODE XREF=mbsstr+1688
0000000000019d4c         mov        byte [rsp+0x1c8+var_68], 0x0
0000000000019d54         mov        byte [rsp+0x1c8+var_7C], 0x1
0000000000019d5c         jmp        loc_199b7
0000000000019d61         align      8

                     loc_19d68:
0000000000019d68         mov        qword [rsp+0x1c8+var_B0], 0x1               ; CODE XREF=mbsstr+1920
0000000000019d74         mov        byte [rsp+0x1c8+var_A8], 0x0
0000000000019d7c         mov        byte [rsp+0x1c8+var_BC], 0x1
0000000000019d84         jmp        loc_199d3
0000000000019d89         align      16

                     loc_19d90:
0000000000019d90         mov        rdi, qword [rsp+0x1c8+var_78]               ; argument "__s" for method j_strlen, CODE XREF=mbsstr+1698
0000000000019d98         call       j_strlen                                    ; strlen
0000000000019d9d         mov        byte [rsp+0x1c8+var_68], 0x0
0000000000019da5         mov        qword [rsp+0x1c8+var_70], rax
0000000000019dad         mov        byte [rsp+0x1c8+var_7C], 0x1
0000000000019db5         jmp        loc_199b7
0000000000019dba         align      64

                     loc_19dc0:
0000000000019dc0         mov        byte [rsp+0x1c8+var_7C], 0x1                ; CODE XREF=mbsstr+1772
0000000000019dc8         jmp        loc_199a8
0000000000019dcd         align      16

                     loc_19dd0:
0000000000019dd0         mov        rdi, qword [rsp+0x1c8+var_B8]               ; argument "__s" for method j_strlen, CODE XREF=mbsstr+1930
0000000000019dd8         call       j_strlen                                    ; strlen
0000000000019ddd         mov        byte [rsp+0x1c8+var_A8], 0x0
0000000000019de5         mov        qword [rsp+0x1c8+var_B0], rax
0000000000019ded         mov        byte [rsp+0x1c8+var_BC], 0x1
0000000000019df5         jmp        loc_199d3
0000000000019dfa         align      512

                     loc_19e00:
0000000000019e00         mov        byte [rsp+0x1c8+var_BC], 0x1                ; CODE XREF=mbsstr+2004
0000000000019e08         jmp        loc_198ed
0000000000019e0d         align      16

                     loc_19e10:
0000000000019e10         mov        rcx, qword [rsp+0x1c8+var_1C0]              ; CODE XREF=mbsstr+144
0000000000019e15         movzx      esi, byte [rcx+1]
0000000000019e19         test       sil, sil
0000000000019e1c         je         loc_19623

0000000000019e22         movzx      edi, byte [r14]
0000000000019e26         test       dil, dil
0000000000019e29         je         loc_19ca0

0000000000019e2f         cmp        sil, dil
0000000000019e32         lea        rbx, qword [rdx+2]
0000000000019e36         jne        loc_19542

0000000000019e3c         neg        rdx
0000000000019e3f         lea        r9, qword [rcx+rdx]
0000000000019e43         add        rdx, r12
0000000000019e46         jmp        loc_19e6a
0000000000019e48         align      16

                     loc_19e50:
0000000000019e50         movzx      edi, byte [rdx+rbx]                         ; CODE XREF=mbsstr+2514
0000000000019e54         test       dil, dil
0000000000019e57         je         loc_19ca0

0000000000019e5d         add        rbx, 0x1
0000000000019e61         cmp        sil, dil
0000000000019e64         jne        loc_19542

                     loc_19e6a:
0000000000019e6a         movzx      esi, byte [r9+rbx]                          ; CODE XREF=mbsstr+2470
0000000000019e6f         test       sil, sil
0000000000019e72         jne        loc_19e50

0000000000019e74         jmp        loc_19623
0000000000019e79         align      128

                     loc_19e80:
0000000000019e80         lea        rax, qword [rsp+0x1c8+var_108]              ; CODE XREF=mbsstr+643
0000000000019e88         lea        rdi, qword [rsp+0x1c8+var_104]              ; argument "__ps" for method j_mbsinit
0000000000019e90         mov        qword [rsp+0x1c8+var_1C8], rax
0000000000019e94         call       j_mbsinit                                   ; mbsinit
0000000000019e99         test       eax, eax
0000000000019e9b         je         loc_1a558

0000000000019ea1         mov        byte [rsp+0x1c8+var_108], 0x1
0000000000019ea9         jmp        loc_19a1f
0000000000019eae         align      16

                     loc_19eb0:
0000000000019eb0         mov        rsi, rbx                                    ; CODE XREF=mbsstr+726, sub_1a267+728
0000000000019eb3         sub        rsi, qword [rsp+0x1c8+var_1A8]
0000000000019eb8         movzx      eax, byte [rsp+0x1c8+var_13C]
0000000000019ec0         mov        qword [rsp+0x1c8+var_1C8], rsi
0000000000019ec4         je         loc_1a517

0000000000019eca         test       al, al
0000000000019ecc         je         loc_19efb

0000000000019ece         cmp        byte [rsp+0x1c8+var_128], 0x0
0000000000019ed6         jne        loc_19f4c

                     loc_19ed8:
0000000000019ed8         mov        rax, qword [rsp+0x1c8+var_130]              ; CODE XREF=mbsstr+2743, mbsstr+3092, mbsstr+3165
0000000000019ee0         add        qword [rsp+0x1c8+var_138], rax
0000000000019ee8         sub        qword [rsp+0x1c8+var_1C8], 0x1
0000000000019eed         mov        byte [rsp+0x1c8+var_13C], 0x0
0000000000019ef5         je         loc_1a108

                     loc_19efb:
0000000000019efb         cmp        byte [rsp+0x1c8+var_148], 0x0               ; CODE XREF=mbsstr+2604
0000000000019f03         jne        loc_1a088

0000000000019f09         mov        rcx, qword [rsp+0x1c8+var_138]
0000000000019f11         movzx      edx, byte [rcx]
0000000000019f14         mov        eax, edx
0000000000019f16         shr        al, 0x5
0000000000019f19         and        eax, 0x7
0000000000019f1c         mov        eax, dword [r13+rax*4]
0000000000019f21         bt         eax, edx
0000000000019f24         jae        loc_19fa0

0000000000019f26         mov        qword [rsp+0x1c8+var_130], 0x1
0000000000019f32         movsx      eax, byte [rcx]
0000000000019f35         mov        byte [rsp+0x1c8+var_128], 0x1
0000000000019f3d         mov        byte [rsp+0x1c8+var_13C], 0x1
0000000000019f45         mov        dword [rsp+0x1c8+var_124], eax

                     loc_19f4c:
0000000000019f4c         mov        r10d, dword [rsp+0x1c8+var_124]             ; CODE XREF=mbsstr+2614, mbsstr+3037, mbsstr+3112
0000000000019f54         test       r10d, r10d
0000000000019f57         jne        loc_19ed8

0000000000019f5d         cmp        byte [rsp+0x1c8+var_13C], 0x0
0000000000019f65         je         loc_1a108

                     loc_19f6b:
0000000000019f6b         mov        rdx, qword [rsp+0x1c8+var_1A0]              ; CODE XREF=mbsstr+3272
0000000000019f70         mov        rsi, qword [rsp+0x1c8+var_1C0]
0000000000019f75         mov        rdi, r12
0000000000019f78         call       knuth_morris_pratt_multibyte                ; knuth_morris_pratt_multibyte
0000000000019f7d         test       al, al
0000000000019f7f         mov        byte [rsp+0x1c8+var_1B8], al
0000000000019f83         jne        loc_1a49f

0000000000019f89         movzx      edx, byte [rsp+0x1c8+var_E8]
0000000000019f91         jmp        loc_1a17b
0000000000019f96         align      32

                     loc_19fa0:
0000000000019fa0         lea        rax, qword [rsp+0x1c8+var_148]              ; CODE XREF=mbsstr+2692
0000000000019fa8         lea        rdi, qword [rsp+0x1c8+var_144]              ; argument "__ps" for method j_mbsinit
0000000000019fb0         mov        qword [rsp+0x1c8+var_1B8], rax
0000000000019fb5         call       j_mbsinit                                   ; mbsinit
0000000000019fba         test       eax, eax
0000000000019fbc         je         loc_1a558

0000000000019fc2         mov        byte [rsp+0x1c8+var_148], 0x1

                     loc_19fca:
0000000000019fca         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbsstr+3061
0000000000019fcf         mov        r8, qword [rsp+0x1c8+var_138]
0000000000019fd7         mov        rsi, rax
0000000000019fda         mov        rdi, r8
0000000000019fdd         mov        qword [rsp+0x1c8+var_1B0], r8
0000000000019fe2         call       strnlen1                                    ; strnlen1
0000000000019fe7         mov        rsi, qword [rsp+0x1c8+var_1B8]
0000000000019fec         mov        r8, qword [rsp+0x1c8+var_1B0]
0000000000019ff1         mov        rdx, rax                                    ; argument #3 for method rpl_mbrtowc
0000000000019ff4         lea        rcx, qword [rsi+4]
0000000000019ff8         lea        rdi, qword [rsi+0x24]                       ; argument #1 for method rpl_mbrtowc
0000000000019ffc         mov        rsi, r8                                     ; argument #2 for method rpl_mbrtowc
0000000000019fff         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000001a004         cmp        rax, 0xffffffffffffffff
000000000001a008         mov        qword [rsp+0x1c8+var_130], rax
000000000001a010         je         loc_1a0a0

000000000001a016         cmp        rax, 0xfffffffffffffffe
000000000001a01a         je         loc_1a0e0

000000000001a020         test       rax, rax
000000000001a023         jne        loc_1a053

000000000001a025         mov        rax, qword [rsp+0x1c8+var_138]
000000000001a02d         mov        qword [rsp+0x1c8+var_130], 0x1
000000000001a039         cmp        byte [rax], 0x0
000000000001a03c         jne        loc_1a585

000000000001a042         mov        r11d, dword [rsp+0x1c8+var_124]
000000000001a04a         test       r11d, r11d
000000000001a04d         jne        loc_1a262

                     loc_1a053:
000000000001a053         mov        rdi, qword [rsp+0x1c8+var_1B8]              ; CODE XREF=mbsstr+2947
000000000001a058         mov        byte [rsp+0x1c8+var_128], 0x1
000000000001a060         add        rdi, 0x4                                    ; argument "__ps" for method j_mbsinit
000000000001a064         call       j_mbsinit                                   ; mbsinit
000000000001a069         test       eax, eax
000000000001a06b         je         loc_1a0c0

000000000001a06d         mov        byte [rsp+0x1c8+var_148], 0x0
000000000001a075         mov        byte [rsp+0x1c8+var_13C], 0x1
000000000001a07d         jmp        loc_19f4c
000000000001a082         align      8

                     loc_1a088:
000000000001a088         lea        rax, qword [rsp+0x1c8+var_148]              ; CODE XREF=mbsstr+2659
000000000001a090         mov        qword [rsp+0x1c8+var_1B8], rax
000000000001a095         jmp        loc_19fca
000000000001a09a         align      32

                     loc_1a0a0:
000000000001a0a0         mov        qword [rsp+0x1c8+var_130], 0x1              ; CODE XREF=mbsstr+2928
000000000001a0ac         mov        byte [rsp+0x1c8+var_128], 0x0
000000000001a0b4         jmp        loc_19ed8
000000000001a0b9         align      64

                     loc_1a0c0:
000000000001a0c0         mov        byte [rsp+0x1c8+var_13C], 0x1               ; CODE XREF=mbsstr+3019
000000000001a0c8         jmp        loc_19f4c
000000000001a0cd         align      16

                     loc_1a0d0:
000000000001a0d0         mov        byte [rsp+0x1c8+var_FC], 0x1                ; CODE XREF=mbsstr+1564
000000000001a0d8         jmp        loc_1974f
000000000001a0dd         align      32

                     loc_1a0e0:
000000000001a0e0         mov        rdi, qword [rsp+0x1c8+var_138]              ; argument "__s" for method j_strlen, CODE XREF=mbsstr+2938
000000000001a0e8         call       j_strlen                                    ; strlen
000000000001a0ed         mov        byte [rsp+0x1c8+var_128], 0x0
000000000001a0f5         mov        qword [rsp+0x1c8+var_130], rax
000000000001a0fd         jmp        loc_19ed8
000000000001a102         align      8

                     loc_1a108:
000000000001a108         cmp        byte [rsp+0x1c8+var_148], 0x0               ; CODE XREF=mbsstr+2645, mbsstr+2757, sub_1a267+690
000000000001a110         jne        loc_1a368

000000000001a116         mov        rcx, qword [rsp+0x1c8+var_138]
000000000001a11e         movzx      edx, byte [rcx]
000000000001a121         mov        eax, edx
000000000001a123         shr        al, 0x5
000000000001a126         and        eax, 0x7
000000000001a129         mov        eax, dword [r13+rax*4]
000000000001a12e         bt         eax, edx
000000000001a131         jae        loc_1a42f

000000000001a137         mov        qword [rsp+0x1c8+var_130], 0x1
000000000001a143         movsx      eax, byte [rcx]
000000000001a146         mov        byte [rsp+0x1c8+var_128], 0x1
000000000001a14e         mov        byte [rsp+0x1c8+var_13C], 0x1
000000000001a156         mov        dword [rsp+0x1c8+var_124], eax

                     loc_1a15d:
000000000001a15d         mov        r8d, dword [rsp+0x1c8+var_124]              ; CODE XREF=sub_1a267+451, sub_1a267+683, sub_1a267+710
000000000001a165         test       r8d, r8d
000000000001a168         je         loc_19f6b

                     loc_1a16e:
000000000001a16e         movzx      edx, byte [rsp+0x1c8+var_E8]                ; CODE XREF=sub_1a267+563, sub_1a267+670, sub_1a267+704
000000000001a176         mov        byte [rsp+0x1c8+var_1B8], 0x1

                     loc_1a17b:
000000000001a17b         lea        rax, qword [rbx+1]                          ; CODE XREF=mbsstr+2801
000000000001a17f         test       dl, dl
000000000001a181         mov        qword [rsp+0x1c8+var_1A8], rbx
000000000001a186         mov        rbx, rax
000000000001a189         jne        loc_19784

000000000001a18f         jmp        loc_19d01
000000000001a194         align      8

                     loc_1a198:
000000000001a198         mov        rdi, qword [rsp+0x1c8+var_F8]               ; argument "__s" for method j_strlen, CODE XREF=mbsstr+1486
000000000001a1a0         call       j_strlen                                    ; strlen
000000000001a1a5         mov        byte [rsp+0x1c8+var_E8], 0x0
000000000001a1ad         mov        qword [rsp+0x1c8+var_F0], rax
000000000001a1b5         mov        byte [rsp+0x1c8+var_FC], 0x1
000000000001a1bd         jmp        loc_19cec
000000000001a1c2         align      8

                     loc_1a1c8:
000000000001a1c8         mov        rdi, rcx                                    ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr+920
000000000001a1cb         mov        qword [rsp+0x1c8+var_1B0], rcx
000000000001a1d0         call       j_mbsinit                                   ; mbsinit
000000000001a1d5         test       eax, eax
000000000001a1d7         je         loc_1a558

000000000001a1dd         mov        byte [rsp+0x1c8+var_88], 0x1
000000000001a1e5         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
000000000001a1ea         mov        r8, qword [rsp+0x1c8+var_78]
000000000001a1f2         mov        rsi, rax
000000000001a1f5         mov        rdi, r8
000000000001a1f8         mov        qword [rsp+0x1c8+var_1C8], r8
000000000001a1fc         call       strnlen1                                    ; strnlen1
000000000001a201         mov        r8, qword [rsp+0x1c8+var_1C8]
000000000001a205         mov        rcx, qword [rsp+0x1c8+var_1B0]
000000000001a20a         lea        rdi, qword [rbp+0x24]                       ; argument #1 for method rpl_mbrtowc
000000000001a20e         mov        rdx, rax                                    ; argument #3 for method rpl_mbrtowc
000000000001a211         mov        rsi, r8                                     ; argument #2 for method rpl_mbrtowc
000000000001a214         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000001a219         cmp        rax, 0xffffffffffffffff
000000000001a21d         mov        qword [rsp+0x1c8+var_70], rax
000000000001a225         je         loc_1a348

000000000001a22b         cmp        rax, 0xfffffffffffffffe
000000000001a22f         je         loc_1a4a9

000000000001a235         test       rax, rax
000000000001a238         jne        loc_1a270

000000000001a23a         mov        rax, qword [rsp+0x1c8+var_78]
000000000001a242         mov        qword [rsp+0x1c8+var_70], 0x1
000000000001a24e         cmp        byte [rax], 0x0
000000000001a251         jne        loc_1a585

000000000001a257         mov        edi, dword [rsp+0x1c8+var_64]
000000000001a25e         test       edi, edi
000000000001a260         je         loc_1a270

                     loc_1a262:
000000000001a262         call       mbuiter_multi_next.part.0_2166              ; mbuiter_multi_next.part.0, CODE XREF=mbsstr+1535, mbsstr+1747, mbsstr+1979, mbsstr+2989, sub_1a267+176, sub_1a267+399
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a267:
000000000001a267         nop        word [rax+rax]
                        ; endp

                     loc_1a270:
000000000001a270         lea        rdi, qword [rbp+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr+3480, mbsstr+3520
000000000001a274         mov        byte [rsp+0x1c8+var_68], 0x1
000000000001a27c         call       j_mbsinit                                   ; mbsinit
000000000001a281         test       eax, eax
000000000001a283         je         loc_1a45e

000000000001a289         mov        byte [rsp+0x1c8+var_88], 0x0
000000000001a291         mov        byte [rsp+0x1c8+var_7C], 0x1
000000000001a299         jmp        loc_19861
000000000001a29e         align      32

                     loc_1a2a0:
000000000001a2a0         mov        rdi, rbp                                    ; argument "__ps" for method j_mbsinit, CODE XREF=mbsstr+350
000000000001a2a3         call       j_mbsinit                                   ; mbsinit
000000000001a2a8         test       eax, eax
000000000001a2aa         je         loc_1a558

000000000001a2b0         mov        byte [rsp+0x1c8+var_188], 0x1
000000000001a2b5         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
000000000001a2ba         mov        r14, qword [rsp+0x1c8+var_178]
000000000001a2bf         mov        rsi, rax
000000000001a2c2         mov        rdi, r14
000000000001a2c5         call       strnlen1                                    ; strnlen1
000000000001a2ca         lea        rdi, qword [rbx+0x24]                       ; argument #1 for method rpl_mbrtowc
000000000001a2ce         mov        rcx, rbp
000000000001a2d1         mov        rdx, rax                                    ; argument #3 for method rpl_mbrtowc
000000000001a2d4         mov        rsi, r14                                    ; argument #2 for method rpl_mbrtowc
000000000001a2d7         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000001a2dc         cmp        rax, 0xffffffffffffffff
000000000001a2e0         mov        qword [rsp+0x1c8+var_170], rax
000000000001a2e5         je         loc_19668

000000000001a2eb         cmp        rax, 0xfffffffffffffffe
000000000001a2ef         je         loc_1a4cb

000000000001a2f5         test       rax, rax
000000000001a2f8         jne        loc_1a31d

000000000001a2fa         mov        rax, qword [rsp+0x1c8+var_178]
000000000001a2ff         mov        qword [rsp+0x1c8+var_170], 0x1
000000000001a308         cmp        byte [rax], 0x0
000000000001a30b         jne        loc_1a585

000000000001a311         mov        eax, dword [rsp+0x1c8+var_164]
000000000001a315         test       eax, eax
000000000001a317         jne        loc_1a262

                     loc_1a31d:
000000000001a31d         lea        rdi, qword [rbx+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=sub_1a267+145
000000000001a321         mov        byte [rsp+0x1c8+var_168], 0x1
000000000001a326         call       j_mbsinit                                   ; mbsinit
000000000001a32b         test       eax, eax
000000000001a32d         je         loc_1a46b

000000000001a333         mov        byte [rsp+0x1c8+var_188], 0x0
000000000001a338         mov        byte [rsp+0x1c8+var_17C], 0x1
000000000001a33d         jmp        loc_1961b
000000000001a342         align      8

                     loc_1a348:
000000000001a348         mov        qword [rsp+0x1c8+var_70], 0x1               ; CODE XREF=mbsstr+3461
000000000001a354         mov        byte [rsp+0x1c8+var_68], 0x0
000000000001a35c         jmp        loc_19870
000000000001a361         align      8

                     loc_1a368:
000000000001a368         lea        rax, qword [rsp+0x1c8+var_148]              ; CODE XREF=mbsstr+3184
000000000001a370         mov        qword [rsp+0x1c8+var_1B8], rax

                     loc_1a375:
000000000001a375         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=sub_1a267+498
000000000001a37a         mov        r8, qword [rsp+0x1c8+var_138]
000000000001a382         mov        rsi, rax
000000000001a385         mov        rdi, r8
000000000001a388         mov        qword [rsp+0x1c8+var_1C8], r8
000000000001a38c         call       strnlen1                                    ; strnlen1
000000000001a391         mov        rsi, qword [rsp+0x1c8+var_1B8]
000000000001a396         mov        r8, qword [rsp+0x1c8+var_1C8]
000000000001a39a         mov        rdx, rax                                    ; argument #3 for method rpl_mbrtowc
000000000001a39d         lea        rcx, qword [rsi+4]
000000000001a3a1         lea        rdi, qword [rsi+0x24]                       ; argument #1 for method rpl_mbrtowc
000000000001a3a5         mov        rsi, r8                                     ; argument #2 for method rpl_mbrtowc
000000000001a3a8         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000001a3ad         cmp        rax, 0xffffffffffffffff
000000000001a3b1         mov        qword [rsp+0x1c8+var_130], rax
000000000001a3b9         je         loc_1a4e9

000000000001a3bf         cmp        rax, 0xfffffffffffffffe
000000000001a3c3         je         loc_1a475

000000000001a3c9         test       rax, rax
000000000001a3cc         jne        loc_1a3fc

000000000001a3ce         mov        rax, qword [rsp+0x1c8+var_138]
000000000001a3d6         mov        qword [rsp+0x1c8+var_130], 0x1
000000000001a3e2         cmp        byte [rax], 0x0
000000000001a3e5         jne        loc_1a585

000000000001a3eb         mov        r9d, dword [rsp+0x1c8+var_124]
000000000001a3f3         test       r9d, r9d
000000000001a3f6         jne        loc_1a262

                     loc_1a3fc:
000000000001a3fc         mov        rdi, qword [rsp+0x1c8+var_1B8]              ; CODE XREF=sub_1a267+357
000000000001a401         mov        byte [rsp+0x1c8+var_128], 0x1
000000000001a409         add        rdi, 0x4                                    ; argument "__ps" for method j_mbsinit
000000000001a40d         call       j_mbsinit                                   ; mbsinit
000000000001a412         test       eax, eax
000000000001a414         je         loc_1a50a

000000000001a41a         mov        byte [rsp+0x1c8+var_148], 0x0
000000000001a422         mov        byte [rsp+0x1c8+var_13C], 0x1
000000000001a42a         jmp        loc_1a15d

                     loc_1a42f:
000000000001a42f         lea        rax, qword [rsp+0x1c8+var_148]              ; CODE XREF=mbsstr+3217
000000000001a437         lea        rdi, qword [rsp+0x1c8+var_144]              ; argument "__ps" for method j_mbsinit
000000000001a43f         mov        qword [rsp+0x1c8+var_1B8], rax
000000000001a444         call       j_mbsinit                                   ; mbsinit
000000000001a449         test       eax, eax
000000000001a44b         je         loc_1a558

000000000001a451         mov        byte [rsp+0x1c8+var_148], 0x1
000000000001a459         jmp        loc_1a375

                     loc_1a45e:
000000000001a45e         mov        byte [rsp+0x1c8+var_7C], 0x1                ; CODE XREF=sub_1a267+28
000000000001a466         jmp        loc_19861

                     loc_1a46b:
000000000001a46b         mov        byte [rsp+0x1c8+var_17C], 0x1               ; CODE XREF=sub_1a267+198
000000000001a470         jmp        loc_1961b

                     loc_1a475:
000000000001a475         mov        rdi, qword [rsp+0x1c8+var_138]              ; argument "__s" for method j_strlen, CODE XREF=sub_1a267+348
000000000001a47d         call       j_strlen                                    ; strlen
000000000001a482         mov        byte [rsp+0x1c8+var_128], 0x0
000000000001a48a         mov        qword [rsp+0x1c8+var_130], rax
000000000001a492         mov        byte [rsp+0x1c8+var_13C], 0x1
000000000001a49a         jmp        loc_1a16e

                     loc_1a49f:
000000000001a49f         mov        rax, qword [rsp+0x1c8+var_190]              ; CODE XREF=mbsstr+275, mbsstr+2787
000000000001a4a4         jmp        loc_19626

                     loc_1a4a9:
000000000001a4a9         mov        rdi, qword [rsp+0x1c8+var_78]               ; argument "__s" for method j_strlen, CODE XREF=mbsstr+3471
000000000001a4b1         call       j_strlen                                    ; strlen
000000000001a4b6         mov        byte [rsp+0x1c8+var_68], 0x0
000000000001a4be         mov        qword [rsp+0x1c8+var_70], rax
000000000001a4c6         jmp        loc_19870

                     loc_1a4cb:
000000000001a4cb         mov        rdi, qword [rsp+0x1c8+var_178]              ; argument "__s" for method j_strlen, CODE XREF=sub_1a267+136
000000000001a4d0         call       j_strlen                                    ; strlen
000000000001a4d5         mov        byte [rsp+0x1c8+var_168], 0x0
000000000001a4da         mov        qword [rsp+0x1c8+var_170], rax
000000000001a4df         mov        byte [rsp+0x1c8+var_17C], 0x1
000000000001a4e4         jmp        loc_1967b

                     loc_1a4e9:
000000000001a4e9         mov        qword [rsp+0x1c8+var_130], 0x1              ; CODE XREF=sub_1a267+338
000000000001a4f5         mov        byte [rsp+0x1c8+var_128], 0x0
000000000001a4fd         mov        byte [rsp+0x1c8+var_13C], 0x1
000000000001a505         jmp        loc_1a16e

                     loc_1a50a:
000000000001a50a         mov        byte [rsp+0x1c8+var_13C], 0x1               ; CODE XREF=sub_1a267+429
000000000001a512         jmp        loc_1a15d

                     loc_1a517:
000000000001a517         test       al, al                                      ; CODE XREF=mbsstr+2596
000000000001a519         je         loc_1a108

000000000001a51f         cmp        byte [rsp+0x1c8+var_128], 0x0
000000000001a527         je         loc_1a16e

000000000001a52d         jmp        loc_1a15d
000000000001a532         align      8

                     loc_1a538:
000000000001a538         lea        rdx, qword [r14+r14*4]                      ; CODE XREF=mbsstr+2135
000000000001a53c         cmp        rbx, rdx
000000000001a53f         jae        loc_19eb0

000000000001a545         add        rbx, 0x1
000000000001a549         mov        byte [rsp+0x1c8+var_1B8], al
000000000001a54d         jmp        loc_19d01
000000000001a552         align      8

                     loc_1a558:
000000000001a558         lea        rcx, qword [__PRETTY_FUNCTION__.5056]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbsstr+1611, mbsstr+1843, mbsstr+2555, mbsstr+2844, mbsstr+3383, sub_1a267+67, sub_1a267+484
000000000001a55f         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
000000000001a566         lea        rdi, qword [aMbsinitItersta]                ; argument "__assertion" for method j___assert_fail, "mbsinit (&iter->state)"
000000000001a56d         mov        edx, 0x96                                   ; argument "__line" for method j___assert_fail
000000000001a572         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_1a577:
000000000001a577         add        rbx, 0x1                                    ; CODE XREF=mbsstr+713
000000000001a57b         jmp        loc_19784

                     loc_1a580:
000000000001a580         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=mbsstr+407
                        ; endp

                     loc_1a585:
000000000001a585         lea        rcx, qword [__PRETTY_FUNCTION__.5056]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbsstr+1520, mbsstr+1732, mbsstr+1964, mbsstr+2972, mbsstr+3505, sub_1a267+164, sub_1a267+382
000000000001a58c         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
000000000001a593         lea        rdi, qword [aItercurptr0]                   ; argument "__assertion" for method j___assert_fail, "*iter->cur.ptr == '\\0'"
000000000001a59a         mov        edx, 0xb2                                   ; argument "__line" for method j___assert_fail
000000000001a59f         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_1a5a4:
000000000001a5a4         call       j_abort                                     ; abort, CODE XREF=mbsstr+970
                        ; endp
000000000001a5a9         align      16                                          ; End of unwind block (FDE at 0x1fda8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_1048: int8_t, -4168
        ;    var_1050: int64_t, -4176
        ;    var_1058: int64_t, -4184
        ;    var_1060: int64_t, -4192
        ;    var_1068: int64_t, -4200
        ;    var_1070: int64_t, -4208
        ;    var_1078: int64_t, -4216
        ;    var_1080: int64_t, -4224
        ;    var_1088: int64_t, -4232
        ;    var_1090: int64_t, -4240


                     mem_cd_iconv:
000000000001a5b0         push       r15                                         ; Begin of unwind block (FDE at 0x1fdfc), CODE XREF=xmem_cd_iconv+1
000000000001a5b2         push       r14
000000000001a5b4         mov        r15, rdi
000000000001a5b7         push       r13
000000000001a5b9         push       r12
000000000001a5bb         mov        r13, rsi
000000000001a5be         push       rbp
000000000001a5bf         push       rbx
000000000001a5c0         mov        rbx, rdx
000000000001a5c3         xor        esi, esi                                    ; argument "__inbuf" for method j_iconv
000000000001a5c5         xor        edx, edx                                    ; argument "__inbytesleft" for method j_iconv
000000000001a5c7         sub        rsp, 0x1068
000000000001a5ce         mov        qword [rsp+0x1098+var_1070], rdi
000000000001a5d3         mov        qword [rsp+0x1098+var_1080], rcx
000000000001a5d8         mov        rdi, rbx                                    ; argument "__cd" for method j_iconv
000000000001a5db         mov        qword [rsp+0x1098+var_1088], r8
000000000001a5e0         xor        ecx, ecx                                    ; argument "__outbuf" for method j_iconv
000000000001a5e2         xor        r8d, r8d                                    ; argument "__outbytesleft" for method j_iconv
000000000001a5e5         mov        rax, qword [fs:0x28]
000000000001a5ee         mov        qword [rsp+0x1098+var_40], rax
000000000001a5f6         xor        eax, eax
000000000001a5f8         call       j_iconv                                     ; iconv
000000000001a5fd         mov        qword [rsp+0x1098+var_1068], r15
000000000001a602         xor        r15d, r15d
000000000001a605         test       r13, r13
000000000001a608         mov        qword [rsp+0x1098+var_1060], r13
000000000001a60d         lea        r14, qword [rsp+0x1098+var_1048]
000000000001a612         lea        r12, qword [rsp+0x1098+var_1050]
000000000001a617         lea        rbp, qword [rsp+0x1098+var_1058]
000000000001a61c         je         loc_1a69b

000000000001a61e         lea        rax, qword [rsp+0x1098+var_1060]
000000000001a623         lea        rsi, qword [rsp+0x1098+var_1068]
000000000001a628         mov        qword [rsp+0x1098+var_1078], r13
000000000001a62d         mov        qword [rsp+0x1098+var_1090], rsi
000000000001a632         mov        r13, rax
000000000001a635         jmp        loc_1a657
000000000001a637         align      64

                     loc_1a640:
000000000001a640         mov        rax, qword [rsp+0x1098+var_1058]            ; CODE XREF=mem_cd_iconv+207, mem_cd_iconv+219
000000000001a645         sub        rax, r14
000000000001a648         add        r15, rax
000000000001a64b         cmp        qword [rsp+0x1098+var_1060], 0x0
000000000001a651         je         loc_1a7f0

                     loc_1a657:
000000000001a657         mov        rsi, qword [rsp+0x1098+var_1090]            ; argument "__inbuf" for method j_iconv, CODE XREF=mem_cd_iconv+133
000000000001a65c         mov        r8, r12                                     ; argument "__outbytesleft" for method j_iconv
000000000001a65f         mov        rcx, rbp                                    ; argument "__outbuf" for method j_iconv
000000000001a662         mov        rdx, r13                                    ; argument "__inbytesleft" for method j_iconv
000000000001a665         mov        rdi, rbx                                    ; argument "__cd" for method j_iconv
000000000001a668         mov        qword [rsp+0x1098+var_1058], r14
000000000001a66d         mov        qword [rsp+0x1098+var_1050], 0x1000
000000000001a676         call       j_iconv                                     ; iconv
000000000001a67b         cmp        rax, 0xffffffffffffffff
000000000001a67f         jne        loc_1a640

000000000001a681         call       j___errno_location                          ; __errno_location
000000000001a686         mov        eax, dword [rax]
000000000001a688         cmp        eax, 0x7
000000000001a68b         je         loc_1a640

000000000001a68d         cmp        eax, 0x16
000000000001a690         mov        r13, qword [rsp+0x1098+var_1078]
000000000001a695         jne        loc_1a859

                     loc_1a69b:
000000000001a69b         xor        edx, edx                                    ; argument "__inbytesleft" for method j_iconv, CODE XREF=mem_cd_iconv+108, mem_cd_iconv+581
000000000001a69d         xor        esi, esi                                    ; argument "__inbuf" for method j_iconv
000000000001a69f         mov        r8, r12                                     ; argument "__outbytesleft" for method j_iconv
000000000001a6a2         mov        rcx, rbp                                    ; argument "__outbuf" for method j_iconv
000000000001a6a5         mov        rdi, rbx                                    ; argument "__cd" for method j_iconv
000000000001a6a8         mov        qword [rsp+0x1098+var_1058], r14
000000000001a6ad         mov        qword [rsp+0x1098+var_1050], 0x1000
000000000001a6b6         call       j_iconv                                     ; iconv
000000000001a6bb         cmp        rax, 0xffffffffffffffff
000000000001a6bf         je         loc_1a859

000000000001a6c5         mov        rax, qword [rsp+0x1098+var_1058]
000000000001a6ca         sub        rax, r14
000000000001a6cd         add        rax, r15
000000000001a6d0         mov        qword [rsp+0x1098+var_1090], rax
000000000001a6d5         je         loc_1a800

000000000001a6db         mov        rax, qword [rsp+0x1098+var_1080]
000000000001a6e0         mov        rax, qword [rax]
000000000001a6e3         test       rax, rax
000000000001a6e6         mov        qword [rsp+0x1098+var_1078], rax
000000000001a6eb         je         loc_1a6fc

000000000001a6ed         mov        rax, qword [rsp+0x1098+var_1088]
000000000001a6f2         mov        rcx, qword [rsp+0x1098+var_1090]
000000000001a6f7         cmp        qword [rax], rcx
000000000001a6fa         jae        loc_1a714

                     loc_1a6fc:
000000000001a6fc         mov        rdi, qword [rsp+0x1098+var_1090]            ; argument "__size" for method j_malloc, CODE XREF=mem_cd_iconv+315
000000000001a701         call       j_malloc                                    ; malloc
000000000001a706         test       rax, rax
000000000001a709         mov        qword [rsp+0x1098+var_1078], rax
000000000001a70e         je         loc_1a84e

                     loc_1a714:
000000000001a714         xor        r8d, r8d                                    ; argument "__outbytesleft" for method j_iconv, CODE XREF=mem_cd_iconv+330
000000000001a717         xor        ecx, ecx                                    ; argument "__outbuf" for method j_iconv
000000000001a719         xor        edx, edx                                    ; argument "__inbytesleft" for method j_iconv
000000000001a71b         xor        esi, esi                                    ; argument "__inbuf" for method j_iconv
000000000001a71d         mov        rdi, rbx                                    ; argument "__cd" for method j_iconv
000000000001a720         lea        r15, qword [rsp+0x1098+var_1060]
000000000001a725         call       j_iconv                                     ; iconv
000000000001a72a         mov        rax, qword [rsp+0x1098+var_1070]
000000000001a72f         mov        qword [rsp+0x1098+var_1060], r13
000000000001a734         lea        r14, qword [rsp+0x1098+var_1068]
000000000001a739         mov        qword [rsp+0x1098+var_1068], rax
000000000001a73e         mov        rax, qword [rsp+0x1098+var_1078]
000000000001a743         mov        qword [rsp+0x1098+var_1058], rax
000000000001a748         mov        rax, qword [rsp+0x1098+var_1090]
000000000001a74d         mov        qword [rsp+0x1098+var_1050], rax
000000000001a752         jmp        loc_1a77b
000000000001a754         align      8

                     loc_1a758:
000000000001a758         mov        r8, r12                                     ; argument "__outbytesleft" for method j_iconv, CODE XREF=mem_cd_iconv+462
000000000001a75b         mov        rcx, rbp                                    ; argument "__outbuf" for method j_iconv
000000000001a75e         mov        rdx, r15                                    ; argument "__inbytesleft" for method j_iconv
000000000001a761         mov        rsi, r14                                    ; argument "__inbuf" for method j_iconv
000000000001a764         mov        rdi, rbx                                    ; argument "__cd" for method j_iconv
000000000001a767         call       j_iconv                                     ; iconv
000000000001a76c         cmp        rax, 0xffffffffffffffff
000000000001a770         je         loc_1a810

000000000001a776         mov        r13, qword [rsp+0x1098+var_1060]

                     loc_1a77b:
000000000001a77b         test       r13, r13                                    ; CODE XREF=mem_cd_iconv+418
000000000001a77e         jne        loc_1a758

                     loc_1a780:
000000000001a780         xor        edx, edx                                    ; argument "__inbytesleft" for method j_iconv, CODE XREF=mem_cd_iconv+616
000000000001a782         xor        esi, esi                                    ; argument "__inbuf" for method j_iconv
000000000001a784         mov        r8, r12                                     ; argument "__outbytesleft" for method j_iconv
000000000001a787         mov        rcx, rbp                                    ; argument "__outbuf" for method j_iconv
000000000001a78a         mov        rdi, rbx                                    ; argument "__cd" for method j_iconv
000000000001a78d         call       j_iconv                                     ; iconv
000000000001a792         cmp        rax, 0xffffffffffffffff
000000000001a796         je         loc_1a81e

000000000001a79c         cmp        qword [rsp+0x1098+var_1050], 0x0
000000000001a7a2         jne        loc_1a863

000000000001a7a8         mov        rax, qword [rsp+0x1098+var_1080]
000000000001a7ad         mov        rsi, qword [rsp+0x1098+var_1078]
000000000001a7b2         xor        ebx, ebx
000000000001a7b4         mov        rdi, qword [rsp+0x1098+var_1090]
000000000001a7b9         mov        qword [rax], rsi
000000000001a7bc         mov        rax, qword [rsp+0x1098+var_1088]
000000000001a7c1         mov        qword [rax], rdi

                     loc_1a7c4:
000000000001a7c4         mov        rdx, qword [rsp+0x1098+var_40]              ; CODE XREF=mem_cd_iconv+606, mem_cd_iconv+640, mem_cd_iconv+665, mem_cd_iconv+686
000000000001a7cc         xor        rdx, qword [fs:0x28]
000000000001a7d5         mov        eax, ebx
000000000001a7d7         jne        loc_1a868

000000000001a7dd         add        rsp, 0x1068
000000000001a7e4         pop        rbx
000000000001a7e5         pop        rbp
000000000001a7e6         pop        r12
000000000001a7e8         pop        r13
000000000001a7ea         pop        r14
000000000001a7ec         pop        r15
000000000001a7ee         ret
                        ; endp
000000000001a7ef         align      16

                     loc_1a7f0:
000000000001a7f0         mov        r13, qword [rsp+0x1098+var_1078]            ; CODE XREF=mem_cd_iconv+161
000000000001a7f5         jmp        loc_1a69b
000000000001a7fa         align      2048

                     loc_1a800:
000000000001a800         mov        rax, qword [rsp+0x1098+var_1088]            ; CODE XREF=mem_cd_iconv+293
000000000001a805         xor        ebx, ebx
000000000001a807         mov        qword [rax], 0x0
000000000001a80e         jmp        loc_1a7c4

                     loc_1a810:
000000000001a810         call       j___errno_location                          ; __errno_location, CODE XREF=mem_cd_iconv+448
000000000001a815         cmp        dword [rax], 0x16
000000000001a818         je         loc_1a780

                     loc_1a81e:
000000000001a81e         mov        rax, qword [rsp+0x1098+var_1080]            ; CODE XREF=mem_cd_iconv+486
000000000001a823         mov        r15, qword [rsp+0x1098+var_1078]
000000000001a828         mov        ebx, 0xffffffff
000000000001a82d         cmp        qword [rax], r15
000000000001a830         je         loc_1a7c4

000000000001a832         call       j___errno_location                          ; __errno_location
000000000001a837         mov        r12d, dword [rax]
000000000001a83a         mov        rbp, rax
000000000001a83d         mov        rdi, r15                                    ; argument "__ptr" for method j_free
000000000001a840         call       j_free                                      ; free
000000000001a845         mov        dword [rbp], r12d
000000000001a849         jmp        loc_1a7c4

                     loc_1a84e:
000000000001a84e         call       j___errno_location                          ; __errno_location, CODE XREF=mem_cd_iconv+350
000000000001a853         mov        dword [rax], 0xc

                     loc_1a859:
000000000001a859         mov        ebx, 0xffffffff                             ; CODE XREF=mem_cd_iconv+229, mem_cd_iconv+271
000000000001a85e         jmp        loc_1a7c4

                     loc_1a863:
000000000001a863         call       j_abort                                     ; abort, CODE XREF=mem_cd_iconv+498
                        ; endp

                     loc_1a868:
000000000001a868         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=mem_cd_iconv+551
                        ; endp
000000000001a86d         align      16                                          ; End of unwind block (FDE at 0x1fdfc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136


                     str_cd_iconv:
000000000001a870         push       r15                                         ; Begin of unwind block (FDE at 0x1fe4c), CODE XREF=xstr_cd_iconv+1, str_iconv+102
000000000001a872         push       r14
000000000001a874         push       r13
000000000001a876         push       r12
000000000001a878         mov        r12, rsi
000000000001a87b         push       rbp
000000000001a87c         push       rbx
000000000001a87d         sub        rsp, 0x58
000000000001a881         mov        rax, qword [fs:0x28]
000000000001a88a         mov        qword [rsp+0x88+var_40], rax
000000000001a88f         xor        eax, eax
000000000001a891         mov        qword [rsp+0x88+var_60], rdi
000000000001a896         call       j_strlen                                    ; strlen
000000000001a89b         mov        r13, rax
000000000001a89e         mov        qword [rsp+0x88+var_58], rax
000000000001a8a3         shl        r13, 0x4
000000000001a8a7         cmp        rax, 0x10000000
000000000001a8ad         cmovae     r13, rax
000000000001a8b1         lea        rbp, qword [r13+1]
000000000001a8b5         mov        rdi, rbp                                    ; argument "__size" for method j_malloc
000000000001a8b8         call       j_malloc                                    ; malloc
000000000001a8bd         test       rax, rax
000000000001a8c0         mov        rbx, rax
000000000001a8c3         je         loc_1aaa0

000000000001a8c9         xor        r8d, r8d                                    ; argument "__outbytesleft" for method j_iconv
000000000001a8cc         xor        ecx, ecx                                    ; argument "__outbuf" for method j_iconv
000000000001a8ce         xor        edx, edx                                    ; argument "__inbytesleft" for method j_iconv
000000000001a8d0         xor        esi, esi                                    ; argument "__inbuf" for method j_iconv
000000000001a8d2         mov        rdi, r12                                    ; argument "__cd" for method j_iconv
000000000001a8d5         call       j_iconv                                     ; iconv
000000000001a8da         lea        rax, qword [rsp+0x88+var_48]
000000000001a8df         mov        qword [rsp+0x88+var_50], rbx
000000000001a8e4         mov        qword [rsp+0x88+var_48], r13
000000000001a8e9         mov        qword [rsp+0x88+var_80], rax
000000000001a8ee         lea        rax, qword [rsp+0x88+var_50]
000000000001a8f3         mov        qword [rsp+0x88+var_88], rax
000000000001a8f7         lea        rax, qword [rsp+0x88+var_58]
000000000001a8fc         mov        qword [rsp+0x88+var_70], rax
000000000001a901         lea        rax, qword [rsp+0x88+var_60]
000000000001a906         mov        qword [rsp+0x88+var_78], rax
000000000001a90b         jmp        loc_1a974
000000000001a90d         align      16

                     loc_1a910:
000000000001a910         call       j___errno_location                          ; __errno_location, CODE XREF=str_cd_iconv+291
000000000001a915         mov        r15, rax
000000000001a918         mov        eax, dword [rax]
000000000001a91a         cmp        eax, 0x16
000000000001a91d         je         loc_1aa06

000000000001a923         cmp        eax, 0x7
000000000001a926         jne        loc_1aa5e

000000000001a92c         mov        r14, qword [rsp+0x88+var_50]
000000000001a931         lea        r13, qword [rbp+rbp]
000000000001a936         sub        r14, rbx
000000000001a939         cmp        rbp, r13
000000000001a93c         jae        loc_1aa90

000000000001a942         mov        rsi, r13                                    ; argument "__size" for method j_realloc
000000000001a945         mov        rdi, rbx                                    ; argument "__ptr" for method j_realloc
000000000001a948         call       j_realloc                                   ; realloc
000000000001a94d         test       rax, rax
000000000001a950         je         loc_1aa90

000000000001a956         lea        rsi, qword [rax+r14]
000000000001a95a         mov        rbx, rax
000000000001a95d         mov        rbp, r13
000000000001a960         mov        qword [rsp+0x88+var_50], rsi
000000000001a965         lea        rsi, qword [r13-1]
000000000001a969         mov        rdx, rsi
000000000001a96c         sub        rdx, r14
000000000001a96f         mov        qword [rsp+0x88+var_48], rdx

                     loc_1a974:
000000000001a974         mov        r8, qword [rsp+0x88+var_80]                 ; argument "__outbytesleft" for method j_iconv, CODE XREF=str_cd_iconv+155
000000000001a979         mov        rcx, qword [rsp+0x88+var_88]                ; argument "__outbuf" for method j_iconv
000000000001a97d         mov        rdi, r12                                    ; argument "__cd" for method j_iconv
000000000001a980         mov        rdx, qword [rsp+0x88+var_70]                ; argument "__inbytesleft" for method j_iconv
000000000001a985         mov        rsi, qword [rsp+0x88+var_78]                ; argument "__inbuf" for method j_iconv
000000000001a98a         call       j_iconv                                     ; iconv
000000000001a98f         cmp        rax, 0xffffffffffffffff
000000000001a993         je         loc_1a910

000000000001a999         jmp        loc_1aa06
000000000001a99b         align      32

                     loc_1a9a0:
000000000001a9a0         call       j___errno_location                          ; __errno_location, CODE XREF=str_cd_iconv+431
000000000001a9a5         cmp        dword [rax], 0x7
000000000001a9a8         mov        rcx, rax
000000000001a9ab         jne        loc_1aa5e

000000000001a9b1         mov        r15, qword [rsp+0x88+var_50]
000000000001a9b6         lea        rdx, qword [rbp+rbp]
000000000001a9bb         sub        r15, rbx
000000000001a9be         cmp        rbp, rdx
000000000001a9c1         jae        loc_1aa58

000000000001a9c7         mov        rsi, rdx                                    ; argument "__size" for method j_realloc
000000000001a9ca         mov        rdi, rbx                                    ; argument "__ptr" for method j_realloc
000000000001a9cd         mov        qword [rsp+0x88+var_78], rdx
000000000001a9d2         mov        qword [rsp+0x88+var_70], rax
000000000001a9d7         call       j_realloc                                   ; realloc
000000000001a9dc         test       rax, rax
000000000001a9df         mov        rdx, qword [rsp+0x88+var_78]
000000000001a9e4         mov        rcx, qword [rsp+0x88+var_70]
000000000001a9e9         je         loc_1aa58

000000000001a9eb         lea        rcx, qword [rax+r15]
000000000001a9ef         mov        rbp, rdx
000000000001a9f2         mov        rbx, rax
000000000001a9f5         mov        qword [rsp+0x88+var_50], rcx
000000000001a9fa         lea        rcx, qword [rdx-1]
000000000001a9fe         sub        rcx, r15
000000000001aa01         mov        qword [rsp+0x88+var_48], rcx

                     loc_1aa06:
000000000001aa06         mov        r8, qword [rsp+0x88+var_80]                 ; argument "__outbytesleft" for method j_iconv, CODE XREF=str_cd_iconv+173, str_cd_iconv+297
000000000001aa0b         mov        rcx, qword [rsp+0x88+var_88]                ; argument "__outbuf" for method j_iconv
000000000001aa0f         xor        edx, edx                                    ; argument "__inbytesleft" for method j_iconv
000000000001aa11         xor        esi, esi                                    ; argument "__inbuf" for method j_iconv
000000000001aa13         mov        rdi, r12                                    ; argument "__cd" for method j_iconv
000000000001aa16         call       j_iconv                                     ; iconv
000000000001aa1b         cmp        rax, 0xffffffffffffffff
000000000001aa1f         je         loc_1a9a0

000000000001aa25         mov        rax, qword [rsp+0x88+var_50]
000000000001aa2a         lea        rdx, qword [rax+1]
000000000001aa2e         mov        qword [rsp+0x88+var_50], rdx
000000000001aa33         mov        byte [rax], 0x0
000000000001aa36         mov        rsi, qword [rsp+0x88+var_50]
000000000001aa3b         sub        rsi, rbx
000000000001aa3e         cmp        rbp, rsi
000000000001aa41         jbe        loc_1aa68

000000000001aa43         mov        rdi, rbx                                    ; argument "__ptr" for method j_realloc
000000000001aa46         call       j_realloc                                   ; realloc
000000000001aa4b         test       rax, rax
000000000001aa4e         cmovne     rbx, rax
000000000001aa52         jmp        loc_1aa68
000000000001aa54         align      8

                     loc_1aa58:
000000000001aa58         mov        dword [rcx], 0xc                            ; CODE XREF=str_cd_iconv+337, str_cd_iconv+377

                     loc_1aa5e:
000000000001aa5e         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=str_cd_iconv+182, str_cd_iconv+315, str_cd_iconv+551
000000000001aa61         xor        ebx, ebx
000000000001aa63         call       j_free                                      ; free

                     loc_1aa68:
000000000001aa68         mov        rdi, qword [rsp+0x88+var_40]                ; CODE XREF=str_cd_iconv+465, str_cd_iconv+482, str_cd_iconv+571
000000000001aa6d         xor        rdi, qword [fs:0x28]
000000000001aa76         mov        rax, rbx
000000000001aa79         jne        loc_1aaad

000000000001aa7b         add        rsp, 0x58
000000000001aa7f         pop        rbx
000000000001aa80         pop        rbp
000000000001aa81         pop        r12
000000000001aa83         pop        r13
000000000001aa85         pop        r14
000000000001aa87         pop        r15
000000000001aa89         ret
                        ; endp
000000000001aa8a         align      16

                     loc_1aa90:
000000000001aa90         mov        dword [r15], 0xc                            ; CODE XREF=str_cd_iconv+204, str_cd_iconv+224
000000000001aa97         jmp        loc_1aa5e
000000000001aa99         align      32

                     loc_1aaa0:
000000000001aaa0         call       j___errno_location                          ; __errno_location, CODE XREF=str_cd_iconv+83
000000000001aaa5         mov        dword [rax], 0xc
000000000001aaab         jmp        loc_1aa68

                     loc_1aaad:
000000000001aaad         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=str_cd_iconv+521
                        ; endp
000000000001aab2         align      64                                          ; End of unwind block (FDE at 0x1fe4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     str_iconv:
000000000001aac0         push       r13                                         ; Begin of unwind block (FDE at 0x1fe9c), CODE XREF=xstr_iconv+1
000000000001aac2         push       r12
000000000001aac4         push       rbp
000000000001aac5         push       rbx
000000000001aac6         mov        rbx, rdi
000000000001aac9         sub        rsp, 0x8
000000000001aacd         cmp        byte [rdi], 0x0
000000000001aad0         je         loc_1aae7

000000000001aad2         mov        r12, rsi
000000000001aad5         mov        rsi, rdx
000000000001aad8         mov        rbp, rdx
000000000001aadb         mov        rdi, r12
000000000001aade         call       c_strcasecmp                                ; c_strcasecmp
000000000001aae3         test       eax, eax
000000000001aae5         jne        loc_1ab08

                     loc_1aae7:
000000000001aae7         mov        rdi, rbx                                    ; argument "__s" for method j_strdup, CODE XREF=str_iconv+16
000000000001aaea         call       j_strdup                                    ; strdup
000000000001aaef         test       rax, rax
000000000001aaf2         mov        rbx, rax
000000000001aaf5         je         loc_1ab60

                     loc_1aaf7:
000000000001aaf7         add        rsp, 0x8                                    ; CODE XREF=str_iconv+125, str_iconv+152, str_iconv+215, str_iconv+226
000000000001aafb         mov        rax, rbx
000000000001aafe         pop        rbx
000000000001aaff         pop        rbp
000000000001ab00         pop        r12
000000000001ab02         pop        r13
000000000001ab04         ret
                        ; endp
000000000001ab05         align      8

                     loc_1ab08:
000000000001ab08         mov        rdi, rbp                                    ; argument "__tocode" for method j_iconv_open, CODE XREF=str_iconv+37
000000000001ab0b         mov        rsi, r12                                    ; argument "__fromcode" for method j_iconv_open
000000000001ab0e         call       j_iconv_open                                ; iconv_open
000000000001ab13         cmp        rax, 0xffffffffffffffff
000000000001ab17         mov        rbp, rax
000000000001ab1a         je         loc_1aba0

000000000001ab20         mov        rdi, rbx
000000000001ab23         mov        rsi, rax
000000000001ab26         call       str_cd_iconv                                ; str_cd_iconv
000000000001ab2b         test       rax, rax
000000000001ab2e         mov        rbx, rax
000000000001ab31         je         loc_1ab80

000000000001ab33         mov        rdi, rbp                                    ; argument "__cd" for method j_iconv_close
000000000001ab36         call       j_iconv_close                               ; iconv_close
000000000001ab3b         test       eax, eax
000000000001ab3d         jns        loc_1aaf7

000000000001ab3f         call       j___errno_location                          ; __errno_location
000000000001ab44         mov        r12d, dword [rax]
000000000001ab47         mov        rbp, rax
000000000001ab4a         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
000000000001ab4d         call       j_free                                      ; free
000000000001ab52         xor        ebx, ebx
000000000001ab54         mov        dword [rbp], r12d
000000000001ab58         jmp        loc_1aaf7
000000000001ab5a         align      32

                     loc_1ab60:
000000000001ab60         call       j___errno_location                          ; __errno_location, CODE XREF=str_iconv+53
000000000001ab65         mov        dword [rax], 0xc
000000000001ab6b         add        rsp, 0x8
000000000001ab6f         mov        rax, rbx
000000000001ab72         pop        rbx
000000000001ab73         pop        rbp
000000000001ab74         pop        r12
000000000001ab76         pop        r13
000000000001ab78         ret
                        ; endp
000000000001ab79         align      128

                     loc_1ab80:
000000000001ab80         call       j___errno_location                          ; __errno_location, CODE XREF=str_iconv+113
000000000001ab85         mov        r13d, dword [rax]
000000000001ab88         mov        r12, rax
000000000001ab8b         mov        rdi, rbp                                    ; argument "__cd" for method j_iconv_close
000000000001ab8e         call       j_iconv_close                               ; iconv_close
000000000001ab93         mov        dword [r12], r13d
000000000001ab97         jmp        loc_1aaf7
000000000001ab9c         align      32

                     loc_1aba0:
000000000001aba0         xor        ebx, ebx                                    ; CODE XREF=str_iconv+90
000000000001aba2         jmp        loc_1aaf7
000000000001aba7         align      16                                          ; End of unwind block (FDE at 0x1fe9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mmalloca:
000000000001abb0         add        rdi, 0x20                                   ; Begin of unwind block (FDE at 0x1feec), CODE XREF=knuth_morris_pratt+384, knuth_morris_pratt_multibyte+2500
000000000001abb4         jb         loc_1abe3

000000000001abb6         sub        rsp, 0x8
000000000001abba         call       j_malloc                                    ; malloc
000000000001abbf         xor        edx, edx
000000000001abc1         test       rax, rax
000000000001abc4         je         loc_1abdb

000000000001abc6         lea        rdx, qword [rax+0x10]
000000000001abca         and        rdx, 0xffffffffffffffe0
000000000001abce         add        rdx, 0x10
000000000001abd2         mov        rcx, rdx
000000000001abd5         sub        rcx, rax
000000000001abd8         mov        byte [rdx-1], cl

                     loc_1abdb:
000000000001abdb         mov        rax, rdx                                    ; CODE XREF=mmalloca+20
000000000001abde         add        rsp, 0x8
000000000001abe2         ret
                        ; endp

                     loc_1abe3:
000000000001abe3         xor        edx, edx                                    ; CODE XREF=mmalloca+4
000000000001abe5         mov        rax, rdx
000000000001abe8         ret
                        ; endp
000000000001abe9         align      16                                          ; End of unwind block (FDE at 0x1feec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     freea:
000000000001abf0         test       dil, 0xf                                    ; Begin of unwind block (FDE at 0x1ff04), CODE XREF=knuth_morris_pratt+252, knuth_morris_pratt_multibyte+1635, knuth_morris_pratt_multibyte+2576
000000000001abf4         jne        loc_1ac0c

000000000001abf6         test       dil, 0x10
000000000001abfa         jne        loc_1ac00

000000000001abfc         ret
                        ; endp
000000000001abfe         align      1024

                     loc_1ac00:
000000000001ac00         movzx      eax, byte [rdi-1]                           ; CODE XREF=freea+10
000000000001ac04         sub        rdi, rax                                    ; argument "__ptr" for method j_free
000000000001ac07         jmp        j_free                                      ; free
                        ; endp

                     loc_1ac0c:
000000000001ac0c         sub        rsp, 0x8                                    ; CODE XREF=freea+4
000000000001ac10         call       j_abort                                     ; abort
                        ; endp
000000000001ac15         align      32                                          ; End of unwind block (FDE at 0x1ff04)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_54: int32_t, -84
        ;    var_58: int8_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_6C: int8_t, -108
        ;    var_74: int64_t, -116
        ;    var_78: int8_t, -120


                     mbslen:
000000000001ac20         push       r14                                         ; Begin of unwind block (FDE at 0x1ff1c), CODE XREF=knuth_morris_pratt_multibyte+55
000000000001ac22         push       r13
000000000001ac24         push       r12
000000000001ac26         push       rbp
000000000001ac27         push       rbx
000000000001ac28         mov        rbx, rdi
000000000001ac2b         sub        rsp, 0x50
000000000001ac2f         mov        rax, qword [fs:0x28]
000000000001ac38         mov        qword [rsp+0x78+var_30], rax
000000000001ac3d         xor        eax, eax
000000000001ac3f         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
000000000001ac44         cmp        rax, 0x1
000000000001ac48         ja         loc_1ac80

000000000001ac4a         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
000000000001ac4d         call       j_strlen                                    ; strlen
000000000001ac52         mov        rbx, rax

                     loc_1ac55:
000000000001ac55         mov        rsi, qword [rsp+0x78+var_30]                ; CODE XREF=mbslen+205
000000000001ac5a         xor        rsi, qword [fs:0x28]
000000000001ac63         mov        rax, rbx
000000000001ac66         jne        loc_1ae09

000000000001ac6c         add        rsp, 0x50
000000000001ac70         pop        rbx
000000000001ac71         pop        rbp
000000000001ac72         pop        r12
000000000001ac74         pop        r13
000000000001ac76         pop        r14
000000000001ac78         ret
                        ; endp
000000000001ac79         align      128

                     loc_1ac80:
000000000001ac80         mov        rbp, rsp                                    ; CODE XREF=mbslen+40
000000000001ac83         mov        qword [rsp+0x78+var_68], rbx
000000000001ac88         mov        byte [rsp+0x78+var_78], 0x0
000000000001ac8c         mov        qword [rsp+0x78+var_74], 0x0
000000000001ac95         mov        byte [rsp+0x78+var_6C], 0x0
000000000001ac9a         xor        ebx, ebx
000000000001ac9c         lea        r12, qword [is_basic_table]                 ; is_basic_table
000000000001aca3         lea        r13, qword [rbp+4]
000000000001aca7         jmp        loc_1ad06
000000000001aca9         align      16

                     loc_1acb0:
000000000001acb0         mov        rcx, qword [rsp+0x78+var_68]                ; CODE XREF=mbslen+234
000000000001acb5         movzx      edx, byte [rcx]
000000000001acb8         mov        eax, edx
000000000001acba         shr        al, 0x5
000000000001acbd         and        eax, 0x7
000000000001acc0         mov        eax, dword [r12+rax*4]
000000000001acc4         bt         eax, edx
000000000001acc7         jae        loc_1ad90

000000000001accd         mov        qword [rsp+0x78+var_60], 0x1
000000000001acd6         movsx      eax, byte [rcx]
000000000001acd9         mov        byte [rsp+0x78+var_58], 0x1
000000000001acde         mov        byte [rsp+0x78+var_6C], 0x1
000000000001ace3         mov        dword [rsp+0x78+var_54], eax

                     loc_1ace7:
000000000001ace7         mov        eax, dword [rsp+0x78+var_54]                ; CODE XREF=mbslen+360, mbslen+453
000000000001aceb         test       eax, eax
000000000001aced         je         loc_1ac55

                     loc_1acf3:
000000000001acf3         mov        rax, qword [rsp+0x78+var_60]                ; CODE XREF=mbslen+406, mbslen+436
000000000001acf8         add        qword [rsp+0x78+var_68], rax
000000000001acfd         add        rbx, 0x1
000000000001ad01         mov        byte [rsp+0x78+var_6C], 0x0

                     loc_1ad06:
000000000001ad06         cmp        byte [rsp+0x78+var_78], 0x0                 ; CODE XREF=mbslen+135
000000000001ad0a         je         loc_1acb0

                     loc_1ad0c:
000000000001ad0c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbslen+384
000000000001ad11         mov        r14, qword [rsp+0x78+var_68]
000000000001ad16         mov        rsi, rax
000000000001ad19         mov        rdi, r14
000000000001ad1c         call       strnlen1                                    ; strnlen1
000000000001ad21         lea        rcx, qword [rbp+4]
000000000001ad25         lea        rdi, qword [rbp+0x24]
000000000001ad29         mov        rdx, rax
000000000001ad2c         mov        rsi, r14
000000000001ad2f         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000001ad34         cmp        rax, 0xffffffffffffffff
000000000001ad38         mov        qword [rsp+0x78+var_60], rax
000000000001ad3d         je         loc_1ada8

000000000001ad3f         cmp        rax, 0xfffffffffffffffe
000000000001ad43         je         loc_1adc0

000000000001ad45         test       rax, rax
000000000001ad48         jne        loc_1ad6d

000000000001ad4a         mov        rax, qword [rsp+0x78+var_68]
000000000001ad4f         mov        qword [rsp+0x78+var_60], 0x1
000000000001ad58         cmp        byte [rax], 0x0
000000000001ad5b         jne        loc_1ae0e

000000000001ad61         mov        edx, dword [rsp+0x78+var_54]
000000000001ad65         test       edx, edx
000000000001ad67         jne        loc_1ae2d

                     loc_1ad6d:
000000000001ad6d         lea        rdi, qword [rbp+4]                          ; argument "__ps" for method j_mbsinit, CODE XREF=mbslen+296
000000000001ad71         mov        byte [rsp+0x78+var_58], 0x1
000000000001ad76         call       j_mbsinit                                   ; mbsinit
000000000001ad7b         test       eax, eax
000000000001ad7d         je         loc_1ade0

000000000001ad7f         mov        byte [rsp+0x78+var_78], 0x0
000000000001ad83         mov        byte [rsp+0x78+var_6C], 0x1
000000000001ad88         jmp        loc_1ace7
000000000001ad8d         align      16

                     loc_1ad90:
000000000001ad90         mov        rdi, r13                                    ; argument "__ps" for method j_mbsinit, CODE XREF=mbslen+167
000000000001ad93         call       j_mbsinit                                   ; mbsinit
000000000001ad98         test       eax, eax
000000000001ad9a         je         loc_1adea

000000000001ad9c         mov        byte [rsp+0x78+var_78], 0x1
000000000001ada0         jmp        loc_1ad0c
000000000001ada5         align      8

                     loc_1ada8:
000000000001ada8         mov        qword [rsp+0x78+var_60], 0x1                ; CODE XREF=mbslen+285
000000000001adb1         mov        byte [rsp+0x78+var_58], 0x0
000000000001adb6         jmp        loc_1acf3
000000000001adbb         align      64

                     loc_1adc0:
000000000001adc0         mov        rdi, qword [rsp+0x78+var_68]                ; argument "__s" for method j_strlen, CODE XREF=mbslen+291
000000000001adc5         call       j_strlen                                    ; strlen
000000000001adca         mov        byte [rsp+0x78+var_58], 0x0
000000000001adcf         mov        qword [rsp+0x78+var_60], rax
000000000001add4         jmp        loc_1acf3
000000000001add9         align      32

                     loc_1ade0:
000000000001ade0         mov        byte [rsp+0x78+var_6C], 0x1                 ; CODE XREF=mbslen+349
000000000001ade5         jmp        loc_1ace7

                     loc_1adea:
000000000001adea         lea        rcx, qword [__PRETTY_FUNCTION__.5021]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbslen+378
000000000001adf1         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
000000000001adf8         lea        rdi, qword [aMbsinitItersta]                ; argument "__assertion" for method j___assert_fail, "mbsinit (&iter->state)"
000000000001adff         mov        edx, 0x96                                   ; argument "__line" for method j___assert_fail
000000000001ae04         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_1ae09:
000000000001ae09         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=mbslen+70
                        ; endp

                     loc_1ae0e:
000000000001ae0e         lea        rcx, qword [__PRETTY_FUNCTION__.5021]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbslen+315
000000000001ae15         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
000000000001ae1c         lea        rdi, qword [aItercurptr0]                   ; argument "__assertion" for method j___assert_fail, "*iter->cur.ptr == '\\0'"
000000000001ae23         mov        edx, 0xb2                                   ; argument "__line" for method j___assert_fail
000000000001ae28         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_1ae2d:
000000000001ae2d         lea        rcx, qword [__PRETTY_FUNCTION__.5021]       ; argument "__function" for method j___assert_fail, "mbuiter_multi_next", CODE XREF=mbslen+327
000000000001ae34         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/mbuiter.h"
000000000001ae3b         lea        rdi, qword [aItercurwc0]                    ; argument "__assertion" for method j___assert_fail, "iter->cur.wc == 0"
000000000001ae42         mov        edx, 0xb3                                   ; argument "__line" for method j___assert_fail
000000000001ae47         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000001ae4c         align      16                                          ; End of unwind block (FDE at 0x1ff1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
000000000001ae50         push       r15                                         ; Begin of unwind block (FDE at 0x1ff64), DATA XREF=_start+22
000000000001ae52         push       r14
000000000001ae54         mov        r15, rdx
000000000001ae57         push       r13
000000000001ae59         push       r12
000000000001ae5b         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
000000000001ae62         push       rbp
000000000001ae63         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000001ae6a         push       rbx
000000000001ae6b         mov        r13d, edi
000000000001ae6e         mov        r14, rsi
000000000001ae71         sub        rbp, r12
000000000001ae74         sub        rsp, 0x8
000000000001ae78         sar        rbp, 0x3
000000000001ae7c         call       _init                                       ; _init
000000000001ae81         test       rbp, rbp
000000000001ae84         je         loc_1aea6

000000000001ae86         xor        ebx, ebx
000000000001ae88         nop        dword [rax+rax]

                     loc_1ae90:
000000000001ae90         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
000000000001ae93         mov        rsi, r14
000000000001ae96         mov        edi, r13d
000000000001ae99         call       qword [r12+rbx*8]
000000000001ae9d         add        rbx, 0x1
000000000001aea1         cmp        rbp, rbx
000000000001aea4         jne        loc_1ae90

                     loc_1aea6:
000000000001aea6         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
000000000001aeaa         pop        rbx
000000000001aeab         pop        rbp
000000000001aeac         pop        r12
000000000001aeae         pop        r13
000000000001aeb0         pop        r14
000000000001aeb2         pop        r15
000000000001aeb4         ret
                        ; endp
000000000001aeb5         align      64                                          ; End of unwind block (FDE at 0x1ff64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
000000000001aec0         ret                                                    ; Begin of unwind block (FDE at 0x1ffac), DATA XREF=_start+15
                        ; endp
000000000001aec2         align      16                                          ; End of unwind block (FDE at 0x1ffac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
000000000001aed0         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0x1ffc4), __dso_handle, CODE XREF=main+130
000000000001aed7         xor        esi, esi
000000000001aed9         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
000000000001aede         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x1ffc4)
000000000001aedf         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0x1aee0; 0x1aee9[ (9 bytes)
        ; File offset : [110304; 110313[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
000000000001aee0         sub        rsp, 0x8
000000000001aee4         add        rsp, 0x8
000000000001aee8         ret
                        ; endp
000000000001aee9         db  0x00 ; '.'
000000000001aeea         db  0x00 ; '.'
000000000001aeeb         db  0x00 ; '.'
000000000001aeec         db  0x00 ; '.'
000000000001aeed         db  0x00 ; '.'
000000000001aeee         db  0x00 ; '.'
000000000001aeef         db  0x00 ; '.'
000000000001aef0         db  0x00 ; '.'
000000000001aef1         db  0x00 ; '.'
000000000001aef2         db  0x00 ; '.'
000000000001aef3         db  0x00 ; '.'
000000000001aef4         db  0x00 ; '.'
000000000001aef5         db  0x00 ; '.'
000000000001aef6         db  0x00 ; '.'
000000000001aef7         db  0x00 ; '.'
000000000001aef8         db  0x00 ; '.'
000000000001aef9         db  0x00 ; '.'
000000000001aefa         db  0x00 ; '.'
000000000001aefb         db  0x00 ; '.'
000000000001aefc         db  0x00 ; '.'
000000000001aefd         db  0x00 ; '.'
000000000001aefe         db  0x00 ; '.'
000000000001aeff         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0x1af00; 0x1cfb3[ (8371 bytes)
        ; File offset : [110336; 118707[ (8371 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
000000000001af00         db  0x01 ; '.'
000000000001af01         db  0x00 ; '.'
000000000001af02         db  0x02 ; '.'
000000000001af03         db  0x00 ; '.'
000000000001af04         db  0x00 ; '.'
000000000001af05         db  0x00 ; '.'
000000000001af06         db  0x00 ; '.'
000000000001af07         db  0x00 ; '.'
                     aErrorInRegular:
000000000001af08         db         "error in regular expression matcher", 0    ; DATA XREF=matcher_error+1
000000000001af2c         align      16
                     aTrySHelpForMor:
000000000001af30         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
000000000001af57         align      8
                     aUsageSOptionIn:
000000000001af58         db         "Usage: %s [OPTION]... [INPUT]...   (without -G)\n  or:  %s -G [OPTION]... [INPUT [OUTPUT]]\n", 0 ; DATA XREF=usage+93
000000000001afb3         align      8
                     aOutputAPermute:
000000000001afb8         db         "Output a permuted index, including context, of the words in the input files.\n", 0 ; DATA XREF=usage+135
000000000001b006         align      8
                     aNwithNoFileOrW:
000000000001b008         db         "\nWith no FILE, or when FILE is -, read standard input.\n", 0 ; DATA XREF=usage+172
                     aNmandatoryArgu:
000000000001b040         db         "\nMandatory arguments to long options are mandatory for short options too.\n", 0 ; DATA XREF=usage+209
000000000001b08b         align      16
                     aAAutoreference:
000000000001b090         db         "  -A, --auto-reference           output automatically generated references\n  -G, --traditional              behave more like System V 'ptx'\n", 0 ; DATA XREF=usage+246
000000000001b11d         align      32
                     aFFlagtruncatio:
000000000001b120         db         "  -F, --flag-truncation=STRING   use STRING for flagging line truncations.\n                                 The default is '/'\n", 0 ; DATA XREF=usage+283
                     aMMacronamestri:
000000000001b1a0         db         "  -M, --macro-name=STRING        macro name to use instead of 'xx'\n  -O, --format=roff              generate output as roff directives\n  -R, --right-side-refs          put references at right, not counted in -w\n  -S, --sentence-regexp=REGEXP   for end of l" ; DATA XREF=usage+320
000000000001b2a0         db         "ines or end of sentences\n  -T, --format=tex               generate output as TeX directives\n", 0
000000000001b2fd         align      256
                     aWWordregexpreg:
000000000001b300         db         "  -W, --word-regexp=REGEXP       use REGEXP to match each keyword\n  -b, --break-file=FILE          word break characters in this FILE\n  -f, --ignore-case              fold lower case to upper case for sorting\n  -g, --gap-size=NUMBER          gap size in co" ; DATA XREF=usage+357
000000000001b400         db         "lumns between output fields\n  -i, --ignore-file=FILE         read ignore word list from FILE\n  -o, --only-file=FILE           read only word list from this FILE\n", 0
000000000001b4a2         align      8
                     aRReferencesFir:
000000000001b4a8         db         "  -r, --references               first field of each line is a reference\n  -t, --typeset-mode               - not implemented -\n  -w, --width=NUMBER             output width in columns, reference excluded\n", 0 ; DATA XREF=usage+394
000000000001b576         align      8
                     aHelpDisplayThi:
000000000001b578         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+431
000000000001b5a5         align      8
                     aVersionOutputV:
000000000001b5a8         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+468
000000000001b5de         align      32
                     aHttpswwwgnuorg:
000000000001b5e0         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+719, usage+819, usage+912, usage+1022, emit_bug_reporting_address+61
                     aReportAnyTrans:
000000000001b608         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+1063
000000000001b64f         align      16
                     aOrAvailableLoc:
000000000001b650         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+862
000000000001b683         db  0x00 ; '.'
000000000001b684         db  0x00 ; '.'
000000000001b685         db  0x00 ; '.'
000000000001b686         db  0x00 ; '.'
000000000001b687         db  0x00 ; '.'
000000000001b688         db  0x5b ; '['                                         ; DATA XREF=sub_31ea+4909
000000000001b689         db  0x2e ; '.'
000000000001b68a         db  0x3f ; '?'
000000000001b68b         db  0x21 ; '!'
000000000001b68c         db  0x5d ; ']'
000000000001b68d         db  0x5b ; '['
000000000001b68e         db  0x5d ; ']'
000000000001b68f         db  0x22 ; '"'
000000000001b690         db  0x27 ; '''
000000000001b691         db  0x29 ; ')'
000000000001b692         db  0x7d ; '}'
000000000001b693         db  0x5d ; ']'
000000000001b694         db  0x2a ; '*'
000000000001b695         db  0x5c ; '\'
000000000001b696         db  0x28 ; '('
000000000001b697         db  0x24 ; '$'
000000000001b698         db  0x5c ; '\'
000000000001b699         db  0x7c ; '|'
000000000001b69a         db  0x09 ; '.'
000000000001b69b         db  0x5c ; '\'
000000000001b69c         db  0x7c ; '|'
000000000001b69d         db  0x20 ; ' '
000000000001b69e         db  0x20 ; ' '
000000000001b69f         db  0x5c ; '\'
000000000001b6a0         db  0x29 ; ')'
000000000001b6a1         db  0x5b ; '['
000000000001b6a2         db  0x20 ; ' '
000000000001b6a3         db  0x09 ; '.'
000000000001b6a4         db  0x0a ; '.'
000000000001b6a5         db  0x5d ; ']'
000000000001b6a6         db  0x2a ; '*'
000000000001b6a7         db  0x00 ; '.'
                     aErrorRegularEx:
000000000001b6a8         db         "error: regular expression has a match of length zero: %s", 0 ; DATA XREF=sub_31ea+5033
                     aSForRegexpS:
000000000001b6e1         db         "%s (for regexp %s)", 0                     ; DATA XREF=compile_regex+112
                     aOe:
000000000001b6f4         db         "\oe{}", 0                                  ; DATA XREF=print_field+854
                     aOe_1b6fa:        // aOe
000000000001b6fa         db         "\OE{}", 0                                  ; DATA XREF=print_field+1066
                     aAe:
000000000001b700         db         "\ae{}", 0                                  ; DATA XREF=print_field+1093
                     aAe_1b706:        // aAe
000000000001b706         db         "\AE{}", 0                                  ; DATA XREF=print_field+1039
                     aSc_1b70c:        // aSc
000000000001b70c         db         "\'%s%c", 0                                 ; DATA XREF=print_field+513
                     aSc_1b713:        // aSc
000000000001b713         db         "\^%s%c", 0                                 ; DATA XREF=print_field+617
                     aSc_1b71a:        // aSc
000000000001b71a         db         "\\"%s%c", 0                                ; DATA XREF=print_field+662
                     aSc:
000000000001b721         db         "\~%s%c", 0                                 ; DATA XREF=print_field+707
                     aCc:
000000000001b728         db         "\c{%c}", 0                                 ; DATA XREF=print_field+735
                     aAa:
000000000001b72f         db         "\aa{}", 0                                  ; DATA XREF=print_field+788
                     aAa_1b735:        // aAa
000000000001b735         db         "\AA{}", 0                                  ; DATA XREF=print_field+1006
000000000001b73b         db  0x5c ; '\'                                         ; DATA XREF=print_field+573
000000000001b73c         db  0x6f ; 'o'
000000000001b73d         db  0x7b ; '{'
000000000001b73e         db  0x7d ; '}'
000000000001b73f         db  0x00 ; '.'
000000000001b740         db  0x5c ; '\'                                         ; DATA XREF=print_field+979
000000000001b741         db  0x4f ; 'O'
000000000001b742         db  0x7b ; '{'
000000000001b743         db  0x7d ; '}'
000000000001b744         db  0x00 ; '.'
000000000001b745         db  0x24 ; '$'                                         ; DATA XREF=print_field+376
000000000001b746         db  0x5c ; '\'
000000000001b747         db  0x25 ; '%'
000000000001b748         db  0x63 ; 'c'
000000000001b749         db  0x24 ; '$'
000000000001b74a         db  0x00 ; '.'
                     aBackslash:
000000000001b74b         db         "\backslash{}", 0                           ; DATA XREF=print_field+447
000000000001b758         db  0x70 ; 'p'                                         ; DATA XREF=main+671, usage+493, usage+812, usage+996, usage+1015, usage+1049
000000000001b759         db  0x74 ; 't'
000000000001b75a         db  0x78 ; 'x'
000000000001b75b         db  0x00 ; '.'
000000000001b75c         db  0x5b ; '['                                         ; DATA XREF=usage+505
000000000001b75d         db  0x00 ; '.'
                     aTestInvocation:
000000000001b75e         db         "test invocation", 0                        ; DATA XREF=usage+544
                     aMulticallInvoc:
000000000001b76e         db         "Multi-call invocation", 0                  ; DATA XREF=usage+592
                     aSha224sum:
000000000001b784         db         "sha224sum", 0                              ; DATA XREF=usage+609
                     aSha2Utilities:
000000000001b78e         db         "sha2 utilities", 0                         ; DATA XREF=usage+621
                     aSha256sum:
000000000001b79d         db         "sha256sum", 0                              ; DATA XREF=usage+512
                     aSha384sum:
000000000001b7a7         db         "sha384sum", 0                              ; DATA XREF=usage+556
                     aSha512sum:
000000000001b7b1         db         "sha512sum", 0                              ; DATA XREF=usage+580
                     aNsOnlineHelpSn:
000000000001b7bb         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+698
000000000001b7d2         db  0x47 ; 'G'                                         ; DATA XREF=main+664, usage+726, usage+919, emit_bug_reporting_address+68
000000000001b7d3         db  0x4e ; 'N'
000000000001b7d4         db  0x55 ; 'U'
000000000001b7d5         db  0x20 ; ' '
                     aCoreutils:
000000000001b7d6         db         "coreutils", 0                              ; DATA XREF=main+99, main+111, usage+568
000000000001b7e0         db  0x65 ; 'e'                                         ; DATA XREF=usage+765, usage+958
000000000001b7e1         db  0x6e ; 'n'
000000000001b7e2         db  0x5f ; '_'                                         ; DATA XREF=sub_15b10+456
000000000001b7e3         db  0x00 ; '.'
                     aFullDocumentat:
000000000001b7e4         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+793, usage+982
000000000001b7ff         db  0x24 ; '$'                                         ; DATA XREF=main+2942
000000000001b800         db  0x25 ; '%'
000000000001b801         db  0x26 ; '&'
000000000001b802         db  0x23 ; '#'
000000000001b803         db  0x5f ; '_'
000000000001b804         db  0x7b ; '{'
000000000001b805         db  0x7d ; '}'
000000000001b806         db  0x5c ; '\'                                         ; DATA XREF=print_field+503, print_field+607, print_field+652, print_field+697
000000000001b807         db  0x00 ; '.'
                     aUsrlocalsharel:
000000000001b808         db         "/usr/local/share/locale", 0                ; DATA XREF=main+92
                     aInvalidGapWidt:
000000000001b820         db         "invalid gap width: %s", 0                  ; DATA XREF=sub_31ea+5160
                     aInvalidLineWid:
000000000001b836         db         "invalid line width: %s", 0                 ; DATA XREF=sub_31ea+5214
                     aFormat:
000000000001b84d         db         "--format", 0                               ; DATA XREF=main+374
000000000001b856         db  0x46 ; 'F'                                         ; DATA XREF=main+631
000000000001b857         db  0x72 ; 'r'
000000000001b858         db  0x61 ; 'a'
000000000001b859         db  0x6e ; 'n'
000000000001b85a         db  0xc3 ; '.'
000000000001b85b         db  0xa7 ; '.'
000000000001b85c         db  0x6f ; 'o'
000000000001b85d         db  0x69 ; 'i'
000000000001b85e         db  0x73 ; 's'
000000000001b85f         db  0x20 ; ' '
000000000001b860         db  0x50 ; 'P'
000000000001b861         db  0x69 ; 'i'
000000000001b862         db  0x6e ; 'n'
000000000001b863         db  0x61 ; 'a'
000000000001b864         db  0x72 ; 'r'
000000000001b865         db  0x64 ; 'd'
000000000001b866         db  0x00 ; '.'
                     aFPinard:
000000000001b867         db         "F. Pinard", 0                              ; DATA XREF=main+638
000000000001b871         db  0x41 ; 'A'                                         ; DATA XREF=main+29
000000000001b872         db  0x46 ; 'F'
000000000001b873         db  0x3a ; ':'
000000000001b874         db  0x47 ; 'G'
000000000001b875         db  0x4d ; 'M'
000000000001b876         db  0x3a ; ':'
000000000001b877         db  0x4f ; 'O'
000000000001b878         db  0x52 ; 'R'
000000000001b879         db  0x53 ; 'S'
000000000001b87a         db  0x3a ; ':'
000000000001b87b         db  0x54 ; 'T'
000000000001b87c         db  0x57 ; 'W'
000000000001b87d         db  0x3a ; ':'
000000000001b87e         db  0x62 ; 'b'
000000000001b87f         db  0x3a ; ':'
000000000001b880         db  0x69 ; 'i'
000000000001b881         db  0x3a ; ':'
000000000001b882         db  0x66 ; 'f'
000000000001b883         db  0x67 ; 'g'
000000000001b884         db  0x3a ; ':'
000000000001b885         db  0x6f ; 'o'
000000000001b886         db  0x3a ; ':'
000000000001b887         db  0x74 ; 't'
000000000001b888         db  0x72 ; 'r'
000000000001b889         db  0x77 ; 'w'
000000000001b88a         db  0x3a ; ':'
000000000001b88b         db  0x00 ; '.'
000000000001b88c         db  0x77 ; 'w'                                         ; DATA XREF=sub_31ea+4767
000000000001b88d         db  0x00 ; '.'
                     aExtraOperandS:
000000000001b88e         db         "extra operand %s", 0                       ; DATA XREF=sub_31ea+4823
000000000001b89f         db  0x3a ; ':'                                         ; DATA XREF=sub_31ea+2036
000000000001b8a0         db  0x25 ; '%'                                         ; DATA XREF=sub_31ea+134
000000000001b8a1         db  0x6c ; 'l'
000000000001b8a2         db  0x64 ; 'd'
000000000001b8a3         db  0x00 ; '.'
                     aS:
000000000001b8a4         db         ".%s \"", 0                                 ; DATA XREF=sub_31ea+3064
000000000001b8aa         db  0x5c ; '\'                                         ; DATA XREF=sub_31ea+2117
000000000001b8ab         db  0x25 ; '%'
000000000001b8ac         db  0x73 ; 's'
000000000001b8ad         db  0x20 ; ' '
000000000001b8ae         db  0x00 ; '.'
000000000001b8af         db  0x7d ; '}'                                         ; DATA XREF=sub_31ea+2194, sub_31ea+2242, sub_31ea+2365, sub_31ea+2405
000000000001b8b0         db  0x7b ; '{'
000000000001b8b1         db  0x00 ; '.'
                     aRoff:
000000000001b8b2         db         "roff", 0
000000000001b8b7         db  0x74 ; 't'
000000000001b8b8         db  0x65 ; 'e'
000000000001b8b9         db  0x78 ; 'x'
000000000001b8ba         db  0x00 ; '.'
                     aAutoreference:
000000000001b8bb         db         "auto-reference", 0
                     aBreakfile:
000000000001b8ca         db         "break-file", 0
                     aFlagtruncation:
000000000001b8d5         db         "flag-truncation", 0
                     aIgnorecase:
000000000001b8e5         db         "ignore-case", 0
                     aGapsize:
000000000001b8f1         db         "gap-size", 0
                     aIgnorefile:
000000000001b8fa         db         "ignore-file", 0
                     aMacroname:
000000000001b906         db         "macro-name", 0
                     aOnlyfile:
000000000001b911         db         "only-file", 0
                     aReferences:
000000000001b91b         db         "references", 0
                     aRightsiderefs:
000000000001b926         db         "right-side-refs", 0
                     aSentenceregexp:
000000000001b936         db         "sentence-regexp", 0
                     aTraditional:
000000000001b946         db         "traditional", 0
                     aTypesetmode:
000000000001b952         db         "typeset-mode", 0
                     aWidth:
000000000001b95f         db         "width", 0
                     aWordregexp:
000000000001b965         db         "word-regexp", 0
                     aHelp:
000000000001b971         db         "help", 0
                     aVersion:
000000000001b976         db         "version", 0
000000000001b97e         db  0x78 ; 'x'                                         ; DATA XREF=macro_name
000000000001b97f         db  0x78 ; 'x'
000000000001b980         db  0x00 ; '.'
000000000001b981         db  0x00 ; '.'
000000000001b982         db  0x00 ; '.'
000000000001b983         db  0x00 ; '.'
000000000001b984         db  0x00 ; '.'
000000000001b985         db  0x00 ; '.'
000000000001b986         db  0x00 ; '.'
000000000001b987         db  0x00 ; '.'
                     switch_table_1b988:        // switch_table
000000000001b988         dd         print_field.loc_50c0-switch_table_1b988, print_field.loc_52cf-switch_table_1b988, 2 dup (print_field.loc_5190-switch_table_1b988), print_field.loc_51f8-switch_table_1b988 ; switch table used at 0x514f containing 10 entries, DATA XREF=print_field+33
000000000001b99c         dd         print_field.loc_5225-switch_table_1b988, print_field.loc_5252-switch_table_1b988, print_field.loc_527f-switch_table_1b988, print_field.loc_5299-switch_table_1b988
000000000001b9ac         dd         print_field.loc_51c2-switch_table_1b988
                     format_vals:
000000000001b9b0         db  0x02 ; '.'                                         ; DATA XREF=main+4
000000000001b9b1         db  0x00 ; '.'
000000000001b9b2         db  0x00 ; '.'
000000000001b9b3         db  0x00 ; '.'
000000000001b9b4         db  0x03 ; '.'
000000000001b9b5         db  0x00 ; '.'
000000000001b9b6         db  0x00 ; '.'
000000000001b9b7         db  0x00 ; '.'
                     a831:
000000000001b9b8         db         "8.31", 0                                   ; DATA XREF=Version
                     aInvalidArgumen:
000000000001b9bd         db         "invalid argument %s for %s", 0             ; DATA XREF=argmatch_invalid+96
                     aAmbiguousArgum:
000000000001b9d8         db         "ambiguous argument %s for %s", 0           ; DATA XREF=argmatch_invalid+21
                     aValidArguments:
000000000001b9f5         db         "Valid arguments are:", 0                   ; DATA XREF=argmatch_valid+18
                     aNS:
000000000001ba0a         db         "\n  - %s", 0                               ; DATA XREF=argmatch_valid+102
000000000001ba12         db  0x2c ; ','                                         ; DATA XREF=argmatch_valid+181
000000000001ba13         db  0x20 ; ' '
000000000001ba14         db  0x25 ; '%'                                         ; DATA XREF=sub_31ea+5109, swallow_file_in_memory+175, close_stdout+143, xalloc_die+29
000000000001ba15         db  0x73 ; 's'
000000000001ba16         db  0x00 ; '.'
                     aWriteError:
000000000001ba17         db         "write error", 0                            ; DATA XREF=close_stdout+67
                     aSS:
000000000001ba23         db         "%s: %s", 0                                 ; DATA XREF=close_stdout+108
000000000001ba2a         db  0x00 ; '.'
000000000001ba2b         db  0x00 ; '.'
000000000001ba2c         db  0x00 ; '.'
000000000001ba2d         db  0x00 ; '.'
000000000001ba2e         db  0x00 ; '.'
000000000001ba2f         db  0x00 ; '.'
000000000001ba30         db  0x00 ; '.'
000000000001ba31         db  0x00 ; '.'
000000000001ba32         db  0x00 ; '.'
000000000001ba33         db  0x00 ; '.'
000000000001ba34         db  0x00 ; '.'
000000000001ba35         db  0x00 ; '.'
000000000001ba36         db  0x00 ; '.'
000000000001ba37         db  0x00 ; '.'
000000000001ba38         db  0x00 ; '.'
000000000001ba39         db  0x00 ; '.'
000000000001ba3a         db  0x00 ; '.'
000000000001ba3b         db  0x00 ; '.'
000000000001ba3c         db  0x00 ; '.'
000000000001ba3d         db  0x00 ; '.'
000000000001ba3e         db  0x00 ; '.'
000000000001ba3f         db  0x00 ; '.'
                     diacrit_diac:
000000000001ba40         db  0x00 ; '.'                                         ; DATA XREF=main+2969, print_field+13
000000000001ba41         db  0x00 ; '.'
000000000001ba42         db  0x00 ; '.'
000000000001ba43         db  0x00 ; '.'
000000000001ba44         db  0x00 ; '.'
000000000001ba45         db  0x00 ; '.'
000000000001ba46         db  0x00 ; '.'
000000000001ba47         db  0x00 ; '.'
000000000001ba48         db  0x00 ; '.'
000000000001ba49         db  0x00 ; '.'
000000000001ba4a         db  0x00 ; '.'
000000000001ba4b         db  0x00 ; '.'
000000000001ba4c         db  0x00 ; '.'
000000000001ba4d         db  0x00 ; '.'
000000000001ba4e         db  0x00 ; '.'
000000000001ba4f         db  0x00 ; '.'
000000000001ba50         db  0x00 ; '.'
000000000001ba51         db  0x00 ; '.'
000000000001ba52         db  0x00 ; '.'
000000000001ba53         db  0x00 ; '.'
000000000001ba54         db  0x00 ; '.'
000000000001ba55         db  0x00 ; '.'
000000000001ba56         db  0x00 ; '.'
000000000001ba57         db  0x00 ; '.'
000000000001ba58         db  0x00 ; '.'
000000000001ba59         db  0x00 ; '.'
000000000001ba5a         db  0x00 ; '.'
000000000001ba5b         db  0x00 ; '.'
000000000001ba5c         db  0x00 ; '.'
000000000001ba5d         db  0x00 ; '.'
000000000001ba5e         db  0x00 ; '.'
000000000001ba5f         db  0x00 ; '.'
000000000001ba60         db  0x00 ; '.'
000000000001ba61         db  0x00 ; '.'
000000000001ba62         db  0x00 ; '.'
000000000001ba63         db  0x00 ; '.'
000000000001ba64         db  0x00 ; '.'
000000000001ba65         db  0x00 ; '.'
000000000001ba66         db  0x00 ; '.'
000000000001ba67         db  0x00 ; '.'
000000000001ba68         db  0x00 ; '.'
000000000001ba69         db  0x00 ; '.'
000000000001ba6a         db  0x00 ; '.'
000000000001ba6b         db  0x00 ; '.'
000000000001ba6c         db  0x00 ; '.'
000000000001ba6d         db  0x00 ; '.'
000000000001ba6e         db  0x00 ; '.'
000000000001ba6f         db  0x00 ; '.'
000000000001ba70         db  0x00 ; '.'
000000000001ba71         db  0x00 ; '.'
000000000001ba72         db  0x00 ; '.'
000000000001ba73         db  0x00 ; '.'
000000000001ba74         db  0x00 ; '.'
000000000001ba75         db  0x00 ; '.'
000000000001ba76         db  0x00 ; '.'
000000000001ba77         db  0x00 ; '.'
000000000001ba78         db  0x00 ; '.'
000000000001ba79         db  0x00 ; '.'
000000000001ba7a         db  0x00 ; '.'
000000000001ba7b         db  0x00 ; '.'
000000000001ba7c         db  0x00 ; '.'
000000000001ba7d         db  0x00 ; '.'
000000000001ba7e         db  0x00 ; '.'
000000000001ba7f         db  0x00 ; '.'
000000000001ba80         db  0x00 ; '.'
000000000001ba81         db  0x00 ; '.'
000000000001ba82         db  0x00 ; '.'
000000000001ba83         db  0x00 ; '.'
000000000001ba84         db  0x00 ; '.'
000000000001ba85         db  0x00 ; '.'
000000000001ba86         db  0x00 ; '.'
000000000001ba87         db  0x00 ; '.'
000000000001ba88         db  0x00 ; '.'
000000000001ba89         db  0x00 ; '.'
000000000001ba8a         db  0x00 ; '.'
000000000001ba8b         db  0x00 ; '.'
000000000001ba8c         db  0x00 ; '.'
000000000001ba8d         db  0x00 ; '.'
000000000001ba8e         db  0x00 ; '.'
000000000001ba8f         db  0x00 ; '.'
000000000001ba90         db  0x00 ; '.'
000000000001ba91         db  0x00 ; '.'
000000000001ba92         db  0x00 ; '.'
000000000001ba93         db  0x00 ; '.'
000000000001ba94         db  0x00 ; '.'
000000000001ba95         db  0x00 ; '.'
000000000001ba96         db  0x00 ; '.'
000000000001ba97         db  0x00 ; '.'
000000000001ba98         db  0x00 ; '.'
000000000001ba99         db  0x00 ; '.'
000000000001ba9a         db  0x00 ; '.'
000000000001ba9b         db  0x00 ; '.'
000000000001ba9c         db  0x00 ; '.'
000000000001ba9d         db  0x00 ; '.'
000000000001ba9e         db  0x04 ; '.'
000000000001ba9f         db  0x00 ; '.'
000000000001baa0         db  0x03 ; '.'
000000000001baa1         db  0x00 ; '.'
000000000001baa2         db  0x00 ; '.'
000000000001baa3         db  0x00 ; '.'
000000000001baa4         db  0x00 ; '.'
000000000001baa5         db  0x00 ; '.'
000000000001baa6         db  0x00 ; '.'
000000000001baa7         db  0x00 ; '.'
000000000001baa8         db  0x00 ; '.'
000000000001baa9         db  0x00 ; '.'
000000000001baaa         db  0x00 ; '.'
000000000001baab         db  0x00 ; '.'
000000000001baac         db  0x00 ; '.'
000000000001baad         db  0x00 ; '.'
000000000001baae         db  0x00 ; '.'
000000000001baaf         db  0x00 ; '.'
000000000001bab0         db  0x00 ; '.'
000000000001bab1         db  0x00 ; '.'
000000000001bab2         db  0x00 ; '.'
000000000001bab3         db  0x00 ; '.'
000000000001bab4         db  0x00 ; '.'
000000000001bab5         db  0x00 ; '.'
000000000001bab6         db  0x00 ; '.'
000000000001bab7         db  0x00 ; '.'
000000000001bab8         db  0x00 ; '.'
000000000001bab9         db  0x00 ; '.'
000000000001baba         db  0x00 ; '.'
000000000001babb         db  0x00 ; '.'
000000000001babc         db  0x00 ; '.'
000000000001babd         db  0x00 ; '.'
000000000001babe         db  0x06 ; '.'
000000000001babf         db  0x00 ; '.'
000000000001bac0         db  0x00 ; '.'
000000000001bac1         db  0x00 ; '.'
000000000001bac2         db  0x00 ; '.'
000000000001bac3         db  0x00 ; '.'
000000000001bac4         db  0x00 ; '.'
000000000001bac5         db  0x00 ; '.'
000000000001bac6         db  0x00 ; '.'
000000000001bac7         db  0x00 ; '.'
000000000001bac8         db  0x00 ; '.'
000000000001bac9         db  0x00 ; '.'
000000000001baca         db  0x00 ; '.'
000000000001bacb         db  0x00 ; '.'
000000000001bacc         db  0x00 ; '.'
000000000001bacd         db  0x00 ; '.'
000000000001bace         db  0x00 ; '.'
000000000001bacf         db  0x00 ; '.'
000000000001bad0         db  0x00 ; '.'
000000000001bad1         db  0x00 ; '.'
000000000001bad2         db  0x00 ; '.'
000000000001bad3         db  0x00 ; '.'
000000000001bad4         db  0x00 ; '.'
000000000001bad5         db  0x00 ; '.'
000000000001bad6         db  0x00 ; '.'
000000000001bad7         db  0x00 ; '.'
000000000001bad8         db  0x00 ; '.'
000000000001bad9         db  0x00 ; '.'
000000000001bada         db  0x00 ; '.'
000000000001badb         db  0x00 ; '.'
000000000001badc         db  0x00 ; '.'
000000000001badd         db  0x00 ; '.'
000000000001bade         db  0x00 ; '.'
000000000001badf         db  0x00 ; '.'
000000000001bae0         db  0x00 ; '.'
000000000001bae1         db  0x00 ; '.'
000000000001bae2         db  0x00 ; '.'
000000000001bae3         db  0x00 ; '.'
000000000001bae4         db  0x00 ; '.'
000000000001bae5         db  0x00 ; '.'
000000000001bae6         db  0x00 ; '.'
000000000001bae7         db  0x00 ; '.'
000000000001bae8         db  0x00 ; '.'
000000000001bae9         db  0x00 ; '.'
000000000001baea         db  0x00 ; '.'
000000000001baeb         db  0x00 ; '.'
000000000001baec         db  0x00 ; '.'
000000000001baed         db  0x00 ; '.'
000000000001baee         db  0x00 ; '.'
000000000001baef         db  0x00 ; '.'
000000000001baf0         db  0x00 ; '.'
000000000001baf1         db  0x00 ; '.'
000000000001baf2         db  0x00 ; '.'
000000000001baf3         db  0x00 ; '.'
000000000001baf4         db  0x00 ; '.'
000000000001baf5         db  0x00 ; '.'
000000000001baf6         db  0x00 ; '.'
000000000001baf7         db  0x00 ; '.'
000000000001baf8         db  0x00 ; '.'
000000000001baf9         db  0x00 ; '.'
000000000001bafa         db  0x00 ; '.'
000000000001bafb         db  0x00 ; '.'
000000000001bafc         db  0x00 ; '.'
000000000001bafd         db  0x00 ; '.'
000000000001bafe         db  0x00 ; '.'
000000000001baff         db  0x00 ; '.'
000000000001bb00         db  0x03 ; '.'
000000000001bb01         db  0x02 ; '.'
000000000001bb02         db  0x04 ; '.'
000000000001bb03         db  0x06 ; '.'
000000000001bb04         db  0x05 ; '.'
000000000001bb05         db  0x08 ; '.'
000000000001bb06         db  0x01 ; '.'
000000000001bb07         db  0x07 ; '.'
000000000001bb08         db  0x03 ; '.'
000000000001bb09         db  0x02 ; '.'
000000000001bb0a         db  0x04 ; '.'
000000000001bb0b         db  0x05 ; '.'
000000000001bb0c         db  0x03 ; '.'
000000000001bb0d         db  0x02 ; '.'
000000000001bb0e         db  0x04 ; '.'
000000000001bb0f         db  0x05 ; '.'
000000000001bb10         db  0x00 ; '.'
000000000001bb11         db  0x06 ; '.'
000000000001bb12         db  0x03 ; '.'
000000000001bb13         db  0x02 ; '.'
000000000001bb14         db  0x04 ; '.'
000000000001bb15         db  0x06 ; '.'
000000000001bb16         db  0x05 ; '.'
000000000001bb17         db  0x00 ; '.'
000000000001bb18         db  0x09 ; '.'
000000000001bb19         db  0x03 ; '.'
000000000001bb1a         db  0x02 ; '.'
000000000001bb1b         db  0x04 ; '.'
000000000001bb1c         db  0x05 ; '.'
000000000001bb1d         db  0x02 ; '.'
000000000001bb1e         db  0x00 ; '.'
000000000001bb1f         db  0x00 ; '.'
000000000001bb20         db  0x03 ; '.'
000000000001bb21         db  0x02 ; '.'
000000000001bb22         db  0x04 ; '.'
000000000001bb23         db  0x06 ; '.'
000000000001bb24         db  0x05 ; '.'
000000000001bb25         db  0x08 ; '.'
000000000001bb26         db  0x01 ; '.'
000000000001bb27         db  0x07 ; '.'
000000000001bb28         db  0x03 ; '.'
000000000001bb29         db  0x02 ; '.'
000000000001bb2a         db  0x04 ; '.'
000000000001bb2b         db  0x05 ; '.'
000000000001bb2c         db  0x03 ; '.'
000000000001bb2d         db  0x02 ; '.'
000000000001bb2e         db  0x04 ; '.'
000000000001bb2f         db  0x05 ; '.'
000000000001bb30         db  0x00 ; '.'
000000000001bb31         db  0x06 ; '.'
000000000001bb32         db  0x03 ; '.'
000000000001bb33         db  0x02 ; '.'
000000000001bb34         db  0x04 ; '.'
000000000001bb35         db  0x06 ; '.'
000000000001bb36         db  0x05 ; '.'
000000000001bb37         db  0x00 ; '.'
000000000001bb38         db  0x09 ; '.'
000000000001bb39         db  0x03 ; '.'
000000000001bb3a         db  0x02 ; '.'
000000000001bb3b         db  0x04 ; '.'
000000000001bb3c         db  0x05 ; '.'
000000000001bb3d         db  0x02 ; '.'
000000000001bb3e         db  0x00 ; '.'
000000000001bb3f         db  0x00 ; '.'
                     diacrit_base:
000000000001bb40         db  0x00 ; '.'                                         ; DATA XREF=print_field+400
000000000001bb41         db  0x00 ; '.'
000000000001bb42         db  0x00 ; '.'
000000000001bb43         db  0x00 ; '.'
000000000001bb44         db  0x00 ; '.'
000000000001bb45         db  0x00 ; '.'
000000000001bb46         db  0x00 ; '.'
000000000001bb47         db  0x00 ; '.'
000000000001bb48         db  0x00 ; '.'
000000000001bb49         db  0x00 ; '.'
000000000001bb4a         db  0x00 ; '.'
000000000001bb4b         db  0x00 ; '.'
000000000001bb4c         db  0x00 ; '.'
000000000001bb4d         db  0x00 ; '.'
000000000001bb4e         db  0x00 ; '.'
000000000001bb4f         db  0x00 ; '.'
000000000001bb50         db  0x00 ; '.'
000000000001bb51         db  0x00 ; '.'
000000000001bb52         db  0x00 ; '.'
000000000001bb53         db  0x00 ; '.'
000000000001bb54         db  0x00 ; '.'
000000000001bb55         db  0x00 ; '.'
000000000001bb56         db  0x00 ; '.'
000000000001bb57         db  0x00 ; '.'
000000000001bb58         db  0x00 ; '.'
000000000001bb59         db  0x00 ; '.'
000000000001bb5a         db  0x00 ; '.'
000000000001bb5b         db  0x00 ; '.'
000000000001bb5c         db  0x00 ; '.'
000000000001bb5d         db  0x00 ; '.'
000000000001bb5e         db  0x00 ; '.'
000000000001bb5f         db  0x00 ; '.'
000000000001bb60         db  0x00 ; '.'
000000000001bb61         db  0x00 ; '.'
000000000001bb62         db  0x00 ; '.'
000000000001bb63         db  0x00 ; '.'
000000000001bb64         db  0x00 ; '.'
000000000001bb65         db  0x00 ; '.'
000000000001bb66         db  0x00 ; '.'
000000000001bb67         db  0x00 ; '.'
000000000001bb68         db  0x00 ; '.'
000000000001bb69         db  0x00 ; '.'
000000000001bb6a         db  0x00 ; '.'
000000000001bb6b         db  0x00 ; '.'
000000000001bb6c         db  0x00 ; '.'
000000000001bb6d         db  0x00 ; '.'
000000000001bb6e         db  0x00 ; '.'
000000000001bb6f         db  0x00 ; '.'
000000000001bb70         db  0x00 ; '.'
000000000001bb71         db  0x00 ; '.'
000000000001bb72         db  0x00 ; '.'
000000000001bb73         db  0x00 ; '.'
000000000001bb74         db  0x00 ; '.'
000000000001bb75         db  0x00 ; '.'
000000000001bb76         db  0x00 ; '.'
000000000001bb77         db  0x00 ; '.'
000000000001bb78         db  0x00 ; '.'
000000000001bb79         db  0x00 ; '.'
000000000001bb7a         db  0x00 ; '.'
000000000001bb7b         db  0x00 ; '.'
000000000001bb7c         db  0x00 ; '.'
000000000001bb7d         db  0x00 ; '.'
000000000001bb7e         db  0x00 ; '.'
000000000001bb7f         db  0x00 ; '.'
000000000001bb80         db  0x00 ; '.'
000000000001bb81         db  0x41 ; 'A'
000000000001bb82         db  0x42 ; 'B'
000000000001bb83         db  0x43 ; 'C'
000000000001bb84         db  0x44 ; 'D'
000000000001bb85         db  0x45 ; 'E'
000000000001bb86         db  0x46 ; 'F'
000000000001bb87         db  0x47 ; 'G'
000000000001bb88         db  0x48 ; 'H'
000000000001bb89         db  0x49 ; 'I'
000000000001bb8a         db  0x4a ; 'J'
000000000001bb8b         db  0x4b ; 'K'
000000000001bb8c         db  0x4c ; 'L'
000000000001bb8d         db  0x4d ; 'M'
000000000001bb8e         db  0x4e ; 'N'
000000000001bb8f         db  0x4f ; 'O'
000000000001bb90         db  0x50 ; 'P'
000000000001bb91         db  0x51 ; 'Q'
000000000001bb92         db  0x52 ; 'R'
000000000001bb93         db  0x53 ; 'S'
000000000001bb94         db  0x54 ; 'T'
000000000001bb95         db  0x55 ; 'U'
000000000001bb96         db  0x56 ; 'V'
000000000001bb97         db  0x57 ; 'W'
000000000001bb98         db  0x58 ; 'X'
000000000001bb99         db  0x59 ; 'Y'
000000000001bb9a         db  0x5a ; 'Z'
000000000001bb9b         db  0x00 ; '.'
000000000001bb9c         db  0x00 ; '.'
000000000001bb9d         db  0x00 ; '.'
000000000001bb9e         db  0x00 ; '.'
000000000001bb9f         db  0x00 ; '.'
000000000001bba0         db  0x00 ; '.'
000000000001bba1         db  0x61 ; 'a'
000000000001bba2         db  0x62 ; 'b'
000000000001bba3         db  0x63 ; 'c'
000000000001bba4         db  0x64 ; 'd'
000000000001bba5         db  0x65 ; 'e'
000000000001bba6         db  0x66 ; 'f'
000000000001bba7         db  0x67 ; 'g'
000000000001bba8         db  0x68 ; 'h'
000000000001bba9         db  0x69 ; 'i'
000000000001bbaa         db  0x6a ; 'j'
000000000001bbab         db  0x6b ; 'k'
000000000001bbac         db  0x6c ; 'l'
000000000001bbad         db  0x6d ; 'm'
000000000001bbae         db  0x6e ; 'n'
000000000001bbaf         db  0x6f ; 'o'
000000000001bbb0         db  0x70 ; 'p'
000000000001bbb1         db  0x71 ; 'q'
000000000001bbb2         db  0x72 ; 'r'
000000000001bbb3         db  0x73 ; 's'
000000000001bbb4         db  0x74 ; 't'
000000000001bbb5         db  0x75 ; 'u'
000000000001bbb6         db  0x76 ; 'v'
000000000001bbb7         db  0x77 ; 'w'
000000000001bbb8         db  0x78 ; 'x'
000000000001bbb9         db  0x79 ; 'y'
000000000001bbba         db  0x7a ; 'z'
000000000001bbbb         db  0x00 ; '.'
000000000001bbbc         db  0x00 ; '.'
000000000001bbbd         db  0x00 ; '.'
000000000001bbbe         db  0x00 ; '.'
000000000001bbbf         db  0x00 ; '.'
000000000001bbc0         db  0x00 ; '.'
000000000001bbc1         db  0x00 ; '.'
000000000001bbc2         db  0x00 ; '.'
000000000001bbc3         db  0x00 ; '.'
000000000001bbc4         db  0x00 ; '.'
000000000001bbc5         db  0x00 ; '.'
000000000001bbc6         db  0x00 ; '.'
000000000001bbc7         db  0x00 ; '.'
000000000001bbc8         db  0x00 ; '.'
000000000001bbc9         db  0x00 ; '.'
000000000001bbca         db  0x00 ; '.'
000000000001bbcb         db  0x00 ; '.'
000000000001bbcc         db  0x00 ; '.'
000000000001bbcd         db  0x00 ; '.'
000000000001bbce         db  0x00 ; '.'
000000000001bbcf         db  0x00 ; '.'
000000000001bbd0         db  0x00 ; '.'
000000000001bbd1         db  0x00 ; '.'
000000000001bbd2         db  0x00 ; '.'
000000000001bbd3         db  0x00 ; '.'
000000000001bbd4         db  0x00 ; '.'
000000000001bbd5         db  0x00 ; '.'
000000000001bbd6         db  0x00 ; '.'
000000000001bbd7         db  0x00 ; '.'
000000000001bbd8         db  0x00 ; '.'
000000000001bbd9         db  0x00 ; '.'
000000000001bbda         db  0x00 ; '.'
000000000001bbdb         db  0x00 ; '.'
000000000001bbdc         db  0x00 ; '.'
000000000001bbdd         db  0x00 ; '.'
000000000001bbde         db  0x00 ; '.'
000000000001bbdf         db  0x00 ; '.'
000000000001bbe0         db  0x00 ; '.'
000000000001bbe1         db  0x00 ; '.'
000000000001bbe2         db  0x00 ; '.'
000000000001bbe3         db  0x00 ; '.'
000000000001bbe4         db  0x00 ; '.'
000000000001bbe5         db  0x00 ; '.'
000000000001bbe6         db  0x00 ; '.'
000000000001bbe7         db  0x00 ; '.'
000000000001bbe8         db  0x00 ; '.'
000000000001bbe9         db  0x00 ; '.'
000000000001bbea         db  0x00 ; '.'
000000000001bbeb         db  0x00 ; '.'
000000000001bbec         db  0x00 ; '.'
000000000001bbed         db  0x00 ; '.'
000000000001bbee         db  0x00 ; '.'
000000000001bbef         db  0x00 ; '.'
000000000001bbf0         db  0x00 ; '.'
000000000001bbf1         db  0x00 ; '.'
000000000001bbf2         db  0x00 ; '.'
000000000001bbf3         db  0x00 ; '.'
000000000001bbf4         db  0x00 ; '.'
000000000001bbf5         db  0x00 ; '.'
000000000001bbf6         db  0x00 ; '.'
000000000001bbf7         db  0x00 ; '.'
000000000001bbf8         db  0x00 ; '.'
000000000001bbf9         db  0x00 ; '.'
000000000001bbfa         db  0x00 ; '.'
000000000001bbfb         db  0x00 ; '.'
000000000001bbfc         db  0x00 ; '.'
000000000001bbfd         db  0x00 ; '.'
000000000001bbfe         db  0x00 ; '.'
000000000001bbff         db  0x00 ; '.'
000000000001bc00         db  0x41 ; 'A'
000000000001bc01         db  0x41 ; 'A'
000000000001bc02         db  0x41 ; 'A'
000000000001bc03         db  0x41 ; 'A'
000000000001bc04         db  0x41 ; 'A'
000000000001bc05         db  0x41 ; 'A'
000000000001bc06         db  0x41 ; 'A'
000000000001bc07         db  0x43 ; 'C'
000000000001bc08         db  0x45 ; 'E'
000000000001bc09         db  0x45 ; 'E'
000000000001bc0a         db  0x45 ; 'E'
000000000001bc0b         db  0x45 ; 'E'
000000000001bc0c         db  0x49 ; 'I'
000000000001bc0d         db  0x49 ; 'I'
000000000001bc0e         db  0x49 ; 'I'
000000000001bc0f         db  0x49 ; 'I'
000000000001bc10         db  0x00 ; '.'
000000000001bc11         db  0x4e ; 'N'
000000000001bc12         db  0x4f ; 'O'
000000000001bc13         db  0x4f ; 'O'
000000000001bc14         db  0x4f ; 'O'
000000000001bc15         db  0x4f ; 'O'
000000000001bc16         db  0x4f ; 'O'
000000000001bc17         db  0x00 ; '.'
000000000001bc18         db  0x4f ; 'O'
000000000001bc19         db  0x55 ; 'U'
000000000001bc1a         db  0x55 ; 'U'
000000000001bc1b         db  0x55 ; 'U'
000000000001bc1c         db  0x55 ; 'U'
000000000001bc1d         db  0x59 ; 'Y'
000000000001bc1e         db  0x00 ; '.'
000000000001bc1f         db  0x00 ; '.'
000000000001bc20         db  0x61 ; 'a'
000000000001bc21         db  0x61 ; 'a'
000000000001bc22         db  0x61 ; 'a'
000000000001bc23         db  0x61 ; 'a'
000000000001bc24         db  0x61 ; 'a'
000000000001bc25         db  0x61 ; 'a'
000000000001bc26         db  0x61 ; 'a'
000000000001bc27         db  0x63 ; 'c'
000000000001bc28         db  0x65 ; 'e'
000000000001bc29         db  0x65 ; 'e'
000000000001bc2a         db  0x65 ; 'e'
000000000001bc2b         db  0x65 ; 'e'
000000000001bc2c         db  0x69 ; 'i'
000000000001bc2d         db  0x69 ; 'i'
000000000001bc2e         db  0x69 ; 'i'
000000000001bc2f         db  0x69 ; 'i'
000000000001bc30         db  0x00 ; '.'
000000000001bc31         db  0x6e ; 'n'
000000000001bc32         db  0x6f ; 'o'
000000000001bc33         db  0x6f ; 'o'
000000000001bc34         db  0x6f ; 'o'
000000000001bc35         db  0x6f ; 'o'
000000000001bc36         db  0x6f ; 'o'
000000000001bc37         db  0x00 ; '.'
000000000001bc38         db  0x6f ; 'o'
000000000001bc39         db  0x75 ; 'u'
000000000001bc3a         db  0x75 ; 'u'
000000000001bc3b         db  0x75 ; 'u'
000000000001bc3c         db  0x75 ; 'u'
000000000001bc3d         db  0x79 ; 'y'
000000000001bc3e         db  0x00 ; '.'
000000000001bc3f         db  0x79 ; 'y'
                     aDevnull:
000000000001bc40         db         "/dev/null", 0                              ; DATA XREF=protect_fd+4
000000000001bc4a         align      16
                     aANullArgv0WasP:
000000000001bc50         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
000000000001bc88         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
000000000001bc90         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
000000000001bc91         db  0x74 ; 't'
000000000001bc92         db  0x2d ; '-'                                         ; DATA XREF=main+1164, sub_31ea+4702, swallow_file_in_memory+104, swallow_file_in_memory+202
000000000001bc93         db  0x00 ; '.'
000000000001bc94         db  0x00 ; '.'
000000000001bc95         db  0x00 ; '.'
000000000001bc96         db  0x00 ; '.'
000000000001bc97         db  0x00 ; '.'
                     aCoreutils831li:
000000000001bc98         db         "../coreutils-8.31/lib/mbuiter.h", 0        ; DATA XREF=mbuiter_multi_next.part.0+7, mbuiter_multi_next.part.0_2166+7, sub_6901+93, sub_6901+129, knuth_morris_pratt_multibyte+2598, knuth_morris_pratt_multibyte+2634, sub_1a267+760, sub_1a267+805, mbslen+465, mbslen+501, mbslen+532
                     aItercurwc0:
000000000001bcb8         db         "iter->cur.wc == 0", 0                      ; DATA XREF=mbuiter_multi_next.part.0+14, mbiter_multi_next.part.0+14, mbuiter_multi_next.part.0_2166+14, mbslen+539
                     aMbsinitItersta:
000000000001bcca         db         "mbsinit (&iter->state)", 0                 ; DATA XREF=sub_6901+100, trim2+1530, knuth_morris_pratt_multibyte+2605, sub_1a267+767, mbslen+472
                     aItercurptr0:
000000000001bce1         db         "*iter->cur.ptr == '\0'", 0                 ; DATA XREF=sub_6901+136, trim2+1566, knuth_morris_pratt_multibyte+2641, sub_1a267+812, mbslen+508
                     aSS_1bcf8:        // aSS
000000000001bcf8         db         "%s (%s)", 0                                ; DATA XREF=proper_name+85, proper_name_utf8+637
                     aUtf8:
000000000001bd00         db         "UTF-8", 0                                  ; DATA XREF=proper_name_utf8+43, proper_name_utf8+296, proper_name_utf8+370
000000000001bd06         align      16
                     __PRETTY_FUNCTION__.5159:
000000000001bd10         db         "mbuiter_multi_next", 0                     ; DATA XREF=mbuiter_multi_next.part.0, sub_6901+86, sub_6901+122
000000000001bd23         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
000000000001bd24         db  0x80 ; '.'
000000000001bd25         db  0x98 ; '.'
000000000001bd26         db  0x00 ; '.'
000000000001bd27         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
000000000001bd28         db  0x80 ; '.'
000000000001bd29         db  0x99 ; '.'
000000000001bd2a         db  0x00 ; '.'
000000000001bd2b         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
000000000001bd2c         db  0x07 ; '.'
000000000001bd2d         db  0x65 ; 'e'
000000000001bd2e         db  0x00 ; '.'
000000000001bd2f         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
000000000001bd30         db  0xaf ; '.'
000000000001bd31         db  0x00 ; '.'
000000000001bd32         db  0x60 ; '`'                                         ; DATA XREF=sub_7550+1627, sub_7550+1654
000000000001bd33         db  0x00 ; '.'
                     aLiteral:
000000000001bd34         db         "literal", 0
                     aShell:
000000000001bd3c         db         "shell", 0
                     aShellalways:
000000000001bd42         db         "shell-always", 0
000000000001bd4f         db  0x73 ; 's'
000000000001bd50         db  0x68 ; 'h'
000000000001bd51         db  0x65 ; 'e'
000000000001bd52         db  0x6c ; 'l'
000000000001bd53         db  0x6c ; 'l'
000000000001bd54         db  0x2d ; '-'
                     aEscape:
000000000001bd55         db         "escape", 0
                     aShellescapealw:
000000000001bd5c         db         "shell-escape-always", 0
                     aCmaybe:
000000000001bd70         db         "c-maybe", 0
                     aClocale:
000000000001bd78         db         "clocale", 0
                     switch_table_1bd80:        // switch_table
000000000001bd80         dd         quotearg_buffer_restyled.loc_7c4a-switch_table_1bd80, quotearg_buffer_restyled.loc_6ea3-switch_table_1bd80, quotearg_buffer_restyled.loc_7e78-switch_table_1bd80, quotearg_buffer_restyled.loc_7c84-switch_table_1bd80 ; switch table used at 0x6ea1 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
000000000001bd90         dd         quotearg_buffer_restyled.loc_7a74-switch_table_1bd80, quotearg_buffer_restyled.loc_7ad0-switch_table_1bd80, quotearg_buffer_restyled.loc_7b25-switch_table_1bd80, quotearg_buffer_restyled.loc_7b6a-switch_table_1bd80
000000000001bda0         dd         3 dup (quotearg_buffer_restyled.loc_7ba4-switch_table_1bd80)
000000000001bdac         db  0x74 ; 't'                                         ; DATA XREF=quotearg_buffer_restyled+477
000000000001bdad         db  0xb4 ; '.'
000000000001bdae         db  0xfe ; '.'
000000000001bdaf         db  0xff ; '.'
000000000001bdb0         db  0x5c ; '\'
000000000001bdb1         db  0xb5 ; '.'
000000000001bdb2         db  0xfe ; '.'
000000000001bdb3         db  0xff ; '.'
000000000001bdb4         db  0x5c ; '\'
000000000001bdb5         db  0xb5 ; '.'
000000000001bdb6         db  0xfe ; '.'
000000000001bdb7         db  0xff ; '.'
000000000001bdb8         db  0x5c ; '\'
000000000001bdb9         db  0xb5 ; '.'
000000000001bdba         db  0xfe ; '.'
000000000001bdbb         db  0xff ; '.'
000000000001bdbc         db  0x5c ; '\'
000000000001bdbd         db  0xb5 ; '.'
000000000001bdbe         db  0xfe ; '.'
000000000001bdbf         db  0xff ; '.'
000000000001bdc0         db  0x5c ; '\'
000000000001bdc1         db  0xb5 ; '.'
000000000001bdc2         db  0xfe ; '.'
000000000001bdc3         db  0xff ; '.'
000000000001bdc4         db  0x5c ; '\'
000000000001bdc5         db  0xb5 ; '.'
000000000001bdc6         db  0xfe ; '.'
000000000001bdc7         db  0xff ; '.'
000000000001bdc8         db  0xb4 ; '.'
000000000001bdc9         db  0xb4 ; '.'
000000000001bdca         db  0xfe ; '.'
000000000001bdcb         db  0xff ; '.'
000000000001bdcc         db  0xbc ; '.'
000000000001bdcd         db  0xb3 ; '.'
000000000001bdce         db  0xfe ; '.'
000000000001bdcf         db  0xff ; '.'
000000000001bdd0         db  0x7c ; '|'
000000000001bdd1         db  0xb3 ; '.'
000000000001bdd2         db  0xfe ; '.'
000000000001bdd3         db  0xff ; '.'
000000000001bdd4         db  0x44 ; 'D'
000000000001bdd5         db  0xb5 ; '.'
000000000001bdd6         db  0xfe ; '.'
000000000001bdd7         db  0xff ; '.'
000000000001bdd8         db  0x34 ; '4'
000000000001bdd9         db  0xb5 ; '.'
000000000001bdda         db  0xfe ; '.'
000000000001bddb         db  0xff ; '.'
000000000001bddc         db  0x24 ; '$'
000000000001bddd         db  0xb5 ; '.'
000000000001bdde         db  0xfe ; '.'
000000000001bddf         db  0xff ; '.'
000000000001bde0         db  0x14 ; '.'
000000000001bde1         db  0xb5 ; '.'
000000000001bde2         db  0xfe ; '.'
000000000001bde3         db  0xff ; '.'
000000000001bde4         db  0x5c ; '\'
000000000001bde5         db  0xb5 ; '.'
000000000001bde6         db  0xfe ; '.'
000000000001bde7         db  0xff ; '.'
000000000001bde8         db  0x5c ; '\'
000000000001bde9         db  0xb5 ; '.'
000000000001bdea         db  0xfe ; '.'
000000000001bdeb         db  0xff ; '.'
000000000001bdec         db  0x5c ; '\'
000000000001bded         db  0xb5 ; '.'
000000000001bdee         db  0xfe ; '.'
000000000001bdef         db  0xff ; '.'
000000000001bdf0         db  0x5c ; '\'
000000000001bdf1         db  0xb5 ; '.'
000000000001bdf2         db  0xfe ; '.'
000000000001bdf3         db  0xff ; '.'
000000000001bdf4         db  0x5c ; '\'
000000000001bdf5         db  0xb5 ; '.'
000000000001bdf6         db  0xfe ; '.'
000000000001bdf7         db  0xff ; '.'
000000000001bdf8         db  0x5c ; '\'
000000000001bdf9         db  0xb5 ; '.'
000000000001bdfa         db  0xfe ; '.'
000000000001bdfb         db  0xff ; '.'
000000000001bdfc         db  0x5c ; '\'
000000000001bdfd         db  0xb5 ; '.'
000000000001bdfe         db  0xfe ; '.'
000000000001bdff         db  0xff ; '.'
000000000001be00         db  0x5c ; '\'
000000000001be01         db  0xb5 ; '.'
000000000001be02         db  0xfe ; '.'
000000000001be03         db  0xff ; '.'
000000000001be04         db  0x5c ; '\'
000000000001be05         db  0xb5 ; '.'
000000000001be06         db  0xfe ; '.'
000000000001be07         db  0xff ; '.'
000000000001be08         db  0x5c ; '\'
000000000001be09         db  0xb5 ; '.'
000000000001be0a         db  0xfe ; '.'
000000000001be0b         db  0xff ; '.'
000000000001be0c         db  0x5c ; '\'
000000000001be0d         db  0xb5 ; '.'
000000000001be0e         db  0xfe ; '.'
000000000001be0f         db  0xff ; '.'
000000000001be10         db  0x5c ; '\'
000000000001be11         db  0xb5 ; '.'
000000000001be12         db  0xfe ; '.'
000000000001be13         db  0xff ; '.'
000000000001be14         db  0x5c ; '\'
000000000001be15         db  0xb5 ; '.'
000000000001be16         db  0xfe ; '.'
000000000001be17         db  0xff ; '.'
000000000001be18         db  0x5c ; '\'
000000000001be19         db  0xb5 ; '.'
000000000001be1a         db  0xfe ; '.'
000000000001be1b         db  0xff ; '.'
000000000001be1c         db  0x5c ; '\'
000000000001be1d         db  0xb5 ; '.'
000000000001be1e         db  0xfe ; '.'
000000000001be1f         db  0xff ; '.'
000000000001be20         db  0x5c ; '\'
000000000001be21         db  0xb5 ; '.'
000000000001be22         db  0xfe ; '.'
000000000001be23         db  0xff ; '.'
000000000001be24         db  0x5c ; '\'
000000000001be25         db  0xb5 ; '.'
000000000001be26         db  0xfe ; '.'
000000000001be27         db  0xff ; '.'
000000000001be28         db  0x5c ; '\'
000000000001be29         db  0xb5 ; '.'
000000000001be2a         db  0xfe ; '.'
000000000001be2b         db  0xff ; '.'
000000000001be2c         db  0x04 ; '.'
000000000001be2d         db  0xb5 ; '.'
000000000001be2e         db  0xfe ; '.'
000000000001be2f         db  0xff ; '.'
000000000001be30         db  0xf4 ; '.'
000000000001be31         db  0xb4 ; '.'
000000000001be32         db  0xfe ; '.'
000000000001be33         db  0xff ; '.'
000000000001be34         db  0xf4 ; '.'
000000000001be35         db  0xb4 ; '.'
000000000001be36         db  0xfe ; '.'
000000000001be37         db  0xff ; '.'
000000000001be38         db  0xc4 ; '.'
000000000001be39         db  0xb4 ; '.'
000000000001be3a         db  0xfe ; '.'
000000000001be3b         db  0xff ; '.'
000000000001be3c         db  0xf4 ; '.'
000000000001be3d         db  0xb4 ; '.'
000000000001be3e         db  0xfe ; '.'
000000000001be3f         db  0xff ; '.'
000000000001be40         db  0x9c ; '.'
000000000001be41         db  0xb4 ; '.'
000000000001be42         db  0xfe ; '.'
000000000001be43         db  0xff ; '.'
000000000001be44         db  0xf4 ; '.'
000000000001be45         db  0xb4 ; '.'
000000000001be46         db  0xfe ; '.'
000000000001be47         db  0xff ; '.'
000000000001be48         db  0x57 ; 'W'
000000000001be49         db  0xb3 ; '.'
000000000001be4a         db  0xfe ; '.'
000000000001be4b         db  0xff ; '.'
000000000001be4c         db  0xf4 ; '.'
000000000001be4d         db  0xb4 ; '.'
000000000001be4e         db  0xfe ; '.'
000000000001be4f         db  0xff ; '.'
000000000001be50         db  0xf4 ; '.'
000000000001be51         db  0xb4 ; '.'
000000000001be52         db  0xfe ; '.'
000000000001be53         db  0xff ; '.'
000000000001be54         db  0xf4 ; '.'
000000000001be55         db  0xb4 ; '.'
000000000001be56         db  0xfe ; '.'
000000000001be57         db  0xff ; '.'
000000000001be58         db  0x9c ; '.'
000000000001be59         db  0xb4 ; '.'
000000000001be5a         db  0xfe ; '.'
000000000001be5b         db  0xff ; '.'
000000000001be5c         db  0x9c ; '.'
000000000001be5d         db  0xb4 ; '.'
000000000001be5e         db  0xfe ; '.'
000000000001be5f         db  0xff ; '.'
000000000001be60         db  0x9c ; '.'
000000000001be61         db  0xb4 ; '.'
000000000001be62         db  0xfe ; '.'
000000000001be63         db  0xff ; '.'
000000000001be64         db  0x9c ; '.'
000000000001be65         db  0xb4 ; '.'
000000000001be66         db  0xfe ; '.'
000000000001be67         db  0xff ; '.'
000000000001be68         db  0x9c ; '.'
000000000001be69         db  0xb4 ; '.'
000000000001be6a         db  0xfe ; '.'
000000000001be6b         db  0xff ; '.'
000000000001be6c         db  0x9c ; '.'
000000000001be6d         db  0xb4 ; '.'
000000000001be6e         db  0xfe ; '.'
000000000001be6f         db  0xff ; '.'
000000000001be70         db  0x9c ; '.'
000000000001be71         db  0xb4 ; '.'
000000000001be72         db  0xfe ; '.'
000000000001be73         db  0xff ; '.'
000000000001be74         db  0x9c ; '.'
000000000001be75         db  0xb4 ; '.'
000000000001be76         db  0xfe ; '.'
000000000001be77         db  0xff ; '.'
000000000001be78         db  0x9c ; '.'
000000000001be79         db  0xb4 ; '.'
000000000001be7a         db  0xfe ; '.'
000000000001be7b         db  0xff ; '.'
000000000001be7c         db  0x9c ; '.'
000000000001be7d         db  0xb4 ; '.'
000000000001be7e         db  0xfe ; '.'
000000000001be7f         db  0xff ; '.'
000000000001be80         db  0x9c ; '.'
000000000001be81         db  0xb4 ; '.'
000000000001be82         db  0xfe ; '.'
000000000001be83         db  0xff ; '.'
000000000001be84         db  0x9c ; '.'
000000000001be85         db  0xb4 ; '.'
000000000001be86         db  0xfe ; '.'
000000000001be87         db  0xff ; '.'
000000000001be88         db  0x9c ; '.'
000000000001be89         db  0xb4 ; '.'
000000000001be8a         db  0xfe ; '.'
000000000001be8b         db  0xff ; '.'
000000000001be8c         db  0x9c ; '.'
000000000001be8d         db  0xb4 ; '.'
000000000001be8e         db  0xfe ; '.'
000000000001be8f         db  0xff ; '.'
000000000001be90         db  0x9c ; '.'
000000000001be91         db  0xb4 ; '.'
000000000001be92         db  0xfe ; '.'
000000000001be93         db  0xff ; '.'
000000000001be94         db  0x9c ; '.'
000000000001be95         db  0xb4 ; '.'
000000000001be96         db  0xfe ; '.'
000000000001be97         db  0xff ; '.'
000000000001be98         db  0xf4 ; '.'
000000000001be99         db  0xb4 ; '.'
000000000001be9a         db  0xfe ; '.'
000000000001be9b         db  0xff ; '.'
000000000001be9c         db  0xf4 ; '.'
000000000001be9d         db  0xb4 ; '.'
000000000001be9e         db  0xfe ; '.'
000000000001be9f         db  0xff ; '.'
000000000001bea0         db  0xf4 ; '.'
000000000001bea1         db  0xb4 ; '.'
000000000001bea2         db  0xfe ; '.'
000000000001bea3         db  0xff ; '.'
000000000001bea4         db  0xf4 ; '.'
000000000001bea5         db  0xb4 ; '.'
000000000001bea6         db  0xfe ; '.'
000000000001bea7         db  0xff ; '.'
000000000001bea8         db  0x27 ; '''
000000000001bea9         db  0xb3 ; '.'
000000000001beaa         db  0xfe ; '.'
000000000001beab         db  0xff ; '.'
000000000001beac         db  0x5c ; '\'
000000000001bead         db  0xb5 ; '.'
000000000001beae         db  0xfe ; '.'
000000000001beaf         db  0xff ; '.'
000000000001beb0         db  0x9c ; '.'
000000000001beb1         db  0xb4 ; '.'
000000000001beb2         db  0xfe ; '.'
000000000001beb3         db  0xff ; '.'
000000000001beb4         db  0x9c ; '.'
000000000001beb5         db  0xb4 ; '.'
000000000001beb6         db  0xfe ; '.'
000000000001beb7         db  0xff ; '.'
000000000001beb8         db  0x9c ; '.'
000000000001beb9         db  0xb4 ; '.'
000000000001beba         db  0xfe ; '.'
000000000001bebb         db  0xff ; '.'
000000000001bebc         db  0x9c ; '.'
000000000001bebd         db  0xb4 ; '.'
000000000001bebe         db  0xfe ; '.'
000000000001bebf         db  0xff ; '.'
000000000001bec0         db  0x9c ; '.'
000000000001bec1         db  0xb4 ; '.'
000000000001bec2         db  0xfe ; '.'
000000000001bec3         db  0xff ; '.'
000000000001bec4         db  0x9c ; '.'
000000000001bec5         db  0xb4 ; '.'
000000000001bec6         db  0xfe ; '.'
000000000001bec7         db  0xff ; '.'
000000000001bec8         db  0x9c ; '.'
000000000001bec9         db  0xb4 ; '.'
000000000001beca         db  0xfe ; '.'
000000000001becb         db  0xff ; '.'
000000000001becc         db  0x9c ; '.'
000000000001becd         db  0xb4 ; '.'
000000000001bece         db  0xfe ; '.'
000000000001becf         db  0xff ; '.'
000000000001bed0         db  0x9c ; '.'
000000000001bed1         db  0xb4 ; '.'
000000000001bed2         db  0xfe ; '.'
000000000001bed3         db  0xff ; '.'
000000000001bed4         db  0x9c ; '.'
000000000001bed5         db  0xb4 ; '.'
000000000001bed6         db  0xfe ; '.'
000000000001bed7         db  0xff ; '.'
000000000001bed8         db  0x9c ; '.'
000000000001bed9         db  0xb4 ; '.'
000000000001beda         db  0xfe ; '.'
000000000001bedb         db  0xff ; '.'
000000000001bedc         db  0x9c ; '.'
000000000001bedd         db  0xb4 ; '.'
000000000001bede         db  0xfe ; '.'
000000000001bedf         db  0xff ; '.'
000000000001bee0         db  0x9c ; '.'
000000000001bee1         db  0xb4 ; '.'
000000000001bee2         db  0xfe ; '.'
000000000001bee3         db  0xff ; '.'
000000000001bee4         db  0x9c ; '.'
000000000001bee5         db  0xb4 ; '.'
000000000001bee6         db  0xfe ; '.'
000000000001bee7         db  0xff ; '.'
000000000001bee8         db  0x9c ; '.'
000000000001bee9         db  0xb4 ; '.'
000000000001beea         db  0xfe ; '.'
000000000001beeb         db  0xff ; '.'
000000000001beec         db  0x9c ; '.'
000000000001beed         db  0xb4 ; '.'
000000000001beee         db  0xfe ; '.'
000000000001beef         db  0xff ; '.'
000000000001bef0         db  0x9c ; '.'
000000000001bef1         db  0xb4 ; '.'
000000000001bef2         db  0xfe ; '.'
000000000001bef3         db  0xff ; '.'
000000000001bef4         db  0x9c ; '.'
000000000001bef5         db  0xb4 ; '.'
000000000001bef6         db  0xfe ; '.'
000000000001bef7         db  0xff ; '.'
000000000001bef8         db  0x9c ; '.'
000000000001bef9         db  0xb4 ; '.'
000000000001befa         db  0xfe ; '.'
000000000001befb         db  0xff ; '.'
000000000001befc         db  0x9c ; '.'
000000000001befd         db  0xb4 ; '.'
000000000001befe         db  0xfe ; '.'
000000000001beff         db  0xff ; '.'
000000000001bf00         db  0x9c ; '.'
000000000001bf01         db  0xb4 ; '.'
000000000001bf02         db  0xfe ; '.'
000000000001bf03         db  0xff ; '.'
000000000001bf04         db  0x9c ; '.'
000000000001bf05         db  0xb4 ; '.'
000000000001bf06         db  0xfe ; '.'
000000000001bf07         db  0xff ; '.'
000000000001bf08         db  0x9c ; '.'
000000000001bf09         db  0xb4 ; '.'
000000000001bf0a         db  0xfe ; '.'
000000000001bf0b         db  0xff ; '.'
000000000001bf0c         db  0x9c ; '.'
000000000001bf0d         db  0xb4 ; '.'
000000000001bf0e         db  0xfe ; '.'
000000000001bf0f         db  0xff ; '.'
000000000001bf10         db  0x9c ; '.'
000000000001bf11         db  0xb4 ; '.'
000000000001bf12         db  0xfe ; '.'
000000000001bf13         db  0xff ; '.'
000000000001bf14         db  0x9c ; '.'
000000000001bf15         db  0xb4 ; '.'
000000000001bf16         db  0xfe ; '.'
000000000001bf17         db  0xff ; '.'
000000000001bf18         db  0xf4 ; '.'
000000000001bf19         db  0xb4 ; '.'
000000000001bf1a         db  0xfe ; '.'
000000000001bf1b         db  0xff ; '.'
000000000001bf1c         db  0xcc ; '.'
000000000001bf1d         db  0xb3 ; '.'
000000000001bf1e         db  0xfe ; '.'
000000000001bf1f         db  0xff ; '.'
000000000001bf20         db  0x9c ; '.'
000000000001bf21         db  0xb4 ; '.'
000000000001bf22         db  0xfe ; '.'
000000000001bf23         db  0xff ; '.'
000000000001bf24         db  0xf4 ; '.'
000000000001bf25         db  0xb4 ; '.'
000000000001bf26         db  0xfe ; '.'
000000000001bf27         db  0xff ; '.'
000000000001bf28         db  0x9c ; '.'
000000000001bf29         db  0xb4 ; '.'
000000000001bf2a         db  0xfe ; '.'
000000000001bf2b         db  0xff ; '.'
000000000001bf2c         db  0xf4 ; '.'
000000000001bf2d         db  0xb4 ; '.'
000000000001bf2e         db  0xfe ; '.'
000000000001bf2f         db  0xff ; '.'
000000000001bf30         db  0x9c ; '.'
000000000001bf31         db  0xb4 ; '.'
000000000001bf32         db  0xfe ; '.'
000000000001bf33         db  0xff ; '.'
000000000001bf34         db  0x9c ; '.'
000000000001bf35         db  0xb4 ; '.'
000000000001bf36         db  0xfe ; '.'
000000000001bf37         db  0xff ; '.'
000000000001bf38         db  0x9c ; '.'
000000000001bf39         db  0xb4 ; '.'
000000000001bf3a         db  0xfe ; '.'
000000000001bf3b         db  0xff ; '.'
000000000001bf3c         db  0x9c ; '.'
000000000001bf3d         db  0xb4 ; '.'
000000000001bf3e         db  0xfe ; '.'
000000000001bf3f         db  0xff ; '.'
000000000001bf40         db  0x9c ; '.'
000000000001bf41         db  0xb4 ; '.'
000000000001bf42         db  0xfe ; '.'
000000000001bf43         db  0xff ; '.'
000000000001bf44         db  0x9c ; '.'
000000000001bf45         db  0xb4 ; '.'
000000000001bf46         db  0xfe ; '.'
000000000001bf47         db  0xff ; '.'
000000000001bf48         db  0x9c ; '.'
000000000001bf49         db  0xb4 ; '.'
000000000001bf4a         db  0xfe ; '.'
000000000001bf4b         db  0xff ; '.'
000000000001bf4c         db  0x9c ; '.'
000000000001bf4d         db  0xb4 ; '.'
000000000001bf4e         db  0xfe ; '.'
000000000001bf4f         db  0xff ; '.'
000000000001bf50         db  0x9c ; '.'
000000000001bf51         db  0xb4 ; '.'
000000000001bf52         db  0xfe ; '.'
000000000001bf53         db  0xff ; '.'
000000000001bf54         db  0x9c ; '.'
000000000001bf55         db  0xb4 ; '.'
000000000001bf56         db  0xfe ; '.'
000000000001bf57         db  0xff ; '.'
000000000001bf58         db  0x9c ; '.'
000000000001bf59         db  0xb4 ; '.'
000000000001bf5a         db  0xfe ; '.'
000000000001bf5b         db  0xff ; '.'
000000000001bf5c         db  0x9c ; '.'
000000000001bf5d         db  0xb4 ; '.'
000000000001bf5e         db  0xfe ; '.'
000000000001bf5f         db  0xff ; '.'
000000000001bf60         db  0x9c ; '.'
000000000001bf61         db  0xb4 ; '.'
000000000001bf62         db  0xfe ; '.'
000000000001bf63         db  0xff ; '.'
000000000001bf64         db  0x9c ; '.'
000000000001bf65         db  0xb4 ; '.'
000000000001bf66         db  0xfe ; '.'
000000000001bf67         db  0xff ; '.'
000000000001bf68         db  0x9c ; '.'
000000000001bf69         db  0xb4 ; '.'
000000000001bf6a         db  0xfe ; '.'
000000000001bf6b         db  0xff ; '.'
000000000001bf6c         db  0x9c ; '.'
000000000001bf6d         db  0xb4 ; '.'
000000000001bf6e         db  0xfe ; '.'
000000000001bf6f         db  0xff ; '.'
000000000001bf70         db  0x9c ; '.'
000000000001bf71         db  0xb4 ; '.'
000000000001bf72         db  0xfe ; '.'
000000000001bf73         db  0xff ; '.'
000000000001bf74         db  0x9c ; '.'
000000000001bf75         db  0xb4 ; '.'
000000000001bf76         db  0xfe ; '.'
000000000001bf77         db  0xff ; '.'
000000000001bf78         db  0x9c ; '.'
000000000001bf79         db  0xb4 ; '.'
000000000001bf7a         db  0xfe ; '.'
000000000001bf7b         db  0xff ; '.'
000000000001bf7c         db  0x9c ; '.'
000000000001bf7d         db  0xb4 ; '.'
000000000001bf7e         db  0xfe ; '.'
000000000001bf7f         db  0xff ; '.'
000000000001bf80         db  0x9c ; '.'
000000000001bf81         db  0xb4 ; '.'
000000000001bf82         db  0xfe ; '.'
000000000001bf83         db  0xff ; '.'
000000000001bf84         db  0x9c ; '.'
000000000001bf85         db  0xb4 ; '.'
000000000001bf86         db  0xfe ; '.'
000000000001bf87         db  0xff ; '.'
000000000001bf88         db  0x9c ; '.'
000000000001bf89         db  0xb4 ; '.'
000000000001bf8a         db  0xfe ; '.'
000000000001bf8b         db  0xff ; '.'
000000000001bf8c         db  0x9c ; '.'
000000000001bf8d         db  0xb4 ; '.'
000000000001bf8e         db  0xfe ; '.'
000000000001bf8f         db  0xff ; '.'
000000000001bf90         db  0x9c ; '.'
000000000001bf91         db  0xb4 ; '.'
000000000001bf92         db  0xfe ; '.'
000000000001bf93         db  0xff ; '.'
000000000001bf94         db  0x9c ; '.'
000000000001bf95         db  0xb4 ; '.'
000000000001bf96         db  0xfe ; '.'
000000000001bf97         db  0xff ; '.'
000000000001bf98         db  0x57 ; 'W'
000000000001bf99         db  0xb2 ; '.'
000000000001bf9a         db  0xfe ; '.'
000000000001bf9b         db  0xff ; '.'
000000000001bf9c         db  0xf4 ; '.'
000000000001bf9d         db  0xb4 ; '.'
000000000001bf9e         db  0xfe ; '.'
000000000001bf9f         db  0xff ; '.'
000000000001bfa0         db  0x57 ; 'W'
000000000001bfa1         db  0xb2 ; '.'
000000000001bfa2         db  0xfe ; '.'
000000000001bfa3         db  0xff ; '.'
000000000001bfa4         db  0xc4 ; '.'
000000000001bfa5         db  0xb4 ; '.'
000000000001bfa6         db  0xfe ; '.'
000000000001bfa7         db  0xff ; '.'
000000000001bfa8         db  0x48 ; 'H'                                         ; DATA XREF=sub_72f0+137
000000000001bfa9         db  0xb4 ; '.'
000000000001bfaa         db  0xfe ; '.'
000000000001bfab         db  0xff ; '.'
000000000001bfac         db  0x58 ; 'X'
000000000001bfad         db  0xb3 ; '.'
000000000001bfae         db  0xfe ; '.'
000000000001bfaf         db  0xff ; '.'
000000000001bfb0         db  0x58 ; 'X'
000000000001bfb1         db  0xb3 ; '.'
000000000001bfb2         db  0xfe ; '.'
000000000001bfb3         db  0xff ; '.'
000000000001bfb4         db  0x58 ; 'X'
000000000001bfb5         db  0xb3 ; '.'
000000000001bfb6         db  0xfe ; '.'
000000000001bfb7         db  0xff ; '.'
000000000001bfb8         db  0x58 ; 'X'
000000000001bfb9         db  0xb3 ; '.'
000000000001bfba         db  0xfe ; '.'
000000000001bfbb         db  0xff ; '.'
000000000001bfbc         db  0x58 ; 'X'
000000000001bfbd         db  0xb3 ; '.'
000000000001bfbe         db  0xfe ; '.'
000000000001bfbf         db  0xff ; '.'
000000000001bfc0         db  0x58 ; 'X'
000000000001bfc1         db  0xb3 ; '.'
000000000001bfc2         db  0xfe ; '.'
000000000001bfc3         db  0xff ; '.'
000000000001bfc4         db  0x38 ; '8'
000000000001bfc5         db  0xb4 ; '.'
000000000001bfc6         db  0xfe ; '.'
000000000001bfc7         db  0xff ; '.'
000000000001bfc8         db  0x88 ; '.'
000000000001bfc9         db  0xb5 ; '.'
000000000001bfca         db  0xfe ; '.'
000000000001bfcb         db  0xff ; '.'
000000000001bfcc         db  0x70 ; 'p'
000000000001bfcd         db  0xb5 ; '.'
000000000001bfce         db  0xfe ; '.'
000000000001bfcf         db  0xff ; '.'
000000000001bfd0         db  0x20 ; ' '
000000000001bfd1         db  0xb4 ; '.'
000000000001bfd2         db  0xfe ; '.'
000000000001bfd3         db  0xff ; '.'
000000000001bfd4         db  0x60 ; '`'
000000000001bfd5         db  0xb5 ; '.'
000000000001bfd6         db  0xfe ; '.'
000000000001bfd7         db  0xff ; '.'
000000000001bfd8         db  0x08 ; '.'
000000000001bfd9         db  0xb4 ; '.'
000000000001bfda         db  0xfe ; '.'
000000000001bfdb         db  0xff ; '.'
000000000001bfdc         db  0x48 ; 'H'
000000000001bfdd         db  0xb5 ; '.'
000000000001bfde         db  0xfe ; '.'
000000000001bfdf         db  0xff ; '.'
000000000001bfe0         db  0x58 ; 'X'
000000000001bfe1         db  0xb3 ; '.'
000000000001bfe2         db  0xfe ; '.'
000000000001bfe3         db  0xff ; '.'
000000000001bfe4         db  0x58 ; 'X'
000000000001bfe5         db  0xb3 ; '.'
000000000001bfe6         db  0xfe ; '.'
000000000001bfe7         db  0xff ; '.'
000000000001bfe8         db  0x58 ; 'X'
000000000001bfe9         db  0xb3 ; '.'
000000000001bfea         db  0xfe ; '.'
000000000001bfeb         db  0xff ; '.'
000000000001bfec         db  0x58 ; 'X'
000000000001bfed         db  0xb3 ; '.'
000000000001bfee         db  0xfe ; '.'
000000000001bfef         db  0xff ; '.'
000000000001bff0         db  0x58 ; 'X'
000000000001bff1         db  0xb3 ; '.'
000000000001bff2         db  0xfe ; '.'
000000000001bff3         db  0xff ; '.'
000000000001bff4         db  0x58 ; 'X'
000000000001bff5         db  0xb3 ; '.'
000000000001bff6         db  0xfe ; '.'
000000000001bff7         db  0xff ; '.'
000000000001bff8         db  0x58 ; 'X'
000000000001bff9         db  0xb3 ; '.'
000000000001bffa         db  0xfe ; '.'
000000000001bffb         db  0xff ; '.'
000000000001bffc         db  0x58 ; 'X'
000000000001bffd         db  0xb3 ; '.'
000000000001bffe         db  0xfe ; '.'
000000000001bfff         db  0xff ; '.'
000000000001c000         db  0x58 ; 'X'
000000000001c001         db  0xb3 ; '.'
000000000001c002         db  0xfe ; '.'
000000000001c003         db  0xff ; '.'
000000000001c004         db  0x58 ; 'X'
000000000001c005         db  0xb3 ; '.'
000000000001c006         db  0xfe ; '.'
000000000001c007         db  0xff ; '.'
000000000001c008         db  0x58 ; 'X'
000000000001c009         db  0xb3 ; '.'
000000000001c00a         db  0xfe ; '.'
000000000001c00b         db  0xff ; '.'
000000000001c00c         db  0x58 ; 'X'
000000000001c00d         db  0xb3 ; '.'
000000000001c00e         db  0xfe ; '.'
000000000001c00f         db  0xff ; '.'
000000000001c010         db  0x58 ; 'X'
000000000001c011         db  0xb3 ; '.'
000000000001c012         db  0xfe ; '.'
000000000001c013         db  0xff ; '.'
000000000001c014         db  0x58 ; 'X'
000000000001c015         db  0xb3 ; '.'
000000000001c016         db  0xfe ; '.'
000000000001c017         db  0xff ; '.'
000000000001c018         db  0x58 ; 'X'
000000000001c019         db  0xb3 ; '.'
000000000001c01a         db  0xfe ; '.'
000000000001c01b         db  0xff ; '.'
000000000001c01c         db  0x58 ; 'X'
000000000001c01d         db  0xb3 ; '.'
000000000001c01e         db  0xfe ; '.'
000000000001c01f         db  0xff ; '.'
000000000001c020         db  0x58 ; 'X'
000000000001c021         db  0xb3 ; '.'
000000000001c022         db  0xfe ; '.'
000000000001c023         db  0xff ; '.'
000000000001c024         db  0x58 ; 'X'
000000000001c025         db  0xb3 ; '.'
000000000001c026         db  0xfe ; '.'
000000000001c027         db  0xff ; '.'
000000000001c028         db  0x30 ; '0'
000000000001c029         db  0xb5 ; '.'
000000000001c02a         db  0xfe ; '.'
000000000001c02b         db  0xff ; '.'
000000000001c02c         db  0x18 ; '.'
000000000001c02d         db  0xb5 ; '.'
000000000001c02e         db  0xfe ; '.'
000000000001c02f         db  0xff ; '.'
000000000001c030         db  0x18 ; '.'
000000000001c031         db  0xb5 ; '.'
000000000001c032         db  0xfe ; '.'
000000000001c033         db  0xff ; '.'
000000000001c034         db  0x00 ; '.'
000000000001c035         db  0xb5 ; '.'
000000000001c036         db  0xfe ; '.'
000000000001c037         db  0xff ; '.'
000000000001c038         db  0x18 ; '.'
000000000001c039         db  0xb5 ; '.'
000000000001c03a         db  0xfe ; '.'
000000000001c03b         db  0xff ; '.'
000000000001c03c         db  0xe8 ; '.'
000000000001c03d         db  0xb4 ; '.'
000000000001c03e         db  0xfe ; '.'
000000000001c03f         db  0xff ; '.'
000000000001c040         db  0x18 ; '.'
000000000001c041         db  0xb5 ; '.'
000000000001c042         db  0xfe ; '.'
000000000001c043         db  0xff ; '.'
000000000001c044         db  0x58 ; 'X'
000000000001c045         db  0xb1 ; '.'
000000000001c046         db  0xfe ; '.'
000000000001c047         db  0xff ; '.'
000000000001c048         db  0x18 ; '.'
000000000001c049         db  0xb5 ; '.'
000000000001c04a         db  0xfe ; '.'
000000000001c04b         db  0xff ; '.'
000000000001c04c         db  0x18 ; '.'
000000000001c04d         db  0xb5 ; '.'
000000000001c04e         db  0xfe ; '.'
000000000001c04f         db  0xff ; '.'
000000000001c050         db  0x18 ; '.'
000000000001c051         db  0xb5 ; '.'
000000000001c052         db  0xfe ; '.'
000000000001c053         db  0xff ; '.'
000000000001c054         db  0xe8 ; '.'
000000000001c055         db  0xb4 ; '.'
000000000001c056         db  0xfe ; '.'
000000000001c057         db  0xff ; '.'
000000000001c058         db  0xe8 ; '.'
000000000001c059         db  0xb4 ; '.'
000000000001c05a         db  0xfe ; '.'
000000000001c05b         db  0xff ; '.'
000000000001c05c         db  0xe8 ; '.'
000000000001c05d         db  0xb4 ; '.'
000000000001c05e         db  0xfe ; '.'
000000000001c05f         db  0xff ; '.'
000000000001c060         db  0xe8 ; '.'
000000000001c061         db  0xb4 ; '.'
000000000001c062         db  0xfe ; '.'
000000000001c063         db  0xff ; '.'
000000000001c064         db  0xe8 ; '.'
000000000001c065         db  0xb4 ; '.'
000000000001c066         db  0xfe ; '.'
000000000001c067         db  0xff ; '.'
000000000001c068         db  0xe8 ; '.'
000000000001c069         db  0xb4 ; '.'
000000000001c06a         db  0xfe ; '.'
000000000001c06b         db  0xff ; '.'
000000000001c06c         db  0xe8 ; '.'
000000000001c06d         db  0xb4 ; '.'
000000000001c06e         db  0xfe ; '.'
000000000001c06f         db  0xff ; '.'
000000000001c070         db  0xe8 ; '.'
000000000001c071         db  0xb4 ; '.'
000000000001c072         db  0xfe ; '.'
000000000001c073         db  0xff ; '.'
000000000001c074         db  0xe8 ; '.'
000000000001c075         db  0xb4 ; '.'
000000000001c076         db  0xfe ; '.'
000000000001c077         db  0xff ; '.'
000000000001c078         db  0xe8 ; '.'
000000000001c079         db  0xb4 ; '.'
000000000001c07a         db  0xfe ; '.'
000000000001c07b         db  0xff ; '.'
000000000001c07c         db  0xe8 ; '.'
000000000001c07d         db  0xb4 ; '.'
000000000001c07e         db  0xfe ; '.'
000000000001c07f         db  0xff ; '.'
000000000001c080         db  0xe8 ; '.'
000000000001c081         db  0xb4 ; '.'
000000000001c082         db  0xfe ; '.'
000000000001c083         db  0xff ; '.'
000000000001c084         db  0xe8 ; '.'
000000000001c085         db  0xb4 ; '.'
000000000001c086         db  0xfe ; '.'
000000000001c087         db  0xff ; '.'
000000000001c088         db  0xe8 ; '.'
000000000001c089         db  0xb4 ; '.'
000000000001c08a         db  0xfe ; '.'
000000000001c08b         db  0xff ; '.'
000000000001c08c         db  0xe8 ; '.'
000000000001c08d         db  0xb4 ; '.'
000000000001c08e         db  0xfe ; '.'
000000000001c08f         db  0xff ; '.'
000000000001c090         db  0xe8 ; '.'
000000000001c091         db  0xb4 ; '.'
000000000001c092         db  0xfe ; '.'
000000000001c093         db  0xff ; '.'
000000000001c094         db  0x18 ; '.'
000000000001c095         db  0xb5 ; '.'
000000000001c096         db  0xfe ; '.'
000000000001c097         db  0xff ; '.'
000000000001c098         db  0x18 ; '.'
000000000001c099         db  0xb5 ; '.'
000000000001c09a         db  0xfe ; '.'
000000000001c09b         db  0xff ; '.'
000000000001c09c         db  0x18 ; '.'
000000000001c09d         db  0xb5 ; '.'
000000000001c09e         db  0xfe ; '.'
000000000001c09f         db  0xff ; '.'
000000000001c0a0         db  0x18 ; '.'
000000000001c0a1         db  0xb5 ; '.'
000000000001c0a2         db  0xfe ; '.'
000000000001c0a3         db  0xff ; '.'
000000000001c0a4         db  0x28 ; '('
000000000001c0a5         db  0xb1 ; '.'
000000000001c0a6         db  0xfe ; '.'
000000000001c0a7         db  0xff ; '.'
000000000001c0a8         db  0x58 ; 'X'
000000000001c0a9         db  0xb3 ; '.'
000000000001c0aa         db  0xfe ; '.'
000000000001c0ab         db  0xff ; '.'
000000000001c0ac         db  0xe8 ; '.'
000000000001c0ad         db  0xb4 ; '.'
000000000001c0ae         db  0xfe ; '.'
000000000001c0af         db  0xff ; '.'
000000000001c0b0         db  0xe8 ; '.'
000000000001c0b1         db  0xb4 ; '.'
000000000001c0b2         db  0xfe ; '.'
000000000001c0b3         db  0xff ; '.'
000000000001c0b4         db  0xe8 ; '.'
000000000001c0b5         db  0xb4 ; '.'
000000000001c0b6         db  0xfe ; '.'
000000000001c0b7         db  0xff ; '.'
000000000001c0b8         db  0xe8 ; '.'
000000000001c0b9         db  0xb4 ; '.'
000000000001c0ba         db  0xfe ; '.'
000000000001c0bb         db  0xff ; '.'
000000000001c0bc         db  0xe8 ; '.'
000000000001c0bd         db  0xb4 ; '.'
000000000001c0be         db  0xfe ; '.'
000000000001c0bf         db  0xff ; '.'
000000000001c0c0         db  0xe8 ; '.'
000000000001c0c1         db  0xb4 ; '.'
000000000001c0c2         db  0xfe ; '.'
000000000001c0c3         db  0xff ; '.'
000000000001c0c4         db  0xe8 ; '.'
000000000001c0c5         db  0xb4 ; '.'
000000000001c0c6         db  0xfe ; '.'
000000000001c0c7         db  0xff ; '.'
000000000001c0c8         db  0xe8 ; '.'
000000000001c0c9         db  0xb4 ; '.'
000000000001c0ca         db  0xfe ; '.'
000000000001c0cb         db  0xff ; '.'
000000000001c0cc         db  0xe8 ; '.'
000000000001c0cd         db  0xb4 ; '.'
000000000001c0ce         db  0xfe ; '.'
000000000001c0cf         db  0xff ; '.'
000000000001c0d0         db  0xe8 ; '.'
000000000001c0d1         db  0xb4 ; '.'
000000000001c0d2         db  0xfe ; '.'
000000000001c0d3         db  0xff ; '.'
000000000001c0d4         db  0xe8 ; '.'
000000000001c0d5         db  0xb4 ; '.'
000000000001c0d6         db  0xfe ; '.'
000000000001c0d7         db  0xff ; '.'
000000000001c0d8         db  0xe8 ; '.'
000000000001c0d9         db  0xb4 ; '.'
000000000001c0da         db  0xfe ; '.'
000000000001c0db         db  0xff ; '.'
000000000001c0dc         db  0xe8 ; '.'
000000000001c0dd         db  0xb4 ; '.'
000000000001c0de         db  0xfe ; '.'
000000000001c0df         db  0xff ; '.'
000000000001c0e0         db  0xe8 ; '.'
000000000001c0e1         db  0xb4 ; '.'
000000000001c0e2         db  0xfe ; '.'
000000000001c0e3         db  0xff ; '.'
000000000001c0e4         db  0xe8 ; '.'
000000000001c0e5         db  0xb4 ; '.'
000000000001c0e6         db  0xfe ; '.'
000000000001c0e7         db  0xff ; '.'
000000000001c0e8         db  0xe8 ; '.'
000000000001c0e9         db  0xb4 ; '.'
000000000001c0ea         db  0xfe ; '.'
000000000001c0eb         db  0xff ; '.'
000000000001c0ec         db  0xe8 ; '.'
000000000001c0ed         db  0xb4 ; '.'
000000000001c0ee         db  0xfe ; '.'
000000000001c0ef         db  0xff ; '.'
000000000001c0f0         db  0xe8 ; '.'
000000000001c0f1         db  0xb4 ; '.'
000000000001c0f2         db  0xfe ; '.'
000000000001c0f3         db  0xff ; '.'
000000000001c0f4         db  0xe8 ; '.'
000000000001c0f5         db  0xb4 ; '.'
000000000001c0f6         db  0xfe ; '.'
000000000001c0f7         db  0xff ; '.'
000000000001c0f8         db  0xe8 ; '.'
000000000001c0f9         db  0xb4 ; '.'
000000000001c0fa         db  0xfe ; '.'
000000000001c0fb         db  0xff ; '.'
000000000001c0fc         db  0xe8 ; '.'
000000000001c0fd         db  0xb4 ; '.'
000000000001c0fe         db  0xfe ; '.'
000000000001c0ff         db  0xff ; '.'
000000000001c100         db  0xe8 ; '.'
000000000001c101         db  0xb4 ; '.'
000000000001c102         db  0xfe ; '.'
000000000001c103         db  0xff ; '.'
000000000001c104         db  0xe8 ; '.'
000000000001c105         db  0xb4 ; '.'
000000000001c106         db  0xfe ; '.'
000000000001c107         db  0xff ; '.'
000000000001c108         db  0xe8 ; '.'
000000000001c109         db  0xb4 ; '.'
000000000001c10a         db  0xfe ; '.'
000000000001c10b         db  0xff ; '.'
000000000001c10c         db  0xe8 ; '.'
000000000001c10d         db  0xb4 ; '.'
000000000001c10e         db  0xfe ; '.'
000000000001c10f         db  0xff ; '.'
000000000001c110         db  0xe8 ; '.'
000000000001c111         db  0xb4 ; '.'
000000000001c112         db  0xfe ; '.'
000000000001c113         db  0xff ; '.'
000000000001c114         db  0x18 ; '.'
000000000001c115         db  0xb5 ; '.'
000000000001c116         db  0xfe ; '.'
000000000001c117         db  0xff ; '.'
000000000001c118         db  0xe8 ; '.'
000000000001c119         db  0xb3 ; '.'
000000000001c11a         db  0xfe ; '.'
000000000001c11b         db  0xff ; '.'
000000000001c11c         db  0xe8 ; '.'
000000000001c11d         db  0xb4 ; '.'
000000000001c11e         db  0xfe ; '.'
000000000001c11f         db  0xff ; '.'
000000000001c120         db  0x18 ; '.'
000000000001c121         db  0xb5 ; '.'
000000000001c122         db  0xfe ; '.'
000000000001c123         db  0xff ; '.'
000000000001c124         db  0xe8 ; '.'
000000000001c125         db  0xb4 ; '.'
000000000001c126         db  0xfe ; '.'
000000000001c127         db  0xff ; '.'
000000000001c128         db  0x18 ; '.'
000000000001c129         db  0xb5 ; '.'
000000000001c12a         db  0xfe ; '.'
000000000001c12b         db  0xff ; '.'
000000000001c12c         db  0xe8 ; '.'
000000000001c12d         db  0xb4 ; '.'
000000000001c12e         db  0xfe ; '.'
000000000001c12f         db  0xff ; '.'
000000000001c130         db  0xe8 ; '.'
000000000001c131         db  0xb4 ; '.'
000000000001c132         db  0xfe ; '.'
000000000001c133         db  0xff ; '.'
000000000001c134         db  0xe8 ; '.'
000000000001c135         db  0xb4 ; '.'
000000000001c136         db  0xfe ; '.'
000000000001c137         db  0xff ; '.'
000000000001c138         db  0xe8 ; '.'
000000000001c139         db  0xb4 ; '.'
000000000001c13a         db  0xfe ; '.'
000000000001c13b         db  0xff ; '.'
000000000001c13c         db  0xe8 ; '.'
000000000001c13d         db  0xb4 ; '.'
000000000001c13e         db  0xfe ; '.'
000000000001c13f         db  0xff ; '.'
000000000001c140         db  0xe8 ; '.'
000000000001c141         db  0xb4 ; '.'
000000000001c142         db  0xfe ; '.'
000000000001c143         db  0xff ; '.'
000000000001c144         db  0xe8 ; '.'
000000000001c145         db  0xb4 ; '.'
000000000001c146         db  0xfe ; '.'
000000000001c147         db  0xff ; '.'
000000000001c148         db  0xe8 ; '.'
000000000001c149         db  0xb4 ; '.'
000000000001c14a         db  0xfe ; '.'
000000000001c14b         db  0xff ; '.'
000000000001c14c         db  0xe8 ; '.'
000000000001c14d         db  0xb4 ; '.'
000000000001c14e         db  0xfe ; '.'
000000000001c14f         db  0xff ; '.'
000000000001c150         db  0xe8 ; '.'
000000000001c151         db  0xb4 ; '.'
000000000001c152         db  0xfe ; '.'
000000000001c153         db  0xff ; '.'
000000000001c154         db  0xe8 ; '.'
000000000001c155         db  0xb4 ; '.'
000000000001c156         db  0xfe ; '.'
000000000001c157         db  0xff ; '.'
000000000001c158         db  0xe8 ; '.'
000000000001c159         db  0xb4 ; '.'
000000000001c15a         db  0xfe ; '.'
000000000001c15b         db  0xff ; '.'
000000000001c15c         db  0xe8 ; '.'
000000000001c15d         db  0xb4 ; '.'
000000000001c15e         db  0xfe ; '.'
000000000001c15f         db  0xff ; '.'
000000000001c160         db  0xe8 ; '.'
000000000001c161         db  0xb4 ; '.'
000000000001c162         db  0xfe ; '.'
000000000001c163         db  0xff ; '.'
000000000001c164         db  0xe8 ; '.'
000000000001c165         db  0xb4 ; '.'
000000000001c166         db  0xfe ; '.'
000000000001c167         db  0xff ; '.'
000000000001c168         db  0xe8 ; '.'
000000000001c169         db  0xb4 ; '.'
000000000001c16a         db  0xfe ; '.'
000000000001c16b         db  0xff ; '.'
000000000001c16c         db  0xe8 ; '.'
000000000001c16d         db  0xb4 ; '.'
000000000001c16e         db  0xfe ; '.'
000000000001c16f         db  0xff ; '.'
000000000001c170         db  0xe8 ; '.'
000000000001c171         db  0xb4 ; '.'
000000000001c172         db  0xfe ; '.'
000000000001c173         db  0xff ; '.'
000000000001c174         db  0xe8 ; '.'
000000000001c175         db  0xb4 ; '.'
000000000001c176         db  0xfe ; '.'
000000000001c177         db  0xff ; '.'
000000000001c178         db  0xe8 ; '.'
000000000001c179         db  0xb4 ; '.'
000000000001c17a         db  0xfe ; '.'
000000000001c17b         db  0xff ; '.'
000000000001c17c         db  0xe8 ; '.'
000000000001c17d         db  0xb4 ; '.'
000000000001c17e         db  0xfe ; '.'
000000000001c17f         db  0xff ; '.'
000000000001c180         db  0xe8 ; '.'
000000000001c181         db  0xb4 ; '.'
000000000001c182         db  0xfe ; '.'
000000000001c183         db  0xff ; '.'
000000000001c184         db  0xe8 ; '.'
000000000001c185         db  0xb4 ; '.'
000000000001c186         db  0xfe ; '.'
000000000001c187         db  0xff ; '.'
000000000001c188         db  0xe8 ; '.'
000000000001c189         db  0xb4 ; '.'
000000000001c18a         db  0xfe ; '.'
000000000001c18b         db  0xff ; '.'
000000000001c18c         db  0xe8 ; '.'
000000000001c18d         db  0xb4 ; '.'
000000000001c18e         db  0xfe ; '.'
000000000001c18f         db  0xff ; '.'
000000000001c190         db  0xe8 ; '.'
000000000001c191         db  0xb4 ; '.'
000000000001c192         db  0xfe ; '.'
000000000001c193         db  0xff ; '.'
000000000001c194         db  0x58 ; 'X'
000000000001c195         db  0xb0 ; '.'
000000000001c196         db  0xfe ; '.'
000000000001c197         db  0xff ; '.'
000000000001c198         db  0x18 ; '.'
000000000001c199         db  0xb5 ; '.'
000000000001c19a         db  0xfe ; '.'
000000000001c19b         db  0xff ; '.'
000000000001c19c         db  0x58 ; 'X'
000000000001c19d         db  0xb0 ; '.'
000000000001c19e         db  0xfe ; '.'
000000000001c19f         db  0xff ; '.'
000000000001c1a0         db  0x00 ; '.'
000000000001c1a1         db  0xb5 ; '.'
000000000001c1a2         db  0xfe ; '.'
000000000001c1a3         db  0xff ; '.'
000000000001c1a4         db  0x00 ; '.'
000000000001c1a5         db  0x00 ; '.'
000000000001c1a6         db  0x00 ; '.'
000000000001c1a7         db  0x00 ; '.'
000000000001c1a8         db  0x00 ; '.'
000000000001c1a9         db  0x00 ; '.'
000000000001c1aa         db  0x00 ; '.'
000000000001c1ab         db  0x00 ; '.'
000000000001c1ac         db  0x00 ; '.'
000000000001c1ad         db  0x00 ; '.'
000000000001c1ae         db  0x00 ; '.'
000000000001c1af         db  0x00 ; '.'
000000000001c1b0         db  0x00 ; '.'
000000000001c1b1         db  0x00 ; '.'
000000000001c1b2         db  0x00 ; '.'
000000000001c1b3         db  0x00 ; '.'
000000000001c1b4         db  0x00 ; '.'
000000000001c1b5         db  0x00 ; '.'
000000000001c1b6         db  0x00 ; '.'
000000000001c1b7         db  0x00 ; '.'
000000000001c1b8         db  0x00 ; '.'
000000000001c1b9         db  0x00 ; '.'
000000000001c1ba         db  0x00 ; '.'
000000000001c1bb         db  0x00 ; '.'
000000000001c1bc         db  0x00 ; '.'
000000000001c1bd         db  0x00 ; '.'
000000000001c1be         db  0x00 ; '.'
000000000001c1bf         db  0x00 ; '.'
                     quoting_style_vals:
000000000001c1c0         db  0x00 ; '.'
000000000001c1c1         db  0x00 ; '.'
000000000001c1c2         db  0x00 ; '.'
000000000001c1c3         db  0x00 ; '.'
000000000001c1c4         db  0x01 ; '.'
000000000001c1c5         db  0x00 ; '.'
000000000001c1c6         db  0x00 ; '.'
000000000001c1c7         db  0x00 ; '.'
000000000001c1c8         db  0x02 ; '.'
000000000001c1c9         db  0x00 ; '.'
000000000001c1ca         db  0x00 ; '.'
000000000001c1cb         db  0x00 ; '.'
000000000001c1cc         db  0x03 ; '.'
000000000001c1cd         db  0x00 ; '.'
000000000001c1ce         db  0x00 ; '.'
000000000001c1cf         db  0x00 ; '.'
000000000001c1d0         db  0x04 ; '.'
000000000001c1d1         db  0x00 ; '.'
000000000001c1d2         db  0x00 ; '.'
000000000001c1d3         db  0x00 ; '.'
000000000001c1d4         db  0x05 ; '.'
000000000001c1d5         db  0x00 ; '.'
000000000001c1d6         db  0x00 ; '.'
000000000001c1d7         db  0x00 ; '.'
000000000001c1d8         db  0x06 ; '.'
000000000001c1d9         db  0x00 ; '.'
000000000001c1da         db  0x00 ; '.'
000000000001c1db         db  0x00 ; '.'
000000000001c1dc         db  0x07 ; '.'
000000000001c1dd         db  0x00 ; '.'
000000000001c1de         db  0x00 ; '.'
000000000001c1df         db  0x00 ; '.'
000000000001c1e0         db  0x08 ; '.'
000000000001c1e1         db  0x00 ; '.'
000000000001c1e2         db  0x00 ; '.'
000000000001c1e3         db  0x00 ; '.'
000000000001c1e4         db  0x09 ; '.'
000000000001c1e5         db  0x00 ; '.'
000000000001c1e6         db  0x00 ; '.'
000000000001c1e7         db  0x00 ; '.'
000000000001c1e8         db  0x72 ; 'r'                                         ; DATA XREF=read_binary_file
000000000001c1e9         db  0x62 ; 'b'
000000000001c1ea         db  0x00 ; '.'
000000000001c1eb         db  0x00 ; '.'
000000000001c1ec         db  0x00 ; '.'
000000000001c1ed         db  0x00 ; '.'
000000000001c1ee         db  0x00 ; '.'
000000000001c1ef         db  0x00 ; '.'
                     aCoreutils831li_1c1f0:        // aCoreutils831li
000000000001c1f0         db         "../coreutils-8.31/lib/mbiter.h", 0         ; DATA XREF=mbiter_multi_next.part.0+7, trim2+1523, trim2+1559
000000000001c20f         align      16
                     __PRETTY_FUNCTION__.5134:
000000000001c210         db         "mbiter_multi_next", 0                      ; DATA XREF=mbiter_multi_next.part.0, trim2+1516, trim2+1552
                     aSSSn:
000000000001c222         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
000000000001c22e         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
000000000001c235         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
000000000001c236         db  0x43 ; 'C'
000000000001c237         db  0x29 ; ')'
000000000001c238         db  0x00 ; '.'
                     aWrittenBySn:
000000000001c239         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
000000000001c249         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
000000000001c260         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
000000000001c27c         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
000000000001c291         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
000000000001c2a7         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
000000000001c2bb         align      64
                     aNlicenseGplv3G:
000000000001c2c0         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
000000000001c38c         align      16
                     aWrittenBySSSna:
000000000001c390         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_1c3b0:        // aWrittenBySSSns
000000000001c3b0         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
000000000001c3d4         align      8
                     aWrittenBySSSns_1c3d8:        // aWrittenBySSSns
000000000001c3d8         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_1c400:        // aWrittenBySSSns
000000000001c400         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
000000000001c42c         align      16
                     aWrittenBySSSns_1c430:        // aWrittenBySSSns
000000000001c430         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
000000000001c460         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
000000000001c494         align      8
                     aWrittenBySSSns_1c498:        // aWrittenBySSSns
000000000001c498         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
000000000001c4d4         align      8
                     aGeneralHelpUsi:
000000000001c4d8         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
000000000001c519         align      4
                     switch_table_1c51c:        // switch_table
000000000001c51c         dd         version_etc_arn.loc_93c6-switch_table_1c51c, version_etc_arn.loc_9458-switch_table_1c51c, version_etc_arn.loc_9498-switch_table_1c51c, version_etc_arn.loc_94e0-switch_table_1c51c ; switch table used at 0x9344 containing 10 entries, DATA XREF=version_etc_arn+150
000000000001c52c         dd         version_etc_arn.loc_9530-switch_table_1c51c, version_etc_arn.loc_9588-switch_table_1c51c, version_etc_arn.loc_95b8-switch_table_1c51c, version_etc_arn.loc_9620-switch_table_1c51c
000000000001c53c         dd         version_etc_arn.loc_9350-switch_table_1c51c, version_etc_arn.loc_9400-switch_table_1c51c
000000000001c544         align      32
                     version_etc_copyright:
000000000001c560         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
000000000001c58f         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aCoreutils831li_1c5a0:        // aCoreutils831li
000000000001c5a0         db         "../coreutils-8.31/lib/xstrtol.c", 0        ; DATA XREF=xstrtoimax+1686
                     a0StrtolbaseStr:
000000000001c5c0         db         "0 <= strtol_base && strtol_base <= 36", 0  ; DATA XREF=xstrtoimax+1693
000000000001c5e6         align      8
                     switch_table_1c5e8:        // switch_table
000000000001c5e8         dd         xstrtoimax.loc_a0b0-switch_table_1c5e8, 2 dup (xstrtoimax.loc_9d48-switch_table_1c5e8), xstrtoimax.loc_9fe0-switch_table_1c5e8, xstrtoimax.loc_9d48-switch_table_1c5e8 ; switch table used at 0x9d7e containing 54 entries, DATA XREF=xstrtoimax+412
000000000001c5fc         dd         xstrtoimax.loc_9f80-switch_table_1c5e8, 3 dup (xstrtoimax.loc_9d48-switch_table_1c5e8), xstrtoimax.loc_9f40-switch_table_1c5e8, xstrtoimax.loc_9d48-switch_table_1c5e8
000000000001c614         dd         xstrtoimax.loc_9d80-switch_table_1c5e8, 2 dup (xstrtoimax.loc_9d48-switch_table_1c5e8), xstrtoimax.loc_a048-switch_table_1c5e8, 3 dup (xstrtoimax.loc_9d48-switch_table_1c5e8)
000000000001c630         dd         xstrtoimax.loc_a0e0-switch_table_1c5e8, 4 dup (xstrtoimax.loc_9d48-switch_table_1c5e8), xstrtoimax.loc_9ed0-switch_table_1c5e8, xstrtoimax.loc_9e60-switch_table_1c5e8
000000000001c64c         dd         7 dup (xstrtoimax.loc_9d48-switch_table_1c5e8), xstrtoimax.loc_9e30-switch_table_1c5e8, xstrtoimax.loc_9de0-switch_table_1c5e8, 3 dup (xstrtoimax.loc_9d48-switch_table_1c5e8)
000000000001c67c         dd         xstrtoimax.loc_9f80-switch_table_1c5e8, 3 dup (xstrtoimax.loc_9d48-switch_table_1c5e8), xstrtoimax.loc_9f40-switch_table_1c5e8, xstrtoimax.loc_9d48-switch_table_1c5e8
000000000001c694         dd         xstrtoimax.loc_9d80-switch_table_1c5e8, 6 dup (xstrtoimax.loc_9d48-switch_table_1c5e8), xstrtoimax.loc_a0e0-switch_table_1c5e8, 2 dup (xstrtoimax.loc_9d48-switch_table_1c5e8)
000000000001c6bc         dd         xstrtoimax.loc_9e00-switch_table_1c5e8
                     __PRETTY_FUNCTION__.4162:
000000000001c6c0         db         "xstrtoimax", 0                             ; DATA XREF=xstrtoimax+1679
000000000001c6cb         align      16
                     aCoreutils831li_1c6d0:        // aCoreutils831li
000000000001c6d0         db         "../coreutils-8.31/lib/regexec.c", 0        ; DATA XREF=pop_fail_stack.isra.25+124, re_search_internal+4148, re_search_internal+5432, re_search_stub+1065, re_search_stub+1096, re_search_stub+1127
                     aCoreutils831li_1c6f0:        // aCoreutils831li
000000000001c6f0         db         "../coreutils-8.31/lib/regcomp.c", 0        ; DATA XREF=sub_15b10+2817, sub_17450+18, sub_17b30+106, sub_17b30+137, sub_17b30+168
                     aIsepsilonnodeN:
000000000001c710         db         "!IS_EPSILON_NODE (node->token.type)", 0    ; DATA XREF=sub_17b30+144
000000000001c734         align      8
                     aNum0:
000000000001c738         db         "num >= 0", 0                               ; DATA XREF=pop_fail_stack.isra.25+131
                     aAlpha:
000000000001c741         db         "alpha", 0                                  ; DATA XREF=build_charclass.isra.29+65, build_charclass.isra.29+338, build_charclass.isra.29+626
                     aUpper:
000000000001c747         db         "upper", 0                                  ; DATA XREF=build_charclass.isra.29+35, build_charclass.isra.29+1100
                     aLower:
000000000001c74d         db         "lower", 0                                  ; DATA XREF=build_charclass.isra.29+310, build_charclass.isra.29+424
                     aAlnum:
000000000001c753         db         "alnum", 0                                  ; DATA XREF=build_charclass.isra.29+108, sub_15b10+463
                     aCntrl:
000000000001c759         db         "cntrl", 0                                  ; DATA XREF=build_charclass.isra.29+138
                     aSpace:
000000000001c75f         db         "space", 0                                  ; DATA XREF=build_charclass.isra.29+450, sub_15b10+383
                     aPrint:
000000000001c765         db         "print", 0                                  ; DATA XREF=build_charclass.isra.29+947
                     aBlank:
000000000001c76b         db         "blank", 0                                  ; DATA XREF=build_charclass.isra.29+1202
                     aGraph:
000000000001c771         db         "graph", 0                                  ; DATA XREF=build_charclass.isra.29+1470
                     aPunct:
000000000001c777         db         "punct", 0                                  ; DATA XREF=build_charclass.isra.29+1610
000000000001c77d         db  0x78 ; 'x'                                         ; DATA XREF=build_charclass.isra.29+1748
                     aDigit:
000000000001c77e         db         "digit", 0                                  ; DATA XREF=build_charclass.isra.29+656
                     aErrRegespace:
000000000001c784         db         "err == REG_ESPACE", 0                      ; DATA XREF=re_search_internal+4155, re_search_internal+5439
                     aNodenextNull:
000000000001c796         db         "node->next == NULL", 0                     ; DATA XREF=sub_17450+25
                     aLeft1:
000000000001c7a9         db         "left > -1", 0                              ; DATA XREF=sub_17b30+175
                     aRight1:
000000000001c7b3         db         "right > -1", 0                             ; DATA XREF=sub_17b30+113
                     aRegsallocatedR:
000000000001c7be         db         "regs_allocated == REGS_FIXED", 0           ; DATA XREF=re_search_stub+1134
                     aRegsnumregsNre:
000000000001c7db         db         "regs->num_regs >= nregs", 0                ; DATA XREF=re_search_stub+1103
                     aPmatch0rmsoSta:
000000000001c7f3         db         "pmatch[0].rm_so == start", 0               ; DATA XREF=re_search_stub+1072
000000000001c80c         align      32
                     switch_table_1c820:        // switch_table
000000000001c820         dd         2 dup (re_search_internal.loc_13434-switch_table_1c820), re_search_internal.loc_12e9e-switch_table_1c820, re_search_internal.loc_133c2-switch_table_1c820, re_search_internal.loc_12f48-switch_table_1c820 ; switch table used at 0x12e66 containing 5 entries, DATA XREF=re_search_internal+1256
                     switch_table_1c834:        // switch_table
000000000001c834         dd         peek_token.loc_14e80-switch_table_1c834, 25 dup (peek_token.loc_14dbc-switch_table_1c834), peek_token.loc_14ef0-switch_table_1c834, 3 dup (peek_token.loc_14dbc-switch_table_1c834) ; switch table used at 0x14c9c containing 116 entries, DATA XREF=peek_token+314
000000000001c8ac         dd         peek_token.loc_14ed0-switch_table_1c834, peek_token.loc_14eb0-switch_table_1c834, peek_token.loc_14ea0-switch_table_1c834, peek_token.loc_14e60-switch_table_1c834
000000000001c8bc         dd         2 dup (peek_token.loc_14dbc-switch_table_1c834), peek_token.loc_14e50-switch_table_1c834, 16 dup (peek_token.loc_14dbc-switch_table_1c834), peek_token.loc_14e30-switch_table_1c834
000000000001c90c         dd         27 dup (peek_token.loc_14dbc-switch_table_1c834), peek_token.loc_14e20-switch_table_1c834, 2 dup (peek_token.loc_14dbc-switch_table_1c834), peek_token.loc_14df8-switch_table_1c834
000000000001c988         dd         28 dup (peek_token.loc_14dbc-switch_table_1c834), peek_token.loc_14dd0-switch_table_1c834, peek_token.loc_14da8-switch_table_1c834, peek_token.loc_14d80-switch_table_1c834
                     switch_table_1ca04:        // switch_table
000000000001ca04         dd         peek_token.loc_15113-switch_table_1ca04, peek_token.loc_150fc-switch_table_1ca04, peek_token.loc_150e5-switch_table_1ca04, peek_token.loc_15135-switch_table_1ca04 ; switch table used at 0x14d48 containing 87 entries, DATA XREF=peek_token+487
000000000001ca14         dd         peek_token.loc_150ca-switch_table_1ca04, 5 dup (peek_token.loc_15135-switch_table_1ca04), 9 dup (peek_token.loc_150a1-switch_table_1ca04), 2 dup (peek_token.loc_15135-switch_table_1ca04)
000000000001ca58         dd         peek_token.loc_1507f-switch_table_1ca04, peek_token.loc_15135-switch_table_1ca04, peek_token.loc_1505d-switch_table_1ca04, peek_token.loc_15042-switch_table_1ca04
000000000001ca68         dd         2 dup (peek_token.loc_15135-switch_table_1ca04), peek_token.loc_15020-switch_table_1ca04, 16 dup (peek_token.loc_15135-switch_table_1ca04), peek_token.loc_15005-switch_table_1ca04
000000000001cab8         dd         3 dup (peek_token.loc_15135-switch_table_1ca04), peek_token.loc_14fea-switch_table_1ca04, 8 dup (peek_token.loc_15135-switch_table_1ca04), peek_token.loc_14fc8-switch_table_1ca04
000000000001caec         dd         peek_token.loc_15135-switch_table_1ca04, peek_token.loc_14fa6-switch_table_1ca04, 16 dup (peek_token.loc_15135-switch_table_1ca04), peek_token.loc_14f6d-switch_table_1ca04
000000000001cb38         dd         3 dup (peek_token.loc_15135-switch_table_1ca04), peek_token.loc_14f52-switch_table_1ca04, 3 dup (peek_token.loc_15135-switch_table_1ca04), peek_token.loc_14f34-switch_table_1ca04
000000000001cb58         dd         peek_token.loc_14f19-switch_table_1ca04, peek_token.loc_14f88-switch_table_1ca04
000000000001cb60         db  0xb0 ; '.'                                         ; DATA XREF=parse_expression+75
000000000001cb61         db  0x88 ; '.'
000000000001cb62         db  0xff ; '.'
000000000001cb63         db  0xff ; '.'
000000000001cb64         db  0x3e ; '>'
000000000001cb65         db  0x92 ; '.'
000000000001cb66         db  0xff ; '.'
000000000001cb67         db  0xff ; '.'
000000000001cb68         db  0xb0 ; '.'
000000000001cb69         db  0x88 ; '.'
000000000001cb6a         db  0xff ; '.'
000000000001cb6b         db  0xff ; '.'
000000000001cb6c         db  0xb0 ; '.'
000000000001cb6d         db  0x88 ; '.'
000000000001cb6e         db  0xff ; '.'
000000000001cb6f         db  0xff ; '.'
000000000001cb70         db  0x8f ; '.'
000000000001cb71         db  0x91 ; '.'
000000000001cb72         db  0xff ; '.'
000000000001cb73         db  0xff ; '.'
000000000001cb74         db  0xf9 ; '.'
000000000001cb75         db  0x91 ; '.'
000000000001cb76         db  0xff ; '.'
000000000001cb77         db  0xff ; '.'
000000000001cb78         db  0xb0 ; '.'
000000000001cb79         db  0x88 ; '.'
000000000001cb7a         db  0xff ; '.'
000000000001cb7b         db  0xff ; '.'
000000000001cb7c         db  0xb0 ; '.'
000000000001cb7d         db  0x88 ; '.'
000000000001cb7e         db  0xff ; '.'
000000000001cb7f         db  0xff ; '.'
000000000001cb80         db  0x11 ; '.'
000000000001cb81         db  0x88 ; '.'
000000000001cb82         db  0xff ; '.'
000000000001cb83         db  0xff ; '.'
000000000001cb84         db  0x28 ; '('
000000000001cb85         db  0x93 ; '.'
000000000001cb86         db  0xff ; '.'
000000000001cb87         db  0xff ; '.'
000000000001cb88         db  0xb0 ; '.'
000000000001cb89         db  0x88 ; '.'
000000000001cb8a         db  0xff ; '.'
000000000001cb8b         db  0xff ; '.'
000000000001cb8c         db  0xfd ; '.'
000000000001cb8d         db  0x88 ; '.'
000000000001cb8e         db  0xff ; '.'
000000000001cb8f         db  0xff ; '.'
000000000001cb90         db  0x70 ; 'p'
000000000001cb91         db  0x8e ; '.'
000000000001cb92         db  0xff ; '.'
000000000001cb93         db  0xff ; '.'
000000000001cb94         db  0xb0 ; '.'
000000000001cb95         db  0x88 ; '.'
000000000001cb96         db  0xff ; '.'
000000000001cb97         db  0xff ; '.'
000000000001cb98         db  0xb0 ; '.'
000000000001cb99         db  0x88 ; '.'
000000000001cb9a         db  0xff ; '.'
000000000001cb9b         db  0xff ; '.'
000000000001cb9c         db  0xb0 ; '.'
000000000001cb9d         db  0x88 ; '.'
000000000001cb9e         db  0xff ; '.'
000000000001cb9f         db  0xff ; '.'
000000000001cba0         db  0xb0 ; '.'
000000000001cba1         db  0x88 ; '.'
000000000001cba2         db  0xff ; '.'
000000000001cba3         db  0xff ; '.'
000000000001cba4         db  0xb0 ; '.'
000000000001cba5         db  0x88 ; '.'
000000000001cba6         db  0xff ; '.'
000000000001cba7         db  0xff ; '.'
000000000001cba8         db  0xfd ; '.'
000000000001cba9         db  0x88 ; '.'
000000000001cbaa         db  0xff ; '.'
000000000001cbab         db  0xff ; '.'
000000000001cbac         db  0xfd ; '.'
000000000001cbad         db  0x88 ; '.'
000000000001cbae         db  0xff ; '.'
000000000001cbaf         db  0xff ; '.'
000000000001cbb0         db  0xb0 ; '.'
000000000001cbb1         db  0x8f ; '.'
000000000001cbb2         db  0xff ; '.'
000000000001cbb3         db  0xff ; '.'
000000000001cbb4         db  0xb0 ; '.'
000000000001cbb5         db  0x88 ; '.'
000000000001cbb6         db  0xff ; '.'
000000000001cbb7         db  0xff ; '.'
000000000001cbb8         db  0xb0 ; '.'
000000000001cbb9         db  0x88 ; '.'
000000000001cbba         db  0xff ; '.'
000000000001cbbb         db  0xff ; '.'
000000000001cbbc         db  0xee ; '.'
000000000001cbbd         db  0x88 ; '.'
000000000001cbbe         db  0xff ; '.'
000000000001cbbf         db  0xff ; '.'
000000000001cbc0         db  0x1b ; '.'
000000000001cbc1         db  0x89 ; '.'
000000000001cbc2         db  0xff ; '.'
000000000001cbc3         db  0xff ; '.'
000000000001cbc4         db  0xb0 ; '.'
000000000001cbc5         db  0x88 ; '.'
000000000001cbc6         db  0xff ; '.'
000000000001cbc7         db  0xff ; '.'
000000000001cbc8         db  0xb0 ; '.'
000000000001cbc9         db  0x88 ; '.'
000000000001cbca         db  0xff ; '.'
000000000001cbcb         db  0xff ; '.'
000000000001cbcc         db  0xb0 ; '.'
000000000001cbcd         db  0x88 ; '.'
000000000001cbce         db  0xff ; '.'
000000000001cbcf         db  0xff ; '.'
000000000001cbd0         db  0xb0 ; '.'
000000000001cbd1         db  0x88 ; '.'
000000000001cbd2         db  0xff ; '.'
000000000001cbd3         db  0xff ; '.'
000000000001cbd4         db  0xb0 ; '.'
000000000001cbd5         db  0x88 ; '.'
000000000001cbd6         db  0xff ; '.'
000000000001cbd7         db  0xff ; '.'
000000000001cbd8         db  0xb0 ; '.'
000000000001cbd9         db  0x88 ; '.'
000000000001cbda         db  0xff ; '.'
000000000001cbdb         db  0xff ; '.'
000000000001cbdc         db  0xb0 ; '.'
000000000001cbdd         db  0x88 ; '.'
000000000001cbde         db  0xff ; '.'
000000000001cbdf         db  0xff ; '.'
000000000001cbe0         db  0x68 ; 'h'
000000000001cbe1         db  0x91 ; '.'
000000000001cbe2         db  0xff ; '.'
000000000001cbe3         db  0xff ; '.'
000000000001cbe4         db  0x68 ; 'h'
000000000001cbe5         db  0x91 ; '.'
000000000001cbe6         db  0xff ; '.'
000000000001cbe7         db  0xff ; '.'
000000000001cbe8         db  0x18 ; '.'
000000000001cbe9         db  0x91 ; '.'
000000000001cbea         db  0xff ; '.'
000000000001cbeb         db  0xff ; '.'
000000000001cbec         db  0x18 ; '.'
000000000001cbed         db  0x91 ; '.'
000000000001cbee         db  0xff ; '.'
000000000001cbef         db  0xff ; '.'
000000000001cbf0         db  0x93 ; '.'
000000000001cbf1         db  0x93 ; '.'
000000000001cbf2         db  0xff ; '.'
000000000001cbf3         db  0xff ; '.'
                     switch_table_1cbf4:        // switch_table
000000000001cbf4         dd         sub_15b10.loc_15fe1-switch_table_1cbf4, sub_15b10.loc_15fb7-switch_table_1cbf4, sub_15b10.loc_15f6d-switch_table_1cbf4, sub_15b10.loc_15f35-switch_table_1cbf4 ; switch table used at 0x15c76 containing 5 entries, DATA XREF=sub_15b10+139
000000000001cc04         dd         sub_15b10.loc_16009-switch_table_1cbf4
000000000001cc08         db  0x90 ; '.'                                         ; DATA XREF=re_compile_internal+1708
000000000001cc09         db  0xa6 ; '.'
000000000001cc0a         db  0xff ; '.'
000000000001cc0b         db  0xff ; '.'
000000000001cc0c         db  0x90 ; '.'
000000000001cc0d         db  0xa6 ; '.'
000000000001cc0e         db  0xff ; '.'
000000000001cc0f         db  0xff ; '.'
000000000001cc10         db  0x48 ; 'H'
000000000001cc11         db  0xa8 ; '.'
000000000001cc12         db  0xff ; '.'
000000000001cc13         db  0xff ; '.'
000000000001cc14         db  0x90 ; '.'
000000000001cc15         db  0xa6 ; '.'
000000000001cc16         db  0xff ; '.'
000000000001cc17         db  0xff ; '.'
000000000001cc18         db  0x78 ; 'x'
000000000001cc19         db  0xa8 ; '.'
000000000001cc1a         db  0xff ; '.'
000000000001cc1b         db  0xff ; '.'
000000000001cc1c         db  0x90 ; '.'
000000000001cc1d         db  0xa6 ; '.'
000000000001cc1e         db  0xff ; '.'
000000000001cc1f         db  0xff ; '.'
000000000001cc20         db  0x90 ; '.'
000000000001cc21         db  0xa6 ; '.'
000000000001cc22         db  0xff ; '.'
000000000001cc23         db  0xff ; '.'
000000000001cc24         db  0x90 ; '.'
000000000001cc25         db  0xa6 ; '.'
000000000001cc26         db  0xff ; '.'
000000000001cc27         db  0xff ; '.'
000000000001cc28         db  0xf0 ; '.'
000000000001cc29         db  0xa7 ; '.'
000000000001cc2a         db  0xff ; '.'
000000000001cc2b         db  0xff ; '.'
000000000001cc2c         db  0xf0 ; '.'
000000000001cc2d         db  0xa7 ; '.'
000000000001cc2e         db  0xff ; '.'
000000000001cc2f         db  0xff ; '.'
000000000001cc30         db  0x2f ; '/'
000000000001cc31         db  0xa7 ; '.'
000000000001cc32         db  0xff ; '.'
000000000001cc33         db  0xff ; '.'
000000000001cc34         db  0x2f ; '/'
000000000001cc35         db  0xa7 ; '.'
000000000001cc36         db  0xff ; '.'
000000000001cc37         db  0xff ; '.'
000000000001cc38         db  0xf0 ; '.'
000000000001cc39         db  0xa7 ; '.'
000000000001cc3a         db  0xff ; '.'
000000000001cc3b         db  0xff ; '.'
000000000001cc3c         db  0x90 ; '.'
000000000001cc3d         db  0xa6 ; '.'
000000000001cc3e         db  0xff ; '.'
000000000001cc3f         db  0xff ; '.'
000000000001cc40         db  0x90 ; '.'
000000000001cc41         db  0xa6 ; '.'
000000000001cc42         db  0xff ; '.'
000000000001cc43         db  0xff ; '.'
000000000001cc44         db  0x90 ; '.'
000000000001cc45         db  0xa6 ; '.'
000000000001cc46         db  0xff ; '.'
000000000001cc47         db  0xff ; '.'
000000000001cc48         db  0xa9 ; '.'
000000000001cc49         db  0xa6 ; '.'
000000000001cc4a         db  0xff ; '.'
000000000001cc4b         db  0xff ; '.'
000000000001cc4c         db  0x42 ; 'B'                                         ; DATA XREF=sub_17480+1071
000000000001cc4d         db  0xaf ; '.'
000000000001cc4e         db  0xff ; '.'
000000000001cc4f         db  0xff ; '.'
000000000001cc50         db  0x44 ; 'D'
000000000001cc51         db  0xae ; '.'
000000000001cc52         db  0xff ; '.'
000000000001cc53         db  0xff ; '.'
000000000001cc54         db  0xf0 ; '.'
000000000001cc55         db  0xad ; '.'
000000000001cc56         db  0xff ; '.'
000000000001cc57         db  0xff ; '.'
000000000001cc58         db  0x6c ; 'l'
000000000001cc59         db  0xae ; '.'
000000000001cc5a         db  0xff ; '.'
000000000001cc5b         db  0xff ; '.'
000000000001cc5c         db  0xf0 ; '.'
000000000001cc5d         db  0xad ; '.'
000000000001cc5e         db  0xff ; '.'
000000000001cc5f         db  0xff ; '.'
000000000001cc60         db  0xed ; '.'
000000000001cc61         db  0xad ; '.'
000000000001cc62         db  0xff ; '.'
000000000001cc63         db  0xff ; '.'
000000000001cc64         db  0x62 ; 'b'
000000000001cc65         db  0xaa ; '.'
000000000001cc66         db  0xff ; '.'
000000000001cc67         db  0xff ; '.'
000000000001cc68         db  0x42 ; 'B'
000000000001cc69         db  0xaf ; '.'
000000000001cc6a         db  0xff ; '.'
000000000001cc6b         db  0xff ; '.'
000000000001cc6c         db  0xf0 ; '.'
000000000001cc6d         db  0xad ; '.'
000000000001cc6e         db  0xff ; '.'
000000000001cc6f         db  0xff ; '.'
000000000001cc70         db  0xf0 ; '.'
000000000001cc71         db  0xad ; '.'
000000000001cc72         db  0xff ; '.'
000000000001cc73         db  0xff ; '.'
000000000001cc74         db  0xf0 ; '.'
000000000001cc75         db  0xad ; '.'
000000000001cc76         db  0xff ; '.'
000000000001cc77         db  0xff ; '.'
000000000001cc78         db  0xf0 ; '.'
000000000001cc79         db  0xad ; '.'
000000000001cc7a         db  0xff ; '.'
000000000001cc7b         db  0xff ; '.'
000000000001cc7c         db  0x4d ; 'M'
000000000001cc7d         db  0xae ; '.'
000000000001cc7e         db  0xff ; '.'
000000000001cc7f         db  0xff ; '.'
                     __PRETTY_FUNCTION__.7859:
000000000001cc80         db         "re_copy_regs", 0                           ; DATA XREF=re_search_stub+1089, re_search_stub+1120
000000000001cc8d         align      16
                     __PRETTY_FUNCTION__.7847:
000000000001cc90         db         "re_search_stub", 0                         ; DATA XREF=re_search_stub+1058
000000000001cc9f         align      32
                     __PRETTY_FUNCTION__.8040:
000000000001cca0         db         "pop_fail_stack", 0                         ; DATA XREF=pop_fail_stack.isra.25+117
000000000001ccaf         align      16
                     __PRETTY_FUNCTION__.7972:
000000000001ccb0         db         "check_matching", 0                         ; DATA XREF=re_search_internal+4141, re_search_internal+5425
000000000001ccbf         align      64
                     __PRETTY_FUNCTION__.6981:
000000000001ccc0         db         "link_nfa_nodes", 0                         ; DATA XREF=sub_17450+11, sub_17b30+99, sub_17b30+130, sub_17b30+161
000000000001cccf         db  0x00 ; '.'
                     __PRETTY_FUNCTION__.7327:
000000000001ccd0         db         "parse_bracket_exp", 0                      ; DATA XREF=sub_15b10+2810
000000000001cce2         db  0x00 ; '.'
000000000001cce3         db  0x00 ; '.'
000000000001cce4         db  0x00 ; '.'
000000000001cce5         db  0x00 ; '.'
000000000001cce6         db  0x00 ; '.'
000000000001cce7         db  0x00 ; '.'
000000000001cce8         db  0x00 ; '.'
000000000001cce9         db  0x00 ; '.'
000000000001ccea         db  0x00 ; '.'
000000000001cceb         db  0x00 ; '.'
000000000001ccec         db  0x00 ; '.'
000000000001cced         db  0x00 ; '.'
000000000001ccee         db  0x00 ; '.'
000000000001ccef         db  0x00 ; '.'
000000000001ccf0         db  0x00 ; '.'
000000000001ccf1         db  0x00 ; '.'
000000000001ccf2         db  0x00 ; '.'
000000000001ccf3         db  0x00 ; '.'
000000000001ccf4         db  0x00 ; '.'
000000000001ccf5         db  0x00 ; '.'
000000000001ccf6         db  0x00 ; '.'
000000000001ccf7         db  0x00 ; '.'
000000000001ccf8         db  0x00 ; '.'
000000000001ccf9         db  0x00 ; '.'
000000000001ccfa         db  0x00 ; '.'
000000000001ccfb         db  0x00 ; '.'
000000000001ccfc         db  0x00 ; '.'
000000000001ccfd         db  0x00 ; '.'
000000000001ccfe         db  0x00 ; '.'
000000000001ccff         db  0x00 ; '.'
                     utf8_sb_map:
000000000001cd00         db  0xff ; '.'                                         ; DATA XREF=free_dfa_content+305, re_compile_internal+435
000000000001cd01         db  0xff ; '.'
000000000001cd02         db  0xff ; '.'
000000000001cd03         db  0xff ; '.'
000000000001cd04         db  0xff ; '.'
000000000001cd05         db  0xff ; '.'
000000000001cd06         db  0xff ; '.'
000000000001cd07         db  0xff ; '.'
000000000001cd08         db  0xff ; '.'
000000000001cd09         db  0xff ; '.'
000000000001cd0a         db  0xff ; '.'
000000000001cd0b         db  0xff ; '.'
000000000001cd0c         db  0xff ; '.'
000000000001cd0d         db  0xff ; '.'
000000000001cd0e         db  0xff ; '.'
000000000001cd0f         db  0xff ; '.'
000000000001cd10         db  0x00 ; '.'
000000000001cd11         db  0x00 ; '.'
000000000001cd12         db  0x00 ; '.'
000000000001cd13         db  0x00 ; '.'
000000000001cd14         db  0x00 ; '.'
000000000001cd15         db  0x00 ; '.'
000000000001cd16         db  0x00 ; '.'
000000000001cd17         db  0x00 ; '.'
000000000001cd18         db  0x00 ; '.'
000000000001cd19         db  0x00 ; '.'
000000000001cd1a         db  0x00 ; '.'
000000000001cd1b         db  0x00 ; '.'
000000000001cd1c         db  0x00 ; '.'
000000000001cd1d         db  0x00 ; '.'
000000000001cd1e         db  0x00 ; '.'
000000000001cd1f         db  0x00 ; '.'
                     __re_error_msgid_idx:
000000000001cd20         db  0x00 ; '.'                                         ; DATA XREF=rpl_re_compile_pattern+62, rpl_regerror+15
000000000001cd21         db  0x00 ; '.'
000000000001cd22         db  0x00 ; '.'
000000000001cd23         db  0x00 ; '.'
000000000001cd24         db  0x00 ; '.'
000000000001cd25         db  0x00 ; '.'
000000000001cd26         db  0x00 ; '.'
000000000001cd27         db  0x00 ; '.'
000000000001cd28         db  0x08 ; '.'
000000000001cd29         db  0x00 ; '.'
000000000001cd2a         db  0x00 ; '.'
000000000001cd2b         db  0x00 ; '.'
000000000001cd2c         db  0x00 ; '.'
000000000001cd2d         db  0x00 ; '.'
000000000001cd2e         db  0x00 ; '.'
000000000001cd2f         db  0x00 ; '.'
000000000001cd30         db  0x11 ; '.'
000000000001cd31         db  0x00 ; '.'
000000000001cd32         db  0x00 ; '.'
000000000001cd33         db  0x00 ; '.'
000000000001cd34         db  0x00 ; '.'
000000000001cd35         db  0x00 ; '.'
000000000001cd36         db  0x00 ; '.'
000000000001cd37         db  0x00 ; '.'
000000000001cd38         db  0x2c ; ','
000000000001cd39         db  0x00 ; '.'
000000000001cd3a         db  0x00 ; '.'
000000000001cd3b         db  0x00 ; '.'
000000000001cd3c         db  0x00 ; '.'
000000000001cd3d         db  0x00 ; '.'
000000000001cd3e         db  0x00 ; '.'
000000000001cd3f         db  0x00 ; '.'
000000000001cd40         db  0x48 ; 'H'
000000000001cd41         db  0x00 ; '.'
000000000001cd42         db  0x00 ; '.'
000000000001cd43         db  0x00 ; '.'
000000000001cd44         db  0x00 ; '.'
000000000001cd45         db  0x00 ; '.'
000000000001cd46         db  0x00 ; '.'
000000000001cd47         db  0x00 ; '.'
000000000001cd48         db  0x65 ; 'e'
000000000001cd49         db  0x00 ; '.'
000000000001cd4a         db  0x00 ; '.'
000000000001cd4b         db  0x00 ; '.'
000000000001cd4c         db  0x00 ; '.'
000000000001cd4d         db  0x00 ; '.'
000000000001cd4e         db  0x00 ; '.'
000000000001cd4f         db  0x00 ; '.'
000000000001cd50         db  0x78 ; 'x'
000000000001cd51         db  0x00 ; '.'
000000000001cd52         db  0x00 ; '.'
000000000001cd53         db  0x00 ; '.'
000000000001cd54         db  0x00 ; '.'
000000000001cd55         db  0x00 ; '.'
000000000001cd56         db  0x00 ; '.'
000000000001cd57         db  0x00 ; '.'
000000000001cd58         db  0x8f ; '.'
000000000001cd59         db  0x00 ; '.'
000000000001cd5a         db  0x00 ; '.'
000000000001cd5b         db  0x00 ; '.'
000000000001cd5c         db  0x00 ; '.'
000000000001cd5d         db  0x00 ; '.'
000000000001cd5e         db  0x00 ; '.'
000000000001cd5f         db  0x00 ; '.'
000000000001cd60         db  0xae ; '.'
000000000001cd61         db  0x00 ; '.'
000000000001cd62         db  0x00 ; '.'
000000000001cd63         db  0x00 ; '.'
000000000001cd64         db  0x00 ; '.'
000000000001cd65         db  0x00 ; '.'
000000000001cd66         db  0x00 ; '.'
000000000001cd67         db  0x00 ; '.'
000000000001cd68         db  0xc0 ; '.'
000000000001cd69         db  0x00 ; '.'
000000000001cd6a         db  0x00 ; '.'
000000000001cd6b         db  0x00 ; '.'
000000000001cd6c         db  0x00 ; '.'
000000000001cd6d         db  0x00 ; '.'
000000000001cd6e         db  0x00 ; '.'
000000000001cd6f         db  0x00 ; '.'
000000000001cd70         db  0xcd ; '.'
000000000001cd71         db  0x00 ; '.'
000000000001cd72         db  0x00 ; '.'
000000000001cd73         db  0x00 ; '.'
000000000001cd74         db  0x00 ; '.'
000000000001cd75         db  0x00 ; '.'
000000000001cd76         db  0x00 ; '.'
000000000001cd77         db  0x00 ; '.'
000000000001cd78         db  0xe5 ; '.'
000000000001cd79         db  0x00 ; '.'
000000000001cd7a         db  0x00 ; '.'
000000000001cd7b         db  0x00 ; '.'
000000000001cd7c         db  0x00 ; '.'
000000000001cd7d         db  0x00 ; '.'
000000000001cd7e         db  0x00 ; '.'
000000000001cd7f         db  0x00 ; '.'
000000000001cd80         db  0xf7 ; '.'
000000000001cd81         db  0x00 ; '.'
000000000001cd82         db  0x00 ; '.'
000000000001cd83         db  0x00 ; '.'
000000000001cd84         db  0x00 ; '.'
000000000001cd85         db  0x00 ; '.'
000000000001cd86         db  0x00 ; '.'
000000000001cd87         db  0x00 ; '.'
000000000001cd88         db  0x08 ; '.'
000000000001cd89         db  0x01 ; '.'
000000000001cd8a         db  0x00 ; '.'
000000000001cd8b         db  0x00 ; '.'
000000000001cd8c         db  0x00 ; '.'
000000000001cd8d         db  0x00 ; '.'
000000000001cd8e         db  0x00 ; '.'
000000000001cd8f         db  0x00 ; '.'
000000000001cd90         db  0x2d ; '-'
000000000001cd91         db  0x01 ; '.'
000000000001cd92         db  0x00 ; '.'
000000000001cd93         db  0x00 ; '.'
000000000001cd94         db  0x00 ; '.'
000000000001cd95         db  0x00 ; '.'
000000000001cd96         db  0x00 ; '.'
000000000001cd97         db  0x00 ; '.'
000000000001cd98         db  0x51 ; 'Q'
000000000001cd99         db  0x01 ; '.'
000000000001cd9a         db  0x00 ; '.'
000000000001cd9b         db  0x00 ; '.'
000000000001cd9c         db  0x00 ; '.'
000000000001cd9d         db  0x00 ; '.'
000000000001cd9e         db  0x00 ; '.'
000000000001cd9f         db  0x00 ; '.'
000000000001cda0         db  0x6c ; 'l'
000000000001cda1         db  0x01 ; '.'
000000000001cda2         db  0x00 ; '.'
000000000001cda3         db  0x00 ; '.'
000000000001cda4         db  0x00 ; '.'
000000000001cda5         db  0x00 ; '.'
000000000001cda6         db  0x00 ; '.'
000000000001cda7         db  0x00 ; '.'
000000000001cda8         db  0x00 ; '.'
000000000001cda9         db  0x00 ; '.'
000000000001cdaa         db  0x00 ; '.'
000000000001cdab         db  0x00 ; '.'
000000000001cdac         db  0x00 ; '.'
000000000001cdad         db  0x00 ; '.'
000000000001cdae         db  0x00 ; '.'
000000000001cdaf         db  0x00 ; '.'
000000000001cdb0         db  0x00 ; '.'
000000000001cdb1         db  0x00 ; '.'
000000000001cdb2         db  0x00 ; '.'
000000000001cdb3         db  0x00 ; '.'
000000000001cdb4         db  0x00 ; '.'
000000000001cdb5         db  0x00 ; '.'
000000000001cdb6         db  0x00 ; '.'
000000000001cdb7         db  0x00 ; '.'
000000000001cdb8         db  0x00 ; '.'
000000000001cdb9         db  0x00 ; '.'
000000000001cdba         db  0x00 ; '.'
000000000001cdbb         db  0x00 ; '.'
000000000001cdbc         db  0x00 ; '.'
000000000001cdbd         db  0x00 ; '.'
000000000001cdbe         db  0x00 ; '.'
000000000001cdbf         db  0x00 ; '.'
                     __re_error_msgid:
000000000001cdc0         db         "Success", 0                                ; DATA XREF=rpl_re_compile_pattern+71, rpl_regerror+25
000000000001cdc8         db  0x4e ; 'N'
000000000001cdc9         db  0x6f ; 'o'
000000000001cdca         db  0x20 ; ' '
000000000001cdcb         db  0x6d ; 'm'
000000000001cdcc         db  0x61 ; 'a'
000000000001cdcd         db  0x74 ; 't'
000000000001cdce         db  0x63 ; 'c'
000000000001cdcf         db  0x68 ; 'h'
000000000001cdd0         db  0x00 ; '.'
000000000001cdd1         db  0x49 ; 'I'
000000000001cdd2         db  0x6e ; 'n'
000000000001cdd3         db  0x76 ; 'v'
000000000001cdd4         db  0x61 ; 'a'
000000000001cdd5         db  0x6c ; 'l'
000000000001cdd6         db  0x69 ; 'i'
000000000001cdd7         db  0x64 ; 'd'
000000000001cdd8         db  0x20 ; ' '
000000000001cdd9         db  0x72 ; 'r'
000000000001cdda         db  0x65 ; 'e'
000000000001cddb         db  0x67 ; 'g'
000000000001cddc         db  0x75 ; 'u'
000000000001cddd         db  0x6c ; 'l'
000000000001cdde         db  0x61 ; 'a'
000000000001cddf         db  0x72 ; 'r'
000000000001cde0         db  0x20 ; ' '
000000000001cde1         db  0x65 ; 'e'
000000000001cde2         db  0x78 ; 'x'
000000000001cde3         db  0x70 ; 'p'
000000000001cde4         db  0x72 ; 'r'
000000000001cde5         db  0x65 ; 'e'
000000000001cde6         db  0x73 ; 's'
000000000001cde7         db  0x73 ; 's'
000000000001cde8         db  0x69 ; 'i'
000000000001cde9         db  0x6f ; 'o'
000000000001cdea         db  0x6e ; 'n'
000000000001cdeb         db  0x00 ; '.'
000000000001cdec         db  0x49 ; 'I'
000000000001cded         db  0x6e ; 'n'
000000000001cdee         db  0x76 ; 'v'
000000000001cdef         db  0x61 ; 'a'
000000000001cdf0         db  0x6c ; 'l'
000000000001cdf1         db  0x69 ; 'i'
000000000001cdf2         db  0x64 ; 'd'
000000000001cdf3         db  0x20 ; ' '
000000000001cdf4         db  0x63 ; 'c'
000000000001cdf5         db  0x6f ; 'o'
000000000001cdf6         db  0x6c ; 'l'
000000000001cdf7         db  0x6c ; 'l'
000000000001cdf8         db  0x61 ; 'a'
000000000001cdf9         db  0x74 ; 't'
000000000001cdfa         db  0x69 ; 'i'
000000000001cdfb         db  0x6f ; 'o'
000000000001cdfc         db  0x6e ; 'n'
000000000001cdfd         db  0x20 ; ' '
000000000001cdfe         db  0x63 ; 'c'
000000000001cdff         db  0x68 ; 'h'
000000000001ce00         db  0x61 ; 'a'
000000000001ce01         db  0x72 ; 'r'
000000000001ce02         db  0x61 ; 'a'
000000000001ce03         db  0x63 ; 'c'
000000000001ce04         db  0x74 ; 't'
000000000001ce05         db  0x65 ; 'e'
000000000001ce06         db  0x72 ; 'r'
000000000001ce07         db  0x00 ; '.'
000000000001ce08         db  0x49 ; 'I'
000000000001ce09         db  0x6e ; 'n'
000000000001ce0a         db  0x76 ; 'v'
000000000001ce0b         db  0x61 ; 'a'
000000000001ce0c         db  0x6c ; 'l'
000000000001ce0d         db  0x69 ; 'i'
000000000001ce0e         db  0x64 ; 'd'
000000000001ce0f         db  0x20 ; ' '
000000000001ce10         db  0x63 ; 'c'
000000000001ce11         db  0x68 ; 'h'
000000000001ce12         db  0x61 ; 'a'
000000000001ce13         db  0x72 ; 'r'
000000000001ce14         db  0x61 ; 'a'
000000000001ce15         db  0x63 ; 'c'
000000000001ce16         db  0x74 ; 't'
000000000001ce17         db  0x65 ; 'e'
000000000001ce18         db  0x72 ; 'r'
000000000001ce19         db  0x20 ; ' '
000000000001ce1a         db  0x63 ; 'c'
000000000001ce1b         db  0x6c ; 'l'
000000000001ce1c         db  0x61 ; 'a'
000000000001ce1d         db  0x73 ; 's'
000000000001ce1e         db  0x73 ; 's'
000000000001ce1f         db  0x20 ; ' '
000000000001ce20         db  0x6e ; 'n'
000000000001ce21         db  0x61 ; 'a'
000000000001ce22         db  0x6d ; 'm'
000000000001ce23         db  0x65 ; 'e'
000000000001ce24         db  0x00 ; '.'
000000000001ce25         db  0x54 ; 'T'
000000000001ce26         db  0x72 ; 'r'
000000000001ce27         db  0x61 ; 'a'
000000000001ce28         db  0x69 ; 'i'
000000000001ce29         db  0x6c ; 'l'
000000000001ce2a         db  0x69 ; 'i'
000000000001ce2b         db  0x6e ; 'n'
000000000001ce2c         db  0x67 ; 'g'
000000000001ce2d         db  0x20 ; ' '
000000000001ce2e         db  0x62 ; 'b'
000000000001ce2f         db  0x61 ; 'a'
000000000001ce30         db  0x63 ; 'c'
000000000001ce31         db  0x6b ; 'k'
000000000001ce32         db  0x73 ; 's'
000000000001ce33         db  0x6c ; 'l'
000000000001ce34         db  0x61 ; 'a'
000000000001ce35         db  0x73 ; 's'
000000000001ce36         db  0x68 ; 'h'
000000000001ce37         db  0x00 ; '.'
000000000001ce38         db  0x49 ; 'I'
000000000001ce39         db  0x6e ; 'n'
000000000001ce3a         db  0x76 ; 'v'
000000000001ce3b         db  0x61 ; 'a'
000000000001ce3c         db  0x6c ; 'l'
000000000001ce3d         db  0x69 ; 'i'
000000000001ce3e         db  0x64 ; 'd'
000000000001ce3f         db  0x20 ; ' '
000000000001ce40         db  0x62 ; 'b'
000000000001ce41         db  0x61 ; 'a'
000000000001ce42         db  0x63 ; 'c'
000000000001ce43         db  0x6b ; 'k'
000000000001ce44         db  0x20 ; ' '
000000000001ce45         db  0x72 ; 'r'
000000000001ce46         db  0x65 ; 'e'
000000000001ce47         db  0x66 ; 'f'
000000000001ce48         db  0x65 ; 'e'
000000000001ce49         db  0x72 ; 'r'
000000000001ce4a         db  0x65 ; 'e'
000000000001ce4b         db  0x6e ; 'n'
000000000001ce4c         db  0x63 ; 'c'
000000000001ce4d         db  0x65 ; 'e'
000000000001ce4e         db  0x00 ; '.'
000000000001ce4f         db  0x55 ; 'U'
000000000001ce50         db  0x6e ; 'n'
000000000001ce51         db  0x6d ; 'm'
000000000001ce52         db  0x61 ; 'a'
000000000001ce53         db  0x74 ; 't'
000000000001ce54         db  0x63 ; 'c'
000000000001ce55         db  0x68 ; 'h'
000000000001ce56         db  0x65 ; 'e'
000000000001ce57         db  0x64 ; 'd'
000000000001ce58         db  0x20 ; ' '
000000000001ce59         db  0x5b ; '['
000000000001ce5a         db  0x2c ; ','
000000000001ce5b         db  0x20 ; ' '
000000000001ce5c         db  0x5b ; '['
000000000001ce5d         db  0x5e ; '^'
000000000001ce5e         db  0x2c ; ','
000000000001ce5f         db  0x20 ; ' '
000000000001ce60         db  0x5b ; '['
000000000001ce61         db  0x3a ; ':'
000000000001ce62         db  0x2c ; ','
000000000001ce63         db  0x20 ; ' '
000000000001ce64         db  0x5b ; '['
000000000001ce65         db  0x2e ; '.'
000000000001ce66         db  0x2c ; ','
000000000001ce67         db  0x20 ; ' '
000000000001ce68         db  0x6f ; 'o'
000000000001ce69         db  0x72 ; 'r'
000000000001ce6a         db  0x20 ; ' '
000000000001ce6b         db  0x5b ; '['
000000000001ce6c         db  0x3d ; '='
000000000001ce6d         db  0x00 ; '.'
000000000001ce6e         db  0x55 ; 'U'
000000000001ce6f         db  0x6e ; 'n'
000000000001ce70         db  0x6d ; 'm'
000000000001ce71         db  0x61 ; 'a'
000000000001ce72         db  0x74 ; 't'
000000000001ce73         db  0x63 ; 'c'
000000000001ce74         db  0x68 ; 'h'
000000000001ce75         db  0x65 ; 'e'
000000000001ce76         db  0x64 ; 'd'
000000000001ce77         db  0x20 ; ' '
000000000001ce78         db  0x28 ; '('
000000000001ce79         db  0x20 ; ' '
000000000001ce7a         db  0x6f ; 'o'
000000000001ce7b         db  0x72 ; 'r'
000000000001ce7c         db  0x20 ; ' '
000000000001ce7d         db  0x5c ; '\'
000000000001ce7e         db  0x28 ; '('
000000000001ce7f         db  0x00 ; '.'
000000000001ce80         db  0x55 ; 'U'
000000000001ce81         db  0x6e ; 'n'
000000000001ce82         db  0x6d ; 'm'
000000000001ce83         db  0x61 ; 'a'
000000000001ce84         db  0x74 ; 't'
000000000001ce85         db  0x63 ; 'c'
000000000001ce86         db  0x68 ; 'h'
000000000001ce87         db  0x65 ; 'e'
000000000001ce88         db  0x64 ; 'd'
000000000001ce89         db  0x20 ; ' '
000000000001ce8a         db  0x5c ; '\'
000000000001ce8b         db  0x7b ; '{'
000000000001ce8c         db  0x00 ; '.'
000000000001ce8d         db  0x49 ; 'I'
000000000001ce8e         db  0x6e ; 'n'
000000000001ce8f         db  0x76 ; 'v'
000000000001ce90         db  0x61 ; 'a'
000000000001ce91         db  0x6c ; 'l'
000000000001ce92         db  0x69 ; 'i'
000000000001ce93         db  0x64 ; 'd'
000000000001ce94         db  0x20 ; ' '
000000000001ce95         db  0x63 ; 'c'
000000000001ce96         db  0x6f ; 'o'
000000000001ce97         db  0x6e ; 'n'
000000000001ce98         db  0x74 ; 't'
000000000001ce99         db  0x65 ; 'e'
000000000001ce9a         db  0x6e ; 'n'
000000000001ce9b         db  0x74 ; 't'
000000000001ce9c         db  0x20 ; ' '
000000000001ce9d         db  0x6f ; 'o'
000000000001ce9e         db  0x66 ; 'f'
000000000001ce9f         db  0x20 ; ' '
000000000001cea0         db  0x5c ; '\'
000000000001cea1         db  0x7b ; '{'
000000000001cea2         db  0x5c ; '\'
000000000001cea3         db  0x7d ; '}'
000000000001cea4         db  0x00 ; '.'
000000000001cea5         db  0x49 ; 'I'
000000000001cea6         db  0x6e ; 'n'
000000000001cea7         db  0x76 ; 'v'
000000000001cea8         db  0x61 ; 'a'
000000000001cea9         db  0x6c ; 'l'
000000000001ceaa         db  0x69 ; 'i'
000000000001ceab         db  0x64 ; 'd'
000000000001ceac         db  0x20 ; ' '
000000000001cead         db  0x72 ; 'r'
000000000001ceae         db  0x61 ; 'a'
000000000001ceaf         db  0x6e ; 'n'
000000000001ceb0         db  0x67 ; 'g'
000000000001ceb1         db  0x65 ; 'e'
000000000001ceb2         db  0x20 ; ' '
000000000001ceb3         db  0x65 ; 'e'
000000000001ceb4         db  0x6e ; 'n'
000000000001ceb5         db  0x64 ; 'd'
000000000001ceb6         db  0x00 ; '.'
000000000001ceb7         db  0x4d ; 'M'
000000000001ceb8         db  0x65 ; 'e'
000000000001ceb9         db  0x6d ; 'm'
000000000001ceba         db  0x6f ; 'o'
000000000001cebb         db  0x72 ; 'r'
000000000001cebc         db  0x79 ; 'y'
000000000001cebd         db  0x20 ; ' '
000000000001cebe         db  0x65 ; 'e'
000000000001cebf         db  0x78 ; 'x'
000000000001cec0         db  0x68 ; 'h'
000000000001cec1         db  0x61 ; 'a'
000000000001cec2         db  0x75 ; 'u'
000000000001cec3         db  0x73 ; 's'
000000000001cec4         db  0x74 ; 't'
000000000001cec5         db  0x65 ; 'e'
000000000001cec6         db  0x64 ; 'd'
000000000001cec7         db  0x00 ; '.'
000000000001cec8         db  0x49 ; 'I'
000000000001cec9         db  0x6e ; 'n'
000000000001ceca         db  0x76 ; 'v'
000000000001cecb         db  0x61 ; 'a'
000000000001cecc         db  0x6c ; 'l'
000000000001cecd         db  0x69 ; 'i'
000000000001cece         db  0x64 ; 'd'
000000000001cecf         db  0x20 ; ' '
000000000001ced0         db  0x70 ; 'p'
000000000001ced1         db  0x72 ; 'r'
000000000001ced2         db  0x65 ; 'e'
000000000001ced3         db  0x63 ; 'c'
000000000001ced4         db  0x65 ; 'e'
000000000001ced5         db  0x64 ; 'd'
000000000001ced6         db  0x69 ; 'i'
000000000001ced7         db  0x6e ; 'n'
000000000001ced8         db  0x67 ; 'g'
000000000001ced9         db  0x20 ; ' '
000000000001ceda         db  0x72 ; 'r'
000000000001cedb         db  0x65 ; 'e'
000000000001cedc         db  0x67 ; 'g'
000000000001cedd         db  0x75 ; 'u'
000000000001cede         db  0x6c ; 'l'
000000000001cedf         db  0x61 ; 'a'
000000000001cee0         db  0x72 ; 'r'
000000000001cee1         db  0x20 ; ' '
000000000001cee2         db  0x65 ; 'e'
000000000001cee3         db  0x78 ; 'x'
000000000001cee4         db  0x70 ; 'p'
000000000001cee5         db  0x72 ; 'r'
000000000001cee6         db  0x65 ; 'e'
000000000001cee7         db  0x73 ; 's'
000000000001cee8         db  0x73 ; 's'
000000000001cee9         db  0x69 ; 'i'
000000000001ceea         db  0x6f ; 'o'
000000000001ceeb         db  0x6e ; 'n'
000000000001ceec         db  0x00 ; '.'
000000000001ceed         db  0x50 ; 'P'
000000000001ceee         db  0x72 ; 'r'
000000000001ceef         db  0x65 ; 'e'
000000000001cef0         db  0x6d ; 'm'
000000000001cef1         db  0x61 ; 'a'
000000000001cef2         db  0x74 ; 't'
000000000001cef3         db  0x75 ; 'u'
000000000001cef4         db  0x72 ; 'r'
000000000001cef5         db  0x65 ; 'e'
000000000001cef6         db  0x20 ; ' '
000000000001cef7         db  0x65 ; 'e'
000000000001cef8         db  0x6e ; 'n'
000000000001cef9         db  0x64 ; 'd'
000000000001cefa         db  0x20 ; ' '
000000000001cefb         db  0x6f ; 'o'
000000000001cefc         db  0x66 ; 'f'
000000000001cefd         db  0x20 ; ' '
000000000001cefe         db  0x72 ; 'r'
000000000001ceff         db  0x65 ; 'e'
000000000001cf00         db  0x67 ; 'g'
000000000001cf01         db  0x75 ; 'u'
000000000001cf02         db  0x6c ; 'l'
000000000001cf03         db  0x61 ; 'a'
000000000001cf04         db  0x72 ; 'r'
000000000001cf05         db  0x20 ; ' '
000000000001cf06         db  0x65 ; 'e'
000000000001cf07         db  0x78 ; 'x'
000000000001cf08         db  0x70 ; 'p'
000000000001cf09         db  0x72 ; 'r'
000000000001cf0a         db  0x65 ; 'e'
000000000001cf0b         db  0x73 ; 's'
000000000001cf0c         db  0x73 ; 's'
000000000001cf0d         db  0x69 ; 'i'
000000000001cf0e         db  0x6f ; 'o'
000000000001cf0f         db  0x6e ; 'n'
000000000001cf10         db  0x00 ; '.'
000000000001cf11         db  0x52 ; 'R'
000000000001cf12         db  0x65 ; 'e'
000000000001cf13         db  0x67 ; 'g'
000000000001cf14         db  0x75 ; 'u'
000000000001cf15         db  0x6c ; 'l'
000000000001cf16         db  0x61 ; 'a'
000000000001cf17         db  0x72 ; 'r'
000000000001cf18         db  0x20 ; ' '
000000000001cf19         db  0x65 ; 'e'
000000000001cf1a         db  0x78 ; 'x'
000000000001cf1b         db  0x70 ; 'p'
000000000001cf1c         db  0x72 ; 'r'
000000000001cf1d         db  0x65 ; 'e'
000000000001cf1e         db  0x73 ; 's'
000000000001cf1f         db  0x73 ; 's'
000000000001cf20         db  0x69 ; 'i'
000000000001cf21         db  0x6f ; 'o'
000000000001cf22         db  0x6e ; 'n'
000000000001cf23         db  0x20 ; ' '
000000000001cf24         db  0x74 ; 't'
000000000001cf25         db  0x6f ; 'o'
000000000001cf26         db  0x6f ; 'o'
000000000001cf27         db  0x20 ; ' '
000000000001cf28         db  0x62 ; 'b'
000000000001cf29         db  0x69 ; 'i'
000000000001cf2a         db  0x67 ; 'g'
000000000001cf2b         db  0x00 ; '.'
000000000001cf2c         db  0x55 ; 'U'
000000000001cf2d         db  0x6e ; 'n'
000000000001cf2e         db  0x6d ; 'm'
000000000001cf2f         db  0x61 ; 'a'
000000000001cf30         db  0x74 ; 't'
000000000001cf31         db  0x63 ; 'c'
000000000001cf32         db  0x68 ; 'h'
000000000001cf33         db  0x65 ; 'e'
000000000001cf34         db  0x64 ; 'd'
000000000001cf35         db  0x20 ; ' '
000000000001cf36         db  0x29 ; ')'
000000000001cf37         db  0x20 ; ' '
000000000001cf38         db  0x6f ; 'o'
000000000001cf39         db  0x72 ; 'r'
000000000001cf3a         db  0x20 ; ' '
000000000001cf3b         db  0x5c ; '\'
000000000001cf3c         db  0x29 ; ')'
000000000001cf3d         db  0x00 ; '.'
000000000001cf3e         db  0x00 ; '.'
000000000001cf3f         db  0x00 ; '.'
000000000001cf40         dq         2 dup (7.7486e-304)                         ; DATA XREF=re_compile_fastmap_iter.isra.30+1044, re_compile_fastmap_iter.isra.30+1204
000000000001cf50         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
000000000001cf51         db  0x00 ; '.'
                     aPosix:
000000000001cf52         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
000000000001cf58         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
000000000001cf5e         db  0x00 ; '.'
000000000001cf5f         db  0x00 ; '.'
                     is_basic_table:
000000000001cf60         db  0x00 ; '.'                                         ; DATA XREF=mbsstr_trimmed_wordbounded+21, trim2+268, trim2+510, is_basic+2, knuth_morris_pratt_multibyte+271, knuth_morris_pratt_multibyte+1068, knuth_morris_pratt_multibyte+1414, knuth_morris_pratt_multibyte+1985, mbsstr+291, mbslen+124
000000000001cf61         db  0x1a ; '.'
000000000001cf62         db  0x00 ; '.'
000000000001cf63         db  0x00 ; '.'
000000000001cf64         db  0xef ; '.'
000000000001cf65         db  0xff ; '.'
000000000001cf66         db  0xff ; '.'
000000000001cf67         db  0xff ; '.'
000000000001cf68         db  0xfe ; '.'
000000000001cf69         db  0xff ; '.'
000000000001cf6a         db  0xff ; '.'
000000000001cf6b         db  0xff ; '.'
000000000001cf6c         db  0xfe ; '.'
000000000001cf6d         db  0xff ; '.'
000000000001cf6e         db  0xff ; '.'
000000000001cf6f         db  0x7f ; '.'
000000000001cf70         db  0x00 ; '.'
000000000001cf71         db  0x00 ; '.'
000000000001cf72         db  0x00 ; '.'
000000000001cf73         db  0x00 ; '.'
000000000001cf74         db  0x00 ; '.'
000000000001cf75         db  0x00 ; '.'
000000000001cf76         db  0x00 ; '.'
000000000001cf77         db  0x00 ; '.'
000000000001cf78         db  0x00 ; '.'
000000000001cf79         db  0x00 ; '.'
000000000001cf7a         db  0x00 ; '.'
000000000001cf7b         db  0x00 ; '.'
000000000001cf7c         db  0x00 ; '.'
000000000001cf7d         db  0x00 ; '.'
000000000001cf7e         db  0x00 ; '.'
000000000001cf7f         db  0x00 ; '.'
                     __PRETTY_FUNCTION__.5056:
000000000001cf80         db         "mbuiter_multi_next", 0                     ; DATA XREF=mbuiter_multi_next.part.0_2166, knuth_morris_pratt_multibyte+2591, knuth_morris_pratt_multibyte+2627, sub_1a267+753, sub_1a267+798
000000000001cf93         align      32
                     __PRETTY_FUNCTION__.5021:
000000000001cfa0         db         "mbuiter_multi_next", 0                     ; DATA XREF=mbslen+458, mbslen+494, mbslen+525
000000000001cfb3         db  0x00 ; '.'


        ; Section .eh_frame_hdr
        ; Range: [0x1cfb4; 0x1d640[ (1676 bytes)
        ; File offset : [118708; 120384[ (1676 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000001cfb4         db  0x01 ; '.'
000000000001cfb5         db  0x1b ; '.'
000000000001cfb6         db  0x03 ; '.'
000000000001cfb7         db  0x3b ; ';'
000000000001cfb8         db  0x88 ; '.'
000000000001cfb9         db  0x06 ; '.'
000000000001cfba         db  0x00 ; '.'
000000000001cfbb         db  0x00 ; '.'
000000000001cfbc         db  0xd0 ; '.'
000000000001cfbd         db  0x00 ; '.'
000000000001cfbe         db  0x00 ; '.'
000000000001cfbf         db  0x00 ; '.'
000000000001cfc0         db  0x8c ; '.'
000000000001cfc1         db  0x4c ; 'L'
000000000001cfc2         db  0xfe ; '.'
000000000001cfc3         db  0xff ; '.'
000000000001cfc4         db  0xd4 ; '.'
000000000001cfc5         db  0x06 ; '.'
000000000001cfc6         db  0x00 ; '.'
000000000001cfc7         db  0x00 ; '.'
000000000001cfc8         db  0x5c ; '\'
000000000001cfc9         db  0x51 ; 'Q'
000000000001cfca         db  0xfe ; '.'
000000000001cfcb         db  0xff ; '.'
000000000001cfcc         db  0xfc ; '.'
000000000001cfcd         db  0x06 ; '.'
000000000001cfce         db  0x00 ; '.'
000000000001cfcf         db  0x00 ; '.'
000000000001cfd0         db  0x6c ; 'l'
000000000001cfd1         db  0x51 ; 'Q'
000000000001cfd2         db  0xfe ; '.'
000000000001cfd3         db  0xff ; '.'
000000000001cfd4         db  0x04 ; '.'
000000000001cfd5         db  0x0c ; '.'
000000000001cfd6         db  0x00 ; '.'
000000000001cfd7         db  0x00 ; '.'
000000000001cfd8         db  0x8f ; '.'
000000000001cfd9         db  0x51 ; 'Q'
000000000001cfda         db  0xfe ; '.'
000000000001cfdb         db  0xff ; '.'
000000000001cfdc         db  0x54 ; 'T'
000000000001cfdd         db  0x12 ; '.'
000000000001cfde         db  0x00 ; '.'
000000000001cfdf         db  0x00 ; '.'
000000000001cfe0         db  0xb2 ; '.'
000000000001cfe1         db  0x51 ; 'Q'
000000000001cfe2         db  0xfe ; '.'
000000000001cfe3         db  0xff ; '.'
000000000001cfe4         db  0xac ; '.'
000000000001cfe5         db  0x2d ; '-'
000000000001cfe6         db  0x00 ; '.'
000000000001cfe7         db  0x00 ; '.'
000000000001cfe8         db  0xdc ; '.'
000000000001cfe9         db  0x51 ; 'Q'
000000000001cfea         db  0xfe ; '.'
000000000001cfeb         db  0xff ; '.'
000000000001cfec         db  0x4c ; 'L'
000000000001cfed         db  0x09 ; '.'
000000000001cfee         db  0x00 ; '.'
000000000001cfef         db  0x00 ; '.'
000000000001cff0         db  0x8c ; '.'
000000000001cff1         db  0x78 ; 'x'
000000000001cff2         db  0xfe ; '.'
000000000001cff3         db  0xff ; '.'
000000000001cff4         db  0xa4 ; '.'
000000000001cff5         db  0x06 ; '.'
000000000001cff6         db  0x00 ; '.'
000000000001cff7         db  0x00 ; '.'
000000000001cff8         db  0x9c ; '.'
000000000001cff9         db  0x79 ; 'y'
000000000001cffa         db  0xfe ; '.'
000000000001cffb         db  0xff ; '.'
000000000001cffc         db  0x14 ; '.'
000000000001cffd         db  0x07 ; '.'
000000000001cffe         db  0x00 ; '.'
000000000001cfff         db  0x00 ; '.'
000000000001d000         db  0x4c ; 'L'
000000000001d001         db  0x7a ; 'z'
000000000001d002         db  0xfe ; '.'
000000000001d003         db  0xff ; '.'
000000000001d004         db  0x28 ; '('
000000000001d005         db  0x07 ; '.'
000000000001d006         db  0x00 ; '.'
000000000001d007         db  0x00 ; '.'
000000000001d008         db  0x7c ; '|'
000000000001d009         db  0x7a ; 'z'
000000000001d00a         db  0xfe ; '.'
000000000001d00b         db  0xff ; '.'
000000000001d00c         db  0x40 ; '@'
000000000001d00d         db  0x07 ; '.'
000000000001d00e         db  0x00 ; '.'
000000000001d00f         db  0x00 ; '.'
000000000001d010         db  0xfc ; '.'
000000000001d011         db  0x7c ; '|'
000000000001d012         db  0xfe ; '.'
000000000001d013         db  0xff ; '.'
000000000001d014         db  0x70 ; 'p'
000000000001d015         db  0x07 ; '.'
000000000001d016         db  0x00 ; '.'
000000000001d017         db  0x00 ; '.'
000000000001d018         db  0x9c ; '.'
000000000001d019         db  0x7d ; '}'
000000000001d01a         db  0xfe ; '.'
000000000001d01b         db  0xff ; '.'
000000000001d01c         db  0xa0 ; '.'
000000000001d01d         db  0x07 ; '.'
000000000001d01e         db  0x00 ; '.'
000000000001d01f         db  0x00 ; '.'
000000000001d020         db  0x7c ; '|'
000000000001d021         db  0x7e ; '~'
000000000001d022         db  0xfe ; '.'
000000000001d023         db  0xff ; '.'
000000000001d024         db  0xcc ; '.'
000000000001d025         db  0x07 ; '.'
000000000001d026         db  0x00 ; '.'
000000000001d027         db  0x00 ; '.'
000000000001d028         db  0x9c ; '.'
000000000001d029         db  0x7f ; '.'
000000000001d02a         db  0xfe ; '.'
000000000001d02b         db  0xff ; '.'
000000000001d02c         db  0x08 ; '.'
000000000001d02d         db  0x08 ; '.'
000000000001d02e         db  0x00 ; '.'
000000000001d02f         db  0x00 ; '.'
000000000001d030         db  0xec ; '.'
000000000001d031         db  0x7f ; '.'
000000000001d032         db  0xfe ; '.'
000000000001d033         db  0xff ; '.'
000000000001d034         db  0x28 ; '('
000000000001d035         db  0x08 ; '.'
000000000001d036         db  0x00 ; '.'
000000000001d037         db  0x00 ; '.'
000000000001d038         db  0x6c ; 'l'
000000000001d039         db  0x84 ; '.'
000000000001d03a         db  0xfe ; '.'
000000000001d03b         db  0xff ; '.'
000000000001d03c         db  0xa8 ; '.'
000000000001d03d         db  0x08 ; '.'
000000000001d03e         db  0x00 ; '.'
000000000001d03f         db  0x00 ; '.'
000000000001d040         db  0x9c ; '.'
000000000001d041         db  0x84 ; '.'
000000000001d042         db  0xfe ; '.'
000000000001d043         db  0xff ; '.'
000000000001d044         db  0xcc ; '.'
000000000001d045         db  0x08 ; '.'
000000000001d046         db  0x00 ; '.'
000000000001d047         db  0x00 ; '.'
000000000001d048         db  0x2c ; ','
000000000001d049         db  0x85 ; '.'
000000000001d04a         db  0xfe ; '.'
000000000001d04b         db  0xff ; '.'
000000000001d04c         db  0x20 ; ' '
000000000001d04d         db  0x09 ; '.'
000000000001d04e         db  0x00 ; '.'
000000000001d04f         db  0x00 ; '.'
000000000001d050         db  0x7c ; '|'
000000000001d051         db  0x89 ; '.'
000000000001d052         db  0xfe ; '.'
000000000001d053         db  0xff ; '.'
000000000001d054         db  0x9c ; '.'
000000000001d055         db  0x09 ; '.'
000000000001d056         db  0x00 ; '.'
000000000001d057         db  0x00 ; '.'
000000000001d058         db  0x8c ; '.'
000000000001d059         db  0x89 ; '.'
000000000001d05a         db  0xfe ; '.'
000000000001d05b         db  0xff ; '.'
000000000001d05c         db  0xb0 ; '.'
000000000001d05d         db  0x09 ; '.'
000000000001d05e         db  0x00 ; '.'
000000000001d05f         db  0x00 ; '.'
000000000001d060         db  0xac ; '.'
000000000001d061         db  0x8a ; '.'
000000000001d062         db  0xfe ; '.'
000000000001d063         db  0xff ; '.'
000000000001d064         db  0xfc ; '.'
000000000001d065         db  0x09 ; '.'
000000000001d066         db  0x00 ; '.'
000000000001d067         db  0x00 ; '.'
000000000001d068         db  0x2c ; ','
000000000001d069         db  0x8b ; '.'
000000000001d06a         db  0xfe ; '.'
000000000001d06b         db  0xff ; '.'
000000000001d06c         db  0x28 ; '('
000000000001d06d         db  0x0a ; '.'
000000000001d06e         db  0x00 ; '.'
000000000001d06f         db  0x00 ; '.'
000000000001d070         db  0x4c ; 'L'
000000000001d071         db  0x8c ; '.'
000000000001d072         db  0xfe ; '.'
000000000001d073         db  0xff ; '.'
000000000001d074         db  0x88 ; '.'
000000000001d075         db  0x0a ; '.'
000000000001d076         db  0x00 ; '.'
000000000001d077         db  0x00 ; '.'
000000000001d078         db  0xbc ; '.'
000000000001d079         db  0x8c ; '.'
000000000001d07a         db  0xfe ; '.'
000000000001d07b         db  0xff ; '.'
000000000001d07c         db  0xd4 ; '.'
000000000001d07d         db  0x0a ; '.'
000000000001d07e         db  0x00 ; '.'
000000000001d07f         db  0x00 ; '.'
000000000001d080         db  0x0c ; '.'
000000000001d081         db  0x8d ; '.'
000000000001d082         db  0xfe ; '.'
000000000001d083         db  0xff ; '.'
000000000001d084         db  0x14 ; '.'
000000000001d085         db  0x0b ; '.'
000000000001d086         db  0x00 ; '.'
000000000001d087         db  0x00 ; '.'
000000000001d088         db  0x1c ; '.'
000000000001d089         db  0x8d ; '.'
000000000001d08a         db  0xfe ; '.'
000000000001d08b         db  0xff ; '.'
000000000001d08c         db  0x28 ; '('
000000000001d08d         db  0x0b ; '.'
000000000001d08e         db  0x00 ; '.'
000000000001d08f         db  0x00 ; '.'
000000000001d090         db  0x2c ; ','
000000000001d091         db  0x8d ; '.'
000000000001d092         db  0xfe ; '.'
000000000001d093         db  0xff ; '.'
000000000001d094         db  0x3c ; '<'
000000000001d095         db  0x0b ; '.'
000000000001d096         db  0x00 ; '.'
000000000001d097         db  0x00 ; '.'
000000000001d098         db  0xdc ; '.'
000000000001d099         db  0x8d ; '.'
000000000001d09a         db  0xfe ; '.'
000000000001d09b         db  0xff ; '.'
000000000001d09c         db  0x6c ; 'l'
000000000001d09d         db  0x0b ; '.'
000000000001d09e         db  0x00 ; '.'
000000000001d09f         db  0x00 ; '.'
000000000001d0a0         db  0x2c ; ','
000000000001d0a1         db  0x8e ; '.'
000000000001d0a2         db  0xfe ; '.'
000000000001d0a3         db  0xff ; '.'
000000000001d0a4         db  0x94 ; '.'
000000000001d0a5         db  0x0b ; '.'
000000000001d0a6         db  0x00 ; '.'
000000000001d0a7         db  0x00 ; '.'
000000000001d0a8         db  0xdc ; '.'
000000000001d0a9         db  0x8f ; '.'
000000000001d0aa         db  0xfe ; '.'
000000000001d0ab         db  0xff ; '.'
000000000001d0ac         db  0xe4 ; '.'
000000000001d0ad         db  0x0b ; '.'
000000000001d0ae         db  0x00 ; '.'
000000000001d0af         db  0x00 ; '.'
000000000001d0b0         db  0x7c ; '|'
000000000001d0b1         db  0x90 ; '.'
000000000001d0b2         db  0xfe ; '.'
000000000001d0b3         db  0xff ; '.'
000000000001d0b4         db  0x18 ; '.'
000000000001d0b5         db  0x0c ; '.'
000000000001d0b6         db  0x00 ; '.'
000000000001d0b7         db  0x00 ; '.'
000000000001d0b8         db  0xec ; '.'
000000000001d0b9         db  0x99 ; '.'
000000000001d0ba         db  0xfe ; '.'
000000000001d0bb         db  0xff ; '.'
000000000001d0bc         db  0x64 ; 'd'
000000000001d0bd         db  0x0c ; '.'
000000000001d0be         db  0x00 ; '.'
000000000001d0bf         db  0x00 ; '.'
000000000001d0c0         db  0x7c ; '|'
000000000001d0c1         db  0x9a ; '.'
000000000001d0c2         db  0xfe ; '.'
000000000001d0c3         db  0xff ; '.'
000000000001d0c4         db  0x9c ; '.'
000000000001d0c5         db  0x0c ; '.'
000000000001d0c6         db  0x00 ; '.'
000000000001d0c7         db  0x00 ; '.'
000000000001d0c8         db  0x6c ; 'l'
000000000001d0c9         db  0x9d ; '.'
000000000001d0ca         db  0xfe ; '.'
000000000001d0cb         db  0xff ; '.'
000000000001d0cc         db  0xec ; '.'
000000000001d0cd         db  0x0c ; '.'
000000000001d0ce         db  0x00 ; '.'
000000000001d0cf         db  0x00 ; '.'
000000000001d0d0         db  0x5c ; '\'
000000000001d0d1         db  0x9e ; '.'
000000000001d0d2         db  0xfe ; '.'
000000000001d0d3         db  0xff ; '.'
000000000001d0d4         db  0x30 ; '0'
000000000001d0d5         db  0x0d ; '.'
000000000001d0d6         db  0x00 ; '.'
000000000001d0d7         db  0x00 ; '.'
000000000001d0d8         db  0x9c ; '.'
000000000001d0d9         db  0xb0 ; '.'
000000000001d0da         db  0xfe ; '.'
000000000001d0db         db  0xff ; '.'
000000000001d0dc         db  0xa8 ; '.'
000000000001d0dd         db  0x0d ; '.'
000000000001d0de         db  0x00 ; '.'
000000000001d0df         db  0x00 ; '.'
000000000001d0e0         db  0x4c ; 'L'
000000000001d0e1         db  0xb2 ; '.'
000000000001d0e2         db  0xfe ; '.'
000000000001d0e3         db  0xff ; '.'
000000000001d0e4         db  0x14 ; '.'
000000000001d0e5         db  0x0e ; '.'
000000000001d0e6         db  0x00 ; '.'
000000000001d0e7         db  0x00 ; '.'
000000000001d0e8         db  0x8c ; '.'
000000000001d0e9         db  0xb2 ; '.'
000000000001d0ea         db  0xfe ; '.'
000000000001d0eb         db  0xff ; '.'
000000000001d0ec         db  0x40 ; '@'
000000000001d0ed         db  0x0e ; '.'
000000000001d0ee         db  0x00 ; '.'
000000000001d0ef         db  0x00 ; '.'
000000000001d0f0         db  0xac ; '.'
000000000001d0f1         db  0xb2 ; '.'
000000000001d0f2         db  0xfe ; '.'
000000000001d0f3         db  0xff ; '.'
000000000001d0f4         db  0x54 ; 'T'
000000000001d0f5         db  0x0e ; '.'
000000000001d0f6         db  0x00 ; '.'
000000000001d0f7         db  0x00 ; '.'
000000000001d0f8         db  0xcc ; '.'
000000000001d0f9         db  0xb2 ; '.'
000000000001d0fa         db  0xfe ; '.'
000000000001d0fb         db  0xff ; '.'
000000000001d0fc         db  0x68 ; 'h'
000000000001d0fd         db  0x0e ; '.'
000000000001d0fe         db  0x00 ; '.'
000000000001d0ff         db  0x00 ; '.'
000000000001d100         db  0x0c ; '.'
000000000001d101         db  0xb3 ; '.'
000000000001d102         db  0xfe ; '.'
000000000001d103         db  0xff ; '.'
000000000001d104         db  0x7c ; '|'
000000000001d105         db  0x0e ; '.'
000000000001d106         db  0x00 ; '.'
000000000001d107         db  0x00 ; '.'
000000000001d108         db  0x2c ; ','
000000000001d109         db  0xb3 ; '.'
000000000001d10a         db  0xfe ; '.'
000000000001d10b         db  0xff ; '.'
000000000001d10c         db  0x90 ; '.'
000000000001d10d         db  0x0e ; '.'
000000000001d10e         db  0x00 ; '.'
000000000001d10f         db  0x00 ; '.'
000000000001d110         db  0x5c ; '\'
000000000001d111         db  0xb3 ; '.'
000000000001d112         db  0xfe ; '.'
000000000001d113         db  0xff ; '.'
000000000001d114         db  0xa4 ; '.'
000000000001d115         db  0x0e ; '.'
000000000001d116         db  0x00 ; '.'
000000000001d117         db  0x00 ; '.'
000000000001d118         db  0xdc ; '.'
000000000001d119         db  0xb3 ; '.'
000000000001d11a         db  0xfe ; '.'
000000000001d11b         db  0xff ; '.'
000000000001d11c         db  0xf8 ; '.'
000000000001d11d         db  0x0e ; '.'
000000000001d11e         db  0x00 ; '.'
000000000001d11f         db  0x00 ; '.'
000000000001d120         db  0xcc ; '.'
000000000001d121         db  0xb4 ; '.'
000000000001d122         db  0xfe ; '.'
000000000001d123         db  0xff ; '.'
000000000001d124         db  0x64 ; 'd'
000000000001d125         db  0x0f ; '.'
000000000001d126         db  0x00 ; '.'
000000000001d127         db  0x00 ; '.'
000000000001d128         db  0xdc ; '.'
000000000001d129         db  0xb4 ; '.'
000000000001d12a         db  0xfe ; '.'
000000000001d12b         db  0xff ; '.'
000000000001d12c         db  0x78 ; 'x'
000000000001d12d         db  0x0f ; '.'
000000000001d12e         db  0x00 ; '.'
000000000001d12f         db  0x00 ; '.'
000000000001d130         db  0x7c ; '|'
000000000001d131         db  0xb5 ; '.'
000000000001d132         db  0xfe ; '.'
000000000001d133         db  0xff ; '.'
000000000001d134         db  0xa4 ; '.'
000000000001d135         db  0x0f ; '.'
000000000001d136         db  0x00 ; '.'
000000000001d137         db  0x00 ; '.'
000000000001d138         db  0x9c ; '.'
000000000001d139         db  0xb5 ; '.'
000000000001d13a         db  0xfe ; '.'
000000000001d13b         db  0xff ; '.'
000000000001d13c         db  0xb8 ; '.'
000000000001d13d         db  0x0f ; '.'
000000000001d13e         db  0x00 ; '.'
000000000001d13f         db  0x00 ; '.'
000000000001d140         db  0xac ; '.'
000000000001d141         db  0xb5 ; '.'
000000000001d142         db  0xfe ; '.'
000000000001d143         db  0xff ; '.'
000000000001d144         db  0xcc ; '.'
000000000001d145         db  0x0f ; '.'
000000000001d146         db  0x00 ; '.'
000000000001d147         db  0x00 ; '.'
000000000001d148         db  0xcc ; '.'
000000000001d149         db  0xb5 ; '.'
000000000001d14a         db  0xfe ; '.'
000000000001d14b         db  0xff ; '.'
000000000001d14c         db  0xe0 ; '.'
000000000001d14d         db  0x0f ; '.'
000000000001d14e         db  0x00 ; '.'
000000000001d14f         db  0x00 ; '.'
000000000001d150         db  0xec ; '.'
000000000001d151         db  0xb5 ; '.'
000000000001d152         db  0xfe ; '.'
000000000001d153         db  0xff ; '.'
000000000001d154         db  0xf4 ; '.'
000000000001d155         db  0x0f ; '.'
000000000001d156         db  0x00 ; '.'
000000000001d157         db  0x00 ; '.'
000000000001d158         db  0x7c ; '|'
000000000001d159         db  0xb6 ; '.'
000000000001d15a         db  0xfe ; '.'
000000000001d15b         db  0xff ; '.'
000000000001d15c         db  0x10 ; '.'
000000000001d15d         db  0x10 ; '.'
000000000001d15e         db  0x00 ; '.'
000000000001d15f         db  0x00 ; '.'
000000000001d160         db  0x0c ; '.'
000000000001d161         db  0xb7 ; '.'
000000000001d162         db  0xfe ; '.'
000000000001d163         db  0xff ; '.'
000000000001d164         db  0x2c ; ','
000000000001d165         db  0x10 ; '.'
000000000001d166         db  0x00 ; '.'
000000000001d167         db  0x00 ; '.'
000000000001d168         db  0x1c ; '.'
000000000001d169         db  0xb7 ; '.'
000000000001d16a         db  0xfe ; '.'
000000000001d16b         db  0xff ; '.'
000000000001d16c         db  0x40 ; '@'
000000000001d16d         db  0x10 ; '.'
000000000001d16e         db  0x00 ; '.'
000000000001d16f         db  0x00 ; '.'
000000000001d170         db  0x2c ; ','
000000000001d171         db  0xb7 ; '.'
000000000001d172         db  0xfe ; '.'
000000000001d173         db  0xff ; '.'
000000000001d174         db  0x54 ; 'T'
000000000001d175         db  0x10 ; '.'
000000000001d176         db  0x00 ; '.'
000000000001d177         db  0x00 ; '.'
000000000001d178         db  0xcc ; '.'
000000000001d179         db  0xb7 ; '.'
000000000001d17a         db  0xfe ; '.'
000000000001d17b         db  0xff ; '.'
000000000001d17c         db  0x70 ; 'p'
000000000001d17d         db  0x10 ; '.'
000000000001d17e         db  0x00 ; '.'
000000000001d17f         db  0x00 ; '.'
000000000001d180         db  0xdc ; '.'
000000000001d181         db  0xb7 ; '.'
000000000001d182         db  0xfe ; '.'
000000000001d183         db  0xff ; '.'
000000000001d184         db  0x84 ; '.'
000000000001d185         db  0x10 ; '.'
000000000001d186         db  0x00 ; '.'
000000000001d187         db  0x00 ; '.'
000000000001d188         db  0xfc ; '.'
000000000001d189         db  0xb7 ; '.'
000000000001d18a         db  0xfe ; '.'
000000000001d18b         db  0xff ; '.'
000000000001d18c         db  0x98 ; '.'
000000000001d18d         db  0x10 ; '.'
000000000001d18e         db  0x00 ; '.'
000000000001d18f         db  0x00 ; '.'
000000000001d190         db  0x0c ; '.'
000000000001d191         db  0xb8 ; '.'
000000000001d192         db  0xfe ; '.'
000000000001d193         db  0xff ; '.'
000000000001d194         db  0xac ; '.'
000000000001d195         db  0x10 ; '.'
000000000001d196         db  0x00 ; '.'
000000000001d197         db  0x00 ; '.'
000000000001d198         db  0x9c ; '.'
000000000001d199         db  0xb8 ; '.'
000000000001d19a         db  0xfe ; '.'
000000000001d19b         db  0xff ; '.'
000000000001d19c         db  0xc8 ; '.'
000000000001d19d         db  0x10 ; '.'
000000000001d19e         db  0x00 ; '.'
000000000001d19f         db  0x00 ; '.'
000000000001d1a0         db  0x3c ; '<'
000000000001d1a1         db  0xb9 ; '.'
000000000001d1a2         db  0xfe ; '.'
000000000001d1a3         db  0xff ; '.'
000000000001d1a4         db  0xe4 ; '.'
000000000001d1a5         db  0x10 ; '.'
000000000001d1a6         db  0x00 ; '.'
000000000001d1a7         db  0x00 ; '.'
000000000001d1a8         db  0x4c ; 'L'
000000000001d1a9         db  0xb9 ; '.'
000000000001d1aa         db  0xfe ; '.'
000000000001d1ab         db  0xff ; '.'
000000000001d1ac         db  0xf8 ; '.'
000000000001d1ad         db  0x10 ; '.'
000000000001d1ae         db  0x00 ; '.'
000000000001d1af         db  0x00 ; '.'
000000000001d1b0         db  0x6c ; 'l'
000000000001d1b1         db  0xb9 ; '.'
000000000001d1b2         db  0xfe ; '.'
000000000001d1b3         db  0xff ; '.'
000000000001d1b4         db  0x0c ; '.'
000000000001d1b5         db  0x11 ; '.'
000000000001d1b6         db  0x00 ; '.'
000000000001d1b7         db  0x00 ; '.'
000000000001d1b8         db  0x8c ; '.'
000000000001d1b9         db  0xb9 ; '.'
000000000001d1ba         db  0xfe ; '.'
000000000001d1bb         db  0xff ; '.'
000000000001d1bc         db  0x20 ; ' '
000000000001d1bd         db  0x11 ; '.'
000000000001d1be         db  0x00 ; '.'
000000000001d1bf         db  0x00 ; '.'
000000000001d1c0         db  0x9c ; '.'
000000000001d1c1         db  0xb9 ; '.'
000000000001d1c2         db  0xfe ; '.'
000000000001d1c3         db  0xff ; '.'
000000000001d1c4         db  0x34 ; '4'
000000000001d1c5         db  0x11 ; '.'
000000000001d1c6         db  0x00 ; '.'
000000000001d1c7         db  0x00 ; '.'
000000000001d1c8         db  0xbc ; '.'
000000000001d1c9         db  0xb9 ; '.'
000000000001d1ca         db  0xfe ; '.'
000000000001d1cb         db  0xff ; '.'
000000000001d1cc         db  0x48 ; 'H'
000000000001d1cd         db  0x11 ; '.'
000000000001d1ce         db  0x00 ; '.'
000000000001d1cf         db  0x00 ; '.'
000000000001d1d0         db  0xdc ; '.'
000000000001d1d1         db  0xb9 ; '.'
000000000001d1d2         db  0xfe ; '.'
000000000001d1d3         db  0xff ; '.'
000000000001d1d4         db  0x5c ; '\'
000000000001d1d5         db  0x11 ; '.'
000000000001d1d6         db  0x00 ; '.'
000000000001d1d7         db  0x00 ; '.'
000000000001d1d8         db  0xfc ; '.'
000000000001d1d9         db  0xb9 ; '.'
000000000001d1da         db  0xfe ; '.'
000000000001d1db         db  0xff ; '.'
000000000001d1dc         db  0x74 ; 't'
000000000001d1dd         db  0x11 ; '.'
000000000001d1de         db  0x00 ; '.'
000000000001d1df         db  0x00 ; '.'
000000000001d1e0         db  0xdc ; '.'
000000000001d1e1         db  0xbb ; '.'
000000000001d1e2         db  0xfe ; '.'
000000000001d1e3         db  0xff ; '.'
000000000001d1e4         db  0xc4 ; '.'
000000000001d1e5         db  0x11 ; '.'
000000000001d1e6         db  0x00 ; '.'
000000000001d1e7         db  0x00 ; '.'
000000000001d1e8         db  0x5c ; '\'
000000000001d1e9         db  0xbc ; '.'
000000000001d1ea         db  0xfe ; '.'
000000000001d1eb         db  0xff ; '.'
000000000001d1ec         db  0x00 ; '.'
000000000001d1ed         db  0x12 ; '.'
000000000001d1ee         db  0x00 ; '.'
000000000001d1ef         db  0x00 ; '.'
000000000001d1f0         db  0x6c ; 'l'
000000000001d1f1         db  0xbc ; '.'
000000000001d1f2         db  0xfe ; '.'
000000000001d1f3         db  0xff ; '.'
000000000001d1f4         db  0x14 ; '.'
000000000001d1f5         db  0x12 ; '.'
000000000001d1f6         db  0x00 ; '.'
000000000001d1f7         db  0x00 ; '.'
000000000001d1f8         db  0x7c ; '|'
000000000001d1f9         db  0xbc ; '.'
000000000001d1fa         db  0xfe ; '.'
000000000001d1fb         db  0xff ; '.'
000000000001d1fc         db  0x2c ; ','
000000000001d1fd         db  0x12 ; '.'
000000000001d1fe         db  0x00 ; '.'
000000000001d1ff         db  0x00 ; '.'
000000000001d200         db  0xbc ; '.'
000000000001d201         db  0xbc ; '.'
000000000001d202         db  0xfe ; '.'
000000000001d203         db  0xff ; '.'
000000000001d204         db  0x68 ; 'h'
000000000001d205         db  0x12 ; '.'
000000000001d206         db  0x00 ; '.'
000000000001d207         db  0x00 ; '.'
000000000001d208         db  0xec ; '.'
000000000001d209         db  0xc2 ; '.'
000000000001d20a         db  0xfe ; '.'
000000000001d20b         db  0xff ; '.'
000000000001d20c         db  0xbc ; '.'
000000000001d20d         db  0x12 ; '.'
000000000001d20e         db  0x00 ; '.'
000000000001d20f         db  0x00 ; '.'
000000000001d210         db  0x0c ; '.'
000000000001d211         db  0xc7 ; '.'
000000000001d212         db  0xfe ; '.'
000000000001d213         db  0xff ; '.'
000000000001d214         db  0xd0 ; '.'
000000000001d215         db  0x13 ; '.'
000000000001d216         db  0x00 ; '.'
000000000001d217         db  0x00 ; '.'
000000000001d218         db  0x2c ; ','
000000000001d219         db  0xc7 ; '.'
000000000001d21a         db  0xfe ; '.'
000000000001d21b         db  0xff ; '.'
000000000001d21c         db  0xe4 ; '.'
000000000001d21d         db  0x13 ; '.'
000000000001d21e         db  0x00 ; '.'
000000000001d21f         db  0x00 ; '.'
000000000001d220         db  0xac ; '.'
000000000001d221         db  0xc7 ; '.'
000000000001d222         db  0xfe ; '.'
000000000001d223         db  0xff ; '.'
000000000001d224         db  0x00 ; '.'
000000000001d225         db  0x14 ; '.'
000000000001d226         db  0x00 ; '.'
000000000001d227         db  0x00 ; '.'
000000000001d228         db  0x8c ; '.'
000000000001d229         db  0xc8 ; '.'
000000000001d22a         db  0xfe ; '.'
000000000001d22b         db  0xff ; '.'
000000000001d22c         db  0x2c ; ','
000000000001d22d         db  0x14 ; '.'
000000000001d22e         db  0x00 ; '.'
000000000001d22f         db  0x00 ; '.'
000000000001d230         db  0x0c ; '.'
000000000001d231         db  0xc9 ; '.'
000000000001d232         db  0xfe ; '.'
000000000001d233         db  0xff ; '.'
000000000001d234         db  0x4c ; 'L'
000000000001d235         db  0x14 ; '.'
000000000001d236         db  0x00 ; '.'
000000000001d237         db  0x00 ; '.'
000000000001d238         db  0x2c ; ','
000000000001d239         db  0xc9 ; '.'
000000000001d23a         db  0xfe ; '.'
000000000001d23b         db  0xff ; '.'
000000000001d23c         db  0x68 ; 'h'
000000000001d23d         db  0x14 ; '.'
000000000001d23e         db  0x00 ; '.'
000000000001d23f         db  0x00 ; '.'
000000000001d240         db  0x5c ; '\'
000000000001d241         db  0xc9 ; '.'
000000000001d242         db  0xfe ; '.'
000000000001d243         db  0xff ; '.'
000000000001d244         db  0x7c ; '|'
000000000001d245         db  0x14 ; '.'
000000000001d246         db  0x00 ; '.'
000000000001d247         db  0x00 ; '.'
000000000001d248         db  0x6c ; 'l'
000000000001d249         db  0xc9 ; '.'
000000000001d24a         db  0xfe ; '.'
000000000001d24b         db  0xff ; '.'
000000000001d24c         db  0x90 ; '.'
000000000001d24d         db  0x14 ; '.'
000000000001d24e         db  0x00 ; '.'
000000000001d24f         db  0x00 ; '.'
000000000001d250         db  0xac ; '.'
000000000001d251         db  0xc9 ; '.'
000000000001d252         db  0xfe ; '.'
000000000001d253         db  0xff ; '.'
000000000001d254         db  0xb4 ; '.'
000000000001d255         db  0x14 ; '.'
000000000001d256         db  0x00 ; '.'
000000000001d257         db  0x00 ; '.'
000000000001d258         db  0xdc ; '.'
000000000001d259         db  0xc9 ; '.'
000000000001d25a         db  0xfe ; '.'
000000000001d25b         db  0xff ; '.'
000000000001d25c         db  0xc8 ; '.'
000000000001d25d         db  0x14 ; '.'
000000000001d25e         db  0x00 ; '.'
000000000001d25f         db  0x00 ; '.'
000000000001d260         db  0x6c ; 'l'
000000000001d261         db  0xca ; '.'
000000000001d262         db  0xfe ; '.'
000000000001d263         db  0xff ; '.'
000000000001d264         db  0xe0 ; '.'
000000000001d265         db  0x14 ; '.'
000000000001d266         db  0x00 ; '.'
000000000001d267         db  0x00 ; '.'
000000000001d268         db  0xbc ; '.'
000000000001d269         db  0xca ; '.'
000000000001d26a         db  0xfe ; '.'
000000000001d26b         db  0xff ; '.'
000000000001d26c         db  0xf8 ; '.'
000000000001d26d         db  0x14 ; '.'
000000000001d26e         db  0x00 ; '.'
000000000001d26f         db  0x00 ; '.'
000000000001d270         db  0xdc ; '.'
000000000001d271         db  0xca ; '.'
000000000001d272         db  0xfe ; '.'
000000000001d273         db  0xff ; '.'
000000000001d274         db  0x14 ; '.'
000000000001d275         db  0x15 ; '.'
000000000001d276         db  0x00 ; '.'
000000000001d277         db  0x00 ; '.'
000000000001d278         db  0x0c ; '.'
000000000001d279         db  0xcb ; '.'
000000000001d27a         db  0xfe ; '.'
000000000001d27b         db  0xff ; '.'
000000000001d27c         db  0x30 ; '0'
000000000001d27d         db  0x15 ; '.'
000000000001d27e         db  0x00 ; '.'
000000000001d27f         db  0x00 ; '.'
000000000001d280         db  0x3c ; '<'
000000000001d281         db  0xcb ; '.'
000000000001d282         db  0xfe ; '.'
000000000001d283         db  0xff ; '.'
000000000001d284         db  0x58 ; 'X'
000000000001d285         db  0x15 ; '.'
000000000001d286         db  0x00 ; '.'
000000000001d287         db  0x00 ; '.'
000000000001d288         db  0x5c ; '\'
000000000001d289         db  0xcb ; '.'
000000000001d28a         db  0xfe ; '.'
000000000001d28b         db  0xff ; '.'
000000000001d28c         db  0x74 ; 't'
000000000001d28d         db  0x15 ; '.'
000000000001d28e         db  0x00 ; '.'
000000000001d28f         db  0x00 ; '.'
000000000001d290         db  0x9c ; '.'
000000000001d291         db  0xcb ; '.'
000000000001d292         db  0xfe ; '.'
000000000001d293         db  0xff ; '.'
000000000001d294         db  0x8c ; '.'
000000000001d295         db  0x15 ; '.'
000000000001d296         db  0x00 ; '.'
000000000001d297         db  0x00 ; '.'
000000000001d298         db  0xbc ; '.'
000000000001d299         db  0xcb ; '.'
000000000001d29a         db  0xfe ; '.'
000000000001d29b         db  0xff ; '.'
000000000001d29c         db  0xa8 ; '.'
000000000001d29d         db  0x15 ; '.'
000000000001d29e         db  0x00 ; '.'
000000000001d29f         db  0x00 ; '.'
000000000001d2a0         db  0xec ; '.'
000000000001d2a1         db  0xcb ; '.'
000000000001d2a2         db  0xfe ; '.'
000000000001d2a3         db  0xff ; '.'
000000000001d2a4         db  0xc4 ; '.'
000000000001d2a5         db  0x15 ; '.'
000000000001d2a6         db  0x00 ; '.'
000000000001d2a7         db  0x00 ; '.'
000000000001d2a8         db  0x1c ; '.'
000000000001d2a9         db  0xcc ; '.'
000000000001d2aa         db  0xfe ; '.'
000000000001d2ab         db  0xff ; '.'
000000000001d2ac         db  0xe4 ; '.'
000000000001d2ad         db  0x15 ; '.'
000000000001d2ae         db  0x00 ; '.'
000000000001d2af         db  0x00 ; '.'
000000000001d2b0         db  0xdc ; '.'
000000000001d2b1         db  0xd2 ; '.'
000000000001d2b2         db  0xfe ; '.'
000000000001d2b3         db  0xff ; '.'
000000000001d2b4         db  0x34 ; '4'
000000000001d2b5         db  0x16 ; '.'
000000000001d2b6         db  0x00 ; '.'
000000000001d2b7         db  0x00 ; '.'
000000000001d2b8         db  0x5c ; '\'
000000000001d2b9         db  0xd3 ; '.'
000000000001d2ba         db  0xfe ; '.'
000000000001d2bb         db  0xff ; '.'
000000000001d2bc         db  0x6c ; 'l'
000000000001d2bd         db  0x16 ; '.'
000000000001d2be         db  0x00 ; '.'
000000000001d2bf         db  0x00 ; '.'
000000000001d2c0         db  0x9c ; '.'
000000000001d2c1         db  0xd3 ; '.'
000000000001d2c2         db  0xfe ; '.'
000000000001d2c3         db  0xff ; '.'
000000000001d2c4         db  0x8c ; '.'
000000000001d2c5         db  0x16 ; '.'
000000000001d2c6         db  0x00 ; '.'
000000000001d2c7         db  0x00 ; '.'
000000000001d2c8         db  0xfc ; '.'
000000000001d2c9         db  0xd3 ; '.'
000000000001d2ca         db  0xfe ; '.'
000000000001d2cb         db  0xff ; '.'
000000000001d2cc         db  0xbc ; '.'
000000000001d2cd         db  0x16 ; '.'
000000000001d2ce         db  0x00 ; '.'
000000000001d2cf         db  0x00 ; '.'
000000000001d2d0         db  0x8c ; '.'
000000000001d2d1         db  0xd4 ; '.'
000000000001d2d2         db  0xfe ; '.'
000000000001d2d3         db  0xff ; '.'
000000000001d2d4         db  0xfc ; '.'
000000000001d2d5         db  0x16 ; '.'
000000000001d2d6         db  0x00 ; '.'
000000000001d2d7         db  0x00 ; '.'
000000000001d2d8         db  0xbc ; '.'
000000000001d2d9         db  0xd5 ; '.'
000000000001d2da         db  0xfe ; '.'
000000000001d2db         db  0xff ; '.'
000000000001d2dc         db  0x10 ; '.'
000000000001d2dd         db  0x17 ; '.'
000000000001d2de         db  0x00 ; '.'
000000000001d2df         db  0x00 ; '.'
000000000001d2e0         db  0xdc ; '.'
000000000001d2e1         db  0xd5 ; '.'
000000000001d2e2         db  0xfe ; '.'
000000000001d2e3         db  0xff ; '.'
000000000001d2e4         db  0x24 ; '$'
000000000001d2e5         db  0x17 ; '.'
000000000001d2e6         db  0x00 ; '.'
000000000001d2e7         db  0x00 ; '.'
000000000001d2e8         db  0x0c ; '.'
000000000001d2e9         db  0xd8 ; '.'
000000000001d2ea         db  0xfe ; '.'
000000000001d2eb         db  0xff ; '.'
000000000001d2ec         db  0xb8 ; '.'
000000000001d2ed         db  0x17 ; '.'
000000000001d2ee         db  0x00 ; '.'
000000000001d2ef         db  0x00 ; '.'
000000000001d2f0         db  0x7c ; '|'
000000000001d2f1         db  0xd8 ; '.'
000000000001d2f2         db  0xfe ; '.'
000000000001d2f3         db  0xff ; '.'
000000000001d2f4         db  0xcc ; '.'
000000000001d2f5         db  0x17 ; '.'
000000000001d2f6         db  0x00 ; '.'
000000000001d2f7         db  0x00 ; '.'
000000000001d2f8         db  0xec ; '.'
000000000001d2f9         db  0xd8 ; '.'
000000000001d2fa         db  0xfe ; '.'
000000000001d2fb         db  0xff ; '.'
000000000001d2fc         db  0xf8 ; '.'
000000000001d2fd         db  0x17 ; '.'
000000000001d2fe         db  0x00 ; '.'
000000000001d2ff         db  0x00 ; '.'
000000000001d300         db  0x4c ; 'L'
000000000001d301         db  0xd9 ; '.'
000000000001d302         db  0xfe ; '.'
000000000001d303         db  0xff ; '.'
000000000001d304         db  0x24 ; '$'
000000000001d305         db  0x18 ; '.'
000000000001d306         db  0x00 ; '.'
000000000001d307         db  0x00 ; '.'
000000000001d308         db  0xec ; '.'
000000000001d309         db  0xd9 ; '.'
000000000001d30a         db  0xfe ; '.'
000000000001d30b         db  0xff ; '.'
000000000001d30c         db  0x58 ; 'X'
000000000001d30d         db  0x18 ; '.'
000000000001d30e         db  0x00 ; '.'
000000000001d30f         db  0x00 ; '.'
000000000001d310         db  0x5c ; '\'
000000000001d311         db  0xda ; '.'
000000000001d312         db  0xfe ; '.'
000000000001d313         db  0xff ; '.'
000000000001d314         db  0x84 ; '.'
000000000001d315         db  0x18 ; '.'
000000000001d316         db  0x00 ; '.'
000000000001d317         db  0x00 ; '.'
000000000001d318         db  0x8c ; '.'
000000000001d319         db  0xdb ; '.'
000000000001d31a         db  0xfe ; '.'
000000000001d31b         db  0xff ; '.'
000000000001d31c         db  0xbc ; '.'
000000000001d31d         db  0x18 ; '.'
000000000001d31e         db  0x00 ; '.'
000000000001d31f         db  0x00 ; '.'
000000000001d320         db  0x7c ; '|'
000000000001d321         db  0xdc ; '.'
000000000001d322         db  0xfe ; '.'
000000000001d323         db  0xff ; '.'
000000000001d324         db  0x0c ; '.'
000000000001d325         db  0x19 ; '.'
000000000001d326         db  0x00 ; '.'
000000000001d327         db  0x00 ; '.'
000000000001d328         db  0xec ; '.'
000000000001d329         db  0xdc ; '.'
000000000001d32a         db  0xfe ; '.'
000000000001d32b         db  0xff ; '.'
000000000001d32c         db  0x3c ; '<'
000000000001d32d         db  0x19 ; '.'
000000000001d32e         db  0x00 ; '.'
000000000001d32f         db  0x00 ; '.'
000000000001d330         db  0xbc ; '.'
000000000001d331         db  0xde ; '.'
000000000001d332         db  0xfe ; '.'
000000000001d333         db  0xff ; '.'
000000000001d334         db  0x88 ; '.'
000000000001d335         db  0x19 ; '.'
000000000001d336         db  0x00 ; '.'
000000000001d337         db  0x00 ; '.'
000000000001d338         db  0xdc ; '.'
000000000001d339         db  0xe4 ; '.'
000000000001d33a         db  0xfe ; '.'
000000000001d33b         db  0xff ; '.'
000000000001d33c         db  0xd4 ; '.'
000000000001d33d         db  0x19 ; '.'
000000000001d33e         db  0x00 ; '.'
000000000001d33f         db  0x00 ; '.'
000000000001d340         db  0x2c ; ','
000000000001d341         db  0xe6 ; '.'
000000000001d342         db  0xfe ; '.'
000000000001d343         db  0xff ; '.'
000000000001d344         db  0x30 ; '0'
000000000001d345         db  0x1a ; '.'
000000000001d346         db  0x00 ; '.'
000000000001d347         db  0x00 ; '.'
000000000001d348         db  0xbc ; '.'
000000000001d349         db  0xe6 ; '.'
000000000001d34a         db  0xfe ; '.'
000000000001d34b         db  0xff ; '.'
000000000001d34c         db  0x5c ; '\'
000000000001d34d         db  0x1a ; '.'
000000000001d34e         db  0x00 ; '.'
000000000001d34f         db  0x00 ; '.'
000000000001d350         db  0xec ; '.'
000000000001d351         db  0xe6 ; '.'
000000000001d352         db  0xfe ; '.'
000000000001d353         db  0xff ; '.'
000000000001d354         db  0x78 ; 'x'
000000000001d355         db  0x1a ; '.'
000000000001d356         db  0x00 ; '.'
000000000001d357         db  0x00 ; '.'
000000000001d358         db  0x1c ; '.'
000000000001d359         db  0xe7 ; '.'
000000000001d35a         db  0xfe ; '.'
000000000001d35b         db  0xff ; '.'
000000000001d35c         db  0x8c ; '.'
000000000001d35d         db  0x1a ; '.'
000000000001d35e         db  0x00 ; '.'
000000000001d35f         db  0x00 ; '.'
000000000001d360         db  0x3c ; '<'
000000000001d361         db  0xe7 ; '.'
000000000001d362         db  0xfe ; '.'
000000000001d363         db  0xff ; '.'
000000000001d364         db  0xa4 ; '.'
000000000001d365         db  0x1a ; '.'
000000000001d366         db  0x00 ; '.'
000000000001d367         db  0x00 ; '.'
000000000001d368         db  0x0c ; '.'
000000000001d369         db  0xe9 ; '.'
000000000001d36a         db  0xfe ; '.'
000000000001d36b         db  0xff ; '.'
000000000001d36c         db  0xf0 ; '.'
000000000001d36d         db  0x1a ; '.'
000000000001d36e         db  0x00 ; '.'
000000000001d36f         db  0x00 ; '.'
000000000001d370         db  0xac ; '.'
000000000001d371         db  0xe9 ; '.'
000000000001d372         db  0xfe ; '.'
000000000001d373         db  0xff ; '.'
000000000001d374         db  0x28 ; '('
000000000001d375         db  0x1b ; '.'
000000000001d376         db  0x00 ; '.'
000000000001d377         db  0x00 ; '.'
000000000001d378         db  0x2c ; ','
000000000001d379         db  0xec ; '.'
000000000001d37a         db  0xfe ; '.'
000000000001d37b         db  0xff ; '.'
000000000001d37c         db  0x74 ; 't'
000000000001d37d         db  0x1b ; '.'
000000000001d37e         db  0x00 ; '.'
000000000001d37f         db  0x00 ; '.'
000000000001d380         db  0x8c ; '.'
000000000001d381         db  0xec ; '.'
000000000001d382         db  0xfe ; '.'
000000000001d383         db  0xff ; '.'
000000000001d384         db  0x90 ; '.'
000000000001d385         db  0x1b ; '.'
000000000001d386         db  0x00 ; '.'
000000000001d387         db  0x00 ; '.'
000000000001d388         db  0xcc ; '.'
000000000001d389         db  0xec ; '.'
000000000001d38a         db  0xfe ; '.'
000000000001d38b         db  0xff ; '.'
000000000001d38c         db  0xb0 ; '.'
000000000001d38d         db  0x1b ; '.'
000000000001d38e         db  0x00 ; '.'
000000000001d38f         db  0x00 ; '.'
000000000001d390         db  0x2c ; ','
000000000001d391         db  0xee ; '.'
000000000001d392         db  0xfe ; '.'
000000000001d393         db  0xff ; '.'
000000000001d394         db  0xec ; '.'
000000000001d395         db  0x1b ; '.'
000000000001d396         db  0x00 ; '.'
000000000001d397         db  0x00 ; '.'
000000000001d398         db  0xec ; '.'
000000000001d399         db  0xee ; '.'
000000000001d39a         db  0xfe ; '.'
000000000001d39b         db  0xff ; '.'
000000000001d39c         db  0x28 ; '('
000000000001d39d         db  0x1c ; '.'
000000000001d39e         db  0x00 ; '.'
000000000001d39f         db  0x00 ; '.'
000000000001d3a0         db  0x3c ; '<'
000000000001d3a1         db  0xef ; '.'
000000000001d3a2         db  0xfe ; '.'
000000000001d3a3         db  0xff ; '.'
000000000001d3a4         db  0x3c ; '<'
000000000001d3a5         db  0x1c ; '.'
000000000001d3a6         db  0x00 ; '.'
000000000001d3a7         db  0x00 ; '.'
000000000001d3a8         db  0x9c ; '.'
000000000001d3a9         db  0xef ; '.'
000000000001d3aa         db  0xfe ; '.'
000000000001d3ab         db  0xff ; '.'
000000000001d3ac         db  0x50 ; 'P'
000000000001d3ad         db  0x1c ; '.'
000000000001d3ae         db  0x00 ; '.'
000000000001d3af         db  0x00 ; '.'
000000000001d3b0         db  0x1c ; '.'
000000000001d3b1         db  0xf0 ; '.'
000000000001d3b2         db  0xfe ; '.'
000000000001d3b3         db  0xff ; '.'
000000000001d3b4         db  0x64 ; 'd'
000000000001d3b5         db  0x1c ; '.'
000000000001d3b6         db  0x00 ; '.'
000000000001d3b7         db  0x00 ; '.'
000000000001d3b8         db  0x1c ; '.'
000000000001d3b9         db  0xf1 ; '.'
000000000001d3ba         db  0xfe ; '.'
000000000001d3bb         db  0xff ; '.'
000000000001d3bc         db  0xc8 ; '.'
000000000001d3bd         db  0x1c ; '.'
000000000001d3be         db  0x00 ; '.'
000000000001d3bf         db  0x00 ; '.'
000000000001d3c0         db  0x5c ; '\'
000000000001d3c1         db  0xf1 ; '.'
000000000001d3c2         db  0xfe ; '.'
000000000001d3c3         db  0xff ; '.'
000000000001d3c4         db  0xdc ; '.'
000000000001d3c5         db  0x1c ; '.'
000000000001d3c6         db  0x00 ; '.'
000000000001d3c7         db  0x00 ; '.'
000000000001d3c8         db  0xec ; '.'
000000000001d3c9         db  0xf1 ; '.'
000000000001d3ca         db  0xfe ; '.'
000000000001d3cb         db  0xff ; '.'
000000000001d3cc         db  0xf0 ; '.'
000000000001d3cd         db  0x1c ; '.'
000000000001d3ce         db  0x00 ; '.'
000000000001d3cf         db  0x00 ; '.'
000000000001d3d0         db  0x4c ; 'L'
000000000001d3d1         db  0xf2 ; '.'
000000000001d3d2         db  0xfe ; '.'
000000000001d3d3         db  0xff ; '.'
000000000001d3d4         db  0x04 ; '.'
000000000001d3d5         db  0x1d ; '.'
000000000001d3d6         db  0x00 ; '.'
000000000001d3d7         db  0x00 ; '.'
000000000001d3d8         db  0xbc ; '.'
000000000001d3d9         db  0xf4 ; '.'
000000000001d3da         db  0xfe ; '.'
000000000001d3db         db  0xff ; '.'
000000000001d3dc         db  0x54 ; 'T'
000000000001d3dd         db  0x1d ; '.'
000000000001d3de         db  0x00 ; '.'
000000000001d3df         db  0x00 ; '.'
000000000001d3e0         db  0x9c ; '.'
000000000001d3e1         db  0xf6 ; '.'
000000000001d3e2         db  0xfe ; '.'
000000000001d3e3         db  0xff ; '.'
000000000001d3e4         db  0x8c ; '.'
000000000001d3e5         db  0x1d ; '.'
000000000001d3e6         db  0x00 ; '.'
000000000001d3e7         db  0x00 ; '.'
000000000001d3e8         db  0x4c ; 'L'
000000000001d3e9         db  0xf9 ; '.'
000000000001d3ea         db  0xfe ; '.'
000000000001d3eb         db  0xff ; '.'
000000000001d3ec         db  0xdc ; '.'
000000000001d3ed         db  0x1d ; '.'
000000000001d3ee         db  0x00 ; '.'
000000000001d3ef         db  0x00 ; '.'
000000000001d3f0         db  0xac ; '.'
000000000001d3f1         db  0xfa ; '.'
000000000001d3f2         db  0xfe ; '.'
000000000001d3f3         db  0xff ; '.'
000000000001d3f4         db  0x28 ; '('
000000000001d3f5         db  0x1e ; '.'
000000000001d3f6         db  0x00 ; '.'
000000000001d3f7         db  0x00 ; '.'
000000000001d3f8         db  0x5c ; '\'
000000000001d3f9         db  0xfc ; '.'
000000000001d3fa         db  0xfe ; '.'
000000000001d3fb         db  0xff ; '.'
000000000001d3fc         db  0x78 ; 'x'
000000000001d3fd         db  0x1e ; '.'
000000000001d3fe         db  0x00 ; '.'
000000000001d3ff         db  0x00 ; '.'
000000000001d400         db  0x3c ; '<'
000000000001d401         db  0xfd ; '.'
000000000001d402         db  0xfe ; '.'
000000000001d403         db  0xff ; '.'
000000000001d404         db  0x9c ; '.'
000000000001d405         db  0x1e ; '.'
000000000001d406         db  0x00 ; '.'
000000000001d407         db  0x00 ; '.'
000000000001d408         db  0x1c ; '.'
000000000001d409         db  0xfe ; '.'
000000000001d40a         db  0xfe ; '.'
000000000001d40b         db  0xff ; '.'
000000000001d40c         db  0xe0 ; '.'
000000000001d40d         db  0x1e ; '.'
000000000001d40e         db  0x00 ; '.'
000000000001d40f         db  0x00 ; '.'
000000000001d410         db  0x5c ; '\'
000000000001d411         db  0x00 ; '.'
000000000001d412         db  0xff ; '.'
000000000001d413         db  0xff ; '.'
000000000001d414         db  0x30 ; '0'
000000000001d415         db  0x1f ; '.'
000000000001d416         db  0x00 ; '.'
000000000001d417         db  0x00 ; '.'
000000000001d418         db  0xfc ; '.'
000000000001d419         db  0x00 ; '.'
000000000001d41a         db  0xff ; '.'
000000000001d41b         db  0xff ; '.'
000000000001d41c         db  0x5c ; '\'
000000000001d41d         db  0x1f ; '.'
000000000001d41e         db  0x00 ; '.'
000000000001d41f         db  0x00 ; '.'
000000000001d420         db  0x8c ; '.'
000000000001d421         db  0x01 ; '.'
000000000001d422         db  0xff ; '.'
000000000001d423         db  0xff ; '.'
000000000001d424         db  0x98 ; '.'
000000000001d425         db  0x1f ; '.'
000000000001d426         db  0x00 ; '.'
000000000001d427         db  0x00 ; '.'
000000000001d428         db  0xec ; '.'
000000000001d429         db  0x02 ; '.'
000000000001d42a         db  0xff ; '.'
000000000001d42b         db  0xff ; '.'
000000000001d42c         db  0xfc ; '.'
000000000001d42d         db  0x1f ; '.'
000000000001d42e         db  0x00 ; '.'
000000000001d42f         db  0x00 ; '.'
000000000001d430         db  0xac ; '.'
000000000001d431         db  0x05 ; '.'
000000000001d432         db  0xff ; '.'
000000000001d433         db  0xff ; '.'
000000000001d434         db  0x48 ; 'H'
000000000001d435         db  0x20 ; ' '
000000000001d436         db  0x00 ; '.'
000000000001d437         db  0x00 ; '.'
000000000001d438         db  0xac ; '.'
000000000001d439         db  0x07 ; '.'
000000000001d43a         db  0xff ; '.'
000000000001d43b         db  0xff ; '.'
000000000001d43c         db  0x94 ; '.'
000000000001d43d         db  0x20 ; ' '
000000000001d43e         db  0x00 ; '.'
000000000001d43f         db  0x00 ; '.'
000000000001d440         db  0x8c ; '.'
000000000001d441         db  0x08 ; '.'
000000000001d442         db  0xff ; '.'
000000000001d443         db  0xff ; '.'
000000000001d444         db  0xe0 ; '.'
000000000001d445         db  0x20 ; ' '
000000000001d446         db  0x00 ; '.'
000000000001d447         db  0x00 ; '.'
000000000001d448         db  0x2c ; ','
000000000001d449         db  0x0c ; '.'
000000000001d44a         db  0xff ; '.'
000000000001d44b         db  0xff ; '.'
000000000001d44c         db  0x2c ; ','
000000000001d44d         db  0x21 ; '!'
000000000001d44e         db  0x00 ; '.'
000000000001d44f         db  0x00 ; '.'
000000000001d450         db  0x7c ; '|'
000000000001d451         db  0x0d ; '.'
000000000001d452         db  0xff ; '.'
000000000001d453         db  0xff ; '.'
000000000001d454         db  0x78 ; 'x'
000000000001d455         db  0x21 ; '!'
000000000001d456         db  0x00 ; '.'
000000000001d457         db  0x00 ; '.'
000000000001d458         db  0x6c ; 'l'
000000000001d459         db  0x0e ; '.'
000000000001d45a         db  0xff ; '.'
000000000001d45b         db  0xff ; '.'
000000000001d45c         db  0xbc ; '.'
000000000001d45d         db  0x21 ; '!'
000000000001d45e         db  0x00 ; '.'
000000000001d45f         db  0x00 ; '.'
000000000001d460         db  0x7c ; '|'
000000000001d461         db  0x0f ; '.'
000000000001d462         db  0xff ; '.'
000000000001d463         db  0xff ; '.'
000000000001d464         db  0xe4 ; '.'
000000000001d465         db  0x21 ; '!'
000000000001d466         db  0x00 ; '.'
000000000001d467         db  0x00 ; '.'
000000000001d468         db  0x4c ; 'L'
000000000001d469         db  0x10 ; '.'
000000000001d46a         db  0xff ; '.'
000000000001d46b         db  0xff ; '.'
000000000001d46c         db  0x1c ; '.'
000000000001d46d         db  0x22 ; '"'
000000000001d46e         db  0x00 ; '.'
000000000001d46f         db  0x00 ; '.'
000000000001d470         db  0xec ; '.'
000000000001d471         db  0x17 ; '.'
000000000001d472         db  0xff ; '.'
000000000001d473         db  0xff ; '.'
000000000001d474         db  0x6c ; 'l'
000000000001d475         db  0x22 ; '"'
000000000001d476         db  0x00 ; '.'
000000000001d477         db  0x00 ; '.'
000000000001d478         db  0x2c ; ','
000000000001d479         db  0x1a ; '.'
000000000001d47a         db  0xff ; '.'
000000000001d47b         db  0xff ; '.'
000000000001d47c         db  0xbc ; '.'
000000000001d47d         db  0x22 ; '"'
000000000001d47e         db  0x00 ; '.'
000000000001d47f         db  0x00 ; '.'
000000000001d480         db  0xcc ; '.'
000000000001d481         db  0x25 ; '%'
000000000001d482         db  0xff ; '.'
000000000001d483         db  0xff ; '.'
000000000001d484         db  0x0c ; '.'
000000000001d485         db  0x23 ; '#'
000000000001d486         db  0x00 ; '.'
000000000001d487         db  0x00 ; '.'
000000000001d488         db  0x5c ; '\'
000000000001d489         db  0x26 ; '&'
000000000001d48a         db  0xff ; '.'
000000000001d48b         db  0xff ; '.'
000000000001d48c         db  0x40 ; '@'
000000000001d48d         db  0x23 ; '#'
000000000001d48e         db  0x00 ; '.'
000000000001d48f         db  0x00 ; '.'
000000000001d490         db  0xac ; '.'
000000000001d491         db  0x26 ; '&'
000000000001d492         db  0xff ; '.'
000000000001d493         db  0xff ; '.'
000000000001d494         db  0x6c ; 'l'
000000000001d495         db  0x23 ; '#'
000000000001d496         db  0x00 ; '.'
000000000001d497         db  0x00 ; '.'
000000000001d498         db  0x4c ; 'L'
000000000001d499         db  0x27 ; '''
000000000001d49a         db  0xff ; '.'
000000000001d49b         db  0xff ; '.'
000000000001d49c         db  0x9c ; '.'
000000000001d49d         db  0x23 ; '#'
000000000001d49e         db  0x00 ; '.'
000000000001d49f         db  0x00 ; '.'
000000000001d4a0         db  0x9c ; '.'
000000000001d4a1         db  0x27 ; '''
000000000001d4a2         db  0xff ; '.'
000000000001d4a3         db  0xff ; '.'
000000000001d4a4         db  0xd0 ; '.'
000000000001d4a5         db  0x23 ; '#'
000000000001d4a6         db  0x00 ; '.'
000000000001d4a7         db  0x00 ; '.'
000000000001d4a8         db  0xac ; '.'
000000000001d4a9         db  0x2f ; '/'
000000000001d4aa         db  0xff ; '.'
000000000001d4ab         db  0xff ; '.'
000000000001d4ac         db  0x14 ; '.'
000000000001d4ad         db  0x24 ; '$'
000000000001d4ae         db  0x00 ; '.'
000000000001d4af         db  0x00 ; '.'
000000000001d4b0         db  0x1c ; '.'
000000000001d4b1         db  0x32 ; '2'
000000000001d4b2         db  0xff ; '.'
000000000001d4b3         db  0xff ; '.'
000000000001d4b4         db  0x74 ; 't'
000000000001d4b5         db  0x24 ; '$'
000000000001d4b6         db  0x00 ; '.'
000000000001d4b7         db  0x00 ; '.'
000000000001d4b8         db  0x4c ; 'L'
000000000001d4b9         db  0x37 ; '7'
000000000001d4ba         db  0xff ; '.'
000000000001d4bb         db  0xff ; '.'
000000000001d4bc         db  0xc4 ; '.'
000000000001d4bd         db  0x24 ; '$'
000000000001d4be         db  0x00 ; '.'
000000000001d4bf         db  0x00 ; '.'
000000000001d4c0         db  0xac ; '.'
000000000001d4c1         db  0x39 ; '9'
000000000001d4c2         db  0xff ; '.'
000000000001d4c3         db  0xff ; '.'
000000000001d4c4         db  0x00 ; '.'
000000000001d4c5         db  0x25 ; '%'
000000000001d4c6         db  0x00 ; '.'
000000000001d4c7         db  0x00 ; '.'
000000000001d4c8         db  0x0c ; '.'
000000000001d4c9         db  0x41 ; 'A'
000000000001d4ca         db  0xff ; '.'
000000000001d4cb         db  0xff ; '.'
000000000001d4cc         db  0x50 ; 'P'
000000000001d4cd         db  0x25 ; '%'
000000000001d4ce         db  0x00 ; '.'
000000000001d4cf         db  0x00 ; '.'
000000000001d4d0         db  0xfc ; '.'
000000000001d4d1         db  0x49 ; 'I'
000000000001d4d2         db  0xff ; '.'
000000000001d4d3         db  0xff ; '.'
000000000001d4d4         db  0x80 ; '.'
000000000001d4d5         db  0x25 ; '%'
000000000001d4d6         db  0x00 ; '.'
000000000001d4d7         db  0x00 ; '.'
000000000001d4d8         db  0x9c ; '.'
000000000001d4d9         db  0x4b ; 'K'
000000000001d4da         db  0xff ; '.'
000000000001d4db         db  0xff ; '.'
000000000001d4dc         db  0xec ; '.'
000000000001d4dd         db  0x25 ; '%'
000000000001d4de         db  0x00 ; '.'
000000000001d4df         db  0x00 ; '.'
000000000001d4e0         db  0x8c ; '.'
000000000001d4e1         db  0x54 ; 'T'
000000000001d4e2         db  0xff ; '.'
000000000001d4e3         db  0xff ; '.'
000000000001d4e4         db  0x4c ; 'L'
000000000001d4e5         db  0x26 ; '&'
000000000001d4e6         db  0x00 ; '.'
000000000001d4e7         db  0x00 ; '.'
000000000001d4e8         db  0x7c ; '|'
000000000001d4e9         db  0x56 ; 'V'
000000000001d4ea         db  0xff ; '.'
000000000001d4eb         db  0xff ; '.'
000000000001d4ec         db  0x98 ; '.'
000000000001d4ed         db  0x26 ; '&'
000000000001d4ee         db  0x00 ; '.'
000000000001d4ef         db  0x00 ; '.'
000000000001d4f0         db  0xbc ; '.'
000000000001d4f1         db  0x59 ; 'Y'
000000000001d4f2         db  0xff ; '.'
000000000001d4f3         db  0xff ; '.'
000000000001d4f4         db  0xf8 ; '.'
000000000001d4f5         db  0x26 ; '&'
000000000001d4f6         db  0x00 ; '.'
000000000001d4f7         db  0x00 ; '.'
000000000001d4f8         db  0xec ; '.'
000000000001d4f9         db  0x70 ; 'p'
000000000001d4fa         db  0xff ; '.'
000000000001d4fb         db  0xff ; '.'
000000000001d4fc         db  0x48 ; 'H'
000000000001d4fd         db  0x27 ; '''
000000000001d4fe         db  0x00 ; '.'
000000000001d4ff         db  0x00 ; '.'
000000000001d500         db  0x3c ; '<'
000000000001d501         db  0x79 ; 'y'
000000000001d502         db  0xff ; '.'
000000000001d503         db  0xff ; '.'
000000000001d504         db  0xa8 ; '.'
000000000001d505         db  0x27 ; '''
000000000001d506         db  0x00 ; '.'
000000000001d507         db  0x00 ; '.'
000000000001d508         db  0x9c ; '.'
000000000001d509         db  0x7b ; '{'
000000000001d50a         db  0xff ; '.'
000000000001d50b         db  0xff ; '.'
000000000001d50c         db  0xec ; '.'
000000000001d50d         db  0x27 ; '''
000000000001d50e         db  0x00 ; '.'
000000000001d50f         db  0x00 ; '.'
000000000001d510         db  0x9c ; '.'
000000000001d511         db  0x82 ; '.'
000000000001d512         db  0xff ; '.'
000000000001d513         db  0xff ; '.'
000000000001d514         db  0x38 ; '8'
000000000001d515         db  0x28 ; '('
000000000001d516         db  0x00 ; '.'
000000000001d517         db  0x00 ; '.'
000000000001d518         db  0x5c ; '\'
000000000001d519         db  0x83 ; '.'
000000000001d51a         db  0xff ; '.'
000000000001d51b         db  0xff ; '.'
000000000001d51c         db  0x78 ; 'x'
000000000001d51d         db  0x28 ; '('
000000000001d51e         db  0x00 ; '.'
000000000001d51f         db  0x00 ; '.'
000000000001d520         db  0x3c ; '<'
000000000001d521         db  0x98 ; '.'
000000000001d522         db  0xff ; '.'
000000000001d523         db  0xff ; '.'
000000000001d524         db  0xd8 ; '.'
000000000001d525         db  0x28 ; '('
000000000001d526         db  0x00 ; '.'
000000000001d527         db  0x00 ; '.'
000000000001d528         db  0xcc ; '.'
000000000001d529         db  0x99 ; '.'
000000000001d52a         db  0xff ; '.'
000000000001d52b         db  0xff ; '.'
000000000001d52c         db  0x24 ; '$'
000000000001d52d         db  0x29 ; ')'
000000000001d52e         db  0x00 ; '.'
000000000001d52f         db  0x00 ; '.'
000000000001d530         db  0x4c ; 'L'
000000000001d531         db  0x9b ; '.'
000000000001d532         db  0xff ; '.'
000000000001d533         db  0xff ; '.'
000000000001d534         db  0x74 ; 't'
000000000001d535         db  0x29 ; ')'
000000000001d536         db  0x00 ; '.'
000000000001d537         db  0x00 ; '.'
000000000001d538         db  0x4c ; 'L'
000000000001d539         db  0xac ; '.'
000000000001d53a         db  0xff ; '.'
000000000001d53b         db  0xff ; '.'
000000000001d53c         db  0xc4 ; '.'
000000000001d53d         db  0x29 ; ')'
000000000001d53e         db  0x00 ; '.'
000000000001d53f         db  0x00 ; '.'
000000000001d540         db  0xbc ; '.'
000000000001d541         db  0xac ; '.'
000000000001d542         db  0xff ; '.'
000000000001d543         db  0xff ; '.'
000000000001d544         db  0xe4 ; '.'
000000000001d545         db  0x29 ; ')'
000000000001d546         db  0x00 ; '.'
000000000001d547         db  0x00 ; '.'
000000000001d548         db  0xcc ; '.'
000000000001d549         db  0xac ; '.'
000000000001d54a         db  0xff ; '.'
000000000001d54b         db  0xff ; '.'
000000000001d54c         db  0xf8 ; '.'
000000000001d54d         db  0x29 ; ')'
000000000001d54e         db  0x00 ; '.'
000000000001d54f         db  0x00 ; '.'
000000000001d550         db  0x9c ; '.'
000000000001d551         db  0xad ; '.'
000000000001d552         db  0xff ; '.'
000000000001d553         db  0xff ; '.'
000000000001d554         db  0x24 ; '$'
000000000001d555         db  0x2a ; '*'
000000000001d556         db  0x00 ; '.'
000000000001d557         db  0x00 ; '.'
000000000001d558         db  0x1c ; '.'
000000000001d559         db  0xb2 ; '.'
000000000001d55a         db  0xff ; '.'
000000000001d55b         db  0xff ; '.'
000000000001d55c         db  0x84 ; '.'
000000000001d55d         db  0x2a ; '*'
000000000001d55e         db  0x00 ; '.'
000000000001d55f         db  0x00 ; '.'
000000000001d560         db  0x3c ; '<'
000000000001d561         db  0xb3 ; '.'
000000000001d562         db  0xff ; '.'
000000000001d563         db  0xff ; '.'
000000000001d564         db  0xdc ; '.'
000000000001d565         db  0x2a ; '*'
000000000001d566         db  0x00 ; '.'
000000000001d567         db  0x00 ; '.'
000000000001d568         db  0x4c ; 'L'
000000000001d569         db  0xb4 ; '.'
000000000001d56a         db  0xff ; '.'
000000000001d56b         db  0xff ; '.'
000000000001d56c         db  0x28 ; '('
000000000001d56d         db  0x2b ; '+'
000000000001d56e         db  0x00 ; '.'
000000000001d56f         db  0x00 ; '.'
000000000001d570         db  0xdc ; '.'
000000000001d571         db  0xb4 ; '.'
000000000001d572         db  0xff ; '.'
000000000001d573         db  0xff ; '.'
000000000001d574         db  0x64 ; 'd'
000000000001d575         db  0x2b ; '+'
000000000001d576         db  0x00 ; '.'
000000000001d577         db  0x00 ; '.'
000000000001d578         db  0x2c ; ','
000000000001d579         db  0xb5 ; '.'
000000000001d57a         db  0xff ; '.'
000000000001d57b         db  0xff ; '.'
000000000001d57c         db  0x80 ; '.'
000000000001d57d         db  0x2b ; '+'
000000000001d57e         db  0x00 ; '.'
000000000001d57f         db  0x00 ; '.'
000000000001d580         db  0xcc ; '.'
000000000001d581         db  0xb5 ; '.'
000000000001d582         db  0xff ; '.'
000000000001d583         db  0xff ; '.'
000000000001d584         db  0xdc ; '.'
000000000001d585         db  0x2b ; '+'
000000000001d586         db  0x00 ; '.'
000000000001d587         db  0x00 ; '.'
000000000001d588         db  0xec ; '.'
000000000001d589         db  0xb5 ; '.'
000000000001d58a         db  0xff ; '.'
000000000001d58b         db  0xff ; '.'
000000000001d58c         db  0xfc ; '.'
000000000001d58d         db  0x2b ; '+'
000000000001d58e         db  0x00 ; '.'
000000000001d58f         db  0x00 ; '.'
000000000001d590         db  0x0c ; '.'
000000000001d591         db  0xb6 ; '.'
000000000001d592         db  0xff ; '.'
000000000001d593         db  0xff ; '.'
000000000001d594         db  0x1c ; '.'
000000000001d595         db  0x2c ; ','
000000000001d596         db  0x00 ; '.'
000000000001d597         db  0x00 ; '.'
000000000001d598         db  0x2c ; ','
000000000001d599         db  0xb6 ; '.'
000000000001d59a         db  0xff ; '.'
000000000001d59b         db  0xff ; '.'
000000000001d59c         db  0x40 ; '@'
000000000001d59d         db  0x2c ; ','
000000000001d59e         db  0x00 ; '.'
000000000001d59f         db  0x00 ; '.'
000000000001d5a0         db  0x4c ; 'L'
000000000001d5a1         db  0xb6 ; '.'
000000000001d5a2         db  0xff ; '.'
000000000001d5a3         db  0xff ; '.'
000000000001d5a4         db  0x64 ; 'd'
000000000001d5a5         db  0x2c ; ','
000000000001d5a6         db  0x00 ; '.'
000000000001d5a7         db  0x00 ; '.'
000000000001d5a8         db  0x9c ; '.'
000000000001d5a9         db  0xb6 ; '.'
000000000001d5aa         db  0xff ; '.'
000000000001d5ab         db  0xff ; '.'
000000000001d5ac         db  0x7c ; '|'
000000000001d5ad         db  0x2c ; ','
000000000001d5ae         db  0x00 ; '.'
000000000001d5af         db  0x00 ; '.'
000000000001d5b0         db  0xec ; '.'
000000000001d5b1         db  0xb6 ; '.'
000000000001d5b2         db  0xff ; '.'
000000000001d5b3         db  0xff ; '.'
000000000001d5b4         db  0x94 ; '.'
000000000001d5b5         db  0x2c ; ','
000000000001d5b6         db  0x00 ; '.'
000000000001d5b7         db  0x00 ; '.'
000000000001d5b8         db  0x6c ; 'l'
000000000001d5b9         db  0xb7 ; '.'
000000000001d5ba         db  0xff ; '.'
000000000001d5bb         db  0xff ; '.'
000000000001d5bc         db  0xe4 ; '.'
000000000001d5bd         db  0x2c ; ','
000000000001d5be         db  0x00 ; '.'
000000000001d5bf         db  0x00 ; '.'
000000000001d5c0         db  0xcc ; '.'
000000000001d5c1         db  0xb7 ; '.'
000000000001d5c2         db  0xff ; '.'
000000000001d5c3         db  0xff ; '.'
000000000001d5c4         db  0x04 ; '.'
000000000001d5c5         db  0x2d ; '-'
000000000001d5c6         db  0x00 ; '.'
000000000001d5c7         db  0x00 ; '.'
000000000001d5c8         db  0x0c ; '.'
000000000001d5c9         db  0xb8 ; '.'
000000000001d5ca         db  0xff ; '.'
000000000001d5cb         db  0xff ; '.'
000000000001d5cc         db  0x24 ; '$'
000000000001d5cd         db  0x2d ; '-'
000000000001d5ce         db  0x00 ; '.'
000000000001d5cf         db  0x00 ; '.'
000000000001d5d0         db  0x3c ; '<'
000000000001d5d1         db  0xb8 ; '.'
000000000001d5d2         db  0xff ; '.'
000000000001d5d3         db  0xff ; '.'
000000000001d5d4         db  0x44 ; 'D'
000000000001d5d5         db  0x2d ; '-'
000000000001d5d6         db  0x00 ; '.'
000000000001d5d7         db  0x00 ; '.'
000000000001d5d8         db  0x9c ; '.'
000000000001d5d9         db  0xb8 ; '.'
000000000001d5da         db  0xff ; '.'
000000000001d5db         db  0xff ; '.'
000000000001d5dc         db  0x70 ; 'p'
000000000001d5dd         db  0x2d ; '-'
000000000001d5de         db  0x00 ; '.'
000000000001d5df         db  0x00 ; '.'
000000000001d5e0         db  0xbc ; '.'
000000000001d5e1         db  0xb8 ; '.'
000000000001d5e2         db  0xff ; '.'
000000000001d5e3         db  0xff ; '.'
000000000001d5e4         db  0x84 ; '.'
000000000001d5e5         db  0x2d ; '-'
000000000001d5e6         db  0x00 ; '.'
000000000001d5e7         db  0x00 ; '.'
000000000001d5e8         db  0x6c ; 'l'
000000000001d5e9         db  0xba ; '.'
000000000001d5ea         db  0xff ; '.'
000000000001d5eb         db  0xff ; '.'
000000000001d5ec         db  0xc0 ; '.'
000000000001d5ed         db  0x2d ; '-'
000000000001d5ee         db  0x00 ; '.'
000000000001d5ef         db  0x00 ; '.'
000000000001d5f0         db  0xec ; '.'
000000000001d5f1         db  0xc4 ; '.'
000000000001d5f2         db  0xff ; '.'
000000000001d5f3         db  0xff ; '.'
000000000001d5f4         db  0xf0 ; '.'
000000000001d5f5         db  0x2d ; '-'
000000000001d5f6         db  0x00 ; '.'
000000000001d5f7         db  0x00 ; '.'
000000000001d5f8         db  0xfc ; '.'
000000000001d5f9         db  0xd5 ; '.'
000000000001d5fa         db  0xff ; '.'
000000000001d5fb         db  0xff ; '.'
000000000001d5fc         db  0x44 ; 'D'
000000000001d5fd         db  0x2e ; '.'
000000000001d5fe         db  0x00 ; '.'
000000000001d5ff         db  0x00 ; '.'
000000000001d600         db  0xbc ; '.'
000000000001d601         db  0xd8 ; '.'
000000000001d602         db  0xff ; '.'
000000000001d603         db  0xff ; '.'
000000000001d604         db  0x94 ; '.'
000000000001d605         db  0x2e ; '.'
000000000001d606         db  0x00 ; '.'
000000000001d607         db  0x00 ; '.'
000000000001d608         db  0x0c ; '.'
000000000001d609         db  0xdb ; '.'
000000000001d60a         db  0xff ; '.'
000000000001d60b         db  0xff ; '.'
000000000001d60c         db  0xe4 ; '.'
000000000001d60d         db  0x2e ; '.'
000000000001d60e         db  0x00 ; '.'
000000000001d60f         db  0x00 ; '.'
000000000001d610         db  0xfc ; '.'
000000000001d611         db  0xdb ; '.'
000000000001d612         db  0xff ; '.'
000000000001d613         db  0xff ; '.'
000000000001d614         db  0x34 ; '4'
000000000001d615         db  0x2f ; '/'
000000000001d616         db  0x00 ; '.'
000000000001d617         db  0x00 ; '.'
000000000001d618         db  0x3c ; '<'
000000000001d619         db  0xdc ; '.'
000000000001d61a         db  0xff ; '.'
000000000001d61b         db  0xff ; '.'
000000000001d61c         db  0x4c ; 'L'
000000000001d61d         db  0x2f ; '/'
000000000001d61e         db  0x00 ; '.'
000000000001d61f         db  0x00 ; '.'
000000000001d620         db  0x6c ; 'l'
000000000001d621         db  0xdc ; '.'
000000000001d622         db  0xff ; '.'
000000000001d623         db  0xff ; '.'
000000000001d624         db  0x64 ; 'd'
000000000001d625         db  0x2f ; '/'
000000000001d626         db  0x00 ; '.'
000000000001d627         db  0x00 ; '.'
000000000001d628         db  0x9c ; '.'
000000000001d629         db  0xde ; '.'
000000000001d62a         db  0xff ; '.'
000000000001d62b         db  0xff ; '.'
000000000001d62c         db  0xac ; '.'
000000000001d62d         db  0x2f ; '/'
000000000001d62e         db  0x00 ; '.'
000000000001d62f         db  0x00 ; '.'
000000000001d630         db  0x0c ; '.'
000000000001d631         db  0xdf ; '.'
000000000001d632         db  0xff ; '.'
000000000001d633         db  0xff ; '.'
000000000001d634         db  0xf4 ; '.'
000000000001d635         db  0x2f ; '/'
000000000001d636         db  0x00 ; '.'
000000000001d637         db  0x00 ; '.'
000000000001d638         db  0x1c ; '.'
000000000001d639         db  0xdf ; '.'
000000000001d63a         db  0xff ; '.'
000000000001d63b         db  0xff ; '.'
000000000001d63c         db  0x0c ; '.'
000000000001d63d         db  0x30 ; '0'
000000000001d63e         db  0x00 ; '.'
000000000001d63f         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0x1d640; 0x1ffd8[ (10648 bytes)
        ; File offset : [120384; 131032[ (10648 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000001d640         dd         0x00000014                                  ; Length of the record
000000000001d644         dd         0x00000000                                  ; CIE ID
000000000001d648         db         0x01                                        ; Version
000000000001d649         db         "zR", 0                                     ; Augmentation String
000000000001d64c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000001d64d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000001d64e         db         0x10                                        ; Return address register
000000000001d64f         db         0x01                                        ; Augmentation data length
000000000001d650         db         0x1b                                        ; FDE encoding
000000000001d651         db  0x0c ; '.'
000000000001d652         db  0x07 ; '.'
000000000001d653         db  0x08 ; '.'
000000000001d654         db  0x90 ; '.'
000000000001d655         db  0x01 ; '.'
000000000001d656         db  0x07 ; '.'
000000000001d657         db  0x10 ; '.'
000000000001d658         dd         0x00000014                                  ; Length of the record
000000000001d65c         dd         0x0000001c                                  ; FDE: parent CIE at 0x1d640 (FDE encoding = 0x1B)
000000000001d660         db         0xe0, 0x71, 0xfe, 0xff                      ; begin 0x4840
000000000001d664         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x486b)
000000000001d668         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d669         align      16
000000000001d670         dd         0x00000014                                  ; Length of the record
000000000001d674         dd         0x00000000                                  ; CIE ID
000000000001d678         db         0x01                                        ; Version
000000000001d679         db         "zR", 0                                     ; Augmentation String
000000000001d67c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000001d67d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000001d67e         db         0x10                                        ; Return address register
000000000001d67f         db         0x01                                        ; Augmentation data length
000000000001d680         db         0x1b                                        ; FDE encoding
000000000001d681         db  0x0c ; '.'
000000000001d682         db  0x07 ; '.'
000000000001d683         db  0x08 ; '.'
000000000001d684         db  0x90 ; '.'
000000000001d685         db  0x01 ; '.'
000000000001d686         db  0x00 ; '.'
000000000001d687         db  0x00 ; '.'
000000000001d688         dd         0x00000024                                  ; Length of the record
000000000001d68c         dd         0x0000001c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d690         db         0xb0, 0x45, 0xfe, 0xff                      ; begin 0x1c40
000000000001d694         db         0xd0, 0x04, 2 dup (0x00)                    ; length 0x4d0 (end at 0x2110)
000000000001d698         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d699         db  0x0e ; '.'
000000000001d69a         db  0x10 ; '.'
000000000001d69b         db  0x46 ; 'F'
000000000001d69c         db  0x0e ; '.'
000000000001d69d         db  0x18 ; '.'
000000000001d69e         db  0x4a ; 'J'
000000000001d69f         db  0x0f ; '.'
000000000001d6a0         db  0x0b ; '.'
000000000001d6a1         db  0x77 ; 'w'
000000000001d6a2         db  0x08 ; '.'
000000000001d6a3         db  0x80 ; '.'
000000000001d6a4         db  0x00 ; '.'
000000000001d6a5         db  0x3f ; '?'
000000000001d6a6         db  0x1a ; '.'
000000000001d6a7         db  0x3b ; ';'
000000000001d6a8         db  0x2a ; '*'
000000000001d6a9         db  0x33 ; '3'
000000000001d6aa         db  0x24 ; '$'
000000000001d6ab         db  0x22 ; '"'
000000000001d6ac         db  0x00 ; '.'
000000000001d6ad         db  0x00 ; '.'
000000000001d6ae         db  0x00 ; '.'
000000000001d6af         db  0x00 ; '.'
000000000001d6b0         dd         0x00000014                                  ; Length of the record
000000000001d6b4         dd         0x00000044                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d6b8         db         0x58, 0x4a, 0xfe, 0xff                      ; begin 0x2110
000000000001d6bc         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x2118)
000000000001d6c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d6c1         align      8
000000000001d6c8         dd         0x00000010                                  ; Length of the record
000000000001d6cc         dd         0x0000005c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d6d0         db         0x80, 0x72, 0xfe, 0xff                      ; begin 0x4950
000000000001d6d4         db         0xb0, 3 dup (0x00)                          ; length 0xb0 (end at 0x4a00)
000000000001d6d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d6d9         align      4
000000000001d6dc         dd         0x00000014                                  ; Length of the record
000000000001d6e0         dd         0x00000070                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d6e4         db         0x1c, 0x73, 0xfe, 0xff                      ; begin 0x4a00
000000000001d6e8         db         0x2d, 3 dup (0x00)                          ; length 0x2d (end at 0x4a2d)
000000000001d6ec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d6ed         db  0x41 ; 'A'
000000000001d6ee         db  0x0e ; '.'
000000000001d6ef         db  0x10 ; '.'
000000000001d6f0         db  0x83 ; '.'
000000000001d6f1         db  0x02 ; '.'
000000000001d6f2         db  0x00 ; '.'
000000000001d6f3         db  0x00 ; '.'
000000000001d6f4         dd         0x0000002c                                  ; Length of the record
000000000001d6f8         dd         0x00000088                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d6fc         db         0x34, 0x73, 0xfe, 0xff                      ; begin 0x4a30
000000000001d700         db         0x7a, 0x02, 2 dup (0x00)                    ; length 0x27a (end at 0x4caa)
000000000001d704         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d705         db  0x42 ; 'B'
000000000001d706         db  0x0e ; '.'
000000000001d707         db  0x10 ; '.'
000000000001d708         db  0x8c ; '.'
000000000001d709         db  0x02 ; '.'
000000000001d70a         db  0x41 ; 'A'
000000000001d70b         db  0x0e ; '.'
000000000001d70c         db  0x18 ; '.'
000000000001d70d         db  0x86 ; '.'
000000000001d70e         db  0x03 ; '.'
000000000001d70f         db  0x41 ; 'A'
000000000001d710         db  0x0e ; '.'
000000000001d711         db  0x20 ; ' '
000000000001d712         db  0x83 ; '.'
000000000001d713         db  0x04 ; '.'
000000000001d714         db  0x02 ; '.'
000000000001d715         db  0x42 ; 'B'
000000000001d716         db  0x0a ; '.'
000000000001d717         db  0x0e ; '.'
000000000001d718         db  0x18 ; '.'
000000000001d719         db  0x41 ; 'A'
000000000001d71a         db  0x0e ; '.'
000000000001d71b         db  0x10 ; '.'
000000000001d71c         db  0x42 ; 'B'
000000000001d71d         db  0x0e ; '.'
000000000001d71e         db  0x08 ; '.'
000000000001d71f         db  0x47 ; 'G'
000000000001d720         db  0x0b ; '.'
000000000001d721         db  0x00 ; '.'
000000000001d722         db  0x00 ; '.'
000000000001d723         db  0x00 ; '.'
000000000001d724         dd         0x0000002c                                  ; Length of the record
000000000001d728         dd         0x000000b8                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d72c         db         0x84, 0x75, 0xfe, 0xff                      ; begin 0x4cb0
000000000001d730         db         0x9d, 3 dup (0x00)                          ; length 0x9d (end at 0x4d4d)
000000000001d734         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d735         db  0x4d ; 'M'
000000000001d736         db  0x0e ; '.'
000000000001d737         db  0x10 ; '.'
000000000001d738         db  0x8c ; '.'
000000000001d739         db  0x02 ; '.'
000000000001d73a         db  0x41 ; 'A'
000000000001d73b         db  0x0e ; '.'
000000000001d73c         db  0x18 ; '.'
000000000001d73d         db  0x86 ; '.'
000000000001d73e         db  0x03 ; '.'
000000000001d73f         db  0x41 ; 'A'
000000000001d740         db  0x0e ; '.'
000000000001d741         db  0x20 ; ' '
000000000001d742         db  0x83 ; '.'
000000000001d743         db  0x04 ; '.'
000000000001d744         db  0x02 ; '.'
000000000001d745         db  0x4b ; 'K'
000000000001d746         db  0x0a ; '.'
000000000001d747         db  0x0e ; '.'
000000000001d748         db  0x18 ; '.'
000000000001d749         db  0x44 ; 'D'
000000000001d74a         db  0x0e ; '.'
000000000001d74b         db  0x10 ; '.'
000000000001d74c         db  0x42 ; 'B'
000000000001d74d         db  0x0e ; '.'
000000000001d74e         db  0x08 ; '.'
000000000001d74f         db  0x45 ; 'E'
000000000001d750         db  0x0b ; '.'
000000000001d751         db  0x00 ; '.'
000000000001d752         db  0x00 ; '.'
000000000001d753         db  0x00 ; '.'
000000000001d754         dd         0x00000028                                  ; Length of the record
000000000001d758         dd         0x000000e8                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d75c         db         0xf4, 0x75, 0xfe, 0xff                      ; begin 0x4d50
000000000001d760         db         0xd3, 3 dup (0x00)                          ; length 0xd3 (end at 0x4e23)
000000000001d764         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d765         db  0x41 ; 'A'
000000000001d766         db  0x0e ; '.'
000000000001d767         db  0x10 ; '.'
000000000001d768         db  0x86 ; '.'
000000000001d769         db  0x02 ; '.'
000000000001d76a         db  0x41 ; 'A'
000000000001d76b         db  0x0e ; '.'
000000000001d76c         db  0x18 ; '.'
000000000001d76d         db  0x83 ; '.'
000000000001d76e         db  0x03 ; '.'
000000000001d76f         db  0x47 ; 'G'
000000000001d770         db  0x0e ; '.'
000000000001d771         db  0x30 ; '0'
000000000001d772         db  0x02 ; '.'
000000000001d773         db  0x55 ; 'U'
000000000001d774         db  0x0a ; '.'
000000000001d775         db  0x0e ; '.'
000000000001d776         db  0x18 ; '.'
000000000001d777         db  0x41 ; 'A'
000000000001d778         db  0x0e ; '.'
000000000001d779         db  0x10 ; '.'
000000000001d77a         db  0x41 ; 'A'
000000000001d77b         db  0x0e ; '.'
000000000001d77c         db  0x08 ; '.'
000000000001d77d         db  0x48 ; 'H'
000000000001d77e         db  0x0b ; '.'
000000000001d77f         db  0x00 ; '.'
000000000001d780         dd         0x00000038                                  ; Length of the record
000000000001d784         dd         0x00000114                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d788         db         0xa8, 0x76, 0xfe, 0xff                      ; begin 0x4e30
000000000001d78c         db         0x17, 0x01, 2 dup (0x00)                    ; length 0x117 (end at 0x4f47)
000000000001d790         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d791         db  0x42 ; 'B'
000000000001d792         db  0x0e ; '.'
000000000001d793         db  0x10 ; '.'
000000000001d794         db  0x8d ; '.'
000000000001d795         db  0x02 ; '.'
000000000001d796         db  0x42 ; 'B'
000000000001d797         db  0x0e ; '.'
000000000001d798         db  0x18 ; '.'
000000000001d799         db  0x8c ; '.'
000000000001d79a         db  0x03 ; '.'
000000000001d79b         db  0x44 ; 'D'
000000000001d79c         db  0x0e ; '.'
000000000001d79d         db  0x20 ; ' '
000000000001d79e         db  0x86 ; '.'
000000000001d79f         db  0x04 ; '.'
000000000001d7a0         db  0x41 ; 'A'
000000000001d7a1         db  0x0e ; '.'
000000000001d7a2         db  0x28 ; '('
000000000001d7a3         db  0x83 ; '.'
000000000001d7a4         db  0x05 ; '.'
000000000001d7a5         db  0x49 ; 'I'
000000000001d7a6         db  0x0e ; '.'
000000000001d7a7         db  0x50 ; 'P'
000000000001d7a8         db  0x02 ; '.'
000000000001d7a9         db  0x96 ; '.'
000000000001d7aa         db  0x0a ; '.'
000000000001d7ab         db  0x0e ; '.'
000000000001d7ac         db  0x28 ; '('
000000000001d7ad         db  0x41 ; 'A'
000000000001d7ae         db  0x0e ; '.'
000000000001d7af         db  0x20 ; ' '
000000000001d7b0         db  0x41 ; 'A'
000000000001d7b1         db  0x0e ; '.'
000000000001d7b2         db  0x18 ; '.'
000000000001d7b3         db  0x42 ; 'B'
000000000001d7b4         db  0x0e ; '.'
000000000001d7b5         db  0x10 ; '.'
000000000001d7b6         db  0x42 ; 'B'
000000000001d7b7         db  0x0e ; '.'
000000000001d7b8         db  0x08 ; '.'
000000000001d7b9         db  0x42 ; 'B'
000000000001d7ba         db  0x0b ; '.'
000000000001d7bb         db  0x00 ; '.'
000000000001d7bc         dd         0x0000001c                                  ; Length of the record
000000000001d7c0         dd         0x00000150                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d7c4         db         0x8c, 0x77, 0xfe, 0xff                      ; begin 0x4f50
000000000001d7c8         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x4f9a)
000000000001d7cc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d7cd         db  0x46 ; 'F'
000000000001d7ce         db  0x0e ; '.'
000000000001d7cf         db  0x10 ; '.'
000000000001d7d0         db  0x83 ; '.'
000000000001d7d1         db  0x02 ; '.'
000000000001d7d2         db  0x6d ; 'm'
000000000001d7d3         db  0x0a ; '.'
000000000001d7d4         db  0x0e ; '.'
000000000001d7d5         db  0x08 ; '.'
000000000001d7d6         db  0x45 ; 'E'
000000000001d7d7         db  0x0b ; '.'
000000000001d7d8         db  0x50 ; 'P'
000000000001d7d9         db  0x0e ; '.'
000000000001d7da         db  0x08 ; '.'
000000000001d7db         db  0xc3 ; '.'
000000000001d7dc         dd         0x0000007c                                  ; Length of the record
000000000001d7e0         dd         0x00000170                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d7e4         db         0xbc, 0x77, 0xfe, 0xff                      ; begin 0x4fa0
000000000001d7e8         db         0x72, 0x04, 2 dup (0x00)                    ; length 0x472 (end at 0x5412)
000000000001d7ec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d7ed         db  0x4b ; 'K'
000000000001d7ee         db  0x0e ; '.'
000000000001d7ef         db  0x10 ; '.'
000000000001d7f0         db  0x8f ; '.'
000000000001d7f1         db  0x02 ; '.'
000000000001d7f2         db  0x42 ; 'B'
000000000001d7f3         db  0x0e ; '.'
000000000001d7f4         db  0x18 ; '.'
000000000001d7f5         db  0x8e ; '.'
000000000001d7f6         db  0x03 ; '.'
000000000001d7f7         db  0x49 ; 'I'
000000000001d7f8         db  0x0e ; '.'
000000000001d7f9         db  0x20 ; ' '
000000000001d7fa         db  0x8d ; '.'
000000000001d7fb         db  0x04 ; '.'
000000000001d7fc         db  0x42 ; 'B'
000000000001d7fd         db  0x0e ; '.'
000000000001d7fe         db  0x28 ; '('
000000000001d7ff         db  0x8c ; '.'
000000000001d800         db  0x05 ; '.'
000000000001d801         db  0x48 ; 'H'
000000000001d802         db  0x0e ; '.'
000000000001d803         db  0x30 ; '0'
000000000001d804         db  0x86 ; '.'
000000000001d805         db  0x06 ; '.'
000000000001d806         db  0x41 ; 'A'
000000000001d807         db  0x0e ; '.'
000000000001d808         db  0x38 ; '8'
000000000001d809         db  0x83 ; '.'
000000000001d80a         db  0x07 ; '.'
000000000001d80b         db  0x51 ; 'Q'
000000000001d80c         db  0x0e ; '.'
000000000001d80d         db  0x50 ; 'P'
000000000001d80e         db  0x02 ; '.'
000000000001d80f         db  0x98 ; '.'
000000000001d810         db  0x0a ; '.'
000000000001d811         db  0x0e ; '.'
000000000001d812         db  0x38 ; '8'
000000000001d813         db  0x41 ; 'A'
000000000001d814         db  0x0e ; '.'
000000000001d815         db  0x30 ; '0'
000000000001d816         db  0x41 ; 'A'
000000000001d817         db  0x0e ; '.'
000000000001d818         db  0x28 ; '('
000000000001d819         db  0x42 ; 'B'
000000000001d81a         db  0x0e ; '.'
000000000001d81b         db  0x20 ; ' '
000000000001d81c         db  0x42 ; 'B'
000000000001d81d         db  0x0e ; '.'
000000000001d81e         db  0x18 ; '.'
000000000001d81f         db  0x42 ; 'B'
000000000001d820         db  0x0e ; '.'
000000000001d821         db  0x10 ; '.'
000000000001d822         db  0x42 ; 'B'
000000000001d823         db  0x0e ; '.'
000000000001d824         db  0x08 ; '.'
000000000001d825         db  0x44 ; 'D'
000000000001d826         db  0x0b ; '.'
000000000001d827         db  0x02 ; '.'
000000000001d828         db  0x59 ; 'Y'
000000000001d829         db  0x0a ; '.'
000000000001d82a         db  0x0e ; '.'
000000000001d82b         db  0x38 ; '8'
000000000001d82c         db  0x41 ; 'A'
000000000001d82d         db  0x0e ; '.'
000000000001d82e         db  0x30 ; '0'
000000000001d82f         db  0x41 ; 'A'
000000000001d830         db  0x0e ; '.'
000000000001d831         db  0x28 ; '('
000000000001d832         db  0x42 ; 'B'
000000000001d833         db  0x0e ; '.'
000000000001d834         db  0x20 ; ' '
000000000001d835         db  0x42 ; 'B'
000000000001d836         db  0x0e ; '.'
000000000001d837         db  0x18 ; '.'
000000000001d838         db  0x42 ; 'B'
000000000001d839         db  0x0e ; '.'
000000000001d83a         db  0x10 ; '.'
000000000001d83b         db  0x42 ; 'B'
000000000001d83c         db  0x0e ; '.'
000000000001d83d         db  0x08 ; '.'
000000000001d83e         db  0x45 ; 'E'
000000000001d83f         db  0x0b ; '.'
000000000001d840         db  0x02 ; '.'
000000000001d841         db  0xe0 ; '.'
000000000001d842         db  0x0e ; '.'
000000000001d843         db  0x08 ; '.'
000000000001d844         db  0xc3 ; '.'
000000000001d845         db  0xc6 ; '.'
000000000001d846         db  0xcc ; '.'
000000000001d847         db  0xcd ; '.'
000000000001d848         db  0xce ; '.'
000000000001d849         db  0xcf ; '.'
000000000001d84a         db  0x42 ; 'B'
000000000001d84b         db  0x0e ; '.'
000000000001d84c         db  0x50 ; 'P'
000000000001d84d         db  0x83 ; '.'
000000000001d84e         db  0x07 ; '.'
000000000001d84f         db  0x86 ; '.'
000000000001d850         db  0x06 ; '.'
000000000001d851         db  0x8c ; '.'
000000000001d852         db  0x05 ; '.'
000000000001d853         db  0x8d ; '.'
000000000001d854         db  0x04 ; '.'
000000000001d855         db  0x8e ; '.'
000000000001d856         db  0x03 ; '.'
000000000001d857         db  0x8f ; '.'
000000000001d858         db  0x02 ; '.'
000000000001d859         db  0x00 ; '.'
000000000001d85a         db  0x00 ; '.'
000000000001d85b         db  0x00 ; '.'
000000000001d85c         dd         0x00000020                                  ; Length of the record
000000000001d860         dd         0x000001f0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d864         db         0xbc, 0x7b, 0xfe, 0xff                      ; begin 0x5420
000000000001d868         db         0x2f, 3 dup (0x00)                          ; length 0x2f (end at 0x544f)
000000000001d86c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d86d         db  0x41 ; 'A'
000000000001d86e         db  0x0e ; '.'
000000000001d86f         db  0x10 ; '.'
000000000001d870         db  0x86 ; '.'
000000000001d871         db  0x02 ; '.'
000000000001d872         db  0x41 ; 'A'
000000000001d873         db  0x0e ; '.'
000000000001d874         db  0x18 ; '.'
000000000001d875         db  0x83 ; '.'
000000000001d876         db  0x03 ; '.'
000000000001d877         db  0x5f ; '_'
000000000001d878         db  0x0a ; '.'
000000000001d879         db  0x0e ; '.'
000000000001d87a         db  0x10 ; '.'
000000000001d87b         db  0x41 ; 'A'
000000000001d87c         db  0x0e ; '.'
000000000001d87d         db  0x08 ; '.'
000000000001d87e         db  0x46 ; 'F'
000000000001d87f         db  0x0b ; '.'
000000000001d880         dd         0x00000050                                  ; Length of the record
000000000001d884         dd         0x00000214                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d888         db         0xc8, 0x7b, 0xfe, 0xff                      ; begin 0x5450
000000000001d88c         db         0x81, 3 dup (0x00)                          ; length 0x81 (end at 0x54d1)
000000000001d890         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d891         db  0x48 ; 'H'
000000000001d892         db  0x0e ; '.'
000000000001d893         db  0x10 ; '.'
000000000001d894         db  0x8e ; '.'
000000000001d895         db  0x02 ; '.'
000000000001d896         db  0x45 ; 'E'
000000000001d897         db  0x0e ; '.'
000000000001d898         db  0x18 ; '.'
000000000001d899         db  0x8d ; '.'
000000000001d89a         db  0x03 ; '.'
000000000001d89b         db  0x45 ; 'E'
000000000001d89c         db  0x0e ; '.'
000000000001d89d         db  0x20 ; ' '
000000000001d89e         db  0x8c ; '.'
000000000001d89f         db  0x04 ; '.'
000000000001d8a0         db  0x44 ; 'D'
000000000001d8a1         db  0x0e ; '.'
000000000001d8a2         db  0x28 ; '('
000000000001d8a3         db  0x86 ; '.'
000000000001d8a4         db  0x05 ; '.'
000000000001d8a5         db  0x44 ; 'D'
000000000001d8a6         db  0x0e ; '.'
000000000001d8a7         db  0x30 ; '0'
000000000001d8a8         db  0x83 ; '.'
000000000001d8a9         db  0x06 ; '.'
000000000001d8aa         db  0x02 ; '.'
000000000001d8ab         db  0x42 ; 'B'
000000000001d8ac         db  0x0a ; '.'
000000000001d8ad         db  0x0e ; '.'
000000000001d8ae         db  0x28 ; '('
000000000001d8af         db  0x43 ; 'C'
000000000001d8b0         db  0x0e ; '.'
000000000001d8b1         db  0x20 ; ' '
000000000001d8b2         db  0x42 ; 'B'
000000000001d8b3         db  0x0e ; '.'
000000000001d8b4         db  0x18 ; '.'
000000000001d8b5         db  0x42 ; 'B'
000000000001d8b6         db  0x0e ; '.'
000000000001d8b7         db  0x10 ; '.'
000000000001d8b8         db  0x42 ; 'B'
000000000001d8b9         db  0x0e ; '.'
000000000001d8ba         db  0x08 ; '.'
000000000001d8bb         db  0x4b ; 'K'
000000000001d8bc         db  0x0b ; '.'
000000000001d8bd         db  0x41 ; 'A'
000000000001d8be         db  0x0e ; '.'
000000000001d8bf         db  0x28 ; '('
000000000001d8c0         db  0x46 ; 'F'
000000000001d8c1         db  0x0e ; '.'
000000000001d8c2         db  0x20 ; ' '
000000000001d8c3         db  0x42 ; 'B'
000000000001d8c4         db  0x0e ; '.'
000000000001d8c5         db  0x18 ; '.'
000000000001d8c6         db  0x42 ; 'B'
000000000001d8c7         db  0x0e ; '.'
000000000001d8c8         db  0x10 ; '.'
000000000001d8c9         db  0x42 ; 'B'
000000000001d8ca         db  0x0e ; '.'
000000000001d8cb         db  0x08 ; '.'
000000000001d8cc         db  0x41 ; 'A'
000000000001d8cd         db  0xc3 ; '.'
000000000001d8ce         db  0xc6 ; '.'
000000000001d8cf         db  0xcc ; '.'


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d8d0:
000000000001d8d0         int        0xce
000000000001d8d2         add        byte [rax], al
000000000001d8d4         sub        byte [rax], al                              ; Length of the record
000000000001d8d6         add        byte [rax], al
                        ; endp
000000000001d8d8         db  0x68 ; 'h'                                         ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d8d9         db  0x02 ; '.'
000000000001d8da         db  0x00 ; '.'
000000000001d8db         db  0x00 ; '.'
000000000001d8dc         db         0x04, 0x7c, 0xfe, 0xff                      ; begin 0x54e0
000000000001d8e0         db         0x4a, 0x04, 2 dup (0x00)                    ; length 0x44a (end at 0x592a)
000000000001d8e4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d8e5         db  0x42 ; 'B'
000000000001d8e6         db  0x0e ; '.'
000000000001d8e7         db  0x10 ; '.'
000000000001d8e8         db  0x8d ; '.'
000000000001d8e9         db  0x02 ; '.'
000000000001d8ea         db  0x42 ; 'B'
000000000001d8eb         db  0x0e ; '.'
000000000001d8ec         db  0x18 ; '.'
000000000001d8ed         db  0x8c ; '.'
000000000001d8ee         db  0x03 ; '.'
000000000001d8ef         db  0x46 ; 'F'
000000000001d8f0         db  0x0e ; '.'
000000000001d8f1         db  0x20 ; ' '
000000000001d8f2         db  0x86 ; '.'
000000000001d8f3         db  0x04 ; '.'
000000000001d8f4         db  0x41 ; 'A'
000000000001d8f5         db  0x0e ; '.'
000000000001d8f6         db  0x28 ; '('
000000000001d8f7         db  0x83 ; '.'
000000000001d8f8         db  0x05 ; '.'
000000000001d8f9         db  0x49 ; 'I'
000000000001d8fa         db  0x0e ; '.'
000000000001d8fb         db  0xb0 ; '.'
000000000001d8fc         db  0x01 ; '.'
000000000001d8fd         db  0x00 ; '.'
000000000001d8fe         db  0x00 ; '.'
000000000001d8ff         db  0x00 ; '.'
000000000001d900         dd         0x0000004c                                  ; Length of the record
000000000001d904         dd         0x00000294                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d908         db         0x88, 0x48, 0xfe, 0xff                      ; begin 0x2190
000000000001d90c         db         0xaa, 0x26, 2 dup (0x00)                    ; length 0x26aa (end at 0x483a)
000000000001d910         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d911         db  0x42 ; 'B'
000000000001d912         db  0x0e ; '.'
000000000001d913         db  0x10 ; '.'
000000000001d914         db  0x8f ; '.'
000000000001d915         db  0x02 ; '.'
000000000001d916         db  0x42 ; 'B'
000000000001d917         db  0x0e ; '.'
000000000001d918         db  0x18 ; '.'
000000000001d919         db  0x8e ; '.'
000000000001d91a         db  0x03 ; '.'
000000000001d91b         db  0x49 ; 'I'
000000000001d91c         db  0x0e ; '.'
000000000001d91d         db  0x20 ; ' '
000000000001d91e         db  0x8d ; '.'
000000000001d91f         db  0x04 ; '.'
000000000001d920         db  0x42 ; 'B'
000000000001d921         db  0x0e ; '.'
000000000001d922         db  0x28 ; '('
000000000001d923         db  0x8c ; '.'
000000000001d924         db  0x05 ; '.'
000000000001d925         db  0x48 ; 'H'
000000000001d926         db  0x0e ; '.'
000000000001d927         db  0x30 ; '0'
000000000001d928         db  0x86 ; '.'
000000000001d929         db  0x06 ; '.'
000000000001d92a         db  0x41 ; 'A'
000000000001d92b         db  0x0e ; '.'
000000000001d92c         db  0x38 ; '8'
000000000001d92d         db  0x83 ; '.'
000000000001d92e         db  0x07 ; '.'
000000000001d92f         db  0x53 ; 'S'
000000000001d930         db  0x0e ; '.'
000000000001d931         db  0xd0 ; '.'
000000000001d932         db  0x01 ; '.'
000000000001d933         db  0x03 ; '.'
000000000001d934         db  0x9e ; '.'
000000000001d935         db  0x1a ; '.'
000000000001d936         db  0x0a ; '.'
000000000001d937         db  0x0e ; '.'
000000000001d938         db  0x38 ; '8'
000000000001d939         db  0x41 ; 'A'
000000000001d93a         db  0x0e ; '.'
000000000001d93b         db  0x30 ; '0'
000000000001d93c         db  0x41 ; 'A'
000000000001d93d         db  0x0e ; '.'
000000000001d93e         db  0x28 ; '('
000000000001d93f         db  0x42 ; 'B'
000000000001d940         db  0x0e ; '.'
000000000001d941         db  0x20 ; ' '
000000000001d942         db  0x42 ; 'B'
000000000001d943         db  0x0e ; '.'
000000000001d944         db  0x18 ; '.'
000000000001d945         db  0x42 ; 'B'
000000000001d946         db  0x0e ; '.'
000000000001d947         db  0x10 ; '.'
000000000001d948         db  0x42 ; 'B'
000000000001d949         db  0x0e ; '.'
000000000001d94a         db  0x08 ; '.'
000000000001d94b         db  0x41 ; 'A'
000000000001d94c         db  0x0b ; '.'
000000000001d94d         db  0x00 ; '.'
000000000001d94e         db  0x00 ; '.'
000000000001d94f         db  0x00 ; '.'
000000000001d950         dd         0x00000010                                  ; Length of the record
000000000001d954         dd         0x000002e4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d958         db         0xd8, 0x7f, 0xfe, 0xff                      ; begin 0x5930
000000000001d95c         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x593a)
000000000001d960         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d961         align      4
000000000001d964         dd         0x00000048                                  ; Length of the record
000000000001d968         dd         0x000002f8                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d96c         db         0xd4, 0x7f, 0xfe, 0xff                      ; begin 0x5940
000000000001d970         db         0x16, 0x01, 2 dup (0x00)                    ; length 0x116 (end at 0x5a56)
000000000001d974         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d975         db  0x42 ; 'B'
000000000001d976         db  0x0e ; '.'
000000000001d977         db  0x10 ; '.'
000000000001d978         db  0x8f ; '.'
000000000001d979         db  0x02 ; '.'
000000000001d97a         db  0x42 ; 'B'
000000000001d97b         db  0x0e ; '.'
000000000001d97c         db  0x18 ; '.'
000000000001d97d         db  0x8e ; '.'
000000000001d97e         db  0x03 ; '.'
000000000001d97f         db  0x45 ; 'E'
000000000001d980         db  0x0e ; '.'
000000000001d981         db  0x20 ; ' '
000000000001d982         db  0x8d ; '.'
000000000001d983         db  0x04 ; '.'
000000000001d984         db  0x42 ; 'B'
000000000001d985         db  0x0e ; '.'
000000000001d986         db  0x28 ; '('
000000000001d987         db  0x8c ; '.'
000000000001d988         db  0x05 ; '.'
000000000001d989         db  0x44 ; 'D'
000000000001d98a         db  0x0e ; '.'
000000000001d98b         db  0x30 ; '0'
000000000001d98c         db  0x86 ; '.'
000000000001d98d         db  0x06 ; '.'
000000000001d98e         db  0x41 ; 'A'
000000000001d98f         db  0x0e ; '.'
000000000001d990         db  0x38 ; '8'
000000000001d991         db  0x83 ; '.'
000000000001d992         db  0x07 ; '.'
000000000001d993         db  0x47 ; 'G'
000000000001d994         db  0x0e ; '.'
000000000001d995         db  0x60 ; '`'
000000000001d996         db  0x02 ; '.'
000000000001d997         db  0xde ; '.'
000000000001d998         db  0x0a ; '.'
000000000001d999         db  0x0e ; '.'
000000000001d99a         db  0x38 ; '8'
000000000001d99b         db  0x41 ; 'A'
000000000001d99c         db  0x0e ; '.'
000000000001d99d         db  0x30 ; '0'
000000000001d99e         db  0x41 ; 'A'
000000000001d99f         db  0x0e ; '.'
000000000001d9a0         db  0x28 ; '('
000000000001d9a1         db  0x42 ; 'B'
000000000001d9a2         db  0x0e ; '.'
000000000001d9a3         db  0x20 ; ' '
000000000001d9a4         db  0x42 ; 'B'
000000000001d9a5         db  0x0e ; '.'
000000000001d9a6         db  0x18 ; '.'
000000000001d9a7         db  0x42 ; 'B'
000000000001d9a8         db  0x0e ; '.'
000000000001d9a9         db  0x10 ; '.'
000000000001d9aa         db  0x42 ; 'B'
000000000001d9ab         db  0x0e ; '.'
000000000001d9ac         db  0x08 ; '.'
000000000001d9ad         db  0x41 ; 'A'
000000000001d9ae         db  0x0b ; '.'
000000000001d9af         db  0x00 ; '.'
000000000001d9b0         dd         0x00000028                                  ; Length of the record
000000000001d9b4         dd         0x00000344                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d9b8         db         0xa8, 0x80, 0xfe, 0xff                      ; begin 0x5a60
000000000001d9bc         db         0x73, 3 dup (0x00)                          ; length 0x73 (end at 0x5ad3)
000000000001d9c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d9c1         db  0x46 ; 'F'
000000000001d9c2         db  0x0e ; '.'
000000000001d9c3         db  0x10 ; '.'
000000000001d9c4         db  0x8c ; '.'
000000000001d9c5         db  0x02 ; '.'
000000000001d9c6         db  0x46 ; 'F'
000000000001d9c7         db  0x0e ; '.'
000000000001d9c8         db  0x18 ; '.'
000000000001d9c9         db  0x86 ; '.'
000000000001d9ca         db  0x03 ; '.'
000000000001d9cb         db  0x44 ; 'D'
000000000001d9cc         db  0x0e ; '.'
000000000001d9cd         db  0x20 ; ' '
000000000001d9ce         db  0x83 ; '.'
000000000001d9cf         db  0x04 ; '.'
000000000001d9d0         db  0x7f ; '.'
000000000001d9d1         db  0x0a ; '.'
000000000001d9d2         db  0x0e ; '.'
000000000001d9d3         db  0x18 ; '.'
000000000001d9d4         db  0x41 ; 'A'
000000000001d9d5         db  0x0e ; '.'
000000000001d9d6         db  0x10 ; '.'
000000000001d9d7         db  0x42 ; 'B'
000000000001d9d8         db  0x0e ; '.'
000000000001d9d9         db  0x08 ; '.'
000000000001d9da         db  0x4e ; 'N'
000000000001d9db         db  0x0b ; '.'
000000000001d9dc         dd         0x0000005c                                  ; Length of the record
000000000001d9e0         dd         0x00000370                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001d9e4         db         0xfc, 0x80, 0xfe, 0xff                      ; begin 0x5ae0
000000000001d9e8         db         0x20, 0x01, 2 dup (0x00)                    ; length 0x120 (end at 0x5c00)
000000000001d9ec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001d9ed         db  0x42 ; 'B'
000000000001d9ee         db  0x0e ; '.'
000000000001d9ef         db  0x10 ; '.'
000000000001d9f0         db  0x8f ; '.'
000000000001d9f1         db  0x02 ; '.'
000000000001d9f2         db  0x42 ; 'B'
000000000001d9f3         db  0x0e ; '.'
000000000001d9f4         db  0x18 ; '.'
000000000001d9f5         db  0x8e ; '.'
000000000001d9f6         db  0x03 ; '.'
000000000001d9f7         db  0x45 ; 'E'
000000000001d9f8         db  0x0e ; '.'
000000000001d9f9         db  0x20 ; ' '
000000000001d9fa         db  0x8d ; '.'
000000000001d9fb         db  0x04 ; '.'
000000000001d9fc         db  0x42 ; 'B'
000000000001d9fd         db  0x0e ; '.'
000000000001d9fe         db  0x28 ; '('
000000000001d9ff         db  0x8c ; '.'
000000000001da00         db  0x05 ; '.'
000000000001da01         db  0x43 ; 'C'
000000000001da02         db  0x0e ; '.'
000000000001da03         db  0x30 ; '0'
000000000001da04         db  0x86 ; '.'
000000000001da05         db  0x06 ; '.'
000000000001da06         db  0x41 ; 'A'
000000000001da07         db  0x0e ; '.'
000000000001da08         db  0x38 ; '8'
000000000001da09         db  0x83 ; '.'
000000000001da0a         db  0x07 ; '.'
000000000001da0b         db  0x56 ; 'V'
000000000001da0c         db  0x0e ; '.'
000000000001da0d         db  0x40 ; '@'
000000000001da0e         db  0x02 ; '.'
000000000001da0f         db  0xd3 ; '.'
000000000001da10         db  0x0a ; '.'
000000000001da11         db  0x0e ; '.'
000000000001da12         db  0x38 ; '8'
000000000001da13         db  0x41 ; 'A'
000000000001da14         db  0x0e ; '.'
000000000001da15         db  0x30 ; '0'
000000000001da16         db  0x41 ; 'A'
000000000001da17         db  0x0e ; '.'
000000000001da18         db  0x28 ; '('
000000000001da19         db  0x42 ; 'B'
000000000001da1a         db  0x0e ; '.'
000000000001da1b         db  0x20 ; ' '
000000000001da1c         db  0x42 ; 'B'
000000000001da1d         db  0x0e ; '.'
000000000001da1e         db  0x18 ; '.'
000000000001da1f         db  0x42 ; 'B'
000000000001da20         db  0x0e ; '.'
000000000001da21         db  0x10 ; '.'
000000000001da22         db  0x42 ; 'B'
000000000001da23         db  0x0e ; '.'
000000000001da24         db  0x08 ; '.'
000000000001da25         db  0x46 ; 'F'
000000000001da26         db  0x0b ; '.'
000000000001da27         db  0x44 ; 'D'
000000000001da28         db  0x0e ; '.'
000000000001da29         db  0x38 ; '8'
000000000001da2a         db  0x46 ; 'F'
000000000001da2b         db  0x0e ; '.'
000000000001da2c         db  0x30 ; '0'
000000000001da2d         db  0x41 ; 'A'
000000000001da2e         db  0x0e ; '.'
000000000001da2f         db  0x28 ; '('
000000000001da30         db  0x42 ; 'B'
000000000001da31         db  0x0e ; '.'
000000000001da32         db  0x20 ; ' '
000000000001da33         db  0x42 ; 'B'
000000000001da34         db  0x0e ; '.'
000000000001da35         db  0x18 ; '.'
000000000001da36         db  0x42 ; 'B'
000000000001da37         db  0x0e ; '.'
000000000001da38         db  0x10 ; '.'
000000000001da39         db  0x42 ; 'B'
000000000001da3a         db  0x0e ; '.'
000000000001da3b         db  0x08 ; '.'
000000000001da3c         dd         0x00000048                                  ; Length of the record
000000000001da40         dd         0x000003d0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001da44         db         0xbc, 0x81, 0xfe, 0xff                      ; begin 0x5c00
000000000001da48         db         0x6d, 3 dup (0x00)                          ; length 0x6d (end at 0x5c6d)
000000000001da4c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001da4d         db  0x42 ; 'B'
000000000001da4e         db  0x0e ; '.'
000000000001da4f         db  0x10 ; '.'
000000000001da50         db  0x8f ; '.'
000000000001da51         db  0x02 ; '.'
000000000001da52         db  0x42 ; 'B'
000000000001da53         db  0x0e ; '.'
000000000001da54         db  0x18 ; '.'
000000000001da55         db  0x8e ; '.'
000000000001da56         db  0x03 ; '.'
000000000001da57         db  0x45 ; 'E'
000000000001da58         db  0x0e ; '.'
000000000001da59         db  0x20 ; ' '
000000000001da5a         db  0x8d ; '.'
000000000001da5b         db  0x04 ; '.'
000000000001da5c         db  0x42 ; 'B'
000000000001da5d         db  0x0e ; '.'
000000000001da5e         db  0x28 ; '('
000000000001da5f         db  0x8c ; '.'
000000000001da60         db  0x05 ; '.'
000000000001da61         db  0x44 ; 'D'
000000000001da62         db  0x0e ; '.'
000000000001da63         db  0x30 ; '0'
000000000001da64         db  0x86 ; '.'
000000000001da65         db  0x06 ; '.'
000000000001da66         db  0x41 ; 'A'
000000000001da67         db  0x0e ; '.'
000000000001da68         db  0x38 ; '8'
000000000001da69         db  0x83 ; '.'
000000000001da6a         db  0x07 ; '.'
000000000001da6b         db  0x50 ; 'P'
000000000001da6c         db  0x0e ; '.'
000000000001da6d         db  0x40 ; '@'
000000000001da6e         db  0x5a ; 'Z'
000000000001da6f         db  0x0a ; '.'
000000000001da70         db  0x0e ; '.'
000000000001da71         db  0x38 ; '8'
000000000001da72         db  0x41 ; 'A'
000000000001da73         db  0x0e ; '.'
000000000001da74         db  0x30 ; '0'
000000000001da75         db  0x41 ; 'A'
000000000001da76         db  0x0e ; '.'
000000000001da77         db  0x28 ; '('
000000000001da78         db  0x42 ; 'B'
000000000001da79         db  0x0e ; '.'
000000000001da7a         db  0x20 ; ' '
000000000001da7b         db  0x42 ; 'B'
000000000001da7c         db  0x0e ; '.'
000000000001da7d         db  0x18 ; '.'
000000000001da7e         db  0x42 ; 'B'
000000000001da7f         db  0x0e ; '.'
000000000001da80         db  0x10 ; '.'
000000000001da81         db  0x42 ; 'B'
000000000001da82         db  0x0e ; '.'
000000000001da83         db  0x08 ; '.'
000000000001da84         db  0x41 ; 'A'
000000000001da85         db  0x0b ; '.'
000000000001da86         db  0x00 ; '.'
000000000001da87         db  0x00 ; '.'
000000000001da88         dd         0x0000003c                                  ; Length of the record
000000000001da8c         dd         0x0000041c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001da90         db         0xe0, 0x81, 0xfe, 0xff                      ; begin 0x5c70
000000000001da94         db         0x4d, 3 dup (0x00)                          ; length 0x4d (end at 0x5cbd)
000000000001da98         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001da99         db  0x42 ; 'B'
000000000001da9a         db  0x0e ; '.'
000000000001da9b         db  0x10 ; '.'
000000000001da9c         db  0x8e ; '.'
000000000001da9d         db  0x02 ; '.'
000000000001da9e         db  0x42 ; 'B'
000000000001da9f         db  0x0e ; '.'
000000000001daa0         db  0x18 ; '.'
000000000001daa1         db  0x8d ; '.'
000000000001daa2         db  0x03 ; '.'
000000000001daa3         db  0x42 ; 'B'
000000000001daa4         db  0x0e ; '.'
000000000001daa5         db  0x20 ; ' '
000000000001daa6         db  0x8c ; '.'
000000000001daa7         db  0x04 ; '.'
000000000001daa8         db  0x41 ; 'A'
000000000001daa9         db  0x0e ; '.'
000000000001daaa         db  0x28 ; '('
000000000001daab         db  0x86 ; '.'
000000000001daac         db  0x05 ; '.'
000000000001daad         db  0x41 ; 'A'
000000000001daae         db  0x0e ; '.'
000000000001daaf         db  0x30 ; '0'
000000000001dab0         db  0x83 ; '.'
000000000001dab1         db  0x06 ; '.'
000000000001dab2         db  0x7a ; 'z'
000000000001dab3         db  0x0e ; '.'
000000000001dab4         db  0x28 ; '('
000000000001dab5         db  0x44 ; 'D'
000000000001dab6         db  0x0e ; '.'
000000000001dab7         db  0x20 ; ' '
000000000001dab8         db  0x42 ; 'B'
000000000001dab9         db  0x0e ; '.'
000000000001daba         db  0x18 ; '.'
000000000001dabb         db  0x42 ; 'B'
000000000001dabc         db  0x0e ; '.'
000000000001dabd         db  0x10 ; '.'
000000000001dabe         db  0x42 ; 'B'
000000000001dabf         db  0x0e ; '.'
000000000001dac0         db  0x08 ; '.'
000000000001dac1         db  0x00 ; '.'
000000000001dac2         db  0x00 ; '.'
000000000001dac3         db  0x00 ; '.'
000000000001dac4         db  0x00 ; '.'
000000000001dac5         db  0x00 ; '.'
000000000001dac6         db  0x00 ; '.'
000000000001dac7         db  0x00 ; '.'
000000000001dac8         dd         0x00000010                                  ; Length of the record
000000000001dacc         dd         0x0000045c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001dad0         db         0xf0, 0x81, 0xfe, 0xff                      ; begin 0x5cc0
000000000001dad4         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5cc8)
000000000001dad8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001dad9         align      4
000000000001dadc         dd         0x00000010                                  ; Length of the record
000000000001dae0         dd         0x00000470                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001dae4         db         0xec, 0x81, 0xfe, 0xff                      ; begin 0x5cd0
000000000001dae8         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5cd8)
000000000001daec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001daed         align      16
000000000001daf0         dd         0x0000002c                                  ; Length of the record
000000000001daf4         dd         0x00000484                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001daf8         db         0xe8, 0x81, 0xfe, 0xff                      ; begin 0x5ce0
000000000001dafc         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x5d84)
000000000001db00         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001db01         db  0x41 ; 'A'
000000000001db02         db  0x0e ; '.'
000000000001db03         db  0x10 ; '.'
000000000001db04         db  0x86 ; '.'
000000000001db05         db  0x02 ; '.'
000000000001db06         db  0x41 ; 'A'
000000000001db07         db  0x0e ; '.'
000000000001db08         db  0x18 ; '.'
000000000001db09         db  0x83 ; '.'
000000000001db0a         db  0x03 ; '.'
000000000001db0b         db  0x44 ; 'D'
000000000001db0c         db  0x0e ; '.'
000000000001db0d         db  0x20 ; ' '
000000000001db0e         db  0x7a ; 'z'
000000000001db0f         db  0x0a ; '.'
000000000001db10         db  0x0e ; '.'
000000000001db11         db  0x18 ; '.'
000000000001db12         db  0x41 ; 'A'
000000000001db13         db  0x0e ; '.'
000000000001db14         db  0x10 ; '.'
000000000001db15         db  0x41 ; 'A'
000000000001db16         db  0x0e ; '.'
000000000001db17         db  0x08 ; '.'
000000000001db18         db  0x41 ; 'A'
000000000001db19         db  0x0b ; '.'
000000000001db1a         db  0x00 ; '.'
000000000001db1b         db  0x00 ; '.'
000000000001db1c         db  0x00 ; '.'
000000000001db1d         db  0x00 ; '.'
000000000001db1e         db  0x00 ; '.'
000000000001db1f         db  0x00 ; '.'
000000000001db20         dd         0x00000024                                  ; Length of the record
000000000001db24         dd         0x000004b4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001db28         db         0x68, 0x82, 0xfe, 0xff                      ; begin 0x5d90
000000000001db2c         db         0x42, 3 dup (0x00)                          ; length 0x42 (end at 0x5dd2)
000000000001db30         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001db31         db  0x41 ; 'A'
000000000001db32         db  0x0e ; '.'
000000000001db33         db  0x10 ; '.'
000000000001db34         db  0x86 ; '.'
000000000001db35         db  0x02 ; '.'
000000000001db36         db  0x41 ; 'A'
000000000001db37         db  0x0e ; '.'
000000000001db38         db  0x18 ; '.'
000000000001db39         db  0x83 ; '.'
000000000001db3a         db  0x03 ; '.'
000000000001db3b         db  0x51 ; 'Q'
000000000001db3c         db  0x0e ; '.'
000000000001db3d         db  0x20 ; ' '
000000000001db3e         db  0x6a ; 'j'
000000000001db3f         db  0x0e ; '.'
000000000001db40         db  0x18 ; '.'
000000000001db41         db  0x43 ; 'C'
000000000001db42         db  0x0e ; '.'
000000000001db43         db  0x10 ; '.'
000000000001db44         db  0x41 ; 'A'
000000000001db45         db  0x0e ; '.'
000000000001db46         db  0x08 ; '.'
000000000001db47         db  0x00 ; '.'
000000000001db48         dd         0x0000004c                                  ; Length of the record
000000000001db4c         dd         0x000004dc                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001db50         db         0x90, 0x82, 0xfe, 0xff                      ; begin 0x5de0
000000000001db54         db         0xae, 0x01, 2 dup (0x00)                    ; length 0x1ae (end at 0x5f8e)
000000000001db58         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001db59         db  0x42 ; 'B'
000000000001db5a         db  0x0e ; '.'
000000000001db5b         db  0x10 ; '.'
000000000001db5c         db  0x8f ; '.'
000000000001db5d         db  0x02 ; '.'
000000000001db5e         db  0x42 ; 'B'
000000000001db5f         db  0x0e ; '.'
000000000001db60         db  0x18 ; '.'
000000000001db61         db  0x8e ; '.'
000000000001db62         db  0x03 ; '.'
000000000001db63         db  0x45 ; 'E'
000000000001db64         db  0x0e ; '.'
000000000001db65         db  0x20 ; ' '
000000000001db66         db  0x8d ; '.'
000000000001db67         db  0x04 ; '.'
000000000001db68         db  0x42 ; 'B'
000000000001db69         db  0x0e ; '.'
000000000001db6a         db  0x28 ; '('
000000000001db6b         db  0x8c ; '.'
000000000001db6c         db  0x05 ; '.'
000000000001db6d         db  0x44 ; 'D'
000000000001db6e         db  0x0e ; '.'
000000000001db6f         db  0x30 ; '0'
000000000001db70         db  0x86 ; '.'
000000000001db71         db  0x06 ; '.'
000000000001db72         db  0x41 ; 'A'
000000000001db73         db  0x0e ; '.'
000000000001db74         db  0x38 ; '8'
000000000001db75         db  0x83 ; '.'
000000000001db76         db  0x07 ; '.'
000000000001db77         db  0x44 ; 'D'
000000000001db78         db  0x0e ; '.'
000000000001db79         db  0x50 ; 'P'
000000000001db7a         db  0x02 ; '.'
000000000001db7b         db  0xd0 ; '.'
000000000001db7c         db  0x0a ; '.'
000000000001db7d         db  0x0e ; '.'
000000000001db7e         db  0x38 ; '8'
000000000001db7f         db  0x44 ; 'D'
000000000001db80         db  0x0e ; '.'
000000000001db81         db  0x30 ; '0'
000000000001db82         db  0x41 ; 'A'
000000000001db83         db  0x0e ; '.'
000000000001db84         db  0x28 ; '('
000000000001db85         db  0x42 ; 'B'
000000000001db86         db  0x0e ; '.'
000000000001db87         db  0x20 ; ' '
000000000001db88         db  0x42 ; 'B'
000000000001db89         db  0x0e ; '.'
000000000001db8a         db  0x18 ; '.'
000000000001db8b         db  0x42 ; 'B'
000000000001db8c         db  0x0e ; '.'
000000000001db8d         db  0x10 ; '.'
000000000001db8e         db  0x42 ; 'B'
000000000001db8f         db  0x0e ; '.'
000000000001db90         db  0x08 ; '.'
000000000001db91         db  0x47 ; 'G'
000000000001db92         db  0x0b ; '.'
000000000001db93         db  0x00 ; '.'
000000000001db94         db  0x00 ; '.'
000000000001db95         db  0x00 ; '.'
000000000001db96         db  0x00 ; '.'
000000000001db97         db  0x00 ; '.'
000000000001db98         dd         0x0000001c                                  ; Length of the record
000000000001db9c         dd         0x0000052c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001dba0         db         0xf0, 0x83, 0xfe, 0xff                      ; begin 0x5f90
000000000001dba4         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x602f)
000000000001dba8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001dba9         db  0x44 ; 'D'
000000000001dbaa         db  0x0e ; '.'
000000000001dbab         db  0x10 ; '.'
000000000001dbac         db  0x83 ; '.'
000000000001dbad         db  0x02 ; '.'
000000000001dbae         db  0x02 ; '.'
000000000001dbaf         db  0x78 ; 'x'
000000000001dbb0         db  0x0a ; '.'
000000000001dbb1         db  0x0e ; '.'
000000000001dbb2         db  0x08 ; '.'
000000000001dbb3         db  0x41 ; 'A'
000000000001dbb4         db  0x0b ; '.'
000000000001dbb5         db  0x00 ; '.'
000000000001dbb6         db  0x00 ; '.'
000000000001dbb7         db  0x00 ; '.'
000000000001dbb8         dd         0x00000010                                  ; Length of the record
000000000001dbbc         dd         0x0000054c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001dbc0         db         0x60, 0x45, 0xfe, 0xff                      ; begin 0x2120
000000000001dbc4         db         0x23, 3 dup (0x00)                          ; length 0x23 (end at 0x2143)
000000000001dbc8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001dbc9         db  0x59 ; 'Y'
000000000001dbca         db  0x0e ; '.'
000000000001dbcb         db  0x10 ; '.'
000000000001dbcc         dd         0x00000048                                  ; Length of the record
000000000001dbd0         dd         0x00000560                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001dbd4         db         0x5c, 0x84, 0xfe, 0xff                      ; begin 0x6030
000000000001dbd8         db         0x6a, 0x09, 2 dup (0x00)                    ; length 0x96a (end at 0x699a)
000000000001dbdc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001dbdd         db  0x42 ; 'B'
000000000001dbde         db  0x0e ; '.'
000000000001dbdf         db  0x10 ; '.'
000000000001dbe0         db  0x8f ; '.'
000000000001dbe1         db  0x02 ; '.'
000000000001dbe2         db  0x42 ; 'B'
000000000001dbe3         db  0x0e ; '.'
000000000001dbe4         db  0x18 ; '.'
000000000001dbe5         db  0x8e ; '.'
000000000001dbe6         db  0x03 ; '.'
000000000001dbe7         db  0x45 ; 'E'
000000000001dbe8         db  0x0e ; '.'
000000000001dbe9         db  0x20 ; ' '
000000000001dbea         db  0x8d ; '.'
000000000001dbeb         db  0x04 ; '.'
000000000001dbec         db  0x42 ; 'B'
000000000001dbed         db  0x0e ; '.'
000000000001dbee         db  0x28 ; '('
000000000001dbef         db  0x8c ; '.'
000000000001dbf0         db  0x05 ; '.'
000000000001dbf1         db  0x44 ; 'D'
000000000001dbf2         db  0x0e ; '.'
000000000001dbf3         db  0x30 ; '0'
000000000001dbf4         db  0x86 ; '.'
000000000001dbf5         db  0x06 ; '.'
000000000001dbf6         db  0x41 ; 'A'
000000000001dbf7         db  0x0e ; '.'
000000000001dbf8         db  0x38 ; '8'
000000000001dbf9         db  0x83 ; '.'
000000000001dbfa         db  0x07 ; '.'
000000000001dbfb         db  0x53 ; 'S'
000000000001dbfc         db  0x0e ; '.'
000000000001dbfd         db  0xf0 ; '.'
000000000001dbfe         db  0x01 ; '.'
000000000001dbff         db  0x02 ; '.'
000000000001dc00         db  0xe4 ; '.'
000000000001dc01         db  0x0a ; '.'
000000000001dc02         db  0x0e ; '.'
000000000001dc03         db  0x38 ; '8'
000000000001dc04         db  0x41 ; 'A'
000000000001dc05         db  0x0e ; '.'
000000000001dc06         db  0x30 ; '0'
000000000001dc07         db  0x41 ; 'A'
000000000001dc08         db  0x0e ; '.'
000000000001dc09         db  0x28 ; '('
000000000001dc0a         db  0x42 ; 'B'
000000000001dc0b         db  0x0e ; '.'
000000000001dc0c         db  0x20 ; ' '
000000000001dc0d         db  0x42 ; 'B'
000000000001dc0e         db  0x0e ; '.'
000000000001dc0f         db  0x18 ; '.'
000000000001dc10         db  0x42 ; 'B'
000000000001dc11         db  0x0e ; '.'
000000000001dc12         db  0x10 ; '.'
000000000001dc13         db  0x42 ; 'B'
000000000001dc14         db  0x0e ; '.'
000000000001dc15         db  0x08 ; '.'
000000000001dc16         db  0x47 ; 'G'
000000000001dc17         db  0x0b ; '.'
000000000001dc18         dd         0x00000034                                  ; Length of the record
000000000001dc1c         dd         0x000005ac                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001dc20         db         0x80, 0x8d, 0xfe, 0xff                      ; begin 0x69a0
000000000001dc24         db         0x86, 3 dup (0x00)                          ; length 0x86 (end at 0x6a26)
000000000001dc28         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001dc29         db  0x42 ; 'B'
000000000001dc2a         db  0x0e ; '.'
000000000001dc2b         db  0x10 ; '.'
000000000001dc2c         db  0x8c ; '.'
000000000001dc2d         db  0x02 ; '.'
000000000001dc2e         db  0x41 ; 'A'
000000000001dc2f         db  0x0e ; '.'
000000000001dc30         db  0x18 ; '.'
000000000001dc31         db  0x86 ; '.'
000000000001dc32         db  0x03 ; '.'
000000000001dc33         db  0x44 ; 'D'
000000000001dc34         db  0x0e ; '.'
000000000001dc35         db  0x20 ; ' '
000000000001dc36         db  0x83 ; '.'
000000000001dc37         db  0x04 ; '.'
000000000001dc38         db  0x6a ; 'j'
000000000001dc39         db  0x0a ; '.'
000000000001dc3a         db  0x0e ; '.'
000000000001dc3b         db  0x18 ; '.'
000000000001dc3c         db  0x41 ; 'A'
000000000001dc3d         db  0x0e ; '.'
000000000001dc3e         db  0x10 ; '.'
000000000001dc3f         db  0x42 ; 'B'
000000000001dc40         db  0x0e ; '.'
000000000001dc41         db  0x08 ; '.'
000000000001dc42         db  0x44 ; 'D'
000000000001dc43         db  0x0b ; '.'
000000000001dc44         db  0x02 ; '.'
000000000001dc45         db  0x4a ; 'J'
000000000001dc46         db  0x0e ; '.'
000000000001dc47         db  0x18 ; '.'
000000000001dc48         db  0x41 ; 'A'
000000000001dc49         db  0x0e ; '.'
000000000001dc4a         db  0x10 ; '.'
000000000001dc4b         db  0x42 ; 'B'
000000000001dc4c         db  0x0e ; '.'
000000000001dc4d         db  0x08 ; '.'
000000000001dc4e         db  0x00 ; '.'
000000000001dc4f         db  0x00 ; '.'
000000000001dc50         dd         0x0000004c                                  ; Length of the record
000000000001dc54         dd         0x000005e4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001dc58         db         0xd8, 0x8d, 0xfe, 0xff                      ; begin 0x6a30
000000000001dc5c         db         0xed, 0x02, 2 dup (0x00)                    ; length 0x2ed (end at 0x6d1d)
000000000001dc60         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001dc61         db  0x42 ; 'B'
000000000001dc62         db  0x0e ; '.'
000000000001dc63         db  0x10 ; '.'
000000000001dc64         db  0x8f ; '.'
000000000001dc65         db  0x02 ; '.'
000000000001dc66         db  0x42 ; 'B'
000000000001dc67         db  0x0e ; '.'
000000000001dc68         db  0x18 ; '.'
000000000001dc69         db  0x8e ; '.'
000000000001dc6a         db  0x03 ; '.'
000000000001dc6b         db  0x47 ; 'G'
000000000001dc6c         db  0x0e ; '.'
000000000001dc6d         db  0x20 ; ' '
000000000001dc6e         db  0x8d ; '.'
000000000001dc6f         db  0x04 ; '.'
000000000001dc70         db  0x42 ; 'B'
000000000001dc71         db  0x0e ; '.'
000000000001dc72         db  0x28 ; '('
000000000001dc73         db  0x8c ; '.'
000000000001dc74         db  0x05 ; '.'
000000000001dc75         db  0x44 ; 'D'
000000000001dc76         db  0x0e ; '.'
000000000001dc77         db  0x30 ; '0'
000000000001dc78         db  0x86 ; '.'
000000000001dc79         db  0x06 ; '.'
000000000001dc7a         db  0x41 ; 'A'
000000000001dc7b         db  0x0e ; '.'
000000000001dc7c         db  0x38 ; '8'
000000000001dc7d         db  0x83 ; '.'
000000000001dc7e         db  0x07 ; '.'
000000000001dc7f         db  0x4c ; 'L'
000000000001dc80         db  0x0e ; '.'
000000000001dc81         db  0x50 ; 'P'
000000000001dc82         db  0x02 ; '.'
000000000001dc83         db  0x71 ; 'q'
000000000001dc84         db  0x0a ; '.'
000000000001dc85         db  0x0e ; '.'
000000000001dc86         db  0x38 ; '8'
000000000001dc87         db  0x44 ; 'D'
000000000001dc88         db  0x0e ; '.'
000000000001dc89         db  0x30 ; '0'
000000000001dc8a         db  0x41 ; 'A'
000000000001dc8b         db  0x0e ; '.'
000000000001dc8c         db  0x28 ; '('
000000000001dc8d         db  0x42 ; 'B'
000000000001dc8e         db  0x0e ; '.'
000000000001dc8f         db  0x20 ; ' '
000000000001dc90         db  0x42 ; 'B'
000000000001dc91         db  0x0e ; '.'
000000000001dc92         db  0x18 ; '.'
000000000001dc93         db  0x42 ; 'B'
000000000001dc94         db  0x0e ; '.'
000000000001dc95         db  0x10 ; '.'
000000000001dc96         db  0x42 ; 'B'
000000000001dc97         db  0x0e ; '.'
000000000001dc98         db  0x08 ; '.'
000000000001dc99         db  0x44 ; 'D'
000000000001dc9a         db  0x0b ; '.'
000000000001dc9b         db  0x00 ; '.'
000000000001dc9c         db  0x00 ; '.'
000000000001dc9d         db  0x00 ; '.'
000000000001dc9e         db  0x00 ; '.'
000000000001dc9f         db  0x00 ; '.'
000000000001dca0         dd         0x00000040                                  ; Length of the record
000000000001dca4         dd         0x00000634                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001dca8         db         0x78, 0x90, 0xfe, 0xff                      ; begin 0x6d20
000000000001dcac         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x6e07)
000000000001dcb0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001dcb1         db  0x41 ; 'A'
000000000001dcb2         db  0x0e ; '.'
000000000001dcb3         db  0x10 ; '.'
000000000001dcb4         db  0x86 ; '.'
000000000001dcb5         db  0x02 ; '.'
000000000001dcb6         db  0x41 ; 'A'
000000000001dcb7         db  0x0e ; '.'
000000000001dcb8         db  0x18 ; '.'
000000000001dcb9         db  0x83 ; '.'
000000000001dcba         db  0x03 ; '.'
000000000001dcbb         db  0x49 ; 'I'
000000000001dcbc         db  0x0e ; '.'
000000000001dcbd         db  0x20 ; ' '
000000000001dcbe         db  0x6e ; 'n'
000000000001dcbf         db  0x0a ; '.'
000000000001dcc0         db  0x0e ; '.'
000000000001dcc1         db  0x18 ; '.'
000000000001dcc2         db  0x41 ; 'A'
000000000001dcc3         db  0x0e ; '.'
000000000001dcc4         db  0x10 ; '.'
000000000001dcc5         db  0x41 ; 'A'
000000000001dcc6         db  0x0e ; '.'
000000000001dcc7         db  0x08 ; '.'
000000000001dcc8         db  0x45 ; 'E'
000000000001dcc9         db  0x0b ; '.'
000000000001dcca         db  0x02 ; '.'
000000000001dccb         db  0x4a ; 'J'
000000000001dccc         db  0x0a ; '.'
000000000001dccd         db  0x0e ; '.'
000000000001dcce         db  0x18 ; '.'
000000000001dccf         db  0x41 ; 'A'
000000000001dcd0         db  0x0e ; '.'
000000000001dcd1         db  0x10 ; '.'
000000000001dcd2         db  0x41 ; 'A'
000000000001dcd3         db  0x0e ; '.'
000000000001dcd4         db  0x08 ; '.'
000000000001dcd5         db  0x44 ; 'D'
000000000001dcd6         db  0x0b ; '.'
000000000001dcd7         db  0x02 ; '.'
000000000001dcd8         db  0x54 ; 'T'
000000000001dcd9         db  0x0e ; '.'
000000000001dcda         db  0x18 ; '.'
000000000001dcdb         db  0x41 ; 'A'
000000000001dcdc         db  0x0e ; '.'
000000000001dcdd         db  0x10 ; '.'
000000000001dcde         db  0x41 ; 'A'
000000000001dcdf         db  0x0e ; '.'
000000000001dce0         db  0x08 ; '.'
000000000001dce1         db  0x00 ; '.'
000000000001dce2         db  0x00 ; '.'
000000000001dce3         db  0x00 ; '.'
000000000001dce4         dd         0x00000074                                  ; Length of the record
000000000001dce8         dd         0x00000678                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001dcec         db         0x24, 0x91, 0xfe, 0xff                      ; begin 0x6e10
000000000001dcf0         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x8044)
000000000001dcf4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001dcf5         db  0x42 ; 'B'
000000000001dcf6         db  0x0e ; '.'
000000000001dcf7         db  0x10 ; '.'
000000000001dcf8         db  0x8f ; '.'
000000000001dcf9         db  0x02 ; '.'
000000000001dcfa         db  0x42 ; 'B'
000000000001dcfb         db  0x0e ; '.'
000000000001dcfc         db  0x18 ; '.'
000000000001dcfd         db  0x8e ; '.'
000000000001dcfe         db  0x03 ; '.'
000000000001dcff         db  0x45 ; 'E'
000000000001dd00         db  0x0e ; '.'
000000000001dd01         db  0x20 ; ' '
000000000001dd02         db  0x8d ; '.'
000000000001dd03         db  0x04 ; '.'
000000000001dd04         db  0x42 ; 'B'
000000000001dd05         db  0x0e ; '.'
000000000001dd06         db  0x28 ; '('
000000000001dd07         db  0x8c ; '.'
000000000001dd08         db  0x05 ; '.'
000000000001dd09         db  0x44 ; 'D'
000000000001dd0a         db  0x0e ; '.'
000000000001dd0b         db  0x30 ; '0'
000000000001dd0c         db  0x86 ; '.'
000000000001dd0d         db  0x06 ; '.'
000000000001dd0e         db  0x41 ; 'A'
000000000001dd0f         db  0x0e ; '.'
000000000001dd10         db  0x38 ; '8'
000000000001dd11         db  0x83 ; '.'
000000000001dd12         db  0x07 ; '.'
000000000001dd13         db  0x53 ; 'S'
000000000001dd14         db  0x0e ; '.'
000000000001dd15         db  0xf0 ; '.'
000000000001dd16         db  0x01 ; '.'
000000000001dd17         db  0x03 ; '.'
000000000001dd18         db  0x81 ; '.'
000000000001dd19         db  0x0b ; '.'
000000000001dd1a         db  0x0e ; '.'
000000000001dd1b         db  0xf8 ; '.'
000000000001dd1c         db  0x01 ; '.'
000000000001dd1d         db  0x4a ; 'J'
000000000001dd1e         db  0x0e ; '.'
000000000001dd1f         db  0x80 ; '.'
000000000001dd20         db  0x02 ; '.'
000000000001dd21         db  0x44 ; 'D'
000000000001dd22         db  0x0e ; '.'
000000000001dd23         db  0x88 ; '.'
000000000001dd24         db  0x02 ; '.'
000000000001dd25         db  0x45 ; 'E'
000000000001dd26         db  0x0e ; '.'
000000000001dd27         db  0x90 ; '.'
000000000001dd28         db  0x02 ; '.'
000000000001dd29         db  0x5f ; '_'
000000000001dd2a         db  0x0e ; '.'
000000000001dd2b         db  0xf0 ; '.'
000000000001dd2c         db  0x01 ; '.'
000000000001dd2d         db  0x64 ; 'd'
000000000001dd2e         db  0x0a ; '.'
000000000001dd2f         db  0x0e ; '.'
000000000001dd30         db  0x38 ; '8'
000000000001dd31         db  0x41 ; 'A'
000000000001dd32         db  0x0e ; '.'
000000000001dd33         db  0x30 ; '0'
000000000001dd34         db  0x41 ; 'A'
000000000001dd35         db  0x0e ; '.'
000000000001dd36         db  0x28 ; '('
000000000001dd37         db  0x42 ; 'B'
000000000001dd38         db  0x0e ; '.'
000000000001dd39         db  0x20 ; ' '
000000000001dd3a         db  0x42 ; 'B'
000000000001dd3b         db  0x0e ; '.'
000000000001dd3c         db  0x18 ; '.'
000000000001dd3d         db  0x42 ; 'B'
000000000001dd3e         db  0x0e ; '.'
000000000001dd3f         db  0x10 ; '.'
000000000001dd40         db  0x42 ; 'B'
000000000001dd41         db  0x0e ; '.'
000000000001dd42         db  0x08 ; '.'
000000000001dd43         db  0x44 ; 'D'
000000000001dd44         db  0x0b ; '.'
000000000001dd45         db  0x03 ; '.'
000000000001dd46         db  0x99 ; '.'
000000000001dd47         db  0x05 ; '.'
000000000001dd48         db  0x0e ; '.'
000000000001dd49         db  0xf8 ; '.'
000000000001dd4a         db  0x01 ; '.'
000000000001dd4b         db  0x4d ; 'M'
000000000001dd4c         db  0x0e ; '.'
000000000001dd4d         db  0x80 ; '.'
000000000001dd4e         db  0x02 ; '.'
000000000001dd4f         db  0x44 ; 'D'
000000000001dd50         db  0x0e ; '.'
000000000001dd51         db  0x88 ; '.'
000000000001dd52         db  0x02 ; '.'
000000000001dd53         db  0x47 ; 'G'
000000000001dd54         db  0x0e ; '.'
000000000001dd55         db  0x90 ; '.'
000000000001dd56         db  0x02 ; '.'
000000000001dd57         db  0x5b ; '['
000000000001dd58         db  0x0e ; '.'
000000000001dd59         db  0xf0 ; '.'
000000000001dd5a         db  0x01 ; '.'
000000000001dd5b         db  0x00 ; '.'
000000000001dd5c         dd         0x00000068                                  ; Length of the record
000000000001dd60         dd         0x000006f0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001dd64         db         0xec, 0xa2, 0xfe, 0xff                      ; begin 0x8050
000000000001dd68         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x81fb)
000000000001dd6c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001dd6d         db  0x42 ; 'B'
000000000001dd6e         db  0x0e ; '.'
000000000001dd6f         db  0x10 ; '.'
000000000001dd70         db  0x8f ; '.'
000000000001dd71         db  0x02 ; '.'
000000000001dd72         db  0x42 ; 'B'
000000000001dd73         db  0x0e ; '.'
000000000001dd74         db  0x18 ; '.'
000000000001dd75         db  0x8e ; '.'
000000000001dd76         db  0x03 ; '.'
000000000001dd77         db  0x45 ; 'E'
000000000001dd78         db  0x0e ; '.'
000000000001dd79         db  0x20 ; ' '
000000000001dd7a         db  0x8d ; '.'
000000000001dd7b         db  0x04 ; '.'
000000000001dd7c         db  0x42 ; 'B'
000000000001dd7d         db  0x0e ; '.'
000000000001dd7e         db  0x28 ; '('
000000000001dd7f         db  0x8c ; '.'
000000000001dd80         db  0x05 ; '.'
000000000001dd81         db  0x44 ; 'D'
000000000001dd82         db  0x0e ; '.'
000000000001dd83         db  0x30 ; '0'
000000000001dd84         db  0x86 ; '.'
000000000001dd85         db  0x06 ; '.'
000000000001dd86         db  0x41 ; 'A'
000000000001dd87         db  0x0e ; '.'
000000000001dd88         db  0x38 ; '8'
000000000001dd89         db  0x83 ; '.'
000000000001dd8a         db  0x07 ; '.'
000000000001dd8b         db  0x47 ; 'G'
000000000001dd8c         db  0x0e ; '.'
000000000001dd8d         db  0x60 ; '`'
000000000001dd8e         db  0x02 ; '.'
000000000001dd8f         db  0x99 ; '.'
000000000001dd90         db  0x0e ; '.'
000000000001dd91         db  0x68 ; 'h'
000000000001dd92         db  0x5f ; '_'
000000000001dd93         db  0x0e ; '.'
000000000001dd94         db  0x70 ; 'p'
000000000001dd95         db  0x46 ; 'F'
000000000001dd96         db  0x0e ; '.'
000000000001dd97         db  0x78 ; 'x'
000000000001dd98         db  0x42 ; 'B'
000000000001dd99         db  0x0e ; '.'
000000000001dd9a         db  0x80 ; '.'
000000000001dd9b         db  0x01 ; '.'
000000000001dd9c         db  0x59 ; 'Y'
000000000001dd9d         db  0x0e ; '.'
000000000001dd9e         db  0x60 ; '`'
000000000001dd9f         db  0x02 ; '.'
000000000001dda0         db  0x40 ; '@'
000000000001dda1         db  0x0e ; '.'
000000000001dda2         db  0x68 ; 'h'
000000000001dda3         db  0x4b ; 'K'
000000000001dda4         db  0x0e ; '.'
000000000001dda5         db  0x70 ; 'p'
000000000001dda6         db  0x43 ; 'C'
000000000001dda7         db  0x0e ; '.'
000000000001dda8         db  0x78 ; 'x'
000000000001dda9         db  0x45 ; 'E'
000000000001ddaa         db  0x0e ; '.'
000000000001ddab         db  0x80 ; '.'
000000000001ddac         db  0x01 ; '.'
000000000001ddad         db  0x5e ; '^'
000000000001ddae         db  0x0e ; '.'
000000000001ddaf         db  0x60 ; '`'
000000000001ddb0         db  0x4c ; 'L'
000000000001ddb1         db  0x0a ; '.'
000000000001ddb2         db  0x0e ; '.'
000000000001ddb3         db  0x38 ; '8'
000000000001ddb4         db  0x44 ; 'D'
000000000001ddb5         db  0x0e ; '.'
000000000001ddb6         db  0x30 ; '0'
000000000001ddb7         db  0x41 ; 'A'
000000000001ddb8         db  0x0e ; '.'
000000000001ddb9         db  0x28 ; '('
000000000001ddba         db  0x42 ; 'B'
000000000001ddbb         db  0x0e ; '.'
000000000001ddbc         db  0x20 ; ' '
000000000001ddbd         db  0x42 ; 'B'
000000000001ddbe         db  0x0e ; '.'
000000000001ddbf         db  0x18 ; '.'
000000000001ddc0         db  0x42 ; 'B'
000000000001ddc1         db  0x0e ; '.'
000000000001ddc2         db  0x10 ; '.'
000000000001ddc3         db  0x42 ; 'B'
000000000001ddc4         db  0x0e ; '.'
000000000001ddc5         db  0x08 ; '.'
000000000001ddc6         db  0x46 ; 'F'
000000000001ddc7         db  0x0b ; '.'
000000000001ddc8         dd         0x00000028                                  ; Length of the record
000000000001ddcc         dd         0x0000075c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ddd0         db         0x30, 0xa4, 0xfe, 0xff                      ; begin 0x8200
000000000001ddd4         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x8236)
000000000001ddd8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ddd9         db  0x42 ; 'B'
000000000001ddda         db  0x0e ; '.'
000000000001dddb         db  0x10 ; '.'
000000000001dddc         db  0x8c ; '.'
000000000001dddd         db  0x02 ; '.'
000000000001ddde         db  0x41 ; 'A'
000000000001dddf         db  0x0e ; '.'
000000000001dde0         db  0x18 ; '.'
000000000001dde1         db  0x86 ; '.'
000000000001dde2         db  0x03 ; '.'
000000000001dde3         db  0x41 ; 'A'
000000000001dde4         db  0x0e ; '.'
000000000001dde5         db  0x20 ; ' '
000000000001dde6         db  0x83 ; '.'
000000000001dde7         db  0x04 ; '.'
000000000001dde8         db  0x6e ; 'n'
000000000001dde9         db  0x0e ; '.'
000000000001ddea         db  0x18 ; '.'
000000000001ddeb         db  0x41 ; 'A'
000000000001ddec         db  0x0e ; '.'
000000000001dded         db  0x10 ; '.'
000000000001ddee         db  0x42 ; 'B'
000000000001ddef         db  0x0e ; '.'
000000000001ddf0         db  0x08 ; '.'
000000000001ddf1         db  0x00 ; '.'
000000000001ddf2         db  0x00 ; '.'
000000000001ddf3         db  0x00 ; '.'
000000000001ddf4         dd         0x00000010                                  ; Length of the record
000000000001ddf8         dd         0x00000788                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ddfc         db         0x44, 0xa4, 0xfe, 0xff                      ; begin 0x8240
000000000001de00         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x8251)
000000000001de04         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001de05         align      8
000000000001de08         dd         0x00000010                                  ; Length of the record
000000000001de0c         dd         0x0000079c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001de10         db         0x50, 0xa4, 0xfe, 0xff                      ; begin 0x8260
000000000001de14         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x8271)
000000000001de18         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001de19         align      4
000000000001de1c         dd         0x00000010                                  ; Length of the record
000000000001de20         dd         0x000007b0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001de24         db         0x5c, 0xa4, 0xfe, 0xff                      ; begin 0x8280
000000000001de28         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x82b5)
000000000001de2c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001de2d         align      16
000000000001de30         dd         0x00000010                                  ; Length of the record
000000000001de34         dd         0x000007c4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001de38         db         0x88, 0xa4, 0xfe, 0xff                      ; begin 0x82c0
000000000001de3c         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x82d5)
000000000001de40         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001de41         align      4
000000000001de44         dd         0x00000010                                  ; Length of the record
000000000001de48         dd         0x000007d8                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001de4c         db         0x94, 0xa4, 0xfe, 0xff                      ; begin 0x82e0
000000000001de50         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x8310)
000000000001de54         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001de55         db  0x6b ; 'k'
000000000001de56         db  0x0e ; '.'
000000000001de57         db  0x10 ; '.'
000000000001de58         dd         0x00000050                                  ; Length of the record
000000000001de5c         dd         0x000007ec                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001de60         db         0xb0, 0xa4, 0xfe, 0xff                      ; begin 0x8310
000000000001de64         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x8384)
000000000001de68         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001de69         db  0x42 ; 'B'
000000000001de6a         db  0x0e ; '.'
000000000001de6b         db  0x10 ; '.'
000000000001de6c         db  0x8f ; '.'
000000000001de6d         db  0x02 ; '.'
000000000001de6e         db  0x42 ; 'B'
000000000001de6f         db  0x0e ; '.'
000000000001de70         db  0x18 ; '.'
000000000001de71         db  0x8e ; '.'
000000000001de72         db  0x03 ; '.'
000000000001de73         db  0x49 ; 'I'
000000000001de74         db  0x0e ; '.'
000000000001de75         db  0x20 ; ' '
000000000001de76         db  0x8d ; '.'
000000000001de77         db  0x04 ; '.'
000000000001de78         db  0x42 ; 'B'
000000000001de79         db  0x0e ; '.'
000000000001de7a         db  0x28 ; '('
000000000001de7b         db  0x8c ; '.'
000000000001de7c         db  0x05 ; '.'
000000000001de7d         db  0x44 ; 'D'
000000000001de7e         db  0x0e ; '.'
000000000001de7f         db  0x30 ; '0'
000000000001de80         db  0x86 ; '.'
000000000001de81         db  0x06 ; '.'
000000000001de82         db  0x41 ; 'A'
000000000001de83         db  0x0e ; '.'
000000000001de84         db  0x38 ; '8'
000000000001de85         db  0x83 ; '.'
000000000001de86         db  0x07 ; '.'
000000000001de87         db  0x4d ; 'M'
000000000001de88         db  0x0e ; '.'
000000000001de89         db  0x50 ; 'P'
000000000001de8a         db  0x5f ; '_'
000000000001de8b         db  0x0e ; '.'
000000000001de8c         db  0x58 ; 'X'
000000000001de8d         db  0x47 ; 'G'
000000000001de8e         db  0x0e ; '.'
000000000001de8f         db  0x60 ; '`'
000000000001de90         db  0x46 ; 'F'
000000000001de91         db  0x0e ; '.'
000000000001de92         db  0x68 ; 'h'
000000000001de93         db  0x44 ; 'D'
000000000001de94         db  0x0e ; '.'
000000000001de95         db  0x70 ; 'p'
000000000001de96         db  0x58 ; 'X'
000000000001de97         db  0x0e ; '.'
000000000001de98         db  0x38 ; '8'
000000000001de99         db  0x41 ; 'A'
000000000001de9a         db  0x0e ; '.'
000000000001de9b         db  0x30 ; '0'
000000000001de9c         db  0x41 ; 'A'
000000000001de9d         db  0x0e ; '.'
000000000001de9e         db  0x28 ; '('
000000000001de9f         db  0x42 ; 'B'
000000000001dea0         db  0x0e ; '.'
000000000001dea1         db  0x20 ; ' '
000000000001dea2         db  0x42 ; 'B'
000000000001dea3         db  0x0e ; '.'
000000000001dea4         db  0x18 ; '.'
000000000001dea5         db  0x42 ; 'B'
000000000001dea6         db  0x0e ; '.'
000000000001dea7         db  0x10 ; '.'
000000000001dea8         db  0x42 ; 'B'
000000000001dea9         db  0x0e ; '.'
000000000001deaa         db  0x08 ; '.'
000000000001deab         db  0x00 ; '.'
000000000001deac         dd         0x00000068                                  ; Length of the record
000000000001deb0         dd         0x00000840                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001deb4         db         0xdc, 0xa4, 0xfe, 0xff                      ; begin 0x8390
000000000001deb8         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x8473)
000000000001debc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001debd         db  0x42 ; 'B'
000000000001debe         db  0x0e ; '.'
000000000001debf         db  0x10 ; '.'
000000000001dec0         db  0x8f ; '.'
000000000001dec1         db  0x02 ; '.'
000000000001dec2         db  0x42 ; 'B'
000000000001dec3         db  0x0e ; '.'
000000000001dec4         db  0x18 ; '.'
000000000001dec5         db  0x8e ; '.'
000000000001dec6         db  0x03 ; '.'
000000000001dec7         db  0x49 ; 'I'
000000000001dec8         db  0x0e ; '.'
000000000001dec9         db  0x20 ; ' '
000000000001deca         db  0x8d ; '.'
000000000001decb         db  0x04 ; '.'
000000000001decc         db  0x42 ; 'B'
000000000001decd         db  0x0e ; '.'
000000000001dece         db  0x28 ; '('
000000000001decf         db  0x8c ; '.'
000000000001ded0         db  0x05 ; '.'
000000000001ded1         db  0x44 ; 'D'
000000000001ded2         db  0x0e ; '.'
000000000001ded3         db  0x30 ; '0'
000000000001ded4         db  0x86 ; '.'
000000000001ded5         db  0x06 ; '.'
000000000001ded6         db  0x41 ; 'A'
000000000001ded7         db  0x0e ; '.'
000000000001ded8         db  0x38 ; '8'
000000000001ded9         db  0x83 ; '.'
000000000001deda         db  0x07 ; '.'
000000000001dedb         db  0x4d ; 'M'
000000000001dedc         db  0x0e ; '.'
000000000001dedd         db  0x70 ; 'p'
000000000001dede         db  0x65 ; 'e'
000000000001dedf         db  0x0e ; '.'
000000000001dee0         db  0x78 ; 'x'
000000000001dee1         db  0x4d ; 'M'
000000000001dee2         db  0x0e ; '.'
000000000001dee3         db  0x80 ; '.'
000000000001dee4         db  0x01 ; '.'
000000000001dee5         db  0x46 ; 'F'
000000000001dee6         db  0x0e ; '.'
000000000001dee7         db  0x88 ; '.'
000000000001dee8         db  0x01 ; '.'
000000000001dee9         db  0x42 ; 'B'
000000000001deea         db  0x0e ; '.'
000000000001deeb         db  0x90 ; '.'
000000000001deec         db  0x01 ; '.'
000000000001deed         db  0x5e ; '^'
000000000001deee         db  0x0e ; '.'
000000000001deef         db  0x70 ; 'p'
000000000001def0         db  0x56 ; 'V'
000000000001def1         db  0x0e ; '.'
000000000001def2         db  0x78 ; 'x'
000000000001def3         db  0x43 ; 'C'
000000000001def4         db  0x0e ; '.'
000000000001def5         db  0x80 ; '.'
000000000001def6         db  0x01 ; '.'
000000000001def7         db  0x43 ; 'C'
000000000001def8         db  0x0e ; '.'
000000000001def9         db  0x88 ; '.'
000000000001defa         db  0x01 ; '.'
000000000001defb         db  0x56 ; 'V'
000000000001defc         db  0x0e ; '.'
000000000001defd         db  0x90 ; '.'
000000000001defe         db  0x01 ; '.'
000000000001deff         db  0x52 ; 'R'
000000000001df00         db  0x0e ; '.'
000000000001df01         db  0x70 ; 'p'
000000000001df02         db  0x5b ; '['
000000000001df03         db  0x0e ; '.'
000000000001df04         db  0x38 ; '8'
000000000001df05         db  0x41 ; 'A'
000000000001df06         db  0x0e ; '.'
000000000001df07         db  0x30 ; '0'
000000000001df08         db  0x41 ; 'A'
000000000001df09         db  0x0e ; '.'
000000000001df0a         db  0x28 ; '('
000000000001df0b         db  0x42 ; 'B'
000000000001df0c         db  0x0e ; '.'
000000000001df0d         db  0x20 ; ' '
000000000001df0e         db  0x42 ; 'B'
000000000001df0f         db  0x0e ; '.'
000000000001df10         db  0x18 ; '.'
000000000001df11         db  0x42 ; 'B'
000000000001df12         db  0x0e ; '.'
000000000001df13         db  0x10 ; '.'
000000000001df14         db  0x42 ; 'B'
000000000001df15         db  0x0e ; '.'
000000000001df16         db  0x08 ; '.'
000000000001df17         db  0x00 ; '.'
000000000001df18         dd         0x00000010                                  ; Length of the record
000000000001df1c         dd         0x000008ac                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001df20         db         0x60, 0xa5, 0xfe, 0xff                      ; begin 0x8480
000000000001df24         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x848a)
000000000001df28         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001df29         align      4
000000000001df2c         dd         0x00000028                                  ; Length of the record
000000000001df30         dd         0x000008c0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001df34         db         0x5c, 0xa5, 0xfe, 0xff                      ; begin 0x8490
000000000001df38         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x8523)
000000000001df3c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001df3d         db  0x48 ; 'H'
000000000001df3e         db  0x0e ; '.'
000000000001df3f         db  0x10 ; '.'
000000000001df40         db  0x8c ; '.'
000000000001df41         db  0x02 ; '.'
000000000001df42         db  0x48 ; 'H'
000000000001df43         db  0x0e ; '.'
000000000001df44         db  0x18 ; '.'
000000000001df45         db  0x86 ; '.'
000000000001df46         db  0x03 ; '.'
000000000001df47         db  0x41 ; 'A'
000000000001df48         db  0x0e ; '.'
000000000001df49         db  0x20 ; ' '
000000000001df4a         db  0x83 ; '.'
000000000001df4b         db  0x04 ; '.'
000000000001df4c         db  0x02 ; '.'
000000000001df4d         db  0x74 ; 't'
000000000001df4e         db  0x0e ; '.'
000000000001df4f         db  0x18 ; '.'
000000000001df50         db  0x4b ; 'K'
000000000001df51         db  0x0e ; '.'
000000000001df52         db  0x10 ; '.'
000000000001df53         db  0x42 ; 'B'
000000000001df54         db  0x0e ; '.'
000000000001df55         db  0x08 ; '.'
000000000001df56         db  0x00 ; '.'
000000000001df57         db  0x00 ; '.'
000000000001df58         dd         0x00000010                                  ; Length of the record
000000000001df5c         dd         0x000008ec                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001df60         db         0xd0, 0xa5, 0xfe, 0xff                      ; begin 0x8530
000000000001df64         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x8543)
000000000001df68         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001df69         align      4
000000000001df6c         dd         0x00000010                                  ; Length of the record
000000000001df70         dd         0x00000900                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001df74         db         0xdc, 0xa5, 0xfe, 0xff                      ; begin 0x8550
000000000001df78         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x855c)
000000000001df7c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001df7d         align      128
000000000001df80         dd         0x00000010                                  ; Length of the record
000000000001df84         dd         0x00000914                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001df88         db         0xd8, 0xa5, 0xfe, 0xff                      ; begin 0x8560
000000000001df8c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x8578)
000000000001df90         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001df91         align      4
000000000001df94         dd         0x00000010                                  ; Length of the record
000000000001df98         dd         0x00000928                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001df9c         db         0xe4, 0xa5, 0xfe, 0xff                      ; begin 0x8580
000000000001dfa0         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x8594)
000000000001dfa4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001dfa5         align      8
000000000001dfa8         dd         0x00000018                                  ; Length of the record
000000000001dfac         dd         0x0000093c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001dfb0         db         0xf0, 0xa5, 0xfe, 0xff                      ; begin 0x85a0
000000000001dfb4         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x862e)
000000000001dfb8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001dfb9         db  0x44 ; 'D'
000000000001dfba         db  0x0e ; '.'
000000000001dfbb         db  0x50 ; 'P'
000000000001dfbc         db  0x02 ; '.'
000000000001dfbd         db  0x7f ; '.'
000000000001dfbe         db  0x0a ; '.'
000000000001dfbf         db  0x0e ; '.'
000000000001dfc0         db  0x08 ; '.'
000000000001dfc1         db  0x41 ; 'A'
000000000001dfc2         db  0x0b ; '.'
000000000001dfc3         db  0x00 ; '.'
000000000001dfc4         dd         0x00000018                                  ; Length of the record
000000000001dfc8         dd         0x00000958                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001dfcc         db         0x64, 0xa6, 0xfe, 0xff                      ; begin 0x8630
000000000001dfd0         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x86ba)
000000000001dfd4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001dfd5         db  0x44 ; 'D'
000000000001dfd6         db  0x0e ; '.'
000000000001dfd7         db  0x50 ; 'P'
000000000001dfd8         db  0x02 ; '.'
000000000001dfd9         db  0x7b ; '{'
000000000001dfda         db  0x0a ; '.'
000000000001dfdb         db  0x0e ; '.'
000000000001dfdc         db  0x08 ; '.'
000000000001dfdd         db  0x41 ; 'A'
000000000001dfde         db  0x0b ; '.'
000000000001dfdf         db  0x00 ; '.'
000000000001dfe0         dd         0x00000010                                  ; Length of the record
000000000001dfe4         dd         0x00000974                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001dfe8         db         0xd8, 0xa6, 0xfe, 0xff                      ; begin 0x86c0
000000000001dfec         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x86cc)
000000000001dff0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001dff1         align      4
000000000001dff4         dd         0x00000010                                  ; Length of the record
000000000001dff8         dd         0x00000988                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001dffc         db         0xd4, 0xa6, 0xfe, 0xff                      ; begin 0x86d0
000000000001e000         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x86df)
000000000001e004         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e005         align      8
000000000001e008         dd         0x00000018                                  ; Length of the record
000000000001e00c         dd         0x0000099c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e010         db         0xd0, 0xa6, 0xfe, 0xff                      ; begin 0x86e0
000000000001e014         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x8778)
000000000001e018         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e019         db  0x44 ; 'D'
000000000001e01a         db  0x0e ; '.'
000000000001e01b         db  0x50 ; 'P'
000000000001e01c         db  0x02 ; '.'
000000000001e01d         db  0x8e ; '.'
000000000001e01e         db  0x0a ; '.'
000000000001e01f         db  0x0e ; '.'
000000000001e020         db  0x08 ; '.'
000000000001e021         db  0x41 ; 'A'
000000000001e022         db  0x0b ; '.'
000000000001e023         db  0x00 ; '.'
000000000001e024         dd         0x00000010                                  ; Length of the record
000000000001e028         dd         0x000009b8                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e02c         db         0x54, 0xa7, 0xfe, 0xff                      ; begin 0x8780
000000000001e030         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x8790)
000000000001e034         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e035         align      8
000000000001e038         dd         0x00000010                                  ; Length of the record
000000000001e03c         dd         0x000009cc                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e040         db         0x50, 0xa7, 0xfe, 0xff                      ; begin 0x8790
000000000001e044         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x87a1)
000000000001e048         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e049         align      4
000000000001e04c         dd         0x00000010                                  ; Length of the record
000000000001e050         dd         0x000009e0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e054         db         0x5c, 0xa7, 0xfe, 0xff                      ; begin 0x87b0
000000000001e058         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x87ba)
000000000001e05c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e05d         align      32
000000000001e060         dd         0x00000018                                  ; Length of the record
000000000001e064         dd         0x000009f4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e068         db         0x58, 0xa7, 0xfe, 0xff                      ; begin 0x87c0
000000000001e06c         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x884e)
000000000001e070         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e071         db  0x44 ; 'D'
000000000001e072         db  0x0e ; '.'
000000000001e073         db  0x50 ; 'P'
000000000001e074         db  0x02 ; '.'
000000000001e075         db  0x7f ; '.'
000000000001e076         db  0x0a ; '.'
000000000001e077         db  0x0e ; '.'
000000000001e078         db  0x08 ; '.'
000000000001e079         db  0x41 ; 'A'
000000000001e07a         db  0x0b ; '.'
000000000001e07b         db  0x00 ; '.'
000000000001e07c         dd         0x00000018                                  ; Length of the record
000000000001e080         dd         0x00000a10                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e084         db         0xcc, 0xa7, 0xfe, 0xff                      ; begin 0x8850
000000000001e088         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x88e1)
000000000001e08c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e08d         db  0x44 ; 'D'
000000000001e08e         db  0x0e ; '.'
000000000001e08f         db  0x50 ; 'P'
000000000001e090         db  0x02 ; '.'
000000000001e091         db  0x82 ; '.'
000000000001e092         db  0x0a ; '.'
000000000001e093         db  0x0e ; '.'
000000000001e094         db  0x08 ; '.'
000000000001e095         db  0x41 ; 'A'
000000000001e096         db  0x0b ; '.'
000000000001e097         db  0x00 ; '.'
000000000001e098         dd         0x00000010                                  ; Length of the record
000000000001e09c         dd         0x00000a2c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e0a0         db         0x50, 0xa8, 0xfe, 0xff                      ; begin 0x88f0
000000000001e0a4         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x88fc)
000000000001e0a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e0a9         align      4
000000000001e0ac         dd         0x00000010                                  ; Length of the record
000000000001e0b0         dd         0x00000a40                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e0b4         db         0x4c, 0xa8, 0xfe, 0xff                      ; begin 0x8900
000000000001e0b8         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x8917)
000000000001e0bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e0bd         align      64
000000000001e0c0         dd         0x00000010                                  ; Length of the record
000000000001e0c4         dd         0x00000a54                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e0c8         db         0x58, 0xa8, 0xfe, 0xff                      ; begin 0x8920
000000000001e0cc         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x8933)
000000000001e0d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e0d1         align      4
000000000001e0d4         dd         0x00000010                                  ; Length of the record
000000000001e0d8         dd         0x00000a68                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e0dc         db         0x64, 0xa8, 0xfe, 0xff                      ; begin 0x8940
000000000001e0e0         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x894c)
000000000001e0e4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e0e5         align      8
000000000001e0e8         dd         0x00000010                                  ; Length of the record
000000000001e0ec         dd         0x00000a7c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e0f0         db         0x60, 0xa8, 0xfe, 0xff                      ; begin 0x8950
000000000001e0f4         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x8964)
000000000001e0f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e0f9         align      4
000000000001e0fc         dd         0x00000010                                  ; Length of the record
000000000001e100         dd         0x00000a90                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e104         db         0x6c, 0xa8, 0xfe, 0xff                      ; begin 0x8970
000000000001e108         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x8983)
000000000001e10c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e10d         align      16
000000000001e110         dd         0x00000014                                  ; Length of the record
000000000001e114         dd         0x00000aa4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e118         db         0x78, 0xa8, 0xfe, 0xff                      ; begin 0x8990
000000000001e11c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x89a8)
000000000001e120         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e121         align      8
000000000001e128         dd         0x0000004c                                  ; Length of the record
000000000001e12c         dd         0x00000abc                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e130         db         0x80, 0xa8, 0xfe, 0xff                      ; begin 0x89b0
000000000001e134         db         0xd8, 0x01, 2 dup (0x00)                    ; length 0x1d8 (end at 0x8b88)
000000000001e138         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e139         db  0x42 ; 'B'
000000000001e13a         db  0x0e ; '.'
000000000001e13b         db  0x10 ; '.'
000000000001e13c         db  0x8f ; '.'
000000000001e13d         db  0x02 ; '.'
000000000001e13e         db  0x42 ; 'B'
000000000001e13f         db  0x0e ; '.'
000000000001e140         db  0x18 ; '.'
000000000001e141         db  0x8e ; '.'
000000000001e142         db  0x03 ; '.'
000000000001e143         db  0x42 ; 'B'
000000000001e144         db  0x0e ; '.'
000000000001e145         db  0x20 ; ' '
000000000001e146         db  0x8d ; '.'
000000000001e147         db  0x04 ; '.'
000000000001e148         db  0x42 ; 'B'
000000000001e149         db  0x0e ; '.'
000000000001e14a         db  0x28 ; '('
000000000001e14b         db  0x8c ; '.'
000000000001e14c         db  0x05 ; '.'
000000000001e14d         db  0x44 ; 'D'
000000000001e14e         db  0x0e ; '.'
000000000001e14f         db  0x30 ; '0'
000000000001e150         db  0x86 ; '.'
000000000001e151         db  0x06 ; '.'
000000000001e152         db  0x41 ; 'A'
000000000001e153         db  0x0e ; '.'
000000000001e154         db  0x38 ; '8'
000000000001e155         db  0x83 ; '.'
000000000001e156         db  0x07 ; '.'
000000000001e157         db  0x47 ; 'G'
000000000001e158         db  0x0e ; '.'
000000000001e159         db  0xf0 ; '.'
000000000001e15a         db  0x01 ; '.'
000000000001e15b         db  0x03 ; '.'
000000000001e15c         db  0x1d ; '.'
000000000001e15d         db  0x01 ; '.'
000000000001e15e         db  0x0a ; '.'
000000000001e15f         db  0x0e ; '.'
000000000001e160         db  0x38 ; '8'
000000000001e161         db  0x41 ; 'A'
000000000001e162         db  0x0e ; '.'
000000000001e163         db  0x30 ; '0'
000000000001e164         db  0x41 ; 'A'
000000000001e165         db  0x0e ; '.'
000000000001e166         db  0x28 ; '('
000000000001e167         db  0x42 ; 'B'
000000000001e168         db  0x0e ; '.'
000000000001e169         db  0x20 ; ' '
000000000001e16a         db  0x42 ; 'B'
000000000001e16b         db  0x0e ; '.'
000000000001e16c         db  0x18 ; '.'
000000000001e16d         db  0x42 ; 'B'
000000000001e16e         db  0x0e ; '.'
000000000001e16f         db  0x10 ; '.'
000000000001e170         db  0x42 ; 'B'
000000000001e171         db  0x0e ; '.'
000000000001e172         db  0x08 ; '.'
000000000001e173         db  0x45 ; 'E'
000000000001e174         db  0x0b ; '.'
000000000001e175         db  0x00 ; '.'
000000000001e176         db  0x00 ; '.'
000000000001e177         db  0x00 ; '.'
000000000001e178         dd         0x00000038                                  ; Length of the record
000000000001e17c         dd         0x00000b0c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e180         db         0x10, 0xaa, 0xfe, 0xff                      ; begin 0x8b90
000000000001e184         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x8c04)
000000000001e188         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e189         db  0x42 ; 'B'
000000000001e18a         db  0x0e ; '.'
000000000001e18b         db  0x10 ; '.'
000000000001e18c         db  0x8d ; '.'
000000000001e18d         db  0x02 ; '.'
000000000001e18e         db  0x42 ; 'B'
000000000001e18f         db  0x0e ; '.'
000000000001e190         db  0x18 ; '.'
000000000001e191         db  0x8c ; '.'
000000000001e192         db  0x03 ; '.'
000000000001e193         db  0x41 ; 'A'
000000000001e194         db  0x0e ; '.'
000000000001e195         db  0x20 ; ' '
000000000001e196         db  0x86 ; '.'
000000000001e197         db  0x04 ; '.'
000000000001e198         db  0x41 ; 'A'
000000000001e199         db  0x0e ; '.'
000000000001e19a         db  0x28 ; '('
000000000001e19b         db  0x83 ; '.'
000000000001e19c         db  0x05 ; '.'
000000000001e19d         db  0x4a ; 'J'
000000000001e19e         db  0x0e ; '.'
000000000001e19f         db  0x30 ; '0'
000000000001e1a0         db  0x76 ; 'v'
000000000001e1a1         db  0x0a ; '.'
000000000001e1a2         db  0x0e ; '.'
000000000001e1a3         db  0x28 ; '('
000000000001e1a4         db  0x44 ; 'D'
000000000001e1a5         db  0x0e ; '.'
000000000001e1a6         db  0x20 ; ' '
000000000001e1a7         db  0x41 ; 'A'
000000000001e1a8         db  0x0e ; '.'
000000000001e1a9         db  0x18 ; '.'
000000000001e1aa         db  0x42 ; 'B'
000000000001e1ab         db  0x0e ; '.'
000000000001e1ac         db  0x10 ; '.'
000000000001e1ad         db  0x42 ; 'B'
000000000001e1ae         db  0x0e ; '.'
000000000001e1af         db  0x08 ; '.'
000000000001e1b0         db  0x41 ; 'A'
000000000001e1b1         db  0x0b ; '.'
000000000001e1b2         db  0x00 ; '.'
000000000001e1b3         db  0x00 ; '.'
000000000001e1b4         dd         0x00000010                                  ; Length of the record
000000000001e1b8         dd         0x00000b48                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e1bc         db         0x54, 0xaa, 0xfe, 0xff                      ; begin 0x8c10
000000000001e1c0         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x8c1c)
000000000001e1c4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e1c5         align      8
000000000001e1c8         dd         0x00000014                                  ; Length of the record
000000000001e1cc         dd         0x00000b5c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e1d0         db         0x50, 0xaa, 0xfe, 0xff                      ; begin 0x8c20
000000000001e1d4         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x8c2c)
000000000001e1d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e1d9         align      32
000000000001e1e0         dd         0x00000024                                  ; Length of the record
000000000001e1e4         dd         0x00000b74                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e1e8         db         0x48, 0xaa, 0xfe, 0xff                      ; begin 0x8c30
000000000001e1ec         db         0x31, 3 dup (0x00)                          ; length 0x31 (end at 0x8c61)
000000000001e1f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e1f1         db  0x41 ; 'A'
000000000001e1f2         db  0x0e ; '.'
000000000001e1f3         db  0x10 ; '.'
000000000001e1f4         db  0x86 ; '.'
000000000001e1f5         db  0x02 ; '.'
000000000001e1f6         db  0x41 ; 'A'
000000000001e1f7         db  0x0e ; '.'
000000000001e1f8         db  0x18 ; '.'
000000000001e1f9         db  0x83 ; '.'
000000000001e1fa         db  0x03 ; '.'
000000000001e1fb         db  0x4f ; 'O'
000000000001e1fc         db  0x0e ; '.'
000000000001e1fd         db  0x20 ; ' '
000000000001e1fe         db  0x5d ; ']'
000000000001e1ff         db  0x0e ; '.'
000000000001e200         db  0x18 ; '.'
000000000001e201         db  0x41 ; 'A'
000000000001e202         db  0x0e ; '.'
000000000001e203         db  0x10 ; '.'
000000000001e204         db  0x41 ; 'A'
000000000001e205         db  0x0e ; '.'
000000000001e206         db  0x08 ; '.'
000000000001e207         db  0x00 ; '.'
000000000001e208         dd         0x00000010                                  ; Length of the record
000000000001e20c         dd         0x00000b9c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e210         db         0x33, 0x3f, 0xfe, 0xff                      ; begin 0x2143
000000000001e214         db         0x23, 3 dup (0x00)                          ; length 0x23 (end at 0x2166)
000000000001e218         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e219         db  0x59 ; 'Y'
000000000001e21a         db  0x0e ; '.'
000000000001e21b         db  0x10 ; '.'
000000000001e21c         dd         0x00000050                                  ; Length of the record
000000000001e220         dd         0x00000bb0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e224         db         0x4c, 0xaa, 0xfe, 0xff                      ; begin 0x8c70
000000000001e228         db         0x2f, 0x06, 2 dup (0x00)                    ; length 0x62f (end at 0x929f)
000000000001e22c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e22d         db  0x42 ; 'B'
000000000001e22e         db  0x0e ; '.'
000000000001e22f         db  0x10 ; '.'
000000000001e230         db  0x8f ; '.'
000000000001e231         db  0x02 ; '.'
000000000001e232         db  0x42 ; 'B'
000000000001e233         db  0x0e ; '.'
000000000001e234         db  0x18 ; '.'
000000000001e235         db  0x8e ; '.'
000000000001e236         db  0x03 ; '.'
000000000001e237         db  0x42 ; 'B'
000000000001e238         db  0x0e ; '.'
000000000001e239         db  0x20 ; ' '
000000000001e23a         db  0x8d ; '.'
000000000001e23b         db  0x04 ; '.'
000000000001e23c         db  0x42 ; 'B'
000000000001e23d         db  0x0e ; '.'
000000000001e23e         db  0x28 ; '('
000000000001e23f         db  0x8c ; '.'
000000000001e240         db  0x05 ; '.'
000000000001e241         db  0x44 ; 'D'
000000000001e242         db  0x0e ; '.'
000000000001e243         db  0x30 ; '0'
000000000001e244         db  0x86 ; '.'
000000000001e245         db  0x06 ; '.'
000000000001e246         db  0x41 ; 'A'
000000000001e247         db  0x0e ; '.'
000000000001e248         db  0x38 ; '8'
000000000001e249         db  0x83 ; '.'
000000000001e24a         db  0x07 ; '.'
000000000001e24b         db  0x44 ; 'D'
000000000001e24c         db  0x0e ; '.'
000000000001e24d         db  0xb0 ; '.'
000000000001e24e         db  0x01 ; '.'
000000000001e24f         db  0x03 ; '.'
000000000001e250         db  0x1a ; '.'
000000000001e251         db  0x03 ; '.'
000000000001e252         db  0x0a ; '.'
000000000001e253         db  0x0e ; '.'
000000000001e254         db  0x38 ; '8'
000000000001e255         db  0x41 ; 'A'
000000000001e256         db  0x0e ; '.'
000000000001e257         db  0x30 ; '0'
000000000001e258         db  0x41 ; 'A'
000000000001e259         db  0x0e ; '.'
000000000001e25a         db  0x28 ; '('
000000000001e25b         db  0x42 ; 'B'
000000000001e25c         db  0x0e ; '.'
000000000001e25d         db  0x20 ; ' '
000000000001e25e         db  0x42 ; 'B'
000000000001e25f         db  0x0e ; '.'
000000000001e260         db  0x18 ; '.'
000000000001e261         db  0x42 ; 'B'
000000000001e262         db  0x0e ; '.'
000000000001e263         db  0x10 ; '.'
000000000001e264         db  0x42 ; 'B'
000000000001e265         db  0x0e ; '.'
000000000001e266         db  0x08 ; '.'
000000000001e267         db  0x4b ; 'K'
000000000001e268         db  0x0b ; '.'
000000000001e269         db  0x00 ; '.'
000000000001e26a         db  0x00 ; '.'
000000000001e26b         db  0x00 ; '.'
000000000001e26c         db  0x00 ; '.'
000000000001e26d         db  0x00 ; '.'
000000000001e26e         db  0x00 ; '.'
000000000001e26f         db  0x00 ; '.'
000000000001e270         dd         0x00000110                                  ; Length of the record
000000000001e274         dd         0x00000c04                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e278         db         0x28, 0xb0, 0xfe, 0xff                      ; begin 0x92a0
000000000001e27c         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x96b7)
000000000001e280         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e281         db  0x42 ; 'B'
000000000001e282         db  0x0e ; '.'
000000000001e283         db  0x10 ; '.'
000000000001e284         db  0x8f ; '.'
000000000001e285         db  0x02 ; '.'
000000000001e286         db  0x42 ; 'B'
000000000001e287         db  0x0e ; '.'
000000000001e288         db  0x18 ; '.'
000000000001e289         db  0x8e ; '.'
000000000001e28a         db  0x03 ; '.'
000000000001e28b         db  0x42 ; 'B'
000000000001e28c         db  0x0e ; '.'
000000000001e28d         db  0x20 ; ' '
000000000001e28e         db  0x8d ; '.'
000000000001e28f         db  0x04 ; '.'
000000000001e290         db  0x42 ; 'B'
000000000001e291         db  0x0e ; '.'
000000000001e292         db  0x28 ; '('
000000000001e293         db  0x8c ; '.'
000000000001e294         db  0x05 ; '.'
000000000001e295         db  0x44 ; 'D'
000000000001e296         db  0x0e ; '.'
000000000001e297         db  0x30 ; '0'
000000000001e298         db  0x86 ; '.'
000000000001e299         db  0x06 ; '.'
000000000001e29a         db  0x41 ; 'A'
000000000001e29b         db  0x0e ; '.'
000000000001e29c         db  0x38 ; '8'
000000000001e29d         db  0x83 ; '.'
000000000001e29e         db  0x07 ; '.'
000000000001e29f         db  0x4a ; 'J'
000000000001e2a0         db  0x0e ; '.'
000000000001e2a1         db  0x60 ; '`'
000000000001e2a2         db  0x02 ; '.'
000000000001e2a3         db  0xdd ; '.'
000000000001e2a4         db  0x0e ; '.'
000000000001e2a5         db  0x68 ; 'h'
000000000001e2a6         db  0x57 ; 'W'
000000000001e2a7         db  0x0e ; '.'
000000000001e2a8         db  0x70 ; 'p'
000000000001e2a9         db  0x42 ; 'B'
000000000001e2aa         db  0x0e ; '.'
000000000001e2ab         db  0x78 ; 'x'
000000000001e2ac         db  0x42 ; 'B'
000000000001e2ad         db  0x0e ; '.'
000000000001e2ae         db  0x80 ; '.'
000000000001e2af         db  0x01 ; '.'
000000000001e2b0         db  0x42 ; 'B'
000000000001e2b1         db  0x0e ; '.'
000000000001e2b2         db  0x88 ; '.'
000000000001e2b3         db  0x01 ; '.'
000000000001e2b4         db  0x42 ; 'B'
000000000001e2b5         db  0x0e ; '.'
000000000001e2b6         db  0x90 ; '.'
000000000001e2b7         db  0x01 ; '.'
000000000001e2b8         db  0x53 ; 'S'
000000000001e2b9         db  0x0e ; '.'
000000000001e2ba         db  0x60 ; '`'
000000000001e2bb         db  0x44 ; 'D'
000000000001e2bc         db  0x0a ; '.'
000000000001e2bd         db  0x0e ; '.'
000000000001e2be         db  0x38 ; '8'
000000000001e2bf         db  0x41 ; 'A'
000000000001e2c0         db  0x0e ; '.'
000000000001e2c1         db  0x30 ; '0'
000000000001e2c2         db  0x41 ; 'A'
000000000001e2c3         db  0x0e ; '.'
000000000001e2c4         db  0x28 ; '('
000000000001e2c5         db  0x42 ; 'B'
000000000001e2c6         db  0x0e ; '.'
000000000001e2c7         db  0x20 ; ' '
000000000001e2c8         db  0x42 ; 'B'
000000000001e2c9         db  0x0e ; '.'
000000000001e2ca         db  0x18 ; '.'
000000000001e2cb         db  0x42 ; 'B'
000000000001e2cc         db  0x0e ; '.'
000000000001e2cd         db  0x10 ; '.'
000000000001e2ce         db  0x42 ; 'B'
000000000001e2cf         db  0x0e ; '.'
000000000001e2d0         db  0x08 ; '.'
000000000001e2d1         db  0x44 ; 'D'
000000000001e2d2         db  0x0b ; '.'
000000000001e2d3         db  0x02 ; '.'
000000000001e2d4         db  0x78 ; 'x'
000000000001e2d5         db  0x0a ; '.'
000000000001e2d6         db  0x0e ; '.'
000000000001e2d7         db  0x68 ; 'h'
000000000001e2d8         db  0x48 ; 'H'
000000000001e2d9         db  0x0b ; '.'
000000000001e2da         db  0x5a ; 'Z'
000000000001e2db         db  0x0a ; '.'
000000000001e2dc         db  0x0e ; '.'
000000000001e2dd         db  0x38 ; '8'
000000000001e2de         db  0x47 ; 'G'
000000000001e2df         db  0x0e ; '.'
000000000001e2e0         db  0x30 ; '0'
000000000001e2e1         db  0x41 ; 'A'
000000000001e2e2         db  0x0e ; '.'
000000000001e2e3         db  0x28 ; '('
000000000001e2e4         db  0x42 ; 'B'
000000000001e2e5         db  0x0e ; '.'
000000000001e2e6         db  0x20 ; ' '
000000000001e2e7         db  0x42 ; 'B'
000000000001e2e8         db  0x0e ; '.'
000000000001e2e9         db  0x18 ; '.'
000000000001e2ea         db  0x42 ; 'B'
000000000001e2eb         db  0x0e ; '.'
000000000001e2ec         db  0x10 ; '.'
000000000001e2ed         db  0x42 ; 'B'
000000000001e2ee         db  0x0e ; '.'
000000000001e2ef         db  0x08 ; '.'
000000000001e2f0         db  0x56 ; 'V'
000000000001e2f1         db  0x0b ; '.'
000000000001e2f2         db  0x5e ; '^'
000000000001e2f3         db  0x0a ; '.'
000000000001e2f4         db  0x0e ; '.'
000000000001e2f5         db  0x38 ; '8'
000000000001e2f6         db  0x52 ; 'R'
000000000001e2f7         db  0x0e ; '.'
000000000001e2f8         db  0x30 ; '0'
000000000001e2f9         db  0x41 ; 'A'
000000000001e2fa         db  0x0e ; '.'
000000000001e2fb         db  0x28 ; '('
000000000001e2fc         db  0x42 ; 'B'
000000000001e2fd         db  0x0e ; '.'
000000000001e2fe         db  0x20 ; ' '
000000000001e2ff         db  0x42 ; 'B'
000000000001e300         db  0x0e ; '.'
000000000001e301         db  0x18 ; '.'
000000000001e302         db  0x42 ; 'B'
000000000001e303         db  0x0e ; '.'
000000000001e304         db  0x10 ; '.'
000000000001e305         db  0x42 ; 'B'
000000000001e306         db  0x0e ; '.'
000000000001e307         db  0x08 ; '.'
000000000001e308         db  0x4f ; 'O'
000000000001e309         db  0x0b ; '.'
000000000001e30a         db  0x62 ; 'b'
000000000001e30b         db  0x0a ; '.'
000000000001e30c         db  0x0e ; '.'
000000000001e30d         db  0x38 ; '8'
000000000001e30e         db  0x50 ; 'P'
000000000001e30f         db  0x0e ; '.'
000000000001e310         db  0x30 ; '0'
000000000001e311         db  0x41 ; 'A'
000000000001e312         db  0x0e ; '.'
000000000001e313         db  0x28 ; '('
000000000001e314         db  0x42 ; 'B'
000000000001e315         db  0x0e ; '.'
000000000001e316         db  0x20 ; ' '
000000000001e317         db  0x42 ; 'B'
000000000001e318         db  0x0e ; '.'
000000000001e319         db  0x18 ; '.'
000000000001e31a         db  0x42 ; 'B'
000000000001e31b         db  0x0e ; '.'
000000000001e31c         db  0x10 ; '.'
000000000001e31d         db  0x42 ; 'B'
000000000001e31e         db  0x0e ; '.'
000000000001e31f         db  0x08 ; '.'
000000000001e320         db  0x55 ; 'U'
000000000001e321         db  0x0b ; '.'
000000000001e322         db  0x66 ; 'f'
000000000001e323         db  0x0e ; '.'
000000000001e324         db  0x68 ; 'h'
000000000001e325         db  0x42 ; 'B'
000000000001e326         db  0x0e ; '.'
000000000001e327         db  0x70 ; 'p'
000000000001e328         db  0x5c ; '\'
000000000001e329         db  0x0e ; '.'
000000000001e32a         db  0x68 ; 'h'
000000000001e32b         db  0x41 ; 'A'
000000000001e32c         db  0x0e ; '.'
000000000001e32d         db  0x60 ; '`'
000000000001e32e         db  0x44 ; 'D'
000000000001e32f         db  0x0a ; '.'
000000000001e330         db  0x0e ; '.'
000000000001e331         db  0x38 ; '8'
000000000001e332         db  0x41 ; 'A'
000000000001e333         db  0x0e ; '.'
000000000001e334         db  0x30 ; '0'
000000000001e335         db  0x41 ; 'A'
000000000001e336         db  0x0e ; '.'
000000000001e337         db  0x28 ; '('
000000000001e338         db  0x42 ; 'B'
000000000001e339         db  0x0e ; '.'
000000000001e33a         db  0x20 ; ' '
000000000001e33b         db  0x42 ; 'B'
000000000001e33c         db  0x0e ; '.'
000000000001e33d         db  0x18 ; '.'
000000000001e33e         db  0x42 ; 'B'
000000000001e33f         db  0x0e ; '.'
000000000001e340         db  0x10 ; '.'
000000000001e341         db  0x42 ; 'B'
000000000001e342         db  0x0e ; '.'
000000000001e343         db  0x08 ; '.'
000000000001e344         db  0x45 ; 'E'
000000000001e345         db  0x0b ; '.'
000000000001e346         db  0x68 ; 'h'
000000000001e347         db  0x0a ; '.'
000000000001e348         db  0x0e ; '.'
000000000001e349         db  0x68 ; 'h'
000000000001e34a         db  0x48 ; 'H'
000000000001e34b         db  0x0b ; '.'
000000000001e34c         db  0x72 ; 'r'
000000000001e34d         db  0x0e ; '.'
000000000001e34e         db  0x68 ; 'h'
000000000001e34f         db  0x45 ; 'E'
000000000001e350         db  0x0e ; '.'
000000000001e351         db  0x70 ; 'p'
000000000001e352         db  0x42 ; 'B'
000000000001e353         db  0x0e ; '.'
000000000001e354         db  0x78 ; 'x'
000000000001e355         db  0x42 ; 'B'
000000000001e356         db  0x0e ; '.'
000000000001e357         db  0x80 ; '.'
000000000001e358         db  0x01 ; '.'
000000000001e359         db  0x5e ; '^'
000000000001e35a         db  0x0e ; '.'
000000000001e35b         db  0x60 ; '`'
000000000001e35c         db  0x44 ; 'D'
000000000001e35d         db  0x0a ; '.'
000000000001e35e         db  0x0e ; '.'
000000000001e35f         db  0x38 ; '8'
000000000001e360         db  0x41 ; 'A'
000000000001e361         db  0x0e ; '.'
000000000001e362         db  0x30 ; '0'
000000000001e363         db  0x41 ; 'A'
000000000001e364         db  0x0e ; '.'
000000000001e365         db  0x28 ; '('
000000000001e366         db  0x42 ; 'B'
000000000001e367         db  0x0e ; '.'
000000000001e368         db  0x20 ; ' '
000000000001e369         db  0x42 ; 'B'
000000000001e36a         db  0x0e ; '.'
000000000001e36b         db  0x18 ; '.'
000000000001e36c         db  0x42 ; 'B'
000000000001e36d         db  0x0e ; '.'
000000000001e36e         db  0x10 ; '.'
000000000001e36f         db  0x42 ; 'B'
000000000001e370         db  0x0e ; '.'
000000000001e371         db  0x08 ; '.'
000000000001e372         db  0x41 ; 'A'
000000000001e373         db  0x0b ; '.'
000000000001e374         db  0x79 ; 'y'
000000000001e375         db  0x0a ; '.'
000000000001e376         db  0x0e ; '.'
000000000001e377         db  0x68 ; 'h'
000000000001e378         db  0x42 ; 'B'
000000000001e379         db  0x0e ; '.'
000000000001e37a         db  0x70 ; 'p'
000000000001e37b         db  0x42 ; 'B'
000000000001e37c         db  0x0e ; '.'
000000000001e37d         db  0x78 ; 'x'
000000000001e37e         db  0x42 ; 'B'
000000000001e37f         db  0x0e ; '.'
000000000001e380         db  0x80 ; '.'
000000000001e381         db  0x01 ; '.'
000000000001e382         db  0x51 ; 'Q'
000000000001e383         db  0x0b ; '.'
000000000001e384         dd         0x00000010                                  ; Length of the record
000000000001e388         dd         0x00000d18                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e38c         db         0x34, 0xb3, 0xfe, 0xff                      ; begin 0x96c0
000000000001e390         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x96e0)
000000000001e394         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e395         align      8
000000000001e398         dd         0x00000018                                  ; Length of the record
000000000001e39c         dd         0x00000d2c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e3a0         db         0x40, 0xb3, 0xfe, 0xff                      ; begin 0x96e0
000000000001e3a4         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x9758)
000000000001e3a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e3a9         db  0x44 ; 'D'
000000000001e3aa         db  0x0e ; '.'
000000000001e3ab         db  0x70 ; 'p'
000000000001e3ac         db  0x02 ; '.'
000000000001e3ad         db  0x60 ; '`'
000000000001e3ae         db  0x0a ; '.'
000000000001e3af         db  0x0e ; '.'
000000000001e3b0         db  0x08 ; '.'
000000000001e3b1         db  0x41 ; 'A'
000000000001e3b2         db  0x0b ; '.'
000000000001e3b3         db  0x00 ; '.'
000000000001e3b4         dd         0x00000028                                  ; Length of the record
000000000001e3b8         dd         0x00000d48                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e3bc         db         0xa4, 0xb3, 0xfe, 0xff                      ; begin 0x9760
000000000001e3c0         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x9835)
000000000001e3c4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e3c5         db  0x41 ; 'A'
000000000001e3c6         db  0x0e ; '.'
000000000001e3c7         db  0x10 ; '.'
000000000001e3c8         db  0x86 ; '.'
000000000001e3c9         db  0x02 ; '.'
000000000001e3ca         db  0x41 ; 'A'
000000000001e3cb         db  0x0e ; '.'
000000000001e3cc         db  0x18 ; '.'
000000000001e3cd         db  0x83 ; '.'
000000000001e3ce         db  0x03 ; '.'
000000000001e3cf         db  0x50 ; 'P'
000000000001e3d0         db  0x0e ; '.'
000000000001e3d1         db  0xd0 ; '.'
000000000001e3d2         db  0x01 ; '.'
000000000001e3d3         db  0x02 ; '.'
000000000001e3d4         db  0xab ; '.'
000000000001e3d5         db  0x0a ; '.'
000000000001e3d6         db  0x0e ; '.'
000000000001e3d7         db  0x18 ; '.'
000000000001e3d8         db  0x41 ; 'A'
000000000001e3d9         db  0x0e ; '.'
000000000001e3da         db  0x10 ; '.'
000000000001e3db         db  0x41 ; 'A'
000000000001e3dc         db  0x0e ; '.'
000000000001e3dd         db  0x08 ; '.'
000000000001e3de         db  0x41 ; 'A'
000000000001e3df         db  0x0b ; '.'
000000000001e3e0         dd         0x0000001c                                  ; Length of the record
000000000001e3e4         dd         0x00000d74                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e3e8         db         0x58, 0xb4, 0xfe, 0xff                      ; begin 0x9840
000000000001e3ec         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x98c0)
000000000001e3f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e3f1         db  0x41 ; 'A'
000000000001e3f2         db  0x0e ; '.'
000000000001e3f3         db  0x10 ; '.'
000000000001e3f4         db  0x83 ; '.'
000000000001e3f5         db  0x02 ; '.'
000000000001e3f6         db  0x02 ; '.'
000000000001e3f7         db  0x7a ; 'z'
000000000001e3f8         db  0x0e ; '.'
000000000001e3f9         db  0x08 ; '.'
000000000001e3fa         db  0x00 ; '.'
000000000001e3fb         db  0x00 ; '.'
000000000001e3fc         db  0x00 ; '.'
000000000001e3fd         db  0x00 ; '.'
000000000001e3fe         db  0x00 ; '.'
000000000001e3ff         db  0x00 ; '.'
000000000001e400         dd         0x00000018                                  ; Length of the record
000000000001e404         dd         0x00000d94                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e408         db         0xb8, 0xb4, 0xfe, 0xff                      ; begin 0x98c0
000000000001e40c         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x98da)
000000000001e410         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e411         db  0x41 ; 'A'
000000000001e412         db  0x0e ; '.'
000000000001e413         db  0x10 ; '.'
000000000001e414         db  0x83 ; '.'
000000000001e415         db  0x02 ; '.'
000000000001e416         db  0x53 ; 'S'
000000000001e417         db  0x0a ; '.'
000000000001e418         db  0x0e ; '.'
000000000001e419         db  0x08 ; '.'
000000000001e41a         db  0x41 ; 'A'
000000000001e41b         db  0x0b ; '.'
000000000001e41c         dd         0x00000010                                  ; Length of the record
000000000001e420         dd         0x00000db0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e424         db         0xbc, 0xb4, 0xfe, 0xff                      ; begin 0x98e0
000000000001e428         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x9904)
000000000001e42c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e42d         db  0x5f ; '_'
000000000001e42e         db  0x0e ; '.'
000000000001e42f         db  0x10 ; '.'
000000000001e430         dd         0x00000010                                  ; Length of the record
000000000001e434         dd         0x00000dc4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e438         db         0xd8, 0xb4, 0xfe, 0xff                      ; begin 0x9910
000000000001e43c         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x9912)
000000000001e440         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e441         align      4
000000000001e444         dd         0x00000020                                  ; Length of the record
000000000001e448         dd         0x00000dd8                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e44c         db         0xd4, 0xb4, 0xfe, 0xff                      ; begin 0x9920
000000000001e450         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x9956)
000000000001e454         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e455         db  0x44 ; 'D'
000000000001e456         db  0x0e ; '.'
000000000001e457         db  0x10 ; '.'
000000000001e458         db  0x83 ; '.'
000000000001e459         db  0x02 ; '.'
000000000001e45a         db  0x5d ; ']'
000000000001e45b         db  0x0a ; '.'
000000000001e45c         db  0x0e ; '.'
000000000001e45d         db  0x08 ; '.'
000000000001e45e         db  0x47 ; 'G'
000000000001e45f         db  0x0b ; '.'
000000000001e460         db  0x48 ; 'H'
000000000001e461         db  0x0a ; '.'
000000000001e462         db  0x0e ; '.'
000000000001e463         db  0x08 ; '.'
000000000001e464         db  0x41 ; 'A'
000000000001e465         db  0x0b ; '.'
000000000001e466         db  0x00 ; '.'
000000000001e467         db  0x00 ; '.'
000000000001e468         dd         0x00000010                                  ; Length of the record
000000000001e46c         dd         0x00000dfc                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e470         db         0xf0, 0xb4, 0xfe, 0xff                      ; begin 0x9960
000000000001e474         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x9984)
000000000001e478         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e479         db  0x5f ; '_'
000000000001e47a         db  0x0e ; '.'
000000000001e47b         db  0x10 ; '.'
000000000001e47c         dd         0x00000014                                  ; Length of the record
000000000001e480         dd         0x00000e10                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e484         db         0x0c, 0xb5, 0xfe, 0xff                      ; begin 0x9990
000000000001e488         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x9a12)
000000000001e48c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e48d         db  0x02 ; '.'
000000000001e48e         db  0x5f ; '_'
000000000001e48f         db  0x0e ; '.'
000000000001e490         db  0x10 ; '.'
000000000001e491         db  0x49 ; 'I'
000000000001e492         db  0x0e ; '.'
000000000001e493         db  0x08 ; '.'
000000000001e494         dd         0x00000014                                  ; Length of the record
000000000001e498         dd         0x00000e28                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e49c         db         0x84, 0xb5, 0xfe, 0xff                      ; begin 0x9a20
000000000001e4a0         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x9a6a)
000000000001e4a4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e4a5         db  0x02 ; '.'
000000000001e4a6         db  0x45 ; 'E'
000000000001e4a7         db  0x0e ; '.'
000000000001e4a8         db  0x10 ; '.'
000000000001e4a9         db  0x00 ; '.'
000000000001e4aa         db  0x00 ; '.'
000000000001e4ab         db  0x00 ; '.'
000000000001e4ac         dd         0x00000018                                  ; Length of the record
000000000001e4b0         dd         0x00000e40                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e4b4         db         0xbc, 0xb5, 0xfe, 0xff                      ; begin 0x9a70
000000000001e4b8         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x9a87)
000000000001e4bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e4bd         db  0x41 ; 'A'
000000000001e4be         db  0x0e ; '.'
000000000001e4bf         db  0x10 ; '.'
000000000001e4c0         db  0x83 ; '.'
000000000001e4c1         db  0x02 ; '.'
000000000001e4c2         db  0x51 ; 'Q'
000000000001e4c3         db  0x0e ; '.'
000000000001e4c4         db  0x08 ; '.'
000000000001e4c5         db  0x00 ; '.'
000000000001e4c6         db  0x00 ; '.'
000000000001e4c7         db  0x00 ; '.'
000000000001e4c8         dd         0x00000018                                  ; Length of the record
000000000001e4cc         dd         0x00000e5c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e4d0         db         0xc0, 0xb5, 0xfe, 0xff                      ; begin 0x9a90
000000000001e4d4         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x9abe)
000000000001e4d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e4d9         db  0x47 ; 'G'
000000000001e4da         db  0x0e ; '.'
000000000001e4db         db  0x10 ; '.'
000000000001e4dc         db  0x61 ; 'a'
000000000001e4dd         db  0x0a ; '.'
000000000001e4de         db  0x0e ; '.'
000000000001e4df         db  0x08 ; '.'
000000000001e4e0         db  0x41 ; 'A'
000000000001e4e1         db  0x0b ; '.'
000000000001e4e2         db  0x00 ; '.'
000000000001e4e3         db  0x00 ; '.'
000000000001e4e4         dd         0x00000024                                  ; Length of the record
000000000001e4e8         dd         0x00000e78                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e4ec         db         0xd4, 0xb5, 0xfe, 0xff                      ; begin 0x9ac0
000000000001e4f0         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x9ae8)
000000000001e4f4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e4f5         db  0x41 ; 'A'
000000000001e4f6         db  0x0e ; '.'
000000000001e4f7         db  0x10 ; '.'
000000000001e4f8         db  0x86 ; '.'
000000000001e4f9         db  0x02 ; '.'
000000000001e4fa         db  0x41 ; 'A'
000000000001e4fb         db  0x0e ; '.'
000000000001e4fc         db  0x18 ; '.'
000000000001e4fd         db  0x83 ; '.'
000000000001e4fe         db  0x03 ; '.'
000000000001e4ff         db  0x4d ; 'M'
000000000001e500         db  0x0e ; '.'
000000000001e501         db  0x20 ; ' '
000000000001e502         db  0x49 ; 'I'
000000000001e503         db  0x0e ; '.'
000000000001e504         db  0x18 ; '.'
000000000001e505         db  0x47 ; 'G'
000000000001e506         db  0x0e ; '.'
000000000001e507         db  0x10 ; '.'
000000000001e508         db  0x41 ; 'A'
000000000001e509         db  0x0e ; '.'
000000000001e50a         db  0x08 ; '.'
000000000001e50b         db  0x00 ; '.'
000000000001e50c         dd         0x00000018                                  ; Length of the record
000000000001e510         dd         0x00000ea0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e514         db         0xdc, 0xb5, 0xfe, 0xff                      ; begin 0x9af0
000000000001e518         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x9b03)
000000000001e51c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e51d         db  0x41 ; 'A'
000000000001e51e         db  0x0e ; '.'
000000000001e51f         db  0x10 ; '.'
000000000001e520         db  0x83 ; '.'
000000000001e521         db  0x02 ; '.'
000000000001e522         db  0x50 ; 'P'
000000000001e523         db  0x0e ; '.'
000000000001e524         db  0x08 ; '.'
000000000001e525         db  0x00 ; '.'
000000000001e526         db  0x00 ; '.'
000000000001e527         db  0x00 ; '.'
000000000001e528         dd         0x00000014                                  ; Length of the record
000000000001e52c         dd         0x00000ebc                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e530         db         0xe0, 0xb5, 0xfe, 0xff                      ; begin 0x9b10
000000000001e534         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x9b45)
000000000001e538         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e539         db  0x4b ; 'K'
000000000001e53a         db  0x0e ; '.'
000000000001e53b         db  0x10 ; '.'
000000000001e53c         db  0x00 ; '.'
000000000001e53d         db  0x00 ; '.'
000000000001e53e         db  0x00 ; '.'
000000000001e53f         db  0x00 ; '.'
000000000001e540         dd         0x00000018                                  ; Length of the record
000000000001e544         dd         0x00000ed4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e548         db         0x08, 0xb6, 0xfe, 0xff                      ; begin 0x9b50
000000000001e54c         db         0x1f, 3 dup (0x00)                          ; length 0x1f (end at 0x9b6f)
000000000001e550         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e551         db  0x41 ; 'A'
000000000001e552         db  0x0e ; '.'
000000000001e553         db  0x10 ; '.'
000000000001e554         db  0x83 ; '.'
000000000001e555         db  0x02 ; '.'
000000000001e556         db  0x4e ; 'N'
000000000001e557         db  0x0a ; '.'
000000000001e558         db  0x0e ; '.'
000000000001e559         db  0x08 ; '.'
000000000001e55a         db  0x41 ; 'A'
000000000001e55b         db  0x0b ; '.'
000000000001e55c         dd         0x00000018                                  ; Length of the record
000000000001e560         dd         0x00000ef0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e564         db         0x0c, 0xb6, 0xfe, 0xff                      ; begin 0x9b70
000000000001e568         db         0x27, 3 dup (0x00)                          ; length 0x27 (end at 0x9b97)
000000000001e56c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e56d         db  0x41 ; 'A'
000000000001e56e         db  0x0e ; '.'
000000000001e56f         db  0x10 ; '.'
000000000001e570         db  0x83 ; '.'
000000000001e571         db  0x02 ; '.'
000000000001e572         db  0x51 ; 'Q'
000000000001e573         db  0x0a ; '.'
000000000001e574         db  0x0e ; '.'
000000000001e575         db  0x08 ; '.'
000000000001e576         db  0x46 ; 'F'
000000000001e577         db  0x0b ; '.'
000000000001e578         dd         0x0000001c                                  ; Length of the record
000000000001e57c         dd         0x00000f0c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e580         db         0x20, 0xb6, 0xfe, 0xff                      ; begin 0x9ba0
000000000001e584         db         0x27, 3 dup (0x00)                          ; length 0x27 (end at 0x9bc7)
000000000001e588         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e589         db  0x41 ; 'A'
000000000001e58a         db  0x0e ; '.'
000000000001e58b         db  0x10 ; '.'
000000000001e58c         db  0x83 ; '.'
000000000001e58d         db  0x02 ; '.'
000000000001e58e         db  0x51 ; 'Q'
000000000001e58f         db  0x0a ; '.'
000000000001e590         db  0x0e ; '.'
000000000001e591         db  0x08 ; '.'
000000000001e592         db  0x46 ; 'F'
000000000001e593         db  0x0b ; '.'
000000000001e594         db  0x00 ; '.'
000000000001e595         db  0x00 ; '.'
000000000001e596         db  0x00 ; '.'
000000000001e597         db  0x00 ; '.'
000000000001e598         dd         0x0000004c                                  ; Length of the record
000000000001e59c         dd         0x00000f2c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e5a0         db         0x30, 0xb6, 0xfe, 0xff                      ; begin 0x9bd0
000000000001e5a4         db         0xb3, 0x06, 2 dup (0x00)                    ; length 0x6b3 (end at 0xa283)
000000000001e5a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e5a9         db  0x42 ; 'B'
000000000001e5aa         db  0x0e ; '.'
000000000001e5ab         db  0x10 ; '.'
000000000001e5ac         db  0x8f ; '.'
000000000001e5ad         db  0x02 ; '.'
000000000001e5ae         db  0x42 ; 'B'
000000000001e5af         db  0x0e ; '.'
000000000001e5b0         db  0x18 ; '.'
000000000001e5b1         db  0x8e ; '.'
000000000001e5b2         db  0x03 ; '.'
000000000001e5b3         db  0x42 ; 'B'
000000000001e5b4         db  0x0e ; '.'
000000000001e5b5         db  0x20 ; ' '
000000000001e5b6         db  0x8d ; '.'
000000000001e5b7         db  0x04 ; '.'
000000000001e5b8         db  0x42 ; 'B'
000000000001e5b9         db  0x0e ; '.'
000000000001e5ba         db  0x28 ; '('
000000000001e5bb         db  0x8c ; '.'
000000000001e5bc         db  0x05 ; '.'
000000000001e5bd         db  0x41 ; 'A'
000000000001e5be         db  0x0e ; '.'
000000000001e5bf         db  0x30 ; '0'
000000000001e5c0         db  0x86 ; '.'
000000000001e5c1         db  0x06 ; '.'
000000000001e5c2         db  0x41 ; 'A'
000000000001e5c3         db  0x0e ; '.'
000000000001e5c4         db  0x38 ; '8'
000000000001e5c5         db  0x83 ; '.'
000000000001e5c6         db  0x07 ; '.'
000000000001e5c7         db  0x44 ; 'D'
000000000001e5c8         db  0x0e ; '.'
000000000001e5c9         db  0x60 ; '`'
000000000001e5ca         db  0x02 ; '.'
000000000001e5cb         db  0x96 ; '.'
000000000001e5cc         db  0x0a ; '.'
000000000001e5cd         db  0x0e ; '.'
000000000001e5ce         db  0x38 ; '8'
000000000001e5cf         db  0x41 ; 'A'
000000000001e5d0         db  0x0e ; '.'
000000000001e5d1         db  0x30 ; '0'
000000000001e5d2         db  0x41 ; 'A'
000000000001e5d3         db  0x0e ; '.'
000000000001e5d4         db  0x28 ; '('
000000000001e5d5         db  0x42 ; 'B'
000000000001e5d6         db  0x0e ; '.'
000000000001e5d7         db  0x20 ; ' '
000000000001e5d8         db  0x42 ; 'B'
000000000001e5d9         db  0x0e ; '.'
000000000001e5da         db  0x18 ; '.'
000000000001e5db         db  0x42 ; 'B'
000000000001e5dc         db  0x0e ; '.'
000000000001e5dd         db  0x10 ; '.'
000000000001e5de         db  0x42 ; 'B'
000000000001e5df         db  0x0e ; '.'
000000000001e5e0         db  0x08 ; '.'
000000000001e5e1         db  0x42 ; 'B'
000000000001e5e2         db  0x0b ; '.'
000000000001e5e3         db  0x00 ; '.'
000000000001e5e4         db  0x00 ; '.'
000000000001e5e5         db  0x00 ; '.'
000000000001e5e6         db  0x00 ; '.'
000000000001e5e7         db  0x00 ; '.'
000000000001e5e8         dd         0x00000034                                  ; Length of the record
000000000001e5ec         dd         0x00000f7c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e5f0         db         0xa0, 0xbc, 0xfe, 0xff                      ; begin 0xa290
000000000001e5f4         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0xa30b)
000000000001e5f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e5f9         db  0x42 ; 'B'
000000000001e5fa         db  0x0e ; '.'
000000000001e5fb         db  0x10 ; '.'
000000000001e5fc         db  0x8c ; '.'
000000000001e5fd         db  0x02 ; '.'
000000000001e5fe         db  0x41 ; 'A'
000000000001e5ff         db  0x0e ; '.'
000000000001e600         db  0x18 ; '.'
000000000001e601         db  0x86 ; '.'
000000000001e602         db  0x03 ; '.'
000000000001e603         db  0x41 ; 'A'
000000000001e604         db  0x0e ; '.'
000000000001e605         db  0x20 ; ' '
000000000001e606         db  0x83 ; '.'
000000000001e607         db  0x04 ; '.'
000000000001e608         db  0x7d ; '}'
000000000001e609         db  0x0a ; '.'
000000000001e60a         db  0x0e ; '.'
000000000001e60b         db  0x18 ; '.'
000000000001e60c         db  0x41 ; 'A'
000000000001e60d         db  0x0e ; '.'
000000000001e60e         db  0x10 ; '.'
000000000001e60f         db  0x42 ; 'B'
000000000001e610         db  0x0e ; '.'
000000000001e611         db  0x08 ; '.'
000000000001e612         db  0x44 ; 'D'
000000000001e613         db  0x0b ; '.'
000000000001e614         db  0x60 ; '`'
000000000001e615         db  0x0a ; '.'
000000000001e616         db  0x0e ; '.'
000000000001e617         db  0x18 ; '.'
000000000001e618         db  0x41 ; 'A'
000000000001e619         db  0x0e ; '.'
000000000001e61a         db  0x10 ; '.'
000000000001e61b         db  0x42 ; 'B'
000000000001e61c         db  0x0e ; '.'
000000000001e61d         db  0x08 ; '.'
000000000001e61e         db  0x45 ; 'E'
000000000001e61f         db  0x0b ; '.'
000000000001e620         dd         0x0000001c                                  ; Length of the record
000000000001e624         dd         0x00000fb4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e628         db         0xe8, 0xbc, 0xfe, 0xff                      ; begin 0xa310
000000000001e62c         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0xa350)
000000000001e630         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e631         db  0x44 ; 'D'
000000000001e632         db  0x0e ; '.'
000000000001e633         db  0x10 ; '.'
000000000001e634         db  0x83 ; '.'
000000000001e635         db  0x02 ; '.'
000000000001e636         db  0x5a ; 'Z'
000000000001e637         db  0x0a ; '.'
000000000001e638         db  0x0e ; '.'
000000000001e639         db  0x08 ; '.'
000000000001e63a         db  0x4a ; 'J'
000000000001e63b         db  0x0b ; '.'
000000000001e63c         db  0x53 ; 'S'
000000000001e63d         db  0x0e ; '.'
000000000001e63e         db  0x08 ; '.'
000000000001e63f         db  0x00 ; '.'
000000000001e640         dd         0x0000002c                                  ; Length of the record
000000000001e644         dd         0x00000fd4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e648         db         0x08, 0xbd, 0xfe, 0xff                      ; begin 0xa350
000000000001e64c         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0xa3a7)
000000000001e650         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e651         db  0x63 ; 'c'
000000000001e652         db  0x0e ; '.'
000000000001e653         db  0x10 ; '.'
000000000001e654         db  0x8c ; '.'
000000000001e655         db  0x02 ; '.'
000000000001e656         db  0x41 ; 'A'
000000000001e657         db  0x0e ; '.'
000000000001e658         db  0x18 ; '.'
000000000001e659         db  0x86 ; '.'
000000000001e65a         db  0x03 ; '.'
000000000001e65b         db  0x44 ; 'D'
000000000001e65c         db  0x0e ; '.'
000000000001e65d         db  0x20 ; ' '
000000000001e65e         db  0x83 ; '.'
000000000001e65f         db  0x04 ; '.'
000000000001e660         db  0x6b ; 'k'
000000000001e661         db  0x0e ; '.'
000000000001e662         db  0x18 ; '.'
000000000001e663         db  0x41 ; 'A'
000000000001e664         db  0x0e ; '.'
000000000001e665         db  0x10 ; '.'
000000000001e666         db  0x42 ; 'B'
000000000001e667         db  0x0e ; '.'
000000000001e668         db  0x08 ; '.'
000000000001e669         db  0x00 ; '.'
000000000001e66a         db  0x00 ; '.'
000000000001e66b         db  0x00 ; '.'
000000000001e66c         db  0x00 ; '.'
000000000001e66d         db  0x00 ; '.'
000000000001e66e         db  0x00 ; '.'
000000000001e66f         db  0x00 ; '.'
000000000001e670         dd         0x0000003c                                  ; Length of the record
000000000001e674         dd         0x00001004                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e678         db         0x38, 0xbd, 0xfe, 0xff                      ; begin 0xa3b0
000000000001e67c         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0xa433)
000000000001e680         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e681         db  0x42 ; 'B'
000000000001e682         db  0x0e ; '.'
000000000001e683         db  0x10 ; '.'
000000000001e684         db  0x8d ; '.'
000000000001e685         db  0x02 ; '.'
000000000001e686         db  0x42 ; 'B'
000000000001e687         db  0x0e ; '.'
000000000001e688         db  0x18 ; '.'
000000000001e689         db  0x8c ; '.'
000000000001e68a         db  0x03 ; '.'
000000000001e68b         db  0x44 ; 'D'
000000000001e68c         db  0x0e ; '.'
000000000001e68d         db  0x20 ; ' '
000000000001e68e         db  0x86 ; '.'
000000000001e68f         db  0x04 ; '.'
000000000001e690         db  0x41 ; 'A'
000000000001e691         db  0x0e ; '.'
000000000001e692         db  0x28 ; '('
000000000001e693         db  0x83 ; '.'
000000000001e694         db  0x05 ; '.'
000000000001e695         db  0x4a ; 'J'
000000000001e696         db  0x0e ; '.'
000000000001e697         db  0x40 ; '@'
000000000001e698         db  0x02 ; '.'
000000000001e699         db  0x64 ; 'd'
000000000001e69a         db  0x0a ; '.'
000000000001e69b         db  0x0e ; '.'
000000000001e69c         db  0x28 ; '('
000000000001e69d         db  0x41 ; 'A'
000000000001e69e         db  0x0e ; '.'
000000000001e69f         db  0x20 ; ' '
000000000001e6a0         db  0x41 ; 'A'
000000000001e6a1         db  0x0e ; '.'
000000000001e6a2         db  0x18 ; '.'
000000000001e6a3         db  0x42 ; 'B'
000000000001e6a4         db  0x0e ; '.'
000000000001e6a5         db  0x10 ; '.'
000000000001e6a6         db  0x42 ; 'B'
000000000001e6a7         db  0x0e ; '.'
000000000001e6a8         db  0x08 ; '.'
000000000001e6a9         db  0x41 ; 'A'
000000000001e6aa         db  0x0b ; '.'
000000000001e6ab         db  0x00 ; '.'
000000000001e6ac         db  0x00 ; '.'
000000000001e6ad         db  0x00 ; '.'
000000000001e6ae         db  0x00 ; '.'
000000000001e6af         db  0x00 ; '.'
000000000001e6b0         dd         0x00000010                                  ; Length of the record
000000000001e6b4         dd         0x00001044                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e6b8         db         0x88, 0xbd, 0xfe, 0xff                      ; begin 0xa440
000000000001e6bc         db         0x2f, 0x01, 2 dup (0x00)                    ; length 0x12f (end at 0xa56f)
000000000001e6c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e6c1         align      4
000000000001e6c4         dd         0x00000010                                  ; Length of the record
000000000001e6c8         dd         0x00001058                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e6cc         db         0xa4, 0xbe, 0xfe, 0xff                      ; begin 0xa570
000000000001e6d0         db         0x1d, 3 dup (0x00)                          ; length 0x1d (end at 0xa58d)
000000000001e6d4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e6d5         align      4
000000000001e6dc         dd         0x0000106c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e6e0         db         0xb0, 0xbe, 0xfe, 0xff                      ; begin 0xa590
000000000001e6e4         db         0x2c, 0x02, 2 dup (0x00)                    ; length 0x22c (end at 0xa7bc)
000000000001e6e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e6e9         db  0x42 ; 'B'
000000000001e6ea         db  0x0e ; '.'
000000000001e6eb         db  0x10 ; '.'
000000000001e6ec         db  0x8f ; '.'
000000000001e6ed         db  0x02 ; '.'
000000000001e6ee         db  0x42 ; 'B'
000000000001e6ef         db  0x0e ; '.'
000000000001e6f0         db  0x18 ; '.'
000000000001e6f1         db  0x8e ; '.'
000000000001e6f2         db  0x03 ; '.'
000000000001e6f3         db  0x45 ; 'E'
000000000001e6f4         db  0x0e ; '.'
000000000001e6f5         db  0x20 ; ' '
000000000001e6f6         db  0x8d ; '.'
000000000001e6f7         db  0x04 ; '.'
000000000001e6f8         db  0x42 ; 'B'
000000000001e6f9         db  0x0e ; '.'
000000000001e6fa         db  0x28 ; '('
000000000001e6fb         db  0x8c ; '.'
000000000001e6fc         db  0x05 ; '.'
000000000001e6fd         db  0x45 ; 'E'
000000000001e6fe         db  0x0e ; '.'
000000000001e6ff         db  0x30 ; '0'
000000000001e700         db  0x86 ; '.'
000000000001e701         db  0x06 ; '.'
000000000001e702         db  0x41 ; 'A'
000000000001e703         db  0x0e ; '.'
000000000001e704         db  0x38 ; '8'
000000000001e705         db  0x83 ; '.'
000000000001e706         db  0x07 ; '.'
000000000001e707         db  0x47 ; 'G'
000000000001e708         db  0x0e ; '.'
000000000001e709         db  0x80 ; '.'
000000000001e70a         db  0x01 ; '.'
000000000001e70b         db  0x02 ; '.'
000000000001e70c         db  0xba ; '.'
000000000001e70d         db  0x0a ; '.'
000000000001e70e         db  0x0e ; '.'
000000000001e70f         db  0x38 ; '8'
000000000001e710         db  0x46 ; 'F'
000000000001e711         db  0x0e ; '.'
000000000001e712         db  0x30 ; '0'
000000000001e713         db  0x41 ; 'A'
000000000001e714         db  0x0e ; '.'
000000000001e715         db  0x28 ; '('
000000000001e716         db  0x42 ; 'B'
000000000001e717         db  0x0e ; '.'
000000000001e718         db  0x20 ; ' '
000000000001e719         db  0x42 ; 'B'
000000000001e71a         db  0x0e ; '.'
000000000001e71b         db  0x18 ; '.'
000000000001e71c         db  0x42 ; 'B'
000000000001e71d         db  0x0e ; '.'
000000000001e71e         db  0x10 ; '.'
000000000001e71f         db  0x42 ; 'B'
000000000001e720         db  0x0e ; '.'
000000000001e721         db  0x08 ; '.'
000000000001e722         db  0x47 ; 'G'
000000000001e723         db  0x0b ; '.'
000000000001e724         db  0x02 ; '.'
000000000001e725         db  0xe1 ; '.'
000000000001e726         db  0x0a ; '.'
000000000001e727         db  0x0e ; '.'
000000000001e728         db  0x38 ; '8'
000000000001e729         db  0x44 ; 'D'
000000000001e72a         db  0x0e ; '.'
000000000001e72b         db  0x30 ; '0'
000000000001e72c         db  0x43 ; 'C'
000000000001e72d         db  0x0e ; '.'
000000000001e72e         db  0x28 ; '('
000000000001e72f         db  0x42 ; 'B'
000000000001e730         db  0x0e ; '.'
000000000001e731         db  0x20 ; ' '
000000000001e732         db  0x42 ; 'B'
000000000001e733         db  0x0e ; '.'
000000000001e734         db  0x18 ; '.'
000000000001e735         db  0x42 ; 'B'
000000000001e736         db  0x0e ; '.'
000000000001e737         db  0x10 ; '.'
000000000001e738         db  0x42 ; 'B'
000000000001e739         db  0x0e ; '.'
000000000001e73a         db  0x08 ; '.'
000000000001e73b         db  0x48 ; 'H'
000000000001e73c         db  0x0b ; '.'
000000000001e73d         db  0x59 ; 'Y'
000000000001e73e         db  0x0a ; '.'
000000000001e73f         db  0x0e ; '.'
000000000001e740         db  0x38 ; '8'
000000000001e741         db  0x43 ; 'C'
000000000001e742         db  0x0e ; '.'
000000000001e743         db  0x30 ; '0'
000000000001e744         db  0x41 ; 'A'
000000000001e745         db  0x0e ; '.'
000000000001e746         db  0x28 ; '('
000000000001e747         db  0x42 ; 'B'
000000000001e748         db  0x0e ; '.'
000000000001e749         db  0x20 ; ' '
000000000001e74a         db  0x42 ; 'B'
000000000001e74b         db  0x0e ; '.'
000000000001e74c         db  0x18 ; '.'
000000000001e74d         db  0x42 ; 'B'
000000000001e74e         db  0x0e ; '.'
000000000001e74f         db  0x10 ; '.'
000000000001e750         db  0x42 ; 'B'
000000000001e751         db  0x0e ; '.'
000000000001e752         db  0x08 ; '.'
000000000001e753         db  0x4b ; 'K'
000000000001e754         db  0x0b ; '.'
000000000001e755         db  0x49 ; 'I'
000000000001e756         db  0x0e ; '.'
000000000001e757         db  0x38 ; '8'
000000000001e758         db  0x41 ; 'A'
000000000001e759         db  0x0e ; '.'
000000000001e75a         db  0x30 ; '0'
000000000001e75b         db  0x41 ; 'A'
000000000001e75c         db  0x0e ; '.'
000000000001e75d         db  0x28 ; '('
000000000001e75e         db  0x48 ; 'H'
000000000001e75f         db  0x0e ; '.'
000000000001e760         db  0x20 ; ' '
000000000001e761         db  0x44 ; 'D'
000000000001e762         db  0x0e ; '.'
000000000001e763         db  0x18 ; '.'
000000000001e764         db  0x42 ; 'B'
000000000001e765         db  0x0e ; '.'
000000000001e766         db  0x10 ; '.'
000000000001e767         db  0x42 ; 'B'
000000000001e768         db  0x0e ; '.'
000000000001e769         db  0x08 ; '.'
000000000001e76a         db  0x00 ; '.'
000000000001e76b         db  0x00 ; '.'
000000000001e76c         dd         0x00000010                                  ; Length of the record
000000000001e770         dd         0x00001100                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e774         db         0x4c, 0xc0, 0xfe, 0xff                      ; begin 0xa7c0
000000000001e778         db         0x66, 3 dup (0x00)                          ; length 0x66 (end at 0xa826)
000000000001e77c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e77d         align      128
000000000001e780         dd         0x00000028                                  ; Length of the record
000000000001e784         dd         0x00001114                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e788         db         0xa8, 0xc0, 0xfe, 0xff                      ; begin 0xa830
000000000001e78c         db         0x6b, 3 dup (0x00)                          ; length 0x6b (end at 0xa89b)
000000000001e790         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e791         db  0x42 ; 'B'
000000000001e792         db  0x0e ; '.'
000000000001e793         db  0x10 ; '.'
000000000001e794         db  0x8c ; '.'
000000000001e795         db  0x02 ; '.'
000000000001e796         db  0x44 ; 'D'
000000000001e797         db  0x0e ; '.'
000000000001e798         db  0x18 ; '.'
000000000001e799         db  0x86 ; '.'
000000000001e79a         db  0x03 ; '.'
000000000001e79b         db  0x44 ; 'D'
000000000001e79c         db  0x0e ; '.'
000000000001e79d         db  0x20 ; ' '
000000000001e79e         db  0x83 ; '.'
000000000001e79f         db  0x04 ; '.'
000000000001e7a0         db  0x02 ; '.'
000000000001e7a1         db  0x5d ; ']'
000000000001e7a2         db  0x0e ; '.'
000000000001e7a3         db  0x18 ; '.'
000000000001e7a4         db  0x41 ; 'A'
000000000001e7a5         db  0x0e ; '.'
000000000001e7a6         db  0x10 ; '.'
000000000001e7a7         db  0x42 ; 'B'
000000000001e7a8         db  0x0e ; '.'
000000000001e7a9         db  0x08 ; '.'
000000000001e7aa         db  0x00 ; '.'
000000000001e7ab         db  0x00 ; '.'
000000000001e7ac         dd         0x00000028                                  ; Length of the record
000000000001e7b0         dd         0x00001140                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e7b4         db         0xec, 0xc0, 0xfe, 0xff                      ; begin 0xa8a0
000000000001e7b8         db         0x51, 3 dup (0x00)                          ; length 0x51 (end at 0xa8f1)
000000000001e7bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e7bd         db  0x42 ; 'B'
000000000001e7be         db  0x0e ; '.'
000000000001e7bf         db  0x10 ; '.'
000000000001e7c0         db  0x8c ; '.'
000000000001e7c1         db  0x02 ; '.'
000000000001e7c2         db  0x44 ; 'D'
000000000001e7c3         db  0x0e ; '.'
000000000001e7c4         db  0x18 ; '.'
000000000001e7c5         db  0x86 ; '.'
000000000001e7c6         db  0x03 ; '.'
000000000001e7c7         db  0x44 ; 'D'
000000000001e7c8         db  0x0e ; '.'
000000000001e7c9         db  0x20 ; ' '
000000000001e7ca         db  0x83 ; '.'
000000000001e7cb         db  0x04 ; '.'
000000000001e7cc         db  0x02 ; '.'
000000000001e7cd         db  0x43 ; 'C'
000000000001e7ce         db  0x0e ; '.'
000000000001e7cf         db  0x18 ; '.'
000000000001e7d0         db  0x41 ; 'A'
000000000001e7d1         db  0x0e ; '.'
000000000001e7d2         db  0x10 ; '.'
000000000001e7d3         db  0x42 ; 'B'
000000000001e7d4         db  0x0e ; '.'
000000000001e7d5         db  0x08 ; '.'
000000000001e7d6         db  0x00 ; '.'
000000000001e7d7         db  0x00 ; '.'
000000000001e7d8         dd         0x00000030                                  ; Length of the record
000000000001e7dc         dd         0x0000116c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e7e0         db         0x20, 0xc1, 0xfe, 0xff                      ; begin 0xa900
000000000001e7e4         db         0x9c, 3 dup (0x00)                          ; length 0x9c (end at 0xa99c)
000000000001e7e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e7e9         db  0x41 ; 'A'
000000000001e7ea         db  0x0e ; '.'
000000000001e7eb         db  0x10 ; '.'
000000000001e7ec         db  0x86 ; '.'
000000000001e7ed         db  0x02 ; '.'
000000000001e7ee         db  0x41 ; 'A'
000000000001e7ef         db  0x0e ; '.'
000000000001e7f0         db  0x18 ; '.'
000000000001e7f1         db  0x83 ; '.'
000000000001e7f2         db  0x03 ; '.'
000000000001e7f3         db  0x4a ; 'J'
000000000001e7f4         db  0x0e ; '.'
000000000001e7f5         db  0x20 ; ' '
000000000001e7f6         db  0x02 ; '.'
000000000001e7f7         db  0x62 ; 'b'
000000000001e7f8         db  0x0a ; '.'
000000000001e7f9         db  0x0e ; '.'
000000000001e7fa         db  0x18 ; '.'
000000000001e7fb         db  0x43 ; 'C'
000000000001e7fc         db  0x0e ; '.'
000000000001e7fd         db  0x10 ; '.'
000000000001e7fe         db  0x41 ; 'A'
000000000001e7ff         db  0x0e ; '.'
000000000001e800         db  0x08 ; '.'
000000000001e801         db  0x46 ; 'F'
000000000001e802         db  0x0b ; '.'
000000000001e803         db  0x5c ; '\'
000000000001e804         db  0x0e ; '.'
000000000001e805         db  0x18 ; '.'
000000000001e806         db  0x46 ; 'F'
000000000001e807         db  0x0e ; '.'
000000000001e808         db  0x10 ; '.'
000000000001e809         db  0x41 ; 'A'
000000000001e80a         db  0x0e ; '.'
000000000001e80b         db  0x08 ; '.'
000000000001e80c         dd         0x00000028                                  ; Length of the record
000000000001e810         dd         0x000011a0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e814         db         0x8c, 0xc1, 0xfe, 0xff                      ; begin 0xa9a0
000000000001e818         db         0x64, 3 dup (0x00)                          ; length 0x64 (end at 0xaa04)
000000000001e81c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e81d         db  0x41 ; 'A'
000000000001e81e         db  0x0e ; '.'
000000000001e81f         db  0x10 ; '.'
000000000001e820         db  0x86 ; '.'
000000000001e821         db  0x02 ; '.'
000000000001e822         db  0x41 ; 'A'
000000000001e823         db  0x0e ; '.'
000000000001e824         db  0x18 ; '.'
000000000001e825         db  0x83 ; '.'
000000000001e826         db  0x03 ; '.'
000000000001e827         db  0x4a ; 'J'
000000000001e828         db  0x0e ; '.'
000000000001e829         db  0x20 ; ' '
000000000001e82a         db  0x62 ; 'b'
000000000001e82b         db  0x0a ; '.'
000000000001e82c         db  0x0e ; '.'
000000000001e82d         db  0x18 ; '.'
000000000001e82e         db  0x41 ; 'A'
000000000001e82f         db  0x0e ; '.'
000000000001e830         db  0x10 ; '.'
000000000001e831         db  0x41 ; 'A'
000000000001e832         db  0x0e ; '.'
000000000001e833         db  0x08 ; '.'
000000000001e834         db  0x48 ; 'H'
000000000001e835         db  0x0b ; '.'
000000000001e836         db  0x00 ; '.'
000000000001e837         db  0x00 ; '.'
000000000001e838         dd         0x00000034                                  ; Length of the record
000000000001e83c         dd         0x000011cc                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e840         db         0xd0, 0xc1, 0xfe, 0xff                      ; begin 0xaa10
000000000001e844         db         0x2c, 0x01, 2 dup (0x00)                    ; length 0x12c (end at 0xab3c)
000000000001e848         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e849         db  0x41 ; 'A'
000000000001e84a         db  0x0e ; '.'
000000000001e84b         db  0x10 ; '.'
000000000001e84c         db  0x86 ; '.'
000000000001e84d         db  0x02 ; '.'
000000000001e84e         db  0x41 ; 'A'
000000000001e84f         db  0x0e ; '.'
000000000001e850         db  0x18 ; '.'
000000000001e851         db  0x83 ; '.'
000000000001e852         db  0x03 ; '.'
000000000001e853         db  0x4a ; 'J'
000000000001e854         db  0x0e ; '.'
000000000001e855         db  0x20 ; ' '
000000000001e856         db  0x66 ; 'f'
000000000001e857         db  0x0a ; '.'
000000000001e858         db  0x0e ; '.'
000000000001e859         db  0x18 ; '.'
000000000001e85a         db  0x41 ; 'A'
000000000001e85b         db  0x0e ; '.'
000000000001e85c         db  0x10 ; '.'
000000000001e85d         db  0x41 ; 'A'
000000000001e85e         db  0x0e ; '.'
000000000001e85f         db  0x08 ; '.'
000000000001e860         db  0x44 ; 'D'
000000000001e861         db  0x0b ; '.'
000000000001e862         db  0x6d ; 'm'
000000000001e863         db  0x0a ; '.'
000000000001e864         db  0x0e ; '.'
000000000001e865         db  0x18 ; '.'
000000000001e866         db  0x46 ; 'F'
000000000001e867         db  0x0e ; '.'
000000000001e868         db  0x10 ; '.'
000000000001e869         db  0x41 ; 'A'
000000000001e86a         db  0x0e ; '.'
000000000001e86b         db  0x08 ; '.'
000000000001e86c         db  0x44 ; 'D'
000000000001e86d         db  0x0b ; '.'
000000000001e86e         db  0x00 ; '.'
000000000001e86f         db  0x00 ; '.'
000000000001e870         dd         0x0000004c                                  ; Length of the record
000000000001e874         dd         0x00001204                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e878         db         0xc8, 0xc2, 0xfe, 0xff                      ; begin 0xab40
000000000001e87c         db         0xec, 3 dup (0x00)                          ; length 0xec (end at 0xac2c)
000000000001e880         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e881         db  0x42 ; 'B'
000000000001e882         db  0x0e ; '.'
000000000001e883         db  0x10 ; '.'
000000000001e884         db  0x8e ; '.'
000000000001e885         db  0x02 ; '.'
000000000001e886         db  0x42 ; 'B'
000000000001e887         db  0x0e ; '.'
000000000001e888         db  0x18 ; '.'
000000000001e889         db  0x8d ; '.'
000000000001e88a         db  0x03 ; '.'
000000000001e88b         db  0x45 ; 'E'
000000000001e88c         db  0x0e ; '.'
000000000001e88d         db  0x20 ; ' '
000000000001e88e         db  0x8c ; '.'
000000000001e88f         db  0x04 ; '.'
000000000001e890         db  0x41 ; 'A'
000000000001e891         db  0x0e ; '.'
000000000001e892         db  0x28 ; '('
000000000001e893         db  0x86 ; '.'
000000000001e894         db  0x05 ; '.'
000000000001e895         db  0x44 ; 'D'
000000000001e896         db  0x0e ; '.'
000000000001e897         db  0x30 ; '0'
000000000001e898         db  0x83 ; '.'
000000000001e899         db  0x06 ; '.'
000000000001e89a         db  0x02 ; '.'
000000000001e89b         db  0x71 ; 'q'
000000000001e89c         db  0x0a ; '.'
000000000001e89d         db  0x0e ; '.'
000000000001e89e         db  0x28 ; '('
000000000001e89f         db  0x46 ; 'F'
000000000001e8a0         db  0x0e ; '.'
000000000001e8a1         db  0x20 ; ' '
000000000001e8a2         db  0x42 ; 'B'
000000000001e8a3         db  0x0e ; '.'
000000000001e8a4         db  0x18 ; '.'
000000000001e8a5         db  0x42 ; 'B'
000000000001e8a6         db  0x0e ; '.'
000000000001e8a7         db  0x10 ; '.'
000000000001e8a8         db  0x42 ; 'B'
000000000001e8a9         db  0x0e ; '.'
000000000001e8aa         db  0x08 ; '.'
000000000001e8ab         db  0x45 ; 'E'
000000000001e8ac         db  0x0b ; '.'
000000000001e8ad         db  0x6e ; 'n'
000000000001e8ae         db  0x0a ; '.'
000000000001e8af         db  0x0e ; '.'
000000000001e8b0         db  0x28 ; '('
000000000001e8b1         db  0x41 ; 'A'
000000000001e8b2         db  0x0e ; '.'
000000000001e8b3         db  0x20 ; ' '
000000000001e8b4         db  0x42 ; 'B'
000000000001e8b5         db  0x0e ; '.'
000000000001e8b6         db  0x18 ; '.'
000000000001e8b7         db  0x42 ; 'B'
000000000001e8b8         db  0x0e ; '.'
000000000001e8b9         db  0x10 ; '.'
000000000001e8ba         db  0x42 ; 'B'
000000000001e8bb         db  0x0e ; '.'
000000000001e8bc         db  0x08 ; '.'
000000000001e8bd         db  0x41 ; 'A'
000000000001e8be         db  0x0b ; '.'
000000000001e8bf         db  0x00 ; '.'
000000000001e8c0         dd         0x0000002c                                  ; Length of the record
000000000001e8c4         dd         0x00001254                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e8c8         db         0x68, 0xc3, 0xfe, 0xff                      ; begin 0xac30
000000000001e8cc         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0xac9e)
000000000001e8d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e8d1         db  0x42 ; 'B'
000000000001e8d2         db  0x0e ; '.'
000000000001e8d3         db  0x10 ; '.'
000000000001e8d4         db  0x8c ; '.'
000000000001e8d5         db  0x02 ; '.'
000000000001e8d6         db  0x49 ; 'I'
000000000001e8d7         db  0x0e ; '.'
000000000001e8d8         db  0x18 ; '.'
000000000001e8d9         db  0x86 ; '.'
000000000001e8da         db  0x03 ; '.'
000000000001e8db         db  0x49 ; 'I'
000000000001e8dc         db  0x0e ; '.'
000000000001e8dd         db  0x20 ; ' '
000000000001e8de         db  0x83 ; '.'
000000000001e8df         db  0x04 ; '.'
000000000001e8e0         db  0x02 ; '.'
000000000001e8e1         db  0x4a ; 'J'
000000000001e8e2         db  0x0a ; '.'
000000000001e8e3         db  0x0e ; '.'
000000000001e8e4         db  0x18 ; '.'
000000000001e8e5         db  0x41 ; 'A'
000000000001e8e6         db  0x0e ; '.'
000000000001e8e7         db  0x10 ; '.'
000000000001e8e8         db  0x42 ; 'B'
000000000001e8e9         db  0x0e ; '.'
000000000001e8ea         db  0x08 ; '.'
000000000001e8eb         db  0x47 ; 'G'
000000000001e8ec         db  0x0b ; '.'
000000000001e8ed         db  0x00 ; '.'
000000000001e8ee         db  0x00 ; '.'
000000000001e8ef         db  0x00 ; '.'
000000000001e8f0         dd         0x00000048                                  ; Length of the record
000000000001e8f4         dd         0x00001284                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e8f8         db         0xa8, 0xc3, 0xfe, 0xff                      ; begin 0xaca0
000000000001e8fc         db         0xc3, 0x01, 2 dup (0x00)                    ; length 0x1c3 (end at 0xae63)
000000000001e900         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e901         db  0x42 ; 'B'
000000000001e902         db  0x0e ; '.'
000000000001e903         db  0x10 ; '.'
000000000001e904         db  0x8f ; '.'
000000000001e905         db  0x02 ; '.'
000000000001e906         db  0x42 ; 'B'
000000000001e907         db  0x0e ; '.'
000000000001e908         db  0x18 ; '.'
000000000001e909         db  0x8e ; '.'
000000000001e90a         db  0x03 ; '.'
000000000001e90b         db  0x42 ; 'B'
000000000001e90c         db  0x0e ; '.'
000000000001e90d         db  0x20 ; ' '
000000000001e90e         db  0x8d ; '.'
000000000001e90f         db  0x04 ; '.'
000000000001e910         db  0x42 ; 'B'
000000000001e911         db  0x0e ; '.'
000000000001e912         db  0x28 ; '('
000000000001e913         db  0x8c ; '.'
000000000001e914         db  0x05 ; '.'
000000000001e915         db  0x41 ; 'A'
000000000001e916         db  0x0e ; '.'
000000000001e917         db  0x30 ; '0'
000000000001e918         db  0x86 ; '.'
000000000001e919         db  0x06 ; '.'
000000000001e91a         db  0x41 ; 'A'
000000000001e91b         db  0x0e ; '.'
000000000001e91c         db  0x38 ; '8'
000000000001e91d         db  0x83 ; '.'
000000000001e91e         db  0x07 ; '.'
000000000001e91f         db  0x47 ; 'G'
000000000001e920         db  0x0e ; '.'
000000000001e921         db  0xa0 ; '.'
000000000001e922         db  0x01 ; '.'
000000000001e923         db  0x02 ; '.'
000000000001e924         db  0xd3 ; '.'
000000000001e925         db  0x0a ; '.'
000000000001e926         db  0x0e ; '.'
000000000001e927         db  0x38 ; '8'
000000000001e928         db  0x41 ; 'A'
000000000001e929         db  0x0e ; '.'
000000000001e92a         db  0x30 ; '0'
000000000001e92b         db  0x41 ; 'A'
000000000001e92c         db  0x0e ; '.'
000000000001e92d         db  0x28 ; '('
000000000001e92e         db  0x42 ; 'B'
000000000001e92f         db  0x0e ; '.'
000000000001e930         db  0x20 ; ' '
000000000001e931         db  0x42 ; 'B'
000000000001e932         db  0x0e ; '.'
000000000001e933         db  0x18 ; '.'
000000000001e934         db  0x42 ; 'B'
000000000001e935         db  0x0e ; '.'
000000000001e936         db  0x10 ; '.'
000000000001e937         db  0x42 ; 'B'
000000000001e938         db  0x0e ; '.'
000000000001e939         db  0x08 ; '.'
000000000001e93a         db  0x42 ; 'B'
000000000001e93b         db  0x0b ; '.'
000000000001e93c         dd         0x00000048                                  ; Length of the record
000000000001e940         dd         0x000012d0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e944         db         0x2c, 0xc5, 0xfe, 0xff                      ; begin 0xae70
000000000001e948         db         0x15, 0x06, 2 dup (0x00)                    ; length 0x615 (end at 0xb485)
000000000001e94c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e94d         db  0x42 ; 'B'
000000000001e94e         db  0x0e ; '.'
000000000001e94f         db  0x10 ; '.'
000000000001e950         db  0x8f ; '.'
000000000001e951         db  0x02 ; '.'
000000000001e952         db  0x42 ; 'B'
000000000001e953         db  0x0e ; '.'
000000000001e954         db  0x18 ; '.'
000000000001e955         db  0x8e ; '.'
000000000001e956         db  0x03 ; '.'
000000000001e957         db  0x45 ; 'E'
000000000001e958         db  0x0e ; '.'
000000000001e959         db  0x20 ; ' '
000000000001e95a         db  0x8d ; '.'
000000000001e95b         db  0x04 ; '.'
000000000001e95c         db  0x42 ; 'B'
000000000001e95d         db  0x0e ; '.'
000000000001e95e         db  0x28 ; '('
000000000001e95f         db  0x8c ; '.'
000000000001e960         db  0x05 ; '.'
000000000001e961         db  0x41 ; 'A'
000000000001e962         db  0x0e ; '.'
000000000001e963         db  0x30 ; '0'
000000000001e964         db  0x86 ; '.'
000000000001e965         db  0x06 ; '.'
000000000001e966         db  0x41 ; 'A'
000000000001e967         db  0x0e ; '.'
000000000001e968         db  0x38 ; '8'
000000000001e969         db  0x83 ; '.'
000000000001e96a         db  0x07 ; '.'
000000000001e96b         db  0x47 ; 'G'
000000000001e96c         db  0x0e ; '.'
000000000001e96d         db  0xe0 ; '.'
000000000001e96e         db  0x01 ; '.'
000000000001e96f         db  0x02 ; '.'
000000000001e970         db  0x69 ; 'i'
000000000001e971         db  0x0a ; '.'
000000000001e972         db  0x0e ; '.'
000000000001e973         db  0x38 ; '8'
000000000001e974         db  0x41 ; 'A'
000000000001e975         db  0x0e ; '.'
000000000001e976         db  0x30 ; '0'
000000000001e977         db  0x41 ; 'A'
000000000001e978         db  0x0e ; '.'
000000000001e979         db  0x28 ; '('
000000000001e97a         db  0x42 ; 'B'
000000000001e97b         db  0x0e ; '.'
000000000001e97c         db  0x20 ; ' '
000000000001e97d         db  0x42 ; 'B'
000000000001e97e         db  0x0e ; '.'
000000000001e97f         db  0x18 ; '.'
000000000001e980         db  0x42 ; 'B'
000000000001e981         db  0x0e ; '.'
000000000001e982         db  0x10 ; '.'
000000000001e983         db  0x42 ; 'B'
000000000001e984         db  0x0e ; '.'
000000000001e985         db  0x08 ; '.'
000000000001e986         db  0x49 ; 'I'
000000000001e987         db  0x0b ; '.'
000000000001e988         dd         0x00000058                                  ; Length of the record
000000000001e98c         dd         0x0000131c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e990         db         0x00, 0xcb, 0xfe, 0xff                      ; begin 0xb490
000000000001e994         db         0x4e, 0x01, 2 dup (0x00)                    ; length 0x14e (end at 0xb5de)
000000000001e998         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e999         db  0x41 ; 'A'
000000000001e99a         db  0x0e ; '.'
000000000001e99b         db  0x10 ; '.'
000000000001e99c         db  0x86 ; '.'
000000000001e99d         db  0x02 ; '.'
000000000001e99e         db  0x41 ; 'A'
000000000001e99f         db  0x0e ; '.'
000000000001e9a0         db  0x18 ; '.'
000000000001e9a1         db  0x83 ; '.'
000000000001e9a2         db  0x03 ; '.'
000000000001e9a3         db  0x4e ; 'N'
000000000001e9a4         db  0x0e ; '.'
000000000001e9a5         db  0x20 ; ' '
000000000001e9a6         db  0x02 ; '.'
000000000001e9a7         db  0x83 ; '.'
000000000001e9a8         db  0x0a ; '.'
000000000001e9a9         db  0x0e ; '.'
000000000001e9aa         db  0x18 ; '.'
000000000001e9ab         db  0x41 ; 'A'
000000000001e9ac         db  0x0e ; '.'
000000000001e9ad         db  0x10 ; '.'
000000000001e9ae         db  0x41 ; 'A'
000000000001e9af         db  0x0e ; '.'
000000000001e9b0         db  0x08 ; '.'
000000000001e9b1         db  0x4b ; 'K'
000000000001e9b2         db  0x0b ; '.'
000000000001e9b3         db  0x02 ; '.'
000000000001e9b4         db  0x61 ; 'a'
000000000001e9b5         db  0x0a ; '.'
000000000001e9b6         db  0x0e ; '.'
000000000001e9b7         db  0x18 ; '.'
000000000001e9b8         db  0x43 ; 'C'
000000000001e9b9         db  0x0e ; '.'
000000000001e9ba         db  0x10 ; '.'
000000000001e9bb         db  0x41 ; 'A'
000000000001e9bc         db  0x0e ; '.'
000000000001e9bd         db  0x08 ; '.'
000000000001e9be         db  0x4b ; 'K'
000000000001e9bf         db  0x0b ; '.'
000000000001e9c0         db  0x4c ; 'L'
000000000001e9c1         db  0x0a ; '.'
000000000001e9c2         db  0x0e ; '.'
000000000001e9c3         db  0x18 ; '.'
000000000001e9c4         db  0x43 ; 'C'
000000000001e9c5         db  0x0e ; '.'
000000000001e9c6         db  0x10 ; '.'
000000000001e9c7         db  0x41 ; 'A'
000000000001e9c8         db  0x0e ; '.'
000000000001e9c9         db  0x08 ; '.'
000000000001e9ca         db  0x48 ; 'H'
000000000001e9cb         db  0x0b ; '.'
000000000001e9cc         db  0x49 ; 'I'
000000000001e9cd         db  0x0a ; '.'
000000000001e9ce         db  0x0e ; '.'
000000000001e9cf         db  0x18 ; '.'
000000000001e9d0         db  0x43 ; 'C'
000000000001e9d1         db  0x0e ; '.'
000000000001e9d2         db  0x10 ; '.'
000000000001e9d3         db  0x41 ; 'A'
000000000001e9d4         db  0x0e ; '.'
000000000001e9d5         db  0x08 ; '.'
000000000001e9d6         db  0x4b ; 'K'
000000000001e9d7         db  0x0b ; '.'
000000000001e9d8         db  0x49 ; 'I'
000000000001e9d9         db  0x0e ; '.'
000000000001e9da         db  0x18 ; '.'
000000000001e9db         db  0x43 ; 'C'
000000000001e9dc         db  0x0e ; '.'
000000000001e9dd         db  0x10 ; '.'
000000000001e9de         db  0x41 ; 'A'
000000000001e9df         db  0x0e ; '.'
000000000001e9e0         db  0x08 ; '.'
000000000001e9e1         db  0x00 ; '.'
000000000001e9e2         db  0x00 ; '.'
000000000001e9e3         db  0x00 ; '.'
000000000001e9e4         dd         0x00000028                                  ; Length of the record
000000000001e9e8         dd         0x00001378                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001e9ec         db         0xf4, 0xcb, 0xfe, 0xff                      ; begin 0xb5e0
000000000001e9f0         db         0x86, 3 dup (0x00)                          ; length 0x86 (end at 0xb666)
000000000001e9f4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001e9f5         db  0x42 ; 'B'
000000000001e9f6         db  0x0e ; '.'
000000000001e9f7         db  0x10 ; '.'
000000000001e9f8         db  0x8c ; '.'
000000000001e9f9         db  0x02 ; '.'
000000000001e9fa         db  0x41 ; 'A'
000000000001e9fb         db  0x0e ; '.'
000000000001e9fc         db  0x18 ; '.'
000000000001e9fd         db  0x86 ; '.'
000000000001e9fe         db  0x03 ; '.'
000000000001e9ff         db  0x44 ; 'D'
000000000001ea00         db  0x0e ; '.'
000000000001ea01         db  0x20 ; ' '
000000000001ea02         db  0x83 ; '.'
000000000001ea03         db  0x04 ; '.'
000000000001ea04         db  0x70 ; 'p'
000000000001ea05         db  0x0a ; '.'
000000000001ea06         db  0x0e ; '.'
000000000001ea07         db  0x18 ; '.'
000000000001ea08         db  0x41 ; 'A'
000000000001ea09         db  0x0e ; '.'
000000000001ea0a         db  0x10 ; '.'
000000000001ea0b         db  0x42 ; 'B'
000000000001ea0c         db  0x0e ; '.'
000000000001ea0d         db  0x08 ; '.'
000000000001ea0e         db  0x46 ; 'F'
000000000001ea0f         db  0x0b ; '.'
000000000001ea10         dd         0x00000018                                  ; Length of the record
000000000001ea14         dd         0x000013a4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ea18         db         0x58, 0xcc, 0xfe, 0xff                      ; begin 0xb670
000000000001ea1c         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0xb6a0)
000000000001ea20         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ea21         db  0x41 ; 'A'
000000000001ea22         db  0x0e ; '.'
000000000001ea23         db  0x10 ; '.'
000000000001ea24         db  0x83 ; '.'
000000000001ea25         db  0x02 ; '.'
000000000001ea26         db  0x6a ; 'j'
000000000001ea27         db  0x0e ; '.'
000000000001ea28         db  0x08 ; '.'
000000000001ea29         db  0x00 ; '.'
000000000001ea2a         db  0x00 ; '.'
000000000001ea2b         db  0x00 ; '.'
000000000001ea2c         dd         0x00000010                                  ; Length of the record
000000000001ea30         dd         0x000013c0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ea34         db         0x6c, 0xcc, 0xfe, 0xff                      ; begin 0xb6a0
000000000001ea38         db         0x25, 3 dup (0x00)                          ; length 0x25 (end at 0xb6c5)
000000000001ea3c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ea3d         align      64
000000000001ea40         dd         0x00000014                                  ; Length of the record
000000000001ea44         dd         0x000013d4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ea48         db         0x88, 0xcc, 0xfe, 0xff                      ; begin 0xb6d0
000000000001ea4c         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0xb6e4)
000000000001ea50         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ea51         db  0x48 ; 'H'
000000000001ea52         db  0x0e ; '.'
000000000001ea53         db  0x10 ; '.'
000000000001ea54         db  0x4b ; 'K'
000000000001ea55         db  0x0e ; '.'
000000000001ea56         db  0x08 ; '.'
000000000001ea57         db  0x00 ; '.'
000000000001ea58         dd         0x00000048                                  ; Length of the record
000000000001ea5c         dd         0x000013ec                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ea60         db         0x90, 0xcc, 0xfe, 0xff                      ; begin 0xb6f0
000000000001ea64         db         0xce, 0x01, 2 dup (0x00)                    ; length 0x1ce (end at 0xb8be)
000000000001ea68         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ea69         db  0x42 ; 'B'
000000000001ea6a         db  0x0e ; '.'
000000000001ea6b         db  0x10 ; '.'
000000000001ea6c         db  0x8f ; '.'
000000000001ea6d         db  0x02 ; '.'
000000000001ea6e         db  0x42 ; 'B'
000000000001ea6f         db  0x0e ; '.'
000000000001ea70         db  0x18 ; '.'
000000000001ea71         db  0x8e ; '.'
000000000001ea72         db  0x03 ; '.'
000000000001ea73         db  0x45 ; 'E'
000000000001ea74         db  0x0e ; '.'
000000000001ea75         db  0x20 ; ' '
000000000001ea76         db  0x8d ; '.'
000000000001ea77         db  0x04 ; '.'
000000000001ea78         db  0x42 ; 'B'
000000000001ea79         db  0x0e ; '.'
000000000001ea7a         db  0x28 ; '('
000000000001ea7b         db  0x8c ; '.'
000000000001ea7c         db  0x05 ; '.'
000000000001ea7d         db  0x41 ; 'A'
000000000001ea7e         db  0x0e ; '.'
000000000001ea7f         db  0x30 ; '0'
000000000001ea80         db  0x86 ; '.'
000000000001ea81         db  0x06 ; '.'
000000000001ea82         db  0x41 ; 'A'
000000000001ea83         db  0x0e ; '.'
000000000001ea84         db  0x38 ; '8'
000000000001ea85         db  0x83 ; '.'
000000000001ea86         db  0x07 ; '.'
000000000001ea87         db  0x47 ; 'G'
000000000001ea88         db  0x0e ; '.'
000000000001ea89         db  0x50 ; 'P'
000000000001ea8a         db  0x02 ; '.'
000000000001ea8b         db  0xac ; '.'
000000000001ea8c         db  0x0a ; '.'
000000000001ea8d         db  0x0e ; '.'
000000000001ea8e         db  0x38 ; '8'
000000000001ea8f         db  0x41 ; 'A'
000000000001ea90         db  0x0e ; '.'
000000000001ea91         db  0x30 ; '0'
000000000001ea92         db  0x41 ; 'A'
000000000001ea93         db  0x0e ; '.'
000000000001ea94         db  0x28 ; '('
000000000001ea95         db  0x42 ; 'B'
000000000001ea96         db  0x0e ; '.'
000000000001ea97         db  0x20 ; ' '
000000000001ea98         db  0x42 ; 'B'
000000000001ea99         db  0x0e ; '.'
000000000001ea9a         db  0x18 ; '.'
000000000001ea9b         db  0x42 ; 'B'
000000000001ea9c         db  0x0e ; '.'
000000000001ea9d         db  0x10 ; '.'
000000000001ea9e         db  0x42 ; 'B'
000000000001ea9f         db  0x0e ; '.'
000000000001eaa0         db  0x08 ; '.'
000000000001eaa1         db  0x46 ; 'F'
000000000001eaa2         db  0x0b ; '.'
000000000001eaa3         db  0x00 ; '.'
000000000001eaa4         dd         0x00000034                                  ; Length of the record
000000000001eaa8         dd         0x00001438                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001eaac         db         0x14, 0xce, 0xfe, 0xff                      ; begin 0xb8c0
000000000001eab0         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0xb95f)
000000000001eab4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001eab5         db  0x42 ; 'B'
000000000001eab6         db  0x0e ; '.'
000000000001eab7         db  0x10 ; '.'
000000000001eab8         db  0x8d ; '.'
000000000001eab9         db  0x02 ; '.'
000000000001eaba         db  0x42 ; 'B'
000000000001eabb         db  0x0e ; '.'
000000000001eabc         db  0x18 ; '.'
000000000001eabd         db  0x8c ; '.'
000000000001eabe         db  0x03 ; '.'
000000000001eabf         db  0x44 ; 'D'
000000000001eac0         db  0x0e ; '.'
000000000001eac1         db  0x20 ; ' '
000000000001eac2         db  0x86 ; '.'
000000000001eac3         db  0x04 ; '.'
000000000001eac4         db  0x41 ; 'A'
000000000001eac5         db  0x0e ; '.'
000000000001eac6         db  0x28 ; '('
000000000001eac7         db  0x83 ; '.'
000000000001eac8         db  0x05 ; '.'
000000000001eac9         db  0x51 ; 'Q'
000000000001eaca         db  0x0e ; '.'
000000000001eacb         db  0x30 ; '0'
000000000001eacc         db  0x02 ; '.'
000000000001eacd         db  0x7e ; '~'
000000000001eace         db  0x0e ; '.'
000000000001eacf         db  0x28 ; '('
000000000001ead0         db  0x41 ; 'A'
000000000001ead1         db  0x0e ; '.'
000000000001ead2         db  0x20 ; ' '
000000000001ead3         db  0x41 ; 'A'
000000000001ead4         db  0x0e ; '.'
000000000001ead5         db  0x18 ; '.'
000000000001ead6         db  0x42 ; 'B'
000000000001ead7         db  0x0e ; '.'
000000000001ead8         db  0x10 ; '.'
000000000001ead9         db  0x42 ; 'B'
000000000001eada         db  0x0e ; '.'
000000000001eadb         db  0x08 ; '.'
000000000001eadc         dd         0x00000048                                  ; Length of the record
000000000001eae0         dd         0x00001470                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001eae4         db         0x7c, 0xce, 0xfe, 0xff                      ; begin 0xb960
000000000001eae8         db         0x75, 0x02, 2 dup (0x00)                    ; length 0x275 (end at 0xbbd5)
000000000001eaec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001eaed         db  0x42 ; 'B'
000000000001eaee         db  0x0e ; '.'
000000000001eaef         db  0x10 ; '.'
000000000001eaf0         db  0x8f ; '.'
000000000001eaf1         db  0x02 ; '.'
000000000001eaf2         db  0x42 ; 'B'
000000000001eaf3         db  0x0e ; '.'
000000000001eaf4         db  0x18 ; '.'
000000000001eaf5         db  0x8e ; '.'
000000000001eaf6         db  0x03 ; '.'
000000000001eaf7         db  0x45 ; 'E'
000000000001eaf8         db  0x0e ; '.'
000000000001eaf9         db  0x20 ; ' '
000000000001eafa         db  0x8d ; '.'
000000000001eafb         db  0x04 ; '.'
000000000001eafc         db  0x42 ; 'B'
000000000001eafd         db  0x0e ; '.'
000000000001eafe         db  0x28 ; '('
000000000001eaff         db  0x8c ; '.'
000000000001eb00         db  0x05 ; '.'
000000000001eb01         db  0x44 ; 'D'
000000000001eb02         db  0x0e ; '.'
000000000001eb03         db  0x30 ; '0'
000000000001eb04         db  0x86 ; '.'
000000000001eb05         db  0x06 ; '.'
000000000001eb06         db  0x41 ; 'A'
000000000001eb07         db  0x0e ; '.'
000000000001eb08         db  0x38 ; '8'
000000000001eb09         db  0x83 ; '.'
000000000001eb0a         db  0x07 ; '.'
000000000001eb0b         db  0x4a ; 'J'
000000000001eb0c         db  0x0e ; '.'
000000000001eb0d         db  0x50 ; 'P'
000000000001eb0e         db  0x03 ; '.'
000000000001eb0f         db  0x1a ; '.'
000000000001eb10         db  0x01 ; '.'
000000000001eb11         db  0x0a ; '.'
000000000001eb12         db  0x0e ; '.'
000000000001eb13         db  0x38 ; '8'
000000000001eb14         db  0x41 ; 'A'
000000000001eb15         db  0x0e ; '.'
000000000001eb16         db  0x30 ; '0'
000000000001eb17         db  0x41 ; 'A'
000000000001eb18         db  0x0e ; '.'
000000000001eb19         db  0x28 ; '('
000000000001eb1a         db  0x42 ; 'B'
000000000001eb1b         db  0x0e ; '.'
000000000001eb1c         db  0x20 ; ' '
000000000001eb1d         db  0x42 ; 'B'
000000000001eb1e         db  0x0e ; '.'
000000000001eb1f         db  0x18 ; '.'
000000000001eb20         db  0x42 ; 'B'
000000000001eb21         db  0x0e ; '.'
000000000001eb22         db  0x10 ; '.'
000000000001eb23         db  0x42 ; 'B'
000000000001eb24         db  0x0e ; '.'
000000000001eb25         db  0x08 ; '.'
000000000001eb26         db  0x42 ; 'B'
000000000001eb27         db  0x0b ; '.'
000000000001eb28         dd         0x00000018                                  ; Length of the record
000000000001eb2c         dd         0x000014bc                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001eb30         db         0xb0, 0xd0, 0xfe, 0xff                      ; begin 0xbbe0
000000000001eb34         db         0x59, 3 dup (0x00)                          ; length 0x59 (end at 0xbc39)
000000000001eb38         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001eb39         db  0x41 ; 'A'
000000000001eb3a         db  0x0e ; '.'
000000000001eb3b         db  0x10 ; '.'
000000000001eb3c         db  0x83 ; '.'
000000000001eb3d         db  0x02 ; '.'
000000000001eb3e         db  0x02 ; '.'
000000000001eb3f         db  0x53 ; 'S'
000000000001eb40         db  0x0e ; '.'
000000000001eb41         db  0x08 ; '.'
000000000001eb42         db  0x00 ; '.'
000000000001eb43         db  0x00 ; '.'
000000000001eb44         dd         0x0000001c                                  ; Length of the record
000000000001eb48         dd         0x000014d8                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001eb4c         db         0xf4, 0xd0, 0xfe, 0xff                      ; begin 0xbc40
000000000001eb50         db         0x32, 3 dup (0x00)                          ; length 0x32 (end at 0xbc72)
000000000001eb54         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001eb55         db  0x41 ; 'A'
000000000001eb56         db  0x0e ; '.'
000000000001eb57         db  0x10 ; '.'
000000000001eb58         db  0x83 ; '.'
000000000001eb59         db  0x02 ; '.'
000000000001eb5a         db  0x5f ; '_'
000000000001eb5b         db  0x0a ; '.'
000000000001eb5c         db  0x0e ; '.'
000000000001eb5d         db  0x08 ; '.'
000000000001eb5e         db  0x48 ; 'H'
000000000001eb5f         db  0x0b ; '.'
000000000001eb60         db  0x45 ; 'E'
000000000001eb61         db  0x0e ; '.'
000000000001eb62         db  0x08 ; '.'
000000000001eb63         db  0x00 ; '.'
000000000001eb64         dd         0x00000038                                  ; Length of the record
000000000001eb68         dd         0x000014f8                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001eb6c         db         0x14, 0xd1, 0xfe, 0xff                      ; begin 0xbc80
000000000001eb70         db         0x5f, 0x01, 2 dup (0x00)                    ; length 0x15f (end at 0xbddf)
000000000001eb74         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001eb75         db  0x42 ; 'B'
000000000001eb76         db  0x0e ; '.'
000000000001eb77         db  0x10 ; '.'
000000000001eb78         db  0x8e ; '.'
000000000001eb79         db  0x02 ; '.'
000000000001eb7a         db  0x42 ; 'B'
000000000001eb7b         db  0x0e ; '.'
000000000001eb7c         db  0x18 ; '.'
000000000001eb7d         db  0x8d ; '.'
000000000001eb7e         db  0x03 ; '.'
000000000001eb7f         db  0x42 ; 'B'
000000000001eb80         db  0x0e ; '.'
000000000001eb81         db  0x20 ; ' '
000000000001eb82         db  0x8c ; '.'
000000000001eb83         db  0x04 ; '.'
000000000001eb84         db  0x44 ; 'D'
000000000001eb85         db  0x0e ; '.'
000000000001eb86         db  0x28 ; '('
000000000001eb87         db  0x86 ; '.'
000000000001eb88         db  0x05 ; '.'
000000000001eb89         db  0x41 ; 'A'
000000000001eb8a         db  0x0e ; '.'
000000000001eb8b         db  0x30 ; '0'
000000000001eb8c         db  0x83 ; '.'
000000000001eb8d         db  0x06 ; '.'
000000000001eb8e         db  0x03 ; '.'
000000000001eb8f         db  0x45 ; 'E'
000000000001eb90         db  0x01 ; '.'
000000000001eb91         db  0x0e ; '.'
000000000001eb92         db  0x28 ; '('
000000000001eb93         db  0x44 ; 'D'
000000000001eb94         db  0x0e ; '.'
000000000001eb95         db  0x20 ; ' '
000000000001eb96         db  0x42 ; 'B'
000000000001eb97         db  0x0e ; '.'
000000000001eb98         db  0x18 ; '.'
000000000001eb99         db  0x42 ; 'B'
000000000001eb9a         db  0x0e ; '.'
000000000001eb9b         db  0x10 ; '.'
000000000001eb9c         db  0x42 ; 'B'
000000000001eb9d         db  0x0e ; '.'
000000000001eb9e         db  0x08 ; '.'
000000000001eb9f         db  0x00 ; '.'
000000000001eba0         dd         0x00000038                                  ; Length of the record
000000000001eba4         dd         0x00001534                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001eba8         db         0x38, 0xd2, 0xfe, 0xff                      ; begin 0xbde0
000000000001ebac         db         0xb8, 3 dup (0x00)                          ; length 0xb8 (end at 0xbe98)
000000000001ebb0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ebb1         db  0x42 ; 'B'
000000000001ebb2         db  0x0e ; '.'
000000000001ebb3         db  0x10 ; '.'
000000000001ebb4         db  0x8e ; '.'
000000000001ebb5         db  0x02 ; '.'
000000000001ebb6         db  0x42 ; 'B'
000000000001ebb7         db  0x0e ; '.'
000000000001ebb8         db  0x18 ; '.'
000000000001ebb9         db  0x8d ; '.'
000000000001ebba         db  0x03 ; '.'
000000000001ebbb         db  0x45 ; 'E'
000000000001ebbc         db  0x0e ; '.'
000000000001ebbd         db  0x20 ; ' '
000000000001ebbe         db  0x8c ; '.'
000000000001ebbf         db  0x04 ; '.'
000000000001ebc0         db  0x41 ; 'A'
000000000001ebc1         db  0x0e ; '.'
000000000001ebc2         db  0x28 ; '('
000000000001ebc3         db  0x86 ; '.'
000000000001ebc4         db  0x05 ; '.'
000000000001ebc5         db  0x41 ; 'A'
000000000001ebc6         db  0x0e ; '.'
000000000001ebc7         db  0x30 ; '0'
000000000001ebc8         db  0x83 ; '.'
000000000001ebc9         db  0x06 ; '.'
000000000001ebca         db  0x02 ; '.'
000000000001ebcb         db  0x8f ; '.'
000000000001ebcc         db  0x0e ; '.'
000000000001ebcd         db  0x28 ; '('
000000000001ebce         db  0x57 ; 'W'
000000000001ebcf         db  0x0e ; '.'
000000000001ebd0         db  0x20 ; ' '
000000000001ebd1         db  0x42 ; 'B'
000000000001ebd2         db  0x0e ; '.'
000000000001ebd3         db  0x18 ; '.'
000000000001ebd4         db  0x42 ; 'B'
000000000001ebd5         db  0x0e ; '.'
000000000001ebd6         db  0x10 ; '.'
000000000001ebd7         db  0x42 ; 'B'
000000000001ebd8         db  0x0e ; '.'
000000000001ebd9         db  0x08 ; '.'
000000000001ebda         db  0x00 ; '.'
000000000001ebdb         db  0x00 ; '.'
000000000001ebdc         dd         0x00000010                                  ; Length of the record
000000000001ebe0         dd         0x00001570                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ebe4         db         0xbc, 0xd2, 0xfe, 0xff                      ; begin 0xbea0
000000000001ebe8         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0xbeef)
000000000001ebec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ebed         align      16
000000000001ebf0         dd         0x00000010                                  ; Length of the record
000000000001ebf4         dd         0x00001584                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ebf8         db         0xf8, 0xd2, 0xfe, 0xff                      ; begin 0xbef0
000000000001ebfc         db         0x53, 3 dup (0x00)                          ; length 0x53 (end at 0xbf43)
000000000001ec00         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ec01         align      4
000000000001ec04         dd         0x00000010                                  ; Length of the record
000000000001ec08         dd         0x00001598                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ec0c         db         0x44, 0xd3, 0xfe, 0xff                      ; begin 0xbf50
000000000001ec10         db         0x75, 3 dup (0x00)                          ; length 0x75 (end at 0xbfc5)
000000000001ec14         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ec15         align      8
000000000001ec18         dd         0x00000060                                  ; Length of the record
000000000001ec1c         dd         0x000015ac                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ec20         db         0xb0, 0xd3, 0xfe, 0xff                      ; begin 0xbfd0
000000000001ec24         db         0xf5, 3 dup (0x00)                          ; length 0xf5 (end at 0xc0c5)
000000000001ec28         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ec29         db  0x42 ; 'B'
000000000001ec2a         db  0x0e ; '.'
000000000001ec2b         db  0x10 ; '.'
000000000001ec2c         db  0x8f ; '.'
000000000001ec2d         db  0x02 ; '.'
000000000001ec2e         db  0x42 ; 'B'
000000000001ec2f         db  0x0e ; '.'
000000000001ec30         db  0x18 ; '.'
000000000001ec31         db  0x8e ; '.'
000000000001ec32         db  0x03 ; '.'
000000000001ec33         db  0x46 ; 'F'
000000000001ec34         db  0x0e ; '.'
000000000001ec35         db  0x20 ; ' '
000000000001ec36         db  0x8d ; '.'
000000000001ec37         db  0x04 ; '.'
000000000001ec38         db  0x42 ; 'B'
000000000001ec39         db  0x0e ; '.'
000000000001ec3a         db  0x28 ; '('
000000000001ec3b         db  0x8c ; '.'
000000000001ec3c         db  0x05 ; '.'
000000000001ec3d         db  0x44 ; 'D'
000000000001ec3e         db  0x0e ; '.'
000000000001ec3f         db  0x30 ; '0'
000000000001ec40         db  0x86 ; '.'
000000000001ec41         db  0x06 ; '.'
000000000001ec42         db  0x41 ; 'A'
000000000001ec43         db  0x0e ; '.'
000000000001ec44         db  0x38 ; '8'
000000000001ec45         db  0x83 ; '.'
000000000001ec46         db  0x07 ; '.'
000000000001ec47         db  0x50 ; 'P'
000000000001ec48         db  0x0e ; '.'
000000000001ec49         db  0x40 ; '@'
000000000001ec4a         db  0x02 ; '.'
000000000001ec4b         db  0x85 ; '.'
000000000001ec4c         db  0x0a ; '.'
000000000001ec4d         db  0x0e ; '.'
000000000001ec4e         db  0x38 ; '8'
000000000001ec4f         db  0x41 ; 'A'
000000000001ec50         db  0x0e ; '.'
000000000001ec51         db  0x30 ; '0'
000000000001ec52         db  0x41 ; 'A'
000000000001ec53         db  0x0e ; '.'
000000000001ec54         db  0x28 ; '('
000000000001ec55         db  0x42 ; 'B'
000000000001ec56         db  0x0e ; '.'
000000000001ec57         db  0x20 ; ' '
000000000001ec58         db  0x42 ; 'B'
000000000001ec59         db  0x0e ; '.'
000000000001ec5a         db  0x18 ; '.'
000000000001ec5b         db  0x42 ; 'B'
000000000001ec5c         db  0x0e ; '.'
000000000001ec5d         db  0x10 ; '.'
000000000001ec5e         db  0x42 ; 'B'
000000000001ec5f         db  0x0e ; '.'
000000000001ec60         db  0x08 ; '.'
000000000001ec61         db  0x48 ; 'H'
000000000001ec62         db  0x0b ; '.'
000000000001ec63         db  0x44 ; 'D'
000000000001ec64         db  0x0a ; '.'
000000000001ec65         db  0x0e ; '.'
000000000001ec66         db  0x38 ; '8'
000000000001ec67         db  0x46 ; 'F'
000000000001ec68         db  0x0e ; '.'
000000000001ec69         db  0x30 ; '0'
000000000001ec6a         db  0x41 ; 'A'
000000000001ec6b         db  0x0e ; '.'
000000000001ec6c         db  0x28 ; '('
000000000001ec6d         db  0x42 ; 'B'
000000000001ec6e         db  0x0e ; '.'
000000000001ec6f         db  0x20 ; ' '
000000000001ec70         db  0x42 ; 'B'
000000000001ec71         db  0x0e ; '.'
000000000001ec72         db  0x18 ; '.'
000000000001ec73         db  0x42 ; 'B'
000000000001ec74         db  0x0e ; '.'
000000000001ec75         db  0x10 ; '.'
000000000001ec76         db  0x42 ; 'B'
000000000001ec77         db  0x0e ; '.'
000000000001ec78         db  0x08 ; '.'
000000000001ec79         db  0x45 ; 'E'
000000000001ec7a         db  0x0b ; '.'
000000000001ec7b         db  0x00 ; '.'
000000000001ec7c         dd         0x00000010                                  ; Length of the record
000000000001ec80         dd         0x00001610                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ec84         db         0x4c, 0xd4, 0xfe, 0xff                      ; begin 0xc0d0
000000000001ec88         db         0x34, 3 dup (0x00)                          ; length 0x34 (end at 0xc104)
000000000001ec8c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ec8d         align      16
000000000001ec90         dd         0x00000010                                  ; Length of the record
000000000001ec94         dd         0x00001624                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ec98         db         0x78, 0xd4, 0xfe, 0xff                      ; begin 0xc110
000000000001ec9c         db         0x8b, 3 dup (0x00)                          ; length 0x8b (end at 0xc19b)
000000000001eca0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001eca1         align      4
000000000001eca4         dd         0x00000010                                  ; Length of the record
000000000001eca8         dd         0x00001638                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ecac         db         0xf4, 0xd4, 0xfe, 0xff                      ; begin 0xc1a0
000000000001ecb0         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0xc1f7)
000000000001ecb4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ecb5         align      8
000000000001ecb8         dd         0x0000004c                                  ; Length of the record
000000000001ecbc         dd         0x0000164c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ecc0         db         0x40, 0xd5, 0xfe, 0xff                      ; begin 0xc200
000000000001ecc4         db         0x69, 0x02, 2 dup (0x00)                    ; length 0x269 (end at 0xc469)
000000000001ecc8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ecc9         db  0x42 ; 'B'
000000000001ecca         db  0x0e ; '.'
000000000001eccb         db  0x10 ; '.'
000000000001eccc         db  0x8f ; '.'
000000000001eccd         db  0x02 ; '.'
000000000001ecce         db  0x42 ; 'B'
000000000001eccf         db  0x0e ; '.'
000000000001ecd0         db  0x18 ; '.'
000000000001ecd1         db  0x8e ; '.'
000000000001ecd2         db  0x03 ; '.'
000000000001ecd3         db  0x42 ; 'B'
000000000001ecd4         db  0x0e ; '.'
000000000001ecd5         db  0x20 ; ' '
000000000001ecd6         db  0x8d ; '.'
000000000001ecd7         db  0x04 ; '.'
000000000001ecd8         db  0x42 ; 'B'
000000000001ecd9         db  0x0e ; '.'
000000000001ecda         db  0x28 ; '('
000000000001ecdb         db  0x8c ; '.'
000000000001ecdc         db  0x05 ; '.'
000000000001ecdd         db  0x41 ; 'A'
000000000001ecde         db  0x0e ; '.'
000000000001ecdf         db  0x30 ; '0'
000000000001ece0         db  0x86 ; '.'
000000000001ece1         db  0x06 ; '.'
000000000001ece2         db  0x41 ; 'A'
000000000001ece3         db  0x0e ; '.'
000000000001ece4         db  0x38 ; '8'
000000000001ece5         db  0x83 ; '.'
000000000001ece6         db  0x07 ; '.'
000000000001ece7         db  0x46 ; 'F'
000000000001ece8         db  0x0e ; '.'
000000000001ece9         db  0x80 ; '.'
000000000001ecea         db  0x01 ; '.'
000000000001eceb         db  0x03 ; '.'
000000000001ecec         db  0xd2 ; '.'
000000000001eced         db  0x01 ; '.'
000000000001ecee         db  0x0a ; '.'
000000000001ecef         db  0x0e ; '.'
000000000001ecf0         db  0x38 ; '8'
000000000001ecf1         db  0x41 ; 'A'
000000000001ecf2         db  0x0e ; '.'
000000000001ecf3         db  0x30 ; '0'
000000000001ecf4         db  0x41 ; 'A'
000000000001ecf5         db  0x0e ; '.'
000000000001ecf6         db  0x28 ; '('
000000000001ecf7         db  0x42 ; 'B'
000000000001ecf8         db  0x0e ; '.'
000000000001ecf9         db  0x20 ; ' '
000000000001ecfa         db  0x42 ; 'B'
000000000001ecfb         db  0x0e ; '.'
000000000001ecfc         db  0x18 ; '.'
000000000001ecfd         db  0x42 ; 'B'
000000000001ecfe         db  0x0e ; '.'
000000000001ecff         db  0x10 ; '.'
000000000001ed00         db  0x42 ; 'B'
000000000001ed01         db  0x0e ; '.'
000000000001ed02         db  0x08 ; '.'
000000000001ed03         db  0x44 ; 'D'
000000000001ed04         db  0x0b ; '.'
000000000001ed05         db  0x00 ; '.'
000000000001ed06         db  0x00 ; '.'
000000000001ed07         db  0x00 ; '.'
000000000001ed08         dd         0x00000034                                  ; Length of the record
000000000001ed0c         dd         0x0000169c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ed10         db         0x60, 0xd7, 0xfe, 0xff                      ; begin 0xc470
000000000001ed14         db         0xde, 0x01, 2 dup (0x00)                    ; length 0x1de (end at 0xc64e)
000000000001ed18         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ed19         db  0x58 ; 'X'
000000000001ed1a         db  0x0e ; '.'
000000000001ed1b         db  0x10 ; '.'
000000000001ed1c         db  0x8c ; '.'
000000000001ed1d         db  0x02 ; '.'
000000000001ed1e         db  0x41 ; 'A'
000000000001ed1f         db  0x0e ; '.'
000000000001ed20         db  0x18 ; '.'
000000000001ed21         db  0x86 ; '.'
000000000001ed22         db  0x03 ; '.'
000000000001ed23         db  0x44 ; 'D'
000000000001ed24         db  0x0e ; '.'
000000000001ed25         db  0x20 ; ' '
000000000001ed26         db  0x83 ; '.'
000000000001ed27         db  0x04 ; '.'
000000000001ed28         db  0x02 ; '.'
000000000001ed29         db  0xd0 ; '.'
000000000001ed2a         db  0x0e ; '.'
000000000001ed2b         db  0x18 ; '.'
000000000001ed2c         db  0x41 ; 'A'
000000000001ed2d         db  0x0e ; '.'
000000000001ed2e         db  0x10 ; '.'
000000000001ed2f         db  0x42 ; 'B'
000000000001ed30         db  0x0e ; '.'
000000000001ed31         db  0x08 ; '.'
000000000001ed32         db  0x48 ; 'H'
000000000001ed33         db  0xc3 ; '.'
000000000001ed34         db  0xc6 ; '.'
000000000001ed35         db  0xcc ; '.'
000000000001ed36         db  0x48 ; 'H'
000000000001ed37         db  0x0e ; '.'
000000000001ed38         db  0x20 ; ' '
000000000001ed39         db  0x83 ; '.'
000000000001ed3a         db  0x04 ; '.'
000000000001ed3b         db  0x86 ; '.'
000000000001ed3c         db  0x03 ; '.'
000000000001ed3d         db  0x8c ; '.'
000000000001ed3e         db  0x02 ; '.'
000000000001ed3f         db  0x00 ; '.'
000000000001ed40         dd         0x0000004c                                  ; Length of the record
000000000001ed44         dd         0x000016d4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ed48         db         0x08, 0xd9, 0xfe, 0xff                      ; begin 0xc650
000000000001ed4c         db         0xaf, 0x02, 2 dup (0x00)                    ; length 0x2af (end at 0xc8ff)
000000000001ed50         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ed51         db  0x42 ; 'B'
000000000001ed52         db  0x0e ; '.'
000000000001ed53         db  0x10 ; '.'
000000000001ed54         db  0x8f ; '.'
000000000001ed55         db  0x02 ; '.'
000000000001ed56         db  0x42 ; 'B'
000000000001ed57         db  0x0e ; '.'
000000000001ed58         db  0x18 ; '.'
000000000001ed59         db  0x8e ; '.'
000000000001ed5a         db  0x03 ; '.'
000000000001ed5b         db  0x45 ; 'E'
000000000001ed5c         db  0x0e ; '.'
000000000001ed5d         db  0x20 ; ' '
000000000001ed5e         db  0x8d ; '.'
000000000001ed5f         db  0x04 ; '.'
000000000001ed60         db  0x42 ; 'B'
000000000001ed61         db  0x0e ; '.'
000000000001ed62         db  0x28 ; '('
000000000001ed63         db  0x8c ; '.'
000000000001ed64         db  0x05 ; '.'
000000000001ed65         db  0x41 ; 'A'
000000000001ed66         db  0x0e ; '.'
000000000001ed67         db  0x30 ; '0'
000000000001ed68         db  0x86 ; '.'
000000000001ed69         db  0x06 ; '.'
000000000001ed6a         db  0x41 ; 'A'
000000000001ed6b         db  0x0e ; '.'
000000000001ed6c         db  0x38 ; '8'
000000000001ed6d         db  0x83 ; '.'
000000000001ed6e         db  0x07 ; '.'
000000000001ed6f         db  0x4b ; 'K'
000000000001ed70         db  0x0e ; '.'
000000000001ed71         db  0xa0 ; '.'
000000000001ed72         db  0x01 ; '.'
000000000001ed73         db  0x03 ; '.'
000000000001ed74         db  0xa6 ; '.'
000000000001ed75         db  0x01 ; '.'
000000000001ed76         db  0x0a ; '.'
000000000001ed77         db  0x0e ; '.'
000000000001ed78         db  0x38 ; '8'
000000000001ed79         db  0x41 ; 'A'
000000000001ed7a         db  0x0e ; '.'
000000000001ed7b         db  0x30 ; '0'
000000000001ed7c         db  0x41 ; 'A'
000000000001ed7d         db  0x0e ; '.'
000000000001ed7e         db  0x28 ; '('
000000000001ed7f         db  0x42 ; 'B'
000000000001ed80         db  0x0e ; '.'
000000000001ed81         db  0x20 ; ' '
000000000001ed82         db  0x42 ; 'B'
000000000001ed83         db  0x0e ; '.'
000000000001ed84         db  0x18 ; '.'
000000000001ed85         db  0x42 ; 'B'
000000000001ed86         db  0x0e ; '.'
000000000001ed87         db  0x10 ; '.'
000000000001ed88         db  0x42 ; 'B'
000000000001ed89         db  0x0e ; '.'
000000000001ed8a         db  0x08 ; '.'
000000000001ed8b         db  0x48 ; 'H'
000000000001ed8c         db  0x0b ; '.'
000000000001ed8d         db  0x00 ; '.'
000000000001ed8e         db  0x00 ; '.'
000000000001ed8f         db  0x00 ; '.'
000000000001ed90         dd         0x00000048                                  ; Length of the record
000000000001ed94         dd         0x00001724                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ed98         db         0x68, 0xdb, 0xfe, 0xff                      ; begin 0xc900
000000000001ed9c         db         0x59, 0x01, 2 dup (0x00)                    ; length 0x159 (end at 0xca59)
000000000001eda0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001eda1         db  0x42 ; 'B'
000000000001eda2         db  0x0e ; '.'
000000000001eda3         db  0x10 ; '.'
000000000001eda4         db  0x8f ; '.'
000000000001eda5         db  0x02 ; '.'
000000000001eda6         db  0x42 ; 'B'
000000000001eda7         db  0x0e ; '.'
000000000001eda8         db  0x18 ; '.'
000000000001eda9         db  0x8e ; '.'
000000000001edaa         db  0x03 ; '.'
000000000001edab         db  0x45 ; 'E'
000000000001edac         db  0x0e ; '.'
000000000001edad         db  0x20 ; ' '
000000000001edae         db  0x8d ; '.'
000000000001edaf         db  0x04 ; '.'
000000000001edb0         db  0x42 ; 'B'
000000000001edb1         db  0x0e ; '.'
000000000001edb2         db  0x28 ; '('
000000000001edb3         db  0x8c ; '.'
000000000001edb4         db  0x05 ; '.'
000000000001edb5         db  0x44 ; 'D'
000000000001edb6         db  0x0e ; '.'
000000000001edb7         db  0x30 ; '0'
000000000001edb8         db  0x86 ; '.'
000000000001edb9         db  0x06 ; '.'
000000000001edba         db  0x41 ; 'A'
000000000001edbb         db  0x0e ; '.'
000000000001edbc         db  0x38 ; '8'
000000000001edbd         db  0x83 ; '.'
000000000001edbe         db  0x07 ; '.'
000000000001edbf         db  0x49 ; 'I'
000000000001edc0         db  0x0e ; '.'
000000000001edc1         db  0x70 ; 'p'
000000000001edc2         db  0x03 ; '.'
000000000001edc3         db  0x29 ; ')'
000000000001edc4         db  0x01 ; '.'
000000000001edc5         db  0x0a ; '.'
000000000001edc6         db  0x0e ; '.'
000000000001edc7         db  0x38 ; '8'
000000000001edc8         db  0x41 ; 'A'
000000000001edc9         db  0x0e ; '.'
000000000001edca         db  0x30 ; '0'
000000000001edcb         db  0x41 ; 'A'
000000000001edcc         db  0x0e ; '.'
000000000001edcd         db  0x28 ; '('
000000000001edce         db  0x42 ; 'B'
000000000001edcf         db  0x0e ; '.'
000000000001edd0         db  0x20 ; ' '
000000000001edd1         db  0x42 ; 'B'
000000000001edd2         db  0x0e ; '.'
000000000001edd3         db  0x18 ; '.'
000000000001edd4         db  0x42 ; 'B'
000000000001edd5         db  0x0e ; '.'
000000000001edd6         db  0x10 ; '.'
000000000001edd7         db  0x42 ; 'B'
000000000001edd8         db  0x0e ; '.'
000000000001edd9         db  0x08 ; '.'
000000000001edda         db  0x41 ; 'A'
000000000001eddb         db  0x0b ; '.'
000000000001eddc         dd         0x0000004c                                  ; Length of the record
000000000001ede0         dd         0x00001770                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ede4         db         0x7c, 0xdc, 0xfe, 0xff                      ; begin 0xca60
000000000001ede8         db         0xa8, 0x01, 2 dup (0x00)                    ; length 0x1a8 (end at 0xcc08)
000000000001edec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001eded         db  0x5e ; '^'
000000000001edee         db  0x0e ; '.'
000000000001edef         db  0x10 ; '.'
000000000001edf0         db  0x8d ; '.'
000000000001edf1         db  0x02 ; '.'
000000000001edf2         db  0x42 ; 'B'
000000000001edf3         db  0x0e ; '.'
000000000001edf4         db  0x18 ; '.'
000000000001edf5         db  0x8c ; '.'
000000000001edf6         db  0x03 ; '.'
000000000001edf7         db  0x45 ; 'E'
000000000001edf8         db  0x0e ; '.'
000000000001edf9         db  0x20 ; ' '
000000000001edfa         db  0x86 ; '.'
000000000001edfb         db  0x04 ; '.'
000000000001edfc         db  0x41 ; 'A'
000000000001edfd         db  0x0e ; '.'
000000000001edfe         db  0x28 ; '('
000000000001edff         db  0x83 ; '.'
000000000001ee00         db  0x05 ; '.'
000000000001ee01         db  0x4d ; 'M'
000000000001ee02         db  0x0e ; '.'
000000000001ee03         db  0x30 ; '0'
000000000001ee04         db  0x02 ; '.'
000000000001ee05         db  0x95 ; '.'
000000000001ee06         db  0x0e ; '.'
000000000001ee07         db  0x08 ; '.'
000000000001ee08         db  0xc3 ; '.'
000000000001ee09         db  0xc6 ; '.'
000000000001ee0a         db  0xcc ; '.'
000000000001ee0b         db  0xcd ; '.'
000000000001ee0c         db  0x48 ; 'H'
000000000001ee0d         db  0x0e ; '.'
000000000001ee0e         db  0x30 ; '0'
000000000001ee0f         db  0x83 ; '.'
000000000001ee10         db  0x05 ; '.'
000000000001ee11         db  0x86 ; '.'
000000000001ee12         db  0x04 ; '.'
000000000001ee13         db  0x8c ; '.'
000000000001ee14         db  0x03 ; '.'
000000000001ee15         db  0x8d ; '.'
000000000001ee16         db  0x02 ; '.'
000000000001ee17         db  0x02 ; '.'
000000000001ee18         db  0x90 ; '.'
000000000001ee19         db  0x0a ; '.'
000000000001ee1a         db  0x0e ; '.'
000000000001ee1b         db  0x28 ; '('
000000000001ee1c         db  0x41 ; 'A'
000000000001ee1d         db  0x0e ; '.'
000000000001ee1e         db  0x20 ; ' '
000000000001ee1f         db  0x41 ; 'A'
000000000001ee20         db  0x0e ; '.'
000000000001ee21         db  0x18 ; '.'
000000000001ee22         db  0x42 ; 'B'
000000000001ee23         db  0x0e ; '.'
000000000001ee24         db  0x10 ; '.'
000000000001ee25         db  0x42 ; 'B'
000000000001ee26         db  0x0e ; '.'
000000000001ee27         db  0x08 ; '.'
000000000001ee28         db  0x4a ; 'J'
000000000001ee29         db  0x0b ; '.'
000000000001ee2a         db  0x00 ; '.'
000000000001ee2b         db  0x00 ; '.'
000000000001ee2c         dd         0x00000020                                  ; Length of the record
000000000001ee30         dd         0x000017c0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ee34         db         0xdc, 0xdd, 0xfe, 0xff                      ; begin 0xcc10
000000000001ee38         db         0xe0, 3 dup (0x00)                          ; length 0xe0 (end at 0xccf0)
000000000001ee3c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ee3d         db  0x41 ; 'A'
000000000001ee3e         db  0x0e ; '.'
000000000001ee3f         db  0x10 ; '.'
000000000001ee40         db  0x83 ; '.'
000000000001ee41         db  0x02 ; '.'
000000000001ee42         db  0x47 ; 'G'
000000000001ee43         db  0x0e ; '.'
000000000001ee44         db  0x30 ; '0'
000000000001ee45         db  0x02 ; '.'
000000000001ee46         db  0x77 ; 'w'
000000000001ee47         db  0x0a ; '.'
000000000001ee48         db  0x0e ; '.'
000000000001ee49         db  0x10 ; '.'
000000000001ee4a         db  0x41 ; 'A'
000000000001ee4b         db  0x0e ; '.'
000000000001ee4c         db  0x08 ; '.'
000000000001ee4d         db  0x48 ; 'H'
000000000001ee4e         db  0x0b ; '.'
000000000001ee4f         db  0x00 ; '.'
000000000001ee50         dd         0x00000040                                  ; Length of the record
000000000001ee54         dd         0x000017e4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ee58         db         0x98, 0xde, 0xfe, 0xff                      ; begin 0xccf0
000000000001ee5c         db         0xd1, 3 dup (0x00)                          ; length 0xd1 (end at 0xcdc1)
000000000001ee60         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ee61         db  0x42 ; 'B'
000000000001ee62         db  0x0e ; '.'
000000000001ee63         db  0x10 ; '.'
000000000001ee64         db  0x8e ; '.'
000000000001ee65         db  0x02 ; '.'
000000000001ee66         db  0x42 ; 'B'
000000000001ee67         db  0x0e ; '.'
000000000001ee68         db  0x18 ; '.'
000000000001ee69         db  0x8d ; '.'
000000000001ee6a         db  0x03 ; '.'
000000000001ee6b         db  0x46 ; 'F'
000000000001ee6c         db  0x0e ; '.'
000000000001ee6d         db  0x20 ; ' '
000000000001ee6e         db  0x8c ; '.'
000000000001ee6f         db  0x04 ; '.'
000000000001ee70         db  0x41 ; 'A'
000000000001ee71         db  0x0e ; '.'
000000000001ee72         db  0x28 ; '('
000000000001ee73         db  0x86 ; '.'
000000000001ee74         db  0x05 ; '.'
000000000001ee75         db  0x48 ; 'H'
000000000001ee76         db  0x0e ; '.'
000000000001ee77         db  0x30 ; '0'
000000000001ee78         db  0x83 ; '.'
000000000001ee79         db  0x06 ; '.'
000000000001ee7a         db  0x47 ; 'G'
000000000001ee7b         db  0x0e ; '.'
000000000001ee7c         db  0x40 ; '@'
000000000001ee7d         db  0x02 ; '.'
000000000001ee7e         db  0x96 ; '.'
000000000001ee7f         db  0x0a ; '.'
000000000001ee80         db  0x0e ; '.'
000000000001ee81         db  0x30 ; '0'
000000000001ee82         db  0x41 ; 'A'
000000000001ee83         db  0x0e ; '.'
000000000001ee84         db  0x28 ; '('
000000000001ee85         db  0x41 ; 'A'
000000000001ee86         db  0x0e ; '.'
000000000001ee87         db  0x20 ; ' '
000000000001ee88         db  0x42 ; 'B'
000000000001ee89         db  0x0e ; '.'
000000000001ee8a         db  0x18 ; '.'
000000000001ee8b         db  0x42 ; 'B'
000000000001ee8c         db  0x0e ; '.'
000000000001ee8d         db  0x10 ; '.'
000000000001ee8e         db  0x42 ; 'B'
000000000001ee8f         db  0x0e ; '.'
000000000001ee90         db  0x08 ; '.'
000000000001ee91         db  0x48 ; 'H'
000000000001ee92         db  0x0b ; '.'
000000000001ee93         db  0x00 ; '.'
000000000001ee94         dd         0x0000004c                                  ; Length of the record
000000000001ee98         dd         0x00001828                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ee9c         db         0x34, 0xdf, 0xfe, 0xff                      ; begin 0xcdd0
000000000001eea0         db         0x37, 0x02, 2 dup (0x00)                    ; length 0x237 (end at 0xd007)
000000000001eea4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001eea5         db  0x42 ; 'B'
000000000001eea6         db  0x0e ; '.'
000000000001eea7         db  0x10 ; '.'
000000000001eea8         db  0x8f ; '.'
000000000001eea9         db  0x02 ; '.'
000000000001eeaa         db  0x42 ; 'B'
000000000001eeab         db  0x0e ; '.'
000000000001eeac         db  0x18 ; '.'
000000000001eead         db  0x8e ; '.'
000000000001eeae         db  0x03 ; '.'
000000000001eeaf         db  0x42 ; 'B'
000000000001eeb0         db  0x0e ; '.'
000000000001eeb1         db  0x20 ; ' '
000000000001eeb2         db  0x8d ; '.'
000000000001eeb3         db  0x04 ; '.'
000000000001eeb4         db  0x42 ; 'B'
000000000001eeb5         db  0x0e ; '.'
000000000001eeb6         db  0x28 ; '('
000000000001eeb7         db  0x8c ; '.'
000000000001eeb8         db  0x05 ; '.'
000000000001eeb9         db  0x44 ; 'D'
000000000001eeba         db  0x0e ; '.'
000000000001eebb         db  0x30 ; '0'
000000000001eebc         db  0x86 ; '.'
000000000001eebd         db  0x06 ; '.'
000000000001eebe         db  0x41 ; 'A'
000000000001eebf         db  0x0e ; '.'
000000000001eec0         db  0x38 ; '8'
000000000001eec1         db  0x83 ; '.'
000000000001eec2         db  0x07 ; '.'
000000000001eec3         db  0x44 ; 'D'
000000000001eec4         db  0x0e ; '.'
000000000001eec5         db  0x80 ; '.'
000000000001eec6         db  0x01 ; '.'
000000000001eec7         db  0x03 ; '.'
000000000001eec8         db  0x87 ; '.'
000000000001eec9         db  0x01 ; '.'
000000000001eeca         db  0x0a ; '.'
000000000001eecb         db  0x0e ; '.'
000000000001eecc         db  0x38 ; '8'
000000000001eecd         db  0x41 ; 'A'
000000000001eece         db  0x0e ; '.'
000000000001eecf         db  0x30 ; '0'
000000000001eed0         db  0x41 ; 'A'
000000000001eed1         db  0x0e ; '.'
000000000001eed2         db  0x28 ; '('
000000000001eed3         db  0x42 ; 'B'
000000000001eed4         db  0x0e ; '.'
000000000001eed5         db  0x20 ; ' '
000000000001eed6         db  0x42 ; 'B'
000000000001eed7         db  0x0e ; '.'
000000000001eed8         db  0x18 ; '.'
000000000001eed9         db  0x42 ; 'B'
000000000001eeda         db  0x0e ; '.'
000000000001eedb         db  0x10 ; '.'
000000000001eedc         db  0x42 ; 'B'
000000000001eedd         db  0x0e ; '.'
000000000001eede         db  0x08 ; '.'
000000000001eedf         db  0x46 ; 'F'
000000000001eee0         db  0x0b ; '.'
000000000001eee1         db  0x00 ; '.'
000000000001eee2         db  0x00 ; '.'
000000000001eee3         db  0x00 ; '.'
000000000001eee4         dd         0x00000028                                  ; Length of the record
000000000001eee8         dd         0x00001878                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001eeec         db         0x24, 0xe1, 0xfe, 0xff                      ; begin 0xd010
000000000001eef0         db         0xa0, 3 dup (0x00)                          ; length 0xa0 (end at 0xd0b0)
000000000001eef4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001eef5         db  0x41 ; 'A'
000000000001eef6         db  0x0e ; '.'
000000000001eef7         db  0x10 ; '.'
000000000001eef8         db  0x86 ; '.'
000000000001eef9         db  0x02 ; '.'
000000000001eefa         db  0x41 ; 'A'
000000000001eefb         db  0x0e ; '.'
000000000001eefc         db  0x18 ; '.'
000000000001eefd         db  0x83 ; '.'
000000000001eefe         db  0x03 ; '.'
000000000001eeff         db  0x4a ; 'J'
000000000001ef00         db  0x0e ; '.'
000000000001ef01         db  0x30 ; '0'
000000000001ef02         db  0x02 ; '.'
000000000001ef03         db  0x4e ; 'N'
000000000001ef04         db  0x0a ; '.'
000000000001ef05         db  0x0e ; '.'
000000000001ef06         db  0x18 ; '.'
000000000001ef07         db  0x41 ; 'A'
000000000001ef08         db  0x0e ; '.'
000000000001ef09         db  0x10 ; '.'
000000000001ef0a         db  0x41 ; 'A'
000000000001ef0b         db  0x0e ; '.'
000000000001ef0c         db  0x08 ; '.'
000000000001ef0d         db  0x44 ; 'D'
000000000001ef0e         db  0x0b ; '.'
000000000001ef0f         db  0x00 ; '.'
000000000001ef10         dd         0x00000038                                  ; Length of the record
000000000001ef14         dd         0x000018a4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ef18         db         0x98, 0xe1, 0xfe, 0xff                      ; begin 0xd0b0
000000000001ef1c         db         0x86, 3 dup (0x00)                          ; length 0x86 (end at 0xd136)
000000000001ef20         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ef21         db  0x42 ; 'B'
000000000001ef22         db  0x0e ; '.'
000000000001ef23         db  0x10 ; '.'
000000000001ef24         db  0x8c ; '.'
000000000001ef25         db  0x02 ; '.'
000000000001ef26         db  0x41 ; 'A'
000000000001ef27         db  0x0e ; '.'
000000000001ef28         db  0x18 ; '.'
000000000001ef29         db  0x86 ; '.'
000000000001ef2a         db  0x03 ; '.'
000000000001ef2b         db  0x41 ; 'A'
000000000001ef2c         db  0x0e ; '.'
000000000001ef2d         db  0x20 ; ' '
000000000001ef2e         db  0x83 ; '.'
000000000001ef2f         db  0x04 ; '.'
000000000001ef30         db  0x02 ; '.'
000000000001ef31         db  0x47 ; 'G'
000000000001ef32         db  0x0a ; '.'
000000000001ef33         db  0x0e ; '.'
000000000001ef34         db  0x18 ; '.'
000000000001ef35         db  0x41 ; 'A'
000000000001ef36         db  0x0e ; '.'
000000000001ef37         db  0x10 ; '.'
000000000001ef38         db  0x42 ; 'B'
000000000001ef39         db  0x0e ; '.'
000000000001ef3a         db  0x08 ; '.'
000000000001ef3b         db  0x42 ; 'B'
000000000001ef3c         db  0x0b ; '.'
000000000001ef3d         db  0x52 ; 'R'
000000000001ef3e         db  0x0a ; '.'
000000000001ef3f         db  0x0e ; '.'
000000000001ef40         db  0x18 ; '.'
000000000001ef41         db  0x41 ; 'A'
000000000001ef42         db  0x0e ; '.'
000000000001ef43         db  0x10 ; '.'
000000000001ef44         db  0x42 ; 'B'
000000000001ef45         db  0x0e ; '.'
000000000001ef46         db  0x08 ; '.'
000000000001ef47         db  0x4b ; 'K'
000000000001ef48         db  0x0b ; '.'
000000000001ef49         db  0x00 ; '.'
000000000001ef4a         db  0x00 ; '.'
000000000001ef4b         db  0x00 ; '.'
000000000001ef4c         dd         0x00000060                                  ; Length of the record
000000000001ef50         dd         0x000018e0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ef54         db         0xec, 0xe1, 0xfe, 0xff                      ; begin 0xd140
000000000001ef58         db         0x52, 0x01, 2 dup (0x00)                    ; length 0x152 (end at 0xd292)
000000000001ef5c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ef5d         db  0x45 ; 'E'
000000000001ef5e         db  0x0e ; '.'
000000000001ef5f         db  0x10 ; '.'
000000000001ef60         db  0x8e ; '.'
000000000001ef61         db  0x02 ; '.'
000000000001ef62         db  0x42 ; 'B'
000000000001ef63         db  0x0e ; '.'
000000000001ef64         db  0x18 ; '.'
000000000001ef65         db  0x8d ; '.'
000000000001ef66         db  0x03 ; '.'
000000000001ef67         db  0x42 ; 'B'
000000000001ef68         db  0x0e ; '.'
000000000001ef69         db  0x20 ; ' '
000000000001ef6a         db  0x8c ; '.'
000000000001ef6b         db  0x04 ; '.'
000000000001ef6c         db  0x41 ; 'A'
000000000001ef6d         db  0x0e ; '.'
000000000001ef6e         db  0x28 ; '('
000000000001ef6f         db  0x86 ; '.'
000000000001ef70         db  0x05 ; '.'
000000000001ef71         db  0x41 ; 'A'
000000000001ef72         db  0x0e ; '.'
000000000001ef73         db  0x30 ; '0'
000000000001ef74         db  0x83 ; '.'
000000000001ef75         db  0x06 ; '.'
000000000001ef76         db  0x02 ; '.'
000000000001ef77         db  0xc8 ; '.'
000000000001ef78         db  0x0a ; '.'
000000000001ef79         db  0x0e ; '.'
000000000001ef7a         db  0x28 ; '('
000000000001ef7b         db  0x41 ; 'A'
000000000001ef7c         db  0x0e ; '.'
000000000001ef7d         db  0x20 ; ' '
000000000001ef7e         db  0x42 ; 'B'
000000000001ef7f         db  0x0e ; '.'
000000000001ef80         db  0x18 ; '.'
000000000001ef81         db  0x42 ; 'B'
000000000001ef82         db  0x0e ; '.'
000000000001ef83         db  0x10 ; '.'
000000000001ef84         db  0x42 ; 'B'
000000000001ef85         db  0x0e ; '.'
000000000001ef86         db  0x08 ; '.'
000000000001ef87         db  0x46 ; 'F'
000000000001ef88         db  0x0b ; '.'
000000000001ef89         db  0x44 ; 'D'
000000000001ef8a         db  0x0a ; '.'
000000000001ef8b         db  0x0e ; '.'
000000000001ef8c         db  0x28 ; '('
000000000001ef8d         db  0x41 ; 'A'
000000000001ef8e         db  0x0e ; '.'
000000000001ef8f         db  0x20 ; ' '
000000000001ef90         db  0x42 ; 'B'
000000000001ef91         db  0x0e ; '.'
000000000001ef92         db  0x18 ; '.'
000000000001ef93         db  0x42 ; 'B'
000000000001ef94         db  0x0e ; '.'
000000000001ef95         db  0x10 ; '.'
000000000001ef96         db  0x42 ; 'B'
000000000001ef97         db  0x0e ; '.'
000000000001ef98         db  0x08 ; '.'
000000000001ef99         db  0x45 ; 'E'
000000000001ef9a         db  0x0b ; '.'
000000000001ef9b         db  0x4d ; 'M'
000000000001ef9c         db  0x0a ; '.'
000000000001ef9d         db  0x0e ; '.'
000000000001ef9e         db  0x28 ; '('
000000000001ef9f         db  0x41 ; 'A'
000000000001efa0         db  0x0e ; '.'
000000000001efa1         db  0x20 ; ' '
000000000001efa2         db  0x42 ; 'B'
000000000001efa3         db  0x0e ; '.'
000000000001efa4         db  0x18 ; '.'
000000000001efa5         db  0x42 ; 'B'
000000000001efa6         db  0x0e ; '.'
000000000001efa7         db  0x10 ; '.'
000000000001efa8         db  0x42 ; 'B'
000000000001efa9         db  0x0e ; '.'
000000000001efaa         db  0x08 ; '.'
000000000001efab         db  0x44 ; 'D'
000000000001efac         db  0x0b ; '.'
000000000001efad         db  0x00 ; '.'
000000000001efae         db  0x00 ; '.'
000000000001efaf         db  0x00 ; '.'
000000000001efb0         dd         0x00000048                                  ; Length of the record
000000000001efb4         dd         0x00001944                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001efb8         db         0xe8, 0xe2, 0xfe, 0xff                      ; begin 0xd2a0
000000000001efbc         db         0xba, 0x02, 2 dup (0x00)                    ; length 0x2ba (end at 0xd55a)
000000000001efc0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001efc1         db  0x42 ; 'B'
000000000001efc2         db  0x0e ; '.'
000000000001efc3         db  0x10 ; '.'
000000000001efc4         db  0x8f ; '.'
000000000001efc5         db  0x02 ; '.'
000000000001efc6         db  0x42 ; 'B'
000000000001efc7         db  0x0e ; '.'
000000000001efc8         db  0x18 ; '.'
000000000001efc9         db  0x8e ; '.'
000000000001efca         db  0x03 ; '.'
000000000001efcb         db  0x42 ; 'B'
000000000001efcc         db  0x0e ; '.'
000000000001efcd         db  0x20 ; ' '
000000000001efce         db  0x8d ; '.'
000000000001efcf         db  0x04 ; '.'
000000000001efd0         db  0x42 ; 'B'
000000000001efd1         db  0x0e ; '.'
000000000001efd2         db  0x28 ; '('
000000000001efd3         db  0x8c ; '.'
000000000001efd4         db  0x05 ; '.'
000000000001efd5         db  0x41 ; 'A'
000000000001efd6         db  0x0e ; '.'
000000000001efd7         db  0x30 ; '0'
000000000001efd8         db  0x86 ; '.'
000000000001efd9         db  0x06 ; '.'
000000000001efda         db  0x41 ; 'A'
000000000001efdb         db  0x0e ; '.'
000000000001efdc         db  0x38 ; '8'
000000000001efdd         db  0x83 ; '.'
000000000001efde         db  0x07 ; '.'
000000000001efdf         db  0x44 ; 'D'
000000000001efe0         db  0x0e ; '.'
000000000001efe1         db  0x60 ; '`'
000000000001efe2         db  0x02 ; '.'
000000000001efe3         db  0xa2 ; '.'
000000000001efe4         db  0x0a ; '.'
000000000001efe5         db  0x0e ; '.'
000000000001efe6         db  0x38 ; '8'
000000000001efe7         db  0x44 ; 'D'
000000000001efe8         db  0x0e ; '.'
000000000001efe9         db  0x30 ; '0'
000000000001efea         db  0x41 ; 'A'
000000000001efeb         db  0x0e ; '.'
000000000001efec         db  0x28 ; '('
000000000001efed         db  0x42 ; 'B'
000000000001efee         db  0x0e ; '.'
000000000001efef         db  0x20 ; ' '
000000000001eff0         db  0x42 ; 'B'
000000000001eff1         db  0x0e ; '.'
000000000001eff2         db  0x18 ; '.'
000000000001eff3         db  0x42 ; 'B'
000000000001eff4         db  0x0e ; '.'
000000000001eff5         db  0x10 ; '.'
000000000001eff6         db  0x42 ; 'B'
000000000001eff7         db  0x0e ; '.'
000000000001eff8         db  0x08 ; '.'
000000000001eff9         db  0x43 ; 'C'
000000000001effa         db  0x0b ; '.'
000000000001effb         db  0x00 ; '.'
000000000001effc         dd         0x00000048                                  ; Length of the record
000000000001f000         dd         0x00001990                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f004         db         0x5c, 0xe5, 0xfe, 0xff                      ; begin 0xd560
000000000001f008         db         0xfa, 0x01, 2 dup (0x00)                    ; length 0x1fa (end at 0xd75a)
000000000001f00c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f00d         db  0x42 ; 'B'
000000000001f00e         db  0x0e ; '.'
000000000001f00f         db  0x10 ; '.'
000000000001f010         db  0x8f ; '.'
000000000001f011         db  0x02 ; '.'
000000000001f012         db  0x42 ; 'B'
000000000001f013         db  0x0e ; '.'
000000000001f014         db  0x18 ; '.'
000000000001f015         db  0x8e ; '.'
000000000001f016         db  0x03 ; '.'
000000000001f017         db  0x42 ; 'B'
000000000001f018         db  0x0e ; '.'
000000000001f019         db  0x20 ; ' '
000000000001f01a         db  0x8d ; '.'
000000000001f01b         db  0x04 ; '.'
000000000001f01c         db  0x42 ; 'B'
000000000001f01d         db  0x0e ; '.'
000000000001f01e         db  0x28 ; '('
000000000001f01f         db  0x8c ; '.'
000000000001f020         db  0x05 ; '.'
000000000001f021         db  0x41 ; 'A'
000000000001f022         db  0x0e ; '.'
000000000001f023         db  0x30 ; '0'
000000000001f024         db  0x86 ; '.'
000000000001f025         db  0x06 ; '.'
000000000001f026         db  0x41 ; 'A'
000000000001f027         db  0x0e ; '.'
000000000001f028         db  0x38 ; '8'
000000000001f029         db  0x83 ; '.'
000000000001f02a         db  0x07 ; '.'
000000000001f02b         db  0x44 ; 'D'
000000000001f02c         db  0x0e ; '.'
000000000001f02d         db  0x40 ; '@'
000000000001f02e         db  0x03 ; '.'
000000000001f02f         db  0x85 ; '.'
000000000001f030         db  0x01 ; '.'
000000000001f031         db  0x0a ; '.'
000000000001f032         db  0x0e ; '.'
000000000001f033         db  0x38 ; '8'
000000000001f034         db  0x44 ; 'D'
000000000001f035         db  0x0e ; '.'
000000000001f036         db  0x30 ; '0'
000000000001f037         db  0x41 ; 'A'
000000000001f038         db  0x0e ; '.'
000000000001f039         db  0x28 ; '('
000000000001f03a         db  0x42 ; 'B'
000000000001f03b         db  0x0e ; '.'
000000000001f03c         db  0x20 ; ' '
000000000001f03d         db  0x42 ; 'B'
000000000001f03e         db  0x0e ; '.'
000000000001f03f         db  0x18 ; '.'
000000000001f040         db  0x42 ; 'B'
000000000001f041         db  0x0e ; '.'
000000000001f042         db  0x10 ; '.'
000000000001f043         db  0x42 ; 'B'
000000000001f044         db  0x0e ; '.'
000000000001f045         db  0x08 ; '.'
000000000001f046         db  0x48 ; 'H'
000000000001f047         db  0x0b ; '.'
000000000001f048         dd         0x00000048                                  ; Length of the record
000000000001f04c         dd         0x000019dc                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f050         db         0x10, 0xe7, 0xfe, 0xff                      ; begin 0xd760
000000000001f054         db         0xdc, 3 dup (0x00)                          ; length 0xdc (end at 0xd83c)
000000000001f058         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f059         db  0x42 ; 'B'
000000000001f05a         db  0x0e ; '.'
000000000001f05b         db  0x10 ; '.'
000000000001f05c         db  0x8f ; '.'
000000000001f05d         db  0x02 ; '.'
000000000001f05e         db  0x42 ; 'B'
000000000001f05f         db  0x0e ; '.'
000000000001f060         db  0x18 ; '.'
000000000001f061         db  0x8e ; '.'
000000000001f062         db  0x03 ; '.'
000000000001f063         db  0x42 ; 'B'
000000000001f064         db  0x0e ; '.'
000000000001f065         db  0x20 ; ' '
000000000001f066         db  0x8d ; '.'
000000000001f067         db  0x04 ; '.'
000000000001f068         db  0x42 ; 'B'
000000000001f069         db  0x0e ; '.'
000000000001f06a         db  0x28 ; '('
000000000001f06b         db  0x8c ; '.'
000000000001f06c         db  0x05 ; '.'
000000000001f06d         db  0x41 ; 'A'
000000000001f06e         db  0x0e ; '.'
000000000001f06f         db  0x30 ; '0'
000000000001f070         db  0x86 ; '.'
000000000001f071         db  0x06 ; '.'
000000000001f072         db  0x41 ; 'A'
000000000001f073         db  0x0e ; '.'
000000000001f074         db  0x38 ; '8'
000000000001f075         db  0x83 ; '.'
000000000001f076         db  0x07 ; '.'
000000000001f077         db  0x44 ; 'D'
000000000001f078         db  0x0e ; '.'
000000000001f079         db  0x80 ; '.'
000000000001f07a         db  0x01 ; '.'
000000000001f07b         db  0x02 ; '.'
000000000001f07c         db  0xbe ; '.'
000000000001f07d         db  0x0a ; '.'
000000000001f07e         db  0x0e ; '.'
000000000001f07f         db  0x38 ; '8'
000000000001f080         db  0x41 ; 'A'
000000000001f081         db  0x0e ; '.'
000000000001f082         db  0x30 ; '0'
000000000001f083         db  0x41 ; 'A'
000000000001f084         db  0x0e ; '.'
000000000001f085         db  0x28 ; '('
000000000001f086         db  0x42 ; 'B'
000000000001f087         db  0x0e ; '.'
000000000001f088         db  0x20 ; ' '
000000000001f089         db  0x42 ; 'B'
000000000001f08a         db  0x0e ; '.'
000000000001f08b         db  0x18 ; '.'
000000000001f08c         db  0x42 ; 'B'
000000000001f08d         db  0x0e ; '.'
000000000001f08e         db  0x10 ; '.'
000000000001f08f         db  0x42 ; 'B'
000000000001f090         db  0x0e ; '.'
000000000001f091         db  0x08 ; '.'
000000000001f092         db  0x41 ; 'A'
000000000001f093         db  0x0b ; '.'
000000000001f094         dd         0x00000048                                  ; Length of the record
000000000001f098         dd         0x00001a28                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f09c         db         0xa4, 0xe7, 0xfe, 0xff                      ; begin 0xd840
000000000001f0a0         db         0x9e, 0x03, 2 dup (0x00)                    ; length 0x39e (end at 0xdbde)
000000000001f0a4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f0a5         db  0x42 ; 'B'
000000000001f0a6         db  0x0e ; '.'
000000000001f0a7         db  0x10 ; '.'
000000000001f0a8         db  0x8f ; '.'
000000000001f0a9         db  0x02 ; '.'
000000000001f0aa         db  0x42 ; 'B'
000000000001f0ab         db  0x0e ; '.'
000000000001f0ac         db  0x18 ; '.'
000000000001f0ad         db  0x8e ; '.'
000000000001f0ae         db  0x03 ; '.'
000000000001f0af         db  0x42 ; 'B'
000000000001f0b0         db  0x0e ; '.'
000000000001f0b1         db  0x20 ; ' '
000000000001f0b2         db  0x8d ; '.'
000000000001f0b3         db  0x04 ; '.'
000000000001f0b4         db  0x42 ; 'B'
000000000001f0b5         db  0x0e ; '.'
000000000001f0b6         db  0x28 ; '('
000000000001f0b7         db  0x8c ; '.'
000000000001f0b8         db  0x05 ; '.'
000000000001f0b9         db  0x44 ; 'D'
000000000001f0ba         db  0x0e ; '.'
000000000001f0bb         db  0x30 ; '0'
000000000001f0bc         db  0x86 ; '.'
000000000001f0bd         db  0x06 ; '.'
000000000001f0be         db  0x41 ; 'A'
000000000001f0bf         db  0x0e ; '.'
000000000001f0c0         db  0x38 ; '8'
000000000001f0c1         db  0x83 ; '.'
000000000001f0c2         db  0x07 ; '.'
000000000001f0c3         db  0x4c ; 'L'
000000000001f0c4         db  0x0e ; '.'
000000000001f0c5         db  0xb0 ; '.'
000000000001f0c6         db  0x01 ; '.'
000000000001f0c7         db  0x02 ; '.'
000000000001f0c8         db  0xbe ; '.'
000000000001f0c9         db  0x0a ; '.'
000000000001f0ca         db  0x0e ; '.'
000000000001f0cb         db  0x38 ; '8'
000000000001f0cc         db  0x41 ; 'A'
000000000001f0cd         db  0x0e ; '.'
000000000001f0ce         db  0x30 ; '0'
000000000001f0cf         db  0x41 ; 'A'
000000000001f0d0         db  0x0e ; '.'
000000000001f0d1         db  0x28 ; '('
000000000001f0d2         db  0x42 ; 'B'
000000000001f0d3         db  0x0e ; '.'
000000000001f0d4         db  0x20 ; ' '
000000000001f0d5         db  0x42 ; 'B'
000000000001f0d6         db  0x0e ; '.'
000000000001f0d7         db  0x18 ; '.'
000000000001f0d8         db  0x42 ; 'B'
000000000001f0d9         db  0x0e ; '.'
000000000001f0da         db  0x10 ; '.'
000000000001f0db         db  0x42 ; 'B'
000000000001f0dc         db  0x0e ; '.'
000000000001f0dd         db  0x08 ; '.'
000000000001f0de         db  0x47 ; 'G'
000000000001f0df         db  0x0b ; '.'
000000000001f0e0         dd         0x00000048                                  ; Length of the record
000000000001f0e4         dd         0x00001a74                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f0e8         db         0xf8, 0xea, 0xfe, 0xff                      ; begin 0xdbe0
000000000001f0ec         db         0x41, 0x01, 2 dup (0x00)                    ; length 0x141 (end at 0xdd21)
000000000001f0f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f0f1         db  0x42 ; 'B'
000000000001f0f2         db  0x0e ; '.'
000000000001f0f3         db  0x10 ; '.'
000000000001f0f4         db  0x8f ; '.'
000000000001f0f5         db  0x02 ; '.'
000000000001f0f6         db  0x42 ; 'B'
000000000001f0f7         db  0x0e ; '.'
000000000001f0f8         db  0x18 ; '.'
000000000001f0f9         db  0x8e ; '.'
000000000001f0fa         db  0x03 ; '.'
000000000001f0fb         db  0x42 ; 'B'
000000000001f0fc         db  0x0e ; '.'
000000000001f0fd         db  0x20 ; ' '
000000000001f0fe         db  0x8d ; '.'
000000000001f0ff         db  0x04 ; '.'
000000000001f100         db  0x42 ; 'B'
000000000001f101         db  0x0e ; '.'
000000000001f102         db  0x28 ; '('
000000000001f103         db  0x8c ; '.'
000000000001f104         db  0x05 ; '.'
000000000001f105         db  0x41 ; 'A'
000000000001f106         db  0x0e ; '.'
000000000001f107         db  0x30 ; '0'
000000000001f108         db  0x86 ; '.'
000000000001f109         db  0x06 ; '.'
000000000001f10a         db  0x41 ; 'A'
000000000001f10b         db  0x0e ; '.'
000000000001f10c         db  0x38 ; '8'
000000000001f10d         db  0x83 ; '.'
000000000001f10e         db  0x07 ; '.'
000000000001f10f         db  0x44 ; 'D'
000000000001f110         db  0x0e ; '.'
000000000001f111         db  0x60 ; '`'
000000000001f112         db  0x02 ; '.'
000000000001f113         db  0xd8 ; '.'
000000000001f114         db  0x0a ; '.'
000000000001f115         db  0x0e ; '.'
000000000001f116         db  0x38 ; '8'
000000000001f117         db  0x41 ; 'A'
000000000001f118         db  0x0e ; '.'
000000000001f119         db  0x30 ; '0'
000000000001f11a         db  0x41 ; 'A'
000000000001f11b         db  0x0e ; '.'
000000000001f11c         db  0x28 ; '('
000000000001f11d         db  0x42 ; 'B'
000000000001f11e         db  0x0e ; '.'
000000000001f11f         db  0x20 ; ' '
000000000001f120         db  0x42 ; 'B'
000000000001f121         db  0x0e ; '.'
000000000001f122         db  0x18 ; '.'
000000000001f123         db  0x42 ; 'B'
000000000001f124         db  0x0e ; '.'
000000000001f125         db  0x10 ; '.'
000000000001f126         db  0x42 ; 'B'
000000000001f127         db  0x0e ; '.'
000000000001f128         db  0x08 ; '.'
000000000001f129         db  0x41 ; 'A'
000000000001f12a         db  0x0b ; '.'
000000000001f12b         db  0x00 ; '.'
000000000001f12c         dd         0x00000040                                  ; Length of the record
000000000001f130         dd         0x00001ac0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f134         db         0xfc, 0xeb, 0xfe, 0xff                      ; begin 0xdd30
000000000001f138         db         0xe6, 3 dup (0x00)                          ; length 0xe6 (end at 0xde16)
000000000001f13c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f13d         db  0x41 ; 'A'
000000000001f13e         db  0x0e ; '.'
000000000001f13f         db  0x10 ; '.'
000000000001f140         db  0x86 ; '.'
000000000001f141         db  0x02 ; '.'
000000000001f142         db  0x41 ; 'A'
000000000001f143         db  0x0e ; '.'
000000000001f144         db  0x18 ; '.'
000000000001f145         db  0x83 ; '.'
000000000001f146         db  0x03 ; '.'
000000000001f147         db  0x47 ; 'G'
000000000001f148         db  0x0e ; '.'
000000000001f149         db  0x20 ; ' '
000000000001f14a         db  0x02 ; '.'
000000000001f14b         db  0x4d ; 'M'
000000000001f14c         db  0x0a ; '.'
000000000001f14d         db  0x0e ; '.'
000000000001f14e         db  0x18 ; '.'
000000000001f14f         db  0x41 ; 'A'
000000000001f150         db  0x0e ; '.'
000000000001f151         db  0x10 ; '.'
000000000001f152         db  0x41 ; 'A'
000000000001f153         db  0x0e ; '.'
000000000001f154         db  0x08 ; '.'
000000000001f155         db  0x48 ; 'H'
000000000001f156         db  0x0b ; '.'
000000000001f157         db  0x47 ; 'G'
000000000001f158         db  0x0a ; '.'
000000000001f159         db  0x0e ; '.'
000000000001f15a         db  0x18 ; '.'
000000000001f15b         db  0x41 ; 'A'
000000000001f15c         db  0x0e ; '.'
000000000001f15d         db  0x10 ; '.'
000000000001f15e         db  0x41 ; 'A'
000000000001f15f         db  0x0e ; '.'
000000000001f160         db  0x08 ; '.'
000000000001f161         db  0x47 ; 'G'
000000000001f162         db  0x0b ; '.'
000000000001f163         db  0x7c ; '|'
000000000001f164         db  0x0a ; '.'
000000000001f165         db  0x0e ; '.'
000000000001f166         db  0x18 ; '.'
000000000001f167         db  0x43 ; 'C'
000000000001f168         db  0x0e ; '.'
000000000001f169         db  0x10 ; '.'
000000000001f16a         db  0x41 ; 'A'
000000000001f16b         db  0x0e ; '.'
000000000001f16c         db  0x08 ; '.'
000000000001f16d         db  0x48 ; 'H'
000000000001f16e         db  0x0b ; '.'
000000000001f16f         db  0x00 ; '.'
000000000001f170         dd         0x00000024                                  ; Length of the record
000000000001f174         dd         0x00001b04                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f178         db         0xa8, 0xec, 0xfe, 0xff                      ; begin 0xde20
000000000001f17c         db         0x10, 0x01, 2 dup (0x00)                    ; length 0x110 (end at 0xdf30)
000000000001f180         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f181         db  0x02 ; '.'
000000000001f182         db  0x51 ; 'Q'
000000000001f183         db  0x0e ; '.'
000000000001f184         db  0x10 ; '.'
000000000001f185         db  0x83 ; '.'
000000000001f186         db  0x02 ; '.'
000000000001f187         db  0x02 ; '.'
000000000001f188         db  0x5c ; '\'
000000000001f189         db  0x0e ; '.'
000000000001f18a         db  0x08 ; '.'
000000000001f18b         db  0x43 ; 'C'
000000000001f18c         db  0xc3 ; '.'
000000000001f18d         db  0x78 ; 'x'
000000000001f18e         db  0x0e ; '.'
000000000001f18f         db  0x10 ; '.'
000000000001f190         db  0x83 ; '.'
000000000001f191         db  0x02 ; '.'
000000000001f192         db  0x4c ; 'L'
000000000001f193         db  0x0e ; '.'
000000000001f194         db  0x08 ; '.'
000000000001f195         db  0x44 ; 'D'
000000000001f196         db  0xc3 ; '.'
000000000001f197         db  0x00 ; '.'
000000000001f198         dd         0x00000034                                  ; Length of the record
000000000001f19c         dd         0x00001b2c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f1a0         db         0x90, 0xed, 0xfe, 0xff                      ; begin 0xdf30
000000000001f1a4         db         0xcf, 3 dup (0x00)                          ; length 0xcf (end at 0xdfff)
000000000001f1a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f1a9         db  0x42 ; 'B'
000000000001f1aa         db  0x0e ; '.'
000000000001f1ab         db  0x10 ; '.'
000000000001f1ac         db  0x8c ; '.'
000000000001f1ad         db  0x02 ; '.'
000000000001f1ae         db  0x44 ; 'D'
000000000001f1af         db  0x0e ; '.'
000000000001f1b0         db  0x18 ; '.'
000000000001f1b1         db  0x86 ; '.'
000000000001f1b2         db  0x03 ; '.'
000000000001f1b3         db  0x41 ; 'A'
000000000001f1b4         db  0x0e ; '.'
000000000001f1b5         db  0x20 ; ' '
000000000001f1b6         db  0x83 ; '.'
000000000001f1b7         db  0x04 ; '.'
000000000001f1b8         db  0x02 ; '.'
000000000001f1b9         db  0x9f ; '.'
000000000001f1ba         db  0x0a ; '.'
000000000001f1bb         db  0x0e ; '.'
000000000001f1bc         db  0x18 ; '.'
000000000001f1bd         db  0x41 ; 'A'
000000000001f1be         db  0x0e ; '.'
000000000001f1bf         db  0x10 ; '.'
000000000001f1c0         db  0x42 ; 'B'
000000000001f1c1         db  0x0e ; '.'
000000000001f1c2         db  0x08 ; '.'
000000000001f1c3         db  0x47 ; 'G'
000000000001f1c4         db  0x0b ; '.'
000000000001f1c5         db  0x59 ; 'Y'
000000000001f1c6         db  0x0e ; '.'
000000000001f1c7         db  0x18 ; '.'
000000000001f1c8         db  0x43 ; 'C'
000000000001f1c9         db  0x0e ; '.'
000000000001f1ca         db  0x10 ; '.'
000000000001f1cb         db  0x42 ; 'B'
000000000001f1cc         db  0x0e ; '.'
000000000001f1cd         db  0x08 ; '.'
000000000001f1ce         db  0x00 ; '.'
000000000001f1cf         db  0x00 ; '.'
000000000001f1d0         dd         0x0000004c                                  ; Length of the record
000000000001f1d4         dd         0x00001b64                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f1d8         db         0x28, 0xee, 0xfe, 0xff                      ; begin 0xe000
000000000001f1dc         db         0x9f, 0x07, 2 dup (0x00)                    ; length 0x79f (end at 0xe79f)
000000000001f1e0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f1e1         db  0x42 ; 'B'
000000000001f1e2         db  0x0e ; '.'
000000000001f1e3         db  0x10 ; '.'
000000000001f1e4         db  0x8f ; '.'
000000000001f1e5         db  0x02 ; '.'
000000000001f1e6         db  0x42 ; 'B'
000000000001f1e7         db  0x0e ; '.'
000000000001f1e8         db  0x18 ; '.'
000000000001f1e9         db  0x8e ; '.'
000000000001f1ea         db  0x03 ; '.'
000000000001f1eb         db  0x45 ; 'E'
000000000001f1ec         db  0x0e ; '.'
000000000001f1ed         db  0x20 ; ' '
000000000001f1ee         db  0x8d ; '.'
000000000001f1ef         db  0x04 ; '.'
000000000001f1f0         db  0x42 ; 'B'
000000000001f1f1         db  0x0e ; '.'
000000000001f1f2         db  0x28 ; '('
000000000001f1f3         db  0x8c ; '.'
000000000001f1f4         db  0x05 ; '.'
000000000001f1f5         db  0x44 ; 'D'
000000000001f1f6         db  0x0e ; '.'
000000000001f1f7         db  0x30 ; '0'
000000000001f1f8         db  0x86 ; '.'
000000000001f1f9         db  0x06 ; '.'
000000000001f1fa         db  0x41 ; 'A'
000000000001f1fb         db  0x0e ; '.'
000000000001f1fc         db  0x38 ; '8'
000000000001f1fd         db  0x83 ; '.'
000000000001f1fe         db  0x07 ; '.'
000000000001f1ff         db  0x4a ; 'J'
000000000001f200         db  0x0e ; '.'
000000000001f201         db  0x80 ; '.'
000000000001f202         db  0x01 ; '.'
000000000001f203         db  0x03 ; '.'
000000000001f204         db  0x3b ; ';'
000000000001f205         db  0x01 ; '.'
000000000001f206         db  0x0a ; '.'
000000000001f207         db  0x0e ; '.'
000000000001f208         db  0x38 ; '8'
000000000001f209         db  0x41 ; 'A'
000000000001f20a         db  0x0e ; '.'
000000000001f20b         db  0x30 ; '0'
000000000001f20c         db  0x41 ; 'A'
000000000001f20d         db  0x0e ; '.'
000000000001f20e         db  0x28 ; '('
000000000001f20f         db  0x42 ; 'B'
000000000001f210         db  0x0e ; '.'
000000000001f211         db  0x20 ; ' '
000000000001f212         db  0x42 ; 'B'
000000000001f213         db  0x0e ; '.'
000000000001f214         db  0x18 ; '.'
000000000001f215         db  0x42 ; 'B'
000000000001f216         db  0x0e ; '.'
000000000001f217         db  0x10 ; '.'
000000000001f218         db  0x42 ; 'B'
000000000001f219         db  0x0e ; '.'
000000000001f21a         db  0x08 ; '.'
000000000001f21b         db  0x41 ; 'A'
000000000001f21c         db  0x0b ; '.'
000000000001f21d         db  0x00 ; '.'
000000000001f21e         db  0x00 ; '.'
000000000001f21f         db  0x00 ; '.'
000000000001f220         dd         0x0000004c                                  ; Length of the record
000000000001f224         dd         0x00001bb4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f228         db         0x78, 0xf5, 0xfe, 0xff                      ; begin 0xe7a0
000000000001f22c         db         0x3b, 0x02, 2 dup (0x00)                    ; length 0x23b (end at 0xe9db)
000000000001f230         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f231         db  0x42 ; 'B'
000000000001f232         db  0x0e ; '.'
000000000001f233         db  0x10 ; '.'
000000000001f234         db  0x8f ; '.'
000000000001f235         db  0x02 ; '.'
000000000001f236         db  0x42 ; 'B'
000000000001f237         db  0x0e ; '.'
000000000001f238         db  0x18 ; '.'
000000000001f239         db  0x8e ; '.'
000000000001f23a         db  0x03 ; '.'
000000000001f23b         db  0x45 ; 'E'
000000000001f23c         db  0x0e ; '.'
000000000001f23d         db  0x20 ; ' '
000000000001f23e         db  0x8d ; '.'
000000000001f23f         db  0x04 ; '.'
000000000001f240         db  0x42 ; 'B'
000000000001f241         db  0x0e ; '.'
000000000001f242         db  0x28 ; '('
000000000001f243         db  0x8c ; '.'
000000000001f244         db  0x05 ; '.'
000000000001f245         db  0x45 ; 'E'
000000000001f246         db  0x0e ; '.'
000000000001f247         db  0x30 ; '0'
000000000001f248         db  0x86 ; '.'
000000000001f249         db  0x06 ; '.'
000000000001f24a         db  0x41 ; 'A'
000000000001f24b         db  0x0e ; '.'
000000000001f24c         db  0x38 ; '8'
000000000001f24d         db  0x83 ; '.'
000000000001f24e         db  0x07 ; '.'
000000000001f24f         db  0x48 ; 'H'
000000000001f250         db  0x0e ; '.'
000000000001f251         db  0x80 ; '.'
000000000001f252         db  0x01 ; '.'
000000000001f253         db  0x03 ; '.'
000000000001f254         db  0xf3 ; '.'
000000000001f255         db  0x01 ; '.'
000000000001f256         db  0x0a ; '.'
000000000001f257         db  0x0e ; '.'
000000000001f258         db  0x38 ; '8'
000000000001f259         db  0x41 ; 'A'
000000000001f25a         db  0x0e ; '.'
000000000001f25b         db  0x30 ; '0'
000000000001f25c         db  0x41 ; 'A'
000000000001f25d         db  0x0e ; '.'
000000000001f25e         db  0x28 ; '('
000000000001f25f         db  0x42 ; 'B'
000000000001f260         db  0x0e ; '.'
000000000001f261         db  0x20 ; ' '
000000000001f262         db  0x42 ; 'B'
000000000001f263         db  0x0e ; '.'
000000000001f264         db  0x18 ; '.'
000000000001f265         db  0x42 ; 'B'
000000000001f266         db  0x0e ; '.'
000000000001f267         db  0x10 ; '.'
000000000001f268         db  0x42 ; 'B'
000000000001f269         db  0x0e ; '.'
000000000001f26a         db  0x08 ; '.'
000000000001f26b         db  0x4a ; 'J'
000000000001f26c         db  0x0b ; '.'
000000000001f26d         db  0x00 ; '.'
000000000001f26e         db  0x00 ; '.'
000000000001f26f         db  0x00 ; '.'
000000000001f270         dd         0x0000004c                                  ; Length of the record
000000000001f274         dd         0x00001c04                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f278         db         0x68, 0xf7, 0xfe, 0xff                      ; begin 0xe9e0
000000000001f27c         db         0x91, 0x0b, 2 dup (0x00)                    ; length 0xb91 (end at 0xf571)
000000000001f280         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f281         db  0x42 ; 'B'
000000000001f282         db  0x0e ; '.'
000000000001f283         db  0x10 ; '.'
000000000001f284         db  0x8f ; '.'
000000000001f285         db  0x02 ; '.'
000000000001f286         db  0x42 ; 'B'
000000000001f287         db  0x0e ; '.'
000000000001f288         db  0x18 ; '.'
000000000001f289         db  0x8e ; '.'
000000000001f28a         db  0x03 ; '.'
000000000001f28b         db  0x45 ; 'E'
000000000001f28c         db  0x0e ; '.'
000000000001f28d         db  0x20 ; ' '
000000000001f28e         db  0x8d ; '.'
000000000001f28f         db  0x04 ; '.'
000000000001f290         db  0x42 ; 'B'
000000000001f291         db  0x0e ; '.'
000000000001f292         db  0x28 ; '('
000000000001f293         db  0x8c ; '.'
000000000001f294         db  0x05 ; '.'
000000000001f295         db  0x46 ; 'F'
000000000001f296         db  0x0e ; '.'
000000000001f297         db  0x30 ; '0'
000000000001f298         db  0x86 ; '.'
000000000001f299         db  0x06 ; '.'
000000000001f29a         db  0x41 ; 'A'
000000000001f29b         db  0x0e ; '.'
000000000001f29c         db  0x38 ; '8'
000000000001f29d         db  0x83 ; '.'
000000000001f29e         db  0x07 ; '.'
000000000001f29f         db  0x47 ; 'G'
000000000001f2a0         db  0x0e ; '.'
000000000001f2a1         db  0xc0 ; '.'
000000000001f2a2         db  0x02 ; '.'
000000000001f2a3         db  0x03 ; '.'
000000000001f2a4         db  0x17 ; '.'
000000000001f2a5         db  0x04 ; '.'
000000000001f2a6         db  0x0a ; '.'
000000000001f2a7         db  0x0e ; '.'
000000000001f2a8         db  0x38 ; '8'
000000000001f2a9         db  0x41 ; 'A'
000000000001f2aa         db  0x0e ; '.'
000000000001f2ab         db  0x30 ; '0'
000000000001f2ac         db  0x41 ; 'A'
000000000001f2ad         db  0x0e ; '.'
000000000001f2ae         db  0x28 ; '('
000000000001f2af         db  0x42 ; 'B'
000000000001f2b0         db  0x0e ; '.'
000000000001f2b1         db  0x20 ; ' '
000000000001f2b2         db  0x42 ; 'B'
000000000001f2b3         db  0x0e ; '.'
000000000001f2b4         db  0x18 ; '.'
000000000001f2b5         db  0x42 ; 'B'
000000000001f2b6         db  0x0e ; '.'
000000000001f2b7         db  0x10 ; '.'
000000000001f2b8         db  0x42 ; 'B'
000000000001f2b9         db  0x0e ; '.'
000000000001f2ba         db  0x08 ; '.'
000000000001f2bb         db  0x46 ; 'F'
000000000001f2bc         db  0x0b ; '.'
000000000001f2bd         db  0x00 ; '.'
000000000001f2be         db  0x00 ; '.'
000000000001f2bf         db  0x00 ; '.'
000000000001f2c0         dd         0x00000030                                  ; Length of the record
000000000001f2c4         dd         0x00001c54                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f2c8         db         0xb8, 0x02, 2 dup (0xff)                    ; begin 0xf580
000000000001f2cc         db         0x87, 3 dup (0x00)                          ; length 0x87 (end at 0xf607)
000000000001f2d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f2d1         db  0x47 ; 'G'
000000000001f2d2         db  0x0e ; '.'
000000000001f2d3         db  0x10 ; '.'
000000000001f2d4         db  0x86 ; '.'
000000000001f2d5         db  0x02 ; '.'
000000000001f2d6         db  0x41 ; 'A'
000000000001f2d7         db  0x0e ; '.'
000000000001f2d8         db  0x18 ; '.'
000000000001f2d9         db  0x83 ; '.'
000000000001f2da         db  0x03 ; '.'
000000000001f2db         db  0x4a ; 'J'
000000000001f2dc         db  0x0e ; '.'
000000000001f2dd         db  0x20 ; ' '
000000000001f2de         db  0x02 ; '.'
000000000001f2df         db  0x4e ; 'N'
000000000001f2e0         db  0x0e ; '.'
000000000001f2e1         db  0x18 ; '.'
000000000001f2e2         db  0x41 ; 'A'
000000000001f2e3         db  0x0e ; '.'
000000000001f2e4         db  0x10 ; '.'
000000000001f2e5         db  0x41 ; 'A'
000000000001f2e6         db  0x0e ; '.'
000000000001f2e7         db  0x08 ; '.'
000000000001f2e8         db  0x46 ; 'F'
000000000001f2e9         db  0xc3 ; '.'
000000000001f2ea         db  0xc6 ; '.'
000000000001f2eb         db  0x58 ; 'X'
000000000001f2ec         db  0x0e ; '.'
000000000001f2ed         db  0x20 ; ' '
000000000001f2ee         db  0x83 ; '.'
000000000001f2ef         db  0x03 ; '.'
000000000001f2f0         db  0x86 ; '.'
000000000001f2f1         db  0x02 ; '.'
000000000001f2f2         db  0x00 ; '.'
000000000001f2f3         db  0x00 ; '.'
000000000001f2f4         dd         0x00000028                                  ; Length of the record
000000000001f2f8         dd         0x00001c88                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f2fc         db         0x14, 0x03, 2 dup (0xff)                    ; begin 0xf610
000000000001f300         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0xf65f)
000000000001f304         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f305         db  0x42 ; 'B'
000000000001f306         db  0x0e ; '.'
000000000001f307         db  0x10 ; '.'
000000000001f308         db  0x8c ; '.'
000000000001f309         db  0x02 ; '.'
000000000001f30a         db  0x41 ; 'A'
000000000001f30b         db  0x0e ; '.'
000000000001f30c         db  0x18 ; '.'
000000000001f30d         db  0x86 ; '.'
000000000001f30e         db  0x03 ; '.'
000000000001f30f         db  0x44 ; 'D'
000000000001f310         db  0x0e ; '.'
000000000001f311         db  0x20 ; ' '
000000000001f312         db  0x83 ; '.'
000000000001f313         db  0x04 ; '.'
000000000001f314         db  0x7c ; '|'
000000000001f315         db  0x0e ; '.'
000000000001f316         db  0x18 ; '.'
000000000001f317         db  0x45 ; 'E'
000000000001f318         db  0x0e ; '.'
000000000001f319         db  0x10 ; '.'
000000000001f31a         db  0x42 ; 'B'
000000000001f31b         db  0x0e ; '.'
000000000001f31c         db  0x08 ; '.'
000000000001f31d         db  0x00 ; '.'
000000000001f31e         db  0x00 ; '.'
000000000001f31f         db  0x00 ; '.'
000000000001f320         dd         0x0000002c                                  ; Length of the record
000000000001f324         dd         0x00001cb4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f328         db         0x38, 0x03, 2 dup (0xff)                    ; begin 0xf660
000000000001f32c         db         0x94, 3 dup (0x00)                          ; length 0x94 (end at 0xf6f4)
000000000001f330         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f331         db  0x42 ; 'B'
000000000001f332         db  0x0e ; '.'
000000000001f333         db  0x10 ; '.'
000000000001f334         db  0x8c ; '.'
000000000001f335         db  0x02 ; '.'
000000000001f336         db  0x41 ; 'A'
000000000001f337         db  0x0e ; '.'
000000000001f338         db  0x18 ; '.'
000000000001f339         db  0x86 ; '.'
000000000001f33a         db  0x03 ; '.'
000000000001f33b         db  0x41 ; 'A'
000000000001f33c         db  0x0e ; '.'
000000000001f33d         db  0x20 ; ' '
000000000001f33e         db  0x83 ; '.'
000000000001f33f         db  0x04 ; '.'
000000000001f340         db  0x02 ; '.'
000000000001f341         db  0x6d ; 'm'
000000000001f342         db  0x0a ; '.'
000000000001f343         db  0x0e ; '.'
000000000001f344         db  0x18 ; '.'
000000000001f345         db  0x41 ; 'A'
000000000001f346         db  0x0e ; '.'
000000000001f347         db  0x10 ; '.'
000000000001f348         db  0x42 ; 'B'
000000000001f349         db  0x0e ; '.'
000000000001f34a         db  0x08 ; '.'
000000000001f34b         db  0x41 ; 'A'
000000000001f34c         db  0x0b ; '.'
000000000001f34d         db  0x00 ; '.'
000000000001f34e         db  0x00 ; '.'
000000000001f34f         db  0x00 ; '.'
000000000001f350         dd         0x00000030                                  ; Length of the record
000000000001f354         dd         0x00001ce4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f358         db         0xa8, 0x03, 2 dup (0xff)                    ; begin 0xf700
000000000001f35c         db         0x4c, 3 dup (0x00)                          ; length 0x4c (end at 0xf74c)
000000000001f360         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f361         db  0x41 ; 'A'
000000000001f362         db  0x0e ; '.'
000000000001f363         db  0x10 ; '.'
000000000001f364         db  0x86 ; '.'
000000000001f365         db  0x02 ; '.'
000000000001f366         db  0x41 ; 'A'
000000000001f367         db  0x0e ; '.'
000000000001f368         db  0x18 ; '.'
000000000001f369         db  0x83 ; '.'
000000000001f36a         db  0x03 ; '.'
000000000001f36b         db  0x4d ; 'M'
000000000001f36c         db  0x0e ; '.'
000000000001f36d         db  0x20 ; ' '
000000000001f36e         db  0x67 ; 'g'
000000000001f36f         db  0x0a ; '.'
000000000001f370         db  0x0e ; '.'
000000000001f371         db  0x18 ; '.'
000000000001f372         db  0x43 ; 'C'
000000000001f373         db  0x0e ; '.'
000000000001f374         db  0x10 ; '.'
000000000001f375         db  0x41 ; 'A'
000000000001f376         db  0x0e ; '.'
000000000001f377         db  0x08 ; '.'
000000000001f378         db  0x46 ; 'F'
000000000001f379         db  0x0b ; '.'
000000000001f37a         db  0x44 ; 'D'
000000000001f37b         db  0x0e ; '.'
000000000001f37c         db  0x18 ; '.'
000000000001f37d         db  0x46 ; 'F'
000000000001f37e         db  0x0e ; '.'
000000000001f37f         db  0x10 ; '.'
000000000001f380         db  0x41 ; 'A'
000000000001f381         db  0x0e ; '.'
000000000001f382         db  0x08 ; '.'
000000000001f383         db  0x00 ; '.'
000000000001f384         dd         0x00000040                                  ; Length of the record
000000000001f388         dd         0x00001d18                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f38c         db         0xc4, 0x03, 2 dup (0xff)                    ; begin 0xf750
000000000001f390         db         0x0d, 0x08, 2 dup (0x00)                    ; length 0x80d (end at 0xff5d)
000000000001f394         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f395         db  0x42 ; 'B'
000000000001f396         db  0x0e ; '.'
000000000001f397         db  0x10 ; '.'
000000000001f398         db  0x8e ; '.'
000000000001f399         db  0x02 ; '.'
000000000001f39a         db  0x42 ; 'B'
000000000001f39b         db  0x0e ; '.'
000000000001f39c         db  0x18 ; '.'
000000000001f39d         db  0x8d ; '.'
000000000001f39e         db  0x03 ; '.'
000000000001f39f         db  0x45 ; 'E'
000000000001f3a0         db  0x0e ; '.'
000000000001f3a1         db  0x20 ; ' '
000000000001f3a2         db  0x8c ; '.'
000000000001f3a3         db  0x04 ; '.'
000000000001f3a4         db  0x41 ; 'A'
000000000001f3a5         db  0x0e ; '.'
000000000001f3a6         db  0x28 ; '('
000000000001f3a7         db  0x86 ; '.'
000000000001f3a8         db  0x05 ; '.'
000000000001f3a9         db  0x44 ; 'D'
000000000001f3aa         db  0x0e ; '.'
000000000001f3ab         db  0x30 ; '0'
000000000001f3ac         db  0x83 ; '.'
000000000001f3ad         db  0x06 ; '.'
000000000001f3ae         db  0x4a ; 'J'
000000000001f3af         db  0x0e ; '.'
000000000001f3b0         db  0x40 ; '@'
000000000001f3b1         db  0x02 ; '.'
000000000001f3b2         db  0xd2 ; '.'
000000000001f3b3         db  0x0a ; '.'
000000000001f3b4         db  0x0e ; '.'
000000000001f3b5         db  0x30 ; '0'
000000000001f3b6         db  0x41 ; 'A'
000000000001f3b7         db  0x0e ; '.'
000000000001f3b8         db  0x28 ; '('
000000000001f3b9         db  0x41 ; 'A'
000000000001f3ba         db  0x0e ; '.'
000000000001f3bb         db  0x20 ; ' '
000000000001f3bc         db  0x42 ; 'B'
000000000001f3bd         db  0x0e ; '.'
000000000001f3be         db  0x18 ; '.'
000000000001f3bf         db  0x42 ; 'B'
000000000001f3c0         db  0x0e ; '.'
000000000001f3c1         db  0x10 ; '.'
000000000001f3c2         db  0x42 ; 'B'
000000000001f3c3         db  0x0e ; '.'
000000000001f3c4         db  0x08 ; '.'
000000000001f3c5         db  0x46 ; 'F'
000000000001f3c6         db  0x0b ; '.'
000000000001f3c7         db  0x00 ; '.'
000000000001f3c8         dd         0x0000005c                                  ; Length of the record
000000000001f3cc         dd         0x00001d5c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f3d0         db         0x90, 0x0b, 2 dup (0xff)                    ; begin 0xff60
000000000001f3d4         db         0x6a, 0x02, 2 dup (0x00)                    ; length 0x26a (end at 0x101ca)
000000000001f3d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f3d9         db  0x42 ; 'B'
000000000001f3da         db  0x0e ; '.'
000000000001f3db         db  0x10 ; '.'
000000000001f3dc         db  0x8f ; '.'
000000000001f3dd         db  0x02 ; '.'
000000000001f3de         db  0x42 ; 'B'
000000000001f3df         db  0x0e ; '.'
000000000001f3e0         db  0x18 ; '.'
000000000001f3e1         db  0x8e ; '.'
000000000001f3e2         db  0x03 ; '.'
000000000001f3e3         db  0x45 ; 'E'
000000000001f3e4         db  0x0e ; '.'
000000000001f3e5         db  0x20 ; ' '
000000000001f3e6         db  0x8d ; '.'
000000000001f3e7         db  0x04 ; '.'
000000000001f3e8         db  0x42 ; 'B'
000000000001f3e9         db  0x0e ; '.'
000000000001f3ea         db  0x28 ; '('
000000000001f3eb         db  0x8c ; '.'
000000000001f3ec         db  0x05 ; '.'
000000000001f3ed         db  0x44 ; 'D'
000000000001f3ee         db  0x0e ; '.'
000000000001f3ef         db  0x30 ; '0'
000000000001f3f0         db  0x86 ; '.'
000000000001f3f1         db  0x06 ; '.'
000000000001f3f2         db  0x41 ; 'A'
000000000001f3f3         db  0x0e ; '.'
000000000001f3f4         db  0x38 ; '8'
000000000001f3f5         db  0x83 ; '.'
000000000001f3f6         db  0x07 ; '.'
000000000001f3f7         db  0x4f ; 'O'
000000000001f3f8         db  0x0e ; '.'
000000000001f3f9         db  0x90 ; '.'
000000000001f3fa         db  0x01 ; '.'
000000000001f3fb         db  0x02 ; '.'
000000000001f3fc         db  0x5b ; '['
000000000001f3fd         db  0x0e ; '.'
000000000001f3fe         db  0x98 ; '.'
000000000001f3ff         db  0x01 ; '.'
000000000001f400         db  0x45 ; 'E'
000000000001f401         db  0x0e ; '.'
000000000001f402         db  0xa0 ; '.'
000000000001f403         db  0x01 ; '.'
000000000001f404         db  0x6c ; 'l'
000000000001f405         db  0x0e ; '.'
000000000001f406         db  0x98 ; '.'
000000000001f407         db  0x01 ; '.'
000000000001f408         db  0x41 ; 'A'
000000000001f409         db  0x0e ; '.'
000000000001f40a         db  0x90 ; '.'
000000000001f40b         db  0x01 ; '.'
000000000001f40c         db  0x03 ; '.'
000000000001f40d         db  0x31 ; '1'
000000000001f40e         db  0x01 ; '.'
000000000001f40f         db  0x0a ; '.'
000000000001f410         db  0x0e ; '.'
000000000001f411         db  0x38 ; '8'
000000000001f412         db  0x41 ; 'A'
000000000001f413         db  0x0e ; '.'
000000000001f414         db  0x30 ; '0'
000000000001f415         db  0x41 ; 'A'
000000000001f416         db  0x0e ; '.'
000000000001f417         db  0x28 ; '('
000000000001f418         db  0x42 ; 'B'
000000000001f419         db  0x0e ; '.'
000000000001f41a         db  0x20 ; ' '
000000000001f41b         db  0x42 ; 'B'
000000000001f41c         db  0x0e ; '.'
000000000001f41d         db  0x18 ; '.'
000000000001f41e         db  0x42 ; 'B'
000000000001f41f         db  0x0e ; '.'
000000000001f420         db  0x10 ; '.'
000000000001f421         db  0x42 ; 'B'
000000000001f422         db  0x0e ; '.'
000000000001f423         db  0x08 ; '.'
000000000001f424         db  0x49 ; 'I'
000000000001f425         db  0x0b ; '.'
000000000001f426         db  0x00 ; '.'
000000000001f427         db  0x00 ; '.'
000000000001f428         dd         0x0000004c                                  ; Length of the record
000000000001f42c         dd         0x00001dbc                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f430         db         0xa0, 0x0d, 2 dup (0xff)                    ; begin 0x101d0
000000000001f434         db         0x27, 0x05, 2 dup (0x00)                    ; length 0x527 (end at 0x106f7)
000000000001f438         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f439         db  0x42 ; 'B'
000000000001f43a         db  0x0e ; '.'
000000000001f43b         db  0x10 ; '.'
000000000001f43c         db  0x8f ; '.'
000000000001f43d         db  0x02 ; '.'
000000000001f43e         db  0x42 ; 'B'
000000000001f43f         db  0x0e ; '.'
000000000001f440         db  0x18 ; '.'
000000000001f441         db  0x8e ; '.'
000000000001f442         db  0x03 ; '.'
000000000001f443         db  0x45 ; 'E'
000000000001f444         db  0x0e ; '.'
000000000001f445         db  0x20 ; ' '
000000000001f446         db  0x8d ; '.'
000000000001f447         db  0x04 ; '.'
000000000001f448         db  0x42 ; 'B'
000000000001f449         db  0x0e ; '.'
000000000001f44a         db  0x28 ; '('
000000000001f44b         db  0x8c ; '.'
000000000001f44c         db  0x05 ; '.'
000000000001f44d         db  0x41 ; 'A'
000000000001f44e         db  0x0e ; '.'
000000000001f44f         db  0x30 ; '0'
000000000001f450         db  0x86 ; '.'
000000000001f451         db  0x06 ; '.'
000000000001f452         db  0x41 ; 'A'
000000000001f453         db  0x0e ; '.'
000000000001f454         db  0x38 ; '8'
000000000001f455         db  0x83 ; '.'
000000000001f456         db  0x07 ; '.'
000000000001f457         db  0x4c ; 'L'
000000000001f458         db  0x0e ; '.'
000000000001f459         db  0xb0 ; '.'
000000000001f45a         db  0x03 ; '.'
000000000001f45b         db  0x03 ; '.'
000000000001f45c         db  0x82 ; '.'
000000000001f45d         db  0x04 ; '.'
000000000001f45e         db  0x0a ; '.'
000000000001f45f         db  0x0e ; '.'
000000000001f460         db  0x38 ; '8'
000000000001f461         db  0x41 ; 'A'
000000000001f462         db  0x0e ; '.'
000000000001f463         db  0x30 ; '0'
000000000001f464         db  0x41 ; 'A'
000000000001f465         db  0x0e ; '.'
000000000001f466         db  0x28 ; '('
000000000001f467         db  0x42 ; 'B'
000000000001f468         db  0x0e ; '.'
000000000001f469         db  0x20 ; ' '
000000000001f46a         db  0x42 ; 'B'
000000000001f46b         db  0x0e ; '.'
000000000001f46c         db  0x18 ; '.'
000000000001f46d         db  0x42 ; 'B'
000000000001f46e         db  0x0e ; '.'
000000000001f46f         db  0x10 ; '.'
000000000001f470         db  0x42 ; 'B'
000000000001f471         db  0x0e ; '.'
000000000001f472         db  0x08 ; '.'
000000000001f473         db  0x41 ; 'A'
000000000001f474         db  0x0b ; '.'
000000000001f475         db  0x00 ; '.'
000000000001f476         db  0x00 ; '.'
000000000001f477         db  0x00 ; '.'
000000000001f478         dd         0x00000038                                  ; Length of the record
000000000001f47c         dd         0x00001e0c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f480         db         0x80, 0x12, 2 dup (0xff)                    ; begin 0x10700
000000000001f484         db         0x54, 0x02, 2 dup (0x00)                    ; length 0x254 (end at 0x10954)
000000000001f488         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f489         db  0x46 ; 'F'
000000000001f48a         db  0x0e ; '.'
000000000001f48b         db  0x10 ; '.'
000000000001f48c         db  0x8d ; '.'
000000000001f48d         db  0x02 ; '.'
000000000001f48e         db  0x42 ; 'B'
000000000001f48f         db  0x0e ; '.'
000000000001f490         db  0x18 ; '.'
000000000001f491         db  0x8c ; '.'
000000000001f492         db  0x03 ; '.'
000000000001f493         db  0x45 ; 'E'
000000000001f494         db  0x0e ; '.'
000000000001f495         db  0x20 ; ' '
000000000001f496         db  0x86 ; '.'
000000000001f497         db  0x04 ; '.'
000000000001f498         db  0x41 ; 'A'
000000000001f499         db  0x0e ; '.'
000000000001f49a         db  0x28 ; '('
000000000001f49b         db  0x83 ; '.'
000000000001f49c         db  0x05 ; '.'
000000000001f49d         db  0x44 ; 'D'
000000000001f49e         db  0x0e ; '.'
000000000001f49f         db  0x30 ; '0'
000000000001f4a0         db  0x02 ; '.'
000000000001f4a1         db  0xe4 ; '.'
000000000001f4a2         db  0x0a ; '.'
000000000001f4a3         db  0x0e ; '.'
000000000001f4a4         db  0x28 ; '('
000000000001f4a5         db  0x43 ; 'C'
000000000001f4a6         db  0x0e ; '.'
000000000001f4a7         db  0x20 ; ' '
000000000001f4a8         db  0x41 ; 'A'
000000000001f4a9         db  0x0e ; '.'
000000000001f4aa         db  0x18 ; '.'
000000000001f4ab         db  0x42 ; 'B'
000000000001f4ac         db  0x0e ; '.'
000000000001f4ad         db  0x10 ; '.'
000000000001f4ae         db  0x42 ; 'B'
000000000001f4af         db  0x0e ; '.'
000000000001f4b0         db  0x08 ; '.'
000000000001f4b1         db  0x42 ; 'B'
000000000001f4b2         db  0x0b ; '.'
000000000001f4b3         db  0x00 ; '.'
000000000001f4b4         dd         0x0000004c                                  ; Length of the record
000000000001f4b8         dd         0x00001e48                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f4bc         db         0xa4, 0x14, 2 dup (0xff)                    ; begin 0x10960
000000000001f4c0         db         0x51, 0x07, 2 dup (0x00)                    ; length 0x751 (end at 0x110b1)
000000000001f4c4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f4c5         db  0x42 ; 'B'
000000000001f4c6         db  0x0e ; '.'
000000000001f4c7         db  0x10 ; '.'
000000000001f4c8         db  0x8f ; '.'
000000000001f4c9         db  0x02 ; '.'
000000000001f4ca         db  0x42 ; 'B'
000000000001f4cb         db  0x0e ; '.'
000000000001f4cc         db  0x18 ; '.'
000000000001f4cd         db  0x8e ; '.'
000000000001f4ce         db  0x03 ; '.'
000000000001f4cf         db  0x45 ; 'E'
000000000001f4d0         db  0x0e ; '.'
000000000001f4d1         db  0x20 ; ' '
000000000001f4d2         db  0x8d ; '.'
000000000001f4d3         db  0x04 ; '.'
000000000001f4d4         db  0x42 ; 'B'
000000000001f4d5         db  0x0e ; '.'
000000000001f4d6         db  0x28 ; '('
000000000001f4d7         db  0x8c ; '.'
000000000001f4d8         db  0x05 ; '.'
000000000001f4d9         db  0x41 ; 'A'
000000000001f4da         db  0x0e ; '.'
000000000001f4db         db  0x30 ; '0'
000000000001f4dc         db  0x86 ; '.'
000000000001f4dd         db  0x06 ; '.'
000000000001f4de         db  0x41 ; 'A'
000000000001f4df         db  0x0e ; '.'
000000000001f4e0         db  0x38 ; '8'
000000000001f4e1         db  0x83 ; '.'
000000000001f4e2         db  0x07 ; '.'
000000000001f4e3         db  0x4d ; 'M'
000000000001f4e4         db  0x0e ; '.'
000000000001f4e5         db  0x90 ; '.'
000000000001f4e6         db  0x02 ; '.'
000000000001f4e7         db  0x03 ; '.'
000000000001f4e8         db  0x88 ; '.'
000000000001f4e9         db  0x05 ; '.'
000000000001f4ea         db  0x0a ; '.'
000000000001f4eb         db  0x0e ; '.'
000000000001f4ec         db  0x38 ; '8'
000000000001f4ed         db  0x41 ; 'A'
000000000001f4ee         db  0x0e ; '.'
000000000001f4ef         db  0x30 ; '0'
000000000001f4f0         db  0x41 ; 'A'
000000000001f4f1         db  0x0e ; '.'
000000000001f4f2         db  0x28 ; '('
000000000001f4f3         db  0x42 ; 'B'
000000000001f4f4         db  0x0e ; '.'
000000000001f4f5         db  0x20 ; ' '
000000000001f4f6         db  0x42 ; 'B'
000000000001f4f7         db  0x0e ; '.'
000000000001f4f8         db  0x18 ; '.'
000000000001f4f9         db  0x42 ; 'B'
000000000001f4fa         db  0x0e ; '.'
000000000001f4fb         db  0x10 ; '.'
000000000001f4fc         db  0x42 ; 'B'
000000000001f4fd         db  0x0e ; '.'
000000000001f4fe         db  0x08 ; '.'
000000000001f4ff         db  0x44 ; 'D'
000000000001f500         db  0x0b ; '.'
000000000001f501         db  0x00 ; '.'
000000000001f502         db  0x00 ; '.'
000000000001f503         db  0x00 ; '.'
000000000001f504         dd         0x0000002c                                  ; Length of the record
000000000001f508         dd         0x00001e98                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f50c         db         0xb4, 0x1b, 2 dup (0xff)                    ; begin 0x110c0
000000000001f510         db         0xea, 0x08, 2 dup (0x00)                    ; length 0x8ea (end at 0x119aa)
000000000001f514         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f515         db  0x41 ; 'A'
000000000001f516         db  0x0e ; '.'
000000000001f517         db  0x10 ; '.'
000000000001f518         db  0x86 ; '.'
000000000001f519         db  0x02 ; '.'
000000000001f51a         db  0x43 ; 'C'
000000000001f51b         db  0x0d ; '.'
000000000001f51c         db  0x06 ; '.'
000000000001f51d         db  0x48 ; 'H'
000000000001f51e         db  0x8f ; '.'
000000000001f51f         db  0x03 ; '.'
000000000001f520         db  0x8e ; '.'
000000000001f521         db  0x04 ; '.'
000000000001f522         db  0x8d ; '.'
000000000001f523         db  0x05 ; '.'
000000000001f524         db  0x8c ; '.'
000000000001f525         db  0x06 ; '.'
000000000001f526         db  0x4e ; 'N'
000000000001f527         db  0x83 ; '.'
000000000001f528         db  0x07 ; '.'
000000000001f529         db  0x03 ; '.'
000000000001f52a         db  0x20 ; ' '
000000000001f52b         db  0x07 ; '.'
000000000001f52c         db  0x0a ; '.'
000000000001f52d         db  0x0c ; '.'
000000000001f52e         db  0x07 ; '.'
000000000001f52f         db  0x08 ; '.'
000000000001f530         db  0x41 ; 'A'
000000000001f531         db  0x0b ; '.'
000000000001f532         db  0x00 ; '.'
000000000001f533         db  0x00 ; '.'
000000000001f534         dd         0x00000068                                  ; Length of the record
000000000001f538         dd         0x00001ec8                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f53c         db         0x74, 0x24, 2 dup (0xff)                    ; begin 0x119b0
000000000001f540         db         0x96, 0x01, 2 dup (0x00)                    ; length 0x196 (end at 0x11b46)
000000000001f544         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f545         db  0x42 ; 'B'
000000000001f546         db  0x0e ; '.'
000000000001f547         db  0x10 ; '.'
000000000001f548         db  0x8f ; '.'
000000000001f549         db  0x02 ; '.'
000000000001f54a         db  0x42 ; 'B'
000000000001f54b         db  0x0e ; '.'
000000000001f54c         db  0x18 ; '.'
000000000001f54d         db  0x8e ; '.'
000000000001f54e         db  0x03 ; '.'
000000000001f54f         db  0x45 ; 'E'
000000000001f550         db  0x0e ; '.'
000000000001f551         db  0x20 ; ' '
000000000001f552         db  0x8d ; '.'
000000000001f553         db  0x04 ; '.'
000000000001f554         db  0x42 ; 'B'
000000000001f555         db  0x0e ; '.'
000000000001f556         db  0x28 ; '('
000000000001f557         db  0x8c ; '.'
000000000001f558         db  0x05 ; '.'
000000000001f559         db  0x44 ; 'D'
000000000001f55a         db  0x0e ; '.'
000000000001f55b         db  0x30 ; '0'
000000000001f55c         db  0x86 ; '.'
000000000001f55d         db  0x06 ; '.'
000000000001f55e         db  0x41 ; 'A'
000000000001f55f         db  0x0e ; '.'
000000000001f560         db  0x38 ; '8'
000000000001f561         db  0x83 ; '.'
000000000001f562         db  0x07 ; '.'
000000000001f563         db  0x51 ; 'Q'
000000000001f564         db  0x0e ; '.'
000000000001f565         db  0x58 ; 'X'
000000000001f566         db  0x49 ; 'I'
000000000001f567         db  0x0e ; '.'
000000000001f568         db  0x60 ; '`'
000000000001f569         db  0x4e ; 'N'
000000000001f56a         db  0x0e ; '.'
000000000001f56b         db  0x58 ; 'X'
000000000001f56c         db  0x41 ; 'A'
000000000001f56d         db  0x0e ; '.'
000000000001f56e         db  0x50 ; 'P'
000000000001f56f         db  0x46 ; 'F'
000000000001f570         db  0x0a ; '.'
000000000001f571         db  0x0e ; '.'
000000000001f572         db  0x38 ; '8'
000000000001f573         db  0x41 ; 'A'
000000000001f574         db  0x0e ; '.'
000000000001f575         db  0x30 ; '0'
000000000001f576         db  0x41 ; 'A'
000000000001f577         db  0x0e ; '.'
000000000001f578         db  0x28 ; '('
000000000001f579         db  0x42 ; 'B'
000000000001f57a         db  0x0e ; '.'
000000000001f57b         db  0x20 ; ' '
000000000001f57c         db  0x42 ; 'B'
000000000001f57d         db  0x0e ; '.'
000000000001f57e         db  0x18 ; '.'
000000000001f57f         db  0x42 ; 'B'
000000000001f580         db  0x0e ; '.'
000000000001f581         db  0x10 ; '.'
000000000001f582         db  0x42 ; 'B'
000000000001f583         db  0x0e ; '.'
000000000001f584         db  0x08 ; '.'
000000000001f585         db  0x47 ; 'G'
000000000001f586         db  0x0b ; '.'
000000000001f587         db  0x02 ; '.'
000000000001f588         db  0x97 ; '.'
000000000001f589         db  0x0a ; '.'
000000000001f58a         db  0x0e ; '.'
000000000001f58b         db  0x38 ; '8'
000000000001f58c         db  0x44 ; 'D'
000000000001f58d         db  0x0e ; '.'
000000000001f58e         db  0x30 ; '0'
000000000001f58f         db  0x41 ; 'A'
000000000001f590         db  0x0e ; '.'
000000000001f591         db  0x28 ; '('
000000000001f592         db  0x42 ; 'B'
000000000001f593         db  0x0e ; '.'
000000000001f594         db  0x20 ; ' '
000000000001f595         db  0x42 ; 'B'
000000000001f596         db  0x0e ; '.'
000000000001f597         db  0x18 ; '.'
000000000001f598         db  0x42 ; 'B'
000000000001f599         db  0x0e ; '.'
000000000001f59a         db  0x10 ; '.'
000000000001f59b         db  0x42 ; 'B'
000000000001f59c         db  0x0e ; '.'
000000000001f59d         db  0x08 ; '.'
000000000001f59e         db  0x4c ; 'L'
000000000001f59f         db  0x0b ; '.'
000000000001f5a0         dd         0x0000005c                                  ; Length of the record
000000000001f5a4         dd         0x00001f34                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f5a8         db         0xa8, 0x25, 2 dup (0xff)                    ; begin 0x11b50
000000000001f5ac         db         0xe1, 0x08, 2 dup (0x00)                    ; length 0x8e1 (end at 0x12431)
000000000001f5b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f5b1         db  0x42 ; 'B'
000000000001f5b2         db  0x0e ; '.'
000000000001f5b3         db  0x10 ; '.'
000000000001f5b4         db  0x8f ; '.'
000000000001f5b5         db  0x02 ; '.'
000000000001f5b6         db  0x42 ; 'B'
000000000001f5b7         db  0x0e ; '.'
000000000001f5b8         db  0x18 ; '.'
000000000001f5b9         db  0x8e ; '.'
000000000001f5ba         db  0x03 ; '.'
000000000001f5bb         db  0x42 ; 'B'
000000000001f5bc         db  0x0e ; '.'
000000000001f5bd         db  0x20 ; ' '
000000000001f5be         db  0x8d ; '.'
000000000001f5bf         db  0x04 ; '.'
000000000001f5c0         db  0x42 ; 'B'
000000000001f5c1         db  0x0e ; '.'
000000000001f5c2         db  0x28 ; '('
000000000001f5c3         db  0x8c ; '.'
000000000001f5c4         db  0x05 ; '.'
000000000001f5c5         db  0x41 ; 'A'
000000000001f5c6         db  0x0e ; '.'
000000000001f5c7         db  0x30 ; '0'
000000000001f5c8         db  0x86 ; '.'
000000000001f5c9         db  0x06 ; '.'
000000000001f5ca         db  0x41 ; 'A'
000000000001f5cb         db  0x0e ; '.'
000000000001f5cc         db  0x38 ; '8'
000000000001f5cd         db  0x83 ; '.'
000000000001f5ce         db  0x07 ; '.'
000000000001f5cf         db  0x47 ; 'G'
000000000001f5d0         db  0x0e ; '.'
000000000001f5d1         db  0xf0 ; '.'
000000000001f5d2         db  0x01 ; '.'
000000000001f5d3         db  0x03 ; '.'
000000000001f5d4         db  0x85 ; '.'
000000000001f5d5         db  0x03 ; '.'
000000000001f5d6         db  0x0a ; '.'
000000000001f5d7         db  0x0e ; '.'
000000000001f5d8         db  0x38 ; '8'
000000000001f5d9         db  0x41 ; 'A'
000000000001f5da         db  0x0e ; '.'
000000000001f5db         db  0x30 ; '0'
000000000001f5dc         db  0x41 ; 'A'
000000000001f5dd         db  0x0e ; '.'
000000000001f5de         db  0x28 ; '('
000000000001f5df         db  0x42 ; 'B'
000000000001f5e0         db  0x0e ; '.'
000000000001f5e1         db  0x20 ; ' '
000000000001f5e2         db  0x42 ; 'B'
000000000001f5e3         db  0x0e ; '.'
000000000001f5e4         db  0x18 ; '.'
000000000001f5e5         db  0x42 ; 'B'
000000000001f5e6         db  0x0e ; '.'
000000000001f5e7         db  0x10 ; '.'
000000000001f5e8         db  0x42 ; 'B'
000000000001f5e9         db  0x0e ; '.'
000000000001f5ea         db  0x08 ; '.'
000000000001f5eb         db  0x48 ; 'H'
000000000001f5ec         db  0x0b ; '.'
000000000001f5ed         db  0x03 ; '.'
000000000001f5ee         db  0xd8 ; '.'
000000000001f5ef         db  0x02 ; '.'
000000000001f5f0         db  0x0e ; '.'
000000000001f5f1         db  0xf8 ; '.'
000000000001f5f2         db  0x01 ; '.'
000000000001f5f3         db  0x42 ; 'B'
000000000001f5f4         db  0x0e ; '.'
000000000001f5f5         db  0x80 ; '.'
000000000001f5f6         db  0x02 ; '.'
000000000001f5f7         db  0x4f ; 'O'
000000000001f5f8         db  0x0e ; '.'
000000000001f5f9         db  0xf8 ; '.'
000000000001f5fa         db  0x01 ; '.'
000000000001f5fb         db  0x44 ; 'D'
000000000001f5fc         db  0x0e ; '.'
000000000001f5fd         db  0xf0 ; '.'
000000000001f5fe         db  0x01 ; '.'
000000000001f5ff         db  0x00 ; '.'
000000000001f600         dd         0x00000048                                  ; Length of the record
000000000001f604         dd         0x00001f94                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f608         db         0x38, 0x2e, 2 dup (0xff)                    ; begin 0x12440
000000000001f60c         db         0xec, 0x01, 2 dup (0x00)                    ; length 0x1ec (end at 0x1262c)
000000000001f610         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f611         db  0x42 ; 'B'
000000000001f612         db  0x0e ; '.'
000000000001f613         db  0x10 ; '.'
000000000001f614         db  0x8f ; '.'
000000000001f615         db  0x02 ; '.'
000000000001f616         db  0x42 ; 'B'
000000000001f617         db  0x0e ; '.'
000000000001f618         db  0x18 ; '.'
000000000001f619         db  0x8e ; '.'
000000000001f61a         db  0x03 ; '.'
000000000001f61b         db  0x42 ; 'B'
000000000001f61c         db  0x0e ; '.'
000000000001f61d         db  0x20 ; ' '
000000000001f61e         db  0x8d ; '.'
000000000001f61f         db  0x04 ; '.'
000000000001f620         db  0x42 ; 'B'
000000000001f621         db  0x0e ; '.'
000000000001f622         db  0x28 ; '('
000000000001f623         db  0x8c ; '.'
000000000001f624         db  0x05 ; '.'
000000000001f625         db  0x44 ; 'D'
000000000001f626         db  0x0e ; '.'
000000000001f627         db  0x30 ; '0'
000000000001f628         db  0x86 ; '.'
000000000001f629         db  0x06 ; '.'
000000000001f62a         db  0x41 ; 'A'
000000000001f62b         db  0x0e ; '.'
000000000001f62c         db  0x38 ; '8'
000000000001f62d         db  0x83 ; '.'
000000000001f62e         db  0x07 ; '.'
000000000001f62f         db  0x47 ; 'G'
000000000001f630         db  0x0e ; '.'
000000000001f631         db  0x70 ; 'p'
000000000001f632         db  0x02 ; '.'
000000000001f633         db  0x6c ; 'l'
000000000001f634         db  0x0a ; '.'
000000000001f635         db  0x0e ; '.'
000000000001f636         db  0x38 ; '8'
000000000001f637         db  0x41 ; 'A'
000000000001f638         db  0x0e ; '.'
000000000001f639         db  0x30 ; '0'
000000000001f63a         db  0x41 ; 'A'
000000000001f63b         db  0x0e ; '.'
000000000001f63c         db  0x28 ; '('
000000000001f63d         db  0x42 ; 'B'
000000000001f63e         db  0x0e ; '.'
000000000001f63f         db  0x20 ; ' '
000000000001f640         db  0x42 ; 'B'
000000000001f641         db  0x0e ; '.'
000000000001f642         db  0x18 ; '.'
000000000001f643         db  0x42 ; 'B'
000000000001f644         db  0x0e ; '.'
000000000001f645         db  0x10 ; '.'
000000000001f646         db  0x42 ; 'B'
000000000001f647         db  0x0e ; '.'
000000000001f648         db  0x08 ; '.'
000000000001f649         db  0x46 ; 'F'
000000000001f64a         db  0x0b ; '.'
000000000001f64b         db  0x00 ; '.'
000000000001f64c         dd         0x0000005c                                  ; Length of the record
000000000001f650         dd         0x00001fe0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f654         db         0xdc, 0x2f, 2 dup (0xff)                    ; begin 0x12630
000000000001f658         db         0x40, 0x03, 2 dup (0x00)                    ; length 0x340 (end at 0x12970)
000000000001f65c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f65d         db  0x42 ; 'B'
000000000001f65e         db  0x0e ; '.'
000000000001f65f         db  0x10 ; '.'
000000000001f660         db  0x8f ; '.'
000000000001f661         db  0x02 ; '.'
000000000001f662         db  0x42 ; 'B'
000000000001f663         db  0x0e ; '.'
000000000001f664         db  0x18 ; '.'
000000000001f665         db  0x8e ; '.'
000000000001f666         db  0x03 ; '.'
000000000001f667         db  0x45 ; 'E'
000000000001f668         db  0x0e ; '.'
000000000001f669         db  0x20 ; ' '
000000000001f66a         db  0x8d ; '.'
000000000001f66b         db  0x04 ; '.'
000000000001f66c         db  0x42 ; 'B'
000000000001f66d         db  0x0e ; '.'
000000000001f66e         db  0x28 ; '('
000000000001f66f         db  0x8c ; '.'
000000000001f670         db  0x05 ; '.'
000000000001f671         db  0x44 ; 'D'
000000000001f672         db  0x0e ; '.'
000000000001f673         db  0x30 ; '0'
000000000001f674         db  0x86 ; '.'
000000000001f675         db  0x06 ; '.'
000000000001f676         db  0x41 ; 'A'
000000000001f677         db  0x0e ; '.'
000000000001f678         db  0x38 ; '8'
000000000001f679         db  0x83 ; '.'
000000000001f67a         db  0x07 ; '.'
000000000001f67b         db  0x44 ; 'D'
000000000001f67c         db  0x0e ; '.'
000000000001f67d         db  0xa0 ; '.'
000000000001f67e         db  0x01 ; '.'
000000000001f67f         db  0x03 ; '.'
000000000001f680         db  0x5d ; ']'
000000000001f681         db  0x01 ; '.'
000000000001f682         db  0x0e ; '.'
000000000001f683         db  0xa8 ; '.'
000000000001f684         db  0x01 ; '.'
000000000001f685         db  0x51 ; 'Q'
000000000001f686         db  0x0e ; '.'
000000000001f687         db  0xb0 ; '.'
000000000001f688         db  0x01 ; '.'
000000000001f689         db  0x52 ; 'R'
000000000001f68a         db  0x0e ; '.'
000000000001f68b         db  0xa8 ; '.'
000000000001f68c         db  0x01 ; '.'
000000000001f68d         db  0x41 ; 'A'
000000000001f68e         db  0x0e ; '.'
000000000001f68f         db  0xa0 ; '.'
000000000001f690         db  0x01 ; '.'
000000000001f691         db  0x03 ; '.'
000000000001f692         db  0x94 ; '.'
000000000001f693         db  0x01 ; '.'
000000000001f694         db  0x0a ; '.'
000000000001f695         db  0x0e ; '.'
000000000001f696         db  0x38 ; '8'
000000000001f697         db  0x41 ; 'A'
000000000001f698         db  0x0e ; '.'
000000000001f699         db  0x30 ; '0'
000000000001f69a         db  0x41 ; 'A'
000000000001f69b         db  0x0e ; '.'
000000000001f69c         db  0x28 ; '('
000000000001f69d         db  0x42 ; 'B'
000000000001f69e         db  0x0e ; '.'
000000000001f69f         db  0x20 ; ' '
000000000001f6a0         db  0x42 ; 'B'
000000000001f6a1         db  0x0e ; '.'
000000000001f6a2         db  0x18 ; '.'
000000000001f6a3         db  0x42 ; 'B'
000000000001f6a4         db  0x0e ; '.'
000000000001f6a5         db  0x10 ; '.'
000000000001f6a6         db  0x42 ; 'B'
000000000001f6a7         db  0x0e ; '.'
000000000001f6a8         db  0x08 ; '.'
000000000001f6a9         db  0x41 ; 'A'
000000000001f6aa         db  0x0b ; '.'
000000000001f6ab         db  0x00 ; '.'
000000000001f6ac         dd         0x0000004c                                  ; Length of the record
000000000001f6b0         dd         0x00002040                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f6b4         db         0xbc, 0x32, 2 dup (0xff)                    ; begin 0x12970
000000000001f6b8         db         0x30, 0x17, 2 dup (0x00)                    ; length 0x1730 (end at 0x140a0)
000000000001f6bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f6bd         db  0x42 ; 'B'
000000000001f6be         db  0x0e ; '.'
000000000001f6bf         db  0x10 ; '.'
000000000001f6c0         db  0x8f ; '.'
000000000001f6c1         db  0x02 ; '.'
000000000001f6c2         db  0x42 ; 'B'
000000000001f6c3         db  0x0e ; '.'
000000000001f6c4         db  0x18 ; '.'
000000000001f6c5         db  0x8e ; '.'
000000000001f6c6         db  0x03 ; '.'
000000000001f6c7         db  0x42 ; 'B'
000000000001f6c8         db  0x0e ; '.'
000000000001f6c9         db  0x20 ; ' '
000000000001f6ca         db  0x8d ; '.'
000000000001f6cb         db  0x04 ; '.'
000000000001f6cc         db  0x42 ; 'B'
000000000001f6cd         db  0x0e ; '.'
000000000001f6ce         db  0x28 ; '('
000000000001f6cf         db  0x8c ; '.'
000000000001f6d0         db  0x05 ; '.'
000000000001f6d1         db  0x44 ; 'D'
000000000001f6d2         db  0x0e ; '.'
000000000001f6d3         db  0x30 ; '0'
000000000001f6d4         db  0x86 ; '.'
000000000001f6d5         db  0x06 ; '.'
000000000001f6d6         db  0x41 ; 'A'
000000000001f6d7         db  0x0e ; '.'
000000000001f6d8         db  0x38 ; '8'
000000000001f6d9         db  0x83 ; '.'
000000000001f6da         db  0x07 ; '.'
000000000001f6db         db  0x52 ; 'R'
000000000001f6dc         db  0x0e ; '.'
000000000001f6dd         db  0xf0 ; '.'
000000000001f6de         db  0x04 ; '.'
000000000001f6df         db  0x03 ; '.'
000000000001f6e0         db  0x7c ; '|'
000000000001f6e1         db  0x0b ; '.'
000000000001f6e2         db  0x0a ; '.'
000000000001f6e3         db  0x0e ; '.'
000000000001f6e4         db  0x38 ; '8'
000000000001f6e5         db  0x41 ; 'A'
000000000001f6e6         db  0x0e ; '.'
000000000001f6e7         db  0x30 ; '0'
000000000001f6e8         db  0x41 ; 'A'
000000000001f6e9         db  0x0e ; '.'
000000000001f6ea         db  0x28 ; '('
000000000001f6eb         db  0x42 ; 'B'
000000000001f6ec         db  0x0e ; '.'
000000000001f6ed         db  0x20 ; ' '
000000000001f6ee         db  0x42 ; 'B'
000000000001f6ef         db  0x0e ; '.'
000000000001f6f0         db  0x18 ; '.'
000000000001f6f1         db  0x42 ; 'B'
000000000001f6f2         db  0x0e ; '.'
000000000001f6f3         db  0x10 ; '.'
000000000001f6f4         db  0x42 ; 'B'
000000000001f6f5         db  0x0e ; '.'
000000000001f6f6         db  0x08 ; '.'
000000000001f6f7         db  0x4b ; 'K'
000000000001f6f8         db  0x0b ; '.'
000000000001f6f9         db  0x00 ; '.'
000000000001f6fa         db  0x00 ; '.'
000000000001f6fb         db  0x00 ; '.'
000000000001f6fc         dd         0x0000005c                                  ; Length of the record
000000000001f700         dd         0x00002090                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f704         db         0x9c, 0x49, 2 dup (0xff)                    ; begin 0x140a0
000000000001f708         db         0x50, 0x08, 2 dup (0x00)                    ; length 0x850 (end at 0x148f0)
000000000001f70c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f70d         db  0x42 ; 'B'
000000000001f70e         db  0x0e ; '.'
000000000001f70f         db  0x10 ; '.'
000000000001f710         db  0x8f ; '.'
000000000001f711         db  0x02 ; '.'
000000000001f712         db  0x42 ; 'B'
000000000001f713         db  0x0e ; '.'
000000000001f714         db  0x18 ; '.'
000000000001f715         db  0x8e ; '.'
000000000001f716         db  0x03 ; '.'
000000000001f717         db  0x45 ; 'E'
000000000001f718         db  0x0e ; '.'
000000000001f719         db  0x20 ; ' '
000000000001f71a         db  0x8d ; '.'
000000000001f71b         db  0x04 ; '.'
000000000001f71c         db  0x42 ; 'B'
000000000001f71d         db  0x0e ; '.'
000000000001f71e         db  0x28 ; '('
000000000001f71f         db  0x8c ; '.'
000000000001f720         db  0x05 ; '.'
000000000001f721         db  0x44 ; 'D'
000000000001f722         db  0x0e ; '.'
000000000001f723         db  0x30 ; '0'
000000000001f724         db  0x86 ; '.'
000000000001f725         db  0x06 ; '.'
000000000001f726         db  0x41 ; 'A'
000000000001f727         db  0x0e ; '.'
000000000001f728         db  0x38 ; '8'
000000000001f729         db  0x83 ; '.'
000000000001f72a         db  0x07 ; '.'
000000000001f72b         db  0x55 ; 'U'
000000000001f72c         db  0x0e ; '.'
000000000001f72d         db  0xe0 ; '.'
000000000001f72e         db  0x01 ; '.'
000000000001f72f         db  0x02 ; '.'
000000000001f730         db  0x91 ; '.'
000000000001f731         db  0x0a ; '.'
000000000001f732         db  0x0e ; '.'
000000000001f733         db  0x38 ; '8'
000000000001f734         db  0x41 ; 'A'
000000000001f735         db  0x0e ; '.'
000000000001f736         db  0x30 ; '0'
000000000001f737         db  0x41 ; 'A'
000000000001f738         db  0x0e ; '.'
000000000001f739         db  0x28 ; '('
000000000001f73a         db  0x42 ; 'B'
000000000001f73b         db  0x0e ; '.'
000000000001f73c         db  0x20 ; ' '
000000000001f73d         db  0x42 ; 'B'
000000000001f73e         db  0x0e ; '.'
000000000001f73f         db  0x18 ; '.'
000000000001f740         db  0x42 ; 'B'
000000000001f741         db  0x0e ; '.'
000000000001f742         db  0x10 ; '.'
000000000001f743         db  0x42 ; 'B'
000000000001f744         db  0x0e ; '.'
000000000001f745         db  0x08 ; '.'
000000000001f746         db  0x48 ; 'H'
000000000001f747         db  0x0b ; '.'
000000000001f748         db  0x03 ; '.'
000000000001f749         db  0xc3 ; '.'
000000000001f74a         db  0x05 ; '.'
000000000001f74b         db  0x0e ; '.'
000000000001f74c         db  0xe8 ; '.'
000000000001f74d         db  0x01 ; '.'
000000000001f74e         db  0x4a ; 'J'
000000000001f74f         db  0x0e ; '.'
000000000001f750         db  0xf0 ; '.'
000000000001f751         db  0x01 ; '.'
000000000001f752         db  0x56 ; 'V'
000000000001f753         db  0x0e ; '.'
000000000001f754         db  0xe8 ; '.'
000000000001f755         db  0x01 ; '.'
000000000001f756         db  0x41 ; 'A'
000000000001f757         db  0x0e ; '.'
000000000001f758         db  0xe0 ; '.'
000000000001f759         db  0x01 ; '.'
000000000001f75a         db  0x00 ; '.'
000000000001f75b         db  0x00 ; '.'
000000000001f75c         dd         0x00000040                                  ; Length of the record
000000000001f760         dd         0x000020f0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f764         db         0x8c, 0x51, 2 dup (0xff)                    ; begin 0x148f0
000000000001f768         db         0x5d, 0x02, 2 dup (0x00)                    ; length 0x25d (end at 0x14b4d)
000000000001f76c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f76d         db  0x42 ; 'B'
000000000001f76e         db  0x0e ; '.'
000000000001f76f         db  0x10 ; '.'
000000000001f770         db  0x8e ; '.'
000000000001f771         db  0x02 ; '.'
000000000001f772         db  0x42 ; 'B'
000000000001f773         db  0x0e ; '.'
000000000001f774         db  0x18 ; '.'
000000000001f775         db  0x8d ; '.'
000000000001f776         db  0x03 ; '.'
000000000001f777         db  0x45 ; 'E'
000000000001f778         db  0x0e ; '.'
000000000001f779         db  0x20 ; ' '
000000000001f77a         db  0x8c ; '.'
000000000001f77b         db  0x04 ; '.'
000000000001f77c         db  0x41 ; 'A'
000000000001f77d         db  0x0e ; '.'
000000000001f77e         db  0x28 ; '('
000000000001f77f         db  0x86 ; '.'
000000000001f780         db  0x05 ; '.'
000000000001f781         db  0x44 ; 'D'
000000000001f782         db  0x0e ; '.'
000000000001f783         db  0x30 ; '0'
000000000001f784         db  0x83 ; '.'
000000000001f785         db  0x06 ; '.'
000000000001f786         db  0x4a ; 'J'
000000000001f787         db  0x0e ; '.'
000000000001f788         db  0x50 ; 'P'
000000000001f789         db  0x02 ; '.'
000000000001f78a         db  0x61 ; 'a'
000000000001f78b         db  0x0a ; '.'
000000000001f78c         db  0x0e ; '.'
000000000001f78d         db  0x30 ; '0'
000000000001f78e         db  0x41 ; 'A'
000000000001f78f         db  0x0e ; '.'
000000000001f790         db  0x28 ; '('
000000000001f791         db  0x41 ; 'A'
000000000001f792         db  0x0e ; '.'
000000000001f793         db  0x20 ; ' '
000000000001f794         db  0x42 ; 'B'
000000000001f795         db  0x0e ; '.'
000000000001f796         db  0x18 ; '.'
000000000001f797         db  0x42 ; 'B'
000000000001f798         db  0x0e ; '.'
000000000001f799         db  0x10 ; '.'
000000000001f79a         db  0x42 ; 'B'
000000000001f79b         db  0x0e ; '.'
000000000001f79c         db  0x08 ; '.'
000000000001f79d         db  0x47 ; 'G'
000000000001f79e         db  0x0b ; '.'
000000000001f79f         db  0x00 ; '.'
000000000001f7a0         dd         0x00000048                                  ; Length of the record
000000000001f7a4         dd         0x00002134                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f7a8         db         0xa8, 0x53, 2 dup (0xff)                    ; begin 0x14b50
000000000001f7ac         db         0xfd, 0x06, 2 dup (0x00)                    ; length 0x6fd (end at 0x1524d)
000000000001f7b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f7b1         db  0x42 ; 'B'
000000000001f7b2         db  0x0e ; '.'
000000000001f7b3         db  0x10 ; '.'
000000000001f7b4         db  0x8f ; '.'
000000000001f7b5         db  0x02 ; '.'
000000000001f7b6         db  0x42 ; 'B'
000000000001f7b7         db  0x0e ; '.'
000000000001f7b8         db  0x18 ; '.'
000000000001f7b9         db  0x8e ; '.'
000000000001f7ba         db  0x03 ; '.'
000000000001f7bb         db  0x42 ; 'B'
000000000001f7bc         db  0x0e ; '.'
000000000001f7bd         db  0x20 ; ' '
000000000001f7be         db  0x8d ; '.'
000000000001f7bf         db  0x04 ; '.'
000000000001f7c0         db  0x42 ; 'B'
000000000001f7c1         db  0x0e ; '.'
000000000001f7c2         db  0x28 ; '('
000000000001f7c3         db  0x8c ; '.'
000000000001f7c4         db  0x05 ; '.'
000000000001f7c5         db  0x41 ; 'A'
000000000001f7c6         db  0x0e ; '.'
000000000001f7c7         db  0x30 ; '0'
000000000001f7c8         db  0x86 ; '.'
000000000001f7c9         db  0x06 ; '.'
000000000001f7ca         db  0x41 ; 'A'
000000000001f7cb         db  0x0e ; '.'
000000000001f7cc         db  0x38 ; '8'
000000000001f7cd         db  0x83 ; '.'
000000000001f7ce         db  0x07 ; '.'
000000000001f7cf         db  0x47 ; 'G'
000000000001f7d0         db  0x0e ; '.'
000000000001f7d1         db  0x70 ; 'p'
000000000001f7d2         db  0x02 ; '.'
000000000001f7d3         db  0xcb ; '.'
000000000001f7d4         db  0x0a ; '.'
000000000001f7d5         db  0x0e ; '.'
000000000001f7d6         db  0x38 ; '8'
000000000001f7d7         db  0x41 ; 'A'
000000000001f7d8         db  0x0e ; '.'
000000000001f7d9         db  0x30 ; '0'
000000000001f7da         db  0x41 ; 'A'
000000000001f7db         db  0x0e ; '.'
000000000001f7dc         db  0x28 ; '('
000000000001f7dd         db  0x42 ; 'B'
000000000001f7de         db  0x0e ; '.'
000000000001f7df         db  0x20 ; ' '
000000000001f7e0         db  0x42 ; 'B'
000000000001f7e1         db  0x0e ; '.'
000000000001f7e2         db  0x18 ; '.'
000000000001f7e3         db  0x42 ; 'B'
000000000001f7e4         db  0x0e ; '.'
000000000001f7e5         db  0x10 ; '.'
000000000001f7e6         db  0x42 ; 'B'
000000000001f7e7         db  0x0e ; '.'
000000000001f7e8         db  0x08 ; '.'
000000000001f7e9         db  0x4a ; 'J'
000000000001f7ea         db  0x0b ; '.'
000000000001f7eb         db  0x00 ; '.'
000000000001f7ec         dd         0x0000003c                                  ; Length of the record
000000000001f7f0         dd         0x00002180                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f7f4         db         0x5c, 0x5a, 2 dup (0xff)                    ; begin 0x15250
000000000001f7f8         db         0xb6, 3 dup (0x00)                          ; length 0xb6 (end at 0x15306)
000000000001f7fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f7fd         db  0x42 ; 'B'
000000000001f7fe         db  0x0e ; '.'
000000000001f7ff         db  0x10 ; '.'
000000000001f800         db  0x8e ; '.'
000000000001f801         db  0x02 ; '.'
000000000001f802         db  0x45 ; 'E'
000000000001f803         db  0x0e ; '.'
000000000001f804         db  0x18 ; '.'
000000000001f805         db  0x8d ; '.'
000000000001f806         db  0x03 ; '.'
000000000001f807         db  0x45 ; 'E'
000000000001f808         db  0x0e ; '.'
000000000001f809         db  0x20 ; ' '
000000000001f80a         db  0x8c ; '.'
000000000001f80b         db  0x04 ; '.'
000000000001f80c         db  0x48 ; 'H'
000000000001f80d         db  0x0e ; '.'
000000000001f80e         db  0x28 ; '('
000000000001f80f         db  0x86 ; '.'
000000000001f810         db  0x05 ; '.'
000000000001f811         db  0x44 ; 'D'
000000000001f812         db  0x0e ; '.'
000000000001f813         db  0x30 ; '0'
000000000001f814         db  0x83 ; '.'
000000000001f815         db  0x06 ; '.'
000000000001f816         db  0x02 ; '.'
000000000001f817         db  0x83 ; '.'
000000000001f818         db  0x0a ; '.'
000000000001f819         db  0x0e ; '.'
000000000001f81a         db  0x28 ; '('
000000000001f81b         db  0x41 ; 'A'
000000000001f81c         db  0x0e ; '.'
000000000001f81d         db  0x20 ; ' '
000000000001f81e         db  0x42 ; 'B'
000000000001f81f         db  0x0e ; '.'
000000000001f820         db  0x18 ; '.'
000000000001f821         db  0x42 ; 'B'
000000000001f822         db  0x0e ; '.'
000000000001f823         db  0x10 ; '.'
000000000001f824         db  0x42 ; 'B'
000000000001f825         db  0x0e ; '.'
000000000001f826         db  0x08 ; '.'
000000000001f827         db  0x46 ; 'F'
000000000001f828         db  0x0b ; '.'
000000000001f829         db  0x00 ; '.'
000000000001f82a         db  0x00 ; '.'
000000000001f82b         db  0x00 ; '.'
000000000001f82c         dd         0x0000005c                                  ; Length of the record
000000000001f830         dd         0x000021c0                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f834         db         0xdc, 0x5a, 2 dup (0xff)                    ; begin 0x15310
000000000001f838         db         0xd3, 0x14, 2 dup (0x00)                    ; length 0x14d3 (end at 0x167e3)
000000000001f83c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f83d         db  0x42 ; 'B'
000000000001f83e         db  0x0e ; '.'
000000000001f83f         db  0x10 ; '.'
000000000001f840         db  0x8f ; '.'
000000000001f841         db  0x02 ; '.'
000000000001f842         db  0x42 ; 'B'
000000000001f843         db  0x0e ; '.'
000000000001f844         db  0x18 ; '.'
000000000001f845         db  0x8e ; '.'
000000000001f846         db  0x03 ; '.'
000000000001f847         db  0x42 ; 'B'
000000000001f848         db  0x0e ; '.'
000000000001f849         db  0x20 ; ' '
000000000001f84a         db  0x8d ; '.'
000000000001f84b         db  0x04 ; '.'
000000000001f84c         db  0x42 ; 'B'
000000000001f84d         db  0x0e ; '.'
000000000001f84e         db  0x28 ; '('
000000000001f84f         db  0x8c ; '.'
000000000001f850         db  0x05 ; '.'
000000000001f851         db  0x41 ; 'A'
000000000001f852         db  0x0e ; '.'
000000000001f853         db  0x30 ; '0'
000000000001f854         db  0x86 ; '.'
000000000001f855         db  0x06 ; '.'
000000000001f856         db  0x41 ; 'A'
000000000001f857         db  0x0e ; '.'
000000000001f858         db  0x38 ; '8'
000000000001f859         db  0x83 ; '.'
000000000001f85a         db  0x07 ; '.'
000000000001f85b         db  0x47 ; 'G'
000000000001f85c         db  0x0e ; '.'
000000000001f85d         db  0xe0 ; '.'
000000000001f85e         db  0x02 ; '.'
000000000001f85f         db  0x03 ; '.'
000000000001f860         db  0x22 ; '"'
000000000001f861         db  0x01 ; '.'
000000000001f862         db  0x0a ; '.'
000000000001f863         db  0x0e ; '.'
000000000001f864         db  0x38 ; '8'
000000000001f865         db  0x41 ; 'A'
000000000001f866         db  0x0e ; '.'
000000000001f867         db  0x30 ; '0'
000000000001f868         db  0x41 ; 'A'
000000000001f869         db  0x0e ; '.'
000000000001f86a         db  0x28 ; '('
000000000001f86b         db  0x42 ; 'B'
000000000001f86c         db  0x0e ; '.'
000000000001f86d         db  0x20 ; ' '
000000000001f86e         db  0x42 ; 'B'
000000000001f86f         db  0x0e ; '.'
000000000001f870         db  0x18 ; '.'
000000000001f871         db  0x42 ; 'B'
000000000001f872         db  0x0e ; '.'
000000000001f873         db  0x10 ; '.'
000000000001f874         db  0x42 ; 'B'
000000000001f875         db  0x0e ; '.'
000000000001f876         db  0x08 ; '.'
000000000001f877         db  0x41 ; 'A'
000000000001f878         db  0x0b ; '.'
000000000001f879         db  0x03 ; '.'
000000000001f87a         db  0xbf ; '.'
000000000001f87b         db  0x0b ; '.'
000000000001f87c         db  0x0e ; '.'
000000000001f87d         db  0xe8 ; '.'
000000000001f87e         db  0x02 ; '.'
000000000001f87f         db  0x4c ; 'L'
000000000001f880         db  0x0e ; '.'
000000000001f881         db  0xf0 ; '.'
000000000001f882         db  0x02 ; '.'
000000000001f883         db  0x64 ; 'd'
000000000001f884         db  0x0e ; '.'
000000000001f885         db  0xe8 ; '.'
000000000001f886         db  0x02 ; '.'
000000000001f887         db  0x42 ; 'B'
000000000001f888         db  0x0e ; '.'
000000000001f889         db  0xe0 ; '.'
000000000001f88a         db  0x02 ; '.'
000000000001f88b         db  0x00 ; '.'
000000000001f88c         dd         0x00000048                                  ; Length of the record
000000000001f890         dd         0x00002220                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f894         db         0x5c, 0x6f, 2 dup (0xff)                    ; begin 0x167f0
000000000001f898         db         0x82, 0x01, 2 dup (0x00)                    ; length 0x182 (end at 0x16972)
000000000001f89c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f89d         db  0x42 ; 'B'
000000000001f89e         db  0x0e ; '.'
000000000001f89f         db  0x10 ; '.'
000000000001f8a0         db  0x8f ; '.'
000000000001f8a1         db  0x02 ; '.'
000000000001f8a2         db  0x42 ; 'B'
000000000001f8a3         db  0x0e ; '.'
000000000001f8a4         db  0x18 ; '.'
000000000001f8a5         db  0x8e ; '.'
000000000001f8a6         db  0x03 ; '.'
000000000001f8a7         db  0x45 ; 'E'
000000000001f8a8         db  0x0e ; '.'
000000000001f8a9         db  0x20 ; ' '
000000000001f8aa         db  0x8d ; '.'
000000000001f8ab         db  0x04 ; '.'
000000000001f8ac         db  0x42 ; 'B'
000000000001f8ad         db  0x0e ; '.'
000000000001f8ae         db  0x28 ; '('
000000000001f8af         db  0x8c ; '.'
000000000001f8b0         db  0x05 ; '.'
000000000001f8b1         db  0x44 ; 'D'
000000000001f8b2         db  0x0e ; '.'
000000000001f8b3         db  0x30 ; '0'
000000000001f8b4         db  0x86 ; '.'
000000000001f8b5         db  0x06 ; '.'
000000000001f8b6         db  0x41 ; 'A'
000000000001f8b7         db  0x0e ; '.'
000000000001f8b8         db  0x38 ; '8'
000000000001f8b9         db  0x83 ; '.'
000000000001f8ba         db  0x07 ; '.'
000000000001f8bb         db  0x4d ; 'M'
000000000001f8bc         db  0x0e ; '.'
000000000001f8bd         db  0x80 ; '.'
000000000001f8be         db  0x01 ; '.'
000000000001f8bf         db  0x02 ; '.'
000000000001f8c0         db  0xfa ; '.'
000000000001f8c1         db  0x0a ; '.'
000000000001f8c2         db  0x0e ; '.'
000000000001f8c3         db  0x38 ; '8'
000000000001f8c4         db  0x41 ; 'A'
000000000001f8c5         db  0x0e ; '.'
000000000001f8c6         db  0x30 ; '0'
000000000001f8c7         db  0x41 ; 'A'
000000000001f8c8         db  0x0e ; '.'
000000000001f8c9         db  0x28 ; '('
000000000001f8ca         db  0x42 ; 'B'
000000000001f8cb         db  0x0e ; '.'
000000000001f8cc         db  0x20 ; ' '
000000000001f8cd         db  0x42 ; 'B'
000000000001f8ce         db  0x0e ; '.'
000000000001f8cf         db  0x18 ; '.'
000000000001f8d0         db  0x42 ; 'B'
000000000001f8d1         db  0x0e ; '.'
000000000001f8d2         db  0x10 ; '.'
000000000001f8d3         db  0x42 ; 'B'
000000000001f8d4         db  0x0e ; '.'
000000000001f8d5         db  0x08 ; '.'
000000000001f8d6         db  0x47 ; 'G'
000000000001f8d7         db  0x0b ; '.'
000000000001f8d8         dd         0x0000004c                                  ; Length of the record
000000000001f8dc         dd         0x0000226c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f8e0         db         0xa0, 0x70, 2 dup (0xff)                    ; begin 0x16980
000000000001f8e4         db         0x7f, 0x01, 2 dup (0x00)                    ; length 0x17f (end at 0x16aff)
000000000001f8e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f8e9         db  0x42 ; 'B'
000000000001f8ea         db  0x0e ; '.'
000000000001f8eb         db  0x10 ; '.'
000000000001f8ec         db  0x8f ; '.'
000000000001f8ed         db  0x02 ; '.'
000000000001f8ee         db  0x42 ; 'B'
000000000001f8ef         db  0x0e ; '.'
000000000001f8f0         db  0x18 ; '.'
000000000001f8f1         db  0x8e ; '.'
000000000001f8f2         db  0x03 ; '.'
000000000001f8f3         db  0x45 ; 'E'
000000000001f8f4         db  0x0e ; '.'
000000000001f8f5         db  0x20 ; ' '
000000000001f8f6         db  0x8d ; '.'
000000000001f8f7         db  0x04 ; '.'
000000000001f8f8         db  0x42 ; 'B'
000000000001f8f9         db  0x0e ; '.'
000000000001f8fa         db  0x28 ; '('
000000000001f8fb         db  0x8c ; '.'
000000000001f8fc         db  0x05 ; '.'
000000000001f8fd         db  0x44 ; 'D'
000000000001f8fe         db  0x0e ; '.'
000000000001f8ff         db  0x30 ; '0'
000000000001f900         db  0x86 ; '.'
000000000001f901         db  0x06 ; '.'
000000000001f902         db  0x41 ; 'A'
000000000001f903         db  0x0e ; '.'
000000000001f904         db  0x38 ; '8'
000000000001f905         db  0x83 ; '.'
000000000001f906         db  0x07 ; '.'
000000000001f907         db  0x4a ; 'J'
000000000001f908         db  0x0e ; '.'
000000000001f909         db  0x90 ; '.'
000000000001f90a         db  0x01 ; '.'
000000000001f90b         db  0x03 ; '.'
000000000001f90c         db  0x45 ; 'E'
000000000001f90d         db  0x01 ; '.'
000000000001f90e         db  0x0a ; '.'
000000000001f90f         db  0x0e ; '.'
000000000001f910         db  0x38 ; '8'
000000000001f911         db  0x41 ; 'A'
000000000001f912         db  0x0e ; '.'
000000000001f913         db  0x30 ; '0'
000000000001f914         db  0x41 ; 'A'
000000000001f915         db  0x0e ; '.'
000000000001f916         db  0x28 ; '('
000000000001f917         db  0x42 ; 'B'
000000000001f918         db  0x0e ; '.'
000000000001f919         db  0x20 ; ' '
000000000001f91a         db  0x42 ; 'B'
000000000001f91b         db  0x0e ; '.'
000000000001f91c         db  0x18 ; '.'
000000000001f91d         db  0x42 ; 'B'
000000000001f91e         db  0x0e ; '.'
000000000001f91f         db  0x10 ; '.'
000000000001f920         db  0x42 ; 'B'
000000000001f921         db  0x0e ; '.'
000000000001f922         db  0x08 ; '.'
000000000001f923         db  0x47 ; 'G'
000000000001f924         db  0x0b ; '.'
000000000001f925         db  0x00 ; '.'
000000000001f926         db  0x00 ; '.'
000000000001f927         db  0x00 ; '.'
000000000001f928         dd         0x0000004c                                  ; Length of the record
000000000001f92c         dd         0x000022bc                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f930         db         0xd0, 0x71, 2 dup (0xff)                    ; begin 0x16b00
000000000001f934         db         0xf5, 0x10, 2 dup (0x00)                    ; length 0x10f5 (end at 0x17bf5)
000000000001f938         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f939         db  0x42 ; 'B'
000000000001f93a         db  0x0e ; '.'
000000000001f93b         db  0x10 ; '.'
000000000001f93c         db  0x8f ; '.'
000000000001f93d         db  0x02 ; '.'
000000000001f93e         db  0x42 ; 'B'
000000000001f93f         db  0x0e ; '.'
000000000001f940         db  0x18 ; '.'
000000000001f941         db  0x8e ; '.'
000000000001f942         db  0x03 ; '.'
000000000001f943         db  0x42 ; 'B'
000000000001f944         db  0x0e ; '.'
000000000001f945         db  0x20 ; ' '
000000000001f946         db  0x8d ; '.'
000000000001f947         db  0x04 ; '.'
000000000001f948         db  0x42 ; 'B'
000000000001f949         db  0x0e ; '.'
000000000001f94a         db  0x28 ; '('
000000000001f94b         db  0x8c ; '.'
000000000001f94c         db  0x05 ; '.'
000000000001f94d         db  0x41 ; 'A'
000000000001f94e         db  0x0e ; '.'
000000000001f94f         db  0x30 ; '0'
000000000001f950         db  0x86 ; '.'
000000000001f951         db  0x06 ; '.'
000000000001f952         db  0x41 ; 'A'
000000000001f953         db  0x0e ; '.'
000000000001f954         db  0x38 ; '8'
000000000001f955         db  0x83 ; '.'
000000000001f956         db  0x07 ; '.'
000000000001f957         db  0x47 ; 'G'
000000000001f958         db  0x0e ; '.'
000000000001f959         db  0xe0 ; '.'
000000000001f95a         db  0x02 ; '.'
000000000001f95b         db  0x03 ; '.'
000000000001f95c         db  0xa9 ; '.'
000000000001f95d         db  0x03 ; '.'
000000000001f95e         db  0x0a ; '.'
000000000001f95f         db  0x0e ; '.'
000000000001f960         db  0x38 ; '8'
000000000001f961         db  0x41 ; 'A'
000000000001f962         db  0x0e ; '.'
000000000001f963         db  0x30 ; '0'
000000000001f964         db  0x41 ; 'A'
000000000001f965         db  0x0e ; '.'
000000000001f966         db  0x28 ; '('
000000000001f967         db  0x42 ; 'B'
000000000001f968         db  0x0e ; '.'
000000000001f969         db  0x20 ; ' '
000000000001f96a         db  0x42 ; 'B'
000000000001f96b         db  0x0e ; '.'
000000000001f96c         db  0x18 ; '.'
000000000001f96d         db  0x42 ; 'B'
000000000001f96e         db  0x0e ; '.'
000000000001f96f         db  0x10 ; '.'
000000000001f970         db  0x42 ; 'B'
000000000001f971         db  0x0e ; '.'
000000000001f972         db  0x08 ; '.'
000000000001f973         db  0x41 ; 'A'
000000000001f974         db  0x0b ; '.'
000000000001f975         db  0x00 ; '.'
000000000001f976         db  0x00 ; '.'
000000000001f977         db  0x00 ; '.'
000000000001f978         dd         0x0000001c                                  ; Length of the record
000000000001f97c         dd         0x0000230c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f980         db         0x80, 0x82, 2 dup (0xff)                    ; begin 0x17c00
000000000001f984         db         0x6f, 3 dup (0x00)                          ; length 0x6f (end at 0x17c6f)
000000000001f988         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f989         db  0x44 ; 'D'
000000000001f98a         db  0x0e ; '.'
000000000001f98b         db  0x10 ; '.'
000000000001f98c         db  0x02 ; '.'
000000000001f98d         db  0x59 ; 'Y'
000000000001f98e         db  0x0a ; '.'
000000000001f98f         db  0x0e ; '.'
000000000001f990         db  0x08 ; '.'
000000000001f991         db  0x4b ; 'K'
000000000001f992         db  0x0b ; '.'
000000000001f993         db  0x46 ; 'F'
000000000001f994         db  0x0e ; '.'
000000000001f995         db  0x08 ; '.'
000000000001f996         db  0x00 ; '.'
000000000001f997         db  0x00 ; '.'
000000000001f998         dd         0x00000010                                  ; Length of the record
000000000001f99c         dd         0x0000232c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f9a0         db         0xd0, 0x82, 2 dup (0xff)                    ; begin 0x17c70
000000000001f9a4         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x17c7f)
000000000001f9a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f9a9         align      4
000000000001f9ac         dd         0x00000028                                  ; Length of the record
000000000001f9b0         dd         0x00002340                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f9b4         db         0xcc, 0x82, 2 dup (0xff)                    ; begin 0x17c80
000000000001f9b8         db         0xc3, 3 dup (0x00)                          ; length 0xc3 (end at 0x17d43)
000000000001f9bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f9bd         db  0x42 ; 'B'
000000000001f9be         db  0x0e ; '.'
000000000001f9bf         db  0x10 ; '.'
000000000001f9c0         db  0x8c ; '.'
000000000001f9c1         db  0x02 ; '.'
000000000001f9c2         db  0x41 ; 'A'
000000000001f9c3         db  0x0e ; '.'
000000000001f9c4         db  0x18 ; '.'
000000000001f9c5         db  0x86 ; '.'
000000000001f9c6         db  0x03 ; '.'
000000000001f9c7         db  0x43 ; 'C'
000000000001f9c8         db  0x0e ; '.'
000000000001f9c9         db  0x20 ; ' '
000000000001f9ca         db  0x83 ; '.'
000000000001f9cb         db  0x04 ; '.'
000000000001f9cc         db  0x02 ; '.'
000000000001f9cd         db  0xb9 ; '.'
000000000001f9ce         db  0x0e ; '.'
000000000001f9cf         db  0x18 ; '.'
000000000001f9d0         db  0x41 ; 'A'
000000000001f9d1         db  0x0e ; '.'
000000000001f9d2         db  0x10 ; '.'
000000000001f9d3         db  0x42 ; 'B'
000000000001f9d4         db  0x0e ; '.'
000000000001f9d5         db  0x08 ; '.'
000000000001f9d6         db  0x00 ; '.'
000000000001f9d7         db  0x00 ; '.'
000000000001f9d8         dd         0x0000005c                                  ; Length of the record
000000000001f9dc         dd         0x0000236c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001f9e0         db         0x70, 0x83, 2 dup (0xff)                    ; begin 0x17d50
000000000001f9e4         db         0x7f, 0x04, 2 dup (0x00)                    ; length 0x47f (end at 0x181cf)
000000000001f9e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001f9e9         db  0x42 ; 'B'
000000000001f9ea         db  0x0e ; '.'
000000000001f9eb         db  0x10 ; '.'
000000000001f9ec         db  0x8f ; '.'
000000000001f9ed         db  0x02 ; '.'
000000000001f9ee         db  0x42 ; 'B'
000000000001f9ef         db  0x0e ; '.'
000000000001f9f0         db  0x18 ; '.'
000000000001f9f1         db  0x8e ; '.'
000000000001f9f2         db  0x03 ; '.'
000000000001f9f3         db  0x45 ; 'E'
000000000001f9f4         db  0x0e ; '.'
000000000001f9f5         db  0x20 ; ' '
000000000001f9f6         db  0x8d ; '.'
000000000001f9f7         db  0x04 ; '.'
000000000001f9f8         db  0x42 ; 'B'
000000000001f9f9         db  0x0e ; '.'
000000000001f9fa         db  0x28 ; '('
000000000001f9fb         db  0x8c ; '.'
000000000001f9fc         db  0x05 ; '.'
000000000001f9fd         db  0x44 ; 'D'
000000000001f9fe         db  0x0e ; '.'
000000000001f9ff         db  0x30 ; '0'
000000000001fa00         db  0x86 ; '.'
000000000001fa01         db  0x06 ; '.'
000000000001fa02         db  0x41 ; 'A'
000000000001fa03         db  0x0e ; '.'
000000000001fa04         db  0x38 ; '8'
000000000001fa05         db  0x83 ; '.'
000000000001fa06         db  0x07 ; '.'
000000000001fa07         db  0x44 ; 'D'
000000000001fa08         db  0x0e ; '.'
000000000001fa09         db  0x70 ; 'p'
000000000001fa0a         db  0x02 ; '.'
000000000001fa0b         db  0xd4 ; '.'
000000000001fa0c         db  0x0e ; '.'
000000000001fa0d         db  0x78 ; 'x'
000000000001fa0e         db  0x4b ; 'K'
000000000001fa0f         db  0x0e ; '.'
000000000001fa10         db  0x80 ; '.'
000000000001fa11         db  0x01 ; '.'
000000000001fa12         db  0x41 ; 'A'
000000000001fa13         db  0x0e ; '.'
000000000001fa14         db  0x88 ; '.'
000000000001fa15         db  0x01 ; '.'
000000000001fa16         db  0x42 ; 'B'
000000000001fa17         db  0x0e ; '.'
000000000001fa18         db  0x90 ; '.'
000000000001fa19         db  0x01 ; '.'
000000000001fa1a         db  0x5d ; ']'
000000000001fa1b         db  0x0e ; '.'
000000000001fa1c         db  0x70 ; 'p'
000000000001fa1d         db  0x63 ; 'c'
000000000001fa1e         db  0x0a ; '.'
000000000001fa1f         db  0x0e ; '.'
000000000001fa20         db  0x38 ; '8'
000000000001fa21         db  0x44 ; 'D'
000000000001fa22         db  0x0e ; '.'
000000000001fa23         db  0x30 ; '0'
000000000001fa24         db  0x41 ; 'A'
000000000001fa25         db  0x0e ; '.'
000000000001fa26         db  0x28 ; '('
000000000001fa27         db  0x42 ; 'B'
000000000001fa28         db  0x0e ; '.'
000000000001fa29         db  0x20 ; ' '
000000000001fa2a         db  0x42 ; 'B'
000000000001fa2b         db  0x0e ; '.'
000000000001fa2c         db  0x18 ; '.'
000000000001fa2d         db  0x42 ; 'B'
000000000001fa2e         db  0x0e ; '.'
000000000001fa2f         db  0x10 ; '.'
000000000001fa30         db  0x42 ; 'B'
000000000001fa31         db  0x0e ; '.'
000000000001fa32         db  0x08 ; '.'
000000000001fa33         db  0x45 ; 'E'
000000000001fa34         db  0x0b ; '.'
000000000001fa35         db  0x00 ; '.'
000000000001fa36         db  0x00 ; '.'
000000000001fa37         db  0x00 ; '.'
000000000001fa38         dd         0x00000054                                  ; Length of the record
000000000001fa3c         dd         0x000023cc                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fa40         db         0x90, 0x87, 2 dup (0xff)                    ; begin 0x181d0
000000000001fa44         db         0x1b, 0x01, 2 dup (0x00)                    ; length 0x11b (end at 0x182eb)
000000000001fa48         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fa49         db  0x42 ; 'B'
000000000001fa4a         db  0x0e ; '.'
000000000001fa4b         db  0x10 ; '.'
000000000001fa4c         db  0x8f ; '.'
000000000001fa4d         db  0x02 ; '.'
000000000001fa4e         db  0x42 ; 'B'
000000000001fa4f         db  0x0e ; '.'
000000000001fa50         db  0x18 ; '.'
000000000001fa51         db  0x8e ; '.'
000000000001fa52         db  0x03 ; '.'
000000000001fa53         db  0x42 ; 'B'
000000000001fa54         db  0x0e ; '.'
000000000001fa55         db  0x20 ; ' '
000000000001fa56         db  0x8d ; '.'
000000000001fa57         db  0x04 ; '.'
000000000001fa58         db  0x42 ; 'B'
000000000001fa59         db  0x0e ; '.'
000000000001fa5a         db  0x28 ; '('
000000000001fa5b         db  0x8c ; '.'
000000000001fa5c         db  0x05 ; '.'
000000000001fa5d         db  0x44 ; 'D'
000000000001fa5e         db  0x0e ; '.'
000000000001fa5f         db  0x30 ; '0'
000000000001fa60         db  0x86 ; '.'
000000000001fa61         db  0x06 ; '.'
000000000001fa62         db  0x41 ; 'A'
000000000001fa63         db  0x0e ; '.'
000000000001fa64         db  0x38 ; '8'
000000000001fa65         db  0x83 ; '.'
000000000001fa66         db  0x07 ; '.'
000000000001fa67         db  0x4d ; 'M'
000000000001fa68         db  0x0e ; '.'
000000000001fa69         db  0x60 ; '`'
000000000001fa6a         db  0x02 ; '.'
000000000001fa6b         db  0x5a ; 'Z'
000000000001fa6c         db  0x0e ; '.'
000000000001fa6d         db  0x68 ; 'h'
000000000001fa6e         db  0x44 ; 'D'
000000000001fa6f         db  0x0e ; '.'
000000000001fa70         db  0x70 ; 'p'
000000000001fa71         db  0x61 ; 'a'
000000000001fa72         db  0x0e ; '.'
000000000001fa73         db  0x68 ; 'h'
000000000001fa74         db  0x41 ; 'A'
000000000001fa75         db  0x0e ; '.'
000000000001fa76         db  0x60 ; '`'
000000000001fa77         db  0x44 ; 'D'
000000000001fa78         db  0x0a ; '.'
000000000001fa79         db  0x0e ; '.'
000000000001fa7a         db  0x38 ; '8'
000000000001fa7b         db  0x44 ; 'D'
000000000001fa7c         db  0x0e ; '.'
000000000001fa7d         db  0x30 ; '0'
000000000001fa7e         db  0x41 ; 'A'
000000000001fa7f         db  0x0e ; '.'
000000000001fa80         db  0x28 ; '('
000000000001fa81         db  0x42 ; 'B'
000000000001fa82         db  0x0e ; '.'
000000000001fa83         db  0x20 ; ' '
000000000001fa84         db  0x42 ; 'B'
000000000001fa85         db  0x0e ; '.'
000000000001fa86         db  0x18 ; '.'
000000000001fa87         db  0x42 ; 'B'
000000000001fa88         db  0x0e ; '.'
000000000001fa89         db  0x10 ; '.'
000000000001fa8a         db  0x42 ; 'B'
000000000001fa8b         db  0x0e ; '.'
000000000001fa8c         db  0x08 ; '.'
000000000001fa8d         db  0x45 ; 'E'
000000000001fa8e         db  0x0b ; '.'
000000000001fa8f         db  0x00 ; '.'
000000000001fa90         dd         0x00000048                                  ; Length of the record
000000000001fa94         dd         0x00002424                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fa98         db         0x58, 0x88, 2 dup (0xff)                    ; begin 0x182f0
000000000001fa9c         db         0x10, 0x01, 2 dup (0x00)                    ; length 0x110 (end at 0x18400)
000000000001faa0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001faa1         db  0x44 ; 'D'
000000000001faa2         db  0x0e ; '.'
000000000001faa3         db  0x10 ; '.'
000000000001faa4         db  0x8e ; '.'
000000000001faa5         db  0x02 ; '.'
000000000001faa6         db  0x42 ; 'B'
000000000001faa7         db  0x0e ; '.'
000000000001faa8         db  0x18 ; '.'
000000000001faa9         db  0x8d ; '.'
000000000001faaa         db  0x03 ; '.'
000000000001faab         db  0x45 ; 'E'
000000000001faac         db  0x0e ; '.'
000000000001faad         db  0x20 ; ' '
000000000001faae         db  0x8c ; '.'
000000000001faaf         db  0x04 ; '.'
000000000001fab0         db  0x41 ; 'A'
000000000001fab1         db  0x0e ; '.'
000000000001fab2         db  0x28 ; '('
000000000001fab3         db  0x86 ; '.'
000000000001fab4         db  0x05 ; '.'
000000000001fab5         db  0x44 ; 'D'
000000000001fab6         db  0x0e ; '.'
000000000001fab7         db  0x30 ; '0'
000000000001fab8         db  0x83 ; '.'
000000000001fab9         db  0x06 ; '.'
000000000001faba         db  0x02 ; '.'
000000000001fabb         db  0xad ; '.'
000000000001fabc         db  0x0a ; '.'
000000000001fabd         db  0x0e ; '.'
000000000001fabe         db  0x28 ; '('
000000000001fabf         db  0x43 ; 'C'
000000000001fac0         db  0x0e ; '.'
000000000001fac1         db  0x20 ; ' '
000000000001fac2         db  0x42 ; 'B'
000000000001fac3         db  0x0e ; '.'
000000000001fac4         db  0x18 ; '.'
000000000001fac5         db  0x42 ; 'B'
000000000001fac6         db  0x0e ; '.'
000000000001fac7         db  0x10 ; '.'
000000000001fac8         db  0x42 ; 'B'
000000000001fac9         db  0x0e ; '.'
000000000001faca         db  0x08 ; '.'
000000000001facb         db  0x4a ; 'J'
000000000001facc         db  0x0b ; '.'
000000000001facd         db  0x76 ; 'v'
000000000001face         db  0x0e ; '.'
000000000001facf         db  0x28 ; '('
000000000001fad0         db  0x43 ; 'C'
000000000001fad1         db  0x0e ; '.'
000000000001fad2         db  0x20 ; ' '
000000000001fad3         db  0x42 ; 'B'
000000000001fad4         db  0x0e ; '.'
000000000001fad5         db  0x18 ; '.'
000000000001fad6         db  0x42 ; 'B'
000000000001fad7         db  0x0e ; '.'
000000000001fad8         db  0x10 ; '.'
000000000001fad9         db  0x42 ; 'B'
000000000001fada         db  0x0e ; '.'
000000000001fadb         db  0x08 ; '.'
000000000001fadc         dd         0x00000038                                  ; Length of the record
000000000001fae0         dd         0x00002470                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fae4         db         0x1c, 0x89, 2 dup (0xff)                    ; begin 0x18400
000000000001fae8         db         0x85, 3 dup (0x00)                          ; length 0x85 (end at 0x18485)
000000000001faec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001faed         db  0x42 ; 'B'
000000000001faee         db  0x0e ; '.'
000000000001faef         db  0x10 ; '.'
000000000001faf0         db  0x8d ; '.'
000000000001faf1         db  0x02 ; '.'
000000000001faf2         db  0x42 ; 'B'
000000000001faf3         db  0x0e ; '.'
000000000001faf4         db  0x18 ; '.'
000000000001faf5         db  0x8c ; '.'
000000000001faf6         db  0x03 ; '.'
000000000001faf7         db  0x41 ; 'A'
000000000001faf8         db  0x0e ; '.'
000000000001faf9         db  0x20 ; ' '
000000000001fafa         db  0x86 ; '.'
000000000001fafb         db  0x04 ; '.'
000000000001fafc         db  0x41 ; 'A'
000000000001fafd         db  0x0e ; '.'
000000000001fafe         db  0x28 ; '('
000000000001faff         db  0x83 ; '.'
000000000001fb00         db  0x05 ; '.'
000000000001fb01         db  0x44 ; 'D'
000000000001fb02         db  0x0e ; '.'
000000000001fb03         db  0x30 ; '0'
000000000001fb04         db  0x02 ; '.'
000000000001fb05         db  0x57 ; 'W'
000000000001fb06         db  0x0a ; '.'
000000000001fb07         db  0x0e ; '.'
000000000001fb08         db  0x28 ; '('
000000000001fb09         db  0x44 ; 'D'
000000000001fb0a         db  0x0e ; '.'
000000000001fb0b         db  0x20 ; ' '
000000000001fb0c         db  0x41 ; 'A'
000000000001fb0d         db  0x0e ; '.'
000000000001fb0e         db  0x18 ; '.'
000000000001fb0f         db  0x42 ; 'B'
000000000001fb10         db  0x0e ; '.'
000000000001fb11         db  0x10 ; '.'
000000000001fb12         db  0x42 ; 'B'
000000000001fb13         db  0x0e ; '.'
000000000001fb14         db  0x08 ; '.'
000000000001fb15         db  0x46 ; 'F'
000000000001fb16         db  0x0b ; '.'
000000000001fb17         db  0x00 ; '.'
000000000001fb18         dd         0x00000018                                  ; Length of the record
000000000001fb1c         dd         0x000024ac                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fb20         db         0x70, 0x89, 2 dup (0xff)                    ; begin 0x18490
000000000001fb24         db         0x44, 3 dup (0x00)                          ; length 0x44 (end at 0x184d4)
000000000001fb28         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fb29         db  0x41 ; 'A'
000000000001fb2a         db  0x0e ; '.'
000000000001fb2b         db  0x10 ; '.'
000000000001fb2c         db  0x83 ; '.'
000000000001fb2d         db  0x02 ; '.'
000000000001fb2e         db  0x02 ; '.'
000000000001fb2f         db  0x42 ; 'B'
000000000001fb30         db  0x0e ; '.'
000000000001fb31         db  0x08 ; '.'
000000000001fb32         db  0x00 ; '.'
000000000001fb33         db  0x00 ; '.'
000000000001fb34         dd         0x00000058                                  ; Length of the record
000000000001fb38         dd         0x000024c8                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fb3c         db         0xa4, 0x89, 2 dup (0xff)                    ; begin 0x184e0
000000000001fb40         db         0x9e, 3 dup (0x00)                          ; length 0x9e (end at 0x1857e)
000000000001fb44         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fb45         db  0x4f ; 'O'
000000000001fb46         db  0x0e ; '.'
000000000001fb47         db  0x10 ; '.'
000000000001fb48         db  0x8d ; '.'
000000000001fb49         db  0x02 ; '.'
000000000001fb4a         db  0x42 ; 'B'
000000000001fb4b         db  0x0e ; '.'
000000000001fb4c         db  0x18 ; '.'
000000000001fb4d         db  0x8c ; '.'
000000000001fb4e         db  0x03 ; '.'
000000000001fb4f         db  0x44 ; 'D'
000000000001fb50         db  0x0e ; '.'
000000000001fb51         db  0x20 ; ' '
000000000001fb52         db  0x86 ; '.'
000000000001fb53         db  0x04 ; '.'
000000000001fb54         db  0x41 ; 'A'
000000000001fb55         db  0x0e ; '.'
000000000001fb56         db  0x28 ; '('
000000000001fb57         db  0x83 ; '.'
000000000001fb58         db  0x05 ; '.'
000000000001fb59         db  0x4d ; 'M'
000000000001fb5a         db  0x0e ; '.'
000000000001fb5b         db  0x40 ; '@'
000000000001fb5c         db  0x67 ; 'g'
000000000001fb5d         db  0x0e ; '.'
000000000001fb5e         db  0x48 ; 'H'
000000000001fb5f         db  0x41 ; 'A'
000000000001fb60         db  0x0e ; '.'
000000000001fb61         db  0x50 ; 'P'
000000000001fb62         db  0x42 ; 'B'
000000000001fb63         db  0x0e ; '.'
000000000001fb64         db  0x58 ; 'X'
000000000001fb65         db  0x42 ; 'B'
000000000001fb66         db  0x0e ; '.'
000000000001fb67         db  0x60 ; '`'
000000000001fb68         db  0x52 ; 'R'
000000000001fb69         db  0x0e ; '.'
000000000001fb6a         db  0x40 ; '@'
000000000001fb6b         db  0x49 ; 'I'
000000000001fb6c         db  0x0a ; '.'
000000000001fb6d         db  0x0e ; '.'
000000000001fb6e         db  0x28 ; '('
000000000001fb6f         db  0x41 ; 'A'
000000000001fb70         db  0x0e ; '.'
000000000001fb71         db  0x20 ; ' '
000000000001fb72         db  0x44 ; 'D'
000000000001fb73         db  0x0e ; '.'
000000000001fb74         db  0x18 ; '.'
000000000001fb75         db  0x42 ; 'B'
000000000001fb76         db  0x0e ; '.'
000000000001fb77         db  0x10 ; '.'
000000000001fb78         db  0x42 ; 'B'
000000000001fb79         db  0x0e ; '.'
000000000001fb7a         db  0x08 ; '.'
000000000001fb7b         db  0x45 ; 'E'
000000000001fb7c         db  0x0b ; '.'
000000000001fb7d         db  0x52 ; 'R'
000000000001fb7e         db  0x0e ; '.'
000000000001fb7f         db  0x48 ; 'H'
000000000001fb80         db  0x41 ; 'A'
000000000001fb81         db  0x0e ; '.'
000000000001fb82         db  0x50 ; 'P'
000000000001fb83         db  0x42 ; 'B'
000000000001fb84         db  0x0e ; '.'
000000000001fb85         db  0x58 ; 'X'
000000000001fb86         db  0x42 ; 'B'
000000000001fb87         db  0x0e ; '.'
000000000001fb88         db  0x60 ; '`'
000000000001fb89         db  0x49 ; 'I'
000000000001fb8a         db  0x0e ; '.'
000000000001fb8b         db  0x08 ; '.'
000000000001fb8c         db  0xc3 ; '.'
000000000001fb8d         db  0xc6 ; '.'
000000000001fb8e         db  0xcc ; '.'
000000000001fb8f         db  0xcd ; '.'
000000000001fb90         dd         0x0000001c                                  ; Length of the record
000000000001fb94         dd         0x00002524                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fb98         db         0xe8, 0x89, 2 dup (0xff)                    ; begin 0x18580
000000000001fb9c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x18598)
000000000001fba0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fba1         db  0x44 ; 'D'
000000000001fba2         db  0x0e ; '.'
000000000001fba3         db  0x10 ; '.'
000000000001fba4         db  0x45 ; 'E'
000000000001fba5         db  0x0e ; '.'
000000000001fba6         db  0x18 ; '.'
000000000001fba7         db  0x42 ; 'B'
000000000001fba8         db  0x0e ; '.'
000000000001fba9         db  0x20 ; ' '
000000000001fbaa         db  0x4c ; 'L'
000000000001fbab         db  0x0e ; '.'
000000000001fbac         db  0x08 ; '.'
000000000001fbad         db  0x00 ; '.'
000000000001fbae         db  0x00 ; '.'
000000000001fbaf         db  0x00 ; '.'
000000000001fbb0         dd         0x0000001c                                  ; Length of the record
000000000001fbb4         dd         0x00002544                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fbb8         db         0xe8, 0x89, 2 dup (0xff)                    ; begin 0x185a0
000000000001fbbc         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x185b5)
000000000001fbc0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fbc1         db  0x44 ; 'D'
000000000001fbc2         db  0x0e ; '.'
000000000001fbc3         db  0x10 ; '.'
000000000001fbc4         db  0x42 ; 'B'
000000000001fbc5         db  0x0e ; '.'
000000000001fbc6         db  0x18 ; '.'
000000000001fbc7         db  0x42 ; 'B'
000000000001fbc8         db  0x0e ; '.'
000000000001fbc9         db  0x20 ; ' '
000000000001fbca         db  0x4c ; 'L'
000000000001fbcb         db  0x0e ; '.'
000000000001fbcc         db  0x08 ; '.'
000000000001fbcd         db  0x00 ; '.'
000000000001fbce         db  0x00 ; '.'
000000000001fbcf         db  0x00 ; '.'
000000000001fbd0         dd         0x00000020                                  ; Length of the record
000000000001fbd4         dd         0x00002564                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fbd8         db         0xe8, 0x89, 2 dup (0xff)                    ; begin 0x185c0
000000000001fbdc         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x185da)
000000000001fbe0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fbe1         db  0x44 ; 'D'
000000000001fbe2         db  0x0e ; '.'
000000000001fbe3         db  0x10 ; '.'
000000000001fbe4         db  0x42 ; 'B'
000000000001fbe5         db  0x0e ; '.'
000000000001fbe6         db  0x18 ; '.'
000000000001fbe7         db  0x44 ; 'D'
000000000001fbe8         db  0x0e ; '.'
000000000001fbe9         db  0x20 ; ' '
000000000001fbea         db  0x44 ; 'D'
000000000001fbeb         db  0x0e ; '.'
000000000001fbec         db  0x28 ; '('
000000000001fbed         db  0x42 ; 'B'
000000000001fbee         db  0x0e ; '.'
000000000001fbef         db  0x30 ; '0'
000000000001fbf0         db  0x49 ; 'I'
000000000001fbf1         db  0x0e ; '.'
000000000001fbf2         db  0x08 ; '.'
000000000001fbf3         db  0x00 ; '.'
000000000001fbf4         dd         0x00000020                                  ; Length of the record
000000000001fbf8         dd         0x00002588                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fbfc         db         0xe4, 0x89, 2 dup (0xff)                    ; begin 0x185e0
000000000001fc00         db         0x1c, 3 dup (0x00)                          ; length 0x1c (end at 0x185fc)
000000000001fc04         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fc05         db  0x44 ; 'D'
000000000001fc06         db  0x0e ; '.'
000000000001fc07         db  0x10 ; '.'
000000000001fc08         db  0x42 ; 'B'
000000000001fc09         db  0x0e ; '.'
000000000001fc0a         db  0x18 ; '.'
000000000001fc0b         db  0x44 ; 'D'
000000000001fc0c         db  0x0e ; '.'
000000000001fc0d         db  0x20 ; ' '
000000000001fc0e         db  0x44 ; 'D'
000000000001fc0f         db  0x0e ; '.'
000000000001fc10         db  0x28 ; '('
000000000001fc11         db  0x44 ; 'D'
000000000001fc12         db  0x0e ; '.'
000000000001fc13         db  0x30 ; '0'
000000000001fc14         db  0x49 ; 'I'
000000000001fc15         db  0x0e ; '.'
000000000001fc16         db  0x08 ; '.'
000000000001fc17         db  0x00 ; '.'
000000000001fc18         dd         0x00000014                                  ; Length of the record
000000000001fc1c         dd         0x000025ac                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fc20         db         0xe0, 0x89, 2 dup (0xff)                    ; begin 0x18600
000000000001fc24         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x18641)
000000000001fc28         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fc29         align      16
000000000001fc30         dd         0x00000014                                  ; Length of the record
000000000001fc34         dd         0x000025c4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fc38         db         0x18, 0x8a, 2 dup (0xff)                    ; begin 0x18650
000000000001fc3c         db         0x4e, 3 dup (0x00)                          ; length 0x4e (end at 0x1869e)
000000000001fc40         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fc41         align      8
000000000001fc48         dd         0x0000004c                                  ; Length of the record
000000000001fc4c         dd         0x000025dc                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fc50         db         0x50, 0x8a, 2 dup (0xff)                    ; begin 0x186a0
000000000001fc54         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x1871d)
000000000001fc58         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fc59         db  0x42 ; 'B'
000000000001fc5a         db  0x0e ; '.'
000000000001fc5b         db  0x10 ; '.'
000000000001fc5c         db  0x8c ; '.'
000000000001fc5d         db  0x02 ; '.'
000000000001fc5e         db  0x41 ; 'A'
000000000001fc5f         db  0x0e ; '.'
000000000001fc60         db  0x18 ; '.'
000000000001fc61         db  0x86 ; '.'
000000000001fc62         db  0x03 ; '.'
000000000001fc63         db  0x44 ; 'D'
000000000001fc64         db  0x0e ; '.'
000000000001fc65         db  0x20 ; ' '
000000000001fc66         db  0x83 ; '.'
000000000001fc67         db  0x04 ; '.'
000000000001fc68         db  0x69 ; 'i'
000000000001fc69         db  0x0a ; '.'
000000000001fc6a         db  0x0e ; '.'
000000000001fc6b         db  0x18 ; '.'
000000000001fc6c         db  0x41 ; 'A'
000000000001fc6d         db  0x0e ; '.'
000000000001fc6e         db  0x10 ; '.'
000000000001fc6f         db  0x42 ; 'B'
000000000001fc70         db  0x0e ; '.'
000000000001fc71         db  0x08 ; '.'
000000000001fc72         db  0x45 ; 'E'
000000000001fc73         db  0x0b ; '.'
000000000001fc74         db  0x55 ; 'U'
000000000001fc75         db  0x0a ; '.'
000000000001fc76         db  0x0e ; '.'
000000000001fc77         db  0x18 ; '.'
000000000001fc78         db  0x41 ; 'A'
000000000001fc79         db  0x0e ; '.'
000000000001fc7a         db  0x10 ; '.'
000000000001fc7b         db  0x42 ; 'B'
000000000001fc7c         db  0x0e ; '.'
000000000001fc7d         db  0x08 ; '.'
000000000001fc7e         db  0x48 ; 'H'
000000000001fc7f         db  0x0b ; '.'
000000000001fc80         db  0x41 ; 'A'
000000000001fc81         db  0x0a ; '.'
000000000001fc82         db  0x0e ; '.'
000000000001fc83         db  0x18 ; '.'
000000000001fc84         db  0x46 ; 'F'
000000000001fc85         db  0x0e ; '.'
000000000001fc86         db  0x10 ; '.'
000000000001fc87         db  0x42 ; 'B'
000000000001fc88         db  0x0e ; '.'
000000000001fc89         db  0x08 ; '.'
000000000001fc8a         db  0x47 ; 'G'
000000000001fc8b         db  0x0b ; '.'
000000000001fc8c         db  0x49 ; 'I'
000000000001fc8d         db  0x0e ; '.'
000000000001fc8e         db  0x18 ; '.'
000000000001fc8f         db  0x41 ; 'A'
000000000001fc90         db  0x0e ; '.'
000000000001fc91         db  0x10 ; '.'
000000000001fc92         db  0x42 ; 'B'
000000000001fc93         db  0x0e ; '.'
000000000001fc94         db  0x08 ; '.'
000000000001fc95         db  0x00 ; '.'
000000000001fc96         db  0x00 ; '.'
000000000001fc97         db  0x00 ; '.'
000000000001fc98         dd         0x0000001c                                  ; Length of the record
000000000001fc9c         dd         0x0000262c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fca0         db         0x80, 0x8a, 2 dup (0xff)                    ; begin 0x18720
000000000001fca4         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x18780)
000000000001fca8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fca9         db  0x44 ; 'D'
000000000001fcaa         db  0x0e ; '.'
000000000001fcab         db  0x10 ; '.'
000000000001fcac         db  0x75 ; 'u'
000000000001fcad         db  0x0a ; '.'
000000000001fcae         db  0x0e ; '.'
000000000001fcaf         db  0x08 ; '.'
000000000001fcb0         db  0x47 ; 'G'
000000000001fcb1         db  0x0b ; '.'
000000000001fcb2         db  0x5f ; '_'
000000000001fcb3         db  0x0e ; '.'
000000000001fcb4         db  0x08 ; '.'
000000000001fcb5         db  0x00 ; '.'
000000000001fcb6         db  0x00 ; '.'
000000000001fcb7         db  0x00 ; '.'
000000000001fcb8         dd         0x0000001c                                  ; Length of the record
000000000001fcbc         dd         0x0000264c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fcc0         db         0xc0, 0x8a, 2 dup (0xff)                    ; begin 0x18780
000000000001fcc4         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x187bc)
000000000001fcc8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fcc9         db  0x44 ; 'D'
000000000001fcca         db  0x0e ; '.'
000000000001fccb         db  0x10 ; '.'
000000000001fccc         db  0x61 ; 'a'
000000000001fccd         db  0x0a ; '.'
000000000001fcce         db  0x0e ; '.'
000000000001fccf         db  0x08 ; '.'
000000000001fcd0         db  0x4b ; 'K'
000000000001fcd1         db  0x0b ; '.'
000000000001fcd2         db  0x4b ; 'K'
000000000001fcd3         db  0x0e ; '.'
000000000001fcd4         db  0x08 ; '.'
000000000001fcd5         db  0x00 ; '.'
000000000001fcd6         db  0x00 ; '.'
000000000001fcd7         db  0x00 ; '.'
000000000001fcd8         dd         0x0000001c                                  ; Length of the record
000000000001fcdc         dd         0x0000266c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fce0         db         0xe0, 0x8a, 2 dup (0xff)                    ; begin 0x187c0
000000000001fce4         db         0x21, 3 dup (0x00)                          ; length 0x21 (end at 0x187e1)
000000000001fce8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fce9         db  0x41 ; 'A'
000000000001fcea         db  0x0e ; '.'
000000000001fceb         db  0x10 ; '.'
000000000001fcec         db  0x83 ; '.'
000000000001fced         db  0x02 ; '.'
000000000001fcee         db  0x4c ; 'L'
000000000001fcef         db  0x0a ; '.'
000000000001fcf0         db  0x0e ; '.'
000000000001fcf1         db  0x08 ; '.'
000000000001fcf2         db  0x43 ; 'C'
000000000001fcf3         db  0x0b ; '.'
000000000001fcf4         db  0x50 ; 'P'
000000000001fcf5         db  0x0e ; '.'
000000000001fcf6         db  0x08 ; '.'
000000000001fcf7         db  0x00 ; '.'
000000000001fcf8         dd         0x00000028                                  ; Length of the record
000000000001fcfc         dd         0x0000268c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fd00         db         0xf0, 0x8a, 2 dup (0xff)                    ; begin 0x187f0
000000000001fd04         db         0x56, 3 dup (0x00)                          ; length 0x56 (end at 0x18846)
000000000001fd08         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fd09         db  0x41 ; 'A'
000000000001fd0a         db  0x0e ; '.'
000000000001fd0b         db  0x10 ; '.'
000000000001fd0c         db  0x86 ; '.'
000000000001fd0d         db  0x02 ; '.'
000000000001fd0e         db  0x41 ; 'A'
000000000001fd0f         db  0x0e ; '.'
000000000001fd10         db  0x18 ; '.'
000000000001fd11         db  0x83 ; '.'
000000000001fd12         db  0x03 ; '.'
000000000001fd13         db  0x4e ; 'N'
000000000001fd14         db  0x0e ; '.'
000000000001fd15         db  0x20 ; ' '
000000000001fd16         db  0x68 ; 'h'
000000000001fd17         db  0x0a ; '.'
000000000001fd18         db  0x0e ; '.'
000000000001fd19         db  0x18 ; '.'
000000000001fd1a         db  0x41 ; 'A'
000000000001fd1b         db  0x0e ; '.'
000000000001fd1c         db  0x10 ; '.'
000000000001fd1d         db  0x41 ; 'A'
000000000001fd1e         db  0x0e ; '.'
000000000001fd1f         db  0x08 ; '.'
000000000001fd20         db  0x46 ; 'F'
000000000001fd21         db  0x0b ; '.'
000000000001fd22         db  0x00 ; '.'
000000000001fd23         db  0x00 ; '.'
000000000001fd24         dd         0x00000010                                  ; Length of the record
000000000001fd28         dd         0x000026b8                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fd2c         db         0x24, 0x8b, 2 dup (0xff)                    ; begin 0x18850
000000000001fd30         db         0x1d, 3 dup (0x00)                          ; length 0x1d (end at 0x1886d)
000000000001fd34         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fd35         align      8
000000000001fd38         dd         0x00000024                                  ; Length of the record
000000000001fd3c         dd         0x000026cc                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fd40         db         0x30, 0x8b, 2 dup (0xff)                    ; begin 0x18870
000000000001fd44         db         0xac, 0x01, 2 dup (0x00)                    ; length 0x1ac (end at 0x18a1c)
000000000001fd48         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fd49         db  0x41 ; 'A'
000000000001fd4a         db  0x0e ; '.'
000000000001fd4b         db  0x10 ; '.'
000000000001fd4c         db  0x86 ; '.'
000000000001fd4d         db  0x02 ; '.'
000000000001fd4e         db  0x43 ; 'C'
000000000001fd4f         db  0x0d ; '.'
000000000001fd50         db  0x06 ; '.'
000000000001fd51         db  0x43 ; 'C'
000000000001fd52         db  0x8c ; '.'
000000000001fd53         db  0x03 ; '.'
000000000001fd54         db  0x83 ; '.'
000000000001fd55         db  0x04 ; '.'
000000000001fd56         db  0x03 ; '.'
000000000001fd57         db  0x26 ; '&'
000000000001fd58         db  0x01 ; '.'
000000000001fd59         db  0x0a ; '.'
000000000001fd5a         db  0x0c ; '.'
000000000001fd5b         db  0x07 ; '.'
000000000001fd5c         db  0x08 ; '.'
000000000001fd5d         db  0x43 ; 'C'
000000000001fd5e         db  0x0b ; '.'
000000000001fd5f         db  0x00 ; '.'
000000000001fd60         dd         0x00000010                                  ; Length of the record
000000000001fd64         dd         0x000026f4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fd68         db         0xfe, 0x23, 0xfe, 0xff                      ; begin 0x2166
000000000001fd6c         db         0x23, 3 dup (0x00)                          ; length 0x23 (end at 0x2189)
000000000001fd70         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fd71         db  0x59 ; 'Y'
000000000001fd72         db  0x0e ; '.'
000000000001fd73         db  0x10 ; '.'
000000000001fd74         dd         0x0000002c                                  ; Length of the record
000000000001fd78         dd         0x00002708                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fd7c         db         0xa4, 0x8c, 2 dup (0xff)                    ; begin 0x18a20
000000000001fd80         db         0x71, 0x0a, 2 dup (0x00)                    ; length 0xa71 (end at 0x19491)
000000000001fd84         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fd85         db  0x41 ; 'A'
000000000001fd86         db  0x0e ; '.'
000000000001fd87         db  0x10 ; '.'
000000000001fd88         db  0x86 ; '.'
000000000001fd89         db  0x02 ; '.'
000000000001fd8a         db  0x43 ; 'C'
000000000001fd8b         db  0x0d ; '.'
000000000001fd8c         db  0x06 ; '.'
000000000001fd8d         db  0x49 ; 'I'
000000000001fd8e         db  0x8f ; '.'
000000000001fd8f         db  0x03 ; '.'
000000000001fd90         db  0x8e ; '.'
000000000001fd91         db  0x04 ; '.'
000000000001fd92         db  0x8d ; '.'
000000000001fd93         db  0x05 ; '.'
000000000001fd94         db  0x8c ; '.'
000000000001fd95         db  0x06 ; '.'
000000000001fd96         db  0x83 ; '.'
000000000001fd97         db  0x07 ; '.'
000000000001fd98         db  0x03 ; '.'
000000000001fd99         db  0x96 ; '.'
000000000001fd9a         db  0x04 ; '.'
000000000001fd9b         db  0x0a ; '.'
000000000001fd9c         db  0x0c ; '.'
000000000001fd9d         db  0x07 ; '.'
000000000001fd9e         db  0x08 ; '.'
000000000001fd9f         db  0x45 ; 'E'
000000000001fda0         db  0x0b ; '.'
000000000001fda1         db  0x00 ; '.'
000000000001fda2         db  0x00 ; '.'
000000000001fda3         db  0x00 ; '.'
000000000001fda4         dd         0x00000050                                  ; Length of the record
000000000001fda8         dd         0x00002738                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fdac         db         0xf4, 0x96, 2 dup (0xff)                    ; begin 0x194a0
000000000001fdb0         db         0x09, 0x11, 2 dup (0x00)                    ; length 0x1109 (end at 0x1a5a9)
000000000001fdb4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fdb5         db  0x42 ; 'B'
000000000001fdb6         db  0x0e ; '.'
000000000001fdb7         db  0x10 ; '.'
000000000001fdb8         db  0x8f ; '.'
000000000001fdb9         db  0x02 ; '.'
000000000001fdba         db  0x42 ; 'B'
000000000001fdbb         db  0x0e ; '.'
000000000001fdbc         db  0x18 ; '.'
000000000001fdbd         db  0x8e ; '.'
000000000001fdbe         db  0x03 ; '.'
000000000001fdbf         db  0x42 ; 'B'
000000000001fdc0         db  0x0e ; '.'
000000000001fdc1         db  0x20 ; ' '
000000000001fdc2         db  0x8d ; '.'
000000000001fdc3         db  0x04 ; '.'
000000000001fdc4         db  0x42 ; 'B'
000000000001fdc5         db  0x0e ; '.'
000000000001fdc6         db  0x28 ; '('
000000000001fdc7         db  0x8c ; '.'
000000000001fdc8         db  0x05 ; '.'
000000000001fdc9         db  0x44 ; 'D'
000000000001fdca         db  0x0e ; '.'
000000000001fdcb         db  0x30 ; '0'
000000000001fdcc         db  0x86 ; '.'
000000000001fdcd         db  0x06 ; '.'
000000000001fdce         db  0x41 ; 'A'
000000000001fdcf         db  0x0e ; '.'
000000000001fdd0         db  0x38 ; '8'
000000000001fdd1         db  0x83 ; '.'
000000000001fdd2         db  0x07 ; '.'
000000000001fdd3         db  0x4a ; 'J'
000000000001fdd4         db  0x0e ; '.'
000000000001fdd5         db  0xd0 ; '.'
000000000001fdd6         db  0x03 ; '.'
000000000001fdd7         db  0x03 ; '.'
000000000001fdd8         db  0x8d ; '.'
000000000001fdd9         db  0x01 ; '.'
000000000001fdda         db  0x0a ; '.'
000000000001fddb         db  0x0e ; '.'
000000000001fddc         db  0x38 ; '8'
000000000001fddd         db  0x41 ; 'A'
000000000001fdde         db  0x0e ; '.'
000000000001fddf         db  0x30 ; '0'
000000000001fde0         db  0x41 ; 'A'
000000000001fde1         db  0x0e ; '.'
000000000001fde2         db  0x28 ; '('
000000000001fde3         db  0x42 ; 'B'
000000000001fde4         db  0x0e ; '.'
000000000001fde5         db  0x20 ; ' '
000000000001fde6         db  0x42 ; 'B'
000000000001fde7         db  0x0e ; '.'
000000000001fde8         db  0x18 ; '.'
000000000001fde9         db  0x42 ; 'B'
000000000001fdea         db  0x0e ; '.'
000000000001fdeb         db  0x10 ; '.'
000000000001fdec         db  0x42 ; 'B'
000000000001fded         db  0x0e ; '.'
000000000001fdee         db  0x08 ; '.'
000000000001fdef         db  0x42 ; 'B'
000000000001fdf0         db  0x0b ; '.'
000000000001fdf1         db  0x00 ; '.'
000000000001fdf2         db  0x00 ; '.'
000000000001fdf3         db  0x00 ; '.'
000000000001fdf4         db  0x00 ; '.'
000000000001fdf5         db  0x00 ; '.'
000000000001fdf6         db  0x00 ; '.'
000000000001fdf7         db  0x00 ; '.'
000000000001fdf8         dd         0x0000004c                                  ; Length of the record
000000000001fdfc         dd         0x0000278c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fe00         db         0xb0, 0xa7, 2 dup (0xff)                    ; begin 0x1a5b0
000000000001fe04         db         0xbd, 0x02, 2 dup (0x00)                    ; length 0x2bd (end at 0x1a86d)
000000000001fe08         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fe09         db  0x42 ; 'B'
000000000001fe0a         db  0x0e ; '.'
000000000001fe0b         db  0x10 ; '.'
000000000001fe0c         db  0x8f ; '.'
000000000001fe0d         db  0x02 ; '.'
000000000001fe0e         db  0x42 ; 'B'
000000000001fe0f         db  0x0e ; '.'
000000000001fe10         db  0x18 ; '.'
000000000001fe11         db  0x8e ; '.'
000000000001fe12         db  0x03 ; '.'
000000000001fe13         db  0x45 ; 'E'
000000000001fe14         db  0x0e ; '.'
000000000001fe15         db  0x20 ; ' '
000000000001fe16         db  0x8d ; '.'
000000000001fe17         db  0x04 ; '.'
000000000001fe18         db  0x42 ; 'B'
000000000001fe19         db  0x0e ; '.'
000000000001fe1a         db  0x28 ; '('
000000000001fe1b         db  0x8c ; '.'
000000000001fe1c         db  0x05 ; '.'
000000000001fe1d         db  0x44 ; 'D'
000000000001fe1e         db  0x0e ; '.'
000000000001fe1f         db  0x30 ; '0'
000000000001fe20         db  0x86 ; '.'
000000000001fe21         db  0x06 ; '.'
000000000001fe22         db  0x41 ; 'A'
000000000001fe23         db  0x0e ; '.'
000000000001fe24         db  0x38 ; '8'
000000000001fe25         db  0x83 ; '.'
000000000001fe26         db  0x07 ; '.'
000000000001fe27         db  0x4e ; 'N'
000000000001fe28         db  0x0e ; '.'
000000000001fe29         db  0xa0 ; '.'
000000000001fe2a         db  0x21 ; '!'
000000000001fe2b         db  0x03 ; '.'
000000000001fe2c         db  0x16 ; '.'
000000000001fe2d         db  0x02 ; '.'
000000000001fe2e         db  0x0a ; '.'
000000000001fe2f         db  0x0e ; '.'
000000000001fe30         db  0x38 ; '8'
000000000001fe31         db  0x41 ; 'A'
000000000001fe32         db  0x0e ; '.'
000000000001fe33         db  0x30 ; '0'
000000000001fe34         db  0x41 ; 'A'
000000000001fe35         db  0x0e ; '.'
000000000001fe36         db  0x28 ; '('
000000000001fe37         db  0x42 ; 'B'
000000000001fe38         db  0x0e ; '.'
000000000001fe39         db  0x20 ; ' '
000000000001fe3a         db  0x42 ; 'B'
000000000001fe3b         db  0x0e ; '.'
000000000001fe3c         db  0x18 ; '.'
000000000001fe3d         db  0x42 ; 'B'
000000000001fe3e         db  0x0e ; '.'
000000000001fe3f         db  0x10 ; '.'
000000000001fe40         db  0x42 ; 'B'
000000000001fe41         db  0x0e ; '.'
000000000001fe42         db  0x08 ; '.'
000000000001fe43         db  0x42 ; 'B'
000000000001fe44         db  0x0b ; '.'
000000000001fe45         db  0x00 ; '.'
000000000001fe46         db  0x00 ; '.'
000000000001fe47         db  0x00 ; '.'
000000000001fe48         dd         0x0000004c                                  ; Length of the record
000000000001fe4c         dd         0x000027dc                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fe50         db         0x20, 0xaa, 2 dup (0xff)                    ; begin 0x1a870
000000000001fe54         db         0x42, 0x02, 2 dup (0x00)                    ; length 0x242 (end at 0x1aab2)
000000000001fe58         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fe59         db  0x42 ; 'B'
000000000001fe5a         db  0x0e ; '.'
000000000001fe5b         db  0x10 ; '.'
000000000001fe5c         db  0x8f ; '.'
000000000001fe5d         db  0x02 ; '.'
000000000001fe5e         db  0x42 ; 'B'
000000000001fe5f         db  0x0e ; '.'
000000000001fe60         db  0x18 ; '.'
000000000001fe61         db  0x8e ; '.'
000000000001fe62         db  0x03 ; '.'
000000000001fe63         db  0x42 ; 'B'
000000000001fe64         db  0x0e ; '.'
000000000001fe65         db  0x20 ; ' '
000000000001fe66         db  0x8d ; '.'
000000000001fe67         db  0x04 ; '.'
000000000001fe68         db  0x42 ; 'B'
000000000001fe69         db  0x0e ; '.'
000000000001fe6a         db  0x28 ; '('
000000000001fe6b         db  0x8c ; '.'
000000000001fe6c         db  0x05 ; '.'
000000000001fe6d         db  0x44 ; 'D'
000000000001fe6e         db  0x0e ; '.'
000000000001fe6f         db  0x30 ; '0'
000000000001fe70         db  0x86 ; '.'
000000000001fe71         db  0x06 ; '.'
000000000001fe72         db  0x41 ; 'A'
000000000001fe73         db  0x0e ; '.'
000000000001fe74         db  0x38 ; '8'
000000000001fe75         db  0x83 ; '.'
000000000001fe76         db  0x07 ; '.'
000000000001fe77         db  0x44 ; 'D'
000000000001fe78         db  0x0e ; '.'
000000000001fe79         db  0x90 ; '.'
000000000001fe7a         db  0x01 ; '.'
000000000001fe7b         db  0x03 ; '.'
000000000001fe7c         db  0xfe ; '.'
000000000001fe7d         db  0x01 ; '.'
000000000001fe7e         db  0x0a ; '.'
000000000001fe7f         db  0x0e ; '.'
000000000001fe80         db  0x38 ; '8'
000000000001fe81         db  0x41 ; 'A'
000000000001fe82         db  0x0e ; '.'
000000000001fe83         db  0x30 ; '0'
000000000001fe84         db  0x41 ; 'A'
000000000001fe85         db  0x0e ; '.'
000000000001fe86         db  0x28 ; '('
000000000001fe87         db  0x42 ; 'B'
000000000001fe88         db  0x0e ; '.'
000000000001fe89         db  0x20 ; ' '
000000000001fe8a         db  0x42 ; 'B'
000000000001fe8b         db  0x0e ; '.'
000000000001fe8c         db  0x18 ; '.'
000000000001fe8d         db  0x42 ; 'B'
000000000001fe8e         db  0x0e ; '.'
000000000001fe8f         db  0x10 ; '.'
000000000001fe90         db  0x42 ; 'B'
000000000001fe91         db  0x0e ; '.'
000000000001fe92         db  0x08 ; '.'
000000000001fe93         db  0x47 ; 'G'
000000000001fe94         db  0x0b ; '.'
000000000001fe95         db  0x00 ; '.'
000000000001fe96         db  0x00 ; '.'
000000000001fe97         db  0x00 ; '.'
000000000001fe98         dd         0x0000004c                                  ; Length of the record
000000000001fe9c         dd         0x0000282c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fea0         db         0x20, 0xac, 2 dup (0xff)                    ; begin 0x1aac0
000000000001fea4         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x1aba7)
000000000001fea8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fea9         db  0x42 ; 'B'
000000000001feaa         db  0x0e ; '.'
000000000001feab         db  0x10 ; '.'
000000000001feac         db  0x8d ; '.'
000000000001fead         db  0x02 ; '.'
000000000001feae         db  0x42 ; 'B'
000000000001feaf         db  0x0e ; '.'
000000000001feb0         db  0x18 ; '.'
000000000001feb1         db  0x8c ; '.'
000000000001feb2         db  0x03 ; '.'
000000000001feb3         db  0x41 ; 'A'
000000000001feb4         db  0x0e ; '.'
000000000001feb5         db  0x20 ; ' '
000000000001feb6         db  0x86 ; '.'
000000000001feb7         db  0x04 ; '.'
000000000001feb8         db  0x41 ; 'A'
000000000001feb9         db  0x0e ; '.'
000000000001feba         db  0x28 ; '('
000000000001febb         db  0x83 ; '.'
000000000001febc         db  0x05 ; '.'
000000000001febd         db  0x47 ; 'G'
000000000001febe         db  0x0e ; '.'
000000000001febf         db  0x30 ; '0'
000000000001fec0         db  0x6e ; 'n'
000000000001fec1         db  0x0a ; '.'
000000000001fec2         db  0x0e ; '.'
000000000001fec3         db  0x28 ; '('
000000000001fec4         db  0x44 ; 'D'
000000000001fec5         db  0x0e ; '.'
000000000001fec6         db  0x20 ; ' '
000000000001fec7         db  0x41 ; 'A'
000000000001fec8         db  0x0e ; '.'
000000000001fec9         db  0x18 ; '.'
000000000001feca         db  0x42 ; 'B'
000000000001fecb         db  0x0e ; '.'
000000000001fecc         db  0x10 ; '.'
000000000001fecd         db  0x42 ; 'B'
000000000001fece         db  0x0e ; '.'
000000000001fecf         db  0x08 ; '.'
000000000001fed0         db  0x44 ; 'D'
000000000001fed1         db  0x0b ; '.'
000000000001fed2         db  0x02 ; '.'
000000000001fed3         db  0x67 ; 'g'
000000000001fed4         db  0x0a ; '.'
000000000001fed5         db  0x0e ; '.'
000000000001fed6         db  0x28 ; '('
000000000001fed7         db  0x44 ; 'D'
000000000001fed8         db  0x0e ; '.'
000000000001fed9         db  0x20 ; ' '
000000000001feda         db  0x41 ; 'A'
000000000001fedb         db  0x0e ; '.'
000000000001fedc         db  0x18 ; '.'
000000000001fedd         db  0x42 ; 'B'
000000000001fede         db  0x0e ; '.'
000000000001fedf         db  0x10 ; '.'
000000000001fee0         db  0x42 ; 'B'
000000000001fee1         db  0x0e ; '.'
000000000001fee2         db  0x08 ; '.'
000000000001fee3         db  0x48 ; 'H'
000000000001fee4         db  0x0b ; '.'
000000000001fee5         db  0x00 ; '.'
000000000001fee6         db  0x00 ; '.'
000000000001fee7         db  0x00 ; '.'
000000000001fee8         dd         0x00000014                                  ; Length of the record
000000000001feec         dd         0x0000287c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001fef0         db         0xc0, 0xac, 2 dup (0xff)                    ; begin 0x1abb0
000000000001fef4         db         0x39, 3 dup (0x00)                          ; length 0x39 (end at 0x1abe9)
000000000001fef8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001fef9         db  0x4a ; 'J'
000000000001fefa         db  0x0e ; '.'
000000000001fefb         db  0x10 ; '.'
000000000001fefc         db  0x68 ; 'h'
000000000001fefd         db  0x0e ; '.'
000000000001fefe         db  0x08 ; '.'
000000000001feff         db  0x00 ; '.'
000000000001ff00         dd         0x00000014                                  ; Length of the record
000000000001ff04         dd         0x00002894                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ff08         db         0xe8, 0xac, 2 dup (0xff)                    ; begin 0x1abf0
000000000001ff0c         db         0x25, 3 dup (0x00)                          ; length 0x25 (end at 0x1ac15)
000000000001ff10         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ff11         db  0x60 ; '`'
000000000001ff12         db  0x0e ; '.'
000000000001ff13         db  0x10 ; '.'
000000000001ff14         db  0x00 ; '.'
000000000001ff15         db  0x00 ; '.'
000000000001ff16         db  0x00 ; '.'
000000000001ff17         db  0x00 ; '.'
000000000001ff18         dd         0x00000044                                  ; Length of the record
000000000001ff1c         dd         0x000028ac                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ff20         db         0x00, 0xad, 2 dup (0xff)                    ; begin 0x1ac20
000000000001ff24         db         0x2c, 0x02, 2 dup (0x00)                    ; length 0x22c (end at 0x1ae4c)
000000000001ff28         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ff29         db  0x42 ; 'B'
000000000001ff2a         db  0x0e ; '.'
000000000001ff2b         db  0x10 ; '.'
000000000001ff2c         db  0x8e ; '.'
000000000001ff2d         db  0x02 ; '.'
000000000001ff2e         db  0x42 ; 'B'
000000000001ff2f         db  0x0e ; '.'
000000000001ff30         db  0x18 ; '.'
000000000001ff31         db  0x8d ; '.'
000000000001ff32         db  0x03 ; '.'
000000000001ff33         db  0x42 ; 'B'
000000000001ff34         db  0x0e ; '.'
000000000001ff35         db  0x20 ; ' '
000000000001ff36         db  0x8c ; '.'
000000000001ff37         db  0x04 ; '.'
000000000001ff38         db  0x41 ; 'A'
000000000001ff39         db  0x0e ; '.'
000000000001ff3a         db  0x28 ; '('
000000000001ff3b         db  0x86 ; '.'
000000000001ff3c         db  0x05 ; '.'
000000000001ff3d         db  0x41 ; 'A'
000000000001ff3e         db  0x0e ; '.'
000000000001ff3f         db  0x30 ; '0'
000000000001ff40         db  0x83 ; '.'
000000000001ff41         db  0x06 ; '.'
000000000001ff42         db  0x47 ; 'G'
000000000001ff43         db  0x0e ; '.'
000000000001ff44         db  0x80 ; '.'
000000000001ff45         db  0x01 ; '.'
000000000001ff46         db  0x02 ; '.'
000000000001ff47         db  0x41 ; 'A'
000000000001ff48         db  0x0a ; '.'
000000000001ff49         db  0x0e ; '.'
000000000001ff4a         db  0x30 ; '0'
000000000001ff4b         db  0x41 ; 'A'
000000000001ff4c         db  0x0e ; '.'
000000000001ff4d         db  0x28 ; '('
000000000001ff4e         db  0x41 ; 'A'
000000000001ff4f         db  0x0e ; '.'
000000000001ff50         db  0x20 ; ' '
000000000001ff51         db  0x42 ; 'B'
000000000001ff52         db  0x0e ; '.'
000000000001ff53         db  0x18 ; '.'
000000000001ff54         db  0x42 ; 'B'
000000000001ff55         db  0x0e ; '.'
000000000001ff56         db  0x10 ; '.'
000000000001ff57         db  0x42 ; 'B'
000000000001ff58         db  0x0e ; '.'
000000000001ff59         db  0x08 ; '.'
000000000001ff5a         db  0x48 ; 'H'
000000000001ff5b         db  0x0b ; '.'
000000000001ff5c         db  0x00 ; '.'
000000000001ff5d         db  0x00 ; '.'
000000000001ff5e         db  0x00 ; '.'
000000000001ff5f         db  0x00 ; '.'
000000000001ff60         dd         0x00000044                                  ; Length of the record
000000000001ff64         dd         0x000028f4                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ff68         db         0xe8, 0xae, 2 dup (0xff)                    ; begin 0x1ae50
000000000001ff6c         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x1aeb5)
000000000001ff70         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ff71         db  0x42 ; 'B'
000000000001ff72         db  0x0e ; '.'
000000000001ff73         db  0x10 ; '.'
000000000001ff74         db  0x8f ; '.'
000000000001ff75         db  0x02 ; '.'
000000000001ff76         db  0x42 ; 'B'
000000000001ff77         db  0x0e ; '.'
000000000001ff78         db  0x18 ; '.'
000000000001ff79         db  0x8e ; '.'
000000000001ff7a         db  0x03 ; '.'
000000000001ff7b         db  0x45 ; 'E'
000000000001ff7c         db  0x0e ; '.'
000000000001ff7d         db  0x20 ; ' '
000000000001ff7e         db  0x8d ; '.'
000000000001ff7f         db  0x04 ; '.'
000000000001ff80         db  0x42 ; 'B'
000000000001ff81         db  0x0e ; '.'
000000000001ff82         db  0x28 ; '('
000000000001ff83         db  0x8c ; '.'
000000000001ff84         db  0x05 ; '.'
000000000001ff85         db  0x48 ; 'H'
000000000001ff86         db  0x0e ; '.'
000000000001ff87         db  0x30 ; '0'
000000000001ff88         db  0x86 ; '.'
000000000001ff89         db  0x06 ; '.'
000000000001ff8a         db  0x48 ; 'H'
000000000001ff8b         db  0x0e ; '.'
000000000001ff8c         db  0x38 ; '8'
000000000001ff8d         db  0x83 ; '.'
000000000001ff8e         db  0x07 ; '.'
000000000001ff8f         db  0x4d ; 'M'
000000000001ff90         db  0x0e ; '.'
000000000001ff91         db  0x40 ; '@'
000000000001ff92         db  0x72 ; 'r'
000000000001ff93         db  0x0e ; '.'
000000000001ff94         db  0x38 ; '8'
000000000001ff95         db  0x41 ; 'A'
000000000001ff96         db  0x0e ; '.'
000000000001ff97         db  0x30 ; '0'
000000000001ff98         db  0x41 ; 'A'
000000000001ff99         db  0x0e ; '.'
000000000001ff9a         db  0x28 ; '('
000000000001ff9b         db  0x42 ; 'B'
000000000001ff9c         db  0x0e ; '.'
000000000001ff9d         db  0x20 ; ' '
000000000001ff9e         db  0x42 ; 'B'
000000000001ff9f         db  0x0e ; '.'
000000000001ffa0         db  0x18 ; '.'
000000000001ffa1         db  0x42 ; 'B'
000000000001ffa2         db  0x0e ; '.'
000000000001ffa3         db  0x10 ; '.'
000000000001ffa4         db  0x42 ; 'B'
000000000001ffa5         db  0x0e ; '.'
000000000001ffa6         db  0x08 ; '.'
000000000001ffa7         db  0x00 ; '.'
000000000001ffa8         dd         0x00000014                                  ; Length of the record
000000000001ffac         dd         0x0000293c                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ffb0         db         0x10, 0xaf, 2 dup (0xff)                    ; begin 0x1aec0
000000000001ffb4         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x1aec2)
000000000001ffb8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ffb9         align      64
000000000001ffc0         dd         0x00000010                                  ; Length of the record
000000000001ffc4         dd         0x00002954                                  ; FDE: parent CIE at 0x1d670 (FDE encoding = 0x1B)
000000000001ffc8         db         0x08, 0xaf, 2 dup (0xff)                    ; begin 0x1aed0
000000000001ffcc         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x1aede)
000000000001ffd0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001ffd1         align      8


        ; Segment Segment 3
        ; Range: [0x220870; 0x221a00[ (4496 bytes)
        ; File offset : [133232; 135360[ (2128 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x220870; 0x220878[ (8 bytes)
        ; File offset : [133232; 133240[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
0000000000220870         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x220878; 0x220880[ (8 bytes)
        ; File offset : [133240; 133248[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
0000000000220878         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x220880; 0x220b58[ (728 bytes)
        ; File offset : [133248; 133976[ (728 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     format_args:
0000000000220880         db  0xb2 ; '.'                                         ; DATA XREF=main+367
0000000000220881         db  0xb8 ; '.'
0000000000220882         db  0x01 ; '.'
0000000000220883         db  0x00 ; '.'
0000000000220884         db  0x00 ; '.'
0000000000220885         db  0x00 ; '.'
0000000000220886         db  0x00 ; '.'
0000000000220887         db  0x00 ; '.'
0000000000220888         db  0xb7 ; '.'
0000000000220889         db  0xb8 ; '.'
000000000022088a         db  0x01 ; '.'
000000000022088b         db  0x00 ; '.'
000000000022088c         db  0x00 ; '.'
000000000022088d         db  0x00 ; '.'
000000000022088e         db  0x00 ; '.'
000000000022088f         db  0x00 ; '.'
0000000000220890         db  0x00 ; '.'
0000000000220891         db  0x00 ; '.'
0000000000220892         db  0x00 ; '.'
0000000000220893         db  0x00 ; '.'
0000000000220894         db  0x00 ; '.'
0000000000220895         db  0x00 ; '.'
0000000000220896         db  0x00 ; '.'
0000000000220897         db  0x00 ; '.'
0000000000220898         db  0x00 ; '.'
0000000000220899         db  0x00 ; '.'
000000000022089a         db  0x00 ; '.'
000000000022089b         db  0x00 ; '.'
000000000022089c         db  0x00 ; '.'
000000000022089d         db  0x00 ; '.'
000000000022089e         db  0x00 ; '.'
000000000022089f         db  0x00 ; '.'
                     long_options:
00000000002208a0         db  0xbb ; '.'                                         ; DATA XREF=main+15
00000000002208a1         db  0xb8 ; '.'
00000000002208a2         db  0x01 ; '.'
00000000002208a3         db  0x00 ; '.'
00000000002208a4         db  0x00 ; '.'
00000000002208a5         db  0x00 ; '.'
00000000002208a6         db  0x00 ; '.'
00000000002208a7         db  0x00 ; '.'
00000000002208a8         db  0x00 ; '.'
00000000002208a9         db  0x00 ; '.'
00000000002208aa         db  0x00 ; '.'
00000000002208ab         db  0x00 ; '.'
00000000002208ac         db  0x00 ; '.'
00000000002208ad         db  0x00 ; '.'
00000000002208ae         db  0x00 ; '.'
00000000002208af         db  0x00 ; '.'
00000000002208b0         db  0x00 ; '.'
00000000002208b1         db  0x00 ; '.'
00000000002208b2         db  0x00 ; '.'
00000000002208b3         db  0x00 ; '.'
00000000002208b4         db  0x00 ; '.'
00000000002208b5         db  0x00 ; '.'
00000000002208b6         db  0x00 ; '.'
00000000002208b7         db  0x00 ; '.'
00000000002208b8         db  0x41 ; 'A'
00000000002208b9         db  0x00 ; '.'
00000000002208ba         db  0x00 ; '.'
00000000002208bb         db  0x00 ; '.'
00000000002208bc         db  0x00 ; '.'
00000000002208bd         db  0x00 ; '.'
00000000002208be         db  0x00 ; '.'
00000000002208bf         db  0x00 ; '.'
00000000002208c0         db  0xca ; '.'
00000000002208c1         db  0xb8 ; '.'
00000000002208c2         db  0x01 ; '.'
00000000002208c3         db  0x00 ; '.'
00000000002208c4         db  0x00 ; '.'
00000000002208c5         db  0x00 ; '.'
00000000002208c6         db  0x00 ; '.'
00000000002208c7         db  0x00 ; '.'
00000000002208c8         db  0x01 ; '.'
00000000002208c9         db  0x00 ; '.'
00000000002208ca         db  0x00 ; '.'
00000000002208cb         db  0x00 ; '.'
00000000002208cc         db  0x00 ; '.'
00000000002208cd         db  0x00 ; '.'
00000000002208ce         db  0x00 ; '.'
00000000002208cf         db  0x00 ; '.'
00000000002208d0         db  0x00 ; '.'
00000000002208d1         db  0x00 ; '.'
00000000002208d2         db  0x00 ; '.'
00000000002208d3         db  0x00 ; '.'
00000000002208d4         db  0x00 ; '.'
00000000002208d5         db  0x00 ; '.'
00000000002208d6         db  0x00 ; '.'
00000000002208d7         db  0x00 ; '.'
00000000002208d8         db  0x62 ; 'b'
00000000002208d9         db  0x00 ; '.'
00000000002208da         db  0x00 ; '.'
00000000002208db         db  0x00 ; '.'
00000000002208dc         db  0x00 ; '.'
00000000002208dd         db  0x00 ; '.'
00000000002208de         db  0x00 ; '.'
00000000002208df         db  0x00 ; '.'
00000000002208e0         db  0xd5 ; '.'
00000000002208e1         db  0xb8 ; '.'
00000000002208e2         db  0x01 ; '.'
00000000002208e3         db  0x00 ; '.'
00000000002208e4         db  0x00 ; '.'
00000000002208e5         db  0x00 ; '.'
00000000002208e6         db  0x00 ; '.'
00000000002208e7         db  0x00 ; '.'
00000000002208e8         db  0x01 ; '.'
00000000002208e9         db  0x00 ; '.'
00000000002208ea         db  0x00 ; '.'
00000000002208eb         db  0x00 ; '.'
00000000002208ec         db  0x00 ; '.'
00000000002208ed         db  0x00 ; '.'
00000000002208ee         db  0x00 ; '.'
00000000002208ef         db  0x00 ; '.'
00000000002208f0         db  0x00 ; '.'
00000000002208f1         db  0x00 ; '.'
00000000002208f2         db  0x00 ; '.'
00000000002208f3         db  0x00 ; '.'
00000000002208f4         db  0x00 ; '.'
00000000002208f5         db  0x00 ; '.'
00000000002208f6         db  0x00 ; '.'
00000000002208f7         db  0x00 ; '.'
00000000002208f8         db  0x46 ; 'F'
00000000002208f9         db  0x00 ; '.'
00000000002208fa         db  0x00 ; '.'
00000000002208fb         db  0x00 ; '.'
00000000002208fc         db  0x00 ; '.'
00000000002208fd         db  0x00 ; '.'
00000000002208fe         db  0x00 ; '.'
00000000002208ff         db  0x00 ; '.'
0000000000220900         db  0xe5 ; '.'
0000000000220901         db  0xb8 ; '.'
0000000000220902         db  0x01 ; '.'
0000000000220903         db  0x00 ; '.'
0000000000220904         db  0x00 ; '.'
0000000000220905         db  0x00 ; '.'
0000000000220906         db  0x00 ; '.'
0000000000220907         db  0x00 ; '.'
0000000000220908         db  0x00 ; '.'
0000000000220909         db  0x00 ; '.'
000000000022090a         db  0x00 ; '.'
000000000022090b         db  0x00 ; '.'
000000000022090c         db  0x00 ; '.'
000000000022090d         db  0x00 ; '.'
000000000022090e         db  0x00 ; '.'
000000000022090f         db  0x00 ; '.'
0000000000220910         db  0x00 ; '.'
0000000000220911         db  0x00 ; '.'
0000000000220912         db  0x00 ; '.'
0000000000220913         db  0x00 ; '.'
0000000000220914         db  0x00 ; '.'
0000000000220915         db  0x00 ; '.'
0000000000220916         db  0x00 ; '.'
0000000000220917         db  0x00 ; '.'
0000000000220918         db  0x66 ; 'f'
0000000000220919         db  0x00 ; '.'
000000000022091a         db  0x00 ; '.'
000000000022091b         db  0x00 ; '.'
000000000022091c         db  0x00 ; '.'
000000000022091d         db  0x00 ; '.'
000000000022091e         db  0x00 ; '.'
000000000022091f         db  0x00 ; '.'
0000000000220920         db  0xf1 ; '.'
0000000000220921         db  0xb8 ; '.'
0000000000220922         db  0x01 ; '.'
0000000000220923         db  0x00 ; '.'
0000000000220924         db  0x00 ; '.'
0000000000220925         db  0x00 ; '.'
0000000000220926         db  0x00 ; '.'
0000000000220927         db  0x00 ; '.'
0000000000220928         db  0x01 ; '.'
0000000000220929         db  0x00 ; '.'
000000000022092a         db  0x00 ; '.'
000000000022092b         db  0x00 ; '.'
000000000022092c         db  0x00 ; '.'
000000000022092d         db  0x00 ; '.'
000000000022092e         db  0x00 ; '.'
000000000022092f         db  0x00 ; '.'
0000000000220930         db  0x00 ; '.'
0000000000220931         db  0x00 ; '.'
0000000000220932         db  0x00 ; '.'
0000000000220933         db  0x00 ; '.'
0000000000220934         db  0x00 ; '.'
0000000000220935         db  0x00 ; '.'
0000000000220936         db  0x00 ; '.'
0000000000220937         db  0x00 ; '.'
0000000000220938         db  0x67 ; 'g'
0000000000220939         db  0x00 ; '.'
000000000022093a         db  0x00 ; '.'
000000000022093b         db  0x00 ; '.'
000000000022093c         db  0x00 ; '.'
000000000022093d         db  0x00 ; '.'
000000000022093e         db  0x00 ; '.'
000000000022093f         db  0x00 ; '.'
0000000000220940         db  0xfa ; '.'
0000000000220941         db  0xb8 ; '.'
0000000000220942         db  0x01 ; '.'
0000000000220943         db  0x00 ; '.'
0000000000220944         db  0x00 ; '.'
0000000000220945         db  0x00 ; '.'
0000000000220946         db  0x00 ; '.'
0000000000220947         db  0x00 ; '.'
0000000000220948         db  0x01 ; '.'
0000000000220949         db  0x00 ; '.'
000000000022094a         db  0x00 ; '.'
000000000022094b         db  0x00 ; '.'
000000000022094c         db  0x00 ; '.'
000000000022094d         db  0x00 ; '.'
000000000022094e         db  0x00 ; '.'
000000000022094f         db  0x00 ; '.'
0000000000220950         db  0x00 ; '.'
0000000000220951         db  0x00 ; '.'
0000000000220952         db  0x00 ; '.'
0000000000220953         db  0x00 ; '.'
0000000000220954         db  0x00 ; '.'
0000000000220955         db  0x00 ; '.'
0000000000220956         db  0x00 ; '.'
0000000000220957         db  0x00 ; '.'
0000000000220958         db  0x69 ; 'i'
0000000000220959         db  0x00 ; '.'
000000000022095a         db  0x00 ; '.'
000000000022095b         db  0x00 ; '.'
000000000022095c         db  0x00 ; '.'
000000000022095d         db  0x00 ; '.'
000000000022095e         db  0x00 ; '.'
000000000022095f         db  0x00 ; '.'
0000000000220960         db  0x06 ; '.'
0000000000220961         db  0xb9 ; '.'
0000000000220962         db  0x01 ; '.'
0000000000220963         db  0x00 ; '.'
0000000000220964         db  0x00 ; '.'
0000000000220965         db  0x00 ; '.'
0000000000220966         db  0x00 ; '.'
0000000000220967         db  0x00 ; '.'
0000000000220968         db  0x01 ; '.'
0000000000220969         db  0x00 ; '.'
000000000022096a         db  0x00 ; '.'
000000000022096b         db  0x00 ; '.'
000000000022096c         db  0x00 ; '.'
000000000022096d         db  0x00 ; '.'
000000000022096e         db  0x00 ; '.'
000000000022096f         db  0x00 ; '.'
0000000000220970         db  0x00 ; '.'
0000000000220971         db  0x00 ; '.'
0000000000220972         db  0x00 ; '.'
0000000000220973         db  0x00 ; '.'
0000000000220974         db  0x00 ; '.'
0000000000220975         db  0x00 ; '.'
0000000000220976         db  0x00 ; '.'
0000000000220977         db  0x00 ; '.'
0000000000220978         db  0x4d ; 'M'
0000000000220979         db  0x00 ; '.'
000000000022097a         db  0x00 ; '.'
000000000022097b         db  0x00 ; '.'
000000000022097c         db  0x00 ; '.'
000000000022097d         db  0x00 ; '.'
000000000022097e         db  0x00 ; '.'
000000000022097f         db  0x00 ; '.'
0000000000220980         db  0x11 ; '.'
0000000000220981         db  0xb9 ; '.'
0000000000220982         db  0x01 ; '.'
0000000000220983         db  0x00 ; '.'
0000000000220984         db  0x00 ; '.'
0000000000220985         db  0x00 ; '.'
0000000000220986         db  0x00 ; '.'
0000000000220987         db  0x00 ; '.'
0000000000220988         db  0x01 ; '.'
0000000000220989         db  0x00 ; '.'
000000000022098a         db  0x00 ; '.'
000000000022098b         db  0x00 ; '.'
000000000022098c         db  0x00 ; '.'
000000000022098d         db  0x00 ; '.'
000000000022098e         db  0x00 ; '.'
000000000022098f         db  0x00 ; '.'
0000000000220990         db  0x00 ; '.'
0000000000220991         db  0x00 ; '.'
0000000000220992         db  0x00 ; '.'
0000000000220993         db  0x00 ; '.'
0000000000220994         db  0x00 ; '.'
0000000000220995         db  0x00 ; '.'
0000000000220996         db  0x00 ; '.'
0000000000220997         db  0x00 ; '.'
0000000000220998         db  0x6f ; 'o'
0000000000220999         db  0x00 ; '.'
000000000022099a         db  0x00 ; '.'
000000000022099b         db  0x00 ; '.'
000000000022099c         db  0x00 ; '.'
000000000022099d         db  0x00 ; '.'
000000000022099e         db  0x00 ; '.'
000000000022099f         db  0x00 ; '.'
00000000002209a0         db  0x1b ; '.'
00000000002209a1         db  0xb9 ; '.'
00000000002209a2         db  0x01 ; '.'
00000000002209a3         db  0x00 ; '.'
00000000002209a4         db  0x00 ; '.'
00000000002209a5         db  0x00 ; '.'
00000000002209a6         db  0x00 ; '.'
00000000002209a7         db  0x00 ; '.'
00000000002209a8         db  0x00 ; '.'
00000000002209a9         db  0x00 ; '.'
00000000002209aa         db  0x00 ; '.'
00000000002209ab         db  0x00 ; '.'
00000000002209ac         db  0x00 ; '.'
00000000002209ad         db  0x00 ; '.'
00000000002209ae         db  0x00 ; '.'
00000000002209af         db  0x00 ; '.'
00000000002209b0         db  0x00 ; '.'
00000000002209b1         db  0x00 ; '.'
00000000002209b2         db  0x00 ; '.'
00000000002209b3         db  0x00 ; '.'
00000000002209b4         db  0x00 ; '.'
00000000002209b5         db  0x00 ; '.'
00000000002209b6         db  0x00 ; '.'
00000000002209b7         db  0x00 ; '.'
00000000002209b8         db  0x72 ; 'r'
00000000002209b9         db  0x00 ; '.'
00000000002209ba         db  0x00 ; '.'
00000000002209bb         db  0x00 ; '.'
00000000002209bc         db  0x00 ; '.'
00000000002209bd         db  0x00 ; '.'
00000000002209be         db  0x00 ; '.'
00000000002209bf         db  0x00 ; '.'
00000000002209c0         db  0x26 ; '&'
00000000002209c1         db  0xb9 ; '.'
00000000002209c2         db  0x01 ; '.'
00000000002209c3         db  0x00 ; '.'
00000000002209c4         db  0x00 ; '.'
00000000002209c5         db  0x00 ; '.'
00000000002209c6         db  0x00 ; '.'
00000000002209c7         db  0x00 ; '.'
00000000002209c8         db  0x00 ; '.'
00000000002209c9         db  0x00 ; '.'
00000000002209ca         db  0x00 ; '.'
00000000002209cb         db  0x00 ; '.'
00000000002209cc         db  0x00 ; '.'
00000000002209cd         db  0x00 ; '.'
00000000002209ce         db  0x00 ; '.'
00000000002209cf         db  0x00 ; '.'
00000000002209d0         db  0x00 ; '.'
00000000002209d1         db  0x00 ; '.'
00000000002209d2         db  0x00 ; '.'
00000000002209d3         db  0x00 ; '.'
00000000002209d4         db  0x00 ; '.'
00000000002209d5         db  0x00 ; '.'
00000000002209d6         db  0x00 ; '.'
00000000002209d7         db  0x00 ; '.'
00000000002209d8         db  0x52 ; 'R'
00000000002209d9         db  0x00 ; '.'
00000000002209da         db  0x00 ; '.'
00000000002209db         db  0x00 ; '.'
00000000002209dc         db  0x00 ; '.'
00000000002209dd         db  0x00 ; '.'
00000000002209de         db  0x00 ; '.'
00000000002209df         db  0x00 ; '.'
00000000002209e0         db  0x4f ; 'O'
00000000002209e1         db  0xb8 ; '.'
00000000002209e2         db  0x01 ; '.'
00000000002209e3         db  0x00 ; '.'
00000000002209e4         db  0x00 ; '.'
00000000002209e5         db  0x00 ; '.'
00000000002209e6         db  0x00 ; '.'
00000000002209e7         db  0x00 ; '.'
00000000002209e8         db  0x01 ; '.'
00000000002209e9         db  0x00 ; '.'
00000000002209ea         db  0x00 ; '.'
00000000002209eb         db  0x00 ; '.'
00000000002209ec         db  0x00 ; '.'
00000000002209ed         db  0x00 ; '.'
00000000002209ee         db  0x00 ; '.'
00000000002209ef         db  0x00 ; '.'
00000000002209f0         db  0x00 ; '.'
00000000002209f1         db  0x00 ; '.'
00000000002209f2         db  0x00 ; '.'
00000000002209f3         db  0x00 ; '.'
00000000002209f4         db  0x00 ; '.'
00000000002209f5         db  0x00 ; '.'
00000000002209f6         db  0x00 ; '.'
00000000002209f7         db  0x00 ; '.'
00000000002209f8         db  0x0a ; '.'
00000000002209f9         db  0x00 ; '.'
00000000002209fa         db  0x00 ; '.'
00000000002209fb         db  0x00 ; '.'
00000000002209fc         db  0x00 ; '.'
00000000002209fd         db  0x00 ; '.'
00000000002209fe         db  0x00 ; '.'
00000000002209ff         db  0x00 ; '.'
0000000000220a00         db  0x36 ; '6'
0000000000220a01         db  0xb9 ; '.'
0000000000220a02         db  0x01 ; '.'
0000000000220a03         db  0x00 ; '.'
0000000000220a04         db  0x00 ; '.'
0000000000220a05         db  0x00 ; '.'
0000000000220a06         db  0x00 ; '.'
0000000000220a07         db  0x00 ; '.'
0000000000220a08         db  0x01 ; '.'
0000000000220a09         db  0x00 ; '.'
0000000000220a0a         db  0x00 ; '.'
0000000000220a0b         db  0x00 ; '.'
0000000000220a0c         db  0x00 ; '.'
0000000000220a0d         db  0x00 ; '.'
0000000000220a0e         db  0x00 ; '.'
0000000000220a0f         db  0x00 ; '.'
0000000000220a10         db  0x00 ; '.'
0000000000220a11         db  0x00 ; '.'
0000000000220a12         db  0x00 ; '.'
0000000000220a13         db  0x00 ; '.'
0000000000220a14         db  0x00 ; '.'
0000000000220a15         db  0x00 ; '.'
0000000000220a16         db  0x00 ; '.'
0000000000220a17         db  0x00 ; '.'
0000000000220a18         db  0x53 ; 'S'
0000000000220a19         db  0x00 ; '.'
0000000000220a1a         db  0x00 ; '.'
0000000000220a1b         db  0x00 ; '.'
0000000000220a1c         db  0x00 ; '.'
0000000000220a1d         db  0x00 ; '.'
0000000000220a1e         db  0x00 ; '.'
0000000000220a1f         db  0x00 ; '.'
0000000000220a20         db  0x46 ; 'F'
0000000000220a21         db  0xb9 ; '.'
0000000000220a22         db  0x01 ; '.'
0000000000220a23         db  0x00 ; '.'
0000000000220a24         db  0x00 ; '.'
0000000000220a25         db  0x00 ; '.'
0000000000220a26         db  0x00 ; '.'
0000000000220a27         db  0x00 ; '.'
0000000000220a28         db  0x00 ; '.'
0000000000220a29         db  0x00 ; '.'
0000000000220a2a         db  0x00 ; '.'
0000000000220a2b         db  0x00 ; '.'
0000000000220a2c         db  0x00 ; '.'
0000000000220a2d         db  0x00 ; '.'
0000000000220a2e         db  0x00 ; '.'
0000000000220a2f         db  0x00 ; '.'
0000000000220a30         db  0x00 ; '.'
0000000000220a31         db  0x00 ; '.'
0000000000220a32         db  0x00 ; '.'
0000000000220a33         db  0x00 ; '.'
0000000000220a34         db  0x00 ; '.'
0000000000220a35         db  0x00 ; '.'
0000000000220a36         db  0x00 ; '.'
0000000000220a37         db  0x00 ; '.'
0000000000220a38         db  0x47 ; 'G'
0000000000220a39         db  0x00 ; '.'
0000000000220a3a         db  0x00 ; '.'
0000000000220a3b         db  0x00 ; '.'
0000000000220a3c         db  0x00 ; '.'
0000000000220a3d         db  0x00 ; '.'
0000000000220a3e         db  0x00 ; '.'
0000000000220a3f         db  0x00 ; '.'
0000000000220a40         db  0x52 ; 'R'
0000000000220a41         db  0xb9 ; '.'
0000000000220a42         db  0x01 ; '.'
0000000000220a43         db  0x00 ; '.'
0000000000220a44         db  0x00 ; '.'
0000000000220a45         db  0x00 ; '.'
0000000000220a46         db  0x00 ; '.'
0000000000220a47         db  0x00 ; '.'
0000000000220a48         db  0x00 ; '.'
0000000000220a49         db  0x00 ; '.'
0000000000220a4a         db  0x00 ; '.'
0000000000220a4b         db  0x00 ; '.'
0000000000220a4c         db  0x00 ; '.'
0000000000220a4d         db  0x00 ; '.'
0000000000220a4e         db  0x00 ; '.'
0000000000220a4f         db  0x00 ; '.'
0000000000220a50         db  0x00 ; '.'
0000000000220a51         db  0x00 ; '.'
0000000000220a52         db  0x00 ; '.'
0000000000220a53         db  0x00 ; '.'
0000000000220a54         db  0x00 ; '.'
0000000000220a55         db  0x00 ; '.'
0000000000220a56         db  0x00 ; '.'
0000000000220a57         db  0x00 ; '.'
0000000000220a58         db  0x74 ; 't'
0000000000220a59         db  0x00 ; '.'
0000000000220a5a         db  0x00 ; '.'
0000000000220a5b         db  0x00 ; '.'
0000000000220a5c         db  0x00 ; '.'
0000000000220a5d         db  0x00 ; '.'
0000000000220a5e         db  0x00 ; '.'
0000000000220a5f         db  0x00 ; '.'
0000000000220a60         db  0x5f ; '_'
0000000000220a61         db  0xb9 ; '.'
0000000000220a62         db  0x01 ; '.'
0000000000220a63         db  0x00 ; '.'
0000000000220a64         db  0x00 ; '.'
0000000000220a65         db  0x00 ; '.'
0000000000220a66         db  0x00 ; '.'
0000000000220a67         db  0x00 ; '.'
0000000000220a68         db  0x01 ; '.'
0000000000220a69         db  0x00 ; '.'
0000000000220a6a         db  0x00 ; '.'
0000000000220a6b         db  0x00 ; '.'
0000000000220a6c         db  0x00 ; '.'
0000000000220a6d         db  0x00 ; '.'
0000000000220a6e         db  0x00 ; '.'
0000000000220a6f         db  0x00 ; '.'
0000000000220a70         db  0x00 ; '.'
0000000000220a71         db  0x00 ; '.'
0000000000220a72         db  0x00 ; '.'
0000000000220a73         db  0x00 ; '.'
0000000000220a74         db  0x00 ; '.'
0000000000220a75         db  0x00 ; '.'
0000000000220a76         db  0x00 ; '.'
0000000000220a77         db  0x00 ; '.'
0000000000220a78         db  0x77 ; 'w'
0000000000220a79         db  0x00 ; '.'
0000000000220a7a         db  0x00 ; '.'
0000000000220a7b         db  0x00 ; '.'
0000000000220a7c         db  0x00 ; '.'
0000000000220a7d         db  0x00 ; '.'
0000000000220a7e         db  0x00 ; '.'
0000000000220a7f         db  0x00 ; '.'
0000000000220a80         db  0x65 ; 'e'
0000000000220a81         db  0xb9 ; '.'
0000000000220a82         db  0x01 ; '.'
0000000000220a83         db  0x00 ; '.'
0000000000220a84         db  0x00 ; '.'
0000000000220a85         db  0x00 ; '.'
0000000000220a86         db  0x00 ; '.'
0000000000220a87         db  0x00 ; '.'
0000000000220a88         db  0x01 ; '.'
0000000000220a89         db  0x00 ; '.'
0000000000220a8a         db  0x00 ; '.'
0000000000220a8b         db  0x00 ; '.'
0000000000220a8c         db  0x00 ; '.'
0000000000220a8d         db  0x00 ; '.'
0000000000220a8e         db  0x00 ; '.'
0000000000220a8f         db  0x00 ; '.'
0000000000220a90         db  0x00 ; '.'
0000000000220a91         db  0x00 ; '.'
0000000000220a92         db  0x00 ; '.'
0000000000220a93         db  0x00 ; '.'
0000000000220a94         db  0x00 ; '.'
0000000000220a95         db  0x00 ; '.'
0000000000220a96         db  0x00 ; '.'
0000000000220a97         db  0x00 ; '.'
0000000000220a98         db  0x57 ; 'W'
0000000000220a99         db  0x00 ; '.'
0000000000220a9a         db  0x00 ; '.'
0000000000220a9b         db  0x00 ; '.'
0000000000220a9c         db  0x00 ; '.'
0000000000220a9d         db  0x00 ; '.'
0000000000220a9e         db  0x00 ; '.'
0000000000220a9f         db  0x00 ; '.'
0000000000220aa0         db  0x71 ; 'q'
0000000000220aa1         db  0xb9 ; '.'
0000000000220aa2         db  0x01 ; '.'
0000000000220aa3         db  0x00 ; '.'
0000000000220aa4         db  0x00 ; '.'
0000000000220aa5         db  0x00 ; '.'
0000000000220aa6         db  0x00 ; '.'
0000000000220aa7         db  0x00 ; '.'
0000000000220aa8         db  0x00 ; '.'
0000000000220aa9         db  0x00 ; '.'
0000000000220aaa         db  0x00 ; '.'
0000000000220aab         db  0x00 ; '.'
0000000000220aac         db  0x00 ; '.'
0000000000220aad         db  0x00 ; '.'
0000000000220aae         db  0x00 ; '.'
0000000000220aaf         db  0x00 ; '.'
0000000000220ab0         db  0x00 ; '.'
0000000000220ab1         db  0x00 ; '.'
0000000000220ab2         db  0x00 ; '.'
0000000000220ab3         db  0x00 ; '.'
0000000000220ab4         db  0x00 ; '.'
0000000000220ab5         db  0x00 ; '.'
0000000000220ab6         db  0x00 ; '.'
0000000000220ab7         db  0x00 ; '.'
0000000000220ab8         db  0x7e ; '~'
0000000000220ab9         db  0xff ; '.'
0000000000220aba         db  0xff ; '.'
0000000000220abb         db  0xff ; '.'
0000000000220abc         db  0x00 ; '.'
0000000000220abd         db  0x00 ; '.'
0000000000220abe         db  0x00 ; '.'
0000000000220abf         db  0x00 ; '.'
0000000000220ac0         db  0x76 ; 'v'
0000000000220ac1         db  0xb9 ; '.'
0000000000220ac2         db  0x01 ; '.'
0000000000220ac3         db  0x00 ; '.'
0000000000220ac4         db  0x00 ; '.'
0000000000220ac5         db  0x00 ; '.'
0000000000220ac6         db  0x00 ; '.'
0000000000220ac7         db  0x00 ; '.'
0000000000220ac8         db  0x00 ; '.'
0000000000220ac9         db  0x00 ; '.'
0000000000220aca         db  0x00 ; '.'
0000000000220acb         db  0x00 ; '.'
0000000000220acc         db  0x00 ; '.'
0000000000220acd         db  0x00 ; '.'
0000000000220ace         db  0x00 ; '.'
0000000000220acf         db  0x00 ; '.'
0000000000220ad0         db  0x00 ; '.'
0000000000220ad1         db  0x00 ; '.'
0000000000220ad2         db  0x00 ; '.'
0000000000220ad3         db  0x00 ; '.'
0000000000220ad4         db  0x00 ; '.'
0000000000220ad5         db  0x00 ; '.'
0000000000220ad6         db  0x00 ; '.'
0000000000220ad7         db  0x00 ; '.'
0000000000220ad8         db  0x7d ; '}'
0000000000220ad9         db  0xff ; '.'
0000000000220ada         db  0xff ; '.'
0000000000220adb         db  0xff ; '.'
0000000000220adc         db  0x00 ; '.'
0000000000220add         db  0x00 ; '.'
0000000000220ade         db  0x00 ; '.'
0000000000220adf         db  0x00 ; '.'
0000000000220ae0         db  0x00 ; '.'
0000000000220ae1         db  0x00 ; '.'
0000000000220ae2         db  0x00 ; '.'
0000000000220ae3         db  0x00 ; '.'
0000000000220ae4         db  0x00 ; '.'
0000000000220ae5         db  0x00 ; '.'
0000000000220ae6         db  0x00 ; '.'
0000000000220ae7         db  0x00 ; '.'
0000000000220ae8         db  0x00 ; '.'
0000000000220ae9         db  0x00 ; '.'
0000000000220aea         db  0x00 ; '.'
0000000000220aeb         db  0x00 ; '.'
0000000000220aec         db  0x00 ; '.'
0000000000220aed         db  0x00 ; '.'
0000000000220aee         db  0x00 ; '.'
0000000000220aef         db  0x00 ; '.'
0000000000220af0         db  0x00 ; '.'
0000000000220af1         db  0x00 ; '.'
0000000000220af2         db  0x00 ; '.'
0000000000220af3         db  0x00 ; '.'
0000000000220af4         db  0x00 ; '.'
0000000000220af5         db  0x00 ; '.'
0000000000220af6         db  0x00 ; '.'
0000000000220af7         db  0x00 ; '.'
0000000000220af8         db  0x00 ; '.'
0000000000220af9         db  0x00 ; '.'
0000000000220afa         db  0x00 ; '.'
0000000000220afb         db  0x00 ; '.'
0000000000220afc         db  0x00 ; '.'
0000000000220afd         db  0x00 ; '.'
0000000000220afe         db  0x00 ; '.'
0000000000220aff         db  0x00 ; '.'
                     quoting_style_args:
0000000000220b00         db  0x34 ; '4'
0000000000220b01         db  0xbd ; '.'
0000000000220b02         db  0x01 ; '.'
0000000000220b03         db  0x00 ; '.'
0000000000220b04         db  0x00 ; '.'
0000000000220b05         db  0x00 ; '.'
0000000000220b06         db  0x00 ; '.'
0000000000220b07         db  0x00 ; '.'
0000000000220b08         db  0x3c ; '<'
0000000000220b09         db  0xbd ; '.'
0000000000220b0a         db  0x01 ; '.'
0000000000220b0b         db  0x00 ; '.'
0000000000220b0c         db  0x00 ; '.'
0000000000220b0d         db  0x00 ; '.'
0000000000220b0e         db  0x00 ; '.'
0000000000220b0f         db  0x00 ; '.'
0000000000220b10         db  0x42 ; 'B'
0000000000220b11         db  0xbd ; '.'
0000000000220b12         db  0x01 ; '.'
0000000000220b13         db  0x00 ; '.'
0000000000220b14         db  0x00 ; '.'
0000000000220b15         db  0x00 ; '.'
0000000000220b16         db  0x00 ; '.'
0000000000220b17         db  0x00 ; '.'
0000000000220b18         db  0x4f ; 'O'
0000000000220b19         db  0xbd ; '.'
0000000000220b1a         db  0x01 ; '.'
0000000000220b1b         db  0x00 ; '.'
0000000000220b1c         db  0x00 ; '.'
0000000000220b1d         db  0x00 ; '.'
0000000000220b1e         db  0x00 ; '.'
0000000000220b1f         db  0x00 ; '.'
0000000000220b20         db  0x5c ; '\'
0000000000220b21         db  0xbd ; '.'
0000000000220b22         db  0x01 ; '.'
0000000000220b23         db  0x00 ; '.'
0000000000220b24         db  0x00 ; '.'
0000000000220b25         db  0x00 ; '.'
0000000000220b26         db  0x00 ; '.'
0000000000220b27         db  0x00 ; '.'
0000000000220b28         db  0x1f ; '.'
0000000000220b29         db  0xb7 ; '.'
0000000000220b2a         db  0x01 ; '.'
0000000000220b2b         db  0x00 ; '.'
0000000000220b2c         db  0x00 ; '.'
0000000000220b2d         db  0x00 ; '.'
0000000000220b2e         db  0x00 ; '.'
0000000000220b2f         db  0x00 ; '.'
0000000000220b30         db  0x70 ; 'p'
0000000000220b31         db  0xbd ; '.'
0000000000220b32         db  0x01 ; '.'
0000000000220b33         db  0x00 ; '.'
0000000000220b34         db  0x00 ; '.'
0000000000220b35         db  0x00 ; '.'
0000000000220b36         db  0x00 ; '.'
0000000000220b37         db  0x00 ; '.'
0000000000220b38         db  0x55 ; 'U'
0000000000220b39         db  0xbd ; '.'
0000000000220b3a         db  0x01 ; '.'
0000000000220b3b         db  0x00 ; '.'
0000000000220b3c         db  0x00 ; '.'
0000000000220b3d         db  0x00 ; '.'
0000000000220b3e         db  0x00 ; '.'
0000000000220b3f         db  0x00 ; '.'
0000000000220b40         db  0x19 ; '.'
0000000000220b41         db  0xb8 ; '.'
0000000000220b42         db  0x01 ; '.'
0000000000220b43         db  0x00 ; '.'
0000000000220b44         db  0x00 ; '.'
0000000000220b45         db  0x00 ; '.'
0000000000220b46         db  0x00 ; '.'
0000000000220b47         db  0x00 ; '.'
0000000000220b48         db  0x78 ; 'x'
0000000000220b49         db  0xbd ; '.'
0000000000220b4a         db  0x01 ; '.'
0000000000220b4b         db  0x00 ; '.'
0000000000220b4c         db  0x00 ; '.'
0000000000220b4d         db  0x00 ; '.'
0000000000220b4e         db  0x00 ; '.'
0000000000220b4f         db  0x00 ; '.'
0000000000220b50         db  0x00 ; '.'
0000000000220b51         db  0x00 ; '.'
0000000000220b52         db  0x00 ; '.'
0000000000220b53         db  0x00 ; '.'
0000000000220b54         db  0x00 ; '.'
0000000000220b55         db  0x00 ; '.'
0000000000220b56         db  0x00 ; '.'
0000000000220b57         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x220b58; 0x220d48[ (496 bytes)
        ; File offset : [133976; 134472[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
0000000000220b58         db  0x01 ; '.'
0000000000220b59         db  0x00 ; '.'
0000000000220b5a         db  0x00 ; '.'
0000000000220b5b         db  0x00 ; '.'
0000000000220b5c         db  0x00 ; '.'
0000000000220b5d         db  0x00 ; '.'
0000000000220b5e         db  0x00 ; '.'
0000000000220b5f         db  0x00 ; '.'
0000000000220b60         db  0x01 ; '.'
0000000000220b61         db  0x00 ; '.'
0000000000220b62         db  0x00 ; '.'
0000000000220b63         db  0x00 ; '.'
0000000000220b64         db  0x00 ; '.'
0000000000220b65         db  0x00 ; '.'
0000000000220b66         db  0x00 ; '.'
0000000000220b67         db  0x00 ; '.'
0000000000220b68         db  0x0c ; '.'
0000000000220b69         db  0x00 ; '.'
0000000000220b6a         db  0x00 ; '.'
0000000000220b6b         db  0x00 ; '.'
0000000000220b6c         db  0x00 ; '.'
0000000000220b6d         db  0x00 ; '.'
0000000000220b6e         db  0x00 ; '.'
0000000000220b6f         db  0x00 ; '.'
0000000000220b70         db  0x28 ; '('
0000000000220b71         db  0x1c ; '.'
0000000000220b72         db  0x00 ; '.'
0000000000220b73         db  0x00 ; '.'
0000000000220b74         db  0x00 ; '.'
0000000000220b75         db  0x00 ; '.'
0000000000220b76         db  0x00 ; '.'
0000000000220b77         db  0x00 ; '.'
0000000000220b78         db  0x0d ; '.'
0000000000220b79         db  0x00 ; '.'
0000000000220b7a         db  0x00 ; '.'
0000000000220b7b         db  0x00 ; '.'
0000000000220b7c         db  0x00 ; '.'
0000000000220b7d         db  0x00 ; '.'
0000000000220b7e         db  0x00 ; '.'
0000000000220b7f         db  0x00 ; '.'
0000000000220b80         db  0xe0 ; '.'
0000000000220b81         db  0xae ; '.'
0000000000220b82         db  0x01 ; '.'
0000000000220b83         db  0x00 ; '.'
0000000000220b84         db  0x00 ; '.'
0000000000220b85         db  0x00 ; '.'
0000000000220b86         db  0x00 ; '.'
0000000000220b87         db  0x00 ; '.'
0000000000220b88         db  0x19 ; '.'
0000000000220b89         db  0x00 ; '.'
0000000000220b8a         db  0x00 ; '.'
0000000000220b8b         db  0x00 ; '.'
0000000000220b8c         db  0x00 ; '.'
0000000000220b8d         db  0x00 ; '.'
0000000000220b8e         db  0x00 ; '.'
0000000000220b8f         db  0x00 ; '.'
0000000000220b90         db  0x70 ; 'p'
0000000000220b91         db  0x08 ; '.'
0000000000220b92         db  0x22 ; '"'
0000000000220b93         db  0x00 ; '.'
0000000000220b94         db  0x00 ; '.'
0000000000220b95         db  0x00 ; '.'
0000000000220b96         db  0x00 ; '.'
0000000000220b97         db  0x00 ; '.'
0000000000220b98         db  0x1b ; '.'
0000000000220b99         db  0x00 ; '.'
0000000000220b9a         db  0x00 ; '.'
0000000000220b9b         db  0x00 ; '.'
0000000000220b9c         db  0x00 ; '.'
0000000000220b9d         db  0x00 ; '.'
0000000000220b9e         db  0x00 ; '.'
0000000000220b9f         db  0x00 ; '.'
0000000000220ba0         db  0x08 ; '.'
0000000000220ba1         db  0x00 ; '.'
0000000000220ba2         db  0x00 ; '.'
0000000000220ba3         db  0x00 ; '.'
0000000000220ba4         db  0x00 ; '.'
0000000000220ba5         db  0x00 ; '.'
0000000000220ba6         db  0x00 ; '.'
0000000000220ba7         db  0x00 ; '.'
0000000000220ba8         db  0x1a ; '.'
0000000000220ba9         db  0x00 ; '.'
0000000000220baa         db  0x00 ; '.'
0000000000220bab         db  0x00 ; '.'
0000000000220bac         db  0x00 ; '.'
0000000000220bad         db  0x00 ; '.'
0000000000220bae         db  0x00 ; '.'
0000000000220baf         db  0x00 ; '.'
0000000000220bb0         db  0x78 ; 'x'
0000000000220bb1         db  0x08 ; '.'
0000000000220bb2         db  0x22 ; '"'
0000000000220bb3         db  0x00 ; '.'
0000000000220bb4         db  0x00 ; '.'
0000000000220bb5         db  0x00 ; '.'
0000000000220bb6         db  0x00 ; '.'
0000000000220bb7         db  0x00 ; '.'
0000000000220bb8         db  0x1c ; '.'
0000000000220bb9         db  0x00 ; '.'
0000000000220bba         db  0x00 ; '.'
0000000000220bbb         db  0x00 ; '.'
0000000000220bbc         db  0x00 ; '.'
0000000000220bbd         db  0x00 ; '.'
0000000000220bbe         db  0x00 ; '.'
0000000000220bbf         db  0x00 ; '.'
0000000000220bc0         db  0x08 ; '.'
0000000000220bc1         db  0x00 ; '.'
0000000000220bc2         db  0x00 ; '.'
0000000000220bc3         db  0x00 ; '.'
0000000000220bc4         db  0x00 ; '.'
0000000000220bc5         db  0x00 ; '.'
0000000000220bc6         db  0x00 ; '.'
0000000000220bc7         db  0x00 ; '.'
0000000000220bc8         db  0xf5 ; '.'
0000000000220bc9         db  0xfe ; '.'
0000000000220bca         db  0xff ; '.'
0000000000220bcb         db  0x6f ; 'o'
0000000000220bcc         db  0x00 ; '.'
0000000000220bcd         db  0x00 ; '.'
0000000000220bce         db  0x00 ; '.'
0000000000220bcf         db  0x00 ; '.'
0000000000220bd0         db  0x98 ; '.'
0000000000220bd1         db  0x02 ; '.'
0000000000220bd2         db  0x00 ; '.'
0000000000220bd3         db  0x00 ; '.'
0000000000220bd4         db  0x00 ; '.'
0000000000220bd5         db  0x00 ; '.'
0000000000220bd6         db  0x00 ; '.'
0000000000220bd7         db  0x00 ; '.'
0000000000220bd8         db  0x05 ; '.'
0000000000220bd9         db  0x00 ; '.'
0000000000220bda         db  0x00 ; '.'
0000000000220bdb         db  0x00 ; '.'
0000000000220bdc         db  0x00 ; '.'
0000000000220bdd         db  0x00 ; '.'
0000000000220bde         db  0x00 ; '.'
0000000000220bdf         db  0x00 ; '.'
0000000000220be0         db  0x68 ; 'h'
0000000000220be1         db  0x0b ; '.'
0000000000220be2         db  0x00 ; '.'
0000000000220be3         db  0x00 ; '.'
0000000000220be4         db  0x00 ; '.'
0000000000220be5         db  0x00 ; '.'
0000000000220be6         db  0x00 ; '.'
0000000000220be7         db  0x00 ; '.'
0000000000220be8         db  0x06 ; '.'
0000000000220be9         db  0x00 ; '.'
0000000000220bea         db  0x00 ; '.'
0000000000220beb         db  0x00 ; '.'
0000000000220bec         db  0x00 ; '.'
0000000000220bed         db  0x00 ; '.'
0000000000220bee         db  0x00 ; '.'
0000000000220bef         db  0x00 ; '.'
0000000000220bf0         db  0xe0 ; '.'
0000000000220bf1         db  0x02 ; '.'
0000000000220bf2         db  0x00 ; '.'
0000000000220bf3         db  0x00 ; '.'
0000000000220bf4         db  0x00 ; '.'
0000000000220bf5         db  0x00 ; '.'
0000000000220bf6         db  0x00 ; '.'
0000000000220bf7         db  0x00 ; '.'
0000000000220bf8         db  0x0a ; '.'
0000000000220bf9         db  0x00 ; '.'
0000000000220bfa         db  0x00 ; '.'
0000000000220bfb         db  0x00 ; '.'
0000000000220bfc         db  0x00 ; '.'
0000000000220bfd         db  0x00 ; '.'
0000000000220bfe         db  0x00 ; '.'
0000000000220bff         db  0x00 ; '.'
0000000000220c00         db  0xc2 ; '.'
0000000000220c01         db  0x03 ; '.'
0000000000220c02         db  0x00 ; '.'
0000000000220c03         db  0x00 ; '.'
0000000000220c04         db  0x00 ; '.'
0000000000220c05         db  0x00 ; '.'
0000000000220c06         db  0x00 ; '.'
0000000000220c07         db  0x00 ; '.'
0000000000220c08         db  0x0b ; '.'
0000000000220c09         db  0x00 ; '.'
0000000000220c0a         db  0x00 ; '.'
0000000000220c0b         db  0x00 ; '.'
0000000000220c0c         db  0x00 ; '.'
0000000000220c0d         db  0x00 ; '.'
0000000000220c0e         db  0x00 ; '.'
0000000000220c0f         db  0x00 ; '.'
0000000000220c10         db  0x18 ; '.'
0000000000220c11         db  0x00 ; '.'
0000000000220c12         db  0x00 ; '.'
0000000000220c13         db  0x00 ; '.'
0000000000220c14         db  0x00 ; '.'
0000000000220c15         db  0x00 ; '.'
0000000000220c16         db  0x00 ; '.'
0000000000220c17         db  0x00 ; '.'
0000000000220c18         db  0x15 ; '.'
0000000000220c19         db  0x00 ; '.'
0000000000220c1a         db  0x00 ; '.'
0000000000220c1b         db  0x00 ; '.'
0000000000220c1c         db  0x00 ; '.'
0000000000220c1d         db  0x00 ; '.'
0000000000220c1e         db  0x00 ; '.'
0000000000220c1f         db  0x00 ; '.'
0000000000220c20         db  0x00 ; '.'
0000000000220c21         db  0x00 ; '.'
0000000000220c22         db  0x00 ; '.'
0000000000220c23         db  0x00 ; '.'
0000000000220c24         db  0x00 ; '.'
0000000000220c25         db  0x00 ; '.'
0000000000220c26         db  0x00 ; '.'
0000000000220c27         db  0x00 ; '.'
0000000000220c28         db  0x03 ; '.'
0000000000220c29         db  0x00 ; '.'
0000000000220c2a         db  0x00 ; '.'
0000000000220c2b         db  0x00 ; '.'
0000000000220c2c         db  0x00 ; '.'
0000000000220c2d         db  0x00 ; '.'
0000000000220c2e         db  0x00 ; '.'
0000000000220c2f         db  0x00 ; '.'
0000000000220c30         db  0x48 ; 'H'
0000000000220c31         db  0x0d ; '.'
0000000000220c32         db  0x22 ; '"'
0000000000220c33         db  0x00 ; '.'
0000000000220c34         db  0x00 ; '.'
0000000000220c35         db  0x00 ; '.'
0000000000220c36         db  0x00 ; '.'
0000000000220c37         db  0x00 ; '.'
0000000000220c38         db  0x02 ; '.'
0000000000220c39         db  0x00 ; '.'
0000000000220c3a         db  0x00 ; '.'
0000000000220c3b         db  0x00 ; '.'
0000000000220c3c         db  0x00 ; '.'
0000000000220c3d         db  0x00 ; '.'
0000000000220c3e         db  0x00 ; '.'
0000000000220c3f         db  0x00 ; '.'
0000000000220c40         db  0x20 ; ' '
0000000000220c41         db  0x07 ; '.'
0000000000220c42         db  0x00 ; '.'
0000000000220c43         db  0x00 ; '.'
0000000000220c44         db  0x00 ; '.'
0000000000220c45         db  0x00 ; '.'
0000000000220c46         db  0x00 ; '.'
0000000000220c47         db  0x00 ; '.'
0000000000220c48         db  0x14 ; '.'
0000000000220c49         db  0x00 ; '.'
0000000000220c4a         db  0x00 ; '.'
0000000000220c4b         db  0x00 ; '.'
0000000000220c4c         db  0x00 ; '.'
0000000000220c4d         db  0x00 ; '.'
0000000000220c4e         db  0x00 ; '.'
0000000000220c4f         db  0x00 ; '.'
0000000000220c50         db  0x07 ; '.'
0000000000220c51         db  0x00 ; '.'
0000000000220c52         db  0x00 ; '.'
0000000000220c53         db  0x00 ; '.'
0000000000220c54         db  0x00 ; '.'
0000000000220c55         db  0x00 ; '.'
0000000000220c56         db  0x00 ; '.'
0000000000220c57         db  0x00 ; '.'
0000000000220c58         db  0x17 ; '.'
0000000000220c59         db  0x00 ; '.'
0000000000220c5a         db  0x00 ; '.'
0000000000220c5b         db  0x00 ; '.'
0000000000220c5c         db  0x00 ; '.'
0000000000220c5d         db  0x00 ; '.'
0000000000220c5e         db  0x00 ; '.'
0000000000220c5f         db  0x00 ; '.'
0000000000220c60         db  0x08 ; '.'
0000000000220c61         db  0x15 ; '.'
0000000000220c62         db  0x00 ; '.'
0000000000220c63         db  0x00 ; '.'
0000000000220c64         db  0x00 ; '.'
0000000000220c65         db  0x00 ; '.'
0000000000220c66         db  0x00 ; '.'
0000000000220c67         db  0x00 ; '.'
0000000000220c68         db  0x07 ; '.'
0000000000220c69         db  0x00 ; '.'
0000000000220c6a         db  0x00 ; '.'
0000000000220c6b         db  0x00 ; '.'
0000000000220c6c         db  0x00 ; '.'
0000000000220c6d         db  0x00 ; '.'
0000000000220c6e         db  0x00 ; '.'
0000000000220c6f         db  0x00 ; '.'
0000000000220c70         db  0x40 ; '@'
0000000000220c71         db  0x10 ; '.'
0000000000220c72         db  0x00 ; '.'
0000000000220c73         db  0x00 ; '.'
0000000000220c74         db  0x00 ; '.'
0000000000220c75         db  0x00 ; '.'
0000000000220c76         db  0x00 ; '.'
0000000000220c77         db  0x00 ; '.'
0000000000220c78         db  0x08 ; '.'
0000000000220c79         db  0x00 ; '.'
0000000000220c7a         db  0x00 ; '.'
0000000000220c7b         db  0x00 ; '.'
0000000000220c7c         db  0x00 ; '.'
0000000000220c7d         db  0x00 ; '.'
0000000000220c7e         db  0x00 ; '.'
0000000000220c7f         db  0x00 ; '.'
0000000000220c80         db  0xc8 ; '.'
0000000000220c81         db  0x04 ; '.'
0000000000220c82         db  0x00 ; '.'
0000000000220c83         db  0x00 ; '.'
0000000000220c84         db  0x00 ; '.'
0000000000220c85         db  0x00 ; '.'
0000000000220c86         db  0x00 ; '.'
0000000000220c87         db  0x00 ; '.'
0000000000220c88         db  0x09 ; '.'
0000000000220c89         db  0x00 ; '.'
0000000000220c8a         db  0x00 ; '.'
0000000000220c8b         db  0x00 ; '.'
0000000000220c8c         db  0x00 ; '.'
0000000000220c8d         db  0x00 ; '.'
0000000000220c8e         db  0x00 ; '.'
0000000000220c8f         db  0x00 ; '.'
0000000000220c90         db  0x18 ; '.'
0000000000220c91         db  0x00 ; '.'
0000000000220c92         db  0x00 ; '.'
0000000000220c93         db  0x00 ; '.'
0000000000220c94         db  0x00 ; '.'
0000000000220c95         db  0x00 ; '.'
0000000000220c96         db  0x00 ; '.'
0000000000220c97         db  0x00 ; '.'
0000000000220c98         db  0x1e ; '.'
0000000000220c99         db  0x00 ; '.'
0000000000220c9a         db  0x00 ; '.'
0000000000220c9b         db  0x00 ; '.'
0000000000220c9c         db  0x00 ; '.'
0000000000220c9d         db  0x00 ; '.'
0000000000220c9e         db  0x00 ; '.'
0000000000220c9f         db  0x00 ; '.'
0000000000220ca0         db  0x08 ; '.'
0000000000220ca1         db  0x00 ; '.'
0000000000220ca2         db  0x00 ; '.'
0000000000220ca3         db  0x00 ; '.'
0000000000220ca4         db  0x00 ; '.'
0000000000220ca5         db  0x00 ; '.'
0000000000220ca6         db  0x00 ; '.'
0000000000220ca7         db  0x00 ; '.'
0000000000220ca8         db  0xfb ; '.'
0000000000220ca9         db  0xff ; '.'
0000000000220caa         db  0xff ; '.'
0000000000220cab         db  0x6f ; 'o'
0000000000220cac         db  0x00 ; '.'
0000000000220cad         db  0x00 ; '.'
0000000000220cae         db  0x00 ; '.'
0000000000220caf         db  0x00 ; '.'
0000000000220cb0         db  0x01 ; '.'
0000000000220cb1         db  0x00 ; '.'
0000000000220cb2         db  0x00 ; '.'
0000000000220cb3         db  0x08 ; '.'
0000000000220cb4         db  0x00 ; '.'
0000000000220cb5         db  0x00 ; '.'
0000000000220cb6         db  0x00 ; '.'
0000000000220cb7         db  0x00 ; '.'
0000000000220cb8         db  0xfe ; '.'
0000000000220cb9         db  0xff ; '.'
0000000000220cba         db  0xff ; '.'
0000000000220cbb         db  0x6f ; 'o'
0000000000220cbc         db  0x00 ; '.'
0000000000220cbd         db  0x00 ; '.'
0000000000220cbe         db  0x00 ; '.'
0000000000220cbf         db  0x00 ; '.'
0000000000220cc0         db  0xe0 ; '.'
0000000000220cc1         db  0x0f ; '.'
0000000000220cc2         db  0x00 ; '.'
0000000000220cc3         db  0x00 ; '.'
0000000000220cc4         db  0x00 ; '.'
0000000000220cc5         db  0x00 ; '.'
0000000000220cc6         db  0x00 ; '.'
0000000000220cc7         db  0x00 ; '.'
0000000000220cc8         db  0xff ; '.'
0000000000220cc9         db  0xff ; '.'
0000000000220cca         db  0xff ; '.'
0000000000220ccb         db  0x6f ; 'o'
0000000000220ccc         db  0x00 ; '.'
0000000000220ccd         db  0x00 ; '.'
0000000000220cce         db  0x00 ; '.'
0000000000220ccf         db  0x00 ; '.'
0000000000220cd0         db  0x01 ; '.'
0000000000220cd1         db  0x00 ; '.'
0000000000220cd2         db  0x00 ; '.'
0000000000220cd3         db  0x00 ; '.'
0000000000220cd4         db  0x00 ; '.'
0000000000220cd5         db  0x00 ; '.'
0000000000220cd6         db  0x00 ; '.'
0000000000220cd7         db  0x00 ; '.'
0000000000220cd8         db  0xf0 ; '.'
0000000000220cd9         db  0xff ; '.'
0000000000220cda         db  0xff ; '.'
0000000000220cdb         db  0x6f ; 'o'
0000000000220cdc         db  0x00 ; '.'
0000000000220cdd         db  0x00 ; '.'
0000000000220cde         db  0x00 ; '.'
0000000000220cdf         db  0x00 ; '.'
0000000000220ce0         db  0x2a ; '*'
0000000000220ce1         db  0x0f ; '.'
0000000000220ce2         db  0x00 ; '.'
0000000000220ce3         db  0x00 ; '.'
0000000000220ce4         db  0x00 ; '.'
0000000000220ce5         db  0x00 ; '.'
0000000000220ce6         db  0x00 ; '.'
0000000000220ce7         db  0x00 ; '.'
0000000000220ce8         db  0xf9 ; '.'
0000000000220ce9         db  0xff ; '.'
0000000000220cea         db  0xff ; '.'
0000000000220ceb         db  0x6f ; 'o'
0000000000220cec         db  0x00 ; '.'
0000000000220ced         db  0x00 ; '.'
0000000000220cee         db  0x00 ; '.'
0000000000220cef         db  0x00 ; '.'
0000000000220cf0         db  0x27 ; '''
0000000000220cf1         db  0x00 ; '.'
0000000000220cf2         db  0x00 ; '.'
0000000000220cf3         db  0x00 ; '.'
0000000000220cf4         db  0x00 ; '.'
0000000000220cf5         db  0x00 ; '.'
0000000000220cf6         db  0x00 ; '.'
0000000000220cf7         db  0x00 ; '.'
0000000000220cf8         db  0x00 ; '.'
0000000000220cf9         db  0x00 ; '.'
0000000000220cfa         db  0x00 ; '.'
0000000000220cfb         db  0x00 ; '.'
0000000000220cfc         db  0x00 ; '.'
0000000000220cfd         db  0x00 ; '.'
0000000000220cfe         db  0x00 ; '.'
0000000000220cff         db  0x00 ; '.'
0000000000220d00         db  0x00 ; '.'
0000000000220d01         db  0x00 ; '.'
0000000000220d02         db  0x00 ; '.'
0000000000220d03         db  0x00 ; '.'
0000000000220d04         db  0x00 ; '.'
0000000000220d05         db  0x00 ; '.'
0000000000220d06         db  0x00 ; '.'
0000000000220d07         db  0x00 ; '.'
0000000000220d08         db  0x00 ; '.'
0000000000220d09         db  0x00 ; '.'
0000000000220d0a         db  0x00 ; '.'
0000000000220d0b         db  0x00 ; '.'
0000000000220d0c         db  0x00 ; '.'
0000000000220d0d         db  0x00 ; '.'
0000000000220d0e         db  0x00 ; '.'
0000000000220d0f         db  0x00 ; '.'
0000000000220d10         db  0x00 ; '.'
0000000000220d11         db  0x00 ; '.'
0000000000220d12         db  0x00 ; '.'
0000000000220d13         db  0x00 ; '.'
0000000000220d14         db  0x00 ; '.'
0000000000220d15         db  0x00 ; '.'
0000000000220d16         db  0x00 ; '.'
0000000000220d17         db  0x00 ; '.'
0000000000220d18         db  0x00 ; '.'
0000000000220d19         db  0x00 ; '.'
0000000000220d1a         db  0x00 ; '.'
0000000000220d1b         db  0x00 ; '.'
0000000000220d1c         db  0x00 ; '.'
0000000000220d1d         db  0x00 ; '.'
0000000000220d1e         db  0x00 ; '.'
0000000000220d1f         db  0x00 ; '.'
0000000000220d20         db  0x00 ; '.'
0000000000220d21         db  0x00 ; '.'
0000000000220d22         db  0x00 ; '.'
0000000000220d23         db  0x00 ; '.'
0000000000220d24         db  0x00 ; '.'
0000000000220d25         db  0x00 ; '.'
0000000000220d26         db  0x00 ; '.'
0000000000220d27         db  0x00 ; '.'
0000000000220d28         db  0x00 ; '.'
0000000000220d29         db  0x00 ; '.'
0000000000220d2a         db  0x00 ; '.'
0000000000220d2b         db  0x00 ; '.'
0000000000220d2c         db  0x00 ; '.'
0000000000220d2d         db  0x00 ; '.'
0000000000220d2e         db  0x00 ; '.'
0000000000220d2f         db  0x00 ; '.'
0000000000220d30         db  0x00 ; '.'
0000000000220d31         db  0x00 ; '.'
0000000000220d32         db  0x00 ; '.'
0000000000220d33         db  0x00 ; '.'
0000000000220d34         db  0x00 ; '.'
0000000000220d35         db  0x00 ; '.'
0000000000220d36         db  0x00 ; '.'
0000000000220d37         db  0x00 ; '.'
0000000000220d38         db  0x00 ; '.'
0000000000220d39         db  0x00 ; '.'
0000000000220d3a         db  0x00 ; '.'
0000000000220d3b         db  0x00 ; '.'
0000000000220d3c         db  0x00 ; '.'
0000000000220d3d         db  0x00 ; '.'
0000000000220d3e         db  0x00 ; '.'
0000000000220d3f         db  0x00 ; '.'
0000000000220d40         db  0x00 ; '.'
0000000000220d41         db  0x00 ; '.'
0000000000220d42         db  0x00 ; '.'
0000000000220d43         db  0x00 ; '.'
0000000000220d44         db  0x00 ; '.'
0000000000220d45         db  0x00 ; '.'
0000000000220d46         db  0x00 ; '.'
0000000000220d47         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x220d48; 0x220fe8[ (672 bytes)
        ; File offset : [134472; 135144[ (672 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
0000000000220d48         db  0x58 ; 'X'
0000000000220d49         db  0x0b ; '.'
0000000000220d4a         db  0x22 ; '"'
0000000000220d4b         db  0x00 ; '.'
0000000000220d4c         db  0x00 ; '.'
0000000000220d4d         db  0x00 ; '.'
0000000000220d4e         db  0x00 ; '.'
0000000000220d4f         db  0x00 ; '.'
                     qword_220d50:
0000000000220d50         dq         0x0000000000000000                          ; DATA XREF=0x1c40
0000000000220d58         db  0x00 ; '.'                                         ; DATA XREF=0x1c46
0000000000220d59         db  0x00 ; '.'
0000000000220d5a         db  0x00 ; '.'
0000000000220d5b         db  0x00 ; '.'
0000000000220d5c         db  0x00 ; '.'
0000000000220d5d         db  0x00 ; '.'
0000000000220d5e         db  0x00 ; '.'
0000000000220d5f         db  0x00 ; '.'
                     __ctype_toupper_loc@GOT:        // __ctype_toupper_loc
0000000000220d60         dq         0x0000000000221a10                          ; DATA XREF=j___ctype_toupper_loc
                     free@GOT:        // free
0000000000220d68         dq         0x0000000000221a18                          ; DATA XREF=j_free
                     abort@GOT:        // abort
0000000000220d70         dq         0x0000000000221a20                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
0000000000220d78         dq         0x0000000000221a28                          ; DATA XREF=j___errno_location
                     strncmp@GOT:        // strncmp
0000000000220d80         dq         0x0000000000221a30                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
0000000000220d88         dq         0x0000000000221a40                          ; DATA XREF=j__exit
                     ftello@GOT:        // ftello
0000000000220d90         dq         0x0000000000221a48                          ; DATA XREF=j_ftello
                     __fpending@GOT:        // __fpending
0000000000220d98         dq         0x0000000000221a50                          ; DATA XREF=j___fpending
                     iconv@GOT:        // iconv
0000000000220da0         dq         0x0000000000221a58                          ; DATA XREF=j_iconv
                     ferror@GOT:        // ferror
0000000000220da8         dq         0x0000000000221a60                          ; DATA XREF=j_ferror
                     qsort@GOT:        // qsort
0000000000220db0         dq         0x0000000000221a68                          ; DATA XREF=j_qsort
                     fread@GOT:        // fread
0000000000220db8         dq         0x0000000000221a70                          ; DATA XREF=j_fread
                     iswcntrl@GOT:        // iswcntrl
0000000000220dc0         dq         0x0000000000221a78                          ; DATA XREF=j_iswcntrl
                     textdomain@GOT:        // textdomain
0000000000220dc8         dq         0x0000000000221a80                          ; DATA XREF=j_textdomain
                     __strtol_internal@GOT:        // __strtol_internal
0000000000220dd0         dq         0x0000000000221a88                          ; DATA XREF=j___strtol_internal
                     iswctype@GOT:        // iswctype
0000000000220dd8         dq         0x0000000000221a90                          ; DATA XREF=j_iswctype
                     fclose@GOT:        // fclose
0000000000220de0         dq         0x0000000000221a98                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
0000000000220de8         dq         0x0000000000221aa0                          ; DATA XREF=j_bindtextdomain
                     stpcpy@GOT:        // stpcpy
0000000000220df0         dq         0x0000000000221aa8                          ; DATA XREF=j_stpcpy
                     dcgettext@GOT:        // dcgettext
0000000000220df8         dq         0x0000000000221ab0                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
0000000000220e00         dq         0x0000000000221ab8                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
0000000000220e08         dq         0x0000000000221ac0                          ; DATA XREF=j_strlen
                     __stack_chk_fail@GOT:        // __stack_chk_fail
0000000000220e10         dq         0x0000000000221ac8                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
0000000000220e18         dq         0x0000000000221ad0                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
0000000000220e20         dq         0x0000000000221ad8                          ; DATA XREF=j_mbrtowc
                     dup2@GOT:        // dup2
0000000000220e28         dq         0x0000000000221ae0                          ; DATA XREF=j_dup2
                     strchr@GOT:        // strchr
0000000000220e30         dq         0x0000000000221ae8                          ; DATA XREF=j_strchr
                     __overflow@GOT:        // __overflow
0000000000220e38         dq         0x0000000000221af0                          ; DATA XREF=j___overflow
                     strrchr@GOT:        // strrchr
0000000000220e40         dq         0x0000000000221af8                          ; DATA XREF=j_strrchr
                     lseek@GOT:        // lseek
0000000000220e48         dq         0x0000000000221b00                          ; DATA XREF=j_lseek
                     __assert_fail@GOT:        // __assert_fail
0000000000220e50         dq         0x0000000000221b08                          ; DATA XREF=j___assert_fail
                     memset@GOT:        // memset
0000000000220e58         dq         0x0000000000221b10                          ; DATA XREF=j_memset
                     freopen@GOT:        // freopen
0000000000220e60         dq         0x0000000000221b18                          ; DATA XREF=j_freopen
                     strnlen@GOT:        // strnlen
0000000000220e68         dq         0x0000000000221b20                          ; DATA XREF=j_strnlen
                     close@GOT:        // close
0000000000220e70         dq         0x0000000000221b28                          ; DATA XREF=j_close
                     memchr@GOT:        // memchr
0000000000220e78         dq         0x0000000000221b30                          ; DATA XREF=j_memchr
                     memcmp@GOT:        // memcmp
0000000000220e80         dq         0x0000000000221b40                          ; DATA XREF=j_memcmp
                     wctype@GOT:        // wctype
0000000000220e88         dq         0x0000000000221b48                          ; DATA XREF=j_wctype
                     fputs_unlocked@GOT:        // fputs_unlocked
0000000000220e90         dq         0x0000000000221b50                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
0000000000220e98         dq         0x0000000000221b58                          ; DATA XREF=j_calloc
                     strcmp@GOT:        // strcmp
0000000000220ea0         dq         0x0000000000221b60                          ; DATA XREF=j_strcmp
                     memcpy@GOT:        // memcpy
0000000000220ea8         dq         0x0000000000221b70                          ; DATA XREF=j_memcpy
                     fileno@GOT:        // fileno
0000000000220eb0         dq         0x0000000000221b78                          ; DATA XREF=j_fileno
                     wcwidth@GOT:        // wcwidth
0000000000220eb8         dq         0x0000000000221b80                          ; DATA XREF=j_wcwidth
                     iswalnum@GOT:        // iswalnum
0000000000220ec0         dq         0x0000000000221b88                          ; DATA XREF=j_iswalnum
                     malloc@GOT:        // malloc
0000000000220ec8         dq         0x0000000000221b90                          ; DATA XREF=j_malloc
                     wcrtomb@GOT:        // wcrtomb
0000000000220ed0         dq         0x0000000000221b98                          ; DATA XREF=j_wcrtomb
                     fflush@GOT:        // fflush
0000000000220ed8         dq         0x0000000000221ba0                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
0000000000220ee0         dq         0x0000000000221ba8                          ; DATA XREF=j_nl_langinfo
                     __fxstat@GOT:        // __fxstat
0000000000220ee8         dq         0x0000000000221bb0                          ; DATA XREF=j___fxstat
                     __freading@GOT:        // __freading
0000000000220ef0         dq         0x0000000000221bb8                          ; DATA XREF=j___freading
                     fwrite_unlocked@GOT:        // fwrite_unlocked
0000000000220ef8         dq         0x0000000000221bc0                          ; DATA XREF=j_fwrite_unlocked
                     realloc@GOT:        // realloc
0000000000220f00         dq         0x0000000000221bc8                          ; DATA XREF=j_realloc
                     setlocale@GOT:        // setlocale
0000000000220f08         dq         0x0000000000221bd0                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
0000000000220f10         dq         0x0000000000221bd8                          ; DATA XREF=j___printf_chk
                     iconv_close@GOT:        // iconv_close
0000000000220f18         dq         0x0000000000221be0                          ; DATA XREF=j_iconv_close
                     iswspace@GOT:        // iswspace
0000000000220f20         dq         0x0000000000221be8                          ; DATA XREF=j_iswspace
                     btowc@GOT:        // btowc
0000000000220f28         dq         0x0000000000221bf0                          ; DATA XREF=j_btowc
                     memmove@GOT:        // memmove
0000000000220f30         dq         0x0000000000221bf8                          ; DATA XREF=j_memmove
                     error@GOT:        // error
0000000000220f38         dq         0x0000000000221c00                          ; DATA XREF=j_error
                     open@GOT:        // open
0000000000220f40         dq         0x0000000000221c08                          ; DATA XREF=j_open
                     fseeko@GOT:        // fseeko
0000000000220f48         dq         0x0000000000221c10                          ; DATA XREF=j_fseeko
                     fopen@GOT:        // fopen
0000000000220f50         dq         0x0000000000221c18                          ; DATA XREF=j_fopen
                     towlower@GOT:        // towlower
0000000000220f58         dq         0x0000000000221c20                          ; DATA XREF=j_towlower
                     towupper@GOT:        // towupper
0000000000220f60         dq         0x0000000000221c28                          ; DATA XREF=j_towupper
                     __cxa_atexit@GOT:        // __cxa_atexit
0000000000220f68         dq         0x0000000000221c30                          ; DATA XREF=j___cxa_atexit
                     exit@GOT:        // exit
0000000000220f70         dq         0x0000000000221c38                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
0000000000220f78         dq         0x0000000000221c40                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
0000000000220f80         dq         0x0000000000221c48                          ; DATA XREF=j___fprintf_chk
                     strdup@GOT:        // strdup
0000000000220f88         dq         0x0000000000221c58                          ; DATA XREF=j_strdup
                     mbsinit@GOT:        // mbsinit
0000000000220f90         dq         0x0000000000221c60                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
0000000000220f98         dq         0x0000000000221c68                          ; DATA XREF=j_iswprint
                     __ctype_tolower_loc@GOT:        // __ctype_tolower_loc
0000000000220fa0         dq         0x0000000000221c78                          ; DATA XREF=j___ctype_tolower_loc
                     __ctype_b_loc@GOT:        // __ctype_b_loc
0000000000220fa8         dq         0x0000000000221c80                          ; DATA XREF=j___ctype_b_loc
                     iconv_open@GOT:        // iconv_open
0000000000220fb0         dq         0x0000000000221c88                          ; DATA XREF=j_iconv_open
                     __sprintf_chk@GOT:        // __sprintf_chk
0000000000220fb8         dq         0x0000000000221c90                          ; DATA XREF=j___sprintf_chk
                     qword_220fc0:
0000000000220fc0         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
0000000000220fc8         db  0x00 ; '.'                                         ; DATA XREF=_start+36
0000000000220fc9         db  0x00 ; '.'
0000000000220fca         db  0x00 ; '.'
0000000000220fcb         db  0x00 ; '.'
0000000000220fcc         db  0x00 ; '.'
0000000000220fcd         db  0x00 ; '.'
0000000000220fce         db  0x00 ; '.'
0000000000220fcf         db  0x00 ; '.'
                     qword_220fd0:
0000000000220fd0         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_220fd8:
0000000000220fd8         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_220fe0:
0000000000220fe0         dq         0x0000000000000000                          ; DATA XREF=j_qword_220fe0, __do_global_dtors_aux+9
0000000000220fe8         db  0x00 ; '.'
0000000000220fe9         db  0x00 ; '.'
0000000000220fea         db  0x00 ; '.'
0000000000220feb         db  0x00 ; '.'
0000000000220fec         db  0x00 ; '.'
0000000000220fed         db  0x00 ; '.'
0000000000220fee         db  0x00 ; '.'
0000000000220fef         db  0x00 ; '.'
0000000000220ff0         db  0x00 ; '.'
0000000000220ff1         db  0x00 ; '.'
0000000000220ff2         db  0x00 ; '.'
0000000000220ff3         db  0x00 ; '.'
0000000000220ff4         db  0x00 ; '.'
0000000000220ff5         db  0x00 ; '.'
0000000000220ff6         db  0x00 ; '.'
0000000000220ff7         db  0x00 ; '.'
0000000000220ff8         db  0x00 ; '.'
0000000000220ff9         db  0x00 ; '.'
0000000000220ffa         db  0x00 ; '.'
0000000000220ffb         db  0x00 ; '.'
0000000000220ffc         db  0x00 ; '.'
0000000000220ffd         db  0x00 ; '.'
0000000000220ffe         db  0x00 ; '.'
0000000000220fff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x221000; 0x2210c0[ (192 bytes)
        ; File offset : [135168; 135360[ (192 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

0000000000221000         db  0x00 ; '.'
0000000000221001         db  0x00 ; '.'
0000000000221002         db  0x00 ; '.'
0000000000221003         db  0x00 ; '.'
0000000000221004         db  0x00 ; '.'
0000000000221005         db  0x00 ; '.'
0000000000221006         db  0x00 ; '.'
0000000000221007         db  0x00 ; '.'
                     __dso_handle:
0000000000221008         dq         0x0000000000221008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     gap_size:
0000000000221010         dq         0x0000000000000003                          ; DATA XREF=main+786, main+2668, main+2737, sub_31ea+1072, sub_31ea+1648, sub_31ea+3669, sub_31ea+3743, sub_31ea+3833, sub_31ea+4028, sub_31ea+4151, sub_31ea+4400
                     line_width:
0000000000221018         dq         0x0000000000000048                          ; DATA XREF=main+472, main+2682, main+2689, main+2699, main+2710
                     gnu_extensions:
0000000000221020         db         0x01                                        ; DATA XREF=main+521, main+891, main+1311, main+1526, main+2821, sub_31ea+358, sub_31ea+4891
0000000000221021         align      8
                     macro_name:
0000000000221028         dq         0x000000000001b97e                          ; DATA XREF=main+841, sub_31ea+2110, sub_31ea+3057
                     truncation_string:
0000000000221030         dq         0x000000000001bc8e                          ; DATA XREF=main+865, main+2722, sub_31ea+550, sub_31ea+940, sub_31ea+1535, sub_31ea+1860, sub_31ea+3118, sub_31ea+3207, sub_31ea+3337, sub_31ea+3426, sub_31ea+3802
                     Version:
0000000000221038         dq         0x000000000001b9b8                          ; "8.31", DATA XREF=main+657
                     argmatch_die:
0000000000221040         dq         0x0000000000005930                          ; DATA XREF=main+353
                     exit_failure:
0000000000221048         dd         0x00000001                                  ; DATA XREF=close_stdout+130, xalloc_die+23
000000000022104c         db  0x00 ; '.'
000000000022104d         db  0x00 ; '.'
000000000022104e         db  0x00 ; '.'
000000000022104f         db  0x00 ; '.'
0000000000221050         db  0x00 ; '.'
0000000000221051         db  0x00 ; '.'
0000000000221052         db  0x00 ; '.'
0000000000221053         db  0x00 ; '.'
0000000000221054         db  0x00 ; '.'
0000000000221055         db  0x00 ; '.'
0000000000221056         db  0x00 ; '.'
0000000000221057         db  0x00 ; '.'
0000000000221058         db  0x00 ; '.'
0000000000221059         db  0x00 ; '.'
000000000022105a         db  0x00 ; '.'
000000000022105b         db  0x00 ; '.'
000000000022105c         db  0x00 ; '.'
000000000022105d         db  0x00 ; '.'
000000000022105e         db  0x00 ; '.'
000000000022105f         db  0x00 ; '.'
                     quote_quoting_options:
0000000000221060         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
0000000000221061         db  0x00 ; '.'
0000000000221062         db  0x00 ; '.'
0000000000221063         db  0x00 ; '.'
0000000000221064         db  0x00 ; '.'
0000000000221065         db  0x00 ; '.'
0000000000221066         db  0x00 ; '.'
0000000000221067         db  0x00 ; '.'
0000000000221068         db  0x00 ; '.'
0000000000221069         db  0x00 ; '.'
000000000022106a         db  0x00 ; '.'
000000000022106b         db  0x00 ; '.'
000000000022106c         db  0x00 ; '.'
000000000022106d         db  0x00 ; '.'
000000000022106e         db  0x00 ; '.'
000000000022106f         db  0x00 ; '.'
0000000000221070         db  0x00 ; '.'
0000000000221071         db  0x00 ; '.'
0000000000221072         db  0x00 ; '.'
0000000000221073         db  0x00 ; '.'
0000000000221074         db  0x00 ; '.'
0000000000221075         db  0x00 ; '.'
0000000000221076         db  0x00 ; '.'
0000000000221077         db  0x00 ; '.'
0000000000221078         db  0x00 ; '.'
0000000000221079         db  0x00 ; '.'
000000000022107a         db  0x00 ; '.'
000000000022107b         db  0x00 ; '.'
000000000022107c         db  0x00 ; '.'
000000000022107d         db  0x00 ; '.'
000000000022107e         db  0x00 ; '.'
000000000022107f         db  0x00 ; '.'
0000000000221080         db  0x00 ; '.'
0000000000221081         db  0x00 ; '.'
0000000000221082         db  0x00 ; '.'
0000000000221083         db  0x00 ; '.'
0000000000221084         db  0x00 ; '.'
0000000000221085         db  0x00 ; '.'
0000000000221086         db  0x00 ; '.'
0000000000221087         db  0x00 ; '.'
0000000000221088         db  0x00 ; '.'
0000000000221089         db  0x00 ; '.'
000000000022108a         db  0x00 ; '.'
000000000022108b         db  0x00 ; '.'
000000000022108c         db  0x00 ; '.'
000000000022108d         db  0x00 ; '.'
000000000022108e         db  0x00 ; '.'
000000000022108f         db  0x00 ; '.'
0000000000221090         db  0x00 ; '.'
0000000000221091         db  0x00 ; '.'
0000000000221092         db  0x00 ; '.'
0000000000221093         db  0x00 ; '.'
0000000000221094         db  0x00 ; '.'
0000000000221095         db  0x00 ; '.'
0000000000221096         db  0x00 ; '.'
0000000000221097         db  0x00 ; '.'
                     nslots:
0000000000221098         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000022109c         align      32
                     slotvec:
00000000002210a0         dq         0x00000000002210b0                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
00000000002210a8         db  0x00 ; '.'
00000000002210a9         db  0x00 ; '.'
00000000002210aa         db  0x00 ; '.'
00000000002210ab         db  0x00 ; '.'
00000000002210ac         db  0x00 ; '.'
00000000002210ad         db  0x00 ; '.'
00000000002210ae         db  0x00 ; '.'
00000000002210af         db  0x00 ; '.'
                     slotvec0:
00000000002210b0         dq         1.26481e-321, 1.10402e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x2210c0; 0x221a00[ (2368 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
00000000002210c0         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
00000000002210c1         db  0x00 ; '.'
00000000002210c2         db  0x00 ; '.'
00000000002210c3         db  0x00 ; '.'
00000000002210c4         db  0x00 ; '.'
00000000002210c5         db  0x00 ; '.'
00000000002210c6         db  0x00 ; '.'
00000000002210c7         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
00000000002210c8         db  0x00 ; '.'                                         ; DATA XREF=main+650, sub_31ea+2136, sub_31ea+2187, sub_31ea+2235, sub_31ea+2358, sub_31ea+2398, sub_31ea+2446, sub_31ea+2496, sub_31ea+2547, sub_31ea+2579, sub_31ea+3111
00000000002210c9         db  0x00 ; '.'
00000000002210ca         db  0x00 ; '.'
00000000002210cb         db  0x00 ; '.'
00000000002210cc         db  0x00 ; '.'
00000000002210cd         db  0x00 ; '.'
00000000002210ce         db  0x00 ; '.'
00000000002210cf         db  0x00 ; '.'
                     stdin@@GLIBC_2.2.5:
00000000002210d0         db  0x00 ; '.'                                         ; DATA XREF=swallow_file_in_memory+38
00000000002210d1         db  0x00 ; '.'
00000000002210d2         db  0x00 ; '.'
00000000002210d3         db  0x00 ; '.'
00000000002210d4         db  0x00 ; '.'
00000000002210d5         db  0x00 ; '.'
00000000002210d6         db  0x00 ; '.'
00000000002210d7         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
00000000002210d8         db  0x00 ; '.'                                         ; DATA XREF=main+877, main+1115, main+1191, sub_31ea+4668, sub_31ea+4742, sub_31ea+4788, sub_31ea+4799, sub_31ea+5075
00000000002210d9         db  0x00 ; '.'
00000000002210da         db  0x00 ; '.'
00000000002210db         db  0x00 ; '.'
00000000002210dc         db  0x00 ; '.'
00000000002210dd         db  0x00 ; '.'
00000000002210de         db  0x00 ; '.'
00000000002210df         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
00000000002210e0         db  0x00 ; '.'                                         ; DATA XREF=main+218, main+308, main+360, main+428, main+493, main+698, main+742, main+810, main+834, main+853, sub_31ea+5148
00000000002210e1         db  0x00 ; '.'
00000000002210e2         db  0x00 ; '.'
00000000002210e3         db  0x00 ; '.'
00000000002210e4         db  0x00 ; '.'
00000000002210e5         db  0x00 ; '.'
00000000002210e6         db  0x00 ; '.'
00000000002210e7         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
00000000002210e8         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
00000000002210e9         db  0x00 ; '.'
00000000002210ea         db  0x00 ; '.'
00000000002210eb         db  0x00 ; '.'
00000000002210ec         db  0x00 ; '.'
00000000002210ed         db  0x00 ; '.'
00000000002210ee         db  0x00 ; '.'
00000000002210ef         db  0x00 ; '.'
00000000002210f0         db  0x00 ; '.'
00000000002210f1         db  0x00 ; '.'
00000000002210f2         db  0x00 ; '.'
00000000002210f3         db  0x00 ; '.'
00000000002210f4         db  0x00 ; '.'
00000000002210f5         db  0x00 ; '.'
00000000002210f6         db  0x00 ; '.'
00000000002210f7         db  0x00 ; '.'
00000000002210f8         db  0x00 ; '.'
00000000002210f9         db  0x00 ; '.'
00000000002210fa         db  0x00 ; '.'
00000000002210fb         db  0x00 ; '.'
00000000002210fc         db  0x00 ; '.'
00000000002210fd         db  0x00 ; '.'
00000000002210fe         db  0x00 ; '.'
00000000002210ff         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
0000000000221100         db  0x00 ; '.'                                         ; DATA XREF=usage+61, argmatch_valid+37, argmatch_valid+95, argmatch_valid+174, argmatch_valid+216, close_stdout+44, set_program_name+125
0000000000221101         db  0x00 ; '.'
0000000000221102         db  0x00 ; '.'
0000000000221103         db  0x00 ; '.'
0000000000221104         db  0x00 ; '.'
0000000000221105         db  0x00 ; '.'
0000000000221106         db  0x00 ; '.'
0000000000221107         db  0x00 ; '.'
                     completed.7697:
0000000000221108         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
0000000000221109         db  0x00 ; '.'
000000000022110a         db  0x00 ; '.'
000000000022110b         db  0x00 ; '.'
000000000022110c         db  0x00 ; '.'
000000000022110d         db  0x00 ; '.'
000000000022110e         db  0x00 ; '.'
000000000022110f         db  0x00 ; '.'
0000000000221110         db  0x00 ; '.'
0000000000221111         db  0x00 ; '.'
0000000000221112         db  0x00 ; '.'
0000000000221113         db  0x00 ; '.'
0000000000221114         db  0x00 ; '.'
0000000000221115         db  0x00 ; '.'
0000000000221116         db  0x00 ; '.'
0000000000221117         db  0x00 ; '.'
0000000000221118         db  0x00 ; '.'
0000000000221119         db  0x00 ; '.'
000000000022111a         db  0x00 ; '.'
000000000022111b         db  0x00 ; '.'
000000000022111c         db  0x00 ; '.'
000000000022111d         db  0x00 ; '.'
000000000022111e         db  0x00 ; '.'
000000000022111f         db  0x00 ; '.'
                     reference:
0000000000221120         db  0x00 ; '.'                                         ; DATA XREF=sub_31ea+308, sub_31ea+2024, sub_31ea+2528, sub_31ea+2838, sub_31ea+3540, sub_31ea+3612, sub_31ea+3690, sub_31ea+4040, sub_31ea+4172
0000000000221121         db  0x00 ; '.'
0000000000221122         db  0x00 ; '.'
0000000000221123         db  0x00 ; '.'
0000000000221124         db  0x00 ; '.'
0000000000221125         db  0x00 ; '.'
0000000000221126         db  0x00 ; '.'
0000000000221127         db  0x00 ; '.'
                     qword_221128:
0000000000221128         db  0x00 ; '.'                                         ; DATA XREF=sub_31ea+2073, sub_31ea+2535, sub_31ea+2845, sub_31ea+2900, sub_31ea+3547, sub_31ea+3619, sub_31ea+3676, sub_31ea+4047, sub_31ea+4158, sub_31ea+5482
0000000000221129         db  0x00 ; '.'
000000000022112a         db  0x00 ; '.'
000000000022112b         db  0x00 ; '.'
000000000022112c         db  0x00 ; '.'
000000000022112d         db  0x00 ; '.'
000000000022112e         db  0x00 ; '.'
000000000022112f         db  0x00 ; '.'
                     head_truncation:
0000000000221130         db  0x00 ; '.'                                         ; DATA XREF=main+3060, sub_31ea+1890, sub_31ea+2793, sub_31ea+3410, sub_31ea+4303, sub_31ea+4327
0000000000221131         db  0x00 ; '.'
0000000000221132         db  0x00 ; '.'
0000000000221133         db  0x00 ; '.'
0000000000221134         db  0x00 ; '.'
0000000000221135         db  0x00 ; '.'
0000000000221136         db  0x00 ; '.'
0000000000221137         db  0x00 ; '.'
0000000000221138         db  0x00 ; '.'
0000000000221139         db  0x00 ; '.'
000000000022113a         db  0x00 ; '.'
000000000022113b         db  0x00 ; '.'
000000000022113c         db  0x00 ; '.'
000000000022113d         db  0x00 ; '.'
000000000022113e         db  0x00 ; '.'
000000000022113f         db  0x00 ; '.'
                     head:
0000000000221140         db  0x00 ; '.'                                         ; DATA XREF=main+3038, sub_31ea+1738, sub_31ea+1749, sub_31ea+2427, sub_31ea+2771, sub_31ea+3438, sub_31ea+3880, sub_31ea+3894, sub_31ea+4206, sub_31ea+4218, sub_31ea+5449
0000000000221141         db  0x00 ; '.'
0000000000221142         db  0x00 ; '.'
0000000000221143         db  0x00 ; '.'
0000000000221144         db  0x00 ; '.'
0000000000221145         db  0x00 ; '.'
0000000000221146         db  0x00 ; '.'
0000000000221147         db  0x00 ; '.'
                     qword_221148:
0000000000221148         db  0x00 ; '.'                                         ; DATA XREF=main+3049, sub_31ea+1674, sub_31ea+1731, sub_31ea+1825, sub_31ea+2434, sub_31ea+2782, sub_31ea+3445, sub_31ea+3887, sub_31ea+4225, sub_31ea+4344, sub_31ea+5437
0000000000221149         db  0x00 ; '.'
000000000022114a         db  0x00 ; '.'
000000000022114b         db  0x00 ; '.'
000000000022114c         db  0x00 ; '.'
000000000022114d         db  0x00 ; '.'
000000000022114e         db  0x00 ; '.'
000000000022114f         db  0x00 ; '.'
                     keyafter_truncation:
0000000000221150         db  0x00 ; '.'                                         ; DATA XREF=sub_31ea+579, sub_31ea+586, sub_31ea+1543, sub_31ea+3321, sub_31ea+3867, sub_31ea+3978, sub_31ea+4273
0000000000221151         db  0x00 ; '.'
0000000000221152         db  0x00 ; '.'
0000000000221153         db  0x00 ; '.'
0000000000221154         db  0x00 ; '.'
0000000000221155         db  0x00 ; '.'
0000000000221156         db  0x00 ; '.'
0000000000221157         db  0x00 ; '.'
0000000000221158         db  0x00 ; '.'
0000000000221159         db  0x00 ; '.'
000000000022115a         db  0x00 ; '.'
000000000022115b         db  0x00 ; '.'
000000000022115c         db  0x00 ; '.'
000000000022115d         db  0x00 ; '.'
000000000022115e         db  0x00 ; '.'
000000000022115f         db  0x00 ; '.'
                     keyafter:
0000000000221160         db  0x00 ; '.'                                         ; DATA XREF=main+3098, main+3268, sub_31ea+523, sub_31ea+741, sub_31ea+1628, sub_31ea+2264, sub_31ea+2820, sub_31ea+2926, sub_31ea+3299, sub_31ea+3845, sub_31ea+3949
0000000000221161         db  0x00 ; '.'
0000000000221162         db  0x00 ; '.'
0000000000221163         db  0x00 ; '.'
0000000000221164         db  0x00 ; '.'
0000000000221165         db  0x00 ; '.'
0000000000221166         db  0x00 ; '.'
0000000000221167         db  0x00 ; '.'
                     qword_221168:
0000000000221168         db  0x00 ; '.'                                         ; DATA XREF=main+3138, main+3297, sub_31ea+541, sub_31ea+558, sub_31ea+1091, sub_31ea+1484, sub_31ea+2271, sub_31ea+2982, sub_31ea+3006, sub_31ea+3306, sub_31ea+3852
0000000000221169         db  0x00 ; '.'
000000000022116a         db  0x00 ; '.'
000000000022116b         db  0x00 ; '.'
000000000022116c         db  0x00 ; '.'
000000000022116d         db  0x00 ; '.'
000000000022116e         db  0x00 ; '.'
000000000022116f         db  0x00 ; '.'
                     before_truncation:
0000000000221170         db  0x00 ; '.'                                         ; DATA XREF=sub_31ea+1005, sub_31ea+1868, sub_31ea+3025, sub_31ea+3191, sub_31ea+3762, sub_31ea+3786, sub_31ea+4419
0000000000221171         db  0x00 ; '.'
0000000000221172         db  0x00 ; '.'
0000000000221173         db  0x00 ; '.'
0000000000221174         db  0x00 ; '.'
0000000000221175         db  0x00 ; '.'
0000000000221176         db  0x00 ; '.'
0000000000221177         db  0x00 ; '.'
0000000000221178         db  0x00 ; '.'
0000000000221179         db  0x00 ; '.'
000000000022117a         db  0x00 ; '.'
000000000022117b         db  0x00 ; '.'
000000000022117c         db  0x00 ; '.'
000000000022117d         db  0x00 ; '.'
000000000022117e         db  0x00 ; '.'
000000000022117f         db  0x00 ; '.'
                     before:
0000000000221180         db  0x00 ; '.'                                         ; DATA XREF=sub_31ea+748, sub_31ea+755, sub_31ea+1664, sub_31ea+2216, sub_31ea+2941, sub_31ea+3219, sub_31ea+3750, sub_31ea+3821, sub_31ea+4407, sub_31ea+5506
0000000000221181         db  0x00 ; '.'
0000000000221182         db  0x00 ; '.'
0000000000221183         db  0x00 ; '.'
0000000000221184         db  0x00 ; '.'
0000000000221185         db  0x00 ; '.'
0000000000221186         db  0x00 ; '.'
0000000000221187         db  0x00 ; '.'
                     qword_221188:
0000000000221188         db  0x00 ; '.'                                         ; DATA XREF=sub_31ea+768, sub_31ea+832, sub_31ea+918, sub_31ea+2223, sub_31ea+3226, sub_31ea+3736, sub_31ea+3814, sub_31ea+4393, sub_31ea+5401, sub_31ea+5636
0000000000221189         db  0x00 ; '.'
000000000022118a         db  0x00 ; '.'
000000000022118b         db  0x00 ; '.'
000000000022118c         db  0x00 ; '.'
000000000022118d         db  0x00 ; '.'
000000000022118e         db  0x00 ; '.'
000000000022118f         db  0x00 ; '.'
                     tail_truncation:
0000000000221190         db  0x00 ; '.'                                         ; DATA XREF=main+3031, sub_31ea+1573, sub_31ea+2975, sub_31ea+3045, sub_31ea+3102, sub_31ea+4373, sub_31ea+4457
0000000000221191         db  0x00 ; '.'
0000000000221192         db  0x00 ; '.'
0000000000221193         db  0x00 ; '.'
0000000000221194         db  0x00 ; '.'
0000000000221195         db  0x00 ; '.'
0000000000221196         db  0x00 ; '.'
0000000000221197         db  0x00 ; '.'
0000000000221198         db  0x00 ; '.'
0000000000221199         db  0x00 ; '.'
000000000022119a         db  0x00 ; '.'
000000000022119b         db  0x00 ; '.'
000000000022119c         db  0x00 ; '.'
000000000022119d         db  0x00 ; '.'
000000000022119e         db  0x00 ; '.'
000000000022119f         db  0x00 ; '.'
                     tail:
00000000002211a0         db  0x00 ; '.'                                         ; DATA XREF=main+3009, sub_31ea+1098, sub_31ea+1111, sub_31ea+1168, sub_31ea+1497, sub_31ea+1550, sub_31ea+2168, sub_31ea+2953, sub_31ea+2994, sub_31ea+3013, sub_31ea+3083
00000000002211a1         db  0x00 ; '.'
00000000002211a2         db  0x00 ; '.'
00000000002211a3         db  0x00 ; '.'
00000000002211a4         db  0x00 ; '.'
00000000002211a5         db  0x00 ; '.'
00000000002211a6         db  0x00 ; '.'
00000000002211a7         db  0x00 ; '.'
                     qword_2211a8:
00000000002211a8         db  0x00 ; '.'                                         ; DATA XREF=main+3020, sub_31ea+1175, sub_31ea+1301, sub_31ea+1512, sub_31ea+1519, sub_31ea+2175, sub_31ea+2964, sub_31ea+3090, sub_31ea+3716, sub_31ea+4361, sub_31ea+4438
00000000002211a9         db  0x00 ; '.'
00000000002211aa         db  0x00 ; '.'
00000000002211ab         db  0x00 ; '.'
00000000002211ac         db  0x00 ; '.'
00000000002211ad         db  0x00 ; '.'
00000000002211ae         db  0x00 ; '.'
00000000002211af         db  0x00 ; '.'
                     truncation_string_length:
00000000002211b0         db  0x00 ; '.'                                         ; DATA XREF=main+2804, main+2811, sub_31ea+3771, sub_31ea+3987, sub_31ea+4282, sub_31ea+4312, sub_31ea+4428
00000000002211b1         db  0x00 ; '.'
00000000002211b2         db  0x00 ; '.'
00000000002211b3         db  0x00 ; '.'
00000000002211b4         db  0x00 ; '.'
00000000002211b5         db  0x00 ; '.'
00000000002211b6         db  0x00 ; '.'
00000000002211b7         db  0x00 ; '.'
                     keyafter_max_width:
00000000002211b8         db  0x00 ; '.'                                         ; DATA XREF=main+2757, main+2856, main+3163, main+3252, sub_31ea+1635
00000000002211b9         db  0x00 ; '.'
00000000002211ba         db  0x00 ; '.'
00000000002211bb         db  0x00 ; '.'
00000000002211bc         db  0x00 ; '.'
00000000002211bd         db  0x00 ; '.'
00000000002211be         db  0x00 ; '.'
00000000002211bf         db  0x00 ; '.'
                     before_max_width:
00000000002211c0         db  0x00 ; '.'                                         ; DATA XREF=main+2764, main+2840, sub_31ea+825, sub_31ea+904, sub_31ea+5466
00000000002211c1         db  0x00 ; '.'
00000000002211c2         db  0x00 ; '.'
00000000002211c3         db  0x00 ; '.'
00000000002211c4         db  0x00 ; '.'
00000000002211c5         db  0x00 ; '.'
00000000002211c6         db  0x00 ; '.'
00000000002211c7         db  0x00 ; '.'
                     half_line_width:
00000000002211c8         db  0x00 ; '.'                                         ; DATA XREF=main+2750, sub_31ea+655, sub_31ea+3729, sub_31ea+3963, sub_31ea+4258, sub_31ea+4386, sub_31ea+5559
00000000002211c9         db  0x00 ; '.'
00000000002211ca         db  0x00 ; '.'
00000000002211cb         db  0x00 ; '.'
00000000002211cc         db  0x00 ; '.'
00000000002211cd         db  0x00 ; '.'
00000000002211ce         db  0x00 ; '.'
00000000002211cf         db  0x00 ; '.'
00000000002211d0         db  0x00 ; '.'
00000000002211d1         db  0x00 ; '.'
00000000002211d2         db  0x00 ; '.'
00000000002211d3         db  0x00 ; '.'
00000000002211d4         db  0x00 ; '.'
00000000002211d5         db  0x00 ; '.'
00000000002211d6         db  0x00 ; '.'
00000000002211d7         db  0x00 ; '.'
00000000002211d8         db  0x00 ; '.'
00000000002211d9         db  0x00 ; '.'
00000000002211da         db  0x00 ; '.'
00000000002211db         db  0x00 ; '.'
00000000002211dc         db  0x00 ; '.'
00000000002211dd         db  0x00 ; '.'
00000000002211de         db  0x00 ; '.'
00000000002211df         db  0x00 ; '.'
                     edited_flag:
00000000002211e0         db  0x00 ; '.'                                         ; DATA XREF=main+2871, print_field+24
00000000002211e1         db  0x00 ; '.'
00000000002211e2         db  0x00 ; '.'
00000000002211e3         db  0x00 ; '.'
00000000002211e4         db  0x00 ; '.'
00000000002211e5         db  0x00 ; '.'
00000000002211e6         db  0x00 ; '.'
00000000002211e7         db  0x00 ; '.'
00000000002211e8         db  0x00 ; '.'
00000000002211e9         db  0x00 ; '.'
00000000002211ea         db  0x00 ; '.'
00000000002211eb         db  0x00 ; '.'
                     byte_2211ec:
00000000002211ec         db  0x00 ; '.'                                         ; DATA XREF=main+2921
00000000002211ed         db  0x00 ; '.'
00000000002211ee         db  0x00 ; '.'
00000000002211ef         db  0x00 ; '.'
00000000002211f0         db  0x00 ; '.'
00000000002211f1         db  0x00 ; '.'
00000000002211f2         db  0x00 ; '.'
00000000002211f3         db  0x00 ; '.'
00000000002211f4         db  0x00 ; '.'
00000000002211f5         db  0x00 ; '.'
00000000002211f6         db  0x00 ; '.'
00000000002211f7         db  0x00 ; '.'
00000000002211f8         db  0x00 ; '.'
00000000002211f9         db  0x00 ; '.'
00000000002211fa         db  0x00 ; '.'
00000000002211fb         db  0x00 ; '.'
00000000002211fc         db  0x00 ; '.'
00000000002211fd         db  0x00 ; '.'
00000000002211fe         db  0x00 ; '.'
00000000002211ff         db  0x00 ; '.'
0000000000221200         db  0x00 ; '.'
0000000000221201         db  0x00 ; '.'
                     byte_221202:
0000000000221202         db  0x00 ; '.'                                         ; DATA XREF=sub_31ea+4562
0000000000221203         db  0x00 ; '.'
0000000000221204         db  0x00 ; '.'
0000000000221205         db  0x00 ; '.'
0000000000221206         db  0x00 ; '.'
0000000000221207         db  0x00 ; '.'
0000000000221208         db  0x00 ; '.'
0000000000221209         db  0x00 ; '.'
000000000022120a         db  0x00 ; '.'
000000000022120b         db  0x00 ; '.'
000000000022120c         db  0x00 ; '.'
000000000022120d         db  0x00 ; '.'
000000000022120e         db  0x00 ; '.'
000000000022120f         db  0x00 ; '.'
0000000000221210         db  0x00 ; '.'
0000000000221211         db  0x00 ; '.'
0000000000221212         db  0x00 ; '.'
0000000000221213         db  0x00 ; '.'
0000000000221214         db  0x00 ; '.'
0000000000221215         db  0x00 ; '.'
0000000000221216         db  0x00 ; '.'
0000000000221217         db  0x00 ; '.'
0000000000221218         db  0x00 ; '.'
0000000000221219         db  0x00 ; '.'
000000000022121a         db  0x00 ; '.'
000000000022121b         db  0x00 ; '.'
000000000022121c         db  0x00 ; '.'
000000000022121d         db  0x00 ; '.'
000000000022121e         db  0x00 ; '.'
000000000022121f         db  0x00 ; '.'
0000000000221220         db  0x00 ; '.'
0000000000221221         db  0x00 ; '.'
0000000000221222         db  0x00 ; '.'
0000000000221223         db  0x00 ; '.'
0000000000221224         db  0x00 ; '.'
0000000000221225         db  0x00 ; '.'
0000000000221226         db  0x00 ; '.'
0000000000221227         db  0x00 ; '.'
0000000000221228         db  0x00 ; '.'
0000000000221229         db  0x00 ; '.'
000000000022122a         db  0x00 ; '.'
000000000022122b         db  0x00 ; '.'
000000000022122c         db  0x00 ; '.'
000000000022122d         db  0x00 ; '.'
000000000022122e         db  0x00 ; '.'
000000000022122f         db  0x00 ; '.'
0000000000221230         db  0x00 ; '.'
0000000000221231         db  0x00 ; '.'
0000000000221232         db  0x00 ; '.'
0000000000221233         db  0x00 ; '.'
0000000000221234         db  0x00 ; '.'
0000000000221235         db  0x00 ; '.'
0000000000221236         db  0x00 ; '.'
0000000000221237         db  0x00 ; '.'
0000000000221238         db  0x00 ; '.'
0000000000221239         db  0x00 ; '.'
000000000022123a         db  0x00 ; '.'
000000000022123b         db  0x00 ; '.'
000000000022123c         db  0x00 ; '.'
000000000022123d         db  0x00 ; '.'
000000000022123e         db  0x00 ; '.'
000000000022123f         db  0x00 ; '.'
0000000000221240         db  0x00 ; '.'
0000000000221241         db  0x00 ; '.'
0000000000221242         db  0x00 ; '.'
0000000000221243         db  0x00 ; '.'
0000000000221244         db  0x00 ; '.'
0000000000221245         db  0x00 ; '.'
0000000000221246         db  0x00 ; '.'
0000000000221247         db  0x00 ; '.'
0000000000221248         db  0x00 ; '.'
0000000000221249         db  0x00 ; '.'
000000000022124a         db  0x00 ; '.'
000000000022124b         db  0x00 ; '.'
000000000022124c         db  0x00 ; '.'
000000000022124d         db  0x00 ; '.'
000000000022124e         db  0x00 ; '.'
000000000022124f         db  0x00 ; '.'
0000000000221250         db  0x00 ; '.'
0000000000221251         db  0x00 ; '.'
0000000000221252         db  0x00 ; '.'
0000000000221253         db  0x00 ; '.'
0000000000221254         db  0x00 ; '.'
0000000000221255         db  0x00 ; '.'
0000000000221256         db  0x00 ; '.'
0000000000221257         db  0x00 ; '.'
0000000000221258         db  0x00 ; '.'
0000000000221259         db  0x00 ; '.'
000000000022125a         db  0x00 ; '.'
000000000022125b         db  0x00 ; '.'
000000000022125c         db  0x00 ; '.'
000000000022125d         db  0x00 ; '.'
000000000022125e         db  0x00 ; '.'
000000000022125f         db  0x00 ; '.'
0000000000221260         db  0x00 ; '.'
0000000000221261         db  0x00 ; '.'
0000000000221262         db  0x00 ; '.'
0000000000221263         db  0x00 ; '.'
0000000000221264         db  0x00 ; '.'
0000000000221265         db  0x00 ; '.'
0000000000221266         db  0x00 ; '.'
0000000000221267         db  0x00 ; '.'
0000000000221268         db  0x00 ; '.'
0000000000221269         db  0x00 ; '.'
000000000022126a         db  0x00 ; '.'
000000000022126b         db  0x00 ; '.'
000000000022126c         db  0x00 ; '.'
000000000022126d         db  0x00 ; '.'
000000000022126e         db  0x00 ; '.'
000000000022126f         db  0x00 ; '.'
0000000000221270         db  0x00 ; '.'
0000000000221271         db  0x00 ; '.'
0000000000221272         db  0x00 ; '.'
0000000000221273         db  0x00 ; '.'
0000000000221274         db  0x00 ; '.'
0000000000221275         db  0x00 ; '.'
0000000000221276         db  0x00 ; '.'
0000000000221277         db  0x00 ; '.'
0000000000221278         db  0x00 ; '.'
0000000000221279         db  0x00 ; '.'
000000000022127a         db  0x00 ; '.'
000000000022127b         db  0x00 ; '.'
000000000022127c         db  0x00 ; '.'
000000000022127d         db  0x00 ; '.'
000000000022127e         db  0x00 ; '.'
000000000022127f         db  0x00 ; '.'
0000000000221280         db  0x00 ; '.'
0000000000221281         db  0x00 ; '.'
0000000000221282         db  0x00 ; '.'
0000000000221283         db  0x00 ; '.'
0000000000221284         db  0x00 ; '.'
0000000000221285         db  0x00 ; '.'
0000000000221286         db  0x00 ; '.'
0000000000221287         db  0x00 ; '.'
0000000000221288         db  0x00 ; '.'
0000000000221289         db  0x00 ; '.'
000000000022128a         db  0x00 ; '.'
000000000022128b         db  0x00 ; '.'
000000000022128c         db  0x00 ; '.'
000000000022128d         db  0x00 ; '.'
000000000022128e         db  0x00 ; '.'
000000000022128f         db  0x00 ; '.'
0000000000221290         db  0x00 ; '.'
0000000000221291         db  0x00 ; '.'
0000000000221292         db  0x00 ; '.'
0000000000221293         db  0x00 ; '.'
0000000000221294         db  0x00 ; '.'
0000000000221295         db  0x00 ; '.'
0000000000221296         db  0x00 ; '.'
0000000000221297         db  0x00 ; '.'
0000000000221298         db  0x00 ; '.'
0000000000221299         db  0x00 ; '.'
000000000022129a         db  0x00 ; '.'
000000000022129b         db  0x00 ; '.'
000000000022129c         db  0x00 ; '.'
000000000022129d         db  0x00 ; '.'
000000000022129e         db  0x00 ; '.'
000000000022129f         db  0x00 ; '.'
00000000002212a0         db  0x00 ; '.'
00000000002212a1         db  0x00 ; '.'
00000000002212a2         db  0x00 ; '.'
00000000002212a3         db  0x00 ; '.'
00000000002212a4         db  0x00 ; '.'
00000000002212a5         db  0x00 ; '.'
00000000002212a6         db  0x00 ; '.'
00000000002212a7         db  0x00 ; '.'
00000000002212a8         db  0x00 ; '.'
00000000002212a9         db  0x00 ; '.'
00000000002212aa         db  0x00 ; '.'
00000000002212ab         db  0x00 ; '.'
00000000002212ac         db  0x00 ; '.'
00000000002212ad         db  0x00 ; '.'
00000000002212ae         db  0x00 ; '.'
00000000002212af         db  0x00 ; '.'
00000000002212b0         db  0x00 ; '.'
00000000002212b1         db  0x00 ; '.'
00000000002212b2         db  0x00 ; '.'
00000000002212b3         db  0x00 ; '.'
00000000002212b4         db  0x00 ; '.'
00000000002212b5         db  0x00 ; '.'
00000000002212b6         db  0x00 ; '.'
00000000002212b7         db  0x00 ; '.'
00000000002212b8         db  0x00 ; '.'
00000000002212b9         db  0x00 ; '.'
00000000002212ba         db  0x00 ; '.'
00000000002212bb         db  0x00 ; '.'
00000000002212bc         db  0x00 ; '.'
00000000002212bd         db  0x00 ; '.'
00000000002212be         db  0x00 ; '.'
00000000002212bf         db  0x00 ; '.'
00000000002212c0         db  0x00 ; '.'
00000000002212c1         db  0x00 ; '.'
00000000002212c2         db  0x00 ; '.'
00000000002212c3         db  0x00 ; '.'
00000000002212c4         db  0x00 ; '.'
00000000002212c5         db  0x00 ; '.'
00000000002212c6         db  0x00 ; '.'
00000000002212c7         db  0x00 ; '.'
00000000002212c8         db  0x00 ; '.'
00000000002212c9         db  0x00 ; '.'
00000000002212ca         db  0x00 ; '.'
00000000002212cb         db  0x00 ; '.'
00000000002212cc         db  0x00 ; '.'
00000000002212cd         db  0x00 ; '.'
00000000002212ce         db  0x00 ; '.'
00000000002212cf         db  0x00 ; '.'
00000000002212d0         db  0x00 ; '.'
00000000002212d1         db  0x00 ; '.'
00000000002212d2         db  0x00 ; '.'
00000000002212d3         db  0x00 ; '.'
00000000002212d4         db  0x00 ; '.'
00000000002212d5         db  0x00 ; '.'
00000000002212d6         db  0x00 ; '.'
00000000002212d7         db  0x00 ; '.'
00000000002212d8         db  0x00 ; '.'
00000000002212d9         db  0x00 ; '.'
00000000002212da         db  0x00 ; '.'
00000000002212db         db  0x00 ; '.'
00000000002212dc         db  0x00 ; '.'
00000000002212dd         db  0x00 ; '.'
00000000002212de         db  0x00 ; '.'
00000000002212df         db  0x00 ; '.'
                     number_of_occurs:
00000000002212e0         db  0x00 ; '.'                                         ; DATA XREF=main+1639, main+2291, main+2422, main+2621, main+3001, main+3958, sub_31ea+2626
00000000002212e1         db  0x00 ; '.'
00000000002212e2         db  0x00 ; '.'
00000000002212e3         db  0x00 ; '.'
00000000002212e4         db  0x00 ; '.'
00000000002212e5         db  0x00 ; '.'
00000000002212e6         db  0x00 ; '.'
00000000002212e7         db  0x00 ; '.'
                     occurs_alloc:
00000000002212e8         db  0x00 ; '.'                                         ; DATA XREF=main+2298, main+3942
00000000002212e9         db  0x00 ; '.'
00000000002212ea         db  0x00 ; '.'
00000000002212eb         db  0x00 ; '.'
00000000002212ec         db  0x00 ; '.'
00000000002212ed         db  0x00 ; '.'
00000000002212ee         db  0x00 ; '.'
00000000002212ef         db  0x00 ; '.'
                     occurs_table:
00000000002212f0         db  0x00 ; '.'                                         ; DATA XREF=main+2305, main+3067, main+3968, sub_31ea+440
00000000002212f1         db  0x00 ; '.'
00000000002212f2         db  0x00 ; '.'
00000000002212f3         db  0x00 ; '.'
00000000002212f4         db  0x00 ; '.'
00000000002212f5         db  0x00 ; '.'
00000000002212f6         db  0x00 ; '.'
00000000002212f7         db  0x00 ; '.'
                     text_buffers:
00000000002212f8         db  0x00 ; '.'                                         ; DATA XREF=main+1100, main+1271, main+1725, main+1748, main+3149, sub_31ea+4661
00000000002212f9         db  0x00 ; '.'
00000000002212fa         db  0x00 ; '.'
00000000002212fb         db  0x00 ; '.'
00000000002212fc         db  0x00 ; '.'
00000000002212fd         db  0x00 ; '.'
00000000002212fe         db  0x00 ; '.'
00000000002212ff         db  0x00 ; '.'
                     file_line_count:
0000000000221300         db  0x00 ; '.'                                         ; DATA XREF=main+1043, main+1259, main+2569, sub_31ea+147, sub_31ea+2012, sub_31ea+4649
0000000000221301         db  0x00 ; '.'
0000000000221302         db  0x00 ; '.'
0000000000221303         db  0x00 ; '.'
0000000000221304         db  0x00 ; '.'
0000000000221305         db  0x00 ; '.'
0000000000221306         db  0x00 ; '.'
0000000000221307         db  0x00 ; '.'
                     input_file_name:
0000000000221308         db  0x00 ; '.'                                         ; DATA XREF=main+979, main+1149, main+1242, main+1278, main+1718, sub_31ea+205, sub_31ea+1966, sub_31ea+4632, sub_31ea+4719, sub_31ea+4872
0000000000221309         db  0x00 ; '.'
000000000022130a         db  0x00 ; '.'
000000000022130b         db  0x00 ; '.'
000000000022130c         db  0x00 ; '.'
000000000022130d         db  0x00 ; '.'
000000000022130e         db  0x00 ; '.'
000000000022130f         db  0x00 ; '.'
                     total_line_count:
0000000000221310         db  0x00 ; '.'                                         ; DATA XREF=main+1650, main+2557, main+2593, main+3367, main+3485, main+3635, sub_31ea+5697
0000000000221311         db  0x00 ; '.'
0000000000221312         db  0x00 ; '.'
0000000000221313         db  0x00 ; '.'
0000000000221314         db  0x00 ; '.'
0000000000221315         db  0x00 ; '.'
0000000000221316         db  0x00 ; '.'
0000000000221317         db  0x00 ; '.'
                     number_input_files:
0000000000221318         db  0x00 ; '.'                                         ; DATA XREF=main+918, main+967, main+1031, main+1094, main+1285, main+1632, main+2604, sub_31ea+262, sub_31ea+4612
0000000000221319         db  0x00 ; '.'
000000000022131a         db  0x00 ; '.'
000000000022131b         db  0x00 ; '.'
000000000022131c         db  0x00 ; '.'
000000000022131d         db  0x00 ; '.'
000000000022131e         db  0x00 ; '.'
000000000022131f         db  0x00 ; '.'
                     only_table:
0000000000221320         db  0x00 ; '.'                                         ; DATA XREF=main+1606, main+2266
0000000000221321         db  0x00 ; '.'
0000000000221322         db  0x00 ; '.'
0000000000221323         db  0x00 ; '.'
0000000000221324         db  0x00 ; '.'
0000000000221325         db  0x00 ; '.'
0000000000221326         db  0x00 ; '.'
0000000000221327         db  0x00 ; '.'
0000000000221328         db  0x00 ; '.'
0000000000221329         db  0x00 ; '.'
000000000022132a         db  0x00 ; '.'
000000000022132b         db  0x00 ; '.'
000000000022132c         db  0x00 ; '.'
000000000022132d         db  0x00 ; '.'
000000000022132e         db  0x00 ; '.'
000000000022132f         db  0x00 ; '.'
                     qword_221330:
0000000000221330         db  0x00 ; '.'                                         ; DATA XREF=main+1618, main+2259
0000000000221331         db  0x00 ; '.'
0000000000221332         db  0x00 ; '.'
0000000000221333         db  0x00 ; '.'
0000000000221334         db  0x00 ; '.'
0000000000221335         db  0x00 ; '.'
0000000000221336         db  0x00 ; '.'
0000000000221337         db  0x00 ; '.'
0000000000221338         db  0x00 ; '.'
0000000000221339         db  0x00 ; '.'
000000000022133a         db  0x00 ; '.'
000000000022133b         db  0x00 ; '.'
000000000022133c         db  0x00 ; '.'
000000000022133d         db  0x00 ; '.'
000000000022133e         db  0x00 ; '.'
000000000022133f         db  0x00 ; '.'
                     ignore_table:
0000000000221340         db  0x00 ; '.'                                         ; DATA XREF=main+1568, main+2224
0000000000221341         db  0x00 ; '.'
0000000000221342         db  0x00 ; '.'
0000000000221343         db  0x00 ; '.'
0000000000221344         db  0x00 ; '.'
0000000000221345         db  0x00 ; '.'
0000000000221346         db  0x00 ; '.'
0000000000221347         db  0x00 ; '.'
0000000000221348         db  0x00 ; '.'
0000000000221349         db  0x00 ; '.'
000000000022134a         db  0x00 ; '.'
000000000022134b         db  0x00 ; '.'
000000000022134c         db  0x00 ; '.'
000000000022134d         db  0x00 ; '.'
000000000022134e         db  0x00 ; '.'
000000000022134f         db  0x00 ; '.'
                     qword_221350:
0000000000221350         db  0x00 ; '.'                                         ; DATA XREF=main+1580, main+2217
0000000000221351         db  0x00 ; '.'
0000000000221352         db  0x00 ; '.'
0000000000221353         db  0x00 ; '.'
0000000000221354         db  0x00 ; '.'
0000000000221355         db  0x00 ; '.'
0000000000221356         db  0x00 ; '.'
0000000000221357         db  0x00 ; '.'
                     reference_max_width:
0000000000221358         db  0x00 ; '.'                                         ; DATA XREF=main+1672, main+2371, main+2380, main+2675, sub_31ea+115, sub_31ea+242, sub_31ea+251, sub_31ea+274, sub_31ea+289, sub_31ea+3683, sub_31ea+4165
0000000000221359         db  0x00 ; '.'
000000000022135a         db  0x00 ; '.'
000000000022135b         db  0x00 ; '.'
000000000022135c         db  0x00 ; '.'
000000000022135d         db  0x00 ; '.'
000000000022135e         db  0x00 ; '.'
000000000022135f         db  0x00 ; '.'
                     maximum_word_length:
0000000000221360         db  0x00 ; '.'                                         ; DATA XREF=main+1661, main+2169, main+2183, sub_31ea+648
0000000000221361         db  0x00 ; '.'
0000000000221362         db  0x00 ; '.'
0000000000221363         db  0x00 ; '.'
0000000000221364         db  0x00 ; '.'
0000000000221365         db  0x00 ; '.'
0000000000221366         db  0x00 ; '.'
0000000000221367         db  0x00 ; '.'
0000000000221368         db  0x00 ; '.'
0000000000221369         db  0x00 ; '.'
000000000022136a         db  0x00 ; '.'
000000000022136b         db  0x00 ; '.'
000000000022136c         db  0x00 ; '.'
000000000022136d         db  0x00 ; '.'
000000000022136e         db  0x00 ; '.'
000000000022136f         db  0x00 ; '.'
0000000000221370         db  0x00 ; '.'
0000000000221371         db  0x00 ; '.'
0000000000221372         db  0x00 ; '.'
0000000000221373         db  0x00 ; '.'
0000000000221374         db  0x00 ; '.'
0000000000221375         db  0x00 ; '.'
0000000000221376         db  0x00 ; '.'
0000000000221377         db  0x00 ; '.'
0000000000221378         db  0x00 ; '.'
0000000000221379         db  0x00 ; '.'
000000000022137a         db  0x00 ; '.'
000000000022137b         db  0x00 ; '.'
000000000022137c         db  0x00 ; '.'
000000000022137d         db  0x00 ; '.'
000000000022137e         db  0x00 ; '.'
000000000022137f         db  0x00 ; '.'
                     word_fastmap:
0000000000221380         db  0x00 ; '.'                                         ; DATA XREF=main+1464, main+1689, main+3313, sub_31ea+376, sub_31ea+489, sub_31ea+1318, sub_31ea+1340, sub_31ea+1393, sub_31ea+1458, sub_31ea+2685, sub_31ea+2733
0000000000221381         db  0x00 ; '.'
0000000000221382         db  0x00 ; '.'
0000000000221383         db  0x00 ; '.'
0000000000221384         db  0x00 ; '.'
0000000000221385         db  0x00 ; '.'
0000000000221386         db  0x00 ; '.'
0000000000221387         db  0x00 ; '.'
0000000000221388         db  0x00 ; '.'
                     word_221389:        // word
0000000000221389         db  0x00 ; '.'                                         ; DATA XREF=main+1542, sub_31ea+5007
000000000022138a         db  0x00 ; '.'
000000000022138b         db  0x00 ; '.'
000000000022138c         db  0x00 ; '.'
000000000022138d         db  0x00 ; '.'
000000000022138e         db  0x00 ; '.'
000000000022138f         db  0x00 ; '.'
0000000000221390         db  0x00 ; '.'
0000000000221391         db  0x00 ; '.'
0000000000221392         db  0x00 ; '.'
0000000000221393         db  0x00 ; '.'
0000000000221394         db  0x00 ; '.'
0000000000221395         db  0x00 ; '.'
0000000000221396         db  0x00 ; '.'
0000000000221397         db  0x00 ; '.'
0000000000221398         db  0x00 ; '.'
0000000000221399         db  0x00 ; '.'
000000000022139a         db  0x00 ; '.'
000000000022139b         db  0x00 ; '.'
000000000022139c         db  0x00 ; '.'
000000000022139d         db  0x00 ; '.'
000000000022139e         db  0x00 ; '.'
000000000022139f         db  0x00 ; '.'
                     byte_2213a0:
00000000002213a0         db  0x00 ; '.'                                         ; DATA XREF=main+1535, sub_31ea+5000
00000000002213a1         db  0x00 ; '.'
00000000002213a2         db  0x00 ; '.'
00000000002213a3         db  0x00 ; '.'
00000000002213a4         db  0x00 ; '.'
00000000002213a5         db  0x00 ; '.'
00000000002213a6         db  0x00 ; '.'
00000000002213a7         db  0x00 ; '.'
00000000002213a8         db  0x00 ; '.'
00000000002213a9         db  0x00 ; '.'
00000000002213aa         db  0x00 ; '.'
00000000002213ab         db  0x00 ; '.'
00000000002213ac         db  0x00 ; '.'
00000000002213ad         db  0x00 ; '.'
00000000002213ae         db  0x00 ; '.'
00000000002213af         db  0x00 ; '.'
00000000002213b0         db  0x00 ; '.'
00000000002213b1         db  0x00 ; '.'
00000000002213b2         db  0x00 ; '.'
00000000002213b3         db  0x00 ; '.'
00000000002213b4         db  0x00 ; '.'
00000000002213b5         db  0x00 ; '.'
00000000002213b6         db  0x00 ; '.'
00000000002213b7         db  0x00 ; '.'
00000000002213b8         db  0x00 ; '.'
00000000002213b9         db  0x00 ; '.'
00000000002213ba         db  0x00 ; '.'
00000000002213bb         db  0x00 ; '.'
00000000002213bc         db  0x00 ; '.'
00000000002213bd         db  0x00 ; '.'
00000000002213be         db  0x00 ; '.'
00000000002213bf         db  0x00 ; '.'
00000000002213c0         db  0x00 ; '.'
00000000002213c1         db  0x00 ; '.'
00000000002213c2         db  0x00 ; '.'
00000000002213c3         db  0x00 ; '.'
00000000002213c4         db  0x00 ; '.'
00000000002213c5         db  0x00 ; '.'
00000000002213c6         db  0x00 ; '.'
00000000002213c7         db  0x00 ; '.'
00000000002213c8         db  0x00 ; '.'
00000000002213c9         db  0x00 ; '.'
00000000002213ca         db  0x00 ; '.'
00000000002213cb         db  0x00 ; '.'
00000000002213cc         db  0x00 ; '.'
00000000002213cd         db  0x00 ; '.'
00000000002213ce         db  0x00 ; '.'
00000000002213cf         db  0x00 ; '.'
00000000002213d0         db  0x00 ; '.'
00000000002213d1         db  0x00 ; '.'
00000000002213d2         db  0x00 ; '.'
00000000002213d3         db  0x00 ; '.'
00000000002213d4         db  0x00 ; '.'
00000000002213d5         db  0x00 ; '.'
00000000002213d6         db  0x00 ; '.'
00000000002213d7         db  0x00 ; '.'
00000000002213d8         db  0x00 ; '.'
00000000002213d9         db  0x00 ; '.'
00000000002213da         db  0x00 ; '.'
00000000002213db         db  0x00 ; '.'
00000000002213dc         db  0x00 ; '.'
00000000002213dd         db  0x00 ; '.'
00000000002213de         db  0x00 ; '.'
00000000002213df         db  0x00 ; '.'
00000000002213e0         db  0x00 ; '.'
00000000002213e1         db  0x00 ; '.'
00000000002213e2         db  0x00 ; '.'
00000000002213e3         db  0x00 ; '.'
00000000002213e4         db  0x00 ; '.'
00000000002213e5         db  0x00 ; '.'
00000000002213e6         db  0x00 ; '.'
00000000002213e7         db  0x00 ; '.'
00000000002213e8         db  0x00 ; '.'
00000000002213e9         db  0x00 ; '.'
00000000002213ea         db  0x00 ; '.'
00000000002213eb         db  0x00 ; '.'
00000000002213ec         db  0x00 ; '.'
00000000002213ed         db  0x00 ; '.'
00000000002213ee         db  0x00 ; '.'
00000000002213ef         db  0x00 ; '.'
00000000002213f0         db  0x00 ; '.'
00000000002213f1         db  0x00 ; '.'
00000000002213f2         db  0x00 ; '.'
00000000002213f3         db  0x00 ; '.'
00000000002213f4         db  0x00 ; '.'
00000000002213f5         db  0x00 ; '.'
00000000002213f6         db  0x00 ; '.'
00000000002213f7         db  0x00 ; '.'
00000000002213f8         db  0x00 ; '.'
00000000002213f9         db  0x00 ; '.'
00000000002213fa         db  0x00 ; '.'
00000000002213fb         db  0x00 ; '.'
00000000002213fc         db  0x00 ; '.'
00000000002213fd         db  0x00 ; '.'
00000000002213fe         db  0x00 ; '.'
00000000002213ff         db  0x00 ; '.'
0000000000221400         db  0x00 ; '.'
0000000000221401         db  0x00 ; '.'
0000000000221402         db  0x00 ; '.'
0000000000221403         db  0x00 ; '.'
0000000000221404         db  0x00 ; '.'
0000000000221405         db  0x00 ; '.'
0000000000221406         db  0x00 ; '.'
0000000000221407         db  0x00 ; '.'
0000000000221408         db  0x00 ; '.'
0000000000221409         db  0x00 ; '.'
000000000022140a         db  0x00 ; '.'
000000000022140b         db  0x00 ; '.'
000000000022140c         db  0x00 ; '.'
000000000022140d         db  0x00 ; '.'
000000000022140e         db  0x00 ; '.'
000000000022140f         db  0x00 ; '.'
0000000000221410         db  0x00 ; '.'
0000000000221411         db  0x00 ; '.'
0000000000221412         db  0x00 ; '.'
0000000000221413         db  0x00 ; '.'
0000000000221414         db  0x00 ; '.'
0000000000221415         db  0x00 ; '.'
0000000000221416         db  0x00 ; '.'
0000000000221417         db  0x00 ; '.'
0000000000221418         db  0x00 ; '.'
0000000000221419         db  0x00 ; '.'
000000000022141a         db  0x00 ; '.'
000000000022141b         db  0x00 ; '.'
000000000022141c         db  0x00 ; '.'
000000000022141d         db  0x00 ; '.'
000000000022141e         db  0x00 ; '.'
000000000022141f         db  0x00 ; '.'
0000000000221420         db  0x00 ; '.'
0000000000221421         db  0x00 ; '.'
0000000000221422         db  0x00 ; '.'
0000000000221423         db  0x00 ; '.'
0000000000221424         db  0x00 ; '.'
0000000000221425         db  0x00 ; '.'
0000000000221426         db  0x00 ; '.'
0000000000221427         db  0x00 ; '.'
0000000000221428         db  0x00 ; '.'
0000000000221429         db  0x00 ; '.'
000000000022142a         db  0x00 ; '.'
000000000022142b         db  0x00 ; '.'
000000000022142c         db  0x00 ; '.'
000000000022142d         db  0x00 ; '.'
000000000022142e         db  0x00 ; '.'
000000000022142f         db  0x00 ; '.'
0000000000221430         db  0x00 ; '.'
0000000000221431         db  0x00 ; '.'
0000000000221432         db  0x00 ; '.'
0000000000221433         db  0x00 ; '.'
0000000000221434         db  0x00 ; '.'
0000000000221435         db  0x00 ; '.'
0000000000221436         db  0x00 ; '.'
0000000000221437         db  0x00 ; '.'
0000000000221438         db  0x00 ; '.'
0000000000221439         db  0x00 ; '.'
000000000022143a         db  0x00 ; '.'
000000000022143b         db  0x00 ; '.'
000000000022143c         db  0x00 ; '.'
000000000022143d         db  0x00 ; '.'
000000000022143e         db  0x00 ; '.'
000000000022143f         db  0x00 ; '.'
0000000000221440         db  0x00 ; '.'
0000000000221441         db  0x00 ; '.'
0000000000221442         db  0x00 ; '.'
0000000000221443         db  0x00 ; '.'
0000000000221444         db  0x00 ; '.'
0000000000221445         db  0x00 ; '.'
0000000000221446         db  0x00 ; '.'
0000000000221447         db  0x00 ; '.'
0000000000221448         db  0x00 ; '.'
0000000000221449         db  0x00 ; '.'
000000000022144a         db  0x00 ; '.'
000000000022144b         db  0x00 ; '.'
000000000022144c         db  0x00 ; '.'
000000000022144d         db  0x00 ; '.'
000000000022144e         db  0x00 ; '.'
000000000022144f         db  0x00 ; '.'
0000000000221450         db  0x00 ; '.'
0000000000221451         db  0x00 ; '.'
0000000000221452         db  0x00 ; '.'
0000000000221453         db  0x00 ; '.'
0000000000221454         db  0x00 ; '.'
0000000000221455         db  0x00 ; '.'
0000000000221456         db  0x00 ; '.'
0000000000221457         db  0x00 ; '.'
0000000000221458         db  0x00 ; '.'
0000000000221459         db  0x00 ; '.'
000000000022145a         db  0x00 ; '.'
000000000022145b         db  0x00 ; '.'
000000000022145c         db  0x00 ; '.'
000000000022145d         db  0x00 ; '.'
000000000022145e         db  0x00 ; '.'
000000000022145f         db  0x00 ; '.'
0000000000221460         db  0x00 ; '.'
0000000000221461         db  0x00 ; '.'
0000000000221462         db  0x00 ; '.'
0000000000221463         db  0x00 ; '.'
0000000000221464         db  0x00 ; '.'
0000000000221465         db  0x00 ; '.'
0000000000221466         db  0x00 ; '.'
0000000000221467         db  0x00 ; '.'
0000000000221468         db  0x00 ; '.'
0000000000221469         db  0x00 ; '.'
000000000022146a         db  0x00 ; '.'
000000000022146b         db  0x00 ; '.'
000000000022146c         db  0x00 ; '.'
000000000022146d         db  0x00 ; '.'
000000000022146e         db  0x00 ; '.'
000000000022146f         db  0x00 ; '.'
0000000000221470         db  0x00 ; '.'
0000000000221471         db  0x00 ; '.'
0000000000221472         db  0x00 ; '.'
0000000000221473         db  0x00 ; '.'
0000000000221474         db  0x00 ; '.'
0000000000221475         db  0x00 ; '.'
0000000000221476         db  0x00 ; '.'
0000000000221477         db  0x00 ; '.'
0000000000221478         db  0x00 ; '.'
0000000000221479         db  0x00 ; '.'
000000000022147a         db  0x00 ; '.'
000000000022147b         db  0x00 ; '.'
000000000022147c         db  0x00 ; '.'
000000000022147d         db  0x00 ; '.'
000000000022147e         db  0x00 ; '.'
000000000022147f         db  0x00 ; '.'
                     word_regs:
0000000000221480         db  0x00 ; '.'                                         ; DATA XREF=main+2076
0000000000221481         db  0x00 ; '.'
0000000000221482         db  0x00 ; '.'
0000000000221483         db  0x00 ; '.'
0000000000221484         db  0x00 ; '.'
0000000000221485         db  0x00 ; '.'
0000000000221486         db  0x00 ; '.'
0000000000221487         db  0x00 ; '.'
                     qword_221488:
0000000000221488         db  0x00 ; '.'                                         ; DATA XREF=main+2126
0000000000221489         db  0x00 ; '.'
000000000022148a         db  0x00 ; '.'
000000000022148b         db  0x00 ; '.'
000000000022148c         db  0x00 ; '.'
000000000022148d         db  0x00 ; '.'
000000000022148e         db  0x00 ; '.'
000000000022148f         db  0x00 ; '.'
                     qword_221490:
0000000000221490         db  0x00 ; '.'                                         ; DATA XREF=main+2136
0000000000221491         db  0x00 ; '.'
0000000000221492         db  0x00 ; '.'
0000000000221493         db  0x00 ; '.'
0000000000221494         db  0x00 ; '.'
0000000000221495         db  0x00 ; '.'
0000000000221496         db  0x00 ; '.'
0000000000221497         db  0x00 ; '.'
0000000000221498         db  0x00 ; '.'
0000000000221499         db  0x00 ; '.'
000000000022149a         db  0x00 ; '.'
000000000022149b         db  0x00 ; '.'
000000000022149c         db  0x00 ; '.'
000000000022149d         db  0x00 ; '.'
000000000022149e         db  0x00 ; '.'
000000000022149f         db  0x00 ; '.'
                     context_regs:
00000000002214a0         db  0x00 ; '.'                                         ; DATA XREF=main+1919
00000000002214a1         db  0x00 ; '.'
00000000002214a2         db  0x00 ; '.'
00000000002214a3         db  0x00 ; '.'
00000000002214a4         db  0x00 ; '.'
00000000002214a5         db  0x00 ; '.'
00000000002214a6         db  0x00 ; '.'
00000000002214a7         db  0x00 ; '.'
00000000002214a8         db  0x00 ; '.'
00000000002214a9         db  0x00 ; '.'
00000000002214aa         db  0x00 ; '.'
00000000002214ab         db  0x00 ; '.'
00000000002214ac         db  0x00 ; '.'
00000000002214ad         db  0x00 ; '.'
00000000002214ae         db  0x00 ; '.'
00000000002214af         db  0x00 ; '.'
                     qword_2214b0:
00000000002214b0         db  0x00 ; '.'                                         ; DATA XREF=main+1974
00000000002214b1         db  0x00 ; '.'
00000000002214b2         db  0x00 ; '.'
00000000002214b3         db  0x00 ; '.'
00000000002214b4         db  0x00 ; '.'
00000000002214b5         db  0x00 ; '.'
00000000002214b6         db  0x00 ; '.'
00000000002214b7         db  0x00 ; '.'
00000000002214b8         db  0x00 ; '.'
00000000002214b9         db  0x00 ; '.'
00000000002214ba         db  0x00 ; '.'
00000000002214bb         db  0x00 ; '.'
00000000002214bc         db  0x00 ; '.'
00000000002214bd         db  0x00 ; '.'
00000000002214be         db  0x00 ; '.'
00000000002214bf         db  0x00 ; '.'
                     folded_chars:
00000000002214c0         db  0x00 ; '.'                                         ; DATA XREF=main+1345, compare_words+107, compile_regex+27
00000000002214c1         db  0x00 ; '.'
00000000002214c2         db  0x00 ; '.'
00000000002214c3         db  0x00 ; '.'
00000000002214c4         db  0x00 ; '.'
00000000002214c5         db  0x00 ; '.'
00000000002214c6         db  0x00 ; '.'
00000000002214c7         db  0x00 ; '.'
00000000002214c8         db  0x00 ; '.'
00000000002214c9         db  0x00 ; '.'
00000000002214ca         db  0x00 ; '.'
00000000002214cb         db  0x00 ; '.'
00000000002214cc         db  0x00 ; '.'
00000000002214cd         db  0x00 ; '.'
00000000002214ce         db  0x00 ; '.'
00000000002214cf         db  0x00 ; '.'
00000000002214d0         db  0x00 ; '.'
00000000002214d1         db  0x00 ; '.'
00000000002214d2         db  0x00 ; '.'
00000000002214d3         db  0x00 ; '.'
00000000002214d4         db  0x00 ; '.'
00000000002214d5         db  0x00 ; '.'
00000000002214d6         db  0x00 ; '.'
00000000002214d7         db  0x00 ; '.'
00000000002214d8         db  0x00 ; '.'
00000000002214d9         db  0x00 ; '.'
00000000002214da         db  0x00 ; '.'
00000000002214db         db  0x00 ; '.'
00000000002214dc         db  0x00 ; '.'
00000000002214dd         db  0x00 ; '.'
00000000002214de         db  0x00 ; '.'
00000000002214df         db  0x00 ; '.'
00000000002214e0         db  0x00 ; '.'
00000000002214e1         db  0x00 ; '.'
00000000002214e2         db  0x00 ; '.'
00000000002214e3         db  0x00 ; '.'
00000000002214e4         db  0x00 ; '.'
00000000002214e5         db  0x00 ; '.'
00000000002214e6         db  0x00 ; '.'
00000000002214e7         db  0x00 ; '.'
00000000002214e8         db  0x00 ; '.'
00000000002214e9         db  0x00 ; '.'
00000000002214ea         db  0x00 ; '.'
00000000002214eb         db  0x00 ; '.'
00000000002214ec         db  0x00 ; '.'
00000000002214ed         db  0x00 ; '.'
00000000002214ee         db  0x00 ; '.'
00000000002214ef         db  0x00 ; '.'
00000000002214f0         db  0x00 ; '.'
00000000002214f1         db  0x00 ; '.'
00000000002214f2         db  0x00 ; '.'
00000000002214f3         db  0x00 ; '.'
00000000002214f4         db  0x00 ; '.'
00000000002214f5         db  0x00 ; '.'
00000000002214f6         db  0x00 ; '.'
00000000002214f7         db  0x00 ; '.'
00000000002214f8         db  0x00 ; '.'
00000000002214f9         db  0x00 ; '.'
00000000002214fa         db  0x00 ; '.'
00000000002214fb         db  0x00 ; '.'
00000000002214fc         db  0x00 ; '.'
00000000002214fd         db  0x00 ; '.'
00000000002214fe         db  0x00 ; '.'
00000000002214ff         db  0x00 ; '.'
0000000000221500         db  0x00 ; '.'
0000000000221501         db  0x00 ; '.'
0000000000221502         db  0x00 ; '.'
0000000000221503         db  0x00 ; '.'
0000000000221504         db  0x00 ; '.'
0000000000221505         db  0x00 ; '.'
0000000000221506         db  0x00 ; '.'
0000000000221507         db  0x00 ; '.'
0000000000221508         db  0x00 ; '.'
0000000000221509         db  0x00 ; '.'
000000000022150a         db  0x00 ; '.'
000000000022150b         db  0x00 ; '.'
000000000022150c         db  0x00 ; '.'
000000000022150d         db  0x00 ; '.'
000000000022150e         db  0x00 ; '.'
000000000022150f         db  0x00 ; '.'
0000000000221510         db  0x00 ; '.'
0000000000221511         db  0x00 ; '.'
0000000000221512         db  0x00 ; '.'
0000000000221513         db  0x00 ; '.'
0000000000221514         db  0x00 ; '.'
0000000000221515         db  0x00 ; '.'
0000000000221516         db  0x00 ; '.'
0000000000221517         db  0x00 ; '.'
0000000000221518         db  0x00 ; '.'
0000000000221519         db  0x00 ; '.'
000000000022151a         db  0x00 ; '.'
000000000022151b         db  0x00 ; '.'
000000000022151c         db  0x00 ; '.'
000000000022151d         db  0x00 ; '.'
000000000022151e         db  0x00 ; '.'
000000000022151f         db  0x00 ; '.'
0000000000221520         db  0x00 ; '.'
0000000000221521         db  0x00 ; '.'
0000000000221522         db  0x00 ; '.'
0000000000221523         db  0x00 ; '.'
0000000000221524         db  0x00 ; '.'
0000000000221525         db  0x00 ; '.'
0000000000221526         db  0x00 ; '.'
0000000000221527         db  0x00 ; '.'
0000000000221528         db  0x00 ; '.'
0000000000221529         db  0x00 ; '.'
000000000022152a         db  0x00 ; '.'
000000000022152b         db  0x00 ; '.'
000000000022152c         db  0x00 ; '.'
000000000022152d         db  0x00 ; '.'
000000000022152e         db  0x00 ; '.'
000000000022152f         db  0x00 ; '.'
0000000000221530         db  0x00 ; '.'
0000000000221531         db  0x00 ; '.'
0000000000221532         db  0x00 ; '.'
0000000000221533         db  0x00 ; '.'
0000000000221534         db  0x00 ; '.'
0000000000221535         db  0x00 ; '.'
0000000000221536         db  0x00 ; '.'
0000000000221537         db  0x00 ; '.'
0000000000221538         db  0x00 ; '.'
0000000000221539         db  0x00 ; '.'
000000000022153a         db  0x00 ; '.'
000000000022153b         db  0x00 ; '.'
000000000022153c         db  0x00 ; '.'
000000000022153d         db  0x00 ; '.'
000000000022153e         db  0x00 ; '.'
000000000022153f         db  0x00 ; '.'
0000000000221540         db  0x00 ; '.'
0000000000221541         db  0x00 ; '.'
0000000000221542         db  0x00 ; '.'
0000000000221543         db  0x00 ; '.'
0000000000221544         db  0x00 ; '.'
0000000000221545         db  0x00 ; '.'
0000000000221546         db  0x00 ; '.'
0000000000221547         db  0x00 ; '.'
0000000000221548         db  0x00 ; '.'
0000000000221549         db  0x00 ; '.'
000000000022154a         db  0x00 ; '.'
000000000022154b         db  0x00 ; '.'
000000000022154c         db  0x00 ; '.'
000000000022154d         db  0x00 ; '.'
000000000022154e         db  0x00 ; '.'
000000000022154f         db  0x00 ; '.'
0000000000221550         db  0x00 ; '.'
0000000000221551         db  0x00 ; '.'
0000000000221552         db  0x00 ; '.'
0000000000221553         db  0x00 ; '.'
0000000000221554         db  0x00 ; '.'
0000000000221555         db  0x00 ; '.'
0000000000221556         db  0x00 ; '.'
0000000000221557         db  0x00 ; '.'
0000000000221558         db  0x00 ; '.'
0000000000221559         db  0x00 ; '.'
000000000022155a         db  0x00 ; '.'
000000000022155b         db  0x00 ; '.'
000000000022155c         db  0x00 ; '.'
000000000022155d         db  0x00 ; '.'
000000000022155e         db  0x00 ; '.'
000000000022155f         db  0x00 ; '.'
0000000000221560         db  0x00 ; '.'
0000000000221561         db  0x00 ; '.'
0000000000221562         db  0x00 ; '.'
0000000000221563         db  0x00 ; '.'
0000000000221564         db  0x00 ; '.'
0000000000221565         db  0x00 ; '.'
0000000000221566         db  0x00 ; '.'
0000000000221567         db  0x00 ; '.'
0000000000221568         db  0x00 ; '.'
0000000000221569         db  0x00 ; '.'
000000000022156a         db  0x00 ; '.'
000000000022156b         db  0x00 ; '.'
000000000022156c         db  0x00 ; '.'
000000000022156d         db  0x00 ; '.'
000000000022156e         db  0x00 ; '.'
000000000022156f         db  0x00 ; '.'
0000000000221570         db  0x00 ; '.'
0000000000221571         db  0x00 ; '.'
0000000000221572         db  0x00 ; '.'
0000000000221573         db  0x00 ; '.'
0000000000221574         db  0x00 ; '.'
0000000000221575         db  0x00 ; '.'
0000000000221576         db  0x00 ; '.'
0000000000221577         db  0x00 ; '.'
0000000000221578         db  0x00 ; '.'
0000000000221579         db  0x00 ; '.'
000000000022157a         db  0x00 ; '.'
000000000022157b         db  0x00 ; '.'
000000000022157c         db  0x00 ; '.'
000000000022157d         db  0x00 ; '.'
000000000022157e         db  0x00 ; '.'
000000000022157f         db  0x00 ; '.'
0000000000221580         db  0x00 ; '.'
0000000000221581         db  0x00 ; '.'
0000000000221582         db  0x00 ; '.'
0000000000221583         db  0x00 ; '.'
0000000000221584         db  0x00 ; '.'
0000000000221585         db  0x00 ; '.'
0000000000221586         db  0x00 ; '.'
0000000000221587         db  0x00 ; '.'
0000000000221588         db  0x00 ; '.'
0000000000221589         db  0x00 ; '.'
000000000022158a         db  0x00 ; '.'
000000000022158b         db  0x00 ; '.'
000000000022158c         db  0x00 ; '.'
000000000022158d         db  0x00 ; '.'
000000000022158e         db  0x00 ; '.'
000000000022158f         db  0x00 ; '.'
0000000000221590         db  0x00 ; '.'
0000000000221591         db  0x00 ; '.'
0000000000221592         db  0x00 ; '.'
0000000000221593         db  0x00 ; '.'
0000000000221594         db  0x00 ; '.'
0000000000221595         db  0x00 ; '.'
0000000000221596         db  0x00 ; '.'
0000000000221597         db  0x00 ; '.'
0000000000221598         db  0x00 ; '.'
0000000000221599         db  0x00 ; '.'
000000000022159a         db  0x00 ; '.'
000000000022159b         db  0x00 ; '.'
000000000022159c         db  0x00 ; '.'
000000000022159d         db  0x00 ; '.'
000000000022159e         db  0x00 ; '.'
000000000022159f         db  0x00 ; '.'
00000000002215a0         db  0x00 ; '.'
00000000002215a1         db  0x00 ; '.'
00000000002215a2         db  0x00 ; '.'
00000000002215a3         db  0x00 ; '.'
00000000002215a4         db  0x00 ; '.'
00000000002215a5         db  0x00 ; '.'
00000000002215a6         db  0x00 ; '.'
00000000002215a7         db  0x00 ; '.'
00000000002215a8         db  0x00 ; '.'
00000000002215a9         db  0x00 ; '.'
00000000002215aa         db  0x00 ; '.'
00000000002215ab         db  0x00 ; '.'
00000000002215ac         db  0x00 ; '.'
00000000002215ad         db  0x00 ; '.'
00000000002215ae         db  0x00 ; '.'
00000000002215af         db  0x00 ; '.'
00000000002215b0         db  0x00 ; '.'
00000000002215b1         db  0x00 ; '.'
00000000002215b2         db  0x00 ; '.'
00000000002215b3         db  0x00 ; '.'
00000000002215b4         db  0x00 ; '.'
00000000002215b5         db  0x00 ; '.'
00000000002215b6         db  0x00 ; '.'
00000000002215b7         db  0x00 ; '.'
00000000002215b8         db  0x00 ; '.'
00000000002215b9         db  0x00 ; '.'
00000000002215ba         db  0x00 ; '.'
00000000002215bb         db  0x00 ; '.'
00000000002215bc         db  0x00 ; '.'
00000000002215bd         db  0x00 ; '.'
00000000002215be         db  0x00 ; '.'
00000000002215bf         db  0x00 ; '.'
                     word_regex:
00000000002215c0         db  0x00 ; '.'                                         ; DATA XREF=main+710, main+726, main+1424, main+2044, main+2456, main+3290, main+3385, main+3856, sub_31ea+60, sub_31ea+677, sub_31ea+851
00000000002215c1         db  0x00 ; '.'
00000000002215c2         db  0x00 ; '.'
00000000002215c3         db  0x00 ; '.'
00000000002215c4         db  0x00 ; '.'
00000000002215c5         db  0x00 ; '.'
00000000002215c6         db  0x00 ; '.'
00000000002215c7         db  0x00 ; '.'
00000000002215c8         db  0x00 ; '.'                                         ; DATA XREF=main+2083, main+3203
00000000002215c9         db  0x00 ; '.'
00000000002215ca         db  0x00 ; '.'
00000000002215cb         db  0x00 ; '.'
00000000002215cc         db  0x00 ; '.'
00000000002215cd         db  0x00 ; '.'
00000000002215ce         db  0x00 ; '.'
00000000002215cf         db  0x00 ; '.'
00000000002215d0         db  0x00 ; '.'
00000000002215d1         db  0x00 ; '.'
00000000002215d2         db  0x00 ; '.'
00000000002215d3         db  0x00 ; '.'
00000000002215d4         db  0x00 ; '.'
00000000002215d5         db  0x00 ; '.'
00000000002215d6         db  0x00 ; '.'
00000000002215d7         db  0x00 ; '.'
00000000002215d8         db  0x00 ; '.'
00000000002215d9         db  0x00 ; '.'
00000000002215da         db  0x00 ; '.'
00000000002215db         db  0x00 ; '.'
00000000002215dc         db  0x00 ; '.'
00000000002215dd         db  0x00 ; '.'
00000000002215de         db  0x00 ; '.'
00000000002215df         db  0x00 ; '.'
00000000002215e0         db  0x00 ; '.'
00000000002215e1         db  0x00 ; '.'
00000000002215e2         db  0x00 ; '.'
00000000002215e3         db  0x00 ; '.'
00000000002215e4         db  0x00 ; '.'
00000000002215e5         db  0x00 ; '.'
00000000002215e6         db  0x00 ; '.'
00000000002215e7         db  0x00 ; '.'
00000000002215e8         db  0x00 ; '.'
00000000002215e9         db  0x00 ; '.'
00000000002215ea         db  0x00 ; '.'
00000000002215eb         db  0x00 ; '.'
00000000002215ec         db  0x00 ; '.'
00000000002215ed         db  0x00 ; '.'
00000000002215ee         db  0x00 ; '.'
00000000002215ef         db  0x00 ; '.'
00000000002215f0         db  0x00 ; '.'
00000000002215f1         db  0x00 ; '.'
00000000002215f2         db  0x00 ; '.'
00000000002215f3         db  0x00 ; '.'
00000000002215f4         db  0x00 ; '.'
00000000002215f5         db  0x00 ; '.'
00000000002215f6         db  0x00 ; '.'
00000000002215f7         db  0x00 ; '.'
00000000002215f8         db  0x00 ; '.'
00000000002215f9         db  0x00 ; '.'
00000000002215fa         db  0x00 ; '.'
00000000002215fb         db  0x00 ; '.'
00000000002215fc         db  0x00 ; '.'
00000000002215fd         db  0x00 ; '.'
00000000002215fe         db  0x00 ; '.'
00000000002215ff         db  0x00 ; '.'
0000000000221600         db  0x00 ; '.'
0000000000221601         db  0x00 ; '.'
0000000000221602         db  0x00 ; '.'
0000000000221603         db  0x00 ; '.'
0000000000221604         db  0x00 ; '.'
0000000000221605         db  0x00 ; '.'
0000000000221606         db  0x00 ; '.'
0000000000221607         db  0x00 ; '.'
0000000000221608         db  0x00 ; '.'
0000000000221609         db  0x00 ; '.'
000000000022160a         db  0x00 ; '.'
000000000022160b         db  0x00 ; '.'
000000000022160c         db  0x00 ; '.'
000000000022160d         db  0x00 ; '.'
000000000022160e         db  0x00 ; '.'
000000000022160f         db  0x00 ; '.'
0000000000221610         db  0x00 ; '.'
0000000000221611         db  0x00 ; '.'
0000000000221612         db  0x00 ; '.'
0000000000221613         db  0x00 ; '.'
0000000000221614         db  0x00 ; '.'
0000000000221615         db  0x00 ; '.'
0000000000221616         db  0x00 ; '.'
0000000000221617         db  0x00 ; '.'
0000000000221618         db  0x00 ; '.'
0000000000221619         db  0x00 ; '.'
000000000022161a         db  0x00 ; '.'
000000000022161b         db  0x00 ; '.'
000000000022161c         db  0x00 ; '.'
000000000022161d         db  0x00 ; '.'
000000000022161e         db  0x00 ; '.'
000000000022161f         db  0x00 ; '.'
0000000000221620         db  0x00 ; '.'
0000000000221621         db  0x00 ; '.'
0000000000221622         db  0x00 ; '.'
0000000000221623         db  0x00 ; '.'
0000000000221624         db  0x00 ; '.'
0000000000221625         db  0x00 ; '.'
0000000000221626         db  0x00 ; '.'
0000000000221627         db  0x00 ; '.'
0000000000221628         db  0x00 ; '.'
0000000000221629         db  0x00 ; '.'
000000000022162a         db  0x00 ; '.'
000000000022162b         db  0x00 ; '.'
000000000022162c         db  0x00 ; '.'
000000000022162d         db  0x00 ; '.'
000000000022162e         db  0x00 ; '.'
000000000022162f         db  0x00 ; '.'
0000000000221630         db  0x00 ; '.'
0000000000221631         db  0x00 ; '.'
0000000000221632         db  0x00 ; '.'
0000000000221633         db  0x00 ; '.'
0000000000221634         db  0x00 ; '.'
0000000000221635         db  0x00 ; '.'
0000000000221636         db  0x00 ; '.'
0000000000221637         db  0x00 ; '.'
0000000000221638         db  0x00 ; '.'
0000000000221639         db  0x00 ; '.'
000000000022163a         db  0x00 ; '.'
000000000022163b         db  0x00 ; '.'
000000000022163c         db  0x00 ; '.'
000000000022163d         db  0x00 ; '.'
000000000022163e         db  0x00 ; '.'
000000000022163f         db  0x00 ; '.'
0000000000221640         db  0x00 ; '.'
0000000000221641         db  0x00 ; '.'
0000000000221642         db  0x00 ; '.'
0000000000221643         db  0x00 ; '.'
0000000000221644         db  0x00 ; '.'
0000000000221645         db  0x00 ; '.'
0000000000221646         db  0x00 ; '.'
0000000000221647         db  0x00 ; '.'
0000000000221648         db  0x00 ; '.'
0000000000221649         db  0x00 ; '.'
000000000022164a         db  0x00 ; '.'
000000000022164b         db  0x00 ; '.'
000000000022164c         db  0x00 ; '.'
000000000022164d         db  0x00 ; '.'
000000000022164e         db  0x00 ; '.'
000000000022164f         db  0x00 ; '.'
0000000000221650         db  0x00 ; '.'
0000000000221651         db  0x00 ; '.'
0000000000221652         db  0x00 ; '.'
0000000000221653         db  0x00 ; '.'
0000000000221654         db  0x00 ; '.'
0000000000221655         db  0x00 ; '.'
0000000000221656         db  0x00 ; '.'
0000000000221657         db  0x00 ; '.'
0000000000221658         db  0x00 ; '.'
0000000000221659         db  0x00 ; '.'
000000000022165a         db  0x00 ; '.'
000000000022165b         db  0x00 ; '.'
000000000022165c         db  0x00 ; '.'
000000000022165d         db  0x00 ; '.'
000000000022165e         db  0x00 ; '.'
000000000022165f         db  0x00 ; '.'
0000000000221660         db  0x00 ; '.'
0000000000221661         db  0x00 ; '.'
0000000000221662         db  0x00 ; '.'
0000000000221663         db  0x00 ; '.'
0000000000221664         db  0x00 ; '.'
0000000000221665         db  0x00 ; '.'
0000000000221666         db  0x00 ; '.'
0000000000221667         db  0x00 ; '.'
0000000000221668         db  0x00 ; '.'
0000000000221669         db  0x00 ; '.'
000000000022166a         db  0x00 ; '.'
000000000022166b         db  0x00 ; '.'
000000000022166c         db  0x00 ; '.'
000000000022166d         db  0x00 ; '.'
000000000022166e         db  0x00 ; '.'
000000000022166f         db  0x00 ; '.'
0000000000221670         db  0x00 ; '.'
0000000000221671         db  0x00 ; '.'
0000000000221672         db  0x00 ; '.'
0000000000221673         db  0x00 ; '.'
0000000000221674         db  0x00 ; '.'
0000000000221675         db  0x00 ; '.'
0000000000221676         db  0x00 ; '.'
0000000000221677         db  0x00 ; '.'
0000000000221678         db  0x00 ; '.'
0000000000221679         db  0x00 ; '.'
000000000022167a         db  0x00 ; '.'
000000000022167b         db  0x00 ; '.'
000000000022167c         db  0x00 ; '.'
000000000022167d         db  0x00 ; '.'
000000000022167e         db  0x00 ; '.'
000000000022167f         db  0x00 ; '.'
0000000000221680         db  0x00 ; '.'
0000000000221681         db  0x00 ; '.'
0000000000221682         db  0x00 ; '.'
0000000000221683         db  0x00 ; '.'
0000000000221684         db  0x00 ; '.'
0000000000221685         db  0x00 ; '.'
0000000000221686         db  0x00 ; '.'
0000000000221687         db  0x00 ; '.'
0000000000221688         db  0x00 ; '.'
0000000000221689         db  0x00 ; '.'
000000000022168a         db  0x00 ; '.'
000000000022168b         db  0x00 ; '.'
000000000022168c         db  0x00 ; '.'
000000000022168d         db  0x00 ; '.'
000000000022168e         db  0x00 ; '.'
000000000022168f         db  0x00 ; '.'
0000000000221690         db  0x00 ; '.'
0000000000221691         db  0x00 ; '.'
0000000000221692         db  0x00 ; '.'
0000000000221693         db  0x00 ; '.'
0000000000221694         db  0x00 ; '.'
0000000000221695         db  0x00 ; '.'
0000000000221696         db  0x00 ; '.'
0000000000221697         db  0x00 ; '.'
0000000000221698         db  0x00 ; '.'
0000000000221699         db  0x00 ; '.'
000000000022169a         db  0x00 ; '.'
000000000022169b         db  0x00 ; '.'
000000000022169c         db  0x00 ; '.'
000000000022169d         db  0x00 ; '.'
000000000022169e         db  0x00 ; '.'
000000000022169f         db  0x00 ; '.'
00000000002216a0         db  0x00 ; '.'
00000000002216a1         db  0x00 ; '.'
00000000002216a2         db  0x00 ; '.'
00000000002216a3         db  0x00 ; '.'
00000000002216a4         db  0x00 ; '.'
00000000002216a5         db  0x00 ; '.'
00000000002216a6         db  0x00 ; '.'
00000000002216a7         db  0x00 ; '.'
00000000002216a8         db  0x00 ; '.'
00000000002216a9         db  0x00 ; '.'
00000000002216aa         db  0x00 ; '.'
00000000002216ab         db  0x00 ; '.'
00000000002216ac         db  0x00 ; '.'
00000000002216ad         db  0x00 ; '.'
00000000002216ae         db  0x00 ; '.'
00000000002216af         db  0x00 ; '.'
00000000002216b0         db  0x00 ; '.'
00000000002216b1         db  0x00 ; '.'
00000000002216b2         db  0x00 ; '.'
00000000002216b3         db  0x00 ; '.'
00000000002216b4         db  0x00 ; '.'
00000000002216b5         db  0x00 ; '.'
00000000002216b6         db  0x00 ; '.'
00000000002216b7         db  0x00 ; '.'
00000000002216b8         db  0x00 ; '.'
00000000002216b9         db  0x00 ; '.'
00000000002216ba         db  0x00 ; '.'
00000000002216bb         db  0x00 ; '.'
00000000002216bc         db  0x00 ; '.'
00000000002216bd         db  0x00 ; '.'
00000000002216be         db  0x00 ; '.'
00000000002216bf         db  0x00 ; '.'
00000000002216c0         db  0x00 ; '.'
00000000002216c1         db  0x00 ; '.'
00000000002216c2         db  0x00 ; '.'
00000000002216c3         db  0x00 ; '.'
00000000002216c4         db  0x00 ; '.'
00000000002216c5         db  0x00 ; '.'
00000000002216c6         db  0x00 ; '.'
00000000002216c7         db  0x00 ; '.'
00000000002216c8         db  0x00 ; '.'
00000000002216c9         db  0x00 ; '.'
00000000002216ca         db  0x00 ; '.'
00000000002216cb         db  0x00 ; '.'
00000000002216cc         db  0x00 ; '.'
00000000002216cd         db  0x00 ; '.'
00000000002216ce         db  0x00 ; '.'
00000000002216cf         db  0x00 ; '.'
00000000002216d0         db  0x00 ; '.'
00000000002216d1         db  0x00 ; '.'
00000000002216d2         db  0x00 ; '.'
00000000002216d3         db  0x00 ; '.'
00000000002216d4         db  0x00 ; '.'
00000000002216d5         db  0x00 ; '.'
00000000002216d6         db  0x00 ; '.'
00000000002216d7         db  0x00 ; '.'
00000000002216d8         db  0x00 ; '.'
00000000002216d9         db  0x00 ; '.'
00000000002216da         db  0x00 ; '.'
00000000002216db         db  0x00 ; '.'
00000000002216dc         db  0x00 ; '.'
00000000002216dd         db  0x00 ; '.'
00000000002216de         db  0x00 ; '.'
00000000002216df         db  0x00 ; '.'
00000000002216e0         db  0x00 ; '.'
00000000002216e1         db  0x00 ; '.'
00000000002216e2         db  0x00 ; '.'
00000000002216e3         db  0x00 ; '.'
00000000002216e4         db  0x00 ; '.'
00000000002216e5         db  0x00 ; '.'
00000000002216e6         db  0x00 ; '.'
00000000002216e7         db  0x00 ; '.'
00000000002216e8         db  0x00 ; '.'
00000000002216e9         db  0x00 ; '.'
00000000002216ea         db  0x00 ; '.'
00000000002216eb         db  0x00 ; '.'
00000000002216ec         db  0x00 ; '.'
00000000002216ed         db  0x00 ; '.'
00000000002216ee         db  0x00 ; '.'
00000000002216ef         db  0x00 ; '.'
00000000002216f0         db  0x00 ; '.'
00000000002216f1         db  0x00 ; '.'
00000000002216f2         db  0x00 ; '.'
00000000002216f3         db  0x00 ; '.'
00000000002216f4         db  0x00 ; '.'
00000000002216f5         db  0x00 ; '.'
00000000002216f6         db  0x00 ; '.'
00000000002216f7         db  0x00 ; '.'
00000000002216f8         db  0x00 ; '.'
00000000002216f9         db  0x00 ; '.'
00000000002216fa         db  0x00 ; '.'
00000000002216fb         db  0x00 ; '.'
00000000002216fc         db  0x00 ; '.'
00000000002216fd         db  0x00 ; '.'
00000000002216fe         db  0x00 ; '.'
00000000002216ff         db  0x00 ; '.'
0000000000221700         db  0x00 ; '.'
0000000000221701         db  0x00 ; '.'
0000000000221702         db  0x00 ; '.'
0000000000221703         db  0x00 ; '.'
0000000000221704         db  0x00 ; '.'
0000000000221705         db  0x00 ; '.'
0000000000221706         db  0x00 ; '.'
0000000000221707         db  0x00 ; '.'
0000000000221708         db  0x00 ; '.'
0000000000221709         db  0x00 ; '.'
000000000022170a         db  0x00 ; '.'
000000000022170b         db  0x00 ; '.'
000000000022170c         db  0x00 ; '.'
000000000022170d         db  0x00 ; '.'
000000000022170e         db  0x00 ; '.'
000000000022170f         db  0x00 ; '.'
0000000000221710         db  0x00 ; '.'
0000000000221711         db  0x00 ; '.'
0000000000221712         db  0x00 ; '.'
0000000000221713         db  0x00 ; '.'
0000000000221714         db  0x00 ; '.'
0000000000221715         db  0x00 ; '.'
0000000000221716         db  0x00 ; '.'
0000000000221717         db  0x00 ; '.'
0000000000221718         db  0x00 ; '.'
0000000000221719         db  0x00 ; '.'
000000000022171a         db  0x00 ; '.'
000000000022171b         db  0x00 ; '.'
000000000022171c         db  0x00 ; '.'
000000000022171d         db  0x00 ; '.'
000000000022171e         db  0x00 ; '.'
000000000022171f         db  0x00 ; '.'
                     context_regex:
0000000000221720         db  0x00 ; '.'                                         ; DATA XREF=main+822, main+1387, main+1412, main+1904, sub_31ea+424, sub_31ea+4916, sub_31ea+4940, sub_31ea+5021
0000000000221721         db  0x00 ; '.'
0000000000221722         db  0x00 ; '.'
0000000000221723         db  0x00 ; '.'
0000000000221724         db  0x00 ; '.'
0000000000221725         db  0x00 ; '.'
0000000000221726         db  0x00 ; '.'
0000000000221727         db  0x00 ; '.'
0000000000221728         db  0x00 ; '.'                                         ; DATA XREF=main+1926
0000000000221729         db  0x00 ; '.'
000000000022172a         db  0x00 ; '.'
000000000022172b         db  0x00 ; '.'
000000000022172c         db  0x00 ; '.'
000000000022172d         db  0x00 ; '.'
000000000022172e         db  0x00 ; '.'
000000000022172f         db  0x00 ; '.'
0000000000221730         db  0x00 ; '.'
0000000000221731         db  0x00 ; '.'
0000000000221732         db  0x00 ; '.'
0000000000221733         db  0x00 ; '.'
0000000000221734         db  0x00 ; '.'
0000000000221735         db  0x00 ; '.'
0000000000221736         db  0x00 ; '.'
0000000000221737         db  0x00 ; '.'
0000000000221738         db  0x00 ; '.'
0000000000221739         db  0x00 ; '.'
000000000022173a         db  0x00 ; '.'
000000000022173b         db  0x00 ; '.'
000000000022173c         db  0x00 ; '.'
000000000022173d         db  0x00 ; '.'
000000000022173e         db  0x00 ; '.'
000000000022173f         db  0x00 ; '.'
0000000000221740         db  0x00 ; '.'
0000000000221741         db  0x00 ; '.'
0000000000221742         db  0x00 ; '.'
0000000000221743         db  0x00 ; '.'
0000000000221744         db  0x00 ; '.'
0000000000221745         db  0x00 ; '.'
0000000000221746         db  0x00 ; '.'
0000000000221747         db  0x00 ; '.'
0000000000221748         db  0x00 ; '.'
0000000000221749         db  0x00 ; '.'
000000000022174a         db  0x00 ; '.'
000000000022174b         db  0x00 ; '.'
000000000022174c         db  0x00 ; '.'
000000000022174d         db  0x00 ; '.'
000000000022174e         db  0x00 ; '.'
000000000022174f         db  0x00 ; '.'
0000000000221750         db  0x00 ; '.'
0000000000221751         db  0x00 ; '.'
0000000000221752         db  0x00 ; '.'
0000000000221753         db  0x00 ; '.'
0000000000221754         db  0x00 ; '.'
0000000000221755         db  0x00 ; '.'
0000000000221756         db  0x00 ; '.'
0000000000221757         db  0x00 ; '.'
0000000000221758         db  0x00 ; '.'
0000000000221759         db  0x00 ; '.'
000000000022175a         db  0x00 ; '.'
000000000022175b         db  0x00 ; '.'
000000000022175c         db  0x00 ; '.'
000000000022175d         db  0x00 ; '.'
000000000022175e         db  0x00 ; '.'
000000000022175f         db  0x00 ; '.'
0000000000221760         db  0x00 ; '.'
0000000000221761         db  0x00 ; '.'
0000000000221762         db  0x00 ; '.'
0000000000221763         db  0x00 ; '.'
0000000000221764         db  0x00 ; '.'
0000000000221765         db  0x00 ; '.'
0000000000221766         db  0x00 ; '.'
0000000000221767         db  0x00 ; '.'
0000000000221768         db  0x00 ; '.'
0000000000221769         db  0x00 ; '.'
000000000022176a         db  0x00 ; '.'
000000000022176b         db  0x00 ; '.'
000000000022176c         db  0x00 ; '.'
000000000022176d         db  0x00 ; '.'
000000000022176e         db  0x00 ; '.'
000000000022176f         db  0x00 ; '.'
0000000000221770         db  0x00 ; '.'
0000000000221771         db  0x00 ; '.'
0000000000221772         db  0x00 ; '.'
0000000000221773         db  0x00 ; '.'
0000000000221774         db  0x00 ; '.'
0000000000221775         db  0x00 ; '.'
0000000000221776         db  0x00 ; '.'
0000000000221777         db  0x00 ; '.'
0000000000221778         db  0x00 ; '.'
0000000000221779         db  0x00 ; '.'
000000000022177a         db  0x00 ; '.'
000000000022177b         db  0x00 ; '.'
000000000022177c         db  0x00 ; '.'
000000000022177d         db  0x00 ; '.'
000000000022177e         db  0x00 ; '.'
000000000022177f         db  0x00 ; '.'
0000000000221780         db  0x00 ; '.'
0000000000221781         db  0x00 ; '.'
0000000000221782         db  0x00 ; '.'
0000000000221783         db  0x00 ; '.'
0000000000221784         db  0x00 ; '.'
0000000000221785         db  0x00 ; '.'
0000000000221786         db  0x00 ; '.'
0000000000221787         db  0x00 ; '.'
0000000000221788         db  0x00 ; '.'
0000000000221789         db  0x00 ; '.'
000000000022178a         db  0x00 ; '.'
000000000022178b         db  0x00 ; '.'
000000000022178c         db  0x00 ; '.'
000000000022178d         db  0x00 ; '.'
000000000022178e         db  0x00 ; '.'
000000000022178f         db  0x00 ; '.'
0000000000221790         db  0x00 ; '.'
0000000000221791         db  0x00 ; '.'
0000000000221792         db  0x00 ; '.'
0000000000221793         db  0x00 ; '.'
0000000000221794         db  0x00 ; '.'
0000000000221795         db  0x00 ; '.'
0000000000221796         db  0x00 ; '.'
0000000000221797         db  0x00 ; '.'
0000000000221798         db  0x00 ; '.'
0000000000221799         db  0x00 ; '.'
000000000022179a         db  0x00 ; '.'
000000000022179b         db  0x00 ; '.'
000000000022179c         db  0x00 ; '.'
000000000022179d         db  0x00 ; '.'
000000000022179e         db  0x00 ; '.'
000000000022179f         db  0x00 ; '.'
00000000002217a0         db  0x00 ; '.'
00000000002217a1         db  0x00 ; '.'
00000000002217a2         db  0x00 ; '.'
00000000002217a3         db  0x00 ; '.'
00000000002217a4         db  0x00 ; '.'
00000000002217a5         db  0x00 ; '.'
00000000002217a6         db  0x00 ; '.'
00000000002217a7         db  0x00 ; '.'
00000000002217a8         db  0x00 ; '.'
00000000002217a9         db  0x00 ; '.'
00000000002217aa         db  0x00 ; '.'
00000000002217ab         db  0x00 ; '.'
00000000002217ac         db  0x00 ; '.'
00000000002217ad         db  0x00 ; '.'
00000000002217ae         db  0x00 ; '.'
00000000002217af         db  0x00 ; '.'
00000000002217b0         db  0x00 ; '.'
00000000002217b1         db  0x00 ; '.'
00000000002217b2         db  0x00 ; '.'
00000000002217b3         db  0x00 ; '.'
00000000002217b4         db  0x00 ; '.'
00000000002217b5         db  0x00 ; '.'
00000000002217b6         db  0x00 ; '.'
00000000002217b7         db  0x00 ; '.'
00000000002217b8         db  0x00 ; '.'
00000000002217b9         db  0x00 ; '.'
00000000002217ba         db  0x00 ; '.'
00000000002217bb         db  0x00 ; '.'
00000000002217bc         db  0x00 ; '.'
00000000002217bd         db  0x00 ; '.'
00000000002217be         db  0x00 ; '.'
00000000002217bf         db  0x00 ; '.'
00000000002217c0         db  0x00 ; '.'
00000000002217c1         db  0x00 ; '.'
00000000002217c2         db  0x00 ; '.'
00000000002217c3         db  0x00 ; '.'
00000000002217c4         db  0x00 ; '.'
00000000002217c5         db  0x00 ; '.'
00000000002217c6         db  0x00 ; '.'
00000000002217c7         db  0x00 ; '.'
00000000002217c8         db  0x00 ; '.'
00000000002217c9         db  0x00 ; '.'
00000000002217ca         db  0x00 ; '.'
00000000002217cb         db  0x00 ; '.'
00000000002217cc         db  0x00 ; '.'
00000000002217cd         db  0x00 ; '.'
00000000002217ce         db  0x00 ; '.'
00000000002217cf         db  0x00 ; '.'
00000000002217d0         db  0x00 ; '.'
00000000002217d1         db  0x00 ; '.'
00000000002217d2         db  0x00 ; '.'
00000000002217d3         db  0x00 ; '.'
00000000002217d4         db  0x00 ; '.'
00000000002217d5         db  0x00 ; '.'
00000000002217d6         db  0x00 ; '.'
00000000002217d7         db  0x00 ; '.'
00000000002217d8         db  0x00 ; '.'
00000000002217d9         db  0x00 ; '.'
00000000002217da         db  0x00 ; '.'
00000000002217db         db  0x00 ; '.'
00000000002217dc         db  0x00 ; '.'
00000000002217dd         db  0x00 ; '.'
00000000002217de         db  0x00 ; '.'
00000000002217df         db  0x00 ; '.'
00000000002217e0         db  0x00 ; '.'
00000000002217e1         db  0x00 ; '.'
00000000002217e2         db  0x00 ; '.'
00000000002217e3         db  0x00 ; '.'
00000000002217e4         db  0x00 ; '.'
00000000002217e5         db  0x00 ; '.'
00000000002217e6         db  0x00 ; '.'
00000000002217e7         db  0x00 ; '.'
00000000002217e8         db  0x00 ; '.'
00000000002217e9         db  0x00 ; '.'
00000000002217ea         db  0x00 ; '.'
00000000002217eb         db  0x00 ; '.'
00000000002217ec         db  0x00 ; '.'
00000000002217ed         db  0x00 ; '.'
00000000002217ee         db  0x00 ; '.'
00000000002217ef         db  0x00 ; '.'
00000000002217f0         db  0x00 ; '.'
00000000002217f1         db  0x00 ; '.'
00000000002217f2         db  0x00 ; '.'
00000000002217f3         db  0x00 ; '.'
00000000002217f4         db  0x00 ; '.'
00000000002217f5         db  0x00 ; '.'
00000000002217f6         db  0x00 ; '.'
00000000002217f7         db  0x00 ; '.'
00000000002217f8         db  0x00 ; '.'
00000000002217f9         db  0x00 ; '.'
00000000002217fa         db  0x00 ; '.'
00000000002217fb         db  0x00 ; '.'
00000000002217fc         db  0x00 ; '.'
00000000002217fd         db  0x00 ; '.'
00000000002217fe         db  0x00 ; '.'
00000000002217ff         db  0x00 ; '.'
0000000000221800         db  0x00 ; '.'
0000000000221801         db  0x00 ; '.'
0000000000221802         db  0x00 ; '.'
0000000000221803         db  0x00 ; '.'
0000000000221804         db  0x00 ; '.'
0000000000221805         db  0x00 ; '.'
0000000000221806         db  0x00 ; '.'
0000000000221807         db  0x00 ; '.'
0000000000221808         db  0x00 ; '.'
0000000000221809         db  0x00 ; '.'
000000000022180a         db  0x00 ; '.'
000000000022180b         db  0x00 ; '.'
000000000022180c         db  0x00 ; '.'
000000000022180d         db  0x00 ; '.'
000000000022180e         db  0x00 ; '.'
000000000022180f         db  0x00 ; '.'
0000000000221810         db  0x00 ; '.'
0000000000221811         db  0x00 ; '.'
0000000000221812         db  0x00 ; '.'
0000000000221813         db  0x00 ; '.'
0000000000221814         db  0x00 ; '.'
0000000000221815         db  0x00 ; '.'
0000000000221816         db  0x00 ; '.'
0000000000221817         db  0x00 ; '.'
0000000000221818         db  0x00 ; '.'
0000000000221819         db  0x00 ; '.'
000000000022181a         db  0x00 ; '.'
000000000022181b         db  0x00 ; '.'
000000000022181c         db  0x00 ; '.'
000000000022181d         db  0x00 ; '.'
000000000022181e         db  0x00 ; '.'
000000000022181f         db  0x00 ; '.'
0000000000221820         db  0x00 ; '.'
0000000000221821         db  0x00 ; '.'
0000000000221822         db  0x00 ; '.'
0000000000221823         db  0x00 ; '.'
0000000000221824         db  0x00 ; '.'
0000000000221825         db  0x00 ; '.'
0000000000221826         db  0x00 ; '.'
0000000000221827         db  0x00 ; '.'
0000000000221828         db  0x00 ; '.'
0000000000221829         db  0x00 ; '.'
000000000022182a         db  0x00 ; '.'
000000000022182b         db  0x00 ; '.'
000000000022182c         db  0x00 ; '.'
000000000022182d         db  0x00 ; '.'
000000000022182e         db  0x00 ; '.'
000000000022182f         db  0x00 ; '.'
0000000000221830         db  0x00 ; '.'
0000000000221831         db  0x00 ; '.'
0000000000221832         db  0x00 ; '.'
0000000000221833         db  0x00 ; '.'
0000000000221834         db  0x00 ; '.'
0000000000221835         db  0x00 ; '.'
0000000000221836         db  0x00 ; '.'
0000000000221837         db  0x00 ; '.'
0000000000221838         db  0x00 ; '.'
0000000000221839         db  0x00 ; '.'
000000000022183a         db  0x00 ; '.'
000000000022183b         db  0x00 ; '.'
000000000022183c         db  0x00 ; '.'
000000000022183d         db  0x00 ; '.'
000000000022183e         db  0x00 ; '.'
000000000022183f         db  0x00 ; '.'
0000000000221840         db  0x00 ; '.'
0000000000221841         db  0x00 ; '.'
0000000000221842         db  0x00 ; '.'
0000000000221843         db  0x00 ; '.'
0000000000221844         db  0x00 ; '.'
0000000000221845         db  0x00 ; '.'
0000000000221846         db  0x00 ; '.'
0000000000221847         db  0x00 ; '.'
0000000000221848         db  0x00 ; '.'
0000000000221849         db  0x00 ; '.'
000000000022184a         db  0x00 ; '.'
000000000022184b         db  0x00 ; '.'
000000000022184c         db  0x00 ; '.'
000000000022184d         db  0x00 ; '.'
000000000022184e         db  0x00 ; '.'
000000000022184f         db  0x00 ; '.'
0000000000221850         db  0x00 ; '.'
0000000000221851         db  0x00 ; '.'
0000000000221852         db  0x00 ; '.'
0000000000221853         db  0x00 ; '.'
0000000000221854         db  0x00 ; '.'
0000000000221855         db  0x00 ; '.'
0000000000221856         db  0x00 ; '.'
0000000000221857         db  0x00 ; '.'
0000000000221858         db  0x00 ; '.'
0000000000221859         db  0x00 ; '.'
000000000022185a         db  0x00 ; '.'
000000000022185b         db  0x00 ; '.'
000000000022185c         db  0x00 ; '.'
000000000022185d         db  0x00 ; '.'
000000000022185e         db  0x00 ; '.'
000000000022185f         db  0x00 ; '.'
0000000000221860         db  0x00 ; '.'
0000000000221861         db  0x00 ; '.'
0000000000221862         db  0x00 ; '.'
0000000000221863         db  0x00 ; '.'
0000000000221864         db  0x00 ; '.'
0000000000221865         db  0x00 ; '.'
0000000000221866         db  0x00 ; '.'
0000000000221867         db  0x00 ; '.'
                     ignore_file:
0000000000221868         db  0x00 ; '.'                                         ; DATA XREF=main+225, main+1556, main+2207, sub_31ea+342
0000000000221869         db  0x00 ; '.'
000000000022186a         db  0x00 ; '.'
000000000022186b         db  0x00 ; '.'
000000000022186c         db  0x00 ; '.'
000000000022186d         db  0x00 ; '.'
000000000022186e         db  0x00 ; '.'
000000000022186f         db  0x00 ; '.'
                     only_file:
0000000000221870         db  0x00 ; '.'                                         ; DATA XREF=main+500, main+1594, main+2249, sub_31ea+326
0000000000221871         db  0x00 ; '.'
0000000000221872         db  0x00 ; '.'
0000000000221873         db  0x00 ; '.'
0000000000221874         db  0x00 ; '.'
0000000000221875         db  0x00 ; '.'
0000000000221876         db  0x00 ; '.'
0000000000221877         db  0x00 ; '.'
                     break_file:
0000000000221878         db  0x00 ; '.'                                         ; DATA XREF=main+315, main+1438, sub_31ea+72
0000000000221879         db  0x00 ; '.'
000000000022187a         db  0x00 ; '.'
000000000022187b         db  0x00 ; '.'
000000000022187c         db  0x00 ; '.'
000000000022187d         db  0x00 ; '.'
000000000022187e         db  0x00 ; '.'
000000000022187f         db  0x00 ; '.'
                     ignore_case:
0000000000221880         db  0x00 ; '.'                                         ; DATA XREF=main+542, main+1331, compare_words+18, compile_regex
0000000000221881         db  0x00 ; '.'
0000000000221882         db  0x00 ; '.'
0000000000221883         db  0x00 ; '.'
                     output_format:
0000000000221884         db  0x00 ; '.'                                         ; DATA XREF=main+269, main+399, main+563, main+1302, main+1325, main+2915, sub_31ea+2080, print_field+86
0000000000221885         db  0x00 ; '.'
0000000000221886         db  0x00 ; '.'
0000000000221887         db  0x00 ; '.'
                     right_reference:
0000000000221888         db  0x00 ; '.'                                         ; DATA XREF=main+587, main+2659, sub_31ea+3596, sub_31ea+3936, sub_31ea+4015, sub_31ea+4128
                     input_reference:
0000000000221889         db  0x00 ; '.'                                         ; DATA XREF=main+798, main+1758, main+2190, main+2650, main+3975, sub_31ea+2487, sub_31ea+2805, sub_31ea+3498, sub_31ea+3923, sub_31ea+4900, sub_31ea+5618
                     auto_reference:
000000000022188a         db  0x00 ; '.'                                         ; DATA XREF=main+608, main+2333, main+2637, sub_31ea+301, sub_31ea+1946, sub_31ea+2478, sub_31ea+3489, sub_31ea+3605, sub_31ea+3910, sub_31ea+4002
000000000022188b         db  0x00 ; '.'
000000000022188c         db  0x00 ; '.'
000000000022188d         db  0x00 ; '.'
000000000022188e         db  0x00 ; '.'
000000000022188f         db  0x00 ; '.'
                     ignore_EPIPE:
0000000000221890         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
0000000000221891         db  0x00 ; '.'
0000000000221892         db  0x00 ; '.'
0000000000221893         db  0x00 ; '.'
0000000000221894         db  0x00 ; '.'
0000000000221895         db  0x00 ; '.'
0000000000221896         db  0x00 ; '.'
0000000000221897         db  0x00 ; '.'
                     file_name:
0000000000221898         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
0000000000221899         db  0x00 ; '.'
000000000022189a         db  0x00 ; '.'
000000000022189b         db  0x00 ; '.'
000000000022189c         db  0x00 ; '.'
000000000022189d         db  0x00 ; '.'
000000000022189e         db  0x00 ; '.'
000000000022189f         db  0x00 ; '.'
                     program_name:
00000000002218a0         db  0x00 ; '.'                                         ; DATA XREF=usage+20, set_program_name+109
00000000002218a1         db  0x00 ; '.'
00000000002218a2         db  0x00 ; '.'
00000000002218a3         db  0x00 ; '.'
00000000002218a4         db  0x00 ; '.'
00000000002218a5         db  0x00 ; '.'
00000000002218a6         db  0x00 ; '.'
00000000002218a7         db  0x00 ; '.'
00000000002218a8         db  0x00 ; '.'
00000000002218a9         db  0x00 ; '.'
00000000002218aa         db  0x00 ; '.'
00000000002218ab         db  0x00 ; '.'
00000000002218ac         db  0x00 ; '.'
00000000002218ad         db  0x00 ; '.'
00000000002218ae         db  0x00 ; '.'
00000000002218af         db  0x00 ; '.'
00000000002218b0         db  0x00 ; '.'
00000000002218b1         db  0x00 ; '.'
00000000002218b2         db  0x00 ; '.'
00000000002218b3         db  0x00 ; '.'
00000000002218b4         db  0x00 ; '.'
00000000002218b5         db  0x00 ; '.'
00000000002218b6         db  0x00 ; '.'
00000000002218b7         db  0x00 ; '.'
00000000002218b8         db  0x00 ; '.'
00000000002218b9         db  0x00 ; '.'
00000000002218ba         db  0x00 ; '.'
00000000002218bb         db  0x00 ; '.'
00000000002218bc         db  0x00 ; '.'
00000000002218bd         db  0x00 ; '.'
00000000002218be         db  0x00 ; '.'
00000000002218bf         db  0x00 ; '.'
                     slot0:
00000000002218c0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
00000000002218c1         db  0x00 ; '.'
00000000002218c2         db  0x00 ; '.'
00000000002218c3         db  0x00 ; '.'
00000000002218c4         db  0x00 ; '.'
00000000002218c5         db  0x00 ; '.'
00000000002218c6         db  0x00 ; '.'
00000000002218c7         db  0x00 ; '.'
00000000002218c8         db  0x00 ; '.'
00000000002218c9         db  0x00 ; '.'
00000000002218ca         db  0x00 ; '.'
00000000002218cb         db  0x00 ; '.'
00000000002218cc         db  0x00 ; '.'
00000000002218cd         db  0x00 ; '.'
00000000002218ce         db  0x00 ; '.'
00000000002218cf         db  0x00 ; '.'
00000000002218d0         db  0x00 ; '.'
00000000002218d1         db  0x00 ; '.'
00000000002218d2         db  0x00 ; '.'
00000000002218d3         db  0x00 ; '.'
00000000002218d4         db  0x00 ; '.'
00000000002218d5         db  0x00 ; '.'
00000000002218d6         db  0x00 ; '.'
00000000002218d7         db  0x00 ; '.'
00000000002218d8         db  0x00 ; '.'
00000000002218d9         db  0x00 ; '.'
00000000002218da         db  0x00 ; '.'
00000000002218db         db  0x00 ; '.'
00000000002218dc         db  0x00 ; '.'
00000000002218dd         db  0x00 ; '.'
00000000002218de         db  0x00 ; '.'
00000000002218df         db  0x00 ; '.'
00000000002218e0         db  0x00 ; '.'
00000000002218e1         db  0x00 ; '.'
00000000002218e2         db  0x00 ; '.'
00000000002218e3         db  0x00 ; '.'
00000000002218e4         db  0x00 ; '.'
00000000002218e5         db  0x00 ; '.'
00000000002218e6         db  0x00 ; '.'
00000000002218e7         db  0x00 ; '.'
00000000002218e8         db  0x00 ; '.'
00000000002218e9         db  0x00 ; '.'
00000000002218ea         db  0x00 ; '.'
00000000002218eb         db  0x00 ; '.'
00000000002218ec         db  0x00 ; '.'
00000000002218ed         db  0x00 ; '.'
00000000002218ee         db  0x00 ; '.'
00000000002218ef         db  0x00 ; '.'
00000000002218f0         db  0x00 ; '.'
00000000002218f1         db  0x00 ; '.'
00000000002218f2         db  0x00 ; '.'
00000000002218f3         db  0x00 ; '.'
00000000002218f4         db  0x00 ; '.'
00000000002218f5         db  0x00 ; '.'
00000000002218f6         db  0x00 ; '.'
00000000002218f7         db  0x00 ; '.'
00000000002218f8         db  0x00 ; '.'
00000000002218f9         db  0x00 ; '.'
00000000002218fa         db  0x00 ; '.'
00000000002218fb         db  0x00 ; '.'
00000000002218fc         db  0x00 ; '.'
00000000002218fd         db  0x00 ; '.'
00000000002218fe         db  0x00 ; '.'
00000000002218ff         db  0x00 ; '.'
0000000000221900         db  0x00 ; '.'
0000000000221901         db  0x00 ; '.'
0000000000221902         db  0x00 ; '.'
0000000000221903         db  0x00 ; '.'
0000000000221904         db  0x00 ; '.'
0000000000221905         db  0x00 ; '.'
0000000000221906         db  0x00 ; '.'
0000000000221907         db  0x00 ; '.'
0000000000221908         db  0x00 ; '.'
0000000000221909         db  0x00 ; '.'
000000000022190a         db  0x00 ; '.'
000000000022190b         db  0x00 ; '.'
000000000022190c         db  0x00 ; '.'
000000000022190d         db  0x00 ; '.'
000000000022190e         db  0x00 ; '.'
000000000022190f         db  0x00 ; '.'
0000000000221910         db  0x00 ; '.'
0000000000221911         db  0x00 ; '.'
0000000000221912         db  0x00 ; '.'
0000000000221913         db  0x00 ; '.'
0000000000221914         db  0x00 ; '.'
0000000000221915         db  0x00 ; '.'
0000000000221916         db  0x00 ; '.'
0000000000221917         db  0x00 ; '.'
0000000000221918         db  0x00 ; '.'
0000000000221919         db  0x00 ; '.'
000000000022191a         db  0x00 ; '.'
000000000022191b         db  0x00 ; '.'
000000000022191c         db  0x00 ; '.'
000000000022191d         db  0x00 ; '.'
000000000022191e         db  0x00 ; '.'
000000000022191f         db  0x00 ; '.'
0000000000221920         db  0x00 ; '.'
0000000000221921         db  0x00 ; '.'
0000000000221922         db  0x00 ; '.'
0000000000221923         db  0x00 ; '.'
0000000000221924         db  0x00 ; '.'
0000000000221925         db  0x00 ; '.'
0000000000221926         db  0x00 ; '.'
0000000000221927         db  0x00 ; '.'
0000000000221928         db  0x00 ; '.'
0000000000221929         db  0x00 ; '.'
000000000022192a         db  0x00 ; '.'
000000000022192b         db  0x00 ; '.'
000000000022192c         db  0x00 ; '.'
000000000022192d         db  0x00 ; '.'
000000000022192e         db  0x00 ; '.'
000000000022192f         db  0x00 ; '.'
0000000000221930         db  0x00 ; '.'
0000000000221931         db  0x00 ; '.'
0000000000221932         db  0x00 ; '.'
0000000000221933         db  0x00 ; '.'
0000000000221934         db  0x00 ; '.'
0000000000221935         db  0x00 ; '.'
0000000000221936         db  0x00 ; '.'
0000000000221937         db  0x00 ; '.'
0000000000221938         db  0x00 ; '.'
0000000000221939         db  0x00 ; '.'
000000000022193a         db  0x00 ; '.'
000000000022193b         db  0x00 ; '.'
000000000022193c         db  0x00 ; '.'
000000000022193d         db  0x00 ; '.'
000000000022193e         db  0x00 ; '.'
000000000022193f         db  0x00 ; '.'
0000000000221940         db  0x00 ; '.'
0000000000221941         db  0x00 ; '.'
0000000000221942         db  0x00 ; '.'
0000000000221943         db  0x00 ; '.'
0000000000221944         db  0x00 ; '.'
0000000000221945         db  0x00 ; '.'
0000000000221946         db  0x00 ; '.'
0000000000221947         db  0x00 ; '.'
0000000000221948         db  0x00 ; '.'
0000000000221949         db  0x00 ; '.'
000000000022194a         db  0x00 ; '.'
000000000022194b         db  0x00 ; '.'
000000000022194c         db  0x00 ; '.'
000000000022194d         db  0x00 ; '.'
000000000022194e         db  0x00 ; '.'
000000000022194f         db  0x00 ; '.'
0000000000221950         db  0x00 ; '.'
0000000000221951         db  0x00 ; '.'
0000000000221952         db  0x00 ; '.'
0000000000221953         db  0x00 ; '.'
0000000000221954         db  0x00 ; '.'
0000000000221955         db  0x00 ; '.'
0000000000221956         db  0x00 ; '.'
0000000000221957         db  0x00 ; '.'
0000000000221958         db  0x00 ; '.'
0000000000221959         db  0x00 ; '.'
000000000022195a         db  0x00 ; '.'
000000000022195b         db  0x00 ; '.'
000000000022195c         db  0x00 ; '.'
000000000022195d         db  0x00 ; '.'
000000000022195e         db  0x00 ; '.'
000000000022195f         db  0x00 ; '.'
0000000000221960         db  0x00 ; '.'
0000000000221961         db  0x00 ; '.'
0000000000221962         db  0x00 ; '.'
0000000000221963         db  0x00 ; '.'
0000000000221964         db  0x00 ; '.'
0000000000221965         db  0x00 ; '.'
0000000000221966         db  0x00 ; '.'
0000000000221967         db  0x00 ; '.'
0000000000221968         db  0x00 ; '.'
0000000000221969         db  0x00 ; '.'
000000000022196a         db  0x00 ; '.'
000000000022196b         db  0x00 ; '.'
000000000022196c         db  0x00 ; '.'
000000000022196d         db  0x00 ; '.'
000000000022196e         db  0x00 ; '.'
000000000022196f         db  0x00 ; '.'
0000000000221970         db  0x00 ; '.'
0000000000221971         db  0x00 ; '.'
0000000000221972         db  0x00 ; '.'
0000000000221973         db  0x00 ; '.'
0000000000221974         db  0x00 ; '.'
0000000000221975         db  0x00 ; '.'
0000000000221976         db  0x00 ; '.'
0000000000221977         db  0x00 ; '.'
0000000000221978         db  0x00 ; '.'
0000000000221979         db  0x00 ; '.'
000000000022197a         db  0x00 ; '.'
000000000022197b         db  0x00 ; '.'
000000000022197c         db  0x00 ; '.'
000000000022197d         db  0x00 ; '.'
000000000022197e         db  0x00 ; '.'
000000000022197f         db  0x00 ; '.'
0000000000221980         db  0x00 ; '.'
0000000000221981         db  0x00 ; '.'
0000000000221982         db  0x00 ; '.'
0000000000221983         db  0x00 ; '.'
0000000000221984         db  0x00 ; '.'
0000000000221985         db  0x00 ; '.'
0000000000221986         db  0x00 ; '.'
0000000000221987         db  0x00 ; '.'
0000000000221988         db  0x00 ; '.'
0000000000221989         db  0x00 ; '.'
000000000022198a         db  0x00 ; '.'
000000000022198b         db  0x00 ; '.'
000000000022198c         db  0x00 ; '.'
000000000022198d         db  0x00 ; '.'
000000000022198e         db  0x00 ; '.'
000000000022198f         db  0x00 ; '.'
0000000000221990         db  0x00 ; '.'
0000000000221991         db  0x00 ; '.'
0000000000221992         db  0x00 ; '.'
0000000000221993         db  0x00 ; '.'
0000000000221994         db  0x00 ; '.'
0000000000221995         db  0x00 ; '.'
0000000000221996         db  0x00 ; '.'
0000000000221997         db  0x00 ; '.'
0000000000221998         db  0x00 ; '.'
0000000000221999         db  0x00 ; '.'
000000000022199a         db  0x00 ; '.'
000000000022199b         db  0x00 ; '.'
000000000022199c         db  0x00 ; '.'
000000000022199d         db  0x00 ; '.'
000000000022199e         db  0x00 ; '.'
000000000022199f         db  0x00 ; '.'
00000000002219a0         db  0x00 ; '.'
00000000002219a1         db  0x00 ; '.'
00000000002219a2         db  0x00 ; '.'
00000000002219a3         db  0x00 ; '.'
00000000002219a4         db  0x00 ; '.'
00000000002219a5         db  0x00 ; '.'
00000000002219a6         db  0x00 ; '.'
00000000002219a7         db  0x00 ; '.'
00000000002219a8         db  0x00 ; '.'
00000000002219a9         db  0x00 ; '.'
00000000002219aa         db  0x00 ; '.'
00000000002219ab         db  0x00 ; '.'
00000000002219ac         db  0x00 ; '.'
00000000002219ad         db  0x00 ; '.'
00000000002219ae         db  0x00 ; '.'
00000000002219af         db  0x00 ; '.'
00000000002219b0         db  0x00 ; '.'
00000000002219b1         db  0x00 ; '.'
00000000002219b2         db  0x00 ; '.'
00000000002219b3         db  0x00 ; '.'
00000000002219b4         db  0x00 ; '.'
00000000002219b5         db  0x00 ; '.'
00000000002219b6         db  0x00 ; '.'
00000000002219b7         db  0x00 ; '.'
00000000002219b8         db  0x00 ; '.'
00000000002219b9         db  0x00 ; '.'
00000000002219ba         db  0x00 ; '.'
00000000002219bb         db  0x00 ; '.'
00000000002219bc         db  0x00 ; '.'
00000000002219bd         db  0x00 ; '.'
00000000002219be         db  0x00 ; '.'
00000000002219bf         db  0x00 ; '.'
                     default_quoting_options:
00000000002219c0         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
00000000002219c1         db  0x00 ; '.'
00000000002219c2         db  0x00 ; '.'
00000000002219c3         db  0x00 ; '.'
00000000002219c4         db  0x00 ; '.'
00000000002219c5         db  0x00 ; '.'
00000000002219c6         db  0x00 ; '.'
00000000002219c7         db  0x00 ; '.'
00000000002219c8         db  0x00 ; '.'
00000000002219c9         db  0x00 ; '.'
00000000002219ca         db  0x00 ; '.'
00000000002219cb         db  0x00 ; '.'
00000000002219cc         db  0x00 ; '.'
00000000002219cd         db  0x00 ; '.'
00000000002219ce         db  0x00 ; '.'
00000000002219cf         db  0x00 ; '.'
00000000002219d0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
00000000002219d1         db  0x00 ; '.'
00000000002219d2         db  0x00 ; '.'
00000000002219d3         db  0x00 ; '.'
00000000002219d4         db  0x00 ; '.'
00000000002219d5         db  0x00 ; '.'
00000000002219d6         db  0x00 ; '.'
00000000002219d7         db  0x00 ; '.'
00000000002219d8         db  0x00 ; '.'
00000000002219d9         db  0x00 ; '.'
00000000002219da         db  0x00 ; '.'
00000000002219db         db  0x00 ; '.'
00000000002219dc         db  0x00 ; '.'
00000000002219dd         db  0x00 ; '.'
00000000002219de         db  0x00 ; '.'
00000000002219df         db  0x00 ; '.'
00000000002219e0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
00000000002219e1         db  0x00 ; '.'
00000000002219e2         db  0x00 ; '.'
00000000002219e3         db  0x00 ; '.'
00000000002219e4         db  0x00 ; '.'
00000000002219e5         db  0x00 ; '.'
00000000002219e6         db  0x00 ; '.'
00000000002219e7         db  0x00 ; '.'
00000000002219e8         db  0x00 ; '.'
00000000002219e9         db  0x00 ; '.'
00000000002219ea         db  0x00 ; '.'
00000000002219eb         db  0x00 ; '.'
00000000002219ec         db  0x00 ; '.'
00000000002219ed         db  0x00 ; '.'
00000000002219ee         db  0x00 ; '.'
00000000002219ef         db  0x00 ; '.'
                     qword_2219f0:
00000000002219f0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
00000000002219f1         db  0x00 ; '.'
00000000002219f2         db  0x00 ; '.'
00000000002219f3         db  0x00 ; '.'
00000000002219f4         db  0x00 ; '.'
00000000002219f5         db  0x00 ; '.'
00000000002219f6         db  0x00 ; '.'
00000000002219f7         db  0x00 ; '.'
                     rpl_re_syntax_options:
00000000002219f8         db  0x00 ; '.'                                         ; DATA XREF=rpl_re_compile_pattern+4, rpl_re_set_syntax, rpl_re_set_syntax+7
00000000002219f9         db  0x00 ; '.'
00000000002219fa         db  0x00 ; '.'
00000000002219fb         db  0x00 ; '.'
00000000002219fc         db  0x00 ; '.'
00000000002219fd         db  0x00 ; '.'
00000000002219fe         db  0x00 ; '.'
00000000002219ff         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x221a10; 0x221f20[ (1296 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x221a10; 0x443930[ (2236192 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     __ctype_toupper_loc:
0000000000221a10         extern function code                                   ; DATA XREF=__ctype_toupper_loc@GOT
                     free:
0000000000221a18         extern function code                                   ; DATA XREF=free@GOT
                     abort:
0000000000221a20         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
0000000000221a28         extern function code                                   ; DATA XREF=__errno_location@GOT
                     strncmp:
0000000000221a30         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
0000000000221a38         extern function code
                     _exit:
0000000000221a40         extern function code                                   ; DATA XREF=_exit@GOT
                     ftello:
0000000000221a48         extern function code                                   ; DATA XREF=ftello@GOT
                     __fpending:
0000000000221a50         extern function code                                   ; DATA XREF=__fpending@GOT
                     iconv:
0000000000221a58         extern function code                                   ; DATA XREF=iconv@GOT
                     ferror:
0000000000221a60         extern function code                                   ; DATA XREF=ferror@GOT
                     qsort:
0000000000221a68         extern function code                                   ; DATA XREF=qsort@GOT
                     fread:
0000000000221a70         extern function code                                   ; DATA XREF=fread@GOT
                     iswcntrl:
0000000000221a78         extern function code                                   ; DATA XREF=iswcntrl@GOT
                     textdomain:
0000000000221a80         extern function code                                   ; DATA XREF=textdomain@GOT
                     __strtol_internal:
0000000000221a88         extern function code                                   ; DATA XREF=__strtol_internal@GOT
                     iswctype:
0000000000221a90         extern function code                                   ; DATA XREF=iswctype@GOT
                     fclose:
0000000000221a98         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
0000000000221aa0         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     stpcpy:
0000000000221aa8         extern function code                                   ; DATA XREF=stpcpy@GOT
                     dcgettext:
0000000000221ab0         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
0000000000221ab8         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
0000000000221ac0         extern function code                                   ; DATA XREF=strlen@GOT
                     __stack_chk_fail:
0000000000221ac8         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
0000000000221ad0         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
0000000000221ad8         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     dup2:
0000000000221ae0         extern function code                                   ; DATA XREF=dup2@GOT
                     strchr:
0000000000221ae8         extern function code                                   ; DATA XREF=strchr@GOT
                     __overflow:
0000000000221af0         extern function code                                   ; DATA XREF=__overflow@GOT
                     strrchr:
0000000000221af8         extern function code                                   ; DATA XREF=strrchr@GOT
                     lseek:
0000000000221b00         extern function code                                   ; DATA XREF=lseek@GOT
                     __assert_fail:
0000000000221b08         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     memset:
0000000000221b10         extern function code                                   ; DATA XREF=memset@GOT
                     freopen:
0000000000221b18         extern function code                                   ; DATA XREF=freopen@GOT
                     strnlen:
0000000000221b20         extern function code                                   ; DATA XREF=strnlen@GOT
                     close:
0000000000221b28         extern function code                                   ; DATA XREF=close@GOT
                     memchr:
0000000000221b30         extern function code                                   ; DATA XREF=memchr@GOT
                     __libc_start_main:
0000000000221b38         extern function code
                     memcmp:
0000000000221b40         extern function code                                   ; DATA XREF=memcmp@GOT
                     wctype:
0000000000221b48         extern function code                                   ; DATA XREF=wctype@GOT
                     fputs_unlocked:
0000000000221b50         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
0000000000221b58         extern function code                                   ; DATA XREF=calloc@GOT
                     strcmp:
0000000000221b60         extern function code                                   ; DATA XREF=strcmp@GOT
                     __gmon_start__:
0000000000221b68         extern function code
                     memcpy:
0000000000221b70         extern function code                                   ; DATA XREF=memcpy@GOT
                     fileno:
0000000000221b78         extern function code                                   ; DATA XREF=fileno@GOT
                     wcwidth:
0000000000221b80         extern function code                                   ; DATA XREF=wcwidth@GOT
                     iswalnum:
0000000000221b88         extern function code                                   ; DATA XREF=iswalnum@GOT
                     malloc:
0000000000221b90         extern function code                                   ; DATA XREF=malloc@GOT
                     wcrtomb:
0000000000221b98         extern function code                                   ; DATA XREF=wcrtomb@GOT
                     fflush:
0000000000221ba0         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
0000000000221ba8         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     __fxstat:
0000000000221bb0         extern function code                                   ; DATA XREF=__fxstat@GOT
                     __freading:
0000000000221bb8         extern function code                                   ; DATA XREF=__freading@GOT
                     fwrite_unlocked:
0000000000221bc0         extern function code                                   ; DATA XREF=fwrite_unlocked@GOT
                     realloc:
0000000000221bc8         extern function code                                   ; DATA XREF=realloc@GOT
                     setlocale:
0000000000221bd0         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
0000000000221bd8         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     iconv_close:
0000000000221be0         extern function code                                   ; DATA XREF=iconv_close@GOT
                     iswspace:
0000000000221be8         extern function code                                   ; DATA XREF=iswspace@GOT
                     btowc:
0000000000221bf0         extern function code                                   ; DATA XREF=btowc@GOT
                     memmove:
0000000000221bf8         extern function code                                   ; DATA XREF=memmove@GOT
                     error:
0000000000221c00         extern function code                                   ; DATA XREF=error@GOT
                     open:
0000000000221c08         extern function code                                   ; DATA XREF=open@GOT
                     fseeko:
0000000000221c10         extern function code                                   ; DATA XREF=fseeko@GOT
                     fopen:
0000000000221c18         extern function code                                   ; DATA XREF=fopen@GOT
                     towlower:
0000000000221c20         extern function code                                   ; DATA XREF=towlower@GOT
                     towupper:
0000000000221c28         extern function code                                   ; DATA XREF=towupper@GOT
                     __cxa_atexit:
0000000000221c30         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     exit:
0000000000221c38         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
0000000000221c40         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
0000000000221c48         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
0000000000221c50         extern function code
                     strdup:
0000000000221c58         extern function code                                   ; DATA XREF=strdup@GOT
                     mbsinit:
0000000000221c60         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
0000000000221c68         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
0000000000221c70         extern function code
                     __ctype_tolower_loc:
0000000000221c78         extern function code                                   ; DATA XREF=__ctype_tolower_loc@GOT
                     __ctype_b_loc:
0000000000221c80         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     iconv_open:
0000000000221c88         extern function code                                   ; DATA XREF=iconv_open@GOT
                     __sprintf_chk:
0000000000221c90         extern function code                                   ; DATA XREF=__sprintf_chk@GOT
                     __ctype_toupper_loc@@GLIBC_2.3:
0000000000221c98         extern function code
                     free@@GLIBC_2.2.5:
0000000000221ca0         extern function code
                     abort@@GLIBC_2.2.5:
0000000000221ca8         extern function code
                     __errno_location@@GLIBC_2.2.5:
0000000000221cb0         extern function code
                     strncmp@@GLIBC_2.2.5:
0000000000221cb8         extern function code
                     _ITM_deregisterTMCloneTable_221cc0:        // _ITM_deregisterTMCloneTable
0000000000221cc0         extern function code
                     _exit@@GLIBC_2.2.5:
0000000000221cc8         extern function code
                     ftello@@GLIBC_2.2.5:
0000000000221cd0         extern function code
                     __fpending@@GLIBC_2.2.5:
0000000000221cd8         extern function code
                     iconv@@GLIBC_2.2.5:
0000000000221ce0         extern function code
                     ferror@@GLIBC_2.2.5:
0000000000221ce8         extern function code
                     qsort@@GLIBC_2.2.5:
0000000000221cf0         extern function code
                     fread@@GLIBC_2.2.5:
0000000000221cf8         extern function code
                     iswcntrl@@GLIBC_2.2.5:
0000000000221d00         extern function code
                     textdomain@@GLIBC_2.2.5:
0000000000221d08         extern function code
                     __strtol_internal@@GLIBC_2.2.5:
0000000000221d10         extern function code
                     iswctype@@GLIBC_2.2.5:
0000000000221d18         extern function code
                     fclose@@GLIBC_2.2.5:
0000000000221d20         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
0000000000221d28         extern function code
                     stpcpy@@GLIBC_2.2.5:
0000000000221d30         extern function code
                     dcgettext@@GLIBC_2.2.5:
0000000000221d38         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
0000000000221d40         extern function code
                     strlen@@GLIBC_2.2.5:
0000000000221d48         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
0000000000221d50         extern function code
                     getopt_long@@GLIBC_2.2.5:
0000000000221d58         extern function code
                     mbrtowc@@GLIBC_2.2.5:
0000000000221d60         extern function code
                     dup2@@GLIBC_2.2.5:
0000000000221d68         extern function code
                     strchr@@GLIBC_2.2.5:
0000000000221d70         extern function code
                     __overflow@@GLIBC_2.2.5:
0000000000221d78         extern function code
                     strrchr@@GLIBC_2.2.5:
0000000000221d80         extern function code
                     lseek@@GLIBC_2.2.5:
0000000000221d88         extern function code
                     __assert_fail@@GLIBC_2.2.5:
0000000000221d90         extern function code
                     memset@@GLIBC_2.2.5:
0000000000221d98         extern function code
                     freopen@@GLIBC_2.2.5:
0000000000221da0         extern function code
                     strnlen@@GLIBC_2.2.5:
0000000000221da8         extern function code
                     close@@GLIBC_2.2.5:
0000000000221db0         extern function code
                     memchr@@GLIBC_2.2.5:
0000000000221db8         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
0000000000221dc0         extern function code
                     memcmp@@GLIBC_2.2.5:
0000000000221dc8         extern function code
                     wctype@@GLIBC_2.2.5:
0000000000221dd0         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
0000000000221dd8         extern function code
                     calloc@@GLIBC_2.2.5:
0000000000221de0         extern function code
                     strcmp@@GLIBC_2.2.5:
0000000000221de8         extern function code
                     __gmon_start___221df0:        // __gmon_start__
0000000000221df0         extern function code
                     memcpy@@GLIBC_2.14:
0000000000221df8         extern function code
                     fileno@@GLIBC_2.2.5:
0000000000221e00         extern function code
                     wcwidth@@GLIBC_2.2.5:
0000000000221e08         extern function code
                     iswalnum@@GLIBC_2.2.5:
0000000000221e10         extern function code
                     malloc@@GLIBC_2.2.5:
0000000000221e18         extern function code
                     wcrtomb@@GLIBC_2.2.5:
0000000000221e20         extern function code
                     fflush@@GLIBC_2.2.5:
0000000000221e28         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
0000000000221e30         extern function code
                     __fxstat@@GLIBC_2.2.5:
0000000000221e38         extern function code
                     __freading@@GLIBC_2.2.5:
0000000000221e40         extern function code
                     fwrite_unlocked@@GLIBC_2.2.5:
0000000000221e48         extern function code
                     realloc@@GLIBC_2.2.5:
0000000000221e50         extern function code
                     setlocale@@GLIBC_2.2.5:
0000000000221e58         extern function code
                     __printf_chk@@GLIBC_2.3.4:
0000000000221e60         extern function code
                     iconv_close@@GLIBC_2.2.5:
0000000000221e68         extern function code
                     iswspace@@GLIBC_2.2.5:
0000000000221e70         extern function code
                     btowc@@GLIBC_2.2.5:
0000000000221e78         extern function code
                     memmove@@GLIBC_2.2.5:
0000000000221e80         extern function code
                     error@@GLIBC_2.2.5:
0000000000221e88         extern function code
                     open@@GLIBC_2.2.5:
0000000000221e90         extern function code
                     fseeko@@GLIBC_2.2.5:
0000000000221e98         extern function code
                     fopen@@GLIBC_2.2.5:
0000000000221ea0         extern function code
                     towlower@@GLIBC_2.2.5:
0000000000221ea8         extern function code
                     towupper@@GLIBC_2.2.5:
0000000000221eb0         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
0000000000221eb8         extern function code
                     exit@@GLIBC_2.2.5:
0000000000221ec0         extern function code
                     fwrite@@GLIBC_2.2.5:
0000000000221ec8         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
0000000000221ed0         extern function code
                     _ITM_registerTMCloneTable_221ed8:        // _ITM_registerTMCloneTable
0000000000221ed8         extern function code
                     strdup@@GLIBC_2.2.5:
0000000000221ee0         extern function code
                     mbsinit@@GLIBC_2.2.5:
0000000000221ee8         extern function code
                     iswprint@@GLIBC_2.2.5:
0000000000221ef0         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
0000000000221ef8         extern function code
                     __ctype_tolower_loc@@GLIBC_2.3:
0000000000221f00         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
0000000000221f08         extern function code
                     iconv_open@@GLIBC_2.2.5:
0000000000221f10         extern function code
                     __sprintf_chk@@GLIBC_2.3.4:
0000000000221f18         extern function code
